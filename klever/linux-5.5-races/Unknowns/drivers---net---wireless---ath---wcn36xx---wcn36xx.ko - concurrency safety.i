/* Generated by Frama-C */
#line 106  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/compiler_types.h"
typedef signed char __s8;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef unsigned char __u8;
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef short __s16;
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef unsigned short __u16;
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef int __s32;
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef unsigned int __u32;
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef long long __s64;
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef unsigned long long __u64;
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef __s8 s8;
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/int-ll64.h"
typedef __u8 u8;
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/int-ll64.h"
typedef __s16 s16;
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/int-ll64.h"
typedef __u16 u16;
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/int-ll64.h"
typedef __s32 s32;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/int-ll64.h"
typedef __u32 u32;
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/int-ll64.h"
typedef __s64 s64;
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/int-ll64.h"
typedef __u64 u64;
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/uapi/asm/posix_types_64.h"
typedef long __kernel_long_t;
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef unsigned long __kernel_ulong_t;
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef int __kernel_pid_t;
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef unsigned int __kernel_uid32_t;
#line 50  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef unsigned int __kernel_gid32_t;
#line 51  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef __kernel_ulong_t __kernel_size_t;
#line 73  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef __kernel_long_t __kernel_ssize_t;
#line 88  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef long long __kernel_loff_t;
#line 91  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef long long __kernel_time64_t;
#line 92  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef __kernel_long_t __kernel_clock_t;
#line 93  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef int __kernel_timer_t;
#line 94  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef int __kernel_clockid_t;
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef __u16 __le16;
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef __u16 __be16;
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef __u32 __le32;
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef __u32 __be32;
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef __u64 __be64;
#line 37  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef __u32 __wsum;
#line 38  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef unsigned int __poll_t;
#line 53  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef u32 __kernel_dev_t;
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_dev_t dev_t;
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef unsigned short umode_t;
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_pid_t pid_t;
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_clockid_t clockid_t;
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef _Bool bool;
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_uid32_t uid_t;
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_gid32_t gid_t;
#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_loff_t loff_t;
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_size_t size_t;
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_ssize_t ssize_t;
#line 103  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef s32 int32_t;
#line 109  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef u32 uint32_t;
#line 115  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef u64 sector_t;
#line 131  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef u64 blkcnt_t;
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef u64 dma_addr_t;
#line 149  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef unsigned int gfp_t;
#line 154  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef unsigned int slab_flags_t;
#line 155  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef unsigned int fmode_t;
#line 156  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef u64 phys_addr_t;
#line 159  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef phys_addr_t resource_size_t;
#line 170  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
struct __anonstruct_atomic_t_6 {
   int counter ;
};
#line 170  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef struct __anonstruct_atomic_t_6 atomic_t;
#line 174  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
struct __anonstruct_atomic64_t_7 {
   s64 counter ;
};
#line 174  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef struct __anonstruct_atomic64_t_7 atomic64_t;
#line 181  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
struct list_head {
   struct list_head *next ;
   struct list_head *prev ;
};
#line 185 
struct hlist_node;
#line 185  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
struct hlist_head {
   struct hlist_node *first ;
};
#line 189  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
struct hlist_node {
   struct hlist_node *next ;
   struct hlist_node **pprev ;
};
#line 219  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
struct callback_head {
   struct callback_head *next ;
   void (*func)(struct callback_head *) ;
} __attribute__((__aligned__(8)));
#line 14  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/wcn36xx/wcn36xx.ko/concurrency safety/0/concurrency safety/weaver/pmc.i.aux"
struct task_struct;
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/export.h"
struct module;
#line 60  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/export.h"
struct kernel_symbol {
   int value_offset ;
   int name_offset ;
   int namespace_offset ;
};
#line 136  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/init.h"
typedef void (*ctor_fn_t)(void);
#line 139 
struct file_system_type;
#line 83  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/printk.h"
struct ctl_table;
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jump_label.h"
struct jump_entry;
#line 87 
struct static_key_mod;
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jump_label.h"
union __anonunion_8 {
   unsigned long type ;
   struct jump_entry *entries ;
   struct static_key_mod *next ;
};
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jump_label.h"
struct static_key {
   atomic_t enabled ;
   union __anonunion_8 __anonCompField_static_key_4 ;
};
#line 122  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jump_label.h"
struct jump_entry {
   s32 code ;
   s32 target ;
   long key ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dynamic_debug.h"
struct device;
#line 65 
struct net_device;
#line 476  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/printk.h"
struct file_operations;
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/div64.h"
struct completion;
#line 88 
struct pt_regs;
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bug.h"
struct bug_entry {
   int bug_addr_disp ;
   int file_disp ;
   unsigned short line ;
   unsigned short flags ;
};
#line 188  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/math64.h"
typedef __s64 time64_t;
#line 7  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/time_types.h"
struct __kernel_timespec {
   __kernel_time64_t tv_sec ;
   long long tv_nsec ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/time64.h"
struct timespec64 {
   time64_t tv_sec ;
   long tv_nsec ;
};
#line 165 
struct old_timespec32;
#line 166 
struct pollfd;
#line 167 
enum timespec_type {
    TT_NONE = 0,
    TT_NATIVE = 1,
    TT_COMPAT = 2
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/restart_block.h"
struct __anonstruct_futex_27 {
   u32 *uaddr ;
   u32 val ;
   u32 flags ;
   u32 bitset ;
   u64 time ;
   u32 *uaddr2 ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/restart_block.h"
union __anonunion_29 {
   struct __kernel_timespec *rmtp ;
   struct old_timespec32 *compat_rmtp ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/restart_block.h"
struct __anonstruct_nanosleep_28 {
   clockid_t clockid ;
   enum timespec_type type ;
   union __anonunion_29 __anonCompField___anonstruct_nanosleep_28_5 ;
   u64 expires ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/restart_block.h"
struct __anonstruct_poll_30 {
   struct pollfd *ufds ;
   int nfds ;
   int has_timeout ;
   unsigned long tv_sec ;
   unsigned long tv_nsec ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/restart_block.h"
union __anonunion_26 {
   struct __anonstruct_futex_27 futex ;
   struct __anonstruct_nanosleep_28 nanosleep ;
   struct __anonstruct_poll_30 poll ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/restart_block.h"
struct restart_block {
   long (*fn)(struct restart_block *) ;
   union __anonunion_26 __anonCompField_restart_block_6 ;
};
#line 58  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/page_64.h"
struct page;
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/getorder.h"
struct mm_struct;
#line 49 
struct io_bitmap;
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/ptrace.h"
struct pt_regs {
   unsigned long r15 ;
   unsigned long r14 ;
   unsigned long r13 ;
   unsigned long r12 ;
   unsigned long bp ;
   unsigned long bx ;
   unsigned long r11 ;
   unsigned long r10 ;
   unsigned long r9 ;
   unsigned long r8 ;
   unsigned long ax ;
   unsigned long cx ;
   unsigned long dx ;
   unsigned long si ;
   unsigned long di ;
   unsigned long orig_ax ;
   unsigned long ip ;
   unsigned long cs ;
   unsigned long flags ;
   unsigned long sp ;
   unsigned long ss ;
};
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/desc_defs.h"
struct desc_struct {
   u16 limit0 ;
   u16 base0 ;
   u16 base1 : 8 ;
   u16 type : 4 ;
   u16 s : 1 ;
   u16 dpl : 2 ;
   u16 p : 1 ;
   u16 limit1 : 4 ;
   u16 avl : 1 ;
   u16 l : 1 ;
   u16 d : 1 ;
   u16 g : 1 ;
   u16 base2 : 8 ;
} __attribute__((__packed__));
#line 119  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/desc_defs.h"
typedef unsigned long pteval_t;
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_64_types.h"
typedef unsigned long pmdval_t;
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_64_types.h"
typedef unsigned long pudval_t;
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_64_types.h"
typedef unsigned long pgdval_t;
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_64_types.h"
typedef unsigned long pgprotval_t;
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_64_types.h"
struct __anonstruct_pte_t_53 {
   pteval_t pte ;
};
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_64_types.h"
typedef struct __anonstruct_pte_t_53 pte_t;
#line 265  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
struct pgprot {
   pgprotval_t pgprot ;
};
#line 267  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
typedef struct pgprot pgprot_t;
#line 266  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
struct __anonstruct_pgd_t_54 {
   pgdval_t pgd ;
};
#line 266  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
typedef struct __anonstruct_pgd_t_54 pgd_t;
#line 319  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
struct __anonstruct_pud_t_56 {
   pudval_t pud ;
};
#line 319  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
typedef struct __anonstruct_pud_t_56 pud_t;
#line 345  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
struct __anonstruct_pmd_t_57 {
   pmdval_t pmd ;
};
#line 345  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
typedef struct __anonstruct_pmd_t_57 pmd_t;
#line 505  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
typedef struct page *pgtable_t;
#line 519 
struct file;
#line 530 
struct seq_file;
#line 360  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/nospec-branch.h"
struct thread_struct;
#line 362 
struct cpumask;
#line 365 
struct vm_area_struct;
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qspinlock_types.h"
struct __anonstruct_59 {
   u8 locked ;
   u8 pending ;
};
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qspinlock_types.h"
struct __anonstruct_60 {
   u16 locked_pending ;
   u16 tail ;
};
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qspinlock_types.h"
union __anonunion_58 {
   atomic_t val ;
   struct __anonstruct_59 __anonCompField___anonunion_58_7 ;
   struct __anonstruct_60 __anonCompField___anonunion_58_8 ;
};
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qspinlock_types.h"
struct qspinlock {
   union __anonunion_58 __anonCompField_qspinlock_9 ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qspinlock_types.h"
typedef struct qspinlock arch_spinlock_t;
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qrwlock_types.h"
struct __anonstruct_62 {
   u8 wlocked ;
   u8 __lstate[3U] ;
};
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qrwlock_types.h"
union __anonunion_61 {
   atomic_t cnts ;
   struct __anonstruct_62 __anonCompField___anonunion_61_10 ;
};
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qrwlock_types.h"
struct qrwlock {
   union __anonunion_61 __anonCompField_qrwlock_11 ;
   arch_spinlock_t wait_lock ;
};
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qrwlock_types.h"
typedef struct qrwlock arch_rwlock_t;
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/math_emu.h"
struct math_emu_info {
   long ___orig_eip ;
   struct pt_regs *regs ;
};
#line 2288  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/atomic-fallback.h"
typedef atomic64_t atomic_long_t;
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cpumask.h"
struct cpumask {
   unsigned long bits[128U] ;
};
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cpumask.h"
typedef struct cpumask cpumask_t;
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/tracepoint-defs.h"
struct tracepoint_func {
   void *func ;
   void *data ;
   int prio ;
};
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/tracepoint-defs.h"
struct tracepoint {
   char *name ;
   struct static_key key ;
   int (*regfunc)(void) ;
   void (*unregfunc)(void) ;
   struct tracepoint_func *funcs ;
};
#line 37  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/tracepoint-defs.h"
typedef int tracepoint_ptr_t;
#line 44  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/tracepoint-defs.h"
struct bpf_raw_event_map {
   struct tracepoint *tp ;
   void *bpf_func ;
   u32 num_args ;
   u32 writable_size ;
} __attribute__((__aligned__(32)));
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct fregs_state {
   u32 cwd ;
   u32 swd ;
   u32 twd ;
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
   u32 st_space[20U] ;
   u32 status ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct __anonstruct_90 {
   u64 rip ;
   u64 rdp ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct __anonstruct_91 {
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
union __anonunion_89 {
   struct __anonstruct_90 __anonCompField___anonunion_89_17 ;
   struct __anonstruct_91 __anonCompField___anonunion_89_18 ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
union __anonunion_92 {
   u32 padding1[12U] ;
   u32 sw_reserved[12U] ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct fxregs_state {
   u16 cwd ;
   u16 swd ;
   u16 twd ;
   u16 fop ;
   union __anonunion_89 __anonCompField_fxregs_state_19 ;
   u32 mxcsr ;
   u32 mxcsr_mask ;
   u32 st_space[32U] ;
   u32 xmm_space[64U] ;
   u32 padding[12U] ;
   union __anonunion_92 __anonCompField_fxregs_state_20 ;
} __attribute__((__aligned__(16)));
#line 79  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct swregs_state {
   u32 cwd ;
   u32 swd ;
   u32 twd ;
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
   u32 st_space[20U] ;
   u8 ftop ;
   u8 changed ;
   u8 lookahead ;
   u8 no_update ;
   u8 rm ;
   u8 alimit ;
   struct math_emu_info *info ;
   u32 entry_eip ;
};
#line 232  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct xstate_header {
   u64 xfeatures ;
   u64 xcomp_bv ;
   u64 reserved[6U] ;
} __attribute__((__packed__));
#line 253  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct xregs_state {
   struct fxregs_state i387 ;
   struct xstate_header header ;
   u8 extended_state_area[0U] ;
} __attribute__((__packed__, __aligned__(64)));
#line 268  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
union fpregs_state {
   struct fregs_state fsave ;
   struct fxregs_state fxsave ;
   struct swregs_state soft ;
   struct xregs_state xsave ;
   u8 __padding[4096U] ;
};
#line 281  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct fpu {
   unsigned int last_cpu ;
   unsigned long avx512_timestamp ;
   union fpregs_state state ;
};
#line 73  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/orc_types.h"
struct orc_entry {
   s16 sp_offset ;
   s16 bp_offset ;
   unsigned int sp_reg : 4 ;
   unsigned int bp_reg : 4 ;
   unsigned int type : 2 ;
   unsigned int end : 1 ;
} __attribute__((__packed__));
#line 180  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/processor.h"
struct seq_operations;
#line 478 
struct perf_event;
#line 479  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/processor.h"
struct __anonstruct_mm_segment_t_95 {
   unsigned long seg ;
};
#line 479  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/processor.h"
typedef struct __anonstruct_mm_segment_t_95 mm_segment_t;
#line 485  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/processor.h"
struct thread_struct {
   struct desc_struct tls_array[3U] ;
   unsigned long sp ;
   unsigned short es ;
   unsigned short ds ;
   unsigned short fsindex ;
   unsigned short gsindex ;
   unsigned long fsbase ;
   unsigned long gsbase ;
   struct perf_event *ptrace_bps[4U] ;
   unsigned long debugreg6 ;
   unsigned long ptrace_dr7 ;
   unsigned long cr2 ;
   unsigned long trap_nr ;
   unsigned long error_code ;
   struct io_bitmap *io_bitmap ;
   unsigned long iopl_emul ;
   mm_segment_t addr_limit ;
   unsigned int sig_on_uaccess_err : 1 ;
   unsigned int uaccess_err : 1 ;
   struct fpu fpu ;
};
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/thread_info.h"
struct thread_info {
   unsigned long flags ;
   u32 status ;
};
#line 35  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bottom_half.h"
struct lockdep_map;
#line 55  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockdep.h"
struct lockdep_subclass_key {
   char __one_byte ;
} __attribute__((__packed__));
#line 60  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockdep.h"
union __anonunion_96 {
   struct hlist_node hash_entry ;
   struct lockdep_subclass_key subkeys[8U] ;
};
#line 60  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockdep.h"
struct lock_class_key {
   union __anonunion_96 __anonCompField_lock_class_key_23 ;
};
#line 68 
struct lock_trace;
#line 77  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockdep.h"
struct lock_class {
   struct hlist_node hash_entry ;
   struct list_head lock_entry ;
   struct list_head locks_after ;
   struct list_head locks_before ;
   struct lockdep_subclass_key *key ;
   unsigned int subclass ;
   unsigned int dep_gen_id ;
   unsigned long usage_mask ;
   struct lock_trace *usage_traces[9U] ;
   int name_version ;
   char *name ;
   unsigned long contention_point[4U] ;
   unsigned long contending_point[4U] ;
};
#line 157  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockdep.h"
struct lockdep_map {
   struct lock_class_key *key ;
   struct lock_class *class_cache[2U] ;
   char *name ;
   int cpu ;
   unsigned long ip ;
};
#line 226  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockdep.h"
struct held_lock {
   u64 prev_chain_key ;
   unsigned long acquire_ip ;
   struct lockdep_map *instance ;
   struct lockdep_map *nest_lock ;
   u64 waittime_stamp ;
   u64 holdtime_stamp ;
   unsigned int class_idx : 13 ;
   unsigned int irq_context : 2 ;
   unsigned int trylock : 1 ;
   unsigned int read : 2 ;
   unsigned int check : 1 ;
   unsigned int hardirqs_off : 1 ;
   unsigned int references : 12 ;
   unsigned int pin_count ;
};
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
struct raw_spinlock {
   arch_spinlock_t raw_lock ;
   unsigned int magic ;
   unsigned int owner_cpu ;
   void *owner ;
   struct lockdep_map dep_map ;
};
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
typedef struct raw_spinlock raw_spinlock_t;
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
struct __anonstruct_98 {
   u8 __padding[24U] ;
   struct lockdep_map dep_map ;
};
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
union __anonunion_97 {
   struct raw_spinlock rlock ;
   struct __anonstruct_98 __anonCompField___anonunion_97_24 ;
};
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
struct spinlock {
   union __anonunion_97 __anonCompField_spinlock_25 ;
};
#line 73  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
typedef struct spinlock spinlock_t;
#line 74  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
struct __anonstruct_rwlock_t_99 {
   arch_rwlock_t raw_lock ;
   unsigned int magic ;
   unsigned int owner_cpu ;
   void *owner ;
   struct lockdep_map dep_map ;
};
#line 74  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
typedef struct __anonstruct_rwlock_t_99 rwlock_t;
#line 57  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
struct mutex;
#line 27  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
struct kmem_cache;
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/wait.h"
struct wait_queue_head {
   spinlock_t lock ;
   struct list_head head ;
};
#line 38  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/wait.h"
typedef struct wait_queue_head wait_queue_head_t;
#line 26  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/completion.h"
struct completion {
   unsigned int done ;
   wait_queue_head_t wait ;
};
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seqlock.h"
struct seqcount {
   unsigned int sequence ;
   struct lockdep_map dep_map ;
};
#line 53  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seqlock.h"
typedef struct seqcount seqcount_t;
#line 403  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seqlock.h"
struct __anonstruct_seqlock_t_112 {
   struct seqcount seqcount ;
   spinlock_t lock ;
};
#line 403  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seqlock.h"
typedef struct __anonstruct_seqlock_t_112 seqlock_t;
#line 161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timex.h"
typedef s32 old_time32_t;
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/time32.h"
struct old_timespec32 {
   old_time32_t tv_sec ;
   s32 tv_nsec ;
};
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmdebug.h"
struct __anonstruct_nodemask_t_113 {
   unsigned long bits[16U] ;
};
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmdebug.h"
typedef struct __anonstruct_nodemask_t_113 nodemask_t;
#line 7  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/tlbbatch.h"
struct arch_tlbflush_unmap_batch {
   struct cpumask cpumask ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types_task.h"
struct vmacache {
   u64 seqnum ;
   struct vm_area_struct *vmas[4U] ;
};
#line 54  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types_task.h"
struct task_rss_stat {
   int events ;
   int count[4U] ;
};
#line 60  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types_task.h"
struct mm_rss_stat {
   atomic_long_t count[4U] ;
};
#line 64  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types_task.h"
struct page_frag {
   struct page *page ;
   __u32 offset ;
   __u32 size ;
};
#line 76  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types_task.h"
struct tlbflush_unmap_batch {
   struct arch_tlbflush_unmap_batch arch ;
   bool flush_required ;
   bool writable ;
};
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rbtree.h"
struct rb_node {
   unsigned long __rb_parent_color ;
   struct rb_node *rb_right ;
   struct rb_node *rb_left ;
} __attribute__((__aligned__(8)));
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rbtree.h"
struct rb_root {
   struct rb_node *rb_node ;
};
#line 125  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rbtree.h"
struct rb_root_cached {
   struct rb_root rb_root ;
   struct rb_node *rb_leftmost ;
};
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/osq_lock.h"
struct optimistic_spin_queue {
   atomic_t tail ;
};
#line 35  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rwsem.h"
struct rw_semaphore {
   atomic_long_t count ;
   atomic_long_t owner ;
   struct optimistic_spin_queue osq ;
   raw_spinlock_t wait_lock ;
   struct list_head wait_list ;
   void *magic ;
   struct lockdep_map dep_map ;
};
#line 194 
struct inode;
#line 195 
struct notifier_block;
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
struct ww_acquire_ctx;
#line 53  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mutex.h"
struct mutex {
   atomic_long_t owner ;
   spinlock_t wait_lock ;
   struct optimistic_spin_queue osq ;
   struct list_head wait_list ;
   void *magic ;
   struct lockdep_map dep_map ;
};
#line 72  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mutex.h"
struct mutex_waiter {
   struct list_head list ;
   struct task_struct *task ;
   struct ww_acquire_ctx *ww_ctx ;
   void *magic ;
};
#line 461  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jiffies.h"
typedef s64 ktime_t;
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
struct timer_list {
   struct hlist_node entry ;
   unsigned long expires ;
   void (*function)(struct timer_list *) ;
   u32 flags ;
   struct lockdep_map lockdep_map ;
};
#line 196 
struct hrtimer;
#line 197 
enum hrtimer_restart;
#line 221 
struct workqueue_struct;
#line 222 
struct work_struct;
#line 102  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/workqueue.h"
struct work_struct {
   atomic_long_t data ;
   struct list_head entry ;
   void (*func)(struct work_struct *) ;
   struct lockdep_map lockdep_map ;
};
#line 115  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/workqueue.h"
struct delayed_work {
   struct work_struct work ;
   struct timer_list timer ;
   struct workqueue_struct *wq ;
   int cpu ;
};
#line 124  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/workqueue.h"
struct rcu_work {
   struct work_struct work ;
   struct callback_head rcu ;
   struct workqueue_struct *wq ;
};
#line 67  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rcu_segcblist.h"
struct rcu_segcblist {
   struct callback_head *head ;
   struct callback_head **tails[4U] ;
   unsigned long gp_seq[4U] ;
   atomic_long_t len ;
   long len_lazy ;
   u8 enabled ;
   u8 offloaded ;
};
#line 80 
struct srcu_struct;
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/srcu.h"
struct srcu_node;
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/srcutree.h"
struct srcu_data {
   unsigned long srcu_lock_count[2U] ;
   unsigned long srcu_unlock_count[2U] ;
   spinlock_t lock ;
   struct rcu_segcblist srcu_cblist ;
   unsigned long srcu_gp_seq_needed ;
   unsigned long srcu_gp_seq_needed_exp ;
   bool srcu_cblist_invoking ;
   struct timer_list delay_work ;
   struct work_struct work ;
   struct callback_head srcu_barrier_head ;
   struct srcu_node *mynode ;
   unsigned long grpmask ;
   int cpu ;
   struct srcu_struct *ssp ;
};
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/srcutree.h"
struct srcu_node {
   spinlock_t lock ;
   unsigned long srcu_have_cbs[4U] ;
   unsigned long srcu_data_have_cbs[4U] ;
   unsigned long srcu_gp_seq_needed_exp ;
   struct srcu_node *srcu_parent ;
   int grplo ;
   int grphi ;
};
#line 64  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/srcutree.h"
struct srcu_struct {
   struct srcu_node node[521U] ;
   struct srcu_node *level[4U] ;
   struct mutex srcu_cb_mutex ;
   spinlock_t lock ;
   struct mutex srcu_gp_mutex ;
   unsigned int srcu_idx ;
   unsigned long srcu_gp_seq ;
   unsigned long srcu_gp_seq_needed ;
   unsigned long srcu_gp_seq_needed_exp ;
   unsigned long srcu_last_gp_end ;
   struct srcu_data *sda ;
   unsigned long srcu_barrier_seq ;
   struct mutex srcu_barrier_mutex ;
   struct completion srcu_barrier_completion ;
   atomic_t srcu_barrier_cpu_cnt ;
   struct delayed_work work ;
   struct lockdep_map dep_map ;
};
#line 54  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/notifier.h"
struct notifier_block {
   int (*notifier_call)(struct notifier_block *, unsigned long , void *) ;
   struct notifier_block *next ;
   int priority ;
};
#line 70  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/notifier.h"
struct raw_notifier_head {
   struct notifier_block *head ;
};
#line 50  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/uprobes.h"
struct arch_uprobe_task {
   unsigned long saved_scratch_register ;
   unsigned int saved_trap_nr ;
   unsigned int saved_tf ;
};
#line 57 
enum uprobe_task_state {
    UTASK_RUNNING = 0,
    UTASK_SSTEP = 1,
    UTASK_SSTEP_ACK = 2,
    UTASK_SSTEP_TRAPPED = 3
};
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
struct __anonstruct_126 {
   struct arch_uprobe_task autask ;
   unsigned long vaddr ;
};
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
struct __anonstruct_127 {
   struct callback_head dup_xol_work ;
   unsigned long dup_xol_addr ;
};
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
union __anonunion_125 {
   struct __anonstruct_126 __anonCompField___anonunion_125_28 ;
   struct __anonstruct_127 __anonCompField___anonunion_125_29 ;
};
#line 61 
struct uprobe;
#line 61 
struct return_instance;
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
struct uprobe_task {
   enum uprobe_task_state state ;
   union __anonunion_125 __anonCompField_uprobe_task_30 ;
   struct uprobe *active_uprobe ;
   unsigned long xol_vaddr ;
   struct return_instance *return_instances ;
   unsigned int depth ;
};
#line 83  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
struct return_instance {
   struct uprobe *uprobe ;
   unsigned long func ;
   unsigned long stack ;
   unsigned long orig_ret_vaddr ;
   bool chained ;
   struct return_instance *next ;
};
#line 98 
struct xol_area;
#line 101  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
struct uprobes_state {
   struct xol_area *xol_area ;
};
#line 140 
struct ldt_struct;
#line 140 
struct vdso_image;
#line 140  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
struct __anonstruct_mm_context_t_128 {
   u64 ctx_id ;
   atomic64_t tlb_gen ;
   struct rw_semaphore ldt_usr_sem ;
   struct ldt_struct *ldt ;
   unsigned short ia32_compat ;
   struct mutex lock ;
   void *vdso ;
   struct vdso_image *vdso_image ;
   atomic_t perf_rdpmc_allowed ;
   u16 pkey_allocation_map ;
   s16 execute_only_pkey ;
   void *bd_addr ;
};
#line 140  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
typedef struct __anonstruct_mm_context_t_128 mm_context_t;
#line 66  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct address_space;
#line 67 
struct mem_cgroup;
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct __anonstruct_130 {
   struct list_head lru ;
   struct address_space *mapping ;
   unsigned long index ;
   unsigned long private ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct __anonstruct_131 {
   dma_addr_t dma_addr ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct __anonstruct_134 {
   struct page *next ;
   int pages ;
   int pobjects ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
union __anonunion_133 {
   struct list_head slab_list ;
   struct __anonstruct_134 __anonCompField___anonunion_133_33 ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct __anonstruct_136 {
   unsigned int inuse : 16 ;
   unsigned int objects : 15 ;
   unsigned int frozen : 1 ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
union __anonunion_135 {
   void *s_mem ;
   unsigned long counters ;
   struct __anonstruct_136 __anonCompField___anonunion_135_35 ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct __anonstruct_132 {
   union __anonunion_133 __anonCompField___anonstruct_132_34 ;
   struct kmem_cache *slab_cache ;
   void *freelist ;
   union __anonunion_135 __anonCompField___anonstruct_132_36 ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct __anonstruct_137 {
   unsigned long compound_head ;
   unsigned char compound_dtor ;
   unsigned char compound_order ;
   atomic_t compound_mapcount ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct __anonstruct_138 {
   unsigned long _compound_pad_1 ;
   unsigned long _compound_pad_2 ;
   struct list_head deferred_list ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
union __anonunion_140 {
   struct mm_struct *pt_mm ;
   atomic_t pt_frag_refcount ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct __anonstruct_139 {
   unsigned long _pt_pad_1 ;
   pgtable_t pmd_huge_pte ;
   unsigned long _pt_pad_2 ;
   union __anonunion_140 __anonCompField___anonstruct_139_40 ;
   spinlock_t *ptl ;
};
#line 68 
struct dev_pagemap;
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct __anonstruct_141 {
   struct dev_pagemap *pgmap ;
   void *zone_device_data ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
union __anonunion_129 {
   struct __anonstruct_130 __anonCompField___anonunion_129_31 ;
   struct __anonstruct_131 __anonCompField___anonunion_129_32 ;
   struct __anonstruct_132 __anonCompField___anonunion_129_37 ;
   struct __anonstruct_137 __anonCompField___anonunion_129_38 ;
   struct __anonstruct_138 __anonCompField___anonunion_129_39 ;
   struct __anonstruct_139 __anonCompField___anonunion_129_41 ;
   struct __anonstruct_141 __anonCompField___anonunion_129_42 ;
   struct callback_head callback_head ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
union __anonunion_142 {
   atomic_t _mapcount ;
   unsigned int page_type ;
   unsigned int active ;
   int units ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct page {
   unsigned long flags ;
   union __anonunion_129 __anonCompField_page_43 ;
   union __anonunion_142 __anonCompField_page_44 ;
   atomic_t _refcount ;
   struct mem_cgroup *mem_cgroup ;
} __attribute__((__aligned__(16)));
#line 278  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct userfaultfd_ctx;
#line 278  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct vm_userfaultfd_ctx {
   struct userfaultfd_ctx *ctx ;
};
#line 292  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct __anonstruct_shared_143 {
   struct rb_node rb ;
   unsigned long rb_subtree_last ;
};
#line 292 
struct anon_vma;
#line 292 
struct vm_operations_struct;
#line 292 
struct mempolicy;
#line 292  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct vm_area_struct {
   unsigned long vm_start ;
   unsigned long vm_end ;
   struct vm_area_struct *vm_next ;
   struct vm_area_struct *vm_prev ;
   struct rb_node vm_rb ;
   unsigned long rb_subtree_gap ;
   struct mm_struct *vm_mm ;
   pgprot_t vm_page_prot ;
   unsigned long vm_flags ;
   struct __anonstruct_shared_143 shared ;
   struct list_head anon_vma_chain ;
   struct anon_vma *anon_vma ;
   struct vm_operations_struct *vm_ops ;
   unsigned long vm_pgoff ;
   struct file *vm_file ;
   void *vm_private_data ;
   atomic_long_t swap_readahead_info ;
   struct mempolicy *vm_policy ;
   struct vm_userfaultfd_ctx vm_userfaultfd_ctx ;
} __attribute__((__designated_init__));
#line 358  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct core_thread {
   struct task_struct *task ;
   struct core_thread *next ;
};
#line 363  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct core_state {
   atomic_t nr_threads ;
   struct core_thread dumper ;
   struct completion startup ;
};
#line 368 
struct kioctx_table;
#line 370 
struct linux_binfmt;
#line 370 
struct user_namespace;
#line 370 
struct mmu_notifier_mm;
#line 370  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct __anonstruct_144 {
   struct vm_area_struct *mmap ;
   struct rb_root mm_rb ;
   u64 vmacache_seqnum ;
   unsigned long (*get_unmapped_area)(struct file *, unsigned long , unsigned long , unsigned long , unsigned long ) ;
   unsigned long mmap_base ;
   unsigned long mmap_legacy_base ;
   unsigned long mmap_compat_base ;
   unsigned long mmap_compat_legacy_base ;
   unsigned long task_size ;
   unsigned long highest_vm_end ;
   pgd_t *pgd ;
   atomic_t membarrier_state ;
   atomic_t mm_users ;
   atomic_t mm_count ;
   atomic_long_t pgtables_bytes ;
   int map_count ;
   spinlock_t page_table_lock ;
   struct rw_semaphore mmap_sem ;
   struct list_head mmlist ;
   unsigned long hiwater_rss ;
   unsigned long hiwater_vm ;
   unsigned long total_vm ;
   unsigned long locked_vm ;
   atomic64_t pinned_vm ;
   unsigned long data_vm ;
   unsigned long exec_vm ;
   unsigned long stack_vm ;
   unsigned long def_flags ;
   spinlock_t arg_lock ;
   unsigned long start_code ;
   unsigned long end_code ;
   unsigned long start_data ;
   unsigned long end_data ;
   unsigned long start_brk ;
   unsigned long brk ;
   unsigned long start_stack ;
   unsigned long arg_start ;
   unsigned long arg_end ;
   unsigned long env_start ;
   unsigned long env_end ;
   unsigned long saved_auxv[46U] ;
   struct mm_rss_stat rss_stat ;
   struct linux_binfmt *binfmt ;
   mm_context_t context ;
   unsigned long flags ;
   struct core_state *core_state ;
   spinlock_t ioctx_lock ;
   struct kioctx_table *ioctx_table ;
   struct task_struct *owner ;
   struct user_namespace *user_ns ;
   struct file *exe_file ;
   struct mmu_notifier_mm *mmu_notifier_mm ;
   unsigned long numa_next_scan ;
   unsigned long numa_scan_offset ;
   int numa_scan_seq ;
   atomic_t tlb_flush_pending ;
   bool tlb_flush_batched ;
   struct uprobes_state uprobes_state ;
   atomic_long_t hugetlb_usage ;
   struct work_struct async_put_work ;
} __attribute__((__designated_init__));
#line 370  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct mm_struct {
   struct __anonstruct_144 __anonCompField_mm_struct_45 ;
   unsigned long cpu_bitmap[] ;
};
#line 642 
struct vm_fault;
#line 643  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
typedef unsigned int vm_fault_t;
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct free_area {
   struct list_head free_list[6U] ;
   unsigned long nr_free ;
};
#line 158 
struct pglist_data;
#line 168  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct zone_padding {
   char x[0U] ;
} __attribute__((__aligned__(4096)));
#line 285  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct zone_reclaim_stat {
   unsigned long recent_rotated[2U] ;
   unsigned long recent_scanned[2U] ;
};
#line 304  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct lruvec {
   struct list_head lists[5U] ;
   struct zone_reclaim_stat reclaim_stat ;
   atomic_long_t inactive_age ;
   unsigned long refaults ;
   unsigned long flags ;
   struct pglist_data *pgdat ;
};
#line 316  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
typedef unsigned int isolate_mode_t;
#line 340  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct per_cpu_pages {
   int count ;
   int high ;
   int batch ;
   struct list_head lists[3U] ;
};
#line 349  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct per_cpu_pageset {
   struct per_cpu_pages pcp ;
   s8 expire ;
   u16 vm_numa_stat_diff[6U] ;
   s8 stat_threshold ;
   s8 vm_stat_diff[13U] ;
};
#line 361  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct per_cpu_nodestat {
   s8 stat_threshold ;
   s8 vm_node_stat_diff[32U] ;
};
#line 365 
enum zone_type {
    ZONE_DMA = 0,
    ZONE_DMA32 = 1,
    ZONE_NORMAL = 2,
    ZONE_MOVABLE = 3,
    ZONE_DEVICE = 4,
    __MAX_NR_ZONES = 5
};
#line 432  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct zone {
   unsigned long _watermark[3U] ;
   unsigned long watermark_boost ;
   unsigned long nr_reserved_highatomic ;
   long lowmem_reserve[5U] ;
   int node ;
   struct pglist_data *zone_pgdat ;
   struct per_cpu_pageset *pageset ;
   unsigned long zone_start_pfn ;
   atomic_long_t managed_pages ;
   unsigned long spanned_pages ;
   unsigned long present_pages ;
   char *name ;
   unsigned long nr_isolate_pageblock ;
   seqlock_t span_seqlock ;
   int initialized ;
   struct zone_padding _pad1_ ;
   struct free_area free_area[11U] ;
   unsigned long flags ;
   spinlock_t lock ;
   struct zone_padding _pad2_ ;
   unsigned long percpu_drift_mark ;
   unsigned long compact_cached_free_pfn ;
   unsigned long compact_cached_migrate_pfn[2U] ;
   unsigned long compact_init_migrate_pfn ;
   unsigned long compact_init_free_pfn ;
   unsigned int compact_considered ;
   unsigned int compact_defer_shift ;
   int compact_order_failed ;
   bool compact_blockskip_flush ;
   bool contiguous ;
   struct zone_padding _pad3_ ;
   atomic_long_t vm_stat[13U] ;
   atomic_long_t vm_numa_stat[6U] ;
} __attribute__((__aligned__(4096)));
#line 665  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct zoneref {
   struct zone *zone ;
   int zone_idx ;
};
#line 684  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct zonelist {
   struct zoneref _zonerefs[5121U] ;
};
#line 694  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct deferred_split {
   spinlock_t split_queue_lock ;
   struct list_head split_queue ;
   unsigned long split_queue_len ;
};
#line 710  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct pglist_data {
   struct zone node_zones[5U] ;
   struct zonelist node_zonelists[2U] ;
   int nr_zones ;
   spinlock_t node_size_lock ;
   unsigned long node_start_pfn ;
   unsigned long node_present_pages ;
   unsigned long node_spanned_pages ;
   int node_id ;
   wait_queue_head_t kswapd_wait ;
   wait_queue_head_t pfmemalloc_wait ;
   struct task_struct *kswapd ;
   int kswapd_order ;
   enum zone_type kswapd_classzone_idx ;
   int kswapd_failures ;
   int kcompactd_max_order ;
   enum zone_type kcompactd_classzone_idx ;
   wait_queue_head_t kcompactd_wait ;
   struct task_struct *kcompactd ;
   unsigned long totalreserve_pages ;
   unsigned long min_unmapped_pages ;
   unsigned long min_slab_pages ;
   struct zone_padding _pad1_ ;
   spinlock_t lru_lock ;
   unsigned long first_deferred_pfn ;
   struct deferred_split deferred_split_queue ;
   struct lruvec __lruvec ;
   unsigned long flags ;
   struct zone_padding _pad2_ ;
   struct per_cpu_nodestat *per_cpu_nodestats ;
   atomic_long_t vm_stat[32U] ;
};
#line 824 
struct resource;
#line 825 
struct vmem_altmap;
#line 440  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/io.h"
struct fwnode_operations;
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fwnode.h"
struct fwnode_handle {
   struct fwnode_handle *secondary ;
   struct fwnode_operations *ops ;
   struct device *dev ;
};
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fwnode.h"
struct fwnode_endpoint {
   unsigned int port ;
   unsigned int id ;
   struct fwnode_handle *local_fwnode ;
};
#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fwnode.h"
struct fwnode_reference_args {
   struct fwnode_handle *fwnode ;
   unsigned int nargs ;
   u64 args[8U] ;
};
#line 110  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fwnode.h"
struct fwnode_operations {
   struct fwnode_handle *(*get)(struct fwnode_handle *) ;
   void (*put)(struct fwnode_handle *) ;
   bool (*device_is_available)(struct fwnode_handle *) ;
   void *(*device_get_match_data)(struct fwnode_handle *, struct device *) ;
   bool (*property_present)(struct fwnode_handle *, char *) ;
   int (*property_read_int_array)(struct fwnode_handle *, char *, unsigned int , void *, size_t ) ;
   int (*property_read_string_array)(struct fwnode_handle *, char *, char **, size_t ) ;
   char *(*get_name)(struct fwnode_handle *) ;
   char *(*get_name_prefix)(struct fwnode_handle *) ;
   struct fwnode_handle *(*get_parent)(struct fwnode_handle *) ;
   struct fwnode_handle *(*get_next_child_node)(struct fwnode_handle *, struct fwnode_handle *) ;
   struct fwnode_handle *(*get_named_child_node)(struct fwnode_handle *, char *) ;
   int (*get_reference_args)(struct fwnode_handle *, char *, char *, unsigned int , unsigned int , struct fwnode_reference_args *) ;
   struct fwnode_handle *(*graph_get_next_endpoint)(struct fwnode_handle *, struct fwnode_handle *) ;
   struct fwnode_handle *(*graph_get_remote_endpoint)(struct fwnode_handle *) ;
   struct fwnode_handle *(*graph_get_port_parent)(struct fwnode_handle *) ;
   int (*graph_parse_endpoint)(struct fwnode_handle *, struct fwnode_endpoint *) ;
   int (*add_links)(struct fwnode_handle *, struct device *) ;
};
#line 54  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/llist.h"
struct llist_node;
#line 58  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/llist.h"
struct llist_node {
   struct llist_node *next ;
};
#line 53  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/vmalloc.h"
struct vm_struct {
   struct vm_struct *next ;
   void *addr ;
   unsigned long size ;
   unsigned long flags ;
   struct page **pages ;
   unsigned int nr_pages ;
   phys_addr_t phys_addr ;
   void *caller ;
};
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/smp.h"
struct __call_single_data {
   struct llist_node llist ;
   void (*func)(void *) ;
   void *info ;
   unsigned int flags ;
};
#line 623  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/gfp.h"
struct percpu_ref;
#line 624  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/gfp.h"
typedef void percpu_ref_func_t(struct percpu_ref *);
#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/percpu-refcount.h"
struct percpu_ref {
   atomic_long_t count ;
   unsigned long percpu_count_ptr ;
   percpu_ref_func_t *release ;
   percpu_ref_func_t *confirm_switch ;
   bool force_atomic : 1 ;
   bool allow_reinit : 1 ;
   struct callback_head rcu ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/shrinker.h"
struct shrink_control {
   gfp_t gfp_mask ;
   int nid ;
   unsigned long nr_to_scan ;
   unsigned long nr_scanned ;
   struct mem_cgroup *memcg ;
};
#line 60  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/shrinker.h"
struct shrinker {
   unsigned long (*count_objects)(struct shrinker *, struct shrink_control *) ;
   unsigned long (*scan_objects)(struct shrinker *, struct shrink_control *) ;
   long batch ;
   int seeks ;
   unsigned int flags ;
   struct list_head list ;
   int id ;
   atomic_long_t *nr_deferred ;
};
#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/resource.h"
struct rlimit {
   __kernel_ulong_t rlim_cur ;
   __kernel_ulong_t rlim_max ;
};
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ioport.h"
struct resource {
   resource_size_t start ;
   resource_size_t end ;
   char *name ;
   unsigned long flags ;
   unsigned long desc ;
   struct resource *parent ;
   struct resource *sibling ;
   struct resource *child ;
};
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memremap.h"
struct vmem_altmap {
   unsigned long base_pfn ;
   unsigned long end_pfn ;
   unsigned long reserve ;
   unsigned long free ;
   unsigned long align ;
   unsigned long alloc ;
};
#line 26 
enum memory_type {
    MEMORY_DEVICE_PRIVATE = 1,
    MEMORY_DEVICE_FS_DAX = 2,
    MEMORY_DEVICE_DEVDAX = 3,
    MEMORY_DEVICE_PCI_P2PDMA = 4
};
#line 67  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memremap.h"
struct dev_pagemap_ops {
   void (*page_free)(struct page *) ;
   void (*kill)(struct dev_pagemap *) ;
   void (*cleanup)(struct dev_pagemap *) ;
   vm_fault_t (*migrate_to_ram)(struct vm_fault *) ;
};
#line 107  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memremap.h"
struct dev_pagemap {
   struct vmem_altmap altmap ;
   struct resource res ;
   struct percpu_ref *ref ;
   struct percpu_ref internal_ref ;
   struct completion done ;
   enum memory_type type ;
   unsigned int flags ;
   struct dev_pagemap_ops *ops ;
};
#line 176 
struct file_ra_state;
#line 177 
struct user_struct;
#line 178 
struct writeback_control;
#line 179 
struct bdi_writeback;
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/refcount.h"
struct refcount_struct {
   atomic_t refs ;
};
#line 101  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/refcount.h"
typedef struct refcount_struct refcount_t;
#line 305 
enum pid_type {
    PIDTYPE_PID = 0,
    PIDTYPE_TGID = 1,
    PIDTYPE_PGID = 2,
    PIDTYPE_SID = 3,
    PIDTYPE_MAX = 4
};
#line 54  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pid.h"
struct pid_namespace;
#line 54  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pid.h"
struct upid {
   int nr ;
   struct pid_namespace *ns ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pid.h"
struct pid {
   refcount_t count ;
   unsigned int level ;
   struct hlist_head tasks[4U] ;
   wait_queue_head_t wait_pidfd ;
   struct callback_head rcu ;
   struct upid numbers[1U] ;
};
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uidgid.h"
struct __anonstruct_kuid_t_272 {
   uid_t val ;
};
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uidgid.h"
typedef struct __anonstruct_kuid_t_272 kuid_t;
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uidgid.h"
struct __anonstruct_kgid_t_273 {
   gid_t val ;
};
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uidgid.h"
typedef struct __anonstruct_kgid_t_273 kgid_t;
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rhashtable-types.h"
struct rhash_head {
   struct rhash_head *next ;
};
#line 25 
struct bucket_table;
#line 33 
struct rhashtable;
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rhashtable-types.h"
struct rhashtable_compare_arg {
   struct rhashtable *ht ;
   void *key ;
};
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rhashtable-types.h"
struct rhashtable_params {
   u16 nelem_hint ;
   u16 key_len ;
   u16 key_offset ;
   u16 head_offset ;
   unsigned int max_size ;
   u16 min_size ;
   bool automatic_shrinking ;
   u32 (*hashfn)(void *, u32 , u32 ) ;
   u32 (*obj_hashfn)(void *, u32 , u32 ) ;
   int (*obj_cmpfn)(struct rhashtable_compare_arg *, void *) ;
};
#line 81  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rhashtable-types.h"
struct rhashtable {
   struct bucket_table *tbl ;
   unsigned int key_len ;
   unsigned int max_elems ;
   struct rhashtable_params p ;
   bool rhlist ;
   struct work_struct run_work ;
   struct mutex mutex ;
   spinlock_t lock ;
   atomic_t nelems ;
};
#line 67  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/sem.h"
struct sem_undo_list;
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sem.h"
struct sysv_sem {
   struct sem_undo_list *undo_list ;
};
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/shm.h"
struct sysv_shm {
   struct list_head shm_clist ;
};
#line 83  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/plist.h"
struct plist_node {
   int prio ;
   struct list_head prio_list ;
   struct list_head node_list ;
};
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timerqueue.h"
struct timerqueue_node {
   struct rb_node node ;
   ktime_t expires ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timerqueue.h"
struct timerqueue_head {
   struct rb_root_cached rb_root ;
};
#line 60 
struct hrtimer_clock_base;
#line 61 
struct hrtimer_cpu_base;
#line 80 
enum hrtimer_restart {
    HRTIMER_NORESTART = 0,
    HRTIMER_RESTART = 1
};
#line 117  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/hrtimer.h"
struct hrtimer {
   struct timerqueue_node node ;
   ktime_t _softexpires ;
   enum hrtimer_restart (*function)(struct hrtimer *) ;
   struct hrtimer_clock_base *base ;
   u8 state ;
   u8 is_rel ;
   u8 is_soft ;
   u8 is_hard ;
};
#line 158  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/hrtimer.h"
struct hrtimer_clock_base {
   struct hrtimer_cpu_base *cpu_base ;
   unsigned int index ;
   clockid_t clockid ;
   seqcount_t seq ;
   struct hrtimer *running ;
   struct timerqueue_head active ;
   ktime_t (*get_time)(void) ;
   ktime_t offset ;
} __attribute__((__aligned__(64)));
#line 213  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/hrtimer.h"
struct hrtimer_cpu_base {
   raw_spinlock_t lock ;
   unsigned int cpu ;
   unsigned int active_bases ;
   unsigned int clock_was_set_seq ;
   unsigned int hres_active : 1 ;
   unsigned int in_hrtirq : 1 ;
   unsigned int hang_detected : 1 ;
   unsigned int softirq_activated : 1 ;
   unsigned int nr_events ;
   unsigned short nr_retries ;
   unsigned short nr_hangs ;
   unsigned int max_hang_time ;
   ktime_t expires_next ;
   struct hrtimer *next_timer ;
   ktime_t softirq_expires_next ;
   struct hrtimer *softirq_next_timer ;
   struct hrtimer_clock_base clock_base[8U] ;
} __attribute__((__aligned__(64)));
#line 40  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/seccomp.h"
struct seccomp_filter;
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seccomp.h"
struct seccomp {
   int mode ;
   struct seccomp_filter *filter ;
};
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/latencytop.h"
struct latency_record {
   unsigned long backtrace[12U] ;
   unsigned int count ;
   unsigned long time ;
   unsigned long max ;
};
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/types.h"
struct task_cputime {
   u64 stime ;
   u64 utime ;
   unsigned long long sum_exec_runtime ;
};
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/signal.h"
struct __anonstruct_sigset_t_276 {
   unsigned long sig[1U] ;
};
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/signal.h"
typedef struct __anonstruct_sigset_t_276 sigset_t;
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/signal.h"
typedef void __signalfn_t(int );
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/signal-defs.h"
typedef __signalfn_t *__sighandler_t;
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/signal-defs.h"
typedef void __restorefn_t(void);
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/signal-defs.h"
typedef __restorefn_t *__sigrestore_t;
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
union sigval {
   int sival_int ;
   void *sival_ptr ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
typedef union sigval sigval_t;
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__kill_277 {
   __kernel_pid_t _pid ;
   __kernel_uid32_t _uid ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__timer_278 {
   __kernel_timer_t _tid ;
   int _overrun ;
   sigval_t _sigval ;
   int _sys_private ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__rt_279 {
   __kernel_pid_t _pid ;
   __kernel_uid32_t _uid ;
   sigval_t _sigval ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__sigchld_280 {
   __kernel_pid_t _pid ;
   __kernel_uid32_t _uid ;
   int _status ;
   __kernel_clock_t _utime ;
   __kernel_clock_t _stime ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__addr_bnd_283 {
   char _dummy_bnd[8U] ;
   void *_lower ;
   void *_upper ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__addr_pkey_284 {
   char _dummy_pkey[8U] ;
   __u32 _pkey ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
union __anonunion_282 {
   short _addr_lsb ;
   struct __anonstruct__addr_bnd_283 _addr_bnd ;
   struct __anonstruct__addr_pkey_284 _addr_pkey ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__sigfault_281 {
   void *_addr ;
   union __anonunion_282 __anonCompField___anonstruct__sigfault_281_47 ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__sigpoll_285 {
   long _band ;
   int _fd ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__sigsys_286 {
   void *_call_addr ;
   int _syscall ;
   unsigned int _arch ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
union __sifields {
   struct __anonstruct__kill_277 _kill ;
   struct __anonstruct__timer_278 _timer ;
   struct __anonstruct__rt_279 _rt ;
   struct __anonstruct__sigchld_280 _sigchld ;
   struct __anonstruct__sigfault_281 _sigfault ;
   struct __anonstruct__sigpoll_285 _sigpoll ;
   struct __anonstruct__sigsys_286 _sigsys ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/signal_types.h"
struct __anonstruct_291 {
   int si_signo ;
   int si_errno ;
   int si_code ;
   union __sifields _sifields ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/signal_types.h"
struct kernel_siginfo {
   struct __anonstruct_291 __anonCompField_kernel_siginfo_50 ;
};
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/signal_types.h"
typedef struct kernel_siginfo kernel_siginfo_t;
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/signal_types.h"
struct sigpending {
   struct list_head list ;
   sigset_t signal ;
};
#line 35  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/signal_types.h"
struct sigaction {
   __sighandler_t sa_handler ;
   unsigned long sa_flags ;
   __sigrestore_t sa_restorer ;
   sigset_t sa_mask ;
};
#line 49  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/signal_types.h"
struct k_sigaction {
   struct sigaction sa ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/task_io_accounting.h"
struct task_io_accounting {
   u64 rchar ;
   u64 wchar ;
   u64 syscr ;
   u64 syscw ;
   u64 read_bytes ;
   u64 write_bytes ;
   u64 cancelled_write_bytes ;
};
#line 107  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/posix-timers.h"
struct posix_cputimer_base {
   u64 nextevt ;
   struct timerqueue_head tqhead ;
};
#line 122  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/posix-timers.h"
struct posix_cputimers {
   struct posix_cputimer_base bases[3U] ;
   unsigned int timers_active ;
   unsigned int expiry_active ;
};
#line 193 
struct signal_struct;
#line 62  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/rseq.h"
union __anonunion_rseq_cs_296 {
   __u64 ptr64 ;
   __u64 ptr ;
};
#line 62  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/rseq.h"
struct rseq {
   __u32 cpu_id_start ;
   __u32 cpu_id ;
   union __anonunion_rseq_cs_296 rseq_cs ;
   __u32 flags ;
} __attribute__((__aligned__(32)));
#line 146 
struct audit_context;
#line 147 
struct backing_dev_info;
#line 148 
struct bio_list;
#line 149 
struct blk_plug;
#line 150 
struct capture_control;
#line 151 
struct cfs_rq;
#line 152 
struct fs_struct;
#line 153 
struct futex_pi_state;
#line 154 
struct io_context;
#line 155 
struct nameidata;
#line 156 
struct nsproxy;
#line 157 
struct perf_event_context;
#line 158 
struct pipe_inode_info;
#line 160 
struct reclaim_state;
#line 161 
struct robust_list_head;
#line 166 
struct sighand_struct;
#line 167 
struct task_delay_info;
#line 168 
struct task_group;
#line 242  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct prev_cputime {
   u64 utime ;
   u64 stime ;
   raw_spinlock_t lock ;
};
#line 290  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct sched_info {
   unsigned long pcount ;
   unsigned long long run_delay ;
   unsigned long long last_arrival ;
   unsigned long long last_queued ;
};
#line 325  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct load_weight {
   unsigned long weight ;
   u32 inv_weight ;
};
#line 352  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct util_est {
   unsigned int enqueued ;
   unsigned int ewma ;
} __attribute__((__aligned__(8)));
#line 401  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct sched_avg {
   u64 last_update_time ;
   u64 load_sum ;
   u64 runnable_load_sum ;
   u32 util_sum ;
   u32 period_contrib ;
   unsigned long load_avg ;
   unsigned long runnable_load_avg ;
   unsigned long util_avg ;
   struct util_est util_est ;
} __attribute__((__aligned__(64)));
#line 413  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct sched_statistics {
   u64 wait_start ;
   u64 wait_max ;
   u64 wait_count ;
   u64 wait_sum ;
   u64 iowait_count ;
   u64 iowait_sum ;
   u64 sleep_start ;
   u64 sleep_max ;
   s64 sum_sleep_runtime ;
   u64 block_start ;
   u64 block_max ;
   u64 exec_max ;
   u64 slice_max ;
   u64 nr_migrations_cold ;
   u64 nr_failed_migrations_affine ;
   u64 nr_failed_migrations_running ;
   u64 nr_failed_migrations_hot ;
   u64 nr_forced_migrations ;
   u64 nr_wakeups ;
   u64 nr_wakeups_sync ;
   u64 nr_wakeups_migrate ;
   u64 nr_wakeups_local ;
   u64 nr_wakeups_remote ;
   u64 nr_wakeups_affine ;
   u64 nr_wakeups_affine_attempts ;
   u64 nr_wakeups_passive ;
   u64 nr_wakeups_idle ;
};
#line 449  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct sched_entity {
   struct load_weight load ;
   unsigned long runnable_weight ;
   struct rb_node run_node ;
   struct list_head group_node ;
   unsigned int on_rq ;
   u64 exec_start ;
   u64 sum_exec_runtime ;
   u64 vruntime ;
   u64 prev_sum_exec_runtime ;
   u64 nr_migrations ;
   struct sched_statistics statistics ;
   int depth ;
   struct sched_entity *parent ;
   struct cfs_rq *cfs_rq ;
   struct cfs_rq *my_q ;
   struct sched_avg avg ;
};
#line 486 
struct rt_rq;
#line 486  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct sched_rt_entity {
   struct list_head run_list ;
   unsigned long timeout ;
   unsigned long watchdog_stamp ;
   unsigned int time_slice ;
   unsigned short on_rq ;
   unsigned short on_list ;
   struct sched_rt_entity *back ;
   struct sched_rt_entity *parent ;
   struct rt_rq *rt_rq ;
   struct rt_rq *my_q ;
} __attribute__((__designated_init__));
#line 504  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct sched_dl_entity {
   struct rb_node rb_node ;
   u64 dl_runtime ;
   u64 dl_deadline ;
   u64 dl_period ;
   u64 dl_bw ;
   u64 dl_density ;
   s64 runtime ;
   u64 deadline ;
   unsigned int flags ;
   unsigned int dl_throttled : 1 ;
   unsigned int dl_boosted : 1 ;
   unsigned int dl_yielded : 1 ;
   unsigned int dl_non_contending : 1 ;
   unsigned int dl_overrun : 1 ;
   struct hrtimer dl_timer ;
   struct hrtimer inactive_timer ;
};
#line 600  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct uclamp_se {
   unsigned int value : 11 ;
   unsigned int bucket_id : 3 ;
   unsigned int active : 1 ;
   unsigned int user_defined : 1 ;
};
#line 625  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct wake_q_node {
   struct wake_q_node *next ;
};
#line 629 
struct sched_class;
#line 629 
struct cred;
#line 629 
struct key;
#line 629 
struct files_struct;
#line 629 
struct rt_mutex_waiter;
#line 629 
struct css_set;
#line 629 
struct compat_robust_list_head;
#line 629 
struct numa_group;
#line 629  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
union __anonunion_298 {
   refcount_t rcu_users ;
   struct callback_head rcu ;
};
#line 629 
struct ftrace_ret_stack;
#line 629 
struct kcov;
#line 629 
struct request_queue;
#line 629  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct task_struct {
   struct thread_info thread_info ;
   long state ;
   void *stack ;
   refcount_t usage ;
   unsigned int flags ;
   unsigned int ptrace ;
   struct llist_node wake_entry ;
   int on_cpu ;
   unsigned int cpu ;
   unsigned int wakee_flips ;
   unsigned long wakee_flip_decay_ts ;
   struct task_struct *last_wakee ;
   int recent_used_cpu ;
   int wake_cpu ;
   int on_rq ;
   int prio ;
   int static_prio ;
   int normal_prio ;
   unsigned int rt_priority ;
   struct sched_class *sched_class ;
   struct sched_entity se ;
   struct sched_rt_entity rt ;
   struct task_group *sched_task_group ;
   struct sched_dl_entity dl ;
   struct uclamp_se uclamp_req[2U] ;
   struct uclamp_se uclamp[2U] ;
   struct hlist_head preempt_notifiers ;
   unsigned int btrace_seq ;
   unsigned int policy ;
   int nr_cpus_allowed ;
   cpumask_t *cpus_ptr ;
   cpumask_t cpus_mask ;
   unsigned long rcu_tasks_nvcsw ;
   u8 rcu_tasks_holdout ;
   u8 rcu_tasks_idx ;
   int rcu_tasks_idle_cpu ;
   struct list_head rcu_tasks_holdout_list ;
   struct sched_info sched_info ;
   struct list_head tasks ;
   struct plist_node pushable_tasks ;
   struct rb_node pushable_dl_tasks ;
   struct mm_struct *mm ;
   struct mm_struct *active_mm ;
   struct vmacache vmacache ;
   struct task_rss_stat rss_stat ;
   int exit_state ;
   int exit_code ;
   int exit_signal ;
   int pdeath_signal ;
   unsigned long jobctl ;
   unsigned int personality ;
   unsigned int sched_reset_on_fork : 1 ;
   unsigned int sched_contributes_to_load : 1 ;
   unsigned int sched_migrated : 1 ;
   unsigned int sched_remote_wakeup : 1 ;
   unsigned int sched_psi_wake_requeue : 1 ;
   unsigned int  ;
   unsigned int in_execve : 1 ;
   unsigned int in_iowait : 1 ;
   unsigned int restore_sigmask : 1 ;
   unsigned int in_user_fault : 1 ;
   unsigned int brk_randomized : 1 ;
   unsigned int no_cgroup_migration : 1 ;
   unsigned int frozen : 1 ;
   unsigned int use_memdelay : 1 ;
   unsigned long atomic_flags ;
   struct restart_block restart_block ;
   pid_t pid ;
   pid_t tgid ;
   unsigned long stack_canary ;
   struct task_struct *real_parent ;
   struct task_struct *parent ;
   struct list_head children ;
   struct list_head sibling ;
   struct task_struct *group_leader ;
   struct list_head ptraced ;
   struct list_head ptrace_entry ;
   struct pid *thread_pid ;
   struct hlist_node pid_links[4U] ;
   struct list_head thread_group ;
   struct list_head thread_node ;
   struct completion *vfork_done ;
   int *set_child_tid ;
   int *clear_child_tid ;
   u64 utime ;
   u64 stime ;
   u64 gtime ;
   struct prev_cputime prev_cputime ;
   unsigned long nvcsw ;
   unsigned long nivcsw ;
   u64 start_time ;
   u64 start_boottime ;
   unsigned long min_flt ;
   unsigned long maj_flt ;
   struct posix_cputimers posix_cputimers ;
   struct cred *ptracer_cred ;
   struct cred *real_cred ;
   struct cred *cred ;
   struct key *cached_requested_key ;
   char comm[16U] ;
   struct nameidata *nameidata ;
   struct sysv_sem sysvsem ;
   struct sysv_shm sysvshm ;
   unsigned long last_switch_count ;
   unsigned long last_switch_time ;
   struct fs_struct *fs ;
   struct files_struct *files ;
   struct nsproxy *nsproxy ;
   struct signal_struct *signal ;
   struct sighand_struct *sighand ;
   sigset_t blocked ;
   sigset_t real_blocked ;
   sigset_t saved_sigmask ;
   struct sigpending pending ;
   unsigned long sas_ss_sp ;
   size_t sas_ss_size ;
   unsigned int sas_ss_flags ;
   struct callback_head *task_works ;
   struct audit_context *audit_context ;
   kuid_t loginuid ;
   unsigned int sessionid ;
   struct seccomp seccomp ;
   u32 parent_exec_id ;
   u32 self_exec_id ;
   spinlock_t alloc_lock ;
   raw_spinlock_t pi_lock ;
   struct wake_q_node wake_q ;
   struct rb_root_cached pi_waiters ;
   struct task_struct *pi_top_task ;
   struct rt_mutex_waiter *pi_blocked_on ;
   struct mutex_waiter *blocked_on ;
   int non_block_count ;
   unsigned int irq_events ;
   unsigned long hardirq_enable_ip ;
   unsigned long hardirq_disable_ip ;
   unsigned int hardirq_enable_event ;
   unsigned int hardirq_disable_event ;
   int hardirqs_enabled ;
   int hardirq_context ;
   unsigned long softirq_disable_ip ;
   unsigned long softirq_enable_ip ;
   unsigned int softirq_disable_event ;
   unsigned int softirq_enable_event ;
   int softirqs_enabled ;
   int softirq_context ;
   u64 curr_chain_key ;
   int lockdep_depth ;
   unsigned int lockdep_recursion ;
   struct held_lock held_locks[48U] ;
   unsigned int in_ubsan ;
   void *journal_info ;
   struct bio_list *bio_list ;
   struct blk_plug *plug ;
   struct reclaim_state *reclaim_state ;
   struct backing_dev_info *backing_dev_info ;
   struct io_context *io_context ;
   struct capture_control *capture_control ;
   unsigned long ptrace_message ;
   kernel_siginfo_t *last_siginfo ;
   struct task_io_accounting ioac ;
   unsigned int psi_flags ;
   u64 acct_rss_mem1 ;
   u64 acct_vm_mem1 ;
   u64 acct_timexpd ;
   nodemask_t mems_allowed ;
   seqcount_t mems_allowed_seq ;
   int cpuset_mem_spread_rotor ;
   int cpuset_slab_spread_rotor ;
   struct css_set *cgroups ;
   struct list_head cg_list ;
   u32 closid ;
   u32 rmid ;
   struct robust_list_head *robust_list ;
   struct compat_robust_list_head *compat_robust_list ;
   struct list_head pi_state_list ;
   struct futex_pi_state *pi_state_cache ;
   struct mutex futex_exit_mutex ;
   unsigned int futex_state ;
   struct perf_event_context *perf_event_ctxp[2U] ;
   struct mutex perf_event_mutex ;
   struct list_head perf_event_list ;
   struct mempolicy *mempolicy ;
   short il_prev ;
   short pref_node_fork ;
   int numa_scan_seq ;
   unsigned int numa_scan_period ;
   unsigned int numa_scan_period_max ;
   int numa_preferred_nid ;
   unsigned long numa_migrate_retry ;
   u64 node_stamp ;
   u64 last_task_numa_placement ;
   u64 last_sum_exec_runtime ;
   struct callback_head numa_work ;
   struct numa_group *numa_group ;
   unsigned long *numa_faults ;
   unsigned long total_numa_faults ;
   unsigned long numa_faults_locality[3U] ;
   unsigned long numa_pages_migrated ;
   struct rseq *rseq ;
   u32 rseq_sig ;
   unsigned long rseq_event_mask ;
   struct tlbflush_unmap_batch tlb_ubc ;
   union __anonunion_298 __anonCompField_task_struct_52 ;
   struct pipe_inode_info *splice_pipe ;
   struct page_frag task_frag ;
   struct task_delay_info *delays ;
   int make_it_fail ;
   unsigned int fail_nth ;
   int nr_dirtied ;
   int nr_dirtied_pause ;
   unsigned long dirty_paused_when ;
   int latency_record_count ;
   struct latency_record latency_record[32U] ;
   u64 timer_slack_ns ;
   u64 default_timer_slack_ns ;
   unsigned int kasan_depth ;
   int curr_ret_stack ;
   int curr_ret_depth ;
   struct ftrace_ret_stack *ret_stack ;
   unsigned long long ftrace_timestamp ;
   atomic_t trace_overrun ;
   atomic_t tracing_graph_pause ;
   unsigned long trace ;
   unsigned long trace_recursion ;
   unsigned int kcov_mode ;
   unsigned int kcov_size ;
   void *kcov_area ;
   struct kcov *kcov ;
   u64 kcov_handle ;
   int kcov_sequence ;
   struct mem_cgroup *memcg_in_oom ;
   gfp_t memcg_oom_gfp_mask ;
   int memcg_oom_order ;
   unsigned int memcg_nr_pages_over_high ;
   struct mem_cgroup *active_memcg ;
   struct request_queue *throttle_queue ;
   struct uprobe_task *utask ;
   unsigned int sequential_io ;
   unsigned int sequential_io_avg ;
   unsigned long task_state_change ;
   int pagefault_disabled ;
   struct task_struct *oom_reaper_list ;
   struct vm_struct *stack_vm_area ;
   refcount_t stack_refcount ;
   int patch_state ;
   void *security ;
   struct thread_struct thread ;
};
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/extable.h"
struct exception_table_entry {
   int insn ;
   int fixup ;
   int handler ;
};
#line 417  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm.h"
struct vm_fault {
   struct vm_area_struct *vma ;
   unsigned int flags ;
   gfp_t gfp_mask ;
   unsigned long pgoff ;
   unsigned long address ;
   pmd_t *pmd ;
   pud_t *pud ;
   pte_t orig_pte ;
   struct page *cow_page ;
   struct mem_cgroup *memcg ;
   struct page *page ;
   pte_t *pte ;
   spinlock_t *ptl ;
   pgtable_t prealloc_pte ;
};
#line 448 
enum page_entry_size {
    PE_SIZE_PTE = 0,
    PE_SIZE_PMD = 1,
    PE_SIZE_PUD = 2
};
#line 467  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm.h"
struct vm_operations_struct {
   void (*open)(struct vm_area_struct *) ;
   void (*close)(struct vm_area_struct *) ;
   int (*split)(struct vm_area_struct *, unsigned long ) ;
   int (*mremap)(struct vm_area_struct *) ;
   vm_fault_t (*fault)(struct vm_fault *) ;
   vm_fault_t (*huge_fault)(struct vm_fault *, enum page_entry_size ) ;
   void (*map_pages)(struct vm_fault *, unsigned long , unsigned long ) ;
   unsigned long (*pagesize)(struct vm_area_struct *) ;
   vm_fault_t (*page_mkwrite)(struct vm_fault *) ;
   vm_fault_t (*pfn_mkwrite)(struct vm_fault *) ;
   int (*access)(struct vm_area_struct *, unsigned long , void *, int , int ) ;
   char *(*name)(struct vm_area_struct *) ;
   int (*set_policy)(struct vm_area_struct *, struct mempolicy *) ;
   struct mempolicy *(*get_policy)(struct vm_area_struct *, unsigned long ) ;
   struct page *(*find_special_page)(struct vm_area_struct *, unsigned long ) ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_bl.h"
struct hlist_bl_node;
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_bl.h"
struct hlist_bl_head {
   struct hlist_bl_node *first ;
};
#line 38  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_bl.h"
struct hlist_bl_node {
   struct hlist_bl_node *next ;
   struct hlist_bl_node **pprev ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockref.h"
struct __anonstruct_387 {
   spinlock_t lock ;
   int count ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockref.h"
union __anonunion_386 {
   struct __anonstruct_387 __anonCompField___anonunion_386_53 ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockref.h"
struct lockref {
   union __anonunion_386 __anonCompField_lockref_54 ;
};
#line 78  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/stringhash.h"
struct path;
#line 79 
struct vfsmount;
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dcache.h"
struct __anonstruct_389 {
   u32 hash ;
   u32 len ;
};
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dcache.h"
union __anonunion_388 {
   struct __anonstruct_389 __anonCompField___anonunion_388_55 ;
   u64 hash_len ;
};
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dcache.h"
struct qstr {
   union __anonunion_388 __anonCompField_qstr_56 ;
   unsigned char *name ;
};
#line 89 
struct dentry_operations;
#line 89 
struct super_block;
#line 89  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dcache.h"
union __anonunion_390 {
   struct list_head d_lru ;
   wait_queue_head_t *d_wait ;
};
#line 89  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dcache.h"
union __anonunion_d_u_391 {
   struct hlist_node d_alias ;
   struct hlist_bl_node d_in_lookup_hash ;
   struct callback_head d_rcu ;
};
#line 89  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dcache.h"
struct dentry {
   unsigned int d_flags ;
   seqcount_t d_seq ;
   struct hlist_bl_node d_hash ;
   struct dentry *d_parent ;
   struct qstr d_name ;
   struct inode *d_inode ;
   unsigned char d_iname[32U] ;
   struct lockref d_lockref ;
   struct dentry_operations *d_op ;
   struct super_block *d_sb ;
   unsigned long d_time ;
   void *d_fsdata ;
   union __anonunion_390 __anonCompField_dentry_57 ;
   struct list_head d_child ;
   struct list_head d_subdirs ;
   union __anonunion_d_u_391 d_u ;
} __attribute__((__designated_init__));
#line 135  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dcache.h"
struct dentry_operations {
   int (*d_revalidate)(struct dentry *, unsigned int ) ;
   int (*d_weak_revalidate)(struct dentry *, unsigned int ) ;
   int (*d_hash)(struct dentry *, struct qstr *) ;
   int (*d_compare)(struct dentry *, unsigned int , char *, struct qstr *) ;
   int (*d_delete)(struct dentry *) ;
   int (*d_init)(struct dentry *) ;
   void (*d_release)(struct dentry *) ;
   void (*d_prune)(struct dentry *) ;
   void (*d_iput)(struct dentry *, struct inode *) ;
   char *(*d_dname)(struct dentry *, char *, int ) ;
   struct vfsmount *(*d_automount)(struct path *) ;
   int (*d_manage)(struct path *, bool ) ;
   struct dentry *(*d_real)(struct dentry *, struct inode *) ;
} __attribute__((__aligned__(64)));
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/path.h"
struct path {
   struct vfsmount *mnt ;
   struct dentry *dentry ;
} __attribute__((__designated_init__));
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/stat.h"
struct kstat {
   u32 result_mask ;
   umode_t mode ;
   unsigned int nlink ;
   uint32_t blksize ;
   u64 attributes ;
   u64 attributes_mask ;
   u64 ino ;
   dev_t dev ;
   dev_t rdev ;
   kuid_t uid ;
   kgid_t gid ;
   loff_t size ;
   struct timespec64 atime ;
   struct timespec64 mtime ;
   struct timespec64 ctime ;
   struct timespec64 btime ;
   u64 blocks ;
};
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_lru.h"
struct list_lru_one {
   struct list_head list ;
   long nr_items ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_lru.h"
struct list_lru_memcg {
   struct callback_head rcu ;
   struct list_lru_one *lru[0U] ;
};
#line 40  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_lru.h"
struct list_lru_node {
   spinlock_t lock ;
   struct list_lru_one lru ;
   struct list_lru_memcg *memcg_lrus ;
   long nr_items ;
} __attribute__((__aligned__(64)));
#line 52  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_lru.h"
struct list_lru {
   struct list_lru_node *node ;
   struct list_head list ;
   int shrinker_id ;
   bool memcg_aware ;
};
#line 292  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/xarray.h"
struct xarray {
   spinlock_t xa_lock ;
   gfp_t xa_flags ;
   void *xa_head ;
};
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/capability.h"
struct kernel_cap_struct {
   __u32 cap[2U] ;
};
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/capability.h"
typedef struct kernel_cap_struct kernel_cap_t;
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fiemap.h"
struct fiemap_extent {
   __u64 fe_logical ;
   __u64 fe_physical ;
   __u64 fe_length ;
   __u64 fe_reserved64[2U] ;
   __u32 fe_flags ;
   __u32 fe_reserved[3U] ;
};
#line 39 
enum migrate_mode {
    MIGRATE_ASYNC = 0,
    MIGRATE_SYNC_LIGHT = 1,
    MIGRATE_SYNC = 2,
    MIGRATE_SYNC_NO_COPY = 3
};
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rcuwait.h"
struct rcuwait {
   struct task_struct *task ;
};
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rcu_sync.h"
struct rcu_sync {
   int gp_state ;
   int gp_count ;
   wait_queue_head_t gp_wait ;
   struct callback_head cb_head ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/percpu-rwsem.h"
struct percpu_rw_semaphore {
   struct rcu_sync rss ;
   unsigned int *read_count ;
   struct rw_semaphore rw_sem ;
   struct rcuwait writer ;
   int readers_block ;
};
#line 10  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/delayed_call.h"
struct delayed_call {
   void (*fn)(void *) ;
   void *arg ;
};
#line 36  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/uuid.h"
struct __anonstruct_uuid_t_409 {
   __u8 b[16U] ;
};
#line 36  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/uuid.h"
typedef struct __anonstruct_uuid_t_409 uuid_t;
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uuid.h"
typedef u32 errseq_t;
#line 72  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/iocontext.h"
union __anonunion_410 {
   struct list_head q_node ;
   struct kmem_cache *__rcu_icq_cache ;
};
#line 72  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/iocontext.h"
union __anonunion_411 {
   struct hlist_node ioc_node ;
   struct callback_head __rcu_head ;
};
#line 72  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/iocontext.h"
struct io_cq {
   struct request_queue *q ;
   struct io_context *ioc ;
   union __anonunion_410 __anonCompField_io_cq_60 ;
   union __anonunion_411 __anonCompField_io_cq_61 ;
   unsigned int flags ;
};
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/iocontext.h"
struct io_context {
   atomic_long_t refcount ;
   atomic_t active_ref ;
   atomic_t nr_tasks ;
   spinlock_t lock ;
   unsigned short ioprio ;
   int nr_batch_requests ;
   unsigned long last_waited ;
   struct xarray icq_tree ;
   struct io_cq *icq_hint ;
   struct hlist_head icq_list ;
   struct work_struct release_work ;
};
#line 286  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fs.h"
struct bio;
#line 287 
struct export_operations;
#line 288 
struct hd_geometry;
#line 289 
struct iovec;
#line 290 
struct kiocb;
#line 291 
struct kobject;
#line 292 
struct poll_table_struct;
#line 293 
struct kstatfs;
#line 294 
struct swap_info_struct;
#line 295 
struct iov_iter;
#line 296 
struct fscrypt_info;
#line 297 
struct fscrypt_operations;
#line 298 
struct fsverity_info;
#line 299 
struct fsverity_operations;
#line 300 
struct fs_context;
#line 301 
struct fs_parameter_description;
#line 224  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct iattr {
   unsigned int ia_valid ;
   umode_t ia_mode ;
   kuid_t ia_uid ;
   kgid_t ia_gid ;
   loff_t ia_size ;
   struct timespec64 ia_atime ;
   struct timespec64 ia_mtime ;
   struct timespec64 ia_ctime ;
   struct file *ia_file ;
};
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/percpu_counter.h"
struct percpu_counter {
   raw_spinlock_t lock ;
   s64 count ;
   struct list_head list ;
   s32 *counters ;
};
#line 214  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dqblk_xfs.h"
struct dquot;
#line 215 
struct kqid;
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/projid.h"
typedef __kernel_uid32_t projid_t;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/projid.h"
struct __anonstruct_kprojid_t_412 {
   projid_t val ;
};
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/projid.h"
typedef struct __anonstruct_kprojid_t_412 kprojid_t;
#line 180  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/quota.h"
enum quota_type {
    USRQUOTA = 0,
    GRPQUOTA = 1,
    PRJQUOTA = 2
};
#line 66  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
typedef long long qsize_t;
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
union __anonunion_413 {
   kuid_t uid ;
   kgid_t gid ;
   kprojid_t projid ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct kqid {
   union __anonunion_413 __anonCompField_kqid_62 ;
   enum quota_type type ;
};
#line 205  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct mem_dqblk {
   qsize_t dqb_bhardlimit ;
   qsize_t dqb_bsoftlimit ;
   qsize_t dqb_curspace ;
   qsize_t dqb_rsvspace ;
   qsize_t dqb_ihardlimit ;
   qsize_t dqb_isoftlimit ;
   qsize_t dqb_curinodes ;
   time64_t dqb_btime ;
   time64_t dqb_itime ;
};
#line 216 
struct quota_format_type;
#line 222  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct mem_dqinfo {
   struct quota_format_type *dqi_format ;
   int dqi_fmt_id ;
   struct list_head dqi_dirty_list ;
   unsigned long dqi_flags ;
   unsigned int dqi_bgrace ;
   unsigned int dqi_igrace ;
   qsize_t dqi_max_spc_limit ;
   qsize_t dqi_max_ino_limit ;
   void *dqi_priv ;
};
#line 294  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct dquot {
   struct hlist_node dq_hash ;
   struct list_head dq_inuse ;
   struct list_head dq_free ;
   struct list_head dq_dirty ;
   struct mutex dq_lock ;
   spinlock_t dq_dqb_lock ;
   atomic_t dq_count ;
   struct super_block *dq_sb ;
   struct kqid dq_id ;
   loff_t dq_off ;
   unsigned long dq_flags ;
   struct mem_dqblk dq_dqb ;
};
#line 310  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct quota_format_ops {
   int (*check_quota_file)(struct super_block *, int ) ;
   int (*read_file_info)(struct super_block *, int ) ;
   int (*write_file_info)(struct super_block *, int ) ;
   int (*free_file_info)(struct super_block *, int ) ;
   int (*read_dqblk)(struct dquot *) ;
   int (*commit_dqblk)(struct dquot *) ;
   int (*release_dqblk)(struct dquot *) ;
   int (*get_next_id)(struct super_block *, struct kqid *) ;
};
#line 322  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct dquot_operations {
   int (*write_dquot)(struct dquot *) ;
   struct dquot *(*alloc_dquot)(struct super_block *, int ) ;
   void (*destroy_dquot)(struct dquot *) ;
   int (*acquire_dquot)(struct dquot *) ;
   int (*release_dquot)(struct dquot *) ;
   int (*mark_dirty)(struct dquot *) ;
   int (*write_info)(struct super_block *, int ) ;
   qsize_t *(*get_reserved_space)(struct inode *) ;
   int (*get_projid)(struct inode *, kprojid_t *) ;
   int (*get_inode_usage)(struct inode *, qsize_t *) ;
   int (*get_next_id)(struct super_block *, struct kqid *) ;
};
#line 343  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct qc_dqblk {
   int d_fieldmask ;
   u64 d_spc_hardlimit ;
   u64 d_spc_softlimit ;
   u64 d_ino_hardlimit ;
   u64 d_ino_softlimit ;
   u64 d_space ;
   u64 d_ino_count ;
   s64 d_ino_timer ;
   s64 d_spc_timer ;
   int d_ino_warns ;
   int d_spc_warns ;
   u64 d_rt_spc_hardlimit ;
   u64 d_rt_spc_softlimit ;
   u64 d_rt_space ;
   s64 d_rt_spc_timer ;
   int d_rt_spc_warns ;
};
#line 395  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct qc_type_state {
   unsigned int flags ;
   unsigned int spc_timelimit ;
   unsigned int ino_timelimit ;
   unsigned int rt_spc_timelimit ;
   unsigned int spc_warnlimit ;
   unsigned int ino_warnlimit ;
   unsigned int rt_spc_warnlimit ;
   unsigned long long ino ;
   blkcnt_t blocks ;
   blkcnt_t nextents ;
};
#line 409  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct qc_state {
   unsigned int s_incoredqs ;
   struct qc_type_state s_state[3U] ;
};
#line 415  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct qc_info {
   int i_fieldmask ;
   unsigned int i_flags ;
   unsigned int i_spc_timelimit ;
   unsigned int i_ino_timelimit ;
   unsigned int i_rt_spc_timelimit ;
   unsigned int i_spc_warnlimit ;
   unsigned int i_ino_warnlimit ;
   unsigned int i_rt_spc_warnlimit ;
};
#line 428  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct quotactl_ops {
   int (*quota_on)(struct super_block *, int , int , struct path *) ;
   int (*quota_off)(struct super_block *, int ) ;
   int (*quota_enable)(struct super_block *, unsigned int ) ;
   int (*quota_disable)(struct super_block *, unsigned int ) ;
   int (*quota_sync)(struct super_block *, int ) ;
   int (*set_info)(struct super_block *, int , struct qc_info *) ;
   int (*get_dqblk)(struct super_block *, struct kqid , struct qc_dqblk *) ;
   int (*get_nextdqblk)(struct super_block *, struct kqid *, struct qc_dqblk *) ;
   int (*set_dqblk)(struct super_block *, struct kqid , struct qc_dqblk *) ;
   int (*get_state)(struct super_block *, struct qc_state *) ;
   int (*rm_xquota)(struct super_block *, unsigned int ) ;
};
#line 443  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct quota_format_type {
   int qf_fmt_id ;
   struct quota_format_ops *qf_ops ;
   struct module *qf_owner ;
   struct quota_format_type *qf_next ;
};
#line 518  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct quota_info {
   unsigned int flags ;
   struct rw_semaphore dqio_sem ;
   struct inode *files[3U] ;
   struct mem_dqinfo info[3U] ;
   struct quota_format_ops *ops[3U] ;
};
#line 538 
enum rw_hint {
    WRITE_LIFE_NOT_SET = 0,
    WRITE_LIFE_NONE = 1,
    WRITE_LIFE_SHORT = 2,
    WRITE_LIFE_MEDIUM = 3,
    WRITE_LIFE_LONG = 4,
    WRITE_LIFE_EXTREME = 5
};
#line 318  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct kiocb {
   struct file *ki_filp ;
   loff_t ki_pos ;
   void (*ki_complete)(struct kiocb *, long , long ) ;
   void *private ;
   int ki_flags ;
   u16 ki_hint ;
   u16 ki_ioprio ;
   unsigned int ki_cookie ;
};
#line 339  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
union __anonunion_arg_415 {
   char *buf ;
   void *data ;
};
#line 339  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct __anonstruct_read_descriptor_t_414 {
   size_t written ;
   size_t count ;
   union __anonunion_arg_415 arg ;
   int error ;
};
#line 339  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
typedef struct __anonstruct_read_descriptor_t_414 read_descriptor_t;
#line 362  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct address_space_operations {
   int (*writepage)(struct page *, struct writeback_control *) ;
   int (*readpage)(struct file *, struct page *) ;
   int (*writepages)(struct address_space *, struct writeback_control *) ;
   int (*set_page_dirty)(struct page *) ;
   int (*readpages)(struct file *, struct address_space *, struct list_head *, unsigned int ) ;
   int (*write_begin)(struct file *, struct address_space *, loff_t , unsigned int , unsigned int , struct page **, void **) ;
   int (*write_end)(struct file *, struct address_space *, loff_t , unsigned int , unsigned int , struct page *, void *) ;
   sector_t (*bmap)(struct address_space *, sector_t ) ;
   void (*invalidatepage)(struct page *, unsigned int , unsigned int ) ;
   int (*releasepage)(struct page *, gfp_t ) ;
   void (*freepage)(struct page *) ;
   ssize_t (*direct_IO)(struct kiocb *, struct iov_iter *) ;
   int (*migratepage)(struct address_space *, struct page *, struct page *, enum migrate_mode ) ;
   bool (*isolate_page)(struct page *, isolate_mode_t ) ;
   void (*putback_page)(struct page *) ;
   int (*launder_page)(struct page *) ;
   int (*is_partially_uptodate)(struct page *, unsigned long , unsigned long ) ;
   void (*is_dirty_writeback)(struct page *, bool *, bool *) ;
   int (*error_remove_page)(struct address_space *, struct page *) ;
   int (*swap_activate)(struct swap_info_struct *, struct file *, sector_t *) ;
   void (*swap_deactivate)(struct file *) ;
};
#line 445  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct address_space {
   struct inode *host ;
   struct xarray i_pages ;
   gfp_t gfp_mask ;
   atomic_t i_mmap_writable ;
   atomic_t nr_thps ;
   struct rb_root_cached i_mmap ;
   struct rw_semaphore i_mmap_rwsem ;
   unsigned long nrpages ;
   unsigned long nrexceptional ;
   unsigned long writeback_index ;
   struct address_space_operations *a_ops ;
   unsigned long flags ;
   errseq_t wb_err ;
   spinlock_t private_lock ;
   struct list_head private_list ;
   void *private_data ;
} __attribute__((__designated_init__, __aligned__(8)));
#line 473 
struct hd_struct;
#line 473 
struct gendisk;
#line 473  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct block_device {
   dev_t bd_dev ;
   int bd_openers ;
   struct inode *bd_inode ;
   struct super_block *bd_super ;
   struct mutex bd_mutex ;
   void *bd_claiming ;
   void *bd_holder ;
   int bd_holders ;
   bool bd_write_holder ;
   struct list_head bd_holder_disks ;
   struct block_device *bd_contains ;
   unsigned int bd_block_size ;
   u8 bd_partno ;
   struct hd_struct *bd_part ;
   unsigned int bd_part_count ;
   int bd_invalidated ;
   struct gendisk *bd_disk ;
   struct request_queue *bd_queue ;
   struct backing_dev_info *bd_bdi ;
   struct list_head bd_list ;
   unsigned long bd_private ;
   int bd_fsfreeze_count ;
   struct mutex bd_fsfreeze_mutex ;
} __attribute__((__designated_init__));
#line 587 
struct posix_acl;
#line 614 
struct fsnotify_mark_connector;
#line 628 
struct inode_operations;
#line 628  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
union __anonunion_418 {
   unsigned int i_nlink ;
   unsigned int __i_nlink ;
};
#line 628  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
union __anonunion_419 {
   struct hlist_head i_dentry ;
   struct callback_head i_rcu ;
};
#line 628  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
union __anonunion_420 {
   struct file_operations *i_fop ;
   void (*free_inode)(struct inode *) ;
};
#line 628 
struct file_lock_context;
#line 628  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
union __anonunion_421 {
   struct pipe_inode_info *i_pipe ;
   struct block_device *i_bdev ;
   struct cdev *i_cdev ;
   char *i_link ;
   unsigned int i_dir_seq ;
};
#line 628  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct inode {
   umode_t i_mode ;
   unsigned short i_opflags ;
   kuid_t i_uid ;
   kgid_t i_gid ;
   unsigned int i_flags ;
   struct posix_acl *i_acl ;
   struct posix_acl *i_default_acl ;
   struct inode_operations *i_op ;
   struct super_block *i_sb ;
   struct address_space *i_mapping ;
   void *i_security ;
   unsigned long i_ino ;
   union __anonunion_418 __anonCompField_inode_63 ;
   dev_t i_rdev ;
   loff_t i_size ;
   struct timespec64 i_atime ;
   struct timespec64 i_mtime ;
   struct timespec64 i_ctime ;
   spinlock_t i_lock ;
   unsigned short i_bytes ;
   u8 i_blkbits ;
   u8 i_write_hint ;
   blkcnt_t i_blocks ;
   unsigned long i_state ;
   struct rw_semaphore i_rwsem ;
   unsigned long dirtied_when ;
   unsigned long dirtied_time_when ;
   struct hlist_node i_hash ;
   struct list_head i_io_list ;
   struct bdi_writeback *i_wb ;
   int i_wb_frn_winner ;
   u16 i_wb_frn_avg_time ;
   u16 i_wb_frn_history ;
   struct list_head i_lru ;
   struct list_head i_sb_list ;
   struct list_head i_wb_list ;
   union __anonunion_419 __anonCompField_inode_64 ;
   atomic64_t i_version ;
   atomic_t i_count ;
   atomic_t i_dio_count ;
   atomic_t i_writecount ;
   atomic_t i_readcount ;
   union __anonunion_420 __anonCompField_inode_65 ;
   struct file_lock_context *i_flctx ;
   struct address_space i_data ;
   struct list_head i_devices ;
   union __anonunion_421 __anonCompField_inode_66 ;
   __u32 i_generation ;
   __u32 i_fsnotify_mask ;
   struct fsnotify_mark_connector *i_fsnotify_marks ;
   struct fscrypt_info *i_crypt_info ;
   struct fsverity_info *i_verity_info ;
   void *i_private ;
} __attribute__((__designated_init__));
#line 904  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct fown_struct {
   rwlock_t lock ;
   struct pid *pid ;
   enum pid_type pid_type ;
   kuid_t uid ;
   kuid_t euid ;
   int signum ;
};
#line 915  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct file_ra_state {
   unsigned long start ;
   unsigned int size ;
   unsigned int async_size ;
   unsigned int ra_pages ;
   unsigned int mmap_miss ;
   loff_t prev_pos ;
};
#line 935  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
union __anonunion_f_u_422 {
   struct llist_node fu_llist ;
   struct callback_head fu_rcuhead ;
};
#line 935  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct file {
   union __anonunion_f_u_422 f_u ;
   struct path f_path ;
   struct inode *f_inode ;
   struct file_operations *f_op ;
   spinlock_t f_lock ;
   enum rw_hint f_write_hint ;
   atomic_long_t f_count ;
   unsigned int f_flags ;
   fmode_t f_mode ;
   struct mutex f_pos_lock ;
   loff_t f_pos ;
   struct fown_struct f_owner ;
   struct cred *f_cred ;
   struct file_ra_state f_ra ;
   u64 f_version ;
   void *f_security ;
   void *private_data ;
   struct list_head f_ep_links ;
   struct list_head f_tfile_llink ;
   struct address_space *f_mapping ;
   errseq_t f_wb_err ;
} __attribute__((__designated_init__, __aligned__(4)));
#line 988  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
typedef void *fl_owner_t;
#line 1026 
struct file_lock;
#line 1029  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct file_lock_operations {
   void (*fl_copy_lock)(struct file_lock *, struct file_lock *) ;
   void (*fl_release_private)(struct file_lock *) ;
};
#line 1034  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct lock_manager_operations {
   fl_owner_t (*lm_get_owner)(fl_owner_t ) ;
   void (*lm_put_owner)(fl_owner_t ) ;
   void (*lm_notify)(struct file_lock *) ;
   int (*lm_grant)(struct file_lock *, int ) ;
   bool (*lm_break)(struct file_lock *) ;
   int (*lm_change)(struct file_lock *, int , struct list_head *) ;
   void (*lm_setup)(struct file_lock *, void **) ;
};
#line 1052 
struct net;
#line 1058 
struct nlm_lockowner;
#line 10  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/nfs_fs_i.h"
struct nfs_lock_info {
   u32 state ;
   struct nlm_lockowner *owner ;
   struct list_head list ;
};
#line 15 
struct nfs4_lock_state;
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/nfs_fs_i.h"
struct nfs4_lock_info {
   struct nfs4_lock_state *owner ;
};
#line 1079  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct fasync_struct;
#line 1079  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct __anonstruct_afs_424 {
   struct list_head link ;
   int state ;
   unsigned int debug_id ;
};
#line 1079  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
union __anonunion_fl_u_423 {
   struct nfs_lock_info nfs_fl ;
   struct nfs4_lock_info nfs4_fl ;
   struct __anonstruct_afs_424 afs ;
};
#line 1079  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct file_lock {
   struct file_lock *fl_blocker ;
   struct list_head fl_list ;
   struct hlist_node fl_link ;
   struct list_head fl_blocked_requests ;
   struct list_head fl_blocked_member ;
   fl_owner_t fl_owner ;
   unsigned int fl_flags ;
   unsigned char fl_type ;
   unsigned int fl_pid ;
   int fl_link_cpu ;
   wait_queue_head_t fl_wait ;
   struct file *fl_file ;
   loff_t fl_start ;
   loff_t fl_end ;
   struct fasync_struct *fl_fasync ;
   unsigned long fl_break_time ;
   unsigned long fl_downgrade_time ;
   struct file_lock_operations *fl_ops ;
   struct lock_manager_operations *fl_lmops ;
   union __anonunion_fl_u_423 fl_u ;
} __attribute__((__designated_init__));
#line 1117  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct file_lock_context {
   spinlock_t flc_lock ;
   struct list_head flc_flock ;
   struct list_head flc_posix ;
   struct list_head flc_lease ;
};
#line 1331  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct fasync_struct {
   rwlock_t fa_lock ;
   int magic ;
   int fa_fd ;
   struct fasync_struct *fa_next ;
   struct file *fa_file ;
   struct callback_head fa_rcu ;
};
#line 1418  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct sb_writers {
   int frozen ;
   wait_queue_head_t wait_unfrozen ;
   struct percpu_rw_semaphore rw_sem[3U] ;
};
#line 1424 
struct super_operations;
#line 1424 
struct xattr_handler;
#line 1424 
struct mtd_info;
#line 1424  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct super_block {
   struct list_head s_list ;
   dev_t s_dev ;
   unsigned char s_blocksize_bits ;
   unsigned long s_blocksize ;
   loff_t s_maxbytes ;
   struct file_system_type *s_type ;
   struct super_operations *s_op ;
   struct dquot_operations *dq_op ;
   struct quotactl_ops *s_qcop ;
   struct export_operations *s_export_op ;
   unsigned long s_flags ;
   unsigned long s_iflags ;
   unsigned long s_magic ;
   struct dentry *s_root ;
   struct rw_semaphore s_umount ;
   int s_count ;
   atomic_t s_active ;
   void *s_security ;
   struct xattr_handler **s_xattr ;
   struct fscrypt_operations *s_cop ;
   struct key *s_master_keys ;
   struct fsverity_operations *s_vop ;
   struct hlist_bl_head s_roots ;
   struct list_head s_mounts ;
   struct block_device *s_bdev ;
   struct backing_dev_info *s_bdi ;
   struct mtd_info *s_mtd ;
   struct hlist_node s_instances ;
   unsigned int s_quota_types ;
   struct quota_info s_dquot ;
   struct sb_writers s_writers ;
   void *s_fs_info ;
   u32 s_time_gran ;
   time64_t s_time_min ;
   time64_t s_time_max ;
   __u32 s_fsnotify_mask ;
   struct fsnotify_mark_connector *s_fsnotify_marks ;
   char s_id[32U] ;
   uuid_t s_uuid ;
   unsigned int s_max_links ;
   fmode_t s_mode ;
   struct mutex s_vfs_rename_mutex ;
   char *s_subtype ;
   struct dentry_operations *s_d_op ;
   int cleancache_poolid ;
   struct shrinker s_shrink ;
   atomic_long_t s_remove_count ;
   atomic_long_t s_fsnotify_inode_refs ;
   int s_readonly_remount ;
   struct workqueue_struct *s_dio_done_wq ;
   struct hlist_head s_pins ;
   struct user_namespace *s_user_ns ;
   struct list_lru s_dentry_lru ;
   struct list_lru s_inode_lru ;
   struct callback_head rcu ;
   struct work_struct destroy_work ;
   struct mutex s_sync_lock ;
   int s_stack_depth ;
   spinlock_t s_inode_list_lock ;
   struct list_head s_inodes ;
   spinlock_t s_inode_wblist_lock ;
   struct list_head s_inodes_wb ;
} __attribute__((__designated_init__));
#line 1746  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct fiemap_extent_info {
   unsigned int fi_flags ;
   unsigned int fi_extents_mapped ;
   unsigned int fi_extents_max ;
   struct fiemap_extent *fi_extents_start ;
};
#line 1756 
struct dir_context;
#line 1767  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct dir_context {
   int (*actor)(struct dir_context *, char *, int , loff_t , u64 , unsigned int ) ;
   loff_t pos ;
};
#line 1771 
struct block_device_operations;
#line 1821  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct file_operations {
   struct module *owner ;
   loff_t (*llseek)(struct file *, loff_t , int ) ;
   ssize_t (*read)(struct file *, char *, size_t , loff_t *) ;
   ssize_t (*write)(struct file *, char *, size_t , loff_t *) ;
   ssize_t (*read_iter)(struct kiocb *, struct iov_iter *) ;
   ssize_t (*write_iter)(struct kiocb *, struct iov_iter *) ;
   int (*iopoll)(struct kiocb *, bool ) ;
   int (*iterate)(struct file *, struct dir_context *) ;
   int (*iterate_shared)(struct file *, struct dir_context *) ;
   __poll_t (*poll)(struct file *, struct poll_table_struct *) ;
   long (*unlocked_ioctl)(struct file *, unsigned int , unsigned long ) ;
   long (*compat_ioctl)(struct file *, unsigned int , unsigned long ) ;
   int (*mmap)(struct file *, struct vm_area_struct *) ;
   unsigned long mmap_supported_flags ;
   int (*open)(struct inode *, struct file *) ;
   int (*flush)(struct file *, fl_owner_t ) ;
   int (*release)(struct inode *, struct file *) ;
   int (*fsync)(struct file *, loff_t , loff_t , int ) ;
   int (*fasync)(int , struct file *, int ) ;
   int (*lock)(struct file *, int , struct file_lock *) ;
   ssize_t (*sendpage)(struct file *, struct page *, int , size_t , loff_t *, int ) ;
   unsigned long (*get_unmapped_area)(struct file *, unsigned long , unsigned long , unsigned long , unsigned long ) ;
   int (*check_flags)(int ) ;
   int (*flock)(struct file *, int , struct file_lock *) ;
   ssize_t (*splice_write)(struct pipe_inode_info *, struct file *, loff_t *, size_t , unsigned int ) ;
   ssize_t (*splice_read)(struct file *, loff_t *, struct pipe_inode_info *, size_t , unsigned int ) ;
   int (*setlease)(struct file *, long , struct file_lock **, void **) ;
   long (*fallocate)(struct file *, int , loff_t , loff_t ) ;
   void (*show_fdinfo)(struct seq_file *, struct file *) ;
   ssize_t (*copy_file_range)(struct file *, loff_t , struct file *, loff_t , size_t , unsigned int ) ;
   loff_t (*remap_file_range)(struct file *, loff_t , struct file *, loff_t , loff_t , unsigned int ) ;
   int (*fadvise)(struct file *, loff_t , loff_t , int ) ;
} __attribute__((__designated_init__));
#line 1863  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct inode_operations {
   struct dentry *(*lookup)(struct inode *, struct dentry *, unsigned int ) ;
   char *(*get_link)(struct dentry *, struct inode *, struct delayed_call *) ;
   int (*permission)(struct inode *, int ) ;
   struct posix_acl *(*get_acl)(struct inode *, int ) ;
   int (*readlink)(struct dentry *, char *, int ) ;
   int (*create)(struct inode *, struct dentry *, umode_t , bool ) ;
   int (*link)(struct dentry *, struct inode *, struct dentry *) ;
   int (*unlink)(struct inode *, struct dentry *) ;
   int (*symlink)(struct inode *, struct dentry *, char *) ;
   int (*mkdir)(struct inode *, struct dentry *, umode_t ) ;
   int (*rmdir)(struct inode *, struct dentry *) ;
   int (*mknod)(struct inode *, struct dentry *, umode_t , dev_t ) ;
   int (*rename)(struct inode *, struct dentry *, struct inode *, struct dentry *, unsigned int ) ;
   int (*setattr)(struct dentry *, struct iattr *) ;
   int (*getattr)(struct path *, struct kstat *, u32 , unsigned int ) ;
   ssize_t (*listxattr)(struct dentry *, char *, size_t ) ;
   int (*fiemap)(struct inode *, struct fiemap_extent_info *, u64 , u64 ) ;
   int (*update_time)(struct inode *, struct timespec64 *, int ) ;
   int (*atomic_open)(struct inode *, struct dentry *, struct file *, unsigned int , umode_t ) ;
   int (*tmpfile)(struct inode *, struct dentry *, umode_t ) ;
   int (*set_acl)(struct inode *, struct posix_acl *, int ) ;
} __attribute__((__aligned__(64)));
#line 1942  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct super_operations {
   struct inode *(*alloc_inode)(struct super_block *) ;
   void (*destroy_inode)(struct inode *) ;
   void (*free_inode)(struct inode *) ;
   void (*dirty_inode)(struct inode *, int ) ;
   int (*write_inode)(struct inode *, struct writeback_control *) ;
   int (*drop_inode)(struct inode *) ;
   void (*evict_inode)(struct inode *) ;
   void (*put_super)(struct super_block *) ;
   int (*sync_fs)(struct super_block *, int ) ;
   int (*freeze_super)(struct super_block *) ;
   int (*freeze_fs)(struct super_block *) ;
   int (*thaw_super)(struct super_block *) ;
   int (*unfreeze_fs)(struct super_block *) ;
   int (*statfs)(struct dentry *, struct kstatfs *) ;
   int (*remount_fs)(struct super_block *, int *, char *) ;
   void (*umount_begin)(struct super_block *) ;
   int (*show_options)(struct seq_file *, struct dentry *) ;
   int (*show_devname)(struct seq_file *, struct dentry *) ;
   int (*show_path)(struct seq_file *, struct dentry *) ;
   int (*show_stats)(struct seq_file *, struct dentry *) ;
   ssize_t (*quota_read)(struct super_block *, int , char *, size_t , loff_t ) ;
   ssize_t (*quota_write)(struct super_block *, int , char *, size_t , loff_t ) ;
   struct dquot **(*get_dquots)(struct inode *) ;
   int (*bdev_try_to_free_page)(struct super_block *, struct page *, gfp_t ) ;
   long (*nr_cached_objects)(struct super_block *, struct shrink_control *) ;
   long (*free_cached_objects)(struct super_block *, struct shrink_control *) ;
};
#line 2217  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct file_system_type {
   char *name ;
   int fs_flags ;
   int (*init_fs_context)(struct fs_context *) ;
   struct fs_parameter_description *parameters ;
   struct dentry *(*mount)(struct file_system_type *, int , char *, void *) ;
   void (*kill_sb)(struct super_block *) ;
   struct module *owner ;
   struct file_system_type *next ;
   struct hlist_head fs_supers ;
   struct lock_class_key s_lock_key ;
   struct lock_class_key s_umount_key ;
   struct lock_class_key s_vfs_rename_key ;
   struct lock_class_key s_writers_key[3U] ;
   struct lock_class_key i_lock_key ;
   struct lock_class_key i_mutex_key ;
   struct lock_class_key i_mutex_dir_key ;
};
#line 3599 
struct sock;
#line 1565  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm.h"
struct kvec;
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bvec.h"
struct bio_vec {
   struct page *bv_page ;
   unsigned int bv_len ;
   unsigned int bv_offset ;
};
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bvec.h"
struct bvec_iter {
   sector_t bi_sector ;
   unsigned int bi_size ;
   unsigned int bi_idx ;
   unsigned int bi_bvec_done ;
};
#line 686  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/slab.h"
struct scatterlist;
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/uio.h"
struct iovec {
   void *iov_base ;
   __kernel_size_t iov_len ;
};
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uio.h"
struct kvec {
   void *iov_base ;
   size_t iov_len ;
};
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uio.h"
union __anonunion_438 {
   struct iovec *iov ;
   struct kvec *kvec ;
   struct bio_vec *bvec ;
   struct pipe_inode_info *pipe ;
};
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uio.h"
struct __anonstruct_440 {
   unsigned int head ;
   unsigned int start_head ;
};
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uio.h"
union __anonunion_439 {
   unsigned long nr_segs ;
   struct __anonstruct_440 __anonCompField___anonunion_439_68 ;
};
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uio.h"
struct iov_iter {
   unsigned int type ;
   size_t iov_offset ;
   size_t count ;
   union __anonunion_438 __anonCompField_iov_iter_67 ;
   union __anonunion_439 __anonCompField_iov_iter_69 ;
};
#line 285  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uio.h"
typedef unsigned short __kernel_sa_family_t;
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/socket.h"
struct socket;
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/socket.h"
typedef __kernel_sa_family_t sa_family_t;
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/socket.h"
struct sockaddr {
   sa_family_t sa_family ;
   char sa_data[14U] ;
};
#line 49  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/socket.h"
struct msghdr {
   void *msg_name ;
   int msg_namelen ;
   struct iov_iter msg_iter ;
   void *msg_control ;
   __kernel_size_t msg_controllen ;
   unsigned int msg_flags ;
   struct kiocb *msg_iocb ;
};
#line 422 
struct ns_common;
#line 201  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/random.h"
enum ldv_8871 {
    SS_FREE = 0,
    SS_UNCONNECTED = 1,
    SS_CONNECTING = 2,
    SS_CONNECTED = 3,
    SS_DISCONNECTING = 4
};
#line 209  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/random.h"
typedef enum ldv_8871 socket_state;
#line 94  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/net.h"
struct socket_wq {
   wait_queue_head_t wait ;
   struct fasync_struct *fasync_list ;
   unsigned long flags ;
   struct callback_head rcu ;
} __attribute__((__aligned__(64)));
#line 112 
struct proto_ops;
#line 112  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/net.h"
struct socket {
   socket_state state ;
   short type ;
   unsigned long flags ;
   struct file *file ;
   struct sock *sk ;
   struct proto_ops *ops ;
   struct socket_wq wq ;
};
#line 125 
struct sk_buff;
#line 135  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/net.h"
struct proto_ops {
   int family ;
   struct module *owner ;
   int (*release)(struct socket *) ;
   int (*bind)(struct socket *, struct sockaddr *, int ) ;
   int (*connect)(struct socket *, struct sockaddr *, int , int ) ;
   int (*socketpair)(struct socket *, struct socket *) ;
   int (*accept)(struct socket *, struct socket *, int , bool ) ;
   int (*getname)(struct socket *, struct sockaddr *, int ) ;
   __poll_t (*poll)(struct file *, struct socket *, struct poll_table_struct *) ;
   int (*ioctl)(struct socket *, unsigned int , unsigned long ) ;
   int (*compat_ioctl)(struct socket *, unsigned int , unsigned long ) ;
   int (*gettstamp)(struct socket *, void *, bool , bool ) ;
   int (*listen)(struct socket *, int ) ;
   int (*shutdown)(struct socket *, int ) ;
   int (*setsockopt)(struct socket *, int , int , char *, unsigned int ) ;
   int (*getsockopt)(struct socket *, int , int , char *, int *) ;
   int (*compat_setsockopt)(struct socket *, int , int , char *, unsigned int ) ;
   int (*compat_getsockopt)(struct socket *, int , int , char *, int *) ;
   int (*sendmsg)(struct socket *, struct msghdr *, size_t ) ;
   int (*recvmsg)(struct socket *, struct msghdr *, size_t , int ) ;
   int (*mmap)(struct file *, struct socket *, struct vm_area_struct *) ;
   ssize_t (*sendpage)(struct socket *, struct page *, int , size_t , int ) ;
   ssize_t (*splice_read)(struct socket *, loff_t *, struct pipe_inode_info *, size_t , unsigned int ) ;
   int (*set_peek_off)(struct sock *, int ) ;
   int (*peek_len)(struct socket *) ;
   int (*read_sock)(struct sock *, read_descriptor_t *, int (*)(read_descriptor_t *, struct sk_buff *, unsigned int , size_t )) ;
   int (*sendpage_locked)(struct sock *, struct page *, int , size_t , int ) ;
   int (*sendmsg_locked)(struct sock *, struct msghdr *, size_t ) ;
   int (*set_rcvlowat)(struct sock *, int ) ;
};
#line 162  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/checksum_64.h"
struct in6_addr;
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/idr.h"
struct idr {
   struct xarray idr_rt ;
   unsigned int idr_base ;
   unsigned int idr_next ;
};
#line 323 
struct kernfs_open_node;
#line 324 
struct kernfs_iattrs;
#line 84  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_root;
#line 84  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_elem_dir {
   unsigned long subdirs ;
   struct rb_root children ;
   struct kernfs_root *root ;
};
#line 96 
struct kernfs_node;
#line 96  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_elem_symlink {
   struct kernfs_node *target_kn ;
};
#line 100 
struct kernfs_ops;
#line 100  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_elem_attr {
   struct kernfs_ops *ops ;
   struct kernfs_open_node *open ;
   loff_t size ;
   struct kernfs_node *notify_next ;
};
#line 116  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
union __anonunion_463 {
   struct kernfs_elem_dir dir ;
   struct kernfs_elem_symlink symlink ;
   struct kernfs_elem_attr attr ;
};
#line 116  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_node {
   atomic_t count ;
   atomic_t active ;
   struct lockdep_map dep_map ;
   struct kernfs_node *parent ;
   char *name ;
   struct rb_node rb ;
   void *ns ;
   unsigned int hash ;
   union __anonunion_463 __anonCompField_kernfs_node_72 ;
   void *priv ;
   u64 id ;
   unsigned short flags ;
   umode_t mode ;
   struct kernfs_iattrs *iattr ;
};
#line 161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_syscall_ops {
   int (*show_options)(struct seq_file *, struct kernfs_root *) ;
   int (*mkdir)(struct kernfs_node *, char *, umode_t ) ;
   int (*rmdir)(struct kernfs_node *) ;
   int (*rename)(struct kernfs_node *, struct kernfs_node *, char *) ;
   int (*show_path)(struct seq_file *, struct kernfs_node *, struct kernfs_root *) ;
};
#line 173  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_root {
   struct kernfs_node *kn ;
   unsigned int flags ;
   struct idr ino_idr ;
   u32 last_id_lowbits ;
   u32 id_highbits ;
   struct kernfs_syscall_ops *syscall_ops ;
   struct list_head supers ;
   wait_queue_head_t deactivate_waitq ;
};
#line 190  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_open_file {
   struct kernfs_node *kn ;
   struct file *file ;
   struct seq_file *seq_file ;
   void *priv ;
   struct mutex mutex ;
   struct mutex prealloc_mutex ;
   int event ;
   struct list_head list ;
   char *prealloc_buf ;
   size_t atomic_write_len ;
   bool mmapped : 1 ;
   bool released : 1 ;
   struct vm_operations_struct *vm_ops ;
};
#line 210  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_ops {
   int (*open)(struct kernfs_open_file *) ;
   void (*release)(struct kernfs_open_file *) ;
   int (*seq_show)(struct seq_file *, void *) ;
   void *(*seq_start)(struct seq_file *, loff_t *) ;
   void *(*seq_next)(struct seq_file *, void *, loff_t *) ;
   void (*seq_stop)(struct seq_file *, void *) ;
   ssize_t (*read)(struct kernfs_open_file *, char *, size_t , loff_t ) ;
   size_t atomic_write_len ;
   bool prealloc ;
   ssize_t (*write)(struct kernfs_open_file *, char *, size_t , loff_t ) ;
   __poll_t (*poll)(struct kernfs_open_file *, struct poll_table_struct *) ;
   int (*mmap)(struct kernfs_open_file *, struct vm_area_struct *) ;
   struct lock_class_key lockdep_key ;
};
#line 595 
enum kobj_ns_type {
    KOBJ_NS_TYPE_NONE = 0,
    KOBJ_NS_TYPE_NET = 1,
    KOBJ_NS_TYPES = 2
};
#line 39  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject_ns.h"
struct kobj_ns_type_operations {
   enum kobj_ns_type type ;
   bool (*current_may_mount)(void) ;
   void *(*grab_current_ns)(void) ;
   void *(*netlink_ns)(struct sock *) ;
   void *(*initial_ns)(void) ;
   void (*drop_ns)(void *) ;
};
#line 58 
struct bin_attribute;
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysfs.h"
struct attribute {
   char *name ;
   umode_t mode ;
   bool ignore_lockdep : 1 ;
   struct lock_class_key *key ;
   struct lock_class_key skey ;
};
#line 84  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysfs.h"
struct attribute_group {
   char *name ;
   umode_t (*is_visible)(struct kobject *, struct attribute *, int ) ;
   umode_t (*is_bin_visible)(struct kobject *, struct bin_attribute *, int ) ;
   struct attribute **attrs ;
   struct bin_attribute **bin_attrs ;
};
#line 161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysfs.h"
struct bin_attribute {
   struct attribute attr ;
   size_t size ;
   void *private ;
   ssize_t (*read)(struct file *, struct kobject *, struct bin_attribute *, char *, loff_t , size_t ) ;
   ssize_t (*write)(struct file *, struct kobject *, struct bin_attribute *, char *, loff_t , size_t ) ;
   int (*mmap)(struct file *, struct kobject *, struct bin_attribute *, struct vm_area_struct *) ;
};
#line 223  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysfs.h"
struct sysfs_ops {
   ssize_t (*show)(struct kobject *, struct attribute *, char *) ;
   ssize_t (*store)(struct kobject *, struct attribute *, char *, size_t ) ;
};
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kref.h"
struct kref {
   refcount_t refcount ;
};
#line 65  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject.h"
struct kset;
#line 65 
struct kobj_type;
#line 65  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject.h"
struct kobject {
   char *name ;
   struct list_head entry ;
   struct kobject *parent ;
   struct kset *kset ;
   struct kobj_type *ktype ;
   struct kernfs_node *sd ;
   struct kref kref ;
   struct delayed_work release ;
   unsigned int state_initialized : 1 ;
   unsigned int state_in_sysfs : 1 ;
   unsigned int state_add_uevent_sent : 1 ;
   unsigned int state_remove_uevent_sent : 1 ;
   unsigned int uevent_suppress : 1 ;
};
#line 139  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject.h"
struct kobj_type {
   void (*release)(struct kobject *) ;
   struct sysfs_ops *sysfs_ops ;
   struct attribute **default_attrs ;
   struct attribute_group **default_groups ;
   struct kobj_ns_type_operations *(*child_ns_type)(struct kobject *) ;
   void *(*namespace)(struct kobject *) ;
   void (*get_ownership)(struct kobject *, kuid_t *, kgid_t *) ;
};
#line 149  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject.h"
struct kobj_uevent_env {
   char *argv[3U] ;
   char *envp[32U] ;
   int envp_idx ;
   char buf[2048U] ;
   int buflen ;
};
#line 157  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject.h"
struct kset_uevent_ops {
   int (*filter)(struct kset *, struct kobject *) ;
   char *(*name)(struct kset *, struct kobject *) ;
   int (*uevent)(struct kset *, struct kobject *, struct kobj_uevent_env *) ;
};
#line 193  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject.h"
struct kset {
   struct list_head list ;
   spinlock_t list_lock ;
   struct kobject kobj ;
   struct kset_uevent_ops *uevent_ops ;
} __attribute__((__designated_init__));
#line 50  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm.h"
struct pm_message {
   int event ;
};
#line 53  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm.h"
typedef struct pm_message pm_message_t;
#line 278  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm.h"
struct dev_pm_ops {
   int (*prepare)(struct device *) ;
   void (*complete)(struct device *) ;
   int (*suspend)(struct device *) ;
   int (*resume)(struct device *) ;
   int (*freeze)(struct device *) ;
   int (*thaw)(struct device *) ;
   int (*poweroff)(struct device *) ;
   int (*restore)(struct device *) ;
   int (*suspend_late)(struct device *) ;
   int (*resume_early)(struct device *) ;
   int (*freeze_late)(struct device *) ;
   int (*thaw_early)(struct device *) ;
   int (*poweroff_late)(struct device *) ;
   int (*restore_early)(struct device *) ;
   int (*suspend_noirq)(struct device *) ;
   int (*resume_noirq)(struct device *) ;
   int (*freeze_noirq)(struct device *) ;
   int (*thaw_noirq)(struct device *) ;
   int (*poweroff_noirq)(struct device *) ;
   int (*restore_noirq)(struct device *) ;
   int (*runtime_suspend)(struct device *) ;
   int (*runtime_resume)(struct device *) ;
   int (*runtime_idle)(struct device *) ;
};
#line 303 
enum rpm_status {
    RPM_ACTIVE = 0,
    RPM_RESUMING = 1,
    RPM_SUSPENDED = 2,
    RPM_SUSPENDING = 3
};
#line 310 
enum rpm_request {
    RPM_REQ_NONE = 0,
    RPM_REQ_IDLE = 1,
    RPM_REQ_SUSPEND = 2,
    RPM_REQ_AUTOSUSPEND = 3,
    RPM_REQ_RESUME = 4
};
#line 318 
struct wakeup_source;
#line 319 
struct wake_irq;
#line 320 
struct pm_domain_data;
#line 530  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm.h"
struct pm_subsys_data {
   spinlock_t lock ;
   unsigned int refcount ;
   struct list_head clock_list ;
   struct pm_domain_data *domain_data ;
};
#line 573 
struct dev_pm_qos;
#line 573  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm.h"
struct dev_pm_info {
   pm_message_t power_state ;
   unsigned int can_wakeup : 1 ;
   unsigned int async_suspend : 1 ;
   bool in_dpm_list : 1 ;
   bool is_prepared : 1 ;
   bool is_suspended : 1 ;
   bool is_noirq_suspended : 1 ;
   bool is_late_suspended : 1 ;
   bool no_pm : 1 ;
   bool early_init : 1 ;
   bool direct_complete : 1 ;
   u32 driver_flags ;
   spinlock_t lock ;
   struct list_head entry ;
   struct completion completion ;
   struct wakeup_source *wakeup ;
   bool wakeup_path : 1 ;
   bool syscore : 1 ;
   bool no_pm_callbacks : 1 ;
   unsigned int must_resume : 1 ;
   unsigned int may_skip_resume : 1 ;
   struct hrtimer suspend_timer ;
   unsigned long timer_expires ;
   struct work_struct work ;
   wait_queue_head_t wait_queue ;
   struct wake_irq *wakeirq ;
   atomic_t usage_count ;
   atomic_t child_count ;
   unsigned int disable_depth : 3 ;
   unsigned int idle_notification : 1 ;
   unsigned int request_pending : 1 ;
   unsigned int deferred_resume : 1 ;
   unsigned int runtime_auto : 1 ;
   bool ignore_children : 1 ;
   unsigned int no_callbacks : 1 ;
   unsigned int irq_safe : 1 ;
   unsigned int use_autosuspend : 1 ;
   unsigned int timer_autosuspends : 1 ;
   unsigned int memalloc_noio : 1 ;
   unsigned int links_count ;
   enum rpm_request request ;
   enum rpm_status runtime_status ;
   int runtime_error ;
   int autosuspend_delay ;
   u64 last_busy ;
   u64 active_time ;
   u64 suspended_time ;
   u64 accounting_timestamp ;
   struct pm_subsys_data *subsys_data ;
   void (*set_latency_tolerance)(struct device *, s32 ) ;
   struct dev_pm_qos *qos ;
};
#line 650  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm.h"
struct dev_pm_domain {
   struct dev_pm_ops ops ;
   int (*start)(struct device *) ;
   void (*detach)(struct device *, bool ) ;
   int (*activate)(struct device *) ;
   void (*sync)(struct device *) ;
   void (*dismiss)(struct device *) ;
};
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ratelimit.h"
struct ratelimit_state {
   raw_spinlock_t lock ;
   int interval ;
   int burst ;
   int printed ;
   int missed ;
   unsigned long begin ;
   unsigned long flags ;
};
#line 5  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/device.h"
struct dev_archdata {
   void *iommu ;
};
#line 12 
struct dma_map_ops;
#line 23 
struct device_driver;
#line 24 
struct driver_private;
#line 25 
struct class;
#line 26 
struct subsys_private;
#line 27 
struct bus_type;
#line 28 
struct iommu_ops;
#line 29 
struct iommu_group;
#line 30 
struct iommu_fwspec;
#line 31 
struct dev_pin_info;
#line 32 
struct iommu_param;
#line 122  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct bus_type {
   char *name ;
   char *dev_name ;
   struct device *dev_root ;
   struct attribute_group **bus_groups ;
   struct attribute_group **dev_groups ;
   struct attribute_group **drv_groups ;
   int (*match)(struct device *, struct device_driver *) ;
   int (*uevent)(struct device *, struct kobj_uevent_env *) ;
   int (*probe)(struct device *) ;
   void (*sync_state)(struct device *) ;
   int (*remove)(struct device *) ;
   void (*shutdown)(struct device *) ;
   int (*online)(struct device *) ;
   int (*offline)(struct device *) ;
   int (*suspend)(struct device *, pm_message_t ) ;
   int (*resume)(struct device *) ;
   int (*num_vf)(struct device *) ;
   int (*dma_configure)(struct device *) ;
   struct dev_pm_ops *pm ;
   struct iommu_ops *iommu_ops ;
   struct subsys_private *p ;
   struct lock_class_key lock_key ;
   bool need_parent_lock ;
};
#line 164 
struct device_type;
#line 309 
enum probe_type {
    PROBE_DEFAULT_STRATEGY = 0,
    PROBE_PREFER_ASYNCHRONOUS = 1,
    PROBE_FORCE_SYNCHRONOUS = 2
};
#line 383  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct device_driver {
   char *name ;
   struct bus_type *bus ;
   struct module *owner ;
   char *mod_name ;
   bool suppress_bind_attrs ;
   enum probe_type probe_type ;
   struct of_device_id *of_match_table ;
   struct acpi_device_id *acpi_match_table ;
   int (*probe)(struct device *) ;
   void (*sync_state)(struct device *) ;
   int (*remove)(struct device *) ;
   void (*shutdown)(struct device *) ;
   int (*suspend)(struct device *, pm_message_t ) ;
   int (*resume)(struct device *) ;
   struct attribute_group **groups ;
   struct attribute_group **dev_groups ;
   struct dev_pm_ops *pm ;
   void (*coredump)(struct device *) ;
   struct driver_private *p ;
};
#line 589  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct class {
   char *name ;
   struct module *owner ;
   struct attribute_group **class_groups ;
   struct attribute_group **dev_groups ;
   struct kobject *dev_kobj ;
   int (*dev_uevent)(struct device *, struct kobj_uevent_env *) ;
   char *(*devnode)(struct device *, umode_t *) ;
   void (*class_release)(struct class *) ;
   void (*dev_release)(struct device *) ;
   int (*shutdown_pre)(struct device *) ;
   struct kobj_ns_type_operations *ns_type ;
   void *(*namespace)(struct device *) ;
   void (*get_ownership)(struct device *, kuid_t *, kgid_t *) ;
   struct dev_pm_ops *pm ;
   struct subsys_private *p ;
};
#line 809  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct device_type {
   char *name ;
   struct attribute_group **groups ;
   int (*uevent)(struct device *, struct kobj_uevent_env *) ;
   char *(*devnode)(struct device *, umode_t *, kuid_t *, kgid_t *) ;
   void (*release)(struct device *) ;
   struct dev_pm_ops *pm ;
};
#line 1008  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct device_dma_parameters {
   unsigned int max_segment_size ;
   unsigned long segment_boundary_mask ;
};
#line 1139 
enum dl_dev_state {
    DL_DEV_NO_DRIVER = 0,
    DL_DEV_PROBING = 1,
    DL_DEV_DRIVER_BOUND = 2,
    DL_DEV_UNBINDING = 3
};
#line 1164  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct dev_links_info {
   struct list_head suppliers ;
   struct list_head consumers ;
   struct list_head needs_suppliers ;
   struct list_head defer_sync ;
   bool need_for_probe ;
   enum dl_dev_state status ;
};
#line 1259 
struct dma_coherent_mem;
#line 1259 
struct cma;
#line 1259  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct device {
   struct kobject kobj ;
   struct device *parent ;
   struct device_private *p ;
   char *init_name ;
   struct device_type *type ;
   struct bus_type *bus ;
   struct device_driver *driver ;
   void *platform_data ;
   void *driver_data ;
   struct mutex lockdep_mutex ;
   struct mutex mutex ;
   struct dev_links_info links ;
   struct dev_pm_info power ;
   struct dev_pm_domain *pm_domain ;
   struct irq_domain *msi_domain ;
   struct dev_pin_info *pins ;
   struct list_head msi_list ;
   struct dma_map_ops *dma_ops ;
   u64 *dma_mask ;
   u64 coherent_dma_mask ;
   u64 bus_dma_limit ;
   unsigned long dma_pfn_offset ;
   struct device_dma_parameters *dma_parms ;
   struct list_head dma_pools ;
   struct dma_coherent_mem *dma_mem ;
   struct cma *cma_area ;
   struct dev_archdata archdata ;
   struct device_node *of_node ;
   struct fwnode_handle *fwnode ;
   int numa_node ;
   dev_t devt ;
   u32 id ;
   spinlock_t devres_lock ;
   struct list_head devres_head ;
   struct class *class ;
   struct attribute_group **groups ;
   void (*release)(struct device *) ;
   struct iommu_group *iommu_group ;
   struct iommu_fwspec *iommu_fwspec ;
   struct iommu_param *iommu_param ;
   bool offline_disabled : 1 ;
   bool offline : 1 ;
   bool of_node_reused : 1 ;
   bool state_synced : 1 ;
};
#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm_wakeup.h"
struct wakeup_source {
   char *name ;
   int id ;
   struct list_head entry ;
   spinlock_t lock ;
   struct wake_irq *wakeirq ;
   struct timer_list timer ;
   unsigned long timer_expires ;
   ktime_t total_time ;
   ktime_t max_time ;
   ktime_t last_time ;
   ktime_t start_prevent_time ;
   ktime_t prevent_sleep_time ;
   unsigned long event_count ;
   unsigned long active_count ;
   unsigned long relax_count ;
   unsigned long expire_count ;
   unsigned long wakeup_count ;
   struct device *dev ;
   bool active : 1 ;
   bool autosleep_enabled : 1 ;
};
#line 71  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-debug.h"
enum dma_data_direction {
    DMA_BIDIRECTIONAL = 0,
    DMA_TO_DEVICE = 1,
    DMA_FROM_DEVICE = 2,
    DMA_NONE = 3
};
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/scatterlist.h"
struct scatterlist {
   unsigned long page_link ;
   unsigned int offset ;
   unsigned int length ;
   dma_addr_t dma_address ;
   unsigned int dma_length ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/scatterlist.h"
struct sg_table {
   struct scatterlist *sgl ;
   unsigned int nents ;
   unsigned int orig_nents ;
};
#line 76  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
struct dma_map_ops {
   void *(*alloc)(struct device *, size_t , dma_addr_t *, gfp_t , unsigned long ) ;
   void (*free)(struct device *, size_t , void *, dma_addr_t , unsigned long ) ;
   int (*mmap)(struct device *, struct vm_area_struct *, void *, dma_addr_t , size_t , unsigned long ) ;
   int (*get_sgtable)(struct device *, struct sg_table *, void *, dma_addr_t , size_t , unsigned long ) ;
   dma_addr_t (*map_page)(struct device *, struct page *, unsigned long , size_t , enum dma_data_direction , unsigned long ) ;
   void (*unmap_page)(struct device *, dma_addr_t , size_t , enum dma_data_direction , unsigned long ) ;
   int (*map_sg)(struct device *, struct scatterlist *, int , enum dma_data_direction , unsigned long ) ;
   void (*unmap_sg)(struct device *, struct scatterlist *, int , enum dma_data_direction , unsigned long ) ;
   dma_addr_t (*map_resource)(struct device *, phys_addr_t , size_t , enum dma_data_direction , unsigned long ) ;
   void (*unmap_resource)(struct device *, dma_addr_t , size_t , enum dma_data_direction , unsigned long ) ;
   void (*sync_single_for_cpu)(struct device *, dma_addr_t , size_t , enum dma_data_direction ) ;
   void (*sync_single_for_device)(struct device *, dma_addr_t , size_t , enum dma_data_direction ) ;
   void (*sync_sg_for_cpu)(struct device *, struct scatterlist *, int , enum dma_data_direction ) ;
   void (*sync_sg_for_device)(struct device *, struct scatterlist *, int , enum dma_data_direction ) ;
   void (*cache_sync)(struct device *, void *, size_t , enum dma_data_direction ) ;
   int (*dma_supported)(struct device *, u64 ) ;
   u64 (*get_required_mask)(struct device *) ;
   size_t (*max_mapping_size)(struct device *) ;
   unsigned long (*get_merge_boundary)(struct device *) ;
};
#line 803  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
typedef u64 netdev_features_t;
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/in6.h"
union __anonunion_in6_u_466 {
   __u8 u6_addr8[16U] ;
   __be16 u6_addr16[8U] ;
   __be32 u6_addr32[4U] ;
};
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/in6.h"
struct in6_addr {
   union __anonunion_in6_u_466 in6_u ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/in6.h"
struct __anonstruct_siphash_key_t_467 {
   u64 key[2U] ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/in6.h"
typedef struct __anonstruct_siphash_key_t_467 siphash_key_t;
#line 163  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if_ether.h"
struct ethhdr {
   unsigned char h_dest[6U] ;
   unsigned char h_source[6U] ;
   __be16 h_proto ;
} __attribute__((__packed__));
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pipe_fs_i.h"
struct pipe_buf_operations;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pipe_fs_i.h"
struct pipe_buffer {
   struct page *page ;
   unsigned int offset ;
   unsigned int len ;
   struct pipe_buf_operations *ops ;
   unsigned int flags ;
   unsigned long private ;
};
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pipe_fs_i.h"
struct pipe_inode_info {
   struct mutex mutex ;
   wait_queue_head_t wait ;
   unsigned int head ;
   unsigned int tail ;
   unsigned int max_usage ;
   unsigned int ring_size ;
   unsigned int readers ;
   unsigned int writers ;
   unsigned int files ;
   unsigned int r_counter ;
   unsigned int w_counter ;
   struct page *tmp_page ;
   struct fasync_struct *fasync_readers ;
   struct fasync_struct *fasync_writers ;
   struct pipe_buffer *bufs ;
   struct user_struct *user ;
};
#line 77  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pipe_fs_i.h"
struct pipe_buf_operations {
   int (*confirm)(struct pipe_inode_info *, struct pipe_buffer *) ;
   void (*release)(struct pipe_inode_info *, struct pipe_buffer *) ;
   int (*steal)(struct pipe_inode_info *, struct pipe_buffer *) ;
   bool (*get)(struct pipe_inode_info *, struct pipe_buffer *) ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct flowi_tunnel {
   __be64 tun_id ;
};
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct flowi_common {
   int flowic_oif ;
   int flowic_iif ;
   __u32 flowic_mark ;
   __u8 flowic_tos ;
   __u8 flowic_scope ;
   __u8 flowic_proto ;
   __u8 flowic_flags ;
   __u32 flowic_secid ;
   kuid_t flowic_uid ;
   struct flowi_tunnel flowic_tun_key ;
   __u32 flowic_multipath_hash ;
};
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct __anonstruct_ports_478 {
   __be16 dport ;
   __be16 sport ;
};
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct __anonstruct_icmpt_479 {
   __u8 type ;
   __u8 code ;
};
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct __anonstruct_dnports_480 {
   __le16 dport ;
   __le16 sport ;
};
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct __anonstruct_mht_481 {
   __u8 type ;
};
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
union flowi_uli {
   struct __anonstruct_ports_478 ports ;
   struct __anonstruct_icmpt_479 icmpt ;
   struct __anonstruct_dnports_480 dnports ;
   __be32 spi ;
   __be32 gre_key ;
   struct __anonstruct_mht_481 mht ;
};
#line 70  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct flowi4 {
   struct flowi_common __fl_common ;
   __be32 saddr ;
   __be32 daddr ;
   union flowi_uli uli ;
} __attribute__((__aligned__(8)));
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct flowi6 {
   struct flowi_common __fl_common ;
   struct in6_addr daddr ;
   struct in6_addr saddr ;
   __be32 flowlabel ;
   union flowi_uli uli ;
   __u32 mp_hash ;
} __attribute__((__aligned__(8)));
#line 158  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct flowidn {
   struct flowi_common __fl_common ;
   __le16 daddr ;
   __le16 saddr ;
   union flowi_uli uli ;
} __attribute__((__aligned__(8)));
#line 173  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
union __anonunion_u_482 {
   struct flowi_common __fl_common ;
   struct flowi4 ip4 ;
   struct flowi6 ip6 ;
   struct flowidn dn ;
};
#line 173  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct flowi {
   union __anonunion_u_482 u ;
} __attribute__((__aligned__(8)));
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netfilter/nf_conntrack_common.h"
struct ip_conntrack_stat {
   unsigned int found ;
   unsigned int invalid ;
   unsigned int ignore ;
   unsigned int insert ;
   unsigned int insert_failed ;
   unsigned int drop ;
   unsigned int early_drop ;
   unsigned int error ;
   unsigned int expect_new ;
   unsigned int expect_create ;
   unsigned int expect_delete ;
   unsigned int search_restart ;
};
#line 42 
struct bpf_prog;
#line 43 
union bpf_attr;
#line 44 
struct skb_ext;
#line 289  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
struct sk_buff_head {
   struct sk_buff *next ;
   struct sk_buff *prev ;
   __u32 qlen ;
   spinlock_t lock ;
};
#line 562  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
typedef unsigned int sk_buff_data_t;
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_489 {
   struct net_device *dev ;
   unsigned long dev_scratch ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
struct __anonstruct_488 {
   struct sk_buff *next ;
   struct sk_buff *prev ;
   union __anonunion_489 __anonCompField___anonstruct_488_85 ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_487 {
   struct __anonstruct_488 __anonCompField___anonunion_487_86 ;
   struct rb_node rbnode ;
   struct list_head list ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_490 {
   struct sock *sk ;
   int ip_defrag_offset ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_491 {
   ktime_t tstamp ;
   u64 skb_mstamp_ns ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
struct __anonstruct_493 {
   unsigned long _skb_refdst ;
   void (*destructor)(struct sk_buff *) ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_492 {
   struct __anonstruct_493 __anonCompField___anonunion_492_90 ;
   struct list_head tcp_tsorted_anchor ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
struct __anonstruct_495 {
   __u16 csum_start ;
   __u16 csum_offset ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_494 {
   __wsum csum ;
   struct __anonstruct_495 __anonCompField___anonunion_494_92 ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_496 {
   unsigned int napi_id ;
   unsigned int sender_cpu ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_497 {
   __u32 mark ;
   __u32 reserved_tailroom ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_498 {
   __be16 inner_protocol ;
   __u8 inner_ipproto ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
struct sk_buff {
   union __anonunion_487 __anonCompField_sk_buff_87 ;
   union __anonunion_490 __anonCompField_sk_buff_88 ;
   union __anonunion_491 __anonCompField_sk_buff_89 ;
   char cb[48U] ;
   union __anonunion_492 __anonCompField_sk_buff_91 ;
   unsigned long _nfct ;
   unsigned int len ;
   unsigned int data_len ;
   __u16 mac_len ;
   __u16 hdr_len ;
   __u16 queue_mapping ;
   __u8 __cloned_offset[0U] ;
   __u8 cloned : 1 ;
   __u8 nohdr : 1 ;
   __u8 fclone : 2 ;
   __u8 peeked : 1 ;
   __u8 head_frag : 1 ;
   __u8 pfmemalloc : 1 ;
   __u8 active_extensions ;
   __u32 headers_start[0U] ;
   __u8 __pkt_type_offset[0U] ;
   __u8 pkt_type : 3 ;
   __u8 ignore_df : 1 ;
   __u8 nf_trace : 1 ;
   __u8 ip_summed : 2 ;
   __u8 ooo_okay : 1 ;
   __u8 l4_hash : 1 ;
   __u8 sw_hash : 1 ;
   __u8 wifi_acked_valid : 1 ;
   __u8 wifi_acked : 1 ;
   __u8 no_fcs : 1 ;
   __u8 encapsulation : 1 ;
   __u8 encap_hdr_csum : 1 ;
   __u8 csum_valid : 1 ;
   __u8 __pkt_vlan_present_offset[0U] ;
   __u8 vlan_present : 1 ;
   __u8 csum_complete_sw : 1 ;
   __u8 csum_level : 2 ;
   __u8 csum_not_inet : 1 ;
   __u8 dst_pending_confirm : 1 ;
   __u8 ndisc_nodetype : 2 ;
   __u8 ipvs_property : 1 ;
   __u8 inner_protocol_type : 1 ;
   __u8 remcsum_offload : 1 ;
   __u8 offload_fwd_mark : 1 ;
   __u8 offload_l3_fwd_mark : 1 ;
   __u8 tc_skip_classify : 1 ;
   __u8 tc_at_ingress : 1 ;
   __u8 tc_redirected : 1 ;
   __u8 tc_from_ingress : 1 ;
   __u8 decrypted : 1 ;
   __u16 tc_index ;
   union __anonunion_494 __anonCompField_sk_buff_93 ;
   __u32 priority ;
   int skb_iif ;
   __u32 hash ;
   __be16 vlan_proto ;
   __u16 vlan_tci ;
   union __anonunion_496 __anonCompField_sk_buff_94 ;
   __u32 secmark ;
   union __anonunion_497 __anonCompField_sk_buff_95 ;
   union __anonunion_498 __anonCompField_sk_buff_96 ;
   __u16 inner_transport_header ;
   __u16 inner_network_header ;
   __u16 inner_mac_header ;
   __be16 protocol ;
   __u16 transport_header ;
   __u16 network_header ;
   __u16 mac_header ;
   __u32 headers_end[0U] ;
   sk_buff_data_t tail ;
   sk_buff_data_t end ;
   unsigned char *head ;
   unsigned char *data ;
   unsigned int truesize ;
   refcount_t users ;
   struct skb_ext *extensions ;
};
#line 920 
struct dst_entry;
#line 4108  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
struct skb_ext {
   refcount_t refcnt ;
   u8 offset[3U] ;
   u8 chunks ;
   char data[0U] ;
};
#line 41  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dynamic_queue_limits.h"
struct dql {
   unsigned int num_queued ;
   unsigned int adj_limit ;
   unsigned int last_obj_cnt ;
   unsigned int limit ;
   unsigned int num_completed ;
   unsigned int prev_ovlimit ;
   unsigned int prev_num_queued ;
   unsigned int prev_last_obj_cnt ;
   unsigned int lowest_slack ;
   unsigned long slack_start_time ;
   unsigned int max_limit ;
   unsigned int min_limit ;
   unsigned int slack_hold_time ;
};
#line 103  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dynamic_queue_limits.h"
struct __anonstruct_sync_serial_settings_528 {
   unsigned int clock_rate ;
   unsigned int clock_type ;
   unsigned short loopback ;
};
#line 103  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dynamic_queue_limits.h"
typedef struct __anonstruct_sync_serial_settings_528 sync_serial_settings;
#line 45  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_te1_settings_529 {
   unsigned int clock_rate ;
   unsigned int clock_type ;
   unsigned short loopback ;
   unsigned int slot_map ;
};
#line 45  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_te1_settings_529 te1_settings;
#line 52  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_raw_hdlc_proto_530 {
   unsigned short encoding ;
   unsigned short parity ;
};
#line 52  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_raw_hdlc_proto_530 raw_hdlc_proto;
#line 57  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_fr_proto_531 {
   unsigned int t391 ;
   unsigned int t392 ;
   unsigned int n391 ;
   unsigned int n392 ;
   unsigned int n393 ;
   unsigned short lmi ;
   unsigned short dce ;
};
#line 57  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_fr_proto_531 fr_proto;
#line 67  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_fr_proto_pvc_532 {
   unsigned int dlci ;
};
#line 67  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_fr_proto_pvc_532 fr_proto_pvc;
#line 71  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_fr_proto_pvc_info_533 {
   unsigned int dlci ;
   char master[16U] ;
};
#line 71  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_fr_proto_pvc_info_533 fr_proto_pvc_info;
#line 76  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_cisco_proto_534 {
   unsigned int interval ;
   unsigned int timeout ;
};
#line 76  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_cisco_proto_534 cisco_proto;
#line 195  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if.h"
struct ifmap {
   unsigned long mem_start ;
   unsigned long mem_end ;
   unsigned short base_addr ;
   unsigned char irq ;
   unsigned char dma ;
   unsigned char port ;
};
#line 206  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if.h"
union __anonunion_ifs_ifsu_535 {
   raw_hdlc_proto *raw_hdlc ;
   cisco_proto *cisco ;
   fr_proto *fr ;
   fr_proto_pvc *fr_pvc ;
   fr_proto_pvc_info *fr_pvc_info ;
   sync_serial_settings *sync ;
   te1_settings *te1 ;
};
#line 206  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if.h"
struct if_settings {
   unsigned int type ;
   unsigned int size ;
   union __anonunion_ifs_ifsu_535 ifs_ifsu ;
};
#line 232  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if.h"
union __anonunion_ifr_ifrn_536 {
   char ifrn_name[16U] ;
};
#line 232  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if.h"
union __anonunion_ifr_ifru_537 {
   struct sockaddr ifru_addr ;
   struct sockaddr ifru_dstaddr ;
   struct sockaddr ifru_broadaddr ;
   struct sockaddr ifru_netmask ;
   struct sockaddr ifru_hwaddr ;
   short ifru_flags ;
   int ifru_ivalue ;
   int ifru_mtu ;
   struct ifmap ifru_map ;
   char ifru_slave[16U] ;
   char ifru_newname[16U] ;
   void *ifru_data ;
   struct if_settings ifru_settings ;
};
#line 232  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if.h"
struct ifreq {
   union __anonunion_ifr_ifrn_536 ifr_ifrn ;
   union __anonunion_ifr_ifru_537 ifr_ifru ;
};
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/compat.h"
typedef s32 compat_long_t;
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/compat.h"
typedef u32 compat_uptr_t;
#line 367  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/compat.h"
struct compat_robust_list {
   compat_uptr_t next ;
};
#line 371  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/compat.h"
struct compat_robust_list_head {
   struct compat_robust_list list ;
   compat_long_t futex_offset ;
   compat_uptr_t list_op_pending ;
};
#line 177  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_drvinfo {
   __u32 cmd ;
   char driver[32U] ;
   char version[32U] ;
   char fw_version[32U] ;
   char bus_info[32U] ;
   char erom_version[32U] ;
   char reserved2[12U] ;
   __u32 n_priv_flags ;
   __u32 n_stats ;
   __u32 testinfo_len ;
   __u32 eedump_len ;
   __u32 regdump_len ;
};
#line 203  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_wolinfo {
   __u32 cmd ;
   __u32 supported ;
   __u32 wolopts ;
   __u8 sopass[6U] ;
};
#line 244  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_tunable {
   __u32 cmd ;
   __u32 id ;
   __u32 type_id ;
   __u32 len ;
   void *data[0U] ;
};
#line 310  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_regs {
   __u32 cmd ;
   __u32 version ;
   __u32 len ;
   __u8 data[0U] ;
};
#line 335  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_eeprom {
   __u32 cmd ;
   __u32 magic ;
   __u32 offset ;
   __u32 len ;
   __u8 data[0U] ;
};
#line 360  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_eee {
   __u32 cmd ;
   __u32 supported ;
   __u32 advertised ;
   __u32 lp_advertised ;
   __u32 eee_active ;
   __u32 eee_enabled ;
   __u32 tx_lpi_enabled ;
   __u32 tx_lpi_timer ;
   __u32 reserved[2U] ;
};
#line 382  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_modinfo {
   __u32 cmd ;
   __u32 type ;
   __u32 eeprom_len ;
   __u32 reserved[8U] ;
};
#line 462  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_coalesce {
   __u32 cmd ;
   __u32 rx_coalesce_usecs ;
   __u32 rx_max_coalesced_frames ;
   __u32 rx_coalesce_usecs_irq ;
   __u32 rx_max_coalesced_frames_irq ;
   __u32 tx_coalesce_usecs ;
   __u32 tx_max_coalesced_frames ;
   __u32 tx_coalesce_usecs_irq ;
   __u32 tx_max_coalesced_frames_irq ;
   __u32 stats_block_coalesce_usecs ;
   __u32 use_adaptive_rx_coalesce ;
   __u32 use_adaptive_tx_coalesce ;
   __u32 pkt_rate_low ;
   __u32 rx_coalesce_usecs_low ;
   __u32 rx_max_coalesced_frames_low ;
   __u32 tx_coalesce_usecs_low ;
   __u32 tx_max_coalesced_frames_low ;
   __u32 pkt_rate_high ;
   __u32 rx_coalesce_usecs_high ;
   __u32 rx_max_coalesced_frames_high ;
   __u32 tx_coalesce_usecs_high ;
   __u32 tx_max_coalesced_frames_high ;
   __u32 rate_sample_interval ;
};
#line 513  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_ringparam {
   __u32 cmd ;
   __u32 rx_max_pending ;
   __u32 rx_mini_max_pending ;
   __u32 rx_jumbo_max_pending ;
   __u32 tx_max_pending ;
   __u32 rx_pending ;
   __u32 rx_mini_pending ;
   __u32 rx_jumbo_pending ;
   __u32 tx_pending ;
};
#line 541  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_channels {
   __u32 cmd ;
   __u32 max_rx ;
   __u32 max_tx ;
   __u32 max_other ;
   __u32 max_combined ;
   __u32 rx_count ;
   __u32 tx_count ;
   __u32 other_count ;
   __u32 combined_count ;
};
#line 575  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_pauseparam {
   __u32 cmd ;
   __u32 autoneg ;
   __u32 rx_pause ;
   __u32 tx_pause ;
};
#line 683  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_test {
   __u32 cmd ;
   __u32 flags ;
   __u32 reserved ;
   __u32 len ;
   __u64 data[0U] ;
};
#line 702  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_stats {
   __u32 cmd ;
   __u32 n_stats ;
   __u64 data[0U] ;
};
#line 758  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_tcpip4_spec {
   __be32 ip4src ;
   __be32 ip4dst ;
   __be16 psrc ;
   __be16 pdst ;
   __u8 tos ;
};
#line 775  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_ah_espip4_spec {
   __be32 ip4src ;
   __be32 ip4dst ;
   __be32 spi ;
   __u8 tos ;
};
#line 793  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_usrip4_spec {
   __be32 ip4src ;
   __be32 ip4dst ;
   __be32 l4_4_bytes ;
   __u8 tos ;
   __u8 ip_ver ;
   __u8 proto ;
};
#line 812  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_tcpip6_spec {
   __be32 ip6src[4U] ;
   __be32 ip6dst[4U] ;
   __be16 psrc ;
   __be16 pdst ;
   __u8 tclass ;
};
#line 829  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_ah_espip6_spec {
   __be32 ip6src[4U] ;
   __be32 ip6dst[4U] ;
   __be32 spi ;
   __u8 tclass ;
};
#line 844  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_usrip6_spec {
   __be32 ip6src[4U] ;
   __be32 ip6dst[4U] ;
   __be32 l4_4_bytes ;
   __u8 tclass ;
   __u8 l4_proto ;
};
#line 852  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
union ethtool_flow_union {
   struct ethtool_tcpip4_spec tcp_ip4_spec ;
   struct ethtool_tcpip4_spec udp_ip4_spec ;
   struct ethtool_tcpip4_spec sctp_ip4_spec ;
   struct ethtool_ah_espip4_spec ah_ip4_spec ;
   struct ethtool_ah_espip4_spec esp_ip4_spec ;
   struct ethtool_usrip4_spec usr_ip4_spec ;
   struct ethtool_tcpip6_spec tcp_ip6_spec ;
   struct ethtool_tcpip6_spec udp_ip6_spec ;
   struct ethtool_tcpip6_spec sctp_ip6_spec ;
   struct ethtool_ah_espip6_spec ah_ip6_spec ;
   struct ethtool_ah_espip6_spec esp_ip6_spec ;
   struct ethtool_usrip6_spec usr_ip6_spec ;
   struct ethhdr ether_spec ;
   __u8 hdata[52U] ;
};
#line 880  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_flow_ext {
   __u8 padding[2U] ;
   unsigned char h_dest[6U] ;
   __be16 vlan_etype ;
   __be16 vlan_tci ;
   __be32 data[2U] ;
};
#line 905  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_rx_flow_spec {
   __u32 flow_type ;
   union ethtool_flow_union h_u ;
   struct ethtool_flow_ext h_ext ;
   union ethtool_flow_union m_u ;
   struct ethtool_flow_ext m_ext ;
   __u64 ring_cookie ;
   __u32 location ;
};
#line 1001  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
union __anonunion_556 {
   __u32 rule_cnt ;
   __u32 rss_context ;
};
#line 1001  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_rxnfc {
   __u32 cmd ;
   __u32 flow_type ;
   __u64 data ;
   struct ethtool_rx_flow_spec fs ;
   union __anonunion_556 __anonCompField_ethtool_rxnfc_99 ;
   __u32 rule_locs[0U] ;
};
#line 1130  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_flash {
   __u32 cmd ;
   __u32 region ;
   char data[128U] ;
};
#line 1150  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_dump {
   __u32 cmd ;
   __u32 version ;
   __u32 flag ;
   __u32 len ;
   __u8 data[0U] ;
};
#line 1230  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_ts_info {
   __u32 cmd ;
   __u32 so_timestamping ;
   __s32 phc_index ;
   __u32 tx_types ;
   __u32 tx_reserved[3U] ;
   __u32 rx_filters ;
   __u32 rx_reserved[3U] ;
};
#line 1302  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_fecparam {
   __u32 cmd ;
   __u32 active_fec ;
   __u32 fec ;
   __u32 reserved ;
};
#line 1876  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_link_settings {
   __u32 cmd ;
   __u32 speed ;
   __u8 duplex ;
   __u8 port ;
   __u8 phy_address ;
   __u8 autoneg ;
   __u8 mdio_support ;
   __u8 eth_tp_mdix ;
   __u8 eth_tp_mdix_ctrl ;
   __s8 link_mode_masks_nwords ;
   __u8 transceiver ;
   __u8 reserved1[3U] ;
   __u32 reserved[7U] ;
   __u32 link_mode_masks[0U] ;
};
#line 40  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ethtool.h"
enum ethtool_phys_id_state {
    ETHTOOL_ID_INACTIVE = 0,
    ETHTOOL_ID_ACTIVE = 1,
    ETHTOOL_ID_ON = 2,
    ETHTOOL_ID_OFF = 3
};
#line 108  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ethtool.h"
struct __anonstruct_link_modes_559 {
   unsigned long supported[2U] ;
   unsigned long advertising[2U] ;
   unsigned long lp_advertising[2U] ;
};
#line 108  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ethtool.h"
struct ethtool_link_ksettings {
   struct ethtool_link_settings base ;
   struct __anonstruct_link_modes_559 link_modes ;
};
#line 325  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ethtool.h"
struct ethtool_ops {
   void (*get_drvinfo)(struct net_device *, struct ethtool_drvinfo *) ;
   int (*get_regs_len)(struct net_device *) ;
   void (*get_regs)(struct net_device *, struct ethtool_regs *, void *) ;
   void (*get_wol)(struct net_device *, struct ethtool_wolinfo *) ;
   int (*set_wol)(struct net_device *, struct ethtool_wolinfo *) ;
   u32 (*get_msglevel)(struct net_device *) ;
   void (*set_msglevel)(struct net_device *, u32 ) ;
   int (*nway_reset)(struct net_device *) ;
   u32 (*get_link)(struct net_device *) ;
   int (*get_eeprom_len)(struct net_device *) ;
   int (*get_eeprom)(struct net_device *, struct ethtool_eeprom *, u8 *) ;
   int (*set_eeprom)(struct net_device *, struct ethtool_eeprom *, u8 *) ;
   int (*get_coalesce)(struct net_device *, struct ethtool_coalesce *) ;
   int (*set_coalesce)(struct net_device *, struct ethtool_coalesce *) ;
   void (*get_ringparam)(struct net_device *, struct ethtool_ringparam *) ;
   int (*set_ringparam)(struct net_device *, struct ethtool_ringparam *) ;
   void (*get_pauseparam)(struct net_device *, struct ethtool_pauseparam *) ;
   int (*set_pauseparam)(struct net_device *, struct ethtool_pauseparam *) ;
   void (*self_test)(struct net_device *, struct ethtool_test *, u64 *) ;
   void (*get_strings)(struct net_device *, u32 , u8 *) ;
   int (*set_phys_id)(struct net_device *, enum ethtool_phys_id_state ) ;
   void (*get_ethtool_stats)(struct net_device *, struct ethtool_stats *, u64 *) ;
   int (*begin)(struct net_device *) ;
   void (*complete)(struct net_device *) ;
   u32 (*get_priv_flags)(struct net_device *) ;
   int (*set_priv_flags)(struct net_device *, u32 ) ;
   int (*get_sset_count)(struct net_device *, int ) ;
   int (*get_rxnfc)(struct net_device *, struct ethtool_rxnfc *, u32 *) ;
   int (*set_rxnfc)(struct net_device *, struct ethtool_rxnfc *) ;
   int (*flash_device)(struct net_device *, struct ethtool_flash *) ;
   int (*reset)(struct net_device *, u32 *) ;
   u32 (*get_rxfh_key_size)(struct net_device *) ;
   u32 (*get_rxfh_indir_size)(struct net_device *) ;
   int (*get_rxfh)(struct net_device *, u32 *, u8 *, u8 *) ;
   int (*set_rxfh)(struct net_device *, u32 *, u8 *, u8 ) ;
   int (*get_rxfh_context)(struct net_device *, u32 *, u8 *, u8 *, u32 ) ;
   int (*set_rxfh_context)(struct net_device *, u32 *, u8 *, u8 , u32 *, bool ) ;
   void (*get_channels)(struct net_device *, struct ethtool_channels *) ;
   int (*set_channels)(struct net_device *, struct ethtool_channels *) ;
   int (*get_dump_flag)(struct net_device *, struct ethtool_dump *) ;
   int (*get_dump_data)(struct net_device *, struct ethtool_dump *, void *) ;
   int (*set_dump)(struct net_device *, struct ethtool_dump *) ;
   int (*get_ts_info)(struct net_device *, struct ethtool_ts_info *) ;
   int (*get_module_info)(struct net_device *, struct ethtool_modinfo *) ;
   int (*get_module_eeprom)(struct net_device *, struct ethtool_eeprom *, u8 *) ;
   int (*get_eee)(struct net_device *, struct ethtool_eee *) ;
   int (*set_eee)(struct net_device *, struct ethtool_eee *) ;
   int (*get_tunable)(struct net_device *, struct ethtool_tunable *, void *) ;
   int (*set_tunable)(struct net_device *, struct ethtool_tunable *, void *) ;
   int (*get_per_queue_coalesce)(struct net_device *, u32 , struct ethtool_coalesce *) ;
   int (*set_per_queue_coalesce)(struct net_device *, u32 , struct ethtool_coalesce *) ;
   int (*get_link_ksettings)(struct net_device *, struct ethtool_link_ksettings *) ;
   int (*set_link_ksettings)(struct net_device *, struct ethtool_link_ksettings *) ;
   int (*get_fecparam)(struct net_device *, struct ethtool_fecparam *) ;
   int (*set_fecparam)(struct net_device *, struct ethtool_fecparam *) ;
   void (*get_ethtool_phy_stats)(struct net_device *, struct ethtool_stats *, u64 *) ;
};
#line 822  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/sysctl.h"
struct ctl_table_root;
#line 823 
struct ctl_table_header;
#line 824 
struct ctl_dir;
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
typedef int proc_handler(struct ctl_table *, int , void *, size_t *, loff_t *);
#line 105  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct ctl_table_poll {
   atomic_t event ;
   wait_queue_head_t wait ;
};
#line 123  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct ctl_table {
   char *procname ;
   void *data ;
   int maxlen ;
   umode_t mode ;
   struct ctl_table *child ;
   proc_handler *proc_handler ;
   struct ctl_table_poll *poll ;
   void *extra1 ;
   void *extra2 ;
} __attribute__((__designated_init__));
#line 135  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct ctl_node {
   struct rb_node node ;
   struct ctl_table_header *header ;
};
#line 142  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct __anonstruct_561 {
   struct ctl_table *ctl_table ;
   int used ;
   int count ;
   int nreg ;
};
#line 142  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
union __anonunion_560 {
   struct __anonstruct_561 __anonCompField___anonunion_560_100 ;
   struct callback_head rcu ;
};
#line 142 
struct ctl_table_set;
#line 142  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct ctl_table_header {
   union __anonunion_560 __anonCompField_ctl_table_header_101 ;
   struct completion *unregistering ;
   struct ctl_table *ctl_table_arg ;
   struct ctl_table_root *root ;
   struct ctl_table_set *set ;
   struct ctl_dir *parent ;
   struct ctl_node *node ;
   struct hlist_head inodes ;
};
#line 161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct ctl_dir {
   struct ctl_table_header header ;
   struct rb_root root ;
};
#line 167  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct ctl_table_set {
   int (*is_seen)(struct ctl_table_set *) ;
   struct ctl_dir dir ;
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct ctl_table_root {
   struct ctl_table_set default_set ;
   struct ctl_table_set *(*lookup)(struct ctl_table_root *) ;
   void (*set_ownership)(struct ctl_table_header *, struct ctl_table *, kuid_t *, kgid_t *) ;
   int (*permissions)(struct ctl_table_header *, struct ctl_table *) ;
};
#line 242 
struct prot_inuse;
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/core.h"
struct netns_core {
   struct ctl_table_header *sysctl_hdr ;
   int sysctl_somaxconn ;
   int *sock_inuse ;
   struct prot_inuse *prot_inuse ;
};
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct u64_stats_sync {
   };
#line 36  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct __anonstruct_local_t_562 {
   atomic_long_t a ;
};
#line 36  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
typedef struct __anonstruct_local_t_562 local_t;
#line 119  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/local.h"
struct __anonstruct_local64_t_563 {
   local_t a ;
};
#line 119  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/local.h"
typedef struct __anonstruct_local64_t_563 local64_t;
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/local64.h"
struct __anonstruct_u64_stats_t_564 {
   local64_t v ;
};
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/local64.h"
typedef struct __anonstruct_u64_stats_t_564 u64_stats_t;
#line 51  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct ipstats_mib {
   u64 mibs[37U] ;
   struct u64_stats_sync syncp ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct icmp_mib {
   unsigned long mibs[28U] ;
};
#line 64  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct icmpmsg_mib {
   atomic_long_t mibs[512U] ;
};
#line 71  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct icmpv6_mib {
   unsigned long mibs[6U] ;
};
#line 81  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct icmpv6msg_mib {
   atomic_long_t mibs[512U] ;
};
#line 92  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct tcp_mib {
   unsigned long mibs[16U] ;
};
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct udp_mib {
   unsigned long mibs[9U] ;
};
#line 104  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct linux_mib {
   unsigned long mibs[120U] ;
};
#line 110  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct linux_xfrm_mib {
   unsigned long mibs[29U] ;
};
#line 116  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct linux_tls_mib {
   unsigned long mibs[11U] ;
};
#line 7  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/mib.h"
struct proc_dir_entry;
#line 7  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/mib.h"
struct netns_mib {
   struct tcp_mib *tcp_statistics ;
   struct ipstats_mib *ip_statistics ;
   struct linux_mib *net_statistics ;
   struct udp_mib *udp_statistics ;
   struct udp_mib *udplite_statistics ;
   struct icmp_mib *icmp_statistics ;
   struct icmpmsg_mib *icmpmsg_statistics ;
   struct proc_dir_entry *proc_net_devsnmp6 ;
   struct udp_mib *udp_stats_in6 ;
   struct udp_mib *udplite_stats_in6 ;
   struct ipstats_mib *ipv6_statistics ;
   struct icmpv6_mib *icmpv6_statistics ;
   struct icmpv6msg_mib *icmpv6msg_statistics ;
   struct linux_xfrm_mib *xfrm_statistics ;
   struct linux_tls_mib *tls_statistics ;
};
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/unix.h"
struct netns_unix {
   int sysctl_max_dgram_qlen ;
   struct ctl_table_header *ctl ;
};
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/packet.h"
struct netns_packet {
   struct mutex sklist_lock ;
   struct hlist_head sklist ;
};
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_frag.h"
struct inet_frags;
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_frag.h"
struct fqdir {
   long high_thresh ;
   long low_thresh ;
   int timeout ;
   int max_dist ;
   struct inet_frags *f ;
   struct net *net ;
   bool dead ;
   struct rhashtable rhashtable ;
   atomic_long_t mem ;
   struct work_struct destroy_work ;
};
#line 41  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_frag.h"
struct frag_v4_compare_key {
   __be32 saddr ;
   __be32 daddr ;
   u32 user ;
   u32 vif ;
   __be16 id ;
   u16 protocol ;
};
#line 50  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_frag.h"
struct frag_v6_compare_key {
   struct in6_addr saddr ;
   struct in6_addr daddr ;
   u32 user ;
   __be32 id ;
   u32 iif ;
};
#line 77  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_frag.h"
union __anonunion_key_565 {
   struct frag_v4_compare_key v4 ;
   struct frag_v6_compare_key v6 ;
};
#line 77  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_frag.h"
struct inet_frag_queue {
   struct rhash_head node ;
   union __anonunion_key_565 key ;
   struct timer_list timer ;
   spinlock_t lock ;
   refcount_t refcnt ;
   struct rb_root rb_fragments ;
   struct sk_buff *fragments_tail ;
   struct sk_buff *last_run_head ;
   ktime_t stamp ;
   int len ;
   int meat ;
   __u8 flags ;
   u16 max_size ;
   struct fqdir *fqdir ;
   struct callback_head rcu ;
};
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_frag.h"
struct inet_frags {
   unsigned int qsize ;
   void (*constructor)(struct inet_frag_queue *, void *) ;
   void (*destructor)(struct inet_frag_queue *) ;
   void (*frag_expire)(struct timer_list *) ;
   struct kmem_cache *frags_cachep ;
   char *frags_cache_name ;
   struct rhashtable_params rhash_params ;
   refcount_t refcnt ;
   struct completion completion ;
};
#line 177 
struct ipv4_devconf;
#line 178 
struct fib_rules_ops;
#line 179 
struct fib_table;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv4.h"
struct local_ports {
   seqlock_t lock ;
   int range[2U] ;
   bool warned ;
};
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv4.h"
struct ping_group_range {
   seqlock_t lock ;
   kgid_t range[2U] ;
};
#line 31 
struct inet_hashinfo;
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv4.h"
struct inet_timewait_death_row {
   atomic_t tw_count ;
   struct inet_hashinfo *hashinfo ;
   int sysctl_max_tw_buckets ;
};
#line 40 
struct tcp_fastopen_context;
#line 43 
struct ip_ra_chain;
#line 43 
struct inet_peer_base;
#line 43 
struct xt_table;
#line 43 
struct tcp_congestion_ops;
#line 43 
struct fib_notifier_ops;
#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv4.h"
struct netns_ipv4 {
   struct ctl_table_header *forw_hdr ;
   struct ctl_table_header *frags_hdr ;
   struct ctl_table_header *ipv4_hdr ;
   struct ctl_table_header *route_hdr ;
   struct ctl_table_header *xfrm4_hdr ;
   struct ipv4_devconf *devconf_all ;
   struct ipv4_devconf *devconf_dflt ;
   struct ip_ra_chain *ra_chain ;
   struct mutex ra_mutex ;
   struct fib_rules_ops *rules_ops ;
   bool fib_has_custom_rules ;
   unsigned int fib_rules_require_fldissect ;
   struct fib_table *fib_main ;
   struct fib_table *fib_default ;
   bool fib_has_custom_local_routes ;
   int fib_num_tclassid_users ;
   struct hlist_head *fib_table_hash ;
   bool fib_offload_disabled ;
   struct sock *fibnl ;
   struct sock **icmp_sk ;
   struct sock *mc_autojoin_sk ;
   struct inet_peer_base *peers ;
   struct sock **tcp_sk ;
   struct fqdir *fqdir ;
   struct xt_table *iptable_filter ;
   struct xt_table *iptable_mangle ;
   struct xt_table *iptable_raw ;
   struct xt_table *arptable_filter ;
   struct xt_table *iptable_security ;
   struct xt_table *nat_table ;
   int sysctl_icmp_echo_ignore_all ;
   int sysctl_icmp_echo_ignore_broadcasts ;
   int sysctl_icmp_ignore_bogus_error_responses ;
   int sysctl_icmp_ratelimit ;
   int sysctl_icmp_ratemask ;
   int sysctl_icmp_errors_use_inbound_ifaddr ;
   struct local_ports ip_local_ports ;
   int sysctl_tcp_ecn ;
   int sysctl_tcp_ecn_fallback ;
   int sysctl_ip_default_ttl ;
   int sysctl_ip_no_pmtu_disc ;
   int sysctl_ip_fwd_use_pmtu ;
   int sysctl_ip_fwd_update_priority ;
   int sysctl_ip_nonlocal_bind ;
   int sysctl_ip_dynaddr ;
   int sysctl_ip_early_demux ;
   int sysctl_raw_l3mdev_accept ;
   int sysctl_tcp_early_demux ;
   int sysctl_udp_early_demux ;
   int sysctl_fwmark_reflect ;
   int sysctl_tcp_fwmark_accept ;
   int sysctl_tcp_l3mdev_accept ;
   int sysctl_tcp_mtu_probing ;
   int sysctl_tcp_mtu_probe_floor ;
   int sysctl_tcp_base_mss ;
   int sysctl_tcp_min_snd_mss ;
   int sysctl_tcp_probe_threshold ;
   u32 sysctl_tcp_probe_interval ;
   int sysctl_tcp_keepalive_time ;
   int sysctl_tcp_keepalive_probes ;
   int sysctl_tcp_keepalive_intvl ;
   int sysctl_tcp_syn_retries ;
   int sysctl_tcp_synack_retries ;
   int sysctl_tcp_syncookies ;
   int sysctl_tcp_reordering ;
   int sysctl_tcp_retries1 ;
   int sysctl_tcp_retries2 ;
   int sysctl_tcp_orphan_retries ;
   int sysctl_tcp_fin_timeout ;
   unsigned int sysctl_tcp_notsent_lowat ;
   int sysctl_tcp_tw_reuse ;
   int sysctl_tcp_sack ;
   int sysctl_tcp_window_scaling ;
   int sysctl_tcp_timestamps ;
   int sysctl_tcp_early_retrans ;
   int sysctl_tcp_recovery ;
   int sysctl_tcp_thin_linear_timeouts ;
   int sysctl_tcp_slow_start_after_idle ;
   int sysctl_tcp_retrans_collapse ;
   int sysctl_tcp_stdurg ;
   int sysctl_tcp_rfc1337 ;
   int sysctl_tcp_abort_on_overflow ;
   int sysctl_tcp_fack ;
   int sysctl_tcp_max_reordering ;
   int sysctl_tcp_dsack ;
   int sysctl_tcp_app_win ;
   int sysctl_tcp_adv_win_scale ;
   int sysctl_tcp_frto ;
   int sysctl_tcp_nometrics_save ;
   int sysctl_tcp_moderate_rcvbuf ;
   int sysctl_tcp_tso_win_divisor ;
   int sysctl_tcp_workaround_signed_windows ;
   int sysctl_tcp_limit_output_bytes ;
   int sysctl_tcp_challenge_ack_limit ;
   int sysctl_tcp_min_tso_segs ;
   int sysctl_tcp_min_rtt_wlen ;
   int sysctl_tcp_autocorking ;
   int sysctl_tcp_invalid_ratelimit ;
   int sysctl_tcp_pacing_ss_ratio ;
   int sysctl_tcp_pacing_ca_ratio ;
   int sysctl_tcp_wmem[3U] ;
   int sysctl_tcp_rmem[3U] ;
   int sysctl_tcp_comp_sack_nr ;
   unsigned long sysctl_tcp_comp_sack_delay_ns ;
   struct inet_timewait_death_row tcp_death_row ;
   int sysctl_max_syn_backlog ;
   int sysctl_tcp_fastopen ;
   struct tcp_congestion_ops *tcp_congestion_control ;
   struct tcp_fastopen_context *tcp_fastopen_ctx ;
   spinlock_t tcp_fastopen_ctx_lock ;
   unsigned int sysctl_tcp_fastopen_blackhole_timeout ;
   atomic_t tfo_active_disable_times ;
   unsigned long tfo_active_disable_stamp ;
   int sysctl_udp_wmem_min ;
   int sysctl_udp_rmem_min ;
   int sysctl_udp_l3mdev_accept ;
   int sysctl_igmp_max_memberships ;
   int sysctl_igmp_max_msf ;
   int sysctl_igmp_llm_reports ;
   int sysctl_igmp_qrv ;
   struct ping_group_range ping_group_range ;
   atomic_t dev_addr_genid ;
   unsigned long *sysctl_local_reserved_ports ;
   int sysctl_ip_prot_sock ;
   struct list_head mr_tables ;
   struct fib_rules_ops *mr_rules_ops ;
   int sysctl_fib_multipath_use_neigh ;
   int sysctl_fib_multipath_hash_policy ;
   struct fib_notifier_ops *notifier_ops ;
   unsigned int fib_seq ;
   struct fib_notifier_ops *ipmr_notifier_ops ;
   unsigned int ipmr_seq ;
   atomic_t rt_genid ;
   siphash_key_t ip_id_key ;
};
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/dst_ops.h"
struct neighbour;
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/dst_ops.h"
struct dst_ops {
   unsigned short family ;
   unsigned int gc_thresh ;
   int (*gc)(struct dst_ops *) ;
   struct dst_entry *(*check)(struct dst_entry *, __u32 ) ;
   unsigned int (*default_advmss)(struct dst_entry *) ;
   unsigned int (*mtu)(struct dst_entry *) ;
   u32 *(*cow_metrics)(struct dst_entry *, unsigned long ) ;
   void (*destroy)(struct dst_entry *) ;
   void (*ifdown)(struct dst_entry *, struct net_device *, int ) ;
   struct dst_entry *(*negative_advice)(struct dst_entry *) ;
   void (*link_failure)(struct sk_buff *) ;
   void (*update_pmtu)(struct dst_entry *, struct sock *, struct sk_buff *, u32 , bool ) ;
   void (*redirect)(struct dst_entry *, struct sock *, struct sk_buff *) ;
   int (*local_out)(struct net *, struct sock *, struct sk_buff *) ;
   struct neighbour *(*neigh_lookup)(struct dst_entry *, struct sk_buff *, void *) ;
   void (*confirm_neigh)(struct dst_entry *, void *) ;
   struct kmem_cache *kmem_cachep ;
   struct percpu_counter pcpuc_entries ;
};
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv6.h"
struct netns_sysctl_ipv6 {
   struct ctl_table_header *hdr ;
   struct ctl_table_header *route_hdr ;
   struct ctl_table_header *icmp_hdr ;
   struct ctl_table_header *frags_hdr ;
   struct ctl_table_header *xfrm6_hdr ;
   int bindv6only ;
   int flush_delay ;
   int ip6_rt_max_size ;
   int ip6_rt_gc_min_interval ;
   int ip6_rt_gc_timeout ;
   int ip6_rt_gc_interval ;
   int ip6_rt_gc_elasticity ;
   int ip6_rt_mtu_expires ;
   int ip6_rt_min_advmss ;
   int multipath_hash_policy ;
   int flowlabel_consistency ;
   int auto_flowlabels ;
   int icmpv6_time ;
   int icmpv6_echo_ignore_all ;
   int icmpv6_echo_ignore_multicast ;
   int icmpv6_echo_ignore_anycast ;
   unsigned long icmpv6_ratemask[4U] ;
   unsigned long *icmpv6_ratemask_ptr ;
   int anycast_src_echo_reply ;
   int ip_nonlocal_bind ;
   int fwmark_reflect ;
   int idgen_retries ;
   int idgen_delay ;
   int flowlabel_state_ranges ;
   int flowlabel_reflect ;
   int max_dst_opts_cnt ;
   int max_hbh_opts_cnt ;
   int max_dst_opts_len ;
   int max_hbh_opts_len ;
   int seg6_flowlabel ;
   bool skip_notify_on_dev_down ;
};
#line 56 
struct ipv6_devconf;
#line 56 
struct fib6_info;
#line 56 
struct rt6_info;
#line 56 
struct rt6_statistics;
#line 56 
struct fib6_table;
#line 56 
struct seg6_pernet_data;
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv6.h"
struct __anonstruct_ip6addrlbl_table_567 {
   struct hlist_head head ;
   spinlock_t lock ;
   u32 seq ;
};
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv6.h"
struct netns_ipv6 {
   struct netns_sysctl_ipv6 sysctl ;
   struct ipv6_devconf *devconf_all ;
   struct ipv6_devconf *devconf_dflt ;
   struct inet_peer_base *peers ;
   struct fqdir *fqdir ;
   struct xt_table *ip6table_filter ;
   struct xt_table *ip6table_mangle ;
   struct xt_table *ip6table_raw ;
   struct xt_table *ip6table_security ;
   struct xt_table *ip6table_nat ;
   struct fib6_info *fib6_null_entry ;
   struct rt6_info *ip6_null_entry ;
   struct rt6_statistics *rt6_stats ;
   struct timer_list ip6_fib_timer ;
   struct hlist_head *fib_table_hash ;
   struct fib6_table *fib6_main_tbl ;
   struct list_head fib6_walkers ;
   struct dst_ops ip6_dst_ops ;
   rwlock_t fib6_walker_lock ;
   spinlock_t fib6_gc_lock ;
   unsigned int ip6_rt_gc_expire ;
   unsigned long ip6_rt_last_gc ;
   unsigned int fib6_rules_require_fldissect ;
   bool fib6_has_custom_rules ;
   unsigned int fib6_routes_require_src ;
   struct rt6_info *ip6_prohibit_entry ;
   struct rt6_info *ip6_blk_hole_entry ;
   struct fib6_table *fib6_local_tbl ;
   struct fib_rules_ops *fib6_rules_ops ;
   struct sock **icmp_sk ;
   struct sock *ndisc_sk ;
   struct sock *tcp_sk ;
   struct sock *igmp_sk ;
   struct sock *mc_autojoin_sk ;
   struct list_head mr6_tables ;
   struct fib_rules_ops *mr6_rules_ops ;
   atomic_t dev_addr_genid ;
   atomic_t fib6_sernum ;
   struct seg6_pernet_data *seg6_data ;
   struct fib_notifier_ops *notifier_ops ;
   struct fib_notifier_ops *ip6mr_notifier_ops ;
   unsigned int ipmr_seq ;
   struct __anonstruct_ip6addrlbl_table_567 ip6addrlbl_table ;
};
#line 121  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv6.h"
struct netns_nf_frag {
   struct fqdir *fqdir ;
};
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/nexthop.h"
struct netns_nexthop {
   struct rb_root rb_root ;
   struct hlist_head *devhash ;
   unsigned int seq ;
   u32 last_id_allocated ;
};
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ieee802154_6lowpan.h"
struct netns_sysctl_lowpan {
   struct ctl_table_header *frags_hdr ;
};
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ieee802154_6lowpan.h"
struct netns_ieee802154_lowpan {
   struct netns_sysctl_lowpan sysctl ;
   struct fqdir *fqdir ;
};
#line 21 
struct sctp_mib;
#line 10  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/sctp.h"
struct netns_sctp {
   struct sctp_mib *sctp_statistics ;
   struct proc_dir_entry *proc_net_sctp ;
   struct ctl_table_header *sysctl_header ;
   struct sock *ctl_sock ;
   struct list_head local_addr_list ;
   struct list_head addr_waitq ;
   struct timer_list addr_wq_timer ;
   struct list_head auto_asconf_splist ;
   spinlock_t addr_wq_lock ;
   spinlock_t local_addr_lock ;
   unsigned int rto_initial ;
   unsigned int rto_min ;
   unsigned int rto_max ;
   int rto_alpha ;
   int rto_beta ;
   int max_burst ;
   int cookie_preserve_enable ;
   char *sctp_hmac_alg ;
   unsigned int valid_cookie_life ;
   unsigned int sack_timeout ;
   unsigned int hb_interval ;
   int max_retrans_association ;
   int max_retrans_path ;
   int max_retrans_init ;
   int pf_retrans ;
   int ps_retrans ;
   int pf_enable ;
   int pf_expose ;
   int sndbuf_policy ;
   int rcvbuf_policy ;
   int default_auto_asconf ;
   int addip_enable ;
   int addip_noauth ;
   int prsctp_enable ;
   int reconf_enable ;
   int auth_enable ;
   int intl_enable ;
   int ecn_enable ;
   int scope_policy ;
   int rwnd_upd_shift ;
   unsigned long max_autoclose ;
};
#line 7  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/dccp.h"
struct netns_dccp {
   struct sock *v4_ctl_sk ;
   struct sock *v6_ctl_sk ;
};
#line 75  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/netfilter.h"
struct nf_logger;
#line 76 
struct nf_queue_handler;
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/netfilter.h"
struct nf_hook_entries;
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/netfilter.h"
struct netns_nf {
   struct proc_dir_entry *proc_netfilter ;
   struct nf_queue_handler *queue_handler ;
   struct nf_logger *nf_loggers[13U] ;
   struct ctl_table_header *nf_log_dir_header ;
   struct nf_hook_entries *hooks_ipv4[5U] ;
   struct nf_hook_entries *hooks_ipv6[5U] ;
   struct nf_hook_entries *hooks_arp[3U] ;
   struct nf_hook_entries *hooks_bridge[5U] ;
   struct nf_hook_entries *hooks_decnet[7U] ;
   bool defrag_ipv4 ;
   bool defrag_ipv6 ;
};
#line 37 
struct ebt_table;
#line 10  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/x_tables.h"
struct netns_xt {
   struct list_head tables[13U] ;
   bool notrack_deprecated_warning ;
   bool clusterip_deprecated_warning ;
   struct ebt_table *broute_table ;
   struct ebt_table *frame_filter ;
   struct ebt_table *frame_nat ;
};
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_nulls.h"
struct hlist_nulls_node;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_nulls.h"
struct hlist_nulls_head {
   struct hlist_nulls_node *first ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_nulls.h"
struct hlist_nulls_node {
   struct hlist_nulls_node *next ;
   struct hlist_nulls_node **pprev ;
};
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_generic_net {
   unsigned int timeout ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_tcp_net {
   unsigned int timeouts[14U] ;
   int tcp_loose ;
   int tcp_be_liberal ;
   int tcp_max_retrans ;
};
#line 38  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_udp_net {
   unsigned int timeouts[2U] ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_icmp_net {
   unsigned int timeout ;
};
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_dccp_net {
   int dccp_loose ;
   unsigned int dccp_timeout[10U] ;
};
#line 54  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_sctp_net {
   unsigned int timeouts[10U] ;
};
#line 66  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_gre_net {
   struct list_head keymap_list ;
   unsigned int timeouts[2U] ;
};
#line 72  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_ip_net {
   struct nf_generic_net generic ;
   struct nf_tcp_net tcp ;
   struct nf_udp_net udp ;
   struct nf_icmp_net icmp ;
   struct nf_icmp_net icmpv6 ;
   struct nf_dccp_net dccp ;
   struct nf_sctp_net sctp ;
   struct nf_gre_net gre ;
};
#line 89  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct ct_pcpu {
   spinlock_t lock ;
   struct hlist_nulls_head unconfirmed ;
   struct hlist_nulls_head dying ;
};
#line 95 
struct nf_ct_event_notifier;
#line 95 
struct nf_exp_event_notifier;
#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct netns_ct {
   atomic_t count ;
   unsigned int expect_count ;
   struct delayed_work ecache_dwork ;
   bool ecache_dwork_pending ;
   bool auto_assign_helper_warned ;
   struct ctl_table_header *sysctl_header ;
   unsigned int sysctl_log_invalid ;
   int sysctl_events ;
   int sysctl_acct ;
   int sysctl_auto_assign_helper ;
   int sysctl_tstamp ;
   int sysctl_checksum ;
   struct ct_pcpu *pcpu_lists ;
   struct ip_conntrack_stat *stat ;
   struct nf_ct_event_notifier *nf_conntrack_event_cb ;
   struct nf_exp_event_notifier *nf_expect_event_cb ;
   struct nf_ip_net nf_ct_proto ;
   unsigned int labels_used ;
};
#line 7  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/nftables.h"
struct netns_nftables {
   struct list_head tables ;
   struct list_head commit_list ;
   struct list_head module_list ;
   struct mutex commit_mutex ;
   unsigned int base_seq ;
   u8 gencursor ;
   u8 validate_state ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/xfrm.h"
struct xfrm_policy_hash {
   struct hlist_head *table ;
   unsigned int hmask ;
   u8 dbits4 ;
   u8 sbits4 ;
   u8 dbits6 ;
   u8 sbits6 ;
};
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/xfrm.h"
struct xfrm_policy_hthresh {
   struct work_struct work ;
   seqlock_t lock ;
   u8 lbits4 ;
   u8 rbits4 ;
   u8 lbits6 ;
   u8 rbits6 ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/xfrm.h"
struct netns_xfrm {
   struct list_head state_all ;
   struct hlist_head *state_bydst ;
   struct hlist_head *state_bysrc ;
   struct hlist_head *state_byspi ;
   unsigned int state_hmask ;
   unsigned int state_num ;
   struct work_struct state_hash_work ;
   struct list_head policy_all ;
   struct hlist_head *policy_byidx ;
   unsigned int policy_idx_hmask ;
   struct hlist_head policy_inexact[3U] ;
   struct xfrm_policy_hash policy_bydst[3U] ;
   unsigned int policy_count[6U] ;
   struct work_struct policy_hash_work ;
   struct xfrm_policy_hthresh policy_hthresh ;
   struct list_head inexact_bins ;
   struct sock *nlsk ;
   struct sock *nlsk_stash ;
   u32 sysctl_aevent_etime ;
   u32 sysctl_aevent_rseqth ;
   int sysctl_larval_drop ;
   u32 sysctl_acq_expires ;
   struct ctl_table_header *sysctl_hdr ;
   struct dst_ops xfrm4_dst_ops ;
   struct dst_ops xfrm6_dst_ops ;
   spinlock_t xfrm_state_lock ;
   spinlock_t xfrm_policy_lock ;
   struct mutex xfrm_cfg_mutex ;
};
#line 79 
struct mpls_route;
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/mpls.h"
struct netns_mpls {
   int ip_ttl_propagate ;
   int default_ttl ;
   size_t platform_labels ;
   struct mpls_route **platform_label ;
   struct ctl_table_header *ctl ;
};
#line 20 
struct can_dev_rcv_lists;
#line 21 
struct can_pkg_stats;
#line 22 
struct can_rcv_lists_stats;
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/can.h"
struct netns_can {
   struct proc_dir_entry *proc_dir ;
   struct proc_dir_entry *pde_version ;
   struct proc_dir_entry *pde_stats ;
   struct proc_dir_entry *pde_reset_stats ;
   struct proc_dir_entry *pde_rcvlist_all ;
   struct proc_dir_entry *pde_rcvlist_fil ;
   struct proc_dir_entry *pde_rcvlist_inv ;
   struct proc_dir_entry *pde_rcvlist_sff ;
   struct proc_dir_entry *pde_rcvlist_eff ;
   struct proc_dir_entry *pde_rcvlist_err ;
   struct proc_dir_entry *bcmproc_dir ;
   struct can_dev_rcv_lists *rx_alldev_list ;
   spinlock_t rcvlists_lock ;
   struct timer_list stattimer ;
   struct can_pkg_stats *pkg_stats ;
   struct can_rcv_lists_stats *rcv_lists_stats ;
   struct hlist_head cgw_list ;
};
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/xdp.h"
struct netns_xdp {
   struct mutex lock ;
   struct hlist_head list ;
};
#line 12 
struct proc_ns_operations;
#line 7  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ns_common.h"
struct ns_common {
   atomic_long_t stashed ;
   struct proc_ns_operations *ops ;
   unsigned int inum ;
};
#line 12 
struct net_generic;
#line 13 
struct uevent_sock;
#line 14 
struct netns_ipvs;
#line 55  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/net_namespace.h"
struct key_tag;
#line 55 
struct ucounts;
#line 55  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/net_namespace.h"
struct net {
   refcount_t passive ;
   refcount_t count ;
   spinlock_t rules_mod_lock ;
   unsigned int dev_unreg_count ;
   unsigned int dev_base_seq ;
   int ifindex ;
   spinlock_t nsid_lock ;
   atomic_t fnhe_genid ;
   struct list_head list ;
   struct list_head exit_list ;
   struct llist_node cleanup_list ;
   struct key_tag *key_domain ;
   struct user_namespace *user_ns ;
   struct ucounts *ucounts ;
   struct idr netns_ids ;
   struct ns_common ns ;
   struct list_head dev_base_head ;
   struct proc_dir_entry *proc_net ;
   struct proc_dir_entry *proc_net_stat ;
   struct ctl_table_set sysctls ;
   struct sock *rtnl ;
   struct sock *genl_sock ;
   struct uevent_sock *uevent_sock ;
   struct hlist_head *dev_name_head ;
   struct hlist_head *dev_index_head ;
   struct raw_notifier_head netdev_chain ;
   u32 hash_mix ;
   struct net_device *loopback_dev ;
   struct list_head rules_ops ;
   struct netns_core core ;
   struct netns_mib mib ;
   struct netns_packet packet ;
   struct netns_unix unx ;
   struct netns_nexthop nexthop ;
   struct netns_ipv4 ipv4 ;
   struct netns_ipv6 ipv6 ;
   struct netns_ieee802154_lowpan ieee802154_lowpan ;
   struct netns_sctp sctp ;
   struct netns_dccp dccp ;
   struct netns_nf nf ;
   struct netns_xt xt ;
   struct netns_ct ct ;
   struct netns_nftables nft ;
   struct netns_nf_frag nf_frag ;
   struct ctl_table_header *nf_frag_frags_hdr ;
   struct sock *nfnl ;
   struct sock *nfnl_stash ;
   struct list_head nfnl_acct_list ;
   struct list_head nfct_timeout_list ;
   struct sk_buff_head wext_nlevents ;
   struct net_generic *gen ;
   struct bpf_prog *flow_dissector_prog ;
   struct netns_xfrm xfrm ;
   struct netns_ipvs *ipvs ;
   struct netns_mpls mpls ;
   struct netns_can can ;
   struct netns_xdp xdp ;
   struct sock *crypto_nlsk ;
   struct sock *diag_nlsk ;
} __attribute__((__designated_init__));
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/assoc_array.h"
struct assoc_array_ptr;
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/assoc_array.h"
struct assoc_array {
   struct assoc_array_ptr *root ;
   unsigned long nr_leaves_on_tree ;
};
#line 83  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/assoc_array.h"
typedef int32_t key_serial_t;
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
typedef uint32_t key_perm_t;
#line 32 
struct key_type;
#line 85  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
struct key_tag {
   struct callback_head rcu ;
   refcount_t usage ;
   bool removed ;
};
#line 91  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
struct __anonstruct_580 {
   u16 desc_len ;
   char desc[6U] ;
};
#line 91  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
union __anonunion_579 {
   struct __anonstruct_580 __anonCompField___anonunion_579_102 ;
   unsigned long x ;
};
#line 91  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
struct keyring_index_key {
   unsigned long hash ;
   union __anonunion_579 __anonCompField_keyring_index_key_103 ;
   struct key_type *type ;
   struct key_tag *domain_tag ;
   char *description ;
};
#line 111  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
union key_payload {
   void *rcu_data0 ;
   void *data[4U] ;
};
#line 153  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
struct key_restriction {
   int (*check)(struct key *, struct key_type *, union key_payload *, struct key *) ;
   struct key *key ;
   struct key_type *keytype ;
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
union __anonunion_581 {
   struct list_head graveyard_link ;
   struct rb_node serial_node ;
};
#line 172 
struct key_user;
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
union __anonunion_582 {
   time64_t expiry ;
   time64_t revoked_at ;
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
struct __anonstruct_584 {
   unsigned long hash ;
   unsigned long len_desc ;
   struct key_type *type ;
   struct key_tag *domain_tag ;
   char *description ;
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
union __anonunion_583 {
   struct keyring_index_key index_key ;
   struct __anonstruct_584 __anonCompField___anonunion_583_106 ;
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
struct __anonstruct_586 {
   struct list_head name_link ;
   struct assoc_array keys ;
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
union __anonunion_585 {
   union key_payload payload ;
   struct __anonstruct_586 __anonCompField___anonunion_585_108 ;
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
struct key {
   refcount_t usage ;
   key_serial_t serial ;
   union __anonunion_581 __anonCompField_key_104 ;
   struct rw_semaphore sem ;
   struct key_user *user ;
   void *security ;
   union __anonunion_582 __anonCompField_key_105 ;
   time64_t last_used_at ;
   kuid_t uid ;
   kgid_t gid ;
   key_perm_t perm ;
   unsigned short quotalen ;
   unsigned short datalen ;
   short state ;
   unsigned long flags ;
   union __anonunion_583 __anonCompField_key_107 ;
   union __anonunion_585 __anonCompField_key_109 ;
   struct key_restriction *restrict_link ;
};
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/user.h"
struct user_struct {
   refcount_t __count ;
   atomic_t processes ;
   atomic_t sigpending ;
   atomic_t fanotify_listeners ;
   atomic_long_t epoll_watches ;
   unsigned long mq_bytes ;
   unsigned long locked_shm ;
   unsigned long unix_inflight ;
   atomic_long_t pipe_bufs ;
   struct hlist_node uidhash_node ;
   kuid_t uid ;
   atomic_long_t locked_vm ;
   struct ratelimit_state ratelimit ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cred.h"
struct group_info {
   atomic_t usage ;
   int ngroups ;
   kgid_t gid[0U] ;
} __attribute__((__designated_init__));
#line 111  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cred.h"
union __anonunion_589 {
   int non_rcu ;
   struct callback_head rcu ;
};
#line 111  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cred.h"
struct cred {
   atomic_t usage ;
   atomic_t subscribers ;
   void *put_addr ;
   unsigned int magic ;
   kuid_t uid ;
   kgid_t gid ;
   kuid_t suid ;
   kgid_t sgid ;
   kuid_t euid ;
   kgid_t egid ;
   kuid_t fsuid ;
   kgid_t fsgid ;
   unsigned int securebits ;
   kernel_cap_t cap_inheritable ;
   kernel_cap_t cap_permitted ;
   kernel_cap_t cap_effective ;
   kernel_cap_t cap_bset ;
   kernel_cap_t cap_ambient ;
   unsigned char jit_keyring ;
   struct key *session_keyring ;
   struct key *process_keyring ;
   struct key *thread_keyring ;
   struct key *request_key_auth ;
   void *security ;
   struct user_struct *user ;
   struct user_namespace *user_ns ;
   struct group_info *group_info ;
   union __anonunion_589 __anonCompField_cred_110 ;
} __attribute__((__designated_init__));
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seq_file.h"
struct seq_file {
   char *buf ;
   size_t size ;
   size_t from ;
   size_t count ;
   size_t pad_until ;
   loff_t index ;
   loff_t read_pos ;
   u64 version ;
   struct mutex lock ;
   struct seq_operations *op ;
   int poll_event ;
   struct file *file ;
   void *private ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seq_file.h"
struct seq_operations {
   void *(*start)(struct seq_file *, loff_t *) ;
   void (*stop)(struct seq_file *, void *) ;
   void *(*next)(struct seq_file *, void *, loff_t *) ;
   int (*show)(struct seq_file *, void *) ;
};
#line 275  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/net_namespace.h"
struct __anonstruct_possible_net_t_590 {
   struct net *net ;
};
#line 275  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/net_namespace.h"
typedef struct __anonstruct_possible_net_t_590 possible_net_t;
#line 58  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct ieee_ets {
   __u8 willing ;
   __u8 ets_cap ;
   __u8 cbs ;
   __u8 tc_tx_bw[8U] ;
   __u8 tc_rx_bw[8U] ;
   __u8 tc_tsa[8U] ;
   __u8 prio_tc[8U] ;
   __u8 tc_reco_bw[8U] ;
   __u8 tc_reco_tsa[8U] ;
   __u8 reco_prio_tc[8U] ;
};
#line 78  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct ieee_maxrate {
   __u64 tc_maxrate[8U] ;
};
#line 119  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct ieee_qcn {
   __u8 rpg_enable[8U] ;
   __u32 rppp_max_rps[8U] ;
   __u32 rpg_time_reset[8U] ;
   __u32 rpg_byte_reset[8U] ;
   __u32 rpg_threshold[8U] ;
   __u32 rpg_max_rate[8U] ;
   __u32 rpg_ai_rate[8U] ;
   __u32 rpg_hai_rate[8U] ;
   __u32 rpg_gd[8U] ;
   __u32 rpg_min_dec_fac[8U] ;
   __u32 rpg_min_rate[8U] ;
   __u32 cndd_state_machine[8U] ;
};
#line 141  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct ieee_qcn_stats {
   __u64 rppp_rp_centiseconds[8U] ;
   __u32 rppp_created_rps[8U] ;
};
#line 157  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct ieee_pfc {
   __u8 pfc_cap ;
   __u8 pfc_en ;
   __u8 mbc ;
   __u16 delay ;
   __u64 requests[8U] ;
   __u64 indications[8U] ;
};
#line 168  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct dcbnl_buffer {
   __u8 prio2buffer[8U] ;
   __u32 buffer_size[8U] ;
   __u32 total_size ;
};
#line 190  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct cee_pg {
   __u8 willing ;
   __u8 error ;
   __u8 pg_en ;
   __u8 tcs_supported ;
   __u8 pg_bw[8U] ;
   __u8 prio_pg[8U] ;
};
#line 207  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct cee_pfc {
   __u8 willing ;
   __u8 error ;
   __u8 pfc_en ;
   __u8 tcs_supported ;
};
#line 244  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct dcb_app {
   __u8 selector ;
   __u8 priority ;
   __u16 protocol ;
};
#line 259  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct dcb_peer_app_info {
   __u8 willing ;
   __u8 error ;
};
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/dcbnl.h"
struct dcbnl_rtnl_ops {
   int (*ieee_getets)(struct net_device *, struct ieee_ets *) ;
   int (*ieee_setets)(struct net_device *, struct ieee_ets *) ;
   int (*ieee_getmaxrate)(struct net_device *, struct ieee_maxrate *) ;
   int (*ieee_setmaxrate)(struct net_device *, struct ieee_maxrate *) ;
   int (*ieee_getqcn)(struct net_device *, struct ieee_qcn *) ;
   int (*ieee_setqcn)(struct net_device *, struct ieee_qcn *) ;
   int (*ieee_getqcnstats)(struct net_device *, struct ieee_qcn_stats *) ;
   int (*ieee_getpfc)(struct net_device *, struct ieee_pfc *) ;
   int (*ieee_setpfc)(struct net_device *, struct ieee_pfc *) ;
   int (*ieee_getapp)(struct net_device *, struct dcb_app *) ;
   int (*ieee_setapp)(struct net_device *, struct dcb_app *) ;
   int (*ieee_delapp)(struct net_device *, struct dcb_app *) ;
   int (*ieee_peer_getets)(struct net_device *, struct ieee_ets *) ;
   int (*ieee_peer_getpfc)(struct net_device *, struct ieee_pfc *) ;
   u8 (*getstate)(struct net_device *) ;
   u8 (*setstate)(struct net_device *, u8 ) ;
   void (*getpermhwaddr)(struct net_device *, u8 *) ;
   void (*setpgtccfgtx)(struct net_device *, int , u8 , u8 , u8 , u8 ) ;
   void (*setpgbwgcfgtx)(struct net_device *, int , u8 ) ;
   void (*setpgtccfgrx)(struct net_device *, int , u8 , u8 , u8 , u8 ) ;
   void (*setpgbwgcfgrx)(struct net_device *, int , u8 ) ;
   void (*getpgtccfgtx)(struct net_device *, int , u8 *, u8 *, u8 *, u8 *) ;
   void (*getpgbwgcfgtx)(struct net_device *, int , u8 *) ;
   void (*getpgtccfgrx)(struct net_device *, int , u8 *, u8 *, u8 *, u8 *) ;
   void (*getpgbwgcfgrx)(struct net_device *, int , u8 *) ;
   void (*setpfccfg)(struct net_device *, int , u8 ) ;
   void (*getpfccfg)(struct net_device *, int , u8 *) ;
   u8 (*setall)(struct net_device *) ;
   u8 (*getcap)(struct net_device *, int , u8 *) ;
   int (*getnumtcs)(struct net_device *, int , u8 *) ;
   int (*setnumtcs)(struct net_device *, int , u8 ) ;
   u8 (*getpfcstate)(struct net_device *) ;
   void (*setpfcstate)(struct net_device *, u8 ) ;
   void (*getbcncfg)(struct net_device *, int , u32 *) ;
   void (*setbcncfg)(struct net_device *, int , u32 ) ;
   void (*getbcnrp)(struct net_device *, int , u8 *) ;
   void (*setbcnrp)(struct net_device *, int , u8 ) ;
   int (*setapp)(struct net_device *, u8 , u16 , u8 ) ;
   int (*getapp)(struct net_device *, u8 , u16 ) ;
   u8 (*getfeatcfg)(struct net_device *, int , u8 *) ;
   u8 (*setfeatcfg)(struct net_device *, int , u8 ) ;
   u8 (*getdcbx)(struct net_device *) ;
   u8 (*setdcbx)(struct net_device *, u8 ) ;
   int (*peer_getappinfo)(struct net_device *, struct dcb_peer_app_info *, u16 *) ;
   int (*peer_getapptable)(struct net_device *, struct dcb_app *) ;
   int (*cee_peer_getpg)(struct net_device *, struct cee_pg *) ;
   int (*cee_peer_getpfc)(struct net_device *, struct cee_pfc *) ;
   int (*dcbnl_getbuffer)(struct net_device *, struct dcbnl_buffer *) ;
   int (*dcbnl_setbuffer)(struct net_device *, struct dcbnl_buffer *) ;
};
#line 41  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/taskstats.h"
struct taskstats {
   __u16 version ;
   __u32 ac_exitcode ;
   __u8 ac_flag ;
   __u8 ac_nice ;
   __u64 cpu_count ;
   __u64 cpu_delay_total ;
   __u64 blkio_count ;
   __u64 blkio_delay_total ;
   __u64 swapin_count ;
   __u64 swapin_delay_total ;
   __u64 cpu_run_real_total ;
   __u64 cpu_run_virtual_total ;
   char ac_comm[32U] ;
   __u8 ac_sched ;
   __u8 ac_pad[3U] ;
   __u32 ac_uid ;
   __u32 ac_gid ;
   __u32 ac_pid ;
   __u32 ac_ppid ;
   __u32 ac_btime ;
   __u64 ac_etime ;
   __u64 ac_utime ;
   __u64 ac_stime ;
   __u64 ac_minflt ;
   __u64 ac_majflt ;
   __u64 coremem ;
   __u64 virtmem ;
   __u64 hiwater_rss ;
   __u64 hiwater_vm ;
   __u64 read_char ;
   __u64 write_char ;
   __u64 read_syscalls ;
   __u64 write_syscalls ;
   __u64 read_bytes ;
   __u64 write_bytes ;
   __u64 cancelled_write_bytes ;
   __u64 nvcsw ;
   __u64 nivcsw ;
   __u64 ac_utimescaled ;
   __u64 ac_stimescaled ;
   __u64 cpu_scaled_run_real_total ;
   __u64 freepages_count ;
   __u64 freepages_delay_total ;
   __u64 thrashing_count ;
   __u64 thrashing_delay_total ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/cgroupstats.h"
struct mnt_namespace;
#line 60 
struct uts_namespace;
#line 61 
struct ipc_namespace;
#line 62 
struct cgroup_namespace;
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/nsproxy.h"
struct nsproxy {
   atomic_t count ;
   struct uts_namespace *uts_ns ;
   struct ipc_namespace *ipc_ns ;
   struct mnt_namespace *mnt_ns ;
   struct pid_namespace *pid_ns_for_children ;
   struct net *net_ns ;
   struct cgroup_namespace *cgroup_ns ;
};
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/user_namespace.h"
struct uid_gid_extent {
   u32 first ;
   u32 lower_first ;
   u32 count ;
};
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/user_namespace.h"
struct __anonstruct_592 {
   struct uid_gid_extent *forward ;
   struct uid_gid_extent *reverse ;
};
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/user_namespace.h"
union __anonunion_591 {
   struct uid_gid_extent extent[5U] ;
   struct __anonstruct_592 __anonCompField___anonunion_591_111 ;
};
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/user_namespace.h"
struct uid_gid_map {
   u32 nr_extents ;
   union __anonunion_591 __anonCompField_uid_gid_map_112 ;
};
#line 55  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/user_namespace.h"
struct user_namespace {
   struct uid_gid_map uid_map ;
   struct uid_gid_map gid_map ;
   struct uid_gid_map projid_map ;
   atomic_t count ;
   struct user_namespace *parent ;
   int level ;
   kuid_t owner ;
   kgid_t group ;
   struct ns_common ns ;
   unsigned long flags ;
   struct list_head keyring_name_list ;
   struct key *user_keyring_register ;
   struct rw_semaphore keyring_sem ;
   struct key *persistent_keyring_register ;
   struct work_struct work ;
   struct ctl_table_set set ;
   struct ctl_table_header *sysctls ;
   struct ucounts *ucounts ;
   int ucount_max[9U] ;
} __attribute__((__designated_init__));
#line 91  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/user_namespace.h"
struct ucounts {
   struct hlist_node node ;
   struct user_namespace *ns ;
   kuid_t uid ;
   int count ;
   atomic_t ucount[9U] ;
};
#line 65  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct bpf_insn {
   __u8 code ;
   __u8 dst_reg : 4 ;
   __u8 src_reg : 4 ;
   __s16 off ;
   __s32 imm ;
};
#line 79  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct bpf_cgroup_storage_key {
   __u64 cgroup_inode_id ;
   __u32 attach_type ;
};
#line 110 
enum bpf_map_type {
    BPF_MAP_TYPE_UNSPEC = 0,
    BPF_MAP_TYPE_HASH = 1,
    BPF_MAP_TYPE_ARRAY = 2,
    BPF_MAP_TYPE_PROG_ARRAY = 3,
    BPF_MAP_TYPE_PERF_EVENT_ARRAY = 4,
    BPF_MAP_TYPE_PERCPU_HASH = 5,
    BPF_MAP_TYPE_PERCPU_ARRAY = 6,
    BPF_MAP_TYPE_STACK_TRACE = 7,
    BPF_MAP_TYPE_CGROUP_ARRAY = 8,
    BPF_MAP_TYPE_LRU_HASH = 9,
    BPF_MAP_TYPE_LRU_PERCPU_HASH = 10,
    BPF_MAP_TYPE_LPM_TRIE = 11,
    BPF_MAP_TYPE_ARRAY_OF_MAPS = 12,
    BPF_MAP_TYPE_HASH_OF_MAPS = 13,
    BPF_MAP_TYPE_DEVMAP = 14,
    BPF_MAP_TYPE_SOCKMAP = 15,
    BPF_MAP_TYPE_CPUMAP = 16,
    BPF_MAP_TYPE_XSKMAP = 17,
    BPF_MAP_TYPE_SOCKHASH = 18,
    BPF_MAP_TYPE_CGROUP_STORAGE = 19,
    BPF_MAP_TYPE_REUSEPORT_SOCKARRAY = 20,
    BPF_MAP_TYPE_PERCPU_CGROUP_STORAGE = 21,
    BPF_MAP_TYPE_QUEUE = 22,
    BPF_MAP_TYPE_STACK = 23,
    BPF_MAP_TYPE_SK_STORAGE = 24,
    BPF_MAP_TYPE_DEVMAP_HASH = 25
};
#line 139 
enum bpf_prog_type {
    BPF_PROG_TYPE_UNSPEC = 0,
    BPF_PROG_TYPE_SOCKET_FILTER = 1,
    BPF_PROG_TYPE_KPROBE = 2,
    BPF_PROG_TYPE_SCHED_CLS = 3,
    BPF_PROG_TYPE_SCHED_ACT = 4,
    BPF_PROG_TYPE_TRACEPOINT = 5,
    BPF_PROG_TYPE_XDP = 6,
    BPF_PROG_TYPE_PERF_EVENT = 7,
    BPF_PROG_TYPE_CGROUP_SKB = 8,
    BPF_PROG_TYPE_CGROUP_SOCK = 9,
    BPF_PROG_TYPE_LWT_IN = 10,
    BPF_PROG_TYPE_LWT_OUT = 11,
    BPF_PROG_TYPE_LWT_XMIT = 12,
    BPF_PROG_TYPE_SOCK_OPS = 13,
    BPF_PROG_TYPE_SK_SKB = 14,
    BPF_PROG_TYPE_CGROUP_DEVICE = 15,
    BPF_PROG_TYPE_SK_MSG = 16,
    BPF_PROG_TYPE_RAW_TRACEPOINT = 17,
    BPF_PROG_TYPE_CGROUP_SOCK_ADDR = 18,
    BPF_PROG_TYPE_LWT_SEG6LOCAL = 19,
    BPF_PROG_TYPE_LIRC_MODE2 = 20,
    BPF_PROG_TYPE_SK_REUSEPORT = 21,
    BPF_PROG_TYPE_FLOW_DISSECTOR = 22,
    BPF_PROG_TYPE_CGROUP_SYSCTL = 23,
    BPF_PROG_TYPE_RAW_TRACEPOINT_WRITABLE = 24,
    BPF_PROG_TYPE_CGROUP_SOCKOPT = 25,
    BPF_PROG_TYPE_TRACING = 26
};
#line 169 
enum bpf_attach_type {
    BPF_CGROUP_INET_INGRESS = 0,
    BPF_CGROUP_INET_EGRESS = 1,
    BPF_CGROUP_INET_SOCK_CREATE = 2,
    BPF_CGROUP_SOCK_OPS = 3,
    BPF_SK_SKB_STREAM_PARSER = 4,
    BPF_SK_SKB_STREAM_VERDICT = 5,
    BPF_CGROUP_DEVICE = 6,
    BPF_SK_MSG_VERDICT = 7,
    BPF_CGROUP_INET4_BIND = 8,
    BPF_CGROUP_INET6_BIND = 9,
    BPF_CGROUP_INET4_CONNECT = 10,
    BPF_CGROUP_INET6_CONNECT = 11,
    BPF_CGROUP_INET4_POST_BIND = 12,
    BPF_CGROUP_INET6_POST_BIND = 13,
    BPF_CGROUP_UDP4_SENDMSG = 14,
    BPF_CGROUP_UDP6_SENDMSG = 15,
    BPF_LIRC_MODE2 = 16,
    BPF_FLOW_DISSECTOR = 17,
    BPF_CGROUP_SYSCTL = 18,
    BPF_CGROUP_UDP4_RECVMSG = 19,
    BPF_CGROUP_UDP6_RECVMSG = 20,
    BPF_CGROUP_GETSOCKOPT = 21,
    BPF_CGROUP_SETSOCKOPT = 22,
    BPF_TRACE_RAW_TP = 23,
    BPF_TRACE_FENTRY = 24,
    BPF_TRACE_FEXIT = 25,
    __MAX_BPF_ATTACH_TYPE = 26
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_594 {
   __u32 map_type ;
   __u32 key_size ;
   __u32 value_size ;
   __u32 max_entries ;
   __u32 map_flags ;
   __u32 inner_map_fd ;
   __u32 numa_node ;
   char map_name[16U] ;
   __u32 map_ifindex ;
   __u32 btf_fd ;
   __u32 btf_key_type_id ;
   __u32 btf_value_type_id ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
union __anonunion_596 {
   __u64 value ;
   __u64 next_key ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_595 {
   __u32 map_fd ;
   __u64 key ;
   union __anonunion_596 __anonCompField___anonstruct_595_115 ;
   __u64 flags ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_597 {
   __u32 prog_type ;
   __u32 insn_cnt ;
   __u64 insns ;
   __u64 license ;
   __u32 log_level ;
   __u32 log_size ;
   __u64 log_buf ;
   __u32 kern_version ;
   __u32 prog_flags ;
   char prog_name[16U] ;
   __u32 prog_ifindex ;
   __u32 expected_attach_type ;
   __u32 prog_btf_fd ;
   __u32 func_info_rec_size ;
   __u64 func_info ;
   __u32 func_info_cnt ;
   __u32 line_info_rec_size ;
   __u64 line_info ;
   __u32 line_info_cnt ;
   __u32 attach_btf_id ;
   __u32 attach_prog_fd ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_598 {
   __u64 pathname ;
   __u32 bpf_fd ;
   __u32 file_flags ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_599 {
   __u32 target_fd ;
   __u32 attach_bpf_fd ;
   __u32 attach_type ;
   __u32 attach_flags ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_test_600 {
   __u32 prog_fd ;
   __u32 retval ;
   __u32 data_size_in ;
   __u32 data_size_out ;
   __u64 data_in ;
   __u64 data_out ;
   __u32 repeat ;
   __u32 duration ;
   __u32 ctx_size_in ;
   __u32 ctx_size_out ;
   __u64 ctx_in ;
   __u64 ctx_out ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
union __anonunion_602 {
   __u32 start_id ;
   __u32 prog_id ;
   __u32 map_id ;
   __u32 btf_id ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_601 {
   union __anonunion_602 __anonCompField___anonstruct_601_120 ;
   __u32 next_id ;
   __u32 open_flags ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_info_603 {
   __u32 bpf_fd ;
   __u32 info_len ;
   __u64 info ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_query_604 {
   __u32 target_fd ;
   __u32 attach_type ;
   __u32 query_flags ;
   __u32 attach_flags ;
   __u64 prog_ids ;
   __u32 prog_cnt ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_raw_tracepoint_605 {
   __u64 name ;
   __u32 prog_fd ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_606 {
   __u64 btf ;
   __u64 btf_log_buf ;
   __u32 btf_size ;
   __u32 btf_log_size ;
   __u32 btf_log_level ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_task_fd_query_607 {
   __u32 pid ;
   __u32 fd ;
   __u32 flags ;
   __u32 buf_len ;
   __u64 buf ;
   __u32 prog_id ;
   __u32 fd_type ;
   __u64 probe_offset ;
   __u64 probe_addr ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
union bpf_attr {
   struct __anonstruct_594 __anonCompField_bpf_attr_114 ;
   struct __anonstruct_595 __anonCompField_bpf_attr_116 ;
   struct __anonstruct_597 __anonCompField_bpf_attr_117 ;
   struct __anonstruct_598 __anonCompField_bpf_attr_118 ;
   struct __anonstruct_599 __anonCompField_bpf_attr_119 ;
   struct __anonstruct_test_600 test ;
   struct __anonstruct_601 __anonCompField_bpf_attr_121 ;
   struct __anonstruct_info_603 info ;
   struct __anonstruct_query_604 query ;
   struct __anonstruct_raw_tracepoint_605 raw_tracepoint ;
   struct __anonstruct_606 __anonCompField_bpf_attr_122 ;
   struct __anonstruct_task_fd_query_607 task_fd_query ;
} __attribute__((__aligned__(8)));
#line 3653  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct bpf_func_info {
   __u32 insn_off ;
   __u32 type_id ;
};
#line 3661  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct bpf_line_info {
   __u32 insn_off ;
   __u32 file_name_off ;
   __u32 line_off ;
   __u32 line_col ;
};
#line 40  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rbtree_latch.h"
struct latch_tree_node {
   struct rb_node node[2U] ;
};
#line 215 
struct bpf_prog_aux;
#line 216 
struct bpf_map;
#line 217 
struct btf;
#line 218 
struct btf_type;
#line 37  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_map_ops {
   int (*map_alloc_check)(union bpf_attr *) ;
   struct bpf_map *(*map_alloc)(union bpf_attr *) ;
   void (*map_release)(struct bpf_map *, struct file *) ;
   void (*map_free)(struct bpf_map *) ;
   int (*map_get_next_key)(struct bpf_map *, void *, void *) ;
   void (*map_release_uref)(struct bpf_map *) ;
   void *(*map_lookup_elem_sys_only)(struct bpf_map *, void *) ;
   void *(*map_lookup_elem)(struct bpf_map *, void *) ;
   int (*map_update_elem)(struct bpf_map *, void *, void *, u64 ) ;
   int (*map_delete_elem)(struct bpf_map *, void *) ;
   int (*map_push_elem)(struct bpf_map *, void *, u64 ) ;
   int (*map_pop_elem)(struct bpf_map *, void *) ;
   int (*map_peek_elem)(struct bpf_map *, void *) ;
   void *(*map_fd_get_ptr)(struct bpf_map *, struct file *, int ) ;
   void (*map_fd_put_ptr)(void *) ;
   u32 (*map_gen_lookup)(struct bpf_map *, struct bpf_insn *) ;
   u32 (*map_fd_sys_lookup_elem)(void *) ;
   void (*map_seq_show_elem)(struct bpf_map *, void *, struct seq_file *) ;
   int (*map_check_btf)(struct bpf_map *, struct btf *, struct btf_type *, struct btf_type *) ;
   int (*map_poke_track)(struct bpf_map *, struct bpf_prog_aux *) ;
   void (*map_poke_untrack)(struct bpf_map *, struct bpf_prog_aux *) ;
   void (*map_poke_run)(struct bpf_map *, u32 , struct bpf_prog *, struct bpf_prog *) ;
   int (*map_direct_value_addr)(struct bpf_map *, u64 *, u32 ) ;
   int (*map_direct_value_meta)(struct bpf_map *, u64 , u32 *) ;
   int (*map_mmap)(struct bpf_map *, struct vm_area_struct *) ;
};
#line 82  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_map_memory {
   u32 pages ;
   struct user_struct *user ;
};
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_map {
   struct bpf_map_ops *ops ;
   struct bpf_map *inner_map_meta ;
   void *security ;
   enum bpf_map_type map_type ;
   u32 key_size ;
   u32 value_size ;
   u32 max_entries ;
   u32 map_flags ;
   int spin_lock_off ;
   u32 id ;
   int numa_node ;
   u32 btf_key_type_id ;
   u32 btf_value_type_id ;
   struct btf *btf ;
   struct bpf_map_memory memory ;
   char name[16U] ;
   bool unpriv_array ;
   bool frozen ;
   atomic64_t refcnt ;
   atomic64_t usercnt ;
   struct work_struct work ;
   struct mutex freeze_mutex ;
   u64 writecnt ;
};
#line 151 
struct bpf_offload_dev;
#line 152 
struct bpf_offloaded_map;
#line 156  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_map_dev_ops {
   int (*map_get_next_key)(struct bpf_offloaded_map *, void *, void *) ;
   int (*map_lookup_elem)(struct bpf_offloaded_map *, void *, void *) ;
   int (*map_update_elem)(struct bpf_offloaded_map *, void *, void *, u64 ) ;
   int (*map_delete_elem)(struct bpf_offloaded_map *, void *) ;
};
#line 166  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_offloaded_map {
   struct bpf_map map ;
   struct net_device *netdev ;
   struct bpf_map_dev_ops *dev_ops ;
   void *dev_priv ;
   struct list_head offloads ;
};
#line 327  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_prog_ops {
   int (*test_run)(struct bpf_prog *, union bpf_attr *, union bpf_attr *) ;
};
#line 369  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_prog_offload {
   struct bpf_prog *prog ;
   struct net_device *netdev ;
   struct bpf_offload_dev *offdev ;
   void *dev_priv ;
   struct list_head offloads ;
   bool dev_state ;
   bool opt_failed ;
   void *jited_image ;
   u32 jited_len ;
};
#line 394  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_prog_stats {
   u64 cnt ;
   u64 nsecs ;
   struct u64_stats_sync syncp ;
} __attribute__((__aligned__(16)));
#line 400  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct btf_func_model {
   u8 ret_size ;
   u8 nr_args ;
   u8 arg_size[12U] ;
};
#line 447 
enum bpf_tramp_prog_type {
    BPF_TRAMP_FENTRY = 0,
    BPF_TRAMP_FEXIT = 1,
    BPF_TRAMP_MAX = 2
};
#line 454  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct __anonstruct_func_640 {
   struct btf_func_model model ;
   void *addr ;
   bool ftrace_managed ;
};
#line 454  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_trampoline {
   struct hlist_node hlist ;
   struct mutex mutex ;
   refcount_t refcnt ;
   u64 key ;
   struct __anonstruct_func_640 func ;
   struct hlist_head progs_hlist[2U] ;
   int progs_cnt[2U] ;
   void *image ;
   u64 selector ;
};
#line 495  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_func_info_aux {
   bool unreliable ;
};
#line 504  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct __anonstruct_tail_call_642 {
   struct bpf_map *map ;
   u32 key ;
};
#line 504  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
union __anonunion_641 {
   struct __anonstruct_tail_call_642 tail_call ;
};
#line 504  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_jit_poke_descriptor {
   void *ip ;
   union __anonunion_641 __anonCompField_bpf_jit_poke_descriptor_147 ;
   bool ip_stable ;
   u8 adj_off ;
   u16 reason ;
};
#line 517  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
union __anonunion_643 {
   struct work_struct work ;
   struct callback_head rcu ;
};
#line 517  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_prog_aux {
   atomic64_t refcnt ;
   u32 used_map_cnt ;
   u32 max_ctx_offset ;
   u32 max_pkt_offset ;
   u32 max_tp_access ;
   u32 stack_depth ;
   u32 id ;
   u32 func_cnt ;
   u32 func_idx ;
   u32 attach_btf_id ;
   struct bpf_prog *linked_prog ;
   bool verifier_zext ;
   bool offload_requested ;
   bool attach_btf_trace ;
   bool func_proto_unreliable ;
   enum bpf_tramp_prog_type trampoline_prog_type ;
   struct bpf_trampoline *trampoline ;
   struct hlist_node tramp_hlist ;
   struct btf_type *attach_func_proto ;
   char *attach_func_name ;
   struct bpf_prog **func ;
   void *jit_data ;
   struct bpf_jit_poke_descriptor *poke_tab ;
   u32 size_poke_tab ;
   struct latch_tree_node ksym_tnode ;
   struct list_head ksym_lnode ;
   struct bpf_prog_ops *ops ;
   struct bpf_map **used_maps ;
   struct bpf_prog *prog ;
   struct user_struct *user ;
   u64 load_time ;
   struct bpf_map *cgroup_storage[2U] ;
   char name[16U] ;
   void *security ;
   struct bpf_prog_offload *offload ;
   struct btf *btf ;
   struct bpf_func_info *func_info ;
   struct bpf_func_info_aux *func_info_aux ;
   struct bpf_line_info *linfo ;
   void **jited_linfo ;
   u32 func_info_cnt ;
   u32 nr_linfo ;
   u32 linfo_idx ;
   u32 num_exentries ;
   struct exception_table_entry *extable ;
   struct bpf_prog_stats *stats ;
   union __anonunion_643 __anonCompField_bpf_prog_aux_148 ;
};
#line 686 
struct bpf_cgroup_storage;
#line 686  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_prog_array_item {
   struct bpf_prog *prog ;
   struct bpf_cgroup_storage *cgroup_storage[2U] ;
};
#line 691  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_prog_array {
   struct callback_head rcu ;
   struct bpf_prog_array_item items[0U] ;
};
#line 1335 
struct cgroup;
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf-cgroup.h"
struct bpf_cgroup_storage_map;
#line 37  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf-cgroup.h"
struct bpf_storage_buffer {
   struct callback_head rcu ;
   char data[0U] ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf-cgroup.h"
union __anonunion_645 {
   struct bpf_storage_buffer *buf ;
   void *percpu_buf ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf-cgroup.h"
struct bpf_cgroup_storage {
   union __anonunion_645 __anonCompField_bpf_cgroup_storage_150 ;
   struct bpf_cgroup_storage_map *map ;
   struct bpf_cgroup_storage_key key ;
   struct list_head list ;
   struct rb_node node ;
   struct callback_head rcu ;
};
#line 62  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf-cgroup.h"
struct cgroup_bpf {
   struct bpf_prog_array *effective[26U] ;
   struct list_head progs[26U] ;
   u32 flags[26U] ;
   struct bpf_prog_array *inactive ;
   struct percpu_ref refcnt ;
   struct work_struct release_work ;
};
#line 69  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kthread.h"
struct kthread_work;
#line 86  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kthread.h"
struct kthread_worker {
   unsigned int flags ;
   raw_spinlock_t lock ;
   struct list_head work_list ;
   struct list_head delayed_work_list ;
   struct task_struct *task ;
   struct kthread_work *current_work ;
};
#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kthread.h"
struct kthread_work {
   struct list_head node ;
   void (*func)(struct kthread_work *) ;
   struct kthread_worker *worker ;
   int canceling ;
};
#line 103  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kthread.h"
struct kthread_delayed_work {
   struct kthread_work work ;
   struct timer_list timer ;
};
#line 199 
struct cgroup_subsys_state;
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/psi_types.h"
struct psi_group_cpu {
   seqcount_t seq ;
   unsigned int tasks[3U] ;
   u32 state_mask ;
   u32 times[6U] ;
   u64 state_start ;
   u32 times_prev[2U][6U] ;
};
#line 96 
struct psi_group;
#line 128  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/psi_types.h"
struct psi_group {
   struct mutex avgs_lock ;
   struct psi_group_cpu *pcpu ;
   u64 avg_total[5U] ;
   u64 avg_last_update ;
   u64 avg_next_update ;
   struct delayed_work avgs_work ;
   u64 total[2U][5U] ;
   unsigned long avg[5U][3U] ;
   atomic_t poll_scheduled ;
   struct kthread_worker *poll_kworker ;
   struct kthread_delayed_work poll_work ;
   struct mutex trigger_lock ;
   struct list_head triggers ;
   u32 nr_triggers[5U] ;
   u32 poll_states ;
   u64 poll_min_period ;
   u64 polling_total[5U] ;
   u64 polling_next_update ;
   u64 polling_until ;
};
#line 166 
struct cgroup_root;
#line 167 
struct cgroup_subsys;
#line 168 
struct cgroup_taskset;
#line 119  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup_file {
   struct kernfs_node *kn ;
   unsigned long notified_at ;
   struct timer_list notify_timer ;
};
#line 133  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup_subsys_state {
   struct cgroup *cgroup ;
   struct cgroup_subsys *ss ;
   struct percpu_ref refcnt ;
   struct list_head sibling ;
   struct list_head children ;
   struct list_head rstat_css_node ;
   int id ;
   unsigned int flags ;
   u64 serial_nr ;
   atomic_t online_cnt ;
   struct work_struct destroy_work ;
   struct rcu_work destroy_rwork ;
   struct cgroup_subsys_state *parent ;
};
#line 190  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct css_set {
   struct cgroup_subsys_state *subsys[14U] ;
   refcount_t refcount ;
   struct css_set *dom_cset ;
   struct cgroup *dfl_cgrp ;
   int nr_tasks ;
   struct list_head tasks ;
   struct list_head mg_tasks ;
   struct list_head dying_tasks ;
   struct list_head task_iters ;
   struct list_head e_cset_node[14U] ;
   struct list_head threaded_csets ;
   struct list_head threaded_csets_node ;
   struct hlist_node hlist ;
   struct list_head cgrp_links ;
   struct list_head mg_preload_node ;
   struct list_head mg_node ;
   struct cgroup *mg_src_cgrp ;
   struct cgroup *mg_dst_cgrp ;
   struct css_set *mg_dst_cset ;
   bool dead ;
   struct callback_head callback_head ;
};
#line 279  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup_base_stat {
   struct task_cputime cputime ;
};
#line 303  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup_rstat_cpu {
   struct u64_stats_sync bsync ;
   struct cgroup_base_stat bstat ;
   struct cgroup_base_stat last_bstat ;
   struct cgroup *updated_children ;
   struct cgroup *updated_next ;
};
#line 332  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup_freezer_state {
   bool freeze ;
   int e_freeze ;
   int nr_frozen_descendants ;
   int nr_frozen_tasks ;
};
#line 351  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup {
   struct cgroup_subsys_state self ;
   unsigned long flags ;
   int level ;
   int max_depth ;
   int nr_descendants ;
   int nr_dying_descendants ;
   int max_descendants ;
   int nr_populated_csets ;
   int nr_populated_domain_children ;
   int nr_populated_threaded_children ;
   int nr_threaded_children ;
   struct kernfs_node *kn ;
   struct cgroup_file procs_file ;
   struct cgroup_file events_file ;
   u16 subtree_control ;
   u16 subtree_ss_mask ;
   u16 old_subtree_control ;
   u16 old_subtree_ss_mask ;
   struct cgroup_subsys_state *subsys[14U] ;
   struct cgroup_root *root ;
   struct list_head cset_links ;
   struct list_head e_csets[14U] ;
   struct cgroup *dom_cgrp ;
   struct cgroup *old_dom_cgrp ;
   struct cgroup_rstat_cpu *rstat_cpu ;
   struct list_head rstat_css_list ;
   struct cgroup_base_stat last_bstat ;
   struct cgroup_base_stat bstat ;
   struct prev_cputime prev_cputime ;
   struct list_head pidlists ;
   struct mutex pidlist_mutex ;
   wait_queue_head_t offline_waitq ;
   struct work_struct release_agent_work ;
   struct psi_group psi ;
   struct cgroup_bpf bpf ;
   atomic_t congestion_count ;
   struct cgroup_freezer_state freezer ;
   u64 ancestor_ids[] ;
};
#line 489  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup_root {
   struct kernfs_root *kf_root ;
   unsigned int subsys_mask ;
   int hierarchy_id ;
   struct cgroup cgrp ;
   u64 cgrp_ancestor_id_storage ;
   atomic_t nr_cgrps ;
   struct list_head root_list ;
   unsigned int flags ;
   char release_agent_path[4096U] ;
   char name[64U] ;
};
#line 527  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cftype {
   char name[64U] ;
   unsigned long private ;
   size_t max_write_len ;
   unsigned int flags ;
   unsigned int file_offset ;
   struct cgroup_subsys *ss ;
   struct list_head node ;
   struct kernfs_ops *kf_ops ;
   int (*open)(struct kernfs_open_file *) ;
   void (*release)(struct kernfs_open_file *) ;
   u64 (*read_u64)(struct cgroup_subsys_state *, struct cftype *) ;
   s64 (*read_s64)(struct cgroup_subsys_state *, struct cftype *) ;
   int (*seq_show)(struct seq_file *, void *) ;
   void *(*seq_start)(struct seq_file *, loff_t *) ;
   void *(*seq_next)(struct seq_file *, void *, loff_t *) ;
   void (*seq_stop)(struct seq_file *, void *) ;
   int (*write_u64)(struct cgroup_subsys_state *, struct cftype *, u64 ) ;
   int (*write_s64)(struct cgroup_subsys_state *, struct cftype *, s64 ) ;
   ssize_t (*write)(struct kernfs_open_file *, char *, size_t , loff_t ) ;
   __poll_t (*poll)(struct kernfs_open_file *, struct poll_table_struct *) ;
   struct lock_class_key lockdep_key ;
};
#line 616  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup_subsys {
   struct cgroup_subsys_state *(*css_alloc)(struct cgroup_subsys_state *) ;
   int (*css_online)(struct cgroup_subsys_state *) ;
   void (*css_offline)(struct cgroup_subsys_state *) ;
   void (*css_released)(struct cgroup_subsys_state *) ;
   void (*css_free)(struct cgroup_subsys_state *) ;
   void (*css_reset)(struct cgroup_subsys_state *) ;
   void (*css_rstat_flush)(struct cgroup_subsys_state *, int ) ;
   int (*css_extra_stat_show)(struct seq_file *, struct cgroup_subsys_state *) ;
   int (*can_attach)(struct cgroup_taskset *) ;
   void (*cancel_attach)(struct cgroup_taskset *) ;
   void (*attach)(struct cgroup_taskset *) ;
   void (*post_attach)(void) ;
   int (*can_fork)(struct task_struct *) ;
   void (*cancel_fork)(struct task_struct *) ;
   void (*fork)(struct task_struct *) ;
   void (*exit)(struct task_struct *) ;
   void (*release)(struct task_struct *) ;
   void (*bind)(struct cgroup_subsys_state *) ;
   bool early_init : 1 ;
   bool implicit_on_dfl : 1 ;
   bool threaded : 1 ;
   bool broken_hierarchy : 1 ;
   bool warned_broken_hierarchy : 1 ;
   int id ;
   char *name ;
   char *legacy_name ;
   struct cgroup_root *root ;
   struct idr css_idr ;
   struct list_head cfts ;
   struct cftype *dfl_cftypes ;
   struct cftype *legacy_cftypes ;
   unsigned int depends_on ;
};
#line 783  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct __anonstruct_647 {
   u8 is_data ;
   u8 padding ;
   u16 prioidx ;
   u32 classid ;
} __attribute__((__packed__));
#line 783  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
union __anonunion_646 {
   struct __anonstruct_647 __anonCompField___anonunion_646_151 ;
   u64 val ;
};
#line 783  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct sock_cgroup_data {
   union __anonunion_646 __anonCompField_sock_cgroup_data_152 ;
};
#line 848  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup.h"
struct cgroup_namespace {
   refcount_t count ;
   struct ns_common ns ;
   struct user_namespace *user_ns ;
   struct ucounts *ucounts ;
   struct css_set *root_cset ;
};
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netprio_cgroup.h"
struct netprio_map {
   struct callback_head rcu ;
   u32 priomap_len ;
   u32 priomap[] ;
};
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/xdp.h"
struct xdp_mem_info {
   u32 type ;
   u32 id ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/xdp.h"
struct xdp_rxq_info {
   struct net_device *dev ;
   u32 queue_index ;
   u32 reg_state ;
   struct xdp_mem_info mem ;
} __attribute__((__aligned__(64)));
#line 75  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/xdp.h"
struct xdp_frame {
   void *data ;
   u16 len ;
   u16 headroom ;
   u16 metasize ;
   struct xdp_mem_info mem ;
   struct net_device *dev_rx ;
};
#line 175 
struct netdev_bpf;
#line 160  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/security.h"
struct xfrm_policy;
#line 161 
struct xfrm_state;
#line 178 
struct request_sock;
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/signal.h"
struct sighand_struct {
   spinlock_t siglock ;
   refcount_t count ;
   wait_queue_head_t signalfd_wqh ;
   struct k_sigaction action[64U] ;
};
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/signal.h"
struct pacct_struct {
   int ac_flag ;
   long ac_exitcode ;
   unsigned long ac_mem ;
   u64 ac_utime ;
   u64 ac_stime ;
   unsigned long ac_minflt ;
   unsigned long ac_majflt ;
};
#line 36  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/signal.h"
struct cpu_itimer {
   u64 expires ;
   u64 incr ;
};
#line 45  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/signal.h"
struct task_cputime_atomic {
   atomic64_t utime ;
   atomic64_t stime ;
   atomic64_t sum_exec_runtime ;
};
#line 64  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/signal.h"
struct thread_group_cputimer {
   struct task_cputime_atomic cputime_atomic ;
};
#line 80 
struct tty_struct;
#line 80 
struct autogroup;
#line 80 
struct tty_audit_buf;
#line 80  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/signal.h"
struct signal_struct {
   refcount_t sigcnt ;
   atomic_t live ;
   int nr_threads ;
   struct list_head thread_head ;
   wait_queue_head_t wait_chldexit ;
   struct task_struct *curr_target ;
   struct sigpending shared_pending ;
   struct hlist_head multiprocess ;
   int group_exit_code ;
   int notify_count ;
   struct task_struct *group_exit_task ;
   int group_stop_count ;
   unsigned int flags ;
   unsigned int is_child_subreaper : 1 ;
   unsigned int has_child_subreaper : 1 ;
   int posix_timer_id ;
   struct list_head posix_timers ;
   struct hrtimer real_timer ;
   ktime_t it_real_incr ;
   struct cpu_itimer it[2U] ;
   struct thread_group_cputimer cputimer ;
   struct posix_cputimers posix_cputimers ;
   struct pid *pids[4U] ;
   struct pid *tty_old_pgrp ;
   int leader ;
   struct tty_struct *tty ;
   struct autogroup *autogroup ;
   seqlock_t stats_lock ;
   u64 utime ;
   u64 stime ;
   u64 cutime ;
   u64 cstime ;
   u64 gtime ;
   u64 cgtime ;
   struct prev_cputime prev_cputime ;
   unsigned long nvcsw ;
   unsigned long nivcsw ;
   unsigned long cnvcsw ;
   unsigned long cnivcsw ;
   unsigned long min_flt ;
   unsigned long maj_flt ;
   unsigned long cmin_flt ;
   unsigned long cmaj_flt ;
   unsigned long inblock ;
   unsigned long oublock ;
   unsigned long cinblock ;
   unsigned long coublock ;
   unsigned long maxrss ;
   unsigned long cmaxrss ;
   struct task_io_accounting ioac ;
   unsigned long long sum_sched_runtime ;
   struct rlimit rlim[16U] ;
   struct pacct_struct pacct ;
   struct taskstats *stats ;
   unsigned int audit_tty ;
   struct tty_audit_buf *tty_audit_buf ;
   bool oom_flag_origin ;
   short oom_score_adj ;
   short oom_score_adj_min ;
   struct mm_struct *oom_mm ;
   struct mutex cred_guard_mutex ;
} __attribute__((__designated_init__));
#line 44  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/netlink.h"
struct nlmsghdr {
   __u32 nlmsg_len ;
   __u16 nlmsg_type ;
   __u16 nlmsg_flags ;
   __u32 nlmsg_seq ;
   __u32 nlmsg_pid ;
};
#line 211  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/netlink.h"
struct nlattr {
   __u16 nla_len ;
   __u16 nla_type ;
};
#line 74  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netlink.h"
struct netlink_ext_ack {
   char *_msg ;
   struct nlattr *bad_attr ;
   u8 cookie[20U] ;
   u8 cookie_len ;
};
#line 180  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netlink.h"
union __anonunion_670 {
   u8 ctx[48U] ;
   long args[6U] ;
};
#line 180  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netlink.h"
struct netlink_callback {
   struct sk_buff *skb ;
   struct nlmsghdr *nlh ;
   int (*dump)(struct sk_buff *, struct netlink_callback *) ;
   int (*done)(struct netlink_callback *) ;
   void *data ;
   struct module *module ;
   struct netlink_ext_ack *extack ;
   u16 family ;
   u16 min_dump_alloc ;
   bool strict_check ;
   u16 answer_flags ;
   unsigned int prev_seq ;
   unsigned int seq ;
   union __anonunion_670 __anonCompField_netlink_callback_153 ;
};
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/neighbour.h"
struct ndmsg {
   __u8 ndm_family ;
   __u8 ndm_pad1 ;
   __u16 ndm_pad2 ;
   __s32 ndm_ifindex ;
   __u16 ndm_state ;
   __u8 ndm_flags ;
   __u8 ndm_type ;
};
#line 44  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if_link.h"
struct rtnl_link_stats64 {
   __u64 rx_packets ;
   __u64 tx_packets ;
   __u64 rx_bytes ;
   __u64 tx_bytes ;
   __u64 rx_errors ;
   __u64 tx_errors ;
   __u64 rx_dropped ;
   __u64 tx_dropped ;
   __u64 multicast ;
   __u64 collisions ;
   __u64 rx_length_errors ;
   __u64 rx_over_errors ;
   __u64 rx_crc_errors ;
   __u64 rx_frame_errors ;
   __u64 rx_fifo_errors ;
   __u64 rx_missed_errors ;
   __u64 tx_aborted_errors ;
   __u64 tx_carrier_errors ;
   __u64 tx_fifo_errors ;
   __u64 tx_heartbeat_errors ;
   __u64 tx_window_errors ;
   __u64 rx_compressed ;
   __u64 tx_compressed ;
   __u64 rx_nohandler ;
};
#line 753  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if_link.h"
struct ifla_vf_guid {
   __u32 vf ;
   __u64 guid ;
};
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/if_link.h"
struct ifla_vf_stats {
   __u64 rx_packets ;
   __u64 tx_packets ;
   __u64 rx_bytes ;
   __u64 tx_bytes ;
   __u64 broadcast ;
   __u64 multicast ;
   __u64 rx_dropped ;
   __u64 tx_dropped ;
};
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/if_link.h"
struct ifla_vf_info {
   __u32 vf ;
   __u8 mac[32U] ;
   __u32 vlan ;
   __u32 qos ;
   __u32 spoofchk ;
   __u32 linkstate ;
   __u32 min_tx_rate ;
   __u32 max_tx_rate ;
   __u32 rss_query_en ;
   __u32 trusted ;
   __be16 vlan_proto ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/pkt_sched.h"
struct tc_stats {
   __u64 bytes ;
   __u32 packets ;
   __u32 drops ;
   __u32 overlimits ;
   __u32 bps ;
   __u32 pps ;
   __u32 qlen ;
   __u32 backlog ;
};
#line 102  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/pkt_sched.h"
struct tc_sizespec {
   unsigned char cell_log ;
   unsigned char size_log ;
   short cell_align ;
   int overhead ;
   unsigned int linklayer ;
   unsigned int mpu ;
   unsigned int mtu ;
   unsigned int tsize ;
};
#line 118  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/hashtable.h"
struct netpoll_info;
#line 119 
struct phy_device;
#line 120 
struct dsa_port;
#line 121 
struct sfp_bus;
#line 122 
struct wireless_dev;
#line 123 
struct wpan_dev;
#line 124 
struct mpls_dev;
#line 125 
struct udp_tunnel_info;
#line 69  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
enum netdev_tx {
    __NETDEV_TX_MIN = -2147483648,
    NETDEV_TX_OK = 0,
    NETDEV_TX_BUSY = 16
};
#line 75  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
typedef enum netdev_tx netdev_tx_t;
#line 161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct net_device_stats {
   unsigned long rx_packets ;
   unsigned long tx_packets ;
   unsigned long rx_bytes ;
   unsigned long tx_bytes ;
   unsigned long rx_errors ;
   unsigned long tx_errors ;
   unsigned long rx_dropped ;
   unsigned long tx_dropped ;
   unsigned long multicast ;
   unsigned long collisions ;
   unsigned long rx_length_errors ;
   unsigned long rx_over_errors ;
   unsigned long rx_crc_errors ;
   unsigned long rx_frame_errors ;
   unsigned long rx_fifo_errors ;
   unsigned long rx_missed_errors ;
   unsigned long tx_aborted_errors ;
   unsigned long tx_carrier_errors ;
   unsigned long tx_fifo_errors ;
   unsigned long tx_heartbeat_errors ;
   unsigned long tx_window_errors ;
   unsigned long rx_compressed ;
   unsigned long tx_compressed ;
};
#line 195 
struct neigh_parms;
#line 217  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_hw_addr_list {
   struct list_head list ;
   int count ;
};
#line 237  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct hh_cache {
   unsigned int hh_len ;
   seqlock_t hh_lock ;
   unsigned long hh_data[16U] ;
};
#line 263  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct header_ops {
   int (*create)(struct sk_buff *, struct net_device *, unsigned short , void *, void *, unsigned int ) ;
   int (*parse)(struct sk_buff *, unsigned char *) ;
   int (*cache)(struct neighbour *, struct hh_cache *, __be16 ) ;
   void (*cache_update)(struct hh_cache *, struct net_device *, unsigned char *) ;
   bool (*validate)(char *, unsigned int ) ;
   __be16 (*parse_protocol)(struct sk_buff *) ;
};
#line 372 
enum rx_handler_result {
    RX_HANDLER_CONSUMED = 0,
    RX_HANDLER_ANOTHER = 1,
    RX_HANDLER_EXACT = 2,
    RX_HANDLER_PASS = 3
};
#line 379  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
typedef enum rx_handler_result rx_handler_result_t;
#line 421  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
typedef rx_handler_result_t rx_handler_func_t(struct sk_buff **);
#line 589 
struct Qdisc;
#line 589 
struct xdp_umem;
#line 589  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_queue {
   struct net_device *dev ;
   struct Qdisc *qdisc ;
   struct Qdisc *qdisc_sleeping ;
   struct kobject kobj ;
   int numa_node ;
   unsigned long tx_maxrate ;
   unsigned long trans_timeout ;
   struct net_device *sb_dev ;
   struct xdp_umem *umem ;
   spinlock_t _xmit_lock ;
   int xmit_lock_owner ;
   unsigned long trans_start ;
   unsigned long state ;
   struct dql dql ;
} __attribute__((__aligned__(64)));
#line 662  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct rps_map {
   unsigned int len ;
   struct callback_head rcu ;
   u16 cpus[0U] ;
};
#line 674  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct rps_dev_flow {
   u16 cpu ;
   u16 filter ;
   unsigned int last_qtail ;
};
#line 684  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct rps_dev_flow_table {
   unsigned int mask ;
   struct callback_head rcu ;
   struct rps_dev_flow flows[0U] ;
};
#line 736  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_rx_queue {
   struct rps_map *rps_map ;
   struct rps_dev_flow_table *rps_flow_table ;
   struct kobject kobj ;
   struct net_device *dev ;
   struct xdp_rxq_info xdp_rxq ;
   struct xdp_umem *umem ;
} __attribute__((__aligned__(64)));
#line 764  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct xps_map {
   unsigned int len ;
   unsigned int alloc_len ;
   struct callback_head rcu ;
   u16 queues[0U] ;
};
#line 777  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct xps_dev_maps {
   struct callback_head rcu ;
   struct xps_map *attr_map[0U] ;
};
#line 793  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_tc_txq {
   u16 count ;
   u16 offset ;
};
#line 803  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_fcoe_hbainfo {
   char manufacturer[64U] ;
   char serial_number[64U] ;
   char hardware_version[64U] ;
   char driver_version[64U] ;
   char optionrom_version[64U] ;
   char firmware_version[64U] ;
   char model[256U] ;
   char model_description[256U] ;
};
#line 820  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_phys_item_id {
   unsigned char id[32U] ;
   unsigned char id_len ;
};
#line 833 
enum tc_setup_type {
    TC_SETUP_QDISC_MQPRIO = 0,
    TC_SETUP_CLSU32 = 1,
    TC_SETUP_CLSFLOWER = 2,
    TC_SETUP_CLSMATCHALL = 3,
    TC_SETUP_CLSBPF = 4,
    TC_SETUP_BLOCK = 5,
    TC_SETUP_QDISC_CBS = 6,
    TC_SETUP_QDISC_RED = 7,
    TC_SETUP_QDISC_PRIO = 8,
    TC_SETUP_QDISC_MQ = 9,
    TC_SETUP_QDISC_ETF = 10,
    TC_SETUP_ROOT_QDISC = 11,
    TC_SETUP_QDISC_GRED = 12,
    TC_SETUP_QDISC_TAPRIO = 13,
    TC_SETUP_FT = 14
};
#line 851 
enum bpf_netdev_command {
    XDP_SETUP_PROG = 0,
    XDP_SETUP_PROG_HW = 1,
    XDP_QUERY_PROG = 2,
    XDP_QUERY_PROG_HW = 3,
    BPF_OFFLOAD_MAP_ALLOC = 4,
    BPF_OFFLOAD_MAP_FREE = 5,
    XDP_SETUP_XSK_UMEM = 6
};
#line 879  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct __anonstruct_675 {
   u32 flags ;
   struct bpf_prog *prog ;
   struct netlink_ext_ack *extack ;
};
#line 879  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct __anonstruct_676 {
   u32 prog_id ;
   u32 prog_flags ;
};
#line 879  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct __anonstruct_677 {
   struct bpf_offloaded_map *offmap ;
};
#line 879  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct __anonstruct_xsk_678 {
   struct xdp_umem *umem ;
   u16 queue_id ;
};
#line 879  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
union __anonunion_674 {
   struct __anonstruct_675 __anonCompField___anonunion_674_155 ;
   struct __anonstruct_676 __anonCompField___anonunion_674_156 ;
   struct __anonstruct_677 __anonCompField___anonunion_674_157 ;
   struct __anonstruct_xsk_678 xsk ;
};
#line 879  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_bpf {
   enum bpf_netdev_command command ;
   union __anonunion_674 __anonCompField_netdev_bpf_158 ;
};
#line 911  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct xfrmdev_ops {
   int (*xdo_dev_state_add)(struct xfrm_state *) ;
   void (*xdo_dev_state_delete)(struct xfrm_state *) ;
   void (*xdo_dev_state_free)(struct xfrm_state *) ;
   bool (*xdo_dev_offload_ok)(struct sk_buff *, struct xfrm_state *) ;
   void (*xdo_dev_state_advance_esn)(struct xfrm_state *) ;
};
#line 921  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct dev_ifalias {
   struct callback_head rcuhead ;
   char ifalias[] ;
};
#line 926 
struct tlsdev_ops;
#line 929  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_name_node {
   struct hlist_node hlist ;
   struct list_head list ;
   struct net_device *dev ;
   char *name ;
};
#line 1257 
struct devlink_port;
#line 1257  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct net_device_ops {
   int (*ndo_init)(struct net_device *) ;
   void (*ndo_uninit)(struct net_device *) ;
   int (*ndo_open)(struct net_device *) ;
   int (*ndo_stop)(struct net_device *) ;
   netdev_tx_t (*ndo_start_xmit)(struct sk_buff *, struct net_device *) ;
   netdev_features_t (*ndo_features_check)(struct sk_buff *, struct net_device *, netdev_features_t ) ;
   u16 (*ndo_select_queue)(struct net_device *, struct sk_buff *, struct net_device *) ;
   void (*ndo_change_rx_flags)(struct net_device *, int ) ;
   void (*ndo_set_rx_mode)(struct net_device *) ;
   int (*ndo_set_mac_address)(struct net_device *, void *) ;
   int (*ndo_validate_addr)(struct net_device *) ;
   int (*ndo_do_ioctl)(struct net_device *, struct ifreq *, int ) ;
   int (*ndo_set_config)(struct net_device *, struct ifmap *) ;
   int (*ndo_change_mtu)(struct net_device *, int ) ;
   int (*ndo_neigh_setup)(struct net_device *, struct neigh_parms *) ;
   void (*ndo_tx_timeout)(struct net_device *) ;
   void (*ndo_get_stats64)(struct net_device *, struct rtnl_link_stats64 *) ;
   bool (*ndo_has_offload_stats)(struct net_device *, int ) ;
   int (*ndo_get_offload_stats)(int , struct net_device *, void *) ;
   struct net_device_stats *(*ndo_get_stats)(struct net_device *) ;
   int (*ndo_vlan_rx_add_vid)(struct net_device *, __be16 , u16 ) ;
   int (*ndo_vlan_rx_kill_vid)(struct net_device *, __be16 , u16 ) ;
   void (*ndo_poll_controller)(struct net_device *) ;
   int (*ndo_netpoll_setup)(struct net_device *, struct netpoll_info *) ;
   void (*ndo_netpoll_cleanup)(struct net_device *) ;
   int (*ndo_set_vf_mac)(struct net_device *, int , u8 *) ;
   int (*ndo_set_vf_vlan)(struct net_device *, int , u16 , u8 , __be16 ) ;
   int (*ndo_set_vf_rate)(struct net_device *, int , int , int ) ;
   int (*ndo_set_vf_spoofchk)(struct net_device *, int , bool ) ;
   int (*ndo_set_vf_trust)(struct net_device *, int , bool ) ;
   int (*ndo_get_vf_config)(struct net_device *, int , struct ifla_vf_info *) ;
   int (*ndo_set_vf_link_state)(struct net_device *, int , int ) ;
   int (*ndo_get_vf_stats)(struct net_device *, int , struct ifla_vf_stats *) ;
   int (*ndo_set_vf_port)(struct net_device *, int , struct nlattr **) ;
   int (*ndo_get_vf_port)(struct net_device *, int , struct sk_buff *) ;
   int (*ndo_get_vf_guid)(struct net_device *, int , struct ifla_vf_guid *, struct ifla_vf_guid *) ;
   int (*ndo_set_vf_guid)(struct net_device *, int , u64 , int ) ;
   int (*ndo_set_vf_rss_query_en)(struct net_device *, int , bool ) ;
   int (*ndo_setup_tc)(struct net_device *, enum tc_setup_type , void *) ;
   int (*ndo_fcoe_enable)(struct net_device *) ;
   int (*ndo_fcoe_disable)(struct net_device *) ;
   int (*ndo_fcoe_ddp_setup)(struct net_device *, u16 , struct scatterlist *, unsigned int ) ;
   int (*ndo_fcoe_ddp_done)(struct net_device *, u16 ) ;
   int (*ndo_fcoe_ddp_target)(struct net_device *, u16 , struct scatterlist *, unsigned int ) ;
   int (*ndo_fcoe_get_hbainfo)(struct net_device *, struct netdev_fcoe_hbainfo *) ;
   int (*ndo_fcoe_get_wwn)(struct net_device *, u64 *, int ) ;
   int (*ndo_rx_flow_steer)(struct net_device *, struct sk_buff *, u16 , u32 ) ;
   int (*ndo_add_slave)(struct net_device *, struct net_device *, struct netlink_ext_ack *) ;
   int (*ndo_del_slave)(struct net_device *, struct net_device *) ;
   netdev_features_t (*ndo_fix_features)(struct net_device *, netdev_features_t ) ;
   int (*ndo_set_features)(struct net_device *, netdev_features_t ) ;
   int (*ndo_neigh_construct)(struct net_device *, struct neighbour *) ;
   void (*ndo_neigh_destroy)(struct net_device *, struct neighbour *) ;
   int (*ndo_fdb_add)(struct ndmsg *, struct nlattr **, struct net_device *, unsigned char *, u16 , u16 , struct netlink_ext_ack *) ;
   int (*ndo_fdb_del)(struct ndmsg *, struct nlattr **, struct net_device *, unsigned char *, u16 ) ;
   int (*ndo_fdb_dump)(struct sk_buff *, struct netlink_callback *, struct net_device *, struct net_device *, int *) ;
   int (*ndo_fdb_get)(struct sk_buff *, struct nlattr **, struct net_device *, unsigned char *, u16 , u32 , u32 , struct netlink_ext_ack *) ;
   int (*ndo_bridge_setlink)(struct net_device *, struct nlmsghdr *, u16 , struct netlink_ext_ack *) ;
   int (*ndo_bridge_getlink)(struct sk_buff *, u32 , u32 , struct net_device *, u32 , int ) ;
   int (*ndo_bridge_dellink)(struct net_device *, struct nlmsghdr *, u16 ) ;
   int (*ndo_change_carrier)(struct net_device *, bool ) ;
   int (*ndo_get_phys_port_id)(struct net_device *, struct netdev_phys_item_id *) ;
   int (*ndo_get_port_parent_id)(struct net_device *, struct netdev_phys_item_id *) ;
   int (*ndo_get_phys_port_name)(struct net_device *, char *, size_t ) ;
   void (*ndo_udp_tunnel_add)(struct net_device *, struct udp_tunnel_info *) ;
   void (*ndo_udp_tunnel_del)(struct net_device *, struct udp_tunnel_info *) ;
   void *(*ndo_dfwd_add_station)(struct net_device *, struct net_device *) ;
   void (*ndo_dfwd_del_station)(struct net_device *, void *) ;
   int (*ndo_set_tx_maxrate)(struct net_device *, int , u32 ) ;
   int (*ndo_get_iflink)(struct net_device *) ;
   int (*ndo_change_proto_down)(struct net_device *, bool ) ;
   int (*ndo_fill_metadata_dst)(struct net_device *, struct sk_buff *) ;
   void (*ndo_set_rx_headroom)(struct net_device *, int ) ;
   int (*ndo_bpf)(struct net_device *, struct netdev_bpf *) ;
   int (*ndo_xdp_xmit)(struct net_device *, int , struct xdp_frame **, u32 ) ;
   int (*ndo_xsk_wakeup)(struct net_device *, u32 , u32 ) ;
   struct devlink_port *(*ndo_get_devlink_port)(struct net_device *) ;
};
#line 1492 
enum ldv_14504 {
    NETREG_UNINITIALIZED = 0,
    NETREG_REGISTERED = 1,
    NETREG_UNREGISTERING = 2,
    NETREG_UNREGISTERED = 3,
    NETREG_RELEASED = 4,
    NETREG_DUMMY = 5
};
#line 1501 
enum ldv_14505 {
    RTNL_LINK_INITIALIZED = 0,
    RTNL_LINK_INITIALIZING = 1
};
#line 1795  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct __anonstruct_adj_list_679 {
   struct list_head upper ;
   struct list_head lower ;
};
#line 1795 
struct iw_handler_def;
#line 1795 
struct iw_public_data;
#line 1795 
struct l3mdev_ops;
#line 1795 
struct ndisc_ops;
#line 1795 
struct vlan_info;
#line 1795 
struct tipc_bearer;
#line 1795 
struct in_device;
#line 1795 
struct dn_dev;
#line 1795 
struct inet6_dev;
#line 1795 
struct mini_Qdisc;
#line 1795 
struct cpu_rmap;
#line 1795 
struct pcpu_lstats;
#line 1795 
struct pcpu_sw_netstats;
#line 1795 
struct pcpu_dstats;
#line 1795  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
union __anonunion_680 {
   void *ml_priv ;
   struct pcpu_lstats *lstats ;
   struct pcpu_sw_netstats *tstats ;
   struct pcpu_dstats *dstats ;
};
#line 1795 
struct garp_port;
#line 1795 
struct mrp_port;
#line 1795 
struct rtnl_link_ops;
#line 1795  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct net_device {
   char name[16U] ;
   struct netdev_name_node *name_node ;
   struct dev_ifalias *ifalias ;
   unsigned long mem_end ;
   unsigned long mem_start ;
   unsigned long base_addr ;
   int irq ;
   unsigned long state ;
   struct list_head dev_list ;
   struct list_head napi_list ;
   struct list_head unreg_list ;
   struct list_head close_list ;
   struct list_head ptype_all ;
   struct list_head ptype_specific ;
   struct __anonstruct_adj_list_679 adj_list ;
   netdev_features_t features ;
   netdev_features_t hw_features ;
   netdev_features_t wanted_features ;
   netdev_features_t vlan_features ;
   netdev_features_t hw_enc_features ;
   netdev_features_t mpls_features ;
   netdev_features_t gso_partial_features ;
   int ifindex ;
   int group ;
   struct net_device_stats stats ;
   atomic_long_t rx_dropped ;
   atomic_long_t tx_dropped ;
   atomic_long_t rx_nohandler ;
   atomic_t carrier_up_count ;
   atomic_t carrier_down_count ;
   struct iw_handler_def *wireless_handlers ;
   struct iw_public_data *wireless_data ;
   struct net_device_ops *netdev_ops ;
   struct ethtool_ops *ethtool_ops ;
   struct l3mdev_ops *l3mdev_ops ;
   struct ndisc_ops *ndisc_ops ;
   struct xfrmdev_ops *xfrmdev_ops ;
   struct tlsdev_ops *tlsdev_ops ;
   struct header_ops *header_ops ;
   unsigned int flags ;
   unsigned int priv_flags ;
   unsigned short gflags ;
   unsigned short padded ;
   unsigned char operstate ;
   unsigned char link_mode ;
   unsigned char if_port ;
   unsigned char dma ;
   unsigned int mtu ;
   unsigned int min_mtu ;
   unsigned int max_mtu ;
   unsigned short type ;
   unsigned short hard_header_len ;
   unsigned char min_header_len ;
   unsigned short needed_headroom ;
   unsigned short needed_tailroom ;
   unsigned char perm_addr[32U] ;
   unsigned char addr_assign_type ;
   unsigned char addr_len ;
   unsigned char upper_level ;
   unsigned char lower_level ;
   unsigned short neigh_priv_len ;
   unsigned short dev_id ;
   unsigned short dev_port ;
   spinlock_t addr_list_lock ;
   unsigned char name_assign_type ;
   bool uc_promisc ;
   struct netdev_hw_addr_list uc ;
   struct netdev_hw_addr_list mc ;
   struct netdev_hw_addr_list dev_addrs ;
   struct kset *queues_kset ;
   unsigned int promiscuity ;
   unsigned int allmulti ;
   struct vlan_info *vlan_info ;
   struct dsa_port *dsa_ptr ;
   struct tipc_bearer *tipc_ptr ;
   void *atalk_ptr ;
   struct in_device *ip_ptr ;
   struct dn_dev *dn_ptr ;
   struct inet6_dev *ip6_ptr ;
   void *ax25_ptr ;
   struct wireless_dev *ieee80211_ptr ;
   struct wpan_dev *ieee802154_ptr ;
   struct mpls_dev *mpls_ptr ;
   unsigned char *dev_addr ;
   struct netdev_rx_queue *_rx ;
   unsigned int num_rx_queues ;
   unsigned int real_num_rx_queues ;
   struct bpf_prog *xdp_prog ;
   unsigned long gro_flush_timeout ;
   rx_handler_func_t *rx_handler ;
   void *rx_handler_data ;
   struct mini_Qdisc *miniq_ingress ;
   struct netdev_queue *ingress_queue ;
   struct nf_hook_entries *nf_hooks_ingress ;
   unsigned char broadcast[32U] ;
   struct cpu_rmap *rx_cpu_rmap ;
   struct hlist_node index_hlist ;
   struct netdev_queue *_tx ;
   unsigned int num_tx_queues ;
   unsigned int real_num_tx_queues ;
   struct Qdisc *qdisc ;
   struct hlist_head qdisc_hash[16U] ;
   unsigned int tx_queue_len ;
   spinlock_t tx_global_lock ;
   int watchdog_timeo ;
   struct xps_dev_maps *xps_cpus_map ;
   struct xps_dev_maps *xps_rxqs_map ;
   struct mini_Qdisc *miniq_egress ;
   struct timer_list watchdog_timer ;
   int *pcpu_refcnt ;
   struct list_head todo_list ;
   struct list_head link_watch_list ;
   enum ldv_14504 reg_state : 8 ;
   bool dismantle ;
   enum ldv_14505 rtnl_link_state : 16 ;
   bool needs_free_netdev ;
   void (*priv_destructor)(struct net_device *) ;
   struct netpoll_info *npinfo ;
   possible_net_t nd_net ;
   union __anonunion_680 __anonCompField_net_device_159 ;
   struct garp_port *garp_port ;
   struct mrp_port *mrp_port ;
   struct device dev ;
   struct attribute_group *sysfs_groups[4U] ;
   struct attribute_group *sysfs_rx_queue_group ;
   struct rtnl_link_ops *rtnl_link_ops ;
   unsigned int gso_max_size ;
   u16 gso_max_segs ;
   struct dcbnl_rtnl_ops *dcbnl_ops ;
   s16 num_tc ;
   struct netdev_tc_txq tc_to_txq[16U] ;
   u8 prio_tc_map[16U] ;
   unsigned int fcoe_ddp_xid ;
   struct netprio_map *priomap ;
   struct phy_device *phydev ;
   struct sfp_bus *sfp_bus ;
   struct lock_class_key qdisc_tx_busylock_key ;
   struct lock_class_key qdisc_running_key ;
   struct lock_class_key qdisc_xmit_lock_key ;
   struct lock_class_key addr_list_lock_key ;
   bool proto_down ;
   unsigned int wol_enabled : 1 ;
};
#line 2400  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct pcpu_sw_netstats {
   u64 rx_packets ;
   u64 rx_bytes ;
   u64 tx_packets ;
   u64 tx_bytes ;
   struct u64_stats_sync syncp ;
} __attribute__((__aligned__(32)));
#line 2408  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct pcpu_lstats {
   u64_stats_t packets ;
   u64_stats_t bytes ;
   struct u64_stats_sync syncp ;
} __attribute__((__aligned__(16)));
#line 1227  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ieee80211.h"
struct ieee80211_p2p_noa_desc {
   u8 count ;
   __le32 duration ;
   __le32 interval ;
   __le32 start_time ;
} __attribute__((__packed__));
#line 1234  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ieee80211.h"
struct ieee80211_p2p_noa_attr {
   u8 index ;
   u8 oppps_ctwindow ;
   struct ieee80211_p2p_noa_desc desc[4U] ;
} __attribute__((__packed__));
#line 1276  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ieee80211.h"
struct ieee80211_mcs_info {
   u8 rx_mask[10U] ;
   __le16 rx_highest ;
   u8 tx_params ;
   u8 reserved[3U] ;
} __attribute__((__packed__));
#line 1310  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ieee80211.h"
struct ieee80211_ht_cap {
   __le16 cap_info ;
   u8 ampdu_params_info ;
   struct ieee80211_mcs_info mcs ;
   __le16 extended_ht_cap_info ;
   __le32 tx_BF_cap_info ;
   u8 antenna_selection_info ;
} __attribute__((__packed__));
#line 1483  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ieee80211.h"
struct ieee80211_vht_mcs_info {
   __le16 rx_mcs_map ;
   __le16 rx_highest ;
   __le16 tx_mcs_map ;
   __le16 tx_highest ;
} __attribute__((__packed__));
#line 1526  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ieee80211.h"
struct ieee80211_vht_cap {
   __le32 vht_cap_info ;
   struct ieee80211_vht_mcs_info supp_mcs ;
} __attribute__((__packed__));
#line 1569  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ieee80211.h"
struct ieee80211_he_cap_elem {
   u8 mac_cap_info[6U] ;
   u8 phy_cap_info[11U] ;
} __attribute__((__packed__));
#line 1616  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ieee80211.h"
struct ieee80211_he_mcs_nss_supp {
   __le16 rx_mcs_80 ;
   __le16 tx_mcs_80 ;
   __le16 rx_mcs_160 ;
   __le16 tx_mcs_160 ;
   __le16 rx_mcs_80p80 ;
   __le16 tx_mcs_80p80 ;
} __attribute__((__packed__));
#line 1631  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ieee80211.h"
struct ieee80211_he_operation {
   __le32 he_oper_params ;
   __le16 he_mcs_nss_set ;
   u8 optional[0U] ;
} __attribute__((__packed__));
#line 811  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/debugfs.h"
enum nl80211_iftype {
    NL80211_IFTYPE_UNSPECIFIED = 0,
    NL80211_IFTYPE_ADHOC = 1,
    NL80211_IFTYPE_STATION = 2,
    NL80211_IFTYPE_AP = 3,
    NL80211_IFTYPE_AP_VLAN = 4,
    NL80211_IFTYPE_WDS = 5,
    NL80211_IFTYPE_MONITOR = 6,
    NL80211_IFTYPE_MESH_POINT = 7,
    NL80211_IFTYPE_P2P_CLIENT = 8,
    NL80211_IFTYPE_P2P_GO = 9,
    NL80211_IFTYPE_P2P_DEVICE = 10,
    NL80211_IFTYPE_OCB = 11,
    NL80211_IFTYPE_NAN = 12,
    NUM_NL80211_IFTYPES = 13,
    NL80211_IFTYPE_MAX = 12
};
#line 3263  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/nl80211.h"
enum nl80211_reg_initiator {
    NL80211_REGDOM_SET_BY_CORE = 0,
    NL80211_REGDOM_SET_BY_USER = 1,
    NL80211_REGDOM_SET_BY_DRIVER = 2,
    NL80211_REGDOM_SET_BY_COUNTRY_IE = 3
};
#line 3320 
enum nl80211_dfs_regions {
    NL80211_DFS_UNSET = 0,
    NL80211_DFS_FCC = 1,
    NL80211_DFS_ETSI = 2,
    NL80211_DFS_JP = 3
};
#line 3327 
enum nl80211_user_reg_hint_type {
    NL80211_USER_REG_HINT_USER = 0,
    NL80211_USER_REG_HINT_CELL_BASE = 1,
    NL80211_USER_REG_HINT_INDOOR = 2
};
#line 3446 
enum nl80211_key_mode {
    NL80211_KEY_RX_TX = 0,
    NL80211_KEY_NO_TX = 1,
    NL80211_KEY_SET_TX = 2
};
#line 3452 
enum nl80211_chan_width {
    NL80211_CHAN_WIDTH_20_NOHT = 0,
    NL80211_CHAN_WIDTH_20 = 1,
    NL80211_CHAN_WIDTH_40 = 2,
    NL80211_CHAN_WIDTH_80 = 3,
    NL80211_CHAN_WIDTH_80P80 = 4,
    NL80211_CHAN_WIDTH_160 = 5,
    NL80211_CHAN_WIDTH_5 = 6,
    NL80211_CHAN_WIDTH_10 = 7
};
#line 3463 
enum nl80211_bss_scan_width {
    NL80211_BSS_CHAN_WIDTH_20 = 0,
    NL80211_BSS_CHAN_WIDTH_10 = 1,
    NL80211_BSS_CHAN_WIDTH_5 = 2
};
#line 3500 
enum nl80211_auth_type {
    NL80211_AUTHTYPE_OPEN_SYSTEM = 0,
    NL80211_AUTHTYPE_SHARED_KEY = 1,
    NL80211_AUTHTYPE_FT = 2,
    NL80211_AUTHTYPE_NETWORK_EAP = 3,
    NL80211_AUTHTYPE_SAE = 4,
    NL80211_AUTHTYPE_FILS_SK = 5,
    NL80211_AUTHTYPE_FILS_SK_PFS = 6,
    NL80211_AUTHTYPE_FILS_PK = 7,
    __NL80211_AUTHTYPE_NUM = 8,
    NL80211_AUTHTYPE_MAX = 7,
    NL80211_AUTHTYPE_AUTOMATIC = 8
};
#line 3521 
enum nl80211_mfp {
    NL80211_MFP_NO = 0,
    NL80211_MFP_REQUIRED = 1,
    NL80211_MFP_OPTIONAL = 2
};
#line 4599 
enum nl80211_band {
    NL80211_BAND_2GHZ = 0,
    NL80211_BAND_5GHZ = 1,
    NL80211_BAND_60GHZ = 2,
    NL80211_BAND_6GHZ = 3,
    NUM_NL80211_BANDS = 4
};
#line 4633 
enum nl80211_tx_power_setting {
    NL80211_TX_POWER_AUTOMATIC = 0,
    NL80211_TX_POWER_LIMITED = 1,
    NL80211_TX_POWER_FIXED = 2
};
#line 4914  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/nl80211.h"
struct nl80211_wowlan_tcp_data_seq {
   __u32 start ;
   __u32 offset ;
   __u32 len ;
};
#line 4925  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/nl80211.h"
struct nl80211_wowlan_tcp_data_token {
   __u32 offset ;
   __u32 len ;
   __u8 token_stream[] ;
};
#line 4936  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/nl80211.h"
struct nl80211_wowlan_tcp_data_token_feature {
   __u32 min_len ;
   __u32 max_len ;
   __u32 bufsize ;
};
#line 5237 
enum nl80211_dfs_state {
    NL80211_DFS_USABLE = 0,
    NL80211_DFS_UNAVAILABLE = 1,
    NL80211_DFS_AVAILABLE = 2
};
#line 5847  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/nl80211.h"
struct nl80211_vendor_cmd_info {
   __u32 vendor_id ;
   __u32 subcmd ;
};
#line 5903 
enum nl80211_bss_select_attr {
    __NL80211_BSS_SELECT_ATTR_INVALID = 0,
    NL80211_BSS_SELECT_ATTR_RSSI = 1,
    NL80211_BSS_SELECT_ATTR_BAND_PREF = 2,
    NL80211_BSS_SELECT_ATTR_RSSI_ADJUST = 3,
    __NL80211_BSS_SELECT_ATTR_AFTER_LAST = 4,
    NL80211_BSS_SELECT_ATTR_MAX = 3
};
#line 6138 
enum environment_cap {
    ENVIRON_ANY = 0,
    ENVIRON_INDOOR = 1,
    ENVIRON_OUTDOOR = 2
};
#line 77  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/regulatory.h"
struct regulatory_request {
   struct callback_head callback_head ;
   int wiphy_idx ;
   enum nl80211_reg_initiator initiator ;
   enum nl80211_user_reg_hint_type user_reg_hint_type ;
   char alpha2[3U] ;
   enum nl80211_dfs_regions dfs_region ;
   bool intersect ;
   bool processed ;
   enum environment_cap country_ie_env ;
   struct list_head list ;
};
#line 181  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/regulatory.h"
struct ieee80211_freq_range {
   u32 start_freq_khz ;
   u32 end_freq_khz ;
   u32 max_bandwidth_khz ;
};
#line 187  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/regulatory.h"
struct ieee80211_power_rule {
   u32 max_antenna_gain ;
   u32 max_eirp ;
};
#line 205  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/regulatory.h"
struct ieee80211_wmm_ac {
   u16 cw_min ;
   u16 cw_max ;
   u16 cot ;
   u8 aifsn ;
};
#line 212  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/regulatory.h"
struct ieee80211_wmm_rule {
   struct ieee80211_wmm_ac client[4U] ;
   struct ieee80211_wmm_ac ap[4U] ;
};
#line 217  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/regulatory.h"
struct ieee80211_reg_rule {
   struct ieee80211_freq_range freq_range ;
   struct ieee80211_power_rule power_rule ;
   struct ieee80211_wmm_rule wmm_rule ;
   u32 flags ;
   u32 dfs_cac_ms ;
   bool has_wmm ;
};
#line 226  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/regulatory.h"
struct ieee80211_regdomain {
   struct callback_head callback_head ;
   u32 n_reg_rules ;
   char alpha2[3U] ;
   enum nl80211_dfs_regions dfs_region ;
   struct ieee80211_reg_rule reg_rules[] ;
};
#line 233 
struct wiphy;
#line 147  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct ieee80211_channel {
   enum nl80211_band band ;
   u32 center_freq ;
   u16 hw_value ;
   u32 flags ;
   int max_antenna_gain ;
   int max_power ;
   int max_reg_power ;
   bool beacon_found ;
   u32 orig_flags ;
   int orig_mag ;
   int orig_mpwr ;
   enum nl80211_dfs_state dfs_state ;
   unsigned long dfs_state_entered ;
   unsigned int dfs_cac_ms ;
};
#line 172 
enum ieee80211_bss_type {
    IEEE80211_BSS_TYPE_ESS = 0,
    IEEE80211_BSS_TYPE_PBSS = 1,
    IEEE80211_BSS_TYPE_IBSS = 2,
    IEEE80211_BSS_TYPE_MBSS = 3,
    IEEE80211_BSS_TYPE_ANY = 4
};
#line 243  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct ieee80211_rate {
   u32 flags ;
   u16 bitrate ;
   u16 hw_value ;
   u16 hw_value_short ;
};
#line 256  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct ieee80211_he_obss_pd {
   bool enable ;
   u8 min_offset ;
   u8 max_offset ;
};
#line 274  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct ieee80211_sta_ht_cap {
   u16 cap ;
   bool ht_supported ;
   u8 ampdu_factor ;
   u8 ampdu_density ;
   struct ieee80211_mcs_info mcs ;
};
#line 292  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct ieee80211_sta_vht_cap {
   bool vht_supported ;
   u32 cap ;
   struct ieee80211_vht_mcs_info vht_mcs ;
};
#line 311  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct ieee80211_sta_he_cap {
   bool has_he ;
   struct ieee80211_he_cap_elem he_cap_elem ;
   struct ieee80211_he_mcs_nss_supp he_mcs_nss_supp ;
   u8 ppe_thres[25U] ;
};
#line 328  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct ieee80211_sband_iftype_data {
   u16 types_mask ;
   struct ieee80211_sta_he_cap he_cap ;
};
#line 332 
enum ieee80211_edmg_bw_config {
    IEEE80211_EDMG_BW_CONFIG_4 = 4,
    IEEE80211_EDMG_BW_CONFIG_5 = 5,
    IEEE80211_EDMG_BW_CONFIG_6 = 6,
    IEEE80211_EDMG_BW_CONFIG_7 = 7,
    IEEE80211_EDMG_BW_CONFIG_8 = 8,
    IEEE80211_EDMG_BW_CONFIG_9 = 9,
    IEEE80211_EDMG_BW_CONFIG_10 = 10,
    IEEE80211_EDMG_BW_CONFIG_11 = 11,
    IEEE80211_EDMG_BW_CONFIG_12 = 12,
    IEEE80211_EDMG_BW_CONFIG_13 = 13,
    IEEE80211_EDMG_BW_CONFIG_14 = 14,
    IEEE80211_EDMG_BW_CONFIG_15 = 15
};
#line 382  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct ieee80211_edmg {
   u8 channels ;
   enum ieee80211_edmg_bw_config bw_config ;
};
#line 410  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct ieee80211_supported_band {
   struct ieee80211_channel *channels ;
   struct ieee80211_rate *bitrates ;
   enum nl80211_band band ;
   int n_channels ;
   int n_bitrates ;
   struct ieee80211_sta_ht_cap ht_cap ;
   struct ieee80211_sta_vht_cap vht_cap ;
   struct ieee80211_edmg edmg_cap ;
   u16 n_iftype_data ;
   struct ieee80211_sband_iftype_data *iftype_data ;
};
#line 571  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct key_params {
   u8 *key ;
   u8 *seq ;
   int key_len ;
   int seq_len ;
   u16 vlan_id ;
   u32 cipher ;
   enum nl80211_key_mode mode ;
};
#line 593  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct cfg80211_chan_def {
   struct ieee80211_channel *chan ;
   enum nl80211_chan_width width ;
   u32 center_freq1 ;
   u32 center_freq2 ;
   struct ieee80211_edmg edmg ;
};
#line 853  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct cfg80211_crypto_settings {
   u32 wpa_versions ;
   u32 cipher_group ;
   int n_ciphers_pairwise ;
   u32 ciphers_pairwise[5U] ;
   int n_akm_suites ;
   u32 akm_suites[2U] ;
   bool control_port ;
   __be16 control_port_ethertype ;
   bool control_port_no_encrypt ;
   bool control_port_over_nl80211 ;
   struct key_params *wep_keys ;
   int wep_tx_key ;
   u8 *psk ;
   u8 *sae_pwd ;
   u8 sae_pwd_len ;
};
#line 917  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct mac_address {
   u8 addr[6U] ;
};
#line 1885  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct cfg80211_ssid {
   u8 ssid[32U] ;
   u8 ssid_len ;
};
#line 1899  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct cfg80211_scan_info {
   u64 scan_start_tsf ;
   u8 tsf_bssid[6U] ;
   bool aborted ;
};
#line 1934  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct cfg80211_scan_request {
   struct cfg80211_ssid *ssids ;
   int n_ssids ;
   u32 n_channels ;
   enum nl80211_bss_scan_width scan_width ;
   u8 *ie ;
   size_t ie_len ;
   u16 duration ;
   bool duration_mandatory ;
   u32 flags ;
   u32 rates[4U] ;
   struct wireless_dev *wdev ;
   u8 mac_addr[6U] ;
   u8 mac_addr_mask[6U] ;
   u8 bssid[6U] ;
   struct wiphy *wiphy ;
   unsigned long scan_start ;
   struct cfg80211_scan_info info ;
   bool notified ;
   bool no_cck ;
   struct ieee80211_channel *channels[0U] ;
};
#line 1991  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct cfg80211_match_set {
   struct cfg80211_ssid ssid ;
   u8 bssid[6U] ;
   s32 rssi_thold ;
   s32 per_band_rssi_thold[4U] ;
};
#line 2007  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct cfg80211_sched_scan_plan {
   u32 interval ;
   u32 iterations ;
};
#line 2018  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct cfg80211_bss_select_adjust {
   enum nl80211_band band ;
   s8 delta ;
};
#line 2073  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct cfg80211_sched_scan_request {
   u64 reqid ;
   struct cfg80211_ssid *ssids ;
   int n_ssids ;
   u32 n_channels ;
   enum nl80211_bss_scan_width scan_width ;
   u8 *ie ;
   size_t ie_len ;
   u32 flags ;
   struct cfg80211_match_set *match_sets ;
   int n_match_sets ;
   s32 min_rssi_thold ;
   u32 delay ;
   struct cfg80211_sched_scan_plan *scan_plans ;
   int n_scan_plans ;
   u8 mac_addr[6U] ;
   u8 mac_addr_mask[6U] ;
   bool relative_rssi_set ;
   s8 relative_rssi ;
   struct cfg80211_bss_select_adjust rssi_adjust ;
   struct wiphy *wiphy ;
   struct net_device *dev ;
   unsigned long scan_start ;
   bool report_results ;
   struct callback_head callback_head ;
   u32 owner_nlportid ;
   bool nl_owner_dead ;
   struct list_head list ;
   struct ieee80211_channel *channels[0U] ;
};
#line 2109 
enum cfg80211_signal_type {
    CFG80211_SIGNAL_TYPE_NONE = 0,
    CFG80211_SIGNAL_TYPE_MBM = 1,
    CFG80211_SIGNAL_TYPE_UNSPEC = 2
};
#line 2432  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct cfg80211_ibss_params {
   u8 *ssid ;
   u8 *bssid ;
   struct cfg80211_chan_def chandef ;
   u8 *ie ;
   u8 ssid_len ;
   u8 ie_len ;
   u16 beacon_interval ;
   u32 basic_rates ;
   bool channel_fixed ;
   bool privacy ;
   bool control_port ;
   bool control_port_over_nl80211 ;
   bool userspace_handles_dfs ;
   int mcast_rate[4U] ;
   struct ieee80211_ht_cap ht_capa ;
   struct ieee80211_ht_cap ht_capa_mask ;
   struct key_params *wep_keys ;
   int wep_tx_key ;
};
#line 2460  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
union __anonunion_param_733 {
   enum nl80211_band band_pref ;
   struct cfg80211_bss_select_adjust adjust ;
};
#line 2460  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct cfg80211_bss_selection {
   enum nl80211_bss_select_attr behaviour ;
   union __anonunion_param_733 param ;
};
#line 2531  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct cfg80211_connect_params {
   struct ieee80211_channel *channel ;
   struct ieee80211_channel *channel_hint ;
   u8 *bssid ;
   u8 *bssid_hint ;
   u8 *ssid ;
   size_t ssid_len ;
   enum nl80211_auth_type auth_type ;
   u8 *ie ;
   size_t ie_len ;
   bool privacy ;
   enum nl80211_mfp mfp ;
   struct cfg80211_crypto_settings crypto ;
   u8 *key ;
   u8 key_len ;
   u8 key_idx ;
   u32 flags ;
   int bg_scan_period ;
   struct ieee80211_ht_cap ht_capa ;
   struct ieee80211_ht_cap ht_capa_mask ;
   struct ieee80211_vht_cap vht_capa ;
   struct ieee80211_vht_cap vht_capa_mask ;
   bool pbss ;
   struct cfg80211_bss_selection bss_select ;
   u8 *prev_bssid ;
   u8 *fils_erp_username ;
   size_t fils_erp_username_len ;
   u8 *fils_erp_realm ;
   size_t fils_erp_realm_len ;
   u16 fils_erp_next_seq_num ;
   u8 *fils_erp_rrk ;
   size_t fils_erp_rrk_len ;
   bool want_1x ;
   struct ieee80211_edmg edmg ;
};
#line 2656  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct cfg80211_pkt_pattern {
   u8 *mask ;
   u8 *pattern ;
   int pattern_len ;
   int pkt_offset ;
};
#line 2681  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct cfg80211_wowlan_tcp {
   struct socket *sock ;
   __be32 src ;
   __be32 dst ;
   u16 src_port ;
   u16 dst_port ;
   u8 dst_mac[6U] ;
   int payload_len ;
   u8 *payload ;
   struct nl80211_wowlan_tcp_data_seq payload_seq ;
   u32 data_interval ;
   u32 wake_len ;
   u8 *wake_data ;
   u8 *wake_mask ;
   u32 tokens_size ;
   struct nl80211_wowlan_tcp_data_token payload_tok ;
};
#line 2715  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct cfg80211_wowlan {
   bool any ;
   bool disconnect ;
   bool magic_pkt ;
   bool gtk_rekey_failure ;
   bool eap_identity_req ;
   bool four_way_handshake ;
   bool rfkill_release ;
   struct cfg80211_pkt_pattern *patterns ;
   struct cfg80211_wowlan_tcp *tcp ;
   int n_patterns ;
   struct cfg80211_sched_scan_request *nd_config ;
};
#line 4043  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct ieee80211_iface_limit {
   u16 max ;
   u16 types ;
};
#line 4107  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct ieee80211_iface_combination {
   struct ieee80211_iface_limit *limits ;
   u32 num_different_channels ;
   u16 max_interfaces ;
   u8 n_limits ;
   bool beacon_int_infra_match ;
   u8 radar_detect_widths ;
   u8 radar_detect_regions ;
   u32 beacon_int_min_gcd ;
};
#line 4165  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct ieee80211_txrx_stypes {
   u16 tx ;
   u16 rx ;
};
#line 4198  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct wiphy_wowlan_tcp_support {
   struct nl80211_wowlan_tcp_data_token_feature *tok ;
   u32 data_payload_max ;
   u32 data_interval_max ;
   u32 wake_payload_max ;
   bool seq ;
};
#line 4221  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct wiphy_wowlan_support {
   u32 flags ;
   int n_patterns ;
   int pattern_max_len ;
   int pattern_min_len ;
   int max_pkt_offset ;
   int max_nd_match_sets ;
   struct wiphy_wowlan_tcp_support *tcp ;
};
#line 4241  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct wiphy_coalesce_support {
   int n_rules ;
   int max_delay ;
   int n_patterns ;
   int pattern_max_len ;
   int pattern_min_len ;
   int max_pkt_offset ;
};
#line 4312 
struct nla_policy;
#line 4312  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct wiphy_vendor_command {
   struct nl80211_vendor_cmd_info info ;
   u32 flags ;
   int (*doit)(struct wiphy *, struct wireless_dev *, void *, int ) ;
   int (*dumpit)(struct wiphy *, struct wireless_dev *, struct sk_buff *, void *, int , unsigned long *) ;
   struct nla_policy *policy ;
   unsigned int maxattr ;
};
#line 4335  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct wiphy_iftype_ext_capab {
   enum nl80211_iftype iftype ;
   u8 *extended_capabilities ;
   u8 *extended_capabilities_mask ;
   u8 extended_capabilities_len ;
};
#line 4360  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct __anonstruct_ftm_735 {
   u32 preambles ;
   u32 bandwidths ;
   s8 max_bursts_exponent ;
   u8 max_ftms_per_burst ;
   u8 supported : 1 ;
   u8 asap : 1 ;
   u8 non_asap : 1 ;
   u8 request_lci : 1 ;
   u8 request_civicloc : 1 ;
};
#line 4360  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct cfg80211_pmsr_capabilities {
   unsigned int max_peers ;
   u8 report_ap_tsf : 1 ;
   u8 randomize_mac_addr : 1 ;
   struct __anonstruct_ftm_735 ftm ;
};
#line 4552  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct wiphy {
   u8 perm_addr[6U] ;
   u8 addr_mask[6U] ;
   struct mac_address *addresses ;
   struct ieee80211_txrx_stypes *mgmt_stypes ;
   struct ieee80211_iface_combination *iface_combinations ;
   int n_iface_combinations ;
   u16 software_iftypes ;
   u16 n_addresses ;
   u16 interface_modes ;
   u16 max_acl_mac_addrs ;
   u32 flags ;
   u32 regulatory_flags ;
   u32 features ;
   u8 ext_features[6U] ;
   u32 ap_sme_capa ;
   enum cfg80211_signal_type signal_type ;
   int bss_priv_size ;
   u8 max_scan_ssids ;
   u8 max_sched_scan_reqs ;
   u8 max_sched_scan_ssids ;
   u8 max_match_sets ;
   u16 max_scan_ie_len ;
   u16 max_sched_scan_ie_len ;
   u32 max_sched_scan_plans ;
   u32 max_sched_scan_plan_interval ;
   u32 max_sched_scan_plan_iterations ;
   int n_cipher_suites ;
   u32 *cipher_suites ;
   int n_akm_suites ;
   u32 *akm_suites ;
   u8 retry_short ;
   u8 retry_long ;
   u32 frag_threshold ;
   u32 rts_threshold ;
   u8 coverage_class ;
   char fw_version[32U] ;
   u32 hw_version ;
   struct wiphy_wowlan_support *wowlan ;
   struct cfg80211_wowlan *wowlan_config ;
   u16 max_remain_on_channel_duration ;
   u8 max_num_pmkids ;
   u32 available_antennas_tx ;
   u32 available_antennas_rx ;
   u32 probe_resp_offload ;
   u8 *extended_capabilities ;
   u8 *extended_capabilities_mask ;
   u8 extended_capabilities_len ;
   struct wiphy_iftype_ext_capab *iftype_ext_capab ;
   unsigned int num_iftype_ext_capab ;
   void *privid ;
   struct ieee80211_supported_band *bands[4U] ;
   void (*reg_notifier)(struct wiphy *, struct regulatory_request *) ;
   struct ieee80211_regdomain *regd ;
   struct device dev ;
   bool registered ;
   struct dentry *debugfsdir ;
   struct ieee80211_ht_cap *ht_capa_mod_mask ;
   struct ieee80211_vht_cap *vht_capa_mod_mask ;
   struct list_head wdev_list ;
   possible_net_t _net ;
   struct iw_handler_def *wext ;
   struct wiphy_coalesce_support *coalesce ;
   struct wiphy_vendor_command *vendor_commands ;
   struct nl80211_vendor_cmd_info *vendor_events ;
   int n_vendor_commands ;
   int n_vendor_events ;
   u16 max_ap_assoc_sta ;
   u8 max_num_csa_counters ;
   u8 max_adj_channel_rssi_comp ;
   u32 bss_select_support ;
   u8 nan_supported_bands ;
   u32 txq_limit ;
   u32 txq_memory_limit ;
   u32 txq_quantum ;
   u8 support_mbssid : 1 ;
   u8 support_only_he_mbssid : 1 ;
   struct cfg80211_pmsr_capabilities *pmsr_capa ;
   char priv[0U] ;
};
#line 4826 
struct cfg80211_conn;
#line 4827 
struct cfg80211_internal_bss;
#line 4828 
struct cfg80211_cached_keys;
#line 4829 
struct cfg80211_cqm_config;
#line 4912  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct __anonstruct_wext_736 {
   struct cfg80211_ibss_params ibss ;
   struct cfg80211_connect_params connect ;
   struct cfg80211_cached_keys *keys ;
   u8 *ie ;
   size_t ie_len ;
   u8 bssid[6U] ;
   u8 prev_bssid[6U] ;
   u8 ssid[32U] ;
   s8 default_key ;
   s8 default_mgmt_key ;
   bool prev_bssid_valid ;
};
#line 4912  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct wireless_dev {
   struct wiphy *wiphy ;
   enum nl80211_iftype iftype ;
   struct list_head list ;
   struct net_device *netdev ;
   u32 identifier ;
   struct list_head mgmt_registrations ;
   spinlock_t mgmt_registrations_lock ;
   struct mutex mtx ;
   bool use_4addr ;
   bool is_running ;
   u8 address[6U] ;
   u8 ssid[32U] ;
   u8 ssid_len ;
   u8 mesh_id_len ;
   u8 mesh_id_up_len ;
   struct cfg80211_conn *conn ;
   struct cfg80211_cached_keys *connect_keys ;
   enum ieee80211_bss_type conn_bss_type ;
   u32 conn_owner_nlportid ;
   struct work_struct disconnect_wk ;
   u8 disconnect_bssid[6U] ;
   struct list_head event_list ;
   spinlock_t event_lock ;
   struct cfg80211_internal_bss *current_bss ;
   struct cfg80211_chan_def preset_chandef ;
   struct cfg80211_chan_def chandef ;
   bool ibss_fixed ;
   bool ibss_dfs_possible ;
   bool ps ;
   int ps_timeout ;
   int beacon_interval ;
   u32 ap_unexpected_nlportid ;
   u32 owner_nlportid ;
   bool nl_owner_dead ;
   bool cac_started ;
   unsigned long cac_start_time ;
   unsigned int cac_time_ms ;
   struct __anonstruct_wext_736 wext ;
   struct cfg80211_cqm_config *cqm_config ;
   struct list_head pmsr_list ;
   spinlock_t pmsr_lock ;
   struct work_struct pmsr_free_wk ;
};
#line 567  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/rtnetlink.h"
struct tcmsg {
   unsigned char tcm_family ;
   unsigned char tcm__pad1 ;
   unsigned short tcm__pad2 ;
   int tcm_ifindex ;
   __u32 tcm_handle ;
   __u32 tcm_parent ;
   __u32 tcm_info ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/gen_stats.h"
struct gnet_stats_queue {
   __u32 qlen ;
   __u32 backlog ;
   __u32 drops ;
   __u32 requeues ;
   __u32 overlimits ;
};
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/gen_stats.h"
struct gnet_stats_basic_packed {
   __u64 bytes ;
   __u64 packets ;
};
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/gen_stats.h"
struct gnet_stats_basic_cpu {
   struct gnet_stats_basic_packed bstats ;
   struct u64_stats_sync syncp ;
} __attribute__((__aligned__(16)));
#line 20 
struct net_rate_estimator;
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/gen_stats.h"
struct gnet_dump {
   spinlock_t *lock ;
   struct sk_buff *skb ;
   struct nlattr *tail ;
   int compat_tc_stats ;
   int compat_xstats ;
   int padattr ;
   void *xstats ;
   int xstats_len ;
   struct tc_stats tc_stats ;
};
#line 291  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netlink.h"
struct __anonstruct_744 {
   s16 min ;
   s16 max ;
};
#line 291  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netlink.h"
union __anonunion_743 {
   void *validation_data ;
   struct __anonstruct_744 __anonCompField___anonunion_743_162 ;
   int (*validate)(struct nlattr *, struct netlink_ext_ack *) ;
   u16 strict_start_type ;
};
#line 291  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netlink.h"
struct nla_policy {
   u8 type ;
   u8 validation_type ;
   u16 len ;
   union __anonunion_743 __anonCompField_nla_policy_163 ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/rtnetlink.h"
struct rtnl_link_ops {
   struct list_head list ;
   char *kind ;
   size_t priv_size ;
   void (*setup)(struct net_device *) ;
   unsigned int maxtype ;
   struct nla_policy *policy ;
   int (*validate)(struct nlattr **, struct nlattr **, struct netlink_ext_ack *) ;
   int (*newlink)(struct net *, struct net_device *, struct nlattr **, struct nlattr **, struct netlink_ext_ack *) ;
   int (*changelink)(struct net_device *, struct nlattr **, struct nlattr **, struct netlink_ext_ack *) ;
   void (*dellink)(struct net_device *, struct list_head *) ;
   size_t (*get_size)(struct net_device *) ;
   int (*fill_info)(struct sk_buff *, struct net_device *) ;
   size_t (*get_xstats_size)(struct net_device *) ;
   int (*fill_xstats)(struct sk_buff *, struct net_device *) ;
   unsigned int (*get_num_tx_queues)(void) ;
   unsigned int (*get_num_rx_queues)(void) ;
   unsigned int slave_maxtype ;
   struct nla_policy *slave_policy ;
   int (*slave_changelink)(struct net_device *, struct net_device *, struct nlattr **, struct nlattr **, struct netlink_ext_ack *) ;
   size_t (*get_slave_size)(struct net_device *, struct net_device *) ;
   int (*fill_slave_info)(struct sk_buff *, struct net_device *, struct net_device *) ;
   struct net *(*get_link_net)(struct net_device *) ;
   size_t (*get_linkxstats_size)(struct net_device *, int ) ;
   int (*fill_linkxstats)(struct sk_buff *, struct net_device *, int *, int ) ;
};
#line 173  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jhash.h"
struct rhash_lock_head {
   };
#line 76  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rhashtable.h"
struct bucket_table {
   unsigned int size ;
   unsigned int nest ;
   u32 hash_rnd ;
   struct list_head walkers ;
   struct callback_head rcu ;
   struct bucket_table *future_tbl ;
   struct lockdep_map dep_map ;
   struct rhash_lock_head *buckets[] ;
};
#line 281  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow_offload.h"
struct flow_block {
   struct list_head cb_list ;
};
#line 298  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow_offload.h"
typedef int flow_setup_cb_t(enum tc_setup_type , void *, void *);
#line 412 
struct Qdisc_ops;
#line 413 
struct qdisc_walker;
#line 414 
struct tcf_walker;
#line 41  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct qdisc_size_table {
   struct callback_head rcu ;
   struct list_head list ;
   struct tc_sizespec szopts ;
   int refcnt ;
   u16 data[] ;
};
#line 50  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct qdisc_skb_head {
   struct sk_buff *head ;
   struct sk_buff *tail ;
   __u32 qlen ;
   spinlock_t lock ;
};
#line 57  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct Qdisc {
   int (*enqueue)(struct sk_buff *, struct Qdisc *, struct sk_buff **) ;
   struct sk_buff *(*dequeue)(struct Qdisc *) ;
   unsigned int flags ;
   u32 limit ;
   struct Qdisc_ops *ops ;
   struct qdisc_size_table *stab ;
   struct hlist_node hash ;
   u32 handle ;
   u32 parent ;
   struct netdev_queue *dev_queue ;
   struct net_rate_estimator *rate_est ;
   struct gnet_stats_basic_cpu *cpu_bstats ;
   struct gnet_stats_queue *cpu_qstats ;
   int padded ;
   refcount_t refcnt ;
   struct sk_buff_head gso_skb ;
   struct qdisc_skb_head q ;
   struct gnet_stats_basic_packed bstats ;
   seqcount_t running ;
   struct gnet_stats_queue qstats ;
   unsigned long state ;
   struct Qdisc *next_sched ;
   struct sk_buff_head skb_bad_txq ;
   spinlock_t busylock ;
   spinlock_t seqlock ;
   bool empty ;
   struct callback_head rcu ;
};
#line 195 
struct tcf_block;
#line 195  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct Qdisc_class_ops {
   unsigned int flags ;
   struct netdev_queue *(*select_queue)(struct Qdisc *, struct tcmsg *) ;
   int (*graft)(struct Qdisc *, unsigned long , struct Qdisc *, struct Qdisc **, struct netlink_ext_ack *) ;
   struct Qdisc *(*leaf)(struct Qdisc *, unsigned long ) ;
   void (*qlen_notify)(struct Qdisc *, unsigned long ) ;
   unsigned long (*find)(struct Qdisc *, u32 ) ;
   int (*change)(struct Qdisc *, u32 , u32 , struct nlattr **, unsigned long *, struct netlink_ext_ack *) ;
   int (*delete)(struct Qdisc *, unsigned long ) ;
   void (*walk)(struct Qdisc *, struct qdisc_walker *) ;
   struct tcf_block *(*tcf_block)(struct Qdisc *, unsigned long , struct netlink_ext_ack *) ;
   unsigned long (*bind_tcf)(struct Qdisc *, unsigned long , u32 ) ;
   void (*unbind_tcf)(struct Qdisc *, unsigned long ) ;
   int (*dump)(struct Qdisc *, unsigned long , struct sk_buff *, struct tcmsg *) ;
   int (*dump_stats)(struct Qdisc *, unsigned long , struct gnet_dump *) ;
};
#line 235  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct Qdisc_ops {
   struct Qdisc_ops *next ;
   struct Qdisc_class_ops *cl_ops ;
   char id[16U] ;
   int priv_size ;
   unsigned int static_flags ;
   int (*enqueue)(struct sk_buff *, struct Qdisc *, struct sk_buff **) ;
   struct sk_buff *(*dequeue)(struct Qdisc *) ;
   struct sk_buff *(*peek)(struct Qdisc *) ;
   int (*init)(struct Qdisc *, struct nlattr *, struct netlink_ext_ack *) ;
   void (*reset)(struct Qdisc *) ;
   void (*destroy)(struct Qdisc *) ;
   int (*change)(struct Qdisc *, struct nlattr *, struct netlink_ext_ack *) ;
   void (*attach)(struct Qdisc *) ;
   int (*change_tx_queue_len)(struct Qdisc *, unsigned int ) ;
   int (*dump)(struct Qdisc *, struct sk_buff *) ;
   int (*dump_stats)(struct Qdisc *, struct gnet_dump *) ;
   void (*ingress_block_set)(struct Qdisc *, u32 ) ;
   void (*egress_block_set)(struct Qdisc *, u32 ) ;
   u32 (*ingress_block_get)(struct Qdisc *) ;
   u32 (*egress_block_get)(struct Qdisc *) ;
   struct module *owner ;
};
#line 272  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct __anonstruct_818 {
   unsigned long class ;
   u32 classid ;
};
#line 272 
struct tcf_proto;
#line 272  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct __anonstruct_819 {
   bool ingress ;
   struct gnet_stats_queue *qstats ;
};
#line 272  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
union __anonunion_817 {
   struct __anonstruct_818 __anonCompField___anonunion_817_165 ;
   struct tcf_proto *goto_tp ;
   struct __anonstruct_819 __anonCompField___anonunion_817_166 ;
};
#line 272  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct tcf_result {
   union __anonunion_817 __anonCompField_tcf_result_167 ;
};
#line 287 
struct tcf_chain;
#line 290  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct tcf_proto_ops {
   struct list_head head ;
   char kind[16U] ;
   int (*classify)(struct sk_buff *, struct tcf_proto *, struct tcf_result *) ;
   int (*init)(struct tcf_proto *) ;
   void (*destroy)(struct tcf_proto *, bool , struct netlink_ext_ack *) ;
   void *(*get)(struct tcf_proto *, u32 ) ;
   void (*put)(struct tcf_proto *, void *) ;
   int (*change)(struct net *, struct sk_buff *, struct tcf_proto *, unsigned long , u32 , struct nlattr **, void **, bool , bool , struct netlink_ext_ack *) ;
   int (*delete)(struct tcf_proto *, void *, bool *, bool , struct netlink_ext_ack *) ;
   bool (*delete_empty)(struct tcf_proto *) ;
   void (*walk)(struct tcf_proto *, struct tcf_walker *, bool ) ;
   int (*reoffload)(struct tcf_proto *, bool , flow_setup_cb_t *, void *, struct netlink_ext_ack *) ;
   void (*hw_add)(struct tcf_proto *, void *) ;
   void (*hw_del)(struct tcf_proto *, void *) ;
   void (*bind_class)(void *, u32 , unsigned long ) ;
   void *(*tmplt_create)(struct net *, struct tcf_chain *, struct nlattr **, struct netlink_ext_ack *) ;
   void (*tmplt_destroy)(void *) ;
   int (*dump)(struct net *, struct tcf_proto *, void *, struct sk_buff *, struct tcmsg *, bool ) ;
   int (*tmplt_dump)(struct sk_buff *, struct net *, void *) ;
   struct module *owner ;
   int flags ;
};
#line 348  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct tcf_proto {
   struct tcf_proto *next ;
   void *root ;
   int (*classify)(struct sk_buff *, struct tcf_proto *, struct tcf_result *) ;
   __be16 protocol ;
   u32 prio ;
   void *data ;
   struct tcf_proto_ops *ops ;
   struct tcf_chain *chain ;
   spinlock_t lock ;
   bool deleting ;
   refcount_t refcnt ;
   struct callback_head rcu ;
   struct hlist_node destroy_ht_node ;
};
#line 386  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct tcf_chain {
   struct mutex filter_chain_lock ;
   struct tcf_proto *filter_chain ;
   struct list_head list ;
   struct tcf_block *block ;
   u32 index ;
   unsigned int refcnt ;
   unsigned int action_refcnt ;
   bool explicitly_created ;
   bool flushing ;
   struct tcf_proto_ops *tmplt_ops ;
   void *tmplt_priv ;
   struct callback_head rcu ;
};
#line 402  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct __anonstruct_chain0_821 {
   struct tcf_chain *chain ;
   struct list_head filter_chain_list ;
};
#line 402  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct tcf_block {
   struct mutex lock ;
   struct list_head chain_list ;
   u32 index ;
   refcount_t refcnt ;
   struct net *net ;
   struct Qdisc *q ;
   struct rw_semaphore cb_lock ;
   struct flow_block flow_block ;
   struct list_head owner_list ;
   bool keep_dst ;
   atomic_t offloadcnt ;
   unsigned int nooffloaddevcnt ;
   unsigned int lockeddevcnt ;
   struct __anonstruct_chain0_821 chain0 ;
   struct callback_head rcu ;
   struct hlist_head proto_destroy_ht[128U] ;
   struct mutex proto_destroy_lock ;
};
#line 1269  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct mini_Qdisc {
   struct tcf_proto *filter_list ;
   struct gnet_stats_basic_cpu *cpu_bstats ;
   struct gnet_stats_queue *cpu_qstats ;
   struct callback_head rcu ;
};
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/pkt_sched.h"
struct qdisc_walker {
   int stop ;
   int skip ;
   int count ;
   int (*fn)(struct Qdisc *, unsigned long , struct qdisc_walker *) ;
};
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/page_counter.h"
struct page_counter {
   atomic_long_t usage ;
   unsigned long min ;
   unsigned long low ;
   unsigned long max ;
   struct page_counter *parent ;
   unsigned long emin ;
   atomic_long_t min_usage ;
   atomic_long_t children_min_usage ;
   unsigned long elow ;
   atomic_long_t low_usage ;
   atomic_long_t children_low_usage ;
   unsigned long watermark ;
   unsigned long failcnt ;
};
#line 66 
struct eventfd_ctx;
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/vmpressure.h"
struct vmpressure {
   unsigned long scanned ;
   unsigned long reclaimed ;
   unsigned long tree_scanned ;
   unsigned long tree_reclaimed ;
   spinlock_t sr_lock ;
   struct list_head events ;
   struct mutex events_lock ;
   struct work_struct work ;
};
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/flex_proportions.h"
struct fprop_global {
   struct percpu_counter events ;
   unsigned int period ;
   seqcount_t sequence ;
};
#line 76  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/flex_proportions.h"
struct fprop_local_percpu {
   struct percpu_counter events ;
   unsigned int period ;
   raw_spinlock_t lock ;
};
#line 116  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/flex_proportions.h"
typedef int congested_fn(void *, int );
#line 45  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backing-dev-defs.h"
enum wb_reason {
    WB_REASON_BACKGROUND = 0,
    WB_REASON_VMSCAN = 1,
    WB_REASON_SYNC = 2,
    WB_REASON_PERIODIC = 3,
    WB_REASON_LAPTOP_TIMER = 4,
    WB_REASON_FREE_MORE_MEM = 5,
    WB_REASON_FS_FREE_SPACE = 6,
    WB_REASON_FORKER_THREAD = 7,
    WB_REASON_FOREIGN_FLUSH = 8,
    WB_REASON_MAX = 9
};
#line 71  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backing-dev-defs.h"
struct wb_completion {
   atomic_t cnt ;
   wait_queue_head_t *waitq ;
};
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backing-dev-defs.h"
struct bdi_writeback_congested {
   unsigned long state ;
   refcount_t refcnt ;
   struct backing_dev_info *__bdi ;
   int blkcg_id ;
   struct rb_node rb_node ;
};
#line 130  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backing-dev-defs.h"
union __anonunion_834 {
   struct work_struct release_work ;
   struct callback_head rcu ;
};
#line 130  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backing-dev-defs.h"
struct bdi_writeback {
   struct backing_dev_info *bdi ;
   unsigned long state ;
   unsigned long last_old_flush ;
   struct list_head b_dirty ;
   struct list_head b_io ;
   struct list_head b_more_io ;
   struct list_head b_dirty_time ;
   spinlock_t list_lock ;
   struct percpu_counter stat[4U] ;
   struct bdi_writeback_congested *congested ;
   unsigned long bw_time_stamp ;
   unsigned long dirtied_stamp ;
   unsigned long written_stamp ;
   unsigned long write_bandwidth ;
   unsigned long avg_write_bandwidth ;
   unsigned long dirty_ratelimit ;
   unsigned long balanced_dirty_ratelimit ;
   struct fprop_local_percpu completions ;
   int dirty_exceeded ;
   enum wb_reason start_all_reason ;
   spinlock_t work_lock ;
   struct list_head work_list ;
   struct delayed_work dwork ;
   unsigned long dirty_sleep ;
   struct list_head bdi_node ;
   struct percpu_ref refcnt ;
   struct fprop_local_percpu memcg_completions ;
   struct cgroup_subsys_state *memcg_css ;
   struct cgroup_subsys_state *blkcg_css ;
   struct list_head memcg_node ;
   struct list_head blkcg_node ;
   union __anonunion_834 __anonCompField_bdi_writeback_169 ;
};
#line 188  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backing-dev-defs.h"
struct backing_dev_info {
   u64 id ;
   struct rb_node rb_node ;
   struct list_head bdi_list ;
   unsigned long ra_pages ;
   unsigned long io_pages ;
   congested_fn *congested_fn ;
   void *congested_data ;
   char *name ;
   struct kref refcnt ;
   unsigned int capabilities ;
   unsigned int min_ratio ;
   unsigned int max_ratio ;
   unsigned int max_prop_frac ;
   atomic_long_t tot_write_bandwidth ;
   struct bdi_writeback wb ;
   struct list_head wb_list ;
   struct xarray cgwb_tree ;
   struct rb_root cgwb_congested_tree ;
   struct mutex cgwb_release_mutex ;
   struct rw_semaphore wb_switch_rwsem ;
   wait_queue_head_t wb_waitq ;
   struct device *dev ;
   struct device *owner ;
   struct timer_list laptop_mode_wb_timer ;
   struct dentry *debug_dir ;
};
#line 306 
struct bio_set;
#line 307 
struct bio_integrity_payload;
#line 308  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backing-dev-defs.h"
typedef void bio_end_io_t(struct bio *);
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk_types.h"
typedef u8 blk_status_t;
#line 112  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk_types.h"
struct bio_issue {
   u64 value ;
};
#line 144 
struct blkcg_gq;
#line 144  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk_types.h"
union __anonunion_835 {
   struct bio_integrity_payload *bi_integrity ;
};
#line 144  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk_types.h"
struct bio {
   struct bio *bi_next ;
   struct gendisk *bi_disk ;
   unsigned int bi_opf ;
   unsigned short bi_flags ;
   unsigned short bi_ioprio ;
   unsigned short bi_write_hint ;
   blk_status_t bi_status ;
   u8 bi_partno ;
   atomic_t __bi_remaining ;
   struct bvec_iter bi_iter ;
   bio_end_io_t *bi_end_io ;
   void *bi_private ;
   struct blkcg_gq *bi_blkg ;
   struct bio_issue bi_issue ;
   u64 bi_iocost_cost ;
   union __anonunion_835 __anonCompField_bio_170 ;
   unsigned short bi_vcnt ;
   unsigned short bi_max_vecs ;
   atomic_t __bi_cnt ;
   struct bio_vec *bi_io_vec ;
   struct bio_set *bi_pool ;
   struct bio_vec bi_inline_vecs[0U] ;
};
#line 452  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk_types.h"
typedef unsigned int blk_qc_t;
#line 479  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk_types.h"
struct blk_rq_stat {
   u64 mean ;
   u64 min ;
   u64 max ;
   u32 nr_samples ;
   u64 batch ;
};
#line 86  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/genhd.h"
struct disk_stats {
   u64 nsecs[4U] ;
   unsigned long sectors[4U] ;
   unsigned long ios[4U] ;
   unsigned long merges[4U] ;
   unsigned long io_ticks ;
   unsigned long time_in_queue ;
   local_t in_flight[2U] ;
};
#line 103  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/genhd.h"
struct partition_meta_info {
   char uuid[37U] ;
   u8 volname[64U] ;
};
#line 108  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/genhd.h"
struct hd_struct {
   sector_t start_sect ;
   sector_t nr_sects ;
   seqcount_t nr_sects_seq ;
   sector_t alignment_offset ;
   unsigned int discard_alignment ;
   struct device __dev ;
   struct kobject *holder_dir ;
   int policy ;
   int partno ;
   struct partition_meta_info *info ;
   int make_it_fail ;
   unsigned long stamp ;
   struct disk_stats *dkstats ;
   struct percpu_ref ref ;
   struct rcu_work rcu_work ;
};
#line 160  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/genhd.h"
struct disk_part_tbl {
   struct callback_head callback_head ;
   int len ;
   struct hd_struct *last_lookup ;
   struct hd_struct *part[] ;
};
#line 166 
struct disk_events;
#line 167 
struct badblocks;
#line 172 
struct blk_integrity_profile;
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/genhd.h"
struct blk_integrity {
   struct blk_integrity_profile *profile ;
   unsigned char flags ;
   unsigned char tuple_size ;
   unsigned char interval_exp ;
   unsigned char tag_size ;
};
#line 182 
struct timer_rand_state;
#line 182  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/genhd.h"
struct gendisk {
   int major ;
   int first_minor ;
   int minors ;
   char disk_name[32U] ;
   char *(*devnode)(struct gendisk *, umode_t *) ;
   unsigned short events ;
   unsigned short event_flags ;
   struct disk_part_tbl *part_tbl ;
   struct hd_struct part0 ;
   struct block_device_operations *fops ;
   struct request_queue *queue ;
   void *private_data ;
   int flags ;
   struct rw_semaphore lookup_sem ;
   struct kobject *slave_dir ;
   struct timer_rand_state *random ;
   atomic_t sync_io ;
   struct disk_events *ev ;
   struct kobject integrity_kobj ;
   int node_id ;
   struct badblocks *bb ;
   struct lockdep_map lockdep_map ;
};
#line 637  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pagemap.h"
typedef void *mempool_alloc_t(gfp_t , void *);
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mempool.h"
typedef void mempool_free_t(void *, void *);
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mempool.h"
struct mempool_s {
   spinlock_t lock ;
   int min_nr ;
   int curr_nr ;
   void **elements ;
   void *pool_data ;
   mempool_alloc_t *alloc ;
   mempool_free_t *free ;
   wait_queue_head_t wait ;
};
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mempool.h"
typedef struct mempool_s mempool_t;
#line 307  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bio.h"
struct bio_integrity_payload {
   struct bio *bip_bio ;
   struct bvec_iter bip_iter ;
   unsigned short bip_slab ;
   unsigned short bip_vcnt ;
   unsigned short bip_max_vcnt ;
   unsigned short bip_flags ;
   struct bvec_iter bio_iter ;
   struct work_struct bip_work ;
   struct bio_vec *bip_vec ;
   struct bio_vec bip_inline_vecs[0U] ;
};
#line 575  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bio.h"
struct bio_list {
   struct bio *head ;
   struct bio *tail ;
};
#line 703  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bio.h"
struct bio_set {
   struct kmem_cache *bio_slab ;
   unsigned int front_pad ;
   mempool_t bio_pool ;
   mempool_t bvec_pool ;
   mempool_t bio_integrity_pool ;
   mempool_t bvec_integrity_pool ;
   spinlock_t rescue_lock ;
   struct bio_list rescue_list ;
   struct work_struct rescue_work ;
   struct workqueue_struct *rescue_workqueue ;
};
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bsg.h"
struct sg_io_v4 {
   __s32 guard ;
   __u32 protocol ;
   __u32 subprotocol ;
   __u32 request_len ;
   __u64 request ;
   __u64 request_tag ;
   __u32 request_attr ;
   __u32 request_priority ;
   __u32 request_extra ;
   __u32 max_response_len ;
   __u64 response ;
   __u32 dout_iovec_count ;
   __u32 dout_xfer_len ;
   __u32 din_iovec_count ;
   __u32 din_xfer_len ;
   __u64 dout_xferp ;
   __u64 din_xferp ;
   __u32 timeout ;
   __u32 flags ;
   __u64 usr_ptr ;
   __u32 spare_in ;
   __u32 driver_status ;
   __u32 transport_status ;
   __u32 device_status ;
   __u32 retry_delay ;
   __u32 info ;
   __u32 duration ;
   __u32 response_len ;
   __s32 din_resid ;
   __s32 dout_resid ;
   __u64 generated_tag ;
   __u32 spare_out ;
   __u32 padding ;
};
#line 65 
struct request;
#line 10  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bsg.h"
struct bsg_ops {
   int (*check_proto)(struct sg_io_v4 *) ;
   int (*fill_hdr)(struct request *, struct sg_io_v4 *, fmode_t ) ;
   int (*complete_rq)(struct request *, struct sg_io_v4 *) ;
   void (*free_rq)(struct request *) ;
};
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bsg.h"
struct bsg_class_device {
   struct device *class_dev ;
   int minor ;
   struct request_queue *queue ;
   struct bsg_ops *ops ;
};
#line 94  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/blkzoned.h"
struct blk_zone {
   __u64 start ;
   __u64 len ;
   __u64 wp ;
   __u8 type ;
   __u8 cond ;
   __u8 non_seq ;
   __u8 reset ;
   __u8 reserved[36U] ;
};
#line 134 
struct elevator_queue;
#line 135 
struct blk_trace;
#line 138 
struct blk_flush_queue;
#line 139 
struct pr_ops;
#line 140 
struct rq_qos;
#line 141 
struct blk_queue_stats;
#line 142 
struct blk_stat_callback;
#line 143  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/blkzoned.h"
typedef void rq_end_io_fn(struct request *, blk_status_t );
#line 63  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
typedef __u32 req_flags_t;
#line 67 
enum mq_rq_state {
    MQ_RQ_IDLE = 0,
    MQ_RQ_IN_FLIGHT = 1,
    MQ_RQ_COMPLETE = 2
};
#line 132 
struct blk_mq_ctx;
#line 132 
struct blk_mq_hw_ctx;
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
union __anonunion_838 {
   struct hlist_node hash ;
   struct list_head ipi_list ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
union __anonunion_839 {
   struct rb_node rb_node ;
   struct bio_vec special_vec ;
   void *completion_data ;
   int error_count ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
struct __anonstruct_elv_841 {
   struct io_cq *icq ;
   void *priv[2U] ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
struct __anonstruct_flush_842 {
   unsigned int seq ;
   struct list_head list ;
   rq_end_io_fn *saved_end_io ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
union __anonunion_840 {
   struct __anonstruct_elv_841 elv ;
   struct __anonstruct_flush_842 flush ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
union __anonunion_843 {
   struct __call_single_data csd ;
   u64 fifo_time ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
struct request {
   struct request_queue *q ;
   struct blk_mq_ctx *mq_ctx ;
   struct blk_mq_hw_ctx *mq_hctx ;
   unsigned int cmd_flags ;
   req_flags_t rq_flags ;
   int tag ;
   int internal_tag ;
   unsigned int __data_len ;
   sector_t __sector ;
   struct bio *bio ;
   struct bio *biotail ;
   struct list_head queuelist ;
   union __anonunion_838 __anonCompField_request_171 ;
   union __anonunion_839 __anonCompField_request_172 ;
   union __anonunion_840 __anonCompField_request_173 ;
   struct gendisk *rq_disk ;
   struct hd_struct *part ;
   u64 alloc_time_ns ;
   u64 start_time_ns ;
   u64 io_start_time_ns ;
   unsigned short wbt_flags ;
   unsigned short stats_sectors ;
   unsigned short nr_phys_segments ;
   unsigned short nr_integrity_segments ;
   unsigned short write_hint ;
   unsigned short ioprio ;
   unsigned int extra_len ;
   enum mq_rq_state state ;
   refcount_t ref ;
   unsigned int timeout ;
   unsigned long deadline ;
   union __anonunion_843 __anonCompField_request_174 ;
   rq_end_io_fn *end_io ;
   void *end_io_data ;
};
#line 285 
struct elevator_type;
#line 286 
struct blk_mq_debugfs_attr;
#line 287 
enum elv_merge {
    ELEVATOR_NO_MERGE = 0,
    ELEVATOR_FRONT_MERGE = 1,
    ELEVATOR_BACK_MERGE = 2,
    ELEVATOR_DISCARD_MERGE = 3
};
#line 294 
struct blk_mq_alloc_data;
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/elevator.h"
struct elevator_mq_ops {
   int (*init_sched)(struct request_queue *, struct elevator_type *) ;
   void (*exit_sched)(struct elevator_queue *) ;
   int (*init_hctx)(struct blk_mq_hw_ctx *, unsigned int ) ;
   void (*exit_hctx)(struct blk_mq_hw_ctx *, unsigned int ) ;
   void (*depth_updated)(struct blk_mq_hw_ctx *) ;
   bool (*allow_merge)(struct request_queue *, struct request *, struct bio *) ;
   bool (*bio_merge)(struct blk_mq_hw_ctx *, struct bio *, unsigned int ) ;
   int (*request_merge)(struct request_queue *, struct request **, struct bio *) ;
   void (*request_merged)(struct request_queue *, struct request *, enum elv_merge ) ;
   void (*requests_merged)(struct request_queue *, struct request *, struct request *) ;
   void (*limit_depth)(unsigned int , struct blk_mq_alloc_data *) ;
   void (*prepare_request)(struct request *, struct bio *) ;
   void (*finish_request)(struct request *) ;
   void (*insert_requests)(struct blk_mq_hw_ctx *, struct list_head *, bool ) ;
   struct request *(*dispatch_request)(struct blk_mq_hw_ctx *) ;
   bool (*has_work)(struct blk_mq_hw_ctx *) ;
   void (*completed_request)(struct request *, u64 ) ;
   void (*requeue_request)(struct request *) ;
   struct request *(*former_request)(struct request_queue *, struct request *) ;
   struct request *(*next_request)(struct request_queue *, struct request *) ;
   void (*init_icq)(struct io_cq *) ;
   void (*exit_icq)(struct io_cq *) ;
};
#line 57  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/elevator.h"
struct elv_fs_entry {
   struct attribute attr ;
   ssize_t (*show)(struct elevator_queue *, char *) ;
   ssize_t (*store)(struct elevator_queue *, char *, size_t ) ;
};
#line 66  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/elevator.h"
struct elevator_type {
   struct kmem_cache *icq_cache ;
   struct elevator_mq_ops ops ;
   size_t icq_size ;
   size_t icq_align ;
   struct elv_fs_entry *elevator_attrs ;
   char *elevator_name ;
   char *elevator_alias ;
   unsigned int elevator_features ;
   struct module *elevator_owner ;
   struct blk_mq_debugfs_attr *queue_debugfs_attrs ;
   struct blk_mq_debugfs_attr *hctx_debugfs_attrs ;
   char icq_cache_name[22U] ;
   struct list_head list ;
};
#line 101  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/elevator.h"
struct elevator_queue {
   struct elevator_type *type ;
   void *elevator_data ;
   struct kobject kobj ;
   struct mutex sysfs_lock ;
   unsigned int registered : 1 ;
   struct hlist_head hash[64U] ;
};
#line 153  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/elevator.h"
typedef blk_qc_t make_request_fn(struct request_queue *, struct bio *);
#line 291  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
typedef int dma_drain_needed_fn(struct request *);
#line 304 
enum blk_zoned_model {
    BLK_ZONED_NONE = 0,
    BLK_ZONED_HA = 1,
    BLK_ZONED_HM = 2
};
#line 320  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
struct queue_limits {
   unsigned long bounce_pfn ;
   unsigned long seg_boundary_mask ;
   unsigned long virt_boundary_mask ;
   unsigned int max_hw_sectors ;
   unsigned int max_dev_sectors ;
   unsigned int chunk_sectors ;
   unsigned int max_sectors ;
   unsigned int max_segment_size ;
   unsigned int physical_block_size ;
   unsigned int logical_block_size ;
   unsigned int alignment_offset ;
   unsigned int io_min ;
   unsigned int io_opt ;
   unsigned int max_discard_sectors ;
   unsigned int max_hw_discard_sectors ;
   unsigned int max_write_same_sectors ;
   unsigned int max_write_zeroes_sectors ;
   unsigned int discard_granularity ;
   unsigned int discard_alignment ;
   unsigned short max_segments ;
   unsigned short max_integrity_segments ;
   unsigned short max_discard_segments ;
   unsigned char misaligned ;
   unsigned char discard_misaligned ;
   unsigned char raid_partial_stripes_expensive ;
   enum blk_zoned_model zoned ;
};
#line 394 
struct blk_mq_ops;
#line 394 
struct throtl_data;
#line 394 
struct blk_mq_tag_set;
#line 394  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
struct request_queue {
   struct request *last_merge ;
   struct elevator_queue *elevator ;
   struct blk_queue_stats *stats ;
   struct rq_qos *rq_qos ;
   make_request_fn *make_request_fn ;
   dma_drain_needed_fn *dma_drain_needed ;
   struct blk_mq_ops *mq_ops ;
   struct blk_mq_ctx *queue_ctx ;
   unsigned int queue_depth ;
   struct blk_mq_hw_ctx **queue_hw_ctx ;
   unsigned int nr_hw_queues ;
   struct backing_dev_info *backing_dev_info ;
   void *queuedata ;
   unsigned long queue_flags ;
   atomic_t pm_only ;
   int id ;
   gfp_t bounce_gfp ;
   spinlock_t queue_lock ;
   struct kobject kobj ;
   struct kobject *mq_kobj ;
   struct blk_integrity integrity ;
   struct device *dev ;
   int rpm_status ;
   unsigned int nr_pending ;
   unsigned long nr_requests ;
   unsigned int dma_drain_size ;
   void *dma_drain_buffer ;
   unsigned int dma_pad_mask ;
   unsigned int dma_alignment ;
   unsigned int rq_timeout ;
   int poll_nsec ;
   struct blk_stat_callback *poll_cb ;
   struct blk_rq_stat poll_stat[16U] ;
   struct timer_list timeout ;
   struct work_struct timeout_work ;
   struct list_head icq_list ;
   unsigned long blkcg_pols[1U] ;
   struct blkcg_gq *root_blkg ;
   struct list_head blkg_list ;
   struct queue_limits limits ;
   unsigned int required_elevator_features ;
   unsigned int nr_zones ;
   unsigned long *conv_zones_bitmap ;
   unsigned long *seq_zones_wlock ;
   unsigned int sg_timeout ;
   unsigned int sg_reserved_size ;
   int node ;
   struct blk_trace *blk_trace ;
   struct mutex blk_trace_mutex ;
   struct blk_flush_queue *fq ;
   struct list_head requeue_list ;
   spinlock_t requeue_lock ;
   struct delayed_work requeue_work ;
   struct mutex sysfs_lock ;
   struct mutex sysfs_dir_lock ;
   struct list_head unused_hctx_list ;
   spinlock_t unused_hctx_lock ;
   int mq_freeze_depth ;
   struct bsg_class_device bsg_dev ;
   struct throtl_data *td ;
   struct callback_head callback_head ;
   wait_queue_head_t mq_freeze_wq ;
   struct mutex mq_freeze_lock ;
   struct percpu_ref q_usage_counter ;
   struct blk_mq_tag_set *tag_set ;
   struct list_head tag_set_list ;
   struct bio_set bio_split ;
   struct dentry *debugfs_dir ;
   struct dentry *sched_debugfs_dir ;
   struct dentry *rqos_debugfs_dir ;
   bool mq_sysfs_init_done ;
   size_t cmd_size ;
   struct work_struct release_work ;
   u64 write_hints[5U] ;
};
#line 1160  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
struct blk_plug {
   struct list_head mq_list ;
   struct list_head cb_list ;
   unsigned short rq_count ;
   bool multiple_queues ;
};
#line 1514  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
struct blk_integrity_iter {
   void *prot_buf ;
   void *data_buf ;
   sector_t seed ;
   unsigned int data_size ;
   unsigned short interval ;
   char *disk_name ;
};
#line 1522  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
typedef blk_status_t integrity_processing_fn(struct blk_integrity_iter *);
#line 1524  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
typedef void integrity_prepare_fn(struct request *);
#line 1525  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
typedef void integrity_complete_fn(struct request *, unsigned int );
#line 1527  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
struct blk_integrity_profile {
   integrity_processing_fn *generate_fn ;
   integrity_processing_fn *verify_fn ;
   integrity_prepare_fn *prepare_fn ;
   integrity_complete_fn *complete_fn ;
   char *name ;
};
#line 1693  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
struct block_device_operations {
   int (*open)(struct block_device *, fmode_t ) ;
   void (*release)(struct gendisk *, fmode_t ) ;
   int (*rw_page)(struct block_device *, sector_t , struct page *, unsigned int ) ;
   int (*ioctl)(struct block_device *, fmode_t , unsigned int , unsigned long ) ;
   int (*compat_ioctl)(struct block_device *, fmode_t , unsigned int , unsigned long ) ;
   unsigned int (*check_events)(struct gendisk *, unsigned int ) ;
   int (*media_changed)(struct gendisk *) ;
   void (*unlock_native_capacity)(struct gendisk *) ;
   int (*revalidate_disk)(struct gendisk *) ;
   int (*getgeo)(struct block_device *, struct hd_geometry *) ;
   void (*swap_slot_free_notify)(struct block_device *, unsigned long ) ;
   int (*report_zones)(struct gendisk *, sector_t , unsigned int , int (*)(struct blk_zone *, unsigned int , void *), void *) ;
   struct module *owner ;
   struct pr_ops *pr_ops ;
};
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk-cgroup.h"
struct blkcg_policy_data;
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk-cgroup.h"
struct blkcg {
   struct cgroup_subsys_state css ;
   spinlock_t lock ;
   struct xarray blkg_tree ;
   struct blkcg_gq *blkg_hint ;
   struct hlist_head blkg_list ;
   struct blkcg_policy_data *cpd[5U] ;
   struct list_head all_blkcgs_node ;
   struct list_head cgwb_list ;
   refcount_t cgwb_refcnt ;
};
#line 63  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk-cgroup.h"
struct blkg_iostat {
   u64 bytes[3U] ;
   u64 ios[3U] ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk-cgroup.h"
struct blkg_iostat_set {
   struct u64_stats_sync sync ;
   struct blkg_iostat cur ;
   struct blkg_iostat last ;
};
#line 85  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk-cgroup.h"
struct blkg_policy_data {
   struct blkcg_gq *blkg ;
   int plid ;
};
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk-cgroup.h"
struct blkcg_policy_data {
   struct blkcg *blkcg ;
   int plid ;
};
#line 105  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk-cgroup.h"
struct blkcg_gq {
   struct request_queue *q ;
   struct list_head q_node ;
   struct hlist_node blkcg_node ;
   struct blkcg *blkcg ;
   struct bdi_writeback_congested *wb_congested ;
   struct blkcg_gq *parent ;
   struct percpu_ref refcnt ;
   bool online ;
   struct blkg_iostat_set *iostat_cpu ;
   struct blkg_iostat_set iostat ;
   struct blkg_policy_data *pd[5U] ;
   spinlock_t async_bio_lock ;
   struct bio_list async_bios ;
   struct work_struct async_bio_work ;
   atomic_t use_delay ;
   atomic64_t delay_nsec ;
   atomic64_t delay_start ;
   u64 last_delay ;
   int last_use ;
   struct callback_head callback_head ;
};
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/writeback.h"
enum writeback_sync_modes {
    WB_SYNC_NONE = 0,
    WB_SYNC_ALL = 1
};
#line 51  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/writeback.h"
struct writeback_control {
   long nr_to_write ;
   long pages_skipped ;
   loff_t range_start ;
   loff_t range_end ;
   enum writeback_sync_modes sync_mode ;
   unsigned int for_kupdate : 1 ;
   unsigned int for_background : 1 ;
   unsigned int tagged_writepages : 1 ;
   unsigned int for_reclaim : 1 ;
   unsigned int range_cyclic : 1 ;
   unsigned int for_sync : 1 ;
   unsigned int no_cgroup_owner : 1 ;
   unsigned int punt_to_cgroup : 1 ;
   struct bdi_writeback *wb ;
   struct inode *inode ;
   int wb_id ;
   int wb_lcand_id ;
   int wb_tcand_id ;
   size_t wb_bytes ;
   size_t wb_lcand_bytes ;
   size_t wb_tcand_bytes ;
};
#line 129  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/writeback.h"
struct wb_domain {
   spinlock_t lock ;
   struct fprop_global completions ;
   struct timer_list period_timer ;
   unsigned long period_time ;
   unsigned long dirty_limit_tstamp ;
   unsigned long dirty_limit ;
};
#line 69  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct mem_cgroup_id {
   int id ;
   refcount_t ref ;
};
#line 86  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct memcg_vmstats_percpu {
   long stat[38U] ;
   unsigned long events[91U] ;
   unsigned long nr_page_events ;
   unsigned long targets[2U] ;
};
#line 93  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct mem_cgroup_reclaim_iter {
   struct mem_cgroup *position ;
   unsigned int generation ;
};
#line 99  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct lruvec_stat {
   long count[32U] ;
};
#line 107  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct memcg_shrinker_map {
   struct callback_head rcu ;
   unsigned long map[0U] ;
};
#line 115  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct mem_cgroup_per_node {
   struct lruvec lruvec ;
   struct lruvec_stat *lruvec_stat_local ;
   struct lruvec_stat *lruvec_stat_cpu ;
   atomic_long_t lruvec_stat[32U] ;
   unsigned long lru_zone_size[5U][5U] ;
   struct mem_cgroup_reclaim_iter iter ;
   struct memcg_shrinker_map *shrinker_map ;
   struct rb_node tree_node ;
   unsigned long usage_in_excess ;
   bool on_tree ;
   struct mem_cgroup *memcg ;
};
#line 139  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct mem_cgroup_threshold {
   struct eventfd_ctx *eventfd ;
   unsigned long threshold ;
};
#line 145  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct mem_cgroup_threshold_ary {
   int current_threshold ;
   unsigned int size ;
   struct mem_cgroup_threshold entries[0U] ;
};
#line 154  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct mem_cgroup_thresholds {
   struct mem_cgroup_threshold_ary *primary ;
   struct mem_cgroup_threshold_ary *spare ;
};
#line 164 
enum memcg_kmem_state {
    KMEM_NONE = 0,
    KMEM_ALLOCATED = 1,
    KMEM_ONLINE = 2
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct memcg_padding {
   char x[0U] ;
} __attribute__((__aligned__(4096)));
#line 190  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct memcg_cgwb_frn {
   u64 bdi_id ;
   int memcg_id ;
   u64 at ;
   struct wb_completion done ;
};
#line 203  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct mem_cgroup {
   struct cgroup_subsys_state css ;
   struct mem_cgroup_id id ;
   struct page_counter memory ;
   struct page_counter swap ;
   struct page_counter memsw ;
   struct page_counter kmem ;
   struct page_counter tcpmem ;
   unsigned long high ;
   struct work_struct high_work ;
   unsigned long soft_limit ;
   struct vmpressure vmpressure ;
   bool use_hierarchy ;
   bool oom_group ;
   bool oom_lock ;
   int under_oom ;
   int swappiness ;
   int oom_kill_disable ;
   struct cgroup_file events_file ;
   struct cgroup_file events_local_file ;
   struct cgroup_file swap_events_file ;
   struct mutex thresholds_lock ;
   struct mem_cgroup_thresholds thresholds ;
   struct mem_cgroup_thresholds memsw_thresholds ;
   struct list_head oom_notify ;
   unsigned long move_charge_at_immigrate ;
   spinlock_t move_lock ;
   unsigned long move_lock_flags ;
   struct memcg_padding _pad1_ ;
   atomic_t moving_account ;
   struct task_struct *move_lock_task ;
   struct memcg_vmstats_percpu *vmstats_local ;
   struct memcg_vmstats_percpu *vmstats_percpu ;
   struct memcg_padding _pad2_ ;
   atomic_long_t vmstats[38U] ;
   atomic_long_t vmevents[91U] ;
   atomic_long_t memory_events[7U] ;
   atomic_long_t memory_events_local[7U] ;
   unsigned long socket_pressure ;
   bool tcpmem_active ;
   int tcpmem_pressure ;
   int kmemcg_id ;
   enum memcg_kmem_state kmem_state ;
   struct list_head kmem_caches ;
   struct list_head cgwb_list ;
   struct wb_domain cgwb_domain ;
   struct memcg_cgwb_frn cgwb_frn[4U] ;
   struct list_head event_list ;
   spinlock_t event_list_lock ;
   struct deferred_split deferred_split_queue ;
   struct mem_cgroup_per_node *nodeinfo[0U] ;
};
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/vdso.h"
struct vdso_image {
   void *data ;
   unsigned long size ;
   unsigned long alt ;
   unsigned long alt_len ;
   long sym_vvar_start ;
   long sym_vvar_page ;
   long sym_pvclock_page ;
   long sym_hvclock_page ;
   long sym_VDSO32_NOTE_MASK ;
   long sym___kernel_sigreturn ;
   long sym___kernel_rt_sigreturn ;
   long sym___kernel_vsyscall ;
   long sym_int80_landing_pad ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef __u64 Elf64_Addr;
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef __u16 Elf64_Half;
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef __u64 Elf64_Off;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef __u32 Elf64_Word;
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef __u64 Elf64_Xword;
#line 192  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
struct elf64_sym {
   Elf64_Word st_name ;
   unsigned char st_info ;
   unsigned char st_other ;
   Elf64_Half st_shndx ;
   Elf64_Addr st_value ;
   Elf64_Xword st_size ;
};
#line 200  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef struct elf64_sym Elf64_Sym;
#line 221  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
struct elf64_hdr {
   unsigned char e_ident[16U] ;
   Elf64_Half e_type ;
   Elf64_Half e_machine ;
   Elf64_Word e_version ;
   Elf64_Addr e_entry ;
   Elf64_Off e_phoff ;
   Elf64_Off e_shoff ;
   Elf64_Word e_flags ;
   Elf64_Half e_ehsize ;
   Elf64_Half e_phentsize ;
   Elf64_Half e_phnum ;
   Elf64_Half e_shentsize ;
   Elf64_Half e_shnum ;
   Elf64_Half e_shstrndx ;
};
#line 237  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef struct elf64_hdr Elf64_Ehdr;
#line 316  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
struct elf64_shdr {
   Elf64_Word sh_name ;
   Elf64_Word sh_type ;
   Elf64_Xword sh_flags ;
   Elf64_Addr sh_addr ;
   Elf64_Off sh_offset ;
   Elf64_Xword sh_size ;
   Elf64_Word sh_link ;
   Elf64_Word sh_info ;
   Elf64_Xword sh_addralign ;
   Elf64_Xword sh_entsize ;
};
#line 328  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef struct elf64_shdr Elf64_Shdr;
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/elf.h"
struct kernel_param;
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/moduleparam.h"
struct kernel_param_ops {
   unsigned int flags ;
   int (*set)(char *, struct kernel_param *) ;
   int (*get)(char *, struct kernel_param *) ;
   void (*free)(void *) ;
};
#line 69 
struct kparam_string;
#line 69 
struct kparam_array;
#line 69  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/moduleparam.h"
union __anonunion_862 {
   void *arg ;
   struct kparam_string *str ;
   struct kparam_array *arr ;
};
#line 69  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/moduleparam.h"
struct kernel_param {
   char *name ;
   struct module *mod ;
   struct kernel_param_ops *ops ;
   u16 perm ;
   s8 level ;
   u8 flags ;
   union __anonunion_862 __anonCompField_kernel_param_175 ;
};
#line 86  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/moduleparam.h"
struct kparam_string {
   unsigned int maxlen ;
   char *string ;
};
#line 92  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/moduleparam.h"
struct kparam_array {
   unsigned int max ;
   unsigned int elemsize ;
   unsigned int *num ;
   struct kernel_param_ops *ops ;
   void *elem ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/error-injection.h"
struct error_injection_entry {
   unsigned long addr ;
   int etype ;
};
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/module.h"
struct mod_arch_specific {
   unsigned int num_orcs ;
   int *orc_unwind_ip ;
   struct orc_entry *orc_unwind ;
};
#line 45  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct module_param_attrs;
#line 45  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct module_kobject {
   struct kobject kobj ;
   struct module *mod ;
   struct kobject *drivers_dir ;
   struct module_param_attrs *mp ;
   struct completion *kobj_completion ;
} __attribute__((__designated_init__));
#line 53  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct module_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct module_attribute *, struct module_kobject *, char *) ;
   ssize_t (*store)(struct module_attribute *, struct module_kobject *, char *, size_t ) ;
   void (*setup)(struct module *, char *) ;
   int (*test)(struct module *) ;
   void (*free)(struct module *) ;
};
#line 297 
enum module_state {
    MODULE_STATE_LIVE = 0,
    MODULE_STATE_COMING = 1,
    MODULE_STATE_GOING = 2,
    MODULE_STATE_UNFORMED = 3
};
#line 305  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct mod_tree_node {
   struct module *mod ;
   struct latch_tree_node node ;
};
#line 310  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct module_layout {
   void *base ;
   unsigned int size ;
   unsigned int text_size ;
   unsigned int ro_size ;
   unsigned int ro_after_init_size ;
   struct mod_tree_node mtn ;
};
#line 334  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct mod_kallsyms {
   Elf64_Sym *symtab ;
   unsigned int num_symtab ;
   char *strtab ;
   char *typetab ;
};
#line 342  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct klp_modinfo {
   Elf64_Ehdr hdr ;
   Elf64_Shdr *sechdrs ;
   char *secstrings ;
   unsigned int symndx ;
};
#line 350 
struct module_sect_attrs;
#line 350 
struct module_notes_attrs;
#line 350 
struct trace_event_call;
#line 350 
struct trace_eval_map;
#line 350  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct module {
   enum module_state state ;
   struct list_head list ;
   char name[56U] ;
   struct module_kobject mkobj ;
   struct module_attribute *modinfo_attrs ;
   char *version ;
   char *srcversion ;
   struct kobject *holders_dir ;
   struct kernel_symbol *syms ;
   s32 *crcs ;
   unsigned int num_syms ;
   struct mutex param_lock ;
   struct kernel_param *kp ;
   unsigned int num_kp ;
   unsigned int num_gpl_syms ;
   struct kernel_symbol *gpl_syms ;
   s32 *gpl_crcs ;
   struct kernel_symbol *unused_syms ;
   s32 *unused_crcs ;
   unsigned int num_unused_syms ;
   unsigned int num_unused_gpl_syms ;
   struct kernel_symbol *unused_gpl_syms ;
   s32 *unused_gpl_crcs ;
   bool sig_ok ;
   bool async_probe_requested ;
   struct kernel_symbol *gpl_future_syms ;
   s32 *gpl_future_crcs ;
   unsigned int num_gpl_future_syms ;
   unsigned int num_exentries ;
   struct exception_table_entry *extable ;
   int (*init)(void) ;
   struct module_layout core_layout ;
   struct module_layout init_layout ;
   struct mod_arch_specific arch ;
   unsigned long taints ;
   unsigned int num_bugs ;
   struct list_head bug_list ;
   struct bug_entry *bug_table ;
   struct mod_kallsyms *kallsyms ;
   struct mod_kallsyms core_kallsyms ;
   struct module_sect_attrs *sect_attrs ;
   struct module_notes_attrs *notes_attrs ;
   char *args ;
   void *percpu ;
   unsigned int percpu_size ;
   unsigned int num_tracepoints ;
   tracepoint_ptr_t *tracepoints_ptrs ;
   unsigned int num_srcu_structs ;
   struct srcu_struct **srcu_struct_ptrs ;
   unsigned int num_bpf_raw_events ;
   struct bpf_raw_event_map *bpf_raw_events ;
   struct jump_entry *jump_entries ;
   unsigned int num_jump_entries ;
   unsigned int num_trace_bprintk_fmt ;
   char **trace_bprintk_fmt_start ;
   struct trace_event_call **trace_events ;
   unsigned int num_trace_events ;
   struct trace_eval_map **trace_evals ;
   unsigned int num_trace_evals ;
   unsigned int num_ftrace_callsites ;
   unsigned long *ftrace_callsites ;
   bool klp ;
   bool klp_alive ;
   struct klp_modinfo *klp_info ;
   struct list_head source_list ;
   struct list_head target_list ;
   void (*exit)(void) ;
   atomic_t refcnt ;
   ctor_fn_t *ctors ;
   unsigned int num_ctors ;
   struct error_injection_entry *ei_funcs ;
   unsigned int num_ei_funcs ;
} __attribute__((__designated_init__, __aligned__(64)));
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/filter.h"
struct sock_filter {
   __u16 code ;
   __u8 jt ;
   __u8 jf ;
   __u32 k ;
};
#line 35 
struct sock_reuseport;
#line 513  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/filter.h"
struct sock_fprog_kern {
   u16 len ;
   struct sock_filter *filter ;
};
#line 526  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/filter.h"
union __anonunion_863 {
   struct sock_filter insns[0U] ;
   struct bpf_insn insnsi[0U] ;
};
#line 526  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/filter.h"
struct bpf_prog {
   u16 pages ;
   u16 jited : 1 ;
   u16 jit_requested : 1 ;
   u16 gpl_compatible : 1 ;
   u16 cb_access : 1 ;
   u16 dst_needed : 1 ;
   u16 blinded : 1 ;
   u16 is_func : 1 ;
   u16 kprobe_override : 1 ;
   u16 has_callchain_buf : 1 ;
   u16 enforce_expected_attach_type : 1 ;
   enum bpf_prog_type type ;
   enum bpf_attach_type expected_attach_type ;
   u32 len ;
   u32 jited_len ;
   u8 tag[8U] ;
   struct bpf_prog_aux *aux ;
   struct sock_fprog_kern *orig_prog ;
   unsigned int (*bpf_func)(void *, struct bpf_insn *) ;
   union __anonunion_863 __anonCompField_bpf_prog_176 ;
};
#line 554  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/filter.h"
struct sk_filter {
   refcount_t refcnt ;
   struct callback_head rcu ;
   struct bpf_prog *prog ;
};
#line 36  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/poll.h"
struct pollfd {
   int fd ;
   short events ;
   short revents ;
};
#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/poll.h"
struct poll_table_struct {
   void (*_qproc)(struct file *, wait_queue_head_t *, struct poll_table_struct *) ;
   __poll_t _key ;
};
#line 70  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/neighbour.h"
struct neigh_table;
#line 70  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/neighbour.h"
struct neigh_parms {
   possible_net_t net ;
   struct net_device *dev ;
   struct list_head list ;
   int (*neigh_setup)(struct neighbour *) ;
   struct neigh_table *tbl ;
   void *sysctl_table ;
   int dead ;
   refcount_t refcnt ;
   struct callback_head callback_head ;
   int reachable_time ;
   int data[13U] ;
   unsigned long data_state[1U] ;
};
#line 112  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/neighbour.h"
struct neigh_statistics {
   unsigned long allocs ;
   unsigned long destroys ;
   unsigned long hash_grows ;
   unsigned long res_failed ;
   unsigned long lookups ;
   unsigned long hits ;
   unsigned long rcv_probes_mcast ;
   unsigned long rcv_probes_ucast ;
   unsigned long periodic_gc_runs ;
   unsigned long forced_gc_runs ;
   unsigned long unres_discards ;
   unsigned long table_fulls ;
};
#line 134 
struct neigh_ops;
#line 134  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/neighbour.h"
struct neighbour {
   struct neighbour *next ;
   struct neigh_table *tbl ;
   struct neigh_parms *parms ;
   unsigned long confirmed ;
   unsigned long updated ;
   rwlock_t lock ;
   refcount_t refcnt ;
   unsigned int arp_queue_len_bytes ;
   struct sk_buff_head arp_queue ;
   struct timer_list timer ;
   unsigned long used ;
   atomic_t probes ;
   __u8 flags ;
   __u8 nud_state ;
   __u8 type ;
   __u8 dead ;
   u8 protocol ;
   seqlock_t ha_lock ;
   unsigned char ha[32U] ;
   struct hh_cache hh ;
   int (*output)(struct neighbour *, struct sk_buff *) ;
   struct neigh_ops *ops ;
   struct list_head gc_list ;
   struct callback_head rcu ;
   struct net_device *dev ;
   u8 primary_key[0U] ;
} __attribute__((__designated_init__));
#line 163  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/neighbour.h"
struct neigh_ops {
   int family ;
   void (*solicit)(struct neighbour *, struct sk_buff *) ;
   void (*error_report)(struct neighbour *, struct sk_buff *) ;
   int (*output)(struct neighbour *, struct sk_buff *) ;
   int (*connected_output)(struct neighbour *, struct sk_buff *) ;
};
#line 171  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/neighbour.h"
struct pneigh_entry {
   struct pneigh_entry *next ;
   possible_net_t net ;
   struct net_device *dev ;
   u8 flags ;
   u8 protocol ;
   u8 key[0U] ;
};
#line 186  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/neighbour.h"
struct neigh_hash_table {
   struct neighbour **hash_buckets ;
   unsigned int hash_shift ;
   __u32 hash_rnd[4U] ;
   struct callback_head rcu ;
};
#line 194  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/neighbour.h"
struct neigh_table {
   int family ;
   unsigned int entry_size ;
   unsigned int key_len ;
   __be16 protocol ;
   __u32 (*hash)(void *, struct net_device *, __u32 *) ;
   bool (*key_eq)(struct neighbour *, void *) ;
   int (*constructor)(struct neighbour *) ;
   int (*pconstructor)(struct pneigh_entry *) ;
   void (*pdestructor)(struct pneigh_entry *) ;
   void (*proxy_redo)(struct sk_buff *) ;
   bool (*allow_add)(struct net_device *, struct netlink_ext_ack *) ;
   char *id ;
   struct neigh_parms parms ;
   struct list_head parms_list ;
   int gc_interval ;
   int gc_thresh1 ;
   int gc_thresh2 ;
   int gc_thresh3 ;
   unsigned long last_flush ;
   struct delayed_work gc_work ;
   struct timer_list proxy_timer ;
   struct sk_buff_head proxy_queue ;
   atomic_t entries ;
   atomic_t gc_entries ;
   struct list_head gc_list ;
   rwlock_t lock ;
   unsigned long last_rand ;
   struct neigh_statistics *stats ;
   struct neigh_hash_table *nht ;
   struct pneigh_entry **phash_buckets ;
};
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/dst.h"
struct lwtunnel_state;
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/dst.h"
struct dst_entry {
   struct net_device *dev ;
   struct dst_ops *ops ;
   unsigned long _metrics ;
   unsigned long expires ;
   struct xfrm_state *xfrm ;
   int (*input)(struct sk_buff *) ;
   int (*output)(struct net *, struct sock *, struct sk_buff *) ;
   unsigned short flags ;
   short obsolete ;
   unsigned short header_len ;
   unsigned short trailer_len ;
   atomic_t __refcnt ;
   int __use ;
   unsigned long lastuse ;
   struct lwtunnel_state *lwtstate ;
   struct callback_head callback_head ;
   short error ;
   short __pad ;
   __u32 tclassid ;
};
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fib_rules.h"
struct fib_rule_hdr {
   __u8 family ;
   __u8 dst_len ;
   __u8 src_len ;
   __u8 tos ;
   __u8 table ;
   __u8 res1 ;
   __u8 res2 ;
   __u8 action ;
   __u32 flags ;
};
#line 38  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fib_rules.h"
struct fib_rule_port_range {
   __u16 start ;
   __u16 end ;
};
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/fib_notifier.h"
struct fib_notifier_ops {
   int family ;
   struct list_head list ;
   unsigned int (*fib_seq_read)(struct net *) ;
   int (*fib_dump)(struct net *, struct notifier_block *, struct netlink_ext_ack *) ;
   struct module *owner ;
   struct callback_head rcu ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/fib_rules.h"
struct fib_kuid_range {
   kuid_t start ;
   kuid_t end ;
};
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/fib_rules.h"
struct fib_rule {
   struct list_head list ;
   int iifindex ;
   int oifindex ;
   u32 mark ;
   u32 mark_mask ;
   u32 flags ;
   u32 table ;
   u8 action ;
   u8 l3mdev ;
   u8 proto ;
   u8 ip_proto ;
   u32 target ;
   __be64 tun_id ;
   struct fib_rule *ctarget ;
   struct net *fr_net ;
   refcount_t refcnt ;
   u32 pref ;
   int suppress_ifgroup ;
   int suppress_prefixlen ;
   char iifname[16U] ;
   char oifname[16U] ;
   struct fib_kuid_range uid_range ;
   struct fib_rule_port_range sport_range ;
   struct fib_rule_port_range dport_range ;
   struct callback_head rcu ;
};
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/fib_rules.h"
struct fib_lookup_arg {
   void *lookup_ptr ;
   void *lookup_data ;
   void *result ;
   struct fib_rule *rule ;
   u32 table ;
   int flags ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/fib_rules.h"
struct fib_rules_ops {
   int family ;
   struct list_head list ;
   int rule_size ;
   int addr_size ;
   int unresolved_rules ;
   int nr_goto_rules ;
   unsigned int fib_rules_seq ;
   int (*action)(struct fib_rule *, struct flowi *, int , struct fib_lookup_arg *) ;
   bool (*suppress)(struct fib_rule *, struct fib_lookup_arg *) ;
   int (*match)(struct fib_rule *, struct flowi *, int ) ;
   int (*configure)(struct fib_rule *, struct sk_buff *, struct fib_rule_hdr *, struct nlattr **, struct netlink_ext_ack *) ;
   int (*delete)(struct fib_rule *) ;
   int (*compare)(struct fib_rule *, struct fib_rule_hdr *, struct nlattr **) ;
   int (*fill)(struct fib_rule *, struct sk_buff *, struct fib_rule_hdr *) ;
   size_t (*nlmsg_payload)(struct fib_rule *) ;
   void (*flush_cache)(struct fib_rules_ops *) ;
   int nlgroup ;
   struct nla_policy *policy ;
   struct list_head rules_list ;
   struct module *owner ;
   struct net *fro_net ;
   struct callback_head rcu ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/l3mdev.h"
struct l3mdev_ops {
   u32 (*l3mdev_fib_table)(struct net_device *) ;
   struct sk_buff *(*l3mdev_l3_rcv)(struct net_device *, struct sk_buff *, u16 ) ;
   struct sk_buff *(*l3mdev_l3_out)(struct net_device *, struct sock *, struct sk_buff *, u16 ) ;
   struct dst_entry *(*l3mdev_link_scope_lookup)(struct net_device *, struct flowi6 *) ;
};
#line 202  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/l3mdev.h"
struct __anonstruct_socket_lock_t_885 {
   spinlock_t slock ;
   int owned ;
   wait_queue_head_t wq ;
   struct lockdep_map dep_map ;
};
#line 202  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/l3mdev.h"
typedef struct __anonstruct_socket_lock_t_885 socket_lock_t;
#line 108  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
struct proto;
#line 109  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
typedef __u32 __portpair;
#line 114  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
typedef __u64 __addrpair;
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
struct __anonstruct_887 {
   __be32 skc_daddr ;
   __be32 skc_rcv_saddr ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_886 {
   __addrpair skc_addrpair ;
   struct __anonstruct_887 __anonCompField___anonunion_886_178 ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_888 {
   unsigned int skc_hash ;
   __u16 skc_u16hashes[2U] ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
struct __anonstruct_890 {
   __be16 skc_dport ;
   __u16 skc_num ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_889 {
   __portpair skc_portpair ;
   struct __anonstruct_890 __anonCompField___anonunion_889_181 ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_891 {
   struct hlist_node skc_bind_node ;
   struct hlist_node skc_portaddr_node ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_892 {
   unsigned long skc_flags ;
   struct sock *skc_listener ;
   struct inet_timewait_death_row *skc_tw_dr ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_893 {
   struct hlist_node skc_node ;
   struct hlist_nulls_node skc_nulls_node ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_894 {
   int skc_incoming_cpu ;
   u32 skc_rcv_wnd ;
   u32 skc_tw_rcv_nxt ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_895 {
   u32 skc_rxhash ;
   u32 skc_window_clamp ;
   u32 skc_tw_snd_nxt ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
struct sock_common {
   union __anonunion_886 __anonCompField_sock_common_179 ;
   union __anonunion_888 __anonCompField_sock_common_180 ;
   union __anonunion_889 __anonCompField_sock_common_182 ;
   unsigned short skc_family ;
   unsigned char skc_state ;
   unsigned char skc_reuse : 4 ;
   unsigned char skc_reuseport : 1 ;
   unsigned char skc_ipv6only : 1 ;
   unsigned char skc_net_refcnt : 1 ;
   int skc_bound_dev_if ;
   union __anonunion_891 __anonCompField_sock_common_183 ;
   struct proto *skc_prot ;
   possible_net_t skc_net ;
   struct in6_addr skc_v6_daddr ;
   struct in6_addr skc_v6_rcv_saddr ;
   atomic64_t skc_cookie ;
   union __anonunion_892 __anonCompField_sock_common_184 ;
   int skc_dontcopy_begin[0U] ;
   union __anonunion_893 __anonCompField_sock_common_185 ;
   unsigned short skc_tx_queue_mapping ;
   unsigned short skc_rx_queue_mapping ;
   union __anonunion_894 __anonCompField_sock_common_186 ;
   refcount_t skc_refcnt ;
   int skc_dontcopy_end[0U] ;
   union __anonunion_895 __anonCompField_sock_common_187 ;
};
#line 231 
struct bpf_sk_storage;
#line 323  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
struct __anonstruct_sk_backlog_896 {
   atomic_t rmem_alloc ;
   int len ;
   struct sk_buff *head ;
   struct sk_buff *tail ;
};
#line 323  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_897 {
   struct socket_wq *sk_wq ;
   struct socket_wq *sk_wq_raw ;
};
#line 323  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_898 {
   struct sk_buff *sk_send_head ;
   struct rb_root tcp_rtx_queue ;
};
#line 323  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
struct sock {
   struct sock_common __sk_common ;
   socket_lock_t sk_lock ;
   atomic_t sk_drops ;
   int sk_rcvlowat ;
   struct sk_buff_head sk_error_queue ;
   struct sk_buff *sk_rx_skb_cache ;
   struct sk_buff_head sk_receive_queue ;
   struct __anonstruct_sk_backlog_896 sk_backlog ;
   int sk_forward_alloc ;
   unsigned int sk_ll_usec ;
   unsigned int sk_napi_id ;
   int sk_rcvbuf ;
   struct sk_filter *sk_filter ;
   union __anonunion_897 __anonCompField_sock_188 ;
   struct xfrm_policy *sk_policy[2U] ;
   struct dst_entry *sk_rx_dst ;
   struct dst_entry *sk_dst_cache ;
   atomic_t sk_omem_alloc ;
   int sk_sndbuf ;
   int sk_wmem_queued ;
   refcount_t sk_wmem_alloc ;
   unsigned long sk_tsq_flags ;
   union __anonunion_898 __anonCompField_sock_189 ;
   struct sk_buff *sk_tx_skb_cache ;
   struct sk_buff_head sk_write_queue ;
   __s32 sk_peek_off ;
   int sk_write_pending ;
   __u32 sk_dst_pending_confirm ;
   u32 sk_pacing_status ;
   long sk_sndtimeo ;
   struct timer_list sk_timer ;
   __u32 sk_priority ;
   __u32 sk_mark ;
   unsigned long sk_pacing_rate ;
   unsigned long sk_max_pacing_rate ;
   struct page_frag sk_frag ;
   netdev_features_t sk_route_caps ;
   netdev_features_t sk_route_nocaps ;
   netdev_features_t sk_route_forced_caps ;
   int sk_gso_type ;
   unsigned int sk_gso_max_size ;
   gfp_t sk_allocation ;
   __u32 sk_txhash ;
   unsigned int __sk_flags_offset[0U] ;
   unsigned int sk_padding : 1 ;
   unsigned int sk_kern_sock : 1 ;
   unsigned int sk_no_check_tx : 1 ;
   unsigned int sk_no_check_rx : 1 ;
   unsigned int sk_userlocks : 4 ;
   unsigned int sk_protocol : 8 ;
   unsigned int sk_type : 16 ;
   u16 sk_gso_max_segs ;
   u8 sk_pacing_shift ;
   unsigned long sk_lingertime ;
   struct proto *sk_prot_creator ;
   rwlock_t sk_callback_lock ;
   int sk_err ;
   int sk_err_soft ;
   u32 sk_ack_backlog ;
   u32 sk_max_ack_backlog ;
   kuid_t sk_uid ;
   struct pid *sk_peer_pid ;
   struct cred *sk_peer_cred ;
   long sk_rcvtimeo ;
   ktime_t sk_stamp ;
   u16 sk_tsflags ;
   u8 sk_shutdown ;
   u32 sk_tskey ;
   atomic_t sk_zckey ;
   u8 sk_clockid ;
   u8 sk_txtime_deadline_mode : 1 ;
   u8 sk_txtime_report_errors : 1 ;
   u8 sk_txtime_unused : 6 ;
   struct socket *sk_socket ;
   void *sk_user_data ;
   void *sk_security ;
   struct sock_cgroup_data sk_cgrp_data ;
   struct mem_cgroup *sk_memcg ;
   void (*sk_state_change)(struct sock *) ;
   void (*sk_data_ready)(struct sock *) ;
   void (*sk_write_space)(struct sock *) ;
   void (*sk_error_report)(struct sock *) ;
   int (*sk_backlog_rcv)(struct sock *, struct sk_buff *) ;
   struct sk_buff *(*sk_validate_xmit_skb)(struct sock *, struct net_device *, struct sk_buff *) ;
   void (*sk_destruct)(struct sock *) ;
   struct sock_reuseport *sk_reuseport_cb ;
   struct bpf_sk_storage *sk_bpf_storage ;
   struct callback_head sk_rcu ;
};
#line 1048 
struct request_sock_ops;
#line 1049 
struct timewait_sock_ops;
#line 1050 
struct raw_hashinfo;
#line 1051 
struct smc_hashinfo;
#line 1071 
struct udp_table;
#line 1071  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_h_933 {
   struct inet_hashinfo *hashinfo ;
   struct udp_table *udp_table ;
   struct raw_hashinfo *raw_hash ;
   struct smc_hashinfo *smc_hash ;
};
#line 1071  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
struct proto {
   void (*close)(struct sock *, long ) ;
   int (*pre_connect)(struct sock *, struct sockaddr *, int ) ;
   int (*connect)(struct sock *, struct sockaddr *, int ) ;
   int (*disconnect)(struct sock *, int ) ;
   struct sock *(*accept)(struct sock *, int , int *, bool ) ;
   int (*ioctl)(struct sock *, int , unsigned long ) ;
   int (*init)(struct sock *) ;
   void (*destroy)(struct sock *) ;
   void (*shutdown)(struct sock *, int ) ;
   int (*setsockopt)(struct sock *, int , int , char *, unsigned int ) ;
   int (*getsockopt)(struct sock *, int , int , char *, int *) ;
   void (*keepalive)(struct sock *, int ) ;
   int (*compat_setsockopt)(struct sock *, int , int , char *, unsigned int ) ;
   int (*compat_getsockopt)(struct sock *, int , int , char *, int *) ;
   int (*compat_ioctl)(struct sock *, unsigned int , unsigned long ) ;
   int (*sendmsg)(struct sock *, struct msghdr *, size_t ) ;
   int (*recvmsg)(struct sock *, struct msghdr *, size_t , int , int , int *) ;
   int (*sendpage)(struct sock *, struct page *, int , size_t , int ) ;
   int (*bind)(struct sock *, struct sockaddr *, int ) ;
   int (*backlog_rcv)(struct sock *, struct sk_buff *) ;
   void (*release_cb)(struct sock *) ;
   int (*hash)(struct sock *) ;
   void (*unhash)(struct sock *) ;
   void (*rehash)(struct sock *) ;
   int (*get_port)(struct sock *, unsigned short ) ;
   unsigned int inuse_idx ;
   bool (*stream_memory_free)(struct sock *, int ) ;
   bool (*stream_memory_read)(struct sock *) ;
   void (*enter_memory_pressure)(struct sock *) ;
   void (*leave_memory_pressure)(struct sock *) ;
   atomic_long_t *memory_allocated ;
   struct percpu_counter *sockets_allocated ;
   unsigned long *memory_pressure ;
   long *sysctl_mem ;
   int *sysctl_wmem ;
   int *sysctl_rmem ;
   u32 sysctl_wmem_offset ;
   u32 sysctl_rmem_offset ;
   int max_header ;
   bool no_autobind ;
   struct kmem_cache *slab ;
   unsigned int obj_size ;
   slab_flags_t slab_flags ;
   unsigned int useroffset ;
   unsigned int usersize ;
   struct percpu_counter *orphan_count ;
   struct request_sock_ops *rsk_prot ;
   struct timewait_sock_ops *twsk_prot ;
   union __anonunion_h_933 h ;
   struct module *owner ;
   char name[32U] ;
   struct list_head node ;
   int (*diag_destroy)(struct sock *, int ) ;
} __attribute__((__designated_init__));
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/request_sock.h"
struct request_sock_ops {
   int family ;
   unsigned int obj_size ;
   struct kmem_cache *slab ;
   char *slab_name ;
   int (*rtx_syn_ack)(struct sock *, struct request_sock *) ;
   void (*send_ack)(struct sock *, struct sk_buff *, struct request_sock *) ;
   void (*send_reset)(struct sock *, struct sk_buff *) ;
   void (*destructor)(struct request_sock *) ;
   void (*syn_ack_timeout)(struct request_sock *) ;
};
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/request_sock.h"
struct request_sock {
   struct sock_common __req_common ;
   struct request_sock *dl_next ;
   u16 mss ;
   u8 num_retrans ;
   u8 cookie_ts : 1 ;
   u8 num_timeout : 7 ;
   u32 ts_recent ;
   struct timer_list rsk_timer ;
   struct request_sock_ops *rsk_ops ;
   struct sock *sk ;
   u32 *saved_syn ;
   u32 secid ;
   u32 peer_secid ;
};
#line 63  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ipv6.h"
struct ipv6_stable_secret {
   bool initialized ;
   struct in6_addr secret ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ipv6.h"
struct ipv6_devconf {
   __s32 forwarding ;
   __s32 hop_limit ;
   __s32 mtu6 ;
   __s32 accept_ra ;
   __s32 accept_redirects ;
   __s32 autoconf ;
   __s32 dad_transmits ;
   __s32 rtr_solicits ;
   __s32 rtr_solicit_interval ;
   __s32 rtr_solicit_max_interval ;
   __s32 rtr_solicit_delay ;
   __s32 force_mld_version ;
   __s32 mldv1_unsolicited_report_interval ;
   __s32 mldv2_unsolicited_report_interval ;
   __s32 use_tempaddr ;
   __s32 temp_valid_lft ;
   __s32 temp_prefered_lft ;
   __s32 regen_max_retry ;
   __s32 max_desync_factor ;
   __s32 max_addresses ;
   __s32 accept_ra_defrtr ;
   __s32 accept_ra_min_hop_limit ;
   __s32 accept_ra_pinfo ;
   __s32 ignore_routes_with_linkdown ;
   __s32 accept_ra_rtr_pref ;
   __s32 rtr_probe_interval ;
   __s32 accept_ra_rt_info_min_plen ;
   __s32 accept_ra_rt_info_max_plen ;
   __s32 proxy_ndp ;
   __s32 accept_source_route ;
   __s32 accept_ra_from_local ;
   __s32 optimistic_dad ;
   __s32 use_optimistic ;
   __s32 mc_forwarding ;
   __s32 disable_ipv6 ;
   __s32 drop_unicast_in_l2_multicast ;
   __s32 accept_dad ;
   __s32 force_tllao ;
   __s32 ndisc_notify ;
   __s32 suppress_frag_ndisc ;
   __s32 accept_ra_mtu ;
   __s32 drop_unsolicited_na ;
   struct ipv6_stable_secret stable_secret ;
   __s32 use_oif_addrs_only ;
   __s32 keep_addr_on_down ;
   __s32 seg6_enabled ;
   __s32 seg6_require_hmac ;
   __u32 enhanced_dad ;
   __u32 addr_gen_mode ;
   __s32 disable_policy ;
   __s32 ndisc_tclass ;
   struct ctl_table_header *sysctl_header ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/timewait_sock.h"
struct timewait_sock_ops {
   struct kmem_cache *twsk_slab ;
   char *twsk_slab_name ;
   unsigned int twsk_obj_size ;
   int (*twsk_unique)(struct sock *, struct sock *, void *) ;
   void (*twsk_destructor)(struct sock *) ;
};
#line 225  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/mac80211.h"
struct ieee80211_chanctx_conf {
   struct cfg80211_chan_def def ;
   struct cfg80211_chan_def min_def ;
   u8 rx_chains_static ;
   u8 rx_chains_dynamic ;
   bool radar_enabled ;
   u8 drv_priv[0U] ;
};
#line 267 
struct ieee80211_vif;
#line 440 
struct ieee80211_sta;
#line 471  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/mac80211.h"
struct ieee80211_mu_group_data {
   u8 membership[8U] ;
   u8 position[16U] ;
};
#line 484  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/mac80211.h"
struct ieee80211_ftm_responder_params {
   u8 *lci ;
   u8 *civicloc ;
   size_t lci_len ;
   size_t civicloc_len ;
};
#line 608  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/mac80211.h"
struct ieee80211_bss_conf {
   u8 *bssid ;
   u8 bss_color ;
   u8 htc_trig_based_pkt_ext ;
   bool multi_sta_back_32bit ;
   bool uora_exists ;
   bool ack_enabled ;
   u8 uora_ocw_range ;
   u16 frame_time_rts_th ;
   bool he_support ;
   bool twt_requester ;
   bool twt_responder ;
   bool assoc ;
   bool ibss_joined ;
   bool ibss_creator ;
   u16 aid ;
   bool use_cts_prot ;
   bool use_short_preamble ;
   bool use_short_slot ;
   bool enable_beacon ;
   u8 dtim_period ;
   u16 beacon_int ;
   u16 assoc_capability ;
   u64 sync_tsf ;
   u32 sync_device_ts ;
   u8 sync_dtim_count ;
   u32 basic_rates ;
   struct ieee80211_rate *beacon_rate ;
   int mcast_rate[4U] ;
   u16 ht_operation_mode ;
   s32 cqm_rssi_thold ;
   u32 cqm_rssi_hyst ;
   s32 cqm_rssi_low ;
   s32 cqm_rssi_high ;
   struct cfg80211_chan_def chandef ;
   struct ieee80211_mu_group_data mu_group ;
   __be32 arp_addr_list[4U] ;
   int arp_addr_cnt ;
   bool qos ;
   bool idle ;
   bool ps ;
   u8 ssid[32U] ;
   size_t ssid_len ;
   bool hidden_ssid ;
   int txpower ;
   enum nl80211_tx_power_setting txpower_type ;
   struct ieee80211_p2p_noa_attr p2p_noa_attr ;
   bool allow_p2p_go_ps ;
   u16 max_idle_period ;
   bool protected_keep_alive ;
   bool ftm_responder ;
   struct ieee80211_ftm_responder_params *ftmr_params ;
   bool nontransmitted ;
   u8 transmitter_bssid[6U] ;
   u8 bssid_index ;
   u8 bssid_indicator ;
   bool ema_ap ;
   u8 profile_periodicity ;
   struct ieee80211_he_operation he_operation ;
   struct ieee80211_he_obss_pd he_obss_pd ;
};
#line 1430 
enum ieee80211_smps_mode {
    IEEE80211_SMPS_AUTOMATIC = 0,
    IEEE80211_SMPS_OFF = 1,
    IEEE80211_SMPS_STATIC = 2,
    IEEE80211_SMPS_DYNAMIC = 3,
    IEEE80211_SMPS_NUM_MODES = 4
};
#line 1522  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/mac80211.h"
struct ieee80211_conf {
   u32 flags ;
   int power_level ;
   int dynamic_ps_timeout ;
   u16 listen_interval ;
   u8 ps_dtim_period ;
   u8 long_frame_max_tx_count ;
   u8 short_frame_max_tx_count ;
   struct cfg80211_chan_def chandef ;
   bool radar_enabled ;
   enum ieee80211_smps_mode smps_mode ;
};
#line 1627 
struct ieee80211_txq;
#line 1627  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/mac80211.h"
struct ieee80211_vif {
   enum nl80211_iftype type ;
   struct ieee80211_bss_conf bss_conf ;
   u8 addr[6U] ;
   bool p2p ;
   bool csa_active ;
   bool mu_mimo_owner ;
   u8 cab_queue ;
   u8 hw_queue[4U] ;
   struct ieee80211_txq *txq ;
   struct ieee80211_chanctx_conf *chanctx_conf ;
   u32 driver_flags ;
   struct dentry *debugfs_dir ;
   unsigned int probe_req_reg ;
   bool txqs_stopped[4U] ;
   u8 drv_priv[0U] ;
};
#line 1846  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/mac80211.h"
struct ieee80211_cipher_scheme {
   u32 cipher ;
   u16 iftype ;
   u8 hdr_len ;
   u8 pn_len ;
   u8 pn_off ;
   u8 key_idx_off ;
   u8 key_idx_mask ;
   u8 key_idx_shift ;
   u8 mic_len ;
};
#line 1870 
enum ieee80211_sta_rx_bandwidth {
    IEEE80211_STA_RX_BW_20 = 0,
    IEEE80211_STA_RX_BW_40 = 1,
    IEEE80211_STA_RX_BW_80 = 2,
    IEEE80211_STA_RX_BW_160 = 3
};
#line 1915  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/mac80211.h"
struct __anonstruct_rate_1020 {
   s8 idx ;
   u8 count ;
   u8 count_cts ;
   u8 count_rts ;
   u16 flags ;
};
#line 1915  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/mac80211.h"
struct ieee80211_sta_rates {
   struct callback_head callback_head ;
   struct __anonstruct_rate_1020 rate[4U] ;
};
#line 1939  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/mac80211.h"
struct ieee80211_sta_txpwr {
   s16 power ;
   enum nl80211_tx_power_setting type ;
};
#line 1991  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/mac80211.h"
struct ieee80211_sta {
   u32 supp_rates[4U] ;
   u8 addr[6U] ;
   u16 aid ;
   struct ieee80211_sta_ht_cap ht_cap ;
   struct ieee80211_sta_vht_cap vht_cap ;
   struct ieee80211_sta_he_cap he_cap ;
   u16 max_rx_aggregation_subframes ;
   bool wme ;
   u8 uapsd_queues ;
   u8 max_sp ;
   u8 rx_nss ;
   enum ieee80211_sta_rx_bandwidth bandwidth ;
   enum ieee80211_smps_mode smps_mode ;
   struct ieee80211_sta_rates *rates ;
   bool tdls ;
   bool tdls_initiator ;
   bool mfp ;
   u8 max_amsdu_subframes ;
   u16 max_amsdu_len ;
   bool support_p2p_ps ;
   u16 max_rc_amsdu_len ;
   u16 max_tid_amsdu_len[16U] ;
   struct ieee80211_sta_txpwr txpwr ;
   struct ieee80211_txq *txq[17U] ;
   u8 drv_priv[0U] ;
};
#line 2074  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/mac80211.h"
struct ieee80211_txq {
   struct ieee80211_vif *vif ;
   struct ieee80211_sta *sta ;
   u8 tid ;
   u8 ac ;
   u8 drv_priv[0U] ;
};
#line 2487  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/mac80211.h"
struct __anonstruct_radiotap_timestamp_1021 {
   int units_pos ;
   s16 accuracy ;
};
#line 2487  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/mac80211.h"
struct ieee80211_hw {
   struct ieee80211_conf conf ;
   struct wiphy *wiphy ;
   char *rate_control_algorithm ;
   void *priv ;
   unsigned long flags[1U] ;
   unsigned int extra_tx_headroom ;
   unsigned int extra_beacon_tailroom ;
   int vif_data_size ;
   int sta_data_size ;
   int chanctx_data_size ;
   int txq_data_size ;
   u16 queues ;
   u16 max_listen_interval ;
   s8 max_signal ;
   u8 max_rates ;
   u8 max_report_rates ;
   u8 max_rate_tries ;
   u16 max_rx_aggregation_subframes ;
   u16 max_tx_aggregation_subframes ;
   u8 max_tx_fragments ;
   u8 offchannel_tx_hw_queue ;
   u8 radiotap_mcs_details ;
   u16 radiotap_vht_details ;
   struct __anonstruct_radiotap_timestamp_1021 radiotap_timestamp ;
   netdev_features_t netdev_features ;
   u8 uapsd_queues ;
   u8 uapsd_max_sp_len ;
   u8 n_cipher_schemes ;
   struct ieee80211_cipher_scheme *cipher_schemes ;
   u8 max_nan_de_entries ;
   u8 tx_sk_pacing_shift ;
   u8 weight_multiplier ;
   u32 max_mtu ;
};
#line 6748 
enum wcn36xx_hal_bss_type {
    WCN36XX_HAL_INFRASTRUCTURE_MODE = 0,
    WCN36XX_HAL_INFRA_AP_MODE = 1,
    WCN36XX_HAL_IBSS_MODE = 2,
    WCN36XX_HAL_BTAMP_STA_MODE = 3,
    WCN36XX_HAL_BTAMP_AP_MODE = 4,
    WCN36XX_HAL_AUTO_MODE = 5,
    WCN36XX_HAL_DONOT_USE_BSS_TYPE = 2147483647
};
#line 6774 
enum ani_ed_type {
    WCN36XX_HAL_ED_NONE = 0,
    WCN36XX_HAL_ED_WEP40 = 1,
    WCN36XX_HAL_ED_WEP104 = 2,
    WCN36XX_HAL_ED_TKIP = 3,
    WCN36XX_HAL_ED_CCMP = 4,
    WCN36XX_HAL_ED_WPI = 5,
    WCN36XX_HAL_ED_AES_128_CMAC = 6,
    WCN36XX_HAL_ED_NOT_IMPLEMENTED = 2147483647
};
#line 1136  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/wcn36xx/hal.h"
struct wcn36xx_hal_mac_ssid {
   u8 length ;
   u8 ssid[32U] ;
} __attribute__((__packed__));
#line 52  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/wcn36xx/smd.h"
struct wcn36xx;
#line 164  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/wcn36xx/txrx.h"
enum wcn36xx_dxe_ch_type {
    WCN36XX_DXE_CH_TX_L = 0,
    WCN36XX_DXE_CH_TX_H = 1,
    WCN36XX_DXE_CH_RX_L = 2,
    WCN36XX_DXE_CH_RX_H = 3
};
#line 171 
enum wcn36xx_dxe_ch_desc_num {
    WCN36XX_DXE_CH_DESC_NUMB_TX_L = 128,
    WCN36XX_DXE_CH_DESC_NUMB_TX_H = 10,
    WCN36XX_DXE_CH_DESC_NUMB_RX_L = 512,
    WCN36XX_DXE_CH_DESC_NUMB_RX_H = 40
};
#line 406  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/wcn36xx/dxe.h"
struct wcn36xx_dxe_desc {
   u32 ctrl ;
   u32 fr_len ;
   u32 src_addr_l ;
   u32 dst_addr_l ;
   u32 phy_next_l ;
   u32 src_addr_h ;
   u32 dst_addr_h ;
   u32 phy_next_h ;
} __attribute__((__packed__));
#line 419  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/wcn36xx/dxe.h"
struct wcn36xx_dxe_ctl {
   struct wcn36xx_dxe_ctl *next ;
   struct wcn36xx_dxe_desc *desc ;
   unsigned int desc_phy_addr ;
   int ctl_blk_order ;
   struct sk_buff *skb ;
   void *bd_cpu_addr ;
   dma_addr_t bd_phy_addr ;
};
#line 429  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/wcn36xx/dxe.h"
struct wcn36xx_dxe_ch {
   spinlock_t lock ;
   enum wcn36xx_dxe_ch_type ch_type ;
   void *cpu_addr ;
   dma_addr_t dma_addr ;
   enum wcn36xx_dxe_ch_desc_num desc_num ;
   struct wcn36xx_dxe_ctl *head_blk_ctl ;
   struct wcn36xx_dxe_ctl *tail_blk_ctl ;
   u32 dxe_wq ;
   u32 ctrl_bd ;
   u32 ctrl_skb ;
   u32 reg_ctrl ;
   u32 def_ctrl ;
};
#line 448  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/wcn36xx/dxe.h"
struct wcn36xx_dxe_mem_pool {
   int chunk_size ;
   void *virt_addr ;
   dma_addr_t phy_addr ;
};
#line 453 
struct wcn36xx_vif;
#line 470 
enum wcn36xx_power_state {
    WCN36XX_FULL_POWER = 0,
    WCN36XX_BMPS = 1
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/wcn36xx/debug.h"
struct wcn36xx_dfs_file {
   struct dentry *dentry ;
   u32 value ;
};
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/wcn36xx/debug.h"
struct wcn36xx_dfs_entry {
   struct dentry *rootdir ;
   struct wcn36xx_dfs_file file_bmps_switcher ;
   struct wcn36xx_dfs_file file_dump ;
};
#line 115  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/wcn36xx/wcn36xx.h"
struct wcn36xx_vif {
   struct list_head list ;
   u8 dtim_period ;
   enum ani_ed_type encrypt_type ;
   bool is_joining ;
   bool sta_assoc ;
   struct wcn36xx_hal_mac_ssid ssid ;
   enum wcn36xx_hal_bss_type bss_type ;
   enum wcn36xx_power_state pw_state ;
   u8 bss_index ;
   u8 self_sta_index ;
   u8 self_dpu_desc_index ;
   u8 self_ucast_dpu_sign ;
   struct list_head sta_list ;
};
#line 177 
struct qcom_smem_state;
#line 177  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/wcn36xx/wcn36xx.h"
struct wcn36xx {
   struct ieee80211_hw *hw ;
   struct device *dev ;
   struct list_head vif_list ;
   struct firmware *nv ;
   u8 fw_revision ;
   u8 fw_version ;
   u8 fw_minor ;
   u8 fw_major ;
   u32 fw_feat_caps[4U] ;
   bool is_pronto ;
   u8 crm_version[65U] ;
   u8 wlan_version[65U] ;
   bool first_boot ;
   int tx_irq ;
   int rx_irq ;
   void *ccu_base ;
   void *dxe_base ;
   struct rpmsg_endpoint *smd_channel ;
   struct qcom_smem_state *tx_enable_state ;
   unsigned int tx_enable_state_bit ;
   struct qcom_smem_state *tx_rings_empty_state ;
   unsigned int tx_rings_empty_state_bit ;
   struct mutex conf_mutex ;
   u8 *hal_buf ;
   size_t hal_rsp_len ;
   struct mutex hal_mutex ;
   struct completion hal_rsp_compl ;
   struct workqueue_struct *hal_ind_wq ;
   struct work_struct hal_ind_work ;
   spinlock_t hal_ind_lock ;
   struct list_head hal_ind_queue ;
   struct work_struct scan_work ;
   struct cfg80211_scan_request *scan_req ;
   int scan_freq ;
   int scan_band ;
   struct mutex scan_lock ;
   bool scan_aborted ;
   struct wcn36xx_dxe_ch dxe_tx_l_ch ;
   struct wcn36xx_dxe_ch dxe_tx_h_ch ;
   struct wcn36xx_dxe_ch dxe_rx_l_ch ;
   struct wcn36xx_dxe_ch dxe_rx_h_ch ;
   spinlock_t dxe_lock ;
   bool queues_stopped ;
   struct wcn36xx_dxe_mem_pool mgmt_mem_pool ;
   struct wcn36xx_dxe_mem_pool data_mem_pool ;
   struct sk_buff *tx_ack_skb ;
   unsigned int rf_id ;
   struct wcn36xx_dfs_entry dfs ;
};
#line 164  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef unsigned long irq_hw_number_t;
#line 66  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
union __anonunion___u_1037 {
   struct list_head *__val ;
   char __c[1U] ;
};
#line 106  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
union __anonunion___u_1039 {
   struct list_head *__val ;
   char __c[1U] ;
};
#line 690  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cpumask.h"
typedef struct cpumask *cpumask_var_t;
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 266  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/apic.h"
struct irq_data;
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/firmware.h"
struct firmware {
   size_t size ;
   u8 *data ;
   struct page **pages ;
   void *priv ;
};
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/device.h"
struct pdev_archdata {
   };
#line 1913  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct mfd_cell;
#line 1915 
struct platform_device_id;
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/platform_device.h"
struct platform_device {
   char *name ;
   int id ;
   bool id_auto ;
   struct device dev ;
   u64 dma_mask ;
   u32 num_resources ;
   struct resource *resource ;
   struct platform_device_id *id_entry ;
   char *driver_override ;
   struct mfd_cell *mfd_cell ;
   struct pdev_archdata archdata ;
};
#line 196  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/platform_device.h"
struct platform_driver {
   int (*probe)(struct platform_device *) ;
   int (*remove)(struct platform_device *) ;
   void (*shutdown)(struct platform_device *) ;
   int (*suspend)(struct platform_device *, pm_message_t ) ;
   int (*resume)(struct platform_device *) ;
   struct device_driver driver ;
   struct platform_device_id *id_table ;
   bool prevent_deferred_probe ;
};
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uuid.h"
typedef unsigned long kernel_ulong_t;
#line 210  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mod_devicetable.h"
struct acpi_device_id {
   __u8 id[9U] ;
   kernel_ulong_t driver_data ;
   __u32 cls ;
   __u32 cls_msk ;
};
#line 260  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mod_devicetable.h"
struct of_device_id {
   char name[32U] ;
   char type[32U] ;
   char compatible[128U] ;
   void *data ;
};
#line 446  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mod_devicetable.h"
struct rpmsg_device_id {
   char name[32U] ;
};
#line 582  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mod_devicetable.h"
struct platform_device_id {
   char name[20U] ;
   kernel_ulong_t driver_data ;
};
#line 439  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/property.h"
typedef u32 phandle;
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/of.h"
struct property {
   char *name ;
   int length ;
   void *value ;
   struct property *next ;
   unsigned long _flags ;
   struct bin_attribute attr ;
};
#line 51  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/of.h"
struct device_node {
   char *name ;
   phandle phandle ;
   char *full_name ;
   struct fwnode_handle fwnode ;
   struct property *properties ;
   struct property *deadprops ;
   struct device_node *parent ;
   struct device_node *child ;
   struct device_node *sibling ;
   struct kobject kobj ;
   unsigned long _flags ;
   void *data ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/of_device.h"
struct irq_desc;
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/irqhandler.h"
enum irqreturn {
    IRQ_NONE = 0,
    IRQ_HANDLED = 1,
    IRQ_WAKE_THREAD = 2
};
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/irqhandler.h"
typedef enum irqreturn irqreturn_t;
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/irq_regs.h"
struct msi_msg;
#line 33 
enum irqchip_irq_state;
#line 33 
enum irqchip_irq_state;
#line 65 
struct msi_desc;
#line 143  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/irq.h"
struct irq_common_data {
   unsigned int state_use_accessors ;
   unsigned int node ;
   void *handler_data ;
   struct msi_desc *msi_desc ;
   cpumask_var_t affinity ;
   cpumask_var_t effective_affinity ;
};
#line 173 
struct irq_chip;
#line 173  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/irq.h"
struct irq_data {
   u32 mask ;
   unsigned int irq ;
   unsigned long hwirq ;
   struct irq_common_data *common ;
   struct irq_chip *chip ;
   struct irq_domain *domain ;
   struct irq_data *parent_data ;
   void *chip_data ;
};
#line 449  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/irq.h"
struct irq_chip {
   struct device *parent_device ;
   char *name ;
   unsigned int (*irq_startup)(struct irq_data *) ;
   void (*irq_shutdown)(struct irq_data *) ;
   void (*irq_enable)(struct irq_data *) ;
   void (*irq_disable)(struct irq_data *) ;
   void (*irq_ack)(struct irq_data *) ;
   void (*irq_mask)(struct irq_data *) ;
   void (*irq_mask_ack)(struct irq_data *) ;
   void (*irq_unmask)(struct irq_data *) ;
   void (*irq_eoi)(struct irq_data *) ;
   int (*irq_set_affinity)(struct irq_data *, struct cpumask *, bool ) ;
   int (*irq_retrigger)(struct irq_data *) ;
   int (*irq_set_type)(struct irq_data *, unsigned int ) ;
   int (*irq_set_wake)(struct irq_data *, unsigned int ) ;
   void (*irq_bus_lock)(struct irq_data *) ;
   void (*irq_bus_sync_unlock)(struct irq_data *) ;
   void (*irq_cpu_online)(struct irq_data *) ;
   void (*irq_cpu_offline)(struct irq_data *) ;
   void (*irq_suspend)(struct irq_data *) ;
   void (*irq_resume)(struct irq_data *) ;
   void (*irq_pm_shutdown)(struct irq_data *) ;
   void (*irq_calc_mask)(struct irq_data *) ;
   void (*irq_print_chip)(struct irq_data *, struct seq_file *) ;
   int (*irq_request_resources)(struct irq_data *) ;
   void (*irq_release_resources)(struct irq_data *) ;
   void (*irq_compose_msi_msg)(struct irq_data *, struct msi_msg *) ;
   void (*irq_write_msi_msg)(struct irq_data *, struct msi_msg *) ;
   int (*irq_get_irqchip_state)(struct irq_data *, enum irqchip_irq_state , bool *) ;
   int (*irq_set_irqchip_state)(struct irq_data *, enum irqchip_irq_state , bool ) ;
   int (*irq_set_vcpu_affinity)(struct irq_data *, void *) ;
   void (*ipi_send_single)(struct irq_data *, unsigned int ) ;
   void (*ipi_send_mask)(struct irq_data *, struct cpumask *) ;
   int (*irq_nmi_setup)(struct irq_data *) ;
   void (*irq_nmi_teardown)(struct irq_data *) ;
   unsigned long flags ;
};
#line 512 
struct irq_affinity_notify;
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/irqdesc.h"
struct irqaction;
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/irqdesc.h"
struct irq_desc {
   struct irq_common_data irq_common_data ;
   struct irq_data irq_data ;
   unsigned int *kstat_irqs ;
   void (*handle_irq)(struct irq_desc *) ;
   struct irqaction *action ;
   unsigned int status_use_accessors ;
   unsigned int core_internal_state__do_not_mess_with_it ;
   unsigned int depth ;
   unsigned int wake_depth ;
   unsigned int tot_count ;
   unsigned int irq_count ;
   unsigned long last_unhandled ;
   unsigned int irqs_unhandled ;
   atomic_t threads_handled ;
   int threads_handled_last ;
   raw_spinlock_t lock ;
   struct cpumask *percpu_enabled ;
   struct cpumask *percpu_affinity ;
   struct cpumask *affinity_hint ;
   struct irq_affinity_notify *affinity_notify ;
   cpumask_var_t pending_mask ;
   unsigned long threads_oneshot ;
   atomic_t threads_active ;
   wait_queue_head_t wait_for_threads ;
   unsigned int nr_actions ;
   unsigned int no_suspend_depth ;
   unsigned int cond_suspend_depth ;
   unsigned int force_resume_depth ;
   struct proc_dir_entry *dir ;
   struct dentry *debugfs_file ;
   char *dev_name ;
   struct callback_head rcu ;
   struct kobject kobj ;
   struct mutex request_mutex ;
   int parent_irq ;
   struct module *owner ;
   char *name ;
} __attribute__((__aligned__(4096)));
#line 930  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/irq.h"
struct irq_chip_regs {
   unsigned long enable ;
   unsigned long disable ;
   unsigned long mask ;
   unsigned long ack ;
   unsigned long eoi ;
   unsigned long type ;
   unsigned long polarity ;
};
#line 953  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/irq.h"
struct irq_chip_type {
   struct irq_chip chip ;
   struct irq_chip_regs regs ;
   void (*handler)(struct irq_desc *) ;
   u32 type ;
   u32 mask_cache_priv ;
   u32 *mask_cache ;
};
#line 995  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/irq.h"
struct irq_chip_generic {
   raw_spinlock_t lock ;
   void *reg_base ;
   u32 (*reg_readl)(void *) ;
   void (*reg_writel)(u32 , void *) ;
   void (*suspend)(struct irq_chip_generic *) ;
   void (*resume)(struct irq_chip_generic *) ;
   unsigned int irq_base ;
   unsigned int irq_cnt ;
   u32 mask_cache ;
   u32 type_cache ;
   u32 polarity_cache ;
   u32 wake_enabled ;
   u32 wake_active ;
   unsigned int num_ct ;
   void *private ;
   unsigned long installed ;
   unsigned long unused ;
   struct irq_domain *domain ;
   struct list_head list ;
   struct irq_chip_type chip_types[0U] ;
};
#line 1017 
enum irq_gc_flags {
    IRQ_GC_INIT_MASK_CACHE = 1,
    IRQ_GC_INIT_NESTED_LOCK = 2,
    IRQ_GC_MASK_CACHE_PER_TYPE = 4,
    IRQ_GC_NO_MASK = 8,
    IRQ_GC_BE_IO = 16
};
#line 1045  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/irq.h"
struct irq_domain_chip_generic {
   unsigned int irqs_per_chip ;
   unsigned int num_chips ;
   unsigned int irq_flags_to_clear ;
   unsigned int irq_flags_to_set ;
   enum irq_gc_flags gc_flags ;
   struct irq_chip_generic *gc[0U] ;
};
#line 63  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/irqdomain.h"
struct irq_fwspec {
   struct fwnode_handle *fwnode ;
   int param_count ;
   u32 param[16U] ;
};
#line 68 
enum irq_domain_bus_token {
    DOMAIN_BUS_ANY = 0,
    DOMAIN_BUS_WIRED = 1,
    DOMAIN_BUS_GENERIC_MSI = 2,
    DOMAIN_BUS_PCI_MSI = 3,
    DOMAIN_BUS_PLATFORM_MSI = 4,
    DOMAIN_BUS_NEXUS = 5,
    DOMAIN_BUS_IPI = 6,
    DOMAIN_BUS_FSL_MC_MSI = 7,
    DOMAIN_BUS_TI_SCI_INTA_MSI = 8,
    DOMAIN_BUS_WAKEUP = 9
};
#line 104  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/irqdomain.h"
struct irq_domain_ops {
   int (*match)(struct irq_domain *, struct device_node *, enum irq_domain_bus_token ) ;
   int (*select)(struct irq_domain *, struct irq_fwspec *, enum irq_domain_bus_token ) ;
   int (*map)(struct irq_domain *, unsigned int , irq_hw_number_t ) ;
   void (*unmap)(struct irq_domain *, unsigned int ) ;
   int (*xlate)(struct irq_domain *, struct device_node *, u32 *, unsigned int , unsigned long *, unsigned int *) ;
   int (*alloc)(struct irq_domain *, unsigned int , unsigned int , void *) ;
   void (*free)(struct irq_domain *, unsigned int , unsigned int ) ;
   int (*activate)(struct irq_domain *, struct irq_data *, bool ) ;
   void (*deactivate)(struct irq_domain *, struct irq_data *) ;
   int (*translate)(struct irq_domain *, struct irq_fwspec *, unsigned long *, unsigned int *) ;
   void (*debug_show)(struct seq_file *, struct irq_domain *, struct irq_data *, int ) ;
};
#line 161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/irqdomain.h"
struct irq_domain {
   struct list_head link ;
   char *name ;
   struct irq_domain_ops *ops ;
   void *host_data ;
   unsigned int flags ;
   unsigned int mapcount ;
   struct fwnode_handle *fwnode ;
   enum irq_domain_bus_token bus_token ;
   struct irq_domain_chip_generic *gc ;
   struct irq_domain *parent ;
   struct dentry *debugfs_file ;
   irq_hw_number_t hwirq_max ;
   unsigned int revmap_direct_max_irq ;
   unsigned int revmap_size ;
   struct xarray revmap_tree ;
   struct mutex revmap_tree_mutex ;
   unsigned int linear_revmap[] ;
};
#line 145  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/poll.h"
struct rpmsg_device;
#line 147 
struct rpmsg_device_ops;
#line 148 
struct rpmsg_endpoint_ops;
#line 50  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rpmsg.h"
struct rpmsg_device {
   struct device dev ;
   struct rpmsg_device_id id ;
   char *driver_override ;
   u32 src ;
   u32 dst ;
   struct rpmsg_endpoint *ept ;
   bool announce ;
   struct rpmsg_device_ops *ops ;
};
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rpmsg.h"
struct rpmsg_endpoint {
   struct rpmsg_device *rpdev ;
   struct kref refcount ;
   int (*cb)(struct rpmsg_device *, void *, int , void *, u32 ) ;
   struct mutex cb_lock ;
   u32 addr ;
   void *priv ;
   struct rpmsg_endpoint_ops *ops ;
};
#line 110  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/interrupt.h"
struct irqaction {
   irqreturn_t (*handler)(int , void *) ;
   void *dev_id ;
   void *percpu_dev_id ;
   struct irqaction *next ;
   irqreturn_t (*thread_fn)(int , void *) ;
   struct task_struct *thread ;
   struct irqaction *secondary ;
   unsigned int irq ;
   unsigned int flags ;
   unsigned long thread_flags ;
   unsigned long thread_mask ;
   char *name ;
   struct proc_dir_entry *dir ;
} __attribute__((__aligned__(4096)));
#line 268  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/interrupt.h"
struct irq_affinity_notify {
   unsigned int irq ;
   struct kref kref ;
   struct work_struct work ;
   void (*notify)(struct irq_affinity_notify *, cpumask_t *) ;
   void (*release)(struct kref *) ;
};
#line 472 
enum irqchip_irq_state {
    IRQCHIP_STATE_PENDING = 0,
    IRQCHIP_STATE_ACTIVE = 1,
    IRQCHIP_STATE_MASKED = 2,
    IRQCHIP_STATE_LINE_LEVEL = 3
};
#line 201  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_hw_addr {
   struct list_head list ;
   unsigned char addr[32U] ;
   unsigned char type ;
   bool global_use ;
   int sync_cnt ;
   int refcount ;
   int synced ;
   struct callback_head callback_head ;
};
#line 1656  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ieee80211.h"
struct ieee80211_he_mu_edca_param_ac_rec {
   u8 aifsn ;
   u8 ecw_min_max ;
   u8 mu_edca_timer ;
} __attribute__((__packed__));
#line 3039  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/nl80211.h"
struct nl80211_sta_flag_update {
   __u32 mask ;
   __u32 set ;
} __attribute__((__packed__));
#line 3362 
enum nl80211_mesh_power_mode {
    NL80211_MESH_POWER_UNKNOWN = 0,
    NL80211_MESH_POWER_ACTIVE = 1,
    NL80211_MESH_POWER_LIGHT_SLEEP = 2,
    NL80211_MESH_POWER_DEEP_SLEEP = 3,
    __NL80211_MESH_POWER_AFTER_LAST = 4,
    NL80211_MESH_POWER_MAX = 3
};
#line 4593 
enum nl80211_txrate_gi {
    NL80211_TXRATE_DEFAULT_GI = 0,
    NL80211_TXRATE_FORCE_SGI = 1,
    NL80211_TXRATE_FORCE_LGI = 2
};
#line 5133 
enum nl80211_ext_feature_index {
    NL80211_EXT_FEATURE_VHT_IBSS = 0,
    NL80211_EXT_FEATURE_RRM = 1,
    NL80211_EXT_FEATURE_MU_MIMO_AIR_SNIFFER = 2,
    NL80211_EXT_FEATURE_SCAN_START_TIME = 3,
    NL80211_EXT_FEATURE_BSS_PARENT_TSF = 4,
    NL80211_EXT_FEATURE_SET_SCAN_DWELL = 5,
    NL80211_EXT_FEATURE_BEACON_RATE_LEGACY = 6,
    NL80211_EXT_FEATURE_BEACON_RATE_HT = 7,
    NL80211_EXT_FEATURE_BEACON_RATE_VHT = 8,
    NL80211_EXT_FEATURE_FILS_STA = 9,
    NL80211_EXT_FEATURE_MGMT_TX_RANDOM_TA = 10,
    NL80211_EXT_FEATURE_MGMT_TX_RANDOM_TA_CONNECTED = 11,
    NL80211_EXT_FEATURE_SCHED_SCAN_RELATIVE_RSSI = 12,
    NL80211_EXT_FEATURE_CQM_RSSI_LIST = 13,
    NL80211_EXT_FEATURE_FILS_SK_OFFLOAD = 14,
    NL80211_EXT_FEATURE_4WAY_HANDSHAKE_STA_PSK = 15,
    NL80211_EXT_FEATURE_4WAY_HANDSHAKE_STA_1X = 16,
    NL80211_EXT_FEATURE_FILS_MAX_CHANNEL_TIME = 17,
    NL80211_EXT_FEATURE_ACCEPT_BCAST_PROBE_RESP = 18,
    NL80211_EXT_FEATURE_OCE_PROBE_REQ_HIGH_TX_RATE = 19,
    NL80211_EXT_FEATURE_OCE_PROBE_REQ_DEFERRAL_SUPPRESSION = 20,
    NL80211_EXT_FEATURE_MFP_OPTIONAL = 21,
    NL80211_EXT_FEATURE_LOW_SPAN_SCAN = 22,
    NL80211_EXT_FEATURE_LOW_POWER_SCAN = 23,
    NL80211_EXT_FEATURE_HIGH_ACCURACY_SCAN = 24,
    NL80211_EXT_FEATURE_DFS_OFFLOAD = 25,
    NL80211_EXT_FEATURE_CONTROL_PORT_OVER_NL80211 = 26,
    NL80211_EXT_FEATURE_ACK_SIGNAL_SUPPORT = 27,
    NL80211_EXT_FEATURE_DATA_ACK_SIGNAL_SUPPORT = 27,
    NL80211_EXT_FEATURE_TXQS = 28,
    NL80211_EXT_FEATURE_SCAN_RANDOM_SN = 29,
    NL80211_EXT_FEATURE_SCAN_MIN_PREQ_CONTENT = 30,
    NL80211_EXT_FEATURE_CAN_REPLACE_PTK0 = 31,
    NL80211_EXT_FEATURE_ENABLE_FTM_RESPONDER = 32,
    NL80211_EXT_FEATURE_AIRTIME_FAIRNESS = 33,
    NL80211_EXT_FEATURE_AP_PMKSA_CACHING = 34,
    NL80211_EXT_FEATURE_SCHED_SCAN_BAND_SPECIFIC_RSSI_THOLD = 35,
    NL80211_EXT_FEATURE_EXT_KEY_ID = 36,
    NL80211_EXT_FEATURE_STA_TX_PWR = 37,
    NL80211_EXT_FEATURE_SAE_OFFLOAD = 38,
    NL80211_EXT_FEATURE_VLAN_OFFLOAD = 39,
    NL80211_EXT_FEATURE_AQL = 40,
    NUM_NL80211_EXT_FEATURES = 41,
    MAX_NL80211_EXT_FEATURES = 40
};
#line 5912 
enum nl80211_nan_function_type {
    NL80211_NAN_FUNC_PUBLISH = 0,
    NL80211_NAN_FUNC_SUBSCRIBE = 1,
    NL80211_NAN_FUNC_FOLLOW_UP = 2,
    __NL80211_NAN_FUNC_TYPE_AFTER_LAST = 3,
    NL80211_NAN_FUNC_MAX_TYPE = 2
};
#line 6001 
enum nl80211_preamble {
    NL80211_PREAMBLE_LEGACY = 0,
    NL80211_PREAMBLE_HT = 1,
    NL80211_PREAMBLE_VHT = 2,
    NL80211_PREAMBLE_DMG = 3
};
#line 811  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct survey_info {
   struct ieee80211_channel *channel ;
   u64 time ;
   u64 time_busy ;
   u64 time_ext_busy ;
   u64 time_rx ;
   u64 time_tx ;
   u64 time_scan ;
   u64 time_bss_rx ;
   u32 filled ;
   s8 noise ;
};
#line 940  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct __anonstruct_control_1770 {
   u32 legacy ;
   u8 ht_mcs[10U] ;
   u16 vht_mcs[8U] ;
   enum nl80211_txrate_gi gi ;
};
#line 940  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct cfg80211_bitrate_mask {
   struct __anonstruct_control_1770 control[4U] ;
};
#line 1314  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct rate_info {
   u8 flags ;
   u8 mcs ;
   u16 legacy ;
   u8 nss ;
   u8 bw ;
   u8 he_gi ;
   u8 he_dcm ;
   u8 he_ru_alloc ;
   u8 n_bonded_ch ;
};
#line 1351  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct sta_bss_parameters {
   u8 flags ;
   u8 dtim_period ;
   u16 beacon_interval ;
};
#line 1373  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct cfg80211_txq_stats {
   u32 filled ;
   u32 backlog_bytes ;
   u32 backlog_packets ;
   u32 flows ;
   u32 drops ;
   u32 ecn_marks ;
   u32 overlimit ;
   u32 overmemory ;
   u32 collisions ;
   u32 tx_bytes ;
   u32 tx_packets ;
   u32 max_flows ;
};
#line 1399  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct cfg80211_tid_stats {
   u32 filled ;
   u64 rx_msdu ;
   u64 tx_msdu ;
   u64 tx_msdu_retries ;
   u64 tx_msdu_failed ;
   struct cfg80211_txq_stats txq_stats ;
};
#line 1476  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct station_info {
   u64 filled ;
   u32 connected_time ;
   u32 inactive_time ;
   u64 assoc_at ;
   u64 rx_bytes ;
   u64 tx_bytes ;
   u16 llid ;
   u16 plid ;
   u8 plink_state ;
   s8 signal ;
   s8 signal_avg ;
   u8 chains ;
   s8 chain_signal[4U] ;
   s8 chain_signal_avg[4U] ;
   struct rate_info txrate ;
   struct rate_info rxrate ;
   u32 rx_packets ;
   u32 tx_packets ;
   u32 tx_retries ;
   u32 tx_failed ;
   u32 rx_dropped_misc ;
   struct sta_bss_parameters bss_param ;
   struct nl80211_sta_flag_update sta_flags ;
   int generation ;
   u8 *assoc_req_ies ;
   size_t assoc_req_ies_len ;
   u32 beacon_loss_count ;
   s64 t_offset ;
   enum nl80211_mesh_power_mode local_pm ;
   enum nl80211_mesh_power_mode peer_pm ;
   enum nl80211_mesh_power_mode nonpeer_pm ;
   u32 expected_throughput ;
   u64 tx_duration ;
   u64 rx_duration ;
   u64 rx_beacon ;
   u8 rx_beacon_signal_avg ;
   u8 connected_to_gate ;
   struct cfg80211_tid_stats *pertid ;
   s8 ack_signal ;
   s8 avg_ack_signal ;
   u16 airtime_weight ;
   u32 rx_mpdu_count ;
   u32 fcs_err_count ;
   u32 airtime_link_metric ;
};
#line 2821  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct cfg80211_gtk_rekey_data {
   u8 *kek ;
   u8 *kck ;
   u8 *replay_ctr ;
};
#line 2921  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct cfg80211_nan_conf {
   u8 master_pref ;
   u8 bands ;
};
#line 2944  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct cfg80211_nan_func_filter {
   u8 *filter ;
   u8 len ;
};
#line 2978  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct cfg80211_nan_func {
   enum nl80211_nan_function_type type ;
   u8 service_id[6U] ;
   u8 publish_type ;
   bool close_range ;
   bool publish_bcast ;
   bool subscribe_active ;
   u8 followup_id ;
   u8 followup_reqid ;
   struct mac_address followup_dest ;
   u32 ttl ;
   u8 *serv_spec_info ;
   u8 serv_spec_info_len ;
   bool srf_include ;
   u8 *srf_bf ;
   u8 srf_bf_len ;
   u8 srf_bf_idx ;
   struct mac_address *srf_macs ;
   int srf_num_macs ;
   struct cfg80211_nan_func_filter *rx_filters ;
   struct cfg80211_nan_func_filter *tx_filters ;
   u8 num_tx_filters ;
   u8 num_rx_filters ;
   u8 instance_id ;
   u64 cookie ;
};
#line 3072  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct cfg80211_ftm_responder_stats {
   u32 filled ;
   u32 success_num ;
   u32 partial_num ;
   u32 failed_num ;
   u32 asap_num ;
   u32 non_asap_num ;
   u64 total_duration_ms ;
   u32 unknown_triggers_num ;
   u32 reschedule_requests_num ;
   u32 out_of_window_triggers_num ;
};
#line 3210  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct cfg80211_pmsr_ftm_request_peer {
   enum nl80211_preamble preamble ;
   u16 burst_period ;
   u8 requested : 1 ;
   u8 asap : 1 ;
   u8 request_lci : 1 ;
   u8 request_civicloc : 1 ;
   u8 num_bursts_exp ;
   u8 burst_duration ;
   u8 ftms_per_burst ;
   u8 ftmr_retries ;
};
#line 3230  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct cfg80211_pmsr_request_peer {
   u8 addr[6U] ;
   struct cfg80211_chan_def chandef ;
   u8 report_ap_tsf : 1 ;
   struct cfg80211_pmsr_ftm_request_peer ftm ;
};
#line 3253  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct cfg80211_pmsr_request {
   u64 cookie ;
   void *drv_data ;
   u32 n_peers ;
   u32 nl_portid ;
   u32 timeout ;
   u8 mac_addr[6U] ;
   u8 mac_addr_mask[6U] ;
   struct list_head list ;
   struct cfg80211_pmsr_request_peer peers[] ;
};
#line 173  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/mac80211.h"
struct ieee80211_tx_queue_params {
   u16 txop ;
   u16 cw_min ;
   u16 cw_max ;
   u8 aifs ;
   bool acm ;
   bool uapsd ;
   bool mu_edca ;
   struct ieee80211_he_mu_edca_param_ac_rec mu_edca_param_rec ;
};
#line 184  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/mac80211.h"
struct ieee80211_low_level_stats {
   unsigned int dot11ACKFailureCount ;
   unsigned int dot11RTSFailureCount ;
   unsigned int dot11FCSErrorCount ;
   unsigned int dot11RTSSuccessCount ;
};
#line 235 
enum ieee80211_chanctx_switch_mode {
    CHANCTX_SWMODE_REASSIGN_VIF = 0,
    CHANCTX_SWMODE_SWAP_CONTEXTS = 1
};
#line 267  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/mac80211.h"
struct ieee80211_vif_chanctx_switch {
   struct ieee80211_vif *vif ;
   struct ieee80211_chanctx_conf *old_ctx ;
   struct ieee80211_chanctx_conf *new_ctx ;
};
#line 304 
enum ieee80211_event_type {
    RSSI_EVENT = 0,
    MLME_EVENT = 1,
    BAR_RX_EVENT = 2,
    BA_FRAME_TIMEOUT = 3
};
#line 311 
enum ieee80211_rssi_event_data {
    RSSI_EVENT_HIGH = 0,
    RSSI_EVENT_LOW = 1
};
#line 392  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/mac80211.h"
struct ieee80211_rssi_event {
   enum ieee80211_rssi_event_data data ;
};
#line 395 
enum ieee80211_mlme_event_data {
    AUTH_EVENT = 0,
    ASSOC_EVENT = 1,
    DEAUTH_RX_EVENT = 2,
    DEAUTH_TX_EVENT = 3
};
#line 402 
enum ieee80211_mlme_event_status {
    MLME_SUCCESS = 0,
    MLME_DENIED = 1,
    MLME_TIMEOUT = 2
};
#line 428  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/mac80211.h"
struct ieee80211_mlme_event {
   enum ieee80211_mlme_event_data data ;
   enum ieee80211_mlme_event_status status ;
   u16 reason ;
};
#line 440  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/mac80211.h"
struct ieee80211_ba_event {
   struct ieee80211_sta *sta ;
   u16 tid ;
   u16 ssn ;
};
#line 454  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/mac80211.h"
union __anonunion_u_2039 {
   struct ieee80211_rssi_event rssi ;
   struct ieee80211_mlme_event mlme ;
   struct ieee80211_ba_event ba ;
};
#line 454  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/mac80211.h"
struct ieee80211_event {
   enum ieee80211_event_type type ;
   union __anonunion_u_2039 u ;
};
#line 1004 
struct ieee80211_key_conf;
#line 1106  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/mac80211.h"
struct ieee80211_scan_ies {
   u8 *ies[4U] ;
   size_t len[4U] ;
   u8 *common_ies ;
   size_t common_ie_len ;
};
#line 1556  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/mac80211.h"
struct ieee80211_channel_switch {
   u64 timestamp ;
   u32 device_timestamp ;
   bool block_tx ;
   struct cfg80211_chan_def chandef ;
   u8 count ;
   u32 delay ;
};
#line 1772  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/mac80211.h"
struct ieee80211_key_conf {
   atomic64_t tx_pn ;
   u32 cipher ;
   u8 icv_len ;
   u8 iv_len ;
   u8 hw_key_idx ;
   s8 keyidx ;
   u16 flags ;
   u8 keylen ;
   u8 key[0U] ;
};
#line 1803  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/mac80211.h"
struct __anonstruct_tkip_2048 {
   u32 iv32 ;
   u16 iv16 ;
};
#line 1803  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/mac80211.h"
struct __anonstruct_ccmp_2049 {
   u8 pn[6U] ;
};
#line 1803  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/mac80211.h"
struct __anonstruct_aes_cmac_2050 {
   u8 pn[6U] ;
};
#line 1803  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/mac80211.h"
struct __anonstruct_aes_gmac_2051 {
   u8 pn[6U] ;
};
#line 1803  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/mac80211.h"
struct __anonstruct_gcmp_2052 {
   u8 pn[6U] ;
};
#line 1803  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/mac80211.h"
struct __anonstruct_hw_2053 {
   u8 seq[16U] ;
   u8 seq_len ;
};
#line 1803  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/mac80211.h"
union __anonunion_2047 {
   struct __anonstruct_tkip_2048 tkip ;
   struct __anonstruct_ccmp_2049 ccmp ;
   struct __anonstruct_aes_cmac_2050 aes_cmac ;
   struct __anonstruct_aes_gmac_2051 aes_gmac ;
   struct __anonstruct_gcmp_2052 gcmp ;
   struct __anonstruct_hw_2053 hw ;
};
#line 1803  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/mac80211.h"
struct ieee80211_key_seq {
   union __anonunion_2047 __anonCompField_ieee80211_key_seq_204 ;
};
#line 1857 
enum set_key_cmd {
    SET_KEY = 0,
    DISABLE_KEY = 1
};
#line 1862 
enum ieee80211_sta_state {
    IEEE80211_STA_NOTEXIST = 0,
    IEEE80211_STA_NONE = 1,
    IEEE80211_STA_AUTH = 2,
    IEEE80211_STA_ASSOC = 3,
    IEEE80211_STA_AUTHORIZED = 4
};
#line 2037 
enum sta_notify_cmd {
    STA_NOTIFY_SLEEP = 0,
    STA_NOTIFY_AWAKE = 1
};
#line 2057  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/mac80211.h"
struct ieee80211_tx_control {
   struct ieee80211_sta *sta ;
};
#line 2083 
enum ieee80211_hw_flags {
    IEEE80211_HW_HAS_RATE_CONTROL = 0,
    IEEE80211_HW_RX_INCLUDES_FCS = 1,
    IEEE80211_HW_HOST_BROADCAST_PS_BUFFERING = 2,
    IEEE80211_HW_SIGNAL_UNSPEC = 3,
    IEEE80211_HW_SIGNAL_DBM = 4,
    IEEE80211_HW_NEED_DTIM_BEFORE_ASSOC = 5,
    IEEE80211_HW_SPECTRUM_MGMT = 6,
    IEEE80211_HW_AMPDU_AGGREGATION = 7,
    IEEE80211_HW_SUPPORTS_PS = 8,
    IEEE80211_HW_PS_NULLFUNC_STACK = 9,
    IEEE80211_HW_SUPPORTS_DYNAMIC_PS = 10,
    IEEE80211_HW_MFP_CAPABLE = 11,
    IEEE80211_HW_WANT_MONITOR_VIF = 12,
    IEEE80211_HW_NO_AUTO_VIF = 13,
    IEEE80211_HW_SW_CRYPTO_CONTROL = 14,
    IEEE80211_HW_SUPPORT_FAST_XMIT = 15,
    IEEE80211_HW_REPORTS_TX_ACK_STATUS = 16,
    IEEE80211_HW_CONNECTION_MONITOR = 17,
    IEEE80211_HW_QUEUE_CONTROL = 18,
    IEEE80211_HW_SUPPORTS_PER_STA_GTK = 19,
    IEEE80211_HW_AP_LINK_PS = 20,
    IEEE80211_HW_TX_AMPDU_SETUP_IN_HW = 21,
    IEEE80211_HW_SUPPORTS_RC_TABLE = 22,
    IEEE80211_HW_P2P_DEV_ADDR_FOR_INTF = 23,
    IEEE80211_HW_TIMING_BEACON_ONLY = 24,
    IEEE80211_HW_SUPPORTS_HT_CCK_RATES = 25,
    IEEE80211_HW_CHANCTX_STA_CSA = 26,
    IEEE80211_HW_SUPPORTS_CLONED_SKBS = 27,
    IEEE80211_HW_SINGLE_SCAN_ON_ALL_BANDS = 28,
    IEEE80211_HW_TDLS_WIDER_BW = 29,
    IEEE80211_HW_SUPPORTS_AMSDU_IN_AMPDU = 30,
    IEEE80211_HW_BEACON_TX_STATUS = 31,
    IEEE80211_HW_NEEDS_UNIQUE_STA_ADDR = 32,
    IEEE80211_HW_SUPPORTS_REORDERING_BUFFER = 33,
    IEEE80211_HW_USES_RSS = 34,
    IEEE80211_HW_TX_AMSDU = 35,
    IEEE80211_HW_TX_FRAG_LIST = 36,
    IEEE80211_HW_REPORTS_LOW_ACK = 37,
    IEEE80211_HW_SUPPORTS_TX_FRAG = 38,
    IEEE80211_HW_SUPPORTS_TDLS_BUFFER_STA = 39,
    IEEE80211_HW_DEAUTH_NEED_MGD_TX_PREP = 40,
    IEEE80211_HW_DOESNT_SUPPORT_QOS_NDP = 41,
    IEEE80211_HW_BUFF_MMPDU_TXQ = 42,
    IEEE80211_HW_SUPPORTS_VHT_EXT_NSS_BW = 43,
    IEEE80211_HW_STA_MMPDU_TXQ = 44,
    IEEE80211_HW_TX_STATUS_NO_AMPDU_LEN = 45,
    IEEE80211_HW_SUPPORTS_MULTI_BSSID = 46,
    IEEE80211_HW_SUPPORTS_ONLY_HE_MULTI_BSSID = 47,
    IEEE80211_HW_AMPDU_KEYBORDER_SUPPORT = 48,
    NUM_IEEE80211_HW_FLAGS = 49
};
#line 2546  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/mac80211.h"
struct ieee80211_scan_request {
   struct ieee80211_scan_ies ies ;
   struct cfg80211_scan_request req ;
};
#line 2566  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/mac80211.h"
struct ieee80211_tdls_ch_sw_params {
   struct ieee80211_sta *sta ;
   struct cfg80211_chan_def *chandef ;
   u8 action_code ;
   u32 status ;
   u32 timestamp ;
   u16 switch_time ;
   u16 switch_timeout ;
   struct sk_buff *tmpl_skb ;
   u32 ch_sw_tm_ie ;
};
#line 2662 
enum ieee80211_ampdu_mlme_action {
    IEEE80211_AMPDU_RX_START = 0,
    IEEE80211_AMPDU_RX_STOP = 1,
    IEEE80211_AMPDU_TX_START = 2,
    IEEE80211_AMPDU_TX_STOP_CONT = 3,
    IEEE80211_AMPDU_TX_STOP_FLUSH = 4,
    IEEE80211_AMPDU_TX_STOP_FLUSH_CONT = 5,
    IEEE80211_AMPDU_TX_OPERATIONAL = 6
};
#line 3161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/mac80211.h"
struct ieee80211_ampdu_params {
   enum ieee80211_ampdu_mlme_action action ;
   struct ieee80211_sta *sta ;
   u16 tid ;
   u16 ssn ;
   u16 buf_size ;
   bool amsdu ;
   u16 timeout ;
};
#line 3170 
enum ieee80211_frame_release_type {
    IEEE80211_FRAME_RELEASE_PSPOLL = 0,
    IEEE80211_FRAME_RELEASE_UAPSD = 1
};
#line 3182 
enum ieee80211_roc_type {
    IEEE80211_ROC_TYPE_NORMAL = 0,
    IEEE80211_ROC_TYPE_MGMT_TX = 1
};
#line 3187 
enum ieee80211_reconfig_type {
    IEEE80211_RECONFIG_TYPE_RESTART = 0,
    IEEE80211_RECONFIG_TYPE_SUSPEND = 1
};
#line 3778  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/mac80211.h"
struct ieee80211_ops {
   void (*tx)(struct ieee80211_hw *, struct ieee80211_tx_control *, struct sk_buff *) ;
   int (*start)(struct ieee80211_hw *) ;
   void (*stop)(struct ieee80211_hw *) ;
   int (*suspend)(struct ieee80211_hw *, struct cfg80211_wowlan *) ;
   int (*resume)(struct ieee80211_hw *) ;
   void (*set_wakeup)(struct ieee80211_hw *, bool ) ;
   int (*add_interface)(struct ieee80211_hw *, struct ieee80211_vif *) ;
   int (*change_interface)(struct ieee80211_hw *, struct ieee80211_vif *, enum nl80211_iftype , bool ) ;
   void (*remove_interface)(struct ieee80211_hw *, struct ieee80211_vif *) ;
   int (*config)(struct ieee80211_hw *, u32 ) ;
   void (*bss_info_changed)(struct ieee80211_hw *, struct ieee80211_vif *, struct ieee80211_bss_conf *, u32 ) ;
   int (*start_ap)(struct ieee80211_hw *, struct ieee80211_vif *) ;
   void (*stop_ap)(struct ieee80211_hw *, struct ieee80211_vif *) ;
   u64 (*prepare_multicast)(struct ieee80211_hw *, struct netdev_hw_addr_list *) ;
   void (*configure_filter)(struct ieee80211_hw *, unsigned int , unsigned int *, u64 ) ;
   void (*config_iface_filter)(struct ieee80211_hw *, struct ieee80211_vif *, unsigned int , unsigned int ) ;
   int (*set_tim)(struct ieee80211_hw *, struct ieee80211_sta *, bool ) ;
   int (*set_key)(struct ieee80211_hw *, enum set_key_cmd , struct ieee80211_vif *, struct ieee80211_sta *, struct ieee80211_key_conf *) ;
   void (*update_tkip_key)(struct ieee80211_hw *, struct ieee80211_vif *, struct ieee80211_key_conf *, struct ieee80211_sta *, u32 , u16 *) ;
   void (*set_rekey_data)(struct ieee80211_hw *, struct ieee80211_vif *, struct cfg80211_gtk_rekey_data *) ;
   void (*set_default_unicast_key)(struct ieee80211_hw *, struct ieee80211_vif *, int ) ;
   int (*hw_scan)(struct ieee80211_hw *, struct ieee80211_vif *, struct ieee80211_scan_request *) ;
   void (*cancel_hw_scan)(struct ieee80211_hw *, struct ieee80211_vif *) ;
   int (*sched_scan_start)(struct ieee80211_hw *, struct ieee80211_vif *, struct cfg80211_sched_scan_request *, struct ieee80211_scan_ies *) ;
   int (*sched_scan_stop)(struct ieee80211_hw *, struct ieee80211_vif *) ;
   void (*sw_scan_start)(struct ieee80211_hw *, struct ieee80211_vif *, u8 *) ;
   void (*sw_scan_complete)(struct ieee80211_hw *, struct ieee80211_vif *) ;
   int (*get_stats)(struct ieee80211_hw *, struct ieee80211_low_level_stats *) ;
   void (*get_key_seq)(struct ieee80211_hw *, struct ieee80211_key_conf *, struct ieee80211_key_seq *) ;
   int (*set_frag_threshold)(struct ieee80211_hw *, u32 ) ;
   int (*set_rts_threshold)(struct ieee80211_hw *, u32 ) ;
   int (*sta_add)(struct ieee80211_hw *, struct ieee80211_vif *, struct ieee80211_sta *) ;
   int (*sta_remove)(struct ieee80211_hw *, struct ieee80211_vif *, struct ieee80211_sta *) ;
   void (*sta_add_debugfs)(struct ieee80211_hw *, struct ieee80211_vif *, struct ieee80211_sta *, struct dentry *) ;
   void (*sta_notify)(struct ieee80211_hw *, struct ieee80211_vif *, enum sta_notify_cmd , struct ieee80211_sta *) ;
   int (*sta_set_txpwr)(struct ieee80211_hw *, struct ieee80211_vif *, struct ieee80211_sta *) ;
   int (*sta_state)(struct ieee80211_hw *, struct ieee80211_vif *, struct ieee80211_sta *, enum ieee80211_sta_state , enum ieee80211_sta_state ) ;
   void (*sta_pre_rcu_remove)(struct ieee80211_hw *, struct ieee80211_vif *, struct ieee80211_sta *) ;
   void (*sta_rc_update)(struct ieee80211_hw *, struct ieee80211_vif *, struct ieee80211_sta *, u32 ) ;
   void (*sta_rate_tbl_update)(struct ieee80211_hw *, struct ieee80211_vif *, struct ieee80211_sta *) ;
   void (*sta_statistics)(struct ieee80211_hw *, struct ieee80211_vif *, struct ieee80211_sta *, struct station_info *) ;
   int (*conf_tx)(struct ieee80211_hw *, struct ieee80211_vif *, u16 , struct ieee80211_tx_queue_params *) ;
   u64 (*get_tsf)(struct ieee80211_hw *, struct ieee80211_vif *) ;
   void (*set_tsf)(struct ieee80211_hw *, struct ieee80211_vif *, u64 ) ;
   void (*offset_tsf)(struct ieee80211_hw *, struct ieee80211_vif *, s64 ) ;
   void (*reset_tsf)(struct ieee80211_hw *, struct ieee80211_vif *) ;
   int (*tx_last_beacon)(struct ieee80211_hw *) ;
   int (*ampdu_action)(struct ieee80211_hw *, struct ieee80211_vif *, struct ieee80211_ampdu_params *) ;
   int (*get_survey)(struct ieee80211_hw *, int , struct survey_info *) ;
   void (*rfkill_poll)(struct ieee80211_hw *) ;
   void (*set_coverage_class)(struct ieee80211_hw *, s16 ) ;
   int (*testmode_cmd)(struct ieee80211_hw *, struct ieee80211_vif *, void *, int ) ;
   int (*testmode_dump)(struct ieee80211_hw *, struct sk_buff *, struct netlink_callback *, void *, int ) ;
   void (*flush)(struct ieee80211_hw *, struct ieee80211_vif *, u32 , bool ) ;
   void (*channel_switch)(struct ieee80211_hw *, struct ieee80211_vif *, struct ieee80211_channel_switch *) ;
   int (*set_antenna)(struct ieee80211_hw *, u32 , u32 ) ;
   int (*get_antenna)(struct ieee80211_hw *, u32 *, u32 *) ;
   int (*remain_on_channel)(struct ieee80211_hw *, struct ieee80211_vif *, struct ieee80211_channel *, int , enum ieee80211_roc_type ) ;
   int (*cancel_remain_on_channel)(struct ieee80211_hw *, struct ieee80211_vif *) ;
   int (*set_ringparam)(struct ieee80211_hw *, u32 , u32 ) ;
   void (*get_ringparam)(struct ieee80211_hw *, u32 *, u32 *, u32 *, u32 *) ;
   bool (*tx_frames_pending)(struct ieee80211_hw *) ;
   int (*set_bitrate_mask)(struct ieee80211_hw *, struct ieee80211_vif *, struct cfg80211_bitrate_mask *) ;
   void (*event_callback)(struct ieee80211_hw *, struct ieee80211_vif *, struct ieee80211_event *) ;
   void (*allow_buffered_frames)(struct ieee80211_hw *, struct ieee80211_sta *, u16 , int , enum ieee80211_frame_release_type , bool ) ;
   void (*release_buffered_frames)(struct ieee80211_hw *, struct ieee80211_sta *, u16 , int , enum ieee80211_frame_release_type , bool ) ;
   int (*get_et_sset_count)(struct ieee80211_hw *, struct ieee80211_vif *, int ) ;
   void (*get_et_stats)(struct ieee80211_hw *, struct ieee80211_vif *, struct ethtool_stats *, u64 *) ;
   void (*get_et_strings)(struct ieee80211_hw *, struct ieee80211_vif *, u32 , u8 *) ;
   void (*mgd_prepare_tx)(struct ieee80211_hw *, struct ieee80211_vif *, u16 ) ;
   void (*mgd_protect_tdls_discover)(struct ieee80211_hw *, struct ieee80211_vif *) ;
   int (*add_chanctx)(struct ieee80211_hw *, struct ieee80211_chanctx_conf *) ;
   void (*remove_chanctx)(struct ieee80211_hw *, struct ieee80211_chanctx_conf *) ;
   void (*change_chanctx)(struct ieee80211_hw *, struct ieee80211_chanctx_conf *, u32 ) ;
   int (*assign_vif_chanctx)(struct ieee80211_hw *, struct ieee80211_vif *, struct ieee80211_chanctx_conf *) ;
   void (*unassign_vif_chanctx)(struct ieee80211_hw *, struct ieee80211_vif *, struct ieee80211_chanctx_conf *) ;
   int (*switch_vif_chanctx)(struct ieee80211_hw *, struct ieee80211_vif_chanctx_switch *, int , enum ieee80211_chanctx_switch_mode ) ;
   void (*reconfig_complete)(struct ieee80211_hw *, enum ieee80211_reconfig_type ) ;
   void (*ipv6_addr_change)(struct ieee80211_hw *, struct ieee80211_vif *, struct inet6_dev *) ;
   void (*channel_switch_beacon)(struct ieee80211_hw *, struct ieee80211_vif *, struct cfg80211_chan_def *) ;
   int (*pre_channel_switch)(struct ieee80211_hw *, struct ieee80211_vif *, struct ieee80211_channel_switch *) ;
   int (*post_channel_switch)(struct ieee80211_hw *, struct ieee80211_vif *) ;
   void (*abort_channel_switch)(struct ieee80211_hw *, struct ieee80211_vif *) ;
   void (*channel_switch_rx_beacon)(struct ieee80211_hw *, struct ieee80211_vif *, struct ieee80211_channel_switch *) ;
   int (*join_ibss)(struct ieee80211_hw *, struct ieee80211_vif *) ;
   void (*leave_ibss)(struct ieee80211_hw *, struct ieee80211_vif *) ;
   u32 (*get_expected_throughput)(struct ieee80211_hw *, struct ieee80211_sta *) ;
   int (*get_txpower)(struct ieee80211_hw *, struct ieee80211_vif *, int *) ;
   int (*tdls_channel_switch)(struct ieee80211_hw *, struct ieee80211_vif *, struct ieee80211_sta *, u8 , struct cfg80211_chan_def *, struct sk_buff *, u32 ) ;
   void (*tdls_cancel_channel_switch)(struct ieee80211_hw *, struct ieee80211_vif *, struct ieee80211_sta *) ;
   void (*tdls_recv_channel_switch)(struct ieee80211_hw *, struct ieee80211_vif *, struct ieee80211_tdls_ch_sw_params *) ;
   void (*wake_tx_queue)(struct ieee80211_hw *, struct ieee80211_txq *) ;
   void (*sync_rx_queues)(struct ieee80211_hw *) ;
   int (*start_nan)(struct ieee80211_hw *, struct ieee80211_vif *, struct cfg80211_nan_conf *) ;
   int (*stop_nan)(struct ieee80211_hw *, struct ieee80211_vif *) ;
   int (*nan_change_conf)(struct ieee80211_hw *, struct ieee80211_vif *, struct cfg80211_nan_conf *, u32 ) ;
   int (*add_nan_func)(struct ieee80211_hw *, struct ieee80211_vif *, struct cfg80211_nan_func *) ;
   void (*del_nan_func)(struct ieee80211_hw *, struct ieee80211_vif *, u8 ) ;
   bool (*can_aggregate_in_amsdu)(struct ieee80211_hw *, struct sk_buff *, struct sk_buff *) ;
   int (*get_ftm_responder_stats)(struct ieee80211_hw *, struct ieee80211_vif *, struct cfg80211_ftm_responder_stats *) ;
   int (*start_pmsr)(struct ieee80211_hw *, struct ieee80211_vif *, struct cfg80211_pmsr_request *) ;
   void (*abort_pmsr)(struct ieee80211_hw *, struct ieee80211_vif *, struct cfg80211_pmsr_request *) ;
};
#line 6702 
enum wcn36xx_hal_sys_mode {
    HAL_SYS_MODE_NORMAL = 0,
    HAL_SYS_MODE_LEARN = 1,
    HAL_SYS_MODE_SCAN = 2,
    HAL_SYS_MODE_PROMISC = 3,
    HAL_SYS_MODE_SUSPEND_LINK = 4,
    HAL_SYS_MODE_ROAM_SCAN = 5,
    HAL_SYS_MODE_ROAM_SUSPEND_LINK = 6,
    HAL_SYS_MODE_MAX = 2147483647
};
#line 6736 
enum sta_rate_mode {
    STA_TAURUS = 0,
    STA_TITAN = 1,
    STA_POLARIS = 2,
    STA_11b = 3,
    STA_11bg = 4,
    STA_11a = 5,
    STA_11n = 6,
    STA_11ac = 7,
    STA_INVALID_RATE_MODE = 2147483647
};
#line 6799 
enum wcn36xx_hal_link_state {
    WCN36XX_HAL_LINK_IDLE_STATE = 0,
    WCN36XX_HAL_LINK_PREASSOC_STATE = 1,
    WCN36XX_HAL_LINK_POSTASSOC_STATE = 2,
    WCN36XX_HAL_LINK_AP_STATE = 3,
    WCN36XX_HAL_LINK_IBSS_STATE = 4,
    WCN36XX_HAL_LINK_BTAMP_PREASSOC_STATE = 5,
    WCN36XX_HAL_LINK_BTAMP_POSTASSOC_STATE = 6,
    WCN36XX_HAL_LINK_BTAMP_AP_STATE = 7,
    WCN36XX_HAL_LINK_BTAMP_STA_STATE = 8,
    WCN36XX_HAL_LINK_LEARN_STATE = 9,
    WCN36XX_HAL_LINK_SCAN_STATE = 10,
    WCN36XX_HAL_LINK_FINISH_SCAN_STATE = 11,
    WCN36XX_HAL_LINK_INIT_CAL_STATE = 12,
    WCN36XX_HAL_LINK_FINISH_CAL_STATE = 13,
    WCN36XX_HAL_LINK_LISTEN_STATE = 14,
    WCN36XX_HAL_LINK_MAX = 2147483647
};
#line 1241  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/wcn36xx/hal.h"
struct wcn36xx_hal_supported_rates {
   enum sta_rate_mode op_rate_mode ;
   u16 dsss_rates[4U] ;
   u16 ofdm_rates[8U] ;
   u16 legacy_rates[3U] ;
   u16 reserved ;
   u32 enhanced_rate_bitmap ;
   u8 supported_mcs_set[16U] ;
   u16 rx_highest_data_rate ;
} __attribute__((__packed__));
#line 4386  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/wcn36xx/hal.h"
struct wcn36xx_hal_rcv_flt_mc_addr_list_type {
   u8 data_offset ;
   u32 mc_addr_count ;
   u8 mc_addr[240U][6U] ;
   u8 bss_index ;
} __attribute__((__packed__));
#line 4486 
enum place_holder_in_cap_bitmap {
    MCC = 0,
    P2P = 1,
    DOT11AC = 2,
    SLM_SESSIONIZATION = 3,
    DOT11AC_OPMODE = 4,
    SAP32STA = 5,
    TDLS = 6,
    P2P_GO_NOA_DECOUPLE_INIT_SCAN = 7,
    WLANACTIVE_OFFLOAD = 8,
    BEACON_OFFLOAD = 9,
    SCAN_OFFLOAD = 10,
    ROAM_OFFLOAD = 11,
    BCN_MISS_OFFLOAD = 12,
    STA_POWERSAVE = 13,
    STA_ADVANCED_PWRSAVE = 14,
    AP_UAPSD = 15,
    AP_DFS = 16,
    BLOCKACK = 17,
    PHY_ERR = 18,
    BCN_FILTER = 19,
    RTT = 20,
    RATECTRL = 21,
    WOW = 22,
    WLAN_ROAM_SCAN_OFFLOAD = 23,
    SPECULATIVE_PS_POLL = 24,
    SCAN_SCH = 25,
    IBSS_HEARTBEAT_OFFLOAD = 26,
    WLAN_SCAN_OFFLOAD = 27,
    WLAN_PERIODIC_TX_PTRN = 28,
    ADVANCE_TDLS = 29,
    BATCH_SCAN = 30,
    FW_IN_TX_PATH = 31,
    EXTENDED_NSOFFLOAD_SLOT = 32,
    CH_SWITCH_V1 = 33,
    HT40_OBSS_SCAN = 34,
    UPDATE_CHANNEL_LIST = 35,
    WLAN_MCADDR_FLT = 36,
    WLAN_CH144 = 37,
    NAN = 38,
    TDLS_SCAN_COEXISTENCE = 39,
    LINK_LAYER_STATS_MEAS = 40,
    MU_MIMO = 41,
    EXTENDED_SCAN = 42,
    DYNAMIC_WMM_PS = 43,
    MAC_SPOOFED_SCAN = 44,
    BMU_ERROR_GENERIC_RECOVERY = 45,
    DISA = 46,
    FW_STATS = 47,
    WPS_PRBRSP_TMPL = 48,
    BCN_IE_FLT_DELTA = 49,
    TDLS_OFF_CHANNEL = 51,
    RTT3 = 52,
    MGMT_FRAME_LOGGING = 53,
    ENHANCED_TXBD_COMPLETION = 54,
    LOGGING_ENHANCEMENT = 55,
    EXT_SCAN_ENHANCED = 56,
    MEMORY_DUMP_SUPPORTED = 57,
    PER_PKT_STATS_SUPPORTED = 58,
    EXT_LL_STAT = 60,
    WIFI_CONFIG = 61,
    ANTENNA_DIVERSITY_SELECTION = 62,
    MAX_FEATURE_SUPPORTED = 128
};
#line 154  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/wcn36xx/txrx.h"
struct wcn36xx_sta;
#line 57  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/wcn36xx/wcn36xx.h"
enum wcn36xx_ampdu_state {
    WCN36XX_AMPDU_NONE = 0,
    WCN36XX_AMPDU_INIT = 1,
    WCN36XX_AMPDU_START = 2,
    WCN36XX_AMPDU_OPERATIONAL = 3
};
#line 158  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/wcn36xx/wcn36xx.h"
struct wcn36xx_sta {
   struct list_head list ;
   struct wcn36xx_vif *vif ;
   u16 aid ;
   u16 tid ;
   u8 sta_index ;
   u8 dpu_desc_index ;
   u8 ucast_dpu_sign ;
   u8 bss_sta_index ;
   u8 bss_dpu_desc_index ;
   bool is_data_encrypted ;
   struct wcn36xx_hal_supported_rates supported_rates ;
   spinlock_t ampdu_lock ;
   enum wcn36xx_ampdu_state ampdu_state[16U] ;
   int non_agg_frame_ct ;
};
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 246  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_ecn.h"
typedef u32 codel_time_t;
#line 930  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/mac80211.h"
struct ieee80211_tx_rate {
   s8 idx ;
   u16 count : 5 ;
   u16 flags : 11 ;
} __attribute__((__packed__));
#line 1004  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/mac80211.h"
struct __anonstruct_3071 {
   struct ieee80211_tx_rate rates[4U] ;
   s8 rts_cts_rate_idx ;
   u8 use_rts : 1 ;
   u8 use_cts_prot : 1 ;
   u8 short_preamble : 1 ;
   u8 skip_table : 1 ;
};
#line 1004  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/mac80211.h"
union __anonunion_3070 {
   struct __anonstruct_3071 __anonCompField___anonunion_3070_192 ;
   unsigned long jiffies ;
};
#line 1004  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/mac80211.h"
struct __anonstruct_control_3069 {
   union __anonunion_3070 __anonCompField___anonstruct_control_3069_193 ;
   struct ieee80211_vif *vif ;
   struct ieee80211_key_conf *hw_key ;
   u32 flags ;
   codel_time_t enqueue_time ;
};
#line 1004  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/mac80211.h"
struct __anonstruct_ack_3072 {
   u64 cookie ;
};
#line 1004  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/mac80211.h"
struct __anonstruct_status_3073 {
   struct ieee80211_tx_rate rates[4U] ;
   s32 ack_signal ;
   u8 ampdu_ack_len ;
   u8 ampdu_len ;
   u8 antenna ;
   u16 tx_time ;
   bool is_valid_ack_signal ;
   void *status_driver_data[2U] ;
};
#line 1004  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/mac80211.h"
struct __anonstruct_3074 {
   struct ieee80211_tx_rate driver_rates[4U] ;
   u8 pad[4U] ;
   void *rate_driver_data[3U] ;
};
#line 1004  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/mac80211.h"
union __anonunion_3068 {
   struct __anonstruct_control_3069 control ;
   struct __anonstruct_ack_3072 ack ;
   struct __anonstruct_status_3073 status ;
   struct __anonstruct_3074 __anonCompField___anonunion_3068_194 ;
   void *driver_data[5U] ;
};
#line 1004  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/mac80211.h"
struct ieee80211_tx_info {
   u32 flags ;
   u8 band ;
   u8 hw_queue ;
   u16 ack_frame_id : 6 ;
   u16 tx_time_est : 10 ;
   union __anonunion_3068 __anonCompField_ieee80211_tx_info_195 ;
};
#line 41  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/wcn36xx/txrx.h"
struct wcn36xx_pdu {
   u32 dpu_fb : 8 ;
   u32 adu_fb : 8 ;
   u32 pdu_id : 16 ;
   u32 tail_pdu_idx : 16 ;
   u32 head_pdu_idx : 16 ;
   u32 pdu_count : 7 ;
   u32 mpdu_data_off : 9 ;
   u32 mpdu_header_off : 8 ;
   u32 mpdu_header_len : 8 ;
   u32 reserved4 : 8 ;
   u32 tid : 4 ;
   u32 bd_ssn : 2 ;
   u32 reserved3 : 2 ;
   u32 mpdu_len : 16 ;
};
#line 126  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/wcn36xx/txrx.h"
struct wcn36xx_tx_bd {
   u32 bdt : 2 ;
   u32 ft : 1 ;
   u32 dpu_ne : 1 ;
   u32 fw_tx_comp : 1 ;
   u32 tx_comp : 1 ;
   u32 reserved1 : 1 ;
   u32 ub : 1 ;
   u32 rmf : 1 ;
   u32 reserved0 : 12 ;
   u32 dpu_sign : 3 ;
   u32 dpu_rf : 8 ;
   struct wcn36xx_pdu pdu ;
   u32 reserved5 : 7 ;
   u32 queue_id : 5 ;
   u32 bd_rate : 2 ;
   u32 ack_policy : 2 ;
   u32 sta_index : 8 ;
   u32 dpu_desc_idx : 8 ;
   u32 tx_bd_sign ;
   u32 reserved6 ;
   u32 dxe_start_time ;
   u32 dxe_end_time ;
};
#line 369  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/wcn36xx/dxe.c"
union __anonunion___u_3088 {
   u32 __val ;
   char __c[1U] ;
};
#line 373  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/wcn36xx/dxe.c"
union __anonunion___u_3090 {
   u32 __val ;
   char __c[1U] ;
};
#line 565  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/wcn36xx/dxe.c"
union __anonunion___u_3092 {
   u32 __val ;
   char __c[1U] ;
};
#line 66  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
union __anonunion___u_3105 {
   struct list_head *__val ;
   char __c[1U] ;
};
#line 106  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
union __anonunion___u_3107 {
   struct list_head *__val ;
   char __c[1U] ;
};
#line 268  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
union __anonunion___u_3109 {
   struct list_head *__val ;
   char __c[1U] ;
};
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 6481  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/mac80211.h"
enum wcn36xx_hal_host_msg_type {
    WCN36XX_HAL_START_REQ = 0,
    WCN36XX_HAL_START_RSP = 1,
    WCN36XX_HAL_STOP_REQ = 2,
    WCN36XX_HAL_STOP_RSP = 3,
    WCN36XX_HAL_INIT_SCAN_REQ = 4,
    WCN36XX_HAL_INIT_SCAN_RSP = 5,
    WCN36XX_HAL_START_SCAN_REQ = 6,
    WCN36XX_HAL_START_SCAN_RSP = 7,
    WCN36XX_HAL_END_SCAN_REQ = 8,
    WCN36XX_HAL_END_SCAN_RSP = 9,
    WCN36XX_HAL_FINISH_SCAN_REQ = 10,
    WCN36XX_HAL_FINISH_SCAN_RSP = 11,
    WCN36XX_HAL_CONFIG_STA_REQ = 12,
    WCN36XX_HAL_CONFIG_STA_RSP = 13,
    WCN36XX_HAL_DELETE_STA_REQ = 14,
    WCN36XX_HAL_DELETE_STA_RSP = 15,
    WCN36XX_HAL_CONFIG_BSS_REQ = 16,
    WCN36XX_HAL_CONFIG_BSS_RSP = 17,
    WCN36XX_HAL_DELETE_BSS_REQ = 18,
    WCN36XX_HAL_DELETE_BSS_RSP = 19,
    WCN36XX_HAL_JOIN_REQ = 20,
    WCN36XX_HAL_JOIN_RSP = 21,
    WCN36XX_HAL_POST_ASSOC_REQ = 22,
    WCN36XX_HAL_POST_ASSOC_RSP = 23,
    WCN36XX_HAL_SET_BSSKEY_REQ = 24,
    WCN36XX_HAL_SET_BSSKEY_RSP = 25,
    WCN36XX_HAL_SET_STAKEY_REQ = 26,
    WCN36XX_HAL_SET_STAKEY_RSP = 27,
    WCN36XX_HAL_RMV_BSSKEY_REQ = 28,
    WCN36XX_HAL_RMV_BSSKEY_RSP = 29,
    WCN36XX_HAL_RMV_STAKEY_REQ = 30,
    WCN36XX_HAL_RMV_STAKEY_RSP = 31,
    WCN36XX_HAL_ADD_TS_REQ = 32,
    WCN36XX_HAL_ADD_TS_RSP = 33,
    WCN36XX_HAL_DEL_TS_REQ = 34,
    WCN36XX_HAL_DEL_TS_RSP = 35,
    WCN36XX_HAL_UPD_EDCA_PARAMS_REQ = 36,
    WCN36XX_HAL_UPD_EDCA_PARAMS_RSP = 37,
    WCN36XX_HAL_ADD_BA_REQ = 38,
    WCN36XX_HAL_ADD_BA_RSP = 39,
    WCN36XX_HAL_DEL_BA_REQ = 40,
    WCN36XX_HAL_DEL_BA_RSP = 41,
    WCN36XX_HAL_CH_SWITCH_REQ = 42,
    WCN36XX_HAL_CH_SWITCH_RSP = 43,
    WCN36XX_HAL_SET_LINK_ST_REQ = 44,
    WCN36XX_HAL_SET_LINK_ST_RSP = 45,
    WCN36XX_HAL_GET_STATS_REQ = 46,
    WCN36XX_HAL_GET_STATS_RSP = 47,
    WCN36XX_HAL_UPDATE_CFG_REQ = 48,
    WCN36XX_HAL_UPDATE_CFG_RSP = 49,
    WCN36XX_HAL_MISSED_BEACON_IND = 50,
    WCN36XX_HAL_UNKNOWN_ADDR2_FRAME_RX_IND = 51,
    WCN36XX_HAL_MIC_FAILURE_IND = 52,
    WCN36XX_HAL_FATAL_ERROR_IND = 53,
    WCN36XX_HAL_SET_KEYDONE_MSG = 54,
    WCN36XX_HAL_DOWNLOAD_NV_REQ = 55,
    WCN36XX_HAL_DOWNLOAD_NV_RSP = 56,
    WCN36XX_HAL_ADD_BA_SESSION_REQ = 57,
    WCN36XX_HAL_ADD_BA_SESSION_RSP = 58,
    WCN36XX_HAL_TRIGGER_BA_REQ = 59,
    WCN36XX_HAL_TRIGGER_BA_RSP = 60,
    WCN36XX_HAL_UPDATE_BEACON_REQ = 61,
    WCN36XX_HAL_UPDATE_BEACON_RSP = 62,
    WCN36XX_HAL_SEND_BEACON_REQ = 63,
    WCN36XX_HAL_SEND_BEACON_RSP = 64,
    WCN36XX_HAL_SET_BCASTKEY_REQ = 65,
    WCN36XX_HAL_SET_BCASTKEY_RSP = 66,
    WCN36XX_HAL_DELETE_STA_CONTEXT_IND = 67,
    WCN36XX_HAL_UPDATE_PROBE_RSP_TEMPLATE_REQ = 68,
    WCN36XX_HAL_UPDATE_PROBE_RSP_TEMPLATE_RSP = 69,
    WCN36XX_HAL_PROCESS_PTT_REQ = 70,
    WCN36XX_HAL_PROCESS_PTT_RSP = 71,
    WCN36XX_HAL_SIGNAL_BTAMP_EVENT_REQ = 72,
    WCN36XX_HAL_SIGNAL_BTAMP_EVENT_RSP = 73,
    WCN36XX_HAL_TL_HAL_FLUSH_AC_REQ = 74,
    WCN36XX_HAL_TL_HAL_FLUSH_AC_RSP = 75,
    WCN36XX_HAL_ENTER_IMPS_REQ = 76,
    WCN36XX_HAL_EXIT_IMPS_REQ = 77,
    WCN36XX_HAL_ENTER_BMPS_REQ = 78,
    WCN36XX_HAL_EXIT_BMPS_REQ = 79,
    WCN36XX_HAL_ENTER_UAPSD_REQ = 80,
    WCN36XX_HAL_EXIT_UAPSD_REQ = 81,
    WCN36XX_HAL_UPDATE_UAPSD_PARAM_REQ = 82,
    WCN36XX_HAL_CONFIGURE_RXP_FILTER_REQ = 83,
    WCN36XX_HAL_ADD_BCN_FILTER_REQ = 84,
    WCN36XX_HAL_REM_BCN_FILTER_REQ = 85,
    WCN36XX_HAL_ADD_WOWL_BCAST_PTRN = 86,
    WCN36XX_HAL_DEL_WOWL_BCAST_PTRN = 87,
    WCN36XX_HAL_ENTER_WOWL_REQ = 88,
    WCN36XX_HAL_EXIT_WOWL_REQ = 89,
    WCN36XX_HAL_HOST_OFFLOAD_REQ = 90,
    WCN36XX_HAL_SET_RSSI_THRESH_REQ = 91,
    WCN36XX_HAL_GET_RSSI_REQ = 92,
    WCN36XX_HAL_SET_UAPSD_AC_PARAMS_REQ = 93,
    WCN36XX_HAL_CONFIGURE_APPS_CPU_WAKEUP_STATE_REQ = 94,
    WCN36XX_HAL_ENTER_IMPS_RSP = 95,
    WCN36XX_HAL_EXIT_IMPS_RSP = 96,
    WCN36XX_HAL_ENTER_BMPS_RSP = 97,
    WCN36XX_HAL_EXIT_BMPS_RSP = 98,
    WCN36XX_HAL_ENTER_UAPSD_RSP = 99,
    WCN36XX_HAL_EXIT_UAPSD_RSP = 100,
    WCN36XX_HAL_SET_UAPSD_AC_PARAMS_RSP = 101,
    WCN36XX_HAL_UPDATE_UAPSD_PARAM_RSP = 102,
    WCN36XX_HAL_CONFIGURE_RXP_FILTER_RSP = 103,
    WCN36XX_HAL_ADD_BCN_FILTER_RSP = 104,
    WCN36XX_HAL_REM_BCN_FILTER_RSP = 105,
    WCN36XX_HAL_SET_RSSI_THRESH_RSP = 106,
    WCN36XX_HAL_HOST_OFFLOAD_RSP = 107,
    WCN36XX_HAL_ADD_WOWL_BCAST_PTRN_RSP = 108,
    WCN36XX_HAL_DEL_WOWL_BCAST_PTRN_RSP = 109,
    WCN36XX_HAL_ENTER_WOWL_RSP = 110,
    WCN36XX_HAL_EXIT_WOWL_RSP = 111,
    WCN36XX_HAL_RSSI_NOTIFICATION_IND = 112,
    WCN36XX_HAL_GET_RSSI_RSP = 113,
    WCN36XX_HAL_CONFIGURE_APPS_CPU_WAKEUP_STATE_RSP = 114,
    WCN36XX_HAL_SET_MAX_TX_POWER_REQ = 115,
    WCN36XX_HAL_SET_MAX_TX_POWER_RSP = 116,
    WCN36XX_HAL_AGGR_ADD_TS_REQ = 117,
    WCN36XX_HAL_AGGR_ADD_TS_RSP = 118,
    WCN36XX_HAL_SET_P2P_GONOA_REQ = 119,
    WCN36XX_HAL_SET_P2P_GONOA_RSP = 120,
    WCN36XX_HAL_DUMP_COMMAND_REQ = 121,
    WCN36XX_HAL_DUMP_COMMAND_RSP = 122,
    WCN36XX_HAL_START_OEM_DATA_REQ = 123,
    WCN36XX_HAL_START_OEM_DATA_RSP = 124,
    WCN36XX_HAL_ADD_STA_SELF_REQ = 125,
    WCN36XX_HAL_ADD_STA_SELF_RSP = 126,
    WCN36XX_HAL_DEL_STA_SELF_REQ = 127,
    WCN36XX_HAL_DEL_STA_SELF_RSP = 128,
    WCN36XX_HAL_COEX_IND = 129,
    WCN36XX_HAL_OTA_TX_COMPL_IND = 130,
    WCN36XX_HAL_HOST_SUSPEND_IND = 131,
    WCN36XX_HAL_HOST_RESUME_REQ = 132,
    WCN36XX_HAL_HOST_RESUME_RSP = 133,
    WCN36XX_HAL_SET_TX_POWER_REQ = 134,
    WCN36XX_HAL_SET_TX_POWER_RSP = 135,
    WCN36XX_HAL_GET_TX_POWER_REQ = 136,
    WCN36XX_HAL_GET_TX_POWER_RSP = 137,
    WCN36XX_HAL_P2P_NOA_ATTR_IND = 138,
    WCN36XX_HAL_ENABLE_RADAR_DETECT_REQ = 139,
    WCN36XX_HAL_ENABLE_RADAR_DETECT_RSP = 140,
    WCN36XX_HAL_GET_TPC_REPORT_REQ = 141,
    WCN36XX_HAL_GET_TPC_REPORT_RSP = 142,
    WCN36XX_HAL_RADAR_DETECT_IND = 143,
    WCN36XX_HAL_RADAR_DETECT_INTR_IND = 144,
    WCN36XX_HAL_KEEP_ALIVE_REQ = 145,
    WCN36XX_HAL_KEEP_ALIVE_RSP = 146,
    WCN36XX_HAL_SET_PREF_NETWORK_REQ = 147,
    WCN36XX_HAL_SET_PREF_NETWORK_RSP = 148,
    WCN36XX_HAL_SET_RSSI_FILTER_REQ = 149,
    WCN36XX_HAL_SET_RSSI_FILTER_RSP = 150,
    WCN36XX_HAL_UPDATE_SCAN_PARAM_REQ = 151,
    WCN36XX_HAL_UPDATE_SCAN_PARAM_RSP = 152,
    WCN36XX_HAL_PREF_NETW_FOUND_IND = 153,
    WCN36XX_HAL_SET_TX_PER_TRACKING_REQ = 154,
    WCN36XX_HAL_SET_TX_PER_TRACKING_RSP = 155,
    WCN36XX_HAL_TX_PER_HIT_IND = 156,
    WCN36XX_HAL_8023_MULTICAST_LIST_REQ = 157,
    WCN36XX_HAL_8023_MULTICAST_LIST_RSP = 158,
    WCN36XX_HAL_SET_PACKET_FILTER_REQ = 159,
    WCN36XX_HAL_SET_PACKET_FILTER_RSP = 160,
    WCN36XX_HAL_PACKET_FILTER_MATCH_COUNT_REQ = 161,
    WCN36XX_HAL_PACKET_FILTER_MATCH_COUNT_RSP = 162,
    WCN36XX_HAL_CLEAR_PACKET_FILTER_REQ = 163,
    WCN36XX_HAL_CLEAR_PACKET_FILTER_RSP = 164,
    WCN36XX_HAL_INIT_SCAN_CON_REQ = 165,
    WCN36XX_HAL_SET_POWER_PARAMS_REQ = 166,
    WCN36XX_HAL_SET_POWER_PARAMS_RSP = 167,
    WCN36XX_HAL_TSM_STATS_REQ = 168,
    WCN36XX_HAL_TSM_STATS_RSP = 169,
    WCN36XX_HAL_WAKE_REASON_IND = 170,
    WCN36XX_HAL_GTK_OFFLOAD_REQ = 171,
    WCN36XX_HAL_GTK_OFFLOAD_RSP = 172,
    WCN36XX_HAL_GTK_OFFLOAD_GETINFO_REQ = 173,
    WCN36XX_HAL_GTK_OFFLOAD_GETINFO_RSP = 174,
    WCN36XX_HAL_FEATURE_CAPS_EXCHANGE_REQ = 175,
    WCN36XX_HAL_FEATURE_CAPS_EXCHANGE_RSP = 176,
    WCN36XX_HAL_EXCLUDE_UNENCRYPTED_IND = 177,
    WCN36XX_HAL_SET_THERMAL_MITIGATION_REQ = 178,
    WCN36XX_HAL_SET_THERMAL_MITIGATION_RSP = 179,
    WCN36XX_HAL_UPDATE_VHT_OP_MODE_REQ = 182,
    WCN36XX_HAL_UPDATE_VHT_OP_MODE_RSP = 183,
    WCN36XX_HAL_P2P_NOA_START_IND = 184,
    WCN36XX_HAL_GET_ROAM_RSSI_REQ = 185,
    WCN36XX_HAL_GET_ROAM_RSSI_RSP = 186,
    WCN36XX_HAL_CLASS_B_STATS_IND = 187,
    WCN36XX_HAL_DEL_BA_IND = 188,
    WCN36XX_HAL_DHCP_START_IND = 189,
    WCN36XX_HAL_DHCP_STOP_IND = 190,
    WCN36XX_HAL_START_SCAN_OFFLOAD_REQ = 204,
    WCN36XX_HAL_START_SCAN_OFFLOAD_RSP = 205,
    WCN36XX_HAL_STOP_SCAN_OFFLOAD_REQ = 206,
    WCN36XX_HAL_STOP_SCAN_OFFLOAD_RSP = 207,
    WCN36XX_HAL_SCAN_OFFLOAD_IND = 210,
    WCN36XX_HAL_AVOID_FREQ_RANGE_IND = 233,
    WCN36XX_HAL_PRINT_REG_INFO_IND = 259,
    WCN36XX_HAL_MSG_MAX = 32767
};
#line 6681 
enum wcn36xx_hal_host_msg_version {
    WCN36XX_HAL_MSG_VERSION0 = 0,
    WCN36XX_HAL_MSG_VERSION1 = 1,
    WCN36XX_HAL_MSG_WCNSS_CTRL_VERSION = 32767,
    WCN36XX_HAL_MSG_VERSION_MAX_FIELD = 32767
};
#line 6688 
enum driver_type {
    DRIVER_TYPE_PRODUCTION = 0,
    DRIVER_TYPE_MFG = 1,
    DRIVER_TYPE_DVT = 2,
    DRIVER_TYPE_MAX = 2147483647
};
#line 6695 
enum wcn36xx_hal_stop_type {
    HAL_STOP_TYPE_SYS_RESET = 0,
    HAL_STOP_TYPE_SYS_DEEP_SLEEP = 1,
    HAL_STOP_TYPE_RF_KILL = 2,
    HAL_STOP_TYPE_MAX = 2147483647
};
#line 6713 
enum phy_chan_bond_state {
    PHY_SINGLE_CHANNEL_CENTERED = 0,
    PHY_DOUBLE_CHANNEL_LOW_PRIMARY = 1,
    PHY_DOUBLE_CHANNEL_CENTERED = 2,
    PHY_DOUBLE_CHANNEL_HIGH_PRIMARY = 3,
    PHY_QUADRUPLE_CHANNEL_20MHZ_LOW_40MHZ_CENTERED = 4,
    PHY_QUADRUPLE_CHANNEL_20MHZ_CENTERED_40MHZ_CENTERED = 5,
    PHY_QUADRUPLE_CHANNEL_20MHZ_HIGH_40MHZ_CENTERED = 6,
    PHY_QUADRUPLE_CHANNEL_20MHZ_LOW_40MHZ_LOW = 7,
    PHY_QUADRUPLE_CHANNEL_20MHZ_HIGH_40MHZ_LOW = 8,
    PHY_QUADRUPLE_CHANNEL_20MHZ_LOW_40MHZ_HIGH = 9,
    PHY_QUADRUPLE_CHANNEL_20MHZ_HIGH_40MHZ_HIGH = 10,
    PHY_CHANNEL_BONDING_STATE_MAX = 2147483647
};
#line 6728 
enum wcn36xx_hal_ht_mimo_state {
    WCN36XX_HAL_HT_MIMO_PS_STATIC = 0,
    WCN36XX_HAL_HT_MIMO_PS_DYNAMIC = 1,
    WCN36XX_HAL_HT_MIMO_PS_NA = 2,
    WCN36XX_HAL_HT_MIMO_PS_NO_LIMIT = 3,
    WCN36XX_HAL_HT_MIMO_PS_MAX = 2147483647
};
#line 6758 
enum wcn36xx_hal_nw_type {
    WCN36XX_HAL_11A_NW_TYPE = 0,
    WCN36XX_HAL_11B_NW_TYPE = 1,
    WCN36XX_HAL_11G_NW_TYPE = 2,
    WCN36XX_HAL_11N_NW_TYPE = 3,
    WCN36XX_HAL_DONOT_USE_NW_TYPE = 2147483647
};
#line 6766 
enum wcn36xx_hal_ht_operating_mode {
    WCN36XX_HAL_HT_OP_MODE_PURE = 0,
    WCN36XX_HAL_HT_OP_MODE_OVERLAP_LEGACY = 1,
    WCN36XX_HAL_HT_OP_MODE_NO_LEGACY_20MHZ_HT = 2,
    WCN36XX_HAL_HT_OP_MODE_MIXED = 3,
    WCN36XX_HAL_HT_OP_MODE_MAX = 2147483647
};
#line 6785 
enum ani_key_direction {
    WCN36XX_HAL_TX_ONLY = 0,
    WCN36XX_HAL_RX_ONLY = 1,
    WCN36XX_HAL_TX_RX = 2,
    WCN36XX_HAL_TX_DEFAULT = 3,
    WCN36XX_HAL_DONOT_USE_KEY_DIRECTION = 2147483647
};
#line 6793 
enum ani_wep_type {
    WCN36XX_HAL_WEP_STATIC = 0,
    WCN36XX_HAL_WEP_DYNAMIC = 1,
    WCN36XX_HAL_WEP_MAX = 2147483647
};
#line 734  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/wcn36xx/hal.h"
struct wcnss_wlan_version {
   u8 revision ;
   u8 version ;
   u8 minor ;
   u8 major ;
} __attribute__((__packed__));
#line 742  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/wcn36xx/hal.h"
struct wcn36xx_hal_keys {
   u8 id ;
   u8 unicast ;
   enum ani_key_direction direction ;
   u8 rsc[16U] ;
   u8 pae_role ;
   u16 length ;
   u8 key[32U] ;
} __attribute__((__packed__));
#line 764  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/wcn36xx/hal.h"
struct wcn36xx_hal_set_sta_key_params {
   u16 sta_index ;
   enum ani_ed_type enc_type ;
   enum ani_wep_type wep_type ;
   u8 def_wep_idx ;
   struct wcn36xx_hal_keys key[4U] ;
   u8 single_tid_rc ;
} __attribute__((__packed__));
#line 789  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/wcn36xx/hal.h"
struct wcn36xx_hal_msg_header {
   enum wcn36xx_hal_host_msg_type msg_type : 16 ;
   enum wcn36xx_hal_host_msg_version msg_version : 16 ;
   u32 len ;
} __attribute__((__packed__));
#line 796  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/wcn36xx/hal.h"
struct wcn36xx_hal_cfg {
   u16 id ;
   u16 len ;
   u16 pad_bytes ;
   u16 reserve ;
} __attribute__((__packed__));
#line 815  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/wcn36xx/hal.h"
struct wcn36xx_hal_mac_start_parameters {
   enum driver_type type ;
   u32 len ;
} __attribute__((__packed__));
#line 830  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/wcn36xx/hal.h"
struct wcn36xx_hal_mac_start_req_msg {
   struct wcn36xx_hal_msg_header header ;
   struct wcn36xx_hal_mac_start_parameters params ;
} __attribute__((__packed__));
#line 836  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/wcn36xx/hal.h"
struct wcn36xx_hal_mac_start_rsp_params {
   u16 status ;
   u8 stations ;
   u8 bssids ;
   struct wcnss_wlan_version version ;
   u8 crm_version[64U] ;
   u8 wlan_version[64U] ;
} __attribute__((__packed__));
#line 857  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/wcn36xx/hal.h"
struct wcn36xx_hal_mac_start_rsp_msg {
   struct wcn36xx_hal_msg_header header ;
   struct wcn36xx_hal_mac_start_rsp_params start_rsp_params ;
} __attribute__((__packed__));
#line 862  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/wcn36xx/hal.h"
struct wcn36xx_hal_mac_stop_req_params {
   enum wcn36xx_hal_stop_type reason ;
} __attribute__((__packed__));
#line 868  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/wcn36xx/hal.h"
struct wcn36xx_hal_mac_stop_req_msg {
   struct wcn36xx_hal_msg_header header ;
   struct wcn36xx_hal_mac_stop_req_params stop_req_params ;
} __attribute__((__packed__));
#line 880  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/wcn36xx/hal.h"
struct wcn36xx_hal_update_cfg_req_msg {
   struct wcn36xx_hal_msg_header header ;
   u32 len ;
} __attribute__((__packed__));
#line 909  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/wcn36xx/hal.h"
struct wcn36xx_hal_mac_frame_ctl {
   u8 subType : 4 ;
   u8 type : 2 ;
   u8 protVer : 2 ;
   u8 order : 1 ;
   u8 wep : 1 ;
   u8 moreData : 1 ;
   u8 powerMgmt : 1 ;
   u8 retry : 1 ;
   u8 moreFrag : 1 ;
   u8 fromDS : 1 ;
   u8 toDS : 1 ;
};
#line 946  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/wcn36xx/hal.h"
struct wcn36xx_hal_mac_seq_ctl {
   u8 fragNum : 4 ;
   u8 seqNumLo : 4 ;
   u8 seqNumHi : 8 ;
};
#line 953  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/wcn36xx/hal.h"
struct wcn36xx_hal_mac_mgmt_hdr {
   struct wcn36xx_hal_mac_frame_ctl fc ;
   u8 durationLo ;
   u8 durationHi ;
   u8 da[6U] ;
   u8 sa[6U] ;
   u8 bssId[6U] ;
   struct wcn36xx_hal_mac_seq_ctl seqControl ;
};
#line 967  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/wcn36xx/hal.h"
struct wcn36xx_hal_scan_entry {
   u8 bss_index[2U] ;
   u8 active_bss_count ;
};
#line 972  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/wcn36xx/hal.h"
struct wcn36xx_hal_init_scan_req_msg {
   struct wcn36xx_hal_msg_header header ;
   enum wcn36xx_hal_sys_mode mode ;
   u8 bssid[6U] ;
   u8 notify ;
   u8 frame_type ;
   u8 frame_len ;
   struct wcn36xx_hal_mac_mgmt_hdr mac_mgmt_hdr ;
   struct wcn36xx_hal_scan_entry scan_entry ;
};
#line 1049  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/wcn36xx/hal.h"
struct wcn36xx_hal_start_scan_req_msg {
   struct wcn36xx_hal_msg_header header ;
   u8 scan_channel ;
} __attribute__((__packed__));
#line 1067  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/wcn36xx/hal.h"
struct wcn36xx_hal_end_scan_req_msg {
   struct wcn36xx_hal_msg_header header ;
   u8 scan_channel ;
} __attribute__((__packed__));
#line 1083  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/wcn36xx/hal.h"
struct wcn36xx_hal_finish_scan_req_msg {
   struct wcn36xx_hal_msg_header header ;
   enum wcn36xx_hal_sys_mode mode ;
   u8 oper_channel ;
   enum phy_chan_bond_state cb_state ;
   u8 bssid[6U] ;
   u8 notify ;
   u8 frame_type ;
   u8 frame_length ;
   struct wcn36xx_hal_mac_mgmt_hdr mac_mgmt_hdr ;
   struct wcn36xx_hal_scan_entry scan_entry ;
} __attribute__((__packed__));
#line 1129 
enum wcn36xx_hal_scan_type {
    WCN36XX_HAL_SCAN_TYPE_PASSIVE = 0,
    WCN36XX_HAL_SCAN_TYPE_ACTIVE = 2147483647
};
#line 1141  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/wcn36xx/hal.h"
struct wcn36xx_hal_start_scan_offload_req_msg {
   struct wcn36xx_hal_msg_header header ;
   u8 num_bssid ;
   u8 bssids[4U][6U] ;
   u8 num_ssid ;
   struct wcn36xx_hal_mac_ssid ssids[10U] ;
   u8 scan_hidden ;
   u8 mac[6U] ;
   enum wcn36xx_hal_bss_type bss_type ;
   enum wcn36xx_hal_scan_type scan_type ;
   u32 min_ch_time ;
   u32 max_ch_time ;
   u8 p2p_search ;
   u8 num_channel ;
   u8 channels[80U] ;
   u16 ie_len ;
   u8 ie[500U] ;
} __attribute__((__packed__));
#line 1207  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/wcn36xx/hal.h"
struct wcn36xx_hal_scan_offload_ind {
   struct wcn36xx_hal_msg_header header ;
   u32 type ;
   u32 channel_mhz ;
   u32 scan_id ;
} __attribute__((__packed__));
#line 1215  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/wcn36xx/hal.h"
struct wcn36xx_hal_stop_scan_offload_req_msg {
   struct wcn36xx_hal_msg_header header ;
} __attribute__((__packed__));
#line 1293  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/wcn36xx/hal.h"
struct wcn36xx_hal_config_sta_params {
   u8 bssid[6U] ;
   u16 aid ;
   u8 type ;
   u8 short_preamble_supported ;
   u8 mac[6U] ;
   u16 listen_interval ;
   u8 wmm_enabled ;
   u8 ht_capable ;
   u8 tx_channel_width_set ;
   u8 rifs_mode ;
   u8 lsig_txop_protection ;
   u8 max_ampdu_size ;
   u8 max_ampdu_density ;
   u8 max_amsdu_size ;
   u8 sgi_40mhz ;
   u8 sgi_20Mhz ;
   struct wcn36xx_hal_supported_rates supported_rates ;
   u8 rmf ;
   u32 encrypt_type ;
   u8 action ;
   u8 uapsd ;
   u8 max_sp_len ;
   u8 green_field_capable ;
   enum wcn36xx_hal_ht_mimo_state mimo_ps ;
   u8 delayed_ba_support ;
   u8 max_ampdu_duration ;
   u8 dsss_cck_mode_40mhz ;
   u8 sta_index ;
   u8 bssid_index ;
   u8 p2p ;
} __attribute__((__packed__));
#line 1403  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/wcn36xx/hal.h"
struct wcn36xx_hal_config_sta_req_msg {
   struct wcn36xx_hal_msg_header header ;
   struct wcn36xx_hal_config_sta_params sta_params ;
} __attribute__((__packed__));
#line 1408  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/wcn36xx/hal.h"
struct wcn36xx_hal_config_sta_params_v1 {
   u8 bssid[6U] ;
   u16 aid ;
   u8 type ;
   u8 short_preamble_supported ;
   u8 mac[6U] ;
   u16 listen_interval ;
   u8 wmm_enabled ;
   u8 ht_capable ;
   u8 tx_channel_width_set ;
   u8 rifs_mode ;
   u8 lsig_txop_protection ;
   u8 max_ampdu_size ;
   u8 max_ampdu_density ;
   u8 max_amsdu_size ;
   u8 sgi_40mhz ;
   u8 sgi_20Mhz ;
   u8 rmf ;
   u32 encrypt_type ;
   u8 action ;
   u8 uapsd ;
   u8 max_sp_len ;
   u8 green_field_capable ;
   enum wcn36xx_hal_ht_mimo_state mimo_ps ;
   u8 delayed_ba_support ;
   u8 max_ampdu_duration ;
   u8 dsss_cck_mode_40mhz ;
   u8 sta_index ;
   u8 bssid_index ;
   u8 p2p ;
   u8 reserved ;
   struct wcn36xx_hal_supported_rates supported_rates ;
} __attribute__((__packed__));
#line 1516  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/wcn36xx/hal.h"
struct wcn36xx_hal_config_sta_req_msg_v1 {
   struct wcn36xx_hal_msg_header header ;
   struct wcn36xx_hal_config_sta_params_v1 sta_params ;
} __attribute__((__packed__));
#line 1521  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/wcn36xx/hal.h"
struct config_sta_rsp_params {
   u32 status ;
   u8 sta_index ;
   u8 bssid_index ;
   u8 dpu_index ;
   u8 bcast_dpu_index ;
   u8 bcast_mgmt_dpu_idx ;
   u8 uc_ucast_sig ;
   u8 uc_bcast_sig ;
   u8 uc_mgmt_sig ;
   u8 p2p ;
} __attribute__((__packed__));
#line 1553  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/wcn36xx/hal.h"
struct wcn36xx_hal_config_sta_rsp_msg {
   struct wcn36xx_hal_msg_header header ;
   struct config_sta_rsp_params params ;
} __attribute__((__packed__));
#line 1560  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/wcn36xx/hal.h"
struct wcn36xx_hal_delete_sta_req_msg {
   struct wcn36xx_hal_msg_header header ;
   u8 sta_index ;
} __attribute__((__packed__));
#line 1581  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/wcn36xx/hal.h"
struct wcn36xx_hal_rate_set {
   u8 num_rates ;
   u8 rate[12U] ;
} __attribute__((__packed__));
#line 1587  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/wcn36xx/hal.h"
struct wcn36xx_hal_aci_aifsn {
   u8 rsvd : 1 ;
   u8 aci : 2 ;
   u8 acm : 1 ;
   u8 aifsn : 4 ;
} __attribute__((__packed__));
#line 1602  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/wcn36xx/hal.h"
struct wcn36xx_hal_mac_cw {
   u8 max : 4 ;
   u8 min : 4 ;
} __attribute__((__packed__));
#line 1612  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/wcn36xx/hal.h"
struct wcn36xx_hal_edca_param_record {
   struct wcn36xx_hal_aci_aifsn aci ;
   struct wcn36xx_hal_mac_cw cw ;
   u16 txop_limit ;
} __attribute__((__packed__));
#line 1649  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/wcn36xx/hal.h"
struct wcn36xx_hal_config_bss_params {
   u8 bssid[6U] ;
   u8 self_mac_addr[6U] ;
   enum wcn36xx_hal_bss_type bss_type ;
   u8 oper_mode ;
   enum wcn36xx_hal_nw_type nw_type ;
   u8 short_slot_time_supported ;
   u8 lla_coexist ;
   u8 llb_coexist ;
   u8 llg_coexist ;
   u8 ht20_coexist ;
   u8 lln_non_gf_coexist ;
   u8 lsig_tx_op_protection_full_support ;
   u8 rifs_mode ;
   u16 beacon_interval ;
   u8 dtim_period ;
   u8 tx_channel_width_set ;
   u8 oper_channel ;
   u8 ext_channel ;
   u8 reserved ;
   struct wcn36xx_hal_config_sta_params sta ;
   struct wcn36xx_hal_mac_ssid ssid ;
   u8 action ;
   struct wcn36xx_hal_rate_set rateset ;
   u8 ht ;
   u8 obss_prot_enabled ;
   u8 rmf ;
   enum wcn36xx_hal_ht_operating_mode ht_oper_mode ;
   u8 dual_cts_protection ;
   u8 max_probe_resp_retry_limit ;
   u8 hidden_ssid ;
   u8 proxy_probe_resp ;
   u8 edca_params_valid ;
   struct wcn36xx_hal_edca_param_record acbe ;
   struct wcn36xx_hal_edca_param_record acbk ;
   struct wcn36xx_hal_edca_param_record acvi ;
   struct wcn36xx_hal_edca_param_record acvo ;
   u8 ext_set_sta_key_param_valid ;
   struct wcn36xx_hal_set_sta_key_params ext_set_sta_key_param ;
   u8 wcn36xx_hal_persona ;
   u8 spectrum_mgt_enable ;
   s8 tx_mgmt_power ;
   s8 max_tx_power ;
} __attribute__((__packed__));
#line 1791  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/wcn36xx/hal.h"
struct wcn36xx_hal_config_bss_req_msg {
   struct wcn36xx_hal_msg_header header ;
   struct wcn36xx_hal_config_bss_params bss_params ;
} __attribute__((__packed__));
#line 1796  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/wcn36xx/hal.h"
struct wcn36xx_hal_config_bss_params_v1 {
   u8 bssid[6U] ;
   u8 self_mac_addr[6U] ;
   enum wcn36xx_hal_bss_type bss_type ;
   u8 oper_mode ;
   enum wcn36xx_hal_nw_type nw_type ;
   u8 short_slot_time_supported ;
   u8 lla_coexist ;
   u8 llb_coexist ;
   u8 llg_coexist ;
   u8 ht20_coexist ;
   u8 lln_non_gf_coexist ;
   u8 lsig_tx_op_protection_full_support ;
   u8 rifs_mode ;
   u16 beacon_interval ;
   u8 dtim_period ;
   u8 tx_channel_width_set ;
   u8 oper_channel ;
   u8 ext_channel ;
   u8 reserved ;
   struct wcn36xx_hal_mac_ssid ssid ;
   u8 action ;
   struct wcn36xx_hal_rate_set rateset ;
   u8 ht ;
   u8 obss_prot_enabled ;
   u8 rmf ;
   enum wcn36xx_hal_ht_operating_mode ht_oper_mode ;
   u8 dual_cts_protection ;
   u8 max_probe_resp_retry_limit ;
   u8 hidden_ssid ;
   u8 proxy_probe_resp ;
   u8 edca_params_valid ;
   struct wcn36xx_hal_edca_param_record acbe ;
   struct wcn36xx_hal_edca_param_record acbk ;
   struct wcn36xx_hal_edca_param_record acvi ;
   struct wcn36xx_hal_edca_param_record acvo ;
   u8 ext_set_sta_key_param_valid ;
   struct wcn36xx_hal_set_sta_key_params ext_set_sta_key_param ;
   u8 wcn36xx_hal_persona ;
   u8 spectrum_mgt_enable ;
   s8 tx_mgmt_power ;
   s8 max_tx_power ;
   struct wcn36xx_hal_config_sta_params_v1 sta ;
} __attribute__((__packed__));
#line 1938  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/wcn36xx/hal.h"
struct wcn36xx_hal_config_bss_req_msg_v1 {
   struct wcn36xx_hal_msg_header header ;
   struct wcn36xx_hal_config_bss_params_v1 bss_params ;
} __attribute__((__packed__));
#line 1943  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/wcn36xx/hal.h"
struct wcn36xx_hal_config_bss_rsp_params {
   u32 status ;
   u8 bss_index ;
   u8 dpu_desc_index ;
   u8 ucast_dpu_signature ;
   u8 bcast_dpu_desc_indx ;
   u8 bcast_dpu_signature ;
   u8 mgmt_dpu_desc_index ;
   u8 mgmt_dpu_signature ;
   u8 bss_sta_index ;
   u8 bss_self_sta_index ;
   u8 bss_bcast_sta_idx ;
   u8 mac[6U] ;
   s8 tx_mgmt_power ;
} __attribute__((__packed__));
#line 1985  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/wcn36xx/hal.h"
struct wcn36xx_hal_config_bss_rsp_msg {
   struct wcn36xx_hal_msg_header header ;
   struct wcn36xx_hal_config_bss_rsp_params bss_rsp_params ;
} __attribute__((__packed__));
#line 1990  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/wcn36xx/hal.h"
struct wcn36xx_hal_delete_bss_req_msg {
   struct wcn36xx_hal_msg_header header ;
   u8 bss_index ;
} __attribute__((__packed__));
#line 2009  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/wcn36xx/hal.h"
struct wcn36xx_hal_join_req_msg {
   struct wcn36xx_hal_msg_header header ;
   u8 bssid[6U] ;
   u8 channel ;
   u8 self_sta_mac_addr[6U] ;
   u8 local_power_constraint ;
   enum phy_chan_bond_state secondary_channel_offset ;
   enum wcn36xx_hal_link_state link_state ;
   s8 max_tx_power ;
} __attribute__((__packed__));
#line 2034  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/wcn36xx/hal.h"
struct wcn36xx_hal_join_rsp_msg {
   struct wcn36xx_hal_msg_header header ;
   u32 status ;
   u8 tx_mgmt_power ;
} __attribute__((__packed__));
#line 2058  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/wcn36xx/hal.h"
struct wcn36xx_hal_set_bss_key_req_msg {
   struct wcn36xx_hal_msg_header header ;
   u8 bss_idx ;
   enum ani_ed_type enc_type ;
   u8 num_keys ;
   struct wcn36xx_hal_keys keys[4U] ;
   u8 single_tid_rc ;
} __attribute__((__packed__));
#line 2097  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/wcn36xx/hal.h"
struct wcn36xx_hal_set_sta_key_req_msg {
   struct wcn36xx_hal_msg_header header ;
   struct wcn36xx_hal_set_sta_key_params set_sta_key_params ;
} __attribute__((__packed__));
#line 2109  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/wcn36xx/hal.h"
struct wcn36xx_hal_remove_bss_key_req_msg {
   struct wcn36xx_hal_msg_header header ;
   u8 bss_idx ;
   enum ani_ed_type enc_type ;
   u8 key_id ;
   enum ani_wep_type wep_type ;
} __attribute__((__packed__));
#line 2136  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/wcn36xx/hal.h"
struct wcn36xx_hal_remove_sta_key_req_msg {
   struct wcn36xx_hal_msg_header header ;
   u16 sta_idx ;
   enum ani_ed_type enc_type ;
   u8 key_id ;
   u8 unicast ;
} __attribute__((__packed__));
#line 2189  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/wcn36xx/hal.h"
struct wcn36xx_hal_switch_channel_req_msg {
   struct wcn36xx_hal_msg_header header ;
   u8 channel_number ;
   u8 local_power_constraint ;
   enum phy_chan_bond_state secondary_channel_offset ;
   u8 tx_mgmt_power ;
   u8 max_tx_power ;
   u8 self_sta_mac_addr[6U] ;
   u8 bssid[6U] ;
} __attribute__((__packed__));
#line 2222  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/wcn36xx/hal.h"
struct wcn36xx_hal_switch_channel_rsp_msg {
   struct wcn36xx_hal_msg_header header ;
   u32 status ;
   u8 channel_number ;
   u8 tx_mgmt_power ;
   u8 bssid[6U] ;
} __attribute__((__packed__));
#line 2239  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/wcn36xx/hal.h"
struct wcn36xx_hal_process_ptt_msg_req_msg {
   struct wcn36xx_hal_msg_header header ;
   u8 ptt_msg[0U] ;
} __attribute__((__packed__));
#line 2246  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/wcn36xx/hal.h"
struct wcn36xx_hal_process_ptt_msg_rsp_msg {
   struct wcn36xx_hal_msg_header header ;
   u32 ptt_msg_resp_status ;
   u8 ptt_msg[0U] ;
} __attribute__((__packed__));
#line 2530  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/wcn36xx/hal.h"
struct wcn36xx_hal_set_link_state_req_msg {
   struct wcn36xx_hal_msg_header header ;
   u8 bssid[6U] ;
   enum wcn36xx_hal_link_state state ;
   u8 self_mac_addr[6U] ;
} __attribute__((__packed__));
#line 2668  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/wcn36xx/hal.h"
struct wcn36xx_hal_add_ba_session_req_msg {
   struct wcn36xx_hal_msg_header header ;
   u16 sta_index ;
   u8 mac_addr[6U] ;
   u8 dialog_token ;
   u8 tid ;
   u8 policy ;
   u16 buffer_size ;
   u16 timeout ;
   u16 ssn ;
   u8 direction ;
} __attribute__((__packed__));
#line 2738  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/wcn36xx/hal.h"
struct wcn36xx_hal_add_ba_req_msg {
   struct wcn36xx_hal_msg_header header ;
   u8 session_id ;
   u8 win_size ;
} __attribute__((__packed__));
#line 2773  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/wcn36xx/hal.h"
struct wcn36xx_hal_trigger_ba_req_candidate {
   u8 sta_index ;
   u8 tid_bitmap ;
} __attribute__((__packed__));
#line 2778  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/wcn36xx/hal.h"
struct wcn36xx_hal_trigger_ba_req_msg {
   struct wcn36xx_hal_msg_header header ;
   u8 session_id ;
   u16 candidate_cnt ;
} __attribute__((__packed__));
#line 2791  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/wcn36xx/hal.h"
struct wcn36xx_hal_trigger_ba_rsp_msg {
   struct wcn36xx_hal_msg_header header ;
   u8 bssid[6U] ;
   u32 status ;
   u16 candidate_cnt ;
} __attribute__((__packed__));
#line 2806  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/wcn36xx/hal.h"
struct wcn36xx_hal_del_ba_req_msg {
   struct wcn36xx_hal_msg_header header ;
   u16 sta_index ;
   u8 tid ;
   u8 direction ;
} __attribute__((__packed__));
#line 2873  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/wcn36xx/hal.h"
struct wcn36xx_hal_nv_img_download_req_msg {
   struct wcn36xx_hal_msg_header header ;
   u16 frag_number ;
   u16 last_fragment ;
   u32 nv_img_buffer_size ;
} __attribute__((__packed__));
#line 3008  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/wcn36xx/hal.h"
struct wcn36xx_hal_send_beacon_req_msg {
   struct wcn36xx_hal_msg_header header ;
   u32 beacon_length6 ;
   u32 beacon_length ;
   u8 beacon[380U] ;
   u8 bssid[6U] ;
   u32 tim_ie_offset ;
   u16 p2p_ie_offset ;
} __attribute__((__packed__));
#line 3085  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/wcn36xx/hal.h"
struct wcn36xx_hal_send_probe_resp_req_msg {
   struct wcn36xx_hal_msg_header header ;
   u8 probe_resp_template[384U] ;
   u32 probe_resp_template_len ;
   u32 proxy_probe_req_valid_ie_bmap[8U] ;
   u8 bssid[6U] ;
};
#line 3108  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/wcn36xx/hal.h"
struct wcn36xx_hal_delete_sta_context_ind_msg {
   struct wcn36xx_hal_msg_header header ;
   u16 aid ;
   u16 sta_id ;
   u8 bssid[6U] ;
   u8 addr2[6U] ;
   u16 reason_code ;
} __attribute__((__packed__));
#line 3177  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/wcn36xx/hal.h"
struct wcn36xx_hal_enter_bmps_req_msg {
   struct wcn36xx_hal_msg_header header ;
   u8 bss_index ;
   u64 tbtt ;
   u8 dtim_count ;
   u8 dtim_period ;
   u32 rssi_filter_period ;
   u32 num_beacon_per_rssi_average ;
   u8 rssi_filter_enable ;
} __attribute__((__packed__));
#line 3199  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/wcn36xx/hal.h"
struct wcn36xx_hal_exit_bmps_req_msg {
   struct wcn36xx_hal_msg_header header ;
   u8 send_data_null ;
   u8 bss_index ;
} __attribute__((__packed__));
#line 3206  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/wcn36xx/hal.h"
struct wcn36xx_hal_missed_beacon_ind_msg {
   struct wcn36xx_hal_msg_header header ;
   u8 bss_index ;
} __attribute__((__packed__));
#line 3304  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/wcn36xx/hal.h"
struct wcn36xx_hal_keep_alive_req_msg {
   struct wcn36xx_hal_msg_header header ;
   u8 packet_type ;
   u32 time_period ;
   u8 host_ipv4_addr[4U] ;
   u8 dest_ipv4_addr[4U] ;
   u8 dest_addr[6U] ;
   u8 bss_index ;
} __attribute__((__packed__));
#line 3760  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/wcn36xx/hal.h"
struct wcn36xx_hal_add_sta_self_req {
   struct wcn36xx_hal_msg_header header ;
   u8 self_addr[6U] ;
   u32 status ;
} __attribute__((__packed__));
#line 3767  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/wcn36xx/hal.h"
struct wcn36xx_hal_add_sta_self_rsp_msg {
   struct wcn36xx_hal_msg_header header ;
   u32 status ;
   u8 self_sta_index ;
   u8 dpu_index ;
   u8 dpu_signature ;
} __attribute__((__packed__));
#line 3783  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/wcn36xx/hal.h"
struct wcn36xx_hal_del_sta_self_req_msg {
   struct wcn36xx_hal_msg_header header ;
   u8 self_addr[6U] ;
} __attribute__((__packed__));
#line 3852  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/wcn36xx/hal.h"
struct wcn36xx_hal_dump_cmd_req_msg {
   struct wcn36xx_hal_msg_header header ;
   u32 arg1 ;
   u32 arg2 ;
   u32 arg3 ;
   u32 arg4 ;
   u32 arg5 ;
} __attribute__((__packed__));
#line 3890  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/wcn36xx/hal.h"
struct wcn36xx_hal_tx_compl_ind_msg {
   struct wcn36xx_hal_msg_header header ;
   u32 status ;
};
#line 4247  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/wcn36xx/hal.h"
struct wcn36xx_hal_update_scan_params_req_ex {
   struct wcn36xx_hal_msg_header header ;
   u8 dot11d_enabled ;
   u8 dot11d_resolved ;
   u8 channel_count ;
   u8 channels[60U] ;
   u16 active_min_ch_time ;
   u16 active_max_ch_time ;
   u16 passive_min_ch_time ;
   u16 passive_max_ch_time ;
   enum phy_chan_bond_state state ;
} __attribute__((__packed__));
#line 4279  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/wcn36xx/hal.h"
struct wcn36xx_hal_update_scan_params_resp {
   struct wcn36xx_hal_msg_header header ;
   u32 status ;
} __attribute__((__packed__));
#line 4444  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/wcn36xx/hal.h"
struct wcn36xx_hal_rcv_flt_pkt_set_mc_list_req_msg {
   struct wcn36xx_hal_msg_header header ;
   struct wcn36xx_hal_rcv_flt_mc_addr_list_type mc_addr_list ;
} __attribute__((__packed__));
#line 4457  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/wcn36xx/hal.h"
struct wcn36xx_hal_set_power_params_req_msg {
   struct wcn36xx_hal_msg_header header ;
   u32 ignore_dtim ;
   u32 dtim_period ;
   u32 listen_interval ;
   u32 bcast_mcast_filter ;
   u32 enable_bet ;
   u32 bet_interval ;
} __attribute__((__packed__));
#line 4557  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/wcn36xx/hal.h"
struct wcn36xx_hal_feat_caps_msg {
   struct wcn36xx_hal_msg_header header ;
   u32 feat_caps[4U] ;
} __attribute__((__packed__));
#line 4828  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/wcn36xx/hal.h"
struct __anonstruct_regs_4117 {
   u32 addr ;
   u32 value ;
};
#line 4828  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/wcn36xx/hal.h"
struct wcn36xx_hal_print_reg_info_ind {
   struct wcn36xx_hal_msg_header header ;
   u32 count ;
   u32 scenario ;
   u32 reason ;
   struct __anonstruct_regs_4117 regs[] ;
} __attribute__((__packed__));
#line 103  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/wcn36xx/wcn36xx.h"
struct nv_data {
   int is_valid ;
   u8 table ;
};
#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/wcn36xx/smd.h"
struct wcn36xx_fw_msg_status_rsp {
   u32 status ;
} __attribute__((__packed__));
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/wcn36xx/smd.h"
struct wcn36xx_hal_ind_msg {
   struct list_head list ;
   size_t msg_len ;
   u8 msg[] ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/wcn36xx/smd.c"
struct wcn36xx_cfg_val {
   u32 cfg_id ;
   u32 value ;
};
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 197 
enum hrtimer_restart;
#line 233  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ieee80211.h"
struct ieee80211_hdr {
   __le16 frame_control ;
   __le16 duration_id ;
   u8 addr1[6U] ;
   u8 addr2[6U] ;
   u8 addr3[6U] ;
   __le16 seq_ctrl ;
   u8 addr4[6U] ;
} __attribute__((__packed__, __aligned__(2)));
#line 1119  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/mac80211.h"
struct ieee80211_rx_status;
#line 1358  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/mac80211.h"
struct ieee80211_rx_status {
   u64 mactime ;
   u64 boottime_ns ;
   u32 device_timestamp ;
   u32 ampdu_reference ;
   u32 flag ;
   u16 freq ;
   u8 enc_flags ;
   u8 encoding : 2 ;
   u8 bw : 3 ;
   u8 he_ru : 3 ;
   u8 he_gi : 2 ;
   u8 he_dcm : 1 ;
   u8 rate_idx ;
   u8 nss ;
   u8 rx_flags ;
   u8 band ;
   u8 antenna ;
   s8 signal ;
   u8 chains ;
   s8 chain_signal[4U] ;
   u8 ampdu_delimiter_crc ;
   u8 zero_length_psdu_type ;
};
#line 64  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/wcn36xx/txrx.h"
struct wcn36xx_rx_bd {
   u32 bdt : 2 ;
   u32 ft : 1 ;
   u32 dpu_ne : 1 ;
   u32 rx_key_id : 3 ;
   u32 ub : 1 ;
   u32 rmf : 1 ;
   u32 uma_bypass : 1 ;
   u32 csr11 : 1 ;
   u32 reserved0 : 1 ;
   u32 scan_learn : 1 ;
   u32 rx_ch : 4 ;
   u32 rtsf : 1 ;
   u32 bsf : 1 ;
   u32 a2hf : 1 ;
   u32 st_auf : 1 ;
   u32 dpu_sign : 3 ;
   u32 dpu_rf : 8 ;
   struct wcn36xx_pdu pdu ;
   u32 addr3 : 8 ;
   u32 addr2 : 8 ;
   u32 addr1 : 8 ;
   u32 dpu_desc_idx : 8 ;
   u32 rxp_flags : 23 ;
   u32 rate_id : 9 ;
   u32 phy_stat0 ;
   u32 phy_stat1 ;
   u32 rx_times ;
   u32 pmi_cmd[6U] ;
   u32 reserved7 : 4 ;
   u32 reorder_slot_id : 6 ;
   u32 reorder_fwd_id : 6 ;
   u32 reserved6 : 12 ;
   u32 reorder_code : 4 ;
   u32 exp_seq_num : 12 ;
   u32 cur_seq_num : 12 ;
   u32 fr_type_subtype : 8 ;
   u32 msdu_size : 16 ;
   u32 sub_fr_id : 4 ;
   u32 proc_order : 4 ;
   u32 reserved9 : 4 ;
   u32 aef : 1 ;
   u32 lsf : 1 ;
   u32 esf : 1 ;
   u32 asf : 1 ;
};
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 375  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/debugfs.h"
enum nl80211_commands {
    NL80211_CMD_UNSPEC = 0,
    NL80211_CMD_GET_WIPHY = 1,
    NL80211_CMD_SET_WIPHY = 2,
    NL80211_CMD_NEW_WIPHY = 3,
    NL80211_CMD_DEL_WIPHY = 4,
    NL80211_CMD_GET_INTERFACE = 5,
    NL80211_CMD_SET_INTERFACE = 6,
    NL80211_CMD_NEW_INTERFACE = 7,
    NL80211_CMD_DEL_INTERFACE = 8,
    NL80211_CMD_GET_KEY = 9,
    NL80211_CMD_SET_KEY = 10,
    NL80211_CMD_NEW_KEY = 11,
    NL80211_CMD_DEL_KEY = 12,
    NL80211_CMD_GET_BEACON = 13,
    NL80211_CMD_SET_BEACON = 14,
    NL80211_CMD_START_AP = 15,
    NL80211_CMD_NEW_BEACON = 15,
    NL80211_CMD_STOP_AP = 16,
    NL80211_CMD_DEL_BEACON = 16,
    NL80211_CMD_GET_STATION = 17,
    NL80211_CMD_SET_STATION = 18,
    NL80211_CMD_NEW_STATION = 19,
    NL80211_CMD_DEL_STATION = 20,
    NL80211_CMD_GET_MPATH = 21,
    NL80211_CMD_SET_MPATH = 22,
    NL80211_CMD_NEW_MPATH = 23,
    NL80211_CMD_DEL_MPATH = 24,
    NL80211_CMD_SET_BSS = 25,
    NL80211_CMD_SET_REG = 26,
    NL80211_CMD_REQ_SET_REG = 27,
    NL80211_CMD_GET_MESH_CONFIG = 28,
    NL80211_CMD_SET_MESH_CONFIG = 29,
    NL80211_CMD_SET_MGMT_EXTRA_IE = 30,
    NL80211_CMD_GET_REG = 31,
    NL80211_CMD_GET_SCAN = 32,
    NL80211_CMD_TRIGGER_SCAN = 33,
    NL80211_CMD_NEW_SCAN_RESULTS = 34,
    NL80211_CMD_SCAN_ABORTED = 35,
    NL80211_CMD_REG_CHANGE = 36,
    NL80211_CMD_AUTHENTICATE = 37,
    NL80211_CMD_ASSOCIATE = 38,
    NL80211_CMD_DEAUTHENTICATE = 39,
    NL80211_CMD_DISASSOCIATE = 40,
    NL80211_CMD_MICHAEL_MIC_FAILURE = 41,
    NL80211_CMD_REG_BEACON_HINT = 42,
    NL80211_CMD_JOIN_IBSS = 43,
    NL80211_CMD_LEAVE_IBSS = 44,
    NL80211_CMD_TESTMODE = 45,
    NL80211_CMD_CONNECT = 46,
    NL80211_CMD_ROAM = 47,
    NL80211_CMD_DISCONNECT = 48,
    NL80211_CMD_SET_WIPHY_NETNS = 49,
    NL80211_CMD_GET_SURVEY = 50,
    NL80211_CMD_NEW_SURVEY_RESULTS = 51,
    NL80211_CMD_SET_PMKSA = 52,
    NL80211_CMD_DEL_PMKSA = 53,
    NL80211_CMD_FLUSH_PMKSA = 54,
    NL80211_CMD_REMAIN_ON_CHANNEL = 55,
    NL80211_CMD_CANCEL_REMAIN_ON_CHANNEL = 56,
    NL80211_CMD_SET_TX_BITRATE_MASK = 57,
    NL80211_CMD_REGISTER_FRAME = 58,
    NL80211_CMD_REGISTER_ACTION = 58,
    NL80211_CMD_FRAME = 59,
    NL80211_CMD_ACTION = 59,
    NL80211_CMD_FRAME_TX_STATUS = 60,
    NL80211_CMD_ACTION_TX_STATUS = 60,
    NL80211_CMD_SET_POWER_SAVE = 61,
    NL80211_CMD_GET_POWER_SAVE = 62,
    NL80211_CMD_SET_CQM = 63,
    NL80211_CMD_NOTIFY_CQM = 64,
    NL80211_CMD_SET_CHANNEL = 65,
    NL80211_CMD_SET_WDS_PEER = 66,
    NL80211_CMD_FRAME_WAIT_CANCEL = 67,
    NL80211_CMD_JOIN_MESH = 68,
    NL80211_CMD_LEAVE_MESH = 69,
    NL80211_CMD_UNPROT_DEAUTHENTICATE = 70,
    NL80211_CMD_UNPROT_DISASSOCIATE = 71,
    NL80211_CMD_NEW_PEER_CANDIDATE = 72,
    NL80211_CMD_GET_WOWLAN = 73,
    NL80211_CMD_SET_WOWLAN = 74,
    NL80211_CMD_START_SCHED_SCAN = 75,
    NL80211_CMD_STOP_SCHED_SCAN = 76,
    NL80211_CMD_SCHED_SCAN_RESULTS = 77,
    NL80211_CMD_SCHED_SCAN_STOPPED = 78,
    NL80211_CMD_SET_REKEY_OFFLOAD = 79,
    NL80211_CMD_PMKSA_CANDIDATE = 80,
    NL80211_CMD_TDLS_OPER = 81,
    NL80211_CMD_TDLS_MGMT = 82,
    NL80211_CMD_UNEXPECTED_FRAME = 83,
    NL80211_CMD_PROBE_CLIENT = 84,
    NL80211_CMD_REGISTER_BEACONS = 85,
    NL80211_CMD_UNEXPECTED_4ADDR_FRAME = 86,
    NL80211_CMD_SET_NOACK_MAP = 87,
    NL80211_CMD_CH_SWITCH_NOTIFY = 88,
    NL80211_CMD_START_P2P_DEVICE = 89,
    NL80211_CMD_STOP_P2P_DEVICE = 90,
    NL80211_CMD_CONN_FAILED = 91,
    NL80211_CMD_SET_MCAST_RATE = 92,
    NL80211_CMD_SET_MAC_ACL = 93,
    NL80211_CMD_RADAR_DETECT = 94,
    NL80211_CMD_GET_PROTOCOL_FEATURES = 95,
    NL80211_CMD_UPDATE_FT_IES = 96,
    NL80211_CMD_FT_EVENT = 97,
    NL80211_CMD_CRIT_PROTOCOL_START = 98,
    NL80211_CMD_CRIT_PROTOCOL_STOP = 99,
    NL80211_CMD_GET_COALESCE = 100,
    NL80211_CMD_SET_COALESCE = 101,
    NL80211_CMD_CHANNEL_SWITCH = 102,
    NL80211_CMD_VENDOR = 103,
    NL80211_CMD_SET_QOS_MAP = 104,
    NL80211_CMD_ADD_TX_TS = 105,
    NL80211_CMD_DEL_TX_TS = 106,
    NL80211_CMD_GET_MPP = 107,
    NL80211_CMD_JOIN_OCB = 108,
    NL80211_CMD_LEAVE_OCB = 109,
    NL80211_CMD_CH_SWITCH_STARTED_NOTIFY = 110,
    NL80211_CMD_TDLS_CHANNEL_SWITCH = 111,
    NL80211_CMD_TDLS_CANCEL_CHANNEL_SWITCH = 112,
    NL80211_CMD_WIPHY_REG_CHANGE = 113,
    NL80211_CMD_ABORT_SCAN = 114,
    NL80211_CMD_START_NAN = 115,
    NL80211_CMD_STOP_NAN = 116,
    NL80211_CMD_ADD_NAN_FUNCTION = 117,
    NL80211_CMD_DEL_NAN_FUNCTION = 118,
    NL80211_CMD_CHANGE_NAN_CONFIG = 119,
    NL80211_CMD_NAN_MATCH = 120,
    NL80211_CMD_SET_MULTICAST_TO_UNICAST = 121,
    NL80211_CMD_UPDATE_CONNECT_PARAMS = 122,
    NL80211_CMD_SET_PMK = 123,
    NL80211_CMD_DEL_PMK = 124,
    NL80211_CMD_PORT_AUTHORIZED = 125,
    NL80211_CMD_RELOAD_REGDB = 126,
    NL80211_CMD_EXTERNAL_AUTH = 127,
    NL80211_CMD_STA_OPMODE_CHANGED = 128,
    NL80211_CMD_CONTROL_PORT_FRAME = 129,
    NL80211_CMD_GET_FTM_RESPONDER_STATS = 130,
    NL80211_CMD_PEER_MEASUREMENT_START = 131,
    NL80211_CMD_PEER_MEASUREMENT_RESULT = 132,
    NL80211_CMD_PEER_MEASUREMENT_COMPLETE = 133,
    NL80211_CMD_NOTIFY_RADAR = 134,
    NL80211_CMD_UPDATE_OWE_INFO = 135,
    NL80211_CMD_PROBE_MESH_LINK = 136,
    __NL80211_CMD_AFTER_LAST = 137,
    NL80211_CMD_MAX = 136
};
#line 522 
enum nl80211_attrs {
    NL80211_ATTR_UNSPEC = 0,
    NL80211_ATTR_WIPHY = 1,
    NL80211_ATTR_WIPHY_NAME = 2,
    NL80211_ATTR_IFINDEX = 3,
    NL80211_ATTR_IFNAME = 4,
    NL80211_ATTR_IFTYPE = 5,
    NL80211_ATTR_MAC = 6,
    NL80211_ATTR_KEY_DATA = 7,
    NL80211_ATTR_KEY_IDX = 8,
    NL80211_ATTR_KEY_CIPHER = 9,
    NL80211_ATTR_KEY_SEQ = 10,
    NL80211_ATTR_KEY_DEFAULT = 11,
    NL80211_ATTR_BEACON_INTERVAL = 12,
    NL80211_ATTR_DTIM_PERIOD = 13,
    NL80211_ATTR_BEACON_HEAD = 14,
    NL80211_ATTR_BEACON_TAIL = 15,
    NL80211_ATTR_STA_AID = 16,
    NL80211_ATTR_STA_FLAGS = 17,
    NL80211_ATTR_STA_LISTEN_INTERVAL = 18,
    NL80211_ATTR_STA_SUPPORTED_RATES = 19,
    NL80211_ATTR_STA_VLAN = 20,
    NL80211_ATTR_STA_INFO = 21,
    NL80211_ATTR_WIPHY_BANDS = 22,
    NL80211_ATTR_MNTR_FLAGS = 23,
    NL80211_ATTR_MESH_ID = 24,
    NL80211_ATTR_STA_PLINK_ACTION = 25,
    NL80211_ATTR_MPATH_NEXT_HOP = 26,
    NL80211_ATTR_MPATH_INFO = 27,
    NL80211_ATTR_BSS_CTS_PROT = 28,
    NL80211_ATTR_BSS_SHORT_PREAMBLE = 29,
    NL80211_ATTR_BSS_SHORT_SLOT_TIME = 30,
    NL80211_ATTR_HT_CAPABILITY = 31,
    NL80211_ATTR_SUPPORTED_IFTYPES = 32,
    NL80211_ATTR_REG_ALPHA2 = 33,
    NL80211_ATTR_REG_RULES = 34,
    NL80211_ATTR_MESH_CONFIG = 35,
    NL80211_ATTR_BSS_BASIC_RATES = 36,
    NL80211_ATTR_WIPHY_TXQ_PARAMS = 37,
    NL80211_ATTR_WIPHY_FREQ = 38,
    NL80211_ATTR_WIPHY_CHANNEL_TYPE = 39,
    NL80211_ATTR_KEY_DEFAULT_MGMT = 40,
    NL80211_ATTR_MGMT_SUBTYPE = 41,
    NL80211_ATTR_IE = 42,
    NL80211_ATTR_MAX_NUM_SCAN_SSIDS = 43,
    NL80211_ATTR_SCAN_FREQUENCIES = 44,
    NL80211_ATTR_SCAN_SSIDS = 45,
    NL80211_ATTR_GENERATION = 46,
    NL80211_ATTR_BSS = 47,
    NL80211_ATTR_REG_INITIATOR = 48,
    NL80211_ATTR_REG_TYPE = 49,
    NL80211_ATTR_SUPPORTED_COMMANDS = 50,
    NL80211_ATTR_FRAME = 51,
    NL80211_ATTR_SSID = 52,
    NL80211_ATTR_AUTH_TYPE = 53,
    NL80211_ATTR_REASON_CODE = 54,
    NL80211_ATTR_KEY_TYPE = 55,
    NL80211_ATTR_MAX_SCAN_IE_LEN = 56,
    NL80211_ATTR_CIPHER_SUITES = 57,
    NL80211_ATTR_FREQ_BEFORE = 58,
    NL80211_ATTR_FREQ_AFTER = 59,
    NL80211_ATTR_FREQ_FIXED = 60,
    NL80211_ATTR_WIPHY_RETRY_SHORT = 61,
    NL80211_ATTR_WIPHY_RETRY_LONG = 62,
    NL80211_ATTR_WIPHY_FRAG_THRESHOLD = 63,
    NL80211_ATTR_WIPHY_RTS_THRESHOLD = 64,
    NL80211_ATTR_TIMED_OUT = 65,
    NL80211_ATTR_USE_MFP = 66,
    NL80211_ATTR_STA_FLAGS2 = 67,
    NL80211_ATTR_CONTROL_PORT = 68,
    NL80211_ATTR_TESTDATA = 69,
    NL80211_ATTR_PRIVACY = 70,
    NL80211_ATTR_DISCONNECTED_BY_AP = 71,
    NL80211_ATTR_STATUS_CODE = 72,
    NL80211_ATTR_CIPHER_SUITES_PAIRWISE = 73,
    NL80211_ATTR_CIPHER_SUITE_GROUP = 74,
    NL80211_ATTR_WPA_VERSIONS = 75,
    NL80211_ATTR_AKM_SUITES = 76,
    NL80211_ATTR_REQ_IE = 77,
    NL80211_ATTR_RESP_IE = 78,
    NL80211_ATTR_PREV_BSSID = 79,
    NL80211_ATTR_KEY = 80,
    NL80211_ATTR_KEYS = 81,
    NL80211_ATTR_PID = 82,
    NL80211_ATTR_4ADDR = 83,
    NL80211_ATTR_SURVEY_INFO = 84,
    NL80211_ATTR_PMKID = 85,
    NL80211_ATTR_MAX_NUM_PMKIDS = 86,
    NL80211_ATTR_DURATION = 87,
    NL80211_ATTR_COOKIE = 88,
    NL80211_ATTR_WIPHY_COVERAGE_CLASS = 89,
    NL80211_ATTR_TX_RATES = 90,
    NL80211_ATTR_FRAME_MATCH = 91,
    NL80211_ATTR_ACK = 92,
    NL80211_ATTR_PS_STATE = 93,
    NL80211_ATTR_CQM = 94,
    NL80211_ATTR_LOCAL_STATE_CHANGE = 95,
    NL80211_ATTR_AP_ISOLATE = 96,
    NL80211_ATTR_WIPHY_TX_POWER_SETTING = 97,
    NL80211_ATTR_WIPHY_TX_POWER_LEVEL = 98,
    NL80211_ATTR_TX_FRAME_TYPES = 99,
    NL80211_ATTR_RX_FRAME_TYPES = 100,
    NL80211_ATTR_FRAME_TYPE = 101,
    NL80211_ATTR_CONTROL_PORT_ETHERTYPE = 102,
    NL80211_ATTR_CONTROL_PORT_NO_ENCRYPT = 103,
    NL80211_ATTR_SUPPORT_IBSS_RSN = 104,
    NL80211_ATTR_WIPHY_ANTENNA_TX = 105,
    NL80211_ATTR_WIPHY_ANTENNA_RX = 106,
    NL80211_ATTR_MCAST_RATE = 107,
    NL80211_ATTR_OFFCHANNEL_TX_OK = 108,
    NL80211_ATTR_BSS_HT_OPMODE = 109,
    NL80211_ATTR_KEY_DEFAULT_TYPES = 110,
    NL80211_ATTR_MAX_REMAIN_ON_CHANNEL_DURATION = 111,
    NL80211_ATTR_MESH_SETUP = 112,
    NL80211_ATTR_WIPHY_ANTENNA_AVAIL_TX = 113,
    NL80211_ATTR_WIPHY_ANTENNA_AVAIL_RX = 114,
    NL80211_ATTR_SUPPORT_MESH_AUTH = 115,
    NL80211_ATTR_STA_PLINK_STATE = 116,
    NL80211_ATTR_WOWLAN_TRIGGERS = 117,
    NL80211_ATTR_WOWLAN_TRIGGERS_SUPPORTED = 118,
    NL80211_ATTR_SCHED_SCAN_INTERVAL = 119,
    NL80211_ATTR_INTERFACE_COMBINATIONS = 120,
    NL80211_ATTR_SOFTWARE_IFTYPES = 121,
    NL80211_ATTR_REKEY_DATA = 122,
    NL80211_ATTR_MAX_NUM_SCHED_SCAN_SSIDS = 123,
    NL80211_ATTR_MAX_SCHED_SCAN_IE_LEN = 124,
    NL80211_ATTR_SCAN_SUPP_RATES = 125,
    NL80211_ATTR_HIDDEN_SSID = 126,
    NL80211_ATTR_IE_PROBE_RESP = 127,
    NL80211_ATTR_IE_ASSOC_RESP = 128,
    NL80211_ATTR_STA_WME = 129,
    NL80211_ATTR_SUPPORT_AP_UAPSD = 130,
    NL80211_ATTR_ROAM_SUPPORT = 131,
    NL80211_ATTR_SCHED_SCAN_MATCH = 132,
    NL80211_ATTR_MAX_MATCH_SETS = 133,
    NL80211_ATTR_PMKSA_CANDIDATE = 134,
    NL80211_ATTR_TX_NO_CCK_RATE = 135,
    NL80211_ATTR_TDLS_ACTION = 136,
    NL80211_ATTR_TDLS_DIALOG_TOKEN = 137,
    NL80211_ATTR_TDLS_OPERATION = 138,
    NL80211_ATTR_TDLS_SUPPORT = 139,
    NL80211_ATTR_TDLS_EXTERNAL_SETUP = 140,
    NL80211_ATTR_DEVICE_AP_SME = 141,
    NL80211_ATTR_DONT_WAIT_FOR_ACK = 142,
    NL80211_ATTR_FEATURE_FLAGS = 143,
    NL80211_ATTR_PROBE_RESP_OFFLOAD = 144,
    NL80211_ATTR_PROBE_RESP = 145,
    NL80211_ATTR_DFS_REGION = 146,
    NL80211_ATTR_DISABLE_HT = 147,
    NL80211_ATTR_HT_CAPABILITY_MASK = 148,
    NL80211_ATTR_NOACK_MAP = 149,
    NL80211_ATTR_INACTIVITY_TIMEOUT = 150,
    NL80211_ATTR_RX_SIGNAL_DBM = 151,
    NL80211_ATTR_BG_SCAN_PERIOD = 152,
    NL80211_ATTR_WDEV = 153,
    NL80211_ATTR_USER_REG_HINT_TYPE = 154,
    NL80211_ATTR_CONN_FAILED_REASON = 155,
    NL80211_ATTR_AUTH_DATA = 156,
    NL80211_ATTR_VHT_CAPABILITY = 157,
    NL80211_ATTR_SCAN_FLAGS = 158,
    NL80211_ATTR_CHANNEL_WIDTH = 159,
    NL80211_ATTR_CENTER_FREQ1 = 160,
    NL80211_ATTR_CENTER_FREQ2 = 161,
    NL80211_ATTR_P2P_CTWINDOW = 162,
    NL80211_ATTR_P2P_OPPPS = 163,
    NL80211_ATTR_LOCAL_MESH_POWER_MODE = 164,
    NL80211_ATTR_ACL_POLICY = 165,
    NL80211_ATTR_MAC_ADDRS = 166,
    NL80211_ATTR_MAC_ACL_MAX = 167,
    NL80211_ATTR_RADAR_EVENT = 168,
    NL80211_ATTR_EXT_CAPA = 169,
    NL80211_ATTR_EXT_CAPA_MASK = 170,
    NL80211_ATTR_STA_CAPABILITY = 171,
    NL80211_ATTR_STA_EXT_CAPABILITY = 172,
    NL80211_ATTR_PROTOCOL_FEATURES = 173,
    NL80211_ATTR_SPLIT_WIPHY_DUMP = 174,
    NL80211_ATTR_DISABLE_VHT = 175,
    NL80211_ATTR_VHT_CAPABILITY_MASK = 176,
    NL80211_ATTR_MDID = 177,
    NL80211_ATTR_IE_RIC = 178,
    NL80211_ATTR_CRIT_PROT_ID = 179,
    NL80211_ATTR_MAX_CRIT_PROT_DURATION = 180,
    NL80211_ATTR_PEER_AID = 181,
    NL80211_ATTR_COALESCE_RULE = 182,
    NL80211_ATTR_CH_SWITCH_COUNT = 183,
    NL80211_ATTR_CH_SWITCH_BLOCK_TX = 184,
    NL80211_ATTR_CSA_IES = 185,
    NL80211_ATTR_CSA_C_OFF_BEACON = 186,
    NL80211_ATTR_CSA_C_OFF_PRESP = 187,
    NL80211_ATTR_RXMGMT_FLAGS = 188,
    NL80211_ATTR_STA_SUPPORTED_CHANNELS = 189,
    NL80211_ATTR_STA_SUPPORTED_OPER_CLASSES = 190,
    NL80211_ATTR_HANDLE_DFS = 191,
    NL80211_ATTR_SUPPORT_5_MHZ = 192,
    NL80211_ATTR_SUPPORT_10_MHZ = 193,
    NL80211_ATTR_OPMODE_NOTIF = 194,
    NL80211_ATTR_VENDOR_ID = 195,
    NL80211_ATTR_VENDOR_SUBCMD = 196,
    NL80211_ATTR_VENDOR_DATA = 197,
    NL80211_ATTR_VENDOR_EVENTS = 198,
    NL80211_ATTR_QOS_MAP = 199,
    NL80211_ATTR_MAC_HINT = 200,
    NL80211_ATTR_WIPHY_FREQ_HINT = 201,
    NL80211_ATTR_MAX_AP_ASSOC_STA = 202,
    NL80211_ATTR_TDLS_PEER_CAPABILITY = 203,
    NL80211_ATTR_SOCKET_OWNER = 204,
    NL80211_ATTR_CSA_C_OFFSETS_TX = 205,
    NL80211_ATTR_MAX_CSA_COUNTERS = 206,
    NL80211_ATTR_TDLS_INITIATOR = 207,
    NL80211_ATTR_USE_RRM = 208,
    NL80211_ATTR_WIPHY_DYN_ACK = 209,
    NL80211_ATTR_TSID = 210,
    NL80211_ATTR_USER_PRIO = 211,
    NL80211_ATTR_ADMITTED_TIME = 212,
    NL80211_ATTR_SMPS_MODE = 213,
    NL80211_ATTR_OPER_CLASS = 214,
    NL80211_ATTR_MAC_MASK = 215,
    NL80211_ATTR_WIPHY_SELF_MANAGED_REG = 216,
    NL80211_ATTR_EXT_FEATURES = 217,
    NL80211_ATTR_SURVEY_RADIO_STATS = 218,
    NL80211_ATTR_NETNS_FD = 219,
    NL80211_ATTR_SCHED_SCAN_DELAY = 220,
    NL80211_ATTR_REG_INDOOR = 221,
    NL80211_ATTR_MAX_NUM_SCHED_SCAN_PLANS = 222,
    NL80211_ATTR_MAX_SCAN_PLAN_INTERVAL = 223,
    NL80211_ATTR_MAX_SCAN_PLAN_ITERATIONS = 224,
    NL80211_ATTR_SCHED_SCAN_PLANS = 225,
    NL80211_ATTR_PBSS = 226,
    NL80211_ATTR_BSS_SELECT = 227,
    NL80211_ATTR_STA_SUPPORT_P2P_PS = 228,
    NL80211_ATTR_PAD = 229,
    NL80211_ATTR_IFTYPE_EXT_CAPA = 230,
    NL80211_ATTR_MU_MIMO_GROUP_DATA = 231,
    NL80211_ATTR_MU_MIMO_FOLLOW_MAC_ADDR = 232,
    NL80211_ATTR_SCAN_START_TIME_TSF = 233,
    NL80211_ATTR_SCAN_START_TIME_TSF_BSSID = 234,
    NL80211_ATTR_MEASUREMENT_DURATION = 235,
    NL80211_ATTR_MEASUREMENT_DURATION_MANDATORY = 236,
    NL80211_ATTR_MESH_PEER_AID = 237,
    NL80211_ATTR_NAN_MASTER_PREF = 238,
    NL80211_ATTR_BANDS = 239,
    NL80211_ATTR_NAN_FUNC = 240,
    NL80211_ATTR_NAN_MATCH = 241,
    NL80211_ATTR_FILS_KEK = 242,
    NL80211_ATTR_FILS_NONCES = 243,
    NL80211_ATTR_MULTICAST_TO_UNICAST_ENABLED = 244,
    NL80211_ATTR_BSSID = 245,
    NL80211_ATTR_SCHED_SCAN_RELATIVE_RSSI = 246,
    NL80211_ATTR_SCHED_SCAN_RSSI_ADJUST = 247,
    NL80211_ATTR_TIMEOUT_REASON = 248,
    NL80211_ATTR_FILS_ERP_USERNAME = 249,
    NL80211_ATTR_FILS_ERP_REALM = 250,
    NL80211_ATTR_FILS_ERP_NEXT_SEQ_NUM = 251,
    NL80211_ATTR_FILS_ERP_RRK = 252,
    NL80211_ATTR_FILS_CACHE_ID = 253,
    NL80211_ATTR_PMK = 254,
    NL80211_ATTR_SCHED_SCAN_MULTI = 255,
    NL80211_ATTR_SCHED_SCAN_MAX_REQS = 256,
    NL80211_ATTR_WANT_1X_4WAY_HS = 257,
    NL80211_ATTR_PMKR0_NAME = 258,
    NL80211_ATTR_PORT_AUTHORIZED = 259,
    NL80211_ATTR_EXTERNAL_AUTH_ACTION = 260,
    NL80211_ATTR_EXTERNAL_AUTH_SUPPORT = 261,
    NL80211_ATTR_NSS = 262,
    NL80211_ATTR_ACK_SIGNAL = 263,
    NL80211_ATTR_CONTROL_PORT_OVER_NL80211 = 264,
    NL80211_ATTR_TXQ_STATS = 265,
    NL80211_ATTR_TXQ_LIMIT = 266,
    NL80211_ATTR_TXQ_MEMORY_LIMIT = 267,
    NL80211_ATTR_TXQ_QUANTUM = 268,
    NL80211_ATTR_HE_CAPABILITY = 269,
    NL80211_ATTR_FTM_RESPONDER = 270,
    NL80211_ATTR_FTM_RESPONDER_STATS = 271,
    NL80211_ATTR_TIMEOUT = 272,
    NL80211_ATTR_PEER_MEASUREMENTS = 273,
    NL80211_ATTR_AIRTIME_WEIGHT = 274,
    NL80211_ATTR_STA_TX_POWER_SETTING = 275,
    NL80211_ATTR_STA_TX_POWER = 276,
    NL80211_ATTR_SAE_PASSWORD = 277,
    NL80211_ATTR_TWT_RESPONDER = 278,
    NL80211_ATTR_HE_OBSS_PD = 279,
    NL80211_ATTR_WIPHY_EDMG_CHANNELS = 280,
    NL80211_ATTR_WIPHY_EDMG_BW_CONFIG = 281,
    NL80211_ATTR_VLAN_ID = 282,
    __NL80211_ATTR_AFTER_LAST = 283,
    NUM_NL80211_ATTR = 283,
    NL80211_ATTR_MAX = 282
};
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/wcn36xx/testmode.h"
struct ftm_rsp_msg {
   u16 msg_id ;
   u16 msg_body_length ;
   u32 resp_status ;
   u8 msg_response[0U] ;
} __attribute__((__packed__));
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/wcn36xx/testmode.c"
struct build_release_number {
   u16 drv_major ;
   u16 drv_minor ;
   u16 drv_patch ;
   u16 drv_build ;
   u16 ptt_max ;
   u16 ptt_min ;
   u16 fw_ver ;
} __attribute__((__packed__));
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 197 
enum hrtimer_restart;
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/dd.c"
struct device_private {
   void *driver_data ;
};
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 244  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/idr.h"
struct ida {
   struct xarray xa ;
};
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rtmutex.h"
struct rt_mutex {
   raw_spinlock_t wait_lock ;
   struct rb_root_cached waiters ;
   struct task_struct *owner ;
   int save_state ;
   char *name ;
   char *file ;
   int line ;
   void *magic ;
   struct lockdep_map dep_map ;
};
#line 69  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/i2c.h"
struct i2c_msg {
   __u16 addr ;
   __u16 flags ;
   __u16 len ;
   __u8 *buf ;
};
#line 135  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/i2c.h"
union i2c_smbus_data {
   __u8 byte ;
   __u16 word ;
   __u8 block[34U] ;
};
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/i2c.h"
struct i2c_algorithm;
#line 28 
struct i2c_adapter;
#line 29 
struct i2c_client;
#line 33 
enum i2c_slave_event;
#line 33 
enum i2c_slave_event;
#line 314  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/i2c.h"
struct i2c_client {
   unsigned short flags ;
   unsigned short addr ;
   char name[20U] ;
   struct i2c_adapter *adapter ;
   struct device dev ;
   int init_irq ;
   int irq ;
   struct list_head detected ;
   int (*slave_cb)(struct i2c_client *, enum i2c_slave_event , u8 *) ;
};
#line 360 
enum i2c_slave_event {
    I2C_SLAVE_READ_REQUESTED = 0,
    I2C_SLAVE_WRITE_REQUESTED = 1,
    I2C_SLAVE_READ_PROCESSED = 2,
    I2C_SLAVE_WRITE_RECEIVED = 3,
    I2C_SLAVE_STOP = 4
};
#line 527  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/i2c.h"
struct i2c_algorithm {
   int (*master_xfer)(struct i2c_adapter *, struct i2c_msg *, int ) ;
   int (*master_xfer_atomic)(struct i2c_adapter *, struct i2c_msg *, int ) ;
   int (*smbus_xfer)(struct i2c_adapter *, u16 , unsigned short , char , u8 , int , union i2c_smbus_data *) ;
   int (*smbus_xfer_atomic)(struct i2c_adapter *, u16 , unsigned short , char , u8 , int , union i2c_smbus_data *) ;
   u32 (*functionality)(struct i2c_adapter *) ;
   int (*reg_slave)(struct i2c_client *) ;
   int (*unreg_slave)(struct i2c_client *) ;
};
#line 565  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/i2c.h"
struct i2c_lock_operations {
   void (*lock_bus)(struct i2c_adapter *, unsigned int ) ;
   int (*trylock_bus)(struct i2c_adapter *, unsigned int ) ;
   void (*unlock_bus)(struct i2c_adapter *, unsigned int ) ;
};
#line 618 
struct gpio_desc;
#line 618  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/i2c.h"
struct i2c_bus_recovery_info {
   int (*recover_bus)(struct i2c_adapter *) ;
   int (*get_scl)(struct i2c_adapter *) ;
   void (*set_scl)(struct i2c_adapter *, int ) ;
   int (*get_sda)(struct i2c_adapter *) ;
   void (*set_sda)(struct i2c_adapter *, int ) ;
   int (*get_bus_free)(struct i2c_adapter *) ;
   void (*prepare_recovery)(struct i2c_adapter *) ;
   void (*unprepare_recovery)(struct i2c_adapter *) ;
   struct gpio_desc *scl_gpiod ;
   struct gpio_desc *sda_gpiod ;
};
#line 661  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/i2c.h"
struct i2c_adapter_quirks {
   u64 flags ;
   int max_num_msgs ;
   u16 max_write_len ;
   u16 max_read_len ;
   u16 max_comb_1st_msg_len ;
   u16 max_comb_2nd_msg_len ;
};
#line 692  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/i2c.h"
struct i2c_adapter {
   struct module *owner ;
   unsigned int class ;
   struct i2c_algorithm *algo ;
   void *algo_data ;
   struct i2c_lock_operations *lock_ops ;
   struct rt_mutex bus_lock ;
   struct rt_mutex mux_lock ;
   int timeout ;
   int retries ;
   struct device dev ;
   unsigned long locked_flags ;
   int nr ;
   char name[48U] ;
   struct completion dev_released ;
   struct mutex userspace_clients_lock ;
   struct list_head userspace_clients ;
   struct i2c_bus_recovery_info *bus_recovery_info ;
   struct i2c_adapter_quirks *quirks ;
   struct irq_domain *host_notify_domain ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cdev.h"
struct cdev {
   struct kobject kobj ;
   struct module *owner ;
   struct file_operations *ops ;
   struct list_head list ;
   dev_t dev ;
   unsigned int count ;
} __attribute__((__designated_init__));
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-common.h"
struct v4l2_edid {
   __u32 pad ;
   __u32 start_block ;
   __u32 blocks ;
   __u32 reserved[5U] ;
   __u8 *edid ;
};
#line 754 
enum v4l2_priority {
    V4L2_PRIORITY_UNSET = 0,
    V4L2_PRIORITY_BACKGROUND = 1,
    V4L2_PRIORITY_INTERACTIVE = 2,
    V4L2_PRIORITY_RECORD = 3,
    V4L2_PRIORITY_DEFAULT = 2
};
#line 413  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_rect {
   __s32 left ;
   __s32 top ;
   __u32 width ;
   __u32 height ;
};
#line 420  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_fract {
   __u32 numerator ;
   __u32 denominator ;
};
#line 1212  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
typedef __u64 v4l2_std_id;
#line 1394  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_bt_timings {
   __u32 width ;
   __u32 height ;
   __u32 interlaced ;
   __u32 polarities ;
   __u64 pixelclock ;
   __u32 hfrontporch ;
   __u32 hsync ;
   __u32 hbackporch ;
   __u32 vfrontporch ;
   __u32 vsync ;
   __u32 vbackporch ;
   __u32 il_vfrontporch ;
   __u32 il_vsync ;
   __u32 il_vbackporch ;
   __u32 standards ;
   __u32 flags ;
   struct v4l2_fract picture_aspect ;
   __u8 cea861_vic ;
   __u8 hdmi_vic ;
   __u8 reserved[46U] ;
} __attribute__((__packed__));
#line 1517  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
union __anonunion_8975 {
   struct v4l2_bt_timings bt ;
   __u32 reserved[32U] ;
};
#line 1517  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_dv_timings {
   __u32 type ;
   union __anonunion_8975 __anonCompField_v4l2_dv_timings_77 ;
} __attribute__((__packed__));
#line 1536  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_enum_dv_timings {
   __u32 index ;
   __u32 pad ;
   __u32 reserved[2U] ;
   struct v4l2_dv_timings timings ;
};
#line 1554  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_bt_timings_cap {
   __u32 min_width ;
   __u32 max_width ;
   __u32 min_height ;
   __u32 max_height ;
   __u64 min_pixelclock ;
   __u64 max_pixelclock ;
   __u32 standards ;
   __u32 capabilities ;
   __u32 reserved[16U] ;
} __attribute__((__packed__));
#line 1581  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
union __anonunion_8976 {
   struct v4l2_bt_timings_cap bt ;
   __u32 raw_data[32U] ;
};
#line 1581  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_dv_timings_cap {
   __u32 type ;
   __u32 pad ;
   __u32 reserved[2U] ;
   union __anonunion_8976 __anonCompField_v4l2_dv_timings_cap_78 ;
};
#line 1803  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_tuner {
   __u32 index ;
   __u8 name[32U] ;
   __u32 type ;
   __u32 capability ;
   __u32 rangelow ;
   __u32 rangehigh ;
   __u32 rxsubchans ;
   __u32 audmode ;
   __s32 signal ;
   __s32 afc ;
   __u32 reserved[4U] ;
};
#line 1817  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_modulator {
   __u32 index ;
   __u8 name[32U] ;
   __u32 capability ;
   __u32 rangelow ;
   __u32 rangehigh ;
   __u32 txsubchans ;
   __u32 type ;
   __u32 reserved[3U] ;
};
#line 1860  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_frequency {
   __u32 tuner ;
   __u32 type ;
   __u32 frequency ;
   __u32 reserved[8U] ;
};
#line 1871  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_frequency_band {
   __u32 tuner ;
   __u32 type ;
   __u32 index ;
   __u32 capability ;
   __u32 rangelow ;
   __u32 rangehigh ;
   __u32 modulation ;
   __u32 reserved[9U] ;
};
#line 2043  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_vbi_format {
   __u32 sampling_rate ;
   __u32 offset ;
   __u32 samples_per_line ;
   __u32 sample_format ;
   __s32 start[2U] ;
   __u32 count[2U] ;
   __u32 flags ;
   __u32 reserved[2U] ;
};
#line 2071  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_sliced_vbi_format {
   __u16 service_set ;
   __u16 service_lines[2U][24U] ;
   __u32 io_size ;
   __u32 reserved[2U] ;
};
#line 2095  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_sliced_vbi_cap {
   __u16 service_set ;
   __u16 service_lines[2U][24U] ;
   __u32 type ;
   __u32 reserved[3U] ;
};
#line 2106  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_sliced_vbi_data {
   __u32 id ;
   __u32 field ;
   __u32 line ;
   __u32 reserved ;
   __u8 data[48U] ;
};
#line 2350  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_event_subscription {
   __u32 type ;
   __u32 id ;
   __u32 flags ;
   __u32 reserved[5U] ;
};
#line 2375  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
union __anonunion_8992 {
   __u32 addr ;
   char name[32U] ;
};
#line 2375  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_dbg_match {
   __u32 type ;
   union __anonunion_8992 __anonCompField_v4l2_dbg_match_87 ;
} __attribute__((__packed__));
#line 2383  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_dbg_register {
   struct v4l2_dbg_match match ;
   __u32 size ;
   __u64 reg ;
   __u64 val ;
} __attribute__((__packed__));
#line 57  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_device;
#line 57  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_gobj {
   struct media_device *mdev ;
   u32 id ;
   struct list_head list ;
};
#line 72  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_entity_enum {
   unsigned long *bmap ;
   int idx_max ;
};
#line 88 
struct media_entity;
#line 88  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct __anonstruct_stack_8996 {
   struct media_entity *entity ;
   struct list_head *link ;
};
#line 88  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_graph {
   struct __anonstruct_stack_8996 stack[16U] ;
   struct media_entity_enum ent_enum ;
   int top ;
};
#line 104  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_pipeline {
   int streaming_count ;
   struct media_graph graph ;
};
#line 132 
struct media_pad;
#line 132 
struct media_interface;
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
union __anonunion_8997 {
   struct media_gobj *gobj0 ;
   struct media_pad *source ;
   struct media_interface *intf ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
union __anonunion_8998 {
   struct media_gobj *gobj1 ;
   struct media_pad *sink ;
   struct media_entity *entity ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_link {
   struct media_gobj graph_obj ;
   struct list_head list ;
   union __anonunion_8997 __anonCompField_media_link_90 ;
   union __anonunion_8998 __anonCompField_media_link_91 ;
   struct media_link *reverse ;
   unsigned long flags ;
   bool is_backlink ;
};
#line 149 
enum media_pad_signal_type {
    PAD_SIGNAL_DEFAULT = 0,
    PAD_SIGNAL_ANALOG = 1,
    PAD_SIGNAL_DV = 2,
    PAD_SIGNAL_AUDIO = 3
};
#line 189  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_pad {
   struct media_gobj graph_obj ;
   struct media_entity *entity ;
   u16 index ;
   enum media_pad_signal_type sig_type ;
   unsigned long flags ;
};
#line 214  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_entity_operations {
   int (*get_fwnode_pad)(struct fwnode_endpoint *) ;
   int (*link_setup)(struct media_entity *, struct media_pad *, struct media_pad *, u32 ) ;
   int (*link_validate)(struct media_link *) ;
};
#line 221 
enum media_entity_type {
    MEDIA_ENTITY_TYPE_BASE = 0,
    MEDIA_ENTITY_TYPE_VIDEO_DEVICE = 1,
    MEDIA_ENTITY_TYPE_V4L2_SUBDEV = 2
};
#line 289  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct __anonstruct_dev_9000 {
   u32 major ;
   u32 minor ;
};
#line 289  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
union __anonunion_info_8999 {
   struct __anonstruct_dev_9000 dev ;
};
#line 289  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_entity {
   struct media_gobj graph_obj ;
   char *name ;
   enum media_entity_type obj_type ;
   u32 function ;
   unsigned long flags ;
   u16 num_pads ;
   u16 num_links ;
   u16 num_backlinks ;
   int internal_idx ;
   struct media_pad *pads ;
   struct list_head links ;
   struct media_entity_operations *ops ;
   int stream_count ;
   int use_count ;
   struct media_pipeline *pipe ;
   union __anonunion_info_8999 info ;
};
#line 335  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_interface {
   struct media_gobj graph_obj ;
   struct list_head links ;
   u32 type ;
   u32 flags ;
};
#line 349  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_intf_devnode {
   struct media_interface intf ;
   u32 major ;
   u32 minor ;
};
#line 1087 
enum vfl_devnode_type {
    VFL_TYPE_GRABBER = 0,
    VFL_TYPE_VBI = 1,
    VFL_TYPE_RADIO = 2,
    VFL_TYPE_SUBDEV = 3,
    VFL_TYPE_SDR = 4,
    VFL_TYPE_TOUCH = 5,
    VFL_TYPE_MAX = 6
};
#line 1097 
enum vfl_devnode_direction {
    VFL_DIR_RX = 0,
    VFL_DIR_TX = 1,
    VFL_DIR_M2M = 2
};
#line 1104 
struct video_device;
#line 1105 
struct v4l2_device;
#line 1106 
struct v4l2_ctrl_handler;
#line 104  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-dev.h"
struct v4l2_prio_state {
   atomic_t prios[4U] ;
};
#line 193  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-dev.h"
struct v4l2_file_operations {
   struct module *owner ;
   ssize_t (*read)(struct file *, char *, size_t , loff_t *) ;
   ssize_t (*write)(struct file *, char *, size_t , loff_t *) ;
   __poll_t (*poll)(struct file *, struct poll_table_struct *) ;
   long (*unlocked_ioctl)(struct file *, unsigned int , unsigned long ) ;
   long (*compat_ioctl32)(struct file *, unsigned int , unsigned long ) ;
   unsigned long (*get_unmapped_area)(struct file *, unsigned long , unsigned long , unsigned long , unsigned long ) ;
   int (*mmap)(struct file *, struct vm_area_struct *) ;
   int (*open)(struct file *) ;
   int (*release)(struct file *) ;
};
#line 256 
struct vb2_queue;
#line 256 
struct v4l2_ioctl_ops;
#line 256  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-dev.h"
struct video_device {
   struct media_entity entity ;
   struct media_intf_devnode *intf_devnode ;
   struct media_pipeline pipe ;
   struct v4l2_file_operations *fops ;
   u32 device_caps ;
   struct device dev ;
   struct cdev *cdev ;
   struct v4l2_device *v4l2_dev ;
   struct device *dev_parent ;
   struct v4l2_ctrl_handler *ctrl_handler ;
   struct vb2_queue *queue ;
   struct v4l2_prio_state *prio ;
   char name[32U] ;
   enum vfl_devnode_type vfl_type ;
   enum vfl_devnode_direction vfl_dir ;
   int minor ;
   u16 num ;
   unsigned long flags ;
   int index ;
   spinlock_t fh_lock ;
   struct list_head fh_list ;
   int dev_debug ;
   v4l2_std_id tvnorms ;
   void (*release)(struct video_device *) ;
   struct v4l2_ioctl_ops *ioctl_ops ;
   unsigned long valid_ioctls[3U] ;
   struct mutex *lock ;
};
#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-common.h"
struct v4l2_subdev;
#line 96 
struct v4l2_subdev_ops;
#line 335  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-common.h"
struct v4l2_priv_tun_config {
   int tuner ;
   void *priv ;
};
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-devnode.h"
struct media_file_operations {
   struct module *owner ;
   ssize_t (*read)(struct file *, char *, size_t , loff_t *) ;
   ssize_t (*write)(struct file *, char *, size_t , loff_t *) ;
   __poll_t (*poll)(struct file *, struct poll_table_struct *) ;
   long (*ioctl)(struct file *, unsigned int , unsigned long ) ;
   long (*compat_ioctl)(struct file *, unsigned int , unsigned long ) ;
   int (*open)(struct file *) ;
   int (*release)(struct file *) ;
};
#line 75  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-devnode.h"
struct media_devnode {
   struct media_device *media_dev ;
   struct media_file_operations *fops ;
   struct device dev ;
   struct cdev cdev ;
   struct device *parent ;
   int minor ;
   unsigned long flags ;
   void (*release)(struct media_devnode *) ;
};
#line 65  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-device.h"
struct media_request;
#line 65  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-device.h"
struct media_device_ops {
   int (*link_notify)(struct media_link *, u32 , unsigned int ) ;
   struct media_request *(*req_alloc)(struct media_device *) ;
   void (*req_free)(struct media_request *) ;
   int (*req_validate)(struct media_request *) ;
   void (*req_queue)(struct media_request *) ;
};
#line 144  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-device.h"
struct media_device {
   struct device *dev ;
   struct media_devnode *devnode ;
   char model[32U] ;
   char driver_name[32U] ;
   char serial[40U] ;
   char bus_info[32U] ;
   u32 hw_revision ;
   u64 topology_version ;
   u32 id ;
   struct ida entity_internal_idx ;
   int entity_internal_idx_max ;
   struct list_head entities ;
   struct list_head interfaces ;
   struct list_head pads ;
   struct list_head links ;
   struct list_head entity_notify ;
   struct mutex graph_mutex ;
   struct media_graph pm_count_walk ;
   void *source_priv ;
   int (*enable_source)(struct media_entity *, struct media_pipeline *) ;
   void (*disable_source)(struct media_entity *) ;
   struct media_device_ops *ops ;
   struct mutex req_queue_mutex ;
   atomic_t request_id ;
};
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-mediabus.h"
struct v4l2_mbus_framefmt {
   __u32 width ;
   __u32 height ;
   __u32 code ;
   __u32 field ;
   __u32 colorspace ;
   __u16 ycbcr_enc ;
   __u16 quantization ;
   __u16 xfer_func ;
   __u16 reserved[11U] ;
};
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-subdev.h"
struct v4l2_subdev_format {
   __u32 which ;
   __u32 pad ;
   struct v4l2_mbus_framefmt format ;
   __u32 reserved[8U] ;
};
#line 75  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-subdev.h"
struct v4l2_subdev_mbus_code_enum {
   __u32 pad ;
   __u32 index ;
   __u32 code ;
   __u32 which ;
   __u32 reserved[8U] ;
};
#line 90  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-subdev.h"
struct v4l2_subdev_frame_size_enum {
   __u32 index ;
   __u32 pad ;
   __u32 code ;
   __u32 min_width ;
   __u32 max_width ;
   __u32 min_height ;
   __u32 max_height ;
   __u32 which ;
   __u32 reserved[8U] ;
};
#line 107  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-subdev.h"
struct v4l2_subdev_frame_interval {
   __u32 pad ;
   struct v4l2_fract interval ;
   __u32 reserved[9U] ;
};
#line 123  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-subdev.h"
struct v4l2_subdev_frame_interval_enum {
   __u32 index ;
   __u32 pad ;
   __u32 code ;
   __u32 width ;
   __u32 height ;
   struct v4l2_fract interval ;
   __u32 which ;
   __u32 reserved[8U] ;
};
#line 149  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-subdev.h"
struct v4l2_subdev_selection {
   __u32 which ;
   __u32 pad ;
   __u32 target ;
   __u32 flags ;
   struct v4l2_rect r ;
   __u32 reserved[8U] ;
};
#line 157 
struct v4l2_async_notifier;
#line 158 
enum v4l2_async_match_type {
    V4L2_ASYNC_MATCH_CUSTOM = 0,
    V4L2_ASYNC_MATCH_DEVNAME = 1,
    V4L2_ASYNC_MATCH_I2C = 2,
    V4L2_ASYNC_MATCH_FWNODE = 3
};
#line 79  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-async.h"
struct __anonstruct_i2c_9014 {
   int adapter_id ;
   unsigned short address ;
};
#line 79  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-async.h"
struct __anonstruct_custom_9015 {
   bool (*match)(struct device *, struct v4l2_async_subdev *) ;
   void *priv ;
};
#line 79  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-async.h"
union __anonunion_match_9013 {
   struct fwnode_handle *fwnode ;
   char *device_name ;
   struct __anonstruct_i2c_9014 i2c ;
   struct __anonstruct_custom_9015 custom ;
};
#line 79  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-async.h"
struct v4l2_async_subdev {
   enum v4l2_async_match_type match_type ;
   union __anonunion_match_9013 match ;
   struct list_head list ;
   struct list_head asd_list ;
};
#line 107  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-async.h"
struct v4l2_async_notifier_operations {
   int (*bound)(struct v4l2_async_notifier *, struct v4l2_subdev *, struct v4l2_async_subdev *) ;
   int (*complete)(struct v4l2_async_notifier *) ;
   void (*unbind)(struct v4l2_async_notifier *, struct v4l2_subdev *, struct v4l2_async_subdev *) ;
};
#line 129  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-async.h"
struct v4l2_async_notifier {
   struct v4l2_async_notifier_operations *ops ;
   struct v4l2_device *v4l2_dev ;
   struct v4l2_subdev *sd ;
   struct v4l2_async_notifier *parent ;
   struct list_head asd_list ;
   struct list_head waiting ;
   struct list_head done ;
   struct list_head list ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-fh.h"
struct v4l2_m2m_ctx;
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-fh.h"
struct v4l2_fh {
   struct list_head list ;
   struct video_device *vdev ;
   struct v4l2_ctrl_handler *ctrl_handler ;
   enum v4l2_priority prio ;
   wait_queue_head_t wait ;
   struct mutex subscribe_lock ;
   struct list_head subscribed ;
   struct list_head available ;
   unsigned int navailable ;
   u32 sequence ;
   struct v4l2_m2m_ctx *m2m_ctx ;
};
#line 162 
enum v4l2_mbus_type {
    V4L2_MBUS_UNKNOWN = 0,
    V4L2_MBUS_PARALLEL = 1,
    V4L2_MBUS_BT656 = 2,
    V4L2_MBUS_CSI1 = 3,
    V4L2_MBUS_CCP2 = 4,
    V4L2_MBUS_CSI2_DPHY = 5,
    V4L2_MBUS_CSI2_CPHY = 6
};
#line 97  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-mediabus.h"
struct v4l2_mbus_config {
   enum v4l2_mbus_type type ;
   unsigned int flags ;
};
#line 184 
struct v4l2_subdev_fh;
#line 185 
struct tuner_setup;
#line 186 
struct v4l2_mbus_frame_desc;
#line 52  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_decode_vbi_line {
   u32 is_second_field ;
   u8 *p ;
   u32 line ;
   u32 type ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_io_pin_config {
   u32 flags ;
   u8 pin ;
   u8 function ;
   u8 value ;
   u8 strength ;
};
#line 188  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_core_ops {
   int (*log_status)(struct v4l2_subdev *) ;
   int (*s_io_pin_config)(struct v4l2_subdev *, size_t , struct v4l2_subdev_io_pin_config *) ;
   int (*init)(struct v4l2_subdev *, u32 ) ;
   int (*load_fw)(struct v4l2_subdev *) ;
   int (*reset)(struct v4l2_subdev *, u32 ) ;
   int (*s_gpio)(struct v4l2_subdev *, u32 ) ;
   long (*ioctl)(struct v4l2_subdev *, unsigned int , void *) ;
   long (*compat_ioctl32)(struct v4l2_subdev *, unsigned int , unsigned long ) ;
   int (*g_register)(struct v4l2_subdev *, struct v4l2_dbg_register *) ;
   int (*s_register)(struct v4l2_subdev *, struct v4l2_dbg_register *) ;
   int (*s_power)(struct v4l2_subdev *, int ) ;
   int (*interrupt_service_routine)(struct v4l2_subdev *, u32 , bool *) ;
   int (*subscribe_event)(struct v4l2_subdev *, struct v4l2_fh *, struct v4l2_event_subscription *) ;
   int (*unsubscribe_event)(struct v4l2_subdev *, struct v4l2_fh *, struct v4l2_event_subscription *) ;
};
#line 264  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_tuner_ops {
   int (*standby)(struct v4l2_subdev *) ;
   int (*s_radio)(struct v4l2_subdev *) ;
   int (*s_frequency)(struct v4l2_subdev *, struct v4l2_frequency *) ;
   int (*g_frequency)(struct v4l2_subdev *, struct v4l2_frequency *) ;
   int (*enum_freq_bands)(struct v4l2_subdev *, struct v4l2_frequency_band *) ;
   int (*g_tuner)(struct v4l2_subdev *, struct v4l2_tuner *) ;
   int (*s_tuner)(struct v4l2_subdev *, struct v4l2_tuner *) ;
   int (*g_modulator)(struct v4l2_subdev *, struct v4l2_modulator *) ;
   int (*s_modulator)(struct v4l2_subdev *, struct v4l2_modulator *) ;
   int (*s_type_addr)(struct v4l2_subdev *, struct tuner_setup *) ;
   int (*s_config)(struct v4l2_subdev *, struct v4l2_priv_tun_config *) ;
};
#line 304  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_audio_ops {
   int (*s_clock_freq)(struct v4l2_subdev *, u32 ) ;
   int (*s_i2s_clock_freq)(struct v4l2_subdev *, u32 ) ;
   int (*s_routing)(struct v4l2_subdev *, u32 , u32 , u32 ) ;
   int (*s_stream)(struct v4l2_subdev *, int ) ;
};
#line 310 
enum v4l2_mbus_frame_desc_flags {
    V4L2_MBUS_FRAME_DESC_FL_LEN_MAX = 1,
    V4L2_MBUS_FRAME_DESC_FL_BLOB = 2
};
#line 335  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_mbus_frame_desc_entry {
   enum v4l2_mbus_frame_desc_flags flags ;
   u32 pixelcode ;
   u32 length ;
};
#line 348  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_mbus_frame_desc {
   struct v4l2_mbus_frame_desc_entry entry[4U] ;
   unsigned short num_entries ;
};
#line 415  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_video_ops {
   int (*s_routing)(struct v4l2_subdev *, u32 , u32 , u32 ) ;
   int (*s_crystal_freq)(struct v4l2_subdev *, u32 , u32 ) ;
   int (*g_std)(struct v4l2_subdev *, v4l2_std_id *) ;
   int (*s_std)(struct v4l2_subdev *, v4l2_std_id ) ;
   int (*s_std_output)(struct v4l2_subdev *, v4l2_std_id ) ;
   int (*g_std_output)(struct v4l2_subdev *, v4l2_std_id *) ;
   int (*querystd)(struct v4l2_subdev *, v4l2_std_id *) ;
   int (*g_tvnorms)(struct v4l2_subdev *, v4l2_std_id *) ;
   int (*g_tvnorms_output)(struct v4l2_subdev *, v4l2_std_id *) ;
   int (*g_input_status)(struct v4l2_subdev *, u32 *) ;
   int (*s_stream)(struct v4l2_subdev *, int ) ;
   int (*g_pixelaspect)(struct v4l2_subdev *, struct v4l2_fract *) ;
   int (*g_frame_interval)(struct v4l2_subdev *, struct v4l2_subdev_frame_interval *) ;
   int (*s_frame_interval)(struct v4l2_subdev *, struct v4l2_subdev_frame_interval *) ;
   int (*s_dv_timings)(struct v4l2_subdev *, struct v4l2_dv_timings *) ;
   int (*g_dv_timings)(struct v4l2_subdev *, struct v4l2_dv_timings *) ;
   int (*query_dv_timings)(struct v4l2_subdev *, struct v4l2_dv_timings *) ;
   int (*g_mbus_config)(struct v4l2_subdev *, struct v4l2_mbus_config *) ;
   int (*s_mbus_config)(struct v4l2_subdev *, struct v4l2_mbus_config *) ;
   int (*s_rx_buffer)(struct v4l2_subdev *, void *, unsigned int *) ;
};
#line 481  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_vbi_ops {
   int (*decode_vbi_line)(struct v4l2_subdev *, struct v4l2_decode_vbi_line *) ;
   int (*s_vbi_data)(struct v4l2_subdev *, struct v4l2_sliced_vbi_data *) ;
   int (*g_vbi_data)(struct v4l2_subdev *, struct v4l2_sliced_vbi_data *) ;
   int (*g_sliced_vbi_cap)(struct v4l2_subdev *, struct v4l2_sliced_vbi_cap *) ;
   int (*s_raw_fmt)(struct v4l2_subdev *, struct v4l2_vbi_format *) ;
   int (*g_sliced_fmt)(struct v4l2_subdev *, struct v4l2_sliced_vbi_format *) ;
   int (*s_sliced_fmt)(struct v4l2_subdev *, struct v4l2_sliced_vbi_format *) ;
};
#line 501  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_sensor_ops {
   int (*g_skip_top_lines)(struct v4l2_subdev *, u32 *) ;
   int (*g_skip_frames)(struct v4l2_subdev *, u32 *) ;
};
#line 505 
enum v4l2_subdev_ir_mode {
    V4L2_SUBDEV_IR_MODE_PULSE_WIDTH = 0
};
#line 540  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_ir_parameters {
   unsigned int bytes_per_data_element ;
   enum v4l2_subdev_ir_mode mode ;
   bool enable ;
   bool interrupt_enable ;
   bool shutdown ;
   bool modulation ;
   u32 max_pulse_width ;
   unsigned int carrier_freq ;
   unsigned int duty_cycle ;
   bool invert_level ;
   bool invert_carrier_sense ;
   u32 noise_filter_min_width ;
   unsigned int carrier_range_lower ;
   unsigned int carrier_range_upper ;
   u32 resolution ;
};
#line 599  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_ir_ops {
   int (*rx_read)(struct v4l2_subdev *, u8 *, size_t , ssize_t *) ;
   int (*rx_g_parameters)(struct v4l2_subdev *, struct v4l2_subdev_ir_parameters *) ;
   int (*rx_s_parameters)(struct v4l2_subdev *, struct v4l2_subdev_ir_parameters *) ;
   int (*tx_write)(struct v4l2_subdev *, u8 *, size_t , ssize_t *) ;
   int (*tx_g_parameters)(struct v4l2_subdev *, struct v4l2_subdev_ir_parameters *) ;
   int (*tx_s_parameters)(struct v4l2_subdev *, struct v4l2_subdev_ir_parameters *) ;
};
#line 630  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_pad_config {
   struct v4l2_mbus_framefmt try_fmt ;
   struct v4l2_rect try_crop ;
   struct v4l2_rect try_compose ;
};
#line 674  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_pad_ops {
   int (*init_cfg)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *) ;
   int (*enum_mbus_code)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *, struct v4l2_subdev_mbus_code_enum *) ;
   int (*enum_frame_size)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *, struct v4l2_subdev_frame_size_enum *) ;
   int (*enum_frame_interval)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *, struct v4l2_subdev_frame_interval_enum *) ;
   int (*get_fmt)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *, struct v4l2_subdev_format *) ;
   int (*set_fmt)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *, struct v4l2_subdev_format *) ;
   int (*get_selection)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *, struct v4l2_subdev_selection *) ;
   int (*set_selection)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *, struct v4l2_subdev_selection *) ;
   int (*get_edid)(struct v4l2_subdev *, struct v4l2_edid *) ;
   int (*set_edid)(struct v4l2_subdev *, struct v4l2_edid *) ;
   int (*dv_timings_cap)(struct v4l2_subdev *, struct v4l2_dv_timings_cap *) ;
   int (*enum_dv_timings)(struct v4l2_subdev *, struct v4l2_enum_dv_timings *) ;
   int (*link_validate)(struct v4l2_subdev *, struct media_link *, struct v4l2_subdev_format *, struct v4l2_subdev_format *) ;
   int (*get_frame_desc)(struct v4l2_subdev *, unsigned int , struct v4l2_mbus_frame_desc *) ;
   int (*set_frame_desc)(struct v4l2_subdev *, unsigned int , struct v4l2_mbus_frame_desc *) ;
};
#line 727  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_ops {
   struct v4l2_subdev_core_ops *core ;
   struct v4l2_subdev_tuner_ops *tuner ;
   struct v4l2_subdev_audio_ops *audio ;
   struct v4l2_subdev_video_ops *video ;
   struct v4l2_subdev_vbi_ops *vbi ;
   struct v4l2_subdev_ir_ops *ir ;
   struct v4l2_subdev_sensor_ops *sensor ;
   struct v4l2_subdev_pad_ops *pad ;
};
#line 765  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_internal_ops {
   int (*registered)(struct v4l2_subdev *) ;
   void (*unregistered)(struct v4l2_subdev *) ;
   int (*open)(struct v4l2_subdev *, struct v4l2_subdev_fh *) ;
   int (*close)(struct v4l2_subdev *, struct v4l2_subdev_fh *) ;
   void (*release)(struct v4l2_subdev *) ;
};
#line 772 
struct regulator_bulk_data;
#line 797  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_platform_data {
   struct regulator_bulk_data *regulators ;
   int num_regulators ;
   void *host_priv ;
};
#line 848  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev {
   struct media_entity entity ;
   struct list_head list ;
   struct module *owner ;
   bool owner_v4l2_dev ;
   u32 flags ;
   struct v4l2_device *v4l2_dev ;
   struct v4l2_subdev_ops *ops ;
   struct v4l2_subdev_internal_ops *internal_ops ;
   struct v4l2_ctrl_handler *ctrl_handler ;
   char name[32U] ;
   u32 grp_id ;
   void *dev_priv ;
   void *host_priv ;
   struct video_device *devnode ;
   struct device *dev ;
   struct fwnode_handle *fwnode ;
   struct list_head async_list ;
   struct v4l2_async_subdev *asd ;
   struct v4l2_async_notifier *notifier ;
   struct v4l2_async_notifier *subdev_notifier ;
   struct v4l2_subdev_platform_data *pdata ;
};
#line 906  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_fh {
   struct v4l2_fh vfh ;
   struct module *owner ;
   struct v4l2_subdev_pad_config *pad ;
};
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-device.h"
struct v4l2_device {
   struct device *dev ;
   struct media_device *mdev ;
   struct list_head subdevs ;
   spinlock_t lock ;
   char name[36U] ;
   void (*notify)(struct v4l2_subdev *, unsigned int , void *) ;
   struct v4l2_ctrl_handler *ctrl_handler ;
   struct v4l2_prio_state prio ;
   struct kref ref ;
   void (*release)(struct v4l2_device *) ;
};
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ptp_clock_kernel.h"
struct ptp_system_timestamp {
   struct timespec64 pre_ts ;
   struct timespec64 post_ts ;
};
#line 277 
struct dma_chan;
#line 279 
struct spi_controller;
#line 280 
struct spi_transfer;
#line 281 
struct spi_controller_mem_ops;
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spi/spi.h"
struct spi_statistics {
   spinlock_t lock ;
   unsigned long messages ;
   unsigned long transfers ;
   unsigned long errors ;
   unsigned long timedout ;
   unsigned long spi_sync ;
   unsigned long spi_sync_immediate ;
   unsigned long spi_async ;
   unsigned long long bytes ;
   unsigned long long bytes_rx ;
   unsigned long long bytes_tx ;
   unsigned long transfer_bytes_histo[17U] ;
   unsigned long transfers_split_maxsize ;
};
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spi/spi.h"
struct spi_delay {
   u16 value ;
   u8 unit ;
};
#line 157  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spi/spi.h"
struct spi_device {
   struct device dev ;
   struct spi_controller *controller ;
   struct spi_controller *master ;
   u32 max_speed_hz ;
   u8 chip_select ;
   u8 bits_per_word ;
   bool rt ;
   u32 mode ;
   int irq ;
   void *controller_state ;
   void *controller_data ;
   char modalias[32U] ;
   char *driver_override ;
   int cs_gpio ;
   struct gpio_desc *cs_gpiod ;
   struct spi_delay word_delay ;
   struct spi_statistics statistics ;
};
#line 247 
struct spi_message;
#line 452  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spi/spi.h"
struct spi_controller {
   struct device dev ;
   struct list_head list ;
   s16 bus_num ;
   u16 num_chipselect ;
   u16 dma_alignment ;
   u32 mode_bits ;
   u32 bits_per_word_mask ;
   u32 min_speed_hz ;
   u32 max_speed_hz ;
   u16 flags ;
   bool slave ;
   size_t (*max_transfer_size)(struct spi_device *) ;
   size_t (*max_message_size)(struct spi_device *) ;
   struct mutex io_mutex ;
   spinlock_t bus_lock_spinlock ;
   struct mutex bus_lock_mutex ;
   bool bus_lock_flag ;
   int (*setup)(struct spi_device *) ;
   int (*set_cs_timing)(struct spi_device *, struct spi_delay *, struct spi_delay *, struct spi_delay *) ;
   int (*transfer)(struct spi_device *, struct spi_message *) ;
   void (*cleanup)(struct spi_device *) ;
   bool (*can_dma)(struct spi_controller *, struct spi_device *, struct spi_transfer *) ;
   bool queued ;
   struct kthread_worker kworker ;
   struct task_struct *kworker_task ;
   struct kthread_work pump_messages ;
   spinlock_t queue_lock ;
   struct list_head queue ;
   struct spi_message *cur_msg ;
   bool idling ;
   bool busy ;
   bool running ;
   bool rt ;
   bool auto_runtime_pm ;
   bool cur_msg_prepared ;
   bool cur_msg_mapped ;
   struct completion xfer_completion ;
   size_t max_dma_len ;
   int (*prepare_transfer_hardware)(struct spi_controller *) ;
   int (*transfer_one_message)(struct spi_controller *, struct spi_message *) ;
   int (*unprepare_transfer_hardware)(struct spi_controller *) ;
   int (*prepare_message)(struct spi_controller *, struct spi_message *) ;
   int (*unprepare_message)(struct spi_controller *, struct spi_message *) ;
   int (*slave_abort)(struct spi_controller *) ;
   void (*set_cs)(struct spi_device *, bool ) ;
   int (*transfer_one)(struct spi_controller *, struct spi_device *, struct spi_transfer *) ;
   void (*handle_err)(struct spi_controller *, struct spi_message *) ;
   struct spi_controller_mem_ops *mem_ops ;
   struct spi_delay cs_setup ;
   struct spi_delay cs_hold ;
   struct spi_delay cs_inactive ;
   int *cs_gpios ;
   struct gpio_desc **cs_gpiods ;
   bool use_gpio_descriptors ;
   struct spi_statistics statistics ;
   struct dma_chan *dma_tx ;
   struct dma_chan *dma_rx ;
   void *dummy_rx ;
   void *dummy_tx ;
   int (*fw_translate_cs)(struct spi_controller *, unsigned int ) ;
   bool ptp_sts_supported ;
   unsigned long irq_flags ;
};
#line 890  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spi/spi.h"
struct spi_transfer {
   void *tx_buf ;
   void *rx_buf ;
   unsigned int len ;
   dma_addr_t tx_dma ;
   dma_addr_t rx_dma ;
   struct sg_table tx_sg ;
   struct sg_table rx_sg ;
   unsigned int cs_change : 1 ;
   unsigned int tx_nbits : 3 ;
   unsigned int rx_nbits : 3 ;
   u8 bits_per_word ;
   u16 delay_usecs ;
   struct spi_delay delay ;
   struct spi_delay cs_change_delay ;
   struct spi_delay word_delay ;
   u32 speed_hz ;
   u32 effective_speed_hz ;
   unsigned int ptp_sts_word_pre ;
   unsigned int ptp_sts_word_post ;
   struct ptp_system_timestamp *ptp_sts ;
   bool timestamped_pre ;
   bool timestamped_post ;
   struct list_head transfer_list ;
};
#line 961  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spi/spi.h"
struct spi_message {
   struct list_head transfers ;
   struct spi_device *spi ;
   unsigned int is_dma_mapped : 1 ;
   void (*complete)(void *) ;
   void *context ;
   unsigned int frame_length ;
   unsigned int actual_length ;
   int status ;
   struct list_head queue ;
   void *state ;
   struct list_head resources ;
};
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 157  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_fix_screeninfo {
   char id[16U] ;
   unsigned long smem_start ;
   __u32 smem_len ;
   __u32 type ;
   __u32 type_aux ;
   __u32 visual ;
   __u16 xpanstep ;
   __u16 ypanstep ;
   __u16 ywrapstep ;
   __u32 line_length ;
   unsigned long mmio_start ;
   __u32 mmio_len ;
   __u32 accel ;
   __u16 capabilities ;
   __u16 reserved[2U] ;
};
#line 188  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_bitfield {
   __u32 offset ;
   __u32 length ;
   __u32 msb_right ;
};
#line 241  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_var_screeninfo {
   __u32 xres ;
   __u32 yres ;
   __u32 xres_virtual ;
   __u32 yres_virtual ;
   __u32 xoffset ;
   __u32 yoffset ;
   __u32 bits_per_pixel ;
   __u32 grayscale ;
   struct fb_bitfield red ;
   struct fb_bitfield green ;
   struct fb_bitfield blue ;
   struct fb_bitfield transp ;
   __u32 nonstd ;
   __u32 activate ;
   __u32 height ;
   __u32 width ;
   __u32 accel_flags ;
   __u32 pixclock ;
   __u32 left_margin ;
   __u32 right_margin ;
   __u32 upper_margin ;
   __u32 lower_margin ;
   __u32 hsync_len ;
   __u32 vsync_len ;
   __u32 sync ;
   __u32 vmode ;
   __u32 rotate ;
   __u32 colorspace ;
   __u32 reserved[4U] ;
};
#line 281  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_cmap {
   __u32 start ;
   __u32 len ;
   __u16 *red ;
   __u16 *green ;
   __u16 *blue ;
   __u16 *transp ;
};
#line 341  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_copyarea {
   __u32 dx ;
   __u32 dy ;
   __u32 width ;
   __u32 height ;
   __u32 sx ;
   __u32 sy ;
};
#line 350  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_fillrect {
   __u32 dx ;
   __u32 dy ;
   __u32 width ;
   __u32 height ;
   __u32 color ;
   __u32 rop ;
};
#line 359  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_image {
   __u32 dx ;
   __u32 dy ;
   __u32 width ;
   __u32 height ;
   __u32 fg_color ;
   __u32 bg_color ;
   __u8 depth ;
   char *data ;
   struct fb_cmap cmap ;
};
#line 383  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fbcurpos {
   __u16 x ;
   __u16 y ;
};
#line 387  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_cursor {
   __u16 set ;
   __u16 enable ;
   __u16 rop ;
   char *mask ;
   struct fbcurpos hot ;
   struct fb_image image ;
};
#line 400 
enum backlight_type {
    BACKLIGHT_RAW = 1,
    BACKLIGHT_PLATFORM = 2,
    BACKLIGHT_FIRMWARE = 3,
    BACKLIGHT_TYPE_MAX = 4
};
#line 412 
enum backlight_scale {
    BACKLIGHT_SCALE_UNKNOWN = 0,
    BACKLIGHT_SCALE_LINEAR = 1,
    BACKLIGHT_SCALE_NON_LINEAR = 2
};
#line 418 
struct backlight_device;
#line 419 
struct fb_info;
#line 58  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backlight.h"
struct backlight_ops {
   unsigned int options ;
   int (*update_status)(struct backlight_device *) ;
   int (*get_brightness)(struct backlight_device *) ;
   int (*check_fb)(struct backlight_device *, struct fb_info *) ;
};
#line 74  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backlight.h"
struct backlight_properties {
   int brightness ;
   int max_brightness ;
   int power ;
   int fb_blank ;
   enum backlight_type type ;
   unsigned int state ;
   enum backlight_scale scale ;
};
#line 97  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backlight.h"
struct backlight_device {
   struct backlight_properties props ;
   struct mutex update_lock ;
   struct mutex ops_lock ;
   struct backlight_ops *ops ;
   struct notifier_block fb_notif ;
   struct list_head entry ;
   struct device dev ;
   bool fb_bl_on[32U] ;
   int use_count ;
};
#line 52  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_chroma {
   __u32 redx ;
   __u32 greenx ;
   __u32 bluex ;
   __u32 whitex ;
   __u32 redy ;
   __u32 greeny ;
   __u32 bluey ;
   __u32 whitey ;
};
#line 63 
struct fb_videomode;
#line 63  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_monspecs {
   struct fb_chroma chroma ;
   struct fb_videomode *modedb ;
   __u8 manufacturer[4U] ;
   __u8 monitor[14U] ;
   __u8 serial_no[14U] ;
   __u8 ascii[14U] ;
   __u32 modedb_len ;
   __u32 model ;
   __u32 serial ;
   __u32 year ;
   __u32 week ;
   __u32 hfmin ;
   __u32 hfmax ;
   __u32 dclkmin ;
   __u32 dclkmax ;
   __u16 input ;
   __u16 dpms ;
   __u16 signal ;
   __u16 vfmin ;
   __u16 vfmax ;
   __u16 gamma ;
   __u16 gtf : 1 ;
   __u16 misc ;
   __u8 version ;
   __u8 revision ;
   __u8 max_x ;
   __u8 max_y ;
};
#line 144  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_blit_caps {
   u32 x ;
   u32 y ;
   u32 len ;
   u32 flags ;
};
#line 185  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_pixmap {
   u8 *addr ;
   u32 size ;
   u32 offset ;
   u32 buf_align ;
   u32 scan_align ;
   u32 access_align ;
   u32 flags ;
   u32 blit_x ;
   u32 blit_y ;
   void (*writeio)(struct fb_info *, void *, void *, unsigned int ) ;
   void (*readio)(struct fb_info *, void *, void *, unsigned int ) ;
};
#line 203  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_deferred_io {
   unsigned long delay ;
   struct mutex lock ;
   struct list_head pagelist ;
   void (*first_io)(struct fb_info *) ;
   void (*deferred_io)(struct fb_info *, struct list_head *) ;
};
#line 228  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_ops {
   struct module *owner ;
   int (*fb_open)(struct fb_info *, int ) ;
   int (*fb_release)(struct fb_info *, int ) ;
   ssize_t (*fb_read)(struct fb_info *, char *, size_t , loff_t *) ;
   ssize_t (*fb_write)(struct fb_info *, char *, size_t , loff_t *) ;
   int (*fb_check_var)(struct fb_var_screeninfo *, struct fb_info *) ;
   int (*fb_set_par)(struct fb_info *) ;
   int (*fb_setcolreg)(unsigned int , unsigned int , unsigned int , unsigned int , unsigned int , struct fb_info *) ;
   int (*fb_setcmap)(struct fb_cmap *, struct fb_info *) ;
   int (*fb_blank)(int , struct fb_info *) ;
   int (*fb_pan_display)(struct fb_var_screeninfo *, struct fb_info *) ;
   void (*fb_fillrect)(struct fb_info *, struct fb_fillrect *) ;
   void (*fb_copyarea)(struct fb_info *, struct fb_copyarea *) ;
   void (*fb_imageblit)(struct fb_info *, struct fb_image *) ;
   int (*fb_cursor)(struct fb_info *, struct fb_cursor *) ;
   int (*fb_sync)(struct fb_info *) ;
   int (*fb_ioctl)(struct fb_info *, unsigned int , unsigned long ) ;
   int (*fb_compat_ioctl)(struct fb_info *, unsigned int , unsigned long ) ;
   int (*fb_mmap)(struct fb_info *, struct vm_area_struct *) ;
   void (*fb_get_caps)(struct fb_info *, struct fb_blit_caps *, struct fb_var_screeninfo *) ;
   void (*fb_destroy)(struct fb_info *) ;
   int (*fb_debug_enter)(struct fb_info *) ;
   int (*fb_debug_leave)(struct fb_info *) ;
};
#line 306  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_tilemap {
   __u32 width ;
   __u32 height ;
   __u32 depth ;
   __u32 length ;
   __u8 *data ;
};
#line 315  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_tilerect {
   __u32 sx ;
   __u32 sy ;
   __u32 width ;
   __u32 height ;
   __u32 index ;
   __u32 fg ;
   __u32 bg ;
   __u32 rop ;
};
#line 326  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_tilearea {
   __u32 sx ;
   __u32 sy ;
   __u32 dx ;
   __u32 dy ;
   __u32 width ;
   __u32 height ;
};
#line 335  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_tileblit {
   __u32 sx ;
   __u32 sy ;
   __u32 width ;
   __u32 height ;
   __u32 fg ;
   __u32 bg ;
   __u32 length ;
   __u32 *indices ;
};
#line 346  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_tilecursor {
   __u32 sx ;
   __u32 sy ;
   __u32 mode ;
   __u32 shape ;
   __u32 fg ;
   __u32 bg ;
};
#line 355  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_tile_ops {
   void (*fb_settile)(struct fb_info *, struct fb_tilemap *) ;
   void (*fb_tilecopy)(struct fb_info *, struct fb_tilearea *) ;
   void (*fb_tilefill)(struct fb_info *, struct fb_tilerect *) ;
   void (*fb_tileblit)(struct fb_info *, struct fb_tileblit *) ;
   void (*fb_tilecursor)(struct fb_info *, struct fb_tilecursor *) ;
   int (*fb_get_tilemax)(struct fb_info *) ;
};
#line 499  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct aperture {
   resource_size_t base ;
   resource_size_t size ;
};
#line 497  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct apertures_struct {
   unsigned int count ;
   struct aperture ranges[0U] ;
};
#line 439  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
union __anonunion_9916 {
   char *screen_base ;
   char *screen_buffer ;
};
#line 439  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_info {
   atomic_t count ;
   int node ;
   int flags ;
   int fbcon_rotate_hint ;
   struct mutex lock ;
   struct mutex mm_lock ;
   struct fb_var_screeninfo var ;
   struct fb_fix_screeninfo fix ;
   struct fb_monspecs monspecs ;
   struct work_struct queue ;
   struct fb_pixmap pixmap ;
   struct fb_pixmap sprite ;
   struct fb_cmap cmap ;
   struct list_head modelist ;
   struct fb_videomode *mode ;
   struct backlight_device *bl_dev ;
   struct mutex bl_curve_mutex ;
   u8 bl_curve[128U] ;
   struct delayed_work deferred_work ;
   struct fb_deferred_io *fbdefio ;
   struct fb_ops *fbops ;
   struct device *device ;
   struct device *dev ;
   int class_flag ;
   struct fb_tile_ops *tileops ;
   union __anonunion_9916 __anonCompField_fb_info_73 ;
   unsigned long screen_size ;
   void *pseudo_palette ;
   u32 state ;
   void *fbcon_par ;
   void *par ;
   struct apertures_struct *apertures ;
   bool skip_vt_switch ;
};
#line 767  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_videomode {
   char *name ;
   u32 refresh ;
   u32 xres ;
   u32 yres ;
   u32 pixclock ;
   u32 left_margin ;
   u32 right_margin ;
   u32 upper_margin ;
   u32 lower_margin ;
   u32 hsync_len ;
   u32 vsync_len ;
   u32 sync ;
   u32 vmode ;
   u32 flag ;
};
#line 63  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
struct ldv_kmem_cache {
   char *name ;
   unsigned int size ;
};
#line 88  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
typedef unsigned long pthread_t;
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/thread.h"
union pthread_attr_t {
   char __size[56U] ;
   long __align ;
};
#line 30  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/thread.h"
typedef union pthread_attr_t pthread_attr_t;
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 19  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/wcn36xx/wcn36xx.ko/concurrency safety/emg/0/environment_model.c"
struct emg_struct_free_irq_5 {
   int arg0 ;
   int signal_pending ;
};
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/wcn36xx/wcn36xx.ko/concurrency safety/emg/0/environment_model.c"
struct emg_struct_interrupt_scenario_wcn36xx_irq_rx_ready_15 {
   int arg0 ;
   enum irqreturn (*arg1)(int , void *) ;
   enum irqreturn (*arg2)(int , void *) ;
   void *arg3 ;
   int signal_pending ;
};
#line 32  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/wcn36xx/wcn36xx.ko/concurrency safety/emg/0/environment_model.c"
struct emg_struct_character_driver_scenario_fops_wcn36xx_bmps_12 {
   struct file_operations *arg0 ;
   int signal_pending ;
};
#line 37  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/wcn36xx/wcn36xx.ko/concurrency safety/emg/0/environment_model.c"
struct emg_struct_ieee80211_scenario_wcn36xx_ops_14 {
   struct ieee80211_hw *arg0 ;
   int signal_pending ;
};
#line 42  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/wcn36xx/wcn36xx.ko/concurrency safety/emg/0/environment_model.c"
struct emg_struct_platform_instance_wcn36xx_driver_17 {
   struct platform_driver *arg0 ;
   int signal_pending ;
};
#line 22  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/common/inline_asm.h"
#line 22 
void ldv_inline_asm(void);
#line 171  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/printk.h"
#line 171 
int printk(char * , ...);
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/irqflags.h"
#line 20 
unsigned long native_save_fl(void);
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/irqflags.h"
unsigned long native_save_fl(void)
{
  #line 22 
  unsigned long flags;
  #line 23 
  ldv_inline_asm();
  #line 35 
  return flags;
}

#line 38 
#line 39 
void native_restore_fl(unsigned long flags);
#line 39  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/irqflags.h"
void native_restore_fl(unsigned long flags)
{
  #line 41 
  ldv_inline_asm();
  #line 42 
  return;
}

#line 116  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/wcn36xx/smd.h"
#line 116 
int wcn36xx_smd_enter_bmps(struct wcn36xx *wcn, struct ieee80211_vif *vif);
#line 117 
#line 117 
int wcn36xx_smd_exit_bmps(struct wcn36xx *wcn, struct ieee80211_vif *vif);
#line 119 
#line 119 
int wcn36xx_smd_keep_alive_req(struct wcn36xx *wcn, struct ieee80211_vif *vif, int packet_type);
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/wcn36xx/pmc.h"
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/wcn36xx/pmc.c"
int wcn36xx_pmc_enter_bmps_state(struct wcn36xx *wcn, struct ieee80211_vif *vif);
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/wcn36xx/pmc.h"
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/wcn36xx/pmc.c"
int wcn36xx_pmc_exit_bmps_state(struct wcn36xx *wcn, struct ieee80211_vif *vif);
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/wcn36xx/pmc.h"
#line 58  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/wcn36xx/pmc.c"
int wcn36xx_enable_keep_alive_null_packet(struct wcn36xx *wcn, struct ieee80211_vif *vif);
#line 35  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/wcn36xx/wcn36xx.h"
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/wcn36xx/main.c"
unsigned int wcn36xx_dbg_mask;
#line 279  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/wcn36xx/wcn36xx.h"
__inline static struct wcn36xx_vif *wcn36xx_vif_to_priv(struct ieee80211_vif *vif)
{
  #line 281 
  return (struct wcn36xx_vif *)(& vif->drv_priv);
}

#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/wcn36xx/pmc.c"
int wcn36xx_pmc_enter_bmps_state(struct wcn36xx *wcn, struct ieee80211_vif *vif)
{
  #line 24 
  int ret = 0;
  #line 25 
  struct wcn36xx_vif *vif_priv = wcn36xx_vif_to_priv(vif);
  #line 27 
  ret = wcn36xx_smd_enter_bmps(wcn,vif);
  #line 28 
  if (ret == 0) {
    #line 29 
    if ((wcn36xx_dbg_mask & 8192U) != 0U) 
                                          #line 29 
                                          printk((char *)"\001");
    #line 30 
    vif_priv->pw_state = WCN36XX_BMPS;
  }
  else 
       #line 37 
       printk((char *)"\001");
  #line 39 
  return ret;
}

#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/wcn36xx/pmc.c"
int wcn36xx_pmc_exit_bmps_state(struct wcn36xx *wcn, struct ieee80211_vif *vif)
{
  #line 45 
  struct wcn36xx_vif *vif_priv = wcn36xx_vif_to_priv(vif);
  #line 47 
  if (vif_priv->pw_state != (unsigned int)WCN36XX_BMPS) {
    #line 49 
    if ((wcn36xx_dbg_mask & 8192U) != 0U) 
                                          #line 49 
                                          printk((char *)"\001");
    #line 51 
    return -114;
  }
  #line 53 
  wcn36xx_smd_exit_bmps(wcn,vif);
  #line 54 
  vif_priv->pw_state = WCN36XX_FULL_POWER;
  #line 55 
  return 0;
}

#line 58  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/wcn36xx/pmc.c"
int wcn36xx_enable_keep_alive_null_packet(struct wcn36xx *wcn, struct ieee80211_vif *vif)
{
  #line 61 
  if ((wcn36xx_dbg_mask & 8192U) != 0U) 
                                        #line 61 
                                        printk((char *)"\001",(char *)"wcn36xx_enable_keep_alive_null_packet");
  #line 62 
  return wcn36xx_smd_keep_alive_req(wcn,vif,1);
}

/* compiler builtin: 
   void *__builtin_memcpy(void *, void const *, unsigned long);   */
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/export.h"
#line 16 
extern struct module __this_module;
#line 220  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/compiler.h"
__inline static void __write_once_size(void *p, void *res, int size)
{
  #line 222 
  switch (size) {
    #line 223 
    case 1: 
            #line 223 
    ;
    #line 223 
    *((__u8 *)p) = *((__u8 *)res);
    #line 223 
    break;
    #line 224 
    case 2: 
            #line 224 
    ;
    #line 224 
    *((__u16 *)p) = *((__u16 *)res);
    #line 224 
    break;
    #line 225 
    case 4: 
            #line 225 
    ;
    #line 225 
    *((__u32 *)p) = *((__u32 *)res);
    #line 225 
    break;
    #line 226 
    case 8: 
            #line 226 
    ;
    #line 226 
    *((__u64 *)p) = *((__u64 *)res);
    #line 226 
    break;
    #line 227 
    default: 
             #line 227 
    ;
    #line 228 
    ldv_inline_asm();
    #line 229 
    __builtin_memcpy(p,(void const *)res,(unsigned long)size);
    #line 230 
    ldv_inline_asm();
  }
  #line 232 
  return;
}

#line 38  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kasan-checks.h"
__inline static bool kasan_check_write(void *p, unsigned int size)
{
  #line 40 
  return (_Bool)1;
}

#line 66  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/bitops.h"
__inline static void arch___set_bit(long nr, unsigned long *addr)
{
  #line 68 
  ldv_inline_asm();
  #line 69 
  return;
}

#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bitops/instrumented-non-atomic.h"
__inline static void __set_bit(long nr, unsigned long *addr)
{
  #line 27 
  kasan_check_write((void *)(addr + (unsigned long)(nr / 64L)),8U);
  #line 28 
  arch___set_bit(nr,addr);
  #line 29 
  return;
}

#line 487  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/printk.h"
#line 487 
void print_hex_dump(char *, char *, int, int, int, void *, size_t, bool);
#line 26  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
#line 247  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/wcn36xx/wcn36xx.ko/concurrency safety/0/concurrency safety/weaver/main.i.aux"
static void INIT_LIST_HEAD(struct list_head *list);
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
#line 33 
bool __list_add_valid(struct list_head *, struct list_head *, struct list_head *);
#line 36 
#line 36 
bool __list_del_entry_valid(struct list_head *);
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static void __list_add(struct list_head *new, struct list_head *prev, struct list_head *next)
{
  #line 60 
  if (! __list_add_valid(new,prev,next)) 
                                         #line 61 
                                         return;
  #line 63 
  next->prev = new;
  #line 64 
  new->next = next;
  #line 65 
  new->prev = prev;
  {
    #line 67 
    union __anonunion___u_1037 __u = {.__val = new};
    #line 66 
    __write_once_size((void *)(& prev->next),(void *)(& __u.__c),8);
    #line 66 
    struct list_head *tmp_2 = __u.__val;
  }
  #line 68 
  return;
}

#line 77  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static void list_add(struct list_head *new, struct list_head *head)
{
  #line 79 
  __list_add(new,head,head->next);
  #line 80 
  return;
}

#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static void __list_del(struct list_head *prev, struct list_head *next)
{
  #line 97 
  next->prev = prev;
  {
    #line 107 
    union __anonunion___u_1039 __u = {.__val = next};
    #line 106 
    __write_once_size((void *)(& prev->next),(void *)(& __u.__c),8);
    #line 106 
    struct list_head *tmp = __u.__val;
  }
  #line 108 
  return;
}

#line 129  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static void __list_del_entry(struct list_head *entry)
{
  #line 131 
  if (! __list_del_entry_valid(entry)) 
                                       #line 132 
                                       return;
  #line 134 
  __list_del(entry->prev,entry->next);
  #line 135 
  return;
}

#line 137  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static void list_del(struct list_head *entry)
{
  #line 139 
  __list_del_entry(entry);
  #line 140 
  entry->next = (struct list_head *)(-2401263026318606080);
  #line 141 
  entry->prev = (struct list_head *)(-2401263026318606046);
  #line 142 
  return;
}

#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/string_64.h"
#line 14 
void *memcpy(void *, void *, size_t);
#line 18 
#line 18 
void *memset(void *, int, size_t);
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/err.h"
#line 324  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/wcn36xx/wcn36xx.ko/concurrency safety/0/concurrency safety/weaver/main.i.aux"
static long PTR_ERR(void *ptr);
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/err.h"
#line 331  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/wcn36xx/wcn36xx.ko/concurrency safety/0/concurrency safety/weaver/main.i.aux"
static bool IS_ERR(void *ptr);
#line 302  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockdep.h"
#line 302 
void lockdep_init_map(struct lockdep_map *, char *, struct lock_class_key *, int);
#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
#line 95 
void __raw_spin_lock_init(raw_spinlock_t *, char *, struct lock_class_key *);
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_api_smp.h"
#line 28 
void _raw_spin_lock_bh(raw_spinlock_t *);
#line 40 
#line 40 
void _raw_spin_unlock_bh(raw_spinlock_t *);
#line 325  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
__inline static raw_spinlock_t *spinlock_check(spinlock_t *lock)
{
  #line 327 
  return & lock->__anonCompField_spinlock_25.rlock;
}

#line 341  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static void spin_lock_bh(spinlock_t *lock)
{
  #line 343 
  _raw_spin_lock_bh(& lock->__anonCompField_spinlock_25.rlock);
  #line 344 
  return;
}

#line 345 
#line 955  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/wcn36xx/wcn36xx.ko/concurrency safety/0/concurrency safety/weaver/main.i.aux"
static void cif_spin_lock_bh_ampdu_lock_of_wcn36xx_sta(spinlock_t *lock);
#line 381  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static void spin_unlock_bh(spinlock_t *lock)
{
  #line 383 
  _raw_spin_unlock_bh(& lock->__anonCompField_spinlock_25.rlock);
  #line 384 
  return;
}

#line 385 
#line 964  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/wcn36xx/wcn36xx.ko/concurrency safety/0/concurrency safety/weaver/main.i.aux"
static void cif_spin_unlock_bh_ampdu_lock_of_wcn36xx_sta(spinlock_t *lock);
#line 26 
#line 927 
static void cif_mutex_lock_scan_lock_of_wcn36xx(struct mutex *lock);
#line 26 
#line 941 
static void cif_mutex_lock_conf_mutex_of_wcn36xx(struct mutex *lock);
#line 29 
#line 29 
void ldv_mutex_model_lock(struct mutex *, char *);
#line 31 
#line 31 
void ldv_mutex_model_unlock(struct mutex *, char *);
#line 40 
#line 40 
void ldv_spin_model_lock(char *);
#line 41 
#line 41 
void ldv_spin_model_unlock(char *);
#line 52 
#line 52 
void ldv_release_firmware(struct firmware *fw);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/err.h"
#line 23 
bool ldv_is_err(void *ptr);
#line 26 
#line 26 
long ldv_ptr_err(void *ptr);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/list.h"
#line 23 
void ldv_init_list_head(struct list_head *list);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 23 
void *ldv_kzalloc(size_t size, gfp_t flags);
#line 24 
#line 24 
void *ldv_kmalloc(size_t size, gfp_t flags);
#line 86  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mutex.h"
#line 86 
void mutex_destroy(struct mutex *);
#line 128 
#line 128 
void __mutex_init(struct mutex *, char *, struct lock_class_key *);
#line 185 
#line 934  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/wcn36xx/wcn36xx.ko/concurrency safety/0/concurrency safety/weaver/main.i.aux"
static void cif_mutex_unlock_scan_lock_of_wcn36xx(struct mutex *lock);
#line 185  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mutex.h"
#line 948  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/wcn36xx/wcn36xx.ko/concurrency safety/0/concurrency safety/weaver/main.i.aux"
static void cif_mutex_unlock_conf_mutex_of_wcn36xx(struct mutex *lock);
#line 207  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/workqueue.h"
#line 207 
void __init_work(struct work_struct *, int);
#line 454 
#line 454 
void flush_workqueue(struct workqueue_struct *);
#line 462 
#line 462 
bool cancel_work_sync(struct work_struct *);
#line 554 
#line 785  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/wcn36xx/wcn36xx.ko/concurrency safety/0/concurrency safety/weaver/main.i.aux"
static bool cif_schedule_work(struct work_struct *work);
#line 209  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/io.h"
#line 209 
void iounmap(void *);
#line 57  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/firmware.h"
#line 989  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/wcn36xx/wcn36xx.ko/concurrency safety/0/concurrency safety/weaver/main.i.aux"
static void cif_release_firmware(struct firmware *fw);
#line 1417  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
__inline static void *dev_get_drvdata(struct device *dev)
{
  #line 1419 
  return dev->driver_data;
}

#line 1422  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
__inline static void dev_set_drvdata(struct device *dev, void *data)
{
  #line 1424 
  dev->driver_data = data;
  #line 1425 
  return;
}

#line 69  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/platform_device.h"
#line 69 
struct resource *platform_get_resource_byname(struct platform_device *, unsigned int, char *);
#line 217 
#line 996  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/wcn36xx/wcn36xx.ko/concurrency safety/0/concurrency safety/weaver/main.i.aux"
static int cif___platform_driver_register(struct platform_driver *ldv_func_arg1, struct module *ldv_func_arg2);
#line 218  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/platform_device.h"
#line 1004  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/wcn36xx/wcn36xx.ko/concurrency safety/0/concurrency safety/weaver/main.i.aux"
static void cif_platform_driver_unregister(struct platform_driver *ldv_func_arg1);
#line 226  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/platform_device.h"
__inline static void *platform_get_drvdata(struct platform_device *pdev)
{
  #line 228 
  return dev_get_drvdata(& pdev->dev);
}

#line 231  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/platform_device.h"
__inline static void platform_set_drvdata(struct platform_device *pdev, void *data)
{
  #line 234 
  dev_set_drvdata(& pdev->dev,data);
  #line 235 
  return;
}

#line 122  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/of.h"
#line 122 
void of_node_put(struct device_node *);
#line 295 
#line 295 
struct device_node *of_get_child_by_name(struct device_node *, char *);
#line 337 
#line 337 
int of_property_match_string(struct device_node *, char *, char *);
#line 343 
#line 343 
int of_device_is_compatible(struct device_node *, char *);
#line 349 
#line 349 
void *of_get_property(struct device_node *, char *, int *);
#line 364 
#line 364 
struct device_node *of_parse_phandle(struct device_node *, char *, int);
#line 37  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/of_address.h"
#line 37 
void *of_iomap(struct device_node *, int);
#line 189  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/slab.h"
#line 189 
void kfree(void *);
#line 542 
#line 570  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/wcn36xx/wcn36xx.ko/concurrency safety/0/concurrency safety/weaver/main.i.aux"
static void *kmalloc(size_t size, gfp_t flags);
#line 668  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/slab.h"
#line 605  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/wcn36xx/wcn36xx.ko/concurrency safety/0/concurrency safety/weaver/main.i.aux"
static void *kzalloc(size_t size, gfp_t flags);
#line 120  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rpmsg.h"
#line 120 
void rpmsg_destroy_ept(struct rpmsg_endpoint *);
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/soc/qcom/smem_state.h"
#line 16 
struct qcom_smem_state *qcom_smem_state_get(struct device *, char *, unsigned int *);
#line 17 
#line 17 
void qcom_smem_state_put(struct qcom_smem_state *);
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/soc/qcom/wcnss_ctrl.h"
#line 9 
struct rpmsg_endpoint *qcom_wcnss_open_channel(void *, char *, int (*)(struct rpmsg_device *, void *, int , void *, u32 ), void *);
#line 460  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
#line 460 
int dma_set_mask(struct device *, u64);
#line 461 
#line 461 
int dma_set_coherent_mask(struct device *, u64);
#line 669  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static int dma_set_mask_and_coherent(struct device *dev, u64 mask)
{
  #line 671 
  int rc = dma_set_mask(dev,mask);
  #line 672 
  if (rc == 0) 
               #line 673 
               dma_set_coherent_mask(dev,mask);
  #line 674 
  return rc;
}

#line 1023  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
#line 1023 
void consume_skb(struct sk_buff *);
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/delay.h"
#line 59 
void msleep(unsigned int);
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/etherdevice.h"
__inline static bool is_zero_ether_addr(u8 *addr)
{
  #line 101 
  return (_Bool)((*((u32 *)addr) | (unsigned int)*((u16 *)(addr + 4U))) == 0U);
}

#line 4738  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
__inline static void set_wiphy_dev(struct wiphy *wiphy, struct device *dev)
{
  #line 4740 
  wiphy->dev.parent = dev;
  #line 4741 
  return;
}

#line 7322  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
__inline static void wiphy_ext_feature_set(struct wiphy *wiphy, enum nl80211_ext_feature_index ftidx)
{
  #line 7325 
  u8 *ft_byte;
  #line 7327 
  ft_byte = & wiphy->ext_features[(unsigned int)ftidx / 8U];
  #line 7328 
  *ft_byte = (unsigned char)((int)*ft_byte | (int)((unsigned char)(1UL << ((unsigned int)ftidx & 7U))));
  #line 7329 
  return;
}

#line 2533  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/mac80211.h"
__inline static void _ieee80211_hw_set(struct ieee80211_hw *hw, enum ieee80211_hw_flags flg)
{
  #line 2536 
  __set_bit((long)flg,(unsigned long *)(& hw->flags));
  #line 2537 
  return;
}

#line 2599  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/mac80211.h"
__inline static void SET_IEEE80211_DEV(struct ieee80211_hw *hw, struct device *dev)
{
  #line 2601 
  set_wiphy_dev(hw->wiphy,dev);
  #line 2602 
  return;
}

#line 2610  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/mac80211.h"
__inline static void SET_IEEE80211_PERM_ADDR(struct ieee80211_hw *hw, u8 *addr)
{
  #line 2612 
  memcpy((void *)(& (hw->wiphy)->perm_addr),(void *)addr,6UL);
  #line 2613 
  return;
}

#line 2650 
#line 2650 
void ieee80211_free_txskb(struct ieee80211_hw *, struct sk_buff *);
#line 4123 
#line 973  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/wcn36xx/wcn36xx.ko/concurrency safety/0/concurrency safety/weaver/main.i.aux"
static struct ieee80211_hw *cif_ieee80211_alloc_hw(size_t priv_data_len, struct ieee80211_ops *ops);
#line 4135  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/mac80211.h"
#line 4135 
int ieee80211_register_hw(struct ieee80211_hw *);
#line 4289 
#line 4289 
void ieee80211_unregister_hw(struct ieee80211_hw *);
#line 4301 
#line 981  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/wcn36xx/wcn36xx.ko/concurrency safety/0/concurrency safety/weaver/main.i.aux"
static void cif_ieee80211_free_hw(struct ieee80211_hw *hw);
#line 4737  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/mac80211.h"
#line 4737 
struct sk_buff *ieee80211_beacon_get_tim(struct ieee80211_hw *, struct ieee80211_vif *, u16 *, u16 *);
#line 4814 
#line 4814 
struct sk_buff *ieee80211_proberesp_get(struct ieee80211_hw *, struct ieee80211_vif *);
#line 5220 
#line 5220 
void ieee80211_scan_completed(struct ieee80211_hw *, struct cfg80211_scan_info *);
#line 5438 
#line 5438 
void ieee80211_stop_tx_ba_cb_irqsafe(struct ieee80211_vif *, u8 *, u16);
#line 5452 
#line 5452 
struct ieee80211_sta *ieee80211_find_sta(struct ieee80211_vif *, u8 *);
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/wcn36xx/smd.h"
#line 56 
int wcn36xx_smd_open(struct wcn36xx *wcn);
#line 57 
#line 57 
void wcn36xx_smd_close(struct wcn36xx *wcn);
#line 59 
#line 59 
int wcn36xx_smd_load_nv(struct wcn36xx *wcn);
#line 60 
#line 60 
int wcn36xx_smd_start(struct wcn36xx *wcn);
#line 61 
#line 61 
int wcn36xx_smd_stop(struct wcn36xx *wcn);
#line 62 
#line 62 
int wcn36xx_smd_init_scan(struct wcn36xx *wcn, enum wcn36xx_hal_sys_mode mode);
#line 63 
#line 63 
int wcn36xx_smd_start_scan(struct wcn36xx *wcn, u8 scan_channel);
#line 64 
#line 64 
int wcn36xx_smd_end_scan(struct wcn36xx *wcn, u8 scan_channel);
#line 65 
#line 65 
int wcn36xx_smd_finish_scan(struct wcn36xx *wcn, enum wcn36xx_hal_sys_mode mode);
#line 67 
#line 67 
int wcn36xx_smd_update_scan_params(struct wcn36xx *wcn, u8 *channels, size_t channel_count);
#line 68 
#line 68 
int wcn36xx_smd_start_hw_scan(struct wcn36xx *wcn, struct ieee80211_vif *vif, struct cfg80211_scan_request *req);
#line 70 
#line 70 
int wcn36xx_smd_stop_hw_scan(struct wcn36xx *wcn);
#line 71 
#line 71 
int wcn36xx_smd_add_sta_self(struct wcn36xx *wcn, struct ieee80211_vif *vif);
#line 72 
#line 72 
int wcn36xx_smd_delete_sta_self(struct wcn36xx *wcn, u8 *addr);
#line 73 
#line 73 
int wcn36xx_smd_delete_sta(struct wcn36xx *wcn, u8 sta_index);
#line 74 
#line 74 
int wcn36xx_smd_join(struct wcn36xx *wcn, u8 *bssid, u8 *vif, u8 ch);
#line 75 
#line 75 
int wcn36xx_smd_set_link_st(struct wcn36xx *wcn, u8 *bssid, u8 *sta_mac, enum wcn36xx_hal_link_state state);
#line 78 
#line 78 
int wcn36xx_smd_config_bss(struct wcn36xx *wcn, struct ieee80211_vif *vif, struct ieee80211_sta *sta, u8 *bssid, bool update);
#line 81 
#line 81 
int wcn36xx_smd_delete_bss(struct wcn36xx *wcn, struct ieee80211_vif *vif);
#line 82 
#line 82 
int wcn36xx_smd_config_sta(struct wcn36xx *wcn, struct ieee80211_vif *vif, struct ieee80211_sta *sta);
#line 84 
#line 84 
int wcn36xx_smd_send_beacon(struct wcn36xx *wcn, struct ieee80211_vif *vif, struct sk_buff *skb_beacon, u16 tim_off, u16 p2p_off);
#line 87 
#line 87 
int wcn36xx_smd_switch_channel(struct wcn36xx *wcn, struct ieee80211_vif *vif, int ch);
#line 93 
#line 93 
int wcn36xx_smd_update_proberesp_tmpl(struct wcn36xx *wcn, struct ieee80211_vif *vif, struct sk_buff *skb);
#line 96 
#line 96 
int wcn36xx_smd_set_stakey(struct wcn36xx *wcn, enum ani_ed_type enc_type, u8 keyidx, u8 keylen, u8 *key, u8 sta_index);
#line 102 
#line 102 
int wcn36xx_smd_set_bsskey(struct wcn36xx *wcn, enum ani_ed_type enc_type, u8 bssidx, u8 keyidx, u8 keylen, u8 *key);
#line 108 
#line 108 
int wcn36xx_smd_remove_stakey(struct wcn36xx *wcn, enum ani_ed_type enc_type, u8 keyidx, u8 sta_index);
#line 112 
#line 112 
int wcn36xx_smd_remove_bsskey(struct wcn36xx *wcn, enum ani_ed_type enc_type, u8 bssidx, u8 keyidx);
#line 118 
#line 118 
int wcn36xx_smd_set_power_params(struct wcn36xx *wcn, bool ignore_dtim);
#line 124 
#line 124 
int wcn36xx_smd_feature_caps_exchange(struct wcn36xx *wcn);
#line 126 
#line 126 
int get_feat_caps(u32 *bitmap, enum place_holder_in_cap_bitmap cap);
#line 129 
#line 129 
int wcn36xx_smd_add_ba_session(struct wcn36xx *wcn, struct ieee80211_sta *sta, u16 tid, u16 *ssn, u8 direction, u8 sta_index);
#line 135 
#line 135 
int wcn36xx_smd_add_ba(struct wcn36xx *wcn);
#line 136 
#line 136 
int wcn36xx_smd_del_ba(struct wcn36xx *wcn, u16 tid, u8 sta_index);
#line 137 
#line 137 
int wcn36xx_smd_trigger_ba(struct wcn36xx *wcn, u8 sta_index);
#line 139 
#line 139 
int wcn36xx_smd_update_cfg(struct wcn36xx *wcn, u32 cfg_id, u32 value);
#line 141 
#line 141 
int wcn36xx_smd_rsp_process(struct rpmsg_device *rpdev, void *buf, int len, void *priv, u32 addr);
#line 144 
#line 144 
int wcn36xx_smd_set_mc_list(struct wcn36xx *wcn, struct ieee80211_vif *vif, struct wcn36xx_hal_rcv_flt_mc_addr_list_type *fp);
#line 163  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/wcn36xx/txrx.h"
#line 163 
int wcn36xx_start_tx(struct wcn36xx *wcn, struct wcn36xx_sta *sta_priv, struct sk_buff *skb);
#line 456  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/wcn36xx/dxe.h"
#line 456 
int wcn36xx_dxe_allocate_mem_pools(struct wcn36xx *wcn);
#line 457 
#line 457 
void wcn36xx_dxe_free_mem_pools(struct wcn36xx *wcn);
#line 459 
#line 459 
int wcn36xx_dxe_alloc_ctl_blks(struct wcn36xx *wcn);
#line 460 
#line 460 
void wcn36xx_dxe_free_ctl_blks(struct wcn36xx *wcn);
#line 461 
#line 461 
int wcn36xx_dxe_init(struct wcn36xx *wcn);
#line 462 
#line 462 
void wcn36xx_dxe_deinit(struct wcn36xx *wcn);
#line 36  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/wcn36xx/debug.h"
#line 36 
void wcn36xx_debugfs_init(struct wcn36xx *wcn);
#line 37 
#line 37 
void wcn36xx_debugfs_exit(struct wcn36xx *wcn);
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/wcn36xx/main.c"
unsigned int wcn36xx_dbg_mask;
#line 259  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/wcn36xx/wcn36xx.h"
__inline static bool wcn36xx_is_fw_version(struct wcn36xx *wcn, u8 major, u8 minor, u8 version, u8 revision)
{
  #line 267 
  return (_Bool)(((((int)wcn->fw_major == (int)major && (int)wcn->fw_minor == (int)minor) && (int)wcn->fw_version == (int)version) && (int)wcn->fw_revision == (int)revision) != 0);
}

#line 270 
#line 749  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/wcn36xx/main.c"
void wcn36xx_set_default_rates(struct wcn36xx_hal_supported_rates *rates);
#line 285  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/wcn36xx/wcn36xx.h"
__inline static struct ieee80211_vif *wcn36xx_priv_to_vif(struct wcn36xx_vif *vif_priv)
{
  #line 287 
  void *__mptr;
  #line 287 
  __mptr = (void *)vif_priv;
  #line 287 
  return ((struct ieee80211_vif *)(__mptr + 18446744073709551216U));
}

#line 291  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/wcn36xx/wcn36xx.h"
__inline static struct wcn36xx_sta *wcn36xx_sta_to_priv(struct ieee80211_sta *sta)
{
  #line 293 
  return (struct wcn36xx_sta *)(& sta->drv_priv);
}

#line 35  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/wcn36xx/testmode.h"
#line 35 
int wcn36xx_tm_cmd(struct ieee80211_hw *hw, struct ieee80211_vif *vif, void *data, int len);
#line 51  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/wcn36xx/main.c"
static struct ieee80211_channel wcn_2ghz_channels[14U] = {{.center_freq = 2412U, .hw_value = (unsigned short)1U, .max_power = 25}, {.center_freq = 2417U, .hw_value = (unsigned short)2U, .max_power = 25}, {.center_freq = 2422U, .hw_value = (unsigned short)3U, .max_power = 25}, {.center_freq = 2427U, .hw_value = (unsigned short)4U, .max_power = 25}, {.center_freq = 2432U, .hw_value = (unsigned short)5U, .max_power = 25}, {.center_freq = 2437U, .hw_value = (unsigned short)6U, .max_power = 25}, {.center_freq = 2442U, .hw_value = (unsigned short)7U, .max_power = 25}, {.center_freq = 2447U, .hw_value = (unsigned short)8U, .max_power = 25}, {.center_freq = 2452U, .hw_value = (unsigned short)9U, .max_power = 25}, {.center_freq = 2457U, .hw_value = (unsigned short)10U, .max_power = 25}, {.center_freq = 2462U, .hw_value = (unsigned short)11U, .max_power = 25}, {.center_freq = 2467U, .hw_value = (unsigned short)12U, .max_power = 25}, {.center_freq = 2472U, .hw_value = (unsigned short)13U, .max_power = 25}, {.center_freq = 2484U, .hw_value = (unsigned short)14U, .max_power = 25}};
#line 69  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/wcn36xx/main.c"
static struct ieee80211_channel wcn_5ghz_channels[23U] = {{.band = NL80211_BAND_5GHZ, .center_freq = 5180U, .hw_value = (unsigned short)36U, .max_power = 25}, {.band = NL80211_BAND_5GHZ, .center_freq = 5200U, .hw_value = (unsigned short)40U, .max_power = 25}, {.band = NL80211_BAND_5GHZ, .center_freq = 5220U, .hw_value = (unsigned short)44U, .max_power = 25}, {.band = NL80211_BAND_5GHZ, .center_freq = 5240U, .hw_value = (unsigned short)48U, .max_power = 25}, {.band = NL80211_BAND_5GHZ, .center_freq = 5260U, .hw_value = (unsigned short)52U, .max_power = 25}, {.band = NL80211_BAND_5GHZ, .center_freq = 5280U, .hw_value = (unsigned short)56U, .max_power = 25}, {.band = NL80211_BAND_5GHZ, .center_freq = 5300U, .hw_value = (unsigned short)60U, .max_power = 25}, {.band = NL80211_BAND_5GHZ, .center_freq = 5320U, .hw_value = (unsigned short)64U, .max_power = 25}, {.band = NL80211_BAND_5GHZ, .center_freq = 5500U, .hw_value = (unsigned short)100U, .max_power = 25}, {.band = NL80211_BAND_5GHZ, .center_freq = 5520U, .hw_value = (unsigned short)104U, .max_power = 25}, {.band = NL80211_BAND_5GHZ, .center_freq = 5540U, .hw_value = (unsigned short)108U, .max_power = 25}, {.band = NL80211_BAND_5GHZ, .center_freq = 5560U, .hw_value = (unsigned short)112U, .max_power = 25}, {.band = NL80211_BAND_5GHZ, .center_freq = 5580U, .hw_value = (unsigned short)116U, .max_power = 25}, {.band = NL80211_BAND_5GHZ, .center_freq = 5600U, .hw_value = (unsigned short)120U, .max_power = 25}, {.band = NL80211_BAND_5GHZ, .center_freq = 5620U, .hw_value = (unsigned short)124U, .max_power = 25}, {.band = NL80211_BAND_5GHZ, .center_freq = 5640U, .hw_value = (unsigned short)128U, .max_power = 25}, {.band = NL80211_BAND_5GHZ, .center_freq = 5660U, .hw_value = (unsigned short)132U, .max_power = 25}, {.band = NL80211_BAND_5GHZ, .center_freq = 5700U, .hw_value = (unsigned short)140U, .max_power = 25}, {.band = NL80211_BAND_5GHZ, .center_freq = 5745U, .hw_value = (unsigned short)149U, .max_power = 25}, {.band = NL80211_BAND_5GHZ, .center_freq = 5765U, .hw_value = (unsigned short)153U, .max_power = 25}, {.band = NL80211_BAND_5GHZ, .center_freq = 5785U, .hw_value = (unsigned short)157U, .max_power = 25}, {.band = NL80211_BAND_5GHZ, .center_freq = 5805U, .hw_value = (unsigned short)161U, .max_power = 25}, {.band = NL80211_BAND_5GHZ, .center_freq = 5825U, .hw_value = (unsigned short)165U, .max_power = 25}};
#line 102  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/wcn36xx/main.c"
static struct ieee80211_rate wcn_2ghz_rates[12U] = {{.bitrate = (unsigned short)10U, .hw_value = (unsigned short)130U, .hw_value_short = (unsigned short)130U}, {.flags = 1U, .bitrate = (unsigned short)20U, .hw_value = (unsigned short)132U, .hw_value_short = (unsigned short)132U}, {.flags = 1U, .bitrate = (unsigned short)55U, .hw_value = (unsigned short)139U, .hw_value_short = (unsigned short)139U}, {.flags = 1U, .bitrate = (unsigned short)110U, .hw_value = (unsigned short)150U, .hw_value_short = (unsigned short)150U}, {.bitrate = (unsigned short)60U, .hw_value = (unsigned short)12U, .hw_value_short = (unsigned short)12U}, {.bitrate = (unsigned short)90U, .hw_value = (unsigned short)18U, .hw_value_short = (unsigned short)18U}, {.bitrate = (unsigned short)120U, .hw_value = (unsigned short)24U, .hw_value_short = (unsigned short)24U}, {.bitrate = (unsigned short)180U, .hw_value = (unsigned short)36U, .hw_value_short = (unsigned short)36U}, {.bitrate = (unsigned short)240U, .hw_value = (unsigned short)48U, .hw_value_short = (unsigned short)48U}, {.bitrate = (unsigned short)360U, .hw_value = (unsigned short)72U, .hw_value_short = (unsigned short)72U}, {.bitrate = (unsigned short)480U, .hw_value = (unsigned short)96U, .hw_value_short = (unsigned short)96U}, {.bitrate = (unsigned short)540U, .hw_value = (unsigned short)108U, .hw_value_short = (unsigned short)108U}};
#line 117  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/wcn36xx/main.c"
static struct ieee80211_rate wcn_5ghz_rates[8U] = {{.bitrate = (unsigned short)60U, .hw_value = (unsigned short)12U, .hw_value_short = (unsigned short)12U}, {.bitrate = (unsigned short)90U, .hw_value = (unsigned short)18U, .hw_value_short = (unsigned short)18U}, {.bitrate = (unsigned short)120U, .hw_value = (unsigned short)24U, .hw_value_short = (unsigned short)24U}, {.bitrate = (unsigned short)180U, .hw_value = (unsigned short)36U, .hw_value_short = (unsigned short)36U}, {.bitrate = (unsigned short)240U, .hw_value = (unsigned short)48U, .hw_value_short = (unsigned short)48U}, {.bitrate = (unsigned short)360U, .hw_value = (unsigned short)72U, .hw_value_short = (unsigned short)72U}, {.bitrate = (unsigned short)480U, .hw_value = (unsigned short)96U, .hw_value_short = (unsigned short)96U}, {.bitrate = (unsigned short)540U, .hw_value = (unsigned short)108U, .hw_value_short = (unsigned short)108U}};
#line 128  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/wcn36xx/main.c"
static struct ieee80211_supported_band wcn_band_2ghz = {.channels = (struct ieee80211_channel *)(& wcn_2ghz_channels), .bitrates = (struct ieee80211_rate *)(& wcn_2ghz_rates), .n_channels = 14, .n_bitrates = 12, .ht_cap = {.cap = (unsigned short)36912U, .ht_supported = (_Bool)1, .ampdu_factor = (unsigned char)3U, .ampdu_density = (unsigned char)7U, .mcs = {.rx_mask = {(unsigned char)255U}, .rx_highest = (unsigned short)72U, .tx_params = (unsigned char)1U}}};
#line 149  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/wcn36xx/main.c"
static struct ieee80211_supported_band wcn_band_5ghz = {.channels = (struct ieee80211_channel *)(& wcn_5ghz_channels), .bitrates = (struct ieee80211_rate *)(& wcn_5ghz_rates), .n_channels = 23, .n_bitrates = 8, .ht_cap = {.cap = (unsigned short)36978U, .ht_supported = (_Bool)1, .ampdu_factor = (unsigned char)3U, .ampdu_density = (unsigned char)7U, .mcs = {.rx_mask = {(unsigned char)255U}, .rx_highest = (unsigned short)72U, .tx_params = (unsigned char)1U}}};
#line 174  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/wcn36xx/main.c"
static struct wiphy_wowlan_support wowlan_support = {.flags = 1U};
#line 180  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/wcn36xx/main.c"
__inline static u8 get_sta_index(struct ieee80211_vif *vif, struct wcn36xx_sta *sta_priv)
{
  #line 184 
  int tmp;
  #line 184 
  if (vif->type == (unsigned int)NL80211_IFTYPE_STATION) 
                                                         #line 184 
                                                         tmp = (int)sta_priv->bss_sta_index; else 
                                                                    #line 184 
                                                                    tmp = (int)sta_priv->sta_index;
  #line 184 
  return (unsigned char)tmp;
}

#line 188  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/wcn36xx/main.c"
static char *wcn36xx_caps_names[61U] = {(char *)"MCC", (char *)"P2P", (char *)"DOT11AC", (char *)"SLM_SESSIONIZATION", (char *)"DOT11AC_OPMODE", (char *)"SAP32STA", (char *)"TDLS", (char *)"P2P_GO_NOA_DECOUPLE_INIT_SCAN", (char *)"WLANACTIVE_OFFLOAD", (char *)"BEACON_OFFLOAD", (char *)"SCAN_OFFLOAD", (char *)"ROAM_OFFLOAD", (char *)"BCN_MISS_OFFLOAD", (char *)"STA_POWERSAVE", (char *)"STA_ADVANCED_PWRSAVE", (char *)"AP_UAPSD", (char *)"AP_DFS", (char *)"BLOCKACK", (char *)"PHY_ERR", (char *)"BCN_FILTER", (char *)"RTT", (char *)"RATECTRL", (char *)"WOW", (char *)"WLAN_ROAM_SCAN_OFFLOAD", (char *)"SPECULATIVE_PS_POLL", (char *)"SCAN_SCH", (char *)"IBSS_HEARTBEAT_OFFLOAD", (char *)"WLAN_SCAN_OFFLOAD", (char *)"WLAN_PERIODIC_TX_PTRN", (char *)"ADVANCE_TDLS", (char *)"BATCH_SCAN", (char *)"FW_IN_TX_PATH", (char *)"EXTENDED_NSOFFLOAD_SLOT", (char *)"CH_SWITCH_V1", (char *)"HT40_OBSS_SCAN", (char *)"UPDATE_CHANNEL_LIST", (char *)"WLAN_MCADDR_FLT", (char *)"WLAN_CH144", (char *)"NAN", (char *)"TDLS_SCAN_COEXISTENCE", (char *)"LINK_LAYER_STATS_MEAS", (char *)"MU_MIMO", (char *)"EXTENDED_SCAN", (char *)"DYNAMIC_WMM_PS", (char *)"MAC_SPOOFED_SCAN", (char *)"BMU_ERROR_GENERIC_RECOVERY", (char *)"DISA", (char *)"FW_STATS", (char *)"WPS_PRBRSP_TMPL", (char *)"BCN_IE_FLT_DELTA", (char *)"TDLS_OFF_CHANNEL", (char *)"RTT3", (char *)"MGMT_FRAME_LOGGING", (char *)"ENHANCED_TXBD_COMPLETION", (char *)"LOGGING_ENHANCEMENT", (char *)"EXT_SCAN_ENHANCED", (char *)"MEMORY_DUMP_SUPPORTED", (char *)"PER_PKT_STATS_SUPPORTED", (char *)"EXT_LL_STAT", (char *)"WIFI_CONFIG", (char *)"ANTENNA_DIVERSITY_SELECTION"};
#line 252  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/wcn36xx/main.c"
static char *wcn36xx_get_cap_name(enum place_holder_in_cap_bitmap x)
{
  #line 254 
  if (x > (unsigned int)EXT_LL_STAT) 
                                     #line 255 
                                     return (char *)"UNKNOWN";
  #line 256 
  return wcn36xx_caps_names[(unsigned int)x];
}

#line 259  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/wcn36xx/main.c"
static void wcn36xx_feat_caps_info(struct wcn36xx *wcn)
{
  #line 261 
  int i;
  #line 263 
  i = 0;
  #line 263 
  while (i <= 127) {
    #line 264 
    if (get_feat_caps((u32 *)(& wcn->fw_feat_caps),
                      (enum place_holder_in_cap_bitmap)i) != 0) 
      #line 265 
      if ((wcn36xx_dbg_mask & 1024U) != 0U) {
        #line 265 
        printk((char *)"\001",wcn36xx_get_cap_name((enum place_holder_in_cap_bitmap)i));
      }
    #line 263 
    i ++;
  }
  #line 266 
  return;
}

#line 269  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/wcn36xx/main.c"
static int wcn36xx_start(struct ieee80211_hw *hw)
{
  #line 272 
  int ret;
  #line 271 
  struct wcn36xx *wcn = (struct wcn36xx *)hw->priv;
  #line 274 
  if ((wcn36xx_dbg_mask & 1024U) != 0U) 
                                        #line 274 
                                        printk((char *)"\001");
  #line 277 
  ret = wcn36xx_smd_open(wcn);
  #line 278 
  if (ret != 0) {
    #line 279 
    printk((char *)"\001",ret);
    #line 280 
    goto out_err;
  }
  #line 284 
  ret = wcn36xx_dxe_allocate_mem_pools(wcn);
  #line 285 
  if (ret != 0) {
    #line 286 
    printk((char *)"\001",ret);
    #line 287 
    goto out_smd_close;
  }
  #line 290 
  ret = wcn36xx_dxe_alloc_ctl_blks(wcn);
  #line 291 
  if (ret != 0) {
    #line 292 
    printk((char *)"\001",ret);
    #line 293 
    goto out_free_dxe_pool;
  }
  #line 296 
  wcn->hal_buf = (u8 *)kmalloc(4096UL,3264U);
  #line 297 
  if (wcn->hal_buf == (u8 *)0U) {
    #line 298 
    printk((char *)"\001");
    #line 299 
    ret = -12;
    #line 300 
    goto out_free_dxe_ctl;
  }
  #line 303 
  ret = wcn36xx_smd_load_nv(wcn);
  #line 304 
  if (ret != 0) {
    #line 305 
    printk((char *)"\001");
    #line 306 
    goto out_free_smd_buf;
  }
  #line 309 
  ret = wcn36xx_smd_start(wcn);
  #line 310 
  if (ret != 0) {
    #line 311 
    printk((char *)"\001");
    #line 312 
    goto out_free_smd_buf;
  }
  #line 315 
  if (! wcn36xx_is_fw_version(wcn,(unsigned char)1,(unsigned char)2,
                              (unsigned char)2,(unsigned char)24)) {
    #line 316 
    ret = wcn36xx_smd_feature_caps_exchange(wcn);
    #line 317 
    if (ret != 0) 
                  #line 318 
                  printk((char *)"\001"); else 
                                               #line 320 
                                               wcn36xx_feat_caps_info(wcn);
  }
  #line 324 
  ret = wcn36xx_dxe_init(wcn);
  #line 325 
  if (ret != 0) {
    #line 326 
    printk((char *)"\001");
    #line 327 
    goto out_smd_stop;
  }
  #line 330 
  wcn36xx_debugfs_init(wcn);
  #line 332 
  INIT_LIST_HEAD(& wcn->vif_list);
  #line 333 
  spinlock_check(& wcn->dxe_lock);
  {
    #line 333 
    struct lock_class_key __key;
    #line 333 
    __raw_spin_lock_init(& wcn->dxe_lock.__anonCompField_spinlock_25.rlock,(char *)"&(&wcn->dxe_lock)->rlock",& __key);
  }
  #line 335 
  return 0;
  #line 337 
  out_smd_stop: 
                #line 337 
  ;
  #line 338 
  wcn36xx_smd_stop(wcn);
  #line 339 
  out_free_smd_buf: 
                    #line 339 
  ;
  #line 340 
  kfree((void *)wcn->hal_buf);
  #line 341 
  out_free_dxe_ctl: 
                    #line 341 
  ;
  #line 342 
  wcn36xx_dxe_free_ctl_blks(wcn);
  #line 343 
  out_free_dxe_pool: 
                     #line 343 
  ;
  #line 344 
  wcn36xx_dxe_free_mem_pools(wcn);
  #line 345 
  out_smd_close: 
                 #line 345 
  ;
  #line 346 
  wcn36xx_smd_close(wcn);
  #line 347 
  out_err: 
           #line 347 
  ;
  #line 348 
  return ret;
}

#line 351  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/wcn36xx/main.c"
static void wcn36xx_stop(struct ieee80211_hw *hw)
{
  #line 353 
  struct wcn36xx *wcn = (struct wcn36xx *)hw->priv;
  #line 355 
  if ((wcn36xx_dbg_mask & 1024U) != 0U) 
                                        #line 355 
                                        printk((char *)"\001");
  #line 357 
  cancel_work_sync(& wcn->scan_work);
  #line 359 
  cif_mutex_lock_scan_lock_of_wcn36xx(& wcn->scan_lock);
  #line 360 
  if (wcn->scan_req != (struct cfg80211_scan_request *)0) {
    #line 361 
    struct cfg80211_scan_info scan_info = {.scan_start_tsf = 0ULL, .tsf_bssid = {(unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0}, .aborted = (_Bool)1};
    #line 365 
    ieee80211_scan_completed(wcn->hw,& scan_info);
  }
  #line 367 
  wcn->scan_req = (struct cfg80211_scan_request *)0;
  #line 368 
  cif_mutex_unlock_scan_lock_of_wcn36xx(& wcn->scan_lock);
  #line 370 
  wcn36xx_debugfs_exit(wcn);
  #line 371 
  wcn36xx_smd_stop(wcn);
  #line 372 
  wcn36xx_dxe_deinit(wcn);
  #line 373 
  wcn36xx_smd_close(wcn);
  #line 375 
  wcn36xx_dxe_free_mem_pools(wcn);
  #line 376 
  wcn36xx_dxe_free_ctl_blks(wcn);
  #line 378 
  kfree((void *)wcn->hal_buf);
  #line 379 
  return;
}

#line 381  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/wcn36xx/main.c"
static int wcn36xx_config(struct ieee80211_hw *hw, u32 changed)
{
  #line 385 
  struct wcn36xx_vif *tmp;
  #line 383 
  struct wcn36xx *wcn = (struct wcn36xx *)hw->priv;
  #line 384 
  struct ieee80211_vif *vif = (struct ieee80211_vif *)0;
  #line 387 
  if ((wcn36xx_dbg_mask & 1024U) != 0U) 
                                        #line 387 
                                        printk((char *)"\001",changed);
  #line 389 
  cif_mutex_lock_conf_mutex_of_wcn36xx(& wcn->conf_mutex);
  #line 391 
  if ((changed & 64U) != 0U) {
    #line 395 
    void *__mptr;
    #line 392 
    int ch = (int)((wcn->hw)->conf.chandef.chan)->hw_value;
    #line 393 
    if ((wcn36xx_dbg_mask & 1024U) != 0U) 
                                          #line 393 
                                          printk((char *)"\001",ch);
    #line 395 
    __mptr = (void *)wcn->vif_list.next;
    #line 395 
    tmp = ((struct wcn36xx_vif *)__mptr);
    #line 395 
    while (& tmp->list != & wcn->vif_list) {
      #line 395 
      void *__mptr_0;
      #line 396 
      vif = wcn36xx_priv_to_vif(tmp);
      #line 397 
      wcn36xx_smd_switch_channel(wcn,vif,ch);
      #line 395 
      __mptr_0 = (void *)tmp->list.next;
      #line 395 
      tmp = ((struct wcn36xx_vif *)__mptr_0);
    }
  }
  #line 401 
  if ((changed & 16U) != 0U) {
    #line 402 
    void *__mptr_1;
    #line 402 
    __mptr_1 = (void *)wcn->vif_list.next;
    #line 402 
    tmp = ((struct wcn36xx_vif *)__mptr_1);
    #line 402 
    while (& tmp->list != & wcn->vif_list) {
      #line 402 
      void *__mptr_2;
      #line 403 
      vif = wcn36xx_priv_to_vif(tmp);
      #line 404 
      if ((hw->conf.flags & 2U) != 0U) {
        #line 405 
        if ((int)vif->bss_conf.ps != 0) 
                                        #line 406 
                                        wcn36xx_pmc_enter_bmps_state(wcn,vif);
      }
      else 
           #line 408 
           wcn36xx_pmc_exit_bmps_state(wcn,vif);
      #line 402 
      __mptr_2 = (void *)tmp->list.next;
      #line 402 
      tmp = ((struct wcn36xx_vif *)__mptr_2);
    }
  }
  #line 413 
  cif_mutex_unlock_conf_mutex_of_wcn36xx(& wcn->conf_mutex);
  #line 415 
  return 0;
}

#line 418  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/wcn36xx/main.c"
static void wcn36xx_configure_filter(struct ieee80211_hw *hw, unsigned int changed, unsigned int *total, u64 multicast)
{
  #line 434 
  void *__mptr;
  #line 422 
  struct wcn36xx_hal_rcv_flt_mc_addr_list_type *fp;
  #line 424 
  struct wcn36xx_vif *tmp;
  #line 423 
  struct wcn36xx *wcn = (struct wcn36xx *)hw->priv;
  #line 425 
  struct ieee80211_vif *vif = (struct ieee80211_vif *)0;
  #line 427 
  if ((wcn36xx_dbg_mask & 1024U) != 0U) 
                                        #line 427 
                                        printk((char *)"\001");
  #line 429 
  cif_mutex_lock_conf_mutex_of_wcn36xx(& wcn->conf_mutex);
  #line 431 
  *total &= 2U;
  #line 433 
  fp = (struct wcn36xx_hal_rcv_flt_mc_addr_list_type *)multicast;
  #line 434 
  __mptr = (void *)wcn->vif_list.next;
  #line 434 
  tmp = ((struct wcn36xx_vif *)__mptr);
  #line 434 
  while (& tmp->list != & wcn->vif_list) {
    #line 434 
    void *__mptr_0;
    #line 435 
    vif = wcn36xx_priv_to_vif(tmp);
    #line 438 
    if ((*total & 2U) != 0U) 
                             #line 439 
                             wcn36xx_smd_set_mc_list(wcn,vif,(struct wcn36xx_hal_rcv_flt_mc_addr_list_type *)0);
    else 
      #line 440 
      if (vif->type == (unsigned int)NL80211_IFTYPE_STATION && (int)tmp->sta_assoc != 0) 
        #line 441 
        wcn36xx_smd_set_mc_list(wcn,vif,fp);
    #line 434 
    __mptr_0 = (void *)tmp->list.next;
    #line 434 
    tmp = ((struct wcn36xx_vif *)__mptr_0);
  }
  #line 444 
  cif_mutex_unlock_conf_mutex_of_wcn36xx(& wcn->conf_mutex);
  #line 445 
  kfree((void *)fp);
  #line 446 
  return;
}

#line 448  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/wcn36xx/main.c"
static u64 wcn36xx_prepare_multicast(struct ieee80211_hw *hw, struct netdev_hw_addr_list *mc_list)
{
  #line 451 
  struct wcn36xx_hal_rcv_flt_mc_addr_list_type *fp;
  #line 452 
  struct netdev_hw_addr *ha;
  #line 454 
  if ((wcn36xx_dbg_mask & 1024U) != 0U) 
                                        #line 454 
                                        printk((char *)"\001");
  #line 455 
  fp = (struct wcn36xx_hal_rcv_flt_mc_addr_list_type *)kzalloc(1446UL,2592U);
  #line 456 
  if (fp == (struct wcn36xx_hal_rcv_flt_mc_addr_list_type *)0) {
    #line 457 
    printk((char *)"\001");
    #line 458 
    return 0ULL;
  }
  #line 461 
  fp->mc_addr_count = 0U;
  #line 463 
  if (mc_list->count <= 240) {
    #line 465 
    void *__mptr;
    #line 465 
    __mptr = (void *)mc_list->list.next;
    #line 465 
    ha = ((struct netdev_hw_addr *)__mptr);
    #line 465 
    while ((void *)ha != (void *)mc_list) {
      #line 465 
      void *__mptr_0;
      #line 466 
      memcpy((void *)(& fp->mc_addr[fp->mc_addr_count]),(void *)(& ha->addr),6UL);
      #line 468 
      (fp->mc_addr_count) ++;
      #line 465 
      __mptr_0 = (void *)ha->list.next;
      #line 465 
      ha = ((struct netdev_hw_addr *)__mptr_0);
    }
  }
  #line 472 
  return (unsigned long long)fp;
}

#line 475  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/wcn36xx/main.c"
static void wcn36xx_tx(struct ieee80211_hw *hw, struct ieee80211_tx_control *control, struct sk_buff *skb)
{
  #line 479 
  struct wcn36xx *wcn = (struct wcn36xx *)hw->priv;
  #line 480 
  struct wcn36xx_sta *sta_priv = (struct wcn36xx_sta *)0;
  #line 482 
  if (control->sta != (struct ieee80211_sta *)0) 
                                                 #line 483 
                                                 sta_priv = wcn36xx_sta_to_priv(control->sta);
  #line 485 
  if (wcn36xx_start_tx(wcn,sta_priv,skb) != 0) 
                                               #line 486 
                                               ieee80211_free_txskb(wcn->hw,skb);
  #line 487 
  return;
}

#line 489  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/wcn36xx/main.c"
static int wcn36xx_set_key(struct ieee80211_hw *hw, enum set_key_cmd cmd, struct ieee80211_vif *vif, struct ieee80211_sta *sta, struct ieee80211_key_conf *key_conf)
{
  #line 496 
  struct wcn36xx_sta *tmp_1;
  #line 498 
  u8 key[32U];
  #line 494 
  struct wcn36xx *wcn = (struct wcn36xx *)hw->priv;
  #line 495 
  struct wcn36xx_vif *vif_priv = wcn36xx_vif_to_priv(vif);
  #line 496 
  if (sta != (struct ieee80211_sta *)0) 
                                        #line 496 
                                        tmp_1 = wcn36xx_sta_to_priv(sta); else 
                                                                    #line 496 
                                                                    tmp_1 = (struct wcn36xx_sta *)0;
  #line 496 
  struct wcn36xx_sta *sta_priv = tmp_1;
  #line 497 
  int ret = 0;
  #line 500 
  if ((wcn36xx_dbg_mask & 1024U) != 0U) 
                                        #line 500 
                                        printk((char *)"\001");
  #line 501 
  if ((wcn36xx_dbg_mask & 1024U) != 0U) 
                                        #line 501 
                                        printk((char *)"\001",(unsigned int)cmd,key_conf->cipher,(int)key_conf->keyidx,(int)key_conf->keylen,(int)key_conf->flags);
  #line 504 
  if ((wcn36xx_dbg_mask & 1024U) != 0U) 
                                        #line 504 
                                        print_hex_dump((char *)"\001",(char *)"wcn36xx",2,32,1,(void *)(& key_conf->key),(unsigned long)key_conf->keylen,(_Bool)0);
  #line 508 
  cif_mutex_lock_conf_mutex_of_wcn36xx(& wcn->conf_mutex);
  #line 510 
  switch (key_conf->cipher) {
    #line 511 
    case (u32)1027073: 
                       #line 511 
    ;
    #line 512 
    vif_priv->encrypt_type = WCN36XX_HAL_ED_WEP40;
    #line 513 
    break;
    #line 514 
    case (u32)1027077: 
                       #line 514 
    ;
    #line 515 
    vif_priv->encrypt_type = WCN36XX_HAL_ED_WEP104;
    #line 516 
    break;
    #line 517 
    case (u32)1027076: 
                       #line 517 
    ;
    #line 518 
    vif_priv->encrypt_type = WCN36XX_HAL_ED_CCMP;
    #line 519 
    break;
    #line 520 
    case (u32)1027074: 
                       #line 520 
    ;
    #line 521 
    vif_priv->encrypt_type = WCN36XX_HAL_ED_TKIP;
    #line 522 
    break;
    #line 523 
    default: 
             #line 523 
    ;
    #line 524 
    printk((char *)"\001",key_conf->cipher);
    #line 526 
    ret = -95;
    #line 527 
    goto out;
  }
  #line 530 
  switch ((unsigned int)cmd) {
    #line 531 
    case (unsigned int)0: 
                          #line 531 
    ;
    #line 532 
    if (vif_priv->encrypt_type == (unsigned int)WCN36XX_HAL_ED_TKIP) {
      #line 540 
      memcpy((void *)(& key),(void *)(& key_conf->key),16UL);
      #line 541 
      memcpy((void *)((u8 *)(& key) + 16U),(void *)((u8 *)(& key_conf->key) + 24U),8UL);
      #line 542 
      memcpy((void *)((u8 *)(& key) + 24U),(void *)((u8 *)(& key_conf->key) + 16U),8UL);
    }
    else 
         #line 544 
         memcpy((void *)(& key),(void *)(& key_conf->key),(unsigned long)key_conf->keylen);
    #line 547 
    if (((unsigned int)key_conf->flags & 8U) != 0U) {
      #line 548 
      sta_priv->is_data_encrypted = (_Bool)1;
      #line 550 
      if (vif->type == (unsigned int)NL80211_IFTYPE_STATION) 
                                                             #line 551 
                                                             wcn36xx_smd_config_bss(wcn,vif,sta,(u8 *)(& sta->addr),(_Bool)1);
      #line 557 
      ;
      #line 557 
      ;
      #line 557 
      ;
      #line 557 
      ;
      #line 557 
      wcn36xx_smd_set_stakey(wcn,vif_priv->encrypt_type,(unsigned char)((int)((unsigned char)key_conf->keyidx)),(unsigned char)((int)key_conf->keylen),(u8 *)(& key),(unsigned char)((int)get_sta_index(vif,sta_priv)));
    }
    else {
      #line 564 
      wcn36xx_smd_set_bsskey(wcn,vif_priv->encrypt_type,(unsigned char)((int)vif_priv->bss_index),(unsigned char)((int)((unsigned char)key_conf->keyidx)),(unsigned char)((int)key_conf->keylen),(u8 *)(& key));
      #line 571 
      if (key_conf->cipher == 1027073U || key_conf->cipher == 1027077U) {
        #line 573 
        void *__mptr;
        #line 573 
        __mptr = (void *)vif_priv->sta_list.next;
        #line 573 
        sta_priv = ((struct wcn36xx_sta *)__mptr);
        #line 573 
        while (& sta_priv->list != & vif_priv->sta_list) {
          #line 573 
          void *__mptr_0;
          {
            #line 575 
            sta_priv->is_data_encrypted = (_Bool)1;
            #line 576 
            ;
            #line 576 
            ;
            #line 576 
            ;
            #line 576 
            ;
            #line 576 
            wcn36xx_smd_set_stakey(wcn,vif_priv->encrypt_type,(unsigned char)((int)((unsigned char)key_conf->keyidx)),(unsigned char)((int)key_conf->keylen),(u8 *)(& key),(unsigned char)((int)get_sta_index(vif,sta_priv)));
          }
          #line 573 
          __mptr_0 = (void *)sta_priv->list.next;
          #line 573 
          sta_priv = ((struct wcn36xx_sta *)__mptr_0);
        }
      }
    }
    #line 585 
    break;
    #line 586 
    case (unsigned int)1: 
                          #line 586 
    ;
    #line 587 
    if (((unsigned int)key_conf->flags & 8U) == 0U) {
      #line 588 
      if ((unsigned int)vif_priv->bss_index != 255U) 
                                                     #line 589 
                                                     wcn36xx_smd_remove_bsskey(wcn,vif_priv->encrypt_type,(unsigned char)((int)vif_priv->bss_index),(unsigned char)((int)((unsigned char)key_conf->keyidx)));
      #line 594 
      vif_priv->encrypt_type = WCN36XX_HAL_ED_NONE;
    }
    else {
      #line 596 
      sta_priv->is_data_encrypted = (_Bool)0;
      #line 598 
      if ((unsigned int)sta_priv->aid != 0U) {
        #line 599 
        ;
        #line 599 
        ;
        #line 599 
        ;
        #line 599 
        wcn36xx_smd_remove_stakey(wcn,vif_priv->encrypt_type,(unsigned char)((int)((unsigned char)key_conf->keyidx)),(unsigned char)((int)get_sta_index(vif,sta_priv)));
      }
    }
    #line 604 
    break;
    #line 605 
    default: 
             #line 605 
    ;
    #line 606 
    printk((char *)"\001",(unsigned int)cmd);
    #line 607 
    ret = -95;
    #line 608 
    goto out;
  }
  #line 611 
  out: 
       #line 611 
  ;
  #line 612 
  cif_mutex_unlock_conf_mutex_of_wcn36xx(& wcn->conf_mutex);
  #line 614 
  return ret;
}

#line 617  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/wcn36xx/main.c"
static void wcn36xx_hw_scan_worker(struct work_struct *work)
{
  #line 619 
  void *__mptr;
  #line 621 
  u8 channels[60U];
  #line 624 
  int i;
  #line 619 
  __mptr = (void *)work;
  #line 619 
  struct wcn36xx *wcn = ((struct wcn36xx *)(__mptr + 18446744073709550752U));
  #line 620 
  struct cfg80211_scan_request *req = wcn->scan_req;
  #line 622 
  struct cfg80211_scan_info scan_info = {.scan_start_tsf = 0ULL, .tsf_bssid = {(unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0}, .aborted = (_Bool)0};
  #line 623 
  bool aborted = (_Bool)0;
  #line 626 
  if ((wcn36xx_dbg_mask & 1024U) != 0U) 
                                        #line 626 
                                        printk((char *)"\001",req->n_channels);
  #line 628 
  i = 0;
  #line 628 
  while (req->n_channels > (unsigned int)i) {
    #line 629 
    channels[i] = (unsigned char)(req->channels[i])->hw_value;
    #line 628 
    i ++;
  }
  #line 631 
  wcn36xx_smd_update_scan_params(wcn,(u8 *)(& channels),(unsigned long)req->n_channels);
  #line 633 
  wcn36xx_smd_init_scan(wcn,(enum wcn36xx_hal_sys_mode)HAL_SYS_MODE_SCAN);
  #line 634 
  i = 0;
  #line 634 
  while (req->n_channels > (unsigned int)i) {
    #line 635 
    cif_mutex_lock_scan_lock_of_wcn36xx(& wcn->scan_lock);
    #line 636 
    aborted = wcn->scan_aborted;
    #line 637 
    cif_mutex_unlock_scan_lock_of_wcn36xx(& wcn->scan_lock);
    #line 639 
    if ((int)aborted != 0) 
                           #line 640 
                           break;
    #line 642 
    wcn->scan_freq = (int)(req->channels[i])->center_freq;
    #line 643 
    wcn->scan_band = (int)(req->channels[i])->band;
    #line 645 
    wcn36xx_smd_start_scan(wcn,(unsigned char)((int)((unsigned char)(req->channels[i])->hw_value)));
    #line 646 
    msleep(30U);
    #line 647 
    wcn36xx_smd_end_scan(wcn,(unsigned char)((int)((unsigned char)(req->channels[i])->hw_value)));
    #line 649 
    wcn->scan_freq = 0;
    #line 634 
    i ++;
  }
  #line 651 
  wcn36xx_smd_finish_scan(wcn,(enum wcn36xx_hal_sys_mode)HAL_SYS_MODE_SCAN);
  #line 653 
  scan_info.aborted = aborted;
  #line 654 
  ieee80211_scan_completed(wcn->hw,& scan_info);
  #line 656 
  cif_mutex_lock_scan_lock_of_wcn36xx(& wcn->scan_lock);
  #line 657 
  wcn->scan_req = (struct cfg80211_scan_request *)0;
  #line 658 
  cif_mutex_unlock_scan_lock_of_wcn36xx(& wcn->scan_lock);
  #line 659 
  return;
}

#line 661  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/wcn36xx/main.c"
static int wcn36xx_hw_scan(struct ieee80211_hw *hw, struct ieee80211_vif *vif, struct ieee80211_scan_request *hw_req)
{
  #line 665 
  struct wcn36xx *wcn = (struct wcn36xx *)hw->priv;
  #line 666 
  cif_mutex_lock_scan_lock_of_wcn36xx(& wcn->scan_lock);
  #line 667 
  if (wcn->scan_req != (struct cfg80211_scan_request *)0) {
    #line 668 
    cif_mutex_unlock_scan_lock_of_wcn36xx(& wcn->scan_lock);
    #line 669 
    return -16;
  }
  #line 672 
  wcn->scan_aborted = (_Bool)0;
  #line 673 
  wcn->scan_req = & hw_req->req;
  #line 675 
  cif_mutex_unlock_scan_lock_of_wcn36xx(& wcn->scan_lock);
  #line 677 
  if (get_feat_caps((u32 *)(& wcn->fw_feat_caps),
                    (enum place_holder_in_cap_bitmap)SCAN_OFFLOAD) == 0) {
    #line 679 
    cif_schedule_work(& wcn->scan_work);
    #line 680 
    return 0;
  }
  #line 683 
  return wcn36xx_smd_start_hw_scan(wcn,vif,& hw_req->req);
}

#line 686  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/wcn36xx/main.c"
static void wcn36xx_cancel_hw_scan(struct ieee80211_hw *hw, struct ieee80211_vif *vif)
{
  #line 689 
  struct wcn36xx *wcn = (struct wcn36xx *)hw->priv;
  #line 691 
  cif_mutex_lock_scan_lock_of_wcn36xx(& wcn->scan_lock);
  #line 692 
  wcn->scan_aborted = (_Bool)1;
  #line 693 
  cif_mutex_unlock_scan_lock_of_wcn36xx(& wcn->scan_lock);
  #line 695 
  if (get_feat_caps((u32 *)(& wcn->fw_feat_caps),
                    (enum place_holder_in_cap_bitmap)SCAN_OFFLOAD) != 0) 
    #line 698 
    wcn36xx_smd_stop_hw_scan(wcn);
  else {
    #line 700 
    struct cfg80211_scan_info scan_info = {.scan_start_tsf = 0ULL, .tsf_bssid = {(unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0}, .aborted = (_Bool)1};
    #line 704 
    cancel_work_sync(& wcn->scan_work);
    #line 705 
    ieee80211_scan_completed(wcn->hw,& scan_info);
  }
  #line 707 
  return;
}

#line 709  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/wcn36xx/main.c"
static void wcn36xx_update_allowed_rates(struct ieee80211_sta *sta, enum nl80211_band band)
{
  #line 712 
  int i;
  #line 712 
  int size;
  #line 713 
  u16 *rates_table;
  #line 714 
  struct wcn36xx_sta *sta_priv = wcn36xx_sta_to_priv(sta);
  #line 715 
  u32 rates = sta->supp_rates[(unsigned int)band];
  #line 717 
  memset((void *)(& sta_priv->supported_rates),0,58UL);
  #line 719 
  sta_priv->supported_rates.op_rate_mode = STA_11n;
  #line 721 
  size = 4;
  #line 722 
  rates_table = (u16 *)(& sta_priv->supported_rates.dsss_rates);
  #line 723 
  if (band == (unsigned int)NL80211_BAND_2GHZ) {
    #line 724 
    i = 0;
    #line 724 
    while (i < size) {
      #line 725 
      if ((rates & 1U) != 0U) {
        #line 726 
        *(rates_table + (unsigned long)i) = wcn_2ghz_rates[i].hw_value;
        #line 727 
        rates >>= 1;
      }
      #line 724 
      i ++;
    }
  }
  #line 732 
  size = 8;
  #line 733 
  rates_table = (u16 *)(& sta_priv->supported_rates.ofdm_rates);
  #line 734 
  i = 0;
  #line 734 
  while (i < size) {
    #line 735 
    if ((rates & 1U) != 0U) {
      #line 736 
      *(rates_table + (unsigned long)i) = wcn_5ghz_rates[i].hw_value;
      #line 737 
      rates >>= 1;
    }
    #line 734 
    i ++;
  }
  #line 741 
  if ((int)sta->ht_cap.ht_supported != 0) 
                                          #line 744 
                                          memcpy((void *)(& sta_priv->supported_rates.supported_mcs_set),(void *)(& sta->ht_cap.mcs.rx_mask),10UL);
  #line 747 
  return;
}

#line 749  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/wcn36xx/main.c"
void wcn36xx_set_default_rates(struct wcn36xx_hal_supported_rates *rates)
{
  #line 751 
  u16 ofdm_rates[8U] = {(unsigned short)12U, (unsigned short)18U, (unsigned short)24U, (unsigned short)36U, (unsigned short)48U, (unsigned short)72U, (unsigned short)96U, (unsigned short)108U};
  #line 761 
  u16 dsss_rates[4U] = {(unsigned short)130U, (unsigned short)132U, (unsigned short)139U, (unsigned short)150U};
  #line 768 
  rates->op_rate_mode = STA_11n;
  #line 769 
  memcpy((void *)(& rates->dsss_rates),(void *)(& dsss_rates),8UL);
  #line 771 
  memcpy((void *)(& rates->ofdm_rates),(void *)(& ofdm_rates),16UL);
  #line 773 
  rates->supported_mcs_set[0] = (unsigned char)255U;
  #line 774 
  return;
}

#line 775  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/wcn36xx/main.c"
static void wcn36xx_bss_info_changed(struct ieee80211_hw *hw, struct ieee80211_vif *vif, struct ieee80211_bss_conf *bss_conf, u32 changed)
{
  #line 782 
  u16 tim_off;
  #line 782 
  u16 tim_len;
  #line 783 
  enum wcn36xx_hal_link_state link_state;
  #line 780 
  struct wcn36xx *wcn = (struct wcn36xx *)hw->priv;
  #line 781 
  struct sk_buff *skb = (struct sk_buff *)0;
  #line 784 
  struct wcn36xx_vif *vif_priv = wcn36xx_vif_to_priv(vif);
  #line 786 
  if ((wcn36xx_dbg_mask & 1024U) != 0U) 
                                        #line 786 
                                        printk((char *)"\001",vif,changed);
  #line 789 
  cif_mutex_lock_conf_mutex_of_wcn36xx(& wcn->conf_mutex);
  #line 791 
  if ((changed & 1048576U) != 0U) {
    #line 792 
    if ((wcn36xx_dbg_mask & 1024U) != 0U) 
                                          #line 792 
                                          printk((char *)"\001",(int)bss_conf->dtim_period);
    #line 796 
    vif_priv->dtim_period = bss_conf->dtim_period;
  }
  #line 799 
  if ((changed & 128U) != 0U) {
    #line 800 
    if ((wcn36xx_dbg_mask & 1024U) != 0U) 
                                          #line 800 
                                          printk((char *)"\001",bss_conf->bssid);
    #line 803 
    if (is_zero_ether_addr(bss_conf->bssid)) {
      #line 813 
      vif_priv->is_joining = (_Bool)0;
      #line 814 
      wcn36xx_smd_delete_bss(wcn,vif);
      #line 815 
      wcn36xx_smd_set_link_st(wcn,bss_conf->bssid,(u8 *)(& vif->addr),(enum wcn36xx_hal_link_state)WCN36XX_HAL_LINK_IDLE_STATE);
      #line 817 
      vif_priv->encrypt_type = WCN36XX_HAL_ED_NONE;
    }
    else {
      #line 804 
      vif_priv->is_joining = (_Bool)1;
      #line 805 
      vif_priv->bss_index = (unsigned char)255U;
      #line 806 
      wcn36xx_smd_set_link_st(wcn,bss_conf->bssid,(u8 *)(& vif->addr),(enum wcn36xx_hal_link_state)WCN36XX_HAL_LINK_PREASSOC_STATE);
      #line 808 
      wcn36xx_smd_join(wcn,bss_conf->bssid,(u8 *)(& vif->addr),(unsigned char)((int)((unsigned char)((wcn->hw)->conf.chandef.chan)->hw_value)));
      #line 810 
      wcn36xx_smd_config_bss(wcn,vif,(struct ieee80211_sta *)0,bss_conf->bssid,(_Bool)0);
    }
  }
  #line 821 
  if ((changed & 32768U) != 0U) {
    #line 822 
    if ((wcn36xx_dbg_mask & 1024U) != 0U) 
                                          #line 822 
                                          printk((char *)"\001");
    #line 824 
    if ((wcn36xx_dbg_mask & 1024U) != 0U) 
                                          #line 824 
                                          print_hex_dump((char *)"\001",(char *)"wcn36xx",2,32,1,(void *)(& bss_conf->ssid),bss_conf->ssid_len,(_Bool)0);
    #line 827 
    vif_priv->ssid.length = (unsigned char)bss_conf->ssid_len;
    #line 828 
    memcpy((void *)(& vif_priv->ssid.ssid),(void *)(& bss_conf->ssid),bss_conf->ssid_len);
  }
  #line 833 
  if ((changed & 1U) != 0U) {
    #line 834 
    vif_priv->is_joining = (_Bool)0;
    #line 835 
    if ((int)bss_conf->assoc != 0) {
      #line 836 
      struct ieee80211_sta *sta;
      #line 837 
      struct wcn36xx_sta *sta_priv;
      #line 839 
      if ((wcn36xx_dbg_mask & 1024U) != 0U) 
                                            #line 839 
                                            printk((char *)"\001",bss_conf->bssid,(u8 *)(& vif->addr),(int)bss_conf->aid);
      #line 845 
      vif_priv->sta_assoc = (_Bool)1;
      #line 853 
      sta = ieee80211_find_sta(vif,bss_conf->bssid);
      #line 854 
      if (sta == (struct ieee80211_sta *)0) {
        #line 855 
        printk((char *)"\001",bss_conf->bssid);
        #line 857 
        goto out;
      }
      #line 859 
      sta_priv = wcn36xx_sta_to_priv(sta);
      #line 861 
      wcn36xx_update_allowed_rates(sta,((wcn->hw)->conf.chandef.chan)->band);
      #line 863 
      wcn36xx_smd_set_link_st(wcn,bss_conf->bssid,(u8 *)(& vif->addr),(enum wcn36xx_hal_link_state)WCN36XX_HAL_LINK_POSTASSOC_STATE);
      #line 866 
      wcn36xx_smd_config_bss(wcn,vif,sta,bss_conf->bssid,(_Bool)1);
      #line 869 
      sta_priv->aid = bss_conf->aid;
      #line 874 
      wcn36xx_smd_config_sta(wcn,vif,sta);
    }
    else {
      #line 876 
      if ((wcn36xx_dbg_mask & 1024U) != 0U) 
                                            #line 876 
                                            printk((char *)"\001",bss_conf->bssid,(u8 *)(& vif->addr),(int)bss_conf->aid);
      #line 881 
      vif_priv->sta_assoc = (_Bool)0;
      #line 882 
      wcn36xx_smd_set_link_st(wcn,bss_conf->bssid,(u8 *)(& vif->addr),(enum wcn36xx_hal_link_state)WCN36XX_HAL_LINK_IDLE_STATE);
    }
  }
  #line 889 
  if ((changed & 65536U) != 0U) {
    #line 890 
    if ((wcn36xx_dbg_mask & 1024U) != 0U) 
                                          #line 890 
                                          printk((char *)"\001");
    #line 891 
    skb = ieee80211_proberesp_get(hw,vif);
    #line 892 
    if (skb == (struct sk_buff *)0) {
      #line 893 
      printk((char *)"\001");
      #line 894 
      goto out;
    }
    #line 897 
    wcn36xx_smd_update_proberesp_tmpl(wcn,vif,skb);
    #line 898 
    consume_skb(skb);
  }
  #line 901 
  if ((changed & 512U) != 0U || (changed & 256U) != 0U) {
    #line 903 
    if ((wcn36xx_dbg_mask & 1024U) != 0U) 
                                          #line 903 
                                          printk((char *)"\001",(int)bss_conf->enable_beacon);
    #line 907 
    if ((int)bss_conf->enable_beacon != 0) {
      #line 908 
      vif_priv->dtim_period = bss_conf->dtim_period;
      #line 909 
      vif_priv->bss_index = (unsigned char)255U;
      #line 910 
      wcn36xx_smd_config_bss(wcn,vif,(struct ieee80211_sta *)0,(u8 *)(& vif->addr),(_Bool)0);
      #line 912 
      skb = ieee80211_beacon_get_tim(hw,vif,& tim_off,& tim_len);
      #line 914 
      if (skb == (struct sk_buff *)0) {
        #line 915 
        printk((char *)"\001");
        #line 916 
        goto out;
      }
      #line 918 
      wcn36xx_smd_send_beacon(wcn,vif,skb,(unsigned short)((int)tim_off),(unsigned short)0);
      #line 919 
      consume_skb(skb);
      #line 921 
      if (vif->type == (unsigned int)NL80211_IFTYPE_ADHOC || vif->type == (unsigned int)NL80211_IFTYPE_MESH_POINT) 
        #line 923 
        link_state = WCN36XX_HAL_LINK_IBSS_STATE; else 
                                                       #line 925 
                                                       link_state = WCN36XX_HAL_LINK_AP_STATE;
      #line 927 
      wcn36xx_smd_set_link_st(wcn,(u8 *)(& vif->addr),(u8 *)(& vif->addr),link_state);
    }
    else {
      #line 930 
      wcn36xx_smd_delete_bss(wcn,vif);
      #line 931 
      wcn36xx_smd_set_link_st(wcn,(u8 *)(& vif->addr),(u8 *)(& vif->addr),(enum wcn36xx_hal_link_state)WCN36XX_HAL_LINK_IDLE_STATE);
    }
  }
  #line 935 
  out: 
       #line 935 
  ;
  #line 937 
  cif_mutex_unlock_conf_mutex_of_wcn36xx(& wcn->conf_mutex);
  #line 938 
  return;
}

#line 941  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/wcn36xx/main.c"
static int wcn36xx_set_rts_threshold(struct ieee80211_hw *hw, u32 value)
{
  #line 943 
  struct wcn36xx *wcn = (struct wcn36xx *)hw->priv;
  #line 944 
  if ((wcn36xx_dbg_mask & 1024U) != 0U) 
                                        #line 944 
                                        printk((char *)"\001",value);
  #line 946 
  cif_mutex_lock_conf_mutex_of_wcn36xx(& wcn->conf_mutex);
  #line 947 
  wcn36xx_smd_update_cfg(wcn,11U,value);
  #line 948 
  cif_mutex_unlock_conf_mutex_of_wcn36xx(& wcn->conf_mutex);
  #line 950 
  return 0;
}

#line 953  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/wcn36xx/main.c"
static void wcn36xx_remove_interface(struct ieee80211_hw *hw, struct ieee80211_vif *vif)
{
  #line 956 
  struct wcn36xx *wcn = (struct wcn36xx *)hw->priv;
  #line 957 
  struct wcn36xx_vif *vif_priv = wcn36xx_vif_to_priv(vif);
  #line 958 
  if ((wcn36xx_dbg_mask & 1024U) != 0U) 
                                        #line 958 
                                        printk((char *)"\001",vif);
  #line 960 
  cif_mutex_lock_conf_mutex_of_wcn36xx(& wcn->conf_mutex);
  #line 962 
  list_del(& vif_priv->list);
  #line 963 
  wcn36xx_smd_delete_sta_self(wcn,(u8 *)(& vif->addr));
  #line 965 
  cif_mutex_unlock_conf_mutex_of_wcn36xx(& wcn->conf_mutex);
  #line 966 
  return;
}

#line 968  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/wcn36xx/main.c"
static int wcn36xx_add_interface(struct ieee80211_hw *hw, struct ieee80211_vif *vif)
{
  #line 971 
  struct wcn36xx *wcn = (struct wcn36xx *)hw->priv;
  #line 972 
  struct wcn36xx_vif *vif_priv = wcn36xx_vif_to_priv(vif);
  #line 974 
  if ((wcn36xx_dbg_mask & 1024U) != 0U) 
                                        #line 974 
                                        printk((char *)"\001",vif,(unsigned int)vif->type);
  #line 977 
  if ((unsigned int)vif->type + 4294967295U > 2U && vif->type != (unsigned int)NL80211_IFTYPE_MESH_POINT) {
    #line 981 
    printk((char *)"\001",(unsigned int)vif->type);
    #line 983 
    return -95;
  }
  #line 986 
  cif_mutex_lock_conf_mutex_of_wcn36xx(& wcn->conf_mutex);
  #line 988 
  vif_priv->bss_index = (unsigned char)255U;
  #line 989 
  INIT_LIST_HEAD(& vif_priv->sta_list);
  #line 990 
  list_add(& vif_priv->list,& wcn->vif_list);
  #line 991 
  wcn36xx_smd_add_sta_self(wcn,vif);
  #line 993 
  cif_mutex_unlock_conf_mutex_of_wcn36xx(& wcn->conf_mutex);
  #line 995 
  return 0;
}

#line 998  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/wcn36xx/main.c"
static int wcn36xx_sta_add(struct ieee80211_hw *hw, struct ieee80211_vif *vif, struct ieee80211_sta *sta)
{
  #line 1001 
  struct wcn36xx *wcn = (struct wcn36xx *)hw->priv;
  #line 1002 
  struct wcn36xx_vif *vif_priv = wcn36xx_vif_to_priv(vif);
  #line 1003 
  struct wcn36xx_sta *sta_priv = wcn36xx_sta_to_priv(sta);
  #line 1004 
  if ((wcn36xx_dbg_mask & 1024U) != 0U) 
                                        #line 1004 
                                        printk((char *)"\001",vif,(u8 *)(& sta->addr));
  #line 1007 
  cif_mutex_lock_conf_mutex_of_wcn36xx(& wcn->conf_mutex);
  #line 1009 
  spinlock_check(& sta_priv->ampdu_lock);
  {
    #line 1009 
    struct lock_class_key __key;
    #line 1009 
    __raw_spin_lock_init(& sta_priv->ampdu_lock.__anonCompField_spinlock_25.rlock,(char *)"&(&sta_priv->ampdu_lock)->rlock",& __key);
  }
  #line 1010 
  sta_priv->vif = vif_priv;
  #line 1011 
  list_add(& sta_priv->list,& vif_priv->sta_list);
  #line 1017 
  if (vif->type != (unsigned int)NL80211_IFTYPE_STATION) {
    #line 1018 
    wcn36xx_update_allowed_rates(sta,((wcn->hw)->conf.chandef.chan)->band);
    #line 1019 
    sta_priv->aid = sta->aid;
    #line 1020 
    wcn36xx_smd_config_sta(wcn,vif,sta);
  }
  #line 1023 
  cif_mutex_unlock_conf_mutex_of_wcn36xx(& wcn->conf_mutex);
  #line 1025 
  return 0;
}

#line 1028  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/wcn36xx/main.c"
static int wcn36xx_sta_remove(struct ieee80211_hw *hw, struct ieee80211_vif *vif, struct ieee80211_sta *sta)
{
  #line 1032 
  struct wcn36xx *wcn = (struct wcn36xx *)hw->priv;
  #line 1033 
  struct wcn36xx_sta *sta_priv = wcn36xx_sta_to_priv(sta);
  #line 1035 
  if ((wcn36xx_dbg_mask & 1024U) != 0U) 
                                        #line 1035 
                                        printk((char *)"\001",vif,(u8 *)(& sta->addr),(int)sta_priv->sta_index);
  #line 1038 
  cif_mutex_lock_conf_mutex_of_wcn36xx(& wcn->conf_mutex);
  #line 1040 
  list_del(& sta_priv->list);
  #line 1041 
  wcn36xx_smd_delete_sta(wcn,(unsigned char)((int)sta_priv->sta_index));
  #line 1042 
  sta_priv->vif = (struct wcn36xx_vif *)0;
  #line 1044 
  cif_mutex_unlock_conf_mutex_of_wcn36xx(& wcn->conf_mutex);
  #line 1046 
  return 0;
}

#line 1051  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/wcn36xx/main.c"
static int wcn36xx_suspend(struct ieee80211_hw *hw, struct cfg80211_wowlan *wow)
{
  #line 1053 
  struct wcn36xx *wcn = (struct wcn36xx *)hw->priv;
  #line 1055 
  if ((wcn36xx_dbg_mask & 1024U) != 0U) 
                                        #line 1055 
                                        printk((char *)"\001");
  #line 1057 
  flush_workqueue(wcn->hal_ind_wq);
  #line 1058 
  wcn36xx_smd_set_power_params(wcn,(_Bool)1);
  #line 1059 
  return 0;
}

#line 1062  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/wcn36xx/main.c"
static int wcn36xx_resume(struct ieee80211_hw *hw)
{
  #line 1064 
  struct wcn36xx *wcn = (struct wcn36xx *)hw->priv;
  #line 1066 
  if ((wcn36xx_dbg_mask & 1024U) != 0U) 
                                        #line 1066 
                                        printk((char *)"\001");
  #line 1068 
  flush_workqueue(wcn->hal_ind_wq);
  #line 1069 
  wcn36xx_smd_set_power_params(wcn,(_Bool)0);
  #line 1070 
  return 0;
}

#line 1075  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/wcn36xx/main.c"
static int wcn36xx_ampdu_action(struct ieee80211_hw *hw, struct ieee80211_vif *vif, struct ieee80211_ampdu_params *params)
{
  #line 1079 
  struct wcn36xx *wcn = (struct wcn36xx *)hw->priv;
  #line 1080 
  struct wcn36xx_sta *sta_priv = wcn36xx_sta_to_priv(params->sta);
  #line 1081 
  struct ieee80211_sta *sta = params->sta;
  #line 1082 
  enum ieee80211_ampdu_mlme_action action = params->action;
  #line 1083 
  u16 tid = params->tid;
  #line 1084 
  u16 *ssn = & params->ssn;
  #line 1085 
  int ret = 0;
  #line 1087 
  if ((wcn36xx_dbg_mask & 1024U) != 0U) 
                                        #line 1087 
                                        printk((char *)"\001",(unsigned int)action,(int)tid);
  #line 1090 
  cif_mutex_lock_conf_mutex_of_wcn36xx(& wcn->conf_mutex);
  #line 1092 
  switch ((unsigned int)action) {
    #line 1093 
    case (unsigned int)0: 
                          #line 1093 
    ;
    #line 1094 
    sta_priv->tid = tid;
    #line 1095 
    ;
    #line 1095 
    ;
    #line 1095 
    ;
    #line 1095 
    ;
    #line 1095 
    wcn36xx_smd_add_ba_session(wcn,sta,(unsigned short)((int)tid),ssn,(unsigned char)0,(unsigned char)((int)get_sta_index(vif,sta_priv)));
    #line 1097 
    wcn36xx_smd_add_ba(wcn);
    #line 1098 
    ;
    #line 1098 
    wcn36xx_smd_trigger_ba(wcn,(unsigned char)((int)get_sta_index(vif,sta_priv)));
    #line 1099 
    break;
    #line 1100 
    case (unsigned int)1: 
                          #line 1100 
    ;
    #line 1101 
    ;
    #line 1101 
    ;
    #line 1101 
    wcn36xx_smd_del_ba(wcn,(unsigned short)((int)tid),(unsigned char)((int)get_sta_index(vif,sta_priv)));
    #line 1102 
    break;
    #line 1103 
    case (unsigned int)2: 
                          #line 1103 
    ;
    #line 1104 
    cif_spin_lock_bh_ampdu_lock_of_wcn36xx_sta(& sta_priv->ampdu_lock);
    #line 1105 
    sta_priv->ampdu_state[(int)tid] = WCN36XX_AMPDU_START;
    #line 1106 
    cif_spin_unlock_bh_ampdu_lock_of_wcn36xx_sta(& sta_priv->ampdu_lock);
    #line 1108 
    ret = 1;
    #line 1109 
    break;
    #line 1110 
    case (unsigned int)6: 
                          #line 1110 
    ;
    #line 1111 
    cif_spin_lock_bh_ampdu_lock_of_wcn36xx_sta(& sta_priv->ampdu_lock);
    #line 1112 
    sta_priv->ampdu_state[(int)tid] = WCN36XX_AMPDU_OPERATIONAL;
    #line 1113 
    cif_spin_unlock_bh_ampdu_lock_of_wcn36xx_sta(& sta_priv->ampdu_lock);
    #line 1115 
    ;
    #line 1115 
    ;
    #line 1115 
    ;
    #line 1115 
    ;
    #line 1115 
    wcn36xx_smd_add_ba_session(wcn,sta,(unsigned short)((int)tid),ssn,(unsigned char)1,(unsigned char)((int)get_sta_index(vif,sta_priv)));
    #line 1117 
    break;
    #line 1118 
    case (unsigned int)4: 
                          #line 1118 
    ;
    #line 1119 
    case (unsigned int)5: 
                          #line 1119 
    ;
    #line 1120 
    case (unsigned int)3: 
                          #line 1120 
    ;
    #line 1121 
    cif_spin_lock_bh_ampdu_lock_of_wcn36xx_sta(& sta_priv->ampdu_lock);
    #line 1122 
    sta_priv->ampdu_state[(int)tid] = WCN36XX_AMPDU_NONE;
    #line 1123 
    cif_spin_unlock_bh_ampdu_lock_of_wcn36xx_sta(& sta_priv->ampdu_lock);
    #line 1125 
    ieee80211_stop_tx_ba_cb_irqsafe(vif,(u8 *)(& sta->addr),(unsigned short)((int)tid));
    #line 1126 
    break;
    #line 1127 
    default: 
             #line 1127 
    ;
    #line 1128 
    printk((char *)"\001");
  }
  #line 1131 
  cif_mutex_unlock_conf_mutex_of_wcn36xx(& wcn->conf_mutex);
  #line 1133 
  return ret;
}

#line 1136  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/wcn36xx/main.c"
static struct ieee80211_ops wcn36xx_ops = {.tx = & wcn36xx_tx, .start = & wcn36xx_start, .stop = & wcn36xx_stop, .suspend = & wcn36xx_suspend, .resume = & wcn36xx_resume, .add_interface = & wcn36xx_add_interface, .remove_interface = & wcn36xx_remove_interface, .config = & wcn36xx_config, .bss_info_changed = & wcn36xx_bss_info_changed, .prepare_multicast = & wcn36xx_prepare_multicast, .configure_filter = & wcn36xx_configure_filter, .set_key = & wcn36xx_set_key, .hw_scan = & wcn36xx_hw_scan, .cancel_hw_scan = & wcn36xx_cancel_hw_scan, .set_rts_threshold = & wcn36xx_set_rts_threshold, .sta_add = & wcn36xx_sta_add, .sta_remove = & wcn36xx_sta_remove, .ampdu_action = & wcn36xx_ampdu_action, .testmode_cmd = & wcn36xx_tm_cmd};
#line 1161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/wcn36xx/main.c"
static int wcn36xx_init_ieee80211(struct wcn36xx *wcn)
{
  #line 1163 
  u32 cipher_suites[4U] = {1027073U, 1027077U, 1027074U, 1027076U};
  #line 1170 
  _ieee80211_hw_set(wcn->hw,(enum ieee80211_hw_flags)IEEE80211_HW_TIMING_BEACON_ONLY);
  #line 1171 
  _ieee80211_hw_set(wcn->hw,(enum ieee80211_hw_flags)IEEE80211_HW_AMPDU_AGGREGATION);
  #line 1172 
  _ieee80211_hw_set(wcn->hw,(enum ieee80211_hw_flags)IEEE80211_HW_CONNECTION_MONITOR);
  #line 1173 
  _ieee80211_hw_set(wcn->hw,(enum ieee80211_hw_flags)IEEE80211_HW_SUPPORTS_PS);
  #line 1174 
  _ieee80211_hw_set(wcn->hw,(enum ieee80211_hw_flags)IEEE80211_HW_SIGNAL_DBM);
  #line 1175 
  _ieee80211_hw_set(wcn->hw,(enum ieee80211_hw_flags)IEEE80211_HW_HAS_RATE_CONTROL);
  #line 1176 
  _ieee80211_hw_set(wcn->hw,(enum ieee80211_hw_flags)IEEE80211_HW_SINGLE_SCAN_ON_ALL_BANDS);
  #line 1178 
  ((wcn->hw)->wiphy)->interface_modes = (unsigned short)142U;
  #line 1183 
  ((wcn->hw)->wiphy)->bands[0] = & wcn_band_2ghz;
  #line 1184 
  if (wcn->rf_id != 13856U) 
                            #line 1185 
                            ((wcn->hw)->wiphy)->bands[1] = & wcn_band_5ghz;
  #line 1187 
  ((wcn->hw)->wiphy)->max_scan_ssids = (unsigned char)9U;
  #line 1188 
  ((wcn->hw)->wiphy)->max_scan_ie_len = (unsigned short)500U;
  #line 1190 
  ((wcn->hw)->wiphy)->cipher_suites = (u32 *)(& cipher_suites);
  #line 1191 
  ((wcn->hw)->wiphy)->n_cipher_suites = 4;
  #line 1194 
  ((wcn->hw)->wiphy)->wowlan = & wowlan_support;
  #line 1197 
  (wcn->hw)->max_listen_interval = (unsigned short)200U;
  #line 1199 
  (wcn->hw)->queues = (unsigned short)4U;
  #line 1201 
  SET_IEEE80211_DEV(wcn->hw,wcn->dev);
  #line 1203 
  (wcn->hw)->sta_data_size = 240;
  #line 1204 
  (wcn->hw)->vif_data_size = 88;
  #line 1206 
  wiphy_ext_feature_set((wcn->hw)->wiphy,(enum nl80211_ext_feature_index)NL80211_EXT_FEATURE_CQM_RSSI_LIST);
  #line 1209 
  return 0;
}

#line 1212  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/wcn36xx/main.c"
static int wcn36xx_platform_get_resources(struct wcn36xx *wcn, struct platform_device *pdev)
{
  #line 1215 
  struct device_node *mmio_node;
  #line 1216 
  struct device_node *iris_node;
  #line 1217 
  struct resource *res;
  #line 1218 
  int index;
  #line 1219 
  int ret;
  #line 1222 
  res = platform_get_resource_byname(pdev,1024U,(char *)"tx");
  #line 1223 
  if (res == (struct resource *)0) {
    #line 1224 
    printk((char *)"\001");
    #line 1225 
    return -2;
  }
  #line 1227 
  wcn->tx_irq = (int)res->start;
  #line 1230 
  res = platform_get_resource_byname(pdev,1024U,(char *)"rx");
  #line 1231 
  if (res == (struct resource *)0) {
    #line 1232 
    printk((char *)"\001");
    #line 1233 
    return -2;
  }
  #line 1235 
  wcn->rx_irq = (int)res->start;
  #line 1238 
  wcn->tx_enable_state = qcom_smem_state_get(& pdev->dev,(char *)"tx-enable",& wcn->tx_enable_state_bit);
  #line 1240 
  if ((int)IS_ERR((void *)wcn->tx_enable_state) != 0) {
    #line 1241 
    printk((char *)"\001");
    #line 1242 
    return (int)PTR_ERR((void *)wcn->tx_enable_state);
  }
  #line 1246 
  wcn->tx_rings_empty_state = qcom_smem_state_get(& pdev->dev,(char *)"tx-rings-empty",& wcn->tx_rings_empty_state_bit);
  #line 1248 
  if ((int)IS_ERR((void *)wcn->tx_rings_empty_state) != 0) {
    #line 1249 
    printk((char *)"\001");
    #line 1250 
    return (int)PTR_ERR((void *)wcn->tx_rings_empty_state);
  }
  #line 1253 
  mmio_node = of_parse_phandle((pdev->dev.parent)->of_node,(char *)"qcom,mmio",0);
  #line 1254 
  if (mmio_node == (struct device_node *)0) {
    #line 1255 
    printk((char *)"\001");
    #line 1256 
    return -22;
  }
  #line 1259 
  wcn->is_pronto = (_Bool)(of_device_is_compatible(mmio_node,(char *)"qcom,pronto") != 0);
  #line 1262 
  index = of_property_match_string(mmio_node,(char *)"reg-names",(char *)"ccu");
  #line 1263 
  wcn->ccu_base = of_iomap(mmio_node,index);
  #line 1264 
  if (wcn->ccu_base == (void *)0) {
    #line 1265 
    printk((char *)"\001");
    #line 1266 
    ret = -12;
    #line 1267 
    goto put_mmio_node;
  }
  #line 1271 
  index = of_property_match_string(mmio_node,(char *)"reg-names",(char *)"dxe");
  #line 1272 
  wcn->dxe_base = of_iomap(mmio_node,index);
  #line 1273 
  if (wcn->dxe_base == (void *)0) {
    #line 1274 
    printk((char *)"\001");
    #line 1275 
    ret = -12;
    #line 1276 
    goto unmap_ccu;
  }
  #line 1280 
  iris_node = of_get_child_by_name(mmio_node,(char *)"iris");
  #line 1281 
  if (iris_node != (struct device_node *)0) {
    #line 1282 
    if (of_device_is_compatible(iris_node,(char *)"qcom,wcn3620") != 0) 
      #line 1283 
      wcn->rf_id = 13856U;
    #line 1284 
    of_node_put(iris_node);
  }
  #line 1287 
  of_node_put(mmio_node);
  #line 1288 
  return 0;
  #line 1290 
  unmap_ccu: 
             #line 1290 
  ;
  #line 1291 
  iounmap(wcn->ccu_base);
  #line 1292 
  put_mmio_node: 
                 #line 1292 
  ;
  #line 1293 
  of_node_put(mmio_node);
  #line 1294 
  return ret;
}

#line 1297  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/wcn36xx/main.c"
static int wcn36xx_probe(struct platform_device *pdev)
{
  #line 1299 
  struct ieee80211_hw *hw;
  #line 1300 
  struct wcn36xx *wcn;
  #line 1301 
  void *wcnss;
  #line 1302 
  int ret;
  #line 1303 
  u8 *addr;
  #line 1305 
  if ((wcn36xx_dbg_mask & 1024U) != 0U) 
                                        #line 1305 
                                        printk((char *)"\001");
  #line 1307 
  wcnss = dev_get_drvdata(pdev->dev.parent);
  #line 1309 
  hw = cif_ieee80211_alloc_hw(1888UL,& wcn36xx_ops);
  #line 1310 
  if (hw == (struct ieee80211_hw *)0) {
    #line 1311 
    printk((char *)"\001");
    #line 1312 
    ret = -12;
    #line 1313 
    goto out_err;
  }
  #line 1315 
  platform_set_drvdata(pdev,(void *)hw);
  #line 1316 
  wcn = (struct wcn36xx *)hw->priv;
  #line 1317 
  wcn->hw = hw;
  #line 1318 
  wcn->dev = & pdev->dev;
  #line 1319 
  wcn->first_boot = (_Bool)1;
  {
    #line 1320 
    struct lock_class_key __key;
    #line 1320 
    __mutex_init(& wcn->conf_mutex,(char *)"&wcn->conf_mutex",& __key);
  }
  {
    #line 1321 
    struct lock_class_key __key_0;
    #line 1321 
    __mutex_init(& wcn->hal_mutex,(char *)"&wcn->hal_mutex",& __key_0);
  }
  {
    #line 1322 
    struct lock_class_key __key_1;
    #line 1322 
    __mutex_init(& wcn->scan_lock,(char *)"&wcn->scan_lock",& __key_1);
  }
  #line 1324 
  ret = dma_set_mask_and_coherent(wcn->dev,4294967295ULL);
  #line 1325 
  if (ret < 0) {
    #line 1326 
    printk((char *)"\001",ret);
    #line 1327 
    goto out_wq;
  }
  {
    #line 1330 
    struct lock_class_key __key_2;
    #line 1330 
    __init_work(& wcn->scan_work,0);
    #line 1330 
    atomic_long_t __constr_expr_41 = {.counter = 137438953408LL};
    #line 1330 
    wcn->scan_work.data = __constr_expr_41;
    #line 1330 
    lockdep_init_map(& wcn->scan_work.lockdep_map,(char *)"(work_completion)",& __key_2,0);
    #line 1330 
    INIT_LIST_HEAD(& wcn->scan_work.entry);
    #line 1330 
    wcn->scan_work.func = & wcn36xx_hw_scan_worker;
  }
  #line 1332 
  wcn->smd_channel = qcom_wcnss_open_channel(wcnss,(char *)"WLAN_CTRL",& wcn36xx_smd_rsp_process,(void *)hw);
  #line 1333 
  if ((int)IS_ERR((void *)wcn->smd_channel) != 0) {
    #line 1334 
    printk((char *)"\001");
    #line 1335 
    ret = (int)PTR_ERR((void *)wcn->smd_channel);
    #line 1336 
    goto out_wq;
  }
  #line 1339 
  addr = (u8 *)of_get_property(pdev->dev.of_node,(char *)"local-mac-address",& ret);
  #line 1340 
  if (addr != (u8 *)0U && ret != 6) {
    #line 1341 
    printk((char *)"\001");
    #line 1342 
    ret = -22;
    #line 1343 
    goto out_wq;
  }
  else 
    #line 1344 
    if (addr != (u8 *)0U) {
      #line 1345 
      printk((char *)"\001",addr);
      #line 1346 
      SET_IEEE80211_PERM_ADDR(wcn->hw,addr);
    }
  #line 1349 
  ret = wcn36xx_platform_get_resources(wcn,pdev);
  #line 1350 
  if (ret != 0) 
                #line 1351 
                goto out_wq;
  #line 1353 
  wcn36xx_init_ieee80211(wcn);
  #line 1354 
  ret = ieee80211_register_hw(wcn->hw);
  #line 1355 
  if (ret != 0) 
                #line 1356 
                goto out_unmap;
  #line 1358 
  return 0;
  #line 1360 
  out_unmap: 
             #line 1360 
  ;
  #line 1361 
  iounmap(wcn->ccu_base);
  #line 1362 
  iounmap(wcn->dxe_base);
  #line 1363 
  out_wq: 
          #line 1363 
  ;
  #line 1364 
  cif_ieee80211_free_hw(hw);
  #line 1365 
  out_err: 
           #line 1365 
  ;
  #line 1366 
  return ret;
}

#line 1369  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/wcn36xx/main.c"
static int wcn36xx_remove(struct platform_device *pdev)
{
  #line 1371 
  struct ieee80211_hw *hw = platform_get_drvdata(pdev);
  #line 1372 
  struct wcn36xx *wcn = (struct wcn36xx *)hw->priv;
  #line 1373 
  if ((wcn36xx_dbg_mask & 1024U) != 0U) 
                                        #line 1373 
                                        printk((char *)"\001");
  #line 1375 
  cif_release_firmware(wcn->nv);
  #line 1377 
  ieee80211_unregister_hw(hw);
  #line 1379 
  qcom_smem_state_put(wcn->tx_enable_state);
  #line 1380 
  qcom_smem_state_put(wcn->tx_rings_empty_state);
  #line 1382 
  rpmsg_destroy_ept(wcn->smd_channel);
  #line 1384 
  iounmap(wcn->dxe_base);
  #line 1385 
  iounmap(wcn->ccu_base);
  #line 1387 
  mutex_destroy(& wcn->hal_mutex);
  #line 1388 
  cif_ieee80211_free_hw(hw);
  #line 1390 
  return 0;
}

#line 1393  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/wcn36xx/main.c"
static struct of_device_id wcn36xx_of_match[2U] = {{.compatible = {(char)'q', (char)'c', (char)'o', (char)'m', (char)',', (char)'w', (char)'c', (char)'n', (char)'s', (char)'s', (char)'-', (char)'w', (char)'l', (char)'a', (char)'n'}}};
#line 1397  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/wcn36xx/main.c"
struct of_device_id __mod_of__wcn36xx_of_match_device_table[2U];
#line 1399  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/wcn36xx/main.c"
static struct platform_driver wcn36xx_driver = {.probe = & wcn36xx_probe, .remove = & wcn36xx_remove, .driver = {.name = (char *)"wcn36xx", .of_match_table = (struct of_device_id *)(& wcn36xx_of_match)}};
#line 1408  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/wcn36xx/main.c"
static int wcn36xx_driver_init(void)
{
  #line 1408 
  return cif___platform_driver_register(& wcn36xx_driver,& __this_module);
}

#line 1408  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/wcn36xx/main.c"
static void wcn36xx_driver_exit(void)
{
  #line 1408 
  cif_platform_driver_unregister(& wcn36xx_driver);
  #line 1409 
  return;
}

#line 93  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/wcn36xx/wcn36xx.ko/concurrency safety/0/concurrency safety/weaver/main.i.aux"
struct platform_driver *emg_alias_wcn36xx_driver = & wcn36xx_driver;
#line 94  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/wcn36xx/wcn36xx.ko/concurrency safety/0/concurrency safety/weaver/main.i.aux"
struct ieee80211_ops *emg_alias_wcn36xx_ops = & wcn36xx_ops;
#line 97 
#line 97 
int emg___platform_driver_register(struct platform_driver *arg0, struct module *arg1);
#line 101 
#line 101 
struct ieee80211_hw *emg_ieee80211_alloc_hw(unsigned long arg0, struct ieee80211_ops *arg1);
#line 102 
#line 102 
void emg_ieee80211_free_hw(struct ieee80211_hw *arg0);
#line 103 
#line 103 
void emg_platform_driver_unregister(struct platform_driver *arg0);
#line 106 
#line 106 
_Bool emg_schedule_work(struct work_struct *arg0);
#line 110  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/wcn36xx/wcn36xx.ko/concurrency safety/0/concurrency safety/weaver/main.i.aux"
int emg_wrapper_wcn36xx_add_interface(struct ieee80211_hw *arg0, struct ieee80211_vif *arg1)
{
  #line 111 
  return wcn36xx_add_interface(arg0,arg1);
}

#line 115  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/wcn36xx/wcn36xx.ko/concurrency safety/0/concurrency safety/weaver/main.i.aux"
int emg_wrapper_wcn36xx_ampdu_action(struct ieee80211_hw *arg0, struct ieee80211_vif *arg1, struct ieee80211_ampdu_params *arg2)
{
  #line 116 
  return wcn36xx_ampdu_action(arg0,arg1,arg2);
}

#line 120  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/wcn36xx/wcn36xx.ko/concurrency safety/0/concurrency safety/weaver/main.i.aux"
void emg_wrapper_wcn36xx_bss_info_changed(struct ieee80211_hw *arg0, struct ieee80211_vif *arg1, struct ieee80211_bss_conf *arg2, unsigned int arg3)
{
  #line 121 
  wcn36xx_bss_info_changed(arg0,arg1,arg2,arg3);
  #line 122 
  return;
}

#line 125  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/wcn36xx/wcn36xx.ko/concurrency safety/0/concurrency safety/weaver/main.i.aux"
void emg_wrapper_wcn36xx_cancel_hw_scan(struct ieee80211_hw *arg0, struct ieee80211_vif *arg1)
{
  #line 126 
  wcn36xx_cancel_hw_scan(arg0,arg1);
  #line 127 
  return;
}

#line 130  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/wcn36xx/wcn36xx.ko/concurrency safety/0/concurrency safety/weaver/main.i.aux"
int emg_wrapper_wcn36xx_config(struct ieee80211_hw *arg0, unsigned int arg1)
{
  #line 131 
  return wcn36xx_config(arg0,arg1);
}

#line 135  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/wcn36xx/wcn36xx.ko/concurrency safety/0/concurrency safety/weaver/main.i.aux"
void emg_wrapper_wcn36xx_configure_filter(struct ieee80211_hw *arg0, unsigned int arg1, unsigned int *arg2, unsigned long long arg3)
{
  #line 136 
  wcn36xx_configure_filter(arg0,arg1,arg2,arg3);
  #line 137 
  return;
}

#line 140  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/wcn36xx/wcn36xx.ko/concurrency safety/0/concurrency safety/weaver/main.i.aux"
int emg_wrapper_wcn36xx_hw_scan(struct ieee80211_hw *arg0, struct ieee80211_vif *arg1, struct ieee80211_scan_request *arg2)
{
  #line 141 
  return wcn36xx_hw_scan(arg0,arg1,arg2);
}

#line 145  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/wcn36xx/wcn36xx.ko/concurrency safety/0/concurrency safety/weaver/main.i.aux"
unsigned long long emg_wrapper_wcn36xx_prepare_multicast(struct ieee80211_hw *arg0, struct netdev_hw_addr_list *arg1)
{
  #line 146 
  return wcn36xx_prepare_multicast(arg0,arg1);
}

#line 150  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/wcn36xx/wcn36xx.ko/concurrency safety/0/concurrency safety/weaver/main.i.aux"
int emg_wrapper_wcn36xx_probe(struct platform_device *arg0)
{
  #line 151 
  return wcn36xx_probe(arg0);
}

#line 155  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/wcn36xx/wcn36xx.ko/concurrency safety/0/concurrency safety/weaver/main.i.aux"
int emg_wrapper_wcn36xx_remove(struct platform_device *arg0)
{
  #line 156 
  return wcn36xx_remove(arg0);
}

#line 160  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/wcn36xx/wcn36xx.ko/concurrency safety/0/concurrency safety/weaver/main.i.aux"
void emg_wrapper_wcn36xx_remove_interface(struct ieee80211_hw *arg0, struct ieee80211_vif *arg1)
{
  #line 161 
  wcn36xx_remove_interface(arg0,arg1);
  #line 162 
  return;
}

#line 165  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/wcn36xx/wcn36xx.ko/concurrency safety/0/concurrency safety/weaver/main.i.aux"
int emg_wrapper_wcn36xx_resume(struct ieee80211_hw *arg0)
{
  #line 166 
  return wcn36xx_resume(arg0);
}

#line 170  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/wcn36xx/wcn36xx.ko/concurrency safety/0/concurrency safety/weaver/main.i.aux"
int emg_wrapper_wcn36xx_set_key(struct ieee80211_hw *arg0, enum set_key_cmd arg1, struct ieee80211_vif *arg2, struct ieee80211_sta *arg3, struct ieee80211_key_conf *arg4)
{
  #line 171 
  return wcn36xx_set_key(arg0,arg1,arg2,arg3,arg4);
}

#line 175  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/wcn36xx/wcn36xx.ko/concurrency safety/0/concurrency safety/weaver/main.i.aux"
int emg_wrapper_wcn36xx_set_rts_threshold(struct ieee80211_hw *arg0, unsigned int arg1)
{
  #line 176 
  return wcn36xx_set_rts_threshold(arg0,arg1);
}

#line 180  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/wcn36xx/wcn36xx.ko/concurrency safety/0/concurrency safety/weaver/main.i.aux"
int emg_wrapper_wcn36xx_sta_add(struct ieee80211_hw *arg0, struct ieee80211_vif *arg1, struct ieee80211_sta *arg2)
{
  #line 181 
  return wcn36xx_sta_add(arg0,arg1,arg2);
}

#line 185  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/wcn36xx/wcn36xx.ko/concurrency safety/0/concurrency safety/weaver/main.i.aux"
int emg_wrapper_wcn36xx_sta_remove(struct ieee80211_hw *arg0, struct ieee80211_vif *arg1, struct ieee80211_sta *arg2)
{
  #line 186 
  return wcn36xx_sta_remove(arg0,arg1,arg2);
}

#line 190  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/wcn36xx/wcn36xx.ko/concurrency safety/0/concurrency safety/weaver/main.i.aux"
int emg_wrapper_wcn36xx_start(struct ieee80211_hw *arg0)
{
  #line 191 
  return wcn36xx_start(arg0);
}

#line 195  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/wcn36xx/wcn36xx.ko/concurrency safety/0/concurrency safety/weaver/main.i.aux"
void emg_wrapper_wcn36xx_stop(struct ieee80211_hw *arg0)
{
  #line 196 
  wcn36xx_stop(arg0);
  #line 197 
  return;
}

#line 200  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/wcn36xx/wcn36xx.ko/concurrency safety/0/concurrency safety/weaver/main.i.aux"
int emg_wrapper_wcn36xx_suspend(struct ieee80211_hw *arg0, struct cfg80211_wowlan *arg1)
{
  #line 201 
  return wcn36xx_suspend(arg0,arg1);
}

#line 205  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/wcn36xx/wcn36xx.ko/concurrency safety/0/concurrency safety/weaver/main.i.aux"
void emg_wrapper_wcn36xx_tx(struct ieee80211_hw *arg0, struct ieee80211_tx_control *arg1, struct sk_buff *arg2)
{
  #line 206 
  wcn36xx_tx(arg0,arg1,arg2);
  #line 207 
  return;
}

#line 210  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/wcn36xx/wcn36xx.ko/concurrency safety/0/concurrency safety/weaver/main.i.aux"
void emg_wcn36xx_driver_exit(void)
{
  #line 211 
  wcn36xx_driver_exit();
  #line 212 
  return;
}

#line 214  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/wcn36xx/wcn36xx.ko/concurrency safety/0/concurrency safety/weaver/main.i.aux"
int emg_wcn36xx_driver_init(void)
{
  #line 215 
  return wcn36xx_driver_init();
}

#line 247  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/wcn36xx/wcn36xx.ko/concurrency safety/0/concurrency safety/weaver/main.i.aux"
static void INIT_LIST_HEAD(struct list_head *list)
{
  #line 250 
  ldv_init_list_head(list);
  #line 251 
  return;
}

#line 324  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/wcn36xx/wcn36xx.ko/concurrency safety/0/concurrency safety/weaver/main.i.aux"
static long PTR_ERR(void *ptr)
{
  #line 327 
  return ldv_ptr_err(ptr);
}

#line 331  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/wcn36xx/wcn36xx.ko/concurrency safety/0/concurrency safety/weaver/main.i.aux"
static bool IS_ERR(void *ptr)
{
  #line 334 
  return ldv_is_err(ptr);
}

#line 570  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/wcn36xx/wcn36xx.ko/concurrency safety/0/concurrency safety/weaver/main.i.aux"
static void *kmalloc(size_t size, gfp_t flags)
{
  #line 573 
  return ldv_kmalloc(size,flags);
}

#line 605  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/wcn36xx/wcn36xx.ko/concurrency safety/0/concurrency safety/weaver/main.i.aux"
static void *kzalloc(size_t size, gfp_t flags)
{
  #line 608 
  return ldv_kzalloc(size,flags);
}

#line 785  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/wcn36xx/wcn36xx.ko/concurrency safety/0/concurrency safety/weaver/main.i.aux"
static bool cif_schedule_work(struct work_struct *work)
{
  #line 789 
  return emg_schedule_work(work);
}

#line 927  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/wcn36xx/wcn36xx.ko/concurrency safety/0/concurrency safety/weaver/main.i.aux"
static void cif_mutex_lock_scan_lock_of_wcn36xx(struct mutex *lock)
{
  #line 930 
  ldv_mutex_model_lock(lock,(char *)"scan_lock_of_wcn36xx");
  #line 931 
  return;
}

#line 934  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/wcn36xx/wcn36xx.ko/concurrency safety/0/concurrency safety/weaver/main.i.aux"
static void cif_mutex_unlock_scan_lock_of_wcn36xx(struct mutex *lock)
{
  #line 937 
  ldv_mutex_model_unlock(lock,(char *)"scan_lock_of_wcn36xx");
  #line 938 
  return;
}

#line 941  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/wcn36xx/wcn36xx.ko/concurrency safety/0/concurrency safety/weaver/main.i.aux"
static void cif_mutex_lock_conf_mutex_of_wcn36xx(struct mutex *lock)
{
  #line 944 
  ldv_mutex_model_lock(lock,(char *)"conf_mutex_of_wcn36xx");
  #line 945 
  return;
}

#line 948  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/wcn36xx/wcn36xx.ko/concurrency safety/0/concurrency safety/weaver/main.i.aux"
static void cif_mutex_unlock_conf_mutex_of_wcn36xx(struct mutex *lock)
{
  #line 951 
  ldv_mutex_model_unlock(lock,(char *)"conf_mutex_of_wcn36xx");
  #line 952 
  return;
}

#line 955  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/wcn36xx/wcn36xx.ko/concurrency safety/0/concurrency safety/weaver/main.i.aux"
static void cif_spin_lock_bh_ampdu_lock_of_wcn36xx_sta(spinlock_t *lock)
{
  #line 958 
  ldv_spin_model_lock((char *)"ampdu_lock_of_wcn36xx_sta");
  #line 960 
  spin_lock_bh(lock);
  #line 961 
  return;
}

#line 964  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/wcn36xx/wcn36xx.ko/concurrency safety/0/concurrency safety/weaver/main.i.aux"
static void cif_spin_unlock_bh_ampdu_lock_of_wcn36xx_sta(spinlock_t *lock)
{
  #line 967 
  ldv_spin_model_unlock((char *)"ampdu_lock_of_wcn36xx_sta");
  #line 969 
  spin_unlock_bh(lock);
  #line 970 
  return;
}

#line 973  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/wcn36xx/wcn36xx.ko/concurrency safety/0/concurrency safety/weaver/main.i.aux"
static struct ieee80211_hw *cif_ieee80211_alloc_hw(size_t priv_data_len, struct ieee80211_ops *ops)
{
  #line 977 
  return emg_ieee80211_alloc_hw(priv_data_len,ops);
}

#line 981  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/wcn36xx/wcn36xx.ko/concurrency safety/0/concurrency safety/weaver/main.i.aux"
static void cif_ieee80211_free_hw(struct ieee80211_hw *hw)
{
  #line 985 
  emg_ieee80211_free_hw(hw);
  #line 986 
  return;
}

#line 989  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/wcn36xx/wcn36xx.ko/concurrency safety/0/concurrency safety/weaver/main.i.aux"
static void cif_release_firmware(struct firmware *fw)
{
  #line 992 
  ldv_release_firmware(fw);
  #line 993 
  return;
}

#line 996  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/wcn36xx/wcn36xx.ko/concurrency safety/0/concurrency safety/weaver/main.i.aux"
static int cif___platform_driver_register(struct platform_driver *ldv_func_arg1, struct module *ldv_func_arg2)
{
  #line 1000 
  return emg___platform_driver_register(ldv_func_arg1,ldv_func_arg2);
}

#line 1004  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/wcn36xx/wcn36xx.ko/concurrency safety/0/concurrency safety/weaver/main.i.aux"
static void cif_platform_driver_unregister(struct platform_driver *ldv_func_arg1)
{
  #line 1008 
  emg_platform_driver_unregister(ldv_func_arg1);
  #line 1009 
  return;
}

/* compiler builtin: 
   void __builtin_unreachable(void);   */
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/compiler.h"
__inline static void __read_once_size(void *p, void *res, int size)
{
  #line 199 
  switch (size) {
    #line 199 
    case 1: 
            #line 199 
    ;
    #line 199 
    *((__u8 *)res) = *((__u8 *)p);
    #line 199 
    break;
    #line 199 
    case 2: 
            #line 199 
    ;
    #line 199 
    *((__u16 *)res) = *((__u16 *)p);
    #line 199 
    break;
    #line 199 
    case 4: 
            #line 199 
    ;
    #line 199 
    *((__u32 *)res) = *((__u32 *)p);
    #line 199 
    break;
    #line 199 
    case 8: 
            #line 199 
    ;
    #line 199 
    *((__u64 *)res) = *((__u64 *)p);
    #line 199 
    break;
    #line 199 
    default: 
             #line 199 
    ;
    #line 200 
    ldv_inline_asm();
    #line 199 
    __builtin_memcpy(res,(void const *)p,(unsigned long)size);
    #line 200 
    ldv_inline_asm();
  }
  #line 203 
  return;
}

#line 89  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bug.h"
#line 89 
void __warn_printk(char * , ...);
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/page_64.h"
#line 15 
extern unsigned long vmalloc_base;
#line 16 
#line 16 
extern unsigned long vmemmap_base;
#line 29 
#line 29 
unsigned long __phys_addr(unsigned long);
#line 173  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/cpufeature.h"
__inline static bool _static_cpu_has(u16 bit)
{
  #line 177 
  ldv_inline_asm();
  #line 178 
  ldv_inline_asm();
  #line 211 
  t_yes: 
         #line 211 
  ;
  #line 212 
  return (_Bool)1;
  #line 213 
  t_no: 
        #line 213 
  ;
  #line 214 
  return (_Bool)0;
}

#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_api_smp.h"
#line 22 
void _raw_spin_lock(raw_spinlock_t *);
#line 39 
#line 39 
void _raw_spin_unlock(raw_spinlock_t *);
#line 43 
#line 43 
void _raw_spin_unlock_irqrestore(raw_spinlock_t *, unsigned long);
#line 336  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static void spin_lock(spinlock_t *lock)
{
  #line 338 
  _raw_spin_lock(& lock->__anonCompField_spinlock_25.rlock);
  #line 339 
  return;
}

#line 340 
#line 868  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/wcn36xx/wcn36xx.ko/concurrency safety/0/concurrency safety/weaver/dxe.i.aux"
static void cif_spin_lock_lock_of_wcn36xx_dxe_ch(spinlock_t *lock);
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static void spin_unlock(spinlock_t *lock)
{
  #line 378 
  _raw_spin_unlock(& lock->__anonCompField_spinlock_25.rlock);
  #line 379 
  return;
}

#line 380 
#line 877  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/wcn36xx/wcn36xx.ko/concurrency safety/0/concurrency safety/weaver/dxe.i.aux"
static void cif_spin_unlock_lock_of_wcn36xx_dxe_ch(spinlock_t *lock);
#line 391  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static void spin_unlock_irqrestore(spinlock_t *lock, unsigned long flags)
{
  {
    #line 393 
    unsigned long __dummy;
    #line 393 
    unsigned long __dummy2;
    }
  #line 393 
  _raw_spin_unlock_irqrestore(& lock->__anonCompField_spinlock_25.rlock,flags);
  #line 395 
  return;
}

#line 395 
#line 825  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/wcn36xx/wcn36xx.ko/concurrency safety/0/concurrency safety/weaver/dxe.i.aux"
static void cif_spin_unlock_irqrestore_dxe_lock_of_wcn36xx(spinlock_t *lock, unsigned long flags);
#line 395  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
#line 843  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/wcn36xx/wcn36xx.ko/concurrency safety/0/concurrency safety/weaver/dxe.i.aux"
static void cif_spin_unlock_irqrestore_lock_of_wcn36xx_dxe_ch(spinlock_t *lock, unsigned long flags);
#line 33 
#line 33 
void __ldv_spin_lock(spinlock_t *);
#line 35 
#line 816 
static void cif___ldv_spin_lock_dxe_lock_of_wcn36xx(spinlock_t *lock);
#line 35 
#line 834 
static void cif___ldv_spin_lock_lock_of_wcn36xx_dxe_ch(spinlock_t *lock);
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/io.h"
__inline static unsigned int readl(void *addr)
{
  #line 59 
  unsigned int ret;
  #line 60 
  ldv_inline_asm();
  #line 59 
  return ret;
}

#line 67  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/io.h"
__inline static void writel(unsigned int val, void *addr)
{
  #line 69 
  ldv_inline_asm();
  #line 70 
  return;
}

#line 162  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/interrupt.h"
#line 852  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/wcn36xx/wcn36xx.ko/concurrency safety/0/concurrency safety/weaver/dxe.i.aux"
static int cif_request_irq(unsigned int irq, irqreturn_t (*handler)(int , void *), unsigned long flags, char *name, void *dev);
#line 189  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/interrupt.h"
#line 860  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/wcn36xx/wcn36xx.ko/concurrency safety/0/concurrency safety/weaver/dxe.i.aux"
static void *cif_free_irq(unsigned int ldv_func_arg1, void *ldv_func_arg2);
#line 461  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/interrupt.h"
#line 461 
int irq_set_irq_wake(unsigned int, unsigned int);
#line 463  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/interrupt.h"
__inline static int enable_irq_wake(unsigned int irq)
{
  #line 465 
  return irq_set_irq_wake(irq,1U);
}

#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/soc/qcom/smem_state.h"
#line 19 
int qcom_smem_state_update_bits(struct qcom_smem_state *, u32, u32);
#line 628  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm.h"
__inline static bool is_vmalloc_addr(void *x)
{
  #line 633 
  int tmp_1;
  #line 631 
  unsigned long addr = (unsigned long)x;
  #line 633 
  if (addr >= vmalloc_base) {
    #line 633 
    unsigned long tmp_0;
    #line 633 
    if ((int)_static_cpu_has((unsigned short)528) != 0) 
                                                        #line 633 
                                                        tmp_0 = 14073748835532800UL; else 
                                                                    #line 633 
                                                                    tmp_0 = 35184372088832UL;
    #line 633 
    ;
    #line 633 
    if ((tmp_0 + vmalloc_base) + 18446744073709551615UL > addr) 
                                                                #line 633 
                                                                tmp_1 = 1; else 
                                                                    #line 633 
                                                                    tmp_1 = 0;
  }
  else 
       #line 633 
       tmp_1 = 0;
  #line 633 
  return (_Bool)(tmp_1 != 0);
}

#line 668  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/slab.h"
#line 437  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/wcn36xx/wcn36xx.ko/concurrency safety/0/concurrency safety/weaver/dxe.i.aux"
static void *kzalloc_0(size_t size, gfp_t flags);
#line 89  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject.h"
__inline static char *kobject_name(struct kobject *kobj)
{
  #line 91 
  return kobj->name;
}

#line 1370  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
__inline static char *dev_name(struct device *dev)
{
  #line 1373 
  if (dev->init_name != (char *)0) 
                                   #line 1374 
                                   return dev->init_name;
  #line 1376 
  return kobject_name(& dev->kobj);
}

#line 1680 
#line 1680 
char *dev_driver_string(struct device *);
#line 1712 
#line 1712 
void _dev_err(struct device *, char * , ...);
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-debug.h"
#line 21 
void debug_dma_map_single(struct device *, void *, unsigned long);
#line 24 
#line 24 
void debug_dma_map_page(struct device *, struct page *, size_t, size_t, int, dma_addr_t);
#line 28 
#line 28 
void debug_dma_mapping_error(struct device *, dma_addr_t);
#line 30 
#line 30 
void debug_dma_unmap_page(struct device *, dma_addr_t, size_t, int);
#line 143  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static int valid_dma_direction(int dma_direction)
{
  #line 146 
  return (unsigned int)dma_direction <= 2U;
}

#line 191  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static bool dma_is_direct(struct dma_map_ops *ops)
{
  #line 193 
  return (_Bool)((long)(ops == (struct dma_map_ops *)0) != 0L);
}

#line 200 
#line 200 
dma_addr_t dma_direct_map_page(struct device *, struct page *, unsigned long, size_t, enum dma_data_direction, unsigned long);
#line 228 
#line 228 
void dma_direct_unmap_page(struct device *, dma_addr_t, size_t, enum dma_data_direction, unsigned long);
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/dma-mapping.h"
#line 19 
extern struct dma_map_ops *dma_ops;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/dma-mapping.h"
__inline static struct dma_map_ops *get_arch_dma_ops(struct bus_type *bus)
{
  #line 23 
  return dma_ops;
}

#line 261  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static struct dma_map_ops *get_dma_ops(struct device *dev)
{
  #line 263 
  if (dev->dma_ops != (struct dma_map_ops *)0) 
                                               #line 264 
                                               return dev->dma_ops;
  #line 265 
  return get_arch_dma_ops(dev->bus);
}

#line 274  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static dma_addr_t dma_map_page_attrs(struct device *dev, struct page *page, size_t offset, size_t size, enum dma_data_direction dir, unsigned long attrs)
{
  #line 279 
  dma_addr_t addr;
  #line 278 
  struct dma_map_ops *ops = get_dma_ops(dev);
  #line 281 
  if ((long)(valid_dma_direction((int)dir) == 0) != 0L) {
    #line 282 
    ldv_inline_asm();
    #line 283 
    ldv_inline_asm();
    #line 284 
    ldv_inline_asm();
    #line 281 
    ;
  }
  #line 282 
  if ((int)dma_is_direct(ops) != 0) 
                                    #line 283 
                                    addr = dma_direct_map_page(dev,page,offset,size,dir,attrs); else 
                                                                    #line 285 
                                                                    addr = (*(ops->map_page))(dev,page,offset,size,dir,attrs);
  #line 286 
  debug_dma_map_page(dev,page,offset,size,(int)dir,addr);
  #line 288 
  return addr;
}

#line 291  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static void dma_unmap_page_attrs(struct device *dev, dma_addr_t addr, size_t size, enum dma_data_direction dir, unsigned long attrs)
{
  #line 294 
  struct dma_map_ops *ops = get_dma_ops(dev);
  #line 296 
  if ((long)(valid_dma_direction((int)dir) == 0) != 0L) {
    #line 297 
    ldv_inline_asm();
    #line 298 
    ldv_inline_asm();
    #line 299 
    ldv_inline_asm();
    #line 296 
    ;
  }
  #line 297 
  if ((int)dma_is_direct(ops) != 0) 
                                    #line 298 
                                    dma_direct_unmap_page(dev,addr,size,dir,attrs);
  else 
    #line 299 
    if (ops->unmap_page != (void (*)(struct device *, dma_addr_t , size_t , enum dma_data_direction , unsigned long ))0) 
      #line 300 
      (*(ops->unmap_page))(dev,addr,size,dir,attrs);
  #line 301 
  debug_dma_unmap_page(dev,addr,size,(int)dir);
  #line 302 
  return;
}

#line 433  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static int dma_mapping_error(struct device *dev, dma_addr_t dma_addr)
{
  #line 435 
  debug_dma_mapping_error(dev,dma_addr);
  #line 437 
  if (dma_addr == 18446744073709551615ULL) 
                                           #line 438 
                                           return -12;
  #line 439 
  return 0;
}

#line 442 
#line 442 
void *dma_alloc_attrs(struct device *, size_t, dma_addr_t *, gfp_t, unsigned long);
#line 444 
#line 444 
void dma_free_attrs(struct device *, size_t, void *, dma_addr_t, unsigned long);
#line 580  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static dma_addr_t dma_map_single_attrs(struct device *dev, void *ptr, size_t size, enum dma_data_direction dir, unsigned long attrs)
{
  #line 584 
  int __ret_warn_once;
  {
    #line 584 
    bool __warned;
    #line 584 
    __ret_warn_once = (int)is_vmalloc_addr(ptr) != 0;
    #line 584 
    if ((long)(__ret_warn_once != 0) != 0L && (long)(! __warned) != 0L) {
      #line 584 
      __warned = (_Bool)1;
      {
        #line 584 
        int __ret_warn_on = 1;
        #line 584 
        if ((long)(__ret_warn_on != 0) != 0L) {
          #line 584 
          __warn_printk((char *)"%s %s: ",dev_driver_string(dev),dev_name(dev));
          #line 585 
          ldv_inline_asm();
          #line 586 
          ldv_inline_asm();
        }
        #line 584 
        long tmp_2 = (long)(__ret_warn_on != 0);
      }
    }
    }
  #line 584 
  if ((long)((long)(__ret_warn_once != 0)) != 0L) 
                                                  #line 586 
                                                  return 18446744073709551615ULL;
  #line 587 
  debug_dma_map_single(dev,ptr,size);
  #line 588 
  ;
  #line 588 
  ;
  #line 588 
  ;
  #line 588 
  ;
  #line 588 
  ;
  #line 588 
  ;
  #line 588 
  return dma_map_page_attrs(dev,
                           (struct page *)((__phys_addr((unsigned long)ptr) >> 12) + vmemmap_base),
                           (unsigned long)ptr & 4095UL,size,dir,attrs);
}

#line 592  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static void dma_unmap_single_attrs(struct device *dev, dma_addr_t addr, size_t size, enum dma_data_direction dir, unsigned long attrs)
{
  #line 595 
  dma_unmap_page_attrs(dev,addr,size,dir,attrs);
  #line 596 
  return;
}

#line 641  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static void *dma_alloc_coherent(struct device *dev, size_t size, dma_addr_t *dma_handle, gfp_t gfp)
{
  #line 645 
  return dma_alloc_attrs(dev,size,dma_handle,gfp,
                      (unsigned long)(gfp >> 5) & 256UL);
}

#line 649  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static void dma_free_coherent(struct device *dev, size_t size, void *cpu_addr, dma_addr_t dma_handle)
{
  #line 652 
  dma_free_attrs(dev,size,cpu_addr,dma_handle,0UL);
  #line 653 
  return;
}

#line 1019  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
#line 1019 
void kfree_skb(struct sk_buff *);
#line 1032 
#line 1032 
struct sk_buff *__alloc_skb(unsigned int, gfp_t, int, int);
#line 1046  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static struct sk_buff *alloc_skb(unsigned int size, gfp_t priority)
{
  #line 1049 
  return __alloc_skb(size,priority,0,-1);
}

#line 2151  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static unsigned char *skb_tail_pointer(struct sk_buff *skb)
{
  #line 2153 
  return skb->head + (unsigned long)skb->tail;
}

#line 1114  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/mac80211.h"
__inline static struct ieee80211_tx_info *IEEE80211_SKB_CB(struct sk_buff *skb)
{
  #line 1116 
  return (struct ieee80211_tx_info *)(& skb->cb);
}

#line 4660 
#line 4660 
void ieee80211_tx_status_irqsafe(struct ieee80211_hw *, struct sk_buff *);
#line 5199 
#line 5199 
void ieee80211_stop_queues(struct ieee80211_hw *);
#line 5207 
#line 5207 
void ieee80211_wake_queues(struct ieee80211_hw *);
#line 162  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/wcn36xx/txrx.h"
#line 162 
int wcn36xx_rx_skb(struct wcn36xx *wcn, struct sk_buff *skb);
#line 458  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/wcn36xx/dxe.h"
#line 591  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/wcn36xx/dxe.c"
void wcn36xx_dxe_rx_frame(struct wcn36xx *wcn);
#line 464  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/wcn36xx/dxe.h"
#line 676  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/wcn36xx/dxe.c"
int wcn36xx_dxe_tx_frame(struct wcn36xx *wcn, struct wcn36xx_vif *vif_priv, struct wcn36xx_tx_bd *bd, struct sk_buff *skb, bool is_low);
#line 469  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/wcn36xx/dxe.h"
#line 328  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/wcn36xx/dxe.c"
void wcn36xx_dxe_tx_ack_ind(struct wcn36xx *wcn, u32 status);
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/wcn36xx/dxe.c"
static void wcn36xx_ccu_write_register(struct wcn36xx *wcn, int addr, int data)
{
  #line 32 
  if ((wcn36xx_dbg_mask & 1U) != 0U) 
                                     #line 32 
                                     printk((char *)"\001",addr,data);
  #line 36 
  writel((unsigned int)data,wcn->ccu_base + (unsigned long)addr);
  #line 37 
  return;
}

#line 39  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/wcn36xx/dxe.c"
static void wcn36xx_dxe_write_register(struct wcn36xx *wcn, int addr, int data)
{
  #line 41 
  if ((wcn36xx_dbg_mask & 1U) != 0U) 
                                     #line 41 
                                     printk((char *)"\001",addr,data);
  #line 45 
  writel((unsigned int)data,wcn->dxe_base + (unsigned long)addr);
  #line 46 
  return;
}

#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/wcn36xx/dxe.c"
static void wcn36xx_dxe_read_register(struct wcn36xx *wcn, int addr, int *data)
{
  #line 50 
  *data = (int)readl(wcn->dxe_base + (unsigned long)addr);
  #line 52 
  if ((wcn36xx_dbg_mask & 1U) != 0U) 
                                     #line 52 
                                     printk((char *)"\001",addr,*data);
  #line 53 
  return;
}

#line 57  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/wcn36xx/dxe.c"
static void wcn36xx_dxe_free_ctl_block(struct wcn36xx_dxe_ch *ch)
{
  #line 59 
  struct wcn36xx_dxe_ctl *next;
  #line 60 
  int i;
  #line 59 
  struct wcn36xx_dxe_ctl *ctl = ch->head_blk_ctl;
  #line 62 
  i = 0;
  #line 62 
  while (ch->desc_num > (enum wcn36xx_dxe_ch_desc_num)i && ctl != (struct wcn36xx_dxe_ctl *)0) {
    #line 63 
    next = ctl->next;
    #line 64 
    kfree((void *)ctl);
    #line 65 
    ctl = next;
    #line 62 
    i ++;
  }
  #line 67 
  return;
}

#line 69  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/wcn36xx/dxe.c"
static int wcn36xx_dxe_allocate_ctl_block(struct wcn36xx_dxe_ch *ch)
{
  #line 73 
  int i;
  #line 71 
  struct wcn36xx_dxe_ctl *prev_ctl = (struct wcn36xx_dxe_ctl *)0;
  #line 72 
  struct wcn36xx_dxe_ctl *cur_ctl = (struct wcn36xx_dxe_ctl *)0;
  #line 75 
  spinlock_check(& ch->lock);
  {
    #line 75 
    struct lock_class_key __key;
    #line 75 
    __raw_spin_lock_init(& ch->lock.__anonCompField_spinlock_25.rlock,(char *)"&(&ch->lock)->rlock",& __key);
  }
  #line 76 
  i = 0;
  #line 76 
  while (ch->desc_num > (enum wcn36xx_dxe_ch_desc_num)i) {
    #line 77 
    cur_ctl = (struct wcn36xx_dxe_ctl *)kzalloc_0(48UL,3264U);
    #line 78 
    if (cur_ctl == (struct wcn36xx_dxe_ctl *)0) 
                                                #line 79 
                                                goto out_fail;
    #line 81 
    cur_ctl->ctl_blk_order = i;
    #line 82 
    if (i == 0) {
      #line 83 
      ch->head_blk_ctl = cur_ctl;
      #line 84 
      ch->tail_blk_ctl = cur_ctl;
    }
    else 
      #line 85 
      if ((unsigned int)ch->desc_num + 4294967295U == (unsigned int)i) {
        #line 86 
        prev_ctl->next = cur_ctl;
        #line 87 
        cur_ctl->next = ch->head_blk_ctl;
      }
      else 
           #line 89 
           prev_ctl->next = cur_ctl;
    #line 91 
    prev_ctl = cur_ctl;
    #line 76 
    i ++;
  }
  #line 94 
  return 0;
  #line 96 
  out_fail: 
            #line 96 
  ;
  #line 97 
  wcn36xx_dxe_free_ctl_block(ch);
  #line 98 
  return -12;
}

#line 101  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/wcn36xx/dxe.c"
int wcn36xx_dxe_alloc_ctl_blks(struct wcn36xx *wcn)
{
  #line 103 
  int ret;
  #line 105 
  wcn->dxe_tx_l_ch.ch_type = WCN36XX_DXE_CH_TX_L;
  #line 106 
  wcn->dxe_tx_h_ch.ch_type = WCN36XX_DXE_CH_TX_H;
  #line 107 
  wcn->dxe_rx_l_ch.ch_type = WCN36XX_DXE_CH_RX_L;
  #line 108 
  wcn->dxe_rx_h_ch.ch_type = WCN36XX_DXE_CH_RX_H;
  #line 110 
  wcn->dxe_tx_l_ch.desc_num = WCN36XX_DXE_CH_DESC_NUMB_TX_L;
  #line 111 
  wcn->dxe_tx_h_ch.desc_num = WCN36XX_DXE_CH_DESC_NUMB_TX_H;
  #line 112 
  wcn->dxe_rx_l_ch.desc_num = WCN36XX_DXE_CH_DESC_NUMB_RX_L;
  #line 113 
  wcn->dxe_rx_h_ch.desc_num = WCN36XX_DXE_CH_DESC_NUMB_RX_H;
  #line 115 
  wcn->dxe_tx_l_ch.dxe_wq = 23U;
  #line 116 
  wcn->dxe_tx_h_ch.dxe_wq = 23U;
  #line 118 
  wcn->dxe_tx_l_ch.ctrl_bd = 3181125U;
  #line 119 
  wcn->dxe_tx_h_ch.ctrl_bd = 3198533U;
  #line 121 
  wcn->dxe_tx_l_ch.ctrl_skb = 3312205U;
  #line 122 
  wcn->dxe_tx_h_ch.ctrl_skb = 3329613U;
  #line 124 
  wcn->dxe_tx_l_ch.reg_ctrl = 1024U;
  #line 125 
  wcn->dxe_tx_h_ch.reg_ctrl = 1280U;
  #line 127 
  wcn->dxe_tx_l_ch.def_ctrl = 2218691405U;
  #line 128 
  wcn->dxe_tx_h_ch.def_ctrl = 2235486029U;
  #line 131 
  ret = wcn36xx_dxe_allocate_ctl_block(& wcn->dxe_tx_l_ch);
  #line 132 
  if (ret != 0) 
                #line 133 
                goto out_err;
  #line 134 
  ret = wcn36xx_dxe_allocate_ctl_block(& wcn->dxe_tx_h_ch);
  #line 135 
  if (ret != 0) 
                #line 136 
                goto out_err;
  #line 137 
  ret = wcn36xx_dxe_allocate_ctl_block(& wcn->dxe_rx_l_ch);
  #line 138 
  if (ret != 0) 
                #line 139 
                goto out_err;
  #line 140 
  ret = wcn36xx_dxe_allocate_ctl_block(& wcn->dxe_rx_h_ch);
  #line 141 
  if (ret != 0) 
                #line 142 
                goto out_err;
  #line 145 
  ret = qcom_smem_state_update_bits(wcn->tx_enable_state,1536U,512U);
  #line 149 
  if (ret != 0) 
                #line 150 
                goto out_err;
  #line 152 
  return 0;
  #line 154 
  out_err: 
           #line 154 
  ;
  #line 155 
  printk((char *)"\001");
  #line 156 
  wcn36xx_dxe_free_ctl_blks(wcn);
  #line 157 
  return -12;
}

#line 160  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/wcn36xx/dxe.c"
void wcn36xx_dxe_free_ctl_blks(struct wcn36xx *wcn)
{
  #line 162 
  wcn36xx_dxe_free_ctl_block(& wcn->dxe_tx_l_ch);
  #line 163 
  wcn36xx_dxe_free_ctl_block(& wcn->dxe_tx_h_ch);
  #line 164 
  wcn36xx_dxe_free_ctl_block(& wcn->dxe_rx_l_ch);
  #line 165 
  wcn36xx_dxe_free_ctl_block(& wcn->dxe_rx_h_ch);
  #line 166 
  return;
}

#line 168  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/wcn36xx/dxe.c"
static int wcn36xx_dxe_init_descs(struct device *dev, struct wcn36xx_dxe_ch *wcn_ch)
{
  #line 173 
  size_t size;
  #line 174 
  int i;
  #line 170 
  struct wcn36xx_dxe_desc *cur_dxe = (struct wcn36xx_dxe_desc *)0;
  #line 171 
  struct wcn36xx_dxe_desc *prev_dxe = (struct wcn36xx_dxe_desc *)0;
  #line 172 
  struct wcn36xx_dxe_ctl *cur_ctl = (struct wcn36xx_dxe_ctl *)0;
  #line 176 
  size = (unsigned long)wcn_ch->desc_num * 32UL;
  #line 177 
  wcn_ch->cpu_addr = dma_alloc_coherent(dev,size,& wcn_ch->dma_addr,3264U);
  #line 179 
  if (wcn_ch->cpu_addr == (void *)0) 
                                     #line 180 
                                     return -12;
  #line 182 
  cur_dxe = (struct wcn36xx_dxe_desc *)wcn_ch->cpu_addr;
  #line 183 
  cur_ctl = wcn_ch->head_blk_ctl;
  #line 185 
  i = 0;
  #line 185 
  while (wcn_ch->desc_num > (enum wcn36xx_dxe_ch_desc_num)i) {
    #line 186 
    cur_ctl->desc = cur_dxe;
    #line 187 
    cur_ctl->desc_phy_addr = (unsigned int)wcn_ch->dma_addr + (unsigned int)((unsigned long)i) * 32U;
    #line 190 
    switch ((unsigned int)wcn_ch->ch_type) {
      #line 191 
      case (unsigned int)0: 
                            #line 191 
      ;
      #line 192 
      cur_dxe->ctrl = 3312196U;
      #line 193 
      cur_dxe->dst_addr_l = 23U;
      #line 194 
      break;
      #line 195 
      case (unsigned int)1: 
                            #line 195 
      ;
      #line 196 
      cur_dxe->ctrl = 3329604U;
      #line 197 
      cur_dxe->dst_addr_l = 23U;
      #line 198 
      break;
      #line 199 
      case (unsigned int)2: 
                            #line 199 
      ;
      #line 200 
      cur_dxe->ctrl = 1223983U;
      #line 201 
      cur_dxe->src_addr_l = 11U;
      #line 202 
      break;
      #line 203 
      case (unsigned int)3: 
                            #line 203 
      ;
      #line 204 
      cur_dxe->ctrl = 1233199U;
      #line 205 
      cur_dxe->src_addr_l = 4U;
      #line 206 
      break;
    }
    #line 208 
    if (i == 0) 
                #line 209 
                cur_dxe->phy_next_l = 0U;
    else 
      #line 210 
      if (i > 0 && (unsigned int)wcn_ch->desc_num + 4294967295U > (unsigned int)i) 
        #line 211 
        prev_dxe->phy_next_l = cur_ctl->desc_phy_addr;
      else 
        #line 213 
        if ((unsigned int)wcn_ch->desc_num + 4294967295U == (unsigned int)i) {
          #line 214 
          prev_dxe->phy_next_l = cur_ctl->desc_phy_addr;
          #line 216 
          cur_dxe->phy_next_l = (wcn_ch->head_blk_ctl)->desc_phy_addr;
        }
    #line 219 
    cur_ctl = cur_ctl->next;
    #line 220 
    prev_dxe = cur_dxe;
    #line 221 
    cur_dxe ++;
    #line 185 
    i ++;
  }
  #line 224 
  return 0;
}

#line 227  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/wcn36xx/dxe.c"
static void wcn36xx_dxe_deinit_descs(struct device *dev, struct wcn36xx_dxe_ch *wcn_ch)
{
  #line 229 
  size_t size;
  #line 231 
  size = (unsigned long)wcn_ch->desc_num * 32UL;
  #line 232 
  dma_free_coherent(dev,size,wcn_ch->cpu_addr,wcn_ch->dma_addr);
  #line 233 
  return;
}

#line 235  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/wcn36xx/dxe.c"
static void wcn36xx_dxe_init_tx_bd(struct wcn36xx_dxe_ch *ch, struct wcn36xx_dxe_mem_pool *pool)
{
  #line 238 
  int i;
  #line 238 
  int chunk_size = pool->chunk_size;
  #line 239 
  dma_addr_t bd_phy_addr = pool->phy_addr;
  #line 240 
  void *bd_cpu_addr = pool->virt_addr;
  #line 241 
  struct wcn36xx_dxe_ctl *cur = ch->head_blk_ctl;
  #line 243 
  i = 0;
  #line 243 
  while (ch->desc_num > (enum wcn36xx_dxe_ch_desc_num)i) {
    #line 246 
    if ((i & 1) == 0) {
      #line 247 
      cur->bd_phy_addr = bd_phy_addr;
      #line 248 
      cur->bd_cpu_addr = bd_cpu_addr;
      #line 249 
      bd_phy_addr = (unsigned long long)chunk_size + bd_phy_addr;
      #line 250 
      bd_cpu_addr += (unsigned long)chunk_size;
    }
    else {
      #line 252 
      cur->bd_phy_addr = 0ULL;
      #line 253 
      cur->bd_cpu_addr = (void *)0;
    }
    #line 255 
    cur = cur->next;
    #line 243 
    i ++;
  }
  #line 257 
  return;
}

#line 259  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/wcn36xx/dxe.c"
static int wcn36xx_dxe_enable_ch_int(struct wcn36xx *wcn, u16 wcn_ch)
{
  #line 261 
  int reg_data = 0;
  #line 263 
  wcn36xx_dxe_read_register(wcn,24,& reg_data);
  #line 267 
  reg_data = (int)wcn_ch | reg_data;
  #line 269 
  wcn36xx_dxe_write_register(wcn,24,reg_data);
  #line 272 
  return 0;
}

#line 275  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/wcn36xx/dxe.c"
static int wcn36xx_dxe_fill_skb(struct device *dev, struct wcn36xx_dxe_ctl *ctl, gfp_t gfp)
{
  #line 280 
  struct sk_buff *skb;
  #line 279 
  struct wcn36xx_dxe_desc *dxe = ctl->desc;
  #line 282 
  skb = alloc_skb(3872U,gfp);
  #line 283 
  if (skb == (struct sk_buff *)0) 
                                  #line 284 
                                  return -12;
  #line 286 
  ;
  #line 286 
  dxe->dst_addr_l = (unsigned int)dma_map_single_attrs(dev,(void *)skb_tail_pointer(skb),3872UL,
                             (enum dma_data_direction)DMA_FROM_DEVICE,0UL);
  #line 290 
  if (dma_mapping_error(dev,(unsigned long long)dxe->dst_addr_l) != 0) {
    #line 291 
    _dev_err(dev,(char *)"unable to map skb\n");
    #line 292 
    kfree_skb(skb);
    #line 293 
    return -12;
  }
  #line 295 
  ctl->skb = skb;
  #line 297 
  return 0;
}

#line 300  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/wcn36xx/dxe.c"
static int wcn36xx_dxe_ch_alloc_skb(struct wcn36xx *wcn, struct wcn36xx_dxe_ch *wcn_ch)
{
  #line 303 
  int i;
  #line 304 
  struct wcn36xx_dxe_ctl *cur_ctl = (struct wcn36xx_dxe_ctl *)0;
  #line 306 
  cur_ctl = wcn_ch->head_blk_ctl;
  #line 308 
  i = 0;
  #line 308 
  while (wcn_ch->desc_num > (enum wcn36xx_dxe_ch_desc_num)i) {
    #line 309 
    wcn36xx_dxe_fill_skb(wcn->dev,cur_ctl,3264U);
    #line 310 
    cur_ctl = cur_ctl->next;
    #line 308 
    i ++;
  }
  #line 313 
  return 0;
}

#line 316  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/wcn36xx/dxe.c"
static void wcn36xx_dxe_ch_free_skbs(struct wcn36xx *wcn, struct wcn36xx_dxe_ch *wcn_ch)
{
  #line 320 
  int i;
  #line 319 
  struct wcn36xx_dxe_ctl *cur = wcn_ch->head_blk_ctl;
  #line 322 
  i = 0;
  #line 322 
  while (wcn_ch->desc_num > (enum wcn36xx_dxe_ch_desc_num)i) {
    #line 323 
    kfree_skb(cur->skb);
    #line 324 
    cur = cur->next;
    #line 322 
    i ++;
  }
  #line 326 
  return;
}

#line 328  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/wcn36xx/dxe.c"
void wcn36xx_dxe_tx_ack_ind(struct wcn36xx *wcn, u32 status)
{
  #line 330 
  struct ieee80211_tx_info *info;
  #line 331 
  struct sk_buff *skb;
  #line 332 
  unsigned long flags;
  #line 334 
  cif___ldv_spin_lock_dxe_lock_of_wcn36xx(& wcn->dxe_lock);
  #line 335 
  skb = wcn->tx_ack_skb;
  #line 336 
  wcn->tx_ack_skb = (struct sk_buff *)0;
  #line 337 
  cif_spin_unlock_irqrestore_dxe_lock_of_wcn36xx(& wcn->dxe_lock,flags);
  #line 339 
  if (skb == (struct sk_buff *)0) {
    #line 340 
    printk((char *)"\001");
    #line 341 
    return;
  }
  #line 344 
  info = IEEE80211_SKB_CB(skb);
  #line 346 
  if (status == 1U) 
                    #line 347 
                    info->flags |= 512U;
  #line 349 
  if ((wcn36xx_dbg_mask & 1U) != 0U) 
                                     #line 349 
                                     printk((char *)"\001",status);
  #line 351 
  ieee80211_tx_status_irqsafe(wcn->hw,skb);
  #line 352 
  ieee80211_wake_queues(wcn->hw);
  #line 353 
  return;
}

#line 355  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/wcn36xx/dxe.c"
static void reap_tx_dxes(struct wcn36xx *wcn, struct wcn36xx_dxe_ch *ch)
{
  #line 357 
  struct wcn36xx_dxe_ctl *ctl;
  #line 358 
  struct ieee80211_tx_info *info;
  #line 359 
  unsigned long flags;
  #line 366 
  cif___ldv_spin_lock_lock_of_wcn36xx_dxe_ch(& ch->lock);
  #line 367 
  ctl = ch->tail_blk_ctl;
  #line 368 
  while (1) {
    {
      #line 370 
      union __anonunion___u_3088 __u;
      #line 369 
      __read_once_size((void *)(& (ctl->desc)->ctrl),(void *)(& __u.__c),4);
      #line 369 
      if (((unsigned long)(__u.__val) & 1UL) != 0UL) 
                                                     #line 370 
                                                     break;
      #line 372 
      if (ctl->skb != (struct sk_buff *)0) {
        #line 374 
        union __anonunion___u_3090 __u_0;
        #line 373 
        __read_once_size((void *)(& (ctl->desc)->ctrl),(void *)(& __u_0.__c),4);
        #line 372 
        if (((unsigned long)(__u_0.__val) & 8UL) != 0UL) {
          #line 374 
          dma_unmap_single_attrs(wcn->dev,(unsigned long long)(ctl->desc)->src_addr_l,(unsigned long)(ctl->skb)->len,(enum dma_data_direction)DMA_TO_DEVICE,0UL);
          #line 376 
          info = IEEE80211_SKB_CB(ctl->skb);
          #line 377 
          if ((info->flags & 1U) == 0U) 
                                        #line 379 
                                        ieee80211_free_txskb(wcn->hw,ctl->skb);
          #line 382 
          if ((int)wcn->queues_stopped != 0) {
            #line 383 
            wcn->queues_stopped = (_Bool)0;
            #line 384 
            ieee80211_wake_queues(wcn->hw);
          }
          #line 387 
          ctl->skb = (struct sk_buff *)0;
        }
      }
      #line 389 
      ctl = ctl->next;
    }
    #line 390 
    if (! (ch->head_blk_ctl != ctl)) 
                                     #line 368 
                                     break;
  }
  #line 392 
  ch->tail_blk_ctl = ctl;
  #line 393 
  cif_spin_unlock_irqrestore_lock_of_wcn36xx_dxe_ch(& ch->lock,flags);
  #line 394 
  return;
}

#line 396  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/wcn36xx/dxe.c"
static irqreturn_t wcn36xx_irq_tx_complete(int irq, void *dev)
{
  #line 399 
  int int_src;
  #line 399 
  int int_reason;
  #line 398 
  struct wcn36xx *wcn = (struct wcn36xx *)dev;
  #line 401 
  wcn36xx_dxe_read_register(wcn,32,& int_src);
  #line 403 
  if ((int_src & 16) != 0) {
    #line 404 
    wcn36xx_dxe_read_register(wcn,1284,& int_reason);
    #line 408 
    wcn36xx_dxe_write_register(wcn,48,16);
    #line 412 
    if ((int_reason & 16384) != 0) {
      #line 413 
      wcn36xx_dxe_write_register(wcn,60,16);
      #line 417 
      printk((char *)"\001",int_src);
    }
    #line 421 
    if ((int_reason & 32768) != 0) 
                                   #line 422 
                                   wcn36xx_dxe_write_register(wcn,56,16);
    #line 427 
    if ((int_reason & 8192) != 0) 
                                  #line 428 
                                  wcn36xx_dxe_write_register(wcn,52,16);
    #line 433 
    if ((wcn36xx_dbg_mask & 1U) != 0U) 
                                       #line 433 
                                       printk((char *)"\001",int_reason);
    #line 436 
    if ((int_reason & 40960) != 0) 
                                   #line 438 
                                   reap_tx_dxes(wcn,& wcn->dxe_tx_h_ch);
  }
  #line 441 
  if ((int_src & 1) != 0) {
    #line 442 
    wcn36xx_dxe_read_register(wcn,1028,& int_reason);
    #line 446 
    wcn36xx_dxe_write_register(wcn,48,1);
    #line 451 
    if ((int_reason & 16384) != 0) {
      #line 452 
      wcn36xx_dxe_write_register(wcn,60,1);
      #line 456 
      printk((char *)"\001",int_src);
    }
    #line 460 
    if ((int_reason & 32768) != 0) 
                                   #line 461 
                                   wcn36xx_dxe_write_register(wcn,56,1);
    #line 466 
    if ((int_reason & 8192) != 0) 
                                  #line 467 
                                  wcn36xx_dxe_write_register(wcn,52,1);
    #line 472 
    if ((wcn36xx_dbg_mask & 1U) != 0U) 
                                       #line 472 
                                       printk((char *)"\001",int_reason);
    #line 475 
    if ((int_reason & 40960) != 0) 
                                   #line 477 
                                   reap_tx_dxes(wcn,& wcn->dxe_tx_l_ch);
  }
  #line 480 
  return IRQ_HANDLED;
}

#line 483  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/wcn36xx/dxe.c"
static irqreturn_t wcn36xx_irq_rx_ready(int irq, void *dev)
{
  #line 485 
  struct wcn36xx *wcn = (struct wcn36xx *)dev;
  #line 487 
  wcn36xx_dxe_rx_frame(wcn);
  #line 489 
  return IRQ_HANDLED;
}

#line 492  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/wcn36xx/dxe.c"
static int wcn36xx_dxe_request_irqs(struct wcn36xx *wcn)
{
  #line 494 
  int ret;
  #line 496 
  ret = cif_request_irq((unsigned int)wcn->tx_irq,& wcn36xx_irq_tx_complete,4UL,(char *)"wcn36xx_tx",(void *)wcn);
  #line 498 
  if (ret != 0) {
    #line 499 
    printk((char *)"\001");
    #line 500 
    goto out_err;
  }
  #line 503 
  ret = cif_request_irq((unsigned int)wcn->rx_irq,& wcn36xx_irq_rx_ready,4UL,(char *)"wcn36xx_rx",(void *)wcn);
  #line 505 
  if (ret != 0) {
    #line 506 
    printk((char *)"\001");
    #line 507 
    goto out_txirq;
  }
  #line 510 
  enable_irq_wake((unsigned int)wcn->rx_irq);
  #line 512 
  return 0;
  #line 514 
  out_txirq: 
             #line 514 
  ;
  #line 515 
  cif_free_irq((unsigned int)wcn->tx_irq,(void *)wcn);
  #line 516 
  out_err: 
           #line 516 
  ;
  #line 517 
  return ret;
}

#line 521  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/wcn36xx/dxe.c"
static int wcn36xx_rx_handle_packets(struct wcn36xx *wcn, struct wcn36xx_dxe_ch *ch, u32 ctrl, u32 en_mask, u32 int_mask, u32 status_reg)
{
  #line 528 
  struct wcn36xx_dxe_desc *dxe;
  #line 529 
  struct wcn36xx_dxe_ctl *ctl;
  #line 530 
  dma_addr_t dma_addr;
  #line 531 
  struct sk_buff *skb;
  #line 532 
  u32 int_reason;
  #line 533 
  int ret;
  #line 535 
  wcn36xx_dxe_read_register(wcn,(int)status_reg,(int *)(& int_reason));
  #line 536 
  wcn36xx_dxe_write_register(wcn,48,(int)int_mask);
  #line 538 
  if ((int_reason & 16384U) != 0U) {
    #line 539 
    wcn36xx_dxe_write_register(wcn,60,(int)int_mask);
    #line 543 
    printk((char *)"\001");
  }
  #line 546 
  if ((int_reason & 32768U) != 0U) 
                                   #line 547 
                                   wcn36xx_dxe_write_register(wcn,56,(int)int_mask);
  #line 551 
  if ((int_reason & 8192U) != 0U) 
                                  #line 552 
                                  wcn36xx_dxe_write_register(wcn,52,(int)int_mask);
  #line 556 
  if ((int_reason & 40960U) == 0U) 
                                   #line 558 
                                   return 0;
  #line 560 
  cif_spin_lock_lock_of_wcn36xx_dxe_ch(& ch->lock);
  #line 562 
  ctl = ch->head_blk_ctl;
  #line 563 
  dxe = ctl->desc;
  #line 565 
  while (1) {
    #line 566 
    union __anonunion___u_3092 __u;
    #line 565 
    __read_once_size((void *)(& dxe->ctrl),(void *)(& __u.__c),4);
    #line 565 
    if (! (((unsigned long)(__u.__val) & 1UL) == 0UL)) 
                                                       #line 565 
                                                       break;
    #line 566 
    skb = ctl->skb;
    #line 567 
    dma_addr = (unsigned long long)dxe->dst_addr_l;
    #line 568 
    ret = wcn36xx_dxe_fill_skb(wcn->dev,ctl,2592U);
    #line 569 
    if (ret == 0) {
      #line 573 
      dma_unmap_single_attrs(wcn->dev,dma_addr,3872UL,(enum dma_data_direction)DMA_FROM_DEVICE,0UL);
      #line 575 
      wcn36xx_rx_skb(wcn,skb);
    }
    #line 578 
    dxe->ctrl = ctrl;
    #line 579 
    ctl = ctl->next;
    #line 580 
    dxe = ctl->desc;
  }
  #line 582 
  wcn36xx_dxe_write_register(wcn,4,(int)en_mask);
  #line 584 
  ch->head_blk_ctl = ctl;
  #line 586 
  cif_spin_unlock_lock_of_wcn36xx_dxe_ch(& ch->lock);
  #line 588 
  return 0;
}

#line 591  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/wcn36xx/dxe.c"
void wcn36xx_dxe_rx_frame(struct wcn36xx *wcn)
{
  #line 593 
  int int_src;
  #line 595 
  wcn36xx_dxe_read_register(wcn,32,& int_src);
  #line 598 
  if ((int_src & 2) != 0) 
                          #line 599 
                          wcn36xx_rx_handle_packets(wcn,& wcn->dxe_rx_l_ch,1223983U,2U,2U,1092U);
  #line 606 
  if ((int_src & 8) != 0) 
                          #line 607 
                          wcn36xx_rx_handle_packets(wcn,& wcn->dxe_rx_h_ch,1233199U,8U,8U,1220U);
  #line 613 
  if (int_src == 0) 
                    #line 614 
                    printk((char *)"\001");
  #line 615 
  return;
}

#line 617  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/wcn36xx/dxe.c"
int wcn36xx_dxe_allocate_mem_pools(struct wcn36xx *wcn)
{
  #line 619 
  size_t s;
  #line 620 
  void *cpu_addr;
  #line 625 
  wcn->mgmt_mem_pool.chunk_size = 144;
  #line 628 
  s = (unsigned long)(wcn->mgmt_mem_pool.chunk_size * 10);
  #line 629 
  cpu_addr = dma_alloc_coherent(wcn->dev,s,& wcn->mgmt_mem_pool.phy_addr,3264U);
  #line 632 
  if (cpu_addr == (void *)0) 
                             #line 633 
                             goto out_err;
  #line 635 
  wcn->mgmt_mem_pool.virt_addr = cpu_addr;
  #line 640 
  wcn->data_mem_pool.chunk_size = 144;
  #line 643 
  s = (unsigned long)(wcn->data_mem_pool.chunk_size * 128);
  #line 644 
  cpu_addr = dma_alloc_coherent(wcn->dev,s,& wcn->data_mem_pool.phy_addr,3264U);
  #line 647 
  if (cpu_addr == (void *)0) 
                             #line 648 
                             goto out_err;
  #line 650 
  wcn->data_mem_pool.virt_addr = cpu_addr;
  #line 652 
  return 0;
  #line 654 
  out_err: 
           #line 654 
  ;
  #line 655 
  wcn36xx_dxe_free_mem_pools(wcn);
  #line 656 
  printk((char *)"\001");
  #line 657 
  return -12;
}

#line 660  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/wcn36xx/dxe.c"
void wcn36xx_dxe_free_mem_pools(struct wcn36xx *wcn)
{
  #line 662 
  if (wcn->mgmt_mem_pool.virt_addr != (void *)0) 
                                                 #line 663 
                                                 dma_free_coherent(wcn->dev,(unsigned long)(wcn->mgmt_mem_pool.chunk_size * 10),wcn->mgmt_mem_pool.virt_addr,wcn->mgmt_mem_pool.phy_addr);
  #line 668 
  if (wcn->data_mem_pool.virt_addr != (void *)0) 
                                                 #line 669 
                                                 dma_free_coherent(wcn->dev,(unsigned long)(wcn->data_mem_pool.chunk_size * 128),wcn->data_mem_pool.virt_addr,wcn->data_mem_pool.phy_addr);
  #line 673 
  return;
}

#line 676  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/wcn36xx/dxe.c"
int wcn36xx_dxe_tx_frame(struct wcn36xx *wcn, struct wcn36xx_vif *vif_priv, struct wcn36xx_tx_bd *bd, struct sk_buff *skb, bool is_low)
{
  #line 682 
  struct wcn36xx_dxe_desc *desc_bd;
  #line 682 
  struct wcn36xx_dxe_desc *desc_skb;
  #line 683 
  struct wcn36xx_dxe_ctl *ctl_bd;
  #line 683 
  struct wcn36xx_dxe_ctl *ctl_skb;
  #line 685 
  unsigned long flags;
  #line 686 
  int ret;
  #line 684 
  struct wcn36xx_dxe_ch *ch = (struct wcn36xx_dxe_ch *)0;
  #line 688 
  if ((int)is_low != 0) 
                        #line 688 
                        ch = & wcn->dxe_tx_l_ch; else 
                                                      #line 688 
                                                      ch = & wcn->dxe_tx_h_ch;
  #line 690 
  cif___ldv_spin_lock_lock_of_wcn36xx_dxe_ch(& ch->lock);
  #line 691 
  ctl_bd = ch->head_blk_ctl;
  #line 692 
  ctl_skb = ctl_bd->next;
  #line 699 
  if (ctl_skb->skb != (struct sk_buff *)0) {
    #line 700 
    ieee80211_stop_queues(wcn->hw);
    #line 701 
    wcn->queues_stopped = (_Bool)1;
    #line 702 
    cif_spin_unlock_irqrestore_lock_of_wcn36xx_dxe_ch(& ch->lock,flags);
    #line 703 
    return -16;
  }
  #line 706 
  if ((long)(ctl_skb->bd_cpu_addr != (void *)0) != 0L) {
    #line 707 
    printk((char *)"\001");
    #line 708 
    ret = -22;
    #line 709 
    goto unlock;
  }
  #line 712 
  desc_bd = ctl_bd->desc;
  #line 713 
  desc_skb = ctl_skb->desc;
  #line 715 
  ctl_bd->skb = (struct sk_buff *)0;
  #line 718 
  memcpy(ctl_bd->bd_cpu_addr,(void *)bd,40UL);
  #line 721 
  desc_bd->src_addr_l = (unsigned int)ctl_bd->bd_phy_addr;
  #line 722 
  desc_bd->dst_addr_l = ch->dxe_wq;
  #line 723 
  desc_bd->fr_len = 40U;
  #line 725 
  if ((wcn36xx_dbg_mask & 1U) != 0U) 
                                     #line 725 
                                     printk((char *)"\001");
  #line 727 
  if ((wcn36xx_dbg_mask & 2U) != 0U) 
                                     #line 727 
                                     print_hex_dump((char *)"\001",(char *)"wcn36xx",2,32,1,(void *)desc_bd,32UL,(_Bool)0);
  #line 729 
  if ((wcn36xx_dbg_mask & 2U) != 0U) 
                                     #line 729 
                                     print_hex_dump((char *)"\001",(char *)"wcn36xx",2,32,1,ctl_bd->bd_cpu_addr,40UL,(_Bool)0);
  #line 733 
  desc_skb->src_addr_l = (unsigned int)dma_map_single_attrs(wcn->dev,(void *)skb->data,
                           (unsigned long)skb->len,
                           (enum dma_data_direction)DMA_TO_DEVICE,0UL);
  #line 737 
  if (dma_mapping_error(wcn->dev,(unsigned long long)desc_skb->src_addr_l) != 0) {
    #line 738 
    _dev_err(wcn->dev,(char *)"unable to DMA map src_addr_l\n");
    #line 739 
    ret = -12;
    #line 740 
    goto unlock;
  }
  #line 743 
  ctl_skb->skb = skb;
  #line 744 
  desc_skb->dst_addr_l = ch->dxe_wq;
  #line 745 
  desc_skb->fr_len = (ctl_skb->skb)->len;
  #line 747 
  if ((wcn36xx_dbg_mask & 2U) != 0U) 
                                     #line 747 
                                     print_hex_dump((char *)"\001",(char *)"wcn36xx",2,32,1,(void *)desc_skb,32UL,(_Bool)0);
  #line 749 
  if ((wcn36xx_dbg_mask & 2U) != 0U) 
                                     #line 749 
                                     print_hex_dump((char *)"\001",(char *)"wcn36xx",2,32,1,(void *)(ctl_skb->skb)->data,(unsigned long)(ctl_skb->skb)->len,(_Bool)0);
  #line 753 
  ch->head_blk_ctl = ctl_skb->next;
  #line 754 
  ldv_inline_asm();
  #line 757 
  desc_skb->ctrl = ch->ctrl_skb;
  #line 758 
  ldv_inline_asm();
  #line 759 
  desc_bd->ctrl = ch->ctrl_bd;
  #line 766 
  if ((int)is_low != 0 && vif_priv->pw_state == (unsigned int)WCN36XX_BMPS) 
    #line 767 
    qcom_smem_state_update_bits(wcn->tx_rings_empty_state,1024U,1024U); else 
                                                                    #line 774 
                                                                    wcn36xx_dxe_write_register(wcn,(int)ch->reg_ctrl,(int)ch->def_ctrl);
  #line 778 
  ret = 0;
  #line 779 
  unlock: 
          #line 779 
  ;
  #line 780 
  cif_spin_unlock_irqrestore_lock_of_wcn36xx_dxe_ch(& ch->lock,flags);
  #line 781 
  return ret;
}

#line 784  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/wcn36xx/dxe.c"
int wcn36xx_dxe_init(struct wcn36xx *wcn)
{
  #line 786 
  int ret;
  #line 786 
  int reg_data = 0;
  #line 788 
  reg_data = 23689;
  #line 789 
  wcn36xx_dxe_write_register(wcn,0,reg_data);
  #line 792 
  reg_data = 655377;
  #line 794 
  if ((int)wcn->is_pronto != 0) 
                                #line 795 
                                wcn36xx_ccu_write_register(wcn,4316,reg_data); else 
                                                                    #line 797 
                                                                    wcn36xx_ccu_write_register(wcn,784,reg_data);
  #line 802 
  ret = wcn36xx_dxe_init_descs(wcn->dev,& wcn->dxe_tx_l_ch);
  #line 803 
  if (ret != 0) {
    #line 804 
    _dev_err(wcn->dev,(char *)"Error allocating descriptor\n");
    #line 805 
    return ret;
  }
  #line 807 
  wcn36xx_dxe_init_tx_bd(& wcn->dxe_tx_l_ch,& wcn->data_mem_pool);
  #line 810 
  wcn36xx_dxe_write_register(wcn,1052,(int)(wcn->dxe_tx_l_ch.head_blk_ctl)->desc_phy_addr);
  #line 814 
  wcn36xx_dxe_write_register(wcn,1044,23);
  #line 818 
  wcn36xx_dxe_read_register(wcn,8,& reg_data);
  #line 819 
  wcn36xx_dxe_enable_ch_int(wcn,(unsigned short)1);
  #line 824 
  ret = wcn36xx_dxe_init_descs(wcn->dev,& wcn->dxe_tx_h_ch);
  #line 825 
  if (ret != 0) {
    #line 826 
    _dev_err(wcn->dev,(char *)"Error allocating descriptor\n");
    #line 827 
    goto out_err_txh_ch;
  }
  #line 830 
  wcn36xx_dxe_init_tx_bd(& wcn->dxe_tx_h_ch,& wcn->mgmt_mem_pool);
  #line 833 
  wcn36xx_dxe_write_register(wcn,1308,(int)(wcn->dxe_tx_h_ch.head_blk_ctl)->desc_phy_addr);
  #line 837 
  wcn36xx_dxe_write_register(wcn,1300,23);
  #line 841 
  wcn36xx_dxe_read_register(wcn,8,& reg_data);
  #line 844 
  wcn36xx_dxe_enable_ch_int(wcn,(unsigned short)16);
  #line 849 
  ret = wcn36xx_dxe_init_descs(wcn->dev,& wcn->dxe_rx_l_ch);
  #line 850 
  if (ret != 0) {
    #line 851 
    _dev_err(wcn->dev,(char *)"Error allocating descriptor\n");
    #line 852 
    goto out_err_rxl_ch;
  }
  #line 857 
  wcn36xx_dxe_ch_alloc_skb(wcn,& wcn->dxe_rx_l_ch);
  #line 860 
  wcn36xx_dxe_write_register(wcn,1116,(int)(wcn->dxe_rx_l_ch.head_blk_ctl)->desc_phy_addr);
  #line 864 
  wcn36xx_dxe_write_register(wcn,1100,11);
  #line 869 
  wcn36xx_dxe_write_register(wcn,1108,(int)((wcn->dxe_rx_l_ch.head_blk_ctl)->desc)->phy_next_l);
  #line 874 
  wcn36xx_dxe_write_register(wcn,1088,-2072072913);
  #line 879 
  wcn36xx_dxe_enable_ch_int(wcn,(unsigned short)2);
  #line 884 
  ret = wcn36xx_dxe_init_descs(wcn->dev,& wcn->dxe_rx_h_ch);
  #line 885 
  if (ret != 0) {
    #line 886 
    _dev_err(wcn->dev,(char *)"Error allocating descriptor\n");
    #line 887 
    goto out_err_rxh_ch;
  }
  #line 891 
  wcn36xx_dxe_ch_alloc_skb(wcn,& wcn->dxe_rx_h_ch);
  #line 894 
  wcn36xx_dxe_write_register(wcn,1244,(int)(wcn->dxe_rx_h_ch.head_blk_ctl)->desc_phy_addr);
  #line 898 
  wcn36xx_dxe_write_register(wcn,1228,4);
  #line 903 
  wcn36xx_dxe_write_register(wcn,1236,(int)((wcn->dxe_rx_h_ch.head_blk_ctl)->desc)->phy_next_l);
  #line 908 
  wcn36xx_dxe_write_register(wcn,1216,-2063675089);
  #line 913 
  wcn36xx_dxe_enable_ch_int(wcn,(unsigned short)8);
  #line 915 
  ret = wcn36xx_dxe_request_irqs(wcn);
  #line 916 
  if (ret < 0) 
               #line 917 
               goto out_err_irq;
  #line 919 
  return 0;
  #line 921 
  out_err_irq: 
               #line 921 
  ;
  #line 922 
  wcn36xx_dxe_deinit_descs(wcn->dev,& wcn->dxe_rx_h_ch);
  #line 923 
  out_err_rxh_ch: 
                  #line 923 
  ;
  #line 924 
  wcn36xx_dxe_deinit_descs(wcn->dev,& wcn->dxe_rx_l_ch);
  #line 925 
  out_err_rxl_ch: 
                  #line 925 
  ;
  #line 926 
  wcn36xx_dxe_deinit_descs(wcn->dev,& wcn->dxe_tx_h_ch);
  #line 927 
  out_err_txh_ch: 
                  #line 927 
  ;
  #line 928 
  wcn36xx_dxe_deinit_descs(wcn->dev,& wcn->dxe_tx_l_ch);
  #line 930 
  return ret;
}

#line 933  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/wcn36xx/dxe.c"
void wcn36xx_dxe_deinit(struct wcn36xx *wcn)
{
  #line 935 
  cif_free_irq((unsigned int)wcn->tx_irq,(void *)wcn);
  #line 936 
  cif_free_irq((unsigned int)wcn->rx_irq,(void *)wcn);
  #line 938 
  if (wcn->tx_ack_skb != (struct sk_buff *)0) {
    #line 939 
    ieee80211_tx_status_irqsafe(wcn->hw,wcn->tx_ack_skb);
    #line 940 
    wcn->tx_ack_skb = (struct sk_buff *)0;
  }
  #line 943 
  wcn36xx_dxe_ch_free_skbs(wcn,& wcn->dxe_rx_l_ch);
  #line 944 
  wcn36xx_dxe_ch_free_skbs(wcn,& wcn->dxe_rx_h_ch);
  #line 945 
  return;
}

#line 95  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/wcn36xx/wcn36xx.ko/concurrency safety/0/concurrency safety/weaver/dxe.i.aux"
#line 95 
void *emg_free_irq(unsigned int arg0, void *arg1);
#line 99 
#line 99 
int emg_request_irq(unsigned int arg0, enum irqreturn (*arg1)(int , void *), unsigned long arg2, char *arg3, void *arg4);
#line 104  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/wcn36xx/wcn36xx.ko/concurrency safety/0/concurrency safety/weaver/dxe.i.aux"
enum irqreturn emg_wrapper_wcn36xx_irq_rx_ready(int arg0, void *arg1)
{
  #line 105 
  return wcn36xx_irq_rx_ready(arg0,arg1);
}

#line 109  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/wcn36xx/wcn36xx.ko/concurrency safety/0/concurrency safety/weaver/dxe.i.aux"
enum irqreturn emg_wrapper_wcn36xx_irq_tx_complete(int arg0, void *arg1)
{
  #line 110 
  return wcn36xx_irq_tx_complete(arg0,arg1);
}

#line 437  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/wcn36xx/wcn36xx.ko/concurrency safety/0/concurrency safety/weaver/dxe.i.aux"
static void *kzalloc_0(size_t size, gfp_t flags)
{
  #line 440 
  return ldv_kzalloc(size,flags);
}

#line 816  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/wcn36xx/wcn36xx.ko/concurrency safety/0/concurrency safety/weaver/dxe.i.aux"
static void cif___ldv_spin_lock_dxe_lock_of_wcn36xx(spinlock_t *lock)
{
  #line 819 
  ldv_spin_model_lock((char *)"dxe_lock_of_wcn36xx");
  #line 821 
  __ldv_spin_lock(lock);
  #line 822 
  return;
}

#line 825  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/wcn36xx/wcn36xx.ko/concurrency safety/0/concurrency safety/weaver/dxe.i.aux"
static void cif_spin_unlock_irqrestore_dxe_lock_of_wcn36xx(spinlock_t *lock, unsigned long flags)
{
  #line 828 
  ldv_spin_model_unlock((char *)"dxe_lock_of_wcn36xx");
  #line 830 
  spin_unlock_irqrestore(lock,flags);
  #line 831 
  return;
}

#line 834  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/wcn36xx/wcn36xx.ko/concurrency safety/0/concurrency safety/weaver/dxe.i.aux"
static void cif___ldv_spin_lock_lock_of_wcn36xx_dxe_ch(spinlock_t *lock)
{
  #line 837 
  ldv_spin_model_lock((char *)"lock_of_wcn36xx_dxe_ch");
  #line 839 
  __ldv_spin_lock(lock);
  #line 840 
  return;
}

#line 843  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/wcn36xx/wcn36xx.ko/concurrency safety/0/concurrency safety/weaver/dxe.i.aux"
static void cif_spin_unlock_irqrestore_lock_of_wcn36xx_dxe_ch(spinlock_t *lock, unsigned long flags)
{
  #line 846 
  ldv_spin_model_unlock((char *)"lock_of_wcn36xx_dxe_ch");
  #line 848 
  spin_unlock_irqrestore(lock,flags);
  #line 849 
  return;
}

#line 852  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/wcn36xx/wcn36xx.ko/concurrency safety/0/concurrency safety/weaver/dxe.i.aux"
static int cif_request_irq(unsigned int irq, irqreturn_t (*handler)(int , void *), unsigned long flags, char *name, void *dev)
{
  #line 856 
  return emg_request_irq(irq,handler,flags,name,dev);
}

#line 860  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/wcn36xx/wcn36xx.ko/concurrency safety/0/concurrency safety/weaver/dxe.i.aux"
static void *cif_free_irq(unsigned int ldv_func_arg1, void *ldv_func_arg2)
{
  #line 864 
  return emg_free_irq(ldv_func_arg1,ldv_func_arg2);
}

#line 868  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/wcn36xx/wcn36xx.ko/concurrency safety/0/concurrency safety/weaver/dxe.i.aux"
static void cif_spin_lock_lock_of_wcn36xx_dxe_ch(spinlock_t *lock)
{
  #line 871 
  ldv_spin_model_lock((char *)"lock_of_wcn36xx_dxe_ch");
  #line 873 
  spin_lock(lock);
  #line 874 
  return;
}

#line 877  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/wcn36xx/wcn36xx.ko/concurrency safety/0/concurrency safety/weaver/dxe.i.aux"
static void cif_spin_unlock_lock_of_wcn36xx_dxe_ch(spinlock_t *lock)
{
  #line 880 
  ldv_spin_model_unlock((char *)"lock_of_wcn36xx_dxe_ch");
  #line 882 
  spin_unlock(lock);
  #line 883 
  return;
}

#line 26  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
#line 131  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/wcn36xx/wcn36xx.ko/concurrency safety/0/concurrency safety/weaver/smd.i.aux"
static void INIT_LIST_HEAD_0(struct list_head *list);
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static void __list_add_0(struct list_head *new, struct list_head *prev, struct list_head *next)
{
  #line 60 
  if (! __list_add_valid(new,prev,next)) 
                                         #line 61 
                                         return;
  #line 63 
  next->prev = new;
  #line 64 
  new->next = next;
  #line 65 
  new->prev = prev;
  {
    #line 67 
    union __anonunion___u_3105 __u = {.__val = new};
    #line 66 
    __write_once_size((void *)(& prev->next),(void *)(& __u.__c),8);
    #line 66 
    struct list_head *tmp_2 = __u.__val;
  }
  #line 68 
  return;
}

#line 91  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static void list_add_tail(struct list_head *new, struct list_head *head)
{
  #line 93 
  __list_add_0(new,head->prev,head);
  #line 94 
  return;
}

#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static void __list_del_0(struct list_head *prev, struct list_head *next)
{
  #line 97 
  next->prev = prev;
  {
    #line 107 
    union __anonunion___u_3107 __u = {.__val = next};
    #line 106 
    __write_once_size((void *)(& prev->next),(void *)(& __u.__c),8);
    #line 106 
    struct list_head *tmp = __u.__val;
  }
  #line 108 
  return;
}

#line 129  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static void __list_del_entry_0(struct list_head *entry)
{
  #line 131 
  if (! __list_del_entry_valid(entry)) 
                                       #line 132 
                                       return;
  #line 134 
  __list_del_0(entry->prev,entry->next);
  #line 135 
  return;
}

#line 137  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static void list_del_0(struct list_head *entry)
{
  #line 139 
  __list_del_entry_0(entry);
  #line 140 
  entry->next = (struct list_head *)(-2401263026318606080);
  #line 141 
  entry->prev = (struct list_head *)(-2401263026318606046);
  #line 142 
  return;
}

#line 266  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static int list_empty(struct list_head *head)
{
  #line 269 
  union __anonunion___u_3109 __u;
  #line 268 
  __read_once_size((void *)(& head->next),(void *)(& __u.__c),8);
  #line 268 
  ;
  #line 268 
  return (__u.__val) == head;
}

#line 88  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/percpu.h"
#line 88 
void __bad_percpu_size(void);
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/string_64.h"
#line 59 
void *__memmove(void *, void *, size_t);
#line 186  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/string.h"
#line 655  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/wcn36xx/wcn36xx.ko/concurrency safety/0/concurrency safety/weaver/smd.i.aux"
static void *cif_kmemdup(void *src, size_t len, gfp_t gfp);
#line 77  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/preempt.h"
__inline static void __preempt_count_add(int val)
{
  #line 79 
  int tmp;
  #line 79 
  if (0 != 0 && (val == 1 || val == -1)) 
                                         #line 79 
                                         tmp = val; else 
                                                         #line 79 
                                                         tmp = 0;
  #line 79 
  int pao_ID__ = tmp;
  #line 79 
  switch (4UL) {
    #line 79 
    case (unsigned long)1: 
                           #line 79 
    ;
    #line 79 
    if (pao_ID__ == 1) 
                       #line 81 
                       ldv_inline_asm();
    else 
      #line 79 
      if (pao_ID__ == -1) 
                          #line 81 
                          ldv_inline_asm(); else 
                                                 #line 84 
                                                 ldv_inline_asm();
    #line 79 
    break;
    #line 79 
    case (unsigned long)2: 
                           #line 79 
    ;
    #line 79 
    if (pao_ID__ == 1) 
                       #line 81 
                       ldv_inline_asm();
    else 
      #line 79 
      if (pao_ID__ == -1) 
                          #line 81 
                          ldv_inline_asm(); else 
                                                 #line 84 
                                                 ldv_inline_asm();
    #line 79 
    break;
    #line 79 
    case (unsigned long)4: 
                           #line 79 
    ;
    #line 79 
    if (pao_ID__ == 1) 
                       #line 81 
                       ldv_inline_asm();
    else 
      #line 79 
      if (pao_ID__ == -1) 
                          #line 81 
                          ldv_inline_asm(); else 
                                                 #line 84 
                                                 ldv_inline_asm();
    #line 79 
    break;
    #line 79 
    case (unsigned long)8: 
                           #line 79 
    ;
    #line 79 
    if (pao_ID__ == 1) 
                       #line 81 
                       ldv_inline_asm();
    else 
      #line 79 
      if (pao_ID__ == -1) 
                          #line 81 
                          ldv_inline_asm(); else 
                                                 #line 84 
                                                 ldv_inline_asm();
    #line 79 
    break;
    #line 79 
    default: 
             #line 79 
    ;
    #line 79 
    __bad_percpu_size();
  }
  #line 82 
  return;
}

#line 82  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/preempt.h"
__inline static void __preempt_count_sub(int val)
{
  #line 84 
  int tmp;
  #line 84 
  if (0 != 0 && (val == -1 || val == 1)) 
                                         #line 84 
                                         tmp = - val; else 
                                                           #line 84 
                                                           tmp = 0;
  #line 84 
  int pao_ID__ = tmp;
  #line 84 
  switch (4UL) {
    #line 84 
    case (unsigned long)1: 
                           #line 84 
    ;
    #line 84 
    if (pao_ID__ == 1) 
                       #line 86 
                       ldv_inline_asm();
    else 
      #line 84 
      if (pao_ID__ == -1) 
                          #line 86 
                          ldv_inline_asm(); else 
                                                 #line 89 
                                                 ldv_inline_asm();
    #line 84 
    break;
    #line 84 
    case (unsigned long)2: 
                           #line 84 
    ;
    #line 84 
    if (pao_ID__ == 1) 
                       #line 86 
                       ldv_inline_asm();
    else 
      #line 84 
      if (pao_ID__ == -1) 
                          #line 86 
                          ldv_inline_asm(); else 
                                                 #line 89 
                                                 ldv_inline_asm();
    #line 84 
    break;
    #line 84 
    case (unsigned long)4: 
                           #line 84 
    ;
    #line 84 
    if (pao_ID__ == 1) 
                       #line 86 
                       ldv_inline_asm();
    else 
      #line 84 
      if (pao_ID__ == -1) 
                          #line 86 
                          ldv_inline_asm(); else 
                                                 #line 89 
                                                 ldv_inline_asm();
    #line 84 
    break;
    #line 84 
    case (unsigned long)8: 
                           #line 84 
    ;
    #line 84 
    if (pao_ID__ == 1) 
                       #line 86 
                       ldv_inline_asm();
    else 
      #line 84 
      if (pao_ID__ == -1) 
                          #line 86 
                          ldv_inline_asm(); else 
                                                 #line 89 
                                                 ldv_inline_asm();
    #line 84 
    break;
    #line 84 
    default: 
             #line 84 
    ;
    #line 84 
    __bad_percpu_size();
  }
  #line 87 
  return;
}

#line 348  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockdep.h"
#line 348 
void lock_acquire(struct lockdep_map *, unsigned int, int, int, int, struct lockdep_map *, unsigned long);
#line 352 
#line 352 
void lock_release(struct lockdep_map *, unsigned long);
#line 658 
#line 658 
void lockdep_rcu_suspicious(char *, int, char *);
#line 336  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static void spin_lock_0(spinlock_t *lock)
{
  #line 338 
  _raw_spin_lock(& lock->__anonCompField_spinlock_25.rlock);
  #line 339 
  return;
}

#line 340 
#line 839  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/wcn36xx/wcn36xx.ko/concurrency safety/0/concurrency safety/weaver/smd.i.aux"
static void cif_spin_lock_hal_ind_lock_of_wcn36xx(spinlock_t *lock);
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static void spin_unlock_0(spinlock_t *lock)
{
  #line 378 
  _raw_spin_unlock(& lock->__anonCompField_spinlock_25.rlock);
  #line 379 
  return;
}

#line 380 
#line 848  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/wcn36xx/wcn36xx.ko/concurrency safety/0/concurrency safety/weaver/smd.i.aux"
static void cif_spin_unlock_hal_ind_lock_of_wcn36xx(spinlock_t *lock);
#line 391  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static void spin_unlock_irqrestore_0(spinlock_t *lock, unsigned long flags)
{
  {
    #line 393 
    unsigned long __dummy;
    #line 393 
    unsigned long __dummy2;
    }
  #line 393 
  _raw_spin_unlock_irqrestore(& lock->__anonCompField_spinlock_25.rlock,flags);
  #line 395 
  return;
}

#line 395 
#line 866  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/wcn36xx/wcn36xx.ko/concurrency safety/0/concurrency safety/weaver/smd.i.aux"
static void cif_spin_unlock_irqrestore_hal_ind_lock_of_wcn36xx(spinlock_t *lock, unsigned long flags);
#line 26 
#line 811 
static void cif_mutex_lock_hal_mutex_of_wcn36xx(struct mutex *lock);
#line 26 
#line 825 
static void cif_mutex_lock_scan_lock_of_wcn36xx_0(struct mutex *lock);
#line 35 
#line 857 
static void cif___ldv_spin_lock_hal_ind_lock_of_wcn36xx(spinlock_t *lock);
#line 51 
#line 51 
int ldv_request_firmware(struct firmware **fw);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/string.h"
#line 23 
void *ldv_kmemdup(void *src, size_t len, gfp_t gfp);
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/wait.h"
#line 61 
void __init_waitqueue_head(struct wait_queue_head *, char *, struct lock_class_key *);
#line 57  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rcupdate.h"
__inline static void __rcu_read_lock(void)
{
  #line 59 
  __preempt_count_add(1);
  #line 60 
  ldv_inline_asm();
  #line 62 
  return;
}

#line 62  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rcupdate.h"
__inline static void __rcu_read_unlock(void)
{
  #line 66 
  ldv_inline_asm();
  #line 64 
  __preempt_count_sub(1);
  #line 66 
  return;
}

#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rcutree.h"
#line 56 
bool rcu_is_watching(void);
#line 206  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rcupdate.h"
__inline static void rcu_lock_acquire(struct lockdep_map *map)
{
  #line 208 
  __here_0: 
            #line 208 
  ;
  #line 208 
  ;
  #line 208 
  lock_acquire(map,0U,0,2,0,(struct lockdep_map *)0,(unsigned long)((void *)0));
  #line 210 
  return;
}

#line 211  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rcupdate.h"
__inline static void rcu_lock_release(struct lockdep_map *map)
{
  #line 213 
  __here_0: 
            #line 213 
  ;
  #line 213 
  ;
  #line 213 
  lock_release(map,(unsigned long)((void *)0));
  #line 215 
  return;
}

#line 216 
#line 216 
extern struct lockdep_map rcu_lock_map;
#line 220 
#line 220 
int debug_lockdep_rcu_enabled(void);
#line 613  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rcupdate.h"
__inline static void rcu_read_lock(void)
{
  #line 615 
  __rcu_read_lock();
  #line 617 
  rcu_lock_acquire(& rcu_lock_map);
  {
    #line 618 
    bool __warned;
    #line 618 
    if (debug_lockdep_rcu_enabled() != 0) 
      #line 618 
      if (! __warned) {
        #line 618 
        if (! rcu_is_watching()) {
          #line 618 
          __warned = (_Bool)1;
          #line 618 
          lockdep_rcu_suspicious((char *)"./include/linux/rcupdate.h",618,(char *)"rcu_read_lock() used illegally while idle");
        }
      }
  }
  #line 621 
  return;
}

#line 665  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rcupdate.h"
__inline static void rcu_read_unlock(void)
{
  {
    #line 667 
    bool __warned;
    #line 667 
    if (debug_lockdep_rcu_enabled() != 0) 
      #line 667 
      if (! __warned) {
        #line 667 
        if (! rcu_is_watching()) {
          #line 667 
          __warned = (_Bool)1;
          #line 667 
          lockdep_rcu_suspicious((char *)"./include/linux/rcupdate.h",667,(char *)"rcu_read_unlock() used illegally while idle");
        }
      }
  }
  #line 670 
  __rcu_read_unlock();
  #line 671 
  rcu_lock_release(& rcu_lock_map);
  #line 672 
  return;
}

#line 85  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/completion.h"
__inline static void __init_completion(struct completion *x)
{
  #line 87 
  x->done = 0U;
  {
    #line 88 
    struct lock_class_key __key;
    #line 88 
    __init_waitqueue_head(& x->wait,(char *)"&x->wait",& __key);
  }
  #line 90 
  return;
}

#line 107 
#line 107 
unsigned long wait_for_completion_timeout(struct completion *, unsigned long);
#line 118 
#line 118 
void complete(struct completion *);
#line 185  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mutex.h"
#line 818  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/wcn36xx/wcn36xx.ko/concurrency safety/0/concurrency safety/weaver/smd.i.aux"
static void cif_mutex_unlock_hal_mutex_of_wcn36xx(struct mutex *lock);
#line 185  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mutex.h"
#line 832  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/wcn36xx/wcn36xx.ko/concurrency safety/0/concurrency safety/weaver/smd.i.aux"
static void cif_mutex_unlock_scan_lock_of_wcn36xx_0(struct mutex *lock);
#line 81  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jiffies.h"
#line 81 
extern unsigned long jiffies;
#line 291 
#line 291 
unsigned int jiffies_to_msecs(unsigned long);
#line 302 
#line 302 
unsigned long __msecs_to_jiffies(unsigned int);
#line 309  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jiffies.h"
__inline static unsigned long _msecs_to_jiffies(unsigned int m)
{
  #line 311 
  return (unsigned long)(((long)m + 3L) / 4L);
}

#line 364  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jiffies.h"
__inline static unsigned long msecs_to_jiffies(unsigned int m)
{
  #line 366 
  if (0 != 0) {
    #line 367 
    if ((int)m < 0) 
                    #line 368 
                    return 4611686018427387902UL;
    #line 369 
    return _msecs_to_jiffies(m);
  }
  else {
    #line 371 
    return __msecs_to_jiffies(m);
  }
}

#line 407  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/workqueue.h"
#line 407 
struct workqueue_struct *alloc_workqueue(char *, unsigned int, int , ...);
#line 436 
#line 436 
void destroy_workqueue(struct workqueue_struct *);
#line 496 
#line 301  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/wcn36xx/wcn36xx.ko/concurrency safety/0/concurrency safety/weaver/smd.i.aux"
static bool cif_queue_work(struct workqueue_struct *wq, struct work_struct *work);
#line 542  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/slab.h"
#line 390  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/wcn36xx/wcn36xx.ko/concurrency safety/0/concurrency safety/weaver/smd.i.aux"
static void *kmalloc_0(size_t size, gfp_t flags);
#line 668  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/slab.h"
#line 425  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/wcn36xx/wcn36xx.ko/concurrency safety/0/concurrency safety/weaver/smd.i.aux"
static void *kzalloc_1(size_t size, gfp_t flags);
#line 45  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/firmware.h"
#line 804  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/wcn36xx/wcn36xx.ko/concurrency safety/0/concurrency safety/weaver/smd.i.aux"
static int cif_request_firmware(struct firmware **fw, char *name, struct device *device);
#line 125  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rpmsg.h"
#line 125 
int rpmsg_send(struct rpmsg_endpoint *, void *, int);
#line 4672  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/mac80211.h"
#line 4672 
void ieee80211_report_low_ack(struct ieee80211_sta *, u32);
#line 5715 
#line 5715 
void ieee80211_connection_loss(struct ieee80211_vif *);
#line 6064  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/mac80211.h"
__inline static bool conf_is_ht40_minus(struct ieee80211_conf *conf)
{
  #line 6066 
  return (_Bool)((conf->chandef.width == (unsigned int)NL80211_CHAN_WIDTH_40 && conf->chandef.center_freq1 < (conf->chandef.chan)->center_freq) != 0);
}

#line 6071  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/mac80211.h"
__inline static bool conf_is_ht40_plus(struct ieee80211_conf *conf)
{
  #line 6073 
  return (_Bool)((conf->chandef.width == (unsigned int)NL80211_CHAN_WIDTH_40 && conf->chandef.center_freq1 > (conf->chandef.chan)->center_freq) != 0);
}

#line 89  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/wcn36xx/smd.h"
#line 810  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/wcn36xx/smd.c"
int wcn36xx_smd_process_ptt_msg(struct wcn36xx *wcn, struct ieee80211_vif *vif, void *ptt_msg, size_t len, void **ptt_rsp_msg);
#line 122  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/wcn36xx/smd.h"
#line 1999  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/wcn36xx/smd.c"
int wcn36xx_smd_dump_cmd_req(struct wcn36xx *wcn, u32 arg1, u32 arg2, u32 arg3, u32 arg4, u32 arg5);
#line 125  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/wcn36xx/smd.h"
#line 2031  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/wcn36xx/smd.c"
void set_feat_caps(u32 *bitmap, enum place_holder_in_cap_bitmap cap);
#line 127  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/wcn36xx/smd.h"
#line 2060  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/wcn36xx/smd.c"
void clear_feat_caps(u32 *bitmap, enum place_holder_in_cap_bitmap cap);
#line 36  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/wcn36xx/smd.c"
static struct wcn36xx_cfg_val wcn36xx_cfg_vals[43U] = {{.cfg_id = 1U, .value = 1U}, {.cfg_id = 2U, .value = 1U}, {.cfg_id = 3U}, {.cfg_id = 4U, .value = 785U}, {.cfg_id = 5U, .value = 5U}, {.cfg_id = 6U, .value = 1U}, {.cfg_id = 7U}, {.cfg_id = 8U, .value = 3U}, {.cfg_id = 9U, .value = 6000U}, {.cfg_id = 10U, .value = 64U}, {.cfg_id = 11U, .value = 2347U}, {.cfg_id = 12U, .value = 6U}, {.cfg_id = 13U, .value = 6U}, {.cfg_id = 14U, .value = 8000U}, {.cfg_id = 15U, .value = 5U}, {.cfg_id = 16U, .value = 10U}, {.cfg_id = 17U, .value = 15U}, {.cfg_id = 18U}, {.cfg_id = 19U, .value = 4U}, {.cfg_id = 20U}, {.cfg_id = 21U}, {.cfg_id = 22U, .value = 5U}, {.cfg_id = 23U, .value = 1U}, {.cfg_id = 24U, .value = 5U}, {.cfg_id = 26U, .value = 5U}, {.cfg_id = 27U, .value = 40U}, {.cfg_id = 28U, .value = 200U}, {.cfg_id = 29U, .value = 1U}, {.cfg_id = 30U, .value = 1U}, {.cfg_id = 31U, .value = 20U}, {.cfg_id = 32U, .value = 10U}, {.cfg_id = 33U, .value = 30000U}, {.cfg_id = 34U}, {.cfg_id = 40U, .value = 128U}, {.cfg_id = 41U, .value = 2560U}, {.cfg_id = 57U}, {.cfg_id = 64U, .value = 1U}, {.cfg_id = 75U, .value = 1U}, {.cfg_id = 99U}, {.cfg_id = 87U, .value = 120000U}, {.cfg_id = 91U, .value = 30000U}, {.cfg_id = 98U, .value = 10U}, {.cfg_id = 100U}};
#line 82  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/wcn36xx/smd.c"
static int put_cfg_tlv_u32(struct wcn36xx *wcn, size_t *len, u32 id, u32 value)
{
  #line 84 
  struct wcn36xx_hal_cfg *entry;
  #line 85 
  u32 *val;
  #line 87 
  if (*len + 12UL > 4095UL) {
    #line 88 
    printk((char *)"\001");
    #line 89 
    return -12;
  }
  #line 92 
  entry = (struct wcn36xx_hal_cfg *)(wcn->hal_buf + *len);
  #line 93 
  entry->id = (unsigned short)id;
  #line 94 
  entry->len = (unsigned short)4U;
  #line 95 
  entry->pad_bytes = (unsigned short)0U;
  #line 96 
  entry->reserve = (unsigned short)0U;
  #line 98 
  val = (u32 *)(entry + 1U);
  #line 99 
  *val = value;
  #line 101 
  *len += 12UL;
  #line 103 
  return 0;
}

#line 106  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/wcn36xx/smd.c"
static void wcn36xx_smd_set_bss_nw_type(struct wcn36xx *wcn, struct ieee80211_sta *sta, struct wcn36xx_hal_config_bss_params *bss_params)
{
  #line 110 
  if (((wcn->hw)->conf.chandef.chan)->band == (unsigned int)NL80211_BAND_5GHZ) 
    #line 111 
    bss_params->nw_type = WCN36XX_HAL_11A_NW_TYPE;
  else 
    #line 112 
    if (sta != (struct ieee80211_sta *)0 && (int)sta->ht_cap.ht_supported != 0) 
      #line 113 
      bss_params->nw_type = WCN36XX_HAL_11N_NW_TYPE;
    else 
      #line 114 
      if (sta != (struct ieee80211_sta *)0 && (sta->supp_rates[0] & 127U) != 0U) 
        #line 115 
        bss_params->nw_type = WCN36XX_HAL_11G_NW_TYPE; else 
                                                            #line 117 
                                                            bss_params->nw_type = WCN36XX_HAL_11B_NW_TYPE;
  #line 118 
  return;
}

#line 120  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/wcn36xx/smd.c"
__inline static u8 is_cap_supported(unsigned long caps, unsigned long flag)
{
  #line 122 
  return (unsigned char)((caps & flag) != 0UL);
}

#line 124  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/wcn36xx/smd.c"
static void wcn36xx_smd_set_bss_ht_params(struct ieee80211_vif *vif, struct ieee80211_sta *sta, struct wcn36xx_hal_config_bss_params *bss_params)
{
  #line 128 
  if (sta != (struct ieee80211_sta *)0 && (int)sta->ht_cap.ht_supported != 0) {
    #line 129 
    unsigned long caps = (unsigned long)sta->ht_cap.cap;
    #line 130 
    bss_params->ht = (unsigned char)sta->ht_cap.ht_supported;
    #line 131 
    bss_params->tx_channel_width_set = is_cap_supported(caps,2UL);
    #line 133 
    bss_params->lsig_tx_op_protection_full_support = is_cap_supported(caps,32768UL);
    #line 137 
    bss_params->ht_oper_mode = (enum wcn36xx_hal_ht_operating_mode)vif->bss_conf.ht_operation_mode;
    #line 138 
    bss_params->lln_non_gf_coexist = (unsigned char)(((int)vif->bss_conf.ht_operation_mode & 4) != 0);
    #line 142 
    bss_params->dual_cts_protection = (unsigned char)0U;
    #line 144 
    bss_params->ht20_coexist = (unsigned char)0U;
  }
  #line 146 
  return;
}

#line 148  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/wcn36xx/smd.c"
static void wcn36xx_smd_set_sta_ht_params(struct ieee80211_sta *sta, struct wcn36xx_hal_config_sta_params *sta_params)
{
  #line 151 
  if ((int)sta->ht_cap.ht_supported != 0) {
    #line 152 
    unsigned long caps = (unsigned long)sta->ht_cap.cap;
    #line 153 
    sta_params->ht_capable = (unsigned char)sta->ht_cap.ht_supported;
    #line 154 
    sta_params->tx_channel_width_set = is_cap_supported(caps,2UL);
    #line 156 
    sta_params->lsig_txop_protection = is_cap_supported(caps,32768UL);
    #line 159 
    sta_params->max_ampdu_size = sta->ht_cap.ampdu_factor;
    #line 160 
    sta_params->max_ampdu_density = sta->ht_cap.ampdu_density;
    #line 161 
    sta_params->max_amsdu_size = is_cap_supported(caps,2048UL);
    #line 163 
    sta_params->sgi_20Mhz = is_cap_supported(caps,32UL);
    #line 165 
    sta_params->sgi_40mhz = is_cap_supported(caps,64UL);
    #line 167 
    sta_params->green_field_capable = is_cap_supported(caps,16UL);
    #line 169 
    sta_params->delayed_ba_support = is_cap_supported(caps,1024UL);
    #line 171 
    sta_params->dsss_cck_mode_40mhz = is_cap_supported(caps,4096UL);
  }
  #line 173 
  return;
}

#line 176  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/wcn36xx/smd.c"
static void wcn36xx_smd_set_sta_default_ht_params(struct wcn36xx_hal_config_sta_params *sta_params)
{
  #line 179 
  sta_params->ht_capable = (unsigned char)1U;
  #line 180 
  sta_params->tx_channel_width_set = (unsigned char)1U;
  #line 181 
  sta_params->lsig_txop_protection = (unsigned char)1U;
  #line 182 
  sta_params->max_ampdu_size = (unsigned char)3U;
  #line 183 
  sta_params->max_ampdu_density = (unsigned char)5U;
  #line 184 
  sta_params->max_amsdu_size = (unsigned char)0U;
  #line 185 
  sta_params->sgi_20Mhz = (unsigned char)1U;
  #line 186 
  sta_params->sgi_40mhz = (unsigned char)1U;
  #line 187 
  sta_params->green_field_capable = (unsigned char)1U;
  #line 188 
  sta_params->delayed_ba_support = (unsigned char)0U;
  #line 189 
  sta_params->dsss_cck_mode_40mhz = (unsigned char)1U;
  #line 190 
  return;
}

#line 192  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/wcn36xx/smd.c"
static void wcn36xx_smd_set_sta_params(struct wcn36xx *wcn, struct ieee80211_vif *vif, struct ieee80211_sta *sta, struct wcn36xx_hal_config_sta_params *sta_params)
{
  #line 197 
  struct wcn36xx_vif *vif_priv = wcn36xx_vif_to_priv(vif);
  #line 198 
  struct wcn36xx_sta *sta_priv = (struct wcn36xx_sta *)0;
  #line 199 
  if ((vif->type == (unsigned int)NL80211_IFTYPE_ADHOC || vif->type == (unsigned int)NL80211_IFTYPE_AP) || vif->type == (unsigned int)NL80211_IFTYPE_MESH_POINT) {
    #line 202 
    sta_params->type = (unsigned char)1U;
    #line 203 
    sta_params->sta_index = (unsigned char)255U;
  }
  else {
    #line 205 
    sta_params->type = (unsigned char)0U;
    #line 206 
    sta_params->sta_index = vif_priv->self_sta_index;
  }
  #line 209 
  sta_params->listen_interval = (wcn->hw)->conf.listen_interval;
  #line 216 
  if (vif->type == (unsigned int)NL80211_IFTYPE_STATION) 
                                                         #line 217 
                                                         memcpy((void *)(& sta_params->mac),(void *)(& vif->addr),6UL); else 
                                                                    #line 219 
                                                                    memcpy((void *)(& sta_params->bssid),(void *)(& vif->addr),6UL);
  #line 221 
  sta_params->encrypt_type = (unsigned int)vif_priv->encrypt_type;
  #line 222 
  sta_params->short_preamble_supported = (unsigned char)1U;
  #line 224 
  sta_params->rifs_mode = (unsigned char)0U;
  #line 225 
  sta_params->rmf = (unsigned char)0U;
  #line 226 
  sta_params->action = (unsigned char)0U;
  #line 227 
  sta_params->uapsd = (unsigned char)0U;
  #line 228 
  sta_params->mimo_ps = WCN36XX_HAL_HT_MIMO_PS_STATIC;
  #line 229 
  sta_params->max_ampdu_duration = (unsigned char)0U;
  #line 230 
  sta_params->bssid_index = vif_priv->bss_index;
  #line 231 
  sta_params->p2p = (unsigned char)0U;
  #line 233 
  if (sta != (struct ieee80211_sta *)0) {
    #line 234 
    sta_priv = wcn36xx_sta_to_priv(sta);
    #line 235 
    if (vif->type == (unsigned int)NL80211_IFTYPE_STATION) 
                                                           #line 236 
                                                           memcpy((void *)(& sta_params->bssid),(void *)(& sta->addr),6UL); else 
                                                                    #line 238 
                                                                    memcpy((void *)(& sta_params->mac),(void *)(& sta->addr),6UL);
    #line 239 
    sta_params->wmm_enabled = (unsigned char)sta->wme;
    #line 240 
    sta_params->max_sp_len = sta->max_sp;
    #line 241 
    sta_params->aid = sta_priv->aid;
    #line 242 
    wcn36xx_smd_set_sta_ht_params(sta,sta_params);
    #line 243 
    memcpy((void *)(& sta_params->supported_rates),(void *)(& sta_priv->supported_rates),58UL);
  }
  else {
    #line 246 
    wcn36xx_set_default_rates(& sta_params->supported_rates);
    #line 247 
    wcn36xx_smd_set_sta_default_ht_params(sta_params);
  }
  #line 249 
  return;
}

#line 251  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/wcn36xx/smd.c"
static int wcn36xx_smd_send_and_wait(struct wcn36xx *wcn, size_t len)
{
  #line 253 
  int ret;
  #line 254 
  unsigned long start;
  #line 255 
  struct wcn36xx_hal_msg_header *hdr = (struct wcn36xx_hal_msg_header *)wcn->hal_buf;
  #line 257 
  u16 req_type = (unsigned short)hdr->msg_type;
  #line 259 
  if ((wcn36xx_dbg_mask & 8U) != 0U) 
                                     #line 259 
                                     print_hex_dump((char *)"\001",(char *)"wcn36xx",2,32,1,(void *)wcn->hal_buf,len,(_Bool)0);
  #line 261 
  __init_completion(& wcn->hal_rsp_compl);
  #line 262 
  start = jiffies;
  #line 263 
  ret = rpmsg_send(wcn->smd_channel,(void *)wcn->hal_buf,(int)len);
  #line 264 
  if (ret != 0) {
    #line 265 
    printk((char *)"\001",(int)req_type);
    #line 266 
    goto out;
  }
  #line 268 
  ;
  #line 268 
  if (wait_for_completion_timeout(& wcn->hal_rsp_compl,
                                    msecs_to_jiffies(10000U)) == 0UL) {
    #line 270 
    printk((char *)"\001",(int)req_type,10000);
    #line 272 
    ret = -62;
    #line 273 
    goto out;
  }
  #line 275 
  if ((wcn36xx_dbg_mask & 4U) != 0U) {
    #line 275 
    ;
    #line 275 
    ;
    #line 275 
    printk((char *)"\001",(int)req_type,(int)hdr->msg_type,jiffies_to_msecs(jiffies - start));
  }
  #line 279 
  out: 
       #line 279 
  ;
  #line 280 
  return ret;
}

#line 283  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/wcn36xx/smd.c"
static void init_hal_msg(struct wcn36xx_hal_msg_header *hdr, enum wcn36xx_hal_host_msg_type msg_type, size_t msg_size)
{
  #line 287 
  memset((void *)hdr,0,msg_size + 8UL);
  #line 288 
  hdr->msg_type = (enum wcn36xx_hal_host_msg_type)((unsigned short)msg_type);
  #line 289 
  hdr->msg_version = (enum wcn36xx_hal_host_msg_version)0U;
  #line 290 
  hdr->len = (unsigned int)msg_size + 8U;
  #line 291 
  return;
}

#line 321  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/wcn36xx/smd.c"
static int wcn36xx_smd_rsp_status_check(void *buf, size_t len)
{
  #line 323 
  struct wcn36xx_fw_msg_status_rsp *rsp;
  #line 325 
  if (len <= 11UL) 
                   #line 327 
                   return -5;
  #line 329 
  rsp = (struct wcn36xx_fw_msg_status_rsp *)(buf + 8UL);
  #line 332 
  if (rsp->status != 0U) 
                         #line 333 
                         return (int)rsp->status;
  #line 335 
  return 0;
}

#line 338  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/wcn36xx/smd.c"
int wcn36xx_smd_load_nv(struct wcn36xx *wcn)
{
  #line 340 
  struct nv_data *nv_d;
  #line 341 
  struct wcn36xx_hal_nv_img_download_req_msg msg_body;
  #line 342 
  int fw_bytes_left;
  #line 343 
  int ret;
  #line 344 
  u16 fm_offset = (unsigned short)0U;
  #line 346 
  if (wcn->nv == (struct firmware *)0) {
    #line 347 
    ret = cif_request_firmware(& wcn->nv,(char *)"wlan/prima/WCNSS_qcom_wlan_nv.bin",wcn->dev);
    #line 348 
    if (ret != 0) {
      #line 349 
      printk((char *)"\001",(char *)"wlan/prima/WCNSS_qcom_wlan_nv.bin",ret);
      #line 351 
      goto out;
    }
  }
  #line 355 
  nv_d = (struct nv_data *)(wcn->nv)->data;
  #line 356 
  memset((void *)(& msg_body),0,16UL);
  #line 356 
  msg_body.header.msg_type = (enum wcn36xx_hal_host_msg_type)55U;
  #line 356 
  msg_body.header.msg_version = (enum wcn36xx_hal_host_msg_version)0U;
  #line 356 
  msg_body.header.len = 16U;
  #line 358 
  msg_body.header.len += 3072U;
  #line 360 
  msg_body.frag_number = (unsigned short)0U;
  #line 362 
  cif_mutex_lock_hal_mutex_of_wcn36xx(& wcn->hal_mutex);
  #line 364 
  while (1) {
    #line 365 
    fw_bytes_left = (int)(((wcn->nv)->size - (size_t)fm_offset) + (size_t)4294967292U);
    #line 366 
    if (fw_bytes_left > 3072) {
      #line 367 
      msg_body.last_fragment = (unsigned short)0U;
      #line 368 
      msg_body.nv_img_buffer_size = 3072U;
    }
    else {
      #line 370 
      msg_body.last_fragment = (unsigned short)1U;
      #line 371 
      msg_body.nv_img_buffer_size = (unsigned int)fw_bytes_left;
      #line 374 
      msg_body.header.len = (unsigned int)fw_bytes_left + 16U;
    }
    #line 379 
    memcpy((void *)wcn->hal_buf,(void *)(& msg_body),16UL);
    #line 382 
    memcpy((void *)(wcn->hal_buf + 16UL),(void *)(& nv_d->table + (unsigned long)fm_offset),(unsigned long)msg_body.nv_img_buffer_size);
    #line 386 
    ret = wcn36xx_smd_send_and_wait(wcn,(unsigned long)msg_body.header.len);
    #line 387 
    if (ret != 0) 
                  #line 388 
                  goto out_unlock;
    #line 389 
    ret = wcn36xx_smd_rsp_status_check((void *)wcn->hal_buf,wcn->hal_rsp_len);
    #line 391 
    if (ret != 0) {
      #line 392 
      printk((char *)"\001",ret);
      #line 394 
      goto out_unlock;
    }
    #line 396 
    msg_body.frag_number = (u16)((int)msg_body.frag_number + 1);
    #line 397 
    fm_offset = (unsigned short)((unsigned int)fm_offset + 3072U);
    #line 398 
    if (! ((unsigned int)msg_body.last_fragment != 1U)) 
                                                        #line 364 
                                                        break;
  }
  #line 401 
  out_unlock: 
              #line 401 
  ;
  #line 402 
  cif_mutex_unlock_hal_mutex_of_wcn36xx(& wcn->hal_mutex);
  #line 403 
  out: 
       #line 403 
  ;
  #line 403 
  return ret;
}

#line 406  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/wcn36xx/smd.c"
static int wcn36xx_smd_start_rsp(struct wcn36xx *wcn, void *buf, size_t len)
{
  #line 408 
  struct wcn36xx_hal_mac_start_rsp_msg *rsp;
  #line 410 
  if (len <= 143UL) 
                    #line 411 
                    return -5;
  #line 413 
  rsp = (struct wcn36xx_hal_mac_start_rsp_msg *)buf;
  #line 415 
  if ((unsigned int)rsp->start_rsp_params.status != 0U) 
                                                        #line 416 
                                                        return -5;
  #line 418 
  memcpy((void *)(& wcn->crm_version),(void *)(& rsp->start_rsp_params.crm_version),64UL);
  #line 420 
  memcpy((void *)(& wcn->wlan_version),(void *)(& rsp->start_rsp_params.wlan_version),64UL);
  #line 424 
  wcn->crm_version[64] = (unsigned char)0U;
  #line 425 
  wcn->wlan_version[64] = (unsigned char)0U;
  #line 427 
  wcn->fw_revision = rsp->start_rsp_params.version.revision;
  #line 428 
  wcn->fw_version = rsp->start_rsp_params.version.version;
  #line 429 
  wcn->fw_minor = rsp->start_rsp_params.version.minor;
  #line 430 
  wcn->fw_major = rsp->start_rsp_params.version.major;
  #line 432 
  if ((int)wcn->first_boot != 0) {
    #line 433 
    wcn->first_boot = (_Bool)0;
    #line 434 
    printk((char *)"\001",(u8 *)(& wcn->wlan_version),(u8 *)(& wcn->crm_version));
    #line 437 
    printk((char *)"\001",(int)wcn->fw_major,(int)wcn->fw_minor,(int)wcn->fw_version,(int)wcn->fw_revision,(int)rsp->start_rsp_params.stations,(int)rsp->start_rsp_params.bssids);
  }
  #line 443 
  return 0;
}

#line 446  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/wcn36xx/smd.c"
int wcn36xx_smd_start(struct wcn36xx *wcn)
{
  #line 448 
  struct wcn36xx_hal_mac_start_req_msg msg_body;
  #line 448 
  struct wcn36xx_hal_mac_start_req_msg *body;
  #line 449 
  int ret;
  #line 450 
  int i;
  #line 451 
  size_t len;
  #line 453 
  cif_mutex_lock_hal_mutex_of_wcn36xx(& wcn->hal_mutex);
  #line 454 
  memset((void *)(& msg_body),0,16UL);
  #line 454 
  msg_body.header.msg_type = (enum wcn36xx_hal_host_msg_type)0U;
  #line 454 
  msg_body.header.msg_version = (enum wcn36xx_hal_host_msg_version)0U;
  #line 454 
  msg_body.header.len = 16U;
  #line 456 
  msg_body.params.type = DRIVER_TYPE_PRODUCTION;
  #line 457 
  msg_body.params.len = 0U;
  #line 459 
  memset((void *)wcn->hal_buf,0,(unsigned long)msg_body.header.len);
  #line 459 
  memcpy((void *)wcn->hal_buf,(void *)(& msg_body),16UL);
  #line 461 
  body = (struct wcn36xx_hal_mac_start_req_msg *)wcn->hal_buf;
  #line 462 
  len = (unsigned long)body->header.len;
  #line 464 
  i = 0;
  #line 464 
  while ((unsigned int)i <= 42U) {
    #line 465 
    ret = put_cfg_tlv_u32(wcn,& len,wcn36xx_cfg_vals[i].cfg_id,wcn36xx_cfg_vals[i].value);
    #line 467 
    if (ret != 0) 
                  #line 468 
                  goto out;
    #line 464 
    i ++;
  }
  #line 470 
  body->header.len = (unsigned int)len;
  #line 471 
  body->params.len = (unsigned int)len + 4294967280U;
  #line 473 
  if ((wcn36xx_dbg_mask & 256U) != 0U) 
                                       #line 473 
                                       printk((char *)"\001",(unsigned int)msg_body.params.type);
  #line 476 
  ret = wcn36xx_smd_send_and_wait(wcn,(unsigned long)body->header.len);
  #line 477 
  if (ret != 0) {
    #line 478 
    printk((char *)"\001");
    #line 479 
    goto out;
  }
  #line 482 
  ret = wcn36xx_smd_start_rsp(wcn,(void *)wcn->hal_buf,wcn->hal_rsp_len);
  #line 483 
  if (ret != 0) {
    #line 484 
    printk((char *)"\001",ret);
    #line 485 
    goto out;
  }
  #line 488 
  out: 
       #line 488 
  ;
  #line 489 
  cif_mutex_unlock_hal_mutex_of_wcn36xx(& wcn->hal_mutex);
  #line 490 
  return ret;
}

#line 493  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/wcn36xx/smd.c"
int wcn36xx_smd_stop(struct wcn36xx *wcn)
{
  #line 495 
  struct wcn36xx_hal_mac_stop_req_msg msg_body;
  #line 496 
  int ret;
  #line 498 
  cif_mutex_lock_hal_mutex_of_wcn36xx(& wcn->hal_mutex);
  #line 499 
  memset((void *)(& msg_body),0,12UL);
  #line 499 
  msg_body.header.msg_type = (enum wcn36xx_hal_host_msg_type)2U;
  #line 499 
  msg_body.header.msg_version = (enum wcn36xx_hal_host_msg_version)0U;
  #line 499 
  msg_body.header.len = 12U;
  #line 501 
  msg_body.stop_req_params.reason = HAL_STOP_TYPE_RF_KILL;
  #line 503 
  memset((void *)wcn->hal_buf,0,(unsigned long)msg_body.header.len);
  #line 503 
  memcpy((void *)wcn->hal_buf,(void *)(& msg_body),12UL);
  #line 505 
  ret = wcn36xx_smd_send_and_wait(wcn,(unsigned long)msg_body.header.len);
  #line 506 
  if (ret != 0) {
    #line 507 
    printk((char *)"\001");
    #line 508 
    goto out;
  }
  #line 510 
  ret = wcn36xx_smd_rsp_status_check((void *)wcn->hal_buf,wcn->hal_rsp_len);
  #line 511 
  if (ret != 0) {
    #line 512 
    printk((char *)"\001",ret);
    #line 513 
    goto out;
  }
  #line 515 
  out: 
       #line 515 
  ;
  #line 516 
  cif_mutex_unlock_hal_mutex_of_wcn36xx(& wcn->hal_mutex);
  #line 517 
  return ret;
}

#line 520  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/wcn36xx/smd.c"
int wcn36xx_smd_init_scan(struct wcn36xx *wcn, enum wcn36xx_hal_sys_mode mode)
{
  #line 522 
  struct wcn36xx_hal_init_scan_req_msg msg_body;
  #line 523 
  int ret;
  #line 525 
  cif_mutex_lock_hal_mutex_of_wcn36xx(& wcn->hal_mutex);
  #line 526 
  memset((void *)(& msg_body),0,48UL);
  #line 526 
  msg_body.header.msg_type = (enum wcn36xx_hal_host_msg_type)4U;
  #line 526 
  msg_body.header.msg_version = (enum wcn36xx_hal_host_msg_version)0U;
  #line 526 
  msg_body.header.len = 48U;
  #line 528 
  msg_body.mode = mode;
  #line 530 
  memset((void *)wcn->hal_buf,0,(unsigned long)msg_body.header.len);
  #line 530 
  memcpy((void *)wcn->hal_buf,(void *)(& msg_body),48UL);
  #line 532 
  if ((wcn36xx_dbg_mask & 256U) != 0U) 
                                       #line 532 
                                       printk((char *)"\001",(unsigned int)msg_body.mode);
  #line 534 
  ret = wcn36xx_smd_send_and_wait(wcn,(unsigned long)msg_body.header.len);
  #line 535 
  if (ret != 0) {
    #line 536 
    printk((char *)"\001");
    #line 537 
    goto out;
  }
  #line 539 
  ret = wcn36xx_smd_rsp_status_check((void *)wcn->hal_buf,wcn->hal_rsp_len);
  #line 540 
  if (ret != 0) {
    #line 541 
    printk((char *)"\001",ret);
    #line 542 
    goto out;
  }
  #line 544 
  out: 
       #line 544 
  ;
  #line 545 
  cif_mutex_unlock_hal_mutex_of_wcn36xx(& wcn->hal_mutex);
  #line 546 
  return ret;
}

#line 549  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/wcn36xx/smd.c"
int wcn36xx_smd_start_scan(struct wcn36xx *wcn, u8 scan_channel)
{
  #line 551 
  struct wcn36xx_hal_start_scan_req_msg msg_body;
  #line 552 
  int ret;
  #line 554 
  cif_mutex_lock_hal_mutex_of_wcn36xx(& wcn->hal_mutex);
  #line 555 
  memset((void *)(& msg_body),0,9UL);
  #line 555 
  msg_body.header.msg_type = (enum wcn36xx_hal_host_msg_type)6U;
  #line 555 
  msg_body.header.msg_version = (enum wcn36xx_hal_host_msg_version)0U;
  #line 555 
  msg_body.header.len = 9U;
  #line 557 
  msg_body.scan_channel = scan_channel;
  #line 559 
  memset((void *)wcn->hal_buf,0,(unsigned long)msg_body.header.len);
  #line 559 
  memcpy((void *)wcn->hal_buf,(void *)(& msg_body),9UL);
  #line 561 
  if ((wcn36xx_dbg_mask & 256U) != 0U) 
                                       #line 561 
                                       printk((char *)"\001",(int)msg_body.scan_channel);
  #line 564 
  ret = wcn36xx_smd_send_and_wait(wcn,(unsigned long)msg_body.header.len);
  #line 565 
  if (ret != 0) {
    #line 566 
    printk((char *)"\001");
    #line 567 
    goto out;
  }
  #line 569 
  ret = wcn36xx_smd_rsp_status_check((void *)wcn->hal_buf,wcn->hal_rsp_len);
  #line 570 
  if (ret != 0) {
    #line 571 
    printk((char *)"\001",ret);
    #line 572 
    goto out;
  }
  #line 574 
  out: 
       #line 574 
  ;
  #line 575 
  cif_mutex_unlock_hal_mutex_of_wcn36xx(& wcn->hal_mutex);
  #line 576 
  return ret;
}

#line 579  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/wcn36xx/smd.c"
int wcn36xx_smd_end_scan(struct wcn36xx *wcn, u8 scan_channel)
{
  #line 581 
  struct wcn36xx_hal_end_scan_req_msg msg_body;
  #line 582 
  int ret;
  #line 584 
  cif_mutex_lock_hal_mutex_of_wcn36xx(& wcn->hal_mutex);
  #line 585 
  memset((void *)(& msg_body),0,9UL);
  #line 585 
  msg_body.header.msg_type = (enum wcn36xx_hal_host_msg_type)8U;
  #line 585 
  msg_body.header.msg_version = (enum wcn36xx_hal_host_msg_version)0U;
  #line 585 
  msg_body.header.len = 9U;
  #line 587 
  msg_body.scan_channel = scan_channel;
  #line 589 
  memset((void *)wcn->hal_buf,0,(unsigned long)msg_body.header.len);
  #line 589 
  memcpy((void *)wcn->hal_buf,(void *)(& msg_body),9UL);
  #line 591 
  if ((wcn36xx_dbg_mask & 256U) != 0U) 
                                       #line 591 
                                       printk((char *)"\001",(int)msg_body.scan_channel);
  #line 594 
  ret = wcn36xx_smd_send_and_wait(wcn,(unsigned long)msg_body.header.len);
  #line 595 
  if (ret != 0) {
    #line 596 
    printk((char *)"\001");
    #line 597 
    goto out;
  }
  #line 599 
  ret = wcn36xx_smd_rsp_status_check((void *)wcn->hal_buf,wcn->hal_rsp_len);
  #line 600 
  if (ret != 0) {
    #line 601 
    printk((char *)"\001",ret);
    #line 602 
    goto out;
  }
  #line 604 
  out: 
       #line 604 
  ;
  #line 605 
  cif_mutex_unlock_hal_mutex_of_wcn36xx(& wcn->hal_mutex);
  #line 606 
  return ret;
}

#line 609  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/wcn36xx/smd.c"
int wcn36xx_smd_finish_scan(struct wcn36xx *wcn, enum wcn36xx_hal_sys_mode mode)
{
  #line 612 
  struct wcn36xx_hal_finish_scan_req_msg msg_body;
  #line 613 
  int ret;
  #line 615 
  cif_mutex_lock_hal_mutex_of_wcn36xx(& wcn->hal_mutex);
  #line 616 
  memset((void *)(& msg_body),0,53UL);
  #line 616 
  msg_body.header.msg_type = (enum wcn36xx_hal_host_msg_type)10U;
  #line 616 
  msg_body.header.msg_version = (enum wcn36xx_hal_host_msg_version)0U;
  #line 616 
  msg_body.header.len = 53U;
  #line 618 
  msg_body.mode = mode;
  #line 620 
  memset((void *)wcn->hal_buf,0,(unsigned long)msg_body.header.len);
  #line 620 
  memcpy((void *)wcn->hal_buf,(void *)(& msg_body),53UL);
  #line 622 
  if ((wcn36xx_dbg_mask & 256U) != 0U) 
                                       #line 622 
                                       printk((char *)"\001",(unsigned int)msg_body.mode);
  #line 625 
  ret = wcn36xx_smd_send_and_wait(wcn,(unsigned long)msg_body.header.len);
  #line 626 
  if (ret != 0) {
    #line 627 
    printk((char *)"\001");
    #line 628 
    goto out;
  }
  #line 630 
  ret = wcn36xx_smd_rsp_status_check((void *)wcn->hal_buf,wcn->hal_rsp_len);
  #line 631 
  if (ret != 0) {
    #line 632 
    printk((char *)"\001",ret);
    #line 633 
    goto out;
  }
  #line 635 
  out: 
       #line 635 
  ;
  #line 636 
  cif_mutex_unlock_hal_mutex_of_wcn36xx(& wcn->hal_mutex);
  #line 637 
  return ret;
}

#line 640  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/wcn36xx/smd.c"
int wcn36xx_smd_start_hw_scan(struct wcn36xx *wcn, struct ieee80211_vif *vif, struct cfg80211_scan_request *req)
{
  #line 675 
  int tmp_5;
  #line 667 
  unsigned char __UNIQUE_ID___x554;
  #line 667 
  int tmp_1;
  #line 675 
  unsigned char __UNIQUE_ID___x558;
  #line 644 
  struct wcn36xx_hal_start_scan_offload_req_msg *msg_body;
  #line 645 
  int ret;
  #line 645 
  int i;
  #line 643 
  struct wcn36xx_vif *vif_priv = wcn36xx_vif_to_priv(vif);
  #line 647 
  if (req->ie_len > 500UL) 
                           #line 648 
                           return -22;
  #line 650 
  cif_mutex_lock_hal_mutex_of_wcn36xx(& wcn->hal_mutex);
  #line 651 
  msg_body = (struct wcn36xx_hal_start_scan_offload_req_msg *)kzalloc_1(971UL,3264U);
  #line 652 
  if (msg_body == (struct wcn36xx_hal_start_scan_offload_req_msg *)0) {
    #line 653 
    ret = -12;
    #line 654 
    goto out;
  }
  #line 657 
  memset((void *)msg_body,0,971UL);
  #line 657 
  msg_body->header.msg_type = (enum wcn36xx_hal_host_msg_type)204U;
  #line 657 
  msg_body->header.msg_version = (enum wcn36xx_hal_host_msg_version)0U;
  #line 657 
  msg_body->header.len = 971U;
  #line 659 
  msg_body->scan_type = WCN36XX_HAL_SCAN_TYPE_ACTIVE;
  #line 660 
  msg_body->min_ch_time = 30U;
  #line 661 
  msg_body->max_ch_time = 100U;
  #line 662 
  msg_body->scan_hidden = (unsigned char)1U;
  #line 663 
  memcpy((void *)(& msg_body->mac),(void *)(& vif->addr),6UL);
  #line 664 
  msg_body->bss_type = vif_priv->bss_type;
  #line 665 
  msg_body->p2p_search = (unsigned char)vif->p2p;
  {
    #line 667 
    __UNIQUE_ID___x554 = (unsigned char)req->n_ssids;
    #line 667 
    unsigned char __UNIQUE_ID___y555 = (unsigned char)10U;
    #line 667 
    if ((int)__UNIQUE_ID___x554 < (int)__UNIQUE_ID___y555) 
                                                           #line 667 
                                                           tmp_1 = (int)__UNIQUE_ID___x554; else 
                                                                    #line 667 
                                                                    tmp_1 = (int)__UNIQUE_ID___y555;
    }
  #line 667 
  msg_body->num_ssid = (unsigned char)tmp_1;
  #line 668 
  i = 0;
  #line 668 
  while ((int)msg_body->num_ssid > i) {
    {
      #line 669 
      unsigned char __UNIQUE_ID___x556;
      #line 669 
      int tmp_3;
      {
        #line 669 
        __UNIQUE_ID___x556 = (req->ssids + (unsigned long)i)->ssid_len;
        #line 669 
        unsigned char __UNIQUE_ID___y557 = (unsigned char)32U;
        #line 669 
        if ((int)__UNIQUE_ID___x556 < (int)__UNIQUE_ID___y557) 
                                                               #line 669 
                                                               tmp_3 = (int)__UNIQUE_ID___x556; else 
                                                                    #line 669 
                                                                    tmp_3 = (int)__UNIQUE_ID___y557;
        }
      #line 669 
      msg_body->ssids[i].length = (unsigned char)tmp_3;
      #line 671 
      memcpy((void *)(& msg_body->ssids[i].ssid),(void *)(& (req->ssids + (unsigned long)i)->ssid),(unsigned long)msg_body->ssids[i].length);
    }
    #line 668 
    i ++;
  }
  {
    #line 675 
    __UNIQUE_ID___x558 = (unsigned char)req->n_channels;
    #line 675 
    unsigned char __UNIQUE_ID___y559 = (unsigned char)80U;
    #line 675 
    if ((int)__UNIQUE_ID___x558 < (int)__UNIQUE_ID___y559) 
                                                           #line 675 
                                                           tmp_5 = (int)__UNIQUE_ID___x558; else 
                                                                    #line 675 
                                                                    tmp_5 = (int)__UNIQUE_ID___y559;
    }
  #line 675 
  msg_body->num_channel = (unsigned char)tmp_5;
  #line 677 
  i = 0;
  #line 677 
  while ((int)msg_body->num_channel > i) {
    #line 678 
    msg_body->channels[i] = (unsigned char)(req->channels[i])->hw_value;
    #line 677 
    i ++;
  }
  #line 680 
  msg_body->header.len += 4294966796U;
  #line 682 
  if (req->ie_len != 0UL) {
    #line 683 
    msg_body->ie_len = (unsigned short)req->ie_len;
    #line 684 
    msg_body->header.len += (unsigned int)req->ie_len;
    #line 685 
    memcpy((void *)(& msg_body->ie),(void *)req->ie,req->ie_len);
  }
  #line 688 
  memset((void *)wcn->hal_buf,0,(unsigned long)msg_body->header.len);
  #line 688 
  memcpy((void *)wcn->hal_buf,(void *)msg_body,971UL);
  #line 690 
  if ((wcn36xx_dbg_mask & 256U) != 0U) {
    #line 690 
    char *tmp_7;
    #line 690 
    if ((unsigned int)msg_body->p2p_search != 0U) 
                                                  #line 690 
                                                  tmp_7 = (char *)"yes"; else 
                                                                    #line 690 
                                                                    tmp_7 = (char *)"no";
    #line 690 
    ;
    #line 690 
    ;
    #line 690 
    printk((char *)"\001",(int)msg_body->num_channel,(int)msg_body->num_ssid,tmp_7);
  }
  #line 695 
  ret = wcn36xx_smd_send_and_wait(wcn,(unsigned long)msg_body->header.len);
  #line 696 
  if (ret != 0) {
    #line 697 
    printk((char *)"\001");
    #line 698 
    goto out;
  }
  #line 700 
  ret = wcn36xx_smd_rsp_status_check((void *)wcn->hal_buf,wcn->hal_rsp_len);
  #line 701 
  if (ret != 0) {
    #line 702 
    printk((char *)"\001",ret);
    #line 704 
    goto out;
  }
  #line 706 
  out: 
       #line 706 
  ;
  #line 707 
  kfree((void *)msg_body);
  #line 708 
  cif_mutex_unlock_hal_mutex_of_wcn36xx(& wcn->hal_mutex);
  #line 709 
  return ret;
}

#line 712  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/wcn36xx/smd.c"
int wcn36xx_smd_stop_hw_scan(struct wcn36xx *wcn)
{
  #line 714 
  struct wcn36xx_hal_stop_scan_offload_req_msg msg_body;
  #line 715 
  int ret;
  #line 717 
  cif_mutex_lock_hal_mutex_of_wcn36xx(& wcn->hal_mutex);
  #line 718 
  memset((void *)(& msg_body),0,8UL);
  #line 718 
  msg_body.header.msg_type = (enum wcn36xx_hal_host_msg_type)206U;
  #line 718 
  msg_body.header.msg_version = (enum wcn36xx_hal_host_msg_version)0U;
  #line 718 
  msg_body.header.len = 8U;
  #line 719 
  memset((void *)wcn->hal_buf,0,(unsigned long)msg_body.header.len);
  #line 719 
  memcpy((void *)wcn->hal_buf,(void *)(& msg_body),8UL);
  #line 721 
  if ((wcn36xx_dbg_mask & 256U) != 0U) 
                                       #line 721 
                                       printk((char *)"\001");
  #line 723 
  ret = wcn36xx_smd_send_and_wait(wcn,(unsigned long)msg_body.header.len);
  #line 724 
  if (ret != 0) {
    #line 725 
    printk((char *)"\001");
    #line 726 
    goto out;
  }
  #line 728 
  ret = wcn36xx_smd_rsp_status_check((void *)wcn->hal_buf,wcn->hal_rsp_len);
  #line 729 
  if (ret != 0) {
    #line 730 
    printk((char *)"\001",ret);
    #line 732 
    goto out;
  }
  #line 734 
  out: 
       #line 734 
  ;
  #line 735 
  cif_mutex_unlock_hal_mutex_of_wcn36xx(& wcn->hal_mutex);
  #line 736 
  return ret;
}

#line 739  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/wcn36xx/smd.c"
static int wcn36xx_smd_switch_channel_rsp(void *buf, size_t len)
{
  #line 741 
  struct wcn36xx_hal_switch_channel_rsp_msg *rsp;
  #line 742 
  int ret;
  #line 744 
  ret = wcn36xx_smd_rsp_status_check(buf,len);
  #line 745 
  if (ret != 0) 
                #line 746 
                return ret;
  #line 747 
  rsp = (struct wcn36xx_hal_switch_channel_rsp_msg *)buf;
  #line 748 
  if ((wcn36xx_dbg_mask & 256U) != 0U) 
                                       #line 748 
                                       printk((char *)"\001",(int)rsp->channel_number,rsp->status);
  #line 750 
  return ret;
}

#line 753  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/wcn36xx/smd.c"
int wcn36xx_smd_switch_channel(struct wcn36xx *wcn, struct ieee80211_vif *vif, int ch)
{
  #line 756 
  struct wcn36xx_hal_switch_channel_req_msg msg_body;
  #line 757 
  int ret;
  #line 759 
  cif_mutex_lock_hal_mutex_of_wcn36xx(& wcn->hal_mutex);
  #line 760 
  memset((void *)(& msg_body),0,28UL);
  #line 760 
  msg_body.header.msg_type = (enum wcn36xx_hal_host_msg_type)42U;
  #line 760 
  msg_body.header.msg_version = (enum wcn36xx_hal_host_msg_version)0U;
  #line 760 
  msg_body.header.len = 28U;
  #line 762 
  msg_body.channel_number = (unsigned char)ch;
  #line 763 
  msg_body.tx_mgmt_power = (unsigned char)191U;
  #line 764 
  msg_body.max_tx_power = (unsigned char)191U;
  #line 765 
  memcpy((void *)(& msg_body.self_sta_mac_addr),(void *)(& vif->addr),6UL);
  #line 767 
  memset((void *)wcn->hal_buf,0,(unsigned long)msg_body.header.len);
  #line 767 
  memcpy((void *)wcn->hal_buf,(void *)(& msg_body),28UL);
  #line 769 
  ret = wcn36xx_smd_send_and_wait(wcn,(unsigned long)msg_body.header.len);
  #line 770 
  if (ret != 0) {
    #line 771 
    printk((char *)"\001");
    #line 772 
    goto out;
  }
  #line 774 
  ret = wcn36xx_smd_switch_channel_rsp((void *)wcn->hal_buf,wcn->hal_rsp_len);
  #line 775 
  if (ret != 0) {
    #line 776 
    printk((char *)"\001",ret);
    #line 777 
    goto out;
  }
  #line 779 
  out: 
       #line 779 
  ;
  #line 780 
  cif_mutex_unlock_hal_mutex_of_wcn36xx(& wcn->hal_mutex);
  #line 781 
  return ret;
}

#line 784  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/wcn36xx/smd.c"
static int wcn36xx_smd_process_ptt_msg_rsp(void *buf, size_t len, void **p_ptt_rsp_msg)
{
  #line 787 
  struct wcn36xx_hal_process_ptt_msg_rsp_msg *rsp;
  #line 788 
  int ret;
  #line 790 
  ret = wcn36xx_smd_rsp_status_check(buf,len);
  #line 791 
  if (ret != 0) 
                #line 792 
                return ret;
  #line 794 
  rsp = (struct wcn36xx_hal_process_ptt_msg_rsp_msg *)buf;
  #line 796 
  if ((wcn36xx_dbg_mask & 256U) != 0U) 
                                       #line 796 
                                       printk((char *)"\001",rsp->header.len);
  #line 798 
  if ((wcn36xx_dbg_mask & 512U) != 0U) 
                                       #line 798 
                                       print_hex_dump((char *)"\001",(char *)"wcn36xx",2,32,1,(void *)(& rsp->ptt_msg),(unsigned long)rsp->header.len + 18446744073709551612UL,(_Bool)0);
  #line 801 
  if (rsp->header.len != 0U) {
    #line 802 
    *p_ptt_rsp_msg = cif_kmemdup((void *)(& rsp->ptt_msg),(unsigned long)rsp->header.len,2592U);
    #line 804 
    if (*p_ptt_rsp_msg == (void *)0) 
                                     #line 805 
                                     return -12;
  }
  #line 807 
  return ret;
}

#line 810  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/wcn36xx/smd.c"
int wcn36xx_smd_process_ptt_msg(struct wcn36xx *wcn, struct ieee80211_vif *vif, void *ptt_msg, size_t len, void **ptt_rsp_msg)
{
  #line 814 
  struct wcn36xx_hal_process_ptt_msg_req_msg *p_msg_body;
  #line 815 
  int ret;
  #line 817 
  cif_mutex_lock_hal_mutex_of_wcn36xx(& wcn->hal_mutex);
  #line 818 
  p_msg_body = (struct wcn36xx_hal_process_ptt_msg_req_msg *)kmalloc_0(len + 8UL,2592U);
  #line 821 
  if (p_msg_body == (struct wcn36xx_hal_process_ptt_msg_req_msg *)0) {
    #line 822 
    ret = -12;
    #line 823 
    goto out_nomem;
  }
  #line 825 
  memset((void *)p_msg_body,0,len + 8UL);
  #line 825 
  p_msg_body->header.msg_type = (enum wcn36xx_hal_host_msg_type)70U;
  #line 825 
  p_msg_body->header.msg_version = (enum wcn36xx_hal_host_msg_version)0U;
  #line 825 
  p_msg_body->header.len = (unsigned int)len + 8U;
  #line 827 
  memcpy((void *)(& p_msg_body->ptt_msg),ptt_msg,len);
  #line 829 
  memset((void *)wcn->hal_buf,0,(unsigned long)p_msg_body->header.len);
  #line 829 
  memcpy((void *)wcn->hal_buf,(void *)p_msg_body,(unsigned long)p_msg_body->header.len);
  #line 831 
  ret = wcn36xx_smd_send_and_wait(wcn,(unsigned long)p_msg_body->header.len);
  #line 832 
  if (ret != 0) {
    #line 833 
    printk((char *)"\001");
    #line 834 
    goto out;
  }
  #line 836 
  ret = wcn36xx_smd_process_ptt_msg_rsp((void *)wcn->hal_buf,wcn->hal_rsp_len,ptt_rsp_msg);
  #line 838 
  if (ret != 0) {
    #line 839 
    printk((char *)"\001",ret);
    #line 840 
    goto out;
  }
  #line 842 
  out: 
       #line 842 
  ;
  #line 843 
  kfree((void *)p_msg_body);
  #line 844 
  out_nomem: 
             #line 844 
  ;
  #line 845 
  cif_mutex_unlock_hal_mutex_of_wcn36xx(& wcn->hal_mutex);
  #line 846 
  return ret;
}

#line 849  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/wcn36xx/smd.c"
static int wcn36xx_smd_update_scan_params_rsp(void *buf, size_t len)
{
  #line 851 
  struct wcn36xx_hal_update_scan_params_resp *rsp;
  #line 853 
  rsp = (struct wcn36xx_hal_update_scan_params_resp *)buf;
  #line 856 
  rsp->status &= 4294934527U;
  #line 858 
  if (rsp->status != 0U) {
    #line 859 
    printk((char *)"\001");
    #line 860 
    return (int)rsp->status;
  }
  #line 863 
  return 0;
}

#line 866  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/wcn36xx/smd.c"
int wcn36xx_smd_update_scan_params(struct wcn36xx *wcn, u8 *channels, size_t channel_count)
{
  #line 869 
  struct wcn36xx_hal_update_scan_params_req_ex msg_body;
  #line 870 
  int ret;
  #line 872 
  cif_mutex_lock_hal_mutex_of_wcn36xx(& wcn->hal_mutex);
  #line 873 
  memset((void *)(& msg_body),0,83UL);
  #line 873 
  msg_body.header.msg_type = (enum wcn36xx_hal_host_msg_type)151U;
  #line 873 
  msg_body.header.msg_version = (enum wcn36xx_hal_host_msg_version)0U;
  #line 873 
  msg_body.header.len = 83U;
  #line 875 
  msg_body.dot11d_enabled = (unsigned char)0U;
  #line 876 
  msg_body.dot11d_resolved = (unsigned char)1U;
  #line 878 
  msg_body.channel_count = (unsigned char)channel_count;
  #line 879 
  memcpy((void *)(& msg_body.channels),(void *)channels,channel_count);
  #line 880 
  msg_body.active_min_ch_time = (unsigned short)60U;
  #line 881 
  msg_body.active_max_ch_time = (unsigned short)120U;
  #line 882 
  msg_body.passive_min_ch_time = (unsigned short)60U;
  #line 883 
  msg_body.passive_max_ch_time = (unsigned short)110U;
  #line 884 
  msg_body.state = PHY_SINGLE_CHANNEL_CENTERED;
  #line 886 
  memset((void *)wcn->hal_buf,0,(unsigned long)msg_body.header.len);
  #line 886 
  memcpy((void *)wcn->hal_buf,(void *)(& msg_body),83UL);
  #line 888 
  if ((wcn36xx_dbg_mask & 256U) != 0U) 
                                       #line 888 
                                       printk((char *)"\001",(int)msg_body.channel_count);
  #line 892 
  ret = wcn36xx_smd_send_and_wait(wcn,(unsigned long)msg_body.header.len);
  #line 893 
  if (ret != 0) {
    #line 894 
    printk((char *)"\001");
    #line 895 
    goto out;
  }
  #line 897 
  ret = wcn36xx_smd_update_scan_params_rsp((void *)wcn->hal_buf,wcn->hal_rsp_len);
  #line 899 
  if (ret != 0) {
    #line 900 
    printk((char *)"\001",ret);
    #line 902 
    goto out;
  }
  #line 904 
  out: 
       #line 904 
  ;
  #line 905 
  cif_mutex_unlock_hal_mutex_of_wcn36xx(& wcn->hal_mutex);
  #line 906 
  return ret;
}

#line 909  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/wcn36xx/smd.c"
static int wcn36xx_smd_add_sta_self_rsp(struct wcn36xx *wcn, struct ieee80211_vif *vif, void *buf, size_t len)
{
  #line 914 
  struct wcn36xx_hal_add_sta_self_rsp_msg *rsp;
  #line 915 
  struct wcn36xx_vif *vif_priv = wcn36xx_vif_to_priv(vif);
  #line 917 
  if (len <= 14UL) 
                   #line 918 
                   return -22;
  #line 920 
  rsp = (struct wcn36xx_hal_add_sta_self_rsp_msg *)buf;
  #line 922 
  if (rsp->status != 0U) {
    #line 923 
    printk((char *)"\001",rsp->status);
    #line 925 
    return (int)rsp->status;
  }
  #line 928 
  if ((wcn36xx_dbg_mask & 256U) != 0U) 
                                       #line 928 
                                       printk((char *)"\001",rsp->status,(int)rsp->self_sta_index,(int)rsp->dpu_index);
  #line 932 
  vif_priv->self_sta_index = rsp->self_sta_index;
  #line 933 
  vif_priv->self_dpu_desc_index = rsp->dpu_index;
  #line 935 
  return 0;
}

#line 938  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/wcn36xx/smd.c"
int wcn36xx_smd_add_sta_self(struct wcn36xx *wcn, struct ieee80211_vif *vif)
{
  #line 940 
  struct wcn36xx_hal_add_sta_self_req msg_body;
  #line 941 
  int ret;
  #line 943 
  cif_mutex_lock_hal_mutex_of_wcn36xx(& wcn->hal_mutex);
  #line 944 
  memset((void *)(& msg_body),0,18UL);
  #line 944 
  msg_body.header.msg_type = (enum wcn36xx_hal_host_msg_type)125U;
  #line 944 
  msg_body.header.msg_version = (enum wcn36xx_hal_host_msg_version)0U;
  #line 944 
  msg_body.header.len = 18U;
  #line 946 
  memcpy((void *)(& msg_body.self_addr),(void *)(& vif->addr),6UL);
  #line 948 
  memset((void *)wcn->hal_buf,0,(unsigned long)msg_body.header.len);
  #line 948 
  memcpy((void *)wcn->hal_buf,(void *)(& msg_body),18UL);
  #line 950 
  if ((wcn36xx_dbg_mask & 256U) != 0U) 
                                       #line 950 
                                       printk((char *)"\001",(u8 *)(& msg_body.self_addr),msg_body.status);
  #line 954 
  ret = wcn36xx_smd_send_and_wait(wcn,(unsigned long)msg_body.header.len);
  #line 955 
  if (ret != 0) {
    #line 956 
    printk((char *)"\001");
    #line 957 
    goto out;
  }
  #line 959 
  ret = wcn36xx_smd_add_sta_self_rsp(wcn,vif,(void *)wcn->hal_buf,wcn->hal_rsp_len);
  #line 963 
  if (ret != 0) {
    #line 964 
    printk((char *)"\001",ret);
    #line 965 
    goto out;
  }
  #line 967 
  out: 
       #line 967 
  ;
  #line 968 
  cif_mutex_unlock_hal_mutex_of_wcn36xx(& wcn->hal_mutex);
  #line 969 
  return ret;
}

#line 972  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/wcn36xx/smd.c"
int wcn36xx_smd_delete_sta_self(struct wcn36xx *wcn, u8 *addr)
{
  #line 974 
  struct wcn36xx_hal_del_sta_self_req_msg msg_body;
  #line 975 
  int ret;
  #line 977 
  cif_mutex_lock_hal_mutex_of_wcn36xx(& wcn->hal_mutex);
  #line 978 
  memset((void *)(& msg_body),0,14UL);
  #line 978 
  msg_body.header.msg_type = (enum wcn36xx_hal_host_msg_type)127U;
  #line 978 
  msg_body.header.msg_version = (enum wcn36xx_hal_host_msg_version)0U;
  #line 978 
  msg_body.header.len = 14U;
  #line 980 
  memcpy((void *)(& msg_body.self_addr),(void *)addr,6UL);
  #line 982 
  memset((void *)wcn->hal_buf,0,(unsigned long)msg_body.header.len);
  #line 982 
  memcpy((void *)wcn->hal_buf,(void *)(& msg_body),14UL);
  #line 984 
  ret = wcn36xx_smd_send_and_wait(wcn,(unsigned long)msg_body.header.len);
  #line 985 
  if (ret != 0) {
    #line 986 
    printk((char *)"\001");
    #line 987 
    goto out;
  }
  #line 989 
  ret = wcn36xx_smd_rsp_status_check((void *)wcn->hal_buf,wcn->hal_rsp_len);
  #line 990 
  if (ret != 0) {
    #line 991 
    printk((char *)"\001",ret);
    #line 993 
    goto out;
  }
  #line 995 
  out: 
       #line 995 
  ;
  #line 996 
  cif_mutex_unlock_hal_mutex_of_wcn36xx(& wcn->hal_mutex);
  #line 997 
  return ret;
}

#line 1000  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/wcn36xx/smd.c"
int wcn36xx_smd_delete_sta(struct wcn36xx *wcn, u8 sta_index)
{
  #line 1002 
  struct wcn36xx_hal_delete_sta_req_msg msg_body;
  #line 1003 
  int ret;
  #line 1005 
  cif_mutex_lock_hal_mutex_of_wcn36xx(& wcn->hal_mutex);
  #line 1006 
  memset((void *)(& msg_body),0,9UL);
  #line 1006 
  msg_body.header.msg_type = (enum wcn36xx_hal_host_msg_type)14U;
  #line 1006 
  msg_body.header.msg_version = (enum wcn36xx_hal_host_msg_version)0U;
  #line 1006 
  msg_body.header.len = 9U;
  #line 1008 
  msg_body.sta_index = sta_index;
  #line 1010 
  memset((void *)wcn->hal_buf,0,(unsigned long)msg_body.header.len);
  #line 1010 
  memcpy((void *)wcn->hal_buf,(void *)(& msg_body),9UL);
  #line 1012 
  if ((wcn36xx_dbg_mask & 256U) != 0U) 
                                       #line 1012 
                                       printk((char *)"\001",(int)msg_body.sta_index);
  #line 1016 
  ret = wcn36xx_smd_send_and_wait(wcn,(unsigned long)msg_body.header.len);
  #line 1017 
  if (ret != 0) {
    #line 1018 
    printk((char *)"\001");
    #line 1019 
    goto out;
  }
  #line 1021 
  ret = wcn36xx_smd_rsp_status_check((void *)wcn->hal_buf,wcn->hal_rsp_len);
  #line 1022 
  if (ret != 0) {
    #line 1023 
    printk((char *)"\001",ret);
    #line 1024 
    goto out;
  }
  #line 1026 
  out: 
       #line 1026 
  ;
  #line 1027 
  cif_mutex_unlock_hal_mutex_of_wcn36xx(& wcn->hal_mutex);
  #line 1028 
  return ret;
}

#line 1031  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/wcn36xx/smd.c"
static int wcn36xx_smd_join_rsp(void *buf, size_t len)
{
  #line 1033 
  struct wcn36xx_hal_join_rsp_msg *rsp;
  #line 1035 
  if (wcn36xx_smd_rsp_status_check(buf,len) != 0) 
                                                  #line 1036 
                                                  return -5;
  #line 1038 
  rsp = (struct wcn36xx_hal_join_rsp_msg *)buf;
  #line 1040 
  if ((wcn36xx_dbg_mask & 256U) != 0U) 
                                       #line 1040 
                                       printk((char *)"\001",rsp->status,(int)rsp->tx_mgmt_power);
  #line 1044 
  return 0;
}

#line 1047  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/wcn36xx/smd.c"
int wcn36xx_smd_join(struct wcn36xx *wcn, u8 *bssid, u8 *vif, u8 ch)
{
  #line 1049 
  struct wcn36xx_hal_join_req_msg msg_body;
  #line 1050 
  int ret;
  #line 1052 
  cif_mutex_lock_hal_mutex_of_wcn36xx(& wcn->hal_mutex);
  #line 1053 
  memset((void *)(& msg_body),0,31UL);
  #line 1053 
  msg_body.header.msg_type = (enum wcn36xx_hal_host_msg_type)20U;
  #line 1053 
  msg_body.header.msg_version = (enum wcn36xx_hal_host_msg_version)0U;
  #line 1053 
  msg_body.header.len = 31U;
  #line 1055 
  memcpy((void *)(& msg_body.bssid),(void *)bssid,6UL);
  #line 1056 
  memcpy((void *)(& msg_body.self_sta_mac_addr),(void *)vif,6UL);
  #line 1057 
  msg_body.channel = ch;
  #line 1059 
  if ((int)conf_is_ht40_minus(& (wcn->hw)->conf) != 0) 
                                                       #line 1060 
                                                       msg_body.secondary_channel_offset = PHY_DOUBLE_CHANNEL_HIGH_PRIMARY;
  else {
    #line 1062 
    if ((int)conf_is_ht40_plus(& (wcn->hw)->conf) != 0) 
                                                        #line 1063 
                                                        msg_body.secondary_channel_offset = PHY_DOUBLE_CHANNEL_LOW_PRIMARY; else 
                                                                    #line 1066 
                                                                    msg_body.secondary_channel_offset = PHY_SINGLE_CHANNEL_CENTERED;
  }
  #line 1069 
  msg_body.link_state = WCN36XX_HAL_LINK_PREASSOC_STATE;
  #line 1071 
  msg_body.max_tx_power = (signed char)(-65);
  #line 1072 
  memset((void *)wcn->hal_buf,0,(unsigned long)msg_body.header.len);
  #line 1072 
  memcpy((void *)wcn->hal_buf,(void *)(& msg_body),31UL);
  #line 1074 
  if ((wcn36xx_dbg_mask & 256U) != 0U) 
                                       #line 1074 
                                       printk((char *)"\001",(u8 *)(& msg_body.bssid),(u8 *)(& msg_body.self_sta_mac_addr),(int)msg_body.channel,(unsigned int)msg_body.link_state);
  #line 1079 
  ret = wcn36xx_smd_send_and_wait(wcn,(unsigned long)msg_body.header.len);
  #line 1080 
  if (ret != 0) {
    #line 1081 
    printk((char *)"\001");
    #line 1082 
    goto out;
  }
  #line 1084 
  ret = wcn36xx_smd_join_rsp((void *)wcn->hal_buf,wcn->hal_rsp_len);
  #line 1085 
  if (ret != 0) {
    #line 1086 
    printk((char *)"\001",ret);
    #line 1087 
    goto out;
  }
  #line 1089 
  out: 
       #line 1089 
  ;
  #line 1090 
  cif_mutex_unlock_hal_mutex_of_wcn36xx(& wcn->hal_mutex);
  #line 1091 
  return ret;
}

#line 1094  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/wcn36xx/smd.c"
int wcn36xx_smd_set_link_st(struct wcn36xx *wcn, u8 *bssid, u8 *sta_mac, enum wcn36xx_hal_link_state state)
{
  #line 1098 
  struct wcn36xx_hal_set_link_state_req_msg msg_body;
  #line 1099 
  int ret;
  #line 1101 
  cif_mutex_lock_hal_mutex_of_wcn36xx(& wcn->hal_mutex);
  #line 1102 
  memset((void *)(& msg_body),0,24UL);
  #line 1102 
  msg_body.header.msg_type = (enum wcn36xx_hal_host_msg_type)44U;
  #line 1102 
  msg_body.header.msg_version = (enum wcn36xx_hal_host_msg_version)0U;
  #line 1102 
  msg_body.header.len = 24U;
  #line 1104 
  memcpy((void *)(& msg_body.bssid),(void *)bssid,6UL);
  #line 1105 
  memcpy((void *)(& msg_body.self_mac_addr),(void *)sta_mac,6UL);
  #line 1106 
  msg_body.state = state;
  #line 1108 
  memset((void *)wcn->hal_buf,0,(unsigned long)msg_body.header.len);
  #line 1108 
  memcpy((void *)wcn->hal_buf,(void *)(& msg_body),24UL);
  #line 1110 
  if ((wcn36xx_dbg_mask & 256U) != 0U) 
                                       #line 1110 
                                       printk((char *)"\001",(u8 *)(& msg_body.bssid),(u8 *)(& msg_body.self_mac_addr),(unsigned int)msg_body.state);
  #line 1114 
  ret = wcn36xx_smd_send_and_wait(wcn,(unsigned long)msg_body.header.len);
  #line 1115 
  if (ret != 0) {
    #line 1116 
    printk((char *)"\001");
    #line 1117 
    goto out;
  }
  #line 1119 
  ret = wcn36xx_smd_rsp_status_check((void *)wcn->hal_buf,wcn->hal_rsp_len);
  #line 1120 
  if (ret != 0) {
    #line 1121 
    printk((char *)"\001",ret);
    #line 1122 
    goto out;
  }
  #line 1124 
  out: 
       #line 1124 
  ;
  #line 1125 
  cif_mutex_unlock_hal_mutex_of_wcn36xx(& wcn->hal_mutex);
  #line 1126 
  return ret;
}

#line 1129  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/wcn36xx/smd.c"
static void wcn36xx_smd_convert_sta_to_v1(struct wcn36xx *wcn, struct wcn36xx_hal_config_sta_params *orig, struct wcn36xx_hal_config_sta_params_v1 *v1)
{
  #line 1134 
  memcpy((void *)(& v1->bssid),(void *)(& orig->bssid),6UL);
  #line 1135 
  memcpy((void *)(& v1->mac),(void *)(& orig->mac),6UL);
  #line 1136 
  v1->aid = orig->aid;
  #line 1137 
  v1->type = orig->type;
  #line 1138 
  v1->short_preamble_supported = orig->short_preamble_supported;
  #line 1139 
  v1->listen_interval = orig->listen_interval;
  #line 1140 
  v1->wmm_enabled = orig->wmm_enabled;
  #line 1141 
  v1->ht_capable = orig->ht_capable;
  #line 1142 
  v1->tx_channel_width_set = orig->tx_channel_width_set;
  #line 1143 
  v1->rifs_mode = orig->rifs_mode;
  #line 1144 
  v1->lsig_txop_protection = orig->lsig_txop_protection;
  #line 1145 
  v1->max_ampdu_size = orig->max_ampdu_size;
  #line 1146 
  v1->max_ampdu_density = orig->max_ampdu_density;
  #line 1147 
  v1->sgi_40mhz = orig->sgi_40mhz;
  #line 1148 
  v1->sgi_20Mhz = orig->sgi_20Mhz;
  #line 1149 
  v1->rmf = orig->rmf;
  #line 1150 
  v1->encrypt_type = orig->encrypt_type;
  #line 1151 
  v1->action = orig->action;
  #line 1152 
  v1->uapsd = orig->uapsd;
  #line 1153 
  v1->max_sp_len = orig->max_sp_len;
  #line 1154 
  v1->green_field_capable = orig->green_field_capable;
  #line 1155 
  v1->mimo_ps = orig->mimo_ps;
  #line 1156 
  v1->delayed_ba_support = orig->delayed_ba_support;
  #line 1157 
  v1->max_ampdu_duration = orig->max_ampdu_duration;
  #line 1158 
  v1->dsss_cck_mode_40mhz = orig->dsss_cck_mode_40mhz;
  #line 1159 
  memcpy((void *)(& v1->supported_rates),(void *)(& orig->supported_rates),58UL);
  #line 1161 
  v1->sta_index = orig->sta_index;
  #line 1162 
  v1->bssid_index = orig->bssid_index;
  #line 1163 
  v1->p2p = orig->p2p;
  #line 1164 
  return;
}

#line 1166  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/wcn36xx/smd.c"
static int wcn36xx_smd_config_sta_rsp(struct wcn36xx *wcn, struct ieee80211_sta *sta, void *buf, size_t len)
{
  #line 1171 
  struct wcn36xx_hal_config_sta_rsp_msg *rsp;
  #line 1172 
  struct config_sta_rsp_params *params;
  #line 1173 
  struct wcn36xx_sta *sta_priv = wcn36xx_sta_to_priv(sta);
  #line 1175 
  if (len <= 20UL) 
                   #line 1176 
                   return -22;
  #line 1178 
  rsp = (struct wcn36xx_hal_config_sta_rsp_msg *)buf;
  #line 1179 
  params = & rsp->params;
  #line 1181 
  if (params->status != 0U) {
    #line 1182 
    printk((char *)"\001",params->status);
    #line 1184 
    return -5;
  }
  #line 1187 
  sta_priv->sta_index = params->sta_index;
  #line 1188 
  sta_priv->dpu_desc_index = params->dpu_index;
  #line 1189 
  sta_priv->ucast_dpu_sign = params->uc_ucast_sig;
  #line 1191 
  if ((wcn36xx_dbg_mask & 256U) != 0U) 
                                       #line 1191 
                                       printk((char *)"\001",params->status,(int)params->sta_index,(int)params->bssid_index,(int)params->uc_ucast_sig,(int)params->p2p);
  #line 1196 
  return 0;
}

#line 1199  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/wcn36xx/smd.c"
static int wcn36xx_smd_config_sta_v1(struct wcn36xx *wcn, struct wcn36xx_hal_config_sta_req_msg *orig)
{
  #line 1202 
  struct wcn36xx_hal_config_sta_req_msg_v1 msg_body;
  #line 1203 
  struct wcn36xx_hal_config_sta_params_v1 *sta = & msg_body.sta_params;
  #line 1205 
  memset((void *)(& msg_body),0,114UL);
  #line 1205 
  msg_body.header.msg_type = (enum wcn36xx_hal_host_msg_type)12U;
  #line 1205 
  msg_body.header.msg_version = (enum wcn36xx_hal_host_msg_version)0U;
  #line 1205 
  msg_body.header.len = 114U;
  #line 1207 
  wcn36xx_smd_convert_sta_to_v1(wcn,& orig->sta_params,& msg_body.sta_params);
  #line 1210 
  memset((void *)wcn->hal_buf,0,(unsigned long)msg_body.header.len);
  #line 1210 
  memcpy((void *)wcn->hal_buf,(void *)(& msg_body),114UL);
  #line 1212 
  if ((wcn36xx_dbg_mask & 256U) != 0U) 
                                       #line 1212 
                                       printk((char *)"\001",(int)sta->action,(int)sta->sta_index,(int)sta->bssid_index,(u8 *)(& sta->bssid),(int)sta->type,(u8 *)(& sta->mac),(int)sta->aid);
  #line 1217 
  return wcn36xx_smd_send_and_wait(wcn,(unsigned long)msg_body.header.len);
}

#line 1220  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/wcn36xx/smd.c"
int wcn36xx_smd_config_sta(struct wcn36xx *wcn, struct ieee80211_vif *vif, struct ieee80211_sta *sta)
{
  #line 1223 
  struct wcn36xx_hal_config_sta_req_msg msg;
  #line 1224 
  struct wcn36xx_hal_config_sta_params *sta_params;
  #line 1225 
  int ret;
  #line 1227 
  cif_mutex_lock_hal_mutex_of_wcn36xx(& wcn->hal_mutex);
  #line 1228 
  memset((void *)(& msg),0,113UL);
  #line 1228 
  msg.header.msg_type = (enum wcn36xx_hal_host_msg_type)12U;
  #line 1228 
  msg.header.msg_version = (enum wcn36xx_hal_host_msg_version)0U;
  #line 1228 
  msg.header.len = 113U;
  #line 1230 
  sta_params = & msg.sta_params;
  #line 1232 
  wcn36xx_smd_set_sta_params(wcn,vif,sta,sta_params);
  #line 1234 
  if (wcn36xx_is_fw_version(wcn,(unsigned char)1,(unsigned char)2,
                            (unsigned char)2,(unsigned char)24)) {
    #line 1237 
    memset((void *)wcn->hal_buf,0,(unsigned long)msg.header.len);
    #line 1237 
    memcpy((void *)wcn->hal_buf,(void *)(& msg),113UL);
    #line 1239 
    if ((wcn36xx_dbg_mask & 256U) != 0U) 
                                         #line 1239 
                                         printk((char *)"\001",(int)sta_params->action,(int)sta_params->sta_index,(int)sta_params->bssid_index,(u8 *)(& sta_params->bssid),(int)sta_params->type,(u8 *)(& sta_params->mac),(int)sta_params->aid);
    #line 1245 
    ret = wcn36xx_smd_send_and_wait(wcn,(unsigned long)msg.header.len);
  }
  else 
       #line 1235 
       ret = wcn36xx_smd_config_sta_v1(wcn,& msg);
  #line 1247 
  if (ret != 0) {
    #line 1248 
    printk((char *)"\001");
    #line 1249 
    goto out;
  }
  #line 1251 
  ret = wcn36xx_smd_config_sta_rsp(wcn,sta,(void *)wcn->hal_buf,wcn->hal_rsp_len);
  #line 1255 
  if (ret != 0) {
    #line 1256 
    printk((char *)"\001",ret);
    #line 1257 
    goto out;
  }
  #line 1259 
  out: 
       #line 1259 
  ;
  #line 1260 
  cif_mutex_unlock_hal_mutex_of_wcn36xx(& wcn->hal_mutex);
  #line 1261 
  return ret;
}

#line 1264  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/wcn36xx/smd.c"
static int wcn36xx_smd_config_bss_v1(struct wcn36xx *wcn, struct wcn36xx_hal_config_bss_req_msg *orig)
{
  #line 1267 
  struct wcn36xx_hal_config_bss_req_msg_v1 *msg_body;
  #line 1268 
  struct wcn36xx_hal_config_bss_params_v1 *bss;
  #line 1269 
  struct wcn36xx_hal_config_sta_params_v1 *sta;
  #line 1270 
  int ret;
  #line 1272 
  msg_body = (struct wcn36xx_hal_config_bss_req_msg_v1 *)kzalloc_1(470UL,3264U);
  #line 1273 
  if (msg_body == (struct wcn36xx_hal_config_bss_req_msg_v1 *)0) 
                                                                 #line 1274 
                                                                 return -12;
  #line 1276 
  memset((void *)msg_body,0,470UL);
  #line 1276 
  msg_body->header.msg_type = (enum wcn36xx_hal_host_msg_type)16U;
  #line 1276 
  msg_body->header.msg_version = (enum wcn36xx_hal_host_msg_version)0U;
  #line 1276 
  msg_body->header.len = 470U;
  #line 1278 
  bss = & msg_body->bss_params;
  #line 1279 
  sta = & bss->sta;
  #line 1282 
  memcpy((void *)(& msg_body->bss_params.bssid),(void *)(& orig->bss_params.bssid),6UL);
  #line 1284 
  memcpy((void *)(& msg_body->bss_params.self_mac_addr),(void *)(& orig->bss_params.self_mac_addr),6UL);
  #line 1287 
  msg_body->bss_params.bss_type = orig->bss_params.bss_type;
  #line 1288 
  msg_body->bss_params.oper_mode = orig->bss_params.oper_mode;
  #line 1289 
  msg_body->bss_params.nw_type = orig->bss_params.nw_type;
  #line 1291 
  msg_body->bss_params.short_slot_time_supported = orig->bss_params.short_slot_time_supported;
  #line 1293 
  msg_body->bss_params.lla_coexist = orig->bss_params.lla_coexist;
  #line 1294 
  msg_body->bss_params.llb_coexist = orig->bss_params.llb_coexist;
  #line 1295 
  msg_body->bss_params.llg_coexist = orig->bss_params.llg_coexist;
  #line 1296 
  msg_body->bss_params.ht20_coexist = orig->bss_params.ht20_coexist;
  #line 1297 
  msg_body->bss_params.lln_non_gf_coexist = orig->bss_params.lln_non_gf_coexist;
  #line 1300 
  msg_body->bss_params.lsig_tx_op_protection_full_support = orig->bss_params.lsig_tx_op_protection_full_support;
  #line 1302 
  msg_body->bss_params.rifs_mode = orig->bss_params.rifs_mode;
  #line 1303 
  msg_body->bss_params.beacon_interval = orig->bss_params.beacon_interval;
  #line 1304 
  msg_body->bss_params.dtim_period = orig->bss_params.dtim_period;
  #line 1305 
  msg_body->bss_params.tx_channel_width_set = orig->bss_params.tx_channel_width_set;
  #line 1307 
  msg_body->bss_params.oper_channel = orig->bss_params.oper_channel;
  #line 1308 
  msg_body->bss_params.ext_channel = orig->bss_params.ext_channel;
  #line 1310 
  msg_body->bss_params.reserved = orig->bss_params.reserved;
  #line 1312 
  memcpy((void *)(& msg_body->bss_params.ssid),(void *)(& orig->bss_params.ssid),33UL);
  #line 1316 
  msg_body->bss_params.action = orig->bss_params.action;
  #line 1317 
  msg_body->bss_params.rateset = orig->bss_params.rateset;
  #line 1318 
  msg_body->bss_params.ht = orig->bss_params.ht;
  #line 1319 
  msg_body->bss_params.obss_prot_enabled = orig->bss_params.obss_prot_enabled;
  #line 1321 
  msg_body->bss_params.rmf = orig->bss_params.rmf;
  #line 1322 
  msg_body->bss_params.ht_oper_mode = orig->bss_params.ht_oper_mode;
  #line 1323 
  msg_body->bss_params.dual_cts_protection = orig->bss_params.dual_cts_protection;
  #line 1326 
  msg_body->bss_params.max_probe_resp_retry_limit = orig->bss_params.max_probe_resp_retry_limit;
  #line 1328 
  msg_body->bss_params.hidden_ssid = orig->bss_params.hidden_ssid;
  #line 1329 
  msg_body->bss_params.proxy_probe_resp = orig->bss_params.proxy_probe_resp;
  #line 1331 
  msg_body->bss_params.edca_params_valid = orig->bss_params.edca_params_valid;
  #line 1334 
  memcpy((void *)(& msg_body->bss_params.acbe),(void *)(& orig->bss_params.acbe),4UL);
  #line 1337 
  memcpy((void *)(& msg_body->bss_params.acbk),(void *)(& orig->bss_params.acbk),4UL);
  #line 1340 
  memcpy((void *)(& msg_body->bss_params.acvi),(void *)(& orig->bss_params.acvi),4UL);
  #line 1343 
  memcpy((void *)(& msg_body->bss_params.acvo),(void *)(& orig->bss_params.acvo),4UL);
  #line 1347 
  msg_body->bss_params.ext_set_sta_key_param_valid = orig->bss_params.ext_set_sta_key_param_valid;
  #line 1350 
  memcpy((void *)(& msg_body->bss_params.ext_set_sta_key_param),(void *)(& orig->bss_params.ext_set_sta_key_param),4UL);
  #line 1354 
  msg_body->bss_params.wcn36xx_hal_persona = orig->bss_params.wcn36xx_hal_persona;
  #line 1356 
  msg_body->bss_params.spectrum_mgt_enable = orig->bss_params.spectrum_mgt_enable;
  #line 1358 
  msg_body->bss_params.tx_mgmt_power = orig->bss_params.tx_mgmt_power;
  #line 1359 
  msg_body->bss_params.max_tx_power = orig->bss_params.max_tx_power;
  #line 1361 
  wcn36xx_smd_convert_sta_to_v1(wcn,& orig->bss_params.sta,& msg_body->bss_params.sta);
  #line 1364 
  memset((void *)wcn->hal_buf,0,(unsigned long)msg_body->header.len);
  #line 1364 
  memcpy((void *)wcn->hal_buf,(void *)msg_body,470UL);
  #line 1366 
  if ((wcn36xx_dbg_mask & 256U) != 0U) 
                                       #line 1366 
                                       printk((char *)"\001",(u8 *)(& bss->bssid),(u8 *)(& bss->self_mac_addr),(unsigned int)bss->bss_type,(int)bss->oper_mode,(unsigned int)bss->nw_type);
  #line 1371 
  if ((wcn36xx_dbg_mask & 256U) != 0U) 
                                       #line 1371 
                                       printk((char *)"\001",(u8 *)(& sta->bssid),(int)sta->action,(int)sta->sta_index,(int)sta->bssid_index,(int)sta->aid,(int)sta->type,(u8 *)(& sta->mac));
  #line 1376 
  ret = wcn36xx_smd_send_and_wait(wcn,(unsigned long)msg_body->header.len);
  #line 1377 
  kfree((void *)msg_body);
  #line 1379 
  return ret;
}

#line 1383  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/wcn36xx/smd.c"
static int wcn36xx_smd_config_bss_rsp(struct wcn36xx *wcn, struct ieee80211_vif *vif, struct ieee80211_sta *sta, void *buf, size_t len)
{
  #line 1389 
  struct wcn36xx_hal_config_bss_rsp_msg *rsp;
  #line 1390 
  struct wcn36xx_hal_config_bss_rsp_params *params;
  #line 1391 
  struct wcn36xx_vif *vif_priv = wcn36xx_vif_to_priv(vif);
  #line 1393 
  if (len <= 28UL) 
                   #line 1394 
                   return -22;
  #line 1396 
  rsp = (struct wcn36xx_hal_config_bss_rsp_msg *)buf;
  #line 1397 
  params = & rsp->bss_rsp_params;
  #line 1399 
  if (params->status != 0U) {
    #line 1400 
    printk((char *)"\001",params->status);
    #line 1402 
    return -5;
  }
  #line 1405 
  if ((wcn36xx_dbg_mask & 256U) != 0U) 
                                       #line 1405 
                                       printk((char *)"\001",params->status,(int)params->bss_index,(int)params->dpu_desc_index,(int)params->bss_sta_index,(int)params->bss_self_sta_index,(int)params->bss_bcast_sta_idx,(u8 *)(& params->mac),(int)params->tx_mgmt_power,(int)params->ucast_dpu_signature);
  #line 1414 
  vif_priv->bss_index = params->bss_index;
  #line 1416 
  if (sta != (struct ieee80211_sta *)0) {
    #line 1417 
    struct wcn36xx_sta *sta_priv = wcn36xx_sta_to_priv(sta);
    #line 1418 
    sta_priv->bss_sta_index = params->bss_sta_index;
    #line 1419 
    sta_priv->bss_dpu_desc_index = params->dpu_desc_index;
  }
  #line 1422 
  vif_priv->self_ucast_dpu_sign = params->ucast_dpu_signature;
  #line 1424 
  return 0;
}

#line 1427  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/wcn36xx/smd.c"
int wcn36xx_smd_config_bss(struct wcn36xx *wcn, struct ieee80211_vif *vif, struct ieee80211_sta *sta, u8 *bssid, bool update)
{
  #line 1431 
  struct wcn36xx_hal_config_bss_req_msg *msg;
  #line 1432 
  struct wcn36xx_hal_config_bss_params *bss;
  #line 1433 
  struct wcn36xx_hal_config_sta_params *sta_params;
  #line 1435 
  int ret;
  #line 1434 
  struct wcn36xx_vif *vif_priv = wcn36xx_vif_to_priv(vif);
  #line 1437 
  cif_mutex_lock_hal_mutex_of_wcn36xx(& wcn->hal_mutex);
  #line 1438 
  msg = (struct wcn36xx_hal_config_bss_req_msg *)kzalloc_1(469UL,3264U);
  #line 1439 
  if (msg == (struct wcn36xx_hal_config_bss_req_msg *)0) {
    #line 1440 
    ret = -12;
    #line 1441 
    goto out;
  }
  #line 1443 
  memset((void *)msg,0,469UL);
  #line 1443 
  msg->header.msg_type = (enum wcn36xx_hal_host_msg_type)16U;
  #line 1443 
  msg->header.msg_version = (enum wcn36xx_hal_host_msg_version)0U;
  #line 1443 
  msg->header.len = 469U;
  #line 1445 
  bss = & msg->bss_params;
  #line 1446 
  sta_params = & bss->sta;
  {
    #line 1448 
    int __ret_warn_on = (int)is_zero_ether_addr(bssid) != 0;
    #line 1448 
    if ((long)(__ret_warn_on != 0) != 0L) {
      #line 1449 
      ldv_inline_asm();
      #line 1450 
      ldv_inline_asm();
    }
    #line 1448 
    long tmp_2 = (long)(__ret_warn_on != 0);
  }
  #line 1450 
  memcpy((void *)(& bss->bssid),(void *)bssid,6UL);
  #line 1452 
  memcpy((void *)(& bss->self_mac_addr),(void *)(& vif->addr),6UL);
  #line 1454 
  if (vif->type == (unsigned int)NL80211_IFTYPE_STATION) {
    #line 1455 
    bss->bss_type = WCN36XX_HAL_INFRASTRUCTURE_MODE;
    #line 1458 
    bss->oper_mode = (unsigned char)1U;
    #line 1459 
    bss->wcn36xx_hal_persona = (unsigned char)0U;
  }
  else 
    #line 1460 
    if (vif->type == (unsigned int)NL80211_IFTYPE_AP || vif->type == (unsigned int)NL80211_IFTYPE_MESH_POINT) {
      #line 1462 
      bss->bss_type = WCN36XX_HAL_INFRA_AP_MODE;
      #line 1465 
      bss->oper_mode = (unsigned char)0U;
      #line 1466 
      bss->wcn36xx_hal_persona = (unsigned char)1U;
    }
    else 
      #line 1467 
      if (vif->type == (unsigned int)NL80211_IFTYPE_ADHOC) {
        #line 1468 
        bss->bss_type = WCN36XX_HAL_IBSS_MODE;
        #line 1471 
        bss->oper_mode = (unsigned char)1U;
      }
      else 
           #line 1473 
           printk((char *)"\001",(unsigned int)vif->type);
  #line 1476 
  if (vif->type == (unsigned int)NL80211_IFTYPE_STATION) 
                                                         #line 1477 
                                                         wcn36xx_smd_set_bss_nw_type(wcn,sta,bss); else 
                                                                    #line 1479 
                                                                    bss->nw_type = WCN36XX_HAL_11N_NW_TYPE;
  #line 1481 
  bss->short_slot_time_supported = (unsigned char)vif->bss_conf.use_short_slot;
  #line 1482 
  bss->lla_coexist = (unsigned char)0U;
  #line 1483 
  bss->llb_coexist = (unsigned char)0U;
  #line 1484 
  bss->llg_coexist = (unsigned char)0U;
  #line 1485 
  bss->rifs_mode = (unsigned char)0U;
  #line 1486 
  bss->beacon_interval = vif->bss_conf.beacon_int;
  #line 1487 
  bss->dtim_period = vif_priv->dtim_period;
  #line 1489 
  wcn36xx_smd_set_bss_ht_params(vif,sta,bss);
  #line 1491 
  bss->oper_channel = (unsigned char)((wcn->hw)->conf.chandef.chan)->hw_value;
  #line 1493 
  if ((int)conf_is_ht40_minus(& (wcn->hw)->conf) != 0) 
                                                       #line 1494 
                                                       bss->ext_channel = (unsigned char)3U;
  else {
    #line 1495 
    if ((int)conf_is_ht40_plus(& (wcn->hw)->conf) != 0) 
                                                        #line 1496 
                                                        bss->ext_channel = (unsigned char)1U; else 
                                                                    #line 1498 
                                                                    bss->ext_channel = (unsigned char)0U;
  }
  #line 1500 
  bss->reserved = (unsigned char)0U;
  #line 1501 
  wcn36xx_smd_set_sta_params(wcn,vif,sta,sta_params);
  #line 1504 
  bss->ssid.length = vif_priv->ssid.length;
  #line 1505 
  memcpy((void *)(& bss->ssid.ssid),(void *)(& vif_priv->ssid.ssid),(unsigned long)vif_priv->ssid.length);
  #line 1507 
  bss->obss_prot_enabled = (unsigned char)0U;
  #line 1508 
  bss->rmf = (unsigned char)0U;
  #line 1509 
  bss->max_probe_resp_retry_limit = (unsigned char)0U;
  #line 1510 
  bss->hidden_ssid = (unsigned char)vif->bss_conf.hidden_ssid;
  #line 1511 
  bss->proxy_probe_resp = (unsigned char)0U;
  #line 1512 
  bss->edca_params_valid = (unsigned char)0U;
  #line 1516 
  bss->ext_set_sta_key_param_valid = (unsigned char)0U;
  #line 1520 
  bss->spectrum_mgt_enable = (unsigned char)0U;
  #line 1521 
  bss->tx_mgmt_power = (signed char)0;
  #line 1522 
  bss->max_tx_power = (signed char)((wcn->hw)->conf.chandef.chan)->max_power;
  #line 1523 
  bss->action = (unsigned char)update;
  #line 1525 
  vif_priv->bss_type = bss->bss_type;
  #line 1527 
  if ((wcn36xx_dbg_mask & 256U) != 0U) 
                                       #line 1527 
                                       printk((char *)"\001",(u8 *)(& bss->bssid),(u8 *)(& bss->self_mac_addr),(unsigned int)bss->bss_type,(int)bss->oper_mode,(unsigned int)bss->nw_type);
  #line 1532 
  if ((wcn36xx_dbg_mask & 256U) != 0U) 
                                       #line 1532 
                                       printk((char *)"\001",(u8 *)(& sta_params->bssid),(int)sta_params->action,(int)sta_params->sta_index,(int)sta_params->bssid_index,(int)sta_params->aid,(int)sta_params->type,(u8 *)(& sta_params->mac));
  #line 1539 
  if (wcn36xx_is_fw_version(wcn,(unsigned char)1,(unsigned char)2,
                              (unsigned char)2,(unsigned char)24)) {
    #line 1542 
    memset((void *)wcn->hal_buf,0,(unsigned long)msg->header.len);
    #line 1542 
    memcpy((void *)wcn->hal_buf,(void *)msg,469UL);
    #line 1544 
    ret = wcn36xx_smd_send_and_wait(wcn,(unsigned long)msg->header.len);
  }
  else 
       #line 1540 
       ret = wcn36xx_smd_config_bss_v1(wcn,msg);
  #line 1546 
  if (ret != 0) {
    #line 1547 
    printk((char *)"\001");
    #line 1548 
    goto out;
  }
  #line 1550 
  ret = wcn36xx_smd_config_bss_rsp(wcn,vif,sta,(void *)wcn->hal_buf,wcn->hal_rsp_len);
  #line 1555 
  if (ret != 0) {
    #line 1556 
    printk((char *)"\001",ret);
    #line 1557 
    goto out;
  }
  #line 1559 
  out: 
       #line 1559 
  ;
  #line 1560 
  kfree((void *)msg);
  #line 1561 
  cif_mutex_unlock_hal_mutex_of_wcn36xx(& wcn->hal_mutex);
  #line 1562 
  return ret;
}

#line 1565  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/wcn36xx/smd.c"
int wcn36xx_smd_delete_bss(struct wcn36xx *wcn, struct ieee80211_vif *vif)
{
  #line 1567 
  struct wcn36xx_hal_delete_bss_req_msg msg_body;
  #line 1568 
  struct wcn36xx_vif *vif_priv = wcn36xx_vif_to_priv(vif);
  #line 1569 
  int ret = 0;
  #line 1571 
  cif_mutex_lock_hal_mutex_of_wcn36xx(& wcn->hal_mutex);
  #line 1573 
  if ((unsigned int)vif_priv->bss_index == 255U) 
                                                 #line 1574 
                                                 goto out;
  #line 1576 
  memset((void *)(& msg_body),0,9UL);
  #line 1576 
  msg_body.header.msg_type = (enum wcn36xx_hal_host_msg_type)18U;
  #line 1576 
  msg_body.header.msg_version = (enum wcn36xx_hal_host_msg_version)0U;
  #line 1576 
  msg_body.header.len = 9U;
  #line 1578 
  msg_body.bss_index = vif_priv->bss_index;
  #line 1580 
  memset((void *)wcn->hal_buf,0,(unsigned long)msg_body.header.len);
  #line 1580 
  memcpy((void *)wcn->hal_buf,(void *)(& msg_body),9UL);
  #line 1582 
  if ((wcn36xx_dbg_mask & 256U) != 0U) 
                                       #line 1582 
                                       printk((char *)"\001",(int)msg_body.bss_index);
  #line 1584 
  ret = wcn36xx_smd_send_and_wait(wcn,(unsigned long)msg_body.header.len);
  #line 1585 
  if (ret != 0) {
    #line 1586 
    printk((char *)"\001");
    #line 1587 
    goto out;
  }
  #line 1589 
  ret = wcn36xx_smd_rsp_status_check((void *)wcn->hal_buf,wcn->hal_rsp_len);
  #line 1590 
  if (ret != 0) {
    #line 1591 
    printk((char *)"\001",ret);
    #line 1592 
    goto out;
  }
  #line 1595 
  vif_priv->bss_index = (unsigned char)255U;
  #line 1596 
  out: 
       #line 1596 
  ;
  #line 1597 
  cif_mutex_unlock_hal_mutex_of_wcn36xx(& wcn->hal_mutex);
  #line 1598 
  return ret;
}

#line 1601  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/wcn36xx/smd.c"
int wcn36xx_smd_send_beacon(struct wcn36xx *wcn, struct ieee80211_vif *vif, struct sk_buff *skb_beacon, u16 tim_off, u16 p2p_off)
{
  #line 1605 
  struct wcn36xx_hal_send_beacon_req_msg msg_body;
  #line 1606 
  int ret;
  #line 1606 
  int pad;
  #line 1606 
  int pvm_len;
  #line 1608 
  cif_mutex_lock_hal_mutex_of_wcn36xx(& wcn->hal_mutex);
  #line 1609 
  memset((void *)(& msg_body),0,408UL);
  #line 1609 
  msg_body.header.msg_type = (enum wcn36xx_hal_host_msg_type)63U;
  #line 1609 
  msg_body.header.msg_version = (enum wcn36xx_hal_host_msg_version)0U;
  #line 1609 
  msg_body.header.len = 408U;
  #line 1611 
  pvm_len = (int)*(skb_beacon->data + ((unsigned long)tim_off + (unsigned long)1U)) + -3;
  #line 1612 
  pad = 6 - pvm_len;
  #line 1615 
  if (vif->type == (unsigned int)NL80211_IFTYPE_MESH_POINT) 
                                                            #line 1616 
                                                            pad = 0;
  #line 1618 
  msg_body.beacon_length = skb_beacon->len + (unsigned int)pad;
  #line 1620 
  msg_body.beacon_length6 = msg_body.beacon_length + 6U;
  #line 1622 
  if (msg_body.beacon_length > 384U) {
    #line 1623 
    printk((char *)"\001",msg_body.beacon_length);
    #line 1625 
    ret = -12;
    #line 1626 
    goto out;
  }
  #line 1628 
  memcpy((void *)(& msg_body.beacon),(void *)skb_beacon->data,(unsigned long)skb_beacon->len);
  #line 1629 
  memcpy((void *)(& msg_body.bssid),(void *)(& vif->addr),6UL);
  #line 1631 
  if (pad > 0) {
    #line 1638 
    if ((wcn36xx_dbg_mask & 256U) != 0U) 
                                         #line 1638 
                                         printk((char *)"\001",pad,pvm_len);
    #line 1640 
    __memmove((void *)(& msg_body.beacon[(((int)tim_off + 5) + pvm_len) + pad]),(void *)(& msg_body.beacon[((int)tim_off + 5) + pvm_len]),(unsigned long)(skb_beacon->len - (unsigned int)(((int)tim_off + 5) + pvm_len)));
    #line 1643 
    memset((void *)(& msg_body.beacon[((int)tim_off + 5) + pvm_len]),0,(unsigned long)pad);
    #line 1644 
    msg_body.beacon[(int)tim_off + 1] = (unsigned char)((int)msg_body.beacon[(int)tim_off + 1] + (int)((unsigned char)pad));
  }
  #line 1648 
  if (vif->type == (unsigned int)NL80211_IFTYPE_MESH_POINT) 
                                                            #line 1650 
                                                            msg_body.tim_ie_offset = 256U; else 
                                                                    #line 1652 
                                                                    msg_body.tim_ie_offset = (unsigned int)((int)tim_off + 4);
  #line 1653 
  msg_body.p2p_ie_offset = p2p_off;
  #line 1654 
  memset((void *)wcn->hal_buf,0,(unsigned long)msg_body.header.len);
  #line 1654 
  memcpy((void *)wcn->hal_buf,(void *)(& msg_body),408UL);
  #line 1656 
  if ((wcn36xx_dbg_mask & 256U) != 0U) 
                                       #line 1656 
                                       printk((char *)"\001",msg_body.beacon_length);
  #line 1660 
  ret = wcn36xx_smd_send_and_wait(wcn,(unsigned long)msg_body.header.len);
  #line 1661 
  if (ret != 0) {
    #line 1662 
    printk((char *)"\001");
    #line 1663 
    goto out;
  }
  #line 1665 
  ret = wcn36xx_smd_rsp_status_check((void *)wcn->hal_buf,wcn->hal_rsp_len);
  #line 1666 
  if (ret != 0) {
    #line 1667 
    printk((char *)"\001",ret);
    #line 1668 
    goto out;
  }
  #line 1670 
  out: 
       #line 1670 
  ;
  #line 1671 
  cif_mutex_unlock_hal_mutex_of_wcn36xx(& wcn->hal_mutex);
  #line 1672 
  return ret;
}

#line 1675  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/wcn36xx/smd.c"
int wcn36xx_smd_update_proberesp_tmpl(struct wcn36xx *wcn, struct ieee80211_vif *vif, struct sk_buff *skb)
{
  #line 1679 
  struct wcn36xx_hal_send_probe_resp_req_msg msg;
  #line 1680 
  int ret;
  #line 1682 
  cif_mutex_lock_hal_mutex_of_wcn36xx(& wcn->hal_mutex);
  #line 1683 
  memset((void *)(& msg),0,436UL);
  #line 1683 
  msg.header.msg_type = (enum wcn36xx_hal_host_msg_type)68U;
  #line 1683 
  msg.header.msg_version = (enum wcn36xx_hal_host_msg_version)0U;
  #line 1683 
  msg.header.len = 436U;
  #line 1685 
  if (skb->len > 384U) {
    #line 1686 
    printk((char *)"\001",skb->len);
    #line 1688 
    ret = -7;
    #line 1689 
    goto out;
  }
  #line 1692 
  msg.probe_resp_template_len = skb->len;
  #line 1693 
  memcpy((void *)(& msg.probe_resp_template),(void *)skb->data,(unsigned long)skb->len);
  #line 1695 
  memcpy((void *)(& msg.bssid),(void *)(& vif->addr),6UL);
  #line 1697 
  memset((void *)wcn->hal_buf,0,(unsigned long)msg.header.len);
  #line 1697 
  memcpy((void *)wcn->hal_buf,(void *)(& msg),436UL);
  #line 1699 
  if ((wcn36xx_dbg_mask & 256U) != 0U) 
                                       #line 1699 
                                       printk((char *)"\001",msg.probe_resp_template_len,(u8 *)(& msg.bssid));
  #line 1703 
  ret = wcn36xx_smd_send_and_wait(wcn,(unsigned long)msg.header.len);
  #line 1704 
  if (ret != 0) {
    #line 1705 
    printk((char *)"\001");
    #line 1706 
    goto out;
  }
  #line 1708 
  ret = wcn36xx_smd_rsp_status_check((void *)wcn->hal_buf,wcn->hal_rsp_len);
  #line 1709 
  if (ret != 0) {
    #line 1710 
    printk((char *)"\001",ret);
    #line 1712 
    goto out;
  }
  #line 1714 
  out: 
       #line 1714 
  ;
  #line 1715 
  cif_mutex_unlock_hal_mutex_of_wcn36xx(& wcn->hal_mutex);
  #line 1716 
  return ret;
}

#line 1719  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/wcn36xx/smd.c"
int wcn36xx_smd_set_stakey(struct wcn36xx *wcn, enum ani_ed_type enc_type, u8 keyidx, u8 keylen, u8 *key, u8 sta_index)
{
  #line 1726 
  struct wcn36xx_hal_set_sta_key_req_msg msg_body;
  #line 1727 
  int ret;
  #line 1729 
  cif_mutex_lock_hal_mutex_of_wcn36xx(& wcn->hal_mutex);
  #line 1730 
  memset((void *)(& msg_body),0,248UL);
  #line 1730 
  msg_body.header.msg_type = (enum wcn36xx_hal_host_msg_type)26U;
  #line 1730 
  msg_body.header.msg_version = (enum wcn36xx_hal_host_msg_version)0U;
  #line 1730 
  msg_body.header.len = 248U;
  #line 1732 
  msg_body.set_sta_key_params.sta_index = (unsigned short)sta_index;
  #line 1733 
  msg_body.set_sta_key_params.enc_type = enc_type;
  #line 1735 
  if ((unsigned int)enc_type + 4294967295U <= 1U) {
    #line 1738 
    msg_body.set_sta_key_params.def_wep_idx = keyidx;
    #line 1739 
    msg_body.set_sta_key_params.wep_type = WCN36XX_HAL_WEP_STATIC;
  }
  else {
    #line 1741 
    msg_body.set_sta_key_params.key[0].id = keyidx;
    #line 1742 
    msg_body.set_sta_key_params.key[0].unicast = (unsigned char)1U;
    #line 1743 
    msg_body.set_sta_key_params.key[0].direction = WCN36XX_HAL_TX_RX;
    #line 1744 
    msg_body.set_sta_key_params.key[0].pae_role = (unsigned char)0U;
    #line 1745 
    msg_body.set_sta_key_params.key[0].length = (unsigned short)keylen;
    #line 1746 
    memcpy((void *)(& msg_body.set_sta_key_params.key[0].key),(void *)key,(unsigned long)keylen);
  }
  #line 1749 
  msg_body.set_sta_key_params.single_tid_rc = (unsigned char)1U;
  #line 1751 
  memset((void *)wcn->hal_buf,0,(unsigned long)msg_body.header.len);
  #line 1751 
  memcpy((void *)wcn->hal_buf,(void *)(& msg_body),248UL);
  #line 1753 
  ret = wcn36xx_smd_send_and_wait(wcn,(unsigned long)msg_body.header.len);
  #line 1754 
  if (ret != 0) {
    #line 1755 
    printk((char *)"\001");
    #line 1756 
    goto out;
  }
  #line 1758 
  ret = wcn36xx_smd_rsp_status_check((void *)wcn->hal_buf,wcn->hal_rsp_len);
  #line 1759 
  if (ret != 0) {
    #line 1760 
    printk((char *)"\001",ret);
    #line 1761 
    goto out;
  }
  #line 1763 
  out: 
       #line 1763 
  ;
  #line 1764 
  cif_mutex_unlock_hal_mutex_of_wcn36xx(& wcn->hal_mutex);
  #line 1765 
  return ret;
}

#line 1768  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/wcn36xx/smd.c"
int wcn36xx_smd_set_bsskey(struct wcn36xx *wcn, enum ani_ed_type enc_type, u8 bssidx, u8 keyidx, u8 keylen, u8 *key)
{
  #line 1775 
  struct wcn36xx_hal_set_bss_key_req_msg msg_body;
  #line 1776 
  int ret;
  #line 1778 
  cif_mutex_lock_hal_mutex_of_wcn36xx(& wcn->hal_mutex);
  #line 1779 
  memset((void *)(& msg_body),0,243UL);
  #line 1779 
  msg_body.header.msg_type = (enum wcn36xx_hal_host_msg_type)24U;
  #line 1779 
  msg_body.header.msg_version = (enum wcn36xx_hal_host_msg_version)0U;
  #line 1779 
  msg_body.header.len = 243U;
  #line 1780 
  msg_body.bss_idx = bssidx;
  #line 1781 
  msg_body.enc_type = enc_type;
  #line 1782 
  msg_body.num_keys = (unsigned char)1U;
  #line 1783 
  msg_body.keys[0].id = keyidx;
  #line 1784 
  msg_body.keys[0].unicast = (unsigned char)0U;
  #line 1785 
  msg_body.keys[0].direction = WCN36XX_HAL_RX_ONLY;
  #line 1786 
  msg_body.keys[0].pae_role = (unsigned char)0U;
  #line 1787 
  msg_body.keys[0].length = (unsigned short)keylen;
  #line 1788 
  memcpy((void *)(& msg_body.keys[0].key),(void *)key,(unsigned long)keylen);
  #line 1790 
  memset((void *)wcn->hal_buf,0,(unsigned long)msg_body.header.len);
  #line 1790 
  memcpy((void *)wcn->hal_buf,(void *)(& msg_body),243UL);
  #line 1792 
  ret = wcn36xx_smd_send_and_wait(wcn,(unsigned long)msg_body.header.len);
  #line 1793 
  if (ret != 0) {
    #line 1794 
    printk((char *)"\001");
    #line 1795 
    goto out;
  }
  #line 1797 
  ret = wcn36xx_smd_rsp_status_check((void *)wcn->hal_buf,wcn->hal_rsp_len);
  #line 1798 
  if (ret != 0) {
    #line 1799 
    printk((char *)"\001",ret);
    #line 1800 
    goto out;
  }
  #line 1802 
  out: 
       #line 1802 
  ;
  #line 1803 
  cif_mutex_unlock_hal_mutex_of_wcn36xx(& wcn->hal_mutex);
  #line 1804 
  return ret;
}

#line 1807  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/wcn36xx/smd.c"
int wcn36xx_smd_remove_stakey(struct wcn36xx *wcn, enum ani_ed_type enc_type, u8 keyidx, u8 sta_index)
{
  #line 1812 
  struct wcn36xx_hal_remove_sta_key_req_msg msg_body;
  #line 1813 
  int ret;
  #line 1815 
  cif_mutex_lock_hal_mutex_of_wcn36xx(& wcn->hal_mutex);
  #line 1816 
  memset((void *)(& msg_body),0,16UL);
  #line 1816 
  msg_body.header.msg_type = (enum wcn36xx_hal_host_msg_type)30U;
  #line 1816 
  msg_body.header.msg_version = (enum wcn36xx_hal_host_msg_version)0U;
  #line 1816 
  msg_body.header.len = 16U;
  #line 1818 
  msg_body.sta_idx = (unsigned short)sta_index;
  #line 1819 
  msg_body.enc_type = enc_type;
  #line 1820 
  msg_body.key_id = keyidx;
  #line 1822 
  memset((void *)wcn->hal_buf,0,(unsigned long)msg_body.header.len);
  #line 1822 
  memcpy((void *)wcn->hal_buf,(void *)(& msg_body),16UL);
  #line 1824 
  ret = wcn36xx_smd_send_and_wait(wcn,(unsigned long)msg_body.header.len);
  #line 1825 
  if (ret != 0) {
    #line 1826 
    printk((char *)"\001");
    #line 1827 
    goto out;
  }
  #line 1829 
  ret = wcn36xx_smd_rsp_status_check((void *)wcn->hal_buf,wcn->hal_rsp_len);
  #line 1830 
  if (ret != 0) {
    #line 1831 
    printk((char *)"\001",ret);
    #line 1832 
    goto out;
  }
  #line 1834 
  out: 
       #line 1834 
  ;
  #line 1835 
  cif_mutex_unlock_hal_mutex_of_wcn36xx(& wcn->hal_mutex);
  #line 1836 
  return ret;
}

#line 1839  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/wcn36xx/smd.c"
int wcn36xx_smd_remove_bsskey(struct wcn36xx *wcn, enum ani_ed_type enc_type, u8 bssidx, u8 keyidx)
{
  #line 1844 
  struct wcn36xx_hal_remove_bss_key_req_msg msg_body;
  #line 1845 
  int ret;
  #line 1847 
  cif_mutex_lock_hal_mutex_of_wcn36xx(& wcn->hal_mutex);
  #line 1848 
  memset((void *)(& msg_body),0,18UL);
  #line 1848 
  msg_body.header.msg_type = (enum wcn36xx_hal_host_msg_type)28U;
  #line 1848 
  msg_body.header.msg_version = (enum wcn36xx_hal_host_msg_version)0U;
  #line 1848 
  msg_body.header.len = 18U;
  #line 1849 
  msg_body.bss_idx = bssidx;
  #line 1850 
  msg_body.enc_type = enc_type;
  #line 1851 
  msg_body.key_id = keyidx;
  #line 1853 
  memset((void *)wcn->hal_buf,0,(unsigned long)msg_body.header.len);
  #line 1853 
  memcpy((void *)wcn->hal_buf,(void *)(& msg_body),18UL);
  #line 1855 
  ret = wcn36xx_smd_send_and_wait(wcn,(unsigned long)msg_body.header.len);
  #line 1856 
  if (ret != 0) {
    #line 1857 
    printk((char *)"\001");
    #line 1858 
    goto out;
  }
  #line 1860 
  ret = wcn36xx_smd_rsp_status_check((void *)wcn->hal_buf,wcn->hal_rsp_len);
  #line 1861 
  if (ret != 0) {
    #line 1862 
    printk((char *)"\001",ret);
    #line 1863 
    goto out;
  }
  #line 1865 
  out: 
       #line 1865 
  ;
  #line 1866 
  cif_mutex_unlock_hal_mutex_of_wcn36xx(& wcn->hal_mutex);
  #line 1867 
  return ret;
}

#line 1870  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/wcn36xx/smd.c"
int wcn36xx_smd_enter_bmps(struct wcn36xx *wcn, struct ieee80211_vif *vif)
{
  #line 1872 
  struct wcn36xx_hal_enter_bmps_req_msg msg_body;
  #line 1874 
  int ret;
  #line 1873 
  struct wcn36xx_vif *vif_priv = wcn36xx_vif_to_priv(vif);
  #line 1876 
  cif_mutex_lock_hal_mutex_of_wcn36xx(& wcn->hal_mutex);
  #line 1877 
  memset((void *)(& msg_body),0,28UL);
  #line 1877 
  msg_body.header.msg_type = (enum wcn36xx_hal_host_msg_type)78U;
  #line 1877 
  msg_body.header.msg_version = (enum wcn36xx_hal_host_msg_version)0U;
  #line 1877 
  msg_body.header.len = 28U;
  #line 1879 
  msg_body.bss_index = vif_priv->bss_index;
  #line 1880 
  msg_body.tbtt = vif->bss_conf.sync_tsf;
  #line 1881 
  msg_body.dtim_period = vif_priv->dtim_period;
  #line 1883 
  memset((void *)wcn->hal_buf,0,(unsigned long)msg_body.header.len);
  #line 1883 
  memcpy((void *)wcn->hal_buf,(void *)(& msg_body),28UL);
  #line 1885 
  ret = wcn36xx_smd_send_and_wait(wcn,(unsigned long)msg_body.header.len);
  #line 1886 
  if (ret != 0) {
    #line 1887 
    printk((char *)"\001");
    #line 1888 
    goto out;
  }
  #line 1890 
  ret = wcn36xx_smd_rsp_status_check((void *)wcn->hal_buf,wcn->hal_rsp_len);
  #line 1891 
  if (ret != 0) {
    #line 1892 
    printk((char *)"\001",ret);
    #line 1893 
    goto out;
  }
  #line 1895 
  out: 
       #line 1895 
  ;
  #line 1896 
  cif_mutex_unlock_hal_mutex_of_wcn36xx(& wcn->hal_mutex);
  #line 1897 
  return ret;
}

#line 1900  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/wcn36xx/smd.c"
int wcn36xx_smd_exit_bmps(struct wcn36xx *wcn, struct ieee80211_vif *vif)
{
  #line 1902 
  struct wcn36xx_hal_exit_bmps_req_msg msg_body;
  #line 1904 
  int ret;
  #line 1903 
  struct wcn36xx_vif *vif_priv = wcn36xx_vif_to_priv(vif);
  #line 1906 
  cif_mutex_lock_hal_mutex_of_wcn36xx(& wcn->hal_mutex);
  #line 1907 
  memset((void *)(& msg_body),0,10UL);
  #line 1907 
  msg_body.header.msg_type = (enum wcn36xx_hal_host_msg_type)79U;
  #line 1907 
  msg_body.header.msg_version = (enum wcn36xx_hal_host_msg_version)0U;
  #line 1907 
  msg_body.header.len = 10U;
  #line 1909 
  msg_body.bss_index = vif_priv->bss_index;
  #line 1911 
  memset((void *)wcn->hal_buf,0,(unsigned long)msg_body.header.len);
  #line 1911 
  memcpy((void *)wcn->hal_buf,(void *)(& msg_body),10UL);
  #line 1913 
  ret = wcn36xx_smd_send_and_wait(wcn,(unsigned long)msg_body.header.len);
  #line 1914 
  if (ret != 0) {
    #line 1915 
    printk((char *)"\001");
    #line 1916 
    goto out;
  }
  #line 1918 
  ret = wcn36xx_smd_rsp_status_check((void *)wcn->hal_buf,wcn->hal_rsp_len);
  #line 1919 
  if (ret != 0) {
    #line 1920 
    printk((char *)"\001",ret);
    #line 1921 
    goto out;
  }
  #line 1923 
  out: 
       #line 1923 
  ;
  #line 1924 
  cif_mutex_unlock_hal_mutex_of_wcn36xx(& wcn->hal_mutex);
  #line 1925 
  return ret;
}

#line 1927  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/wcn36xx/smd.c"
int wcn36xx_smd_set_power_params(struct wcn36xx *wcn, bool ignore_dtim)
{
  #line 1929 
  struct wcn36xx_hal_set_power_params_req_msg msg_body;
  #line 1930 
  int ret;
  #line 1932 
  cif_mutex_lock_hal_mutex_of_wcn36xx(& wcn->hal_mutex);
  #line 1933 
  memset((void *)(& msg_body),0,32UL);
  #line 1933 
  msg_body.header.msg_type = (enum wcn36xx_hal_host_msg_type)166U;
  #line 1933 
  msg_body.header.msg_version = (enum wcn36xx_hal_host_msg_version)0U;
  #line 1933 
  msg_body.header.len = 32U;
  #line 1938 
  if ((int)ignore_dtim != 0) {
    #line 1939 
    msg_body.ignore_dtim = 1U;
    #line 1940 
    msg_body.dtim_period = 2U;
  }
  #line 1942 
  msg_body.listen_interval = (unsigned int)(wcn->hw)->conf.listen_interval;
  #line 1944 
  memset((void *)wcn->hal_buf,0,(unsigned long)msg_body.header.len);
  #line 1944 
  memcpy((void *)wcn->hal_buf,(void *)(& msg_body),32UL);
  #line 1946 
  ret = wcn36xx_smd_send_and_wait(wcn,(unsigned long)msg_body.header.len);
  #line 1947 
  if (ret != 0) {
    #line 1948 
    printk((char *)"\001");
    #line 1949 
    goto out;
  }
  #line 1952 
  out: 
       #line 1952 
  ;
  #line 1953 
  cif_mutex_unlock_hal_mutex_of_wcn36xx(& wcn->hal_mutex);
  #line 1954 
  return ret;
}

#line 1959  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/wcn36xx/smd.c"
int wcn36xx_smd_keep_alive_req(struct wcn36xx *wcn, struct ieee80211_vif *vif, int packet_type)
{
  #line 1963 
  struct wcn36xx_hal_keep_alive_req_msg msg_body;
  #line 1965 
  int ret;
  #line 1964 
  struct wcn36xx_vif *vif_priv = wcn36xx_vif_to_priv(vif);
  #line 1967 
  cif_mutex_lock_hal_mutex_of_wcn36xx(& wcn->hal_mutex);
  #line 1968 
  memset((void *)(& msg_body),0,28UL);
  #line 1968 
  msg_body.header.msg_type = (enum wcn36xx_hal_host_msg_type)145U;
  #line 1968 
  msg_body.header.msg_version = (enum wcn36xx_hal_host_msg_version)0U;
  #line 1968 
  msg_body.header.len = 28U;
  #line 1970 
  if (packet_type == 1) {
    #line 1971 
    msg_body.bss_index = vif_priv->bss_index;
    #line 1972 
    msg_body.packet_type = (unsigned char)1U;
    #line 1973 
    msg_body.time_period = 30U;
  }
  else 
    #line 1974 
    if (! (packet_type == 2)) {
      #line 1977 
      printk((char *)"\001",packet_type);
      #line 1978 
      ret = -22;
      #line 1979 
      goto out;
    }
  #line 1982 
  memset((void *)wcn->hal_buf,0,(unsigned long)msg_body.header.len);
  #line 1982 
  memcpy((void *)wcn->hal_buf,(void *)(& msg_body),28UL);
  #line 1984 
  ret = wcn36xx_smd_send_and_wait(wcn,(unsigned long)msg_body.header.len);
  #line 1985 
  if (ret != 0) {
    #line 1986 
    printk((char *)"\001");
    #line 1987 
    goto out;
  }
  #line 1989 
  ret = wcn36xx_smd_rsp_status_check((void *)wcn->hal_buf,wcn->hal_rsp_len);
  #line 1990 
  if (ret != 0) {
    #line 1991 
    printk((char *)"\001",ret);
    #line 1992 
    goto out;
  }
  #line 1994 
  out: 
       #line 1994 
  ;
  #line 1995 
  cif_mutex_unlock_hal_mutex_of_wcn36xx(& wcn->hal_mutex);
  #line 1996 
  return ret;
}

#line 1999  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/wcn36xx/smd.c"
int wcn36xx_smd_dump_cmd_req(struct wcn36xx *wcn, u32 arg1, u32 arg2, u32 arg3, u32 arg4, u32 arg5)
{
  #line 2002 
  struct wcn36xx_hal_dump_cmd_req_msg msg_body;
  #line 2003 
  int ret;
  #line 2005 
  cif_mutex_lock_hal_mutex_of_wcn36xx(& wcn->hal_mutex);
  #line 2006 
  memset((void *)(& msg_body),0,28UL);
  #line 2006 
  msg_body.header.msg_type = (enum wcn36xx_hal_host_msg_type)121U;
  #line 2006 
  msg_body.header.msg_version = (enum wcn36xx_hal_host_msg_version)0U;
  #line 2006 
  msg_body.header.len = 28U;
  #line 2008 
  msg_body.arg1 = arg1;
  #line 2009 
  msg_body.arg2 = arg2;
  #line 2010 
  msg_body.arg3 = arg3;
  #line 2011 
  msg_body.arg4 = arg4;
  #line 2012 
  msg_body.arg5 = arg5;
  #line 2014 
  memset((void *)wcn->hal_buf,0,(unsigned long)msg_body.header.len);
  #line 2014 
  memcpy((void *)wcn->hal_buf,(void *)(& msg_body),28UL);
  #line 2016 
  ret = wcn36xx_smd_send_and_wait(wcn,(unsigned long)msg_body.header.len);
  #line 2017 
  if (ret != 0) {
    #line 2018 
    printk((char *)"\001");
    #line 2019 
    goto out;
  }
  #line 2021 
  ret = wcn36xx_smd_rsp_status_check((void *)wcn->hal_buf,wcn->hal_rsp_len);
  #line 2022 
  if (ret != 0) {
    #line 2023 
    printk((char *)"\001",ret);
    #line 2024 
    goto out;
  }
  #line 2026 
  out: 
       #line 2026 
  ;
  #line 2027 
  cif_mutex_unlock_hal_mutex_of_wcn36xx(& wcn->hal_mutex);
  #line 2028 
  return ret;
}

#line 2031  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/wcn36xx/smd.c"
void set_feat_caps(u32 *bitmap, enum place_holder_in_cap_bitmap cap)
{
  #line 2033 
  int arr_idx;
  #line 2033 
  int bit_idx;
  #line 2035 
  if (cap > (unsigned int)127) {
    #line 2036 
    printk((char *)"\001",(unsigned int)cap);
    #line 2037 
    return;
  }
  #line 2040 
  arr_idx = (int)((unsigned int)cap / 32U);
  #line 2041 
  bit_idx = (int)cap & 31;
  #line 2042 
  *(bitmap + (unsigned long)arr_idx) |= (unsigned int)(1 << bit_idx);
  #line 2043 
  return;
}

#line 2045  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/wcn36xx/smd.c"
int get_feat_caps(u32 *bitmap, enum place_holder_in_cap_bitmap cap)
{
  #line 2047 
  int arr_idx;
  #line 2047 
  int bit_idx;
  #line 2049 
  if (cap > (unsigned int)127) {
    #line 2050 
    printk((char *)"\001",(unsigned int)cap);
    #line 2051 
    return -22;
  }
  #line 2054 
  arr_idx = (int)((unsigned int)cap / 32U);
  #line 2055 
  bit_idx = (int)cap & 31;
  #line 2057 
  return (*(bitmap + (unsigned long)arr_idx) & (unsigned int)(1 << bit_idx)) != 0U;
}

#line 2060  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/wcn36xx/smd.c"
void clear_feat_caps(u32 *bitmap, enum place_holder_in_cap_bitmap cap)
{
  #line 2062 
  int arr_idx;
  #line 2062 
  int bit_idx;
  #line 2064 
  if (cap > (unsigned int)127) {
    #line 2065 
    printk((char *)"\001",(unsigned int)cap);
    #line 2066 
    return;
  }
  #line 2069 
  arr_idx = (int)((unsigned int)cap / 32U);
  #line 2070 
  bit_idx = (int)cap & 31;
  #line 2071 
  *(bitmap + (unsigned long)arr_idx) &= (unsigned int)(~ (1 << bit_idx));
  #line 2072 
  return;
}

#line 2074  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/wcn36xx/smd.c"
int wcn36xx_smd_feature_caps_exchange(struct wcn36xx *wcn)
{
  #line 2076 
  struct wcn36xx_hal_feat_caps_msg msg_body;
  #line 2076 
  struct wcn36xx_hal_feat_caps_msg *rsp;
  #line 2077 
  int ret;
  #line 2077 
  int i;
  #line 2079 
  cif_mutex_lock_hal_mutex_of_wcn36xx(& wcn->hal_mutex);
  #line 2080 
  memset((void *)(& msg_body),0,24UL);
  #line 2080 
  msg_body.header.msg_type = (enum wcn36xx_hal_host_msg_type)175U;
  #line 2080 
  msg_body.header.msg_version = (enum wcn36xx_hal_host_msg_version)0U;
  #line 2080 
  msg_body.header.len = 24U;
  #line 2082 
  set_feat_caps((u32 *)(& msg_body.feat_caps),(enum place_holder_in_cap_bitmap)STA_POWERSAVE);
  #line 2084 
  memset((void *)wcn->hal_buf,0,(unsigned long)msg_body.header.len);
  #line 2084 
  memcpy((void *)wcn->hal_buf,(void *)(& msg_body),24UL);
  #line 2086 
  ret = wcn36xx_smd_send_and_wait(wcn,(unsigned long)msg_body.header.len);
  #line 2087 
  if (ret != 0) {
    #line 2088 
    printk((char *)"\001");
    #line 2089 
    goto out;
  }
  #line 2091 
  if (wcn->hal_rsp_len != 24UL) {
    #line 2092 
    printk((char *)"\001");
    #line 2093 
    goto out;
  }
  #line 2096 
  rsp = (struct wcn36xx_hal_feat_caps_msg *)wcn->hal_buf;
  #line 2098 
  i = 0;
  #line 2098 
  while (i <= 3) {
    #line 2099 
    wcn->fw_feat_caps[i] = rsp->feat_caps[i];
    #line 2098 
    i ++;
  }
  #line 2100 
  out: 
       #line 2100 
  ;
  #line 2101 
  cif_mutex_unlock_hal_mutex_of_wcn36xx(& wcn->hal_mutex);
  #line 2102 
  return ret;
}

#line 2105  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/wcn36xx/smd.c"
int wcn36xx_smd_add_ba_session(struct wcn36xx *wcn, struct ieee80211_sta *sta, u16 tid, u16 *ssn, u8 direction, u8 sta_index)
{
  #line 2112 
  struct wcn36xx_hal_add_ba_session_req_msg msg_body;
  #line 2113 
  int ret;
  #line 2115 
  cif_mutex_lock_hal_mutex_of_wcn36xx(& wcn->hal_mutex);
  #line 2116 
  memset((void *)(& msg_body),0,26UL);
  #line 2116 
  msg_body.header.msg_type = (enum wcn36xx_hal_host_msg_type)57U;
  #line 2116 
  msg_body.header.msg_version = (enum wcn36xx_hal_host_msg_version)0U;
  #line 2116 
  msg_body.header.len = 26U;
  #line 2118 
  msg_body.sta_index = (unsigned short)sta_index;
  #line 2119 
  memcpy((void *)(& msg_body.mac_addr),(void *)(& sta->addr),6UL);
  #line 2120 
  msg_body.dialog_token = (unsigned char)16U;
  #line 2121 
  msg_body.tid = (unsigned char)tid;
  #line 2124 
  msg_body.policy = (unsigned char)1U;
  #line 2125 
  msg_body.buffer_size = (unsigned short)64U;
  #line 2126 
  msg_body.timeout = (unsigned short)0U;
  #line 2127 
  if (ssn != (u16 *)0U) 
                        #line 2128 
                        msg_body.ssn = *ssn;
  #line 2129 
  msg_body.direction = direction;
  #line 2131 
  memset((void *)wcn->hal_buf,0,(unsigned long)msg_body.header.len);
  #line 2131 
  memcpy((void *)wcn->hal_buf,(void *)(& msg_body),26UL);
  #line 2133 
  ret = wcn36xx_smd_send_and_wait(wcn,(unsigned long)msg_body.header.len);
  #line 2134 
  if (ret != 0) {
    #line 2135 
    printk((char *)"\001");
    #line 2136 
    goto out;
  }
  #line 2138 
  ret = wcn36xx_smd_rsp_status_check((void *)wcn->hal_buf,wcn->hal_rsp_len);
  #line 2139 
  if (ret != 0) {
    #line 2140 
    printk((char *)"\001",ret);
    #line 2141 
    goto out;
  }
  #line 2143 
  out: 
       #line 2143 
  ;
  #line 2144 
  cif_mutex_unlock_hal_mutex_of_wcn36xx(& wcn->hal_mutex);
  #line 2145 
  return ret;
}

#line 2148  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/wcn36xx/smd.c"
int wcn36xx_smd_add_ba(struct wcn36xx *wcn)
{
  #line 2150 
  struct wcn36xx_hal_add_ba_req_msg msg_body;
  #line 2151 
  int ret;
  #line 2153 
  cif_mutex_lock_hal_mutex_of_wcn36xx(& wcn->hal_mutex);
  #line 2154 
  memset((void *)(& msg_body),0,10UL);
  #line 2154 
  msg_body.header.msg_type = (enum wcn36xx_hal_host_msg_type)38U;
  #line 2154 
  msg_body.header.msg_version = (enum wcn36xx_hal_host_msg_version)0U;
  #line 2154 
  msg_body.header.len = 10U;
  #line 2156 
  msg_body.session_id = (unsigned char)0U;
  #line 2157 
  msg_body.win_size = (unsigned char)64U;
  #line 2159 
  memset((void *)wcn->hal_buf,0,(unsigned long)msg_body.header.len);
  #line 2159 
  memcpy((void *)wcn->hal_buf,(void *)(& msg_body),10UL);
  #line 2161 
  ret = wcn36xx_smd_send_and_wait(wcn,(unsigned long)msg_body.header.len);
  #line 2162 
  if (ret != 0) {
    #line 2163 
    printk((char *)"\001");
    #line 2164 
    goto out;
  }
  #line 2166 
  ret = wcn36xx_smd_rsp_status_check((void *)wcn->hal_buf,wcn->hal_rsp_len);
  #line 2167 
  if (ret != 0) {
    #line 2168 
    printk((char *)"\001",ret);
    #line 2169 
    goto out;
  }
  #line 2171 
  out: 
       #line 2171 
  ;
  #line 2172 
  cif_mutex_unlock_hal_mutex_of_wcn36xx(& wcn->hal_mutex);
  #line 2173 
  return ret;
}

#line 2176  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/wcn36xx/smd.c"
int wcn36xx_smd_del_ba(struct wcn36xx *wcn, u16 tid, u8 sta_index)
{
  #line 2178 
  struct wcn36xx_hal_del_ba_req_msg msg_body;
  #line 2179 
  int ret;
  #line 2181 
  cif_mutex_lock_hal_mutex_of_wcn36xx(& wcn->hal_mutex);
  #line 2182 
  memset((void *)(& msg_body),0,12UL);
  #line 2182 
  msg_body.header.msg_type = (enum wcn36xx_hal_host_msg_type)40U;
  #line 2182 
  msg_body.header.msg_version = (enum wcn36xx_hal_host_msg_version)0U;
  #line 2182 
  msg_body.header.len = 12U;
  #line 2184 
  msg_body.sta_index = (unsigned short)sta_index;
  #line 2185 
  msg_body.tid = (unsigned char)tid;
  #line 2186 
  msg_body.direction = (unsigned char)0U;
  #line 2187 
  memset((void *)wcn->hal_buf,0,(unsigned long)msg_body.header.len);
  #line 2187 
  memcpy((void *)wcn->hal_buf,(void *)(& msg_body),12UL);
  #line 2189 
  ret = wcn36xx_smd_send_and_wait(wcn,(unsigned long)msg_body.header.len);
  #line 2190 
  if (ret != 0) {
    #line 2191 
    printk((char *)"\001");
    #line 2192 
    goto out;
  }
  #line 2194 
  ret = wcn36xx_smd_rsp_status_check((void *)wcn->hal_buf,wcn->hal_rsp_len);
  #line 2195 
  if (ret != 0) {
    #line 2196 
    printk((char *)"\001",ret);
    #line 2197 
    goto out;
  }
  #line 2199 
  out: 
       #line 2199 
  ;
  #line 2200 
  cif_mutex_unlock_hal_mutex_of_wcn36xx(& wcn->hal_mutex);
  #line 2201 
  return ret;
}

#line 2204  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/wcn36xx/smd.c"
static int wcn36xx_smd_trigger_ba_rsp(void *buf, int len)
{
  #line 2206 
  struct wcn36xx_hal_trigger_ba_rsp_msg *rsp;
  #line 2208 
  if ((unsigned int)len <= 19U) 
                                #line 2209 
                                return -22;
  #line 2211 
  rsp = (struct wcn36xx_hal_trigger_ba_rsp_msg *)buf;
  #line 2212 
  return (int)rsp->status;
}

#line 2215  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/wcn36xx/smd.c"
int wcn36xx_smd_trigger_ba(struct wcn36xx *wcn, u8 sta_index)
{
  #line 2217 
  struct wcn36xx_hal_trigger_ba_req_msg msg_body;
  #line 2218 
  struct wcn36xx_hal_trigger_ba_req_candidate *candidate;
  #line 2219 
  int ret;
  #line 2221 
  cif_mutex_lock_hal_mutex_of_wcn36xx(& wcn->hal_mutex);
  #line 2222 
  memset((void *)(& msg_body),0,11UL);
  #line 2222 
  msg_body.header.msg_type = (enum wcn36xx_hal_host_msg_type)59U;
  #line 2222 
  msg_body.header.msg_version = (enum wcn36xx_hal_host_msg_version)0U;
  #line 2222 
  msg_body.header.len = 11U;
  #line 2224 
  msg_body.session_id = (unsigned char)0U;
  #line 2225 
  msg_body.candidate_cnt = (unsigned short)1U;
  #line 2226 
  msg_body.header.len += 2U;
  #line 2227 
  memset((void *)wcn->hal_buf,0,(unsigned long)msg_body.header.len);
  #line 2227 
  memcpy((void *)wcn->hal_buf,(void *)(& msg_body),11UL);
  #line 2229 
  candidate = (struct wcn36xx_hal_trigger_ba_req_candidate *)(wcn->hal_buf + 11UL);
  #line 2231 
  candidate->sta_index = sta_index;
  #line 2232 
  candidate->tid_bitmap = (unsigned char)1U;
  #line 2234 
  ret = wcn36xx_smd_send_and_wait(wcn,(unsigned long)msg_body.header.len);
  #line 2235 
  if (ret != 0) {
    #line 2236 
    printk((char *)"\001");
    #line 2237 
    goto out;
  }
  #line 2239 
  ret = wcn36xx_smd_trigger_ba_rsp((void *)wcn->hal_buf,(int)wcn->hal_rsp_len);
  #line 2240 
  if (ret != 0) {
    #line 2241 
    printk((char *)"\001",ret);
    #line 2242 
    goto out;
  }
  #line 2244 
  out: 
       #line 2244 
  ;
  #line 2245 
  cif_mutex_unlock_hal_mutex_of_wcn36xx(& wcn->hal_mutex);
  #line 2246 
  return ret;
}

#line 2249  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/wcn36xx/smd.c"
static int wcn36xx_smd_tx_compl_ind(struct wcn36xx *wcn, void *buf, size_t len)
{
  #line 2251 
  struct wcn36xx_hal_tx_compl_ind_msg *rsp = (struct wcn36xx_hal_tx_compl_ind_msg *)buf;
  #line 2253 
  if (len != 12UL) {
    #line 2254 
    printk((char *)"\001");
    #line 2255 
    return -5;
  }
  #line 2258 
  wcn36xx_dxe_tx_ack_ind(wcn,rsp->status);
  #line 2260 
  return 0;
}

#line 2263  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/wcn36xx/smd.c"
static int wcn36xx_smd_hw_scan_ind(struct wcn36xx *wcn, void *buf, size_t len)
{
  #line 2265 
  struct wcn36xx_hal_scan_offload_ind *rsp = (struct wcn36xx_hal_scan_offload_ind *)buf;
  #line 2266 
  struct cfg80211_scan_info scan_info = {.scan_start_tsf = 0ULL, .tsf_bssid = {(unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0}, .aborted = (_Bool)0};
  #line 2268 
  if (len != 20UL) {
    #line 2269 
    printk((char *)"\001");
    #line 2270 
    return -5;
  }
  #line 2273 
  if ((wcn36xx_dbg_mask & 256U) != 0U) 
                                       #line 2273 
                                       printk((char *)"\001",rsp->type);
  #line 2275 
  switch (rsp->type) {
    #line 2276 
    case (u32)64: 
                  #line 2276 
    ;
    #line 2277 
    case (u32)16: 
                  #line 2277 
    ;
    #line 2278 
    scan_info.aborted = (_Bool)1;
    #line 2280 
    case (u32)2: 
                 #line 2280 
    ;
    #line 2281 
    cif_mutex_lock_scan_lock_of_wcn36xx_0(& wcn->scan_lock);
    #line 2282 
    wcn->scan_req = (struct cfg80211_scan_request *)0;
    #line 2283 
    if ((int)wcn->scan_aborted != 0) 
                                     #line 2284 
                                     scan_info.aborted = (_Bool)1;
    #line 2285 
    cif_mutex_unlock_scan_lock_of_wcn36xx_0(& wcn->scan_lock);
    #line 2286 
    ieee80211_scan_completed(wcn->hw,& scan_info);
    #line 2287 
    break;
    #line 2288 
    case (u32)1: 
                 #line 2288 
    ;
    #line 2289 
    case (u32)8: 
                 #line 2289 
    ;
    #line 2290 
    case (u32)32: 
                  #line 2290 
    ;
    #line 2291 
    case (u32)128: 
                   #line 2291 
    ;
    #line 2292 
    break;
    #line 2293 
    default: 
             #line 2293 
    ;
    #line 2294 
    printk((char *)"\001",rsp->type);
  }
  #line 2297 
  return 0;
}

#line 2300  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/wcn36xx/smd.c"
static int wcn36xx_smd_missed_beacon_ind(struct wcn36xx *wcn, void *buf, size_t len)
{
  #line 2324 
  void *__mptr_1;
  #line 2306 
  struct wcn36xx_vif *tmp;
  #line 2304 
  struct wcn36xx_hal_missed_beacon_ind_msg *rsp = (struct wcn36xx_hal_missed_beacon_ind_msg *)buf;
  #line 2305 
  struct ieee80211_vif *vif = (struct ieee80211_vif *)0;
  #line 2309 
  if ((int)wcn36xx_is_fw_version(wcn,(unsigned char)1,(unsigned char)2,
                              (unsigned char)2,(unsigned char)24) != 0) {
    #line 2310 
    void *__mptr;
    #line 2310 
    __mptr = (void *)wcn->vif_list.next;
    #line 2310 
    tmp = ((struct wcn36xx_vif *)__mptr);
    #line 2310 
    while (& tmp->list != & wcn->vif_list) {
      #line 2310 
      void *__mptr_0;
      #line 2311 
      if ((wcn36xx_dbg_mask & 256U) != 0U) 
                                           #line 2311 
                                           printk((char *)"\001",(int)tmp->bss_index);
      #line 2313 
      vif = wcn36xx_priv_to_vif(tmp);
      #line 2314 
      ieee80211_connection_loss(vif);
      #line 2310 
      __mptr_0 = (void *)tmp->list.next;
      #line 2310 
      tmp = ((struct wcn36xx_vif *)__mptr_0);
    }
    #line 2316 
    return 0;
  }
  #line 2319 
  if (len != 9UL) {
    #line 2320 
    printk((char *)"\001");
    #line 2321 
    return -5;
  }
  #line 2324 
  __mptr_1 = (void *)wcn->vif_list.next;
  #line 2324 
  tmp = ((struct wcn36xx_vif *)__mptr_1);
  #line 2324 
  while (& tmp->list != & wcn->vif_list) {
    #line 2324 
    void *__mptr_2;
    #line 2325 
    if ((int)tmp->bss_index == (int)rsp->bss_index) {
      #line 2326 
      if ((wcn36xx_dbg_mask & 256U) != 0U) 
                                           #line 2326 
                                           printk((char *)"\001",(int)rsp->bss_index);
      #line 2328 
      vif = wcn36xx_priv_to_vif(tmp);
      #line 2329 
      ieee80211_connection_loss(vif);
      #line 2330 
      return 0;
    }
    #line 2324 
    __mptr_2 = (void *)tmp->list.next;
    #line 2324 
    tmp = ((struct wcn36xx_vif *)__mptr_2);
  }
  #line 2334 
  printk((char *)"\001",(int)rsp->bss_index);
  #line 2335 
  return -2;
}

#line 2338  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/wcn36xx/smd.c"
static int wcn36xx_smd_delete_sta_context_ind(struct wcn36xx *wcn, void *buf, size_t len)
{
  #line 2354 
  void *__mptr;
  #line 2343 
  struct wcn36xx_vif *tmp;
  #line 2344 
  struct ieee80211_sta *sta;
  #line 2342 
  struct wcn36xx_hal_delete_sta_context_ind_msg *rsp = (struct wcn36xx_hal_delete_sta_context_ind_msg *)buf;
  #line 2346 
  if (len != 26UL) {
    #line 2347 
    printk((char *)"\001");
    #line 2348 
    return -5;
  }
  #line 2351 
  if ((wcn36xx_dbg_mask & 256U) != 0U) 
                                       #line 2351 
                                       printk((char *)"\001",(u8 *)(& rsp->addr2),(int)rsp->sta_id);
  #line 2354 
  __mptr = (void *)wcn->vif_list.next;
  #line 2354 
  tmp = ((struct wcn36xx_vif *)__mptr);
  #line 2354 
  while (& tmp->list != & wcn->vif_list) {
    #line 2354 
    void *__mptr_0;
    {
      #line 2355 
      rcu_read_lock();
      #line 2356 
      ;
      #line 2356 
      sta = ieee80211_find_sta(wcn36xx_priv_to_vif(tmp),(u8 *)(& rsp->addr2));
      #line 2357 
      if (sta != (struct ieee80211_sta *)0) 
                                            #line 2358 
                                            ieee80211_report_low_ack(sta,0U);
      #line 2359 
      rcu_read_unlock();
      #line 2360 
      if (sta != (struct ieee80211_sta *)0) 
                                            #line 2361 
                                            return 0;
    }
    #line 2354 
    __mptr_0 = (void *)tmp->list.next;
    #line 2354 
    tmp = ((struct wcn36xx_vif *)__mptr_0);
  }
  #line 2364 
  printk((char *)"\001",(u8 *)(& rsp->addr2),(int)rsp->sta_id);
  #line 2367 
  return -2;
}

#line 2370  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/wcn36xx/smd.c"
static int wcn36xx_smd_print_reg_info_ind(struct wcn36xx *wcn, void *buf, size_t len)
{
  #line 2375 
  int i;
  #line 2374 
  struct wcn36xx_hal_print_reg_info_ind *rsp = (struct wcn36xx_hal_print_reg_info_ind *)buf;
  #line 2377 
  if (len <= 19UL) {
    #line 2378 
    printk((char *)"\001");
    #line 2379 
    return -5;
  }
  #line 2382 
  if ((wcn36xx_dbg_mask & 256U) != 0U) 
                                       #line 2382 
                                       printk((char *)"\001",rsp->scenario,rsp->reason);
  #line 2386 
  i = 0;
  #line 2386 
  while (rsp->count > (unsigned int)i) {
    #line 2387 
    if ((wcn36xx_dbg_mask & 256U) != 0U) 
                                         #line 2387 
                                         printk((char *)"\001",rsp->regs[i].addr,rsp->regs[i].value);
    #line 2386 
    i ++;
  }
  #line 2391 
  return 0;
}

#line 2394  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/wcn36xx/smd.c"
int wcn36xx_smd_update_cfg(struct wcn36xx *wcn, u32 cfg_id, u32 value)
{
  #line 2396 
  struct wcn36xx_hal_update_cfg_req_msg msg_body;
  #line 2396 
  struct wcn36xx_hal_update_cfg_req_msg *body;
  #line 2397 
  size_t len;
  #line 2398 
  int ret;
  #line 2400 
  cif_mutex_lock_hal_mutex_of_wcn36xx(& wcn->hal_mutex);
  #line 2401 
  memset((void *)(& msg_body),0,12UL);
  #line 2401 
  msg_body.header.msg_type = (enum wcn36xx_hal_host_msg_type)48U;
  #line 2401 
  msg_body.header.msg_version = (enum wcn36xx_hal_host_msg_version)0U;
  #line 2401 
  msg_body.header.len = 12U;
  #line 2403 
  memset((void *)wcn->hal_buf,0,(unsigned long)msg_body.header.len);
  #line 2403 
  memcpy((void *)wcn->hal_buf,(void *)(& msg_body),12UL);
  #line 2405 
  body = (struct wcn36xx_hal_update_cfg_req_msg *)wcn->hal_buf;
  #line 2406 
  len = (unsigned long)msg_body.header.len;
  #line 2408 
  put_cfg_tlv_u32(wcn,& len,cfg_id,value);
  #line 2409 
  body->header.len = (unsigned int)len;
  #line 2410 
  body->len = (unsigned int)len + 4294967284U;
  #line 2412 
  ret = wcn36xx_smd_send_and_wait(wcn,(unsigned long)body->header.len);
  #line 2413 
  if (ret != 0) {
    #line 2414 
    printk((char *)"\001");
    #line 2415 
    goto out;
  }
  #line 2417 
  ret = wcn36xx_smd_rsp_status_check((void *)wcn->hal_buf,wcn->hal_rsp_len);
  #line 2418 
  if (ret != 0) {
    #line 2419 
    printk((char *)"\001",ret);
    #line 2420 
    goto out;
  }
  #line 2422 
  out: 
       #line 2422 
  ;
  #line 2423 
  cif_mutex_unlock_hal_mutex_of_wcn36xx(& wcn->hal_mutex);
  #line 2424 
  return ret;
}

#line 2427  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/wcn36xx/smd.c"
int wcn36xx_smd_set_mc_list(struct wcn36xx *wcn, struct ieee80211_vif *vif, struct wcn36xx_hal_rcv_flt_mc_addr_list_type *fp)
{
  #line 2433 
  int ret;
  #line 2431 
  struct wcn36xx_vif *vif_priv = wcn36xx_vif_to_priv(vif);
  #line 2432 
  struct wcn36xx_hal_rcv_flt_pkt_set_mc_list_req_msg *msg_body = (struct wcn36xx_hal_rcv_flt_pkt_set_mc_list_req_msg *)0;
  #line 2435 
  cif_mutex_lock_hal_mutex_of_wcn36xx(& wcn->hal_mutex);
  #line 2437 
  msg_body = (struct wcn36xx_hal_rcv_flt_pkt_set_mc_list_req_msg *)wcn->hal_buf;
  #line 2439 
  init_hal_msg(& msg_body->header,(enum wcn36xx_hal_host_msg_type)WCN36XX_HAL_8023_MULTICAST_LIST_REQ,1446UL);
  #line 2443 
  if (fp != (struct wcn36xx_hal_rcv_flt_mc_addr_list_type *)0) 
                                                               #line 2444 
                                                               memcpy((void *)(& msg_body->mc_addr_list),(void *)fp,1446UL); else 
                                                                    #line 2447 
                                                                    msg_body->mc_addr_list.mc_addr_count = 0U;
  #line 2449 
  msg_body->mc_addr_list.bss_index = vif_priv->bss_index;
  #line 2451 
  ret = wcn36xx_smd_send_and_wait(wcn,(unsigned long)msg_body->header.len);
  #line 2452 
  if (ret != 0) {
    #line 2453 
    printk((char *)"\001");
    #line 2454 
    goto out;
  }
  #line 2456 
  ret = wcn36xx_smd_rsp_status_check((void *)wcn->hal_buf,wcn->hal_rsp_len);
  #line 2457 
  if (ret != 0) {
    #line 2458 
    printk((char *)"\001",ret);
    #line 2459 
    goto out;
  }
  #line 2461 
  out: 
       #line 2461 
  ;
  #line 2462 
  cif_mutex_unlock_hal_mutex_of_wcn36xx(& wcn->hal_mutex);
  #line 2463 
  return ret;
}

#line 2466  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/wcn36xx/smd.c"
int wcn36xx_smd_rsp_process(struct rpmsg_device *rpdev, void *buf, int len, void *priv, u32 addr)
{
  #line 2472 
  struct wcn36xx_hal_ind_msg *msg_ind;
  #line 2469 
  struct wcn36xx_hal_msg_header *msg_header = (struct wcn36xx_hal_msg_header *)buf;
  #line 2470 
  struct ieee80211_hw *hw = (struct ieee80211_hw *)priv;
  #line 2471 
  struct wcn36xx *wcn = (struct wcn36xx *)hw->priv;
  #line 2473 
  if ((wcn36xx_dbg_mask & 8U) != 0U) 
                                     #line 2473 
                                     print_hex_dump((char *)"\001",(char *)"wcn36xx",2,32,1,buf,(unsigned long)len,(_Bool)0);
  #line 2475 
  switch ((int)msg_header->msg_type) {
    #line 2476 
    case 1: 
            #line 2476 
    ;
    #line 2477 
    case 13: 
             #line 2477 
    ;
    #line 2478 
    case 17: 
             #line 2478 
    ;
    #line 2479 
    case 126: 
              #line 2479 
    ;
    #line 2480 
    case 3: 
            #line 2480 
    ;
    #line 2481 
    case 128: 
              #line 2481 
    ;
    #line 2482 
    case 15: 
             #line 2482 
    ;
    #line 2483 
    case 5: 
            #line 2483 
    ;
    #line 2484 
    case 7: 
            #line 2484 
    ;
    #line 2485 
    case 9: 
            #line 2485 
    ;
    #line 2486 
    case 11: 
             #line 2486 
    ;
    #line 2487 
    case 56: 
             #line 2487 
    ;
    #line 2488 
    case 19: 
             #line 2488 
    ;
    #line 2489 
    case 64: 
             #line 2489 
    ;
    #line 2490 
    case 45: 
             #line 2490 
    ;
    #line 2491 
    case 69: 
             #line 2491 
    ;
    #line 2492 
    case 25: 
             #line 2492 
    ;
    #line 2493 
    case 27: 
             #line 2493 
    ;
    #line 2494 
    case 31: 
             #line 2494 
    ;
    #line 2495 
    case 29: 
             #line 2495 
    ;
    #line 2496 
    case 97: 
             #line 2496 
    ;
    #line 2497 
    case 167: 
              #line 2497 
    ;
    #line 2498 
    case 98: 
             #line 2498 
    ;
    #line 2499 
    case 146: 
              #line 2499 
    ;
    #line 2500 
    case 122: 
              #line 2500 
    ;
    #line 2501 
    case 58: 
             #line 2501 
    ;
    #line 2502 
    case 39: 
             #line 2502 
    ;
    #line 2503 
    case 41: 
             #line 2503 
    ;
    #line 2504 
    case 60: 
             #line 2504 
    ;
    #line 2505 
    case 49: 
             #line 2505 
    ;
    #line 2506 
    case 21: 
             #line 2506 
    ;
    #line 2507 
    case 152: 
              #line 2507 
    ;
    #line 2508 
    case 43: 
             #line 2508 
    ;
    #line 2509 
    case 71: 
             #line 2509 
    ;
    #line 2510 
    case 176: 
              #line 2510 
    ;
    #line 2511 
    case 158: 
              #line 2511 
    ;
    #line 2512 
    case 205: 
              #line 2512 
    ;
    #line 2513 
    case 207: 
              #line 2513 
    ;
    #line 2514 
    memcpy((void *)wcn->hal_buf,buf,(unsigned long)len);
    #line 2515 
    wcn->hal_rsp_len = (unsigned long)len;
    #line 2516 
    complete(& wcn->hal_rsp_compl);
    #line 2517 
    break;
    #line 2519 
    case 129: 
              #line 2519 
    ;
    #line 2520 
    case 233: 
              #line 2520 
    ;
    #line 2521 
    case 188: 
              #line 2521 
    ;
    #line 2522 
    case 130: 
              #line 2522 
    ;
    #line 2523 
    case 50: 
             #line 2523 
    ;
    #line 2524 
    case 67: 
             #line 2524 
    ;
    #line 2525 
    case 259: 
              #line 2525 
    ;
    #line 2526 
    case 210: 
              #line 2526 
    ;
    #line 2527 
    msg_ind = (struct wcn36xx_hal_ind_msg *)kmalloc_0((unsigned long)len + 24UL,2592U);
    #line 2528 
    if (msg_ind == (struct wcn36xx_hal_ind_msg *)0) {
      #line 2529 
      printk((char *)"\001",(int)msg_header->msg_type);
      #line 2531 
      return -12;
    }
    #line 2534 
    msg_ind->msg_len = (unsigned long)len;
    #line 2535 
    memcpy((void *)(& msg_ind->msg),buf,(unsigned long)len);
    #line 2537 
    cif_spin_lock_hal_ind_lock_of_wcn36xx(& wcn->hal_ind_lock);
    #line 2538 
    list_add_tail(& msg_ind->list,& wcn->hal_ind_queue);
    #line 2539 
    cif_queue_work(wcn->hal_ind_wq,& wcn->hal_ind_work);
    #line 2540 
    cif_spin_unlock_hal_ind_lock_of_wcn36xx(& wcn->hal_ind_lock);
    #line 2541 
    if ((wcn36xx_dbg_mask & 256U) != 0U) 
                                         #line 2541 
                                         printk((char *)"\001");
    #line 2542 
    break;
    #line 2543 
    default: 
             #line 2543 
    ;
    #line 2544 
    printk((char *)"\001",(int)msg_header->msg_type);
  }
  #line 2548 
  return 0;
}

#line 2551  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/wcn36xx/smd.c"
static void wcn36xx_ind_smd_work(struct work_struct *work)
{
  #line 2554 
  void *__mptr;
  #line 2554 
  __mptr = (void *)work;
  #line 2553 
  struct wcn36xx *wcn = ((struct wcn36xx *)(__mptr + 18446744073709550920U));
  #line 2556 
  while (1) {
    #line 2568 
    void *__mptr_0;
    #line 2557 
    struct wcn36xx_hal_msg_header *msg_header;
    #line 2558 
    struct wcn36xx_hal_ind_msg *hal_ind_msg;
    #line 2559 
    unsigned long flags;
    #line 2561 
    cif___ldv_spin_lock_hal_ind_lock_of_wcn36xx(& wcn->hal_ind_lock);
    #line 2563 
    if (list_empty(& wcn->hal_ind_queue) != 0) {
      #line 2564 
      cif_spin_unlock_irqrestore_hal_ind_lock_of_wcn36xx(& wcn->hal_ind_lock,flags);
      #line 2565 
      return;
    }
    #line 2568 
    __mptr_0 = (void *)wcn->hal_ind_queue.next;
    #line 2568 
    hal_ind_msg = ((struct wcn36xx_hal_ind_msg *)__mptr_0);
    #line 2571 
    list_del_0(& hal_ind_msg->list);
    #line 2572 
    cif_spin_unlock_irqrestore_hal_ind_lock_of_wcn36xx(& wcn->hal_ind_lock,flags);
    #line 2574 
    msg_header = (struct wcn36xx_hal_msg_header *)(& hal_ind_msg->msg);
    #line 2576 
    switch ((int)msg_header->msg_type) {
      #line 2577 
      case 129: 
                #line 2577 
      ;
      #line 2578 
      case 188: 
                #line 2578 
      ;
      #line 2579 
      case 233: 
                #line 2579 
      ;
      #line 2580 
      break;
      #line 2581 
      case 130: 
                #line 2581 
      ;
      #line 2582 
      wcn36xx_smd_tx_compl_ind(wcn,(void *)(& hal_ind_msg->msg),hal_ind_msg->msg_len);
      #line 2585 
      break;
      #line 2586 
      case 50: 
               #line 2586 
      ;
      #line 2587 
      wcn36xx_smd_missed_beacon_ind(wcn,(void *)(& hal_ind_msg->msg),hal_ind_msg->msg_len);
      #line 2590 
      break;
      #line 2591 
      case 67: 
               #line 2591 
      ;
      #line 2592 
      wcn36xx_smd_delete_sta_context_ind(wcn,(void *)(& hal_ind_msg->msg),hal_ind_msg->msg_len);
      #line 2595 
      break;
      #line 2596 
      case 259: 
                #line 2596 
      ;
      #line 2597 
      wcn36xx_smd_print_reg_info_ind(wcn,(void *)(& hal_ind_msg->msg),hal_ind_msg->msg_len);
      #line 2600 
      break;
      #line 2601 
      case 210: 
                #line 2601 
      ;
      #line 2602 
      wcn36xx_smd_hw_scan_ind(wcn,(void *)(& hal_ind_msg->msg),hal_ind_msg->msg_len);
      #line 2604 
      break;
      #line 2605 
      default: 
               #line 2605 
      ;
      #line 2606 
      printk((char *)"\001",(int)msg_header->msg_type);
    }
    #line 2610 
    kfree((void *)hal_ind_msg);
  }
}

#line 2613  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/wcn36xx/smd.c"
int wcn36xx_smd_open(struct wcn36xx *wcn)
{
  #line 2615 
  wcn->hal_ind_wq = alloc_workqueue((char *)"%s",262158U,1,(char *)"wcn36xx_smd_ind");
  #line 2616 
  if (wcn->hal_ind_wq == (struct workqueue_struct *)0) 
                                                       #line 2617 
                                                       return -12;
  {
    #line 2619 
    struct lock_class_key __key;
    #line 2619 
    __init_work(& wcn->hal_ind_work,0);
    #line 2619 
    atomic_long_t __constr_expr_41 = {.counter = 137438953408LL};
    #line 2619 
    wcn->hal_ind_work.data = __constr_expr_41;
    #line 2619 
    lockdep_init_map(& wcn->hal_ind_work.lockdep_map,(char *)"(work_completion)",& __key,0);
    #line 2619 
    INIT_LIST_HEAD_0(& wcn->hal_ind_work.entry);
    #line 2619 
    wcn->hal_ind_work.func = & wcn36xx_ind_smd_work;
  }
  #line 2620 
  INIT_LIST_HEAD_0(& wcn->hal_ind_queue);
  #line 2621 
  spinlock_check(& wcn->hal_ind_lock);
  {
    #line 2621 
    struct lock_class_key __key_0;
    #line 2621 
    __raw_spin_lock_init(& wcn->hal_ind_lock.__anonCompField_spinlock_25.rlock,(char *)"&(&wcn->hal_ind_lock)->rlock",& __key_0);
  }
  #line 2623 
  return 0;
}

#line 2626  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/wcn36xx/smd.c"
void wcn36xx_smd_close(struct wcn36xx *wcn)
{
  #line 2633 
  void *__mptr;
  #line 2633 
  void *__mptr_0;
  #line 2628 
  struct wcn36xx_hal_ind_msg *msg;
  #line 2628 
  struct wcn36xx_hal_ind_msg *tmp;
  #line 2630 
  cancel_work_sync(& wcn->hal_ind_work);
  #line 2631 
  destroy_workqueue(wcn->hal_ind_wq);
  #line 2633 
  __mptr = (void *)wcn->hal_ind_queue.next;
  #line 2633 
  msg = ((struct wcn36xx_hal_ind_msg *)__mptr);
  #line 2633 
  __mptr_0 = (void *)msg->list.next;
  #line 2634 
  tmp = ((struct wcn36xx_hal_ind_msg *)__mptr_0);
  #line 2633 
  while (& msg->list != & wcn->hal_ind_queue) {
    #line 2633 
    void *__mptr_1;
    #line 2634 
    kfree((void *)msg);
    #line 2633 
    msg = tmp;
    #line 2633 
    __mptr_1 = (void *)tmp->list.next;
    #line 2633 
    tmp = ((struct wcn36xx_hal_ind_msg *)__mptr_1);
  }
  #line 2635 
  return;
}

#line 98  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/wcn36xx/wcn36xx.ko/concurrency safety/0/concurrency safety/weaver/smd.i.aux"
#line 98 
_Bool emg_queue_work(struct workqueue_struct *arg0, struct work_struct *arg1);
#line 131  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/wcn36xx/wcn36xx.ko/concurrency safety/0/concurrency safety/weaver/smd.i.aux"
static void INIT_LIST_HEAD_0(struct list_head *list)
{
  #line 134 
  ldv_init_list_head(list);
  #line 135 
  return;
}

#line 301  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/wcn36xx/wcn36xx.ko/concurrency safety/0/concurrency safety/weaver/smd.i.aux"
static bool cif_queue_work(struct workqueue_struct *wq, struct work_struct *work)
{
  #line 305 
  return emg_queue_work(wq,work);
}

#line 390  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/wcn36xx/wcn36xx.ko/concurrency safety/0/concurrency safety/weaver/smd.i.aux"
static void *kmalloc_0(size_t size, gfp_t flags)
{
  #line 393 
  return ldv_kmalloc(size,flags);
}

#line 425  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/wcn36xx/wcn36xx.ko/concurrency safety/0/concurrency safety/weaver/smd.i.aux"
static void *kzalloc_1(size_t size, gfp_t flags)
{
  #line 428 
  return ldv_kzalloc(size,flags);
}

#line 655  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/wcn36xx/wcn36xx.ko/concurrency safety/0/concurrency safety/weaver/smd.i.aux"
static void *cif_kmemdup(void *src, size_t len, gfp_t gfp)
{
  #line 658 
  return ldv_kmemdup(src,len,gfp);
}

#line 804  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/wcn36xx/wcn36xx.ko/concurrency safety/0/concurrency safety/weaver/smd.i.aux"
static int cif_request_firmware(struct firmware **fw, char *name, struct device *device)
{
  #line 807 
  return ldv_request_firmware(fw);
}

#line 811  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/wcn36xx/wcn36xx.ko/concurrency safety/0/concurrency safety/weaver/smd.i.aux"
static void cif_mutex_lock_hal_mutex_of_wcn36xx(struct mutex *lock)
{
  #line 814 
  ldv_mutex_model_lock(lock,(char *)"hal_mutex_of_wcn36xx");
  #line 815 
  return;
}

#line 818  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/wcn36xx/wcn36xx.ko/concurrency safety/0/concurrency safety/weaver/smd.i.aux"
static void cif_mutex_unlock_hal_mutex_of_wcn36xx(struct mutex *lock)
{
  #line 821 
  ldv_mutex_model_unlock(lock,(char *)"hal_mutex_of_wcn36xx");
  #line 822 
  return;
}

#line 825  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/wcn36xx/wcn36xx.ko/concurrency safety/0/concurrency safety/weaver/smd.i.aux"
static void cif_mutex_lock_scan_lock_of_wcn36xx_0(struct mutex *lock)
{
  #line 828 
  ldv_mutex_model_lock(lock,(char *)"scan_lock_of_wcn36xx");
  #line 829 
  return;
}

#line 832  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/wcn36xx/wcn36xx.ko/concurrency safety/0/concurrency safety/weaver/smd.i.aux"
static void cif_mutex_unlock_scan_lock_of_wcn36xx_0(struct mutex *lock)
{
  #line 835 
  ldv_mutex_model_unlock(lock,(char *)"scan_lock_of_wcn36xx");
  #line 836 
  return;
}

#line 839  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/wcn36xx/wcn36xx.ko/concurrency safety/0/concurrency safety/weaver/smd.i.aux"
static void cif_spin_lock_hal_ind_lock_of_wcn36xx(spinlock_t *lock)
{
  #line 842 
  ldv_spin_model_lock((char *)"hal_ind_lock_of_wcn36xx");
  #line 844 
  spin_lock_0(lock);
  #line 845 
  return;
}

#line 848  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/wcn36xx/wcn36xx.ko/concurrency safety/0/concurrency safety/weaver/smd.i.aux"
static void cif_spin_unlock_hal_ind_lock_of_wcn36xx(spinlock_t *lock)
{
  #line 851 
  ldv_spin_model_unlock((char *)"hal_ind_lock_of_wcn36xx");
  #line 853 
  spin_unlock_0(lock);
  #line 854 
  return;
}

#line 857  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/wcn36xx/wcn36xx.ko/concurrency safety/0/concurrency safety/weaver/smd.i.aux"
static void cif___ldv_spin_lock_hal_ind_lock_of_wcn36xx(spinlock_t *lock)
{
  #line 860 
  ldv_spin_model_lock((char *)"hal_ind_lock_of_wcn36xx");
  #line 862 
  __ldv_spin_lock(lock);
  #line 863 
  return;
}

#line 866  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/wcn36xx/wcn36xx.ko/concurrency safety/0/concurrency safety/weaver/smd.i.aux"
static void cif_spin_unlock_irqrestore_hal_ind_lock_of_wcn36xx(spinlock_t *lock, unsigned long flags)
{
  #line 869 
  ldv_spin_model_unlock((char *)"hal_ind_lock_of_wcn36xx");
  #line 871 
  spin_unlock_irqrestore_0(lock,flags);
  #line 872 
  return;
}

/* compiler builtin: 
   unsigned long __builtin_object_size(void *, int);   */
#line 385  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernel.h"
#line 385 
int kstrtouint(char *, unsigned int, unsigned int *);
#line 398  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernel.h"
__inline static int kstrtou32(char *s, unsigned int base, u32 *res)
{
  #line 400 
  return kstrtouint(s,base,res);
}

#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/string.h"
#line 95 
char *strsep(char **, char *);
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/err.h"
#line 236  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/wcn36xx/wcn36xx.ko/concurrency safety/0/concurrency safety/weaver/debug.i.aux"
static bool IS_ERR_0(void *ptr);
#line 112  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/thread_info.h"
#line 112 
void __check_object_size(void *, unsigned long, bool);
#line 115  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/thread_info.h"
__inline static void check_object_size(void *ptr, unsigned long n, bool to_user)
{
  #line 118 
  if (0 == 0) 
              #line 119 
              __check_object_size(ptr,n,(_Bool)((bool)((int)to_user) != 0));
  #line 120 
  return;
}

#line 128 
#line 128 
void __bad_copy_from(void);
#line 130 
#line 130 
void __bad_copy_to(void);
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/thread_info.h"
__inline static void copy_overflow(int size, unsigned long count)
{
  #line 134 
  int __ret_warn_on = 1;
  #line 134 
  if ((long)(__ret_warn_on != 0) != 0L) {
    #line 134 
    __warn_printk((char *)"Buffer overflow detected (%d < %lu)!\n",size,count);
    #line 135 
    ldv_inline_asm();
    #line 136 
    ldv_inline_asm();
  }
  #line 134 
  long tmp = (long)(__ret_warn_on != 0);
  #line 136 
  return;
}

#line 138  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/thread_info.h"
__inline static bool check_copy_size(void *addr, size_t bytes, bool is_source)
{
  #line 150 
  int __ret_warn_on;
  #line 140 
  int sz = (int)__builtin_object_size(addr,0);
  #line 141 
  if ((long)(sz >= 0) != 0L && (long)((unsigned long)sz < bytes) != 0L) {
    #line 142 
    if (0 == 0) 
                #line 143 
                copy_overflow(sz,bytes);
    else 
      #line 144 
      if ((int)is_source != 0) 
                               #line 145 
                               __bad_copy_from(); else 
                                                       #line 147 
                                                       __bad_copy_to();
    #line 148 
    return (_Bool)0;
  }
  #line 150 
  __ret_warn_on = bytes > 2147483647UL;
  #line 150 
  if ((long)(__ret_warn_on != 0) != 0L) {
    #line 151 
    ldv_inline_asm();
    #line 152 
    ldv_inline_asm();
  }
  #line 150 
  if ((long)((long)(__ret_warn_on != 0)) != 0L) 
                                                #line 151 
                                                return (_Bool)0;
  #line 152 
  check_object_size(addr,bytes,(_Bool)((bool)((int)is_source) != 0));
  #line 153 
  return (_Bool)1;
}

#line 3300  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
#line 3300 
int simple_open(struct inode *, struct file *);
#line 3337 
#line 3337 
ssize_t simple_read_from_buffer(void *, size_t, loff_t *, void *, size_t);
#line 66  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/debugfs.h"
#line 833  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/wcn36xx/wcn36xx.ko/concurrency safety/0/concurrency safety/weaver/debug.i.aux"
static struct dentry *cif_debugfs_create_file(char *name, umode_t mode, struct dentry *parent, void *data, struct file_operations *fops);
#line 76  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/debugfs.h"
#line 825  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/wcn36xx/wcn36xx.ko/concurrency safety/0/concurrency safety/weaver/debug.i.aux"
static struct dentry *cif_debugfs_create_dir(char *name, struct dentry *parent);
#line 85  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/debugfs.h"
#line 85 
void debugfs_remove_recursive(struct dentry *);
#line 121  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uaccess.h"
#line 121 
unsigned long _copy_from_user(void *, void *, unsigned long);
#line 141  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uaccess.h"
__inline static unsigned long copy_from_user(void *to, void *from, unsigned long n)
{
  #line 143 
  if ((long)((int)check_copy_size(to,n,(_Bool)0) != 0) != 0L) 
                                                              #line 144 
                                                              n = _copy_from_user(to,from,n);
  #line 145 
  return n;
}

#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/wcn36xx/debug.c"
static ssize_t read_file_bool_bmps(struct file *file, char *user_buf, size_t count, loff_t *ppos)
{
  #line 35 
  void *__mptr;
  #line 33 
  char buf[3U];
  #line 30 
  struct wcn36xx *wcn = (struct wcn36xx *)file->private_data;
  #line 31 
  struct wcn36xx_vif *vif_priv = (struct wcn36xx_vif *)0;
  #line 32 
  struct ieee80211_vif *vif = (struct ieee80211_vif *)0;
  #line 35 
  __mptr = (void *)wcn->vif_list.next;
  #line 35 
  vif_priv = ((struct wcn36xx_vif *)__mptr);
  #line 35 
  while (& vif_priv->list != & wcn->vif_list) {
    #line 35 
    void *__mptr_0;
    #line 36 
    vif = wcn36xx_priv_to_vif(vif_priv);
    #line 37 
    if (vif->type == (unsigned int)NL80211_IFTYPE_STATION) {
      #line 38 
      if (vif_priv->pw_state == (unsigned int)WCN36XX_BMPS) 
                                                            #line 39 
                                                            buf[0] = (char)49; else 
                                                                    #line 41 
                                                                    buf[0] = (char)48;
      #line 42 
      break;
    }
    #line 35 
    __mptr_0 = (void *)vif_priv->list.next;
    #line 35 
    vif_priv = ((struct wcn36xx_vif *)__mptr_0);
  }
  #line 45 
  buf[1] = (char)10;
  #line 46 
  buf[2] = (char)0;
  #line 48 
  return simple_read_from_buffer((void *)user_buf,count,ppos,(void *)(& buf),
                                2UL);
}

#line 51  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/wcn36xx/debug.c"
static ssize_t write_file_bool_bmps(struct file *file, char *user_buf, size_t count, loff_t *ppos)
{
  #line 62 
  unsigned long tmp;
  #line 62 
  size_t __UNIQUE_ID___x554;
  #line 59 
  char buf[32U];
  #line 60 
  int buf_size;
  #line 55 
  struct wcn36xx *wcn = (struct wcn36xx *)file->private_data;
  #line 56 
  struct wcn36xx_vif *vif_priv = (struct wcn36xx_vif *)0;
  #line 57 
  struct ieee80211_vif *vif = (struct ieee80211_vif *)0;
  {
    #line 62 
    __UNIQUE_ID___x554 = count;
    #line 62 
    unsigned long __UNIQUE_ID___y555 = 31UL;
    #line 62 
    if (__UNIQUE_ID___x554 < __UNIQUE_ID___y555) 
                                                 #line 62 
                                                 tmp = __UNIQUE_ID___x554; else 
                                                                    #line 62 
                                                                    tmp = __UNIQUE_ID___y555;
    }
  #line 62 
  buf_size = (int)tmp;
  #line 63 
  if (copy_from_user((void *)(& buf),(void *)user_buf,
                       (unsigned long)buf_size) != 0UL) 
    #line 64 
    return -14L;
  #line 66 
  switch ((int)buf[0]) {
    #line 70 
    void *__mptr;
    #line 81 
    void *__mptr_1;
    #line 67 
    case 121: 
              #line 67 
    ;
    #line 68 
    case 89: 
             #line 68 
    ;
    #line 69 
    case 49: 
             #line 69 
    ;
    #line 70 
    __mptr = (void *)wcn->vif_list.next;
    #line 70 
    vif_priv = ((struct wcn36xx_vif *)__mptr);
    #line 70 
    while (& vif_priv->list != & wcn->vif_list) {
      #line 70 
      void *__mptr_0;
      #line 71 
      vif = wcn36xx_priv_to_vif(vif_priv);
      #line 72 
      if (vif->type == (unsigned int)NL80211_IFTYPE_STATION) {
        #line 73 
        wcn36xx_enable_keep_alive_null_packet(wcn,vif);
        #line 74 
        wcn36xx_pmc_enter_bmps_state(wcn,vif);
      }
      #line 70 
      __mptr_0 = (void *)vif_priv->list.next;
      #line 70 
      vif_priv = ((struct wcn36xx_vif *)__mptr_0);
    }
    #line 77 
    break;
    #line 78 
    case 110: 
              #line 78 
    ;
    #line 79 
    case 78: 
             #line 79 
    ;
    #line 80 
    case 48: 
             #line 80 
    ;
    #line 81 
    __mptr_1 = (void *)wcn->vif_list.next;
    #line 81 
    vif_priv = ((struct wcn36xx_vif *)__mptr_1);
    #line 81 
    while (& vif_priv->list != & wcn->vif_list) {
      #line 81 
      void *__mptr_2;
      #line 82 
      vif = wcn36xx_priv_to_vif(vif_priv);
      #line 83 
      if (vif->type == (unsigned int)NL80211_IFTYPE_STATION) 
                                                             #line 84 
                                                             wcn36xx_pmc_exit_bmps_state(wcn,vif);
      #line 81 
      __mptr_2 = (void *)vif_priv->list.next;
      #line 81 
      vif_priv = ((struct wcn36xx_vif *)__mptr_2);
    }
    #line 86 
    break;
  }
  #line 89 
  return (long)count;
}

#line 92  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/wcn36xx/debug.c"
static struct file_operations fops_wcn36xx_bmps = {.read = & read_file_bool_bmps, .write = & write_file_bool_bmps, .open = & simple_open};
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/wcn36xx/debug.c"
static ssize_t write_file_dump(struct file *file, char *user_buf, size_t count, loff_t *ppos)
{
  #line 111 
  size_t __UNIQUE_ID___x556;
  #line 111 
  unsigned long tmp_0;
  #line 103 
  char buf[255U];
  #line 103 
  char *tmp;
  #line 104 
  int buf_size;
  #line 105 
  u32 arg[5U];
  #line 106 
  int i;
  #line 102 
  struct wcn36xx *wcn = (struct wcn36xx *)file->private_data;
  #line 108 
  memset((void *)(& buf),0,255UL);
  #line 109 
  memset((void *)(& arg),0,20UL);
  {
    #line 111 
    __UNIQUE_ID___x556 = count;
    #line 111 
    unsigned long __UNIQUE_ID___y557 = 254UL;
    #line 111 
    if (__UNIQUE_ID___x556 < __UNIQUE_ID___y557) 
                                                 #line 111 
                                                 tmp_0 = __UNIQUE_ID___x556; else 
                                                                    #line 111 
                                                                    tmp_0 = __UNIQUE_ID___y557;
    }
  #line 111 
  buf_size = (int)tmp_0;
  #line 112 
  if (copy_from_user((void *)(& buf),(void *)user_buf,
                       (unsigned long)buf_size) != 0UL) 
    #line 113 
    return -14L;
  #line 115 
  tmp = (char *)(& buf);
  #line 117 
  i = 0;
  #line 117 
  while (i <= 4) {
    {
      #line 118 
      char *begin;
      #line 119 
      begin = strsep(& tmp,(char *)" ");
      #line 120 
      if (begin == (char *)0) 
                              #line 121 
                              break;
      #line 123 
      if (kstrtou32(begin,0U,& arg[i]) != 0) 
                                             #line 124 
                                             break;
    }
    #line 117 
    i ++;
  }
  #line 127 
  printk((char *)"\001",arg[0],arg[1],arg[2],arg[3],arg[4]);
  #line 129 
  wcn36xx_smd_dump_cmd_req(wcn,arg[0],arg[1],arg[2],arg[3],arg[4]);
  #line 131 
  return (long)count;
}

#line 134  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/wcn36xx/debug.c"
static struct file_operations fops_wcn36xx_dump = {.write = & write_file_dump, .open = & simple_open};
#line 153  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/wcn36xx/debug.c"
void wcn36xx_debugfs_init(struct wcn36xx *wcn)
{
  #line 155 
  struct wcn36xx_dfs_entry *dfs = & wcn->dfs;
  #line 157 
  dfs->rootdir = cif_debugfs_create_dir((char *)"wcn36xx",((wcn->hw)->wiphy)->debugfsdir);
  #line 159 
  if ((int)IS_ERR_0((void *)dfs->rootdir) != 0) {
    #line 160 
    printk((char *)"\001");
    #line 161 
    dfs->rootdir = (struct dentry *)0;
  }
  {
    #line 164 
    struct dentry *d;
    #line 164 
    d = cif_debugfs_create_file((char *)"bmps_switcher",(unsigned short)384,dfs->rootdir,(void *)wcn,& fops_wcn36xx_bmps);
    #line 164 
    dfs->file_bmps_switcher.dentry = d;
    #line 164 
    if ((int)IS_ERR_0((void *)d) != 0) {
      #line 164 
      printk((char *)"\001");
      #line 164 
      dfs->file_bmps_switcher.dentry = (struct dentry *)0;
    }
  }
  {
    #line 165 
    struct dentry *d_0;
    #line 165 
    d_0 = cif_debugfs_create_file((char *)"dump",(unsigned short)128,dfs->rootdir,(void *)wcn,& fops_wcn36xx_dump);
    #line 165 
    dfs->file_dump.dentry = d_0;
    #line 165 
    if ((int)IS_ERR_0((void *)d_0) != 0) {
      #line 165 
      printk((char *)"\001");
      #line 165 
      dfs->file_dump.dentry = (struct dentry *)0;
    }
  }
  #line 168 
  return;
}

#line 168  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/wcn36xx/debug.c"
void wcn36xx_debugfs_exit(struct wcn36xx *wcn)
{
  #line 170 
  struct wcn36xx_dfs_entry *dfs = & wcn->dfs;
  #line 171 
  debugfs_remove_recursive(dfs->rootdir);
  #line 172 
  return;
}

#line 93  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/wcn36xx/wcn36xx.ko/concurrency safety/0/concurrency safety/weaver/debug.i.aux"
struct file_operations *emg_alias_fops_wcn36xx_bmps = & fops_wcn36xx_bmps;
#line 94  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/wcn36xx/wcn36xx.ko/concurrency safety/0/concurrency safety/weaver/debug.i.aux"
struct file_operations *emg_alias_fops_wcn36xx_dump = & fops_wcn36xx_dump;
#line 97 
#line 97 
struct dentry *emg_debugfs_create_dir(char *arg0, struct dentry *arg1);
#line 98 
#line 98 
struct dentry *emg_debugfs_create_file(char *arg0, unsigned short arg1, struct dentry *arg2, void *arg3, struct file_operations *arg4);
#line 108  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/wcn36xx/wcn36xx.ko/concurrency safety/0/concurrency safety/weaver/debug.i.aux"
long emg_wrapper_read_file_bool_bmps(struct file *arg0, char *arg1, unsigned long arg2, long long *arg3)
{
  #line 109 
  return read_file_bool_bmps(arg0,arg1,arg2,arg3);
}

#line 113  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/wcn36xx/wcn36xx.ko/concurrency safety/0/concurrency safety/weaver/debug.i.aux"
long emg_wrapper_write_file_bool_bmps(struct file *arg0, char *arg1, unsigned long arg2, long long *arg3)
{
  #line 114 
  return write_file_bool_bmps(arg0,arg1,arg2,arg3);
}

#line 118  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/wcn36xx/wcn36xx.ko/concurrency safety/0/concurrency safety/weaver/debug.i.aux"
long emg_wrapper_write_file_dump(struct file *arg0, char *arg1, unsigned long arg2, long long *arg3)
{
  #line 119 
  return write_file_dump(arg0,arg1,arg2,arg3);
}

#line 236  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/wcn36xx/wcn36xx.ko/concurrency safety/0/concurrency safety/weaver/debug.i.aux"
static bool IS_ERR_0(void *ptr)
{
  #line 239 
  return ldv_is_err(ptr);
}

#line 825  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/wcn36xx/wcn36xx.ko/concurrency safety/0/concurrency safety/weaver/debug.i.aux"
static struct dentry *cif_debugfs_create_dir(char *name, struct dentry *parent)
{
  #line 829 
  return emg_debugfs_create_dir(name,parent);
}

#line 833  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/wcn36xx/wcn36xx.ko/concurrency safety/0/concurrency safety/weaver/debug.i.aux"
static struct dentry *cif_debugfs_create_file(char *name, umode_t mode, struct dentry *parent, void *data, struct file_operations *fops)
{
  #line 837 
  return emg_debugfs_create_file(name,(unsigned short)((int)mode),parent,data,
                              fops);
}

/* compiler builtin: 
   unsigned int __builtin_bswap32(unsigned int);   */
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/string_64.h"
#line 61 
int memcmp(void *, void *, size_t);
#line 336  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static void spin_lock_1(spinlock_t *lock)
{
  #line 338 
  _raw_spin_lock(& lock->__anonCompField_spinlock_25.rlock);
  #line 339 
  return;
}

#line 340 
#line 804  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/wcn36xx/wcn36xx.ko/concurrency safety/0/concurrency safety/weaver/txrx.i.aux"
static void cif_spin_lock_ampdu_lock_of_wcn36xx_sta(spinlock_t *lock);
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static void spin_unlock_1(spinlock_t *lock)
{
  #line 378 
  _raw_spin_unlock(& lock->__anonCompField_spinlock_25.rlock);
  #line 379 
  return;
}

#line 380 
#line 813  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/wcn36xx/wcn36xx.ko/concurrency safety/0/concurrency safety/weaver/txrx.i.aux"
static void cif_spin_unlock_ampdu_lock_of_wcn36xx_sta(spinlock_t *lock);
#line 391  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static void spin_unlock_irqrestore_1(spinlock_t *lock, unsigned long flags)
{
  {
    #line 393 
    unsigned long __dummy;
    #line 393 
    unsigned long __dummy2;
    }
  #line 393 
  _raw_spin_unlock_irqrestore(& lock->__anonCompField_spinlock_25.rlock,flags);
  #line 395 
  return;
}

#line 395 
#line 831  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/wcn36xx/wcn36xx.ko/concurrency safety/0/concurrency safety/weaver/txrx.i.aux"
static void cif_spin_unlock_irqrestore_dxe_lock_of_wcn36xx_0(spinlock_t *lock, unsigned long flags);
#line 35 
#line 822 
static void cif___ldv_spin_lock_dxe_lock_of_wcn36xx_0(spinlock_t *lock);
#line 2189  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
#line 2189 
void *skb_put(struct sk_buff *, unsigned int);
#line 2253 
#line 2253 
void *skb_pull(struct sk_buff *, unsigned int);
#line 4277  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static u16 skb_get_queue_mapping(struct sk_buff *skb)
{
  #line 4279 
  return skb->queue_mapping;
}

#line 116  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/etherdevice.h"
__inline static bool is_multicast_ether_addr(u8 *addr)
{
  #line 119 
  u32 a = *((u32 *)addr);
  #line 126 
  return (_Bool)((a & 1U) != 0U);
}

#line 162  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/etherdevice.h"
__inline static bool is_broadcast_ether_addr(u8 *addr)
{
  #line 166 
  return (_Bool)((unsigned int)(((int)*((u16 *)addr) & (int)*((u16 *)(addr + 2U))) & (int)*((u16 *)(addr + 4U))) == 65535U);
}

#line 284  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ieee80211.h"
__inline static bool ieee80211_has_a4(__le16 fc)
{
  #line 286 
  __le16 tmp = (unsigned short)768U;
  #line 287 
  return (_Bool)(((int)fc & (int)tmp) == (int)tmp);
}

#line 348  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ieee80211.h"
__inline static bool ieee80211_is_mgmt(__le16 fc)
{
  #line 350 
  return (_Bool)(((int)fc & 12) == 0);
}

#line 358  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ieee80211.h"
__inline static bool ieee80211_is_ctl(__le16 fc)
{
  #line 360 
  return (_Bool)(((int)fc & 12) == 4);
}

#line 368  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ieee80211.h"
__inline static bool ieee80211_is_data(__le16 fc)
{
  #line 370 
  return (_Bool)(((int)fc & 12) == 8);
}

#line 378  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ieee80211.h"
__inline static bool ieee80211_is_data_qos(__le16 fc)
{
  #line 384 
  return (_Bool)(((int)fc & 140) == 136);
}

#line 446  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ieee80211.h"
__inline static bool ieee80211_is_probe_req(__le16 fc)
{
  #line 448 
  return (_Bool)(((int)fc & 252) == 64);
}

#line 466  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ieee80211.h"
__inline static bool ieee80211_is_beacon(__le16 fc)
{
  #line 468 
  return (_Bool)(((int)fc & 252) == 128);
}

#line 606  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ieee80211.h"
__inline static bool ieee80211_is_nullfunc(__le16 fc)
{
  #line 608 
  return (_Bool)(((int)fc & 252) == 72);
}

#line 3100  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ieee80211.h"
__inline static u8 *ieee80211_get_qos_ctl(struct ieee80211_hdr *hdr)
{
  #line 3102 
  if ((int)ieee80211_has_a4((unsigned short)((int)hdr->frame_control)) != 0) 
    #line 3103 
    return (u8 *)hdr + 30U; else 
                                 #line 3105 
                                 return (u8 *)hdr + 24U;
}

#line 1119  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/mac80211.h"
__inline static struct ieee80211_rx_status *IEEE80211_SKB_RXCB(struct sk_buff *skb)
{
  #line 1121 
  return (struct ieee80211_rx_status *)(& skb->cb);
}

#line 4379 
#line 4379 
void ieee80211_rx_irqsafe(struct ieee80211_hw *, struct sk_buff *);
#line 5399 
#line 5399 
int ieee80211_start_tx_ba_session(struct ieee80211_sta *, u16, u16);
#line 6084  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/mac80211.h"
__inline static bool conf_is_ht(struct ieee80211_conf *conf)
{
  #line 6087 
  return (_Bool)(((unsigned int)conf->chandef.width + 4294967290U > 1U && conf->chandef.width != (unsigned int)NL80211_CHAN_WIDTH_20_NOHT) != 0);
}

#line 96  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/wcn36xx/wcn36xx.h"
__inline static void buff_to_be(u32 *buf, size_t len)
{
  #line 98 
  int i;
  #line 99 
  i = 0;
  #line 99 
  while ((unsigned long)i < len) {
    #line 100 
    *(buf + (unsigned long)i) = __builtin_bswap32(*(buf + (unsigned long)i));
    #line 99 
    i ++;
  }
  #line 101 
  return;
}

#line 273  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/wcn36xx/wcn36xx.h"
__inline static struct ieee80211_sta *wcn36xx_priv_to_sta(struct wcn36xx_sta *sta_priv)
{
  #line 275 
  void *__mptr;
  #line 275 
  __mptr = (void *)sta_priv;
  #line 275 
  return ((struct ieee80211_sta *)(__mptr + 18446744073709551280U));
}

#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/wcn36xx/txrx.c"
__inline static int get_rssi0(struct wcn36xx_rx_bd *bd)
{
  #line 23 
  return (int)(100U - (bd->phy_stat0 >> 24));
}

#line 26  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/wcn36xx/txrx.c"
int wcn36xx_rx_skb(struct wcn36xx *wcn, struct sk_buff *skb)
{
  #line 28 
  struct ieee80211_rx_status status;
  #line 29 
  struct ieee80211_hdr *hdr;
  #line 30 
  struct wcn36xx_rx_bd *bd;
  #line 31 
  u16 fc;
  #line 31 
  u16 sn;
  #line 37 
  memset((void *)(& status),0,48UL);
  #line 39 
  bd = (struct wcn36xx_rx_bd *)skb->data;
  #line 40 
  buff_to_be((u32 *)bd,19UL);
  #line 41 
  if ((wcn36xx_dbg_mask & 32U) != 0U) 
                                      #line 41 
                                      print_hex_dump((char *)"\001",(char *)"wcn36xx",2,32,1,(void *)bd,76UL,(_Bool)0);
  #line 45 
  skb_put(skb,(unsigned int)((int)bd->pdu.mpdu_header_off + (int)bd->pdu.mpdu_len));
  #line 46 
  skb_pull(skb,(unsigned int)bd->pdu.mpdu_header_off);
  #line 48 
  hdr = (struct ieee80211_hdr *)skb->data;
  #line 49 
  fc = hdr->frame_control;
  #line 50 
  sn = (unsigned short)((int)hdr->seq_ctrl >> 4);
  #line 53 
  if ((int)ieee80211_is_beacon((unsigned short)((int)hdr->frame_control)) != 0) {
    #line 53 
    if (wcn->scan_freq != 0) {
      #line 54 
      status.freq = (unsigned short)wcn->scan_freq;
      #line 55 
      status.band = (unsigned char)wcn->scan_band;
    }
    else 
         #line 53 
         goto _LAND;
  }
  else {
    #line 53 
    _LAND: {
             #line 57 
             status.freq = (unsigned short)((wcn->hw)->conf.chandef.chan)->center_freq;
             #line 58 
             status.band = (unsigned char)((wcn->hw)->conf.chandef.chan)->band;
           }
  }
  #line 61 
  status.mactime = 10ULL;
  #line 62 
  status.signal = (signed char)(- get_rssi0(bd));
  #line 63 
  status.antenna = (unsigned char)1U;
  #line 64 
  status.rate_idx = (unsigned char)1U;
  #line 65 
  status.flag = 0U;
  #line 66 
  status.rx_flags = (unsigned char)0U;
  #line 67 
  status.flag |= 26U;
  #line 71 
  if ((wcn36xx_dbg_mask & 16U) != 0U) 
                                      #line 71 
                                      printk((char *)"\001",status.flag);
  #line 73 
  memcpy((void *)IEEE80211_SKB_RXCB(skb),(void *)(& status),48UL);
  #line 75 
  if ((int)ieee80211_is_beacon((unsigned short)((int)hdr->frame_control)) != 0) {
    #line 76 
    if ((wcn36xx_dbg_mask & 2048U) != 0U) 
                                          #line 76 
                                          printk((char *)"\001",skb,skb->len,(int)fc,(int)sn);
    #line 78 
    if ((wcn36xx_dbg_mask & 4096U) != 0U) 
                                          #line 78 
                                          print_hex_dump((char *)"\001",(char *)"wcn36xx",2,32,1,(void *)skb->data,(unsigned long)skb->len,(_Bool)0);
  }
  else {
    #line 81 
    if ((wcn36xx_dbg_mask & 16U) != 0U) 
                                        #line 81 
                                        printk((char *)"\001",skb,skb->len,(int)fc,(int)sn);
    #line 83 
    if ((wcn36xx_dbg_mask & 32U) != 0U) 
                                        #line 83 
                                        print_hex_dump((char *)"\001",(char *)"wcn36xx",2,32,1,(void *)skb->data,(unsigned long)skb->len,(_Bool)0);
  }
  #line 87 
  ieee80211_rx_irqsafe(wcn->hw,skb);
  #line 89 
  return 0;
}

#line 92  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/wcn36xx/txrx.c"
static void wcn36xx_set_tx_pdu(struct wcn36xx_tx_bd *bd, u32 mpdu_header_len, u32 len, u16 tid)
{
  #line 97 
  bd->pdu.mpdu_header_len = (unsigned int)((unsigned char)mpdu_header_len);
  #line 98 
  bd->pdu.mpdu_header_off = (unsigned int)40U;
  #line 99 
  bd->pdu.mpdu_data_off = (unsigned int)((int)((unsigned short)bd->pdu.mpdu_header_len) + (int)((unsigned short)bd->pdu.mpdu_header_off));
  #line 101 
  bd->pdu.mpdu_len = (unsigned int)((unsigned short)len);
  #line 102 
  bd->pdu.tid = (unsigned int)tid;
  #line 103 
  bd->pdu.bd_ssn = (unsigned int)2U;
  #line 104 
  return;
}

#line 106  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/wcn36xx/txrx.c"
__inline static struct wcn36xx_vif *get_vif_by_addr(struct wcn36xx *wcn, u8 *addr)
{
  #line 111 
  void *__mptr;
  #line 109 
  struct wcn36xx_vif *vif_priv = (struct wcn36xx_vif *)0;
  #line 110 
  struct ieee80211_vif *vif = (struct ieee80211_vif *)0;
  #line 111 
  __mptr = (void *)wcn->vif_list.next;
  #line 111 
  vif_priv = ((struct wcn36xx_vif *)__mptr);
  #line 111 
  while (& vif_priv->list != & wcn->vif_list) {
    #line 111 
    void *__mptr_0;
    {
      #line 112 
      vif = wcn36xx_priv_to_vif(vif_priv);
      #line 113 
      if (memcmp((void *)(& vif->addr),(void *)addr,6UL) == 0) 
                                                               #line 114 
                                                               return vif_priv;
    }
    #line 111 
    __mptr_0 = (void *)vif_priv->list.next;
    #line 111 
    vif_priv = ((struct wcn36xx_vif *)__mptr_0);
  }
  #line 116 
  printk((char *)"\001",addr);
  #line 117 
  return (struct wcn36xx_vif *)0;
}

#line 120  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/wcn36xx/txrx.c"
static void wcn36xx_tx_start_ampdu(struct wcn36xx *wcn, struct wcn36xx_sta *sta_priv, struct sk_buff *skb)
{
  #line 133 
  int __ret_warn_on;
  #line 125 
  struct ieee80211_sta *sta;
  #line 126 
  u8 *qc;
  #line 126 
  u8 tid;
  #line 146 
  int tmp_4;
  #line 124 
  struct ieee80211_hdr *hdr = (struct ieee80211_hdr *)skb->data;
  #line 128 
  if (! conf_is_ht(& (wcn->hw)->conf)) 
                                       #line 129 
                                       return;
  #line 131 
  sta = wcn36xx_priv_to_sta(sta_priv);
  {
    #line 133 
    int tmp_1;
    #line 133 
    if (ieee80211_is_data_qos((unsigned short)((int)hdr->frame_control))) 
      #line 133 
      tmp_1 = 0; else 
                      #line 133 
                      tmp_1 = 1;
    #line 133 
    __ret_warn_on = tmp_1;
    #line 133 
    if ((long)(__ret_warn_on != 0) != 0L) {
      #line 134 
      ldv_inline_asm();
      #line 135 
      ldv_inline_asm();
    }
    }
  #line 133 
  if ((long)((long)(__ret_warn_on != 0)) != 0L) 
                                                #line 134 
                                                return;
  #line 136 
  if ((unsigned int)skb_get_queue_mapping(skb) == 0U) 
                                                      #line 137 
                                                      return;
  #line 139 
  qc = ieee80211_get_qos_ctl(hdr);
  #line 140 
  tid = (unsigned char)((unsigned int)*qc & 15U);
  #line 142 
  cif_spin_lock_ampdu_lock_of_wcn36xx_sta(& sta_priv->ampdu_lock);
  #line 143 
  if (sta_priv->ampdu_state[(int)tid] != (unsigned int)WCN36XX_AMPDU_NONE) 
    #line 144 
    goto out_unlock;
  #line 146 
  tmp_4 = sta_priv->non_agg_frame_ct;
  #line 146 
  (sta_priv->non_agg_frame_ct) ++;
  #line 146 
  ;
  #line 146 
  if (tmp_4 > 19) {
    #line 147 
    sta_priv->ampdu_state[(int)tid] = WCN36XX_AMPDU_START;
    #line 148 
    sta_priv->non_agg_frame_ct = 0;
    #line 149 
    ieee80211_start_tx_ba_session(sta,(unsigned short)((int)tid),(unsigned short)0);
  }
  #line 151 
  out_unlock: 
              #line 151 
  ;
  #line 152 
  cif_spin_unlock_ampdu_lock_of_wcn36xx_sta(& sta_priv->ampdu_lock);
  #line 153 
  return;
}

#line 155  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/wcn36xx/txrx.c"
static void wcn36xx_set_tx_data(struct wcn36xx_tx_bd *bd, struct wcn36xx *wcn, struct wcn36xx_vif **vif_priv, struct wcn36xx_sta *sta_priv, struct sk_buff *skb, bool bcast)
{
  #line 165 
  bool is_data_qos;
  #line 210 
  int tmp_0;
  #line 206 
  unsigned int tmp_1;
  #line 162 
  struct ieee80211_hdr *hdr = (struct ieee80211_hdr *)skb->data;
  #line 163 
  struct ieee80211_vif *vif = (struct ieee80211_vif *)0;
  #line 164 
  struct wcn36xx_vif *__vif_priv = (struct wcn36xx_vif *)0;
  #line 167 
  bd->bd_rate = (unsigned int)0U;
  #line 173 
  if (sta_priv != (struct wcn36xx_sta *)0) {
    #line 174 
    __vif_priv = sta_priv->vif;
    #line 175 
    vif = wcn36xx_priv_to_vif(__vif_priv);
    #line 177 
    bd->dpu_sign = (unsigned int)sta_priv->ucast_dpu_sign;
    #line 178 
    if (vif->type == (unsigned int)NL80211_IFTYPE_STATION) {
      #line 179 
      bd->sta_index = (unsigned int)sta_priv->bss_sta_index;
      #line 180 
      bd->dpu_desc_idx = (unsigned int)sta_priv->bss_dpu_desc_index;
    }
    else 
      #line 181 
      if ((vif->type == (unsigned int)NL80211_IFTYPE_AP || vif->type == (unsigned int)NL80211_IFTYPE_ADHOC) || vif->type == (unsigned int)NL80211_IFTYPE_MESH_POINT) {
        #line 184 
        bd->sta_index = (unsigned int)sta_priv->sta_index;
        #line 185 
        bd->dpu_desc_idx = (unsigned int)sta_priv->dpu_desc_index;
      }
  }
  else {
    #line 188 
    __vif_priv = get_vif_by_addr(wcn,(u8 *)(& hdr->addr2));
    #line 189 
    bd->sta_index = (unsigned int)__vif_priv->self_sta_index;
    #line 190 
    bd->dpu_desc_idx = (unsigned int)__vif_priv->self_dpu_desc_index;
    #line 191 
    bd->dpu_sign = (unsigned int)__vif_priv->self_ucast_dpu_sign;
  }
  #line 194 
  if ((int)ieee80211_is_nullfunc((unsigned short)((int)hdr->frame_control)) != 0) 
    #line 196 
    bd->dpu_ne = (unsigned int)1U;
  else 
    #line 194 
    if (sta_priv != (struct wcn36xx_sta *)0 && ! sta_priv->is_data_encrypted) 
      #line 196 
      bd->dpu_ne = (unsigned int)1U;
  #line 198 
  if ((int)bcast != 0) {
    #line 199 
    bd->ub = (unsigned int)1U;
    #line 200 
    bd->ack_policy = (unsigned int)1U;
  }
  #line 202 
  *vif_priv = __vif_priv;
  #line 204 
  is_data_qos = ieee80211_is_data_qos((unsigned short)((int)hdr->frame_control));
  #line 210 
  if (sta_priv != (struct wcn36xx_sta *)0) 
                                           #line 210 
                                           tmp_0 = (int)sta_priv->tid; else 
                                                                    #line 210 
                                                                    tmp_0 = 0;
  #line 206 
  ;
  #line 206 
  if ((int)is_data_qos != 0) 
                             #line 206 
                             tmp_1 = 26U; else 
                                               #line 206 
                                               tmp_1 = 24U;
  #line 206 
  ;
  #line 206 
  wcn36xx_set_tx_pdu(bd,tmp_1,skb->len,(unsigned short)tmp_0);
  #line 212 
  if (sta_priv != (struct wcn36xx_sta *)0 && (int)is_data_qos != 0) 
                                                                    #line 213 
                                                                    wcn36xx_tx_start_ampdu(wcn,sta_priv,skb);
  #line 214 
  return;
}

#line 216  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/wcn36xx/txrx.c"
static void wcn36xx_set_tx_mgmt(struct wcn36xx_tx_bd *bd, struct wcn36xx *wcn, struct wcn36xx_vif **vif_priv, struct sk_buff *skb, bool bcast)
{
  #line 257 
  unsigned int tmp_4;
  #line 222 
  struct ieee80211_hdr *hdr = (struct ieee80211_hdr *)skb->data;
  #line 223 
  struct wcn36xx_vif *__vif_priv = get_vif_by_addr(wcn,(u8 *)(& hdr->addr2));
  #line 225 
  bd->sta_index = (unsigned int)__vif_priv->self_sta_index;
  #line 226 
  bd->dpu_desc_idx = (unsigned int)__vif_priv->self_dpu_desc_index;
  #line 227 
  bd->dpu_ne = (unsigned int)1U;
  #line 230 
  if ((int)ieee80211_is_mgmt((unsigned short)((int)hdr->frame_control)) != 0) 
    #line 231 
    if (((wcn->hw)->conf.chandef.chan)->band == (unsigned int)NL80211_BAND_5GHZ) 
      #line 231 
      bd->bd_rate = (unsigned int)3U; else 
                                           #line 231 
                                           bd->bd_rate = (unsigned int)2U;
  else {
    #line 234 
    if ((int)ieee80211_is_ctl((unsigned short)((int)hdr->frame_control)) != 0) 
      #line 235 
      bd->bd_rate = (unsigned int)3U; else 
                                           #line 237 
                                           printk((char *)"\001");
  }
  #line 243 
  if ((int)__vif_priv->is_joining != 0) {
    #line 243 
    if ((int)ieee80211_is_probe_req((unsigned short)((int)hdr->frame_control)) != 0) 
      #line 245 
      bcast = (_Bool)0;
  }
  #line 247 
  if ((int)bcast != 0) {
    #line 249 
    bd->ub = (unsigned int)1U;
    #line 251 
    bd->ack_policy = (unsigned int)1U;
    #line 252 
    bd->queue_id = (unsigned int)10U;
  }
  else 
       #line 254 
       bd->queue_id = (unsigned int)9U;
  #line 255 
  *vif_priv = __vif_priv;
  #line 257 
  ;
  #line 257 
  if ((int)ieee80211_is_data_qos((unsigned short)((int)hdr->frame_control)) != 0) 
    #line 257 
    tmp_4 = 26U; else 
                      #line 257 
                      tmp_4 = 24U;
  #line 257 
  ;
  #line 257 
  wcn36xx_set_tx_pdu(bd,tmp_4,skb->len,(unsigned short)7);
  #line 262 
  return;
}

#line 264  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/wcn36xx/txrx.c"
int wcn36xx_start_tx(struct wcn36xx *wcn, struct wcn36xx_sta *sta_priv, struct sk_buff *skb)
{
  #line 271 
  unsigned long flags;
  #line 273 
  int tmp_3;
  #line 275 
  struct wcn36xx_tx_bd bd;
  #line 276 
  int ret;
  #line 268 
  struct ieee80211_hdr *hdr = (struct ieee80211_hdr *)skb->data;
  #line 269 
  struct wcn36xx_vif *vif_priv = (struct wcn36xx_vif *)0;
  #line 270 
  struct ieee80211_tx_info *info = IEEE80211_SKB_CB(skb);
  #line 272 
  bool is_low = ieee80211_is_data((unsigned short)((int)hdr->frame_control));
  #line 273 
  if ((int)is_broadcast_ether_addr((u8 *)(& hdr->addr1)) != 0) 
                                                               #line 273 
                                                               tmp_3 = 1;
  else {
    #line 273 
    if ((int)is_multicast_ether_addr((u8 *)(& hdr->addr1)) != 0) 
                                                                 #line 273 
                                                                 tmp_3 = 1; else 
                                                                    #line 273 
                                                                    tmp_3 = 0;
  }
  #line 273 
  bool bcast = (_Bool)(tmp_3 != 0);
  #line 278 
  memset((void *)(& bd),0,40UL);
  #line 280 
  if ((wcn36xx_dbg_mask & 64U) != 0U) {
    #line 280 
    char *tmp_4;
    #line 280 
    char *tmp_5;
    #line 280 
    if ((int)bcast != 0) 
                         #line 280 
                         tmp_4 = (char *)"bcast"; else 
                                                       #line 280 
                                                       tmp_4 = (char *)"ucast";
    #line 280 
    if ((int)is_low != 0) 
                          #line 280 
                          tmp_5 = (char *)"low"; else 
                                                      #line 280 
                                                      tmp_5 = (char *)"high";
    #line 280 
    ;
    #line 280 
    ;
    #line 280 
    ;
    #line 280 
    ;
    #line 280 
    printk((char *)"\001",skb,skb->len,(int)hdr->frame_control,(int)hdr->seq_ctrl >> 4,tmp_5,tmp_4);
  }
  #line 286 
  if ((wcn36xx_dbg_mask & 128U) != 0U) 
                                       #line 286 
                                       print_hex_dump((char *)"\001",(char *)"wcn36xx",2,32,1,(void *)skb->data,(unsigned long)skb->len,(_Bool)0);
  #line 288 
  bd.dpu_rf = (unsigned int)25U;
  #line 290 
  bd.tx_comp = (unsigned int)((info->flags & 1U) != 0U);
  #line 291 
  if ((unsigned int)bd.tx_comp != 0U) {
    #line 292 
    if ((wcn36xx_dbg_mask & 1U) != 0U) 
                                       #line 292 
                                       printk((char *)"\001");
    #line 293 
    cif___ldv_spin_lock_dxe_lock_of_wcn36xx_0(& wcn->dxe_lock);
    #line 294 
    if (wcn->tx_ack_skb != (struct sk_buff *)0) {
      #line 295 
      cif_spin_unlock_irqrestore_dxe_lock_of_wcn36xx_0(& wcn->dxe_lock,flags);
      #line 296 
      printk((char *)"\001");
      #line 297 
      return -22;
    }
    #line 300 
    wcn->tx_ack_skb = skb;
    #line 301 
    cif_spin_unlock_irqrestore_dxe_lock_of_wcn36xx_0(& wcn->dxe_lock,flags);
    #line 308 
    ieee80211_stop_queues(wcn->hw);
  }
  #line 312 
  if ((int)is_low != 0) 
                        #line 313 
                        wcn36xx_set_tx_data(& bd,wcn,& vif_priv,sta_priv,skb,(_Bool)((bool)((int)bcast) != 0)); else 
                                                                    #line 316 
                                                                    wcn36xx_set_tx_mgmt(& bd,wcn,& vif_priv,skb,(_Bool)((bool)((int)bcast) != 0));
  #line 318 
  buff_to_be((u32 *)(& bd),10UL);
  #line 319 
  bd.tx_bd_sign = 3183328701U;
  #line 321 
  ret = wcn36xx_dxe_tx_frame(wcn,vif_priv,& bd,skb,(_Bool)((bool)((int)is_low) != 0));
  #line 322 
  if (ret != 0 && (unsigned int)bd.tx_comp != 0U) {
    #line 326 
    cif___ldv_spin_lock_dxe_lock_of_wcn36xx_0(& wcn->dxe_lock);
    #line 327 
    wcn->tx_ack_skb = (struct sk_buff *)0;
    #line 328 
    cif_spin_unlock_irqrestore_dxe_lock_of_wcn36xx_0(& wcn->dxe_lock,flags);
    #line 330 
    ieee80211_wake_queues(wcn->hw);
  }
  #line 333 
  return ret;
}

#line 804  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/wcn36xx/wcn36xx.ko/concurrency safety/0/concurrency safety/weaver/txrx.i.aux"
static void cif_spin_lock_ampdu_lock_of_wcn36xx_sta(spinlock_t *lock)
{
  #line 807 
  ldv_spin_model_lock((char *)"ampdu_lock_of_wcn36xx_sta");
  #line 809 
  spin_lock_1(lock);
  #line 810 
  return;
}

#line 813  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/wcn36xx/wcn36xx.ko/concurrency safety/0/concurrency safety/weaver/txrx.i.aux"
static void cif_spin_unlock_ampdu_lock_of_wcn36xx_sta(spinlock_t *lock)
{
  #line 816 
  ldv_spin_model_unlock((char *)"ampdu_lock_of_wcn36xx_sta");
  #line 818 
  spin_unlock_1(lock);
  #line 819 
  return;
}

#line 822  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/wcn36xx/wcn36xx.ko/concurrency safety/0/concurrency safety/weaver/txrx.i.aux"
static void cif___ldv_spin_lock_dxe_lock_of_wcn36xx_0(spinlock_t *lock)
{
  #line 825 
  ldv_spin_model_lock((char *)"dxe_lock_of_wcn36xx");
  #line 827 
  __ldv_spin_lock(lock);
  #line 828 
  return;
}

#line 831  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/wcn36xx/wcn36xx.ko/concurrency safety/0/concurrency safety/weaver/txrx.i.aux"
static void cif_spin_unlock_irqrestore_dxe_lock_of_wcn36xx_0(spinlock_t *lock, unsigned long flags)
{
  #line 834 
  ldv_spin_model_unlock((char *)"dxe_lock_of_wcn36xx");
  #line 836 
  spin_unlock_irqrestore_1(lock,flags);
  #line 837 
  return;
}

#line 437  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netlink.h"
#line 437 
int __nla_parse(struct nlattr **, int, struct nlattr *, int, struct nla_policy *, unsigned int, struct netlink_ext_ack *);
#line 460 
#line 460 
int nla_put(struct sk_buff *, int, int, void *);
#line 608  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netlink.h"
__inline static int nla_parse_deprecated(struct nlattr **tb, int maxtype, struct nlattr *head, int len, struct nla_policy *policy, struct netlink_ext_ack *extack)
{
  #line 613 
  return __nla_parse(tb,maxtype,head,len,policy,0U,extack);
}

#line 1036  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netlink.h"
__inline static int nla_attr_size(int payload)
{
  #line 1038 
  return payload + 4;
}

#line 1045  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netlink.h"
__inline static int nla_total_size(int payload)
{
  #line 1047 
  return (nla_attr_size(payload) + 3) & -4;
}

#line 1072  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netlink.h"
__inline static void *nla_data(struct nlattr *nla)
{
  #line 1074 
  return (void *)((char *)nla + 4U);
}

#line 1081  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netlink.h"
__inline static int nla_len(struct nlattr *nla)
{
  #line 1083 
  return (int)nla->nla_len + -4;
}

#line 1499  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netlink.h"
__inline static u16 nla_get_u16(struct nlattr *nla)
{
  #line 1501 
  return *((u16 *)nla_data(nla));
}

#line 6116  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
#line 6116 
struct sk_buff *__cfg80211_alloc_reply_skb(struct wiphy *, enum nl80211_commands, enum nl80211_attrs, int);
#line 6173 
#line 6173 
int cfg80211_vendor_cmd_reply(struct sk_buff *);
#line 6298  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
__inline static struct sk_buff *cfg80211_testmode_alloc_reply_skb(struct wiphy *wiphy, int approxlen)
{
  #line 6300 
  return __cfg80211_alloc_reply_skb(wiphy,
                                 (enum nl80211_commands)NL80211_CMD_TESTMODE,
                                 (enum nl80211_attrs)NL80211_ATTR_TESTDATA,
                                 approxlen);
}

#line 6316  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
__inline static int cfg80211_testmode_reply(struct sk_buff *skb)
{
  #line 6318 
  return cfg80211_vendor_cmd_reply(skb);
}

#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/wcn36xx/testmode.c"
static struct nla_policy wcn36xx_tm_policy[3U] = {[1] = {.type = (unsigned char)2U}, {.type = (unsigned char)11U, .len = (unsigned short)5000U}};
#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/wcn36xx/testmode.c"
static int wcn36xx_tm_cmd_ptt(struct wcn36xx *wcn, struct ieee80211_vif *vif, struct nlattr **tb)
{
  #line 46 
  int buf_len;
  #line 47 
  void *buf;
  #line 48 
  struct ftm_rsp_msg *msg;
  #line 49 
  struct sk_buff *skb;
  #line 46 
  int ret = 0;
  #line 48 
  struct ftm_rsp_msg *rsp = (struct ftm_rsp_msg *)0;
  #line 51 
  if (*(tb + 2U) == (struct nlattr *)0) 
                                        #line 52 
                                        return -22;
  #line 54 
  buf = nla_data(*(tb + 2U));
  #line 55 
  buf_len = nla_len(*(tb + 2U));
  #line 56 
  msg = (struct ftm_rsp_msg *)buf;
  #line 58 
  if ((wcn36xx_dbg_mask & 32768U) != 0U) 
                                         #line 58 
                                         printk((char *)"\001",(int)msg->msg_id,(int)msg->msg_body_length,buf,buf_len);
  #line 63 
  if ((wcn36xx_dbg_mask & 65536U) != 0U) 
                                         #line 63 
                                         print_hex_dump((char *)"\001",(char *)"REQ ",2,32,1,buf,(unsigned long)buf_len,(_Bool)0);
  #line 65 
  if ((unsigned int)msg->msg_id == 12962U) {
    #line 66 
    struct build_release_number *body = (struct build_release_number *)(& msg->msg_response);
    #line 70 
    body->drv_major = (unsigned short)wcn->fw_major;
    #line 71 
    body->drv_minor = (unsigned short)wcn->fw_minor;
    #line 72 
    body->drv_patch = (unsigned short)wcn->fw_version;
    #line 73 
    body->drv_build = (unsigned short)wcn->fw_revision;
    #line 74 
    body->ptt_max = (unsigned short)10U;
    #line 75 
    body->ptt_min = (unsigned short)0U;
    #line 77 
    rsp = msg;
    #line 78 
    rsp->resp_status = 0U;
  }
  else {
    #line 80 
    if ((wcn36xx_dbg_mask & 32768U) != 0U) 
                                           #line 80 
                                           printk((char *)"\001",(int)msg->msg_body_length);
    #line 84 
    msg->resp_status = (unsigned int)wcn36xx_smd_process_ptt_msg(wcn,vif,(void *)msg,
                                  (unsigned long)msg->msg_body_length,
                                  (void **)(& rsp));
    #line 87 
    if ((wcn36xx_dbg_mask & 32768U) != 0U) 
                                           #line 87 
                                           printk((char *)"\001",msg->resp_status);
    #line 90 
    if (rsp != (struct ftm_rsp_msg *)0) 
      #line 91 
      if ((wcn36xx_dbg_mask & 32768U) != 0U) 
                                             #line 91 
                                             printk((char *)"\001",(int)rsp->msg_body_length);
  }
  #line 96 
  if (rsp == (struct ftm_rsp_msg *)0) {
    #line 97 
    rsp = msg;
    #line 98 
    printk((char *)"\001",rsp->resp_status);
  }
  #line 101 
  if ((wcn36xx_dbg_mask & 65536U) != 0U) 
                                         #line 101 
                                         print_hex_dump((char *)"\001",(char *)"RSP ",2,32,1,(void *)rsp,(unsigned long)rsp->msg_body_length,(_Bool)0);
  #line 104 
  ;
  #line 104 
  skb = cfg80211_testmode_alloc_reply_skb((wcn->hw)->wiphy,nla_total_size((int)msg->msg_body_length));
  #line 106 
  if (skb == (struct sk_buff *)0) {
    #line 107 
    ret = -12;
    #line 108 
    goto out;
  }
  #line 111 
  ret = nla_put(skb,2,(int)rsp->msg_body_length,(void *)rsp);
  #line 112 
  if (ret != 0) {
    #line 113 
    kfree_skb(skb);
    #line 114 
    goto out;
  }
  #line 117 
  ret = cfg80211_testmode_reply(skb);
  #line 119 
  out: 
       #line 119 
  ;
  #line 120 
  if (rsp != msg) 
                  #line 121 
                  kfree((void *)rsp);
  #line 123 
  return ret;
}

#line 126  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/wcn36xx/testmode.c"
int wcn36xx_tm_cmd(struct ieee80211_hw *hw, struct ieee80211_vif *vif, void *data, int len)
{
  #line 130 
  struct nlattr *tb[3U];
  #line 132 
  unsigned short attr;
  #line 129 
  struct wcn36xx *wcn = (struct wcn36xx *)hw->priv;
  #line 131 
  int ret = 0;
  #line 134 
  if ((wcn36xx_dbg_mask & 65536U) != 0U) 
                                         #line 134 
                                         print_hex_dump((char *)"\001",(char *)"Data:",2,32,1,data,(unsigned long)len,(_Bool)0);
  #line 135 
  ret = nla_parse_deprecated((struct nlattr **)(& tb),2,(struct nlattr *)data,len,(struct nla_policy *)(& wcn36xx_tm_policy),(struct netlink_ext_ack *)0);
  #line 137 
  if (ret != 0) 
                #line 138 
                return ret;
  #line 140 
  if (tb[1] == (struct nlattr *)0) 
                                   #line 141 
                                   return -22;
  #line 143 
  attr = nla_get_u16(tb[1]);
  #line 145 
  if ((unsigned int)attr != 3U) 
                                #line 146 
                                return -95;
  #line 148 
  return wcn36xx_tm_cmd_ptt(wcn,vif,(struct nlattr **)(& tb));
}

#line 20  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/common/inline_asm.c"
void ldv_inline_asm(void)
{
  #line 24 
  return;
}

#line 20  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
void ldv_atomic_add(int i, atomic_t *v)
{
  #line 22 
  v->counter += i;
  #line 23 
  return;
}

#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
void ldv_atomic_sub(int i, atomic_t *v)
{
  #line 27 
  v->counter -= i;
  #line 28 
  return;
}

#line 30  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
int ldv_atomic_sub_and_test(int i, atomic_t *v)
{
  #line 32 
  v->counter -= i;
  #line 33 
  if (v->counter != 0) 
                       #line 34 
                       return 0;
  #line 36 
  return 1;
}

#line 39  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
void ldv_atomic_inc(atomic_t *v)
{
  #line 41 
  (v->counter) ++;
  #line 42 
  return;
}

#line 44  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
void ldv_atomic_dec(atomic_t *v)
{
  #line 46 
  (v->counter) --;
  #line 47 
  return;
}

#line 49  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
int ldv_atomic_dec_and_test(atomic_t *v)
{
  #line 51 
  (v->counter) --;
  #line 52 
  if (v->counter != 0) 
                       #line 53 
                       return 0;
  #line 55 
  return 1;
}

#line 58  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
int ldv_atomic_inc_and_test(atomic_t *v)
{
  #line 60 
  (v->counter) ++;
  #line 61 
  if (v->counter != 0) 
                       #line 62 
                       return 0;
  #line 64 
  return 1;
}

#line 67  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
int ldv_atomic_add_return(int i, atomic_t *v)
{
  #line 69 
  v->counter += i;
  #line 70 
  return v->counter;
}

#line 73  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
int ldv_atomic_add_negative(int i, atomic_t *v)
{
  #line 75 
  v->counter += i;
  #line 76 
  return v->counter < 0;
}

#line 79  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
int ldv_atomic_inc_short(short *v)
{
  #line 81 
  *v = (short)((unsigned int)*v + 1U);
  #line 82 
  return (int)*v;
}

#line 20  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/current.c"
static struct task_struct ldv_current;
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/current.c"
struct task_struct *ldv_get_current(void)
{
  #line 28 
  ldv_current.pid = 1;
  #line 29 
  return & ldv_current;
}

#line 32  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 28  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
void ldv_switch_to_interrupt_context(void);
#line 42  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 34  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
void ldv_switch_to_process_context(void);
#line 50  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 40  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
bool ldv_in_interrupt_context(void);
#line 112  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 55  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
int ldv_post_init(int init_ret_val);
#line 132  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 61  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
int ldv_post_probe(int probe_ret_val);
#line 133  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 133 
void ldv_check_return_value_probe(int);
#line 141 
#line 68  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
int ldv_filter_err_code(int ret_val);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/common.h"
#line 23 
void __VERIFIER_assume(int);
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
static bool __ldv_in_interrupt_context = (_Bool)0;
#line 28  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
void ldv_switch_to_interrupt_context(void)
{
  #line 31 
  __ldv_in_interrupt_context = (_Bool)1;
  #line 32 
  return;
}

#line 34  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
void ldv_switch_to_process_context(void)
{
  #line 37 
  __ldv_in_interrupt_context = (_Bool)0;
  #line 38 
  return;
}

#line 40  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
bool ldv_in_interrupt_context(void)
{
  #line 42 
  return __ldv_in_interrupt_context;
}

#line 45  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
static int ldv_filter_positive_int(int val)
{
  #line 47 
  __VERIFIER_assume(val <= 0);
  #line 48 
  return val;
}

#line 55  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
int ldv_post_init(int init_ret_val)
{
  #line 57 
  return ldv_filter_positive_int(init_ret_val);
}

#line 61  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
int ldv_post_probe(int probe_ret_val)
{
  #line 63 
  ldv_check_return_value_probe(probe_ret_val);
  #line 64 
  return ldv_filter_positive_int(probe_ret_val);
}

#line 68  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
int ldv_filter_err_code(int ret_val)
{
  #line 70 
  return ldv_filter_positive_int(ret_val);
}

#line 28  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/common/list.h"
#line 28 
void ldv_save_allocated_memory_to_list(void *);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/device.h"
#line 29  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/dd.c"
void *ldv_dev_get_drvdata(struct device *dev);
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/device.h"
#line 43  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/dd.c"
int ldv_dev_set_drvdata(struct device *dev, void *data);
#line 57  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 57 
void *ldv_xzalloc(size_t size);
#line 29  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/dd.c"
void *ldv_dev_get_drvdata(struct device *dev)
{
  #line 31 
  if (dev != (struct device *)0 && dev->p != (struct device_private *)0) 
    #line 32 
    return (dev->p)->driver_data;
  #line 34 
  return (void *)0;
}

#line 43  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/dd.c"
int ldv_dev_set_drvdata(struct device *dev, void *data)
{
  #line 45 
  dev->p = (struct device_private *)ldv_xzalloc(8UL);
  #line 46 
  ldv_save_allocated_memory_to_list((void *)dev->p);
  #line 47 
  (dev->p)->driver_data = data;
  #line 49 
  return 0;
}

#line 156  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 156 
void ldv_check_alloc_flags(gfp_t);
#line 48  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 48 
void *ldv_malloc(size_t size);
#line 49 
#line 49 
void *ldv_calloc(size_t nmemb, size_t size);
#line 50 
#line 50 
void *ldv_zalloc(size_t size);
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/devres.c"
void *ldv_devm_kmalloc(size_t size, gfp_t flags)
{
  #line 26 
  void *res;
  #line 28 
  ldv_check_alloc_flags(flags);
  #line 29 
  res = ldv_malloc(size);
  #line 30 
  ldv_save_allocated_memory_to_list(res);
  #line 32 
  return res;
}

#line 35  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/devres.c"
void *ldv_devm_kzalloc(size_t size, gfp_t flags)
{
  #line 37 
  void *res;
  #line 39 
  ldv_check_alloc_flags(flags);
  #line 40 
  res = ldv_zalloc(size);
  #line 41 
  ldv_save_allocated_memory_to_list(res);
  #line 43 
  return res;
}

#line 46  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/devres.c"
void *ldv_devm_kmalloc_array(size_t n, size_t size, gfp_t flags)
{
  #line 48 
  void *res;
  #line 50 
  ldv_check_alloc_flags(flags);
  #line 51 
  res = ldv_malloc(n * size);
  #line 52 
  ldv_save_allocated_memory_to_list(res);
  #line 54 
  return res;
}

#line 57  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/devres.c"
void *ldv_devm_kcalloc(size_t n, size_t size, gfp_t flags)
{
  #line 59 
  void *res;
  #line 61 
  ldv_check_alloc_flags(flags);
  #line 62 
  res = ldv_calloc(n,size);
  #line 63 
  ldv_save_allocated_memory_to_list(res);
  #line 65 
  return res;
}

#line 51  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 51 
void ldv_free(void *s);
#line 59 
#line 59 
void *ldv_malloc_unknown_size(void);
#line 31  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 31 
int ldv_undef_int_positive(void);
#line 40 
#line 40 
int ldv_undef_int_nonpositive(void);
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/firmware_loader.c"
int ldv_request_firmware(struct firmware **fw)
{
  #line 27 
  int retval;
  #line 26 
  struct firmware *_fw = (struct firmware *)0;
  #line 29 
  retval = ldv_undef_int_nonpositive();
  #line 31 
  if (retval == 0) {
    #line 33 
    _fw = (struct firmware *)ldv_xzalloc(32UL);
    #line 34 
    _fw->data = (u8 *)ldv_malloc_unknown_size();
    #line 35 
    __VERIFIER_assume(_fw->data != (u8 *)0U);
    #line 36 
    _fw->size = (unsigned long)ldv_undef_int_positive();
  }
  #line 39 
  *fw = _fw;
  #line 41 
  return retval;
}

#line 44  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/firmware_loader.c"
void ldv_release_firmware(struct firmware *fw)
{
  #line 46 
  if (fw != (struct firmware *)0) {
    #line 48 
    ldv_free((void *)fw->data);
    #line 49 
    ldv_free((void *)fw);
  }
  #line 51 
  return;
}

#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/i2c.h"
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/i2c/i2c-core-smbus.c"
s32 ldv_i2c_smbus_read_block_data(u8 *values);
#line 55  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 55 
void *ldv_xmalloc(size_t size);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 23 
int ldv_undef_int(void);
#line 34 
#line 34 
int ldv_undef_int_negative(void);
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/i2c/i2c-core-smbus.c"
s32 ldv_i2c_smbus_read_block_data(u8 *values)
{
  #line 27 
  __u8 size;
  #line 28 
  char *bytes;
  #line 30 
  if (ldv_undef_int() != 0) {
    #line 33 
    size = (unsigned char)ldv_undef_int_positive();
    #line 35 
    __VERIFIER_assume((unsigned int)size <= 32U);
    #line 37 
    bytes = (char *)ldv_xmalloc((unsigned long)size);
    #line 39 
    memcpy((void *)values,(void *)bytes,(unsigned long)size);
    #line 40 
    ldv_free((void *)bytes);
    #line 42 
    return (int)size;
  }
  else {
    #line 46 
    return ldv_undef_int_negative();
  }
}

#line 988  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
__inline static void v4l2_set_subdevdata(struct v4l2_subdev *sd, void *p)
{
  #line 990 
  sd->dev_priv = p;
  #line 991 
  return;
}

#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/media/v4l2-common.h"
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/media/v4l2-core/v4l2-i2c.c"
void ldv_v4l2_i2c_subdev_init(struct v4l2_subdev *sd, struct i2c_client *client, struct v4l2_subdev_ops *ops);
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/media/v4l2-core/v4l2-i2c.c"
void ldv_v4l2_i2c_subdev_init(struct v4l2_subdev *sd, struct i2c_client *client, struct v4l2_subdev_ops *ops)
{
  #line 26 
  sd->ops = ops;
  #line 27 
  v4l2_set_subdevdata(sd,(void *)client);
  #line 28 
  ldv_dev_set_drvdata(& client->dev,(void *)sd);
  #line 29 
  return;
}

#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/spi.c"
struct spi_controller *ldv_spi_alloc_master(struct device *host, unsigned int size)
{
  #line 25 
  struct spi_controller *master;
  #line 27 
  master = (struct spi_controller *)ldv_zalloc((unsigned long)size + 2936UL);
  #line 29 
  if (master == (struct spi_controller *)0) 
                                            #line 30 
                                            return (struct spi_controller *)0;
  #line 32 
  ldv_dev_set_drvdata(& master->dev,(void *)(master + 1U));
  #line 34 
  return master;
}

#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/fb.h"
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/video/fbdev/core/fbsysfs.c"
struct fb_info *ldv_framebuffer_alloc(size_t size);
#line 26  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/fb.h"
#line 38  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/video/fbdev/core/fbsysfs.c"
void ldv_framebuffer_release(struct fb_info *info);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/video/fbdev/core/fbsysfs.c"
struct fb_info *ldv_framebuffer_alloc(size_t size)
{
  #line 25 
  struct fb_info *info;
  #line 27 
  info = (struct fb_info *)ldv_zalloc(size + 1568UL);
  #line 29 
  if (info == (struct fb_info *)0) 
                                   #line 30 
                                   return (struct fb_info *)0;
  #line 32 
  if (size != 0UL) 
                   #line 33 
                   info->par = (void *)((char *)info + 1568UL);
  #line 35 
  return info;
}

#line 38  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/video/fbdev/core/fbsysfs.c"
void ldv_framebuffer_release(struct fb_info *info)
{
  #line 40 
  if (info == (struct fb_info *)0) 
                                   #line 41 
                                   return;
  #line 44 
  ldv_free((void *)info->apertures);
  #line 46 
  ldv_free((void *)info);
  #line 47 
  return;
}

#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/err.h"
#line 59  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/err.c"
bool ldv_is_err_or_null(void *ptr);
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/err.h"
#line 35  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/err.c"
void *ldv_err_ptr(long error);
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/err.c"
bool ldv_is_err(void *ptr)
{
  #line 29 
  if ((unsigned long)ptr > 18446744073709547520UL) 
                                                   #line 30 
                                                   return (_Bool)1; else 
                                                                    #line 32 
                                                                    return (_Bool)0;
}

#line 35  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/err.c"
void *ldv_err_ptr(long error)
{
  #line 37 
  unsigned long result;
  #line 39 
  __VERIFIER_assume(error < 0L);
  #line 40 
  __VERIFIER_assume(error >= -4095L);
  #line 41 
  result = 18446744073709547520UL - (unsigned long)error;
  #line 42 
  __VERIFIER_assume(result > 18446744073709547520UL);
  #line 44 
  return (void *)result;
}

#line 47  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/err.c"
long ldv_ptr_err(void *ptr)
{
  #line 49 
  long result;
  #line 51 
  __VERIFIER_assume((unsigned long)ptr > 18446744073709547520UL);
  #line 52 
  result = (long)(18446744073709547520UL - (unsigned long)ptr);
  #line 53 
  __VERIFIER_assume(result < 0L);
  #line 54 
  __VERIFIER_assume(result >= -4095L);
  #line 56 
  return result;
}

#line 59  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/err.c"
bool ldv_is_err_or_null(void *ptr)
{
  #line 61 
  int tmp_0;
  #line 61 
  if (ptr == (void *)0) 
                        #line 61 
                        tmp_0 = 1;
  else {
    #line 61 
    if ((int)ldv_is_err(ptr) != 0) 
                                   #line 61 
                                   tmp_0 = 1; else 
                                                   #line 61 
                                                   tmp_0 = 0;
  }
  #line 61 
  return (_Bool)(tmp_0 != 0);
}

#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/panic.h"
#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/kernel/panic.c"
void ldv_panic(void);
#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/kernel/panic.c"
void ldv_panic(void)
{
  #line 23 
  __VERIFIER_assume(0);
  #line 24 
  return;
}

#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/bitmap.h"
#line 22  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_set_bit(long nr, unsigned long *addr);
#line 22  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/bitmap.h"
#line 27  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_clear_bit(long nr, unsigned long *addr);
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/bitmap.h"
#line 32  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_bitmap_set(unsigned long *map, unsigned int start, int nbits);
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/bitmap.h"
#line 52  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_bitmap_clear(unsigned long *map, unsigned int start, int nbits);
#line 27  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/bitmap.h"
#line 72  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_bitmap_zero(unsigned long *dst, unsigned int nbits);
#line 29  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/bitmap.h"
#line 78  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
unsigned long ldv_bitmap_find_next_zero_area(unsigned long *map, unsigned long size, unsigned long start, unsigned int nr, unsigned long align_mask);
#line 22  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/find_bit.h"
#line 22 
unsigned long ldv_find_next_bit(unsigned long *addr, unsigned long size, unsigned long offset);
#line 23 
#line 23 
unsigned long ldv_find_next_zero_bit(unsigned long *addr, unsigned long size, unsigned long offset);
#line 22  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_set_bit(long nr, unsigned long *addr)
{
  #line 24 
  *(addr + (unsigned long)nr / 64UL) |= 1UL << ((unsigned long)nr & 63UL);
  #line 25 
  return;
}

#line 27  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_clear_bit(long nr, unsigned long *addr)
{
  #line 29 
  *(addr + (unsigned long)nr / 64UL) &= ~ (1UL << ((unsigned long)nr & 63UL));
  #line 30 
  return;
}

#line 32  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_bitmap_set(unsigned long *map, unsigned int start, int nbits)
{
  #line 34 
  unsigned long *p = map + (unsigned long)(start / 64U);
  #line 35 
  unsigned int size = start + (unsigned int)nbits;
  #line 36 
  int bits_to_set = (int)(64U - (start & 63U));
  #line 37 
  unsigned long mask_to_set = 18446744073709551615UL << ((unsigned long)start & 63UL);
  #line 39 
  while (nbits - bits_to_set >= 0) {
    #line 40 
    *p |= mask_to_set;
    #line 41 
    nbits -= bits_to_set;
    #line 42 
    bits_to_set = 64;
    #line 43 
    mask_to_set = 18446744073709551615UL;
    #line 44 
    p ++;
  }
  #line 46 
  if (nbits != 0) {
    #line 47 
    mask_to_set = (18446744073709551615UL >> ((unsigned long)(- size) & 63UL)) & mask_to_set;
    #line 48 
    *p |= mask_to_set;
  }
  #line 50 
  return;
}

#line 52  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_bitmap_clear(unsigned long *map, unsigned int start, int nbits)
{
  #line 54 
  unsigned long *p = map + (unsigned long)(start / 64U);
  #line 55 
  unsigned int size = start + (unsigned int)nbits;
  #line 56 
  int bits_to_clear = (int)(64U - (start & 63U));
  #line 57 
  unsigned long mask_to_clear = 18446744073709551615UL << ((unsigned long)start & 63UL);
  #line 59 
  while (nbits - bits_to_clear >= 0) {
    #line 60 
    *p &= ~ mask_to_clear;
    #line 61 
    nbits -= bits_to_clear;
    #line 62 
    bits_to_clear = 64;
    #line 63 
    mask_to_clear = 18446744073709551615UL;
    #line 64 
    p ++;
  }
  #line 66 
  if (nbits != 0) {
    #line 67 
    mask_to_clear = (18446744073709551615UL >> ((unsigned long)(- size) & 63UL)) & mask_to_clear;
    #line 68 
    *p &= ~ mask_to_clear;
  }
  #line 70 
  return;
}

#line 72  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_bitmap_zero(unsigned long *dst, unsigned int nbits)
{
  #line 74 
  unsigned int len = (unsigned int)(((unsigned long)nbits + 63UL) / 64UL) * 8U;
  #line 75 
  memset((void *)dst,0,(unsigned long)len);
  #line 76 
  return;
}

#line 78  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
unsigned long ldv_bitmap_find_next_zero_area(unsigned long *map, unsigned long size, unsigned long start, unsigned int nr, unsigned long align_mask)
{
  #line 80 
  unsigned long index;
  #line 80 
  unsigned long end;
  #line 80 
  unsigned long i;
  #line 82 
  again: 
         #line 82 
  ;
  #line 83 
  index = ldv_find_next_zero_bit(map,size,start);
  #line 84 
  index = (index + align_mask) & ~ align_mask;
  #line 85 
  end = (unsigned long)nr + index;
  #line 87 
  if (end > size) 
                  #line 88 
                  return end;
  #line 90 
  i = ldv_find_next_bit(map,end,index);
  #line 92 
  if (i < end) {
    #line 93 
    start = i + 1UL;
    #line 94 
    goto again;
  }
  #line 97 
  return index;
}

#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/find_bit.h"
#line 68  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/find_bit.common.c"
unsigned long ldv_find_first_bit(unsigned long *addr, unsigned long size);
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/find_bit.h"
#line 25 
void ldv_check_find_bit_offset(unsigned long, unsigned long);
#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/find_bit.common.c"
static unsigned long ldv_ffs(unsigned long word)
{
  #line 23 
  int num = 0;
  #line 25 
  if ((word & 4294967295UL) == 0UL) {
    #line 26 
    num += 32;
    #line 27 
    word >>= 32;
  }
  #line 29 
  if ((word & 65535UL) == 0UL) {
    #line 30 
    num += 16;
    #line 31 
    word >>= 16;
  }
  #line 33 
  if ((word & 255UL) == 0UL) {
    #line 34 
    num += 8;
    #line 35 
    word >>= 8;
  }
  #line 37 
  if ((word & 15UL) == 0UL) {
    #line 38 
    num += 4;
    #line 39 
    word >>= 4;
  }
  #line 41 
  if ((word & 3UL) == 0UL) {
    #line 42 
    num += 2;
    #line 43 
    word >>= 2;
  }
  #line 45 
  if ((word & 1UL) == 0UL) 
                           #line 46 
                           num ++;
  #line 48 
  return (unsigned long)num;
}

#line 51  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/find_bit.common.c"
static unsigned long ldv_min(unsigned long a, unsigned long b)
{
  #line 53 
  if (a < b) 
             #line 54 
             return a;
  #line 56 
  return b;
}

#line 59  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/find_bit.common.c"
static unsigned long ldv_restrict_find_bit_res(unsigned long res, unsigned long size)
{
  #line 62 
  __VERIFIER_assume(1);
  #line 63 
  __VERIFIER_assume(res <= size);
  #line 65 
  return res;
}

#line 68  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/find_bit.common.c"
unsigned long ldv_find_first_bit(unsigned long *addr, unsigned long size)
{
  #line 70 
  unsigned long i;
  #line 72 
  i = 0UL;
  #line 72 
  while (i * 64UL < size) {
    #line 73 
    if (*(addr + i) != 0UL) {
      #line 74 
      ;
      #line 74 
      ;
      #line 74 
      ;
      #line 74 
      return ldv_restrict_find_bit_res(ldv_min(i * 64UL + ldv_ffs(*(addr + i)),size),
                                  size);
    }
    #line 72 
    i ++;
  }
  #line 76 
  return size;
}

#line 79  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/find_bit.common.c"
unsigned long ldv_find_next_bit(unsigned long *addr, unsigned long size, unsigned long offset)
{
  #line 81 
  unsigned long tmp;
  #line 83 
  ldv_check_find_bit_offset(size,offset);
  #line 85 
  tmp = *(addr + offset / 64UL);
  #line 86 
  tmp = (unsigned long)((18446744073709551615ULL << (offset & 63UL)) & (unsigned long long)tmp);
  #line 87 
  offset &= 18446744073709551552UL;
  #line 89 
  while (tmp == 0UL) {
    #line 90 
    offset += 64UL;
    #line 91 
    if (offset >= size) 
                        #line 92 
                        return size;
    #line 94 
    tmp = *(addr + offset / 64UL);
  }
  #line 97 
  ;
  #line 97 
  ;
  #line 97 
  ;
  #line 97 
  return ldv_restrict_find_bit_res(ldv_min(ldv_ffs(tmp) + offset,size),size);
}

#line 100  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/find_bit.common.c"
unsigned long ldv_find_next_zero_bit(unsigned long *addr, unsigned long size, unsigned long offset)
{
  #line 102 
  unsigned long tmp;
  #line 104 
  ldv_check_find_bit_offset(size,offset);
  #line 106 
  tmp = *(addr + offset / 64UL);
  #line 107 
  tmp = ~ tmp;
  #line 108 
  tmp = (unsigned long)((18446744073709551615ULL << (offset & 63UL)) & (unsigned long long)tmp);
  #line 109 
  offset &= 18446744073709551552UL;
  #line 111 
  while (tmp == 0UL) {
    #line 112 
    offset += 64UL;
    #line 113 
    if (offset >= size) 
                        #line 114 
                        return size;
    #line 116 
    tmp = *(addr + offset / 64UL);
    #line 117 
    tmp = ~ tmp;
  }
  #line 120 
  ;
  #line 120 
  ;
  #line 120 
  ;
  #line 120 
  return ldv_restrict_find_bit_res(ldv_min(ldv_ffs(tmp) + offset,size),size);
}

#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/string.h"
#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
size_t ldv_strlen(char *s);
#line 26  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/string.h"
#line 31  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
int ldv_strcmp(char *cs, char *ct);
#line 27  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/string.h"
#line 40  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
int ldv_strncmp(char *cs, char *ct, __kernel_size_t count);
#line 28  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/string.h"
#line 70  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
char *ldv_strstr(char *cs, char *ct);
#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
size_t ldv_strlen(char *s)
{
  #line 23 
  unsigned int len = 0U;
  #line 25 
  while ((int)*s != 0) {
    #line 26 
    len ++;
    #line 25 
    s ++;
  }
  #line 28 
  return (unsigned long)len;
}

#line 31  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
int ldv_strcmp(char *cs, char *ct)
{
  #line 33 
  while ((int)*cs != 0 && (int)*ct != 0) {
    #line 34 
    if ((int)*cs != (int)*ct) 
                              #line 35 
                              break;
    #line 33 
    cs ++;
    #line 33 
    ct ++;
  }
  #line 37 
  return (int)*cs - (int)*ct;
}

#line 40  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
int ldv_strncmp(char *cs, char *ct, __kernel_size_t count)
{
  #line 42 
  if (count == 0UL) 
                    #line 43 
                    return 0;
  #line 45 
  while ((int)*cs != 0 && (int)*ct != 0) {
    #line 46 
    if ((int)*cs != (int)*ct) 
                              #line 47 
                              break;
    #line 49 
    count --;
    #line 51 
    if (count == 0UL) 
                      #line 52 
                      break;
    #line 45 
    cs ++;
    #line 45 
    ct ++;
  }
  #line 55 
  return (int)*cs - (int)*ct;
}

#line 58  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
int ldv_memcmp(void *cs, void *ct, size_t count)
{
  #line 60 
  unsigned char *su1;
  #line 60 
  unsigned char *su2;
  #line 61 
  int res = 0;
  #line 63 
  su1 = (unsigned char *)cs;
  #line 63 
  su2 = (unsigned char *)ct;
  #line 63 
  while (count != 0UL) {
    #line 64 
    res = (int)*su1 - (int)*su2;
    #line 64 
    if (res != 0) 
                  #line 65 
                  break;
    #line 63 
    su1 ++;
    #line 63 
    su2 ++;
    #line 63 
    count --;
  }
  #line 67 
  return res;
}

#line 70  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
char *ldv_strstr(char *cs, char *ct)
{
  #line 72 
  size_t cs_len;
  #line 72 
  size_t ct_len;
  #line 74 
  cs_len = ldv_strlen(cs);
  #line 75 
  ct_len = ldv_strlen(ct);
  #line 77 
  while (cs_len >= ct_len) {
    #line 78 
    if (ldv_memcmp((void *)cs,(void *)ct,ct_len) == 0) 
                                                       #line 79 
                                                       return cs;
    #line 81 
    cs_len --;
    #line 82 
    cs ++;
  }
  #line 85 
  return (char *)0;
}

#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/list.c"
void ldv_init_list_head(struct list_head *list)
{
  #line 23 
  list->next = list;
  #line 24 
  list->prev = list;
  #line 25 
  return;
}

#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 53  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kcalloc(size_t n, size_t size, gfp_t flags);
#line 26  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 43  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmalloc_array(size_t n, size_t size, gfp_t flags);
#line 30  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 69  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
struct kmem_cache *ldv_kmem_cache_create(char *name, unsigned int size);
#line 31  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 85  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmem_cache_alloc(struct kmem_cache *cachep, gfp_t flags);
#line 32  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 90  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmem_cache_zalloc(struct kmem_cache *cachep, gfp_t flags);
#line 33  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 95  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void ldv_kmem_cache_free(struct kmem_cache *cachep, void *objp);
#line 34  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 100  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void ldv_kmem_cache_destroy(struct kmem_cache *cachep);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmalloc(size_t size, gfp_t flags)
{
  #line 25 
  void *res;
  #line 27 
  ldv_check_alloc_flags(flags);
  #line 28 
  res = ldv_malloc(size);
  #line 30 
  return res;
}

#line 33  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kzalloc(size_t size, gfp_t flags)
{
  #line 35 
  void *res;
  #line 37 
  ldv_check_alloc_flags(flags);
  #line 38 
  res = ldv_zalloc(size);
  #line 40 
  return res;
}

#line 43  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmalloc_array(size_t n, size_t size, gfp_t flags)
{
  #line 45 
  void *res;
  #line 47 
  ldv_check_alloc_flags(flags);
  #line 48 
  res = ldv_malloc(n * size);
  #line 50 
  return res;
}

#line 53  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kcalloc(size_t n, size_t size, gfp_t flags)
{
  #line 55 
  void *res;
  #line 57 
  ldv_check_alloc_flags(flags);
  #line 58 
  res = ldv_calloc(n,size);
  #line 60 
  return res;
}

#line 69  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
struct kmem_cache *ldv_kmem_cache_create(char *name, unsigned int size)
{
  #line 71 
  struct kmem_cache *res;
  #line 72 
  struct ldv_kmem_cache *ldv_res;
  #line 74 
  res = (struct kmem_cache *)ldv_zalloc(16UL);
  #line 76 
  if (res != (struct kmem_cache *)0) {
    #line 77 
    ldv_res = (struct ldv_kmem_cache *)res;
    #line 78 
    ldv_res->name = name;
    #line 79 
    ldv_res->size = size;
  }
  #line 82 
  return res;
}

#line 85  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmem_cache_alloc(struct kmem_cache *cachep, gfp_t flags)
{
  #line 87 
  return ldv_kmalloc((unsigned long)((struct ldv_kmem_cache *)cachep)->size,
                  flags);
}

#line 90  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmem_cache_zalloc(struct kmem_cache *cachep, gfp_t flags)
{
  #line 92 
  return ldv_kzalloc((unsigned long)((struct ldv_kmem_cache *)cachep)->size,
                  flags);
}

#line 95  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void ldv_kmem_cache_free(struct kmem_cache *cachep, void *objp)
{
  #line 97 
  ldv_free(objp);
  #line 98 
  return;
}

#line 100  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void ldv_kmem_cache_destroy(struct kmem_cache *cachep)
{
  #line 102 
  ldv_free((void *)cachep);
  #line 103 
  return;
}

#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/util.c"
void *ldv_kmemdup(void *src, size_t len, gfp_t gfp)
{
  #line 25 
  void *res;
  #line 27 
  ldv_check_alloc_flags(gfp);
  #line 28 
  res = ldv_malloc(len);
  #line 30 
  if (res != (void *)0) 
                        #line 31 
                        memcpy(res,src,len);
  #line 33 
  return res;
}

#line 162  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 162 
void ldv_check_alloc_nonatomic(void);
#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/vmalloc.h"
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/vmalloc.c"
void *ldv_vmalloc(unsigned long size);
#line 22  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/vmalloc.h"
#line 33  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/vmalloc.c"
void *ldv_vzalloc(unsigned long size);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/vmalloc.h"
#line 43  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/vmalloc.c"
void ldv_vfree(void *addr);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/vmalloc.c"
void *ldv_vmalloc(unsigned long size)
{
  #line 25 
  void *res;
  #line 27 
  ldv_check_alloc_nonatomic();
  #line 28 
  res = ldv_malloc(size);
  #line 30 
  return res;
}

#line 33  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/vmalloc.c"
void *ldv_vzalloc(unsigned long size)
{
  #line 35 
  void *res;
  #line 37 
  ldv_check_alloc_nonatomic();
  #line 38 
  res = ldv_zalloc(size);
  #line 40 
  return res;
}

#line 43  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/vmalloc.c"
void ldv_vfree(void *addr)
{
  #line 45 
  ldv_free(addr);
  #line 46 
  return;
}

#line 28  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 28 
void *malloc(size_t);
#line 29 
#line 29 
void *calloc(size_t, size_t);
#line 30 
#line 30 
void free(void *);
#line 45 
#line 22  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
unsigned int ldv_is_memory_alloc_failures;
#line 56  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 63  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_xcalloc(size_t nmemb, size_t size);
#line 60  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 88  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_calloc_unknown_size(void);
#line 61  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 97  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_zalloc_unknown_size(void);
#line 64  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_malloc(size_t size);
#line 65  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 37  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_calloc(size_t nmemb, size_t size);
#line 66  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 42  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_zalloc(size_t size);
#line 67  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 47  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void ldv_reference_free(void *s);
#line 69  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 52  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_realloc(void *ptr, size_t size);
#line 71  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 80  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xmalloc(size_t size);
#line 72  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 90  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xcalloc(size_t nmemb, size_t size);
#line 73  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 100  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xzalloc(size_t size);
#line 75  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 110  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_malloc_unknown_size(void);
#line 76  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 124  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_calloc_unknown_size(void);
#line 77  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 139  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_zalloc_unknown_size(void);
#line 83  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 106  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_xmalloc_unknown_size(size_t size);
#line 85  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 144  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xmalloc_unknown_size(size_t size);
#line 87  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 87 
void *external_allocated_data(void);
#line 22  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
unsigned int ldv_is_memory_alloc_failures = 1U;
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_malloc(size_t size)
{
  #line 26 
  void *res;
  #line 28 
  if (ldv_is_memory_alloc_failures != 0U) {
    #line 28 
    if (ldv_undef_int() != 0) 
                              #line 29 
                              return (void *)0;
  }
  #line 32 
  res = malloc(size);
  #line 33 
  __VERIFIER_assume(res != (void *)0);
  #line 34 
  return res;
}

#line 37  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_calloc(size_t nmemb, size_t size)
{
  #line 39 
  return calloc(nmemb,size);
}

#line 42  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_zalloc(size_t size)
{
  #line 44 
  return calloc(1UL,size);
}

#line 47  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void ldv_reference_free(void *s)
{
  #line 49 
  free(s);
  #line 50 
  return;
}

#line 52  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_realloc(void *ptr, size_t size)
{
  #line 54 
  void *res;
  #line 56 
  if (ptr != (void *)0 && size == 0UL) {
    #line 57 
    free(ptr);
    #line 58 
    return (void *)0;
  }
  #line 61 
  if (ptr == (void *)0) {
    #line 62 
    res = malloc(size);
    #line 63 
    return res;
  }
  #line 66 
  if (ldv_undef_int() != 0) {
    #line 68 
    res = malloc(size);
    #line 69 
    __VERIFIER_assume(res != (void *)0);
    #line 71 
    memcpy(res,ptr,size);
    #line 72 
    free(ptr);
    #line 74 
    return res;
  }
  else 
       #line 77 
       return (void *)0;
}

#line 80  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xmalloc(size_t size)
{
  #line 82 
  void *res;
  #line 84 
  res = malloc(size);
  #line 85 
  __VERIFIER_assume(res != (void *)0);
  #line 87 
  return res;
}

#line 90  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xcalloc(size_t nmemb, size_t size)
{
  #line 92 
  void *res;
  #line 94 
  res = calloc(nmemb,size);
  #line 95 
  __VERIFIER_assume(res != (void *)0);
  #line 97 
  return res;
}

#line 100  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xzalloc(size_t size)
{
  #line 102 
  void *res;
  #line 104 
  res = calloc(1UL,size);
  #line 105 
  __VERIFIER_assume(res != (void *)0);
  #line 107 
  return res;
}

#line 110  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_malloc_unknown_size(void)
{
  #line 112 
  void *res;
  #line 114 
  if (ldv_undef_int() != 0) {
    #line 116 
    res = external_allocated_data();
    #line 117 
    __VERIFIER_assume(res != (void *)0);
    #line 118 
    return res;
  }
  else 
       #line 121 
       return (void *)0;
}

#line 124  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_calloc_unknown_size(void)
{
  #line 126 
  void *res;
  #line 128 
  if (ldv_undef_int() != 0) {
    #line 130 
    res = external_allocated_data();
    #line 131 
    memset(res,0,8UL);
    #line 132 
    __VERIFIER_assume(res != (void *)0);
    #line 133 
    return res;
  }
  else 
       #line 136 
       return (void *)0;
}

#line 139  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_zalloc_unknown_size(void)
{
  #line 141 
  return ldv_reference_calloc_unknown_size();
}

#line 144  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xmalloc_unknown_size(size_t size)
{
  #line 146 
  void *res;
  #line 149 
  res = external_allocated_data();
  #line 150 
  __VERIFIER_assume(res != (void *)0);
  #line 152 
  return res;
}

#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_malloc(size_t size)
{
  #line 25 
  void *res;
  #line 26 
  res = ldv_reference_malloc(size);
  #line 27 
  if (res != (void *)0) {
    #line 28 
    int tmp_0;
    #line 28 
    if (ldv_is_err(res)) 
                         #line 28 
                         tmp_0 = 0; else 
                                         #line 28 
                                         tmp_0 = 1;
    #line 28 
    __VERIFIER_assume(tmp_0);
  }
  #line 29 
  return res;
}

#line 32  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_calloc(size_t nmemb, size_t size)
{
  #line 34 
  void *res;
  #line 35 
  res = ldv_reference_calloc(nmemb,size);
  #line 36 
  if (res != (void *)0) {
    #line 37 
    int tmp_0;
    #line 37 
    if (ldv_is_err(res)) 
                         #line 37 
                         tmp_0 = 0; else 
                                         #line 37 
                                         tmp_0 = 1;
    #line 37 
    __VERIFIER_assume(tmp_0);
  }
  #line 38 
  return res;
}

#line 41  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_zalloc(size_t size)
{
  #line 43 
  void *res;
  #line 44 
  res = ldv_reference_zalloc(size);
  #line 45 
  if (res != (void *)0) {
    #line 46 
    int tmp_0;
    #line 46 
    if (ldv_is_err(res)) 
                         #line 46 
                         tmp_0 = 0; else 
                                         #line 46 
                                         tmp_0 = 1;
    #line 46 
    __VERIFIER_assume(tmp_0);
  }
  #line 47 
  return res;
}

#line 50  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void ldv_free(void *s)
{
  #line 52 
  ldv_reference_free(s);
  #line 53 
  return;
}

#line 55  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_xmalloc(size_t size)
{
  #line 57 
  void *res;
  #line 59 
  int tmp_0;
  #line 58 
  res = ldv_reference_xmalloc(size);
  #line 59 
  if (ldv_is_err(res)) 
                       #line 59 
                       tmp_0 = 0; else 
                                       #line 59 
                                       tmp_0 = 1;
  #line 59 
  __VERIFIER_assume(tmp_0);
  #line 60 
  return res;
}

#line 63  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_xcalloc(size_t nmemb, size_t size)
{
  #line 65 
  void *res;
  #line 67 
  int tmp_0;
  #line 66 
  res = ldv_reference_xcalloc(nmemb,size);
  #line 67 
  if (ldv_is_err(res)) 
                       #line 67 
                       tmp_0 = 0; else 
                                       #line 67 
                                       tmp_0 = 1;
  #line 67 
  __VERIFIER_assume(tmp_0);
  #line 68 
  return res;
}

#line 71  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_xzalloc(size_t size)
{
  #line 73 
  void *res;
  #line 75 
  int tmp_0;
  #line 74 
  res = ldv_reference_xzalloc(size);
  #line 75 
  if (ldv_is_err(res)) 
                       #line 75 
                       tmp_0 = 0; else 
                                       #line 75 
                                       tmp_0 = 1;
  #line 75 
  __VERIFIER_assume(tmp_0);
  #line 76 
  return res;
}

#line 79  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_malloc_unknown_size(void)
{
  #line 81 
  void *res;
  #line 82 
  res = ldv_reference_malloc_unknown_size();
  #line 83 
  if (res != (void *)0) {
    #line 84 
    int tmp_0;
    #line 84 
    if (ldv_is_err(res)) 
                         #line 84 
                         tmp_0 = 0; else 
                                         #line 84 
                                         tmp_0 = 1;
    #line 84 
    __VERIFIER_assume(tmp_0);
  }
  #line 85 
  return res;
}

#line 88  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_calloc_unknown_size(void)
{
  #line 90 
  void *res;
  #line 91 
  res = ldv_reference_calloc_unknown_size();
  #line 92 
  if (res != (void *)0) {
    #line 93 
    int tmp_0;
    #line 93 
    if (ldv_is_err(res)) 
                         #line 93 
                         tmp_0 = 0; else 
                                         #line 93 
                                         tmp_0 = 1;
    #line 93 
    __VERIFIER_assume(tmp_0);
  }
  #line 94 
  return res;
}

#line 97  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_zalloc_unknown_size(void)
{
  #line 99 
  void *res;
  #line 100 
  res = ldv_reference_zalloc_unknown_size();
  #line 101 
  if (res != (void *)0) {
    #line 102 
    int tmp_0;
    #line 102 
    if (ldv_is_err(res)) 
                         #line 102 
                         tmp_0 = 0; else 
                                         #line 102 
                                         tmp_0 = 1;
    #line 102 
    __VERIFIER_assume(tmp_0);
  }
  #line 103 
  return res;
}

#line 106  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_xmalloc_unknown_size(size_t size)
{
  #line 108 
  void *res;
  #line 110 
  int tmp_0;
  #line 109 
  res = ldv_reference_xmalloc_unknown_size(size);
  #line 110 
  if (ldv_is_err(res)) 
                       #line 110 
                       tmp_0 = 0; else 
                                       #line 110 
                                       tmp_0 = 1;
  #line 110 
  __VERIFIER_assume(tmp_0);
  #line 111 
  return res;
}

/* compiler builtin: 
   long __builtin_expect(long exp, long c);   */
#line 22  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/common.h"
#line 22 
void __VERIFIER_error(void);
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/common.h"
long __builtin_expect(long exp, long c)
{
  #line 26 
  return exp;
}

#line 35  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/gcc.c"
void __builtin_trap(void)
{
  #line 37 
  __VERIFIER_error();
  #line 38 
  return;
}

#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 53  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
long ldv_undef_long(void);
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 61  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
unsigned int ldv_undef_uint(void);
#line 26  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 77  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
unsigned long ldv_undef_ulong(void);
#line 27  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 85  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
unsigned long long ldv_undef_ulonglong(void);
#line 28  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 69  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
void *ldv_undef_ptr(void);
#line 37  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 111  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int ldv_undef_int_nonnegative(void);
#line 43  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 129  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
void *ldv_undef_ptr_non_null(void);
#line 54  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 139  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int __ldv_undef_int_range(int begin, int end);
#line 56  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 151  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int __ldv_undef_int_range2(int begin, int end);
#line 29 
#line 29 
int __VERIFIER_nondet_int(void);
#line 31 
#line 31 
long __VERIFIER_nondet_long(void);
#line 38 
#line 38 
unsigned int __VERIFIER_nondet_uint(void);
#line 41 
#line 41 
unsigned long __VERIFIER_nondet_ulong(void);
#line 42 
#line 42 
unsigned long long __VERIFIER_nondet_ulonglong(void);
#line 43 
#line 43 
void *__VERIFIER_nondet_pointer(void);
#line 45  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int ldv_undef_int(void)
{
  #line 48 
  int undef_int = __VERIFIER_nondet_int();
  #line 50 
  return undef_int;
}

#line 53  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
long ldv_undef_long(void)
{
  #line 56 
  long undef_long = __VERIFIER_nondet_long();
  #line 58 
  return undef_long;
}

#line 61  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
unsigned int ldv_undef_uint(void)
{
  #line 64 
  unsigned int undef_uint = __VERIFIER_nondet_uint();
  #line 66 
  return undef_uint;
}

#line 69  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
void *ldv_undef_ptr(void)
{
  #line 72 
  void *undef_ptr = __VERIFIER_nondet_pointer();
  #line 74 
  return undef_ptr;
}

#line 77  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
unsigned long ldv_undef_ulong(void)
{
  #line 80 
  unsigned long undef_ulong = __VERIFIER_nondet_ulong();
  #line 82 
  return undef_ulong;
}

#line 85  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
unsigned long long ldv_undef_ulonglong(void)
{
  #line 88 
  unsigned long long undef_ulonglong = __VERIFIER_nondet_ulonglong();
  #line 90 
  return undef_ulonglong;
}

#line 93  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int ldv_undef_int_positive(void)
{
  #line 95 
  int ret = ldv_undef_int();
  #line 97 
  __VERIFIER_assume(ret > 0);
  #line 99 
  return ret;
}

#line 102  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int ldv_undef_int_negative(void)
{
  #line 104 
  int ret = ldv_undef_int();
  #line 106 
  __VERIFIER_assume(ret < 0);
  #line 108 
  return ret;
}

#line 111  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int ldv_undef_int_nonnegative(void)
{
  #line 113 
  int ret = ldv_undef_int();
  #line 115 
  __VERIFIER_assume(ret >= 0);
  #line 117 
  return ret;
}

#line 120  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int ldv_undef_int_nonpositive(void)
{
  #line 122 
  int ret = ldv_undef_int();
  #line 124 
  __VERIFIER_assume(ret <= 0);
  #line 126 
  return ret;
}

#line 129  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
void *ldv_undef_ptr_non_null(void)
{
  #line 131 
  void *ret = ldv_undef_ptr();
  #line 133 
  __VERIFIER_assume(ret != (void *)0);
  #line 135 
  return ret;
}

#line 139  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int __ldv_undef_int_range(int begin, int end)
{
  #line 141 
  int ret;
  #line 143 
  ret = ldv_undef_int();
  #line 144 
  __VERIFIER_assume(ret >= begin);
  #line 145 
  __VERIFIER_assume(ret <= end);
  #line 147 
  return ret;
}

#line 151  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int __ldv_undef_int_range2(int begin, int end)
{
  #line 153 
  int ret;
  #line 155 
  ret = begin;
  #line 155 
  while (ret < end) {
    #line 156 
    if (ldv_undef_int() != 0) 
                              #line 157 
                              break;
    #line 155 
    ret ++;
  }
  #line 159 
  return ret;
}

#line 62  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 62 
void ldv_initialize(void);
#line 123 
#line 123 
void ldv_pre_probe(void);
#line 35  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/thread.h"
#line 35 
int pthread_create(pthread_t *, pthread_attr_t *, void *(*)(void *), void *);
#line 39 
#line 39 
int pthread_join(pthread_t, void **);
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/err.h"
__inline static void *ERR_PTR(long error)
{
  #line 26 
  return (void *)error;
}

#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rtnetlink.h"
#line 33 
void rtnl_lock(void);
#line 34 
#line 34 
void rtnl_unlock(void);
#line 87  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/wcn36xx/wcn36xx.ko/concurrency safety/emg/0/environment_model.c"
#line 178 
void emg_dispatch_deregister_7(struct ieee80211_hw *arg0);
#line 88 
#line 187 
void emg_dispatch_deregister_8(struct platform_driver *arg0);
#line 89 
#line 151 
void emg_dispatch_irq_deregister_5(int arg0);
#line 90 
#line 196 
void emg_dispatch_irq_register_10(int arg0, enum irqreturn (*arg1)(int , void *), enum irqreturn (*arg2)(int , void *), void *arg3);
#line 91 
#line 120 
void emg_dispatch_register_2(struct platform_driver *arg0);
#line 92 
#line 131 
void emg_dispatch_register_4(struct file_operations *arg0);
#line 93 
#line 167 
void emg_dispatch_register_6(struct ieee80211_hw *arg0);
#line 94 
#line 1519 
void *emg_entry_point_insmod(void *arg0);
#line 95 
#line 222 
void *emg_file_operations_character_driver_scenario_fops_wcn36xx_bmps(void *arg0);
#line 96 
#line 385 
void *emg_file_operations_character_driver_scenario_fops_wcn36xx_dump(void *arg0);
#line 100 
#line 551 
void *emg_ieee80211_ieee80211_scenario_wcn36xx_ops(void *arg0);
#line 101 
#line 951 
void *emg_interrupt_interrupt_scenario_wcn36xx_irq_rx_ready(void *arg0);
#line 102 
#line 1014 
void *emg_interrupt_interrupt_scenario_wcn36xx_irq_tx_complete(void *arg0);
#line 104 
#line 1077 
void *emg_platform_platform_instance_wcn36xx_driver(void *arg0);
#line 108 
#line 1548 
int main(void);
#line 111  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/wcn36xx/wcn36xx.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_12;
#line 112  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/wcn36xx/wcn36xx.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_13;
#line 113  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/wcn36xx/wcn36xx.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_14;
#line 114  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/wcn36xx/wcn36xx.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_15;
#line 115  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/wcn36xx/wcn36xx.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_16;
#line 116  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/wcn36xx/wcn36xx.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_17;
#line 120  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/wcn36xx/wcn36xx.ko/concurrency safety/emg/0/environment_model.c"
void emg_dispatch_register_2(struct platform_driver *arg0)
{
  #line 121 
  int ret;
  #line 122 
  struct emg_struct_platform_instance_wcn36xx_driver_17 *cf_arg_17;
  #line 123 
  cf_arg_17 = (struct emg_struct_platform_instance_wcn36xx_driver_17 *)ldv_xmalloc(16UL);
  #line 124 
  cf_arg_17->arg0 = arg0;
  #line 125 
  ret = pthread_create(& emg_thread_17,(pthread_attr_t *)0,& emg_platform_platform_instance_wcn36xx_driver,(void *)cf_arg_17);
  #line 126 
  __VERIFIER_assume(ret == 0);
  #line 127 
  return;
}

#line 131  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/wcn36xx/wcn36xx.ko/concurrency safety/emg/0/environment_model.c"
void emg_dispatch_register_4(struct file_operations *arg0)
{
  #line 132 
  int ret;
  #line 133 
  struct emg_struct_character_driver_scenario_fops_wcn36xx_bmps_12 *cf_arg_12;
  #line 134 
  struct emg_struct_character_driver_scenario_fops_wcn36xx_bmps_12 *cf_arg_13;
  #line 135 
  if (ldv_undef_int() != 0) {
    #line 136 
    cf_arg_12 = (struct emg_struct_character_driver_scenario_fops_wcn36xx_bmps_12 *)ldv_xmalloc(16UL);
    #line 137 
    cf_arg_12->arg0 = arg0;
    #line 138 
    ret = pthread_create(& emg_thread_12,(pthread_attr_t *)0,& emg_file_operations_character_driver_scenario_fops_wcn36xx_bmps,(void *)cf_arg_12);
    #line 139 
    __VERIFIER_assume(ret == 0);
  }
  else {
    #line 142 
    cf_arg_13 = (struct emg_struct_character_driver_scenario_fops_wcn36xx_bmps_12 *)ldv_xmalloc(16UL);
    #line 143 
    cf_arg_13->arg0 = arg0;
    #line 144 
    ret = pthread_create(& emg_thread_13,(pthread_attr_t *)0,& emg_file_operations_character_driver_scenario_fops_wcn36xx_dump,(void *)cf_arg_13);
    #line 145 
    __VERIFIER_assume(ret == 0);
  }
  #line 147 
  return;
}

#line 151  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/wcn36xx/wcn36xx.ko/concurrency safety/emg/0/environment_model.c"
void emg_dispatch_irq_deregister_5(int arg0)
{
  #line 152 
  int ret;
  #line 153 
  struct emg_struct_free_irq_5 *cf_arg_15;
  #line 154 
  struct emg_struct_free_irq_5 *cf_arg_16;
  #line 155 
  if (ldv_undef_int() != 0) {
    #line 156 
    ret = pthread_join(emg_thread_15,(void **)0);
    #line 157 
    __VERIFIER_assume(ret == 0);
  }
  else {
    #line 160 
    ret = pthread_join(emg_thread_16,(void **)0);
    #line 161 
    __VERIFIER_assume(ret == 0);
  }
  #line 163 
  return;
}

#line 167  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/wcn36xx/wcn36xx.ko/concurrency safety/emg/0/environment_model.c"
void emg_dispatch_register_6(struct ieee80211_hw *arg0)
{
  #line 168 
  int ret;
  #line 169 
  struct emg_struct_ieee80211_scenario_wcn36xx_ops_14 *cf_arg_14;
  #line 170 
  cf_arg_14 = (struct emg_struct_ieee80211_scenario_wcn36xx_ops_14 *)ldv_xmalloc(16UL);
  #line 171 
  cf_arg_14->arg0 = arg0;
  #line 172 
  ret = pthread_create(& emg_thread_14,(pthread_attr_t *)0,& emg_ieee80211_ieee80211_scenario_wcn36xx_ops,(void *)cf_arg_14);
  #line 173 
  __VERIFIER_assume(ret == 0);
  #line 174 
  return;
}

#line 178  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/wcn36xx/wcn36xx.ko/concurrency safety/emg/0/environment_model.c"
void emg_dispatch_deregister_7(struct ieee80211_hw *arg0)
{
  #line 179 
  int ret;
  #line 180 
  struct emg_struct_ieee80211_scenario_wcn36xx_ops_14 *cf_arg_14;
  #line 181 
  ret = pthread_join(emg_thread_14,(void **)0);
  #line 182 
  __VERIFIER_assume(ret == 0);
  #line 183 
  return;
}

#line 187  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/wcn36xx/wcn36xx.ko/concurrency safety/emg/0/environment_model.c"
void emg_dispatch_deregister_8(struct platform_driver *arg0)
{
  #line 188 
  int ret;
  #line 189 
  struct emg_struct_platform_instance_wcn36xx_driver_17 *cf_arg_17;
  #line 190 
  ret = pthread_join(emg_thread_17,(void **)0);
  #line 191 
  __VERIFIER_assume(ret == 0);
  #line 192 
  return;
}

#line 196  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/wcn36xx/wcn36xx.ko/concurrency safety/emg/0/environment_model.c"
void emg_dispatch_irq_register_10(int arg0, enum irqreturn (*arg1)(int , void *), enum irqreturn (*arg2)(int , void *), void *arg3)
{
  #line 197 
  int ret;
  #line 198 
  struct emg_struct_interrupt_scenario_wcn36xx_irq_rx_ready_15 *cf_arg_15;
  #line 199 
  struct emg_struct_interrupt_scenario_wcn36xx_irq_rx_ready_15 *cf_arg_16;
  #line 200 
  if (ldv_undef_int() != 0) {
    #line 201 
    cf_arg_15 = (struct emg_struct_interrupt_scenario_wcn36xx_irq_rx_ready_15 *)ldv_xmalloc(40UL);
    #line 202 
    cf_arg_15->arg0 = arg0;
    #line 203 
    cf_arg_15->arg1 = arg1;
    #line 204 
    cf_arg_15->arg2 = arg2;
    #line 205 
    cf_arg_15->arg3 = arg3;
    #line 206 
    ret = pthread_create(& emg_thread_15,(pthread_attr_t *)0,& emg_interrupt_interrupt_scenario_wcn36xx_irq_rx_ready,(void *)cf_arg_15);
    #line 207 
    __VERIFIER_assume(ret == 0);
  }
  else {
    #line 210 
    cf_arg_16 = (struct emg_struct_interrupt_scenario_wcn36xx_irq_rx_ready_15 *)ldv_xmalloc(40UL);
    #line 211 
    cf_arg_16->arg0 = arg0;
    #line 212 
    cf_arg_16->arg1 = arg1;
    #line 213 
    cf_arg_16->arg2 = arg2;
    #line 214 
    cf_arg_16->arg3 = arg3;
    #line 215 
    ret = pthread_create(& emg_thread_16,(pthread_attr_t *)0,& emg_interrupt_interrupt_scenario_wcn36xx_irq_tx_complete,(void *)cf_arg_16);
    #line 216 
    __VERIFIER_assume(ret == 0);
  }
  #line 218 
  return;
}

#line 222  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/wcn36xx/wcn36xx.ko/concurrency safety/emg/0/environment_model.c"
void *emg_file_operations_character_driver_scenario_fops_wcn36xx_bmps(void *arg0)
{
  #line 225 
  struct file_operations *emg_12_container;
  #line 226 
  char *emg_12_emg_param_1_0;
  #line 227 
  char *emg_12_emg_param_1_2;
  #line 228 
  long long *emg_12_emg_param_3_1;
  #line 229 
  long long *emg_12_emg_param_3_3;
  #line 230 
  struct file *emg_12_resource_0;
  #line 231 
  struct inode *emg_12_resource_1;
  #line 232 
  int emg_12_ret;
  #line 233 
  unsigned long emg_12_size_cnt;
  #line 234 
  int emg_repeat_cnt_main_12_0 = 1;
  #line 235 
  int emg_repeat_cnt_call_12 = 1;
  #line 236 
  int emg_repeat_cnt_main_12_1 = 1;
  #line 238 
  struct emg_struct_character_driver_scenario_fops_wcn36xx_bmps_12 *data = (struct emg_struct_character_driver_scenario_fops_wcn36xx_bmps_12 *)arg0;
  #line 242 
  emg_12_ret = ldv_undef_int();
  #line 243 
  emg_12_container = emg_alias_fops_wcn36xx_bmps;
  #line 244 
  emg_12_ret = ldv_undef_int();
  #line 246 
  __VERIFIER_assume(data->arg0 == emg_alias_fops_wcn36xx_bmps);
  #line 248 
  if (data != (struct emg_struct_character_driver_scenario_fops_wcn36xx_bmps_12 *)0) {
    #line 249 
    emg_12_container = data->arg0;
    #line 250 
    ldv_free((void *)data);
  }
  #line 255 
  emg_12_resource_0 = (struct file *)ldv_xmalloc(520UL);
  #line 256 
  emg_12_size_cnt = (unsigned long)ldv_undef_int();
  #line 260 
  goto emg_main_12;
  #line 264 
  return (void *)0;
  #line 267 
  emg_call_12: 
               #line 267 
  ;
  #line 268 
  if (ldv_undef_int() != 0) {
    #line 269 
    if (ldv_undef_int() != 0) {
      #line 271 
      emg_12_emg_param_1_0 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 271 
      emg_12_emg_param_1_0 = emg_12_emg_param_1_0;
      #line 272 
      emg_12_emg_param_3_1 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 272 
      emg_12_emg_param_3_1 = emg_12_emg_param_3_1;
      #line 276 
      emg_wrapper_read_file_bool_bmps(emg_12_resource_0,emg_12_emg_param_1_0,emg_12_size_cnt,emg_12_emg_param_3_1);
      #line 280 
      ldv_free((void *)emg_12_emg_param_1_0);
      #line 281 
      ldv_free((void *)emg_12_emg_param_3_1);
    }
    else {
      #line 290 
      __VERIFIER_assume(emg_12_size_cnt <= 2147479552UL);
      #line 291 
      emg_12_emg_param_1_2 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 291 
      emg_12_emg_param_1_2 = emg_12_emg_param_1_2;
      #line 292 
      emg_12_emg_param_3_3 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 292 
      emg_12_emg_param_3_3 = emg_12_emg_param_3_3;
      #line 296 
      emg_wrapper_write_file_bool_bmps(emg_12_resource_0,emg_12_emg_param_1_2,emg_12_size_cnt,emg_12_emg_param_3_3);
      #line 300 
      ldv_free((void *)emg_12_emg_param_1_2);
      #line 301 
      ldv_free((void *)emg_12_emg_param_3_3);
    }
    #line 305 
    if (emg_repeat_cnt_call_12 > 0) {
      #line 306 
      emg_repeat_cnt_call_12 --;
      #line 308 
      goto emg_call_12;
    }
    else 
         #line 310 
         __VERIFIER_assume(0);
  }
  else {
    #line 316 
    if (emg_12_container->release != (int (*)(struct inode *, struct file *))0) 
      #line 317 
      (*(emg_12_container->release))(emg_12_resource_1,emg_12_resource_0);
    #line 321 
    if (emg_repeat_cnt_main_12_0 > 0) {
      #line 322 
      emg_repeat_cnt_main_12_0 --;
      #line 324 
      goto emg_main_12;
    }
    else 
         #line 326 
         __VERIFIER_assume(0);
  }
  #line 332 
  return (void *)0;
  #line 335 
  emg_main_12: 
               #line 335 
  ;
  #line 336 
  if (ldv_undef_int() != 0) {
    #line 338 
    emg_12_ret = simple_open(emg_12_resource_1,emg_12_resource_0);
    #line 343 
    emg_12_ret = ldv_filter_err_code(emg_12_ret);
    #line 346 
    if (ldv_undef_int() != 0) {
      #line 348 
      __VERIFIER_assume(emg_12_ret == 0);
      #line 352 
      goto emg_call_12;
    }
    else {
      #line 357 
      __VERIFIER_assume(emg_12_ret != 0);
      #line 360 
      if (emg_repeat_cnt_main_12_1 > 0) {
        #line 361 
        emg_repeat_cnt_main_12_1 --;
        #line 363 
        goto emg_main_12;
      }
      else 
           #line 365 
           __VERIFIER_assume(0);
    }
  }
  else 
       #line 372 
       ldv_free((void *)emg_12_resource_0);
  #line 380 
  return (void *)0;
}

#line 385  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/wcn36xx/wcn36xx.ko/concurrency safety/emg/0/environment_model.c"
void *emg_file_operations_character_driver_scenario_fops_wcn36xx_dump(void *arg0)
{
  #line 388 
  long (*emg_13_callback)(struct file *, char *, unsigned long , long long *);
  #line 389 
  struct file_operations *emg_13_container;
  #line 390 
  char *emg_13_emg_param_1_0;
  #line 391 
  char *emg_13_emg_param_1_2;
  #line 392 
  long long *emg_13_emg_param_3_1;
  #line 393 
  long long *emg_13_emg_param_3_3;
  #line 394 
  struct file *emg_13_resource_0;
  #line 395 
  struct inode *emg_13_resource_1;
  #line 396 
  int emg_13_ret;
  #line 397 
  unsigned long emg_13_size_cnt;
  #line 398 
  int emg_repeat_cnt_call_13 = 1;
  #line 399 
  int emg_repeat_cnt_main_13_0 = 1;
  #line 400 
  int emg_repeat_cnt_main_13_1 = 1;
  #line 402 
  struct emg_struct_character_driver_scenario_fops_wcn36xx_bmps_12 *data = (struct emg_struct_character_driver_scenario_fops_wcn36xx_bmps_12 *)arg0;
  #line 406 
  emg_13_ret = ldv_undef_int();
  #line 407 
  emg_13_container = emg_alias_fops_wcn36xx_dump;
  #line 408 
  emg_13_ret = ldv_undef_int();
  #line 410 
  __VERIFIER_assume(data->arg0 == emg_alias_fops_wcn36xx_dump);
  #line 412 
  if (data != (struct emg_struct_character_driver_scenario_fops_wcn36xx_bmps_12 *)0) {
    #line 413 
    emg_13_container = data->arg0;
    #line 414 
    ldv_free((void *)data);
  }
  #line 419 
  emg_13_resource_0 = (struct file *)ldv_xmalloc(520UL);
  #line 420 
  emg_13_size_cnt = (unsigned long)ldv_undef_int();
  #line 424 
  goto emg_main_13;
  #line 428 
  return (void *)0;
  #line 431 
  emg_call_13: 
               #line 431 
  ;
  #line 432 
  if (ldv_undef_int() != 0) {
    #line 433 
    if (ldv_undef_int() != 0) {
      #line 435 
      emg_13_emg_param_1_0 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 435 
      emg_13_emg_param_1_0 = emg_13_emg_param_1_0;
      #line 436 
      emg_13_emg_param_3_1 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 436 
      emg_13_emg_param_3_1 = emg_13_emg_param_3_1;
      #line 440 
      if (emg_13_callback != (long (*)(struct file *, char *, unsigned long , long long *))0) 
        #line 441 
        (*emg_13_callback)(emg_13_resource_0,emg_13_emg_param_1_0,emg_13_size_cnt,emg_13_emg_param_3_1);
      #line 446 
      ldv_free((void *)emg_13_emg_param_1_0);
      #line 447 
      ldv_free((void *)emg_13_emg_param_3_1);
    }
    else {
      #line 456 
      __VERIFIER_assume(emg_13_size_cnt <= 2147479552UL);
      #line 457 
      emg_13_emg_param_1_2 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 457 
      emg_13_emg_param_1_2 = emg_13_emg_param_1_2;
      #line 458 
      emg_13_emg_param_3_3 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 458 
      emg_13_emg_param_3_3 = emg_13_emg_param_3_3;
      #line 462 
      emg_wrapper_write_file_dump(emg_13_resource_0,emg_13_emg_param_1_2,emg_13_size_cnt,emg_13_emg_param_3_3);
      #line 466 
      ldv_free((void *)emg_13_emg_param_1_2);
      #line 467 
      ldv_free((void *)emg_13_emg_param_3_3);
    }
    #line 471 
    if (emg_repeat_cnt_call_13 > 0) {
      #line 472 
      emg_repeat_cnt_call_13 --;
      #line 474 
      goto emg_call_13;
    }
    else 
         #line 476 
         __VERIFIER_assume(0);
  }
  else {
    #line 482 
    if (emg_13_container->release != (int (*)(struct inode *, struct file *))0) 
      #line 483 
      (*(emg_13_container->release))(emg_13_resource_1,emg_13_resource_0);
    #line 487 
    if (emg_repeat_cnt_main_13_0 > 0) {
      #line 488 
      emg_repeat_cnt_main_13_0 --;
      #line 490 
      goto emg_main_13;
    }
    else 
         #line 492 
         __VERIFIER_assume(0);
  }
  #line 498 
  return (void *)0;
  #line 501 
  emg_main_13: 
               #line 501 
  ;
  #line 502 
  if (ldv_undef_int() != 0) {
    #line 504 
    emg_13_ret = simple_open(emg_13_resource_1,emg_13_resource_0);
    #line 509 
    emg_13_ret = ldv_filter_err_code(emg_13_ret);
    #line 512 
    if (ldv_undef_int() != 0) {
      #line 514 
      __VERIFIER_assume(emg_13_ret == 0);
      #line 518 
      goto emg_call_13;
    }
    else {
      #line 523 
      __VERIFIER_assume(emg_13_ret != 0);
      #line 526 
      if (emg_repeat_cnt_main_13_1 > 0) {
        #line 527 
        emg_repeat_cnt_main_13_1 --;
        #line 529 
        goto emg_main_13;
      }
      else 
           #line 531 
           __VERIFIER_assume(0);
    }
  }
  else 
       #line 538 
       ldv_free((void *)emg_13_resource_0);
  #line 546 
  return (void *)0;
}

#line 551  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/wcn36xx/wcn36xx.ko/concurrency safety/emg/0/environment_model.c"
void *emg_ieee80211_ieee80211_scenario_wcn36xx_ops(void *arg0)
{
  #line 554 
  struct ieee80211_vif *emg_14_emg_param_1_0;
  #line 555 
  struct ieee80211_vif *emg_14_emg_param_1_1;
  #line 556 
  struct ieee80211_vif *emg_14_emg_param_1_11;
  #line 557 
  struct netdev_hw_addr_list *emg_14_emg_param_1_13;
  #line 558 
  struct ieee80211_vif *emg_14_emg_param_1_14;
  #line 559 
  enum set_key_cmd *emg_14_emg_param_1_15;
  #line 560 
  unsigned int emg_14_emg_param_1_19;
  #line 561 
  struct ieee80211_vif *emg_14_emg_param_1_20;
  #line 562 
  struct ieee80211_vif *emg_14_emg_param_1_22;
  #line 563 
  struct ieee80211_vif *emg_14_emg_param_1_24;
  #line 564 
  struct ieee80211_tx_control *emg_14_emg_param_1_27;
  #line 565 
  struct cfg80211_wowlan *emg_14_emg_param_1_29;
  #line 566 
  struct ieee80211_vif *emg_14_emg_param_1_3;
  #line 567 
  struct ieee80211_vif *emg_14_emg_param_1_6;
  #line 568 
  unsigned int emg_14_emg_param_1_7;
  #line 569 
  unsigned int emg_14_emg_param_1_8;
  #line 570 
  struct ieee80211_scan_request *emg_14_emg_param_2_12;
  #line 571 
  struct ieee80211_vif *emg_14_emg_param_2_16;
  #line 572 
  struct ieee80211_ampdu_params *emg_14_emg_param_2_2;
  #line 573 
  struct ieee80211_sta *emg_14_emg_param_2_21;
  #line 574 
  struct ieee80211_sta *emg_14_emg_param_2_23;
  #line 575 
  void *emg_14_emg_param_2_25;
  #line 576 
  struct sk_buff *emg_14_emg_param_2_28;
  #line 577 
  struct ieee80211_bss_conf *emg_14_emg_param_2_4;
  #line 578 
  unsigned int *emg_14_emg_param_2_9;
  #line 579 
  unsigned long long emg_14_emg_param_3_10;
  #line 580 
  struct ieee80211_sta *emg_14_emg_param_3_17;
  #line 581 
  int emg_14_emg_param_3_26;
  #line 582 
  unsigned int emg_14_emg_param_3_5;
  #line 583 
  struct ieee80211_key_conf *emg_14_emg_param_4_18;
  #line 584 
  struct ieee80211_hw *emg_14_resource;
  #line 585 
  int emg_14_ret;
  #line 586 
  int emg_repeat_cnt_main_14_1 = 1;
  #line 587 
  int emg_repeat_cnt_started_14_1 = 1;
  #line 588 
  int emg_repeat_cnt_main_14_0 = 1;
  #line 589 
  int emg_repeat_cnt_started_14_0 = 1;
  #line 591 
  struct emg_struct_ieee80211_scenario_wcn36xx_ops_14 *data = (struct emg_struct_ieee80211_scenario_wcn36xx_ops_14 *)arg0;
  #line 595 
  emg_14_ret = ldv_undef_int();
  #line 596 
  emg_14_ret = ldv_undef_int();
  #line 599 
  if (data != (struct emg_struct_ieee80211_scenario_wcn36xx_ops_14 *)0) {
    #line 600 
    emg_14_resource = data->arg0;
    #line 601 
    ldv_free((void *)data);
  }
  #line 606 
  goto emg_main_14;
  #line 610 
  return (void *)0;
  #line 613 
  emg_main_14: 
               #line 613 
  ;
  #line 614 
  if (ldv_undef_int() != 0) {
    #line 617 
    rtnl_lock();
    #line 621 
    emg_14_ret = emg_wrapper_wcn36xx_start(emg_14_resource);
    #line 626 
    emg_14_ret = ldv_filter_err_code(emg_14_ret);
    #line 627 
    rtnl_unlock();
    #line 630 
    if (ldv_undef_int() != 0) {
      #line 632 
      __VERIFIER_assume(emg_14_ret == 0);
      #line 636 
      goto emg_started_14;
    }
    else 
         #line 641 
         __VERIFIER_assume(emg_14_ret != 0);
    #line 645 
    if (emg_repeat_cnt_main_14_1 > 0) {
      #line 646 
      emg_repeat_cnt_main_14_1 --;
      #line 648 
      goto emg_main_14;
    }
    else 
         #line 650 
         __VERIFIER_assume(0);
  }
  #line 660 
  return (void *)0;
  #line 663 
  emg_started_14: 
                  #line 663 
  ;
  #line 664 
  switch (ldv_undef_int()) {
    #line 665 
    case 0: 
            #line 665 
    ;
    #line 667 
    emg_14_emg_param_1_27 = (struct ieee80211_tx_control *)ldv_xmalloc_unknown_size(0UL);
    #line 667 
    emg_14_emg_param_1_27 = emg_14_emg_param_1_27;
    #line 668 
    emg_14_emg_param_2_28 = (struct sk_buff *)ldv_xmalloc_unknown_size(0UL);
    #line 668 
    emg_14_emg_param_2_28 = emg_14_emg_param_2_28;
    #line 672 
    emg_wrapper_wcn36xx_tx(emg_14_resource,emg_14_emg_param_1_27,emg_14_emg_param_2_28);
    #line 676 
    ldv_free((void *)emg_14_emg_param_1_27);
    #line 677 
    ldv_free((void *)emg_14_emg_param_2_28);
    #line 679 
    break;
    #line 681 
    case 1: 
            #line 681 
    ;
    #line 683 
    emg_14_emg_param_1_24 = (struct ieee80211_vif *)ldv_xmalloc_unknown_size(0UL);
    #line 683 
    emg_14_emg_param_1_24 = emg_14_emg_param_1_24;
    #line 684 
    emg_14_emg_param_2_25 = ldv_xmalloc_unknown_size(0UL);
    #line 684 
    emg_14_emg_param_2_25 = emg_14_emg_param_2_25;
    #line 688 
    wcn36xx_tm_cmd(emg_14_resource,emg_14_emg_param_1_24,emg_14_emg_param_2_25,emg_14_emg_param_3_26);
    #line 692 
    ldv_free((void *)emg_14_emg_param_1_24);
    #line 693 
    ldv_free(emg_14_emg_param_2_25);
    #line 695 
    break;
    #line 697 
    case 2: 
            #line 697 
    ;
    #line 699 
    emg_14_emg_param_1_22 = (struct ieee80211_vif *)ldv_xmalloc_unknown_size(0UL);
    #line 699 
    emg_14_emg_param_1_22 = emg_14_emg_param_1_22;
    #line 700 
    emg_14_emg_param_2_23 = (struct ieee80211_sta *)ldv_xmalloc_unknown_size(0UL);
    #line 700 
    emg_14_emg_param_2_23 = emg_14_emg_param_2_23;
    #line 704 
    emg_wrapper_wcn36xx_sta_remove(emg_14_resource,emg_14_emg_param_1_22,emg_14_emg_param_2_23);
    #line 708 
    ldv_free((void *)emg_14_emg_param_1_22);
    #line 709 
    ldv_free((void *)emg_14_emg_param_2_23);
    #line 711 
    break;
    #line 713 
    case 3: 
            #line 713 
    ;
    #line 715 
    emg_14_emg_param_1_20 = (struct ieee80211_vif *)ldv_xmalloc_unknown_size(0UL);
    #line 715 
    emg_14_emg_param_1_20 = emg_14_emg_param_1_20;
    #line 716 
    emg_14_emg_param_2_21 = (struct ieee80211_sta *)ldv_xmalloc_unknown_size(0UL);
    #line 716 
    emg_14_emg_param_2_21 = emg_14_emg_param_2_21;
    #line 720 
    emg_wrapper_wcn36xx_sta_add(emg_14_resource,emg_14_emg_param_1_20,emg_14_emg_param_2_21);
    #line 724 
    ldv_free((void *)emg_14_emg_param_1_20);
    #line 725 
    ldv_free((void *)emg_14_emg_param_2_21);
    #line 727 
    break;
    #line 729 
    case 4: 
            #line 729 
    ;
    #line 731 
    emg_wrapper_wcn36xx_set_rts_threshold(emg_14_resource,emg_14_emg_param_1_19);
    #line 733 
    break;
    #line 735 
    case 5: 
            #line 735 
    ;
    #line 737 
    emg_14_emg_param_1_15 = (enum set_key_cmd *)ldv_xmalloc_unknown_size(0UL);
    #line 737 
    emg_14_emg_param_1_15 = emg_14_emg_param_1_15;
    #line 738 
    emg_14_emg_param_2_16 = (struct ieee80211_vif *)ldv_xmalloc_unknown_size(0UL);
    #line 738 
    emg_14_emg_param_2_16 = emg_14_emg_param_2_16;
    #line 739 
    emg_14_emg_param_3_17 = (struct ieee80211_sta *)ldv_xmalloc_unknown_size(0UL);
    #line 739 
    emg_14_emg_param_3_17 = emg_14_emg_param_3_17;
    #line 740 
    emg_14_emg_param_4_18 = (struct ieee80211_key_conf *)ldv_xmalloc_unknown_size(0UL);
    #line 740 
    emg_14_emg_param_4_18 = emg_14_emg_param_4_18;
    #line 744 
    emg_wrapper_wcn36xx_set_key(emg_14_resource,*emg_14_emg_param_1_15,emg_14_emg_param_2_16,emg_14_emg_param_3_17,emg_14_emg_param_4_18);
    #line 748 
    ldv_free((void *)emg_14_emg_param_1_15);
    #line 749 
    ldv_free((void *)emg_14_emg_param_2_16);
    #line 750 
    ldv_free((void *)emg_14_emg_param_3_17);
    #line 751 
    ldv_free((void *)emg_14_emg_param_4_18);
    #line 753 
    break;
    #line 755 
    case 6: 
            #line 755 
    ;
    #line 757 
    emg_14_emg_param_1_14 = (struct ieee80211_vif *)ldv_xmalloc_unknown_size(0UL);
    #line 757 
    emg_14_emg_param_1_14 = emg_14_emg_param_1_14;
    #line 761 
    emg_wrapper_wcn36xx_remove_interface(emg_14_resource,emg_14_emg_param_1_14);
    #line 765 
    ldv_free((void *)emg_14_emg_param_1_14);
    #line 767 
    break;
    #line 769 
    case 7: 
            #line 769 
    ;
    #line 771 
    emg_14_emg_param_1_13 = (struct netdev_hw_addr_list *)ldv_xmalloc_unknown_size(0UL);
    #line 771 
    emg_14_emg_param_1_13 = emg_14_emg_param_1_13;
    #line 775 
    emg_wrapper_wcn36xx_prepare_multicast(emg_14_resource,emg_14_emg_param_1_13);
    #line 779 
    ldv_free((void *)emg_14_emg_param_1_13);
    #line 781 
    break;
    #line 783 
    case 8: 
            #line 783 
    ;
    #line 785 
    emg_14_emg_param_1_11 = (struct ieee80211_vif *)ldv_xmalloc_unknown_size(0UL);
    #line 785 
    emg_14_emg_param_1_11 = emg_14_emg_param_1_11;
    #line 786 
    emg_14_emg_param_2_12 = (struct ieee80211_scan_request *)ldv_xmalloc_unknown_size(0UL);
    #line 786 
    emg_14_emg_param_2_12 = emg_14_emg_param_2_12;
    #line 790 
    emg_wrapper_wcn36xx_hw_scan(emg_14_resource,emg_14_emg_param_1_11,emg_14_emg_param_2_12);
    #line 794 
    ldv_free((void *)emg_14_emg_param_1_11);
    #line 795 
    ldv_free((void *)emg_14_emg_param_2_12);
    #line 797 
    break;
    #line 799 
    case 9: 
            #line 799 
    ;
    #line 801 
    emg_14_emg_param_2_9 = (unsigned int *)ldv_xmalloc_unknown_size(0UL);
    #line 801 
    emg_14_emg_param_2_9 = emg_14_emg_param_2_9;
    #line 805 
    emg_wrapper_wcn36xx_configure_filter(emg_14_resource,emg_14_emg_param_1_8,emg_14_emg_param_2_9,emg_14_emg_param_3_10);
    #line 809 
    ldv_free((void *)emg_14_emg_param_2_9);
    #line 811 
    break;
    #line 813 
    case 10: 
             #line 813 
    ;
    #line 815 
    emg_wrapper_wcn36xx_config(emg_14_resource,emg_14_emg_param_1_7);
    #line 817 
    break;
    #line 819 
    case 11: 
             #line 819 
    ;
    #line 821 
    emg_14_emg_param_1_6 = (struct ieee80211_vif *)ldv_xmalloc_unknown_size(0UL);
    #line 821 
    emg_14_emg_param_1_6 = emg_14_emg_param_1_6;
    #line 825 
    emg_wrapper_wcn36xx_cancel_hw_scan(emg_14_resource,emg_14_emg_param_1_6);
    #line 829 
    ldv_free((void *)emg_14_emg_param_1_6);
    #line 831 
    break;
    #line 833 
    case 12: 
             #line 833 
    ;
    #line 835 
    emg_14_emg_param_1_3 = (struct ieee80211_vif *)ldv_xmalloc_unknown_size(0UL);
    #line 835 
    emg_14_emg_param_1_3 = emg_14_emg_param_1_3;
    #line 836 
    emg_14_emg_param_2_4 = (struct ieee80211_bss_conf *)ldv_xmalloc_unknown_size(0UL);
    #line 836 
    emg_14_emg_param_2_4 = emg_14_emg_param_2_4;
    #line 840 
    emg_wrapper_wcn36xx_bss_info_changed(emg_14_resource,emg_14_emg_param_1_3,emg_14_emg_param_2_4,emg_14_emg_param_3_5);
    #line 844 
    ldv_free((void *)emg_14_emg_param_1_3);
    #line 845 
    ldv_free((void *)emg_14_emg_param_2_4);
    #line 847 
    break;
    #line 849 
    case 13: 
             #line 849 
    ;
    #line 851 
    emg_14_emg_param_1_1 = (struct ieee80211_vif *)ldv_xmalloc_unknown_size(0UL);
    #line 851 
    emg_14_emg_param_1_1 = emg_14_emg_param_1_1;
    #line 852 
    emg_14_emg_param_2_2 = (struct ieee80211_ampdu_params *)ldv_xmalloc_unknown_size(0UL);
    #line 852 
    emg_14_emg_param_2_2 = emg_14_emg_param_2_2;
    #line 856 
    emg_wrapper_wcn36xx_ampdu_action(emg_14_resource,emg_14_emg_param_1_1,emg_14_emg_param_2_2);
    #line 860 
    ldv_free((void *)emg_14_emg_param_1_1);
    #line 861 
    ldv_free((void *)emg_14_emg_param_2_2);
    #line 863 
    break;
    #line 865 
    case 14: 
             #line 865 
    ;
    #line 867 
    emg_14_emg_param_1_29 = (struct cfg80211_wowlan *)ldv_xmalloc_unknown_size(0UL);
    #line 867 
    emg_14_emg_param_1_29 = emg_14_emg_param_1_29;
    #line 871 
    emg_wrapper_wcn36xx_suspend(emg_14_resource,emg_14_emg_param_1_29);
    #line 875 
    ldv_free((void *)emg_14_emg_param_1_29);
    #line 879 
    emg_wrapper_wcn36xx_resume(emg_14_resource);
    #line 882 
    if (emg_repeat_cnt_started_14_1 > 0) {
      #line 883 
      emg_repeat_cnt_started_14_1 --;
      #line 885 
      goto emg_started_14;
    }
    else 
         #line 887 
         __VERIFIER_assume(0);
    #line 891 
    break;
    #line 893 
    case 15: 
             #line 893 
    ;
    #line 895 
    emg_14_emg_param_1_0 = (struct ieee80211_vif *)ldv_xmalloc_unknown_size(0UL);
    #line 895 
    emg_14_emg_param_1_0 = emg_14_emg_param_1_0;
    #line 899 
    emg_wrapper_wcn36xx_add_interface(emg_14_resource,emg_14_emg_param_1_0);
    #line 903 
    ldv_free((void *)emg_14_emg_param_1_0);
    #line 906 
    if (emg_repeat_cnt_started_14_0 > 0) {
      #line 907 
      emg_repeat_cnt_started_14_0 --;
      #line 909 
      goto emg_started_14;
    }
    else 
         #line 911 
         __VERIFIER_assume(0);
    #line 915 
    break;
    #line 917 
    case 16: 
             #line 917 
    ;
    #line 920 
    rtnl_lock();
    #line 924 
    emg_wrapper_wcn36xx_stop(emg_14_resource);
    #line 929 
    rtnl_unlock();
    #line 932 
    if (emg_repeat_cnt_main_14_0 > 0) {
      #line 933 
      emg_repeat_cnt_main_14_0 --;
      #line 935 
      goto emg_main_14;
    }
    else 
         #line 937 
         __VERIFIER_assume(0);
    #line 941 
    break;
    #line 943 
    default: 
             #line 943 
    ;
    #line 943 
    __VERIFIER_assume(0);
  }
  #line 946 
  return (void *)0;
}

#line 951  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/wcn36xx/wcn36xx.ko/concurrency safety/emg/0/environment_model.c"
void *emg_interrupt_interrupt_scenario_wcn36xx_irq_rx_ready(void *arg0)
{
  #line 954 
  enum irqreturn (*emg_15_callback)(int , void *);
  #line 955 
  void *emg_15_data;
  #line 956 
  int emg_15_line;
  #line 957 
  enum irqreturn emg_15_ret_val;
  #line 958 
  enum irqreturn (*emg_15_thread)(int , void *);
  #line 960 
  struct emg_struct_interrupt_scenario_wcn36xx_irq_rx_ready_15 *data = (struct emg_struct_interrupt_scenario_wcn36xx_irq_rx_ready_15 *)arg0;
  #line 963 
  emg_15_callback = & emg_wrapper_wcn36xx_irq_rx_ready;
  #line 966 
  if (data != (struct emg_struct_interrupt_scenario_wcn36xx_irq_rx_ready_15 *)0) {
    #line 967 
    emg_15_line = data->arg0;
    #line 968 
    emg_15_callback = data->arg1;
    #line 969 
    emg_15_thread = data->arg2;
    #line 970 
    emg_15_data = data->arg3;
    #line 971 
    ldv_free((void *)data);
  }
  #line 977 
  ldv_switch_to_interrupt_context();
  #line 981 
  emg_15_ret_val = emg_wrapper_wcn36xx_irq_rx_ready(emg_15_line,emg_15_data);
  #line 986 
  ldv_switch_to_process_context();
  #line 989 
  if (ldv_undef_int() != 0) {
    #line 991 
    __VERIFIER_assume(emg_15_ret_val == (unsigned int)IRQ_WAKE_THREAD);
    #line 995 
    if (emg_15_thread != (enum irqreturn (*)(int , void *))0) 
                                                              #line 996 
                                                              (*emg_15_thread)(emg_15_line,emg_15_data);
  }
  else 
       #line 1001 
       __VERIFIER_assume(emg_15_ret_val != (unsigned int)IRQ_WAKE_THREAD);
  #line 1009 
  return (void *)0;
}

#line 1014  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/wcn36xx/wcn36xx.ko/concurrency safety/emg/0/environment_model.c"
void *emg_interrupt_interrupt_scenario_wcn36xx_irq_tx_complete(void *arg0)
{
  #line 1017 
  enum irqreturn (*emg_16_callback)(int , void *);
  #line 1018 
  void *emg_16_data;
  #line 1019 
  int emg_16_line;
  #line 1020 
  enum irqreturn emg_16_ret_val;
  #line 1021 
  enum irqreturn (*emg_16_thread)(int , void *);
  #line 1023 
  struct emg_struct_interrupt_scenario_wcn36xx_irq_rx_ready_15 *data = (struct emg_struct_interrupt_scenario_wcn36xx_irq_rx_ready_15 *)arg0;
  #line 1026 
  emg_16_callback = & emg_wrapper_wcn36xx_irq_tx_complete;
  #line 1029 
  if (data != (struct emg_struct_interrupt_scenario_wcn36xx_irq_rx_ready_15 *)0) {
    #line 1030 
    emg_16_line = data->arg0;
    #line 1031 
    emg_16_callback = data->arg1;
    #line 1032 
    emg_16_thread = data->arg2;
    #line 1033 
    emg_16_data = data->arg3;
    #line 1034 
    ldv_free((void *)data);
  }
  #line 1040 
  ldv_switch_to_interrupt_context();
  #line 1044 
  emg_16_ret_val = emg_wrapper_wcn36xx_irq_tx_complete(emg_16_line,emg_16_data);
  #line 1049 
  ldv_switch_to_process_context();
  #line 1052 
  if (ldv_undef_int() != 0) {
    #line 1054 
    __VERIFIER_assume(emg_16_ret_val == (unsigned int)IRQ_WAKE_THREAD);
    #line 1058 
    if (emg_16_thread != (enum irqreturn (*)(int , void *))0) 
                                                              #line 1059 
                                                              (*emg_16_thread)(emg_16_line,emg_16_data);
  }
  else 
       #line 1064 
       __VERIFIER_assume(emg_16_ret_val != (unsigned int)IRQ_WAKE_THREAD);
  #line 1072 
  return (void *)0;
}

#line 1077  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/wcn36xx/wcn36xx.ko/concurrency safety/emg/0/environment_model.c"
void *emg_platform_platform_instance_wcn36xx_driver(void *arg0)
{
  #line 1080 
  struct platform_driver *emg_17_container;
  #line 1081 
  struct pm_message *emg_17_emg_param_1_0;
  #line 1082 
  int emg_17_probed;
  #line 1083 
  struct platform_device *emg_17_resource;
  #line 1084 
  int emg_repeat_cnt_main_17_1 = 1;
  #line 1085 
  int emg_repeat_cnt_call_17 = 1;
  #line 1086 
  int emg_repeat_cnt_main_17_0 = 1;
  #line 1088 
  struct emg_struct_platform_instance_wcn36xx_driver_17 *data = (struct emg_struct_platform_instance_wcn36xx_driver_17 *)arg0;
  #line 1092 
  emg_17_probed = 1;
  #line 1093 
  emg_17_container = emg_alias_wcn36xx_driver;
  #line 1094 
  emg_17_probed = 1;
  #line 1096 
  __VERIFIER_assume(data->arg0 == emg_alias_wcn36xx_driver);
  #line 1098 
  if (data != (struct emg_struct_platform_instance_wcn36xx_driver_17 *)0) {
    #line 1099 
    emg_17_container = data->arg0;
    #line 1100 
    ldv_free((void *)data);
  }
  #line 1105 
  emg_17_resource = (struct platform_device *)ldv_xmalloc(1632UL);
  #line 1106 
  emg_17_resource->id_entry = emg_17_container->id_table;
  #line 1107 
  emg_17_resource->dev.platform_data = ldv_xmalloc_unknown_size(0UL);
  #line 1111 
  goto emg_main_17;
  #line 1115 
  return (void *)0;
  #line 1118 
  emg_call_17: 
               #line 1118 
  ;
  #line 1119 
  if (ldv_undef_int() != 0) {
    #line 1120 
    switch (ldv_undef_int()) {
      #line 1121 
      case 0: 
              #line 1121 
      ;
      #line 1123 
      emg_17_emg_param_1_0 = (struct pm_message *)ldv_xmalloc_unknown_size(0UL);
      #line 1123 
      emg_17_emg_param_1_0 = emg_17_emg_param_1_0;
      #line 1127 
      if (emg_17_container->suspend != (int (*)(struct platform_device *, pm_message_t ))0) 
        #line 1128 
        (*(emg_17_container->suspend))(emg_17_resource,*emg_17_emg_param_1_0);
      #line 1133 
      ldv_free((void *)emg_17_emg_param_1_0);
      #line 1137 
      if (emg_17_container->resume != (int (*)(struct platform_device *))0) 
        #line 1138 
        (*(emg_17_container->resume))(emg_17_resource);
      #line 1141 
      break;
      #line 1143 
      case 1: 
              #line 1143 
      ;
      #line 1151 
      break;
      #line 1153 
      case 2: 
              #line 1153 
      ;
      #line 1156 
      break;
      #line 1158 
      default: 
               #line 1158 
      ;
      #line 1158 
      __VERIFIER_assume(0);
    }
    #line 1161 
    if (emg_repeat_cnt_call_17 > 0) {
      #line 1162 
      emg_repeat_cnt_call_17 --;
      #line 1164 
      goto emg_call_17;
    }
    else 
         #line 1166 
         __VERIFIER_assume(0);
  }
  else {
    #line 1172 
    if (emg_17_container->shutdown != (void (*)(struct platform_device *))0) 
      #line 1173 
      (*(emg_17_container->shutdown))(emg_17_resource);
    #line 1178 
    emg_wrapper_wcn36xx_remove(emg_17_resource);
    #line 1182 
    emg_17_probed = 1;
    #line 1185 
    if (emg_repeat_cnt_main_17_0 > 0) {
      #line 1186 
      emg_repeat_cnt_main_17_0 --;
      #line 1188 
      goto emg_main_17;
    }
    else 
         #line 1190 
         __VERIFIER_assume(0);
  }
  #line 1196 
  return (void *)0;
  #line 1199 
  emg_main_17: 
               #line 1199 
  ;
  #line 1200 
  if (ldv_undef_int() != 0) {
    #line 1203 
    ldv_pre_probe();
    #line 1207 
    emg_17_probed = emg_wrapper_wcn36xx_probe(emg_17_resource);
    #line 1212 
    emg_17_probed = ldv_post_probe(emg_17_probed);
    #line 1215 
    if (ldv_undef_int() != 0) {
      #line 1217 
      __VERIFIER_assume(emg_17_probed == 0);
      #line 1221 
      goto emg_call_17;
    }
    else {
      #line 1226 
      __VERIFIER_assume(emg_17_probed != 0);
      #line 1229 
      if (emg_repeat_cnt_main_17_1 > 0) {
        #line 1230 
        emg_repeat_cnt_main_17_1 --;
        #line 1232 
        goto emg_main_17;
      }
      else 
           #line 1234 
           __VERIFIER_assume(0);
    }
  }
  else 
       #line 1241 
       ldv_free((void *)emg_17_resource);
  #line 1249 
  return (void *)0;
}

#line 1254  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/wcn36xx/wcn36xx.ko/concurrency safety/emg/0/environment_model.c"
int emg___platform_driver_register(struct platform_driver *arg0, struct module *arg1)
{
  #line 1257 
  struct platform_driver *emg_2_platform_driver;
  #line 1259 
  emg_2_platform_driver = emg_alias_wcn36xx_driver;
  #line 1260 
  if (ldv_undef_int() != 0) {
    #line 1262 
    emg_2_platform_driver = arg0;
    #line 1266 
    emg_dispatch_register_2(emg_2_platform_driver);
    #line 1270 
    return 0;
  }
  else {
    #line 1274 
    return ldv_undef_int_negative();
  }
}

#line 1282  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/wcn36xx/wcn36xx.ko/concurrency safety/emg/0/environment_model.c"
struct dentry *emg_debugfs_create_dir(char *arg0, struct dentry *arg1)
{
  #line 1285 
  struct dentry *emg_3_dentry;
  #line 1286 
  struct inode *emg_3_inode;
  #line 1288 
  if (ldv_undef_int() != 0) {
    #line 1290 
    emg_3_dentry = (struct dentry *)ldv_xmalloc(320UL);
    #line 1291 
    emg_3_inode = (struct inode *)ldv_xmalloc(1072UL);
    #line 1292 
    emg_3_inode->i_mode = (unsigned short)16877U;
    #line 1293 
    emg_3_dentry->d_parent = arg1;
    #line 1294 
    emg_3_dentry->d_inode = emg_3_inode;
    #line 1295 
    return emg_3_dentry;
  }
  else {
    #line 1299 
    return (struct dentry *)ERR_PTR(-19L);
  }
}

#line 1307  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/wcn36xx/wcn36xx.ko/concurrency safety/emg/0/environment_model.c"
struct dentry *emg_debugfs_create_file(char *arg0, unsigned short arg1, struct dentry *arg2, void *arg3, struct file_operations *arg4)
{
  #line 1310 
  struct dentry *emg_4_dentry;
  #line 1311 
  struct file_operations *emg_4_file_operations;
  #line 1312 
  struct inode *emg_4_inode;
  #line 1314 
  if (ldv_undef_int() != 0) {
    #line 1316 
    emg_4_dentry = (struct dentry *)ldv_xmalloc(320UL);
    #line 1317 
    emg_4_inode = (struct inode *)ldv_xmalloc(1072UL);
    #line 1318 
    emg_4_inode->i_mode = arg1;
    #line 1319 
    emg_4_dentry->d_parent = arg2;
    #line 1320 
    emg_4_inode->i_private = arg3;
    #line 1321 
    emg_4_file_operations = arg4;
    #line 1322 
    emg_4_dentry->d_inode = emg_4_inode;
    #line 1323 
    ldv_save_allocated_memory_to_list((void *)emg_4_dentry);
    #line 1327 
    emg_dispatch_register_4(emg_4_file_operations);
    #line 1331 
    return emg_4_dentry;
  }
  else {
    #line 1335 
    return (struct dentry *)ERR_PTR(-19L);
  }
}

#line 1343  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/wcn36xx/wcn36xx.ko/concurrency safety/emg/0/environment_model.c"
void *emg_free_irq(unsigned int arg0, void *arg1)
{
  #line 1346 
  int emg_5_line;
  #line 1349 
  emg_5_line = (int)arg0;
  #line 1353 
  emg_dispatch_irq_deregister_5(emg_5_line);
  #line 1354 
  ;
  #line 1354 
  return (void *)0;
}

#line 1360  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/wcn36xx/wcn36xx.ko/concurrency safety/emg/0/environment_model.c"
struct ieee80211_hw *emg_ieee80211_alloc_hw(unsigned long arg0, struct ieee80211_ops *arg1)
{
  #line 1363 
  struct ieee80211_hw *emg_6_ieee80211_hw;
  #line 1364 
  struct ieee80211_ops *emg_6_ieee80211_ops;
  #line 1366 
  emg_6_ieee80211_ops = emg_alias_wcn36xx_ops;
  #line 1367 
  if (ldv_undef_int() != 0) {
    #line 1369 
    emg_6_ieee80211_ops = arg1;
    #line 1370 
    emg_6_ieee80211_hw = (struct ieee80211_hw *)ldv_xmalloc(184UL);
    #line 1374 
    emg_dispatch_register_6(emg_6_ieee80211_hw);
    #line 1378 
    return emg_6_ieee80211_hw;
  }
  else 
       #line 1382 
       return (struct ieee80211_hw *)0;
}

#line 1390  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/wcn36xx/wcn36xx.ko/concurrency safety/emg/0/environment_model.c"
void emg_ieee80211_free_hw(struct ieee80211_hw *arg0)
{
  #line 1393 
  struct ieee80211_hw *emg_7_ieee80211_hw;
  #line 1396 
  emg_dispatch_deregister_7(emg_7_ieee80211_hw);
  #line 1400 
  ldv_free((void *)emg_7_ieee80211_hw);
  #line 1403 
  return;
}

#line 1408  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/wcn36xx/wcn36xx.ko/concurrency safety/emg/0/environment_model.c"
void emg_platform_driver_unregister(struct platform_driver *arg0)
{
  #line 1411 
  struct platform_driver *emg_8_platform_driver;
  #line 1413 
  emg_8_platform_driver = emg_alias_wcn36xx_driver;
  #line 1415 
  emg_8_platform_driver = arg0;
  #line 1419 
  emg_dispatch_deregister_8(emg_8_platform_driver);
  #line 1422 
  return;
}

#line 1427  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/wcn36xx/wcn36xx.ko/concurrency safety/emg/0/environment_model.c"
_Bool emg_queue_work(struct workqueue_struct *arg0, struct work_struct *arg1)
{
  #line 1430 
  struct work_struct *emg_9_work_struct;
  #line 1432 
  if (ldv_undef_int() != 0) {
    #line 1434 
    emg_9_work_struct = arg1;
    #line 1438 
    if (emg_9_work_struct->func != (void (*)(struct work_struct *))0) 
      #line 1439 
      (*(emg_9_work_struct->func))(emg_9_work_struct);
    #line 1444 
    return (_Bool)1;
  }
  else 
       #line 1448 
       return (_Bool)0;
}

#line 1456  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/wcn36xx/wcn36xx.ko/concurrency safety/emg/0/environment_model.c"
int emg_request_irq(unsigned int arg0, enum irqreturn (*arg1)(int , void *), unsigned long arg2, char *arg3, void *arg4)
{
  #line 1459 
  enum irqreturn (*emg_10_callback)(int , void *);
  #line 1460 
  void *emg_10_data;
  #line 1461 
  int emg_10_line;
  #line 1462 
  enum irqreturn (*emg_10_thread)(int , void *);
  #line 1464 
  emg_10_callback = & emg_wrapper_wcn36xx_irq_rx_ready;
  #line 1465 
  if (ldv_undef_int() != 0) {
    #line 1467 
    emg_10_line = (int)arg0;
    #line 1468 
    emg_10_callback = arg1;
    #line 1469 
    emg_10_thread = (enum irqreturn (*)(int , void *))0;
    #line 1470 
    emg_10_data = arg4;
    #line 1474 
    emg_dispatch_irq_register_10(emg_10_line,emg_10_callback,emg_10_thread,emg_10_data);
    #line 1478 
    return 0;
  }
  else {
    #line 1482 
    return ldv_undef_int_negative();
  }
}

#line 1490  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/wcn36xx/wcn36xx.ko/concurrency safety/emg/0/environment_model.c"
_Bool emg_schedule_work(struct work_struct *arg0)
{
  #line 1493 
  struct work_struct *emg_11_work_struct;
  #line 1495 
  if (ldv_undef_int() != 0) {
    #line 1497 
    emg_11_work_struct = arg0;
    #line 1501 
    if (emg_11_work_struct->func != (void (*)(struct work_struct *))0) 
      #line 1502 
      (*(emg_11_work_struct->func))(emg_11_work_struct);
    #line 1507 
    return (_Bool)1;
  }
  else 
       #line 1511 
       return (_Bool)0;
}

#line 1519  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/wcn36xx/wcn36xx.ko/concurrency safety/emg/0/environment_model.c"
void *emg_entry_point_insmod(void *arg0)
{
  #line 1522 
  int emg_1_ret;
  #line 1525 
  emg_1_ret = emg_wcn36xx_driver_init();
  #line 1526 
  emg_1_ret = ldv_post_init(emg_1_ret);
  #line 1529 
  if (ldv_undef_int() != 0) {
    #line 1531 
    __VERIFIER_assume(emg_1_ret == 0);
    #line 1535 
    emg_wcn36xx_driver_exit();
  }
  else 
       #line 1539 
       __VERIFIER_assume(emg_1_ret != 0);
  #line 1543 
  return (void *)0;
}

#line 1548  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/wcn36xx/wcn36xx.ko/concurrency safety/emg/0/environment_model.c"
int main(void)
{
  #line 1550 
  ldv_initialize();
  #line 1552 
  emg_entry_point_insmod((void *)0);
  #line 1554 
  return 0;
}

