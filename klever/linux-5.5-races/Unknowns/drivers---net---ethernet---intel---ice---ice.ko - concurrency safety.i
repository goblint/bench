/* Generated by Frama-C */
#line 106  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/compiler_types.h"
typedef signed char __s8;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef unsigned char __u8;
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef short __s16;
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef unsigned short __u16;
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef int __s32;
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef unsigned int __u32;
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef long long __s64;
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef unsigned long long __u64;
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef __s8 s8;
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/int-ll64.h"
typedef __u8 u8;
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/int-ll64.h"
typedef __s16 s16;
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/int-ll64.h"
typedef __u16 u16;
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/int-ll64.h"
typedef __s32 s32;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/int-ll64.h"
typedef __u32 u32;
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/int-ll64.h"
typedef __s64 s64;
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/int-ll64.h"
typedef __u64 u64;
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/uapi/asm/posix_types_64.h"
typedef long __kernel_long_t;
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef unsigned long __kernel_ulong_t;
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef int __kernel_pid_t;
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef unsigned int __kernel_uid32_t;
#line 50  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef unsigned int __kernel_gid32_t;
#line 51  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef __kernel_ulong_t __kernel_size_t;
#line 73  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef __kernel_long_t __kernel_ssize_t;
#line 88  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef long long __kernel_loff_t;
#line 91  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef long long __kernel_time64_t;
#line 92  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef __kernel_long_t __kernel_clock_t;
#line 93  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef int __kernel_timer_t;
#line 94  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef int __kernel_clockid_t;
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef __u16 __le16;
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef __u16 __be16;
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef __u32 __le32;
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef __u32 __be32;
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef __u64 __le64;
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef __u64 __be64;
#line 37  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef __u32 __wsum;
#line 38  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef unsigned int __poll_t;
#line 53  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef u32 __kernel_dev_t;
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_dev_t dev_t;
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef unsigned short umode_t;
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_pid_t pid_t;
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_clockid_t clockid_t;
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef _Bool bool;
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_uid32_t uid_t;
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_gid32_t gid_t;
#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_loff_t loff_t;
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_size_t size_t;
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_ssize_t ssize_t;
#line 103  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef s32 int32_t;
#line 109  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef u32 uint32_t;
#line 115  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef u64 sector_t;
#line 131  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef u64 blkcnt_t;
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef u64 dma_addr_t;
#line 149  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef unsigned int gfp_t;
#line 154  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef unsigned int slab_flags_t;
#line 155  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef unsigned int fmode_t;
#line 156  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef u64 phys_addr_t;
#line 159  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef phys_addr_t resource_size_t;
#line 170  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
struct __anonstruct_atomic_t_6 {
   int counter ;
};
#line 170  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef struct __anonstruct_atomic_t_6 atomic_t;
#line 174  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
struct __anonstruct_atomic64_t_7 {
   s64 counter ;
};
#line 174  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef struct __anonstruct_atomic64_t_7 atomic64_t;
#line 181  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
struct list_head {
   struct list_head *next ;
   struct list_head *prev ;
};
#line 185 
struct hlist_node;
#line 185  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
struct hlist_head {
   struct hlist_node *first ;
};
#line 189  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
struct hlist_node {
   struct hlist_node *next ;
   struct hlist_node **pprev ;
};
#line 219  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
struct callback_head {
   struct callback_head *next ;
   void (*func)(struct callback_head *) ;
} __attribute__((__aligned__(8)));
#line 14  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ice/ice.ko/concurrency safety/0/concurrency safety/weaver/ice_txrx_lib.i.aux"
struct task_struct;
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/export.h"
struct module;
#line 60  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/export.h"
struct kernel_symbol {
   int value_offset ;
   int name_offset ;
   int namespace_offset ;
};
#line 136  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/init.h"
typedef void (*ctor_fn_t)(void);
#line 139 
struct file_system_type;
#line 83  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/printk.h"
struct ctl_table;
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jump_label.h"
struct jump_entry;
#line 87 
struct static_key_mod;
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jump_label.h"
union __anonunion_8 {
   unsigned long type ;
   struct jump_entry *entries ;
   struct static_key_mod *next ;
};
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jump_label.h"
struct static_key {
   atomic_t enabled ;
   union __anonunion_8 __anonCompField_static_key_4 ;
};
#line 122  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jump_label.h"
struct jump_entry {
   s32 code ;
   s32 target ;
   long key ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dynamic_debug.h"
struct device;
#line 65 
struct net_device;
#line 476  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/printk.h"
struct file_operations;
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/div64.h"
struct completion;
#line 88 
struct pt_regs;
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bug.h"
struct bug_entry {
   int bug_addr_disp ;
   int file_disp ;
   unsigned short line ;
   unsigned short flags ;
};
#line 188  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/math64.h"
typedef __s64 time64_t;
#line 7  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/time_types.h"
struct __kernel_timespec {
   __kernel_time64_t tv_sec ;
   long long tv_nsec ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/time64.h"
struct timespec64 {
   time64_t tv_sec ;
   long tv_nsec ;
};
#line 165 
struct old_timespec32;
#line 166 
struct pollfd;
#line 167 
enum timespec_type {
    TT_NONE = 0,
    TT_NATIVE = 1,
    TT_COMPAT = 2
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/restart_block.h"
struct __anonstruct_futex_27 {
   u32 *uaddr ;
   u32 val ;
   u32 flags ;
   u32 bitset ;
   u64 time ;
   u32 *uaddr2 ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/restart_block.h"
union __anonunion_29 {
   struct __kernel_timespec *rmtp ;
   struct old_timespec32 *compat_rmtp ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/restart_block.h"
struct __anonstruct_nanosleep_28 {
   clockid_t clockid ;
   enum timespec_type type ;
   union __anonunion_29 __anonCompField___anonstruct_nanosleep_28_5 ;
   u64 expires ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/restart_block.h"
struct __anonstruct_poll_30 {
   struct pollfd *ufds ;
   int nfds ;
   int has_timeout ;
   unsigned long tv_sec ;
   unsigned long tv_nsec ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/restart_block.h"
union __anonunion_26 {
   struct __anonstruct_futex_27 futex ;
   struct __anonstruct_nanosleep_28 nanosleep ;
   struct __anonstruct_poll_30 poll ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/restart_block.h"
struct restart_block {
   long (*fn)(struct restart_block *) ;
   union __anonunion_26 __anonCompField_restart_block_6 ;
};
#line 58  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/page_64.h"
struct page;
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/getorder.h"
struct mm_struct;
#line 49 
struct io_bitmap;
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/ptrace.h"
struct pt_regs {
   unsigned long r15 ;
   unsigned long r14 ;
   unsigned long r13 ;
   unsigned long r12 ;
   unsigned long bp ;
   unsigned long bx ;
   unsigned long r11 ;
   unsigned long r10 ;
   unsigned long r9 ;
   unsigned long r8 ;
   unsigned long ax ;
   unsigned long cx ;
   unsigned long dx ;
   unsigned long si ;
   unsigned long di ;
   unsigned long orig_ax ;
   unsigned long ip ;
   unsigned long cs ;
   unsigned long flags ;
   unsigned long sp ;
   unsigned long ss ;
};
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/desc_defs.h"
struct desc_struct {
   u16 limit0 ;
   u16 base0 ;
   u16 base1 : 8 ;
   u16 type : 4 ;
   u16 s : 1 ;
   u16 dpl : 2 ;
   u16 p : 1 ;
   u16 limit1 : 4 ;
   u16 avl : 1 ;
   u16 l : 1 ;
   u16 d : 1 ;
   u16 g : 1 ;
   u16 base2 : 8 ;
} __attribute__((__packed__));
#line 119  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/desc_defs.h"
typedef unsigned long pteval_t;
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_64_types.h"
typedef unsigned long pmdval_t;
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_64_types.h"
typedef unsigned long pudval_t;
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_64_types.h"
typedef unsigned long pgdval_t;
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_64_types.h"
typedef unsigned long pgprotval_t;
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_64_types.h"
struct __anonstruct_pte_t_53 {
   pteval_t pte ;
};
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_64_types.h"
typedef struct __anonstruct_pte_t_53 pte_t;
#line 265  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
struct pgprot {
   pgprotval_t pgprot ;
};
#line 267  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
typedef struct pgprot pgprot_t;
#line 266  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
struct __anonstruct_pgd_t_54 {
   pgdval_t pgd ;
};
#line 266  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
typedef struct __anonstruct_pgd_t_54 pgd_t;
#line 319  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
struct __anonstruct_pud_t_56 {
   pudval_t pud ;
};
#line 319  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
typedef struct __anonstruct_pud_t_56 pud_t;
#line 345  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
struct __anonstruct_pmd_t_57 {
   pmdval_t pmd ;
};
#line 345  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
typedef struct __anonstruct_pmd_t_57 pmd_t;
#line 505  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
typedef struct page *pgtable_t;
#line 519 
struct file;
#line 530 
struct seq_file;
#line 360  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/nospec-branch.h"
struct thread_struct;
#line 362 
struct cpumask;
#line 365 
struct vm_area_struct;
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qspinlock_types.h"
struct __anonstruct_59 {
   u8 locked ;
   u8 pending ;
};
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qspinlock_types.h"
struct __anonstruct_60 {
   u16 locked_pending ;
   u16 tail ;
};
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qspinlock_types.h"
union __anonunion_58 {
   atomic_t val ;
   struct __anonstruct_59 __anonCompField___anonunion_58_7 ;
   struct __anonstruct_60 __anonCompField___anonunion_58_8 ;
};
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qspinlock_types.h"
struct qspinlock {
   union __anonunion_58 __anonCompField_qspinlock_9 ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qspinlock_types.h"
typedef struct qspinlock arch_spinlock_t;
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qrwlock_types.h"
struct __anonstruct_62 {
   u8 wlocked ;
   u8 __lstate[3U] ;
};
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qrwlock_types.h"
union __anonunion_61 {
   atomic_t cnts ;
   struct __anonstruct_62 __anonCompField___anonunion_61_10 ;
};
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qrwlock_types.h"
struct qrwlock {
   union __anonunion_61 __anonCompField_qrwlock_11 ;
   arch_spinlock_t wait_lock ;
};
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qrwlock_types.h"
typedef struct qrwlock arch_rwlock_t;
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/math_emu.h"
struct math_emu_info {
   long ___orig_eip ;
   struct pt_regs *regs ;
};
#line 2288  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/atomic-fallback.h"
typedef atomic64_t atomic_long_t;
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cpumask.h"
struct cpumask {
   unsigned long bits[128U] ;
};
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cpumask.h"
typedef struct cpumask cpumask_t;
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/tracepoint-defs.h"
struct tracepoint_func {
   void *func ;
   void *data ;
   int prio ;
};
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/tracepoint-defs.h"
struct tracepoint {
   char *name ;
   struct static_key key ;
   int (*regfunc)(void) ;
   void (*unregfunc)(void) ;
   struct tracepoint_func *funcs ;
};
#line 37  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/tracepoint-defs.h"
typedef int tracepoint_ptr_t;
#line 44  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/tracepoint-defs.h"
struct bpf_raw_event_map {
   struct tracepoint *tp ;
   void *bpf_func ;
   u32 num_args ;
   u32 writable_size ;
} __attribute__((__aligned__(32)));
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct fregs_state {
   u32 cwd ;
   u32 swd ;
   u32 twd ;
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
   u32 st_space[20U] ;
   u32 status ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct __anonstruct_90 {
   u64 rip ;
   u64 rdp ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct __anonstruct_91 {
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
union __anonunion_89 {
   struct __anonstruct_90 __anonCompField___anonunion_89_17 ;
   struct __anonstruct_91 __anonCompField___anonunion_89_18 ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
union __anonunion_92 {
   u32 padding1[12U] ;
   u32 sw_reserved[12U] ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct fxregs_state {
   u16 cwd ;
   u16 swd ;
   u16 twd ;
   u16 fop ;
   union __anonunion_89 __anonCompField_fxregs_state_19 ;
   u32 mxcsr ;
   u32 mxcsr_mask ;
   u32 st_space[32U] ;
   u32 xmm_space[64U] ;
   u32 padding[12U] ;
   union __anonunion_92 __anonCompField_fxregs_state_20 ;
} __attribute__((__aligned__(16)));
#line 79  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct swregs_state {
   u32 cwd ;
   u32 swd ;
   u32 twd ;
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
   u32 st_space[20U] ;
   u8 ftop ;
   u8 changed ;
   u8 lookahead ;
   u8 no_update ;
   u8 rm ;
   u8 alimit ;
   struct math_emu_info *info ;
   u32 entry_eip ;
};
#line 232  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct xstate_header {
   u64 xfeatures ;
   u64 xcomp_bv ;
   u64 reserved[6U] ;
} __attribute__((__packed__));
#line 253  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct xregs_state {
   struct fxregs_state i387 ;
   struct xstate_header header ;
   u8 extended_state_area[0U] ;
} __attribute__((__packed__, __aligned__(64)));
#line 268  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
union fpregs_state {
   struct fregs_state fsave ;
   struct fxregs_state fxsave ;
   struct swregs_state soft ;
   struct xregs_state xsave ;
   u8 __padding[4096U] ;
};
#line 281  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct fpu {
   unsigned int last_cpu ;
   unsigned long avx512_timestamp ;
   union fpregs_state state ;
};
#line 73  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/orc_types.h"
struct orc_entry {
   s16 sp_offset ;
   s16 bp_offset ;
   unsigned int sp_reg : 4 ;
   unsigned int bp_reg : 4 ;
   unsigned int type : 2 ;
   unsigned int end : 1 ;
} __attribute__((__packed__));
#line 180  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/processor.h"
struct seq_operations;
#line 478 
struct perf_event;
#line 479  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/processor.h"
struct __anonstruct_mm_segment_t_95 {
   unsigned long seg ;
};
#line 479  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/processor.h"
typedef struct __anonstruct_mm_segment_t_95 mm_segment_t;
#line 485  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/processor.h"
struct thread_struct {
   struct desc_struct tls_array[3U] ;
   unsigned long sp ;
   unsigned short es ;
   unsigned short ds ;
   unsigned short fsindex ;
   unsigned short gsindex ;
   unsigned long fsbase ;
   unsigned long gsbase ;
   struct perf_event *ptrace_bps[4U] ;
   unsigned long debugreg6 ;
   unsigned long ptrace_dr7 ;
   unsigned long cr2 ;
   unsigned long trap_nr ;
   unsigned long error_code ;
   struct io_bitmap *io_bitmap ;
   unsigned long iopl_emul ;
   mm_segment_t addr_limit ;
   unsigned int sig_on_uaccess_err : 1 ;
   unsigned int uaccess_err : 1 ;
   struct fpu fpu ;
};
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/thread_info.h"
struct thread_info {
   unsigned long flags ;
   u32 status ;
};
#line 35  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bottom_half.h"
struct lockdep_map;
#line 55  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockdep.h"
struct lockdep_subclass_key {
   char __one_byte ;
} __attribute__((__packed__));
#line 60  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockdep.h"
union __anonunion_96 {
   struct hlist_node hash_entry ;
   struct lockdep_subclass_key subkeys[8U] ;
};
#line 60  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockdep.h"
struct lock_class_key {
   union __anonunion_96 __anonCompField_lock_class_key_23 ;
};
#line 68 
struct lock_trace;
#line 77  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockdep.h"
struct lock_class {
   struct hlist_node hash_entry ;
   struct list_head lock_entry ;
   struct list_head locks_after ;
   struct list_head locks_before ;
   struct lockdep_subclass_key *key ;
   unsigned int subclass ;
   unsigned int dep_gen_id ;
   unsigned long usage_mask ;
   struct lock_trace *usage_traces[9U] ;
   int name_version ;
   char *name ;
   unsigned long contention_point[4U] ;
   unsigned long contending_point[4U] ;
};
#line 157  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockdep.h"
struct lockdep_map {
   struct lock_class_key *key ;
   struct lock_class *class_cache[2U] ;
   char *name ;
   int cpu ;
   unsigned long ip ;
};
#line 226  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockdep.h"
struct held_lock {
   u64 prev_chain_key ;
   unsigned long acquire_ip ;
   struct lockdep_map *instance ;
   struct lockdep_map *nest_lock ;
   u64 waittime_stamp ;
   u64 holdtime_stamp ;
   unsigned int class_idx : 13 ;
   unsigned int irq_context : 2 ;
   unsigned int trylock : 1 ;
   unsigned int read : 2 ;
   unsigned int check : 1 ;
   unsigned int hardirqs_off : 1 ;
   unsigned int references : 12 ;
   unsigned int pin_count ;
};
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
struct raw_spinlock {
   arch_spinlock_t raw_lock ;
   unsigned int magic ;
   unsigned int owner_cpu ;
   void *owner ;
   struct lockdep_map dep_map ;
};
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
typedef struct raw_spinlock raw_spinlock_t;
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
struct __anonstruct_98 {
   u8 __padding[24U] ;
   struct lockdep_map dep_map ;
};
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
union __anonunion_97 {
   struct raw_spinlock rlock ;
   struct __anonstruct_98 __anonCompField___anonunion_97_24 ;
};
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
struct spinlock {
   union __anonunion_97 __anonCompField_spinlock_25 ;
};
#line 73  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
typedef struct spinlock spinlock_t;
#line 74  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
struct __anonstruct_rwlock_t_99 {
   arch_rwlock_t raw_lock ;
   unsigned int magic ;
   unsigned int owner_cpu ;
   void *owner ;
   struct lockdep_map dep_map ;
};
#line 74  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
typedef struct __anonstruct_rwlock_t_99 rwlock_t;
#line 57  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
struct mutex;
#line 27  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
struct kmem_cache;
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seqlock.h"
struct seqcount {
   unsigned int sequence ;
   struct lockdep_map dep_map ;
};
#line 53  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seqlock.h"
typedef struct seqcount seqcount_t;
#line 403  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seqlock.h"
struct __anonstruct_seqlock_t_112 {
   struct seqcount seqcount ;
   spinlock_t lock ;
};
#line 403  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seqlock.h"
typedef struct __anonstruct_seqlock_t_112 seqlock_t;
#line 161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timex.h"
typedef s32 old_time32_t;
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/time32.h"
struct old_timespec32 {
   old_time32_t tv_sec ;
   s32 tv_nsec ;
};
#line 84  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/highuid.h"
struct user_namespace;
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uidgid.h"
struct __anonstruct_kuid_t_113 {
   uid_t val ;
};
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uidgid.h"
typedef struct __anonstruct_kuid_t_113 kuid_t;
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uidgid.h"
struct __anonstruct_kgid_t_114 {
   gid_t val ;
};
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uidgid.h"
typedef struct __anonstruct_kgid_t_114 kgid_t;
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/stat.h"
struct kstat {
   u32 result_mask ;
   umode_t mode ;
   unsigned int nlink ;
   uint32_t blksize ;
   u64 attributes ;
   u64 attributes_mask ;
   u64 ino ;
   dev_t dev ;
   dev_t rdev ;
   kuid_t uid ;
   kgid_t gid ;
   loff_t size ;
   struct timespec64 atime ;
   struct timespec64 mtime ;
   struct timespec64 ctime ;
   struct timespec64 btime ;
   u64 blocks ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/wait.h"
struct wait_queue_head {
   spinlock_t lock ;
   struct list_head head ;
};
#line 38  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/wait.h"
typedef struct wait_queue_head wait_queue_head_t;
#line 1133  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/wait.h"
struct __anonstruct_nodemask_t_115 {
   unsigned long bits[16U] ;
};
#line 1133  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/wait.h"
typedef struct __anonstruct_nodemask_t_115 nodemask_t;
#line 7  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/tlbbatch.h"
struct arch_tlbflush_unmap_batch {
   struct cpumask cpumask ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types_task.h"
struct vmacache {
   u64 seqnum ;
   struct vm_area_struct *vmas[4U] ;
};
#line 54  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types_task.h"
struct task_rss_stat {
   int events ;
   int count[4U] ;
};
#line 60  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types_task.h"
struct mm_rss_stat {
   atomic_long_t count[4U] ;
};
#line 64  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types_task.h"
struct page_frag {
   struct page *page ;
   __u32 offset ;
   __u32 size ;
};
#line 76  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types_task.h"
struct tlbflush_unmap_batch {
   struct arch_tlbflush_unmap_batch arch ;
   bool flush_required ;
   bool writable ;
};
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rbtree.h"
struct rb_node {
   unsigned long __rb_parent_color ;
   struct rb_node *rb_right ;
   struct rb_node *rb_left ;
} __attribute__((__aligned__(8)));
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rbtree.h"
struct rb_root {
   struct rb_node *rb_node ;
};
#line 125  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rbtree.h"
struct rb_root_cached {
   struct rb_root rb_root ;
   struct rb_node *rb_leftmost ;
};
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/osq_lock.h"
struct optimistic_spin_queue {
   atomic_t tail ;
};
#line 35  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rwsem.h"
struct rw_semaphore {
   atomic_long_t count ;
   atomic_long_t owner ;
   struct optimistic_spin_queue osq ;
   raw_spinlock_t wait_lock ;
   struct list_head wait_list ;
   void *magic ;
   struct lockdep_map dep_map ;
};
#line 26  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/completion.h"
struct completion {
   unsigned int done ;
   wait_queue_head_t wait ;
};
#line 120 
struct inode;
#line 121 
struct notifier_block;
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
struct ww_acquire_ctx;
#line 53  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mutex.h"
struct mutex {
   atomic_long_t owner ;
   spinlock_t wait_lock ;
   struct optimistic_spin_queue osq ;
   struct list_head wait_list ;
   void *magic ;
   struct lockdep_map dep_map ;
};
#line 72  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mutex.h"
struct mutex_waiter {
   struct list_head list ;
   struct task_struct *task ;
   struct ww_acquire_ctx *ww_ctx ;
   void *magic ;
};
#line 461  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jiffies.h"
typedef s64 ktime_t;
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
struct timer_list {
   struct hlist_node entry ;
   unsigned long expires ;
   void (*function)(struct timer_list *) ;
   u32 flags ;
   struct lockdep_map lockdep_map ;
};
#line 196 
struct hrtimer;
#line 197 
enum hrtimer_restart;
#line 221 
struct workqueue_struct;
#line 222 
struct work_struct;
#line 102  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/workqueue.h"
struct work_struct {
   atomic_long_t data ;
   struct list_head entry ;
   void (*func)(struct work_struct *) ;
   struct lockdep_map lockdep_map ;
};
#line 115  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/workqueue.h"
struct delayed_work {
   struct work_struct work ;
   struct timer_list timer ;
   struct workqueue_struct *wq ;
   int cpu ;
};
#line 124  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/workqueue.h"
struct rcu_work {
   struct work_struct work ;
   struct callback_head rcu ;
   struct workqueue_struct *wq ;
};
#line 67  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rcu_segcblist.h"
struct rcu_segcblist {
   struct callback_head *head ;
   struct callback_head **tails[4U] ;
   unsigned long gp_seq[4U] ;
   atomic_long_t len ;
   long len_lazy ;
   u8 enabled ;
   u8 offloaded ;
};
#line 80 
struct srcu_struct;
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/srcu.h"
struct srcu_node;
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/srcutree.h"
struct srcu_data {
   unsigned long srcu_lock_count[2U] ;
   unsigned long srcu_unlock_count[2U] ;
   spinlock_t lock ;
   struct rcu_segcblist srcu_cblist ;
   unsigned long srcu_gp_seq_needed ;
   unsigned long srcu_gp_seq_needed_exp ;
   bool srcu_cblist_invoking ;
   struct timer_list delay_work ;
   struct work_struct work ;
   struct callback_head srcu_barrier_head ;
   struct srcu_node *mynode ;
   unsigned long grpmask ;
   int cpu ;
   struct srcu_struct *ssp ;
};
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/srcutree.h"
struct srcu_node {
   spinlock_t lock ;
   unsigned long srcu_have_cbs[4U] ;
   unsigned long srcu_data_have_cbs[4U] ;
   unsigned long srcu_gp_seq_needed_exp ;
   struct srcu_node *srcu_parent ;
   int grplo ;
   int grphi ;
};
#line 64  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/srcutree.h"
struct srcu_struct {
   struct srcu_node node[521U] ;
   struct srcu_node *level[4U] ;
   struct mutex srcu_cb_mutex ;
   spinlock_t lock ;
   struct mutex srcu_gp_mutex ;
   unsigned int srcu_idx ;
   unsigned long srcu_gp_seq ;
   unsigned long srcu_gp_seq_needed ;
   unsigned long srcu_gp_seq_needed_exp ;
   unsigned long srcu_last_gp_end ;
   struct srcu_data *sda ;
   unsigned long srcu_barrier_seq ;
   struct mutex srcu_barrier_mutex ;
   struct completion srcu_barrier_completion ;
   atomic_t srcu_barrier_cpu_cnt ;
   struct delayed_work work ;
   struct lockdep_map dep_map ;
};
#line 54  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/notifier.h"
struct notifier_block {
   int (*notifier_call)(struct notifier_block *, unsigned long , void *) ;
   struct notifier_block *next ;
   int priority ;
};
#line 70  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/notifier.h"
struct raw_notifier_head {
   struct notifier_block *head ;
};
#line 50  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/uprobes.h"
struct arch_uprobe_task {
   unsigned long saved_scratch_register ;
   unsigned int saved_trap_nr ;
   unsigned int saved_tf ;
};
#line 57 
enum uprobe_task_state {
    UTASK_RUNNING = 0,
    UTASK_SSTEP = 1,
    UTASK_SSTEP_ACK = 2,
    UTASK_SSTEP_TRAPPED = 3
};
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
struct __anonstruct_128 {
   struct arch_uprobe_task autask ;
   unsigned long vaddr ;
};
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
struct __anonstruct_129 {
   struct callback_head dup_xol_work ;
   unsigned long dup_xol_addr ;
};
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
union __anonunion_127 {
   struct __anonstruct_128 __anonCompField___anonunion_127_28 ;
   struct __anonstruct_129 __anonCompField___anonunion_127_29 ;
};
#line 61 
struct uprobe;
#line 61 
struct return_instance;
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
struct uprobe_task {
   enum uprobe_task_state state ;
   union __anonunion_127 __anonCompField_uprobe_task_30 ;
   struct uprobe *active_uprobe ;
   unsigned long xol_vaddr ;
   struct return_instance *return_instances ;
   unsigned int depth ;
};
#line 83  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
struct return_instance {
   struct uprobe *uprobe ;
   unsigned long func ;
   unsigned long stack ;
   unsigned long orig_ret_vaddr ;
   bool chained ;
   struct return_instance *next ;
};
#line 98 
struct xol_area;
#line 101  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
struct uprobes_state {
   struct xol_area *xol_area ;
};
#line 140 
struct ldt_struct;
#line 140 
struct vdso_image;
#line 140  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
struct __anonstruct_mm_context_t_130 {
   u64 ctx_id ;
   atomic64_t tlb_gen ;
   struct rw_semaphore ldt_usr_sem ;
   struct ldt_struct *ldt ;
   unsigned short ia32_compat ;
   struct mutex lock ;
   void *vdso ;
   struct vdso_image *vdso_image ;
   atomic_t perf_rdpmc_allowed ;
   u16 pkey_allocation_map ;
   s16 execute_only_pkey ;
   void *bd_addr ;
};
#line 140  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
typedef struct __anonstruct_mm_context_t_130 mm_context_t;
#line 66  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct address_space;
#line 67 
struct mem_cgroup;
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct __anonstruct_132 {
   struct list_head lru ;
   struct address_space *mapping ;
   unsigned long index ;
   unsigned long private ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct __anonstruct_133 {
   dma_addr_t dma_addr ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct __anonstruct_136 {
   struct page *next ;
   int pages ;
   int pobjects ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
union __anonunion_135 {
   struct list_head slab_list ;
   struct __anonstruct_136 __anonCompField___anonunion_135_33 ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct __anonstruct_138 {
   unsigned int inuse : 16 ;
   unsigned int objects : 15 ;
   unsigned int frozen : 1 ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
union __anonunion_137 {
   void *s_mem ;
   unsigned long counters ;
   struct __anonstruct_138 __anonCompField___anonunion_137_35 ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct __anonstruct_134 {
   union __anonunion_135 __anonCompField___anonstruct_134_34 ;
   struct kmem_cache *slab_cache ;
   void *freelist ;
   union __anonunion_137 __anonCompField___anonstruct_134_36 ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct __anonstruct_139 {
   unsigned long compound_head ;
   unsigned char compound_dtor ;
   unsigned char compound_order ;
   atomic_t compound_mapcount ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct __anonstruct_140 {
   unsigned long _compound_pad_1 ;
   unsigned long _compound_pad_2 ;
   struct list_head deferred_list ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
union __anonunion_142 {
   struct mm_struct *pt_mm ;
   atomic_t pt_frag_refcount ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct __anonstruct_141 {
   unsigned long _pt_pad_1 ;
   pgtable_t pmd_huge_pte ;
   unsigned long _pt_pad_2 ;
   union __anonunion_142 __anonCompField___anonstruct_141_40 ;
   spinlock_t *ptl ;
};
#line 68 
struct dev_pagemap;
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct __anonstruct_143 {
   struct dev_pagemap *pgmap ;
   void *zone_device_data ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
union __anonunion_131 {
   struct __anonstruct_132 __anonCompField___anonunion_131_31 ;
   struct __anonstruct_133 __anonCompField___anonunion_131_32 ;
   struct __anonstruct_134 __anonCompField___anonunion_131_37 ;
   struct __anonstruct_139 __anonCompField___anonunion_131_38 ;
   struct __anonstruct_140 __anonCompField___anonunion_131_39 ;
   struct __anonstruct_141 __anonCompField___anonunion_131_41 ;
   struct __anonstruct_143 __anonCompField___anonunion_131_42 ;
   struct callback_head callback_head ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
union __anonunion_144 {
   atomic_t _mapcount ;
   unsigned int page_type ;
   unsigned int active ;
   int units ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct page {
   unsigned long flags ;
   union __anonunion_131 __anonCompField_page_43 ;
   union __anonunion_144 __anonCompField_page_44 ;
   atomic_t _refcount ;
   struct mem_cgroup *mem_cgroup ;
} __attribute__((__aligned__(16)));
#line 278  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct userfaultfd_ctx;
#line 278  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct vm_userfaultfd_ctx {
   struct userfaultfd_ctx *ctx ;
};
#line 292  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct __anonstruct_shared_145 {
   struct rb_node rb ;
   unsigned long rb_subtree_last ;
};
#line 292 
struct anon_vma;
#line 292 
struct vm_operations_struct;
#line 292 
struct mempolicy;
#line 292  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct vm_area_struct {
   unsigned long vm_start ;
   unsigned long vm_end ;
   struct vm_area_struct *vm_next ;
   struct vm_area_struct *vm_prev ;
   struct rb_node vm_rb ;
   unsigned long rb_subtree_gap ;
   struct mm_struct *vm_mm ;
   pgprot_t vm_page_prot ;
   unsigned long vm_flags ;
   struct __anonstruct_shared_145 shared ;
   struct list_head anon_vma_chain ;
   struct anon_vma *anon_vma ;
   struct vm_operations_struct *vm_ops ;
   unsigned long vm_pgoff ;
   struct file *vm_file ;
   void *vm_private_data ;
   atomic_long_t swap_readahead_info ;
   struct mempolicy *vm_policy ;
   struct vm_userfaultfd_ctx vm_userfaultfd_ctx ;
} __attribute__((__designated_init__));
#line 358  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct core_thread {
   struct task_struct *task ;
   struct core_thread *next ;
};
#line 363  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct core_state {
   atomic_t nr_threads ;
   struct core_thread dumper ;
   struct completion startup ;
};
#line 368 
struct kioctx_table;
#line 370 
struct linux_binfmt;
#line 370 
struct mmu_notifier_mm;
#line 370  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct __anonstruct_146 {
   struct vm_area_struct *mmap ;
   struct rb_root mm_rb ;
   u64 vmacache_seqnum ;
   unsigned long (*get_unmapped_area)(struct file *, unsigned long , unsigned long , unsigned long , unsigned long ) ;
   unsigned long mmap_base ;
   unsigned long mmap_legacy_base ;
   unsigned long mmap_compat_base ;
   unsigned long mmap_compat_legacy_base ;
   unsigned long task_size ;
   unsigned long highest_vm_end ;
   pgd_t *pgd ;
   atomic_t membarrier_state ;
   atomic_t mm_users ;
   atomic_t mm_count ;
   atomic_long_t pgtables_bytes ;
   int map_count ;
   spinlock_t page_table_lock ;
   struct rw_semaphore mmap_sem ;
   struct list_head mmlist ;
   unsigned long hiwater_rss ;
   unsigned long hiwater_vm ;
   unsigned long total_vm ;
   unsigned long locked_vm ;
   atomic64_t pinned_vm ;
   unsigned long data_vm ;
   unsigned long exec_vm ;
   unsigned long stack_vm ;
   unsigned long def_flags ;
   spinlock_t arg_lock ;
   unsigned long start_code ;
   unsigned long end_code ;
   unsigned long start_data ;
   unsigned long end_data ;
   unsigned long start_brk ;
   unsigned long brk ;
   unsigned long start_stack ;
   unsigned long arg_start ;
   unsigned long arg_end ;
   unsigned long env_start ;
   unsigned long env_end ;
   unsigned long saved_auxv[46U] ;
   struct mm_rss_stat rss_stat ;
   struct linux_binfmt *binfmt ;
   mm_context_t context ;
   unsigned long flags ;
   struct core_state *core_state ;
   spinlock_t ioctx_lock ;
   struct kioctx_table *ioctx_table ;
   struct task_struct *owner ;
   struct user_namespace *user_ns ;
   struct file *exe_file ;
   struct mmu_notifier_mm *mmu_notifier_mm ;
   unsigned long numa_next_scan ;
   unsigned long numa_scan_offset ;
   int numa_scan_seq ;
   atomic_t tlb_flush_pending ;
   bool tlb_flush_batched ;
   struct uprobes_state uprobes_state ;
   atomic_long_t hugetlb_usage ;
   struct work_struct async_put_work ;
} __attribute__((__designated_init__));
#line 370  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct mm_struct {
   struct __anonstruct_146 __anonCompField_mm_struct_45 ;
   unsigned long cpu_bitmap[] ;
};
#line 642 
struct vm_fault;
#line 643  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
typedef unsigned int vm_fault_t;
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct free_area {
   struct list_head free_list[6U] ;
   unsigned long nr_free ;
};
#line 158 
struct pglist_data;
#line 168  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct zone_padding {
   char x[0U] ;
} __attribute__((__aligned__(4096)));
#line 285  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct zone_reclaim_stat {
   unsigned long recent_rotated[2U] ;
   unsigned long recent_scanned[2U] ;
};
#line 304  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct lruvec {
   struct list_head lists[5U] ;
   struct zone_reclaim_stat reclaim_stat ;
   atomic_long_t inactive_age ;
   unsigned long refaults ;
   unsigned long flags ;
   struct pglist_data *pgdat ;
};
#line 316  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
typedef unsigned int isolate_mode_t;
#line 340  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct per_cpu_pages {
   int count ;
   int high ;
   int batch ;
   struct list_head lists[3U] ;
};
#line 349  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct per_cpu_pageset {
   struct per_cpu_pages pcp ;
   s8 expire ;
   u16 vm_numa_stat_diff[6U] ;
   s8 stat_threshold ;
   s8 vm_stat_diff[13U] ;
};
#line 361  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct per_cpu_nodestat {
   s8 stat_threshold ;
   s8 vm_node_stat_diff[32U] ;
};
#line 365 
enum zone_type {
    ZONE_DMA = 0,
    ZONE_DMA32 = 1,
    ZONE_NORMAL = 2,
    ZONE_MOVABLE = 3,
    ZONE_DEVICE = 4,
    __MAX_NR_ZONES = 5
};
#line 432  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct zone {
   unsigned long _watermark[3U] ;
   unsigned long watermark_boost ;
   unsigned long nr_reserved_highatomic ;
   long lowmem_reserve[5U] ;
   int node ;
   struct pglist_data *zone_pgdat ;
   struct per_cpu_pageset *pageset ;
   unsigned long zone_start_pfn ;
   atomic_long_t managed_pages ;
   unsigned long spanned_pages ;
   unsigned long present_pages ;
   char *name ;
   unsigned long nr_isolate_pageblock ;
   seqlock_t span_seqlock ;
   int initialized ;
   struct zone_padding _pad1_ ;
   struct free_area free_area[11U] ;
   unsigned long flags ;
   spinlock_t lock ;
   struct zone_padding _pad2_ ;
   unsigned long percpu_drift_mark ;
   unsigned long compact_cached_free_pfn ;
   unsigned long compact_cached_migrate_pfn[2U] ;
   unsigned long compact_init_migrate_pfn ;
   unsigned long compact_init_free_pfn ;
   unsigned int compact_considered ;
   unsigned int compact_defer_shift ;
   int compact_order_failed ;
   bool compact_blockskip_flush ;
   bool contiguous ;
   struct zone_padding _pad3_ ;
   atomic_long_t vm_stat[13U] ;
   atomic_long_t vm_numa_stat[6U] ;
} __attribute__((__aligned__(4096)));
#line 665  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct zoneref {
   struct zone *zone ;
   int zone_idx ;
};
#line 684  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct zonelist {
   struct zoneref _zonerefs[5121U] ;
};
#line 694  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct deferred_split {
   spinlock_t split_queue_lock ;
   struct list_head split_queue ;
   unsigned long split_queue_len ;
};
#line 710  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct pglist_data {
   struct zone node_zones[5U] ;
   struct zonelist node_zonelists[2U] ;
   int nr_zones ;
   spinlock_t node_size_lock ;
   unsigned long node_start_pfn ;
   unsigned long node_present_pages ;
   unsigned long node_spanned_pages ;
   int node_id ;
   wait_queue_head_t kswapd_wait ;
   wait_queue_head_t pfmemalloc_wait ;
   struct task_struct *kswapd ;
   int kswapd_order ;
   enum zone_type kswapd_classzone_idx ;
   int kswapd_failures ;
   int kcompactd_max_order ;
   enum zone_type kcompactd_classzone_idx ;
   wait_queue_head_t kcompactd_wait ;
   struct task_struct *kcompactd ;
   unsigned long totalreserve_pages ;
   unsigned long min_unmapped_pages ;
   unsigned long min_slab_pages ;
   struct zone_padding _pad1_ ;
   spinlock_t lru_lock ;
   unsigned long first_deferred_pfn ;
   struct deferred_split deferred_split_queue ;
   struct lruvec __lruvec ;
   unsigned long flags ;
   struct zone_padding _pad2_ ;
   struct per_cpu_nodestat *per_cpu_nodestats ;
   atomic_long_t vm_stat[32U] ;
};
#line 824 
struct resource;
#line 825 
struct vmem_altmap;
#line 282  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/x86_init.h"
struct pci_dev;
#line 159  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/topology.h"
struct pci_bus;
#line 440  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/io.h"
struct fwnode_operations;
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fwnode.h"
struct fwnode_handle {
   struct fwnode_handle *secondary ;
   struct fwnode_operations *ops ;
   struct device *dev ;
};
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fwnode.h"
struct fwnode_endpoint {
   unsigned int port ;
   unsigned int id ;
   struct fwnode_handle *local_fwnode ;
};
#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fwnode.h"
struct fwnode_reference_args {
   struct fwnode_handle *fwnode ;
   unsigned int nargs ;
   u64 args[8U] ;
};
#line 110  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fwnode.h"
struct fwnode_operations {
   struct fwnode_handle *(*get)(struct fwnode_handle *) ;
   void (*put)(struct fwnode_handle *) ;
   bool (*device_is_available)(struct fwnode_handle *) ;
   void *(*device_get_match_data)(struct fwnode_handle *, struct device *) ;
   bool (*property_present)(struct fwnode_handle *, char *) ;
   int (*property_read_int_array)(struct fwnode_handle *, char *, unsigned int , void *, size_t ) ;
   int (*property_read_string_array)(struct fwnode_handle *, char *, char **, size_t ) ;
   char *(*get_name)(struct fwnode_handle *) ;
   char *(*get_name_prefix)(struct fwnode_handle *) ;
   struct fwnode_handle *(*get_parent)(struct fwnode_handle *) ;
   struct fwnode_handle *(*get_next_child_node)(struct fwnode_handle *, struct fwnode_handle *) ;
   struct fwnode_handle *(*get_named_child_node)(struct fwnode_handle *, char *) ;
   int (*get_reference_args)(struct fwnode_handle *, char *, char *, unsigned int , unsigned int , struct fwnode_reference_args *) ;
   struct fwnode_handle *(*graph_get_next_endpoint)(struct fwnode_handle *, struct fwnode_handle *) ;
   struct fwnode_handle *(*graph_get_remote_endpoint)(struct fwnode_handle *) ;
   struct fwnode_handle *(*graph_get_port_parent)(struct fwnode_handle *) ;
   int (*graph_parse_endpoint)(struct fwnode_handle *, struct fwnode_endpoint *) ;
   int (*add_links)(struct fwnode_handle *, struct device *) ;
};
#line 54  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/llist.h"
struct llist_node;
#line 58  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/llist.h"
struct llist_node {
   struct llist_node *next ;
};
#line 53  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/vmalloc.h"
struct vm_struct {
   struct vm_struct *next ;
   void *addr ;
   unsigned long size ;
   unsigned long flags ;
   struct page **pages ;
   unsigned int nr_pages ;
   phys_addr_t phys_addr ;
   void *caller ;
};
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/smp.h"
struct __call_single_data {
   struct llist_node llist ;
   void (*func)(void *) ;
   void *info ;
   unsigned int flags ;
};
#line 822  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/sysctl.h"
struct nsproxy;
#line 823 
struct ctl_table_root;
#line 824 
struct ctl_table_header;
#line 825 
struct ctl_dir;
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
typedef int proc_handler(struct ctl_table *, int , void *, size_t *, loff_t *);
#line 105  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct ctl_table_poll {
   atomic_t event ;
   wait_queue_head_t wait ;
};
#line 123  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct ctl_table {
   char *procname ;
   void *data ;
   int maxlen ;
   umode_t mode ;
   struct ctl_table *child ;
   proc_handler *proc_handler ;
   struct ctl_table_poll *poll ;
   void *extra1 ;
   void *extra2 ;
} __attribute__((__designated_init__));
#line 135  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct ctl_node {
   struct rb_node node ;
   struct ctl_table_header *header ;
};
#line 142  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct __anonstruct_237 {
   struct ctl_table *ctl_table ;
   int used ;
   int count ;
   int nreg ;
};
#line 142  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
union __anonunion_236 {
   struct __anonstruct_237 __anonCompField___anonunion_236_47 ;
   struct callback_head rcu ;
};
#line 142 
struct ctl_table_set;
#line 142  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct ctl_table_header {
   union __anonunion_236 __anonCompField_ctl_table_header_48 ;
   struct completion *unregistering ;
   struct ctl_table *ctl_table_arg ;
   struct ctl_table_root *root ;
   struct ctl_table_set *set ;
   struct ctl_dir *parent ;
   struct ctl_node *node ;
   struct hlist_head inodes ;
};
#line 161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct ctl_dir {
   struct ctl_table_header header ;
   struct rb_root root ;
};
#line 167  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct ctl_table_set {
   int (*is_seen)(struct ctl_table_set *) ;
   struct ctl_dir dir ;
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct ctl_table_root {
   struct ctl_table_set default_set ;
   struct ctl_table_set *(*lookup)(struct ctl_table_root *) ;
   void (*set_ownership)(struct ctl_table_header *, struct ctl_table *, kuid_t *, kgid_t *) ;
   int (*permissions)(struct ctl_table_header *, struct ctl_table *) ;
};
#line 242 
struct cred;
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/vdso.h"
struct vdso_image {
   void *data ;
   unsigned long size ;
   unsigned long alt ;
   unsigned long alt_len ;
   long sym_vvar_start ;
   long sym_vvar_page ;
   long sym_pvclock_page ;
   long sym_hvclock_page ;
   long sym_VDSO32_NOTE_MASK ;
   long sym___kernel_sigreturn ;
   long sym___kernel_rt_sigreturn ;
   long sym___kernel_vsyscall ;
   long sym_int80_landing_pad ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef __u64 Elf64_Addr;
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef __u16 Elf64_Half;
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef __u64 Elf64_Off;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef __u32 Elf64_Word;
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef __u64 Elf64_Xword;
#line 192  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
struct elf64_sym {
   Elf64_Word st_name ;
   unsigned char st_info ;
   unsigned char st_other ;
   Elf64_Half st_shndx ;
   Elf64_Addr st_value ;
   Elf64_Xword st_size ;
};
#line 200  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef struct elf64_sym Elf64_Sym;
#line 221  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
struct elf64_hdr {
   unsigned char e_ident[16U] ;
   Elf64_Half e_type ;
   Elf64_Half e_machine ;
   Elf64_Word e_version ;
   Elf64_Addr e_entry ;
   Elf64_Off e_phoff ;
   Elf64_Off e_shoff ;
   Elf64_Word e_flags ;
   Elf64_Half e_ehsize ;
   Elf64_Half e_phentsize ;
   Elf64_Half e_phnum ;
   Elf64_Half e_shentsize ;
   Elf64_Half e_shnum ;
   Elf64_Half e_shstrndx ;
};
#line 237  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef struct elf64_hdr Elf64_Ehdr;
#line 316  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
struct elf64_shdr {
   Elf64_Word sh_name ;
   Elf64_Word sh_type ;
   Elf64_Xword sh_flags ;
   Elf64_Addr sh_addr ;
   Elf64_Off sh_offset ;
   Elf64_Xword sh_size ;
   Elf64_Word sh_link ;
   Elf64_Word sh_info ;
   Elf64_Xword sh_addralign ;
   Elf64_Xword sh_entsize ;
};
#line 328  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef struct elf64_shdr Elf64_Shdr;
#line 292  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/xarray.h"
struct xarray {
   spinlock_t xa_lock ;
   gfp_t xa_flags ;
   void *xa_head ;
};
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/idr.h"
struct idr {
   struct xarray idr_rt ;
   unsigned int idr_base ;
   unsigned int idr_next ;
};
#line 322 
struct dentry;
#line 323 
struct iattr;
#line 324 
struct super_block;
#line 325 
struct poll_table_struct;
#line 326 
struct fs_context;
#line 328 
struct kernfs_open_node;
#line 329 
struct kernfs_iattrs;
#line 84  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_root;
#line 84  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_elem_dir {
   unsigned long subdirs ;
   struct rb_root children ;
   struct kernfs_root *root ;
};
#line 96 
struct kernfs_node;
#line 96  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_elem_symlink {
   struct kernfs_node *target_kn ;
};
#line 100 
struct kernfs_ops;
#line 100  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_elem_attr {
   struct kernfs_ops *ops ;
   struct kernfs_open_node *open ;
   loff_t size ;
   struct kernfs_node *notify_next ;
};
#line 116  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
union __anonunion_256 {
   struct kernfs_elem_dir dir ;
   struct kernfs_elem_symlink symlink ;
   struct kernfs_elem_attr attr ;
};
#line 116  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_node {
   atomic_t count ;
   atomic_t active ;
   struct lockdep_map dep_map ;
   struct kernfs_node *parent ;
   char *name ;
   struct rb_node rb ;
   void *ns ;
   unsigned int hash ;
   union __anonunion_256 __anonCompField_kernfs_node_51 ;
   void *priv ;
   u64 id ;
   unsigned short flags ;
   umode_t mode ;
   struct kernfs_iattrs *iattr ;
};
#line 161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_syscall_ops {
   int (*show_options)(struct seq_file *, struct kernfs_root *) ;
   int (*mkdir)(struct kernfs_node *, char *, umode_t ) ;
   int (*rmdir)(struct kernfs_node *) ;
   int (*rename)(struct kernfs_node *, struct kernfs_node *, char *) ;
   int (*show_path)(struct seq_file *, struct kernfs_node *, struct kernfs_root *) ;
};
#line 173  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_root {
   struct kernfs_node *kn ;
   unsigned int flags ;
   struct idr ino_idr ;
   u32 last_id_lowbits ;
   u32 id_highbits ;
   struct kernfs_syscall_ops *syscall_ops ;
   struct list_head supers ;
   wait_queue_head_t deactivate_waitq ;
};
#line 190  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_open_file {
   struct kernfs_node *kn ;
   struct file *file ;
   struct seq_file *seq_file ;
   void *priv ;
   struct mutex mutex ;
   struct mutex prealloc_mutex ;
   int event ;
   struct list_head list ;
   char *prealloc_buf ;
   size_t atomic_write_len ;
   bool mmapped : 1 ;
   bool released : 1 ;
   struct vm_operations_struct *vm_ops ;
};
#line 210  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_ops {
   int (*open)(struct kernfs_open_file *) ;
   void (*release)(struct kernfs_open_file *) ;
   int (*seq_show)(struct seq_file *, void *) ;
   void *(*seq_start)(struct seq_file *, loff_t *) ;
   void *(*seq_next)(struct seq_file *, void *, loff_t *) ;
   void (*seq_stop)(struct seq_file *, void *) ;
   ssize_t (*read)(struct kernfs_open_file *, char *, size_t , loff_t ) ;
   size_t atomic_write_len ;
   bool prealloc ;
   ssize_t (*write)(struct kernfs_open_file *, char *, size_t , loff_t ) ;
   __poll_t (*poll)(struct kernfs_open_file *, struct poll_table_struct *) ;
   int (*mmap)(struct kernfs_open_file *, struct vm_area_struct *) ;
   struct lock_class_key lockdep_key ;
};
#line 595 
struct sock;
#line 596 
struct kobject;
#line 597 
enum kobj_ns_type {
    KOBJ_NS_TYPE_NONE = 0,
    KOBJ_NS_TYPE_NET = 1,
    KOBJ_NS_TYPES = 2
};
#line 39  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject_ns.h"
struct kobj_ns_type_operations {
   enum kobj_ns_type type ;
   bool (*current_may_mount)(void) ;
   void *(*grab_current_ns)(void) ;
   void *(*netlink_ns)(struct sock *) ;
   void *(*initial_ns)(void) ;
   void (*drop_ns)(void *) ;
};
#line 58 
struct bin_attribute;
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysfs.h"
struct attribute {
   char *name ;
   umode_t mode ;
   bool ignore_lockdep : 1 ;
   struct lock_class_key *key ;
   struct lock_class_key skey ;
};
#line 84  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysfs.h"
struct attribute_group {
   char *name ;
   umode_t (*is_visible)(struct kobject *, struct attribute *, int ) ;
   umode_t (*is_bin_visible)(struct kobject *, struct bin_attribute *, int ) ;
   struct attribute **attrs ;
   struct bin_attribute **bin_attrs ;
};
#line 161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysfs.h"
struct bin_attribute {
   struct attribute attr ;
   size_t size ;
   void *private ;
   ssize_t (*read)(struct file *, struct kobject *, struct bin_attribute *, char *, loff_t , size_t ) ;
   ssize_t (*write)(struct file *, struct kobject *, struct bin_attribute *, char *, loff_t , size_t ) ;
   int (*mmap)(struct file *, struct kobject *, struct bin_attribute *, struct vm_area_struct *) ;
};
#line 223  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysfs.h"
struct sysfs_ops {
   ssize_t (*show)(struct kobject *, struct attribute *, char *) ;
   ssize_t (*store)(struct kobject *, struct attribute *, char *, size_t ) ;
};
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/refcount.h"
struct refcount_struct {
   atomic_t refs ;
};
#line 101  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/refcount.h"
typedef struct refcount_struct refcount_t;
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kref.h"
struct kref {
   refcount_t refcount ;
};
#line 65  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject.h"
struct kset;
#line 65 
struct kobj_type;
#line 65  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject.h"
struct kobject {
   char *name ;
   struct list_head entry ;
   struct kobject *parent ;
   struct kset *kset ;
   struct kobj_type *ktype ;
   struct kernfs_node *sd ;
   struct kref kref ;
   struct delayed_work release ;
   unsigned int state_initialized : 1 ;
   unsigned int state_in_sysfs : 1 ;
   unsigned int state_add_uevent_sent : 1 ;
   unsigned int state_remove_uevent_sent : 1 ;
   unsigned int uevent_suppress : 1 ;
};
#line 139  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject.h"
struct kobj_type {
   void (*release)(struct kobject *) ;
   struct sysfs_ops *sysfs_ops ;
   struct attribute **default_attrs ;
   struct attribute_group **default_groups ;
   struct kobj_ns_type_operations *(*child_ns_type)(struct kobject *) ;
   void *(*namespace)(struct kobject *) ;
   void (*get_ownership)(struct kobject *, kuid_t *, kgid_t *) ;
};
#line 149  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject.h"
struct kobj_uevent_env {
   char *argv[3U] ;
   char *envp[32U] ;
   int envp_idx ;
   char buf[2048U] ;
   int buflen ;
};
#line 157  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject.h"
struct kset_uevent_ops {
   int (*filter)(struct kset *, struct kobject *) ;
   char *(*name)(struct kset *, struct kobject *) ;
   int (*uevent)(struct kset *, struct kobject *, struct kobj_uevent_env *) ;
};
#line 193  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject.h"
struct kset {
   struct list_head list ;
   spinlock_t list_lock ;
   struct kobject kobj ;
   struct kset_uevent_ops *uevent_ops ;
} __attribute__((__designated_init__));
#line 247 
struct kernel_param;
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/moduleparam.h"
struct kernel_param_ops {
   unsigned int flags ;
   int (*set)(char *, struct kernel_param *) ;
   int (*get)(char *, struct kernel_param *) ;
   void (*free)(void *) ;
};
#line 69 
struct kparam_string;
#line 69 
struct kparam_array;
#line 69  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/moduleparam.h"
union __anonunion_259 {
   void *arg ;
   struct kparam_string *str ;
   struct kparam_array *arr ;
};
#line 69  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/moduleparam.h"
struct kernel_param {
   char *name ;
   struct module *mod ;
   struct kernel_param_ops *ops ;
   u16 perm ;
   s8 level ;
   u8 flags ;
   union __anonunion_259 __anonCompField_kernel_param_52 ;
};
#line 86  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/moduleparam.h"
struct kparam_string {
   unsigned int maxlen ;
   char *string ;
};
#line 92  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/moduleparam.h"
struct kparam_array {
   unsigned int max ;
   unsigned int elemsize ;
   unsigned int *num ;
   struct kernel_param_ops *ops ;
   void *elem ;
};
#line 40  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rbtree_latch.h"
struct latch_tree_node {
   struct rb_node node[2U] ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/error-injection.h"
struct error_injection_entry {
   unsigned long addr ;
   int etype ;
};
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/module.h"
struct mod_arch_specific {
   unsigned int num_orcs ;
   int *orc_unwind_ip ;
   struct orc_entry *orc_unwind ;
};
#line 41  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct exception_table_entry;
#line 45 
struct module_param_attrs;
#line 45  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct module_kobject {
   struct kobject kobj ;
   struct module *mod ;
   struct kobject *drivers_dir ;
   struct module_param_attrs *mp ;
   struct completion *kobj_completion ;
} __attribute__((__designated_init__));
#line 53  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct module_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct module_attribute *, struct module_kobject *, char *) ;
   ssize_t (*store)(struct module_attribute *, struct module_kobject *, char *, size_t ) ;
   void (*setup)(struct module *, char *) ;
   int (*test)(struct module *) ;
   void (*free)(struct module *) ;
};
#line 297 
enum module_state {
    MODULE_STATE_LIVE = 0,
    MODULE_STATE_COMING = 1,
    MODULE_STATE_GOING = 2,
    MODULE_STATE_UNFORMED = 3
};
#line 305  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct mod_tree_node {
   struct module *mod ;
   struct latch_tree_node node ;
};
#line 310  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct module_layout {
   void *base ;
   unsigned int size ;
   unsigned int text_size ;
   unsigned int ro_size ;
   unsigned int ro_after_init_size ;
   struct mod_tree_node mtn ;
};
#line 334  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct mod_kallsyms {
   Elf64_Sym *symtab ;
   unsigned int num_symtab ;
   char *strtab ;
   char *typetab ;
};
#line 342  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct klp_modinfo {
   Elf64_Ehdr hdr ;
   Elf64_Shdr *sechdrs ;
   char *secstrings ;
   unsigned int symndx ;
};
#line 350 
struct module_sect_attrs;
#line 350 
struct module_notes_attrs;
#line 350 
struct trace_event_call;
#line 350  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct module {
   enum module_state state ;
   struct list_head list ;
   char name[56U] ;
   struct module_kobject mkobj ;
   struct module_attribute *modinfo_attrs ;
   char *version ;
   char *srcversion ;
   struct kobject *holders_dir ;
   struct kernel_symbol *syms ;
   s32 *crcs ;
   unsigned int num_syms ;
   struct mutex param_lock ;
   struct kernel_param *kp ;
   unsigned int num_kp ;
   unsigned int num_gpl_syms ;
   struct kernel_symbol *gpl_syms ;
   s32 *gpl_crcs ;
   struct kernel_symbol *unused_syms ;
   s32 *unused_crcs ;
   unsigned int num_unused_syms ;
   unsigned int num_unused_gpl_syms ;
   struct kernel_symbol *unused_gpl_syms ;
   s32 *unused_gpl_crcs ;
   bool sig_ok ;
   bool async_probe_requested ;
   struct kernel_symbol *gpl_future_syms ;
   s32 *gpl_future_crcs ;
   unsigned int num_gpl_future_syms ;
   unsigned int num_exentries ;
   struct exception_table_entry *extable ;
   int (*init)(void) ;
   struct module_layout core_layout ;
   struct module_layout init_layout ;
   struct mod_arch_specific arch ;
   unsigned long taints ;
   unsigned int num_bugs ;
   struct list_head bug_list ;
   struct bug_entry *bug_table ;
   struct mod_kallsyms *kallsyms ;
   struct mod_kallsyms core_kallsyms ;
   struct module_sect_attrs *sect_attrs ;
   struct module_notes_attrs *notes_attrs ;
   char *args ;
   void *percpu ;
   unsigned int percpu_size ;
   unsigned int num_tracepoints ;
   tracepoint_ptr_t *tracepoints_ptrs ;
   unsigned int num_srcu_structs ;
   struct srcu_struct **srcu_struct_ptrs ;
   unsigned int num_bpf_raw_events ;
   struct bpf_raw_event_map *bpf_raw_events ;
   struct jump_entry *jump_entries ;
   unsigned int num_jump_entries ;
   unsigned int num_trace_bprintk_fmt ;
   char **trace_bprintk_fmt_start ;
   struct trace_event_call **trace_events ;
   unsigned int num_trace_events ;
   struct trace_eval_map **trace_evals ;
   unsigned int num_trace_evals ;
   unsigned int num_ftrace_callsites ;
   unsigned long *ftrace_callsites ;
   bool klp ;
   bool klp_alive ;
   struct klp_modinfo *klp_info ;
   struct list_head source_list ;
   struct list_head target_list ;
   void (*exit)(void) ;
   atomic_t refcnt ;
   ctor_fn_t *ctors ;
   unsigned int num_ctors ;
   struct error_injection_entry *ei_funcs ;
   unsigned int num_ei_funcs ;
} __attribute__((__designated_init__, __aligned__(64)));
#line 41  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dynamic_queue_limits.h"
struct dql {
   unsigned int num_queued ;
   unsigned int adj_limit ;
   unsigned int last_obj_cnt ;
   unsigned int limit ;
   unsigned int num_completed ;
   unsigned int prev_ovlimit ;
   unsigned int prev_num_queued ;
   unsigned int prev_last_obj_cnt ;
   unsigned int lowest_slack ;
   unsigned long slack_start_time ;
   unsigned int max_limit ;
   unsigned int min_limit ;
   unsigned int slack_hold_time ;
};
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rhashtable-types.h"
struct rhash_head {
   struct rhash_head *next ;
};
#line 25 
struct bucket_table;
#line 33 
struct rhashtable;
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rhashtable-types.h"
struct rhashtable_compare_arg {
   struct rhashtable *ht ;
   void *key ;
};
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rhashtable-types.h"
struct rhashtable_params {
   u16 nelem_hint ;
   u16 key_len ;
   u16 key_offset ;
   u16 head_offset ;
   unsigned int max_size ;
   u16 min_size ;
   bool automatic_shrinking ;
   u32 (*hashfn)(void *, u32 , u32 ) ;
   u32 (*obj_hashfn)(void *, u32 , u32 ) ;
   int (*obj_cmpfn)(struct rhashtable_compare_arg *, void *) ;
};
#line 81  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rhashtable-types.h"
struct rhashtable {
   struct bucket_table *tbl ;
   unsigned int key_len ;
   unsigned int max_elems ;
   struct rhashtable_params p ;
   bool rhlist ;
   struct work_struct run_work ;
   struct mutex mutex ;
   spinlock_t lock ;
   atomic_t nelems ;
};
#line 67  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/sem.h"
struct sem_undo_list;
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sem.h"
struct sysv_sem {
   struct sem_undo_list *undo_list ;
};
#line 18 
struct percpu_ref;
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sem.h"
typedef void percpu_ref_func_t(struct percpu_ref *);
#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/percpu-refcount.h"
struct percpu_ref {
   atomic_long_t count ;
   unsigned long percpu_count_ptr ;
   percpu_ref_func_t *release ;
   percpu_ref_func_t *confirm_switch ;
   bool force_atomic : 1 ;
   bool allow_reinit : 1 ;
   struct callback_head rcu ;
};
#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/sched.h"
enum pid_type {
    PIDTYPE_PID = 0,
    PIDTYPE_TGID = 1,
    PIDTYPE_PGID = 2,
    PIDTYPE_SID = 3,
    PIDTYPE_MAX = 4
};
#line 54  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pid.h"
struct pid_namespace;
#line 54  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pid.h"
struct upid {
   int nr ;
   struct pid_namespace *ns ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pid.h"
struct pid {
   refcount_t count ;
   unsigned int level ;
   struct hlist_head tasks[4U] ;
   wait_queue_head_t wait_pidfd ;
   struct callback_head rcu ;
   struct upid numbers[1U] ;
};
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/shm.h"
struct sysv_shm {
   struct list_head shm_clist ;
};
#line 83  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/plist.h"
struct plist_node {
   int prio ;
   struct list_head prio_list ;
   struct list_head node_list ;
};
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timerqueue.h"
struct timerqueue_node {
   struct rb_node node ;
   ktime_t expires ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timerqueue.h"
struct timerqueue_head {
   struct rb_root_cached rb_root ;
};
#line 60 
struct hrtimer_clock_base;
#line 61 
struct hrtimer_cpu_base;
#line 80 
enum hrtimer_restart {
    HRTIMER_NORESTART = 0,
    HRTIMER_RESTART = 1
};
#line 117  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/hrtimer.h"
struct hrtimer {
   struct timerqueue_node node ;
   ktime_t _softexpires ;
   enum hrtimer_restart (*function)(struct hrtimer *) ;
   struct hrtimer_clock_base *base ;
   u8 state ;
   u8 is_rel ;
   u8 is_soft ;
   u8 is_hard ;
};
#line 158  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/hrtimer.h"
struct hrtimer_clock_base {
   struct hrtimer_cpu_base *cpu_base ;
   unsigned int index ;
   clockid_t clockid ;
   seqcount_t seq ;
   struct hrtimer *running ;
   struct timerqueue_head active ;
   ktime_t (*get_time)(void) ;
   ktime_t offset ;
} __attribute__((__aligned__(64)));
#line 213  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/hrtimer.h"
struct hrtimer_cpu_base {
   raw_spinlock_t lock ;
   unsigned int cpu ;
   unsigned int active_bases ;
   unsigned int clock_was_set_seq ;
   unsigned int hres_active : 1 ;
   unsigned int in_hrtirq : 1 ;
   unsigned int hang_detected : 1 ;
   unsigned int softirq_activated : 1 ;
   unsigned int nr_events ;
   unsigned short nr_retries ;
   unsigned short nr_hangs ;
   unsigned int max_hang_time ;
   ktime_t expires_next ;
   struct hrtimer *next_timer ;
   ktime_t softirq_expires_next ;
   struct hrtimer *softirq_next_timer ;
   struct hrtimer_clock_base clock_base[8U] ;
} __attribute__((__aligned__(64)));
#line 40  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/seccomp.h"
struct seccomp_filter;
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seccomp.h"
struct seccomp {
   int mode ;
   struct seccomp_filter *filter ;
};
#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/resource.h"
struct rlimit {
   __kernel_ulong_t rlim_cur ;
   __kernel_ulong_t rlim_max ;
};
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/latencytop.h"
struct latency_record {
   unsigned long backtrace[12U] ;
   unsigned int count ;
   unsigned long time ;
   unsigned long max ;
};
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/types.h"
struct task_cputime {
   u64 stime ;
   u64 utime ;
   unsigned long long sum_exec_runtime ;
};
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/signal.h"
struct __anonstruct_sigset_t_310 {
   unsigned long sig[1U] ;
};
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/signal.h"
typedef struct __anonstruct_sigset_t_310 sigset_t;
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/signal.h"
typedef void __signalfn_t(int );
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/signal-defs.h"
typedef __signalfn_t *__sighandler_t;
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/signal-defs.h"
typedef void __restorefn_t(void);
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/signal-defs.h"
typedef __restorefn_t *__sigrestore_t;
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
union sigval {
   int sival_int ;
   void *sival_ptr ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
typedef union sigval sigval_t;
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__kill_311 {
   __kernel_pid_t _pid ;
   __kernel_uid32_t _uid ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__timer_312 {
   __kernel_timer_t _tid ;
   int _overrun ;
   sigval_t _sigval ;
   int _sys_private ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__rt_313 {
   __kernel_pid_t _pid ;
   __kernel_uid32_t _uid ;
   sigval_t _sigval ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__sigchld_314 {
   __kernel_pid_t _pid ;
   __kernel_uid32_t _uid ;
   int _status ;
   __kernel_clock_t _utime ;
   __kernel_clock_t _stime ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__addr_bnd_317 {
   char _dummy_bnd[8U] ;
   void *_lower ;
   void *_upper ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__addr_pkey_318 {
   char _dummy_pkey[8U] ;
   __u32 _pkey ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
union __anonunion_316 {
   short _addr_lsb ;
   struct __anonstruct__addr_bnd_317 _addr_bnd ;
   struct __anonstruct__addr_pkey_318 _addr_pkey ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__sigfault_315 {
   void *_addr ;
   union __anonunion_316 __anonCompField___anonstruct__sigfault_315_53 ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__sigpoll_319 {
   long _band ;
   int _fd ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__sigsys_320 {
   void *_call_addr ;
   int _syscall ;
   unsigned int _arch ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
union __sifields {
   struct __anonstruct__kill_311 _kill ;
   struct __anonstruct__timer_312 _timer ;
   struct __anonstruct__rt_313 _rt ;
   struct __anonstruct__sigchld_314 _sigchld ;
   struct __anonstruct__sigfault_315 _sigfault ;
   struct __anonstruct__sigpoll_319 _sigpoll ;
   struct __anonstruct__sigsys_320 _sigsys ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/signal_types.h"
struct __anonstruct_325 {
   int si_signo ;
   int si_errno ;
   int si_code ;
   union __sifields _sifields ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/signal_types.h"
struct kernel_siginfo {
   struct __anonstruct_325 __anonCompField_kernel_siginfo_56 ;
};
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/signal_types.h"
typedef struct kernel_siginfo kernel_siginfo_t;
#line 20 
struct user_struct;
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/signal_types.h"
struct sigpending {
   struct list_head list ;
   sigset_t signal ;
};
#line 35  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/signal_types.h"
struct sigaction {
   __sighandler_t sa_handler ;
   unsigned long sa_flags ;
   __sigrestore_t sa_restorer ;
   sigset_t sa_mask ;
};
#line 49  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/signal_types.h"
struct k_sigaction {
   struct sigaction sa ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/task_io_accounting.h"
struct task_io_accounting {
   u64 rchar ;
   u64 wchar ;
   u64 syscr ;
   u64 syscw ;
   u64 read_bytes ;
   u64 write_bytes ;
   u64 cancelled_write_bytes ;
};
#line 107  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/posix-timers.h"
struct posix_cputimer_base {
   u64 nextevt ;
   struct timerqueue_head tqhead ;
};
#line 122  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/posix-timers.h"
struct posix_cputimers {
   struct posix_cputimer_base bases[3U] ;
   unsigned int timers_active ;
   unsigned int expiry_active ;
};
#line 193 
struct signal_struct;
#line 62  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/rseq.h"
union __anonunion_rseq_cs_330 {
   __u64 ptr64 ;
   __u64 ptr ;
};
#line 62  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/rseq.h"
struct rseq {
   __u32 cpu_id_start ;
   __u32 cpu_id ;
   union __anonunion_rseq_cs_330 rseq_cs ;
   __u32 flags ;
} __attribute__((__aligned__(32)));
#line 146 
struct audit_context;
#line 147 
struct backing_dev_info;
#line 148 
struct bio_list;
#line 149 
struct blk_plug;
#line 150 
struct capture_control;
#line 151 
struct cfs_rq;
#line 152 
struct fs_struct;
#line 153 
struct futex_pi_state;
#line 154 
struct io_context;
#line 155 
struct nameidata;
#line 156 
struct perf_event_context;
#line 157 
struct pipe_inode_info;
#line 159 
struct reclaim_state;
#line 160 
struct robust_list_head;
#line 165 
struct sighand_struct;
#line 166 
struct task_delay_info;
#line 167 
struct task_group;
#line 242  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct prev_cputime {
   u64 utime ;
   u64 stime ;
   raw_spinlock_t lock ;
};
#line 290  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct sched_info {
   unsigned long pcount ;
   unsigned long long run_delay ;
   unsigned long long last_arrival ;
   unsigned long long last_queued ;
};
#line 325  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct load_weight {
   unsigned long weight ;
   u32 inv_weight ;
};
#line 352  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct util_est {
   unsigned int enqueued ;
   unsigned int ewma ;
} __attribute__((__aligned__(8)));
#line 401  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct sched_avg {
   u64 last_update_time ;
   u64 load_sum ;
   u64 runnable_load_sum ;
   u32 util_sum ;
   u32 period_contrib ;
   unsigned long load_avg ;
   unsigned long runnable_load_avg ;
   unsigned long util_avg ;
   struct util_est util_est ;
} __attribute__((__aligned__(64)));
#line 413  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct sched_statistics {
   u64 wait_start ;
   u64 wait_max ;
   u64 wait_count ;
   u64 wait_sum ;
   u64 iowait_count ;
   u64 iowait_sum ;
   u64 sleep_start ;
   u64 sleep_max ;
   s64 sum_sleep_runtime ;
   u64 block_start ;
   u64 block_max ;
   u64 exec_max ;
   u64 slice_max ;
   u64 nr_migrations_cold ;
   u64 nr_failed_migrations_affine ;
   u64 nr_failed_migrations_running ;
   u64 nr_failed_migrations_hot ;
   u64 nr_forced_migrations ;
   u64 nr_wakeups ;
   u64 nr_wakeups_sync ;
   u64 nr_wakeups_migrate ;
   u64 nr_wakeups_local ;
   u64 nr_wakeups_remote ;
   u64 nr_wakeups_affine ;
   u64 nr_wakeups_affine_attempts ;
   u64 nr_wakeups_passive ;
   u64 nr_wakeups_idle ;
};
#line 449  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct sched_entity {
   struct load_weight load ;
   unsigned long runnable_weight ;
   struct rb_node run_node ;
   struct list_head group_node ;
   unsigned int on_rq ;
   u64 exec_start ;
   u64 sum_exec_runtime ;
   u64 vruntime ;
   u64 prev_sum_exec_runtime ;
   u64 nr_migrations ;
   struct sched_statistics statistics ;
   int depth ;
   struct sched_entity *parent ;
   struct cfs_rq *cfs_rq ;
   struct cfs_rq *my_q ;
   struct sched_avg avg ;
};
#line 486 
struct rt_rq;
#line 486  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct sched_rt_entity {
   struct list_head run_list ;
   unsigned long timeout ;
   unsigned long watchdog_stamp ;
   unsigned int time_slice ;
   unsigned short on_rq ;
   unsigned short on_list ;
   struct sched_rt_entity *back ;
   struct sched_rt_entity *parent ;
   struct rt_rq *rt_rq ;
   struct rt_rq *my_q ;
} __attribute__((__designated_init__));
#line 504  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct sched_dl_entity {
   struct rb_node rb_node ;
   u64 dl_runtime ;
   u64 dl_deadline ;
   u64 dl_period ;
   u64 dl_bw ;
   u64 dl_density ;
   s64 runtime ;
   u64 deadline ;
   unsigned int flags ;
   unsigned int dl_throttled : 1 ;
   unsigned int dl_boosted : 1 ;
   unsigned int dl_yielded : 1 ;
   unsigned int dl_non_contending : 1 ;
   unsigned int dl_overrun : 1 ;
   struct hrtimer dl_timer ;
   struct hrtimer inactive_timer ;
};
#line 600  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct uclamp_se {
   unsigned int value : 11 ;
   unsigned int bucket_id : 3 ;
   unsigned int active : 1 ;
   unsigned int user_defined : 1 ;
};
#line 625  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct wake_q_node {
   struct wake_q_node *next ;
};
#line 629 
struct sched_class;
#line 629 
struct key;
#line 629 
struct files_struct;
#line 629 
struct rt_mutex_waiter;
#line 629 
struct css_set;
#line 629 
struct compat_robust_list_head;
#line 629 
struct numa_group;
#line 629  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
union __anonunion_332 {
   refcount_t rcu_users ;
   struct callback_head rcu ;
};
#line 629 
struct ftrace_ret_stack;
#line 629 
struct kcov;
#line 629 
struct request_queue;
#line 629  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct task_struct {
   struct thread_info thread_info ;
   long state ;
   void *stack ;
   refcount_t usage ;
   unsigned int flags ;
   unsigned int ptrace ;
   struct llist_node wake_entry ;
   int on_cpu ;
   unsigned int cpu ;
   unsigned int wakee_flips ;
   unsigned long wakee_flip_decay_ts ;
   struct task_struct *last_wakee ;
   int recent_used_cpu ;
   int wake_cpu ;
   int on_rq ;
   int prio ;
   int static_prio ;
   int normal_prio ;
   unsigned int rt_priority ;
   struct sched_class *sched_class ;
   struct sched_entity se ;
   struct sched_rt_entity rt ;
   struct task_group *sched_task_group ;
   struct sched_dl_entity dl ;
   struct uclamp_se uclamp_req[2U] ;
   struct uclamp_se uclamp[2U] ;
   struct hlist_head preempt_notifiers ;
   unsigned int btrace_seq ;
   unsigned int policy ;
   int nr_cpus_allowed ;
   cpumask_t *cpus_ptr ;
   cpumask_t cpus_mask ;
   unsigned long rcu_tasks_nvcsw ;
   u8 rcu_tasks_holdout ;
   u8 rcu_tasks_idx ;
   int rcu_tasks_idle_cpu ;
   struct list_head rcu_tasks_holdout_list ;
   struct sched_info sched_info ;
   struct list_head tasks ;
   struct plist_node pushable_tasks ;
   struct rb_node pushable_dl_tasks ;
   struct mm_struct *mm ;
   struct mm_struct *active_mm ;
   struct vmacache vmacache ;
   struct task_rss_stat rss_stat ;
   int exit_state ;
   int exit_code ;
   int exit_signal ;
   int pdeath_signal ;
   unsigned long jobctl ;
   unsigned int personality ;
   unsigned int sched_reset_on_fork : 1 ;
   unsigned int sched_contributes_to_load : 1 ;
   unsigned int sched_migrated : 1 ;
   unsigned int sched_remote_wakeup : 1 ;
   unsigned int sched_psi_wake_requeue : 1 ;
   unsigned int  ;
   unsigned int in_execve : 1 ;
   unsigned int in_iowait : 1 ;
   unsigned int restore_sigmask : 1 ;
   unsigned int in_user_fault : 1 ;
   unsigned int brk_randomized : 1 ;
   unsigned int no_cgroup_migration : 1 ;
   unsigned int frozen : 1 ;
   unsigned int use_memdelay : 1 ;
   unsigned long atomic_flags ;
   struct restart_block restart_block ;
   pid_t pid ;
   pid_t tgid ;
   unsigned long stack_canary ;
   struct task_struct *real_parent ;
   struct task_struct *parent ;
   struct list_head children ;
   struct list_head sibling ;
   struct task_struct *group_leader ;
   struct list_head ptraced ;
   struct list_head ptrace_entry ;
   struct pid *thread_pid ;
   struct hlist_node pid_links[4U] ;
   struct list_head thread_group ;
   struct list_head thread_node ;
   struct completion *vfork_done ;
   int *set_child_tid ;
   int *clear_child_tid ;
   u64 utime ;
   u64 stime ;
   u64 gtime ;
   struct prev_cputime prev_cputime ;
   unsigned long nvcsw ;
   unsigned long nivcsw ;
   u64 start_time ;
   u64 start_boottime ;
   unsigned long min_flt ;
   unsigned long maj_flt ;
   struct posix_cputimers posix_cputimers ;
   struct cred *ptracer_cred ;
   struct cred *real_cred ;
   struct cred *cred ;
   struct key *cached_requested_key ;
   char comm[16U] ;
   struct nameidata *nameidata ;
   struct sysv_sem sysvsem ;
   struct sysv_shm sysvshm ;
   unsigned long last_switch_count ;
   unsigned long last_switch_time ;
   struct fs_struct *fs ;
   struct files_struct *files ;
   struct nsproxy *nsproxy ;
   struct signal_struct *signal ;
   struct sighand_struct *sighand ;
   sigset_t blocked ;
   sigset_t real_blocked ;
   sigset_t saved_sigmask ;
   struct sigpending pending ;
   unsigned long sas_ss_sp ;
   size_t sas_ss_size ;
   unsigned int sas_ss_flags ;
   struct callback_head *task_works ;
   struct audit_context *audit_context ;
   kuid_t loginuid ;
   unsigned int sessionid ;
   struct seccomp seccomp ;
   u32 parent_exec_id ;
   u32 self_exec_id ;
   spinlock_t alloc_lock ;
   raw_spinlock_t pi_lock ;
   struct wake_q_node wake_q ;
   struct rb_root_cached pi_waiters ;
   struct task_struct *pi_top_task ;
   struct rt_mutex_waiter *pi_blocked_on ;
   struct mutex_waiter *blocked_on ;
   int non_block_count ;
   unsigned int irq_events ;
   unsigned long hardirq_enable_ip ;
   unsigned long hardirq_disable_ip ;
   unsigned int hardirq_enable_event ;
   unsigned int hardirq_disable_event ;
   int hardirqs_enabled ;
   int hardirq_context ;
   unsigned long softirq_disable_ip ;
   unsigned long softirq_enable_ip ;
   unsigned int softirq_disable_event ;
   unsigned int softirq_enable_event ;
   int softirqs_enabled ;
   int softirq_context ;
   u64 curr_chain_key ;
   int lockdep_depth ;
   unsigned int lockdep_recursion ;
   struct held_lock held_locks[48U] ;
   unsigned int in_ubsan ;
   void *journal_info ;
   struct bio_list *bio_list ;
   struct blk_plug *plug ;
   struct reclaim_state *reclaim_state ;
   struct backing_dev_info *backing_dev_info ;
   struct io_context *io_context ;
   struct capture_control *capture_control ;
   unsigned long ptrace_message ;
   kernel_siginfo_t *last_siginfo ;
   struct task_io_accounting ioac ;
   unsigned int psi_flags ;
   u64 acct_rss_mem1 ;
   u64 acct_vm_mem1 ;
   u64 acct_timexpd ;
   nodemask_t mems_allowed ;
   seqcount_t mems_allowed_seq ;
   int cpuset_mem_spread_rotor ;
   int cpuset_slab_spread_rotor ;
   struct css_set *cgroups ;
   struct list_head cg_list ;
   u32 closid ;
   u32 rmid ;
   struct robust_list_head *robust_list ;
   struct compat_robust_list_head *compat_robust_list ;
   struct list_head pi_state_list ;
   struct futex_pi_state *pi_state_cache ;
   struct mutex futex_exit_mutex ;
   unsigned int futex_state ;
   struct perf_event_context *perf_event_ctxp[2U] ;
   struct mutex perf_event_mutex ;
   struct list_head perf_event_list ;
   struct mempolicy *mempolicy ;
   short il_prev ;
   short pref_node_fork ;
   int numa_scan_seq ;
   unsigned int numa_scan_period ;
   unsigned int numa_scan_period_max ;
   int numa_preferred_nid ;
   unsigned long numa_migrate_retry ;
   u64 node_stamp ;
   u64 last_task_numa_placement ;
   u64 last_sum_exec_runtime ;
   struct callback_head numa_work ;
   struct numa_group *numa_group ;
   unsigned long *numa_faults ;
   unsigned long total_numa_faults ;
   unsigned long numa_faults_locality[3U] ;
   unsigned long numa_pages_migrated ;
   struct rseq *rseq ;
   u32 rseq_sig ;
   unsigned long rseq_event_mask ;
   struct tlbflush_unmap_batch tlb_ubc ;
   union __anonunion_332 __anonCompField_task_struct_58 ;
   struct pipe_inode_info *splice_pipe ;
   struct page_frag task_frag ;
   struct task_delay_info *delays ;
   int make_it_fail ;
   unsigned int fail_nth ;
   int nr_dirtied ;
   int nr_dirtied_pause ;
   unsigned long dirty_paused_when ;
   int latency_record_count ;
   struct latency_record latency_record[32U] ;
   u64 timer_slack_ns ;
   u64 default_timer_slack_ns ;
   unsigned int kasan_depth ;
   int curr_ret_stack ;
   int curr_ret_depth ;
   struct ftrace_ret_stack *ret_stack ;
   unsigned long long ftrace_timestamp ;
   atomic_t trace_overrun ;
   atomic_t tracing_graph_pause ;
   unsigned long trace ;
   unsigned long trace_recursion ;
   unsigned int kcov_mode ;
   unsigned int kcov_size ;
   void *kcov_area ;
   struct kcov *kcov ;
   u64 kcov_handle ;
   int kcov_sequence ;
   struct mem_cgroup *memcg_in_oom ;
   gfp_t memcg_oom_gfp_mask ;
   int memcg_oom_order ;
   unsigned int memcg_nr_pages_over_high ;
   struct mem_cgroup *active_memcg ;
   struct request_queue *throttle_queue ;
   struct uprobe_task *utask ;
   unsigned int sequential_io ;
   unsigned int sequential_io_avg ;
   unsigned long task_state_change ;
   int pagefault_disabled ;
   struct task_struct *oom_reaper_list ;
   struct vm_struct *stack_vm_area ;
   refcount_t stack_refcount ;
   int patch_state ;
   void *security ;
   struct thread_struct thread ;
};
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/extable.h"
struct exception_table_entry {
   int insn ;
   int fixup ;
   int handler ;
};
#line 686  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/slab.h"
struct scatterlist;
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/uio.h"
struct iovec {
   void *iov_base ;
   __kernel_size_t iov_len ;
};
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uio.h"
struct kvec {
   void *iov_base ;
   size_t iov_len ;
};
#line 30 
struct bio_vec;
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uio.h"
union __anonunion_410 {
   struct iovec *iov ;
   struct kvec *kvec ;
   struct bio_vec *bvec ;
   struct pipe_inode_info *pipe ;
};
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uio.h"
struct __anonstruct_412 {
   unsigned int head ;
   unsigned int start_head ;
};
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uio.h"
union __anonunion_411 {
   unsigned long nr_segs ;
   struct __anonstruct_412 __anonCompField___anonunion_411_60 ;
};
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uio.h"
struct iov_iter {
   unsigned int type ;
   size_t iov_offset ;
   size_t count ;
   union __anonunion_410 __anonCompField_iov_iter_59 ;
   union __anonunion_411 __anonCompField_iov_iter_61 ;
};
#line 285  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uio.h"
typedef unsigned short __kernel_sa_family_t;
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/socket.h"
struct socket;
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/socket.h"
typedef __kernel_sa_family_t sa_family_t;
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/socket.h"
struct sockaddr {
   sa_family_t sa_family ;
   char sa_data[14U] ;
};
#line 49 
struct kiocb;
#line 49  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/socket.h"
struct msghdr {
   void *msg_name ;
   int msg_namelen ;
   struct iov_iter msg_iter ;
   void *msg_control ;
   __kernel_size_t msg_controllen ;
   unsigned int msg_flags ;
   struct kiocb *msg_iocb ;
};
#line 422 
struct ns_common;
#line 423  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/socket.h"
struct __anonstruct_sync_serial_settings_415 {
   unsigned int clock_rate ;
   unsigned int clock_type ;
   unsigned short loopback ;
};
#line 423  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/socket.h"
typedef struct __anonstruct_sync_serial_settings_415 sync_serial_settings;
#line 45  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_te1_settings_416 {
   unsigned int clock_rate ;
   unsigned int clock_type ;
   unsigned short loopback ;
   unsigned int slot_map ;
};
#line 45  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_te1_settings_416 te1_settings;
#line 52  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_raw_hdlc_proto_417 {
   unsigned short encoding ;
   unsigned short parity ;
};
#line 52  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_raw_hdlc_proto_417 raw_hdlc_proto;
#line 57  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_fr_proto_418 {
   unsigned int t391 ;
   unsigned int t392 ;
   unsigned int n391 ;
   unsigned int n392 ;
   unsigned int n393 ;
   unsigned short lmi ;
   unsigned short dce ;
};
#line 57  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_fr_proto_418 fr_proto;
#line 67  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_fr_proto_pvc_419 {
   unsigned int dlci ;
};
#line 67  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_fr_proto_pvc_419 fr_proto_pvc;
#line 71  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_fr_proto_pvc_info_420 {
   unsigned int dlci ;
   char master[16U] ;
};
#line 71  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_fr_proto_pvc_info_420 fr_proto_pvc_info;
#line 76  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_cisco_proto_421 {
   unsigned int interval ;
   unsigned int timeout ;
};
#line 76  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_cisco_proto_421 cisco_proto;
#line 195  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if.h"
struct ifmap {
   unsigned long mem_start ;
   unsigned long mem_end ;
   unsigned short base_addr ;
   unsigned char irq ;
   unsigned char dma ;
   unsigned char port ;
};
#line 206  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if.h"
union __anonunion_ifs_ifsu_422 {
   raw_hdlc_proto *raw_hdlc ;
   cisco_proto *cisco ;
   fr_proto *fr ;
   fr_proto_pvc *fr_pvc ;
   fr_proto_pvc_info *fr_pvc_info ;
   sync_serial_settings *sync ;
   te1_settings *te1 ;
};
#line 206  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if.h"
struct if_settings {
   unsigned int type ;
   unsigned int size ;
   union __anonunion_ifs_ifsu_422 ifs_ifsu ;
};
#line 232  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if.h"
union __anonunion_ifr_ifrn_423 {
   char ifrn_name[16U] ;
};
#line 232  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if.h"
union __anonunion_ifr_ifru_424 {
   struct sockaddr ifru_addr ;
   struct sockaddr ifru_dstaddr ;
   struct sockaddr ifru_broadaddr ;
   struct sockaddr ifru_netmask ;
   struct sockaddr ifru_hwaddr ;
   short ifru_flags ;
   int ifru_ivalue ;
   int ifru_mtu ;
   struct ifmap ifru_map ;
   char ifru_slave[16U] ;
   char ifru_newname[16U] ;
   void *ifru_data ;
   struct if_settings ifru_settings ;
};
#line 232  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if.h"
struct ifreq {
   union __anonunion_ifr_ifrn_423 ifr_ifrn ;
   union __anonunion_ifr_ifru_424 ifr_ifru ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_bl.h"
struct hlist_bl_node;
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_bl.h"
struct hlist_bl_head {
   struct hlist_bl_node *first ;
};
#line 38  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_bl.h"
struct hlist_bl_node {
   struct hlist_bl_node *next ;
   struct hlist_bl_node **pprev ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockref.h"
struct __anonstruct_439 {
   spinlock_t lock ;
   int count ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockref.h"
union __anonunion_438 {
   struct __anonstruct_439 __anonCompField___anonunion_438_64 ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockref.h"
struct lockref {
   union __anonunion_438 __anonCompField_lockref_65 ;
};
#line 78  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/stringhash.h"
struct path;
#line 79 
struct vfsmount;
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dcache.h"
struct __anonstruct_441 {
   u32 hash ;
   u32 len ;
};
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dcache.h"
union __anonunion_440 {
   struct __anonstruct_441 __anonCompField___anonunion_440_66 ;
   u64 hash_len ;
};
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dcache.h"
struct qstr {
   union __anonunion_440 __anonCompField_qstr_67 ;
   unsigned char *name ;
};
#line 89 
struct dentry_operations;
#line 89  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dcache.h"
union __anonunion_442 {
   struct list_head d_lru ;
   wait_queue_head_t *d_wait ;
};
#line 89  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dcache.h"
union __anonunion_d_u_443 {
   struct hlist_node d_alias ;
   struct hlist_bl_node d_in_lookup_hash ;
   struct callback_head d_rcu ;
};
#line 89  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dcache.h"
struct dentry {
   unsigned int d_flags ;
   seqcount_t d_seq ;
   struct hlist_bl_node d_hash ;
   struct dentry *d_parent ;
   struct qstr d_name ;
   struct inode *d_inode ;
   unsigned char d_iname[32U] ;
   struct lockref d_lockref ;
   struct dentry_operations *d_op ;
   struct super_block *d_sb ;
   unsigned long d_time ;
   void *d_fsdata ;
   union __anonunion_442 __anonCompField_dentry_68 ;
   struct list_head d_child ;
   struct list_head d_subdirs ;
   union __anonunion_d_u_443 d_u ;
} __attribute__((__designated_init__));
#line 135  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dcache.h"
struct dentry_operations {
   int (*d_revalidate)(struct dentry *, unsigned int ) ;
   int (*d_weak_revalidate)(struct dentry *, unsigned int ) ;
   int (*d_hash)(struct dentry *, struct qstr *) ;
   int (*d_compare)(struct dentry *, unsigned int , char *, struct qstr *) ;
   int (*d_delete)(struct dentry *) ;
   int (*d_init)(struct dentry *) ;
   void (*d_release)(struct dentry *) ;
   void (*d_prune)(struct dentry *) ;
   void (*d_iput)(struct dentry *, struct inode *) ;
   char *(*d_dname)(struct dentry *, char *, int ) ;
   struct vfsmount *(*d_automount)(struct path *) ;
   int (*d_manage)(struct path *, bool ) ;
   struct dentry *(*d_real)(struct dentry *, struct inode *) ;
} __attribute__((__aligned__(64)));
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/path.h"
struct path {
   struct vfsmount *mnt ;
   struct dentry *dentry ;
} __attribute__((__designated_init__));
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/shrinker.h"
struct shrink_control {
   gfp_t gfp_mask ;
   int nid ;
   unsigned long nr_to_scan ;
   unsigned long nr_scanned ;
   struct mem_cgroup *memcg ;
};
#line 60  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/shrinker.h"
struct shrinker {
   unsigned long (*count_objects)(struct shrinker *, struct shrink_control *) ;
   unsigned long (*scan_objects)(struct shrinker *, struct shrink_control *) ;
   long batch ;
   int seeks ;
   unsigned int flags ;
   struct list_head list ;
   int id ;
   atomic_long_t *nr_deferred ;
};
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_lru.h"
struct list_lru_one {
   struct list_head list ;
   long nr_items ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_lru.h"
struct list_lru_memcg {
   struct callback_head rcu ;
   struct list_lru_one *lru[0U] ;
};
#line 40  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_lru.h"
struct list_lru_node {
   spinlock_t lock ;
   struct list_lru_one lru ;
   struct list_lru_memcg *memcg_lrus ;
   long nr_items ;
} __attribute__((__aligned__(64)));
#line 52  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_lru.h"
struct list_lru {
   struct list_lru_node *node ;
   struct list_head list ;
   int shrinker_id ;
   bool memcg_aware ;
};
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/capability.h"
struct kernel_cap_struct {
   __u32 cap[2U] ;
};
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/capability.h"
typedef struct kernel_cap_struct kernel_cap_t;
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fiemap.h"
struct fiemap_extent {
   __u64 fe_logical ;
   __u64 fe_physical ;
   __u64 fe_length ;
   __u64 fe_reserved64[2U] ;
   __u32 fe_flags ;
   __u32 fe_reserved[3U] ;
};
#line 39 
enum migrate_mode {
    MIGRATE_ASYNC = 0,
    MIGRATE_SYNC_LIGHT = 1,
    MIGRATE_SYNC = 2,
    MIGRATE_SYNC_NO_COPY = 3
};
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rcuwait.h"
struct rcuwait {
   struct task_struct *task ;
};
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rcu_sync.h"
struct rcu_sync {
   int gp_state ;
   int gp_count ;
   wait_queue_head_t gp_wait ;
   struct callback_head cb_head ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/percpu-rwsem.h"
struct percpu_rw_semaphore {
   struct rcu_sync rss ;
   unsigned int *read_count ;
   struct rw_semaphore rw_sem ;
   struct rcuwait writer ;
   int readers_block ;
};
#line 10  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/delayed_call.h"
struct delayed_call {
   void (*fn)(void *) ;
   void *arg ;
};
#line 36  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/uuid.h"
struct __anonstruct_uuid_t_451 {
   __u8 b[16U] ;
};
#line 36  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/uuid.h"
typedef struct __anonstruct_uuid_t_451 uuid_t;
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uuid.h"
typedef u32 errseq_t;
#line 72  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/iocontext.h"
union __anonunion_452 {
   struct list_head q_node ;
   struct kmem_cache *__rcu_icq_cache ;
};
#line 72  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/iocontext.h"
union __anonunion_453 {
   struct hlist_node ioc_node ;
   struct callback_head __rcu_head ;
};
#line 72  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/iocontext.h"
struct io_cq {
   struct request_queue *q ;
   struct io_context *ioc ;
   union __anonunion_452 __anonCompField_io_cq_69 ;
   union __anonunion_453 __anonCompField_io_cq_70 ;
   unsigned int flags ;
};
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/iocontext.h"
struct io_context {
   atomic_long_t refcount ;
   atomic_t active_ref ;
   atomic_t nr_tasks ;
   spinlock_t lock ;
   unsigned short ioprio ;
   int nr_batch_requests ;
   unsigned long last_waited ;
   struct xarray icq_tree ;
   struct io_cq *icq_hint ;
   struct hlist_head icq_list ;
   struct work_struct release_work ;
};
#line 286  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fs.h"
struct bdi_writeback;
#line 287 
struct bio;
#line 288 
struct export_operations;
#line 289 
struct hd_geometry;
#line 290 
struct kstatfs;
#line 291 
struct swap_info_struct;
#line 292 
struct fscrypt_info;
#line 293 
struct fscrypt_operations;
#line 294 
struct fsverity_info;
#line 295 
struct fsverity_operations;
#line 296 
struct fs_parameter_description;
#line 224  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct iattr {
   unsigned int ia_valid ;
   umode_t ia_mode ;
   kuid_t ia_uid ;
   kgid_t ia_gid ;
   loff_t ia_size ;
   struct timespec64 ia_atime ;
   struct timespec64 ia_mtime ;
   struct timespec64 ia_ctime ;
   struct file *ia_file ;
};
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/percpu_counter.h"
struct percpu_counter {
   raw_spinlock_t lock ;
   s64 count ;
   struct list_head list ;
   s32 *counters ;
};
#line 214  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dqblk_xfs.h"
struct dquot;
#line 215 
struct kqid;
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/projid.h"
typedef __kernel_uid32_t projid_t;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/projid.h"
struct __anonstruct_kprojid_t_454 {
   projid_t val ;
};
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/projid.h"
typedef struct __anonstruct_kprojid_t_454 kprojid_t;
#line 180  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/quota.h"
enum quota_type {
    USRQUOTA = 0,
    GRPQUOTA = 1,
    PRJQUOTA = 2
};
#line 66  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
typedef long long qsize_t;
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
union __anonunion_455 {
   kuid_t uid ;
   kgid_t gid ;
   kprojid_t projid ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct kqid {
   union __anonunion_455 __anonCompField_kqid_71 ;
   enum quota_type type ;
};
#line 205  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct mem_dqblk {
   qsize_t dqb_bhardlimit ;
   qsize_t dqb_bsoftlimit ;
   qsize_t dqb_curspace ;
   qsize_t dqb_rsvspace ;
   qsize_t dqb_ihardlimit ;
   qsize_t dqb_isoftlimit ;
   qsize_t dqb_curinodes ;
   time64_t dqb_btime ;
   time64_t dqb_itime ;
};
#line 216 
struct quota_format_type;
#line 222  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct mem_dqinfo {
   struct quota_format_type *dqi_format ;
   int dqi_fmt_id ;
   struct list_head dqi_dirty_list ;
   unsigned long dqi_flags ;
   unsigned int dqi_bgrace ;
   unsigned int dqi_igrace ;
   qsize_t dqi_max_spc_limit ;
   qsize_t dqi_max_ino_limit ;
   void *dqi_priv ;
};
#line 294  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct dquot {
   struct hlist_node dq_hash ;
   struct list_head dq_inuse ;
   struct list_head dq_free ;
   struct list_head dq_dirty ;
   struct mutex dq_lock ;
   spinlock_t dq_dqb_lock ;
   atomic_t dq_count ;
   struct super_block *dq_sb ;
   struct kqid dq_id ;
   loff_t dq_off ;
   unsigned long dq_flags ;
   struct mem_dqblk dq_dqb ;
};
#line 310  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct quota_format_ops {
   int (*check_quota_file)(struct super_block *, int ) ;
   int (*read_file_info)(struct super_block *, int ) ;
   int (*write_file_info)(struct super_block *, int ) ;
   int (*free_file_info)(struct super_block *, int ) ;
   int (*read_dqblk)(struct dquot *) ;
   int (*commit_dqblk)(struct dquot *) ;
   int (*release_dqblk)(struct dquot *) ;
   int (*get_next_id)(struct super_block *, struct kqid *) ;
};
#line 322  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct dquot_operations {
   int (*write_dquot)(struct dquot *) ;
   struct dquot *(*alloc_dquot)(struct super_block *, int ) ;
   void (*destroy_dquot)(struct dquot *) ;
   int (*acquire_dquot)(struct dquot *) ;
   int (*release_dquot)(struct dquot *) ;
   int (*mark_dirty)(struct dquot *) ;
   int (*write_info)(struct super_block *, int ) ;
   qsize_t *(*get_reserved_space)(struct inode *) ;
   int (*get_projid)(struct inode *, kprojid_t *) ;
   int (*get_inode_usage)(struct inode *, qsize_t *) ;
   int (*get_next_id)(struct super_block *, struct kqid *) ;
};
#line 343  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct qc_dqblk {
   int d_fieldmask ;
   u64 d_spc_hardlimit ;
   u64 d_spc_softlimit ;
   u64 d_ino_hardlimit ;
   u64 d_ino_softlimit ;
   u64 d_space ;
   u64 d_ino_count ;
   s64 d_ino_timer ;
   s64 d_spc_timer ;
   int d_ino_warns ;
   int d_spc_warns ;
   u64 d_rt_spc_hardlimit ;
   u64 d_rt_spc_softlimit ;
   u64 d_rt_space ;
   s64 d_rt_spc_timer ;
   int d_rt_spc_warns ;
};
#line 395  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct qc_type_state {
   unsigned int flags ;
   unsigned int spc_timelimit ;
   unsigned int ino_timelimit ;
   unsigned int rt_spc_timelimit ;
   unsigned int spc_warnlimit ;
   unsigned int ino_warnlimit ;
   unsigned int rt_spc_warnlimit ;
   unsigned long long ino ;
   blkcnt_t blocks ;
   blkcnt_t nextents ;
};
#line 409  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct qc_state {
   unsigned int s_incoredqs ;
   struct qc_type_state s_state[3U] ;
};
#line 415  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct qc_info {
   int i_fieldmask ;
   unsigned int i_flags ;
   unsigned int i_spc_timelimit ;
   unsigned int i_ino_timelimit ;
   unsigned int i_rt_spc_timelimit ;
   unsigned int i_spc_warnlimit ;
   unsigned int i_ino_warnlimit ;
   unsigned int i_rt_spc_warnlimit ;
};
#line 428  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct quotactl_ops {
   int (*quota_on)(struct super_block *, int , int , struct path *) ;
   int (*quota_off)(struct super_block *, int ) ;
   int (*quota_enable)(struct super_block *, unsigned int ) ;
   int (*quota_disable)(struct super_block *, unsigned int ) ;
   int (*quota_sync)(struct super_block *, int ) ;
   int (*set_info)(struct super_block *, int , struct qc_info *) ;
   int (*get_dqblk)(struct super_block *, struct kqid , struct qc_dqblk *) ;
   int (*get_nextdqblk)(struct super_block *, struct kqid *, struct qc_dqblk *) ;
   int (*set_dqblk)(struct super_block *, struct kqid , struct qc_dqblk *) ;
   int (*get_state)(struct super_block *, struct qc_state *) ;
   int (*rm_xquota)(struct super_block *, unsigned int ) ;
};
#line 443  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct quota_format_type {
   int qf_fmt_id ;
   struct quota_format_ops *qf_ops ;
   struct module *qf_owner ;
   struct quota_format_type *qf_next ;
};
#line 518  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct quota_info {
   unsigned int flags ;
   struct rw_semaphore dqio_sem ;
   struct inode *files[3U] ;
   struct mem_dqinfo info[3U] ;
   struct quota_format_ops *ops[3U] ;
};
#line 538 
struct writeback_control;
#line 539 
enum rw_hint {
    WRITE_LIFE_NOT_SET = 0,
    WRITE_LIFE_NONE = 1,
    WRITE_LIFE_SHORT = 2,
    WRITE_LIFE_MEDIUM = 3,
    WRITE_LIFE_LONG = 4,
    WRITE_LIFE_EXTREME = 5
};
#line 318  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct kiocb {
   struct file *ki_filp ;
   loff_t ki_pos ;
   void (*ki_complete)(struct kiocb *, long , long ) ;
   void *private ;
   int ki_flags ;
   u16 ki_hint ;
   u16 ki_ioprio ;
   unsigned int ki_cookie ;
};
#line 339  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
union __anonunion_arg_457 {
   char *buf ;
   void *data ;
};
#line 339  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct __anonstruct_read_descriptor_t_456 {
   size_t written ;
   size_t count ;
   union __anonunion_arg_457 arg ;
   int error ;
};
#line 339  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
typedef struct __anonstruct_read_descriptor_t_456 read_descriptor_t;
#line 362  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct address_space_operations {
   int (*writepage)(struct page *, struct writeback_control *) ;
   int (*readpage)(struct file *, struct page *) ;
   int (*writepages)(struct address_space *, struct writeback_control *) ;
   int (*set_page_dirty)(struct page *) ;
   int (*readpages)(struct file *, struct address_space *, struct list_head *, unsigned int ) ;
   int (*write_begin)(struct file *, struct address_space *, loff_t , unsigned int , unsigned int , struct page **, void **) ;
   int (*write_end)(struct file *, struct address_space *, loff_t , unsigned int , unsigned int , struct page *, void *) ;
   sector_t (*bmap)(struct address_space *, sector_t ) ;
   void (*invalidatepage)(struct page *, unsigned int , unsigned int ) ;
   int (*releasepage)(struct page *, gfp_t ) ;
   void (*freepage)(struct page *) ;
   ssize_t (*direct_IO)(struct kiocb *, struct iov_iter *) ;
   int (*migratepage)(struct address_space *, struct page *, struct page *, enum migrate_mode ) ;
   bool (*isolate_page)(struct page *, isolate_mode_t ) ;
   void (*putback_page)(struct page *) ;
   int (*launder_page)(struct page *) ;
   int (*is_partially_uptodate)(struct page *, unsigned long , unsigned long ) ;
   void (*is_dirty_writeback)(struct page *, bool *, bool *) ;
   int (*error_remove_page)(struct address_space *, struct page *) ;
   int (*swap_activate)(struct swap_info_struct *, struct file *, sector_t *) ;
   void (*swap_deactivate)(struct file *) ;
};
#line 445  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct address_space {
   struct inode *host ;
   struct xarray i_pages ;
   gfp_t gfp_mask ;
   atomic_t i_mmap_writable ;
   atomic_t nr_thps ;
   struct rb_root_cached i_mmap ;
   struct rw_semaphore i_mmap_rwsem ;
   unsigned long nrpages ;
   unsigned long nrexceptional ;
   unsigned long writeback_index ;
   struct address_space_operations *a_ops ;
   unsigned long flags ;
   errseq_t wb_err ;
   spinlock_t private_lock ;
   struct list_head private_list ;
   void *private_data ;
} __attribute__((__designated_init__, __aligned__(8)));
#line 473 
struct hd_struct;
#line 473 
struct gendisk;
#line 473  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct block_device {
   dev_t bd_dev ;
   int bd_openers ;
   struct inode *bd_inode ;
   struct super_block *bd_super ;
   struct mutex bd_mutex ;
   void *bd_claiming ;
   void *bd_holder ;
   int bd_holders ;
   bool bd_write_holder ;
   struct list_head bd_holder_disks ;
   struct block_device *bd_contains ;
   unsigned int bd_block_size ;
   u8 bd_partno ;
   struct hd_struct *bd_part ;
   unsigned int bd_part_count ;
   int bd_invalidated ;
   struct gendisk *bd_disk ;
   struct request_queue *bd_queue ;
   struct backing_dev_info *bd_bdi ;
   struct list_head bd_list ;
   unsigned long bd_private ;
   int bd_fsfreeze_count ;
   struct mutex bd_fsfreeze_mutex ;
} __attribute__((__designated_init__));
#line 587 
struct posix_acl;
#line 614 
struct fsnotify_mark_connector;
#line 628 
struct inode_operations;
#line 628  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
union __anonunion_460 {
   unsigned int i_nlink ;
   unsigned int __i_nlink ;
};
#line 628  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
union __anonunion_461 {
   struct hlist_head i_dentry ;
   struct callback_head i_rcu ;
};
#line 628  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
union __anonunion_462 {
   struct file_operations *i_fop ;
   void (*free_inode)(struct inode *) ;
};
#line 628 
struct file_lock_context;
#line 628  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
union __anonunion_463 {
   struct pipe_inode_info *i_pipe ;
   struct block_device *i_bdev ;
   struct cdev *i_cdev ;
   char *i_link ;
   unsigned int i_dir_seq ;
};
#line 628  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct inode {
   umode_t i_mode ;
   unsigned short i_opflags ;
   kuid_t i_uid ;
   kgid_t i_gid ;
   unsigned int i_flags ;
   struct posix_acl *i_acl ;
   struct posix_acl *i_default_acl ;
   struct inode_operations *i_op ;
   struct super_block *i_sb ;
   struct address_space *i_mapping ;
   void *i_security ;
   unsigned long i_ino ;
   union __anonunion_460 __anonCompField_inode_72 ;
   dev_t i_rdev ;
   loff_t i_size ;
   struct timespec64 i_atime ;
   struct timespec64 i_mtime ;
   struct timespec64 i_ctime ;
   spinlock_t i_lock ;
   unsigned short i_bytes ;
   u8 i_blkbits ;
   u8 i_write_hint ;
   blkcnt_t i_blocks ;
   unsigned long i_state ;
   struct rw_semaphore i_rwsem ;
   unsigned long dirtied_when ;
   unsigned long dirtied_time_when ;
   struct hlist_node i_hash ;
   struct list_head i_io_list ;
   struct bdi_writeback *i_wb ;
   int i_wb_frn_winner ;
   u16 i_wb_frn_avg_time ;
   u16 i_wb_frn_history ;
   struct list_head i_lru ;
   struct list_head i_sb_list ;
   struct list_head i_wb_list ;
   union __anonunion_461 __anonCompField_inode_73 ;
   atomic64_t i_version ;
   atomic_t i_count ;
   atomic_t i_dio_count ;
   atomic_t i_writecount ;
   atomic_t i_readcount ;
   union __anonunion_462 __anonCompField_inode_74 ;
   struct file_lock_context *i_flctx ;
   struct address_space i_data ;
   struct list_head i_devices ;
   union __anonunion_463 __anonCompField_inode_75 ;
   __u32 i_generation ;
   __u32 i_fsnotify_mask ;
   struct fsnotify_mark_connector *i_fsnotify_marks ;
   struct fscrypt_info *i_crypt_info ;
   struct fsverity_info *i_verity_info ;
   void *i_private ;
} __attribute__((__designated_init__));
#line 904  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct fown_struct {
   rwlock_t lock ;
   struct pid *pid ;
   enum pid_type pid_type ;
   kuid_t uid ;
   kuid_t euid ;
   int signum ;
};
#line 915  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct file_ra_state {
   unsigned long start ;
   unsigned int size ;
   unsigned int async_size ;
   unsigned int ra_pages ;
   unsigned int mmap_miss ;
   loff_t prev_pos ;
};
#line 935  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
union __anonunion_f_u_464 {
   struct llist_node fu_llist ;
   struct callback_head fu_rcuhead ;
};
#line 935  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct file {
   union __anonunion_f_u_464 f_u ;
   struct path f_path ;
   struct inode *f_inode ;
   struct file_operations *f_op ;
   spinlock_t f_lock ;
   enum rw_hint f_write_hint ;
   atomic_long_t f_count ;
   unsigned int f_flags ;
   fmode_t f_mode ;
   struct mutex f_pos_lock ;
   loff_t f_pos ;
   struct fown_struct f_owner ;
   struct cred *f_cred ;
   struct file_ra_state f_ra ;
   u64 f_version ;
   void *f_security ;
   void *private_data ;
   struct list_head f_ep_links ;
   struct list_head f_tfile_llink ;
   struct address_space *f_mapping ;
   errseq_t f_wb_err ;
} __attribute__((__designated_init__, __aligned__(4)));
#line 988  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
typedef void *fl_owner_t;
#line 1026 
struct file_lock;
#line 1029  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct file_lock_operations {
   void (*fl_copy_lock)(struct file_lock *, struct file_lock *) ;
   void (*fl_release_private)(struct file_lock *) ;
};
#line 1034  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct lock_manager_operations {
   fl_owner_t (*lm_get_owner)(fl_owner_t ) ;
   void (*lm_put_owner)(fl_owner_t ) ;
   void (*lm_notify)(struct file_lock *) ;
   int (*lm_grant)(struct file_lock *, int ) ;
   bool (*lm_break)(struct file_lock *) ;
   int (*lm_change)(struct file_lock *, int , struct list_head *) ;
   void (*lm_setup)(struct file_lock *, void **) ;
};
#line 1052 
struct net;
#line 1058 
struct nlm_lockowner;
#line 10  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/nfs_fs_i.h"
struct nfs_lock_info {
   u32 state ;
   struct nlm_lockowner *owner ;
   struct list_head list ;
};
#line 15 
struct nfs4_lock_state;
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/nfs_fs_i.h"
struct nfs4_lock_info {
   struct nfs4_lock_state *owner ;
};
#line 1079  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct fasync_struct;
#line 1079  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct __anonstruct_afs_466 {
   struct list_head link ;
   int state ;
   unsigned int debug_id ;
};
#line 1079  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
union __anonunion_fl_u_465 {
   struct nfs_lock_info nfs_fl ;
   struct nfs4_lock_info nfs4_fl ;
   struct __anonstruct_afs_466 afs ;
};
#line 1079  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct file_lock {
   struct file_lock *fl_blocker ;
   struct list_head fl_list ;
   struct hlist_node fl_link ;
   struct list_head fl_blocked_requests ;
   struct list_head fl_blocked_member ;
   fl_owner_t fl_owner ;
   unsigned int fl_flags ;
   unsigned char fl_type ;
   unsigned int fl_pid ;
   int fl_link_cpu ;
   wait_queue_head_t fl_wait ;
   struct file *fl_file ;
   loff_t fl_start ;
   loff_t fl_end ;
   struct fasync_struct *fl_fasync ;
   unsigned long fl_break_time ;
   unsigned long fl_downgrade_time ;
   struct file_lock_operations *fl_ops ;
   struct lock_manager_operations *fl_lmops ;
   union __anonunion_fl_u_465 fl_u ;
} __attribute__((__designated_init__));
#line 1117  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct file_lock_context {
   spinlock_t flc_lock ;
   struct list_head flc_flock ;
   struct list_head flc_posix ;
   struct list_head flc_lease ;
};
#line 1331  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct fasync_struct {
   rwlock_t fa_lock ;
   int magic ;
   int fa_fd ;
   struct fasync_struct *fa_next ;
   struct file *fa_file ;
   struct callback_head fa_rcu ;
};
#line 1418  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct sb_writers {
   int frozen ;
   wait_queue_head_t wait_unfrozen ;
   struct percpu_rw_semaphore rw_sem[3U] ;
};
#line 1424 
struct super_operations;
#line 1424 
struct xattr_handler;
#line 1424 
struct mtd_info;
#line 1424  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct super_block {
   struct list_head s_list ;
   dev_t s_dev ;
   unsigned char s_blocksize_bits ;
   unsigned long s_blocksize ;
   loff_t s_maxbytes ;
   struct file_system_type *s_type ;
   struct super_operations *s_op ;
   struct dquot_operations *dq_op ;
   struct quotactl_ops *s_qcop ;
   struct export_operations *s_export_op ;
   unsigned long s_flags ;
   unsigned long s_iflags ;
   unsigned long s_magic ;
   struct dentry *s_root ;
   struct rw_semaphore s_umount ;
   int s_count ;
   atomic_t s_active ;
   void *s_security ;
   struct xattr_handler **s_xattr ;
   struct fscrypt_operations *s_cop ;
   struct key *s_master_keys ;
   struct fsverity_operations *s_vop ;
   struct hlist_bl_head s_roots ;
   struct list_head s_mounts ;
   struct block_device *s_bdev ;
   struct backing_dev_info *s_bdi ;
   struct mtd_info *s_mtd ;
   struct hlist_node s_instances ;
   unsigned int s_quota_types ;
   struct quota_info s_dquot ;
   struct sb_writers s_writers ;
   void *s_fs_info ;
   u32 s_time_gran ;
   time64_t s_time_min ;
   time64_t s_time_max ;
   __u32 s_fsnotify_mask ;
   struct fsnotify_mark_connector *s_fsnotify_marks ;
   char s_id[32U] ;
   uuid_t s_uuid ;
   unsigned int s_max_links ;
   fmode_t s_mode ;
   struct mutex s_vfs_rename_mutex ;
   char *s_subtype ;
   struct dentry_operations *s_d_op ;
   int cleancache_poolid ;
   struct shrinker s_shrink ;
   atomic_long_t s_remove_count ;
   atomic_long_t s_fsnotify_inode_refs ;
   int s_readonly_remount ;
   struct workqueue_struct *s_dio_done_wq ;
   struct hlist_head s_pins ;
   struct user_namespace *s_user_ns ;
   struct list_lru s_dentry_lru ;
   struct list_lru s_inode_lru ;
   struct callback_head rcu ;
   struct work_struct destroy_work ;
   struct mutex s_sync_lock ;
   int s_stack_depth ;
   spinlock_t s_inode_list_lock ;
   struct list_head s_inodes ;
   spinlock_t s_inode_wblist_lock ;
   struct list_head s_inodes_wb ;
} __attribute__((__designated_init__));
#line 1746  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct fiemap_extent_info {
   unsigned int fi_flags ;
   unsigned int fi_extents_mapped ;
   unsigned int fi_extents_max ;
   struct fiemap_extent *fi_extents_start ;
};
#line 1756 
struct dir_context;
#line 1767  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct dir_context {
   int (*actor)(struct dir_context *, char *, int , loff_t , u64 , unsigned int ) ;
   loff_t pos ;
};
#line 1771 
struct block_device_operations;
#line 1821  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct file_operations {
   struct module *owner ;
   loff_t (*llseek)(struct file *, loff_t , int ) ;
   ssize_t (*read)(struct file *, char *, size_t , loff_t *) ;
   ssize_t (*write)(struct file *, char *, size_t , loff_t *) ;
   ssize_t (*read_iter)(struct kiocb *, struct iov_iter *) ;
   ssize_t (*write_iter)(struct kiocb *, struct iov_iter *) ;
   int (*iopoll)(struct kiocb *, bool ) ;
   int (*iterate)(struct file *, struct dir_context *) ;
   int (*iterate_shared)(struct file *, struct dir_context *) ;
   __poll_t (*poll)(struct file *, struct poll_table_struct *) ;
   long (*unlocked_ioctl)(struct file *, unsigned int , unsigned long ) ;
   long (*compat_ioctl)(struct file *, unsigned int , unsigned long ) ;
   int (*mmap)(struct file *, struct vm_area_struct *) ;
   unsigned long mmap_supported_flags ;
   int (*open)(struct inode *, struct file *) ;
   int (*flush)(struct file *, fl_owner_t ) ;
   int (*release)(struct inode *, struct file *) ;
   int (*fsync)(struct file *, loff_t , loff_t , int ) ;
   int (*fasync)(int , struct file *, int ) ;
   int (*lock)(struct file *, int , struct file_lock *) ;
   ssize_t (*sendpage)(struct file *, struct page *, int , size_t , loff_t *, int ) ;
   unsigned long (*get_unmapped_area)(struct file *, unsigned long , unsigned long , unsigned long , unsigned long ) ;
   int (*check_flags)(int ) ;
   int (*flock)(struct file *, int , struct file_lock *) ;
   ssize_t (*splice_write)(struct pipe_inode_info *, struct file *, loff_t *, size_t , unsigned int ) ;
   ssize_t (*splice_read)(struct file *, loff_t *, struct pipe_inode_info *, size_t , unsigned int ) ;
   int (*setlease)(struct file *, long , struct file_lock **, void **) ;
   long (*fallocate)(struct file *, int , loff_t , loff_t ) ;
   void (*show_fdinfo)(struct seq_file *, struct file *) ;
   ssize_t (*copy_file_range)(struct file *, loff_t , struct file *, loff_t , size_t , unsigned int ) ;
   loff_t (*remap_file_range)(struct file *, loff_t , struct file *, loff_t , loff_t , unsigned int ) ;
   int (*fadvise)(struct file *, loff_t , loff_t , int ) ;
} __attribute__((__designated_init__));
#line 1863  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct inode_operations {
   struct dentry *(*lookup)(struct inode *, struct dentry *, unsigned int ) ;
   char *(*get_link)(struct dentry *, struct inode *, struct delayed_call *) ;
   int (*permission)(struct inode *, int ) ;
   struct posix_acl *(*get_acl)(struct inode *, int ) ;
   int (*readlink)(struct dentry *, char *, int ) ;
   int (*create)(struct inode *, struct dentry *, umode_t , bool ) ;
   int (*link)(struct dentry *, struct inode *, struct dentry *) ;
   int (*unlink)(struct inode *, struct dentry *) ;
   int (*symlink)(struct inode *, struct dentry *, char *) ;
   int (*mkdir)(struct inode *, struct dentry *, umode_t ) ;
   int (*rmdir)(struct inode *, struct dentry *) ;
   int (*mknod)(struct inode *, struct dentry *, umode_t , dev_t ) ;
   int (*rename)(struct inode *, struct dentry *, struct inode *, struct dentry *, unsigned int ) ;
   int (*setattr)(struct dentry *, struct iattr *) ;
   int (*getattr)(struct path *, struct kstat *, u32 , unsigned int ) ;
   ssize_t (*listxattr)(struct dentry *, char *, size_t ) ;
   int (*fiemap)(struct inode *, struct fiemap_extent_info *, u64 , u64 ) ;
   int (*update_time)(struct inode *, struct timespec64 *, int ) ;
   int (*atomic_open)(struct inode *, struct dentry *, struct file *, unsigned int , umode_t ) ;
   int (*tmpfile)(struct inode *, struct dentry *, umode_t ) ;
   int (*set_acl)(struct inode *, struct posix_acl *, int ) ;
} __attribute__((__aligned__(64)));
#line 1942  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct super_operations {
   struct inode *(*alloc_inode)(struct super_block *) ;
   void (*destroy_inode)(struct inode *) ;
   void (*free_inode)(struct inode *) ;
   void (*dirty_inode)(struct inode *, int ) ;
   int (*write_inode)(struct inode *, struct writeback_control *) ;
   int (*drop_inode)(struct inode *) ;
   void (*evict_inode)(struct inode *) ;
   void (*put_super)(struct super_block *) ;
   int (*sync_fs)(struct super_block *, int ) ;
   int (*freeze_super)(struct super_block *) ;
   int (*freeze_fs)(struct super_block *) ;
   int (*thaw_super)(struct super_block *) ;
   int (*unfreeze_fs)(struct super_block *) ;
   int (*statfs)(struct dentry *, struct kstatfs *) ;
   int (*remount_fs)(struct super_block *, int *, char *) ;
   void (*umount_begin)(struct super_block *) ;
   int (*show_options)(struct seq_file *, struct dentry *) ;
   int (*show_devname)(struct seq_file *, struct dentry *) ;
   int (*show_path)(struct seq_file *, struct dentry *) ;
   int (*show_stats)(struct seq_file *, struct dentry *) ;
   ssize_t (*quota_read)(struct super_block *, int , char *, size_t , loff_t ) ;
   ssize_t (*quota_write)(struct super_block *, int , char *, size_t , loff_t ) ;
   struct dquot **(*get_dquots)(struct inode *) ;
   int (*bdev_try_to_free_page)(struct super_block *, struct page *, gfp_t ) ;
   long (*nr_cached_objects)(struct super_block *, struct shrink_control *) ;
   long (*free_cached_objects)(struct super_block *, struct shrink_control *) ;
};
#line 2217  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct file_system_type {
   char *name ;
   int fs_flags ;
   int (*init_fs_context)(struct fs_context *) ;
   struct fs_parameter_description *parameters ;
   struct dentry *(*mount)(struct file_system_type *, int , char *, void *) ;
   void (*kill_sb)(struct super_block *) ;
   struct module *owner ;
   struct file_system_type *next ;
   struct hlist_head fs_supers ;
   struct lock_class_key s_lock_key ;
   struct lock_class_key s_umount_key ;
   struct lock_class_key s_vfs_rename_key ;
   struct lock_class_key s_writers_key[3U] ;
   struct lock_class_key i_lock_key ;
   struct lock_class_key i_mutex_key ;
   struct lock_class_key i_mutex_dir_key ;
};
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/compat.h"
typedef s32 compat_long_t;
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/compat.h"
typedef u32 compat_uptr_t;
#line 367  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/compat.h"
struct compat_robust_list {
   compat_uptr_t next ;
};
#line 371  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/compat.h"
struct compat_robust_list_head {
   struct compat_robust_list list ;
   compat_long_t futex_offset ;
   compat_uptr_t list_op_pending ;
};
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ioport.h"
struct resource {
   resource_size_t start ;
   resource_size_t end ;
   char *name ;
   unsigned long flags ;
   unsigned long desc ;
   struct resource *parent ;
   struct resource *sibling ;
   struct resource *child ;
};
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memremap.h"
struct vmem_altmap {
   unsigned long base_pfn ;
   unsigned long end_pfn ;
   unsigned long reserve ;
   unsigned long free ;
   unsigned long align ;
   unsigned long alloc ;
};
#line 26 
enum memory_type {
    MEMORY_DEVICE_PRIVATE = 1,
    MEMORY_DEVICE_FS_DAX = 2,
    MEMORY_DEVICE_DEVDAX = 3,
    MEMORY_DEVICE_PCI_P2PDMA = 4
};
#line 67  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memremap.h"
struct dev_pagemap_ops {
   void (*page_free)(struct page *) ;
   void (*kill)(struct dev_pagemap *) ;
   void (*cleanup)(struct dev_pagemap *) ;
   vm_fault_t (*migrate_to_ram)(struct vm_fault *) ;
};
#line 107  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memremap.h"
struct dev_pagemap {
   struct vmem_altmap altmap ;
   struct resource res ;
   struct percpu_ref *ref ;
   struct percpu_ref internal_ref ;
   struct completion done ;
   enum memory_type type ;
   unsigned int flags ;
   struct dev_pagemap_ops *ops ;
};
#line 417  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm.h"
struct vm_fault {
   struct vm_area_struct *vma ;
   unsigned int flags ;
   gfp_t gfp_mask ;
   unsigned long pgoff ;
   unsigned long address ;
   pmd_t *pmd ;
   pud_t *pud ;
   pte_t orig_pte ;
   struct page *cow_page ;
   struct mem_cgroup *memcg ;
   struct page *page ;
   pte_t *pte ;
   spinlock_t *ptl ;
   pgtable_t prealloc_pte ;
};
#line 448 
enum page_entry_size {
    PE_SIZE_PTE = 0,
    PE_SIZE_PMD = 1,
    PE_SIZE_PUD = 2
};
#line 467  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm.h"
struct vm_operations_struct {
   void (*open)(struct vm_area_struct *) ;
   void (*close)(struct vm_area_struct *) ;
   int (*split)(struct vm_area_struct *, unsigned long ) ;
   int (*mremap)(struct vm_area_struct *) ;
   vm_fault_t (*fault)(struct vm_fault *) ;
   vm_fault_t (*huge_fault)(struct vm_fault *, enum page_entry_size ) ;
   void (*map_pages)(struct vm_fault *, unsigned long , unsigned long ) ;
   unsigned long (*pagesize)(struct vm_area_struct *) ;
   vm_fault_t (*page_mkwrite)(struct vm_fault *) ;
   vm_fault_t (*pfn_mkwrite)(struct vm_fault *) ;
   int (*access)(struct vm_area_struct *, unsigned long , void *, int , int ) ;
   char *(*name)(struct vm_area_struct *) ;
   int (*set_policy)(struct vm_area_struct *, struct mempolicy *) ;
   struct mempolicy *(*get_policy)(struct vm_area_struct *, unsigned long ) ;
   struct page *(*find_special_page)(struct vm_area_struct *, unsigned long ) ;
};
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bvec.h"
struct bio_vec {
   struct page *bv_page ;
   unsigned int bv_len ;
   unsigned int bv_offset ;
};
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bvec.h"
struct bvec_iter {
   sector_t bi_sector ;
   unsigned int bi_size ;
   unsigned int bi_idx ;
   unsigned int bi_bvec_done ;
};
#line 201  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/random.h"
enum ldv_9882 {
    SS_FREE = 0,
    SS_UNCONNECTED = 1,
    SS_CONNECTING = 2,
    SS_CONNECTED = 3,
    SS_DISCONNECTING = 4
};
#line 209  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/random.h"
typedef enum ldv_9882 socket_state;
#line 94  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/net.h"
struct socket_wq {
   wait_queue_head_t wait ;
   struct fasync_struct *fasync_list ;
   unsigned long flags ;
   struct callback_head rcu ;
} __attribute__((__aligned__(64)));
#line 112 
struct proto_ops;
#line 112  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/net.h"
struct socket {
   socket_state state ;
   short type ;
   unsigned long flags ;
   struct file *file ;
   struct sock *sk ;
   struct proto_ops *ops ;
   struct socket_wq wq ;
};
#line 125 
struct sk_buff;
#line 135  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/net.h"
struct proto_ops {
   int family ;
   struct module *owner ;
   int (*release)(struct socket *) ;
   int (*bind)(struct socket *, struct sockaddr *, int ) ;
   int (*connect)(struct socket *, struct sockaddr *, int , int ) ;
   int (*socketpair)(struct socket *, struct socket *) ;
   int (*accept)(struct socket *, struct socket *, int , bool ) ;
   int (*getname)(struct socket *, struct sockaddr *, int ) ;
   __poll_t (*poll)(struct file *, struct socket *, struct poll_table_struct *) ;
   int (*ioctl)(struct socket *, unsigned int , unsigned long ) ;
   int (*compat_ioctl)(struct socket *, unsigned int , unsigned long ) ;
   int (*gettstamp)(struct socket *, void *, bool , bool ) ;
   int (*listen)(struct socket *, int ) ;
   int (*shutdown)(struct socket *, int ) ;
   int (*setsockopt)(struct socket *, int , int , char *, unsigned int ) ;
   int (*getsockopt)(struct socket *, int , int , char *, int *) ;
   int (*compat_setsockopt)(struct socket *, int , int , char *, unsigned int ) ;
   int (*compat_getsockopt)(struct socket *, int , int , char *, int *) ;
   int (*sendmsg)(struct socket *, struct msghdr *, size_t ) ;
   int (*recvmsg)(struct socket *, struct msghdr *, size_t , int ) ;
   int (*mmap)(struct file *, struct socket *, struct vm_area_struct *) ;
   ssize_t (*sendpage)(struct socket *, struct page *, int , size_t , int ) ;
   ssize_t (*splice_read)(struct socket *, loff_t *, struct pipe_inode_info *, size_t , unsigned int ) ;
   int (*set_peek_off)(struct sock *, int ) ;
   int (*peek_len)(struct socket *) ;
   int (*read_sock)(struct sock *, read_descriptor_t *, int (*)(read_descriptor_t *, struct sk_buff *, unsigned int , size_t )) ;
   int (*sendpage_locked)(struct sock *, struct page *, int , size_t , int ) ;
   int (*sendmsg_locked)(struct sock *, struct msghdr *, size_t ) ;
   int (*set_rcvlowat)(struct sock *, int ) ;
};
#line 162  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/checksum_64.h"
struct in6_addr;
#line 50  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm.h"
struct pm_message {
   int event ;
};
#line 53  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm.h"
typedef struct pm_message pm_message_t;
#line 278  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm.h"
struct dev_pm_ops {
   int (*prepare)(struct device *) ;
   void (*complete)(struct device *) ;
   int (*suspend)(struct device *) ;
   int (*resume)(struct device *) ;
   int (*freeze)(struct device *) ;
   int (*thaw)(struct device *) ;
   int (*poweroff)(struct device *) ;
   int (*restore)(struct device *) ;
   int (*suspend_late)(struct device *) ;
   int (*resume_early)(struct device *) ;
   int (*freeze_late)(struct device *) ;
   int (*thaw_early)(struct device *) ;
   int (*poweroff_late)(struct device *) ;
   int (*restore_early)(struct device *) ;
   int (*suspend_noirq)(struct device *) ;
   int (*resume_noirq)(struct device *) ;
   int (*freeze_noirq)(struct device *) ;
   int (*thaw_noirq)(struct device *) ;
   int (*poweroff_noirq)(struct device *) ;
   int (*restore_noirq)(struct device *) ;
   int (*runtime_suspend)(struct device *) ;
   int (*runtime_resume)(struct device *) ;
   int (*runtime_idle)(struct device *) ;
};
#line 303 
enum rpm_status {
    RPM_ACTIVE = 0,
    RPM_RESUMING = 1,
    RPM_SUSPENDED = 2,
    RPM_SUSPENDING = 3
};
#line 310 
enum rpm_request {
    RPM_REQ_NONE = 0,
    RPM_REQ_IDLE = 1,
    RPM_REQ_SUSPEND = 2,
    RPM_REQ_AUTOSUSPEND = 3,
    RPM_REQ_RESUME = 4
};
#line 318 
struct wakeup_source;
#line 319 
struct wake_irq;
#line 320 
struct pm_domain_data;
#line 530  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm.h"
struct pm_subsys_data {
   spinlock_t lock ;
   unsigned int refcount ;
   struct list_head clock_list ;
   struct pm_domain_data *domain_data ;
};
#line 573 
struct dev_pm_qos;
#line 573  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm.h"
struct dev_pm_info {
   pm_message_t power_state ;
   unsigned int can_wakeup : 1 ;
   unsigned int async_suspend : 1 ;
   bool in_dpm_list : 1 ;
   bool is_prepared : 1 ;
   bool is_suspended : 1 ;
   bool is_noirq_suspended : 1 ;
   bool is_late_suspended : 1 ;
   bool no_pm : 1 ;
   bool early_init : 1 ;
   bool direct_complete : 1 ;
   u32 driver_flags ;
   spinlock_t lock ;
   struct list_head entry ;
   struct completion completion ;
   struct wakeup_source *wakeup ;
   bool wakeup_path : 1 ;
   bool syscore : 1 ;
   bool no_pm_callbacks : 1 ;
   unsigned int must_resume : 1 ;
   unsigned int may_skip_resume : 1 ;
   struct hrtimer suspend_timer ;
   unsigned long timer_expires ;
   struct work_struct work ;
   wait_queue_head_t wait_queue ;
   struct wake_irq *wakeirq ;
   atomic_t usage_count ;
   atomic_t child_count ;
   unsigned int disable_depth : 3 ;
   unsigned int idle_notification : 1 ;
   unsigned int request_pending : 1 ;
   unsigned int deferred_resume : 1 ;
   unsigned int runtime_auto : 1 ;
   bool ignore_children : 1 ;
   unsigned int no_callbacks : 1 ;
   unsigned int irq_safe : 1 ;
   unsigned int use_autosuspend : 1 ;
   unsigned int timer_autosuspends : 1 ;
   unsigned int memalloc_noio : 1 ;
   unsigned int links_count ;
   enum rpm_request request ;
   enum rpm_status runtime_status ;
   int runtime_error ;
   int autosuspend_delay ;
   u64 last_busy ;
   u64 active_time ;
   u64 suspended_time ;
   u64 accounting_timestamp ;
   struct pm_subsys_data *subsys_data ;
   void (*set_latency_tolerance)(struct device *, s32 ) ;
   struct dev_pm_qos *qos ;
};
#line 650  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm.h"
struct dev_pm_domain {
   struct dev_pm_ops ops ;
   int (*start)(struct device *) ;
   void (*detach)(struct device *, bool ) ;
   int (*activate)(struct device *) ;
   void (*sync)(struct device *) ;
   void (*dismiss)(struct device *) ;
};
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ratelimit.h"
struct ratelimit_state {
   raw_spinlock_t lock ;
   int interval ;
   int burst ;
   int printed ;
   int missed ;
   unsigned long begin ;
   unsigned long flags ;
};
#line 5  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/device.h"
struct dev_archdata {
   void *iommu ;
};
#line 12 
struct dma_map_ops;
#line 23 
struct device_driver;
#line 24 
struct driver_private;
#line 25 
struct class;
#line 26 
struct subsys_private;
#line 27 
struct bus_type;
#line 28 
struct iommu_ops;
#line 29 
struct iommu_group;
#line 30 
struct iommu_fwspec;
#line 31 
struct dev_pin_info;
#line 32 
struct iommu_param;
#line 122  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct bus_type {
   char *name ;
   char *dev_name ;
   struct device *dev_root ;
   struct attribute_group **bus_groups ;
   struct attribute_group **dev_groups ;
   struct attribute_group **drv_groups ;
   int (*match)(struct device *, struct device_driver *) ;
   int (*uevent)(struct device *, struct kobj_uevent_env *) ;
   int (*probe)(struct device *) ;
   void (*sync_state)(struct device *) ;
   int (*remove)(struct device *) ;
   void (*shutdown)(struct device *) ;
   int (*online)(struct device *) ;
   int (*offline)(struct device *) ;
   int (*suspend)(struct device *, pm_message_t ) ;
   int (*resume)(struct device *) ;
   int (*num_vf)(struct device *) ;
   int (*dma_configure)(struct device *) ;
   struct dev_pm_ops *pm ;
   struct iommu_ops *iommu_ops ;
   struct subsys_private *p ;
   struct lock_class_key lock_key ;
   bool need_parent_lock ;
};
#line 164 
struct device_type;
#line 309 
enum probe_type {
    PROBE_DEFAULT_STRATEGY = 0,
    PROBE_PREFER_ASYNCHRONOUS = 1,
    PROBE_FORCE_SYNCHRONOUS = 2
};
#line 383 
struct of_device_id;
#line 383 
struct acpi_device_id;
#line 383  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct device_driver {
   char *name ;
   struct bus_type *bus ;
   struct module *owner ;
   char *mod_name ;
   bool suppress_bind_attrs ;
   enum probe_type probe_type ;
   struct of_device_id *of_match_table ;
   struct acpi_device_id *acpi_match_table ;
   int (*probe)(struct device *) ;
   void (*sync_state)(struct device *) ;
   int (*remove)(struct device *) ;
   void (*shutdown)(struct device *) ;
   int (*suspend)(struct device *, pm_message_t ) ;
   int (*resume)(struct device *) ;
   struct attribute_group **groups ;
   struct attribute_group **dev_groups ;
   struct dev_pm_ops *pm ;
   void (*coredump)(struct device *) ;
   struct driver_private *p ;
};
#line 589  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct class {
   char *name ;
   struct module *owner ;
   struct attribute_group **class_groups ;
   struct attribute_group **dev_groups ;
   struct kobject *dev_kobj ;
   int (*dev_uevent)(struct device *, struct kobj_uevent_env *) ;
   char *(*devnode)(struct device *, umode_t *) ;
   void (*class_release)(struct class *) ;
   void (*dev_release)(struct device *) ;
   int (*shutdown_pre)(struct device *) ;
   struct kobj_ns_type_operations *ns_type ;
   void *(*namespace)(struct device *) ;
   void (*get_ownership)(struct device *, kuid_t *, kgid_t *) ;
   struct dev_pm_ops *pm ;
   struct subsys_private *p ;
};
#line 809  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct device_type {
   char *name ;
   struct attribute_group **groups ;
   int (*uevent)(struct device *, struct kobj_uevent_env *) ;
   char *(*devnode)(struct device *, umode_t *, kuid_t *, kgid_t *) ;
   void (*release)(struct device *) ;
   struct dev_pm_ops *pm ;
};
#line 1008  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct device_dma_parameters {
   unsigned int max_segment_size ;
   unsigned long segment_boundary_mask ;
};
#line 1139 
enum dl_dev_state {
    DL_DEV_NO_DRIVER = 0,
    DL_DEV_PROBING = 1,
    DL_DEV_DRIVER_BOUND = 2,
    DL_DEV_UNBINDING = 3
};
#line 1164  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct dev_links_info {
   struct list_head suppliers ;
   struct list_head consumers ;
   struct list_head needs_suppliers ;
   struct list_head defer_sync ;
   bool need_for_probe ;
   enum dl_dev_state status ;
};
#line 1259 
struct dma_coherent_mem;
#line 1259 
struct cma;
#line 1259  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct device {
   struct kobject kobj ;
   struct device *parent ;
   struct device_private *p ;
   char *init_name ;
   struct device_type *type ;
   struct bus_type *bus ;
   struct device_driver *driver ;
   void *platform_data ;
   void *driver_data ;
   struct mutex lockdep_mutex ;
   struct mutex mutex ;
   struct dev_links_info links ;
   struct dev_pm_info power ;
   struct dev_pm_domain *pm_domain ;
   struct irq_domain *msi_domain ;
   struct dev_pin_info *pins ;
   struct list_head msi_list ;
   struct dma_map_ops *dma_ops ;
   u64 *dma_mask ;
   u64 coherent_dma_mask ;
   u64 bus_dma_limit ;
   unsigned long dma_pfn_offset ;
   struct device_dma_parameters *dma_parms ;
   struct list_head dma_pools ;
   struct dma_coherent_mem *dma_mem ;
   struct cma *cma_area ;
   struct dev_archdata archdata ;
   struct device_node *of_node ;
   struct fwnode_handle *fwnode ;
   int numa_node ;
   dev_t devt ;
   u32 id ;
   spinlock_t devres_lock ;
   struct list_head devres_head ;
   struct class *class ;
   struct attribute_group **groups ;
   void (*release)(struct device *) ;
   struct iommu_group *iommu_group ;
   struct iommu_fwspec *iommu_fwspec ;
   struct iommu_param *iommu_param ;
   bool offline_disabled : 1 ;
   bool offline : 1 ;
   bool of_node_reused : 1 ;
   bool state_synced : 1 ;
};
#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm_wakeup.h"
struct wakeup_source {
   char *name ;
   int id ;
   struct list_head entry ;
   spinlock_t lock ;
   struct wake_irq *wakeirq ;
   struct timer_list timer ;
   unsigned long timer_expires ;
   ktime_t total_time ;
   ktime_t max_time ;
   ktime_t last_time ;
   ktime_t start_prevent_time ;
   ktime_t prevent_sleep_time ;
   unsigned long event_count ;
   unsigned long active_count ;
   unsigned long relax_count ;
   unsigned long expire_count ;
   unsigned long wakeup_count ;
   struct device *dev ;
   bool active : 1 ;
   bool autosleep_enabled : 1 ;
};
#line 71  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-debug.h"
enum dma_data_direction {
    DMA_BIDIRECTIONAL = 0,
    DMA_TO_DEVICE = 1,
    DMA_FROM_DEVICE = 2,
    DMA_NONE = 3
};
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/scatterlist.h"
struct scatterlist {
   unsigned long page_link ;
   unsigned int offset ;
   unsigned int length ;
   dma_addr_t dma_address ;
   unsigned int dma_length ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/scatterlist.h"
struct sg_table {
   struct scatterlist *sgl ;
   unsigned int nents ;
   unsigned int orig_nents ;
};
#line 76  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
struct dma_map_ops {
   void *(*alloc)(struct device *, size_t , dma_addr_t *, gfp_t , unsigned long ) ;
   void (*free)(struct device *, size_t , void *, dma_addr_t , unsigned long ) ;
   int (*mmap)(struct device *, struct vm_area_struct *, void *, dma_addr_t , size_t , unsigned long ) ;
   int (*get_sgtable)(struct device *, struct sg_table *, void *, dma_addr_t , size_t , unsigned long ) ;
   dma_addr_t (*map_page)(struct device *, struct page *, unsigned long , size_t , enum dma_data_direction , unsigned long ) ;
   void (*unmap_page)(struct device *, dma_addr_t , size_t , enum dma_data_direction , unsigned long ) ;
   int (*map_sg)(struct device *, struct scatterlist *, int , enum dma_data_direction , unsigned long ) ;
   void (*unmap_sg)(struct device *, struct scatterlist *, int , enum dma_data_direction , unsigned long ) ;
   dma_addr_t (*map_resource)(struct device *, phys_addr_t , size_t , enum dma_data_direction , unsigned long ) ;
   void (*unmap_resource)(struct device *, dma_addr_t , size_t , enum dma_data_direction , unsigned long ) ;
   void (*sync_single_for_cpu)(struct device *, dma_addr_t , size_t , enum dma_data_direction ) ;
   void (*sync_single_for_device)(struct device *, dma_addr_t , size_t , enum dma_data_direction ) ;
   void (*sync_sg_for_cpu)(struct device *, struct scatterlist *, int , enum dma_data_direction ) ;
   void (*sync_sg_for_device)(struct device *, struct scatterlist *, int , enum dma_data_direction ) ;
   void (*cache_sync)(struct device *, void *, size_t , enum dma_data_direction ) ;
   int (*dma_supported)(struct device *, u64 ) ;
   u64 (*get_required_mask)(struct device *) ;
   size_t (*max_mapping_size)(struct device *) ;
   unsigned long (*get_merge_boundary)(struct device *) ;
};
#line 803  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
typedef u64 netdev_features_t;
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/in6.h"
union __anonunion_in6_u_510 {
   __u8 u6_addr8[16U] ;
   __be16 u6_addr16[8U] ;
   __be32 u6_addr32[4U] ;
};
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/in6.h"
struct in6_addr {
   union __anonunion_in6_u_510 in6_u ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/in6.h"
struct __anonstruct_siphash_key_t_511 {
   u64 key[2U] ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/in6.h"
typedef struct __anonstruct_siphash_key_t_511 siphash_key_t;
#line 163  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if_ether.h"
struct ethhdr {
   unsigned char h_dest[6U] ;
   unsigned char h_source[6U] ;
   __be16 h_proto ;
} __attribute__((__packed__));
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pipe_fs_i.h"
struct pipe_buf_operations;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pipe_fs_i.h"
struct pipe_buffer {
   struct page *page ;
   unsigned int offset ;
   unsigned int len ;
   struct pipe_buf_operations *ops ;
   unsigned int flags ;
   unsigned long private ;
};
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pipe_fs_i.h"
struct pipe_inode_info {
   struct mutex mutex ;
   wait_queue_head_t wait ;
   unsigned int head ;
   unsigned int tail ;
   unsigned int max_usage ;
   unsigned int ring_size ;
   unsigned int readers ;
   unsigned int writers ;
   unsigned int files ;
   unsigned int r_counter ;
   unsigned int w_counter ;
   struct page *tmp_page ;
   struct fasync_struct *fasync_readers ;
   struct fasync_struct *fasync_writers ;
   struct pipe_buffer *bufs ;
   struct user_struct *user ;
};
#line 77  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pipe_fs_i.h"
struct pipe_buf_operations {
   int (*confirm)(struct pipe_inode_info *, struct pipe_buffer *) ;
   void (*release)(struct pipe_inode_info *, struct pipe_buffer *) ;
   int (*steal)(struct pipe_inode_info *, struct pipe_buffer *) ;
   bool (*get)(struct pipe_inode_info *, struct pipe_buffer *) ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct flowi_tunnel {
   __be64 tun_id ;
};
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct flowi_common {
   int flowic_oif ;
   int flowic_iif ;
   __u32 flowic_mark ;
   __u8 flowic_tos ;
   __u8 flowic_scope ;
   __u8 flowic_proto ;
   __u8 flowic_flags ;
   __u32 flowic_secid ;
   kuid_t flowic_uid ;
   struct flowi_tunnel flowic_tun_key ;
   __u32 flowic_multipath_hash ;
};
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct __anonstruct_ports_522 {
   __be16 dport ;
   __be16 sport ;
};
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct __anonstruct_icmpt_523 {
   __u8 type ;
   __u8 code ;
};
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct __anonstruct_dnports_524 {
   __le16 dport ;
   __le16 sport ;
};
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct __anonstruct_mht_525 {
   __u8 type ;
};
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
union flowi_uli {
   struct __anonstruct_ports_522 ports ;
   struct __anonstruct_icmpt_523 icmpt ;
   struct __anonstruct_dnports_524 dnports ;
   __be32 spi ;
   __be32 gre_key ;
   struct __anonstruct_mht_525 mht ;
};
#line 70  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct flowi4 {
   struct flowi_common __fl_common ;
   __be32 saddr ;
   __be32 daddr ;
   union flowi_uli uli ;
} __attribute__((__aligned__(8)));
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct flowi6 {
   struct flowi_common __fl_common ;
   struct in6_addr daddr ;
   struct in6_addr saddr ;
   __be32 flowlabel ;
   union flowi_uli uli ;
   __u32 mp_hash ;
} __attribute__((__aligned__(8)));
#line 158  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct flowidn {
   struct flowi_common __fl_common ;
   __le16 daddr ;
   __le16 saddr ;
   union flowi_uli uli ;
} __attribute__((__aligned__(8)));
#line 173  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
union __anonunion_u_526 {
   struct flowi_common __fl_common ;
   struct flowi4 ip4 ;
   struct flowi6 ip6 ;
   struct flowidn dn ;
};
#line 173  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct flowi {
   union __anonunion_u_526 u ;
} __attribute__((__aligned__(8)));
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netfilter/nf_conntrack_common.h"
struct ip_conntrack_stat {
   unsigned int found ;
   unsigned int invalid ;
   unsigned int ignore ;
   unsigned int insert ;
   unsigned int insert_failed ;
   unsigned int drop ;
   unsigned int early_drop ;
   unsigned int error ;
   unsigned int expect_new ;
   unsigned int expect_create ;
   unsigned int expect_delete ;
   unsigned int search_restart ;
};
#line 41 
struct napi_struct;
#line 42 
struct bpf_prog;
#line 43 
union bpf_attr;
#line 44 
struct skb_ext;
#line 289  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
struct sk_buff_head {
   struct sk_buff *next ;
   struct sk_buff *prev ;
   __u32 qlen ;
   spinlock_t lock ;
};
#line 562  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
typedef unsigned int sk_buff_data_t;
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_533 {
   struct net_device *dev ;
   unsigned long dev_scratch ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
struct __anonstruct_532 {
   struct sk_buff *next ;
   struct sk_buff *prev ;
   union __anonunion_533 __anonCompField___anonstruct_532_89 ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_531 {
   struct __anonstruct_532 __anonCompField___anonunion_531_90 ;
   struct rb_node rbnode ;
   struct list_head list ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_534 {
   struct sock *sk ;
   int ip_defrag_offset ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_535 {
   ktime_t tstamp ;
   u64 skb_mstamp_ns ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
struct __anonstruct_537 {
   unsigned long _skb_refdst ;
   void (*destructor)(struct sk_buff *) ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_536 {
   struct __anonstruct_537 __anonCompField___anonunion_536_94 ;
   struct list_head tcp_tsorted_anchor ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
struct __anonstruct_539 {
   __u16 csum_start ;
   __u16 csum_offset ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_538 {
   __wsum csum ;
   struct __anonstruct_539 __anonCompField___anonunion_538_96 ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_540 {
   unsigned int napi_id ;
   unsigned int sender_cpu ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_541 {
   __u32 mark ;
   __u32 reserved_tailroom ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_542 {
   __be16 inner_protocol ;
   __u8 inner_ipproto ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
struct sk_buff {
   union __anonunion_531 __anonCompField_sk_buff_91 ;
   union __anonunion_534 __anonCompField_sk_buff_92 ;
   union __anonunion_535 __anonCompField_sk_buff_93 ;
   char cb[48U] ;
   union __anonunion_536 __anonCompField_sk_buff_95 ;
   unsigned long _nfct ;
   unsigned int len ;
   unsigned int data_len ;
   __u16 mac_len ;
   __u16 hdr_len ;
   __u16 queue_mapping ;
   __u8 __cloned_offset[0U] ;
   __u8 cloned : 1 ;
   __u8 nohdr : 1 ;
   __u8 fclone : 2 ;
   __u8 peeked : 1 ;
   __u8 head_frag : 1 ;
   __u8 pfmemalloc : 1 ;
   __u8 active_extensions ;
   __u32 headers_start[0U] ;
   __u8 __pkt_type_offset[0U] ;
   __u8 pkt_type : 3 ;
   __u8 ignore_df : 1 ;
   __u8 nf_trace : 1 ;
   __u8 ip_summed : 2 ;
   __u8 ooo_okay : 1 ;
   __u8 l4_hash : 1 ;
   __u8 sw_hash : 1 ;
   __u8 wifi_acked_valid : 1 ;
   __u8 wifi_acked : 1 ;
   __u8 no_fcs : 1 ;
   __u8 encapsulation : 1 ;
   __u8 encap_hdr_csum : 1 ;
   __u8 csum_valid : 1 ;
   __u8 __pkt_vlan_present_offset[0U] ;
   __u8 vlan_present : 1 ;
   __u8 csum_complete_sw : 1 ;
   __u8 csum_level : 2 ;
   __u8 csum_not_inet : 1 ;
   __u8 dst_pending_confirm : 1 ;
   __u8 ndisc_nodetype : 2 ;
   __u8 ipvs_property : 1 ;
   __u8 inner_protocol_type : 1 ;
   __u8 remcsum_offload : 1 ;
   __u8 offload_fwd_mark : 1 ;
   __u8 offload_l3_fwd_mark : 1 ;
   __u8 tc_skip_classify : 1 ;
   __u8 tc_at_ingress : 1 ;
   __u8 tc_redirected : 1 ;
   __u8 tc_from_ingress : 1 ;
   __u8 decrypted : 1 ;
   __u16 tc_index ;
   union __anonunion_538 __anonCompField_sk_buff_97 ;
   __u32 priority ;
   int skb_iif ;
   __u32 hash ;
   __be16 vlan_proto ;
   __u16 vlan_tci ;
   union __anonunion_540 __anonCompField_sk_buff_98 ;
   __u32 secmark ;
   union __anonunion_541 __anonCompField_sk_buff_99 ;
   union __anonunion_542 __anonCompField_sk_buff_100 ;
   __u16 inner_transport_header ;
   __u16 inner_network_header ;
   __u16 inner_mac_header ;
   __be16 protocol ;
   __u16 transport_header ;
   __u16 network_header ;
   __u16 mac_header ;
   __u32 headers_end[0U] ;
   sk_buff_data_t tail ;
   sk_buff_data_t end ;
   unsigned char *head ;
   unsigned char *data ;
   unsigned int truesize ;
   refcount_t users ;
   struct skb_ext *extensions ;
};
#line 920 
struct dst_entry;
#line 1165 
enum pkt_hash_types {
    PKT_HASH_TYPE_NONE = 0,
    PKT_HASH_TYPE_L2 = 1,
    PKT_HASH_TYPE_L3 = 2,
    PKT_HASH_TYPE_L4 = 3
};
#line 4108  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
struct skb_ext {
   refcount_t refcnt ;
   u8 offset[3U] ;
   u8 chunks ;
   char data[0U] ;
};
#line 177  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_drvinfo {
   __u32 cmd ;
   char driver[32U] ;
   char version[32U] ;
   char fw_version[32U] ;
   char bus_info[32U] ;
   char erom_version[32U] ;
   char reserved2[12U] ;
   __u32 n_priv_flags ;
   __u32 n_stats ;
   __u32 testinfo_len ;
   __u32 eedump_len ;
   __u32 regdump_len ;
};
#line 203  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_wolinfo {
   __u32 cmd ;
   __u32 supported ;
   __u32 wolopts ;
   __u8 sopass[6U] ;
};
#line 244  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_tunable {
   __u32 cmd ;
   __u32 id ;
   __u32 type_id ;
   __u32 len ;
   void *data[0U] ;
};
#line 310  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_regs {
   __u32 cmd ;
   __u32 version ;
   __u32 len ;
   __u8 data[0U] ;
};
#line 335  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_eeprom {
   __u32 cmd ;
   __u32 magic ;
   __u32 offset ;
   __u32 len ;
   __u8 data[0U] ;
};
#line 360  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_eee {
   __u32 cmd ;
   __u32 supported ;
   __u32 advertised ;
   __u32 lp_advertised ;
   __u32 eee_active ;
   __u32 eee_enabled ;
   __u32 tx_lpi_enabled ;
   __u32 tx_lpi_timer ;
   __u32 reserved[2U] ;
};
#line 382  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_modinfo {
   __u32 cmd ;
   __u32 type ;
   __u32 eeprom_len ;
   __u32 reserved[8U] ;
};
#line 462  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_coalesce {
   __u32 cmd ;
   __u32 rx_coalesce_usecs ;
   __u32 rx_max_coalesced_frames ;
   __u32 rx_coalesce_usecs_irq ;
   __u32 rx_max_coalesced_frames_irq ;
   __u32 tx_coalesce_usecs ;
   __u32 tx_max_coalesced_frames ;
   __u32 tx_coalesce_usecs_irq ;
   __u32 tx_max_coalesced_frames_irq ;
   __u32 stats_block_coalesce_usecs ;
   __u32 use_adaptive_rx_coalesce ;
   __u32 use_adaptive_tx_coalesce ;
   __u32 pkt_rate_low ;
   __u32 rx_coalesce_usecs_low ;
   __u32 rx_max_coalesced_frames_low ;
   __u32 tx_coalesce_usecs_low ;
   __u32 tx_max_coalesced_frames_low ;
   __u32 pkt_rate_high ;
   __u32 rx_coalesce_usecs_high ;
   __u32 rx_max_coalesced_frames_high ;
   __u32 tx_coalesce_usecs_high ;
   __u32 tx_max_coalesced_frames_high ;
   __u32 rate_sample_interval ;
};
#line 513  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_ringparam {
   __u32 cmd ;
   __u32 rx_max_pending ;
   __u32 rx_mini_max_pending ;
   __u32 rx_jumbo_max_pending ;
   __u32 tx_max_pending ;
   __u32 rx_pending ;
   __u32 rx_mini_pending ;
   __u32 rx_jumbo_pending ;
   __u32 tx_pending ;
};
#line 541  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_channels {
   __u32 cmd ;
   __u32 max_rx ;
   __u32 max_tx ;
   __u32 max_other ;
   __u32 max_combined ;
   __u32 rx_count ;
   __u32 tx_count ;
   __u32 other_count ;
   __u32 combined_count ;
};
#line 575  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_pauseparam {
   __u32 cmd ;
   __u32 autoneg ;
   __u32 rx_pause ;
   __u32 tx_pause ;
};
#line 683  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_test {
   __u32 cmd ;
   __u32 flags ;
   __u32 reserved ;
   __u32 len ;
   __u64 data[0U] ;
};
#line 702  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_stats {
   __u32 cmd ;
   __u32 n_stats ;
   __u64 data[0U] ;
};
#line 758  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_tcpip4_spec {
   __be32 ip4src ;
   __be32 ip4dst ;
   __be16 psrc ;
   __be16 pdst ;
   __u8 tos ;
};
#line 775  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_ah_espip4_spec {
   __be32 ip4src ;
   __be32 ip4dst ;
   __be32 spi ;
   __u8 tos ;
};
#line 793  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_usrip4_spec {
   __be32 ip4src ;
   __be32 ip4dst ;
   __be32 l4_4_bytes ;
   __u8 tos ;
   __u8 ip_ver ;
   __u8 proto ;
};
#line 812  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_tcpip6_spec {
   __be32 ip6src[4U] ;
   __be32 ip6dst[4U] ;
   __be16 psrc ;
   __be16 pdst ;
   __u8 tclass ;
};
#line 829  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_ah_espip6_spec {
   __be32 ip6src[4U] ;
   __be32 ip6dst[4U] ;
   __be32 spi ;
   __u8 tclass ;
};
#line 844  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_usrip6_spec {
   __be32 ip6src[4U] ;
   __be32 ip6dst[4U] ;
   __be32 l4_4_bytes ;
   __u8 tclass ;
   __u8 l4_proto ;
};
#line 852  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
union ethtool_flow_union {
   struct ethtool_tcpip4_spec tcp_ip4_spec ;
   struct ethtool_tcpip4_spec udp_ip4_spec ;
   struct ethtool_tcpip4_spec sctp_ip4_spec ;
   struct ethtool_ah_espip4_spec ah_ip4_spec ;
   struct ethtool_ah_espip4_spec esp_ip4_spec ;
   struct ethtool_usrip4_spec usr_ip4_spec ;
   struct ethtool_tcpip6_spec tcp_ip6_spec ;
   struct ethtool_tcpip6_spec udp_ip6_spec ;
   struct ethtool_tcpip6_spec sctp_ip6_spec ;
   struct ethtool_ah_espip6_spec ah_ip6_spec ;
   struct ethtool_ah_espip6_spec esp_ip6_spec ;
   struct ethtool_usrip6_spec usr_ip6_spec ;
   struct ethhdr ether_spec ;
   __u8 hdata[52U] ;
};
#line 880  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_flow_ext {
   __u8 padding[2U] ;
   unsigned char h_dest[6U] ;
   __be16 vlan_etype ;
   __be16 vlan_tci ;
   __be32 data[2U] ;
};
#line 905  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_rx_flow_spec {
   __u32 flow_type ;
   union ethtool_flow_union h_u ;
   struct ethtool_flow_ext h_ext ;
   union ethtool_flow_union m_u ;
   struct ethtool_flow_ext m_ext ;
   __u64 ring_cookie ;
   __u32 location ;
};
#line 1001  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
union __anonunion_568 {
   __u32 rule_cnt ;
   __u32 rss_context ;
};
#line 1001  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_rxnfc {
   __u32 cmd ;
   __u32 flow_type ;
   __u64 data ;
   struct ethtool_rx_flow_spec fs ;
   union __anonunion_568 __anonCompField_ethtool_rxnfc_102 ;
   __u32 rule_locs[0U] ;
};
#line 1130  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_flash {
   __u32 cmd ;
   __u32 region ;
   char data[128U] ;
};
#line 1150  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_dump {
   __u32 cmd ;
   __u32 version ;
   __u32 flag ;
   __u32 len ;
   __u8 data[0U] ;
};
#line 1230  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_ts_info {
   __u32 cmd ;
   __u32 so_timestamping ;
   __s32 phc_index ;
   __u32 tx_types ;
   __u32 tx_reserved[3U] ;
   __u32 rx_filters ;
   __u32 rx_reserved[3U] ;
};
#line 1302  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_fecparam {
   __u32 cmd ;
   __u32 active_fec ;
   __u32 fec ;
   __u32 reserved ;
};
#line 1876  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_link_settings {
   __u32 cmd ;
   __u32 speed ;
   __u8 duplex ;
   __u8 port ;
   __u8 phy_address ;
   __u8 autoneg ;
   __u8 mdio_support ;
   __u8 eth_tp_mdix ;
   __u8 eth_tp_mdix_ctrl ;
   __s8 link_mode_masks_nwords ;
   __u8 transceiver ;
   __u8 reserved1[3U] ;
   __u32 reserved[7U] ;
   __u32 link_mode_masks[0U] ;
};
#line 40  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ethtool.h"
enum ethtool_phys_id_state {
    ETHTOOL_ID_INACTIVE = 0,
    ETHTOOL_ID_ACTIVE = 1,
    ETHTOOL_ID_ON = 2,
    ETHTOOL_ID_OFF = 3
};
#line 108  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ethtool.h"
struct __anonstruct_link_modes_571 {
   unsigned long supported[2U] ;
   unsigned long advertising[2U] ;
   unsigned long lp_advertising[2U] ;
};
#line 108  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ethtool.h"
struct ethtool_link_ksettings {
   struct ethtool_link_settings base ;
   struct __anonstruct_link_modes_571 link_modes ;
};
#line 325  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ethtool.h"
struct ethtool_ops {
   void (*get_drvinfo)(struct net_device *, struct ethtool_drvinfo *) ;
   int (*get_regs_len)(struct net_device *) ;
   void (*get_regs)(struct net_device *, struct ethtool_regs *, void *) ;
   void (*get_wol)(struct net_device *, struct ethtool_wolinfo *) ;
   int (*set_wol)(struct net_device *, struct ethtool_wolinfo *) ;
   u32 (*get_msglevel)(struct net_device *) ;
   void (*set_msglevel)(struct net_device *, u32 ) ;
   int (*nway_reset)(struct net_device *) ;
   u32 (*get_link)(struct net_device *) ;
   int (*get_eeprom_len)(struct net_device *) ;
   int (*get_eeprom)(struct net_device *, struct ethtool_eeprom *, u8 *) ;
   int (*set_eeprom)(struct net_device *, struct ethtool_eeprom *, u8 *) ;
   int (*get_coalesce)(struct net_device *, struct ethtool_coalesce *) ;
   int (*set_coalesce)(struct net_device *, struct ethtool_coalesce *) ;
   void (*get_ringparam)(struct net_device *, struct ethtool_ringparam *) ;
   int (*set_ringparam)(struct net_device *, struct ethtool_ringparam *) ;
   void (*get_pauseparam)(struct net_device *, struct ethtool_pauseparam *) ;
   int (*set_pauseparam)(struct net_device *, struct ethtool_pauseparam *) ;
   void (*self_test)(struct net_device *, struct ethtool_test *, u64 *) ;
   void (*get_strings)(struct net_device *, u32 , u8 *) ;
   int (*set_phys_id)(struct net_device *, enum ethtool_phys_id_state ) ;
   void (*get_ethtool_stats)(struct net_device *, struct ethtool_stats *, u64 *) ;
   int (*begin)(struct net_device *) ;
   void (*complete)(struct net_device *) ;
   u32 (*get_priv_flags)(struct net_device *) ;
   int (*set_priv_flags)(struct net_device *, u32 ) ;
   int (*get_sset_count)(struct net_device *, int ) ;
   int (*get_rxnfc)(struct net_device *, struct ethtool_rxnfc *, u32 *) ;
   int (*set_rxnfc)(struct net_device *, struct ethtool_rxnfc *) ;
   int (*flash_device)(struct net_device *, struct ethtool_flash *) ;
   int (*reset)(struct net_device *, u32 *) ;
   u32 (*get_rxfh_key_size)(struct net_device *) ;
   u32 (*get_rxfh_indir_size)(struct net_device *) ;
   int (*get_rxfh)(struct net_device *, u32 *, u8 *, u8 *) ;
   int (*set_rxfh)(struct net_device *, u32 *, u8 *, u8 ) ;
   int (*get_rxfh_context)(struct net_device *, u32 *, u8 *, u8 *, u32 ) ;
   int (*set_rxfh_context)(struct net_device *, u32 *, u8 *, u8 , u32 *, bool ) ;
   void (*get_channels)(struct net_device *, struct ethtool_channels *) ;
   int (*set_channels)(struct net_device *, struct ethtool_channels *) ;
   int (*get_dump_flag)(struct net_device *, struct ethtool_dump *) ;
   int (*get_dump_data)(struct net_device *, struct ethtool_dump *, void *) ;
   int (*set_dump)(struct net_device *, struct ethtool_dump *) ;
   int (*get_ts_info)(struct net_device *, struct ethtool_ts_info *) ;
   int (*get_module_info)(struct net_device *, struct ethtool_modinfo *) ;
   int (*get_module_eeprom)(struct net_device *, struct ethtool_eeprom *, u8 *) ;
   int (*get_eee)(struct net_device *, struct ethtool_eee *) ;
   int (*set_eee)(struct net_device *, struct ethtool_eee *) ;
   int (*get_tunable)(struct net_device *, struct ethtool_tunable *, void *) ;
   int (*set_tunable)(struct net_device *, struct ethtool_tunable *, void *) ;
   int (*get_per_queue_coalesce)(struct net_device *, u32 , struct ethtool_coalesce *) ;
   int (*set_per_queue_coalesce)(struct net_device *, u32 , struct ethtool_coalesce *) ;
   int (*get_link_ksettings)(struct net_device *, struct ethtool_link_ksettings *) ;
   int (*set_link_ksettings)(struct net_device *, struct ethtool_link_ksettings *) ;
   int (*get_fecparam)(struct net_device *, struct ethtool_fecparam *) ;
   int (*set_fecparam)(struct net_device *, struct ethtool_fecparam *) ;
   void (*get_ethtool_phy_stats)(struct net_device *, struct ethtool_stats *, u64 *) ;
};
#line 422 
struct prot_inuse;
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/core.h"
struct netns_core {
   struct ctl_table_header *sysctl_hdr ;
   int sysctl_somaxconn ;
   int *sock_inuse ;
   struct prot_inuse *prot_inuse ;
};
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct u64_stats_sync {
   };
#line 36  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct __anonstruct_local_t_572 {
   atomic_long_t a ;
};
#line 36  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
typedef struct __anonstruct_local_t_572 local_t;
#line 119  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/local.h"
struct __anonstruct_local64_t_573 {
   local_t a ;
};
#line 119  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/local.h"
typedef struct __anonstruct_local64_t_573 local64_t;
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/local64.h"
struct __anonstruct_u64_stats_t_574 {
   local64_t v ;
};
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/local64.h"
typedef struct __anonstruct_u64_stats_t_574 u64_stats_t;
#line 51  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct ipstats_mib {
   u64 mibs[37U] ;
   struct u64_stats_sync syncp ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct icmp_mib {
   unsigned long mibs[28U] ;
};
#line 64  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct icmpmsg_mib {
   atomic_long_t mibs[512U] ;
};
#line 71  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct icmpv6_mib {
   unsigned long mibs[6U] ;
};
#line 75  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct icmpv6_mib_device {
   atomic_long_t mibs[6U] ;
};
#line 81  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct icmpv6msg_mib {
   atomic_long_t mibs[512U] ;
};
#line 85  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct icmpv6msg_mib_device {
   atomic_long_t mibs[512U] ;
};
#line 92  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct tcp_mib {
   unsigned long mibs[16U] ;
};
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct udp_mib {
   unsigned long mibs[9U] ;
};
#line 104  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct linux_mib {
   unsigned long mibs[120U] ;
};
#line 110  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct linux_xfrm_mib {
   unsigned long mibs[29U] ;
};
#line 116  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct linux_tls_mib {
   unsigned long mibs[11U] ;
};
#line 7  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/mib.h"
struct proc_dir_entry;
#line 7  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/mib.h"
struct netns_mib {
   struct tcp_mib *tcp_statistics ;
   struct ipstats_mib *ip_statistics ;
   struct linux_mib *net_statistics ;
   struct udp_mib *udp_statistics ;
   struct udp_mib *udplite_statistics ;
   struct icmp_mib *icmp_statistics ;
   struct icmpmsg_mib *icmpmsg_statistics ;
   struct proc_dir_entry *proc_net_devsnmp6 ;
   struct udp_mib *udp_stats_in6 ;
   struct udp_mib *udplite_stats_in6 ;
   struct ipstats_mib *ipv6_statistics ;
   struct icmpv6_mib *icmpv6_statistics ;
   struct icmpv6msg_mib *icmpv6msg_statistics ;
   struct linux_xfrm_mib *xfrm_statistics ;
   struct linux_tls_mib *tls_statistics ;
};
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/unix.h"
struct netns_unix {
   int sysctl_max_dgram_qlen ;
   struct ctl_table_header *ctl ;
};
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/packet.h"
struct netns_packet {
   struct mutex sklist_lock ;
   struct hlist_head sklist ;
};
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_frag.h"
struct inet_frags;
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_frag.h"
struct fqdir {
   long high_thresh ;
   long low_thresh ;
   int timeout ;
   int max_dist ;
   struct inet_frags *f ;
   struct net *net ;
   bool dead ;
   struct rhashtable rhashtable ;
   atomic_long_t mem ;
   struct work_struct destroy_work ;
};
#line 41  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_frag.h"
struct frag_v4_compare_key {
   __be32 saddr ;
   __be32 daddr ;
   u32 user ;
   u32 vif ;
   __be16 id ;
   u16 protocol ;
};
#line 50  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_frag.h"
struct frag_v6_compare_key {
   struct in6_addr saddr ;
   struct in6_addr daddr ;
   u32 user ;
   __be32 id ;
   u32 iif ;
};
#line 77  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_frag.h"
union __anonunion_key_575 {
   struct frag_v4_compare_key v4 ;
   struct frag_v6_compare_key v6 ;
};
#line 77  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_frag.h"
struct inet_frag_queue {
   struct rhash_head node ;
   union __anonunion_key_575 key ;
   struct timer_list timer ;
   spinlock_t lock ;
   refcount_t refcnt ;
   struct rb_root rb_fragments ;
   struct sk_buff *fragments_tail ;
   struct sk_buff *last_run_head ;
   ktime_t stamp ;
   int len ;
   int meat ;
   __u8 flags ;
   u16 max_size ;
   struct fqdir *fqdir ;
   struct callback_head rcu ;
};
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_frag.h"
struct inet_frags {
   unsigned int qsize ;
   void (*constructor)(struct inet_frag_queue *, void *) ;
   void (*destructor)(struct inet_frag_queue *) ;
   void (*frag_expire)(struct timer_list *) ;
   struct kmem_cache *frags_cachep ;
   char *frags_cache_name ;
   struct rhashtable_params rhash_params ;
   refcount_t refcnt ;
   struct completion completion ;
};
#line 177 
struct ipv4_devconf;
#line 178 
struct fib_rules_ops;
#line 179 
struct fib_table;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv4.h"
struct local_ports {
   seqlock_t lock ;
   int range[2U] ;
   bool warned ;
};
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv4.h"
struct ping_group_range {
   seqlock_t lock ;
   kgid_t range[2U] ;
};
#line 31 
struct inet_hashinfo;
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv4.h"
struct inet_timewait_death_row {
   atomic_t tw_count ;
   struct inet_hashinfo *hashinfo ;
   int sysctl_max_tw_buckets ;
};
#line 40 
struct tcp_fastopen_context;
#line 43 
struct ip_ra_chain;
#line 43 
struct inet_peer_base;
#line 43 
struct xt_table;
#line 43 
struct tcp_congestion_ops;
#line 43 
struct fib_notifier_ops;
#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv4.h"
struct netns_ipv4 {
   struct ctl_table_header *forw_hdr ;
   struct ctl_table_header *frags_hdr ;
   struct ctl_table_header *ipv4_hdr ;
   struct ctl_table_header *route_hdr ;
   struct ctl_table_header *xfrm4_hdr ;
   struct ipv4_devconf *devconf_all ;
   struct ipv4_devconf *devconf_dflt ;
   struct ip_ra_chain *ra_chain ;
   struct mutex ra_mutex ;
   struct fib_rules_ops *rules_ops ;
   bool fib_has_custom_rules ;
   unsigned int fib_rules_require_fldissect ;
   struct fib_table *fib_main ;
   struct fib_table *fib_default ;
   bool fib_has_custom_local_routes ;
   int fib_num_tclassid_users ;
   struct hlist_head *fib_table_hash ;
   bool fib_offload_disabled ;
   struct sock *fibnl ;
   struct sock **icmp_sk ;
   struct sock *mc_autojoin_sk ;
   struct inet_peer_base *peers ;
   struct sock **tcp_sk ;
   struct fqdir *fqdir ;
   struct xt_table *iptable_filter ;
   struct xt_table *iptable_mangle ;
   struct xt_table *iptable_raw ;
   struct xt_table *arptable_filter ;
   struct xt_table *iptable_security ;
   struct xt_table *nat_table ;
   int sysctl_icmp_echo_ignore_all ;
   int sysctl_icmp_echo_ignore_broadcasts ;
   int sysctl_icmp_ignore_bogus_error_responses ;
   int sysctl_icmp_ratelimit ;
   int sysctl_icmp_ratemask ;
   int sysctl_icmp_errors_use_inbound_ifaddr ;
   struct local_ports ip_local_ports ;
   int sysctl_tcp_ecn ;
   int sysctl_tcp_ecn_fallback ;
   int sysctl_ip_default_ttl ;
   int sysctl_ip_no_pmtu_disc ;
   int sysctl_ip_fwd_use_pmtu ;
   int sysctl_ip_fwd_update_priority ;
   int sysctl_ip_nonlocal_bind ;
   int sysctl_ip_dynaddr ;
   int sysctl_ip_early_demux ;
   int sysctl_raw_l3mdev_accept ;
   int sysctl_tcp_early_demux ;
   int sysctl_udp_early_demux ;
   int sysctl_fwmark_reflect ;
   int sysctl_tcp_fwmark_accept ;
   int sysctl_tcp_l3mdev_accept ;
   int sysctl_tcp_mtu_probing ;
   int sysctl_tcp_mtu_probe_floor ;
   int sysctl_tcp_base_mss ;
   int sysctl_tcp_min_snd_mss ;
   int sysctl_tcp_probe_threshold ;
   u32 sysctl_tcp_probe_interval ;
   int sysctl_tcp_keepalive_time ;
   int sysctl_tcp_keepalive_probes ;
   int sysctl_tcp_keepalive_intvl ;
   int sysctl_tcp_syn_retries ;
   int sysctl_tcp_synack_retries ;
   int sysctl_tcp_syncookies ;
   int sysctl_tcp_reordering ;
   int sysctl_tcp_retries1 ;
   int sysctl_tcp_retries2 ;
   int sysctl_tcp_orphan_retries ;
   int sysctl_tcp_fin_timeout ;
   unsigned int sysctl_tcp_notsent_lowat ;
   int sysctl_tcp_tw_reuse ;
   int sysctl_tcp_sack ;
   int sysctl_tcp_window_scaling ;
   int sysctl_tcp_timestamps ;
   int sysctl_tcp_early_retrans ;
   int sysctl_tcp_recovery ;
   int sysctl_tcp_thin_linear_timeouts ;
   int sysctl_tcp_slow_start_after_idle ;
   int sysctl_tcp_retrans_collapse ;
   int sysctl_tcp_stdurg ;
   int sysctl_tcp_rfc1337 ;
   int sysctl_tcp_abort_on_overflow ;
   int sysctl_tcp_fack ;
   int sysctl_tcp_max_reordering ;
   int sysctl_tcp_dsack ;
   int sysctl_tcp_app_win ;
   int sysctl_tcp_adv_win_scale ;
   int sysctl_tcp_frto ;
   int sysctl_tcp_nometrics_save ;
   int sysctl_tcp_moderate_rcvbuf ;
   int sysctl_tcp_tso_win_divisor ;
   int sysctl_tcp_workaround_signed_windows ;
   int sysctl_tcp_limit_output_bytes ;
   int sysctl_tcp_challenge_ack_limit ;
   int sysctl_tcp_min_tso_segs ;
   int sysctl_tcp_min_rtt_wlen ;
   int sysctl_tcp_autocorking ;
   int sysctl_tcp_invalid_ratelimit ;
   int sysctl_tcp_pacing_ss_ratio ;
   int sysctl_tcp_pacing_ca_ratio ;
   int sysctl_tcp_wmem[3U] ;
   int sysctl_tcp_rmem[3U] ;
   int sysctl_tcp_comp_sack_nr ;
   unsigned long sysctl_tcp_comp_sack_delay_ns ;
   struct inet_timewait_death_row tcp_death_row ;
   int sysctl_max_syn_backlog ;
   int sysctl_tcp_fastopen ;
   struct tcp_congestion_ops *tcp_congestion_control ;
   struct tcp_fastopen_context *tcp_fastopen_ctx ;
   spinlock_t tcp_fastopen_ctx_lock ;
   unsigned int sysctl_tcp_fastopen_blackhole_timeout ;
   atomic_t tfo_active_disable_times ;
   unsigned long tfo_active_disable_stamp ;
   int sysctl_udp_wmem_min ;
   int sysctl_udp_rmem_min ;
   int sysctl_udp_l3mdev_accept ;
   int sysctl_igmp_max_memberships ;
   int sysctl_igmp_max_msf ;
   int sysctl_igmp_llm_reports ;
   int sysctl_igmp_qrv ;
   struct ping_group_range ping_group_range ;
   atomic_t dev_addr_genid ;
   unsigned long *sysctl_local_reserved_ports ;
   int sysctl_ip_prot_sock ;
   struct list_head mr_tables ;
   struct fib_rules_ops *mr_rules_ops ;
   int sysctl_fib_multipath_use_neigh ;
   int sysctl_fib_multipath_hash_policy ;
   struct fib_notifier_ops *notifier_ops ;
   unsigned int fib_seq ;
   struct fib_notifier_ops *ipmr_notifier_ops ;
   unsigned int ipmr_seq ;
   atomic_t rt_genid ;
   siphash_key_t ip_id_key ;
};
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/dst_ops.h"
struct neighbour;
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/dst_ops.h"
struct dst_ops {
   unsigned short family ;
   unsigned int gc_thresh ;
   int (*gc)(struct dst_ops *) ;
   struct dst_entry *(*check)(struct dst_entry *, __u32 ) ;
   unsigned int (*default_advmss)(struct dst_entry *) ;
   unsigned int (*mtu)(struct dst_entry *) ;
   u32 *(*cow_metrics)(struct dst_entry *, unsigned long ) ;
   void (*destroy)(struct dst_entry *) ;
   void (*ifdown)(struct dst_entry *, struct net_device *, int ) ;
   struct dst_entry *(*negative_advice)(struct dst_entry *) ;
   void (*link_failure)(struct sk_buff *) ;
   void (*update_pmtu)(struct dst_entry *, struct sock *, struct sk_buff *, u32 , bool ) ;
   void (*redirect)(struct dst_entry *, struct sock *, struct sk_buff *) ;
   int (*local_out)(struct net *, struct sock *, struct sk_buff *) ;
   struct neighbour *(*neigh_lookup)(struct dst_entry *, struct sk_buff *, void *) ;
   void (*confirm_neigh)(struct dst_entry *, void *) ;
   struct kmem_cache *kmem_cachep ;
   struct percpu_counter pcpuc_entries ;
};
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv6.h"
struct netns_sysctl_ipv6 {
   struct ctl_table_header *hdr ;
   struct ctl_table_header *route_hdr ;
   struct ctl_table_header *icmp_hdr ;
   struct ctl_table_header *frags_hdr ;
   struct ctl_table_header *xfrm6_hdr ;
   int bindv6only ;
   int flush_delay ;
   int ip6_rt_max_size ;
   int ip6_rt_gc_min_interval ;
   int ip6_rt_gc_timeout ;
   int ip6_rt_gc_interval ;
   int ip6_rt_gc_elasticity ;
   int ip6_rt_mtu_expires ;
   int ip6_rt_min_advmss ;
   int multipath_hash_policy ;
   int flowlabel_consistency ;
   int auto_flowlabels ;
   int icmpv6_time ;
   int icmpv6_echo_ignore_all ;
   int icmpv6_echo_ignore_multicast ;
   int icmpv6_echo_ignore_anycast ;
   unsigned long icmpv6_ratemask[4U] ;
   unsigned long *icmpv6_ratemask_ptr ;
   int anycast_src_echo_reply ;
   int ip_nonlocal_bind ;
   int fwmark_reflect ;
   int idgen_retries ;
   int idgen_delay ;
   int flowlabel_state_ranges ;
   int flowlabel_reflect ;
   int max_dst_opts_cnt ;
   int max_hbh_opts_cnt ;
   int max_dst_opts_len ;
   int max_hbh_opts_len ;
   int seg6_flowlabel ;
   bool skip_notify_on_dev_down ;
};
#line 56 
struct ipv6_devconf;
#line 56 
struct fib6_info;
#line 56 
struct rt6_info;
#line 56 
struct rt6_statistics;
#line 56 
struct fib6_table;
#line 56 
struct seg6_pernet_data;
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv6.h"
struct __anonstruct_ip6addrlbl_table_577 {
   struct hlist_head head ;
   spinlock_t lock ;
   u32 seq ;
};
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv6.h"
struct netns_ipv6 {
   struct netns_sysctl_ipv6 sysctl ;
   struct ipv6_devconf *devconf_all ;
   struct ipv6_devconf *devconf_dflt ;
   struct inet_peer_base *peers ;
   struct fqdir *fqdir ;
   struct xt_table *ip6table_filter ;
   struct xt_table *ip6table_mangle ;
   struct xt_table *ip6table_raw ;
   struct xt_table *ip6table_security ;
   struct xt_table *ip6table_nat ;
   struct fib6_info *fib6_null_entry ;
   struct rt6_info *ip6_null_entry ;
   struct rt6_statistics *rt6_stats ;
   struct timer_list ip6_fib_timer ;
   struct hlist_head *fib_table_hash ;
   struct fib6_table *fib6_main_tbl ;
   struct list_head fib6_walkers ;
   struct dst_ops ip6_dst_ops ;
   rwlock_t fib6_walker_lock ;
   spinlock_t fib6_gc_lock ;
   unsigned int ip6_rt_gc_expire ;
   unsigned long ip6_rt_last_gc ;
   unsigned int fib6_rules_require_fldissect ;
   bool fib6_has_custom_rules ;
   unsigned int fib6_routes_require_src ;
   struct rt6_info *ip6_prohibit_entry ;
   struct rt6_info *ip6_blk_hole_entry ;
   struct fib6_table *fib6_local_tbl ;
   struct fib_rules_ops *fib6_rules_ops ;
   struct sock **icmp_sk ;
   struct sock *ndisc_sk ;
   struct sock *tcp_sk ;
   struct sock *igmp_sk ;
   struct sock *mc_autojoin_sk ;
   struct list_head mr6_tables ;
   struct fib_rules_ops *mr6_rules_ops ;
   atomic_t dev_addr_genid ;
   atomic_t fib6_sernum ;
   struct seg6_pernet_data *seg6_data ;
   struct fib_notifier_ops *notifier_ops ;
   struct fib_notifier_ops *ip6mr_notifier_ops ;
   unsigned int ipmr_seq ;
   struct __anonstruct_ip6addrlbl_table_577 ip6addrlbl_table ;
};
#line 121  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv6.h"
struct netns_nf_frag {
   struct fqdir *fqdir ;
};
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/nexthop.h"
struct netns_nexthop {
   struct rb_root rb_root ;
   struct hlist_head *devhash ;
   unsigned int seq ;
   u32 last_id_allocated ;
};
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ieee802154_6lowpan.h"
struct netns_sysctl_lowpan {
   struct ctl_table_header *frags_hdr ;
};
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ieee802154_6lowpan.h"
struct netns_ieee802154_lowpan {
   struct netns_sysctl_lowpan sysctl ;
   struct fqdir *fqdir ;
};
#line 21 
struct sctp_mib;
#line 10  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/sctp.h"
struct netns_sctp {
   struct sctp_mib *sctp_statistics ;
   struct proc_dir_entry *proc_net_sctp ;
   struct ctl_table_header *sysctl_header ;
   struct sock *ctl_sock ;
   struct list_head local_addr_list ;
   struct list_head addr_waitq ;
   struct timer_list addr_wq_timer ;
   struct list_head auto_asconf_splist ;
   spinlock_t addr_wq_lock ;
   spinlock_t local_addr_lock ;
   unsigned int rto_initial ;
   unsigned int rto_min ;
   unsigned int rto_max ;
   int rto_alpha ;
   int rto_beta ;
   int max_burst ;
   int cookie_preserve_enable ;
   char *sctp_hmac_alg ;
   unsigned int valid_cookie_life ;
   unsigned int sack_timeout ;
   unsigned int hb_interval ;
   int max_retrans_association ;
   int max_retrans_path ;
   int max_retrans_init ;
   int pf_retrans ;
   int ps_retrans ;
   int pf_enable ;
   int pf_expose ;
   int sndbuf_policy ;
   int rcvbuf_policy ;
   int default_auto_asconf ;
   int addip_enable ;
   int addip_noauth ;
   int prsctp_enable ;
   int reconf_enable ;
   int auth_enable ;
   int intl_enable ;
   int ecn_enable ;
   int scope_policy ;
   int rwnd_upd_shift ;
   unsigned long max_autoclose ;
};
#line 7  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/dccp.h"
struct netns_dccp {
   struct sock *v4_ctl_sk ;
   struct sock *v6_ctl_sk ;
};
#line 75  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/netfilter.h"
struct nf_logger;
#line 76 
struct nf_queue_handler;
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/netfilter.h"
struct nf_hook_entries;
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/netfilter.h"
struct netns_nf {
   struct proc_dir_entry *proc_netfilter ;
   struct nf_queue_handler *queue_handler ;
   struct nf_logger *nf_loggers[13U] ;
   struct ctl_table_header *nf_log_dir_header ;
   struct nf_hook_entries *hooks_ipv4[5U] ;
   struct nf_hook_entries *hooks_ipv6[5U] ;
   struct nf_hook_entries *hooks_arp[3U] ;
   struct nf_hook_entries *hooks_bridge[5U] ;
   struct nf_hook_entries *hooks_decnet[7U] ;
   bool defrag_ipv4 ;
   bool defrag_ipv6 ;
};
#line 37 
struct ebt_table;
#line 10  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/x_tables.h"
struct netns_xt {
   struct list_head tables[13U] ;
   bool notrack_deprecated_warning ;
   bool clusterip_deprecated_warning ;
   struct ebt_table *broute_table ;
   struct ebt_table *frame_filter ;
   struct ebt_table *frame_nat ;
};
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_nulls.h"
struct hlist_nulls_node;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_nulls.h"
struct hlist_nulls_head {
   struct hlist_nulls_node *first ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_nulls.h"
struct hlist_nulls_node {
   struct hlist_nulls_node *next ;
   struct hlist_nulls_node **pprev ;
};
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_generic_net {
   unsigned int timeout ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_tcp_net {
   unsigned int timeouts[14U] ;
   int tcp_loose ;
   int tcp_be_liberal ;
   int tcp_max_retrans ;
};
#line 38  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_udp_net {
   unsigned int timeouts[2U] ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_icmp_net {
   unsigned int timeout ;
};
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_dccp_net {
   int dccp_loose ;
   unsigned int dccp_timeout[10U] ;
};
#line 54  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_sctp_net {
   unsigned int timeouts[10U] ;
};
#line 66  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_gre_net {
   struct list_head keymap_list ;
   unsigned int timeouts[2U] ;
};
#line 72  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_ip_net {
   struct nf_generic_net generic ;
   struct nf_tcp_net tcp ;
   struct nf_udp_net udp ;
   struct nf_icmp_net icmp ;
   struct nf_icmp_net icmpv6 ;
   struct nf_dccp_net dccp ;
   struct nf_sctp_net sctp ;
   struct nf_gre_net gre ;
};
#line 89  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct ct_pcpu {
   spinlock_t lock ;
   struct hlist_nulls_head unconfirmed ;
   struct hlist_nulls_head dying ;
};
#line 95 
struct nf_ct_event_notifier;
#line 95 
struct nf_exp_event_notifier;
#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct netns_ct {
   atomic_t count ;
   unsigned int expect_count ;
   struct delayed_work ecache_dwork ;
   bool ecache_dwork_pending ;
   bool auto_assign_helper_warned ;
   struct ctl_table_header *sysctl_header ;
   unsigned int sysctl_log_invalid ;
   int sysctl_events ;
   int sysctl_acct ;
   int sysctl_auto_assign_helper ;
   int sysctl_tstamp ;
   int sysctl_checksum ;
   struct ct_pcpu *pcpu_lists ;
   struct ip_conntrack_stat *stat ;
   struct nf_ct_event_notifier *nf_conntrack_event_cb ;
   struct nf_exp_event_notifier *nf_expect_event_cb ;
   struct nf_ip_net nf_ct_proto ;
   unsigned int labels_used ;
};
#line 7  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/nftables.h"
struct netns_nftables {
   struct list_head tables ;
   struct list_head commit_list ;
   struct list_head module_list ;
   struct mutex commit_mutex ;
   unsigned int base_seq ;
   u8 gencursor ;
   u8 validate_state ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/xfrm.h"
struct xfrm_policy_hash {
   struct hlist_head *table ;
   unsigned int hmask ;
   u8 dbits4 ;
   u8 sbits4 ;
   u8 dbits6 ;
   u8 sbits6 ;
};
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/xfrm.h"
struct xfrm_policy_hthresh {
   struct work_struct work ;
   seqlock_t lock ;
   u8 lbits4 ;
   u8 rbits4 ;
   u8 lbits6 ;
   u8 rbits6 ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/xfrm.h"
struct netns_xfrm {
   struct list_head state_all ;
   struct hlist_head *state_bydst ;
   struct hlist_head *state_bysrc ;
   struct hlist_head *state_byspi ;
   unsigned int state_hmask ;
   unsigned int state_num ;
   struct work_struct state_hash_work ;
   struct list_head policy_all ;
   struct hlist_head *policy_byidx ;
   unsigned int policy_idx_hmask ;
   struct hlist_head policy_inexact[3U] ;
   struct xfrm_policy_hash policy_bydst[3U] ;
   unsigned int policy_count[6U] ;
   struct work_struct policy_hash_work ;
   struct xfrm_policy_hthresh policy_hthresh ;
   struct list_head inexact_bins ;
   struct sock *nlsk ;
   struct sock *nlsk_stash ;
   u32 sysctl_aevent_etime ;
   u32 sysctl_aevent_rseqth ;
   int sysctl_larval_drop ;
   u32 sysctl_acq_expires ;
   struct ctl_table_header *sysctl_hdr ;
   struct dst_ops xfrm4_dst_ops ;
   struct dst_ops xfrm6_dst_ops ;
   spinlock_t xfrm_state_lock ;
   spinlock_t xfrm_policy_lock ;
   struct mutex xfrm_cfg_mutex ;
};
#line 79 
struct mpls_route;
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/mpls.h"
struct netns_mpls {
   int ip_ttl_propagate ;
   int default_ttl ;
   size_t platform_labels ;
   struct mpls_route **platform_label ;
   struct ctl_table_header *ctl ;
};
#line 20 
struct can_dev_rcv_lists;
#line 21 
struct can_pkg_stats;
#line 22 
struct can_rcv_lists_stats;
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/can.h"
struct netns_can {
   struct proc_dir_entry *proc_dir ;
   struct proc_dir_entry *pde_version ;
   struct proc_dir_entry *pde_stats ;
   struct proc_dir_entry *pde_reset_stats ;
   struct proc_dir_entry *pde_rcvlist_all ;
   struct proc_dir_entry *pde_rcvlist_fil ;
   struct proc_dir_entry *pde_rcvlist_inv ;
   struct proc_dir_entry *pde_rcvlist_sff ;
   struct proc_dir_entry *pde_rcvlist_eff ;
   struct proc_dir_entry *pde_rcvlist_err ;
   struct proc_dir_entry *bcmproc_dir ;
   struct can_dev_rcv_lists *rx_alldev_list ;
   spinlock_t rcvlists_lock ;
   struct timer_list stattimer ;
   struct can_pkg_stats *pkg_stats ;
   struct can_rcv_lists_stats *rcv_lists_stats ;
   struct hlist_head cgw_list ;
};
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/xdp.h"
struct netns_xdp {
   struct mutex lock ;
   struct hlist_head list ;
};
#line 12 
struct proc_ns_operations;
#line 7  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ns_common.h"
struct ns_common {
   atomic_long_t stashed ;
   struct proc_ns_operations *ops ;
   unsigned int inum ;
};
#line 12 
struct net_generic;
#line 13 
struct uevent_sock;
#line 14 
struct netns_ipvs;
#line 55  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/net_namespace.h"
struct key_tag;
#line 55 
struct ucounts;
#line 55  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/net_namespace.h"
struct net {
   refcount_t passive ;
   refcount_t count ;
   spinlock_t rules_mod_lock ;
   unsigned int dev_unreg_count ;
   unsigned int dev_base_seq ;
   int ifindex ;
   spinlock_t nsid_lock ;
   atomic_t fnhe_genid ;
   struct list_head list ;
   struct list_head exit_list ;
   struct llist_node cleanup_list ;
   struct key_tag *key_domain ;
   struct user_namespace *user_ns ;
   struct ucounts *ucounts ;
   struct idr netns_ids ;
   struct ns_common ns ;
   struct list_head dev_base_head ;
   struct proc_dir_entry *proc_net ;
   struct proc_dir_entry *proc_net_stat ;
   struct ctl_table_set sysctls ;
   struct sock *rtnl ;
   struct sock *genl_sock ;
   struct uevent_sock *uevent_sock ;
   struct hlist_head *dev_name_head ;
   struct hlist_head *dev_index_head ;
   struct raw_notifier_head netdev_chain ;
   u32 hash_mix ;
   struct net_device *loopback_dev ;
   struct list_head rules_ops ;
   struct netns_core core ;
   struct netns_mib mib ;
   struct netns_packet packet ;
   struct netns_unix unx ;
   struct netns_nexthop nexthop ;
   struct netns_ipv4 ipv4 ;
   struct netns_ipv6 ipv6 ;
   struct netns_ieee802154_lowpan ieee802154_lowpan ;
   struct netns_sctp sctp ;
   struct netns_dccp dccp ;
   struct netns_nf nf ;
   struct netns_xt xt ;
   struct netns_ct ct ;
   struct netns_nftables nft ;
   struct netns_nf_frag nf_frag ;
   struct ctl_table_header *nf_frag_frags_hdr ;
   struct sock *nfnl ;
   struct sock *nfnl_stash ;
   struct list_head nfnl_acct_list ;
   struct list_head nfct_timeout_list ;
   struct sk_buff_head wext_nlevents ;
   struct net_generic *gen ;
   struct bpf_prog *flow_dissector_prog ;
   struct netns_xfrm xfrm ;
   struct netns_ipvs *ipvs ;
   struct netns_mpls mpls ;
   struct netns_can can ;
   struct netns_xdp xdp ;
   struct sock *crypto_nlsk ;
   struct sock *diag_nlsk ;
} __attribute__((__designated_init__));
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/assoc_array.h"
struct assoc_array_ptr;
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/assoc_array.h"
struct assoc_array {
   struct assoc_array_ptr *root ;
   unsigned long nr_leaves_on_tree ;
};
#line 83  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/assoc_array.h"
typedef int32_t key_serial_t;
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
typedef uint32_t key_perm_t;
#line 32 
struct key_type;
#line 85  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
struct key_tag {
   struct callback_head rcu ;
   refcount_t usage ;
   bool removed ;
};
#line 91  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
struct __anonstruct_590 {
   u16 desc_len ;
   char desc[6U] ;
};
#line 91  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
union __anonunion_589 {
   struct __anonstruct_590 __anonCompField___anonunion_589_103 ;
   unsigned long x ;
};
#line 91  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
struct keyring_index_key {
   unsigned long hash ;
   union __anonunion_589 __anonCompField_keyring_index_key_104 ;
   struct key_type *type ;
   struct key_tag *domain_tag ;
   char *description ;
};
#line 111  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
union key_payload {
   void *rcu_data0 ;
   void *data[4U] ;
};
#line 153  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
struct key_restriction {
   int (*check)(struct key *, struct key_type *, union key_payload *, struct key *) ;
   struct key *key ;
   struct key_type *keytype ;
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
union __anonunion_591 {
   struct list_head graveyard_link ;
   struct rb_node serial_node ;
};
#line 172 
struct key_user;
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
union __anonunion_592 {
   time64_t expiry ;
   time64_t revoked_at ;
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
struct __anonstruct_594 {
   unsigned long hash ;
   unsigned long len_desc ;
   struct key_type *type ;
   struct key_tag *domain_tag ;
   char *description ;
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
union __anonunion_593 {
   struct keyring_index_key index_key ;
   struct __anonstruct_594 __anonCompField___anonunion_593_107 ;
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
struct __anonstruct_596 {
   struct list_head name_link ;
   struct assoc_array keys ;
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
union __anonunion_595 {
   union key_payload payload ;
   struct __anonstruct_596 __anonCompField___anonunion_595_109 ;
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
struct key {
   refcount_t usage ;
   key_serial_t serial ;
   union __anonunion_591 __anonCompField_key_105 ;
   struct rw_semaphore sem ;
   struct key_user *user ;
   void *security ;
   union __anonunion_592 __anonCompField_key_106 ;
   time64_t last_used_at ;
   kuid_t uid ;
   kgid_t gid ;
   key_perm_t perm ;
   unsigned short quotalen ;
   unsigned short datalen ;
   short state ;
   unsigned long flags ;
   union __anonunion_593 __anonCompField_key_108 ;
   union __anonunion_595 __anonCompField_key_110 ;
   struct key_restriction *restrict_link ;
};
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/user.h"
struct user_struct {
   refcount_t __count ;
   atomic_t processes ;
   atomic_t sigpending ;
   atomic_t fanotify_listeners ;
   atomic_long_t epoll_watches ;
   unsigned long mq_bytes ;
   unsigned long locked_shm ;
   unsigned long unix_inflight ;
   atomic_long_t pipe_bufs ;
   struct hlist_node uidhash_node ;
   kuid_t uid ;
   atomic_long_t locked_vm ;
   struct ratelimit_state ratelimit ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cred.h"
struct group_info {
   atomic_t usage ;
   int ngroups ;
   kgid_t gid[0U] ;
} __attribute__((__designated_init__));
#line 111  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cred.h"
union __anonunion_599 {
   int non_rcu ;
   struct callback_head rcu ;
};
#line 111  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cred.h"
struct cred {
   atomic_t usage ;
   atomic_t subscribers ;
   void *put_addr ;
   unsigned int magic ;
   kuid_t uid ;
   kgid_t gid ;
   kuid_t suid ;
   kgid_t sgid ;
   kuid_t euid ;
   kgid_t egid ;
   kuid_t fsuid ;
   kgid_t fsgid ;
   unsigned int securebits ;
   kernel_cap_t cap_inheritable ;
   kernel_cap_t cap_permitted ;
   kernel_cap_t cap_effective ;
   kernel_cap_t cap_bset ;
   kernel_cap_t cap_ambient ;
   unsigned char jit_keyring ;
   struct key *session_keyring ;
   struct key *process_keyring ;
   struct key *thread_keyring ;
   struct key *request_key_auth ;
   void *security ;
   struct user_struct *user ;
   struct user_namespace *user_ns ;
   struct group_info *group_info ;
   union __anonunion_599 __anonCompField_cred_111 ;
} __attribute__((__designated_init__));
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seq_file.h"
struct seq_file {
   char *buf ;
   size_t size ;
   size_t from ;
   size_t count ;
   size_t pad_until ;
   loff_t index ;
   loff_t read_pos ;
   u64 version ;
   struct mutex lock ;
   struct seq_operations *op ;
   int poll_event ;
   struct file *file ;
   void *private ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seq_file.h"
struct seq_operations {
   void *(*start)(struct seq_file *, loff_t *) ;
   void (*stop)(struct seq_file *, void *) ;
   void *(*next)(struct seq_file *, void *, loff_t *) ;
   int (*show)(struct seq_file *, void *) ;
};
#line 275  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/net_namespace.h"
struct __anonstruct_possible_net_t_600 {
   struct net *net ;
};
#line 275  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/net_namespace.h"
typedef struct __anonstruct_possible_net_t_600 possible_net_t;
#line 58  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct ieee_ets {
   __u8 willing ;
   __u8 ets_cap ;
   __u8 cbs ;
   __u8 tc_tx_bw[8U] ;
   __u8 tc_rx_bw[8U] ;
   __u8 tc_tsa[8U] ;
   __u8 prio_tc[8U] ;
   __u8 tc_reco_bw[8U] ;
   __u8 tc_reco_tsa[8U] ;
   __u8 reco_prio_tc[8U] ;
};
#line 78  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct ieee_maxrate {
   __u64 tc_maxrate[8U] ;
};
#line 119  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct ieee_qcn {
   __u8 rpg_enable[8U] ;
   __u32 rppp_max_rps[8U] ;
   __u32 rpg_time_reset[8U] ;
   __u32 rpg_byte_reset[8U] ;
   __u32 rpg_threshold[8U] ;
   __u32 rpg_max_rate[8U] ;
   __u32 rpg_ai_rate[8U] ;
   __u32 rpg_hai_rate[8U] ;
   __u32 rpg_gd[8U] ;
   __u32 rpg_min_dec_fac[8U] ;
   __u32 rpg_min_rate[8U] ;
   __u32 cndd_state_machine[8U] ;
};
#line 141  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct ieee_qcn_stats {
   __u64 rppp_rp_centiseconds[8U] ;
   __u32 rppp_created_rps[8U] ;
};
#line 157  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct ieee_pfc {
   __u8 pfc_cap ;
   __u8 pfc_en ;
   __u8 mbc ;
   __u16 delay ;
   __u64 requests[8U] ;
   __u64 indications[8U] ;
};
#line 168  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct dcbnl_buffer {
   __u8 prio2buffer[8U] ;
   __u32 buffer_size[8U] ;
   __u32 total_size ;
};
#line 190  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct cee_pg {
   __u8 willing ;
   __u8 error ;
   __u8 pg_en ;
   __u8 tcs_supported ;
   __u8 pg_bw[8U] ;
   __u8 prio_pg[8U] ;
};
#line 207  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct cee_pfc {
   __u8 willing ;
   __u8 error ;
   __u8 pfc_en ;
   __u8 tcs_supported ;
};
#line 244  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct dcb_app {
   __u8 selector ;
   __u8 priority ;
   __u16 protocol ;
};
#line 259  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct dcb_peer_app_info {
   __u8 willing ;
   __u8 error ;
};
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/dcbnl.h"
struct dcbnl_rtnl_ops {
   int (*ieee_getets)(struct net_device *, struct ieee_ets *) ;
   int (*ieee_setets)(struct net_device *, struct ieee_ets *) ;
   int (*ieee_getmaxrate)(struct net_device *, struct ieee_maxrate *) ;
   int (*ieee_setmaxrate)(struct net_device *, struct ieee_maxrate *) ;
   int (*ieee_getqcn)(struct net_device *, struct ieee_qcn *) ;
   int (*ieee_setqcn)(struct net_device *, struct ieee_qcn *) ;
   int (*ieee_getqcnstats)(struct net_device *, struct ieee_qcn_stats *) ;
   int (*ieee_getpfc)(struct net_device *, struct ieee_pfc *) ;
   int (*ieee_setpfc)(struct net_device *, struct ieee_pfc *) ;
   int (*ieee_getapp)(struct net_device *, struct dcb_app *) ;
   int (*ieee_setapp)(struct net_device *, struct dcb_app *) ;
   int (*ieee_delapp)(struct net_device *, struct dcb_app *) ;
   int (*ieee_peer_getets)(struct net_device *, struct ieee_ets *) ;
   int (*ieee_peer_getpfc)(struct net_device *, struct ieee_pfc *) ;
   u8 (*getstate)(struct net_device *) ;
   u8 (*setstate)(struct net_device *, u8 ) ;
   void (*getpermhwaddr)(struct net_device *, u8 *) ;
   void (*setpgtccfgtx)(struct net_device *, int , u8 , u8 , u8 , u8 ) ;
   void (*setpgbwgcfgtx)(struct net_device *, int , u8 ) ;
   void (*setpgtccfgrx)(struct net_device *, int , u8 , u8 , u8 , u8 ) ;
   void (*setpgbwgcfgrx)(struct net_device *, int , u8 ) ;
   void (*getpgtccfgtx)(struct net_device *, int , u8 *, u8 *, u8 *, u8 *) ;
   void (*getpgbwgcfgtx)(struct net_device *, int , u8 *) ;
   void (*getpgtccfgrx)(struct net_device *, int , u8 *, u8 *, u8 *, u8 *) ;
   void (*getpgbwgcfgrx)(struct net_device *, int , u8 *) ;
   void (*setpfccfg)(struct net_device *, int , u8 ) ;
   void (*getpfccfg)(struct net_device *, int , u8 *) ;
   u8 (*setall)(struct net_device *) ;
   u8 (*getcap)(struct net_device *, int , u8 *) ;
   int (*getnumtcs)(struct net_device *, int , u8 *) ;
   int (*setnumtcs)(struct net_device *, int , u8 ) ;
   u8 (*getpfcstate)(struct net_device *) ;
   void (*setpfcstate)(struct net_device *, u8 ) ;
   void (*getbcncfg)(struct net_device *, int , u32 *) ;
   void (*setbcncfg)(struct net_device *, int , u32 ) ;
   void (*getbcnrp)(struct net_device *, int , u8 *) ;
   void (*setbcnrp)(struct net_device *, int , u8 ) ;
   int (*setapp)(struct net_device *, u8 , u16 , u8 ) ;
   int (*getapp)(struct net_device *, u8 , u16 ) ;
   u8 (*getfeatcfg)(struct net_device *, int , u8 *) ;
   u8 (*setfeatcfg)(struct net_device *, int , u8 ) ;
   u8 (*getdcbx)(struct net_device *) ;
   u8 (*setdcbx)(struct net_device *, u8 ) ;
   int (*peer_getappinfo)(struct net_device *, struct dcb_peer_app_info *, u16 *) ;
   int (*peer_getapptable)(struct net_device *, struct dcb_app *) ;
   int (*cee_peer_getpg)(struct net_device *, struct cee_pg *) ;
   int (*cee_peer_getpfc)(struct net_device *, struct cee_pfc *) ;
   int (*dcbnl_getbuffer)(struct net_device *, struct dcbnl_buffer *) ;
   int (*dcbnl_setbuffer)(struct net_device *, struct dcbnl_buffer *) ;
};
#line 41  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/taskstats.h"
struct taskstats {
   __u16 version ;
   __u32 ac_exitcode ;
   __u8 ac_flag ;
   __u8 ac_nice ;
   __u64 cpu_count ;
   __u64 cpu_delay_total ;
   __u64 blkio_count ;
   __u64 blkio_delay_total ;
   __u64 swapin_count ;
   __u64 swapin_delay_total ;
   __u64 cpu_run_real_total ;
   __u64 cpu_run_virtual_total ;
   char ac_comm[32U] ;
   __u8 ac_sched ;
   __u8 ac_pad[3U] ;
   __u32 ac_uid ;
   __u32 ac_gid ;
   __u32 ac_pid ;
   __u32 ac_ppid ;
   __u32 ac_btime ;
   __u64 ac_etime ;
   __u64 ac_utime ;
   __u64 ac_stime ;
   __u64 ac_minflt ;
   __u64 ac_majflt ;
   __u64 coremem ;
   __u64 virtmem ;
   __u64 hiwater_rss ;
   __u64 hiwater_vm ;
   __u64 read_char ;
   __u64 write_char ;
   __u64 read_syscalls ;
   __u64 write_syscalls ;
   __u64 read_bytes ;
   __u64 write_bytes ;
   __u64 cancelled_write_bytes ;
   __u64 nvcsw ;
   __u64 nivcsw ;
   __u64 ac_utimescaled ;
   __u64 ac_stimescaled ;
   __u64 cpu_scaled_run_real_total ;
   __u64 freepages_count ;
   __u64 freepages_delay_total ;
   __u64 thrashing_count ;
   __u64 thrashing_delay_total ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/cgroupstats.h"
struct mnt_namespace;
#line 60 
struct uts_namespace;
#line 61 
struct ipc_namespace;
#line 62 
struct cgroup_namespace;
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/nsproxy.h"
struct nsproxy {
   atomic_t count ;
   struct uts_namespace *uts_ns ;
   struct ipc_namespace *ipc_ns ;
   struct mnt_namespace *mnt_ns ;
   struct pid_namespace *pid_ns_for_children ;
   struct net *net_ns ;
   struct cgroup_namespace *cgroup_ns ;
};
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/user_namespace.h"
struct uid_gid_extent {
   u32 first ;
   u32 lower_first ;
   u32 count ;
};
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/user_namespace.h"
struct __anonstruct_602 {
   struct uid_gid_extent *forward ;
   struct uid_gid_extent *reverse ;
};
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/user_namespace.h"
union __anonunion_601 {
   struct uid_gid_extent extent[5U] ;
   struct __anonstruct_602 __anonCompField___anonunion_601_112 ;
};
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/user_namespace.h"
struct uid_gid_map {
   u32 nr_extents ;
   union __anonunion_601 __anonCompField_uid_gid_map_113 ;
};
#line 55  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/user_namespace.h"
struct user_namespace {
   struct uid_gid_map uid_map ;
   struct uid_gid_map gid_map ;
   struct uid_gid_map projid_map ;
   atomic_t count ;
   struct user_namespace *parent ;
   int level ;
   kuid_t owner ;
   kgid_t group ;
   struct ns_common ns ;
   unsigned long flags ;
   struct list_head keyring_name_list ;
   struct key *user_keyring_register ;
   struct rw_semaphore keyring_sem ;
   struct key *persistent_keyring_register ;
   struct work_struct work ;
   struct ctl_table_set set ;
   struct ctl_table_header *sysctls ;
   struct ucounts *ucounts ;
   int ucount_max[9U] ;
} __attribute__((__designated_init__));
#line 91  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/user_namespace.h"
struct ucounts {
   struct hlist_node node ;
   struct user_namespace *ns ;
   kuid_t uid ;
   int count ;
   atomic_t ucount[9U] ;
};
#line 139 
enum irqreturn {
    IRQ_NONE = 0,
    IRQ_HANDLED = 1,
    IRQ_WAKE_THREAD = 2
};
#line 145  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/user_namespace.h"
typedef enum irqreturn irqreturn_t;
#line 268  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/interrupt.h"
struct irq_affinity_notify {
   unsigned int irq ;
   struct kref kref ;
   struct work_struct work ;
   void (*notify)(struct irq_affinity_notify *, cpumask_t *) ;
   void (*release)(struct kref *) ;
};
#line 65  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct bpf_insn {
   __u8 code ;
   __u8 dst_reg : 4 ;
   __u8 src_reg : 4 ;
   __s16 off ;
   __s32 imm ;
};
#line 79  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct bpf_cgroup_storage_key {
   __u64 cgroup_inode_id ;
   __u32 attach_type ;
};
#line 110 
enum bpf_map_type {
    BPF_MAP_TYPE_UNSPEC = 0,
    BPF_MAP_TYPE_HASH = 1,
    BPF_MAP_TYPE_ARRAY = 2,
    BPF_MAP_TYPE_PROG_ARRAY = 3,
    BPF_MAP_TYPE_PERF_EVENT_ARRAY = 4,
    BPF_MAP_TYPE_PERCPU_HASH = 5,
    BPF_MAP_TYPE_PERCPU_ARRAY = 6,
    BPF_MAP_TYPE_STACK_TRACE = 7,
    BPF_MAP_TYPE_CGROUP_ARRAY = 8,
    BPF_MAP_TYPE_LRU_HASH = 9,
    BPF_MAP_TYPE_LRU_PERCPU_HASH = 10,
    BPF_MAP_TYPE_LPM_TRIE = 11,
    BPF_MAP_TYPE_ARRAY_OF_MAPS = 12,
    BPF_MAP_TYPE_HASH_OF_MAPS = 13,
    BPF_MAP_TYPE_DEVMAP = 14,
    BPF_MAP_TYPE_SOCKMAP = 15,
    BPF_MAP_TYPE_CPUMAP = 16,
    BPF_MAP_TYPE_XSKMAP = 17,
    BPF_MAP_TYPE_SOCKHASH = 18,
    BPF_MAP_TYPE_CGROUP_STORAGE = 19,
    BPF_MAP_TYPE_REUSEPORT_SOCKARRAY = 20,
    BPF_MAP_TYPE_PERCPU_CGROUP_STORAGE = 21,
    BPF_MAP_TYPE_QUEUE = 22,
    BPF_MAP_TYPE_STACK = 23,
    BPF_MAP_TYPE_SK_STORAGE = 24,
    BPF_MAP_TYPE_DEVMAP_HASH = 25
};
#line 139 
enum bpf_prog_type {
    BPF_PROG_TYPE_UNSPEC = 0,
    BPF_PROG_TYPE_SOCKET_FILTER = 1,
    BPF_PROG_TYPE_KPROBE = 2,
    BPF_PROG_TYPE_SCHED_CLS = 3,
    BPF_PROG_TYPE_SCHED_ACT = 4,
    BPF_PROG_TYPE_TRACEPOINT = 5,
    BPF_PROG_TYPE_XDP = 6,
    BPF_PROG_TYPE_PERF_EVENT = 7,
    BPF_PROG_TYPE_CGROUP_SKB = 8,
    BPF_PROG_TYPE_CGROUP_SOCK = 9,
    BPF_PROG_TYPE_LWT_IN = 10,
    BPF_PROG_TYPE_LWT_OUT = 11,
    BPF_PROG_TYPE_LWT_XMIT = 12,
    BPF_PROG_TYPE_SOCK_OPS = 13,
    BPF_PROG_TYPE_SK_SKB = 14,
    BPF_PROG_TYPE_CGROUP_DEVICE = 15,
    BPF_PROG_TYPE_SK_MSG = 16,
    BPF_PROG_TYPE_RAW_TRACEPOINT = 17,
    BPF_PROG_TYPE_CGROUP_SOCK_ADDR = 18,
    BPF_PROG_TYPE_LWT_SEG6LOCAL = 19,
    BPF_PROG_TYPE_LIRC_MODE2 = 20,
    BPF_PROG_TYPE_SK_REUSEPORT = 21,
    BPF_PROG_TYPE_FLOW_DISSECTOR = 22,
    BPF_PROG_TYPE_CGROUP_SYSCTL = 23,
    BPF_PROG_TYPE_RAW_TRACEPOINT_WRITABLE = 24,
    BPF_PROG_TYPE_CGROUP_SOCKOPT = 25,
    BPF_PROG_TYPE_TRACING = 26
};
#line 169 
enum bpf_attach_type {
    BPF_CGROUP_INET_INGRESS = 0,
    BPF_CGROUP_INET_EGRESS = 1,
    BPF_CGROUP_INET_SOCK_CREATE = 2,
    BPF_CGROUP_SOCK_OPS = 3,
    BPF_SK_SKB_STREAM_PARSER = 4,
    BPF_SK_SKB_STREAM_VERDICT = 5,
    BPF_CGROUP_DEVICE = 6,
    BPF_SK_MSG_VERDICT = 7,
    BPF_CGROUP_INET4_BIND = 8,
    BPF_CGROUP_INET6_BIND = 9,
    BPF_CGROUP_INET4_CONNECT = 10,
    BPF_CGROUP_INET6_CONNECT = 11,
    BPF_CGROUP_INET4_POST_BIND = 12,
    BPF_CGROUP_INET6_POST_BIND = 13,
    BPF_CGROUP_UDP4_SENDMSG = 14,
    BPF_CGROUP_UDP6_SENDMSG = 15,
    BPF_LIRC_MODE2 = 16,
    BPF_FLOW_DISSECTOR = 17,
    BPF_CGROUP_SYSCTL = 18,
    BPF_CGROUP_UDP4_RECVMSG = 19,
    BPF_CGROUP_UDP6_RECVMSG = 20,
    BPF_CGROUP_GETSOCKOPT = 21,
    BPF_CGROUP_SETSOCKOPT = 22,
    BPF_TRACE_RAW_TP = 23,
    BPF_TRACE_FENTRY = 24,
    BPF_TRACE_FEXIT = 25,
    __MAX_BPF_ATTACH_TYPE = 26
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_604 {
   __u32 map_type ;
   __u32 key_size ;
   __u32 value_size ;
   __u32 max_entries ;
   __u32 map_flags ;
   __u32 inner_map_fd ;
   __u32 numa_node ;
   char map_name[16U] ;
   __u32 map_ifindex ;
   __u32 btf_fd ;
   __u32 btf_key_type_id ;
   __u32 btf_value_type_id ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
union __anonunion_606 {
   __u64 value ;
   __u64 next_key ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_605 {
   __u32 map_fd ;
   __u64 key ;
   union __anonunion_606 __anonCompField___anonstruct_605_116 ;
   __u64 flags ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_607 {
   __u32 prog_type ;
   __u32 insn_cnt ;
   __u64 insns ;
   __u64 license ;
   __u32 log_level ;
   __u32 log_size ;
   __u64 log_buf ;
   __u32 kern_version ;
   __u32 prog_flags ;
   char prog_name[16U] ;
   __u32 prog_ifindex ;
   __u32 expected_attach_type ;
   __u32 prog_btf_fd ;
   __u32 func_info_rec_size ;
   __u64 func_info ;
   __u32 func_info_cnt ;
   __u32 line_info_rec_size ;
   __u64 line_info ;
   __u32 line_info_cnt ;
   __u32 attach_btf_id ;
   __u32 attach_prog_fd ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_608 {
   __u64 pathname ;
   __u32 bpf_fd ;
   __u32 file_flags ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_609 {
   __u32 target_fd ;
   __u32 attach_bpf_fd ;
   __u32 attach_type ;
   __u32 attach_flags ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_test_610 {
   __u32 prog_fd ;
   __u32 retval ;
   __u32 data_size_in ;
   __u32 data_size_out ;
   __u64 data_in ;
   __u64 data_out ;
   __u32 repeat ;
   __u32 duration ;
   __u32 ctx_size_in ;
   __u32 ctx_size_out ;
   __u64 ctx_in ;
   __u64 ctx_out ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
union __anonunion_612 {
   __u32 start_id ;
   __u32 prog_id ;
   __u32 map_id ;
   __u32 btf_id ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_611 {
   union __anonunion_612 __anonCompField___anonstruct_611_121 ;
   __u32 next_id ;
   __u32 open_flags ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_info_613 {
   __u32 bpf_fd ;
   __u32 info_len ;
   __u64 info ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_query_614 {
   __u32 target_fd ;
   __u32 attach_type ;
   __u32 query_flags ;
   __u32 attach_flags ;
   __u64 prog_ids ;
   __u32 prog_cnt ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_raw_tracepoint_615 {
   __u64 name ;
   __u32 prog_fd ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_616 {
   __u64 btf ;
   __u64 btf_log_buf ;
   __u32 btf_size ;
   __u32 btf_log_size ;
   __u32 btf_log_level ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_task_fd_query_617 {
   __u32 pid ;
   __u32 fd ;
   __u32 flags ;
   __u32 buf_len ;
   __u64 buf ;
   __u32 prog_id ;
   __u32 fd_type ;
   __u64 probe_offset ;
   __u64 probe_addr ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
union bpf_attr {
   struct __anonstruct_604 __anonCompField_bpf_attr_115 ;
   struct __anonstruct_605 __anonCompField_bpf_attr_117 ;
   struct __anonstruct_607 __anonCompField_bpf_attr_118 ;
   struct __anonstruct_608 __anonCompField_bpf_attr_119 ;
   struct __anonstruct_609 __anonCompField_bpf_attr_120 ;
   struct __anonstruct_test_610 test ;
   struct __anonstruct_611 __anonCompField_bpf_attr_122 ;
   struct __anonstruct_info_613 info ;
   struct __anonstruct_query_614 query ;
   struct __anonstruct_raw_tracepoint_615 raw_tracepoint ;
   struct __anonstruct_616 __anonCompField_bpf_attr_123 ;
   struct __anonstruct_task_fd_query_617 task_fd_query ;
} __attribute__((__aligned__(8)));
#line 3653  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct bpf_func_info {
   __u32 insn_off ;
   __u32 type_id ;
};
#line 3661  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct bpf_line_info {
   __u32 insn_off ;
   __u32 file_name_off ;
   __u32 line_off ;
   __u32 line_col ;
};
#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/file.h"
struct bpf_prog_aux;
#line 96 
struct bpf_map;
#line 97 
struct btf;
#line 98 
struct btf_type;
#line 37  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_map_ops {
   int (*map_alloc_check)(union bpf_attr *) ;
   struct bpf_map *(*map_alloc)(union bpf_attr *) ;
   void (*map_release)(struct bpf_map *, struct file *) ;
   void (*map_free)(struct bpf_map *) ;
   int (*map_get_next_key)(struct bpf_map *, void *, void *) ;
   void (*map_release_uref)(struct bpf_map *) ;
   void *(*map_lookup_elem_sys_only)(struct bpf_map *, void *) ;
   void *(*map_lookup_elem)(struct bpf_map *, void *) ;
   int (*map_update_elem)(struct bpf_map *, void *, void *, u64 ) ;
   int (*map_delete_elem)(struct bpf_map *, void *) ;
   int (*map_push_elem)(struct bpf_map *, void *, u64 ) ;
   int (*map_pop_elem)(struct bpf_map *, void *) ;
   int (*map_peek_elem)(struct bpf_map *, void *) ;
   void *(*map_fd_get_ptr)(struct bpf_map *, struct file *, int ) ;
   void (*map_fd_put_ptr)(void *) ;
   u32 (*map_gen_lookup)(struct bpf_map *, struct bpf_insn *) ;
   u32 (*map_fd_sys_lookup_elem)(void *) ;
   void (*map_seq_show_elem)(struct bpf_map *, void *, struct seq_file *) ;
   int (*map_check_btf)(struct bpf_map *, struct btf *, struct btf_type *, struct btf_type *) ;
   int (*map_poke_track)(struct bpf_map *, struct bpf_prog_aux *) ;
   void (*map_poke_untrack)(struct bpf_map *, struct bpf_prog_aux *) ;
   void (*map_poke_run)(struct bpf_map *, u32 , struct bpf_prog *, struct bpf_prog *) ;
   int (*map_direct_value_addr)(struct bpf_map *, u64 *, u32 ) ;
   int (*map_direct_value_meta)(struct bpf_map *, u64 , u32 *) ;
   int (*map_mmap)(struct bpf_map *, struct vm_area_struct *) ;
};
#line 82  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_map_memory {
   u32 pages ;
   struct user_struct *user ;
};
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_map {
   struct bpf_map_ops *ops ;
   struct bpf_map *inner_map_meta ;
   void *security ;
   enum bpf_map_type map_type ;
   u32 key_size ;
   u32 value_size ;
   u32 max_entries ;
   u32 map_flags ;
   int spin_lock_off ;
   u32 id ;
   int numa_node ;
   u32 btf_key_type_id ;
   u32 btf_value_type_id ;
   struct btf *btf ;
   struct bpf_map_memory memory ;
   char name[16U] ;
   bool unpriv_array ;
   bool frozen ;
   atomic64_t refcnt ;
   atomic64_t usercnt ;
   struct work_struct work ;
   struct mutex freeze_mutex ;
   u64 writecnt ;
};
#line 151 
struct bpf_offload_dev;
#line 152 
struct bpf_offloaded_map;
#line 156  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_map_dev_ops {
   int (*map_get_next_key)(struct bpf_offloaded_map *, void *, void *) ;
   int (*map_lookup_elem)(struct bpf_offloaded_map *, void *, void *) ;
   int (*map_update_elem)(struct bpf_offloaded_map *, void *, void *, u64 ) ;
   int (*map_delete_elem)(struct bpf_offloaded_map *, void *) ;
};
#line 166  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_offloaded_map {
   struct bpf_map map ;
   struct net_device *netdev ;
   struct bpf_map_dev_ops *dev_ops ;
   void *dev_priv ;
   struct list_head offloads ;
};
#line 327  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_prog_ops {
   int (*test_run)(struct bpf_prog *, union bpf_attr *, union bpf_attr *) ;
};
#line 369  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_prog_offload {
   struct bpf_prog *prog ;
   struct net_device *netdev ;
   struct bpf_offload_dev *offdev ;
   void *dev_priv ;
   struct list_head offloads ;
   bool dev_state ;
   bool opt_failed ;
   void *jited_image ;
   u32 jited_len ;
};
#line 394  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_prog_stats {
   u64 cnt ;
   u64 nsecs ;
   struct u64_stats_sync syncp ;
} __attribute__((__aligned__(16)));
#line 400  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct btf_func_model {
   u8 ret_size ;
   u8 nr_args ;
   u8 arg_size[12U] ;
};
#line 447 
enum bpf_tramp_prog_type {
    BPF_TRAMP_FENTRY = 0,
    BPF_TRAMP_FEXIT = 1,
    BPF_TRAMP_MAX = 2
};
#line 454  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct __anonstruct_func_644 {
   struct btf_func_model model ;
   void *addr ;
   bool ftrace_managed ;
};
#line 454  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_trampoline {
   struct hlist_node hlist ;
   struct mutex mutex ;
   refcount_t refcnt ;
   u64 key ;
   struct __anonstruct_func_644 func ;
   struct hlist_head progs_hlist[2U] ;
   int progs_cnt[2U] ;
   void *image ;
   u64 selector ;
};
#line 495  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_func_info_aux {
   bool unreliable ;
};
#line 504  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct __anonstruct_tail_call_646 {
   struct bpf_map *map ;
   u32 key ;
};
#line 504  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
union __anonunion_645 {
   struct __anonstruct_tail_call_646 tail_call ;
};
#line 504  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_jit_poke_descriptor {
   void *ip ;
   union __anonunion_645 __anonCompField_bpf_jit_poke_descriptor_148 ;
   bool ip_stable ;
   u8 adj_off ;
   u16 reason ;
};
#line 517  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
union __anonunion_647 {
   struct work_struct work ;
   struct callback_head rcu ;
};
#line 517  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_prog_aux {
   atomic64_t refcnt ;
   u32 used_map_cnt ;
   u32 max_ctx_offset ;
   u32 max_pkt_offset ;
   u32 max_tp_access ;
   u32 stack_depth ;
   u32 id ;
   u32 func_cnt ;
   u32 func_idx ;
   u32 attach_btf_id ;
   struct bpf_prog *linked_prog ;
   bool verifier_zext ;
   bool offload_requested ;
   bool attach_btf_trace ;
   bool func_proto_unreliable ;
   enum bpf_tramp_prog_type trampoline_prog_type ;
   struct bpf_trampoline *trampoline ;
   struct hlist_node tramp_hlist ;
   struct btf_type *attach_func_proto ;
   char *attach_func_name ;
   struct bpf_prog **func ;
   void *jit_data ;
   struct bpf_jit_poke_descriptor *poke_tab ;
   u32 size_poke_tab ;
   struct latch_tree_node ksym_tnode ;
   struct list_head ksym_lnode ;
   struct bpf_prog_ops *ops ;
   struct bpf_map **used_maps ;
   struct bpf_prog *prog ;
   struct user_struct *user ;
   u64 load_time ;
   struct bpf_map *cgroup_storage[2U] ;
   char name[16U] ;
   void *security ;
   struct bpf_prog_offload *offload ;
   struct btf *btf ;
   struct bpf_func_info *func_info ;
   struct bpf_func_info_aux *func_info_aux ;
   struct bpf_line_info *linfo ;
   void **jited_linfo ;
   u32 func_info_cnt ;
   u32 nr_linfo ;
   u32 linfo_idx ;
   u32 num_exentries ;
   struct exception_table_entry *extable ;
   struct bpf_prog_stats *stats ;
   union __anonunion_647 __anonCompField_bpf_prog_aux_149 ;
};
#line 686 
struct bpf_cgroup_storage;
#line 686  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_prog_array_item {
   struct bpf_prog *prog ;
   struct bpf_cgroup_storage *cgroup_storage[2U] ;
};
#line 691  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_prog_array {
   struct callback_head rcu ;
   struct bpf_prog_array_item items[0U] ;
};
#line 893 
struct xdp_buff;
#line 1335 
struct cgroup;
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf-cgroup.h"
struct bpf_cgroup_storage_map;
#line 37  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf-cgroup.h"
struct bpf_storage_buffer {
   struct callback_head rcu ;
   char data[0U] ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf-cgroup.h"
union __anonunion_649 {
   struct bpf_storage_buffer *buf ;
   void *percpu_buf ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf-cgroup.h"
struct bpf_cgroup_storage {
   union __anonunion_649 __anonCompField_bpf_cgroup_storage_151 ;
   struct bpf_cgroup_storage_map *map ;
   struct bpf_cgroup_storage_key key ;
   struct list_head list ;
   struct rb_node node ;
   struct callback_head rcu ;
};
#line 62  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf-cgroup.h"
struct cgroup_bpf {
   struct bpf_prog_array *effective[26U] ;
   struct list_head progs[26U] ;
   u32 flags[26U] ;
   struct bpf_prog_array *inactive ;
   struct percpu_ref refcnt ;
   struct work_struct release_work ;
};
#line 69  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kthread.h"
struct kthread_work;
#line 86  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kthread.h"
struct kthread_worker {
   unsigned int flags ;
   raw_spinlock_t lock ;
   struct list_head work_list ;
   struct list_head delayed_work_list ;
   struct task_struct *task ;
   struct kthread_work *current_work ;
};
#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kthread.h"
struct kthread_work {
   struct list_head node ;
   void (*func)(struct kthread_work *) ;
   struct kthread_worker *worker ;
   int canceling ;
};
#line 103  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kthread.h"
struct kthread_delayed_work {
   struct kthread_work work ;
   struct timer_list timer ;
};
#line 199 
struct cgroup_subsys_state;
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/psi_types.h"
struct psi_group_cpu {
   seqcount_t seq ;
   unsigned int tasks[3U] ;
   u32 state_mask ;
   u32 times[6U] ;
   u64 state_start ;
   u32 times_prev[2U][6U] ;
};
#line 96 
struct psi_group;
#line 128  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/psi_types.h"
struct psi_group {
   struct mutex avgs_lock ;
   struct psi_group_cpu *pcpu ;
   u64 avg_total[5U] ;
   u64 avg_last_update ;
   u64 avg_next_update ;
   struct delayed_work avgs_work ;
   u64 total[2U][5U] ;
   unsigned long avg[5U][3U] ;
   atomic_t poll_scheduled ;
   struct kthread_worker *poll_kworker ;
   struct kthread_delayed_work poll_work ;
   struct mutex trigger_lock ;
   struct list_head triggers ;
   u32 nr_triggers[5U] ;
   u32 poll_states ;
   u64 poll_min_period ;
   u64 polling_total[5U] ;
   u64 polling_next_update ;
   u64 polling_until ;
};
#line 166 
struct cgroup_root;
#line 167 
struct cgroup_subsys;
#line 168 
struct cgroup_taskset;
#line 119  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup_file {
   struct kernfs_node *kn ;
   unsigned long notified_at ;
   struct timer_list notify_timer ;
};
#line 133  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup_subsys_state {
   struct cgroup *cgroup ;
   struct cgroup_subsys *ss ;
   struct percpu_ref refcnt ;
   struct list_head sibling ;
   struct list_head children ;
   struct list_head rstat_css_node ;
   int id ;
   unsigned int flags ;
   u64 serial_nr ;
   atomic_t online_cnt ;
   struct work_struct destroy_work ;
   struct rcu_work destroy_rwork ;
   struct cgroup_subsys_state *parent ;
};
#line 190  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct css_set {
   struct cgroup_subsys_state *subsys[14U] ;
   refcount_t refcount ;
   struct css_set *dom_cset ;
   struct cgroup *dfl_cgrp ;
   int nr_tasks ;
   struct list_head tasks ;
   struct list_head mg_tasks ;
   struct list_head dying_tasks ;
   struct list_head task_iters ;
   struct list_head e_cset_node[14U] ;
   struct list_head threaded_csets ;
   struct list_head threaded_csets_node ;
   struct hlist_node hlist ;
   struct list_head cgrp_links ;
   struct list_head mg_preload_node ;
   struct list_head mg_node ;
   struct cgroup *mg_src_cgrp ;
   struct cgroup *mg_dst_cgrp ;
   struct css_set *mg_dst_cset ;
   bool dead ;
   struct callback_head callback_head ;
};
#line 279  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup_base_stat {
   struct task_cputime cputime ;
};
#line 303  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup_rstat_cpu {
   struct u64_stats_sync bsync ;
   struct cgroup_base_stat bstat ;
   struct cgroup_base_stat last_bstat ;
   struct cgroup *updated_children ;
   struct cgroup *updated_next ;
};
#line 332  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup_freezer_state {
   bool freeze ;
   int e_freeze ;
   int nr_frozen_descendants ;
   int nr_frozen_tasks ;
};
#line 351  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup {
   struct cgroup_subsys_state self ;
   unsigned long flags ;
   int level ;
   int max_depth ;
   int nr_descendants ;
   int nr_dying_descendants ;
   int max_descendants ;
   int nr_populated_csets ;
   int nr_populated_domain_children ;
   int nr_populated_threaded_children ;
   int nr_threaded_children ;
   struct kernfs_node *kn ;
   struct cgroup_file procs_file ;
   struct cgroup_file events_file ;
   u16 subtree_control ;
   u16 subtree_ss_mask ;
   u16 old_subtree_control ;
   u16 old_subtree_ss_mask ;
   struct cgroup_subsys_state *subsys[14U] ;
   struct cgroup_root *root ;
   struct list_head cset_links ;
   struct list_head e_csets[14U] ;
   struct cgroup *dom_cgrp ;
   struct cgroup *old_dom_cgrp ;
   struct cgroup_rstat_cpu *rstat_cpu ;
   struct list_head rstat_css_list ;
   struct cgroup_base_stat last_bstat ;
   struct cgroup_base_stat bstat ;
   struct prev_cputime prev_cputime ;
   struct list_head pidlists ;
   struct mutex pidlist_mutex ;
   wait_queue_head_t offline_waitq ;
   struct work_struct release_agent_work ;
   struct psi_group psi ;
   struct cgroup_bpf bpf ;
   atomic_t congestion_count ;
   struct cgroup_freezer_state freezer ;
   u64 ancestor_ids[] ;
};
#line 489  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup_root {
   struct kernfs_root *kf_root ;
   unsigned int subsys_mask ;
   int hierarchy_id ;
   struct cgroup cgrp ;
   u64 cgrp_ancestor_id_storage ;
   atomic_t nr_cgrps ;
   struct list_head root_list ;
   unsigned int flags ;
   char release_agent_path[4096U] ;
   char name[64U] ;
};
#line 527  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cftype {
   char name[64U] ;
   unsigned long private ;
   size_t max_write_len ;
   unsigned int flags ;
   unsigned int file_offset ;
   struct cgroup_subsys *ss ;
   struct list_head node ;
   struct kernfs_ops *kf_ops ;
   int (*open)(struct kernfs_open_file *) ;
   void (*release)(struct kernfs_open_file *) ;
   u64 (*read_u64)(struct cgroup_subsys_state *, struct cftype *) ;
   s64 (*read_s64)(struct cgroup_subsys_state *, struct cftype *) ;
   int (*seq_show)(struct seq_file *, void *) ;
   void *(*seq_start)(struct seq_file *, loff_t *) ;
   void *(*seq_next)(struct seq_file *, void *, loff_t *) ;
   void (*seq_stop)(struct seq_file *, void *) ;
   int (*write_u64)(struct cgroup_subsys_state *, struct cftype *, u64 ) ;
   int (*write_s64)(struct cgroup_subsys_state *, struct cftype *, s64 ) ;
   ssize_t (*write)(struct kernfs_open_file *, char *, size_t , loff_t ) ;
   __poll_t (*poll)(struct kernfs_open_file *, struct poll_table_struct *) ;
   struct lock_class_key lockdep_key ;
};
#line 616  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup_subsys {
   struct cgroup_subsys_state *(*css_alloc)(struct cgroup_subsys_state *) ;
   int (*css_online)(struct cgroup_subsys_state *) ;
   void (*css_offline)(struct cgroup_subsys_state *) ;
   void (*css_released)(struct cgroup_subsys_state *) ;
   void (*css_free)(struct cgroup_subsys_state *) ;
   void (*css_reset)(struct cgroup_subsys_state *) ;
   void (*css_rstat_flush)(struct cgroup_subsys_state *, int ) ;
   int (*css_extra_stat_show)(struct seq_file *, struct cgroup_subsys_state *) ;
   int (*can_attach)(struct cgroup_taskset *) ;
   void (*cancel_attach)(struct cgroup_taskset *) ;
   void (*attach)(struct cgroup_taskset *) ;
   void (*post_attach)(void) ;
   int (*can_fork)(struct task_struct *) ;
   void (*cancel_fork)(struct task_struct *) ;
   void (*fork)(struct task_struct *) ;
   void (*exit)(struct task_struct *) ;
   void (*release)(struct task_struct *) ;
   void (*bind)(struct cgroup_subsys_state *) ;
   bool early_init : 1 ;
   bool implicit_on_dfl : 1 ;
   bool threaded : 1 ;
   bool broken_hierarchy : 1 ;
   bool warned_broken_hierarchy : 1 ;
   int id ;
   char *name ;
   char *legacy_name ;
   struct cgroup_root *root ;
   struct idr css_idr ;
   struct list_head cfts ;
   struct cftype *dfl_cftypes ;
   struct cftype *legacy_cftypes ;
   unsigned int depends_on ;
};
#line 783  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct __anonstruct_651 {
   u8 is_data ;
   u8 padding ;
   u16 prioidx ;
   u32 classid ;
} __attribute__((__packed__));
#line 783  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
union __anonunion_650 {
   struct __anonstruct_651 __anonCompField___anonunion_650_152 ;
   u64 val ;
};
#line 783  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct sock_cgroup_data {
   union __anonunion_650 __anonCompField_sock_cgroup_data_153 ;
};
#line 848  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup.h"
struct cgroup_namespace {
   refcount_t count ;
   struct ns_common ns ;
   struct user_namespace *user_ns ;
   struct ucounts *ucounts ;
   struct css_set *root_cset ;
};
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netprio_cgroup.h"
struct netprio_map {
   struct callback_head rcu ;
   u32 priomap_len ;
   u32 priomap[] ;
};
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/xdp.h"
struct xdp_mem_info {
   u32 type ;
   u32 id ;
};
#line 55  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/xdp.h"
struct zero_copy_allocator {
   void (*free)(struct zero_copy_allocator *, unsigned long ) ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/xdp.h"
struct xdp_rxq_info {
   struct net_device *dev ;
   u32 queue_index ;
   u32 reg_state ;
   struct xdp_mem_info mem ;
} __attribute__((__aligned__(64)));
#line 66  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/xdp.h"
struct xdp_buff {
   void *data ;
   void *data_end ;
   void *data_meta ;
   void *data_hard_start ;
   unsigned long handle ;
   struct xdp_rxq_info *rxq ;
};
#line 75  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/xdp.h"
struct xdp_frame {
   void *data ;
   u16 len ;
   u16 headroom ;
   u16 metasize ;
   struct xdp_mem_info mem ;
   struct net_device *dev_rx ;
};
#line 175 
struct netdev_bpf;
#line 160  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/security.h"
struct xfrm_policy;
#line 161 
struct xfrm_state;
#line 178 
struct request_sock;
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/signal.h"
struct sighand_struct {
   spinlock_t siglock ;
   refcount_t count ;
   wait_queue_head_t signalfd_wqh ;
   struct k_sigaction action[64U] ;
};
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/signal.h"
struct pacct_struct {
   int ac_flag ;
   long ac_exitcode ;
   unsigned long ac_mem ;
   u64 ac_utime ;
   u64 ac_stime ;
   unsigned long ac_minflt ;
   unsigned long ac_majflt ;
};
#line 36  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/signal.h"
struct cpu_itimer {
   u64 expires ;
   u64 incr ;
};
#line 45  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/signal.h"
struct task_cputime_atomic {
   atomic64_t utime ;
   atomic64_t stime ;
   atomic64_t sum_exec_runtime ;
};
#line 64  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/signal.h"
struct thread_group_cputimer {
   struct task_cputime_atomic cputime_atomic ;
};
#line 80 
struct tty_struct;
#line 80 
struct autogroup;
#line 80 
struct tty_audit_buf;
#line 80  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/signal.h"
struct signal_struct {
   refcount_t sigcnt ;
   atomic_t live ;
   int nr_threads ;
   struct list_head thread_head ;
   wait_queue_head_t wait_chldexit ;
   struct task_struct *curr_target ;
   struct sigpending shared_pending ;
   struct hlist_head multiprocess ;
   int group_exit_code ;
   int notify_count ;
   struct task_struct *group_exit_task ;
   int group_stop_count ;
   unsigned int flags ;
   unsigned int is_child_subreaper : 1 ;
   unsigned int has_child_subreaper : 1 ;
   int posix_timer_id ;
   struct list_head posix_timers ;
   struct hrtimer real_timer ;
   ktime_t it_real_incr ;
   struct cpu_itimer it[2U] ;
   struct thread_group_cputimer cputimer ;
   struct posix_cputimers posix_cputimers ;
   struct pid *pids[4U] ;
   struct pid *tty_old_pgrp ;
   int leader ;
   struct tty_struct *tty ;
   struct autogroup *autogroup ;
   seqlock_t stats_lock ;
   u64 utime ;
   u64 stime ;
   u64 cutime ;
   u64 cstime ;
   u64 gtime ;
   u64 cgtime ;
   struct prev_cputime prev_cputime ;
   unsigned long nvcsw ;
   unsigned long nivcsw ;
   unsigned long cnvcsw ;
   unsigned long cnivcsw ;
   unsigned long min_flt ;
   unsigned long maj_flt ;
   unsigned long cmin_flt ;
   unsigned long cmaj_flt ;
   unsigned long inblock ;
   unsigned long oublock ;
   unsigned long cinblock ;
   unsigned long coublock ;
   unsigned long maxrss ;
   unsigned long cmaxrss ;
   struct task_io_accounting ioac ;
   unsigned long long sum_sched_runtime ;
   struct rlimit rlim[16U] ;
   struct pacct_struct pacct ;
   struct taskstats *stats ;
   unsigned int audit_tty ;
   struct tty_audit_buf *tty_audit_buf ;
   bool oom_flag_origin ;
   short oom_score_adj ;
   short oom_score_adj_min ;
   struct mm_struct *oom_mm ;
   struct mutex cred_guard_mutex ;
} __attribute__((__designated_init__));
#line 44  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/netlink.h"
struct nlmsghdr {
   __u32 nlmsg_len ;
   __u16 nlmsg_type ;
   __u16 nlmsg_flags ;
   __u32 nlmsg_seq ;
   __u32 nlmsg_pid ;
};
#line 211  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/netlink.h"
struct nlattr {
   __u16 nla_len ;
   __u16 nla_type ;
};
#line 74  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netlink.h"
struct netlink_ext_ack {
   char *_msg ;
   struct nlattr *bad_attr ;
   u8 cookie[20U] ;
   u8 cookie_len ;
};
#line 180  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netlink.h"
union __anonunion_674 {
   u8 ctx[48U] ;
   long args[6U] ;
};
#line 180  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netlink.h"
struct netlink_callback {
   struct sk_buff *skb ;
   struct nlmsghdr *nlh ;
   int (*dump)(struct sk_buff *, struct netlink_callback *) ;
   int (*done)(struct netlink_callback *) ;
   void *data ;
   struct module *module ;
   struct netlink_ext_ack *extack ;
   u16 family ;
   u16 min_dump_alloc ;
   bool strict_check ;
   u16 answer_flags ;
   unsigned int prev_seq ;
   unsigned int seq ;
   union __anonunion_674 __anonCompField_netlink_callback_154 ;
};
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/neighbour.h"
struct ndmsg {
   __u8 ndm_family ;
   __u8 ndm_pad1 ;
   __u16 ndm_pad2 ;
   __s32 ndm_ifindex ;
   __u16 ndm_state ;
   __u8 ndm_flags ;
   __u8 ndm_type ;
};
#line 44  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if_link.h"
struct rtnl_link_stats64 {
   __u64 rx_packets ;
   __u64 tx_packets ;
   __u64 rx_bytes ;
   __u64 tx_bytes ;
   __u64 rx_errors ;
   __u64 tx_errors ;
   __u64 rx_dropped ;
   __u64 tx_dropped ;
   __u64 multicast ;
   __u64 collisions ;
   __u64 rx_length_errors ;
   __u64 rx_over_errors ;
   __u64 rx_crc_errors ;
   __u64 rx_frame_errors ;
   __u64 rx_fifo_errors ;
   __u64 rx_missed_errors ;
   __u64 tx_aborted_errors ;
   __u64 tx_carrier_errors ;
   __u64 tx_fifo_errors ;
   __u64 tx_heartbeat_errors ;
   __u64 tx_window_errors ;
   __u64 rx_compressed ;
   __u64 tx_compressed ;
   __u64 rx_nohandler ;
};
#line 753  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if_link.h"
struct ifla_vf_guid {
   __u32 vf ;
   __u64 guid ;
};
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/if_link.h"
struct ifla_vf_stats {
   __u64 rx_packets ;
   __u64 tx_packets ;
   __u64 rx_bytes ;
   __u64 tx_bytes ;
   __u64 broadcast ;
   __u64 multicast ;
   __u64 rx_dropped ;
   __u64 tx_dropped ;
};
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/if_link.h"
struct ifla_vf_info {
   __u32 vf ;
   __u8 mac[32U] ;
   __u32 vlan ;
   __u32 qos ;
   __u32 spoofchk ;
   __u32 linkstate ;
   __u32 min_tx_rate ;
   __u32 max_tx_rate ;
   __u32 rss_query_en ;
   __u32 trusted ;
   __be16 vlan_proto ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/pkt_sched.h"
struct tc_stats {
   __u64 bytes ;
   __u32 packets ;
   __u32 drops ;
   __u32 overlimits ;
   __u32 bps ;
   __u32 pps ;
   __u32 qlen ;
   __u32 backlog ;
};
#line 102  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/pkt_sched.h"
struct tc_sizespec {
   unsigned char cell_log ;
   unsigned char size_log ;
   short cell_align ;
   int overhead ;
   unsigned int linklayer ;
   unsigned int mpu ;
   unsigned int mtu ;
   unsigned int tsize ;
};
#line 118  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/hashtable.h"
struct netpoll_info;
#line 119 
struct phy_device;
#line 120 
struct dsa_port;
#line 121 
struct sfp_bus;
#line 122 
struct wireless_dev;
#line 123 
struct wpan_dev;
#line 124 
struct mpls_dev;
#line 125 
struct udp_tunnel_info;
#line 69  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
enum netdev_tx {
    __NETDEV_TX_MIN = -2147483648,
    NETDEV_TX_OK = 0,
    NETDEV_TX_BUSY = 16
};
#line 75  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
typedef enum netdev_tx netdev_tx_t;
#line 161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct net_device_stats {
   unsigned long rx_packets ;
   unsigned long tx_packets ;
   unsigned long rx_bytes ;
   unsigned long tx_bytes ;
   unsigned long rx_errors ;
   unsigned long tx_errors ;
   unsigned long rx_dropped ;
   unsigned long tx_dropped ;
   unsigned long multicast ;
   unsigned long collisions ;
   unsigned long rx_length_errors ;
   unsigned long rx_over_errors ;
   unsigned long rx_crc_errors ;
   unsigned long rx_frame_errors ;
   unsigned long rx_fifo_errors ;
   unsigned long rx_missed_errors ;
   unsigned long tx_aborted_errors ;
   unsigned long tx_carrier_errors ;
   unsigned long tx_fifo_errors ;
   unsigned long tx_heartbeat_errors ;
   unsigned long tx_window_errors ;
   unsigned long rx_compressed ;
   unsigned long tx_compressed ;
};
#line 195 
struct neigh_parms;
#line 217  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_hw_addr_list {
   struct list_head list ;
   int count ;
};
#line 237  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct hh_cache {
   unsigned int hh_len ;
   seqlock_t hh_lock ;
   unsigned long hh_data[16U] ;
};
#line 263  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct header_ops {
   int (*create)(struct sk_buff *, struct net_device *, unsigned short , void *, void *, unsigned int ) ;
   int (*parse)(struct sk_buff *, unsigned char *) ;
   int (*cache)(struct neighbour *, struct hh_cache *, __be16 ) ;
   void (*cache_update)(struct hh_cache *, struct net_device *, unsigned char *) ;
   bool (*validate)(char *, unsigned int ) ;
   __be16 (*parse_protocol)(struct sk_buff *) ;
};
#line 302  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct gro_list {
   struct list_head list ;
   int count ;
};
#line 316  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct napi_struct {
   struct list_head poll_list ;
   unsigned long state ;
   int weight ;
   unsigned long gro_bitmask ;
   int (*poll)(struct napi_struct *, int ) ;
   int poll_owner ;
   struct net_device *dev ;
   struct gro_list gro_hash[8U] ;
   struct sk_buff *skb ;
   struct list_head rx_list ;
   int rx_count ;
   struct hrtimer timer ;
   struct list_head dev_list ;
   struct hlist_node napi_hash_node ;
   unsigned int napi_id ;
};
#line 362 
enum gro_result {
    GRO_MERGED = 0,
    GRO_MERGED_FREE = 1,
    GRO_HELD = 2,
    GRO_NORMAL = 3,
    GRO_DROP = 4,
    GRO_CONSUMED = 5
};
#line 371  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
typedef enum gro_result gro_result_t;
#line 372 
enum rx_handler_result {
    RX_HANDLER_CONSUMED = 0,
    RX_HANDLER_ANOTHER = 1,
    RX_HANDLER_EXACT = 2,
    RX_HANDLER_PASS = 3
};
#line 379  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
typedef enum rx_handler_result rx_handler_result_t;
#line 421  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
typedef rx_handler_result_t rx_handler_func_t(struct sk_buff **);
#line 589 
struct Qdisc;
#line 589 
struct xdp_umem;
#line 589  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_queue {
   struct net_device *dev ;
   struct Qdisc *qdisc ;
   struct Qdisc *qdisc_sleeping ;
   struct kobject kobj ;
   int numa_node ;
   unsigned long tx_maxrate ;
   unsigned long trans_timeout ;
   struct net_device *sb_dev ;
   struct xdp_umem *umem ;
   spinlock_t _xmit_lock ;
   int xmit_lock_owner ;
   unsigned long trans_start ;
   unsigned long state ;
   struct dql dql ;
} __attribute__((__aligned__(64)));
#line 662  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct rps_map {
   unsigned int len ;
   struct callback_head rcu ;
   u16 cpus[0U] ;
};
#line 674  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct rps_dev_flow {
   u16 cpu ;
   u16 filter ;
   unsigned int last_qtail ;
};
#line 684  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct rps_dev_flow_table {
   unsigned int mask ;
   struct callback_head rcu ;
   struct rps_dev_flow flows[0U] ;
};
#line 736  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_rx_queue {
   struct rps_map *rps_map ;
   struct rps_dev_flow_table *rps_flow_table ;
   struct kobject kobj ;
   struct net_device *dev ;
   struct xdp_rxq_info xdp_rxq ;
   struct xdp_umem *umem ;
} __attribute__((__aligned__(64)));
#line 764  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct xps_map {
   unsigned int len ;
   unsigned int alloc_len ;
   struct callback_head rcu ;
   u16 queues[0U] ;
};
#line 777  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct xps_dev_maps {
   struct callback_head rcu ;
   struct xps_map *attr_map[0U] ;
};
#line 793  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_tc_txq {
   u16 count ;
   u16 offset ;
};
#line 803  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_fcoe_hbainfo {
   char manufacturer[64U] ;
   char serial_number[64U] ;
   char hardware_version[64U] ;
   char driver_version[64U] ;
   char optionrom_version[64U] ;
   char firmware_version[64U] ;
   char model[256U] ;
   char model_description[256U] ;
};
#line 820  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_phys_item_id {
   unsigned char id[32U] ;
   unsigned char id_len ;
};
#line 833 
enum tc_setup_type {
    TC_SETUP_QDISC_MQPRIO = 0,
    TC_SETUP_CLSU32 = 1,
    TC_SETUP_CLSFLOWER = 2,
    TC_SETUP_CLSMATCHALL = 3,
    TC_SETUP_CLSBPF = 4,
    TC_SETUP_BLOCK = 5,
    TC_SETUP_QDISC_CBS = 6,
    TC_SETUP_QDISC_RED = 7,
    TC_SETUP_QDISC_PRIO = 8,
    TC_SETUP_QDISC_MQ = 9,
    TC_SETUP_QDISC_ETF = 10,
    TC_SETUP_ROOT_QDISC = 11,
    TC_SETUP_QDISC_GRED = 12,
    TC_SETUP_QDISC_TAPRIO = 13,
    TC_SETUP_FT = 14
};
#line 851 
enum bpf_netdev_command {
    XDP_SETUP_PROG = 0,
    XDP_SETUP_PROG_HW = 1,
    XDP_QUERY_PROG = 2,
    XDP_QUERY_PROG_HW = 3,
    BPF_OFFLOAD_MAP_ALLOC = 4,
    BPF_OFFLOAD_MAP_FREE = 5,
    XDP_SETUP_XSK_UMEM = 6
};
#line 879  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct __anonstruct_679 {
   u32 flags ;
   struct bpf_prog *prog ;
   struct netlink_ext_ack *extack ;
};
#line 879  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct __anonstruct_680 {
   u32 prog_id ;
   u32 prog_flags ;
};
#line 879  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct __anonstruct_681 {
   struct bpf_offloaded_map *offmap ;
};
#line 879  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct __anonstruct_xsk_682 {
   struct xdp_umem *umem ;
   u16 queue_id ;
};
#line 879  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
union __anonunion_678 {
   struct __anonstruct_679 __anonCompField___anonunion_678_156 ;
   struct __anonstruct_680 __anonCompField___anonunion_678_157 ;
   struct __anonstruct_681 __anonCompField___anonunion_678_158 ;
   struct __anonstruct_xsk_682 xsk ;
};
#line 879  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_bpf {
   enum bpf_netdev_command command ;
   union __anonunion_678 __anonCompField_netdev_bpf_159 ;
};
#line 911  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct xfrmdev_ops {
   int (*xdo_dev_state_add)(struct xfrm_state *) ;
   void (*xdo_dev_state_delete)(struct xfrm_state *) ;
   void (*xdo_dev_state_free)(struct xfrm_state *) ;
   bool (*xdo_dev_offload_ok)(struct sk_buff *, struct xfrm_state *) ;
   void (*xdo_dev_state_advance_esn)(struct xfrm_state *) ;
};
#line 921  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct dev_ifalias {
   struct callback_head rcuhead ;
   char ifalias[] ;
};
#line 926 
struct tlsdev_ops;
#line 929  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_name_node {
   struct hlist_node hlist ;
   struct list_head list ;
   struct net_device *dev ;
   char *name ;
};
#line 1257 
struct devlink_port;
#line 1257  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct net_device_ops {
   int (*ndo_init)(struct net_device *) ;
   void (*ndo_uninit)(struct net_device *) ;
   int (*ndo_open)(struct net_device *) ;
   int (*ndo_stop)(struct net_device *) ;
   netdev_tx_t (*ndo_start_xmit)(struct sk_buff *, struct net_device *) ;
   netdev_features_t (*ndo_features_check)(struct sk_buff *, struct net_device *, netdev_features_t ) ;
   u16 (*ndo_select_queue)(struct net_device *, struct sk_buff *, struct net_device *) ;
   void (*ndo_change_rx_flags)(struct net_device *, int ) ;
   void (*ndo_set_rx_mode)(struct net_device *) ;
   int (*ndo_set_mac_address)(struct net_device *, void *) ;
   int (*ndo_validate_addr)(struct net_device *) ;
   int (*ndo_do_ioctl)(struct net_device *, struct ifreq *, int ) ;
   int (*ndo_set_config)(struct net_device *, struct ifmap *) ;
   int (*ndo_change_mtu)(struct net_device *, int ) ;
   int (*ndo_neigh_setup)(struct net_device *, struct neigh_parms *) ;
   void (*ndo_tx_timeout)(struct net_device *) ;
   void (*ndo_get_stats64)(struct net_device *, struct rtnl_link_stats64 *) ;
   bool (*ndo_has_offload_stats)(struct net_device *, int ) ;
   int (*ndo_get_offload_stats)(int , struct net_device *, void *) ;
   struct net_device_stats *(*ndo_get_stats)(struct net_device *) ;
   int (*ndo_vlan_rx_add_vid)(struct net_device *, __be16 , u16 ) ;
   int (*ndo_vlan_rx_kill_vid)(struct net_device *, __be16 , u16 ) ;
   void (*ndo_poll_controller)(struct net_device *) ;
   int (*ndo_netpoll_setup)(struct net_device *, struct netpoll_info *) ;
   void (*ndo_netpoll_cleanup)(struct net_device *) ;
   int (*ndo_set_vf_mac)(struct net_device *, int , u8 *) ;
   int (*ndo_set_vf_vlan)(struct net_device *, int , u16 , u8 , __be16 ) ;
   int (*ndo_set_vf_rate)(struct net_device *, int , int , int ) ;
   int (*ndo_set_vf_spoofchk)(struct net_device *, int , bool ) ;
   int (*ndo_set_vf_trust)(struct net_device *, int , bool ) ;
   int (*ndo_get_vf_config)(struct net_device *, int , struct ifla_vf_info *) ;
   int (*ndo_set_vf_link_state)(struct net_device *, int , int ) ;
   int (*ndo_get_vf_stats)(struct net_device *, int , struct ifla_vf_stats *) ;
   int (*ndo_set_vf_port)(struct net_device *, int , struct nlattr **) ;
   int (*ndo_get_vf_port)(struct net_device *, int , struct sk_buff *) ;
   int (*ndo_get_vf_guid)(struct net_device *, int , struct ifla_vf_guid *, struct ifla_vf_guid *) ;
   int (*ndo_set_vf_guid)(struct net_device *, int , u64 , int ) ;
   int (*ndo_set_vf_rss_query_en)(struct net_device *, int , bool ) ;
   int (*ndo_setup_tc)(struct net_device *, enum tc_setup_type , void *) ;
   int (*ndo_fcoe_enable)(struct net_device *) ;
   int (*ndo_fcoe_disable)(struct net_device *) ;
   int (*ndo_fcoe_ddp_setup)(struct net_device *, u16 , struct scatterlist *, unsigned int ) ;
   int (*ndo_fcoe_ddp_done)(struct net_device *, u16 ) ;
   int (*ndo_fcoe_ddp_target)(struct net_device *, u16 , struct scatterlist *, unsigned int ) ;
   int (*ndo_fcoe_get_hbainfo)(struct net_device *, struct netdev_fcoe_hbainfo *) ;
   int (*ndo_fcoe_get_wwn)(struct net_device *, u64 *, int ) ;
   int (*ndo_rx_flow_steer)(struct net_device *, struct sk_buff *, u16 , u32 ) ;
   int (*ndo_add_slave)(struct net_device *, struct net_device *, struct netlink_ext_ack *) ;
   int (*ndo_del_slave)(struct net_device *, struct net_device *) ;
   netdev_features_t (*ndo_fix_features)(struct net_device *, netdev_features_t ) ;
   int (*ndo_set_features)(struct net_device *, netdev_features_t ) ;
   int (*ndo_neigh_construct)(struct net_device *, struct neighbour *) ;
   void (*ndo_neigh_destroy)(struct net_device *, struct neighbour *) ;
   int (*ndo_fdb_add)(struct ndmsg *, struct nlattr **, struct net_device *, unsigned char *, u16 , u16 , struct netlink_ext_ack *) ;
   int (*ndo_fdb_del)(struct ndmsg *, struct nlattr **, struct net_device *, unsigned char *, u16 ) ;
   int (*ndo_fdb_dump)(struct sk_buff *, struct netlink_callback *, struct net_device *, struct net_device *, int *) ;
   int (*ndo_fdb_get)(struct sk_buff *, struct nlattr **, struct net_device *, unsigned char *, u16 , u32 , u32 , struct netlink_ext_ack *) ;
   int (*ndo_bridge_setlink)(struct net_device *, struct nlmsghdr *, u16 , struct netlink_ext_ack *) ;
   int (*ndo_bridge_getlink)(struct sk_buff *, u32 , u32 , struct net_device *, u32 , int ) ;
   int (*ndo_bridge_dellink)(struct net_device *, struct nlmsghdr *, u16 ) ;
   int (*ndo_change_carrier)(struct net_device *, bool ) ;
   int (*ndo_get_phys_port_id)(struct net_device *, struct netdev_phys_item_id *) ;
   int (*ndo_get_port_parent_id)(struct net_device *, struct netdev_phys_item_id *) ;
   int (*ndo_get_phys_port_name)(struct net_device *, char *, size_t ) ;
   void (*ndo_udp_tunnel_add)(struct net_device *, struct udp_tunnel_info *) ;
   void (*ndo_udp_tunnel_del)(struct net_device *, struct udp_tunnel_info *) ;
   void *(*ndo_dfwd_add_station)(struct net_device *, struct net_device *) ;
   void (*ndo_dfwd_del_station)(struct net_device *, void *) ;
   int (*ndo_set_tx_maxrate)(struct net_device *, int , u32 ) ;
   int (*ndo_get_iflink)(struct net_device *) ;
   int (*ndo_change_proto_down)(struct net_device *, bool ) ;
   int (*ndo_fill_metadata_dst)(struct net_device *, struct sk_buff *) ;
   void (*ndo_set_rx_headroom)(struct net_device *, int ) ;
   int (*ndo_bpf)(struct net_device *, struct netdev_bpf *) ;
   int (*ndo_xdp_xmit)(struct net_device *, int , struct xdp_frame **, u32 ) ;
   int (*ndo_xsk_wakeup)(struct net_device *, u32 , u32 ) ;
   struct devlink_port *(*ndo_get_devlink_port)(struct net_device *) ;
};
#line 1492 
enum ldv_14745 {
    NETREG_UNINITIALIZED = 0,
    NETREG_REGISTERED = 1,
    NETREG_UNREGISTERING = 2,
    NETREG_UNREGISTERED = 3,
    NETREG_RELEASED = 4,
    NETREG_DUMMY = 5
};
#line 1501 
enum ldv_14746 {
    RTNL_LINK_INITIALIZED = 0,
    RTNL_LINK_INITIALIZING = 1
};
#line 1795  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct __anonstruct_adj_list_683 {
   struct list_head upper ;
   struct list_head lower ;
};
#line 1795 
struct iw_handler_def;
#line 1795 
struct iw_public_data;
#line 1795 
struct l3mdev_ops;
#line 1795 
struct ndisc_ops;
#line 1795 
struct vlan_info;
#line 1795 
struct tipc_bearer;
#line 1795 
struct in_device;
#line 1795 
struct dn_dev;
#line 1795 
struct inet6_dev;
#line 1795 
struct mini_Qdisc;
#line 1795 
struct cpu_rmap;
#line 1795 
struct pcpu_lstats;
#line 1795 
struct pcpu_sw_netstats;
#line 1795 
struct pcpu_dstats;
#line 1795  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
union __anonunion_684 {
   void *ml_priv ;
   struct pcpu_lstats *lstats ;
   struct pcpu_sw_netstats *tstats ;
   struct pcpu_dstats *dstats ;
};
#line 1795 
struct garp_port;
#line 1795 
struct mrp_port;
#line 1795 
struct rtnl_link_ops;
#line 1795  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct net_device {
   char name[16U] ;
   struct netdev_name_node *name_node ;
   struct dev_ifalias *ifalias ;
   unsigned long mem_end ;
   unsigned long mem_start ;
   unsigned long base_addr ;
   int irq ;
   unsigned long state ;
   struct list_head dev_list ;
   struct list_head napi_list ;
   struct list_head unreg_list ;
   struct list_head close_list ;
   struct list_head ptype_all ;
   struct list_head ptype_specific ;
   struct __anonstruct_adj_list_683 adj_list ;
   netdev_features_t features ;
   netdev_features_t hw_features ;
   netdev_features_t wanted_features ;
   netdev_features_t vlan_features ;
   netdev_features_t hw_enc_features ;
   netdev_features_t mpls_features ;
   netdev_features_t gso_partial_features ;
   int ifindex ;
   int group ;
   struct net_device_stats stats ;
   atomic_long_t rx_dropped ;
   atomic_long_t tx_dropped ;
   atomic_long_t rx_nohandler ;
   atomic_t carrier_up_count ;
   atomic_t carrier_down_count ;
   struct iw_handler_def *wireless_handlers ;
   struct iw_public_data *wireless_data ;
   struct net_device_ops *netdev_ops ;
   struct ethtool_ops *ethtool_ops ;
   struct l3mdev_ops *l3mdev_ops ;
   struct ndisc_ops *ndisc_ops ;
   struct xfrmdev_ops *xfrmdev_ops ;
   struct tlsdev_ops *tlsdev_ops ;
   struct header_ops *header_ops ;
   unsigned int flags ;
   unsigned int priv_flags ;
   unsigned short gflags ;
   unsigned short padded ;
   unsigned char operstate ;
   unsigned char link_mode ;
   unsigned char if_port ;
   unsigned char dma ;
   unsigned int mtu ;
   unsigned int min_mtu ;
   unsigned int max_mtu ;
   unsigned short type ;
   unsigned short hard_header_len ;
   unsigned char min_header_len ;
   unsigned short needed_headroom ;
   unsigned short needed_tailroom ;
   unsigned char perm_addr[32U] ;
   unsigned char addr_assign_type ;
   unsigned char addr_len ;
   unsigned char upper_level ;
   unsigned char lower_level ;
   unsigned short neigh_priv_len ;
   unsigned short dev_id ;
   unsigned short dev_port ;
   spinlock_t addr_list_lock ;
   unsigned char name_assign_type ;
   bool uc_promisc ;
   struct netdev_hw_addr_list uc ;
   struct netdev_hw_addr_list mc ;
   struct netdev_hw_addr_list dev_addrs ;
   struct kset *queues_kset ;
   unsigned int promiscuity ;
   unsigned int allmulti ;
   struct vlan_info *vlan_info ;
   struct dsa_port *dsa_ptr ;
   struct tipc_bearer *tipc_ptr ;
   void *atalk_ptr ;
   struct in_device *ip_ptr ;
   struct dn_dev *dn_ptr ;
   struct inet6_dev *ip6_ptr ;
   void *ax25_ptr ;
   struct wireless_dev *ieee80211_ptr ;
   struct wpan_dev *ieee802154_ptr ;
   struct mpls_dev *mpls_ptr ;
   unsigned char *dev_addr ;
   struct netdev_rx_queue *_rx ;
   unsigned int num_rx_queues ;
   unsigned int real_num_rx_queues ;
   struct bpf_prog *xdp_prog ;
   unsigned long gro_flush_timeout ;
   rx_handler_func_t *rx_handler ;
   void *rx_handler_data ;
   struct mini_Qdisc *miniq_ingress ;
   struct netdev_queue *ingress_queue ;
   struct nf_hook_entries *nf_hooks_ingress ;
   unsigned char broadcast[32U] ;
   struct cpu_rmap *rx_cpu_rmap ;
   struct hlist_node index_hlist ;
   struct netdev_queue *_tx ;
   unsigned int num_tx_queues ;
   unsigned int real_num_tx_queues ;
   struct Qdisc *qdisc ;
   struct hlist_head qdisc_hash[16U] ;
   unsigned int tx_queue_len ;
   spinlock_t tx_global_lock ;
   int watchdog_timeo ;
   struct xps_dev_maps *xps_cpus_map ;
   struct xps_dev_maps *xps_rxqs_map ;
   struct mini_Qdisc *miniq_egress ;
   struct timer_list watchdog_timer ;
   int *pcpu_refcnt ;
   struct list_head todo_list ;
   struct list_head link_watch_list ;
   enum ldv_14745 reg_state : 8 ;
   bool dismantle ;
   enum ldv_14746 rtnl_link_state : 16 ;
   bool needs_free_netdev ;
   void (*priv_destructor)(struct net_device *) ;
   struct netpoll_info *npinfo ;
   possible_net_t nd_net ;
   union __anonunion_684 __anonCompField_net_device_160 ;
   struct garp_port *garp_port ;
   struct mrp_port *mrp_port ;
   struct device dev ;
   struct attribute_group *sysfs_groups[4U] ;
   struct attribute_group *sysfs_rx_queue_group ;
   struct rtnl_link_ops *rtnl_link_ops ;
   unsigned int gso_max_size ;
   u16 gso_max_segs ;
   struct dcbnl_rtnl_ops *dcbnl_ops ;
   s16 num_tc ;
   struct netdev_tc_txq tc_to_txq[16U] ;
   u8 prio_tc_map[16U] ;
   unsigned int fcoe_ddp_xid ;
   struct netprio_map *priomap ;
   struct phy_device *phydev ;
   struct sfp_bus *sfp_bus ;
   struct lock_class_key qdisc_tx_busylock_key ;
   struct lock_class_key qdisc_running_key ;
   struct lock_class_key qdisc_xmit_lock_key ;
   struct lock_class_key addr_list_lock_key ;
   bool proto_down ;
   unsigned int wol_enabled : 1 ;
};
#line 2400  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct pcpu_sw_netstats {
   u64 rx_packets ;
   u64 rx_bytes ;
   u64 tx_packets ;
   u64 tx_bytes ;
   struct u64_stats_sync syncp ;
} __attribute__((__aligned__(32)));
#line 2408  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct pcpu_lstats {
   u64_stats_t packets ;
   u64_stats_t bytes ;
   struct u64_stats_sync syncp ;
} __attribute__((__aligned__(16)));
#line 567  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/rtnetlink.h"
struct tcmsg {
   unsigned char tcm_family ;
   unsigned char tcm__pad1 ;
   unsigned short tcm__pad2 ;
   int tcm_ifindex ;
   __u32 tcm_handle ;
   __u32 tcm_parent ;
   __u32 tcm_info ;
};
#line 747  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/if_vlan.h"
typedef unsigned long kernel_ulong_t;
#line 38  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mod_devicetable.h"
struct pci_device_id {
   __u32 vendor ;
   __u32 device ;
   __u32 subvendor ;
   __u32 subdevice ;
   __u32 class ;
   __u32 class_mask ;
   kernel_ulong_t driver_data ;
};
#line 210  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mod_devicetable.h"
struct acpi_device_id {
   __u8 id[9U] ;
   kernel_ulong_t driver_data ;
   __u32 cls ;
   __u32 cls_msk ;
};
#line 260  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mod_devicetable.h"
struct of_device_id {
   char name[32U] ;
   char type[32U] ;
   char compatible[128U] ;
   void *data ;
};
#line 62  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
struct hotplug_slot;
#line 62  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
struct pci_slot {
   struct pci_bus *bus ;
   struct list_head list ;
   struct hotplug_slot *hotplug ;
   unsigned char number ;
   struct kobject kobj ;
};
#line 99  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
typedef int pci_power_t;
#line 153  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
typedef unsigned int pci_channel_state_t;
#line 162 
enum pci_channel_state {
    pci_channel_io_normal = 1,
    pci_channel_io_frozen = 2,
    pci_channel_io_perm_failure = 3
};
#line 181  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
typedef unsigned short pci_dev_flags_t;
#line 207  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
typedef unsigned short pci_bus_flags_t;
#line 282 
struct pcie_link_state;
#line 283 
struct pci_vpd;
#line 284 
struct pci_sriov;
#line 285 
struct pci_p2pdma;
#line 290 
struct aer_stats;
#line 290 
struct pci_driver;
#line 290  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
union __anonunion_702 {
   struct pci_sriov *sriov ;
   struct pci_dev *physfn ;
};
#line 290  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
struct pci_dev {
   struct list_head bus_list ;
   struct pci_bus *bus ;
   struct pci_bus *subordinate ;
   void *sysdata ;
   struct proc_dir_entry *procent ;
   struct pci_slot *slot ;
   unsigned int devfn ;
   unsigned short vendor ;
   unsigned short device ;
   unsigned short subsystem_vendor ;
   unsigned short subsystem_device ;
   unsigned int class ;
   u8 revision ;
   u8 hdr_type ;
   u16 aer_cap ;
   struct aer_stats *aer_stats ;
   u8 pcie_cap ;
   u8 msi_cap ;
   u8 msix_cap ;
   u8 pcie_mpss : 3 ;
   u8 rom_base_reg ;
   u8 pin ;
   u16 pcie_flags_reg ;
   unsigned long *dma_alias_mask ;
   struct pci_driver *driver ;
   u64 dma_mask ;
   struct device_dma_parameters dma_parms ;
   pci_power_t current_state ;
   unsigned int imm_ready : 1 ;
   u8 pm_cap ;
   unsigned int pme_support : 5 ;
   unsigned int pme_poll : 1 ;
   unsigned int d1_support : 1 ;
   unsigned int d2_support : 1 ;
   unsigned int no_d1d2 : 1 ;
   unsigned int no_d3cold : 1 ;
   unsigned int bridge_d3 : 1 ;
   unsigned int d3cold_allowed : 1 ;
   unsigned int mmio_always_on : 1 ;
   unsigned int wakeup_prepared : 1 ;
   unsigned int runtime_d3cold : 1 ;
   unsigned int skip_bus_pm : 1 ;
   unsigned int ignore_hotplug : 1 ;
   unsigned int hotplug_user_indicators : 1 ;
   unsigned int clear_retrain_link : 1 ;
   unsigned int d3_delay ;
   unsigned int d3cold_delay ;
   struct pcie_link_state *link_state ;
   unsigned int ltr_path : 1 ;
   unsigned int eetlp_prefix_path : 1 ;
   pci_channel_state_t error_state ;
   struct device dev ;
   int cfg_size ;
   unsigned int irq ;
   struct resource resource[17U] ;
   bool match_driver ;
   unsigned int transparent : 1 ;
   unsigned int io_window : 1 ;
   unsigned int pref_window : 1 ;
   unsigned int pref_64_window : 1 ;
   unsigned int multifunction : 1 ;
   unsigned int is_busmaster : 1 ;
   unsigned int no_msi : 1 ;
   unsigned int no_64bit_msi : 1 ;
   unsigned int block_cfg_access : 1 ;
   unsigned int broken_parity_status : 1 ;
   unsigned int irq_reroute_variant : 2 ;
   unsigned int msi_enabled : 1 ;
   unsigned int msix_enabled : 1 ;
   unsigned int ari_enabled : 1 ;
   unsigned int ats_enabled : 1 ;
   unsigned int pasid_enabled : 1 ;
   unsigned int pri_enabled : 1 ;
   unsigned int is_managed : 1 ;
   unsigned int needs_freset : 1 ;
   unsigned int state_saved : 1 ;
   unsigned int is_physfn : 1 ;
   unsigned int is_virtfn : 1 ;
   unsigned int reset_fn : 1 ;
   unsigned int is_hotplug_bridge : 1 ;
   unsigned int shpc_managed : 1 ;
   unsigned int is_thunderbolt : 1 ;
   unsigned int untrusted : 1 ;
   unsigned int __aer_firmware_first_valid : 1 ;
   unsigned int __aer_firmware_first : 1 ;
   unsigned int broken_intx_masking : 1 ;
   unsigned int io_window_1k : 1 ;
   unsigned int irq_managed : 1 ;
   unsigned int non_compliant_bars : 1 ;
   unsigned int is_probed : 1 ;
   unsigned int link_active_reporting : 1 ;
   unsigned int no_vf_scan : 1 ;
   pci_dev_flags_t dev_flags ;
   atomic_t enable_cnt ;
   u32 saved_config_space[16U] ;
   struct hlist_head saved_cap_space ;
   struct bin_attribute *rom_attr ;
   int rom_attr_enabled ;
   struct bin_attribute *res_attr[17U] ;
   struct bin_attribute *res_attr_wc[17U] ;
   unsigned int broken_cmd_compl : 1 ;
   unsigned int ptm_root : 1 ;
   unsigned int ptm_enabled : 1 ;
   u8 ptm_granularity ;
   struct attribute_group **msi_irq_groups ;
   struct pci_vpd *vpd ;
   union __anonunion_702 __anonCompField_pci_dev_161 ;
   u16 ats_cap ;
   u8 ats_stu ;
   u16 pri_cap ;
   u32 pri_reqs_alloc ;
   unsigned int pasid_required : 1 ;
   u16 pasid_cap ;
   u16 pasid_features ;
   struct pci_p2pdma *p2pdma ;
   phys_addr_t rom ;
   size_t romlen ;
   char *driver_override ;
   unsigned long priv_flags ;
};
#line 493 
struct pci_ops;
#line 493 
struct msi_controller;
#line 571  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
struct pci_bus {
   struct list_head node ;
   struct pci_bus *parent ;
   struct list_head children ;
   struct list_head devices ;
   struct pci_dev *self ;
   struct list_head slots ;
   struct resource *resource[4U] ;
   struct list_head resources ;
   struct resource busn_res ;
   struct pci_ops *ops ;
   struct msi_controller *msi ;
   void *sysdata ;
   struct proc_dir_entry *procdir ;
   unsigned char number ;
   unsigned char primary ;
   unsigned char max_bus_speed ;
   unsigned char cur_bus_speed ;
   char name[48U] ;
   unsigned short bridge_ctl ;
   pci_bus_flags_t bus_flags ;
   struct device *bridge ;
   struct device dev ;
   struct bin_attribute *legacy_io ;
   struct bin_attribute *legacy_mem ;
   unsigned int is_added : 1 ;
};
#line 697  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
struct pci_ops {
   int (*add_bus)(struct pci_bus *) ;
   void (*remove_bus)(struct pci_bus *) ;
   void *(*map_bus)(struct pci_bus *, unsigned int , int ) ;
   int (*read)(struct pci_bus *, unsigned int , int , int , u32 *) ;
   int (*write)(struct pci_bus *, unsigned int , int , int , u32 ) ;
};
#line 725  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
struct pci_dynids {
   spinlock_t lock ;
   struct list_head list ;
};
#line 729  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
typedef unsigned int pci_ers_result_t;
#line 761  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
struct pci_error_handlers {
   pci_ers_result_t (*error_detected)(struct pci_dev *, enum pci_channel_state ) ;
   pci_ers_result_t (*mmio_enabled)(struct pci_dev *) ;
   pci_ers_result_t (*slot_reset)(struct pci_dev *) ;
   void (*reset_prepare)(struct pci_dev *) ;
   void (*reset_done)(struct pci_dev *) ;
   void (*resume)(struct pci_dev *) ;
};
#line 824  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
struct pci_driver {
   struct list_head node ;
   char *name ;
   struct pci_device_id *id_table ;
   int (*probe)(struct pci_dev *, struct pci_device_id *) ;
   void (*remove)(struct pci_dev *) ;
   int (*suspend)(struct pci_dev *, pm_message_t ) ;
   int (*resume)(struct pci_dev *) ;
   void (*shutdown)(struct pci_dev *) ;
   int (*sriov_configure)(struct pci_dev *, int ) ;
   struct pci_error_handlers *err_handler ;
   struct attribute_group **groups ;
   struct device_driver driver ;
   struct pci_dynids dynids ;
};
#line 1424  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
struct msix_entry {
   u32 vector ;
   u16 entry ;
};
#line 63  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ipv6.h"
struct ipv6_stable_secret {
   bool initialized ;
   struct in6_addr secret ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ipv6.h"
struct ipv6_devconf {
   __s32 forwarding ;
   __s32 hop_limit ;
   __s32 mtu6 ;
   __s32 accept_ra ;
   __s32 accept_redirects ;
   __s32 autoconf ;
   __s32 dad_transmits ;
   __s32 rtr_solicits ;
   __s32 rtr_solicit_interval ;
   __s32 rtr_solicit_max_interval ;
   __s32 rtr_solicit_delay ;
   __s32 force_mld_version ;
   __s32 mldv1_unsolicited_report_interval ;
   __s32 mldv2_unsolicited_report_interval ;
   __s32 use_tempaddr ;
   __s32 temp_valid_lft ;
   __s32 temp_prefered_lft ;
   __s32 regen_max_retry ;
   __s32 max_desync_factor ;
   __s32 max_addresses ;
   __s32 accept_ra_defrtr ;
   __s32 accept_ra_min_hop_limit ;
   __s32 accept_ra_pinfo ;
   __s32 ignore_routes_with_linkdown ;
   __s32 accept_ra_rtr_pref ;
   __s32 rtr_probe_interval ;
   __s32 accept_ra_rt_info_min_plen ;
   __s32 accept_ra_rt_info_max_plen ;
   __s32 proxy_ndp ;
   __s32 accept_source_route ;
   __s32 accept_ra_from_local ;
   __s32 optimistic_dad ;
   __s32 use_optimistic ;
   __s32 mc_forwarding ;
   __s32 disable_ipv6 ;
   __s32 drop_unicast_in_l2_multicast ;
   __s32 accept_dad ;
   __s32 force_tllao ;
   __s32 ndisc_notify ;
   __s32 suppress_frag_ndisc ;
   __s32 accept_ra_mtu ;
   __s32 drop_unsolicited_na ;
   struct ipv6_stable_secret stable_secret ;
   __s32 use_oif_addrs_only ;
   __s32 keep_addr_on_down ;
   __s32 seg6_enabled ;
   __s32 seg6_require_hmac ;
   __u32 enhanced_dad ;
   __u32 addr_gen_mode ;
   __s32 disable_policy ;
   __s32 ndisc_tclass ;
   struct ctl_table_header *sysctl_header ;
};
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/page_counter.h"
struct page_counter {
   atomic_long_t usage ;
   unsigned long min ;
   unsigned long low ;
   unsigned long max ;
   struct page_counter *parent ;
   unsigned long emin ;
   atomic_long_t min_usage ;
   atomic_long_t children_min_usage ;
   unsigned long elow ;
   atomic_long_t low_usage ;
   atomic_long_t children_low_usage ;
   unsigned long watermark ;
   unsigned long failcnt ;
};
#line 66 
struct eventfd_ctx;
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/vmpressure.h"
struct vmpressure {
   unsigned long scanned ;
   unsigned long reclaimed ;
   unsigned long tree_scanned ;
   unsigned long tree_reclaimed ;
   spinlock_t sr_lock ;
   struct list_head events ;
   struct mutex events_lock ;
   struct work_struct work ;
};
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/flex_proportions.h"
struct fprop_global {
   struct percpu_counter events ;
   unsigned int period ;
   seqcount_t sequence ;
};
#line 76  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/flex_proportions.h"
struct fprop_local_percpu {
   struct percpu_counter events ;
   unsigned int period ;
   raw_spinlock_t lock ;
};
#line 116  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/flex_proportions.h"
typedef int congested_fn(void *, int );
#line 45  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backing-dev-defs.h"
enum wb_reason {
    WB_REASON_BACKGROUND = 0,
    WB_REASON_VMSCAN = 1,
    WB_REASON_SYNC = 2,
    WB_REASON_PERIODIC = 3,
    WB_REASON_LAPTOP_TIMER = 4,
    WB_REASON_FREE_MORE_MEM = 5,
    WB_REASON_FS_FREE_SPACE = 6,
    WB_REASON_FORKER_THREAD = 7,
    WB_REASON_FOREIGN_FLUSH = 8,
    WB_REASON_MAX = 9
};
#line 71  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backing-dev-defs.h"
struct wb_completion {
   atomic_t cnt ;
   wait_queue_head_t *waitq ;
};
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backing-dev-defs.h"
struct bdi_writeback_congested {
   unsigned long state ;
   refcount_t refcnt ;
   struct backing_dev_info *__bdi ;
   int blkcg_id ;
   struct rb_node rb_node ;
};
#line 130  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backing-dev-defs.h"
union __anonunion_708 {
   struct work_struct release_work ;
   struct callback_head rcu ;
};
#line 130  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backing-dev-defs.h"
struct bdi_writeback {
   struct backing_dev_info *bdi ;
   unsigned long state ;
   unsigned long last_old_flush ;
   struct list_head b_dirty ;
   struct list_head b_io ;
   struct list_head b_more_io ;
   struct list_head b_dirty_time ;
   spinlock_t list_lock ;
   struct percpu_counter stat[4U] ;
   struct bdi_writeback_congested *congested ;
   unsigned long bw_time_stamp ;
   unsigned long dirtied_stamp ;
   unsigned long written_stamp ;
   unsigned long write_bandwidth ;
   unsigned long avg_write_bandwidth ;
   unsigned long dirty_ratelimit ;
   unsigned long balanced_dirty_ratelimit ;
   struct fprop_local_percpu completions ;
   int dirty_exceeded ;
   enum wb_reason start_all_reason ;
   spinlock_t work_lock ;
   struct list_head work_list ;
   struct delayed_work dwork ;
   unsigned long dirty_sleep ;
   struct list_head bdi_node ;
   struct percpu_ref refcnt ;
   struct fprop_local_percpu memcg_completions ;
   struct cgroup_subsys_state *memcg_css ;
   struct cgroup_subsys_state *blkcg_css ;
   struct list_head memcg_node ;
   struct list_head blkcg_node ;
   union __anonunion_708 __anonCompField_bdi_writeback_163 ;
};
#line 188  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backing-dev-defs.h"
struct backing_dev_info {
   u64 id ;
   struct rb_node rb_node ;
   struct list_head bdi_list ;
   unsigned long ra_pages ;
   unsigned long io_pages ;
   congested_fn *congested_fn ;
   void *congested_data ;
   char *name ;
   struct kref refcnt ;
   unsigned int capabilities ;
   unsigned int min_ratio ;
   unsigned int max_ratio ;
   unsigned int max_prop_frac ;
   atomic_long_t tot_write_bandwidth ;
   struct bdi_writeback wb ;
   struct list_head wb_list ;
   struct xarray cgwb_tree ;
   struct rb_root cgwb_congested_tree ;
   struct mutex cgwb_release_mutex ;
   struct rw_semaphore wb_switch_rwsem ;
   wait_queue_head_t wb_waitq ;
   struct device *dev ;
   struct device *owner ;
   struct timer_list laptop_mode_wb_timer ;
   struct dentry *debug_dir ;
};
#line 306 
struct bio_set;
#line 307 
struct bio_integrity_payload;
#line 308  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backing-dev-defs.h"
typedef void bio_end_io_t(struct bio *);
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk_types.h"
typedef u8 blk_status_t;
#line 112  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk_types.h"
struct bio_issue {
   u64 value ;
};
#line 144 
struct blkcg_gq;
#line 144  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk_types.h"
union __anonunion_709 {
   struct bio_integrity_payload *bi_integrity ;
};
#line 144  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk_types.h"
struct bio {
   struct bio *bi_next ;
   struct gendisk *bi_disk ;
   unsigned int bi_opf ;
   unsigned short bi_flags ;
   unsigned short bi_ioprio ;
   unsigned short bi_write_hint ;
   blk_status_t bi_status ;
   u8 bi_partno ;
   atomic_t __bi_remaining ;
   struct bvec_iter bi_iter ;
   bio_end_io_t *bi_end_io ;
   void *bi_private ;
   struct blkcg_gq *bi_blkg ;
   struct bio_issue bi_issue ;
   u64 bi_iocost_cost ;
   union __anonunion_709 __anonCompField_bio_164 ;
   unsigned short bi_vcnt ;
   unsigned short bi_max_vecs ;
   atomic_t __bi_cnt ;
   struct bio_vec *bi_io_vec ;
   struct bio_set *bi_pool ;
   struct bio_vec bi_inline_vecs[0U] ;
};
#line 452  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk_types.h"
typedef unsigned int blk_qc_t;
#line 479  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk_types.h"
struct blk_rq_stat {
   u64 mean ;
   u64 min ;
   u64 max ;
   u32 nr_samples ;
   u64 batch ;
};
#line 86  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/genhd.h"
struct disk_stats {
   u64 nsecs[4U] ;
   unsigned long sectors[4U] ;
   unsigned long ios[4U] ;
   unsigned long merges[4U] ;
   unsigned long io_ticks ;
   unsigned long time_in_queue ;
   local_t in_flight[2U] ;
};
#line 103  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/genhd.h"
struct partition_meta_info {
   char uuid[37U] ;
   u8 volname[64U] ;
};
#line 108  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/genhd.h"
struct hd_struct {
   sector_t start_sect ;
   sector_t nr_sects ;
   seqcount_t nr_sects_seq ;
   sector_t alignment_offset ;
   unsigned int discard_alignment ;
   struct device __dev ;
   struct kobject *holder_dir ;
   int policy ;
   int partno ;
   struct partition_meta_info *info ;
   int make_it_fail ;
   unsigned long stamp ;
   struct disk_stats *dkstats ;
   struct percpu_ref ref ;
   struct rcu_work rcu_work ;
};
#line 160  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/genhd.h"
struct disk_part_tbl {
   struct callback_head callback_head ;
   int len ;
   struct hd_struct *last_lookup ;
   struct hd_struct *part[] ;
};
#line 166 
struct disk_events;
#line 167 
struct badblocks;
#line 172 
struct blk_integrity_profile;
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/genhd.h"
struct blk_integrity {
   struct blk_integrity_profile *profile ;
   unsigned char flags ;
   unsigned char tuple_size ;
   unsigned char interval_exp ;
   unsigned char tag_size ;
};
#line 182 
struct timer_rand_state;
#line 182  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/genhd.h"
struct gendisk {
   int major ;
   int first_minor ;
   int minors ;
   char disk_name[32U] ;
   char *(*devnode)(struct gendisk *, umode_t *) ;
   unsigned short events ;
   unsigned short event_flags ;
   struct disk_part_tbl *part_tbl ;
   struct hd_struct part0 ;
   struct block_device_operations *fops ;
   struct request_queue *queue ;
   void *private_data ;
   int flags ;
   struct rw_semaphore lookup_sem ;
   struct kobject *slave_dir ;
   struct timer_rand_state *random ;
   atomic_t sync_io ;
   struct disk_events *ev ;
   struct kobject integrity_kobj ;
   int node_id ;
   struct badblocks *bb ;
   struct lockdep_map lockdep_map ;
};
#line 637  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pagemap.h"
typedef void *mempool_alloc_t(gfp_t , void *);
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mempool.h"
typedef void mempool_free_t(void *, void *);
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mempool.h"
struct mempool_s {
   spinlock_t lock ;
   int min_nr ;
   int curr_nr ;
   void **elements ;
   void *pool_data ;
   mempool_alloc_t *alloc ;
   mempool_free_t *free ;
   wait_queue_head_t wait ;
};
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mempool.h"
typedef struct mempool_s mempool_t;
#line 307  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bio.h"
struct bio_integrity_payload {
   struct bio *bip_bio ;
   struct bvec_iter bip_iter ;
   unsigned short bip_slab ;
   unsigned short bip_vcnt ;
   unsigned short bip_max_vcnt ;
   unsigned short bip_flags ;
   struct bvec_iter bio_iter ;
   struct work_struct bip_work ;
   struct bio_vec *bip_vec ;
   struct bio_vec bip_inline_vecs[0U] ;
};
#line 575  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bio.h"
struct bio_list {
   struct bio *head ;
   struct bio *tail ;
};
#line 703  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bio.h"
struct bio_set {
   struct kmem_cache *bio_slab ;
   unsigned int front_pad ;
   mempool_t bio_pool ;
   mempool_t bvec_pool ;
   mempool_t bio_integrity_pool ;
   mempool_t bvec_integrity_pool ;
   spinlock_t rescue_lock ;
   struct bio_list rescue_list ;
   struct work_struct rescue_work ;
   struct workqueue_struct *rescue_workqueue ;
};
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bsg.h"
struct sg_io_v4 {
   __s32 guard ;
   __u32 protocol ;
   __u32 subprotocol ;
   __u32 request_len ;
   __u64 request ;
   __u64 request_tag ;
   __u32 request_attr ;
   __u32 request_priority ;
   __u32 request_extra ;
   __u32 max_response_len ;
   __u64 response ;
   __u32 dout_iovec_count ;
   __u32 dout_xfer_len ;
   __u32 din_iovec_count ;
   __u32 din_xfer_len ;
   __u64 dout_xferp ;
   __u64 din_xferp ;
   __u32 timeout ;
   __u32 flags ;
   __u64 usr_ptr ;
   __u32 spare_in ;
   __u32 driver_status ;
   __u32 transport_status ;
   __u32 device_status ;
   __u32 retry_delay ;
   __u32 info ;
   __u32 duration ;
   __u32 response_len ;
   __s32 din_resid ;
   __s32 dout_resid ;
   __u64 generated_tag ;
   __u32 spare_out ;
   __u32 padding ;
};
#line 65 
struct request;
#line 10  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bsg.h"
struct bsg_ops {
   int (*check_proto)(struct sg_io_v4 *) ;
   int (*fill_hdr)(struct request *, struct sg_io_v4 *, fmode_t ) ;
   int (*complete_rq)(struct request *, struct sg_io_v4 *) ;
   void (*free_rq)(struct request *) ;
};
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bsg.h"
struct bsg_class_device {
   struct device *class_dev ;
   int minor ;
   struct request_queue *queue ;
   struct bsg_ops *ops ;
};
#line 94  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/blkzoned.h"
struct blk_zone {
   __u64 start ;
   __u64 len ;
   __u64 wp ;
   __u8 type ;
   __u8 cond ;
   __u8 non_seq ;
   __u8 reset ;
   __u8 reserved[36U] ;
};
#line 134 
struct elevator_queue;
#line 135 
struct blk_trace;
#line 138 
struct blk_flush_queue;
#line 139 
struct pr_ops;
#line 140 
struct rq_qos;
#line 141 
struct blk_queue_stats;
#line 142 
struct blk_stat_callback;
#line 143  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/blkzoned.h"
typedef void rq_end_io_fn(struct request *, blk_status_t );
#line 63  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
typedef __u32 req_flags_t;
#line 67 
enum mq_rq_state {
    MQ_RQ_IDLE = 0,
    MQ_RQ_IN_FLIGHT = 1,
    MQ_RQ_COMPLETE = 2
};
#line 132 
struct blk_mq_ctx;
#line 132 
struct blk_mq_hw_ctx;
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
union __anonunion_712 {
   struct hlist_node hash ;
   struct list_head ipi_list ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
union __anonunion_713 {
   struct rb_node rb_node ;
   struct bio_vec special_vec ;
   void *completion_data ;
   int error_count ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
struct __anonstruct_elv_715 {
   struct io_cq *icq ;
   void *priv[2U] ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
struct __anonstruct_flush_716 {
   unsigned int seq ;
   struct list_head list ;
   rq_end_io_fn *saved_end_io ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
union __anonunion_714 {
   struct __anonstruct_elv_715 elv ;
   struct __anonstruct_flush_716 flush ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
union __anonunion_717 {
   struct __call_single_data csd ;
   u64 fifo_time ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
struct request {
   struct request_queue *q ;
   struct blk_mq_ctx *mq_ctx ;
   struct blk_mq_hw_ctx *mq_hctx ;
   unsigned int cmd_flags ;
   req_flags_t rq_flags ;
   int tag ;
   int internal_tag ;
   unsigned int __data_len ;
   sector_t __sector ;
   struct bio *bio ;
   struct bio *biotail ;
   struct list_head queuelist ;
   union __anonunion_712 __anonCompField_request_165 ;
   union __anonunion_713 __anonCompField_request_166 ;
   union __anonunion_714 __anonCompField_request_167 ;
   struct gendisk *rq_disk ;
   struct hd_struct *part ;
   u64 alloc_time_ns ;
   u64 start_time_ns ;
   u64 io_start_time_ns ;
   unsigned short wbt_flags ;
   unsigned short stats_sectors ;
   unsigned short nr_phys_segments ;
   unsigned short nr_integrity_segments ;
   unsigned short write_hint ;
   unsigned short ioprio ;
   unsigned int extra_len ;
   enum mq_rq_state state ;
   refcount_t ref ;
   unsigned int timeout ;
   unsigned long deadline ;
   union __anonunion_717 __anonCompField_request_168 ;
   rq_end_io_fn *end_io ;
   void *end_io_data ;
};
#line 285 
struct elevator_type;
#line 286 
struct blk_mq_debugfs_attr;
#line 287 
enum elv_merge {
    ELEVATOR_NO_MERGE = 0,
    ELEVATOR_FRONT_MERGE = 1,
    ELEVATOR_BACK_MERGE = 2,
    ELEVATOR_DISCARD_MERGE = 3
};
#line 294 
struct blk_mq_alloc_data;
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/elevator.h"
struct elevator_mq_ops {
   int (*init_sched)(struct request_queue *, struct elevator_type *) ;
   void (*exit_sched)(struct elevator_queue *) ;
   int (*init_hctx)(struct blk_mq_hw_ctx *, unsigned int ) ;
   void (*exit_hctx)(struct blk_mq_hw_ctx *, unsigned int ) ;
   void (*depth_updated)(struct blk_mq_hw_ctx *) ;
   bool (*allow_merge)(struct request_queue *, struct request *, struct bio *) ;
   bool (*bio_merge)(struct blk_mq_hw_ctx *, struct bio *, unsigned int ) ;
   int (*request_merge)(struct request_queue *, struct request **, struct bio *) ;
   void (*request_merged)(struct request_queue *, struct request *, enum elv_merge ) ;
   void (*requests_merged)(struct request_queue *, struct request *, struct request *) ;
   void (*limit_depth)(unsigned int , struct blk_mq_alloc_data *) ;
   void (*prepare_request)(struct request *, struct bio *) ;
   void (*finish_request)(struct request *) ;
   void (*insert_requests)(struct blk_mq_hw_ctx *, struct list_head *, bool ) ;
   struct request *(*dispatch_request)(struct blk_mq_hw_ctx *) ;
   bool (*has_work)(struct blk_mq_hw_ctx *) ;
   void (*completed_request)(struct request *, u64 ) ;
   void (*requeue_request)(struct request *) ;
   struct request *(*former_request)(struct request_queue *, struct request *) ;
   struct request *(*next_request)(struct request_queue *, struct request *) ;
   void (*init_icq)(struct io_cq *) ;
   void (*exit_icq)(struct io_cq *) ;
};
#line 57  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/elevator.h"
struct elv_fs_entry {
   struct attribute attr ;
   ssize_t (*show)(struct elevator_queue *, char *) ;
   ssize_t (*store)(struct elevator_queue *, char *, size_t ) ;
};
#line 66  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/elevator.h"
struct elevator_type {
   struct kmem_cache *icq_cache ;
   struct elevator_mq_ops ops ;
   size_t icq_size ;
   size_t icq_align ;
   struct elv_fs_entry *elevator_attrs ;
   char *elevator_name ;
   char *elevator_alias ;
   unsigned int elevator_features ;
   struct module *elevator_owner ;
   struct blk_mq_debugfs_attr *queue_debugfs_attrs ;
   struct blk_mq_debugfs_attr *hctx_debugfs_attrs ;
   char icq_cache_name[22U] ;
   struct list_head list ;
};
#line 101  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/elevator.h"
struct elevator_queue {
   struct elevator_type *type ;
   void *elevator_data ;
   struct kobject kobj ;
   struct mutex sysfs_lock ;
   unsigned int registered : 1 ;
   struct hlist_head hash[64U] ;
};
#line 153  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/elevator.h"
typedef blk_qc_t make_request_fn(struct request_queue *, struct bio *);
#line 291  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
typedef int dma_drain_needed_fn(struct request *);
#line 304 
enum blk_zoned_model {
    BLK_ZONED_NONE = 0,
    BLK_ZONED_HA = 1,
    BLK_ZONED_HM = 2
};
#line 320  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
struct queue_limits {
   unsigned long bounce_pfn ;
   unsigned long seg_boundary_mask ;
   unsigned long virt_boundary_mask ;
   unsigned int max_hw_sectors ;
   unsigned int max_dev_sectors ;
   unsigned int chunk_sectors ;
   unsigned int max_sectors ;
   unsigned int max_segment_size ;
   unsigned int physical_block_size ;
   unsigned int logical_block_size ;
   unsigned int alignment_offset ;
   unsigned int io_min ;
   unsigned int io_opt ;
   unsigned int max_discard_sectors ;
   unsigned int max_hw_discard_sectors ;
   unsigned int max_write_same_sectors ;
   unsigned int max_write_zeroes_sectors ;
   unsigned int discard_granularity ;
   unsigned int discard_alignment ;
   unsigned short max_segments ;
   unsigned short max_integrity_segments ;
   unsigned short max_discard_segments ;
   unsigned char misaligned ;
   unsigned char discard_misaligned ;
   unsigned char raid_partial_stripes_expensive ;
   enum blk_zoned_model zoned ;
};
#line 394 
struct blk_mq_ops;
#line 394 
struct throtl_data;
#line 394 
struct blk_mq_tag_set;
#line 394  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
struct request_queue {
   struct request *last_merge ;
   struct elevator_queue *elevator ;
   struct blk_queue_stats *stats ;
   struct rq_qos *rq_qos ;
   make_request_fn *make_request_fn ;
   dma_drain_needed_fn *dma_drain_needed ;
   struct blk_mq_ops *mq_ops ;
   struct blk_mq_ctx *queue_ctx ;
   unsigned int queue_depth ;
   struct blk_mq_hw_ctx **queue_hw_ctx ;
   unsigned int nr_hw_queues ;
   struct backing_dev_info *backing_dev_info ;
   void *queuedata ;
   unsigned long queue_flags ;
   atomic_t pm_only ;
   int id ;
   gfp_t bounce_gfp ;
   spinlock_t queue_lock ;
   struct kobject kobj ;
   struct kobject *mq_kobj ;
   struct blk_integrity integrity ;
   struct device *dev ;
   int rpm_status ;
   unsigned int nr_pending ;
   unsigned long nr_requests ;
   unsigned int dma_drain_size ;
   void *dma_drain_buffer ;
   unsigned int dma_pad_mask ;
   unsigned int dma_alignment ;
   unsigned int rq_timeout ;
   int poll_nsec ;
   struct blk_stat_callback *poll_cb ;
   struct blk_rq_stat poll_stat[16U] ;
   struct timer_list timeout ;
   struct work_struct timeout_work ;
   struct list_head icq_list ;
   unsigned long blkcg_pols[1U] ;
   struct blkcg_gq *root_blkg ;
   struct list_head blkg_list ;
   struct queue_limits limits ;
   unsigned int required_elevator_features ;
   unsigned int nr_zones ;
   unsigned long *conv_zones_bitmap ;
   unsigned long *seq_zones_wlock ;
   unsigned int sg_timeout ;
   unsigned int sg_reserved_size ;
   int node ;
   struct blk_trace *blk_trace ;
   struct mutex blk_trace_mutex ;
   struct blk_flush_queue *fq ;
   struct list_head requeue_list ;
   spinlock_t requeue_lock ;
   struct delayed_work requeue_work ;
   struct mutex sysfs_lock ;
   struct mutex sysfs_dir_lock ;
   struct list_head unused_hctx_list ;
   spinlock_t unused_hctx_lock ;
   int mq_freeze_depth ;
   struct bsg_class_device bsg_dev ;
   struct throtl_data *td ;
   struct callback_head callback_head ;
   wait_queue_head_t mq_freeze_wq ;
   struct mutex mq_freeze_lock ;
   struct percpu_ref q_usage_counter ;
   struct blk_mq_tag_set *tag_set ;
   struct list_head tag_set_list ;
   struct bio_set bio_split ;
   struct dentry *debugfs_dir ;
   struct dentry *sched_debugfs_dir ;
   struct dentry *rqos_debugfs_dir ;
   bool mq_sysfs_init_done ;
   size_t cmd_size ;
   struct work_struct release_work ;
   u64 write_hints[5U] ;
};
#line 1160  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
struct blk_plug {
   struct list_head mq_list ;
   struct list_head cb_list ;
   unsigned short rq_count ;
   bool multiple_queues ;
};
#line 1514  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
struct blk_integrity_iter {
   void *prot_buf ;
   void *data_buf ;
   sector_t seed ;
   unsigned int data_size ;
   unsigned short interval ;
   char *disk_name ;
};
#line 1522  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
typedef blk_status_t integrity_processing_fn(struct blk_integrity_iter *);
#line 1524  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
typedef void integrity_prepare_fn(struct request *);
#line 1525  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
typedef void integrity_complete_fn(struct request *, unsigned int );
#line 1527  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
struct blk_integrity_profile {
   integrity_processing_fn *generate_fn ;
   integrity_processing_fn *verify_fn ;
   integrity_prepare_fn *prepare_fn ;
   integrity_complete_fn *complete_fn ;
   char *name ;
};
#line 1693  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
struct block_device_operations {
   int (*open)(struct block_device *, fmode_t ) ;
   void (*release)(struct gendisk *, fmode_t ) ;
   int (*rw_page)(struct block_device *, sector_t , struct page *, unsigned int ) ;
   int (*ioctl)(struct block_device *, fmode_t , unsigned int , unsigned long ) ;
   int (*compat_ioctl)(struct block_device *, fmode_t , unsigned int , unsigned long ) ;
   unsigned int (*check_events)(struct gendisk *, unsigned int ) ;
   int (*media_changed)(struct gendisk *) ;
   void (*unlock_native_capacity)(struct gendisk *) ;
   int (*revalidate_disk)(struct gendisk *) ;
   int (*getgeo)(struct block_device *, struct hd_geometry *) ;
   void (*swap_slot_free_notify)(struct block_device *, unsigned long ) ;
   int (*report_zones)(struct gendisk *, sector_t , unsigned int , int (*)(struct blk_zone *, unsigned int , void *), void *) ;
   struct module *owner ;
   struct pr_ops *pr_ops ;
};
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk-cgroup.h"
struct blkcg_policy_data;
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk-cgroup.h"
struct blkcg {
   struct cgroup_subsys_state css ;
   spinlock_t lock ;
   struct xarray blkg_tree ;
   struct blkcg_gq *blkg_hint ;
   struct hlist_head blkg_list ;
   struct blkcg_policy_data *cpd[5U] ;
   struct list_head all_blkcgs_node ;
   struct list_head cgwb_list ;
   refcount_t cgwb_refcnt ;
};
#line 63  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk-cgroup.h"
struct blkg_iostat {
   u64 bytes[3U] ;
   u64 ios[3U] ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk-cgroup.h"
struct blkg_iostat_set {
   struct u64_stats_sync sync ;
   struct blkg_iostat cur ;
   struct blkg_iostat last ;
};
#line 85  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk-cgroup.h"
struct blkg_policy_data {
   struct blkcg_gq *blkg ;
   int plid ;
};
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk-cgroup.h"
struct blkcg_policy_data {
   struct blkcg *blkcg ;
   int plid ;
};
#line 105  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk-cgroup.h"
struct blkcg_gq {
   struct request_queue *q ;
   struct list_head q_node ;
   struct hlist_node blkcg_node ;
   struct blkcg *blkcg ;
   struct bdi_writeback_congested *wb_congested ;
   struct blkcg_gq *parent ;
   struct percpu_ref refcnt ;
   bool online ;
   struct blkg_iostat_set *iostat_cpu ;
   struct blkg_iostat_set iostat ;
   struct blkg_policy_data *pd[5U] ;
   spinlock_t async_bio_lock ;
   struct bio_list async_bios ;
   struct work_struct async_bio_work ;
   atomic_t use_delay ;
   atomic64_t delay_nsec ;
   atomic64_t delay_start ;
   u64 last_delay ;
   int last_use ;
   struct callback_head callback_head ;
};
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/writeback.h"
enum writeback_sync_modes {
    WB_SYNC_NONE = 0,
    WB_SYNC_ALL = 1
};
#line 51  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/writeback.h"
struct writeback_control {
   long nr_to_write ;
   long pages_skipped ;
   loff_t range_start ;
   loff_t range_end ;
   enum writeback_sync_modes sync_mode ;
   unsigned int for_kupdate : 1 ;
   unsigned int for_background : 1 ;
   unsigned int tagged_writepages : 1 ;
   unsigned int for_reclaim : 1 ;
   unsigned int range_cyclic : 1 ;
   unsigned int for_sync : 1 ;
   unsigned int no_cgroup_owner : 1 ;
   unsigned int punt_to_cgroup : 1 ;
   struct bdi_writeback *wb ;
   struct inode *inode ;
   int wb_id ;
   int wb_lcand_id ;
   int wb_tcand_id ;
   size_t wb_bytes ;
   size_t wb_lcand_bytes ;
   size_t wb_tcand_bytes ;
};
#line 129  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/writeback.h"
struct wb_domain {
   spinlock_t lock ;
   struct fprop_global completions ;
   struct timer_list period_timer ;
   unsigned long period_time ;
   unsigned long dirty_limit_tstamp ;
   unsigned long dirty_limit ;
};
#line 69  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct mem_cgroup_id {
   int id ;
   refcount_t ref ;
};
#line 86  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct memcg_vmstats_percpu {
   long stat[38U] ;
   unsigned long events[91U] ;
   unsigned long nr_page_events ;
   unsigned long targets[2U] ;
};
#line 93  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct mem_cgroup_reclaim_iter {
   struct mem_cgroup *position ;
   unsigned int generation ;
};
#line 99  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct lruvec_stat {
   long count[32U] ;
};
#line 107  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct memcg_shrinker_map {
   struct callback_head rcu ;
   unsigned long map[0U] ;
};
#line 115  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct mem_cgroup_per_node {
   struct lruvec lruvec ;
   struct lruvec_stat *lruvec_stat_local ;
   struct lruvec_stat *lruvec_stat_cpu ;
   atomic_long_t lruvec_stat[32U] ;
   unsigned long lru_zone_size[5U][5U] ;
   struct mem_cgroup_reclaim_iter iter ;
   struct memcg_shrinker_map *shrinker_map ;
   struct rb_node tree_node ;
   unsigned long usage_in_excess ;
   bool on_tree ;
   struct mem_cgroup *memcg ;
};
#line 139  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct mem_cgroup_threshold {
   struct eventfd_ctx *eventfd ;
   unsigned long threshold ;
};
#line 145  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct mem_cgroup_threshold_ary {
   int current_threshold ;
   unsigned int size ;
   struct mem_cgroup_threshold entries[0U] ;
};
#line 154  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct mem_cgroup_thresholds {
   struct mem_cgroup_threshold_ary *primary ;
   struct mem_cgroup_threshold_ary *spare ;
};
#line 164 
enum memcg_kmem_state {
    KMEM_NONE = 0,
    KMEM_ALLOCATED = 1,
    KMEM_ONLINE = 2
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct memcg_padding {
   char x[0U] ;
} __attribute__((__aligned__(4096)));
#line 190  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct memcg_cgwb_frn {
   u64 bdi_id ;
   int memcg_id ;
   u64 at ;
   struct wb_completion done ;
};
#line 203  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct mem_cgroup {
   struct cgroup_subsys_state css ;
   struct mem_cgroup_id id ;
   struct page_counter memory ;
   struct page_counter swap ;
   struct page_counter memsw ;
   struct page_counter kmem ;
   struct page_counter tcpmem ;
   unsigned long high ;
   struct work_struct high_work ;
   unsigned long soft_limit ;
   struct vmpressure vmpressure ;
   bool use_hierarchy ;
   bool oom_group ;
   bool oom_lock ;
   int under_oom ;
   int swappiness ;
   int oom_kill_disable ;
   struct cgroup_file events_file ;
   struct cgroup_file events_local_file ;
   struct cgroup_file swap_events_file ;
   struct mutex thresholds_lock ;
   struct mem_cgroup_thresholds thresholds ;
   struct mem_cgroup_thresholds memsw_thresholds ;
   struct list_head oom_notify ;
   unsigned long move_charge_at_immigrate ;
   spinlock_t move_lock ;
   unsigned long move_lock_flags ;
   struct memcg_padding _pad1_ ;
   atomic_t moving_account ;
   struct task_struct *move_lock_task ;
   struct memcg_vmstats_percpu *vmstats_local ;
   struct memcg_vmstats_percpu *vmstats_percpu ;
   struct memcg_padding _pad2_ ;
   atomic_long_t vmstats[38U] ;
   atomic_long_t vmevents[91U] ;
   atomic_long_t memory_events[7U] ;
   atomic_long_t memory_events_local[7U] ;
   unsigned long socket_pressure ;
   bool tcpmem_active ;
   int tcpmem_pressure ;
   int kmemcg_id ;
   enum memcg_kmem_state kmem_state ;
   struct list_head kmem_caches ;
   struct list_head cgwb_list ;
   struct wb_domain cgwb_domain ;
   struct memcg_cgwb_frn cgwb_frn[4U] ;
   struct list_head event_list ;
   spinlock_t event_list_lock ;
   struct deferred_split deferred_split_queue ;
   struct mem_cgroup_per_node *nodeinfo[0U] ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/gen_stats.h"
struct gnet_stats_queue {
   __u32 qlen ;
   __u32 backlog ;
   __u32 drops ;
   __u32 requeues ;
   __u32 overlimits ;
};
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/gen_stats.h"
struct gnet_stats_basic_packed {
   __u64 bytes ;
   __u64 packets ;
};
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/gen_stats.h"
struct gnet_stats_basic_cpu {
   struct gnet_stats_basic_packed bstats ;
   struct u64_stats_sync syncp ;
} __attribute__((__aligned__(16)));
#line 20 
struct net_rate_estimator;
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/gen_stats.h"
struct gnet_dump {
   spinlock_t *lock ;
   struct sk_buff *skb ;
   struct nlattr *tail ;
   int compat_tc_stats ;
   int compat_xstats ;
   int padattr ;
   void *xstats ;
   int xstats_len ;
   struct tc_stats tc_stats ;
};
#line 291  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netlink.h"
struct __anonstruct_734 {
   s16 min ;
   s16 max ;
};
#line 291  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netlink.h"
union __anonunion_733 {
   void *validation_data ;
   struct __anonstruct_734 __anonCompField___anonunion_733_169 ;
   int (*validate)(struct nlattr *, struct netlink_ext_ack *) ;
   u16 strict_start_type ;
};
#line 291  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netlink.h"
struct nla_policy {
   u8 type ;
   u8 validation_type ;
   u16 len ;
   union __anonunion_733 __anonCompField_nla_policy_170 ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/rtnetlink.h"
struct rtnl_link_ops {
   struct list_head list ;
   char *kind ;
   size_t priv_size ;
   void (*setup)(struct net_device *) ;
   unsigned int maxtype ;
   struct nla_policy *policy ;
   int (*validate)(struct nlattr **, struct nlattr **, struct netlink_ext_ack *) ;
   int (*newlink)(struct net *, struct net_device *, struct nlattr **, struct nlattr **, struct netlink_ext_ack *) ;
   int (*changelink)(struct net_device *, struct nlattr **, struct nlattr **, struct netlink_ext_ack *) ;
   void (*dellink)(struct net_device *, struct list_head *) ;
   size_t (*get_size)(struct net_device *) ;
   int (*fill_info)(struct sk_buff *, struct net_device *) ;
   size_t (*get_xstats_size)(struct net_device *) ;
   int (*fill_xstats)(struct sk_buff *, struct net_device *) ;
   unsigned int (*get_num_tx_queues)(void) ;
   unsigned int (*get_num_rx_queues)(void) ;
   unsigned int slave_maxtype ;
   struct nla_policy *slave_policy ;
   int (*slave_changelink)(struct net_device *, struct net_device *, struct nlattr **, struct nlattr **, struct netlink_ext_ack *) ;
   size_t (*get_slave_size)(struct net_device *, struct net_device *) ;
   int (*fill_slave_info)(struct sk_buff *, struct net_device *, struct net_device *) ;
   struct net *(*get_link_net)(struct net_device *) ;
   size_t (*get_linkxstats_size)(struct net_device *, int ) ;
   int (*fill_linkxstats)(struct sk_buff *, struct net_device *, int *, int ) ;
};
#line 173  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jhash.h"
struct rhash_lock_head {
   };
#line 76  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rhashtable.h"
struct bucket_table {
   unsigned int size ;
   unsigned int nest ;
   u32 hash_rnd ;
   struct list_head walkers ;
   struct callback_head rcu ;
   struct bucket_table *future_tbl ;
   struct lockdep_map dep_map ;
   struct rhash_lock_head *buckets[] ;
};
#line 281  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow_offload.h"
struct flow_block {
   struct list_head cb_list ;
};
#line 298  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow_offload.h"
typedef int flow_setup_cb_t(enum tc_setup_type , void *, void *);
#line 412 
struct Qdisc_ops;
#line 413 
struct qdisc_walker;
#line 414 
struct tcf_walker;
#line 41  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct qdisc_size_table {
   struct callback_head rcu ;
   struct list_head list ;
   struct tc_sizespec szopts ;
   int refcnt ;
   u16 data[] ;
};
#line 50  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct qdisc_skb_head {
   struct sk_buff *head ;
   struct sk_buff *tail ;
   __u32 qlen ;
   spinlock_t lock ;
};
#line 57  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct Qdisc {
   int (*enqueue)(struct sk_buff *, struct Qdisc *, struct sk_buff **) ;
   struct sk_buff *(*dequeue)(struct Qdisc *) ;
   unsigned int flags ;
   u32 limit ;
   struct Qdisc_ops *ops ;
   struct qdisc_size_table *stab ;
   struct hlist_node hash ;
   u32 handle ;
   u32 parent ;
   struct netdev_queue *dev_queue ;
   struct net_rate_estimator *rate_est ;
   struct gnet_stats_basic_cpu *cpu_bstats ;
   struct gnet_stats_queue *cpu_qstats ;
   int padded ;
   refcount_t refcnt ;
   struct sk_buff_head gso_skb ;
   struct qdisc_skb_head q ;
   struct gnet_stats_basic_packed bstats ;
   seqcount_t running ;
   struct gnet_stats_queue qstats ;
   unsigned long state ;
   struct Qdisc *next_sched ;
   struct sk_buff_head skb_bad_txq ;
   spinlock_t busylock ;
   spinlock_t seqlock ;
   bool empty ;
   struct callback_head rcu ;
};
#line 195 
struct tcf_block;
#line 195  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct Qdisc_class_ops {
   unsigned int flags ;
   struct netdev_queue *(*select_queue)(struct Qdisc *, struct tcmsg *) ;
   int (*graft)(struct Qdisc *, unsigned long , struct Qdisc *, struct Qdisc **, struct netlink_ext_ack *) ;
   struct Qdisc *(*leaf)(struct Qdisc *, unsigned long ) ;
   void (*qlen_notify)(struct Qdisc *, unsigned long ) ;
   unsigned long (*find)(struct Qdisc *, u32 ) ;
   int (*change)(struct Qdisc *, u32 , u32 , struct nlattr **, unsigned long *, struct netlink_ext_ack *) ;
   int (*delete)(struct Qdisc *, unsigned long ) ;
   void (*walk)(struct Qdisc *, struct qdisc_walker *) ;
   struct tcf_block *(*tcf_block)(struct Qdisc *, unsigned long , struct netlink_ext_ack *) ;
   unsigned long (*bind_tcf)(struct Qdisc *, unsigned long , u32 ) ;
   void (*unbind_tcf)(struct Qdisc *, unsigned long ) ;
   int (*dump)(struct Qdisc *, unsigned long , struct sk_buff *, struct tcmsg *) ;
   int (*dump_stats)(struct Qdisc *, unsigned long , struct gnet_dump *) ;
};
#line 235  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct Qdisc_ops {
   struct Qdisc_ops *next ;
   struct Qdisc_class_ops *cl_ops ;
   char id[16U] ;
   int priv_size ;
   unsigned int static_flags ;
   int (*enqueue)(struct sk_buff *, struct Qdisc *, struct sk_buff **) ;
   struct sk_buff *(*dequeue)(struct Qdisc *) ;
   struct sk_buff *(*peek)(struct Qdisc *) ;
   int (*init)(struct Qdisc *, struct nlattr *, struct netlink_ext_ack *) ;
   void (*reset)(struct Qdisc *) ;
   void (*destroy)(struct Qdisc *) ;
   int (*change)(struct Qdisc *, struct nlattr *, struct netlink_ext_ack *) ;
   void (*attach)(struct Qdisc *) ;
   int (*change_tx_queue_len)(struct Qdisc *, unsigned int ) ;
   int (*dump)(struct Qdisc *, struct sk_buff *) ;
   int (*dump_stats)(struct Qdisc *, struct gnet_dump *) ;
   void (*ingress_block_set)(struct Qdisc *, u32 ) ;
   void (*egress_block_set)(struct Qdisc *, u32 ) ;
   u32 (*ingress_block_get)(struct Qdisc *) ;
   u32 (*egress_block_get)(struct Qdisc *) ;
   struct module *owner ;
};
#line 272  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct __anonstruct_808 {
   unsigned long class ;
   u32 classid ;
};
#line 272 
struct tcf_proto;
#line 272  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct __anonstruct_809 {
   bool ingress ;
   struct gnet_stats_queue *qstats ;
};
#line 272  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
union __anonunion_807 {
   struct __anonstruct_808 __anonCompField___anonunion_807_172 ;
   struct tcf_proto *goto_tp ;
   struct __anonstruct_809 __anonCompField___anonunion_807_173 ;
};
#line 272  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct tcf_result {
   union __anonunion_807 __anonCompField_tcf_result_174 ;
};
#line 287 
struct tcf_chain;
#line 290  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct tcf_proto_ops {
   struct list_head head ;
   char kind[16U] ;
   int (*classify)(struct sk_buff *, struct tcf_proto *, struct tcf_result *) ;
   int (*init)(struct tcf_proto *) ;
   void (*destroy)(struct tcf_proto *, bool , struct netlink_ext_ack *) ;
   void *(*get)(struct tcf_proto *, u32 ) ;
   void (*put)(struct tcf_proto *, void *) ;
   int (*change)(struct net *, struct sk_buff *, struct tcf_proto *, unsigned long , u32 , struct nlattr **, void **, bool , bool , struct netlink_ext_ack *) ;
   int (*delete)(struct tcf_proto *, void *, bool *, bool , struct netlink_ext_ack *) ;
   bool (*delete_empty)(struct tcf_proto *) ;
   void (*walk)(struct tcf_proto *, struct tcf_walker *, bool ) ;
   int (*reoffload)(struct tcf_proto *, bool , flow_setup_cb_t *, void *, struct netlink_ext_ack *) ;
   void (*hw_add)(struct tcf_proto *, void *) ;
   void (*hw_del)(struct tcf_proto *, void *) ;
   void (*bind_class)(void *, u32 , unsigned long ) ;
   void *(*tmplt_create)(struct net *, struct tcf_chain *, struct nlattr **, struct netlink_ext_ack *) ;
   void (*tmplt_destroy)(void *) ;
   int (*dump)(struct net *, struct tcf_proto *, void *, struct sk_buff *, struct tcmsg *, bool ) ;
   int (*tmplt_dump)(struct sk_buff *, struct net *, void *) ;
   struct module *owner ;
   int flags ;
};
#line 348  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct tcf_proto {
   struct tcf_proto *next ;
   void *root ;
   int (*classify)(struct sk_buff *, struct tcf_proto *, struct tcf_result *) ;
   __be16 protocol ;
   u32 prio ;
   void *data ;
   struct tcf_proto_ops *ops ;
   struct tcf_chain *chain ;
   spinlock_t lock ;
   bool deleting ;
   refcount_t refcnt ;
   struct callback_head rcu ;
   struct hlist_node destroy_ht_node ;
};
#line 386  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct tcf_chain {
   struct mutex filter_chain_lock ;
   struct tcf_proto *filter_chain ;
   struct list_head list ;
   struct tcf_block *block ;
   u32 index ;
   unsigned int refcnt ;
   unsigned int action_refcnt ;
   bool explicitly_created ;
   bool flushing ;
   struct tcf_proto_ops *tmplt_ops ;
   void *tmplt_priv ;
   struct callback_head rcu ;
};
#line 402  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct __anonstruct_chain0_811 {
   struct tcf_chain *chain ;
   struct list_head filter_chain_list ;
};
#line 402  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct tcf_block {
   struct mutex lock ;
   struct list_head chain_list ;
   u32 index ;
   refcount_t refcnt ;
   struct net *net ;
   struct Qdisc *q ;
   struct rw_semaphore cb_lock ;
   struct flow_block flow_block ;
   struct list_head owner_list ;
   bool keep_dst ;
   atomic_t offloadcnt ;
   unsigned int nooffloaddevcnt ;
   unsigned int lockeddevcnt ;
   struct __anonstruct_chain0_811 chain0 ;
   struct callback_head rcu ;
   struct hlist_head proto_destroy_ht[128U] ;
   struct mutex proto_destroy_lock ;
};
#line 1269  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct mini_Qdisc {
   struct tcf_proto *filter_list ;
   struct gnet_stats_basic_cpu *cpu_bstats ;
   struct gnet_stats_queue *cpu_qstats ;
   struct callback_head rcu ;
};
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/filter.h"
struct sock_filter {
   __u16 code ;
   __u8 jt ;
   __u8 jf ;
   __u32 k ;
};
#line 35 
struct sock_reuseport;
#line 513  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/filter.h"
struct sock_fprog_kern {
   u16 len ;
   struct sock_filter *filter ;
};
#line 526  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/filter.h"
union __anonunion_824 {
   struct sock_filter insns[0U] ;
   struct bpf_insn insnsi[0U] ;
};
#line 526  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/filter.h"
struct bpf_prog {
   u16 pages ;
   u16 jited : 1 ;
   u16 jit_requested : 1 ;
   u16 gpl_compatible : 1 ;
   u16 cb_access : 1 ;
   u16 dst_needed : 1 ;
   u16 blinded : 1 ;
   u16 is_func : 1 ;
   u16 kprobe_override : 1 ;
   u16 has_callchain_buf : 1 ;
   u16 enforce_expected_attach_type : 1 ;
   enum bpf_prog_type type ;
   enum bpf_attach_type expected_attach_type ;
   u32 len ;
   u32 jited_len ;
   u8 tag[8U] ;
   struct bpf_prog_aux *aux ;
   struct sock_fprog_kern *orig_prog ;
   unsigned int (*bpf_func)(void *, struct bpf_insn *) ;
   union __anonunion_824 __anonCompField_bpf_prog_176 ;
};
#line 554  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/filter.h"
struct sk_filter {
   refcount_t refcnt ;
   struct callback_head rcu ;
   struct bpf_prog *prog ;
};
#line 36  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/poll.h"
struct pollfd {
   int fd ;
   short events ;
   short revents ;
};
#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/poll.h"
struct poll_table_struct {
   void (*_qproc)(struct file *, wait_queue_head_t *, struct poll_table_struct *) ;
   __poll_t _key ;
};
#line 70  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/neighbour.h"
struct neigh_table;
#line 70  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/neighbour.h"
struct neigh_parms {
   possible_net_t net ;
   struct net_device *dev ;
   struct list_head list ;
   int (*neigh_setup)(struct neighbour *) ;
   struct neigh_table *tbl ;
   void *sysctl_table ;
   int dead ;
   refcount_t refcnt ;
   struct callback_head callback_head ;
   int reachable_time ;
   int data[13U] ;
   unsigned long data_state[1U] ;
};
#line 112  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/neighbour.h"
struct neigh_statistics {
   unsigned long allocs ;
   unsigned long destroys ;
   unsigned long hash_grows ;
   unsigned long res_failed ;
   unsigned long lookups ;
   unsigned long hits ;
   unsigned long rcv_probes_mcast ;
   unsigned long rcv_probes_ucast ;
   unsigned long periodic_gc_runs ;
   unsigned long forced_gc_runs ;
   unsigned long unres_discards ;
   unsigned long table_fulls ;
};
#line 134 
struct neigh_ops;
#line 134  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/neighbour.h"
struct neighbour {
   struct neighbour *next ;
   struct neigh_table *tbl ;
   struct neigh_parms *parms ;
   unsigned long confirmed ;
   unsigned long updated ;
   rwlock_t lock ;
   refcount_t refcnt ;
   unsigned int arp_queue_len_bytes ;
   struct sk_buff_head arp_queue ;
   struct timer_list timer ;
   unsigned long used ;
   atomic_t probes ;
   __u8 flags ;
   __u8 nud_state ;
   __u8 type ;
   __u8 dead ;
   u8 protocol ;
   seqlock_t ha_lock ;
   unsigned char ha[32U] ;
   struct hh_cache hh ;
   int (*output)(struct neighbour *, struct sk_buff *) ;
   struct neigh_ops *ops ;
   struct list_head gc_list ;
   struct callback_head rcu ;
   struct net_device *dev ;
   u8 primary_key[0U] ;
} __attribute__((__designated_init__));
#line 163  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/neighbour.h"
struct neigh_ops {
   int family ;
   void (*solicit)(struct neighbour *, struct sk_buff *) ;
   void (*error_report)(struct neighbour *, struct sk_buff *) ;
   int (*output)(struct neighbour *, struct sk_buff *) ;
   int (*connected_output)(struct neighbour *, struct sk_buff *) ;
};
#line 171  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/neighbour.h"
struct pneigh_entry {
   struct pneigh_entry *next ;
   possible_net_t net ;
   struct net_device *dev ;
   u8 flags ;
   u8 protocol ;
   u8 key[0U] ;
};
#line 186  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/neighbour.h"
struct neigh_hash_table {
   struct neighbour **hash_buckets ;
   unsigned int hash_shift ;
   __u32 hash_rnd[4U] ;
   struct callback_head rcu ;
};
#line 194  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/neighbour.h"
struct neigh_table {
   int family ;
   unsigned int entry_size ;
   unsigned int key_len ;
   __be16 protocol ;
   __u32 (*hash)(void *, struct net_device *, __u32 *) ;
   bool (*key_eq)(struct neighbour *, void *) ;
   int (*constructor)(struct neighbour *) ;
   int (*pconstructor)(struct pneigh_entry *) ;
   void (*pdestructor)(struct pneigh_entry *) ;
   void (*proxy_redo)(struct sk_buff *) ;
   bool (*allow_add)(struct net_device *, struct netlink_ext_ack *) ;
   char *id ;
   struct neigh_parms parms ;
   struct list_head parms_list ;
   int gc_interval ;
   int gc_thresh1 ;
   int gc_thresh2 ;
   int gc_thresh3 ;
   unsigned long last_flush ;
   struct delayed_work gc_work ;
   struct timer_list proxy_timer ;
   struct sk_buff_head proxy_queue ;
   atomic_t entries ;
   atomic_t gc_entries ;
   struct list_head gc_list ;
   rwlock_t lock ;
   unsigned long last_rand ;
   struct neigh_statistics *stats ;
   struct neigh_hash_table *nht ;
   struct pneigh_entry **phash_buckets ;
};
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/dst.h"
struct lwtunnel_state;
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/dst.h"
struct dst_entry {
   struct net_device *dev ;
   struct dst_ops *ops ;
   unsigned long _metrics ;
   unsigned long expires ;
   struct xfrm_state *xfrm ;
   int (*input)(struct sk_buff *) ;
   int (*output)(struct net *, struct sock *, struct sk_buff *) ;
   unsigned short flags ;
   short obsolete ;
   unsigned short header_len ;
   unsigned short trailer_len ;
   atomic_t __refcnt ;
   int __use ;
   unsigned long lastuse ;
   struct lwtunnel_state *lwtstate ;
   struct callback_head callback_head ;
   short error ;
   short __pad ;
   __u32 tclassid ;
};
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fib_rules.h"
struct fib_rule_hdr {
   __u8 family ;
   __u8 dst_len ;
   __u8 src_len ;
   __u8 tos ;
   __u8 table ;
   __u8 res1 ;
   __u8 res2 ;
   __u8 action ;
   __u32 flags ;
};
#line 38  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fib_rules.h"
struct fib_rule_port_range {
   __u16 start ;
   __u16 end ;
};
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/fib_notifier.h"
struct fib_notifier_ops {
   int family ;
   struct list_head list ;
   unsigned int (*fib_seq_read)(struct net *) ;
   int (*fib_dump)(struct net *, struct notifier_block *, struct netlink_ext_ack *) ;
   struct module *owner ;
   struct callback_head rcu ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/fib_rules.h"
struct fib_kuid_range {
   kuid_t start ;
   kuid_t end ;
};
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/fib_rules.h"
struct fib_rule {
   struct list_head list ;
   int iifindex ;
   int oifindex ;
   u32 mark ;
   u32 mark_mask ;
   u32 flags ;
   u32 table ;
   u8 action ;
   u8 l3mdev ;
   u8 proto ;
   u8 ip_proto ;
   u32 target ;
   __be64 tun_id ;
   struct fib_rule *ctarget ;
   struct net *fr_net ;
   refcount_t refcnt ;
   u32 pref ;
   int suppress_ifgroup ;
   int suppress_prefixlen ;
   char iifname[16U] ;
   char oifname[16U] ;
   struct fib_kuid_range uid_range ;
   struct fib_rule_port_range sport_range ;
   struct fib_rule_port_range dport_range ;
   struct callback_head rcu ;
};
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/fib_rules.h"
struct fib_lookup_arg {
   void *lookup_ptr ;
   void *lookup_data ;
   void *result ;
   struct fib_rule *rule ;
   u32 table ;
   int flags ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/fib_rules.h"
struct fib_rules_ops {
   int family ;
   struct list_head list ;
   int rule_size ;
   int addr_size ;
   int unresolved_rules ;
   int nr_goto_rules ;
   unsigned int fib_rules_seq ;
   int (*action)(struct fib_rule *, struct flowi *, int , struct fib_lookup_arg *) ;
   bool (*suppress)(struct fib_rule *, struct fib_lookup_arg *) ;
   int (*match)(struct fib_rule *, struct flowi *, int ) ;
   int (*configure)(struct fib_rule *, struct sk_buff *, struct fib_rule_hdr *, struct nlattr **, struct netlink_ext_ack *) ;
   int (*delete)(struct fib_rule *) ;
   int (*compare)(struct fib_rule *, struct fib_rule_hdr *, struct nlattr **) ;
   int (*fill)(struct fib_rule *, struct sk_buff *, struct fib_rule_hdr *) ;
   size_t (*nlmsg_payload)(struct fib_rule *) ;
   void (*flush_cache)(struct fib_rules_ops *) ;
   int nlgroup ;
   struct nla_policy *policy ;
   struct list_head rules_list ;
   struct module *owner ;
   struct net *fro_net ;
   struct callback_head rcu ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/l3mdev.h"
struct l3mdev_ops {
   u32 (*l3mdev_fib_table)(struct net_device *) ;
   struct sk_buff *(*l3mdev_l3_rcv)(struct net_device *, struct sk_buff *, u16 ) ;
   struct sk_buff *(*l3mdev_l3_out)(struct net_device *, struct sock *, struct sk_buff *, u16 ) ;
   struct dst_entry *(*l3mdev_link_scope_lookup)(struct net_device *, struct flowi6 *) ;
};
#line 202  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/l3mdev.h"
struct __anonstruct_socket_lock_t_846 {
   spinlock_t slock ;
   int owned ;
   wait_queue_head_t wq ;
   struct lockdep_map dep_map ;
};
#line 202  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/l3mdev.h"
typedef struct __anonstruct_socket_lock_t_846 socket_lock_t;
#line 108  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
struct proto;
#line 109  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
typedef __u32 __portpair;
#line 114  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
typedef __u64 __addrpair;
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
struct __anonstruct_848 {
   __be32 skc_daddr ;
   __be32 skc_rcv_saddr ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_847 {
   __addrpair skc_addrpair ;
   struct __anonstruct_848 __anonCompField___anonunion_847_178 ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_849 {
   unsigned int skc_hash ;
   __u16 skc_u16hashes[2U] ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
struct __anonstruct_851 {
   __be16 skc_dport ;
   __u16 skc_num ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_850 {
   __portpair skc_portpair ;
   struct __anonstruct_851 __anonCompField___anonunion_850_181 ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_852 {
   struct hlist_node skc_bind_node ;
   struct hlist_node skc_portaddr_node ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_853 {
   unsigned long skc_flags ;
   struct sock *skc_listener ;
   struct inet_timewait_death_row *skc_tw_dr ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_854 {
   struct hlist_node skc_node ;
   struct hlist_nulls_node skc_nulls_node ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_855 {
   int skc_incoming_cpu ;
   u32 skc_rcv_wnd ;
   u32 skc_tw_rcv_nxt ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_856 {
   u32 skc_rxhash ;
   u32 skc_window_clamp ;
   u32 skc_tw_snd_nxt ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
struct sock_common {
   union __anonunion_847 __anonCompField_sock_common_179 ;
   union __anonunion_849 __anonCompField_sock_common_180 ;
   union __anonunion_850 __anonCompField_sock_common_182 ;
   unsigned short skc_family ;
   unsigned char skc_state ;
   unsigned char skc_reuse : 4 ;
   unsigned char skc_reuseport : 1 ;
   unsigned char skc_ipv6only : 1 ;
   unsigned char skc_net_refcnt : 1 ;
   int skc_bound_dev_if ;
   union __anonunion_852 __anonCompField_sock_common_183 ;
   struct proto *skc_prot ;
   possible_net_t skc_net ;
   struct in6_addr skc_v6_daddr ;
   struct in6_addr skc_v6_rcv_saddr ;
   atomic64_t skc_cookie ;
   union __anonunion_853 __anonCompField_sock_common_184 ;
   int skc_dontcopy_begin[0U] ;
   union __anonunion_854 __anonCompField_sock_common_185 ;
   unsigned short skc_tx_queue_mapping ;
   unsigned short skc_rx_queue_mapping ;
   union __anonunion_855 __anonCompField_sock_common_186 ;
   refcount_t skc_refcnt ;
   int skc_dontcopy_end[0U] ;
   union __anonunion_856 __anonCompField_sock_common_187 ;
};
#line 231 
struct bpf_sk_storage;
#line 323  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
struct __anonstruct_sk_backlog_857 {
   atomic_t rmem_alloc ;
   int len ;
   struct sk_buff *head ;
   struct sk_buff *tail ;
};
#line 323  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_858 {
   struct socket_wq *sk_wq ;
   struct socket_wq *sk_wq_raw ;
};
#line 323  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_859 {
   struct sk_buff *sk_send_head ;
   struct rb_root tcp_rtx_queue ;
};
#line 323  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
struct sock {
   struct sock_common __sk_common ;
   socket_lock_t sk_lock ;
   atomic_t sk_drops ;
   int sk_rcvlowat ;
   struct sk_buff_head sk_error_queue ;
   struct sk_buff *sk_rx_skb_cache ;
   struct sk_buff_head sk_receive_queue ;
   struct __anonstruct_sk_backlog_857 sk_backlog ;
   int sk_forward_alloc ;
   unsigned int sk_ll_usec ;
   unsigned int sk_napi_id ;
   int sk_rcvbuf ;
   struct sk_filter *sk_filter ;
   union __anonunion_858 __anonCompField_sock_188 ;
   struct xfrm_policy *sk_policy[2U] ;
   struct dst_entry *sk_rx_dst ;
   struct dst_entry *sk_dst_cache ;
   atomic_t sk_omem_alloc ;
   int sk_sndbuf ;
   int sk_wmem_queued ;
   refcount_t sk_wmem_alloc ;
   unsigned long sk_tsq_flags ;
   union __anonunion_859 __anonCompField_sock_189 ;
   struct sk_buff *sk_tx_skb_cache ;
   struct sk_buff_head sk_write_queue ;
   __s32 sk_peek_off ;
   int sk_write_pending ;
   __u32 sk_dst_pending_confirm ;
   u32 sk_pacing_status ;
   long sk_sndtimeo ;
   struct timer_list sk_timer ;
   __u32 sk_priority ;
   __u32 sk_mark ;
   unsigned long sk_pacing_rate ;
   unsigned long sk_max_pacing_rate ;
   struct page_frag sk_frag ;
   netdev_features_t sk_route_caps ;
   netdev_features_t sk_route_nocaps ;
   netdev_features_t sk_route_forced_caps ;
   int sk_gso_type ;
   unsigned int sk_gso_max_size ;
   gfp_t sk_allocation ;
   __u32 sk_txhash ;
   unsigned int __sk_flags_offset[0U] ;
   unsigned int sk_padding : 1 ;
   unsigned int sk_kern_sock : 1 ;
   unsigned int sk_no_check_tx : 1 ;
   unsigned int sk_no_check_rx : 1 ;
   unsigned int sk_userlocks : 4 ;
   unsigned int sk_protocol : 8 ;
   unsigned int sk_type : 16 ;
   u16 sk_gso_max_segs ;
   u8 sk_pacing_shift ;
   unsigned long sk_lingertime ;
   struct proto *sk_prot_creator ;
   rwlock_t sk_callback_lock ;
   int sk_err ;
   int sk_err_soft ;
   u32 sk_ack_backlog ;
   u32 sk_max_ack_backlog ;
   kuid_t sk_uid ;
   struct pid *sk_peer_pid ;
   struct cred *sk_peer_cred ;
   long sk_rcvtimeo ;
   ktime_t sk_stamp ;
   u16 sk_tsflags ;
   u8 sk_shutdown ;
   u32 sk_tskey ;
   atomic_t sk_zckey ;
   u8 sk_clockid ;
   u8 sk_txtime_deadline_mode : 1 ;
   u8 sk_txtime_report_errors : 1 ;
   u8 sk_txtime_unused : 6 ;
   struct socket *sk_socket ;
   void *sk_user_data ;
   void *sk_security ;
   struct sock_cgroup_data sk_cgrp_data ;
   struct mem_cgroup *sk_memcg ;
   void (*sk_state_change)(struct sock *) ;
   void (*sk_data_ready)(struct sock *) ;
   void (*sk_write_space)(struct sock *) ;
   void (*sk_error_report)(struct sock *) ;
   int (*sk_backlog_rcv)(struct sock *, struct sk_buff *) ;
   struct sk_buff *(*sk_validate_xmit_skb)(struct sock *, struct net_device *, struct sk_buff *) ;
   void (*sk_destruct)(struct sock *) ;
   struct sock_reuseport *sk_reuseport_cb ;
   struct bpf_sk_storage *sk_bpf_storage ;
   struct callback_head sk_rcu ;
};
#line 1048 
struct request_sock_ops;
#line 1049 
struct timewait_sock_ops;
#line 1050 
struct raw_hashinfo;
#line 1051 
struct smc_hashinfo;
#line 1071 
struct udp_table;
#line 1071  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_h_894 {
   struct inet_hashinfo *hashinfo ;
   struct udp_table *udp_table ;
   struct raw_hashinfo *raw_hash ;
   struct smc_hashinfo *smc_hash ;
};
#line 1071  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
struct proto {
   void (*close)(struct sock *, long ) ;
   int (*pre_connect)(struct sock *, struct sockaddr *, int ) ;
   int (*connect)(struct sock *, struct sockaddr *, int ) ;
   int (*disconnect)(struct sock *, int ) ;
   struct sock *(*accept)(struct sock *, int , int *, bool ) ;
   int (*ioctl)(struct sock *, int , unsigned long ) ;
   int (*init)(struct sock *) ;
   void (*destroy)(struct sock *) ;
   void (*shutdown)(struct sock *, int ) ;
   int (*setsockopt)(struct sock *, int , int , char *, unsigned int ) ;
   int (*getsockopt)(struct sock *, int , int , char *, int *) ;
   void (*keepalive)(struct sock *, int ) ;
   int (*compat_setsockopt)(struct sock *, int , int , char *, unsigned int ) ;
   int (*compat_getsockopt)(struct sock *, int , int , char *, int *) ;
   int (*compat_ioctl)(struct sock *, unsigned int , unsigned long ) ;
   int (*sendmsg)(struct sock *, struct msghdr *, size_t ) ;
   int (*recvmsg)(struct sock *, struct msghdr *, size_t , int , int , int *) ;
   int (*sendpage)(struct sock *, struct page *, int , size_t , int ) ;
   int (*bind)(struct sock *, struct sockaddr *, int ) ;
   int (*backlog_rcv)(struct sock *, struct sk_buff *) ;
   void (*release_cb)(struct sock *) ;
   int (*hash)(struct sock *) ;
   void (*unhash)(struct sock *) ;
   void (*rehash)(struct sock *) ;
   int (*get_port)(struct sock *, unsigned short ) ;
   unsigned int inuse_idx ;
   bool (*stream_memory_free)(struct sock *, int ) ;
   bool (*stream_memory_read)(struct sock *) ;
   void (*enter_memory_pressure)(struct sock *) ;
   void (*leave_memory_pressure)(struct sock *) ;
   atomic_long_t *memory_allocated ;
   struct percpu_counter *sockets_allocated ;
   unsigned long *memory_pressure ;
   long *sysctl_mem ;
   int *sysctl_wmem ;
   int *sysctl_rmem ;
   u32 sysctl_wmem_offset ;
   u32 sysctl_rmem_offset ;
   int max_header ;
   bool no_autobind ;
   struct kmem_cache *slab ;
   unsigned int obj_size ;
   slab_flags_t slab_flags ;
   unsigned int useroffset ;
   unsigned int usersize ;
   struct percpu_counter *orphan_count ;
   struct request_sock_ops *rsk_prot ;
   struct timewait_sock_ops *twsk_prot ;
   union __anonunion_h_894 h ;
   struct module *owner ;
   char name[32U] ;
   struct list_head node ;
   int (*diag_destroy)(struct sock *, int ) ;
} __attribute__((__designated_init__));
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/request_sock.h"
struct request_sock_ops {
   int family ;
   unsigned int obj_size ;
   struct kmem_cache *slab ;
   char *slab_name ;
   int (*rtx_syn_ack)(struct sock *, struct request_sock *) ;
   void (*send_ack)(struct sock *, struct sk_buff *, struct request_sock *) ;
   void (*send_reset)(struct sock *, struct sk_buff *) ;
   void (*destructor)(struct request_sock *) ;
   void (*syn_ack_timeout)(struct request_sock *) ;
};
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/request_sock.h"
struct request_sock {
   struct sock_common __req_common ;
   struct request_sock *dl_next ;
   u16 mss ;
   u8 num_retrans ;
   u8 cookie_ts : 1 ;
   u8 num_timeout : 7 ;
   u32 ts_recent ;
   struct timer_list rsk_timer ;
   struct request_sock_ops *rsk_ops ;
   struct sock *sk ;
   u32 *saved_syn ;
   u32 secid ;
   u32 peer_secid ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/timewait_sock.h"
struct timewait_sock_ops {
   struct kmem_cache *twsk_slab ;
   char *twsk_slab_name ;
   unsigned int twsk_obj_size ;
   int (*twsk_unique)(struct sock *, struct sock *, void *) ;
   void (*twsk_destructor)(struct sock *) ;
};
#line 182  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/avf/virtchnl.h"
struct virtchnl_version_info {
   u32 major ;
   u32 minor ;
};
#line 406  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/avf/virtchnl.h"
struct virtchnl_ether_addr {
   u8 addr[6U] ;
   u8 pad[2U] ;
};
#line 99  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/if_inet6.h"
struct ip6_sf_list {
   struct ip6_sf_list *sf_next ;
   struct in6_addr sf_addr ;
   unsigned long sf_count[2U] ;
   unsigned char sf_gsresp ;
   unsigned char sf_oldin ;
   unsigned char sf_crcount ;
};
#line 114  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/if_inet6.h"
struct ifmcaddr6 {
   struct in6_addr mca_addr ;
   struct inet6_dev *idev ;
   struct ifmcaddr6 *next ;
   struct ip6_sf_list *mca_sources ;
   struct ip6_sf_list *mca_tomb ;
   unsigned int mca_sfmode ;
   unsigned char mca_crcount ;
   unsigned long mca_sfcount[2U] ;
   struct timer_list mca_timer ;
   unsigned int mca_flags ;
   int mca_users ;
   refcount_t mca_refcnt ;
   spinlock_t mca_lock ;
   unsigned long mca_cstamp ;
   unsigned long mca_tstamp ;
};
#line 140  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/if_inet6.h"
struct ifacaddr6 {
   struct in6_addr aca_addr ;
   struct fib6_info *aca_rt ;
   struct ifacaddr6 *aca_next ;
   struct hlist_node aca_addr_lst ;
   int aca_users ;
   refcount_t aca_refcnt ;
   unsigned long aca_cstamp ;
   unsigned long aca_tstamp ;
   struct callback_head rcu ;
};
#line 156  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/if_inet6.h"
struct ipv6_devstat {
   struct proc_dir_entry *proc_dir_entry ;
   struct ipstats_mib *ipv6 ;
   struct icmpv6_mib_device *icmpv6dev ;
   struct icmpv6msg_mib_device *icmpv6msgdev ;
};
#line 163  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/if_inet6.h"
struct inet6_dev {
   struct net_device *dev ;
   struct list_head addr_list ;
   struct ifmcaddr6 *mc_list ;
   struct ifmcaddr6 *mc_tomb ;
   spinlock_t mc_lock ;
   unsigned char mc_qrv ;
   unsigned char mc_gq_running ;
   unsigned char mc_ifc_count ;
   unsigned char mc_dad_count ;
   unsigned long mc_v1_seen ;
   unsigned long mc_qi ;
   unsigned long mc_qri ;
   unsigned long mc_maxdelay ;
   struct timer_list mc_gq_timer ;
   struct timer_list mc_ifc_timer ;
   struct timer_list mc_dad_timer ;
   struct ifacaddr6 *ac_list ;
   rwlock_t lock ;
   refcount_t refcnt ;
   __u32 if_flags ;
   int dead ;
   u32 desync_factor ;
   u8 rndid[8U] ;
   struct list_head tempaddr_list ;
   struct in6_addr token ;
   struct neigh_parms *nd_parms ;
   struct ipv6_devconf cnf ;
   struct ipv6_devstat stats ;
   struct timer_list rs_timer ;
   __s32 rs_interval ;
   __u8 rs_probes ;
   unsigned long tstamp ;
   struct callback_head rcu ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/if_arp.h"
struct prefix_info;
#line 104  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/ndisc.h"
struct nd_opt_hdr {
   __u8 nd_opt_type ;
   __u8 nd_opt_len ;
} __attribute__((__packed__));
#line 110  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/ndisc.h"
struct ndisc_options {
   struct nd_opt_hdr *nd_opt_array[15U] ;
   struct nd_opt_hdr *nd_opts_ri ;
   struct nd_opt_hdr *nd_opts_ri_end ;
   struct nd_opt_hdr *nd_useropts ;
   struct nd_opt_hdr *nd_useropts_end ;
   struct nd_opt_hdr *nd_802154_opt_array[3U] ;
};
#line 201  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/ndisc.h"
struct ndisc_ops {
   int (*is_useropt)(u8 ) ;
   int (*parse_options)(struct net_device *, struct nd_opt_hdr *, struct ndisc_options *) ;
   void (*update)(struct net_device *, struct neighbour *, u32 , u8 , struct ndisc_options *) ;
   int (*opt_addr_space)(struct net_device *, u8 , struct neighbour *, u8 *, u8 **) ;
   void (*fill_addr_option)(struct net_device *, struct sk_buff *, u8 , u8 *) ;
   void (*prefix_rcv_add_addr)(struct net *, struct net_device *, struct prefix_info *, struct inet6_dev *, struct in6_addr *, int , u32 , bool , bool , __u32 , u32 , bool ) ;
};
#line 105  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if_xdp.h"
struct xsk_queue;
#line 26  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/xdp_sock.h"
struct xdp_umem_page {
   void *addr ;
   dma_addr_t dma ;
};
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/xdp_sock.h"
struct xdp_umem_fq_reuse {
   u32 nentries ;
   u32 length ;
   u64 handles[] ;
};
#line 44  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/xdp_sock.h"
struct xdp_umem {
   struct xsk_queue *fq ;
   struct xsk_queue *cq ;
   struct xdp_umem_page *pages ;
   u64 chunk_mask ;
   u64 size ;
   u32 headroom ;
   u32 chunk_size_nohr ;
   struct user_struct *user ;
   unsigned long address ;
   refcount_t users ;
   struct work_struct work ;
   struct page **pgs ;
   u32 npgs ;
   u16 queue_id ;
   u8 need_wakeup ;
   u8 flags ;
   int id ;
   struct net_device *dev ;
   struct xdp_umem_fq_reuse *fq_reuse ;
   bool zc ;
   spinlock_t xsk_list_lock ;
   struct list_head xsk_list ;
};
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_osdep.h"
struct ice_dma_mem {
   void *va ;
   dma_addr_t pa ;
   size_t size ;
};
#line 305  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_adminq_cmd.h"
struct ice_aqc_vsi_props {
   __le16 valid_sections ;
   u8 sw_id ;
   u8 sw_flags ;
   u8 sw_flags2 ;
   u8 veb_stat_id ;
   u8 sec_flags ;
   u8 sec_reserved ;
   __le16 pvid ;
   u8 pvlan_reserved[2U] ;
   u8 vlan_flags ;
   u8 pvlan_reserved2[3U] ;
   __le32 ingress_table ;
   __le32 egress_table ;
   __le16 outer_tag ;
   u8 outer_tag_flags ;
   u8 outer_tag_reserved ;
   __le16 mapping_flags ;
   __le16 q_mapping[16U] ;
   __le16 tc_mapping[8U] ;
   u8 q_opt_rss ;
   u8 q_opt_tc ;
   u8 q_opt_flags ;
   u8 q_opt_reserved[3U] ;
   __le32 outer_up_table ;
   __le16 sect_10_reserved ;
   __le16 fd_options ;
   __le16 max_fd_fltr_dedicated ;
   __le16 max_fd_fltr_shared ;
   __le16 fd_def_q ;
   __le16 fd_report_opt ;
   __le32 pasid_id ;
   u8 reserved[24U] ;
};
#line 692  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_adminq_cmd.h"
struct ice_aqc_elem_info_bw {
   __le16 bw_profile_idx ;
   __le16 bw_alloc ;
};
#line 697  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_adminq_cmd.h"
struct ice_aqc_txsched_elem {
   u8 elem_type ;
   u8 valid_sections ;
   u8 generic ;
   u8 flags ;
   struct ice_aqc_elem_info_bw cir_bw ;
   struct ice_aqc_elem_info_bw eir_bw ;
   __le16 srl_id ;
   __le16 reserved2 ;
};
#line 728  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_adminq_cmd.h"
struct ice_aqc_txsched_elem_data {
   __le32 parent_teid ;
   __le32 node_teid ;
   struct ice_aqc_txsched_elem data ;
};
#line 849  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_adminq_cmd.h"
struct ice_aqc_layer_props {
   u8 logical_layer ;
   u8 chunk_size ;
   __le16 max_device_nodes ;
   __le16 max_pf_nodes ;
   u8 rsvd0[4U] ;
   __le16 max_sibl_grp_sz ;
   __le16 max_cir_rl_profiles ;
   __le16 max_eir_rl_profiles ;
   __le16 max_srl_profiles ;
   u8 rsvd1[14U] ;
};
#line 1633  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_adminq_cmd.h"
struct ice_pkg_ver {
   u8 major ;
   u8 minor ;
   u8 update ;
   u8 draft ;
};
#line 1727 
enum ice_aq_err {
    ICE_AQ_RC_OK = 0,
    ICE_AQ_RC_EPERM = 1,
    ICE_AQ_RC_ENOENT = 2,
    ICE_AQ_RC_ENOMEM = 9,
    ICE_AQ_RC_EBUSY = 12,
    ICE_AQ_RC_EEXIST = 13,
    ICE_AQ_RC_ENOSPC = 16,
    ICE_AQ_RC_ENOSYS = 17,
    ICE_AQ_RC_ENOSEC = 24,
    ICE_AQ_RC_EBADSIG = 25,
    ICE_AQ_RC_ESVN = 26,
    ICE_AQ_RC_EBADMAN = 27,
    ICE_AQ_RC_EBADBUF = 28
};
#line 1806 
enum ice_ctl_q {
    ICE_CTL_Q_UNKNOWN = 0,
    ICE_CTL_Q_ADMIN = 1,
    ICE_CTL_Q_MAILBOX = 2
};
#line 38  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_controlq.h"
union __anonunion_r_989 {
   struct ice_dma_mem *sq_bi ;
   struct ice_dma_mem *rq_bi ;
};
#line 38  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_controlq.h"
struct ice_ctl_q_ring {
   void *dma_head ;
   struct ice_dma_mem desc_buf ;
   void *cmd_buf ;
   union __anonunion_r_989 r ;
   u16 count ;
   u16 next_to_use ;
   u16 next_to_clean ;
   u32 head ;
   u32 tail ;
   u32 len ;
   u32 bah ;
   u32 bal ;
   u32 len_mask ;
   u32 len_ena_mask ;
   u32 head_mask ;
};
#line 81  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_controlq.h"
struct ice_ctl_q_info {
   enum ice_ctl_q qtype ;
   enum ice_aq_err rq_last_status ;
   struct ice_ctl_q_ring rq ;
   struct ice_ctl_q_ring sq ;
   u32 sq_cmd_timeout ;
   u16 num_rq_entries ;
   u16 num_sq_entries ;
   u16 rq_buf_size ;
   u16 sq_buf_size ;
   enum ice_aq_err sq_last_status ;
   struct mutex sq_lock ;
   struct mutex rq_lock ;
};
#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_lan_tx_rx.h"
struct ice_rx_ptype_decoded {
   u32 ptype : 10 ;
   u32 known : 1 ;
   u32 outer_ip : 1 ;
   u32 outer_ip_ver : 2 ;
   u32 outer_frag : 1 ;
   u32 tunnel_type : 3 ;
   u32 tunnel_end_prot : 2 ;
   u32 tunnel_end_frag : 1 ;
   u32 inner_prot : 4 ;
   u32 payload_layer : 3 ;
};
#line 106  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_lan_tx_rx.h"
struct __anonstruct_read_998 {
   __le64 pkt_addr ;
   __le64 hdr_addr ;
   __le64 rsvd1 ;
   __le64 rsvd2 ;
};
#line 106  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_lan_tx_rx.h"
struct __anonstruct_flex_1001 {
   __le16 flex_meta4 ;
   __le16 flex_meta5 ;
};
#line 106  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_lan_tx_rx.h"
union __anonunion_flex_ts_1000 {
   struct __anonstruct_flex_1001 flex ;
   __le32 ts_high ;
};
#line 106  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_lan_tx_rx.h"
struct __anonstruct_wb_999 {
   u8 rxdid ;
   u8 mir_id_umb_cast ;
   __le16 ptype_flex_flags0 ;
   __le16 pkt_len ;
   __le16 hdr_len_sph_flex_flags1 ;
   __le16 status_error0 ;
   __le16 l2tag1 ;
   __le16 flex_meta0 ;
   __le16 flex_meta1 ;
   __le16 status_error1 ;
   u8 flex_flags2 ;
   u8 time_stamp_low ;
   __le16 l2tag2_1st ;
   __le16 l2tag2_2nd ;
   __le16 flex_meta2 ;
   __le16 flex_meta3 ;
   union __anonunion_flex_ts_1000 flex_ts ;
};
#line 106  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_lan_tx_rx.h"
union ice_32b_rx_flex_desc {
   struct __anonstruct_read_998 read ;
   struct __anonstruct_wb_999 wb ;
};
#line 154  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_lan_tx_rx.h"
struct __anonstruct_flex_1003 {
   __le16 vlan_id ;
   __le16 flow_id_ipv6 ;
};
#line 154  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_lan_tx_rx.h"
union __anonunion_flex_ts_1002 {
   struct __anonstruct_flex_1003 flex ;
   __le32 ts_high ;
};
#line 154  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_lan_tx_rx.h"
struct ice_32b_rx_flex_desc_nic {
   u8 rxdid ;
   u8 mir_id_umb_cast ;
   __le16 ptype_flexi_flags0 ;
   __le16 pkt_len ;
   __le16 hdr_len_sph_flex_flags1 ;
   __le16 status_error0 ;
   __le16 l2tag1 ;
   __le32 rss_hash ;
   __le16 status_error1 ;
   u8 flexi_flags2 ;
   u8 ts_low ;
   __le16 l2tag2_1st ;
   __le16 l2tag2_2nd ;
   __le32 flow_id ;
   union __anonunion_flex_ts_1002 flex_ts ;
};
#line 327  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_lan_tx_rx.h"
struct ice_tx_desc {
   __le64 buf_addr ;
   __le64 cmd_type_offset_bsz ;
};
#line 7  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_flex_type.h"
struct ice_fv_word {
   u8 prot_id ;
   u16 off ;
   u8 resvrd ;
} __attribute__((__packed__));
#line 26  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_flex_type.h"
struct ice_generic_seg_hdr {
   __le32 seg_type ;
   struct ice_pkg_ver seg_ver ;
   __le32 seg_size ;
   char seg_name[32U] ;
};
#line 37  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_flex_type.h"
struct __anonstruct_dev_vend_id_1004 {
   __le16 device_id ;
   __le16 vendor_id ;
};
#line 37  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_flex_type.h"
union ice_device_id {
   struct __anonstruct_dev_vend_id_1004 dev_vend_id ;
   __le32 id ;
};
#line 45  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_flex_type.h"
struct ice_device_id_entry {
   union ice_device_id device ;
   union ice_device_id sub_device ;
};
#line 50  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_flex_type.h"
struct ice_seg {
   struct ice_generic_seg_hdr hdr ;
   __le32 device_table_count ;
   struct ice_device_id_entry device_table[1U] ;
};
#line 251  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_flex_type.h"
struct ice_es {
   u32 sid ;
   u16 count ;
   u16 fvw ;
   u16 *ref_count ;
   struct list_head prof_map ;
   struct ice_fv_word *t ;
   struct mutex prof_map_lock ;
   u8 *written ;
   u8 reverse ;
};
#line 273 
struct ice_ptg_ptype;
#line 273  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_flex_type.h"
struct ice_ptg_entry {
   struct ice_ptg_ptype *first_ptype ;
   u8 in_use ;
};
#line 278  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_flex_type.h"
struct ice_ptg_ptype {
   struct ice_ptg_ptype *next_ptype ;
   u8 ptg ;
};
#line 283 
struct ice_vsig_vsi;
#line 283  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_flex_type.h"
struct ice_vsig_entry {
   struct list_head prop_lst ;
   struct ice_vsig_vsi *first_vsi ;
   u8 in_use ;
};
#line 289  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_flex_type.h"
struct ice_vsig_vsi {
   struct ice_vsig_vsi *next_vsi ;
   u32 prop_mask ;
   u16 changed ;
   u16 vsig ;
};
#line 300  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_flex_type.h"
struct ice_xlt1 {
   struct ice_ptg_entry *ptg_tbl ;
   struct ice_ptg_ptype *ptypes ;
   u8 *t ;
   u32 sid ;
   u16 count ;
};
#line 324  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_flex_type.h"
struct ice_xlt2 {
   struct ice_vsig_entry *vsig_tbl ;
   struct ice_vsig_vsi *vsis ;
   u16 *t ;
   u32 sid ;
   u16 count ;
};
#line 338  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_flex_type.h"
struct ice_prof_tcam_entry {
   __le16 addr ;
   u8 key[10U] ;
   u8 prof_id ;
} __attribute__((__packed__));
#line 349  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_flex_type.h"
struct ice_prof_tcam {
   u32 sid ;
   u16 count ;
   u16 max_prof_id ;
   struct ice_prof_tcam_entry *t ;
   u8 cdid_bits ;
};
#line 357  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_flex_type.h"
struct ice_prof_redir {
   u8 *t ;
   u32 sid ;
   u16 count ;
};
#line 364  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_flex_type.h"
struct ice_blk_info {
   struct ice_xlt1 xlt1 ;
   struct ice_xlt2 xlt2 ;
   struct ice_prof_tcam prof ;
   struct ice_prof_redir prof_redir ;
   struct ice_es es ;
   u8 overwrite ;
   u8 is_list_init ;
};
#line 78  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_type.h"
enum ice_fc_mode {
    ICE_FC_NONE = 0,
    ICE_FC_RX_PAUSE = 1,
    ICE_FC_TX_PAUSE = 2,
    ICE_FC_FULL = 3,
    ICE_FC_PFC = 4,
    ICE_FC_DFLT = 5
};
#line 101 
enum ice_mac_type {
    ICE_MAC_UNKNOWN = 0,
    ICE_MAC_GENERIC = 1
};
#line 106 
enum ice_media_type {
    ICE_MEDIA_UNKNOWN = 0,
    ICE_MEDIA_FIBER = 1,
    ICE_MEDIA_BASET = 2,
    ICE_MEDIA_BACKPLANE = 3,
    ICE_MEDIA_DA = 4
};
#line 114 
enum ice_vsi_type {
    ICE_VSI_PF = 0,
    ICE_VSI_VF = 1,
    ICE_VSI_LB = 6
};
#line 123  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_type.h"
struct ice_link_status {
   u64 phy_type_low ;
   u64 phy_type_high ;
   u8 topo_media_conflict ;
   u16 max_frame_size ;
   u16 link_speed ;
   u16 req_speeds ;
   u8 lse_ena ;
   u8 link_info ;
   u8 an_info ;
   u8 ext_info ;
   u8 fec_info ;
   u8 pacing ;
   u8 module_type[3U] ;
};
#line 153  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_type.h"
struct ice_phy_info {
   struct ice_link_status link_info ;
   struct ice_link_status link_info_old ;
   u64 phy_type_low ;
   u64 phy_type_high ;
   enum ice_media_type media_type ;
   u8 get_link_info ;
};
#line 163  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_type.h"
struct ice_hw_common_caps {
   u32 valid_functions ;
   u32 active_tc_bitmap ;
   u32 maxtc ;
   u16 num_rxq ;
   u16 rxq_first_id ;
   u16 num_txq ;
   u16 txq_first_id ;
   u16 num_msix_vectors ;
   u16 msix_vector_first_id ;
   u16 max_mtu ;
   u8 sr_iov_1_1 ;
   u16 rss_table_size ;
   u8 rss_table_entry_width ;
   u8 dcb ;
};
#line 193  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_type.h"
struct ice_hw_func_caps {
   struct ice_hw_common_caps common_cap ;
   u32 num_allocd_vfs ;
   u32 vf_base_id ;
   u32 guar_num_vsi ;
};
#line 201  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_type.h"
struct ice_hw_dev_caps {
   struct ice_hw_common_caps common_cap ;
   u32 num_vfs_exposed ;
   u32 num_vsi_allocd_to_host ;
   u32 num_funcs ;
};
#line 209  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_type.h"
struct ice_mac_info {
   u8 lan_addr[6U] ;
   u8 perm_addr[6U] ;
};
#line 229  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_type.h"
struct ice_bus_info {
   u16 device ;
   u8 func ;
};
#line 235  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_type.h"
struct ice_fc_info {
   enum ice_fc_mode current_mode ;
   enum ice_fc_mode req_mode ;
};
#line 241  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_type.h"
struct ice_nvm_info {
   u32 eetrack ;
   u32 oem_ver ;
   u16 sr_words ;
   u16 ver ;
   u8 blank_nvm_mode ;
};
#line 260  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_type.h"
struct ice_sched_node {
   struct ice_sched_node *parent ;
   struct ice_sched_node *sibling ;
   struct ice_sched_node **children ;
   struct ice_aqc_txsched_elem_data info ;
   u32 agg_id ;
   u16 vsi_handle ;
   u8 in_use ;
   u8 tx_sched_layer ;
   u8 num_children ;
   u8 tc_num ;
   u8 owner ;
};
#line 317  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_type.h"
struct ice_bw {
   u32 bw ;
   u16 bw_alloc ;
};
#line 322  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_type.h"
struct ice_bw_type_info {
   unsigned long bw_t_bitmap[1U] ;
   u8 generic ;
   struct ice_bw cir_bw ;
   struct ice_bw eir_bw ;
   u32 shared_bw ;
};
#line 331  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_type.h"
struct ice_q_ctx {
   u16 q_handle ;
   u32 q_teid ;
   struct ice_bw_type_info bw_t_info ;
};
#line 339  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_type.h"
struct ice_sched_vsi_info {
   struct ice_sched_node *vsi_node[8U] ;
   struct ice_sched_node *ag_node[8U] ;
   struct list_head list_entry ;
   u16 max_lanq[8U] ;
};
#line 354  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_type.h"
struct ice_dcb_ets_cfg {
   u8 willing ;
   u8 cbs ;
   u8 maxtcs ;
   u8 prio_table[8U] ;
   u8 tcbwtable[8U] ;
   u8 tsatable[8U] ;
};
#line 364  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_type.h"
struct ice_dcb_pfc_cfg {
   u8 willing ;
   u8 mbc ;
   u8 pfccap ;
   u8 pfcena ;
};
#line 372  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_type.h"
struct ice_dcb_app_priority_table {
   u16 prot_id ;
   u8 priority ;
   u8 selector ;
};
#line 392  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_type.h"
struct ice_dcbx_cfg {
   u32 numapps ;
   u32 tlv_status ;
   struct ice_dcb_ets_cfg etscfg ;
   struct ice_dcb_ets_cfg etsrec ;
   struct ice_dcb_pfc_cfg pfc ;
   struct ice_dcb_app_priority_table app[32U] ;
   u8 dcbx_mode ;
   u8 app_mode ;
};
#line 406 
struct ice_hw;
#line 406  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_type.h"
struct ice_port_info {
   struct ice_sched_node *root ;
   struct ice_hw *hw ;
   u32 last_node_teid ;
   u16 sw_id ;
   u16 pf_vf_num ;
   u8 port_state ;
   u8 lport ;
   u16 dflt_tx_vsi_rule_id ;
   u16 dflt_tx_vsi_num ;
   u16 dflt_rx_vsi_rule_id ;
   u16 dflt_rx_vsi_num ;
   struct ice_fc_info fc ;
   struct ice_mac_info mac ;
   struct ice_phy_info phy ;
   struct mutex sched_lock ;
   struct ice_sched_node *sib_head[8U][9U] ;
   struct list_head rl_prof_list[9U] ;
   struct ice_dcbx_cfg local_dcbx_cfg ;
   struct ice_dcbx_cfg remote_dcbx_cfg ;
   struct ice_dcbx_cfg desired_dcbx_cfg ;
   u8 dcbx_status : 3 ;
   u8 is_sw_lldp : 1 ;
   u8 is_vf : 1 ;
};
#line 439 
struct ice_sw_recipe;
#line 439  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_type.h"
struct ice_switch_info {
   struct list_head vsi_list_map_head ;
   struct ice_sw_recipe *recp_list ;
};
#line 445  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_type.h"
struct ice_fw_log_evnt {
   u8 cfg : 4 ;
   u8 cur : 4 ;
};
#line 450  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_type.h"
struct ice_fw_log_cfg {
   u8 cq_en : 1 ;
   u8 uart_en : 1 ;
   u8 actv_evnts ;
   struct ice_fw_log_evnt evnts[27U] ;
};
#line 463 
struct ice_vsi_ctx;
#line 463  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_type.h"
struct ice_hw {
   u8 *hw_addr ;
   void *back ;
   struct ice_aqc_layer_props *layer_info ;
   struct ice_port_info *port_info ;
   u64 debug_mask ;
   enum ice_mac_type mac_type ;
   u16 device_id ;
   u16 vendor_id ;
   u16 subsystem_device_id ;
   u16 subsystem_vendor_id ;
   u8 revision_id ;
   u8 pf_id ;
   u16 max_burst_size ;
   u16 num_tx_sched_layers ;
   u16 num_tx_sched_phys_layers ;
   u8 flattened_layers ;
   u8 max_cgds ;
   u8 sw_entry_point_layer ;
   u16 max_children[9U] ;
   struct list_head agg_list ;
   struct ice_vsi_ctx *vsi_ctx[768U] ;
   u8 evb_veb ;
   u8 reset_ongoing ;
   struct ice_bus_info bus ;
   struct ice_nvm_info nvm ;
   struct ice_hw_dev_caps dev_caps ;
   struct ice_hw_func_caps func_caps ;
   struct ice_switch_info *switch_info ;
   struct ice_ctl_q_info adminq ;
   struct ice_ctl_q_info mailboxq ;
   u8 api_branch ;
   u8 api_maj_ver ;
   u8 api_min_ver ;
   u8 api_patch ;
   u8 fw_branch ;
   u8 fw_maj_ver ;
   u8 fw_min_ver ;
   u8 fw_patch ;
   u32 fw_build ;
   struct ice_fw_log_cfg fw_log ;
   u8 itr_gran ;
   u8 intrl_gran ;
   u8 ucast_shared ;
   struct ice_pkg_ver active_pkg_ver ;
   u8 active_pkg_name[32U] ;
   u8 active_pkg_in_nvm ;
   enum ice_aq_err pkg_dwnld_status ;
   struct ice_pkg_ver pkg_ver ;
   u8 pkg_name[32U] ;
   struct ice_pkg_ver ice_pkg_ver ;
   u8 ice_pkg_name[32U] ;
   struct ice_seg *seg ;
   u8 *pkg_copy ;
   u32 pkg_size ;
   struct ice_blk_info blk[5U] ;
};
#line 565  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_type.h"
struct ice_eth_stats {
   u64 rx_bytes ;
   u64 rx_unicast ;
   u64 rx_multicast ;
   u64 rx_broadcast ;
   u64 rx_discards ;
   u64 rx_unknown_protocol ;
   u64 tx_bytes ;
   u64 tx_unicast ;
   u64 tx_multicast ;
   u64 tx_broadcast ;
   u64 tx_discards ;
   u64 tx_errors ;
};
#line 581  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_type.h"
struct ice_hw_port_stats {
   struct ice_eth_stats eth ;
   u64 tx_dropped_link_down ;
   u64 crc_errors ;
   u64 illegal_bytes ;
   u64 error_bytes ;
   u64 mac_local_faults ;
   u64 mac_remote_faults ;
   u64 rx_len_errors ;
   u64 link_xon_rx ;
   u64 link_xoff_rx ;
   u64 link_xon_tx ;
   u64 link_xoff_tx ;
   u64 priority_xon_rx[8U] ;
   u64 priority_xoff_rx[8U] ;
   u64 priority_xon_tx[8U] ;
   u64 priority_xoff_tx[8U] ;
   u64 priority_xon_2_xoff[8U] ;
   u64 rx_size_64 ;
   u64 rx_size_127 ;
   u64 rx_size_255 ;
   u64 rx_size_511 ;
   u64 rx_size_1023 ;
   u64 rx_size_1522 ;
   u64 rx_size_big ;
   u64 rx_undersize ;
   u64 rx_fragments ;
   u64 rx_oversize ;
   u64 rx_jabber ;
   u64 tx_size_64 ;
   u64 tx_size_127 ;
   u64 tx_size_255 ;
   u64 tx_size_511 ;
   u64 tx_size_1023 ;
   u64 tx_size_1522 ;
   u64 tx_size_big ;
};
#line 133  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_txrx.h"
union __anonunion_1005 {
   struct sk_buff *skb ;
   void *raw_buf ;
};
#line 133  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_txrx.h"
struct ice_tx_buf {
   struct ice_tx_desc *next_to_watch ;
   union __anonunion_1005 __anonCompField_ice_tx_buf_192 ;
   unsigned int bytecount ;
   unsigned short gso_segs ;
   u32 tx_flags ;
   __u32 len ;
   dma_addr_t dma ;
};
#line 146 
struct ice_ring;
#line 157  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_txrx.h"
struct __anonstruct_1007 {
   struct page *page ;
   unsigned int page_offset ;
   u16 pagecnt_bias ;
};
#line 157  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_txrx.h"
struct __anonstruct_1008 {
   void *addr ;
   u64 handle ;
};
#line 157  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_txrx.h"
union __anonunion_1006 {
   struct __anonstruct_1007 __anonCompField___anonunion_1006_193 ;
   struct __anonstruct_1008 __anonCompField___anonunion_1006_194 ;
};
#line 157  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_txrx.h"
struct ice_rx_buf {
   struct sk_buff *skb ;
   dma_addr_t dma ;
   union __anonunion_1006 __anonCompField_ice_rx_buf_195 ;
};
#line 173  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_txrx.h"
struct ice_q_stats {
   u64 pkts ;
   u64 bytes ;
};
#line 178  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_txrx.h"
struct ice_txq_stats {
   u64 restart_q ;
   u64 tx_busy ;
   u64 tx_linearize ;
   int prev_pkt ;
};
#line 185  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_txrx.h"
struct ice_rxq_stats {
   u64 non_eop_descs ;
   u64 alloc_page_failed ;
   u64 alloc_buf_failed ;
   u64 page_reuse_count ;
};
#line 254 
struct ice_vsi;
#line 254 
struct ice_q_vector;
#line 254  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_txrx.h"
union __anonunion_1009 {
   struct ice_tx_buf *tx_buf ;
   struct ice_rx_buf *rx_buf ;
};
#line 254  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_txrx.h"
union __anonunion_1010 {
   struct ice_txq_stats tx_stats ;
   struct ice_rxq_stats rx_stats ;
};
#line 254  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_txrx.h"
struct ice_ring {
   struct ice_ring *next ;
   void *desc ;
   struct device *dev ;
   struct net_device *netdev ;
   struct ice_vsi *vsi ;
   struct ice_q_vector *q_vector ;
   u8 *tail ;
   union __anonunion_1009 __anonCompField_ice_ring_196 ;
   u16 q_index ;
   u16 q_handle ;
   u8 ring_active : 1 ;
   u16 count ;
   u16 reg_idx ;
   u16 next_to_use ;
   u16 next_to_clean ;
   u16 next_to_alloc ;
   struct ice_q_stats stats ;
   struct u64_stats_sync syncp ;
   union __anonunion_1010 __anonCompField_ice_ring_197 ;
   struct callback_head rcu ;
   struct bpf_prog *xdp_prog ;
   struct xdp_umem *xsk_umem ;
   struct zero_copy_allocator zca ;
   struct xdp_rxq_info xdp_rxq ;
   u8 flags ;
   dma_addr_t dma ;
   unsigned int size ;
   u32 txq_teid ;
   u16 rx_buf_len ;
   u8 dcb_tc ;
} __attribute__((__aligned__(4096)));
#line 328  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_txrx.h"
struct ice_ring_container {
   struct ice_ring *ring ;
   unsigned long next_update ;
   unsigned int total_bytes ;
   unsigned int total_pkts ;
   u16 itr_idx ;
   u16 target_itr ;
   u16 current_itr ;
   u16 itr_setting ;
};
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_switch.h"
struct ice_vsi_ctx {
   u16 vsi_num ;
   u16 vsis_allocd ;
   u16 vsis_unallocated ;
   u16 flags ;
   struct ice_aqc_vsi_props info ;
   struct ice_sched_vsi_info sched ;
   u8 alloc_from_pool ;
   u8 vf_num ;
   u16 num_lan_q_entries[8U] ;
   struct ice_q_ctx *lan_q_ctx[8U] ;
};
#line 123 
struct ice_aqc_recipe_data_elem;
#line 123  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_switch.h"
struct ice_sw_recipe {
   struct list_head l_entry ;
   struct mutex filt_rule_lock ;
   struct list_head filt_rules ;
   struct list_head filt_replay_rules ;
   struct list_head rg_list ;
   struct list_head fv_list ;
   struct ice_aqc_recipe_data_elem *r_buf ;
   u8 recp_count ;
   u8 root_rid ;
   u8 num_profs ;
   u8 *prof_ids ;
   unsigned long r_bitmap[1U] ;
};
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_virtchnl_pf.h"
struct ice_pf;
#line 61 
struct ice_sw;
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_virtchnl_pf.h"
struct ice_vf {
   struct ice_pf *pf ;
   s16 vf_id ;
   u16 lan_vsi_idx ;
   int first_vector_idx ;
   struct ice_sw *vf_sw_id ;
   struct virtchnl_version_info vf_ver ;
   u32 driver_caps ;
   struct virtchnl_ether_addr dflt_lan_addr ;
   unsigned long txq_ena[1U] ;
   unsigned long rxq_ena[1U] ;
   u16 port_vlan_id ;
   u8 pf_set_mac : 1 ;
   u8 trusted : 1 ;
   u8 spoofchk : 1 ;
   u8 link_forced : 1 ;
   u8 link_up : 1 ;
   u16 lan_vsi_num ;
   unsigned int tx_rate ;
   unsigned long vf_states[1U] ;
   u64 num_mdd_events ;
   u64 num_inval_msgs ;
   u64 num_valid_msgs ;
   unsigned long vf_caps ;
   u8 num_req_qs ;
   u16 num_mac ;
   u16 num_vlan ;
   u16 num_vf_qs ;
   u16 num_qs_ena ;
};
#line 143  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice.h"
struct ice_tc_info {
   u16 qoffset ;
   u16 qcount_tx ;
   u16 qcount_rx ;
   u8 netdev_tc ;
};
#line 150  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice.h"
struct ice_tc_cfg {
   u8 numtc ;
   u8 ena_tc ;
   struct ice_tc_info tc_info[8U] ;
};
#line 156  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice.h"
struct ice_res_tracker {
   u16 num_entries ;
   u16 end ;
   u16 list[1U] ;
};
#line 173  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice.h"
struct ice_sw {
   struct ice_pf *pf ;
   u16 sw_id ;
   u16 bridge_mode ;
};
#line 225  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice.h"
struct ice_vsi {
   struct net_device *netdev ;
   struct ice_sw *vsw ;
   struct ice_pf *back ;
   struct ice_port_info *port_info ;
   struct ice_ring **rx_rings ;
   struct ice_ring **tx_rings ;
   struct ice_q_vector **q_vectors ;
   irqreturn_t (*irq_handler)(int , void *) ;
   u64 tx_linearize ;
   unsigned long state[1U] ;
   unsigned long flags[1U] ;
   unsigned int current_netdev_flags ;
   u32 tx_restart ;
   u32 tx_busy ;
   u32 rx_buf_failed ;
   u32 rx_page_failed ;
   int num_q_vectors ;
   int base_vector ;
   enum ice_vsi_type type ;
   u16 vsi_num ;
   u16 idx ;
   s16 vf_id ;
   u16 ethtype ;
   u16 rss_table_size ;
   u16 rss_size ;
   u8 *rss_hkey_user ;
   u8 *rss_lut_user ;
   u8 rss_lut_type ;
   u16 max_frame ;
   u16 rx_buf_len ;
   struct ice_aqc_vsi_props info ;
   struct rtnl_link_stats64 net_stats ;
   struct ice_eth_stats eth_stats ;
   struct ice_eth_stats eth_stats_prev ;
   struct list_head tmp_sync_list ;
   struct list_head tmp_unsync_list ;
   u8 irqs_ready : 1 ;
   u8 current_isup : 1 ;
   u8 stat_offsets_loaded : 1 ;
   u8 vlan_ena : 1 ;
   u8 tx_mapping_mode ;
   u8 rx_mapping_mode ;
   u16 *txq_map ;
   u16 *rxq_map ;
   u16 alloc_txq ;
   u16 num_txq ;
   u16 alloc_rxq ;
   u16 num_rxq ;
   u16 req_txq ;
   u16 req_rxq ;
   u16 num_rx_desc ;
   u16 num_tx_desc ;
   struct ice_tc_cfg tc_cfg ;
   struct bpf_prog *xdp_prog ;
   struct ice_ring **xdp_rings ;
   u16 num_xdp_txq ;
   u8 xdp_mapping_mode ;
   struct xdp_umem **xsk_umems ;
   u16 num_xsk_umems_used ;
   u16 num_xsk_umems ;
} __attribute__((__aligned__(4096)));
#line 303  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice.h"
struct ice_q_vector {
   struct ice_vsi *vsi ;
   u16 v_idx ;
   u16 reg_idx ;
   u8 num_ring_rx ;
   u8 num_ring_tx ;
   u8 itr_countdown ;
   u8 intrl ;
   struct napi_struct napi ;
   struct ice_ring_container rx ;
   struct ice_ring_container tx ;
   cpumask_t affinity_mask ;
   struct irq_affinity_notify affinity_notify ;
   char name[32U] ;
} __attribute__((__aligned__(4096)));
#line 343  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice.h"
struct ice_pf {
   struct pci_dev *pdev ;
   struct msix_entry *msix_entries ;
   struct ice_res_tracker *irq_tracker ;
   u16 sriov_base_vector ;
   struct ice_vsi **vsi ;
   struct ice_sw *first_sw ;
   struct ice_vf *vf ;
   int num_alloc_vfs ;
   u16 num_vfs_supported ;
   u16 num_vf_qps ;
   u16 num_vf_msix ;
   unsigned long state[1U] ;
   unsigned long flags[1U] ;
   unsigned long *avail_txqs ;
   unsigned long *avail_rxqs ;
   unsigned long serv_tmr_period ;
   unsigned long serv_tmr_prev ;
   struct timer_list serv_tmr ;
   struct work_struct serv_task ;
   struct mutex avail_q_mutex ;
   struct mutex sw_mutex ;
   struct mutex tc_mutex ;
   u32 msg_enable ;
   u32 hw_csum_rx_error ;
   u32 oicr_idx ;
   u32 num_avail_sw_msix ;
   u16 max_pf_txqs ;
   u16 max_pf_rxqs ;
   u32 num_lan_msix ;
   u16 num_lan_tx ;
   u16 num_lan_rx ;
   u16 next_vsi ;
   u16 num_alloc_vsi ;
   u16 corer_count ;
   u16 globr_count ;
   u16 empr_count ;
   u16 pfr_count ;
   struct ice_hw_port_stats stats ;
   struct ice_hw_port_stats stats_prev ;
   struct ice_hw hw ;
   u8 stat_prev_loaded : 1 ;
   u16 dcbx_cap ;
   u32 tx_timeout_count ;
   unsigned long tx_timeout_last_recovery ;
   u32 tx_timeout_recovery_level ;
   char int_name[32U] ;
   u32 sw_int_count ;
};
#line 346  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jump_label.h"
struct static_key_true {
   struct static_key key ;
};
#line 350  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jump_label.h"
struct static_key_false {
   struct static_key key ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dynamic_debug.h"
union __anonunion_key_1025 {
   struct static_key_true dd_key_true ;
   struct static_key_false dd_key_false ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dynamic_debug.h"
struct _ddebug {
   char *modname ;
   char *function ;
   char *filename ;
   char *format ;
   unsigned int lineno : 18 ;
   unsigned int flags : 8 ;
   union __anonunion_key_1025 key ;
} __attribute__((__aligned__(8)));
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 404  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice.h"
struct ice_netdev_priv {
   struct ice_vsi *vsi ;
};
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 242  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/xdp_sock.h"
enum ice_status {
    ICE_SUCCESS = 0,
    ICE_ERR_PARAM = -1,
    ICE_ERR_NOT_IMPL = -2,
    ICE_ERR_NOT_READY = -3,
    ICE_ERR_NOT_SUPPORTED = -4,
    ICE_ERR_BAD_PTR = -5,
    ICE_ERR_INVAL_SIZE = -6,
    ICE_ERR_DEVICE_NOT_SUPPORTED = -8,
    ICE_ERR_RESET_FAILED = -9,
    ICE_ERR_FW_API_VER = -10,
    ICE_ERR_NO_MEMORY = -11,
    ICE_ERR_CFG = -12,
    ICE_ERR_OUT_OF_RANGE = -13,
    ICE_ERR_ALREADY_EXISTS = -14,
    ICE_ERR_DOES_NOT_EXIST = -15,
    ICE_ERR_IN_USE = -16,
    ICE_ERR_MAX_LIMIT = -17,
    ICE_ERR_RESET_ONGOING = -18,
    ICE_ERR_NVM_CHECKSUM = -51,
    ICE_ERR_BUF_TOO_SHORT = -52,
    ICE_ERR_NVM_BLANK_MODE = -53,
    ICE_ERR_AQ_ERROR = -100,
    ICE_ERR_AQ_TIMEOUT = -101,
    ICE_ERR_AQ_FULL = -102,
    ICE_ERR_AQ_NO_WORK = -103,
    ICE_ERR_AQ_EMPTY = -104
};
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_adminq_cmd.h"
struct ice_aqc_generic {
   __le32 param0 ;
   __le32 param1 ;
   __le32 addr_high ;
   __le32 addr_low ;
};
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_adminq_cmd.h"
struct ice_aqc_get_ver {
   __le32 rom_ver ;
   __le32 fw_build ;
   u8 fw_branch ;
   u8 fw_major ;
   u8 fw_minor ;
   u8 fw_patch ;
   u8 api_branch ;
   u8 api_major ;
   u8 api_minor ;
   u8 api_patch ;
};
#line 37  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_adminq_cmd.h"
struct ice_aqc_driver_ver {
   u8 major_ver ;
   u8 minor_ver ;
   u8 build_ver ;
   u8 subbuild_ver ;
   u8 reserved[4U] ;
   __le32 addr_high ;
   __le32 addr_low ;
};
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_adminq_cmd.h"
struct ice_aqc_q_shutdown {
   u8 driver_unloading ;
   u8 reserved[15U] ;
};
#line 57  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_adminq_cmd.h"
struct ice_aqc_req_res {
   __le16 res_id ;
   __le16 access_type ;
   __le32 timeout ;
   __le32 res_number ;
   __le16 status ;
   u8 reserved[2U] ;
};
#line 89  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_adminq_cmd.h"
struct ice_aqc_list_caps {
   u8 cmd_flags ;
   u8 pf_index ;
   u8 reserved[2U] ;
   __le32 count ;
   __le32 addr_high ;
   __le32 addr_low ;
};
#line 127  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_adminq_cmd.h"
struct ice_aqc_manage_mac_read {
   __le16 flags ;
   u8 rsvd[2U] ;
   u8 num_addr ;
   u8 rsvd1[3U] ;
   __le32 addr_high ;
   __le32 addr_low ;
};
#line 152  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_adminq_cmd.h"
struct ice_aqc_manage_mac_write {
   u8 rsvd ;
   u8 flags ;
   __be16 sah ;
   __be32 sal ;
   __le32 addr_high ;
   __le32 addr_low ;
};
#line 170  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_adminq_cmd.h"
struct ice_aqc_clear_pxe {
   u8 rx_cnt ;
   u8 reserved[15U] ;
};
#line 177  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_adminq_cmd.h"
struct ice_aqc_get_sw_cfg {
   __le16 flags ;
   __le16 element ;
   __le16 num_elems ;
   __le16 rsvd ;
   __le32 addr_high ;
   __le32 addr_low ;
};
#line 239  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_adminq_cmd.h"
struct ice_aqc_alloc_free_res_cmd {
   __le16 num_entries ;
   u8 reserved[6U] ;
   __le32 addr_high ;
   __le32 addr_low ;
};
#line 271  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_adminq_cmd.h"
struct ice_aqc_add_get_update_free_vsi {
   __le16 vsi_num ;
   __le16 cmd_flags ;
   u8 vf_id ;
   u8 reserved ;
   __le16 vsi_flags ;
   __le32 addr_high ;
   __le32 addr_low ;
};
#line 296  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_adminq_cmd.h"
struct ice_aqc_add_update_free_vsi_resp {
   __le16 vsi_num ;
   __le16 ext_status ;
   __le16 vsi_used ;
   __le16 vsi_free ;
   __le32 addr_high ;
   __le32 addr_low ;
};
#line 463  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_adminq_cmd.h"
struct ice_aqc_sw_rules {
   __le16 num_rules_fltr_entry_index ;
   u8 reserved[6U] ;
   __le32 addr_high ;
   __le32 addr_low ;
};
#line 659  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_adminq_cmd.h"
struct ice_aqc_get_topo {
   u8 port_num ;
   u8 num_branches ;
   __le16 reserved1 ;
   __le32 reserved2 ;
   __le32 addr_high ;
   __le32 addr_low ;
};
#line 676  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_adminq_cmd.h"
struct ice_aqc_sched_elem_cmd {
   __le16 num_elem_req ;
   __le16 num_elem_resp ;
   __le32 reserved ;
   __le32 addr_high ;
   __le32 addr_low ;
};
#line 768  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_adminq_cmd.h"
struct ice_aqc_query_port_ets {
   __le32 port_teid ;
   __le32 reserved ;
   __le32 addr_high ;
   __le32 addr_low ;
};
#line 797  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_adminq_cmd.h"
struct ice_aqc_rl_profile {
   __le16 num_profiles ;
   __le16 num_processed ;
   u8 reserved[4U] ;
   __le32 addr_high ;
   __le32 addr_low ;
};
#line 832  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_adminq_cmd.h"
struct ice_aqc_query_txsched_res {
   u8 reserved[8U] ;
   __le32 addr_high ;
   __le32 addr_low ;
};
#line 868  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_adminq_cmd.h"
struct ice_aqc_get_phy_caps {
   u8 lport_num ;
   u8 reserved ;
   __le16 param0 ;
   __le32 reserved1 ;
   __le32 addr_high ;
   __le32 addr_low ;
};
#line 1028  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_adminq_cmd.h"
struct ice_aqc_set_phy_cfg {
   u8 lport_num ;
   u8 reserved[7U] ;
   __le32 addr_high ;
   __le32 addr_low ;
};
#line 1058  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_adminq_cmd.h"
struct ice_aqc_restart_an {
   u8 lport_num ;
   u8 reserved ;
   u8 cmd_flags ;
   u8 reserved2[13U] ;
};
#line 1068  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_adminq_cmd.h"
struct ice_aqc_get_link_status {
   u8 lport_num ;
   u8 reserved ;
   __le16 cmd_flags ;
   __le32 reserved2 ;
   __le32 addr_high ;
   __le32 addr_low ;
};
#line 1162  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_adminq_cmd.h"
struct ice_aqc_set_event_mask {
   u8 lport_num ;
   u8 reserved[7U] ;
   __le16 event_mask ;
   u8 reserved1[6U] ;
};
#line 1179  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_adminq_cmd.h"
struct ice_aqc_set_mac_lb {
   u8 lb_mode ;
   u8 reserved[15U] ;
};
#line 1187  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_adminq_cmd.h"
struct ice_aqc_set_port_id_led {
   u8 lport_num ;
   u8 lport_num_valid ;
   u8 ident_mode ;
   u8 rsvd[13U] ;
};
#line 1197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_adminq_cmd.h"
struct ice_aqc_sff_eeprom {
   u8 lport_num ;
   u8 lport_num_valid ;
   __le16 i2c_bus_addr ;
   __le16 i2c_mem_addr ;
   __le16 eeprom_page ;
   __le32 addr_high ;
   __le32 addr_low ;
};
#line 1227  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_adminq_cmd.h"
struct ice_aqc_nvm {
   __le16 offset_low ;
   u8 offset_high ;
   u8 cmd_flags ;
   __le16 module_typeid ;
   __le16 length ;
   __le32 addr_high ;
   __le32 addr_low ;
};
#line 1247  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_adminq_cmd.h"
struct ice_aqc_nvm_checksum {
   u8 flags ;
   u8 rsvd ;
   __le16 checksum ;
   u8 rsvd2[12U] ;
};
#line 1263  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_adminq_cmd.h"
struct ice_aqc_pf_vf_msg {
   __le32 id ;
   u32 reserved ;
   __le32 addr_high ;
   __le32 addr_low ;
};
#line 1274  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_adminq_cmd.h"
struct ice_aqc_lldp_get_mib {
   u8 type ;
   u8 reserved1 ;
   __le16 local_len ;
   __le16 remote_len ;
   u8 reserved2[2U] ;
   __le32 addr_high ;
   __le32 addr_low ;
};
#line 1305  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_adminq_cmd.h"
struct ice_aqc_lldp_set_mib_change {
   u8 command ;
   u8 reserved[15U] ;
};
#line 1313  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_adminq_cmd.h"
struct ice_aqc_lldp_stop {
   u8 command ;
   u8 reserved[15U] ;
};
#line 1323  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_adminq_cmd.h"
struct ice_aqc_lldp_start {
   u8 command ;
   u8 reserved[15U] ;
};
#line 1363  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_adminq_cmd.h"
struct ice_aqc_lldp_set_local_mib {
   u8 type ;
   u8 reserved0 ;
   __le16 length ;
   u8 reserved1[4U] ;
   __le32 addr_high ;
   __le32 addr_low ;
};
#line 1382  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_adminq_cmd.h"
struct ice_aqc_lldp_stop_start_specific_agent {
   u8 command ;
   u8 reserved[15U] ;
};
#line 1391  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_adminq_cmd.h"
struct ice_aqc_get_set_rss_key {
   __le16 vsi_id ;
   u8 reserved[6U] ;
   __le32 addr_high ;
   __le32 addr_low ;
};
#line 1413  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_adminq_cmd.h"
struct ice_aqc_get_set_rss_lut {
   __le16 vsi_id ;
   __le16 flags ;
   __le32 reserved ;
   __le32 addr_high ;
   __le32 addr_low ;
};
#line 1448  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_adminq_cmd.h"
struct ice_aqc_add_txqs {
   u8 num_qgrps ;
   u8 reserved[3U] ;
   __le32 reserved1 ;
   __le32 addr_high ;
   __le32 addr_low ;
};
#line 1481  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_adminq_cmd.h"
struct ice_aqc_dis_txqs {
   u8 cmd_type ;
   u8 num_entries ;
   __le16 vmvf_and_timeout ;
   __le32 blocked_cgds ;
   __le32 addr_high ;
   __le32 addr_low ;
};
#line 1532  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_adminq_cmd.h"
struct ice_aqc_fw_logging {
   u8 log_ctrl ;
   u8 rsvd0 ;
   u8 log_ctrl_valid ;
   u8 rsvd1[5U] ;
   __le32 addr_high ;
   __le32 addr_low ;
};
#line 1597  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_adminq_cmd.h"
struct ice_aqc_get_clear_fw_log {
   u8 flags ;
   u8 rsvd1[7U] ;
   __le32 addr_high ;
   __le32 addr_low ;
};
#line 1608  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_adminq_cmd.h"
struct ice_aqc_download_pkg {
   u8 flags ;
   u8 reserved[3U] ;
   __le32 reserved1 ;
   __le32 addr_high ;
   __le32 addr_low ;
};
#line 1673  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_adminq_cmd.h"
union __anonunion_params_3020 {
   u8 raw[16U] ;
   struct ice_aqc_generic generic ;
   struct ice_aqc_get_ver get_ver ;
   struct ice_aqc_driver_ver driver_ver ;
   struct ice_aqc_q_shutdown q_shutdown ;
   struct ice_aqc_req_res res_owner ;
   struct ice_aqc_manage_mac_read mac_read ;
   struct ice_aqc_manage_mac_write mac_write ;
   struct ice_aqc_clear_pxe clear_pxe ;
   struct ice_aqc_list_caps get_cap ;
   struct ice_aqc_get_phy_caps get_phy ;
   struct ice_aqc_set_phy_cfg set_phy ;
   struct ice_aqc_restart_an restart_an ;
   struct ice_aqc_sff_eeprom read_write_sff_param ;
   struct ice_aqc_set_port_id_led set_port_id_led ;
   struct ice_aqc_get_sw_cfg get_sw_conf ;
   struct ice_aqc_sw_rules sw_rules ;
   struct ice_aqc_get_topo get_topo ;
   struct ice_aqc_sched_elem_cmd sched_elem_cmd ;
   struct ice_aqc_query_txsched_res query_sched_res ;
   struct ice_aqc_query_port_ets port_ets ;
   struct ice_aqc_rl_profile rl_profile ;
   struct ice_aqc_nvm nvm ;
   struct ice_aqc_nvm_checksum nvm_checksum ;
   struct ice_aqc_pf_vf_msg virt ;
   struct ice_aqc_lldp_get_mib lldp_get_mib ;
   struct ice_aqc_lldp_set_mib_change lldp_set_event ;
   struct ice_aqc_lldp_stop lldp_stop ;
   struct ice_aqc_lldp_start lldp_start ;
   struct ice_aqc_lldp_set_local_mib lldp_set_mib ;
   struct ice_aqc_lldp_stop_start_specific_agent lldp_agent_ctrl ;
   struct ice_aqc_get_set_rss_lut get_set_rss_lut ;
   struct ice_aqc_get_set_rss_key get_set_rss_key ;
   struct ice_aqc_add_txqs add_txqs ;
   struct ice_aqc_dis_txqs dis_txqs ;
   struct ice_aqc_add_get_update_free_vsi vsi_cmd ;
   struct ice_aqc_add_update_free_vsi_resp add_update_free_vsi_res ;
   struct ice_aqc_fw_logging fw_logging ;
   struct ice_aqc_get_clear_fw_log get_clear_fw_log ;
   struct ice_aqc_download_pkg download_pkg ;
   struct ice_aqc_set_mac_lb set_mac_lb ;
   struct ice_aqc_alloc_free_res_cmd sw_res_ctrl ;
   struct ice_aqc_set_event_mask set_event_mask ;
   struct ice_aqc_get_link_status get_link_status ;
};
#line 1673  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_adminq_cmd.h"
struct ice_aq_desc {
   __le16 flags ;
   __le16 opcode ;
   __le16 datalen ;
   __le16 retval ;
   __le32 cookie_high ;
   __le32 cookie_low ;
   union __anonunion_params_3020 params ;
};
#line 66  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_controlq.h"
struct ice_sq_cd {
   struct ice_aq_desc *wb_desc ;
};
#line 73  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_controlq.h"
struct ice_rq_event_info {
   struct ice_aq_desc desc ;
   u16 msg_len ;
   u16 buf_len ;
   u8 *msg_buf ;
};
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 41  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netprio_cgroup.h"
enum xdp_mem_type {
    MEM_TYPE_PAGE_SHARED = 0,
    MEM_TYPE_PAGE_ORDER0 = 1,
    MEM_TYPE_PAGE_POOL = 2,
    MEM_TYPE_ZERO_COPY = 3,
    MEM_TYPE_MAX = 4
};
#line 1459  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_adminq_cmd.h"
struct ice_aqc_add_txqs_perq {
   __le16 txq_id ;
   u8 rsvd[2U] ;
   __le32 q_teid ;
   u8 txq_ctx[22U] ;
   u8 rsvd2[2U] ;
   struct ice_aqc_txsched_elem info ;
};
#line 1473  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_adminq_cmd.h"
struct ice_aqc_add_tx_qgrp {
   __le32 parent_teid ;
   u8 num_txqs ;
   u8 rsvd[3U] ;
   struct ice_aqc_add_txqs_perq txqs[1U] ;
};
#line 270  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_lan_tx_rx.h"
struct ice_rlan_ctx {
   u16 head ;
   u16 cpuid ;
   u64 base ;
   u16 qlen ;
   u16 dbuf ;
   u16 hbuf ;
   u8 dtype ;
   u8 dsize ;
   u8 crcstrip ;
   u8 l2tsel ;
   u8 hsplit_0 ;
   u8 hsplit_1 ;
   u8 showiv ;
   u32 rxmax ;
   u8 tphrdesc_ena ;
   u8 tphwdesc_ena ;
   u8 tphdata_ena ;
   u8 tphhead_ena ;
   u16 lrxqthresh ;
   u8 prefena ;
};
#line 296  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_lan_tx_rx.h"
struct ice_ctx_ele {
   u16 offset ;
   u16 size_of ;
   u16 width ;
   u16 lsb ;
};
#line 418  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_lan_tx_rx.h"
struct ice_tlan_ctx {
   u64 base ;
   u8 port_num ;
   u16 cgd_num ;
   u8 pf_num ;
   u16 vmvf_num ;
   u8 vmvf_type ;
   u16 src_vsi ;
   u8 tsyn_ena ;
   u8 internal_usage_flag ;
   u8 alt_vlan ;
   u16 cpuid ;
   u8 wb_mode ;
   u8 tphrd_desc ;
   u8 tphrd ;
   u8 tphwr_desc ;
   u16 cmpq_id ;
   u16 qnum_in_func ;
   u8 itr_notification_mode ;
   u8 adjust_prof_id ;
   u32 qlen ;
   u8 quanta_prof_idx ;
   u8 tso_ena ;
   u16 tso_qnum ;
   u8 legacy_int ;
   u8 drop_ena ;
   u8 cache_prof_idx ;
   u8 pkt_shaper_prof_idx ;
   u8 int_q_state ;
};
#line 142  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_type.h"
enum ice_disq_rst_src {
    ICE_NO_RESET = 0,
    ICE_VM_RESET = 1,
    ICE_VF_RESET = 2
};
#line 135  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice.h"
struct ice_txq_meta {
   u32 q_teid ;
   u16 q_id ;
   u16 q_handle ;
   u16 vsi_idx ;
   u8 tc ;
};
#line 162  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice.h"
struct ice_qs_cfg {
   struct mutex *qs_mutex ;
   unsigned long *pf_map ;
   unsigned long pf_map_size ;
   unsigned int q_count ;
   unsigned int scatter_count ;
   u16 *vsi_map ;
   u16 vsi_map_offset ;
   u8 mapping_mode ;
};
#line 35  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef __u16 __sum16;
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/atomic.h"
union __anonunion___u_4131 {
   int __val ;
   char __c[1U] ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/nodemask.h"
enum node_states {
    N_POSSIBLE = 0,
    N_ONLINE = 1,
    N_NORMAL_MEMORY = 2,
    N_HIGH_MEMORY = 2,
    N_MEMORY = 3,
    N_CPU = 4,
    NR_NODE_STATES = 5
};
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 174  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/page-flags.h"
union __anonunion___u_4211 {
   unsigned long __val ;
   char __c[1U] ;
};
#line 92  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dynamic_queue_limits.h"
union __anonunion___u_4500 {
   unsigned int __val ;
   char __c[1U] ;
};
#line 92  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dynamic_queue_limits.h"
union __anonunion___u_4502 {
   unsigned int __val ;
   char __c[1U] ;
};
#line 313  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
typedef struct bio_vec skb_frag_t;
#line 416  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
struct skb_shared_hwtstamps {
   ktime_t hwtstamp ;
};
#line 510  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
struct skb_shared_info {
   __u8 __unused ;
   __u8 meta_len ;
   __u8 nr_frags ;
   __u8 tx_flags ;
   unsigned short gso_size ;
   unsigned short gso_segs ;
   struct sk_buff *frag_list ;
   struct skb_shared_hwtstamps hwtstamps ;
   unsigned int gso_type ;
   u32 tskey ;
   atomic_t dataref ;
   void *destructor_arg ;
   skb_frag_t frags[17U] ;
};
#line 3610  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
enum skb_free_reason {
    SKB_REASON_CONSUMED = 0,
    SKB_REASON_DROPPED = 1
};
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/if_vlan.h"
struct vlan_hdr {
   __be16 h_vlan_TCI ;
   __be16 h_vlan_encapsulated_proto ;
};
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/tracepoint.h"
struct trace_eval_map {
   char *system ;
   char *eval_string ;
   unsigned long eval_value ;
};
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/trace/events/xdp.h"
union __anonunion___u_4859 {
   struct tracepoint_func *__val ;
   char __c[1U] ;
};
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/trace/events/xdp.h"
union __anonunion___u_4861 {
   struct tracepoint_func *__val ;
   char __c[1U] ;
};
#line 86  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ip.h"
struct iphdr {
   __u8 ihl : 4 ;
   __u8 version : 4 ;
   __u8 tos ;
   __be16 tot_len ;
   __be16 id ;
   __be16 frag_off ;
   __u8 ttl ;
   __u8 protocol ;
   __sum16 check ;
   __be32 saddr ;
   __be32 daddr ;
};
#line 116  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ipv6.h"
struct ipv6hdr {
   __u8 priority : 4 ;
   __u8 version : 4 ;
   __u8 flow_lbl[3U] ;
   __be16 payload_len ;
   __u8 nexthdr ;
   __u8 hop_limit ;
   struct in6_addr saddr ;
   struct in6_addr daddr ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/tcp.h"
struct tcphdr {
   __be16 source ;
   __be16 dest ;
   __be32 seq ;
   __be32 ack_seq ;
   __u16 res1 : 4 ;
   __u16 doff : 4 ;
   __u16 fin : 1 ;
   __u16 syn : 1 ;
   __u16 rst : 1 ;
   __u16 psh : 1 ;
   __u16 ack : 1 ;
   __u16 urg : 1 ;
   __u16 ece : 1 ;
   __u16 cwr : 1 ;
   __be16 window ;
   __sum16 check ;
   __be16 urg_ptr ;
};
#line 380  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_lan_tx_rx.h"
struct ice_tx_ctx_desc {
   __le32 tunneling_params ;
   __le16 l2tag2 ;
   __le16 rsvd ;
   __le64 qw1 ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_txrx.h"
struct ice_tx_offload_params {
   u64 cd_qw1 ;
   struct ice_ring *tx_ring ;
   u32 td_cmd ;
   u32 td_offset ;
   u32 td_l2tag1 ;
   u32 cd_tunnel_params ;
   u16 cd_l2tag2 ;
   u8 header_len ;
};
#line 395  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_txrx.c"
union __anonunion___u_5131 {
   struct bpf_prog *__val ;
   char __c[1U] ;
};
#line 1043  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_txrx.c"
union __anonunion___u_5133 {
   struct bpf_prog *__val ;
   char __c[1U] ;
};
#line 1771  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_txrx.c"
union __anonunion_ip_5136 {
   struct iphdr *v4 ;
   struct ipv6hdr *v6 ;
   unsigned char *hdr ;
};
#line 1776  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_txrx.c"
union __anonunion_l4_5137 {
   struct tcphdr *tcp ;
   unsigned char *hdr ;
};
#line 1921  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_txrx.c"
union __anonunion_ip_5140 {
   struct iphdr *v4 ;
   struct ipv6hdr *v6 ;
   unsigned char *hdr ;
};
#line 1926  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_txrx.c"
union __anonunion_l4_5141 {
   struct tcphdr *tcp ;
   unsigned char *hdr ;
};
#line 66  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
union __anonunion___u_5154 {
   struct list_head *__val ;
   char __c[1U] ;
};
#line 106  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
union __anonunion___u_5156 {
   struct list_head *__val ;
   char __c[1U] ;
};
#line 268  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
union __anonunion___u_5158 {
   struct list_head *__val ;
   char __c[1U] ;
};
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 194  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_adminq_cmd.h"
struct ice_aqc_get_sw_cfg_resp_elem {
   __le16 vsi_port_num ;
   __le16 swid ;
   __le16 pf_vf_num ;
};
#line 222  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_adminq_cmd.h"
struct ice_aqc_get_sw_cfg_resp {
   struct ice_aqc_get_sw_cfg_resp_elem elements[1U] ;
};
#line 247  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_adminq_cmd.h"
union __anonunion_e_6126 {
   __le16 sw_resp ;
   __le16 flu_resp ;
};
#line 247  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_adminq_cmd.h"
struct ice_aqc_res_elem {
   union __anonunion_e_6126 e ;
};
#line 255  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_adminq_cmd.h"
struct ice_aqc_alloc_free_res_elem {
   __le16 res_type ;
   __le16 num_elems ;
   struct ice_aqc_res_elem elem[1U] ;
};
#line 480  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_adminq_cmd.h"
struct ice_sw_rule_lkup_rx_tx {
   __le16 recipe_id ;
   __le16 src ;
   __le32 act ;
   __le16 index ;
   __le16 hdr_len ;
   u8 hdr[1U] ;
} __attribute__((__packed__));
#line 564  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_adminq_cmd.h"
struct ice_sw_rule_lg_act {
   __le16 index ;
   __le16 size ;
   __le32 act[1U] ;
};
#line 624  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_adminq_cmd.h"
struct ice_sw_rule_vsi_list {
   __le16 index ;
   __le16 number_vsi ;
   __le16 vsi[1U] ;
};
#line 631  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_adminq_cmd.h"
struct ice_sw_rule_vsi_list_query {
   __le16 index ;
   unsigned long vsi_list[12U] ;
} __attribute__((__packed__));
#line 640  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_adminq_cmd.h"
union __anonunion_pdata_6127 {
   struct ice_sw_rule_lkup_rx_tx lkup_tx_rx ;
   struct ice_sw_rule_lg_act lg_act ;
   struct ice_sw_rule_vsi_list vsi_list ;
   struct ice_sw_rule_vsi_list_query vsi_list_query ;
} __attribute__((__packed__));
#line 640  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_adminq_cmd.h"
struct ice_aqc_sw_rules_elem {
   __le16 type ;
   __le16 status ;
   union __anonunion_pdata_6127 pdata ;
};
#line 1743 
enum ice_adminq_opc {
    ice_aqc_opc_get_ver = 1,
    ice_aqc_opc_driver_ver = 2,
    ice_aqc_opc_q_shutdown = 3,
    ice_aqc_opc_req_res = 8,
    ice_aqc_opc_release_res = 9,
    ice_aqc_opc_list_func_caps = 10,
    ice_aqc_opc_list_dev_caps = 11,
    ice_aqc_opc_manage_mac_read = 263,
    ice_aqc_opc_manage_mac_write = 264,
    ice_aqc_opc_clear_pxe_mode = 272,
    ice_aqc_opc_get_sw_cfg = 512,
    ice_aqc_opc_alloc_res = 520,
    ice_aqc_opc_free_res = 521,
    ice_aqc_opc_add_vsi = 528,
    ice_aqc_opc_update_vsi = 529,
    ice_aqc_opc_free_vsi = 531,
    ice_aqc_opc_add_sw_rules = 672,
    ice_aqc_opc_update_sw_rules = 673,
    ice_aqc_opc_remove_sw_rules = 674,
    ice_aqc_opc_clear_pf_cfg = 676,
    ice_aqc_opc_get_dflt_topo = 1024,
    ice_aqc_opc_add_sched_elems = 1025,
    ice_aqc_opc_cfg_sched_elems = 1027,
    ice_aqc_opc_get_sched_elems = 1028,
    ice_aqc_opc_suspend_sched_elems = 1033,
    ice_aqc_opc_resume_sched_elems = 1034,
    ice_aqc_opc_query_port_ets = 1038,
    ice_aqc_opc_delete_sched_elems = 1039,
    ice_aqc_opc_add_rl_profiles = 1040,
    ice_aqc_opc_query_sched_res = 1042,
    ice_aqc_opc_remove_rl_profiles = 1045,
    ice_aqc_opc_get_phy_caps = 1536,
    ice_aqc_opc_set_phy_cfg = 1537,
    ice_aqc_opc_restart_an = 1541,
    ice_aqc_opc_get_link_status = 1543,
    ice_aqc_opc_set_event_mask = 1555,
    ice_aqc_opc_set_mac_lb = 1568,
    ice_aqc_opc_set_port_id_led = 1769,
    ice_aqc_opc_sff_eeprom = 1774,
    ice_aqc_opc_nvm_read = 1793,
    ice_aqc_opc_nvm_checksum = 1798,
    ice_mbx_opc_send_msg_to_pf = 2049,
    ice_mbx_opc_send_msg_to_vf = 2050,
    ice_aqc_opc_lldp_get_mib = 2560,
    ice_aqc_opc_lldp_set_mib_change = 2561,
    ice_aqc_opc_lldp_stop = 2565,
    ice_aqc_opc_lldp_start = 2566,
    ice_aqc_opc_get_cee_dcb_cfg = 2567,
    ice_aqc_opc_lldp_set_local_mib = 2568,
    ice_aqc_opc_lldp_stop_start_specific_agent = 2569,
    ice_aqc_opc_set_rss_key = 2818,
    ice_aqc_opc_set_rss_lut = 2819,
    ice_aqc_opc_get_rss_key = 2820,
    ice_aqc_opc_get_rss_lut = 2821,
    ice_aqc_opc_add_txqs = 3120,
    ice_aqc_opc_dis_txqs = 3121,
    ice_aqc_opc_download_pkg = 3136,
    ice_aqc_opc_get_pkg_info_list = 3139,
    ice_aqc_opc_fw_logging = 65289,
    ice_aqc_opc_fw_logging_info = 65296
};
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_switch.h"
enum ice_sw_fwd_act_type {
    ICE_FWD_TO_VSI = 0,
    ICE_FWD_TO_VSI_LIST = 1,
    ICE_FWD_TO_Q = 2,
    ICE_FWD_TO_QGRP = 3,
    ICE_DROP_PACKET = 4,
    ICE_INVAL_ACT = 5
};
#line 39 
enum ice_sw_lkup_type {
    ICE_SW_LKUP_ETHERTYPE = 0,
    ICE_SW_LKUP_MAC = 1,
    ICE_SW_LKUP_MAC_VLAN = 2,
    ICE_SW_LKUP_PROMISC = 3,
    ICE_SW_LKUP_VLAN = 4,
    ICE_SW_LKUP_DFLT = 5,
    ICE_SW_LKUP_ETHERTYPE_MAC = 8,
    ICE_SW_LKUP_PROMISC_VLAN = 9,
    ICE_SW_LKUP_LAST = 10
};
#line 51 
enum ice_src_id {
    ICE_SRC_ID_UNKNOWN = 0,
    ICE_SRC_ID_VSI = 1,
    ICE_SRC_ID_QUEUE = 2,
    ICE_SRC_ID_LPORT = 3
};
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_switch.h"
struct __anonstruct_mac_6153 {
   u8 mac_addr[6U] ;
};
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_switch.h"
struct __anonstruct_mac_vlan_6154 {
   u8 mac_addr[6U] ;
   u16 vlan_id ;
};
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_switch.h"
struct __anonstruct_vlan_6155 {
   u16 vlan_id ;
};
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_switch.h"
struct __anonstruct_ethertype_mac_6156 {
   u16 ethertype ;
   u8 mac_addr[6U] ;
};
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_switch.h"
union __anonunion_l_data_6152 {
   struct __anonstruct_mac_6153 mac ;
   struct __anonstruct_mac_vlan_6154 mac_vlan ;
   struct __anonstruct_vlan_6155 vlan ;
   struct __anonstruct_ethertype_mac_6156 ethertype_mac ;
};
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_switch.h"
union __anonunion_fwd_id_6157 {
   u16 q_id : 11 ;
   u16 hw_vsi_id : 10 ;
   u16 vsi_list_id : 10 ;
};
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_switch.h"
struct ice_fltr_info {
   enum ice_sw_lkup_type lkup_type ;
   enum ice_sw_fwd_act_type fltr_act ;
   u16 fltr_rule_id ;
   u16 flag ;
   u16 src ;
   enum ice_src_id src_id ;
   union __anonunion_l_data_6152 l_data ;
   union __anonunion_fwd_id_6157 fwd_id ;
   u16 vsi_handle ;
   u8 qgrp_size ;
   u8 lb_en ;
   u8 lan_en ;
};
#line 150  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_switch.h"
struct ice_vsi_list_map_info {
   struct list_head list_entry ;
   unsigned long vsi_map[12U] ;
   u16 vsi_list_id ;
   u16 ref_cnt ;
};
#line 158  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_switch.h"
struct ice_fltr_list_entry {
   struct list_head list_entry ;
   enum ice_status status ;
   struct ice_fltr_info fltr_info ;
};
#line 170  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_switch.h"
struct ice_fltr_mgmt_list_entry {
   struct ice_vsi_list_map_info *vsi_list_info ;
   u16 vsi_count ;
   u16 lg_act_idx ;
   u16 sw_marker_id ;
   struct list_head list_entry ;
   struct ice_fltr_info fltr_info ;
   u8 counter_index ;
};
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 550  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
union __anonunion___u_6830 {
   unsigned long __val ;
   char __c[1U] ;
};
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/trace/events/xdp.h"
union __anonunion___u_6952 {
   struct tracepoint_func *__val ;
   char __c[1U] ;
};
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/trace/events/xdp.h"
union __anonunion___u_6954 {
   struct tracepoint_func *__val ;
   char __c[1U] ;
};
#line 100  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if_xdp.h"
struct xdp_desc {
   __u64 addr ;
   __u32 len ;
   __u32 options ;
};
#line 797  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_xsk.c"
union __anonunion___u_7224 {
   struct bpf_prog *__val ;
   char __c[1U] ;
};
#line 66  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
union __anonunion___u_7237 {
   struct list_head *__val ;
   char __c[1U] ;
};
#line 106  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
union __anonunion___u_7239 {
   struct list_head *__val ;
   char __c[1U] ;
};
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/atomic.h"
union __anonunion___u_7291 {
   int __val ;
   char __c[1U] ;
};
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 1407  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_adminq_cmd.h"
struct ice_aqc_get_set_rss_keys {
   u8 standard_rss_key[40U] ;
   u8 extended_hash_key[12U] ;
};
#line 213  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_type.h"
enum ice_reset_req {
    ICE_RESET_POR = 0,
    ICE_RESET_INVAL = 0,
    ICE_RESET_CORER = 1,
    ICE_RESET_GLOBR = 2,
    ICE_RESET_EMPR = 3,
    ICE_RESET_PFR = 4
};
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/atomic.h"
union __anonunion___u_8307 {
   int __val ;
   char __c[1U] ;
};
#line 31  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/device.h"
struct firmware;
#line 196  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/firmware.h"
struct firmware {
   size_t size ;
   u8 *data ;
   struct page **pages ;
   void *priv ;
};
#line 965  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_adminq_cmd.h"
struct __anonstruct_qual_modules_9227 {
   u8 v_oui[3U] ;
   u8 rsvd3 ;
   u8 v_part[16U] ;
   __le32 v_rev ;
   __le64 rsvd4 ;
};
#line 965  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_adminq_cmd.h"
struct ice_aqc_get_phy_caps_data {
   __le64 phy_type_low ;
   __le64 phy_type_high ;
   u8 caps ;
   u8 low_power_ctrl ;
   __le16 eee_cap ;
   __le16 eeer_value ;
   u8 phy_id_oui[4U] ;
   u8 phy_fw_ver[8U] ;
   u8 link_fec_options ;
   u8 rsvd1 ;
   u8 extended_compliance_code ;
   u8 module_type[3U] ;
   u8 qualified_module_count ;
   u8 rsvd2[7U] ;
   struct __anonstruct_qual_modules_9227 qual_modules[16U] ;
};
#line 1036  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_adminq_cmd.h"
struct ice_aqc_set_phy_cfg_data {
   __le64 phy_type_low ;
   __le64 phy_type_high ;
   u8 caps ;
   u8 low_power_ctrl ;
   __le16 eee_cap ;
   __le16 eeer_value ;
   u8 link_fec_opt ;
   u8 rsvd1 ;
};
#line 1084  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_adminq_cmd.h"
struct ice_aqc_get_link_status_data {
   u8 topo_media_conflict ;
   u8 reserved1 ;
   u8 link_info ;
   u8 an_info ;
   u8 ext_info ;
   u8 reserved2 ;
   __le16 max_frame_size ;
   u8 cfg ;
   u8 power_desc ;
   __le16 link_speed ;
   __le32 reserved3 ;
   __le64 phy_type_low ;
   __le64 phy_type_high ;
};
#line 71  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_type.h"
struct ice_driver_ver {
   u8 major_ver ;
   u8 minor_ver ;
   u8 build_ver ;
   u8 subbuild_ver ;
   u8 driver_string[32U] ;
};
#line 281 
enum ice_rl_type {
    ICE_UNKNOWN_BW = 0,
    ICE_MIN_BW = 1,
    ICE_MAX_BW = 2,
    ICE_SHARED_BW = 3
};
#line 1735  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_main.c"
union __anonunion___u_9258 {
   struct bpf_prog *__val ;
   char __c[1U] ;
};
#line 4081  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_main.c"
union __anonunion___u_9260 {
   struct ice_ring *__val ;
   char __c[1U] ;
};
#line 4092  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_main.c"
union __anonunion___u_9262 {
   struct ice_ring *__val ;
   char __c[1U] ;
};
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/atomic.h"
union __anonunion___u_10345 {
   int __val ;
   char __c[1U] ;
};
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/if_vlan.h"
struct vlan_ethhdr {
   unsigned char h_dest[6U] ;
   unsigned char h_source[6U] ;
   __be16 h_vlan_proto ;
   __be16 h_vlan_TCI ;
   __be16 h_vlan_encapsulated_proto ;
};
#line 775  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_adminq_cmd.h"
struct ice_aqc_port_ets_elem {
   u8 tc_valid_bits ;
   u8 reserved[3U] ;
   __le32 up2tc ;
   u8 tc_bw_share[8U] ;
   __le32 port_eir_prof_id ;
   __le32 port_cir_prof_id ;
   __le32 tc_node_prio ;
   u8 reserved1[4U] ;
   __le32 tc_node_teid[8U] ;
};
#line 106  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
union __anonunion___u_11309 {
   struct list_head *__val ;
   char __c[1U] ;
};
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 99  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_adminq_cmd.h"
struct ice_aqc_list_caps_elem {
   __le16 cap ;
   u8 major_ver ;
   u8 minor_ver ;
   __le32 number ;
   __le32 logical_id ;
   __le32 phys_id ;
   __le64 rsvd1 ;
   __le64 rsvd2 ;
};
#line 143  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_adminq_cmd.h"
struct ice_aqc_manage_mac_read_resp {
   u8 lport_num ;
   u8 addr_type ;
   u8 mac_addr[6U] ;
};
#line 749  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_adminq_cmd.h"
struct ice_aqc_get_elem {
   struct ice_aqc_txsched_elem_data generic[1U] ;
};
#line 1510  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_adminq_cmd.h"
struct ice_aqc_dis_txq_item {
   __le32 parent_teid ;
   u8 num_qs ;
   u8 rsvd ;
   __le16 q_id[1U] ;
};
#line 1580  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_adminq_cmd.h"
struct ice_aqc_fw_logging_data {
   __le16 entry[1U] ;
};
#line 184  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_lan_tx_rx.h"
enum ice_rxdid {
    ICE_RXDID_LEGACY_0 = 0,
    ICE_RXDID_LEGACY_1 = 1,
    ICE_RXDID_FLEX_NIC = 2,
    ICE_RXDID_FLEX_NIC_2 = 6,
    ICE_RXDID_HW = 7,
    ICE_RXDID_LAST = 63
};
#line 193 
enum ice_flex_rx_mdid {
    ICE_RX_MDID_FLOW_ID_LOWER = 5,
    ICE_RX_MDID_FLOW_ID_HIGH = 6,
    ICE_RX_MDID_SRC_VSI = 19,
    ICE_RX_MDID_HASH_LOW = 56,
    ICE_RX_MDID_HASH_HIGH = 57
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_type.h"
enum ice_aq_res_ids {
    ICE_NVM_RES_ID = 1,
    ICE_SPD_RES_ID = 2,
    ICE_CHANGE_LOCK_RES_ID = 3,
    ICE_GLOBAL_CFG_LOCK_RES_ID = 4
};
#line 39 
enum ice_aq_res_access_type {
    ICE_RES_READ = 1,
    ICE_RES_WRITE = 2
};
#line 87 
enum ice_fec_mode {
    ICE_FEC_NONE = 0,
    ICE_FEC_RS = 1,
    ICE_FEC_BASER = 2,
    ICE_FEC_AUTO = 3
};
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/atomic.h"
union __anonunion___u_13393 {
   int __val ;
   char __c[1U] ;
};
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 10  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_ethtool.c"
struct ice_stats {
   char stat_string[32U] ;
   int sizeof_stat ;
   int stat_offset ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_ethtool.c"
struct ice_priv_flag {
   char name[32U] ;
   u32 bitno ;
};
#line 393  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_ethtool.c"
struct ice_diag_reg_test_info {
   u32 address ;
   u32 mask ;
   u32 elem_num ;
   u32 elem_size ;
};
#line 1325  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_ethtool.c"
union __anonunion___u_14359 {
   struct ice_ring *__val ;
   char __c[1U] ;
};
#line 1336  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_ethtool.c"
union __anonunion___u_14361 {
   struct ice_ring *__val ;
   char __c[1U] ;
};
#line 3326 
enum ice_container_type {
    ICE_RX_CONTAINER = 0,
    ICE_TX_CONTAINER = 1
};
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 1617  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_adminq_cmd.h"
struct ice_aqc_download_pkg_resp {
   __le32 error_offset ;
   __le32 error_info ;
   __le32 addr_high ;
   __le32 addr_low ;
};
#line 1642  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_adminq_cmd.h"
struct ice_aqc_get_pkg_info {
   struct ice_pkg_ver ver ;
   char name[32U] ;
   u8 is_in_nvm ;
   u8 is_active ;
   u8 is_active_at_boot ;
   u8 is_modified ;
};
#line 1652  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_adminq_cmd.h"
struct ice_aqc_get_pkg_info_resp {
   __le32 count ;
   struct ice_aqc_get_pkg_info pkg_info[1U] ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_flex_type.h"
struct ice_fv {
   struct ice_fv_word ew[48U] ;
};
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_flex_type.h"
struct ice_pkg_hdr {
   struct ice_pkg_ver format_ver ;
   __le32 seg_count ;
   __le32 seg_offset[1U] ;
};
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_flex_type.h"
struct ice_nvm_table {
   __le32 table_count ;
   __le32 vers[1U] ;
};
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_flex_type.h"
struct ice_buf {
   u8 buf[4096U] ;
};
#line 66  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_flex_type.h"
struct ice_buf_table {
   __le32 buf_count ;
   struct ice_buf buf_array[1U] ;
};
#line 72  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_flex_type.h"
struct ice_global_metadata_seg {
   struct ice_generic_seg_hdr hdr ;
   struct ice_pkg_ver pkg_ver ;
   __le32 track_id ;
   char pkg_name[32U] ;
};
#line 85  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_flex_type.h"
struct ice_section_entry {
   __le32 type ;
   __le16 offset ;
   __le16 size ;
};
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_flex_type.h"
struct ice_buf_hdr {
   __le16 section_count ;
   __le16 data_end ;
   struct ice_section_entry section_entry[1U] ;
};
#line 103 
enum ice_block {
    ICE_BLK_SW = 0,
    ICE_BLK_ACL = 1,
    ICE_BLK_FD = 2,
    ICE_BLK_RSS = 3,
    ICE_BLK_PE = 4,
    ICE_BLK_COUNT = 5
};
#line 171  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_flex_type.h"
struct ice_sw_fv_section {
   __le16 count ;
   __le16 base_offset ;
   struct ice_fv fv[1U] ;
};
#line 219  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_flex_type.h"
struct ice_xlt1_section {
   __le16 count ;
   __le16 offset ;
   u8 value[1U] ;
} __attribute__((__packed__));
#line 225  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_flex_type.h"
struct ice_xlt2_section {
   __le16 count ;
   __le16 offset ;
   __le16 value[1U] ;
};
#line 231  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_flex_type.h"
struct ice_prof_redir_section {
   __le16 count ;
   __le16 offset ;
   u8 redir_value[1U] ;
};
#line 237  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_flex_type.h"
struct ice_pkg_enum {
   struct ice_buf_table *buf_table ;
   u32 buf_idx ;
   u32 type ;
   struct ice_buf_hdr *buf ;
   u32 sect_idx ;
   void *sect ;
   u32 sect_type ;
   u32 entry_idx ;
   void *(*handler)(u32 , void *, u32 , u32 *) ;
};
#line 344  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_flex_type.h"
struct ice_prof_id_section {
   __le16 count ;
   struct ice_prof_tcam_entry entry[1U] ;
} __attribute__((__packed__));
#line 905  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_flex_pipe.c"
struct ice_blk_size_details {
   u16 xlt1 ;
   u16 xlt2 ;
   u16 prof_tcam ;
   u16 prof_id ;
   u8 prof_cdid_bits ;
   u16 prof_redir ;
   u16 es ;
   u16 fvw ;
   u8 overwrite ;
   u8 reverse ;
};
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 73  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ctype.h"
enum virtchnl_status_code {
    VIRTCHNL_STATUS_SUCCESS = 0,
    VIRTCHNL_STATUS_ERR_PARAM = -5,
    VIRTCHNL_STATUS_ERR_NO_MEMORY = -18,
    VIRTCHNL_STATUS_ERR_OPCODE_MISMATCH = -38,
    VIRTCHNL_STATUS_ERR_CQP_COMPL_ERROR = -39,
    VIRTCHNL_STATUS_ERR_INVALID_VF_ID = -40,
    VIRTCHNL_STATUS_ERR_ADMIN_QUEUE_ERROR = -53,
    VIRTCHNL_STATUS_ERR_NOT_SUPPORTED = -64
};
#line 84 
enum virtchnl_link_speed {
    VIRTCHNL_LINK_SPEED_UNKNOWN = 0,
    VIRTCHNL_LINK_SPEED_100MB = 2,
    VIRTCHNL_LINK_SPEED_1GB = 4,
    VIRTCHNL_LINK_SPEED_10GB = 8,
    VIRTCHNL_LINK_SPEED_40GB = 16,
    VIRTCHNL_LINK_SPEED_20GB = 32,
    VIRTCHNL_LINK_SPEED_25GB = 64,
    VIRTCHNL_LINK_SPEED_2_5GB = 1,
    VIRTCHNL_LINK_SPEED_5GB = 128
};
#line 96 
enum virtchnl_rx_hsplit {
    VIRTCHNL_RX_HSPLIT_NO_SPLIT = 0,
    VIRTCHNL_RX_HSPLIT_SPLIT_L2 = 1,
    VIRTCHNL_RX_HSPLIT_SPLIT_IP = 2,
    VIRTCHNL_RX_HSPLIT_SPLIT_TCP_UDP = 4,
    VIRTCHNL_RX_HSPLIT_SPLIT_SCTP = 8
};
#line 104 
enum virtchnl_ops {
    VIRTCHNL_OP_UNKNOWN = 0,
    VIRTCHNL_OP_VERSION = 1,
    VIRTCHNL_OP_RESET_VF = 2,
    VIRTCHNL_OP_GET_VF_RESOURCES = 3,
    VIRTCHNL_OP_CONFIG_TX_QUEUE = 4,
    VIRTCHNL_OP_CONFIG_RX_QUEUE = 5,
    VIRTCHNL_OP_CONFIG_VSI_QUEUES = 6,
    VIRTCHNL_OP_CONFIG_IRQ_MAP = 7,
    VIRTCHNL_OP_ENABLE_QUEUES = 8,
    VIRTCHNL_OP_DISABLE_QUEUES = 9,
    VIRTCHNL_OP_ADD_ETH_ADDR = 10,
    VIRTCHNL_OP_DEL_ETH_ADDR = 11,
    VIRTCHNL_OP_ADD_VLAN = 12,
    VIRTCHNL_OP_DEL_VLAN = 13,
    VIRTCHNL_OP_CONFIG_PROMISCUOUS_MODE = 14,
    VIRTCHNL_OP_GET_STATS = 15,
    VIRTCHNL_OP_RSVD = 16,
    VIRTCHNL_OP_EVENT = 17,
    VIRTCHNL_OP_IWARP = 20,
    VIRTCHNL_OP_CONFIG_IWARP_IRQ_MAP = 21,
    VIRTCHNL_OP_RELEASE_IWARP_IRQ_MAP = 22,
    VIRTCHNL_OP_CONFIG_RSS_KEY = 23,
    VIRTCHNL_OP_CONFIG_RSS_LUT = 24,
    VIRTCHNL_OP_GET_RSS_HENA_CAPS = 25,
    VIRTCHNL_OP_SET_RSS_HENA = 26,
    VIRTCHNL_OP_ENABLE_VLAN_STRIPPING = 27,
    VIRTCHNL_OP_DISABLE_VLAN_STRIPPING = 28,
    VIRTCHNL_OP_REQUEST_QUEUES = 29,
    VIRTCHNL_OP_ENABLE_CHANNELS = 30,
    VIRTCHNL_OP_DISABLE_CHANNELS = 31,
    VIRTCHNL_OP_ADD_CLOUD_FILTER = 32,
    VIRTCHNL_OP_DEL_CLOUD_FILTER = 33
};
#line 190  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/avf/virtchnl.h"
enum virtchnl_vsi_type {
    VIRTCHNL_VSI_TYPE_INVALID = 0,
    VIRTCHNL_VSI_SRIOV = 6
};
#line 221  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/avf/virtchnl.h"
struct virtchnl_vsi_resource {
   u16 vsi_id ;
   u16 num_queue_pairs ;
   enum virtchnl_vsi_type vsi_type ;
   u16 qset_handle ;
   u8 default_mac_addr[6U] ;
};
#line 257  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/avf/virtchnl.h"
struct virtchnl_vf_resource {
   u16 num_vsis ;
   u16 num_queue_pairs ;
   u16 max_vectors ;
   u16 max_mtu ;
   u32 vf_cap_flags ;
   u32 rss_key_size ;
   u32 rss_lut_size ;
   struct virtchnl_vsi_resource vsi_res[1U] ;
};
#line 279  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/avf/virtchnl.h"
struct virtchnl_txq_info {
   u16 vsi_id ;
   u16 queue_id ;
   u16 ring_len ;
   u16 headwb_enabled ;
   u64 dma_ring_addr ;
   u64 dma_headwb_addr ;
};
#line 297  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/avf/virtchnl.h"
struct virtchnl_rxq_info {
   u16 vsi_id ;
   u16 queue_id ;
   u32 ring_len ;
   u16 hdr_size ;
   u16 splithdr_enabled ;
   u32 databuffer_size ;
   u32 max_pkt_size ;
   u32 pad1 ;
   u64 dma_ring_addr ;
   enum virtchnl_rx_hsplit rx_split_pos ;
   u32 pad2 ;
};
#line 320  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/avf/virtchnl.h"
struct virtchnl_queue_pair_info {
   struct virtchnl_txq_info txq ;
   struct virtchnl_rxq_info rxq ;
};
#line 328  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/avf/virtchnl.h"
struct virtchnl_vsi_queue_config_info {
   u16 vsi_id ;
   u16 num_queue_pairs ;
   u32 pad ;
   struct virtchnl_queue_pair_info qpair[1U] ;
};
#line 348  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/avf/virtchnl.h"
struct virtchnl_vf_res_request {
   u16 num_queue_pairs ;
};
#line 359  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/avf/virtchnl.h"
struct virtchnl_vector_map {
   u16 vsi_id ;
   u16 vector_id ;
   u16 rxq_map ;
   u16 txq_map ;
   u16 rxitr_idx ;
   u16 txitr_idx ;
};
#line 370  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/avf/virtchnl.h"
struct virtchnl_irq_map_info {
   u16 num_vectors ;
   struct virtchnl_vector_map vecmap[1U] ;
};
#line 385  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/avf/virtchnl.h"
struct virtchnl_queue_select {
   u16 vsi_id ;
   u16 pad ;
   u32 rx_queues ;
   u32 tx_queues ;
};
#line 413  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/avf/virtchnl.h"
struct virtchnl_ether_addr_list {
   u16 vsi_id ;
   u16 num_elements ;
   struct virtchnl_ether_addr list[1U] ;
};
#line 435  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/avf/virtchnl.h"
struct virtchnl_vlan_filter_list {
   u16 vsi_id ;
   u16 num_elements ;
   u16 vlan_id[1U] ;
};
#line 475  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/avf/virtchnl.h"
struct virtchnl_rss_key {
   u16 vsi_id ;
   u16 key_len ;
   u8 key[1U] ;
};
#line 483  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/avf/virtchnl.h"
struct virtchnl_rss_lut {
   u16 vsi_id ;
   u16 lut_entries ;
   u8 lut[1U] ;
};
#line 511  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/avf/virtchnl.h"
struct virtchnl_channel_info {
   u16 count ;
   u16 offset ;
   u32 pad ;
   u64 max_tx_rate ;
};
#line 520  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/avf/virtchnl.h"
struct virtchnl_tc_info {
   u32 num_tc ;
   u32 pad ;
   struct virtchnl_channel_info list[1U] ;
};
#line 580 
enum virtchnl_event_codes {
    VIRTCHNL_EVENT_UNKNOWN = 0,
    VIRTCHNL_EVENT_LINK_CHANGE = 1,
    VIRTCHNL_EVENT_RESET_IMPENDING = 2,
    VIRTCHNL_EVENT_PF_DRIVER_CLOSE = 3
};
#line 594  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/avf/virtchnl.h"
struct __anonstruct_link_event_16347 {
   enum virtchnl_link_speed link_speed ;
   bool link_status ;
};
#line 594  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/avf/virtchnl.h"
struct __anonstruct_link_event_adv_16348 {
   u32 link_speed ;
   u8 link_status ;
};
#line 594  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/avf/virtchnl.h"
union __anonunion_event_data_16346 {
   struct __anonstruct_link_event_16347 link_event ;
   struct __anonstruct_link_event_adv_16348 link_event_adv ;
};
#line 594  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/avf/virtchnl.h"
struct virtchnl_pf_event {
   enum virtchnl_event_codes event ;
   union __anonunion_event_data_16346 event_data ;
   int severity ;
};
#line 633  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/avf/virtchnl.h"
struct virtchnl_iwarp_qv_info {
   u32 v_idx ;
   u16 ceq_idx ;
   u16 aeq_idx ;
   u8 itr_idx ;
};
#line 642  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/avf/virtchnl.h"
struct virtchnl_iwarp_qvlist_info {
   u32 num_vectors ;
   struct virtchnl_iwarp_qv_info qv_info[1U] ;
};
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 1334  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_adminq_cmd.h"
struct ice_aqc_get_cee_dcb_cfg_resp {
   u8 oper_num_tc ;
   u8 oper_prio_tc[4U] ;
   u8 oper_tc_bw[8U] ;
   u8 oper_pfc_en ;
   __le16 oper_app_prio ;
   __le32 tlv_status ;
   u8 reserved[12U] ;
};
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_dcb.h"
struct ice_lldp_org_tlv {
   __be16 typelen ;
   __be32 ouisubtype ;
   u8 tlvinfo[1U] ;
} __attribute__((__packed__));
#line 93  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_dcb.h"
struct ice_cee_tlv_hdr {
   __be16 typelen ;
   u8 operver ;
   u8 maxver ;
};
#line 105  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_dcb.h"
struct ice_cee_feat_tlv {
   struct ice_cee_tlv_hdr hdr ;
   u8 en_will_err ;
   u8 subtype ;
   u8 tlvinfo[1U] ;
};
#line 115  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_dcb.h"
struct ice_cee_app_prio {
   __be16 protocol ;
   u8 upper_oui_sel ;
   __be16 lower_oui ;
   u8 prio_map ;
} __attribute__((__packed__));
#line 66  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
union __anonunion___u_17422 {
   struct list_head *__val ;
   char __c[1U] ;
};
#line 106  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
union __anonunion___u_17424 {
   struct list_head *__val ;
   char __c[1U] ;
};
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 688  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_adminq_cmd.h"
struct ice_aqc_suspend_resume_elem {
   __le32 teid[1U] ;
};
#line 734  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_adminq_cmd.h"
struct ice_aqc_txsched_topo_grp_info_hdr {
   __le32 parent_teid ;
   __le16 num_elems ;
   __le16 reserved2 ;
};
#line 740  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_adminq_cmd.h"
struct ice_aqc_add_elem {
   struct ice_aqc_txsched_topo_grp_info_hdr hdr ;
   struct ice_aqc_txsched_elem_data generic[1U] ;
};
#line 745  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_adminq_cmd.h"
struct ice_aqc_conf_elem {
   struct ice_aqc_txsched_elem_data generic[1U] ;
};
#line 753  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_adminq_cmd.h"
struct ice_aqc_get_topo_elem {
   struct ice_aqc_txsched_topo_grp_info_hdr hdr ;
   struct ice_aqc_txsched_elem_data generic[9U] ;
};
#line 759  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_adminq_cmd.h"
struct ice_aqc_delete_elem {
   struct ice_aqc_txsched_topo_grp_info_hdr hdr ;
   __le32 teid[1U] ;
};
#line 805  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_adminq_cmd.h"
struct ice_aqc_rl_profile_elem {
   u8 level ;
   u8 flags ;
   __le16 profile_id ;
   __le16 max_burst_size ;
   __le16 rl_multiply ;
   __le16 wake_up_calc ;
   __le16 rl_encode ;
};
#line 824  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_adminq_cmd.h"
struct ice_aqc_rl_profile_generic_elem {
   struct ice_aqc_rl_profile_elem generic[1U] ;
};
#line 838  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_adminq_cmd.h"
struct ice_aqc_generic_sched_props {
   __le16 phys_levels ;
   __le16 logical_levels ;
   u8 flattening_bitmap ;
   u8 max_device_cgds ;
   u8 max_pf_cgds ;
   u8 rsvd0 ;
   __le16 rdma_qsets ;
   u8 rsvd1[22U] ;
};
#line 862  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_adminq_cmd.h"
struct ice_aqc_query_txsched_res_resp {
   struct ice_aqc_generic_sched_props sched_props ;
   struct ice_aqc_layer_props layer_props[9U] ;
};
#line 273  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_type.h"
enum ice_agg_type {
    ICE_AGG_TYPE_UNKNOWN = 0,
    ICE_AGG_TYPE_VSI = 1,
    ICE_AGG_TYPE_AGG = 2,
    ICE_AGG_TYPE_Q = 3,
    ICE_AGG_TYPE_QG = 4
};
#line 35  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_sched.h"
struct ice_aqc_rl_profile_info {
   struct ice_aqc_rl_profile_elem profile ;
   struct list_head list_entry ;
   u32 bw ;
   u16 prof_id_ref ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_sched.h"
struct ice_sched_agg_vsi_info {
   struct list_head list_entry ;
   unsigned long tc_bitmap[1U] ;
   u16 vsi_handle ;
};
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_sched.h"
struct ice_sched_agg_info {
   struct list_head agg_vsi_list ;
   struct list_head list_entry ;
   unsigned long tc_bitmap[1U] ;
   u32 agg_id ;
   enum ice_agg_type agg_type ;
};
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 197 
enum hrtimer_restart;
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/dd.c"
struct device_private {
   void *driver_data ;
};
#line 164  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef unsigned long irq_hw_number_t;
#line 303  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ioport.h"
struct irq_data;
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 244  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/idr.h"
struct ida {
   struct xarray xa ;
};
#line 439  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/property.h"
typedef u32 phandle;
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/of.h"
struct property {
   char *name ;
   int length ;
   void *value ;
   struct property *next ;
   unsigned long _flags ;
   struct bin_attribute attr ;
};
#line 51  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/of.h"
struct device_node {
   char *name ;
   phandle phandle ;
   char *full_name ;
   struct fwnode_handle fwnode ;
   struct property *properties ;
   struct property *deadprops ;
   struct device_node *parent ;
   struct device_node *child ;
   struct device_node *sibling ;
   struct kobject kobj ;
   unsigned long _flags ;
   void *data ;
};
#line 63  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/irqdomain.h"
struct irq_fwspec {
   struct fwnode_handle *fwnode ;
   int param_count ;
   u32 param[16U] ;
};
#line 68 
enum irq_domain_bus_token {
    DOMAIN_BUS_ANY = 0,
    DOMAIN_BUS_WIRED = 1,
    DOMAIN_BUS_GENERIC_MSI = 2,
    DOMAIN_BUS_PCI_MSI = 3,
    DOMAIN_BUS_PLATFORM_MSI = 4,
    DOMAIN_BUS_NEXUS = 5,
    DOMAIN_BUS_IPI = 6,
    DOMAIN_BUS_FSL_MC_MSI = 7,
    DOMAIN_BUS_TI_SCI_INTA_MSI = 8,
    DOMAIN_BUS_WAKEUP = 9
};
#line 104  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/irqdomain.h"
struct irq_domain_ops {
   int (*match)(struct irq_domain *, struct device_node *, enum irq_domain_bus_token ) ;
   int (*select)(struct irq_domain *, struct irq_fwspec *, enum irq_domain_bus_token ) ;
   int (*map)(struct irq_domain *, unsigned int , irq_hw_number_t ) ;
   void (*unmap)(struct irq_domain *, unsigned int ) ;
   int (*xlate)(struct irq_domain *, struct device_node *, u32 *, unsigned int , unsigned long *, unsigned int *) ;
   int (*alloc)(struct irq_domain *, unsigned int , unsigned int , void *) ;
   void (*free)(struct irq_domain *, unsigned int , unsigned int ) ;
   int (*activate)(struct irq_domain *, struct irq_data *, bool ) ;
   void (*deactivate)(struct irq_domain *, struct irq_data *) ;
   int (*translate)(struct irq_domain *, struct irq_fwspec *, unsigned long *, unsigned int *) ;
   void (*debug_show)(struct seq_file *, struct irq_domain *, struct irq_data *, int ) ;
};
#line 132 
struct irq_domain_chip_generic;
#line 161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/irqdomain.h"
struct irq_domain {
   struct list_head link ;
   char *name ;
   struct irq_domain_ops *ops ;
   void *host_data ;
   unsigned int flags ;
   unsigned int mapcount ;
   struct fwnode_handle *fwnode ;
   enum irq_domain_bus_token bus_token ;
   struct irq_domain_chip_generic *gc ;
   struct irq_domain *parent ;
   struct dentry *debugfs_file ;
   irq_hw_number_t hwirq_max ;
   unsigned int revmap_direct_max_irq ;
   unsigned int revmap_size ;
   struct xarray revmap_tree ;
   struct mutex revmap_tree_mutex ;
   unsigned int linear_revmap[] ;
};
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rtmutex.h"
struct rt_mutex {
   raw_spinlock_t wait_lock ;
   struct rb_root_cached waiters ;
   struct task_struct *owner ;
   int save_state ;
   char *name ;
   char *file ;
   int line ;
   void *magic ;
   struct lockdep_map dep_map ;
};
#line 69  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/i2c.h"
struct i2c_msg {
   __u16 addr ;
   __u16 flags ;
   __u16 len ;
   __u8 *buf ;
};
#line 135  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/i2c.h"
union i2c_smbus_data {
   __u8 byte ;
   __u16 word ;
   __u8 block[34U] ;
};
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/i2c.h"
struct i2c_algorithm;
#line 28 
struct i2c_adapter;
#line 29 
struct i2c_client;
#line 33 
enum i2c_slave_event;
#line 33 
enum i2c_slave_event;
#line 314  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/i2c.h"
struct i2c_client {
   unsigned short flags ;
   unsigned short addr ;
   char name[20U] ;
   struct i2c_adapter *adapter ;
   struct device dev ;
   int init_irq ;
   int irq ;
   struct list_head detected ;
   int (*slave_cb)(struct i2c_client *, enum i2c_slave_event , u8 *) ;
};
#line 360 
enum i2c_slave_event {
    I2C_SLAVE_READ_REQUESTED = 0,
    I2C_SLAVE_WRITE_REQUESTED = 1,
    I2C_SLAVE_READ_PROCESSED = 2,
    I2C_SLAVE_WRITE_RECEIVED = 3,
    I2C_SLAVE_STOP = 4
};
#line 527  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/i2c.h"
struct i2c_algorithm {
   int (*master_xfer)(struct i2c_adapter *, struct i2c_msg *, int ) ;
   int (*master_xfer_atomic)(struct i2c_adapter *, struct i2c_msg *, int ) ;
   int (*smbus_xfer)(struct i2c_adapter *, u16 , unsigned short , char , u8 , int , union i2c_smbus_data *) ;
   int (*smbus_xfer_atomic)(struct i2c_adapter *, u16 , unsigned short , char , u8 , int , union i2c_smbus_data *) ;
   u32 (*functionality)(struct i2c_adapter *) ;
   int (*reg_slave)(struct i2c_client *) ;
   int (*unreg_slave)(struct i2c_client *) ;
};
#line 565  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/i2c.h"
struct i2c_lock_operations {
   void (*lock_bus)(struct i2c_adapter *, unsigned int ) ;
   int (*trylock_bus)(struct i2c_adapter *, unsigned int ) ;
   void (*unlock_bus)(struct i2c_adapter *, unsigned int ) ;
};
#line 618 
struct gpio_desc;
#line 618  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/i2c.h"
struct i2c_bus_recovery_info {
   int (*recover_bus)(struct i2c_adapter *) ;
   int (*get_scl)(struct i2c_adapter *) ;
   void (*set_scl)(struct i2c_adapter *, int ) ;
   int (*get_sda)(struct i2c_adapter *) ;
   void (*set_sda)(struct i2c_adapter *, int ) ;
   int (*get_bus_free)(struct i2c_adapter *) ;
   void (*prepare_recovery)(struct i2c_adapter *) ;
   void (*unprepare_recovery)(struct i2c_adapter *) ;
   struct gpio_desc *scl_gpiod ;
   struct gpio_desc *sda_gpiod ;
};
#line 661  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/i2c.h"
struct i2c_adapter_quirks {
   u64 flags ;
   int max_num_msgs ;
   u16 max_write_len ;
   u16 max_read_len ;
   u16 max_comb_1st_msg_len ;
   u16 max_comb_2nd_msg_len ;
};
#line 692  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/i2c.h"
struct i2c_adapter {
   struct module *owner ;
   unsigned int class ;
   struct i2c_algorithm *algo ;
   void *algo_data ;
   struct i2c_lock_operations *lock_ops ;
   struct rt_mutex bus_lock ;
   struct rt_mutex mux_lock ;
   int timeout ;
   int retries ;
   struct device dev ;
   unsigned long locked_flags ;
   int nr ;
   char name[48U] ;
   struct completion dev_released ;
   struct mutex userspace_clients_lock ;
   struct list_head userspace_clients ;
   struct i2c_bus_recovery_info *bus_recovery_info ;
   struct i2c_adapter_quirks *quirks ;
   struct irq_domain *host_notify_domain ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cdev.h"
struct cdev {
   struct kobject kobj ;
   struct module *owner ;
   struct file_operations *ops ;
   struct list_head list ;
   dev_t dev ;
   unsigned int count ;
} __attribute__((__designated_init__));
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-common.h"
struct v4l2_edid {
   __u32 pad ;
   __u32 start_block ;
   __u32 blocks ;
   __u32 reserved[5U] ;
   __u8 *edid ;
};
#line 754 
enum v4l2_priority {
    V4L2_PRIORITY_UNSET = 0,
    V4L2_PRIORITY_BACKGROUND = 1,
    V4L2_PRIORITY_INTERACTIVE = 2,
    V4L2_PRIORITY_RECORD = 3,
    V4L2_PRIORITY_DEFAULT = 2
};
#line 413  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_rect {
   __s32 left ;
   __s32 top ;
   __u32 width ;
   __u32 height ;
};
#line 420  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_fract {
   __u32 numerator ;
   __u32 denominator ;
};
#line 1212  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
typedef __u64 v4l2_std_id;
#line 1394  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_bt_timings {
   __u32 width ;
   __u32 height ;
   __u32 interlaced ;
   __u32 polarities ;
   __u64 pixelclock ;
   __u32 hfrontporch ;
   __u32 hsync ;
   __u32 hbackporch ;
   __u32 vfrontporch ;
   __u32 vsync ;
   __u32 vbackporch ;
   __u32 il_vfrontporch ;
   __u32 il_vsync ;
   __u32 il_vbackporch ;
   __u32 standards ;
   __u32 flags ;
   struct v4l2_fract picture_aspect ;
   __u8 cea861_vic ;
   __u8 hdmi_vic ;
   __u8 reserved[46U] ;
} __attribute__((__packed__));
#line 1517  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
union __anonunion_20205 {
   struct v4l2_bt_timings bt ;
   __u32 reserved[32U] ;
};
#line 1517  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_dv_timings {
   __u32 type ;
   union __anonunion_20205 __anonCompField_v4l2_dv_timings_77 ;
} __attribute__((__packed__));
#line 1536  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_enum_dv_timings {
   __u32 index ;
   __u32 pad ;
   __u32 reserved[2U] ;
   struct v4l2_dv_timings timings ;
};
#line 1554  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_bt_timings_cap {
   __u32 min_width ;
   __u32 max_width ;
   __u32 min_height ;
   __u32 max_height ;
   __u64 min_pixelclock ;
   __u64 max_pixelclock ;
   __u32 standards ;
   __u32 capabilities ;
   __u32 reserved[16U] ;
} __attribute__((__packed__));
#line 1581  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
union __anonunion_20206 {
   struct v4l2_bt_timings_cap bt ;
   __u32 raw_data[32U] ;
};
#line 1581  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_dv_timings_cap {
   __u32 type ;
   __u32 pad ;
   __u32 reserved[2U] ;
   union __anonunion_20206 __anonCompField_v4l2_dv_timings_cap_78 ;
};
#line 1803  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_tuner {
   __u32 index ;
   __u8 name[32U] ;
   __u32 type ;
   __u32 capability ;
   __u32 rangelow ;
   __u32 rangehigh ;
   __u32 rxsubchans ;
   __u32 audmode ;
   __s32 signal ;
   __s32 afc ;
   __u32 reserved[4U] ;
};
#line 1817  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_modulator {
   __u32 index ;
   __u8 name[32U] ;
   __u32 capability ;
   __u32 rangelow ;
   __u32 rangehigh ;
   __u32 txsubchans ;
   __u32 type ;
   __u32 reserved[3U] ;
};
#line 1860  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_frequency {
   __u32 tuner ;
   __u32 type ;
   __u32 frequency ;
   __u32 reserved[8U] ;
};
#line 1871  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_frequency_band {
   __u32 tuner ;
   __u32 type ;
   __u32 index ;
   __u32 capability ;
   __u32 rangelow ;
   __u32 rangehigh ;
   __u32 modulation ;
   __u32 reserved[9U] ;
};
#line 2043  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_vbi_format {
   __u32 sampling_rate ;
   __u32 offset ;
   __u32 samples_per_line ;
   __u32 sample_format ;
   __s32 start[2U] ;
   __u32 count[2U] ;
   __u32 flags ;
   __u32 reserved[2U] ;
};
#line 2071  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_sliced_vbi_format {
   __u16 service_set ;
   __u16 service_lines[2U][24U] ;
   __u32 io_size ;
   __u32 reserved[2U] ;
};
#line 2095  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_sliced_vbi_cap {
   __u16 service_set ;
   __u16 service_lines[2U][24U] ;
   __u32 type ;
   __u32 reserved[3U] ;
};
#line 2106  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_sliced_vbi_data {
   __u32 id ;
   __u32 field ;
   __u32 line ;
   __u32 reserved ;
   __u8 data[48U] ;
};
#line 2350  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_event_subscription {
   __u32 type ;
   __u32 id ;
   __u32 flags ;
   __u32 reserved[5U] ;
};
#line 2375  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
union __anonunion_20222 {
   __u32 addr ;
   char name[32U] ;
};
#line 2375  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_dbg_match {
   __u32 type ;
   union __anonunion_20222 __anonCompField_v4l2_dbg_match_87 ;
} __attribute__((__packed__));
#line 2383  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_dbg_register {
   struct v4l2_dbg_match match ;
   __u32 size ;
   __u64 reg ;
   __u64 val ;
} __attribute__((__packed__));
#line 57  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_device;
#line 57  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_gobj {
   struct media_device *mdev ;
   u32 id ;
   struct list_head list ;
};
#line 72  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_entity_enum {
   unsigned long *bmap ;
   int idx_max ;
};
#line 88 
struct media_entity;
#line 88  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct __anonstruct_stack_20226 {
   struct media_entity *entity ;
   struct list_head *link ;
};
#line 88  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_graph {
   struct __anonstruct_stack_20226 stack[16U] ;
   struct media_entity_enum ent_enum ;
   int top ;
};
#line 104  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_pipeline {
   int streaming_count ;
   struct media_graph graph ;
};
#line 132 
struct media_pad;
#line 132 
struct media_interface;
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
union __anonunion_20227 {
   struct media_gobj *gobj0 ;
   struct media_pad *source ;
   struct media_interface *intf ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
union __anonunion_20228 {
   struct media_gobj *gobj1 ;
   struct media_pad *sink ;
   struct media_entity *entity ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_link {
   struct media_gobj graph_obj ;
   struct list_head list ;
   union __anonunion_20227 __anonCompField_media_link_90 ;
   union __anonunion_20228 __anonCompField_media_link_91 ;
   struct media_link *reverse ;
   unsigned long flags ;
   bool is_backlink ;
};
#line 149 
enum media_pad_signal_type {
    PAD_SIGNAL_DEFAULT = 0,
    PAD_SIGNAL_ANALOG = 1,
    PAD_SIGNAL_DV = 2,
    PAD_SIGNAL_AUDIO = 3
};
#line 189  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_pad {
   struct media_gobj graph_obj ;
   struct media_entity *entity ;
   u16 index ;
   enum media_pad_signal_type sig_type ;
   unsigned long flags ;
};
#line 214  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_entity_operations {
   int (*get_fwnode_pad)(struct fwnode_endpoint *) ;
   int (*link_setup)(struct media_entity *, struct media_pad *, struct media_pad *, u32 ) ;
   int (*link_validate)(struct media_link *) ;
};
#line 221 
enum media_entity_type {
    MEDIA_ENTITY_TYPE_BASE = 0,
    MEDIA_ENTITY_TYPE_VIDEO_DEVICE = 1,
    MEDIA_ENTITY_TYPE_V4L2_SUBDEV = 2
};
#line 289  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct __anonstruct_dev_20230 {
   u32 major ;
   u32 minor ;
};
#line 289  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
union __anonunion_info_20229 {
   struct __anonstruct_dev_20230 dev ;
};
#line 289  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_entity {
   struct media_gobj graph_obj ;
   char *name ;
   enum media_entity_type obj_type ;
   u32 function ;
   unsigned long flags ;
   u16 num_pads ;
   u16 num_links ;
   u16 num_backlinks ;
   int internal_idx ;
   struct media_pad *pads ;
   struct list_head links ;
   struct media_entity_operations *ops ;
   int stream_count ;
   int use_count ;
   struct media_pipeline *pipe ;
   union __anonunion_info_20229 info ;
};
#line 335  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_interface {
   struct media_gobj graph_obj ;
   struct list_head links ;
   u32 type ;
   u32 flags ;
};
#line 349  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_intf_devnode {
   struct media_interface intf ;
   u32 major ;
   u32 minor ;
};
#line 1087 
enum vfl_devnode_type {
    VFL_TYPE_GRABBER = 0,
    VFL_TYPE_VBI = 1,
    VFL_TYPE_RADIO = 2,
    VFL_TYPE_SUBDEV = 3,
    VFL_TYPE_SDR = 4,
    VFL_TYPE_TOUCH = 5,
    VFL_TYPE_MAX = 6
};
#line 1097 
enum vfl_devnode_direction {
    VFL_DIR_RX = 0,
    VFL_DIR_TX = 1,
    VFL_DIR_M2M = 2
};
#line 1104 
struct video_device;
#line 1105 
struct v4l2_device;
#line 1106 
struct v4l2_ctrl_handler;
#line 104  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-dev.h"
struct v4l2_prio_state {
   atomic_t prios[4U] ;
};
#line 193  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-dev.h"
struct v4l2_file_operations {
   struct module *owner ;
   ssize_t (*read)(struct file *, char *, size_t , loff_t *) ;
   ssize_t (*write)(struct file *, char *, size_t , loff_t *) ;
   __poll_t (*poll)(struct file *, struct poll_table_struct *) ;
   long (*unlocked_ioctl)(struct file *, unsigned int , unsigned long ) ;
   long (*compat_ioctl32)(struct file *, unsigned int , unsigned long ) ;
   unsigned long (*get_unmapped_area)(struct file *, unsigned long , unsigned long , unsigned long , unsigned long ) ;
   int (*mmap)(struct file *, struct vm_area_struct *) ;
   int (*open)(struct file *) ;
   int (*release)(struct file *) ;
};
#line 256 
struct vb2_queue;
#line 256 
struct v4l2_ioctl_ops;
#line 256  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-dev.h"
struct video_device {
   struct media_entity entity ;
   struct media_intf_devnode *intf_devnode ;
   struct media_pipeline pipe ;
   struct v4l2_file_operations *fops ;
   u32 device_caps ;
   struct device dev ;
   struct cdev *cdev ;
   struct v4l2_device *v4l2_dev ;
   struct device *dev_parent ;
   struct v4l2_ctrl_handler *ctrl_handler ;
   struct vb2_queue *queue ;
   struct v4l2_prio_state *prio ;
   char name[32U] ;
   enum vfl_devnode_type vfl_type ;
   enum vfl_devnode_direction vfl_dir ;
   int minor ;
   u16 num ;
   unsigned long flags ;
   int index ;
   spinlock_t fh_lock ;
   struct list_head fh_list ;
   int dev_debug ;
   v4l2_std_id tvnorms ;
   void (*release)(struct video_device *) ;
   struct v4l2_ioctl_ops *ioctl_ops ;
   unsigned long valid_ioctls[3U] ;
   struct mutex *lock ;
};
#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-common.h"
struct v4l2_subdev;
#line 96 
struct v4l2_subdev_ops;
#line 335  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-common.h"
struct v4l2_priv_tun_config {
   int tuner ;
   void *priv ;
};
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-devnode.h"
struct media_file_operations {
   struct module *owner ;
   ssize_t (*read)(struct file *, char *, size_t , loff_t *) ;
   ssize_t (*write)(struct file *, char *, size_t , loff_t *) ;
   __poll_t (*poll)(struct file *, struct poll_table_struct *) ;
   long (*ioctl)(struct file *, unsigned int , unsigned long ) ;
   long (*compat_ioctl)(struct file *, unsigned int , unsigned long ) ;
   int (*open)(struct file *) ;
   int (*release)(struct file *) ;
};
#line 75  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-devnode.h"
struct media_devnode {
   struct media_device *media_dev ;
   struct media_file_operations *fops ;
   struct device dev ;
   struct cdev cdev ;
   struct device *parent ;
   int minor ;
   unsigned long flags ;
   void (*release)(struct media_devnode *) ;
};
#line 65  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-device.h"
struct media_request;
#line 65  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-device.h"
struct media_device_ops {
   int (*link_notify)(struct media_link *, u32 , unsigned int ) ;
   struct media_request *(*req_alloc)(struct media_device *) ;
   void (*req_free)(struct media_request *) ;
   int (*req_validate)(struct media_request *) ;
   void (*req_queue)(struct media_request *) ;
};
#line 144  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-device.h"
struct media_device {
   struct device *dev ;
   struct media_devnode *devnode ;
   char model[32U] ;
   char driver_name[32U] ;
   char serial[40U] ;
   char bus_info[32U] ;
   u32 hw_revision ;
   u64 topology_version ;
   u32 id ;
   struct ida entity_internal_idx ;
   int entity_internal_idx_max ;
   struct list_head entities ;
   struct list_head interfaces ;
   struct list_head pads ;
   struct list_head links ;
   struct list_head entity_notify ;
   struct mutex graph_mutex ;
   struct media_graph pm_count_walk ;
   void *source_priv ;
   int (*enable_source)(struct media_entity *, struct media_pipeline *) ;
   void (*disable_source)(struct media_entity *) ;
   struct media_device_ops *ops ;
   struct mutex req_queue_mutex ;
   atomic_t request_id ;
};
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-mediabus.h"
struct v4l2_mbus_framefmt {
   __u32 width ;
   __u32 height ;
   __u32 code ;
   __u32 field ;
   __u32 colorspace ;
   __u16 ycbcr_enc ;
   __u16 quantization ;
   __u16 xfer_func ;
   __u16 reserved[11U] ;
};
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-subdev.h"
struct v4l2_subdev_format {
   __u32 which ;
   __u32 pad ;
   struct v4l2_mbus_framefmt format ;
   __u32 reserved[8U] ;
};
#line 75  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-subdev.h"
struct v4l2_subdev_mbus_code_enum {
   __u32 pad ;
   __u32 index ;
   __u32 code ;
   __u32 which ;
   __u32 reserved[8U] ;
};
#line 90  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-subdev.h"
struct v4l2_subdev_frame_size_enum {
   __u32 index ;
   __u32 pad ;
   __u32 code ;
   __u32 min_width ;
   __u32 max_width ;
   __u32 min_height ;
   __u32 max_height ;
   __u32 which ;
   __u32 reserved[8U] ;
};
#line 107  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-subdev.h"
struct v4l2_subdev_frame_interval {
   __u32 pad ;
   struct v4l2_fract interval ;
   __u32 reserved[9U] ;
};
#line 123  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-subdev.h"
struct v4l2_subdev_frame_interval_enum {
   __u32 index ;
   __u32 pad ;
   __u32 code ;
   __u32 width ;
   __u32 height ;
   struct v4l2_fract interval ;
   __u32 which ;
   __u32 reserved[8U] ;
};
#line 149  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-subdev.h"
struct v4l2_subdev_selection {
   __u32 which ;
   __u32 pad ;
   __u32 target ;
   __u32 flags ;
   struct v4l2_rect r ;
   __u32 reserved[8U] ;
};
#line 157 
struct v4l2_async_notifier;
#line 158 
enum v4l2_async_match_type {
    V4L2_ASYNC_MATCH_CUSTOM = 0,
    V4L2_ASYNC_MATCH_DEVNAME = 1,
    V4L2_ASYNC_MATCH_I2C = 2,
    V4L2_ASYNC_MATCH_FWNODE = 3
};
#line 79  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-async.h"
struct __anonstruct_i2c_20244 {
   int adapter_id ;
   unsigned short address ;
};
#line 79  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-async.h"
struct __anonstruct_custom_20245 {
   bool (*match)(struct device *, struct v4l2_async_subdev *) ;
   void *priv ;
};
#line 79  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-async.h"
union __anonunion_match_20243 {
   struct fwnode_handle *fwnode ;
   char *device_name ;
   struct __anonstruct_i2c_20244 i2c ;
   struct __anonstruct_custom_20245 custom ;
};
#line 79  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-async.h"
struct v4l2_async_subdev {
   enum v4l2_async_match_type match_type ;
   union __anonunion_match_20243 match ;
   struct list_head list ;
   struct list_head asd_list ;
};
#line 107  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-async.h"
struct v4l2_async_notifier_operations {
   int (*bound)(struct v4l2_async_notifier *, struct v4l2_subdev *, struct v4l2_async_subdev *) ;
   int (*complete)(struct v4l2_async_notifier *) ;
   void (*unbind)(struct v4l2_async_notifier *, struct v4l2_subdev *, struct v4l2_async_subdev *) ;
};
#line 129  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-async.h"
struct v4l2_async_notifier {
   struct v4l2_async_notifier_operations *ops ;
   struct v4l2_device *v4l2_dev ;
   struct v4l2_subdev *sd ;
   struct v4l2_async_notifier *parent ;
   struct list_head asd_list ;
   struct list_head waiting ;
   struct list_head done ;
   struct list_head list ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-fh.h"
struct v4l2_m2m_ctx;
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-fh.h"
struct v4l2_fh {
   struct list_head list ;
   struct video_device *vdev ;
   struct v4l2_ctrl_handler *ctrl_handler ;
   enum v4l2_priority prio ;
   wait_queue_head_t wait ;
   struct mutex subscribe_lock ;
   struct list_head subscribed ;
   struct list_head available ;
   unsigned int navailable ;
   u32 sequence ;
   struct v4l2_m2m_ctx *m2m_ctx ;
};
#line 162 
enum v4l2_mbus_type {
    V4L2_MBUS_UNKNOWN = 0,
    V4L2_MBUS_PARALLEL = 1,
    V4L2_MBUS_BT656 = 2,
    V4L2_MBUS_CSI1 = 3,
    V4L2_MBUS_CCP2 = 4,
    V4L2_MBUS_CSI2_DPHY = 5,
    V4L2_MBUS_CSI2_CPHY = 6
};
#line 97  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-mediabus.h"
struct v4l2_mbus_config {
   enum v4l2_mbus_type type ;
   unsigned int flags ;
};
#line 184 
struct v4l2_subdev_fh;
#line 185 
struct tuner_setup;
#line 186 
struct v4l2_mbus_frame_desc;
#line 52  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_decode_vbi_line {
   u32 is_second_field ;
   u8 *p ;
   u32 line ;
   u32 type ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_io_pin_config {
   u32 flags ;
   u8 pin ;
   u8 function ;
   u8 value ;
   u8 strength ;
};
#line 188  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_core_ops {
   int (*log_status)(struct v4l2_subdev *) ;
   int (*s_io_pin_config)(struct v4l2_subdev *, size_t , struct v4l2_subdev_io_pin_config *) ;
   int (*init)(struct v4l2_subdev *, u32 ) ;
   int (*load_fw)(struct v4l2_subdev *) ;
   int (*reset)(struct v4l2_subdev *, u32 ) ;
   int (*s_gpio)(struct v4l2_subdev *, u32 ) ;
   long (*ioctl)(struct v4l2_subdev *, unsigned int , void *) ;
   long (*compat_ioctl32)(struct v4l2_subdev *, unsigned int , unsigned long ) ;
   int (*g_register)(struct v4l2_subdev *, struct v4l2_dbg_register *) ;
   int (*s_register)(struct v4l2_subdev *, struct v4l2_dbg_register *) ;
   int (*s_power)(struct v4l2_subdev *, int ) ;
   int (*interrupt_service_routine)(struct v4l2_subdev *, u32 , bool *) ;
   int (*subscribe_event)(struct v4l2_subdev *, struct v4l2_fh *, struct v4l2_event_subscription *) ;
   int (*unsubscribe_event)(struct v4l2_subdev *, struct v4l2_fh *, struct v4l2_event_subscription *) ;
};
#line 264  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_tuner_ops {
   int (*standby)(struct v4l2_subdev *) ;
   int (*s_radio)(struct v4l2_subdev *) ;
   int (*s_frequency)(struct v4l2_subdev *, struct v4l2_frequency *) ;
   int (*g_frequency)(struct v4l2_subdev *, struct v4l2_frequency *) ;
   int (*enum_freq_bands)(struct v4l2_subdev *, struct v4l2_frequency_band *) ;
   int (*g_tuner)(struct v4l2_subdev *, struct v4l2_tuner *) ;
   int (*s_tuner)(struct v4l2_subdev *, struct v4l2_tuner *) ;
   int (*g_modulator)(struct v4l2_subdev *, struct v4l2_modulator *) ;
   int (*s_modulator)(struct v4l2_subdev *, struct v4l2_modulator *) ;
   int (*s_type_addr)(struct v4l2_subdev *, struct tuner_setup *) ;
   int (*s_config)(struct v4l2_subdev *, struct v4l2_priv_tun_config *) ;
};
#line 304  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_audio_ops {
   int (*s_clock_freq)(struct v4l2_subdev *, u32 ) ;
   int (*s_i2s_clock_freq)(struct v4l2_subdev *, u32 ) ;
   int (*s_routing)(struct v4l2_subdev *, u32 , u32 , u32 ) ;
   int (*s_stream)(struct v4l2_subdev *, int ) ;
};
#line 310 
enum v4l2_mbus_frame_desc_flags {
    V4L2_MBUS_FRAME_DESC_FL_LEN_MAX = 1,
    V4L2_MBUS_FRAME_DESC_FL_BLOB = 2
};
#line 335  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_mbus_frame_desc_entry {
   enum v4l2_mbus_frame_desc_flags flags ;
   u32 pixelcode ;
   u32 length ;
};
#line 348  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_mbus_frame_desc {
   struct v4l2_mbus_frame_desc_entry entry[4U] ;
   unsigned short num_entries ;
};
#line 415  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_video_ops {
   int (*s_routing)(struct v4l2_subdev *, u32 , u32 , u32 ) ;
   int (*s_crystal_freq)(struct v4l2_subdev *, u32 , u32 ) ;
   int (*g_std)(struct v4l2_subdev *, v4l2_std_id *) ;
   int (*s_std)(struct v4l2_subdev *, v4l2_std_id ) ;
   int (*s_std_output)(struct v4l2_subdev *, v4l2_std_id ) ;
   int (*g_std_output)(struct v4l2_subdev *, v4l2_std_id *) ;
   int (*querystd)(struct v4l2_subdev *, v4l2_std_id *) ;
   int (*g_tvnorms)(struct v4l2_subdev *, v4l2_std_id *) ;
   int (*g_tvnorms_output)(struct v4l2_subdev *, v4l2_std_id *) ;
   int (*g_input_status)(struct v4l2_subdev *, u32 *) ;
   int (*s_stream)(struct v4l2_subdev *, int ) ;
   int (*g_pixelaspect)(struct v4l2_subdev *, struct v4l2_fract *) ;
   int (*g_frame_interval)(struct v4l2_subdev *, struct v4l2_subdev_frame_interval *) ;
   int (*s_frame_interval)(struct v4l2_subdev *, struct v4l2_subdev_frame_interval *) ;
   int (*s_dv_timings)(struct v4l2_subdev *, struct v4l2_dv_timings *) ;
   int (*g_dv_timings)(struct v4l2_subdev *, struct v4l2_dv_timings *) ;
   int (*query_dv_timings)(struct v4l2_subdev *, struct v4l2_dv_timings *) ;
   int (*g_mbus_config)(struct v4l2_subdev *, struct v4l2_mbus_config *) ;
   int (*s_mbus_config)(struct v4l2_subdev *, struct v4l2_mbus_config *) ;
   int (*s_rx_buffer)(struct v4l2_subdev *, void *, unsigned int *) ;
};
#line 481  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_vbi_ops {
   int (*decode_vbi_line)(struct v4l2_subdev *, struct v4l2_decode_vbi_line *) ;
   int (*s_vbi_data)(struct v4l2_subdev *, struct v4l2_sliced_vbi_data *) ;
   int (*g_vbi_data)(struct v4l2_subdev *, struct v4l2_sliced_vbi_data *) ;
   int (*g_sliced_vbi_cap)(struct v4l2_subdev *, struct v4l2_sliced_vbi_cap *) ;
   int (*s_raw_fmt)(struct v4l2_subdev *, struct v4l2_vbi_format *) ;
   int (*g_sliced_fmt)(struct v4l2_subdev *, struct v4l2_sliced_vbi_format *) ;
   int (*s_sliced_fmt)(struct v4l2_subdev *, struct v4l2_sliced_vbi_format *) ;
};
#line 501  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_sensor_ops {
   int (*g_skip_top_lines)(struct v4l2_subdev *, u32 *) ;
   int (*g_skip_frames)(struct v4l2_subdev *, u32 *) ;
};
#line 505 
enum v4l2_subdev_ir_mode {
    V4L2_SUBDEV_IR_MODE_PULSE_WIDTH = 0
};
#line 540  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_ir_parameters {
   unsigned int bytes_per_data_element ;
   enum v4l2_subdev_ir_mode mode ;
   bool enable ;
   bool interrupt_enable ;
   bool shutdown ;
   bool modulation ;
   u32 max_pulse_width ;
   unsigned int carrier_freq ;
   unsigned int duty_cycle ;
   bool invert_level ;
   bool invert_carrier_sense ;
   u32 noise_filter_min_width ;
   unsigned int carrier_range_lower ;
   unsigned int carrier_range_upper ;
   u32 resolution ;
};
#line 599  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_ir_ops {
   int (*rx_read)(struct v4l2_subdev *, u8 *, size_t , ssize_t *) ;
   int (*rx_g_parameters)(struct v4l2_subdev *, struct v4l2_subdev_ir_parameters *) ;
   int (*rx_s_parameters)(struct v4l2_subdev *, struct v4l2_subdev_ir_parameters *) ;
   int (*tx_write)(struct v4l2_subdev *, u8 *, size_t , ssize_t *) ;
   int (*tx_g_parameters)(struct v4l2_subdev *, struct v4l2_subdev_ir_parameters *) ;
   int (*tx_s_parameters)(struct v4l2_subdev *, struct v4l2_subdev_ir_parameters *) ;
};
#line 630  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_pad_config {
   struct v4l2_mbus_framefmt try_fmt ;
   struct v4l2_rect try_crop ;
   struct v4l2_rect try_compose ;
};
#line 674  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_pad_ops {
   int (*init_cfg)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *) ;
   int (*enum_mbus_code)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *, struct v4l2_subdev_mbus_code_enum *) ;
   int (*enum_frame_size)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *, struct v4l2_subdev_frame_size_enum *) ;
   int (*enum_frame_interval)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *, struct v4l2_subdev_frame_interval_enum *) ;
   int (*get_fmt)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *, struct v4l2_subdev_format *) ;
   int (*set_fmt)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *, struct v4l2_subdev_format *) ;
   int (*get_selection)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *, struct v4l2_subdev_selection *) ;
   int (*set_selection)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *, struct v4l2_subdev_selection *) ;
   int (*get_edid)(struct v4l2_subdev *, struct v4l2_edid *) ;
   int (*set_edid)(struct v4l2_subdev *, struct v4l2_edid *) ;
   int (*dv_timings_cap)(struct v4l2_subdev *, struct v4l2_dv_timings_cap *) ;
   int (*enum_dv_timings)(struct v4l2_subdev *, struct v4l2_enum_dv_timings *) ;
   int (*link_validate)(struct v4l2_subdev *, struct media_link *, struct v4l2_subdev_format *, struct v4l2_subdev_format *) ;
   int (*get_frame_desc)(struct v4l2_subdev *, unsigned int , struct v4l2_mbus_frame_desc *) ;
   int (*set_frame_desc)(struct v4l2_subdev *, unsigned int , struct v4l2_mbus_frame_desc *) ;
};
#line 727  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_ops {
   struct v4l2_subdev_core_ops *core ;
   struct v4l2_subdev_tuner_ops *tuner ;
   struct v4l2_subdev_audio_ops *audio ;
   struct v4l2_subdev_video_ops *video ;
   struct v4l2_subdev_vbi_ops *vbi ;
   struct v4l2_subdev_ir_ops *ir ;
   struct v4l2_subdev_sensor_ops *sensor ;
   struct v4l2_subdev_pad_ops *pad ;
};
#line 765  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_internal_ops {
   int (*registered)(struct v4l2_subdev *) ;
   void (*unregistered)(struct v4l2_subdev *) ;
   int (*open)(struct v4l2_subdev *, struct v4l2_subdev_fh *) ;
   int (*close)(struct v4l2_subdev *, struct v4l2_subdev_fh *) ;
   void (*release)(struct v4l2_subdev *) ;
};
#line 772 
struct regulator_bulk_data;
#line 797  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_platform_data {
   struct regulator_bulk_data *regulators ;
   int num_regulators ;
   void *host_priv ;
};
#line 848  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev {
   struct media_entity entity ;
   struct list_head list ;
   struct module *owner ;
   bool owner_v4l2_dev ;
   u32 flags ;
   struct v4l2_device *v4l2_dev ;
   struct v4l2_subdev_ops *ops ;
   struct v4l2_subdev_internal_ops *internal_ops ;
   struct v4l2_ctrl_handler *ctrl_handler ;
   char name[32U] ;
   u32 grp_id ;
   void *dev_priv ;
   void *host_priv ;
   struct video_device *devnode ;
   struct device *dev ;
   struct fwnode_handle *fwnode ;
   struct list_head async_list ;
   struct v4l2_async_subdev *asd ;
   struct v4l2_async_notifier *notifier ;
   struct v4l2_async_notifier *subdev_notifier ;
   struct v4l2_subdev_platform_data *pdata ;
};
#line 906  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_fh {
   struct v4l2_fh vfh ;
   struct module *owner ;
   struct v4l2_subdev_pad_config *pad ;
};
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-device.h"
struct v4l2_device {
   struct device *dev ;
   struct media_device *mdev ;
   struct list_head subdevs ;
   spinlock_t lock ;
   char name[36U] ;
   void (*notify)(struct v4l2_subdev *, unsigned int , void *) ;
   struct v4l2_ctrl_handler *ctrl_handler ;
   struct v4l2_prio_state prio ;
   struct kref ref ;
   void (*release)(struct v4l2_device *) ;
};
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ptp_clock_kernel.h"
struct ptp_system_timestamp {
   struct timespec64 pre_ts ;
   struct timespec64 post_ts ;
};
#line 277 
struct dma_chan;
#line 279 
struct spi_controller;
#line 280 
struct spi_transfer;
#line 281 
struct spi_controller_mem_ops;
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spi/spi.h"
struct spi_statistics {
   spinlock_t lock ;
   unsigned long messages ;
   unsigned long transfers ;
   unsigned long errors ;
   unsigned long timedout ;
   unsigned long spi_sync ;
   unsigned long spi_sync_immediate ;
   unsigned long spi_async ;
   unsigned long long bytes ;
   unsigned long long bytes_rx ;
   unsigned long long bytes_tx ;
   unsigned long transfer_bytes_histo[17U] ;
   unsigned long transfers_split_maxsize ;
};
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spi/spi.h"
struct spi_delay {
   u16 value ;
   u8 unit ;
};
#line 157  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spi/spi.h"
struct spi_device {
   struct device dev ;
   struct spi_controller *controller ;
   struct spi_controller *master ;
   u32 max_speed_hz ;
   u8 chip_select ;
   u8 bits_per_word ;
   bool rt ;
   u32 mode ;
   int irq ;
   void *controller_state ;
   void *controller_data ;
   char modalias[32U] ;
   char *driver_override ;
   int cs_gpio ;
   struct gpio_desc *cs_gpiod ;
   struct spi_delay word_delay ;
   struct spi_statistics statistics ;
};
#line 247 
struct spi_message;
#line 452  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spi/spi.h"
struct spi_controller {
   struct device dev ;
   struct list_head list ;
   s16 bus_num ;
   u16 num_chipselect ;
   u16 dma_alignment ;
   u32 mode_bits ;
   u32 bits_per_word_mask ;
   u32 min_speed_hz ;
   u32 max_speed_hz ;
   u16 flags ;
   bool slave ;
   size_t (*max_transfer_size)(struct spi_device *) ;
   size_t (*max_message_size)(struct spi_device *) ;
   struct mutex io_mutex ;
   spinlock_t bus_lock_spinlock ;
   struct mutex bus_lock_mutex ;
   bool bus_lock_flag ;
   int (*setup)(struct spi_device *) ;
   int (*set_cs_timing)(struct spi_device *, struct spi_delay *, struct spi_delay *, struct spi_delay *) ;
   int (*transfer)(struct spi_device *, struct spi_message *) ;
   void (*cleanup)(struct spi_device *) ;
   bool (*can_dma)(struct spi_controller *, struct spi_device *, struct spi_transfer *) ;
   bool queued ;
   struct kthread_worker kworker ;
   struct task_struct *kworker_task ;
   struct kthread_work pump_messages ;
   spinlock_t queue_lock ;
   struct list_head queue ;
   struct spi_message *cur_msg ;
   bool idling ;
   bool busy ;
   bool running ;
   bool rt ;
   bool auto_runtime_pm ;
   bool cur_msg_prepared ;
   bool cur_msg_mapped ;
   struct completion xfer_completion ;
   size_t max_dma_len ;
   int (*prepare_transfer_hardware)(struct spi_controller *) ;
   int (*transfer_one_message)(struct spi_controller *, struct spi_message *) ;
   int (*unprepare_transfer_hardware)(struct spi_controller *) ;
   int (*prepare_message)(struct spi_controller *, struct spi_message *) ;
   int (*unprepare_message)(struct spi_controller *, struct spi_message *) ;
   int (*slave_abort)(struct spi_controller *) ;
   void (*set_cs)(struct spi_device *, bool ) ;
   int (*transfer_one)(struct spi_controller *, struct spi_device *, struct spi_transfer *) ;
   void (*handle_err)(struct spi_controller *, struct spi_message *) ;
   struct spi_controller_mem_ops *mem_ops ;
   struct spi_delay cs_setup ;
   struct spi_delay cs_hold ;
   struct spi_delay cs_inactive ;
   int *cs_gpios ;
   struct gpio_desc **cs_gpiods ;
   bool use_gpio_descriptors ;
   struct spi_statistics statistics ;
   struct dma_chan *dma_tx ;
   struct dma_chan *dma_rx ;
   void *dummy_rx ;
   void *dummy_tx ;
   int (*fw_translate_cs)(struct spi_controller *, unsigned int ) ;
   bool ptp_sts_supported ;
   unsigned long irq_flags ;
};
#line 890  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spi/spi.h"
struct spi_transfer {
   void *tx_buf ;
   void *rx_buf ;
   unsigned int len ;
   dma_addr_t tx_dma ;
   dma_addr_t rx_dma ;
   struct sg_table tx_sg ;
   struct sg_table rx_sg ;
   unsigned int cs_change : 1 ;
   unsigned int tx_nbits : 3 ;
   unsigned int rx_nbits : 3 ;
   u8 bits_per_word ;
   u16 delay_usecs ;
   struct spi_delay delay ;
   struct spi_delay cs_change_delay ;
   struct spi_delay word_delay ;
   u32 speed_hz ;
   u32 effective_speed_hz ;
   unsigned int ptp_sts_word_pre ;
   unsigned int ptp_sts_word_post ;
   struct ptp_system_timestamp *ptp_sts ;
   bool timestamped_pre ;
   bool timestamped_post ;
   struct list_head transfer_list ;
};
#line 961  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spi/spi.h"
struct spi_message {
   struct list_head transfers ;
   struct spi_device *spi ;
   unsigned int is_dma_mapped : 1 ;
   void (*complete)(void *) ;
   void *context ;
   unsigned int frame_length ;
   unsigned int actual_length ;
   int status ;
   struct list_head queue ;
   void *state ;
   struct list_head resources ;
};
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 157  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_fix_screeninfo {
   char id[16U] ;
   unsigned long smem_start ;
   __u32 smem_len ;
   __u32 type ;
   __u32 type_aux ;
   __u32 visual ;
   __u16 xpanstep ;
   __u16 ypanstep ;
   __u16 ywrapstep ;
   __u32 line_length ;
   unsigned long mmio_start ;
   __u32 mmio_len ;
   __u32 accel ;
   __u16 capabilities ;
   __u16 reserved[2U] ;
};
#line 188  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_bitfield {
   __u32 offset ;
   __u32 length ;
   __u32 msb_right ;
};
#line 241  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_var_screeninfo {
   __u32 xres ;
   __u32 yres ;
   __u32 xres_virtual ;
   __u32 yres_virtual ;
   __u32 xoffset ;
   __u32 yoffset ;
   __u32 bits_per_pixel ;
   __u32 grayscale ;
   struct fb_bitfield red ;
   struct fb_bitfield green ;
   struct fb_bitfield blue ;
   struct fb_bitfield transp ;
   __u32 nonstd ;
   __u32 activate ;
   __u32 height ;
   __u32 width ;
   __u32 accel_flags ;
   __u32 pixclock ;
   __u32 left_margin ;
   __u32 right_margin ;
   __u32 upper_margin ;
   __u32 lower_margin ;
   __u32 hsync_len ;
   __u32 vsync_len ;
   __u32 sync ;
   __u32 vmode ;
   __u32 rotate ;
   __u32 colorspace ;
   __u32 reserved[4U] ;
};
#line 281  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_cmap {
   __u32 start ;
   __u32 len ;
   __u16 *red ;
   __u16 *green ;
   __u16 *blue ;
   __u16 *transp ;
};
#line 341  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_copyarea {
   __u32 dx ;
   __u32 dy ;
   __u32 width ;
   __u32 height ;
   __u32 sx ;
   __u32 sy ;
};
#line 350  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_fillrect {
   __u32 dx ;
   __u32 dy ;
   __u32 width ;
   __u32 height ;
   __u32 color ;
   __u32 rop ;
};
#line 359  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_image {
   __u32 dx ;
   __u32 dy ;
   __u32 width ;
   __u32 height ;
   __u32 fg_color ;
   __u32 bg_color ;
   __u8 depth ;
   char *data ;
   struct fb_cmap cmap ;
};
#line 383  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fbcurpos {
   __u16 x ;
   __u16 y ;
};
#line 387  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_cursor {
   __u16 set ;
   __u16 enable ;
   __u16 rop ;
   char *mask ;
   struct fbcurpos hot ;
   struct fb_image image ;
};
#line 400 
enum backlight_type {
    BACKLIGHT_RAW = 1,
    BACKLIGHT_PLATFORM = 2,
    BACKLIGHT_FIRMWARE = 3,
    BACKLIGHT_TYPE_MAX = 4
};
#line 412 
enum backlight_scale {
    BACKLIGHT_SCALE_UNKNOWN = 0,
    BACKLIGHT_SCALE_LINEAR = 1,
    BACKLIGHT_SCALE_NON_LINEAR = 2
};
#line 418 
struct backlight_device;
#line 419 
struct fb_info;
#line 58  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backlight.h"
struct backlight_ops {
   unsigned int options ;
   int (*update_status)(struct backlight_device *) ;
   int (*get_brightness)(struct backlight_device *) ;
   int (*check_fb)(struct backlight_device *, struct fb_info *) ;
};
#line 74  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backlight.h"
struct backlight_properties {
   int brightness ;
   int max_brightness ;
   int power ;
   int fb_blank ;
   enum backlight_type type ;
   unsigned int state ;
   enum backlight_scale scale ;
};
#line 97  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backlight.h"
struct backlight_device {
   struct backlight_properties props ;
   struct mutex update_lock ;
   struct mutex ops_lock ;
   struct backlight_ops *ops ;
   struct notifier_block fb_notif ;
   struct list_head entry ;
   struct device dev ;
   bool fb_bl_on[32U] ;
   int use_count ;
};
#line 52  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_chroma {
   __u32 redx ;
   __u32 greenx ;
   __u32 bluex ;
   __u32 whitex ;
   __u32 redy ;
   __u32 greeny ;
   __u32 bluey ;
   __u32 whitey ;
};
#line 63 
struct fb_videomode;
#line 63  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_monspecs {
   struct fb_chroma chroma ;
   struct fb_videomode *modedb ;
   __u8 manufacturer[4U] ;
   __u8 monitor[14U] ;
   __u8 serial_no[14U] ;
   __u8 ascii[14U] ;
   __u32 modedb_len ;
   __u32 model ;
   __u32 serial ;
   __u32 year ;
   __u32 week ;
   __u32 hfmin ;
   __u32 hfmax ;
   __u32 dclkmin ;
   __u32 dclkmax ;
   __u16 input ;
   __u16 dpms ;
   __u16 signal ;
   __u16 vfmin ;
   __u16 vfmax ;
   __u16 gamma ;
   __u16 gtf : 1 ;
   __u16 misc ;
   __u8 version ;
   __u8 revision ;
   __u8 max_x ;
   __u8 max_y ;
};
#line 144  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_blit_caps {
   u32 x ;
   u32 y ;
   u32 len ;
   u32 flags ;
};
#line 185  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_pixmap {
   u8 *addr ;
   u32 size ;
   u32 offset ;
   u32 buf_align ;
   u32 scan_align ;
   u32 access_align ;
   u32 flags ;
   u32 blit_x ;
   u32 blit_y ;
   void (*writeio)(struct fb_info *, void *, void *, unsigned int ) ;
   void (*readio)(struct fb_info *, void *, void *, unsigned int ) ;
};
#line 203  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_deferred_io {
   unsigned long delay ;
   struct mutex lock ;
   struct list_head pagelist ;
   void (*first_io)(struct fb_info *) ;
   void (*deferred_io)(struct fb_info *, struct list_head *) ;
};
#line 228  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_ops {
   struct module *owner ;
   int (*fb_open)(struct fb_info *, int ) ;
   int (*fb_release)(struct fb_info *, int ) ;
   ssize_t (*fb_read)(struct fb_info *, char *, size_t , loff_t *) ;
   ssize_t (*fb_write)(struct fb_info *, char *, size_t , loff_t *) ;
   int (*fb_check_var)(struct fb_var_screeninfo *, struct fb_info *) ;
   int (*fb_set_par)(struct fb_info *) ;
   int (*fb_setcolreg)(unsigned int , unsigned int , unsigned int , unsigned int , unsigned int , struct fb_info *) ;
   int (*fb_setcmap)(struct fb_cmap *, struct fb_info *) ;
   int (*fb_blank)(int , struct fb_info *) ;
   int (*fb_pan_display)(struct fb_var_screeninfo *, struct fb_info *) ;
   void (*fb_fillrect)(struct fb_info *, struct fb_fillrect *) ;
   void (*fb_copyarea)(struct fb_info *, struct fb_copyarea *) ;
   void (*fb_imageblit)(struct fb_info *, struct fb_image *) ;
   int (*fb_cursor)(struct fb_info *, struct fb_cursor *) ;
   int (*fb_sync)(struct fb_info *) ;
   int (*fb_ioctl)(struct fb_info *, unsigned int , unsigned long ) ;
   int (*fb_compat_ioctl)(struct fb_info *, unsigned int , unsigned long ) ;
   int (*fb_mmap)(struct fb_info *, struct vm_area_struct *) ;
   void (*fb_get_caps)(struct fb_info *, struct fb_blit_caps *, struct fb_var_screeninfo *) ;
   void (*fb_destroy)(struct fb_info *) ;
   int (*fb_debug_enter)(struct fb_info *) ;
   int (*fb_debug_leave)(struct fb_info *) ;
};
#line 306  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_tilemap {
   __u32 width ;
   __u32 height ;
   __u32 depth ;
   __u32 length ;
   __u8 *data ;
};
#line 315  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_tilerect {
   __u32 sx ;
   __u32 sy ;
   __u32 width ;
   __u32 height ;
   __u32 index ;
   __u32 fg ;
   __u32 bg ;
   __u32 rop ;
};
#line 326  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_tilearea {
   __u32 sx ;
   __u32 sy ;
   __u32 dx ;
   __u32 dy ;
   __u32 width ;
   __u32 height ;
};
#line 335  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_tileblit {
   __u32 sx ;
   __u32 sy ;
   __u32 width ;
   __u32 height ;
   __u32 fg ;
   __u32 bg ;
   __u32 length ;
   __u32 *indices ;
};
#line 346  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_tilecursor {
   __u32 sx ;
   __u32 sy ;
   __u32 mode ;
   __u32 shape ;
   __u32 fg ;
   __u32 bg ;
};
#line 355  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_tile_ops {
   void (*fb_settile)(struct fb_info *, struct fb_tilemap *) ;
   void (*fb_tilecopy)(struct fb_info *, struct fb_tilearea *) ;
   void (*fb_tilefill)(struct fb_info *, struct fb_tilerect *) ;
   void (*fb_tileblit)(struct fb_info *, struct fb_tileblit *) ;
   void (*fb_tilecursor)(struct fb_info *, struct fb_tilecursor *) ;
   int (*fb_get_tilemax)(struct fb_info *) ;
};
#line 499  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct aperture {
   resource_size_t base ;
   resource_size_t size ;
};
#line 497  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct apertures_struct {
   unsigned int count ;
   struct aperture ranges[0U] ;
};
#line 439  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
union __anonunion_21146 {
   char *screen_base ;
   char *screen_buffer ;
};
#line 439  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_info {
   atomic_t count ;
   int node ;
   int flags ;
   int fbcon_rotate_hint ;
   struct mutex lock ;
   struct mutex mm_lock ;
   struct fb_var_screeninfo var ;
   struct fb_fix_screeninfo fix ;
   struct fb_monspecs monspecs ;
   struct work_struct queue ;
   struct fb_pixmap pixmap ;
   struct fb_pixmap sprite ;
   struct fb_cmap cmap ;
   struct list_head modelist ;
   struct fb_videomode *mode ;
   struct backlight_device *bl_dev ;
   struct mutex bl_curve_mutex ;
   u8 bl_curve[128U] ;
   struct delayed_work deferred_work ;
   struct fb_deferred_io *fbdefio ;
   struct fb_ops *fbops ;
   struct device *device ;
   struct device *dev ;
   int class_flag ;
   struct fb_tile_ops *tileops ;
   union __anonunion_21146 __anonCompField_fb_info_73 ;
   unsigned long screen_size ;
   void *pseudo_palette ;
   u32 state ;
   void *fbcon_par ;
   void *par ;
   struct apertures_struct *apertures ;
   bool skip_vt_switch ;
};
#line 767  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_videomode {
   char *name ;
   u32 refresh ;
   u32 xres ;
   u32 yres ;
   u32 pixclock ;
   u32 left_margin ;
   u32 right_margin ;
   u32 upper_margin ;
   u32 lower_margin ;
   u32 hsync_len ;
   u32 vsync_len ;
   u32 sync ;
   u32 vmode ;
   u32 flag ;
};
#line 63  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
struct ldv_kmem_cache {
   char *name ;
   unsigned int size ;
};
#line 88  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
typedef unsigned long pthread_t;
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/thread.h"
union pthread_attr_t {
   char __size[56U] ;
   long __align ;
};
#line 30  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/thread.h"
typedef union pthread_attr_t pthread_attr_t;
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 14  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ice/ice.ko/concurrency safety/emg/0/environment_model.c"
struct emg_struct_random_allocationless_scenario_ice_start_xmit_12 {
   struct net_device *arg0 ;
   int signal_pending ;
};
#line 19  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ice/ice.ko/concurrency safety/emg/0/environment_model.c"
struct emg_struct_pci_scenario_ice_driver_13 {
   struct pci_driver *arg0 ;
   int signal_pending ;
};
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ice/ice.ko/concurrency safety/emg/0/environment_model.c"
struct emg_struct_timer_scenario_2_14 {
   struct timer_list *arg0 ;
   int signal_pending ;
};
/* compiler builtin: 
   void __builtin_unreachable(void);   */
#line 22  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/common/inline_asm.h"
#line 22 
void ldv_inline_asm(void);
#line 89  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bug.h"
#line 89 
void __warn_printk(char * , ...);
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/page_64.h"
#line 15 
extern unsigned long vmalloc_base;
#line 16 
#line 16 
extern unsigned long vmemmap_base;
#line 29 
#line 29 
unsigned long __phys_addr(unsigned long);
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/irqflags.h"
#line 20 
unsigned long native_save_fl(void);
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/irqflags.h"
unsigned long native_save_fl(void)
{
  #line 22 
  unsigned long flags;
  #line 23 
  ldv_inline_asm();
  #line 35 
  return flags;
}

#line 38 
#line 39 
void native_restore_fl(unsigned long flags);
#line 39  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/irqflags.h"
void native_restore_fl(unsigned long flags)
{
  #line 41 
  ldv_inline_asm();
  #line 42 
  return;
}

#line 173  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/cpufeature.h"
__inline static bool _static_cpu_has(u16 bit)
{
  #line 177 
  ldv_inline_asm();
  #line 178 
  ldv_inline_asm();
  #line 211 
  t_yes: 
         #line 211 
  ;
  #line 212 
  return (_Bool)1;
  #line 213 
  t_no: 
        #line 213 
  ;
  #line 214 
  return (_Bool)0;
}

#line 67  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/io.h"
__inline static void writel(unsigned int val, void *addr)
{
  #line 69 
  ldv_inline_asm();
  #line 70 
  return;
}

#line 89  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject.h"
__inline static char *kobject_name(struct kobject *kobj)
{
  #line 91 
  return kobj->name;
}

#line 628  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm.h"
__inline static bool is_vmalloc_addr(void *x)
{
  #line 633 
  int tmp_1;
  #line 631 
  unsigned long addr = (unsigned long)x;
  #line 633 
  if (addr >= vmalloc_base) {
    #line 633 
    unsigned long tmp_0;
    #line 633 
    if ((int)_static_cpu_has((unsigned short)528) != 0) 
                                                        #line 633 
                                                        tmp_0 = 14073748835532800UL; else 
                                                                    #line 633 
                                                                    tmp_0 = 35184372088832UL;
    #line 633 
    ;
    #line 633 
    if ((tmp_0 + vmalloc_base) + 18446744073709551615UL > addr) 
                                                                #line 633 
                                                                tmp_1 = 1; else 
                                                                    #line 633 
                                                                    tmp_1 = 0;
  }
  else 
       #line 633 
       tmp_1 = 0;
  #line 633 
  return (_Bool)(tmp_1 != 0);
}

#line 1370  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
__inline static char *dev_name(struct device *dev)
{
  #line 1373 
  if (dev->init_name != (char *)0) 
                                   #line 1374 
                                   return dev->init_name;
  #line 1376 
  return kobject_name(& dev->kobj);
}

#line 1680 
#line 1680 
char *dev_driver_string(struct device *);
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-debug.h"
#line 21 
void debug_dma_map_single(struct device *, void *, unsigned long);
#line 24 
#line 24 
void debug_dma_map_page(struct device *, struct page *, size_t, size_t, int, dma_addr_t);
#line 28 
#line 28 
void debug_dma_mapping_error(struct device *, dma_addr_t);
#line 143  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static int valid_dma_direction(int dma_direction)
{
  #line 146 
  return (unsigned int)dma_direction <= 2U;
}

#line 191  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static bool dma_is_direct(struct dma_map_ops *ops)
{
  #line 193 
  return (_Bool)((long)(ops == (struct dma_map_ops *)0) != 0L);
}

#line 200 
#line 200 
dma_addr_t dma_direct_map_page(struct device *, struct page *, unsigned long, size_t, enum dma_data_direction, unsigned long);
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/dma-mapping.h"
#line 19 
extern struct dma_map_ops *dma_ops;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/dma-mapping.h"
__inline static struct dma_map_ops *get_arch_dma_ops(struct bus_type *bus)
{
  #line 23 
  return dma_ops;
}

#line 261  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static struct dma_map_ops *get_dma_ops(struct device *dev)
{
  #line 263 
  if (dev->dma_ops != (struct dma_map_ops *)0) 
                                               #line 264 
                                               return dev->dma_ops;
  #line 265 
  return get_arch_dma_ops(dev->bus);
}

#line 274  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static dma_addr_t dma_map_page_attrs(struct device *dev, struct page *page, size_t offset, size_t size, enum dma_data_direction dir, unsigned long attrs)
{
  #line 279 
  dma_addr_t addr;
  #line 278 
  struct dma_map_ops *ops = get_dma_ops(dev);
  #line 281 
  if ((long)(valid_dma_direction((int)dir) == 0) != 0L) {
    #line 282 
    ldv_inline_asm();
    #line 283 
    ldv_inline_asm();
    #line 284 
    ldv_inline_asm();
    #line 281 
    ;
  }
  #line 282 
  if ((int)dma_is_direct(ops) != 0) 
                                    #line 283 
                                    addr = dma_direct_map_page(dev,page,offset,size,dir,attrs); else 
                                                                    #line 285 
                                                                    addr = (*(ops->map_page))(dev,page,offset,size,dir,attrs);
  #line 286 
  debug_dma_map_page(dev,page,offset,size,(int)dir,addr);
  #line 288 
  return addr;
}

#line 433  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static int dma_mapping_error(struct device *dev, dma_addr_t dma_addr)
{
  #line 435 
  debug_dma_mapping_error(dev,dma_addr);
  #line 437 
  if (dma_addr == 18446744073709551615ULL) 
                                           #line 438 
                                           return -12;
  #line 439 
  return 0;
}

#line 580  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static dma_addr_t dma_map_single_attrs(struct device *dev, void *ptr, size_t size, enum dma_data_direction dir, unsigned long attrs)
{
  #line 584 
  int __ret_warn_once;
  {
    #line 584 
    bool __warned;
    #line 584 
    __ret_warn_once = (int)is_vmalloc_addr(ptr) != 0;
    #line 584 
    if ((long)(__ret_warn_once != 0) != 0L && (long)(! __warned) != 0L) {
      #line 584 
      __warned = (_Bool)1;
      {
        #line 584 
        int __ret_warn_on = 1;
        #line 584 
        if ((long)(__ret_warn_on != 0) != 0L) {
          #line 584 
          __warn_printk((char *)"%s %s: ",dev_driver_string(dev),dev_name(dev));
          #line 585 
          ldv_inline_asm();
          #line 586 
          ldv_inline_asm();
        }
        #line 584 
        long tmp_2 = (long)(__ret_warn_on != 0);
      }
    }
    }
  #line 584 
  if ((long)((long)(__ret_warn_once != 0)) != 0L) 
                                                  #line 586 
                                                  return 18446744073709551615ULL;
  #line 587 
  debug_dma_map_single(dev,ptr,size);
  #line 588 
  ;
  #line 588 
  ;
  #line 588 
  ;
  #line 588 
  ;
  #line 588 
  ;
  #line 588 
  ;
  #line 588 
  return dma_map_page_attrs(dev,
                           (struct page *)((__phys_addr((unsigned long)ptr) >> 12) + vmemmap_base),
                           (unsigned long)ptr & 4095UL,size,dir,attrs);
}

#line 1214  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static void __skb_set_hash(struct sk_buff *skb, __u32 hash, bool is_sw, bool is_l4)
{
  #line 1216 
  skb->l4_hash = (unsigned char)is_l4;
  #line 1217 
  skb->sw_hash = (unsigned char)is_sw;
  #line 1218 
  skb->hash = hash;
  #line 1219 
  return;
}

#line 1222  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static void skb_set_hash(struct sk_buff *skb, __u32 hash, enum pkt_hash_types type)
{
  #line 1225 
  __skb_set_hash(skb,hash,(_Bool)0,(_Bool)(type == (unsigned int)PKT_HASH_TYPE_L4));
  #line 1226 
  return;
}

#line 4467  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static void skb_checksum_none_assert(struct sk_buff *skb)
{
  #line 4469 
  return;
}

#line 94  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/xdp.h"
#line 94 
struct xdp_frame *xdp_convert_zc_to_xdp_frame(struct xdp_buff *);
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/xdp.h"
__inline static struct xdp_frame *convert_to_xdp_frame(struct xdp_buff *xdp)
{
  #line 100 
  struct xdp_frame *xdp_frame;
  #line 101 
  int metasize;
  #line 102 
  int headroom;
  #line 104 
  if ((xdp->rxq)->mem.type == 3U) {
    #line 105 
    return xdp_convert_zc_to_xdp_frame(xdp);
  }
  #line 108 
  headroom = (int)(xdp->data - xdp->data_hard_start);
  #line 109 
  metasize = (int)(xdp->data - xdp->data_meta);
  #line 110 
  if (0 > metasize) 
                    #line 110 
                    metasize = 0; else 
                                       #line 110 
                                       metasize = metasize;
  #line 111 
  if ((long)((unsigned int)(headroom - metasize) <= 31U) != 0L) 
                                                                #line 112 
                                                                return (struct xdp_frame *)0;
  #line 115 
  xdp_frame = (struct xdp_frame *)xdp->data_hard_start;
  #line 117 
  xdp_frame->data = xdp->data;
  #line 118 
  xdp_frame->len = (unsigned short)(xdp->data_end - xdp->data);
  #line 119 
  xdp_frame->headroom = (unsigned short)((unsigned int)((unsigned short)headroom) + 65504U);
  #line 120 
  xdp_frame->metasize = (unsigned short)metasize;
  #line 123 
  xdp_frame->mem = (xdp->rxq)->mem;
  #line 125 
  return xdp_frame;
}

#line 3665  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
#line 3665 
gro_result_t napi_gro_receive(struct napi_struct *, struct sk_buff *);
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/etherdevice.h"
#line 32 
__be16 eth_type_trans(struct sk_buff *, struct net_device *);
#line 510  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/if_vlan.h"
__inline static void __vlan_hwaccel_put_tag(struct sk_buff *skb, __be16 vlan_proto, u16 vlan_tci)
{
  #line 513 
  skb->vlan_proto = vlan_proto;
  #line 514 
  skb->vlan_tci = vlan_tci;
  #line 515 
  skb->vlan_present = (unsigned char)1U;
  #line 516 
  return;
}

#line 923  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/filter.h"
#line 923 
void xdp_do_flush_map(void);
#line 472  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_lan_tx_rx.h"
static struct ice_rx_ptype_decoded ice_ptype_lkup[3U] = {[1] = {.ptype = (unsigned int)1U, .known = (unsigned int)1U, .payload_layer = (unsigned int)1U}, {.ptype = (unsigned int)2U, .known = (unsigned int)1U}};
#line 479  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_lan_tx_rx.h"
__inline static struct ice_rx_ptype_decoded ice_decode_rx_desc_ptype(u16 ptype)
{
  #line 481 
  return ice_ptype_lkup[(int)ptype];
}

#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_txrx_lib.h"
__inline static __le64 build_ctob(u64 td_cmd, u64 td_offset, unsigned int size, u64 td_tag)
{
  #line 27 
  return (((td_cmd << 4) | (td_offset << 16)) | ((unsigned long long)size << 34)) | (td_tag << 48);
}

#line 40  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_txrx_lib.h"
__inline static void ice_xdp_ring_update_tail(struct ice_ring *xdp_ring)
{
  #line 42 
  ldv_inline_asm();
  #line 46 
  writel((unsigned int)xdp_ring->next_to_use,(void *)xdp_ring->tail);
  #line 47 
  return;
}

#line 49 
#line 262  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_txrx_lib.c"
void ice_finalize_xdp_rx(struct ice_ring *rx_ring, unsigned int xdp_res);
#line 50  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_txrx_lib.h"
#line 243  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_txrx_lib.c"
int ice_xmit_xdp_buff(struct xdp_buff *xdp, struct ice_ring *xdp_ring);
#line 51  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_txrx_lib.h"
#line 191  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_txrx_lib.c"
int ice_xmit_xdp_ring(void *data, u16 size, struct ice_ring *xdp_ring);
#line 52  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_txrx_lib.h"
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_txrx_lib.c"
void ice_release_rx_desc(struct ice_ring *rx_ring, u32 val);
#line 54  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_txrx_lib.h"
#line 155  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_txrx_lib.c"
void ice_process_skb_fields(struct ice_ring *rx_ring, union ice_32b_rx_flex_desc *rx_desc, struct sk_buff *skb, u8 ptype);
#line 58  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_txrx_lib.h"
#line 177  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_txrx_lib.c"
void ice_receive_skb(struct ice_ring *rx_ring, struct sk_buff *skb, u16 vlan_tag);
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_txrx_lib.c"
void ice_release_rx_desc(struct ice_ring *rx_ring, u32 val)
{
  #line 13 
  u16 prev_ntu = rx_ring->next_to_use;
  #line 15 
  rx_ring->next_to_use = (unsigned short)val;
  #line 18 
  rx_ring->next_to_alloc = (unsigned short)val;
  #line 25 
  val &= 4294967288U;
  #line 26 
  if ((unsigned int)prev_ntu != val) {
    #line 28 
    ldv_inline_asm();
    #line 33 
    writel(val,(void *)rx_ring->tail);
  }
  #line 35 
  return;
}

#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_txrx_lib.c"
static enum pkt_hash_types ice_ptype_to_htype(u8 ptype)
{
  #line 45 
  return PKT_HASH_TYPE_NONE;
}

#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_txrx_lib.c"
static void ice_rx_hash(struct ice_ring *rx_ring, union ice_32b_rx_flex_desc *rx_desc, struct sk_buff *skb, u8 rx_ptype)
{
  #line 59 
  struct ice_32b_rx_flex_desc_nic *nic_mdid;
  #line 60 
  u32 hash;
  #line 62 
  if (((rx_ring->netdev)->features & 274877906944ULL) == 0ULL) 
                                                               #line 63 
                                                               return;
  #line 65 
  if ((unsigned int)rx_desc->wb.rxdid != 2U) 
                                             #line 66 
                                             return;
  #line 68 
  nic_mdid = (struct ice_32b_rx_flex_desc_nic *)rx_desc;
  #line 69 
  hash = nic_mdid->rss_hash;
  #line 70 
  ;
  #line 70 
  ;
  #line 70 
  skb_set_hash(skb,hash,ice_ptype_to_htype((unsigned char)((int)rx_ptype)));
  #line 71 
  return;
}

#line 83  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_txrx_lib.c"
static void ice_rx_csum(struct ice_ring *ring, struct sk_buff *skb, union ice_32b_rx_flex_desc *rx_desc, u8 ptype)
{
  #line 86 
  struct ice_rx_ptype_decoded decoded;
  #line 87 
  u32 rx_error;
  #line 87 
  u32 rx_status;
  #line 88 
  bool ipv4;
  #line 88 
  bool ipv6;
  #line 90 
  rx_status = (unsigned int)rx_desc->wb.status_error0;
  #line 91 
  rx_error = rx_status;
  #line 93 
  decoded = ice_decode_rx_desc_ptype((unsigned short)((int)ptype));
  #line 96 
  skb->ip_summed = (unsigned char)0U;
  #line 97 
  skb_checksum_none_assert(skb);
  #line 100 
  if (((ring->netdev)->features & 549755813888ULL) == 0ULL) 
                                                            #line 101 
                                                            return;
  #line 104 
  if (((unsigned long)rx_status & 8UL) == 0UL) 
                                               #line 105 
                                               return;
  #line 107 
  if ((unsigned int)decoded.known == 0U || (unsigned int)decoded.outer_ip == 0U) 
    #line 108 
    return;
  #line 110 
  ipv4 = (_Bool)(((unsigned int)decoded.outer_ip == 1U && (unsigned int)decoded.outer_ip_ver == 1U) != 0);
  #line 112 
  ipv6 = (_Bool)(((unsigned int)decoded.outer_ip == 1U && (unsigned int)decoded.outer_ip_ver == 2U) != 0);
  #line 115 
  if ((int)ipv4 != 0 && ((unsigned long)rx_error & 80UL) != 0UL) 
                                                                 #line 117 
                                                                 goto checksum_fail;
  else 
    #line 118 
    if ((int)ipv6 != 0 && ((unsigned long)rx_status & 512UL) != 0UL) 
      #line 120 
      goto checksum_fail;
  #line 125 
  if (((unsigned long)rx_error & 32UL) != 0UL) 
                                               #line 126 
                                               goto checksum_fail;
  #line 129 
  switch ((int)decoded.inner_prot) {
    #line 130 
    case 2: 
            #line 130 
    ;
    #line 131 
    case 1: 
            #line 131 
    ;
    #line 132 
    case 3: 
            #line 132 
    ;
    #line 133 
    skb->ip_summed = (unsigned char)1U;
    #line 134 
    default: 
             #line 134 
    ;
    #line 135 
    break;
  }
  #line 137 
  return;
  #line 139 
  checksum_fail: 
                 #line 139 
  ;
  #line 140 
  (((ring->vsi)->back)->hw_csum_rx_error) ++;
  #line 141 
  return;
}

#line 155  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_txrx_lib.c"
void ice_process_skb_fields(struct ice_ring *rx_ring, union ice_32b_rx_flex_desc *rx_desc, struct sk_buff *skb, u8 ptype)
{
  #line 159 
  ice_rx_hash(rx_ring,rx_desc,skb,(unsigned char)((int)ptype));
  #line 162 
  skb->protocol = eth_type_trans(skb,rx_ring->netdev);
  #line 164 
  ice_rx_csum(rx_ring,skb,rx_desc,(unsigned char)((int)ptype));
  #line 165 
  return;
}

#line 177  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_txrx_lib.c"
void ice_receive_skb(struct ice_ring *rx_ring, struct sk_buff *skb, u16 vlan_tag)
{
  #line 179 
  if (((rx_ring->netdev)->features & 256ULL) != 0ULL && ((int)vlan_tag & 4095) != 0) 
    #line 181 
    __vlan_hwaccel_put_tag(skb,(unsigned short)129,(unsigned short)((int)vlan_tag));
  #line 182 
  napi_gro_receive(& (rx_ring->q_vector)->napi,skb);
  #line 183 
  return;
}

#line 191  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_txrx_lib.c"
int ice_xmit_xdp_ring(void *data, u16 size, struct ice_ring *xdp_ring)
{
  #line 194 
  struct ice_tx_desc *tx_desc;
  #line 195 
  struct ice_tx_buf *tx_buf;
  #line 196 
  dma_addr_t dma;
  #line 198 
  int tmp;
  #line 193 
  u16 i = xdp_ring->next_to_use;
  #line 198 
  if ((int)xdp_ring->next_to_clean <= (int)xdp_ring->next_to_use) 
                                                                  #line 198 
                                                                  tmp = (int)xdp_ring->count; else 
                                                                    #line 198 
                                                                    tmp = 0;
  #line 198 
  ;
  #line 198 
  if ((long)((tmp + (int)xdp_ring->next_to_clean) - (int)xdp_ring->next_to_use != 1) == 0L) {
    #line 199 
    (xdp_ring->__anonCompField_ice_ring_197.tx_stats.tx_busy) ++;
    #line 200 
    return 1;
  }
  #line 203 
  dma = dma_map_single_attrs(xdp_ring->dev,data,(unsigned long)size,(enum dma_data_direction)DMA_TO_DEVICE,0UL);
  #line 204 
  if (dma_mapping_error(xdp_ring->dev,dma) != 0) 
                                                 #line 205 
                                                 return 1;
  #line 207 
  tx_buf = xdp_ring->__anonCompField_ice_ring_196.tx_buf + (unsigned long)i;
  #line 208 
  tx_buf->bytecount = (unsigned int)size;
  #line 209 
  tx_buf->gso_segs = (unsigned short)1U;
  #line 210 
  tx_buf->__anonCompField_ice_tx_buf_192.raw_buf = data;
  #line 213 
  tx_buf->len = (unsigned int)size;
  #line 214 
  tx_buf->dma = dma;
  #line 216 
  tx_desc = (struct ice_tx_desc *)xdp_ring->desc + (unsigned long)i;
  #line 217 
  tx_desc->buf_addr = dma;
  #line 218 
  tx_desc->cmd_type_offset_bsz = build_ctob(3ULL,0ULL,(unsigned int)size,0ULL);
  #line 219 
  ldv_inline_asm();
  #line 226 
  i = (u16)((int)i + 1);
  #line 227 
  if ((int)xdp_ring->count == (int)i) 
                                      #line 228 
                                      i = (unsigned short)0U;
  #line 230 
  tx_buf->next_to_watch = tx_desc;
  #line 231 
  xdp_ring->next_to_use = i;
  #line 233 
  return 2;
}

#line 243  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_txrx_lib.c"
int ice_xmit_xdp_buff(struct xdp_buff *xdp, struct ice_ring *xdp_ring)
{
  #line 245 
  struct xdp_frame *xdpf = convert_to_xdp_frame(xdp);
  #line 247 
  if ((long)(xdpf == (struct xdp_frame *)0) != 0L) 
                                                   #line 248 
                                                   return 1;
  #line 250 
  return ice_xmit_xdp_ring(xdpf->data,(unsigned short)((int)xdpf->len),
                          xdp_ring);
}

#line 262  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_txrx_lib.c"
void ice_finalize_xdp_rx(struct ice_ring *rx_ring, unsigned int xdp_res)
{
  #line 264 
  if (((unsigned long)xdp_res & 4UL) != 0UL) 
                                             #line 265 
                                             xdp_do_flush_map();
  #line 267 
  if (((unsigned long)xdp_res & 2UL) != 0UL) {
    #line 268 
    struct ice_ring *xdp_ring = *((rx_ring->vsi)->xdp_rings + (unsigned long)rx_ring->q_index);
    #line 271 
    ice_xdp_ring_update_tail(xdp_ring);
  }
  #line 273 
  return;
}

#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kasan-checks.h"
__inline static bool kasan_check_read(void *p, unsigned int size)
{
  #line 36 
  return (_Bool)1;
}

#line 204  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/bitops.h"
__inline static bool constant_test_bit(long nr, unsigned long *addr)
{
  #line 207 
  return (_Bool)(((*(addr + (unsigned long)(nr >> 6)) >> (nr & 63L)) & 1UL) != 0UL);
}

#line 210  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/bitops.h"
__inline static bool variable_test_bit(long nr, unsigned long *addr)
{
  #line 212 
  bool oldbit;
  #line 213 
  ldv_inline_asm();
  #line 219 
  return oldbit;
}

#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bitops/instrumented-atomic.h"
#line 119  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ice/ice.ko/concurrency safety/0/concurrency safety/weaver/ice_dcb_nl.i.aux"
static void cif_set_bit(long nr, unsigned long *addr);
#line 44  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bitops/instrumented-atomic.h"
#line 126  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ice/ice.ko/concurrency safety/0/concurrency safety/weaver/ice_dcb_nl.i.aux"
static void cif_clear_bit(long nr, unsigned long *addr);
#line 108  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bitops/instrumented-non-atomic.h"
__inline static bool test_bit(long nr, unsigned long *addr)
{
  #line 111 
  int tmp_1;
  #line 110 
  kasan_check_read((void *)(addr + (unsigned long)(nr / 64L)),8U);
  #line 111 
  if (0 != 0) {
    #line 111 
    tmp_1 = (int)constant_test_bit(nr,addr) != 0;
  }
  else {
    #line 111 
    tmp_1 = (int)variable_test_bit(nr,addr) != 0;
  }
  #line 111 
  return (_Bool)(tmp_1 != 0);
}

#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/jump_label.h"
__inline static bool arch_static_branch(struct static_key *key, bool branch)
{
  #line 27 
  ldv_inline_asm();
  #line 28 
  ldv_inline_asm();
  #line 34 
  return (_Bool)0;
  #line 35 
  l_yes: 
         #line 35 
  ;
  #line 36 
  return (_Bool)1;
}

#line 64  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dynamic_debug.h"
#line 64 
void __dynamic_dev_dbg(struct _ddebug *, struct device *, char * , ...);
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/string_64.h"
#line 14 
void *memcpy(void *, void *, size_t);
#line 18 
#line 18 
void *memset(void *, int, size_t);
#line 26  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ice/ice.ko/concurrency safety/0/concurrency safety/weaver/ice_dcb_nl.i.aux"
#line 798 
static void cif_mutex_lock_tc_mutex_of_ice_pf(struct mutex *lock);
#line 29 
#line 29 
void ldv_mutex_model_lock(struct mutex *, char *);
#line 31 
#line 31 
void ldv_mutex_model_unlock(struct mutex *, char *);
#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/bitmap.h"
#line 21 
void ldv_set_bit(long nr, unsigned long *addr);
#line 22 
#line 22 
void ldv_clear_bit(long nr, unsigned long *addr);
#line 185  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mutex.h"
#line 805  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ice/ice.ko/concurrency safety/0/concurrency safety/weaver/ice_dcb_nl.i.aux"
static void cif_mutex_unlock_tc_mutex_of_ice_pf(struct mutex *lock);
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/io.h"
__inline static unsigned int readl(void *addr)
{
  #line 59 
  unsigned int ret;
  #line 60 
  ldv_inline_asm();
  #line 59 
  return ret;
}

#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/delay.h"
#line 61 
void usleep_range(unsigned long, unsigned long);
#line 1718  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
#line 1718 
void _dev_info(struct device *, char * , ...);
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/dcbnl.h"
#line 21 
u8 dcb_getapp(struct net_device *, struct dcb_app *);
#line 22 
#line 22 
int dcb_ieee_setapp(struct net_device *, struct dcb_app *);
#line 23 
#line 23 
int dcb_ieee_delapp(struct net_device *, struct dcb_app *);
#line 39 
#line 39 
int dcbnl_ieee_notify(struct net_device *, int, int, u32, u32);
#line 2203  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void *netdev_priv(struct net_device *dev)
{
  #line 2205 
  return (void *)((char *)dev + 3328UL);
}

#line 2657 
#line 2657 
int dev_open(struct net_device *, struct netlink_ext_ack *);
#line 2658 
#line 2658 
void dev_close(struct net_device *);
#line 4258 
#line 4258 
void netdev_state_change(struct net_device *);
#line 438  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice.h"
__inline static struct ice_pf *ice_netdev_to_pf(struct net_device *netdev)
{
  #line 440 
  struct ice_netdev_priv *np = netdev_priv(netdev);
  #line 442 
  return (np->vsi)->back;
}

#line 482  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice.h"
__inline static struct ice_vsi *ice_get_main_vsi(struct ice_pf *pf)
{
  #line 484 
  if (pf->vsi != (struct ice_vsi **)0) 
                                       #line 485 
                                       return *(pf->vsi);
  #line 487 
  return (struct ice_vsi *)0;
}

#line 78  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_lib.h"
#line 78 
bool ice_is_reset_in_progress(unsigned long *state);
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_dcb_lib.h"
#line 22 
int ice_pf_dcb_cfg(struct ice_pf *pf, struct ice_dcbx_cfg *new_cfg, bool locked);
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_dcb_nl.h"
#line 922  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_dcb_nl.c"
void ice_dcbnl_setup(struct ice_vsi *vsi);
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_dcb_nl.h"
#line 824  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_dcb_nl.c"
void ice_dcbnl_set_all(struct ice_vsi *vsi);
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_dcb_nl.h"
#line 900  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_dcb_nl.c"
void ice_dcbnl_flush_apps(struct ice_pf *pf, struct ice_dcbx_cfg *old_cfg, struct ice_dcbx_cfg *new_cfg);
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_dcb_nl.c"
static void ice_dcbnl_devreset(struct net_device *netdev)
{
  #line 18 
  struct ice_pf *pf = ice_netdev_to_pf(netdev);
  #line 20 
  while (1) {
    #line 20 
    if (! ((int)ice_is_reset_in_progress((unsigned long *)(& pf->state)) != 0)) 
      #line 20 
      break;
    #line 21 
    usleep_range(1000UL,2000UL);
  }
  #line 23 
  cif_set_bit(5L,(unsigned long *)(& pf->state));
  #line 24 
  dev_close(netdev);
  #line 25 
  netdev_state_change(netdev);
  #line 26 
  dev_open(netdev,(struct netlink_ext_ack *)0);
  #line 27 
  netdev_state_change(netdev);
  #line 28 
  cif_clear_bit(5L,(unsigned long *)(& pf->state));
  #line 29 
  return;
}

#line 36  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_dcb_nl.c"
static int ice_dcbnl_getets(struct net_device *netdev, struct ieee_ets *ets)
{
  #line 38 
  struct ice_dcbx_cfg *dcbxcfg;
  #line 39 
  struct ice_port_info *pi;
  #line 40 
  struct ice_pf *pf;
  #line 42 
  pf = ice_netdev_to_pf(netdev);
  #line 43 
  pi = pf->hw.port_info;
  #line 44 
  dcbxcfg = & pi->local_dcbx_cfg;
  #line 46 
  ets->willing = dcbxcfg->etscfg.willing;
  #line 47 
  ets->ets_cap = dcbxcfg->etscfg.maxtcs;
  #line 48 
  ets->cbs = dcbxcfg->etscfg.cbs;
  #line 49 
  memcpy((void *)(& ets->tc_tx_bw),(void *)(& dcbxcfg->etscfg.tcbwtable),8UL);
  #line 50 
  memcpy((void *)(& ets->tc_rx_bw),(void *)(& dcbxcfg->etscfg.tcbwtable),8UL);
  #line 51 
  memcpy((void *)(& ets->tc_tsa),(void *)(& dcbxcfg->etscfg.tsatable),8UL);
  #line 52 
  memcpy((void *)(& ets->prio_tc),(void *)(& dcbxcfg->etscfg.prio_table),8UL);
  #line 53 
  memcpy((void *)(& ets->tc_reco_bw),(void *)(& dcbxcfg->etsrec.tcbwtable),8UL);
  #line 55 
  memcpy((void *)(& ets->tc_reco_tsa),(void *)(& dcbxcfg->etsrec.tsatable),8UL);
  #line 57 
  memcpy((void *)(& ets->reco_prio_tc),(void *)(& dcbxcfg->etscfg.prio_table),8UL);
  #line 60 
  return 0;
}

#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_dcb_nl.c"
static int ice_dcbnl_setets(struct net_device *netdev, struct ieee_ets *ets)
{
  #line 71 
  struct ice_dcbx_cfg *new_cfg;
  #line 73 
  int err;
  #line 73 
  int i;
  #line 70 
  struct ice_pf *pf = ice_netdev_to_pf(netdev);
  #line 72 
  int bwcfg = 0;
  #line 72 
  int bwrec = 0;
  #line 73 
  int max_tc = 0;
  #line 75 
  if (((int)pf->dcbx_cap & 2) != 0 || ((int)pf->dcbx_cap & 8) == 0) 
                                                                    #line 77 
                                                                    return -22;
  #line 79 
  new_cfg = & (pf->hw.port_info)->desired_dcbx_cfg;
  #line 81 
  cif_mutex_lock_tc_mutex_of_ice_pf(& pf->tc_mutex);
  #line 83 
  new_cfg->etscfg.willing = ets->willing;
  #line 84 
  new_cfg->etscfg.cbs = ets->cbs;
  #line 85 
  i = 0;
  #line 85 
  while (i <= 7) {
    #line 86 
    new_cfg->etscfg.tcbwtable[i] = ets->tc_tx_bw[i];
    #line 87 
    bwcfg = (int)ets->tc_tx_bw[i] + bwcfg;
    #line 88 
    new_cfg->etscfg.tsatable[i] = ets->tc_tsa[i];
    #line 89 
    new_cfg->etscfg.prio_table[i] = ets->prio_tc[i];
    #line 90 
    if ((int)ets->prio_tc[i] > max_tc) 
                                       #line 91 
                                       max_tc = (int)ets->prio_tc[i];
    #line 92 
    new_cfg->etsrec.tcbwtable[i] = ets->tc_reco_bw[i];
    #line 93 
    bwrec = (int)ets->tc_reco_bw[i] + bwrec;
    #line 94 
    new_cfg->etsrec.tsatable[i] = ets->tc_reco_tsa[i];
    #line 95 
    new_cfg->etsrec.prio_table[i] = ets->reco_prio_tc[i];
    #line 85 
    i ++;
  }
  #line 102 
  if (max_tc != 0) 
                   #line 103 
                   max_tc ++; else 
                                   #line 105 
                                   max_tc = 8;
  #line 107 
  new_cfg->etscfg.maxtcs = (unsigned char)max_tc;
  #line 109 
  if (bwcfg == 0) 
                  #line 110 
                  new_cfg->etscfg.tcbwtable[0] = (unsigned char)100U;
  #line 112 
  if (bwrec == 0) 
                  #line 113 
                  new_cfg->etsrec.tcbwtable[0] = (unsigned char)100U;
  #line 115 
  err = ice_pf_dcb_cfg(pf,new_cfg,(_Bool)1);
  #line 117 
  if (err == 0) 
                #line 118 
                ice_dcbnl_devreset(netdev);
  #line 119 
  if (err == 1) 
                #line 120 
                err = 0;
  #line 122 
  cif_mutex_unlock_tc_mutex_of_ice_pf(& pf->tc_mutex);
  #line 123 
  return err;
}

#line 135  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_dcb_nl.c"
static int ice_dcbnl_getnumtcs(struct net_device *dev, int tcid, u8 *num)
{
  #line 137 
  struct ice_pf *pf = ice_netdev_to_pf(dev);
  #line 139 
  if (! test_bit(4L,(unsigned long *)(& pf->flags))) 
                                                     #line 140 
                                                     return -22;
  #line 142 
  *num = (unsigned char)8U;
  #line 143 
  return 0;
}

#line 150  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_dcb_nl.c"
static u8 ice_dcbnl_getdcbx(struct net_device *netdev)
{
  #line 152 
  struct ice_pf *pf = ice_netdev_to_pf(netdev);
  #line 154 
  return (unsigned char)pf->dcbx_cap;
}

#line 162  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_dcb_nl.c"
static u8 ice_dcbnl_setdcbx(struct net_device *netdev, u8 mode)
{
  #line 164 
  struct ice_pf *pf = ice_netdev_to_pf(netdev);
  #line 167 
  if ((((int)mode & 2) != 0 || ((int)mode & 8) != 0 && ((int)mode & 4) != 0) || ((int)mode & 1) == 0) 
    #line 170 
    return (unsigned char)1U;
  #line 173 
  if ((int)((unsigned short)mode) == (int)pf->dcbx_cap) 
                                                        #line 174 
                                                        return (unsigned char)1U;
  #line 176 
  pf->dcbx_cap = (unsigned short)mode;
  #line 177 
  if (((int)mode & 4) != 0) 
                            #line 178 
                            (pf->hw.port_info)->local_dcbx_cfg.dcbx_mode = (unsigned char)1U; else 
                                                                    #line 180 
                                                                    (pf->hw.port_info)->local_dcbx_cfg.dcbx_mode = (unsigned char)2U;
  #line 182 
  _dev_info(& (pf->pdev)->dev,(char *)"DCBx mode = 0x%x\n",(int)mode);
  #line 183 
  return (unsigned char)0U;
}

#line 191  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_dcb_nl.c"
static void ice_dcbnl_get_perm_hw_addr(struct net_device *netdev, u8 *perm_addr)
{
  #line 195 
  int i;
  #line 195 
  int j;
  #line 193 
  struct ice_pf *pf = ice_netdev_to_pf(netdev);
  #line 194 
  struct ice_port_info *pi = pf->hw.port_info;
  #line 197 
  memset((void *)perm_addr,255,32UL);
  #line 199 
  i = 0;
  #line 199 
  while ((int)netdev->addr_len > i) {
    #line 200 
    *(perm_addr + (unsigned long)i) = pi->mac.perm_addr[i];
    #line 199 
    i ++;
  }
  #line 202 
  j = 0;
  #line 202 
  while ((int)netdev->addr_len > j) {
    #line 203 
    *(perm_addr + (unsigned long)i) = pi->mac.perm_addr[j];
    #line 202 
    j ++;
    #line 202 
    i ++;
  }
  #line 204 
  return;
}

#line 211  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_dcb_nl.c"
static void ice_get_pfc_delay(struct ice_hw *hw, u16 *delay)
{
  #line 213 
  u32 val;
  #line 215 
  val = readl((void *)(hw->hw_addr + 536576U));
  #line 216 
  *delay = (unsigned short)(val >> 16);
  #line 217 
  return;
}

#line 224  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_dcb_nl.c"
static int ice_dcbnl_getpfc(struct net_device *netdev, struct ieee_pfc *pfc)
{
  #line 228 
  struct ice_dcbx_cfg *dcbxcfg;
  #line 229 
  int i;
  #line 226 
  struct ice_pf *pf = ice_netdev_to_pf(netdev);
  #line 227 
  struct ice_port_info *pi = pf->hw.port_info;
  #line 231 
  dcbxcfg = & pi->local_dcbx_cfg;
  #line 232 
  pfc->pfc_cap = dcbxcfg->pfc.pfccap;
  #line 233 
  pfc->pfc_en = dcbxcfg->pfc.pfcena;
  #line 234 
  pfc->mbc = dcbxcfg->pfc.mbc;
  #line 235 
  ice_get_pfc_delay(& pf->hw,& pfc->delay);
  #line 237 
  i = 0;
  #line 237 
  while (i <= 7) {
    #line 238 
    pfc->requests[i] = pf->stats.priority_xoff_tx[i];
    #line 239 
    pfc->indications[i] = pf->stats.priority_xoff_rx[i];
    #line 237 
    i ++;
  }
  #line 242 
  return 0;
}

#line 250  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_dcb_nl.c"
static int ice_dcbnl_setpfc(struct net_device *netdev, struct ieee_pfc *pfc)
{
  #line 253 
  struct ice_dcbx_cfg *new_cfg;
  #line 254 
  int err;
  #line 252 
  struct ice_pf *pf = ice_netdev_to_pf(netdev);
  #line 256 
  if (((int)pf->dcbx_cap & 2) != 0 || ((int)pf->dcbx_cap & 8) == 0) 
                                                                    #line 258 
                                                                    return -22;
  #line 260 
  cif_mutex_lock_tc_mutex_of_ice_pf(& pf->tc_mutex);
  #line 262 
  new_cfg = & (pf->hw.port_info)->desired_dcbx_cfg;
  #line 264 
  if ((unsigned int)pfc->pfc_cap != 0U) 
                                        #line 265 
                                        new_cfg->pfc.pfccap = pfc->pfc_cap; else 
                                                                    #line 267 
                                                                    new_cfg->pfc.pfccap = (unsigned char)pf->hw.func_caps.common_cap.maxtc;
  #line 269 
  new_cfg->pfc.pfcena = pfc->pfc_en;
  #line 271 
  err = ice_pf_dcb_cfg(pf,new_cfg,(_Bool)1);
  #line 272 
  if (err == 0) 
                #line 273 
                ice_dcbnl_devreset(netdev);
  #line 274 
  if (err == 1) 
                #line 275 
                err = 0;
  #line 276 
  cif_mutex_unlock_tc_mutex_of_ice_pf(& pf->tc_mutex);
  #line 277 
  return err;
}

#line 287  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_dcb_nl.c"
static void ice_dcbnl_get_pfc_cfg(struct net_device *netdev, int prio, u8 *setting)
{
  #line 289 
  struct ice_pf *pf = ice_netdev_to_pf(netdev);
  #line 290 
  struct ice_port_info *pi = pf->hw.port_info;
  #line 292 
  if (((int)pf->dcbx_cap & 2) != 0 || ((int)pf->dcbx_cap & 4) == 0) 
                                                                    #line 294 
                                                                    return;
  #line 296 
  if (prio > 7) 
                #line 297 
                return;
  #line 299 
  *setting = (unsigned char)((unsigned int)((unsigned char)((int)pi->local_dcbx_cfg.pfc.pfcena >> prio)) & 1U);
  {
    #line 300 
    bool branch;
    #line 300 
    struct _ddebug __UNIQUE_ID_ddebug536 = {.modname = (char *)"ice", .function = (char *)"ice_dcbnl_get_pfc_cfg", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_dcb_nl.c", .format = (char *)"Get PFC Config up=%d, setting=%d, pfcenable=0x%x\n", .lineno = (unsigned int)300U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 300 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug536.key.dd_key_false.key,(_Bool)0);
    #line 300 
    if ((long)((long)((int)branch != 0)) != 0L) 
                                                #line 300 
                                                __dynamic_dev_dbg(& __UNIQUE_ID_ddebug536,& (pf->pdev)->dev,(char *)"Get PFC Config up=%d, setting=%d, pfcenable=0x%x\n",prio,(int)*setting,(int)pi->local_dcbx_cfg.pfc.pfcena);
  }
  #line 302 
  return;
}

#line 311  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_dcb_nl.c"
static void ice_dcbnl_set_pfc_cfg(struct net_device *netdev, int prio, u8 set)
{
  #line 314 
  struct ice_dcbx_cfg *new_cfg;
  #line 313 
  struct ice_pf *pf = ice_netdev_to_pf(netdev);
  #line 316 
  if (((int)pf->dcbx_cap & 2) != 0 || ((int)pf->dcbx_cap & 4) == 0) 
                                                                    #line 318 
                                                                    return;
  #line 320 
  if (prio > 7) 
                #line 321 
                return;
  #line 323 
  new_cfg = & (pf->hw.port_info)->desired_dcbx_cfg;
  #line 325 
  new_cfg->pfc.pfccap = (unsigned char)pf->hw.func_caps.common_cap.maxtc;
  #line 326 
  if ((unsigned int)set != 0U) 
                               #line 327 
                               new_cfg->pfc.pfcena = (unsigned char)((int)new_cfg->pfc.pfcena | (int)((unsigned char)(1UL << prio))); else 
                                                                    #line 329 
                                                                    new_cfg->pfc.pfcena = (unsigned char)((int)new_cfg->pfc.pfcena & ~ ((int)((unsigned char)(1UL << prio))));
  {
    #line 331 
    bool branch;
    #line 331 
    struct _ddebug __UNIQUE_ID_ddebug537 = {.modname = (char *)"ice", .function = (char *)"ice_dcbnl_set_pfc_cfg", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_dcb_nl.c", .format = (char *)"Set PFC config UP:%d set:%d pfcena:0x%x\n", .lineno = (unsigned int)331U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 331 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug537.key.dd_key_false.key,(_Bool)0);
    #line 331 
    if ((long)((long)((int)branch != 0)) != 0L) 
                                                #line 331 
                                                __dynamic_dev_dbg(& __UNIQUE_ID_ddebug537,& (pf->pdev)->dev,(char *)"Set PFC config UP:%d set:%d pfcena:0x%x\n",prio,(int)set,(int)new_cfg->pfc.pfcena);
  }
  #line 333 
  return;
}

#line 339  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_dcb_nl.c"
static u8 ice_dcbnl_getpfcstate(struct net_device *netdev)
{
  #line 341 
  struct ice_pf *pf = ice_netdev_to_pf(netdev);
  #line 342 
  struct ice_port_info *pi = pf->hw.port_info;
  #line 345 
  if ((unsigned int)pi->local_dcbx_cfg.pfc.pfcena != 0U) 
                                                         #line 346 
                                                         return (unsigned char)1U;
  #line 348 
  return (unsigned char)0U;
}

#line 355  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_dcb_nl.c"
static u8 ice_dcbnl_getstate(struct net_device *netdev)
{
  #line 357 
  struct ice_pf *pf = ice_netdev_to_pf(netdev);
  #line 358 
  u8 state = (unsigned char)0U;
  #line 360 
  state = (u8)test_bit(4L,(unsigned long *)(& pf->flags));
  {
    #line 362 
    bool branch;
    #line 362 
    struct _ddebug __UNIQUE_ID_ddebug538 = {.modname = (char *)"ice", .function = (char *)"ice_dcbnl_getstate", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_dcb_nl.c", .format = (char *)"DCB enabled state = %d\n", .lineno = (unsigned int)362U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 362 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug538.key.dd_key_false.key,(_Bool)0);
    #line 362 
    if ((long)((long)((int)branch != 0)) != 0L) 
                                                #line 362 
                                                __dynamic_dev_dbg(& __UNIQUE_ID_ddebug538,& (pf->pdev)->dev,(char *)"DCB enabled state = %d\n",(int)state);
  }
  #line 363 
  return state;
}

#line 371  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_dcb_nl.c"
static u8 ice_dcbnl_setstate(struct net_device *netdev, u8 state)
{
  #line 373 
  struct ice_pf *pf = ice_netdev_to_pf(netdev);
  #line 375 
  if (((int)pf->dcbx_cap & 2) != 0 || ((int)pf->dcbx_cap & 4) == 0) 
                                                                    #line 377 
                                                                    return (unsigned char)1U;
  #line 380 
  ;
  #line 380 
  if (((unsigned int)state != 0U) == (int)test_bit(5L,(unsigned long *)(& pf->flags))) 
    #line 381 
    return (unsigned char)1U;
  #line 383 
  if ((unsigned int)state != 0U) {
    #line 384 
    cif_set_bit(5L,(unsigned long *)(& pf->flags));
    #line 385 
    memcpy((void *)(& (pf->hw.port_info)->desired_dcbx_cfg),(void *)(& (pf->hw.port_info)->local_dcbx_cfg),196UL);
  }
  else 
       #line 389 
       cif_clear_bit(5L,(unsigned long *)(& pf->flags));
  #line 392 
  return (unsigned char)2U;
}

#line 405  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_dcb_nl.c"
static void ice_dcbnl_get_pg_tc_cfg_tx(struct net_device *netdev, int prio, u8 *prio_type, u8 *pgid, u8 *bw_pct, u8 *up_map)
{
  #line 410 
  struct ice_pf *pf = ice_netdev_to_pf(netdev);
  #line 411 
  struct ice_port_info *pi = pf->hw.port_info;
  #line 413 
  if (((int)pf->dcbx_cap & 2) != 0 || ((int)pf->dcbx_cap & 4) == 0) 
                                                                    #line 415 
                                                                    return;
  #line 417 
  if (prio > 7) 
                #line 418 
                return;
  #line 420 
  *pgid = pi->local_dcbx_cfg.etscfg.prio_table[prio];
  {
    #line 421 
    bool branch;
    #line 421 
    struct _ddebug __UNIQUE_ID_ddebug539 = {.modname = (char *)"ice", .function = (char *)"ice_dcbnl_get_pg_tc_cfg_tx", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_dcb_nl.c", .format = (char *)"Get PG config prio=%d tc=%d\n", .lineno = (unsigned int)421U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 421 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug539.key.dd_key_false.key,(_Bool)0);
    #line 421 
    if ((long)((long)((int)branch != 0)) != 0L) 
                                                #line 421 
                                                __dynamic_dev_dbg(& __UNIQUE_ID_ddebug539,& (pf->pdev)->dev,(char *)"Get PG config prio=%d tc=%d\n",prio,(int)*pgid);
  }
  #line 423 
  return;
}

#line 435  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_dcb_nl.c"
static void ice_dcbnl_set_pg_tc_cfg_tx(struct net_device *netdev, int tc, u8 prio_type, u8 bwg_id, u8 bw_pct, u8 up_map)
{
  #line 441 
  struct ice_dcbx_cfg *new_cfg;
  #line 442 
  int i;
  #line 440 
  struct ice_pf *pf = ice_netdev_to_pf(netdev);
  #line 444 
  if (((int)pf->dcbx_cap & 2) != 0 || ((int)pf->dcbx_cap & 4) == 0) 
                                                                    #line 446 
                                                                    return;
  #line 448 
  if (tc > 7) 
              #line 449 
              return;
  #line 451 
  new_cfg = & (pf->hw.port_info)->desired_dcbx_cfg;
  #line 455 
  i = 0;
  #line 455 
  while (i <= 7) {
    #line 456 
    if ((((unsigned long)up_map >> i) & 1UL) != 0UL) 
                                                     #line 457 
                                                     new_cfg->etscfg.prio_table[i] = (unsigned char)tc;
    #line 455 
    i ++;
  }
  #line 459 
  new_cfg->etscfg.tsatable[tc] = (unsigned char)2U;
  #line 460 
  return;
}

#line 469  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_dcb_nl.c"
static void ice_dcbnl_get_pg_bwg_cfg_tx(struct net_device *netdev, int pgid, u8 *bw_pct)
{
  #line 471 
  struct ice_pf *pf = ice_netdev_to_pf(netdev);
  #line 472 
  struct ice_port_info *pi = pf->hw.port_info;
  #line 474 
  if (((int)pf->dcbx_cap & 2) != 0 || ((int)pf->dcbx_cap & 4) == 0) 
                                                                    #line 476 
                                                                    return;
  #line 478 
  if (pgid > 7) 
                #line 479 
                return;
  #line 481 
  *bw_pct = pi->local_dcbx_cfg.etscfg.tcbwtable[pgid];
  {
    #line 482 
    bool branch;
    #line 482 
    struct _ddebug __UNIQUE_ID_ddebug540 = {.modname = (char *)"ice", .function = (char *)"ice_dcbnl_get_pg_bwg_cfg_tx", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_dcb_nl.c", .format = (char *)"Get PG BW config tc=%d bw_pct=%d\n", .lineno = (unsigned int)482U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 482 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug540.key.dd_key_false.key,(_Bool)0);
    #line 482 
    if ((long)((long)((int)branch != 0)) != 0L) 
                                                #line 482 
                                                __dynamic_dev_dbg(& __UNIQUE_ID_ddebug540,& (pf->pdev)->dev,(char *)"Get PG BW config tc=%d bw_pct=%d\n",pgid,(int)*bw_pct);
  }
  #line 484 
  return;
}

#line 493  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_dcb_nl.c"
static void ice_dcbnl_set_pg_bwg_cfg_tx(struct net_device *netdev, int pgid, u8 bw_pct)
{
  #line 496 
  struct ice_dcbx_cfg *new_cfg;
  #line 495 
  struct ice_pf *pf = ice_netdev_to_pf(netdev);
  #line 498 
  if (((int)pf->dcbx_cap & 2) != 0 || ((int)pf->dcbx_cap & 4) == 0) 
                                                                    #line 500 
                                                                    return;
  #line 502 
  if (pgid > 7) 
                #line 503 
                return;
  #line 505 
  new_cfg = & (pf->hw.port_info)->desired_dcbx_cfg;
  #line 507 
  new_cfg->etscfg.tcbwtable[pgid] = bw_pct;
  #line 508 
  return;
}

#line 520  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_dcb_nl.c"
static void ice_dcbnl_get_pg_tc_cfg_rx(struct net_device *netdev, int prio, u8 *prio_type, u8 *pgid, u8 *bw_pct, u8 *up_map)
{
  #line 525 
  struct ice_pf *pf = ice_netdev_to_pf(netdev);
  #line 526 
  struct ice_port_info *pi = pf->hw.port_info;
  #line 528 
  if (((int)pf->dcbx_cap & 2) != 0 || ((int)pf->dcbx_cap & 4) == 0) 
                                                                    #line 530 
                                                                    return;
  #line 532 
  if (prio > 7) 
                #line 533 
                return;
  #line 535 
  *pgid = pi->local_dcbx_cfg.etscfg.prio_table[prio];
  #line 536 
  return;
}

#line 545  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_dcb_nl.c"
static void ice_dcbnl_get_pg_bwg_cfg_rx(struct net_device *netdev, int pgid, u8 *bw_pct)
{
  #line 548 
  struct ice_pf *pf = ice_netdev_to_pf(netdev);
  #line 550 
  if (((int)pf->dcbx_cap & 2) != 0 || ((int)pf->dcbx_cap & 4) == 0) 
                                                                    #line 552 
                                                                    return;
  #line 554 
  *bw_pct = (unsigned char)0U;
  #line 555 
  return;
}

#line 563  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_dcb_nl.c"
static u8 ice_dcbnl_get_cap(struct net_device *netdev, int capid, u8 *cap)
{
  #line 565 
  struct ice_pf *pf = ice_netdev_to_pf(netdev);
  #line 567 
  if (! test_bit(4L,(unsigned long *)(& pf->flags))) 
                                                     #line 568 
                                                     return (unsigned char)1U;
  #line 570 
  switch (capid) {
    #line 571 
    case 2: 
            #line 571 
    ;
    #line 572 
    *cap = (unsigned char)1U;
    #line 573 
    break;
    #line 574 
    case 3: 
            #line 574 
    ;
    #line 575 
    *cap = (unsigned char)1U;
    #line 576 
    break;
    #line 577 
    case 4: 
            #line 577 
    ;
    #line 578 
    *cap = (unsigned char)0U;
    #line 579 
    break;
    #line 580 
    case 5: 
            #line 580 
    ;
    #line 581 
    *cap = (unsigned char)128U;
    #line 582 
    break;
    #line 583 
    case 6: 
            #line 583 
    ;
    #line 584 
    *cap = (unsigned char)128U;
    #line 585 
    break;
    #line 586 
    case 7: 
            #line 586 
    ;
    #line 587 
    *cap = (unsigned char)0U;
    #line 588 
    break;
    #line 589 
    case 8: 
            #line 589 
    ;
    #line 590 
    *cap = (unsigned char)0U;
    #line 591 
    break;
    #line 592 
    case 9: 
            #line 592 
    ;
    #line 593 
    *cap = (unsigned char)pf->dcbx_cap;
    #line 594 
    break;
    #line 595 
    default: 
             #line 595 
    ;
    #line 596 
    *cap = (unsigned char)0U;
    #line 597 
    break;
  }
  {
    #line 600 
    bool branch;
    #line 600 
    struct _ddebug __UNIQUE_ID_ddebug541 = {.modname = (char *)"ice", .function = (char *)"ice_dcbnl_get_cap", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_dcb_nl.c", .format = (char *)"DCBX Get Capability cap=%d capval=0x%x\n", .lineno = (unsigned int)600U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 600 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug541.key.dd_key_false.key,(_Bool)0);
    #line 600 
    if ((long)((long)((int)branch != 0)) != 0L) 
                                                #line 600 
                                                __dynamic_dev_dbg(& __UNIQUE_ID_ddebug541,& (pf->pdev)->dev,(char *)"DCBX Get Capability cap=%d capval=0x%x\n",capid,(int)*cap);
  }
  #line 602 
  return (unsigned char)0U;
}

#line 611  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_dcb_nl.c"
static int ice_dcbnl_getapp(struct net_device *netdev, u8 idtype, u16 id)
{
  #line 613 
  struct ice_pf *pf = ice_netdev_to_pf(netdev);
  #line 614 
  struct dcb_app app = {.selector = idtype, .priority = (unsigned char)0, .protocol = id};
  #line 619 
  if (((int)pf->dcbx_cap & 2) != 0 || ((int)pf->dcbx_cap & 4) == 0) 
                                                                    #line 621 
                                                                    return -22;
  #line 623 
  return (int)dcb_getapp(netdev,& app);
}

#line 632  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_dcb_nl.c"
static bool ice_dcbnl_find_app(struct ice_dcbx_cfg *cfg, struct ice_dcb_app_priority_table *app)
{
  #line 635 
  int i;
  #line 637 
  i = 0;
  #line 637 
  while (cfg->numapps > (unsigned int)i) {
    #line 638 
    if (((int)app->selector == (int)cfg->app[i].selector && (int)app->prot_id == (int)cfg->app[i].prot_id) && (int)app->priority == (int)cfg->app[i].priority) 
      #line 641 
      return (_Bool)1;
    #line 637 
    i ++;
  }
  #line 644 
  return (_Bool)0;
}

#line 652  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_dcb_nl.c"
static int ice_dcbnl_setapp(struct net_device *netdev, struct dcb_app *app)
{
  #line 655 
  struct ice_dcb_app_priority_table new_app;
  #line 656 
  struct ice_dcbx_cfg *old_cfg;
  #line 656 
  struct ice_dcbx_cfg *new_cfg;
  #line 657 
  int ret;
  #line 686 
  u32 tmp_1;
  #line 654 
  struct ice_pf *pf = ice_netdev_to_pf(netdev);
  #line 659 
  if (((int)pf->dcbx_cap & 2) != 0 || ((int)pf->dcbx_cap & 8) == 0) 
                                                                    #line 661 
                                                                    return -22;
  #line 663 
  cif_mutex_lock_tc_mutex_of_ice_pf(& pf->tc_mutex);
  #line 665 
  new_cfg = & (pf->hw.port_info)->desired_dcbx_cfg;
  #line 667 
  old_cfg = & (pf->hw.port_info)->local_dcbx_cfg;
  #line 669 
  if (old_cfg->numapps == 32U) {
    #line 670 
    ret = -22;
    #line 671 
    goto setapp_out;
  }
  #line 674 
  ret = dcb_ieee_setapp(netdev,app);
  #line 675 
  if (ret != 0) 
                #line 676 
                goto setapp_out;
  #line 678 
  new_app.selector = app->selector;
  #line 679 
  new_app.prot_id = app->protocol;
  #line 680 
  new_app.priority = app->priority;
  #line 681 
  if ((int)ice_dcbnl_find_app(old_cfg,& new_app) != 0) {
    #line 682 
    ret = 0;
    #line 683 
    goto setapp_out;
  }
  #line 686 
  tmp_1 = new_cfg->numapps;
  #line 686 
  (new_cfg->numapps) ++;
  #line 686 
  new_cfg->app[tmp_1] = new_app;
  #line 687 
  ret = ice_pf_dcb_cfg(pf,new_cfg,(_Bool)1);
  #line 689 
  if (ret == 0) 
                #line 690 
                ice_dcbnl_devreset(netdev);
  #line 691 
  if (ret == 1) 
                #line 692 
                ret = 0;
  #line 694 
  setapp_out: 
              #line 694 
  ;
  #line 695 
  cif_mutex_unlock_tc_mutex_of_ice_pf(& pf->tc_mutex);
  #line 696 
  return ret;
}

#line 706  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_dcb_nl.c"
static int ice_dcbnl_delapp(struct net_device *netdev, struct dcb_app *app)
{
  #line 709 
  struct ice_dcbx_cfg *old_cfg;
  #line 709 
  struct ice_dcbx_cfg *new_cfg;
  #line 710 
  int i;
  #line 710 
  int j;
  #line 708 
  struct ice_pf *pf = ice_netdev_to_pf(netdev);
  #line 710 
  int ret = 0;
  #line 712 
  if (((int)pf->dcbx_cap & 2) != 0) 
                                    #line 713 
                                    return -22;
  #line 715 
  cif_mutex_lock_tc_mutex_of_ice_pf(& pf->tc_mutex);
  #line 716 
  ret = dcb_ieee_delapp(netdev,app);
  #line 717 
  if (ret != 0) 
                #line 718 
                goto delapp_out;
  #line 720 
  old_cfg = & (pf->hw.port_info)->local_dcbx_cfg;
  #line 722 
  if (old_cfg->numapps == 1U) 
                              #line 723 
                              goto delapp_out;
  #line 725 
  new_cfg = & (pf->hw.port_info)->desired_dcbx_cfg;
  #line 727 
  i = 1;
  #line 727 
  while (new_cfg->numapps > (unsigned int)i) {
    #line 728 
    if (((int)app->selector == (int)new_cfg->app[i].selector && (int)app->protocol == (int)new_cfg->app[i].prot_id) && (int)app->priority == (int)new_cfg->app[i].priority) {
      #line 731 
      new_cfg->app[i].selector = (unsigned char)0U;
      #line 732 
      new_cfg->app[i].prot_id = (unsigned short)0U;
      #line 733 
      new_cfg->app[i].priority = (unsigned char)0U;
      #line 734 
      break;
    }
    #line 727 
    i ++;
  }
  #line 739 
  if (new_cfg->numapps == (unsigned int)i) {
    #line 740 
    ret = -22;
    #line 741 
    goto delapp_out;
  }
  #line 744 
  (new_cfg->numapps) --;
  #line 746 
  j = i;
  #line 746 
  while (new_cfg->numapps > (unsigned int)j) {
    #line 747 
    new_cfg->app[i].selector = old_cfg->app[j + 1].selector;
    #line 748 
    new_cfg->app[i].prot_id = old_cfg->app[j + 1].prot_id;
    #line 749 
    new_cfg->app[i].priority = old_cfg->app[j + 1].priority;
    #line 746 
    j ++;
  }
  #line 752 
  ret = ice_pf_dcb_cfg(pf,new_cfg,(_Bool)1);
  #line 754 
  if (ret == 0) 
                #line 755 
                ice_dcbnl_devreset(netdev);
  #line 756 
  if (ret == 1) 
                #line 757 
                ret = 0;
  #line 759 
  delapp_out: 
              #line 759 
  ;
  #line 760 
  cif_mutex_unlock_tc_mutex_of_ice_pf(& pf->tc_mutex);
  #line 761 
  return ret;
}

#line 768  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_dcb_nl.c"
static u8 ice_dcbnl_cee_set_all(struct net_device *netdev)
{
  #line 771 
  struct ice_dcbx_cfg *new_cfg;
  #line 772 
  int err;
  #line 770 
  struct ice_pf *pf = ice_netdev_to_pf(netdev);
  #line 774 
  if (((int)pf->dcbx_cap & 2) != 0 || ((int)pf->dcbx_cap & 4) == 0) 
                                                                    #line 776 
                                                                    return (unsigned char)1U;
  #line 778 
  new_cfg = & (pf->hw.port_info)->desired_dcbx_cfg;
  #line 780 
  cif_mutex_lock_tc_mutex_of_ice_pf(& pf->tc_mutex);
  #line 782 
  err = ice_pf_dcb_cfg(pf,new_cfg,(_Bool)1);
  #line 784 
  cif_mutex_unlock_tc_mutex_of_ice_pf(& pf->tc_mutex);
  #line 785 
  return (unsigned char)(err != 0);
}

#line 788  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_dcb_nl.c"
static struct dcbnl_rtnl_ops dcbnl_ops = {.ieee_getets = & ice_dcbnl_getets, .ieee_setets = & ice_dcbnl_setets, .ieee_getpfc = & ice_dcbnl_getpfc, .ieee_setpfc = & ice_dcbnl_setpfc, .ieee_setapp = & ice_dcbnl_setapp, .ieee_delapp = & ice_dcbnl_delapp, .getstate = & ice_dcbnl_getstate, .setstate = & ice_dcbnl_setstate, .getpermhwaddr = & ice_dcbnl_get_perm_hw_addr, .setpgtccfgtx = & ice_dcbnl_set_pg_tc_cfg_tx, .setpgbwgcfgtx = & ice_dcbnl_set_pg_bwg_cfg_tx, .getpgtccfgtx = & ice_dcbnl_get_pg_tc_cfg_tx, .getpgbwgcfgtx = & ice_dcbnl_get_pg_bwg_cfg_tx, .getpgtccfgrx = & ice_dcbnl_get_pg_tc_cfg_rx, .getpgbwgcfgrx = & ice_dcbnl_get_pg_bwg_cfg_rx, .setpfccfg = & ice_dcbnl_set_pfc_cfg, .getpfccfg = & ice_dcbnl_get_pfc_cfg, .setall = & ice_dcbnl_cee_set_all, .getcap = & ice_dcbnl_get_cap, .getnumtcs = & ice_dcbnl_getnumtcs, .getpfcstate = & ice_dcbnl_getpfcstate, .getapp = & ice_dcbnl_getapp, .getdcbx = & ice_dcbnl_getdcbx, .setdcbx = & ice_dcbnl_setdcbx};
#line 824  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_dcb_nl.c"
void ice_dcbnl_set_all(struct ice_vsi *vsi)
{
  #line 827 
  struct ice_dcbx_cfg *dcbxcfg;
  #line 828 
  struct ice_port_info *pi;
  #line 829 
  struct dcb_app sapp;
  #line 830 
  struct ice_pf *pf;
  #line 831 
  int i;
  #line 826 
  struct net_device *netdev = vsi->netdev;
  #line 833 
  if (netdev == (struct net_device *)0) 
                                        #line 834 
                                        return;
  #line 836 
  pf = ice_netdev_to_pf(netdev);
  #line 837 
  pi = pf->hw.port_info;
  #line 840 
  if (((int)pf->dcbx_cap & 1) != 0) 
                                    #line 841 
                                    return;
  #line 844 
  if (! test_bit(5L,(unsigned long *)(& pf->flags))) 
                                                     #line 845 
                                                     return;
  #line 847 
  dcbxcfg = & pi->local_dcbx_cfg;
  #line 849 
  i = 0;
  #line 849 
  while (dcbxcfg->numapps > (unsigned int)i) {
    {
      #line 850 
      u8 prio;
      #line 850 
      u8 tc_map;
      #line 852 
      prio = dcbxcfg->app[i].priority;
      #line 853 
      tc_map = (unsigned char)(1UL << (int)dcbxcfg->etscfg.prio_table[(int)prio]);
      #line 856 
      if ((unsigned int)((int)vsi->tc_cfg.ena_tc & (int)tc_map) != 0U) {
        #line 857 
        sapp.selector = dcbxcfg->app[i].selector;
        #line 858 
        sapp.protocol = dcbxcfg->app[i].prot_id;
        #line 859 
        sapp.priority = prio;
        #line 860 
        dcb_ieee_setapp(netdev,& sapp);
      }
    }
    #line 849 
    i ++;
  }
  #line 864 
  dcbnl_ieee_notify(netdev,79,20,0U,0U);
  #line 865 
  return;
}

#line 875  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_dcb_nl.c"
static void ice_dcbnl_vsi_del_app(struct ice_vsi *vsi, struct ice_dcb_app_priority_table *app)
{
  #line 878 
  struct dcb_app sapp;
  #line 879 
  int err;
  #line 881 
  sapp.selector = app->selector;
  #line 882 
  sapp.protocol = app->prot_id;
  #line 883 
  sapp.priority = app->priority;
  #line 884 
  err = ice_dcbnl_delapp(vsi->netdev,& sapp);
  {
    #line 885 
    bool branch;
    #line 885 
    struct _ddebug __UNIQUE_ID_ddebug542 = {.modname = (char *)"ice", .function = (char *)"ice_dcbnl_vsi_del_app", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_dcb_nl.c", .format = (char *)"Deleting app for VSI idx=%d err=%d sel=%d proto=0x%x, prio=%d\n", .lineno = (unsigned int)885U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 885 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug542.key.dd_key_false.key,(_Bool)0);
    #line 885 
    if ((long)((long)((int)branch != 0)) != 0L) 
                                                #line 885 
                                                __dynamic_dev_dbg(& __UNIQUE_ID_ddebug542,& ((vsi->back)->pdev)->dev,(char *)"Deleting app for VSI idx=%d err=%d sel=%d proto=0x%x, prio=%d\n",(int)vsi->idx,err,(int)app->selector,(int)app->prot_id,(int)app->priority);
  }
  #line 887 
  return;
}

#line 900  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_dcb_nl.c"
void ice_dcbnl_flush_apps(struct ice_pf *pf, struct ice_dcbx_cfg *old_cfg, struct ice_dcbx_cfg *new_cfg)
{
  #line 904 
  int i;
  #line 903 
  struct ice_vsi *main_vsi = ice_get_main_vsi(pf);
  #line 906 
  if (main_vsi == (struct ice_vsi *)0) 
                                       #line 907 
                                       return;
  #line 909 
  i = 0;
  #line 909 
  while (old_cfg->numapps > (unsigned int)i) {
    {
      #line 910 
      struct ice_dcb_app_priority_table app = old_cfg->app[i];
      #line 913 
      if (! ice_dcbnl_find_app(new_cfg,& app)) 
                                               #line 914 
                                               ice_dcbnl_vsi_del_app(main_vsi,& app);
    }
    #line 909 
    i ++;
  }
  #line 916 
  return;
}

#line 922  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_dcb_nl.c"
void ice_dcbnl_setup(struct ice_vsi *vsi)
{
  #line 925 
  struct ice_pf *pf;
  #line 924 
  struct net_device *netdev = vsi->netdev;
  #line 927 
  pf = ice_netdev_to_pf(netdev);
  #line 928 
  if (! test_bit(4L,(unsigned long *)(& pf->flags))) 
                                                     #line 929 
                                                     return;
  #line 931 
  netdev->dcbnl_ops = & dcbnl_ops;
  #line 932 
  ice_dcbnl_set_all(vsi);
  #line 933 
  return;
}

#line 119  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ice/ice.ko/concurrency safety/0/concurrency safety/weaver/ice_dcb_nl.i.aux"
static void cif_set_bit(long nr, unsigned long *addr)
{
  #line 122 
  ldv_set_bit(nr,addr);
  #line 123 
  return;
}

#line 126  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ice/ice.ko/concurrency safety/0/concurrency safety/weaver/ice_dcb_nl.i.aux"
static void cif_clear_bit(long nr, unsigned long *addr)
{
  #line 129 
  ldv_clear_bit(nr,addr);
  #line 130 
  return;
}

#line 798  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ice/ice.ko/concurrency safety/0/concurrency safety/weaver/ice_dcb_nl.i.aux"
static void cif_mutex_lock_tc_mutex_of_ice_pf(struct mutex *lock)
{
  #line 801 
  ldv_mutex_model_lock(lock,(char *)"tc_mutex_of_ice_pf");
  #line 802 
  return;
}

#line 805  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ice/ice.ko/concurrency safety/0/concurrency safety/weaver/ice_dcb_nl.i.aux"
static void cif_mutex_unlock_tc_mutex_of_ice_pf(struct mutex *lock)
{
  #line 808 
  ldv_mutex_model_unlock(lock,(char *)"tc_mutex_of_ice_pf");
  #line 809 
  return;
}

#line 487  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/printk.h"
#line 487 
void print_hex_dump(char *, char *, int, int, int, void *, size_t, bool);
#line 26  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ice/ice.ko/concurrency safety/0/concurrency safety/weaver/ice_controlq.i.aux"
#line 805 
static void cif_mutex_lock_sq_lock_of_ice_ctl_q_info(struct mutex *lock);
#line 26 
#line 819 
static void cif_mutex_lock_rq_lock_of_ice_ctl_q_info(struct mutex *lock);
#line 29  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/device.h"
#line 29 
void *ldv_devm_kcalloc(size_t n, size_t size, gfp_t flags);
#line 86  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mutex.h"
#line 86 
void mutex_destroy(struct mutex *);
#line 128 
#line 128 
void __mutex_init(struct mutex *, char *, struct lock_class_key *);
#line 185 
#line 812  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ice/ice.ko/concurrency safety/0/concurrency safety/weaver/ice_controlq.i.aux"
static void cif_mutex_unlock_sq_lock_of_ice_ctl_q_info(struct mutex *lock);
#line 185  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mutex.h"
#line 826  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ice/ice.ko/concurrency safety/0/concurrency safety/weaver/ice_controlq.i.aux"
static void cif_mutex_unlock_rq_lock_of_ice_ctl_q_info(struct mutex *lock);
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/delay.h"
#line 11 
void __const_udelay(unsigned long);
#line 952  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
#line 798  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ice/ice.ko/concurrency safety/0/concurrency safety/weaver/ice_controlq.i.aux"
static void *cif_devm_kcalloc(struct device *dev, size_t n, size_t size, gfp_t flags);
#line 952  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
#line 952 
void devm_kfree(struct device *, void *);
#line 1714 
#line 1714 
void _dev_warn(struct device *, char * , ...);
#line 446  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
#line 446 
void *dmam_alloc_attrs(struct device *, size_t, dma_addr_t *, gfp_t, unsigned long);
#line 448 
#line 448 
void dmam_free_coherent(struct device *, size_t, void *, dma_addr_t);
#line 771  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static void *dmam_alloc_coherent(struct device *dev, size_t size, dma_addr_t *dma_handle, gfp_t gfp)
{
  #line 774 
  return dmam_alloc_attrs(dev,size,dma_handle,gfp,
                       (unsigned long)(gfp >> 5) & 256UL);
}

#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_common.h"
#line 695  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_controlq.c"
enum ice_status ice_create_all_ctrlq(struct ice_hw *hw);
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_common.h"
#line 650  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_controlq.c"
enum ice_status ice_init_all_ctrlq(struct ice_hw *hw);
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_common.h"
#line 739  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_controlq.c"
void ice_shutdown_all_ctrlq(struct ice_hw *hw);
#line 26  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_common.h"
#line 769  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_controlq.c"
void ice_destroy_all_ctrlq(struct ice_hw *hw);
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_common.h"
#line 1082  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_controlq.c"
enum ice_status ice_clean_rq_elem(struct ice_hw *hw, struct ice_ctl_q_info *cq, struct ice_rq_event_info *e, u16 *pending);
#line 41  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_common.h"
#line 887  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_controlq.c"
enum ice_status ice_sq_send_cmd(struct ice_hw *hw, struct ice_ctl_q_info *cq, struct ice_aq_desc *desc, void *buf, u16 buf_size, struct ice_sq_cd *cd);
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_common.h"
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_controlq.c"
bool ice_check_sq_alive(struct ice_hw *hw, struct ice_ctl_q_info *cq);
#line 69  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_common.h"
#line 69 
enum ice_status ice_aq_q_shutdown(struct ice_hw *hw, bool unloading);
#line 70 
#line 1062  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_controlq.c"
void ice_fill_dflt_direct_cmd_desc(struct ice_aq_desc *desc, u16 opcode);
#line 80  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_common.h"
#line 80 
enum ice_status ice_aq_get_fw_ver(struct ice_hw *hw, struct ice_sq_cd *cd);
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_controlq.c"
static void ice_adminq_init_regs(struct ice_hw *hw)
{
  #line 34 
  struct ice_ctl_q_info *cq = & hw->adminq;
  #line 36 
  cq->sq.head = 525056U;
  #line 36 
  cq->sq.tail = 525312U;
  #line 36 
  cq->sq.len = 524800U;
  #line 36 
  cq->sq.bah = 524544U;
  #line 36 
  cq->sq.bal = 524288U;
  #line 36 
  cq->sq.len_mask = 1023U;
  #line 36 
  cq->sq.len_ena_mask = 2147483648U;
  #line 36 
  cq->sq.head_mask = 1023U;
  #line 36 
  cq->rq.head = 525184U;
  #line 36 
  cq->rq.tail = 525440U;
  #line 36 
  cq->rq.len = 524928U;
  #line 36 
  cq->rq.bah = 524672U;
  #line 36 
  cq->rq.bal = 524416U;
  #line 36 
  cq->rq.len_mask = 1023U;
  #line 36 
  cq->rq.len_ena_mask = 2147483648U;
  #line 36 
  cq->rq.head_mask = 1023U;
  #line 38 
  return;
}

#line 45  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_controlq.c"
static void ice_mailbox_init_regs(struct ice_hw *hw)
{
  #line 47 
  struct ice_ctl_q_info *cq = & hw->mailboxq;
  #line 49 
  cq->sq.head = 2286208U;
  #line 49 
  cq->sq.tail = 2286336U;
  #line 49 
  cq->sq.len = 2286080U;
  #line 49 
  cq->sq.bah = 2285952U;
  #line 49 
  cq->sq.bal = 2285824U;
  #line 49 
  cq->sq.len_mask = 1023U;
  #line 49 
  cq->sq.len_ena_mask = 2147483648U;
  #line 49 
  cq->sq.head_mask = 1023U;
  #line 49 
  cq->rq.head = 2286848U;
  #line 49 
  cq->rq.tail = 2286976U;
  #line 49 
  cq->rq.len = 2286720U;
  #line 49 
  cq->rq.bah = 2286592U;
  #line 49 
  cq->rq.bal = 2286464U;
  #line 49 
  cq->rq.len_mask = 1023U;
  #line 49 
  cq->rq.len_ena_mask = 2147483648U;
  #line 49 
  cq->rq.head_mask = 1023U;
  #line 51 
  return;
}

#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_controlq.c"
bool ice_check_sq_alive(struct ice_hw *hw, struct ice_ctl_q_info *cq)
{
  #line 62 
  if ((cq->sq.len != 0U && cq->sq.len_mask != 0U) && cq->sq.len_ena_mask != 0U) {
    #line 64 
    ;
    #line 64 
    return (_Bool)((readl((void *)(hw->hw_addr + (unsigned long)cq->sq.len)) & (cq->sq.len_mask | cq->sq.len_ena_mask)) == ((unsigned int)cq->num_sq_entries | cq->sq.len_ena_mask));
  }
  #line 67 
  return (_Bool)0;
}

#line 76  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_controlq.c"
static enum ice_status ice_alloc_ctrlq_sq_ring(struct ice_hw *hw, struct ice_ctl_q_info *cq)
{
  #line 80 
  void *__mptr;
  #line 87 
  void *__mptr_0;
  #line 78 
  size_t size = (unsigned long)cq->num_sq_entries * 32UL;
  #line 80 
  ;
  #line 80 
  ;
  #line 80 
  __mptr = (void *)hw;
  #line 80 
  cq->sq.desc_buf.va = dmam_alloc_coherent(& (((struct ice_pf *)(__mptr + 18446744073709549512U))->pdev)->dev,size,& cq->sq.desc_buf.pa,3520U);
  #line 83 
  if (cq->sq.desc_buf.va == (void *)0) 
                                       #line 84 
                                       return ICE_ERR_NO_MEMORY;
  #line 85 
  cq->sq.desc_buf.size = size;
  #line 87 
  ;
  #line 87 
  __mptr_0 = (void *)hw;
  #line 87 
  cq->sq.cmd_buf = cif_devm_kcalloc(& (((struct ice_pf *)(__mptr_0 + 18446744073709549512U))->pdev)->dev,(unsigned long)cq->num_sq_entries,8UL,3264U);
  #line 89 
  if (cq->sq.cmd_buf == (void *)0) {
    #line 90 
    void *__mptr_1;
    #line 90 
    ;
    #line 90 
    ;
    #line 90 
    ;
    #line 90 
    __mptr_1 = (void *)hw;
    #line 90 
    dmam_free_coherent(& (((struct ice_pf *)(__mptr_1 + 18446744073709549512U))->pdev)->dev,cq->sq.desc_buf.size,cq->sq.desc_buf.va,cq->sq.desc_buf.pa);
    #line 92 
    cq->sq.desc_buf.va = (void *)0;
    #line 93 
    cq->sq.desc_buf.pa = 0ULL;
    #line 94 
    cq->sq.desc_buf.size = 0UL;
    #line 95 
    return ICE_ERR_NO_MEMORY;
  }
  #line 98 
  return ICE_SUCCESS;
}

#line 107  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_controlq.c"
static enum ice_status ice_alloc_ctrlq_rq_ring(struct ice_hw *hw, struct ice_ctl_q_info *cq)
{
  #line 111 
  void *__mptr;
  #line 109 
  size_t size = (unsigned long)cq->num_rq_entries * 32UL;
  #line 111 
  ;
  #line 111 
  ;
  #line 111 
  __mptr = (void *)hw;
  #line 111 
  cq->rq.desc_buf.va = dmam_alloc_coherent(& (((struct ice_pf *)(__mptr + 18446744073709549512U))->pdev)->dev,size,& cq->rq.desc_buf.pa,3520U);
  #line 114 
  if (cq->rq.desc_buf.va == (void *)0) 
                                       #line 115 
                                       return ICE_ERR_NO_MEMORY;
  #line 116 
  cq->rq.desc_buf.size = size;
  #line 117 
  return ICE_SUCCESS;
}

#line 128  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_controlq.c"
static void ice_free_cq_ring(struct ice_hw *hw, struct ice_ctl_q_ring *ring)
{
  #line 130 
  void *__mptr;
  #line 130 
  ;
  #line 130 
  ;
  #line 130 
  ;
  #line 130 
  __mptr = (void *)hw;
  #line 130 
  dmam_free_coherent(& (((struct ice_pf *)(__mptr + 18446744073709549512U))->pdev)->dev,ring->desc_buf.size,ring->desc_buf.va,ring->desc_buf.pa);
  #line 132 
  ring->desc_buf.va = (void *)0;
  #line 133 
  ring->desc_buf.pa = 0ULL;
  #line 134 
  ring->desc_buf.size = 0UL;
  #line 135 
  return;
}

#line 143  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_controlq.c"
static enum ice_status ice_alloc_rq_bufs(struct ice_hw *hw, struct ice_ctl_q_info *cq)
{
  #line 150 
  void *__mptr;
  #line 202 
  void *__mptr_2;
  #line 145 
  int i;
  #line 150 
  ;
  #line 150 
  __mptr = (void *)hw;
  #line 150 
  cq->rq.dma_head = cif_devm_kcalloc(& (((struct ice_pf *)(__mptr + 18446744073709549512U))->pdev)->dev,(unsigned long)cq->num_rq_entries,24UL,3264U);
  #line 152 
  if (cq->rq.dma_head == (void *)0) 
                                    #line 153 
                                    return ICE_ERR_NO_MEMORY;
  #line 154 
  cq->rq.r.rq_bi = (struct ice_dma_mem *)cq->rq.dma_head;
  #line 157 
  i = 0;
  #line 157 
  while ((int)cq->num_rq_entries > i) {
    {
      #line 162 
      void *__mptr_0;
      #line 158 
      struct ice_aq_desc *desc;
      #line 159 
      struct ice_dma_mem *bi;
      #line 161 
      bi = cq->rq.r.rq_bi + (unsigned long)i;
      #line 162 
      ;
      #line 162 
      ;
      #line 162 
      __mptr_0 = (void *)hw;
      #line 162 
      bi->va = dmam_alloc_coherent(& (((struct ice_pf *)(__mptr_0 + 18446744073709549512U))->pdev)->dev,(unsigned long)cq->rq_buf_size,& bi->pa,3520U);
      #line 165 
      if (bi->va == (void *)0) 
                               #line 166 
                               goto unwind_alloc_rq_bufs;
      #line 167 
      bi->size = (unsigned long)cq->rq_buf_size;
      #line 170 
      desc = (struct ice_aq_desc *)cq->rq.desc_buf.va + (unsigned long)i;
      #line 172 
      desc->flags = (unsigned short)4096U;
      #line 173 
      if ((unsigned int)cq->rq_buf_size > 512U) 
                                                #line 174 
                                                desc->flags = (unsigned short)((unsigned int)desc->flags | 512U);
      #line 175 
      desc->opcode = (unsigned short)0U;
      #line 179 
      desc->datalen = (unsigned short)bi->size;
      #line 180 
      desc->retval = (unsigned short)0U;
      #line 181 
      desc->cookie_high = 0U;
      #line 182 
      desc->cookie_low = 0U;
      #line 183 
      desc->params.generic.addr_high = (unsigned int)(bi->pa >> 32);
      #line 185 
      desc->params.generic.addr_low = (unsigned int)bi->pa;
      #line 187 
      desc->params.generic.param0 = 0U;
      #line 188 
      desc->params.generic.param1 = 0U;
    }
    #line 157 
    i ++;
  }
  #line 190 
  return ICE_SUCCESS;
  #line 192 
  unwind_alloc_rq_bufs: 
                        #line 192 
  ;
  #line 194 
  i --;
  #line 195 
  while (i >= 0) {
    {
      #line 196 
      void *__mptr_1;
      #line 196 
      ;
      #line 196 
      ;
      #line 196 
      ;
      #line 196 
      __mptr_1 = (void *)hw;
      #line 196 
      dmam_free_coherent(& (((struct ice_pf *)(__mptr_1 + 18446744073709549512U))->pdev)->dev,(cq->rq.r.rq_bi + (unsigned long)i)->size,(cq->rq.r.rq_bi + (unsigned long)i)->va,(cq->rq.r.rq_bi + (unsigned long)i)->pa);
      #line 198 
      (cq->rq.r.rq_bi + (unsigned long)i)->va = (void *)0;
      #line 199 
      (cq->rq.r.rq_bi + (unsigned long)i)->pa = 0ULL;
      #line 200 
      (cq->rq.r.rq_bi + (unsigned long)i)->size = 0UL;
    }
    #line 195 
    i --;
  }
  #line 202 
  ;
  #line 202 
  __mptr_2 = (void *)hw;
  #line 202 
  devm_kfree(& (((struct ice_pf *)(__mptr_2 + 18446744073709549512U))->pdev)->dev,cq->rq.dma_head);
  #line 204 
  return ICE_ERR_NO_MEMORY;
}

#line 213  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_controlq.c"
static enum ice_status ice_alloc_sq_bufs(struct ice_hw *hw, struct ice_ctl_q_info *cq)
{
  #line 248 
  void *__mptr_2;
  #line 218 
  void *__mptr;
  #line 215 
  int i;
  #line 218 
  ;
  #line 218 
  __mptr = (void *)hw;
  #line 218 
  cq->sq.dma_head = cif_devm_kcalloc(& (((struct ice_pf *)(__mptr + 18446744073709549512U))->pdev)->dev,(unsigned long)cq->num_sq_entries,24UL,3264U);
  #line 220 
  if (cq->sq.dma_head == (void *)0) 
                                    #line 221 
                                    return ICE_ERR_NO_MEMORY;
  #line 222 
  cq->sq.r.sq_bi = (struct ice_dma_mem *)cq->sq.dma_head;
  #line 225 
  i = 0;
  #line 225 
  while ((int)cq->num_sq_entries > i) {
    {
      #line 229 
      void *__mptr_0;
      #line 226 
      struct ice_dma_mem *bi;
      #line 228 
      bi = cq->sq.r.sq_bi + (unsigned long)i;
      #line 229 
      ;
      #line 229 
      ;
      #line 229 
      __mptr_0 = (void *)hw;
      #line 229 
      bi->va = dmam_alloc_coherent(& (((struct ice_pf *)(__mptr_0 + 18446744073709549512U))->pdev)->dev,(unsigned long)cq->sq_buf_size,& bi->pa,3520U);
      #line 232 
      if (bi->va == (void *)0) 
                               #line 233 
                               goto unwind_alloc_sq_bufs;
      #line 234 
      bi->size = (unsigned long)cq->sq_buf_size;
    }
    #line 225 
    i ++;
  }
  #line 236 
  return ICE_SUCCESS;
  #line 238 
  unwind_alloc_sq_bufs: 
                        #line 238 
  ;
  #line 240 
  i --;
  #line 241 
  while (i >= 0) {
    {
      #line 242 
      void *__mptr_1;
      #line 242 
      ;
      #line 242 
      ;
      #line 242 
      ;
      #line 242 
      __mptr_1 = (void *)hw;
      #line 242 
      dmam_free_coherent(& (((struct ice_pf *)(__mptr_1 + 18446744073709549512U))->pdev)->dev,(cq->sq.r.sq_bi + (unsigned long)i)->size,(cq->sq.r.sq_bi + (unsigned long)i)->va,(cq->sq.r.sq_bi + (unsigned long)i)->pa);
      #line 244 
      (cq->sq.r.sq_bi + (unsigned long)i)->va = (void *)0;
      #line 245 
      (cq->sq.r.sq_bi + (unsigned long)i)->pa = 0ULL;
      #line 246 
      (cq->sq.r.sq_bi + (unsigned long)i)->size = 0UL;
    }
    #line 241 
    i --;
  }
  #line 248 
  ;
  #line 248 
  __mptr_2 = (void *)hw;
  #line 248 
  devm_kfree(& (((struct ice_pf *)(__mptr_2 + 18446744073709549512U))->pdev)->dev,cq->sq.dma_head);
  #line 250 
  return ICE_ERR_NO_MEMORY;
}

#line 254  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_controlq.c"
static enum ice_status ice_cfg_cq_regs(struct ice_hw *hw, struct ice_ctl_q_ring *ring, u16 num_entries)
{
  #line 257 
  writel(0U,(void *)(hw->hw_addr + (unsigned long)ring->head));
  #line 258 
  writel(0U,(void *)(hw->hw_addr + (unsigned long)ring->tail));
  #line 261 
  writel((unsigned int)num_entries | ring->len_ena_mask,(void *)(hw->hw_addr + (unsigned long)ring->len));
  #line 262 
  writel((unsigned int)ring->desc_buf.pa,(void *)(hw->hw_addr + (unsigned long)ring->bal));
  #line 263 
  writel((unsigned int)(ring->desc_buf.pa >> 32),(void *)(hw->hw_addr + (unsigned long)ring->bah));
  #line 266 
  ;
  #line 266 
  if (readl((void *)(hw->hw_addr + (unsigned long)ring->bal)) != (unsigned int)ring->desc_buf.pa) 
    #line 267 
    return ICE_ERR_AQ_ERROR;
  #line 269 
  return ICE_SUCCESS;
}

#line 280  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_controlq.c"
static enum ice_status ice_cfg_sq_regs(struct ice_hw *hw, struct ice_ctl_q_info *cq)
{
  #line 282 
  return ice_cfg_cq_regs(hw,& cq->sq,(unsigned short)((int)cq->num_sq_entries));
}

#line 293  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_controlq.c"
static enum ice_status ice_cfg_rq_regs(struct ice_hw *hw, struct ice_ctl_q_info *cq)
{
  #line 295 
  enum ice_status status;
  #line 297 
  status = ice_cfg_cq_regs(hw,& cq->rq,(unsigned short)((int)cq->num_rq_entries));
  #line 298 
  if (status != ICE_SUCCESS) 
                             #line 299 
                             return status;
  #line 302 
  writel((unsigned int)((int)cq->num_rq_entries + -1),(void *)(hw->hw_addr + (unsigned long)cq->rq.tail));
  #line 304 
  return ICE_SUCCESS;
}

#line 321  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_controlq.c"
static enum ice_status ice_init_sq(struct ice_hw *hw, struct ice_ctl_q_info *cq)
{
  #line 323 
  enum ice_status ret_code;
  #line 325 
  if ((unsigned int)cq->sq.count != 0U) {
    #line 327 
    ret_code = ICE_ERR_NOT_READY;
    #line 328 
    goto init_ctrlq_exit;
  }
  #line 332 
  if ((unsigned int)cq->num_sq_entries == 0U || (unsigned int)cq->sq_buf_size == 0U) {
    #line 333 
    ret_code = ICE_ERR_CFG;
    #line 334 
    goto init_ctrlq_exit;
  }
  #line 337 
  cq->sq.next_to_use = (unsigned short)0U;
  #line 338 
  cq->sq.next_to_clean = (unsigned short)0U;
  #line 341 
  ret_code = ice_alloc_ctrlq_sq_ring(hw,cq);
  #line 342 
  if (ret_code != ICE_SUCCESS) 
                               #line 343 
                               goto init_ctrlq_exit;
  #line 346 
  ret_code = ice_alloc_sq_bufs(hw,cq);
  #line 347 
  if (ret_code != ICE_SUCCESS) 
                               #line 348 
                               goto init_ctrlq_free_rings;
  #line 351 
  ret_code = ice_cfg_sq_regs(hw,cq);
  #line 352 
  if (ret_code != ICE_SUCCESS) 
                               #line 353 
                               goto init_ctrlq_free_rings;
  #line 356 
  cq->sq.count = cq->num_sq_entries;
  #line 357 
  goto init_ctrlq_exit;
  #line 359 
  init_ctrlq_free_rings: 
                         #line 359 
  ;
  #line 360 
  ice_free_cq_ring(hw,& cq->sq);
  #line 362 
  init_ctrlq_exit: 
                   #line 362 
  ;
  #line 363 
  return ret_code;
}

#line 380  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_controlq.c"
static enum ice_status ice_init_rq(struct ice_hw *hw, struct ice_ctl_q_info *cq)
{
  #line 382 
  enum ice_status ret_code;
  #line 384 
  if ((unsigned int)cq->rq.count != 0U) {
    #line 386 
    ret_code = ICE_ERR_NOT_READY;
    #line 387 
    goto init_ctrlq_exit;
  }
  #line 391 
  if ((unsigned int)cq->num_rq_entries == 0U || (unsigned int)cq->rq_buf_size == 0U) {
    #line 392 
    ret_code = ICE_ERR_CFG;
    #line 393 
    goto init_ctrlq_exit;
  }
  #line 396 
  cq->rq.next_to_use = (unsigned short)0U;
  #line 397 
  cq->rq.next_to_clean = (unsigned short)0U;
  #line 400 
  ret_code = ice_alloc_ctrlq_rq_ring(hw,cq);
  #line 401 
  if (ret_code != ICE_SUCCESS) 
                               #line 402 
                               goto init_ctrlq_exit;
  #line 405 
  ret_code = ice_alloc_rq_bufs(hw,cq);
  #line 406 
  if (ret_code != ICE_SUCCESS) 
                               #line 407 
                               goto init_ctrlq_free_rings;
  #line 410 
  ret_code = ice_cfg_rq_regs(hw,cq);
  #line 411 
  if (ret_code != ICE_SUCCESS) 
                               #line 412 
                               goto init_ctrlq_free_rings;
  #line 415 
  cq->rq.count = cq->num_rq_entries;
  #line 416 
  goto init_ctrlq_exit;
  #line 418 
  init_ctrlq_free_rings: 
                         #line 418 
  ;
  #line 419 
  ice_free_cq_ring(hw,& cq->rq);
  #line 421 
  init_ctrlq_exit: 
                   #line 421 
  ;
  #line 422 
  return ret_code;
}

#line 454  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_controlq.c"
static enum ice_status ice_shutdown_sq(struct ice_hw *hw, struct ice_ctl_q_info *cq)
{
  #line 456 
  enum ice_status ret_code = 0;
  #line 458 
  cif_mutex_lock_sq_lock_of_ice_ctl_q_info(& cq->sq_lock);
  #line 460 
  if ((unsigned int)cq->sq.count == 0U) {
    #line 461 
    ret_code = ICE_ERR_NOT_READY;
    #line 462 
    goto shutdown_sq_out;
  }
  #line 466 
  writel(0U,(void *)(hw->hw_addr + (unsigned long)cq->sq.head));
  #line 467 
  writel(0U,(void *)(hw->hw_addr + (unsigned long)cq->sq.tail));
  #line 468 
  writel(0U,(void *)(hw->hw_addr + (unsigned long)cq->sq.len));
  #line 469 
  writel(0U,(void *)(hw->hw_addr + (unsigned long)cq->sq.bal));
  #line 470 
  writel(0U,(void *)(hw->hw_addr + (unsigned long)cq->sq.bah));
  #line 472 
  cq->sq.count = (unsigned short)0U;
  {
    #line 475 
    void *__mptr_1;
    #line 475 
    int i;
    #line 475 
    i = 0;
    #line 475 
    while ((int)cq->num_sq_entries > i) {
      #line 475 
      if ((cq->sq.r.sq_bi + (unsigned long)i)->pa != 0ULL) {
        #line 475 
        void *__mptr;
        #line 475 
        ;
        #line 475 
        ;
        #line 475 
        ;
        #line 475 
        __mptr = (void *)hw;
        #line 475 
        dmam_free_coherent(& (((struct ice_pf *)(__mptr + 18446744073709549512U))->pdev)->dev,(cq->sq.r.sq_bi + (unsigned long)i)->size,(cq->sq.r.sq_bi + (unsigned long)i)->va,(cq->sq.r.sq_bi + (unsigned long)i)->pa);
        #line 475 
        (cq->sq.r.sq_bi + (unsigned long)i)->va = (void *)0;
        #line 475 
        (cq->sq.r.sq_bi + (unsigned long)i)->pa = 0ULL;
        #line 475 
        (cq->sq.r.sq_bi + (unsigned long)i)->size = 0UL;
      }
      #line 475 
      i ++;
    }
    #line 475 
    if (cq->sq.cmd_buf != (void *)0) {
      #line 475 
      void *__mptr_0;
      #line 475 
      ;
      #line 475 
      __mptr_0 = (void *)hw;
      #line 475 
      devm_kfree(& (((struct ice_pf *)(__mptr_0 + 18446744073709549512U))->pdev)->dev,cq->sq.cmd_buf);
    }
    #line 475 
    ;
    #line 475 
    __mptr_1 = (void *)hw;
    #line 475 
    devm_kfree(& (((struct ice_pf *)(__mptr_1 + 18446744073709549512U))->pdev)->dev,cq->sq.dma_head);
  }
  #line 476 
  ice_free_cq_ring(hw,& cq->sq);
  #line 478 
  shutdown_sq_out: 
                   #line 478 
  ;
  #line 479 
  cif_mutex_unlock_sq_lock_of_ice_ctl_q_info(& cq->sq_lock);
  #line 480 
  return ret_code;
}

#line 491  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_controlq.c"
static bool ice_aq_ver_check(struct ice_hw *hw)
{
  #line 493 
  if ((unsigned int)hw->api_maj_ver > 1U) {
    #line 495 
    void *__mptr;
    #line 495 
    __mptr = (void *)hw;
    #line 495 
    _dev_warn(& (((struct ice_pf *)(__mptr + 18446744073709549512U))->pdev)->dev,(char *)"The driver for the device stopped because the NVM image is newer than expected. You must install the most recent version of the network driver.\n");
    #line 497 
    return (_Bool)0;
  }
  else 
    #line 498 
    if ((unsigned int)hw->api_maj_ver == 1U) {
      #line 499 
      if ((unsigned int)hw->api_min_ver > 7U) {
        #line 500 
        void *__mptr_0;
        #line 500 
        __mptr_0 = (void *)hw;
        #line 500 
        _dev_info(& (((struct ice_pf *)(__mptr_0 + 18446744073709549512U))->pdev)->dev,(char *)"The driver for the device detected a newer version of the NVM image than expected. Please install the most recent version of the network driver.\n");
      }
      else 
        #line 502 
        if ((unsigned int)hw->api_min_ver <= 2U) {
          #line 503 
          void *__mptr_1;
          #line 503 
          __mptr_1 = (void *)hw;
          #line 503 
          _dev_info(& (((struct ice_pf *)(__mptr_1 + 18446744073709549512U))->pdev)->dev,(char *)"The driver for the device detected an older version of the NVM image than expected. Please update the NVM image.\n");
        }
    }
    else {
      #line 507 
      void *__mptr_2;
      #line 507 
      __mptr_2 = (void *)hw;
      #line 507 
      _dev_info(& (((struct ice_pf *)(__mptr_2 + 18446744073709549512U))->pdev)->dev,(char *)"The driver for the device detected an older version of the NVM image than expected. Please update the NVM image.\n");
    }
  #line 510 
  return (_Bool)1;
}

#line 521  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_controlq.c"
static enum ice_status ice_shutdown_rq(struct ice_hw *hw, struct ice_ctl_q_info *cq)
{
  #line 523 
  enum ice_status ret_code = 0;
  #line 525 
  cif_mutex_lock_rq_lock_of_ice_ctl_q_info(& cq->rq_lock);
  #line 527 
  if ((unsigned int)cq->rq.count == 0U) {
    #line 528 
    ret_code = ICE_ERR_NOT_READY;
    #line 529 
    goto shutdown_rq_out;
  }
  #line 533 
  writel(0U,(void *)(hw->hw_addr + (unsigned long)cq->rq.head));
  #line 534 
  writel(0U,(void *)(hw->hw_addr + (unsigned long)cq->rq.tail));
  #line 535 
  writel(0U,(void *)(hw->hw_addr + (unsigned long)cq->rq.len));
  #line 536 
  writel(0U,(void *)(hw->hw_addr + (unsigned long)cq->rq.bal));
  #line 537 
  writel(0U,(void *)(hw->hw_addr + (unsigned long)cq->rq.bah));
  #line 540 
  cq->rq.count = (unsigned short)0U;
  {
    #line 543 
    void *__mptr_1;
    #line 543 
    int i;
    #line 543 
    i = 0;
    #line 543 
    while ((int)cq->num_rq_entries > i) {
      #line 543 
      if ((cq->rq.r.rq_bi + (unsigned long)i)->pa != 0ULL) {
        #line 543 
        void *__mptr;
        #line 543 
        ;
        #line 543 
        ;
        #line 543 
        ;
        #line 543 
        __mptr = (void *)hw;
        #line 543 
        dmam_free_coherent(& (((struct ice_pf *)(__mptr + 18446744073709549512U))->pdev)->dev,(cq->rq.r.rq_bi + (unsigned long)i)->size,(cq->rq.r.rq_bi + (unsigned long)i)->va,(cq->rq.r.rq_bi + (unsigned long)i)->pa);
        #line 543 
        (cq->rq.r.rq_bi + (unsigned long)i)->va = (void *)0;
        #line 543 
        (cq->rq.r.rq_bi + (unsigned long)i)->pa = 0ULL;
        #line 543 
        (cq->rq.r.rq_bi + (unsigned long)i)->size = 0UL;
      }
      #line 543 
      i ++;
    }
    #line 543 
    if (cq->rq.cmd_buf != (void *)0) {
      #line 543 
      void *__mptr_0;
      #line 543 
      ;
      #line 543 
      __mptr_0 = (void *)hw;
      #line 543 
      devm_kfree(& (((struct ice_pf *)(__mptr_0 + 18446744073709549512U))->pdev)->dev,cq->rq.cmd_buf);
    }
    #line 543 
    ;
    #line 543 
    __mptr_1 = (void *)hw;
    #line 543 
    devm_kfree(& (((struct ice_pf *)(__mptr_1 + 18446744073709549512U))->pdev)->dev,cq->rq.dma_head);
  }
  #line 544 
  ice_free_cq_ring(hw,& cq->rq);
  #line 546 
  shutdown_rq_out: 
                   #line 546 
  ;
  #line 547 
  cif_mutex_unlock_rq_lock_of_ice_ctl_q_info(& cq->rq_lock);
  #line 548 
  return ret_code;
}

#line 555  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_controlq.c"
static enum ice_status ice_init_check_adminq(struct ice_hw *hw)
{
  #line 558 
  enum ice_status status;
  #line 557 
  struct ice_ctl_q_info *cq = & hw->adminq;
  #line 560 
  status = ice_aq_get_fw_ver(hw,(struct ice_sq_cd *)0);
  #line 561 
  if (status != ICE_SUCCESS) 
                             #line 562 
                             goto init_ctrlq_free_rq;
  #line 564 
  if (! ice_aq_ver_check(hw)) {
    #line 565 
    status = ICE_ERR_FW_API_VER;
    #line 566 
    goto init_ctrlq_free_rq;
  }
  #line 569 
  return ICE_SUCCESS;
  #line 571 
  init_ctrlq_free_rq: 
                      #line 571 
  ;
  #line 572 
  ice_shutdown_rq(hw,cq);
  #line 573 
  ice_shutdown_sq(hw,cq);
  #line 574 
  return status;
}

#line 591  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_controlq.c"
static enum ice_status ice_init_ctrlq(struct ice_hw *hw, enum ice_ctl_q q_type)
{
  #line 593 
  struct ice_ctl_q_info *cq;
  #line 594 
  enum ice_status ret_code;
  #line 596 
  switch ((unsigned int)q_type) {
    #line 597 
    case (unsigned int)1: 
                          #line 597 
    ;
    #line 598 
    ice_adminq_init_regs(hw);
    #line 599 
    cq = & hw->adminq;
    #line 600 
    break;
    #line 601 
    case (unsigned int)2: 
                          #line 601 
    ;
    #line 602 
    ice_mailbox_init_regs(hw);
    #line 603 
    cq = & hw->mailboxq;
    #line 604 
    break;
    #line 605 
    default: 
             #line 605 
    ;
    #line 606 
    return ICE_ERR_PARAM;
  }
  #line 608 
  cq->qtype = q_type;
  #line 611 
  if ((((unsigned int)cq->num_rq_entries == 0U || (unsigned int)cq->num_sq_entries == 0U) || (unsigned int)cq->rq_buf_size == 0U) || (unsigned int)cq->sq_buf_size == 0U) 
    #line 613 
    return ICE_ERR_CFG;
  #line 617 
  cq->sq_cmd_timeout = 2500U;
  #line 620 
  ret_code = ice_init_sq(hw,cq);
  #line 621 
  if (ret_code != ICE_SUCCESS) 
                               #line 622 
                               return ret_code;
  #line 625 
  ret_code = ice_init_rq(hw,cq);
  #line 626 
  if (ret_code != ICE_SUCCESS) 
                               #line 627 
                               goto init_ctrlq_free_sq;
  #line 630 
  return ICE_SUCCESS;
  #line 632 
  init_ctrlq_free_sq: 
                      #line 632 
  ;
  #line 633 
  ice_shutdown_sq(hw,cq);
  #line 634 
  return ret_code;
}

#line 650  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_controlq.c"
enum ice_status ice_init_all_ctrlq(struct ice_hw *hw)
{
  #line 652 
  enum ice_status ret_code;
  #line 655 
  ret_code = ice_init_ctrlq(hw,(enum ice_ctl_q)ICE_CTL_Q_ADMIN);
  #line 656 
  if (ret_code != ICE_SUCCESS) 
                               #line 657 
                               return ret_code;
  #line 659 
  ret_code = ice_init_check_adminq(hw);
  #line 660 
  if (ret_code != ICE_SUCCESS) 
                               #line 661 
                               return ret_code;
  #line 664 
  return ice_init_ctrlq(hw,(enum ice_ctl_q)ICE_CTL_Q_MAILBOX);
}

#line 673  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_controlq.c"
static void ice_init_ctrlq_locks(struct ice_ctl_q_info *cq)
{
  {
    #line 675 
    struct lock_class_key __key;
    #line 675 
    __mutex_init(& cq->sq_lock,(char *)"&cq->sq_lock",& __key);
  }
  {
    #line 676 
    struct lock_class_key __key_0;
    #line 676 
    __mutex_init(& cq->rq_lock,(char *)"&cq->rq_lock",& __key_0);
  }
  #line 678 
  return;
}

#line 695  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_controlq.c"
enum ice_status ice_create_all_ctrlq(struct ice_hw *hw)
{
  #line 697 
  ice_init_ctrlq_locks(& hw->adminq);
  #line 698 
  ice_init_ctrlq_locks(& hw->mailboxq);
  #line 700 
  return ice_init_all_ctrlq(hw);
}

#line 710  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_controlq.c"
static void ice_shutdown_ctrlq(struct ice_hw *hw, enum ice_ctl_q q_type)
{
  #line 712 
  struct ice_ctl_q_info *cq;
  #line 714 
  switch ((unsigned int)q_type) {
    #line 715 
    case (unsigned int)1: 
                          #line 715 
    ;
    #line 716 
    cq = & hw->adminq;
    #line 717 
    if ((int)ice_check_sq_alive(hw,cq) != 0) 
                                             #line 718 
                                             ice_aq_q_shutdown(hw,(_Bool)1);
    #line 719 
    break;
    #line 720 
    case (unsigned int)2: 
                          #line 720 
    ;
    #line 721 
    cq = & hw->mailboxq;
    #line 722 
    break;
    #line 723 
    default: 
             #line 723 
    ;
    #line 724 
    return;
  }
  #line 727 
  ice_shutdown_sq(hw,cq);
  #line 728 
  ice_shutdown_rq(hw,cq);
  #line 729 
  return;
}

#line 739  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_controlq.c"
void ice_shutdown_all_ctrlq(struct ice_hw *hw)
{
  #line 742 
  ice_shutdown_ctrlq(hw,(enum ice_ctl_q)ICE_CTL_Q_ADMIN);
  #line 744 
  ice_shutdown_ctrlq(hw,(enum ice_ctl_q)ICE_CTL_Q_MAILBOX);
  #line 745 
  return;
}

#line 754  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_controlq.c"
static void ice_destroy_ctrlq_locks(struct ice_ctl_q_info *cq)
{
  #line 756 
  mutex_destroy(& cq->sq_lock);
  #line 757 
  mutex_destroy(& cq->rq_lock);
  #line 758 
  return;
}

#line 769  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_controlq.c"
void ice_destroy_all_ctrlq(struct ice_hw *hw)
{
  #line 772 
  ice_shutdown_all_ctrlq(hw);
  #line 774 
  ice_destroy_ctrlq_locks(& hw->adminq);
  #line 775 
  ice_destroy_ctrlq_locks(& hw->mailboxq);
  #line 776 
  return;
}

#line 785  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_controlq.c"
static u16 ice_clean_sq(struct ice_hw *hw, struct ice_ctl_q_info *cq)
{
  #line 789 
  struct ice_sq_cd *details;
  #line 790 
  struct ice_aq_desc *desc;
  #line 809 
  unsigned int tmp_3;
  #line 787 
  struct ice_ctl_q_ring *sq = & cq->sq;
  #line 788 
  u16 ntc = sq->next_to_clean;
  #line 792 
  desc = (struct ice_aq_desc *)sq->desc_buf.va + (unsigned long)ntc;
  #line 793 
  details = (struct ice_sq_cd *)sq->cmd_buf + (unsigned long)ntc;
  #line 795 
  while (1) {
    #line 795 
    ;
    #line 795 
    if (! (readl((void *)(hw->hw_addr + (unsigned long)cq->sq.head)) != (unsigned int)ntc)) 
      #line 795 
      break;
    {
      #line 796 
      bool branch;
      #line 796 
      struct _ddebug __UNIQUE_ID_ddebug536 = {.modname = (char *)"ice", .function = (char *)"ice_clean_sq", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_controlq.c", .format = (char *)"ntc %d head %d.\n", .lineno = (unsigned int)796U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 796 
      branch = arch_static_branch(& __UNIQUE_ID_ddebug536.key.dd_key_false.key,(_Bool)0);
      #line 796 
      if ((long)((long)((int)branch != 0)) != 0L) {
        #line 796 
        void *__mptr;
        #line 796 
        unsigned int tmp;
        #line 796 
        tmp = readl((void *)(hw->hw_addr + (unsigned long)cq->sq.head));
        #line 796 
        ;
        #line 796 
        __mptr = (void *)hw;
        #line 796 
        __dynamic_dev_dbg(& __UNIQUE_ID_ddebug536,& (((struct ice_pf *)(__mptr + 18446744073709549512U))->pdev)->dev,(char *)"ntc %d head %d.\n",(int)ntc,tmp);
      }
    }
    #line 798 
    memset((void *)desc,0,32UL);
    #line 799 
    memset((void *)details,0,8UL);
    #line 800 
    ntc = (u16)((int)ntc + 1);
    #line 801 
    if ((int)sq->count == (int)ntc) 
                                    #line 802 
                                    ntc = (unsigned short)0U;
    #line 803 
    desc = (struct ice_aq_desc *)sq->desc_buf.va + (unsigned long)ntc;
    #line 804 
    details = (struct ice_sq_cd *)sq->cmd_buf + (unsigned long)ntc;
  }
  #line 807 
  sq->next_to_clean = ntc;
  #line 809 
  if ((int)sq->next_to_clean <= (int)sq->next_to_use) 
                                                      #line 809 
                                                      tmp_3 = (unsigned int)sq->count; else 
                                                                    #line 809 
                                                                    tmp_3 = 0U;
  #line 809 
  ;
  #line 809 
  return (unsigned short)(((tmp_3 + (unsigned int)sq->next_to_clean) - (unsigned int)sq->next_to_use) + 65535U);
}

#line 821  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_controlq.c"
static void ice_debug_cq(struct ice_hw *hw, void *desc, void *buf, u16 buf_len)
{
  #line 824 
  u16 len;
  #line 823 
  struct ice_aq_desc *cq_desc = (struct ice_aq_desc *)desc;
  #line 830 
  if (desc == (void *)0) 
                         #line 831 
                         return;
  #line 833 
  len = cq_desc->datalen;
  {
    #line 835 
    bool branch;
    #line 835 
    struct _ddebug __UNIQUE_ID_ddebug537 = {.modname = (char *)"ice", .function = (char *)"ice_debug_cq", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_controlq.c", .format = (char *)"CQ CMD: opcode 0x%04X, flags 0x%04X, datalen 0x%04X, retval 0x%04X\n", .lineno = (unsigned int)835U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 835 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug537.key.dd_key_false.key,(_Bool)0);
    #line 835 
    if ((long)((long)((int)branch != 0)) != 0L) {
      #line 835 
      void *__mptr;
      #line 835 
      ;
      #line 835 
      ;
      #line 835 
      ;
      #line 835 
      ;
      #line 835 
      __mptr = (void *)hw;
      #line 835 
      __dynamic_dev_dbg(& __UNIQUE_ID_ddebug537,& (((struct ice_pf *)(__mptr + 18446744073709549512U))->pdev)->dev,(char *)"CQ CMD: opcode 0x%04X, flags 0x%04X, datalen 0x%04X, retval 0x%04X\n",(int)cq_desc->opcode,(int)cq_desc->flags,(int)cq_desc->datalen,(int)cq_desc->retval);
    }
  }
  {
    #line 840 
    bool branch_0;
    #line 840 
    struct _ddebug __UNIQUE_ID_ddebug538 = {.modname = (char *)"ice", .function = (char *)"ice_debug_cq", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_controlq.c", .format = (char *)"\tcookie (h,l) 0x%08X 0x%08X\n", .lineno = (unsigned int)840U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 840 
    branch_0 = arch_static_branch(& __UNIQUE_ID_ddebug538.key.dd_key_false.key,(_Bool)0);
    #line 840 
    if ((long)((long)((int)branch_0 != 0)) != 0L) {
      #line 840 
      void *__mptr_0;
      #line 840 
      ;
      #line 840 
      ;
      #line 840 
      __mptr_0 = (void *)hw;
      #line 840 
      __dynamic_dev_dbg(& __UNIQUE_ID_ddebug538,& (((struct ice_pf *)(__mptr_0 + 18446744073709549512U))->pdev)->dev,(char *)"\tcookie (h,l) 0x%08X 0x%08X\n",cq_desc->cookie_high,cq_desc->cookie_low);
    }
  }
  {
    #line 843 
    bool branch_1;
    #line 843 
    struct _ddebug __UNIQUE_ID_ddebug539 = {.modname = (char *)"ice", .function = (char *)"ice_debug_cq", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_controlq.c", .format = (char *)"\tparam (0,1)  0x%08X 0x%08X\n", .lineno = (unsigned int)843U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 843 
    branch_1 = arch_static_branch(& __UNIQUE_ID_ddebug539.key.dd_key_false.key,(_Bool)0);
    #line 843 
    if ((long)((long)((int)branch_1 != 0)) != 0L) {
      #line 843 
      void *__mptr_1;
      #line 843 
      ;
      #line 843 
      ;
      #line 843 
      __mptr_1 = (void *)hw;
      #line 843 
      __dynamic_dev_dbg(& __UNIQUE_ID_ddebug539,& (((struct ice_pf *)(__mptr_1 + 18446744073709549512U))->pdev)->dev,(char *)"\tparam (0,1)  0x%08X 0x%08X\n",cq_desc->params.generic.param0,cq_desc->params.generic.param1);
    }
  }
  {
    #line 846 
    bool branch_2;
    #line 846 
    struct _ddebug __UNIQUE_ID_ddebug540 = {.modname = (char *)"ice", .function = (char *)"ice_debug_cq", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_controlq.c", .format = (char *)"\taddr (h,l)   0x%08X 0x%08X\n", .lineno = (unsigned int)846U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 846 
    branch_2 = arch_static_branch(& __UNIQUE_ID_ddebug540.key.dd_key_false.key,(_Bool)0);
    #line 846 
    if ((long)((long)((int)branch_2 != 0)) != 0L) {
      #line 846 
      void *__mptr_2;
      #line 846 
      ;
      #line 846 
      ;
      #line 846 
      __mptr_2 = (void *)hw;
      #line 846 
      __dynamic_dev_dbg(& __UNIQUE_ID_ddebug540,& (((struct ice_pf *)(__mptr_2 + 18446744073709549512U))->pdev)->dev,(char *)"\taddr (h,l)   0x%08X 0x%08X\n",cq_desc->params.generic.addr_high,cq_desc->params.generic.addr_low);
    }
  }
  #line 849 
  if (buf != (void *)0 && (unsigned int)cq_desc->datalen != 0U) {
    {
      #line 850 
      bool branch_3;
      #line 850 
      struct _ddebug __UNIQUE_ID_ddebug541 = {.modname = (char *)"ice", .function = (char *)"ice_debug_cq", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_controlq.c", .format = (char *)"Buffer:\n", .lineno = (unsigned int)850U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 850 
      branch_3 = arch_static_branch(& __UNIQUE_ID_ddebug541.key.dd_key_false.key,(_Bool)0);
      #line 850 
      if ((long)((long)((int)branch_3 != 0)) != 0L) {
        #line 850 
        void *__mptr_3;
        #line 850 
        __mptr_3 = (void *)hw;
        #line 850 
        __dynamic_dev_dbg(& __UNIQUE_ID_ddebug541,& (((struct ice_pf *)(__mptr_3 + 18446744073709549512U))->pdev)->dev,(char *)"Buffer:\n");
      }
    }
    #line 851 
    if ((int)buf_len < (int)len) 
                                 #line 852 
                                 len = buf_len;
    {
      #line 854 
      bool branch_4;
      #line 854 
      struct _ddebug __UNIQUE_ID_ddebug542 = {.modname = (char *)"ice", .function = (char *)"ice_debug_cq", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_controlq.c", .format = (char *)"ice", .lineno = (unsigned int)854U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 854 
      branch_4 = arch_static_branch(& __UNIQUE_ID_ddebug542.key.dd_key_false.key,(_Bool)0);
      #line 854 
      if ((long)((long)((int)branch_4 != 0)) != 0L) 
                                                    #line 854 
                                                    print_hex_dump((char *)"\001",(char *)"ice",2,16,1,buf,(unsigned long)len,(_Bool)0);
    }
  }
  #line 857 
  return;
}

#line 866  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_controlq.c"
static bool ice_sq_done(struct ice_hw *hw, struct ice_ctl_q_info *cq)
{
  #line 871 
  ;
  #line 871 
  return (_Bool)(readl((void *)(hw->hw_addr + (unsigned long)cq->sq.head)) == (unsigned int)cq->sq.next_to_use);
}

#line 887  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_controlq.c"
enum ice_status ice_sq_send_cmd(struct ice_hw *hw, struct ice_ctl_q_info *cq, struct ice_aq_desc *desc, void *buf, u16 buf_size, struct ice_sq_cd *cd)
{
  #line 892 
  struct ice_aq_desc *desc_on_ring;
  #line 895 
  struct ice_sq_cd *details;
  #line 891 
  struct ice_dma_mem *dma_buf = (struct ice_dma_mem *)0;
  #line 893 
  bool cmd_completed = (_Bool)0;
  #line 894 
  enum ice_status status = 0;
  #line 896 
  u32 total_delay = 0U;
  #line 897 
  u16 retval = (unsigned short)0U;
  #line 898 
  u32 val = 0U;
  #line 901 
  if ((unsigned int)hw->reset_ongoing != 0U) 
                                             #line 902 
                                             return ICE_ERR_RESET_ONGOING;
  #line 903 
  cif_mutex_lock_sq_lock_of_ice_ctl_q_info(& cq->sq_lock);
  #line 905 
  cq->sq_last_status = ICE_AQ_RC_OK;
  #line 907 
  if ((unsigned int)cq->sq.count == 0U) {
    {
      #line 908 
      bool branch;
      #line 908 
      struct _ddebug __UNIQUE_ID_ddebug543 = {.modname = (char *)"ice", .function = (char *)"ice_sq_send_cmd", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_controlq.c", .format = (char *)"Control Send queue not initialized.\n", .lineno = (unsigned int)908U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 908 
      branch = arch_static_branch(& __UNIQUE_ID_ddebug543.key.dd_key_false.key,(_Bool)0);
      #line 908 
      if ((long)((long)((int)branch != 0)) != 0L) {
        #line 908 
        void *__mptr;
        #line 908 
        __mptr = (void *)hw;
        #line 908 
        __dynamic_dev_dbg(& __UNIQUE_ID_ddebug543,& (((struct ice_pf *)(__mptr + 18446744073709549512U))->pdev)->dev,(char *)"Control Send queue not initialized.\n");
      }
    }
    #line 910 
    status = ICE_ERR_AQ_EMPTY;
    #line 911 
    goto sq_send_command_error;
  }
  #line 914 
  if ((buf != (void *)0) ^ ((unsigned int)buf_size != 0U)) {
    #line 915 
    status = ICE_ERR_PARAM;
    #line 916 
    goto sq_send_command_error;
  }
  #line 919 
  if (buf != (void *)0) {
    #line 920 
    if ((int)cq->sq_buf_size < (int)buf_size) {
      {
        #line 921 
        bool branch_0;
        #line 921 
        struct _ddebug __UNIQUE_ID_ddebug544 = {.modname = (char *)"ice", .function = (char *)"ice_sq_send_cmd", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_controlq.c", .format = (char *)"Invalid buffer size for Control Send queue: %d.\n", .lineno = (unsigned int)921U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
        #line 921 
        branch_0 = arch_static_branch(& __UNIQUE_ID_ddebug544.key.dd_key_false.key,(_Bool)0);
        #line 921 
        if ((long)((long)((int)branch_0 != 0)) != 0L) {
          #line 921 
          void *__mptr_0;
          #line 921 
          ;
          #line 921 
          __mptr_0 = (void *)hw;
          #line 921 
          __dynamic_dev_dbg(& __UNIQUE_ID_ddebug544,& (((struct ice_pf *)(__mptr_0 + 18446744073709549512U))->pdev)->dev,(char *)"Invalid buffer size for Control Send queue: %d.\n",(int)buf_size);
        }
      }
      #line 924 
      status = ICE_ERR_INVAL_SIZE;
      #line 925 
      goto sq_send_command_error;
    }
    #line 928 
    desc->flags = (unsigned short)((unsigned int)desc->flags | 4096U);
    #line 929 
    if ((unsigned int)buf_size > 512U) 
                                       #line 930 
                                       desc->flags = (unsigned short)((unsigned int)desc->flags | 512U);
  }
  #line 933 
  val = readl((void *)(hw->hw_addr + (unsigned long)cq->sq.head));
  #line 934 
  if ((unsigned int)cq->num_sq_entries <= val) {
    {
      #line 935 
      bool branch_1;
      #line 935 
      struct _ddebug __UNIQUE_ID_ddebug545 = {.modname = (char *)"ice", .function = (char *)"ice_sq_send_cmd", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_controlq.c", .format = (char *)"head overrun at %d in the Control Send Queue ring\n", .lineno = (unsigned int)935U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 935 
      branch_1 = arch_static_branch(& __UNIQUE_ID_ddebug545.key.dd_key_false.key,(_Bool)0);
      #line 935 
      if ((long)((long)((int)branch_1 != 0)) != 0L) {
        #line 935 
        void *__mptr_1;
        #line 935 
        ;
        #line 935 
        __mptr_1 = (void *)hw;
        #line 935 
        __dynamic_dev_dbg(& __UNIQUE_ID_ddebug545,& (((struct ice_pf *)(__mptr_1 + 18446744073709549512U))->pdev)->dev,(char *)"head overrun at %d in the Control Send Queue ring\n",val);
      }
    }
    #line 938 
    status = ICE_ERR_AQ_EMPTY;
    #line 939 
    goto sq_send_command_error;
  }
  #line 942 
  details = (struct ice_sq_cd *)cq->sq.cmd_buf + (unsigned long)cq->sq.next_to_use;
  #line 943 
  if (cd != (struct ice_sq_cd *)0) 
                                   #line 944 
                                   *details = *cd; else 
                                                        #line 946 
                                                        memset((void *)details,0,8UL);
  #line 953 
  if ((unsigned int)ice_clean_sq(hw,cq) == 0U) {
    {
      #line 954 
      bool branch_2;
      #line 954 
      struct _ddebug __UNIQUE_ID_ddebug546 = {.modname = (char *)"ice", .function = (char *)"ice_sq_send_cmd", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_controlq.c", .format = (char *)"Error: Control Send Queue is full.\n", .lineno = (unsigned int)954U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 954 
      branch_2 = arch_static_branch(& __UNIQUE_ID_ddebug546.key.dd_key_false.key,(_Bool)0);
      #line 954 
      if ((long)((long)((int)branch_2 != 0)) != 0L) {
        #line 954 
        void *__mptr_2;
        #line 954 
        __mptr_2 = (void *)hw;
        #line 954 
        __dynamic_dev_dbg(& __UNIQUE_ID_ddebug546,& (((struct ice_pf *)(__mptr_2 + 18446744073709549512U))->pdev)->dev,(char *)"Error: Control Send Queue is full.\n");
      }
    }
    #line 956 
    status = ICE_ERR_AQ_FULL;
    #line 957 
    goto sq_send_command_error;
  }
  #line 961 
  desc_on_ring = (struct ice_aq_desc *)cq->sq.desc_buf.va + (unsigned long)cq->sq.next_to_use;
  #line 964 
  memcpy((void *)desc_on_ring,(void *)desc,32UL);
  #line 967 
  if (buf != (void *)0) {
    #line 968 
    dma_buf = cq->sq.r.sq_bi + (unsigned long)cq->sq.next_to_use;
    #line 970 
    memcpy(dma_buf->va,buf,(unsigned long)buf_size);
    #line 971 
    desc_on_ring->datalen = buf_size;
    #line 976 
    desc_on_ring->params.generic.addr_high = (unsigned int)(dma_buf->pa >> 32);
    #line 978 
    desc_on_ring->params.generic.addr_low = (unsigned int)dma_buf->pa;
  }
  {
    #line 983 
    bool branch_3;
    #line 983 
    struct _ddebug __UNIQUE_ID_ddebug547 = {.modname = (char *)"ice", .function = (char *)"ice_sq_send_cmd", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_controlq.c", .format = (char *)"ATQ: Control Send queue desc and buffer:\n", .lineno = (unsigned int)983U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 983 
    branch_3 = arch_static_branch(& __UNIQUE_ID_ddebug547.key.dd_key_false.key,(_Bool)0);
    #line 983 
    if ((long)((long)((int)branch_3 != 0)) != 0L) {
      #line 983 
      void *__mptr_3;
      #line 983 
      __mptr_3 = (void *)hw;
      #line 983 
      __dynamic_dev_dbg(& __UNIQUE_ID_ddebug547,& (((struct ice_pf *)(__mptr_3 + 18446744073709549512U))->pdev)->dev,(char *)"ATQ: Control Send queue desc and buffer:\n");
    }
  }
  #line 986 
  ice_debug_cq(hw,(void *)desc_on_ring,buf,(unsigned short)((int)buf_size));
  #line 988 
  cq->sq.next_to_use = (u16)((int)cq->sq.next_to_use + 1);
  #line 989 
  if ((int)cq->sq.next_to_use == (int)cq->sq.count) 
                                                    #line 990 
                                                    cq->sq.next_to_use = (unsigned short)0U;
  #line 991 
  writel((unsigned int)cq->sq.next_to_use,(void *)(hw->hw_addr + (unsigned long)cq->sq.tail));
  #line 993 
  while (1) {
    {
      #line 994 
      if ((int)ice_sq_done(hw,cq) != 0) 
                                        #line 995 
                                        break;
      #line 997 
      __const_udelay(429500UL);
      #line 998 
      total_delay ++;
    }
    #line 999 
    if (! (cq->sq_cmd_timeout > total_delay)) 
                                              #line 993 
                                              break;
  }
  #line 1002 
  if ((int)ice_sq_done(hw,cq) != 0) {
    #line 1003 
    memcpy((void *)desc,(void *)desc_on_ring,32UL);
    #line 1004 
    if (buf != (void *)0) {
      #line 1006 
      u16 copy_size = desc->datalen;
      #line 1008 
      if ((int)copy_size > (int)buf_size) {
        {
          #line 1009 
          bool branch_4;
          #line 1009 
          struct _ddebug __UNIQUE_ID_ddebug548 = {.modname = (char *)"ice", .function = (char *)"ice_sq_send_cmd", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_controlq.c", .format = (char *)"Return len %d > than buf len %d\n", .lineno = (unsigned int)1009U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
          #line 1009 
          branch_4 = arch_static_branch(& __UNIQUE_ID_ddebug548.key.dd_key_false.key,(_Bool)0);
          #line 1009 
          if ((long)((long)((int)branch_4 != 0)) != 0L) {
            #line 1009 
            void *__mptr_4;
            #line 1009 
            ;
            #line 1009 
            ;
            #line 1009 
            __mptr_4 = (void *)hw;
            #line 1009 
            __dynamic_dev_dbg(& __UNIQUE_ID_ddebug548,& (((struct ice_pf *)(__mptr_4 + 18446744073709549512U))->pdev)->dev,(char *)"Return len %d > than buf len %d\n",(int)copy_size,(int)buf_size);
          }
        }
        #line 1012 
        status = ICE_ERR_AQ_ERROR;
      }
      else 
           #line 1014 
           memcpy(buf,dma_buf->va,(unsigned long)copy_size);
    }
    #line 1017 
    retval = desc->retval;
    #line 1018 
    if ((unsigned int)retval != 0U) {
      {
        #line 1019 
        bool branch_5;
        #line 1019 
        struct _ddebug __UNIQUE_ID_ddebug549 = {.modname = (char *)"ice", .function = (char *)"ice_sq_send_cmd", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_controlq.c", .format = (char *)"Control Send Queue command 0x%04X completed with error 0x%X\n", .lineno = (unsigned int)1019U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
        #line 1019 
        branch_5 = arch_static_branch(& __UNIQUE_ID_ddebug549.key.dd_key_false.key,(_Bool)0);
        #line 1019 
        if ((long)((long)((int)branch_5 != 0)) != 0L) {
          #line 1019 
          void *__mptr_5;
          #line 1019 
          ;
          #line 1019 
          ;
          #line 1019 
          __mptr_5 = (void *)hw;
          #line 1019 
          __dynamic_dev_dbg(& __UNIQUE_ID_ddebug549,& (((struct ice_pf *)(__mptr_5 + 18446744073709549512U))->pdev)->dev,(char *)"Control Send Queue command 0x%04X completed with error 0x%X\n",(int)desc->opcode,(int)retval);
        }
      }
      #line 1025 
      retval = (unsigned short)((unsigned int)retval & 255U);
    }
    #line 1027 
    cmd_completed = (_Bool)1;
    #line 1028 
    if (status == ICE_SUCCESS && (unsigned int)retval != 0U) 
                                                             #line 1029 
                                                             status = ICE_ERR_AQ_ERROR;
    #line 1030 
    cq->sq_last_status = (enum ice_aq_err)retval;
  }
  {
    #line 1033 
    bool branch_6;
    #line 1033 
    struct _ddebug __UNIQUE_ID_ddebug550 = {.modname = (char *)"ice", .function = (char *)"ice_sq_send_cmd", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_controlq.c", .format = (char *)"ATQ: desc and buffer writeback:\n", .lineno = (unsigned int)1033U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 1033 
    branch_6 = arch_static_branch(& __UNIQUE_ID_ddebug550.key.dd_key_false.key,(_Bool)0);
    #line 1033 
    if ((long)((long)((int)branch_6 != 0)) != 0L) {
      #line 1033 
      void *__mptr_6;
      #line 1033 
      __mptr_6 = (void *)hw;
      #line 1033 
      __dynamic_dev_dbg(& __UNIQUE_ID_ddebug550,& (((struct ice_pf *)(__mptr_6 + 18446744073709549512U))->pdev)->dev,(char *)"ATQ: desc and buffer writeback:\n");
    }
  }
  #line 1036 
  ice_debug_cq(hw,(void *)desc,buf,(unsigned short)((int)buf_size));
  #line 1039 
  if (details->wb_desc != (struct ice_aq_desc *)0) 
                                                   #line 1040 
                                                   memcpy((void *)details->wb_desc,(void *)desc_on_ring,32UL);
  #line 1044 
  if (! cmd_completed) {
    {
      #line 1045 
      bool branch_7;
      #line 1045 
      struct _ddebug __UNIQUE_ID_ddebug551 = {.modname = (char *)"ice", .function = (char *)"ice_sq_send_cmd", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_controlq.c", .format = (char *)"Control Send Queue Writeback timeout.\n", .lineno = (unsigned int)1045U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 1045 
      branch_7 = arch_static_branch(& __UNIQUE_ID_ddebug551.key.dd_key_false.key,(_Bool)0);
      #line 1045 
      if ((long)((long)((int)branch_7 != 0)) != 0L) {
        #line 1045 
        void *__mptr_7;
        #line 1045 
        __mptr_7 = (void *)hw;
        #line 1045 
        __dynamic_dev_dbg(& __UNIQUE_ID_ddebug551,& (((struct ice_pf *)(__mptr_7 + 18446744073709549512U))->pdev)->dev,(char *)"Control Send Queue Writeback timeout.\n");
      }
    }
    #line 1047 
    status = ICE_ERR_AQ_TIMEOUT;
  }
  #line 1050 
  sq_send_command_error: 
                         #line 1050 
  ;
  #line 1051 
  cif_mutex_unlock_sq_lock_of_ice_ctl_q_info(& cq->sq_lock);
  #line 1052 
  return status;
}

#line 1062  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_controlq.c"
void ice_fill_dflt_direct_cmd_desc(struct ice_aq_desc *desc, u16 opcode)
{
  #line 1065 
  memset((void *)desc,0,32UL);
  #line 1066 
  desc->opcode = opcode;
  #line 1067 
  desc->flags = (unsigned short)8192U;
  #line 1068 
  return;
}

#line 1082  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_controlq.c"
enum ice_status ice_clean_rq_elem(struct ice_hw *hw, struct ice_ctl_q_info *cq, struct ice_rq_event_info *e, u16 *pending)
{
  #line 1131 
  int tmp_4;
  #line 1131 
  u16 __UNIQUE_ID___x554;
  #line 1087 
  struct ice_aq_desc *desc;
  #line 1088 
  struct ice_dma_mem *bi;
  #line 1089 
  u16 desc_idx;
  #line 1090 
  u16 datalen;
  #line 1091 
  u16 flags;
  #line 1092 
  u16 ntu;
  #line 1085 
  u16 ntc = cq->rq.next_to_clean;
  #line 1086 
  enum ice_status ret_code = 0;
  #line 1095 
  memset((void *)(& e->desc),0,32UL);
  #line 1098 
  cif_mutex_lock_rq_lock_of_ice_ctl_q_info(& cq->rq_lock);
  #line 1100 
  if ((unsigned int)cq->rq.count == 0U) {
    {
      #line 1101 
      bool branch;
      #line 1101 
      struct _ddebug __UNIQUE_ID_ddebug552 = {.modname = (char *)"ice", .function = (char *)"ice_clean_rq_elem", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_controlq.c", .format = (char *)"Control Receive queue not initialized.\n", .lineno = (unsigned int)1101U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 1101 
      branch = arch_static_branch(& __UNIQUE_ID_ddebug552.key.dd_key_false.key,(_Bool)0);
      #line 1101 
      if ((long)((long)((int)branch != 0)) != 0L) {
        #line 1101 
        void *__mptr;
        #line 1101 
        __mptr = (void *)hw;
        #line 1101 
        __dynamic_dev_dbg(& __UNIQUE_ID_ddebug552,& (((struct ice_pf *)(__mptr + 18446744073709549512U))->pdev)->dev,(char *)"Control Receive queue not initialized.\n");
      }
    }
    #line 1103 
    ret_code = ICE_ERR_AQ_EMPTY;
    #line 1104 
    goto clean_rq_elem_err;
  }
  #line 1108 
  ntu = (unsigned short)((int)((unsigned short)readl((void *)(hw->hw_addr + (unsigned long)cq->rq.head))) & (int)((unsigned short)cq->rq.head_mask));
  #line 1110 
  if ((int)ntu == (int)ntc) {
    #line 1112 
    ret_code = ICE_ERR_AQ_NO_WORK;
    #line 1113 
    goto clean_rq_elem_out;
  }
  #line 1117 
  desc = (struct ice_aq_desc *)cq->rq.desc_buf.va + (unsigned long)ntc;
  #line 1118 
  desc_idx = ntc;
  #line 1120 
  cq->rq_last_status = (enum ice_aq_err)desc->retval;
  #line 1121 
  flags = desc->flags;
  #line 1122 
  if (((unsigned long)flags & 4UL) != 0UL) {
    #line 1123 
    ret_code = ICE_ERR_AQ_ERROR;
    {
      #line 1124 
      bool branch_0;
      #line 1124 
      struct _ddebug __UNIQUE_ID_ddebug553 = {.modname = (char *)"ice", .function = (char *)"ice_clean_rq_elem", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_controlq.c", .format = (char *)"Control Receive Queue Event 0x%04X received with error 0x%X\n", .lineno = (unsigned int)1124U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 1124 
      branch_0 = arch_static_branch(& __UNIQUE_ID_ddebug553.key.dd_key_false.key,(_Bool)0);
      #line 1124 
      if ((long)((long)((int)branch_0 != 0)) != 0L) {
        #line 1124 
        void *__mptr_0;
        #line 1124 
        ;
        #line 1124 
        ;
        #line 1124 
        __mptr_0 = (void *)hw;
        #line 1124 
        __dynamic_dev_dbg(& __UNIQUE_ID_ddebug553,& (((struct ice_pf *)(__mptr_0 + 18446744073709549512U))->pdev)->dev,(char *)"Control Receive Queue Event 0x%04X received with error 0x%X\n",(int)desc->opcode,(unsigned int)cq->rq_last_status);
      }
    }
  }
  #line 1129 
  memcpy((void *)(& e->desc),(void *)desc,32UL);
  #line 1130 
  datalen = desc->datalen;
  {
    #line 1131 
    __UNIQUE_ID___x554 = datalen;
    #line 1131 
    u16 __UNIQUE_ID___y555 = e->buf_len;
    #line 1131 
    if ((int)__UNIQUE_ID___x554 < (int)__UNIQUE_ID___y555) 
                                                           #line 1131 
                                                           tmp_4 = (int)__UNIQUE_ID___x554; else 
                                                                    #line 1131 
                                                                    tmp_4 = (int)__UNIQUE_ID___y555;
    }
  #line 1131 
  e->msg_len = (unsigned short)tmp_4;
  #line 1132 
  if (e->msg_buf != (u8 *)0U && (unsigned int)e->msg_len != 0U) 
                                                                #line 1133 
                                                                memcpy((void *)e->msg_buf,(cq->rq.r.rq_bi + (unsigned long)desc_idx)->va,(unsigned long)e->msg_len);
  {
    #line 1135 
    bool branch_1;
    #line 1135 
    struct _ddebug __UNIQUE_ID_ddebug556 = {.modname = (char *)"ice", .function = (char *)"ice_clean_rq_elem", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_controlq.c", .format = (char *)"ARQ: desc and buffer:\n", .lineno = (unsigned int)1135U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 1135 
    branch_1 = arch_static_branch(& __UNIQUE_ID_ddebug556.key.dd_key_false.key,(_Bool)0);
    #line 1135 
    if ((long)((long)((int)branch_1 != 0)) != 0L) {
      #line 1135 
      void *__mptr_1;
      #line 1135 
      __mptr_1 = (void *)hw;
      #line 1135 
      __dynamic_dev_dbg(& __UNIQUE_ID_ddebug556,& (((struct ice_pf *)(__mptr_1 + 18446744073709549512U))->pdev)->dev,(char *)"ARQ: desc and buffer:\n");
    }
  }
  #line 1137 
  ice_debug_cq(hw,(void *)desc,(void *)e->msg_buf,(unsigned short)((int)cq->rq_buf_size));
  #line 1142 
  bi = cq->rq.r.rq_bi + (unsigned long)ntc;
  #line 1143 
  memset((void *)desc,0,32UL);
  #line 1145 
  desc->flags = (unsigned short)4096U;
  #line 1146 
  if ((unsigned int)cq->rq_buf_size > 512U) 
                                            #line 1147 
                                            desc->flags = (unsigned short)((unsigned int)desc->flags | 512U);
  #line 1148 
  desc->datalen = (unsigned short)bi->size;
  #line 1149 
  desc->params.generic.addr_high = (unsigned int)(bi->pa >> 32);
  #line 1150 
  desc->params.generic.addr_low = (unsigned int)bi->pa;
  #line 1153 
  writel((unsigned int)ntc,(void *)(hw->hw_addr + (unsigned long)cq->rq.tail));
  #line 1155 
  ntc = (u16)((int)ntc + 1);
  #line 1156 
  if ((int)cq->num_rq_entries == (int)ntc) 
                                           #line 1157 
                                           ntc = (unsigned short)0U;
  #line 1158 
  cq->rq.next_to_clean = ntc;
  #line 1159 
  cq->rq.next_to_use = ntu;
  #line 1161 
  clean_rq_elem_out: 
                     #line 1161 
  ;
  #line 1163 
  if (pending != (u16 *)0U) {
    #line 1166 
    unsigned int tmp_9;
    #line 1165 
    ntu = (unsigned short)((int)((unsigned short)readl((void *)(hw->hw_addr + (unsigned long)cq->rq.head))) & (int)((unsigned short)cq->rq.head_mask));
    #line 1166 
    if ((int)ntc > (int)ntu) 
                             #line 1166 
                             tmp_9 = (unsigned int)cq->rq.count; else 
                                                                   #line 1166 
                                                                   tmp_9 = 0U;
    #line 1166 
    *pending = (unsigned short)(tmp_9 + (unsigned int)((int)ntu - (int)ntc));
  }
  #line 1168 
  clean_rq_elem_err: 
                     #line 1168 
  ;
  #line 1169 
  cif_mutex_unlock_rq_lock_of_ice_ctl_q_info(& cq->rq_lock);
  #line 1171 
  return ret_code;
}

#line 798  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ice/ice.ko/concurrency safety/0/concurrency safety/weaver/ice_controlq.i.aux"
static void *cif_devm_kcalloc(struct device *dev, size_t n, size_t size, gfp_t flags)
{
  #line 801 
  return ldv_devm_kcalloc(n,size,flags);
}

#line 805  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ice/ice.ko/concurrency safety/0/concurrency safety/weaver/ice_controlq.i.aux"
static void cif_mutex_lock_sq_lock_of_ice_ctl_q_info(struct mutex *lock)
{
  #line 808 
  ldv_mutex_model_lock(lock,(char *)"sq_lock_of_ice_ctl_q_info");
  #line 809 
  return;
}

#line 812  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ice/ice.ko/concurrency safety/0/concurrency safety/weaver/ice_controlq.i.aux"
static void cif_mutex_unlock_sq_lock_of_ice_ctl_q_info(struct mutex *lock)
{
  #line 815 
  ldv_mutex_model_unlock(lock,(char *)"sq_lock_of_ice_ctl_q_info");
  #line 816 
  return;
}

#line 819  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ice/ice.ko/concurrency safety/0/concurrency safety/weaver/ice_controlq.i.aux"
static void cif_mutex_lock_rq_lock_of_ice_ctl_q_info(struct mutex *lock)
{
  #line 822 
  ldv_mutex_model_lock(lock,(char *)"rq_lock_of_ice_ctl_q_info");
  #line 823 
  return;
}

#line 826  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ice/ice.ko/concurrency safety/0/concurrency safety/weaver/ice_controlq.i.aux"
static void cif_mutex_unlock_rq_lock_of_ice_ctl_q_info(struct mutex *lock)
{
  #line 829 
  ldv_mutex_model_unlock(lock,(char *)"rq_lock_of_ice_ctl_q_info");
  #line 830 
  return;
}

#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bitops/find.h"
#line 105  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ice/ice.ko/concurrency safety/0/concurrency safety/weaver/ice_base.i.aux"
static unsigned long cif_find_next_zero_bit(unsigned long *addr, unsigned long size, unsigned long offset);
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bitops/instrumented-atomic.h"
#line 119  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ice/ice.ko/concurrency safety/0/concurrency safety/weaver/ice_base.i.aux"
static void cif_set_bit_0(long nr, unsigned long *addr);
#line 44  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bitops/instrumented-atomic.h"
#line 126  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ice/ice.ko/concurrency safety/0/concurrency safety/weaver/ice_base.i.aux"
static void cif_clear_bit_0(long nr, unsigned long *addr);
#line 184  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bitmap.h"
#line 805  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ice/ice.ko/concurrency safety/0/concurrency safety/weaver/ice_base.i.aux"
static unsigned long cif_bitmap_find_next_zero_area(unsigned long *map, unsigned long size, unsigned long start, unsigned int nr, unsigned long align_mask);
#line 408  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bitmap.h"
#line 819  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ice/ice.ko/concurrency safety/0/concurrency safety/weaver/ice_base.i.aux"
static void cif_bitmap_set(unsigned long *map, unsigned int start, unsigned int nbits);
#line 39  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cpumask.h"
#line 39 
extern unsigned int nr_cpu_ids;
#line 91 
#line 91 
extern struct cpumask __cpu_online_mask;
#line 134  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cpumask.h"
__inline static void cpu_max_bits_warn(unsigned int cpu, unsigned int bits)
{
  #line 137 
  int __ret_warn_on = cpu >= bits;
  #line 137 
  if ((long)(__ret_warn_on != 0) != 0L) {
    #line 138 
    ldv_inline_asm();
    #line 139 
    ldv_inline_asm();
  }
  #line 137 
  long tmp = (long)(__ret_warn_on != 0);
  #line 139 
  return;
}

#line 142  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cpumask.h"
__inline static unsigned int cpumask_check(unsigned int cpu)
{
  #line 144 
  cpu_max_bits_warn(cpu,nr_cpu_ids);
  #line 145 
  return cpu;
}

#line 325  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cpumask.h"
__inline static void cpumask_set_cpu(unsigned int cpu, struct cpumask *dstp)
{
  #line 327 
  ;
  #line 327 
  cif_set_bit_0((long)cpumask_check(cpu),(unsigned long *)(& dstp->bits));
  #line 328 
  return;
}

#line 358  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cpumask.h"
__inline static int cpumask_test_cpu(int cpu, struct cpumask *cpumask)
{
  #line 360 
  ;
  #line 360 
  return (int)test_bit((long)cpumask_check((unsigned int)cpu),
                 (unsigned long *)(& cpumask->bits));
}

#line 26  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ice/ice.ko/concurrency safety/0/concurrency safety/weaver/ice_base.i.aux"
#line 798 
static void cif_mutex_lock_qs_mutex_of_ice_qs_cfg(struct mutex *lock);
#line 27  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/device.h"
#line 27 
void *ldv_devm_kzalloc(size_t size, gfp_t flags);
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/bitmap.h"
#line 24 
void ldv_bitmap_set(unsigned long *map, unsigned int start, int nbits);
#line 29 
#line 29 
unsigned long ldv_bitmap_find_next_zero_area(unsigned long *map, unsigned long size, unsigned long start, unsigned int nr, unsigned long align_mask);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/find_bit.h"
#line 23 
unsigned long ldv_find_next_zero_bit(unsigned long *addr, unsigned long size, unsigned long offset);
#line 185  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mutex.h"
#line 812  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ice/ice.ko/concurrency safety/0/concurrency safety/weaver/ice_base.i.aux"
static void cif_mutex_unlock_qs_mutex_of_ice_qs_cfg(struct mutex *lock);
#line 81  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jiffies.h"
#line 81 
extern unsigned long jiffies;
#line 937  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
#line 826  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ice/ice.ko/concurrency safety/0/concurrency safety/weaver/ice_base.i.aux"
static void *cif_devm_kzalloc(struct device *dev, size_t size, gfp_t flags);
#line 1712  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
#line 1712 
void _dev_err(struct device *, char * , ...);
#line 147  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/xdp.h"
#line 147 
int xdp_rxq_info_reg(struct xdp_rxq_info *, struct net_device *, u32);
#line 151 
#line 151 
bool xdp_rxq_info_is_reg(struct xdp_rxq_info *);
#line 152 
#line 152 
int xdp_rxq_info_reg_mem_model(struct xdp_rxq_info *, enum xdp_mem_type, void *);
#line 154 
#line 154 
void xdp_rxq_info_unreg_mem_model(struct xdp_rxq_info *);
#line 2234  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
#line 2234 
void netif_napi_add(struct net_device *, struct napi_struct *, int (*)(struct napi_struct *, int ), int);
#line 2263 
#line 2263 
void netif_napi_del(struct napi_struct *);
#line 313  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_txrx.h"
__inline static void ice_set_ring_build_skb_ena(struct ice_ring *ring)
{
  #line 315 
  ring->flags = (unsigned char)((unsigned int)ring->flags | 2U);
  #line 316 
  return;
}

#line 318  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_txrx.h"
__inline static void ice_clear_ring_build_skb_ena(struct ice_ring *ring)
{
  #line 320 
  ring->flags = (unsigned char)((unsigned int)ring->flags & 253U);
  #line 321 
  return;
}

#line 323  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_txrx.h"
__inline static bool ice_ring_is_xdp(struct ice_ring *ring)
{
  #line 325 
  return (_Bool)(((unsigned long)ring->flags & 1UL) != 0UL);
}

#line 361 
#line 361 
bool ice_alloc_rx_bufs(struct ice_ring *rx_ring, u16 cleaned_count);
#line 369 
#line 369 
int ice_napi_poll(struct napi_struct *napi, int budget);
#line 52  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_common.h"
#line 52 
enum ice_status ice_write_rxq_ctx(struct ice_hw *hw, struct ice_rlan_ctx *rlan_ctx, u32 rxq_index);
#line 71 
#line 1221  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_common.c"
struct ice_ctx_ele ice_tlan_ctx_info[29U];
#line 73  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_common.h"
#line 73 
enum ice_status ice_set_ctx(u8 *src_ctx, u8 *dest_ctx, struct ice_ctx_ele *ce_info);
#line 128 
#line 128 
enum ice_status ice_dis_vsi_txq(struct ice_port_info *pi, u16 vsi_handle, u8 tc, u8 num_queues, u16 *q_handles, u16 *q_ids, u32 *q_teids, enum ice_disq_rst_src rst_src, u16 vmvf_num, struct ice_sq_cd *cd);
#line 136 
#line 136 
enum ice_status ice_ena_vsi_txq(struct ice_port_info *pi, u16 vsi_handle, u8 tc, u16 q_handle, u8 num_qgrps, struct ice_aqc_add_tx_qgrp *buf, u16 buf_size, struct ice_sq_cd *cd);
#line 238  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_switch.h"
#line 238 
u16 ice_get_hw_vsi_num(struct ice_hw *hw, u16 vsi_handle);
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_xsk.h"
#line 13 
void ice_zca_free(struct zero_copy_allocator *zca, unsigned long handle);
#line 17 
#line 17 
bool ice_alloc_rx_bufs_slow_zc(struct ice_ring *rx_ring, u16 count);
#line 445  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice.h"
__inline static bool ice_is_xdp_ena_vsi(struct ice_vsi *vsi)
{
  #line 447 
  return (_Bool)(vsi->xdp_prog != (struct bpf_prog *)0);
}

#line 462  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice.h"
__inline static struct xdp_umem *ice_xsk_umem(struct ice_ring *ring)
{
  #line 464 
  struct xdp_umem **umems = (ring->vsi)->xsk_umems;
  #line 465 
  int qid = (int)ring->q_index;
  #line 467 
  if ((int)ice_ring_is_xdp(ring) != 0) 
                                       #line 468 
                                       qid -= (int)(ring->vsi)->num_xdp_txq;
  #line 470 
  if (umems == (struct xdp_umem **)0 || *(umems + (unsigned long)qid) == (struct xdp_umem *)0) 
    #line 471 
    return (struct xdp_umem *)0;
  else {
    #line 470 
    if (! ice_is_xdp_ena_vsi(ring->vsi)) 
                                         #line 471 
                                         return (struct xdp_umem *)0;
  }
  #line 473 
  return *(umems + (unsigned long)qid);
}

#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_base.h"
#line 279  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_base.c"
int ice_setup_rx_ctx(struct ice_ring *ring);
#line 10  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_base.h"
#line 442  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_base.c"
int __ice_vsi_get_qs(struct ice_qs_cfg *qs_cfg);
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_base.h"
#line 463  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_base.c"
int ice_vsi_ctrl_rx_ring(struct ice_vsi *vsi, bool ena, u16 rxq_idx);
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_base.h"
#line 501  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_base.c"
int ice_vsi_alloc_q_vectors(struct ice_vsi *vsi);
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_base.h"
#line 542  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_base.c"
void ice_vsi_map_rings_to_vectors(struct ice_vsi *vsi);
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_base.h"
#line 594  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_base.c"
void ice_vsi_free_q_vectors(struct ice_vsi *vsi);
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_base.h"
#line 609  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_base.c"
int ice_vsi_cfg_txq(struct ice_vsi *vsi, struct ice_ring *ring, struct ice_aqc_add_tx_qgrp *qg_buf);
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_base.h"
#line 670  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_base.c"
void ice_cfg_itr(struct ice_hw *hw, struct ice_q_vector *q_vector);
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_base.h"
#line 714  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_base.c"
void ice_cfg_txq_interrupt(struct ice_vsi *vsi, u16 txq, u16 msix_idx, u16 itr_idx);
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_base.h"
#line 746  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_base.c"
void ice_cfg_rxq_interrupt(struct ice_vsi *vsi, u16 rxq, u16 msix_idx, u16 itr_idx);
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_base.h"
#line 767  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_base.c"
void ice_trigger_sw_intr(struct ice_hw *hw, struct ice_q_vector *q_vector);
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_base.h"
#line 784  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_base.c"
int ice_vsi_stop_tx_ring(struct ice_vsi *vsi, enum ice_disq_rst_src rst_src, u16 rel_vmvf_num, struct ice_ring *ring, struct ice_txq_meta *txq_meta);
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_base.h"
#line 844  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_base.c"
void ice_fill_txq_meta(struct ice_vsi *vsi, struct ice_ring *ring, struct ice_txq_meta *txq_meta);
#line 35  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_dcb_lib.h"
__inline static void ice_set_cgd_num(struct ice_tlan_ctx *tlan_ctx, struct ice_ring *ring)
{
  #line 37 
  tlan_ctx->cgd_num = (unsigned short)ring->dcb_tc;
  #line 38 
  return;
}

#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_base.c"
static int __ice_vsi_get_qs_contig(struct ice_qs_cfg *qs_cfg)
{
  #line 15 
  int offset;
  #line 15 
  int i;
  #line 17 
  cif_mutex_lock_qs_mutex_of_ice_qs_cfg(qs_cfg->qs_mutex);
  #line 18 
  offset = (int)cif_bitmap_find_next_zero_area(qs_cfg->pf_map,qs_cfg->pf_map_size,0UL,
                                     qs_cfg->q_count,0UL);
  #line 20 
  if ((unsigned long)offset >= qs_cfg->pf_map_size) {
    #line 21 
    cif_mutex_unlock_qs_mutex_of_ice_qs_cfg(qs_cfg->qs_mutex);
    #line 22 
    return -12;
  }
  #line 25 
  cif_bitmap_set(qs_cfg->pf_map,(unsigned int)offset,qs_cfg->q_count);
  #line 26 
  i = 0;
  #line 26 
  while (qs_cfg->q_count > (unsigned int)i) {
    #line 27 
    *(qs_cfg->vsi_map + (unsigned long)((int)qs_cfg->vsi_map_offset + i)) = (unsigned short)((int)((unsigned short)i) + (int)((unsigned short)offset));
    #line 26 
    i ++;
  }
  #line 28 
  cif_mutex_unlock_qs_mutex_of_ice_qs_cfg(qs_cfg->qs_mutex);
  #line 30 
  return 0;
}

#line 39  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_base.c"
static int __ice_vsi_get_qs_sc(struct ice_qs_cfg *qs_cfg)
{
  #line 41 
  int i;
  #line 41 
  int index = 0;
  #line 43 
  cif_mutex_lock_qs_mutex_of_ice_qs_cfg(qs_cfg->qs_mutex);
  #line 44 
  i = 0;
  #line 44 
  while (qs_cfg->q_count > (unsigned int)i) {
    {
      #line 45 
      index = (int)cif_find_next_zero_bit(qs_cfg->pf_map,qs_cfg->pf_map_size,
                             (unsigned long)index);
      #line 47 
      if ((unsigned long)index >= qs_cfg->pf_map_size) 
                                                       #line 48 
                                                       goto err_scatter;
      #line 49 
      cif_set_bit_0((long)index,qs_cfg->pf_map);
      #line 50 
      *(qs_cfg->vsi_map + (unsigned long)((int)qs_cfg->vsi_map_offset + i)) = (unsigned short)index;
    }
    #line 44 
    i ++;
  }
  #line 52 
  cif_mutex_unlock_qs_mutex_of_ice_qs_cfg(qs_cfg->qs_mutex);
  #line 54 
  return 0;
  #line 55 
  err_scatter: 
               #line 55 
  ;
  #line 56 
  index = 0;
  #line 56 
  while (index < i) {
    #line 57 
    cif_clear_bit_0((long)*(qs_cfg->vsi_map + (unsigned long)index),qs_cfg->pf_map);
    #line 58 
    *(qs_cfg->vsi_map + (unsigned long)((int)qs_cfg->vsi_map_offset + index)) = (unsigned short)0U;
    #line 56 
    index ++;
  }
  #line 60 
  cif_mutex_unlock_qs_mutex_of_ice_qs_cfg(qs_cfg->qs_mutex);
  #line 62 
  return -12;
}

#line 76  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_base.c"
static int ice_pf_rxq_wait(struct ice_pf *pf, int pf_q, bool ena)
{
  #line 78 
  int i;
  #line 80 
  i = 0;
  #line 80 
  while (i <= 49) {
    {
      #line 81 
      ;
      #line 81 
      if ((int)ena == (((unsigned long)readl((void *)(pf->hw.hw_addr + (unsigned long)((pf_q + 294912) * 4))) & 4UL) != 0UL)) 
        #line 83 
        return 0;
      #line 85 
      usleep_range(20UL,40UL);
    }
    #line 80 
    i ++;
  }
  #line 88 
  return -110;
}

#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_base.c"
static int ice_vsi_alloc_q_vector(struct ice_vsi *vsi, int v_idx)
{
  #line 101 
  struct ice_q_vector *q_vector;
  #line 100 
  struct ice_pf *pf = vsi->back;
  #line 104 
  q_vector = (struct ice_q_vector *)cif_devm_kzalloc(& (pf->pdev)->dev,4096UL,3264U);
  #line 106 
  if (q_vector == (struct ice_q_vector *)0) 
                                            #line 107 
                                            return -12;
  #line 109 
  q_vector->vsi = vsi;
  #line 110 
  q_vector->v_idx = (unsigned short)v_idx;
  #line 111 
  if (vsi->type == (unsigned int)ICE_VSI_VF) 
                                             #line 112 
                                             goto out;
  #line 114 
  if (cpumask_test_cpu(v_idx,& __cpu_online_mask) != 0) 
                                                        #line 115 
                                                        cpumask_set_cpu((unsigned int)v_idx,& q_vector->affinity_mask);
  #line 121 
  if (vsi->netdev != (struct net_device *)0) 
                                             #line 122 
                                             netif_napi_add(vsi->netdev,& q_vector->napi,& ice_napi_poll,64);
  #line 125 
  out: 
       #line 125 
  ;
  #line 127 
  *(vsi->q_vectors + (unsigned long)v_idx) = q_vector;
  #line 129 
  return 0;
}

#line 137  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_base.c"
static void ice_free_q_vector(struct ice_vsi *vsi, int v_idx)
{
  #line 139 
  struct ice_q_vector *q_vector;
  #line 141 
  struct ice_ring *ring;
  #line 142 
  struct device *dev;
  #line 140 
  struct ice_pf *pf = vsi->back;
  #line 144 
  dev = & (pf->pdev)->dev;
  #line 145 
  if (*(vsi->q_vectors + (unsigned long)v_idx) == (struct ice_q_vector *)0) {
    {
      #line 146 
      bool branch;
      #line 146 
      struct _ddebug __UNIQUE_ID_ddebug536 = {.modname = (char *)"ice", .function = (char *)"ice_free_q_vector", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_base.c", .format = (char *)"Queue vector at index %d not found\n", .lineno = (unsigned int)146U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 146 
      branch = arch_static_branch(& __UNIQUE_ID_ddebug536.key.dd_key_false.key,(_Bool)0);
      #line 146 
      if ((long)((long)((int)branch != 0)) != 0L) 
                                                  #line 146 
                                                  __dynamic_dev_dbg(& __UNIQUE_ID_ddebug536,dev,(char *)"Queue vector at index %d not found\n",v_idx);
    }
    #line 147 
    return;
  }
  #line 149 
  q_vector = *(vsi->q_vectors + (unsigned long)v_idx);
  #line 151 
  ring = q_vector->tx.ring;
  #line 151 
  while (ring != (struct ice_ring *)0) {
    #line 152 
    ring->q_vector = (struct ice_q_vector *)0;
    #line 151 
    ring = ring->next;
  }
  #line 153 
  ring = q_vector->rx.ring;
  #line 153 
  while (ring != (struct ice_ring *)0) {
    #line 154 
    ring->q_vector = (struct ice_q_vector *)0;
    #line 153 
    ring = ring->next;
  }
  #line 157 
  if (vsi->netdev != (struct net_device *)0) 
                                             #line 158 
                                             netif_napi_del(& q_vector->napi);
  #line 160 
  devm_kfree(dev,(void *)q_vector);
  #line 161 
  *(vsi->q_vectors + (unsigned long)v_idx) = (struct ice_q_vector *)0;
  #line 162 
  return;
}

#line 168  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_base.c"
static void ice_cfg_itr_gran(struct ice_hw *hw)
{
  #line 170 
  u32 regval = readl((void *)(hw->hw_addr + 1494100U));
  #line 173 
  if ((((((unsigned long)regval & 1UL) == 0UL && ((regval >> 16) & 15U) == 2U) && ((regval >> 20) & 15U) == 2U) && ((regval >> 24) & 15U) == 2U) && regval >> 28 == 2U) 
    #line 182 
    return;
  #line 184 
  regval = 572653568U;
  #line 192 
  writel(regval,(void *)(hw->hw_addr + 1494100U));
  #line 193 
  return;
}

#line 201  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_base.c"
static u16 ice_calc_q_handle(struct ice_vsi *vsi, struct ice_ring *ring, u8 tc)
{
  {
    #line 203 
    bool __warned;
    #line 203 
    int tmp_0;
    #line 203 
    if ((int)ice_ring_is_xdp(ring) != 0) 
      #line 203 
      if ((unsigned int)tc != 0U) 
                                  #line 203 
                                  tmp_0 = 1; else 
                                                  #line 203 
                                                  tmp_0 = 0;
    else 
         #line 203 
         tmp_0 = 0;
    #line 203 
    int __ret_warn_once = tmp_0;
    #line 203 
    if ((long)(__ret_warn_once != 0) != 0L && (long)(! __warned) != 0L) {
      #line 203 
      __warned = (_Bool)1;
      {
        #line 203 
        int __ret_warn_on = 1;
        #line 203 
        if ((long)(__ret_warn_on != 0) != 0L) {
          #line 203 
          __warn_printk((char *)"XDP ring can\'t belong to TC other than 0");
          #line 204 
          ldv_inline_asm();
          #line 205 
          ldv_inline_asm();
        }
        #line 203 
        long tmp_2 = (long)(__ret_warn_on != 0);
      }
    }
    #line 203 
    long tmp_4 = (long)(__ret_warn_once != 0);
  }
  #line 210 
  return (unsigned short)((int)ring->q_index - (int)vsi->tc_cfg.tc_info[(int)tc].qoffset);
}

#line 222  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_base.c"
static void ice_setup_tx_ctx(struct ice_ring *ring, struct ice_tlan_ctx *tlan_ctx, u16 pf_q)
{
  #line 224 
  struct ice_vsi *vsi = ring->vsi;
  #line 225 
  struct ice_hw *hw = & (vsi->back)->hw;
  #line 227 
  tlan_ctx->base = ring->dma >> 7;
  #line 229 
  tlan_ctx->port_num = (vsi->port_info)->lport;
  #line 232 
  tlan_ctx->qlen = (unsigned int)ring->count;
  #line 234 
  ice_set_cgd_num(tlan_ctx,ring);
  #line 237 
  tlan_ctx->pf_num = hw->pf_id;
  #line 245 
  switch ((unsigned int)vsi->type) {
    #line 246 
    case (unsigned int)6: 
                          #line 246 
    ;
    #line 248 
    case (unsigned int)0: 
                          #line 248 
    ;
    #line 249 
    tlan_ctx->vmvf_type = (unsigned char)2U;
    #line 250 
    break;
    #line 251 
    case (unsigned int)1: 
                          #line 251 
    ;
    #line 253 
    tlan_ctx->vmvf_num = (unsigned short)((int)((unsigned short)hw->func_caps.vf_base_id) + (int)((unsigned short)vsi->vf_id));
    #line 254 
    tlan_ctx->vmvf_type = (unsigned char)0U;
    #line 255 
    break;
    #line 256 
    default: 
             #line 256 
    ;
    #line 257 
    return;
  }
  #line 261 
  tlan_ctx->src_vsi = ice_get_hw_vsi_num(hw,(unsigned short)((int)vsi->idx));
  #line 263 
  tlan_ctx->tso_ena = (unsigned char)1U;
  #line 264 
  tlan_ctx->tso_qnum = pf_q;
  #line 270 
  tlan_ctx->legacy_int = (unsigned char)1U;
  #line 271 
  return;
}

#line 279  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_base.c"
int ice_setup_rx_ctx(struct ice_ring *ring)
{
  #line 375 
  unsigned short __UNIQUE_ID___x538;
  #line 375 
  int tmp_1;
  #line 284 
  struct ice_rlan_ctx rlan_ctx;
  #line 285 
  struct ice_hw *hw;
  #line 286 
  u32 regval;
  #line 287 
  u16 pf_q;
  #line 288 
  int err;
  #line 281 
  int chain_len = 5;
  #line 282 
  struct ice_vsi *vsi = ring->vsi;
  #line 283 
  u32 rxdid = 2U;
  #line 290 
  hw = & (vsi->back)->hw;
  #line 293 
  pf_q = *(vsi->rxq_map + (unsigned long)ring->q_index);
  #line 296 
  memset((void *)(& rlan_ctx),0,48UL);
  #line 298 
  ring->rx_buf_len = vsi->rx_buf_len;
  #line 300 
  if ((ring->vsi)->type == (unsigned int)ICE_VSI_PF) {
    #line 301 
    if (! xdp_rxq_info_is_reg(& ring->xdp_rxq)) 
                                                #line 302 
                                                xdp_rxq_info_reg(& ring->xdp_rxq,ring->netdev,(unsigned int)ring->q_index);
    #line 305 
    ring->xsk_umem = ice_xsk_umem(ring);
    #line 306 
    if (ring->xsk_umem != (struct xdp_umem *)0) {
      #line 307 
      xdp_rxq_info_unreg_mem_model(& ring->xdp_rxq);
      #line 309 
      ring->rx_buf_len = (unsigned short)((unsigned int)((unsigned short)(ring->xsk_umem)->chunk_size_nohr) + 65280U);
      #line 315 
      chain_len = 1;
      #line 316 
      ring->zca.free = & ice_zca_free;
      #line 317 
      err = xdp_rxq_info_reg_mem_model(& ring->xdp_rxq,(enum xdp_mem_type)MEM_TYPE_ZERO_COPY,(void *)(& ring->zca));
      #line 320 
      if (err != 0) 
                    #line 321 
                    return err;
      #line 323 
      _dev_info(& ((vsi->back)->pdev)->dev,(char *)"Registered XDP mem model MEM_TYPE_ZERO_COPY on Rx ring %d\n",(int)ring->q_index);
    }
    else {
      #line 326 
      if (! xdp_rxq_info_is_reg(& ring->xdp_rxq)) 
                                                  #line 327 
                                                  xdp_rxq_info_reg(& ring->xdp_rxq,ring->netdev,(unsigned int)ring->q_index);
      #line 331 
      err = xdp_rxq_info_reg_mem_model(& ring->xdp_rxq,(enum xdp_mem_type)MEM_TYPE_PAGE_SHARED,(void *)0);
      #line 334 
      if (err != 0) 
                    #line 335 
                    return err;
    }
  }
  #line 342 
  rlan_ctx.base = ring->dma >> 7;
  #line 344 
  rlan_ctx.qlen = ring->count;
  #line 349 
  rlan_ctx.dbuf = (unsigned short)((int)ring->rx_buf_len >> 7);
  #line 352 
  rlan_ctx.dsize = (unsigned char)1U;
  #line 357 
  rlan_ctx.crcstrip = (unsigned char)1U;
  #line 360 
  rlan_ctx.l2tsel = (unsigned char)1U;
  #line 362 
  rlan_ctx.dtype = (unsigned char)0U;
  #line 363 
  rlan_ctx.hsplit_0 = (unsigned char)0U;
  #line 364 
  rlan_ctx.hsplit_1 = (unsigned char)0U;
  #line 370 
  rlan_ctx.showiv = (unsigned char)0U;
  {
    #line 375 
    __UNIQUE_ID___x538 = vsi->max_frame;
    #line 375 
    unsigned short __UNIQUE_ID___y539 = (unsigned short)((int)((unsigned short)chain_len) * (int)ring->rx_buf_len);
    #line 375 
    if ((int)__UNIQUE_ID___x538 < (int)__UNIQUE_ID___y539) 
                                                           #line 375 
                                                           tmp_1 = (int)__UNIQUE_ID___x538; else 
                                                                    #line 375 
                                                                    tmp_1 = (int)__UNIQUE_ID___y539;
    }
  #line 375 
  rlan_ctx.rxmax = (unsigned int)tmp_1;
  #line 379 
  rlan_ctx.lrxqthresh = (unsigned short)1U;
  #line 384 
  if (vsi->type != (unsigned int)ICE_VSI_VF) {
    #line 385 
    regval = readl((void *)(hw->hw_addr + (unsigned long)(((int)pf_q + 1179648) * 4)));
    #line 386 
    regval = (rxdid & 63U) | regval;
    #line 393 
    regval |= 768U;
    #line 396 
    writel(regval,(void *)(hw->hw_addr + (unsigned long)(((int)pf_q + 1179648) * 4)));
  }
  #line 400 
  err = (int)ice_write_rxq_ctx(hw,& rlan_ctx,(unsigned int)pf_q);
  #line 401 
  if (err != 0) {
    #line 402 
    _dev_err(& ((vsi->back)->pdev)->dev,(char *)"Failed to set LAN Rx queue context for absolute Rx queue %d error: %d\n",(int)pf_q,err);
    #line 405 
    return -5;
  }
  #line 408 
  if (vsi->type == (unsigned int)ICE_VSI_VF) 
                                             #line 409 
                                             return 0;
  #line 412 
  if (vsi->netdev == (struct net_device *)0) 
                                             #line 412 
                                             goto _LOR;
  else {
    #line 412 
    if ((int)test_bit(11L,(unsigned long *)(& (vsi->back)->flags)) != 0) 
      #line 412 
      _LOR: 
            #line 413 
            ice_clear_ring_build_skb_ena(ring); else 
                                                     #line 415 
                                                     ice_set_ring_build_skb_ena(ring);
  }
  #line 418 
  ring->tail = hw->hw_addr + (unsigned long)(((int)pf_q + 671744) * 4);
  #line 419 
  writel(0U,(void *)ring->tail);
  #line 421 
  if (ring->xsk_umem != (struct xdp_umem *)0) {
    #line 422 
    unsigned int tmp_5;
    #line 422 
    if ((int)ring->next_to_clean <= (int)ring->next_to_use) 
                                                            #line 422 
                                                            tmp_5 = (unsigned int)ring->count; else 
                                                                    #line 422 
                                                                    tmp_5 = 0U;
    #line 422 
    ;
    #line 422 
    ;
    #line 421 
    err = (int)ice_alloc_rx_bufs_slow_zc(ring,
                                  (unsigned short)((int)(((tmp_5 + (unsigned int)ring->next_to_clean) - (unsigned int)ring->next_to_use) + 65535U)));
  }
  else {
    #line 423 
    unsigned int tmp_7;
    #line 423 
    if ((int)ring->next_to_clean <= (int)ring->next_to_use) 
                                                            #line 423 
                                                            tmp_7 = (unsigned int)ring->count; else 
                                                                    #line 423 
                                                                    tmp_7 = 0U;
    #line 423 
    ;
    #line 423 
    ;
    #line 421 
    err = (int)ice_alloc_rx_bufs(ring,
                          (unsigned short)((int)(((tmp_7 + (unsigned int)ring->next_to_clean) - (unsigned int)ring->next_to_use) + 65535U)));
  }
  #line 424 
  if (err != 0) {
    #line 425 
    char *tmp_9;
    #line 425 
    ;
    #line 425 
    ;
    #line 425 
    if (ring->xsk_umem != (struct xdp_umem *)0) 
                                                #line 425 
                                                tmp_9 = (char *)"UMEM enabled "; else 
                                                                    #line 425 
                                                                    tmp_9 = (char *)"";
    #line 425 
    ;
    #line 425 
    _dev_info(& ((vsi->back)->pdev)->dev,(char *)"Failed allocate some buffers on %sRx ring %d (pf_q %d)\n",tmp_9,(int)ring->q_index,(int)pf_q);
  }
  #line 430 
  return 0;
}

#line 442  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_base.c"
int __ice_vsi_get_qs(struct ice_qs_cfg *qs_cfg)
{
  #line 444 
  int ret = 0;
  #line 446 
  ret = __ice_vsi_get_qs_contig(qs_cfg);
  #line 447 
  if (ret != 0) {
    #line 450 
    unsigned short __UNIQUE_ID___x540;
    #line 450 
    int tmp;
    #line 449 
    qs_cfg->mapping_mode = (unsigned char)1U;
    {
      #line 450 
      __UNIQUE_ID___x540 = (unsigned short)qs_cfg->q_count;
      #line 450 
      unsigned short __UNIQUE_ID___y541 = (unsigned short)qs_cfg->scatter_count;
      #line 450 
      if ((int)__UNIQUE_ID___x540 < (int)__UNIQUE_ID___y541) 
                                                             #line 450 
                                                             tmp = (int)__UNIQUE_ID___x540; else 
                                                                    #line 450 
                                                                    tmp = (int)__UNIQUE_ID___y541;
      }
    #line 450 
    qs_cfg->q_count = (unsigned int)tmp;
    #line 452 
    ret = __ice_vsi_get_qs_sc(qs_cfg);
  }
  #line 454 
  return ret;
}

#line 463  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_base.c"
int ice_vsi_ctrl_rx_ring(struct ice_vsi *vsi, bool ena, u16 rxq_idx)
{
  #line 469 
  u32 rx_reg;
  #line 465 
  int pf_q = (int)*(vsi->rxq_map + (unsigned long)rxq_idx);
  #line 466 
  struct ice_pf *pf = vsi->back;
  #line 467 
  struct ice_hw *hw = & pf->hw;
  #line 468 
  int ret = 0;
  #line 471 
  rx_reg = readl((void *)(hw->hw_addr + (unsigned long)((pf_q + 294912) * 4)));
  #line 474 
  if ((int)ena == (((unsigned long)rx_reg & 4UL) != 0UL)) 
                                                          #line 475 
                                                          return 0;
  #line 478 
  if ((int)ena != 0) 
                     #line 479 
                     rx_reg |= 1U; else 
                                        #line 481 
                                        rx_reg &= 4294967294U;
  #line 482 
  writel(rx_reg,(void *)(hw->hw_addr + (unsigned long)((pf_q + 294912) * 4)));
  #line 485 
  ret = ice_pf_rxq_wait(pf,pf_q,(_Bool)((bool)((int)ena) != 0));
  #line 486 
  if (ret != 0) {
    #line 487 
    char *tmp;
    #line 487 
    if ((int)ena != 0) 
                       #line 487 
                       tmp = (char *)"en"; else 
                                                #line 487 
                                                tmp = (char *)"dis";
    #line 487 
    ;
    #line 487 
    ;
    #line 487 
    ;
    #line 487 
    _dev_err(& (pf->pdev)->dev,(char *)"VSI idx %d Rx ring %d %sable timeout\n",(int)vsi->idx,pf_q,tmp);
  }
  #line 491 
  return ret;
}

#line 501  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_base.c"
int ice_vsi_alloc_q_vectors(struct ice_vsi *vsi)
{
  #line 504 
  int num_q_vectors;
  #line 505 
  struct device *dev;
  #line 506 
  int err;
  #line 503 
  struct ice_pf *pf = vsi->back;
  #line 504 
  int v_idx = 0;
  #line 508 
  dev = & (pf->pdev)->dev;
  #line 509 
  if (*(vsi->q_vectors) != (struct ice_q_vector *)0) {
    {
      #line 510 
      bool branch;
      #line 510 
      struct _ddebug __UNIQUE_ID_ddebug542 = {.modname = (char *)"ice", .function = (char *)"ice_vsi_alloc_q_vectors", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_base.c", .format = (char *)"VSI %d has existing q_vectors\n", .lineno = (unsigned int)510U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 510 
      branch = arch_static_branch(& __UNIQUE_ID_ddebug542.key.dd_key_false.key,(_Bool)0);
      #line 510 
      if ((long)((long)((int)branch != 0)) != 0L) 
                                                  #line 510 
                                                  __dynamic_dev_dbg(& __UNIQUE_ID_ddebug542,dev,(char *)"VSI %d has existing q_vectors\n",(int)vsi->vsi_num);
    }
    #line 511 
    return -17;
  }
  #line 514 
  num_q_vectors = vsi->num_q_vectors;
  #line 516 
  v_idx = 0;
  #line 516 
  while (v_idx < num_q_vectors) {
    #line 517 
    err = ice_vsi_alloc_q_vector(vsi,v_idx);
    #line 518 
    if (err != 0) 
                  #line 519 
                  goto err_out;
    #line 516 
    v_idx ++;
  }
  #line 522 
  return 0;
  #line 524 
  err_out: 
           #line 524 
  ;
  #line 525 
  while (1) {
    #line 525 
    int tmp_0;
    #line 525 
    tmp_0 = v_idx;
    #line 525 
    v_idx --;
    #line 525 
    ;
    #line 525 
    if (! (tmp_0 != 0)) 
                        #line 525 
                        break;
    #line 526 
    ice_free_q_vector(vsi,v_idx);
  }
  #line 528 
  _dev_err(dev,(char *)"Failed to allocate %d q_vector for VSI %d, ret=%d\n",vsi->num_q_vectors,(int)vsi->vsi_num,err);
  #line 530 
  vsi->num_q_vectors = 0;
  #line 531 
  return err;
}

#line 542  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_base.c"
void ice_vsi_map_rings_to_vectors(struct ice_vsi *vsi)
{
  #line 545 
  int tx_rings_rem;
  #line 545 
  int rx_rings_rem;
  #line 546 
  int v_id;
  #line 544 
  int q_vectors = vsi->num_q_vectors;
  #line 549 
  tx_rings_rem = (int)vsi->num_txq;
  #line 550 
  rx_rings_rem = (int)vsi->num_rxq;
  #line 552 
  v_id = 0;
  #line 552 
  while (v_id < q_vectors) {
    {
      #line 554 
      int tx_rings_per_v;
      #line 554 
      int rx_rings_per_v;
      #line 554 
      int q_id;
      #line 554 
      int q_base;
      #line 553 
      struct ice_q_vector *q_vector = *(vsi->q_vectors + (unsigned long)v_id);
      #line 557 
      tx_rings_per_v = (((q_vectors - v_id) + tx_rings_rem) + -1) / (q_vectors - v_id);
      #line 558 
      q_vector->num_ring_tx = (unsigned char)tx_rings_per_v;
      #line 559 
      q_vector->tx.ring = (struct ice_ring *)0;
      #line 560 
      q_vector->tx.itr_idx = (unsigned short)1U;
      #line 561 
      q_base = (int)vsi->num_txq - tx_rings_rem;
      #line 563 
      q_id = q_base;
      #line 563 
      while (q_base + tx_rings_per_v > q_id) {
        {
          #line 564 
          struct ice_ring *tx_ring = *(vsi->tx_rings + (unsigned long)q_id);
          #line 566 
          tx_ring->q_vector = q_vector;
          #line 567 
          tx_ring->next = q_vector->tx.ring;
          #line 568 
          q_vector->tx.ring = tx_ring;
        }
        #line 563 
        q_id ++;
      }
      #line 570 
      tx_rings_rem -= tx_rings_per_v;
      #line 573 
      rx_rings_per_v = (((q_vectors - v_id) + rx_rings_rem) + -1) / (q_vectors - v_id);
      #line 574 
      q_vector->num_ring_rx = (unsigned char)rx_rings_per_v;
      #line 575 
      q_vector->rx.ring = (struct ice_ring *)0;
      #line 576 
      q_vector->rx.itr_idx = (unsigned short)0U;
      #line 577 
      q_base = (int)vsi->num_rxq - rx_rings_rem;
      #line 579 
      q_id = q_base;
      #line 579 
      while (q_base + rx_rings_per_v > q_id) {
        {
          #line 580 
          struct ice_ring *rx_ring = *(vsi->rx_rings + (unsigned long)q_id);
          #line 582 
          rx_ring->q_vector = q_vector;
          #line 583 
          rx_ring->next = q_vector->rx.ring;
          #line 584 
          q_vector->rx.ring = rx_ring;
        }
        #line 579 
        q_id ++;
      }
      #line 586 
      rx_rings_rem -= rx_rings_per_v;
    }
    #line 552 
    v_id ++;
  }
  #line 588 
  return;
}

#line 594  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_base.c"
void ice_vsi_free_q_vectors(struct ice_vsi *vsi)
{
  #line 596 
  int v_idx;
  #line 598 
  v_idx = 0;
  #line 598 
  while (vsi->num_q_vectors > v_idx) {
    #line 599 
    ice_free_q_vector(vsi,v_idx);
    #line 598 
    v_idx ++;
  }
  #line 600 
  return;
}

#line 609  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_base.c"
int ice_vsi_cfg_txq(struct ice_vsi *vsi, struct ice_ring *ring, struct ice_aqc_add_tx_qgrp *qg_buf)
{
  #line 613 
  struct ice_aqc_add_txqs_perq *txq;
  #line 616 
  enum ice_status status;
  #line 617 
  u16 pf_q;
  #line 618 
  u8 tc;
  #line 612 
  struct ice_tlan_ctx tlan_ctx = {.base = 0ULL, .port_num = (unsigned char)0, .cgd_num = (unsigned short)0, .pf_num = (unsigned char)0, .vmvf_num = (unsigned short)0, .vmvf_type = (unsigned char)0, .src_vsi = (unsigned short)0, .tsyn_ena = (unsigned char)0, .internal_usage_flag = (unsigned char)0, .alt_vlan = (unsigned char)0, .cpuid = (unsigned short)0, .wb_mode = (unsigned char)0, .tphrd_desc = (unsigned char)0, .tphrd = (unsigned char)0, .tphwr_desc = (unsigned char)0, .cmpq_id = (unsigned short)0, .qnum_in_func = (unsigned short)0, .itr_notification_mode = (unsigned char)0, .adjust_prof_id = (unsigned char)0, .qlen = 0U, .quanta_prof_idx = (unsigned char)0, .tso_ena = (unsigned char)0, .tso_qnum = (unsigned short)0, .legacy_int = (unsigned char)0, .drop_ena = (unsigned char)0, .cache_prof_idx = (unsigned char)0, .pkt_shaper_prof_idx = (unsigned char)0, .int_q_state = (unsigned char)0};
  #line 614 
  struct ice_pf *pf = vsi->back;
  #line 615 
  u8 buf_len = (unsigned char)56U;
  #line 620 
  pf_q = ring->reg_idx;
  #line 621 
  ice_setup_tx_ctx(ring,& tlan_ctx,(unsigned short)((int)pf_q));
  #line 623 
  qg_buf->txqs[0].txq_id = pf_q;
  #line 624 
  ice_set_ctx((u8 *)(& tlan_ctx),(u8 *)(& qg_buf->txqs[0].txq_ctx),(struct ice_ctx_ele *)(& ice_tlan_ctx_info));
  #line 630 
  ring->tail = pf->hw.hw_addr + (unsigned long)(((int)pf_q + 720896) * 4);
  #line 633 
  tc = ring->dcb_tc;
  #line 640 
  ring->q_handle = ice_calc_q_handle(vsi,ring,(unsigned char)((int)tc));
  #line 642 
  status = ice_ena_vsi_txq(vsi->port_info,(unsigned short)((int)vsi->idx),(unsigned char)((int)tc),(unsigned short)((int)ring->q_handle),(unsigned char)1,qg_buf,(unsigned short)((int)buf_len),(struct ice_sq_cd *)0);
  #line 644 
  if (status != ICE_SUCCESS) {
    #line 645 
    _dev_err(& (pf->pdev)->dev,(char *)"Failed to set LAN Tx queue context, error: %d\n",(int)status);
    #line 648 
    return -19;
  }
  #line 655 
  txq = & qg_buf->txqs[0];
  #line 656 
  if ((int)txq->txq_id == (int)pf_q) 
                                     #line 657 
                                     ring->txq_teid = txq->q_teid;
  #line 659 
  return 0;
}

#line 670  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_base.c"
void ice_cfg_itr(struct ice_hw *hw, struct ice_q_vector *q_vector)
{
  #line 672 
  ice_cfg_itr_gran(hw);
  #line 674 
  if ((unsigned int)q_vector->num_ring_rx != 0U) {
    #line 675 
    struct ice_ring_container *rc = & q_vector->rx;
    #line 678 
    if ((unsigned int)rc->itr_setting == 0U) 
                                             #line 679 
                                             rc->itr_setting = (unsigned short)32818U;
    #line 681 
    rc->target_itr = (unsigned short)((unsigned int)rc->itr_setting & 32767U);
    #line 682 
    rc->next_update = jiffies + 1UL;
    #line 683 
    rc->current_itr = rc->target_itr;
    #line 684 
    writel((unsigned int)(((int)rc->current_itr + -8191) >> 1) & 4095U,(void *)(hw->hw_addr + (unsigned long)((((int)rc->itr_idx * 2048 + (int)q_vector->reg_idx) + 348160) * 4)));
  }
  #line 688 
  if ((unsigned int)q_vector->num_ring_tx != 0U) {
    #line 689 
    struct ice_ring_container *rc_0 = & q_vector->tx;
    #line 692 
    if ((unsigned int)rc_0->itr_setting == 0U) 
                                               #line 693 
                                               rc_0->itr_setting = (unsigned short)32818U;
    #line 695 
    rc_0->target_itr = (unsigned short)((unsigned int)rc_0->itr_setting & 32767U);
    #line 696 
    rc_0->next_update = jiffies + 1UL;
    #line 697 
    rc_0->current_itr = rc_0->target_itr;
    #line 698 
    writel((unsigned int)(((int)rc_0->current_itr + -8191) >> 1) & 4095U,(void *)(hw->hw_addr + (unsigned long)((((int)rc_0->itr_idx * 2048 + (int)q_vector->reg_idx) + 348160) * 4)));
  }
  #line 700 
  return;
}

#line 714  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_base.c"
void ice_cfg_txq_interrupt(struct ice_vsi *vsi, u16 txq, u16 msix_idx, u16 itr_idx)
{
  #line 718 
  u32 val;
  #line 716 
  struct ice_pf *pf = vsi->back;
  #line 717 
  struct ice_hw *hw = & pf->hw;
  #line 720 
  itr_idx = (unsigned short)((unsigned int)((unsigned short)((int)itr_idx << 11)) & 6144U);
  #line 722 
  val = ((unsigned int)itr_idx | ((unsigned int)msix_idx & 2047U)) | 1073741824U;
  #line 725 
  writel(val,(void *)(hw->hw_addr + (unsigned long)(((int)*(vsi->txq_map + (unsigned long)txq) + 327680) * 4)));
  #line 726 
  if ((int)ice_is_xdp_ena_vsi(vsi) != 0) {
    #line 727 
    u32 xdp_txq = (unsigned int)((int)txq + (int)vsi->num_xdp_txq);
    #line 729 
    writel(val,(void *)(hw->hw_addr + (unsigned long)(((int)*(vsi->txq_map + (unsigned long)xdp_txq) + 327680) * 4)));
  }
  #line 732 
  readl((void *)(hw->hw_addr + 745772U));
  #line 733 
  return;
}

#line 746  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_base.c"
void ice_cfg_rxq_interrupt(struct ice_vsi *vsi, u16 rxq, u16 msix_idx, u16 itr_idx)
{
  #line 750 
  u32 val;
  #line 748 
  struct ice_pf *pf = vsi->back;
  #line 749 
  struct ice_hw *hw = & pf->hw;
  #line 752 
  itr_idx = (unsigned short)((unsigned int)((unsigned short)((int)itr_idx << 11)) & 6144U);
  #line 754 
  val = ((unsigned int)itr_idx | ((unsigned int)msix_idx & 2047U)) | 1073741824U;
  #line 757 
  writel(val,(void *)(hw->hw_addr + (unsigned long)(((int)*(vsi->rxq_map + (unsigned long)rxq) + 344064) * 4)));
  #line 759 
  readl((void *)(hw->hw_addr + 745772U));
  #line 760 
  return;
}

#line 767  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_base.c"
void ice_trigger_sw_intr(struct ice_hw *hw, struct ice_q_vector *q_vector)
{
  #line 769 
  writel(29U,(void *)(hw->hw_addr + (unsigned long)(((int)q_vector->reg_idx + 360448) * 4)));
  #line 770 
  return;
}

#line 784  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_base.c"
int ice_vsi_stop_tx_ring(struct ice_vsi *vsi, enum ice_disq_rst_src rst_src, u16 rel_vmvf_num, struct ice_ring *ring, struct ice_txq_meta *txq_meta)
{
  #line 789 
  struct ice_q_vector *q_vector;
  #line 791 
  enum ice_status status;
  #line 792 
  u32 val;
  #line 788 
  struct ice_pf *pf = vsi->back;
  #line 790 
  struct ice_hw *hw = & pf->hw;
  #line 795 
  val = readl((void *)(hw->hw_addr + (unsigned long)(((int)ring->reg_idx + 327680) * 4)));
  #line 796 
  val &= 3221225471U;
  #line 797 
  writel(val,(void *)(hw->hw_addr + (unsigned long)(((int)ring->reg_idx + 327680) * 4)));
  #line 800 
  __const_udelay(500UL);
  #line 805 
  q_vector = ring->q_vector;
  #line 806 
  if (q_vector != (struct ice_q_vector *)0) 
                                            #line 807 
                                            ice_trigger_sw_intr(hw,q_vector);
  #line 809 
  status = ice_dis_vsi_txq(vsi->port_info,(unsigned short)((int)txq_meta->vsi_idx),(unsigned char)((int)txq_meta->tc),(unsigned char)1,& txq_meta->q_handle,& txq_meta->q_id,& txq_meta->q_teid,rst_src,(unsigned short)((int)rel_vmvf_num),(struct ice_sq_cd *)0);
  #line 819 
  if (status == ICE_ERR_RESET_ONGOING) {
    #line 820 
    bool branch;
    #line 820 
    struct _ddebug __UNIQUE_ID_ddebug543 = {.modname = (char *)"ice", .function = (char *)"ice_vsi_stop_tx_ring", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_base.c", .format = (char *)"Reset in progress. LAN Tx queues already disabled\n", .lineno = (unsigned int)820U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 820 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug543.key.dd_key_false.key,(_Bool)0);
    #line 820 
    if ((long)((long)((int)branch != 0)) != 0L) 
                                                #line 820 
                                                __dynamic_dev_dbg(& __UNIQUE_ID_ddebug543,& ((vsi->back)->pdev)->dev,(char *)"Reset in progress. LAN Tx queues already disabled\n");
  }
  else 
    #line 822 
    if (status == ICE_ERR_DOES_NOT_EXIST) {
      #line 823 
      bool branch_0;
      #line 823 
      struct _ddebug __UNIQUE_ID_ddebug544 = {.modname = (char *)"ice", .function = (char *)"ice_vsi_stop_tx_ring", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_base.c", .format = (char *)"LAN Tx queues do not exist, nothing to disable\n", .lineno = (unsigned int)823U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 823 
      branch_0 = arch_static_branch(& __UNIQUE_ID_ddebug544.key.dd_key_false.key,(_Bool)0);
      #line 823 
      if ((long)((long)((int)branch_0 != 0)) != 0L) 
                                                    #line 823 
                                                    __dynamic_dev_dbg(& __UNIQUE_ID_ddebug544,& ((vsi->back)->pdev)->dev,(char *)"LAN Tx queues do not exist, nothing to disable\n");
    }
    else 
      #line 825 
      if (status != ICE_SUCCESS) {
        #line 826 
        _dev_err(& ((vsi->back)->pdev)->dev,(char *)"Failed to disable LAN Tx queues, error: %d\n",(int)status);
        #line 828 
        return -19;
      }
  #line 831 
  return 0;
}

#line 844  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_base.c"
void ice_fill_txq_meta(struct ice_vsi *vsi, struct ice_ring *ring, struct ice_txq_meta *txq_meta)
{
  #line 847 
  u8 tc;
  #line 850 
  tc = ring->dcb_tc;
  #line 854 
  txq_meta->q_id = ring->reg_idx;
  #line 855 
  txq_meta->q_teid = ring->txq_teid;
  #line 856 
  txq_meta->q_handle = ring->q_handle;
  #line 857 
  txq_meta->vsi_idx = vsi->idx;
  #line 858 
  txq_meta->tc = tc;
  #line 859 
  return;
}

#line 105  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ice/ice.ko/concurrency safety/0/concurrency safety/weaver/ice_base.i.aux"
static unsigned long cif_find_next_zero_bit(unsigned long *addr, unsigned long size, unsigned long offset)
{
  #line 108 
  return ldv_find_next_zero_bit(addr,size,offset);
}

#line 119  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ice/ice.ko/concurrency safety/0/concurrency safety/weaver/ice_base.i.aux"
static void cif_set_bit_0(long nr, unsigned long *addr)
{
  #line 122 
  ldv_set_bit(nr,addr);
  #line 123 
  return;
}

#line 126  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ice/ice.ko/concurrency safety/0/concurrency safety/weaver/ice_base.i.aux"
static void cif_clear_bit_0(long nr, unsigned long *addr)
{
  #line 129 
  ldv_clear_bit(nr,addr);
  #line 130 
  return;
}

#line 798  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ice/ice.ko/concurrency safety/0/concurrency safety/weaver/ice_base.i.aux"
static void cif_mutex_lock_qs_mutex_of_ice_qs_cfg(struct mutex *lock)
{
  #line 801 
  ldv_mutex_model_lock(lock,(char *)"qs_mutex_of_ice_qs_cfg");
  #line 802 
  return;
}

#line 805  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ice/ice.ko/concurrency safety/0/concurrency safety/weaver/ice_base.i.aux"
static unsigned long cif_bitmap_find_next_zero_area(unsigned long *map, unsigned long size, unsigned long start, unsigned int nr, unsigned long align_mask)
{
  #line 808 
  return ldv_bitmap_find_next_zero_area(map,size,start,nr,align_mask);
}

#line 812  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ice/ice.ko/concurrency safety/0/concurrency safety/weaver/ice_base.i.aux"
static void cif_mutex_unlock_qs_mutex_of_ice_qs_cfg(struct mutex *lock)
{
  #line 815 
  ldv_mutex_model_unlock(lock,(char *)"qs_mutex_of_ice_qs_cfg");
  #line 816 
  return;
}

#line 819  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ice/ice.ko/concurrency safety/0/concurrency safety/weaver/ice_base.i.aux"
static void cif_bitmap_set(unsigned long *map, unsigned int start, unsigned int nbits)
{
  #line 822 
  ldv_bitmap_set(map,start,(int)nbits);
  #line 823 
  return;
}

#line 826  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ice/ice.ko/concurrency safety/0/concurrency safety/weaver/ice_base.i.aux"
static void *cif_devm_kzalloc(struct device *dev, size_t size, gfp_t flags)
{
  #line 829 
  return ldv_devm_kzalloc(size,flags);
}

/* compiler builtin: 
   unsigned short __builtin_bswap16(unsigned short);   */
/* compiler builtin: 
   unsigned int __builtin_bswap32(unsigned int);   */
/* compiler builtin: 
   void *__builtin_memcpy(void *, void const *, unsigned long);   */
/* compiler builtin: 
   void __builtin_prefetch(void const * , ...);   */
#line 4  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ice/ice.ko/concurrency safety/0/concurrency safety/weaver/ice_txrx.i.aux"
#line 4 
void ldv_atomic_add(int i, atomic_t *v);
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/compiler.h"
__inline static void __read_once_size(void *p, void *res, int size)
{
  #line 199 
  switch (size) {
    #line 199 
    case 1: 
            #line 199 
    ;
    #line 199 
    *((__u8 *)res) = *((__u8 *)p);
    #line 199 
    break;
    #line 199 
    case 2: 
            #line 199 
    ;
    #line 199 
    *((__u16 *)res) = *((__u16 *)p);
    #line 199 
    break;
    #line 199 
    case 4: 
            #line 199 
    ;
    #line 199 
    *((__u32 *)res) = *((__u32 *)p);
    #line 199 
    break;
    #line 199 
    case 8: 
            #line 199 
    ;
    #line 199 
    *((__u64 *)res) = *((__u64 *)p);
    #line 199 
    break;
    #line 199 
    default: 
             #line 199 
    ;
    #line 200 
    ldv_inline_asm();
    #line 199 
    __builtin_memcpy(res,(void const *)p,(unsigned long)size);
    #line 200 
    ldv_inline_asm();
  }
  #line 203 
  return;
}

#line 220  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/compiler.h"
__inline static void __write_once_size(void *p, void *res, int size)
{
  #line 222 
  switch (size) {
    #line 223 
    case 1: 
            #line 223 
    ;
    #line 223 
    *((__u8 *)p) = *((__u8 *)res);
    #line 223 
    break;
    #line 224 
    case 2: 
            #line 224 
    ;
    #line 224 
    *((__u16 *)p) = *((__u16 *)res);
    #line 224 
    break;
    #line 225 
    case 4: 
            #line 225 
    ;
    #line 225 
    *((__u32 *)p) = *((__u32 *)res);
    #line 225 
    break;
    #line 226 
    case 8: 
            #line 226 
    ;
    #line 226 
    *((__u64 *)p) = *((__u64 *)res);
    #line 226 
    break;
    #line 227 
    default: 
             #line 227 
    ;
    #line 228 
    ldv_inline_asm();
    #line 229 
    __builtin_memcpy(p,(void const *)res,(unsigned long)size);
    #line 230 
    ldv_inline_asm();
  }
  #line 232 
  return;
}

#line 160  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/bitops.h"
__inline static bool arch_test_and_clear_bit(long nr, unsigned long *addr)
{
  #line 162 
  bool c;
  #line 163 
  ldv_inline_asm();
  #line 162 
  return c;
}

#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bitops/instrumented-atomic.h"
#line 119  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ice/ice.ko/concurrency safety/0/concurrency safety/weaver/ice_txrx.i.aux"
static void cif_set_bit_1(long nr, unsigned long *addr);
#line 44  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bitops/instrumented-atomic.h"
#line 126  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ice/ice.ko/concurrency safety/0/concurrency safety/weaver/ice_txrx.i.aux"
static void cif_clear_bit_1(long nr, unsigned long *addr);
#line 81  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bitops/instrumented-atomic.h"
__inline static bool test_and_clear_bit(long nr, unsigned long *addr)
{
  #line 83 
  kasan_check_read((void *)(addr + (unsigned long)(nr / 64L)),8U);
  #line 84 
  return arch_test_and_clear_bit(nr,addr);
}

#line 198  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jump_label.h"
__inline static bool static_key_false(struct static_key *key)
{
  #line 200 
  return arch_static_branch(key,(_Bool)0);
}

#line 205  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernel.h"
#line 205 
void __cant_sleep(char *, int, int);
#line 88  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/percpu.h"
#line 88 
void __bad_percpu_size(void);
#line 309  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/percpu-defs.h"
#line 309 
void __bad_size_call_parameter(void);
#line 314  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/percpu-defs.h"
__inline static void __this_cpu_preempt_check(char *op)
{
  #line 316 
  return;
}

#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/page_64.h"
#line 14 
extern unsigned long page_offset_base;
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/cmpxchg_64.h"
__inline static int arch_atomic_read(atomic_t *v)
{
  #line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/atomic.h"
  union __anonunion___u_4131 __u;
  #line 31 
  __read_once_size((void *)(& v->counter),(void *)(& __u.__c),4);
  #line 31 
  return (__u.__val);
}

#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/atomic-instrumented.h"
__inline static int atomic_read(atomic_t *v)
{
  #line 26 
  kasan_check_read((void *)v,4U);
  #line 27 
  return arch_atomic_read(v);
}

#line 60 
#line 161  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ice/ice.ko/concurrency safety/0/concurrency safety/weaver/ice_txrx.i.aux"
static void atomic_add(int i, atomic_t *v);
#line 834  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/processor.h"
__inline static void prefetchw(void *x)
{
  #line 836 
  ldv_inline_asm();
  #line 837 
  return;
}

#line 77  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/preempt.h"
__inline static void __preempt_count_add(int val)
{
  #line 79 
  int tmp;
  #line 79 
  if (0 != 0 && (val == 1 || val == -1)) 
                                         #line 79 
                                         tmp = val; else 
                                                         #line 79 
                                                         tmp = 0;
  #line 79 
  int pao_ID__ = tmp;
  #line 79 
  switch (4UL) {
    #line 79 
    case (unsigned long)1: 
                           #line 79 
    ;
    #line 79 
    if (pao_ID__ == 1) 
                       #line 81 
                       ldv_inline_asm();
    else 
      #line 79 
      if (pao_ID__ == -1) 
                          #line 81 
                          ldv_inline_asm(); else 
                                                 #line 84 
                                                 ldv_inline_asm();
    #line 79 
    break;
    #line 79 
    case (unsigned long)2: 
                           #line 79 
    ;
    #line 79 
    if (pao_ID__ == 1) 
                       #line 81 
                       ldv_inline_asm();
    else 
      #line 79 
      if (pao_ID__ == -1) 
                          #line 81 
                          ldv_inline_asm(); else 
                                                 #line 84 
                                                 ldv_inline_asm();
    #line 79 
    break;
    #line 79 
    case (unsigned long)4: 
                           #line 79 
    ;
    #line 79 
    if (pao_ID__ == 1) 
                       #line 81 
                       ldv_inline_asm();
    else 
      #line 79 
      if (pao_ID__ == -1) 
                          #line 81 
                          ldv_inline_asm(); else 
                                                 #line 84 
                                                 ldv_inline_asm();
    #line 79 
    break;
    #line 79 
    case (unsigned long)8: 
                           #line 79 
    ;
    #line 79 
    if (pao_ID__ == 1) 
                       #line 81 
                       ldv_inline_asm();
    else 
      #line 79 
      if (pao_ID__ == -1) 
                          #line 81 
                          ldv_inline_asm(); else 
                                                 #line 84 
                                                 ldv_inline_asm();
    #line 79 
    break;
    #line 79 
    default: 
             #line 79 
    ;
    #line 79 
    __bad_percpu_size();
  }
  #line 82 
  return;
}

#line 82  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/preempt.h"
__inline static void __preempt_count_sub(int val)
{
  #line 84 
  int tmp;
  #line 84 
  if (0 != 0 && (val == -1 || val == 1)) 
                                         #line 84 
                                         tmp = - val; else 
                                                           #line 84 
                                                           tmp = 0;
  #line 84 
  int pao_ID__ = tmp;
  #line 84 
  switch (4UL) {
    #line 84 
    case (unsigned long)1: 
                           #line 84 
    ;
    #line 84 
    if (pao_ID__ == 1) 
                       #line 86 
                       ldv_inline_asm();
    else 
      #line 84 
      if (pao_ID__ == -1) 
                          #line 86 
                          ldv_inline_asm(); else 
                                                 #line 89 
                                                 ldv_inline_asm();
    #line 84 
    break;
    #line 84 
    case (unsigned long)2: 
                           #line 84 
    ;
    #line 84 
    if (pao_ID__ == 1) 
                       #line 86 
                       ldv_inline_asm();
    else 
      #line 84 
      if (pao_ID__ == -1) 
                          #line 86 
                          ldv_inline_asm(); else 
                                                 #line 89 
                                                 ldv_inline_asm();
    #line 84 
    break;
    #line 84 
    case (unsigned long)4: 
                           #line 84 
    ;
    #line 84 
    if (pao_ID__ == 1) 
                       #line 86 
                       ldv_inline_asm();
    else 
      #line 84 
      if (pao_ID__ == -1) 
                          #line 86 
                          ldv_inline_asm(); else 
                                                 #line 89 
                                                 ldv_inline_asm();
    #line 84 
    break;
    #line 84 
    case (unsigned long)8: 
                           #line 84 
    ;
    #line 84 
    if (pao_ID__ == 1) 
                       #line 86 
                       ldv_inline_asm();
    else 
      #line 84 
      if (pao_ID__ == -1) 
                          #line 86 
                          ldv_inline_asm(); else 
                                                 #line 89 
                                                 ldv_inline_asm();
    #line 84 
    break;
    #line 84 
    default: 
             #line 84 
    ;
    #line 84 
    __bad_percpu_size();
  }
  #line 87 
  return;
}

#line 348  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockdep.h"
#line 348 
void lock_acquire(struct lockdep_map *, unsigned int, int, int, int, struct lockdep_map *, unsigned long);
#line 352 
#line 352 
void lock_release(struct lockdep_map *, unsigned long);
#line 658 
#line 658 
void lockdep_rcu_suspicious(char *, int, char *);
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmdebug.h"
#line 12 
void dump_page(struct page *, char *);
#line 410  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/nodemask.h"
#line 410 
extern nodemask_t node_states[5U];
#line 413  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/nodemask.h"
__inline static int node_state(int node, enum node_states state)
{
  #line 415 
  return (int)test_bit((long)node,
               (unsigned long *)(& node_states[(unsigned int)state].bits));
}

#line 57  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rcupdate.h"
__inline static void __rcu_read_lock(void)
{
  #line 59 
  __preempt_count_add(1);
  #line 60 
  ldv_inline_asm();
  #line 62 
  return;
}

#line 62  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rcupdate.h"
__inline static void __rcu_read_unlock(void)
{
  #line 66 
  ldv_inline_asm();
  #line 64 
  __preempt_count_sub(1);
  #line 66 
  return;
}

#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rcutree.h"
#line 56 
bool rcu_is_watching(void);
#line 206  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rcupdate.h"
__inline static void rcu_lock_acquire(struct lockdep_map *map)
{
  #line 208 
  __here_0: 
            #line 208 
  ;
  #line 208 
  ;
  #line 208 
  lock_acquire(map,0U,0,2,0,(struct lockdep_map *)0,(unsigned long)((void *)0));
  #line 210 
  return;
}

#line 211  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rcupdate.h"
__inline static void rcu_lock_release(struct lockdep_map *map)
{
  #line 213 
  __here_0: 
            #line 213 
  ;
  #line 213 
  ;
  #line 213 
  lock_release(map,(unsigned long)((void *)0));
  #line 215 
  return;
}

#line 216 
#line 216 
extern struct lockdep_map rcu_lock_map;
#line 220 
#line 220 
int debug_lockdep_rcu_enabled(void);
#line 223 
#line 223 
int rcu_read_lock_sched_held(void);
#line 613  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rcupdate.h"
__inline static void rcu_read_lock(void)
{
  #line 615 
  __rcu_read_lock();
  #line 617 
  rcu_lock_acquire(& rcu_lock_map);
  {
    #line 618 
    bool __warned;
    #line 618 
    if (debug_lockdep_rcu_enabled() != 0) 
      #line 618 
      if (! __warned) {
        #line 618 
        if (! rcu_is_watching()) {
          #line 618 
          __warned = (_Bool)1;
          #line 618 
          lockdep_rcu_suspicious((char *)"./include/linux/rcupdate.h",618,(char *)"rcu_read_lock() used illegally while idle");
        }
      }
  }
  #line 621 
  return;
}

#line 665  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rcupdate.h"
__inline static void rcu_read_unlock(void)
{
  {
    #line 667 
    bool __warned;
    #line 667 
    if (debug_lockdep_rcu_enabled() != 0) 
      #line 667 
      if (! __warned) {
        #line 667 
        if (! rcu_is_watching()) {
          #line 667 
          __warned = (_Bool)1;
          #line 667 
          lockdep_rcu_suspicious((char *)"./include/linux/rcupdate.h",667,(char *)"rcu_read_unlock() used illegally while idle");
        }
      }
  }
  #line 670 
  __rcu_read_unlock();
  #line 671 
  rcu_lock_release(& rcu_lock_map);
  #line 672 
  return;
}

#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/page-flags.h"
__inline static struct page *compound_head(struct page *page)
{
  #line 175 
  union __anonunion___u_4211 __u;
  #line 174 
  __read_once_size((void *)(& page->__anonCompField_page_43.__anonCompField___anonunion_131_38.compound_head),(void *)(& __u.__c),8);
  #line 174 
  unsigned long head = (__u.__val);
  #line 176 
  if ((long)((head & 1UL) != 0UL) != 0L) 
                                         #line 177 
                                         return (struct page *)(head + 18446744073709551615UL);
  #line 178 
  return page;
}

#line 192  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/page-flags.h"
__inline static int PagePoisoned(struct page *page)
{
  #line 194 
  return page->flags == 18446744073709551615UL;
}

#line 86  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/topology.h"
__inline static int numa_node_id(void)
{
  #line 88 
  int pscr_ret__;
  {
    #line 88 
    void *__vpp_verify = (void *)0;
    #line 88 
    void *tmp = __vpp_verify;
  }
  #line 88 
  switch (4UL) {
    #line 88 
    int pfo_ret___0;
    #line 88 
    int pfo_ret___1;
    #line 88 
    int pfo_ret___2;
    #line 88 
    int pfo_ret__;
    #line 88 
    case (unsigned long)1: 
                           #line 88 
    ;
    #line 88 
    switch (4UL) {
      #line 88 
      case (unsigned long)1: 
                             #line 88 
      ;
      #line 89 
      ldv_inline_asm();
      #line 88 
      break;
      #line 88 
      case (unsigned long)2: 
                             #line 88 
      ;
      #line 89 
      ldv_inline_asm();
      #line 88 
      break;
      #line 88 
      case (unsigned long)4: 
                             #line 88 
      ;
      #line 89 
      ldv_inline_asm();
      #line 88 
      break;
      #line 88 
      case (unsigned long)8: 
                             #line 88 
      ;
      #line 89 
      ldv_inline_asm();
      #line 88 
      break;
      #line 88 
      default: 
               #line 88 
      ;
      #line 88 
      __bad_percpu_size();
    }
    #line 88 
    pscr_ret__ = pfo_ret__;
    #line 88 
    break;
    #line 88 
    case (unsigned long)2: 
                           #line 88 
    ;
    #line 88 
    switch (4UL) {
      #line 88 
      case (unsigned long)1: 
                             #line 88 
      ;
      #line 89 
      ldv_inline_asm();
      #line 88 
      break;
      #line 88 
      case (unsigned long)2: 
                             #line 88 
      ;
      #line 89 
      ldv_inline_asm();
      #line 88 
      break;
      #line 88 
      case (unsigned long)4: 
                             #line 88 
      ;
      #line 89 
      ldv_inline_asm();
      #line 88 
      break;
      #line 88 
      case (unsigned long)8: 
                             #line 88 
      ;
      #line 89 
      ldv_inline_asm();
      #line 88 
      break;
      #line 88 
      default: 
               #line 88 
      ;
      #line 88 
      __bad_percpu_size();
    }
    #line 88 
    pscr_ret__ = pfo_ret___0;
    #line 88 
    break;
    #line 88 
    case (unsigned long)4: 
                           #line 88 
    ;
    #line 88 
    switch (4UL) {
      #line 88 
      case (unsigned long)1: 
                             #line 88 
      ;
      #line 89 
      ldv_inline_asm();
      #line 88 
      break;
      #line 88 
      case (unsigned long)2: 
                             #line 88 
      ;
      #line 89 
      ldv_inline_asm();
      #line 88 
      break;
      #line 88 
      case (unsigned long)4: 
                             #line 88 
      ;
      #line 89 
      ldv_inline_asm();
      #line 88 
      break;
      #line 88 
      case (unsigned long)8: 
                             #line 88 
      ;
      #line 89 
      ldv_inline_asm();
      #line 88 
      break;
      #line 88 
      default: 
               #line 88 
      ;
      #line 88 
      __bad_percpu_size();
    }
    #line 88 
    pscr_ret__ = pfo_ret___1;
    #line 88 
    break;
    #line 88 
    case (unsigned long)8: 
                           #line 88 
    ;
    #line 88 
    switch (4UL) {
      #line 88 
      case (unsigned long)1: 
                             #line 88 
      ;
      #line 89 
      ldv_inline_asm();
      #line 88 
      break;
      #line 88 
      case (unsigned long)2: 
                             #line 88 
      ;
      #line 89 
      ldv_inline_asm();
      #line 88 
      break;
      #line 88 
      case (unsigned long)4: 
                             #line 88 
      ;
      #line 89 
      ldv_inline_asm();
      #line 88 
      break;
      #line 88 
      case (unsigned long)8: 
                             #line 88 
      ;
      #line 89 
      ldv_inline_asm();
      #line 88 
      break;
      #line 88 
      default: 
               #line 88 
      ;
      #line 88 
      __bad_percpu_size();
    }
    #line 88 
    pscr_ret__ = pfo_ret___2;
    #line 88 
    break;
    #line 88 
    default: 
             #line 88 
    ;
    #line 88 
    __bad_size_call_parameter();
    #line 88 
    break;
  }
  #line 88 
  return pscr_ret__;
}

#line 177  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/topology.h"
__inline static int numa_mem_id(void)
{
  #line 179 
  return numa_node_id();
}

#line 490  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/gfp.h"
#line 490 
struct page *__alloc_pages_nodemask(gfp_t, unsigned int, int, nodemask_t *);
#line 494  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/gfp.h"
__inline static struct page *__alloc_pages(gfp_t gfp_mask, unsigned int order, int preferred_nid)
{
  #line 496 
  return __alloc_pages_nodemask(gfp_mask,order,preferred_nid,(nodemask_t *)0);
}

#line 504  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/gfp.h"
__inline static struct page *__alloc_pages_node(int nid, gfp_t gfp_mask, unsigned int order)
{
  #line 506 
  if ((long)((unsigned int)nid > 1023U) != 0L) {
    #line 507 
    ldv_inline_asm();
    #line 508 
    ldv_inline_asm();
    #line 509 
    ldv_inline_asm();
    #line 506 
    ;
  }
  {
    #line 507 
    int tmp_0;
    #line 507 
    if ((gfp_mask & 2097152U) != 0U) {
      #line 507 
      if (node_state(nid,(enum node_states)N_ONLINE) == 0) 
                                                           #line 507 
                                                           tmp_0 = 1; else 
                                                                    #line 507 
                                                                    tmp_0 = 0;
    }
    else 
         #line 507 
         tmp_0 = 0;
    #line 507 
    int __ret_warn_on = tmp_0;
    #line 507 
    if ((long)(__ret_warn_on != 0) != 0L) {
      #line 508 
      ldv_inline_asm();
      #line 509 
      ldv_inline_asm();
    }
    #line 507 
    long tmp_2 = (long)(__ret_warn_on != 0);
  }
  #line 509 
  return __alloc_pages(gfp_mask,order,nid);
}

#line 517  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/gfp.h"
__inline static struct page *alloc_pages_node(int nid, gfp_t gfp_mask, unsigned int order)
{
  #line 520 
  if (nid == -1) 
                 #line 521 
                 nid = numa_mem_id();
  #line 523 
  return __alloc_pages_node(nid,gfp_mask,order);
}

#line 566 
#line 566 
void __free_pages(struct page *, unsigned int);
#line 572 
#line 572 
void __page_frag_cache_drain(struct page *, unsigned int);
#line 575 
#line 575 
void page_frag_free(void *);
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/page_ref.h"
#line 11 
extern struct tracepoint __tracepoint_page_ref_mod;
#line 30 
#line 30 
void __page_ref_mod(struct page *, int);
#line 70  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/page_ref.h"
__inline static int page_count(struct page *page)
{
  #line 72 
  return atomic_read(& compound_head(page)->_refcount);
}

#line 91  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/page_ref.h"
__inline static void page_ref_add(struct page *page, int nr)
{
  #line 93 
  atomic_add(nr,& page->_refcount);
  #line 94 
  if ((int)static_key_false(& __tracepoint_page_ref_mod.key) != 0) 
                                                                   #line 95 
                                                                   __page_ref_mod(page,nr);
  #line 96 
  return;
}

#line 1083  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm.h"
__inline static int page_to_nid(struct page *page)
{
  #line 1085 
  struct page *p = page;
  {
    #line 1087 
    if ((long)(PagePoisoned(p) != 0) != 0L) {
      #line 1087 
      dump_page(p,(char *)"VM_BUG_ON_PAGE(");
      #line 1088 
      ldv_inline_asm();
      #line 1089 
      ldv_inline_asm();
      #line 1090 
      ldv_inline_asm();
      #line 1087 
      ;
    }
  }
  #line 1087 
  ;
  #line 1087 
  return (int)(p->flags >> 54UL) & 1023;
}

#line 1299  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm.h"
__inline static void *lowmem_page_address(struct page *page)
{
  #line 1301 
  return (void *)((unsigned long)((unsigned long long)((page - (struct page *)vmemmap_base) / 64L) << 12) + page_offset_base);
}

#line 1369  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm.h"
__inline static bool page_is_pfmemalloc(struct page *page)
{
  #line 1375 
  return (_Bool)(page->__anonCompField_page_43.__anonCompField___anonunion_131_31.index == 18446744073709551615UL);
}

#line 73  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dynamic_queue_limits.h"
__inline static void dql_queued(struct dql *dql, unsigned int count)
{
  #line 75 
  if ((long)(count > 268435455U) != 0L) {
    #line 76 
    ldv_inline_asm();
    #line 77 
    ldv_inline_asm();
    #line 78 
    ldv_inline_asm();
    #line 75 
    ;
  }
  #line 77 
  dql->last_obj_cnt = count;
  #line 78 
  ldv_inline_asm();
  #line 86 
  dql->num_queued += count;
  #line 87 
  return;
}

#line 90  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dynamic_queue_limits.h"
__inline static int dql_avail(struct dql *dql)
{
  #line 93 
  union __anonunion___u_4500 __u;
  #line 93 
  union __anonunion___u_4502 __u_0;
  #line 92 
  unsigned int tmp;
  #line 92 
  __read_once_size((void *)(& dql->adj_limit),(void *)(& __u.__c),4);
  #line 92 
  tmp = __u.__val;
  #line 92 
  __read_once_size((void *)(& dql->num_queued),(void *)(& __u_0.__c),4);
  #line 92 
  return (int)(tmp - (__u_0.__val));
}

#line 96 
#line 96 
void dql_completed(struct dql *, unsigned int);
#line 99 
#line 99 
void dql_reset(struct dql *);
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/checksum_64.h"
__inline static __sum16 csum_fold(__wsum sum)
{
  #line 25 
  ldv_inline_asm();
  #line 30 
  return (unsigned short)(~ sum >> 16);
}

#line 183  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/checksum_64.h"
__inline static unsigned int add32_with_carry(unsigned int a, unsigned int b)
{
  #line 185 
  ldv_inline_asm();
  #line 189 
  return a;
}

#line 193  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/checksum_64.h"
__inline static __wsum csum_add(__wsum csum, __wsum addend)
{
  #line 195 
  return add32_with_carry(csum,addend);
}

#line 107  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/checksum.h"
__inline static __wsum csum_unfold(__sum16 n)
{
  #line 109 
  return (unsigned int)n;
}

#line 119  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/checksum.h"
__inline static void csum_replace_by_diff(__sum16 *sum, __wsum diff)
{
  #line 121 
  ;
  #line 121 
  *sum = csum_fold(csum_add(diff,~ csum_unfold((unsigned short)((int)*sum))));
  #line 122 
  return;
}

#line 937  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
#line 798  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ice/ice.ko/concurrency safety/0/concurrency safety/weaver/ice_txrx.i.aux"
static void *cif_devm_kzalloc_0(struct device *dev, size_t size, gfp_t flags);
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-debug.h"
#line 30 
void debug_dma_unmap_page(struct device *, dma_addr_t, size_t, int);
#line 52 
#line 52 
void debug_dma_sync_single_for_cpu(struct device *, dma_addr_t, size_t, int);
#line 56 
#line 56 
void debug_dma_sync_single_for_device(struct device *, dma_addr_t, size_t, int);
#line 210  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
#line 210 
void dma_direct_sync_single_for_device(struct device *, dma_addr_t, size_t, enum dma_data_direction);
#line 228 
#line 228 
void dma_direct_unmap_page(struct device *, dma_addr_t, size_t, enum dma_data_direction, unsigned long);
#line 232 
#line 232 
void dma_direct_sync_single_for_cpu(struct device *, dma_addr_t, size_t, enum dma_data_direction);
#line 291  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static void dma_unmap_page_attrs(struct device *dev, dma_addr_t addr, size_t size, enum dma_data_direction dir, unsigned long attrs)
{
  #line 294 
  struct dma_map_ops *ops = get_dma_ops(dev);
  #line 296 
  if ((long)(valid_dma_direction((int)dir) == 0) != 0L) {
    #line 297 
    ldv_inline_asm();
    #line 298 
    ldv_inline_asm();
    #line 299 
    ldv_inline_asm();
    #line 296 
    ;
  }
  #line 297 
  if ((int)dma_is_direct(ops) != 0) 
                                    #line 298 
                                    dma_direct_unmap_page(dev,addr,size,dir,attrs);
  else 
    #line 299 
    if (ops->unmap_page != (void (*)(struct device *, dma_addr_t , size_t , enum dma_data_direction , unsigned long ))0) 
      #line 300 
      (*(ops->unmap_page))(dev,addr,size,dir,attrs);
  #line 301 
  debug_dma_unmap_page(dev,addr,size,(int)dir);
  #line 302 
  return;
}

#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static void dma_sync_single_for_cpu(struct device *dev, dma_addr_t addr, size_t size, enum dma_data_direction dir)
{
  #line 380 
  struct dma_map_ops *ops = get_dma_ops(dev);
  #line 382 
  if ((long)(valid_dma_direction((int)dir) == 0) != 0L) {
    #line 383 
    ldv_inline_asm();
    #line 384 
    ldv_inline_asm();
    #line 385 
    ldv_inline_asm();
    #line 382 
    ;
  }
  #line 383 
  if ((int)dma_is_direct(ops) != 0) 
                                    #line 384 
                                    dma_direct_sync_single_for_cpu(dev,addr,size,dir);
  else 
    #line 385 
    if (ops->sync_single_for_cpu != (void (*)(struct device *, dma_addr_t , size_t , enum dma_data_direction ))0) 
      #line 386 
      (*(ops->sync_single_for_cpu))(dev,addr,size,dir);
  #line 387 
  debug_dma_sync_single_for_cpu(dev,addr,size,(int)dir);
  #line 388 
  return;
}

#line 390  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static void dma_sync_single_for_device(struct device *dev, dma_addr_t addr, size_t size, enum dma_data_direction dir)
{
  #line 394 
  struct dma_map_ops *ops = get_dma_ops(dev);
  #line 396 
  if ((long)(valid_dma_direction((int)dir) == 0) != 0L) {
    #line 397 
    ldv_inline_asm();
    #line 398 
    ldv_inline_asm();
    #line 399 
    ldv_inline_asm();
    #line 396 
    ;
  }
  #line 397 
  if ((int)dma_is_direct(ops) != 0) 
                                    #line 398 
                                    dma_direct_sync_single_for_device(dev,addr,size,dir);
  else 
    #line 399 
    if (ops->sync_single_for_device != (void (*)(struct device *, dma_addr_t , size_t , enum dma_data_direction ))0) 
      #line 400 
      (*(ops->sync_single_for_device))(dev,addr,size,dir);
  #line 401 
  debug_dma_sync_single_for_device(dev,addr,size,(int)dir);
  #line 402 
  return;
}

#line 592  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static void dma_unmap_single_attrs(struct device *dev, dma_addr_t addr, size_t size, enum dma_data_direction dir, unsigned long attrs)
{
  #line 595 
  dma_unmap_page_attrs(dev,addr,size,dir,attrs);
  #line 596 
  return;
}

#line 598  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static void dma_sync_single_range_for_cpu(struct device *dev, dma_addr_t addr, unsigned long offset, size_t size, enum dma_data_direction dir)
{
  #line 602 
  dma_sync_single_for_cpu(dev,addr + (unsigned long long)offset,size,dir);
  #line 603 
  return;
}

#line 605  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static void dma_sync_single_range_for_device(struct device *dev, dma_addr_t addr, unsigned long offset, size_t size, enum dma_data_direction dir)
{
  #line 609 
  dma_sync_single_for_device(dev,addr + (unsigned long long)offset,size,dir);
  #line 610 
  return;
}

#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/clock.h"
#line 15 
unsigned long long sched_clock(void);
#line 325  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static unsigned int skb_frag_size(skb_frag_t *frag)
{
  #line 327 
  return frag->bv_len;
}

#line 1023 
#line 1023 
void consume_skb(struct sk_buff *);
#line 1035 
#line 1035 
struct sk_buff *build_skb(void *, unsigned int);
#line 1116 
#line 1116 
int pskb_expand_head(struct sk_buff *, int, int, gfp_t);
#line 1126 
#line 1126 
int __skb_pad(struct sk_buff *, int, bool);
#line 1381  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static unsigned char *skb_end_pointer(struct sk_buff *skb)
{
  #line 1383 
  return skb->head + (unsigned long)skb->end;
}

#line 1621  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static int skb_header_cloned(struct sk_buff *skb)
{
  #line 1623 
  int dataref;
  #line 1625 
  if ((unsigned int)skb->cloned == 0U) 
                                       #line 1626 
                                       return 0;
  #line 1628 
  dataref = atomic_read(& ((struct skb_shared_info *)skb_end_pointer(skb))->dataref);
  #line 1629 
  dataref = (dataref & 65535) - (dataref >> 16);
  #line 1630 
  return dataref != 1;
}

#line 2065  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static bool skb_is_nonlinear(struct sk_buff *skb)
{
  #line 2067 
  return (_Bool)(skb->data_len != 0U);
}

#line 2070  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static unsigned int skb_headlen(struct sk_buff *skb)
{
  #line 2072 
  return skb->len - skb->data_len;
}

#line 2142 
#line 2142 
void skb_add_rx_frag(struct sk_buff *, int, struct page *, int, int, unsigned int);
#line 2151  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static unsigned char *skb_tail_pointer(struct sk_buff *skb)
{
  #line 2153 
  return skb->head + (unsigned long)skb->tail;
}

#line 2190  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static void *__skb_put(struct sk_buff *skb, unsigned int len)
{
  #line 2192 
  void *tmp = skb_tail_pointer(skb);
  #line 2193 
  if ((long)((int)skb_is_nonlinear(skb) != 0) != 0L) {
    #line 2194 
    ldv_inline_asm();
    #line 2195 
    ldv_inline_asm();
    #line 2196 
    ldv_inline_asm();
    #line 2193 
    ;
  }
  #line 2194 
  skb->tail += len;
  #line 2195 
  skb->len += len;
  #line 2196 
  return tmp;
}

#line 2266 
#line 2266 
void *__pskb_pull_tail(struct sk_buff *, int);
#line 2282  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static bool pskb_may_pull(struct sk_buff *skb, unsigned int len)
{
  #line 2284 
  ;
  #line 2284 
  if ((long)(skb_headlen(skb) >= len) != 0L) 
                                             #line 2285 
                                             return (_Bool)1;
  #line 2286 
  if ((long)(skb->len < len) != 0L) 
                                    #line 2287 
                                    return (_Bool)0;
  #line 2288 
  ;
  #line 2288 
  ;
  #line 2288 
  return (_Bool)(__pskb_pull_tail(skb,(int)(len - skb_headlen(skb))) != (void *)0);
}

#line 2299  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static unsigned int skb_headroom(struct sk_buff *skb)
{
  #line 2301 
  return (unsigned int)(skb->data - skb->head);
}

#line 2338  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static void skb_reserve(struct sk_buff *skb, int len)
{
  #line 2340 
  skb->data += (unsigned long)len;
  #line 2341 
  skb->tail += (unsigned int)len;
  #line 2342 
  return;
}

#line 2458  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static unsigned char *skb_transport_header(struct sk_buff *skb)
{
  #line 2460 
  return skb->head + (unsigned long)skb->transport_header;
}

#line 2475  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static unsigned char *skb_network_header(struct sk_buff *skb)
{
  #line 2477 
  return skb->head + (unsigned long)skb->network_header;
}

#line 2820 
#line 2820 
struct sk_buff *__napi_alloc_skb(struct napi_struct *, unsigned int, gfp_t);
#line 2827 
#line 2827 
void napi_consume_skb(struct sk_buff *, int);
#line 2841  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static struct page *__dev_alloc_pages(gfp_t gfp_mask, unsigned int order)
{
  #line 2852 
  gfp_mask |= 393216U;
  #line 2854 
  return alloc_pages_node(-1,gfp_mask,order);
}

#line 2857  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static struct page *dev_alloc_pages(unsigned int order)
{
  #line 2859 
  return __dev_alloc_pages(10784U,order);
}

#line 2896  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static unsigned int skb_frag_off(skb_frag_t *frag)
{
  #line 2898 
  return frag->bv_offset;
}

#line 2938  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static struct page *skb_frag_page(skb_frag_t *frag)
{
  #line 2940 
  return frag->bv_page;
}

#line 3067  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static dma_addr_t skb_frag_dma_map(struct device *dev, skb_frag_t *frag, size_t offset, size_t size, enum dma_data_direction dir)
{
  #line 3072 
  ;
  #line 3072 
  ;
  #line 3072 
  ;
  #line 3072 
  ;
  #line 3072 
  return dma_map_page_attrs(dev,skb_frag_page(frag),
                           (unsigned long)skb_frag_off(frag) + offset,size,
                           dir,0UL);
}

#line 3111  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static int __skb_cow(struct sk_buff *skb, unsigned int headroom, int cloned)
{
  #line 3114 
  int delta = 0;
  #line 3116 
  ;
  #line 3116 
  if (skb_headroom(skb) < headroom) {
    #line 3117 
    delta = (int)(headroom - skb_headroom(skb));
  }
  #line 3119 
  if (delta != 0 || cloned != 0) {
    #line 3120 
    return pskb_expand_head(skb,(delta + 63) & -64,0,2592U);
  }
  #line 3122 
  return 0;
}

#line 3152  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static int skb_cow_head(struct sk_buff *skb, unsigned int headroom)
{
  #line 3154 
  ;
  #line 3154 
  ;
  #line 3154 
  return __skb_cow(skb,headroom,skb_header_cloned(skb));
}

#line 3186  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static int __skb_put_padto(struct sk_buff *skb, unsigned int len, bool free_on_error)
{
  #line 3189 
  unsigned int size = skb->len;
  #line 3191 
  if ((long)(size < len) != 0L) {
    #line 3192 
    len -= size;
    #line 3193 
    if (__skb_pad(skb,(int)len,(_Bool)((bool)((int)free_on_error) != 0)) != 0) 
      #line 3194 
      return -12;
    #line 3195 
    __skb_put(skb,len);
  }
  #line 3197 
  return 0;
}

#line 3210  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static int skb_put_padto(struct sk_buff *skb, unsigned int len)
{
  #line 3212 
  return __skb_put_padto(skb,len,(_Bool)1);
}

#line 3248  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static int __skb_linearize(struct sk_buff *skb)
{
  #line 3250 
  int tmp_0;
  #line 3250 
  if (__pskb_pull_tail(skb,(int)skb->data_len) != (void *)0) 
                                                             #line 3250 
                                                             tmp_0 = 0; else 
                                                                    #line 3250 
                                                                    tmp_0 = -12;
  #line 3250 
  return tmp_0;
}

#line 3507 
#line 3507 
int skb_copy_bits(struct sk_buff *, int, void *, int);
#line 3563  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static void *__skb_header_pointer(struct sk_buff *skb, int offset, int len, void *data, int hlen, void *buffer)
{
  #line 3566 
  if (hlen - offset >= len) 
                            #line 3567 
                            return data + (unsigned long)offset;
  #line 3569 
  if (skb == (struct sk_buff *)0) 
                                  #line 3571 
                                  return (void *)0;
  else {
    #line 3569 
    if (skb_copy_bits(skb,offset,buffer,len) < 0) 
                                                  #line 3571 
                                                  return (void *)0;
  }
  #line 3573 
  return buffer;
}

#line 3577  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static void *skb_header_pointer(struct sk_buff *skb, int offset, int len, void *buffer)
{
  #line 3579 
  ;
  #line 3579 
  ;
  #line 3579 
  ;
  #line 3579 
  ;
  #line 3579 
  ;
  #line 3579 
  return __skb_header_pointer(skb,offset,len,(void *)skb->data,
                             (int)skb_headlen(skb),buffer);
}

#line 3753  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static void skb_metadata_set(struct sk_buff *skb, u8 meta_len)
{
  #line 3755 
  ((struct skb_shared_info *)skb_end_pointer(skb))->meta_len = meta_len;
  #line 3756 
  return;
}

#line 3767 
#line 3767 
void skb_clone_tx_timestamp(struct sk_buff *);
#line 3813 
#line 3813 
void skb_tstamp_tx(struct sk_buff *, struct skb_shared_hwtstamps *);
#line 3828  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static void skb_tx_timestamp(struct sk_buff *skb)
{
  #line 3830 
  skb_clone_tx_timestamp(skb);
  #line 3831 
  ;
  #line 3831 
  if (((int)((struct skb_shared_info *)skb_end_pointer(skb))->tx_flags & 2) != 0) 
    #line 3832 
    skb_tstamp_tx(skb,(struct skb_shared_hwtstamps *)0);
  #line 3833 
  return;
}

#line 4287  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static void skb_record_rx_queue(struct sk_buff *skb, u16 rx_queue)
{
  #line 4289 
  skb->queue_mapping = (unsigned short)((unsigned int)rx_queue + 1U);
  #line 4290 
  return;
}

#line 4390  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static bool skb_is_gso(struct sk_buff *skb)
{
  #line 4392 
  ;
  #line 4392 
  return (_Bool)((unsigned int)((struct skb_shared_info *)skb_end_pointer(skb))->gso_size != 0U);
}

#line 122  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/u64_stats_sync.h"
__inline static void u64_stats_update_begin(struct u64_stats_sync *syncp)
{
  #line 124 
  return;
}

#line 129  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/xdp.h"
#line 129 
void xdp_return_frame_rx_napi(struct xdp_frame *);
#line 149 
#line 149 
void xdp_rxq_info_unreg(struct xdp_rxq_info *);
#line 468  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
#line 468 
bool napi_complete_done(struct napi_struct *, int);
#line 2132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static struct netdev_queue *netdev_get_tx_queue(struct net_device *dev, unsigned int index)
{
  #line 2135 
  return dev->_tx + (unsigned long)index;
}

#line 3094 
#line 3094 
void netif_schedule_queue(struct netdev_queue *);
#line 3104  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void netif_tx_start_queue(struct netdev_queue *dev_queue)
{
  #line 3106 
  cif_clear_bit_1(0L,& dev_queue->state);
  #line 3107 
  return;
}

#line 3130 
#line 3130 
void netif_tx_wake_queue(struct netdev_queue *);
#line 3154  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void netif_tx_stop_queue(struct netdev_queue *dev_queue)
{
  #line 3156 
  cif_set_bit_1(0L,& dev_queue->state);
  #line 3157 
  return;
}

#line 3174  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static bool netif_tx_queue_stopped(struct netdev_queue *dev_queue)
{
  #line 3176 
  return test_bit(0L,& dev_queue->state);
}

#line 3190  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static bool netif_xmit_stopped(struct netdev_queue *dev_queue)
{
  #line 3192 
  return (_Bool)((dev_queue->state & 3UL) != 0UL);
}

#line 3235  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void netdev_tx_sent_queue(struct netdev_queue *dev_queue, unsigned int bytes)
{
  #line 3239 
  dql_queued(& dev_queue->dql,bytes);
  #line 3241 
  if ((long)(dql_avail(& dev_queue->dql) >= 0) != 0L) 
                                                      #line 3242 
                                                      return;
  #line 3244 
  cif_set_bit_1(1L,& dev_queue->state);
  #line 3245 
  ldv_inline_asm();
  #line 3254 
  if ((long)(dql_avail(& dev_queue->dql) >= 0) != 0L) 
                                                      #line 3255 
                                                      cif_clear_bit_1(1L,& dev_queue->state);
  #line 3256 
  return;
}

#line 3301  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void netdev_tx_completed_queue(struct netdev_queue *dev_queue, unsigned int pkts, unsigned int bytes)
{
  #line 3305 
  if ((long)(bytes == 0U) != 0L) 
                                 #line 3306 
                                 return;
  #line 3308 
  dql_completed(& dev_queue->dql,bytes);
  #line 3309 
  ldv_inline_asm();
  #line 3317 
  if ((long)(dql_avail(& dev_queue->dql) < 0) != 0L) 
                                                     #line 3318 
                                                     return;
  #line 3320 
  if ((int)test_and_clear_bit(1L,& dev_queue->state) != 0) 
                                                           #line 3321 
                                                           netif_schedule_queue(dev_queue);
  #line 3322 
  return;
}

#line 3341  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void netdev_tx_reset_queue(struct netdev_queue *q)
{
  #line 3344 
  cif_clear_bit_1(1L,& q->state);
  #line 3345 
  dql_reset(& q->dql);
  #line 3346 
  return;
}

#line 3406  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void netif_start_subqueue(struct net_device *dev, u16 queue_index)
{
  #line 3408 
  struct netdev_queue *txq = netdev_get_tx_queue(dev,(unsigned int)queue_index);
  #line 3410 
  netif_tx_start_queue(txq);
  #line 3411 
  return;
}

#line 3420  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void netif_stop_subqueue(struct net_device *dev, u16 queue_index)
{
  #line 3422 
  struct netdev_queue *txq = netdev_get_tx_queue(dev,(unsigned int)queue_index);
  #line 3423 
  netif_tx_stop_queue(txq);
  #line 3424 
  return;
}

#line 3433  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static bool __netif_subqueue_stopped(struct net_device *dev, u16 queue_index)
{
  #line 3436 
  struct netdev_queue *txq = netdev_get_tx_queue(dev,(unsigned int)queue_index);
  #line 3438 
  return netif_tx_queue_stopped(txq);
}

#line 3454  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void netif_wake_subqueue(struct net_device *dev, u16 queue_index)
{
  #line 3456 
  struct netdev_queue *txq = netdev_get_tx_queue(dev,(unsigned int)queue_index);
  #line 3458 
  netif_tx_wake_queue(txq);
  #line 3459 
  return;
}

#line 3617 
#line 3617 
void __dev_kfree_skb_any(struct sk_buff *, enum skb_free_reason);
#line 3648  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void dev_kfree_skb_any(struct sk_buff *skb)
{
  #line 3650 
  __dev_kfree_skb_any(skb,(enum skb_free_reason)SKB_REASON_DROPPED);
  #line 3651 
  return;
}

#line 3803  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static bool netif_carrier_ok(struct net_device *dev)
{
  #line 3805 
  int tmp_0;
  #line 3805 
  if ((int)test_bit(2L,& dev->state) != 0) 
                                           #line 3805 
                                           tmp_0 = 0; else 
                                                           #line 3805 
                                                           tmp_0 = 1;
  #line 3805 
  return (_Bool)(tmp_0 != 0);
}

#line 4373 
#line 4373 
int skb_checksum_help(struct sk_buff *);
#line 4452  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static bool netdev_xmit_more(void)
{
  #line 4454 
  u8 pscr_ret__;
  #line 4454 
  __this_cpu_preempt_check((char *)"read");
  {
    #line 4454 
    void *__vpp_verify = (void *)0;
    #line 4454 
    void *tmp = __vpp_verify;
  }
  #line 4454 
  switch (1UL) {
    #line 4454 
    u8 pfo_ret__;
    #line 4454 
    u8 pfo_ret___0;
    #line 4454 
    u8 pfo_ret___1;
    #line 4454 
    u8 pfo_ret___2;
    #line 4454 
    case (unsigned long)1: 
                           #line 4454 
    ;
    #line 4454 
    switch (1UL) {
      #line 4454 
      case (unsigned long)1: 
                             #line 4454 
      ;
      #line 4455 
      ldv_inline_asm();
      #line 4454 
      break;
      #line 4454 
      case (unsigned long)2: 
                             #line 4454 
      ;
      #line 4455 
      ldv_inline_asm();
      #line 4454 
      break;
      #line 4454 
      case (unsigned long)4: 
                             #line 4454 
      ;
      #line 4455 
      ldv_inline_asm();
      #line 4454 
      break;
      #line 4454 
      case (unsigned long)8: 
                             #line 4454 
      ;
      #line 4455 
      ldv_inline_asm();
      #line 4454 
      break;
      #line 4454 
      default: 
               #line 4454 
      ;
      #line 4454 
      __bad_percpu_size();
    }
    #line 4454 
    pscr_ret__ = pfo_ret__;
    #line 4454 
    break;
    #line 4454 
    case (unsigned long)2: 
                           #line 4454 
    ;
    #line 4454 
    switch (1UL) {
      #line 4454 
      case (unsigned long)1: 
                             #line 4454 
      ;
      #line 4455 
      ldv_inline_asm();
      #line 4454 
      break;
      #line 4454 
      case (unsigned long)2: 
                             #line 4454 
      ;
      #line 4455 
      ldv_inline_asm();
      #line 4454 
      break;
      #line 4454 
      case (unsigned long)4: 
                             #line 4454 
      ;
      #line 4455 
      ldv_inline_asm();
      #line 4454 
      break;
      #line 4454 
      case (unsigned long)8: 
                             #line 4454 
      ;
      #line 4455 
      ldv_inline_asm();
      #line 4454 
      break;
      #line 4454 
      default: 
               #line 4454 
      ;
      #line 4454 
      __bad_percpu_size();
    }
    #line 4454 
    pscr_ret__ = pfo_ret___0;
    #line 4454 
    break;
    #line 4454 
    case (unsigned long)4: 
                           #line 4454 
    ;
    #line 4454 
    switch (1UL) {
      #line 4454 
      case (unsigned long)1: 
                             #line 4454 
      ;
      #line 4455 
      ldv_inline_asm();
      #line 4454 
      break;
      #line 4454 
      case (unsigned long)2: 
                             #line 4454 
      ;
      #line 4455 
      ldv_inline_asm();
      #line 4454 
      break;
      #line 4454 
      case (unsigned long)4: 
                             #line 4454 
      ;
      #line 4455 
      ldv_inline_asm();
      #line 4454 
      break;
      #line 4454 
      case (unsigned long)8: 
                             #line 4454 
      ;
      #line 4455 
      ldv_inline_asm();
      #line 4454 
      break;
      #line 4454 
      default: 
               #line 4454 
      ;
      #line 4454 
      __bad_percpu_size();
    }
    #line 4454 
    pscr_ret__ = pfo_ret___1;
    #line 4454 
    break;
    #line 4454 
    case (unsigned long)8: 
                           #line 4454 
    ;
    #line 4454 
    switch (1UL) {
      #line 4454 
      case (unsigned long)1: 
                             #line 4454 
      ;
      #line 4455 
      ldv_inline_asm();
      #line 4454 
      break;
      #line 4454 
      case (unsigned long)2: 
                             #line 4454 
      ;
      #line 4455 
      ldv_inline_asm();
      #line 4454 
      break;
      #line 4454 
      case (unsigned long)4: 
                             #line 4454 
      ;
      #line 4455 
      ldv_inline_asm();
      #line 4454 
      break;
      #line 4454 
      case (unsigned long)8: 
                             #line 4454 
      ;
      #line 4455 
      ldv_inline_asm();
      #line 4454 
      break;
      #line 4454 
      default: 
               #line 4454 
      ;
      #line 4454 
      __bad_percpu_size();
    }
    #line 4454 
    pscr_ret__ = pfo_ret___2;
    #line 4454 
    break;
    #line 4454 
    default: 
             #line 4454 
    ;
    #line 4454 
    __bad_size_call_parameter();
    #line 4454 
    break;
  }
  #line 4454 
  return (_Bool)((unsigned int)pscr_ret__ != 0U);
}

#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/etherdevice.h"
#line 31 
u32 eth_get_headlen(struct net_device *, void *, unsigned int);
#line 530  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/etherdevice.h"
__inline static int eth_skb_pad(struct sk_buff *skb)
{
  #line 532 
  return skb_put_padto(skb,60U);
}

#line 300  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/if_vlan.h"
__inline static bool eth_type_vlan(__be16 ethertype)
{
  #line 302 
  switch ((int)ethertype) {
    #line 303 
    case 129: 
              #line 303 
    ;
    #line 304 
    case 43144: 
                #line 304 
    ;
    #line 305 
    return (_Bool)1;
    #line 306 
    default: 
             #line 306 
    ;
    #line 307 
    return (_Bool)0;
  }
}

#line 580  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/if_vlan.h"
__inline static __be16 __vlan_get_protocol(struct sk_buff *skb, __be16 type, int *depth)
{
  #line 583 
  unsigned int vlan_depth = (unsigned int)skb->mac_len;
  #line 589 
  if ((int)eth_type_vlan((unsigned short)((int)type)) != 0) {
    #line 590 
    if (vlan_depth != 0U) {
      #line 591 
      int __ret_warn_on;
      #line 591 
      __ret_warn_on = vlan_depth <= 3U;
      #line 591 
      if ((long)(__ret_warn_on != 0) != 0L) {
        #line 592 
        ldv_inline_asm();
        #line 593 
        ldv_inline_asm();
      }
      #line 591 
      if ((long)((long)(__ret_warn_on != 0)) != 0L) 
                                                    #line 592 
                                                    return (unsigned short)0U;
      #line 593 
      vlan_depth += 4294967292U;
    }
    else 
         #line 595 
         vlan_depth = 14U;
    #line 597 
    while (1) {
      {
        #line 598 
        struct vlan_hdr *vh;
        #line 600 
        int tmp_1;
        #line 600 
        if (pskb_may_pull(skb,vlan_depth + 4U)) 
                                                #line 600 
                                                tmp_1 = 0; else 
                                                                #line 600 
                                                                tmp_1 = 1;
        #line 600 
        if ((long)tmp_1 != 0L) 
                               #line 602 
                               return (unsigned short)0U;
        #line 604 
        vh = (struct vlan_hdr *)(skb->data + (unsigned long)vlan_depth);
        #line 605 
        type = vh->h_vlan_encapsulated_proto;
        #line 606 
        vlan_depth += 4U;
      }
      #line 607 
      if (! ((int)eth_type_vlan((unsigned short)((int)type)) != 0)) 
                                                                    #line 597 
                                                                    break;
    }
  }
  #line 610 
  if (depth != (int *)0) 
                         #line 611 
                         *depth = (int)vlan_depth;
  #line 613 
  return type;
}

#line 623  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/if_vlan.h"
__inline static __be16 vlan_get_protocol(struct sk_buff *skb)
{
  #line 625 
  return __vlan_get_protocol(skb,(unsigned short)((int)skb->protocol),(int *)0);
}

#line 560  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/filter.h"
#line 560 
extern struct static_key_false bpf_stats_enabled_key;
#line 702  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/filter.h"
__inline static u32 bpf_prog_run_xdp(struct bpf_prog *prog, struct xdp_buff *xdp)
{
  #line 711 
  u32 ret;
  #line 711 
  __cant_sleep((char *)"./include/linux/filter.h",711,0);
  {
    #line 711 
    bool branch;
    #line 711 
    branch = arch_static_branch(& bpf_stats_enabled_key.key,(_Bool)0);
    #line 711 
    if ((long)((long)((int)branch != 0)) != 0L) {
      #line 711 
      unsigned long tcp_ptr__;
      #line 711 
      struct bpf_prog_stats *stats;
      #line 711 
      u64 start = sched_clock();
      #line 711 
      ret = (*(prog->bpf_func))((void *)xdp,(struct bpf_insn *)(& prog->__anonCompField_bpf_prog_176.insnsi));
      {
        #line 711 
        void *__vpp_verify = (void *)0;
        #line 711 
        void *tmp_2 = __vpp_verify;
      }
      #line 712 
      ldv_inline_asm();
      #line 711 
      stats = ((struct bpf_prog_stats *)tcp_ptr__);
      #line 711 
      u64_stats_update_begin(& stats->syncp);
      #line 711 
      (stats->cnt) ++;
      #line 711 
      stats->nsecs += sched_clock() - start;
      #line 711 
      u64_stats_update_begin(& stats->syncp);
    }
    else 
         #line 711 
         ret = (*(prog->bpf_func))((void *)xdp,(struct bpf_insn *)(& prog->__anonCompField_bpf_prog_176.insnsi));
  }
  #line 711 
  return ret;
}

#line 920 
#line 920 
int xdp_do_redirect(struct net_device *, struct xdp_buff *, struct bpf_prog *);
#line 925 
#line 925 
void bpf_warn_invalid_xdp_action(u32);
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/trace/events/xdp.h"
#line 28 
extern struct tracepoint __tracepoint_xdp_exception;
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/trace/events/xdp.h"
__inline static void trace_xdp_exception(struct net_device *dev, struct bpf_prog *xdp, u32 act)
{
  #line 28 
  int pscr_ret___0;
  #line 28 
  if ((int)static_key_false(& __tracepoint_xdp_exception.key) != 0) {
    #line 28 
    int pscr_ret__;
    #line 28 
    struct tracepoint_func *________p1;
    #line 28 
    struct tracepoint_func *it_func_ptr;
    #line 28 
    void *it_func;
    #line 28 
    void *__data;
    #line 28 
    int __idx = 0;
    {
      #line 28 
      void *__vpp_verify = (void *)0;
      #line 28 
      void *tmp = __vpp_verify;
    }
    #line 28 
    switch (4UL) {
      #line 28 
      int pfo_ret___0;
      #line 28 
      int pfo_ret___1;
      #line 28 
      int pfo_ret___2;
      #line 28 
      int pfo_ret__;
      #line 28 
      case (unsigned long)1: 
                             #line 28 
      ;
      #line 28 
      switch (4UL) {
        #line 28 
        case (unsigned long)1: 
                               #line 28 
        ;
        #line 29 
        ldv_inline_asm();
        #line 28 
        break;
        #line 28 
        case (unsigned long)2: 
                               #line 28 
        ;
        #line 29 
        ldv_inline_asm();
        #line 28 
        break;
        #line 28 
        case (unsigned long)4: 
                               #line 28 
        ;
        #line 29 
        ldv_inline_asm();
        #line 28 
        break;
        #line 28 
        case (unsigned long)8: 
                               #line 28 
        ;
        #line 29 
        ldv_inline_asm();
        #line 28 
        break;
        #line 28 
        default: 
                 #line 28 
        ;
        #line 28 
        __bad_percpu_size();
      }
      #line 28 
      pscr_ret__ = pfo_ret__;
      #line 28 
      break;
      #line 28 
      case (unsigned long)2: 
                             #line 28 
      ;
      #line 28 
      switch (4UL) {
        #line 28 
        case (unsigned long)1: 
                               #line 28 
        ;
        #line 29 
        ldv_inline_asm();
        #line 28 
        break;
        #line 28 
        case (unsigned long)2: 
                               #line 28 
        ;
        #line 29 
        ldv_inline_asm();
        #line 28 
        break;
        #line 28 
        case (unsigned long)4: 
                               #line 28 
        ;
        #line 29 
        ldv_inline_asm();
        #line 28 
        break;
        #line 28 
        case (unsigned long)8: 
                               #line 28 
        ;
        #line 29 
        ldv_inline_asm();
        #line 28 
        break;
        #line 28 
        default: 
                 #line 28 
        ;
        #line 28 
        __bad_percpu_size();
      }
      #line 28 
      pscr_ret__ = pfo_ret___0;
      #line 28 
      break;
      #line 28 
      case (unsigned long)4: 
                             #line 28 
      ;
      #line 28 
      switch (4UL) {
        #line 28 
        case (unsigned long)1: 
                               #line 28 
        ;
        #line 29 
        ldv_inline_asm();
        #line 28 
        break;
        #line 28 
        case (unsigned long)2: 
                               #line 28 
        ;
        #line 29 
        ldv_inline_asm();
        #line 28 
        break;
        #line 28 
        case (unsigned long)4: 
                               #line 28 
        ;
        #line 29 
        ldv_inline_asm();
        #line 28 
        break;
        #line 28 
        case (unsigned long)8: 
                               #line 28 
        ;
        #line 29 
        ldv_inline_asm();
        #line 28 
        break;
        #line 28 
        default: 
                 #line 28 
        ;
        #line 28 
        __bad_percpu_size();
      }
      #line 28 
      pscr_ret__ = pfo_ret___1;
      #line 28 
      break;
      #line 28 
      case (unsigned long)8: 
                             #line 28 
      ;
      #line 28 
      switch (4UL) {
        #line 28 
        case (unsigned long)1: 
                               #line 28 
        ;
        #line 29 
        ldv_inline_asm();
        #line 28 
        break;
        #line 28 
        case (unsigned long)2: 
                               #line 28 
        ;
        #line 29 
        ldv_inline_asm();
        #line 28 
        break;
        #line 28 
        case (unsigned long)4: 
                               #line 28 
        ;
        #line 29 
        ldv_inline_asm();
        #line 28 
        break;
        #line 28 
        case (unsigned long)8: 
                               #line 28 
        ;
        #line 29 
        ldv_inline_asm();
        #line 28 
        break;
        #line 28 
        default: 
                 #line 28 
        ;
        #line 28 
        __bad_percpu_size();
      }
      #line 28 
      pscr_ret__ = pfo_ret___2;
      #line 28 
      break;
      #line 28 
      default: 
               #line 28 
      ;
      #line 28 
      __bad_size_call_parameter();
      #line 28 
      break;
    }
    #line 28 
    if (cpumask_test_cpu(pscr_ret__,& __cpu_online_mask) == 0) 
                                                               #line 28 
                                                               return;
    {
      #line 28 
      int __ret_warn_on = 0;
      #line 28 
      if ((long)(__ret_warn_on != 0) != 0L) {
        #line 29 
        ldv_inline_asm();
        #line 30 
        ldv_inline_asm();
      }
      #line 28 
      long tmp_5 = (long)(__ret_warn_on != 0);
    }
    #line 28 
    __preempt_count_add(1);
    #line 29 
    ldv_inline_asm();
    {
      #line 29 
      union __anonunion___u_4859 __u;
      #line 28 
      __read_once_size((void *)(& __tracepoint_xdp_exception.funcs),(void *)(& __u.__c),8);
      #line 28 
      ________p1 = (__u.__val);
      }
    #line 28 
    it_func_ptr = ________p1;
    #line 28 
    if (it_func_ptr != (struct tracepoint_func *)0) 
      #line 28 
      while (1) {
        #line 28 
        it_func = it_func_ptr->func;
        #line 28 
        __data = it_func_ptr->data;
        #line 28 
        (*((void (*)(void *, struct net_device *, struct bpf_prog *, u32 ))it_func))(__data,dev,xdp,act);
        #line 28 
        it_func_ptr ++;
        #line 29 
        ;
        #line 29 
        if (! (it_func_ptr->func != (void *)0)) 
                                                #line 28 
                                                break;
      }
    #line 30 
    ldv_inline_asm();
    #line 28 
    __preempt_count_sub(1);
  }
  {
    #line 28 
    void *__vpp_verify_0 = (void *)0;
    #line 28 
    void *tmp_13 = __vpp_verify_0;
  }
  #line 28 
  switch (4UL) {
    #line 28 
    int pfo_ret___6;
    #line 28 
    int pfo_ret___3;
    #line 28 
    int pfo_ret___4;
    #line 28 
    int pfo_ret___5;
    #line 28 
    case (unsigned long)1: 
                           #line 28 
    ;
    #line 28 
    switch (4UL) {
      #line 28 
      case (unsigned long)1: 
                             #line 28 
      ;
      #line 29 
      ldv_inline_asm();
      #line 28 
      break;
      #line 28 
      case (unsigned long)2: 
                             #line 28 
      ;
      #line 29 
      ldv_inline_asm();
      #line 28 
      break;
      #line 28 
      case (unsigned long)4: 
                             #line 28 
      ;
      #line 29 
      ldv_inline_asm();
      #line 28 
      break;
      #line 28 
      case (unsigned long)8: 
                             #line 28 
      ;
      #line 29 
      ldv_inline_asm();
      #line 28 
      break;
      #line 28 
      default: 
               #line 28 
      ;
      #line 28 
      __bad_percpu_size();
    }
    #line 28 
    pscr_ret___0 = pfo_ret___3;
    #line 28 
    break;
    #line 28 
    case (unsigned long)2: 
                           #line 28 
    ;
    #line 28 
    switch (4UL) {
      #line 28 
      case (unsigned long)1: 
                             #line 28 
      ;
      #line 29 
      ldv_inline_asm();
      #line 28 
      break;
      #line 28 
      case (unsigned long)2: 
                             #line 28 
      ;
      #line 29 
      ldv_inline_asm();
      #line 28 
      break;
      #line 28 
      case (unsigned long)4: 
                             #line 28 
      ;
      #line 29 
      ldv_inline_asm();
      #line 28 
      break;
      #line 28 
      case (unsigned long)8: 
                             #line 28 
      ;
      #line 29 
      ldv_inline_asm();
      #line 28 
      break;
      #line 28 
      default: 
               #line 28 
      ;
      #line 28 
      __bad_percpu_size();
    }
    #line 28 
    pscr_ret___0 = pfo_ret___4;
    #line 28 
    break;
    #line 28 
    case (unsigned long)4: 
                           #line 28 
    ;
    #line 28 
    switch (4UL) {
      #line 28 
      case (unsigned long)1: 
                             #line 28 
      ;
      #line 29 
      ldv_inline_asm();
      #line 28 
      break;
      #line 28 
      case (unsigned long)2: 
                             #line 28 
      ;
      #line 29 
      ldv_inline_asm();
      #line 28 
      break;
      #line 28 
      case (unsigned long)4: 
                             #line 28 
      ;
      #line 29 
      ldv_inline_asm();
      #line 28 
      break;
      #line 28 
      case (unsigned long)8: 
                             #line 28 
      ;
      #line 29 
      ldv_inline_asm();
      #line 28 
      break;
      #line 28 
      default: 
               #line 28 
      ;
      #line 28 
      __bad_percpu_size();
    }
    #line 28 
    pscr_ret___0 = pfo_ret___5;
    #line 28 
    break;
    #line 28 
    case (unsigned long)8: 
                           #line 28 
    ;
    #line 28 
    switch (4UL) {
      #line 28 
      case (unsigned long)1: 
                             #line 28 
      ;
      #line 29 
      ldv_inline_asm();
      #line 28 
      break;
      #line 28 
      case (unsigned long)2: 
                             #line 28 
      ;
      #line 29 
      ldv_inline_asm();
      #line 28 
      break;
      #line 28 
      case (unsigned long)4: 
                             #line 28 
      ;
      #line 29 
      ldv_inline_asm();
      #line 28 
      break;
      #line 28 
      case (unsigned long)8: 
                             #line 28 
      ;
      #line 29 
      ldv_inline_asm();
      #line 28 
      break;
      #line 28 
      default: 
               #line 28 
      ;
      #line 28 
      __bad_percpu_size();
    }
    #line 28 
    pscr_ret___0 = pfo_ret___6;
    #line 28 
    break;
    #line 28 
    default: 
             #line 28 
    ;
    #line 28 
    __bad_size_call_parameter();
    #line 28 
    break;
  }
  #line 28 
  if (cpumask_test_cpu(pscr_ret___0,& __cpu_online_mask) != 0) {
    #line 28 
    __rcu_read_lock();
    {
      #line 29 
      union __anonunion___u_4861 __u_0;
      #line 28 
      __read_once_size((void *)(& __tracepoint_xdp_exception.funcs),(void *)(& __u_0.__c),8);
      #line 28 
      struct tracepoint_func *________p1_0 = (__u_0.__val);
      {
        #line 28 
        bool __warned;
        #line 28 
        if (debug_lockdep_rcu_enabled() != 0) 
          #line 28 
          if (! __warned) {
            #line 28 
            if (rcu_read_lock_sched_held() == 0) {
              #line 28 
              __warned = (_Bool)1;
              #line 28 
              lockdep_rcu_suspicious((char *)"./include/trace/events/xdp.h",28,(char *)"suspicious rcu_dereference_check() usage");
            }
          }
      }
      #line 28 
      struct tracepoint_func *tmp_11 = ________p1_0;
    }
    #line 28 
    __rcu_read_unlock();
  }
  #line 30 
  return;
}

#line 1057  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/ipv6.h"
#line 1057 
int ipv6_skip_exthdr(struct sk_buff *, int, u8 *, __be16 *);
#line 52  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_txrx.h"
__inline static int ice_compute_pad(int rx_buf_len)
{
  #line 54 
  int half_page_size;
  #line 56 
  half_page_size = (rx_buf_len + 2047) & -2048;
  #line 57 
  return (int)((unsigned int)(half_page_size - rx_buf_len) + 4294966976U);
}

#line 66  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_txrx.h"
__inline static int ice_skb_pad(void)
{
  #line 68 
  int rx_buf_len;
  #line 80 
  rx_buf_len = 1536;
  #line 83 
  rx_buf_len = rx_buf_len;
  #line 85 
  return ice_compute_pad(rx_buf_len);
}

#line 308  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_txrx.h"
__inline static bool ice_ring_uses_build_skb(struct ice_ring *ring)
{
  #line 310 
  return (_Bool)(((unsigned long)ring->flags & 2UL) != 0UL);
}

#line 348  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_txrx.h"
__inline static unsigned int ice_rx_pg_order(struct ice_ring *ring)
{
  #line 351 
  if ((unsigned int)ring->rx_buf_len > 2048U) 
                                              #line 352 
                                              return 1U;
  #line 354 
  return 0U;
}

#line 362 
#line 2223  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_txrx.c"
netdev_tx_t ice_start_xmit(struct sk_buff *skb, struct net_device *netdev);
#line 363  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_txrx.h"
#line 58  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_txrx.c"
void ice_clean_tx_ring(struct ice_ring *tx_ring);
#line 364  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_txrx.h"
#line 283  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_txrx.c"
void ice_clean_rx_ring(struct ice_ring *rx_ring);
#line 365  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_txrx.h"
#line 242  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_txrx.c"
int ice_setup_tx_ring(struct ice_ring *tx_ring);
#line 366  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_txrx.h"
#line 365  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_txrx.c"
int ice_setup_rx_ring(struct ice_ring *rx_ring);
#line 367  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_txrx.h"
#line 97  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_txrx.c"
void ice_free_tx_ring(struct ice_ring *tx_ring);
#line 368  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_txrx.h"
#line 342  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_txrx.c"
void ice_free_rx_ring(struct ice_ring *rx_ring);
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_xsk.h"
#line 14 
int ice_clean_rx_irq_zc(struct ice_ring *rx_ring, int budget);
#line 15 
#line 15 
bool ice_clean_tx_irq_zc(struct ice_ring *xdp_ring, int budget);
#line 19 
#line 19 
void ice_xsk_clean_rx_ring(struct ice_ring *rx_ring);
#line 20 
#line 20 
void ice_xsk_clean_xdp_ring(struct ice_ring *xdp_ring);
#line 506  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice.h"
#line 481  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_txrx.c"
int ice_xdp_xmit(struct net_device *dev, int n, struct xdp_frame **frames, u32 flags);
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_txrx_lib.h"
__inline static bool ice_test_staterr(union ice_32b_rx_flex_desc *rx_desc, u16 stat_err_bits)
{
  #line 21 
  return (_Bool)((unsigned int)((int)rx_desc->wb.status_error0 & (int)stat_err_bits) != 0U);
}

#line 92  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_lib.h"
#line 92 
void ice_update_tx_ring_stats(struct ice_ring *tx_ring, u64 pkts, u64 bytes);
#line 94 
#line 94 
void ice_update_rx_ring_stats(struct ice_ring *rx_ring, u64 pkts, u64 bytes);
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_dcb_lib.h"
#line 28 
int ice_tx_prepare_vlan_flags_dcb(struct ice_ring *tx_ring, struct ice_tx_buf *first);
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_txrx.c"
static void ice_unmap_and_free_tx_buf(struct ice_ring *ring, struct ice_tx_buf *tx_buf)
{
  #line 26 
  if (tx_buf->__anonCompField_ice_tx_buf_192.skb != (struct sk_buff *)0) {
    #line 27 
    if ((int)ice_ring_is_xdp(ring) != 0) 
                                         #line 28 
                                         page_frag_free(tx_buf->__anonCompField_ice_tx_buf_192.raw_buf); else 
                                                                    #line 30 
                                                                    dev_kfree_skb_any(tx_buf->__anonCompField_ice_tx_buf_192.skb);
    #line 31 
    if (tx_buf->len != 0U) 
                           #line 32 
                           dma_unmap_single_attrs(ring->dev,tx_buf->dma,(unsigned long)tx_buf->len,(enum dma_data_direction)DMA_TO_DEVICE,0UL);
  }
  else 
    #line 36 
    if (tx_buf->len != 0U) 
                           #line 37 
                           dma_unmap_page_attrs(ring->dev,tx_buf->dma,(unsigned long)tx_buf->len,(enum dma_data_direction)DMA_TO_DEVICE,0UL);
  #line 43 
  tx_buf->next_to_watch = (struct ice_tx_desc *)0;
  #line 44 
  tx_buf->__anonCompField_ice_tx_buf_192.skb = (struct sk_buff *)0;
  #line 45 
  tx_buf->len = 0U;
  #line 46 
  return;
}

#line 49  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_txrx.c"
static struct netdev_queue *txring_txq(struct ice_ring *ring)
{
  #line 51 
  return netdev_get_tx_queue(ring->netdev,(unsigned int)ring->q_index);
}

#line 58  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_txrx.c"
void ice_clean_tx_ring(struct ice_ring *tx_ring)
{
  #line 60 
  u16 i;
  #line 62 
  if ((int)ice_ring_is_xdp(tx_ring) != 0) 
    #line 62 
    if (tx_ring->xsk_umem != (struct xdp_umem *)0) {
      #line 63 
      ice_xsk_clean_xdp_ring(tx_ring);
      #line 64 
      goto tx_skip_free;
    }
  #line 68 
  if (tx_ring->__anonCompField_ice_ring_196.tx_buf == (struct ice_tx_buf *)0) 
    #line 69 
    return;
  #line 72 
  i = (unsigned short)0U;
  #line 72 
  while ((int)tx_ring->count > (int)i) {
    #line 73 
    ice_unmap_and_free_tx_buf(tx_ring,tx_ring->__anonCompField_ice_ring_196.tx_buf + (unsigned long)i);
    #line 72 
    i = (u16)((int)i + 1);
  }
  #line 75 
  tx_skip_free: 
                #line 75 
  ;
  #line 76 
  memset((void *)tx_ring->__anonCompField_ice_ring_196.tx_buf,0,(unsigned long)tx_ring->count * 40UL);
  #line 79 
  memset(tx_ring->desc,0,(unsigned long)tx_ring->size);
  #line 81 
  tx_ring->next_to_use = (unsigned short)0U;
  #line 82 
  tx_ring->next_to_clean = (unsigned short)0U;
  #line 84 
  if (tx_ring->netdev == (struct net_device *)0) 
                                                 #line 85 
                                                 return;
  #line 88 
  netdev_tx_reset_queue(txring_txq(tx_ring));
  #line 89 
  return;
}

#line 97  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_txrx.c"
void ice_free_tx_ring(struct ice_ring *tx_ring)
{
  #line 99 
  ice_clean_tx_ring(tx_ring);
  #line 100 
  devm_kfree(tx_ring->dev,(void *)tx_ring->__anonCompField_ice_ring_196.tx_buf);
  #line 101 
  tx_ring->__anonCompField_ice_ring_196.tx_buf = (struct ice_tx_buf *)0;
  #line 103 
  if (tx_ring->desc != (void *)0) {
    #line 104 
    dmam_free_coherent(tx_ring->dev,(unsigned long)tx_ring->size,tx_ring->desc,tx_ring->dma);
    #line 106 
    tx_ring->desc = (void *)0;
  }
  #line 108 
  return;
}

#line 117  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_txrx.c"
static bool ice_clean_tx_irq(struct ice_ring *tx_ring, int napi_budget)
{
  #line 123 
  struct ice_tx_desc *tx_desc;
  #line 124 
  struct ice_tx_buf *tx_buf;
  #line 218 
  int tmp_5;
  #line 119 
  unsigned int total_bytes = 0U;
  #line 119 
  unsigned int total_pkts = 0U;
  #line 120 
  unsigned int budget = 256U;
  #line 121 
  struct ice_vsi *vsi = tx_ring->vsi;
  #line 122 
  s16 i = (short)tx_ring->next_to_clean;
  #line 126 
  tx_buf = tx_ring->__anonCompField_ice_ring_196.tx_buf + (unsigned long)i;
  #line 127 
  tx_desc = (struct ice_tx_desc *)tx_ring->desc + (unsigned long)i;
  #line 128 
  i = (short)((int)i - (int)tx_ring->count);
  #line 130 
  __builtin_prefetch((void const *)((void *)(& vsi->state)));
  #line 132 
  while (1) {
    {
      #line 133 
      struct ice_tx_desc *eop_desc = tx_buf->next_to_watch;
      #line 136 
      if (eop_desc == (struct ice_tx_desc *)0) 
                                               #line 137 
                                               break;
      #line 138 
      ldv_inline_asm();
      #line 142 
      if ((eop_desc->cmd_type_offset_bsz & 15ULL) == 0ULL) 
                                                           #line 144 
                                                           break;
      #line 147 
      tx_buf->next_to_watch = (struct ice_tx_desc *)0;
      #line 150 
      total_bytes = tx_buf->bytecount + total_bytes;
      #line 151 
      total_pkts = (unsigned int)tx_buf->gso_segs + total_pkts;
      #line 153 
      if ((int)ice_ring_is_xdp(tx_ring) != 0) 
                                              #line 154 
                                              page_frag_free(tx_buf->__anonCompField_ice_tx_buf_192.raw_buf); else 
                                                                    #line 157 
                                                                    napi_consume_skb(tx_buf->__anonCompField_ice_tx_buf_192.skb,napi_budget);
      #line 160 
      dma_unmap_single_attrs(tx_ring->dev,tx_buf->dma,(unsigned long)tx_buf->len,(enum dma_data_direction)DMA_TO_DEVICE,0UL);
      #line 166 
      tx_buf->__anonCompField_ice_tx_buf_192.skb = (struct sk_buff *)0;
      #line 167 
      tx_buf->len = 0U;
      #line 170 
      while (tx_desc != eop_desc) {
        #line 171 
        tx_buf ++;
        #line 172 
        tx_desc ++;
        #line 173 
        i = (s16)((int)i + 1);
        #line 174 
        if ((long)((int)i == 0) != 0L) {
          #line 175 
          i = (short)((int)i - (int)tx_ring->count);
          #line 176 
          tx_buf = tx_ring->__anonCompField_ice_ring_196.tx_buf;
          #line 177 
          tx_desc = (struct ice_tx_desc *)tx_ring->desc;
        }
        #line 181 
        if (tx_buf->len != 0U) {
          #line 182 
          dma_unmap_page_attrs(tx_ring->dev,tx_buf->dma,(unsigned long)tx_buf->len,(enum dma_data_direction)DMA_TO_DEVICE,0UL);
          #line 186 
          tx_buf->len = 0U;
        }
      }
      #line 191 
      tx_buf ++;
      #line 192 
      tx_desc ++;
      #line 193 
      i = (s16)((int)i + 1);
      #line 194 
      if ((long)((int)i == 0) != 0L) {
        #line 195 
        i = (short)((int)i - (int)tx_ring->count);
        #line 196 
        tx_buf = tx_ring->__anonCompField_ice_ring_196.tx_buf;
        #line 197 
        tx_desc = (struct ice_tx_desc *)tx_ring->desc;
      }
      #line 200 
      __builtin_prefetch((void const *)((void *)tx_desc));
      #line 203 
      budget --;
    }
    #line 204 
    if (! ((long)(budget != 0U) != 0L)) 
                                        #line 132 
                                        break;
  }
  #line 206 
  i = (short)((int)tx_ring->count + (int)i);
  #line 207 
  tx_ring->next_to_clean = (unsigned short)i;
  #line 209 
  ice_update_tx_ring_stats(tx_ring,(unsigned long long)total_pkts,(unsigned long long)total_bytes);
  #line 211 
  if ((int)ice_ring_is_xdp(tx_ring) != 0) 
                                          #line 212 
                                          return (_Bool)(budget != 0U);
  #line 214 
  ;
  #line 214 
  ;
  #line 214 
  netdev_tx_completed_queue(txring_txq(tx_ring),total_pkts,total_bytes);
  #line 218 
  if ((long)(total_pkts != 0U) != 0L) {
    #line 218 
    if ((long)((int)netif_carrier_ok(tx_ring->netdev) != 0) != 0L) 
                                                                   #line 218 
                                                                   tmp_5 = 1; else 
                                                                    #line 218 
                                                                    tmp_5 = 0;
  }
  else 
       #line 218 
       tmp_5 = 0;
  #line 218 
  if (tmp_5 != 0) {
    #line 218 
    int tmp_6;
    #line 218 
    if ((int)tx_ring->next_to_clean <= (int)tx_ring->next_to_use) 
                                                                  #line 218 
                                                                  tmp_6 = (int)tx_ring->count; else 
                                                                    #line 218 
                                                                    tmp_6 = 0;
    #line 218 
    ;
    #line 218 
    if ((long)((tmp_6 + (int)tx_ring->next_to_clean) - (int)tx_ring->next_to_use > 46) != 0L) {
      #line 220 
      ldv_inline_asm();
      #line 224 
      if ((int)__netif_subqueue_stopped(tx_ring->netdev,
                                 (unsigned short)((int)tx_ring->q_index)) != 0) {
        #line 226 
        if (! test_bit(1L,(unsigned long *)(& vsi->state))) {
          #line 227 
          netif_wake_subqueue(tx_ring->netdev,(unsigned short)((int)tx_ring->q_index));
          #line 229 
          (tx_ring->__anonCompField_ice_ring_197.tx_stats.restart_q) ++;
        }
      }
    }
  }
  #line 233 
  return (_Bool)(budget != 0U);
}

#line 242  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_txrx.c"
int ice_setup_tx_ring(struct ice_ring *tx_ring)
{
  #line 244 
  struct device *dev = tx_ring->dev;
  #line 246 
  if (dev == (struct device *)0) 
                                 #line 247 
                                 return -12;
  {
    #line 250 
    int __ret_warn_on = tx_ring->__anonCompField_ice_ring_196.tx_buf != (struct ice_tx_buf *)0;
    #line 250 
    if ((long)(__ret_warn_on != 0) != 0L) {
      #line 251 
      ldv_inline_asm();
      #line 252 
      ldv_inline_asm();
    }
    #line 250 
    long tmp = (long)(__ret_warn_on != 0);
  }
  #line 252 
  tx_ring->__anonCompField_ice_ring_196.tx_buf = (struct ice_tx_buf *)cif_devm_kzalloc_0(dev,(unsigned long)tx_ring->count * 40UL,3264U);
  #line 254 
  if (tx_ring->__anonCompField_ice_ring_196.tx_buf == (struct ice_tx_buf *)0) 
    #line 255 
    return -12;
  #line 258 
  tx_ring->size = ((unsigned int)tx_ring->count * 16U + 4095U) & 4294963200U;
  #line 260 
  tx_ring->desc = dmam_alloc_coherent(dev,(unsigned long)tx_ring->size,& tx_ring->dma,3264U);
  #line 262 
  if (tx_ring->desc == (void *)0) {
    #line 263 
    _dev_err(dev,(char *)"Unable to allocate memory for the Tx descriptor ring, size=%d\n",tx_ring->size);
    #line 265 
    goto err;
  }
  #line 268 
  tx_ring->next_to_use = (unsigned short)0U;
  #line 269 
  tx_ring->next_to_clean = (unsigned short)0U;
  #line 270 
  tx_ring->__anonCompField_ice_ring_197.tx_stats.prev_pkt = -1;
  #line 271 
  return 0;
  #line 273 
  err: 
       #line 273 
  ;
  #line 274 
  devm_kfree(dev,(void *)tx_ring->__anonCompField_ice_ring_196.tx_buf);
  #line 275 
  tx_ring->__anonCompField_ice_ring_196.tx_buf = (struct ice_tx_buf *)0;
  #line 276 
  return -12;
}

#line 283  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_txrx.c"
void ice_clean_rx_ring(struct ice_ring *rx_ring)
{
  #line 286 
  u16 i;
  #line 285 
  struct device *dev = rx_ring->dev;
  #line 289 
  if (rx_ring->__anonCompField_ice_ring_196.rx_buf == (struct ice_rx_buf *)0) 
    #line 290 
    return;
  #line 292 
  if (rx_ring->xsk_umem != (struct xdp_umem *)0) {
    #line 293 
    ice_xsk_clean_rx_ring(rx_ring);
    #line 294 
    goto rx_skip_free;
  }
  #line 298 
  i = (unsigned short)0U;
  #line 298 
  while ((int)rx_ring->count > (int)i) {
    {
      #line 299 
      struct ice_rx_buf *rx_buf = rx_ring->__anonCompField_ice_ring_196.rx_buf + (unsigned long)i;
      #line 301 
      if (rx_buf->skb != (struct sk_buff *)0) {
        #line 302 
        consume_skb(rx_buf->skb);
        #line 303 
        rx_buf->skb = (struct sk_buff *)0;
      }
      #line 305 
      if (rx_buf->__anonCompField_ice_rx_buf_195.__anonCompField___anonunion_1006_193.page == (struct page *)0) 
        #line 306 
        goto __Cont;
      #line 311 
      dma_sync_single_range_for_cpu(dev,rx_buf->dma,(unsigned long)rx_buf->__anonCompField_ice_rx_buf_195.__anonCompField___anonunion_1006_193.page_offset,(unsigned long)rx_ring->rx_buf_len,(enum dma_data_direction)DMA_FROM_DEVICE);
      #line 317 
      ;
      #line 317 
      ;
      #line 317 
      dma_unmap_page_attrs(dev,rx_buf->dma,4096UL << ice_rx_pg_order(rx_ring),(enum dma_data_direction)DMA_FROM_DEVICE,34UL);
      #line 319 
      __page_frag_cache_drain(rx_buf->__anonCompField_ice_rx_buf_195.__anonCompField___anonunion_1006_193.page,(unsigned int)rx_buf->__anonCompField_ice_rx_buf_195.__anonCompField___anonunion_1006_193.pagecnt_bias);
      #line 321 
      rx_buf->__anonCompField_ice_rx_buf_195.__anonCompField___anonunion_1006_193.page = (struct page *)0;
      #line 322 
      rx_buf->__anonCompField_ice_rx_buf_195.__anonCompField___anonunion_1006_193.page_offset = 0U;
    }
    #line 298 
    __Cont: 
            #line 298 
    i = (u16)((int)i + 1);
  }
  #line 325 
  rx_skip_free: 
                #line 325 
  ;
  #line 326 
  memset((void *)rx_ring->__anonCompField_ice_ring_196.rx_buf,0,(unsigned long)rx_ring->count * 32UL);
  #line 329 
  memset(rx_ring->desc,0,(unsigned long)rx_ring->size);
  #line 331 
  rx_ring->next_to_alloc = (unsigned short)0U;
  #line 332 
  rx_ring->next_to_clean = (unsigned short)0U;
  #line 333 
  rx_ring->next_to_use = (unsigned short)0U;
  #line 334 
  return;
}

#line 342  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_txrx.c"
void ice_free_rx_ring(struct ice_ring *rx_ring)
{
  #line 344 
  ice_clean_rx_ring(rx_ring);
  #line 345 
  if ((rx_ring->vsi)->type == (unsigned int)ICE_VSI_PF) {
    #line 346 
    if ((int)xdp_rxq_info_is_reg(& rx_ring->xdp_rxq) != 0) 
                                                           #line 347 
                                                           xdp_rxq_info_unreg(& rx_ring->xdp_rxq);
  }
  #line 348 
  rx_ring->xdp_prog = (struct bpf_prog *)0;
  #line 349 
  devm_kfree(rx_ring->dev,(void *)rx_ring->__anonCompField_ice_ring_196.rx_buf);
  #line 350 
  rx_ring->__anonCompField_ice_ring_196.rx_buf = (struct ice_rx_buf *)0;
  #line 352 
  if (rx_ring->desc != (void *)0) {
    #line 353 
    dmam_free_coherent(rx_ring->dev,(unsigned long)rx_ring->size,rx_ring->desc,rx_ring->dma);
    #line 355 
    rx_ring->desc = (void *)0;
  }
  #line 357 
  return;
}

#line 365  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_txrx.c"
int ice_setup_rx_ring(struct ice_ring *rx_ring)
{
  #line 367 
  struct device *dev = rx_ring->dev;
  #line 369 
  if (dev == (struct device *)0) 
                                 #line 370 
                                 return -12;
  {
    #line 373 
    int __ret_warn_on = rx_ring->__anonCompField_ice_ring_196.rx_buf != (struct ice_rx_buf *)0;
    #line 373 
    if ((long)(__ret_warn_on != 0) != 0L) {
      #line 374 
      ldv_inline_asm();
      #line 375 
      ldv_inline_asm();
    }
    #line 373 
    long tmp = (long)(__ret_warn_on != 0);
  }
  #line 375 
  rx_ring->__anonCompField_ice_ring_196.rx_buf = (struct ice_rx_buf *)cif_devm_kzalloc_0(dev,(unsigned long)rx_ring->count * 32UL,3264U);
  #line 377 
  if (rx_ring->__anonCompField_ice_ring_196.rx_buf == (struct ice_rx_buf *)0) 
    #line 378 
    return -12;
  #line 381 
  rx_ring->size = ((unsigned int)rx_ring->count * 32U + 4095U) & 4294963200U;
  #line 383 
  rx_ring->desc = dmam_alloc_coherent(dev,(unsigned long)rx_ring->size,& rx_ring->dma,3264U);
  #line 385 
  if (rx_ring->desc == (void *)0) {
    #line 386 
    _dev_err(dev,(char *)"Unable to allocate memory for the Rx descriptor ring, size=%d\n",rx_ring->size);
    #line 388 
    goto err;
  }
  #line 391 
  rx_ring->next_to_use = (unsigned short)0U;
  #line 392 
  rx_ring->next_to_clean = (unsigned short)0U;
  #line 394 
  if ((int)ice_is_xdp_ena_vsi(rx_ring->vsi) != 0) {
    #line 396 
    union __anonunion___u_5131 __u = {.__val = (rx_ring->vsi)->xdp_prog};
    #line 395 
    __write_once_size((void *)(& rx_ring->xdp_prog),(void *)(& __u.__c),8);
    #line 395 
    struct bpf_prog *tmp_3 = __u.__val;
  }
  #line 397 
  if ((rx_ring->vsi)->type == (unsigned int)ICE_VSI_PF) {
    #line 398 
    if (! xdp_rxq_info_is_reg(& rx_ring->xdp_rxq)) {
      #line 399 
      if (xdp_rxq_info_reg(& rx_ring->xdp_rxq,rx_ring->netdev,
                         (unsigned int)rx_ring->q_index) != 0) 
        #line 401 
        goto err;
    }
  }
  #line 402 
  return 0;
  #line 404 
  err: 
       #line 404 
  ;
  #line 405 
  devm_kfree(dev,(void *)rx_ring->__anonCompField_ice_ring_196.rx_buf);
  #line 406 
  rx_ring->__anonCompField_ice_ring_196.rx_buf = (struct ice_rx_buf *)0;
  #line 407 
  return -12;
}

#line 416  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_txrx.c"
static unsigned int ice_rx_offset(struct ice_ring *rx_ring)
{
  #line 418 
  if ((int)ice_ring_uses_build_skb(rx_ring) != 0) {
    #line 419 
    return (unsigned int)ice_skb_pad();
  }
  else {
    #line 420 
    if ((int)ice_is_xdp_ena_vsi(rx_ring->vsi) != 0) 
                                                    #line 421 
                                                    return 256U;
  }
  #line 423 
  return 0U;
}

#line 435  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_txrx.c"
static int ice_run_xdp(struct ice_ring *rx_ring, struct xdp_buff *xdp, struct bpf_prog *xdp_prog)
{
  #line 438 
  int err;
  #line 439 
  struct ice_ring *xdp_ring;
  #line 440 
  u32 act;
  #line 438 
  int result = 0;
  #line 442 
  act = bpf_prog_run_xdp(xdp_prog,xdp);
  #line 443 
  switch (act) {
    #line 447 
    int pscr_ret__;
    #line 444 
    case (u32)2: 
                 #line 444 
    ;
    #line 445 
    break;
    #line 446 
    case (u32)3: 
                 #line 446 
    ;
    #line 447 
    __this_cpu_preempt_check((char *)"read");
    {
      #line 447 
      void *__vpp_verify = (void *)0;
      #line 447 
      void *tmp = __vpp_verify;
    }
    #line 447 
    switch (4UL) {
      #line 447 
      int pfo_ret___0;
      #line 447 
      int pfo_ret___1;
      #line 447 
      int pfo_ret___2;
      #line 447 
      int pfo_ret__;
      #line 447 
      case (unsigned long)1: 
                             #line 447 
      ;
      #line 447 
      switch (4UL) {
        #line 447 
        case (unsigned long)1: 
                               #line 447 
        ;
        #line 448 
        ldv_inline_asm();
        #line 447 
        break;
        #line 447 
        case (unsigned long)2: 
                               #line 447 
        ;
        #line 448 
        ldv_inline_asm();
        #line 447 
        break;
        #line 447 
        case (unsigned long)4: 
                               #line 447 
        ;
        #line 448 
        ldv_inline_asm();
        #line 447 
        break;
        #line 447 
        case (unsigned long)8: 
                               #line 447 
        ;
        #line 448 
        ldv_inline_asm();
        #line 447 
        break;
        #line 447 
        default: 
                 #line 447 
        ;
        #line 447 
        __bad_percpu_size();
      }
      #line 447 
      pscr_ret__ = pfo_ret__;
      #line 447 
      break;
      #line 447 
      case (unsigned long)2: 
                             #line 447 
      ;
      #line 447 
      switch (4UL) {
        #line 447 
        case (unsigned long)1: 
                               #line 447 
        ;
        #line 448 
        ldv_inline_asm();
        #line 447 
        break;
        #line 447 
        case (unsigned long)2: 
                               #line 447 
        ;
        #line 448 
        ldv_inline_asm();
        #line 447 
        break;
        #line 447 
        case (unsigned long)4: 
                               #line 447 
        ;
        #line 448 
        ldv_inline_asm();
        #line 447 
        break;
        #line 447 
        case (unsigned long)8: 
                               #line 447 
        ;
        #line 448 
        ldv_inline_asm();
        #line 447 
        break;
        #line 447 
        default: 
                 #line 447 
        ;
        #line 447 
        __bad_percpu_size();
      }
      #line 447 
      pscr_ret__ = pfo_ret___0;
      #line 447 
      break;
      #line 447 
      case (unsigned long)4: 
                             #line 447 
      ;
      #line 447 
      switch (4UL) {
        #line 447 
        case (unsigned long)1: 
                               #line 447 
        ;
        #line 448 
        ldv_inline_asm();
        #line 447 
        break;
        #line 447 
        case (unsigned long)2: 
                               #line 447 
        ;
        #line 448 
        ldv_inline_asm();
        #line 447 
        break;
        #line 447 
        case (unsigned long)4: 
                               #line 447 
        ;
        #line 448 
        ldv_inline_asm();
        #line 447 
        break;
        #line 447 
        case (unsigned long)8: 
                               #line 447 
        ;
        #line 448 
        ldv_inline_asm();
        #line 447 
        break;
        #line 447 
        default: 
                 #line 447 
        ;
        #line 447 
        __bad_percpu_size();
      }
      #line 447 
      pscr_ret__ = pfo_ret___1;
      #line 447 
      break;
      #line 447 
      case (unsigned long)8: 
                             #line 447 
      ;
      #line 447 
      switch (4UL) {
        #line 447 
        case (unsigned long)1: 
                               #line 447 
        ;
        #line 448 
        ldv_inline_asm();
        #line 447 
        break;
        #line 447 
        case (unsigned long)2: 
                               #line 447 
        ;
        #line 448 
        ldv_inline_asm();
        #line 447 
        break;
        #line 447 
        case (unsigned long)4: 
                               #line 447 
        ;
        #line 448 
        ldv_inline_asm();
        #line 447 
        break;
        #line 447 
        case (unsigned long)8: 
                               #line 447 
        ;
        #line 448 
        ldv_inline_asm();
        #line 447 
        break;
        #line 447 
        default: 
                 #line 447 
        ;
        #line 447 
        __bad_percpu_size();
      }
      #line 447 
      pscr_ret__ = pfo_ret___2;
      #line 447 
      break;
      #line 447 
      default: 
               #line 447 
      ;
      #line 447 
      __bad_size_call_parameter();
      #line 447 
      break;
    }
    #line 447 
    xdp_ring = *((rx_ring->vsi)->xdp_rings + (unsigned long)pscr_ret__);
    #line 448 
    result = ice_xmit_xdp_buff(xdp,xdp_ring);
    #line 449 
    break;
    #line 450 
    case (u32)4: 
                 #line 450 
    ;
    #line 451 
    err = xdp_do_redirect(rx_ring->netdev,xdp,xdp_prog);
    #line 452 
    if (err == 0) 
                  #line 452 
                  result = 4; else 
                                   #line 452 
                                   result = 1;
    #line 453 
    break;
    #line 454 
    default: 
             #line 454 
    ;
    #line 455 
    bpf_warn_invalid_xdp_action(act);
    #line 457 
    case (u32)0: 
                 #line 457 
    ;
    #line 458 
    trace_xdp_exception(rx_ring->netdev,xdp_prog,act);
    #line 460 
    case (u32)1: 
                 #line 460 
    ;
    #line 461 
    result = 1;
    #line 462 
    break;
  }
  #line 465 
  return result;
}

#line 481  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_txrx.c"
int ice_xdp_xmit(struct net_device *dev, int n, struct xdp_frame **frames, u32 flags)
{
  #line 485 
  int pscr_ret__;
  #line 487 
  struct ice_ring *xdp_ring;
  #line 488 
  int i;
  #line 484 
  struct ice_netdev_priv *np = netdev_priv(dev);
  #line 485 
  __this_cpu_preempt_check((char *)"read");
  {
    #line 485 
    void *__vpp_verify = (void *)0;
    #line 485 
    void *tmp_2 = __vpp_verify;
  }
  #line 485 
  switch (4UL) {
    #line 485 
    int pfo_ret___2;
    #line 485 
    int pfo_ret__;
    #line 485 
    int pfo_ret___0;
    #line 485 
    int pfo_ret___1;
    #line 485 
    case (unsigned long)1: 
                           #line 485 
    ;
    #line 485 
    switch (4UL) {
      #line 485 
      case (unsigned long)1: 
                             #line 485 
      ;
      #line 486 
      ldv_inline_asm();
      #line 485 
      break;
      #line 485 
      case (unsigned long)2: 
                             #line 485 
      ;
      #line 486 
      ldv_inline_asm();
      #line 485 
      break;
      #line 485 
      case (unsigned long)4: 
                             #line 485 
      ;
      #line 486 
      ldv_inline_asm();
      #line 485 
      break;
      #line 485 
      case (unsigned long)8: 
                             #line 485 
      ;
      #line 486 
      ldv_inline_asm();
      #line 485 
      break;
      #line 485 
      default: 
               #line 485 
      ;
      #line 485 
      __bad_percpu_size();
    }
    #line 485 
    pscr_ret__ = pfo_ret__;
    #line 485 
    break;
    #line 485 
    case (unsigned long)2: 
                           #line 485 
    ;
    #line 485 
    switch (4UL) {
      #line 485 
      case (unsigned long)1: 
                             #line 485 
      ;
      #line 486 
      ldv_inline_asm();
      #line 485 
      break;
      #line 485 
      case (unsigned long)2: 
                             #line 485 
      ;
      #line 486 
      ldv_inline_asm();
      #line 485 
      break;
      #line 485 
      case (unsigned long)4: 
                             #line 485 
      ;
      #line 486 
      ldv_inline_asm();
      #line 485 
      break;
      #line 485 
      case (unsigned long)8: 
                             #line 485 
      ;
      #line 486 
      ldv_inline_asm();
      #line 485 
      break;
      #line 485 
      default: 
               #line 485 
      ;
      #line 485 
      __bad_percpu_size();
    }
    #line 485 
    pscr_ret__ = pfo_ret___0;
    #line 485 
    break;
    #line 485 
    case (unsigned long)4: 
                           #line 485 
    ;
    #line 485 
    switch (4UL) {
      #line 485 
      case (unsigned long)1: 
                             #line 485 
      ;
      #line 486 
      ldv_inline_asm();
      #line 485 
      break;
      #line 485 
      case (unsigned long)2: 
                             #line 485 
      ;
      #line 486 
      ldv_inline_asm();
      #line 485 
      break;
      #line 485 
      case (unsigned long)4: 
                             #line 485 
      ;
      #line 486 
      ldv_inline_asm();
      #line 485 
      break;
      #line 485 
      case (unsigned long)8: 
                             #line 485 
      ;
      #line 486 
      ldv_inline_asm();
      #line 485 
      break;
      #line 485 
      default: 
               #line 485 
      ;
      #line 485 
      __bad_percpu_size();
    }
    #line 485 
    pscr_ret__ = pfo_ret___1;
    #line 485 
    break;
    #line 485 
    case (unsigned long)8: 
                           #line 485 
    ;
    #line 485 
    switch (4UL) {
      #line 485 
      case (unsigned long)1: 
                             #line 485 
      ;
      #line 486 
      ldv_inline_asm();
      #line 485 
      break;
      #line 485 
      case (unsigned long)2: 
                             #line 485 
      ;
      #line 486 
      ldv_inline_asm();
      #line 485 
      break;
      #line 485 
      case (unsigned long)4: 
                             #line 485 
      ;
      #line 486 
      ldv_inline_asm();
      #line 485 
      break;
      #line 485 
      case (unsigned long)8: 
                             #line 485 
      ;
      #line 486 
      ldv_inline_asm();
      #line 485 
      break;
      #line 485 
      default: 
               #line 485 
      ;
      #line 485 
      __bad_percpu_size();
    }
    #line 485 
    pscr_ret__ = pfo_ret___2;
    #line 485 
    break;
    #line 485 
    default: 
             #line 485 
    ;
    #line 485 
    __bad_size_call_parameter();
    #line 485 
    break;
  }
  #line 485 
  unsigned int queue_index = (unsigned int)pscr_ret__;
  #line 486 
  struct ice_vsi *vsi = np->vsi;
  #line 488 
  int drops = 0;
  #line 490 
  if ((int)test_bit(1L,(unsigned long *)(& vsi->state)) != 0) 
                                                              #line 491 
                                                              return -100;
  #line 493 
  if (ice_is_xdp_ena_vsi(vsi)) {
    #line 493 
    if ((unsigned int)vsi->num_xdp_txq <= queue_index) 
                                                       #line 494 
                                                       return -6;
  }
  else 
       #line 494 
       return -6;
  #line 496 
  if ((long)((flags & 4294967294U) != 0U) != 0L) 
                                                 #line 497 
                                                 return -22;
  #line 499 
  xdp_ring = *(vsi->xdp_rings + (unsigned long)queue_index);
  #line 500 
  i = 0;
  #line 500 
  while (i < n) {
    {
      #line 502 
      int err;
      #line 501 
      struct xdp_frame *xdpf = *(frames + (unsigned long)i);
      #line 504 
      err = ice_xmit_xdp_ring(xdpf->data,(unsigned short)((int)xdpf->len),xdp_ring);
      #line 505 
      if (err != 2) {
        #line 506 
        xdp_return_frame_rx_napi(xdpf);
        #line 507 
        drops ++;
      }
    }
    #line 500 
    i ++;
  }
  #line 511 
  if ((long)((flags & 1U) != 0U) != 0L) 
                                        #line 512 
                                        ice_xdp_ring_update_tail(xdp_ring);
  #line 514 
  return n - drops;
}

#line 526  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_txrx.c"
static bool ice_alloc_mapped_page(struct ice_ring *rx_ring, struct ice_rx_buf *bi)
{
  #line 529 
  dma_addr_t dma;
  #line 528 
  struct page *page = bi->__anonCompField_ice_rx_buf_195.__anonCompField___anonunion_1006_193.page;
  #line 532 
  if ((long)(page != (struct page *)0) != 0L) {
    #line 533 
    (rx_ring->__anonCompField_ice_ring_197.rx_stats.page_reuse_count) ++;
    #line 534 
    return (_Bool)1;
  }
  #line 538 
  page = dev_alloc_pages(ice_rx_pg_order(rx_ring));
  #line 539 
  if ((long)(page == (struct page *)0) != 0L) {
    #line 540 
    (rx_ring->__anonCompField_ice_ring_197.rx_stats.alloc_page_failed) ++;
    #line 541 
    return (_Bool)0;
  }
  #line 545 
  ;
  #line 545 
  ;
  #line 545 
  dma = dma_map_page_attrs(rx_ring->dev,page,0UL,4096UL << ice_rx_pg_order(rx_ring),(enum dma_data_direction)DMA_FROM_DEVICE,34UL);
  #line 551 
  if (dma_mapping_error(rx_ring->dev,dma) != 0) {
    #line 552 
    ;
    #line 552 
    __free_pages(page,ice_rx_pg_order(rx_ring));
    #line 553 
    (rx_ring->__anonCompField_ice_ring_197.rx_stats.alloc_page_failed) ++;
    #line 554 
    return (_Bool)0;
  }
  #line 557 
  bi->dma = dma;
  #line 558 
  bi->__anonCompField_ice_rx_buf_195.__anonCompField___anonunion_1006_193.page = page;
  #line 559 
  bi->__anonCompField_ice_rx_buf_195.__anonCompField___anonunion_1006_193.page_offset = ice_rx_offset(rx_ring);
  #line 560 
  page_ref_add(page,65534);
  #line 561 
  bi->__anonCompField_ice_rx_buf_195.__anonCompField___anonunion_1006_193.pagecnt_bias = (unsigned short)65535U;
  #line 563 
  return (_Bool)1;
}

#line 579  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_txrx.c"
bool ice_alloc_rx_bufs(struct ice_ring *rx_ring, u16 cleaned_count)
{
  #line 581 
  union ice_32b_rx_flex_desc *rx_desc;
  #line 583 
  struct ice_rx_buf *bi;
  #line 582 
  u16 ntu = rx_ring->next_to_use;
  #line 586 
  if (rx_ring->netdev == (struct net_device *)0 || (unsigned int)cleaned_count == 0U) 
    #line 587 
    return (_Bool)0;
  #line 590 
  rx_desc = (union ice_32b_rx_flex_desc *)rx_ring->desc + (unsigned long)ntu;
  #line 591 
  bi = rx_ring->__anonCompField_ice_ring_196.rx_buf + (unsigned long)ntu;
  #line 593 
  while (1) {
    {
      #line 595 
      if (! ice_alloc_mapped_page(rx_ring,bi)) 
                                               #line 596 
                                               break;
      #line 599 
      dma_sync_single_range_for_device(rx_ring->dev,bi->dma,(unsigned long)bi->__anonCompField_ice_rx_buf_195.__anonCompField___anonunion_1006_193.page_offset,(unsigned long)rx_ring->rx_buf_len,(enum dma_data_direction)DMA_FROM_DEVICE);
      #line 607 
      rx_desc->read.pkt_addr = bi->dma + (unsigned long long)bi->__anonCompField_ice_rx_buf_195.__anonCompField___anonunion_1006_193.page_offset;
      #line 609 
      rx_desc ++;
      #line 610 
      bi ++;
      #line 611 
      ntu = (u16)((int)ntu + 1);
      #line 612 
      if ((long)((int)rx_ring->count == (int)ntu) != 0L) {
        #line 613 
        rx_desc = (union ice_32b_rx_flex_desc *)rx_ring->desc;
        #line 614 
        bi = rx_ring->__anonCompField_ice_ring_196.rx_buf;
        #line 615 
        ntu = (unsigned short)0U;
      }
      #line 619 
      rx_desc->wb.status_error0 = (unsigned short)0U;
      #line 621 
      cleaned_count = (u16)((int)cleaned_count - 1);
    }
    #line 622 
    if (! ((unsigned int)cleaned_count != 0U)) 
                                               #line 593 
                                               break;
  }
  #line 624 
  if ((int)rx_ring->next_to_use != (int)ntu) 
                                             #line 625 
                                             ice_release_rx_desc(rx_ring,(unsigned int)ntu);
  #line 627 
  return (_Bool)((unsigned int)cleaned_count != 0U);
}

#line 634  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_txrx.c"
static bool ice_page_is_reserved(struct page *page)
{
  #line 636 
  int tmp_2;
  #line 636 
  if (page_to_nid(page) != numa_mem_id()) 
                                          #line 636 
                                          tmp_2 = 1;
  else {
    #line 636 
    if ((int)page_is_pfmemalloc(page) != 0) 
                                            #line 636 
                                            tmp_2 = 1; else 
                                                            #line 636 
                                                            tmp_2 = 0;
  }
  #line 636 
  return (_Bool)(tmp_2 != 0);
}

#line 650  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_txrx.c"
static void ice_rx_buf_adjust_pg_offset(struct ice_rx_buf *rx_buf, unsigned int size)
{
  #line 654 
  rx_buf->__anonCompField_ice_rx_buf_195.__anonCompField___anonunion_1006_193.page_offset ^= size;
  #line 655 
  return;
}

#line 670  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_txrx.c"
static bool ice_can_reuse_rx_page(struct ice_rx_buf *rx_buf)
{
  #line 672 
  unsigned int pagecnt_bias = (unsigned int)rx_buf->__anonCompField_ice_rx_buf_195.__anonCompField___anonunion_1006_193.pagecnt_bias;
  #line 673 
  struct page *page = rx_buf->__anonCompField_ice_rx_buf_195.__anonCompField___anonunion_1006_193.page;
  #line 676 
  if ((long)((int)ice_page_is_reserved(page) != 0) != 0L) 
                                                          #line 677 
                                                          return (_Bool)0;
  #line 681 
  ;
  #line 681 
  if ((long)((unsigned int)page_count(page) - pagecnt_bias > 1U) != 0L) 
    #line 682 
    return (_Bool)0;
  #line 694 
  if ((long)(pagecnt_bias == 1U) != 0L) {
    #line 695 
    page_ref_add(page,65534);
    #line 696 
    rx_buf->__anonCompField_ice_rx_buf_195.__anonCompField___anonunion_1006_193.pagecnt_bias = (unsigned short)65535U;
  }
  #line 699 
  return (_Bool)1;
}

#line 714  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_txrx.c"
static void ice_add_rx_frag(struct ice_ring *rx_ring, struct ice_rx_buf *rx_buf, struct sk_buff *skb, unsigned int size)
{
  #line 720 
  unsigned int truesize = (unsigned int)((4096UL << ice_rx_pg_order(rx_ring)) / 2UL);
  #line 723 
  if (size == 0U) 
                  #line 724 
                  return;
  #line 725 
  ;
  #line 725 
  ;
  #line 725 
  ;
  #line 725 
  ;
  #line 725 
  ;
  #line 725 
  skb_add_rx_frag(skb,(int)((struct skb_shared_info *)skb_end_pointer(skb))->nr_frags,rx_buf->__anonCompField_ice_rx_buf_195.__anonCompField___anonunion_1006_193.page,(int)rx_buf->__anonCompField_ice_rx_buf_195.__anonCompField___anonunion_1006_193.page_offset,(int)size,truesize);
  #line 729 
  ice_rx_buf_adjust_pg_offset(rx_buf,truesize);
  #line 730 
  return;
}

#line 740  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_txrx.c"
static void ice_reuse_rx_page(struct ice_ring *rx_ring, struct ice_rx_buf *old_buf)
{
  #line 743 
  struct ice_rx_buf *new_buf;
  #line 742 
  u16 nta = rx_ring->next_to_alloc;
  #line 745 
  new_buf = rx_ring->__anonCompField_ice_ring_196.rx_buf + (unsigned long)nta;
  #line 748 
  nta = (u16)((int)nta + 1);
  #line 749 
  if ((int)rx_ring->count > (int)nta) 
                                      #line 749 
                                      rx_ring->next_to_alloc = nta; else 
                                                                    #line 749 
                                                                    rx_ring->next_to_alloc = (unsigned short)0U;
  #line 755 
  new_buf->dma = old_buf->dma;
  #line 756 
  new_buf->__anonCompField_ice_rx_buf_195.__anonCompField___anonunion_1006_193.page = old_buf->__anonCompField_ice_rx_buf_195.__anonCompField___anonunion_1006_193.page;
  #line 757 
  new_buf->__anonCompField_ice_rx_buf_195.__anonCompField___anonunion_1006_193.page_offset = old_buf->__anonCompField_ice_rx_buf_195.__anonCompField___anonunion_1006_193.page_offset;
  #line 758 
  new_buf->__anonCompField_ice_rx_buf_195.__anonCompField___anonunion_1006_193.pagecnt_bias = old_buf->__anonCompField_ice_rx_buf_195.__anonCompField___anonunion_1006_193.pagecnt_bias;
  #line 759 
  return;
}

#line 771  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_txrx.c"
static struct ice_rx_buf *ice_get_rx_buf(struct ice_ring *rx_ring, struct sk_buff **skb, unsigned int size)
{
  #line 774 
  struct ice_rx_buf *rx_buf;
  #line 776 
  rx_buf = rx_ring->__anonCompField_ice_ring_196.rx_buf + (unsigned long)rx_ring->next_to_clean;
  #line 777 
  prefetchw((void *)rx_buf->__anonCompField_ice_rx_buf_195.__anonCompField___anonunion_1006_193.page);
  #line 778 
  *skb = rx_buf->skb;
  #line 780 
  if (size == 0U) 
                  #line 781 
                  return rx_buf;
  #line 783 
  dma_sync_single_range_for_cpu(rx_ring->dev,rx_buf->dma,(unsigned long)rx_buf->__anonCompField_ice_rx_buf_195.__anonCompField___anonunion_1006_193.page_offset,(unsigned long)size,(enum dma_data_direction)DMA_FROM_DEVICE);
  #line 788 
  rx_buf->__anonCompField_ice_rx_buf_195.__anonCompField___anonunion_1006_193.pagecnt_bias = (u16)((int)rx_buf->__anonCompField_ice_rx_buf_195.__anonCompField___anonunion_1006_193.pagecnt_bias - 1);
  #line 790 
  return rx_buf;
}

#line 803  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_txrx.c"
static struct sk_buff *ice_build_skb(struct ice_ring *rx_ring, struct ice_rx_buf *rx_buf, struct xdp_buff *xdp)
{
  #line 814 
  struct sk_buff *skb;
  #line 806 
  unsigned int metasize = (unsigned int)(xdp->data - xdp->data_meta);
  #line 808 
  unsigned int truesize = (unsigned int)((4096UL << ice_rx_pg_order(rx_ring)) / 2UL);
  #line 821 
  __builtin_prefetch((void const *)xdp->data_meta);
  #line 823 
  __builtin_prefetch((void const *)(xdp->data + 64U));
  #line 826 
  skb = build_skb(xdp->data_hard_start,truesize);
  #line 827 
  if ((long)(skb == (struct sk_buff *)0) != 0L) 
                                                #line 828 
                                                return (struct sk_buff *)0;
  #line 833 
  skb_record_rx_queue(skb,(unsigned short)((int)rx_ring->q_index));
  #line 836 
  skb_reserve(skb,(int)(xdp->data - xdp->data_hard_start));
  #line 837 
  __skb_put(skb,(unsigned int)(xdp->data_end - xdp->data));
  #line 838 
  if (metasize != 0U) 
                      #line 839 
                      skb_metadata_set(skb,(unsigned char)((int)((unsigned char)metasize)));
  #line 842 
  ice_rx_buf_adjust_pg_offset(rx_buf,truesize);
  #line 844 
  return skb;
}

#line 858  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_txrx.c"
static struct sk_buff *ice_construct_skb(struct ice_ring *rx_ring, struct ice_rx_buf *rx_buf, struct xdp_buff *xdp)
{
  #line 862 
  unsigned int headlen;
  #line 863 
  struct sk_buff *skb;
  #line 861 
  unsigned int size = (unsigned int)(xdp->data_end - xdp->data);
  #line 866 
  __builtin_prefetch((void const *)xdp->data);
  #line 868 
  __builtin_prefetch((void const *)(xdp->data + 64U));
  #line 872 
  skb = __napi_alloc_skb(& (rx_ring->q_vector)->napi,256U,10784U);
  #line 874 
  if ((long)(skb == (struct sk_buff *)0) != 0L) 
                                                #line 875 
                                                return (struct sk_buff *)0;
  #line 877 
  skb_record_rx_queue(skb,(unsigned short)((int)rx_ring->q_index));
  #line 879 
  headlen = size;
  #line 880 
  if (headlen > 256U) 
                      #line 881 
                      headlen = eth_get_headlen(skb->__anonCompField_sk_buff_91.__anonCompField___anonunion_531_90.__anonCompField___anonstruct_532_89.dev,xdp->data,256U);
  #line 884 
  ;
  #line 884 
  ;
  #line 884 
  memcpy(__skb_put(skb,headlen),xdp->data,(unsigned long)(headlen + 7U) & 4294967288UL);
  #line 888 
  size -= headlen;
  #line 889 
  if (size != 0U) {
    #line 893 
    unsigned int truesize = (unsigned int)((4096UL << ice_rx_pg_order(rx_ring)) / 2UL);
    #line 895 
    skb_add_rx_frag(skb,0,rx_buf->__anonCompField_ice_rx_buf_195.__anonCompField___anonunion_1006_193.page,(int)(rx_buf->__anonCompField_ice_rx_buf_195.__anonCompField___anonunion_1006_193.page_offset + headlen),(int)size,truesize);
    #line 898 
    ice_rx_buf_adjust_pg_offset(rx_buf,truesize);
  }
  else 
       #line 904 
       rx_buf->__anonCompField_ice_rx_buf_195.__anonCompField___anonunion_1006_193.pagecnt_bias = (u16)((int)rx_buf->__anonCompField_ice_rx_buf_195.__anonCompField___anonunion_1006_193.pagecnt_bias + 1);
  #line 907 
  return skb;
}

#line 919  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_txrx.c"
static void ice_put_rx_buf(struct ice_ring *rx_ring, struct ice_rx_buf *rx_buf)
{
  #line 921 
  u32 ntc = (unsigned int)((int)rx_ring->next_to_clean + 1);
  #line 924 
  if ((unsigned int)rx_ring->count > ntc) 
                                          #line 924 
                                          ntc = ntc; else 
                                                          #line 924 
                                                          ntc = 0U;
  #line 925 
  rx_ring->next_to_clean = (unsigned short)ntc;
  #line 927 
  if (rx_buf == (struct ice_rx_buf *)0) 
                                        #line 928 
                                        return;
  #line 930 
  if ((int)ice_can_reuse_rx_page(rx_buf) != 0) {
    #line 932 
    ice_reuse_rx_page(rx_ring,rx_buf);
    #line 933 
    (rx_ring->__anonCompField_ice_ring_197.rx_stats.page_reuse_count) ++;
  }
  else {
    #line 936 
    ;
    #line 936 
    ;
    #line 936 
    dma_unmap_page_attrs(rx_ring->dev,rx_buf->dma,4096UL << ice_rx_pg_order(rx_ring),(enum dma_data_direction)DMA_FROM_DEVICE,34UL);
    #line 939 
    __page_frag_cache_drain(rx_buf->__anonCompField_ice_rx_buf_195.__anonCompField___anonunion_1006_193.page,(unsigned int)rx_buf->__anonCompField_ice_rx_buf_195.__anonCompField___anonunion_1006_193.pagecnt_bias);
  }
  #line 943 
  rx_buf->__anonCompField_ice_rx_buf_195.__anonCompField___anonunion_1006_193.page = (struct page *)0;
  #line 944 
  rx_buf->skb = (struct sk_buff *)0;
  #line 945 
  return;
}

#line 957  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_txrx.c"
static bool ice_is_non_eop(struct ice_ring *rx_ring, union ice_32b_rx_flex_desc *rx_desc, struct sk_buff *skb)
{
  #line 962 
  if ((long)((int)ice_test_staterr(rx_desc,(unsigned short)2) != 0) != 0L) 
    #line 963 
    return (_Bool)0;
  #line 966 
  (rx_ring->__anonCompField_ice_ring_196.rx_buf + (unsigned long)rx_ring->next_to_clean)->skb = skb;
  #line 967 
  (rx_ring->__anonCompField_ice_ring_197.rx_stats.non_eop_descs) ++;
  #line 969 
  return (_Bool)1;
}

#line 984  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_txrx.c"
static int ice_clean_rx_irq(struct ice_ring *rx_ring, int budget)
{
  #line 987 
  unsigned int tmp;
  #line 988 
  unsigned int xdp_res;
  #line 990 
  struct xdp_buff xdp;
  #line 991 
  bool failure;
  #line 1137 
  int tmp_11;
  #line 986 
  unsigned int total_rx_bytes = 0U;
  #line 986 
  unsigned int total_rx_pkts = 0U;
  #line 987 
  if ((int)rx_ring->next_to_clean <= (int)rx_ring->next_to_use) 
                                                                #line 987 
                                                                tmp = (unsigned int)rx_ring->count; else 
                                                                    #line 987 
                                                                    tmp = 0U;
  #line 987 
  u16 cleaned_count = (unsigned short)(((tmp + (unsigned int)rx_ring->next_to_clean) - (unsigned int)rx_ring->next_to_use) + 65535U);
  #line 988 
  unsigned int xdp_xmit = 0U;
  #line 989 
  struct bpf_prog *xdp_prog = (struct bpf_prog *)0;
  #line 993 
  xdp.rxq = & rx_ring->xdp_rxq;
  #line 996 
  while ((long)(total_rx_pkts < (unsigned int)budget) != 0L) {
    #line 1044 
    union __anonunion___u_5133 __u;
    #line 997 
    union ice_32b_rx_flex_desc *rx_desc;
    #line 998 
    struct ice_rx_buf *rx_buf;
    #line 999 
    struct sk_buff *skb;
    #line 1000 
    unsigned int size;
    #line 1001 
    u16 stat_err_bits;
    #line 1003 
    u8 rx_ptype;
    #line 1002 
    u16 vlan_tag = (unsigned short)0U;
    #line 1006 
    rx_desc = (union ice_32b_rx_flex_desc *)rx_ring->desc + (unsigned long)rx_ring->next_to_clean;
    #line 1013 
    stat_err_bits = (unsigned short)1U;
    #line 1014 
    if (! ice_test_staterr(rx_desc,(unsigned short)((int)stat_err_bits))) 
      #line 1015 
      break;
    #line 1016 
    ldv_inline_asm();
    #line 1023 
    size = (unsigned int)rx_desc->wb.pkt_len & 16383U;
    #line 1027 
    rx_buf = ice_get_rx_buf(rx_ring,& skb,size);
    #line 1029 
    if (size == 0U) {
      #line 1030 
      xdp.data = (void *)0;
      #line 1031 
      xdp.data_end = (void *)0;
      #line 1032 
      xdp.data_hard_start = (void *)0;
      #line 1033 
      xdp.data_meta = (void *)0;
      #line 1034 
      goto construct_skb;
    }
    #line 1037 
    xdp.data = lowmem_page_address(rx_buf->__anonCompField_ice_rx_buf_195.__anonCompField___anonunion_1006_193.page) + (unsigned long)rx_buf->__anonCompField_ice_rx_buf_195.__anonCompField___anonunion_1006_193.page_offset;
    #line 1038 
    xdp.data_hard_start = xdp.data + - ice_rx_offset(rx_ring);
    #line 1039 
    xdp.data_meta = xdp.data;
    #line 1040 
    xdp.data_end = xdp.data + (unsigned long)size;
    #line 1042 
    rcu_read_lock();
    #line 1043 
    __read_once_size((void *)(& rx_ring->xdp_prog),(void *)(& __u.__c),8);
    #line 1043 
    xdp_prog = (__u.__val);
    #line 1044 
    if (xdp_prog == (struct bpf_prog *)0) {
      #line 1045 
      rcu_read_unlock();
      #line 1046 
      goto construct_skb;
    }
    #line 1049 
    xdp_res = (unsigned int)ice_run_xdp(rx_ring,& xdp,xdp_prog);
    #line 1050 
    rcu_read_unlock();
    #line 1051 
    if (xdp_res == 0U) 
                       #line 1052 
                       goto construct_skb;
    #line 1053 
    if (((unsigned long)xdp_res & 6UL) != 0UL) {
      #line 1054 
      unsigned int truesize;
      #line 1057 
      truesize = (unsigned int)((4096UL << ice_rx_pg_order(rx_ring)) / 2UL);
      #line 1062 
      xdp_xmit |= xdp_res;
      #line 1063 
      ice_rx_buf_adjust_pg_offset(rx_buf,truesize);
    }
    else 
         #line 1065 
         rx_buf->__anonCompField_ice_rx_buf_195.__anonCompField___anonunion_1006_193.pagecnt_bias = (u16)((int)rx_buf->__anonCompField_ice_rx_buf_195.__anonCompField___anonunion_1006_193.pagecnt_bias + 1);
    #line 1067 
    total_rx_bytes += size;
    #line 1068 
    total_rx_pkts ++;
    #line 1070 
    cleaned_count = (u16)((int)cleaned_count + 1);
    #line 1071 
    ice_put_rx_buf(rx_ring,rx_buf);
    #line 1072 
    continue;
    #line 1073 
    construct_skb: 
                   #line 1073 
    ;
    #line 1074 
    if (skb != (struct sk_buff *)0) 
                                    #line 1075 
                                    ice_add_rx_frag(rx_ring,rx_buf,skb,size);
    else {
      #line 1076 
      if ((int)ice_ring_uses_build_skb(rx_ring) != 0) 
                                                      #line 1077 
                                                      skb = ice_build_skb(rx_ring,rx_buf,& xdp); else 
                                                                    #line 1079 
                                                                    skb = ice_construct_skb(rx_ring,rx_buf,& xdp);
    }
    #line 1082 
    if (skb == (struct sk_buff *)0) {
      #line 1083 
      (rx_ring->__anonCompField_ice_ring_197.rx_stats.alloc_buf_failed) ++;
      #line 1084 
      if (rx_buf != (struct ice_rx_buf *)0) 
                                            #line 1085 
                                            rx_buf->__anonCompField_ice_rx_buf_195.__anonCompField___anonunion_1006_193.pagecnt_bias = (u16)((int)rx_buf->__anonCompField_ice_rx_buf_195.__anonCompField___anonunion_1006_193.pagecnt_bias + 1);
      #line 1086 
      break;
    }
    #line 1089 
    ice_put_rx_buf(rx_ring,rx_buf);
    #line 1090 
    cleaned_count = (u16)((int)cleaned_count + 1);
    #line 1093 
    if ((int)ice_is_non_eop(rx_ring,rx_desc,skb) != 0) 
                                                       #line 1094 
                                                       continue;
    #line 1096 
    stat_err_bits = (unsigned short)1024U;
    #line 1097 
    if ((long)((int)ice_test_staterr(rx_desc,(unsigned short)((int)stat_err_bits)) != 0) != 0L) {
      #line 1098 
      dev_kfree_skb_any(skb);
      #line 1099 
      continue;
    }
    #line 1102 
    stat_err_bits = (unsigned short)8192U;
    #line 1103 
    if ((int)ice_test_staterr(rx_desc,(unsigned short)((int)stat_err_bits)) != 0) 
      #line 1104 
      vlan_tag = rx_desc->wb.l2tag1;
    #line 1107 
    if (eth_skb_pad(skb) != 0) {
      #line 1108 
      skb = (struct sk_buff *)0;
      #line 1109 
      continue;
    }
    #line 1113 
    total_rx_bytes = skb->len + total_rx_bytes;
    #line 1116 
    rx_ptype = (unsigned char)rx_desc->wb.ptype_flex_flags0;
    #line 1119 
    ice_process_skb_fields(rx_ring,rx_desc,skb,(unsigned char)((int)rx_ptype));
    #line 1122 
    ice_receive_skb(rx_ring,skb,(unsigned short)((int)vlan_tag));
    #line 1125 
    total_rx_pkts ++;
  }
  #line 1129 
  failure = ice_alloc_rx_bufs(rx_ring,(unsigned short)((int)cleaned_count));
  #line 1131 
  if (xdp_prog != (struct bpf_prog *)0) 
                                        #line 1132 
                                        ice_finalize_xdp_rx(rx_ring,xdp_xmit);
  #line 1134 
  ice_update_rx_ring_stats(rx_ring,(unsigned long long)total_rx_pkts,(unsigned long long)total_rx_bytes);
  #line 1137 
  if ((int)failure != 0) 
                         #line 1137 
                         tmp_11 = budget; else 
                                               #line 1137 
                                               tmp_11 = (int)total_rx_pkts;
  #line 1137 
  return tmp_11;
}

#line 1164  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_txrx.c"
static unsigned int ice_adjust_itr_by_size_and_speed(struct ice_port_info *port_info, unsigned int avg_pkt_size, unsigned int itr)
{
  #line 1168 
  switch ((int)port_info->phy.link_info.link_speed) {
    #line 1169 
    case 1024: 
               #line 1169 
    ;
    #line 1170 
    itr = (avg_pkt_size * 18U + 1047U) / (avg_pkt_size + 640U) + itr;
    #line 1172 
    break;
    #line 1173 
    case 512: 
              #line 1173 
    ;
    #line 1174 
    itr = (avg_pkt_size * 35U + 1455U) / (avg_pkt_size + 640U) + itr;
    #line 1176 
    break;
    #line 1177 
    case 256: 
              #line 1177 
    ;
    #line 1178 
    itr = (avg_pkt_size * 44U + 1671U) / (avg_pkt_size + 640U) + itr;
    #line 1180 
    break;
    #line 1181 
    case 128: 
              #line 1181 
    ;
    #line 1182 
    itr = (avg_pkt_size * 69U + 2271U) / (avg_pkt_size + 640U) + itr;
    #line 1184 
    break;
    #line 1185 
    case 64: 
             #line 1185 
    ;
    #line 1186 
    itr = (avg_pkt_size * 86U + 2679U) / (avg_pkt_size + 640U) + itr;
    #line 1188 
    break;
    #line 1189 
    case 32: 
             #line 1189 
    ;
    #line 1191 
    default: 
             #line 1191 
    ;
    #line 1192 
    itr = (avg_pkt_size * 171U + 4719U) / (avg_pkt_size + 640U) + itr;
    #line 1194 
    break;
  }
  #line 1197 
  if ((itr & 8190U) > 250U) {
    #line 1198 
    itr &= 32768U;
    #line 1199 
    itr += 250U;
  }
  #line 1202 
  return itr;
}

#line 1219  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_txrx.c"
static void ice_update_itr(struct ice_q_vector *q_vector, struct ice_ring_container *rc)
{
  #line 1222 
  unsigned int packets;
  #line 1222 
  unsigned int bytes;
  #line 1222 
  unsigned int itr;
  #line 1223 
  bool container_is_rx;
  #line 1221 
  unsigned long next_update = jiffies;
  #line 1225 
  if (rc->ring == (struct ice_ring *)0 || ((int)rc->itr_setting & 32768) == 0) 
    #line 1226 
    return;
  #line 1234 
  if ((unsigned int)q_vector->itr_countdown != 0U) {
    #line 1235 
    itr = (unsigned int)rc->target_itr;
    #line 1236 
    goto clear_counts;
  }
  #line 1239 
  container_is_rx = (_Bool)(& q_vector->rx == rc);
  #line 1243 
  if ((int)container_is_rx != 0) 
                                 #line 1243 
                                 itr = 32770U; else 
                                                    #line 1243 
                                                    itr = 33018U;
  {
    #line 1252 
    unsigned long __dummy;
    #line 1252 
    unsigned long __dummy2;
    }
  #line 1252 
  if (1 != 0) {
    {
      #line 1252 
      unsigned long __dummy_0;
      #line 1252 
      unsigned long __dummy2_0;
      }
    #line 1252 
    if (1 != 0) 
      #line 1252 
      if ((long)(rc->next_update - next_update) < 0L) 
                                                      #line 1253 
                                                      goto clear_counts;
  }
  #line 1255 
  __builtin_prefetch((void const *)((void *)(q_vector->vsi)->port_info));
  #line 1257 
  packets = rc->total_pkts;
  #line 1258 
  bytes = rc->total_bytes;
  #line 1260 
  if ((int)container_is_rx != 0) {
    #line 1266 
    if ((packets + 4294967295U <= 2U && bytes <= 8999U) && ((int)q_vector->tx.target_itr & 32768) != 0) {
      #line 1268 
      itr = 32768U;
      #line 1269 
      goto adjust_by_size_and_speed;
    }
  }
  else 
    #line 1271 
    if (packets <= 3U) {
      #line 1277 
      if ((unsigned int)rc->target_itr == 250U && ((int)q_vector->rx.target_itr & 8190) == 250) 
        #line 1280 
        goto clear_counts;
    }
    else 
      #line 1281 
      if (packets > 32U) 
                         #line 1285 
                         rc->target_itr = (unsigned short)((unsigned int)rc->target_itr & 32767U);
  #line 1296 
  if (packets <= 55U) {
    #line 1297 
    itr = (unsigned int)((int)rc->target_itr + 2);
    #line 1298 
    if ((itr & 8190U) > 250U) {
      #line 1299 
      itr &= 32768U;
      #line 1300 
      itr += 250U;
    }
    #line 1302 
    goto clear_counts;
  }
  #line 1305 
  if (packets <= 256U) {
    #line 1306 
    u16 __UNIQUE_ID___x550;
    #line 1306 
    int tmp_1;
    {
      #line 1306 
      __UNIQUE_ID___x550 = q_vector->tx.current_itr;
      #line 1306 
      u16 __UNIQUE_ID___y551 = q_vector->rx.current_itr;
      #line 1306 
      if ((int)__UNIQUE_ID___x550 < (int)__UNIQUE_ID___y551) 
                                                             #line 1306 
                                                             tmp_1 = (int)__UNIQUE_ID___x550; else 
                                                                    #line 1306 
                                                                    tmp_1 = (int)__UNIQUE_ID___y551;
      }
    #line 1306 
    itr = (unsigned int)tmp_1;
    #line 1307 
    itr &= 8190U;
    #line 1313 
    if (packets <= 112U) 
                         #line 1314 
                         goto clear_counts;
    #line 1321 
    itr >>= 1;
    #line 1322 
    itr &= 8190U;
    #line 1323 
    if (itr <= 1U) 
                   #line 1324 
                   itr = 2U;
    #line 1326 
    goto clear_counts;
  }
  #line 1335 
  itr = 0U;
  #line 1337 
  adjust_by_size_and_speed: 
                            #line 1337 
  ;
  #line 1340 
  itr = ice_adjust_itr_by_size_and_speed((q_vector->vsi)->port_info,bytes / packets,itr);
  #line 1343 
  clear_counts: 
                #line 1343 
  ;
  #line 1345 
  rc->target_itr = (unsigned short)itr;
  #line 1348 
  rc->next_update = next_update + 1UL;
  #line 1350 
  rc->total_bytes = 0U;
  #line 1351 
  rc->total_pkts = 0U;
  #line 1352 
  return;
}

#line 1359  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_txrx.c"
static u32 ice_buildreg_itr(u16 itr_idx, u16 itr)
{
  #line 1368 
  itr = (unsigned short)((unsigned int)itr & 8190U);
  #line 1371 
  return (unsigned int)((((int)itr_idx << 3) | 3) | ((int)itr << 4));
}

#line 1388  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_txrx.c"
static void ice_update_ena_itr(struct ice_q_vector *q_vector)
{
  #line 1393 
  u32 itr_val;
  #line 1390 
  struct ice_ring_container *tx = & q_vector->tx;
  #line 1391 
  struct ice_ring_container *rx = & q_vector->rx;
  #line 1392 
  struct ice_vsi *vsi = q_vector->vsi;
  #line 1399 
  if ((unsigned int)q_vector->itr_countdown == 255U) {
    #line 1400 
    itr_val = ice_buildreg_itr((unsigned short)((int)rx->itr_idx),(unsigned short)2);
    #line 1401 
    writel(itr_val,(void *)((vsi->back)->hw.hw_addr + (unsigned long)(((int)q_vector->reg_idx + 360448) * 4)));
    #line 1403 
    rx->target_itr = rx->itr_setting;
    #line 1405 
    rx->current_itr = (unsigned short)(((int)rx->itr_setting & -32768) | 2);
    #line 1408 
    q_vector->itr_countdown = (unsigned char)0U;
    #line 1409 
    return;
  }
  #line 1413 
  ice_update_itr(q_vector,tx);
  #line 1414 
  ice_update_itr(q_vector,rx);
  #line 1424 
  if ((int)rx->target_itr < (int)rx->current_itr) {
    #line 1426 
    itr_val = ice_buildreg_itr((unsigned short)((int)rx->itr_idx),(unsigned short)((int)rx->target_itr));
    #line 1427 
    rx->current_itr = rx->target_itr;
    #line 1428 
    q_vector->itr_countdown = (unsigned char)3U;
  }
  else 
    #line 1429 
    if ((int)tx->target_itr < (int)tx->current_itr || (int)rx->target_itr - (int)rx->current_itr < (int)tx->target_itr - (int)tx->current_itr) {
      #line 1435 
      itr_val = ice_buildreg_itr((unsigned short)((int)tx->itr_idx),(unsigned short)((int)tx->target_itr));
      #line 1436 
      tx->current_itr = tx->target_itr;
      #line 1437 
      q_vector->itr_countdown = (unsigned char)3U;
    }
    else 
      #line 1438 
      if ((int)rx->current_itr != (int)rx->target_itr) {
        #line 1440 
        itr_val = ice_buildreg_itr((unsigned short)((int)rx->itr_idx),(unsigned short)((int)rx->target_itr));
        #line 1441 
        rx->current_itr = rx->target_itr;
        #line 1442 
        q_vector->itr_countdown = (unsigned char)3U;
      }
      else {
        #line 1445 
        itr_val = ice_buildreg_itr((unsigned short)3,(unsigned short)0);
        #line 1446 
        if ((unsigned int)q_vector->itr_countdown != 0U) 
                                                         #line 1447 
                                                         q_vector->itr_countdown = (u8)((int)q_vector->itr_countdown - 1);
      }
  #line 1450 
  if (! test_bit(1L,(unsigned long *)(& (q_vector->vsi)->state))) 
                                                                  #line 1451 
                                                                  writel(itr_val,(void *)(((q_vector->vsi)->back)->hw.hw_addr + (unsigned long)(((int)q_vector->reg_idx + 360448) * 4)));
  #line 1452 
  return;
}

#line 1470  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_txrx.c"
static void ice_set_wb_on_itr(struct ice_q_vector *q_vector)
{
  #line 1472 
  struct ice_vsi *vsi = q_vector->vsi;
  #line 1475 
  if ((unsigned int)q_vector->itr_countdown == 255U) 
                                                     #line 1476 
                                                     return;
  #line 1478 
  if ((unsigned int)q_vector->num_ring_rx != 0U) 
                                                 #line 1479 
                                                 writel(3221225504U,(void *)((vsi->back)->hw.hw_addr + (unsigned long)(((int)q_vector->reg_idx + 360448) * 4)));
  #line 1483 
  if ((unsigned int)q_vector->num_ring_tx != 0U) 
                                                 #line 1484 
                                                 writel(3221225512U,(void *)((vsi->back)->hw.hw_addr + (unsigned long)(((int)q_vector->reg_idx + 360448) * 4)));
  #line 1488 
  q_vector->itr_countdown = (unsigned char)255U;
  #line 1489 
  return;
}

#line 1500  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_txrx.c"
int ice_napi_poll(struct napi_struct *napi, int budget)
{
  #line 1503 
  void *__mptr;
  #line 1564 
  int __UNIQUE_ID___x554;
  #line 1564 
  int tmp_8;
  #line 1505 
  struct ice_ring *ring;
  #line 1506 
  int budget_per_ring;
  #line 1503 
  __mptr = (void *)napi;
  #line 1502 
  struct ice_q_vector *q_vector = ((struct ice_q_vector *)(__mptr + 18446744073709551600U));
  #line 1504 
  bool clean_complete = (_Bool)1;
  #line 1507 
  int work_done = 0;
  #line 1512 
  ring = q_vector->tx.ring;
  #line 1512 
  while (ring != (struct ice_ring *)0) {
    {
      #line 1513 
      int tmp_2;
      #line 1513 
      if (ring->xsk_umem != (struct xdp_umem *)0) {
        #line 1513 
        tmp_2 = (int)ice_clean_tx_irq_zc(ring,budget) != 0;
      }
      else {
        #line 1513 
        tmp_2 = (int)ice_clean_tx_irq(ring,budget) != 0;
      }
      #line 1513 
      bool wd = (_Bool)(tmp_2 != 0);
      #line 1517 
      if (! wd) 
                #line 1518 
                clean_complete = (_Bool)0;
    }
    #line 1512 
    ring = ring->next;
  }
  #line 1522 
  if ((long)(budget <= 0) != 0L) 
                                 #line 1523 
                                 return budget;
  #line 1526 
  if ((long)((unsigned int)q_vector->num_ring_rx > 1U) != 0L) {
    #line 1531 
    int tmp_3;
    #line 1531 
    int __UNIQUE_ID___x552;
    {
      #line 1531 
      __UNIQUE_ID___x552 = budget / (int)q_vector->num_ring_rx;
      #line 1531 
      int __UNIQUE_ID___y553 = 1;
      #line 1531 
      if (__UNIQUE_ID___x552 > __UNIQUE_ID___y553) 
                                                   #line 1531 
                                                   tmp_3 = __UNIQUE_ID___x552; else 
                                                                    #line 1531 
                                                                    tmp_3 = __UNIQUE_ID___y553;
      }
    #line 1531 
    budget_per_ring = tmp_3;
  }
  else 
       #line 1534 
       budget_per_ring = budget;
  #line 1536 
  ring = q_vector->rx.ring;
  #line 1536 
  while (ring != (struct ice_ring *)0) {
    {
      #line 1537 
      int cleaned;
      #line 1543 
      if (ring->xsk_umem != (struct xdp_umem *)0) 
                                                  #line 1543 
                                                  cleaned = ice_clean_rx_irq_zc(ring,budget_per_ring); else 
                                                                    #line 1544 
                                                                    cleaned = ice_clean_rx_irq(ring,budget_per_ring);
      #line 1546 
      work_done += cleaned;
      #line 1548 
      if (cleaned >= budget_per_ring) 
                                      #line 1549 
                                      clean_complete = (_Bool)0;
    }
    #line 1536 
    ring = ring->next;
  }
  #line 1553 
  if (! clean_complete) 
                        #line 1554 
                        return budget;
  #line 1559 
  if ((long)((int)napi_complete_done(napi,work_done) != 0) != 0L) 
                                                                  #line 1560 
                                                                  ice_update_ena_itr(q_vector); else 
                                                                    #line 1562 
                                                                    ice_set_wb_on_itr(q_vector);
  {
    #line 1564 
    __UNIQUE_ID___x554 = work_done;
    #line 1564 
    int __UNIQUE_ID___y555 = budget + -1;
    #line 1564 
    if (__UNIQUE_ID___x554 < __UNIQUE_ID___y555) 
                                                 #line 1564 
                                                 tmp_8 = __UNIQUE_ID___x554; else 
                                                                    #line 1564 
                                                                    tmp_8 = __UNIQUE_ID___y555;
    }
  #line 1564 
  return tmp_8;
}

#line 1574  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_txrx.c"
static int __ice_maybe_stop_tx(struct ice_ring *tx_ring, unsigned int size)
{
  #line 1581 
  int tmp;
  #line 1576 
  netif_stop_subqueue(tx_ring->netdev,(unsigned short)((int)tx_ring->q_index));
  #line 1577 
  ldv_inline_asm();
  #line 1581 
  if ((int)tx_ring->next_to_clean <= (int)tx_ring->next_to_use) 
                                                                #line 1581 
                                                                tmp = (int)tx_ring->count; else 
                                                                    #line 1581 
                                                                    tmp = 0;
  #line 1581 
  ;
  #line 1581 
  if ((long)((unsigned int)(((tmp + (int)tx_ring->next_to_clean) - (int)tx_ring->next_to_use) + -1) < size) != 0L) 
    #line 1582 
    return -16;
  #line 1585 
  netif_start_subqueue(tx_ring->netdev,(unsigned short)((int)tx_ring->q_index));
  #line 1586 
  (tx_ring->__anonCompField_ice_ring_197.tx_stats.restart_q) ++;
  #line 1587 
  return 0;
}

#line 1597  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_txrx.c"
static int ice_maybe_stop_tx(struct ice_ring *tx_ring, unsigned int size)
{
  #line 1599 
  int tmp;
  #line 1599 
  if ((int)tx_ring->next_to_clean <= (int)tx_ring->next_to_use) 
                                                                #line 1599 
                                                                tmp = (int)tx_ring->count; else 
                                                                    #line 1599 
                                                                    tmp = 0;
  #line 1599 
  ;
  #line 1599 
  if ((long)((unsigned int)(((tmp + (int)tx_ring->next_to_clean) - (int)tx_ring->next_to_use) + -1) >= size) != 0L) 
    #line 1600 
    return 0;
  #line 1602 
  return __ice_maybe_stop_tx(tx_ring,size);
}

#line 1616  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_txrx.c"
static void ice_tx_map(struct ice_ring *tx_ring, struct ice_tx_buf *first, struct ice_tx_offload_params *off)
{
  #line 1619 
  u64 td_offset;
  #line 1619 
  u64 td_tag;
  #line 1619 
  u64 td_cmd;
  #line 1621 
  skb_frag_t *frag;
  #line 1622 
  unsigned int data_len;
  #line 1622 
  unsigned int size;
  #line 1623 
  struct ice_tx_desc *tx_desc;
  #line 1624 
  struct ice_tx_buf *tx_buf;
  #line 1625 
  struct sk_buff *skb;
  #line 1626 
  dma_addr_t dma;
  #line 1620 
  u16 i = tx_ring->next_to_use;
  #line 1628 
  td_tag = (unsigned long long)off->td_l2tag1;
  #line 1629 
  td_cmd = (unsigned long long)off->td_cmd;
  #line 1630 
  td_offset = (unsigned long long)off->td_offset;
  #line 1631 
  skb = first->__anonCompField_ice_tx_buf_192.skb;
  #line 1633 
  data_len = skb->data_len;
  #line 1634 
  size = skb_headlen(skb);
  #line 1636 
  tx_desc = (struct ice_tx_desc *)tx_ring->desc + (unsigned long)i;
  #line 1638 
  if (((unsigned long)first->tx_flags & 2UL) != 0UL) {
    #line 1639 
    td_cmd |= 8ULL;
    #line 1640 
    td_tag = (unsigned long long)(first->tx_flags >> 16);
  }
  #line 1644 
  dma = dma_map_single_attrs(tx_ring->dev,(void *)skb->data,(unsigned long)size,(enum dma_data_direction)DMA_TO_DEVICE,0UL);
  #line 1646 
  tx_buf = first;
  #line 1648 
  frag = & ((struct skb_shared_info *)skb_end_pointer(skb))->frags[0];
  #line 1648 
  while (1) {
    {
      #line 1649 
      unsigned int max_data = 12288U;
      #line 1651 
      if (dma_mapping_error(tx_ring->dev,dma) != 0) 
                                                    #line 1652 
                                                    goto dma_error;
      #line 1655 
      tx_buf->len = size;
      #line 1656 
      tx_buf->dma = dma;
      #line 1659 
      max_data = (- ((unsigned int)dma) & 4095U) + max_data;
      #line 1660 
      tx_desc->buf_addr = dma;
      #line 1665 
      while ((long)(size > 16383U) != 0L) {
        #line 1666 
        tx_desc->cmd_type_offset_bsz = build_ctob(td_cmd,td_offset,max_data,td_tag);
        #line 1669 
        tx_desc ++;
        #line 1670 
        i = (u16)((int)i + 1);
        #line 1672 
        if ((int)tx_ring->count == (int)i) {
          #line 1673 
          tx_desc = (struct ice_tx_desc *)tx_ring->desc;
          #line 1674 
          i = (unsigned short)0U;
        }
        #line 1677 
        dma = (unsigned long long)max_data + dma;
        #line 1678 
        size -= max_data;
        #line 1680 
        max_data = 12288U;
        #line 1681 
        tx_desc->buf_addr = dma;
      }
      #line 1684 
      if ((long)(data_len == 0U) != 0L) 
                                        #line 1685 
                                        break;
      #line 1687 
      tx_desc->cmd_type_offset_bsz = build_ctob(td_cmd,td_offset,size,td_tag);
      #line 1690 
      tx_desc ++;
      #line 1691 
      i = (u16)((int)i + 1);
      #line 1693 
      if ((int)tx_ring->count == (int)i) {
        #line 1694 
        tx_desc = (struct ice_tx_desc *)tx_ring->desc;
        #line 1695 
        i = (unsigned short)0U;
      }
      #line 1698 
      size = skb_frag_size(frag);
      #line 1699 
      data_len -= size;
      #line 1701 
      dma = skb_frag_dma_map(tx_ring->dev,frag,0UL,(unsigned long)size,(enum dma_data_direction)DMA_TO_DEVICE);
      #line 1704 
      tx_buf = tx_ring->__anonCompField_ice_ring_196.tx_buf + (unsigned long)i;
    }
    #line 1648 
    frag ++;
  }
  #line 1708 
  ;
  #line 1708 
  netdev_tx_sent_queue(txring_txq(tx_ring),first->bytecount);
  #line 1711 
  skb_tx_timestamp(first->__anonCompField_ice_tx_buf_192.skb);
  #line 1713 
  i = (u16)((int)i + 1);
  #line 1714 
  if ((int)tx_ring->count == (int)i) 
                                     #line 1715 
                                     i = (unsigned short)0U;
  #line 1718 
  td_cmd |= 3ULL;
  #line 1719 
  tx_desc->cmd_type_offset_bsz = build_ctob(td_cmd,td_offset,size,td_tag);
  #line 1720 
  ldv_inline_asm();
  #line 1731 
  first->next_to_watch = tx_desc;
  #line 1733 
  tx_ring->next_to_use = i;
  #line 1735 
  ice_maybe_stop_tx(tx_ring,23U);
  #line 1738 
  if ((int)netif_xmit_stopped(txring_txq(tx_ring)) != 0) 
                                                         #line 1739 
                                                         writel((unsigned int)i,(void *)tx_ring->tail);
  else {
    #line 1738 
    if (! netdev_xmit_more()) 
                              #line 1739 
                              writel((unsigned int)i,(void *)tx_ring->tail);
  }
  #line 1742 
  return;
  #line 1744 
  dma_error: 
             #line 1744 
  ;
  #line 1746 
  while (1) {
    #line 1747 
    tx_buf = tx_ring->__anonCompField_ice_ring_196.tx_buf + (unsigned long)i;
    #line 1748 
    ice_unmap_and_free_tx_buf(tx_ring,tx_buf);
    #line 1749 
    if (tx_buf == first) 
                         #line 1750 
                         break;
    #line 1751 
    if ((unsigned int)i == 0U) 
                               #line 1752 
                               i = tx_ring->count;
    #line 1753 
    i = (u16)((int)i - 1);
  }
  #line 1756 
  tx_ring->next_to_use = i;
  #line 1757 
  return;
}

#line 1767  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_txrx.c"
static int ice_tx_csum(struct ice_tx_buf *first, struct ice_tx_offload_params *off)
{
  #line 1775 
  union __anonunion_ip_5136 ip;
  #line 1779 
  union __anonunion_l4_5137 l4;
  #line 1780 
  __be16 frag_off;
  #line 1780 
  __be16 protocol;
  #line 1781 
  unsigned char *exthdr;
  #line 1782 
  u32 offset;
  #line 1769 
  u32 l4_len = 0U;
  #line 1769 
  u32 l3_len = 0U;
  #line 1769 
  u32 l2_len = 0U;
  #line 1770 
  struct sk_buff *skb = first->__anonCompField_ice_tx_buf_192.skb;
  #line 1782 
  u32 cmd = 0U;
  #line 1783 
  u8 l4_proto = (unsigned char)0U;
  #line 1785 
  if ((unsigned int)skb->ip_summed != 3U) 
                                          #line 1786 
                                          return 0;
  #line 1788 
  ip.hdr = skb_network_header(skb);
  #line 1789 
  l4.hdr = skb_transport_header(skb);
  #line 1792 
  l2_len = (unsigned int)(ip.hdr - skb->data);
  #line 1793 
  offset = l2_len / 2U;
  #line 1795 
  if ((unsigned int)skb->encapsulation != 0U) 
                                              #line 1796 
                                              return -1;
  #line 1799 
  protocol = vlan_get_protocol(skb);
  #line 1800 
  if ((unsigned int)protocol == 8U) {
    #line 1801 
    l4_proto = (ip.v4)->protocol;
    #line 1805 
    if (((unsigned long)first->tx_flags & 1UL) != 0UL) 
                                                       #line 1806 
                                                       cmd |= 96U; else 
                                                                    #line 1808 
                                                                    cmd |= 64U;
  }
  else 
    #line 1810 
    if ((unsigned int)protocol == 56710U) {
      #line 1811 
      cmd |= 32U;
      #line 1812 
      exthdr = ip.hdr + 40UL;
      #line 1813 
      l4_proto = (ip.v6)->nexthdr;
      #line 1814 
      if (l4.hdr != exthdr) 
                            #line 1815 
                            ipv6_skip_exthdr(skb,(int)(exthdr - skb->data),& l4_proto,& frag_off);
    }
    else 
         #line 1818 
         return -1;
  #line 1822 
  l3_len = (unsigned int)(l4.hdr - ip.hdr);
  #line 1823 
  offset = (l3_len / 4U << 7) | offset;
  #line 1826 
  switch ((int)l4_proto) {
    #line 1827 
    case 6: 
            #line 1827 
    ;
    #line 1829 
    cmd |= 256U;
    #line 1830 
    l4_len = (unsigned int)(l4.tcp)->doff;
    #line 1831 
    offset = (l4_len << 14) | offset;
    #line 1832 
    break;
    #line 1833 
    case 17: 
             #line 1833 
    ;
    #line 1835 
    cmd |= 768U;
    #line 1836 
    l4_len = 2U;
    #line 1837 
    offset = (l4_len << 14) | offset;
    #line 1838 
    break;
    #line 1839 
    case 132: 
              #line 1839 
    ;
    #line 1841 
    cmd |= 512U;
    #line 1842 
    l4_len = 3U;
    #line 1843 
    offset = (l4_len << 14) | offset;
    #line 1844 
    break;
    #line 1846 
    default: 
             #line 1846 
    ;
    #line 1847 
    if (((unsigned long)first->tx_flags & 1UL) != 0UL) 
                                                       #line 1848 
                                                       return -1;
    #line 1849 
    skb_checksum_help(skb);
    #line 1850 
    return 0;
  }
  #line 1853 
  off->td_cmd |= cmd;
  #line 1854 
  off->td_offset |= offset;
  #line 1855 
  return 1;
}

#line 1870  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_txrx.c"
static int ice_tx_prepare_vlan_flags(struct ice_ring *tx_ring, struct ice_tx_buf *first)
{
  #line 1872 
  struct sk_buff *skb = first->__anonCompField_ice_tx_buf_192.skb;
  #line 1873 
  __be16 protocol = skb->protocol;
  #line 1875 
  if ((unsigned int)protocol == 129U && ((tx_ring->netdev)->features & 128ULL) == 0ULL) {
    #line 1884 
    skb->protocol = vlan_get_protocol(skb);
    #line 1885 
    return 0;
  }
  #line 1889 
  if ((unsigned int)skb->vlan_present != 0U) {
    #line 1890 
    first->tx_flags |= (unsigned int)((int)skb->vlan_tci << 16);
    #line 1891 
    first->tx_flags |= 2U;
  }
  else 
    #line 1892 
    if ((unsigned int)protocol == 129U) {
      #line 1893 
      struct vlan_hdr *vhdr;
      #line 1893 
      struct vlan_hdr _vhdr;
      #line 1896 
      vhdr = (struct vlan_hdr *)skb_header_pointer(skb,14,4,(void *)(& _vhdr));
      #line 1899 
      if (vhdr == (struct vlan_hdr *)0) 
                                        #line 1900 
                                        return -22;
      #line 1902 
      first->tx_flags |= (unsigned int)((int)__builtin_bswap16((unsigned short)((int)vhdr->h_vlan_TCI)) << 16);
      #line 1904 
      first->tx_flags |= 4U;
    }
  #line 1907 
  return ice_tx_prepare_vlan_flags_dcb(tx_ring,first);
}

#line 1918  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_txrx.c"
static int ice_tso(struct ice_tx_buf *first, struct ice_tx_offload_params *off)
{
  #line 1925 
  union __anonunion_ip_5140 ip;
  #line 1929 
  union __anonunion_l4_5141 l4;
  #line 1930 
  u64 cd_mss;
  #line 1930 
  u64 cd_tso_len;
  #line 1931 
  u32 paylen;
  #line 1931 
  u32 l4_start;
  #line 1932 
  int err;
  #line 1920 
  struct sk_buff *skb = first->__anonCompField_ice_tx_buf_192.skb;
  #line 1934 
  if ((unsigned int)skb->ip_summed != 3U) 
                                          #line 1935 
                                          return 0;
  #line 1937 
  if (! skb_is_gso(skb)) 
                         #line 1938 
                         return 0;
  #line 1940 
  err = skb_cow_head(skb,0U);
  #line 1941 
  if (err < 0) 
               #line 1942 
               return err;
  #line 1945 
  ip.hdr = skb_network_header(skb);
  #line 1946 
  l4.hdr = skb_transport_header(skb);
  #line 1949 
  if ((unsigned int)(ip.v4)->version == 4U) {
    #line 1950 
    (ip.v4)->tot_len = (unsigned short)0U;
    #line 1951 
    (ip.v4)->check = (unsigned short)0U;
  }
  else 
       #line 1953 
       (ip.v6)->payload_len = (unsigned short)0U;
  #line 1957 
  l4_start = (unsigned int)(l4.hdr - skb->data);
  #line 1960 
  paylen = skb->len - l4_start;
  #line 1961 
  ;
  #line 1961 
  csum_replace_by_diff(& (l4.tcp)->check,__builtin_bswap32(paylen));
  #line 1964 
  off->header_len = (unsigned char)((unsigned int)((unsigned char)(l4.tcp)->doff) * 4U + (unsigned int)((unsigned char)l4_start));
  #line 1967 
  first->gso_segs = ((struct skb_shared_info *)skb_end_pointer(skb))->gso_segs;
  #line 1968 
  first->bytecount += (unsigned int)(((int)first->gso_segs + -1) * (int)off->header_len);
  #line 1970 
  cd_tso_len = (unsigned long long)(skb->len - (unsigned int)off->header_len);
  #line 1971 
  cd_mss = (unsigned long long)((struct skb_shared_info *)skb_end_pointer(skb))->gso_size;
  #line 1974 
  off->cd_qw1 = (off->cd_qw1 | ((cd_tso_len << 30) | (cd_mss << 50))) | 17ULL;
  #line 1978 
  first->tx_flags |= 1U;
  #line 1979 
  return 1;
}

#line 2010  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_txrx.c"
static unsigned int ice_txd_use_count(unsigned int size)
{
  #line 2012 
  return (size * 85U >> 20) + 1U;
}

#line 2021  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_txrx.c"
static unsigned int ice_xmit_desc_count(struct sk_buff *skb)
{
  #line 2023 
  skb_frag_t *frag = & ((struct skb_shared_info *)skb_end_pointer(skb))->frags[0];
  #line 2024 
  unsigned int nr_frags = (unsigned int)((struct skb_shared_info *)skb_end_pointer(skb))->nr_frags;
  #line 2025 
  unsigned int count = 0U;
  #line 2025 
  unsigned int size = skb_headlen(skb);
  #line 2027 
  while (1) {
    #line 2030 
    unsigned int tmp_3;
    #line 2033 
    skb_frag_t *tmp_4;
    #line 2028 
    count = ice_txd_use_count(size) + count;
    #line 2030 
    tmp_3 = nr_frags;
    #line 2030 
    nr_frags --;
    #line 2030 
    ;
    #line 2030 
    if (tmp_3 == 0U) 
                     #line 2031 
                     break;
    #line 2033 
    tmp_4 = frag;
    #line 2033 
    frag ++;
    #line 2033 
    ;
    #line 2033 
    size = skb_frag_size(tmp_4);
  }
  #line 2036 
  return count;
}

#line 2052  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_txrx.c"
static bool __ice_chk_linearize(struct sk_buff *skb)
{
  #line 2054 
  skb_frag_t *frag;
  #line 2054 
  skb_frag_t *stale;
  #line 2055 
  int nr_frags;
  #line 2055 
  int sum;
  #line 2077 
  skb_frag_t *tmp_2;
  #line 2078 
  skb_frag_t *tmp_4;
  #line 2079 
  skb_frag_t *tmp_6;
  #line 2080 
  skb_frag_t *tmp_8;
  #line 2081 
  skb_frag_t *tmp_10;
  #line 2058 
  nr_frags = (int)((struct skb_shared_info *)skb_end_pointer(skb))->nr_frags;
  #line 2059 
  if (nr_frags <= 6) 
                     #line 2060 
                     return (_Bool)0;
  #line 2065 
  nr_frags += -6;
  #line 2066 
  frag = & ((struct skb_shared_info *)skb_end_pointer(skb))->frags[0];
  #line 2074 
  sum = 1 - (int)((struct skb_shared_info *)skb_end_pointer(skb))->gso_size;
  #line 2077 
  tmp_2 = frag;
  #line 2077 
  frag ++;
  #line 2077 
  ;
  #line 2077 
  sum = (int)(skb_frag_size(tmp_2) + (unsigned int)sum);
  #line 2078 
  tmp_4 = frag;
  #line 2078 
  frag ++;
  #line 2078 
  ;
  #line 2078 
  sum = (int)(skb_frag_size(tmp_4) + (unsigned int)sum);
  #line 2079 
  tmp_6 = frag;
  #line 2079 
  frag ++;
  #line 2079 
  ;
  #line 2079 
  sum = (int)(skb_frag_size(tmp_6) + (unsigned int)sum);
  #line 2080 
  tmp_8 = frag;
  #line 2080 
  frag ++;
  #line 2080 
  ;
  #line 2080 
  sum = (int)(skb_frag_size(tmp_8) + (unsigned int)sum);
  #line 2081 
  tmp_10 = frag;
  #line 2081 
  frag ++;
  #line 2081 
  ;
  #line 2081 
  sum = (int)(skb_frag_size(tmp_10) + (unsigned int)sum);
  #line 2086 
  stale = & ((struct skb_shared_info *)skb_end_pointer(skb))->frags[0];
  #line 2087 
  while (1) {
    #line 2088 
    skb_frag_t *tmp_13;
    #line 2094 
    int tmp_15;
    #line 2097 
    skb_frag_t *tmp_16;
    #line 2088 
    tmp_13 = frag;
    #line 2088 
    frag ++;
    #line 2088 
    ;
    #line 2088 
    sum = (int)(skb_frag_size(tmp_13) + (unsigned int)sum);
    #line 2091 
    if (sum < 0) 
                 #line 2092 
                 return (_Bool)1;
    #line 2094 
    tmp_15 = nr_frags;
    #line 2094 
    nr_frags --;
    #line 2094 
    ;
    #line 2094 
    if (tmp_15 == 0) 
                     #line 2095 
                     break;
    #line 2097 
    tmp_16 = stale;
    #line 2097 
    stale ++;
    #line 2097 
    ;
    #line 2097 
    sum = (int)((unsigned int)sum - skb_frag_size(tmp_16));
  }
  #line 2100 
  return (_Bool)0;
}

#line 2112  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_txrx.c"
static bool ice_chk_linearize(struct sk_buff *skb, unsigned int count)
{
  #line 2115 
  if ((long)(count <= 7U) != 0L) 
                                 #line 2116 
                                 return (_Bool)0;
  #line 2118 
  if ((int)skb_is_gso(skb) != 0) {
    #line 2119 
    return __ice_chk_linearize(skb);
  }
  #line 2122 
  return (_Bool)(count != 8U);
}

#line 2133  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_txrx.c"
static netdev_tx_t ice_xmit_frame_ring(struct sk_buff *skb, struct ice_ring *tx_ring)
{
  #line 2166 
  unsigned int __UNIQUE_ID___x556;
  #line 2166 
  unsigned int tmp_2;
  #line 2137 
  struct ice_tx_buf *first;
  #line 2138 
  unsigned int count;
  #line 2139 
  int tso;
  #line 2139 
  int csum;
  #line 2135 
  struct ice_tx_offload_params offload = {.cd_qw1 = 0ULL, .tx_ring = (struct ice_ring *)0, .td_cmd = 0U, .td_offset = 0U, .td_l2tag1 = 0U, .cd_tunnel_params = 0U, .cd_l2tag2 = (unsigned short)0, .header_len = (unsigned char)0};
  #line 2136 
  struct ice_vsi *vsi = tx_ring->vsi;
  #line 2141 
  count = ice_xmit_desc_count(skb);
  #line 2142 
  if ((int)ice_chk_linearize(skb,count) != 0) {
    #line 2143 
    if (__skb_linearize(skb) != 0) 
                                   #line 2144 
                                   goto out_drop;
    #line 2145 
    count = ice_txd_use_count(skb->len);
    #line 2146 
    (tx_ring->__anonCompField_ice_ring_197.tx_stats.tx_linearize) ++;
  }
  #line 2155 
  if (ice_maybe_stop_tx(tx_ring,count + 5U) != 0) {
    #line 2157 
    (tx_ring->__anonCompField_ice_ring_197.tx_stats.tx_busy) ++;
    #line 2158 
    return NETDEV_TX_BUSY;
  }
  #line 2161 
  offload.tx_ring = tx_ring;
  #line 2164 
  first = tx_ring->__anonCompField_ice_ring_196.tx_buf + (unsigned long)tx_ring->next_to_use;
  #line 2165 
  first->__anonCompField_ice_tx_buf_192.skb = skb;
  {
    #line 2166 
    __UNIQUE_ID___x556 = skb->len;
    #line 2166 
    unsigned int __UNIQUE_ID___y557 = 60U;
    #line 2166 
    if (__UNIQUE_ID___x556 > __UNIQUE_ID___y557) 
                                                 #line 2166 
                                                 tmp_2 = __UNIQUE_ID___x556; else 
                                                                    #line 2166 
                                                                    tmp_2 = __UNIQUE_ID___y557;
    }
  #line 2166 
  first->bytecount = tmp_2;
  #line 2167 
  first->gso_segs = (unsigned short)1U;
  #line 2168 
  first->tx_flags = 0U;
  #line 2171 
  if (ice_tx_prepare_vlan_flags(tx_ring,first) != 0) 
                                                     #line 2172 
                                                     goto out_drop;
  #line 2175 
  tso = ice_tso(first,& offload);
  #line 2176 
  if (tso < 0) 
               #line 2177 
               goto out_drop;
  #line 2180 
  csum = ice_tx_csum(first,& offload);
  #line 2181 
  if (csum < 0) 
                #line 2182 
                goto out_drop;
  #line 2185 
  if ((((long)(skb->priority == 7U) != 0L && (long)(vsi->type == (unsigned int)ICE_VSI_PF) != 0L) != 0) != 0 && (long)((unsigned int)(vsi->port_info)->is_sw_lldp != 0U) != 0L) 
    #line 2188 
    offload.cd_qw1 |= 257ULL;
  #line 2192 
  if ((offload.cd_qw1 & 1ULL) != 0ULL) {
    #line 2193 
    struct ice_tx_ctx_desc *cdesc;
    #line 2194 
    int i = (int)tx_ring->next_to_use;
    #line 2197 
    cdesc = (struct ice_tx_ctx_desc *)tx_ring->desc + (unsigned long)i;
    #line 2198 
    i ++;
    #line 2199 
    if ((int)tx_ring->count > i) 
                                 #line 2199 
                                 tx_ring->next_to_use = (unsigned short)i; else 
                                                                    #line 2199 
                                                                    tx_ring->next_to_use = (unsigned short)0U;
    #line 2202 
    cdesc->tunneling_params = offload.cd_tunnel_params;
    #line 2203 
    cdesc->l2tag2 = offload.cd_l2tag2;
    #line 2204 
    cdesc->rsvd = (unsigned short)0U;
    #line 2205 
    cdesc->qw1 = offload.cd_qw1;
  }
  #line 2208 
  ice_tx_map(tx_ring,first,& offload);
  #line 2209 
  return NETDEV_TX_OK;
  #line 2211 
  out_drop: 
            #line 2211 
  ;
  #line 2212 
  dev_kfree_skb_any(skb);
  #line 2213 
  return NETDEV_TX_OK;
}

#line 2223  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_txrx.c"
netdev_tx_t ice_start_xmit(struct sk_buff *skb, struct net_device *netdev)
{
  #line 2227 
  struct ice_ring *tx_ring;
  #line 2225 
  struct ice_netdev_priv *np = netdev_priv(netdev);
  #line 2226 
  struct ice_vsi *vsi = np->vsi;
  #line 2229 
  tx_ring = *(vsi->tx_rings + (unsigned long)skb->queue_mapping);
  #line 2234 
  if (skb_put_padto(skb,17U) != 0) 
                                   #line 2235 
                                   return NETDEV_TX_OK;
  #line 2237 
  return ice_xmit_frame_ring(skb,tx_ring);
}

#line 119  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ice/ice.ko/concurrency safety/0/concurrency safety/weaver/ice_txrx.i.aux"
static void cif_set_bit_1(long nr, unsigned long *addr)
{
  #line 122 
  ldv_set_bit(nr,addr);
  #line 123 
  return;
}

#line 126  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ice/ice.ko/concurrency safety/0/concurrency safety/weaver/ice_txrx.i.aux"
static void cif_clear_bit_1(long nr, unsigned long *addr)
{
  #line 129 
  ldv_clear_bit(nr,addr);
  #line 130 
  return;
}

#line 161  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ice/ice.ko/concurrency safety/0/concurrency safety/weaver/ice_txrx.i.aux"
static void atomic_add(int i, atomic_t *v)
{
  #line 164 
  ldv_atomic_add(i,v);
  #line 165 
  return;
}

#line 798  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ice/ice.ko/concurrency safety/0/concurrency safety/weaver/ice_txrx.i.aux"
static void *cif_devm_kzalloc_0(struct device *dev, size_t size, gfp_t flags)
{
  #line 801 
  return ldv_devm_kzalloc(size,flags);
}

#line 324  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/bitops.h"
__inline static int fls(unsigned int x)
{
  #line 326 
  int r;
  #line 327 
  ldv_inline_asm();
  #line 351 
  return r + 1;
}

#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bitops/find.h"
#line 154  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ice/ice.ko/concurrency safety/0/concurrency safety/weaver/ice_switch.i.aux"
static unsigned long cif_find_first_bit(unsigned long *addr, unsigned long size);
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bitops/instrumented-atomic.h"
#line 119  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ice/ice.ko/concurrency safety/0/concurrency safety/weaver/ice_switch.i.aux"
static void cif_set_bit_2(long nr, unsigned long *addr);
#line 44  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bitops/instrumented-atomic.h"
#line 126  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ice/ice.ko/concurrency safety/0/concurrency safety/weaver/ice_switch.i.aux"
static void cif_clear_bit_2(long nr, unsigned long *addr);
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/log2.h"
__inline static int __ilog2_u32(u32 n)
{
  #line 24 
  return fls(n) + -1;
}

#line 26  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
#line 133  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ice/ice.ko/concurrency safety/0/concurrency safety/weaver/ice_switch.i.aux"
static void INIT_LIST_HEAD(struct list_head *list);
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
#line 33 
bool __list_add_valid(struct list_head *, struct list_head *, struct list_head *);
#line 36 
#line 36 
bool __list_del_entry_valid(struct list_head *);
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static void __list_add(struct list_head *new, struct list_head *prev, struct list_head *next)
{
  #line 60 
  if (! __list_add_valid(new,prev,next)) 
                                         #line 61 
                                         return;
  #line 63 
  next->prev = new;
  #line 64 
  new->next = next;
  #line 65 
  new->prev = prev;
  {
    #line 67 
    union __anonunion___u_5154 __u = {.__val = new};
    #line 66 
    __write_once_size((void *)(& prev->next),(void *)(& __u.__c),8);
    #line 66 
    struct list_head *tmp_2 = __u.__val;
  }
  #line 68 
  return;
}

#line 77  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static void list_add(struct list_head *new, struct list_head *head)
{
  #line 79 
  __list_add(new,head,head->next);
  #line 80 
  return;
}

#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static void __list_del(struct list_head *prev, struct list_head *next)
{
  #line 97 
  next->prev = prev;
  {
    #line 107 
    union __anonunion___u_5156 __u = {.__val = next};
    #line 106 
    __write_once_size((void *)(& prev->next),(void *)(& __u.__c),8);
    #line 106 
    struct list_head *tmp = __u.__val;
  }
  #line 108 
  return;
}

#line 129  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static void __list_del_entry(struct list_head *entry)
{
  #line 131 
  if (! __list_del_entry_valid(entry)) 
                                       #line 132 
                                       return;
  #line 134 
  __list_del(entry->prev,entry->next);
  #line 135 
  return;
}

#line 137  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static void list_del(struct list_head *entry)
{
  #line 139 
  __list_del_entry(entry);
  #line 140 
  entry->next = (struct list_head *)(-2401263026318606080);
  #line 141 
  entry->prev = (struct list_head *)(-2401263026318606046);
  #line 142 
  return;
}

#line 266  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static int list_empty(struct list_head *head)
{
  #line 269 
  union __anonunion___u_5158 __u;
  #line 268 
  __read_once_size((void *)(& head->next),(void *)(& __u.__c),8);
  #line 268 
  ;
  #line 268 
  return (__u.__val) == head;
}

#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/string_64.h"
#line 61 
int memcmp(void *, void *, size_t);
#line 26  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ice/ice.ko/concurrency safety/0/concurrency safety/weaver/ice_switch.i.aux"
#line 812 
static void cif_mutex_lock_rule_lock(struct mutex *lock);
#line 26 
#line 826 
static void cif_mutex_lock_vlan_lock(struct mutex *lock);
#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/find_bit.h"
#line 21 
unsigned long ldv_find_first_bit(unsigned long *addr, unsigned long size);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/list.h"
#line 23 
void ldv_init_list_head(struct list_head *list);
#line 185  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mutex.h"
#line 819  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ice/ice.ko/concurrency safety/0/concurrency safety/weaver/ice_switch.i.aux"
static void cif_mutex_unlock_rule_lock(struct mutex *lock);
#line 185  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mutex.h"
#line 833  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ice/ice.ko/concurrency safety/0/concurrency safety/weaver/ice_switch.i.aux"
static void cif_mutex_unlock_vlan_lock(struct mutex *lock);
#line 937  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
#line 805  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ice/ice.ko/concurrency safety/0/concurrency safety/weaver/ice_switch.i.aux"
static void *cif_devm_kzalloc_1(struct device *dev, size_t size, gfp_t flags);
#line 952  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
#line 798  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ice/ice.ko/concurrency safety/0/concurrency safety/weaver/ice_switch.i.aux"
static void *cif_devm_kcalloc_0(struct device *dev, size_t n, size_t size, gfp_t flags);
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/etherdevice.h"
__inline static bool is_zero_ether_addr(u8 *addr)
{
  #line 101 
  return (_Bool)((*((u32 *)addr) | (unsigned int)*((u16 *)(addr + 4U))) == 0U);
}

#line 116  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/etherdevice.h"
__inline static bool is_multicast_ether_addr(u8 *addr)
{
  #line 119 
  u32 a = *((u32 *)addr);
  #line 126 
  return (_Bool)((a & 1U) != 0U);
}

#line 162  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/etherdevice.h"
__inline static bool is_broadcast_ether_addr(u8 *addr)
{
  #line 166 
  return (_Bool)((unsigned int)(((int)*((u16 *)addr) & (int)*((u16 *)(addr + 2U))) & (int)*((u16 *)(addr + 4U))) == 65535U);
}

#line 175  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/etherdevice.h"
__inline static bool is_unicast_ether_addr(u8 *addr)
{
  #line 177 
  int tmp_0;
  #line 177 
  if ((int)is_multicast_ether_addr(addr) != 0) 
                                               #line 177 
                                               tmp_0 = 0; else 
                                                               #line 177 
                                                               tmp_0 = 1;
  #line 177 
  return (_Bool)(tmp_0 != 0);
}

#line 238  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/etherdevice.h"
__inline static void eth_broadcast_addr(u8 *addr)
{
  #line 240 
  memset((void *)addr,255,6UL);
  #line 241 
  return;
}

#line 276  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/etherdevice.h"
__inline static void ether_addr_copy(u8 *dst, u8 *src)
{
  #line 279 
  *((u32 *)dst) = *((u32 *)src);
  #line 280 
  *((u16 *)(dst + 4U)) = *((u16 *)(src + 4U));
  #line 281 
  return;
}

#line 78  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_common.h"
#line 78 
enum ice_status ice_aq_send_cmd(struct ice_hw *hw, struct ice_aq_desc *desc, void *buf, u16 buf_size, struct ice_sq_cd *cd);
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_switch.h"
#line 395  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_switch.c"
enum ice_status ice_add_vsi(struct ice_hw *hw, u16 vsi_handle, struct ice_vsi_ctx *vsi_ctx, struct ice_sq_cd *cd);
#line 200  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_switch.h"
#line 436  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_switch.c"
enum ice_status ice_free_vsi(struct ice_hw *hw, u16 vsi_handle, struct ice_vsi_ctx *vsi_ctx, bool keep_vsi_alloc, struct ice_sq_cd *cd);
#line 203  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_switch.h"
#line 460  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_switch.c"
enum ice_status ice_update_vsi(struct ice_hw *hw, u16 vsi_handle, struct ice_vsi_ctx *vsi_ctx, struct ice_sq_cd *cd);
#line 205  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_switch.h"
#line 287  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_switch.c"
bool ice_is_vsi_valid(struct ice_hw *hw, u16 vsi_handle);
#line 206  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_switch.h"
#line 312  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_switch.c"
struct ice_vsi_ctx *ice_get_vsi_ctx(struct ice_hw *hw, u16 vsi_handle);
#line 207  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_switch.h"
#line 375  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_switch.c"
void ice_clear_all_vsi_ctx(struct ice_hw *hw);
#line 209  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_switch.h"
#line 587  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_switch.c"
enum ice_status ice_get_initial_sw_cfg(struct ice_hw *hw);
#line 212  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_switch.h"
#line 1169  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_switch.c"
enum ice_status ice_update_sw_rule_bridge_mode(struct ice_hw *hw);
#line 213  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_switch.h"
#line 1652  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_switch.c"
enum ice_status ice_add_mac(struct ice_hw *hw, struct list_head *m_list);
#line 214  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_switch.h"
#line 2185  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_switch.c"
enum ice_status ice_remove_mac(struct ice_hw *hw, struct list_head *m_list);
#line 216  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_switch.h"
#line 1982  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_switch.c"
enum ice_status ice_add_eth_mac(struct ice_hw *hw, struct list_head *em_list);
#line 218  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_switch.h"
#line 2011  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_switch.c"
enum ice_status ice_remove_eth_mac(struct ice_hw *hw, struct list_head *em_list);
#line 219  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_switch.h"
#line 2704  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_switch.c"
void ice_remove_vsi_fltr(struct ice_hw *hw, u16 vsi_handle);
#line 221  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_switch.h"
#line 1954  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_switch.c"
enum ice_status ice_add_vlan(struct ice_hw *hw, struct list_head *v_list);
#line 222  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_switch.h"
#line 2236  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_switch.c"
enum ice_status ice_remove_vlan(struct ice_hw *hw, struct list_head *v_list);
#line 226  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_switch.h"
#line 2064  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_switch.c"
enum ice_status ice_cfg_dflt_vsi(struct ice_hw *hw, u16 vsi_handle, bool set, u8 direction);
#line 228  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_switch.h"
#line 2489  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_switch.c"
enum ice_status ice_set_vsi_promisc(struct ice_hw *hw, u16 vsi_handle, u8 promisc_mask, u16 vid);
#line 231  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_switch.h"
#line 2416  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_switch.c"
enum ice_status ice_clear_vsi_promisc(struct ice_hw *hw, u16 vsi_handle, u8 promisc_mask, u16 vid);
#line 234  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_switch.h"
#line 2603  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_switch.c"
enum ice_status ice_set_vlan_vsi_promisc(struct ice_hw *hw, u16 vsi_handle, u8 promisc_mask, bool rm_vlan_promisc);
#line 237  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_switch.h"
#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_switch.c"
enum ice_status ice_init_def_sw_recp(struct ice_hw *hw);
#line 241  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_switch.h"
#line 2780  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_switch.c"
enum ice_status ice_replay_vsi_all_fltr(struct ice_hw *hw, u16 vsi_handle);
#line 242  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_switch.h"
#line 2803  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_switch.c"
void ice_rm_all_sw_replay_rule_info(struct ice_hw *hw);
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_switch.c"
static u8 dummy_eth_header[16U] = {(unsigned char)2U, [6] = (unsigned char)2U, [12] = (unsigned char)129U};
#line 64  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_switch.c"
static enum ice_status ice_aq_alloc_free_res(struct ice_hw *hw, u16 num_entries, struct ice_aqc_alloc_free_res_elem *buf, u16 buf_size, enum ice_adminq_opc opc, struct ice_sq_cd *cd)
{
  #line 68 
  struct ice_aqc_alloc_free_res_cmd *cmd;
  #line 69 
  struct ice_aq_desc desc;
  #line 71 
  cmd = & desc.params.sw_res_ctrl;
  #line 73 
  if (buf == (struct ice_aqc_alloc_free_res_elem *)0) 
                                                      #line 74 
                                                      return ICE_ERR_PARAM;
  #line 76 
  if ((unsigned long)buf_size < (unsigned long)num_entries * 2UL) 
                                                                  #line 77 
                                                                  return ICE_ERR_PARAM;
  #line 79 
  ice_fill_dflt_direct_cmd_desc(& desc,(unsigned short)((int)((unsigned short)opc)));
  #line 81 
  desc.flags = (unsigned short)((unsigned int)desc.flags | 1024U);
  #line 83 
  cmd->num_entries = num_entries;
  #line 85 
  return ice_aq_send_cmd(hw,& desc,(void *)buf,(unsigned short)((int)buf_size),
                      cd);
}

#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_switch.c"
enum ice_status ice_init_def_sw_recp(struct ice_hw *hw)
{
  #line 100 
  void *__mptr;
  #line 97 
  struct ice_sw_recipe *recps;
  #line 98 
  u8 i;
  #line 100 
  __mptr = (void *)hw;
  #line 100 
  recps = (struct ice_sw_recipe *)cif_devm_kcalloc_0(& (((struct ice_pf *)(__mptr + 18446744073709549512U))->pdev)->dev,
                           64UL,272UL,3264U);
  #line 102 
  if (recps == (struct ice_sw_recipe *)0) 
                                          #line 103 
                                          return ICE_ERR_NO_MEMORY;
  #line 105 
  i = (unsigned char)0U;
  #line 105 
  while ((unsigned int)i <= 9U) {
    #line 106 
    (recps + (unsigned long)i)->root_rid = i;
    #line 107 
    INIT_LIST_HEAD(& (recps + (unsigned long)i)->filt_rules);
    #line 108 
    INIT_LIST_HEAD(& (recps + (unsigned long)i)->filt_replay_rules);
    {
      #line 109 
      struct lock_class_key __key;
      #line 109 
      __mutex_init(& (recps + (unsigned long)i)->filt_rule_lock,(char *)"&recps[i].filt_rule_lock",& __key);
    }
    #line 105 
    i = (u8)((int)i + 1);
  }
  #line 112 
  (hw->switch_info)->recp_list = recps;
  #line 114 
  return ICE_SUCCESS;
}

#line 143  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_switch.c"
static enum ice_status ice_aq_get_sw_cfg(struct ice_hw *hw, struct ice_aqc_get_sw_cfg_resp *buf, u16 buf_size, u16 *req_desc, u16 *num_elems, struct ice_sq_cd *cd)
{
  #line 147 
  struct ice_aqc_get_sw_cfg *cmd;
  #line 148 
  enum ice_status status;
  #line 149 
  struct ice_aq_desc desc;
  #line 151 
  ice_fill_dflt_direct_cmd_desc(& desc,(unsigned short)512);
  #line 152 
  cmd = & desc.params.get_sw_conf;
  #line 153 
  cmd->element = *req_desc;
  #line 155 
  status = ice_aq_send_cmd(hw,& desc,(void *)buf,(unsigned short)((int)buf_size),cd);
  #line 156 
  if (status == ICE_SUCCESS) {
    #line 157 
    *req_desc = cmd->element;
    #line 158 
    *num_elems = cmd->num_elems;
  }
  #line 161 
  return status;
}

#line 173  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_switch.c"
static enum ice_status ice_aq_add_vsi(struct ice_hw *hw, struct ice_vsi_ctx *vsi_ctx, struct ice_sq_cd *cd)
{
  #line 176 
  struct ice_aqc_add_update_free_vsi_resp *res;
  #line 177 
  struct ice_aqc_add_get_update_free_vsi *cmd;
  #line 178 
  struct ice_aq_desc desc;
  #line 179 
  enum ice_status status;
  #line 181 
  cmd = & desc.params.vsi_cmd;
  #line 182 
  res = & desc.params.add_update_free_vsi_res;
  #line 184 
  ice_fill_dflt_direct_cmd_desc(& desc,(unsigned short)528);
  #line 186 
  if ((unsigned int)vsi_ctx->alloc_from_pool == 0U) 
                                                    #line 187 
                                                    cmd->vsi_num = (unsigned short)((unsigned int)vsi_ctx->vsi_num | 32768U);
  #line 189 
  cmd->vf_id = vsi_ctx->vf_num;
  #line 191 
  cmd->vsi_flags = vsi_ctx->flags;
  #line 193 
  desc.flags = (unsigned short)((unsigned int)desc.flags | 1024U);
  #line 195 
  status = ice_aq_send_cmd(hw,& desc,(void *)(& vsi_ctx->info),(unsigned short)128,cd);
  #line 198 
  if (status == ICE_SUCCESS) {
    #line 199 
    vsi_ctx->vsi_num = (unsigned short)((unsigned int)res->vsi_num & 1023U);
    #line 200 
    vsi_ctx->vsis_allocd = res->vsi_used;
    #line 201 
    vsi_ctx->vsis_unallocated = res->vsi_free;
  }
  #line 204 
  return status;
}

#line 217  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_switch.c"
static enum ice_status ice_aq_free_vsi(struct ice_hw *hw, struct ice_vsi_ctx *vsi_ctx, bool keep_vsi_alloc, struct ice_sq_cd *cd)
{
  #line 220 
  struct ice_aqc_add_update_free_vsi_resp *resp;
  #line 221 
  struct ice_aqc_add_get_update_free_vsi *cmd;
  #line 222 
  struct ice_aq_desc desc;
  #line 223 
  enum ice_status status;
  #line 225 
  cmd = & desc.params.vsi_cmd;
  #line 226 
  resp = & desc.params.add_update_free_vsi_res;
  #line 228 
  ice_fill_dflt_direct_cmd_desc(& desc,(unsigned short)531);
  #line 230 
  cmd->vsi_num = (unsigned short)((unsigned int)vsi_ctx->vsi_num | 32768U);
  #line 231 
  if ((int)keep_vsi_alloc != 0) 
                                #line 232 
                                cmd->cmd_flags = (unsigned short)1U;
  #line 234 
  status = ice_aq_send_cmd(hw,& desc,(void *)0,(unsigned short)0,cd);
  #line 235 
  if (status == ICE_SUCCESS) {
    #line 236 
    vsi_ctx->vsis_allocd = resp->vsi_used;
    #line 237 
    vsi_ctx->vsis_unallocated = resp->vsi_free;
  }
  #line 240 
  return status;
}

#line 252  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_switch.c"
static enum ice_status ice_aq_update_vsi(struct ice_hw *hw, struct ice_vsi_ctx *vsi_ctx, struct ice_sq_cd *cd)
{
  #line 255 
  struct ice_aqc_add_update_free_vsi_resp *resp;
  #line 256 
  struct ice_aqc_add_get_update_free_vsi *cmd;
  #line 257 
  struct ice_aq_desc desc;
  #line 258 
  enum ice_status status;
  #line 260 
  cmd = & desc.params.vsi_cmd;
  #line 261 
  resp = & desc.params.add_update_free_vsi_res;
  #line 263 
  ice_fill_dflt_direct_cmd_desc(& desc,(unsigned short)529);
  #line 265 
  cmd->vsi_num = (unsigned short)((unsigned int)vsi_ctx->vsi_num | 32768U);
  #line 267 
  desc.flags = (unsigned short)((unsigned int)desc.flags | 1024U);
  #line 269 
  status = ice_aq_send_cmd(hw,& desc,(void *)(& vsi_ctx->info),(unsigned short)128,cd);
  #line 272 
  if (status == ICE_SUCCESS) {
    #line 273 
    vsi_ctx->vsis_allocd = resp->vsi_used;
    #line 274 
    vsi_ctx->vsis_unallocated = resp->vsi_free;
  }
  #line 277 
  return status;
}

#line 287  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_switch.c"
bool ice_is_vsi_valid(struct ice_hw *hw, u16 vsi_handle)
{
  #line 289 
  return (_Bool)(((unsigned int)vsi_handle <= 767U && hw->vsi_ctx[(int)vsi_handle] != (struct ice_vsi_ctx *)0) != 0);
}

#line 300  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_switch.c"
u16 ice_get_hw_vsi_num(struct ice_hw *hw, u16 vsi_handle)
{
  #line 302 
  return (hw->vsi_ctx[(int)vsi_handle])->vsi_num;
}

#line 312  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_switch.c"
struct ice_vsi_ctx *ice_get_vsi_ctx(struct ice_hw *hw, u16 vsi_handle)
{
  #line 314 
  struct ice_vsi_ctx *tmp;
  #line 314 
  if ((unsigned int)vsi_handle <= 767U) 
                                        #line 314 
                                        tmp = hw->vsi_ctx[(int)vsi_handle]; else 
                                                                    #line 314 
                                                                    tmp = (struct ice_vsi_ctx *)0;
  #line 314 
  return tmp;
}

#line 326  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_switch.c"
static void ice_save_vsi_ctx(struct ice_hw *hw, u16 vsi_handle, struct ice_vsi_ctx *vsi)
{
  #line 328 
  hw->vsi_ctx[(int)vsi_handle] = vsi;
  #line 329 
  return;
}

#line 336  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_switch.c"
static void ice_clear_vsi_q_ctx(struct ice_hw *hw, u16 vsi_handle)
{
  #line 338 
  struct ice_vsi_ctx *vsi;
  #line 339 
  u8 i;
  #line 341 
  vsi = ice_get_vsi_ctx(hw,(unsigned short)((int)vsi_handle));
  #line 342 
  if (vsi == (struct ice_vsi_ctx *)0) 
                                      #line 343 
                                      return;
  #line 344 
  i = (unsigned char)0U;
  #line 344 
  while ((unsigned int)i <= 7U) {
    #line 345 
    if (vsi->lan_q_ctx[(int)i] != (struct ice_q_ctx *)0) {
      #line 346 
      void *__mptr;
      #line 346 
      ;
      #line 346 
      __mptr = (void *)hw;
      #line 346 
      devm_kfree(& (((struct ice_pf *)(__mptr + 18446744073709549512U))->pdev)->dev,(void *)vsi->lan_q_ctx[(int)i]);
      #line 347 
      vsi->lan_q_ctx[(int)i] = (struct ice_q_ctx *)0;
    }
    #line 344 
    i = (u8)((int)i + 1);
  }
  #line 349 
  return;
}

#line 359  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_switch.c"
static void ice_clear_vsi_ctx(struct ice_hw *hw, u16 vsi_handle)
{
  #line 361 
  struct ice_vsi_ctx *vsi;
  #line 363 
  vsi = ice_get_vsi_ctx(hw,(unsigned short)((int)vsi_handle));
  #line 364 
  if (vsi != (struct ice_vsi_ctx *)0) {
    #line 366 
    void *__mptr;
    #line 365 
    ice_clear_vsi_q_ctx(hw,(unsigned short)((int)vsi_handle));
    #line 366 
    ;
    #line 366 
    __mptr = (void *)hw;
    #line 366 
    devm_kfree(& (((struct ice_pf *)(__mptr + 18446744073709549512U))->pdev)->dev,(void *)vsi);
    #line 367 
    hw->vsi_ctx[(int)vsi_handle] = (struct ice_vsi_ctx *)0;
  }
  #line 369 
  return;
}

#line 375  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_switch.c"
void ice_clear_all_vsi_ctx(struct ice_hw *hw)
{
  #line 377 
  u16 i;
  #line 379 
  i = (unsigned short)0U;
  #line 379 
  while ((unsigned int)i <= 767U) {
    #line 380 
    ice_clear_vsi_ctx(hw,(unsigned short)((int)i));
    #line 379 
    i = (u16)((int)i + 1);
  }
  #line 381 
  return;
}

#line 395  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_switch.c"
enum ice_status ice_add_vsi(struct ice_hw *hw, u16 vsi_handle, struct ice_vsi_ctx *vsi_ctx, struct ice_sq_cd *cd)
{
  #line 398 
  struct ice_vsi_ctx *tmp_vsi_ctx;
  #line 399 
  enum ice_status status;
  #line 401 
  if ((unsigned int)vsi_handle > 767U) 
                                       #line 402 
                                       return ICE_ERR_PARAM;
  #line 403 
  status = ice_aq_add_vsi(hw,vsi_ctx,cd);
  #line 404 
  if (status != ICE_SUCCESS) 
                             #line 405 
                             return status;
  #line 406 
  tmp_vsi_ctx = ice_get_vsi_ctx(hw,(unsigned short)((int)vsi_handle));
  #line 407 
  if (tmp_vsi_ctx == (struct ice_vsi_ctx *)0) {
    #line 409 
    void *__mptr;
    #line 409 
    __mptr = (void *)hw;
    #line 409 
    tmp_vsi_ctx = (struct ice_vsi_ctx *)cif_devm_kzalloc_1(& (((struct ice_pf *)(__mptr + 18446744073709549512U))->pdev)->dev,
                           384UL,3264U);
    #line 411 
    if (tmp_vsi_ctx == (struct ice_vsi_ctx *)0) {
      #line 412 
      ice_aq_free_vsi(hw,vsi_ctx,(_Bool)0,cd);
      #line 413 
      return ICE_ERR_NO_MEMORY;
    }
    #line 415 
    *tmp_vsi_ctx = *vsi_ctx;
    #line 416 
    ice_save_vsi_ctx(hw,(unsigned short)((int)vsi_handle),tmp_vsi_ctx);
  }
  else 
       #line 419 
       tmp_vsi_ctx->vsi_num = vsi_ctx->vsi_num;
  #line 422 
  return ICE_SUCCESS;
}

#line 436  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_switch.c"
enum ice_status ice_free_vsi(struct ice_hw *hw, u16 vsi_handle, struct ice_vsi_ctx *vsi_ctx, bool keep_vsi_alloc, struct ice_sq_cd *cd)
{
  #line 439 
  enum ice_status status;
  #line 441 
  if (! ice_is_vsi_valid(hw,(unsigned short)((int)vsi_handle))) 
                                                                #line 442 
                                                                return ICE_ERR_PARAM;
  #line 443 
  vsi_ctx->vsi_num = ice_get_hw_vsi_num(hw,(unsigned short)((int)vsi_handle));
  #line 444 
  status = ice_aq_free_vsi(hw,vsi_ctx,(_Bool)((bool)((int)keep_vsi_alloc) != 0),cd);
  #line 445 
  if (status == ICE_SUCCESS) 
                             #line 446 
                             ice_clear_vsi_ctx(hw,(unsigned short)((int)vsi_handle));
  #line 447 
  return status;
}

#line 460  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_switch.c"
enum ice_status ice_update_vsi(struct ice_hw *hw, u16 vsi_handle, struct ice_vsi_ctx *vsi_ctx, struct ice_sq_cd *cd)
{
  #line 463 
  if (! ice_is_vsi_valid(hw,(unsigned short)((int)vsi_handle))) 
                                                                #line 464 
                                                                return ICE_ERR_PARAM;
  #line 465 
  vsi_ctx->vsi_num = ice_get_hw_vsi_num(hw,(unsigned short)((int)vsi_handle));
  #line 466 
  return ice_aq_update_vsi(hw,vsi_ctx,cd);
}

#line 479  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_switch.c"
static enum ice_status ice_aq_alloc_free_vsi_list(struct ice_hw *hw, u16 *vsi_list_id, enum ice_sw_lkup_type lkup_type, enum ice_adminq_opc opc)
{
  #line 489 
  void *__mptr;
  #line 522 
  void *__mptr_0;
  #line 483 
  struct ice_aqc_alloc_free_res_elem *sw_buf;
  #line 484 
  struct ice_aqc_res_elem *vsi_ele;
  #line 485 
  enum ice_status status;
  #line 486 
  u16 buf_len;
  #line 488 
  buf_len = (unsigned short)6U;
  #line 489 
  ;
  #line 489 
  __mptr = (void *)hw;
  #line 489 
  sw_buf = (struct ice_aqc_alloc_free_res_elem *)cif_devm_kzalloc_1(& (((struct ice_pf *)(__mptr + 18446744073709549512U))->pdev)->dev,
                           (unsigned long)buf_len,3264U);
  #line 490 
  if (sw_buf == (struct ice_aqc_alloc_free_res_elem *)0) 
                                                         #line 491 
                                                         return ICE_ERR_NO_MEMORY;
  #line 492 
  sw_buf->num_elems = (unsigned short)1U;
  #line 494 
  if ((lkup_type <= (unsigned int)ICE_SW_LKUP_MAC_VLAN || lkup_type == (unsigned int)ICE_SW_LKUP_ETHERTYPE_MAC) || (lkup_type == (unsigned int)ICE_SW_LKUP_PROMISC || lkup_type == (unsigned int)ICE_SW_LKUP_PROMISC_VLAN)) 
    #line 500 
    sw_buf->res_type = (unsigned short)3U;
  else 
    #line 501 
    if (lkup_type == (unsigned int)ICE_SW_LKUP_VLAN) 
                                                     #line 502 
                                                     sw_buf->res_type = (unsigned short)4U;
    else {
      #line 505 
      status = ICE_ERR_PARAM;
      #line 506 
      goto ice_aq_alloc_free_vsi_list_exit;
    }
  #line 509 
  if (opc == (unsigned int)ice_aqc_opc_free_res) 
                                                 #line 510 
                                                 sw_buf->elem[0].e.sw_resp = *vsi_list_id;
  #line 512 
  status = ice_aq_alloc_free_res(hw,(unsigned short)1,sw_buf,(unsigned short)((int)buf_len),opc,(struct ice_sq_cd *)0);
  #line 513 
  if (status != ICE_SUCCESS) 
                             #line 514 
                             goto ice_aq_alloc_free_vsi_list_exit;
  #line 516 
  if (opc == (unsigned int)ice_aqc_opc_alloc_res) {
    #line 517 
    vsi_ele = & sw_buf->elem[0];
    #line 518 
    *vsi_list_id = vsi_ele->e.sw_resp;
  }
  #line 521 
  ice_aq_alloc_free_vsi_list_exit: 
                                   #line 521 
  ;
  #line 522 
  ;
  #line 522 
  __mptr_0 = (void *)hw;
  #line 522 
  devm_kfree(& (((struct ice_pf *)(__mptr_0 + 18446744073709549512U))->pdev)->dev,(void *)sw_buf);
  #line 523 
  return status;
}

#line 538  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_switch.c"
static enum ice_status ice_aq_sw_rules(struct ice_hw *hw, void *rule_list, u16 rule_list_sz, u8 num_rules, enum ice_adminq_opc opc, struct ice_sq_cd *cd)
{
  #line 541 
  struct ice_aq_desc desc;
  #line 544 
  if ((unsigned int)opc + 4294966624U > 2U) 
                                            #line 546 
                                            return ICE_ERR_PARAM;
  #line 548 
  ice_fill_dflt_direct_cmd_desc(& desc,(unsigned short)((int)((unsigned short)opc)));
  #line 550 
  desc.flags = (unsigned short)((unsigned int)desc.flags | 1024U);
  #line 551 
  desc.params.sw_rules.num_rules_fltr_entry_index = (unsigned short)num_rules;
  #line 553 
  return ice_aq_send_cmd(hw,& desc,rule_list,
                      (unsigned short)((int)rule_list_sz),cd);
}

#line 565  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_switch.c"
static void ice_init_port_info(struct ice_port_info *pi, u16 vsi_port_num, u8 type, u16 swid, u16 pf_vf_num, bool is_vf)
{
  #line 568 
  switch ((int)type) {
    #line 569 
    case 0: 
            #line 569 
    ;
    #line 570 
    pi->lport = (unsigned char)vsi_port_num;
    #line 571 
    pi->sw_id = swid;
    #line 572 
    pi->pf_vf_num = pf_vf_num;
    #line 573 
    pi->is_vf = (unsigned char)is_vf;
    #line 574 
    pi->dflt_tx_vsi_num = (unsigned short)255U;
    #line 575 
    pi->dflt_rx_vsi_num = (unsigned short)255U;
    #line 576 
    break;
    #line 577 
    default: 
             #line 577 
    ;
    {
      #line 578 
      bool branch;
      #line 578 
      struct _ddebug __UNIQUE_ID_ddebug536 = {.modname = (char *)"ice", .function = (char *)"ice_init_port_info", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_switch.c", .format = (char *)"incorrect VSI/port type received\n", .lineno = (unsigned int)578U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 578 
      branch = arch_static_branch(& __UNIQUE_ID_ddebug536.key.dd_key_false.key,(_Bool)0);
      #line 578 
      if ((long)((long)((int)branch != 0)) != 0L) {
        #line 578 
        void *__mptr;
        #line 578 
        __mptr = (void *)pi->hw;
        #line 578 
        __dynamic_dev_dbg(& __UNIQUE_ID_ddebug536,& (((struct ice_pf *)(__mptr + 18446744073709549512U))->pdev)->dev,(char *)"incorrect VSI/port type received\n");
      }
    }
    #line 580 
    break;
  }
  #line 582 
  return;
}

#line 587  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_switch.c"
enum ice_status ice_get_initial_sw_cfg(struct ice_hw *hw)
{
  #line 595 
  void *__mptr;
  #line 645 
  void *__mptr_0;
  #line 589 
  struct ice_aqc_get_sw_cfg_resp *rbuf;
  #line 590 
  enum ice_status status;
  #line 592 
  u16 num_elems;
  #line 593 
  u16 i;
  #line 591 
  u16 req_desc = (unsigned short)0U;
  #line 595 
  __mptr = (void *)hw;
  #line 595 
  rbuf = (struct ice_aqc_get_sw_cfg_resp *)cif_devm_kzalloc_1(& (((struct ice_pf *)(__mptr + 18446744073709549512U))->pdev)->dev,
                           2048UL,3264U);
  #line 598 
  if (rbuf == (struct ice_aqc_get_sw_cfg_resp *)0) 
                                                   #line 599 
                                                   return ICE_ERR_NO_MEMORY;
  #line 606 
  while (1) {
    #line 607 
    status = ice_aq_get_sw_cfg(hw,rbuf,(unsigned short)2048,& req_desc,& num_elems,(struct ice_sq_cd *)0);
    #line 610 
    if (status != ICE_SUCCESS) 
                               #line 611 
                               break;
    #line 613 
    i = (unsigned short)0U;
    #line 613 
    while ((int)i < (int)num_elems) {
      {
        #line 614 
        struct ice_aqc_get_sw_cfg_resp_elem *ele;
        #line 615 
        u16 pf_vf_num;
        #line 615 
        u16 swid;
        #line 615 
        u16 vsi_port_num;
        #line 617 
        u8 type;
        #line 616 
        bool is_vf = (_Bool)0;
        #line 619 
        ele = (struct ice_aqc_get_sw_cfg_resp_elem *)(& (rbuf + (unsigned long)i)->elements);
        #line 620 
        vsi_port_num = (unsigned short)((unsigned int)ele->vsi_port_num & 1023U);
        #line 623 
        pf_vf_num = (unsigned short)((unsigned int)ele->pf_vf_num & 32767U);
        #line 626 
        swid = ele->swid;
        #line 628 
        if (((unsigned long)ele->pf_vf_num & 32768UL) != 0UL) 
                                                              #line 630 
                                                              is_vf = (_Bool)1;
        #line 632 
        type = (unsigned char)((int)ele->vsi_port_num >> 14);
        #line 635 
        if ((unsigned int)type == 2U) 
                                      #line 637 
                                      goto __Cont;
        #line 640 
        ice_init_port_info(hw->port_info,(unsigned short)((int)vsi_port_num),(unsigned char)((int)type),(unsigned short)((int)swid),(unsigned short)((int)pf_vf_num),(_Bool)((bool)((int)is_vf) != 0));
      }
      #line 613 
      __Cont: 
              #line 613 
      i = (u16)((int)i + 1);
    }
    #line 642 
    if (! ((unsigned int)req_desc != 0U && status == ICE_SUCCESS)) 
                                                                   #line 606 
                                                                   break;
  }
  #line 645 
  ;
  #line 645 
  __mptr_0 = (void *)hw;
  #line 645 
  devm_kfree(& (((struct ice_pf *)(__mptr_0 + 18446744073709549512U))->pdev)->dev,(void *)rbuf);
  #line 646 
  return status;
}

#line 658  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_switch.c"
static void ice_fill_sw_info(struct ice_hw *hw, struct ice_fltr_info *fi)
{
  #line 660 
  fi->lb_en = (unsigned char)0U;
  #line 661 
  fi->lan_en = (unsigned char)0U;
  #line 662 
  if (((unsigned long)fi->flag & 2UL) != 0UL && fi->fltr_act <= (unsigned int)ICE_FWD_TO_QGRP) {
    #line 670 
    if (fi->lkup_type != (unsigned int)ICE_SW_LKUP_VLAN) 
                                                         #line 671 
                                                         fi->lb_en = (unsigned char)1U;
    #line 689 
    if ((unsigned int)hw->evb_veb != 0U) 
      #line 690 
      if (((((fi->lkup_type == (unsigned int)ICE_SW_LKUP_ETHERTYPE || fi->lkup_type == (unsigned int)ICE_SW_LKUP_PROMISC) || fi->lkup_type == (unsigned int)ICE_SW_LKUP_ETHERTYPE_MAC) || fi->lkup_type == (unsigned int)ICE_SW_LKUP_PROMISC_VLAN) || fi->lkup_type == (unsigned int)ICE_SW_LKUP_DFLT) || fi->lkup_type == (unsigned int)ICE_SW_LKUP_VLAN) 
        #line 700 
        fi->lan_en = (unsigned char)1U;
      else 
        #line 695 
        if (fi->lkup_type == (unsigned int)ICE_SW_LKUP_MAC) {
          #line 697 
          if (is_unicast_ether_addr((u8 *)(& fi->l_data.mac.mac_addr))) 
            #line 690 
            goto _LAND; else 
                             #line 700 
                             fi->lan_en = (unsigned char)1U;
        }
        else {
          #line 690 
          _LAND: 
                 #line 697 
          ;
          #line 697 
          if (fi->lkup_type == (unsigned int)ICE_SW_LKUP_MAC_VLAN) {
            #line 699 
            if (! is_unicast_ether_addr((u8 *)(& fi->l_data.mac.mac_addr))) 
              #line 700 
              fi->lan_en = (unsigned char)1U;
          }
        }
    else 
         #line 702 
         fi->lan_en = (unsigned char)1U;
  }
  #line 704 
  return;
}

#line 715  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_switch.c"
static void ice_fill_sw_rule(struct ice_hw *hw, struct ice_fltr_info *f_info, struct ice_aqc_sw_rules_elem *s_rule, enum ice_adminq_opc opc)
{
  #line 720 
  u16 eth_hdr_sz;
  #line 721 
  u8 *eth_hdr;
  #line 723 
  __be16 *off;
  #line 724 
  u8 q_rgn;
  #line 718 
  u16 vlan_id = (unsigned short)4096U;
  #line 719 
  void *daddr = (void *)0;
  #line 722 
  u32 act = 0U;
  #line 726 
  if (opc == (unsigned int)ice_aqc_opc_remove_sw_rules) {
    #line 727 
    s_rule->pdata.lkup_tx_rx.act = 0U;
    #line 728 
    s_rule->pdata.lkup_tx_rx.index = f_info->fltr_rule_id;
    #line 730 
    s_rule->pdata.lkup_tx_rx.hdr_len = (unsigned short)0U;
    #line 731 
    return;
  }
  #line 734 
  eth_hdr_sz = (unsigned short)16U;
  #line 735 
  eth_hdr = (u8 *)(& s_rule->pdata.lkup_tx_rx.hdr);
  #line 738 
  memcpy((void *)eth_hdr,(void *)(& dummy_eth_header),(unsigned long)eth_hdr_sz);
  #line 739 
  ice_fill_sw_info(hw,f_info);
  #line 741 
  switch ((unsigned int)f_info->fltr_act) {
    #line 742 
    case (unsigned int)0: 
                          #line 742 
    ;
    #line 743 
    act = ((unsigned int)((int)f_info->fwd_id.hw_vsi_id << 4) & 16368U) | act;
    #line 745 
    if (f_info->lkup_type != (unsigned int)ICE_SW_LKUP_VLAN) 
                                                             #line 746 
                                                             act |= 131072U;
    #line 748 
    break;
    #line 749 
    case (unsigned int)1: 
                          #line 749 
    ;
    #line 750 
    act |= 16384U;
    #line 751 
    act = ((unsigned int)((int)f_info->fwd_id.vsi_list_id << 4) & 16368U) | act;
    #line 754 
    if (f_info->lkup_type != (unsigned int)ICE_SW_LKUP_VLAN) 
                                                             #line 755 
                                                             act |= 131072U;
    #line 757 
    break;
    #line 758 
    case (unsigned int)2: 
                          #line 758 
    ;
    #line 759 
    act |= 1U;
    #line 760 
    act = ((unsigned int)((int)f_info->fwd_id.q_id << 4) & 32752U) | act;
    #line 762 
    break;
    #line 763 
    case (unsigned int)4: 
                          #line 763 
    ;
    #line 764 
    act |= 393216U;
    #line 766 
    break;
    #line 767 
    case (unsigned int)3: 
                          #line 767 
    ;
    #line 768 
    if ((unsigned int)f_info->qgrp_size != 0U) {
      #line 769 
      unsigned int tmp_22;
      #line 769 
      unsigned int tmp_54;
      #line 769 
      unsigned int tmp_55;
      #line 769 
      unsigned int tmp_23;
      #line 769 
      unsigned int tmp_24;
      #line 769 
      unsigned int tmp_56;
      #line 769 
      unsigned int tmp_57;
      #line 769 
      unsigned int tmp_25;
      #line 769 
      unsigned int tmp_26;
      #line 769 
      unsigned int tmp_58;
      #line 769 
      unsigned int tmp_59;
      #line 769 
      unsigned int tmp_27;
      #line 769 
      unsigned int tmp_28;
      #line 769 
      unsigned int tmp_60;
      #line 769 
      unsigned int tmp_61;
      #line 769 
      unsigned int tmp_29;
      #line 769 
      unsigned int tmp_30;
      #line 769 
      unsigned int tmp_31;
      #line 769 
      unsigned int tmp;
      #line 769 
      unsigned int tmp_0;
      #line 769 
      unsigned int tmp_32;
      #line 769 
      unsigned int tmp_33;
      #line 769 
      unsigned int tmp_1;
      #line 769 
      unsigned int tmp_2;
      #line 769 
      unsigned int tmp_34;
      #line 769 
      unsigned int tmp_35;
      #line 769 
      unsigned int tmp_3;
      #line 769 
      unsigned int tmp_4;
      #line 769 
      unsigned int tmp_36;
      #line 769 
      unsigned int tmp_37;
      #line 769 
      unsigned int tmp_5;
      #line 769 
      unsigned int tmp_6;
      #line 769 
      unsigned int tmp_38;
      #line 769 
      unsigned int tmp_39;
      #line 769 
      unsigned int tmp_7;
      #line 769 
      unsigned int tmp_8;
      #line 769 
      unsigned int tmp_40;
      #line 769 
      unsigned int tmp_41;
      #line 769 
      unsigned int tmp_9;
      #line 769 
      unsigned int tmp_10;
      #line 769 
      unsigned int tmp_42;
      #line 769 
      unsigned int tmp_43;
      #line 769 
      unsigned int tmp_11;
      #line 769 
      unsigned int tmp_12;
      #line 769 
      unsigned int tmp_44;
      #line 769 
      unsigned int tmp_45;
      #line 769 
      unsigned int tmp_13;
      #line 769 
      unsigned int tmp_14;
      #line 769 
      unsigned int tmp_46;
      #line 769 
      unsigned int tmp_47;
      #line 769 
      unsigned int tmp_15;
      #line 769 
      unsigned int tmp_16;
      #line 769 
      unsigned int tmp_48;
      #line 769 
      unsigned int tmp_49;
      #line 769 
      unsigned int tmp_17;
      #line 769 
      unsigned int tmp_18;
      #line 769 
      unsigned int tmp_50;
      #line 769 
      unsigned int tmp_51;
      #line 769 
      unsigned int tmp_19;
      #line 769 
      unsigned int tmp_20;
      #line 769 
      unsigned int tmp_52;
      #line 769 
      unsigned int tmp_53;
      #line 769 
      unsigned int tmp_21;
      #line 768 
      unsigned int tmp_63;
      #line 768 
      if (0 != 0) {
        #line 769 
        if ((unsigned int)f_info->qgrp_size > 1U) {
          #line 769 
          if (((unsigned long long)f_info->qgrp_size & 9223372036854775808ULL) == 0ULL) {
            #line 769 
            if (((unsigned long long)f_info->qgrp_size & 4611686018427387904ULL) == 0ULL) {
              #line 769 
              if (((unsigned long long)f_info->qgrp_size & 2305843009213693952ULL) == 0ULL) {
                #line 769 
                if (((unsigned long long)f_info->qgrp_size & 1152921504606846976ULL) == 0ULL) {
                  #line 769 
                  if (((unsigned long long)f_info->qgrp_size & 576460752303423488ULL) == 0ULL) {
                    #line 769 
                    if (((unsigned long long)f_info->qgrp_size & 288230376151711744ULL) == 0ULL) {
                      #line 769 
                      if (((unsigned long long)f_info->qgrp_size & 144115188075855872ULL) == 0ULL) {
                        #line 769 
                        if (((unsigned long long)f_info->qgrp_size & 72057594037927936ULL) == 0ULL) {
                          #line 769 
                          if (((unsigned long long)f_info->qgrp_size & 36028797018963968ULL) == 0ULL) {
                            #line 769 
                            if (((unsigned long long)f_info->qgrp_size & 18014398509481984ULL) == 0ULL) {
                              #line 769 
                              if (((unsigned long long)f_info->qgrp_size & 9007199254740992ULL) == 0ULL) {
                                #line 769 
                                if (((unsigned long long)f_info->qgrp_size & 4503599627370496ULL) == 0ULL) {
                                  #line 769 
                                  if (((unsigned long long)f_info->qgrp_size & 2251799813685248ULL) == 0ULL) {
                                    #line 769 
                                    if (((unsigned long long)f_info->qgrp_size & 1125899906842624ULL) == 0ULL) {
                                      #line 769 
                                      if (((unsigned long long)f_info->qgrp_size & 562949953421312ULL) == 0ULL) {
                                        #line 769 
                                        if (((unsigned long long)f_info->qgrp_size & 281474976710656ULL) == 0ULL) {
                                          #line 769 
                                          if (((unsigned long long)f_info->qgrp_size & 140737488355328ULL) == 0ULL) {
                                            #line 769 
                                            if (((unsigned long long)f_info->qgrp_size & 70368744177664ULL) == 0ULL) {
                                              #line 769 
                                              if (((unsigned long long)f_info->qgrp_size & 35184372088832ULL) == 0ULL) {
                                                #line 769 
                                                if (((unsigned long long)f_info->qgrp_size & 17592186044416ULL) == 0ULL) {
                                                  #line 769 
                                                  if (((unsigned long long)f_info->qgrp_size & 8796093022208ULL) == 0ULL) {
                                                    #line 769 
                                                    if (((unsigned long long)f_info->qgrp_size & 4398046511104ULL) == 0ULL) {
                                                      #line 769 
                                                      if (((unsigned long long)f_info->qgrp_size & 2199023255552ULL) == 0ULL) {
                                                        #line 769 
                                                        if (((unsigned long long)f_info->qgrp_size & 1099511627776ULL) == 0ULL) {
                                                          #line 769 
                                                          if (((unsigned long long)f_info->qgrp_size & 549755813888ULL) == 0ULL) {
                                                            #line 769 
                                                            if (((unsigned long long)f_info->qgrp_size & 274877906944ULL) == 0ULL) {
                                                              #line 769 
                                                              if (((unsigned long long)f_info->qgrp_size & 137438953472ULL) == 0ULL) {
                                                                #line 769 
                                                                if (((unsigned long long)f_info->qgrp_size & 68719476736ULL) == 0ULL) {
                                                                  #line 769 
                                                                  if (
                                                                    ((unsigned long long)f_info->qgrp_size & 34359738368ULL) == 0ULL) {
                                                                    #line 769 
                                                                    if (
                                                                    ((unsigned long long)f_info->qgrp_size & 17179869184ULL) == 0ULL) {
                                                                    #line 769 
                                                                    if (
                                                                    ((unsigned long long)f_info->qgrp_size & 8589934592ULL) == 0ULL) {
                                                                    #line 769 
                                                                    if (
                                                                    ((unsigned long long)f_info->qgrp_size & 4294967296ULL) == 0ULL) {
                                                                    #line 769 
                                                                    if (
                                                                    ((unsigned long long)f_info->qgrp_size & 2147483648ULL) == 0ULL) {
                                                                    #line 769 
                                                                    if (
                                                                    ((unsigned long long)f_info->qgrp_size & 1073741824ULL) == 0ULL) {
                                                                    #line 769 
                                                                    if (
                                                                    ((unsigned long long)f_info->qgrp_size & 536870912ULL) == 0ULL) {
                                                                    #line 769 
                                                                    if (
                                                                    ((unsigned long long)f_info->qgrp_size & 268435456ULL) == 0ULL) {
                                                                    #line 769 
                                                                    if (
                                                                    ((unsigned long long)f_info->qgrp_size & 134217728ULL) == 0ULL) {
                                                                    #line 769 
                                                                    if (
                                                                    ((unsigned long long)f_info->qgrp_size & 67108864ULL) == 0ULL) {
                                                                    #line 769 
                                                                    if (
                                                                    ((unsigned long long)f_info->qgrp_size & 33554432ULL) == 0ULL) {
                                                                    #line 769 
                                                                    if (
                                                                    ((unsigned long long)f_info->qgrp_size & 16777216ULL) == 0ULL) {
                                                                    #line 769 
                                                                    if (
                                                                    ((unsigned long long)f_info->qgrp_size & 8388608ULL) == 0ULL) {
                                                                    #line 769 
                                                                    if (
                                                                    ((unsigned long long)f_info->qgrp_size & 4194304ULL) == 0ULL) {
                                                                    #line 769 
                                                                    if (
                                                                    ((unsigned long long)f_info->qgrp_size & 2097152ULL) == 0ULL) {
                                                                    #line 769 
                                                                    if (
                                                                    ((unsigned long long)f_info->qgrp_size & 1048576ULL) == 0ULL) {
                                                                    #line 769 
                                                                    if (
                                                                    ((unsigned long long)f_info->qgrp_size & 524288ULL) == 0ULL) {
                                                                    #line 769 
                                                                    if (
                                                                    ((unsigned long long)f_info->qgrp_size & 262144ULL) == 0ULL) {
                                                                    #line 769 
                                                                    if (
                                                                    ((unsigned long long)f_info->qgrp_size & 131072ULL) == 0ULL) {
                                                                    #line 769 
                                                                    if (
                                                                    ((unsigned long long)f_info->qgrp_size & 65536ULL) == 0ULL) {
                                                                    #line 769 
                                                                    if (
                                                                    ((unsigned long long)f_info->qgrp_size & 32768ULL) == 0ULL) {
                                                                    #line 769 
                                                                    if (
                                                                    ((unsigned long long)f_info->qgrp_size & 16384ULL) == 0ULL) {
                                                                    #line 769 
                                                                    if (
                                                                    ((unsigned long long)f_info->qgrp_size & 8192ULL) == 0ULL) {
                                                                    #line 769 
                                                                    if (
                                                                    ((unsigned long long)f_info->qgrp_size & 4096ULL) == 0ULL) {
                                                                    #line 769 
                                                                    if (
                                                                    ((unsigned long long)f_info->qgrp_size & 2048ULL) == 0ULL) {
                                                                    #line 769 
                                                                    if (
                                                                    ((unsigned long long)f_info->qgrp_size & 1024ULL) == 0ULL) {
                                                                    #line 769 
                                                                    if (
                                                                    ((unsigned long long)f_info->qgrp_size & 512ULL) == 0ULL) {
                                                                    #line 769 
                                                                    if (
                                                                    ((unsigned long long)f_info->qgrp_size & 256ULL) == 0ULL) {
                                                                    #line 769 
                                                                    if (
                                                                    ((unsigned long long)f_info->qgrp_size & 128ULL) == 0ULL) {
                                                                    #line 769 
                                                                    if (
                                                                    ((unsigned long long)f_info->qgrp_size & 64ULL) == 0ULL) {
                                                                    #line 769 
                                                                    if (
                                                                    ((unsigned long long)f_info->qgrp_size & 32ULL) == 0ULL) {
                                                                    #line 769 
                                                                    if (
                                                                    ((unsigned long long)f_info->qgrp_size & 16ULL) == 0ULL) {
                                                                    #line 769 
                                                                    if (
                                                                    ((unsigned long long)f_info->qgrp_size & 8ULL) == 0ULL) {
                                                                    #line 769 
                                                                    if (
                                                                    ((unsigned long long)f_info->qgrp_size & 4ULL) != 0ULL) 
                                                                    #line 769 
                                                                    tmp = 2U; else 
                                                                    #line 769 
                                                                    tmp = 1U;
                                                                    #line 769 
                                                                    tmp_0 = tmp;
                                                                    }
                                                                    else 
                                                                    #line 769 
                                                                    tmp_0 = 3U;
                                                                    #line 769 
                                                                    tmp_1 = tmp_0;
                                                                    }
                                                                    else 
                                                                    #line 769 
                                                                    tmp_1 = 4U;
                                                                    #line 769 
                                                                    tmp_2 = tmp_1;
                                                                    }
                                                                    else 
                                                                    #line 769 
                                                                    tmp_2 = 5U;
                                                                    #line 769 
                                                                    tmp_3 = tmp_2;
                                                                    }
                                                                    else 
                                                                    #line 769 
                                                                    tmp_3 = 6U;
                                                                    #line 769 
                                                                    tmp_4 = tmp_3;
                                                                    }
                                                                    else 
                                                                    #line 769 
                                                                    tmp_4 = 7U;
                                                                    #line 769 
                                                                    tmp_5 = tmp_4;
                                                                    }
                                                                    else 
                                                                    #line 769 
                                                                    tmp_5 = 8U;
                                                                    #line 769 
                                                                    tmp_6 = tmp_5;
                                                                    }
                                                                    else 
                                                                    #line 769 
                                                                    tmp_6 = 9U;
                                                                    #line 769 
                                                                    tmp_7 = tmp_6;
                                                                    }
                                                                    else 
                                                                    #line 769 
                                                                    tmp_7 = 10U;
                                                                    #line 769 
                                                                    tmp_8 = tmp_7;
                                                                    }
                                                                    else 
                                                                    #line 769 
                                                                    tmp_8 = 11U;
                                                                    #line 769 
                                                                    tmp_9 = tmp_8;
                                                                    }
                                                                    else 
                                                                    #line 769 
                                                                    tmp_9 = 12U;
                                                                    #line 769 
                                                                    tmp_10 = tmp_9;
                                                                    }
                                                                    else 
                                                                    #line 769 
                                                                    tmp_10 = 13U;
                                                                    #line 769 
                                                                    tmp_11 = tmp_10;
                                                                    }
                                                                    else 
                                                                    #line 769 
                                                                    tmp_11 = 14U;
                                                                    #line 769 
                                                                    tmp_12 = tmp_11;
                                                                    }
                                                                    else 
                                                                    #line 769 
                                                                    tmp_12 = 15U;
                                                                    #line 769 
                                                                    tmp_13 = tmp_12;
                                                                    }
                                                                    else 
                                                                    #line 769 
                                                                    tmp_13 = 16U;
                                                                    #line 769 
                                                                    tmp_14 = tmp_13;
                                                                    }
                                                                    else 
                                                                    #line 769 
                                                                    tmp_14 = 17U;
                                                                    #line 769 
                                                                    tmp_15 = tmp_14;
                                                                    }
                                                                    else 
                                                                    #line 769 
                                                                    tmp_15 = 18U;
                                                                    #line 769 
                                                                    tmp_16 = tmp_15;
                                                                    }
                                                                    else 
                                                                    #line 769 
                                                                    tmp_16 = 19U;
                                                                    #line 769 
                                                                    tmp_17 = tmp_16;
                                                                    }
                                                                    else 
                                                                    #line 769 
                                                                    tmp_17 = 20U;
                                                                    #line 769 
                                                                    tmp_18 = tmp_17;
                                                                    }
                                                                    else 
                                                                    #line 769 
                                                                    tmp_18 = 21U;
                                                                    #line 769 
                                                                    tmp_19 = tmp_18;
                                                                    }
                                                                    else 
                                                                    #line 769 
                                                                    tmp_19 = 22U;
                                                                    #line 769 
                                                                    tmp_20 = tmp_19;
                                                                    }
                                                                    else 
                                                                    #line 769 
                                                                    tmp_20 = 23U;
                                                                    #line 769 
                                                                    tmp_21 = tmp_20;
                                                                    }
                                                                    else 
                                                                    #line 769 
                                                                    tmp_21 = 24U;
                                                                    #line 769 
                                                                    tmp_22 = tmp_21;
                                                                    }
                                                                    else 
                                                                    #line 769 
                                                                    tmp_22 = 25U;
                                                                    #line 769 
                                                                    tmp_23 = tmp_22;
                                                                    }
                                                                    else 
                                                                    #line 769 
                                                                    tmp_23 = 26U;
                                                                    #line 769 
                                                                    tmp_24 = tmp_23;
                                                                    }
                                                                    else 
                                                                    #line 769 
                                                                    tmp_24 = 27U;
                                                                    #line 769 
                                                                    tmp_25 = tmp_24;
                                                                    }
                                                                    else 
                                                                    #line 769 
                                                                    tmp_25 = 28U;
                                                                    #line 769 
                                                                    tmp_26 = tmp_25;
                                                                    }
                                                                    else 
                                                                    #line 769 
                                                                    tmp_26 = 29U;
                                                                    #line 769 
                                                                    tmp_27 = tmp_26;
                                                                    }
                                                                    else 
                                                                    #line 769 
                                                                    tmp_27 = 30U;
                                                                    #line 769 
                                                                    tmp_28 = tmp_27;
                                                                    }
                                                                    else 
                                                                    #line 769 
                                                                    tmp_28 = 31U;
                                                                    #line 769 
                                                                    tmp_29 = tmp_28;
                                                                    }
                                                                    else 
                                                                    #line 769 
                                                                    tmp_29 = 32U;
                                                                    #line 769 
                                                                    tmp_30 = tmp_29;
                                                                    }
                                                                    else 
                                                                    #line 769 
                                                                    tmp_30 = 33U;
                                                                    #line 769 
                                                                    tmp_31 = tmp_30;
                                                                    }
                                                                    else 
                                                                    #line 769 
                                                                    tmp_31 = 34U;
                                                                    #line 769 
                                                                    tmp_32 = tmp_31;
                                                                  }
                                                                  else 
                                                                    #line 769 
                                                                    tmp_32 = 35U;
                                                                  #line 769 
                                                                  tmp_33 = tmp_32;
                                                                }
                                                                else 
                                                                  #line 769 
                                                                  tmp_33 = 36U;
                                                                #line 769 
                                                                tmp_34 = tmp_33;
                                                              }
                                                              else 
                                                                   #line 769 
                                                                   tmp_34 = 37U;
                                                              #line 769 
                                                              tmp_35 = tmp_34;
                                                            }
                                                            else 
                                                                 #line 769 
                                                                 tmp_35 = 38U;
                                                            #line 769 
                                                            tmp_36 = tmp_35;
                                                          }
                                                          else 
                                                               #line 769 
                                                               tmp_36 = 39U;
                                                          #line 769 
                                                          tmp_37 = tmp_36;
                                                        }
                                                        else 
                                                             #line 769 
                                                             tmp_37 = 40U;
                                                        #line 769 
                                                        tmp_38 = tmp_37;
                                                      }
                                                      else 
                                                           #line 769 
                                                           tmp_38 = 41U;
                                                      #line 769 
                                                      tmp_39 = tmp_38;
                                                    }
                                                    else 
                                                         #line 769 
                                                         tmp_39 = 42U;
                                                    #line 769 
                                                    tmp_40 = tmp_39;
                                                  }
                                                  else 
                                                       #line 769 
                                                       tmp_40 = 43U;
                                                  #line 769 
                                                  tmp_41 = tmp_40;
                                                }
                                                else 
                                                     #line 769 
                                                     tmp_41 = 44U;
                                                #line 769 
                                                tmp_42 = tmp_41;
                                              }
                                              else 
                                                   #line 769 
                                                   tmp_42 = 45U;
                                              #line 769 
                                              tmp_43 = tmp_42;
                                            }
                                            else 
                                                 #line 769 
                                                 tmp_43 = 46U;
                                            #line 769 
                                            tmp_44 = tmp_43;
                                          }
                                          else 
                                               #line 769 
                                               tmp_44 = 47U;
                                          #line 769 
                                          tmp_45 = tmp_44;
                                        }
                                        else 
                                             #line 769 
                                             tmp_45 = 48U;
                                        #line 769 
                                        tmp_46 = tmp_45;
                                      }
                                      else 
                                           #line 769 
                                           tmp_46 = 49U;
                                      #line 769 
                                      tmp_47 = tmp_46;
                                    }
                                    else 
                                         #line 769 
                                         tmp_47 = 50U;
                                    #line 769 
                                    tmp_48 = tmp_47;
                                  }
                                  else 
                                       #line 769 
                                       tmp_48 = 51U;
                                  #line 769 
                                  tmp_49 = tmp_48;
                                }
                                else 
                                     #line 769 
                                     tmp_49 = 52U;
                                #line 769 
                                tmp_50 = tmp_49;
                              }
                              else 
                                   #line 769 
                                   tmp_50 = 53U;
                              #line 769 
                              tmp_51 = tmp_50;
                            }
                            else 
                                 #line 769 
                                 tmp_51 = 54U;
                            #line 769 
                            tmp_52 = tmp_51;
                          }
                          else 
                               #line 769 
                               tmp_52 = 55U;
                          #line 769 
                          tmp_53 = tmp_52;
                        }
                        else 
                             #line 769 
                             tmp_53 = 56U;
                        #line 769 
                        tmp_54 = tmp_53;
                      }
                      else 
                           #line 769 
                           tmp_54 = 57U;
                      #line 769 
                      tmp_55 = tmp_54;
                    }
                    else 
                         #line 769 
                         tmp_55 = 58U;
                    #line 769 
                    tmp_56 = tmp_55;
                  }
                  else 
                       #line 769 
                       tmp_56 = 59U;
                  #line 769 
                  tmp_57 = tmp_56;
                }
                else 
                     #line 769 
                     tmp_57 = 60U;
                #line 769 
                tmp_58 = tmp_57;
              }
              else 
                   #line 769 
                   tmp_58 = 61U;
              #line 769 
              tmp_59 = tmp_58;
            }
            else 
                 #line 769 
                 tmp_59 = 62U;
            #line 769 
            tmp_60 = tmp_59;
          }
          else 
               #line 769 
               tmp_60 = 63U;
          #line 769 
          tmp_61 = tmp_60;
        }
        else 
             #line 769 
             tmp_61 = 0U;
        #line 768 
        tmp_63 = tmp_61;
      }
      else {
        #line 768 
        tmp_63 = (unsigned int)((unsigned char)__ilog2_u32((unsigned int)f_info->qgrp_size));
      }
      #line 768 
      q_rgn = (unsigned char)tmp_63;
    }
    else 
         #line 768 
         q_rgn = (unsigned char)0U;
    #line 770 
    act |= 1U;
    #line 771 
    act = ((unsigned int)((int)f_info->fwd_id.q_id << 4) & 32752U) | act;
    #line 773 
    act = ((unsigned int)((int)q_rgn << 15) & 229376U) | act;
    #line 775 
    break;
    #line 776 
    default: 
             #line 776 
    ;
    #line 777 
    return;
  }
  #line 780 
  if ((unsigned int)f_info->lb_en != 0U) 
                                         #line 781 
                                         act |= 4U;
  #line 782 
  if ((unsigned int)f_info->lan_en != 0U) 
                                          #line 783 
                                          act |= 8U;
  #line 785 
  switch ((unsigned int)f_info->lkup_type) {
    #line 786 
    case (unsigned int)1: 
                          #line 786 
    ;
    #line 787 
    daddr = (void *)(& f_info->l_data.mac.mac_addr);
    #line 788 
    break;
    #line 789 
    case (unsigned int)4: 
                          #line 789 
    ;
    #line 790 
    vlan_id = f_info->l_data.vlan.vlan_id;
    #line 791 
    if (f_info->fltr_act <= (unsigned int)ICE_FWD_TO_VSI_LIST) {
      #line 793 
      act |= 2U;
      #line 794 
      act |= 98304U;
    }
    #line 796 
    break;
    #line 797 
    case (unsigned int)8: 
                          #line 797 
    ;
    #line 798 
    daddr = (void *)(& f_info->l_data.ethertype_mac.mac_addr);
    #line 800 
    case (unsigned int)0: 
                          #line 800 
    ;
    #line 801 
    off = (__be16 *)(eth_hdr + 12U);
    #line 802 
    *off = __builtin_bswap16((unsigned short)((int)f_info->l_data.ethertype_mac.ethertype));
    #line 803 
    break;
    #line 804 
    case (unsigned int)2: 
                          #line 804 
    ;
    #line 805 
    daddr = (void *)(& f_info->l_data.mac_vlan.mac_addr);
    #line 806 
    vlan_id = f_info->l_data.mac_vlan.vlan_id;
    #line 807 
    break;
    #line 808 
    case (unsigned int)9: 
                          #line 808 
    ;
    #line 809 
    vlan_id = f_info->l_data.mac_vlan.vlan_id;
    #line 811 
    case (unsigned int)3: 
                          #line 811 
    ;
    #line 812 
    daddr = (void *)(& f_info->l_data.mac_vlan.mac_addr);
    #line 813 
    break;
    #line 814 
    default: 
             #line 814 
    ;
    #line 815 
    break;
  }
  #line 818 
  s_rule->type = (unsigned short)(((unsigned long)f_info->flag & 1UL) == 0UL);
  #line 823 
  s_rule->pdata.lkup_tx_rx.recipe_id = (unsigned short)f_info->lkup_type;
  #line 824 
  s_rule->pdata.lkup_tx_rx.src = f_info->src;
  #line 825 
  s_rule->pdata.lkup_tx_rx.act = act;
  #line 827 
  if (daddr != (void *)0) 
                          #line 828 
                          ether_addr_copy(eth_hdr,(u8 *)daddr);
  #line 830 
  if ((unsigned int)vlan_id <= 4095U) {
    #line 831 
    off = (__be16 *)(eth_hdr + 14U);
    #line 832 
    *off = __builtin_bswap16((unsigned short)((int)vlan_id));
  }
  #line 836 
  if (opc != (unsigned int)ice_aqc_opc_update_sw_rules) 
                                                        #line 837 
                                                        s_rule->pdata.lkup_tx_rx.hdr_len = eth_hdr_sz;
  #line 838 
  return;
}

#line 851  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_switch.c"
static enum ice_status ice_add_marker_act(struct ice_hw *hw, struct ice_fltr_mgmt_list_entry *m_ent, u16 sw_marker, u16 l_id)
{
  #line 877 
  void *__mptr;
  #line 941 
  void *__mptr_0;
  #line 854 
  struct ice_aqc_sw_rules_elem *lg_act;
  #line 854 
  struct ice_aqc_sw_rules_elem *rx_tx;
  #line 861 
  enum ice_status status;
  #line 862 
  u16 lg_act_size;
  #line 863 
  u16 rules_size;
  #line 864 
  u32 act;
  #line 865 
  u16 id;
  #line 860 
  u16 num_lg_acts = (unsigned short)3U;
  #line 867 
  if (m_ent->fltr_info.lkup_type != (unsigned int)ICE_SW_LKUP_MAC) 
                                                                   #line 868 
                                                                   return ICE_ERR_PARAM;
  #line 875 
  lg_act_size = (unsigned short)20U;
  #line 876 
  rules_size = (unsigned short)((unsigned int)lg_act_size + 32U);
  #line 877 
  ;
  #line 877 
  __mptr = (void *)hw;
  #line 877 
  lg_act = (struct ice_aqc_sw_rules_elem *)cif_devm_kzalloc_1(& (((struct ice_pf *)(__mptr + 18446744073709549512U))->pdev)->dev,
                           (unsigned long)rules_size,3264U);
  #line 878 
  if (lg_act == (struct ice_aqc_sw_rules_elem *)0) 
                                                   #line 879 
                                                   return ICE_ERR_NO_MEMORY;
  #line 881 
  rx_tx = (struct ice_aqc_sw_rules_elem *)((u8 *)lg_act + (unsigned long)lg_act_size);
  #line 884 
  lg_act->type = (unsigned short)2U;
  #line 885 
  lg_act->pdata.lg_act.index = l_id;
  #line 886 
  lg_act->pdata.lg_act.size = (unsigned short)3U;
  #line 891 
  if ((unsigned int)m_ent->vsi_count > 1U) 
                                           #line 891 
                                           id = (unsigned short)m_ent->fltr_info.fwd_id.vsi_list_id; else 
                                                                    #line 891 
                                                                    id = (unsigned short)m_ent->fltr_info.fwd_id.hw_vsi_id;
  #line 894 
  act = 65536U;
  #line 895 
  act = ((unsigned int)((int)id << 3) & 8184U) | act;
  #line 897 
  if ((unsigned int)m_ent->vsi_count > 1U) 
                                           #line 898 
                                           act |= 8192U;
  #line 899 
  lg_act->pdata.lg_act.act[0] = act;
  #line 902 
  act = 5U;
  #line 904 
  act |= 8U;
  #line 905 
  lg_act->pdata.lg_act.act[1] = act;
  #line 907 
  act = 3670016U;
  #line 911 
  act |= 5U;
  #line 912 
  act = ((unsigned int)((int)sw_marker << 3) & 524280U) | act;
  #line 915 
  lg_act->pdata.lg_act.act[2] = act;
  #line 918 
  ice_fill_sw_rule(hw,& m_ent->fltr_info,rx_tx,(enum ice_adminq_opc)ice_aqc_opc_update_sw_rules);
  #line 922 
  rx_tx->pdata.lkup_tx_rx.act = (unsigned int)((((int)l_id << 4) & 131056) | 2);
  #line 931 
  rx_tx->pdata.lkup_tx_rx.index = m_ent->fltr_info.fltr_rule_id;
  #line 934 
  status = ice_aq_sw_rules(hw,(void *)lg_act,(unsigned short)((int)rules_size),(unsigned char)2,(enum ice_adminq_opc)ice_aqc_opc_update_sw_rules,(struct ice_sq_cd *)0);
  #line 936 
  if (status == ICE_SUCCESS) {
    #line 937 
    m_ent->lg_act_idx = l_id;
    #line 938 
    m_ent->sw_marker_id = sw_marker;
  }
  #line 941 
  ;
  #line 941 
  __mptr_0 = (void *)hw;
  #line 941 
  devm_kfree(& (((struct ice_pf *)(__mptr_0 + 18446744073709549512U))->pdev)->dev,(void *)lg_act);
  #line 942 
  return status;
}

#line 956  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_switch.c"
static struct ice_vsi_list_map_info *ice_create_vsi_list_map(struct ice_hw *hw, u16 *vsi_handle_arr, u16 num_vsi, u16 vsi_list_id)
{
  #line 963 
  void *__mptr;
  #line 960 
  struct ice_vsi_list_map_info *v_map;
  #line 961 
  int i;
  #line 959 
  struct ice_switch_info *sw = hw->switch_info;
  #line 963 
  __mptr = (void *)hw;
  #line 963 
  v_map = (struct ice_vsi_list_map_info *)cif_devm_kcalloc_0(& (((struct ice_pf *)(__mptr + 18446744073709549512U))->pdev)->dev,
                           1UL,120UL,3264U);
  #line 964 
  if (v_map == (struct ice_vsi_list_map_info *)0) 
                                                  #line 965 
                                                  return (struct ice_vsi_list_map_info *)0;
  #line 967 
  v_map->vsi_list_id = vsi_list_id;
  #line 968 
  v_map->ref_cnt = (unsigned short)1U;
  #line 969 
  i = 0;
  #line 969 
  while ((int)num_vsi > i) {
    #line 970 
    cif_set_bit_2((long)*(vsi_handle_arr + (unsigned long)i),(unsigned long *)(& v_map->vsi_map));
    #line 969 
    i ++;
  }
  #line 972 
  list_add(& v_map->list_entry,& sw->vsi_list_map_head);
  #line 973 
  return v_map;
}

#line 990  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_switch.c"
static enum ice_status ice_update_vsi_list_rule(struct ice_hw *hw, u16 *vsi_handle_arr, u16 num_vsi, u16 vsi_list_id, bool remove, enum ice_adminq_opc opc, enum ice_sw_lkup_type lkup_type)
{
  #line 1038 
  void *__mptr_0;
  #line 1018 
  void *__mptr;
  #line 994 
  struct ice_aqc_sw_rules_elem *s_rule;
  #line 995 
  enum ice_status status;
  #line 996 
  u16 s_rule_size;
  #line 997 
  u16 type;
  #line 998 
  int i;
  #line 1000 
  if ((unsigned int)num_vsi == 0U) 
                                   #line 1001 
                                   return ICE_ERR_PARAM;
  #line 1003 
  if ((lkup_type <= (unsigned int)ICE_SW_LKUP_MAC_VLAN || lkup_type == (unsigned int)ICE_SW_LKUP_ETHERTYPE_MAC) || (lkup_type == (unsigned int)ICE_SW_LKUP_PROMISC || lkup_type == (unsigned int)ICE_SW_LKUP_PROMISC_VLAN)) 
    #line 1009 
    if ((int)remove != 0) 
                          #line 1009 
                          type = (unsigned short)4U; else 
                                                          #line 1009 
                                                          type = (unsigned short)3U;
  else 
    #line 1011 
    if (lkup_type == (unsigned int)ICE_SW_LKUP_VLAN) 
      #line 1012 
      if ((int)remove != 0) 
                            #line 1012 
                            type = (unsigned short)6U; else 
                                                            #line 1012 
                                                            type = (unsigned short)5U;
    else 
         #line 1015 
         return ICE_ERR_PARAM;
  #line 1017 
  s_rule_size = (unsigned short)(((unsigned int)num_vsi + 4U) * 2U);
  #line 1018 
  ;
  #line 1018 
  __mptr = (void *)hw;
  #line 1018 
  s_rule = (struct ice_aqc_sw_rules_elem *)cif_devm_kzalloc_1(& (((struct ice_pf *)(__mptr + 18446744073709549512U))->pdev)->dev,
                           (unsigned long)s_rule_size,3264U);
  #line 1019 
  if (s_rule == (struct ice_aqc_sw_rules_elem *)0) 
                                                   #line 1020 
                                                   return ICE_ERR_NO_MEMORY;
  #line 1021 
  i = 0;
  #line 1021 
  while ((int)num_vsi > i) {
    {
      #line 1022 
      if (! ice_is_vsi_valid(hw,
                         (unsigned short)((int)*(vsi_handle_arr + (unsigned long)i)))) {
        #line 1023 
        status = ICE_ERR_PARAM;
        #line 1024 
        goto exit;
      }
      #line 1028 
      s_rule->pdata.vsi_list.vsi[i] = ice_get_hw_vsi_num(hw,(unsigned short)((int)*(vsi_handle_arr + (unsigned long)i)));
    }
    #line 1021 
    i ++;
  }
  #line 1031 
  s_rule->type = type;
  #line 1032 
  s_rule->pdata.vsi_list.number_vsi = num_vsi;
  #line 1033 
  s_rule->pdata.vsi_list.index = vsi_list_id;
  #line 1035 
  status = ice_aq_sw_rules(hw,(void *)s_rule,(unsigned short)((int)s_rule_size),(unsigned char)1,opc,(struct ice_sq_cd *)0);
  #line 1037 
  exit: 
        #line 1037 
  ;
  #line 1038 
  ;
  #line 1038 
  __mptr_0 = (void *)hw;
  #line 1038 
  devm_kfree(& (((struct ice_pf *)(__mptr_0 + 18446744073709549512U))->pdev)->dev,(void *)s_rule);
  #line 1039 
  return status;
}

#line 1051  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_switch.c"
static enum ice_status ice_create_vsi_list_rule(struct ice_hw *hw, u16 *vsi_handle_arr, u16 num_vsi, u16 *vsi_list_id, enum ice_sw_lkup_type lkup_type)
{
  #line 1054 
  enum ice_status status;
  #line 1056 
  status = ice_aq_alloc_free_vsi_list(hw,vsi_list_id,lkup_type,(enum ice_adminq_opc)ice_aqc_opc_alloc_res);
  #line 1058 
  if (status != ICE_SUCCESS) 
                             #line 1059 
                             return status;
  #line 1062 
  return ice_update_vsi_list_rule(hw,vsi_handle_arr,
                               (unsigned short)((int)num_vsi),
                               (unsigned short)((int)*vsi_list_id),(_Bool)0,
                               (enum ice_adminq_opc)ice_aqc_opc_add_sw_rules,
                               lkup_type);
}

#line 1077  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_switch.c"
static enum ice_status ice_create_pkt_fwd_rule(struct ice_hw *hw, struct ice_fltr_list_entry *f_entry)
{
  #line 1086 
  void *__mptr;
  #line 1128 
  void *__mptr_2;
  #line 1090 
  void *__mptr_0;
  #line 1080 
  struct ice_fltr_mgmt_list_entry *fm_entry;
  #line 1081 
  struct ice_aqc_sw_rules_elem *s_rule;
  #line 1082 
  enum ice_sw_lkup_type l_type;
  #line 1083 
  struct ice_sw_recipe *recp;
  #line 1084 
  enum ice_status status;
  #line 1086 
  __mptr = (void *)hw;
  #line 1086 
  s_rule = (struct ice_aqc_sw_rules_elem *)cif_devm_kzalloc_1(& (((struct ice_pf *)(__mptr + 18446744073709549512U))->pdev)->dev,
                           32UL,3264U);
  #line 1088 
  if (s_rule == (struct ice_aqc_sw_rules_elem *)0) 
                                                   #line 1089 
                                                   return ICE_ERR_NO_MEMORY;
  #line 1090 
  __mptr_0 = (void *)hw;
  #line 1090 
  fm_entry = (struct ice_fltr_mgmt_list_entry *)cif_devm_kzalloc_1(& (((struct ice_pf *)(__mptr_0 + 18446744073709549512U))->pdev)->dev,
                           72UL,3264U);
  #line 1092 
  if (fm_entry == (struct ice_fltr_mgmt_list_entry *)0) {
    #line 1093 
    status = ICE_ERR_NO_MEMORY;
    #line 1094 
    goto ice_create_pkt_fwd_rule_exit;
  }
  #line 1097 
  fm_entry->fltr_info = f_entry->fltr_info;
  #line 1100 
  fm_entry->vsi_count = (unsigned short)1U;
  #line 1101 
  fm_entry->lg_act_idx = (unsigned short)65535U;
  #line 1102 
  fm_entry->sw_marker_id = (unsigned short)65535U;
  #line 1103 
  fm_entry->counter_index = (unsigned char)255U;
  #line 1105 
  ice_fill_sw_rule(hw,& fm_entry->fltr_info,s_rule,(enum ice_adminq_opc)ice_aqc_opc_add_sw_rules);
  #line 1108 
  status = ice_aq_sw_rules(hw,(void *)s_rule,(unsigned short)32,(unsigned char)1,(enum ice_adminq_opc)ice_aqc_opc_add_sw_rules,(struct ice_sq_cd *)0);
  #line 1110 
  if (status != ICE_SUCCESS) {
    #line 1111 
    void *__mptr_1;
    #line 1111 
    ;
    #line 1111 
    __mptr_1 = (void *)hw;
    #line 1111 
    devm_kfree(& (((struct ice_pf *)(__mptr_1 + 18446744073709549512U))->pdev)->dev,(void *)fm_entry);
    #line 1112 
    goto ice_create_pkt_fwd_rule_exit;
  }
  #line 1115 
  f_entry->fltr_info.fltr_rule_id = s_rule->pdata.lkup_tx_rx.index;
  #line 1117 
  fm_entry->fltr_info.fltr_rule_id = s_rule->pdata.lkup_tx_rx.index;
  #line 1123 
  l_type = fm_entry->fltr_info.lkup_type;
  #line 1124 
  recp = (hw->switch_info)->recp_list + (unsigned long)l_type;
  #line 1125 
  list_add(& fm_entry->list_entry,& recp->filt_rules);
  #line 1127 
  ice_create_pkt_fwd_rule_exit: 
                                #line 1127 
  ;
  #line 1128 
  ;
  #line 1128 
  __mptr_2 = (void *)hw;
  #line 1128 
  devm_kfree(& (((struct ice_pf *)(__mptr_2 + 18446744073709549512U))->pdev)->dev,(void *)s_rule);
  #line 1129 
  return status;
}

#line 1141  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_switch.c"
static enum ice_status ice_update_pkt_fwd_rule(struct ice_hw *hw, struct ice_fltr_info *f_info)
{
  #line 1159 
  void *__mptr_0;
  #line 1146 
  void *__mptr;
  #line 1143 
  struct ice_aqc_sw_rules_elem *s_rule;
  #line 1144 
  enum ice_status status;
  #line 1146 
  __mptr = (void *)hw;
  #line 1146 
  s_rule = (struct ice_aqc_sw_rules_elem *)cif_devm_kzalloc_1(& (((struct ice_pf *)(__mptr + 18446744073709549512U))->pdev)->dev,
                           32UL,3264U);
  #line 1148 
  if (s_rule == (struct ice_aqc_sw_rules_elem *)0) 
                                                   #line 1149 
                                                   return ICE_ERR_NO_MEMORY;
  #line 1151 
  ice_fill_sw_rule(hw,f_info,s_rule,(enum ice_adminq_opc)ice_aqc_opc_update_sw_rules);
  #line 1153 
  s_rule->pdata.lkup_tx_rx.index = f_info->fltr_rule_id;
  #line 1156 
  status = ice_aq_sw_rules(hw,(void *)s_rule,(unsigned short)32,(unsigned char)1,(enum ice_adminq_opc)ice_aqc_opc_update_sw_rules,(struct ice_sq_cd *)0);
  #line 1159 
  ;
  #line 1159 
  __mptr_0 = (void *)hw;
  #line 1159 
  devm_kfree(& (((struct ice_pf *)(__mptr_0 + 18446744073709549512U))->pdev)->dev,(void *)s_rule);
  #line 1160 
  return status;
}

#line 1169  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_switch.c"
enum ice_status ice_update_sw_rule_bridge_mode(struct ice_hw *hw)
{
  #line 1181 
  void *__mptr;
  #line 1172 
  struct ice_fltr_mgmt_list_entry *fm_entry;
  #line 1174 
  struct list_head *rule_head;
  #line 1175 
  struct mutex *rule_lock;
  #line 1171 
  struct ice_switch_info *sw = hw->switch_info;
  #line 1173 
  enum ice_status status = 0;
  #line 1177 
  rule_lock = & (sw->recp_list + 1U)->filt_rule_lock;
  #line 1178 
  rule_head = & (sw->recp_list + 1U)->filt_rules;
  #line 1180 
  cif_mutex_lock_rule_lock(rule_lock);
  #line 1181 
  __mptr = (void *)rule_head->next;
  #line 1181 
  fm_entry = ((struct ice_fltr_mgmt_list_entry *)(__mptr + 18446744073709551600U));
  #line 1181 
  while (& fm_entry->list_entry != rule_head) {
    #line 1181 
    void *__mptr_0;
    {
      #line 1182 
      struct ice_fltr_info *fi = & fm_entry->fltr_info;
      #line 1183 
      u8 *addr = (u8 *)(& fi->l_data.mac.mac_addr);
      #line 1188 
      if (((unsigned long)fi->flag & 2UL) != 0UL) {
        #line 1188 
        if ((int)is_unicast_ether_addr(addr) != 0) 
          #line 1188 
          if (fi->fltr_act <= (unsigned int)ICE_FWD_TO_QGRP) {
            #line 1193 
            status = ice_update_pkt_fwd_rule(hw,fi);
            #line 1194 
            if (status != ICE_SUCCESS) 
                                       #line 1195 
                                       break;
          }
      }
    }
    #line 1181 
    __mptr_0 = (void *)fm_entry->list_entry.next;
    #line 1181 
    fm_entry = ((struct ice_fltr_mgmt_list_entry *)(__mptr_0 + 18446744073709551600U));
  }
  #line 1199 
  cif_mutex_unlock_rule_lock(rule_lock);
  #line 1201 
  return status;
}

#line 1226  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_switch.c"
static enum ice_status ice_add_update_vsi_list(struct ice_hw *hw, struct ice_fltr_mgmt_list_entry *m_entry, struct ice_fltr_info *cur_fltr, struct ice_fltr_info *new_fltr)
{
  #line 1231 
  enum ice_status status = 0;
  #line 1232 
  u16 vsi_list_id = (unsigned short)0U;
  #line 1234 
  if ((unsigned int)cur_fltr->fltr_act + 4294967294U <= 1U) 
                                                            #line 1236 
                                                            return ICE_ERR_NOT_IMPL;
  #line 1238 
  if ((unsigned int)new_fltr->fltr_act + 4294967294U <= 1U && cur_fltr->fltr_act <= (unsigned int)ICE_FWD_TO_VSI_LIST) 
    #line 1242 
    return ICE_ERR_NOT_IMPL;
  #line 1244 
  if ((unsigned int)m_entry->vsi_count <= 1U && m_entry->vsi_list_info == (struct ice_vsi_list_map_info *)0) {
    #line 1249 
    struct ice_fltr_info tmp_fltr;
    #line 1250 
    u16 vsi_handle_arr[2U];
    #line 1253 
    if ((int)cur_fltr->fwd_id.hw_vsi_id == (int)new_fltr->fwd_id.hw_vsi_id) 
      #line 1254 
      return ICE_ERR_ALREADY_EXISTS;
    #line 1256 
    vsi_handle_arr[0] = cur_fltr->vsi_handle;
    #line 1257 
    vsi_handle_arr[1] = new_fltr->vsi_handle;
    #line 1258 
    status = ice_create_vsi_list_rule(hw,vsi_handle_arr,(unsigned short)2,& vsi_list_id,new_fltr->lkup_type);
    #line 1261 
    if (status != ICE_SUCCESS) 
                               #line 1262 
                               return status;
    #line 1264 
    tmp_fltr = *new_fltr;
    #line 1265 
    tmp_fltr.fltr_rule_id = cur_fltr->fltr_rule_id;
    #line 1266 
    tmp_fltr.fltr_act = ICE_FWD_TO_VSI_LIST;
    #line 1267 
    tmp_fltr.fwd_id.vsi_list_id = (unsigned short)vsi_list_id;
    #line 1271 
    status = ice_update_pkt_fwd_rule(hw,& tmp_fltr);
    #line 1272 
    if (status != ICE_SUCCESS) 
                               #line 1273 
                               return status;
    #line 1275 
    cur_fltr->fwd_id.vsi_list_id = (unsigned short)vsi_list_id;
    #line 1276 
    cur_fltr->fltr_act = ICE_FWD_TO_VSI_LIST;
    #line 1277 
    m_entry->vsi_list_info = ice_create_vsi_list_map(hw,vsi_handle_arr,(unsigned short)2,(unsigned short)((int)vsi_list_id));
    #line 1284 
    if ((unsigned int)m_entry->sw_marker_id != 65535U) 
                                                       #line 1285 
                                                       status = ice_add_marker_act(hw,m_entry,(unsigned short)((int)m_entry->sw_marker_id),(unsigned short)((int)m_entry->lg_act_idx));
  }
  else {
    #line 1291 
    enum ice_adminq_opc opcode;
    #line 1290 
    u16 vsi_handle = new_fltr->vsi_handle;
    #line 1293 
    if (m_entry->vsi_list_info == (struct ice_vsi_list_map_info *)0) 
      #line 1294 
      return ICE_ERR_CFG;
    #line 1297 
    if ((int)test_bit((long)vsi_handle,
               (unsigned long *)(& (m_entry->vsi_list_info)->vsi_map)) != 0) 
      #line 1298 
      return ICE_SUCCESS;
    #line 1303 
    vsi_list_id = (unsigned short)cur_fltr->fwd_id.vsi_list_id;
    #line 1304 
    opcode = ice_aqc_opc_update_sw_rules;
    #line 1306 
    status = ice_update_vsi_list_rule(hw,& vsi_handle,(unsigned short)1,(unsigned short)((int)vsi_list_id),(_Bool)0,opcode,new_fltr->lkup_type);
    #line 1310 
    if (status == ICE_SUCCESS) 
                               #line 1311 
                               cif_set_bit_2((long)vsi_handle,(unsigned long *)(& (m_entry->vsi_list_info)->vsi_map));
  }
  #line 1313 
  if (status == ICE_SUCCESS) 
                             #line 1314 
                             m_entry->vsi_count = (u16)((int)m_entry->vsi_count + 1);
  #line 1315 
  return status;
}

#line 1328  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_switch.c"
static struct ice_fltr_mgmt_list_entry *ice_find_rule_entry(struct ice_hw *hw, u8 recp_id, struct ice_fltr_info *f_info)
{
  #line 1335 
  void *__mptr;
  #line 1330 
  struct ice_fltr_mgmt_list_entry *list_itr;
  #line 1332 
  struct list_head *list_head;
  #line 1330 
  struct ice_fltr_mgmt_list_entry *ret = (struct ice_fltr_mgmt_list_entry *)0;
  #line 1331 
  struct ice_switch_info *sw = hw->switch_info;
  #line 1334 
  list_head = & (sw->recp_list + (unsigned long)recp_id)->filt_rules;
  #line 1335 
  __mptr = (void *)list_head->next;
  #line 1335 
  list_itr = ((struct ice_fltr_mgmt_list_entry *)(__mptr + 18446744073709551600U));
  #line 1335 
  while (& list_itr->list_entry != list_head) {
    #line 1335 
    void *__mptr_0;
    #line 1336 
    if (memcmp((void *)(& f_info->l_data),
               (void *)(& list_itr->fltr_info.l_data),8UL) == 0) 
      #line 1337 
      if ((int)f_info->flag == (int)list_itr->fltr_info.flag) {
        #line 1339 
        ret = list_itr;
        #line 1340 
        break;
      }
    #line 1335 
    __mptr_0 = (void *)list_itr->list_entry.next;
    #line 1335 
    list_itr = ((struct ice_fltr_mgmt_list_entry *)(__mptr_0 + 18446744073709551600U));
  }
  #line 1343 
  return ret;
}

#line 1358  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_switch.c"
static struct ice_vsi_list_map_info *ice_find_vsi_list_entry(struct ice_hw *hw, u8 recp_id, u16 vsi_handle, u16 *vsi_list_id)
{
  #line 1367 
  void *__mptr;
  #line 1363 
  struct ice_fltr_mgmt_list_entry *list_itr;
  #line 1364 
  struct list_head *list_head;
  #line 1361 
  struct ice_vsi_list_map_info *map_info = (struct ice_vsi_list_map_info *)0;
  #line 1362 
  struct ice_switch_info *sw = hw->switch_info;
  #line 1366 
  list_head = & (sw->recp_list + (unsigned long)recp_id)->filt_rules;
  #line 1367 
  __mptr = (void *)list_head->next;
  #line 1367 
  list_itr = ((struct ice_fltr_mgmt_list_entry *)(__mptr + 18446744073709551600U));
  #line 1367 
  while (& list_itr->list_entry != list_head) {
    #line 1367 
    void *__mptr_0;
    #line 1368 
    if ((unsigned int)list_itr->vsi_count == 1U && list_itr->vsi_list_info != (struct ice_vsi_list_map_info *)0) {
      #line 1369 
      map_info = list_itr->vsi_list_info;
      #line 1370 
      if ((int)test_bit((long)vsi_handle,(unsigned long *)(& map_info->vsi_map)) != 0) {
        #line 1371 
        *vsi_list_id = map_info->vsi_list_id;
        #line 1372 
        return map_info;
      }
    }
    #line 1367 
    __mptr_0 = (void *)list_itr->list_entry.next;
    #line 1367 
    list_itr = ((struct ice_fltr_mgmt_list_entry *)(__mptr_0 + 18446744073709551600U));
  }
  #line 1376 
  return (struct ice_vsi_list_map_info *)0;
}

#line 1388  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_switch.c"
static enum ice_status ice_add_rule_internal(struct ice_hw *hw, u8 recp_id, struct ice_fltr_list_entry *f_entry)
{
  #line 1392 
  struct ice_fltr_info *new_fltr;
  #line 1392 
  struct ice_fltr_info *cur_fltr;
  #line 1393 
  struct ice_fltr_mgmt_list_entry *m_entry;
  #line 1394 
  struct mutex *rule_lock;
  #line 1391 
  struct ice_switch_info *sw = hw->switch_info;
  #line 1395 
  enum ice_status status = 0;
  #line 1397 
  if (! ice_is_vsi_valid(hw,
                       (unsigned short)((int)f_entry->fltr_info.vsi_handle))) 
    #line 1398 
    return ICE_ERR_PARAM;
  #line 1399 
  f_entry->fltr_info.fwd_id.hw_vsi_id = (unsigned short)ice_get_hw_vsi_num(hw,
                           (unsigned short)((int)f_entry->fltr_info.vsi_handle));
  #line 1402 
  rule_lock = & (sw->recp_list + (unsigned long)recp_id)->filt_rule_lock;
  #line 1404 
  cif_mutex_lock_rule_lock(rule_lock);
  #line 1405 
  new_fltr = & f_entry->fltr_info;
  #line 1406 
  if (((unsigned long)new_fltr->flag & 1UL) != 0UL) 
                                                    #line 1407 
                                                    new_fltr->src = (unsigned short)(hw->port_info)->lport;
  else 
    #line 1408 
    if (((unsigned long)new_fltr->flag & 2UL) != 0UL) 
                                                      #line 1409 
                                                      new_fltr->src = (unsigned short)f_entry->fltr_info.fwd_id.hw_vsi_id;
  #line 1411 
  m_entry = ice_find_rule_entry(hw,(unsigned char)((int)recp_id),new_fltr);
  #line 1412 
  if (m_entry == (struct ice_fltr_mgmt_list_entry *)0) {
    #line 1413 
    cif_mutex_unlock_rule_lock(rule_lock);
    #line 1414 
    return ice_create_pkt_fwd_rule(hw,f_entry);
  }
  #line 1417 
  cur_fltr = & m_entry->fltr_info;
  #line 1418 
  status = ice_add_update_vsi_list(hw,m_entry,cur_fltr,new_fltr);
  #line 1419 
  cif_mutex_unlock_rule_lock(rule_lock);
  #line 1421 
  return status;
}

#line 1434  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_switch.c"
static enum ice_status ice_remove_vsi_list_rule(struct ice_hw *hw, u16 vsi_list_id, enum ice_sw_lkup_type lkup_type)
{
  #line 1442 
  void *__mptr;
  #line 1455 
  void *__mptr_0;
  #line 1437 
  struct ice_aqc_sw_rules_elem *s_rule;
  #line 1438 
  enum ice_status status;
  #line 1439 
  u16 s_rule_size;
  #line 1441 
  s_rule_size = (unsigned short)8U;
  #line 1442 
  ;
  #line 1442 
  __mptr = (void *)hw;
  #line 1442 
  s_rule = (struct ice_aqc_sw_rules_elem *)cif_devm_kzalloc_1(& (((struct ice_pf *)(__mptr + 18446744073709549512U))->pdev)->dev,
                           (unsigned long)s_rule_size,3264U);
  #line 1443 
  if (s_rule == (struct ice_aqc_sw_rules_elem *)0) 
                                                   #line 1444 
                                                   return ICE_ERR_NO_MEMORY;
  #line 1446 
  s_rule->type = (unsigned short)4U;
  #line 1447 
  s_rule->pdata.vsi_list.index = vsi_list_id;
  #line 1452 
  status = ice_aq_alloc_free_vsi_list(hw,& vsi_list_id,lkup_type,(enum ice_adminq_opc)ice_aqc_opc_free_res);
  #line 1455 
  ;
  #line 1455 
  __mptr_0 = (void *)hw;
  #line 1455 
  devm_kfree(& (((struct ice_pf *)(__mptr_0 + 18446744073709549512U))->pdev)->dev,(void *)s_rule);
  #line 1456 
  return status;
}

#line 1467  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_switch.c"
static enum ice_status ice_rem_update_vsi_list(struct ice_hw *hw, u16 vsi_handle, struct ice_fltr_mgmt_list_entry *fm_list)
{
  #line 1470 
  enum ice_sw_lkup_type lkup_type;
  #line 1472 
  u16 vsi_list_id;
  #line 1471 
  enum ice_status status = 0;
  #line 1474 
  if (fm_list->fltr_info.fltr_act != (unsigned int)ICE_FWD_TO_VSI_LIST || (unsigned int)fm_list->vsi_count == 0U) 
    #line 1476 
    return ICE_ERR_PARAM;
  #line 1479 
  if (! test_bit((long)vsi_handle,
               (unsigned long *)(& (fm_list->vsi_list_info)->vsi_map))) 
    #line 1480 
    return ICE_ERR_DOES_NOT_EXIST;
  #line 1482 
  lkup_type = fm_list->fltr_info.lkup_type;
  #line 1483 
  vsi_list_id = (unsigned short)fm_list->fltr_info.fwd_id.vsi_list_id;
  #line 1484 
  status = ice_update_vsi_list_rule(hw,& vsi_handle,(unsigned short)1,(unsigned short)((int)vsi_list_id),(_Bool)1,(enum ice_adminq_opc)ice_aqc_opc_update_sw_rules,lkup_type);
  #line 1487 
  if (status != ICE_SUCCESS) 
                             #line 1488 
                             return status;
  #line 1490 
  fm_list->vsi_count = (u16)((int)fm_list->vsi_count - 1);
  #line 1491 
  cif_clear_bit_2((long)vsi_handle,(unsigned long *)(& (fm_list->vsi_list_info)->vsi_map));
  #line 1493 
  if ((unsigned int)fm_list->vsi_count == 1U && lkup_type != (unsigned int)ICE_SW_LKUP_VLAN) {
    #line 1497 
    u16 rem_vsi_handle;
    #line 1494 
    struct ice_fltr_info tmp_fltr_info = fm_list->fltr_info;
    #line 1495 
    struct ice_vsi_list_map_info *vsi_list_info = fm_list->vsi_list_info;
    #line 1499 
    rem_vsi_handle = (unsigned short)cif_find_first_bit((unsigned long *)(& vsi_list_info->vsi_map),768UL);
    #line 1501 
    if (! ice_is_vsi_valid(hw,(unsigned short)((int)rem_vsi_handle))) 
      #line 1502 
      return ICE_ERR_OUT_OF_RANGE;
    #line 1505 
    status = ice_update_vsi_list_rule(hw,& rem_vsi_handle,(unsigned short)1,(unsigned short)((int)vsi_list_id),(_Bool)1,(enum ice_adminq_opc)ice_aqc_opc_update_sw_rules,lkup_type);
    #line 1509 
    if (status != ICE_SUCCESS) 
                               #line 1510 
                               return status;
    #line 1512 
    tmp_fltr_info.fltr_act = ICE_FWD_TO_VSI;
    #line 1513 
    tmp_fltr_info.fwd_id.hw_vsi_id = (unsigned short)ice_get_hw_vsi_num(hw,(unsigned short)((int)rem_vsi_handle));
    #line 1515 
    tmp_fltr_info.vsi_handle = rem_vsi_handle;
    #line 1516 
    status = ice_update_pkt_fwd_rule(hw,& tmp_fltr_info);
    #line 1517 
    if (status != ICE_SUCCESS) {
      {
        #line 1518 
        bool branch;
        #line 1518 
        struct _ddebug __UNIQUE_ID_ddebug537 = {.modname = (char *)"ice", .function = (char *)"ice_rem_update_vsi_list", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_switch.c", .format = (char *)"Failed to update pkt fwd rule to FWD_TO_VSI on HW VSI %d, error %d\n", .lineno = (unsigned int)1518U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
        #line 1518 
        branch = arch_static_branch(& __UNIQUE_ID_ddebug537.key.dd_key_false.key,(_Bool)0);
        #line 1518 
        if ((long)((long)((int)branch != 0)) != 0L) {
          #line 1518 
          void *__mptr;
          #line 1518 
          ;
          #line 1518 
          ;
          #line 1518 
          __mptr = (void *)hw;
          #line 1518 
          __dynamic_dev_dbg(& __UNIQUE_ID_ddebug537,& (((struct ice_pf *)(__mptr + 18446744073709549512U))->pdev)->dev,(char *)"Failed to update pkt fwd rule to FWD_TO_VSI on HW VSI %d, error %d\n",(int)tmp_fltr_info.fwd_id.hw_vsi_id,(int)status);
        }
      }
      #line 1521 
      return status;
    }
    #line 1524 
    fm_list->fltr_info = tmp_fltr_info;
  }
  #line 1527 
  if ((unsigned int)fm_list->vsi_count == 1U && lkup_type != (unsigned int)ICE_SW_LKUP_VLAN || (unsigned int)fm_list->vsi_count == 0U && lkup_type == (unsigned int)ICE_SW_LKUP_VLAN) {
    #line 1542 
    void *__mptr_1;
    #line 1529 
    struct ice_vsi_list_map_info *vsi_list_info_0 = fm_list->vsi_list_info;
    #line 1533 
    status = ice_remove_vsi_list_rule(hw,(unsigned short)((int)vsi_list_id),lkup_type);
    #line 1534 
    if (status != ICE_SUCCESS) {
      {
        #line 1535 
        bool branch_0;
        #line 1535 
        struct _ddebug __UNIQUE_ID_ddebug538 = {.modname = (char *)"ice", .function = (char *)"ice_rem_update_vsi_list", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_switch.c", .format = (char *)"Failed to remove VSI list %d, error %d\n", .lineno = (unsigned int)1535U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
        #line 1535 
        branch_0 = arch_static_branch(& __UNIQUE_ID_ddebug538.key.dd_key_false.key,(_Bool)0);
        #line 1535 
        if ((long)((long)((int)branch_0 != 0)) != 0L) {
          #line 1535 
          void *__mptr_0;
          #line 1535 
          ;
          #line 1535 
          ;
          #line 1535 
          __mptr_0 = (void *)hw;
          #line 1535 
          __dynamic_dev_dbg(& __UNIQUE_ID_ddebug538,& (((struct ice_pf *)(__mptr_0 + 18446744073709549512U))->pdev)->dev,(char *)"Failed to remove VSI list %d, error %d\n",(int)vsi_list_id,(int)status);
        }
      }
      #line 1538 
      return status;
    }
    #line 1541 
    list_del(& vsi_list_info_0->list_entry);
    #line 1542 
    ;
    #line 1542 
    __mptr_1 = (void *)hw;
    #line 1542 
    devm_kfree(& (((struct ice_pf *)(__mptr_1 + 18446744073709549512U))->pdev)->dev,(void *)vsi_list_info_0);
    #line 1543 
    fm_list->vsi_list_info = (struct ice_vsi_list_map_info *)0;
  }
  #line 1546 
  return status;
}

#line 1556  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_switch.c"
static enum ice_status ice_remove_rule_internal(struct ice_hw *hw, u8 recp_id, struct ice_fltr_list_entry *f_entry)
{
  #line 1560 
  struct ice_fltr_mgmt_list_entry *list_elem;
  #line 1561 
  struct mutex *rule_lock;
  #line 1564 
  u16 vsi_handle;
  #line 1559 
  struct ice_switch_info *sw = hw->switch_info;
  #line 1562 
  enum ice_status status = 0;
  #line 1563 
  bool remove_rule = (_Bool)0;
  #line 1566 
  if (! ice_is_vsi_valid(hw,
                       (unsigned short)((int)f_entry->fltr_info.vsi_handle))) 
    #line 1567 
    return ICE_ERR_PARAM;
  #line 1568 
  f_entry->fltr_info.fwd_id.hw_vsi_id = (unsigned short)ice_get_hw_vsi_num(hw,
                           (unsigned short)((int)f_entry->fltr_info.vsi_handle));
  #line 1571 
  rule_lock = & (sw->recp_list + (unsigned long)recp_id)->filt_rule_lock;
  #line 1572 
  cif_mutex_lock_rule_lock(rule_lock);
  #line 1573 
  list_elem = ice_find_rule_entry(hw,(unsigned char)((int)recp_id),& f_entry->fltr_info);
  #line 1574 
  if (list_elem == (struct ice_fltr_mgmt_list_entry *)0) {
    #line 1575 
    status = ICE_ERR_DOES_NOT_EXIST;
    #line 1576 
    goto exit;
  }
  #line 1579 
  if (list_elem->fltr_info.fltr_act != (unsigned int)ICE_FWD_TO_VSI_LIST) 
    #line 1580 
    remove_rule = (_Bool)1;
  else 
    #line 1581 
    if (list_elem->vsi_list_info == (struct ice_vsi_list_map_info *)0) {
      #line 1582 
      status = ICE_ERR_DOES_NOT_EXIST;
      #line 1583 
      goto exit;
    }
    else 
      #line 1584 
      if ((unsigned int)(list_elem->vsi_list_info)->ref_cnt > 1U) {
        #line 1590 
        (list_elem->vsi_list_info)->ref_cnt = (u16)((int)(list_elem->vsi_list_info)->ref_cnt - 1);
        #line 1591 
        remove_rule = (_Bool)1;
      }
      else {
        #line 1598 
        vsi_handle = f_entry->fltr_info.vsi_handle;
        #line 1599 
        status = ice_rem_update_vsi_list(hw,(unsigned short)((int)vsi_handle),list_elem);
        #line 1600 
        if (status != ICE_SUCCESS) 
                                   #line 1601 
                                   goto exit;
        #line 1603 
        if ((unsigned int)list_elem->vsi_count == 0U) 
                                                      #line 1604 
                                                      remove_rule = (_Bool)1;
      }
  #line 1607 
  if ((int)remove_rule != 0) {
    #line 1627 
    void *__mptr_0;
    #line 1633 
    void *__mptr_1;
    #line 1611 
    void *__mptr;
    #line 1609 
    struct ice_aqc_sw_rules_elem *s_rule;
    #line 1611 
    __mptr = (void *)hw;
    #line 1611 
    s_rule = (struct ice_aqc_sw_rules_elem *)cif_devm_kzalloc_1(& (((struct ice_pf *)(__mptr + 18446744073709549512U))->pdev)->dev,
                           16UL,3264U);
    #line 1614 
    if (s_rule == (struct ice_aqc_sw_rules_elem *)0) {
      #line 1615 
      status = ICE_ERR_NO_MEMORY;
      #line 1616 
      goto exit;
    }
    #line 1619 
    ice_fill_sw_rule(hw,& list_elem->fltr_info,s_rule,(enum ice_adminq_opc)ice_aqc_opc_remove_sw_rules);
    #line 1622 
    status = ice_aq_sw_rules(hw,(void *)s_rule,(unsigned short)16,(unsigned char)1,(enum ice_adminq_opc)ice_aqc_opc_remove_sw_rules,(struct ice_sq_cd *)0);
    #line 1627 
    ;
    #line 1627 
    __mptr_0 = (void *)hw;
    #line 1627 
    devm_kfree(& (((struct ice_pf *)(__mptr_0 + 18446744073709549512U))->pdev)->dev,(void *)s_rule);
    #line 1629 
    if (status != ICE_SUCCESS) 
                               #line 1630 
                               goto exit;
    #line 1632 
    list_del(& list_elem->list_entry);
    #line 1633 
    ;
    #line 1633 
    __mptr_1 = (void *)hw;
    #line 1633 
    devm_kfree(& (((struct ice_pf *)(__mptr_1 + 18446744073709549512U))->pdev)->dev,(void *)list_elem);
  }
  #line 1635 
  exit: 
        #line 1635 
  ;
  #line 1636 
  cif_mutex_unlock_rule_lock(rule_lock);
  #line 1637 
  return status;
}

#line 1652  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_switch.c"
enum ice_status ice_add_mac(struct ice_hw *hw, struct list_head *m_list)
{
  #line 1670 
  void *__mptr;
  #line 1719 
  void *__mptr_1;
  #line 1727 
  void *__mptr_2;
  #line 1759 
  void *__mptr_4;
  #line 1654 
  struct ice_aqc_sw_rules_elem *s_rule;
  #line 1654 
  struct ice_aqc_sw_rules_elem *r_iter;
  #line 1655 
  struct ice_fltr_list_entry *m_list_itr;
  #line 1656 
  struct list_head *rule_head;
  #line 1657 
  u16 elem_sent;
  #line 1657 
  u16 total_elem_left;
  #line 1658 
  struct ice_switch_info *sw;
  #line 1659 
  struct mutex *rule_lock;
  #line 1662 
  u16 s_rule_size;
  #line 1660 
  enum ice_status status = 0;
  #line 1661 
  u16 num_unicast = (unsigned short)0U;
  #line 1664 
  if (m_list == (struct list_head *)0 || hw == (struct ice_hw *)0) 
                                                                   #line 1665 
                                                                   return ICE_ERR_PARAM;
  #line 1667 
  s_rule = (struct ice_aqc_sw_rules_elem *)0;
  #line 1668 
  sw = hw->switch_info;
  #line 1669 
  rule_lock = & (sw->recp_list + 1U)->filt_rule_lock;
  #line 1670 
  __mptr = (void *)m_list->next;
  #line 1670 
  m_list_itr = ((struct ice_fltr_list_entry *)__mptr);
  #line 1670 
  while (& m_list_itr->list_entry != m_list) {
    #line 1670 
    void *__mptr_0;
    {
      #line 1672 
      u16 vsi_handle;
      #line 1673 
      u16 hw_vsi_id;
      #line 1671 
      u8 *add = & m_list_itr->fltr_info.l_data.mac.mac_addr[0];
      #line 1675 
      m_list_itr->fltr_info.flag = (unsigned short)2U;
      #line 1676 
      vsi_handle = m_list_itr->fltr_info.vsi_handle;
      #line 1677 
      if (! ice_is_vsi_valid(hw,(unsigned short)((int)vsi_handle))) 
                                                                    #line 1678 
                                                                    return ICE_ERR_PARAM;
      #line 1679 
      hw_vsi_id = ice_get_hw_vsi_num(hw,(unsigned short)((int)vsi_handle));
      #line 1680 
      m_list_itr->fltr_info.fwd_id.hw_vsi_id = (unsigned short)hw_vsi_id;
      #line 1682 
      if (m_list_itr->fltr_info.src_id != (unsigned int)ICE_SRC_ID_VSI) 
        #line 1683 
        return ICE_ERR_PARAM;
      #line 1684 
      m_list_itr->fltr_info.src = hw_vsi_id;
      #line 1685 
      if (m_list_itr->fltr_info.lkup_type != (unsigned int)ICE_SW_LKUP_MAC) 
        #line 1687 
        return ICE_ERR_PARAM;
      else {
        #line 1685 
        if ((int)is_zero_ether_addr(add) != 0) 
                                               #line 1687 
                                               return ICE_ERR_PARAM;
      }
      #line 1688 
      if ((int)is_unicast_ether_addr(add) != 0) {
        #line 1688 
        if ((unsigned int)hw->ucast_shared == 0U) {
          #line 1690 
          cif_mutex_lock_rule_lock(rule_lock);
          #line 1691 
          if (ice_find_rule_entry(hw,(unsigned char)1,& m_list_itr->fltr_info) != (struct ice_fltr_mgmt_list_entry *)0) {
            #line 1693 
            cif_mutex_unlock_rule_lock(rule_lock);
            #line 1694 
            return ICE_ERR_ALREADY_EXISTS;
          }
          #line 1696 
          cif_mutex_unlock_rule_lock(rule_lock);
          #line 1697 
          num_unicast = (u16)((int)num_unicast + 1);
        }
        else 
             #line 1688 
             goto _LAND;
      }
      else {
        #line 1688 
        _LAND: 
        #line 1698 
        if ((int)is_multicast_ether_addr(add) != 0) 
                                                    #line 1698 
                                                    goto _LOR;
        else {
          #line 1698 
          if ((int)is_unicast_ether_addr(add) != 0) 
            #line 1699 
            if ((unsigned int)hw->ucast_shared != 0U) {
              #line 1698 
              _LOR: {
                      #line 1700 
                      m_list_itr->status = ice_add_rule_internal(hw,(unsigned char)1,m_list_itr);
                      #line 1703 
                      if (m_list_itr->status != ICE_SUCCESS) 
                                                             #line 1704 
                                                             return m_list_itr->status;
                    }
            }
        }
      }
    }
    #line 1670 
    __mptr_0 = (void *)m_list_itr->list_entry.next;
    #line 1670 
    m_list_itr = ((struct ice_fltr_list_entry *)__mptr_0);
  }
  #line 1708 
  cif_mutex_lock_rule_lock(rule_lock);
  #line 1710 
  if ((unsigned int)num_unicast == 0U) {
    #line 1711 
    status = ICE_SUCCESS;
    #line 1712 
    goto ice_add_mac_exit;
  }
  #line 1715 
  rule_head = & (sw->recp_list + 1U)->filt_rules;
  #line 1718 
  s_rule_size = (unsigned short)32U;
  #line 1719 
  ;
  #line 1719 
  ;
  #line 1719 
  __mptr_1 = (void *)hw;
  #line 1719 
  s_rule = (struct ice_aqc_sw_rules_elem *)cif_devm_kcalloc_0(& (((struct ice_pf *)(__mptr_1 + 18446744073709549512U))->pdev)->dev,
                           (unsigned long)num_unicast,
                           (unsigned long)s_rule_size,3264U);
  #line 1721 
  if (s_rule == (struct ice_aqc_sw_rules_elem *)0) {
    #line 1722 
    status = ICE_ERR_NO_MEMORY;
    #line 1723 
    goto ice_add_mac_exit;
  }
  #line 1726 
  r_iter = s_rule;
  #line 1727 
  __mptr_2 = (void *)m_list->next;
  #line 1727 
  m_list_itr = ((struct ice_fltr_list_entry *)__mptr_2);
  #line 1727 
  while (& m_list_itr->list_entry != m_list) {
    #line 1727 
    void *__mptr_3;
    {
      #line 1728 
      struct ice_fltr_info *f_info = & m_list_itr->fltr_info;
      #line 1729 
      u8 *mac_addr = & f_info->l_data.mac.mac_addr[0];
      #line 1731 
      if ((int)is_unicast_ether_addr(mac_addr) != 0) {
        #line 1732 
        ice_fill_sw_rule(hw,& m_list_itr->fltr_info,r_iter,(enum ice_adminq_opc)ice_aqc_opc_add_sw_rules);
        #line 1734 
        r_iter = (struct ice_aqc_sw_rules_elem *)((u8 *)r_iter + (unsigned long)s_rule_size);
      }
    }
    #line 1727 
    __mptr_3 = (void *)m_list_itr->list_entry.next;
    #line 1727 
    m_list_itr = ((struct ice_fltr_list_entry *)__mptr_3);
  }
  #line 1740 
  r_iter = s_rule;
  #line 1742 
  total_elem_left = num_unicast;
  #line 1742 
  while ((unsigned int)total_elem_left != 0U) {
    {
      #line 1746 
      u16 __UNIQUE_ID___x539;
      #line 1746 
      int tmp_12;
      #line 1744 
      struct ice_aqc_sw_rules_elem *entry = r_iter;
      {
        #line 1746 
        __UNIQUE_ID___x539 = total_elem_left;
        #line 1746 
        unsigned short __UNIQUE_ID___y540 = (unsigned short)(4096 / (int)s_rule_size);
        #line 1746 
        if ((int)__UNIQUE_ID___x539 < (int)__UNIQUE_ID___y540) 
                                                               #line 1746 
                                                               tmp_12 = (int)__UNIQUE_ID___x539; else 
                                                                    #line 1746 
                                                                    tmp_12 = (int)__UNIQUE_ID___y540;
        }
      #line 1746 
      elem_sent = (unsigned short)tmp_12;
      #line 1748 
      status = ice_aq_sw_rules(hw,(void *)entry,(unsigned short)((int)elem_sent * (int)s_rule_size),(unsigned char)((int)((unsigned char)elem_sent)),(enum ice_adminq_opc)ice_aqc_opc_add_sw_rules,(struct ice_sq_cd *)0);
      #line 1751 
      if (status != ICE_SUCCESS) 
                                 #line 1752 
                                 goto ice_add_mac_exit;
      #line 1753 
      r_iter = (struct ice_aqc_sw_rules_elem *)((u8 *)r_iter + (unsigned long)((int)elem_sent * (int)s_rule_size));
    }
    #line 1742 
    total_elem_left = (unsigned short)((int)total_elem_left - (int)elem_sent);
  }
  #line 1758 
  r_iter = s_rule;
  #line 1759 
  __mptr_4 = (void *)m_list->next;
  #line 1759 
  m_list_itr = ((struct ice_fltr_list_entry *)__mptr_4);
  #line 1759 
  while (& m_list_itr->list_entry != m_list) {
    #line 1759 
    void *__mptr_5;
    {
      #line 1762 
      struct ice_fltr_mgmt_list_entry *fm_entry;
      #line 1760 
      struct ice_fltr_info *f_info_0 = & m_list_itr->fltr_info;
      #line 1761 
      u8 *mac_addr_0 = & f_info_0->l_data.mac.mac_addr[0];
      #line 1764 
      if ((int)is_unicast_ether_addr(mac_addr_0) != 0) {
        #line 1769 
        void *__mptr_6;
        #line 1765 
        f_info_0->fltr_rule_id = r_iter->pdata.lkup_tx_rx.index;
        #line 1767 
        f_info_0->fltr_act = ICE_FWD_TO_VSI;
        #line 1769 
        __mptr_6 = (void *)hw;
        #line 1769 
        fm_entry = (struct ice_fltr_mgmt_list_entry *)cif_devm_kzalloc_1(& (((struct ice_pf *)(__mptr_6 + 18446744073709549512U))->pdev)->dev,
                            72UL,3264U);
        #line 1771 
        if (fm_entry == (struct ice_fltr_mgmt_list_entry *)0) {
          #line 1772 
          status = ICE_ERR_NO_MEMORY;
          #line 1773 
          goto ice_add_mac_exit;
        }
        #line 1775 
        fm_entry->fltr_info = *f_info_0;
        #line 1776 
        fm_entry->vsi_count = (unsigned short)1U;
        #line 1781 
        list_add(& fm_entry->list_entry,rule_head);
        #line 1782 
        r_iter = (struct ice_aqc_sw_rules_elem *)((u8 *)r_iter + (unsigned long)s_rule_size);
      }
    }
    #line 1759 
    __mptr_5 = (void *)m_list_itr->list_entry.next;
    #line 1759 
    m_list_itr = ((struct ice_fltr_list_entry *)__mptr_5);
  }
  #line 1787 
  ice_add_mac_exit: 
                    #line 1787 
  ;
  #line 1788 
  cif_mutex_unlock_rule_lock(rule_lock);
  #line 1789 
  if (s_rule != (struct ice_aqc_sw_rules_elem *)0) {
    #line 1790 
    void *__mptr_7;
    #line 1790 
    ;
    #line 1790 
    __mptr_7 = (void *)hw;
    #line 1790 
    devm_kfree(& (((struct ice_pf *)(__mptr_7 + 18446744073709549512U))->pdev)->dev,(void *)s_rule);
  }
  #line 1791 
  return status;
}

#line 1800  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_switch.c"
static enum ice_status ice_add_vlan_internal(struct ice_hw *hw, struct ice_fltr_list_entry *f_entry)
{
  #line 1803 
  struct ice_fltr_mgmt_list_entry *v_list_itr;
  #line 1804 
  struct ice_fltr_info *new_fltr;
  #line 1804 
  struct ice_fltr_info *cur_fltr;
  #line 1805 
  enum ice_sw_lkup_type lkup_type;
  #line 1806 
  u16 vsi_handle;
  #line 1807 
  struct mutex *rule_lock;
  #line 1802 
  struct ice_switch_info *sw = hw->switch_info;
  #line 1806 
  u16 vsi_list_id = (unsigned short)0U;
  #line 1808 
  enum ice_status status = 0;
  #line 1810 
  if (! ice_is_vsi_valid(hw,
                       (unsigned short)((int)f_entry->fltr_info.vsi_handle))) 
    #line 1811 
    return ICE_ERR_PARAM;
  #line 1813 
  f_entry->fltr_info.fwd_id.hw_vsi_id = (unsigned short)ice_get_hw_vsi_num(hw,
                           (unsigned short)((int)f_entry->fltr_info.vsi_handle));
  #line 1815 
  new_fltr = & f_entry->fltr_info;
  #line 1818 
  if ((unsigned int)new_fltr->l_data.vlan.vlan_id > 4095U) 
                                                           #line 1819 
                                                           return ICE_ERR_PARAM;
  #line 1821 
  if (new_fltr->src_id != (unsigned int)ICE_SRC_ID_VSI) 
                                                        #line 1822 
                                                        return ICE_ERR_PARAM;
  #line 1824 
  new_fltr->src = (unsigned short)new_fltr->fwd_id.hw_vsi_id;
  #line 1825 
  lkup_type = new_fltr->lkup_type;
  #line 1826 
  vsi_handle = new_fltr->vsi_handle;
  #line 1827 
  rule_lock = & (sw->recp_list + 4U)->filt_rule_lock;
  #line 1828 
  cif_mutex_lock_rule_lock(rule_lock);
  #line 1829 
  v_list_itr = ice_find_rule_entry(hw,(unsigned char)4,new_fltr);
  #line 1830 
  if (v_list_itr == (struct ice_fltr_mgmt_list_entry *)0) {
    #line 1831 
    struct ice_vsi_list_map_info *map_info = (struct ice_vsi_list_map_info *)0;
    #line 1833 
    if (new_fltr->fltr_act == (unsigned int)ICE_FWD_TO_VSI) {
      #line 1839 
      map_info = ice_find_vsi_list_entry(hw,(unsigned char)4,(unsigned short)((int)vsi_handle),& vsi_list_id);
      #line 1842 
      if (map_info == (struct ice_vsi_list_map_info *)0) {
        #line 1843 
        status = ice_create_vsi_list_rule(hw,& vsi_handle,(unsigned short)1,& vsi_list_id,lkup_type);
        #line 1848 
        if (status != ICE_SUCCESS) 
                                   #line 1849 
                                   goto exit;
      }
      #line 1852 
      new_fltr->fltr_act = ICE_FWD_TO_VSI_LIST;
      #line 1853 
      new_fltr->fwd_id.vsi_list_id = (unsigned short)vsi_list_id;
    }
    #line 1856 
    status = ice_create_pkt_fwd_rule(hw,f_entry);
    #line 1857 
    if (status == ICE_SUCCESS) {
      #line 1858 
      v_list_itr = ice_find_rule_entry(hw,(unsigned char)4,new_fltr);
      #line 1860 
      if (v_list_itr == (struct ice_fltr_mgmt_list_entry *)0) {
        #line 1861 
        status = ICE_ERR_DOES_NOT_EXIST;
        #line 1862 
        goto exit;
      }
      #line 1865 
      if (map_info != (struct ice_vsi_list_map_info *)0) {
        #line 1866 
        v_list_itr->vsi_list_info = map_info;
        #line 1867 
        map_info->ref_cnt = (u16)((int)map_info->ref_cnt + 1);
      }
      else 
           #line 1869 
           v_list_itr->vsi_list_info = ice_create_vsi_list_map(hw,& vsi_handle,(unsigned short)1,(unsigned short)((int)vsi_list_id));
    }
  }
  else 
    #line 1874 
    if ((unsigned int)(v_list_itr->vsi_list_info)->ref_cnt == 1U) {
      #line 1878 
      cur_fltr = & v_list_itr->fltr_info;
      #line 1879 
      status = ice_add_update_vsi_list(hw,v_list_itr,cur_fltr,new_fltr);
    }
    else {
      #line 1887 
      struct ice_fltr_info tmp_fltr;
      #line 1888 
      u16 vsi_handle_arr[2U];
      #line 1889 
      u16 cur_handle;
      #line 1894 
      if ((unsigned int)v_list_itr->vsi_count > 1U && (unsigned int)(v_list_itr->vsi_list_info)->ref_cnt > 1U) {
        {
          #line 1896 
          bool branch;
          #line 1896 
          struct _ddebug __UNIQUE_ID_ddebug541 = {.modname = (char *)"ice", .function = (char *)"ice_add_vlan_internal", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_switch.c", .format = (char *)"Invalid configuration: Optimization to reuse VSI list with more than one VSI is not being done yet\n", .lineno = (unsigned int)1896U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
          #line 1896 
          branch = arch_static_branch(& __UNIQUE_ID_ddebug541.key.dd_key_false.key,(_Bool)0);
          #line 1896 
          if ((long)((long)((int)branch != 0)) != 0L) {
            #line 1896 
            void *__mptr;
            #line 1896 
            __mptr = (void *)hw;
            #line 1896 
            __dynamic_dev_dbg(& __UNIQUE_ID_ddebug541,& (((struct ice_pf *)(__mptr + 18446744073709549512U))->pdev)->dev,(char *)"Invalid configuration: Optimization to reuse VSI list with more than one VSI is not being done yet\n");
          }
        }
        #line 1898 
        status = ICE_ERR_CFG;
        #line 1899 
        goto exit;
      }
      #line 1902 
      cur_handle = (unsigned short)cif_find_first_bit((unsigned long *)(& (v_list_itr->vsi_list_info)->vsi_map),
                           768UL);
      #line 1907 
      if ((int)cur_handle == (int)vsi_handle) {
        #line 1908 
        status = ICE_ERR_ALREADY_EXISTS;
        #line 1909 
        goto exit;
      }
      #line 1912 
      vsi_handle_arr[0] = cur_handle;
      #line 1913 
      vsi_handle_arr[1] = vsi_handle;
      #line 1914 
      status = ice_create_vsi_list_rule(hw,vsi_handle_arr,(unsigned short)2,& vsi_list_id,lkup_type);
      #line 1916 
      if (status != ICE_SUCCESS) 
                                 #line 1917 
                                 goto exit;
      #line 1919 
      tmp_fltr = v_list_itr->fltr_info;
      #line 1920 
      tmp_fltr.fltr_rule_id = v_list_itr->fltr_info.fltr_rule_id;
      #line 1921 
      tmp_fltr.fwd_id.vsi_list_id = (unsigned short)vsi_list_id;
      #line 1922 
      tmp_fltr.fltr_act = ICE_FWD_TO_VSI_LIST;
      #line 1926 
      status = ice_update_pkt_fwd_rule(hw,& tmp_fltr);
      #line 1927 
      if (status != ICE_SUCCESS) 
                                 #line 1928 
                                 goto exit;
      #line 1933 
      (v_list_itr->vsi_list_info)->ref_cnt = (u16)((int)(v_list_itr->vsi_list_info)->ref_cnt - 1);
      #line 1936 
      v_list_itr->fltr_info.fwd_id.vsi_list_id = (unsigned short)vsi_list_id;
      #line 1937 
      v_list_itr->vsi_list_info = ice_create_vsi_list_map(hw,vsi_handle_arr,(unsigned short)2,(unsigned short)((int)vsi_list_id));
      #line 1940 
      v_list_itr->vsi_count = (u16)((int)v_list_itr->vsi_count + 1);
    }
  #line 1943 
  exit: 
        #line 1943 
  ;
  #line 1944 
  cif_mutex_unlock_rule_lock(rule_lock);
  #line 1945 
  return status;
}

#line 1954  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_switch.c"
enum ice_status ice_add_vlan(struct ice_hw *hw, struct list_head *v_list)
{
  #line 1961 
  void *__mptr;
  #line 1956 
  struct ice_fltr_list_entry *v_list_itr;
  #line 1958 
  if (v_list == (struct list_head *)0 || hw == (struct ice_hw *)0) 
                                                                   #line 1959 
                                                                   return ICE_ERR_PARAM;
  #line 1961 
  __mptr = (void *)v_list->next;
  #line 1961 
  v_list_itr = ((struct ice_fltr_list_entry *)__mptr);
  #line 1961 
  while (& v_list_itr->list_entry != v_list) {
    #line 1961 
    void *__mptr_0;
    #line 1962 
    if (v_list_itr->fltr_info.lkup_type != (unsigned int)ICE_SW_LKUP_VLAN) 
      #line 1963 
      return ICE_ERR_PARAM;
    #line 1964 
    v_list_itr->fltr_info.flag = (unsigned short)2U;
    #line 1965 
    v_list_itr->status = ice_add_vlan_internal(hw,v_list_itr);
    #line 1966 
    if (v_list_itr->status != ICE_SUCCESS) 
                                           #line 1967 
                                           return v_list_itr->status;
    #line 1961 
    __mptr_0 = (void *)v_list_itr->list_entry.next;
    #line 1961 
    v_list_itr = ((struct ice_fltr_list_entry *)__mptr_0);
  }
  #line 1969 
  return ICE_SUCCESS;
}

#line 1982  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_switch.c"
enum ice_status ice_add_eth_mac(struct ice_hw *hw, struct list_head *em_list)
{
  #line 1989 
  void *__mptr;
  #line 1984 
  struct ice_fltr_list_entry *em_list_itr;
  #line 1986 
  if (em_list == (struct list_head *)0 || hw == (struct ice_hw *)0) 
                                                                    #line 1987 
                                                                    return ICE_ERR_PARAM;
  #line 1989 
  __mptr = (void *)em_list->next;
  #line 1989 
  em_list_itr = ((struct ice_fltr_list_entry *)__mptr);
  #line 1989 
  while (& em_list_itr->list_entry != em_list) {
    #line 1989 
    void *__mptr_0;
    {
      #line 1990 
      enum ice_sw_lkup_type l_type = em_list_itr->fltr_info.lkup_type;
      #line 1993 
      if (l_type != (unsigned int)ICE_SW_LKUP_ETHERTYPE_MAC && l_type != (unsigned int)ICE_SW_LKUP_ETHERTYPE) 
        #line 1995 
        return ICE_ERR_PARAM;
      #line 1997 
      em_list_itr->status = ice_add_rule_internal(hw,(unsigned char)((int)((unsigned char)l_type)),em_list_itr);
      #line 1999 
      if (em_list_itr->status != ICE_SUCCESS) 
                                              #line 2000 
                                              return em_list_itr->status;
    }
    #line 1989 
    __mptr_0 = (void *)em_list_itr->list_entry.next;
    #line 1989 
    em_list_itr = ((struct ice_fltr_list_entry *)__mptr_0);
  }
  #line 2002 
  return ICE_SUCCESS;
}

#line 2011  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_switch.c"
enum ice_status ice_remove_eth_mac(struct ice_hw *hw, struct list_head *em_list)
{
  #line 2018 
  void *__mptr;
  #line 2018 
  void *__mptr_0;
  #line 2013 
  struct ice_fltr_list_entry *em_list_itr;
  #line 2013 
  struct ice_fltr_list_entry *tmp;
  #line 2015 
  if (em_list == (struct list_head *)0 || hw == (struct ice_hw *)0) 
                                                                    #line 2016 
                                                                    return ICE_ERR_PARAM;
  #line 2018 
  __mptr = (void *)em_list->next;
  #line 2018 
  em_list_itr = ((struct ice_fltr_list_entry *)__mptr);
  #line 2018 
  __mptr_0 = (void *)em_list_itr->list_entry.next;
  #line 2019 
  tmp = ((struct ice_fltr_list_entry *)__mptr_0);
  #line 2018 
  while (& em_list_itr->list_entry != em_list) {
    #line 2018 
    void *__mptr_1;
    {
      #line 2019 
      enum ice_sw_lkup_type l_type = em_list_itr->fltr_info.lkup_type;
      #line 2022 
      if (l_type != (unsigned int)ICE_SW_LKUP_ETHERTYPE_MAC && l_type != (unsigned int)ICE_SW_LKUP_ETHERTYPE) 
        #line 2024 
        return ICE_ERR_PARAM;
      #line 2026 
      em_list_itr->status = ice_remove_rule_internal(hw,(unsigned char)((int)((unsigned char)l_type)),em_list_itr);
      #line 2028 
      if (em_list_itr->status != ICE_SUCCESS) 
                                              #line 2029 
                                              return em_list_itr->status;
    }
    #line 2018 
    em_list_itr = tmp;
    #line 2018 
    __mptr_1 = (void *)tmp->list_entry.next;
    #line 2018 
    tmp = ((struct ice_fltr_list_entry *)__mptr_1);
  }
  #line 2031 
  return ICE_SUCCESS;
}

#line 2040  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_switch.c"
static void ice_rem_sw_rule_info(struct ice_hw *hw, struct list_head *rule_head)
{
  #line 2042 
  if (list_empty(rule_head) == 0) {
    #line 2046 
    void *__mptr;
    #line 2046 
    void *__mptr_0;
    #line 2043 
    struct ice_fltr_mgmt_list_entry *entry;
    #line 2044 
    struct ice_fltr_mgmt_list_entry *tmp;
    #line 2046 
    __mptr = (void *)rule_head->next;
    #line 2046 
    entry = ((struct ice_fltr_mgmt_list_entry *)(__mptr + 18446744073709551600U));
    #line 2046 
    __mptr_0 = (void *)entry->list_entry.next;
    #line 2047 
    tmp = ((struct ice_fltr_mgmt_list_entry *)(__mptr_0 + 18446744073709551600U));
    #line 2046 
    while (& entry->list_entry != rule_head) {
      #line 2046 
      void *__mptr_1;
      {
        #line 2048 
        void *__mptr_2;
        #line 2047 
        list_del(& entry->list_entry);
        #line 2048 
        ;
        #line 2048 
        __mptr_2 = (void *)hw;
        #line 2048 
        devm_kfree(& (((struct ice_pf *)(__mptr_2 + 18446744073709549512U))->pdev)->dev,(void *)entry);
      }
      #line 2046 
      entry = tmp;
      #line 2046 
      __mptr_1 = (void *)tmp->list_entry.next;
      #line 2046 
      tmp = ((struct ice_fltr_mgmt_list_entry *)(__mptr_1 + 18446744073709551600U));
    }
  }
  #line 2051 
  return;
}

#line 2064  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_switch.c"
enum ice_status ice_cfg_dflt_vsi(struct ice_hw *hw, u16 vsi_handle, bool set, u8 direction)
{
  #line 2135 
  void *__mptr_0;
  #line 2079 
  void *__mptr;
  #line 2066 
  struct ice_aqc_sw_rules_elem *s_rule;
  #line 2067 
  struct ice_fltr_info f_info;
  #line 2068 
  enum ice_adminq_opc opcode;
  #line 2069 
  enum ice_status status;
  #line 2070 
  u16 s_rule_size;
  #line 2071 
  u16 hw_vsi_id;
  #line 2073 
  if (! ice_is_vsi_valid(hw,(unsigned short)((int)vsi_handle))) 
                                                                #line 2074 
                                                                return ICE_ERR_PARAM;
  #line 2075 
  hw_vsi_id = ice_get_hw_vsi_num(hw,(unsigned short)((int)vsi_handle));
  #line 2077 
  if ((int)set != 0) 
                     #line 2077 
                     s_rule_size = (unsigned short)32U; else 
                                                             #line 2077 
                                                             s_rule_size = (unsigned short)16U;
  #line 2079 
  ;
  #line 2079 
  __mptr = (void *)hw;
  #line 2079 
  s_rule = (struct ice_aqc_sw_rules_elem *)cif_devm_kzalloc_1(& (((struct ice_pf *)(__mptr + 18446744073709549512U))->pdev)->dev,
                           (unsigned long)s_rule_size,3264U);
  #line 2080 
  if (s_rule == (struct ice_aqc_sw_rules_elem *)0) 
                                                   #line 2081 
                                                   return ICE_ERR_NO_MEMORY;
  #line 2083 
  memset((void *)(& f_info),0,36UL);
  #line 2085 
  f_info.lkup_type = ICE_SW_LKUP_DFLT;
  #line 2086 
  f_info.flag = (unsigned short)direction;
  #line 2087 
  f_info.fltr_act = ICE_FWD_TO_VSI;
  #line 2088 
  f_info.fwd_id.hw_vsi_id = (unsigned short)hw_vsi_id;
  #line 2090 
  if (((unsigned long)f_info.flag & 1UL) != 0UL) {
    #line 2091 
    f_info.src = (unsigned short)(hw->port_info)->lport;
    #line 2092 
    f_info.src_id = ICE_SRC_ID_LPORT;
    #line 2093 
    if (! set) 
               #line 2094 
               f_info.fltr_rule_id = (hw->port_info)->dflt_rx_vsi_rule_id;
  }
  else 
    #line 2096 
    if (((unsigned long)f_info.flag & 2UL) != 0UL) {
      #line 2097 
      f_info.src_id = ICE_SRC_ID_VSI;
      #line 2098 
      f_info.src = hw_vsi_id;
      #line 2099 
      if (! set) 
                 #line 2100 
                 f_info.fltr_rule_id = (hw->port_info)->dflt_tx_vsi_rule_id;
    }
  #line 2104 
  if ((int)set != 0) 
                     #line 2105 
                     opcode = ice_aqc_opc_add_sw_rules; else 
                                                             #line 2107 
                                                             opcode = ice_aqc_opc_remove_sw_rules;
  #line 2109 
  ice_fill_sw_rule(hw,& f_info,s_rule,opcode);
  #line 2111 
  status = ice_aq_sw_rules(hw,(void *)s_rule,(unsigned short)((int)s_rule_size),(unsigned char)1,opcode,(struct ice_sq_cd *)0);
  #line 2112 
  if (status != ICE_SUCCESS || ((unsigned long)f_info.flag & 3UL) == 0UL) 
    #line 2113 
    goto out;
  #line 2114 
  if ((int)set != 0) {
    #line 2115 
    u16 index = s_rule->pdata.lkup_tx_rx.index;
    #line 2117 
    if (((unsigned long)f_info.flag & 2UL) != 0UL) {
      #line 2118 
      (hw->port_info)->dflt_tx_vsi_num = hw_vsi_id;
      #line 2119 
      (hw->port_info)->dflt_tx_vsi_rule_id = index;
    }
    else 
      #line 2120 
      if (((unsigned long)f_info.flag & 1UL) != 0UL) {
        #line 2121 
        (hw->port_info)->dflt_rx_vsi_num = hw_vsi_id;
        #line 2122 
        (hw->port_info)->dflt_rx_vsi_rule_id = index;
      }
  }
  else 
    #line 2125 
    if (((unsigned long)f_info.flag & 2UL) != 0UL) {
      #line 2126 
      (hw->port_info)->dflt_tx_vsi_num = (unsigned short)255U;
      #line 2127 
      (hw->port_info)->dflt_tx_vsi_rule_id = (unsigned short)5U;
    }
    else 
      #line 2128 
      if (((unsigned long)f_info.flag & 1UL) != 0UL) {
        #line 2129 
        (hw->port_info)->dflt_rx_vsi_num = (unsigned short)255U;
        #line 2130 
        (hw->port_info)->dflt_rx_vsi_rule_id = (unsigned short)5U;
      }
  #line 2134 
  out: 
       #line 2134 
  ;
  #line 2135 
  ;
  #line 2135 
  __mptr_0 = (void *)hw;
  #line 2135 
  devm_kfree(& (((struct ice_pf *)(__mptr_0 + 18446744073709549512U))->pdev)->dev,(void *)s_rule);
  #line 2136 
  return status;
}

#line 2152  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_switch.c"
static struct ice_fltr_mgmt_list_entry *ice_find_ucast_rule_entry(struct ice_hw *hw, u8 recp_id, struct ice_fltr_info *f_info)
{
  #line 2160 
  void *__mptr;
  #line 2156 
  struct ice_fltr_mgmt_list_entry *list_itr;
  #line 2157 
  struct list_head *list_head;
  #line 2155 
  struct ice_switch_info *sw = hw->switch_info;
  #line 2159 
  list_head = & (sw->recp_list + (unsigned long)recp_id)->filt_rules;
  #line 2160 
  __mptr = (void *)list_head->next;
  #line 2160 
  list_itr = ((struct ice_fltr_mgmt_list_entry *)(__mptr + 18446744073709551600U));
  #line 2160 
  while (& list_itr->list_entry != list_head) {
    #line 2160 
    void *__mptr_0;
    #line 2161 
    if (memcmp((void *)(& f_info->l_data),
               (void *)(& list_itr->fltr_info.l_data),8UL) == 0) 
      #line 2162 
      if ((int)f_info->fwd_id.hw_vsi_id == (int)list_itr->fltr_info.fwd_id.hw_vsi_id) 
        #line 2164 
        if ((int)f_info->flag == (int)list_itr->fltr_info.flag) 
                                                                #line 2166 
                                                                return list_itr;
    #line 2160 
    __mptr_0 = (void *)list_itr->list_entry.next;
    #line 2160 
    list_itr = ((struct ice_fltr_mgmt_list_entry *)(__mptr_0 + 18446744073709551600U));
  }
  #line 2168 
  return (struct ice_fltr_mgmt_list_entry *)0;
}

#line 2185  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_switch.c"
enum ice_status ice_remove_mac(struct ice_hw *hw, struct list_head *m_list)
{
  #line 2194 
  void *__mptr;
  #line 2194 
  void *__mptr_0;
  #line 2187 
  struct ice_fltr_list_entry *list_itr;
  #line 2187 
  struct ice_fltr_list_entry *tmp;
  #line 2188 
  struct mutex *rule_lock;
  #line 2190 
  if (m_list == (struct list_head *)0) 
                                       #line 2191 
                                       return ICE_ERR_PARAM;
  #line 2193 
  rule_lock = & ((hw->switch_info)->recp_list + 1U)->filt_rule_lock;
  #line 2194 
  __mptr = (void *)m_list->next;
  #line 2194 
  list_itr = ((struct ice_fltr_list_entry *)__mptr);
  #line 2194 
  __mptr_0 = (void *)list_itr->list_entry.next;
  #line 2195 
  tmp = ((struct ice_fltr_list_entry *)__mptr_0);
  #line 2194 
  while (& list_itr->list_entry != m_list) {
    #line 2194 
    void *__mptr_1;
    {
      #line 2197 
      u16 vsi_handle;
      #line 2195 
      enum ice_sw_lkup_type l_type = list_itr->fltr_info.lkup_type;
      #line 2196 
      u8 *add = & list_itr->fltr_info.l_data.mac.mac_addr[0];
      #line 2199 
      if (l_type != (unsigned int)ICE_SW_LKUP_MAC) 
                                                   #line 2200 
                                                   return ICE_ERR_PARAM;
      #line 2202 
      vsi_handle = list_itr->fltr_info.vsi_handle;
      #line 2203 
      if (! ice_is_vsi_valid(hw,(unsigned short)((int)vsi_handle))) 
                                                                    #line 2204 
                                                                    return ICE_ERR_PARAM;
      #line 2206 
      list_itr->fltr_info.fwd_id.hw_vsi_id = (unsigned short)ice_get_hw_vsi_num(hw,(unsigned short)((int)vsi_handle));
      #line 2208 
      if ((int)is_unicast_ether_addr(add) != 0) 
        #line 2208 
        if ((unsigned int)hw->ucast_shared == 0U) {
          #line 2213 
          cif_mutex_lock_rule_lock(rule_lock);
          #line 2214 
          if (ice_find_ucast_rule_entry(hw,(unsigned char)1,& list_itr->fltr_info) == (struct ice_fltr_mgmt_list_entry *)0) {
            #line 2216 
            cif_mutex_unlock_rule_lock(rule_lock);
            #line 2217 
            return ICE_ERR_DOES_NOT_EXIST;
          }
          #line 2219 
          cif_mutex_unlock_rule_lock(rule_lock);
        }
      #line 2221 
      list_itr->status = ice_remove_rule_internal(hw,(unsigned char)1,list_itr);
      #line 2224 
      if (list_itr->status != ICE_SUCCESS) 
                                           #line 2225 
                                           return list_itr->status;
    }
    #line 2194 
    list_itr = tmp;
    #line 2194 
    __mptr_1 = (void *)tmp->list_entry.next;
    #line 2194 
    tmp = ((struct ice_fltr_list_entry *)__mptr_1);
  }
  #line 2227 
  return ICE_SUCCESS;
}

#line 2236  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_switch.c"
enum ice_status ice_remove_vlan(struct ice_hw *hw, struct list_head *v_list)
{
  #line 2243 
  void *__mptr;
  #line 2243 
  void *__mptr_0;
  #line 2238 
  struct ice_fltr_list_entry *v_list_itr;
  #line 2238 
  struct ice_fltr_list_entry *tmp;
  #line 2240 
  if (v_list == (struct list_head *)0 || hw == (struct ice_hw *)0) 
                                                                   #line 2241 
                                                                   return ICE_ERR_PARAM;
  #line 2243 
  __mptr = (void *)v_list->next;
  #line 2243 
  v_list_itr = ((struct ice_fltr_list_entry *)__mptr);
  #line 2243 
  __mptr_0 = (void *)v_list_itr->list_entry.next;
  #line 2244 
  tmp = ((struct ice_fltr_list_entry *)__mptr_0);
  #line 2243 
  while (& v_list_itr->list_entry != v_list) {
    #line 2243 
    void *__mptr_1;
    {
      #line 2244 
      enum ice_sw_lkup_type l_type = v_list_itr->fltr_info.lkup_type;
      #line 2246 
      if (l_type != (unsigned int)ICE_SW_LKUP_VLAN) 
                                                    #line 2247 
                                                    return ICE_ERR_PARAM;
      #line 2248 
      v_list_itr->status = ice_remove_rule_internal(hw,(unsigned char)4,v_list_itr);
      #line 2251 
      if (v_list_itr->status != ICE_SUCCESS) 
                                             #line 2252 
                                             return v_list_itr->status;
    }
    #line 2243 
    v_list_itr = tmp;
    #line 2243 
    __mptr_1 = (void *)tmp->list_entry.next;
    #line 2243 
    tmp = ((struct ice_fltr_list_entry *)__mptr_1);
  }
  #line 2254 
  return ICE_SUCCESS;
}

#line 2263  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_switch.c"
static bool ice_vsi_uses_fltr(struct ice_fltr_mgmt_list_entry *fm_entry, u16 vsi_handle)
{
  #line 2266 
  int tmp_0;
  #line 2266 
  if (fm_entry->fltr_info.fltr_act == (unsigned int)ICE_FWD_TO_VSI && (int)fm_entry->fltr_info.vsi_handle == (int)vsi_handle) 
    #line 2266 
    tmp_0 = 1;
  else 
    #line 2266 
    if (fm_entry->fltr_info.fltr_act == (unsigned int)ICE_FWD_TO_VSI_LIST) {
      #line 2267 
      if ((int)test_bit((long)vsi_handle,
               (unsigned long *)(& (fm_entry->vsi_list_info)->vsi_map)) != 0) 
        #line 2266 
        tmp_0 = 1; else 
                        #line 2266 
                        tmp_0 = 0;
    }
    else 
         #line 2266 
         tmp_0 = 0;
  #line 2266 
  return (_Bool)(tmp_0 != 0);
}

#line 2285  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_switch.c"
static enum ice_status ice_add_entry_to_vsi_fltr_list(struct ice_hw *hw, u16 vsi_handle, struct list_head *vsi_list_head, struct ice_fltr_info *fi)
{
  #line 2294 
  void *__mptr;
  #line 2289 
  struct ice_fltr_list_entry *tmp;
  #line 2294 
  __mptr = (void *)hw;
  #line 2294 
  tmp = (struct ice_fltr_list_entry *)cif_devm_kzalloc_1(& (((struct ice_pf *)(__mptr + 18446744073709549512U))->pdev)->dev,
                           56UL,3264U);
  #line 2295 
  if (tmp == (struct ice_fltr_list_entry *)0) 
                                              #line 2296 
                                              return ICE_ERR_NO_MEMORY;
  #line 2298 
  tmp->fltr_info = *fi;
  #line 2305 
  tmp->fltr_info.fltr_act = ICE_FWD_TO_VSI;
  #line 2306 
  tmp->fltr_info.vsi_handle = vsi_handle;
  #line 2307 
  tmp->fltr_info.fwd_id.hw_vsi_id = (unsigned short)ice_get_hw_vsi_num(hw,(unsigned short)((int)vsi_handle));
  #line 2309 
  list_add(& tmp->list_entry,vsi_list_head);
  #line 2311 
  return ICE_SUCCESS;
}

#line 2328  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_switch.c"
static enum ice_status ice_add_to_vsi_fltr_list(struct ice_hw *hw, u16 vsi_handle, struct list_head *lkup_list_head, struct list_head *vsi_list_head)
{
  #line 2339 
  void *__mptr;
  #line 2332 
  struct ice_fltr_mgmt_list_entry *fm_entry;
  #line 2333 
  enum ice_status status = 0;
  #line 2336 
  if (! ice_is_vsi_valid(hw,(unsigned short)((int)vsi_handle))) 
                                                                #line 2337 
                                                                return ICE_ERR_PARAM;
  #line 2339 
  __mptr = (void *)lkup_list_head->next;
  #line 2339 
  fm_entry = ((struct ice_fltr_mgmt_list_entry *)(__mptr + 18446744073709551600U));
  #line 2339 
  while (& fm_entry->list_entry != lkup_list_head) {
    #line 2339 
    void *__mptr_0;
    {
      #line 2340 
      struct ice_fltr_info *fi;
      #line 2342 
      fi = & fm_entry->fltr_info;
      #line 2343 
      if (fi == (struct ice_fltr_info *)0) 
                                           #line 2344 
                                           goto __Cont;
      else {
        #line 2343 
        if (! ice_vsi_uses_fltr(fm_entry,(unsigned short)((int)vsi_handle))) 
          #line 2344 
          goto __Cont;
      }
      #line 2346 
      status = ice_add_entry_to_vsi_fltr_list(hw,(unsigned short)((int)vsi_handle),vsi_list_head,fi);
      #line 2348 
      if (status != ICE_SUCCESS) 
                                 #line 2349 
                                 return status;
    }
    #line 2339 
    __Cont: { /* sequence */
              #line 2339 
              __mptr_0 = (void *)fm_entry->list_entry.next;
              #line 2339 
              fm_entry = ((struct ice_fltr_mgmt_list_entry *)(__mptr_0 + 18446744073709551600U));
            }
  }
  #line 2351 
  return status;
}

#line 2361  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_switch.c"
static u8 ice_determine_promisc_mask(struct ice_fltr_info *fi)
{
  #line 2363 
  u16 vid = fi->l_data.mac_vlan.vlan_id;
  #line 2364 
  u8 *macaddr = (u8 *)(& fi->l_data.mac.mac_addr);
  #line 2365 
  bool is_tx_fltr = (_Bool)0;
  #line 2366 
  u8 promisc_mask = (unsigned char)0U;
  #line 2368 
  if ((unsigned int)fi->flag == 2U) 
                                    #line 2369 
                                    is_tx_fltr = (_Bool)1;
  #line 2371 
  if ((int)is_broadcast_ether_addr(macaddr) != 0) {
    #line 2372 
    int tmp;
    #line 2372 
    if ((int)is_tx_fltr != 0) 
                              #line 2372 
                              tmp = 32; else 
                                             #line 2372 
                                             tmp = 16;
    #line 2372 
    promisc_mask = (unsigned char)(tmp | (int)promisc_mask);
  }
  else {
    #line 2374 
    if ((int)is_multicast_ether_addr(macaddr) != 0) {
      #line 2375 
      int tmp_0;
      #line 2375 
      if ((int)is_tx_fltr != 0) 
                                #line 2375 
                                tmp_0 = 8; else 
                                                #line 2375 
                                                tmp_0 = 4;
      #line 2375 
      promisc_mask = (unsigned char)(tmp_0 | (int)promisc_mask);
    }
    else {
      #line 2377 
      if ((int)is_unicast_ether_addr(macaddr) != 0) {
        #line 2378 
        int tmp_1;
        #line 2378 
        if ((int)is_tx_fltr != 0) 
                                  #line 2378 
                                  tmp_1 = 2; else 
                                                  #line 2378 
                                                  tmp_1 = 1;
        #line 2378 
        promisc_mask = (unsigned char)(tmp_1 | (int)promisc_mask);
      }
    }
  }
  #line 2380 
  if ((unsigned int)vid != 0U) {
    #line 2381 
    int tmp_5;
    #line 2381 
    if ((int)is_tx_fltr != 0) 
                              #line 2381 
                              tmp_5 = -128; else 
                                                 #line 2381 
                                                 tmp_5 = 64;
    #line 2381 
    promisc_mask = (unsigned char)(tmp_5 | (int)promisc_mask);
  }
  #line 2384 
  return promisc_mask;
}

#line 2394  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_switch.c"
static enum ice_status ice_remove_promisc(struct ice_hw *hw, u8 recp_id, struct list_head *v_list)
{
  #line 2399 
  void *__mptr;
  #line 2399 
  void *__mptr_0;
  #line 2397 
  struct ice_fltr_list_entry *v_list_itr;
  #line 2397 
  struct ice_fltr_list_entry *tmp;
  #line 2399 
  __mptr = (void *)v_list->next;
  #line 2399 
  v_list_itr = ((struct ice_fltr_list_entry *)__mptr);
  #line 2399 
  __mptr_0 = (void *)v_list_itr->list_entry.next;
  #line 2400 
  tmp = ((struct ice_fltr_list_entry *)__mptr_0);
  #line 2399 
  while (& v_list_itr->list_entry != v_list) {
    #line 2399 
    void *__mptr_1;
    #line 2400 
    v_list_itr->status = ice_remove_rule_internal(hw,(unsigned char)((int)recp_id),v_list_itr);
    #line 2402 
    if (v_list_itr->status != ICE_SUCCESS) 
                                           #line 2403 
                                           return v_list_itr->status;
    #line 2399 
    v_list_itr = tmp;
    #line 2399 
    __mptr_1 = (void *)tmp->list_entry.next;
    #line 2399 
    tmp = ((struct ice_fltr_list_entry *)__mptr_1);
  }
  #line 2405 
  return ICE_SUCCESS;
}

#line 2416  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_switch.c"
enum ice_status ice_clear_vsi_promisc(struct ice_hw *hw, u16 vsi_handle, u8 promisc_mask, u16 vid)
{
  #line 2473 
  void *__mptr_1;
  #line 2442 
  void *__mptr;
  #line 2473 
  void *__mptr_2;
  #line 2420 
  struct ice_fltr_list_entry *fm_entry;
  #line 2420 
  struct ice_fltr_list_entry *tmp;
  #line 2421 
  struct list_head remove_list_head;
  #line 2422 
  struct ice_fltr_mgmt_list_entry *itr;
  #line 2423 
  struct list_head *rule_head;
  #line 2424 
  struct mutex *rule_lock;
  #line 2426 
  u8 recipe_id;
  #line 2419 
  struct ice_switch_info *sw = hw->switch_info;
  #line 2425 
  enum ice_status status = 0;
  #line 2428 
  if (! ice_is_vsi_valid(hw,(unsigned short)((int)vsi_handle))) 
                                                                #line 2429 
                                                                return ICE_ERR_PARAM;
  #line 2431 
  if (((int)promisc_mask & 192) != 0) 
                                      #line 2432 
                                      recipe_id = (unsigned char)9U; else 
                                                                    #line 2434 
                                                                    recipe_id = (unsigned char)3U;
  #line 2436 
  rule_head = & (sw->recp_list + (unsigned long)recipe_id)->filt_rules;
  #line 2437 
  rule_lock = & (sw->recp_list + (unsigned long)recipe_id)->filt_rule_lock;
  #line 2439 
  INIT_LIST_HEAD(& remove_list_head);
  #line 2441 
  cif_mutex_lock_rule_lock(rule_lock);
  #line 2442 
  __mptr = (void *)rule_head->next;
  #line 2442 
  itr = ((struct ice_fltr_mgmt_list_entry *)(__mptr + 18446744073709551600U));
  #line 2442 
  while (& itr->list_entry != rule_head) {
    #line 2442 
    void *__mptr_0;
    {
      #line 2443 
      struct ice_fltr_info *fltr_info;
      #line 2444 
      u8 fltr_promisc_mask = (unsigned char)0U;
      #line 2446 
      if (! ice_vsi_uses_fltr(itr,(unsigned short)((int)vsi_handle))) 
        #line 2447 
        goto __Cont;
      #line 2448 
      fltr_info = & itr->fltr_info;
      #line 2450 
      if ((unsigned int)recipe_id == 9U && (int)fltr_info->l_data.mac_vlan.vlan_id != (int)vid) 
        #line 2452 
        goto __Cont;
      #line 2454 
      fltr_promisc_mask = (unsigned char)((int)ice_determine_promisc_mask(fltr_info) | (int)fltr_promisc_mask);
      #line 2457 
      if (((int)fltr_promisc_mask & ~ ((int)promisc_mask)) != 0) 
                                                                 #line 2458 
                                                                 goto __Cont;
      #line 2460 
      status = ice_add_entry_to_vsi_fltr_list(hw,(unsigned short)((int)vsi_handle),& remove_list_head,fltr_info);
      #line 2463 
      if (status != ICE_SUCCESS) {
        #line 2464 
        cif_mutex_unlock_rule_lock(rule_lock);
        #line 2465 
        goto free_fltr_list;
      }
    }
    #line 2442 
    __Cont: { /* sequence */
              #line 2442 
              __mptr_0 = (void *)itr->list_entry.next;
              #line 2442 
              itr = ((struct ice_fltr_mgmt_list_entry *)(__mptr_0 + 18446744073709551600U));
            }
  }
  #line 2468 
  cif_mutex_unlock_rule_lock(rule_lock);
  #line 2470 
  status = ice_remove_promisc(hw,(unsigned char)((int)recipe_id),& remove_list_head);
  #line 2472 
  free_fltr_list: 
                  #line 2472 
  ;
  #line 2473 
  __mptr_1 = (void *)remove_list_head.next;
  #line 2473 
  fm_entry = ((struct ice_fltr_list_entry *)__mptr_1);
  #line 2473 
  __mptr_2 = (void *)fm_entry->list_entry.next;
  #line 2474 
  tmp = ((struct ice_fltr_list_entry *)__mptr_2);
  #line 2473 
  while (& fm_entry->list_entry != & remove_list_head) {
    #line 2473 
    void *__mptr_3;
    {
      #line 2475 
      void *__mptr_4;
      #line 2474 
      list_del(& fm_entry->list_entry);
      #line 2475 
      ;
      #line 2475 
      __mptr_4 = (void *)hw;
      #line 2475 
      devm_kfree(& (((struct ice_pf *)(__mptr_4 + 18446744073709549512U))->pdev)->dev,(void *)fm_entry);
    }
    #line 2473 
    fm_entry = tmp;
    #line 2473 
    __mptr_3 = (void *)tmp->list_entry.next;
    #line 2473 
    tmp = ((struct ice_fltr_list_entry *)__mptr_3);
  }
  #line 2478 
  return status;
}

#line 2489  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_switch.c"
enum ice_status ice_set_vsi_promisc(struct ice_hw *hw, u16 vsi_handle, u8 promisc_mask, u16 vid)
{
  #line 2492 
  struct ice_fltr_list_entry f_list_entry;
  #line 2493 
  struct ice_fltr_info new_fltr;
  #line 2495 
  bool is_tx_fltr;
  #line 2496 
  u16 hw_vsi_id;
  #line 2497 
  int pkt_type;
  #line 2498 
  u8 recipe_id;
  #line 2494 
  enum ice_status status = 0;
  #line 2500 
  if (! ice_is_vsi_valid(hw,(unsigned short)((int)vsi_handle))) 
                                                                #line 2501 
                                                                return ICE_ERR_PARAM;
  #line 2502 
  hw_vsi_id = ice_get_hw_vsi_num(hw,(unsigned short)((int)vsi_handle));
  #line 2504 
  memset((void *)(& new_fltr),0,36UL);
  #line 2506 
  if (((int)promisc_mask & 192) != 0) {
    #line 2507 
    new_fltr.lkup_type = ICE_SW_LKUP_PROMISC_VLAN;
    #line 2508 
    new_fltr.l_data.mac_vlan.vlan_id = vid;
    #line 2509 
    recipe_id = (unsigned char)9U;
  }
  else {
    #line 2511 
    new_fltr.lkup_type = ICE_SW_LKUP_PROMISC;
    #line 2512 
    recipe_id = (unsigned char)3U;
  }
  #line 2520 
  while ((unsigned int)promisc_mask != 0U) {
    #line 2521 
    u8 *mac_addr;
    #line 2523 
    pkt_type = 0;
    #line 2524 
    is_tx_fltr = (_Bool)0;
    #line 2526 
    if (((int)promisc_mask & 1) != 0) {
      #line 2527 
      promisc_mask = (unsigned char)((unsigned int)promisc_mask & 254U);
      #line 2528 
      pkt_type = 1;
    }
    else 
      #line 2529 
      if (((int)promisc_mask & 2) != 0) {
        #line 2530 
        promisc_mask = (unsigned char)((unsigned int)promisc_mask & 253U);
        #line 2531 
        pkt_type = 1;
        #line 2532 
        is_tx_fltr = (_Bool)1;
      }
      else 
        #line 2533 
        if (((int)promisc_mask & 4) != 0) {
          #line 2534 
          promisc_mask = (unsigned char)((unsigned int)promisc_mask & 251U);
          #line 2535 
          pkt_type = 2;
        }
        else 
          #line 2536 
          if (((int)promisc_mask & 8) != 0) {
            #line 2537 
            promisc_mask = (unsigned char)((unsigned int)promisc_mask & 247U);
            #line 2538 
            pkt_type = 2;
            #line 2539 
            is_tx_fltr = (_Bool)1;
          }
          else 
            #line 2540 
            if (((int)promisc_mask & 16) != 0) {
              #line 2541 
              promisc_mask = (unsigned char)((unsigned int)promisc_mask & 239U);
              #line 2542 
              pkt_type = 3;
            }
            else 
              #line 2543 
              if (((int)promisc_mask & 32) != 0) {
                #line 2544 
                promisc_mask = (unsigned char)((unsigned int)promisc_mask & 223U);
                #line 2545 
                pkt_type = 3;
                #line 2546 
                is_tx_fltr = (_Bool)1;
              }
    #line 2550 
    if (((int)promisc_mask & 64) != 0) 
                                       #line 2551 
                                       promisc_mask = (unsigned char)((unsigned int)promisc_mask & 191U);
    else 
      #line 2552 
      if (((int)promisc_mask & 128) != 0) {
        #line 2553 
        promisc_mask = (unsigned char)((unsigned int)promisc_mask & 127U);
        #line 2554 
        is_tx_fltr = (_Bool)1;
      }
    #line 2558 
    mac_addr = (u8 *)(& new_fltr.l_data.mac.mac_addr);
    #line 2559 
    if (pkt_type == 3) 
                       #line 2560 
                       eth_broadcast_addr(mac_addr);
    else 
      #line 2561 
      if ((unsigned int)pkt_type + 4294967295U <= 1U) {
        #line 2564 
        ether_addr_copy(mac_addr,(u8 *)(& dummy_eth_header));
        #line 2565 
        if (pkt_type == 2) 
                           #line 2566 
                           *mac_addr = (unsigned char)((unsigned int)*mac_addr | 1U);
      }
    #line 2570 
    new_fltr.flag = (unsigned short)0U;
    #line 2571 
    if ((int)is_tx_fltr != 0) {
      #line 2572 
      new_fltr.flag = (unsigned short)((unsigned int)new_fltr.flag | 2U);
      #line 2573 
      new_fltr.src = hw_vsi_id;
    }
    else {
      #line 2575 
      new_fltr.flag = (unsigned short)((unsigned int)new_fltr.flag | 1U);
      #line 2576 
      new_fltr.src = (unsigned short)(hw->port_info)->lport;
    }
    #line 2579 
    new_fltr.fltr_act = ICE_FWD_TO_VSI;
    #line 2580 
    new_fltr.vsi_handle = vsi_handle;
    #line 2581 
    new_fltr.fwd_id.hw_vsi_id = (unsigned short)hw_vsi_id;
    #line 2582 
    f_list_entry.fltr_info = new_fltr;
    #line 2584 
    status = ice_add_rule_internal(hw,(unsigned char)((int)recipe_id),& f_list_entry);
    #line 2585 
    if (status != ICE_SUCCESS) 
                               #line 2586 
                               goto set_promisc_exit;
  }
  #line 2589 
  set_promisc_exit: 
                    #line 2589 
  ;
  #line 2590 
  return status;
}

#line 2603  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_switch.c"
enum ice_status ice_set_vlan_vsi_promisc(struct ice_hw *hw, u16 vsi_handle, u8 promisc_mask, bool rm_vlan_promisc)
{
  #line 2637 
  void *__mptr_1;
  #line 2637 
  void *__mptr_2;
  #line 2624 
  void *__mptr;
  #line 2607 
  struct ice_fltr_list_entry *list_itr;
  #line 2607 
  struct ice_fltr_list_entry *tmp;
  #line 2608 
  struct list_head vsi_list_head;
  #line 2609 
  struct list_head *vlan_head;
  #line 2610 
  struct mutex *vlan_lock;
  #line 2611 
  enum ice_status status;
  #line 2612 
  u16 vlan_id;
  #line 2606 
  struct ice_switch_info *sw = hw->switch_info;
  #line 2614 
  INIT_LIST_HEAD(& vsi_list_head);
  #line 2615 
  vlan_lock = & (sw->recp_list + 4U)->filt_rule_lock;
  #line 2616 
  vlan_head = & (sw->recp_list + 4U)->filt_rules;
  #line 2617 
  cif_mutex_lock_vlan_lock(vlan_lock);
  #line 2618 
  status = ice_add_to_vsi_fltr_list(hw,(unsigned short)((int)vsi_handle),vlan_head,& vsi_list_head);
  #line 2620 
  cif_mutex_unlock_vlan_lock(vlan_lock);
  #line 2621 
  if (status != ICE_SUCCESS) 
                             #line 2622 
                             goto free_fltr_list;
  #line 2624 
  __mptr = (void *)vsi_list_head.next;
  #line 2624 
  list_itr = ((struct ice_fltr_list_entry *)__mptr);
  #line 2624 
  while (& list_itr->list_entry != & vsi_list_head) {
    #line 2624 
    void *__mptr_0;
    #line 2625 
    vlan_id = list_itr->fltr_info.l_data.vlan.vlan_id;
    #line 2626 
    if ((int)rm_vlan_promisc != 0) 
                                   #line 2627 
                                   status = ice_clear_vsi_promisc(hw,(unsigned short)((int)vsi_handle),(unsigned char)((int)promisc_mask),(unsigned short)((int)vlan_id)); else 
                                                                    #line 2630 
                                                                    status = ice_set_vsi_promisc(hw,(unsigned short)((int)vsi_handle),(unsigned char)((int)promisc_mask),(unsigned short)((int)vlan_id));
    #line 2632 
    if (status != ICE_SUCCESS) 
                               #line 2633 
                               break;
    #line 2624 
    __mptr_0 = (void *)list_itr->list_entry.next;
    #line 2624 
    list_itr = ((struct ice_fltr_list_entry *)__mptr_0);
  }
  #line 2636 
  free_fltr_list: 
                  #line 2636 
  ;
  #line 2637 
  __mptr_1 = (void *)vsi_list_head.next;
  #line 2637 
  list_itr = ((struct ice_fltr_list_entry *)__mptr_1);
  #line 2637 
  __mptr_2 = (void *)list_itr->list_entry.next;
  #line 2638 
  tmp = ((struct ice_fltr_list_entry *)__mptr_2);
  #line 2637 
  while (& list_itr->list_entry != & vsi_list_head) {
    #line 2637 
    void *__mptr_3;
    {
      #line 2639 
      void *__mptr_4;
      #line 2638 
      list_del(& list_itr->list_entry);
      #line 2639 
      ;
      #line 2639 
      __mptr_4 = (void *)hw;
      #line 2639 
      devm_kfree(& (((struct ice_pf *)(__mptr_4 + 18446744073709549512U))->pdev)->dev,(void *)list_itr);
    }
    #line 2637 
    list_itr = tmp;
    #line 2637 
    __mptr_3 = (void *)tmp->list_entry.next;
    #line 2637 
    tmp = ((struct ice_fltr_list_entry *)__mptr_3);
  }
  #line 2641 
  return status;
}

#line 2651  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_switch.c"
static void ice_remove_vsi_lkup_fltr(struct ice_hw *hw, u16 vsi_handle, enum ice_sw_lkup_type lkup)
{
  #line 2693 
  void *__mptr_1;
  #line 2693 
  void *__mptr_0;
  #line 2655 
  struct ice_fltr_list_entry *fm_entry;
  #line 2656 
  struct list_head remove_list_head;
  #line 2657 
  struct list_head *rule_head;
  #line 2658 
  struct ice_fltr_list_entry *tmp;
  #line 2659 
  struct mutex *rule_lock;
  #line 2660 
  enum ice_status status;
  #line 2654 
  struct ice_switch_info *sw = hw->switch_info;
  #line 2662 
  INIT_LIST_HEAD(& remove_list_head);
  #line 2663 
  rule_lock = & (sw->recp_list + (unsigned long)lkup)->filt_rule_lock;
  #line 2664 
  rule_head = & (sw->recp_list + (unsigned long)lkup)->filt_rules;
  #line 2665 
  cif_mutex_lock_rule_lock(rule_lock);
  #line 2666 
  status = ice_add_to_vsi_fltr_list(hw,(unsigned short)((int)vsi_handle),rule_head,& remove_list_head);
  #line 2668 
  cif_mutex_unlock_rule_lock(rule_lock);
  #line 2669 
  if (status != ICE_SUCCESS) 
                             #line 2670 
                             return;
  #line 2672 
  switch ((unsigned int)lkup) {
    #line 2673 
    case (unsigned int)1: 
                          #line 2673 
    ;
    #line 2674 
    ice_remove_mac(hw,& remove_list_head);
    #line 2675 
    break;
    #line 2676 
    case (unsigned int)4: 
                          #line 2676 
    ;
    #line 2677 
    ice_remove_vlan(hw,& remove_list_head);
    #line 2678 
    break;
    #line 2679 
    case (unsigned int)3: 
                          #line 2679 
    ;
    #line 2680 
    case (unsigned int)9: 
                          #line 2680 
    ;
    #line 2681 
    ice_remove_promisc(hw,(unsigned char)((int)((unsigned char)lkup)),& remove_list_head);
    #line 2682 
    break;
    #line 2683 
    case (unsigned int)2: 
                          #line 2683 
    ;
    #line 2684 
    case (unsigned int)0: 
                          #line 2684 
    ;
    #line 2685 
    case (unsigned int)8: 
                          #line 2685 
    ;
    #line 2686 
    case (unsigned int)5: 
                          #line 2686 
    ;
    #line 2687 
    case (unsigned int)10: 
                           #line 2687 
    ;
    #line 2688 
    default: 
             #line 2688 
    ;
    {
      #line 2689 
      bool branch;
      #line 2689 
      struct _ddebug __UNIQUE_ID_ddebug542 = {.modname = (char *)"ice", .function = (char *)"ice_remove_vsi_lkup_fltr", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_switch.c", .format = (char *)"Unsupported lookup type %d\n", .lineno = (unsigned int)2689U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 2689 
      branch = arch_static_branch(& __UNIQUE_ID_ddebug542.key.dd_key_false.key,(_Bool)0);
      #line 2689 
      if ((long)((long)((int)branch != 0)) != 0L) {
        #line 2689 
        void *__mptr;
        #line 2689 
        ;
        #line 2689 
        __mptr = (void *)hw;
        #line 2689 
        __dynamic_dev_dbg(& __UNIQUE_ID_ddebug542,& (((struct ice_pf *)(__mptr + 18446744073709549512U))->pdev)->dev,(char *)"Unsupported lookup type %d\n",(unsigned int)lkup);
      }
    }
    #line 2690 
    break;
  }
  #line 2693 
  __mptr_0 = (void *)remove_list_head.next;
  #line 2693 
  fm_entry = ((struct ice_fltr_list_entry *)__mptr_0);
  #line 2693 
  __mptr_1 = (void *)fm_entry->list_entry.next;
  #line 2694 
  tmp = ((struct ice_fltr_list_entry *)__mptr_1);
  #line 2693 
  while (& fm_entry->list_entry != & remove_list_head) {
    #line 2693 
    void *__mptr_2;
    {
      #line 2695 
      void *__mptr_3;
      #line 2694 
      list_del(& fm_entry->list_entry);
      #line 2695 
      ;
      #line 2695 
      __mptr_3 = (void *)hw;
      #line 2695 
      devm_kfree(& (((struct ice_pf *)(__mptr_3 + 18446744073709549512U))->pdev)->dev,(void *)fm_entry);
    }
    #line 2693 
    fm_entry = tmp;
    #line 2693 
    __mptr_2 = (void *)tmp->list_entry.next;
    #line 2693 
    tmp = ((struct ice_fltr_list_entry *)__mptr_2);
  }
  #line 2697 
  return;
}

#line 2704  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_switch.c"
void ice_remove_vsi_fltr(struct ice_hw *hw, u16 vsi_handle)
{
  #line 2706 
  ice_remove_vsi_lkup_fltr(hw,(unsigned short)((int)vsi_handle),(enum ice_sw_lkup_type)ICE_SW_LKUP_MAC);
  #line 2707 
  ice_remove_vsi_lkup_fltr(hw,(unsigned short)((int)vsi_handle),(enum ice_sw_lkup_type)ICE_SW_LKUP_MAC_VLAN);
  #line 2708 
  ice_remove_vsi_lkup_fltr(hw,(unsigned short)((int)vsi_handle),(enum ice_sw_lkup_type)ICE_SW_LKUP_PROMISC);
  #line 2709 
  ice_remove_vsi_lkup_fltr(hw,(unsigned short)((int)vsi_handle),(enum ice_sw_lkup_type)ICE_SW_LKUP_VLAN);
  #line 2710 
  ice_remove_vsi_lkup_fltr(hw,(unsigned short)((int)vsi_handle),(enum ice_sw_lkup_type)ICE_SW_LKUP_DFLT);
  #line 2711 
  ice_remove_vsi_lkup_fltr(hw,(unsigned short)((int)vsi_handle),(enum ice_sw_lkup_type)ICE_SW_LKUP_ETHERTYPE);
  #line 2712 
  ice_remove_vsi_lkup_fltr(hw,(unsigned short)((int)vsi_handle),(enum ice_sw_lkup_type)ICE_SW_LKUP_ETHERTYPE_MAC);
  #line 2713 
  ice_remove_vsi_lkup_fltr(hw,(unsigned short)((int)vsi_handle),(enum ice_sw_lkup_type)ICE_SW_LKUP_PROMISC_VLAN);
  #line 2714 
  return;
}

#line 2727  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_switch.c"
static enum ice_status ice_replay_vsi_fltr(struct ice_hw *hw, u16 vsi_handle, u8 recp_id, struct list_head *list_head)
{
  #line 2738 
  void *__mptr;
  #line 2730 
  struct ice_fltr_mgmt_list_entry *itr;
  #line 2732 
  u16 hw_vsi_id;
  #line 2731 
  enum ice_status status = 0;
  #line 2734 
  if (list_empty(list_head) != 0) 
                                  #line 2735 
                                  return status;
  #line 2736 
  hw_vsi_id = ice_get_hw_vsi_num(hw,(unsigned short)((int)vsi_handle));
  #line 2738 
  __mptr = (void *)list_head->next;
  #line 2738 
  itr = ((struct ice_fltr_mgmt_list_entry *)(__mptr + 18446744073709551600U));
  #line 2738 
  while (& itr->list_entry != list_head) {
    #line 2738 
    void *__mptr_0;
    {
      #line 2739 
      struct ice_fltr_list_entry f_entry;
      #line 2741 
      f_entry.fltr_info = itr->fltr_info;
      #line 2742 
      if (((unsigned int)itr->vsi_count <= 1U && (unsigned int)recp_id != 4U) && (int)itr->fltr_info.vsi_handle == (int)vsi_handle) {
        #line 2745 
        if (f_entry.fltr_info.src_id == (unsigned int)ICE_SRC_ID_VSI) 
          #line 2746 
          f_entry.fltr_info.src = hw_vsi_id;
        #line 2747 
        status = ice_add_rule_internal(hw,(unsigned char)((int)recp_id),& f_entry);
        #line 2748 
        if (status != ICE_SUCCESS) 
                                   #line 2749 
                                   goto end;
        #line 2750 
        goto __Cont;
      }
      #line 2752 
      if (itr->vsi_list_info == (struct ice_vsi_list_map_info *)0) 
                                                                   #line 2754 
                                                                   goto __Cont;
      else {
        #line 2753 
        if (! test_bit((long)vsi_handle,
                 (unsigned long *)(& (itr->vsi_list_info)->vsi_map))) 
          #line 2754 
          goto __Cont;
      }
      #line 2756 
      cif_clear_bit_2((long)vsi_handle,(unsigned long *)(& (itr->vsi_list_info)->vsi_map));
      #line 2757 
      f_entry.fltr_info.vsi_handle = vsi_handle;
      #line 2758 
      f_entry.fltr_info.fltr_act = ICE_FWD_TO_VSI;
      #line 2760 
      if (f_entry.fltr_info.src_id == (unsigned int)ICE_SRC_ID_VSI) 
                                                                    #line 2761 
                                                                    f_entry.fltr_info.src = hw_vsi_id;
      #line 2762 
      if ((unsigned int)recp_id == 4U) 
                                       #line 2763 
                                       status = ice_add_vlan_internal(hw,& f_entry); else 
                                                                    #line 2765 
                                                                    status = ice_add_rule_internal(hw,(unsigned char)((int)recp_id),& f_entry);
      #line 2766 
      if (status != ICE_SUCCESS) 
                                 #line 2767 
                                 goto end;
    }
    #line 2738 
    __Cont: { /* sequence */
              #line 2738 
              __mptr_0 = (void *)itr->list_entry.next;
              #line 2738 
              itr = ((struct ice_fltr_mgmt_list_entry *)(__mptr_0 + 18446744073709551600U));
            }
  }
  #line 2769 
  end: 
       #line 2769 
  ;
  #line 2770 
  return status;
}

#line 2780  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_switch.c"
enum ice_status ice_replay_vsi_all_fltr(struct ice_hw *hw, u16 vsi_handle)
{
  #line 2784 
  u8 i;
  #line 2782 
  struct ice_switch_info *sw = hw->switch_info;
  #line 2783 
  enum ice_status status = 0;
  #line 2786 
  i = (unsigned char)0U;
  #line 2786 
  while ((unsigned int)i <= 9U) {
    {
      #line 2787 
      struct list_head *head;
      #line 2789 
      head = & (sw->recp_list + (unsigned long)i)->filt_replay_rules;
      #line 2790 
      status = ice_replay_vsi_fltr(hw,(unsigned short)((int)vsi_handle),(unsigned char)((int)i),head);
      #line 2791 
      if (status != ICE_SUCCESS) 
                                 #line 2792 
                                 return status;
    }
    #line 2786 
    i = (u8)((int)i + 1);
  }
  #line 2794 
  return status;
}

#line 2803  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_switch.c"
void ice_rm_all_sw_replay_rule_info(struct ice_hw *hw)
{
  #line 2806 
  u8 i;
  #line 2805 
  struct ice_switch_info *sw = hw->switch_info;
  #line 2808 
  if (sw == (struct ice_switch_info *)0) 
                                         #line 2809 
                                         return;
  #line 2811 
  i = (unsigned char)0U;
  #line 2811 
  while ((unsigned int)i <= 9U) {
    #line 2812 
    if (list_empty(& (sw->recp_list + (unsigned long)i)->filt_replay_rules) == 0) {
      #line 2813 
      struct list_head *l_head;
      #line 2815 
      l_head = & (sw->recp_list + (unsigned long)i)->filt_replay_rules;
      #line 2816 
      ice_rem_sw_rule_info(hw,l_head);
    }
    #line 2811 
    i = (u8)((int)i + 1);
  }
  #line 2818 
  return;
}

#line 119  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ice/ice.ko/concurrency safety/0/concurrency safety/weaver/ice_switch.i.aux"
static void cif_set_bit_2(long nr, unsigned long *addr)
{
  #line 122 
  ldv_set_bit(nr,addr);
  #line 123 
  return;
}

#line 126  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ice/ice.ko/concurrency safety/0/concurrency safety/weaver/ice_switch.i.aux"
static void cif_clear_bit_2(long nr, unsigned long *addr)
{
  #line 129 
  ldv_clear_bit(nr,addr);
  #line 130 
  return;
}

#line 133  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ice/ice.ko/concurrency safety/0/concurrency safety/weaver/ice_switch.i.aux"
static void INIT_LIST_HEAD(struct list_head *list)
{
  #line 136 
  ldv_init_list_head(list);
  #line 137 
  return;
}

#line 154  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ice/ice.ko/concurrency safety/0/concurrency safety/weaver/ice_switch.i.aux"
static unsigned long cif_find_first_bit(unsigned long *addr, unsigned long size)
{
  #line 157 
  return ldv_find_first_bit(addr,size);
}

#line 798  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ice/ice.ko/concurrency safety/0/concurrency safety/weaver/ice_switch.i.aux"
static void *cif_devm_kcalloc_0(struct device *dev, size_t n, size_t size, gfp_t flags)
{
  #line 801 
  return ldv_devm_kcalloc(n,size,flags);
}

#line 805  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ice/ice.ko/concurrency safety/0/concurrency safety/weaver/ice_switch.i.aux"
static void *cif_devm_kzalloc_1(struct device *dev, size_t size, gfp_t flags)
{
  #line 808 
  return ldv_devm_kzalloc(size,flags);
}

#line 812  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ice/ice.ko/concurrency safety/0/concurrency safety/weaver/ice_switch.i.aux"
static void cif_mutex_lock_rule_lock(struct mutex *lock)
{
  #line 815 
  ldv_mutex_model_lock(lock,(char *)"rule_lock");
  #line 816 
  return;
}

#line 819  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ice/ice.ko/concurrency safety/0/concurrency safety/weaver/ice_switch.i.aux"
static void cif_mutex_unlock_rule_lock(struct mutex *lock)
{
  #line 822 
  ldv_mutex_model_unlock(lock,(char *)"rule_lock");
  #line 823 
  return;
}

#line 826  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ice/ice.ko/concurrency safety/0/concurrency safety/weaver/ice_switch.i.aux"
static void cif_mutex_lock_vlan_lock(struct mutex *lock)
{
  #line 829 
  ldv_mutex_model_lock(lock,(char *)"vlan_lock");
  #line 830 
  return;
}

#line 833  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ice/ice.ko/concurrency safety/0/concurrency safety/weaver/ice_switch.i.aux"
static void cif_mutex_unlock_vlan_lock(struct mutex *lock)
{
  #line 836 
  ldv_mutex_model_unlock(lock,(char *)"vlan_lock");
  #line 837 
  return;
}

#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bitops/instrumented-atomic.h"
#line 119  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ice/ice.ko/concurrency safety/0/concurrency safety/weaver/ice_xsk.i.aux"
static void cif_set_bit_3(long nr, unsigned long *addr);
#line 44  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bitops/instrumented-atomic.h"
#line 126  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ice/ice.ko/concurrency safety/0/concurrency safety/weaver/ice_xsk.i.aux"
static void cif_clear_bit_3(long nr, unsigned long *addr);
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/cmpxchg.h"
#line 15 
void __cmpxchg_wrong_size(void);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 23 
void *ldv_kzalloc(size_t size, gfp_t flags);
#line 25 
#line 25 
void *ldv_kcalloc(size_t n, size_t size, gfp_t flags);
#line 189  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/slab.h"
#line 189 
void kfree(void *);
#line 607 
#line 343  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ice/ice.ko/concurrency safety/0/concurrency safety/weaver/ice_xsk.i.aux"
static void *kcalloc(size_t n, size_t size, gfp_t flags);
#line 668  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/slab.h"
#line 364  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ice/ice.ko/concurrency safety/0/concurrency safety/weaver/ice_xsk.i.aux"
static void *kzalloc(size_t size, gfp_t flags);
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/hardirq.h"
#line 12 
void synchronize_irq(unsigned int);
#line 128  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/xdp.h"
#line 128 
void xdp_return_frame(struct xdp_frame *);
#line 423  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
#line 423 
void __napi_schedule(struct napi_struct *);
#line 431 
#line 431 
bool napi_schedule_prep(struct napi_struct *);
#line 440  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void napi_schedule(struct napi_struct *n)
{
  #line 442 
  if ((int)napi_schedule_prep(n) != 0) 
                                       #line 443 
                                       __napi_schedule(n);
  #line 444 
  return;
}

#line 503 
#line 503 
void napi_disable(struct napi_struct *);
#line 512  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void napi_enable(struct napi_struct *n)
{
  #line 514 
  int tmp_0;
  #line 514 
  if (test_bit(0L,& n->state)) 
                               #line 514 
                               tmp_0 = 0; else 
                                               #line 514 
                                               tmp_0 = 1;
  #line 514 
  if ((long)tmp_0 != 0L) {
    #line 515 
    ldv_inline_asm();
    #line 516 
    ldv_inline_asm();
    #line 517 
    ldv_inline_asm();
    #line 514 
    ;
  }
  #line 516 
  cif_clear_bit_3(0L,& n->state);
  #line 517 
  cif_clear_bit_3(3L,& n->state);
  #line 518 
  return;
}

#line 545  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static bool napi_if_scheduled_mark_missed(struct napi_struct *n)
{
  #line 547 
  unsigned long val;
  #line 547 
  unsigned long new;
  #line 549 
  while (1) {
    #line 558 
    unsigned long __ret;
    {
      #line 551 
      union __anonunion___u_6830 __u;
      #line 550 
      __read_once_size((void *)(& n->state),(void *)(& __u.__c),8);
      #line 550 
      val = (__u.__val);
      #line 551 
      if ((val & 4UL) != 0UL) 
                              #line 552 
                              return (_Bool)1;
      #line 554 
      if ((val & 1UL) == 0UL) 
                              #line 555 
                              return (_Bool)0;
      #line 557 
      new = val | 2UL;
    }
    {
      #line 558 
      unsigned long *__ai_ptr = & n->state;
      #line 558 
      kasan_check_read((void *)__ai_ptr,8U);
      {
        #line 558 
        unsigned long __old = val;
        #line 558 
        unsigned long __new = new;
        #line 558 
        switch (8UL) {
          #line 558 
          case (unsigned long)1: 
                                 #line 558 
          ;
          {
            #line 558 
            u8 *__ptr = (u8 *)__ai_ptr;
            #line 559 
            ldv_inline_asm();
            #line 558 
            break;
          }
          #line 558 
          case (unsigned long)2: 
                                 #line 558 
          ;
          {
            #line 558 
            u16 *__ptr_0 = (u16 *)__ai_ptr;
            #line 559 
            ldv_inline_asm();
            #line 558 
            break;
          }
          #line 558 
          case (unsigned long)4: 
                                 #line 558 
          ;
          {
            #line 558 
            u32 *__ptr_1 = (u32 *)__ai_ptr;
            #line 559 
            ldv_inline_asm();
            #line 558 
            break;
          }
          #line 558 
          case (unsigned long)8: 
                                 #line 558 
          ;
          {
            #line 558 
            u64 *__ptr_2 = (u64 *)__ai_ptr;
            #line 559 
            ldv_inline_asm();
            #line 558 
            break;
          }
          #line 558 
          default: 
                   #line 558 
          ;
          #line 558 
          __cmpxchg_wrong_size();
        }
        }
      }
    #line 558 
    ;
    #line 558 
    if (! (__ret != val)) 
                          #line 549 
                          break;
  }
  #line 560 
  return (_Bool)1;
}

#line 3104  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void netif_tx_start_queue_0(struct netdev_queue *dev_queue)
{
  #line 3106 
  cif_clear_bit_3(0L,& dev_queue->state);
  #line 3107 
  return;
}

#line 3154  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void netif_tx_stop_queue_0(struct netdev_queue *dev_queue)
{
  #line 3156 
  cif_set_bit_3(0L,& dev_queue->state);
  #line 3157 
  return;
}

#line 3387  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static bool netif_running(struct net_device *dev)
{
  #line 3389 
  return test_bit(0L,& dev->state);
}

#line 4750 
#line 4750 
void netdev_err(struct net_device *, char * , ...);
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/trace/events/xdp.h"
__inline static void trace_xdp_exception_0(struct net_device *dev, struct bpf_prog *xdp, u32 act)
{
  #line 28 
  int pscr_ret___0;
  #line 28 
  if ((int)static_key_false(& __tracepoint_xdp_exception.key) != 0) {
    #line 28 
    struct tracepoint_func *________p1;
    #line 28 
    int pscr_ret__;
    #line 28 
    struct tracepoint_func *it_func_ptr;
    #line 28 
    void *it_func;
    #line 28 
    void *__data;
    #line 28 
    int __idx = 0;
    {
      #line 28 
      void *__vpp_verify = (void *)0;
      #line 28 
      void *tmp = __vpp_verify;
    }
    #line 28 
    switch (4UL) {
      #line 28 
      int pfo_ret__;
      #line 28 
      int pfo_ret___0;
      #line 28 
      int pfo_ret___1;
      #line 28 
      int pfo_ret___2;
      #line 28 
      case (unsigned long)1: 
                             #line 28 
      ;
      #line 28 
      switch (4UL) {
        #line 28 
        case (unsigned long)1: 
                               #line 28 
        ;
        #line 29 
        ldv_inline_asm();
        #line 28 
        break;
        #line 28 
        case (unsigned long)2: 
                               #line 28 
        ;
        #line 29 
        ldv_inline_asm();
        #line 28 
        break;
        #line 28 
        case (unsigned long)4: 
                               #line 28 
        ;
        #line 29 
        ldv_inline_asm();
        #line 28 
        break;
        #line 28 
        case (unsigned long)8: 
                               #line 28 
        ;
        #line 29 
        ldv_inline_asm();
        #line 28 
        break;
        #line 28 
        default: 
                 #line 28 
        ;
        #line 28 
        __bad_percpu_size();
      }
      #line 28 
      pscr_ret__ = pfo_ret__;
      #line 28 
      break;
      #line 28 
      case (unsigned long)2: 
                             #line 28 
      ;
      #line 28 
      switch (4UL) {
        #line 28 
        case (unsigned long)1: 
                               #line 28 
        ;
        #line 29 
        ldv_inline_asm();
        #line 28 
        break;
        #line 28 
        case (unsigned long)2: 
                               #line 28 
        ;
        #line 29 
        ldv_inline_asm();
        #line 28 
        break;
        #line 28 
        case (unsigned long)4: 
                               #line 28 
        ;
        #line 29 
        ldv_inline_asm();
        #line 28 
        break;
        #line 28 
        case (unsigned long)8: 
                               #line 28 
        ;
        #line 29 
        ldv_inline_asm();
        #line 28 
        break;
        #line 28 
        default: 
                 #line 28 
        ;
        #line 28 
        __bad_percpu_size();
      }
      #line 28 
      pscr_ret__ = pfo_ret___0;
      #line 28 
      break;
      #line 28 
      case (unsigned long)4: 
                             #line 28 
      ;
      #line 28 
      switch (4UL) {
        #line 28 
        case (unsigned long)1: 
                               #line 28 
        ;
        #line 29 
        ldv_inline_asm();
        #line 28 
        break;
        #line 28 
        case (unsigned long)2: 
                               #line 28 
        ;
        #line 29 
        ldv_inline_asm();
        #line 28 
        break;
        #line 28 
        case (unsigned long)4: 
                               #line 28 
        ;
        #line 29 
        ldv_inline_asm();
        #line 28 
        break;
        #line 28 
        case (unsigned long)8: 
                               #line 28 
        ;
        #line 29 
        ldv_inline_asm();
        #line 28 
        break;
        #line 28 
        default: 
                 #line 28 
        ;
        #line 28 
        __bad_percpu_size();
      }
      #line 28 
      pscr_ret__ = pfo_ret___1;
      #line 28 
      break;
      #line 28 
      case (unsigned long)8: 
                             #line 28 
      ;
      #line 28 
      switch (4UL) {
        #line 28 
        case (unsigned long)1: 
                               #line 28 
        ;
        #line 29 
        ldv_inline_asm();
        #line 28 
        break;
        #line 28 
        case (unsigned long)2: 
                               #line 28 
        ;
        #line 29 
        ldv_inline_asm();
        #line 28 
        break;
        #line 28 
        case (unsigned long)4: 
                               #line 28 
        ;
        #line 29 
        ldv_inline_asm();
        #line 28 
        break;
        #line 28 
        case (unsigned long)8: 
                               #line 28 
        ;
        #line 29 
        ldv_inline_asm();
        #line 28 
        break;
        #line 28 
        default: 
                 #line 28 
        ;
        #line 28 
        __bad_percpu_size();
      }
      #line 28 
      pscr_ret__ = pfo_ret___2;
      #line 28 
      break;
      #line 28 
      default: 
               #line 28 
      ;
      #line 28 
      __bad_size_call_parameter();
      #line 28 
      break;
    }
    #line 28 
    if (cpumask_test_cpu(pscr_ret__,& __cpu_online_mask) == 0) 
                                                               #line 28 
                                                               return;
    {
      #line 28 
      int __ret_warn_on = 0;
      #line 28 
      if ((long)(__ret_warn_on != 0) != 0L) {
        #line 29 
        ldv_inline_asm();
        #line 30 
        ldv_inline_asm();
      }
      #line 28 
      long tmp_5 = (long)(__ret_warn_on != 0);
    }
    #line 28 
    __preempt_count_add(1);
    #line 29 
    ldv_inline_asm();
    {
      #line 29 
      union __anonunion___u_6952 __u;
      #line 28 
      __read_once_size((void *)(& __tracepoint_xdp_exception.funcs),(void *)(& __u.__c),8);
      #line 28 
      ________p1 = (__u.__val);
      }
    #line 28 
    it_func_ptr = ________p1;
    #line 28 
    if (it_func_ptr != (struct tracepoint_func *)0) 
      #line 28 
      while (1) {
        #line 28 
        it_func = it_func_ptr->func;
        #line 28 
        __data = it_func_ptr->data;
        #line 28 
        (*((void (*)(void *, struct net_device *, struct bpf_prog *, u32 ))it_func))(__data,dev,xdp,act);
        #line 28 
        it_func_ptr ++;
        #line 29 
        ;
        #line 29 
        if (! (it_func_ptr->func != (void *)0)) 
                                                #line 28 
                                                break;
      }
    #line 30 
    ldv_inline_asm();
    #line 28 
    __preempt_count_sub(1);
  }
  {
    #line 28 
    void *__vpp_verify_0 = (void *)0;
    #line 28 
    void *tmp_13 = __vpp_verify_0;
  }
  #line 28 
  switch (4UL) {
    #line 28 
    int pfo_ret___5;
    #line 28 
    int pfo_ret___6;
    #line 28 
    int pfo_ret___3;
    #line 28 
    int pfo_ret___4;
    #line 28 
    case (unsigned long)1: 
                           #line 28 
    ;
    #line 28 
    switch (4UL) {
      #line 28 
      case (unsigned long)1: 
                             #line 28 
      ;
      #line 29 
      ldv_inline_asm();
      #line 28 
      break;
      #line 28 
      case (unsigned long)2: 
                             #line 28 
      ;
      #line 29 
      ldv_inline_asm();
      #line 28 
      break;
      #line 28 
      case (unsigned long)4: 
                             #line 28 
      ;
      #line 29 
      ldv_inline_asm();
      #line 28 
      break;
      #line 28 
      case (unsigned long)8: 
                             #line 28 
      ;
      #line 29 
      ldv_inline_asm();
      #line 28 
      break;
      #line 28 
      default: 
               #line 28 
      ;
      #line 28 
      __bad_percpu_size();
    }
    #line 28 
    pscr_ret___0 = pfo_ret___3;
    #line 28 
    break;
    #line 28 
    case (unsigned long)2: 
                           #line 28 
    ;
    #line 28 
    switch (4UL) {
      #line 28 
      case (unsigned long)1: 
                             #line 28 
      ;
      #line 29 
      ldv_inline_asm();
      #line 28 
      break;
      #line 28 
      case (unsigned long)2: 
                             #line 28 
      ;
      #line 29 
      ldv_inline_asm();
      #line 28 
      break;
      #line 28 
      case (unsigned long)4: 
                             #line 28 
      ;
      #line 29 
      ldv_inline_asm();
      #line 28 
      break;
      #line 28 
      case (unsigned long)8: 
                             #line 28 
      ;
      #line 29 
      ldv_inline_asm();
      #line 28 
      break;
      #line 28 
      default: 
               #line 28 
      ;
      #line 28 
      __bad_percpu_size();
    }
    #line 28 
    pscr_ret___0 = pfo_ret___4;
    #line 28 
    break;
    #line 28 
    case (unsigned long)4: 
                           #line 28 
    ;
    #line 28 
    switch (4UL) {
      #line 28 
      case (unsigned long)1: 
                             #line 28 
      ;
      #line 29 
      ldv_inline_asm();
      #line 28 
      break;
      #line 28 
      case (unsigned long)2: 
                             #line 28 
      ;
      #line 29 
      ldv_inline_asm();
      #line 28 
      break;
      #line 28 
      case (unsigned long)4: 
                             #line 28 
      ;
      #line 29 
      ldv_inline_asm();
      #line 28 
      break;
      #line 28 
      case (unsigned long)8: 
                             #line 28 
      ;
      #line 29 
      ldv_inline_asm();
      #line 28 
      break;
      #line 28 
      default: 
               #line 28 
      ;
      #line 28 
      __bad_percpu_size();
    }
    #line 28 
    pscr_ret___0 = pfo_ret___5;
    #line 28 
    break;
    #line 28 
    case (unsigned long)8: 
                           #line 28 
    ;
    #line 28 
    switch (4UL) {
      #line 28 
      case (unsigned long)1: 
                             #line 28 
      ;
      #line 29 
      ldv_inline_asm();
      #line 28 
      break;
      #line 28 
      case (unsigned long)2: 
                             #line 28 
      ;
      #line 29 
      ldv_inline_asm();
      #line 28 
      break;
      #line 28 
      case (unsigned long)4: 
                             #line 28 
      ;
      #line 29 
      ldv_inline_asm();
      #line 28 
      break;
      #line 28 
      case (unsigned long)8: 
                             #line 28 
      ;
      #line 29 
      ldv_inline_asm();
      #line 28 
      break;
      #line 28 
      default: 
               #line 28 
      ;
      #line 28 
      __bad_percpu_size();
    }
    #line 28 
    pscr_ret___0 = pfo_ret___6;
    #line 28 
    break;
    #line 28 
    default: 
             #line 28 
    ;
    #line 28 
    __bad_size_call_parameter();
    #line 28 
    break;
  }
  #line 28 
  if (cpumask_test_cpu(pscr_ret___0,& __cpu_online_mask) != 0) {
    #line 28 
    __rcu_read_lock();
    {
      #line 29 
      union __anonunion___u_6954 __u_0;
      #line 28 
      __read_once_size((void *)(& __tracepoint_xdp_exception.funcs),(void *)(& __u_0.__c),8);
      #line 28 
      struct tracepoint_func *________p1_0 = (__u_0.__val);
      {
        #line 28 
        bool __warned;
        #line 28 
        if (debug_lockdep_rcu_enabled() != 0) 
          #line 28 
          if (! __warned) {
            #line 28 
            if (rcu_read_lock_sched_held() == 0) {
              #line 28 
              __warned = (_Bool)1;
              #line 28 
              lockdep_rcu_suspicious((char *)"./include/trace/events/xdp.h",28,(char *)"suspicious rcu_dereference_check() usage");
            }
          }
      }
      #line 28 
      struct tracepoint_func *tmp_11 = ________p1_0;
    }
    #line 28 
    __rcu_read_unlock();
  }
  #line 30 
  return;
}

#line 122  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/xdp_sock.h"
#line 122 
u64 *xsk_umem_peek_addr(struct xdp_umem *, u64 *);
#line 123 
#line 123 
void xsk_umem_discard_addr(struct xdp_umem *);
#line 124 
#line 124 
void xsk_umem_complete_tx(struct xdp_umem *, u32);
#line 125 
#line 125 
bool xsk_umem_consume_tx(struct xdp_umem *, struct xdp_desc *);
#line 126 
#line 126 
void xsk_umem_consume_tx_done(struct xdp_umem *);
#line 127 
#line 127 
struct xdp_umem_fq_reuse *xsk_reuseq_prepare(u32);
#line 128 
#line 128 
struct xdp_umem_fq_reuse *xsk_reuseq_swap(struct xdp_umem *, struct xdp_umem_fq_reuse *);
#line 130 
#line 130 
void xsk_reuseq_free(struct xdp_umem_fq_reuse *);
#line 159  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/xdp_sock.h"
__inline static u64 xsk_umem_extract_addr(u64 addr)
{
  #line 161 
  return addr & 281474976710655ULL;
}

#line 164  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/xdp_sock.h"
__inline static u64 xsk_umem_extract_offset(u64 addr)
{
  #line 166 
  return addr >> 48;
}

#line 169  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/xdp_sock.h"
__inline static u64 xsk_umem_add_offset_to_addr(u64 addr)
{
  #line 171 
  return xsk_umem_extract_addr(addr) + xsk_umem_extract_offset(addr);
}

#line 174  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/xdp_sock.h"
__inline static char *xdp_umem_get_data(struct xdp_umem *umem, u64 addr)
{
  #line 176 
  unsigned long page_addr;
  #line 178 
  addr = xsk_umem_add_offset_to_addr(addr);
  #line 179 
  page_addr = (unsigned long)(umem->pages + (addr >> 12))->addr;
  #line 181 
  return (char *)(((unsigned long)addr & (unsigned long)4095U) | (page_addr & 18446744073709547520U));
}

#line 184  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/xdp_sock.h"
__inline static dma_addr_t xdp_umem_get_dma(struct xdp_umem *umem, u64 addr)
{
  #line 186 
  addr = xsk_umem_add_offset_to_addr(addr);
  #line 188 
  return (umem->pages + (addr >> 12))->dma + (addr & 4095ULL);
}

#line 202  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/xdp_sock.h"
__inline static u64 *xsk_umem_peek_addr_rq(struct xdp_umem *umem, u64 *addr)
{
  #line 204 
  struct xdp_umem_fq_reuse *rq = umem->fq_reuse;
  #line 206 
  if (rq->length == 0U) {
    #line 207 
    return xsk_umem_peek_addr(umem,addr);
  }
  #line 209 
  *addr = rq->handles[rq->length + 4294967295U];
  #line 210 
  return addr;
}

#line 213  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/xdp_sock.h"
__inline static void xsk_umem_discard_addr_rq(struct xdp_umem *umem)
{
  #line 215 
  struct xdp_umem_fq_reuse *rq = umem->fq_reuse;
  #line 217 
  if (rq->length == 0U) 
                        #line 218 
                        xsk_umem_discard_addr(umem); else 
                                                          #line 220 
                                                          (rq->length) --;
  #line 221 
  return;
}

#line 223  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/xdp_sock.h"
__inline static void xsk_umem_fq_reuse(struct xdp_umem *umem, u64 addr)
{
  #line 227 
  u32 tmp;
  #line 225 
  struct xdp_umem_fq_reuse *rq = umem->fq_reuse;
  #line 227 
  tmp = rq->length;
  #line 227 
  (rq->length) ++;
  #line 227 
  rq->handles[tmp] = addr;
  #line 228 
  return;
}

#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_xsk.h"
#line 449  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_xsk.c"
int ice_xsk_umem_setup(struct ice_vsi *vsi, struct xdp_umem *umem, u16 qid);
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_xsk.h"
#line 1080  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_xsk.c"
int ice_xsk_wakeup(struct net_device *netdev, u32 queue_id, u32 flags);
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_xsk.h"
#line 1121  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_xsk.c"
bool ice_xsk_any_rx_ring_ena(struct ice_vsi *vsi);
#line 415  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice.h"
__inline static void ice_irq_dynamic_ena(struct ice_hw *hw, struct ice_vsi *vsi, struct ice_q_vector *q_vector)
{
  #line 418 
  unsigned int tmp;
  #line 421 
  u32 val;
  #line 418 
  if (vsi != (struct ice_vsi *)0 && q_vector != (struct ice_q_vector *)0) 
    #line 418 
    tmp = (unsigned int)q_vector->reg_idx; else 
                                                #line 418 
                                                tmp = ((struct ice_pf *)hw->back)->oicr_idx;
  #line 418 
  u32 vector = tmp;
  #line 420 
  int itr = 3;
  #line 426 
  val = (unsigned int)((itr << 3) | 3);
  #line 428 
  if (vsi != (struct ice_vsi *)0) {
    #line 429 
    if ((int)test_bit(1L,(unsigned long *)(& vsi->state)) != 0) 
                                                                #line 430 
                                                                return;
  }
  #line 431 
  writel(val,(void *)(hw->hw_addr + (unsigned long)((vector + 360448U) * 4U)));
  #line 432 
  return;
}

#line 450  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice.h"
__inline static void ice_set_ring_xdp(struct ice_ring *ring)
{
  #line 452 
  ring->flags = (unsigned char)((unsigned int)ring->flags | 1U);
  #line 453 
  return;
}

#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_lib.h"
#line 98 
u32 ice_intrl_usec_to_reg(u8 intrl, u8 gran);
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_xsk.c"
static void ice_qp_reset_stats(struct ice_vsi *vsi, u16 q_idx)
{
  #line 22 
  memset((void *)(& (*(vsi->rx_rings + (unsigned long)q_idx))->__anonCompField_ice_ring_197.rx_stats),0,32UL);
  #line 24 
  memset((void *)(& (*(vsi->tx_rings + (unsigned long)q_idx))->stats),0,16UL);
  #line 26 
  if ((int)ice_is_xdp_ena_vsi(vsi) != 0) 
                                         #line 27 
                                         memset((void *)(& (*(vsi->xdp_rings + (unsigned long)q_idx))->stats),0,16UL);
  #line 28 
  return;
}

#line 36  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_xsk.c"
static void ice_qp_clean_rings(struct ice_vsi *vsi, u16 q_idx)
{
  #line 38 
  ice_clean_tx_ring(*(vsi->tx_rings + (unsigned long)q_idx));
  #line 39 
  if ((int)ice_is_xdp_ena_vsi(vsi) != 0) 
                                         #line 40 
                                         ice_clean_tx_ring(*(vsi->xdp_rings + (unsigned long)q_idx));
  #line 41 
  ice_clean_rx_ring(*(vsi->rx_rings + (unsigned long)q_idx));
  #line 42 
  return;
}

#line 51  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_xsk.c"
static void ice_qvec_toggle_napi(struct ice_vsi *vsi, struct ice_q_vector *q_vector, bool enable)
{
  #line 54 
  if (vsi->netdev == (struct net_device *)0 || q_vector == (struct ice_q_vector *)0) 
    #line 55 
    return;
  #line 57 
  if ((int)enable != 0) 
                        #line 58 
                        napi_enable(& q_vector->napi); else 
                                                            #line 60 
                                                            napi_disable(& q_vector->napi);
  #line 61 
  return;
}

#line 70  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_xsk.c"
static void ice_qvec_dis_irq(struct ice_vsi *vsi, struct ice_ring *rx_ring, struct ice_q_vector *q_vector)
{
  #line 76 
  u16 reg;
  #line 77 
  u32 val;
  #line 73 
  struct ice_pf *pf = vsi->back;
  #line 74 
  struct ice_hw *hw = & pf->hw;
  #line 75 
  int base = vsi->base_vector;
  #line 82 
  reg = rx_ring->reg_idx;
  #line 83 
  val = readl((void *)(hw->hw_addr + (unsigned long)(((int)reg + 344064) * 4)));
  #line 84 
  val &= 3221225471U;
  #line 85 
  writel(val,(void *)(hw->hw_addr + (unsigned long)(((int)reg + 344064) * 4)));
  #line 87 
  if (q_vector != (struct ice_q_vector *)0) {
    #line 88 
    u16 v_idx = q_vector->v_idx;
    #line 90 
    writel(0U,(void *)(hw->hw_addr + (unsigned long)(((int)q_vector->reg_idx + 360448) * 4)));
    #line 91 
    readl((void *)(hw->hw_addr + 745772U));
    #line 92 
    synchronize_irq((pf->msix_entries + (unsigned long)((int)v_idx + base))->vector);
  }
  #line 94 
  return;
}

#line 102  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_xsk.c"
static void ice_qvec_cfg_msix(struct ice_vsi *vsi, struct ice_q_vector *q_vector)
{
  #line 107 
  struct ice_ring *ring;
  #line 104 
  u16 reg_idx = q_vector->reg_idx;
  #line 105 
  struct ice_pf *pf = vsi->back;
  #line 106 
  struct ice_hw *hw = & pf->hw;
  #line 109 
  ice_cfg_itr(hw,q_vector);
  #line 111 
  ;
  #line 111 
  writel(ice_intrl_usec_to_reg((unsigned char)((int)q_vector->intrl),
                            (unsigned char)((int)hw->intrl_gran)),(void *)(hw->hw_addr + (unsigned long)(((int)reg_idx + 354304) * 4)));
  #line 114 
  ring = q_vector->tx.ring;
  #line 114 
  while (ring != (struct ice_ring *)0) {
    #line 115 
    ice_cfg_txq_interrupt(vsi,(unsigned short)((int)ring->reg_idx),(unsigned short)((int)reg_idx),(unsigned short)((int)q_vector->tx.itr_idx));
    #line 114 
    ring = ring->next;
  }
  #line 118 
  ring = q_vector->rx.ring;
  #line 118 
  while (ring != (struct ice_ring *)0) {
    #line 119 
    ice_cfg_rxq_interrupt(vsi,(unsigned short)((int)ring->reg_idx),(unsigned short)((int)reg_idx),(unsigned short)((int)q_vector->rx.itr_idx));
    #line 118 
    ring = ring->next;
  }
  #line 122 
  readl((void *)(hw->hw_addr + 745772U));
  #line 123 
  return;
}

#line 130  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_xsk.c"
static void ice_qvec_ena_irq(struct ice_vsi *vsi, struct ice_q_vector *q_vector)
{
  #line 132 
  struct ice_pf *pf = vsi->back;
  #line 133 
  struct ice_hw *hw = & pf->hw;
  #line 135 
  ice_irq_dynamic_ena(hw,vsi,q_vector);
  #line 137 
  readl((void *)(hw->hw_addr + 745772U));
  #line 138 
  return;
}

#line 147  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_xsk.c"
static int ice_qp_dis(struct ice_vsi *vsi, u16 q_idx)
{
  #line 150 
  struct ice_ring *tx_ring;
  #line 150 
  struct ice_ring *rx_ring;
  #line 151 
  struct ice_q_vector *q_vector;
  #line 153 
  int err;
  #line 149 
  struct ice_txq_meta txq_meta = {.q_teid = 0U, .q_id = (unsigned short)0, .q_handle = (unsigned short)0, .vsi_idx = (unsigned short)0, .tc = (unsigned char)0};
  #line 152 
  int timeout = 50;
  #line 155 
  if ((int)vsi->num_rxq <= (int)q_idx || (int)vsi->num_txq <= (int)q_idx) 
    #line 156 
    return -22;
  #line 158 
  tx_ring = *(vsi->tx_rings + (unsigned long)q_idx);
  #line 159 
  rx_ring = *(vsi->rx_rings + (unsigned long)q_idx);
  #line 160 
  q_vector = rx_ring->q_vector;
  #line 162 
  while (1) {
    #line 162 
    if (! ((int)test_and_clear_bit(21L,(unsigned long *)(& vsi->state)) != 0)) 
      #line 162 
      break;
    #line 163 
    timeout --;
    #line 164 
    if (timeout == 0) 
                      #line 165 
                      return -16;
    #line 166 
    usleep_range(1000UL,2000UL);
  }
  #line 168 
  netif_tx_stop_queue_0(netdev_get_tx_queue(vsi->netdev,(unsigned int)q_idx));
  #line 170 
  ice_qvec_dis_irq(vsi,rx_ring,q_vector);
  #line 172 
  ice_fill_txq_meta(vsi,tx_ring,& txq_meta);
  #line 173 
  err = ice_vsi_stop_tx_ring(vsi,(enum ice_disq_rst_src)ICE_NO_RESET,(unsigned short)0,tx_ring,& txq_meta);
  #line 174 
  if (err != 0) 
                #line 175 
                return err;
  #line 176 
  if ((int)ice_is_xdp_ena_vsi(vsi) != 0) {
    #line 177 
    struct ice_ring *xdp_ring = *(vsi->xdp_rings + (unsigned long)q_idx);
    #line 179 
    memset((void *)(& txq_meta),0,12UL);
    #line 180 
    ice_fill_txq_meta(vsi,xdp_ring,& txq_meta);
    #line 181 
    err = ice_vsi_stop_tx_ring(vsi,(enum ice_disq_rst_src)ICE_NO_RESET,(unsigned short)0,xdp_ring,& txq_meta);
    #line 183 
    if (err != 0) 
                  #line 184 
                  return err;
  }
  #line 186 
  err = ice_vsi_ctrl_rx_ring(vsi,(_Bool)0,(unsigned short)((int)q_idx));
  #line 187 
  if (err != 0) 
                #line 188 
                return err;
  #line 190 
  ice_qvec_toggle_napi(vsi,q_vector,(_Bool)0);
  #line 191 
  ice_qp_clean_rings(vsi,(unsigned short)((int)q_idx));
  #line 192 
  ice_qp_reset_stats(vsi,(unsigned short)((int)q_idx));
  #line 194 
  return 0;
}

#line 204  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_xsk.c"
static int ice_qp_ena(struct ice_vsi *vsi, u16 q_idx)
{
  #line 206 
  struct ice_aqc_add_tx_qgrp *qg_buf;
  #line 207 
  struct ice_ring *tx_ring;
  #line 207 
  struct ice_ring *rx_ring;
  #line 208 
  struct ice_q_vector *q_vector;
  #line 209 
  int err;
  #line 211 
  if ((int)vsi->num_rxq <= (int)q_idx || (int)vsi->num_txq <= (int)q_idx) 
    #line 212 
    return -22;
  #line 214 
  qg_buf = (struct ice_aqc_add_tx_qgrp *)kzalloc(56UL,3264U);
  #line 215 
  if (qg_buf == (struct ice_aqc_add_tx_qgrp *)0) 
                                                 #line 216 
                                                 return -12;
  #line 218 
  qg_buf->num_txqs = (unsigned char)1U;
  #line 220 
  tx_ring = *(vsi->tx_rings + (unsigned long)q_idx);
  #line 221 
  rx_ring = *(vsi->rx_rings + (unsigned long)q_idx);
  #line 222 
  q_vector = rx_ring->q_vector;
  #line 224 
  err = ice_vsi_cfg_txq(vsi,tx_ring,qg_buf);
  #line 225 
  if (err != 0) 
                #line 226 
                goto free_buf;
  #line 228 
  if ((int)ice_is_xdp_ena_vsi(vsi) != 0) {
    #line 229 
    struct ice_ring *xdp_ring = *(vsi->xdp_rings + (unsigned long)q_idx);
    #line 231 
    memset((void *)qg_buf,0,56UL);
    #line 232 
    qg_buf->num_txqs = (unsigned char)1U;
    #line 233 
    err = ice_vsi_cfg_txq(vsi,xdp_ring,qg_buf);
    #line 234 
    if (err != 0) 
                  #line 235 
                  goto free_buf;
    #line 236 
    ice_set_ring_xdp(xdp_ring);
    #line 237 
    xdp_ring->xsk_umem = ice_xsk_umem(xdp_ring);
  }
  #line 240 
  err = ice_setup_rx_ctx(rx_ring);
  #line 241 
  if (err != 0) 
                #line 242 
                goto free_buf;
  #line 244 
  ice_qvec_cfg_msix(vsi,q_vector);
  #line 246 
  err = ice_vsi_ctrl_rx_ring(vsi,(_Bool)1,(unsigned short)((int)q_idx));
  #line 247 
  if (err != 0) 
                #line 248 
                goto free_buf;
  #line 250 
  cif_clear_bit_3(21L,(unsigned long *)(& vsi->state));
  #line 251 
  ice_qvec_toggle_napi(vsi,q_vector,(_Bool)1);
  #line 252 
  ice_qvec_ena_irq(vsi,q_vector);
  #line 254 
  netif_tx_start_queue_0(netdev_get_tx_queue(vsi->netdev,(unsigned int)q_idx));
  #line 255 
  free_buf: 
            #line 255 
  ;
  #line 256 
  kfree((void *)qg_buf);
  #line 257 
  return err;
}

#line 266  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_xsk.c"
static int ice_xsk_alloc_umems(struct ice_vsi *vsi)
{
  #line 268 
  if (vsi->xsk_umems != (struct xdp_umem **)0) 
                                               #line 269 
                                               return 0;
  #line 271 
  vsi->xsk_umems = (struct xdp_umem **)kcalloc((unsigned long)vsi->num_xsk_umems,8UL,3264U);
  #line 274 
  if (vsi->xsk_umems == (struct xdp_umem **)0) {
    #line 275 
    vsi->num_xsk_umems = (unsigned short)0U;
    #line 276 
    return -12;
  }
  #line 279 
  return 0;
}

#line 290  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_xsk.c"
static int ice_xsk_add_umem(struct ice_vsi *vsi, struct xdp_umem *umem, u16 qid)
{
  #line 292 
  int err;
  #line 294 
  err = ice_xsk_alloc_umems(vsi);
  #line 295 
  if (err != 0) 
                #line 296 
                return err;
  #line 298 
  *(vsi->xsk_umems + (unsigned long)qid) = umem;
  #line 299 
  vsi->num_xsk_umems_used = (u16)((int)vsi->num_xsk_umems_used + 1);
  #line 301 
  return 0;
}

#line 309  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_xsk.c"
static void ice_xsk_remove_umem(struct ice_vsi *vsi, u16 qid)
{
  #line 311 
  *(vsi->xsk_umems + (unsigned long)qid) = (struct xdp_umem *)0;
  #line 312 
  vsi->num_xsk_umems_used = (u16)((int)vsi->num_xsk_umems_used - 1);
  #line 314 
  if ((unsigned int)vsi->num_xsk_umems_used == 0U) {
    #line 315 
    kfree((void *)vsi->xsk_umems);
    #line 316 
    vsi->xsk_umems = (struct xdp_umem **)0;
    #line 317 
    vsi->num_xsk_umems = (unsigned short)0U;
  }
  #line 319 
  return;
}

#line 328  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_xsk.c"
static int ice_xsk_umem_dma_map(struct ice_vsi *vsi, struct xdp_umem *umem)
{
  #line 331 
  struct device *dev;
  #line 332 
  unsigned int i;
  #line 330 
  struct ice_pf *pf = vsi->back;
  #line 334 
  dev = & (pf->pdev)->dev;
  #line 335 
  i = 0U;
  #line 335 
  while (umem->npgs > i) {
    {
      #line 336 
      dma_addr_t dma = dma_map_page_attrs(dev,*(umem->pgs + (unsigned long)i),0UL,4096UL,(enum dma_data_direction)DMA_BIDIRECTIONAL,34UL);
      #line 340 
      if (dma_mapping_error(dev,dma) != 0) {
        {
          #line 341 
          bool branch;
          #line 341 
          struct _ddebug __UNIQUE_ID_ddebug548 = {.modname = (char *)"ice", .function = (char *)"ice_xsk_umem_dma_map", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_xsk.c", .format = (char *)"XSK UMEM DMA mapping error on page num %d", .lineno = (unsigned int)341U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
          #line 341 
          branch = arch_static_branch(& __UNIQUE_ID_ddebug548.key.dd_key_false.key,(_Bool)0);
          #line 341 
          if ((long)((long)((int)branch != 0)) != 0L) 
                                                      #line 341 
                                                      __dynamic_dev_dbg(& __UNIQUE_ID_ddebug548,dev,(char *)"XSK UMEM DMA mapping error on page num %d",i);
        }
        #line 343 
        goto out_unmap;
      }
      #line 346 
      (umem->pages + (unsigned long)i)->dma = dma;
    }
    #line 335 
    i ++;
  }
  #line 349 
  return 0;
  #line 351 
  out_unmap: 
             #line 351 
  ;
  #line 352 
  while (i != 0U) {
    #line 353 
    dma_unmap_page_attrs(dev,(umem->pages + (unsigned long)i)->dma,4096UL,(enum dma_data_direction)DMA_BIDIRECTIONAL,34UL);
    #line 355 
    (umem->pages + (unsigned long)i)->dma = 0ULL;
    #line 352 
    i --;
  }
  #line 358 
  return -14;
}

#line 366  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_xsk.c"
static void ice_xsk_umem_dma_unmap(struct ice_vsi *vsi, struct xdp_umem *umem)
{
  #line 369 
  struct device *dev;
  #line 370 
  unsigned int i;
  #line 368 
  struct ice_pf *pf = vsi->back;
  #line 372 
  dev = & (pf->pdev)->dev;
  #line 373 
  i = 0U;
  #line 373 
  while (umem->npgs > i) {
    #line 374 
    dma_unmap_page_attrs(dev,(umem->pages + (unsigned long)i)->dma,4096UL,(enum dma_data_direction)DMA_BIDIRECTIONAL,34UL);
    #line 377 
    (umem->pages + (unsigned long)i)->dma = 0ULL;
    #line 373 
    i ++;
  }
  #line 379 
  return;
}

#line 388  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_xsk.c"
static int ice_xsk_umem_disable(struct ice_vsi *vsi, u16 qid)
{
  #line 390 
  if ((vsi->xsk_umems == (struct xdp_umem **)0 || (int)vsi->num_xsk_umems <= (int)qid) || *(vsi->xsk_umems + (unsigned long)qid) == (struct xdp_umem *)0) 
    #line 392 
    return -22;
  #line 394 
  ice_xsk_umem_dma_unmap(vsi,*(vsi->xsk_umems + (unsigned long)qid));
  #line 395 
  ice_xsk_remove_umem(vsi,(unsigned short)((int)qid));
  #line 397 
  return 0;
}

#line 409  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_xsk.c"
static int ice_xsk_umem_enable(struct ice_vsi *vsi, struct xdp_umem *umem, u16 qid)
{
  #line 417 
  int tmp;
  #line 417 
  unsigned short __UNIQUE_ID___x549;
  #line 411 
  struct xdp_umem_fq_reuse *reuseq;
  #line 412 
  int err;
  #line 414 
  if (vsi->type != (unsigned int)ICE_VSI_PF) 
                                             #line 415 
                                             return -22;
  {
    #line 417 
    __UNIQUE_ID___x549 = vsi->num_rxq;
    #line 417 
    unsigned short __UNIQUE_ID___y550 = vsi->num_txq;
    #line 417 
    if ((int)__UNIQUE_ID___x549 < (int)__UNIQUE_ID___y550) 
                                                           #line 417 
                                                           tmp = (int)__UNIQUE_ID___x549; else 
                                                                    #line 417 
                                                                    tmp = (int)__UNIQUE_ID___y550;
    }
  #line 417 
  vsi->num_xsk_umems = (unsigned short)tmp;
  #line 418 
  if ((int)vsi->num_xsk_umems <= (int)qid) 
                                           #line 419 
                                           return -22;
  #line 421 
  if (vsi->xsk_umems != (struct xdp_umem **)0 && *(vsi->xsk_umems + (unsigned long)qid) != (struct xdp_umem *)0) 
    #line 422 
    return -16;
  #line 424 
  reuseq = xsk_reuseq_prepare((unsigned int)(*(vsi->rx_rings))->count);
  #line 425 
  if (reuseq == (struct xdp_umem_fq_reuse *)0) 
                                               #line 426 
                                               return -12;
  #line 428 
  xsk_reuseq_free(xsk_reuseq_swap(umem,reuseq));
  #line 430 
  err = ice_xsk_umem_dma_map(vsi,umem);
  #line 431 
  if (err != 0) 
                #line 432 
                return err;
  #line 434 
  err = ice_xsk_add_umem(vsi,umem,(unsigned short)((int)qid));
  #line 435 
  if (err != 0) 
                #line 436 
                return err;
  #line 438 
  return 0;
}

#line 449  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_xsk.c"
int ice_xsk_umem_setup(struct ice_vsi *vsi, struct xdp_umem *umem, u16 qid)
{
  #line 451 
  bool if_running;
  #line 454 
  int tmp_1;
  #line 451 
  bool umem_present = (_Bool)(umem != (struct xdp_umem *)0);
  #line 452 
  int ret = 0;
  #line 452 
  int umem_failure = 0;
  #line 454 
  if ((int)netif_running(vsi->netdev) != 0) {
    #line 454 
    if ((int)ice_is_xdp_ena_vsi(vsi) != 0) 
                                           #line 454 
                                           tmp_1 = 1; else 
                                                           #line 454 
                                                           tmp_1 = 0;
  }
  else 
       #line 454 
       tmp_1 = 0;
  #line 454 
  if_running = (_Bool)(tmp_1 != 0);
  #line 456 
  if ((int)if_running != 0) {
    #line 457 
    ret = ice_qp_dis(vsi,(unsigned short)((int)qid));
    #line 458 
    if (ret != 0) {
      #line 459 
      netdev_err(vsi->netdev,(char *)"ice_qp_dis error = %d",ret);
      #line 460 
      goto xsk_umem_if_up;
    }
  }
  #line 464 
  if ((int)umem_present != 0) 
                              #line 464 
                              umem_failure = ice_xsk_umem_enable(vsi,umem,(unsigned short)((int)qid)); else 
                                                                    #line 464 
                                                                    umem_failure = ice_xsk_umem_disable(vsi,(unsigned short)((int)qid));
  #line 467 
  xsk_umem_if_up: 
                  #line 467 
  ;
  #line 468 
  if ((int)if_running != 0) {
    #line 469 
    ret = ice_qp_ena(vsi,(unsigned short)((int)qid));
    #line 470 
    if (ret == 0 && (int)umem_present != 0) 
                                            #line 471 
                                            napi_schedule(& ((*(vsi->xdp_rings + (unsigned long)qid))->q_vector)->napi);
    else 
      #line 472 
      if (ret != 0) 
                    #line 473 
                    netdev_err(vsi->netdev,(char *)"ice_qp_ena error = %d",ret);
  }
  #line 476 
  if (umem_failure != 0) {
    #line 477 
    char *tmp_4;
    #line 477 
    ;
    #line 477 
    if ((int)umem_present != 0) 
                                #line 477 
                                tmp_4 = (char *)"en"; else 
                                                           #line 477 
                                                           tmp_4 = (char *)"dis";
    #line 477 
    ;
    #line 477 
    netdev_err(vsi->netdev,(char *)"Could not %sable UMEM, error = %d",tmp_4,umem_failure);
    #line 479 
    return umem_failure;
  }
  #line 482 
  return ret;
}

#line 490  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_xsk.c"
void ice_zca_free(struct zero_copy_allocator *zca, unsigned long handle)
{
  #line 498 
  void *__mptr;
  #line 492 
  struct ice_rx_buf *rx_buf;
  #line 493 
  struct ice_ring *rx_ring;
  #line 494 
  struct xdp_umem *umem;
  #line 495 
  u64 hr;
  #line 495 
  u64 mask;
  #line 496 
  u16 nta;
  #line 498 
  __mptr = (void *)zca;
  #line 498 
  rx_ring = ((struct ice_ring *)(__mptr + 18446744073709551456U));
  #line 499 
  umem = rx_ring->xsk_umem;
  #line 500 
  hr = (unsigned long long)(umem->headroom + 256U);
  #line 502 
  mask = umem->chunk_mask;
  #line 504 
  nta = rx_ring->next_to_alloc;
  #line 505 
  rx_buf = rx_ring->__anonCompField_ice_ring_196.rx_buf + (unsigned long)nta;
  #line 507 
  nta = (u16)((int)nta + 1);
  #line 508 
  if ((int)rx_ring->count > (int)nta) 
                                      #line 508 
                                      rx_ring->next_to_alloc = nta; else 
                                                                    #line 508 
                                                                    rx_ring->next_to_alloc = (unsigned short)0U;
  #line 510 
  handle = (unsigned long)((unsigned long long)handle & mask);
  #line 512 
  rx_buf->dma = xdp_umem_get_dma(umem,(unsigned long long)handle);
  #line 513 
  rx_buf->dma += hr;
  #line 515 
  rx_buf->__anonCompField_ice_rx_buf_195.__anonCompField___anonunion_1006_194.addr = (void *)xdp_umem_get_data(umem,(unsigned long long)handle);
  #line 516 
  rx_buf->__anonCompField_ice_rx_buf_195.__anonCompField___anonunion_1006_194.addr += hr;
  #line 518 
  rx_buf->__anonCompField_ice_rx_buf_195.__anonCompField___anonunion_1006_194.handle = (unsigned long long)umem->headroom + (unsigned long long)handle;
  #line 519 
  return;
}

#line 532  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_xsk.c"
__inline static bool ice_alloc_buf_fast_zc(struct ice_ring *rx_ring, struct ice_rx_buf *rx_buf)
{
  #line 536 
  u64 handle;
  #line 536 
  u64 hr;
  #line 534 
  struct xdp_umem *umem = rx_ring->xsk_umem;
  #line 535 
  void *addr = rx_buf->__anonCompField_ice_rx_buf_195.__anonCompField___anonunion_1006_194.addr;
  #line 538 
  if (addr != (void *)0) {
    #line 539 
    (rx_ring->__anonCompField_ice_ring_197.rx_stats.page_reuse_count) ++;
    #line 540 
    return (_Bool)1;
  }
  #line 543 
  if (xsk_umem_peek_addr(umem,& handle) == (u64 *)0ULL) {
    #line 544 
    (rx_ring->__anonCompField_ice_ring_197.rx_stats.alloc_page_failed) ++;
    #line 545 
    return (_Bool)0;
  }
  #line 548 
  hr = (unsigned long long)(umem->headroom + 256U);
  #line 550 
  rx_buf->dma = xdp_umem_get_dma(umem,handle);
  #line 551 
  rx_buf->dma += hr;
  #line 553 
  rx_buf->__anonCompField_ice_rx_buf_195.__anonCompField___anonunion_1006_194.addr = (void *)xdp_umem_get_data(umem,handle);
  #line 554 
  rx_buf->__anonCompField_ice_rx_buf_195.__anonCompField___anonunion_1006_194.addr += hr;
  #line 556 
  rx_buf->__anonCompField_ice_rx_buf_195.__anonCompField___anonunion_1006_194.handle = (unsigned long long)umem->headroom + handle;
  #line 558 
  xsk_umem_discard_addr(umem);
  #line 559 
  return (_Bool)1;
}

#line 573  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_xsk.c"
__inline static bool ice_alloc_buf_slow_zc(struct ice_ring *rx_ring, struct ice_rx_buf *rx_buf)
{
  #line 576 
  u64 handle;
  #line 576 
  u64 headroom;
  #line 575 
  struct xdp_umem *umem = rx_ring->xsk_umem;
  #line 578 
  if (xsk_umem_peek_addr_rq(umem,& handle) == (u64 *)0ULL) {
    #line 579 
    (rx_ring->__anonCompField_ice_ring_197.rx_stats.alloc_page_failed) ++;
    #line 580 
    return (_Bool)0;
  }
  #line 583 
  handle = umem->chunk_mask & handle;
  #line 584 
  headroom = (unsigned long long)(umem->headroom + 256U);
  #line 586 
  rx_buf->dma = xdp_umem_get_dma(umem,handle);
  #line 587 
  rx_buf->dma += headroom;
  #line 589 
  rx_buf->__anonCompField_ice_rx_buf_195.__anonCompField___anonunion_1006_194.addr = (void *)xdp_umem_get_data(umem,handle);
  #line 590 
  rx_buf->__anonCompField_ice_rx_buf_195.__anonCompField___anonunion_1006_194.addr += headroom;
  #line 592 
  rx_buf->__anonCompField_ice_rx_buf_195.__anonCompField___anonunion_1006_194.handle = (unsigned long long)umem->headroom + handle;
  #line 594 
  xsk_umem_discard_addr_rq(umem);
  #line 595 
  return (_Bool)1;
}

#line 610  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_xsk.c"
static bool ice_alloc_rx_bufs_zc(struct ice_ring *rx_ring, int count, bool (*alloc)(struct ice_ring *, struct ice_rx_buf *))
{
  #line 613 
  union ice_32b_rx_flex_desc *rx_desc;
  #line 615 
  struct ice_rx_buf *rx_buf;
  #line 614 
  u16 ntu = rx_ring->next_to_use;
  #line 616 
  bool ret = (_Bool)0;
  #line 618 
  if (count == 0) 
                  #line 619 
                  return (_Bool)0;
  #line 621 
  rx_desc = (union ice_32b_rx_flex_desc *)rx_ring->desc + (unsigned long)ntu;
  #line 622 
  rx_buf = rx_ring->__anonCompField_ice_ring_196.rx_buf + (unsigned long)ntu;
  #line 624 
  while (1) {
    {
      #line 625 
      if (! (*alloc)(rx_ring,rx_buf)) {
        #line 626 
        ret = (_Bool)1;
        #line 627 
        break;
      }
      #line 630 
      dma_sync_single_range_for_device(rx_ring->dev,rx_buf->dma,0UL,(unsigned long)rx_ring->rx_buf_len,(enum dma_data_direction)DMA_BIDIRECTIONAL);
      #line 634 
      rx_desc->read.pkt_addr = rx_buf->dma;
      #line 635 
      rx_desc->wb.status_error0 = (unsigned short)0U;
      #line 637 
      rx_desc ++;
      #line 638 
      rx_buf ++;
      #line 639 
      ntu = (u16)((int)ntu + 1);
      #line 641 
      if ((long)((int)rx_ring->count == (int)ntu) != 0L) {
        #line 642 
        rx_desc = (union ice_32b_rx_flex_desc *)rx_ring->desc;
        #line 643 
        rx_buf = rx_ring->__anonCompField_ice_ring_196.rx_buf;
        #line 644 
        ntu = (unsigned short)0U;
      }
    }
    #line 646 
    count --;
    #line 646 
    if (! (count != 0)) 
                        #line 624 
                        break;
  }
  #line 648 
  if ((int)rx_ring->next_to_use != (int)ntu) 
                                             #line 649 
                                             ice_release_rx_desc(rx_ring,(unsigned int)ntu);
  #line 651 
  return ret;
}

#line 661  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_xsk.c"
static bool ice_alloc_rx_bufs_fast_zc(struct ice_ring *rx_ring, u16 count)
{
  #line 663 
  return ice_alloc_rx_bufs_zc(rx_ring,(int)count,& ice_alloc_buf_fast_zc);
}

#line 674  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_xsk.c"
bool ice_alloc_rx_bufs_slow_zc(struct ice_ring *rx_ring, u16 count)
{
  #line 676 
  return ice_alloc_rx_bufs_zc(rx_ring,(int)count,& ice_alloc_buf_slow_zc);
}

#line 684  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_xsk.c"
static void ice_bump_ntc(struct ice_ring *rx_ring)
{
  #line 686 
  int ntc = (int)rx_ring->next_to_clean + 1;
  #line 688 
  if ((int)rx_ring->count > ntc) 
                                 #line 688 
                                 ntc = ntc; else 
                                                 #line 688 
                                                 ntc = 0;
  #line 689 
  rx_ring->next_to_clean = (unsigned short)ntc;
  #line 690 
  __builtin_prefetch((void const *)((void *)((union ice_32b_rx_flex_desc *)rx_ring->desc + (unsigned long)ntc)));
  #line 691 
  return;
}

#line 703  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_xsk.c"
static struct ice_rx_buf *ice_get_rx_buf_zc(struct ice_ring *rx_ring, int size)
{
  #line 705 
  struct ice_rx_buf *rx_buf;
  #line 707 
  rx_buf = rx_ring->__anonCompField_ice_ring_196.rx_buf + (unsigned long)rx_ring->next_to_clean;
  #line 709 
  dma_sync_single_range_for_cpu(rx_ring->dev,rx_buf->dma,0UL,(unsigned long)size,(enum dma_data_direction)DMA_BIDIRECTIONAL);
  #line 712 
  return rx_buf;
}

#line 724  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_xsk.c"
static void ice_reuse_rx_buf_zc(struct ice_ring *rx_ring, struct ice_rx_buf *old_buf)
{
  #line 729 
  struct ice_rx_buf *new_buf;
  #line 731 
  u16 tmp;
  #line 726 
  unsigned long mask = (unsigned long)(rx_ring->xsk_umem)->chunk_mask;
  #line 727 
  u64 hr = (unsigned long long)((rx_ring->xsk_umem)->headroom + 256U);
  #line 728 
  u16 nta = rx_ring->next_to_alloc;
  #line 731 
  tmp = nta;
  #line 731 
  nta = (u16)((int)nta + 1);
  #line 731 
  new_buf = rx_ring->__anonCompField_ice_ring_196.rx_buf + (unsigned long)tmp;
  #line 732 
  if ((int)rx_ring->count > (int)nta) 
                                      #line 732 
                                      rx_ring->next_to_alloc = nta; else 
                                                                    #line 732 
                                                                    rx_ring->next_to_alloc = (unsigned short)0U;
  #line 734 
  new_buf->dma = old_buf->dma & (unsigned long long)mask;
  #line 735 
  new_buf->dma += hr;
  #line 737 
  new_buf->__anonCompField_ice_rx_buf_195.__anonCompField___anonunion_1006_194.addr = (void *)((unsigned long)old_buf->__anonCompField_ice_rx_buf_195.__anonCompField___anonunion_1006_194.addr & mask);
  #line 738 
  new_buf->__anonCompField_ice_rx_buf_195.__anonCompField___anonunion_1006_194.addr += hr;
  #line 740 
  new_buf->__anonCompField_ice_rx_buf_195.__anonCompField___anonunion_1006_194.handle = old_buf->__anonCompField_ice_rx_buf_195.__anonCompField___anonunion_1006_194.handle & (unsigned long long)mask;
  #line 741 
  new_buf->__anonCompField_ice_rx_buf_195.__anonCompField___anonunion_1006_194.handle += (unsigned long long)(rx_ring->xsk_umem)->headroom;
  #line 743 
  old_buf->__anonCompField_ice_rx_buf_195.__anonCompField___anonunion_1006_194.addr = (void *)0;
  #line 744 
  return;
}

#line 757  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_xsk.c"
static struct sk_buff *ice_construct_skb_zc(struct ice_ring *rx_ring, struct ice_rx_buf *rx_buf, struct xdp_buff *xdp)
{
  #line 764 
  struct sk_buff *skb;
  #line 760 
  unsigned int metasize = (unsigned int)(xdp->data - xdp->data_meta);
  #line 761 
  unsigned int datasize = (unsigned int)(xdp->data_end - xdp->data);
  #line 762 
  unsigned int datasize_hard = (unsigned int)(xdp->data_end - xdp->data_hard_start);
  #line 766 
  skb = __napi_alloc_skb(& (rx_ring->q_vector)->napi,datasize_hard,10784U);
  #line 768 
  if ((long)(skb == (struct sk_buff *)0) != 0L) 
                                                #line 769 
                                                return (struct sk_buff *)0;
  #line 771 
  skb_reserve(skb,(int)(xdp->data - xdp->data_hard_start));
  #line 772 
  ;
  #line 772 
  ;
  #line 772 
  memcpy(__skb_put(skb,datasize),xdp->data,(unsigned long)datasize);
  #line 773 
  if (metasize != 0U) 
                      #line 774 
                      skb_metadata_set(skb,(unsigned char)((int)((unsigned char)metasize)));
  #line 776 
  ice_reuse_rx_buf_zc(rx_ring,rx_buf);
  #line 778 
  return skb;
}

#line 789  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_xsk.c"
static int ice_run_xdp_zc(struct ice_ring *rx_ring, struct xdp_buff *xdp)
{
  #line 798 
  union __anonunion___u_7224 __u;
  #line 791 
  int err;
  #line 792 
  struct bpf_prog *xdp_prog;
  #line 793 
  struct ice_ring *xdp_ring;
  #line 794 
  u32 act;
  #line 791 
  int result = 0;
  #line 796 
  rcu_read_lock();
  #line 797 
  __read_once_size((void *)(& rx_ring->xdp_prog),(void *)(& __u.__c),8);
  #line 797 
  xdp_prog = (__u.__val);
  #line 798 
  if (xdp_prog == (struct bpf_prog *)0) {
    #line 799 
    rcu_read_unlock();
    #line 800 
    return 0;
  }
  #line 803 
  act = bpf_prog_run_xdp(xdp_prog,xdp);
  #line 804 
  xdp->handle += (unsigned long)(xdp->data - xdp->data_hard_start);
  #line 805 
  switch (act) {
    #line 806 
    case (u32)2: 
                 #line 806 
    ;
    #line 807 
    break;
    #line 808 
    case (u32)3: 
                 #line 808 
    ;
    #line 809 
    xdp_ring = *((rx_ring->vsi)->xdp_rings + (unsigned long)rx_ring->q_index);
    #line 810 
    result = ice_xmit_xdp_buff(xdp,xdp_ring);
    #line 811 
    break;
    #line 812 
    case (u32)4: 
                 #line 812 
    ;
    #line 813 
    err = xdp_do_redirect(rx_ring->netdev,xdp,xdp_prog);
    #line 814 
    if (err == 0) 
                  #line 814 
                  result = 4; else 
                                   #line 814 
                                   result = 1;
    #line 815 
    break;
    #line 816 
    default: 
             #line 816 
    ;
    #line 817 
    bpf_warn_invalid_xdp_action(act);
    #line 819 
    case (u32)0: 
                 #line 819 
    ;
    #line 820 
    trace_xdp_exception_0(rx_ring->netdev,xdp_prog,act);
    #line 822 
    case (u32)1: 
                 #line 822 
    ;
    #line 823 
    result = 1;
    #line 824 
    break;
  }
  #line 827 
  rcu_read_unlock();
  #line 828 
  return result;
}

#line 838  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_xsk.c"
int ice_clean_rx_irq_zc(struct ice_ring *rx_ring, int budget)
{
  #line 841 
  unsigned int tmp;
  #line 843 
  struct xdp_buff xdp;
  #line 939 
  int tmp_5;
  #line 840 
  unsigned int total_rx_bytes = 0U;
  #line 840 
  unsigned int total_rx_packets = 0U;
  #line 841 
  if ((int)rx_ring->next_to_clean <= (int)rx_ring->next_to_use) 
                                                                #line 841 
                                                                tmp = (unsigned int)rx_ring->count; else 
                                                                    #line 841 
                                                                    tmp = 0U;
  #line 841 
  u16 cleaned_count = (unsigned short)(((tmp + (unsigned int)rx_ring->next_to_clean) - (unsigned int)rx_ring->next_to_use) + 65535U);
  #line 842 
  unsigned int xdp_xmit = 0U;
  #line 844 
  bool failure = (_Bool)0;
  #line 846 
  xdp.rxq = & rx_ring->xdp_rxq;
  #line 848 
  while ((long)(total_rx_packets < (unsigned int)budget) != 0L) {
    #line 849 
    union ice_32b_rx_flex_desc *rx_desc;
    #line 850 
    unsigned int size;
    #line 851 
    struct ice_rx_buf *rx_buf;
    #line 852 
    struct sk_buff *skb;
    #line 853 
    u16 stat_err_bits;
    #line 855 
    u8 rx_ptype;
    #line 850 
    unsigned int xdp_res = 0U;
    #line 854 
    u16 vlan_tag = (unsigned short)0U;
    #line 857 
    if ((unsigned int)cleaned_count > 15U) {
      #line 859 
      failure = (_Bool)(((int)ice_alloc_rx_bufs_fast_zc(rx_ring,
                                  (unsigned short)((int)cleaned_count)) | (int)failure) != 0);
      #line 860 
      cleaned_count = (unsigned short)0U;
    }
    #line 863 
    rx_desc = (union ice_32b_rx_flex_desc *)rx_ring->desc + (unsigned long)rx_ring->next_to_clean;
    #line 865 
    stat_err_bits = (unsigned short)1U;
    #line 866 
    if (! ice_test_staterr(rx_desc,(unsigned short)((int)stat_err_bits))) 
      #line 867 
      break;
    #line 868 
    ldv_inline_asm();
    #line 875 
    size = (unsigned int)rx_desc->wb.pkt_len & 16383U;
    #line 877 
    if (size == 0U) 
                    #line 878 
                    break;
    #line 880 
    rx_buf = ice_get_rx_buf_zc(rx_ring,(int)size);
    #line 881 
    if (rx_buf->__anonCompField_ice_rx_buf_195.__anonCompField___anonunion_1006_194.addr == (void *)0) 
      #line 882 
      break;
    #line 884 
    xdp.data = rx_buf->__anonCompField_ice_rx_buf_195.__anonCompField___anonunion_1006_194.addr;
    #line 885 
    xdp.data_meta = xdp.data;
    #line 886 
    xdp.data_hard_start = xdp.data + 18446744073709551360U;
    #line 887 
    xdp.data_end = xdp.data + (unsigned long)size;
    #line 888 
    xdp.handle = (unsigned long)rx_buf->__anonCompField_ice_rx_buf_195.__anonCompField___anonunion_1006_194.handle;
    #line 890 
    xdp_res = (unsigned int)ice_run_xdp_zc(rx_ring,& xdp);
    #line 891 
    if (xdp_res != 0U) {
      #line 892 
      if (((unsigned long)xdp_res & 6UL) != 0UL) {
        #line 893 
        xdp_xmit |= xdp_res;
        #line 894 
        rx_buf->__anonCompField_ice_rx_buf_195.__anonCompField___anonunion_1006_194.addr = (void *)0;
      }
      else 
           #line 896 
           ice_reuse_rx_buf_zc(rx_ring,rx_buf);
      #line 899 
      total_rx_bytes += size;
      #line 900 
      total_rx_packets ++;
      #line 901 
      cleaned_count = (u16)((int)cleaned_count + 1);
      #line 903 
      ice_bump_ntc(rx_ring);
      #line 904 
      continue;
    }
    #line 908 
    skb = ice_construct_skb_zc(rx_ring,rx_buf,& xdp);
    #line 909 
    if (skb == (struct sk_buff *)0) {
      #line 910 
      (rx_ring->__anonCompField_ice_ring_197.rx_stats.alloc_buf_failed) ++;
      #line 911 
      break;
    }
    #line 914 
    cleaned_count = (u16)((int)cleaned_count + 1);
    #line 915 
    ice_bump_ntc(rx_ring);
    #line 917 
    if (eth_skb_pad(skb) != 0) {
      #line 918 
      skb = (struct sk_buff *)0;
      #line 919 
      continue;
    }
    #line 922 
    total_rx_bytes = skb->len + total_rx_bytes;
    #line 923 
    total_rx_packets ++;
    #line 925 
    stat_err_bits = (unsigned short)8192U;
    #line 926 
    if ((int)ice_test_staterr(rx_desc,(unsigned short)((int)stat_err_bits)) != 0) 
      #line 927 
      vlan_tag = rx_desc->wb.l2tag1;
    #line 929 
    rx_ptype = (unsigned char)rx_desc->wb.ptype_flex_flags0;
    #line 932 
    ice_process_skb_fields(rx_ring,rx_desc,skb,(unsigned char)((int)rx_ptype));
    #line 933 
    ice_receive_skb(rx_ring,skb,(unsigned short)((int)vlan_tag));
  }
  #line 936 
  ice_finalize_xdp_rx(rx_ring,xdp_xmit);
  #line 937 
  ice_update_rx_ring_stats(rx_ring,(unsigned long long)total_rx_packets,(unsigned long long)total_rx_bytes);
  #line 939 
  if ((int)failure != 0) 
                         #line 939 
                         tmp_5 = budget; else 
                                              #line 939 
                                              tmp_5 = (int)total_rx_packets;
  #line 939 
  return tmp_5;
}

#line 949  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_xsk.c"
static bool ice_xmit_zc(struct ice_ring *xdp_ring, int budget)
{
  #line 953 
  struct xdp_desc desc;
  #line 954 
  dma_addr_t dma;
  #line 951 
  struct ice_tx_desc *tx_desc = (struct ice_tx_desc *)0;
  #line 952 
  bool work_done = (_Bool)1;
  #line 956 
  while (1) {
    #line 956 
    int tmp_1;
    #line 956 
    tmp_1 = budget;
    #line 956 
    budget --;
    #line 956 
    ;
    #line 956 
    if (! ((long)(tmp_1 > 0) != 0L)) 
                                     #line 956 
                                     break;
    {
      #line 957 
      struct ice_tx_buf *tx_buf;
      #line 959 
      int tmp;
      #line 959 
      if ((int)xdp_ring->next_to_clean <= (int)xdp_ring->next_to_use) 
        #line 959 
        tmp = (int)xdp_ring->count; else 
                                         #line 959 
                                         tmp = 0;
      #line 959 
      ;
      #line 959 
      if ((long)((tmp + (int)xdp_ring->next_to_clean) - (int)xdp_ring->next_to_use == 1) != 0L) {
        #line 960 
        (xdp_ring->__anonCompField_ice_ring_197.tx_stats.tx_busy) ++;
        #line 961 
        work_done = (_Bool)0;
        #line 962 
        break;
      }
      #line 965 
      tx_buf = xdp_ring->__anonCompField_ice_ring_196.tx_buf + (unsigned long)xdp_ring->next_to_use;
      #line 967 
      if (! xsk_umem_consume_tx(xdp_ring->xsk_umem,& desc)) 
                                                            #line 968 
                                                            break;
      #line 970 
      dma = xdp_umem_get_dma(xdp_ring->xsk_umem,desc.addr);
      #line 972 
      dma_sync_single_for_device(xdp_ring->dev,dma,(unsigned long)desc.len,(enum dma_data_direction)DMA_BIDIRECTIONAL);
      #line 975 
      tx_buf->bytecount = desc.len;
      #line 977 
      tx_desc = (struct ice_tx_desc *)xdp_ring->desc + (unsigned long)xdp_ring->next_to_use;
      #line 978 
      tx_desc->buf_addr = dma;
      #line 979 
      tx_desc->cmd_type_offset_bsz = build_ctob(3ULL,0ULL,desc.len,0ULL);
      #line 982 
      xdp_ring->next_to_use = (u16)((int)xdp_ring->next_to_use + 1);
      #line 983 
      if ((int)xdp_ring->next_to_use == (int)xdp_ring->count) 
                                                              #line 984 
                                                              xdp_ring->next_to_use = (unsigned short)0U;
    }
  }
  #line 987 
  if (tx_desc != (struct ice_tx_desc *)0) {
    #line 988 
    ice_xdp_ring_update_tail(xdp_ring);
    #line 989 
    xsk_umem_consume_tx_done(xdp_ring->xsk_umem);
  }
  #line 992 
  return (_Bool)((budget > 0 && (int)work_done != 0) != 0);
}

#line 1001  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_xsk.c"
static void ice_clean_xdp_tx_buf(struct ice_ring *xdp_ring, struct ice_tx_buf *tx_buf)
{
  #line 1003 
  xdp_return_frame((struct xdp_frame *)tx_buf->__anonCompField_ice_tx_buf_192.raw_buf);
  #line 1004 
  dma_unmap_single_attrs(xdp_ring->dev,tx_buf->dma,(unsigned long)tx_buf->len,(enum dma_data_direction)DMA_TO_DEVICE,0UL);
  #line 1006 
  tx_buf->len = 0U;
  #line 1007 
  return;
}

#line 1016  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_xsk.c"
bool ice_clean_tx_irq_zc(struct ice_ring *xdp_ring, int budget)
{
  #line 1020 
  struct ice_tx_desc *tx_desc;
  #line 1021 
  struct ice_tx_buf *tx_buf;
  #line 1018 
  int total_packets = 0;
  #line 1018 
  int total_bytes = 0;
  #line 1019 
  s16 ntc = (short)xdp_ring->next_to_clean;
  #line 1022 
  bool xmit_done = (_Bool)1;
  #line 1023 
  u32 xsk_frames = 0U;
  #line 1025 
  tx_desc = (struct ice_tx_desc *)xdp_ring->desc + (unsigned long)ntc;
  #line 1026 
  tx_buf = xdp_ring->__anonCompField_ice_ring_196.tx_buf + (unsigned long)ntc;
  #line 1027 
  ntc = (short)((int)ntc - (int)xdp_ring->count);
  #line 1029 
  while (1) {
    #line 1030 
    if ((tx_desc->cmd_type_offset_bsz & 15ULL) == 0ULL) 
                                                        #line 1032 
                                                        break;
    #line 1034 
    total_bytes = (int)(tx_buf->bytecount + (unsigned int)total_bytes);
    #line 1035 
    total_packets ++;
    #line 1037 
    if (tx_buf->__anonCompField_ice_tx_buf_192.raw_buf != (void *)0) {
      #line 1038 
      ice_clean_xdp_tx_buf(xdp_ring,tx_buf);
      #line 1039 
      tx_buf->__anonCompField_ice_tx_buf_192.raw_buf = (void *)0;
    }
    else 
         #line 1041 
         xsk_frames ++;
    #line 1044 
    tx_desc->cmd_type_offset_bsz = 0ULL;
    #line 1045 
    tx_buf ++;
    #line 1046 
    tx_desc ++;
    #line 1047 
    ntc = (s16)((int)ntc + 1);
    #line 1049 
    if ((long)((int)ntc == 0) != 0L) {
      #line 1050 
      ntc = (short)((int)ntc - (int)xdp_ring->count);
      #line 1051 
      tx_buf = xdp_ring->__anonCompField_ice_ring_196.tx_buf;
      #line 1052 
      tx_desc = (struct ice_tx_desc *)xdp_ring->desc;
    }
    #line 1055 
    __builtin_prefetch((void const *)((void *)tx_desc));
    #line 1057 
    budget --;
    #line 1056 
    if (! ((long)(budget != 0) != 0L)) 
                                       #line 1029 
                                       break;
  }
  #line 1059 
  ntc = (short)((int)xdp_ring->count + (int)ntc);
  #line 1060 
  xdp_ring->next_to_clean = (unsigned short)ntc;
  #line 1062 
  if (xsk_frames != 0U) 
                        #line 1063 
                        xsk_umem_complete_tx(xdp_ring->xsk_umem,xsk_frames);
  #line 1065 
  ice_update_tx_ring_stats(xdp_ring,(unsigned long long)total_packets,(unsigned long long)total_bytes);
  #line 1066 
  xmit_done = ice_xmit_zc(xdp_ring,256);
  #line 1068 
  return (_Bool)((budget > 0 && (int)xmit_done != 0) != 0);
}

#line 1080  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_xsk.c"
int ice_xsk_wakeup(struct net_device *netdev, u32 queue_id, u32 flags)
{
  #line 1084 
  struct ice_q_vector *q_vector;
  #line 1086 
  struct ice_ring *ring;
  #line 1083 
  struct ice_netdev_priv *np = netdev_priv(netdev);
  #line 1085 
  struct ice_vsi *vsi = np->vsi;
  #line 1088 
  if ((int)test_bit(1L,(unsigned long *)(& vsi->state)) != 0) 
                                                              #line 1089 
                                                              return -100;
  #line 1091 
  if (! ice_is_xdp_ena_vsi(vsi)) 
                                 #line 1092 
                                 return -6;
  #line 1094 
  if ((unsigned int)vsi->num_txq <= queue_id) 
                                              #line 1095 
                                              return -6;
  #line 1097 
  if ((*(vsi->xdp_rings + (unsigned long)queue_id))->xsk_umem == (struct xdp_umem *)0) 
    #line 1098 
    return -6;
  #line 1100 
  ring = *(vsi->xdp_rings + (unsigned long)queue_id);
  #line 1108 
  q_vector = ring->q_vector;
  #line 1109 
  if (! napi_if_scheduled_mark_missed(& q_vector->napi)) 
                                                         #line 1110 
                                                         ice_trigger_sw_intr(& (vsi->back)->hw,q_vector);
  #line 1112 
  return 0;
}

#line 1121  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_xsk.c"
bool ice_xsk_any_rx_ring_ena(struct ice_vsi *vsi)
{
  #line 1123 
  int i;
  #line 1125 
  if (vsi->xsk_umems == (struct xdp_umem **)0) 
                                               #line 1126 
                                               return (_Bool)0;
  #line 1128 
  i = 0;
  #line 1128 
  while ((int)vsi->num_xsk_umems > i) {
    #line 1129 
    if (*(vsi->xsk_umems + (unsigned long)i) != (struct xdp_umem *)0) 
      #line 1130 
      return (_Bool)1;
    #line 1128 
    i ++;
  }
  #line 1133 
  return (_Bool)0;
}

#line 1140  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_xsk.c"
void ice_xsk_clean_rx_ring(struct ice_ring *rx_ring)
{
  #line 1142 
  u16 i;
  #line 1144 
  i = (unsigned short)0U;
  #line 1144 
  while ((int)rx_ring->count > (int)i) {
    {
      #line 1145 
      struct ice_rx_buf *rx_buf = rx_ring->__anonCompField_ice_ring_196.rx_buf + (unsigned long)i;
      #line 1147 
      if (rx_buf->__anonCompField_ice_rx_buf_195.__anonCompField___anonunion_1006_194.addr == (void *)0) 
        #line 1148 
        goto __Cont;
      #line 1150 
      xsk_umem_fq_reuse(rx_ring->xsk_umem,rx_buf->__anonCompField_ice_rx_buf_195.__anonCompField___anonunion_1006_194.handle);
      #line 1151 
      rx_buf->__anonCompField_ice_rx_buf_195.__anonCompField___anonunion_1006_194.addr = (void *)0;
    }
    #line 1144 
    __Cont: 
            #line 1144 
    i = (u16)((int)i + 1);
  }
  #line 1153 
  return;
}

#line 1159  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_xsk.c"
void ice_xsk_clean_xdp_ring(struct ice_ring *xdp_ring)
{
  #line 1161 
  u16 ntc = xdp_ring->next_to_clean;
  #line 1161 
  u16 ntu = xdp_ring->next_to_use;
  #line 1162 
  u32 xsk_frames = 0U;
  #line 1164 
  while ((int)ntc != (int)ntu) {
    #line 1165 
    struct ice_tx_buf *tx_buf = xdp_ring->__anonCompField_ice_ring_196.tx_buf + (unsigned long)ntc;
    #line 1167 
    if (tx_buf->__anonCompField_ice_tx_buf_192.raw_buf != (void *)0) 
      #line 1168 
      ice_clean_xdp_tx_buf(xdp_ring,tx_buf); else 
                                                  #line 1170 
                                                  xsk_frames ++;
    #line 1172 
    tx_buf->__anonCompField_ice_tx_buf_192.raw_buf = (void *)0;
    #line 1174 
    ntc = (u16)((int)ntc + 1);
    #line 1175 
    if ((int)xdp_ring->count <= (int)ntc) 
                                          #line 1176 
                                          ntc = (unsigned short)0U;
  }
  #line 1179 
  if (xsk_frames != 0U) 
                        #line 1180 
                        xsk_umem_complete_tx(xdp_ring->xsk_umem,xsk_frames);
  #line 1181 
  return;
}

#line 119  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ice/ice.ko/concurrency safety/0/concurrency safety/weaver/ice_xsk.i.aux"
static void cif_set_bit_3(long nr, unsigned long *addr)
{
  #line 122 
  ldv_set_bit(nr,addr);
  #line 123 
  return;
}

#line 126  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ice/ice.ko/concurrency safety/0/concurrency safety/weaver/ice_xsk.i.aux"
static void cif_clear_bit_3(long nr, unsigned long *addr)
{
  #line 129 
  ldv_clear_bit(nr,addr);
  #line 130 
  return;
}

#line 343  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ice/ice.ko/concurrency safety/0/concurrency safety/weaver/ice_xsk.i.aux"
static void *kcalloc(size_t n, size_t size, gfp_t flags)
{
  #line 346 
  return ldv_kcalloc(n,size,flags);
}

#line 364  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ice/ice.ko/concurrency safety/0/concurrency safety/weaver/ice_xsk.i.aux"
static void *kzalloc(size_t size, gfp_t flags)
{
  #line 367 
  return ldv_kzalloc(size,flags);
}

#line 366  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/bitops.h"
__inline static int fls64(__u64 x)
{
  #line 368 
  int bitpos = -1;
  #line 369 
  ldv_inline_asm();
  #line 377 
  return bitpos + 1;
}

#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bitops/instrumented-atomic.h"
#line 119  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ice/ice.ko/concurrency safety/0/concurrency safety/weaver/ice_lib.i.aux"
static void cif_set_bit_4(long nr, unsigned long *addr);
#line 44  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bitops/instrumented-atomic.h"
#line 126  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ice/ice.ko/concurrency safety/0/concurrency safety/weaver/ice_lib.i.aux"
static void cif_clear_bit_4(long nr, unsigned long *addr);
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/log2.h"
__inline static int __ilog2_u64(u64 n)
{
  #line 32 
  return fls64(n) + -1;
}

#line 198  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/log2.h"
__inline static int __order_base_2(unsigned long n)
{
  #line 200 
  int tmp_29;
  #line 200 
  int tmp_61;
  #line 200 
  int tmp_30;
  #line 200 
  int tmp_63;
  #line 200 
  int tmp;
  #line 200 
  int tmp_31;
  #line 200 
  int tmp_32;
  #line 200 
  int tmp_0;
  #line 200 
  int tmp_1;
  #line 200 
  int tmp_33;
  #line 200 
  int tmp_34;
  #line 200 
  int tmp_2;
  #line 200 
  int tmp_3;
  #line 200 
  int tmp_35;
  #line 200 
  int tmp_36;
  #line 200 
  int tmp_4;
  #line 200 
  int tmp_5;
  #line 200 
  int tmp_37;
  #line 200 
  int tmp_38;
  #line 200 
  int tmp_6;
  #line 200 
  int tmp_7;
  #line 200 
  int tmp_39;
  #line 200 
  int tmp_40;
  #line 200 
  int tmp_8;
  #line 200 
  int tmp_9;
  #line 200 
  int tmp_41;
  #line 200 
  int tmp_42;
  #line 200 
  int tmp_10;
  #line 200 
  int tmp_11;
  #line 200 
  int tmp_43;
  #line 200 
  int tmp_44;
  #line 200 
  int tmp_12;
  #line 200 
  int tmp_13;
  #line 200 
  int tmp_45;
  #line 200 
  int tmp_46;
  #line 200 
  int tmp_14;
  #line 200 
  int tmp_15;
  #line 200 
  int tmp_47;
  #line 200 
  int tmp_48;
  #line 200 
  int tmp_16;
  #line 200 
  int tmp_17;
  #line 200 
  int tmp_49;
  #line 200 
  int tmp_50;
  #line 200 
  int tmp_18;
  #line 200 
  int tmp_19;
  #line 200 
  int tmp_51;
  #line 200 
  int tmp_52;
  #line 200 
  int tmp_20;
  #line 200 
  int tmp_21;
  #line 200 
  int tmp_53;
  #line 200 
  int tmp_54;
  #line 200 
  int tmp_22;
  #line 200 
  int tmp_23;
  #line 200 
  int tmp_55;
  #line 200 
  int tmp_56;
  #line 200 
  int tmp_24;
  #line 200 
  int tmp_25;
  #line 200 
  int tmp_57;
  #line 200 
  int tmp_58;
  #line 200 
  int tmp_26;
  #line 200 
  int tmp_27;
  #line 200 
  int tmp_59;
  #line 200 
  int tmp_60;
  #line 200 
  int tmp_28;
  #line 200 
  int tmp_64;
  #line 200 
  if (n > 1UL) {
    #line 200 
    if (0 != 0) {
      #line 200 
      if (n + 18446744073709551615UL > 1UL) {
        #line 200 
        if (((unsigned long long)(n + 18446744073709551615UL) & 9223372036854775808ULL) == 0ULL) {
          #line 200 
          if (((unsigned long long)(n + 18446744073709551615UL) & 4611686018427387904ULL) == 0ULL) {
            #line 200 
            if (((unsigned long long)(n + 18446744073709551615UL) & 2305843009213693952ULL) == 0ULL) {
              #line 200 
              if (((unsigned long long)(n + 18446744073709551615UL) & 1152921504606846976ULL) == 0ULL) {
                #line 200 
                if (((unsigned long long)(n + 18446744073709551615UL) & 576460752303423488ULL) == 0ULL) {
                  #line 200 
                  if (((unsigned long long)(n + 18446744073709551615UL) & 288230376151711744ULL) == 0ULL) {
                    #line 200 
                    if (((unsigned long long)(n + 18446744073709551615UL) & 144115188075855872ULL) == 0ULL) {
                      #line 200 
                      if (((unsigned long long)(n + 18446744073709551615UL) & 72057594037927936ULL) == 0ULL) {
                        #line 200 
                        if (((unsigned long long)(n + 18446744073709551615UL) & 36028797018963968ULL) == 0ULL) {
                          #line 200 
                          if (((unsigned long long)(n + 18446744073709551615UL) & 18014398509481984ULL) == 0ULL) {
                            #line 200 
                            if (((unsigned long long)(n + 18446744073709551615UL) & 9007199254740992ULL) == 0ULL) {
                              #line 200 
                              if (((unsigned long long)(n + 18446744073709551615UL) & 4503599627370496ULL) == 0ULL) {
                                #line 200 
                                if (((unsigned long long)(n + 18446744073709551615UL) & 2251799813685248ULL) == 0ULL) {
                                  #line 200 
                                  if (((unsigned long long)(n + 18446744073709551615UL) & 1125899906842624ULL) == 0ULL) {
                                    #line 200 
                                    if (((unsigned long long)(n + 18446744073709551615UL) & 562949953421312ULL) == 0ULL) {
                                      #line 200 
                                      if (((unsigned long long)(n + 18446744073709551615UL) & 281474976710656ULL) == 0ULL) {
                                        #line 200 
                                        if (((unsigned long long)(n + 18446744073709551615UL) & 140737488355328ULL) == 0ULL) {
                                          #line 200 
                                          if (((unsigned long long)(n + 18446744073709551615UL) & 70368744177664ULL) == 0ULL) {
                                            #line 200 
                                            if (((unsigned long long)(n + 18446744073709551615UL) & 35184372088832ULL) == 0ULL) {
                                              #line 200 
                                              if (((unsigned long long)(n + 18446744073709551615UL) & 17592186044416ULL) == 0ULL) {
                                                #line 200 
                                                if (((unsigned long long)(n + 18446744073709551615UL) & 8796093022208ULL) == 0ULL) {
                                                  #line 200 
                                                  if (((unsigned long long)(n + 18446744073709551615UL) & 4398046511104ULL) == 0ULL) {
                                                    #line 200 
                                                    if (((unsigned long long)(n + 18446744073709551615UL) & 2199023255552ULL) == 0ULL) {
                                                      #line 200 
                                                      if (((unsigned long long)(n + 18446744073709551615UL) & 1099511627776ULL) == 0ULL) {
                                                        #line 200 
                                                        if (((unsigned long long)(n + 18446744073709551615UL) & 549755813888ULL) == 0ULL) {
                                                          #line 200 
                                                          if (((unsigned long long)(n + 18446744073709551615UL) & 274877906944ULL) == 0ULL) {
                                                            #line 200 
                                                            if (((unsigned long long)(n + 18446744073709551615UL) & 137438953472ULL) == 0ULL) {
                                                              #line 200 
                                                              if (((unsigned long long)(n + 18446744073709551615UL) & 68719476736ULL) == 0ULL) {
                                                                #line 200 
                                                                if (((unsigned long long)(n + 18446744073709551615UL) & 34359738368ULL) == 0ULL) {
                                                                  #line 200 
                                                                  if (
                                                                    ((unsigned long long)(n + 18446744073709551615UL) & 17179869184ULL) == 0ULL) {
                                                                    #line 200 
                                                                    if (
                                                                    ((unsigned long long)(n + 18446744073709551615UL) & 8589934592ULL) == 0ULL) {
                                                                    #line 200 
                                                                    if (
                                                                    ((unsigned long long)(n + 18446744073709551615UL) & 4294967296ULL) == 0ULL) {
                                                                    #line 200 
                                                                    if (
                                                                    ((unsigned long long)(n + 18446744073709551615UL) & 2147483648ULL) == 0ULL) {
                                                                    #line 200 
                                                                    if (
                                                                    ((unsigned long long)(n + 18446744073709551615UL) & 1073741824ULL) == 0ULL) {
                                                                    #line 200 
                                                                    if (
                                                                    ((unsigned long long)(n + 18446744073709551615UL) & 536870912ULL) == 0ULL) {
                                                                    #line 200 
                                                                    if (
                                                                    ((unsigned long long)(n + 18446744073709551615UL) & 268435456ULL) == 0ULL) {
                                                                    #line 200 
                                                                    if (
                                                                    ((unsigned long long)(n + 18446744073709551615UL) & 134217728ULL) == 0ULL) {
                                                                    #line 200 
                                                                    if (
                                                                    ((unsigned long long)(n + 18446744073709551615UL) & 67108864ULL) == 0ULL) {
                                                                    #line 200 
                                                                    if (
                                                                    ((unsigned long long)(n + 18446744073709551615UL) & 33554432ULL) == 0ULL) {
                                                                    #line 200 
                                                                    if (
                                                                    ((unsigned long long)(n + 18446744073709551615UL) & 16777216ULL) == 0ULL) {
                                                                    #line 200 
                                                                    if (
                                                                    ((unsigned long long)(n + 18446744073709551615UL) & 8388608ULL) == 0ULL) {
                                                                    #line 200 
                                                                    if (
                                                                    ((unsigned long long)(n + 18446744073709551615UL) & 4194304ULL) == 0ULL) {
                                                                    #line 200 
                                                                    if (
                                                                    ((unsigned long long)(n + 18446744073709551615UL) & 2097152ULL) == 0ULL) {
                                                                    #line 200 
                                                                    if (
                                                                    ((unsigned long long)(n + 18446744073709551615UL) & 1048576ULL) == 0ULL) {
                                                                    #line 200 
                                                                    if (
                                                                    ((unsigned long long)(n + 18446744073709551615UL) & 524288ULL) == 0ULL) {
                                                                    #line 200 
                                                                    if (
                                                                    ((unsigned long long)(n + 18446744073709551615UL) & 262144ULL) == 0ULL) {
                                                                    #line 200 
                                                                    if (
                                                                    ((unsigned long long)(n + 18446744073709551615UL) & 131072ULL) == 0ULL) {
                                                                    #line 200 
                                                                    if (
                                                                    ((unsigned long long)(n + 18446744073709551615UL) & 65536ULL) == 0ULL) {
                                                                    #line 200 
                                                                    if (
                                                                    ((unsigned long long)(n + 18446744073709551615UL) & 32768ULL) == 0ULL) {
                                                                    #line 200 
                                                                    if (
                                                                    ((unsigned long long)(n + 18446744073709551615UL) & 16384ULL) == 0ULL) {
                                                                    #line 200 
                                                                    if (
                                                                    ((unsigned long long)(n + 18446744073709551615UL) & 8192ULL) == 0ULL) {
                                                                    #line 200 
                                                                    if (
                                                                    ((unsigned long long)(n + 18446744073709551615UL) & 4096ULL) == 0ULL) {
                                                                    #line 200 
                                                                    if (
                                                                    ((unsigned long long)(n + 18446744073709551615UL) & 2048ULL) == 0ULL) {
                                                                    #line 200 
                                                                    if (
                                                                    ((unsigned long long)(n + 18446744073709551615UL) & 1024ULL) == 0ULL) {
                                                                    #line 200 
                                                                    if (
                                                                    ((unsigned long long)(n + 18446744073709551615UL) & 512ULL) == 0ULL) {
                                                                    #line 200 
                                                                    if (
                                                                    ((unsigned long long)(n + 18446744073709551615UL) & 256ULL) == 0ULL) {
                                                                    #line 200 
                                                                    if (
                                                                    ((unsigned long long)(n + 18446744073709551615UL) & 128ULL) == 0ULL) {
                                                                    #line 200 
                                                                    if (
                                                                    ((unsigned long long)(n + 18446744073709551615UL) & 64ULL) == 0ULL) {
                                                                    #line 200 
                                                                    if (
                                                                    ((unsigned long long)(n + 18446744073709551615UL) & 32ULL) == 0ULL) {
                                                                    #line 200 
                                                                    if (
                                                                    ((unsigned long long)(n + 18446744073709551615UL) & 16ULL) == 0ULL) {
                                                                    #line 200 
                                                                    if (
                                                                    ((unsigned long long)(n + 18446744073709551615UL) & 8ULL) == 0ULL) {
                                                                    #line 200 
                                                                    if (
                                                                    ((unsigned long long)(n + 18446744073709551615UL) & 4ULL) != 0ULL) 
                                                                    #line 200 
                                                                    tmp = 3; else 
                                                                    #line 200 
                                                                    tmp = 2;
                                                                    #line 200 
                                                                    tmp_0 = tmp;
                                                                    }
                                                                    else 
                                                                    #line 200 
                                                                    tmp_0 = 4;
                                                                    #line 200 
                                                                    tmp_1 = tmp_0;
                                                                    }
                                                                    else 
                                                                    #line 200 
                                                                    tmp_1 = 5;
                                                                    #line 200 
                                                                    tmp_2 = tmp_1;
                                                                    }
                                                                    else 
                                                                    #line 200 
                                                                    tmp_2 = 6;
                                                                    #line 200 
                                                                    tmp_3 = tmp_2;
                                                                    }
                                                                    else 
                                                                    #line 200 
                                                                    tmp_3 = 7;
                                                                    #line 200 
                                                                    tmp_4 = tmp_3;
                                                                    }
                                                                    else 
                                                                    #line 200 
                                                                    tmp_4 = 8;
                                                                    #line 200 
                                                                    tmp_5 = tmp_4;
                                                                    }
                                                                    else 
                                                                    #line 200 
                                                                    tmp_5 = 9;
                                                                    #line 200 
                                                                    tmp_6 = tmp_5;
                                                                    }
                                                                    else 
                                                                    #line 200 
                                                                    tmp_6 = 10;
                                                                    #line 200 
                                                                    tmp_7 = tmp_6;
                                                                    }
                                                                    else 
                                                                    #line 200 
                                                                    tmp_7 = 11;
                                                                    #line 200 
                                                                    tmp_8 = tmp_7;
                                                                    }
                                                                    else 
                                                                    #line 200 
                                                                    tmp_8 = 12;
                                                                    #line 200 
                                                                    tmp_9 = tmp_8;
                                                                    }
                                                                    else 
                                                                    #line 200 
                                                                    tmp_9 = 13;
                                                                    #line 200 
                                                                    tmp_10 = tmp_9;
                                                                    }
                                                                    else 
                                                                    #line 200 
                                                                    tmp_10 = 14;
                                                                    #line 200 
                                                                    tmp_11 = tmp_10;
                                                                    }
                                                                    else 
                                                                    #line 200 
                                                                    tmp_11 = 15;
                                                                    #line 200 
                                                                    tmp_12 = tmp_11;
                                                                    }
                                                                    else 
                                                                    #line 200 
                                                                    tmp_12 = 16;
                                                                    #line 200 
                                                                    tmp_13 = tmp_12;
                                                                    }
                                                                    else 
                                                                    #line 200 
                                                                    tmp_13 = 17;
                                                                    #line 200 
                                                                    tmp_14 = tmp_13;
                                                                    }
                                                                    else 
                                                                    #line 200 
                                                                    tmp_14 = 18;
                                                                    #line 200 
                                                                    tmp_15 = tmp_14;
                                                                    }
                                                                    else 
                                                                    #line 200 
                                                                    tmp_15 = 19;
                                                                    #line 200 
                                                                    tmp_16 = tmp_15;
                                                                    }
                                                                    else 
                                                                    #line 200 
                                                                    tmp_16 = 20;
                                                                    #line 200 
                                                                    tmp_17 = tmp_16;
                                                                    }
                                                                    else 
                                                                    #line 200 
                                                                    tmp_17 = 21;
                                                                    #line 200 
                                                                    tmp_18 = tmp_17;
                                                                    }
                                                                    else 
                                                                    #line 200 
                                                                    tmp_18 = 22;
                                                                    #line 200 
                                                                    tmp_19 = tmp_18;
                                                                    }
                                                                    else 
                                                                    #line 200 
                                                                    tmp_19 = 23;
                                                                    #line 200 
                                                                    tmp_20 = tmp_19;
                                                                    }
                                                                    else 
                                                                    #line 200 
                                                                    tmp_20 = 24;
                                                                    #line 200 
                                                                    tmp_21 = tmp_20;
                                                                    }
                                                                    else 
                                                                    #line 200 
                                                                    tmp_21 = 25;
                                                                    #line 200 
                                                                    tmp_22 = tmp_21;
                                                                    }
                                                                    else 
                                                                    #line 200 
                                                                    tmp_22 = 26;
                                                                    #line 200 
                                                                    tmp_23 = tmp_22;
                                                                    }
                                                                    else 
                                                                    #line 200 
                                                                    tmp_23 = 27;
                                                                    #line 200 
                                                                    tmp_24 = tmp_23;
                                                                    }
                                                                    else 
                                                                    #line 200 
                                                                    tmp_24 = 28;
                                                                    #line 200 
                                                                    tmp_25 = tmp_24;
                                                                    }
                                                                    else 
                                                                    #line 200 
                                                                    tmp_25 = 29;
                                                                    #line 200 
                                                                    tmp_26 = tmp_25;
                                                                    }
                                                                    else 
                                                                    #line 200 
                                                                    tmp_26 = 30;
                                                                    #line 200 
                                                                    tmp_27 = tmp_26;
                                                                    }
                                                                    else 
                                                                    #line 200 
                                                                    tmp_27 = 31;
                                                                    #line 200 
                                                                    tmp_28 = tmp_27;
                                                                    }
                                                                    else 
                                                                    #line 200 
                                                                    tmp_28 = 32;
                                                                    #line 200 
                                                                    tmp_29 = tmp_28;
                                                                    }
                                                                    else 
                                                                    #line 200 
                                                                    tmp_29 = 33;
                                                                    #line 200 
                                                                    tmp_30 = tmp_29;
                                                                    }
                                                                    else 
                                                                    #line 200 
                                                                    tmp_30 = 34;
                                                                    #line 200 
                                                                    tmp_31 = tmp_30;
                                                                  }
                                                                  else 
                                                                    #line 200 
                                                                    tmp_31 = 35;
                                                                  #line 200 
                                                                  tmp_32 = tmp_31;
                                                                }
                                                                else 
                                                                  #line 200 
                                                                  tmp_32 = 36;
                                                                #line 200 
                                                                tmp_33 = tmp_32;
                                                              }
                                                              else 
                                                                   #line 200 
                                                                   tmp_33 = 37;
                                                              #line 200 
                                                              tmp_34 = tmp_33;
                                                            }
                                                            else 
                                                                 #line 200 
                                                                 tmp_34 = 38;
                                                            #line 200 
                                                            tmp_35 = tmp_34;
                                                          }
                                                          else 
                                                               #line 200 
                                                               tmp_35 = 39;
                                                          #line 200 
                                                          tmp_36 = tmp_35;
                                                        }
                                                        else 
                                                             #line 200 
                                                             tmp_36 = 40;
                                                        #line 200 
                                                        tmp_37 = tmp_36;
                                                      }
                                                      else 
                                                           #line 200 
                                                           tmp_37 = 41;
                                                      #line 200 
                                                      tmp_38 = tmp_37;
                                                    }
                                                    else 
                                                         #line 200 
                                                         tmp_38 = 42;
                                                    #line 200 
                                                    tmp_39 = tmp_38;
                                                  }
                                                  else 
                                                       #line 200 
                                                       tmp_39 = 43;
                                                  #line 200 
                                                  tmp_40 = tmp_39;
                                                }
                                                else 
                                                     #line 200 
                                                     tmp_40 = 44;
                                                #line 200 
                                                tmp_41 = tmp_40;
                                              }
                                              else 
                                                   #line 200 
                                                   tmp_41 = 45;
                                              #line 200 
                                              tmp_42 = tmp_41;
                                            }
                                            else 
                                                 #line 200 
                                                 tmp_42 = 46;
                                            #line 200 
                                            tmp_43 = tmp_42;
                                          }
                                          else 
                                               #line 200 
                                               tmp_43 = 47;
                                          #line 200 
                                          tmp_44 = tmp_43;
                                        }
                                        else 
                                             #line 200 
                                             tmp_44 = 48;
                                        #line 200 
                                        tmp_45 = tmp_44;
                                      }
                                      else 
                                           #line 200 
                                           tmp_45 = 49;
                                      #line 200 
                                      tmp_46 = tmp_45;
                                    }
                                    else 
                                         #line 200 
                                         tmp_46 = 50;
                                    #line 200 
                                    tmp_47 = tmp_46;
                                  }
                                  else 
                                       #line 200 
                                       tmp_47 = 51;
                                  #line 200 
                                  tmp_48 = tmp_47;
                                }
                                else 
                                     #line 200 
                                     tmp_48 = 52;
                                #line 200 
                                tmp_49 = tmp_48;
                              }
                              else 
                                   #line 200 
                                   tmp_49 = 53;
                              #line 200 
                              tmp_50 = tmp_49;
                            }
                            else 
                                 #line 200 
                                 tmp_50 = 54;
                            #line 200 
                            tmp_51 = tmp_50;
                          }
                          else 
                               #line 200 
                               tmp_51 = 55;
                          #line 200 
                          tmp_52 = tmp_51;
                        }
                        else 
                             #line 200 
                             tmp_52 = 56;
                        #line 200 
                        tmp_53 = tmp_52;
                      }
                      else 
                           #line 200 
                           tmp_53 = 57;
                      #line 200 
                      tmp_54 = tmp_53;
                    }
                    else 
                         #line 200 
                         tmp_54 = 58;
                    #line 200 
                    tmp_55 = tmp_54;
                  }
                  else 
                       #line 200 
                       tmp_55 = 59;
                  #line 200 
                  tmp_56 = tmp_55;
                }
                else 
                     #line 200 
                     tmp_56 = 60;
                #line 200 
                tmp_57 = tmp_56;
              }
              else 
                   #line 200 
                   tmp_57 = 61;
              #line 200 
              tmp_58 = tmp_57;
            }
            else 
                 #line 200 
                 tmp_58 = 62;
            #line 200 
            tmp_59 = tmp_58;
          }
          else 
               #line 200 
               tmp_59 = 63;
          #line 200 
          tmp_60 = tmp_59;
        }
        else 
             #line 200 
             tmp_60 = 64;
        #line 200 
        tmp_61 = tmp_60;
      }
      else 
           #line 200 
           tmp_61 = 1;
      #line 200 
      tmp_63 = tmp_61;
    }
    else {
      #line 200 
      tmp_63 = __ilog2_u64((unsigned long long)(n + 18446744073709551615UL)) + 1;
    }
    #line 200 
    tmp_64 = tmp_63;
  }
  else 
       #line 200 
       tmp_64 = 0;
  #line 200 
  return tmp_64;
}

#line 472  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernel.h"
#line 472 
int snprintf(char *, size_t, char * , ...);
#line 26  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
#line 133  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ice/ice.ko/concurrency safety/0/concurrency safety/weaver/ice_lib.i.aux"
static void INIT_LIST_HEAD_0(struct list_head *list);
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static void __list_add_0(struct list_head *new, struct list_head *prev, struct list_head *next)
{
  #line 60 
  if (! __list_add_valid(new,prev,next)) 
                                         #line 61 
                                         return;
  #line 63 
  next->prev = new;
  #line 64 
  new->next = next;
  #line 65 
  new->prev = prev;
  {
    #line 67 
    union __anonunion___u_7237 __u = {.__val = new};
    #line 66 
    __write_once_size((void *)(& prev->next),(void *)(& __u.__c),8);
    #line 66 
    struct list_head *tmp_2 = __u.__val;
  }
  #line 68 
  return;
}

#line 77  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static void list_add_0(struct list_head *new, struct list_head *head)
{
  #line 79 
  __list_add_0(new,head,head->next);
  #line 80 
  return;
}

#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static void __list_del_0(struct list_head *prev, struct list_head *next)
{
  #line 97 
  next->prev = prev;
  {
    #line 107 
    union __anonunion___u_7239 __u = {.__val = next};
    #line 106 
    __write_once_size((void *)(& prev->next),(void *)(& __u.__c),8);
    #line 106 
    struct list_head *tmp = __u.__val;
  }
  #line 108 
  return;
}

#line 129  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static void __list_del_entry_0(struct list_head *entry)
{
  #line 131 
  if (! __list_del_entry_valid(entry)) 
                                       #line 132 
                                       return;
  #line 134 
  __list_del_0(entry->prev,entry->next);
  #line 135 
  return;
}

#line 137  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static void list_del_0(struct list_head *entry)
{
  #line 139 
  __list_del_entry_0(entry);
  #line 140 
  entry->next = (struct list_head *)(-2401263026318606080);
  #line 141 
  entry->prev = (struct list_head *)(-2401263026318606046);
  #line 142 
  return;
}

#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/cmpxchg_64.h"
__inline static int arch_atomic_read_0(atomic_t *v)
{
  #line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/atomic.h"
  union __anonunion___u_7291 __u;
  #line 31 
  __read_once_size((void *)(& v->counter),(void *)(& __u.__c),4);
  #line 31 
  return (__u.__val);
}

#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/atomic-instrumented.h"
__inline static int atomic_read_0(atomic_t *v)
{
  #line 26 
  kasan_check_read((void *)v,4U);
  #line 27 
  return arch_atomic_read_0(v);
}

#line 99  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cpumask.h"
#line 99 
extern atomic_t __num_online_cpus;
#line 110  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cpumask.h"
__inline static unsigned int num_online_cpus(void)
{
  #line 112 
  return (unsigned int)atomic_read_0(& __num_online_cpus);
}

#line 26  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ice/ice.ko/concurrency safety/0/concurrency safety/weaver/ice_lib.i.aux"
#line 805 
static void cif_mutex_lock_sw_mutex_of_ice_pf(struct mutex *lock);
#line 26 
#line 826 
static void cif_mutex_lock_avail_q_mutex_of_ice_pf(struct mutex *lock);
#line 36  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rcutree.h"
#line 36 
void kfree_call_rcu(struct callback_head *, void (*)(struct callback_head *));
#line 185  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mutex.h"
#line 812  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ice/ice.ko/concurrency safety/0/concurrency safety/weaver/ice_lib.i.aux"
static void cif_mutex_unlock_sw_mutex_of_ice_pf(struct mutex *lock);
#line 185  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mutex.h"
#line 833  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ice/ice.ko/concurrency safety/0/concurrency safety/weaver/ice_lib.i.aux"
static void cif_mutex_unlock_avail_q_mutex_of_ice_pf(struct mutex *lock);
#line 668  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/slab.h"
#line 418  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ice/ice.ko/concurrency safety/0/concurrency safety/weaver/ice_lib.i.aux"
static void *kzalloc_0(size_t size, gfp_t flags);
#line 937  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
#line 819  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ice/ice.ko/concurrency safety/0/concurrency safety/weaver/ice_lib.i.aux"
static void *cif_devm_kzalloc_2(struct device *dev, size_t size, gfp_t flags);
#line 952  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
#line 798  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ice/ice.ko/concurrency safety/0/concurrency safety/weaver/ice_lib.i.aux"
static void *cif_devm_kcalloc_1(struct device *dev, size_t n, size_t size, gfp_t flags);
#line 216  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/interrupt.h"
#line 840  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ice/ice.ko/concurrency safety/0/concurrency safety/weaver/ice_lib.i.aux"
static void cif_devm_free_irq(struct device *dev, unsigned int irq, void *dev_id);
#line 352  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/interrupt.h"
#line 352 
int irq_set_affinity_hint(unsigned int, struct cpumask *);
#line 355 
#line 355 
int irq_set_affinity_notifier(unsigned int, struct irq_affinity_notify *);
#line 2679  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
#line 856  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ice/ice.ko/concurrency safety/0/concurrency safety/weaver/ice_lib.i.aux"
static void cif_free_netdev(struct net_device *dev);
#line 4132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
#line 848  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ice/ice.ko/concurrency safety/0/concurrency safety/weaver/ice_lib.i.aux"
static void cif_unregister_netdev(struct net_device *dev);
#line 4371  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
#line 4371 
void netdev_rss_key_fill(void *, size_t);
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rtnetlink.h"
#line 33 
void rtnl_lock(void);
#line 34 
#line 34 
void rtnl_unlock(void);
#line 49  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_common.h"
#line 49 
void ice_dev_onetime_setup(struct ice_hw *hw);
#line 59 
#line 59 
enum ice_status ice_aq_set_rss_lut(struct ice_hw *hw, u16 vsi_handle, u8 lut_type, u8 *lut, u16 lut_size);
#line 65 
#line 65 
enum ice_status ice_aq_set_rss_key(struct ice_hw *hw, u16 vsi_handle, struct ice_aqc_get_set_rss_keys *keys);
#line 133 
#line 133 
enum ice_status ice_cfg_vsi_lan(struct ice_port_info *pi, u16 vsi_handle, u8 tc_bitmap, u16 *max_lanqs);
#line 145 
#line 145 
void ice_stat_update40(struct ice_hw *hw, u32 reg, bool prev_stat_loaded, u64 *prev_stat, u64 *cur_stat);
#line 148 
#line 148 
void ice_stat_update32(struct ice_hw *hw, u32 reg, bool prev_stat_loaded, u64 *prev_stat, u64 *cur_stat);
#line 151 
#line 151 
void ice_get_nvm_version(struct ice_hw *hw, u8 *oem_ver, u16 *oem_build, u8 *oem_patch, u8 *ver_hi, u8 *ver_lo);
#line 80  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_sched.h"
#line 80 
enum ice_status ice_rm_vsi_lan_cfg(struct ice_port_info *pi, u16 vsi_handle);
#line 122  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_virtchnl_pf.h"
#line 122 
int ice_calc_vf_reg_idx(struct ice_vf *vf, struct ice_q_vector *q_vector);
#line 494  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice.h"
#line 494 
u16 ice_get_avail_txq_count(struct ice_pf *pf);
#line 495 
#line 495 
u16 ice_get_avail_rxq_count(struct ice_pf *pf);
#line 500 
#line 500 
int ice_down(struct ice_vsi *vsi);
#line 503 
#line 503 
int ice_prepare_xdp_rings(struct ice_vsi *vsi, struct bpf_prog *prog);
#line 504 
#line 504 
int ice_destroy_xdp_rings(struct ice_vsi *vsi);
#line 508 
#line 508 
int ice_set_rss(struct ice_vsi *vsi, u8 *seed, u8 *lut, u16 lut_size);
#line 510 
#line 510 
void ice_fill_rss_lut(u8 *lut, u16 rss_table_size, u16 rss_size);
#line 511 
#line 511 
int ice_schedule_reset(struct ice_pf *pf, enum ice_reset_req reset);
#line 513 
#line 513 
int ice_open(struct net_device *netdev);
#line 514 
#line 514 
int ice_stop(struct net_device *netdev);
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_lib.h"
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_lib.c"
char *ice_vsi_type_str(enum ice_vsi_type type);
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_lib.h"
#line 1088  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_lib.c"
int ice_add_mac_to_list(struct ice_vsi *vsi, struct list_head *add_list, u8 *macaddr);
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_lib.h"
#line 1165  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_lib.c"
void ice_free_fltr_list(struct device *dev, struct list_head *h);
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_lib.h"
#line 1115  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_lib.c"
void ice_update_eth_stats(struct ice_vsi *vsi);
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_lib.h"
#line 1294  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_lib.c"
int ice_vsi_cfg_rxqs(struct ice_vsi *vsi);
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_lib.h"
#line 1358  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_lib.c"
int ice_vsi_cfg_lan_txqs(struct ice_vsi *vsi);
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_lib.h"
#line 1409  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_lib.c"
void ice_vsi_cfg_msix(struct ice_vsi *vsi);
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_lib.h"
#line 1180  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_lib.c"
int ice_vsi_add_vlan(struct ice_vsi *vsi, u16 vid);
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_lib.h"
#line 1222  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_lib.c"
int ice_vsi_kill_vlan(struct ice_vsi *vsi, u16 vid);
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_lib.h"
#line 1454  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_lib.c"
int ice_vsi_manage_vlan_insertion(struct ice_vsi *vsi);
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_lib.h"
#line 1496  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_lib.c"
int ice_vsi_manage_vlan_stripping(struct ice_vsi *vsi, bool ena);
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_lib.h"
#line 1543  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_lib.c"
int ice_vsi_start_rx_rings(struct ice_vsi *vsi);
#line 35  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_lib.h"
#line 1554  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_lib.c"
int ice_vsi_stop_rx_rings(struct ice_vsi *vsi);
#line 38  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_lib.h"
#line 1600  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_lib.c"
int ice_vsi_stop_lan_tx_rings(struct ice_vsi *vsi, enum ice_disq_rst_src rst_src, u16 rel_vmvf_num);
#line 41  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_lib.h"
#line 1370  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_lib.c"
int ice_vsi_cfg_xdp_txqs(struct ice_vsi *vsi);
#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_lib.h"
#line 1610  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_lib.c"
int ice_vsi_stop_xdp_tx_rings(struct ice_vsi *vsi);
#line 45  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_lib.h"
#line 1623  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_lib.c"
int ice_cfg_vlan_pruning(struct ice_vsi *vsi, bool ena, bool vlan_promisc);
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_lib.h"
#line 1776  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_lib.c"
void ice_cfg_sw_lldp(struct ice_vsi *vsi, bool tx, bool create);
#line 49  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_lib.h"
#line 224  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_lib.c"
void ice_vsi_delete(struct ice_vsi *vsi);
#line 51  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_lib.h"
#line 291  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_lib.c"
int ice_vsi_clear(struct ice_vsi *vsi);
#line 54  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_lib.h"
#line 2590  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_lib.c"
int ice_vsi_cfg_tc(struct ice_vsi *vsi, u8 ena_tc);
#line 58  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_lib.h"
#line 1834  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_lib.c"
struct ice_vsi *ice_vsi_setup(struct ice_pf *pf, struct ice_port_info *pi, enum ice_vsi_type type, u16 vf_id);
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_lib.h"
#line 2314  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_lib.c"
void ice_napi_del(struct ice_vsi *vsi);
#line 63  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_lib.h"
#line 2331  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_lib.c"
int ice_vsi_release(struct ice_vsi *vsi);
#line 65  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_lib.h"
#line 2099  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_lib.c"
void ice_vsi_close(struct ice_vsi *vsi);
#line 67  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_lib.h"
#line 2114  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_lib.c"
int ice_ena_vsi(struct ice_vsi *vsi, bool locked);
#line 69  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_lib.h"
#line 2143  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_lib.c"
void ice_dis_vsi(struct ice_vsi *vsi, bool locked);
#line 71  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_lib.h"
#line 2173  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_lib.c"
int ice_free_res(struct ice_res_tracker *res, u16 index, u16 id);
#line 74  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_lib.h"
#line 2239  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_lib.c"
int ice_get_res(struct ice_pf *pf, struct ice_res_tracker *res, u16 needed, u16 id);
#line 76  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_lib.h"
#line 2411  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_lib.c"
int ice_vsi_rebuild(struct ice_vsi *vsi, bool init_vsi);
#line 80  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_lib.h"
#line 464  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_lib.c"
void ice_vsi_put_qs(struct ice_vsi *vsi);
#line 82  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_lib.h"
#line 2258  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_lib.c"
void ice_vsi_dis_irq(struct ice_vsi *vsi);
#line 84  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_lib.h"
#line 2027  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_lib.c"
void ice_vsi_free_irq(struct ice_vsi *vsi);
#line 86  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_lib.h"
#line 2083  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_lib.c"
void ice_vsi_free_rx_rings(struct ice_vsi *vsi);
#line 88  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_lib.h"
#line 2067  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_lib.c"
void ice_vsi_free_tx_rings(struct ice_vsi *vsi);
#line 90  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_lib.h"
#line 995  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_lib.c"
int ice_vsi_manage_rss_lut(struct ice_vsi *vsi, bool ena);
#line 96  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_lib.h"
#line 1266  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_lib.c"
void ice_vsi_cfg_frame_size(struct ice_vsi *vsi);
#line 100  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_lib.h"
#line 2654  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_lib.c"
char *ice_nvm_version_str(struct ice_hw *hw);
#line 103  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_lib.h"
#line 2723  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_lib.c"
enum ice_status ice_vsi_cfg_mac_fltr(struct ice_vsi *vsi, u8 *macaddr, bool set);
#line 105  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_lib.h"
#line 490  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_lib.c"
bool ice_is_safe_mode(struct ice_pf *pf);
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_dcb_lib.h"
#line 18 
u8 ice_dcb_get_ena_tc(struct ice_dcbx_cfg *dcbcfg);
#line 19 
#line 19 
u8 ice_dcb_get_num_tc(struct ice_dcbx_cfg *dcbcfg);
#line 33 
#line 33 
void ice_vsi_cfg_netdev_tc(struct ice_vsi *vsi, u8 ena_tc);
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_lib.c"
char *ice_vsi_type_str(enum ice_vsi_type type)
{
  #line 15 
  switch ((unsigned int)type) {
    #line 16 
    case (unsigned int)0: 
                          #line 16 
    ;
    #line 17 
    return (char *)"ICE_VSI_PF";
    #line 18 
    case (unsigned int)1: 
                          #line 18 
    ;
    #line 19 
    return (char *)"ICE_VSI_VF";
    #line 20 
    case (unsigned int)6: 
                          #line 20 
    ;
    #line 21 
    return (char *)"ICE_VSI_LB";
    #line 22 
    default: 
             #line 22 
    ;
    #line 23 
    return (char *)"unknown";
  }
}

#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_lib.c"
static int ice_vsi_ctrl_rx_rings(struct ice_vsi *vsi, bool ena)
{
  #line 34 
  int i;
  #line 34 
  int ret = 0;
  #line 36 
  i = 0;
  #line 36 
  while ((int)vsi->num_rxq > i) {
    #line 37 
    ret = ice_vsi_ctrl_rx_ring(vsi,(_Bool)((bool)((int)ena) != 0),(unsigned short)((int)((unsigned short)i)));
    #line 38 
    if (ret != 0) 
                  #line 39 
                  break;
    #line 36 
    i ++;
  }
  #line 42 
  return ret;
}

#line 52  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_lib.c"
static int ice_vsi_alloc_arrays(struct ice_vsi *vsi)
{
  #line 55 
  struct device *dev;
  #line 54 
  struct ice_pf *pf = vsi->back;
  #line 57 
  dev = & (pf->pdev)->dev;
  #line 60 
  vsi->tx_rings = (struct ice_ring **)cif_devm_kcalloc_1(dev,(unsigned long)vsi->alloc_txq,8UL,3264U);
  #line 62 
  if (vsi->tx_rings == (struct ice_ring **)0) 
                                              #line 63 
                                              return -12;
  #line 65 
  vsi->rx_rings = (struct ice_ring **)cif_devm_kcalloc_1(dev,(unsigned long)vsi->alloc_rxq,8UL,3264U);
  #line 67 
  if (vsi->rx_rings == (struct ice_ring **)0) 
                                              #line 68 
                                              goto err_rings;
  #line 71 
  vsi->txq_map = (u16 *)cif_devm_kcalloc_1(dev,(unsigned long)((int)vsi->alloc_txq * 2),2UL,3264U);
  #line 74 
  if (vsi->txq_map == (u16 *)0U) 
                                 #line 75 
                                 goto err_txq_map;
  #line 77 
  vsi->rxq_map = (u16 *)cif_devm_kcalloc_1(dev,(unsigned long)vsi->alloc_rxq,2UL,3264U);
  #line 79 
  if (vsi->rxq_map == (u16 *)0U) 
                                 #line 80 
                                 goto err_rxq_map;
  #line 83 
  if (vsi->type == (unsigned int)ICE_VSI_LB) 
                                             #line 84 
                                             return 0;
  #line 87 
  vsi->q_vectors = (struct ice_q_vector **)cif_devm_kcalloc_1(dev,(unsigned long)vsi->num_q_vectors,8UL,3264U);
  #line 89 
  if (vsi->q_vectors == (struct ice_q_vector **)0) 
                                                   #line 90 
                                                   goto err_vectors;
  #line 92 
  return 0;
  #line 94 
  err_vectors: 
               #line 94 
  ;
  #line 95 
  devm_kfree(dev,(void *)vsi->rxq_map);
  #line 96 
  err_rxq_map: 
               #line 96 
  ;
  #line 97 
  devm_kfree(dev,(void *)vsi->txq_map);
  #line 98 
  err_txq_map: 
               #line 98 
  ;
  #line 99 
  devm_kfree(dev,(void *)vsi->rx_rings);
  #line 100 
  err_rings: 
             #line 100 
  ;
  #line 101 
  devm_kfree(dev,(void *)vsi->tx_rings);
  #line 102 
  return -12;
}

#line 109  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_lib.c"
static void ice_vsi_set_num_desc(struct ice_vsi *vsi)
{
  #line 111 
  switch ((unsigned int)vsi->type) {
    #line 112 
    case (unsigned int)0: 
                          #line 112 
    ;
    #line 114 
    case (unsigned int)6: 
                          #line 114 
    ;
    #line 115 
    vsi->num_rx_desc = (unsigned short)2048U;
    #line 116 
    vsi->num_tx_desc = (unsigned short)256U;
    #line 117 
    break;
    #line 118 
    default: 
             #line 118 
    ;
    {
      #line 119 
      bool branch;
      #line 119 
      struct _ddebug __UNIQUE_ID_ddebug536 = {.modname = (char *)"ice", .function = (char *)"ice_vsi_set_num_desc", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_lib.c", .format = (char *)"Not setting number of Tx/Rx descriptors for VSI type %d\n", .lineno = (unsigned int)119U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 119 
      branch = arch_static_branch(& __UNIQUE_ID_ddebug536.key.dd_key_false.key,(_Bool)0);
      #line 119 
      if ((long)((long)((int)branch != 0)) != 0L) 
                                                  #line 119 
                                                  __dynamic_dev_dbg(& __UNIQUE_ID_ddebug536,& ((vsi->back)->pdev)->dev,(char *)"Not setting number of Tx/Rx descriptors for VSI type %d\n",(unsigned int)vsi->type);
    }
    #line 122 
    break;
  }
  #line 124 
  return;
}

#line 133  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_lib.c"
static void ice_vsi_set_num_qs(struct ice_vsi *vsi, u16 vf_id)
{
  #line 135 
  struct ice_pf *pf = vsi->back;
  #line 136 
  struct ice_vf *vf = (struct ice_vf *)0;
  #line 138 
  if (vsi->type == (unsigned int)ICE_VSI_VF) 
                                             #line 139 
                                             vsi->vf_id = (short)vf_id;
  #line 141 
  switch ((unsigned int)vsi->type) {
    #line 166 
    int __UNIQUE_ID___x541;
    #line 166 
    int tmp_8;
    #line 143 
    int __UNIQUE_ID___x537;
    #line 143 
    int tmp_1;
    #line 142 
    case (unsigned int)0: 
                          #line 142 
    ;
    {
      #line 143 
      __UNIQUE_ID___x537 = (int)ice_get_avail_txq_count(pf);
      #line 143 
      int __UNIQUE_ID___y538 = (int)num_online_cpus();
      #line 143 
      if (__UNIQUE_ID___x537 < __UNIQUE_ID___y538) 
                                                   #line 143 
                                                   tmp_1 = __UNIQUE_ID___x537; else 
                                                                    #line 143 
                                                                    tmp_1 = __UNIQUE_ID___y538;
      }
    #line 143 
    vsi->alloc_txq = (unsigned short)tmp_1;
    #line 145 
    if ((unsigned int)vsi->req_txq != 0U) {
      #line 146 
      vsi->alloc_txq = vsi->req_txq;
      #line 147 
      vsi->num_txq = vsi->req_txq;
    }
    #line 150 
    pf->num_lan_tx = vsi->alloc_txq;
    #line 153 
    if (test_bit(1L,(unsigned long *)(& pf->flags))) {
      #line 156 
      int __UNIQUE_ID___x539;
      #line 156 
      int tmp_5;
      {
        #line 156 
        __UNIQUE_ID___x539 = (int)ice_get_avail_rxq_count(pf);
        #line 156 
        int __UNIQUE_ID___y540 = (int)num_online_cpus();
        #line 156 
        if (__UNIQUE_ID___x539 < __UNIQUE_ID___y540) 
                                                     #line 156 
                                                     tmp_5 = __UNIQUE_ID___x539; else 
                                                                    #line 156 
                                                                    tmp_5 = __UNIQUE_ID___y540;
        }
      #line 156 
      vsi->alloc_rxq = (unsigned short)tmp_5;
      #line 158 
      if ((unsigned int)vsi->req_rxq != 0U) {
        #line 159 
        vsi->alloc_rxq = vsi->req_rxq;
        #line 160 
        vsi->num_rxq = vsi->req_rxq;
      }
    }
    else 
         #line 154 
         vsi->alloc_rxq = (unsigned short)1U;
    #line 164 
    pf->num_lan_rx = vsi->alloc_rxq;
    {
      #line 166 
      __UNIQUE_ID___x541 = (int)vsi->alloc_rxq;
      #line 166 
      int __UNIQUE_ID___y542 = (int)vsi->alloc_txq;
      #line 166 
      if (__UNIQUE_ID___x541 > __UNIQUE_ID___y542) 
                                                   #line 166 
                                                   tmp_8 = __UNIQUE_ID___x541; else 
                                                                    #line 166 
                                                                    tmp_8 = __UNIQUE_ID___y542;
      }
    #line 166 
    vsi->num_q_vectors = tmp_8;
    #line 167 
    break;
    #line 168 
    case (unsigned int)1: 
                          #line 168 
    ;
    #line 169 
    vf = pf->vf + (unsigned long)vsi->vf_id;
    #line 170 
    vsi->alloc_txq = vf->num_vf_qs;
    #line 171 
    vsi->alloc_rxq = vf->num_vf_qs;
    #line 177 
    vsi->num_q_vectors = (int)pf->num_vf_msix + -1;
    #line 178 
    break;
    #line 179 
    case (unsigned int)6: 
                          #line 179 
    ;
    #line 180 
    vsi->alloc_txq = (unsigned short)1U;
    #line 181 
    vsi->alloc_rxq = (unsigned short)1U;
    #line 182 
    break;
    #line 183 
    default: 
             #line 183 
    ;
    #line 184 
    _dev_warn(& (pf->pdev)->dev,(char *)"Unknown VSI type %d\n",(unsigned int)vsi->type);
    #line 185 
    break;
  }
  #line 188 
  ice_vsi_set_num_desc(vsi);
  #line 189 
  return;
}

#line 200  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_lib.c"
static int ice_get_free_slot(void *array, int size, int curr)
{
  #line 203 
  int next;
  #line 202 
  int **tmp_array = (int **)array;
  #line 205 
  if (size + -1 > curr && *(tmp_array + ((unsigned long)curr + (unsigned long)1U)) == (int *)0) 
    #line 206 
    next = curr + 1;
  else {
    #line 208 
    int i = 0;
    #line 210 
    while (i < size && *(tmp_array + (unsigned long)i) != (int *)0) 
                                                                    #line 211 
                                                                    i ++;
    #line 212 
    if (i == size) 
                   #line 213 
                   next = 65535; else 
                                      #line 215 
                                      next = i;
  }
  #line 217 
  return next;
}

#line 224  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_lib.c"
void ice_vsi_delete(struct ice_vsi *vsi)
{
  #line 227 
  struct ice_vsi_ctx *ctxt;
  #line 228 
  enum ice_status status;
  #line 226 
  struct ice_pf *pf = vsi->back;
  #line 230 
  ctxt = (struct ice_vsi_ctx *)kzalloc_0(384UL,3264U);
  #line 231 
  if (ctxt == (struct ice_vsi_ctx *)0) 
                                       #line 232 
                                       return;
  #line 234 
  if (vsi->type == (unsigned int)ICE_VSI_VF) 
                                             #line 235 
                                             ctxt->vf_num = (unsigned char)vsi->vf_id;
  #line 236 
  ctxt->vsi_num = vsi->vsi_num;
  #line 238 
  memcpy((void *)(& ctxt->info),(void *)(& vsi->info),128UL);
  #line 240 
  status = ice_free_vsi(& pf->hw,(unsigned short)((int)vsi->idx),ctxt,(_Bool)0,(struct ice_sq_cd *)0);
  #line 241 
  if (status != ICE_SUCCESS) 
                             #line 242 
                             _dev_err(& (pf->pdev)->dev,(char *)"Failed to delete VSI %i in FW - error: %d\n",(int)vsi->vsi_num,(int)status);
  #line 245 
  kfree((void *)ctxt);
  #line 246 
  return;
}

#line 252  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_lib.c"
static void ice_vsi_free_arrays(struct ice_vsi *vsi)
{
  #line 255 
  struct device *dev;
  #line 254 
  struct ice_pf *pf = vsi->back;
  #line 257 
  dev = & (pf->pdev)->dev;
  #line 260 
  if (vsi->q_vectors != (struct ice_q_vector **)0) {
    #line 261 
    devm_kfree(dev,(void *)vsi->q_vectors);
    #line 262 
    vsi->q_vectors = (struct ice_q_vector **)0;
  }
  #line 264 
  if (vsi->tx_rings != (struct ice_ring **)0) {
    #line 265 
    devm_kfree(dev,(void *)vsi->tx_rings);
    #line 266 
    vsi->tx_rings = (struct ice_ring **)0;
  }
  #line 268 
  if (vsi->rx_rings != (struct ice_ring **)0) {
    #line 269 
    devm_kfree(dev,(void *)vsi->rx_rings);
    #line 270 
    vsi->rx_rings = (struct ice_ring **)0;
  }
  #line 272 
  if (vsi->txq_map != (u16 *)0U) {
    #line 273 
    devm_kfree(dev,(void *)vsi->txq_map);
    #line 274 
    vsi->txq_map = (u16 *)0U;
  }
  #line 276 
  if (vsi->rxq_map != (u16 *)0U) {
    #line 277 
    devm_kfree(dev,(void *)vsi->rxq_map);
    #line 278 
    vsi->rxq_map = (u16 *)0U;
  }
  #line 280 
  return;
}

#line 291  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_lib.c"
int ice_vsi_clear(struct ice_vsi *vsi)
{
  #line 294 
  struct device *dev;
  #line 293 
  struct ice_pf *pf = (struct ice_pf *)0;
  #line 296 
  if (vsi == (struct ice_vsi *)0) 
                                  #line 297 
                                  return 0;
  #line 299 
  if (vsi->back == (struct ice_pf *)0) 
                                       #line 300 
                                       return -22;
  #line 302 
  pf = vsi->back;
  #line 303 
  dev = & (pf->pdev)->dev;
  #line 305 
  if (*(pf->vsi + (unsigned long)vsi->idx) == (struct ice_vsi *)0 || *(pf->vsi + (unsigned long)vsi->idx) != vsi) {
    {
      #line 306 
      bool branch;
      #line 306 
      struct _ddebug __UNIQUE_ID_ddebug543 = {.modname = (char *)"ice", .function = (char *)"ice_vsi_clear", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_lib.c", .format = (char *)"vsi does not exist at pf->vsi[%d]\n", .lineno = (unsigned int)306U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 306 
      branch = arch_static_branch(& __UNIQUE_ID_ddebug543.key.dd_key_false.key,(_Bool)0);
      #line 306 
      if ((long)((long)((int)branch != 0)) != 0L) 
                                                  #line 306 
                                                  __dynamic_dev_dbg(& __UNIQUE_ID_ddebug543,dev,(char *)"vsi does not exist at pf->vsi[%d]\n",(int)vsi->idx);
    }
    #line 307 
    return -22;
  }
  #line 310 
  cif_mutex_lock_sw_mutex_of_ice_pf(& pf->sw_mutex);
  #line 313 
  *(pf->vsi + (unsigned long)vsi->idx) = (struct ice_vsi *)0;
  #line 314 
  if ((int)vsi->idx < (int)pf->next_vsi) 
                                         #line 315 
                                         pf->next_vsi = vsi->idx;
  #line 317 
  ice_vsi_free_arrays(vsi);
  #line 318 
  cif_mutex_unlock_sw_mutex_of_ice_pf(& pf->sw_mutex);
  #line 319 
  devm_kfree(dev,(void *)vsi);
  #line 321 
  return 0;
}

#line 329  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_lib.c"
static irqreturn_t ice_msix_clean_rings(int irq, void *data)
{
  #line 331 
  struct ice_q_vector *q_vector = (struct ice_q_vector *)data;
  #line 333 
  if (q_vector->tx.ring == (struct ice_ring *)0 && q_vector->rx.ring == (struct ice_ring *)0) 
    #line 334 
    return IRQ_HANDLED;
  #line 336 
  napi_schedule(& q_vector->napi);
  #line 338 
  return IRQ_HANDLED;
}

#line 350  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_lib.c"
static struct ice_vsi *ice_vsi_alloc(struct ice_pf *pf, enum ice_vsi_type type, u16 vf_id)
{
  #line 352 
  struct device *dev = & (pf->pdev)->dev;
  #line 353 
  struct ice_vsi *vsi = (struct ice_vsi *)0;
  #line 356 
  cif_mutex_lock_sw_mutex_of_ice_pf(& pf->sw_mutex);
  #line 362 
  if ((unsigned int)pf->next_vsi == 65535U) {
    {
      #line 363 
      bool branch;
      #line 363 
      struct _ddebug __UNIQUE_ID_ddebug544 = {.modname = (char *)"ice", .function = (char *)"ice_vsi_alloc", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_lib.c", .format = (char *)"out of VSI slots!\n", .lineno = (unsigned int)363U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 363 
      branch = arch_static_branch(& __UNIQUE_ID_ddebug544.key.dd_key_false.key,(_Bool)0);
      #line 363 
      if ((long)((long)((int)branch != 0)) != 0L) 
                                                  #line 363 
                                                  __dynamic_dev_dbg(& __UNIQUE_ID_ddebug544,dev,(char *)"out of VSI slots!\n");
    }
    #line 364 
    goto unlock_pf;
  }
  #line 367 
  vsi = (struct ice_vsi *)cif_devm_kzalloc_2(dev,4096UL,3264U);
  #line 368 
  if (vsi == (struct ice_vsi *)0) 
                                  #line 369 
                                  goto unlock_pf;
  #line 371 
  vsi->type = type;
  #line 372 
  vsi->back = pf;
  #line 373 
  cif_set_bit_4(1L,(unsigned long *)(& vsi->state));
  #line 375 
  vsi->idx = pf->next_vsi;
  #line 377 
  if (type == (unsigned int)ICE_VSI_VF) 
                                        #line 378 
                                        ice_vsi_set_num_qs(vsi,(unsigned short)((int)vf_id)); else 
                                                                    #line 380 
                                                                    ice_vsi_set_num_qs(vsi,(unsigned short)256);
  #line 382 
  switch ((unsigned int)vsi->type) {
    #line 383 
    case (unsigned int)0: 
                          #line 383 
    ;
    #line 384 
    if (ice_vsi_alloc_arrays(vsi) != 0) 
                                        #line 385 
                                        goto err_rings;
    #line 388 
    vsi->irq_handler = & ice_msix_clean_rings;
    #line 389 
    break;
    #line 390 
    case (unsigned int)1: 
                          #line 390 
    ;
    #line 391 
    if (ice_vsi_alloc_arrays(vsi) != 0) 
                                        #line 392 
                                        goto err_rings;
    #line 393 
    break;
    #line 394 
    case (unsigned int)6: 
                          #line 394 
    ;
    #line 395 
    if (ice_vsi_alloc_arrays(vsi) != 0) 
                                        #line 396 
                                        goto err_rings;
    #line 397 
    break;
    #line 398 
    default: 
             #line 398 
    ;
    #line 399 
    _dev_warn(dev,(char *)"Unknown VSI type %d\n",(unsigned int)vsi->type);
    #line 400 
    goto unlock_pf;
  }
  #line 404 
  *(pf->vsi + (unsigned long)pf->next_vsi) = vsi;
  #line 407 
  pf->next_vsi = (unsigned short)ice_get_free_slot((void *)pf->vsi,(int)pf->num_alloc_vsi,
                          (int)pf->next_vsi);
  #line 409 
  goto unlock_pf;
  #line 411 
  err_rings: 
             #line 411 
  ;
  #line 412 
  devm_kfree(dev,(void *)vsi);
  #line 413 
  vsi = (struct ice_vsi *)0;
  #line 414 
  unlock_pf: 
             #line 414 
  ;
  #line 415 
  cif_mutex_unlock_sw_mutex_of_ice_pf(& pf->sw_mutex);
  #line 416 
  return vsi;
}

#line 425  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_lib.c"
static int ice_vsi_get_qs(struct ice_vsi *vsi)
{
  #line 427 
  struct ice_pf *pf = vsi->back;
  #line 428 
  struct ice_qs_cfg tx_qs_cfg = {.qs_mutex = & pf->avail_q_mutex, .pf_map = pf->avail_txqs, .pf_map_size = (unsigned long)pf->max_pf_txqs, .q_count = (unsigned int)vsi->alloc_txq, .scatter_count = 16U, .vsi_map = vsi->txq_map, .vsi_map_offset = (unsigned short)0U, .mapping_mode = vsi->tx_mapping_mode};
  #line 438 
  struct ice_qs_cfg rx_qs_cfg = {.qs_mutex = & pf->avail_q_mutex, .pf_map = pf->avail_rxqs, .pf_map_size = (unsigned long)pf->max_pf_rxqs, .q_count = (unsigned int)vsi->alloc_rxq, .scatter_count = 16U, .vsi_map = vsi->rxq_map, .vsi_map_offset = (unsigned short)0U, .mapping_mode = vsi->rx_mapping_mode};
  #line 448 
  int ret = 0;
  #line 450 
  vsi->tx_mapping_mode = (unsigned char)0U;
  #line 451 
  vsi->rx_mapping_mode = (unsigned char)0U;
  #line 453 
  ret = __ice_vsi_get_qs(& tx_qs_cfg);
  #line 454 
  if (ret == 0) 
                #line 455 
                ret = __ice_vsi_get_qs(& rx_qs_cfg);
  #line 457 
  return ret;
}

#line 464  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_lib.c"
void ice_vsi_put_qs(struct ice_vsi *vsi)
{
  #line 467 
  int i;
  #line 466 
  struct ice_pf *pf = vsi->back;
  #line 469 
  cif_mutex_lock_avail_q_mutex_of_ice_pf(& pf->avail_q_mutex);
  #line 471 
  i = 0;
  #line 471 
  while ((int)vsi->alloc_txq > i) {
    #line 472 
    cif_clear_bit_4((long)*(vsi->txq_map + (unsigned long)i),pf->avail_txqs);
    #line 473 
    *(vsi->txq_map + (unsigned long)i) = (unsigned short)65535U;
    #line 471 
    i ++;
  }
  #line 476 
  i = 0;
  #line 476 
  while ((int)vsi->alloc_rxq > i) {
    #line 477 
    cif_clear_bit_4((long)*(vsi->rxq_map + (unsigned long)i),pf->avail_rxqs);
    #line 478 
    *(vsi->rxq_map + (unsigned long)i) = (unsigned short)65535U;
    #line 476 
    i ++;
  }
  #line 481 
  cif_mutex_unlock_avail_q_mutex_of_ice_pf(& pf->avail_q_mutex);
  #line 482 
  return;
}

#line 490  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_lib.c"
bool ice_is_safe_mode(struct ice_pf *pf)
{
  #line 492 
  int tmp_0;
  #line 492 
  if ((int)test_bit(6L,(unsigned long *)(& pf->flags)) != 0) 
                                                             #line 492 
                                                             tmp_0 = 0; else 
                                                                    #line 492 
                                                                    tmp_0 = 1;
  #line 492 
  return (_Bool)(tmp_0 != 0);
}

#line 499  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_lib.c"
static void ice_rss_clean(struct ice_vsi *vsi)
{
  #line 502 
  struct device *dev;
  #line 501 
  struct ice_pf *pf = vsi->back;
  #line 504 
  dev = & (pf->pdev)->dev;
  #line 506 
  if (vsi->rss_hkey_user != (u8 *)0U) 
                                      #line 507 
                                      devm_kfree(dev,(void *)vsi->rss_hkey_user);
  #line 508 
  if (vsi->rss_lut_user != (u8 *)0U) 
                                     #line 509 
                                     devm_kfree(dev,(void *)vsi->rss_lut_user);
  #line 510 
  return;
}

#line 516  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_lib.c"
static void ice_vsi_set_rss_params(struct ice_vsi *vsi)
{
  #line 518 
  struct ice_hw_common_caps *cap;
  #line 519 
  struct ice_pf *pf = vsi->back;
  #line 521 
  if (! test_bit(1L,(unsigned long *)(& pf->flags))) {
    #line 522 
    vsi->rss_size = (unsigned short)1U;
    #line 523 
    return;
  }
  #line 526 
  cap = & pf->hw.func_caps.common_cap;
  #line 527 
  switch ((unsigned int)vsi->type) {
    #line 531 
    int __UNIQUE_ID___x545;
    #line 531 
    int tmp_1;
    #line 540 
    int __UNIQUE_ID___x547;
    #line 540 
    int tmp_4;
    #line 528 
    case (unsigned int)0: 
                          #line 528 
    ;
    #line 530 
    vsi->rss_table_size = cap->rss_table_size;
    {
      #line 531 
      __UNIQUE_ID___x545 = (int)num_online_cpus();
      #line 531 
      int __UNIQUE_ID___y546 = (int)(1UL << (int)cap->rss_table_entry_width);
      #line 531 
      if (__UNIQUE_ID___x545 < __UNIQUE_ID___y546) 
                                                   #line 531 
                                                   tmp_1 = __UNIQUE_ID___x545; else 
                                                                    #line 531 
                                                                    tmp_1 = __UNIQUE_ID___y546;
      }
    #line 531 
    vsi->rss_size = (unsigned short)tmp_1;
    #line 533 
    vsi->rss_lut_type = (unsigned char)1U;
    #line 534 
    break;
    #line 535 
    case (unsigned int)1: 
                          #line 535 
    ;
    #line 539 
    vsi->rss_table_size = (unsigned short)64U;
    {
      #line 540 
      __UNIQUE_ID___x547 = (int)num_online_cpus();
      #line 540 
      int __UNIQUE_ID___y548 = (int)(1UL << (int)cap->rss_table_entry_width);
      #line 540 
      if (__UNIQUE_ID___x547 < __UNIQUE_ID___y548) 
                                                   #line 540 
                                                   tmp_4 = __UNIQUE_ID___x547; else 
                                                                    #line 540 
                                                                    tmp_4 = __UNIQUE_ID___y548;
      }
    #line 540 
    vsi->rss_size = (unsigned short)tmp_4;
    #line 542 
    vsi->rss_lut_type = (unsigned char)0U;
    #line 543 
    break;
    #line 544 
    case (unsigned int)6: 
                          #line 544 
    ;
    #line 545 
    break;
    #line 546 
    default: 
             #line 546 
    ;
    #line 547 
    _dev_warn(& (pf->pdev)->dev,(char *)"Unknown VSI type %d\n",(unsigned int)vsi->type);
    #line 549 
    break;
  }
  #line 551 
  return;
}

#line 559  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_lib.c"
static void ice_set_dflt_vsi_ctx(struct ice_vsi_ctx *ctxt)
{
  #line 561 
  u32 table = 0U;
  #line 563 
  memset((void *)(& ctxt->info),0,128UL);
  #line 565 
  ctxt->alloc_from_pool = (unsigned char)1U;
  #line 567 
  ctxt->info.sw_flags = (unsigned char)128U;
  #line 569 
  ctxt->info.sw_flags2 = (unsigned char)16U;
  #line 574 
  ctxt->info.vlan_flags = (unsigned char)3U;
  #line 578 
  table = table;
  #line 579 
  table |= 8U;
  #line 580 
  table |= 128U;
  #line 581 
  table |= 1536U;
  #line 582 
  table |= 16384U;
  #line 583 
  table |= 163840U;
  #line 584 
  table |= 1572864U;
  #line 585 
  table |= 14680064U;
  #line 586 
  ctxt->info.ingress_table = table;
  #line 587 
  ctxt->info.egress_table = table;
  #line 589 
  ctxt->info.outer_up_table = table;
  #line 590 
  return;
}

#line 598  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_lib.c"
static void ice_vsi_setup_q_map(struct ice_vsi *vsi, struct ice_vsi_ctx *ctxt)
{
  #line 603 
  u16 tx_numq_tc;
  #line 603 
  u16 rx_numq_tc;
  #line 607 
  int i;
  #line 600 
  u16 offset = (unsigned short)0U;
  #line 600 
  u16 qmap = (unsigned short)0U;
  #line 600 
  u16 tx_count = (unsigned short)0U;
  #line 601 
  u16 qcount_tx = vsi->alloc_txq;
  #line 602 
  u16 qcount_rx = vsi->alloc_rxq;
  #line 604 
  u16 pow = (unsigned short)0U;
  #line 604 
  u16 max_rss = (unsigned short)0U;
  #line 605 
  bool ena_tc0 = (_Bool)0;
  #line 606 
  u8 netdev_tc = (unsigned char)0U;
  #line 610 
  if ((unsigned int)vsi->tc_cfg.numtc != 0U) {
    #line 611 
    if (((unsigned long)vsi->tc_cfg.ena_tc & 1UL) == 0UL) 
                                                          #line 612 
                                                          ena_tc0 = (_Bool)1;
  }
  else 
       #line 614 
       ena_tc0 = (_Bool)1;
  #line 617 
  if ((int)ena_tc0 != 0) {
    #line 618 
    vsi->tc_cfg.numtc = (u8)((int)vsi->tc_cfg.numtc + 1);
    #line 619 
    vsi->tc_cfg.ena_tc = (unsigned char)((unsigned int)vsi->tc_cfg.ena_tc | 1U);
  }
  #line 622 
  rx_numq_tc = (unsigned short)((int)qcount_rx / (int)vsi->tc_cfg.numtc);
  #line 623 
  if ((unsigned int)rx_numq_tc == 0U) 
                                      #line 624 
                                      rx_numq_tc = (unsigned short)1U;
  #line 625 
  tx_numq_tc = (unsigned short)((int)qcount_tx / (int)vsi->tc_cfg.numtc);
  #line 626 
  if ((unsigned int)tx_numq_tc == 0U) 
                                      #line 627 
                                      tx_numq_tc = (unsigned short)1U;
  #line 641 
  qcount_rx = rx_numq_tc;
  #line 644 
  if ((int)test_bit(1L,(unsigned long *)(& (vsi->back)->flags)) != 0) 
    #line 645 
    if (vsi->type <= (unsigned int)ICE_VSI_VF) {
      #line 650 
      int __UNIQUE_ID___x549;
      #line 650 
      int tmp;
      #line 646 
      if (vsi->type == (unsigned int)ICE_VSI_PF) 
                                                 #line 647 
                                                 max_rss = (unsigned short)256U; else 
                                                                    #line 649 
                                                                    max_rss = (unsigned short)8U;
      {
        #line 650 
        __UNIQUE_ID___x549 = (int)rx_numq_tc;
        #line 650 
        int __UNIQUE_ID___y550 = (int)max_rss;
        #line 650 
        if (__UNIQUE_ID___x549 < __UNIQUE_ID___y550) 
                                                     #line 650 
                                                     tmp = __UNIQUE_ID___x549; else 
                                                                    #line 650 
                                                                    tmp = __UNIQUE_ID___y550;
        }
      #line 650 
      qcount_rx = (unsigned short)tmp;
      #line 651 
      if ((unsigned int)vsi->req_rxq == 0U) {
        #line 652 
        int __UNIQUE_ID___x551;
        #line 652 
        int tmp_1;
        {
          #line 652 
          __UNIQUE_ID___x551 = (int)qcount_rx;
          #line 652 
          int __UNIQUE_ID___y552 = (int)vsi->rss_size;
          #line 652 
          if (__UNIQUE_ID___x551 < __UNIQUE_ID___y552) 
                                                       #line 652 
                                                       tmp_1 = __UNIQUE_ID___x551; else 
                                                                    #line 652 
                                                                    tmp_1 = __UNIQUE_ID___y552;
          }
        #line 652 
        qcount_rx = (unsigned short)tmp_1;
      }
    }
  #line 658 
  if (0 != 0) {
    #line 658 
    unsigned int tmp_6;
    #line 658 
    unsigned int tmp_38;
    #line 658 
    unsigned int tmp_39;
    #line 658 
    unsigned int tmp_7;
    #line 658 
    unsigned int tmp_8;
    #line 658 
    unsigned int tmp_40;
    #line 658 
    unsigned int tmp_41;
    #line 658 
    unsigned int tmp_9;
    #line 658 
    unsigned int tmp_10;
    #line 658 
    unsigned int tmp_42;
    #line 658 
    unsigned int tmp_43;
    #line 658 
    unsigned int tmp_11;
    #line 658 
    unsigned int tmp_12;
    #line 658 
    unsigned int tmp_44;
    #line 658 
    unsigned int tmp_45;
    #line 658 
    unsigned int tmp_13;
    #line 658 
    unsigned int tmp_14;
    #line 658 
    unsigned int tmp_46;
    #line 658 
    unsigned int tmp_47;
    #line 658 
    unsigned int tmp_15;
    #line 658 
    unsigned int tmp_16;
    #line 658 
    unsigned int tmp_48;
    #line 658 
    unsigned int tmp_49;
    #line 658 
    unsigned int tmp_17;
    #line 658 
    unsigned int tmp_18;
    #line 658 
    unsigned int tmp_50;
    #line 658 
    unsigned int tmp_51;
    #line 658 
    unsigned int tmp_19;
    #line 658 
    unsigned int tmp_20;
    #line 658 
    unsigned int tmp_52;
    #line 658 
    unsigned int tmp_53;
    #line 658 
    unsigned int tmp_21;
    #line 658 
    unsigned int tmp_22;
    #line 658 
    unsigned int tmp_54;
    #line 658 
    unsigned int tmp_55;
    #line 658 
    unsigned int tmp_23;
    #line 658 
    unsigned int tmp_24;
    #line 658 
    unsigned int tmp_56;
    #line 658 
    unsigned int tmp_57;
    #line 658 
    unsigned int tmp_25;
    #line 658 
    unsigned int tmp_26;
    #line 658 
    unsigned int tmp_58;
    #line 658 
    unsigned int tmp_59;
    #line 658 
    unsigned int tmp_27;
    #line 658 
    unsigned int tmp_28;
    #line 658 
    unsigned int tmp_60;
    #line 658 
    unsigned int tmp_61;
    #line 658 
    unsigned int tmp_29;
    #line 658 
    unsigned int tmp_30;
    #line 658 
    unsigned int tmp_62;
    #line 658 
    unsigned int tmp_63;
    #line 658 
    unsigned int tmp_31;
    #line 658 
    unsigned int tmp_32;
    #line 658 
    unsigned int tmp_64;
    #line 658 
    unsigned int tmp_65;
    #line 658 
    unsigned int tmp_33;
    #line 658 
    unsigned int tmp_34;
    #line 658 
    unsigned int tmp_66;
    #line 658 
    unsigned int tmp_35;
    #line 658 
    unsigned int tmp_68;
    #line 658 
    unsigned int tmp_4;
    #line 658 
    unsigned int tmp_36;
    #line 658 
    unsigned int tmp_37;
    #line 658 
    unsigned int tmp_5;
    #line 658 
    unsigned int tmp_69;
    #line 658 
    if ((unsigned int)qcount_rx > 1U) {
      #line 658 
      if (0 != 0) {
        #line 658 
        if ((unsigned int)qcount_rx > 2U) {
          #line 658 
          if (((unsigned long long)((int)qcount_rx + -1) & 9223372036854775808ULL) == 0ULL) {
            #line 658 
            if (((unsigned long long)((int)qcount_rx + -1) & 4611686018427387904ULL) == 0ULL) {
              #line 658 
              if (((unsigned long long)((int)qcount_rx + -1) & 2305843009213693952ULL) == 0ULL) {
                #line 658 
                if (((unsigned long long)((int)qcount_rx + -1) & 1152921504606846976ULL) == 0ULL) {
                  #line 658 
                  if (((unsigned long long)((int)qcount_rx + -1) & 576460752303423488ULL) == 0ULL) {
                    #line 658 
                    if (((unsigned long long)((int)qcount_rx + -1) & 288230376151711744ULL) == 0ULL) {
                      #line 658 
                      if (((unsigned long long)((int)qcount_rx + -1) & 144115188075855872ULL) == 0ULL) {
                        #line 658 
                        if (((unsigned long long)((int)qcount_rx + -1) & 72057594037927936ULL) == 0ULL) {
                          #line 658 
                          if (((unsigned long long)((int)qcount_rx + -1) & 36028797018963968ULL) == 0ULL) {
                            #line 658 
                            if (((unsigned long long)((int)qcount_rx + -1) & 18014398509481984ULL) == 0ULL) {
                              #line 658 
                              if (((unsigned long long)((int)qcount_rx + -1) & 9007199254740992ULL) == 0ULL) {
                                #line 658 
                                if (((unsigned long long)((int)qcount_rx + -1) & 4503599627370496ULL) == 0ULL) {
                                  #line 658 
                                  if (((unsigned long long)((int)qcount_rx + -1) & 2251799813685248ULL) == 0ULL) {
                                    #line 658 
                                    if (((unsigned long long)((int)qcount_rx + -1) & 1125899906842624ULL) == 0ULL) {
                                      #line 658 
                                      if (((unsigned long long)((int)qcount_rx + -1) & 562949953421312ULL) == 0ULL) {
                                        #line 658 
                                        if (((unsigned long long)((int)qcount_rx + -1) & 281474976710656ULL) == 0ULL) {
                                          #line 658 
                                          if (((unsigned long long)((int)qcount_rx + -1) & 140737488355328ULL) == 0ULL) {
                                            #line 658 
                                            if (((unsigned long long)((int)qcount_rx + -1) & 70368744177664ULL) == 0ULL) {
                                              #line 658 
                                              if (((unsigned long long)((int)qcount_rx + -1) & 35184372088832ULL) == 0ULL) {
                                                #line 658 
                                                if (((unsigned long long)((int)qcount_rx + -1) & 17592186044416ULL) == 0ULL) {
                                                  #line 658 
                                                  if (((unsigned long long)((int)qcount_rx + -1) & 8796093022208ULL) == 0ULL) {
                                                    #line 658 
                                                    if (((unsigned long long)((int)qcount_rx + -1) & 4398046511104ULL) == 0ULL) {
                                                      #line 658 
                                                      if (((unsigned long long)((int)qcount_rx + -1) & 2199023255552ULL) == 0ULL) {
                                                        #line 658 
                                                        if (((unsigned long long)((int)qcount_rx + -1) & 1099511627776ULL) == 0ULL) {
                                                          #line 658 
                                                          if (((unsigned long long)((int)qcount_rx + -1) & 549755813888ULL) == 0ULL) {
                                                            #line 658 
                                                            if (((unsigned long long)((int)qcount_rx + -1) & 274877906944ULL) == 0ULL) {
                                                              #line 658 
                                                              if (((unsigned long long)((int)qcount_rx + -1) & 137438953472ULL) == 0ULL) {
                                                                #line 658 
                                                                if (((unsigned long long)((int)qcount_rx + -1) & 68719476736ULL) == 0ULL) {
                                                                  #line 658 
                                                                  if (
                                                                    ((unsigned long long)((int)qcount_rx + -1) & 34359738368ULL) == 0ULL) {
                                                                    #line 658 
                                                                    if (
                                                                    ((unsigned long long)((int)qcount_rx + -1) & 17179869184ULL) == 0ULL) {
                                                                    #line 658 
                                                                    if (
                                                                    ((unsigned long long)((int)qcount_rx + -1) & 8589934592ULL) == 0ULL) {
                                                                    #line 658 
                                                                    if (
                                                                    ((unsigned long long)((int)qcount_rx + -1) & 4294967296ULL) == 0ULL) {
                                                                    #line 658 
                                                                    if (
                                                                    ((unsigned long long)((int)qcount_rx + -1) & 2147483648ULL) == 0ULL) {
                                                                    #line 658 
                                                                    if (
                                                                    ((unsigned long long)((int)qcount_rx + -1) & 1073741824ULL) == 0ULL) {
                                                                    #line 658 
                                                                    if (
                                                                    ((unsigned long long)((int)qcount_rx + -1) & 536870912ULL) == 0ULL) {
                                                                    #line 658 
                                                                    if (
                                                                    ((unsigned long long)((int)qcount_rx + -1) & 268435456ULL) == 0ULL) {
                                                                    #line 658 
                                                                    if (
                                                                    ((unsigned long long)((int)qcount_rx + -1) & 134217728ULL) == 0ULL) {
                                                                    #line 658 
                                                                    if (
                                                                    ((unsigned long long)((int)qcount_rx + -1) & 67108864ULL) == 0ULL) {
                                                                    #line 658 
                                                                    if (
                                                                    ((unsigned long long)((int)qcount_rx + -1) & 33554432ULL) == 0ULL) {
                                                                    #line 658 
                                                                    if (
                                                                    ((unsigned long long)((int)qcount_rx + -1) & 16777216ULL) == 0ULL) {
                                                                    #line 658 
                                                                    if (
                                                                    ((unsigned long long)((int)qcount_rx + -1) & 8388608ULL) == 0ULL) {
                                                                    #line 658 
                                                                    if (
                                                                    ((unsigned long long)((int)qcount_rx + -1) & 4194304ULL) == 0ULL) {
                                                                    #line 658 
                                                                    if (
                                                                    ((unsigned long long)((int)qcount_rx + -1) & 2097152ULL) == 0ULL) {
                                                                    #line 658 
                                                                    if (
                                                                    ((unsigned long long)((int)qcount_rx + -1) & 1048576ULL) == 0ULL) {
                                                                    #line 658 
                                                                    if (
                                                                    ((unsigned long long)((int)qcount_rx + -1) & 524288ULL) == 0ULL) {
                                                                    #line 658 
                                                                    if (
                                                                    ((unsigned long long)((int)qcount_rx + -1) & 262144ULL) == 0ULL) {
                                                                    #line 658 
                                                                    if (
                                                                    ((unsigned long long)((int)qcount_rx + -1) & 131072ULL) == 0ULL) {
                                                                    #line 658 
                                                                    if (
                                                                    ((unsigned long long)((int)qcount_rx + -1) & 65536ULL) == 0ULL) {
                                                                    #line 658 
                                                                    if (
                                                                    ((unsigned long long)((int)qcount_rx + -1) & 32768ULL) == 0ULL) {
                                                                    #line 658 
                                                                    if (
                                                                    ((unsigned long long)((int)qcount_rx + -1) & 16384ULL) == 0ULL) {
                                                                    #line 658 
                                                                    if (
                                                                    ((unsigned long long)((int)qcount_rx + -1) & 8192ULL) == 0ULL) {
                                                                    #line 658 
                                                                    if (
                                                                    ((unsigned long long)((int)qcount_rx + -1) & 4096ULL) == 0ULL) {
                                                                    #line 658 
                                                                    if (
                                                                    ((unsigned long long)((int)qcount_rx + -1) & 2048ULL) == 0ULL) {
                                                                    #line 658 
                                                                    if (
                                                                    ((unsigned long long)((int)qcount_rx + -1) & 1024ULL) == 0ULL) {
                                                                    #line 658 
                                                                    if (
                                                                    ((unsigned long long)((int)qcount_rx + -1) & 512ULL) == 0ULL) {
                                                                    #line 658 
                                                                    if (
                                                                    ((unsigned long long)((int)qcount_rx + -1) & 256ULL) == 0ULL) {
                                                                    #line 658 
                                                                    if (
                                                                    ((unsigned long long)((int)qcount_rx + -1) & 128ULL) == 0ULL) {
                                                                    #line 658 
                                                                    if (
                                                                    ((unsigned long long)((int)qcount_rx + -1) & 64ULL) == 0ULL) {
                                                                    #line 658 
                                                                    if (
                                                                    ((unsigned long long)((int)qcount_rx + -1) & 32ULL) == 0ULL) {
                                                                    #line 658 
                                                                    if (
                                                                    ((unsigned long long)((int)qcount_rx + -1) & 16ULL) == 0ULL) {
                                                                    #line 658 
                                                                    if (
                                                                    ((unsigned long long)((int)qcount_rx + -1) & 8ULL) == 0ULL) {
                                                                    #line 658 
                                                                    if (
                                                                    ((unsigned long long)((int)qcount_rx + -1) & 4ULL) != 0ULL) 
                                                                    #line 658 
                                                                    tmp_4 = 3U; else 
                                                                    #line 658 
                                                                    tmp_4 = 2U;
                                                                    #line 658 
                                                                    tmp_5 = tmp_4;
                                                                    }
                                                                    else 
                                                                    #line 658 
                                                                    tmp_5 = 4U;
                                                                    #line 658 
                                                                    tmp_6 = tmp_5;
                                                                    }
                                                                    else 
                                                                    #line 658 
                                                                    tmp_6 = 5U;
                                                                    #line 658 
                                                                    tmp_7 = tmp_6;
                                                                    }
                                                                    else 
                                                                    #line 658 
                                                                    tmp_7 = 6U;
                                                                    #line 658 
                                                                    tmp_8 = tmp_7;
                                                                    }
                                                                    else 
                                                                    #line 658 
                                                                    tmp_8 = 7U;
                                                                    #line 658 
                                                                    tmp_9 = tmp_8;
                                                                    }
                                                                    else 
                                                                    #line 658 
                                                                    tmp_9 = 8U;
                                                                    #line 658 
                                                                    tmp_10 = tmp_9;
                                                                    }
                                                                    else 
                                                                    #line 658 
                                                                    tmp_10 = 9U;
                                                                    #line 658 
                                                                    tmp_11 = tmp_10;
                                                                    }
                                                                    else 
                                                                    #line 658 
                                                                    tmp_11 = 10U;
                                                                    #line 658 
                                                                    tmp_12 = tmp_11;
                                                                    }
                                                                    else 
                                                                    #line 658 
                                                                    tmp_12 = 11U;
                                                                    #line 658 
                                                                    tmp_13 = tmp_12;
                                                                    }
                                                                    else 
                                                                    #line 658 
                                                                    tmp_13 = 12U;
                                                                    #line 658 
                                                                    tmp_14 = tmp_13;
                                                                    }
                                                                    else 
                                                                    #line 658 
                                                                    tmp_14 = 13U;
                                                                    #line 658 
                                                                    tmp_15 = tmp_14;
                                                                    }
                                                                    else 
                                                                    #line 658 
                                                                    tmp_15 = 14U;
                                                                    #line 658 
                                                                    tmp_16 = tmp_15;
                                                                    }
                                                                    else 
                                                                    #line 658 
                                                                    tmp_16 = 15U;
                                                                    #line 658 
                                                                    tmp_17 = tmp_16;
                                                                    }
                                                                    else 
                                                                    #line 658 
                                                                    tmp_17 = 16U;
                                                                    #line 658 
                                                                    tmp_18 = tmp_17;
                                                                    }
                                                                    else 
                                                                    #line 658 
                                                                    tmp_18 = 17U;
                                                                    #line 658 
                                                                    tmp_19 = tmp_18;
                                                                    }
                                                                    else 
                                                                    #line 658 
                                                                    tmp_19 = 18U;
                                                                    #line 658 
                                                                    tmp_20 = tmp_19;
                                                                    }
                                                                    else 
                                                                    #line 658 
                                                                    tmp_20 = 19U;
                                                                    #line 658 
                                                                    tmp_21 = tmp_20;
                                                                    }
                                                                    else 
                                                                    #line 658 
                                                                    tmp_21 = 20U;
                                                                    #line 658 
                                                                    tmp_22 = tmp_21;
                                                                    }
                                                                    else 
                                                                    #line 658 
                                                                    tmp_22 = 21U;
                                                                    #line 658 
                                                                    tmp_23 = tmp_22;
                                                                    }
                                                                    else 
                                                                    #line 658 
                                                                    tmp_23 = 22U;
                                                                    #line 658 
                                                                    tmp_24 = tmp_23;
                                                                    }
                                                                    else 
                                                                    #line 658 
                                                                    tmp_24 = 23U;
                                                                    #line 658 
                                                                    tmp_25 = tmp_24;
                                                                    }
                                                                    else 
                                                                    #line 658 
                                                                    tmp_25 = 24U;
                                                                    #line 658 
                                                                    tmp_26 = tmp_25;
                                                                    }
                                                                    else 
                                                                    #line 658 
                                                                    tmp_26 = 25U;
                                                                    #line 658 
                                                                    tmp_27 = tmp_26;
                                                                    }
                                                                    else 
                                                                    #line 658 
                                                                    tmp_27 = 26U;
                                                                    #line 658 
                                                                    tmp_28 = tmp_27;
                                                                    }
                                                                    else 
                                                                    #line 658 
                                                                    tmp_28 = 27U;
                                                                    #line 658 
                                                                    tmp_29 = tmp_28;
                                                                    }
                                                                    else 
                                                                    #line 658 
                                                                    tmp_29 = 28U;
                                                                    #line 658 
                                                                    tmp_30 = tmp_29;
                                                                    }
                                                                    else 
                                                                    #line 658 
                                                                    tmp_30 = 29U;
                                                                    #line 658 
                                                                    tmp_31 = tmp_30;
                                                                    }
                                                                    else 
                                                                    #line 658 
                                                                    tmp_31 = 30U;
                                                                    #line 658 
                                                                    tmp_32 = tmp_31;
                                                                    }
                                                                    else 
                                                                    #line 658 
                                                                    tmp_32 = 31U;
                                                                    #line 658 
                                                                    tmp_33 = tmp_32;
                                                                    }
                                                                    else 
                                                                    #line 658 
                                                                    tmp_33 = 32U;
                                                                    #line 658 
                                                                    tmp_34 = tmp_33;
                                                                    }
                                                                    else 
                                                                    #line 658 
                                                                    tmp_34 = 33U;
                                                                    #line 658 
                                                                    tmp_35 = tmp_34;
                                                                    }
                                                                    else 
                                                                    #line 658 
                                                                    tmp_35 = 34U;
                                                                    #line 658 
                                                                    tmp_36 = tmp_35;
                                                                    }
                                                                    else 
                                                                    #line 658 
                                                                    tmp_36 = 35U;
                                                                    #line 658 
                                                                    tmp_37 = tmp_36;
                                                                  }
                                                                  else 
                                                                    #line 658 
                                                                    tmp_37 = 36U;
                                                                  #line 658 
                                                                  tmp_38 = tmp_37;
                                                                }
                                                                else 
                                                                  #line 658 
                                                                  tmp_38 = 37U;
                                                                #line 658 
                                                                tmp_39 = tmp_38;
                                                              }
                                                              else 
                                                                   #line 658 
                                                                   tmp_39 = 38U;
                                                              #line 658 
                                                              tmp_40 = tmp_39;
                                                            }
                                                            else 
                                                                 #line 658 
                                                                 tmp_40 = 39U;
                                                            #line 658 
                                                            tmp_41 = tmp_40;
                                                          }
                                                          else 
                                                               #line 658 
                                                               tmp_41 = 40U;
                                                          #line 658 
                                                          tmp_42 = tmp_41;
                                                        }
                                                        else 
                                                             #line 658 
                                                             tmp_42 = 41U;
                                                        #line 658 
                                                        tmp_43 = tmp_42;
                                                      }
                                                      else 
                                                           #line 658 
                                                           tmp_43 = 42U;
                                                      #line 658 
                                                      tmp_44 = tmp_43;
                                                    }
                                                    else 
                                                         #line 658 
                                                         tmp_44 = 43U;
                                                    #line 658 
                                                    tmp_45 = tmp_44;
                                                  }
                                                  else 
                                                       #line 658 
                                                       tmp_45 = 44U;
                                                  #line 658 
                                                  tmp_46 = tmp_45;
                                                }
                                                else 
                                                     #line 658 
                                                     tmp_46 = 45U;
                                                #line 658 
                                                tmp_47 = tmp_46;
                                              }
                                              else 
                                                   #line 658 
                                                   tmp_47 = 46U;
                                              #line 658 
                                              tmp_48 = tmp_47;
                                            }
                                            else 
                                                 #line 658 
                                                 tmp_48 = 47U;
                                            #line 658 
                                            tmp_49 = tmp_48;
                                          }
                                          else 
                                               #line 658 
                                               tmp_49 = 48U;
                                          #line 658 
                                          tmp_50 = tmp_49;
                                        }
                                        else 
                                             #line 658 
                                             tmp_50 = 49U;
                                        #line 658 
                                        tmp_51 = tmp_50;
                                      }
                                      else 
                                           #line 658 
                                           tmp_51 = 50U;
                                      #line 658 
                                      tmp_52 = tmp_51;
                                    }
                                    else 
                                         #line 658 
                                         tmp_52 = 51U;
                                    #line 658 
                                    tmp_53 = tmp_52;
                                  }
                                  else 
                                       #line 658 
                                       tmp_53 = 52U;
                                  #line 658 
                                  tmp_54 = tmp_53;
                                }
                                else 
                                     #line 658 
                                     tmp_54 = 53U;
                                #line 658 
                                tmp_55 = tmp_54;
                              }
                              else 
                                   #line 658 
                                   tmp_55 = 54U;
                              #line 658 
                              tmp_56 = tmp_55;
                            }
                            else 
                                 #line 658 
                                 tmp_56 = 55U;
                            #line 658 
                            tmp_57 = tmp_56;
                          }
                          else 
                               #line 658 
                               tmp_57 = 56U;
                          #line 658 
                          tmp_58 = tmp_57;
                        }
                        else 
                             #line 658 
                             tmp_58 = 57U;
                        #line 658 
                        tmp_59 = tmp_58;
                      }
                      else 
                           #line 658 
                           tmp_59 = 58U;
                      #line 658 
                      tmp_60 = tmp_59;
                    }
                    else 
                         #line 658 
                         tmp_60 = 59U;
                    #line 658 
                    tmp_61 = tmp_60;
                  }
                  else 
                       #line 658 
                       tmp_61 = 60U;
                  #line 658 
                  tmp_62 = tmp_61;
                }
                else 
                     #line 658 
                     tmp_62 = 61U;
                #line 658 
                tmp_63 = tmp_62;
              }
              else 
                   #line 658 
                   tmp_63 = 62U;
              #line 658 
              tmp_64 = tmp_63;
            }
            else 
                 #line 658 
                 tmp_64 = 63U;
            #line 658 
            tmp_65 = tmp_64;
          }
          else 
               #line 658 
               tmp_65 = 64U;
          #line 658 
          tmp_66 = tmp_65;
        }
        else 
             #line 658 
             tmp_66 = 1U;
        #line 658 
        tmp_68 = tmp_66;
      }
      else {
        #line 658 
        tmp_68 = (unsigned int)((unsigned short)__ilog2_u32((unsigned int)((int)qcount_rx + -1))) + 1U;
      }
      #line 658 
      tmp_69 = tmp_68;
    }
    else 
         #line 658 
         tmp_69 = 0U;
    #line 658 
    pow = (unsigned short)tmp_69;
  }
  else {
    #line 658 
    pow = (unsigned short)__order_base_2((unsigned long)qcount_rx);
  }
  #line 660 
  i = 0;
  #line 660 
  while (i <= 7) {
    {
      #line 675 
      u8 tmp_71;
      #line 661 
      if ((((unsigned long)vsi->tc_cfg.ena_tc >> i) & 1UL) == 0UL) {
        #line 663 
        vsi->tc_cfg.tc_info[i].qoffset = (unsigned short)0U;
        #line 664 
        vsi->tc_cfg.tc_info[i].qcount_rx = (unsigned short)1U;
        #line 665 
        vsi->tc_cfg.tc_info[i].qcount_tx = (unsigned short)1U;
        #line 666 
        vsi->tc_cfg.tc_info[i].netdev_tc = (unsigned char)0U;
        #line 667 
        ctxt->info.tc_mapping[i] = (unsigned short)0U;
        #line 668 
        goto __Cont;
      }
      #line 672 
      vsi->tc_cfg.tc_info[i].qoffset = offset;
      #line 673 
      vsi->tc_cfg.tc_info[i].qcount_rx = qcount_rx;
      #line 674 
      vsi->tc_cfg.tc_info[i].qcount_tx = tx_numq_tc;
      #line 675 
      tmp_71 = netdev_tc;
      #line 675 
      netdev_tc = (u8)((int)netdev_tc + 1);
      #line 675 
      vsi->tc_cfg.tc_info[i].netdev_tc = tmp_71;
      #line 677 
      qmap = (unsigned short)(((int)offset & 2047) | (((int)pow << 11) & 30720));
      #line 681 
      offset = (unsigned short)((int)offset + (int)qcount_rx);
      #line 682 
      tx_count = (unsigned short)((int)tx_count + (int)tx_numq_tc);
      #line 683 
      ctxt->info.tc_mapping[i] = qmap;
    }
    #line 660 
    __Cont: 
            #line 660 
    i ++;
  }
  #line 692 
  if ((unsigned int)offset != 0U) 
                                  #line 693 
                                  vsi->num_rxq = offset; else 
                                                              #line 695 
                                                              vsi->num_rxq = qcount_rx;
  #line 697 
  vsi->num_txq = tx_count;
  #line 699 
  if (vsi->type == (unsigned int)ICE_VSI_VF && (int)vsi->num_txq != (int)vsi->num_rxq) {
    {
      #line 700 
      bool branch;
      #line 700 
      struct _ddebug __UNIQUE_ID_ddebug553 = {.modname = (char *)"ice", .function = (char *)"ice_vsi_setup_q_map", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_lib.c", .format = (char *)"VF VSI should have same number of Tx and Rx queues. Hence making them equal\n", .lineno = (unsigned int)700U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 700 
      branch = arch_static_branch(& __UNIQUE_ID_ddebug553.key.dd_key_false.key,(_Bool)0);
      #line 700 
      if ((long)((long)((int)branch != 0)) != 0L) 
                                                  #line 700 
                                                  __dynamic_dev_dbg(& __UNIQUE_ID_ddebug553,& ((vsi->back)->pdev)->dev,(char *)"VF VSI should have same number of Tx and Rx queues. Hence making them equal\n");
    }
    #line 704 
    vsi->num_txq = vsi->num_rxq;
  }
  #line 708 
  ctxt->info.mapping_flags = ctxt->info.mapping_flags;
  #line 713 
  ctxt->info.q_mapping[0] = *(vsi->rxq_map);
  #line 714 
  ctxt->info.q_mapping[1] = vsi->num_rxq;
  #line 715 
  return;
}

#line 722  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_lib.c"
static void ice_set_rss_vsi_ctx(struct ice_vsi_ctx *ctxt, struct ice_vsi *vsi)
{
  #line 724 
  u8 lut_type;
  #line 724 
  u8 hash_type;
  #line 725 
  struct device *dev;
  #line 726 
  struct ice_pf *pf;
  #line 728 
  pf = vsi->back;
  #line 729 
  dev = & (pf->pdev)->dev;
  #line 731 
  switch ((unsigned int)vsi->type) {
    #line 732 
    case (unsigned int)0: 
                          #line 732 
    ;
    #line 734 
    lut_type = (unsigned char)2U;
    #line 735 
    hash_type = (unsigned char)0U;
    #line 736 
    break;
    #line 737 
    case (unsigned int)1: 
                          #line 737 
    ;
    #line 739 
    lut_type = (unsigned char)0U;
    #line 740 
    hash_type = (unsigned char)0U;
    #line 741 
    break;
    #line 742 
    case (unsigned int)6: 
                          #line 742 
    ;
    {
      #line 743 
      bool branch;
      #line 743 
      struct _ddebug __UNIQUE_ID_ddebug554 = {.modname = (char *)"ice", .function = (char *)"ice_set_rss_vsi_ctx", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_lib.c", .format = (char *)"Unsupported VSI type %s\n", .lineno = (unsigned int)743U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 743 
      branch = arch_static_branch(& __UNIQUE_ID_ddebug554.key.dd_key_false.key,(_Bool)0);
      #line 743 
      if ((long)((long)((int)branch != 0)) != 0L) {
        #line 743 
        ;
        #line 743 
        __dynamic_dev_dbg(& __UNIQUE_ID_ddebug554,dev,(char *)"Unsupported VSI type %s\n",ice_vsi_type_str(vsi->type));
      }
    }
    #line 745 
    return;
    #line 746 
    default: 
             #line 746 
    ;
    #line 747 
    _dev_warn(dev,(char *)"Unknown VSI type %d\n",(unsigned int)vsi->type);
    #line 748 
    return;
  }
  #line 751 
  ctxt->info.q_opt_rss = (unsigned char)(((int)lut_type & 3) | ((int)hash_type << 6));
  #line 754 
  return;
}

#line 765  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_lib.c"
static int ice_vsi_init(struct ice_vsi *vsi, bool init_vsi)
{
  #line 769 
  struct ice_vsi_ctx *ctxt;
  #line 770 
  struct device *dev;
  #line 767 
  struct ice_pf *pf = vsi->back;
  #line 768 
  struct ice_hw *hw = & pf->hw;
  #line 771 
  int ret = 0;
  #line 773 
  dev = & (pf->pdev)->dev;
  #line 774 
  ctxt = (struct ice_vsi_ctx *)kzalloc_0(384UL,3264U);
  #line 775 
  if (ctxt == (struct ice_vsi_ctx *)0) 
                                       #line 776 
                                       return -12;
  #line 778 
  ctxt->info = vsi->info;
  #line 779 
  switch ((unsigned int)vsi->type) {
    #line 780 
    case (unsigned int)6: 
                          #line 780 
    ;
    #line 782 
    case (unsigned int)0: 
                          #line 782 
    ;
    #line 783 
    ctxt->flags = (unsigned short)2U;
    #line 784 
    break;
    #line 785 
    case (unsigned int)1: 
                          #line 785 
    ;
    #line 786 
    ctxt->flags = (unsigned short)0U;
    #line 788 
    ctxt->vf_num = (unsigned char)((int)((unsigned char)vsi->vf_id) + (int)((unsigned char)hw->func_caps.vf_base_id));
    #line 789 
    break;
    #line 790 
    default: 
             #line 790 
    ;
    #line 791 
    ret = -19;
    #line 792 
    goto out;
  }
  #line 795 
  ice_set_dflt_vsi_ctx(ctxt);
  #line 797 
  if ((unsigned int)(vsi->vsw)->bridge_mode == 0U) 
                                                   #line 798 
                                                   ctxt->info.sw_flags = (unsigned char)((unsigned int)ctxt->info.sw_flags | 32U);
  #line 801 
  if ((int)test_bit(1L,(unsigned long *)(& pf->flags)) != 0) {
    #line 802 
    ice_set_rss_vsi_ctx(ctxt,vsi);
    #line 806 
    if (! init_vsi) 
                    #line 807 
                    ctxt->info.valid_sections = (unsigned short)((unsigned int)ctxt->info.valid_sections | 128U);
  }
  #line 811 
  ctxt->info.sw_id = (unsigned char)(vsi->port_info)->sw_id;
  #line 812 
  ice_vsi_setup_q_map(vsi,ctxt);
  #line 813 
  if (! init_vsi) 
                  #line 817 
                  ctxt->info.valid_sections = (unsigned short)((unsigned int)ctxt->info.valid_sections | 64U);
  #line 821 
  if (vsi->type == (unsigned int)ICE_VSI_VF && (unsigned int)(pf->vf + (unsigned long)vsi->vf_id)->spoofchk != 0U) {
    #line 822 
    ctxt->info.valid_sections = (unsigned short)((unsigned int)ctxt->info.valid_sections | 2U);
    #line 824 
    ctxt->info.sec_flags = (unsigned char)((unsigned int)ctxt->info.sec_flags | 4U);
  }
  #line 829 
  if (vsi->type == (unsigned int)ICE_VSI_PF) {
    #line 830 
    ctxt->info.sec_flags = (unsigned char)((unsigned int)ctxt->info.sec_flags | 1U);
    #line 831 
    ctxt->info.valid_sections = (unsigned short)((unsigned int)ctxt->info.valid_sections | 2U);
  }
  #line 835 
  if ((int)init_vsi != 0) {
    #line 836 
    ret = (int)ice_add_vsi(hw,(unsigned short)((int)vsi->idx),ctxt,
                    (struct ice_sq_cd *)0);
    #line 837 
    if (ret != 0) {
      #line 838 
      _dev_err(dev,(char *)"Add VSI failed, err %d\n",ret);
      #line 839 
      ret = -5;
      #line 840 
      goto out;
    }
  }
  else {
    #line 843 
    ret = (int)ice_update_vsi(hw,(unsigned short)((int)vsi->idx),ctxt,
                       (struct ice_sq_cd *)0);
    #line 844 
    if (ret != 0) {
      #line 845 
      _dev_err(dev,(char *)"Update VSI failed, err %d\n",ret);
      #line 846 
      ret = -5;
      #line 847 
      goto out;
    }
  }
  #line 852 
  vsi->info = ctxt->info;
  #line 855 
  vsi->vsi_num = ctxt->vsi_num;
  #line 857 
  out: 
       #line 857 
  ;
  #line 858 
  kfree((void *)ctxt);
  #line 859 
  return ret;
}

#line 872  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_lib.c"
static int ice_vsi_setup_vector_base(struct ice_vsi *vsi)
{
  #line 875 
  struct device *dev;
  #line 876 
  u16 num_q_vectors;
  #line 874 
  struct ice_pf *pf = vsi->back;
  #line 878 
  dev = & (pf->pdev)->dev;
  #line 880 
  if (vsi->type == (unsigned int)ICE_VSI_VF) 
                                             #line 881 
                                             return 0;
  #line 883 
  if (vsi->base_vector != 0) {
    {
      #line 884 
      bool branch;
      #line 884 
      struct _ddebug __UNIQUE_ID_ddebug555 = {.modname = (char *)"ice", .function = (char *)"ice_vsi_setup_vector_base", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_lib.c", .format = (char *)"VSI %d has non-zero base vector %d\n", .lineno = (unsigned int)884U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 884 
      branch = arch_static_branch(& __UNIQUE_ID_ddebug555.key.dd_key_false.key,(_Bool)0);
      #line 884 
      if ((long)((long)((int)branch != 0)) != 0L) 
                                                  #line 884 
                                                  __dynamic_dev_dbg(& __UNIQUE_ID_ddebug555,dev,(char *)"VSI %d has non-zero base vector %d\n",(int)vsi->vsi_num,vsi->base_vector);
    }
    #line 886 
    return -17;
  }
  #line 889 
  num_q_vectors = (unsigned short)vsi->num_q_vectors;
  #line 891 
  vsi->base_vector = ice_get_res(pf,pf->irq_tracker,(unsigned short)((int)num_q_vectors),(unsigned short)((int)vsi->idx));
  #line 893 
  if (vsi->base_vector < 0) {
    #line 894 
    _dev_err(dev,(char *)"Failed to get tracking for %d vectors for VSI %d, err=%d\n",(int)num_q_vectors,(int)vsi->vsi_num,vsi->base_vector);
    #line 897 
    return -2;
  }
  #line 899 
  pf->num_avail_sw_msix -= (unsigned int)num_q_vectors;
  #line 901 
  return 0;
}

#line 908  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_lib.c"
static void ice_vsi_clear_rings(struct ice_vsi *vsi)
{
  #line 910 
  int i;
  #line 912 
  if (vsi->tx_rings != (struct ice_ring **)0) {
    #line 913 
    i = 0;
    #line 913 
    while ((int)vsi->alloc_txq > i) {
      #line 914 
      if (*(vsi->tx_rings + (unsigned long)i) != (struct ice_ring *)0) {
        {
          #line 915 
          struct ice_ring *___p = *(vsi->tx_rings + (unsigned long)i);
          #line 915 
          if (___p != (struct ice_ring *)0) 
                                            #line 915 
                                            kfree_call_rcu(& ___p->rcu,(void (*)(struct callback_head *))128);
        }
        #line 916 
        *(vsi->tx_rings + (unsigned long)i) = (struct ice_ring *)0;
      }
      #line 913 
      i ++;
    }
  }
  #line 920 
  if (vsi->rx_rings != (struct ice_ring **)0) {
    #line 921 
    i = 0;
    #line 921 
    while ((int)vsi->alloc_rxq > i) {
      #line 922 
      if (*(vsi->rx_rings + (unsigned long)i) != (struct ice_ring *)0) {
        {
          #line 923 
          struct ice_ring *___p_0 = *(vsi->rx_rings + (unsigned long)i);
          #line 923 
          if (___p_0 != (struct ice_ring *)0) 
                                              #line 923 
                                              kfree_call_rcu(& ___p_0->rcu,(void (*)(struct callback_head *))128);
        }
        #line 924 
        *(vsi->rx_rings + (unsigned long)i) = (struct ice_ring *)0;
      }
      #line 921 
      i ++;
    }
  }
  #line 927 
  return;
}

#line 934  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_lib.c"
static int ice_vsi_alloc_rings(struct ice_vsi *vsi)
{
  #line 937 
  struct device *dev;
  #line 938 
  int i;
  #line 936 
  struct ice_pf *pf = vsi->back;
  #line 940 
  dev = & (pf->pdev)->dev;
  #line 942 
  i = 0;
  #line 942 
  while ((int)vsi->alloc_txq > i) {
    {
      #line 943 
      struct ice_ring *ring;
      #line 946 
      ring = (struct ice_ring *)kzalloc_0(4096UL,3264U);
      #line 948 
      if (ring == (struct ice_ring *)0) 
                                        #line 949 
                                        goto err_out;
      #line 951 
      ring->q_index = (unsigned short)i;
      #line 952 
      ring->reg_idx = *(vsi->txq_map + (unsigned long)i);
      #line 953 
      ring->ring_active = (unsigned char)0U;
      #line 954 
      ring->vsi = vsi;
      #line 955 
      ring->dev = dev;
      #line 956 
      ring->count = vsi->num_tx_desc;
      #line 957 
      *(vsi->tx_rings + (unsigned long)i) = ring;
    }
    #line 942 
    i ++;
  }
  #line 961 
  i = 0;
  #line 961 
  while ((int)vsi->alloc_rxq > i) {
    {
      #line 962 
      struct ice_ring *ring_0;
      #line 965 
      ring_0 = (struct ice_ring *)kzalloc_0(4096UL,3264U);
      #line 966 
      if (ring_0 == (struct ice_ring *)0) 
                                          #line 967 
                                          goto err_out;
      #line 969 
      ring_0->q_index = (unsigned short)i;
      #line 970 
      ring_0->reg_idx = *(vsi->rxq_map + (unsigned long)i);
      #line 971 
      ring_0->ring_active = (unsigned char)0U;
      #line 972 
      ring_0->vsi = vsi;
      #line 973 
      ring_0->netdev = vsi->netdev;
      #line 974 
      ring_0->dev = dev;
      #line 975 
      ring_0->count = vsi->num_rx_desc;
      #line 976 
      *(vsi->rx_rings + (unsigned long)i) = ring_0;
    }
    #line 961 
    i ++;
  }
  #line 979 
  return 0;
  #line 981 
  err_out: 
           #line 981 
  ;
  #line 982 
  ice_vsi_clear_rings(vsi);
  #line 983 
  return -12;
}

#line 995  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_lib.c"
int ice_vsi_manage_rss_lut(struct ice_vsi *vsi, bool ena)
{
  #line 998 
  u8 *lut;
  #line 997 
  int err = 0;
  #line 1000 
  lut = (u8 *)kzalloc_0((unsigned long)vsi->rss_table_size,3264U);
  #line 1001 
  if (lut == (u8 *)0U) 
                       #line 1002 
                       return -12;
  #line 1004 
  if ((int)ena != 0) 
    #line 1005 
    if (vsi->rss_lut_user != (u8 *)0U) 
                                       #line 1006 
                                       memcpy((void *)lut,(void *)vsi->rss_lut_user,(unsigned long)vsi->rss_table_size); else 
                                                                    #line 1008 
                                                                    ice_fill_rss_lut(lut,(unsigned short)((int)vsi->rss_table_size),(unsigned short)((int)vsi->rss_size));
  #line 1012 
  err = ice_set_rss(vsi,(u8 *)0U,lut,(unsigned short)((int)vsi->rss_table_size));
  #line 1013 
  kfree((void *)lut);
  #line 1014 
  return err;
}

#line 1021  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_lib.c"
static int ice_vsi_cfg_rss_lut_key(struct ice_vsi *vsi)
{
  #line 1031 
  int __UNIQUE_ID___x556;
  #line 1031 
  int tmp;
  #line 1023 
  struct ice_aqc_get_set_rss_keys *key;
  #line 1025 
  enum ice_status status;
  #line 1026 
  struct device *dev;
  #line 1028 
  u8 *lut;
  #line 1024 
  struct ice_pf *pf = vsi->back;
  #line 1027 
  int err = 0;
  #line 1030 
  dev = & (pf->pdev)->dev;
  {
    #line 1031 
    __UNIQUE_ID___x556 = (int)vsi->rss_size;
    #line 1031 
    int __UNIQUE_ID___y557 = (int)vsi->num_rxq;
    #line 1031 
    if (__UNIQUE_ID___x556 < __UNIQUE_ID___y557) 
                                                 #line 1031 
                                                 tmp = __UNIQUE_ID___x556; else 
                                                                    #line 1031 
                                                                    tmp = __UNIQUE_ID___y557;
    }
  #line 1031 
  vsi->rss_size = (unsigned short)tmp;
  #line 1033 
  lut = (u8 *)kzalloc_0((unsigned long)vsi->rss_table_size,3264U);
  #line 1034 
  if (lut == (u8 *)0U) 
                       #line 1035 
                       return -12;
  #line 1037 
  if (vsi->rss_lut_user != (u8 *)0U) 
                                     #line 1038 
                                     memcpy((void *)lut,(void *)vsi->rss_lut_user,(unsigned long)vsi->rss_table_size); else 
                                                                    #line 1040 
                                                                    ice_fill_rss_lut(lut,(unsigned short)((int)vsi->rss_table_size),(unsigned short)((int)vsi->rss_size));
  #line 1042 
  status = ice_aq_set_rss_lut(& pf->hw,(unsigned short)((int)vsi->idx),(unsigned char)((int)vsi->rss_lut_type),lut,(unsigned short)((int)vsi->rss_table_size));
  #line 1045 
  if (status != ICE_SUCCESS) {
    #line 1046 
    _dev_err(dev,(char *)"set_rss_lut failed, error %d\n",(int)status);
    #line 1047 
    err = -5;
    #line 1048 
    goto ice_vsi_cfg_rss_exit;
  }
  #line 1051 
  key = (struct ice_aqc_get_set_rss_keys *)kzalloc_0(52UL,3264U);
  #line 1052 
  if (key == (struct ice_aqc_get_set_rss_keys *)0) {
    #line 1053 
    err = -12;
    #line 1054 
    goto ice_vsi_cfg_rss_exit;
  }
  #line 1057 
  if (vsi->rss_hkey_user != (u8 *)0U) 
                                      #line 1058 
                                      memcpy((void *)key,(void *)vsi->rss_hkey_user,52UL); else 
                                                                    #line 1062 
                                                                    netdev_rss_key_fill((void *)key,52UL);
  #line 1065 
  status = ice_aq_set_rss_key(& pf->hw,(unsigned short)((int)vsi->idx),key);
  #line 1067 
  if (status != ICE_SUCCESS) {
    #line 1068 
    _dev_err(dev,(char *)"set_rss_key failed, error %d\n",(int)status);
    #line 1069 
    err = -5;
  }
  #line 1072 
  kfree((void *)key);
  #line 1073 
  ice_vsi_cfg_rss_exit: 
                        #line 1073 
  ;
  #line 1074 
  kfree((void *)lut);
  #line 1075 
  return err;
}

#line 1088  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_lib.c"
int ice_add_mac_to_list(struct ice_vsi *vsi, struct list_head *add_list, u8 *macaddr)
{
  #line 1091 
  struct ice_fltr_list_entry *tmp;
  #line 1092 
  struct ice_pf *pf = vsi->back;
  #line 1094 
  tmp = (struct ice_fltr_list_entry *)cif_devm_kzalloc_2(& (pf->pdev)->dev,56UL,2592U);
  #line 1095 
  if (tmp == (struct ice_fltr_list_entry *)0) 
                                              #line 1096 
                                              return -12;
  #line 1098 
  tmp->fltr_info.flag = (unsigned short)2U;
  #line 1099 
  tmp->fltr_info.src_id = ICE_SRC_ID_VSI;
  #line 1100 
  tmp->fltr_info.lkup_type = ICE_SW_LKUP_MAC;
  #line 1101 
  tmp->fltr_info.fltr_act = ICE_FWD_TO_VSI;
  #line 1102 
  tmp->fltr_info.vsi_handle = vsi->idx;
  #line 1103 
  ether_addr_copy((u8 *)(& tmp->fltr_info.l_data.mac.mac_addr),macaddr);
  #line 1105 
  INIT_LIST_HEAD_0(& tmp->list_entry);
  #line 1106 
  list_add_0(& tmp->list_entry,add_list);
  #line 1108 
  return 0;
}

#line 1115  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_lib.c"
void ice_update_eth_stats(struct ice_vsi *vsi)
{
  #line 1117 
  struct ice_eth_stats *prev_es;
  #line 1117 
  struct ice_eth_stats *cur_es;
  #line 1118 
  struct ice_hw *hw = & (vsi->back)->hw;
  #line 1119 
  u16 vsi_num = vsi->vsi_num;
  #line 1121 
  prev_es = & vsi->eth_stats_prev;
  #line 1122 
  cur_es = & vsi->eth_stats;
  #line 1124 
  ice_stat_update40(hw,(unsigned int)(((int)vsi_num + 483328) * 8),(_Bool)((unsigned int)vsi->stat_offsets_loaded != 0U),& prev_es->rx_bytes,& cur_es->rx_bytes);
  #line 1127 
  ice_stat_update40(hw,(unsigned int)(((int)vsi_num + 484352) * 8),(_Bool)((unsigned int)vsi->stat_offsets_loaded != 0U),& prev_es->rx_unicast,& cur_es->rx_unicast);
  #line 1130 
  ice_stat_update40(hw,(unsigned int)(((int)vsi_num + 485376) * 8),(_Bool)((unsigned int)vsi->stat_offsets_loaded != 0U),& prev_es->rx_multicast,& cur_es->rx_multicast);
  #line 1133 
  ice_stat_update40(hw,(unsigned int)(((int)vsi_num + 486400) * 8),(_Bool)((unsigned int)vsi->stat_offsets_loaded != 0U),& prev_es->rx_broadcast,& cur_es->rx_broadcast);
  #line 1136 
  ice_stat_update32(hw,(unsigned int)(((int)vsi_num + 676609) * 4),(_Bool)((unsigned int)vsi->stat_offsets_loaded != 0U),& prev_es->rx_discards,& cur_es->rx_discards);
  #line 1139 
  ice_stat_update40(hw,(unsigned int)(((int)vsi_num + 393216) * 8),(_Bool)((unsigned int)vsi->stat_offsets_loaded != 0U),& prev_es->tx_bytes,& cur_es->tx_bytes);
  #line 1142 
  ice_stat_update40(hw,(unsigned int)(((int)vsi_num + 398336) * 8),(_Bool)((unsigned int)vsi->stat_offsets_loaded != 0U),& prev_es->tx_unicast,& cur_es->tx_unicast);
  #line 1145 
  ice_stat_update40(hw,(unsigned int)(((int)vsi_num + 399360) * 8),(_Bool)((unsigned int)vsi->stat_offsets_loaded != 0U),& prev_es->tx_multicast,& cur_es->tx_multicast);
  #line 1148 
  ice_stat_update40(hw,(unsigned int)(((int)vsi_num + 400384) * 8),(_Bool)((unsigned int)vsi->stat_offsets_loaded != 0U),& prev_es->tx_broadcast,& cur_es->tx_broadcast);
  #line 1151 
  ice_stat_update32(hw,(unsigned int)(((int)vsi_num + 804864) * 4),(_Bool)((unsigned int)vsi->stat_offsets_loaded != 0U),& prev_es->tx_errors,& cur_es->tx_errors);
  #line 1154 
  vsi->stat_offsets_loaded = (unsigned char)1U;
  #line 1155 
  return;
}

#line 1165  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_lib.c"
void ice_free_fltr_list(struct device *dev, struct list_head *h)
{
  #line 1169 
  void *__mptr;
  #line 1169 
  void *__mptr_0;
  #line 1167 
  struct ice_fltr_list_entry *e;
  #line 1167 
  struct ice_fltr_list_entry *tmp;
  #line 1169 
  __mptr = (void *)h->next;
  #line 1169 
  e = ((struct ice_fltr_list_entry *)__mptr);
  #line 1169 
  __mptr_0 = (void *)e->list_entry.next;
  #line 1170 
  tmp = ((struct ice_fltr_list_entry *)__mptr_0);
  #line 1169 
  while (& e->list_entry != h) {
    #line 1169 
    void *__mptr_1;
    #line 1170 
    list_del_0(& e->list_entry);
    #line 1171 
    devm_kfree(dev,(void *)e);
    #line 1169 
    e = tmp;
    #line 1169 
    __mptr_1 = (void *)tmp->list_entry.next;
    #line 1169 
    tmp = ((struct ice_fltr_list_entry *)__mptr_1);
  }
  #line 1173 
  return;
}

#line 1180  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_lib.c"
int ice_vsi_add_vlan(struct ice_vsi *vsi, u16 vid)
{
  #line 1182 
  struct ice_fltr_list_entry *tmp;
  #line 1185 
  enum ice_status status;
  #line 1186 
  struct device *dev;
  #line 1183 
  struct ice_pf *pf = vsi->back;
  #line 1184 
  struct list_head tmp_add_list = {.next = & tmp_add_list, .prev = & tmp_add_list};
  #line 1187 
  int err = 0;
  #line 1189 
  dev = & (pf->pdev)->dev;
  #line 1190 
  tmp = (struct ice_fltr_list_entry *)cif_devm_kzalloc_2(dev,56UL,3264U);
  #line 1191 
  if (tmp == (struct ice_fltr_list_entry *)0) 
                                              #line 1192 
                                              return -12;
  #line 1194 
  tmp->fltr_info.lkup_type = ICE_SW_LKUP_VLAN;
  #line 1195 
  tmp->fltr_info.fltr_act = ICE_FWD_TO_VSI;
  #line 1196 
  tmp->fltr_info.flag = (unsigned short)2U;
  #line 1197 
  tmp->fltr_info.src_id = ICE_SRC_ID_VSI;
  #line 1198 
  tmp->fltr_info.vsi_handle = vsi->idx;
  #line 1199 
  tmp->fltr_info.l_data.vlan.vlan_id = vid;
  #line 1201 
  INIT_LIST_HEAD_0(& tmp->list_entry);
  #line 1202 
  list_add_0(& tmp->list_entry,& tmp_add_list);
  #line 1204 
  status = ice_add_vlan(& pf->hw,& tmp_add_list);
  #line 1205 
  if (status != ICE_SUCCESS) {
    #line 1206 
    err = -19;
    #line 1207 
    _dev_err(dev,(char *)"Failure Adding VLAN %d on VSI %i\n",(int)vid,(int)vsi->vsi_num);
  }
  #line 1211 
  ice_free_fltr_list(dev,& tmp_add_list);
  #line 1212 
  return err;
}

#line 1222  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_lib.c"
int ice_vsi_kill_vlan(struct ice_vsi *vsi, u16 vid)
{
  #line 1224 
  struct ice_fltr_list_entry *list;
  #line 1227 
  enum ice_status status;
  #line 1228 
  struct device *dev;
  #line 1225 
  struct ice_pf *pf = vsi->back;
  #line 1226 
  struct list_head tmp_add_list = {.next = & tmp_add_list, .prev = & tmp_add_list};
  #line 1229 
  int err = 0;
  #line 1231 
  dev = & (pf->pdev)->dev;
  #line 1232 
  list = (struct ice_fltr_list_entry *)cif_devm_kzalloc_2(dev,56UL,3264U);
  #line 1233 
  if (list == (struct ice_fltr_list_entry *)0) 
                                               #line 1234 
                                               return -12;
  #line 1236 
  list->fltr_info.lkup_type = ICE_SW_LKUP_VLAN;
  #line 1237 
  list->fltr_info.vsi_handle = vsi->idx;
  #line 1238 
  list->fltr_info.fltr_act = ICE_FWD_TO_VSI;
  #line 1239 
  list->fltr_info.l_data.vlan.vlan_id = vid;
  #line 1240 
  list->fltr_info.flag = (unsigned short)2U;
  #line 1241 
  list->fltr_info.src_id = ICE_SRC_ID_VSI;
  #line 1243 
  INIT_LIST_HEAD_0(& list->list_entry);
  #line 1244 
  list_add_0(& list->list_entry,& tmp_add_list);
  #line 1246 
  status = ice_remove_vlan(& pf->hw,& tmp_add_list);
  #line 1247 
  if (status == ICE_ERR_DOES_NOT_EXIST) {
    #line 1248 
    bool branch;
    #line 1248 
    struct _ddebug __UNIQUE_ID_ddebug558 = {.modname = (char *)"ice", .function = (char *)"ice_vsi_kill_vlan", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_lib.c", .format = (char *)"Failed to remove VLAN %d on VSI %i, it does not exist, status: %d\n", .lineno = (unsigned int)1248U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 1248 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug558.key.dd_key_false.key,(_Bool)0);
    #line 1248 
    if ((long)((long)((int)branch != 0)) != 0L) 
                                                #line 1248 
                                                __dynamic_dev_dbg(& __UNIQUE_ID_ddebug558,dev,(char *)"Failed to remove VLAN %d on VSI %i, it does not exist, status: %d\n",(int)vid,(int)vsi->vsi_num,(int)status);
  }
  else 
    #line 1251 
    if (status != ICE_SUCCESS) {
      #line 1252 
      _dev_err(dev,(char *)"Error removing VLAN %d on vsi %i error: %d\n",(int)vid,(int)vsi->vsi_num,(int)status);
      #line 1255 
      err = -5;
    }
  #line 1258 
  ice_free_fltr_list(dev,& tmp_add_list);
  #line 1259 
  return err;
}

#line 1266  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_lib.c"
void ice_vsi_cfg_frame_size(struct ice_vsi *vsi)
{
  #line 1268 
  if (vsi->netdev == (struct net_device *)0) 
                                             #line 1268 
                                             goto _LOR;
  else {
    #line 1268 
    if ((int)test_bit(11L,(unsigned long *)(& (vsi->back)->flags)) != 0) {
      #line 1268 
      _LOR: {
              #line 1269 
              vsi->max_frame = (unsigned short)9728U;
              #line 1270 
              vsi->rx_buf_len = (unsigned short)2048U;
            }
    }
    else 
      #line 1272 
      if ((vsi->netdev)->mtu <= 1500U) {
        #line 1274 
        vsi->max_frame = (unsigned short)1536U;
        #line 1275 
        vsi->rx_buf_len = (unsigned short)1536U;
      }
      else {
        #line 1278 
        vsi->max_frame = (unsigned short)9728U;
        #line 1280 
        vsi->rx_buf_len = (unsigned short)3072U;
      }
  }
  #line 1282 
  return;
}

#line 1294  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_lib.c"
int ice_vsi_cfg_rxqs(struct ice_vsi *vsi)
{
  #line 1296 
  u16 i;
  #line 1298 
  if (vsi->type == (unsigned int)ICE_VSI_VF) 
                                             #line 1299 
                                             goto setup_rings;
  #line 1301 
  ice_vsi_cfg_frame_size(vsi);
  #line 1302 
  setup_rings: 
               #line 1302 
  ;
  #line 1304 
  i = (unsigned short)0U;
  #line 1304 
  while ((int)vsi->num_rxq > (int)i) {
    {
      #line 1305 
      int err;
      #line 1307 
      err = ice_setup_rx_ctx(*(vsi->rx_rings + (unsigned long)i));
      #line 1308 
      if (err != 0) {
        #line 1309 
        _dev_err(& ((vsi->back)->pdev)->dev,(char *)"ice_setup_rx_ctx failed for RxQ %d, err %d\n",(int)i,err);
        #line 1312 
        return err;
      }
    }
    #line 1304 
    i = (u16)((int)i + 1);
  }
  #line 1316 
  return 0;
}

#line 1328  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_lib.c"
static int ice_vsi_cfg_txqs(struct ice_vsi *vsi, struct ice_ring **rings)
{
  #line 1330 
  struct ice_aqc_add_tx_qgrp *qg_buf;
  #line 1331 
  u16 q_idx = (unsigned short)0U;
  #line 1332 
  int err = 0;
  #line 1334 
  qg_buf = (struct ice_aqc_add_tx_qgrp *)kzalloc_0(56UL,3264U);
  #line 1335 
  if (qg_buf == (struct ice_aqc_add_tx_qgrp *)0) 
                                                 #line 1336 
                                                 return -12;
  #line 1338 
  qg_buf->num_txqs = (unsigned char)1U;
  #line 1340 
  q_idx = (unsigned short)0U;
  #line 1340 
  while ((int)vsi->num_txq > (int)q_idx) {
    #line 1341 
    err = ice_vsi_cfg_txq(vsi,*(rings + (unsigned long)q_idx),qg_buf);
    #line 1342 
    if (err != 0) 
                  #line 1343 
                  goto err_cfg_txqs;
    #line 1340 
    q_idx = (u16)((int)q_idx + 1);
  }
  #line 1346 
  err_cfg_txqs: 
                #line 1346 
  ;
  #line 1347 
  kfree((void *)qg_buf);
  #line 1348 
  return err;
}

#line 1358  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_lib.c"
int ice_vsi_cfg_lan_txqs(struct ice_vsi *vsi)
{
  #line 1360 
  return ice_vsi_cfg_txqs(vsi,vsi->tx_rings);
}

#line 1370  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_lib.c"
int ice_vsi_cfg_xdp_txqs(struct ice_vsi *vsi)
{
  #line 1372 
  int ret;
  #line 1373 
  int i;
  #line 1375 
  ret = ice_vsi_cfg_txqs(vsi,vsi->xdp_rings);
  #line 1376 
  if (ret != 0) 
                #line 1377 
                return ret;
  #line 1379 
  i = 0;
  #line 1379 
  while ((int)vsi->num_xdp_txq > i) {
    #line 1380 
    (*(vsi->xdp_rings + (unsigned long)i))->xsk_umem = ice_xsk_umem(*(vsi->xdp_rings + (unsigned long)i));
    #line 1379 
    i ++;
  }
  #line 1382 
  return ret;
}

#line 1393  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_lib.c"
u32 ice_intrl_usec_to_reg(u8 intrl, u8 gran)
{
  #line 1395 
  u32 val = (unsigned int)((int)intrl / (int)gran);
  #line 1397 
  if (val != 0U) 
                 #line 1398 
                 return val | 64U;
  #line 1399 
  return 0U;
}

#line 1409  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_lib.c"
void ice_vsi_cfg_msix(struct ice_vsi *vsi)
{
  #line 1414 
  int i;
  #line 1414 
  int q;
  #line 1411 
  struct ice_pf *pf = vsi->back;
  #line 1412 
  struct ice_hw *hw = & pf->hw;
  #line 1413 
  u32 txq = 0U;
  #line 1413 
  u32 rxq = 0U;
  #line 1416 
  i = 0;
  #line 1416 
  while (vsi->num_q_vectors > i) {
    {
      #line 1417 
      struct ice_q_vector *q_vector = *(vsi->q_vectors + (unsigned long)i);
      #line 1418 
      u16 reg_idx = q_vector->reg_idx;
      #line 1420 
      ice_cfg_itr(hw,q_vector);
      #line 1422 
      ;
      #line 1422 
      writel(ice_intrl_usec_to_reg((unsigned char)((int)q_vector->intrl),
                            (unsigned char)((int)hw->intrl_gran)),(void *)(hw->hw_addr + (unsigned long)(((int)reg_idx + 354304) * 4)));
      #line 1436 
      q = 0;
      #line 1436 
      while ((int)q_vector->num_ring_tx > q) {
        #line 1437 
        ice_cfg_txq_interrupt(vsi,(unsigned short)((int)((unsigned short)txq)),(unsigned short)((int)reg_idx),(unsigned short)((int)q_vector->tx.itr_idx));
        #line 1439 
        txq ++;
        #line 1436 
        q ++;
      }
      #line 1442 
      q = 0;
      #line 1442 
      while ((int)q_vector->num_ring_rx > q) {
        #line 1443 
        ice_cfg_rxq_interrupt(vsi,(unsigned short)((int)((unsigned short)rxq)),(unsigned short)((int)reg_idx),(unsigned short)((int)q_vector->rx.itr_idx));
        #line 1445 
        rxq ++;
        #line 1442 
        q ++;
      }
    }
    #line 1416 
    i ++;
  }
  #line 1448 
  return;
}

#line 1454  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_lib.c"
int ice_vsi_manage_vlan_insertion(struct ice_vsi *vsi)
{
  #line 1457 
  struct ice_vsi_ctx *ctxt;
  #line 1458 
  enum ice_status status;
  #line 1456 
  struct ice_hw *hw = & (vsi->back)->hw;
  #line 1459 
  int ret = 0;
  #line 1461 
  ctxt = (struct ice_vsi_ctx *)kzalloc_0(384UL,3264U);
  #line 1462 
  if (ctxt == (struct ice_vsi_ctx *)0) 
                                       #line 1463 
                                       return -12;
  #line 1469 
  ctxt->info.vlan_flags = (unsigned char)3U;
  #line 1472 
  ctxt->info.vlan_flags = (unsigned char)((int)ctxt->info.vlan_flags | ((int)vsi->info.vlan_flags & 24));
  #line 1475 
  ctxt->info.valid_sections = (unsigned short)4U;
  #line 1477 
  status = ice_update_vsi(hw,(unsigned short)((int)vsi->idx),ctxt,(struct ice_sq_cd *)0);
  #line 1478 
  if (status != ICE_SUCCESS) {
    #line 1479 
    _dev_err(& ((vsi->back)->pdev)->dev,(char *)"update VSI for VLAN insert failed, err %d aq_err %d\n",(int)status,(unsigned int)hw->adminq.sq_last_status);
    #line 1481 
    ret = -5;
    #line 1482 
    goto out;
  }
  #line 1485 
  vsi->info.vlan_flags = ctxt->info.vlan_flags;
  #line 1486 
  out: 
       #line 1486 
  ;
  #line 1487 
  kfree((void *)ctxt);
  #line 1488 
  return ret;
}

#line 1496  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_lib.c"
int ice_vsi_manage_vlan_stripping(struct ice_vsi *vsi, bool ena)
{
  #line 1499 
  struct ice_vsi_ctx *ctxt;
  #line 1500 
  enum ice_status status;
  #line 1498 
  struct ice_hw *hw = & (vsi->back)->hw;
  #line 1501 
  int ret = 0;
  #line 1503 
  ctxt = (struct ice_vsi_ctx *)kzalloc_0(384UL,3264U);
  #line 1504 
  if (ctxt == (struct ice_vsi_ctx *)0) 
                                       #line 1505 
                                       return -12;
  #line 1511 
  if ((int)ena != 0) 
                     #line 1513 
                     ctxt->info.vlan_flags = (unsigned char)0U; else 
                                                                  #line 1516 
                                                                  ctxt->info.vlan_flags = (unsigned char)24U;
  #line 1519 
  ctxt->info.vlan_flags = (unsigned char)((unsigned int)ctxt->info.vlan_flags | 3U);
  #line 1521 
  ctxt->info.valid_sections = (unsigned short)4U;
  #line 1523 
  status = ice_update_vsi(hw,(unsigned short)((int)vsi->idx),ctxt,(struct ice_sq_cd *)0);
  #line 1524 
  if (status != ICE_SUCCESS) {
    #line 1525 
    _dev_err(& ((vsi->back)->pdev)->dev,(char *)"update VSI for VLAN strip failed, ena = %d err %d aq_err %d\n",(int)ena,(int)status,(unsigned int)hw->adminq.sq_last_status);
    #line 1527 
    ret = -5;
    #line 1528 
    goto out;
  }
  #line 1531 
  vsi->info.vlan_flags = ctxt->info.vlan_flags;
  #line 1532 
  out: 
       #line 1532 
  ;
  #line 1533 
  kfree((void *)ctxt);
  #line 1534 
  return ret;
}

#line 1543  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_lib.c"
int ice_vsi_start_rx_rings(struct ice_vsi *vsi)
{
  #line 1545 
  return ice_vsi_ctrl_rx_rings(vsi,(_Bool)1);
}

#line 1554  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_lib.c"
int ice_vsi_stop_rx_rings(struct ice_vsi *vsi)
{
  #line 1556 
  return ice_vsi_ctrl_rx_rings(vsi,(_Bool)0);
}

#line 1567  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_lib.c"
static int ice_vsi_stop_tx_rings(struct ice_vsi *vsi, enum ice_disq_rst_src rst_src, u16 rel_vmvf_num, struct ice_ring **rings)
{
  #line 1570 
  u16 q_idx;
  #line 1572 
  if ((unsigned int)vsi->num_txq > 1023U) 
                                          #line 1573 
                                          return -22;
  #line 1575 
  q_idx = (unsigned short)0U;
  #line 1575 
  while ((int)vsi->num_txq > (int)q_idx) {
    {
      #line 1577 
      int status;
      #line 1576 
      struct ice_txq_meta txq_meta = {.q_teid = 0U, .q_id = (unsigned short)0, .q_handle = (unsigned short)0, .vsi_idx = (unsigned short)0, .tc = (unsigned char)0};
      #line 1579 
      if (rings == (struct ice_ring **)0 || *(rings + (unsigned long)q_idx) == (struct ice_ring *)0) 
        #line 1580 
        return -22;
      #line 1582 
      ice_fill_txq_meta(vsi,*(rings + (unsigned long)q_idx),& txq_meta);
      #line 1583 
      status = ice_vsi_stop_tx_ring(vsi,rst_src,(unsigned short)((int)rel_vmvf_num),*(rings + (unsigned long)q_idx),& txq_meta);
      #line 1586 
      if (status != 0) 
                       #line 1587 
                       return status;
    }
    #line 1575 
    q_idx = (u16)((int)q_idx + 1);
  }
  #line 1590 
  return 0;
}

#line 1600  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_lib.c"
int ice_vsi_stop_lan_tx_rings(struct ice_vsi *vsi, enum ice_disq_rst_src rst_src, u16 rel_vmvf_num)
{
  #line 1603 
  return ice_vsi_stop_tx_rings(vsi,rst_src,(unsigned short)((int)rel_vmvf_num),
                            vsi->tx_rings);
}

#line 1610  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_lib.c"
int ice_vsi_stop_xdp_tx_rings(struct ice_vsi *vsi)
{
  #line 1612 
  return ice_vsi_stop_tx_rings(vsi,(enum ice_disq_rst_src)ICE_NO_RESET,
                            (unsigned short)0,vsi->xdp_rings);
}

#line 1623  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_lib.c"
int ice_cfg_vlan_pruning(struct ice_vsi *vsi, bool ena, bool vlan_promisc)
{
  #line 1625 
  struct ice_vsi_ctx *ctxt;
  #line 1626 
  struct ice_pf *pf;
  #line 1627 
  int status;
  #line 1629 
  if (vsi == (struct ice_vsi *)0) 
                                  #line 1630 
                                  return -22;
  #line 1632 
  pf = vsi->back;
  #line 1633 
  ctxt = (struct ice_vsi_ctx *)kzalloc_0(384UL,3264U);
  #line 1634 
  if (ctxt == (struct ice_vsi_ctx *)0) 
                                       #line 1635 
                                       return -12;
  #line 1637 
  ctxt->info = vsi->info;
  #line 1639 
  if ((int)ena != 0) {
    #line 1640 
    ctxt->info.sec_flags = (unsigned char)((unsigned int)ctxt->info.sec_flags | 16U);
    #line 1643 
    ctxt->info.sw_flags2 = (unsigned char)((unsigned int)ctxt->info.sw_flags2 | 1U);
  }
  else {
    #line 1645 
    ctxt->info.sec_flags = (unsigned char)((unsigned int)ctxt->info.sec_flags & 239U);
    #line 1648 
    ctxt->info.sw_flags2 = (unsigned char)((unsigned int)ctxt->info.sw_flags2 & 254U);
  }
  #line 1651 
  if (! vlan_promisc) 
                      #line 1652 
                      ctxt->info.valid_sections = (unsigned short)3U;
  #line 1656 
  status = (int)ice_update_vsi(& pf->hw,(unsigned short)((int)vsi->idx),ctxt,
                       (struct ice_sq_cd *)0);
  #line 1657 
  if (status != 0) {
    #line 1658 
    char *tmp_1;
    #line 1658 
    ;
    #line 1658 
    ;
    #line 1658 
    ;
    #line 1658 
    ;
    #line 1658 
    if ((int)ena != 0) 
                       #line 1658 
                       tmp_1 = (char *)"En"; else 
                                                  #line 1658 
                                                  tmp_1 = (char *)"Dis";
    #line 1658 
    ;
    #line 1658 
    netdev_err(vsi->netdev,(char *)"%sabling VLAN pruning on VSI handle: %d, VSI HW ID: %d failed, err = %d, aq_err = %d\n",tmp_1,(int)vsi->idx,(int)vsi->vsi_num,status,(unsigned int)pf->hw.adminq.sq_last_status);
    #line 1661 
    goto err_out;
  }
  #line 1664 
  vsi->info.sec_flags = ctxt->info.sec_flags;
  #line 1665 
  vsi->info.sw_flags2 = ctxt->info.sw_flags2;
  #line 1667 
  kfree((void *)ctxt);
  #line 1668 
  return 0;
  #line 1670 
  err_out: 
           #line 1670 
  ;
  #line 1671 
  kfree((void *)ctxt);
  #line 1672 
  return -5;
}

#line 1675  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_lib.c"
static void ice_vsi_set_tc_cfg(struct ice_vsi *vsi)
{
  #line 1677 
  struct ice_dcbx_cfg *cfg = & (vsi->port_info)->local_dcbx_cfg;
  #line 1679 
  vsi->tc_cfg.ena_tc = ice_dcb_get_ena_tc(cfg);
  #line 1680 
  vsi->tc_cfg.numtc = ice_dcb_get_num_tc(cfg);
  #line 1681 
  return;
}

#line 1688  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_lib.c"
static int ice_vsi_set_q_vectors_reg_idx(struct ice_vsi *vsi)
{
  #line 1690 
  u16 i;
  #line 1692 
  if (vsi == (struct ice_vsi *)0 || vsi->q_vectors == (struct ice_q_vector **)0) 
    #line 1693 
    return -22;
  #line 1695 
  i = (unsigned short)0U;
  #line 1695 
  while ((int)i < vsi->num_q_vectors) {
    {
      #line 1696 
      struct ice_q_vector *q_vector = *(vsi->q_vectors + (unsigned long)i);
      #line 1698 
      if (q_vector == (struct ice_q_vector *)0) {
        #line 1699 
        _dev_err(& ((vsi->back)->pdev)->dev,(char *)"Failed to set reg_idx on q_vector %d VSI %d\n",(int)i,(int)vsi->vsi_num);
        #line 1702 
        goto clear_reg_idx;
      }
      #line 1705 
      if (vsi->type == (unsigned int)ICE_VSI_VF) {
        #line 1706 
        struct ice_vf *vf = (vsi->back)->vf + (unsigned long)vsi->vf_id;
        #line 1708 
        q_vector->reg_idx = (unsigned short)ice_calc_vf_reg_idx(vf,q_vector);
      }
      else 
           #line 1710 
           q_vector->reg_idx = (unsigned short)((int)q_vector->v_idx + (int)((unsigned short)vsi->base_vector));
    }
    #line 1695 
    i = (u16)((int)i + 1);
  }
  #line 1715 
  return 0;
  #line 1717 
  clear_reg_idx: 
                 #line 1717 
  ;
  #line 1718 
  i = (unsigned short)0U;
  #line 1718 
  while ((int)i < vsi->num_q_vectors) {
    {
      #line 1719 
      struct ice_q_vector *q_vector_0 = *(vsi->q_vectors + (unsigned long)i);
      #line 1721 
      if (q_vector_0 != (struct ice_q_vector *)0) 
                                                  #line 1722 
                                                  q_vector_0->reg_idx = (unsigned short)0U;
    }
    #line 1718 
    i = (u16)((int)i + 1);
  }
  #line 1725 
  return -22;
}

#line 1734  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_lib.c"
static void ice_vsi_add_rem_eth_mac(struct ice_vsi *vsi, bool add_rule)
{
  #line 1736 
  struct ice_fltr_list_entry *list;
  #line 1739 
  enum ice_status status;
  #line 1740 
  struct device *dev;
  #line 1737 
  struct ice_pf *pf = vsi->back;
  #line 1738 
  struct list_head tmp_add_list = {.next = & tmp_add_list, .prev = & tmp_add_list};
  #line 1742 
  dev = & (pf->pdev)->dev;
  #line 1743 
  list = (struct ice_fltr_list_entry *)cif_devm_kzalloc_2(dev,56UL,3264U);
  #line 1744 
  if (list == (struct ice_fltr_list_entry *)0) 
                                               #line 1745 
                                               return;
  #line 1747 
  list->fltr_info.lkup_type = ICE_SW_LKUP_ETHERTYPE;
  #line 1748 
  list->fltr_info.fltr_act = ICE_DROP_PACKET;
  #line 1749 
  list->fltr_info.flag = (unsigned short)2U;
  #line 1750 
  list->fltr_info.src_id = ICE_SRC_ID_VSI;
  #line 1751 
  list->fltr_info.vsi_handle = vsi->idx;
  #line 1752 
  list->fltr_info.l_data.ethertype_mac.ethertype = vsi->ethtype;
  #line 1754 
  INIT_LIST_HEAD_0(& list->list_entry);
  #line 1755 
  list_add_0(& list->list_entry,& tmp_add_list);
  #line 1757 
  if ((int)add_rule != 0) 
                          #line 1758 
                          status = ice_add_eth_mac(& pf->hw,& tmp_add_list); else 
                                                                    #line 1760 
                                                                    status = ice_remove_eth_mac(& pf->hw,& tmp_add_list);
  #line 1762 
  if (status != ICE_SUCCESS) 
                             #line 1763 
                             _dev_err(dev,(char *)"Failure Adding or Removing Ethertype on VSI %i error: %d\n",(int)vsi->vsi_num,(int)status);
  #line 1767 
  ice_free_fltr_list(dev,& tmp_add_list);
  #line 1768 
  return;
}

#line 1776  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_lib.c"
void ice_cfg_sw_lldp(struct ice_vsi *vsi, bool tx, bool create)
{
  #line 1778 
  struct ice_fltr_list_entry *list;
  #line 1781 
  enum ice_status status;
  #line 1782 
  struct device *dev;
  #line 1779 
  struct ice_pf *pf = vsi->back;
  #line 1780 
  struct list_head tmp_add_list = {.next = & tmp_add_list, .prev = & tmp_add_list};
  #line 1784 
  dev = & (pf->pdev)->dev;
  #line 1785 
  list = (struct ice_fltr_list_entry *)cif_devm_kzalloc_2(dev,56UL,3264U);
  #line 1786 
  if (list == (struct ice_fltr_list_entry *)0) 
                                               #line 1787 
                                               return;
  #line 1789 
  list->fltr_info.lkup_type = ICE_SW_LKUP_ETHERTYPE;
  #line 1790 
  list->fltr_info.vsi_handle = vsi->idx;
  #line 1791 
  list->fltr_info.l_data.ethertype_mac.ethertype = (unsigned short)35020U;
  #line 1793 
  if ((int)tx != 0) {
    #line 1794 
    list->fltr_info.fltr_act = ICE_DROP_PACKET;
    #line 1795 
    list->fltr_info.flag = (unsigned short)2U;
    #line 1796 
    list->fltr_info.src_id = ICE_SRC_ID_VSI;
  }
  else {
    #line 1798 
    list->fltr_info.fltr_act = ICE_FWD_TO_VSI;
    #line 1799 
    list->fltr_info.flag = (unsigned short)1U;
    #line 1800 
    list->fltr_info.src_id = ICE_SRC_ID_LPORT;
  }
  #line 1803 
  INIT_LIST_HEAD_0(& list->list_entry);
  #line 1804 
  list_add_0(& list->list_entry,& tmp_add_list);
  #line 1806 
  if ((int)create != 0) 
                        #line 1807 
                        status = ice_add_eth_mac(& pf->hw,& tmp_add_list); else 
                                                                    #line 1809 
                                                                    status = ice_remove_eth_mac(& pf->hw,& tmp_add_list);
  #line 1811 
  if (status != ICE_SUCCESS) {
    #line 1812 
    char *tmp_0;
    #line 1812 
    char *tmp_1;
    #line 1812 
    ;
    #line 1812 
    ;
    #line 1812 
    if ((int)tx != 0) 
                      #line 1812 
                      tmp_0 = (char *)"TX"; else 
                                                 #line 1812 
                                                 tmp_0 = (char *)"RX";
    #line 1812 
    if ((int)create != 0) 
                          #line 1812 
                          tmp_1 = (char *)"adding"; else 
                                                         #line 1812 
                                                         tmp_1 = (char *)"removing";
    #line 1812 
    ;
    #line 1812 
    _dev_err(dev,(char *)"Fail %s %s LLDP rule on VSI %i error: %d\n",tmp_1,tmp_0,(int)vsi->vsi_num,(int)status);
  }
  #line 1816 
  ice_free_fltr_list(dev,& tmp_add_list);
  #line 1817 
  return;
}

#line 1834  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_lib.c"
struct ice_vsi *ice_vsi_setup(struct ice_pf *pf, struct ice_port_info *pi, enum ice_vsi_type type, u16 vf_id)
{
  #line 1839 
  enum ice_status status;
  #line 1840 
  struct ice_vsi *vsi;
  #line 1841 
  int ret;
  #line 1841 
  int i;
  #line 1837 
  u16 max_txqs[8U] = {(unsigned short)0U};
  #line 1838 
  struct device *dev = & (pf->pdev)->dev;
  #line 1843 
  if (type == (unsigned int)ICE_VSI_VF) 
                                        #line 1844 
                                        vsi = ice_vsi_alloc(pf,type,(unsigned short)((int)vf_id)); else 
                                                                    #line 1846 
                                                                    vsi = ice_vsi_alloc(pf,type,(unsigned short)256);
  #line 1848 
  if (vsi == (struct ice_vsi *)0) {
    #line 1849 
    _dev_err(dev,(char *)"could not allocate VSI\n");
    #line 1850 
    return (struct ice_vsi *)0;
  }
  #line 1853 
  vsi->port_info = pi;
  #line 1854 
  vsi->vsw = pf->first_sw;
  #line 1855 
  if (vsi->type == (unsigned int)ICE_VSI_PF) 
                                             #line 1856 
                                             vsi->ethtype = (unsigned short)34824U;
  #line 1858 
  if (vsi->type == (unsigned int)ICE_VSI_VF) 
                                             #line 1859 
                                             vsi->vf_id = (short)vf_id;
  #line 1861 
  if (ice_vsi_get_qs(vsi) != 0) {
    #line 1862 
    _dev_err(dev,(char *)"Failed to allocate queues. vsi->idx = %d\n",(int)vsi->idx);
    #line 1864 
    goto unroll_get_qs;
  }
  #line 1868 
  ice_vsi_set_rss_params(vsi);
  #line 1871 
  ice_vsi_set_tc_cfg(vsi);
  #line 1874 
  ret = ice_vsi_init(vsi,(_Bool)1);
  #line 1875 
  if (ret != 0) 
                #line 1876 
                goto unroll_get_qs;
  #line 1878 
  switch ((unsigned int)vsi->type) {
    #line 1879 
    case (unsigned int)0: 
                          #line 1879 
    ;
    #line 1880 
    ret = ice_vsi_alloc_q_vectors(vsi);
    #line 1881 
    if (ret != 0) 
                  #line 1882 
                  goto unroll_vsi_init;
    #line 1884 
    ret = ice_vsi_setup_vector_base(vsi);
    #line 1885 
    if (ret != 0) 
                  #line 1886 
                  goto unroll_alloc_q_vector;
    #line 1888 
    ret = ice_vsi_set_q_vectors_reg_idx(vsi);
    #line 1889 
    if (ret != 0) 
                  #line 1890 
                  goto unroll_vector_base;
    #line 1892 
    ret = ice_vsi_alloc_rings(vsi);
    #line 1893 
    if (ret != 0) 
                  #line 1894 
                  goto unroll_vector_base;
    #line 1896 
    ice_vsi_map_rings_to_vectors(vsi);
    #line 1902 
    if ((int)test_bit(1L,(unsigned long *)(& pf->flags)) != 0) 
                                                               #line 1903 
                                                               ice_vsi_cfg_rss_lut_key(vsi);
    #line 1904 
    break;
    #line 1905 
    case (unsigned int)1: 
                          #line 1905 
    ;
    #line 1911 
    ret = ice_vsi_alloc_q_vectors(vsi);
    #line 1912 
    if (ret != 0) 
                  #line 1913 
                  goto unroll_vsi_init;
    #line 1915 
    ret = ice_vsi_alloc_rings(vsi);
    #line 1916 
    if (ret != 0) 
                  #line 1917 
                  goto unroll_alloc_q_vector;
    #line 1919 
    ret = ice_vsi_set_q_vectors_reg_idx(vsi);
    #line 1920 
    if (ret != 0) 
                  #line 1921 
                  goto unroll_vector_base;
    #line 1927 
    if ((int)test_bit(1L,(unsigned long *)(& pf->flags)) != 0) 
                                                               #line 1928 
                                                               ice_vsi_cfg_rss_lut_key(vsi);
    #line 1929 
    break;
    #line 1930 
    case (unsigned int)6: 
                          #line 1930 
    ;
    #line 1931 
    ret = ice_vsi_alloc_rings(vsi);
    #line 1932 
    if (ret != 0) 
                  #line 1933 
                  goto unroll_vsi_init;
    #line 1934 
    break;
    #line 1935 
    default: 
             #line 1935 
    ;
    #line 1937 
    goto unroll_vsi_init;
  }
  #line 1941 
  i = 0;
  #line 1941 
  while ((int)vsi->tc_cfg.numtc > i) {
    #line 1942 
    max_txqs[i] = vsi->alloc_txq;
    #line 1941 
    i ++;
  }
  #line 1944 
  status = ice_cfg_vsi_lan(vsi->port_info,(unsigned short)((int)vsi->idx),(unsigned char)((int)vsi->tc_cfg.ena_tc),(u16 *)(& max_txqs));
  #line 1946 
  if (status != ICE_SUCCESS) {
    #line 1947 
    _dev_err(dev,(char *)"VSI %d failed lan queue config, error %d\n",(int)vsi->vsi_num,(int)status);
    #line 1949 
    goto unroll_vector_base;
  }
  #line 1961 
  if (! ice_is_safe_mode(pf)) 
    #line 1962 
    if (vsi->type == (unsigned int)ICE_VSI_PF) {
      #line 1963 
      ice_vsi_add_rem_eth_mac(vsi,(_Bool)1);
      #line 1966 
      ice_cfg_sw_lldp(vsi,(_Bool)1,(_Bool)1);
    }
  #line 1969 
  return vsi;
  #line 1971 
  unroll_vector_base: 
                      #line 1971 
  ;
  #line 1973 
  ice_free_res(pf->irq_tracker,(unsigned short)((int)((unsigned short)vsi->base_vector)),(unsigned short)((int)vsi->idx));
  #line 1974 
  pf->num_avail_sw_msix += (unsigned int)vsi->num_q_vectors;
  #line 1975 
  unroll_alloc_q_vector: 
                         #line 1975 
  ;
  #line 1976 
  ice_vsi_free_q_vectors(vsi);
  #line 1977 
  unroll_vsi_init: 
                   #line 1977 
  ;
  #line 1978 
  ice_vsi_delete(vsi);
  #line 1979 
  unroll_get_qs: 
                 #line 1979 
  ;
  #line 1980 
  ice_vsi_put_qs(vsi);
  #line 1981 
  ice_vsi_clear(vsi);
  #line 1983 
  return (struct ice_vsi *)0;
}

#line 1990  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_lib.c"
static void ice_vsi_release_msix(struct ice_vsi *vsi)
{
  #line 1996 
  int i;
  #line 1996 
  int q;
  #line 1992 
  struct ice_pf *pf = vsi->back;
  #line 1993 
  struct ice_hw *hw = & pf->hw;
  #line 1994 
  u32 txq = 0U;
  #line 1995 
  u32 rxq = 0U;
  #line 1998 
  i = 0;
  #line 1998 
  while (vsi->num_q_vectors > i) {
    {
      #line 1999 
      struct ice_q_vector *q_vector = *(vsi->q_vectors + (unsigned long)i);
      #line 2000 
      u16 reg_idx = q_vector->reg_idx;
      #line 2002 
      writel(0U,(void *)(hw->hw_addr + (unsigned long)(((int)reg_idx + 348160) * 4)));
      #line 2003 
      writel(0U,(void *)(hw->hw_addr + (unsigned long)(((int)reg_idx + 350208) * 4)));
      #line 2004 
      q = 0;
      #line 2004 
      while ((int)q_vector->num_ring_tx > q) {
        {
          #line 2005 
          writel(0U,(void *)(hw->hw_addr + (unsigned long)(((int)*(vsi->txq_map + (unsigned long)txq) + 327680) * 4)));
          #line 2006 
          if ((int)ice_is_xdp_ena_vsi(vsi) != 0) {
            #line 2007 
            u32 xdp_txq = (unsigned int)vsi->num_xdp_txq + txq;
            #line 2009 
            writel(0U,(void *)(hw->hw_addr + (unsigned long)(((int)*(vsi->txq_map + (unsigned long)xdp_txq) + 327680) * 4)));
          }
          #line 2011 
          txq ++;
        }
        #line 2004 
        q ++;
      }
      #line 2014 
      q = 0;
      #line 2014 
      while ((int)q_vector->num_ring_rx > q) {
        #line 2015 
        writel(0U,(void *)(hw->hw_addr + (unsigned long)(((int)*(vsi->rxq_map + (unsigned long)rxq) + 344064) * 4)));
        #line 2016 
        rxq ++;
        #line 2014 
        q ++;
      }
    }
    #line 1998 
    i ++;
  }
  #line 2020 
  readl((void *)(hw->hw_addr + 745772U));
  #line 2021 
  return;
}

#line 2027  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_lib.c"
void ice_vsi_free_irq(struct ice_vsi *vsi)
{
  #line 2031 
  int i;
  #line 2029 
  struct ice_pf *pf = vsi->back;
  #line 2030 
  int base = vsi->base_vector;
  #line 2033 
  if (vsi->q_vectors == (struct ice_q_vector **)0 || (unsigned int)vsi->irqs_ready == 0U) 
    #line 2034 
    return;
  #line 2036 
  ice_vsi_release_msix(vsi);
  #line 2037 
  if (vsi->type == (unsigned int)ICE_VSI_VF) 
                                             #line 2038 
                                             return;
  #line 2040 
  vsi->irqs_ready = (unsigned char)0U;
  #line 2041 
  i = 0;
  #line 2041 
  while (vsi->num_q_vectors > i) {
    {
      #line 2043 
      int irq_num;
      #line 2042 
      u16 vector = (unsigned short)((int)((unsigned short)i) + (int)((unsigned short)base));
      #line 2045 
      irq_num = (int)(pf->msix_entries + (unsigned long)vector)->vector;
      #line 2048 
      if (*(vsi->q_vectors + (unsigned long)i) == (struct ice_q_vector *)0 || (unsigned int)(*(vsi->q_vectors + (unsigned long)i))->num_ring_tx == 0U && (unsigned int)(*(vsi->q_vectors + (unsigned long)i))->num_ring_rx == 0U) 
        #line 2051 
        goto __Cont;
      #line 2054 
      irq_set_affinity_notifier((unsigned int)irq_num,(struct irq_affinity_notify *)0);
      #line 2057 
      irq_set_affinity_hint((unsigned int)irq_num,(struct cpumask *)0);
      #line 2058 
      synchronize_irq((unsigned int)irq_num);
      #line 2059 
      cif_devm_free_irq(& (pf->pdev)->dev,(unsigned int)irq_num,(void *)*(vsi->q_vectors + (unsigned long)i));
    }
    #line 2041 
    __Cont: 
            #line 2041 
    i ++;
  }
  #line 2061 
  return;
}

#line 2067  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_lib.c"
void ice_vsi_free_tx_rings(struct ice_vsi *vsi)
{
  #line 2069 
  int i;
  #line 2071 
  if (vsi->tx_rings == (struct ice_ring **)0) 
                                              #line 2072 
                                              return;
  #line 2074 
  i = 0;
  #line 2074 
  while ((int)vsi->num_txq > i) {
    #line 2075 
    if (*(vsi->tx_rings + (unsigned long)i) != (struct ice_ring *)0 && (*(vsi->tx_rings + (unsigned long)i))->desc != (void *)0) 
      #line 2076 
      ice_free_tx_ring(*(vsi->tx_rings + (unsigned long)i));
    #line 2074 
    i ++;
  }
  #line 2077 
  return;
}

#line 2083  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_lib.c"
void ice_vsi_free_rx_rings(struct ice_vsi *vsi)
{
  #line 2085 
  int i;
  #line 2087 
  if (vsi->rx_rings == (struct ice_ring **)0) 
                                              #line 2088 
                                              return;
  #line 2090 
  i = 0;
  #line 2090 
  while ((int)vsi->num_rxq > i) {
    #line 2091 
    if (*(vsi->rx_rings + (unsigned long)i) != (struct ice_ring *)0 && (*(vsi->rx_rings + (unsigned long)i))->desc != (void *)0) 
      #line 2092 
      ice_free_rx_ring(*(vsi->rx_rings + (unsigned long)i));
    #line 2090 
    i ++;
  }
  #line 2093 
  return;
}

#line 2099  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_lib.c"
void ice_vsi_close(struct ice_vsi *vsi)
{
  #line 2101 
  if (! test_and_clear_bit(1L,(unsigned long *)(& vsi->state))) 
                                                                #line 2102 
                                                                ice_down(vsi);
  #line 2104 
  ice_vsi_free_irq(vsi);
  #line 2105 
  ice_vsi_free_tx_rings(vsi);
  #line 2106 
  ice_vsi_free_rx_rings(vsi);
  #line 2107 
  return;
}

#line 2114  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_lib.c"
int ice_ena_vsi(struct ice_vsi *vsi, bool locked)
{
  #line 2116 
  int err = 0;
  #line 2118 
  if (! test_bit(2L,(unsigned long *)(& vsi->state))) 
                                                      #line 2119 
                                                      return 0;
  #line 2121 
  cif_clear_bit_4(2L,(unsigned long *)(& vsi->state));
  #line 2123 
  if (vsi->netdev != (struct net_device *)0 && vsi->type == (unsigned int)ICE_VSI_PF) {
    #line 2124 
    if ((int)netif_running(vsi->netdev) != 0) {
      #line 2125 
      if (! locked) 
                    #line 2126 
                    rtnl_lock();
      #line 2128 
      err = ice_open(vsi->netdev);
      #line 2130 
      if (! locked) 
                    #line 2131 
                    rtnl_unlock();
    }
  }
  #line 2135 
  return err;
}

#line 2143  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_lib.c"
void ice_dis_vsi(struct ice_vsi *vsi, bool locked)
{
  #line 2145 
  if ((int)test_bit(1L,(unsigned long *)(& vsi->state)) != 0) 
                                                              #line 2146 
                                                              return;
  #line 2148 
  cif_set_bit_4(2L,(unsigned long *)(& vsi->state));
  #line 2150 
  if (vsi->type == (unsigned int)ICE_VSI_PF && vsi->netdev != (struct net_device *)0) {
    #line 2151 
    if ((int)netif_running(vsi->netdev) != 0) {
      #line 2152 
      if (! locked) 
                    #line 2153 
                    rtnl_lock();
      #line 2155 
      ice_stop(vsi->netdev);
      #line 2157 
      if (! locked) 
                    #line 2158 
                    rtnl_unlock();
    }
    else 
         #line 2160 
         ice_vsi_close(vsi);
  }
  #line 2161 
  return;
}

#line 2173  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_lib.c"
int ice_free_res(struct ice_res_tracker *res, u16 index, u16 id)
{
  #line 2176 
  int i;
  #line 2175 
  int count = 0;
  #line 2178 
  if (res == (struct ice_res_tracker *)0 || (int)res->end <= (int)index) 
    #line 2179 
    return -22;
  #line 2181 
  id = (unsigned short)((unsigned int)id | 32768U);
  #line 2182 
  i = (int)index;
  #line 2182 
  while ((int)res->end > i && (int)res->list[i] == (int)id) {
    #line 2183 
    res->list[i] = (unsigned short)0U;
    #line 2184 
    count ++;
    #line 2182 
    i ++;
  }
  #line 2187 
  return count;
}

#line 2198  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_lib.c"
static int ice_search_res(struct ice_res_tracker *res, u16 needed, u16 id)
{
  #line 2200 
  int start = 0;
  #line 2200 
  int end = 0;
  #line 2202 
  if ((int)res->end < (int)needed) 
                                   #line 2203 
                                   return -12;
  #line 2205 
  id = (unsigned short)((unsigned int)id | 32768U);
  #line 2207 
  while (1) {
    {
      #line 2209 
      int tmp;
      #line 2209 
      tmp = end;
      #line 2209 
      end ++;
      #line 2209 
      ;
      #line 2209 
      if (((int)res->list[tmp] & 32768) != 0) {
        #line 2210 
        start = end;
        #line 2211 
        if ((int)needed + start > (int)res->end) 
                                                 #line 2212 
                                                 break;
      }
      #line 2215 
      if ((int)needed + start == end) {
        #line 2216 
        int i = start;
        #line 2219 
        while (i != end) {
          #line 2220 
          int tmp_0;
          #line 2220 
          tmp_0 = i;
          #line 2220 
          i ++;
          #line 2220 
          res->list[tmp_0] = id;
        }
        #line 2222 
        return start;
      }
    }
    #line 2224 
    if (! ((int)res->end > end)) 
                                 #line 2207 
                                 break;
  }
  #line 2226 
  return -12;
}

#line 2239  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_lib.c"
int ice_get_res(struct ice_pf *pf, struct ice_res_tracker *res, u16 needed, u16 id)
{
  #line 2241 
  if (res == (struct ice_res_tracker *)0 || pf == (struct ice_pf *)0) 
    #line 2242 
    return -22;
  #line 2244 
  if (((unsigned int)needed == 0U || (int)res->num_entries < (int)needed) || (int)id < 0) {
    #line 2245 
    _dev_err(& (pf->pdev)->dev,(char *)"param err: needed=%d, num_entries = %d id=0x%04x\n",(int)needed,(int)res->num_entries,(int)id);
    #line 2248 
    return -22;
  }
  #line 2251 
  return ice_search_res(res,(unsigned short)((int)needed),
                     (unsigned short)((int)id));
}

#line 2258  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_lib.c"
void ice_vsi_dis_irq(struct ice_vsi *vsi)
{
  #line 2263 
  u32 val;
  #line 2264 
  int i;
  #line 2260 
  int base = vsi->base_vector;
  #line 2261 
  struct ice_pf *pf = vsi->back;
  #line 2262 
  struct ice_hw *hw = & pf->hw;
  #line 2267 
  if (vsi->tx_rings != (struct ice_ring **)0) {
    #line 2268 
    i = 0;
    #line 2268 
    while ((int)vsi->num_txq > i) {
      #line 2269 
      if (*(vsi->tx_rings + (unsigned long)i) != (struct ice_ring *)0) {
        #line 2270 
        u16 reg;
        #line 2272 
        reg = (*(vsi->tx_rings + (unsigned long)i))->reg_idx;
        #line 2273 
        val = readl((void *)(hw->hw_addr + (unsigned long)(((int)reg + 327680) * 4)));
        #line 2274 
        val &= 3221225471U;
        #line 2275 
        writel(val,(void *)(hw->hw_addr + (unsigned long)(((int)reg + 327680) * 4)));
      }
      #line 2268 
      i ++;
    }
  }
  #line 2280 
  if (vsi->rx_rings != (struct ice_ring **)0) {
    #line 2281 
    i = 0;
    #line 2281 
    while ((int)vsi->num_rxq > i) {
      #line 2282 
      if (*(vsi->rx_rings + (unsigned long)i) != (struct ice_ring *)0) {
        #line 2283 
        u16 reg_0;
        #line 2285 
        reg_0 = (*(vsi->rx_rings + (unsigned long)i))->reg_idx;
        #line 2286 
        val = readl((void *)(hw->hw_addr + (unsigned long)(((int)reg_0 + 344064) * 4)));
        #line 2287 
        val &= 3221225471U;
        #line 2288 
        writel(val,(void *)(hw->hw_addr + (unsigned long)(((int)reg_0 + 344064) * 4)));
      }
      #line 2281 
      i ++;
    }
  }
  #line 2294 
  i = 0;
  #line 2294 
  while (vsi->num_q_vectors > i) {
    #line 2295 
    if (*(vsi->q_vectors + (unsigned long)i) == (struct ice_q_vector *)0) 
      #line 2296 
      goto __Cont;
    #line 2297 
    writel(0U,(void *)(hw->hw_addr + (unsigned long)(((int)(*(vsi->q_vectors + (unsigned long)i))->reg_idx + 360448) * 4)));
    #line 2294 
    __Cont: 
            #line 2294 
    i ++;
  }
  #line 2300 
  readl((void *)(hw->hw_addr + 745772U));
  #line 2303 
  if (vsi->type == (unsigned int)ICE_VSI_VF) 
                                             #line 2304 
                                             return;
  #line 2306 
  i = 0;
  #line 2306 
  while (vsi->num_q_vectors > i) {
    #line 2307 
    synchronize_irq((pf->msix_entries + (unsigned long)(i + base))->vector);
    #line 2306 
    i ++;
  }
  #line 2308 
  return;
}

#line 2314  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_lib.c"
void ice_napi_del(struct ice_vsi *vsi)
{
  #line 2316 
  int v_idx;
  #line 2318 
  if (vsi->netdev == (struct net_device *)0) 
                                             #line 2319 
                                             return;
  #line 2321 
  v_idx = 0;
  #line 2321 
  while (vsi->num_q_vectors > v_idx) {
    #line 2322 
    netif_napi_del(& (*(vsi->q_vectors + (unsigned long)v_idx))->napi);
    #line 2321 
    v_idx ++;
  }
  #line 2323 
  return;
}

#line 2331  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_lib.c"
int ice_vsi_release(struct ice_vsi *vsi)
{
  #line 2333 
  struct ice_pf *pf;
  #line 2335 
  if (vsi->back == (struct ice_pf *)0) 
                                       #line 2336 
                                       return -19;
  #line 2337 
  pf = vsi->back;
  #line 2345 
  if (vsi->netdev != (struct net_device *)0) {
    #line 2345 
    if (! ice_is_reset_in_progress((unsigned long *)(& pf->state))) 
                                                                    #line 2346 
                                                                    cif_unregister_netdev(vsi->netdev);
  }
  #line 2348 
  if ((int)test_bit(1L,(unsigned long *)(& pf->flags)) != 0) 
                                                             #line 2349 
                                                             ice_rss_clean(vsi);
  #line 2352 
  if (vsi->type != (unsigned int)ICE_VSI_LB) 
                                             #line 2353 
                                             ice_vsi_dis_irq(vsi);
  #line 2354 
  ice_vsi_close(vsi);
  #line 2361 
  if (vsi->type != (unsigned int)ICE_VSI_VF) {
    #line 2363 
    ice_free_res(pf->irq_tracker,(unsigned short)((int)((unsigned short)vsi->base_vector)),(unsigned short)((int)vsi->idx));
    #line 2364 
    pf->num_avail_sw_msix += (unsigned int)vsi->num_q_vectors;
  }
  #line 2367 
  if (! ice_is_safe_mode(pf)) 
    #line 2368 
    if (vsi->type == (unsigned int)ICE_VSI_PF) {
      #line 2369 
      ice_vsi_add_rem_eth_mac(vsi,(_Bool)0);
      #line 2370 
      ice_cfg_sw_lldp(vsi,(_Bool)1,(_Bool)0);
      #line 2374 
      if (! test_bit(9L,(unsigned long *)(& pf->flags))) 
                                                         #line 2375 
                                                         ice_cfg_sw_lldp(vsi,(_Bool)0,(_Bool)0);
    }
  #line 2379 
  ice_remove_vsi_fltr(& pf->hw,(unsigned short)((int)vsi->idx));
  #line 2380 
  ice_rm_vsi_lan_cfg(vsi->port_info,(unsigned short)((int)vsi->idx));
  #line 2381 
  ice_vsi_delete(vsi);
  #line 2382 
  ice_vsi_free_q_vectors(vsi);
  #line 2385 
  if (vsi->netdev != (struct net_device *)0) {
    #line 2385 
    if ((int)test_bit(1L,(unsigned long *)(& vsi->state)) != 0) {
      #line 2386 
      cif_free_netdev(vsi->netdev);
      #line 2387 
      vsi->netdev = (struct net_device *)0;
    }
  }
  #line 2390 
  ice_vsi_clear_rings(vsi);
  #line 2392 
  ice_vsi_put_qs(vsi);
  #line 2398 
  if (! ice_is_reset_in_progress((unsigned long *)(& pf->state))) 
                                                                  #line 2399 
                                                                  ice_vsi_clear(vsi);
  #line 2401 
  return 0;
}

#line 2411  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_lib.c"
int ice_vsi_rebuild(struct ice_vsi *vsi, bool init_vsi)
{
  #line 2415 
  enum ice_status status;
  #line 2416 
  struct ice_pf *pf;
  #line 2417 
  int ret;
  #line 2417 
  int i;
  #line 2413 
  u16 max_txqs[8U] = {(unsigned short)0U};
  #line 2414 
  struct ice_vf *vf = (struct ice_vf *)0;
  #line 2419 
  if (vsi == (struct ice_vsi *)0) 
                                  #line 2420 
                                  return -22;
  #line 2422 
  pf = vsi->back;
  #line 2423 
  if (vsi->type == (unsigned int)ICE_VSI_VF) 
                                             #line 2424 
                                             vf = pf->vf + (unsigned long)vsi->vf_id;
  #line 2426 
  ice_rm_vsi_lan_cfg(vsi->port_info,(unsigned short)((int)vsi->idx));
  #line 2427 
  ice_vsi_free_q_vectors(vsi);
  #line 2434 
  if (vsi->type != (unsigned int)ICE_VSI_VF) {
    #line 2436 
    ice_free_res(pf->irq_tracker,(unsigned short)((int)((unsigned short)vsi->base_vector)),(unsigned short)((int)vsi->idx));
    #line 2437 
    pf->num_avail_sw_msix += (unsigned int)vsi->num_q_vectors;
    #line 2438 
    vsi->base_vector = 0;
  }
  #line 2441 
  if ((int)ice_is_xdp_ena_vsi(vsi) != 0) 
                                         #line 2445 
                                         ice_destroy_xdp_rings(vsi);
  #line 2446 
  ice_vsi_put_qs(vsi);
  #line 2447 
  ice_vsi_clear_rings(vsi);
  #line 2448 
  ice_vsi_free_arrays(vsi);
  #line 2449 
  ice_dev_onetime_setup(& pf->hw);
  #line 2450 
  if (vsi->type == (unsigned int)ICE_VSI_VF) 
                                             #line 2451 
                                             ice_vsi_set_num_qs(vsi,(unsigned short)((int)((unsigned short)vf->vf_id))); else 
                                                                    #line 2453 
                                                                    ice_vsi_set_num_qs(vsi,(unsigned short)256);
  #line 2455 
  ret = ice_vsi_alloc_arrays(vsi);
  #line 2456 
  if (ret < 0) 
               #line 2457 
               goto err_vsi;
  #line 2459 
  ice_vsi_get_qs(vsi);
  #line 2460 
  ice_vsi_set_tc_cfg(vsi);
  #line 2463 
  ret = ice_vsi_init(vsi,(_Bool)((bool)((int)init_vsi) != 0));
  #line 2464 
  if (ret < 0) 
               #line 2465 
               goto err_vsi;
  #line 2467 
  switch ((unsigned int)vsi->type) {
    #line 2468 
    case (unsigned int)0: 
                          #line 2468 
    ;
    #line 2469 
    ret = ice_vsi_alloc_q_vectors(vsi);
    #line 2470 
    if (ret != 0) 
                  #line 2471 
                  goto err_rings;
    #line 2473 
    ret = ice_vsi_setup_vector_base(vsi);
    #line 2474 
    if (ret != 0) 
                  #line 2475 
                  goto err_vectors;
    #line 2477 
    ret = ice_vsi_set_q_vectors_reg_idx(vsi);
    #line 2478 
    if (ret != 0) 
                  #line 2479 
                  goto err_vectors;
    #line 2481 
    ret = ice_vsi_alloc_rings(vsi);
    #line 2482 
    if (ret != 0) 
                  #line 2483 
                  goto err_vectors;
    #line 2485 
    ice_vsi_map_rings_to_vectors(vsi);
    #line 2486 
    if ((int)ice_is_xdp_ena_vsi(vsi) != 0) {
      #line 2487 
      vsi->num_xdp_txq = vsi->alloc_txq;
      #line 2488 
      ret = ice_prepare_xdp_rings(vsi,vsi->xdp_prog);
      #line 2489 
      if (ret != 0) 
                    #line 2490 
                    goto err_vectors;
    }
    #line 2496 
    if ((int)test_bit(1L,(unsigned long *)(& pf->flags)) != 0) 
                                                               #line 2497 
                                                               ice_vsi_cfg_rss_lut_key(vsi);
    #line 2498 
    break;
    #line 2499 
    case (unsigned int)1: 
                          #line 2499 
    ;
    #line 2500 
    ret = ice_vsi_alloc_q_vectors(vsi);
    #line 2501 
    if (ret != 0) 
                  #line 2502 
                  goto err_rings;
    #line 2504 
    ret = ice_vsi_set_q_vectors_reg_idx(vsi);
    #line 2505 
    if (ret != 0) 
                  #line 2506 
                  goto err_vectors;
    #line 2508 
    ret = ice_vsi_alloc_rings(vsi);
    #line 2509 
    if (ret != 0) 
                  #line 2510 
                  goto err_vectors;
    #line 2512 
    break;
    #line 2513 
    default: 
             #line 2513 
    ;
    #line 2514 
    break;
  }
  #line 2518 
  i = 0;
  #line 2518 
  while ((int)vsi->tc_cfg.numtc > i) {
    {
      #line 2519 
      max_txqs[i] = vsi->alloc_txq;
      #line 2521 
      if ((int)ice_is_xdp_ena_vsi(vsi) != 0) 
                                             #line 2522 
                                             max_txqs[i] = (unsigned short)((int)max_txqs[i] + (int)vsi->num_xdp_txq);
    }
    #line 2518 
    i ++;
  }
  #line 2525 
  status = ice_cfg_vsi_lan(vsi->port_info,(unsigned short)((int)vsi->idx),(unsigned char)((int)vsi->tc_cfg.ena_tc),(u16 *)(& max_txqs));
  #line 2527 
  if (status != ICE_SUCCESS) {
    #line 2528 
    _dev_err(& (pf->pdev)->dev,(char *)"VSI %d failed lan queue config, error %d\n",(int)vsi->vsi_num,(int)status);
    #line 2531 
    if ((int)init_vsi != 0) {
      #line 2532 
      ret = -5;
      #line 2533 
      goto err_vectors;
    }
    else {
      #line 2535 
      return ice_schedule_reset(pf,(enum ice_reset_req)ICE_RESET_PFR);
    }
  }
  #line 2538 
  return 0;
  #line 2540 
  err_vectors: 
               #line 2540 
  ;
  #line 2541 
  ice_vsi_free_q_vectors(vsi);
  #line 2542 
  err_rings: 
             #line 2542 
  ;
  #line 2543 
  if (vsi->netdev != (struct net_device *)0) {
    #line 2544 
    vsi->current_netdev_flags = 0U;
    #line 2545 
    cif_unregister_netdev(vsi->netdev);
    #line 2546 
    cif_free_netdev(vsi->netdev);
    #line 2547 
    vsi->netdev = (struct net_device *)0;
  }
  #line 2549 
  err_vsi: 
           #line 2549 
  ;
  #line 2550 
  ice_vsi_clear(vsi);
  #line 2551 
  cif_set_bit_4(13L,(unsigned long *)(& pf->state));
  #line 2552 
  return ret;
}

#line 2559  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_lib.c"
bool ice_is_reset_in_progress(unsigned long *state)
{
  #line 2564 
  int tmp_4;
  #line 2564 
  if ((int)test_bit(4L,state) != 0) 
                                    #line 2564 
                                    tmp_4 = 1;
  else {
    #line 2561 
    if ((int)test_bit(5L,state) != 0) 
                                      #line 2564 
                                      tmp_4 = 1;
    else {
      #line 2562 
      if ((int)test_bit(6L,state) != 0) 
                                        #line 2564 
                                        tmp_4 = 1;
      else {
        #line 2563 
        if ((int)test_bit(7L,state) != 0) 
                                          #line 2564 
                                          tmp_4 = 1;
        else {
          #line 2564 
          if ((int)test_bit(8L,state) != 0) 
                                            #line 2564 
                                            tmp_4 = 1; else 
                                                            #line 2564 
                                                            tmp_4 = 0;
        }
      }
    }
  }
  #line 2564 
  return (_Bool)(tmp_4 != 0);
}

#line 2574  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_lib.c"
static void ice_vsi_update_q_map(struct ice_vsi *vsi, struct ice_vsi_ctx *ctx)
{
  #line 2576 
  vsi->info.mapping_flags = ctx->info.mapping_flags;
  #line 2577 
  memcpy((void *)(& vsi->info.q_mapping),(void *)(& ctx->info.q_mapping),32UL);
  #line 2579 
  memcpy((void *)(& vsi->info.tc_mapping),(void *)(& ctx->info.tc_mapping),16UL);
  #line 2580 
  return;
}

#line 2590  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_lib.c"
int ice_vsi_cfg_tc(struct ice_vsi *vsi, u8 ena_tc)
{
  #line 2593 
  struct ice_vsi_ctx *ctx;
  #line 2595 
  enum ice_status status;
  #line 2596 
  struct device *dev;
  #line 2597 
  int i;
  #line 2592 
  u16 max_txqs[8U] = {(unsigned short)0U};
  #line 2594 
  struct ice_pf *pf = vsi->back;
  #line 2597 
  int ret = 0;
  #line 2598 
  u8 num_tc = (unsigned char)0U;
  #line 2600 
  dev = & (pf->pdev)->dev;
  #line 2602 
  i = 0;
  #line 2602 
  while (i <= 7) {
    #line 2604 
    if ((((unsigned long)ena_tc >> i) & 1UL) != 0UL) 
                                                     #line 2605 
                                                     num_tc = (u8)((int)num_tc + 1);
    #line 2607 
    max_txqs[i] = vsi->alloc_txq;
    #line 2602 
    i ++;
  }
  #line 2610 
  vsi->tc_cfg.ena_tc = ena_tc;
  #line 2611 
  vsi->tc_cfg.numtc = num_tc;
  #line 2613 
  ctx = (struct ice_vsi_ctx *)kzalloc_0(384UL,3264U);
  #line 2614 
  if (ctx == (struct ice_vsi_ctx *)0) 
                                      #line 2615 
                                      return -12;
  #line 2617 
  ctx->vf_num = (unsigned char)0U;
  #line 2618 
  ctx->info = vsi->info;
  #line 2620 
  ice_vsi_setup_q_map(vsi,ctx);
  #line 2623 
  ctx->info.valid_sections = (unsigned short)64U;
  #line 2624 
  status = ice_update_vsi(& pf->hw,(unsigned short)((int)vsi->idx),ctx,(struct ice_sq_cd *)0);
  #line 2625 
  if (status != ICE_SUCCESS) {
    #line 2626 
    _dev_info(dev,(char *)"Failed VSI Update\n");
    #line 2627 
    ret = -5;
    #line 2628 
    goto out;
  }
  #line 2631 
  status = ice_cfg_vsi_lan(vsi->port_info,(unsigned short)((int)vsi->idx),(unsigned char)((int)vsi->tc_cfg.ena_tc),(u16 *)(& max_txqs));
  #line 2634 
  if (status != ICE_SUCCESS) {
    #line 2635 
    _dev_err(dev,(char *)"VSI %d failed TC config, error %d\n",(int)vsi->vsi_num,(int)status);
    #line 2637 
    ret = -5;
    #line 2638 
    goto out;
  }
  #line 2640 
  ice_vsi_update_q_map(vsi,ctx);
  #line 2641 
  vsi->info.valid_sections = (unsigned short)0U;
  #line 2643 
  ice_vsi_cfg_netdev_tc(vsi,(unsigned char)((int)ena_tc));
  #line 2644 
  out: 
       #line 2644 
  ;
  #line 2645 
  kfree((void *)ctx);
  #line 2646 
  return ret;
}

#line 2654  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_lib.c"
char *ice_nvm_version_str(struct ice_hw *hw)
{
  #line 2656 
  u8 oem_ver;
  #line 2656 
  u8 oem_patch;
  #line 2656 
  u8 ver_hi;
  #line 2656 
  u8 ver_lo;
  #line 2657 
  char buf[32U];
  #line 2658 
  u16 oem_build;
  #line 2660 
  ice_get_nvm_version(hw,& oem_ver,& oem_build,& oem_patch,& ver_hi,& ver_lo);
  #line 2663 
  snprintf((char *)(& buf),32UL,(char *)"%x.%02x 0x%x %d.%d.%d",(int)ver_hi,(int)ver_lo,hw->nvm.eetrack,(int)oem_ver,(int)oem_build,(int)oem_patch);
  #line 2666 
  return (char *)(& buf);
}

#line 2679  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_lib.c"
static void ice_update_ring_stats(struct ice_ring *ring, struct ice_ring_container *cont, u64 pkts, u64 bytes)
{
  #line 2682 
  ring->stats.bytes += bytes;
  #line 2683 
  ring->stats.pkts += pkts;
  #line 2684 
  cont->total_bytes += (unsigned int)bytes;
  #line 2685 
  cont->total_pkts += (unsigned int)pkts;
  #line 2686 
  return;
}

#line 2694  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_lib.c"
void ice_update_tx_ring_stats(struct ice_ring *tx_ring, u64 pkts, u64 bytes)
{
  #line 2696 
  u64_stats_update_begin(& tx_ring->syncp);
  #line 2697 
  ice_update_ring_stats(tx_ring,& (tx_ring->q_vector)->tx,pkts,bytes);
  #line 2698 
  u64_stats_update_begin(& tx_ring->syncp);
  #line 2699 
  return;
}

#line 2707  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_lib.c"
void ice_update_rx_ring_stats(struct ice_ring *rx_ring, u64 pkts, u64 bytes)
{
  #line 2709 
  u64_stats_update_begin(& rx_ring->syncp);
  #line 2710 
  ice_update_ring_stats(rx_ring,& (rx_ring->q_vector)->rx,pkts,bytes);
  #line 2711 
  u64_stats_update_begin(& rx_ring->syncp);
  #line 2712 
  return;
}

#line 2723  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_lib.c"
enum ice_status ice_vsi_cfg_mac_fltr(struct ice_vsi *vsi, u8 *macaddr, bool set)
{
  #line 2726 
  enum ice_status status;
  #line 2725 
  struct list_head tmp_add_list = {.next = & tmp_add_list, .prev = & tmp_add_list};
  #line 2729 
  if (ice_add_mac_to_list(vsi,& tmp_add_list,macaddr) != 0) {
    #line 2730 
    status = ICE_ERR_NO_MEMORY;
    #line 2731 
    goto cfg_mac_fltr_exit;
  }
  #line 2734 
  if ((int)set != 0) 
                     #line 2735 
                     status = ice_add_mac(& (vsi->back)->hw,& tmp_add_list); else 
                                                                    #line 2737 
                                                                    status = ice_remove_mac(& (vsi->back)->hw,& tmp_add_list);
  #line 2739 
  cfg_mac_fltr_exit: 
                     #line 2739 
  ;
  #line 2740 
  ice_free_fltr_list(& ((vsi->back)->pdev)->dev,& tmp_add_list);
  #line 2741 
  return status;
}

#line 96  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ice/ice.ko/concurrency safety/0/concurrency safety/weaver/ice_lib.i.aux"
#line 96 
void emg_devm_free_irq(struct device *arg0, unsigned int arg1, void *arg2);
#line 97 
#line 97 
void emg_free_netdev(struct net_device *arg0);
#line 102 
#line 102 
void emg_unregister_netdev(struct net_device *arg0);
#line 119  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ice/ice.ko/concurrency safety/0/concurrency safety/weaver/ice_lib.i.aux"
static void cif_set_bit_4(long nr, unsigned long *addr)
{
  #line 122 
  ldv_set_bit(nr,addr);
  #line 123 
  return;
}

#line 126  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ice/ice.ko/concurrency safety/0/concurrency safety/weaver/ice_lib.i.aux"
static void cif_clear_bit_4(long nr, unsigned long *addr)
{
  #line 129 
  ldv_clear_bit(nr,addr);
  #line 130 
  return;
}

#line 133  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ice/ice.ko/concurrency safety/0/concurrency safety/weaver/ice_lib.i.aux"
static void INIT_LIST_HEAD_0(struct list_head *list)
{
  #line 136 
  ldv_init_list_head(list);
  #line 137 
  return;
}

#line 418  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ice/ice.ko/concurrency safety/0/concurrency safety/weaver/ice_lib.i.aux"
static void *kzalloc_0(size_t size, gfp_t flags)
{
  #line 421 
  return ldv_kzalloc(size,flags);
}

#line 798  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ice/ice.ko/concurrency safety/0/concurrency safety/weaver/ice_lib.i.aux"
static void *cif_devm_kcalloc_1(struct device *dev, size_t n, size_t size, gfp_t flags)
{
  #line 801 
  return ldv_devm_kcalloc(n,size,flags);
}

#line 805  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ice/ice.ko/concurrency safety/0/concurrency safety/weaver/ice_lib.i.aux"
static void cif_mutex_lock_sw_mutex_of_ice_pf(struct mutex *lock)
{
  #line 808 
  ldv_mutex_model_lock(lock,(char *)"sw_mutex_of_ice_pf");
  #line 809 
  return;
}

#line 812  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ice/ice.ko/concurrency safety/0/concurrency safety/weaver/ice_lib.i.aux"
static void cif_mutex_unlock_sw_mutex_of_ice_pf(struct mutex *lock)
{
  #line 815 
  ldv_mutex_model_unlock(lock,(char *)"sw_mutex_of_ice_pf");
  #line 816 
  return;
}

#line 819  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ice/ice.ko/concurrency safety/0/concurrency safety/weaver/ice_lib.i.aux"
static void *cif_devm_kzalloc_2(struct device *dev, size_t size, gfp_t flags)
{
  #line 822 
  return ldv_devm_kzalloc(size,flags);
}

#line 826  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ice/ice.ko/concurrency safety/0/concurrency safety/weaver/ice_lib.i.aux"
static void cif_mutex_lock_avail_q_mutex_of_ice_pf(struct mutex *lock)
{
  #line 829 
  ldv_mutex_model_lock(lock,(char *)"avail_q_mutex_of_ice_pf");
  #line 830 
  return;
}

#line 833  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ice/ice.ko/concurrency safety/0/concurrency safety/weaver/ice_lib.i.aux"
static void cif_mutex_unlock_avail_q_mutex_of_ice_pf(struct mutex *lock)
{
  #line 836 
  ldv_mutex_model_unlock(lock,(char *)"avail_q_mutex_of_ice_pf");
  #line 837 
  return;
}

#line 840  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ice/ice.ko/concurrency safety/0/concurrency safety/weaver/ice_lib.i.aux"
static void cif_devm_free_irq(struct device *dev, unsigned int irq, void *dev_id)
{
  #line 844 
  emg_devm_free_irq(dev,irq,dev_id);
  #line 845 
  return;
}

#line 848  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ice/ice.ko/concurrency safety/0/concurrency safety/weaver/ice_lib.i.aux"
static void cif_unregister_netdev(struct net_device *dev)
{
  #line 852 
  emg_unregister_netdev(dev);
  #line 853 
  return;
}

#line 856  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ice/ice.ko/concurrency safety/0/concurrency safety/weaver/ice_lib.i.aux"
static void cif_free_netdev(struct net_device *dev)
{
  #line 860 
  emg_free_netdev(dev);
  #line 861 
  return;
}

#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/export.h"
#line 16 
extern struct module __this_module;
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bitops/find.h"
#line 209  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ice/ice.ko/concurrency safety/0/concurrency safety/weaver/ice_main.i.aux"
static unsigned long cif_find_next_zero_bit_0(unsigned long *addr, unsigned long size, unsigned long offset);
#line 70  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bitops/find.h"
#line 70 
unsigned long find_first_zero_bit(unsigned long *, unsigned long);
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bitops/instrumented-atomic.h"
#line 223  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ice/ice.ko/concurrency safety/0/concurrency safety/weaver/ice_main.i.aux"
static void cif_set_bit_5(long nr, unsigned long *addr);
#line 44  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bitops/instrumented-atomic.h"
#line 230  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ice/ice.ko/concurrency safety/0/concurrency safety/weaver/ice_main.i.aux"
static void cif_clear_bit_5(long nr, unsigned long *addr);
#line 171  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/printk.h"
#line 171 
int printk(char * , ...);
#line 70  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dynamic_debug.h"
#line 70 
void __dynamic_netdev_dbg(struct _ddebug *, struct net_device *, char * , ...);
#line 26  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
#line 237  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ice/ice.ko/concurrency safety/0/concurrency safety/weaver/ice_main.i.aux"
static void INIT_LIST_HEAD_1(struct list_head *list);
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/string_64.h"
#line 15 
void *__memcpy(void *, void *, size_t);
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/string.h"
#line 32 
ssize_t strscpy(char *, char *, size_t);
#line 115  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bitmap.h"
#line 115 
unsigned long *bitmap_zalloc(unsigned int, gfp_t);
#line 116 
#line 116 
void bitmap_free(unsigned long *);
#line 237  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bitmap.h"
__inline static void bitmap_copy(unsigned long *dst, unsigned long *src, unsigned int nbits)
{
  #line 240 
  unsigned int len = (unsigned int)(((unsigned long)nbits + 63UL) / 64UL) * 8U;
  #line 241 
  __memcpy((void *)dst,(void *)src,(unsigned long)len);
  #line 242 
  return;
}

#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/cmpxchg.h"
#line 13 
void __xchg_wrong_size(void);
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/cmpxchg_64.h"
__inline static int arch_atomic_read_1(atomic_t *v)
{
  #line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/atomic.h"
  union __anonunion___u_8307 __u;
  #line 31 
  __read_once_size((void *)(& v->counter),(void *)(& __u.__c),4);
  #line 31 
  return (__u.__val);
}

#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/atomic-instrumented.h"
__inline static int atomic_read_1(atomic_t *v)
{
  #line 26 
  kasan_check_read((void *)v,4U);
  #line 27 
  return arch_atomic_read_1(v);
}

#line 110  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cpumask.h"
__inline static unsigned int num_online_cpus_0(void)
{
  #line 112 
  return (unsigned int)atomic_read_1(& __num_online_cpus);
}

#line 590  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cpumask.h"
__inline static void cpumask_copy(struct cpumask *dstp, struct cpumask *srcp)
{
  #line 593 
  bitmap_copy((unsigned long *)(& dstp->bits),(unsigned long *)(& srcp->bits),nr_cpu_ids);
  #line 594 
  return;
}

#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/preempt.h"
__inline static int preempt_count(void)
{
  #line 26 
  int pfo_ret__;
  #line 26 
  switch (4UL) {
    #line 26 
    case (unsigned long)1: 
                           #line 26 
    ;
    #line 27 
    ldv_inline_asm();
    #line 26 
    break;
    #line 26 
    case (unsigned long)2: 
                           #line 26 
    ;
    #line 27 
    ldv_inline_asm();
    #line 26 
    break;
    #line 26 
    case (unsigned long)4: 
                           #line 26 
    ;
    #line 27 
    ldv_inline_asm();
    #line 26 
    break;
    #line 26 
    case (unsigned long)8: 
                           #line 26 
    ;
    #line 27 
    ldv_inline_asm();
    #line 26 
    break;
    #line 26 
    default: 
             #line 26 
    ;
    #line 26 
    __bad_percpu_size();
  }
  #line 26 
  return pfo_ret__ & 2147483647;
}

#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bottom_half.h"
#line 8 
void __local_bh_disable_ip(unsigned long, unsigned int);
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bottom_half.h"
__inline static void local_bh_disable(void)
{
  #line 19 
  __here_0: 
            #line 19 
  ;
  #line 19 
  __local_bh_disable_ip((unsigned long)((void *)0),512U);
  #line 21 
  return;
}

#line 23 
#line 23 
void __local_bh_enable_ip(unsigned long, unsigned int);
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bottom_half.h"
__inline static void local_bh_enable(void)
{
  #line 32 
  __here_0: 
            #line 32 
  ;
  #line 32 
  __local_bh_enable_ip((unsigned long)((void *)0),512U);
  #line 34 
  return;
}

#line 302  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockdep.h"
#line 302 
void lockdep_init_map(struct lockdep_map *, char *, struct lock_class_key *, int);
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_api_smp.h"
#line 22 
void _raw_spin_lock(raw_spinlock_t *);
#line 28 
#line 28 
void _raw_spin_lock_bh(raw_spinlock_t *);
#line 39 
#line 39 
void _raw_spin_unlock(raw_spinlock_t *);
#line 40 
#line 40 
void _raw_spin_unlock_bh(raw_spinlock_t *);
#line 336  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static void spin_lock(spinlock_t *lock)
{
  #line 338 
  _raw_spin_lock(& lock->__anonCompField_spinlock_25.rlock);
  #line 339 
  return;
}

#line 340 
#line 649  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ice/ice.ko/concurrency safety/0/concurrency safety/weaver/ice_main.i.aux"
static void cif_spin_lock__xmit_lock_of_netdev_queue(spinlock_t *lock);
#line 341  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static void spin_lock_bh(spinlock_t *lock)
{
  #line 343 
  _raw_spin_lock_bh(& lock->__anonCompField_spinlock_25.rlock);
  #line 344 
  return;
}

#line 345 
#line 734  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ice/ice.ko/concurrency safety/0/concurrency safety/weaver/ice_main.i.aux"
static void cif_spin_lock_bh_addr_list_lock_of_net_device(spinlock_t *lock);
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static void spin_unlock(spinlock_t *lock)
{
  #line 378 
  _raw_spin_unlock(& lock->__anonCompField_spinlock_25.rlock);
  #line 379 
  return;
}

#line 380 
#line 689  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ice/ice.ko/concurrency safety/0/concurrency safety/weaver/ice_main.i.aux"
static void cif_spin_unlock__xmit_lock_of_netdev_queue(spinlock_t *lock);
#line 381  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static void spin_unlock_bh(spinlock_t *lock)
{
  #line 383 
  _raw_spin_unlock_bh(& lock->__anonCompField_spinlock_25.rlock);
  #line 384 
  return;
}

#line 385 
#line 752  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ice/ice.ko/concurrency safety/0/concurrency safety/weaver/ice_main.i.aux"
static void cif_spin_unlock_bh_addr_list_lock_of_net_device(spinlock_t *lock);
#line 26 
#line 949 
static void cif_mutex_lock_avail_q_mutex_of_ice_pf_0(struct mutex *lock);
#line 26 
#line 979 
static void cif_mutex_lock_lock(struct mutex *lock);
#line 40 
#line 40 
void ldv_spin_model_lock(char *);
#line 41 
#line 41 
void ldv_spin_model_unlock(char *);
#line 51 
#line 51 
int ldv_request_firmware(struct firmware **fw);
#line 52 
#line 52 
void ldv_release_firmware(struct firmware *fw);
#line 185  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mutex.h"
#line 956  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ice/ice.ko/concurrency safety/0/concurrency safety/weaver/ice_main.i.aux"
static void cif_mutex_unlock_avail_q_mutex_of_ice_pf_0(struct mutex *lock);
#line 185  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mutex.h"
#line 986  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ice/ice.ko/concurrency safety/0/concurrency safety/weaver/ice_main.i.aux"
static void cif_mutex_unlock_lock(struct mutex *lock);
#line 90  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
#line 90 
void init_timer_key(struct timer_list *, void (*)(struct timer_list *), unsigned int, char *, struct lock_class_key *);
#line 173 
#line 926  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ice/ice.ko/concurrency safety/0/concurrency safety/weaver/ice_main.i.aux"
static int cif_mod_timer(struct timer_list *timer, unsigned long expires);
#line 188  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
#line 918  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ice/ice.ko/concurrency safety/0/concurrency safety/weaver/ice_main.i.aux"
static int cif_del_timer_sync(struct timer_list *timer);
#line 209  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
#line 209 
unsigned long round_jiffies(unsigned long);
#line 207  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/workqueue.h"
#line 207 
void __init_work(struct work_struct *, int);
#line 407 
#line 407 
struct workqueue_struct *alloc_workqueue(char *, unsigned int, int , ...);
#line 436 
#line 436 
void destroy_workqueue(struct workqueue_struct *);
#line 462 
#line 462 
bool cancel_work_sync(struct work_struct *);
#line 496 
#line 407  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ice/ice.ko/concurrency safety/0/concurrency safety/weaver/ice_main.i.aux"
static bool cif_queue_work(struct workqueue_struct *wq, struct work_struct *work);
#line 45  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/firmware.h"
#line 1007  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ice/ice.ko/concurrency safety/0/concurrency safety/weaver/ice_main.i.aux"
static int cif_request_firmware(struct firmware **fw, char *name, struct device *device);
#line 44  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/firmware.h"
#line 44 
int firmware_request_nowarn(struct firmware **, char *, struct device *);
#line 57 
#line 1000  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ice/ice.ko/concurrency safety/0/concurrency safety/weaver/ice_main.i.aux"
static void cif_release_firmware(struct firmware *fw);
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/delay.h"
#line 59 
void msleep(unsigned int);
#line 668  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/slab.h"
#line 522  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ice/ice.ko/concurrency safety/0/concurrency safety/weaver/ice_main.i.aux"
static void *kzalloc_1(size_t size, gfp_t flags);
#line 937  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
#line 993  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ice/ice.ko/concurrency safety/0/concurrency safety/weaver/ice_main.i.aux"
static void *cif_devm_kzalloc_3(struct device *dev, size_t size, gfp_t flags);
#line 952  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
#line 942  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ice/ice.ko/concurrency safety/0/concurrency safety/weaver/ice_main.i.aux"
static void *cif_devm_kcalloc_2(struct device *dev, size_t n, size_t size, gfp_t flags);
#line 1417  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
__inline static void *dev_get_drvdata(struct device *dev)
{
  #line 1419 
  return dev->driver_data;
}

#line 1422  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
__inline static void dev_set_drvdata(struct device *dev, void *data)
{
  #line 1424 
  dev->driver_data = data;
  #line 1425 
  return;
}

#line 460  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
#line 460 
int dma_set_mask(struct device *, u64);
#line 461 
#line 461 
int dma_set_coherent_mask(struct device *, u64);
#line 669  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static int dma_set_mask_and_coherent(struct device *dev, u64 mask)
{
  #line 671 
  int rc = dma_set_mask(dev,mask);
  #line 672 
  if (rc == 0) 
               #line 673 
               dma_set_coherent_mask(dev,mask);
  #line 674 
  return rc;
}

#line 2397  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static unsigned char *skb_inner_transport_header(struct sk_buff *skb)
{
  #line 2400 
  return skb->head + (unsigned long)skb->inner_transport_header;
}

#line 2420  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static unsigned char *skb_inner_network_header(struct sk_buff *skb)
{
  #line 2422 
  return skb->head + (unsigned long)skb->inner_network_header;
}

#line 158  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/u64_stats_sync.h"
__inline static unsigned int __u64_stats_fetch_begin(struct u64_stats_sync *syncp)
{
  #line 163 
  return 0U;
}

#line 175  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/u64_stats_sync.h"
__inline static bool __u64_stats_fetch_retry(struct u64_stats_sync *syncp, unsigned int start)
{
  #line 181 
  return (_Bool)0;
}

#line 200  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/u64_stats_sync.h"
__inline static unsigned int u64_stats_fetch_begin_irq(struct u64_stats_sync *syncp)
{
  #line 205 
  return __u64_stats_fetch_begin(syncp);
}

#line 208  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/u64_stats_sync.h"
__inline static bool u64_stats_fetch_retry_irq(struct u64_stats_sync *syncp, unsigned int start)
{
  #line 214 
  return __u64_stats_fetch_retry(syncp,start);
}

#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/interrupt.h"
#line 197 
int devm_request_threaded_irq(struct device *, unsigned int, irqreturn_t (*)(int , void *), irqreturn_t (*)(int , void *), unsigned long, char *, void *);
#line 203  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/interrupt.h"
__inline static int devm_request_irq(struct device *dev, unsigned int irq, irqreturn_t (*handler)(int , void *), unsigned long irqflags, char *devname, void *dev_id)
{
  #line 206 
  return devm_request_threaded_irq(dev,irq,handler,
                                (irqreturn_t (*)(int , void *))0,irqflags,
                                devname,dev_id);
}

#line 216 
#line 934  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ice/ice.ko/concurrency safety/0/concurrency safety/weaver/ice_main.i.aux"
static void cif_devm_free_irq_0(struct device *dev, unsigned int irq, void *dev_id);
#line 818  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
#line 818 
void bpf_prog_put(struct bpf_prog *);
#line 512  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void napi_enable_0(struct napi_struct *n)
{
  #line 514 
  int tmp_0;
  #line 514 
  if (test_bit(0L,& n->state)) 
                               #line 514 
                               tmp_0 = 0; else 
                                               #line 514 
                                               tmp_0 = 1;
  #line 514 
  if ((long)tmp_0 != 0L) {
    #line 515 
    ldv_inline_asm();
    #line 516 
    ldv_inline_asm();
    #line 517 
    ldv_inline_asm();
    #line 514 
    ;
  }
  #line 516 
  cif_clear_bit_5(0L,& n->state);
  #line 517 
  cif_clear_bit_5(3L,& n->state);
  #line 518 
  return;
}

#line 2679 
#line 910  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ice/ice.ko/concurrency safety/0/concurrency safety/weaver/ice_main.i.aux"
static void cif_free_netdev_0(struct net_device *dev);
#line 3104  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void netif_tx_start_queue_1(struct netdev_queue *dev_queue)
{
  #line 3106 
  cif_clear_bit_5(0L,& dev_queue->state);
  #line 3107 
  return;
}

#line 3120  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void netif_tx_start_all_queues(struct net_device *dev)
{
  #line 3122 
  unsigned int i;
  #line 3124 
  i = 0U;
  #line 3124 
  while (dev->num_tx_queues > i) {
    {
      #line 3125 
      struct netdev_queue *txq = netdev_get_tx_queue(dev,i);
      #line 3126 
      netif_tx_start_queue_1(txq);
    }
    #line 3124 
    i ++;
  }
  #line 3128 
  return;
}

#line 3144  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void netif_tx_wake_all_queues(struct net_device *dev)
{
  #line 3146 
  unsigned int i;
  #line 3148 
  i = 0U;
  #line 3148 
  while (dev->num_tx_queues > i) {
    {
      #line 3149 
      struct netdev_queue *txq = netdev_get_tx_queue(dev,i);
      #line 3150 
      netif_tx_wake_queue(txq);
    }
    #line 3148 
    i ++;
  }
  #line 3152 
  return;
}

#line 3154  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void netif_tx_stop_queue_1(struct netdev_queue *dev_queue)
{
  #line 3156 
  cif_set_bit_5(0L,& dev_queue->state);
  #line 3157 
  return;
}

#line 3171 
#line 3171 
void netif_tx_stop_all_queues(struct net_device *);
#line 3577 
#line 3577 
int netif_set_real_num_tx_queues(struct net_device *, unsigned int);
#line 3580 
#line 3580 
int netif_set_real_num_rx_queues(struct net_device *, unsigned int);
#line 3812 
#line 3812 
void netif_carrier_on(struct net_device *);
#line 3814 
#line 3814 
void netif_carrier_off(struct net_device *);
#line 3923  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static u32 netif_msg_init(int debug_value, int default_msg_enable_bits)
{
  #line 3926 
  if ((unsigned int)debug_value > 31U) 
                                       #line 3927 
                                       return (unsigned int)default_msg_enable_bits;
  #line 3928 
  if (debug_value == 0) 
                        #line 3929 
                        return 0U;
  #line 3931 
  return (1U << debug_value) + 4294967295U;
}

#line 3934  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void __netif_tx_lock(struct netdev_queue *txq, int cpu)
{
  #line 3936 
  cif_spin_lock__xmit_lock_of_netdev_queue(& txq->_xmit_lock);
  #line 3937 
  txq->xmit_lock_owner = cpu;
  #line 3938 
  return;
}

#line 3965  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void __netif_tx_unlock(struct netdev_queue *txq)
{
  #line 3967 
  txq->xmit_lock_owner = -1;
  #line 3968 
  cif_spin_unlock__xmit_lock_of_netdev_queue(& txq->_xmit_lock);
  #line 3969 
  return;
}

#line 4070  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void netif_tx_disable(struct net_device *dev)
{
  #line 4076 
  int pscr_ret__;
  #line 4072 
  unsigned int i;
  #line 4073 
  int cpu;
  #line 4075 
  local_bh_disable();
  #line 4076 
  __this_cpu_preempt_check((char *)"read");
  {
    #line 4076 
    void *__vpp_verify = (void *)0;
    #line 4076 
    void *tmp = __vpp_verify;
  }
  #line 4076 
  switch (4UL) {
    #line 4076 
    int pfo_ret__;
    #line 4076 
    int pfo_ret___0;
    #line 4076 
    int pfo_ret___1;
    #line 4076 
    int pfo_ret___2;
    #line 4076 
    case (unsigned long)1: 
                           #line 4076 
    ;
    #line 4076 
    switch (4UL) {
      #line 4076 
      case (unsigned long)1: 
                             #line 4076 
      ;
      #line 4077 
      ldv_inline_asm();
      #line 4076 
      break;
      #line 4076 
      case (unsigned long)2: 
                             #line 4076 
      ;
      #line 4077 
      ldv_inline_asm();
      #line 4076 
      break;
      #line 4076 
      case (unsigned long)4: 
                             #line 4076 
      ;
      #line 4077 
      ldv_inline_asm();
      #line 4076 
      break;
      #line 4076 
      case (unsigned long)8: 
                             #line 4076 
      ;
      #line 4077 
      ldv_inline_asm();
      #line 4076 
      break;
      #line 4076 
      default: 
               #line 4076 
      ;
      #line 4076 
      __bad_percpu_size();
    }
    #line 4076 
    pscr_ret__ = pfo_ret__;
    #line 4076 
    break;
    #line 4076 
    case (unsigned long)2: 
                           #line 4076 
    ;
    #line 4076 
    switch (4UL) {
      #line 4076 
      case (unsigned long)1: 
                             #line 4076 
      ;
      #line 4077 
      ldv_inline_asm();
      #line 4076 
      break;
      #line 4076 
      case (unsigned long)2: 
                             #line 4076 
      ;
      #line 4077 
      ldv_inline_asm();
      #line 4076 
      break;
      #line 4076 
      case (unsigned long)4: 
                             #line 4076 
      ;
      #line 4077 
      ldv_inline_asm();
      #line 4076 
      break;
      #line 4076 
      case (unsigned long)8: 
                             #line 4076 
      ;
      #line 4077 
      ldv_inline_asm();
      #line 4076 
      break;
      #line 4076 
      default: 
               #line 4076 
      ;
      #line 4076 
      __bad_percpu_size();
    }
    #line 4076 
    pscr_ret__ = pfo_ret___0;
    #line 4076 
    break;
    #line 4076 
    case (unsigned long)4: 
                           #line 4076 
    ;
    #line 4076 
    switch (4UL) {
      #line 4076 
      case (unsigned long)1: 
                             #line 4076 
      ;
      #line 4077 
      ldv_inline_asm();
      #line 4076 
      break;
      #line 4076 
      case (unsigned long)2: 
                             #line 4076 
      ;
      #line 4077 
      ldv_inline_asm();
      #line 4076 
      break;
      #line 4076 
      case (unsigned long)4: 
                             #line 4076 
      ;
      #line 4077 
      ldv_inline_asm();
      #line 4076 
      break;
      #line 4076 
      case (unsigned long)8: 
                             #line 4076 
      ;
      #line 4077 
      ldv_inline_asm();
      #line 4076 
      break;
      #line 4076 
      default: 
               #line 4076 
      ;
      #line 4076 
      __bad_percpu_size();
    }
    #line 4076 
    pscr_ret__ = pfo_ret___1;
    #line 4076 
    break;
    #line 4076 
    case (unsigned long)8: 
                           #line 4076 
    ;
    #line 4076 
    switch (4UL) {
      #line 4076 
      case (unsigned long)1: 
                             #line 4076 
      ;
      #line 4077 
      ldv_inline_asm();
      #line 4076 
      break;
      #line 4076 
      case (unsigned long)2: 
                             #line 4076 
      ;
      #line 4077 
      ldv_inline_asm();
      #line 4076 
      break;
      #line 4076 
      case (unsigned long)4: 
                             #line 4076 
      ;
      #line 4077 
      ldv_inline_asm();
      #line 4076 
      break;
      #line 4076 
      case (unsigned long)8: 
                             #line 4076 
      ;
      #line 4077 
      ldv_inline_asm();
      #line 4076 
      break;
      #line 4076 
      default: 
               #line 4076 
      ;
      #line 4076 
      __bad_percpu_size();
    }
    #line 4076 
    pscr_ret__ = pfo_ret___2;
    #line 4076 
    break;
    #line 4076 
    default: 
             #line 4076 
    ;
    #line 4076 
    __bad_size_call_parameter();
    #line 4076 
    break;
  }
  #line 4076 
  cpu = pscr_ret__;
  #line 4077 
  i = 0U;
  #line 4077 
  while (dev->num_tx_queues > i) {
    {
      #line 4078 
      struct netdev_queue *txq = netdev_get_tx_queue(dev,i);
      #line 4080 
      __netif_tx_lock(txq,cpu);
      #line 4081 
      netif_tx_stop_queue_1(txq);
      #line 4082 
      __netif_tx_unlock(txq);
    }
    #line 4077 
    i ++;
  }
  #line 4084 
  local_bh_enable();
  #line 4085 
  return;
}

#line 4092  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void netif_addr_lock_bh(struct net_device *dev)
{
  #line 4094 
  cif_spin_lock_bh_addr_list_lock_of_net_device(& dev->addr_list_lock);
  #line 4095 
  return;
}

#line 4102  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void netif_addr_unlock_bh(struct net_device *dev)
{
  #line 4104 
  cif_spin_unlock_bh_addr_list_lock_of_net_device(& dev->addr_list_lock);
  #line 4105 
  return;
}

#line 4131 
#line 971  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ice/ice.ko/concurrency safety/0/concurrency safety/weaver/ice_main.i.aux"
static int cif_register_netdev(struct net_device *dev);
#line 4132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
#line 902  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ice/ice.ko/concurrency safety/0/concurrency safety/weaver/ice_main.i.aux"
static void cif_unregister_netdev_0(struct net_device *dev);
#line 4137  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
#line 4137 
int __hw_addr_sync_dev(struct netdev_hw_addr_list *, struct net_device *, int (*)(struct net_device *, unsigned char *), int (*)(struct net_device *, unsigned char *));
#line 4168 
#line 4168 
int dev_uc_add_excl(struct net_device *, unsigned char *);
#line 4169 
#line 4169 
int dev_uc_del(struct net_device *, unsigned char *);
#line 4186  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static int __dev_uc_sync(struct net_device *dev, int (*sync)(struct net_device *, unsigned char *), int (*unsync)(struct net_device *, unsigned char *))
{
  #line 4192 
  return __hw_addr_sync_dev(& dev->uc,dev,sync,unsync);
}

#line 4212 
#line 4212 
int dev_mc_add_excl(struct net_device *, unsigned char *);
#line 4213 
#line 4213 
int dev_mc_del(struct net_device *, unsigned char *);
#line 4230  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static int __dev_mc_sync(struct net_device *dev, int (*sync)(struct net_device *, unsigned char *), int (*unsync)(struct net_device *, unsigned char *))
{
  #line 4236 
  return __hw_addr_sync_dev(& dev->mc,dev,sync,unsync);
}

#line 4752 
#line 4752 
void netdev_warn(struct net_device *, char * , ...);
#line 4756 
#line 4756 
void netdev_info(struct net_device *, char * , ...);
#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/unaligned/access_ok.h"
__inline static void put_unaligned_le32(u32 val, void *p)
{
  #line 45 
  *((__le32 *)p) = val;
  #line 46 
  return;
}

#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/etherdevice.h"
#line 47 
int eth_validate_addr(struct net_device *);
#line 51 
#line 963  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ice/ice.ko/concurrency safety/0/concurrency safety/weaver/ice_main.i.aux"
static struct net_device *cif_alloc_etherdev_mqs(int sizeof_priv, unsigned int txqs, unsigned int rxqs);
#line 62  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/etherdevice.h"
static u8 eth_reserved_addr_base[6U] = {(unsigned char)1U, (unsigned char)128U, (unsigned char)194U};
#line 76  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/etherdevice.h"
__inline static bool is_link_local_ether_addr(u8 *addr)
{
  #line 78 
  __be16 *a = (__be16 *)addr;
  #line 79 
  __be16 *b = (__be16 *)(& eth_reserved_addr_base);
  #line 80 
  __be16 m = (unsigned short)61695U;
  #line 84 
  return (_Bool)(((*((u32 *)addr) ^ *((u32 *)b)) | ((unsigned int)((int)*(a + 2U) ^ (int)*(b + 2U)) & 61695U)) == 0U);
}

#line 191  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/etherdevice.h"
__inline static bool is_valid_ether_addr(u8 *addr)
{
  #line 195 
  int tmp_1;
  #line 195 
  if (is_multicast_ether_addr(addr)) 
                                     #line 195 
                                     tmp_1 = 0;
  else {
    #line 195 
    if (is_zero_ether_addr(addr)) 
                                  #line 195 
                                  tmp_1 = 0; else 
                                                  #line 195 
                                                  tmp_1 = 1;
  }
  #line 195 
  return (_Bool)(tmp_1 != 0);
}

#line 315  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/etherdevice.h"
__inline static bool ether_addr_equal(u8 *addr1, u8 *addr2)
{
  #line 318 
  u32 fold = (*((u32 *)addr1) ^ *((u32 *)addr2)) | (unsigned int)((int)*((u16 *)(addr1 + 4U)) ^ (int)*((u16 *)(addr2 + 4U)));
  #line 321 
  return (_Bool)(fold == 0U);
}

#line 130  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rtnetlink.h"
#line 130 
int ndo_dflt_bridge_getlink(struct sk_buff *, u32, u32, struct net_device *, u16, u32, u32, int, u32, int (*)(struct sk_buff *, struct net_device *, u32 ));
#line 1042  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
#line 1042 
int pci_find_ext_capability(struct pci_dev *, int);
#line 1083 
#line 1083 
int pci_read_config_byte(struct pci_dev *, int, u8 *);
#line 1085 
#line 1085 
int pci_read_config_dword(struct pci_dev *, int, u32 *);
#line 1133 
#line 1133 
int pci_enable_device_mem(struct pci_dev *);
#line 1135 
#line 1135 
int pcim_enable_device(struct pci_dev *);
#line 1160 
#line 1160 
void pci_set_master(struct pci_dev *);
#line 1174 
#line 1174 
int pci_wait_for_pending_transaction(struct pci_dev *);
#line 1185 
#line 1185 
void pcie_print_link_status(struct pci_dev *);
#line 1219 
#line 1219 
int pci_save_state(struct pci_dev *);
#line 1220 
#line 1220 
void pci_restore_state(struct pci_dev *);
#line 1238 
#line 1238 
int pci_wake_from_d3(struct pci_dev *, bool);
#line 1346 
#line 1014  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ice/ice.ko/concurrency safety/0/concurrency safety/weaver/ice_main.i.aux"
static int cif___pci_register_driver(struct pci_driver *ldv_func_arg1, struct module *ldv_func_arg2, char *mod_name);
#line 1352  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
#line 1022  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ice/ice.ko/concurrency safety/0/concurrency safety/weaver/ice_main.i.aux"
static void cif_pci_unregister_driver(struct pci_driver *dev);
#line 1433  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
#line 1433 
void pci_disable_msix(struct pci_dev *);
#line 1437 
#line 1437 
int pci_enable_msix_range(struct pci_dev *, struct msix_entry *, int, int);
#line 1833  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
__inline static void *pci_get_drvdata(struct pci_dev *pdev)
{
  #line 1835 
  return dev_get_drvdata(& pdev->dev);
}

#line 1838  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
__inline static void pci_set_drvdata(struct pci_dev *pdev, void *data)
{
  #line 1840 
  dev_set_drvdata(& pdev->dev,data);
  #line 1841 
  return;
}

#line 1843  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
__inline static char *pci_name(struct pci_dev *pdev)
{
  #line 1845 
  return dev_name(& pdev->dev);
}

#line 1972 
#line 1972 
void **pcim_iomap_table(struct pci_dev *);
#line 1973 
#line 1973 
int pcim_iomap_regions(struct pci_dev *, int, char *);
#line 45  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/aer.h"
#line 45 
int pci_enable_pcie_error_reporting(struct pci_dev *);
#line 46 
#line 46 
int pci_disable_pcie_error_reporting(struct pci_dev *);
#line 47 
#line 47 
int pci_cleanup_aer_uncorrect_error_status(struct pci_dev *);
#line 441  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netlink.h"
#line 441 
struct nlattr *nla_find(struct nlattr *, int, int);
#line 501  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netlink.h"
__inline static void *nlmsg_data(struct nlmsghdr *nlh)
{
  #line 503 
  return (void *)((unsigned char *)nlh + 16U);
}

#line 510  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netlink.h"
__inline static int nlmsg_len(struct nlmsghdr *nlh)
{
  #line 512 
  return (int)(nlh->nlmsg_len + 4294967280U);
}

#line 520  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netlink.h"
__inline static struct nlattr *nlmsg_attrdata(struct nlmsghdr *nlh, int hdrlen)
{
  #line 523 
  unsigned char *data = nlmsg_data(nlh);
  #line 524 
  return (struct nlattr *)(data + ((unsigned long)((unsigned int)hdrlen + 3U) & (unsigned long)4294967292U));
}

#line 532  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netlink.h"
__inline static int nlmsg_attrlen(struct nlmsghdr *nlh, int hdrlen)
{
  #line 534 
  ;
  #line 534 
  return (int)((unsigned int)nlmsg_len(nlh) - (((unsigned int)hdrlen + 3U) & 4294967292U));
}

#line 738  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netlink.h"
__inline static struct nlattr *nlmsg_find_attr(struct nlmsghdr *nlh, int hdrlen, int attrtype)
{
  #line 741 
  ;
  #line 741 
  return nla_find(nlmsg_attrdata(nlh,hdrlen),nlmsg_attrlen(nlh,hdrlen),
                 attrtype);
}

#line 1063  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netlink.h"
__inline static int nla_type(struct nlattr *nla)
{
  #line 1065 
  return (int)nla->nla_type & -49153;
}

#line 1072  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netlink.h"
__inline static void *nla_data(struct nlattr *nla)
{
  #line 1074 
  return (void *)((char *)nla + 4U);
}

#line 1081  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netlink.h"
__inline static int nla_len(struct nlattr *nla)
{
  #line 1083 
  return (int)nla->nla_len + -4;
}

#line 1091  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netlink.h"
__inline static int nla_ok(struct nlattr *nla, int remaining)
{
  #line 1094 
  return ((remaining > 3 && (unsigned int)nla->nla_len > 3U) && (int)nla->nla_len <= remaining) != 0;
}

#line 1106  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netlink.h"
__inline static struct nlattr *nla_next(struct nlattr *nla, int *remaining)
{
  #line 1108 
  unsigned int totlen = (unsigned int)((int)nla->nla_len + 3) & 4294967292U;
  #line 1110 
  *remaining = (int)((unsigned int)*remaining - totlen);
  #line 1111 
  return (struct nlattr *)((char *)nla + (unsigned long)totlen);
}

#line 1499  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netlink.h"
__inline static u16 nla_get_u16(struct nlattr *nla)
{
  #line 1501 
  return *((u16 *)nla_data(nla));
}

#line 142  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_dcb.h"
#line 142 
enum ice_status ice_cfg_lldp_mib_change(struct ice_hw *hw, bool ena_mib);
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_flex_pipe.h"
#line 21 
enum ice_status ice_init_pkg(struct ice_hw *hw, u8 *buf, u32 len);
#line 23 
#line 23 
enum ice_status ice_copy_and_init_pkg(struct ice_hw *hw, u8 *buf, u32 len);
#line 26 
#line 26 
void ice_fill_blk_tbls(struct ice_hw *hw);
#line 27 
#line 27 
void ice_clear_hw_tbls(struct ice_hw *hw);
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_common.h"
#line 16 
enum ice_status ice_init_hw(struct ice_hw *hw);
#line 17 
#line 17 
void ice_deinit_hw(struct ice_hw *hw);
#line 21 
#line 21 
enum ice_status ice_check_reset(struct ice_hw *hw);
#line 22 
#line 22 
enum ice_status ice_reset(struct ice_hw *hw, enum ice_reset_req req);
#line 31 
#line 31 
enum ice_status ice_get_link_status(struct ice_port_info *pi, bool *link_up);
#line 32 
#line 32 
enum ice_status ice_update_link_info(struct ice_port_info *pi);
#line 44 
#line 44 
void ice_clear_pxe_mode(struct ice_hw *hw);
#line 45 
#line 45 
enum ice_status ice_get_caps(struct ice_hw *hw);
#line 47 
#line 47 
void ice_set_safe_mode_caps(struct ice_hw *hw);
#line 56 
#line 56 
enum ice_status ice_aq_get_rss_lut(struct ice_hw *hw, u16 vsi_handle, u8 lut_type, u8 *lut, u16 lut_size);
#line 62 
#line 62 
enum ice_status ice_aq_get_rss_key(struct ice_hw *hw, u16 vsi_handle, struct ice_aqc_get_set_rss_keys *key);
#line 83 
#line 83 
enum ice_status ice_aq_send_driver_ver(struct ice_hw *hw, struct ice_driver_ver *dv, struct ice_sq_cd *cd);
#line 86 
#line 86 
enum ice_status ice_aq_get_phy_caps(struct ice_port_info *pi, bool qual_mods, u8 report_mode, struct ice_aqc_get_phy_caps_data *pcaps, struct ice_sq_cd *cd);
#line 93 
#line 93 
enum ice_status ice_aq_manage_mac_write(struct ice_hw *hw, u8 *mac_addr, u8 flags, struct ice_sq_cd *cd);
#line 95 
#line 95 
enum ice_status ice_clear_pf_cfg(struct ice_hw *hw);
#line 97 
#line 97 
enum ice_status ice_aq_set_phy_cfg(struct ice_hw *hw, u8 lport, struct ice_aqc_set_phy_cfg_data *cfg, struct ice_sq_cd *cd);
#line 108 
#line 108 
enum ice_status ice_aq_set_link_restart_an(struct ice_port_info *pi, bool ena_link, struct ice_sq_cd *cd);
#line 111 
#line 111 
enum ice_status ice_aq_get_link_info(struct ice_port_info *pi, bool ena_lse, struct ice_link_status *link, struct ice_sq_cd *cd);
#line 114 
#line 114 
enum ice_status ice_aq_set_event_mask(struct ice_hw *hw, u8 port_num, u16 mask, struct ice_sq_cd *cd);
#line 139 
#line 139 
enum ice_status ice_replay_vsi(struct ice_hw *hw, u16 vsi_handle);
#line 140 
#line 140 
void ice_replay_post(struct ice_hw *hw);
#line 141 
#line 141 
void ice_output_fw_log(struct ice_hw *hw, struct ice_aq_desc *desc, void *buf);
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_sched.h"
#line 61 
enum ice_status ice_sched_init_port(struct ice_port_info *pi);
#line 63 
#line 63 
void ice_sched_clear_port(struct ice_port_info *pi);
#line 64 
#line 64 
void ice_sched_cleanup_all(struct ice_hw *hw);
#line 82 
#line 82 
enum ice_status ice_cfg_q_bw_lmt(struct ice_port_info *pi, u16 vsi_handle, u8 tc, u16 q_handle, enum ice_rl_type rl_type, u32 bw);
#line 85 
#line 85 
enum ice_status ice_cfg_q_bw_dflt_lmt(struct ice_port_info *pi, u16 vsi_handle, u8 tc, u16 q_handle, enum ice_rl_type rl_type);
#line 100  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_virtchnl_pf.h"
#line 100 
void ice_process_vflr_event(struct ice_pf *pf);
#line 101 
#line 101 
int ice_sriov_configure(struct pci_dev *pdev, int num_vfs);
#line 102 
#line 102 
int ice_set_vf_mac(struct net_device *netdev, int vf_id, u8 *mac);
#line 104 
#line 104 
int ice_get_vf_cfg(struct net_device *netdev, int vf_id, struct ifla_vf_info *ivi);
#line 106 
#line 106 
void ice_free_vfs(struct ice_pf *pf);
#line 107 
#line 107 
void ice_vc_process_vf_msg(struct ice_pf *pf, struct ice_rq_event_info *event);
#line 108 
#line 108 
void ice_vc_notify_link_state(struct ice_pf *pf);
#line 109 
#line 109 
void ice_vc_notify_reset(struct ice_pf *pf);
#line 110 
#line 110 
bool ice_reset_all_vfs(struct ice_pf *pf, bool is_vflr);
#line 113 
#line 113 
int ice_set_vf_port_vlan(struct net_device *netdev, int vf_id, u16 vlan_id, u8 qos, __be16 vlan_proto);
#line 116 
#line 116 
int ice_set_vf_trust(struct net_device *netdev, int vf_id, bool trusted);
#line 118 
#line 118 
int ice_set_vf_link_state(struct net_device *netdev, int vf_id, int link_state);
#line 120 
#line 120 
int ice_set_vf_spoofchk(struct net_device *netdev, int vf_id, bool ena);
#line 124 
#line 124 
void ice_set_vf_state_qs_dis(struct ice_vf *vf);
#line 126 
#line 126 
int ice_get_vf_stats(struct net_device *netdev, int vf_id, struct ifla_vf_stats *vf_stats);
#line 50  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice.h"
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_main.c"
char ice_drv_ver[8U];
#line 490  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice.h"
#line 4411  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_main.c"
int ice_vsi_setup_tx_rings(struct ice_vsi *vsi);
#line 491  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice.h"
#line 4442  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_main.c"
int ice_vsi_setup_rx_rings(struct ice_vsi *vsi);
#line 492  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice.h"
#line 492 
void ice_set_ethtool_ops(struct net_device *netdev);
#line 493 
#line 493 
void ice_set_ethtool_safe_mode_ops(struct net_device *netdev);
#line 496 
#line 2860  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_main.c"
int ice_vsi_recfg_qs(struct ice_vsi *vsi, int new_rx, int new_tx);
#line 497  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice.h"
#line 4107  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_main.c"
void ice_update_vsi_stats(struct ice_vsi *vsi);
#line 498  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice.h"
#line 4143  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_main.c"
void ice_update_pf_stats(struct ice_pf *pf);
#line 499  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice.h"
#line 4017  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_main.c"
int ice_up(struct ice_vsi *vsi);
#line 501  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice.h"
#line 3933  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_main.c"
int ice_vsi_cfg(struct ice_vsi *vsi);
#line 502  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice.h"
#line 2442  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_main.c"
struct ice_vsi *ice_lb_vsi_setup(struct ice_pf *pf, struct ice_port_info *pi);
#line 509  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice.h"
#line 4884  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_main.c"
int ice_get_rss(struct ice_vsi *vsi, u8 *seed, u8 *lut, u16 lut_size);
#line 512  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice.h"
#line 629  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_main.c"
void ice_print_link_msg(struct ice_vsi *vsi, bool isup);
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_dcb_lib.h"
#line 17 
void ice_dcb_rebuild(struct ice_pf *pf);
#line 20 
#line 20 
u8 ice_dcb_get_tc(struct ice_vsi *vsi, int queue_index);
#line 23 
#line 23 
void ice_pf_dcb_recfg(struct ice_pf *pf);
#line 24 
#line 24 
void ice_vsi_cfg_dcb_rings(struct ice_vsi *vsi);
#line 25 
#line 25 
int ice_init_pf_dcb(struct ice_pf *pf, bool locked);
#line 26 
#line 26 
void ice_update_dcb_stats(struct ice_pf *pf);
#line 31 
#line 31 
void ice_dcb_process_lldp_set_mib_change(struct ice_pf *pf, struct ice_rq_event_info *event);
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_main.c"
char ice_drv_ver[8U] = {(char)'0'};
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_main.c"
static char ice_driver_string[54U] = {(char)'I', (char)'n', (char)'t', (char)'e', (char)'l', (char)'(', (char)'R', (char)')', (char)' ', (char)'E', (char)'t', (char)'h', (char)'e', (char)'r', (char)'n', (char)'e', (char)'t', (char)' ', (char)'C', (char)'o', (char)'n', (char)'n', (char)'e', (char)'c', (char)'t', (char)'i', (char)'o', (char)'n', (char)' ', (char)'E', (char)'8', (char)'0', (char)'0', (char)' ', (char)'S', (char)'e', (char)'r', (char)'i', (char)'e', (char)'s', (char)' ', (char)'L', (char)'i', (char)'n', (char)'u', (char)'x', (char)' ', (char)'D', (char)'r', (char)'i', (char)'v', (char)'e', (char)'r'};
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_main.c"
static char ice_copyright[39U] = {(char)'C', (char)'o', (char)'p', (char)'y', (char)'r', (char)'i', (char)'g', (char)'h', (char)'t', (char)' ', (char)'(', (char)'c', (char)')', (char)' ', (char)'2', (char)'0', (char)'1', (char)'8', (char)',', (char)' ', (char)'I', (char)'n', (char)'t', (char)'e', (char)'l', (char)' ', (char)'C', (char)'o', (char)'r', (char)'p', (char)'o', (char)'r', (char)'a', (char)'t', (char)'i', (char)'o', (char)'n', (char)'.'};
#line 36  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_main.c"
static int debug = -1;
#line 44  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_main.c"
static struct workqueue_struct *ice_wq;
#line 45 
#line 5279 
static struct net_device_ops ice_netdev_safe_mode_ops;
#line 46 
#line 5290 
static struct net_device_ops ice_netdev_ops;
#line 47 
#line 4475 
static int ice_vsi_open(struct ice_vsi *vsi);
#line 49 
#line 4639 
static void ice_rebuild(struct ice_pf *pf, enum ice_reset_req reset_type);
#line 51 
#line 4531 
static void ice_vsi_release_all(struct ice_pf *pf);
#line 57  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_main.c"
static u16 ice_get_tx_pending(struct ice_ring *ring)
{
  #line 59 
  u16 head;
  #line 59 
  u16 tail;
  #line 61 
  head = ring->next_to_clean;
  #line 62 
  tail = ring->next_to_use;
  #line 64 
  if ((int)head != (int)tail) {
    #line 66 
    int tmp;
    #line 66 
    if ((int)head < (int)tail) 
                               #line 66 
                               tmp = (int)tail - (int)head; else 
                                                                 #line 66 
                                                                 tmp = ((int)ring->count + (int)tail) - (int)head;
    #line 66 
    return (unsigned short)tmp;
  }
  #line 67 
  return (unsigned short)0U;
}

#line 74  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_main.c"
static void ice_check_for_hang_subtask(struct ice_pf *pf)
{
  #line 77 
  struct ice_hw *hw;
  #line 78 
  unsigned int i;
  #line 79 
  int packets;
  #line 80 
  u32 v;
  #line 76 
  struct ice_vsi *vsi = (struct ice_vsi *)0;
  #line 82 
  v = 0U;
  #line 82 
  while ((unsigned int)pf->num_alloc_vsi > v) {
    #line 83 
    if (*(pf->vsi + (unsigned long)v) != (struct ice_vsi *)0 && (*(pf->vsi + (unsigned long)v))->type == (unsigned int)ICE_VSI_PF) {
      #line 84 
      vsi = *(pf->vsi + (unsigned long)v);
      #line 85 
      break;
    }
    #line 82 
    v ++;
  }
  #line 88 
  if (vsi == (struct ice_vsi *)0) 
                                  #line 89 
                                  return;
  else {
    #line 88 
    if ((int)test_bit(1L,(unsigned long *)(& vsi->state)) != 0) 
                                                                #line 89 
                                                                return;
  }
  #line 91 
  if (vsi->netdev == (struct net_device *)0) 
                                             #line 92 
                                             return;
  else {
    #line 91 
    if (! netif_carrier_ok(vsi->netdev)) 
                                         #line 92 
                                         return;
  }
  #line 94 
  hw = & (vsi->back)->hw;
  #line 96 
  i = 0U;
  #line 96 
  while ((unsigned int)vsi->num_txq > i) {
    {
      #line 97 
      struct ice_ring *tx_ring = *(vsi->tx_rings + (unsigned long)i);
      #line 99 
      if (tx_ring != (struct ice_ring *)0 && tx_ring->desc != (void *)0) {
        #line 107 
        packets = (int)tx_ring->stats.pkts & 2147483647;
        #line 108 
        if (tx_ring->__anonCompField_ice_ring_197.tx_stats.prev_pkt == packets) {
          #line 110 
          ice_trigger_sw_intr(hw,tx_ring->q_vector);
          #line 111 
          goto __Cont;
        }
        #line 113 
        ldv_inline_asm();
        #line 118 
        if ((unsigned int)ice_get_tx_pending(tx_ring) != 0U) 
                                                             #line 118 
                                                             tx_ring->__anonCompField_ice_ring_197.tx_stats.prev_pkt = packets; else 
                                                                    #line 118 
                                                                    tx_ring->__anonCompField_ice_ring_197.tx_stats.prev_pkt = -1;
      }
    }
    #line 96 
    __Cont: 
            #line 96 
    i ++;
  }
  #line 122 
  return;
}

#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_main.c"
static int ice_init_mac_fltr(struct ice_pf *pf)
{
  #line 134 
  enum ice_status status;
  #line 135 
  u8 broadcast[6U];
  #line 136 
  struct ice_vsi *vsi;
  #line 138 
  vsi = ice_get_main_vsi(pf);
  #line 139 
  if (vsi == (struct ice_vsi *)0) 
                                  #line 140 
                                  return -22;
  #line 147 
  status = ice_vsi_cfg_mac_fltr(vsi,(u8 *)(& (vsi->port_info)->mac.perm_addr),(_Bool)1);
  #line 148 
  if (status != ICE_SUCCESS) 
                             #line 149 
                             goto unregister;
  #line 154 
  eth_broadcast_addr((u8 *)(& broadcast));
  #line 155 
  status = ice_vsi_cfg_mac_fltr(vsi,(u8 *)(& broadcast),(_Bool)1);
  #line 156 
  if (status != ICE_SUCCESS) 
                             #line 157 
                             goto unregister;
  #line 159 
  return 0;
  #line 160 
  unregister: 
              #line 160 
  ;
  #line 164 
  if (status != ICE_SUCCESS && (unsigned int)(vsi->netdev)->reg_state == 1U) {
    #line 165 
    _dev_err(& (pf->pdev)->dev,(char *)"Could not add MAC filters error %d. Unregistering device\n",(int)status);
    #line 168 
    cif_unregister_netdev_0(vsi->netdev);
    #line 169 
    cif_free_netdev_0(vsi->netdev);
    #line 170 
    vsi->netdev = (struct net_device *)0;
  }
  #line 173 
  return -5;
}

#line 186  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_main.c"
static int ice_add_mac_to_sync_list(struct net_device *netdev, u8 *addr)
{
  #line 188 
  struct ice_netdev_priv *np = netdev_priv(netdev);
  #line 189 
  struct ice_vsi *vsi = np->vsi;
  #line 191 
  if (ice_add_mac_to_list(vsi,& vsi->tmp_sync_list,addr) != 0) 
                                                               #line 192 
                                                               return -22;
  #line 194 
  return 0;
}

#line 207  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_main.c"
static int ice_add_mac_to_unsync_list(struct net_device *netdev, u8 *addr)
{
  #line 209 
  struct ice_netdev_priv *np = netdev_priv(netdev);
  #line 210 
  struct ice_vsi *vsi = np->vsi;
  #line 212 
  if (ice_add_mac_to_list(vsi,& vsi->tmp_unsync_list,addr) != 0) 
                                                                 #line 213 
                                                                 return -22;
  #line 215 
  return 0;
}

#line 224  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_main.c"
static bool ice_vsi_fltr_changed(struct ice_vsi *vsi)
{
  #line 227 
  int tmp_2;
  #line 227 
  if ((int)test_bit(0L,(unsigned long *)(& vsi->flags)) != 0) 
                                                              #line 227 
                                                              tmp_2 = 1;
  else {
    #line 226 
    if ((int)test_bit(1L,(unsigned long *)(& vsi->flags)) != 0) 
                                                                #line 227 
                                                                tmp_2 = 1;
    else {
      #line 227 
      if ((int)test_bit(2L,(unsigned long *)(& vsi->flags)) != 0) 
                                                                  #line 227 
                                                                  tmp_2 = 1; else 
                                                                    #line 227 
                                                                    tmp_2 = 0;
    }
  }
  #line 227 
  return (_Bool)(tmp_2 != 0);
}

#line 238  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_main.c"
static int ice_cfg_promisc(struct ice_vsi *vsi, u8 promisc_m, bool set_promisc)
{
  #line 240 
  struct ice_hw *hw = & (vsi->back)->hw;
  #line 241 
  enum ice_status status = 0;
  #line 243 
  if (vsi->type != (unsigned int)ICE_VSI_PF) 
                                             #line 244 
                                             return 0;
  #line 246 
  if ((unsigned int)vsi->vlan_ena != 0U) 
                                         #line 247 
                                         status = ice_set_vlan_vsi_promisc(hw,(unsigned short)((int)vsi->idx),(unsigned char)((int)promisc_m),(_Bool)((bool)((int)set_promisc) != 0));
  else 
    #line 250 
    if ((int)set_promisc != 0) 
                               #line 251 
                               status = ice_set_vsi_promisc(hw,(unsigned short)((int)vsi->idx),(unsigned char)((int)promisc_m),(unsigned short)0); else 
                                                                    #line 254 
                                                                    status = ice_clear_vsi_promisc(hw,(unsigned short)((int)vsi->idx),(unsigned char)((int)promisc_m),(unsigned short)0);
  #line 258 
  if (status != ICE_SUCCESS) 
                             #line 259 
                             return -5;
  #line 261 
  return 0;
}

#line 270  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_main.c"
static int ice_vsi_sync_fltr(struct ice_vsi *vsi)
{
  #line 279 
  u8 promisc_m;
  #line 272 
  struct device *dev = & ((vsi->back)->pdev)->dev;
  #line 273 
  struct net_device *netdev = vsi->netdev;
  #line 274 
  bool promisc_forced_on = (_Bool)0;
  #line 275 
  struct ice_pf *pf = vsi->back;
  #line 276 
  struct ice_hw *hw = & pf->hw;
  #line 277 
  enum ice_status status = 0;
  #line 278 
  u32 changed_flags = 0U;
  #line 280 
  int err = 0;
  #line 282 
  if (vsi->netdev == (struct net_device *)0) 
                                             #line 283 
                                             return -22;
  #line 285 
  while (1) {
    #line 285 
    if (! ((int)test_and_clear_bit(21L,(unsigned long *)(& vsi->state)) != 0)) 
      #line 285 
      break;
    #line 286 
    usleep_range(1000UL,2000UL);
  }
  #line 288 
  changed_flags = vsi->current_netdev_flags ^ (vsi->netdev)->flags;
  #line 289 
  vsi->current_netdev_flags = (vsi->netdev)->flags;
  #line 291 
  INIT_LIST_HEAD_1(& vsi->tmp_sync_list);
  #line 292 
  INIT_LIST_HEAD_1(& vsi->tmp_unsync_list);
  #line 294 
  if ((int)ice_vsi_fltr_changed(vsi) != 0) {
    #line 295 
    cif_clear_bit_5(0L,(unsigned long *)(& vsi->flags));
    #line 296 
    cif_clear_bit_5(1L,(unsigned long *)(& vsi->flags));
    #line 297 
    cif_clear_bit_5(2L,(unsigned long *)(& vsi->flags));
    #line 300 
    netif_addr_lock_bh(netdev);
    #line 301 
    __dev_uc_sync(netdev,& ice_add_mac_to_sync_list,& ice_add_mac_to_unsync_list);
    #line 303 
    __dev_mc_sync(netdev,& ice_add_mac_to_sync_list,& ice_add_mac_to_unsync_list);
    #line 306 
    netif_addr_unlock_bh(netdev);
  }
  #line 310 
  status = ice_remove_mac(hw,& vsi->tmp_unsync_list);
  #line 311 
  ice_free_fltr_list(dev,& vsi->tmp_unsync_list);
  #line 312 
  if (status != ICE_SUCCESS) {
    #line 313 
    netdev_err(netdev,(char *)"Failed to delete MAC filters\n");
    #line 315 
    if (status == ICE_ERR_NO_MEMORY) {
      #line 316 
      err = -12;
      #line 317 
      goto out;
    }
  }
  #line 322 
  status = ice_add_mac(hw,& vsi->tmp_sync_list);
  #line 323 
  ice_free_fltr_list(dev,& vsi->tmp_sync_list);
  #line 328 
  if (status != ICE_SUCCESS && status != ICE_ERR_ALREADY_EXISTS) {
    #line 329 
    netdev_err(netdev,(char *)"Failed to add MAC filters\n");
    #line 334 
    if (hw->adminq.sq_last_status == (unsigned int)ICE_AQ_RC_ENOSPC) {
      #line 335 
      if (test_and_clear_bit(19L,(unsigned long *)(& vsi->state))) 
                                                                   #line 334 
                                                                   goto _LAND;
      else {
        #line 337 
        promisc_forced_on = (_Bool)1;
        #line 338 
        netdev_warn(netdev,(char *)"Reached MAC filter limit, forcing promisc mode on VSI %d\n",(int)vsi->vsi_num);
      }
    }
    else {
      #line 334 
      _LAND: {
               #line 342 
               err = -5;
               #line 343 
               goto out;
             }
    }
  }
  #line 347 
  if ((changed_flags & 512U) != 0U) 
    #line 348 
    if ((vsi->current_netdev_flags & 512U) != 0U) {
      #line 349 
      if ((unsigned int)vsi->vlan_ena != 0U) 
                                             #line 350 
                                             promisc_m = (unsigned char)204U; else 
                                                                    #line 352 
                                                                    promisc_m = (unsigned char)12U;
      #line 354 
      err = ice_cfg_promisc(vsi,(unsigned char)((int)promisc_m),(_Bool)1);
      #line 355 
      if (err != 0) {
        #line 356 
        netdev_err(netdev,(char *)"Error setting Multicast promiscuous mode on VSI %i\n",(int)vsi->vsi_num);
        #line 358 
        vsi->current_netdev_flags &= 4294966783U;
        #line 359 
        goto out_promisc;
      }
    }
    else 
      #line 361 
      if ((vsi->current_netdev_flags & 512U) == 0U) {
        #line 362 
        if ((unsigned int)vsi->vlan_ena != 0U) 
                                               #line 363 
                                               promisc_m = (unsigned char)204U; else 
                                                                    #line 365 
                                                                    promisc_m = (unsigned char)12U;
        #line 367 
        err = ice_cfg_promisc(vsi,(unsigned char)((int)promisc_m),(_Bool)0);
        #line 368 
        if (err != 0) {
          #line 369 
          netdev_err(netdev,(char *)"Error clearing Multicast promiscuous mode on VSI %i\n",(int)vsi->vsi_num);
          #line 371 
          vsi->current_netdev_flags |= 512U;
          #line 372 
          goto out_promisc;
        }
      }
  #line 377 
  if ((changed_flags & 256U) != 0U || (int)promisc_forced_on != 0) 
                                                                   #line 377 
                                                                   goto _LOR;
  else {
    #line 377 
    if ((int)test_bit(3L,(unsigned long *)(& vsi->flags)) != 0) {
      #line 377 
      _LOR: {
              #line 379 
              cif_clear_bit_5(3L,(unsigned long *)(& vsi->flags));
              #line 380 
              if ((vsi->current_netdev_flags & 256U) != 0U) {
                #line 382 
                status = ice_cfg_dflt_vsi(hw,(unsigned short)((int)vsi->idx),(_Bool)1,(unsigned char)1);
                #line 384 
                if (status != ICE_SUCCESS) {
                  #line 385 
                  netdev_err(netdev,(char *)"Error setting default VSI %i Rx rule\n",(int)vsi->vsi_num);
                  #line 387 
                  vsi->current_netdev_flags &= 4294967039U;
                  #line 388 
                  err = -5;
                  #line 389 
                  goto out_promisc;
                }
              }
              else {
                #line 393 
                status = ice_cfg_dflt_vsi(hw,(unsigned short)((int)vsi->idx),(_Bool)0,(unsigned char)1);
                #line 395 
                if (status != ICE_SUCCESS) {
                  #line 396 
                  netdev_err(netdev,(char *)"Error clearing default VSI %i Rx rule\n",(int)vsi->vsi_num);
                  #line 398 
                  vsi->current_netdev_flags |= 256U;
                  #line 399 
                  err = -5;
                  #line 400 
                  goto out_promisc;
                }
              }
            }
    }
  }
  #line 404 
  goto exit;
  #line 406 
  out_promisc: 
               #line 406 
  ;
  #line 407 
  cif_set_bit_5(3L,(unsigned long *)(& vsi->flags));
  #line 408 
  goto exit;
  #line 409 
  out: 
       #line 409 
  ;
  #line 411 
  cif_set_bit_5(0L,(unsigned long *)(& vsi->flags));
  #line 412 
  cif_set_bit_5(1L,(unsigned long *)(& vsi->flags));
  #line 413 
  exit: 
        #line 413 
  ;
  #line 414 
  cif_clear_bit_5(21L,(unsigned long *)(& vsi->state));
  #line 415 
  return err;
}

#line 422  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_main.c"
static void ice_sync_fltr_subtask(struct ice_pf *pf)
{
  #line 424 
  int v;
  #line 426 
  if (pf == (struct ice_pf *)0) 
                                #line 427 
                                return;
  else {
    #line 426 
    if (! test_bit(0L,(unsigned long *)(& pf->flags))) 
                                                       #line 427 
                                                       return;
  }
  #line 429 
  cif_clear_bit_5(0L,(unsigned long *)(& pf->flags));
  #line 431 
  v = 0;
  #line 431 
  while ((int)pf->num_alloc_vsi > v) {
    #line 432 
    if (*(pf->vsi + (unsigned long)v) != (struct ice_vsi *)0) {
      #line 432 
      if ((int)ice_vsi_fltr_changed(*(pf->vsi + (unsigned long)v)) != 0) {
        #line 432 
        if (ice_vsi_sync_fltr(*(pf->vsi + (unsigned long)v)) != 0) {
          #line 435 
          cif_set_bit_5(0L,(unsigned long *)(& pf->flags));
          #line 436 
          break;
        }
      }
    }
    #line 431 
    v ++;
  }
  #line 438 
  return;
}

#line 445  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_main.c"
static void ice_pf_dis_all_vsi(struct ice_pf *pf, bool locked)
{
  #line 447 
  int v;
  #line 449 
  v = 0;
  #line 449 
  while ((int)pf->num_alloc_vsi > v) {
    #line 450 
    if (*(pf->vsi + (unsigned long)v) != (struct ice_vsi *)0) 
                                                              #line 451 
                                                              ice_dis_vsi(*(pf->vsi + (unsigned long)v),(_Bool)((bool)((int)locked) != 0));
    #line 449 
    v ++;
  }
  #line 452 
  return;
}

#line 461  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_main.c"
static void ice_prepare_for_reset(struct ice_pf *pf)
{
  #line 464 
  int i;
  #line 463 
  struct ice_hw *hw = & pf->hw;
  #line 467 
  if ((int)test_bit(3L,(unsigned long *)(& pf->state)) != 0) 
                                                             #line 468 
                                                             return;
  #line 471 
  if ((int)ice_check_sq_alive(hw,& hw->mailboxq) != 0) 
                                                       #line 472 
                                                       ice_vc_notify_reset(pf);
  #line 475 
  i = 0;
  #line 475 
  while (pf->num_alloc_vfs > i) {
    #line 476 
    ice_set_vf_state_qs_dis(pf->vf + (unsigned long)i);
    #line 475 
    i ++;
  }
  #line 479 
  ice_clear_hw_tbls(hw);
  #line 481 
  ice_pf_dis_all_vsi(pf,(_Bool)0);
  #line 483 
  if (hw->port_info != (struct ice_port_info *)0) 
                                                  #line 484 
                                                  ice_sched_clear_port(hw->port_info);
  #line 486 
  ice_shutdown_all_ctrlq(hw);
  #line 488 
  cif_set_bit_5(3L,(unsigned long *)(& pf->state));
  #line 489 
  return;
}

#line 497  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_main.c"
static void ice_do_reset(struct ice_pf *pf, enum ice_reset_req reset_type)
{
  #line 499 
  struct device *dev = & (pf->pdev)->dev;
  #line 500 
  struct ice_hw *hw = & pf->hw;
  {
    #line 502 
    bool branch;
    #line 502 
    struct _ddebug __UNIQUE_ID_ddebug543 = {.modname = (char *)"ice", .function = (char *)"ice_do_reset", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_main.c", .format = (char *)"reset_type 0x%x requested\n", .lineno = (unsigned int)502U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 502 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug543.key.dd_key_false.key,(_Bool)0);
    #line 502 
    if ((long)((long)((int)branch != 0)) != 0L) 
                                                #line 502 
                                                __dynamic_dev_dbg(& __UNIQUE_ID_ddebug543,dev,(char *)"reset_type 0x%x requested\n",(unsigned int)reset_type);
  }
  {
    #line 503 
    int __ret_warn_on = ((unsigned long)preempt_count() & 2096896UL) != 0UL;
    #line 503 
    if ((long)(__ret_warn_on != 0) != 0L) {
      #line 504 
      ldv_inline_asm();
      #line 505 
      ldv_inline_asm();
    }
    #line 503 
    long tmp_2 = (long)(__ret_warn_on != 0);
  }
  #line 505 
  ice_prepare_for_reset(pf);
  #line 508 
  if (ice_reset(hw,reset_type) != ICE_SUCCESS) {
    #line 509 
    _dev_err(dev,(char *)"reset %d failed\n",(unsigned int)reset_type);
    #line 510 
    cif_set_bit_5(13L,(unsigned long *)(& pf->state));
    #line 511 
    cif_clear_bit_5(4L,(unsigned long *)(& pf->state));
    #line 512 
    cif_clear_bit_5(3L,(unsigned long *)(& pf->state));
    #line 513 
    cif_clear_bit_5(6L,(unsigned long *)(& pf->state));
    #line 514 
    cif_clear_bit_5(7L,(unsigned long *)(& pf->state));
    #line 515 
    cif_clear_bit_5(8L,(unsigned long *)(& pf->state));
    #line 516 
    return;
  }
  #line 523 
  if (reset_type == (unsigned int)ICE_RESET_PFR) {
    #line 524 
    pf->pfr_count = (u16)((int)pf->pfr_count + 1);
    #line 525 
    ice_rebuild(pf,reset_type);
    #line 526 
    cif_clear_bit_5(3L,(unsigned long *)(& pf->state));
    #line 527 
    cif_clear_bit_5(6L,(unsigned long *)(& pf->state));
    #line 528 
    ice_reset_all_vfs(pf,(_Bool)1);
  }
  #line 530 
  return;
}

#line 536  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_main.c"
static void ice_reset_subtask(struct ice_pf *pf)
{
  #line 538 
  enum ice_reset_req reset_type = ICE_RESET_POR;
  #line 550 
  if ((int)test_bit(4L,(unsigned long *)(& pf->state)) != 0) {
    #line 552 
    if ((int)test_and_clear_bit(9L,(unsigned long *)(& pf->state)) != 0) 
      #line 553 
      reset_type = ICE_RESET_CORER;
    #line 554 
    if ((int)test_and_clear_bit(10L,(unsigned long *)(& pf->state)) != 0) 
      #line 555 
      reset_type = ICE_RESET_GLOBR;
    #line 556 
    if ((int)test_and_clear_bit(11L,(unsigned long *)(& pf->state)) != 0) 
      #line 557 
      reset_type = ICE_RESET_EMPR;
    #line 559 
    if (reset_type == (unsigned int)ICE_RESET_POR) 
                                                   #line 560 
                                                   return;
    #line 561 
    ice_prepare_for_reset(pf);
    #line 564 
    if (ice_check_reset(& pf->hw) != ICE_SUCCESS) 
                                                  #line 565 
                                                  cif_set_bit_5(13L,(unsigned long *)(& pf->state));
    else {
      #line 568 
      pf->hw.reset_ongoing = (unsigned char)0U;
      #line 569 
      ice_rebuild(pf,reset_type);
      #line 573 
      cif_clear_bit_5(4L,(unsigned long *)(& pf->state));
      #line 574 
      cif_clear_bit_5(3L,(unsigned long *)(& pf->state));
      #line 575 
      cif_clear_bit_5(6L,(unsigned long *)(& pf->state));
      #line 576 
      cif_clear_bit_5(7L,(unsigned long *)(& pf->state));
      #line 577 
      cif_clear_bit_5(8L,(unsigned long *)(& pf->state));
      #line 578 
      ice_reset_all_vfs(pf,(_Bool)1);
    }
    #line 581 
    return;
  }
  #line 585 
  if ((int)test_bit(6L,(unsigned long *)(& pf->state)) != 0) 
                                                             #line 586 
                                                             reset_type = ICE_RESET_PFR;
  #line 587 
  if ((int)test_bit(7L,(unsigned long *)(& pf->state)) != 0) 
                                                             #line 588 
                                                             reset_type = ICE_RESET_CORER;
  #line 589 
  if ((int)test_bit(8L,(unsigned long *)(& pf->state)) != 0) 
                                                             #line 590 
                                                             reset_type = ICE_RESET_GLOBR;
  #line 592 
  if (reset_type == (unsigned int)ICE_RESET_POR) 
                                                 #line 593 
                                                 return;
  #line 596 
  if (! test_bit(1L,(unsigned long *)(& pf->state))) {
    #line 597 
    if (! test_bit(21L,(unsigned long *)(& pf->state))) 
                                                        #line 598 
                                                        ice_do_reset(pf,reset_type);
  }
  #line 599 
  return;
}

#line 606  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_main.c"
static void ice_print_topo_conflict(struct ice_vsi *vsi)
{
  #line 608 
  switch ((int)(vsi->port_info)->phy.link_info.topo_media_conflict) {
    #line 609 
    case 1: 
            #line 609 
    ;
    #line 610 
    case 2: 
            #line 610 
    ;
    #line 611 
    case 16: 
             #line 611 
    ;
    #line 612 
    case 32: 
             #line 612 
    ;
    #line 613 
    case 64: 
             #line 613 
    ;
    #line 614 
    netdev_info(vsi->netdev,(char *)"Possible mis-configuration of the Ethernet port detected, please use the Intel(R) Ethernet Port Configuration Tool application to address the issue.\n");
    #line 615 
    break;
    #line 616 
    case 128: 
              #line 616 
    ;
    #line 617 
    netdev_info(vsi->netdev,(char *)"Rx/Tx is disabled on this device because an unsupported module type was detected. Refer to the Intel(R) Ethernet Adapters and Devices User Guide for a list of supported modules.\n");
    #line 618 
    break;
    #line 619 
    default: 
             #line 619 
    ;
    #line 620 
    break;
  }
  #line 622 
  return;
}

#line 629  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_main.c"
void ice_print_link_msg(struct ice_vsi *vsi, bool isup)
{
  #line 631 
  struct ice_aqc_get_phy_caps_data *caps;
  #line 632 
  enum ice_status status;
  #line 633 
  char *fec_req;
  #line 634 
  char *speed;
  #line 635 
  char *fec;
  #line 636 
  char *fc;
  #line 637 
  char *an;
  #line 639 
  if (vsi == (struct ice_vsi *)0) 
                                  #line 640 
                                  return;
  #line 642 
  if ((int)vsi->current_isup == (int)isup) 
                                           #line 643 
                                           return;
  #line 645 
  vsi->current_isup = (unsigned char)isup;
  #line 647 
  if (! isup) {
    #line 648 
    netdev_info(vsi->netdev,(char *)"NIC Link is Down\n");
    #line 649 
    return;
  }
  #line 652 
  switch ((int)(vsi->port_info)->phy.link_info.link_speed) {
    #line 653 
    case 1024: 
               #line 653 
    ;
    #line 654 
    speed = (char *)"100 G";
    #line 655 
    break;
    #line 656 
    case 512: 
              #line 656 
    ;
    #line 657 
    speed = (char *)"50 G";
    #line 658 
    break;
    #line 659 
    case 256: 
              #line 659 
    ;
    #line 660 
    speed = (char *)"40 G";
    #line 661 
    break;
    #line 662 
    case 128: 
              #line 662 
    ;
    #line 663 
    speed = (char *)"25 G";
    #line 664 
    break;
    #line 665 
    case 64: 
             #line 665 
    ;
    #line 666 
    speed = (char *)"20 G";
    #line 667 
    break;
    #line 668 
    case 32: 
             #line 668 
    ;
    #line 669 
    speed = (char *)"10 G";
    #line 670 
    break;
    #line 671 
    case 16: 
             #line 671 
    ;
    #line 672 
    speed = (char *)"5 G";
    #line 673 
    break;
    #line 674 
    case 8: 
            #line 674 
    ;
    #line 675 
    speed = (char *)"2.5 G";
    #line 676 
    break;
    #line 677 
    case 4: 
            #line 677 
    ;
    #line 678 
    speed = (char *)"1 G";
    #line 679 
    break;
    #line 680 
    case 2: 
            #line 680 
    ;
    #line 681 
    speed = (char *)"100 M";
    #line 682 
    break;
    #line 683 
    default: 
             #line 683 
    ;
    #line 684 
    speed = (char *)"Unknown";
    #line 685 
    break;
  }
  #line 688 
  switch ((unsigned int)(vsi->port_info)->fc.current_mode) {
    #line 689 
    case (unsigned int)3: 
                          #line 689 
    ;
    #line 690 
    fc = (char *)"Rx/Tx";
    #line 691 
    break;
    #line 692 
    case (unsigned int)2: 
                          #line 692 
    ;
    #line 693 
    fc = (char *)"Tx";
    #line 694 
    break;
    #line 695 
    case (unsigned int)1: 
                          #line 695 
    ;
    #line 696 
    fc = (char *)"Rx";
    #line 697 
    break;
    #line 698 
    case (unsigned int)0: 
                          #line 698 
    ;
    #line 699 
    fc = (char *)"None";
    #line 700 
    break;
    #line 701 
    default: 
             #line 701 
    ;
    #line 702 
    fc = (char *)"Unknown";
    #line 703 
    break;
  }
  #line 707 
  switch ((int)(vsi->port_info)->phy.link_info.fec_info) {
    #line 708 
    case 2: 
            #line 708 
    ;
    #line 710 
    case 4: 
            #line 710 
    ;
    #line 711 
    fec = (char *)"RS-FEC";
    #line 712 
    break;
    #line 713 
    case 1: 
            #line 713 
    ;
    #line 714 
    fec = (char *)"FC-FEC/BASE-R";
    #line 715 
    break;
    #line 716 
    default: 
             #line 716 
    ;
    #line 717 
    fec = (char *)"NONE";
    #line 718 
    break;
  }
  #line 722 
  if (((unsigned long)(vsi->port_info)->phy.link_info.an_info & 1UL) != 0UL) 
    #line 723 
    an = (char *)"True"; else 
                              #line 725 
                              an = (char *)"False";
  #line 728 
  caps = (struct ice_aqc_get_phy_caps_data *)kzalloc_1(560UL,3264U);
  #line 729 
  if (caps == (struct ice_aqc_get_phy_caps_data *)0) {
    #line 730 
    fec_req = (char *)"Unknown";
    #line 731 
    goto done;
  }
  #line 734 
  status = ice_aq_get_phy_caps(vsi->port_info,(_Bool)0,(unsigned char)4,caps,(struct ice_sq_cd *)0);
  #line 736 
  if (status != ICE_SUCCESS) 
                             #line 737 
                             netdev_info(vsi->netdev,(char *)"Get phy capability failed.\n");
  #line 739 
  if (((unsigned long)caps->link_fec_options & 4UL) != 0UL || ((unsigned long)caps->link_fec_options & 16UL) != 0UL) 
    #line 741 
    fec_req = (char *)"RS-FEC";
  else 
    #line 742 
    if (((unsigned long)caps->link_fec_options & 2UL) != 0UL || ((unsigned long)caps->link_fec_options & 8UL) != 0UL) 
      #line 744 
      fec_req = (char *)"FC-FEC/BASE-R"; else 
                                              #line 746 
                                              fec_req = (char *)"NONE";
  #line 748 
  kfree((void *)caps);
  #line 750 
  done: 
        #line 750 
  ;
  #line 751 
  netdev_info(vsi->netdev,(char *)"NIC Link is up %sbps, Requested FEC: %s, FEC: %s, Autoneg: %s, Flow Control: %s\n",speed,fec_req,fec,an,fc);
  #line 753 
  ice_print_topo_conflict(vsi);
  #line 754 
  return;
}

#line 761  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_main.c"
static void ice_vsi_link_event(struct ice_vsi *vsi, bool link_up)
{
  #line 763 
  if (vsi == (struct ice_vsi *)0) 
                                  #line 764 
                                  return;
  #line 766 
  if ((int)test_bit(1L,(unsigned long *)(& vsi->state)) != 0) 
                                                              #line 767 
                                                              return;
  else 
    #line 766 
    if (vsi->netdev == (struct net_device *)0) 
                                               #line 767 
                                               return;
  #line 769 
  if (vsi->type == (unsigned int)ICE_VSI_PF) {
    #line 770 
    ;
    #line 770 
    if ((int)netif_carrier_ok(vsi->netdev) == (int)link_up) 
                                                            #line 771 
                                                            return;
    #line 773 
    if ((int)link_up != 0) {
      #line 774 
      netif_carrier_on(vsi->netdev);
      #line 775 
      netif_tx_wake_all_queues(vsi->netdev);
    }
    else {
      #line 777 
      netif_carrier_off(vsi->netdev);
      #line 778 
      netif_tx_stop_all_queues(vsi->netdev);
    }
  }
  #line 781 
  return;
}

#line 793  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_main.c"
static int ice_link_event(struct ice_pf *pf, struct ice_port_info *pi, bool link_up, u16 link_speed)
{
  #line 797 
  struct ice_phy_info *phy_info;
  #line 798 
  struct ice_vsi *vsi;
  #line 799 
  u16 old_link_speed;
  #line 800 
  bool old_link;
  #line 801 
  int result;
  #line 796 
  struct device *dev = & (pf->pdev)->dev;
  #line 803 
  phy_info = & pi->phy;
  #line 804 
  phy_info->link_info_old = phy_info->link_info;
  #line 806 
  old_link = (_Bool)(((unsigned long)phy_info->link_info_old.link_info & 1UL) != 0UL);
  #line 807 
  old_link_speed = phy_info->link_info_old.link_speed;
  #line 812 
  result = (int)ice_update_link_info(pi);
  #line 813 
  if (result != 0) {
    #line 814 
    bool branch;
    #line 814 
    struct _ddebug __UNIQUE_ID_ddebug545 = {.modname = (char *)"ice", .function = (char *)"ice_link_event", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_main.c", .format = (char *)"Failed to update link status and re-enable link events for port %d\n", .lineno = (unsigned int)814U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 814 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug545.key.dd_key_false.key,(_Bool)0);
    #line 814 
    if ((long)((long)((int)branch != 0)) != 0L) 
                                                #line 814 
                                                __dynamic_dev_dbg(& __UNIQUE_ID_ddebug545,dev,(char *)"Failed to update link status and re-enable link events for port %d\n",(int)pi->lport);
  }
  #line 819 
  if ((int)link_up == (int)old_link && (int)link_speed == (int)old_link_speed) 
    #line 820 
    return result;
  #line 822 
  vsi = ice_get_main_vsi(pf);
  #line 823 
  if (vsi == (struct ice_vsi *)0 || vsi->port_info == (struct ice_port_info *)0) 
    #line 824 
    return -22;
  #line 827 
  if (! test_bit(8L,(unsigned long *)(& pf->flags))) 
    #line 827 
    if (((unsigned long)pi->phy.link_info.link_info & 64UL) == 0UL) {
      #line 829 
      cif_set_bit_5(8L,(unsigned long *)(& pf->flags));
      #line 831 
      result = (int)ice_aq_set_link_restart_an(pi,(_Bool)0,(struct ice_sq_cd *)0);
      #line 832 
      if (result != 0) {
        {
          #line 833 
          bool branch_0;
          #line 833 
          struct _ddebug __UNIQUE_ID_ddebug546 = {.modname = (char *)"ice", .function = (char *)"ice_link_event", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_main.c", .format = (char *)"Failed to set link down, VSI %d error %d\n", .lineno = (unsigned int)833U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
          #line 833 
          branch_0 = arch_static_branch(& __UNIQUE_ID_ddebug546.key.dd_key_false.key,(_Bool)0);
          #line 833 
          if ((long)((long)((int)branch_0 != 0)) != 0L) 
                                                        #line 833 
                                                        __dynamic_dev_dbg(& __UNIQUE_ID_ddebug546,dev,(char *)"Failed to set link down, VSI %d error %d\n",(int)vsi->vsi_num,result);
        }
        #line 836 
        return result;
      }
    }
  #line 840 
  ice_vsi_link_event(vsi,(_Bool)((bool)((int)link_up) != 0));
  #line 841 
  ice_print_link_msg(vsi,(_Bool)((bool)((int)link_up) != 0));
  #line 843 
  if (pf->num_alloc_vfs != 0) 
                              #line 844 
                              ice_vc_notify_link_state(pf);
  #line 846 
  return result;
}

#line 853  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_main.c"
static void ice_watchdog_subtask(struct ice_pf *pf)
{
  #line 855 
  int i;
  #line 858 
  if ((int)test_bit(1L,(unsigned long *)(& pf->state)) != 0) 
                                                             #line 860 
                                                             return;
  else {
    #line 858 
    if ((int)test_bit(21L,(unsigned long *)(& pf->state)) != 0) 
                                                                #line 860 
                                                                return;
  }
  {
    #line 863 
    unsigned long __dummy;
    #line 863 
    unsigned long __dummy2;
    }
  #line 863 
  if (1 != 0) {
    {
      #line 863 
      unsigned long __dummy_0;
      #line 863 
      unsigned long __dummy2_0;
      }
    #line 863 
    if (1 != 0) 
      #line 863 
      if ((long)(jiffies - (pf->serv_tmr_prev + pf->serv_tmr_period)) < 0L) 
        #line 865 
        return;
  }
  #line 867 
  pf->serv_tmr_prev = jiffies;
  #line 872 
  ice_update_pf_stats(pf);
  #line 873 
  i = 0;
  #line 873 
  while ((int)pf->num_alloc_vsi > i) {
    #line 874 
    if (*(pf->vsi + (unsigned long)i) != (struct ice_vsi *)0 && (*(pf->vsi + (unsigned long)i))->netdev != (struct net_device *)0) 
      #line 875 
      ice_update_vsi_stats(*(pf->vsi + (unsigned long)i));
    #line 873 
    i ++;
  }
  #line 876 
  return;
}

#line 884  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_main.c"
static int ice_init_link_events(struct ice_port_info *pi)
{
  #line 886 
  u16 mask;
  #line 888 
  mask = (unsigned short)65273U;
  #line 891 
  if (ice_aq_set_event_mask(pi->hw,(unsigned char)((int)pi->lport),
                              (unsigned short)((int)mask),
                              (struct ice_sq_cd *)0) != ICE_SUCCESS) {
    {
      #line 892 
      bool branch;
      #line 892 
      struct _ddebug __UNIQUE_ID_ddebug547 = {.modname = (char *)"ice", .function = (char *)"ice_init_link_events", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_main.c", .format = (char *)"Failed to set link event mask for port %d\n", .lineno = (unsigned int)892U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 892 
      branch = arch_static_branch(& __UNIQUE_ID_ddebug547.key.dd_key_false.key,(_Bool)0);
      #line 892 
      if ((long)((long)((int)branch != 0)) != 0L) {
        #line 892 
        void *__mptr;
        #line 892 
        ;
        #line 892 
        __mptr = (void *)pi->hw;
        #line 892 
        __dynamic_dev_dbg(& __UNIQUE_ID_ddebug547,& (((struct ice_pf *)(__mptr + 18446744073709549512U))->pdev)->dev,(char *)"Failed to set link event mask for port %d\n",(int)pi->lport);
      }
    }
    #line 895 
    return -5;
  }
  #line 898 
  if (ice_aq_get_link_info(pi,(_Bool)1,(struct ice_link_status *)0,
                             (struct ice_sq_cd *)0) != ICE_SUCCESS) {
    {
      #line 899 
      bool branch_0;
      #line 899 
      struct _ddebug __UNIQUE_ID_ddebug548 = {.modname = (char *)"ice", .function = (char *)"ice_init_link_events", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_main.c", .format = (char *)"Failed to enable link events for port %d\n", .lineno = (unsigned int)899U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 899 
      branch_0 = arch_static_branch(& __UNIQUE_ID_ddebug548.key.dd_key_false.key,(_Bool)0);
      #line 899 
      if ((long)((long)((int)branch_0 != 0)) != 0L) {
        #line 899 
        void *__mptr_0;
        #line 899 
        ;
        #line 899 
        __mptr_0 = (void *)pi->hw;
        #line 899 
        __dynamic_dev_dbg(& __UNIQUE_ID_ddebug548,& (((struct ice_pf *)(__mptr_0 + 18446744073709549512U))->pdev)->dev,(char *)"Failed to enable link events for port %d\n",(int)pi->lport);
      }
    }
    #line 902 
    return -5;
  }
  #line 905 
  return 0;
}

#line 914  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_main.c"
static int ice_handle_link_event(struct ice_pf *pf, struct ice_rq_event_info *event)
{
  #line 916 
  struct ice_aqc_get_link_status_data *link_data;
  #line 917 
  struct ice_port_info *port_info;
  #line 918 
  int status;
  #line 920 
  link_data = (struct ice_aqc_get_link_status_data *)event->msg_buf;
  #line 921 
  port_info = pf->hw.port_info;
  #line 922 
  if (port_info == (struct ice_port_info *)0) 
                                              #line 923 
                                              return -22;
  #line 925 
  status = ice_link_event(pf,port_info,(_Bool)(((unsigned long)link_data->link_info & 1UL) != 0UL),(unsigned short)((int)link_data->link_speed));
  #line 928 
  if (status != 0) {
    #line 929 
    bool branch;
    #line 929 
    struct _ddebug __UNIQUE_ID_ddebug549 = {.modname = (char *)"ice", .function = (char *)"ice_handle_link_event", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_main.c", .format = (char *)"Could not process link event, error %d\n", .lineno = (unsigned int)929U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 929 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug549.key.dd_key_false.key,(_Bool)0);
    #line 929 
    if ((long)((long)((int)branch != 0)) != 0L) 
                                                #line 929 
                                                __dynamic_dev_dbg(& __UNIQUE_ID_ddebug549,& (pf->pdev)->dev,(char *)"Could not process link event, error %d\n",status);
  }
  #line 932 
  return status;
}

#line 940  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_main.c"
static int __ice_clean_ctrlq(struct ice_pf *pf, enum ice_ctl_q q_type)
{
  #line 943 
  struct ice_rq_event_info event;
  #line 945 
  struct ice_ctl_q_info *cq;
  #line 946 
  u16 pending;
  #line 947 
  char *qtype;
  #line 948 
  u32 oldval;
  #line 948 
  u32 val;
  #line 942 
  struct device *dev = & (pf->pdev)->dev;
  #line 944 
  struct ice_hw *hw = & pf->hw;
  #line 946 
  u16 i = (unsigned short)0U;
  #line 951 
  if ((int)test_bit(13L,(unsigned long *)(& pf->state)) != 0) 
                                                              #line 952 
                                                              return 0;
  #line 954 
  switch ((unsigned int)q_type) {
    #line 955 
    case (unsigned int)1: 
                          #line 955 
    ;
    #line 956 
    cq = & hw->adminq;
    #line 957 
    qtype = (char *)"Admin";
    #line 958 
    break;
    #line 959 
    case (unsigned int)2: 
                          #line 959 
    ;
    #line 960 
    cq = & hw->mailboxq;
    #line 961 
    qtype = (char *)"Mailbox";
    #line 962 
    break;
    #line 963 
    default: 
             #line 963 
    ;
    #line 964 
    _dev_warn(dev,(char *)"Unknown control queue type 0x%x\n",(unsigned int)q_type);
    #line 965 
    return 0;
  }
  #line 971 
  val = readl((void *)(hw->hw_addr + (unsigned long)cq->rq.len));
  #line 972 
  if (((unsigned long)val & 1879048192UL) != 0UL) {
    #line 974 
    oldval = val;
    #line 975 
    if (((unsigned long)val & 268435456UL) != 0UL) {
      #line 976 
      bool branch;
      #line 976 
      struct _ddebug __UNIQUE_ID_ddebug550 = {.modname = (char *)"ice", .function = (char *)"__ice_clean_ctrlq", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_main.c", .format = (char *)"%s Receive Queue VF Error detected\n", .lineno = (unsigned int)976U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 976 
      branch = arch_static_branch(& __UNIQUE_ID_ddebug550.key.dd_key_false.key,(_Bool)0);
      #line 976 
      if ((long)((long)((int)branch != 0)) != 0L) 
                                                  #line 976 
                                                  __dynamic_dev_dbg(& __UNIQUE_ID_ddebug550,dev,(char *)"%s Receive Queue VF Error detected\n",qtype);
    }
    #line 978 
    if (((unsigned long)val & 536870912UL) != 0UL) {
      #line 979 
      bool branch_0;
      #line 979 
      struct _ddebug __UNIQUE_ID_ddebug551 = {.modname = (char *)"ice", .function = (char *)"__ice_clean_ctrlq", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_main.c", .format = (char *)"%s Receive Queue Overflow Error detected\n", .lineno = (unsigned int)979U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 979 
      branch_0 = arch_static_branch(& __UNIQUE_ID_ddebug551.key.dd_key_false.key,(_Bool)0);
      #line 979 
      if ((long)((long)((int)branch_0 != 0)) != 0L) 
                                                    #line 979 
                                                    __dynamic_dev_dbg(& __UNIQUE_ID_ddebug551,dev,(char *)"%s Receive Queue Overflow Error detected\n",qtype);
    }
    #line 983 
    if (((unsigned long)val & 1073741824UL) != 0UL) {
      #line 984 
      bool branch_1;
      #line 984 
      struct _ddebug __UNIQUE_ID_ddebug552 = {.modname = (char *)"ice", .function = (char *)"__ice_clean_ctrlq", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_main.c", .format = (char *)"%s Receive Queue Critical Error detected\n", .lineno = (unsigned int)984U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 984 
      branch_1 = arch_static_branch(& __UNIQUE_ID_ddebug552.key.dd_key_false.key,(_Bool)0);
      #line 984 
      if ((long)((long)((int)branch_1 != 0)) != 0L) 
                                                    #line 984 
                                                    __dynamic_dev_dbg(& __UNIQUE_ID_ddebug552,dev,(char *)"%s Receive Queue Critical Error detected\n",qtype);
    }
    #line 987 
    val &= 2415919103U;
    #line 989 
    if (oldval != val) 
                       #line 990 
                       writel(val,(void *)(hw->hw_addr + (unsigned long)cq->rq.len));
  }
  #line 993 
  val = readl((void *)(hw->hw_addr + (unsigned long)cq->sq.len));
  #line 994 
  if (((unsigned long)val & 1879048192UL) != 0UL) {
    #line 996 
    oldval = val;
    #line 997 
    if (((unsigned long)val & 268435456UL) != 0UL) {
      #line 998 
      bool branch_2;
      #line 998 
      struct _ddebug __UNIQUE_ID_ddebug553 = {.modname = (char *)"ice", .function = (char *)"__ice_clean_ctrlq", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_main.c", .format = (char *)"%s Send Queue VF Error detected\n", .lineno = (unsigned int)998U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 998 
      branch_2 = arch_static_branch(& __UNIQUE_ID_ddebug553.key.dd_key_false.key,(_Bool)0);
      #line 998 
      if ((long)((long)((int)branch_2 != 0)) != 0L) 
                                                    #line 998 
                                                    __dynamic_dev_dbg(& __UNIQUE_ID_ddebug553,dev,(char *)"%s Send Queue VF Error detected\n",qtype);
    }
    #line 1000 
    if (((unsigned long)val & 536870912UL) != 0UL) {
      #line 1001 
      bool branch_3;
      #line 1001 
      struct _ddebug __UNIQUE_ID_ddebug554 = {.modname = (char *)"ice", .function = (char *)"__ice_clean_ctrlq", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_main.c", .format = (char *)"%s Send Queue Overflow Error detected\n", .lineno = (unsigned int)1001U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 1001 
      branch_3 = arch_static_branch(& __UNIQUE_ID_ddebug554.key.dd_key_false.key,(_Bool)0);
      #line 1001 
      if ((long)((long)((int)branch_3 != 0)) != 0L) 
                                                    #line 1001 
                                                    __dynamic_dev_dbg(& __UNIQUE_ID_ddebug554,dev,(char *)"%s Send Queue Overflow Error detected\n",qtype);
    }
    #line 1004 
    if (((unsigned long)val & 1073741824UL) != 0UL) {
      #line 1005 
      bool branch_4;
      #line 1005 
      struct _ddebug __UNIQUE_ID_ddebug555 = {.modname = (char *)"ice", .function = (char *)"__ice_clean_ctrlq", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_main.c", .format = (char *)"%s Send Queue Critical Error detected\n", .lineno = (unsigned int)1005U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 1005 
      branch_4 = arch_static_branch(& __UNIQUE_ID_ddebug555.key.dd_key_false.key,(_Bool)0);
      #line 1005 
      if ((long)((long)((int)branch_4 != 0)) != 0L) 
                                                    #line 1005 
                                                    __dynamic_dev_dbg(& __UNIQUE_ID_ddebug555,dev,(char *)"%s Send Queue Critical Error detected\n",qtype);
    }
    #line 1007 
    val &= 2415919103U;
    #line 1009 
    if (oldval != val) 
                       #line 1010 
                       writel(val,(void *)(hw->hw_addr + (unsigned long)cq->sq.len));
  }
  #line 1013 
  event.buf_len = cq->rq_buf_size;
  #line 1014 
  event.msg_buf = (u8 *)kzalloc_1((unsigned long)event.buf_len,3264U);
  #line 1015 
  if (event.msg_buf == (u8 *)0U) 
                                 #line 1016 
                                 return 0;
  #line 1018 
  while (1) {
    {
      #line 1019 
      enum ice_status ret;
      #line 1020 
      u16 opcode;
      #line 1022 
      ret = ice_clean_rq_elem(hw,cq,& event,& pending);
      #line 1023 
      if (ret == ICE_ERR_AQ_NO_WORK) 
                                     #line 1024 
                                     break;
      #line 1025 
      if (ret != ICE_SUCCESS) {
        #line 1026 
        _dev_err(dev,(char *)"%s Receive Queue event error %d\n",qtype,(int)ret);
        #line 1028 
        break;
      }
      #line 1031 
      opcode = event.desc.opcode;
      #line 1033 
      switch ((int)opcode) {
        #line 1034 
        case 1543: 
                   #line 1034 
        ;
        #line 1035 
        if (ice_handle_link_event(pf,& event) != 0) 
                                                    #line 1036 
                                                    _dev_err(dev,(char *)"Could not handle link event\n");
        #line 1037 
        break;
        #line 1038 
        case 2049: 
                   #line 1038 
        ;
        #line 1039 
        ice_vc_process_vf_msg(pf,& event);
        #line 1040 
        break;
        #line 1041 
        case 65289: 
                    #line 1041 
        ;
        #line 1042 
        ice_output_fw_log(hw,& event.desc,(void *)event.msg_buf);
        #line 1043 
        break;
        #line 1044 
        case 2561: 
                   #line 1044 
        ;
        #line 1045 
        ice_dcb_process_lldp_set_mib_change(pf,& event);
        #line 1046 
        break;
        #line 1047 
        default: 
                 #line 1047 
        ;
        {
          #line 1048 
          bool branch_5;
          #line 1048 
          struct _ddebug __UNIQUE_ID_ddebug556 = {.modname = (char *)"ice", .function = (char *)"__ice_clean_ctrlq", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_main.c", .format = (char *)"%s Receive Queue unknown event 0x%04x ignored\n", .lineno = (unsigned int)1048U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
          #line 1048 
          branch_5 = arch_static_branch(& __UNIQUE_ID_ddebug556.key.dd_key_false.key,(_Bool)0);
          #line 1048 
          if ((long)((long)((int)branch_5 != 0)) != 0L) 
                                                        #line 1048 
                                                        __dynamic_dev_dbg(& __UNIQUE_ID_ddebug556,dev,(char *)"%s Receive Queue unknown event 0x%04x ignored\n",qtype,(int)opcode);
        }
        #line 1051 
        break;
      }
    }
    #line 1053 
    if ((unsigned int)pending != 0U) {
      #line 1053 
      u16 tmp_9;
      #line 1053 
      tmp_9 = i;
      #line 1053 
      i = (u16)((int)i + 1);
      #line 1053 
      ;
      #line 1053 
      if (! ((unsigned int)tmp_9 <= 255U)) 
                                           #line 1018 
                                           break;
    }
    else 
         #line 1018 
         break;
  }
  #line 1055 
  kfree((void *)event.msg_buf);
  #line 1057 
  return ((unsigned int)pending != 0U && (unsigned int)i == 256U) != 0;
}

#line 1067  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_main.c"
static bool ice_ctrlq_pending(struct ice_hw *hw, struct ice_ctl_q_info *cq)
{
  #line 1069 
  u16 ntu;
  #line 1071 
  ntu = (unsigned short)((int)((unsigned short)readl((void *)(hw->hw_addr + (unsigned long)cq->rq.head))) & (int)((unsigned short)cq->rq.head_mask));
  #line 1072 
  return (_Bool)((int)cq->rq.next_to_clean != (int)ntu);
}

#line 1079  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_main.c"
static void ice_clean_adminq_subtask(struct ice_pf *pf)
{
  #line 1081 
  struct ice_hw *hw = & pf->hw;
  #line 1083 
  if (! test_bit(15L,(unsigned long *)(& pf->state))) 
                                                      #line 1084 
                                                      return;
  #line 1086 
  if (__ice_clean_ctrlq(pf,(enum ice_ctl_q)ICE_CTL_Q_ADMIN) != 0) 
                                                                  #line 1087 
                                                                  return;
  #line 1089 
  cif_clear_bit_5(15L,(unsigned long *)(& pf->state));
  #line 1096 
  if ((int)ice_ctrlq_pending(hw,& hw->adminq) != 0) 
                                                    #line 1097 
                                                    __ice_clean_ctrlq(pf,(enum ice_ctl_q)ICE_CTL_Q_ADMIN);
  #line 1099 
  readl((void *)(hw->hw_addr + 745772U));
  #line 1100 
  return;
}

#line 1106  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_main.c"
static void ice_clean_mailboxq_subtask(struct ice_pf *pf)
{
  #line 1108 
  struct ice_hw *hw = & pf->hw;
  #line 1110 
  if (! test_bit(16L,(unsigned long *)(& pf->state))) 
                                                      #line 1111 
                                                      return;
  #line 1113 
  if (__ice_clean_ctrlq(pf,(enum ice_ctl_q)ICE_CTL_Q_MAILBOX) != 0) 
                                                                    #line 1114 
                                                                    return;
  #line 1116 
  cif_clear_bit_5(16L,(unsigned long *)(& pf->state));
  #line 1118 
  if ((int)ice_ctrlq_pending(hw,& hw->mailboxq) != 0) 
                                                      #line 1119 
                                                      __ice_clean_ctrlq(pf,(enum ice_ctl_q)ICE_CTL_Q_MAILBOX);
  #line 1121 
  readl((void *)(hw->hw_addr + 745772U));
  #line 1122 
  return;
}

#line 1130  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_main.c"
static void ice_service_task_schedule(struct ice_pf *pf)
{
  #line 1132 
  if (! test_bit(23L,(unsigned long *)(& pf->state))) {
    #line 1133 
    if (! test_and_clear_bit(22L,(unsigned long *)(& pf->state))) {
      #line 1134 
      if (! test_bit(2L,(unsigned long *)(& pf->state))) 
                                                         #line 1135 
                                                         cif_queue_work(ice_wq,& pf->serv_task);
    }
  }
  #line 1136 
  return;
}

#line 1142  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_main.c"
static void ice_service_task_complete(struct ice_pf *pf)
{
  {
    #line 1144 
    int tmp_0;
    #line 1144 
    if (test_bit(22L,(unsigned long *)(& pf->state))) 
                                                      #line 1144 
                                                      tmp_0 = 0; else 
                                                                   #line 1144 
                                                                   tmp_0 = 1;
    #line 1144 
    int __ret_warn_on = tmp_0;
    #line 1144 
    if ((long)(__ret_warn_on != 0) != 0L) {
      #line 1145 
      ldv_inline_asm();
      #line 1146 
      ldv_inline_asm();
    }
    #line 1144 
    long tmp_2 = (long)(__ret_warn_on != 0);
  }
  #line 1148 
  cif_clear_bit_5(22L,(unsigned long *)(& pf->state));
  #line 1149 
  return;
}

#line 1155  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_main.c"
static void ice_service_task_stop(struct ice_pf *pf)
{
  #line 1157 
  cif_set_bit_5(23L,(unsigned long *)(& pf->state));
  #line 1159 
  if (pf->serv_tmr.function != (void (*)(struct timer_list *))0) 
                                                                 #line 1160 
                                                                 cif_del_timer_sync(& pf->serv_tmr);
  #line 1161 
  if (pf->serv_task.func != (void (*)(struct work_struct *))0) 
                                                               #line 1162 
                                                               cancel_work_sync(& pf->serv_task);
  #line 1164 
  cif_clear_bit_5(22L,(unsigned long *)(& pf->state));
  #line 1165 
  return;
}

#line 1173  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_main.c"
static void ice_service_task_restart(struct ice_pf *pf)
{
  #line 1175 
  cif_clear_bit_5(23L,(unsigned long *)(& pf->state));
  #line 1176 
  ice_service_task_schedule(pf);
  #line 1177 
  return;
}

#line 1183  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_main.c"
static void ice_service_timer(struct timer_list *t)
{
  #line 1185 
  void *__mptr;
  #line 1185 
  __mptr = (void *)t;
  #line 1185 
  struct ice_pf *pf = ((struct ice_pf *)(__mptr + 18446744073709551496U));
  #line 1187 
  ;
  #line 1187 
  cif_mod_timer(& pf->serv_tmr,round_jiffies(pf->serv_tmr_period + jiffies));
  #line 1188 
  ice_service_task_schedule(pf);
  #line 1189 
  return;
}

#line 1197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_main.c"
static void ice_handle_mdd_event(struct ice_pf *pf)
{
  #line 1202 
  u32 reg;
  #line 1203 
  int i;
  #line 1199 
  struct device *dev = & (pf->pdev)->dev;
  #line 1200 
  struct ice_hw *hw = & pf->hw;
  #line 1201 
  bool mdd_detected = (_Bool)0;
  #line 1205 
  if (! test_and_clear_bit(17L,(unsigned long *)(& pf->state))) 
                                                                #line 1206 
                                                                return;
  #line 1209 
  reg = readl((void *)(hw->hw_addr + 2960896U));
  #line 1210 
  if (((unsigned long)reg & 2147483648UL) != 0UL) {
    #line 1211 
    u8 pf_num = (unsigned char)((unsigned int)((unsigned char)reg) & 7U);
    #line 1213 
    u16 vf_num = (unsigned short)((unsigned int)((unsigned short)(reg >> 4)) & 255U);
    #line 1215 
    u8 event = (unsigned char)((unsigned int)((unsigned char)(reg >> 26)) & 31U);
    #line 1217 
    u16 queue = (unsigned short)((unsigned int)((unsigned short)(reg >> 12)) & 16383U);
    #line 1220 
    if ((pf->msg_enable & 128U) != 0U) 
                                       #line 1221 
                                       _dev_info(dev,(char *)"Malicious Driver Detection event %d on TX queue %d PF# %d VF# %d\n",(int)event,(int)queue,(int)pf_num,(int)vf_num);
    #line 1223 
    writel(4294967295U,(void *)(hw->hw_addr + 2960896U));
    #line 1224 
    mdd_detected = (_Bool)1;
  }
  #line 1227 
  reg = readl((void *)(hw->hw_addr + 1032296U));
  #line 1228 
  if (((unsigned long)reg & 2147483648UL) != 0UL) {
    #line 1229 
    u8 pf_num_0 = (unsigned char)((unsigned int)((unsigned char)(reg >> 23)) & 7U);
    #line 1231 
    u16 vf_num_0 = (unsigned short)((unsigned int)((unsigned short)(reg >> 15)) & 255U);
    #line 1233 
    u8 event_0 = (unsigned char)((unsigned int)((unsigned char)(reg >> 26)) & 31U);
    #line 1235 
    u16 queue_0 = (unsigned short)((unsigned int)((unsigned short)reg) & 32767U);
    #line 1238 
    if ((pf->msg_enable & 64U) != 0U) 
                                      #line 1239 
                                      _dev_info(dev,(char *)"Malicious Driver Detection event %d on TX queue %d PF# %d VF# %d\n",(int)event_0,(int)queue_0,(int)pf_num_0,(int)vf_num_0);
    #line 1241 
    writel(4294967295U,(void *)(hw->hw_addr + 1032296U));
    #line 1242 
    mdd_detected = (_Bool)1;
  }
  #line 1245 
  reg = readl((void *)(hw->hw_addr + 2706432U));
  #line 1246 
  if (((unsigned long)reg & 2147483648UL) != 0UL) {
    #line 1247 
    u8 pf_num_1 = (unsigned char)((unsigned int)((unsigned char)(reg >> 23)) & 7U);
    #line 1249 
    u16 vf_num_1 = (unsigned short)((unsigned int)((unsigned short)(reg >> 15)) & 255U);
    #line 1251 
    u8 event_1 = (unsigned char)((unsigned int)((unsigned char)(reg >> 26)) & 31U);
    #line 1253 
    u16 queue_1 = (unsigned short)((unsigned int)((unsigned short)reg) & 32767U);
    #line 1256 
    if ((pf->msg_enable & 64U) != 0U) 
                                      #line 1257 
                                      _dev_info(dev,(char *)"Malicious Driver Detection event %d on RX queue %d PF# %d VF# %d\n",(int)event_1,(int)queue_1,(int)pf_num_1,(int)vf_num_1);
    #line 1259 
    writel(4294967295U,(void *)(hw->hw_addr + 2706432U));
    #line 1260 
    mdd_detected = (_Bool)1;
  }
  #line 1263 
  if ((int)mdd_detected != 0) {
    #line 1264 
    bool pf_mdd_detected = (_Bool)0;
    #line 1266 
    reg = readl((void *)(hw->hw_addr + 2960512U));
    #line 1267 
    if (((unsigned long)reg & 1UL) != 0UL) {
      #line 1268 
      writel(65535U,(void *)(hw->hw_addr + 2960512U));
      #line 1269 
      _dev_info(dev,(char *)"TX driver issue detected, PF reset issued\n");
      #line 1270 
      pf_mdd_detected = (_Bool)1;
    }
    #line 1273 
    reg = readl((void *)(hw->hw_addr + 1032192U));
    #line 1274 
    if (((unsigned long)reg & 1UL) != 0UL) {
      #line 1275 
      writel(65535U,(void *)(hw->hw_addr + 1032192U));
      #line 1276 
      _dev_info(dev,(char *)"TX driver issue detected, PF reset issued\n");
      #line 1277 
      pf_mdd_detected = (_Bool)1;
    }
    #line 1280 
    reg = readl((void *)(hw->hw_addr + 2704000U));
    #line 1281 
    if (((unsigned long)reg & 1UL) != 0UL) {
      #line 1282 
      writel(65535U,(void *)(hw->hw_addr + 2704000U));
      #line 1283 
      _dev_info(dev,(char *)"RX driver issue detected, PF reset issued\n");
      #line 1284 
      pf_mdd_detected = (_Bool)1;
    }
    #line 1287 
    if ((int)pf_mdd_detected != 0) {
      #line 1288 
      cif_set_bit_5(2L,(unsigned long *)(& pf->state));
      #line 1289 
      ice_service_task_schedule(pf);
    }
  }
  #line 1294 
  i = 0;
  #line 1294 
  while (pf->num_alloc_vfs > i) {
    {
      #line 1295 
      struct ice_vf *vf = pf->vf + (unsigned long)i;
      #line 1297 
      bool vf_mdd_detected = (_Bool)0;
      #line 1299 
      reg = readl((void *)(hw->hw_addr + (unsigned long)((i + 739328) * 4)));
      #line 1300 
      if (((unsigned long)reg & 1UL) != 0UL) {
        #line 1301 
        writel(65535U,(void *)(hw->hw_addr + (unsigned long)((i + 739328) * 4)));
        #line 1302 
        vf_mdd_detected = (_Bool)1;
        #line 1303 
        _dev_info(dev,(char *)"TX driver issue detected on VF %d\n",i);
      }
      #line 1307 
      reg = readl((void *)(hw->hw_addr + (unsigned long)((i + 257536) * 4)));
      #line 1308 
      if (((unsigned long)reg & 1UL) != 0UL) {
        #line 1309 
        writel(65535U,(void *)(hw->hw_addr + (unsigned long)((i + 257536) * 4)));
        #line 1310 
        vf_mdd_detected = (_Bool)1;
        #line 1311 
        _dev_info(dev,(char *)"TX driver issue detected on VF %d\n",i);
      }
      #line 1315 
      reg = readl((void *)(hw->hw_addr + (unsigned long)((i + 65536) * 4)));
      #line 1316 
      if (((unsigned long)reg & 1UL) != 0UL) {
        #line 1317 
        writel(65535U,(void *)(hw->hw_addr + (unsigned long)((i + 65536) * 4)));
        #line 1318 
        vf_mdd_detected = (_Bool)1;
        #line 1319 
        _dev_info(dev,(char *)"TX driver issue detected on VF %d\n",i);
      }
      #line 1323 
      reg = readl((void *)(hw->hw_addr + (unsigned long)((i + 676096) * 4)));
      #line 1324 
      if (((unsigned long)reg & 1UL) != 0UL) {
        #line 1325 
        writel(65535U,(void *)(hw->hw_addr + (unsigned long)((i + 676096) * 4)));
        #line 1326 
        vf_mdd_detected = (_Bool)1;
        #line 1327 
        _dev_info(dev,(char *)"RX driver issue detected on VF %d\n",i);
      }
      #line 1331 
      if ((int)vf_mdd_detected != 0) {
        #line 1332 
        (vf->num_mdd_events) ++;
        #line 1333 
        if (vf->num_mdd_events + 18446744073709551615ULL <= 29ULL) 
                                                                   #line 1335 
                                                                   _dev_info(dev,(char *)"VF %d has had %llu MDD events since last boot, Admin might need to reload AVF driver with this number of events\n",i,vf->num_mdd_events);
      }
    }
    #line 1294 
    i ++;
  }
  #line 1338 
  return;
}

#line 1354  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_main.c"
static int ice_force_phys_link_state(struct ice_vsi *vsi, bool link_up)
{
  #line 1356 
  struct ice_aqc_get_phy_caps_data *pcaps;
  #line 1357 
  struct ice_aqc_set_phy_cfg_data *cfg;
  #line 1358 
  struct ice_port_info *pi;
  #line 1359 
  struct device *dev;
  #line 1360 
  int retcode;
  #line 1362 
  if ((vsi == (struct ice_vsi *)0 || vsi->port_info == (struct ice_port_info *)0) || vsi->back == (struct ice_pf *)0) 
    #line 1363 
    return -22;
  #line 1364 
  if (vsi->type != (unsigned int)ICE_VSI_PF) 
                                             #line 1365 
                                             return 0;
  #line 1367 
  dev = & ((vsi->back)->pdev)->dev;
  #line 1369 
  pi = vsi->port_info;
  #line 1371 
  pcaps = (struct ice_aqc_get_phy_caps_data *)kzalloc_1(560UL,3264U);
  #line 1372 
  if (pcaps == (struct ice_aqc_get_phy_caps_data *)0) 
                                                      #line 1373 
                                                      return -12;
  #line 1375 
  retcode = (int)ice_aq_get_phy_caps(pi,(_Bool)0,(unsigned char)4,pcaps,
                            (struct ice_sq_cd *)0);
  #line 1377 
  if (retcode != 0) {
    #line 1378 
    _dev_err(dev,(char *)"Failed to get phy capabilities, VSI %d error %d\n",(int)vsi->vsi_num,retcode);
    #line 1381 
    retcode = -5;
    #line 1382 
    goto out;
  }
  #line 1386 
  if ((int)link_up == (((unsigned long)pcaps->caps & 8UL) != 0UL) && (int)link_up == (((unsigned long)pi->phy.link_info.link_info & 1UL) != 0UL)) 
    #line 1388 
    goto out;
  #line 1390 
  cfg = (struct ice_aqc_set_phy_cfg_data *)kzalloc_1(24UL,3264U);
  #line 1391 
  if (cfg == (struct ice_aqc_set_phy_cfg_data *)0) {
    #line 1392 
    retcode = -12;
    #line 1393 
    goto out;
  }
  #line 1396 
  cfg->phy_type_low = pcaps->phy_type_low;
  #line 1397 
  cfg->phy_type_high = pcaps->phy_type_high;
  #line 1398 
  cfg->caps = (unsigned char)((unsigned int)pcaps->caps | 32U);
  #line 1399 
  cfg->low_power_ctrl = pcaps->low_power_ctrl;
  #line 1400 
  cfg->eee_cap = pcaps->eee_cap;
  #line 1401 
  cfg->eeer_value = pcaps->eeer_value;
  #line 1402 
  cfg->link_fec_opt = pcaps->link_fec_options;
  #line 1403 
  if ((int)link_up != 0) 
                         #line 1404 
                         cfg->caps = (unsigned char)((unsigned int)cfg->caps | 8U); else 
                                                                    #line 1406 
                                                                    cfg->caps = (unsigned char)((unsigned int)cfg->caps & 247U);
  #line 1408 
  retcode = (int)ice_aq_set_phy_cfg(& (vsi->back)->hw,(unsigned char)((int)pi->lport),
                           cfg,(struct ice_sq_cd *)0);
  #line 1409 
  if (retcode != 0) {
    #line 1410 
    _dev_err(dev,(char *)"Failed to set phy config, VSI %d error %d\n",(int)vsi->vsi_num,retcode);
    #line 1412 
    retcode = -5;
  }
  #line 1415 
  kfree((void *)cfg);
  #line 1416 
  out: 
       #line 1416 
  ;
  #line 1417 
  kfree((void *)pcaps);
  #line 1418 
  return retcode;
}

#line 1425  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_main.c"
static void ice_check_media_subtask(struct ice_pf *pf)
{
  #line 1427 
  struct ice_port_info *pi;
  #line 1428 
  struct ice_vsi *vsi;
  #line 1429 
  int err;
  #line 1431 
  vsi = ice_get_main_vsi(pf);
  #line 1432 
  if (vsi == (struct ice_vsi *)0) 
                                  #line 1433 
                                  return;
  #line 1438 
  if (test_bit(8L,(unsigned long *)(& pf->flags))) {
    #line 1438 
    if ((int)test_bit(1L,(unsigned long *)(& vsi->state)) != 0) 
                                                                #line 1440 
                                                                return;
  }
  else 
       #line 1440 
       return;
  #line 1443 
  pi = vsi->port_info;
  #line 1444 
  err = (int)ice_update_link_info(pi);
  #line 1445 
  if (err != 0) 
                #line 1446 
                return;
  #line 1448 
  if (((unsigned long)pi->phy.link_info.link_info & 64UL) != 0UL) {
    #line 1449 
    err = ice_force_phys_link_state(vsi,(_Bool)1);
    #line 1450 
    if (err != 0) 
                  #line 1451 
                  return;
    #line 1452 
    cif_clear_bit_5(8L,(unsigned long *)(& pf->flags));
  }
  #line 1454 
  return;
}

#line 1464  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_main.c"
static void ice_service_task(struct work_struct *work)
{
  #line 1466 
  void *__mptr;
  #line 1466 
  __mptr = (void *)work;
  #line 1466 
  struct ice_pf *pf = ((struct ice_pf *)(__mptr + 18446744073709551408U));
  #line 1467 
  unsigned long start_time = jiffies;
  #line 1472 
  ice_reset_subtask(pf);
  #line 1475 
  if ((int)ice_is_reset_in_progress((unsigned long *)(& pf->state)) != 0) 
    #line 1475 
    goto _LOR;
  else {
    #line 1475 
    if ((int)test_bit(12L,(unsigned long *)(& pf->state)) != 0) 
                                                                #line 1475 
                                                                goto _LOR;
    else {
      #line 1476 
      if ((int)test_bit(2L,(unsigned long *)(& pf->state)) != 0) {
        #line 1475 
        _LOR: {
                #line 1478 
                ice_service_task_complete(pf);
                #line 1479 
                return;
              }
      }
    }
  }
  #line 1482 
  ice_clean_adminq_subtask(pf);
  #line 1483 
  ice_check_media_subtask(pf);
  #line 1484 
  ice_check_for_hang_subtask(pf);
  #line 1485 
  ice_sync_fltr_subtask(pf);
  #line 1486 
  ice_handle_mdd_event(pf);
  #line 1487 
  ice_watchdog_subtask(pf);
  #line 1489 
  if ((int)ice_is_safe_mode(pf) != 0) {
    #line 1490 
    ice_service_task_complete(pf);
    #line 1491 
    return;
  }
  #line 1494 
  ice_process_vflr_event(pf);
  #line 1495 
  ice_clean_mailboxq_subtask(pf);
  #line 1498 
  ice_service_task_complete(pf);
  {
    #line 1504 
    unsigned long __dummy;
    #line 1504 
    unsigned long __dummy2;
    }
  #line 1504 
  if (1 != 0) {
    {
      #line 1504 
      unsigned long __dummy_0;
      #line 1504 
      unsigned long __dummy2_0;
      }
    #line 1504 
    if (1 != 0) {
      #line 1504 
      if ((long)((pf->serv_tmr_period + start_time) - jiffies) < 0L) 
        #line 1509 
        cif_mod_timer(& pf->serv_tmr,jiffies); else 
                                                    #line 1504 
                                                    goto _LAND_0;
    }
    else 
         #line 1504 
         goto _LAND_0;
  }
  else {
    #line 1504 
    _LAND_0: 
    #line 1504 
    if ((int)test_bit(17L,(unsigned long *)(& pf->state)) != 0) 
                                                                #line 1509 
                                                                cif_mod_timer(& pf->serv_tmr,jiffies);
    else {
      #line 1505 
      if ((int)test_bit(18L,(unsigned long *)(& pf->state)) != 0) 
                                                                  #line 1509 
                                                                  cif_mod_timer(& pf->serv_tmr,jiffies);
      else {
        #line 1506 
        if ((int)test_bit(16L,(unsigned long *)(& pf->state)) != 0) 
                                                                    #line 1509 
                                                                    cif_mod_timer(& pf->serv_tmr,jiffies);
        else {
          #line 1507 
          if ((int)test_bit(15L,(unsigned long *)(& pf->state)) != 0) 
            #line 1509 
            cif_mod_timer(& pf->serv_tmr,jiffies);
        }
      }
    }
  }
  #line 1510 
  return;
}

#line 1516  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_main.c"
static void ice_set_ctrlq_len(struct ice_hw *hw)
{
  #line 1518 
  hw->adminq.num_rq_entries = (unsigned short)64U;
  #line 1519 
  hw->adminq.num_sq_entries = (unsigned short)64U;
  #line 1520 
  hw->adminq.rq_buf_size = (unsigned short)4096U;
  #line 1521 
  hw->adminq.sq_buf_size = (unsigned short)4096U;
  #line 1522 
  hw->mailboxq.num_rq_entries = (unsigned short)512U;
  #line 1523 
  hw->mailboxq.num_sq_entries = (unsigned short)64U;
  #line 1524 
  hw->mailboxq.rq_buf_size = (unsigned short)4096U;
  #line 1525 
  hw->mailboxq.sq_buf_size = (unsigned short)4096U;
  #line 1526 
  return;
}

#line 1533  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_main.c"
int ice_schedule_reset(struct ice_pf *pf, enum ice_reset_req reset)
{
  #line 1535 
  struct device *dev = & (pf->pdev)->dev;
  #line 1538 
  if ((int)test_bit(13L,(unsigned long *)(& pf->state)) != 0) {
    {
      #line 1539 
      bool branch;
      #line 1539 
      struct _ddebug __UNIQUE_ID_ddebug558 = {.modname = (char *)"ice", .function = (char *)"ice_schedule_reset", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_main.c", .format = (char *)"earlier reset has failed\n", .lineno = (unsigned int)1539U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 1539 
      branch = arch_static_branch(& __UNIQUE_ID_ddebug558.key.dd_key_false.key,(_Bool)0);
      #line 1539 
      if ((long)((long)((int)branch != 0)) != 0L) 
                                                  #line 1539 
                                                  __dynamic_dev_dbg(& __UNIQUE_ID_ddebug558,dev,(char *)"earlier reset has failed\n");
    }
    #line 1540 
    return -5;
  }
  #line 1543 
  if ((int)ice_is_reset_in_progress((unsigned long *)(& pf->state)) != 0) {
    {
      #line 1544 
      bool branch_0;
      #line 1544 
      struct _ddebug __UNIQUE_ID_ddebug559 = {.modname = (char *)"ice", .function = (char *)"ice_schedule_reset", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_main.c", .format = (char *)"Reset already in progress\n", .lineno = (unsigned int)1544U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 1544 
      branch_0 = arch_static_branch(& __UNIQUE_ID_ddebug559.key.dd_key_false.key,(_Bool)0);
      #line 1544 
      if ((long)((long)((int)branch_0 != 0)) != 0L) 
                                                    #line 1544 
                                                    __dynamic_dev_dbg(& __UNIQUE_ID_ddebug559,dev,(char *)"Reset already in progress\n");
    }
    #line 1545 
    return -16;
  }
  #line 1548 
  switch ((unsigned int)reset) {
    #line 1549 
    case (unsigned int)4: 
                          #line 1549 
    ;
    #line 1550 
    cif_set_bit_5(6L,(unsigned long *)(& pf->state));
    #line 1551 
    break;
    #line 1552 
    case (unsigned int)1: 
                          #line 1552 
    ;
    #line 1553 
    cif_set_bit_5(7L,(unsigned long *)(& pf->state));
    #line 1554 
    break;
    #line 1555 
    case (unsigned int)2: 
                          #line 1555 
    ;
    #line 1556 
    cif_set_bit_5(8L,(unsigned long *)(& pf->state));
    #line 1557 
    break;
    #line 1558 
    default: 
             #line 1558 
    ;
    #line 1559 
    return -22;
  }
  #line 1562 
  ice_service_task_schedule(pf);
  #line 1563 
  return 0;
}

#line 1575  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_main.c"
static void ice_irq_affinity_notify(struct irq_affinity_notify *notify, cpumask_t *mask)
{
  #line 1579 
  void *__mptr;
  #line 1579 
  __mptr = (void *)notify;
  #line 1578 
  struct ice_q_vector *q_vector = ((struct ice_q_vector *)(__mptr + 18446744073709550120U));
  #line 1581 
  cpumask_copy(& q_vector->affinity_mask,mask);
  #line 1582 
  return;
}

#line 1592  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_main.c"
static void ice_irq_affinity_release(struct kref *ref)
{
  #line 1594 
  return;
}

#line 1598  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_main.c"
static int ice_vsi_ena_irq(struct ice_vsi *vsi)
{
  #line 1601 
  int i;
  #line 1600 
  struct ice_hw *hw = & (vsi->back)->hw;
  #line 1603 
  i = 0;
  #line 1603 
  while (vsi->num_q_vectors > i) {
    #line 1604 
    ice_irq_dynamic_ena(hw,vsi,*(vsi->q_vectors + (unsigned long)i));
    #line 1603 
    i ++;
  }
  #line 1606 
  readl((void *)(hw->hw_addr + 745772U));
  #line 1607 
  return 0;
}

#line 1615  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_main.c"
static int ice_vsi_req_irq_msix(struct ice_vsi *vsi, char *basename)
{
  #line 1620 
  struct device *dev;
  #line 1623 
  int vector;
  #line 1623 
  int err;
  #line 1624 
  int irq_num;
  #line 1617 
  int q_vectors = vsi->num_q_vectors;
  #line 1618 
  struct ice_pf *pf = vsi->back;
  #line 1619 
  int base = vsi->base_vector;
  #line 1621 
  int rx_int_idx = 0;
  #line 1622 
  int tx_int_idx = 0;
  #line 1626 
  dev = & (pf->pdev)->dev;
  #line 1627 
  vector = 0;
  #line 1627 
  while (vector < q_vectors) {
    {
      #line 1628 
      struct ice_q_vector *q_vector = *(vsi->q_vectors + (unsigned long)vector);
      #line 1630 
      irq_num = (int)(pf->msix_entries + (unsigned long)(base + vector))->vector;
      #line 1632 
      if (q_vector->tx.ring != (struct ice_ring *)0 && q_vector->rx.ring != (struct ice_ring *)0) {
        #line 1634 
        int tmp;
        #line 1634 
        tmp = rx_int_idx;
        #line 1634 
        rx_int_idx ++;
        #line 1633 
        ;
        #line 1633 
        ;
        #line 1633 
        ;
        #line 1633 
        snprintf((char *)(& q_vector->name),31UL,(char *)"%s-%s-%d",basename,(char *)"TxRx",tmp);
        #line 1635 
        tx_int_idx ++;
      }
      else 
        #line 1636 
        if (q_vector->rx.ring != (struct ice_ring *)0) {
          #line 1638 
          int tmp_0;
          #line 1638 
          tmp_0 = rx_int_idx;
          #line 1638 
          rx_int_idx ++;
          #line 1637 
          ;
          #line 1637 
          ;
          #line 1637 
          ;
          #line 1637 
          snprintf((char *)(& q_vector->name),31UL,(char *)"%s-%s-%d",basename,(char *)"rx",tmp_0);
        }
        else 
          #line 1639 
          if (q_vector->tx.ring != (struct ice_ring *)0) {
            #line 1641 
            int tmp_1;
            #line 1641 
            tmp_1 = tx_int_idx;
            #line 1641 
            tx_int_idx ++;
            #line 1640 
            ;
            #line 1640 
            ;
            #line 1640 
            ;
            #line 1640 
            snprintf((char *)(& q_vector->name),31UL,(char *)"%s-%s-%d",basename,(char *)"tx",tmp_1);
          }
          else 
               #line 1644 
               goto __Cont;
      #line 1646 
      err = devm_request_irq(dev,(unsigned int)irq_num,vsi->irq_handler,0UL,(char *)(& q_vector->name),(void *)q_vector);
      #line 1648 
      if (err != 0) {
        #line 1649 
        netdev_err(vsi->netdev,(char *)"MSIX request_irq failed, error: %d\n",err);
        #line 1651 
        goto free_q_irqs;
      }
      #line 1655 
      q_vector->affinity_notify.notify = & ice_irq_affinity_notify;
      #line 1656 
      q_vector->affinity_notify.release = & ice_irq_affinity_release;
      #line 1657 
      irq_set_affinity_notifier((unsigned int)irq_num,& q_vector->affinity_notify);
      #line 1660 
      irq_set_affinity_hint((unsigned int)irq_num,& q_vector->affinity_mask);
    }
    #line 1627 
    __Cont: 
            #line 1627 
    vector ++;
  }
  #line 1663 
  vsi->irqs_ready = (unsigned char)1U;
  #line 1664 
  return 0;
  #line 1666 
  free_q_irqs: 
               #line 1666 
  ;
  #line 1667 
  while (vector != 0) {
    #line 1668 
    vector --;
    #line 1669 
    irq_num = (int)(pf->msix_entries + (unsigned long)(base + vector))->vector;
    #line 1669 
    irq_set_affinity_notifier((unsigned int)irq_num,(struct irq_affinity_notify *)0);
    #line 1671 
    irq_set_affinity_hint((unsigned int)irq_num,(struct cpumask *)0);
    #line 1672 
    cif_devm_free_irq_0(dev,(unsigned int)irq_num,(void *)(vsi->q_vectors + (unsigned long)vector));
  }
  #line 1674 
  return err;
}

#line 1683  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_main.c"
static int ice_xdp_alloc_setup_rings(struct ice_vsi *vsi)
{
  #line 1686 
  int i;
  #line 1685 
  struct device *dev = & ((vsi->back)->pdev)->dev;
  #line 1688 
  i = 0;
  #line 1688 
  while ((int)vsi->num_xdp_txq > i) {
    {
      #line 1690 
      struct ice_ring *xdp_ring;
      #line 1689 
      u16 xdp_q_idx = (unsigned short)((int)vsi->alloc_txq + (int)((unsigned short)i));
      #line 1692 
      xdp_ring = (struct ice_ring *)kzalloc_1(4096UL,3264U);
      #line 1694 
      if (xdp_ring == (struct ice_ring *)0) 
                                            #line 1695 
                                            goto free_xdp_rings;
      #line 1697 
      xdp_ring->q_index = xdp_q_idx;
      #line 1698 
      xdp_ring->reg_idx = *(vsi->txq_map + (unsigned long)xdp_q_idx);
      #line 1699 
      xdp_ring->ring_active = (unsigned char)0U;
      #line 1700 
      xdp_ring->vsi = vsi;
      #line 1701 
      xdp_ring->netdev = (struct net_device *)0;
      #line 1702 
      xdp_ring->dev = dev;
      #line 1703 
      xdp_ring->count = vsi->num_tx_desc;
      #line 1704 
      *(vsi->xdp_rings + (unsigned long)i) = xdp_ring;
      #line 1705 
      if (ice_setup_tx_ring(xdp_ring) != 0) 
                                            #line 1706 
                                            goto free_xdp_rings;
      #line 1707 
      ice_set_ring_xdp(xdp_ring);
      #line 1708 
      xdp_ring->xsk_umem = ice_xsk_umem(xdp_ring);
    }
    #line 1688 
    i ++;
  }
  #line 1711 
  return 0;
  #line 1713 
  free_xdp_rings: 
                  #line 1713 
  ;
  #line 1714 
  while (i >= 0) {
    #line 1715 
    if (*(vsi->xdp_rings + (unsigned long)i) != (struct ice_ring *)0 && (*(vsi->xdp_rings + (unsigned long)i))->desc != (void *)0) 
      #line 1716 
      ice_free_tx_ring(*(vsi->xdp_rings + (unsigned long)i));
    #line 1714 
    i --;
  }
  #line 1717 
  return -12;
}

#line 1725  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_main.c"
static void ice_vsi_assign_bpf_prog(struct ice_vsi *vsi, struct bpf_prog *prog)
{
  #line 1730 
  struct bpf_prog *__ret;
  #line 1727 
  struct bpf_prog *old_prog;
  #line 1728 
  int i;
  {
    #line 1730 
    struct bpf_prog **__ai_ptr = & vsi->xdp_prog;
    #line 1730 
    kasan_check_read((void *)__ai_ptr,8U);
    #line 1730 
    __ret = prog;
    #line 1730 
    switch (8UL) {
      #line 1730 
      case (unsigned long)1: 
                             #line 1730 
      ;
      #line 1731 
      ldv_inline_asm();
      #line 1730 
      break;
      #line 1730 
      case (unsigned long)2: 
                             #line 1730 
      ;
      #line 1731 
      ldv_inline_asm();
      #line 1730 
      break;
      #line 1730 
      case (unsigned long)4: 
                             #line 1730 
      ;
      #line 1731 
      ldv_inline_asm();
      #line 1730 
      break;
      #line 1730 
      case (unsigned long)8: 
                             #line 1730 
      ;
      #line 1731 
      ldv_inline_asm();
      #line 1730 
      break;
      #line 1730 
      default: 
               #line 1730 
      ;
      #line 1730 
      __xchg_wrong_size();
    }
    }
  #line 1730 
  old_prog = __ret;
  #line 1731 
  if (old_prog != (struct bpf_prog *)0) 
                                        #line 1732 
                                        bpf_prog_put(old_prog);
  #line 1734 
  i = 0;
  #line 1734 
  while ((int)vsi->num_rxq > i) {
    {
      #line 1736 
      union __anonunion___u_9258 __u = {.__val = vsi->xdp_prog};
      #line 1735 
      __write_once_size((void *)(& (*(vsi->rx_rings + (unsigned long)i))->xdp_prog),(void *)(& __u.__c),8);
      #line 1735 
      struct bpf_prog *tmp_2 = __u.__val;
    }
    #line 1734 
    i ++;
  }
  #line 1737 
  return;
}

#line 1745  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_main.c"
int ice_prepare_xdp_rings(struct ice_vsi *vsi, struct bpf_prog *prog)
{
  #line 1760 
  enum ice_status status;
  #line 1761 
  struct device *dev;
  #line 1762 
  int i;
  #line 1762 
  int v_idx;
  #line 1747 
  u16 max_txqs[8U] = {(unsigned short)0U};
  #line 1748 
  int xdp_rings_rem = (int)vsi->num_xdp_txq;
  #line 1749 
  struct ice_pf *pf = vsi->back;
  #line 1750 
  struct ice_qs_cfg xdp_qs_cfg = {.qs_mutex = & pf->avail_q_mutex, .pf_map = pf->avail_txqs, .pf_map_size = (unsigned long)pf->max_pf_txqs, .q_count = (unsigned int)vsi->num_xdp_txq, .scatter_count = 16U, .vsi_map = vsi->txq_map, .vsi_map_offset = vsi->alloc_txq, .mapping_mode = (unsigned char)0U};
  #line 1764 
  dev = & (pf->pdev)->dev;
  #line 1765 
  vsi->xdp_rings = (struct ice_ring **)cif_devm_kcalloc_2(dev,(unsigned long)vsi->num_xdp_txq,8UL,3264U);
  #line 1767 
  if (vsi->xdp_rings == (struct ice_ring **)0) 
                                               #line 1768 
                                               return -12;
  #line 1770 
  vsi->xdp_mapping_mode = xdp_qs_cfg.mapping_mode;
  #line 1771 
  if (__ice_vsi_get_qs(& xdp_qs_cfg) != 0) 
                                           #line 1772 
                                           goto err_map_xdp;
  #line 1774 
  if (ice_xdp_alloc_setup_rings(vsi) != 0) 
                                           #line 1775 
                                           goto clear_xdp_rings;
  #line 1778 
  v_idx = 0;
  #line 1778 
  while (vsi->num_q_vectors > v_idx) {
    {
      #line 1780 
      int xdp_rings_per_v;
      #line 1780 
      int q_id;
      #line 1780 
      int q_base;
      #line 1779 
      struct ice_q_vector *q_vector = *(vsi->q_vectors + (unsigned long)v_idx);
      #line 1782 
      xdp_rings_per_v = (((vsi->num_q_vectors - v_idx) + xdp_rings_rem) + -1) / (vsi->num_q_vectors - v_idx);
      #line 1784 
      q_base = (int)vsi->num_xdp_txq - xdp_rings_rem;
      #line 1786 
      q_id = q_base;
      #line 1786 
      while (q_base + xdp_rings_per_v > q_id) {
        {
          #line 1787 
          struct ice_ring *xdp_ring = *(vsi->xdp_rings + (unsigned long)q_id);
          #line 1789 
          xdp_ring->q_vector = q_vector;
          #line 1790 
          xdp_ring->next = q_vector->tx.ring;
          #line 1791 
          q_vector->tx.ring = xdp_ring;
        }
        #line 1786 
        q_id ++;
      }
      #line 1793 
      xdp_rings_rem -= xdp_rings_per_v;
    }
    #line 1778 
    v_idx ++;
  }
  #line 1800 
  if ((int)ice_is_reset_in_progress((unsigned long *)(& pf->state)) != 0) 
    #line 1801 
    return 0;
  #line 1806 
  i = 0;
  #line 1806 
  while ((int)vsi->tc_cfg.numtc > i) {
    #line 1807 
    max_txqs[i] = (unsigned short)((int)vsi->num_txq + (int)vsi->num_xdp_txq);
    #line 1806 
    i ++;
  }
  #line 1809 
  status = ice_cfg_vsi_lan(vsi->port_info,(unsigned short)((int)vsi->idx),(unsigned char)((int)vsi->tc_cfg.ena_tc),(u16 *)(& max_txqs));
  #line 1811 
  if (status != ICE_SUCCESS) {
    #line 1812 
    _dev_err(dev,(char *)"Failed VSI LAN queue config for XDP, error:%d\n",(int)status);
    #line 1814 
    goto clear_xdp_rings;
  }
  #line 1816 
  ice_vsi_assign_bpf_prog(vsi,prog);
  #line 1818 
  return 0;
  #line 1819 
  clear_xdp_rings: 
                   #line 1819 
  ;
  #line 1820 
  i = 0;
  #line 1820 
  while ((int)vsi->num_xdp_txq > i) {
    #line 1821 
    if (*(vsi->xdp_rings + (unsigned long)i) != (struct ice_ring *)0) {
      {
        #line 1822 
        struct ice_ring *___p = *(vsi->xdp_rings + (unsigned long)i);
        #line 1822 
        if (___p != (struct ice_ring *)0) 
                                          #line 1822 
                                          kfree_call_rcu(& ___p->rcu,(void (*)(struct callback_head *))128);
      }
      #line 1823 
      *(vsi->xdp_rings + (unsigned long)i) = (struct ice_ring *)0;
    }
    #line 1820 
    i ++;
  }
  #line 1826 
  err_map_xdp: 
               #line 1826 
  ;
  #line 1827 
  cif_mutex_lock_avail_q_mutex_of_ice_pf_0(& pf->avail_q_mutex);
  #line 1828 
  i = 0;
  #line 1828 
  while ((int)vsi->num_xdp_txq > i) {
    #line 1829 
    cif_clear_bit_5((long)*(vsi->txq_map + (unsigned long)((int)vsi->alloc_txq + i)),pf->avail_txqs);
    #line 1830 
    *(vsi->txq_map + (unsigned long)((int)vsi->alloc_txq + i)) = (unsigned short)65535U;
    #line 1828 
    i ++;
  }
  #line 1832 
  cif_mutex_unlock_avail_q_mutex_of_ice_pf_0(& pf->avail_q_mutex);
  #line 1834 
  devm_kfree(dev,(void *)vsi->xdp_rings);
  #line 1835 
  return -12;
}

#line 1845  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_main.c"
int ice_destroy_xdp_rings(struct ice_vsi *vsi)
{
  #line 1849 
  int i;
  #line 1849 
  int v_idx;
  #line 1847 
  u16 max_txqs[8U] = {(unsigned short)0U};
  #line 1848 
  struct ice_pf *pf = vsi->back;
  #line 1856 
  if ((int)ice_is_reset_in_progress((unsigned long *)(& pf->state)) != 0) 
    #line 1856 
    goto _LOR;
  else 
    #line 1856 
    if (*(vsi->q_vectors) == (struct ice_q_vector *)0) 
                                                       #line 1856 
                                                       _LOR: 
                                                             #line 1857 
                                                             goto free_qmap;
  #line 1859 
  v_idx = 0;
  #line 1859 
  while (vsi->num_q_vectors > v_idx) {
    {
      #line 1861 
      struct ice_ring *ring;
      #line 1860 
      struct ice_q_vector *q_vector = *(vsi->q_vectors + (unsigned long)v_idx);
      #line 1863 
      ring = q_vector->tx.ring;
      #line 1863 
      while (ring != (struct ice_ring *)0) {
        #line 1864 
        if (ring->__anonCompField_ice_ring_196.tx_buf == (struct ice_tx_buf *)0) 
          #line 1865 
          break;
        else {
          #line 1864 
          if (! ice_ring_is_xdp(ring)) 
                                       #line 1865 
                                       break;
        }
        #line 1863 
        ring = ring->next;
      }
      #line 1868 
      q_vector->tx.ring = ring;
    }
    #line 1859 
    v_idx ++;
  }
  #line 1871 
  free_qmap: 
             #line 1871 
  ;
  #line 1872 
  cif_mutex_lock_avail_q_mutex_of_ice_pf_0(& pf->avail_q_mutex);
  #line 1873 
  i = 0;
  #line 1873 
  while ((int)vsi->num_xdp_txq > i) {
    #line 1874 
    cif_clear_bit_5((long)*(vsi->txq_map + (unsigned long)((int)vsi->alloc_txq + i)),pf->avail_txqs);
    #line 1875 
    *(vsi->txq_map + (unsigned long)((int)vsi->alloc_txq + i)) = (unsigned short)65535U;
    #line 1873 
    i ++;
  }
  #line 1877 
  cif_mutex_unlock_avail_q_mutex_of_ice_pf_0(& pf->avail_q_mutex);
  #line 1879 
  i = 0;
  #line 1879 
  while ((int)vsi->num_xdp_txq > i) {
    #line 1880 
    if (*(vsi->xdp_rings + (unsigned long)i) != (struct ice_ring *)0) {
      #line 1881 
      if ((*(vsi->xdp_rings + (unsigned long)i))->desc != (void *)0) 
        #line 1882 
        ice_free_tx_ring(*(vsi->xdp_rings + (unsigned long)i));
      {
        #line 1883 
        struct ice_ring *___p = *(vsi->xdp_rings + (unsigned long)i);
        #line 1883 
        if (___p != (struct ice_ring *)0) 
                                          #line 1883 
                                          kfree_call_rcu(& ___p->rcu,(void (*)(struct callback_head *))128);
      }
      #line 1884 
      *(vsi->xdp_rings + (unsigned long)i) = (struct ice_ring *)0;
    }
    #line 1879 
    i ++;
  }
  #line 1887 
  devm_kfree(& (pf->pdev)->dev,(void *)vsi->xdp_rings);
  #line 1888 
  vsi->xdp_rings = (struct ice_ring **)0;
  #line 1890 
  if ((int)ice_is_reset_in_progress((unsigned long *)(& pf->state)) != 0) 
    #line 1891 
    return 0;
  else 
    #line 1890 
    if (*(vsi->q_vectors) == (struct ice_q_vector *)0) 
                                                       #line 1891 
                                                       return 0;
  #line 1893 
  ice_vsi_assign_bpf_prog(vsi,(struct bpf_prog *)0);
  #line 1898 
  i = 0;
  #line 1898 
  while ((int)vsi->tc_cfg.numtc > i) {
    #line 1899 
    max_txqs[i] = vsi->num_txq;
    #line 1898 
    i ++;
  }
  #line 1901 
  return (int)ice_cfg_vsi_lan(vsi->port_info,(unsigned short)((int)vsi->idx),
                        (unsigned char)((int)vsi->tc_cfg.ena_tc),
                        (u16 *)(& max_txqs));
}

#line 1912  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_main.c"
static int ice_xdp_setup_prog(struct ice_vsi *vsi, struct bpf_prog *prog, struct netlink_ext_ack *extack)
{
  #line 1963 
  int tmp_3;
  #line 1915 
  int frame_size = (int)((vsi->netdev)->mtu + 26U);
  #line 1916 
  bool if_running = netif_running(vsi->netdev);
  #line 1917 
  int ret = 0;
  #line 1917 
  int xdp_ring_err = 0;
  #line 1919 
  if ((int)vsi->rx_buf_len < frame_size) {
    {
      #line 1920 
      char __msg[35U] = {(char)'i', (char)'c', (char)'e', (char)'\000'};
      #line 1920 
      struct netlink_ext_ack *__extack = extack;
      #line 1920 
      if (__extack != (struct netlink_ext_ack *)0) 
                                                   #line 1920 
                                                   __extack->_msg = (char *)(& __msg);
    }
    #line 1921 
    return -95;
  }
  #line 1925 
  if ((int)if_running != 0) {
    #line 1925 
    if (! test_and_clear_bit(1L,(unsigned long *)(& vsi->state))) {
      #line 1926 
      ret = ice_down(vsi);
      #line 1927 
      if (ret != 0) {
        {
          #line 1928 
          char __msg_0[44U] = {(char)'i', (char)'c', (char)'e', (char)'\000'};
          #line 1928 
          struct netlink_ext_ack *__extack_0 = extack;
          #line 1928 
          if (__extack_0 != (struct netlink_ext_ack *)0) 
                                                         #line 1928 
                                                         __extack_0->_msg = (char *)(& __msg_0);
        }
        #line 1930 
        return ret;
      }
    }
  }
  #line 1934 
  if (ice_is_xdp_ena_vsi(vsi)) {
    #line 1934 
    _LAND: 
    #line 1940 
    if ((int)ice_is_xdp_ena_vsi(vsi) != 0) 
      #line 1940 
      if (prog == (struct bpf_prog *)0) {
        #line 1941 
        xdp_ring_err = ice_destroy_xdp_rings(vsi);
        #line 1942 
        if (xdp_ring_err != 0) {
          #line 1943 
          char __msg_2[37U] = {(char)'i', (char)'c', (char)'e', (char)'\000'};
          #line 1943 
          struct netlink_ext_ack *__extack_2 = extack;
          #line 1943 
          if (__extack_2 != (struct netlink_ext_ack *)0) 
                                                         #line 1943 
                                                         __extack_2->_msg = (char *)(& __msg_2);
        }
      }
      else 
           #line 1946 
           ice_vsi_assign_bpf_prog(vsi,prog);
    else 
         #line 1946 
         ice_vsi_assign_bpf_prog(vsi,prog);
  }
  else 
    #line 1934 
    if (prog != (struct bpf_prog *)0) {
      #line 1935 
      vsi->num_xdp_txq = vsi->alloc_txq;
      #line 1936 
      xdp_ring_err = ice_prepare_xdp_rings(vsi,prog);
      #line 1937 
      if (xdp_ring_err != 0) {
        #line 1938 
        char __msg_1[40U] = {(char)'i', (char)'c', (char)'e', (char)'\000'};
        #line 1938 
        struct netlink_ext_ack *__extack_1 = extack;
        #line 1938 
        if (__extack_1 != (struct netlink_ext_ack *)0) 
                                                       #line 1938 
                                                       __extack_1->_msg = (char *)(& __msg_1);
      }
    }
    else 
         #line 1934 
         goto _LAND;
  #line 1949 
  if ((int)if_running != 0) 
                            #line 1950 
                            ret = ice_up(vsi);
  #line 1952 
  if ((ret == 0 && prog != (struct bpf_prog *)0) && vsi->xsk_umems != (struct xdp_umem **)0) {
    #line 1953 
    int i;
    #line 1955 
    i = 0;
    #line 1955 
    while ((int)vsi->num_rxq > i) {
      {
        #line 1956 
        struct ice_ring *rx_ring = *(vsi->rx_rings + (unsigned long)i);
        #line 1958 
        if (rx_ring->xsk_umem != (struct xdp_umem *)0) 
                                                       #line 1959 
                                                       napi_schedule(& (rx_ring->q_vector)->napi);
      }
      #line 1955 
      i ++;
    }
  }
  #line 1963 
  if (ret != 0 || xdp_ring_err != 0) 
                                     #line 1963 
                                     tmp_3 = -12; else 
                                                       #line 1963 
                                                       tmp_3 = 0;
  #line 1963 
  return tmp_3;
}

#line 1971  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_main.c"
static int ice_xdp(struct net_device *dev, struct netdev_bpf *xdp)
{
  #line 1973 
  struct ice_netdev_priv *np = netdev_priv(dev);
  #line 1974 
  struct ice_vsi *vsi = np->vsi;
  #line 1976 
  if (vsi->type != (unsigned int)ICE_VSI_PF) {
    {
      #line 1977 
      char __msg[38U] = {(char)'i', (char)'c', (char)'e', (char)'\000'};
      #line 1977 
      struct netlink_ext_ack *__extack = xdp->__anonCompField_netdev_bpf_159.__anonCompField___anonunion_678_156.extack;
      #line 1977 
      if (__extack != (struct netlink_ext_ack *)0) 
                                                   #line 1977 
                                                   __extack->_msg = (char *)(& __msg);
    }
    #line 1979 
    return -22;
  }
  #line 1982 
  switch ((unsigned int)xdp->command) {
    #line 1983 
    case (unsigned int)0: 
                          #line 1983 
    ;
    #line 1984 
    return ice_xdp_setup_prog(vsi,
                           xdp->__anonCompField_netdev_bpf_159.__anonCompField___anonunion_678_156.prog,
                           xdp->__anonCompField_netdev_bpf_159.__anonCompField___anonunion_678_156.extack);
    #line 1985 
    case (unsigned int)2: 
                          #line 1985 
    ;
    #line 1986 
    if (vsi->xdp_prog != (struct bpf_prog *)0) 
                                               #line 1986 
                                               xdp->__anonCompField_netdev_bpf_159.__anonCompField___anonunion_678_157.prog_id = ((vsi->xdp_prog)->aux)->id; else 
                                                                    #line 1986 
                                                                    xdp->__anonCompField_netdev_bpf_159.__anonCompField___anonunion_678_157.prog_id = 0U;
    #line 1987 
    return 0;
    #line 1988 
    case (unsigned int)6: 
                          #line 1988 
    ;
    #line 1989 
    return ice_xsk_umem_setup(vsi,xdp->__anonCompField_netdev_bpf_159.xsk.umem,
                           (unsigned short)((int)xdp->__anonCompField_netdev_bpf_159.xsk.queue_id));
    #line 1991 
    default: 
             #line 1991 
    ;
    #line 1992 
    return -22;
  }
}

#line 2000  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_main.c"
static void ice_ena_misc_vector(struct ice_pf *pf)
{
  #line 2003 
  u32 val;
  #line 2002 
  struct ice_hw *hw = & pf->hw;
  #line 2006 
  writel(0U,(void *)(hw->hw_addr + 1493248U));
  #line 2007 
  readl((void *)(hw->hw_addr + 1493504U));
  #line 2009 
  val = 876150784U;
  #line 2017 
  writel(val,(void *)(hw->hw_addr + 1493248U));
  #line 2020 
  writel(2248146944U,(void *)(hw->hw_addr + (unsigned long)((pf->oicr_idx + 360448U) * 4U)));
  #line 2021 
  return;
}

#line 2029  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_main.c"
static irqreturn_t ice_misc_intr(int irq, void *data)
{
  #line 2034 
  struct device *dev;
  #line 2035 
  u32 oicr;
  #line 2035 
  u32 ena_mask;
  #line 2031 
  struct ice_pf *pf = (struct ice_pf *)data;
  #line 2032 
  struct ice_hw *hw = & pf->hw;
  #line 2033 
  irqreturn_t ret = IRQ_NONE;
  #line 2037 
  dev = & (pf->pdev)->dev;
  #line 2038 
  cif_set_bit_5(15L,(unsigned long *)(& pf->state));
  #line 2039 
  cif_set_bit_5(16L,(unsigned long *)(& pf->state));
  #line 2041 
  oicr = readl((void *)(hw->hw_addr + 1493504U));
  #line 2042 
  ena_mask = readl((void *)(hw->hw_addr + 1493248U));
  #line 2044 
  if (((unsigned long)oicr & 2147483648UL) != 0UL) {
    #line 2045 
    ena_mask &= 2147483647U;
    #line 2046 
    (pf->sw_int_count) ++;
  }
  #line 2049 
  if (((unsigned long)oicr & 524288UL) != 0UL) {
    #line 2050 
    ena_mask &= 4294443007U;
    #line 2051 
    cif_set_bit_5(17L,(unsigned long *)(& pf->state));
  }
  #line 2053 
  if (((unsigned long)oicr & 536870912UL) != 0UL) {
    #line 2054 
    ena_mask &= 3758096383U;
    #line 2055 
    cif_set_bit_5(18L,(unsigned long *)(& pf->state));
  }
  #line 2058 
  if (((unsigned long)oicr & 1048576UL) != 0UL) {
    #line 2059 
    u32 reset;
    #line 2062 
    ena_mask &= 4293918719U;
    #line 2063 
    reset = (readl((void *)(hw->hw_addr + 754056U)) >> 2) & 3U;
    #line 2066 
    if (reset == 1U) 
                     #line 2067 
                     pf->corer_count = (u16)((int)pf->corer_count + 1);
    else 
      #line 2068 
      if (reset == 2U) 
                       #line 2069 
                       pf->globr_count = (u16)((int)pf->globr_count + 1);
      else 
        #line 2070 
        if (reset == 3U) 
                         #line 2071 
                         pf->empr_count = (u16)((int)pf->empr_count + 1);
        else {
          #line 2073 
          bool branch;
          #line 2073 
          struct _ddebug __UNIQUE_ID_ddebug560 = {.modname = (char *)"ice", .function = (char *)"ice_misc_intr", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_main.c", .format = (char *)"Invalid reset type %d\n", .lineno = (unsigned int)2073U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
          #line 2073 
          branch = arch_static_branch(& __UNIQUE_ID_ddebug560.key.dd_key_false.key,(_Bool)0);
          #line 2073 
          if ((long)((long)((int)branch != 0)) != 0L) 
                                                      #line 2073 
                                                      __dynamic_dev_dbg(& __UNIQUE_ID_ddebug560,dev,(char *)"Invalid reset type %d\n",reset);
        }
    #line 2080 
    if (! test_and_clear_bit(4L,(unsigned long *)(& pf->state))) {
      #line 2081 
      if (reset == 1U) 
                       #line 2082 
                       cif_set_bit_5(9L,(unsigned long *)(& pf->state));
      else 
        #line 2083 
        if (reset == 2U) 
                         #line 2084 
                         cif_set_bit_5(10L,(unsigned long *)(& pf->state)); else 
                                                                    #line 2086 
                                                                    cif_set_bit_5(11L,(unsigned long *)(& pf->state));
      #line 2101 
      hw->reset_ongoing = (unsigned char)1U;
    }
  }
  #line 2105 
  if (((unsigned long)oicr & 67108864UL) != 0UL) {
    #line 2106 
    ena_mask &= 4227858431U;
    {
      #line 2107 
      bool branch_0;
      #line 2107 
      struct _ddebug __UNIQUE_ID_ddebug561 = {.modname = (char *)"ice", .function = (char *)"ice_misc_intr", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_main.c", .format = (char *)"HMC Error interrupt - info 0x%x, data 0x%x\n", .lineno = (unsigned int)2107U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 2107 
      branch_0 = arch_static_branch(& __UNIQUE_ID_ddebug561.key.dd_key_false.key,(_Bool)0);
      #line 2107 
      if ((long)((long)((int)branch_0 != 0)) != 0L) {
        #line 2107 
        ;
        #line 2107 
        __dynamic_dev_dbg(& __UNIQUE_ID_ddebug561,dev,(char *)"HMC Error interrupt - info 0x%x, data 0x%x\n",readl((void *)(hw->hw_addr + 5374976U)),readl((void *)(hw->hw_addr + 5375232U)));
      }
    }
  }
  #line 2113 
  oicr &= ena_mask;
  #line 2114 
  if (oicr != 0U) {
    {
      #line 2115 
      bool branch_1;
      #line 2115 
      struct _ddebug __UNIQUE_ID_ddebug562 = {.modname = (char *)"ice", .function = (char *)"ice_misc_intr", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_main.c", .format = (char *)"unhandled interrupt oicr=0x%08x\n", .lineno = (unsigned int)2115U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 2115 
      branch_1 = arch_static_branch(& __UNIQUE_ID_ddebug562.key.dd_key_false.key,(_Bool)0);
      #line 2115 
      if ((long)((long)((int)branch_1 != 0)) != 0L) 
                                                    #line 2115 
                                                    __dynamic_dev_dbg(& __UNIQUE_ID_ddebug562,dev,(char *)"unhandled interrupt oicr=0x%08x\n",oicr);
    }
    #line 2119 
    if (((unsigned long)oicr & 270598144UL) != 0UL) {
      #line 2122 
      cif_set_bit_5(6L,(unsigned long *)(& pf->state));
      #line 2123 
      ice_service_task_schedule(pf);
    }
  }
  #line 2126 
  ret = IRQ_HANDLED;
  #line 2128 
  if (! test_bit(1L,(unsigned long *)(& pf->state))) {
    #line 2129 
    ice_service_task_schedule(pf);
    #line 2130 
    ice_irq_dynamic_ena(hw,(struct ice_vsi *)0,(struct ice_q_vector *)0);
  }
  #line 2133 
  return ret;
}

#line 2140  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_main.c"
static void ice_dis_ctrlq_interrupts(struct ice_hw *hw)
{
  #line 2143 
  ;
  #line 2143 
  writel(readl((void *)(hw->hw_addr + 1492992U)) & 3221225471U,(void *)(hw->hw_addr + 1492992U));
  #line 2147 
  ;
  #line 2147 
  writel(readl((void *)(hw->hw_addr + 1487488U)) & 3221225471U,(void *)(hw->hw_addr + 1487488U));
  #line 2151 
  ;
  #line 2151 
  writel(readl((void *)(hw->hw_addr + 1493632U)) & 3221225471U,(void *)(hw->hw_addr + 1493632U));
  #line 2154 
  readl((void *)(hw->hw_addr + 745772U));
  #line 2155 
  return;
}

#line 2161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_main.c"
static void ice_free_irq_msix_misc(struct ice_pf *pf)
{
  #line 2163 
  struct ice_hw *hw = & pf->hw;
  #line 2165 
  ice_dis_ctrlq_interrupts(hw);
  #line 2168 
  writel(0U,(void *)(hw->hw_addr + 1493248U));
  #line 2169 
  readl((void *)(hw->hw_addr + 745772U));
  #line 2171 
  if (pf->msix_entries != (struct msix_entry *)0) {
    #line 2172 
    synchronize_irq((pf->msix_entries + (unsigned long)pf->oicr_idx)->vector);
    #line 2173 
    cif_devm_free_irq_0(& (pf->pdev)->dev,(pf->msix_entries + (unsigned long)pf->oicr_idx)->vector,(void *)pf);
  }
  #line 2177 
  (pf->num_avail_sw_msix) ++;
  #line 2178 
  ice_free_res(pf->irq_tracker,(unsigned short)((int)((unsigned short)pf->oicr_idx)),(unsigned short)32767);
  #line 2179 
  return;
}

#line 2186  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_main.c"
static void ice_ena_ctrlq_interrupts(struct ice_hw *hw, u16 reg_idx)
{
  #line 2188 
  u32 val;
  #line 2190 
  val = ((unsigned int)reg_idx & 2047U) | 1073741824U;
  #line 2192 
  writel(val,(void *)(hw->hw_addr + 1493632U));
  #line 2195 
  val = ((unsigned int)reg_idx & 2047U) | 1073741824U;
  #line 2197 
  writel(val,(void *)(hw->hw_addr + 1492992U));
  #line 2200 
  val = ((unsigned int)reg_idx & 2047U) | 1073741824U;
  #line 2202 
  writel(val,(void *)(hw->hw_addr + 1487488U));
  #line 2204 
  readl((void *)(hw->hw_addr + 745772U));
  #line 2205 
  return;
}

#line 2215  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_main.c"
static int ice_req_irq_msix_misc(struct ice_pf *pf)
{
  #line 2219 
  int oicr_idx;
  #line 2217 
  struct device *dev = & (pf->pdev)->dev;
  #line 2218 
  struct ice_hw *hw = & pf->hw;
  #line 2219 
  int err = 0;
  #line 2221 
  if ((int)pf->int_name[0] == 0) {
    #line 2222 
    ;
    #line 2222 
    snprintf((char *)(& pf->int_name),31UL,(char *)"%s-%s:misc",dev_driver_string(dev),dev_name(dev));
  }
  #line 2229 
  if ((int)ice_is_reset_in_progress((unsigned long *)(& pf->state)) != 0) 
    #line 2230 
    goto skip_req_irq;
  #line 2233 
  oicr_idx = ice_get_res(pf,pf->irq_tracker,(unsigned short)1,(unsigned short)32767);
  #line 2234 
  if (oicr_idx < 0) 
                    #line 2235 
                    return oicr_idx;
  #line 2237 
  pf->num_avail_sw_msix += 4294967295U;
  #line 2238 
  pf->oicr_idx = (unsigned int)oicr_idx;
  #line 2240 
  err = devm_request_irq(dev,(pf->msix_entries + (unsigned long)pf->oicr_idx)->vector,& ice_misc_intr,0UL,(char *)(& pf->int_name),(void *)pf);
  #line 2242 
  if (err != 0) {
    #line 2243 
    _dev_err(dev,(char *)"devm_request_irq for %s failed: %d\n",(char *)(& pf->int_name),err);
    #line 2245 
    ice_free_res(pf->irq_tracker,(unsigned short)1,(unsigned short)32767);
    #line 2246 
    (pf->num_avail_sw_msix) ++;
    #line 2247 
    return err;
  }
  #line 2250 
  skip_req_irq: 
                #line 2250 
  ;
  #line 2251 
  ice_ena_misc_vector(pf);
  #line 2253 
  ice_ena_ctrlq_interrupts(hw,(unsigned short)((int)((unsigned short)pf->oicr_idx)));
  #line 2254 
  writel(62U,(void *)(hw->hw_addr + (unsigned long)((pf->oicr_idx + 348160U) * 4U)));
  #line 2257 
  readl((void *)(hw->hw_addr + 745772U));
  #line 2258 
  ice_irq_dynamic_ena(hw,(struct ice_vsi *)0,(struct ice_q_vector *)0);
  #line 2260 
  return 0;
}

#line 2271  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_main.c"
static void ice_napi_add(struct ice_vsi *vsi)
{
  #line 2273 
  int v_idx;
  #line 2275 
  if (vsi->netdev == (struct net_device *)0) 
                                             #line 2276 
                                             return;
  #line 2278 
  v_idx = 0;
  #line 2278 
  while (vsi->num_q_vectors > v_idx) {
    #line 2279 
    netif_napi_add(vsi->netdev,& (*(vsi->q_vectors + (unsigned long)v_idx))->napi,& ice_napi_poll,64);
    #line 2278 
    v_idx ++;
  }
  #line 2281 
  return;
}

#line 2287  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_main.c"
static void ice_set_ops(struct net_device *netdev)
{
  #line 2289 
  struct ice_pf *pf = ice_netdev_to_pf(netdev);
  #line 2291 
  if ((int)ice_is_safe_mode(pf) != 0) {
    #line 2292 
    netdev->netdev_ops = & ice_netdev_safe_mode_ops;
    #line 2293 
    ice_set_ethtool_safe_mode_ops(netdev);
    #line 2294 
    return;
  }
  #line 2297 
  netdev->netdev_ops = & ice_netdev_ops;
  #line 2298 
  ice_set_ethtool_ops(netdev);
  #line 2299 
  return;
}

#line 2305  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_main.c"
static void ice_set_netdev_features(struct net_device *netdev)
{
  #line 2308 
  netdev_features_t csumo_features;
  #line 2309 
  netdev_features_t vlano_features;
  #line 2310 
  netdev_features_t dflt_features;
  #line 2311 
  netdev_features_t tso_features;
  #line 2307 
  struct ice_pf *pf = ice_netdev_to_pf(netdev);
  #line 2313 
  if ((int)ice_is_safe_mode(pf) != 0) {
    #line 2315 
    netdev->features = 33ULL;
    #line 2316 
    netdev->hw_features = netdev->features;
    #line 2317 
    return;
  }
  #line 2320 
  dflt_features = 274877906977ULL;
  #line 2324 
  csumo_features = 584115552274ULL;
  #line 2329 
  vlano_features = 896ULL;
  #line 2333 
  tso_features = 65536ULL;
  #line 2336 
  netdev->hw_features = ((dflt_features | csumo_features) | vlano_features) | tso_features;
  #line 2340 
  netdev->features |= netdev->hw_features;
  #line 2342 
  netdev->hw_enc_features |= (dflt_features | csumo_features) | tso_features;
  #line 2344 
  netdev->vlan_features |= (dflt_features | csumo_features) | tso_features;
  #line 2345 
  return;
}

#line 2354  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_main.c"
static int ice_cfg_netdev(struct ice_vsi *vsi)
{
  #line 2357 
  struct ice_netdev_priv *np;
  #line 2358 
  struct net_device *netdev;
  #line 2359 
  u8 mac_addr[6U];
  #line 2360 
  int err;
  #line 2356 
  struct ice_pf *pf = vsi->back;
  #line 2362 
  netdev = cif_alloc_etherdev_mqs(8,(unsigned int)vsi->alloc_txq,(unsigned int)vsi->alloc_rxq);
  #line 2364 
  if (netdev == (struct net_device *)0) 
                                        #line 2365 
                                        return -12;
  #line 2367 
  vsi->netdev = netdev;
  #line 2368 
  np = (struct ice_netdev_priv *)netdev_priv(netdev);
  #line 2369 
  np->vsi = vsi;
  #line 2371 
  ice_set_netdev_features(netdev);
  #line 2373 
  ice_set_ops(netdev);
  #line 2375 
  if (vsi->type == (unsigned int)ICE_VSI_PF) {
    #line 2376 
    netdev->dev.parent = & (pf->pdev)->dev;
    #line 2377 
    ether_addr_copy((u8 *)(& mac_addr),(u8 *)(& (vsi->port_info)->mac.perm_addr));
    #line 2378 
    ether_addr_copy(netdev->dev_addr,(u8 *)(& mac_addr));
    #line 2379 
    ether_addr_copy((u8 *)(& netdev->perm_addr),(u8 *)(& mac_addr));
  }
  #line 2382 
  netdev->priv_flags |= 4096U;
  #line 2385 
  ice_vsi_cfg_netdev_tc(vsi,(unsigned char)((int)vsi->tc_cfg.ena_tc));
  #line 2388 
  netdev->watchdog_timeo = 1250;
  #line 2390 
  netdev->min_mtu = 68U;
  #line 2391 
  netdev->max_mtu = 9702U;
  #line 2393 
  err = cif_register_netdev(vsi->netdev);
  #line 2394 
  if (err != 0) 
                #line 2395 
                return err;
  #line 2397 
  netif_carrier_off(vsi->netdev);
  #line 2400 
  netif_tx_stop_all_queues(vsi->netdev);
  #line 2402 
  return 0;
}

#line 2411  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_main.c"
void ice_fill_rss_lut(u8 *lut, u16 rss_table_size, u16 rss_size)
{
  #line 2413 
  u16 i;
  #line 2415 
  i = (unsigned short)0U;
  #line 2415 
  while ((int)i < (int)rss_table_size) {
    #line 2416 
    *(lut + (unsigned long)i) = (unsigned char)((int)i % (int)rss_size);
    #line 2415 
    i = (u16)((int)i + 1);
  }
  #line 2417 
  return;
}

#line 2428  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_main.c"
static struct ice_vsi *ice_pf_vsi_setup(struct ice_pf *pf, struct ice_port_info *pi)
{
  #line 2430 
  return ice_vsi_setup(pf,pi,(enum ice_vsi_type)ICE_VSI_PF,(unsigned short)256);
}

#line 2442  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_main.c"
struct ice_vsi *ice_lb_vsi_setup(struct ice_pf *pf, struct ice_port_info *pi)
{
  #line 2444 
  return ice_vsi_setup(pf,pi,(enum ice_vsi_type)ICE_VSI_LB,(unsigned short)256);
}

#line 2456  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_main.c"
static int ice_vlan_rx_add_vid(struct net_device *netdev, __be16 proto, u16 vid)
{
  #line 2461 
  int ret;
  #line 2459 
  struct ice_netdev_priv *np = netdev_priv(netdev);
  #line 2460 
  struct ice_vsi *vsi = np->vsi;
  #line 2463 
  if ((unsigned int)vid > 4095U) {
    #line 2464 
    netdev_err(netdev,(char *)"VLAN id requested %d is out of range %d\n",(int)vid,4096);
    #line 2466 
    return -22;
  }
  #line 2469 
  if ((unsigned int)vsi->info.pvid != 0U) 
                                          #line 2470 
                                          return -22;
  #line 2473 
  if ((long)((unsigned int)vid == 0U) != 0L) {
    #line 2474 
    ret = ice_cfg_vlan_pruning(vsi,(_Bool)1,(_Bool)0);
    #line 2475 
    if (ret != 0) 
                  #line 2476 
                  return ret;
  }
  #line 2483 
  ret = ice_vsi_add_vlan(vsi,(unsigned short)((int)vid));
  #line 2484 
  if (ret == 0) {
    #line 2485 
    vsi->vlan_ena = (unsigned char)1U;
    #line 2486 
    cif_set_bit_5(2L,(unsigned long *)(& vsi->flags));
  }
  #line 2489 
  return ret;
}

#line 2501  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_main.c"
static int ice_vlan_rx_kill_vid(struct net_device *netdev, __be16 proto, u16 vid)
{
  #line 2506 
  int ret;
  #line 2504 
  struct ice_netdev_priv *np = netdev_priv(netdev);
  #line 2505 
  struct ice_vsi *vsi = np->vsi;
  #line 2508 
  if ((unsigned int)vsi->info.pvid != 0U) 
                                          #line 2509 
                                          return -22;
  #line 2514 
  ret = ice_vsi_kill_vlan(vsi,(unsigned short)((int)vid));
  #line 2515 
  if (ret != 0) 
                #line 2516 
                return ret;
  #line 2519 
  if ((long)((unsigned int)vid == 0U) != 0L) 
                                             #line 2520 
                                             ret = ice_cfg_vlan_pruning(vsi,(_Bool)0,(_Bool)0);
  #line 2522 
  vsi->vlan_ena = (unsigned char)0U;
  #line 2523 
  cif_set_bit_5(2L,(unsigned long *)(& vsi->flags));
  #line 2524 
  return ret;
}

#line 2533  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_main.c"
static int ice_setup_pf_sw(struct ice_pf *pf)
{
  #line 2535 
  struct ice_vsi *vsi;
  #line 2536 
  int status = 0;
  #line 2538 
  if ((int)ice_is_reset_in_progress((unsigned long *)(& pf->state)) != 0) 
    #line 2539 
    return -16;
  #line 2541 
  vsi = ice_pf_vsi_setup(pf,pf->hw.port_info);
  #line 2542 
  if (vsi == (struct ice_vsi *)0) {
    #line 2543 
    status = -12;
    #line 2544 
    goto unroll_vsi_setup;
  }
  #line 2547 
  status = ice_cfg_netdev(vsi);
  #line 2548 
  if (status != 0) {
    #line 2549 
    status = -19;
    #line 2550 
    goto unroll_vsi_setup;
  }
  #line 2553 
  ice_vsi_cfg_frame_size(vsi);
  #line 2556 
  ice_dcbnl_setup(vsi);
  #line 2562 
  ice_napi_add(vsi);
  #line 2564 
  status = ice_init_mac_fltr(pf);
  #line 2565 
  if (status != 0) 
                   #line 2566 
                   goto unroll_napi_add;
  #line 2568 
  return status;
  #line 2570 
  unroll_napi_add: 
                   #line 2570 
  ;
  #line 2571 
  if (vsi != (struct ice_vsi *)0) {
    #line 2572 
    ice_napi_del(vsi);
    #line 2573 
    if (vsi->netdev != (struct net_device *)0) {
      #line 2574 
      if ((unsigned int)(vsi->netdev)->reg_state == 1U) 
                                                        #line 2575 
                                                        cif_unregister_netdev_0(vsi->netdev);
      #line 2576 
      cif_free_netdev_0(vsi->netdev);
      #line 2577 
      vsi->netdev = (struct net_device *)0;
    }
  }
  #line 2581 
  unroll_vsi_setup: 
                    #line 2581 
  ;
  #line 2582 
  if (vsi != (struct ice_vsi *)0) {
    #line 2583 
    ice_vsi_free_q_vectors(vsi);
    #line 2584 
    ice_vsi_delete(vsi);
    #line 2585 
    ice_vsi_put_qs(vsi);
    #line 2586 
    ice_vsi_clear(vsi);
  }
  #line 2588 
  return status;
}

#line 2598  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_main.c"
static u16 ice_get_avail_q_count(unsigned long *pf_qmap, struct mutex *lock, u16 size)
{
  #line 2600 
  u16 bit;
  #line 2600 
  u16 count = (unsigned short)0U;
  #line 2602 
  cif_mutex_lock_lock(lock);
  #line 2603 
  bit = (unsigned short)find_first_zero_bit(pf_qmap,(unsigned long)size);
  #line 2603 
  while ((int)bit < (int)size) {
    #line 2604 
    count = (u16)((int)count + 1);
    #line 2603 
    bit = (unsigned short)cif_find_next_zero_bit_0(pf_qmap,(unsigned long)size,
                                 (unsigned long)((int)bit + 1));
  }
  #line 2605 
  cif_mutex_unlock_lock(lock);
  #line 2607 
  return count;
}

#line 2614  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_main.c"
u16 ice_get_avail_txq_count(struct ice_pf *pf)
{
  #line 2616 
  return ice_get_avail_q_count(pf->avail_txqs,& pf->avail_q_mutex,
                            (unsigned short)((int)pf->max_pf_txqs));
}

#line 2624  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_main.c"
u16 ice_get_avail_rxq_count(struct ice_pf *pf)
{
  #line 2626 
  return ice_get_avail_q_count(pf->avail_rxqs,& pf->avail_q_mutex,
                            (unsigned short)((int)pf->max_pf_rxqs));
}

#line 2634  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_main.c"
static void ice_deinit_pf(struct ice_pf *pf)
{
  #line 2636 
  ice_service_task_stop(pf);
  #line 2637 
  mutex_destroy(& pf->sw_mutex);
  #line 2638 
  mutex_destroy(& pf->tc_mutex);
  #line 2639 
  mutex_destroy(& pf->avail_q_mutex);
  #line 2641 
  if (pf->avail_txqs != (unsigned long *)0UL) {
    #line 2642 
    bitmap_free(pf->avail_txqs);
    #line 2643 
    pf->avail_txqs = (unsigned long *)0UL;
  }
  #line 2646 
  if (pf->avail_rxqs != (unsigned long *)0UL) {
    #line 2647 
    bitmap_free(pf->avail_rxqs);
    #line 2648 
    pf->avail_rxqs = (unsigned long *)0UL;
  }
  #line 2650 
  return;
}

#line 2656  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_main.c"
static void ice_set_pf_caps(struct ice_pf *pf)
{
  #line 2658 
  struct ice_hw_func_caps *func_caps = & pf->hw.func_caps;
  #line 2660 
  cif_clear_bit_5(4L,(unsigned long *)(& pf->flags));
  #line 2661 
  if ((unsigned int)func_caps->common_cap.dcb != 0U) 
                                                     #line 2662 
                                                     cif_set_bit_5(4L,(unsigned long *)(& pf->flags));
  #line 2664 
  cif_clear_bit_5(3L,(unsigned long *)(& pf->flags));
  #line 2665 
  if ((unsigned int)func_caps->common_cap.sr_iov_1_1 != 0U) {
    #line 2667 
    int __UNIQUE_ID___x563;
    #line 2667 
    int tmp;
    #line 2666 
    cif_set_bit_5(3L,(unsigned long *)(& pf->flags));
    {
      #line 2667 
      __UNIQUE_ID___x563 = (int)func_caps->num_allocd_vfs;
      #line 2667 
      int __UNIQUE_ID___y564 = 256;
      #line 2667 
      if (__UNIQUE_ID___x563 < __UNIQUE_ID___y564) 
                                                   #line 2667 
                                                   tmp = __UNIQUE_ID___x563; else 
                                                                    #line 2667 
                                                                    tmp = __UNIQUE_ID___y564;
      }
    #line 2667 
    pf->num_vfs_supported = (unsigned short)tmp;
  }
  #line 2671 
  cif_clear_bit_5(1L,(unsigned long *)(& pf->flags));
  #line 2672 
  if ((unsigned int)func_caps->common_cap.rss_table_size != 0U) 
                                                                #line 2673 
                                                                cif_set_bit_5(1L,(unsigned long *)(& pf->flags));
  #line 2675 
  pf->max_pf_txqs = func_caps->common_cap.num_txq;
  #line 2676 
  pf->max_pf_rxqs = func_caps->common_cap.num_rxq;
  #line 2677 
  return;
}

#line 2683  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_main.c"
static int ice_init_pf(struct ice_pf *pf)
{
  #line 2685 
  ice_set_pf_caps(pf);
  {
    #line 2687 
    struct lock_class_key __key;
    #line 2687 
    __mutex_init(& pf->sw_mutex,(char *)"&pf->sw_mutex",& __key);
  }
  {
    #line 2688 
    struct lock_class_key __key_0;
    #line 2688 
    __mutex_init(& pf->tc_mutex,(char *)"&pf->tc_mutex",& __key_0);
  }
  {
    #line 2691 
    struct lock_class_key __key_1;
    #line 2691 
    init_timer_key(& pf->serv_tmr,& ice_service_timer,0U,(char *)"(&pf->serv_tmr)",& __key_1);
  }
  #line 2692 
  pf->serv_tmr_period = 250UL;
  {
    #line 2693 
    struct lock_class_key __key_2;
    #line 2693 
    __init_work(& pf->serv_task,0);
    #line 2693 
    atomic_long_t __constr_expr_43 = {.counter = 137438953408LL};
    #line 2693 
    pf->serv_task.data = __constr_expr_43;
    #line 2693 
    lockdep_init_map(& pf->serv_task.lockdep_map,(char *)"(work_completion)",& __key_2,0);
    #line 2693 
    INIT_LIST_HEAD_1(& pf->serv_task.entry);
    #line 2693 
    pf->serv_task.func = & ice_service_task;
  }
  #line 2694 
  cif_clear_bit_5(22L,(unsigned long *)(& pf->state));
  {
    #line 2696 
    struct lock_class_key __key_3;
    #line 2696 
    __mutex_init(& pf->avail_q_mutex,(char *)"&pf->avail_q_mutex",& __key_3);
  }
  #line 2697 
  pf->avail_txqs = bitmap_zalloc((unsigned int)pf->max_pf_txqs,3264U);
  #line 2698 
  if (pf->avail_txqs == (unsigned long *)0UL) 
                                              #line 2699 
                                              return -12;
  #line 2701 
  pf->avail_rxqs = bitmap_zalloc((unsigned int)pf->max_pf_rxqs,3264U);
  #line 2702 
  if (pf->avail_rxqs == (unsigned long *)0UL) {
    #line 2703 
    devm_kfree(& (pf->pdev)->dev,(void *)pf->avail_txqs);
    #line 2704 
    pf->avail_txqs = (unsigned long *)0UL;
    #line 2705 
    return -12;
  }
  #line 2708 
  return 0;
}

#line 2718  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_main.c"
static int ice_ena_msix_range(struct ice_pf *pf)
{
  #line 2734 
  int __UNIQUE_ID___x565;
  #line 2734 
  int tmp_0;
  #line 2721 
  int v_left;
  #line 2721 
  int v_actual;
  #line 2722 
  int needed;
  #line 2722 
  int err;
  #line 2722 
  int i;
  #line 2720 
  struct device *dev = & (pf->pdev)->dev;
  #line 2721 
  int v_budget = 0;
  #line 2724 
  v_left = (int)pf->hw.func_caps.common_cap.num_msix_vectors;
  #line 2727 
  needed = 1;
  #line 2728 
  if (v_left < needed) 
                       #line 2729 
                       goto no_hw_vecs_left_err;
  #line 2730 
  v_budget += needed;
  #line 2731 
  v_left -= needed;
  {
    #line 2734 
    __UNIQUE_ID___x565 = (int)num_online_cpus_0();
    #line 2734 
    int __UNIQUE_ID___y566 = v_left;
    #line 2734 
    if (__UNIQUE_ID___x565 < __UNIQUE_ID___y566) 
                                                 #line 2734 
                                                 tmp_0 = __UNIQUE_ID___x565; else 
                                                                    #line 2734 
                                                                    tmp_0 = __UNIQUE_ID___y566;
    }
  #line 2734 
  needed = tmp_0;
  #line 2735 
  if (v_left < needed) 
                       #line 2736 
                       goto no_hw_vecs_left_err;
  #line 2737 
  pf->num_lan_msix = (unsigned int)needed;
  #line 2738 
  v_budget += needed;
  #line 2739 
  v_left -= needed;
  #line 2741 
  pf->msix_entries = (struct msix_entry *)cif_devm_kcalloc_2(dev,(unsigned long)v_budget,8UL,3264U);
  #line 2744 
  if (pf->msix_entries == (struct msix_entry *)0) {
    #line 2745 
    err = -12;
    #line 2746 
    goto exit_err;
  }
  #line 2749 
  i = 0;
  #line 2749 
  while (i < v_budget) {
    #line 2750 
    (pf->msix_entries + (unsigned long)i)->entry = (unsigned short)i;
    #line 2749 
    i ++;
  }
  #line 2753 
  v_actual = pci_enable_msix_range(pf->pdev,pf->msix_entries,2,v_budget);
  #line 2756 
  if (v_actual < 0) {
    #line 2757 
    _dev_err(dev,(char *)"unable to reserve MSI-X vectors\n");
    #line 2758 
    err = v_actual;
    #line 2759 
    goto msix_err;
  }
  #line 2762 
  if (v_actual < v_budget) {
    #line 2763 
    _dev_warn(dev,(char *)"not enough OS MSI-X vectors. requested = %d, obtained = %d\n",v_budget,v_actual);
    #line 2769 
    if (v_actual <= 1) {
      #line 2771 
      pci_disable_msix(pf->pdev);
      #line 2772 
      err = -34;
      #line 2773 
      goto msix_err;
    }
    else 
         #line 2775 
         pf->num_lan_msix = 2U;
  }
  #line 2779 
  return v_actual;
  #line 2781 
  msix_err: 
            #line 2781 
  ;
  #line 2782 
  devm_kfree(dev,(void *)pf->msix_entries);
  #line 2783 
  goto exit_err;
  #line 2785 
  no_hw_vecs_left_err: 
                       #line 2785 
  ;
  #line 2786 
  _dev_err(dev,(char *)"not enough device MSI-X vectors. requested = %d, available = %d\n",needed,v_left);
  #line 2789 
  err = -34;
  #line 2790 
  exit_err: 
            #line 2790 
  ;
  #line 2791 
  pf->num_lan_msix = 0U;
  #line 2792 
  return err;
}

#line 2799  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_main.c"
static void ice_dis_msix(struct ice_pf *pf)
{
  #line 2801 
  pci_disable_msix(pf->pdev);
  #line 2802 
  devm_kfree(& (pf->pdev)->dev,(void *)pf->msix_entries);
  #line 2803 
  pf->msix_entries = (struct msix_entry *)0;
  #line 2804 
  return;
}

#line 2810  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_main.c"
static void ice_clear_interrupt_scheme(struct ice_pf *pf)
{
  #line 2812 
  ice_dis_msix(pf);
  #line 2814 
  if (pf->irq_tracker != (struct ice_res_tracker *)0) {
    #line 2815 
    devm_kfree(& (pf->pdev)->dev,(void *)pf->irq_tracker);
    #line 2816 
    pf->irq_tracker = (struct ice_res_tracker *)0;
  }
  #line 2818 
  return;
}

#line 2824  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_main.c"
static int ice_init_interrupt_scheme(struct ice_pf *pf)
{
  #line 2826 
  int vectors;
  #line 2828 
  vectors = ice_ena_msix_range(pf);
  #line 2830 
  if (vectors < 0) 
                   #line 2831 
                   return vectors;
  #line 2835 
  pf->irq_tracker = (struct ice_res_tracker *)cif_devm_kzalloc_3(& (pf->pdev)->dev,((unsigned long)vectors + 3UL) * 2UL,3264U);
  #line 2837 
  if (pf->irq_tracker == (struct ice_res_tracker *)0) {
    #line 2838 
    ice_dis_msix(pf);
    #line 2839 
    return -12;
  }
  #line 2843 
  pf->num_avail_sw_msix = (unsigned int)vectors;
  #line 2844 
  (pf->irq_tracker)->num_entries = (unsigned short)vectors;
  #line 2845 
  (pf->irq_tracker)->end = (pf->irq_tracker)->num_entries;
  #line 2847 
  return 0;
}

#line 2860  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_main.c"
int ice_vsi_recfg_qs(struct ice_vsi *vsi, int new_rx, int new_tx)
{
  #line 2862 
  struct ice_pf *pf = vsi->back;
  #line 2863 
  int err = 0;
  #line 2863 
  int timeout = 50;
  #line 2865 
  if (new_rx == 0 && new_tx == 0) 
                                  #line 2866 
                                  return -22;
  #line 2868 
  while (1) {
    #line 2868 
    if (! ((int)test_and_clear_bit(21L,(unsigned long *)(& pf->state)) != 0)) 
      #line 2868 
      break;
    #line 2869 
    timeout --;
    #line 2870 
    if (timeout == 0) 
                      #line 2871 
                      return -16;
    #line 2872 
    usleep_range(1000UL,2000UL);
  }
  #line 2875 
  if (new_tx != 0) 
                   #line 2876 
                   vsi->req_txq = (unsigned short)new_tx;
  #line 2877 
  if (new_rx != 0) 
                   #line 2878 
                   vsi->req_rxq = (unsigned short)new_rx;
  #line 2881 
  if (! netif_running(vsi->netdev)) {
    #line 2882 
    ice_vsi_rebuild(vsi,(_Bool)0);
    {
      #line 2883 
      bool branch;
      #line 2883 
      struct _ddebug __UNIQUE_ID_ddebug567 = {.modname = (char *)"ice", .function = (char *)"ice_vsi_recfg_qs", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_main.c", .format = (char *)"Link is down, queue count change happens when link is brought up\n", .lineno = (unsigned int)2883U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 2883 
      branch = arch_static_branch(& __UNIQUE_ID_ddebug567.key.dd_key_false.key,(_Bool)0);
      #line 2883 
      if ((long)((long)((int)branch != 0)) != 0L) 
                                                  #line 2883 
                                                  __dynamic_dev_dbg(& __UNIQUE_ID_ddebug567,& (pf->pdev)->dev,(char *)"Link is down, queue count change happens when link is brought up\n");
    }
    #line 2884 
    goto done;
  }
  #line 2887 
  ice_vsi_close(vsi);
  #line 2888 
  ice_vsi_rebuild(vsi,(_Bool)0);
  #line 2889 
  ice_pf_dcb_recfg(pf);
  #line 2890 
  ice_vsi_open(vsi);
  #line 2891 
  done: 
        #line 2891 
  ;
  #line 2892 
  cif_clear_bit_5(21L,(unsigned long *)(& pf->state));
  #line 2893 
  return err;
}

#line 2902  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_main.c"
static void ice_log_pkg_init(struct ice_hw *hw, enum ice_status *status)
{
  #line 2904 
  struct ice_pf *pf = (struct ice_pf *)hw->back;
  #line 2905 
  struct device *dev = & (pf->pdev)->dev;
  #line 2907 
  switch ((int)*status) {
    #line 2908 
    case 0: 
            #line 2908 
    ;
    #line 2913 
    if ((((int)hw->pkg_ver.major == (int)hw->active_pkg_ver.major && (int)hw->pkg_ver.minor == (int)hw->active_pkg_ver.minor) && (int)hw->pkg_ver.update == (int)hw->active_pkg_ver.update) && (int)hw->pkg_ver.draft == (int)hw->active_pkg_ver.draft) {
      #line 2916 
      if (memcmp((void *)(& hw->pkg_name),(void *)(& hw->active_pkg_name),32UL) == 0) 
        #line 2919 
        if (hw->pkg_dwnld_status == (unsigned int)ICE_AQ_RC_EEXIST) 
                                                                    #line 2920 
                                                                    _dev_info(dev,(char *)"DDP package already present on device: %s version %d.%d.%d.%d\n",(u8 *)(& hw->active_pkg_name),(int)hw->active_pkg_ver.major,(int)hw->active_pkg_ver.minor,(int)hw->active_pkg_ver.update,(int)hw->active_pkg_ver.draft); else 
                                                                    #line 2928 
                                                                    _dev_info(dev,(char *)"The DDP package was successfully loaded: %s version %d.%d.%d.%d\n",(u8 *)(& hw->active_pkg_name),(int)hw->active_pkg_ver.major,(int)hw->active_pkg_ver.minor,(int)hw->active_pkg_ver.update,(int)hw->active_pkg_ver.draft);
      else 
           #line 2913 
           goto _LAND;
    }
    else 
      #line 2913 
      _LAND: 
             #line 2935 
             if ((unsigned int)hw->active_pkg_ver.major != 1U || (unsigned int)hw->active_pkg_ver.minor != 3U) {
               #line 2937 
               _dev_err(dev,(char *)"The device has a DDP package that is not supported by the driver.  The device has package \'%s\' version %d.%d.x.x.  The driver requires version %d.%d.x.x.  Entering Safe Mode.\n",(u8 *)(& hw->active_pkg_name),(int)hw->active_pkg_ver.major,(int)hw->active_pkg_ver.minor,1,3);
               #line 2943 
               *status = ICE_ERR_NOT_SUPPORTED;
             }
             else 
               #line 2944 
               if ((unsigned int)hw->active_pkg_ver.major == 1U && (unsigned int)hw->active_pkg_ver.minor == 3U) 
                 #line 2946 
                 _dev_info(dev,(char *)"The driver could not load the DDP package file because a compatible DDP package is already present on the device.  The device has package \'%s\' version %d.%d.%d.%d.  The package file found by the driver: \'%s\' version %d.%d.%d.%d.\n",(u8 *)(& hw->active_pkg_name),(int)hw->active_pkg_ver.major,(int)hw->active_pkg_ver.minor,(int)hw->active_pkg_ver.update,(int)hw->active_pkg_ver.draft,(u8 *)(& hw->pkg_name),(int)hw->pkg_ver.major,(int)hw->pkg_ver.minor,(int)hw->pkg_ver.update,(int)hw->pkg_ver.draft);
               else {
                 #line 2959 
                 _dev_err(dev,(char *)"An unknown error occurred when loading the DDP package, please reboot the system.  If the problem persists, update the NVM.  Entering Safe Mode.\n");
                 #line 2961 
                 *status = ICE_ERR_NOT_SUPPORTED;
               }
    #line 2963 
    break;
    #line 2964 
    case -52: 
              #line 2964 
    ;
    #line 2966 
    case -12: 
              #line 2966 
    ;
    #line 2967 
    _dev_err(dev,(char *)"The DDP package file is invalid. Entering Safe Mode.\n");
    #line 2969 
    break;
    #line 2970 
    case -4: 
             #line 2970 
    ;
    #line 2972 
    if ((unsigned int)hw->pkg_ver.major > 1U || (unsigned int)hw->pkg_ver.major == 1U && (unsigned int)hw->pkg_ver.minor > 3U) 
      #line 2975 
      _dev_err(dev,(char *)"The DDP package file version is higher than the driver supports.  Please use an updated driver.  Entering Safe Mode.\n");
    else 
      #line 2977 
      if ((unsigned int)hw->pkg_ver.major == 0U || (unsigned int)hw->pkg_ver.major == 1U && (unsigned int)hw->pkg_ver.minor <= 2U) 
        #line 2980 
        _dev_err(dev,(char *)"The DDP package file version is lower than the driver supports.  The driver requires version %d.%d.x.x.  Please use an updated DDP Package file.  Entering Safe Mode.\n",1,3);
    #line 2983 
    break;
    #line 2984 
    case -100: 
               #line 2984 
    ;
    #line 2985 
    switch ((unsigned int)hw->pkg_dwnld_status) {
      #line 2986 
      case (unsigned int)24: 
                             #line 2986 
      ;
      #line 2987 
      case (unsigned int)25: 
                             #line 2987 
      ;
      #line 2988 
      _dev_err(dev,(char *)"The DDP package could not be loaded because its signature is not valid.  Please use a valid DDP Package.  Entering Safe Mode.\n");
      #line 2990 
      return;
      #line 2991 
      case (unsigned int)26: 
                             #line 2991 
      ;
      #line 2992 
      _dev_err(dev,(char *)"The DDP Package could not be loaded because its security revision is too low.  Please use an updated DDP Package.  Entering Safe Mode.\n");
      #line 2994 
      return;
      #line 2995 
      case (unsigned int)27: 
                             #line 2995 
      ;
      #line 2996 
      case (unsigned int)28: 
                             #line 2996 
      ;
      #line 2997 
      _dev_err(dev,(char *)"An error occurred on the device while loading the DDP package.  The device will be reset.\n");
      #line 2999 
      return;
      #line 3000 
      default: 
               #line 3000 
      ;
      #line 3001 
      break;
    }
    #line 3004 
    default: 
             #line 3004 
    ;
    #line 3005 
    _dev_err(dev,(char *)"An unknown error (%d) occurred when loading the DDP package.  Entering Safe Mode.\n",(int)*status);
    #line 3008 
    break;
  }
  #line 3010 
  return;
}

#line 3021  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_main.c"
static void ice_load_pkg(struct firmware *firmware, struct ice_pf *pf)
{
  #line 3023 
  enum ice_status status = -1;
  #line 3024 
  struct device *dev = & (pf->pdev)->dev;
  #line 3025 
  struct ice_hw *hw = & pf->hw;
  #line 3028 
  if (firmware != (struct firmware *)0 && hw->pkg_copy == (u8 *)0U) {
    #line 3029 
    status = ice_copy_and_init_pkg(hw,firmware->data,(unsigned int)firmware->size);
    #line 3031 
    ice_log_pkg_init(hw,& status);
  }
  else 
    #line 3032 
    if (firmware == (struct firmware *)0 && hw->pkg_copy != (u8 *)0U) {
      #line 3034 
      status = ice_init_pkg(hw,hw->pkg_copy,hw->pkg_size);
      #line 3035 
      ice_log_pkg_init(hw,& status);
    }
    else 
         #line 3037 
         _dev_err(dev,(char *)"The DDP package file failed to load. Entering Safe Mode.\n");
  #line 3041 
  if (status != ICE_SUCCESS) {
    #line 3043 
    cif_clear_bit_5(6L,(unsigned long *)(& pf->flags));
    #line 3044 
    return;
  }
  #line 3050 
  cif_set_bit_5(6L,(unsigned long *)(& pf->flags));
  #line 3051 
  return;
}

#line 3061  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_main.c"
static void ice_verify_cacheline_size(struct ice_pf *pf)
{
  #line 3063 
  if (((unsigned long)readl((void *)(pf->hw.hw_addr + 778244U)) & 2UL) != 0UL) 
    #line 3064 
    _dev_warn(& (pf->pdev)->dev,(char *)"%d Byte cache line assumption is invalid, driver may have Tx timeouts!\n",64);
  #line 3065 
  return;
}

#line 3075  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_main.c"
static enum ice_status ice_send_version(struct ice_pf *pf)
{
  #line 3077 
  struct ice_driver_ver dv;
  #line 3079 
  dv.major_ver = (unsigned char)0U;
  #line 3080 
  dv.minor_ver = (unsigned char)8U;
  #line 3081 
  dv.build_ver = (unsigned char)1U;
  #line 3082 
  dv.subbuild_ver = (unsigned char)0U;
  #line 3083 
  strscpy((char *)(& dv.driver_string),(char *)"0",32UL);
  #line 3085 
  return ice_aq_send_driver_ver(& pf->hw,& dv,(struct ice_sq_cd *)0);
}

#line 3092  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_main.c"
static char *ice_get_opt_fw_name(struct ice_pf *pf)
{
  #line 3099 
  u32 dword;
  #line 3100 
  u8 dsn[8U];
  #line 3101 
  int pos;
  #line 3097 
  struct pci_dev *pdev = pf->pdev;
  #line 3098 
  char *opt_fw_filename = (char *)0;
  #line 3106 
  pos = pci_find_ext_capability(pdev,3);
  #line 3107 
  if (pos != 0) {
    #line 3108 
    opt_fw_filename = (char *)kzalloc_1(255UL,3264U);
    #line 3109 
    if (opt_fw_filename == (char *)0) 
                                      #line 3110 
                                      return (char *)0;
    #line 3112 
    pci_read_config_dword(pdev,pos + 4,& dword);
    #line 3113 
    put_unaligned_le32(dword,(void *)(dsn));
    #line 3114 
    pci_read_config_dword(pdev,pos + 8,& dword);
    #line 3115 
    put_unaligned_le32(dword,(void *)(& dsn[4]));
    #line 3116 
    snprintf(opt_fw_filename,255UL,(char *)"%sice-%02x%02x%02x%02x%02x%02x%02x%02x.pkg",(char *)"intel/ice/ddp/",(int)dsn[7],(int)dsn[6],(int)dsn[5],(int)dsn[4],(int)dsn[3],(int)dsn[2],(int)dsn[1],(int)dsn[0]);
  }
  #line 3123 
  return opt_fw_filename;
}

#line 3130  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_main.c"
static void ice_request_fw(struct ice_pf *pf)
{
  #line 3132 
  char *opt_fw_filename = ice_get_opt_fw_name(pf);
  #line 3133 
  struct firmware *firmware = (struct firmware *)0;
  #line 3134 
  struct device *dev = & (pf->pdev)->dev;
  #line 3135 
  int err = 0;
  #line 3141 
  if (opt_fw_filename != (char *)0) {
    #line 3142 
    err = firmware_request_nowarn(& firmware,opt_fw_filename,dev);
    #line 3143 
    if (err != 0) {
      #line 3144 
      kfree((void *)opt_fw_filename);
      #line 3145 
      goto dflt_pkg_load;
    }
    #line 3149 
    ice_load_pkg(firmware,pf);
    #line 3150 
    kfree((void *)opt_fw_filename);
    #line 3151 
    cif_release_firmware(firmware);
    #line 3152 
    return;
  }
  #line 3155 
  dflt_pkg_load: 
                 #line 3155 
  ;
  #line 3156 
  err = cif_request_firmware(& firmware,(char *)"intel/ice/ddp/",dev);
  #line 3157 
  if (err != 0) {
    #line 3158 
    _dev_err(dev,(char *)"The DDP package file was not found or could not be read. Entering Safe Mode\n");
    #line 3160 
    return;
  }
  #line 3164 
  ice_load_pkg(firmware,pf);
  #line 3165 
  cif_release_firmware(firmware);
  #line 3166 
  return;
}

#line 3176  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_main.c"
static int ice_probe(struct pci_dev *pdev, struct pci_device_id *ent)
{
  #line 3179 
  struct ice_pf *pf;
  #line 3180 
  struct ice_hw *hw;
  #line 3181 
  int err;
  #line 3178 
  struct device *dev = & pdev->dev;
  #line 3184 
  err = pcim_enable_device(pdev);
  #line 3185 
  if (err != 0) 
                #line 3186 
                return err;
  #line 3188 
  ;
  #line 3188 
  err = pcim_iomap_regions(pdev,1,pci_name(pdev));
  #line 3189 
  if (err != 0) {
    #line 3190 
    _dev_err(dev,(char *)"BAR0 I/O map error %d\n",err);
    #line 3191 
    return err;
  }
  #line 3194 
  pf = (struct ice_pf *)cif_devm_kzalloc_3(dev,11392UL,3264U);
  #line 3195 
  if (pf == (struct ice_pf *)0) 
                                #line 3196 
                                return -12;
  #line 3199 
  err = dma_set_mask_and_coherent(dev,18446744073709551615ULL);
  #line 3200 
  if (err != 0) 
                #line 3201 
                err = dma_set_mask_and_coherent(dev,4294967295ULL);
  #line 3202 
  if (err != 0) {
    #line 3203 
    _dev_err(dev,(char *)"DMA configuration failed: 0x%x\n",err);
    #line 3204 
    return err;
  }
  #line 3207 
  pci_enable_pcie_error_reporting(pdev);
  #line 3208 
  pci_set_master(pdev);
  #line 3210 
  pf->pdev = pdev;
  #line 3211 
  pci_set_drvdata(pdev,(void *)pf);
  #line 3212 
  cif_set_bit_5(1L,(unsigned long *)(& pf->state));
  #line 3214 
  cif_set_bit_5(23L,(unsigned long *)(& pf->state));
  #line 3216 
  hw = & pf->hw;
  #line 3217 
  hw->hw_addr = (u8 *)*pcim_iomap_table(pdev);
  #line 3218 
  pci_save_state(pdev);
  #line 3220 
  hw->back = (void *)pf;
  #line 3221 
  hw->vendor_id = pdev->vendor;
  #line 3222 
  hw->device_id = pdev->device;
  #line 3223 
  pci_read_config_byte(pdev,8,& hw->revision_id);
  #line 3224 
  hw->subsystem_vendor_id = pdev->subsystem_vendor;
  #line 3225 
  hw->subsystem_device_id = pdev->subsystem_device;
  #line 3226 
  hw->bus.device = (unsigned short)((unsigned int)((unsigned short)(pdev->devfn >> 3)) & 31U);
  #line 3227 
  hw->bus.func = (unsigned char)((unsigned int)((unsigned char)pdev->devfn) & 7U);
  #line 3228 
  ice_set_ctrlq_len(hw);
  #line 3230 
  pf->msg_enable = netif_msg_init(debug,7);
  #line 3237 
  err = (int)ice_init_hw(hw);
  #line 3238 
  if (err != 0) {
    #line 3239 
    _dev_err(dev,(char *)"ice_init_hw failed: %d\n",err);
    #line 3240 
    err = -5;
    #line 3241 
    goto err_exit_unroll;
  }
  #line 3244 
  ;
  #line 3244 
  ;
  #line 3244 
  ;
  #line 3244 
  ;
  #line 3244 
  ;
  #line 3244 
  ;
  #line 3244 
  ;
  #line 3244 
  ;
  #line 3244 
  _dev_info(dev,(char *)"firmware %d.%d.%d api %d.%d.%d nvm %s build 0x%08x\n",(int)hw->fw_maj_ver,(int)hw->fw_min_ver,(int)hw->fw_patch,(int)hw->api_maj_ver,(int)hw->api_min_ver,(int)hw->api_patch,ice_nvm_version_str(hw),hw->fw_build);
  #line 3249 
  ice_request_fw(pf);
  #line 3255 
  if ((int)ice_is_safe_mode(pf) != 0) {
    #line 3256 
    _dev_err(dev,(char *)"Package download failed. Advanced features disabled - Device now in Safe Mode\n");
    #line 3263 
    ice_set_safe_mode_caps(hw);
  }
  #line 3266 
  err = ice_init_pf(pf);
  #line 3267 
  if (err != 0) {
    #line 3268 
    _dev_err(dev,(char *)"ice_init_pf failed: %d\n",err);
    #line 3269 
    goto err_init_pf_unroll;
  }
  #line 3272 
  pf->num_alloc_vsi = (unsigned short)hw->func_caps.guar_num_vsi;
  #line 3273 
  if ((unsigned int)pf->num_alloc_vsi == 0U) {
    #line 3274 
    err = -5;
    #line 3275 
    goto err_init_pf_unroll;
  }
  #line 3278 
  pf->vsi = (struct ice_vsi **)cif_devm_kcalloc_2(dev,(unsigned long)pf->num_alloc_vsi,8UL,3264U);
  #line 3280 
  if (pf->vsi == (struct ice_vsi **)0) {
    #line 3281 
    err = -12;
    #line 3282 
    goto err_init_pf_unroll;
  }
  #line 3285 
  err = ice_init_interrupt_scheme(pf);
  #line 3286 
  if (err != 0) {
    #line 3287 
    _dev_err(dev,(char *)"ice_init_interrupt_scheme failed: %d\n",err);
    #line 3288 
    err = -5;
    #line 3289 
    goto err_init_interrupt_unroll;
  }
  #line 3293 
  cif_clear_bit_5(1L,(unsigned long *)(& pf->state));
  #line 3300 
  err = ice_req_irq_msix_misc(pf);
  #line 3301 
  if (err != 0) {
    #line 3302 
    _dev_err(dev,(char *)"setup of misc vector failed: %d\n",err);
    #line 3303 
    goto err_init_interrupt_unroll;
  }
  #line 3307 
  pf->first_sw = (struct ice_sw *)cif_devm_kzalloc_3(dev,16UL,3264U);
  #line 3308 
  if (pf->first_sw == (struct ice_sw *)0) {
    #line 3309 
    err = -12;
    #line 3310 
    goto err_msix_misc_unroll;
  }
  #line 3313 
  if ((unsigned int)hw->evb_veb != 0U) 
                                       #line 3314 
                                       (pf->first_sw)->bridge_mode = (unsigned short)0U; else 
                                                                    #line 3316 
                                                                    (pf->first_sw)->bridge_mode = (unsigned short)1U;
  #line 3318 
  (pf->first_sw)->pf = pf;
  #line 3321 
  (pf->first_sw)->sw_id = (hw->port_info)->sw_id;
  #line 3323 
  err = ice_setup_pf_sw(pf);
  #line 3324 
  if (err != 0) {
    #line 3325 
    _dev_err(dev,(char *)"probe failed due to setup PF switch: %d\n",err);
    #line 3326 
    goto err_alloc_sw_unroll;
  }
  #line 3329 
  cif_clear_bit_5(23L,(unsigned long *)(& pf->state));
  #line 3332 
  err = (int)ice_send_version(pf);
  #line 3333 
  if (err != 0) {
    #line 3334 
    _dev_err(dev,(char *)"probe failed sending driver version %s. error: %d\n",(char *)(& ice_drv_ver),err);
    #line 3337 
    goto err_alloc_sw_unroll;
  }
  #line 3341 
  ;
  #line 3341 
  cif_mod_timer(& pf->serv_tmr,round_jiffies(pf->serv_tmr_period + jiffies));
  #line 3343 
  err = ice_init_link_events(pf->hw.port_info);
  #line 3344 
  if (err != 0) {
    #line 3345 
    _dev_err(dev,(char *)"ice_init_link_events failed: %d\n",err);
    #line 3346 
    goto err_alloc_sw_unroll;
  }
  #line 3349 
  ice_verify_cacheline_size(pf);
  #line 3352 
  if ((int)ice_is_safe_mode(pf) != 0) 
                                      #line 3353 
                                      return 0;
  #line 3358 
  if (ice_init_pf_dcb(pf,(_Bool)0) != 0) {
    #line 3359 
    cif_clear_bit_5(4L,(unsigned long *)(& pf->flags));
    #line 3360 
    cif_clear_bit_5(5L,(unsigned long *)(& pf->flags));
  }
  else 
       #line 3362 
       ice_cfg_lldp_mib_change(& pf->hw,(_Bool)1);
  #line 3366 
  pcie_print_link_status(pf->pdev);
  #line 3368 
  return 0;
  #line 3370 
  err_alloc_sw_unroll: 
                       #line 3370 
  ;
  #line 3371 
  cif_set_bit_5(23L,(unsigned long *)(& pf->state));
  #line 3372 
  cif_set_bit_5(1L,(unsigned long *)(& pf->state));
  #line 3373 
  devm_kfree(dev,(void *)pf->first_sw);
  #line 3374 
  err_msix_misc_unroll: 
                        #line 3374 
  ;
  #line 3375 
  ice_free_irq_msix_misc(pf);
  #line 3376 
  err_init_interrupt_unroll: 
                             #line 3376 
  ;
  #line 3377 
  ice_clear_interrupt_scheme(pf);
  #line 3378 
  devm_kfree(dev,(void *)pf->vsi);
  #line 3379 
  err_init_pf_unroll: 
                      #line 3379 
  ;
  #line 3380 
  ice_deinit_pf(pf);
  #line 3381 
  ice_deinit_hw(hw);
  #line 3382 
  err_exit_unroll: 
                   #line 3382 
  ;
  #line 3383 
  pci_disable_pcie_error_reporting(pdev);
  #line 3384 
  return err;
}

#line 3391  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_main.c"
static void ice_remove(struct pci_dev *pdev)
{
  #line 3394 
  int i;
  #line 3393 
  struct ice_pf *pf = pci_get_drvdata(pdev);
  #line 3396 
  if (pf == (struct ice_pf *)0) 
                                #line 3397 
                                return;
  #line 3399 
  i = 0;
  #line 3399 
  while (i <= 19) {
    {
      #line 3400 
      if (! ice_is_reset_in_progress((unsigned long *)(& pf->state))) 
        #line 3401 
        break;
      #line 3402 
      msleep(100U);
    }
    #line 3399 
    i ++;
  }
  #line 3405 
  cif_set_bit_5(1L,(unsigned long *)(& pf->state));
  #line 3406 
  ice_service_task_stop(pf);
  #line 3408 
  if ((int)test_bit(2L,(unsigned long *)(& pf->flags)) != 0) 
                                                             #line 3409 
                                                             ice_free_vfs(pf);
  #line 3410 
  ice_vsi_release_all(pf);
  #line 3411 
  ice_free_irq_msix_misc(pf);
  #line 3412 
  i = 0;
  #line 3412 
  while ((int)pf->num_alloc_vsi > i) {
    #line 3413 
    if (*(pf->vsi + (unsigned long)i) == (struct ice_vsi *)0) 
                                                              #line 3414 
                                                              goto __Cont;
    #line 3415 
    ice_vsi_free_q_vectors(*(pf->vsi + (unsigned long)i));
    #line 3412 
    __Cont: 
            #line 3412 
    i ++;
  }
  #line 3417 
  ice_deinit_pf(pf);
  #line 3418 
  ice_deinit_hw(& pf->hw);
  #line 3423 
  ice_reset(& pf->hw,(enum ice_reset_req)ICE_RESET_PFR);
  #line 3424 
  pci_wait_for_pending_transaction(pdev);
  #line 3425 
  ice_clear_interrupt_scheme(pf);
  #line 3426 
  pci_disable_pcie_error_reporting(pdev);
  #line 3427 
  return;
}

#line 3438  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_main.c"
static pci_ers_result_t ice_pci_err_detected(struct pci_dev *pdev, enum pci_channel_state err)
{
  #line 3440 
  struct ice_pf *pf = pci_get_drvdata(pdev);
  #line 3442 
  if (pf == (struct ice_pf *)0) {
    #line 3443 
    _dev_err(& pdev->dev,(char *)"%s: unrecoverable device error %d\n",(char *)"ice_pci_err_detected",(unsigned int)err);
    #line 3445 
    return 4U;
  }
  #line 3448 
  if (! test_bit(12L,(unsigned long *)(& pf->state))) {
    #line 3449 
    ice_service_task_stop(pf);
    #line 3451 
    if (! test_bit(3L,(unsigned long *)(& pf->state))) {
      #line 3452 
      cif_set_bit_5(6L,(unsigned long *)(& pf->state));
      #line 3453 
      ice_prepare_for_reset(pf);
    }
  }
  #line 3457 
  return 3U;
}

#line 3467  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_main.c"
static pci_ers_result_t ice_pci_err_slot_reset(struct pci_dev *pdev)
{
  #line 3470 
  pci_ers_result_t result;
  #line 3471 
  int err;
  #line 3472 
  u32 reg;
  #line 3469 
  struct ice_pf *pf = pci_get_drvdata(pdev);
  #line 3474 
  err = pci_enable_device_mem(pdev);
  #line 3475 
  if (err != 0) {
    #line 3476 
    _dev_err(& pdev->dev,(char *)"Cannot re-enable PCI device after reset, error %d\n",err);
    #line 3479 
    result = 4U;
  }
  else {
    #line 3481 
    pci_set_master(pdev);
    #line 3482 
    pci_restore_state(pdev);
    #line 3483 
    pci_save_state(pdev);
    #line 3484 
    pci_wake_from_d3(pdev,(_Bool)0);
    #line 3487 
    reg = readl((void *)(pf->hw.hw_addr + 754064U));
    #line 3488 
    if (reg == 0U) 
                   #line 3489 
                   result = 5U; else 
                                     #line 3491 
                                     result = 4U;
  }
  #line 3494 
  err = pci_cleanup_aer_uncorrect_error_status(pdev);
  #line 3495 
  if (err != 0) {
    #line 3496 
    bool branch;
    #line 3496 
    struct _ddebug __UNIQUE_ID_ddebug568 = {.modname = (char *)"ice", .function = (char *)"ice_pci_err_slot_reset", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_main.c", .format = (char *)"pci_cleanup_aer_uncorrect_error_status failed, error %d\n", .lineno = (unsigned int)3496U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 3496 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug568.key.dd_key_false.key,(_Bool)0);
    #line 3496 
    if ((long)((long)((int)branch != 0)) != 0L) 
                                                #line 3496 
                                                __dynamic_dev_dbg(& __UNIQUE_ID_ddebug568,& pdev->dev,(char *)"pci_cleanup_aer_uncorrect_error_status failed, error %d\n",err);
  }
  #line 3501 
  return result;
}

#line 3511  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_main.c"
static void ice_pci_err_resume(struct pci_dev *pdev)
{
  #line 3513 
  struct ice_pf *pf = pci_get_drvdata(pdev);
  #line 3515 
  if (pf == (struct ice_pf *)0) {
    #line 3516 
    _dev_err(& pdev->dev,(char *)"%s failed, device is unrecoverable\n",(char *)"ice_pci_err_resume");
    #line 3518 
    return;
  }
  #line 3521 
  if ((int)test_bit(12L,(unsigned long *)(& pf->state)) != 0) {
    {
      #line 3522 
      bool branch;
      #line 3522 
      struct _ddebug __UNIQUE_ID_ddebug569 = {.modname = (char *)"ice", .function = (char *)"ice_pci_err_resume", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_main.c", .format = (char *)"%s failed to resume normal operations!\n", .lineno = (unsigned int)3522U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 3522 
      branch = arch_static_branch(& __UNIQUE_ID_ddebug569.key.dd_key_false.key,(_Bool)0);
      #line 3522 
      if ((long)((long)((int)branch != 0)) != 0L) 
                                                  #line 3522 
                                                  __dynamic_dev_dbg(& __UNIQUE_ID_ddebug569,& pdev->dev,(char *)"%s failed to resume normal operations!\n",(char *)"ice_pci_err_resume");
    }
    #line 3524 
    return;
  }
  #line 3527 
  ice_do_reset(pf,(enum ice_reset_req)ICE_RESET_PFR);
  #line 3528 
  ice_service_task_restart(pf);
  #line 3529 
  ;
  #line 3529 
  cif_mod_timer(& pf->serv_tmr,round_jiffies(pf->serv_tmr_period + jiffies));
  #line 3530 
  return;
}

#line 3536  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_main.c"
static void ice_pci_err_reset_prepare(struct pci_dev *pdev)
{
  #line 3538 
  struct ice_pf *pf = pci_get_drvdata(pdev);
  #line 3540 
  if (! test_bit(12L,(unsigned long *)(& pf->state))) {
    #line 3541 
    ice_service_task_stop(pf);
    #line 3543 
    if (! test_bit(3L,(unsigned long *)(& pf->state))) {
      #line 3544 
      cif_set_bit_5(6L,(unsigned long *)(& pf->state));
      #line 3545 
      ice_prepare_for_reset(pf);
    }
  }
  #line 3548 
  return;
}

#line 3554  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_main.c"
static void ice_pci_err_reset_done(struct pci_dev *pdev)
{
  #line 3556 
  ice_pci_err_resume(pdev);
  #line 3557 
  return;
}

#line 3567  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_main.c"
static struct pci_device_id ice_pci_tbl[4U] = {{.vendor = 32902U, .device = 5521U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 32902U, .device = 5522U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 32902U, .device = 5523U, .subvendor = 4294967295U, .subdevice = 4294967295U}};
#line 3574  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_main.c"
struct pci_device_id __mod_pci__ice_pci_tbl_device_table[4U];
#line 3576  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_main.c"
static struct pci_error_handlers ice_pci_err_handler = {.error_detected = & ice_pci_err_detected, .slot_reset = & ice_pci_err_slot_reset, .reset_prepare = & ice_pci_err_reset_prepare, .reset_done = & ice_pci_err_reset_done, .resume = & ice_pci_err_resume};
#line 3584  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_main.c"
static struct pci_driver ice_driver = {.name = (char *)"ice", .id_table = (struct pci_device_id *)(& ice_pci_tbl), .probe = & ice_probe, .remove = & ice_remove, .sriov_configure = & ice_sriov_configure, .err_handler = & ice_pci_err_handler};
#line 3599  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_main.c"
static int ice_module_init(void)
{
  #line 3601 
  int status;
  #line 3603 
  printk((char *)"\001",(char *)(& ice_driver_string),(char *)(& ice_drv_ver));
  #line 3604 
  printk((char *)"\001",(char *)(& ice_copyright));
  #line 3606 
  ice_wq = alloc_workqueue((char *)"%s",8U,0,(char *)"ice");
  #line 3607 
  if (ice_wq == (struct workqueue_struct *)0) {
    #line 3608 
    printk((char *)"\001");
    #line 3609 
    return -12;
  }
  #line 3612 
  status = cif___pci_register_driver(& ice_driver,& __this_module,(char *)"ice");
  #line 3613 
  if (status != 0) {
    #line 3614 
    printk((char *)"\001",status);
    #line 3615 
    destroy_workqueue(ice_wq);
  }
  #line 3618 
  return status;
}

#line 3628  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_main.c"
static void ice_module_exit(void)
{
  #line 3630 
  cif_pci_unregister_driver(& ice_driver);
  #line 3631 
  destroy_workqueue(ice_wq);
  #line 3632 
  printk((char *)"\001");
  #line 3633 
  return;
}

#line 3643  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_main.c"
static int ice_set_mac_address(struct net_device *netdev, void *pi)
{
  #line 3650 
  enum ice_status status;
  #line 3653 
  u8 *mac;
  #line 3645 
  struct ice_netdev_priv *np = netdev_priv(netdev);
  #line 3646 
  struct ice_vsi *vsi = np->vsi;
  #line 3647 
  struct ice_pf *pf = vsi->back;
  #line 3648 
  struct ice_hw *hw = & pf->hw;
  #line 3649 
  struct sockaddr *addr = (struct sockaddr *)pi;
  #line 3651 
  u8 flags = (unsigned char)0U;
  #line 3652 
  int err = 0;
  #line 3655 
  mac = (u8 *)(& addr->sa_data);
  #line 3657 
  if (! is_valid_ether_addr(mac)) 
                                  #line 3658 
                                  return -99;
  #line 3660 
  if ((int)ether_addr_equal(netdev->dev_addr,mac) != 0) {
    #line 3661 
    netdev_warn(netdev,(char *)"already using mac %pM\n",mac);
    #line 3662 
    return 0;
  }
  #line 3665 
  if ((int)test_bit(1L,(unsigned long *)(& pf->state)) != 0) 
                                                             #line 3665 
                                                             goto _LOR;
  else {
    #line 3665 
    if ((int)ice_is_reset_in_progress((unsigned long *)(& pf->state)) != 0) {
      #line 3665 
      _LOR: {
              #line 3667 
              netdev_err(netdev,(char *)"can\'t set mac %pM. device not ready\n",mac);
              #line 3669 
              return -16;
            }
    }
  }
  #line 3679 
  status = ice_vsi_cfg_mac_fltr(vsi,netdev->dev_addr,(_Bool)0);
  #line 3680 
  if (status != ICE_SUCCESS) {
    #line 3681 
    err = -99;
    #line 3682 
    goto err_update_filters;
  }
  #line 3685 
  status = ice_vsi_cfg_mac_fltr(vsi,mac,(_Bool)1);
  #line 3686 
  if (status != ICE_SUCCESS) {
    #line 3687 
    err = -99;
    #line 3688 
    goto err_update_filters;
  }
  #line 3691 
  err_update_filters: 
                      #line 3691 
  ;
  #line 3692 
  if (err != 0) {
    #line 3693 
    netdev_err(netdev,(char *)"can\'t set MAC %pM. filter update failed\n",mac);
    #line 3695 
    return err;
  }
  #line 3699 
  memcpy((void *)netdev->dev_addr,(void *)mac,(unsigned long)netdev->addr_len);
  {
    #line 3700 
    bool branch;
    #line 3700 
    struct _ddebug __UNIQUE_ID_ddebug570 = {.modname = (char *)"ice", .function = (char *)"ice_set_mac_address", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_main.c", .format = (char *)"updated MAC address to %pM\n", .lineno = (unsigned int)3700U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 3700 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug570.key.dd_key_false.key,(_Bool)0);
    #line 3700 
    if ((long)((long)((int)branch != 0)) != 0L) 
                                                #line 3700 
                                                __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug570,vsi->netdev,(char *)"updated MAC address to %pM\n",netdev->dev_addr);
  }
  #line 3704 
  flags = (unsigned char)64U;
  #line 3705 
  status = ice_aq_manage_mac_write(hw,mac,(unsigned char)((int)flags),(struct ice_sq_cd *)0);
  #line 3706 
  if (status != ICE_SUCCESS) 
                             #line 3707 
                             netdev_err(netdev,(char *)"can\'t set MAC %pM. write to firmware failed error %d\n",mac,(int)status);
  #line 3710 
  return 0;
}

#line 3717  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_main.c"
static void ice_set_rx_mode(struct net_device *netdev)
{
  #line 3719 
  struct ice_netdev_priv *np = netdev_priv(netdev);
  #line 3720 
  struct ice_vsi *vsi = np->vsi;
  #line 3722 
  if (vsi == (struct ice_vsi *)0) 
                                  #line 3723 
                                  return;
  #line 3729 
  cif_set_bit_5(0L,(unsigned long *)(& vsi->flags));
  #line 3730 
  cif_set_bit_5(1L,(unsigned long *)(& vsi->flags));
  #line 3731 
  cif_set_bit_5(0L,(unsigned long *)(& (vsi->back)->flags));
  #line 3736 
  ice_service_task_schedule(vsi->back);
  #line 3737 
  return;
}

#line 3746  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_main.c"
static int ice_set_tx_maxrate(struct net_device *netdev, int queue_index, u32 maxrate)
{
  #line 3750 
  enum ice_status status;
  #line 3751 
  u16 q_handle;
  #line 3752 
  u8 tc;
  #line 3748 
  struct ice_netdev_priv *np = netdev_priv(netdev);
  #line 3749 
  struct ice_vsi *vsi = np->vsi;
  #line 3755 
  if (maxrate > 100000U) {
    #line 3756 
    netdev_err(netdev,(char *)"Invalid max rate %d specified for the queue %d\n",maxrate,queue_index);
    #line 3759 
    return -22;
  }
  #line 3762 
  q_handle = (*(vsi->tx_rings + (unsigned long)queue_index))->q_handle;
  #line 3763 
  tc = ice_dcb_get_tc(vsi,queue_index);
  #line 3766 
  if (maxrate == 0U) 
                     #line 3767 
                     status = ice_cfg_q_bw_dflt_lmt(vsi->port_info,(unsigned short)((int)vsi->idx),(unsigned char)((int)tc),(unsigned short)((int)q_handle),(enum ice_rl_type)ICE_MAX_BW); else 
                                                                    #line 3770 
                                                                    status = ice_cfg_q_bw_lmt(vsi->port_info,(unsigned short)((int)vsi->idx),(unsigned char)((int)tc),(unsigned short)((int)q_handle),(enum ice_rl_type)ICE_MAX_BW,maxrate * 1000U);
  #line 3772 
  if (status != ICE_SUCCESS) {
    #line 3773 
    netdev_err(netdev,(char *)"Unable to set Tx max rate, error %d\n",(int)status);
    #line 3775 
    return -5;
  }
  #line 3778 
  return 0;
}

#line 3792  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_main.c"
static int ice_fdb_add(struct ndmsg *ndm, struct nlattr **tb, struct net_device *dev, unsigned char *addr, u16 vid, u16 flags, struct netlink_ext_ack *extack)
{
  #line 3796 
  int err;
  #line 3798 
  if ((unsigned int)vid != 0U) {
    #line 3799 
    netdev_err(dev,(char *)"VLANs aren\'t supported yet for dev_uc|mc_add()\n");
    #line 3800 
    return -22;
  }
  #line 3802 
  if ((unsigned int)ndm->ndm_state != 0U && ((int)ndm->ndm_state & 128) == 0) {
    #line 3803 
    netdev_err(dev,(char *)"FDB only supports static addresses\n");
    #line 3804 
    return -22;
  }
  #line 3807 
  if ((int)is_unicast_ether_addr(addr) != 0) 
                                             #line 3807 
                                             goto _LOR;
  else {
    #line 3807 
    if ((int)is_link_local_ether_addr(addr) != 0) 
                                                  #line 3807 
                                                  _LOR: 
                                                        #line 3808 
                                                        err = dev_uc_add_excl(dev,addr);
    else {
      #line 3809 
      if ((int)is_multicast_ether_addr(addr) != 0) 
                                                   #line 3810 
                                                   err = dev_mc_add_excl(dev,addr); else 
                                                                    #line 3812 
                                                                    err = -22;
    }
  }
  #line 3815 
  if (err == -17 && ((int)flags & 512) == 0) 
                                             #line 3816 
                                             err = 0;
  #line 3818 
  return err;
}

#line 3830  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_main.c"
static int ice_fdb_del(struct ndmsg *ndm, struct nlattr **tb, struct net_device *dev, unsigned char *addr, u16 vid)
{
  #line 3834 
  int err;
  #line 3836 
  if (((int)ndm->ndm_state & 128) != 0) {
    #line 3837 
    netdev_err(dev,(char *)"FDB only supports static addresses\n");
    #line 3838 
    return -22;
  }
  #line 3841 
  if ((int)is_unicast_ether_addr(addr) != 0) 
                                             #line 3842 
                                             err = dev_uc_del(dev,addr);
  else {
    #line 3843 
    if ((int)is_multicast_ether_addr(addr) != 0) 
                                                 #line 3844 
                                                 err = dev_mc_del(dev,addr); else 
                                                                    #line 3846 
                                                                    err = -22;
  }
  #line 3848 
  return err;
}

#line 3857  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_main.c"
static int ice_set_features(struct net_device *netdev, netdev_features_t features)
{
  #line 3859 
  struct ice_netdev_priv *np = netdev_priv(netdev);
  #line 3860 
  struct ice_vsi *vsi = np->vsi;
  #line 3861 
  struct ice_pf *pf = vsi->back;
  #line 3862 
  int ret = 0;
  #line 3865 
  if ((int)ice_is_safe_mode(vsi->back) != 0) {
    #line 3866 
    _dev_err(& ((vsi->back)->pdev)->dev,(char *)"Device is in Safe Mode - not enabling advanced netdev features\n");
    #line 3868 
    return ret;
  }
  #line 3872 
  if ((int)ice_is_reset_in_progress((unsigned long *)(& pf->state)) != 0) {
    #line 3873 
    _dev_err(& ((vsi->back)->pdev)->dev,(char *)"Device is resetting, changing advanced netdev features temporarily unavailable.\n");
    #line 3875 
    return -16;
  }
  #line 3881 
  if ((features & 274877906944ULL) != 0ULL && (netdev->features & 274877906944ULL) == 0ULL) 
    #line 3882 
    ret = ice_vsi_manage_rss_lut(vsi,(_Bool)1);
  else 
    #line 3883 
    if ((features & 274877906944ULL) == 0ULL && (netdev->features & 274877906944ULL) != 0ULL) 
      #line 3885 
      ret = ice_vsi_manage_rss_lut(vsi,(_Bool)0);
  #line 3887 
  if ((features & 256ULL) != 0ULL && (netdev->features & 256ULL) == 0ULL) 
    #line 3889 
    ret = ice_vsi_manage_vlan_stripping(vsi,(_Bool)1);
  else 
    #line 3890 
    if ((features & 256ULL) == 0ULL && (netdev->features & 256ULL) != 0ULL) 
      #line 3892 
      ret = ice_vsi_manage_vlan_stripping(vsi,(_Bool)0);
  #line 3894 
  if ((features & 128ULL) != 0ULL && (netdev->features & 128ULL) == 0ULL) 
    #line 3896 
    ret = ice_vsi_manage_vlan_insertion(vsi);
  else 
    #line 3897 
    if ((features & 128ULL) == 0ULL && (netdev->features & 128ULL) != 0ULL) 
      #line 3899 
      ret = ice_vsi_manage_vlan_insertion(vsi);
  #line 3901 
  if ((features & 512ULL) != 0ULL && (netdev->features & 512ULL) == 0ULL) 
    #line 3903 
    ret = ice_cfg_vlan_pruning(vsi,(_Bool)1,(_Bool)0);
  else 
    #line 3904 
    if ((features & 512ULL) == 0ULL && (netdev->features & 512ULL) != 0ULL) 
      #line 3906 
      ret = ice_cfg_vlan_pruning(vsi,(_Bool)0,(_Bool)0);
  #line 3908 
  return ret;
}

#line 3915  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_main.c"
static int ice_vsi_vlan_setup(struct ice_vsi *vsi)
{
  #line 3917 
  int ret = 0;
  #line 3919 
  if (((vsi->netdev)->features & 256ULL) != 0ULL) 
                                                  #line 3920 
                                                  ret = ice_vsi_manage_vlan_stripping(vsi,(_Bool)1);
  #line 3921 
  if (((vsi->netdev)->features & 128ULL) != 0ULL) 
                                                  #line 3922 
                                                  ret = ice_vsi_manage_vlan_insertion(vsi);
  #line 3924 
  return ret;
}

#line 3933  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_main.c"
int ice_vsi_cfg(struct ice_vsi *vsi)
{
  #line 3935 
  int err;
  #line 3937 
  if (vsi->netdev != (struct net_device *)0) {
    #line 3938 
    ice_set_rx_mode(vsi->netdev);
    #line 3940 
    err = ice_vsi_vlan_setup(vsi);
    #line 3942 
    if (err != 0) 
                  #line 3943 
                  return err;
  }
  #line 3945 
  ice_vsi_cfg_dcb_rings(vsi);
  #line 3947 
  err = ice_vsi_cfg_lan_txqs(vsi);
  #line 3948 
  if (err == 0) {
    #line 3948 
    if ((int)ice_is_xdp_ena_vsi(vsi) != 0) 
                                           #line 3949 
                                           err = ice_vsi_cfg_xdp_txqs(vsi);
  }
  #line 3950 
  if (err == 0) 
                #line 3951 
                err = ice_vsi_cfg_rxqs(vsi);
  #line 3953 
  return err;
}

#line 3960  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_main.c"
static void ice_napi_enable_all(struct ice_vsi *vsi)
{
  #line 3962 
  int q_idx;
  #line 3964 
  if (vsi->netdev == (struct net_device *)0) 
                                             #line 3965 
                                             return;
  #line 3967 
  q_idx = 0;
  #line 3967 
  while (vsi->num_q_vectors > q_idx) {
    {
      #line 3968 
      struct ice_q_vector *q_vector = *(vsi->q_vectors + (unsigned long)q_idx);
      #line 3970 
      if (q_vector->rx.ring != (struct ice_ring *)0 || q_vector->tx.ring != (struct ice_ring *)0) 
        #line 3971 
        napi_enable_0(& q_vector->napi);
    }
    #line 3967 
    q_idx ++;
  }
  #line 3973 
  return;
}

#line 3981  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_main.c"
static int ice_up_complete(struct ice_vsi *vsi)
{
  #line 3984 
  int err;
  #line 3983 
  struct ice_pf *pf = vsi->back;
  #line 3986 
  ice_vsi_cfg_msix(vsi);
  #line 3992 
  err = ice_vsi_start_rx_rings(vsi);
  #line 3993 
  if (err != 0) 
                #line 3994 
                return err;
  #line 3996 
  cif_clear_bit_5(1L,(unsigned long *)(& vsi->state));
  #line 3997 
  ice_napi_enable_all(vsi);
  #line 3998 
  ice_vsi_ena_irq(vsi);
  #line 4000 
  if ((vsi->port_info != (struct ice_port_info *)0 && ((unsigned long)(vsi->port_info)->phy.link_info.link_info & 1UL) != 0UL) && vsi->netdev != (struct net_device *)0) {
    #line 4003 
    ice_print_link_msg(vsi,(_Bool)1);
    #line 4004 
    netif_tx_start_all_queues(vsi->netdev);
    #line 4005 
    netif_carrier_on(vsi->netdev);
  }
  #line 4008 
  ice_service_task_schedule(pf);
  #line 4010 
  return 0;
}

#line 4017  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_main.c"
int ice_up(struct ice_vsi *vsi)
{
  #line 4019 
  int err;
  #line 4021 
  err = ice_vsi_cfg(vsi);
  #line 4022 
  if (err == 0) 
                #line 4023 
                err = ice_up_complete(vsi);
  #line 4025 
  return err;
}

#line 4038  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_main.c"
static void ice_fetch_u64_stats_per_ring(struct ice_ring *ring, u64 *pkts, u64 *bytes)
{
  #line 4040 
  unsigned int start;
  #line 4041 
  *pkts = 0ULL;
  #line 4042 
  *bytes = 0ULL;
  #line 4044 
  if (ring == (struct ice_ring *)0) 
                                    #line 4045 
                                    return;
  #line 4046 
  while (1) {
    #line 4047 
    start = u64_stats_fetch_begin_irq(& ring->syncp);
    #line 4048 
    *pkts = ring->stats.pkts;
    #line 4049 
    *bytes = ring->stats.bytes;
    #line 4050 
    if (! ((int)u64_stats_fetch_retry_irq(& ring->syncp,start) != 0)) 
      #line 4046 
      break;
  }
  #line 4051 
  return;
}

#line 4057  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_main.c"
static void ice_update_vsi_ring_stats(struct ice_vsi *vsi)
{
  #line 4060 
  struct ice_ring *ring;
  #line 4061 
  u64 pkts;
  #line 4061 
  u64 bytes;
  #line 4062 
  int i;
  #line 4059 
  struct rtnl_link_stats64 *vsi_stats = & vsi->net_stats;
  #line 4065 
  vsi_stats->tx_packets = 0ULL;
  #line 4066 
  vsi_stats->tx_bytes = 0ULL;
  #line 4067 
  vsi_stats->rx_packets = 0ULL;
  #line 4068 
  vsi_stats->rx_bytes = 0ULL;
  #line 4071 
  vsi->tx_restart = 0U;
  #line 4072 
  vsi->tx_busy = 0U;
  #line 4073 
  vsi->tx_linearize = 0ULL;
  #line 4074 
  vsi->rx_buf_failed = 0U;
  #line 4075 
  vsi->rx_page_failed = 0U;
  #line 4077 
  rcu_read_lock();
  #line 4080 
  i = 0;
  #line 4080 
  while ((int)vsi->num_txq > i) {
    {
      #line 4082 
      union __anonunion___u_9260 __u;
      #line 4081 
      __read_once_size((void *)(vsi->tx_rings + (unsigned long)i),(void *)(& __u.__c),8);
      #line 4081 
      ring = (__u.__val);
      #line 4082 
      ice_fetch_u64_stats_per_ring(ring,& pkts,& bytes);
      #line 4083 
      vsi_stats->tx_packets += pkts;
      #line 4084 
      vsi_stats->tx_bytes += bytes;
      #line 4085 
      vsi->tx_restart += (unsigned int)ring->__anonCompField_ice_ring_197.tx_stats.restart_q;
      #line 4086 
      vsi->tx_busy += (unsigned int)ring->__anonCompField_ice_ring_197.tx_stats.tx_busy;
      #line 4087 
      vsi->tx_linearize += ring->__anonCompField_ice_ring_197.tx_stats.tx_linearize;
    }
    #line 4080 
    i ++;
  }
  #line 4091 
  i = 0;
  #line 4091 
  while ((int)vsi->num_rxq > i) {
    {
      #line 4093 
      union __anonunion___u_9262 __u_0;
      #line 4092 
      __read_once_size((void *)(vsi->rx_rings + (unsigned long)i),(void *)(& __u_0.__c),8);
      #line 4092 
      ring = (__u_0.__val);
      #line 4093 
      ice_fetch_u64_stats_per_ring(ring,& pkts,& bytes);
      #line 4094 
      vsi_stats->rx_packets += pkts;
      #line 4095 
      vsi_stats->rx_bytes += bytes;
      #line 4096 
      vsi->rx_buf_failed += (unsigned int)ring->__anonCompField_ice_ring_197.rx_stats.alloc_buf_failed;
      #line 4097 
      vsi->rx_page_failed += (unsigned int)ring->__anonCompField_ice_ring_197.rx_stats.alloc_page_failed;
    }
    #line 4091 
    i ++;
  }
  #line 4100 
  rcu_read_unlock();
  #line 4101 
  return;
}

#line 4107  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_main.c"
void ice_update_vsi_stats(struct ice_vsi *vsi)
{
  #line 4109 
  struct rtnl_link_stats64 *cur_ns = & vsi->net_stats;
  #line 4110 
  struct ice_eth_stats *cur_es = & vsi->eth_stats;
  #line 4111 
  struct ice_pf *pf = vsi->back;
  #line 4113 
  if ((int)test_bit(1L,(unsigned long *)(& vsi->state)) != 0) 
                                                              #line 4115 
                                                              return;
  else {
    #line 4113 
    if ((int)test_bit(21L,(unsigned long *)(& pf->state)) != 0) 
                                                                #line 4115 
                                                                return;
  }
  #line 4118 
  ice_update_vsi_ring_stats(vsi);
  #line 4121 
  ice_update_eth_stats(vsi);
  #line 4123 
  cur_ns->tx_errors = cur_es->tx_errors;
  #line 4124 
  cur_ns->rx_dropped = cur_es->rx_discards;
  #line 4125 
  cur_ns->tx_dropped = cur_es->tx_discards;
  #line 4126 
  cur_ns->multicast = cur_es->rx_multicast;
  #line 4129 
  if (vsi->type == (unsigned int)ICE_VSI_PF) {
    #line 4130 
    cur_ns->rx_crc_errors = pf->stats.crc_errors;
    #line 4131 
    cur_ns->rx_errors = pf->stats.crc_errors + pf->stats.illegal_bytes;
    #line 4133 
    cur_ns->rx_length_errors = pf->stats.rx_len_errors;
    #line 4135 
    cur_ns->rx_missed_errors = pf->stats.eth.rx_discards;
  }
  #line 4137 
  return;
}

#line 4143  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_main.c"
void ice_update_pf_stats(struct ice_pf *pf)
{
  #line 4145 
  struct ice_hw_port_stats *prev_ps;
  #line 4145 
  struct ice_hw_port_stats *cur_ps;
  #line 4147 
  u8 port;
  #line 4146 
  struct ice_hw *hw = & pf->hw;
  #line 4149 
  port = (hw->port_info)->lport;
  #line 4150 
  prev_ps = & pf->stats_prev;
  #line 4151 
  cur_ps = & pf->stats;
  #line 4153 
  ice_stat_update40(hw,(unsigned int)(((int)port + 458752) * 8),(_Bool)((unsigned int)pf->stat_prev_loaded != 0U),& prev_ps->eth.rx_bytes,& cur_ps->eth.rx_bytes);
  #line 4157 
  ice_stat_update40(hw,(unsigned int)(((int)port + 459360) * 8),(_Bool)((unsigned int)pf->stat_prev_loaded != 0U),& prev_ps->eth.rx_unicast,& cur_ps->eth.rx_unicast);
  #line 4161 
  ice_stat_update40(hw,(unsigned int)(((int)port + 459368) * 8),(_Bool)((unsigned int)pf->stat_prev_loaded != 0U),& prev_ps->eth.rx_multicast,& cur_ps->eth.rx_multicast);
  #line 4165 
  ice_stat_update40(hw,(unsigned int)(((int)port + 459376) * 8),(_Bool)((unsigned int)pf->stat_prev_loaded != 0U),& prev_ps->eth.rx_broadcast,& cur_ps->eth.rx_broadcast);
  #line 4169 
  ice_stat_update32(hw,705120U,(_Bool)((unsigned int)pf->stat_prev_loaded != 0U),& prev_ps->eth.rx_discards,& cur_ps->eth.rx_discards);
  #line 4173 
  ice_stat_update40(hw,(unsigned int)(((int)port + 459112) * 8),(_Bool)((unsigned int)pf->stat_prev_loaded != 0U),& prev_ps->eth.tx_bytes,& cur_ps->eth.tx_bytes);
  #line 4177 
  ice_stat_update40(hw,(unsigned int)(((int)port + 459320) * 8),(_Bool)((unsigned int)pf->stat_prev_loaded != 0U),& prev_ps->eth.tx_unicast,& cur_ps->eth.tx_unicast);
  #line 4181 
  ice_stat_update40(hw,(unsigned int)(((int)port + 459328) * 8),(_Bool)((unsigned int)pf->stat_prev_loaded != 0U),& prev_ps->eth.tx_multicast,& cur_ps->eth.tx_multicast);
  #line 4185 
  ice_stat_update40(hw,(unsigned int)(((int)port + 459336) * 8),(_Bool)((unsigned int)pf->stat_prev_loaded != 0U),& prev_ps->eth.tx_broadcast,& cur_ps->eth.tx_broadcast);
  #line 4189 
  ice_stat_update32(hw,(unsigned int)(((int)port + 459344) * 8),(_Bool)((unsigned int)pf->stat_prev_loaded != 0U),& prev_ps->tx_dropped_link_down,& cur_ps->tx_dropped_link_down);
  #line 4193 
  ice_stat_update40(hw,(unsigned int)(((int)port + 459040) * 8),(_Bool)((unsigned int)pf->stat_prev_loaded != 0U),& prev_ps->rx_size_64,& cur_ps->rx_size_64);
  #line 4196 
  ice_stat_update40(hw,(unsigned int)(((int)port + 459048) * 8),(_Bool)((unsigned int)pf->stat_prev_loaded != 0U),& prev_ps->rx_size_127,& cur_ps->rx_size_127);
  #line 4199 
  ice_stat_update40(hw,(unsigned int)(((int)port + 459056) * 8),(_Bool)((unsigned int)pf->stat_prev_loaded != 0U),& prev_ps->rx_size_255,& cur_ps->rx_size_255);
  #line 4202 
  ice_stat_update40(hw,(unsigned int)(((int)port + 459064) * 8),(_Bool)((unsigned int)pf->stat_prev_loaded != 0U),& prev_ps->rx_size_511,& cur_ps->rx_size_511);
  #line 4205 
  ice_stat_update40(hw,(unsigned int)(((int)port + 459072) * 8),(_Bool)((unsigned int)pf->stat_prev_loaded != 0U),& prev_ps->rx_size_1023,& cur_ps->rx_size_1023);
  #line 4208 
  ice_stat_update40(hw,(unsigned int)(((int)port + 459080) * 8),(_Bool)((unsigned int)pf->stat_prev_loaded != 0U),& prev_ps->rx_size_1522,& cur_ps->rx_size_1522);
  #line 4211 
  ice_stat_update40(hw,(unsigned int)(((int)port + 459088) * 8),(_Bool)((unsigned int)pf->stat_prev_loaded != 0U),& prev_ps->rx_size_big,& cur_ps->rx_size_big);
  #line 4214 
  ice_stat_update40(hw,(unsigned int)(((int)port + 459120) * 8),(_Bool)((unsigned int)pf->stat_prev_loaded != 0U),& prev_ps->tx_size_64,& cur_ps->tx_size_64);
  #line 4217 
  ice_stat_update40(hw,(unsigned int)(((int)port + 459128) * 8),(_Bool)((unsigned int)pf->stat_prev_loaded != 0U),& prev_ps->tx_size_127,& cur_ps->tx_size_127);
  #line 4220 
  ice_stat_update40(hw,(unsigned int)(((int)port + 459136) * 8),(_Bool)((unsigned int)pf->stat_prev_loaded != 0U),& prev_ps->tx_size_255,& cur_ps->tx_size_255);
  #line 4223 
  ice_stat_update40(hw,(unsigned int)(((int)port + 459144) * 8),(_Bool)((unsigned int)pf->stat_prev_loaded != 0U),& prev_ps->tx_size_511,& cur_ps->tx_size_511);
  #line 4226 
  ice_stat_update40(hw,(unsigned int)(((int)port + 459152) * 8),(_Bool)((unsigned int)pf->stat_prev_loaded != 0U),& prev_ps->tx_size_1023,& cur_ps->tx_size_1023);
  #line 4229 
  ice_stat_update40(hw,(unsigned int)(((int)port + 459160) * 8),(_Bool)((unsigned int)pf->stat_prev_loaded != 0U),& prev_ps->tx_size_1522,& cur_ps->tx_size_1522);
  #line 4232 
  ice_stat_update40(hw,(unsigned int)(((int)port + 459168) * 8),(_Bool)((unsigned int)pf->stat_prev_loaded != 0U),& prev_ps->tx_size_big,& cur_ps->tx_size_big);
  #line 4235 
  ice_stat_update32(hw,(unsigned int)(((int)port + 458832) * 8),(_Bool)((unsigned int)pf->stat_prev_loaded != 0U),& prev_ps->link_xon_rx,& cur_ps->link_xon_rx);
  #line 4238 
  ice_stat_update32(hw,(unsigned int)(((int)port + 458840) * 8),(_Bool)((unsigned int)pf->stat_prev_loaded != 0U),& prev_ps->link_xoff_rx,& cur_ps->link_xoff_rx);
  #line 4241 
  ice_stat_update32(hw,(unsigned int)(((int)port + 459304) * 8),(_Bool)((unsigned int)pf->stat_prev_loaded != 0U),& prev_ps->link_xon_tx,& cur_ps->link_xon_tx);
  #line 4244 
  ice_stat_update32(hw,(unsigned int)(((int)port + 459312) * 8),(_Bool)((unsigned int)pf->stat_prev_loaded != 0U),& prev_ps->link_xoff_tx,& cur_ps->link_xoff_tx);
  #line 4247 
  ice_update_dcb_stats(pf);
  #line 4249 
  ice_stat_update32(hw,(unsigned int)(((int)port + 458784) * 8),(_Bool)((unsigned int)pf->stat_prev_loaded != 0U),& prev_ps->crc_errors,& cur_ps->crc_errors);
  #line 4252 
  ice_stat_update32(hw,(unsigned int)(((int)port + 458808) * 8),(_Bool)((unsigned int)pf->stat_prev_loaded != 0U),& prev_ps->illegal_bytes,& cur_ps->illegal_bytes);
  #line 4255 
  ice_stat_update32(hw,(unsigned int)(((int)port + 458760) * 8),(_Bool)((unsigned int)pf->stat_prev_loaded != 0U),& prev_ps->mac_local_faults,& cur_ps->mac_local_faults);
  #line 4259 
  ice_stat_update32(hw,(unsigned int)(((int)port + 458768) * 8),(_Bool)((unsigned int)pf->stat_prev_loaded != 0U),& prev_ps->mac_remote_faults,& cur_ps->mac_remote_faults);
  #line 4263 
  ice_stat_update32(hw,(unsigned int)(((int)port + 458792) * 8),(_Bool)((unsigned int)pf->stat_prev_loaded != 0U),& prev_ps->rx_len_errors,& cur_ps->rx_len_errors);
  #line 4266 
  ice_stat_update32(hw,(unsigned int)(((int)port + 458816) * 8),(_Bool)((unsigned int)pf->stat_prev_loaded != 0U),& prev_ps->rx_undersize,& cur_ps->rx_undersize);
  #line 4269 
  ice_stat_update32(hw,(unsigned int)(((int)port + 459096) * 8),(_Bool)((unsigned int)pf->stat_prev_loaded != 0U),& prev_ps->rx_fragments,& cur_ps->rx_fragments);
  #line 4272 
  ice_stat_update32(hw,(unsigned int)(((int)port + 458824) * 8),(_Bool)((unsigned int)pf->stat_prev_loaded != 0U),& prev_ps->rx_oversize,& cur_ps->rx_oversize);
  #line 4275 
  ice_stat_update32(hw,(unsigned int)(((int)port + 459104) * 8),(_Bool)((unsigned int)pf->stat_prev_loaded != 0U),& prev_ps->rx_jabber,& cur_ps->rx_jabber);
  #line 4278 
  pf->stat_prev_loaded = (unsigned char)1U;
  #line 4279 
  return;
}

#line 4287  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_main.c"
static void ice_get_stats64(struct net_device *netdev, struct rtnl_link_stats64 *stats)
{
  #line 4290 
  struct rtnl_link_stats64 *vsi_stats;
  #line 4289 
  struct ice_netdev_priv *np = netdev_priv(netdev);
  #line 4291 
  struct ice_vsi *vsi = np->vsi;
  #line 4293 
  vsi_stats = & vsi->net_stats;
  #line 4295 
  if ((unsigned int)vsi->num_txq == 0U || (unsigned int)vsi->num_rxq == 0U) 
    #line 4296 
    return;
  #line 4303 
  if (! test_bit(1L,(unsigned long *)(& vsi->state))) 
                                                      #line 4304 
                                                      ice_update_vsi_ring_stats(vsi);
  #line 4305 
  stats->tx_packets = vsi_stats->tx_packets;
  #line 4306 
  stats->tx_bytes = vsi_stats->tx_bytes;
  #line 4307 
  stats->rx_packets = vsi_stats->rx_packets;
  #line 4308 
  stats->rx_bytes = vsi_stats->rx_bytes;
  #line 4314 
  stats->multicast = vsi_stats->multicast;
  #line 4315 
  stats->tx_errors = vsi_stats->tx_errors;
  #line 4316 
  stats->tx_dropped = vsi_stats->tx_dropped;
  #line 4317 
  stats->rx_errors = vsi_stats->rx_errors;
  #line 4318 
  stats->rx_dropped = vsi_stats->rx_dropped;
  #line 4319 
  stats->rx_crc_errors = vsi_stats->rx_crc_errors;
  #line 4320 
  stats->rx_length_errors = vsi_stats->rx_length_errors;
  #line 4321 
  return;
}

#line 4327  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_main.c"
static void ice_napi_disable_all(struct ice_vsi *vsi)
{
  #line 4329 
  int q_idx;
  #line 4331 
  if (vsi->netdev == (struct net_device *)0) 
                                             #line 4332 
                                             return;
  #line 4334 
  q_idx = 0;
  #line 4334 
  while (vsi->num_q_vectors > q_idx) {
    {
      #line 4335 
      struct ice_q_vector *q_vector = *(vsi->q_vectors + (unsigned long)q_idx);
      #line 4337 
      if (q_vector->rx.ring != (struct ice_ring *)0 || q_vector->tx.ring != (struct ice_ring *)0) 
        #line 4338 
        napi_disable(& q_vector->napi);
    }
    #line 4334 
    q_idx ++;
  }
  #line 4340 
  return;
}

#line 4346  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_main.c"
int ice_down(struct ice_vsi *vsi)
{
  #line 4348 
  int i;
  #line 4348 
  int tx_err;
  #line 4348 
  int rx_err;
  #line 4348 
  int link_err = 0;
  #line 4353 
  if (vsi->netdev != (struct net_device *)0) {
    #line 4354 
    netif_carrier_off(vsi->netdev);
    #line 4355 
    netif_tx_disable(vsi->netdev);
  }
  #line 4358 
  ice_vsi_dis_irq(vsi);
  #line 4360 
  tx_err = ice_vsi_stop_lan_tx_rings(vsi,(enum ice_disq_rst_src)ICE_NO_RESET,(unsigned short)0);
  #line 4361 
  if (tx_err != 0) 
                   #line 4362 
                   netdev_err(vsi->netdev,(char *)"Failed stop Tx rings, VSI %d error %d\n",(int)vsi->vsi_num,tx_err);
  #line 4365 
  if (tx_err == 0) {
    #line 4365 
    if ((int)ice_is_xdp_ena_vsi(vsi) != 0) {
      #line 4366 
      tx_err = ice_vsi_stop_xdp_tx_rings(vsi);
      #line 4367 
      if (tx_err != 0) 
                       #line 4368 
                       netdev_err(vsi->netdev,(char *)"Failed stop XDP rings, VSI %d error %d\n",(int)vsi->vsi_num,tx_err);
    }
  }
  #line 4373 
  rx_err = ice_vsi_stop_rx_rings(vsi);
  #line 4374 
  if (rx_err != 0) 
                   #line 4375 
                   netdev_err(vsi->netdev,(char *)"Failed stop Rx rings, VSI %d error %d\n",(int)vsi->vsi_num,rx_err);
  #line 4379 
  ice_napi_disable_all(vsi);
  #line 4381 
  if ((int)test_bit(7L,(unsigned long *)(& (vsi->back)->flags)) != 0) {
    #line 4382 
    link_err = ice_force_phys_link_state(vsi,(_Bool)0);
    #line 4383 
    if (link_err != 0) 
                       #line 4384 
                       netdev_err(vsi->netdev,(char *)"Failed to set physical link down, VSI %d error %d\n",(int)vsi->vsi_num,link_err);
  }
  #line 4389 
  i = 0;
  #line 4389 
  while ((int)vsi->num_txq > i) {
    #line 4390 
    ice_clean_tx_ring(*(vsi->tx_rings + (unsigned long)i));
    #line 4389 
    i ++;
  }
  #line 4392 
  i = 0;
  #line 4392 
  while ((int)vsi->num_rxq > i) {
    #line 4393 
    ice_clean_rx_ring(*(vsi->rx_rings + (unsigned long)i));
    #line 4392 
    i ++;
  }
  #line 4395 
  if ((tx_err != 0 || rx_err != 0) || link_err != 0) {
    #line 4396 
    netdev_err(vsi->netdev,(char *)"Failed to close VSI 0x%04X on switch 0x%04X\n",(int)vsi->vsi_num,(int)(vsi->vsw)->sw_id);
    #line 4399 
    return -5;
  }
  #line 4402 
  return 0;
}

#line 4411  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_main.c"
int ice_vsi_setup_tx_rings(struct ice_vsi *vsi)
{
  #line 4413 
  int i;
  #line 4413 
  int err = 0;
  #line 4415 
  if ((unsigned int)vsi->num_txq == 0U) {
    #line 4416 
    _dev_err(& ((vsi->back)->pdev)->dev,(char *)"VSI %d has 0 Tx queues\n",(int)vsi->vsi_num);
    #line 4418 
    return -22;
  }
  #line 4421 
  i = 0;
  #line 4421 
  while ((int)vsi->num_txq > i) {
    {
      #line 4422 
      struct ice_ring *ring = *(vsi->tx_rings + (unsigned long)i);
      #line 4424 
      if (ring == (struct ice_ring *)0) 
                                        #line 4425 
                                        return -22;
      #line 4427 
      ring->netdev = vsi->netdev;
      #line 4428 
      err = ice_setup_tx_ring(ring);
      #line 4429 
      if (err != 0) 
                    #line 4430 
                    break;
    }
    #line 4421 
    i ++;
  }
  #line 4433 
  return err;
}

#line 4442  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_main.c"
int ice_vsi_setup_rx_rings(struct ice_vsi *vsi)
{
  #line 4444 
  int i;
  #line 4444 
  int err = 0;
  #line 4446 
  if ((unsigned int)vsi->num_rxq == 0U) {
    #line 4447 
    _dev_err(& ((vsi->back)->pdev)->dev,(char *)"VSI %d has 0 Rx queues\n",(int)vsi->vsi_num);
    #line 4449 
    return -22;
  }
  #line 4452 
  i = 0;
  #line 4452 
  while ((int)vsi->num_rxq > i) {
    {
      #line 4453 
      struct ice_ring *ring = *(vsi->rx_rings + (unsigned long)i);
      #line 4455 
      if (ring == (struct ice_ring *)0) 
                                        #line 4456 
                                        return -22;
      #line 4458 
      ring->netdev = vsi->netdev;
      #line 4459 
      err = ice_setup_rx_ring(ring);
      #line 4460 
      if (err != 0) 
                    #line 4461 
                    break;
    }
    #line 4452 
    i ++;
  }
  #line 4464 
  return err;
}

#line 4475  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_main.c"
static int ice_vsi_open(struct ice_vsi *vsi)
{
  #line 4477 
  char int_name[32U];
  #line 4479 
  int err;
  #line 4478 
  struct ice_pf *pf = vsi->back;
  #line 4482 
  err = ice_vsi_setup_tx_rings(vsi);
  #line 4483 
  if (err != 0) 
                #line 4484 
                goto err_setup_tx;
  #line 4486 
  err = ice_vsi_setup_rx_rings(vsi);
  #line 4487 
  if (err != 0) 
                #line 4488 
                goto err_setup_rx;
  #line 4490 
  err = ice_vsi_cfg(vsi);
  #line 4491 
  if (err != 0) 
                #line 4492 
                goto err_setup_rx;
  #line 4494 
  ;
  #line 4494 
  snprintf((char *)(& int_name),31UL,(char *)"%s-%s",dev_driver_string(& (pf->pdev)->dev),(char *)(& (vsi->netdev)->name));
  #line 4496 
  err = ice_vsi_req_irq_msix(vsi,(char *)(& int_name));
  #line 4497 
  if (err != 0) 
                #line 4498 
                goto err_setup_rx;
  #line 4501 
  err = netif_set_real_num_tx_queues(vsi->netdev,(unsigned int)vsi->num_txq);
  #line 4502 
  if (err != 0) 
                #line 4503 
                goto err_set_qs;
  #line 4505 
  err = netif_set_real_num_rx_queues(vsi->netdev,(unsigned int)vsi->num_rxq);
  #line 4506 
  if (err != 0) 
                #line 4507 
                goto err_set_qs;
  #line 4509 
  err = ice_up_complete(vsi);
  #line 4510 
  if (err != 0) 
                #line 4511 
                goto err_up_complete;
  #line 4513 
  return 0;
  #line 4515 
  err_up_complete: 
                   #line 4515 
  ;
  #line 4516 
  ice_down(vsi);
  #line 4517 
  err_set_qs: 
              #line 4517 
  ;
  #line 4518 
  ice_vsi_free_irq(vsi);
  #line 4519 
  err_setup_rx: 
                #line 4519 
  ;
  #line 4520 
  ice_vsi_free_rx_rings(vsi);
  #line 4521 
  err_setup_tx: 
                #line 4521 
  ;
  #line 4522 
  ice_vsi_free_tx_rings(vsi);
  #line 4524 
  return err;
}

#line 4531  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_main.c"
static void ice_vsi_release_all(struct ice_pf *pf)
{
  #line 4533 
  int err;
  #line 4533 
  int i;
  #line 4535 
  if (pf->vsi == (struct ice_vsi **)0) 
                                       #line 4536 
                                       return;
  #line 4538 
  i = 0;
  #line 4538 
  while ((int)pf->num_alloc_vsi > i) {
    #line 4539 
    if (*(pf->vsi + (unsigned long)i) == (struct ice_vsi *)0) 
                                                              #line 4540 
                                                              goto __Cont;
    #line 4542 
    err = ice_vsi_release(*(pf->vsi + (unsigned long)i));
    #line 4543 
    if (err != 0) {
      #line 4544 
      bool branch;
      #line 4544 
      struct _ddebug __UNIQUE_ID_ddebug571 = {.modname = (char *)"ice", .function = (char *)"ice_vsi_release_all", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_main.c", .format = (char *)"Failed to release pf->vsi[%d], err %d, vsi_num = %d\n", .lineno = (unsigned int)4544U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 4544 
      branch = arch_static_branch(& __UNIQUE_ID_ddebug571.key.dd_key_false.key,(_Bool)0);
      #line 4544 
      if ((long)((long)((int)branch != 0)) != 0L) 
                                                  #line 4544 
                                                  __dynamic_dev_dbg(& __UNIQUE_ID_ddebug571,& (pf->pdev)->dev,(char *)"Failed to release pf->vsi[%d], err %d, vsi_num = %d\n",i,err,(int)(*(pf->vsi + (unsigned long)i))->vsi_num);
    }
    #line 4538 
    __Cont: 
            #line 4538 
    i ++;
  }
  #line 4547 
  return;
}

#line 4557  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_main.c"
static int ice_vsi_rebuild_by_type(struct ice_pf *pf, enum ice_vsi_type type)
{
  #line 4560 
  enum ice_status status;
  #line 4561 
  int i;
  #line 4561 
  int err;
  #line 4559 
  struct device *dev = & (pf->pdev)->dev;
  #line 4563 
  i = 0;
  #line 4563 
  while ((int)pf->num_alloc_vsi > i) {
    {
      #line 4564 
      struct ice_vsi *vsi = *(pf->vsi + (unsigned long)i);
      #line 4566 
      if (vsi == (struct ice_vsi *)0 || vsi->type != type) 
                                                           #line 4567 
                                                           goto __Cont;
      #line 4570 
      err = ice_vsi_rebuild(vsi,(_Bool)1);
      #line 4571 
      if (err != 0) {
        #line 4572 
        ;
        #line 4572 
        ;
        #line 4572 
        ;
        #line 4572 
        _dev_err(dev,(char *)"rebuild VSI failed, err %d, VSI index %d, type %s\n",err,(int)vsi->idx,ice_vsi_type_str(type));
        #line 4575 
        return err;
      }
      #line 4579 
      status = ice_replay_vsi(& pf->hw,(unsigned short)((int)vsi->idx));
      #line 4580 
      if (status != ICE_SUCCESS) {
        #line 4581 
        ;
        #line 4581 
        ;
        #line 4581 
        ;
        #line 4581 
        _dev_err(dev,(char *)"replay VSI failed, status %d, VSI index %d, type %s\n",(int)status,(int)vsi->idx,ice_vsi_type_str(type));
        #line 4584 
        return -5;
      }
      #line 4590 
      vsi->vsi_num = ice_get_hw_vsi_num(& pf->hw,(unsigned short)((int)vsi->idx));
      #line 4593 
      err = ice_ena_vsi(vsi,(_Bool)0);
      #line 4594 
      if (err != 0) {
        #line 4595 
        ;
        #line 4595 
        ;
        #line 4595 
        ;
        #line 4595 
        _dev_err(dev,(char *)"enable VSI failed, err %d, VSI index %d, type %s\n",err,(int)vsi->idx,ice_vsi_type_str(type));
        #line 4598 
        return err;
      }
      #line 4601 
      ;
      #line 4601 
      ;
      #line 4601 
      _dev_info(dev,(char *)"VSI rebuilt. VSI index %d, type %s\n",(int)vsi->idx,ice_vsi_type_str(type));
    }
    #line 4563 
    __Cont: 
            #line 4563 
    i ++;
  }
  #line 4605 
  return 0;
}

#line 4612  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_main.c"
static void ice_update_pf_netdev_link(struct ice_pf *pf)
{
  #line 4614 
  bool link_up;
  #line 4615 
  int i;
  #line 4617 
  i = 0;
  #line 4617 
  while ((int)pf->num_alloc_vsi > i) {
    {
      #line 4618 
      struct ice_vsi *vsi = *(pf->vsi + (unsigned long)i);
      #line 4620 
      if (vsi == (struct ice_vsi *)0 || vsi->type != (unsigned int)ICE_VSI_PF) 
        #line 4621 
        return;
      #line 4623 
      ice_get_link_status((*(pf->vsi + (unsigned long)i))->port_info,& link_up);
      #line 4624 
      if ((int)link_up != 0) {
        #line 4625 
        netif_carrier_on((*(pf->vsi + (unsigned long)i))->netdev);
        #line 4626 
        netif_tx_wake_all_queues((*(pf->vsi + (unsigned long)i))->netdev);
      }
      else {
        #line 4628 
        netif_carrier_off((*(pf->vsi + (unsigned long)i))->netdev);
        #line 4629 
        netif_tx_stop_all_queues((*(pf->vsi + (unsigned long)i))->netdev);
      }
    }
    #line 4617 
    i ++;
  }
  #line 4632 
  return;
}

#line 4639  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_main.c"
static void ice_rebuild(struct ice_pf *pf, enum ice_reset_req reset_type)
{
  #line 4643 
  enum ice_status ret;
  #line 4644 
  int err;
  #line 4641 
  struct device *dev = & (pf->pdev)->dev;
  #line 4642 
  struct ice_hw *hw = & pf->hw;
  #line 4646 
  if ((int)test_bit(1L,(unsigned long *)(& pf->state)) != 0) 
                                                             #line 4647 
                                                             goto clear_recovery;
  {
    #line 4649 
    bool branch;
    #line 4649 
    struct _ddebug __UNIQUE_ID_ddebug572 = {.modname = (char *)"ice", .function = (char *)"ice_rebuild", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_main.c", .format = (char *)"rebuilding PF after reset_type=%d\n", .lineno = (unsigned int)4649U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 4649 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug572.key.dd_key_false.key,(_Bool)0);
    #line 4649 
    if ((long)((long)((int)branch != 0)) != 0L) 
                                                #line 4649 
                                                __dynamic_dev_dbg(& __UNIQUE_ID_ddebug572,dev,(char *)"rebuilding PF after reset_type=%d\n",(unsigned int)reset_type);
  }
  #line 4651 
  ret = ice_init_all_ctrlq(hw);
  #line 4652 
  if (ret != ICE_SUCCESS) {
    #line 4653 
    _dev_err(dev,(char *)"control queues init failed %d\n",(int)ret);
    #line 4654 
    goto err_init_ctrlq;
  }
  #line 4658 
  if (! ice_is_safe_mode(pf)) 
    #line 4660 
    if (reset_type == (unsigned int)ICE_RESET_PFR) 
                                                   #line 4661 
                                                   ice_fill_blk_tbls(hw); else 
                                                                    #line 4664 
                                                                    ice_load_pkg((struct firmware *)0,pf);
  #line 4667 
  ret = ice_clear_pf_cfg(hw);
  #line 4668 
  if (ret != ICE_SUCCESS) {
    #line 4669 
    _dev_err(dev,(char *)"clear PF configuration failed %d\n",(int)ret);
    #line 4670 
    goto err_init_ctrlq;
  }
  #line 4673 
  ice_clear_pxe_mode(hw);
  #line 4675 
  ret = ice_get_caps(hw);
  #line 4676 
  if (ret != ICE_SUCCESS) {
    #line 4677 
    _dev_err(dev,(char *)"ice_get_caps failed %d\n",(int)ret);
    #line 4678 
    goto err_init_ctrlq;
  }
  #line 4681 
  err = (int)ice_sched_init_port(hw->port_info);
  #line 4682 
  if (err != 0) 
                #line 4683 
                goto err_sched_init_port;
  #line 4685 
  err = (int)ice_update_link_info(hw->port_info);
  #line 4686 
  if (err != 0) 
                #line 4687 
                _dev_err(dev,(char *)"Get link status error %d\n",err);
  #line 4690 
  err = ice_req_irq_msix_misc(pf);
  #line 4691 
  if (err != 0) {
    #line 4692 
    _dev_err(dev,(char *)"misc vector setup failed: %d\n",err);
    #line 4693 
    goto err_sched_init_port;
  }
  #line 4696 
  if ((int)test_bit(5L,(unsigned long *)(& pf->flags)) != 0) 
                                                             #line 4697 
                                                             ice_dcb_rebuild(pf);
  #line 4700 
  err = ice_vsi_rebuild_by_type(pf,(enum ice_vsi_type)ICE_VSI_PF);
  #line 4701 
  if (err != 0) {
    #line 4702 
    _dev_err(dev,(char *)"PF VSI rebuild failed: %d\n",err);
    #line 4703 
    goto err_vsi_rebuild;
  }
  #line 4706 
  if ((int)test_bit(2L,(unsigned long *)(& pf->flags)) != 0) {
    #line 4707 
    err = ice_vsi_rebuild_by_type(pf,(enum ice_vsi_type)ICE_VSI_VF);
    #line 4708 
    if (err != 0) {
      #line 4709 
      _dev_err(dev,(char *)"VF VSI rebuild failed: %d\n",err);
      #line 4710 
      goto err_vsi_rebuild;
    }
  }
  #line 4714 
  ice_update_pf_netdev_link(pf);
  #line 4717 
  ret = ice_send_version(pf);
  #line 4718 
  if (ret != ICE_SUCCESS) {
    #line 4719 
    _dev_err(dev,(char *)"Rebuild failed due to error sending driver version: %d\n",(int)ret);
    #line 4722 
    goto err_vsi_rebuild;
  }
  #line 4725 
  ice_replay_post(hw);
  #line 4728 
  cif_clear_bit_5(13L,(unsigned long *)(& pf->state));
  #line 4729 
  return;
  #line 4731 
  err_vsi_rebuild: 
                   #line 4731 
  ;
  #line 4732 
  err_sched_init_port: 
                       #line 4732 
  ;
  #line 4733 
  ice_sched_cleanup_all(hw);
  #line 4734 
  err_init_ctrlq: 
                  #line 4734 
  ;
  #line 4735 
  ice_shutdown_all_ctrlq(hw);
  #line 4736 
  cif_set_bit_5(13L,(unsigned long *)(& pf->state));
  #line 4737 
  clear_recovery: 
                  #line 4737 
  ;
  #line 4739 
  cif_set_bit_5(2L,(unsigned long *)(& pf->state));
  #line 4740 
  _dev_err(dev,(char *)"Rebuild failed, unload and reload driver\n");
  #line 4741 
  return;
}

#line 4747  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_main.c"
static int ice_max_xdp_frame_size(struct ice_vsi *vsi)
{
  #line 4749 
  if ((int)test_bit(11L,(unsigned long *)(& (vsi->back)->flags)) != 0) 
    #line 4750 
    return 1792; else 
                      #line 4752 
                      return 3072;
}

#line 4762  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_main.c"
static int ice_change_mtu(struct net_device *netdev, int new_mtu)
{
  #line 4764 
  struct ice_netdev_priv *np = netdev_priv(netdev);
  #line 4765 
  struct ice_vsi *vsi = np->vsi;
  #line 4766 
  struct ice_pf *pf = vsi->back;
  #line 4767 
  u8 count = (unsigned char)0U;
  #line 4769 
  if (netdev->mtu == (unsigned int)new_mtu) {
    #line 4770 
    netdev_warn(netdev,(char *)"MTU is already %u\n",netdev->mtu);
    #line 4771 
    return 0;
  }
  #line 4774 
  if ((int)ice_is_xdp_ena_vsi(vsi) != 0) {
    #line 4775 
    int frame_size = ice_max_xdp_frame_size(vsi);
    #line 4777 
    if (new_mtu + 25 >= frame_size) {
      #line 4778 
      netdev_err(netdev,(char *)"max MTU for XDP usage is %d\n",frame_size + -26);
      #line 4780 
      return -22;
    }
  }
  #line 4784 
  if (netdev->min_mtu > (unsigned int)new_mtu) {
    #line 4785 
    netdev_err(netdev,(char *)"new MTU invalid. min_mtu is %d\n",netdev->min_mtu);
    #line 4787 
    return -22;
  }
  else 
    #line 4788 
    if (netdev->max_mtu < (unsigned int)new_mtu) {
      #line 4789 
      netdev_err(netdev,(char *)"new MTU invalid. max_mtu is %d\n",netdev->min_mtu);
      #line 4791 
      return -22;
    }
  #line 4794 
  while (1) {
    #line 4795 
    if ((int)ice_is_reset_in_progress((unsigned long *)(& pf->state)) != 0) {
      #line 4796 
      count = (u8)((int)count + 1);
      #line 4797 
      usleep_range(1000UL,2000UL);
    }
    else 
         #line 4799 
         break;
    #line 4799 
    if (! ((unsigned int)count <= 99U)) 
                                        #line 4794 
                                        break;
  }
  #line 4804 
  if ((unsigned int)count == 100U) {
    #line 4805 
    netdev_err(netdev,(char *)"can\'t change MTU. Device is busy\n");
    #line 4806 
    return -16;
  }
  #line 4809 
  netdev->mtu = (unsigned int)new_mtu;
  #line 4812 
  if (! test_and_clear_bit(1L,(unsigned long *)(& vsi->state))) {
    #line 4813 
    int err;
    #line 4815 
    err = ice_down(vsi);
    #line 4816 
    if (err != 0) {
      #line 4817 
      netdev_err(netdev,(char *)"change MTU if_up err %d\n",err);
      #line 4818 
      return err;
    }
    #line 4821 
    err = ice_up(vsi);
    #line 4822 
    if (err != 0) {
      #line 4823 
      netdev_err(netdev,(char *)"change MTU if_up err %d\n",err);
      #line 4824 
      return err;
    }
  }
  #line 4828 
  netdev_info(netdev,(char *)"changed MTU to %d\n",new_mtu);
  #line 4829 
  return 0;
}

#line 4841  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_main.c"
int ice_set_rss(struct ice_vsi *vsi, u8 *seed, u8 *lut, u16 lut_size)
{
  #line 4845 
  enum ice_status status;
  #line 4846 
  struct device *dev;
  #line 4843 
  struct ice_pf *pf = vsi->back;
  #line 4844 
  struct ice_hw *hw = & pf->hw;
  #line 4848 
  dev = & (pf->pdev)->dev;
  #line 4849 
  if (seed != (u8 *)0U) {
    #line 4850 
    struct ice_aqc_get_set_rss_keys *buf = (struct ice_aqc_get_set_rss_keys *)seed;
    #line 4853 
    status = ice_aq_set_rss_key(hw,(unsigned short)((int)vsi->idx),buf);
    #line 4855 
    if (status != ICE_SUCCESS) {
      #line 4856 
      _dev_err(dev,(char *)"Cannot set RSS key, err %d aq_err %d\n",(int)status,(unsigned int)hw->adminq.rq_last_status);
      #line 4858 
      return -5;
    }
  }
  #line 4862 
  if (lut != (u8 *)0U) {
    #line 4863 
    status = ice_aq_set_rss_lut(hw,(unsigned short)((int)vsi->idx),(unsigned char)((int)vsi->rss_lut_type),lut,(unsigned short)((int)lut_size));
    #line 4865 
    if (status != ICE_SUCCESS) {
      #line 4866 
      _dev_err(dev,(char *)"Cannot set RSS lut, err %d aq_err %d\n",(int)status,(unsigned int)hw->adminq.rq_last_status);
      #line 4868 
      return -5;
    }
  }
  #line 4872 
  return 0;
}

#line 4884  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_main.c"
int ice_get_rss(struct ice_vsi *vsi, u8 *seed, u8 *lut, u16 lut_size)
{
  #line 4888 
  enum ice_status status;
  #line 4889 
  struct device *dev;
  #line 4886 
  struct ice_pf *pf = vsi->back;
  #line 4887 
  struct ice_hw *hw = & pf->hw;
  #line 4891 
  dev = & (pf->pdev)->dev;
  #line 4892 
  if (seed != (u8 *)0U) {
    #line 4893 
    struct ice_aqc_get_set_rss_keys *buf = (struct ice_aqc_get_set_rss_keys *)seed;
    #line 4896 
    status = ice_aq_get_rss_key(hw,(unsigned short)((int)vsi->idx),buf);
    #line 4897 
    if (status != ICE_SUCCESS) {
      #line 4898 
      _dev_err(dev,(char *)"Cannot get RSS key, err %d aq_err %d\n",(int)status,(unsigned int)hw->adminq.rq_last_status);
      #line 4900 
      return -5;
    }
  }
  #line 4904 
  if (lut != (u8 *)0U) {
    #line 4905 
    status = ice_aq_get_rss_lut(hw,(unsigned short)((int)vsi->idx),(unsigned char)((int)vsi->rss_lut_type),lut,(unsigned short)((int)lut_size));
    #line 4907 
    if (status != ICE_SUCCESS) {
      #line 4908 
      _dev_err(dev,(char *)"Cannot get RSS lut, err %d aq_err %d\n",(int)status,(unsigned int)hw->adminq.rq_last_status);
      #line 4910 
      return -5;
    }
  }
  #line 4914 
  return 0;
}

#line 4929  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_main.c"
static int ice_bridge_getlink(struct sk_buff *skb, u32 pid, u32 seq, struct net_device *dev, u32 filter_mask, int nlflags)
{
  #line 4935 
  u16 bmode;
  #line 4932 
  struct ice_netdev_priv *np = netdev_priv(dev);
  #line 4933 
  struct ice_vsi *vsi = np->vsi;
  #line 4934 
  struct ice_pf *pf = vsi->back;
  #line 4937 
  bmode = (pf->first_sw)->bridge_mode;
  #line 4939 
  return ndo_dflt_bridge_getlink(skb,pid,seq,dev,(unsigned short)((int)bmode),
                                0U,0U,nlflags,filter_mask,
                                (int (*)(struct sk_buff *,
                                         struct net_device *, u32 ))0);
}

#line 4950  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_main.c"
static int ice_vsi_update_bridge_mode(struct ice_vsi *vsi, u16 bmode)
{
  #line 4952 
  struct ice_aqc_vsi_props *vsi_props;
  #line 4954 
  struct ice_vsi_ctx *ctxt;
  #line 4955 
  enum ice_status status;
  #line 4953 
  struct ice_hw *hw = & (vsi->back)->hw;
  #line 4956 
  int ret = 0;
  #line 4958 
  vsi_props = & vsi->info;
  #line 4960 
  ctxt = (struct ice_vsi_ctx *)kzalloc_1(384UL,3264U);
  #line 4961 
  if (ctxt == (struct ice_vsi_ctx *)0) 
                                       #line 4962 
                                       return -12;
  #line 4964 
  ctxt->info = vsi->info;
  #line 4966 
  if ((unsigned int)bmode == 0U) 
                                 #line 4968 
                                 ctxt->info.sw_flags = (unsigned char)((unsigned int)ctxt->info.sw_flags | 32U); else 
                                                                    #line 4971 
                                                                    ctxt->info.sw_flags = (unsigned char)((unsigned int)ctxt->info.sw_flags & 223U);
  #line 4972 
  ctxt->info.valid_sections = (unsigned short)1U;
  #line 4974 
  status = ice_update_vsi(hw,(unsigned short)((int)vsi->idx),ctxt,(struct ice_sq_cd *)0);
  #line 4975 
  if (status != ICE_SUCCESS) {
    #line 4976 
    _dev_err(& ((vsi->back)->pdev)->dev,(char *)"update VSI for bridge mode failed, bmode = %d err %d aq_err %d\n",(int)bmode,(int)status,(unsigned int)hw->adminq.sq_last_status);
    #line 4978 
    ret = -5;
    #line 4979 
    goto out;
  }
  #line 4982 
  vsi_props->sw_flags = ctxt->info.sw_flags;
  #line 4984 
  out: 
       #line 4984 
  ;
  #line 4985 
  kfree((void *)ctxt);
  #line 4986 
  return ret;
}

#line 5002  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_main.c"
static int ice_bridge_setlink(struct net_device *dev, struct nlmsghdr *nlh, u16 flags, struct netlink_ext_ack *extack)
{
  #line 5008 
  struct nlattr *attr;
  #line 5008 
  struct nlattr *br_spec;
  #line 5010 
  enum ice_status status;
  #line 5011 
  struct ice_sw *pf_sw;
  #line 5012 
  int rem;
  #line 5012 
  int v;
  #line 5006 
  struct ice_netdev_priv *np = netdev_priv(dev);
  #line 5007 
  struct ice_pf *pf = (np->vsi)->back;
  #line 5009 
  struct ice_hw *hw = & pf->hw;
  #line 5012 
  int err = 0;
  #line 5014 
  pf_sw = pf->first_sw;
  #line 5016 
  br_spec = nlmsg_find_attr(nlh,16,26);
  #line 5018 
  attr = (struct nlattr *)nla_data(br_spec);
  #line 5018 
  rem = nla_len(br_spec);
  #line 5018 
  while (1) {
    #line 5018 
    if (! (nla_ok(attr,rem) != 0)) 
                                   #line 5018 
                                   break;
    {
      #line 5019 
      __u16 mode;
      #line 5021 
      if (nla_type(attr) != 1) 
                               #line 5022 
                               goto __Cont;
      #line 5023 
      mode = nla_get_u16(attr);
      #line 5024 
      if ((unsigned int)mode > 1U) 
                                   #line 5025 
                                   return -22;
      #line 5027 
      if ((int)pf_sw->bridge_mode == (int)mode) 
                                                #line 5028 
                                                goto __Cont;
      #line 5032 
      v = 0;
      #line 5032 
      while ((int)pf->num_alloc_vsi > v) {
        #line 5033 
        if (*(pf->vsi + (unsigned long)v) == (struct ice_vsi *)0) 
                                                                  #line 5034 
                                                                  goto __Cont_0;
        #line 5035 
        err = ice_vsi_update_bridge_mode(*(pf->vsi + (unsigned long)v),(unsigned short)((int)mode));
        #line 5036 
        if (err != 0) 
                      #line 5037 
                      return err;
        #line 5032 
        __Cont_0: 
                  #line 5032 
        v ++;
      }
      #line 5040 
      hw->evb_veb = (unsigned char)((unsigned int)mode == 0U);
      #line 5044 
      status = ice_update_sw_rule_bridge_mode(hw);
      #line 5045 
      if (status != ICE_SUCCESS) {
        #line 5046 
        netdev_err(dev,(char *)"switch rule update failed, mode = %d err %d aq_err %d\n",(int)mode,(int)status,(unsigned int)hw->adminq.sq_last_status);
        #line 5049 
        hw->evb_veb = (unsigned char)((unsigned int)pf_sw->bridge_mode == 0U);
        #line 5050 
        return -5;
      }
      #line 5053 
      pf_sw->bridge_mode = mode;
    }
    #line 5018 
    __Cont: 
            #line 5018 
    attr = nla_next(attr,& rem);
  }
  #line 5056 
  return 0;
}

#line 5063  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_main.c"
static void ice_tx_timeout(struct net_device *netdev)
{
  #line 5070 
  u32 i;
  #line 5065 
  struct ice_netdev_priv *np = netdev_priv(netdev);
  #line 5066 
  struct ice_ring *tx_ring = (struct ice_ring *)0;
  #line 5067 
  struct ice_vsi *vsi = np->vsi;
  #line 5068 
  struct ice_pf *pf = vsi->back;
  #line 5069 
  int hung_queue = -1;
  #line 5072 
  (pf->tx_timeout_count) ++;
  #line 5075 
  i = 0U;
  #line 5075 
  while (netdev->num_tx_queues > i) {
    {
      #line 5076 
      unsigned long trans_start;
      #line 5077 
      struct netdev_queue *q;
      #line 5079 
      q = netdev_get_tx_queue(netdev,i);
      #line 5080 
      trans_start = q->trans_start;
      {
        #line 5082 
        unsigned long __dummy;
        #line 5082 
        unsigned long __dummy2;
        }
      #line 5081 
      if (1 != 0) {
        {
          #line 5082 
          unsigned long __dummy_0;
          #line 5082 
          unsigned long __dummy2_0;
          }
        #line 5082 
        if (1 != 0) 
          #line 5082 
          if ((long)(((unsigned long)netdev->watchdog_timeo + trans_start) - jiffies) < 0L) {
            #line 5081 
            if ((int)netif_xmit_stopped(q) != 0) {
              #line 5084 
              hung_queue = (int)i;
              #line 5085 
              break;
            }
          }
      }
    }
    #line 5075 
    i ++;
  }
  #line 5089 
  if (netdev->num_tx_queues == i) 
                                  #line 5090 
                                  netdev_info(netdev,(char *)"tx_timeout: no netdev hung queue found\n");
  else {
    #line 5093 
    i = 0U;
    #line 5093 
    while ((unsigned int)vsi->num_txq > i) {
      #line 5094 
      if (*(vsi->tx_rings + (unsigned long)i) != (struct ice_ring *)0 && (*(vsi->tx_rings + (unsigned long)i))->desc != (void *)0) 
        #line 5095 
        if ((int)(*(vsi->tx_rings + (unsigned long)i))->q_index == hung_queue) {
          #line 5096 
          tx_ring = *(vsi->tx_rings + (unsigned long)i);
          #line 5097 
          break;
        }
      #line 5093 
      i ++;
    }
  }
  {
    #line 5103 
    unsigned long __dummy_3;
    #line 5103 
    unsigned long __dummy2_3;
    }
  #line 5103 
  if (1 != 0) {
    {
      #line 5103 
      unsigned long __dummy_4;
      #line 5103 
      unsigned long __dummy2_4;
      }
    #line 5103 
    if (1 != 0) {
      #line 5103 
      if ((long)((pf->tx_timeout_last_recovery - jiffies) + 5000UL) < 0L) 
        #line 5104 
        pf->tx_timeout_recovery_level = 1U; else 
                                                 #line 5103 
                                                 goto _LAND_0;
    }
    else 
         #line 5103 
         goto _LAND_0;
  }
  else {
    #line 5103 
    _LAND_0: {
               #line 5105 
               unsigned long __dummy_1;
               #line 5105 
               unsigned long __dummy2_1;
               }
    #line 5105 
    if (1 != 0) {
      {
        #line 5105 
        unsigned long __dummy_2;
        #line 5105 
        unsigned long __dummy2_2;
        }
      #line 5105 
      if (1 != 0) 
        #line 5105 
        if ((long)(jiffies - (pf->tx_timeout_last_recovery + (unsigned long)netdev->watchdog_timeo)) < 0L) 
          #line 5107 
          return;
    }
  }
  #line 5109 
  if (tx_ring != (struct ice_ring *)0) {
    #line 5111 
    u32 head;
    #line 5110 
    struct ice_hw *hw = & pf->hw;
    #line 5111 
    u32 val = 0U;
    #line 5113 
    head = readl((void *)(hw->hw_addr + (unsigned long)(((int)*(vsi->txq_map + (unsigned long)hung_queue) + 229376) * 4))) & 8191U;
    #line 5116 
    val = readl((void *)(hw->hw_addr + (unsigned long)(((int)(tx_ring->q_vector)->reg_idx + 360448) * 4)));
    #line 5118 
    netdev_info(netdev,(char *)"tx_timeout: VSI_num: %d, Q %d, NTC: 0x%x, HW_HEAD: 0x%x, NTU: 0x%x, INT: 0x%x\n",(int)vsi->vsi_num,hung_queue,(int)tx_ring->next_to_clean,head,(int)tx_ring->next_to_use,val);
  }
  #line 5123 
  pf->tx_timeout_last_recovery = jiffies;
  #line 5124 
  netdev_info(netdev,(char *)"tx_timeout recovery level %d, hung_queue %d\n",pf->tx_timeout_recovery_level,hung_queue);
  #line 5127 
  switch (pf->tx_timeout_recovery_level) {
    #line 5128 
    case (u32)1: 
                 #line 5128 
    ;
    #line 5129 
    cif_set_bit_5(6L,(unsigned long *)(& pf->state));
    #line 5130 
    break;
    #line 5131 
    case (u32)2: 
                 #line 5131 
    ;
    #line 5132 
    cif_set_bit_5(7L,(unsigned long *)(& pf->state));
    #line 5133 
    break;
    #line 5134 
    case (u32)3: 
                 #line 5134 
    ;
    #line 5135 
    cif_set_bit_5(8L,(unsigned long *)(& pf->state));
    #line 5136 
    break;
    #line 5137 
    default: 
             #line 5137 
    ;
    #line 5138 
    netdev_err(netdev,(char *)"tx_timeout recovery unsuccessful, device is in unrecoverable state.\n");
    #line 5139 
    cif_set_bit_5(1L,(unsigned long *)(& pf->state));
    #line 5140 
    cif_set_bit_5(2L,(unsigned long *)(& vsi->state));
    #line 5141 
    cif_set_bit_5(23L,(unsigned long *)(& pf->state));
    #line 5142 
    break;
  }
  #line 5145 
  ice_service_task_schedule(pf);
  #line 5146 
  (pf->tx_timeout_recovery_level) ++;
  #line 5147 
  return;
}

#line 5161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_main.c"
int ice_open(struct net_device *netdev)
{
  #line 5165 
  struct ice_port_info *pi;
  #line 5166 
  int err;
  #line 5163 
  struct ice_netdev_priv *np = netdev_priv(netdev);
  #line 5164 
  struct ice_vsi *vsi = np->vsi;
  #line 5168 
  if ((int)test_bit(2L,(unsigned long *)(& (vsi->back)->state)) != 0) {
    #line 5169 
    netdev_err(netdev,(char *)"driver needs to be unloaded and reloaded\n");
    #line 5170 
    return -5;
  }
  #line 5173 
  netif_carrier_off(netdev);
  #line 5175 
  pi = vsi->port_info;
  #line 5176 
  err = (int)ice_update_link_info(pi);
  #line 5177 
  if (err != 0) {
    #line 5178 
    netdev_err(netdev,(char *)"Failed to get link info, error %d\n",err);
    #line 5180 
    return err;
  }
  #line 5184 
  if (((unsigned long)pi->phy.link_info.link_info & 64UL) != 0UL) {
    #line 5185 
    err = ice_force_phys_link_state(vsi,(_Bool)1);
    #line 5186 
    if (err != 0) {
      #line 5187 
      netdev_err(netdev,(char *)"Failed to set physical link up, error %d\n",err);
      #line 5190 
      return err;
    }
  }
  else {
    #line 5193 
    err = (int)ice_aq_set_link_restart_an(pi,(_Bool)0,(struct ice_sq_cd *)0);
    #line 5194 
    if (err != 0) {
      #line 5195 
      netdev_err(netdev,(char *)"Failed to set PHY state, VSI %d error %d\n",(int)vsi->vsi_num,err);
      #line 5197 
      return err;
    }
    #line 5199 
    cif_set_bit_5(8L,(unsigned long *)(& (vsi->back)->flags));
  }
  #line 5202 
  err = ice_vsi_open(vsi);
  #line 5203 
  if (err != 0) 
                #line 5204 
                netdev_err(netdev,(char *)"Failed to open VSI 0x%04X on switch 0x%04X\n",(int)vsi->vsi_num,(int)(vsi->vsw)->sw_id);
  #line 5206 
  return err;
}

#line 5219  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_main.c"
int ice_stop(struct net_device *netdev)
{
  #line 5221 
  struct ice_netdev_priv *np = netdev_priv(netdev);
  #line 5222 
  struct ice_vsi *vsi = np->vsi;
  #line 5224 
  ice_vsi_close(vsi);
  #line 5226 
  return 0;
}

#line 5236  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_main.c"
static netdev_features_t ice_features_check(struct sk_buff *skb, struct net_device *netdev, netdev_features_t features)
{
  #line 5240 
  size_t len;
  #line 5246 
  if ((unsigned int)skb->ip_summed != 3U) 
                                          #line 5247 
                                          return features;
  #line 5252 
  if ((int)skb_is_gso(skb) != 0) {
    #line 5252 
    ;
    #line 5252 
    if ((unsigned int)((struct skb_shared_info *)skb_end_pointer(skb))->gso_size <= 63U) 
      #line 5253 
      features &= 18446744056529747967ULL;
  }
  #line 5255 
  len = (unsigned long)(skb_network_header(skb) - skb->data);
  #line 5256 
  if ((len & 18446744073709551361UL) != 0UL) 
                                             #line 5257 
                                             goto out_rm_features;
  #line 5259 
  len = (unsigned long)(skb_transport_header(skb) - skb_network_header(skb));
  #line 5260 
  if ((len & 18446744073709551107UL) != 0UL) 
                                             #line 5261 
                                             goto out_rm_features;
  #line 5263 
  if ((unsigned int)skb->encapsulation != 0U) {
    #line 5264 
    len = (unsigned long)(skb_inner_network_header(skb) - skb_transport_header(skb));
    #line 5265 
    if ((len & 18446744073709551555UL) != 0UL) 
                                               #line 5266 
                                               goto out_rm_features;
    #line 5268 
    len = (unsigned long)(skb_inner_transport_header(skb) - skb_inner_network_header(skb));
    #line 5270 
    if ((len & 18446744073709551107UL) != 0UL) 
                                               #line 5271 
                                               goto out_rm_features;
  }
  #line 5274 
  return features;
  #line 5275 
  out_rm_features: 
                   #line 5275 
  ;
  #line 5276 
  return features & 18446744056529747941ULL;
}

#line 5279  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_main.c"
static struct net_device_ops ice_netdev_safe_mode_ops = {.ndo_open = & ice_open, .ndo_stop = & ice_stop, .ndo_start_xmit = & ice_start_xmit, .ndo_set_mac_address = & ice_set_mac_address, .ndo_validate_addr = & eth_validate_addr, .ndo_change_mtu = & ice_change_mtu, .ndo_tx_timeout = & ice_tx_timeout, .ndo_get_stats64 = & ice_get_stats64};
#line 5290  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_main.c"
static struct net_device_ops ice_netdev_ops = {.ndo_open = & ice_open, .ndo_stop = & ice_stop, .ndo_start_xmit = & ice_start_xmit, .ndo_features_check = & ice_features_check, .ndo_set_rx_mode = & ice_set_rx_mode, .ndo_set_mac_address = & ice_set_mac_address, .ndo_validate_addr = & eth_validate_addr, .ndo_change_mtu = & ice_change_mtu, .ndo_tx_timeout = & ice_tx_timeout, .ndo_get_stats64 = & ice_get_stats64, .ndo_vlan_rx_add_vid = & ice_vlan_rx_add_vid, .ndo_vlan_rx_kill_vid = & ice_vlan_rx_kill_vid, .ndo_set_vf_mac = & ice_set_vf_mac, .ndo_set_vf_vlan = & ice_set_vf_port_vlan, .ndo_set_vf_spoofchk = & ice_set_vf_spoofchk, .ndo_set_vf_trust = & ice_set_vf_trust, .ndo_get_vf_config = & ice_get_vf_cfg, .ndo_set_vf_link_state = & ice_set_vf_link_state, .ndo_get_vf_stats = & ice_get_vf_stats, .ndo_set_features = & ice_set_features, .ndo_fdb_add = & ice_fdb_add, .ndo_fdb_del = & ice_fdb_del, .ndo_bridge_setlink = & ice_bridge_setlink, .ndo_bridge_getlink = & ice_bridge_getlink, .ndo_set_tx_maxrate = & ice_set_tx_maxrate, .ndo_bpf = & ice_xdp, .ndo_xdp_xmit = & ice_xdp_xmit, .ndo_xsk_wakeup = & ice_xsk_wakeup};
#line 93  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ice/ice.ko/concurrency safety/0/concurrency safety/weaver/ice_main.i.aux"
struct pci_driver *emg_alias_ice_driver = & ice_driver;
#line 94  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ice/ice.ko/concurrency safety/0/concurrency safety/weaver/ice_main.i.aux"
struct pci_device_id (*emg_alias_ice_pci_tbl)[4U] = & ice_pci_tbl;
#line 97 
#line 97 
int emg___pci_register_driver(struct pci_driver *arg0, struct module *arg1, char *arg2);
#line 98 
#line 98 
struct net_device *emg_alloc_etherdev_mqs(int arg0, unsigned int arg1, unsigned int arg2);
#line 99 
#line 99 
int emg_del_timer_sync(struct timer_list *arg0);
#line 102 
#line 102 
int emg_mod_timer(struct timer_list *arg0, unsigned long arg1);
#line 103 
#line 103 
void emg_pci_unregister_driver(struct pci_driver *arg0);
#line 104 
#line 104 
_Bool emg_queue_work(struct workqueue_struct *arg0, struct work_struct *arg1);
#line 105 
#line 105 
int emg_register_netdev(struct net_device *arg0);
#line 110  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ice/ice.ko/concurrency safety/0/concurrency safety/weaver/ice_main.i.aux"
int emg_wrapper_ice_bridge_getlink(struct sk_buff *arg0, unsigned int arg1, unsigned int arg2, struct net_device *arg3, unsigned int arg4, int arg5)
{
  #line 111 
  return ice_bridge_getlink(arg0,arg1,arg2,arg3,arg4,arg5);
}

#line 115  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ice/ice.ko/concurrency safety/0/concurrency safety/weaver/ice_main.i.aux"
int emg_wrapper_ice_bridge_setlink(struct net_device *arg0, struct nlmsghdr *arg1, unsigned short arg2, struct netlink_ext_ack *arg3)
{
  #line 116 
  return ice_bridge_setlink(arg0,arg1,(unsigned short)((int)arg2),arg3);
}

#line 120  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ice/ice.ko/concurrency safety/0/concurrency safety/weaver/ice_main.i.aux"
int emg_wrapper_ice_change_mtu(struct net_device *arg0, int arg1)
{
  #line 121 
  return ice_change_mtu(arg0,arg1);
}

#line 125  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ice/ice.ko/concurrency safety/0/concurrency safety/weaver/ice_main.i.aux"
int emg_wrapper_ice_fdb_add(struct ndmsg *arg0, struct nlattr **arg1, struct net_device *arg2, unsigned char *arg3, unsigned short arg4, unsigned short arg5, struct netlink_ext_ack *arg6)
{
  #line 126 
  return ice_fdb_add(arg0,arg1,arg2,arg3,(unsigned short)((int)arg4),
                  (unsigned short)((int)arg5),arg6);
}

#line 130  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ice/ice.ko/concurrency safety/0/concurrency safety/weaver/ice_main.i.aux"
int emg_wrapper_ice_fdb_del(struct ndmsg *arg0, struct nlattr **arg1, struct net_device *arg2, unsigned char *arg3, unsigned short arg4)
{
  #line 131 
  return ice_fdb_del(arg0,arg1,arg2,arg3,(unsigned short)((int)arg4));
}

#line 135  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ice/ice.ko/concurrency safety/0/concurrency safety/weaver/ice_main.i.aux"
unsigned long long emg_wrapper_ice_features_check(struct sk_buff *arg0, struct net_device *arg1, unsigned long long arg2)
{
  #line 136 
  return ice_features_check(arg0,arg1,arg2);
}

#line 140  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ice/ice.ko/concurrency safety/0/concurrency safety/weaver/ice_main.i.aux"
void emg_wrapper_ice_get_stats64(struct net_device *arg0, struct rtnl_link_stats64 *arg1)
{
  #line 141 
  ice_get_stats64(arg0,arg1);
  #line 142 
  return;
}

#line 145  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ice/ice.ko/concurrency safety/0/concurrency safety/weaver/ice_main.i.aux"
int emg_wrapper_ice_probe(struct pci_dev *arg0, struct pci_device_id *arg1)
{
  #line 146 
  return ice_probe(arg0,arg1);
}

#line 150  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ice/ice.ko/concurrency safety/0/concurrency safety/weaver/ice_main.i.aux"
void emg_wrapper_ice_remove(struct pci_dev *arg0)
{
  #line 151 
  ice_remove(arg0);
  #line 152 
  return;
}

#line 155  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ice/ice.ko/concurrency safety/0/concurrency safety/weaver/ice_main.i.aux"
int emg_wrapper_ice_set_features(struct net_device *arg0, unsigned long long arg1)
{
  #line 156 
  return ice_set_features(arg0,arg1);
}

#line 160  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ice/ice.ko/concurrency safety/0/concurrency safety/weaver/ice_main.i.aux"
int emg_wrapper_ice_set_mac_address(struct net_device *arg0, void *arg1)
{
  #line 161 
  return ice_set_mac_address(arg0,arg1);
}

#line 165  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ice/ice.ko/concurrency safety/0/concurrency safety/weaver/ice_main.i.aux"
void emg_wrapper_ice_set_rx_mode(struct net_device *arg0)
{
  #line 166 
  ice_set_rx_mode(arg0);
  #line 167 
  return;
}

#line 170  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ice/ice.ko/concurrency safety/0/concurrency safety/weaver/ice_main.i.aux"
int emg_wrapper_ice_set_tx_maxrate(struct net_device *arg0, int arg1, unsigned int arg2)
{
  #line 171 
  return ice_set_tx_maxrate(arg0,arg1,arg2);
}

#line 175  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ice/ice.ko/concurrency safety/0/concurrency safety/weaver/ice_main.i.aux"
int emg_wrapper_ice_set_vf_mac(struct net_device *arg0, int arg1, unsigned char *arg2)
{
  #line 176 
  return ice_set_vf_mac(arg0,arg1,arg2);
}

#line 180  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ice/ice.ko/concurrency safety/0/concurrency safety/weaver/ice_main.i.aux"
void emg_wrapper_ice_tx_timeout(struct net_device *arg0)
{
  #line 181 
  ice_tx_timeout(arg0);
  #line 182 
  return;
}

#line 185  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ice/ice.ko/concurrency safety/0/concurrency safety/weaver/ice_main.i.aux"
int emg_wrapper_ice_vlan_rx_add_vid(struct net_device *arg0, unsigned short arg1, unsigned short arg2)
{
  #line 186 
  return ice_vlan_rx_add_vid(arg0,(unsigned short)((int)arg1),
                          (unsigned short)((int)arg2));
}

#line 190  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ice/ice.ko/concurrency safety/0/concurrency safety/weaver/ice_main.i.aux"
int emg_wrapper_ice_vlan_rx_kill_vid(struct net_device *arg0, unsigned short arg1, unsigned short arg2)
{
  #line 191 
  return ice_vlan_rx_kill_vid(arg0,(unsigned short)((int)arg1),
                           (unsigned short)((int)arg2));
}

#line 195  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ice/ice.ko/concurrency safety/0/concurrency safety/weaver/ice_main.i.aux"
int emg_wrapper_ice_xdp(struct net_device *arg0, struct netdev_bpf *arg1)
{
  #line 196 
  return ice_xdp(arg0,arg1);
}

#line 200  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ice/ice.ko/concurrency safety/0/concurrency safety/weaver/ice_main.i.aux"
void emg_ice_module_exit(void)
{
  #line 201 
  ice_module_exit();
  #line 202 
  return;
}

#line 204  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ice/ice.ko/concurrency safety/0/concurrency safety/weaver/ice_main.i.aux"
int emg_ice_module_init(void)
{
  #line 205 
  return ice_module_init();
}

#line 209  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ice/ice.ko/concurrency safety/0/concurrency safety/weaver/ice_main.i.aux"
static unsigned long cif_find_next_zero_bit_0(unsigned long *addr, unsigned long size, unsigned long offset)
{
  #line 212 
  return ldv_find_next_zero_bit(addr,size,offset);
}

#line 223  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ice/ice.ko/concurrency safety/0/concurrency safety/weaver/ice_main.i.aux"
static void cif_set_bit_5(long nr, unsigned long *addr)
{
  #line 226 
  ldv_set_bit(nr,addr);
  #line 227 
  return;
}

#line 230  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ice/ice.ko/concurrency safety/0/concurrency safety/weaver/ice_main.i.aux"
static void cif_clear_bit_5(long nr, unsigned long *addr)
{
  #line 233 
  ldv_clear_bit(nr,addr);
  #line 234 
  return;
}

#line 237  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ice/ice.ko/concurrency safety/0/concurrency safety/weaver/ice_main.i.aux"
static void INIT_LIST_HEAD_1(struct list_head *list)
{
  #line 240 
  ldv_init_list_head(list);
  #line 241 
  return;
}

#line 407  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ice/ice.ko/concurrency safety/0/concurrency safety/weaver/ice_main.i.aux"
static bool cif_queue_work(struct workqueue_struct *wq, struct work_struct *work)
{
  #line 411 
  return emg_queue_work(wq,work);
}

#line 522  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ice/ice.ko/concurrency safety/0/concurrency safety/weaver/ice_main.i.aux"
static void *kzalloc_1(size_t size, gfp_t flags)
{
  #line 525 
  return ldv_kzalloc(size,flags);
}

#line 649  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ice/ice.ko/concurrency safety/0/concurrency safety/weaver/ice_main.i.aux"
static void cif_spin_lock__xmit_lock_of_netdev_queue(spinlock_t *lock)
{
  #line 652 
  ldv_spin_model_lock((char *)"_xmit_lock_of_netdev_queue");
  #line 654 
  spin_lock(lock);
  #line 655 
  return;
}

#line 689  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ice/ice.ko/concurrency safety/0/concurrency safety/weaver/ice_main.i.aux"
static void cif_spin_unlock__xmit_lock_of_netdev_queue(spinlock_t *lock)
{
  #line 692 
  ldv_spin_model_unlock((char *)"_xmit_lock_of_netdev_queue");
  #line 694 
  spin_unlock(lock);
  #line 695 
  return;
}

#line 734  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ice/ice.ko/concurrency safety/0/concurrency safety/weaver/ice_main.i.aux"
static void cif_spin_lock_bh_addr_list_lock_of_net_device(spinlock_t *lock)
{
  #line 737 
  ldv_spin_model_lock((char *)"addr_list_lock_of_net_device");
  #line 739 
  spin_lock_bh(lock);
  #line 740 
  return;
}

#line 752  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ice/ice.ko/concurrency safety/0/concurrency safety/weaver/ice_main.i.aux"
static void cif_spin_unlock_bh_addr_list_lock_of_net_device(spinlock_t *lock)
{
  #line 755 
  ldv_spin_model_unlock((char *)"addr_list_lock_of_net_device");
  #line 757 
  spin_unlock_bh(lock);
  #line 758 
  return;
}

#line 902  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ice/ice.ko/concurrency safety/0/concurrency safety/weaver/ice_main.i.aux"
static void cif_unregister_netdev_0(struct net_device *dev)
{
  #line 906 
  emg_unregister_netdev(dev);
  #line 907 
  return;
}

#line 910  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ice/ice.ko/concurrency safety/0/concurrency safety/weaver/ice_main.i.aux"
static void cif_free_netdev_0(struct net_device *dev)
{
  #line 914 
  emg_free_netdev(dev);
  #line 915 
  return;
}

#line 918  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ice/ice.ko/concurrency safety/0/concurrency safety/weaver/ice_main.i.aux"
static int cif_del_timer_sync(struct timer_list *timer)
{
  #line 922 
  return emg_del_timer_sync(timer);
}

#line 926  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ice/ice.ko/concurrency safety/0/concurrency safety/weaver/ice_main.i.aux"
static int cif_mod_timer(struct timer_list *timer, unsigned long expires)
{
  #line 930 
  return emg_mod_timer(timer,expires);
}

#line 934  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ice/ice.ko/concurrency safety/0/concurrency safety/weaver/ice_main.i.aux"
static void cif_devm_free_irq_0(struct device *dev, unsigned int irq, void *dev_id)
{
  #line 938 
  emg_devm_free_irq(dev,irq,dev_id);
  #line 939 
  return;
}

#line 942  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ice/ice.ko/concurrency safety/0/concurrency safety/weaver/ice_main.i.aux"
static void *cif_devm_kcalloc_2(struct device *dev, size_t n, size_t size, gfp_t flags)
{
  #line 945 
  return ldv_devm_kcalloc(n,size,flags);
}

#line 949  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ice/ice.ko/concurrency safety/0/concurrency safety/weaver/ice_main.i.aux"
static void cif_mutex_lock_avail_q_mutex_of_ice_pf_0(struct mutex *lock)
{
  #line 952 
  ldv_mutex_model_lock(lock,(char *)"avail_q_mutex_of_ice_pf");
  #line 953 
  return;
}

#line 956  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ice/ice.ko/concurrency safety/0/concurrency safety/weaver/ice_main.i.aux"
static void cif_mutex_unlock_avail_q_mutex_of_ice_pf_0(struct mutex *lock)
{
  #line 959 
  ldv_mutex_model_unlock(lock,(char *)"avail_q_mutex_of_ice_pf");
  #line 960 
  return;
}

#line 963  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ice/ice.ko/concurrency safety/0/concurrency safety/weaver/ice_main.i.aux"
static struct net_device *cif_alloc_etherdev_mqs(int sizeof_priv, unsigned int txqs, unsigned int rxqs)
{
  #line 967 
  return emg_alloc_etherdev_mqs(sizeof_priv,txqs,rxqs);
}

#line 971  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ice/ice.ko/concurrency safety/0/concurrency safety/weaver/ice_main.i.aux"
static int cif_register_netdev(struct net_device *dev)
{
  #line 975 
  return emg_register_netdev(dev);
}

#line 979  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ice/ice.ko/concurrency safety/0/concurrency safety/weaver/ice_main.i.aux"
static void cif_mutex_lock_lock(struct mutex *lock)
{
  #line 982 
  ldv_mutex_model_lock(lock,(char *)"lock");
  #line 983 
  return;
}

#line 986  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ice/ice.ko/concurrency safety/0/concurrency safety/weaver/ice_main.i.aux"
static void cif_mutex_unlock_lock(struct mutex *lock)
{
  #line 989 
  ldv_mutex_model_unlock(lock,(char *)"lock");
  #line 990 
  return;
}

#line 993  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ice/ice.ko/concurrency safety/0/concurrency safety/weaver/ice_main.i.aux"
static void *cif_devm_kzalloc_3(struct device *dev, size_t size, gfp_t flags)
{
  #line 996 
  return ldv_devm_kzalloc(size,flags);
}

#line 1000  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ice/ice.ko/concurrency safety/0/concurrency safety/weaver/ice_main.i.aux"
static void cif_release_firmware(struct firmware *fw)
{
  #line 1003 
  ldv_release_firmware(fw);
  #line 1004 
  return;
}

#line 1007  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ice/ice.ko/concurrency safety/0/concurrency safety/weaver/ice_main.i.aux"
static int cif_request_firmware(struct firmware **fw, char *name, struct device *device)
{
  #line 1010 
  return ldv_request_firmware(fw);
}

#line 1014  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ice/ice.ko/concurrency safety/0/concurrency safety/weaver/ice_main.i.aux"
static int cif___pci_register_driver(struct pci_driver *ldv_func_arg1, struct module *ldv_func_arg2, char *mod_name)
{
  #line 1018 
  return emg___pci_register_driver(ldv_func_arg1,ldv_func_arg2,mod_name);
}

#line 1022  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ice/ice.ko/concurrency safety/0/concurrency safety/weaver/ice_main.i.aux"
static void cif_pci_unregister_driver(struct pci_driver *dev)
{
  #line 1026 
  emg_pci_unregister_driver(dev);
  #line 1027 
  return;
}

#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_sriov.h"
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_sriov.c"
enum ice_status ice_aq_send_msg_to_vf(struct ice_hw *hw, u16 vfid, u32 v_opcode, u32 v_retval, u8 *msg, u16 msglen, struct ice_sq_cd *cd);
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_sriov.h"
#line 55  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_sriov.c"
u32 ice_conv_link_speed_to_virtchnl(bool adv_link_support, u16 link_speed);
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_sriov.c"
enum ice_status ice_aq_send_msg_to_vf(struct ice_hw *hw, u16 vfid, u32 v_opcode, u32 v_retval, u8 *msg, u16 msglen, struct ice_sq_cd *cd)
{
  #line 26 
  struct ice_aqc_pf_vf_msg *cmd;
  #line 27 
  struct ice_aq_desc desc;
  #line 29 
  ice_fill_dflt_direct_cmd_desc(& desc,(unsigned short)2050);
  #line 31 
  cmd = & desc.params.virt;
  #line 32 
  cmd->id = (unsigned int)vfid;
  #line 34 
  desc.cookie_high = v_opcode;
  #line 35 
  desc.cookie_low = v_retval;
  #line 37 
  if ((unsigned int)msglen != 0U) 
                                  #line 38 
                                  desc.flags = (unsigned short)((unsigned int)desc.flags | 1024U);
  #line 40 
  return ice_sq_send_cmd(hw,& hw->mailboxq,& desc,(void *)msg,
                      (unsigned short)((int)msglen),cd);
}

#line 55  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_sriov.c"
u32 ice_conv_link_speed_to_virtchnl(bool adv_link_support, u16 link_speed)
{
  #line 57 
  u32 speed;
  #line 59 
  if ((int)adv_link_support != 0) 
    #line 60 
    switch ((int)link_speed) {
      #line 61 
      case 1: 
              #line 61 
      ;
      #line 62 
      speed = 10U;
      #line 63 
      break;
      #line 64 
      case 2: 
              #line 64 
      ;
      #line 65 
      speed = 100U;
      #line 66 
      break;
      #line 67 
      case 4: 
              #line 67 
      ;
      #line 68 
      speed = 1000U;
      #line 69 
      break;
      #line 70 
      case 8: 
              #line 70 
      ;
      #line 71 
      speed = 2500U;
      #line 72 
      break;
      #line 73 
      case 16: 
               #line 73 
      ;
      #line 74 
      speed = 5000U;
      #line 75 
      break;
      #line 76 
      case 32: 
               #line 76 
      ;
      #line 77 
      speed = 10000U;
      #line 78 
      break;
      #line 79 
      case 64: 
               #line 79 
      ;
      #line 80 
      speed = 20000U;
      #line 81 
      break;
      #line 82 
      case 128: 
                #line 82 
      ;
      #line 83 
      speed = 25000U;
      #line 84 
      break;
      #line 85 
      case 256: 
                #line 85 
      ;
      #line 86 
      speed = 40000U;
      #line 87 
      break;
      #line 88 
      case 512: 
                #line 88 
      ;
      #line 89 
      speed = 50000U;
      #line 90 
      break;
      #line 91 
      case 1024: 
                 #line 91 
      ;
      #line 92 
      speed = 100000U;
      #line 93 
      break;
      #line 94 
      default: 
               #line 94 
      ;
      #line 95 
      speed = 0U;
      #line 96 
      break;
    }
  else 
    #line 104 
    switch ((int)link_speed) {
      #line 105 
      case 1: 
              #line 105 
      ;
      #line 106 
      case 2: 
              #line 106 
      ;
      #line 107 
      speed = 2U;
      #line 108 
      break;
      #line 109 
      case 4: 
              #line 109 
      ;
      #line 110 
      case 8: 
              #line 110 
      ;
      #line 111 
      case 16: 
               #line 111 
      ;
      #line 112 
      speed = 4U;
      #line 113 
      break;
      #line 114 
      case 32: 
               #line 114 
      ;
      #line 115 
      speed = 8U;
      #line 116 
      break;
      #line 117 
      case 64: 
               #line 117 
      ;
      #line 118 
      speed = 32U;
      #line 119 
      break;
      #line 120 
      case 128: 
                #line 120 
      ;
      #line 121 
      speed = 64U;
      #line 122 
      break;
      #line 123 
      case 256: 
                #line 123 
      ;
      #line 125 
      case 512: 
                #line 125 
      ;
      #line 127 
      case 1024: 
                 #line 127 
      ;
      #line 128 
      speed = 16U;
      #line 129 
      break;
      #line 130 
      default: 
               #line 130 
      ;
      #line 131 
      speed = 0U;
      #line 132 
      break;
    }
  #line 135 
  return speed;
}

#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bitops/instrumented-atomic.h"
#line 119  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ice/ice.ko/concurrency safety/0/concurrency safety/weaver/ice_dcb_lib.i.aux"
static void cif_set_bit_6(long nr, unsigned long *addr);
#line 44  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bitops/instrumented-atomic.h"
#line 126  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ice/ice.ko/concurrency safety/0/concurrency safety/weaver/ice_dcb_lib.i.aux"
static void cif_clear_bit_6(long nr, unsigned long *addr);
#line 186  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/string.h"
#line 684  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ice/ice.ko/concurrency safety/0/concurrency safety/weaver/ice_dcb_lib.i.aux"
static void *cif_kmemdup(void *src, size_t len, gfp_t gfp);
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/cmpxchg_64.h"
__inline static int arch_atomic_read_2(atomic_t *v)
{
  #line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/atomic.h"
  union __anonunion___u_10345 __u;
  #line 31 
  __read_once_size((void *)(& v->counter),(void *)(& __u.__c),4);
  #line 31 
  return (__u.__val);
}

#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/atomic-instrumented.h"
__inline static int atomic_read_2(atomic_t *v)
{
  #line 26 
  kasan_check_read((void *)v,4U);
  #line 27 
  return arch_atomic_read_2(v);
}

#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/string.h"
#line 23 
void *ldv_kmemdup(void *src, size_t len, gfp_t gfp);
#line 668  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/slab.h"
#line 418  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ice/ice.ko/concurrency safety/0/concurrency safety/weaver/ice_dcb_lib.i.aux"
static void *kzalloc_2(size_t size, gfp_t flags);
#line 1621  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static int skb_header_cloned_0(struct sk_buff *skb)
{
  #line 1623 
  int dataref;
  #line 1625 
  if ((unsigned int)skb->cloned == 0U) 
                                       #line 1626 
                                       return 0;
  #line 1628 
  dataref = atomic_read_2(& ((struct skb_shared_info *)skb_end_pointer(skb))->dataref);
  #line 1629 
  dataref = (dataref & 65535) - (dataref >> 16);
  #line 1630 
  return dataref != 1;
}

#line 3152  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static int skb_cow_head_0(struct sk_buff *skb, unsigned int headroom)
{
  #line 3154 
  ;
  #line 3154 
  ;
  #line 3154 
  return __skb_cow(skb,headroom,skb_header_cloned_0(skb));
}

#line 2100  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static int netdev_set_prio_tc_map(struct net_device *dev, u8 prio, u8 tc)
{
  #line 2102 
  if ((int)tc >= (int)dev->num_tc) 
                                   #line 2103 
                                   return -22;
  #line 2105 
  dev->prio_tc_map[(int)prio & 15] = (unsigned char)((unsigned int)tc & 15U);
  #line 2106 
  return 0;
}

#line 2110 
#line 2110 
void netdev_reset_tc(struct net_device *);
#line 2111 
#line 2111 
int netdev_set_tc_queue(struct net_device *, u8, u16, u16);
#line 2112 
#line 2112 
int netdev_set_num_tc(struct net_device *, u8);
#line 124  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_dcb.h"
#line 124 
enum ice_status ice_aq_get_dcb_cfg(struct ice_hw *hw, u8 mib_type, u8 bridgetype, struct ice_dcbx_cfg *dcbcfg);
#line 126 
#line 126 
enum ice_status ice_get_dcb_cfg(struct ice_port_info *pi);
#line 127 
#line 127 
enum ice_status ice_set_dcb_cfg(struct ice_port_info *pi);
#line 128 
#line 128 
enum ice_status ice_init_dcb(struct ice_hw *hw, bool enable_mib_change);
#line 130 
#line 130 
enum ice_status ice_query_port_ets(struct ice_port_info *pi, struct ice_aqc_port_ets_elem *buf, u16 buf_size, struct ice_sq_cd *cd);
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_dcb_nl.h"
void ice_vsi_cfg_netdev_tc(struct ice_vsi *vsi, u8 ena_tc)
{
  #line 16 
  struct ice_dcbx_cfg *dcbcfg;
  #line 17 
  u8 netdev_tc;
  #line 18 
  int i;
  #line 14 
  struct net_device *netdev = vsi->netdev;
  #line 15 
  struct ice_pf *pf = vsi->back;
  #line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_dcb_lib.c"
  if (netdev == (struct net_device *)0) 
                                        #line 21 
                                        return;
  #line 23 
  if ((unsigned int)ena_tc == 0U) {
    #line 24 
    netdev_reset_tc(netdev);
    #line 25 
    return;
  }
  #line 28 
  if (netdev_set_num_tc(netdev,(unsigned char)((int)vsi->tc_cfg.numtc)) != 0) 
    #line 29 
    return;
  #line 31 
  dcbcfg = & (pf->hw.port_info)->local_dcbx_cfg;
  #line 33 
  i = 0;
  #line 33 
  while (i <= 7) {
    #line 34 
    if ((((unsigned long)vsi->tc_cfg.ena_tc >> i) & 1UL) != 0UL) 
                                                                 #line 35 
                                                                 netdev_set_tc_queue(netdev,(unsigned char)((int)vsi->tc_cfg.tc_info[i].netdev_tc),(unsigned short)((int)vsi->tc_cfg.tc_info[i].qcount_tx),(unsigned short)((int)vsi->tc_cfg.tc_info[i].qoffset));
    #line 33 
    i ++;
  }
  #line 40 
  i = 0;
  #line 40 
  while (i <= 7) {
    {
      #line 41 
      u8 ets_tc = dcbcfg->etscfg.prio_table[i];
      #line 44 
      netdev_tc = vsi->tc_cfg.tc_info[(int)ets_tc].netdev_tc;
      #line 45 
      netdev_set_prio_tc_map(netdev,(unsigned char)((int)((unsigned char)i)),(unsigned char)((int)netdev_tc));
    }
    #line 40 
    i ++;
  }
  #line 47 
  return;
}

#line 53  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_dcb_lib.c"
u8 ice_dcb_get_ena_tc(struct ice_dcbx_cfg *dcbcfg)
{
  #line 55 
  u8 i;
  #line 55 
  u8 num_tc;
  #line 55 
  u8 ena_tc = (unsigned char)1U;
  #line 57 
  num_tc = ice_dcb_get_num_tc(dcbcfg);
  #line 59 
  i = (unsigned char)0U;
  #line 59 
  while ((int)i < (int)num_tc) {
    #line 60 
    ena_tc = (unsigned char)((int)((unsigned char)(1UL << (int)i)) | (int)ena_tc);
    #line 59 
    i = (u8)((int)i + 1);
  }
  #line 62 
  return ena_tc;
}

#line 69  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_dcb_lib.c"
u8 ice_dcb_get_num_tc(struct ice_dcbx_cfg *dcbcfg)
{
  #line 74 
  int i;
  #line 71 
  bool tc_unused = (_Bool)0;
  #line 72 
  u8 num_tc = (unsigned char)0U;
  #line 73 
  u8 ret = (unsigned char)0U;
  #line 79 
  i = 0;
  #line 79 
  while (i <= 7) {
    #line 80 
    num_tc = (unsigned char)((int)((unsigned char)(1UL << (int)dcbcfg->etscfg.prio_table[i])) | (int)num_tc);
    #line 79 
    i ++;
  }
  #line 83 
  i = 0;
  #line 83 
  while (i <= 7) {
    #line 84 
    if ((((unsigned long)num_tc >> i) & 1UL) != 0UL) 
      #line 85 
      if (! tc_unused) 
                       #line 86 
                       ret = (u8)((int)ret + 1);
      else {
        #line 88 
        printk((char *)"\001");
        #line 89 
        return (unsigned char)1U;
      }
    else 
         #line 92 
         tc_unused = (_Bool)1;
    #line 83 
    i ++;
  }
  #line 97 
  if ((unsigned int)ret == 0U) 
                               #line 98 
                               ret = (unsigned char)1U;
  #line 100 
  return ret;
}

#line 108  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_dcb_lib.c"
u8 ice_dcb_get_tc(struct ice_vsi *vsi, int queue_index)
{
  #line 110 
  return (*(vsi->tx_rings + (unsigned long)queue_index))->dcb_tc;
}

#line 117  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_dcb_lib.c"
void ice_vsi_cfg_dcb_rings(struct ice_vsi *vsi)
{
  #line 119 
  struct ice_ring *tx_ring;
  #line 119 
  struct ice_ring *rx_ring;
  #line 120 
  u16 qoffset;
  #line 120 
  u16 qcount;
  #line 121 
  int i;
  #line 121 
  int n;
  #line 123 
  if (! test_bit(5L,(unsigned long *)(& (vsi->back)->flags))) {
    #line 125 
    i = 0;
    #line 125 
    while ((int)vsi->num_txq > i) {
      #line 126 
      tx_ring = *(vsi->tx_rings + (unsigned long)i);
      #line 127 
      tx_ring->dcb_tc = (unsigned char)0U;
      #line 125 
      i ++;
    }
    #line 129 
    i = 0;
    #line 129 
    while ((int)vsi->num_rxq > i) {
      #line 130 
      rx_ring = *(vsi->rx_rings + (unsigned long)i);
      #line 131 
      rx_ring->dcb_tc = (unsigned char)0U;
      #line 129 
      i ++;
    }
    #line 133 
    return;
  }
  #line 136 
  n = 0;
  #line 136 
  while (n <= 7) {
    #line 137 
    if ((((unsigned long)vsi->tc_cfg.ena_tc >> n) & 1UL) == 0UL) 
                                                                 #line 138 
                                                                 break;
    #line 140 
    qoffset = vsi->tc_cfg.tc_info[n].qoffset;
    #line 141 
    qcount = vsi->tc_cfg.tc_info[n].qcount_tx;
    #line 142 
    i = (int)qoffset;
    #line 142 
    while ((int)qoffset + (int)qcount > i) {
      #line 143 
      tx_ring = *(vsi->tx_rings + (unsigned long)i);
      #line 144 
      rx_ring = *(vsi->rx_rings + (unsigned long)i);
      #line 145 
      tx_ring->dcb_tc = (unsigned char)n;
      #line 146 
      rx_ring->dcb_tc = (unsigned char)n;
      #line 142 
      i ++;
    }
    #line 136 
    n ++;
  }
  #line 149 
  return;
}

#line 157  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_dcb_lib.c"
int ice_pf_dcb_cfg(struct ice_pf *pf, struct ice_dcbx_cfg *new_cfg, bool locked)
{
  #line 160 
  struct ice_dcbx_cfg *old_cfg;
  #line 160 
  struct ice_dcbx_cfg *curr_cfg;
  #line 163 
  struct ice_vsi *pf_vsi;
  #line 159 
  struct ice_aqc_port_ets_elem buf = {.tc_valid_bits = (unsigned char)0U, .reserved = {(unsigned char)0, (unsigned char)0, (unsigned char)0}, .up2tc = 0U, .tc_bw_share = {(unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0}, .port_eir_prof_id = 0U, .port_cir_prof_id = 0U, .tc_node_prio = 0U, .reserved1 = {(unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0}, .tc_node_teid = {0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U}};
  #line 161 
  struct device *dev = & (pf->pdev)->dev;
  #line 162 
  int ret = 1;
  #line 165 
  curr_cfg = & (pf->hw.port_info)->local_dcbx_cfg;
  #line 168 
  if ((unsigned int)(pf->hw.port_info)->is_sw_lldp == 0U) 
                                                          #line 169 
                                                          ret = 0;
  #line 172 
  if ((unsigned int)ice_dcb_get_num_tc(new_cfg) > 1U) {
    {
      #line 173 
      bool branch;
      #line 173 
      struct _ddebug __UNIQUE_ID_ddebug536 = {.modname = (char *)"ice", .function = (char *)"ice_pf_dcb_cfg", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_dcb_lib.c", .format = (char *)"DCB tagging enabled (num TC > 1)\n", .lineno = (unsigned int)173U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 173 
      branch = arch_static_branch(& __UNIQUE_ID_ddebug536.key.dd_key_false.key,(_Bool)0);
      #line 173 
      if ((long)((long)((int)branch != 0)) != 0L) 
                                                  #line 173 
                                                  __dynamic_dev_dbg(& __UNIQUE_ID_ddebug536,dev,(char *)"DCB tagging enabled (num TC > 1)\n");
    }
    #line 174 
    cif_set_bit_6(5L,(unsigned long *)(& pf->flags));
  }
  else {
    {
      #line 176 
      bool branch_0;
      #line 176 
      struct _ddebug __UNIQUE_ID_ddebug537 = {.modname = (char *)"ice", .function = (char *)"ice_pf_dcb_cfg", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_dcb_lib.c", .format = (char *)"DCB tagging disabled (num TC = 1)\n", .lineno = (unsigned int)176U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 176 
      branch_0 = arch_static_branch(& __UNIQUE_ID_ddebug537.key.dd_key_false.key,(_Bool)0);
      #line 176 
      if ((long)((long)((int)branch_0 != 0)) != 0L) 
                                                    #line 176 
                                                    __dynamic_dev_dbg(& __UNIQUE_ID_ddebug537,dev,(char *)"DCB tagging disabled (num TC = 1)\n");
    }
    #line 177 
    cif_clear_bit_6(5L,(unsigned long *)(& pf->flags));
  }
  #line 180 
  if (memcmp((void *)new_cfg,(void *)curr_cfg,196UL) == 0) {
    {
      #line 181 
      bool branch_1;
      #line 181 
      struct _ddebug __UNIQUE_ID_ddebug538 = {.modname = (char *)"ice", .function = (char *)"ice_pf_dcb_cfg", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_dcb_lib.c", .format = (char *)"No change in DCB config required\n", .lineno = (unsigned int)181U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 181 
      branch_1 = arch_static_branch(& __UNIQUE_ID_ddebug538.key.dd_key_false.key,(_Bool)0);
      #line 181 
      if ((long)((long)((int)branch_1 != 0)) != 0L) 
                                                    #line 181 
                                                    __dynamic_dev_dbg(& __UNIQUE_ID_ddebug538,dev,(char *)"No change in DCB config required\n");
    }
    #line 182 
    return ret;
  }
  #line 186 
  old_cfg = (struct ice_dcbx_cfg *)cif_kmemdup((void *)curr_cfg,196UL,3264U);
  #line 187 
  if (old_cfg == (struct ice_dcbx_cfg *)0) 
                                           #line 188 
                                           return -12;
  #line 190 
  _dev_info(dev,(char *)"Commit DCB Configuration to the hardware\n");
  #line 191 
  pf_vsi = ice_get_main_vsi(pf);
  #line 192 
  if (pf_vsi == (struct ice_vsi *)0) {
    {
      #line 193 
      bool branch_2;
      #line 193 
      struct _ddebug __UNIQUE_ID_ddebug539 = {.modname = (char *)"ice", .function = (char *)"ice_pf_dcb_cfg", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_dcb_lib.c", .format = (char *)"PF VSI doesn\'t exist\n", .lineno = (unsigned int)193U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 193 
      branch_2 = arch_static_branch(& __UNIQUE_ID_ddebug539.key.dd_key_false.key,(_Bool)0);
      #line 193 
      if ((long)((long)((int)branch_2 != 0)) != 0L) 
                                                    #line 193 
                                                    __dynamic_dev_dbg(& __UNIQUE_ID_ddebug539,dev,(char *)"PF VSI doesn\'t exist\n");
    }
    #line 194 
    ret = -22;
    #line 195 
    goto free_cfg;
  }
  #line 201 
  if (! locked) 
                #line 202 
                rtnl_lock();
  #line 203 
  ice_dis_vsi(pf_vsi,(_Bool)1);
  #line 205 
  memcpy((void *)curr_cfg,(void *)new_cfg,196UL);
  #line 206 
  memcpy((void *)(& curr_cfg->etsrec),(void *)(& curr_cfg->etscfg),27UL);
  #line 207 
  memcpy((void *)(& new_cfg->etsrec),(void *)(& curr_cfg->etscfg),27UL);
  #line 212 
  if ((unsigned int)(pf->hw.port_info)->is_sw_lldp != 0U) {
    #line 213 
    ret = (int)ice_set_dcb_cfg(pf->hw.port_info);
    #line 214 
    if (ret != 0) {
      #line 215 
      _dev_err(dev,(char *)"Set DCB Config failed\n");
      #line 217 
      memcpy((void *)curr_cfg,(void *)old_cfg,196UL);
      #line 218 
      goto out;
    }
  }
  #line 222 
  ret = (int)ice_query_port_ets(pf->hw.port_info,& buf,(unsigned short)64,
                           (struct ice_sq_cd *)0);
  #line 223 
  if (ret != 0) {
    #line 224 
    _dev_err(dev,(char *)"Query Port ETS failed\n");
    #line 225 
    goto out;
  }
  #line 228 
  ice_pf_dcb_recfg(pf);
  #line 230 
  out: 
       #line 230 
  ;
  #line 231 
  ice_ena_vsi(pf_vsi,(_Bool)1);
  #line 232 
  if (! locked) 
                #line 233 
                rtnl_unlock();
  #line 234 
  free_cfg: 
            #line 234 
  ;
  #line 235 
  kfree((void *)old_cfg);
  #line 236 
  return ret;
}

#line 243  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_dcb_lib.c"
static void ice_cfg_etsrec_defaults(struct ice_port_info *pi)
{
  #line 246 
  u8 i;
  #line 245 
  struct ice_dcbx_cfg *dcbcfg = & pi->local_dcbx_cfg;
  #line 249 
  if ((unsigned int)dcbcfg->etsrec.maxtcs != 0U) 
                                                 #line 250 
                                                 return;
  #line 253 
  dcbcfg->etsrec.maxtcs = (unsigned char)1U;
  #line 254 
  i = (unsigned char)0U;
  #line 254 
  while ((unsigned int)i <= 7U) {
    #line 255 
    if ((unsigned int)i != 0U) 
                               #line 255 
                               dcbcfg->etsrec.tcbwtable[(int)i] = (unsigned char)0U; else 
                                                                    #line 255 
                                                                    dcbcfg->etsrec.tcbwtable[(int)i] = (unsigned char)100U;
    #line 256 
    if ((unsigned int)i != 0U) 
                               #line 256 
                               dcbcfg->etsrec.tsatable[(int)i] = (unsigned char)0U; else 
                                                                    #line 256 
                                                                    dcbcfg->etsrec.tsatable[(int)i] = (unsigned char)2U;
    #line 254 
    i = (u8)((int)i + 1);
  }
  #line 258 
  return;
}

#line 268  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_dcb_lib.c"
static bool ice_dcb_need_recfg(struct ice_pf *pf, struct ice_dcbx_cfg *old_cfg, struct ice_dcbx_cfg *new_cfg)
{
  #line 271 
  struct device *dev = & (pf->pdev)->dev;
  #line 272 
  bool need_reconfig = (_Bool)0;
  #line 275 
  if (memcmp((void *)(& new_cfg->etscfg),(void *)(& old_cfg->etscfg),27UL) != 0) {
    #line 278 
    if (memcmp((void *)(& new_cfg->etscfg.prio_table),
               (void *)(& old_cfg->etscfg.prio_table),8UL) != 0) {
      #line 281 
      need_reconfig = (_Bool)1;
      {
        #line 282 
        bool branch;
        #line 282 
        struct _ddebug __UNIQUE_ID_ddebug540 = {.modname = (char *)"ice", .function = (char *)"ice_dcb_need_recfg", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_dcb_lib.c", .format = (char *)"ETS UP2TC changed.\n", .lineno = (unsigned int)282U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
        #line 282 
        branch = arch_static_branch(& __UNIQUE_ID_ddebug540.key.dd_key_false.key,(_Bool)0);
        #line 282 
        if ((long)((long)((int)branch != 0)) != 0L) 
                                                    #line 282 
                                                    __dynamic_dev_dbg(& __UNIQUE_ID_ddebug540,dev,(char *)"ETS UP2TC changed.\n");
      }
    }
    #line 285 
    if (memcmp((void *)(& new_cfg->etscfg.tcbwtable),
               (void *)(& old_cfg->etscfg.tcbwtable),8UL) != 0) {
      #line 288 
      bool branch_0;
      #line 288 
      struct _ddebug __UNIQUE_ID_ddebug541 = {.modname = (char *)"ice", .function = (char *)"ice_dcb_need_recfg", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_dcb_lib.c", .format = (char *)"ETS TC BW Table changed.\n", .lineno = (unsigned int)288U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 288 
      branch_0 = arch_static_branch(& __UNIQUE_ID_ddebug541.key.dd_key_false.key,(_Bool)0);
      #line 288 
      if ((long)((long)((int)branch_0 != 0)) != 0L) 
                                                    #line 288 
                                                    __dynamic_dev_dbg(& __UNIQUE_ID_ddebug541,dev,(char *)"ETS TC BW Table changed.\n");
    }
    #line 290 
    if (memcmp((void *)(& new_cfg->etscfg.tsatable),
               (void *)(& old_cfg->etscfg.tsatable),8UL) != 0) {
      #line 293 
      bool branch_1;
      #line 293 
      struct _ddebug __UNIQUE_ID_ddebug542 = {.modname = (char *)"ice", .function = (char *)"ice_dcb_need_recfg", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_dcb_lib.c", .format = (char *)"ETS TSA Table changed.\n", .lineno = (unsigned int)293U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 293 
      branch_1 = arch_static_branch(& __UNIQUE_ID_ddebug542.key.dd_key_false.key,(_Bool)0);
      #line 293 
      if ((long)((long)((int)branch_1 != 0)) != 0L) 
                                                    #line 293 
                                                    __dynamic_dev_dbg(& __UNIQUE_ID_ddebug542,dev,(char *)"ETS TSA Table changed.\n");
    }
  }
  #line 297 
  if (memcmp((void *)(& new_cfg->pfc),(void *)(& old_cfg->pfc),4UL) != 0) {
    #line 298 
    need_reconfig = (_Bool)1;
    {
      #line 299 
      bool branch_2;
      #line 299 
      struct _ddebug __UNIQUE_ID_ddebug543 = {.modname = (char *)"ice", .function = (char *)"ice_dcb_need_recfg", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_dcb_lib.c", .format = (char *)"PFC config change detected.\n", .lineno = (unsigned int)299U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 299 
      branch_2 = arch_static_branch(& __UNIQUE_ID_ddebug543.key.dd_key_false.key,(_Bool)0);
      #line 299 
      if ((long)((long)((int)branch_2 != 0)) != 0L) 
                                                    #line 299 
                                                    __dynamic_dev_dbg(& __UNIQUE_ID_ddebug543,dev,(char *)"PFC config change detected.\n");
    }
  }
  #line 303 
  if (memcmp((void *)(& new_cfg->app),(void *)(& old_cfg->app),128UL) != 0) {
    #line 304 
    need_reconfig = (_Bool)1;
    {
      #line 305 
      bool branch_3;
      #line 305 
      struct _ddebug __UNIQUE_ID_ddebug544 = {.modname = (char *)"ice", .function = (char *)"ice_dcb_need_recfg", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_dcb_lib.c", .format = (char *)"APP Table change detected.\n", .lineno = (unsigned int)305U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 305 
      branch_3 = arch_static_branch(& __UNIQUE_ID_ddebug544.key.dd_key_false.key,(_Bool)0);
      #line 305 
      if ((long)((long)((int)branch_3 != 0)) != 0L) 
                                                    #line 305 
                                                    __dynamic_dev_dbg(& __UNIQUE_ID_ddebug544,dev,(char *)"APP Table change detected.\n");
    }
  }
  {
    #line 308 
    bool branch_4;
    #line 308 
    struct _ddebug __UNIQUE_ID_ddebug545 = {.modname = (char *)"ice", .function = (char *)"ice_dcb_need_recfg", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_dcb_lib.c", .format = (char *)"dcb need_reconfig=%d\n", .lineno = (unsigned int)308U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 308 
    branch_4 = arch_static_branch(& __UNIQUE_ID_ddebug545.key.dd_key_false.key,(_Bool)0);
    #line 308 
    if ((long)((long)((int)branch_4 != 0)) != 0L) 
                                                  #line 308 
                                                  __dynamic_dev_dbg(& __UNIQUE_ID_ddebug545,dev,(char *)"dcb need_reconfig=%d\n",(int)need_reconfig);
  }
  #line 309 
  return need_reconfig;
}

#line 316  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_dcb_lib.c"
void ice_dcb_rebuild(struct ice_pf *pf)
{
  #line 318 
  struct ice_dcbx_cfg *local_dcbx_cfg;
  #line 318 
  struct ice_dcbx_cfg *desired_dcbx_cfg;
  #line 318 
  struct ice_dcbx_cfg *prev_cfg;
  #line 321 
  enum ice_status ret;
  #line 319 
  struct ice_aqc_port_ets_elem buf = {.tc_valid_bits = (unsigned char)0U, .reserved = {(unsigned char)0, (unsigned char)0, (unsigned char)0}, .up2tc = 0U, .tc_bw_share = {(unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0}, .port_eir_prof_id = 0U, .port_cir_prof_id = 0U, .tc_node_prio = 0U, .reserved1 = {(unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0}, .tc_node_teid = {0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U}};
  #line 320 
  struct device *dev = & (pf->pdev)->dev;
  #line 323 
  ret = ice_query_port_ets(pf->hw.port_info,& buf,(unsigned short)64,(struct ice_sq_cd *)0);
  #line 324 
  if (ret != ICE_SUCCESS) {
    #line 325 
    _dev_err(dev,(char *)"Query Port ETS failed\n");
    #line 326 
    goto dcb_error;
  }
  #line 330 
  if (! test_bit(5L,(unsigned long *)(& pf->flags))) 
                                                     #line 331 
                                                     return;
  #line 333 
  local_dcbx_cfg = & (pf->hw.port_info)->local_dcbx_cfg;
  #line 334 
  desired_dcbx_cfg = & (pf->hw.port_info)->desired_dcbx_cfg;
  #line 337 
  local_dcbx_cfg->etscfg.willing = (unsigned char)0U;
  #line 338 
  local_dcbx_cfg->pfc.willing = (unsigned char)0U;
  #line 339 
  local_dcbx_cfg->app_mode = (unsigned char)1U;
  #line 341 
  ice_cfg_etsrec_defaults(pf->hw.port_info);
  #line 342 
  ret = ice_set_dcb_cfg(pf->hw.port_info);
  #line 343 
  if (ret != ICE_SUCCESS) {
    #line 344 
    _dev_err(dev,(char *)"Failed to set DCB to unwilling\n");
    #line 345 
    goto dcb_error;
  }
  #line 349 
  prev_cfg = (struct ice_dcbx_cfg *)cif_kmemdup((void *)local_dcbx_cfg,196UL,3264U);
  #line 350 
  if (prev_cfg == (struct ice_dcbx_cfg *)0) 
                                            #line 351 
                                            goto dcb_error;
  #line 353 
  ice_init_dcb(& pf->hw,(_Bool)1);
  #line 354 
  if ((unsigned int)(pf->hw.port_info)->dcbx_status == 7U) 
                                                           #line 355 
                                                           (pf->hw.port_info)->is_sw_lldp = (unsigned char)1U; else 
                                                                    #line 357 
                                                                    (pf->hw.port_info)->is_sw_lldp = (unsigned char)0U;
  #line 359 
  if ((int)ice_dcb_need_recfg(pf,prev_cfg,local_dcbx_cfg) != 0) {
    #line 361 
    _dev_err(dev,(char *)"Set local MIB not accurate\n");
    #line 362 
    kfree((void *)prev_cfg);
    #line 363 
    goto dcb_error;
  }
  #line 367 
  kfree((void *)prev_cfg);
  #line 370 
  if ((unsigned int)local_dcbx_cfg->dcbx_mode == 1U) 
                                                     #line 371 
                                                     memcpy((void *)local_dcbx_cfg,(void *)desired_dcbx_cfg,196UL);
  #line 374 
  ice_cfg_etsrec_defaults(pf->hw.port_info);
  #line 375 
  ret = ice_set_dcb_cfg(pf->hw.port_info);
  #line 376 
  if (ret != ICE_SUCCESS) {
    #line 377 
    _dev_err(dev,(char *)"Failed to set desired config\n");
    #line 378 
    goto dcb_error;
  }
  #line 380 
  _dev_info(dev,(char *)"DCB restored after reset\n");
  #line 381 
  ret = ice_query_port_ets(pf->hw.port_info,& buf,(unsigned short)64,(struct ice_sq_cd *)0);
  #line 382 
  if (ret != ICE_SUCCESS) {
    #line 383 
    _dev_err(dev,(char *)"Query Port ETS failed\n");
    #line 384 
    goto dcb_error;
  }
  #line 387 
  return;
  #line 389 
  dcb_error: 
             #line 389 
  ;
  #line 390 
  _dev_err(dev,(char *)"Disabling DCB until new settings occur\n");
  #line 391 
  prev_cfg = (struct ice_dcbx_cfg *)kzalloc_2(196UL,3264U);
  #line 392 
  if (prev_cfg == (struct ice_dcbx_cfg *)0) 
                                            #line 393 
                                            return;
  #line 395 
  prev_cfg->etscfg.willing = (unsigned char)1U;
  #line 396 
  prev_cfg->etscfg.tcbwtable[0] = (unsigned char)100U;
  #line 397 
  prev_cfg->etscfg.tsatable[0] = (unsigned char)2U;
  #line 398 
  memcpy((void *)(& prev_cfg->etsrec),(void *)(& prev_cfg->etscfg),27UL);
  #line 399 
  ice_pf_dcb_cfg(pf,prev_cfg,(_Bool)0);
  #line 400 
  kfree((void *)prev_cfg);
  #line 401 
  return;
}

#line 408  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_dcb_lib.c"
static int ice_dcb_init_cfg(struct ice_pf *pf, bool locked)
{
  #line 410 
  struct ice_dcbx_cfg *newcfg;
  #line 411 
  struct ice_port_info *pi;
  #line 412 
  int ret = 0;
  #line 414 
  pi = pf->hw.port_info;
  #line 415 
  newcfg = (struct ice_dcbx_cfg *)cif_kmemdup((void *)(& pi->local_dcbx_cfg),196UL,3264U);
  #line 416 
  if (newcfg == (struct ice_dcbx_cfg *)0) 
                                          #line 417 
                                          return -12;
  #line 419 
  memset((void *)(& pi->local_dcbx_cfg),0,196UL);
  #line 421 
  _dev_info(& (pf->pdev)->dev,(char *)"Configuring initial DCB values\n");
  #line 422 
  if (ice_pf_dcb_cfg(pf,newcfg,(_Bool)((bool)((int)locked) != 0)) != 0) 
    #line 423 
    ret = -22;
  #line 425 
  kfree((void *)newcfg);
  #line 427 
  return ret;
}

#line 436  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_dcb_lib.c"
static int ice_dcb_sw_dflt_cfg(struct ice_pf *pf, bool ets_willing, bool locked)
{
  #line 439 
  struct ice_dcbx_cfg *dcbcfg;
  #line 440 
  struct ice_port_info *pi;
  #line 441 
  struct ice_hw *hw;
  #line 442 
  int ret;
  #line 438 
  struct ice_aqc_port_ets_elem buf = {.tc_valid_bits = (unsigned char)0U, .reserved = {(unsigned char)0, (unsigned char)0, (unsigned char)0}, .up2tc = 0U, .tc_bw_share = {(unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0}, .port_eir_prof_id = 0U, .port_cir_prof_id = 0U, .tc_node_prio = 0U, .reserved1 = {(unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0}, .tc_node_teid = {0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U}};
  #line 444 
  hw = & pf->hw;
  #line 445 
  pi = hw->port_info;
  #line 446 
  dcbcfg = (struct ice_dcbx_cfg *)kzalloc_2(196UL,3264U);
  #line 447 
  if (dcbcfg == (struct ice_dcbx_cfg *)0) 
                                          #line 448 
                                          return -12;
  #line 450 
  memset((void *)(& pi->local_dcbx_cfg),0,196UL);
  #line 452 
  dcbcfg->etscfg.willing = (unsigned char)((int)ets_willing != 0);
  #line 453 
  dcbcfg->etscfg.maxtcs = (unsigned char)hw->func_caps.common_cap.maxtc;
  #line 454 
  dcbcfg->etscfg.tcbwtable[0] = (unsigned char)100U;
  #line 455 
  dcbcfg->etscfg.tsatable[0] = (unsigned char)2U;
  #line 457 
  memcpy((void *)(& dcbcfg->etsrec),(void *)(& dcbcfg->etscfg),27UL);
  #line 459 
  dcbcfg->etsrec.willing = (unsigned char)0U;
  #line 461 
  dcbcfg->pfc.willing = (unsigned char)1U;
  #line 462 
  dcbcfg->pfc.pfccap = (unsigned char)hw->func_caps.common_cap.maxtc;
  #line 464 
  dcbcfg->numapps = 1U;
  #line 465 
  dcbcfg->app[0].selector = (unsigned char)1U;
  #line 466 
  dcbcfg->app[0].priority = (unsigned char)3U;
  #line 467 
  dcbcfg->app[0].prot_id = (unsigned short)35078U;
  #line 469 
  ret = ice_pf_dcb_cfg(pf,dcbcfg,(_Bool)((bool)((int)locked) != 0));
  #line 470 
  kfree((void *)dcbcfg);
  #line 471 
  if (ret != 0) 
                #line 472 
                return ret;
  #line 474 
  return (int)ice_query_port_ets(pi,& buf,(unsigned short)64,(struct ice_sq_cd *)0);
}

#line 483  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_dcb_lib.c"
static bool ice_dcb_tc_contig(u8 *prio_table)
{
  #line 486 
  int i;
  #line 485 
  u8 max_tc = (unsigned char)0U;
  #line 488 
  i = 0;
  #line 488 
  while (i <= 7) {
    {
      #line 489 
      u8 cur_tc = *(prio_table + (unsigned long)i);
      #line 491 
      if ((int)cur_tc > (int)max_tc) 
                                     #line 492 
                                     return (_Bool)0;
      else 
        #line 493 
        if ((int)cur_tc == (int)max_tc) 
                                        #line 494 
                                        max_tc = (u8)((int)max_tc + 1);
    }
    #line 488 
    i ++;
  }
  #line 497 
  return (_Bool)1;
}

#line 506  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_dcb_lib.c"
static int ice_dcb_noncontig_cfg(struct ice_pf *pf)
{
  #line 510 
  int ret;
  #line 508 
  struct ice_dcbx_cfg *dcbcfg = & (pf->hw.port_info)->local_dcbx_cfg;
  #line 509 
  struct device *dev = & (pf->pdev)->dev;
  #line 513 
  ret = ice_dcb_sw_dflt_cfg(pf,(_Bool)0,(_Bool)1);
  #line 514 
  if (ret != 0) {
    #line 515 
    _dev_err(dev,(char *)"Failed to set local DCB config %d\n",ret);
    #line 516 
    return ret;
  }
  #line 520 
  dcbcfg->etscfg.willing = (unsigned char)1U;
  #line 521 
  ret = (int)ice_set_dcb_cfg(pf->hw.port_info);
  #line 522 
  if (ret != 0) 
                #line 523 
                _dev_err(dev,(char *)"Failed to set DCB to unwilling\n");
  #line 525 
  return ret;
}

#line 536  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_dcb_lib.c"
void ice_pf_dcb_recfg(struct ice_pf *pf)
{
  #line 540 
  int v;
  #line 540 
  int ret;
  #line 538 
  struct ice_dcbx_cfg *dcbcfg = & (pf->hw.port_info)->local_dcbx_cfg;
  #line 539 
  u8 tc_map = (unsigned char)0U;
  #line 543 
  v = 0;
  #line 543 
  while ((int)pf->num_alloc_vsi > v) {
    {
      #line 544 
      struct ice_vsi *vsi = *(pf->vsi + (unsigned long)v);
      #line 546 
      if (vsi == (struct ice_vsi *)0) 
                                      #line 547 
                                      goto __Cont;
      #line 549 
      if (vsi->type == (unsigned int)ICE_VSI_PF) {
        #line 550 
        tc_map = ice_dcb_get_ena_tc(dcbcfg);
        #line 555 
        if (! ice_dcb_tc_contig((u8 *)(& dcbcfg->etscfg.prio_table))) {
          #line 556 
          tc_map = (unsigned char)1U;
          #line 557 
          ice_dcb_noncontig_cfg(pf);
        }
      }
      else 
           #line 560 
           tc_map = (unsigned char)1U;
      #line 563 
      ret = ice_vsi_cfg_tc(vsi,(unsigned char)((int)tc_map));
      #line 564 
      if (ret != 0) {
        #line 565 
        _dev_err(& (pf->pdev)->dev,(char *)"Failed to config TC for VSI index: %d\n",(int)vsi->idx);
        #line 567 
        goto __Cont;
      }
      #line 570 
      ice_vsi_map_rings_to_vectors(vsi);
      #line 571 
      if (vsi->type == (unsigned int)ICE_VSI_PF) 
                                                 #line 572 
                                                 ice_dcbnl_set_all(vsi);
    }
    #line 543 
    __Cont: 
            #line 543 
    v ++;
  }
  #line 574 
  return;
}

#line 581  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_dcb_lib.c"
int ice_init_pf_dcb(struct ice_pf *pf, bool locked)
{
  #line 584 
  struct ice_port_info *port_info;
  #line 586 
  int err;
  #line 583 
  struct device *dev = & (pf->pdev)->dev;
  #line 585 
  struct ice_hw *hw = & pf->hw;
  #line 588 
  port_info = hw->port_info;
  #line 590 
  err = (int)ice_init_dcb(hw,(_Bool)0);
  #line 591 
  if (err != 0 && (unsigned int)port_info->is_sw_lldp == 0U) {
    #line 592 
    _dev_err(dev,(char *)"Error initializing DCB %d\n",err);
    #line 593 
    goto dcb_init_err;
  }
  #line 596 
  _dev_info(dev,(char *)"DCB is enabled in the hardware, max number of TCs supported on this port are %d\n",pf->hw.func_caps.common_cap.maxtc);
  #line 599 
  if (err != 0) {
    #line 600 
    struct ice_vsi *pf_vsi;
    #line 603 
    _dev_info(dev,(char *)"FW LLDP is disabled, DCBx/LLDP in SW mode.\n");
    #line 604 
    cif_clear_bit_6(9L,(unsigned long *)(& pf->flags));
    #line 605 
    err = ice_dcb_sw_dflt_cfg(pf,(_Bool)1,(_Bool)((bool)((int)locked) != 0));
    #line 606 
    if (err != 0) {
      #line 607 
      _dev_err(dev,(char *)"Failed to set local DCB config %d\n",err);
      #line 609 
      err = -5;
      #line 610 
      goto dcb_init_err;
    }
    #line 616 
    pf_vsi = ice_get_main_vsi(pf);
    #line 617 
    if (pf_vsi == (struct ice_vsi *)0) {
      #line 618 
      _dev_err(dev,(char *)"Failed to set local DCB config\n");
      #line 619 
      err = -5;
      #line 620 
      goto dcb_init_err;
    }
    #line 623 
    ice_cfg_sw_lldp(pf_vsi,(_Bool)0,(_Bool)1);
    #line 625 
    pf->dcbx_cap = (unsigned short)9U;
    #line 626 
    return 0;
  }
  #line 629 
  cif_set_bit_6(9L,(unsigned long *)(& pf->flags));
  #line 632 
  pf->dcbx_cap = (unsigned short)10U;
  #line 634 
  err = ice_dcb_init_cfg(pf,(_Bool)((bool)((int)locked) != 0));
  #line 635 
  if (err != 0) 
                #line 636 
                goto dcb_init_err;
  #line 638 
  return err;
  #line 640 
  dcb_init_err: 
                #line 640 
  ;
  #line 641 
  _dev_err(dev,(char *)"DCB init failed\n");
  #line 642 
  return err;
}

#line 649  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_dcb_lib.c"
void ice_update_dcb_stats(struct ice_pf *pf)
{
  #line 651 
  struct ice_hw_port_stats *prev_ps;
  #line 651 
  struct ice_hw_port_stats *cur_ps;
  #line 653 
  u8 port;
  #line 654 
  int i;
  #line 652 
  struct ice_hw *hw = & pf->hw;
  #line 656 
  port = (hw->port_info)->lport;
  #line 657 
  prev_ps = & pf->stats_prev;
  #line 658 
  cur_ps = & pf->stats;
  #line 660 
  i = 0;
  #line 660 
  while (i <= 7) {
    #line 661 
    ice_stat_update32(hw,(unsigned int)((((int)port + i * 8) + 458912) * 8),(_Bool)((unsigned int)pf->stat_prev_loaded != 0U),& prev_ps->priority_xoff_rx[i],& cur_ps->priority_xoff_rx[i]);
    #line 665 
    ice_stat_update32(hw,(unsigned int)((((int)port + i * 8) + 458848) * 8),(_Bool)((unsigned int)pf->stat_prev_loaded != 0U),& prev_ps->priority_xon_rx[i],& cur_ps->priority_xon_rx[i]);
    #line 669 
    ice_stat_update32(hw,(unsigned int)((((int)port + i * 8) + 459176) * 8),(_Bool)((unsigned int)pf->stat_prev_loaded != 0U),& prev_ps->priority_xon_tx[i],& cur_ps->priority_xon_tx[i]);
    #line 673 
    ice_stat_update32(hw,(unsigned int)((((int)port + i * 8) + 459240) * 8),(_Bool)((unsigned int)pf->stat_prev_loaded != 0U),& prev_ps->priority_xoff_tx[i],& cur_ps->priority_xoff_tx[i]);
    #line 677 
    ice_stat_update32(hw,(unsigned int)((((int)port + i * 8) + 458976) * 8),(_Bool)((unsigned int)pf->stat_prev_loaded != 0U),& prev_ps->priority_xon_2_xoff[i],& cur_ps->priority_xon_2_xoff[i]);
    #line 660 
    i ++;
  }
  #line 682 
  return;
}

#line 690  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_dcb_lib.c"
int ice_tx_prepare_vlan_flags_dcb(struct ice_ring *tx_ring, struct ice_tx_buf *first)
{
  #line 693 
  struct sk_buff *skb = first->__anonCompField_ice_tx_buf_192.skb;
  #line 695 
  if (! test_bit(5L,(unsigned long *)(& ((tx_ring->vsi)->back)->flags))) 
    #line 696 
    return 0;
  #line 699 
  if (((unsigned long)first->tx_flags & 6UL) != 0UL || skb->priority != 7U) {
    #line 701 
    first->tx_flags &= 536870911U;
    #line 703 
    first->tx_flags |= skb->priority << 29;
    #line 705 
    if (((unsigned long)first->tx_flags & 4UL) != 0UL) {
      #line 706 
      struct vlan_ethhdr *vhdr;
      #line 707 
      int rc;
      #line 709 
      rc = skb_cow_head_0(skb,0U);
      #line 710 
      if (rc < 0) 
                  #line 711 
                  return rc;
      #line 712 
      vhdr = (struct vlan_ethhdr *)skb->data;
      #line 713 
      vhdr->h_vlan_TCI = __builtin_bswap16((unsigned short)((int)((unsigned short)(first->tx_flags >> 16))));
    }
    else 
         #line 716 
         first->tx_flags |= 2U;
  }
  #line 720 
  return 0;
}

#line 729  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_dcb_lib.c"
void ice_dcb_process_lldp_set_mib_change(struct ice_pf *pf, struct ice_rq_event_info *event)
{
  #line 734 
  struct ice_aqc_lldp_get_mib *mib;
  #line 735 
  struct ice_dcbx_cfg tmp_dcbx_cfg;
  #line 737 
  struct ice_port_info *pi;
  #line 738 
  struct ice_vsi *pf_vsi;
  #line 739 
  u8 type;
  #line 740 
  int ret;
  #line 732 
  struct ice_aqc_port_ets_elem buf = {.tc_valid_bits = (unsigned char)0U, .reserved = {(unsigned char)0, (unsigned char)0, (unsigned char)0}, .up2tc = 0U, .tc_bw_share = {(unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0}, .port_eir_prof_id = 0U, .port_cir_prof_id = 0U, .tc_node_prio = 0U, .reserved1 = {(unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0}, .tc_node_teid = {0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U}};
  #line 733 
  struct device *dev = & (pf->pdev)->dev;
  #line 736 
  bool need_reconfig = (_Bool)0;
  #line 743 
  if (! test_bit(4L,(unsigned long *)(& pf->flags))) 
                                                     #line 744 
                                                     return;
  #line 746 
  if (((int)pf->dcbx_cap & 1) != 0) {
    {
      #line 747 
      bool branch;
      #line 747 
      struct _ddebug __UNIQUE_ID_ddebug546 = {.modname = (char *)"ice", .function = (char *)"ice_dcb_process_lldp_set_mib_change", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_dcb_lib.c", .format = (char *)"MIB Change Event in HOST mode\n", .lineno = (unsigned int)747U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 747 
      branch = arch_static_branch(& __UNIQUE_ID_ddebug546.key.dd_key_false.key,(_Bool)0);
      #line 747 
      if ((long)((long)((int)branch != 0)) != 0L) 
                                                  #line 747 
                                                  __dynamic_dev_dbg(& __UNIQUE_ID_ddebug546,dev,(char *)"MIB Change Event in HOST mode\n");
    }
    #line 748 
    return;
  }
  #line 751 
  pi = pf->hw.port_info;
  #line 752 
  mib = (struct ice_aqc_lldp_get_mib *)(& event->desc.params.raw);
  #line 754 
  type = (unsigned char)((unsigned int)((unsigned char)((int)mib->type >> 2)) & 12U);
  {
    #line 756 
    bool branch_0;
    #line 756 
    struct _ddebug __UNIQUE_ID_ddebug547 = {.modname = (char *)"ice", .function = (char *)"ice_dcb_process_lldp_set_mib_change", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_dcb_lib.c", .format = (char *)"LLDP event MIB bridge type 0x%x\n", .lineno = (unsigned int)756U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 756 
    branch_0 = arch_static_branch(& __UNIQUE_ID_ddebug547.key.dd_key_false.key,(_Bool)0);
    #line 756 
    if ((long)((long)((int)branch_0 != 0)) != 0L) 
                                                  #line 756 
                                                  __dynamic_dev_dbg(& __UNIQUE_ID_ddebug547,dev,(char *)"LLDP event MIB bridge type 0x%x\n",(int)type);
  }
  #line 757 
  if ((unsigned int)type != 0U) 
                                #line 758 
                                return;
  #line 761 
  type = (unsigned char)((unsigned int)mib->type & 3U);
  {
    #line 762 
    bool branch_1;
    #line 762 
    struct _ddebug __UNIQUE_ID_ddebug548 = {.modname = (char *)"ice", .function = (char *)"ice_dcb_process_lldp_set_mib_change", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_dcb_lib.c", .format = (char *)"LLDP event mib type %s\n", .lineno = (unsigned int)762U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 762 
    branch_1 = arch_static_branch(& __UNIQUE_ID_ddebug548.key.dd_key_false.key,(_Bool)0);
    #line 762 
    if ((long)((long)((int)branch_1 != 0)) != 0L) {
      #line 762 
      char *tmp_2;
      #line 762 
      if ((unsigned int)type != 0U) 
                                    #line 762 
                                    tmp_2 = (char *)"remote"; else 
                                                                   #line 762 
                                                                   tmp_2 = (char *)"local";
      #line 762 
      ;
      #line 762 
      __dynamic_dev_dbg(& __UNIQUE_ID_ddebug548,dev,(char *)"LLDP event mib type %s\n",tmp_2);
    }
  }
  #line 763 
  if ((unsigned int)type == 1U) {
    #line 765 
    ret = (int)ice_aq_get_dcb_cfg(pi->hw,(unsigned char)1,(unsigned char)0,
                           & pi->remote_dcbx_cfg);
    #line 768 
    if (ret != 0) {
      #line 769 
      _dev_err(dev,(char *)"Failed to get remote DCB config\n");
      #line 770 
      return;
    }
  }
  #line 775 
  tmp_dcbx_cfg = (pf->hw.port_info)->local_dcbx_cfg;
  #line 778 
  memset((void *)(& pi->local_dcbx_cfg),0,196UL);
  #line 781 
  ret = (int)ice_get_dcb_cfg(pf->hw.port_info);
  #line 782 
  if (ret != 0) {
    #line 783 
    _dev_err(dev,(char *)"Failed to get DCB config\n");
    #line 784 
    return;
  }
  #line 788 
  if (memcmp((void *)(& tmp_dcbx_cfg),(void *)(& pi->local_dcbx_cfg),196UL) == 0) {
    {
      #line 789 
      bool branch_2;
      #line 789 
      struct _ddebug __UNIQUE_ID_ddebug549 = {.modname = (char *)"ice", .function = (char *)"ice_dcb_process_lldp_set_mib_change", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_dcb_lib.c", .format = (char *)"No change detected in DCBX configuration.\n", .lineno = (unsigned int)789U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 789 
      branch_2 = arch_static_branch(& __UNIQUE_ID_ddebug549.key.dd_key_false.key,(_Bool)0);
      #line 789 
      if ((long)((long)((int)branch_2 != 0)) != 0L) 
                                                    #line 789 
                                                    __dynamic_dev_dbg(& __UNIQUE_ID_ddebug549,dev,(char *)"No change detected in DCBX configuration.\n");
    }
    #line 790 
    return;
  }
  #line 793 
  need_reconfig = ice_dcb_need_recfg(pf,& tmp_dcbx_cfg,& pi->local_dcbx_cfg);
  #line 795 
  ice_dcbnl_flush_apps(pf,& tmp_dcbx_cfg,& pi->local_dcbx_cfg);
  #line 796 
  if (! need_reconfig) 
                       #line 797 
                       return;
  #line 800 
  if ((unsigned int)ice_dcb_get_num_tc(& pi->local_dcbx_cfg) > 1U) {
    {
      #line 801 
      bool branch_3;
      #line 801 
      struct _ddebug __UNIQUE_ID_ddebug550 = {.modname = (char *)"ice", .function = (char *)"ice_dcb_process_lldp_set_mib_change", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_dcb_lib.c", .format = (char *)"DCB tagging enabled (num TC > 1)\n", .lineno = (unsigned int)801U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 801 
      branch_3 = arch_static_branch(& __UNIQUE_ID_ddebug550.key.dd_key_false.key,(_Bool)0);
      #line 801 
      if ((long)((long)((int)branch_3 != 0)) != 0L) 
                                                    #line 801 
                                                    __dynamic_dev_dbg(& __UNIQUE_ID_ddebug550,dev,(char *)"DCB tagging enabled (num TC > 1)\n");
    }
    #line 802 
    cif_set_bit_6(5L,(unsigned long *)(& pf->flags));
  }
  else {
    {
      #line 804 
      bool branch_4;
      #line 804 
      struct _ddebug __UNIQUE_ID_ddebug551 = {.modname = (char *)"ice", .function = (char *)"ice_dcb_process_lldp_set_mib_change", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_dcb_lib.c", .format = (char *)"DCB tagging disabled (num TC = 1)\n", .lineno = (unsigned int)804U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 804 
      branch_4 = arch_static_branch(& __UNIQUE_ID_ddebug551.key.dd_key_false.key,(_Bool)0);
      #line 804 
      if ((long)((long)((int)branch_4 != 0)) != 0L) 
                                                    #line 804 
                                                    __dynamic_dev_dbg(& __UNIQUE_ID_ddebug551,dev,(char *)"DCB tagging disabled (num TC = 1)\n");
    }
    #line 805 
    cif_clear_bit_6(5L,(unsigned long *)(& pf->flags));
  }
  #line 808 
  pf_vsi = ice_get_main_vsi(pf);
  #line 809 
  if (pf_vsi == (struct ice_vsi *)0) {
    {
      #line 810 
      bool branch_5;
      #line 810 
      struct _ddebug __UNIQUE_ID_ddebug552 = {.modname = (char *)"ice", .function = (char *)"ice_dcb_process_lldp_set_mib_change", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_dcb_lib.c", .format = (char *)"PF VSI doesn\'t exist\n", .lineno = (unsigned int)810U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 810 
      branch_5 = arch_static_branch(& __UNIQUE_ID_ddebug552.key.dd_key_false.key,(_Bool)0);
      #line 810 
      if ((long)((long)((int)branch_5 != 0)) != 0L) 
                                                    #line 810 
                                                    __dynamic_dev_dbg(& __UNIQUE_ID_ddebug552,dev,(char *)"PF VSI doesn\'t exist\n");
    }
    #line 811 
    return;
  }
  #line 814 
  rtnl_lock();
  #line 815 
  ice_dis_vsi(pf_vsi,(_Bool)1);
  #line 817 
  ret = (int)ice_query_port_ets(pf->hw.port_info,& buf,(unsigned short)64,
                            (struct ice_sq_cd *)0);
  #line 818 
  if (ret != 0) {
    #line 819 
    _dev_err(dev,(char *)"Query Port ETS failed\n");
    #line 820 
    rtnl_unlock();
    #line 821 
    return;
  }
  #line 825 
  ice_pf_dcb_recfg(pf);
  #line 827 
  ice_ena_vsi(pf_vsi,(_Bool)1);
  #line 828 
  rtnl_unlock();
  #line 829 
  return;
}

#line 119  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ice/ice.ko/concurrency safety/0/concurrency safety/weaver/ice_dcb_lib.i.aux"
static void cif_set_bit_6(long nr, unsigned long *addr)
{
  #line 122 
  ldv_set_bit(nr,addr);
  #line 123 
  return;
}

#line 126  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ice/ice.ko/concurrency safety/0/concurrency safety/weaver/ice_dcb_lib.i.aux"
static void cif_clear_bit_6(long nr, unsigned long *addr)
{
  #line 129 
  ldv_clear_bit(nr,addr);
  #line 130 
  return;
}

#line 418  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ice/ice.ko/concurrency safety/0/concurrency safety/weaver/ice_dcb_lib.i.aux"
static void *kzalloc_2(size_t size, gfp_t flags)
{
  #line 421 
  return ldv_kzalloc(size,flags);
}

#line 684  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ice/ice.ko/concurrency safety/0/concurrency safety/weaver/ice_dcb_lib.i.aux"
static void *cif_kmemdup(void *src, size_t len, gfp_t gfp)
{
  #line 687 
  return ldv_kmemdup(src,len,gfp);
}

#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/arch_hweight.h"
__inline static unsigned int __arch_hweight32(unsigned int w)
{
  #line 17 
  unsigned int res;
  #line 18 
  ldv_inline_asm();
  #line 23 
  return res;
}

#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/arch_hweight.h"
__inline static unsigned int __arch_hweight8(unsigned int w)
{
  #line 33 
  return __arch_hweight32(w & 255U);
}

#line 26  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
#line 133  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ice/ice.ko/concurrency safety/0/concurrency safety/weaver/ice_common.i.aux"
static void INIT_LIST_HEAD_2(struct list_head *list);
#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static void __list_del_1(struct list_head *prev, struct list_head *next)
{
  #line 97 
  next->prev = prev;
  {
    #line 107 
    union __anonunion___u_11309 __u = {.__val = next};
    #line 106 
    __write_once_size((void *)(& prev->next),(void *)(& __u.__c),8);
    #line 106 
    struct list_head *tmp = __u.__val;
  }
  #line 108 
  return;
}

#line 129  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static void __list_del_entry_1(struct list_head *entry)
{
  #line 131 
  if (! __list_del_entry_valid(entry)) 
                                       #line 132 
                                       return;
  #line 134 
  __list_del_1(entry->prev,entry->next);
  #line 135 
  return;
}

#line 137  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static void list_del_1(struct list_head *entry)
{
  #line 139 
  __list_del_entry_1(entry);
  #line 140 
  entry->next = (struct list_head *)(-2401263026318606080);
  #line 141 
  entry->prev = (struct list_head *)(-2401263026318606046);
  #line 142 
  return;
}

#line 151  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static void list_replace(struct list_head *old, struct list_head *new)
{
  #line 154 
  new->next = old->next;
  #line 155 
  (new->next)->prev = new;
  #line 156 
  new->prev = old->prev;
  #line 157 
  (new->prev)->next = new;
  #line 158 
  return;
}

#line 160  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static void list_replace_init(struct list_head *old, struct list_head *new)
{
  #line 163 
  list_replace(old,new);
  #line 164 
  INIT_LIST_HEAD_2(old);
  #line 165 
  return;
}

#line 26  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ice/ice.ko/concurrency safety/0/concurrency safety/weaver/ice_common.i.aux"
#line 812 
static void cif_mutex_lock_ice_global_cfg_lock_sw(struct mutex *lock);
#line 26 
#line 826 
static void cif_mutex_lock_sched_lock_of_ice_port_info(struct mutex *lock);
#line 185  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mutex.h"
#line 819  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ice/ice.ko/concurrency safety/0/concurrency safety/weaver/ice_common.i.aux"
static void cif_mutex_unlock_ice_global_cfg_lock_sw(struct mutex *lock);
#line 185  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mutex.h"
#line 833  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ice/ice.ko/concurrency safety/0/concurrency safety/weaver/ice_common.i.aux"
static void cif_mutex_unlock_sched_lock_of_ice_port_info(struct mutex *lock);
#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/io.h"
__inline static u64 readq(void *addr)
{
  #line 95 
  u64 ret;
  #line 96 
  ldv_inline_asm();
  #line 95 
  return ret;
}

#line 6  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/delay.h"
#line 6 
void __bad_udelay(void);
#line 9 
#line 9 
void __udelay(unsigned long);
#line 937  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
#line 798  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ice/ice.ko/concurrency safety/0/concurrency safety/weaver/ice_common.i.aux"
static void *cif_devm_kzalloc_4(struct device *dev, size_t size, gfp_t flags);
#line 952  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
#line 805  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ice/ice.ko/concurrency safety/0/concurrency safety/weaver/ice_common.i.aux"
static void *cif_devm_kcalloc_3(struct device *dev, size_t n, size_t size, gfp_t flags);
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_type.h"
__inline static bool ice_is_tc_ena(unsigned long bitmap, u8 tc)
{
  #line 19 
  return test_bit((long)tc,& bitmap);
}

#line 58  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_sched.h"
#line 58 
enum ice_status ice_aq_query_sched_elems(struct ice_hw *hw, u16 elems_req, struct ice_aqc_get_elem *buf, u16 buf_size, u16 *elems_ret, struct ice_sq_cd *cd);
#line 62 
#line 62 
enum ice_status ice_sched_query_res_alloc(struct ice_hw *hw);
#line 65 
#line 65 
void ice_sched_clear_agg(struct ice_hw *hw);
#line 68 
#line 68 
struct ice_sched_node *ice_sched_find_node_by_teid(struct ice_sched_node *start_node, u32 teid);
#line 70 
#line 70 
enum ice_status ice_sched_add_node(struct ice_port_info *pi, u8 layer, struct ice_aqc_txsched_elem_data *info);
#line 72 
#line 72 
void ice_free_sched_node(struct ice_port_info *pi, struct ice_sched_node *node);
#line 73 
#line 73 
struct ice_sched_node *ice_sched_get_tc_node(struct ice_port_info *pi, u8 tc);
#line 75 
#line 75 
struct ice_sched_node *ice_sched_get_free_qparent(struct ice_port_info *pi, u16 vsi_handle, u8 tc, u8 owner);
#line 78 
#line 78 
enum ice_status ice_sched_cfg_vsi(struct ice_port_info *pi, u16 vsi_handle, u8 tc, u16 maxqs, u8 owner, bool enable);
#line 87 
#line 87 
enum ice_status ice_cfg_rl_burst_size(struct ice_hw *hw, u32 bytes);
#line 89 
#line 89 
enum ice_status ice_sched_replay_q_bw(struct ice_port_info *pi, struct ice_q_ctx *q_ctx);
#line 7  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_nvm.h"
#line 7 
enum ice_status ice_read_sr_word(struct ice_hw *hw, u16 offset, u16 *data);
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_flex_pipe.h"
#line 24 
enum ice_status ice_init_hw_tbls(struct ice_hw *hw);
#line 25 
#line 25 
void ice_free_seg(struct ice_hw *hw);
#line 28 
#line 28 
void ice_free_hw_tbls(struct ice_hw *hw);
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_common.h"
#line 1084  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_common.c"
enum ice_status ice_get_pfa_module_tlv(struct ice_hw *hw, u16 *module_tlv, u16 *module_tlv_len, u16 module_type);
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_common.h"
#line 1526  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_common.c"
enum ice_status ice_acquire_res(struct ice_hw *hw, enum ice_aq_res_ids res, enum ice_aq_res_access_type access, u32 timeout);
#line 36  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_common.h"
#line 1585  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_common.c"
void ice_release_res(struct ice_hw *hw, enum ice_aq_res_ids res);
#line 37  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_common.h"
#line 37 
enum ice_status ice_init_nvm(struct ice_hw *hw);
#line 75 
#line 1260  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_common.c"
struct mutex ice_global_cfg_lock_sw;
#line 90  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_common.h"
#line 2169  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_common.c"
void ice_update_phy_type(u64 *phy_type_low, u64 *phy_type_high, u16 link_speeds_bitmap);
#line 100  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_common.h"
#line 2293  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_common.c"
enum ice_status ice_set_fc(struct ice_port_info *pi, u8 *aq_failures, bool ena_auto_link_update);
#line 103  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_common.h"
#line 2418  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_common.c"
void ice_cfg_phy_fec(struct ice_aqc_set_phy_cfg_data *cfg, enum ice_fec_mode fec);
#line 105  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_common.h"
#line 2393  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_common.c"
void ice_copy_phy_caps_to_cfg(struct ice_aqc_get_phy_caps_data *caps, struct ice_aqc_set_phy_cfg_data *cfg);
#line 117  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_common.h"
#line 2546  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_common.c"
enum ice_status ice_aq_set_mac_loopback(struct ice_hw *hw, bool ena_lpbk, struct ice_sq_cd *cd);
#line 120  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_common.h"
#line 2569  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_common.c"
enum ice_status ice_aq_set_port_id_led(struct ice_port_info *pi, bool is_orig_mode, struct ice_sq_cd *cd);
#line 123  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_common.h"
#line 2604  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_common.c"
enum ice_status ice_aq_sff_eeprom(struct ice_hw *hw, u16 lport, u8 bus_addr, u16 mem_addr, u8 page, u8 set_page, u8 *data, u8 length, bool write, struct ice_sq_cd *cd);
#line 143  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_common.h"
#line 3228  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_common.c"
struct ice_q_ctx *ice_get_lan_q_ctx(struct ice_hw *hw, u16 vsi_handle, u8 tc, u16 q_handle);
#line 154  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_common.h"
#line 3616  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_common.c"
enum ice_status ice_sched_query_elem(struct ice_hw *hw, u32 node_teid, struct ice_aqc_get_elem *buf);
#line 36  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_common.c"
static enum ice_status ice_set_mac_type(struct ice_hw *hw)
{
  #line 38 
  if ((unsigned int)hw->vendor_id != 32902U) 
                                             #line 39 
                                             return ICE_ERR_DEVICE_NOT_SUPPORTED;
  #line 41 
  hw->mac_type = ICE_MAC_GENERIC;
  #line 42 
  return ICE_SUCCESS;
}

#line 52  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_common.c"
void ice_dev_onetime_setup(struct ice_hw *hw)
{
  #line 56 
  ;
  #line 56 
  writel(readl((void *)(hw->hw_addr + 646528U)),(void *)(hw->hw_addr + 2301568U));
  #line 57 
  return;
}

#line 66  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_common.c"
enum ice_status ice_clear_pf_cfg(struct ice_hw *hw)
{
  #line 68 
  struct ice_aq_desc desc;
  #line 70 
  ice_fill_dflt_direct_cmd_desc(& desc,(unsigned short)676);
  #line 72 
  return ice_aq_send_cmd(hw,& desc,(void *)0,(unsigned short)0,
                      (struct ice_sq_cd *)0);
}

#line 90  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_common.c"
static enum ice_status ice_aq_manage_mac_read(struct ice_hw *hw, void *buf, u16 buf_size, struct ice_sq_cd *cd)
{
  #line 93 
  struct ice_aqc_manage_mac_read_resp *resp;
  #line 94 
  struct ice_aqc_manage_mac_read *cmd;
  #line 95 
  struct ice_aq_desc desc;
  #line 96 
  enum ice_status status;
  #line 97 
  u16 flags;
  #line 98 
  u8 i;
  #line 100 
  cmd = & desc.params.mac_read;
  #line 102 
  if ((unsigned int)buf_size <= 7U) 
                                    #line 103 
                                    return ICE_ERR_BUF_TOO_SHORT;
  #line 105 
  ice_fill_dflt_direct_cmd_desc(& desc,(unsigned short)263);
  #line 107 
  status = ice_aq_send_cmd(hw,& desc,buf,(unsigned short)((int)buf_size),cd);
  #line 108 
  if (status != ICE_SUCCESS) 
                             #line 109 
                             return status;
  #line 111 
  resp = (struct ice_aqc_manage_mac_read_resp *)buf;
  #line 112 
  flags = (unsigned short)((unsigned int)cmd->flags & 240U);
  #line 114 
  if (((unsigned long)flags & 16UL) == 0UL) {
    {
      #line 115 
      bool branch;
      #line 115 
      struct _ddebug __UNIQUE_ID_ddebug536 = {.modname = (char *)"ice", .function = (char *)"ice_aq_manage_mac_read", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_common.c", .format = (char *)"got invalid MAC address\n", .lineno = (unsigned int)115U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 115 
      branch = arch_static_branch(& __UNIQUE_ID_ddebug536.key.dd_key_false.key,(_Bool)0);
      #line 115 
      if ((long)((long)((int)branch != 0)) != 0L) {
        #line 115 
        void *__mptr;
        #line 115 
        __mptr = (void *)hw;
        #line 115 
        __dynamic_dev_dbg(& __UNIQUE_ID_ddebug536,& (((struct ice_pf *)(__mptr + 18446744073709549512U))->pdev)->dev,(char *)"got invalid MAC address\n");
      }
    }
    #line 116 
    return ICE_ERR_CFG;
  }
  #line 120 
  i = (unsigned char)0U;
  #line 120 
  while ((int)cmd->num_addr > (int)i) {
    #line 121 
    if ((unsigned int)(resp + (unsigned long)i)->addr_type == 0U) {
      #line 122 
      ether_addr_copy((u8 *)(& (hw->port_info)->mac.lan_addr),(u8 *)(& (resp + (unsigned long)i)->mac_addr));
      #line 124 
      ether_addr_copy((u8 *)(& (hw->port_info)->mac.perm_addr),(u8 *)(& (resp + (unsigned long)i)->mac_addr));
      #line 126 
      break;
    }
    #line 120 
    i = (u8)((int)i + 1);
  }
  #line 129 
  return ICE_SUCCESS;
}

#line 143  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_common.c"
enum ice_status ice_aq_get_phy_caps(struct ice_port_info *pi, bool qual_mods, u8 report_mode, struct ice_aqc_get_phy_caps_data *pcaps, struct ice_sq_cd *cd)
{
  #line 147 
  struct ice_aqc_get_phy_caps *cmd;
  #line 149 
  struct ice_aq_desc desc;
  #line 150 
  enum ice_status status;
  #line 148 
  u16 pcaps_size = (unsigned short)560U;
  #line 152 
  cmd = & desc.params.get_phy;
  #line 154 
  if ((pcaps == (struct ice_aqc_get_phy_caps_data *)0 || ((int)report_mode & -7) != 0) || pi == (struct ice_port_info *)0) 
    #line 155 
    return ICE_ERR_PARAM;
  #line 157 
  ice_fill_dflt_direct_cmd_desc(& desc,(unsigned short)1536);
  #line 159 
  if ((int)qual_mods != 0) 
                           #line 160 
                           cmd->param0 = (unsigned short)((unsigned int)cmd->param0 | 1U);
  #line 162 
  cmd->param0 = (unsigned short)((int)cmd->param0 | (int)((unsigned short)report_mode));
  #line 163 
  status = ice_aq_send_cmd(pi->hw,& desc,(void *)pcaps,(unsigned short)((int)pcaps_size),cd);
  #line 165 
  if (status == ICE_SUCCESS && (unsigned int)report_mode == 2U) {
    #line 166 
    pi->phy.phy_type_low = pcaps->phy_type_low;
    #line 167 
    pi->phy.phy_type_high = pcaps->phy_type_high;
  }
  #line 170 
  return status;
}

#line 177  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_common.c"
static enum ice_media_type ice_get_media_type(struct ice_port_info *pi)
{
  #line 179 
  struct ice_link_status *hw_link_info;
  #line 181 
  if (pi == (struct ice_port_info *)0) 
                                       #line 182 
                                       return ICE_MEDIA_UNKNOWN;
  #line 184 
  hw_link_info = & pi->phy.link_info;
  #line 185 
  if (hw_link_info->phy_type_low != 0ULL && hw_link_info->phy_type_high != 0ULL) 
    #line 187 
    return ICE_MEDIA_UNKNOWN;
  #line 189 
  if (hw_link_info->phy_type_low != 0ULL) 
    #line 190 
    switch (hw_link_info->phy_type_low) {
      #line 191 
      case (u64)8: 
                   #line 191 
      ;
      #line 192 
      case (u64)16: 
                    #line 192 
      ;
      #line 193 
      case (u64)16384: 
                       #line 193 
      ;
      #line 194 
      case (u64)32768: 
                       #line 194 
      ;
      #line 195 
      case (u64)262144: 
                        #line 195 
      ;
      #line 196 
      case (u64)8388608: 
                         #line 196 
      ;
      #line 197 
      case (u64)16777216: 
                          #line 197 
      ;
      #line 198 
      case (u64)536870912: 
                           #line 198 
      ;
      #line 199 
      case (u64)(-2147483648): 
                               #line 199 
      ;
      #line 200 
      case (u64)0: 
                   #line 200 
      ;
      #line 201 
      case (u64)0: 
                   #line 201 
      ;
      #line 202 
      case (u64)0: 
                   #line 202 
      ;
      #line 203 
      case (u64)0: 
                   #line 203 
      ;
      #line 204 
      case (u64)0: 
                   #line 204 
      ;
      #line 205 
      case (u64)0: 
                   #line 205 
      ;
      #line 206 
      case (u64)0: 
                   #line 206 
      ;
      #line 207 
      case (u64)0: 
                   #line 207 
      ;
      #line 208 
      case (u64)0: 
                   #line 208 
      ;
      #line 209 
      case (u64)0: 
                   #line 209 
      ;
      #line 210 
      return ICE_MEDIA_FIBER;
      #line 211 
      case (u64)1: 
                   #line 211 
      ;
      #line 212 
      case (u64)4: 
                   #line 212 
      ;
      #line 213 
      case (u64)128: 
                     #line 213 
      ;
      #line 214 
      case (u64)1024: 
                      #line 214 
      ;
      #line 215 
      case (u64)4096: 
                      #line 215 
      ;
      #line 216 
      case (u64)524288: 
                        #line 216 
      ;
      #line 217 
      return ICE_MEDIA_BASET;
      #line 218 
      case (u64)8192: 
                      #line 218 
      ;
      #line 219 
      case (u64)1048576: 
                         #line 219 
      ;
      #line 220 
      case (u64)2097152: 
                         #line 220 
      ;
      #line 221 
      case (u64)4194304: 
                         #line 221 
      ;
      #line 222 
      case (u64)1073741824: 
                            #line 222 
      ;
      #line 223 
      case (u64)0: 
                   #line 223 
      ;
      #line 224 
      case (u64)0: 
                   #line 224 
      ;
      #line 225 
      case (u64)0: 
                   #line 225 
      ;
      #line 226 
      case (u64)0: 
                   #line 226 
      ;
      #line 227 
      case (u64)0: 
                   #line 227 
      ;
      #line 228 
      return ICE_MEDIA_DA;
      #line 229 
      case (u64)32: 
                    #line 229 
      ;
      #line 230 
      case (u64)512: 
                     #line 230 
      ;
      #line 231 
      case (u64)256: 
                     #line 231 
      ;
      #line 232 
      case (u64)2048: 
                      #line 232 
      ;
      #line 233 
      case (u64)65536: 
                       #line 233 
      ;
      #line 234 
      case (u64)33554432: 
                          #line 234 
      ;
      #line 235 
      case (u64)134217728: 
                           #line 235 
      ;
      #line 236 
      case (u64)67108864: 
                          #line 236 
      ;
      #line 237 
      case (u64)0: 
                   #line 237 
      ;
      #line 238 
      case (u64)0: 
                   #line 238 
      ;
      #line 239 
      case (u64)0: 
                   #line 239 
      ;
      #line 240 
      case (u64)0: 
                   #line 240 
      ;
      #line 241 
      case (u64)0: 
                   #line 241 
      ;
      #line 242 
      return ICE_MEDIA_BACKPLANE;
    }
  else 
    #line 245 
    switch (hw_link_info->phy_type_high) {
      #line 246 
      case (u64)1: 
                   #line 246 
      ;
      #line 247 
      return ICE_MEDIA_BACKPLANE;
    }
  #line 250 
  return ICE_MEDIA_UNKNOWN;
}

#line 263  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_common.c"
enum ice_status ice_aq_get_link_info(struct ice_port_info *pi, bool ena_lse, struct ice_link_status *link, struct ice_sq_cd *cd)
{
  #line 267 
  struct ice_aqc_get_link_status *resp;
  #line 268 
  struct ice_link_status *li_old;
  #line 268 
  struct ice_link_status *li;
  #line 269 
  enum ice_media_type *hw_media_type;
  #line 270 
  struct ice_fc_info *hw_fc_info;
  #line 271 
  bool tx_pause;
  #line 271 
  bool rx_pause;
  #line 272 
  struct ice_aq_desc desc;
  #line 273 
  enum ice_status status;
  #line 274 
  struct ice_hw *hw;
  #line 275 
  u16 cmd_flags;
  #line 266 
  struct ice_aqc_get_link_status_data link_data = {.topo_media_conflict = (unsigned char)0U, .reserved1 = (unsigned char)0, .link_info = (unsigned char)0, .an_info = (unsigned char)0, .ext_info = (unsigned char)0, .reserved2 = (unsigned char)0, .max_frame_size = (unsigned short)0, .cfg = (unsigned char)0, .power_desc = (unsigned char)0, .link_speed = (unsigned short)0, .reserved3 = 0U, .phy_type_low = 0ULL, .phy_type_high = 0ULL};
  #line 277 
  if (pi == (struct ice_port_info *)0) 
                                       #line 278 
                                       return ICE_ERR_PARAM;
  #line 279 
  hw = pi->hw;
  #line 280 
  li_old = & pi->phy.link_info_old;
  #line 281 
  hw_media_type = & pi->phy.media_type;
  #line 282 
  li = & pi->phy.link_info;
  #line 283 
  hw_fc_info = & pi->fc;
  #line 285 
  ice_fill_dflt_direct_cmd_desc(& desc,(unsigned short)1543);
  #line 286 
  if ((int)ena_lse != 0) 
                         #line 286 
                         cmd_flags = (unsigned short)3U; else 
                                                              #line 286 
                                                              cmd_flags = (unsigned short)2U;
  #line 287 
  resp = & desc.params.get_link_status;
  #line 288 
  resp->cmd_flags = cmd_flags;
  #line 289 
  resp->lport_num = pi->lport;
  #line 291 
  status = ice_aq_send_cmd(hw,& desc,(void *)(& link_data),(unsigned short)32,cd);
  #line 293 
  if (status != ICE_SUCCESS) 
                             #line 294 
                             return status;
  #line 297 
  *li_old = *li;
  #line 300 
  li->link_speed = link_data.link_speed;
  #line 301 
  li->phy_type_low = link_data.phy_type_low;
  #line 302 
  li->phy_type_high = link_data.phy_type_high;
  #line 303 
  *hw_media_type = ice_get_media_type(pi);
  #line 304 
  li->link_info = link_data.link_info;
  #line 305 
  li->an_info = link_data.an_info;
  #line 306 
  li->ext_info = link_data.ext_info;
  #line 307 
  li->max_frame_size = link_data.max_frame_size;
  #line 308 
  li->fec_info = (unsigned char)((unsigned int)link_data.cfg & 7U);
  #line 309 
  li->topo_media_conflict = link_data.topo_media_conflict;
  #line 310 
  li->pacing = (unsigned char)((unsigned int)link_data.cfg & 248U);
  #line 314 
  tx_pause = (_Bool)(((unsigned long)link_data.an_info & 32UL) != 0UL);
  #line 315 
  rx_pause = (_Bool)(((unsigned long)link_data.an_info & 64UL) != 0UL);
  #line 316 
  if ((int)tx_pause != 0 && (int)rx_pause != 0) 
                                                #line 317 
                                                hw_fc_info->current_mode = ICE_FC_FULL;
  else 
    #line 318 
    if ((int)tx_pause != 0) 
                            #line 319 
                            hw_fc_info->current_mode = ICE_FC_TX_PAUSE;
    else 
      #line 320 
      if ((int)rx_pause != 0) 
                              #line 321 
                              hw_fc_info->current_mode = ICE_FC_RX_PAUSE; else 
                                                                    #line 323 
                                                                    hw_fc_info->current_mode = ICE_FC_NONE;
  #line 325 
  li->lse_ena = (unsigned char)(((int)resp->cmd_flags & 1) != 0);
  {
    #line 327 
    bool branch;
    #line 327 
    struct _ddebug __UNIQUE_ID_ddebug537 = {.modname = (char *)"ice", .function = (char *)"ice_aq_get_link_info", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_common.c", .format = (char *)"link_speed = 0x%x\n", .lineno = (unsigned int)327U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 327 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug537.key.dd_key_false.key,(_Bool)0);
    #line 327 
    if ((long)((long)((int)branch != 0)) != 0L) {
      #line 327 
      void *__mptr;
      #line 327 
      ;
      #line 327 
      __mptr = (void *)hw;
      #line 327 
      __dynamic_dev_dbg(& __UNIQUE_ID_ddebug537,& (((struct ice_pf *)(__mptr + 18446744073709549512U))->pdev)->dev,(char *)"link_speed = 0x%x\n",(int)li->link_speed);
    }
  }
  {
    #line 328 
    bool branch_0;
    #line 328 
    struct _ddebug __UNIQUE_ID_ddebug538 = {.modname = (char *)"ice", .function = (char *)"ice_aq_get_link_info", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_common.c", .format = (char *)"phy_type_low = 0x%llx\n", .lineno = (unsigned int)328U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 328 
    branch_0 = arch_static_branch(& __UNIQUE_ID_ddebug538.key.dd_key_false.key,(_Bool)0);
    #line 328 
    if ((long)((long)((int)branch_0 != 0)) != 0L) {
      #line 328 
      void *__mptr_0;
      #line 328 
      ;
      #line 328 
      __mptr_0 = (void *)hw;
      #line 328 
      __dynamic_dev_dbg(& __UNIQUE_ID_ddebug538,& (((struct ice_pf *)(__mptr_0 + 18446744073709549512U))->pdev)->dev,(char *)"phy_type_low = 0x%llx\n",li->phy_type_low);
    }
  }
  {
    #line 330 
    bool branch_1;
    #line 330 
    struct _ddebug __UNIQUE_ID_ddebug539 = {.modname = (char *)"ice", .function = (char *)"ice_aq_get_link_info", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_common.c", .format = (char *)"phy_type_high = 0x%llx\n", .lineno = (unsigned int)330U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 330 
    branch_1 = arch_static_branch(& __UNIQUE_ID_ddebug539.key.dd_key_false.key,(_Bool)0);
    #line 330 
    if ((long)((long)((int)branch_1 != 0)) != 0L) {
      #line 330 
      void *__mptr_1;
      #line 330 
      ;
      #line 330 
      __mptr_1 = (void *)hw;
      #line 330 
      __dynamic_dev_dbg(& __UNIQUE_ID_ddebug539,& (((struct ice_pf *)(__mptr_1 + 18446744073709549512U))->pdev)->dev,(char *)"phy_type_high = 0x%llx\n",li->phy_type_high);
    }
  }
  {
    #line 332 
    bool branch_2;
    #line 332 
    struct _ddebug __UNIQUE_ID_ddebug540 = {.modname = (char *)"ice", .function = (char *)"ice_aq_get_link_info", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_common.c", .format = (char *)"media_type = 0x%x\n", .lineno = (unsigned int)332U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 332 
    branch_2 = arch_static_branch(& __UNIQUE_ID_ddebug540.key.dd_key_false.key,(_Bool)0);
    #line 332 
    if ((long)((long)((int)branch_2 != 0)) != 0L) {
      #line 332 
      void *__mptr_2;
      #line 332 
      ;
      #line 332 
      __mptr_2 = (void *)hw;
      #line 332 
      __dynamic_dev_dbg(& __UNIQUE_ID_ddebug540,& (((struct ice_pf *)(__mptr_2 + 18446744073709549512U))->pdev)->dev,(char *)"media_type = 0x%x\n",(unsigned int)*hw_media_type);
    }
  }
  {
    #line 333 
    bool branch_3;
    #line 333 
    struct _ddebug __UNIQUE_ID_ddebug541 = {.modname = (char *)"ice", .function = (char *)"ice_aq_get_link_info", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_common.c", .format = (char *)"link_info = 0x%x\n", .lineno = (unsigned int)333U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 333 
    branch_3 = arch_static_branch(& __UNIQUE_ID_ddebug541.key.dd_key_false.key,(_Bool)0);
    #line 333 
    if ((long)((long)((int)branch_3 != 0)) != 0L) {
      #line 333 
      void *__mptr_3;
      #line 333 
      ;
      #line 333 
      __mptr_3 = (void *)hw;
      #line 333 
      __dynamic_dev_dbg(& __UNIQUE_ID_ddebug541,& (((struct ice_pf *)(__mptr_3 + 18446744073709549512U))->pdev)->dev,(char *)"link_info = 0x%x\n",(int)li->link_info);
    }
  }
  {
    #line 334 
    bool branch_4;
    #line 334 
    struct _ddebug __UNIQUE_ID_ddebug542 = {.modname = (char *)"ice", .function = (char *)"ice_aq_get_link_info", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_common.c", .format = (char *)"an_info = 0x%x\n", .lineno = (unsigned int)334U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 334 
    branch_4 = arch_static_branch(& __UNIQUE_ID_ddebug542.key.dd_key_false.key,(_Bool)0);
    #line 334 
    if ((long)((long)((int)branch_4 != 0)) != 0L) {
      #line 334 
      void *__mptr_4;
      #line 334 
      ;
      #line 334 
      __mptr_4 = (void *)hw;
      #line 334 
      __dynamic_dev_dbg(& __UNIQUE_ID_ddebug542,& (((struct ice_pf *)(__mptr_4 + 18446744073709549512U))->pdev)->dev,(char *)"an_info = 0x%x\n",(int)li->an_info);
    }
  }
  {
    #line 335 
    bool branch_5;
    #line 335 
    struct _ddebug __UNIQUE_ID_ddebug543 = {.modname = (char *)"ice", .function = (char *)"ice_aq_get_link_info", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_common.c", .format = (char *)"ext_info = 0x%x\n", .lineno = (unsigned int)335U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 335 
    branch_5 = arch_static_branch(& __UNIQUE_ID_ddebug543.key.dd_key_false.key,(_Bool)0);
    #line 335 
    if ((long)((long)((int)branch_5 != 0)) != 0L) {
      #line 335 
      void *__mptr_5;
      #line 335 
      ;
      #line 335 
      __mptr_5 = (void *)hw;
      #line 335 
      __dynamic_dev_dbg(& __UNIQUE_ID_ddebug543,& (((struct ice_pf *)(__mptr_5 + 18446744073709549512U))->pdev)->dev,(char *)"ext_info = 0x%x\n",(int)li->ext_info);
    }
  }
  {
    #line 336 
    bool branch_6;
    #line 336 
    struct _ddebug __UNIQUE_ID_ddebug544 = {.modname = (char *)"ice", .function = (char *)"ice_aq_get_link_info", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_common.c", .format = (char *)"lse_ena = 0x%x\n", .lineno = (unsigned int)336U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 336 
    branch_6 = arch_static_branch(& __UNIQUE_ID_ddebug544.key.dd_key_false.key,(_Bool)0);
    #line 336 
    if ((long)((long)((int)branch_6 != 0)) != 0L) {
      #line 336 
      void *__mptr_6;
      #line 336 
      ;
      #line 336 
      __mptr_6 = (void *)hw;
      #line 336 
      __dynamic_dev_dbg(& __UNIQUE_ID_ddebug544,& (((struct ice_pf *)(__mptr_6 + 18446744073709549512U))->pdev)->dev,(char *)"lse_ena = 0x%x\n",(int)li->lse_ena);
    }
  }
  {
    #line 337 
    bool branch_7;
    #line 337 
    struct _ddebug __UNIQUE_ID_ddebug545 = {.modname = (char *)"ice", .function = (char *)"ice_aq_get_link_info", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_common.c", .format = (char *)"max_frame = 0x%x\n", .lineno = (unsigned int)337U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 337 
    branch_7 = arch_static_branch(& __UNIQUE_ID_ddebug545.key.dd_key_false.key,(_Bool)0);
    #line 337 
    if ((long)((long)((int)branch_7 != 0)) != 0L) {
      #line 337 
      void *__mptr_7;
      #line 337 
      ;
      #line 337 
      __mptr_7 = (void *)hw;
      #line 337 
      __dynamic_dev_dbg(& __UNIQUE_ID_ddebug545,& (((struct ice_pf *)(__mptr_7 + 18446744073709549512U))->pdev)->dev,(char *)"max_frame = 0x%x\n",(int)li->max_frame_size);
    }
  }
  {
    #line 338 
    bool branch_8;
    #line 338 
    struct _ddebug __UNIQUE_ID_ddebug546 = {.modname = (char *)"ice", .function = (char *)"ice_aq_get_link_info", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_common.c", .format = (char *)"pacing = 0x%x\n", .lineno = (unsigned int)338U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 338 
    branch_8 = arch_static_branch(& __UNIQUE_ID_ddebug546.key.dd_key_false.key,(_Bool)0);
    #line 338 
    if ((long)((long)((int)branch_8 != 0)) != 0L) {
      #line 338 
      void *__mptr_8;
      #line 338 
      ;
      #line 338 
      __mptr_8 = (void *)hw;
      #line 338 
      __dynamic_dev_dbg(& __UNIQUE_ID_ddebug546,& (((struct ice_pf *)(__mptr_8 + 18446744073709549512U))->pdev)->dev,(char *)"pacing = 0x%x\n",(int)li->pacing);
    }
  }
  #line 341 
  if (link != (struct ice_link_status *)0) 
                                           #line 342 
                                           *link = *li;
  #line 345 
  pi->phy.get_link_info = (unsigned char)0U;
  #line 347 
  return ICE_SUCCESS;
}

#line 357  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_common.c"
static void ice_init_flex_flags(struct ice_hw *hw, enum ice_rxdid prof_id)
{
  #line 359 
  u8 idx = (unsigned char)0U;
  #line 367 
  switch ((unsigned int)prof_id) {
    #line 374 
    u8 tmp;
    #line 380 
    u8 tmp_0;
    #line 382 
    u8 tmp_1;
    #line 385 
    u8 tmp_2;
    #line 372 
    case (unsigned int)2: 
                          #line 372 
    ;
    #line 373 
    case (unsigned int)6: 
                          #line 373 
    ;
    #line 374 
    tmp = idx;
    #line 374 
    idx = (u8)((int)idx + 1);
    #line 374 
    ;
    #line 374 
    writel(536881432U,(void *)(hw->hw_addr + (unsigned long)(((unsigned int)prof_id * 4U + (unsigned int)((int)tmp * 256)) + 4575232U)));
    #line 380 
    tmp_0 = idx;
    #line 380 
    idx = (u8)((int)idx + 1);
    #line 380 
    ;
    #line 380 
    writel(8737U,(void *)(hw->hw_addr + (unsigned long)(((unsigned int)prof_id * 4U + (unsigned int)((int)tmp_0 * 256)) + 4575232U)));
    #line 382 
    tmp_1 = idx;
    #line 382 
    idx = (u8)((int)idx + 1);
    #line 382 
    ;
    #line 382 
    writel(252575744U,(void *)(hw->hw_addr + (unsigned long)(((unsigned int)prof_id * 4U + (unsigned int)((int)tmp_1 * 256)) + 4575232U)));
    #line 385 
    tmp_2 = idx;
    #line 385 
    idx = (u8)((int)idx + 1);
    #line 385 
    ;
    #line 385 
    writel(638981904U,(void *)(hw->hw_addr + (unsigned long)(((unsigned int)prof_id * 4U + (unsigned int)((int)tmp_2 * 256)) + 4575232U)));
    #line 388 
    writel(10279U,(void *)(hw->hw_addr + (unsigned long)(((unsigned int)prof_id * 4U + (unsigned int)((int)idx * 256)) + 4575232U)));
    #line 390 
    break;
    #line 392 
    default: 
             #line 392 
    ;
    {
      #line 393 
      bool branch;
      #line 393 
      struct _ddebug __UNIQUE_ID_ddebug547 = {.modname = (char *)"ice", .function = (char *)"ice_init_flex_flags", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_common.c", .format = (char *)"Flag programming for profile ID %d not supported\n", .lineno = (unsigned int)393U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 393 
      branch = arch_static_branch(& __UNIQUE_ID_ddebug547.key.dd_key_false.key,(_Bool)0);
      #line 393 
      if ((long)((long)((int)branch != 0)) != 0L) {
        #line 393 
        void *__mptr;
        #line 393 
        ;
        #line 393 
        __mptr = (void *)hw;
        #line 393 
        __dynamic_dev_dbg(& __UNIQUE_ID_ddebug547,& (((struct ice_pf *)(__mptr + 18446744073709549512U))->pdev)->dev,(char *)"Flag programming for profile ID %d not supported\n",(unsigned int)prof_id);
      }
    }
  }
  #line 396 
  return;
}

#line 406  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_common.c"
static void ice_init_flex_flds(struct ice_hw *hw, enum ice_rxdid prof_id)
{
  #line 408 
  enum ice_flex_rx_mdid mdid;
  #line 410 
  switch ((unsigned int)prof_id) {
    #line 411 
    case (unsigned int)2: 
                          #line 411 
    ;
    #line 412 
    case (unsigned int)6: 
                          #line 412 
    ;
    #line 413 
    writel(1073741880U,(void *)(hw->hw_addr + (unsigned long)(((unsigned int)prof_id + 1143296U) * 4U)));
    #line 414 
    writel(1073741881U,(void *)(hw->hw_addr + (unsigned long)(((unsigned int)prof_id + 1143360U) * 4U)));
    #line 415 
    writel(1073741829U,(void *)(hw->hw_addr + (unsigned long)(((unsigned int)prof_id + 1143424U) * 4U)));
    #line 417 
    if (prof_id == (unsigned int)ICE_RXDID_FLEX_NIC_2) 
                                                       #line 417 
                                                       mdid = ICE_RX_MDID_SRC_VSI; else 
                                                                    #line 417 
                                                                    mdid = ICE_RX_MDID_FLOW_ID_HIGH;
    #line 420 
    writel(((unsigned int)mdid & 255U) | 1073741824U,(void *)(hw->hw_addr + (unsigned long)(((unsigned int)prof_id + 1143488U) * 4U)));
    #line 422 
    ice_init_flex_flags(hw,prof_id);
    #line 423 
    break;
    #line 425 
    default: 
             #line 425 
    ;
    {
      #line 426 
      bool branch;
      #line 426 
      struct _ddebug __UNIQUE_ID_ddebug548 = {.modname = (char *)"ice", .function = (char *)"ice_init_flex_flds", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_common.c", .format = (char *)"Field init for profile ID %d not supported\n", .lineno = (unsigned int)426U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 426 
      branch = arch_static_branch(& __UNIQUE_ID_ddebug548.key.dd_key_false.key,(_Bool)0);
      #line 426 
      if ((long)((long)((int)branch != 0)) != 0L) {
        #line 426 
        void *__mptr;
        #line 426 
        ;
        #line 426 
        __mptr = (void *)hw;
        #line 426 
        __dynamic_dev_dbg(& __UNIQUE_ID_ddebug548,& (((struct ice_pf *)(__mptr + 18446744073709549512U))->pdev)->dev,(char *)"Field init for profile ID %d not supported\n",(unsigned int)prof_id);
      }
    }
  }
  #line 429 
  return;
}

#line 436  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_common.c"
static enum ice_status ice_init_fltr_mgmt_struct(struct ice_hw *hw)
{
  #line 440 
  void *__mptr;
  #line 438 
  struct ice_switch_info *sw;
  #line 440 
  __mptr = (void *)hw;
  #line 440 
  hw->switch_info = (struct ice_switch_info *)cif_devm_kzalloc_4(& (((struct ice_pf *)(__mptr + 18446744073709549512U))->pdev)->dev,
                           24UL,3264U);
  #line 442 
  sw = hw->switch_info;
  #line 444 
  if (sw == (struct ice_switch_info *)0) 
                                         #line 445 
                                         return ICE_ERR_NO_MEMORY;
  #line 447 
  INIT_LIST_HEAD_2(& sw->vsi_list_map_head);
  #line 449 
  return ice_init_def_sw_recp(hw);
}

#line 456  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_common.c"
static void ice_cleanup_fltr_mgmt_struct(struct ice_hw *hw)
{
  #line 483 
  void *__mptr_8;
  #line 464 
  void *__mptr;
  #line 464 
  void *__mptr_0;
  #line 482 
  void *__mptr_7;
  #line 459 
  struct ice_vsi_list_map_info *v_pos_map;
  #line 460 
  struct ice_vsi_list_map_info *v_tmp_map;
  #line 461 
  struct ice_sw_recipe *recps;
  #line 462 
  u8 i;
  #line 458 
  struct ice_switch_info *sw = hw->switch_info;
  #line 464 
  __mptr = (void *)sw->vsi_list_map_head.next;
  #line 464 
  v_pos_map = ((struct ice_vsi_list_map_info *)__mptr);
  #line 464 
  __mptr_0 = (void *)v_pos_map->list_entry.next;
  #line 465 
  v_tmp_map = ((struct ice_vsi_list_map_info *)__mptr_0);
  #line 464 
  while ((void *)v_pos_map != (void *)sw) {
    #line 464 
    void *__mptr_1;
    {
      #line 467 
      void *__mptr_2;
      #line 466 
      list_del_1(& v_pos_map->list_entry);
      #line 467 
      ;
      #line 467 
      __mptr_2 = (void *)hw;
      #line 467 
      devm_kfree(& (((struct ice_pf *)(__mptr_2 + 18446744073709549512U))->pdev)->dev,(void *)v_pos_map);
    }
    #line 464 
    v_pos_map = v_tmp_map;
    #line 464 
    __mptr_1 = (void *)v_tmp_map->list_entry.next;
    #line 464 
    v_tmp_map = ((struct ice_vsi_list_map_info *)__mptr_1);
  }
  #line 469 
  recps = (hw->switch_info)->recp_list;
  #line 470 
  i = (unsigned char)0U;
  #line 470 
  while ((unsigned int)i <= 9U) {
    {
      #line 475 
      void *__mptr_4;
      #line 475 
      void *__mptr_3;
      #line 471 
      struct ice_fltr_mgmt_list_entry *lst_itr;
      #line 471 
      struct ice_fltr_mgmt_list_entry *tmp_entry;
      #line 473 
      (recps + (unsigned long)i)->root_rid = i;
      #line 474 
      mutex_destroy(& (recps + (unsigned long)i)->filt_rule_lock);
      #line 475 
      __mptr_3 = (void *)(recps + (unsigned long)i)->filt_rules.next;
      #line 475 
      lst_itr = ((struct ice_fltr_mgmt_list_entry *)(__mptr_3 + 18446744073709551600U));
      #line 475 
      __mptr_4 = (void *)lst_itr->list_entry.next;
      #line 476 
      tmp_entry = ((struct ice_fltr_mgmt_list_entry *)(__mptr_4 + 18446744073709551600U));
      #line 475 
      while (& lst_itr->list_entry != & (recps + (unsigned long)i)->filt_rules) {
        #line 475 
        void *__mptr_5;
        {
          #line 478 
          void *__mptr_6;
          #line 477 
          list_del_1(& lst_itr->list_entry);
          #line 478 
          ;
          #line 478 
          __mptr_6 = (void *)hw;
          #line 478 
          devm_kfree(& (((struct ice_pf *)(__mptr_6 + 18446744073709549512U))->pdev)->dev,(void *)lst_itr);
        }
        #line 475 
        lst_itr = tmp_entry;
        #line 475 
        __mptr_5 = (void *)tmp_entry->list_entry.next;
        #line 475 
        tmp_entry = ((struct ice_fltr_mgmt_list_entry *)(__mptr_5 + 18446744073709551600U));
      }
    }
    #line 470 
    i = (u8)((int)i + 1);
  }
  #line 481 
  ice_rm_all_sw_replay_rule_info(hw);
  #line 482 
  ;
  #line 482 
  __mptr_7 = (void *)hw;
  #line 482 
  devm_kfree(& (((struct ice_pf *)(__mptr_7 + 18446744073709549512U))->pdev)->dev,(void *)sw->recp_list);
  #line 483 
  ;
  #line 483 
  __mptr_8 = (void *)hw;
  #line 483 
  devm_kfree(& (((struct ice_pf *)(__mptr_8 + 18446744073709549512U))->pdev)->dev,(void *)sw);
  #line 484 
  return;
}

#line 495  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_common.c"
static enum ice_status ice_get_fw_log_cfg(struct ice_hw *hw)
{
  #line 503 
  void *__mptr;
  #line 529 
  void *__mptr_0;
  #line 497 
  struct ice_aqc_fw_logging_data *config;
  #line 498 
  struct ice_aq_desc desc;
  #line 499 
  enum ice_status status;
  #line 500 
  u16 size;
  #line 502 
  size = (unsigned short)54U;
  #line 503 
  ;
  #line 503 
  __mptr = (void *)hw;
  #line 503 
  config = (struct ice_aqc_fw_logging_data *)cif_devm_kzalloc_4(& (((struct ice_pf *)(__mptr + 18446744073709549512U))->pdev)->dev,
                           (unsigned long)size,3264U);
  #line 504 
  if (config == (struct ice_aqc_fw_logging_data *)0) 
                                                     #line 505 
                                                     return ICE_ERR_NO_MEMORY;
  #line 507 
  ice_fill_dflt_direct_cmd_desc(& desc,(unsigned short)65296);
  #line 509 
  desc.flags = (unsigned short)((unsigned int)desc.flags | 4096U);
  #line 510 
  desc.flags = (unsigned short)((unsigned int)desc.flags | 1024U);
  #line 512 
  status = ice_aq_send_cmd(hw,& desc,(void *)config,(unsigned short)((int)size),(struct ice_sq_cd *)0);
  #line 513 
  if (status == ICE_SUCCESS) {
    #line 514 
    u16 i;
    #line 517 
    i = (unsigned short)0U;
    #line 517 
    while ((unsigned int)i <= 26U) {
      {
        #line 518 
        u16 v;
        #line 518 
        u16 m;
        #line 518 
        u16 flgs;
        #line 520 
        v = config->entry[(int)i];
        #line 521 
        m = (unsigned short)((unsigned int)v & 4095U);
        #line 522 
        flgs = (unsigned short)((int)v >> 12);
        #line 524 
        if ((unsigned int)m <= 26U) 
                                    #line 525 
                                    hw->fw_log.evnts[(int)m].cur = (unsigned char)flgs;
      }
      #line 517 
      i = (u16)((int)i + 1);
    }
  }
  #line 529 
  ;
  #line 529 
  __mptr_0 = (void *)hw;
  #line 529 
  devm_kfree(& (((struct ice_pf *)(__mptr_0 + 18446744073709549512U))->pdev)->dev,(void *)config);
  #line 531 
  return status;
}

#line 570  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_common.c"
static enum ice_status ice_cfg_fw_log(struct ice_hw *hw, bool enable)
{
  #line 573 
  struct ice_aqc_fw_logging *cmd;
  #line 575 
  u16 i;
  #line 576 
  struct ice_aq_desc desc;
  #line 572 
  struct ice_aqc_fw_logging_data *data = (struct ice_aqc_fw_logging_data *)0;
  #line 574 
  enum ice_status status = 0;
  #line 575 
  u16 chgs = (unsigned short)0U;
  #line 575 
  u16 len = (unsigned short)0U;
  #line 577 
  u8 actv_evnts = (unsigned char)0U;
  #line 578 
  void *buf = (void *)0;
  #line 580 
  if ((unsigned int)hw->fw_log.cq_en == 0U && (unsigned int)hw->fw_log.uart_en == 0U) 
    #line 581 
    return ICE_SUCCESS;
  #line 584 
  if (! enable) 
    #line 584 
    if ((unsigned int)hw->fw_log.actv_evnts == 0U) 
                                                   #line 586 
                                                   return ICE_SUCCESS;
    else {
      #line 585 
      if (! ice_check_sq_alive(hw,& hw->adminq)) 
                                                 #line 586 
                                                 return ICE_SUCCESS;
    }
  #line 589 
  status = ice_get_fw_log_cfg(hw);
  #line 590 
  if (status != ICE_SUCCESS) 
                             #line 591 
                             return status;
  #line 593 
  ice_fill_dflt_direct_cmd_desc(& desc,(unsigned short)65289);
  #line 594 
  cmd = & desc.params.fw_logging;
  #line 597 
  if ((unsigned int)hw->fw_log.cq_en != 0U) 
                                            #line 598 
                                            cmd->log_ctrl_valid = (unsigned char)((unsigned int)cmd->log_ctrl_valid | 1U);
  #line 600 
  if ((unsigned int)hw->fw_log.uart_en != 0U) 
                                              #line 601 
                                              cmd->log_ctrl_valid = (unsigned char)((unsigned int)cmd->log_ctrl_valid | 2U);
  #line 603 
  if ((int)enable != 0) {
    #line 607 
    i = (unsigned short)0U;
    #line 607 
    while ((unsigned int)i <= 26U) {
      {
        #line 608 
        u16 val;
        #line 626 
        u16 tmp_2;
        #line 611 
        actv_evnts = (unsigned char)((int)((unsigned char)hw->fw_log.evnts[(int)i].cfg) | (int)actv_evnts);
        #line 613 
        if ((int)hw->fw_log.evnts[(int)i].cfg == (int)hw->fw_log.evnts[(int)i].cur) 
          #line 614 
          goto __Cont;
        #line 616 
        if (data == (struct ice_aqc_fw_logging_data *)0) {
          #line 617 
          void *__mptr;
          #line 617 
          __mptr = (void *)hw;
          #line 617 
          data = (struct ice_aqc_fw_logging_data *)cif_devm_kzalloc_4(& (((struct ice_pf *)(__mptr + 18446744073709549512U))->pdev)->dev,
                           54UL,3264U);
          #line 620 
          if (data == (struct ice_aqc_fw_logging_data *)0) 
                                                           #line 621 
                                                           return ICE_ERR_NO_MEMORY;
        }
        #line 624 
        val = i;
        #line 625 
        val = (unsigned short)(((int)hw->fw_log.evnts[(int)i].cfg << 12) | (int)val);
        #line 626 
        tmp_2 = chgs;
        #line 626 
        chgs = (u16)((int)chgs + 1);
        #line 626 
        data->entry[(int)tmp_2] = val;
      }
      #line 607 
      __Cont: 
              #line 607 
      i = (u16)((int)i + 1);
    }
    #line 633 
    if ((unsigned int)actv_evnts != 0U) {
      #line 635 
      if ((unsigned int)chgs == 0U) 
                                    #line 636 
                                    goto out;
      #line 638 
      if ((unsigned int)hw->fw_log.cq_en != 0U) 
                                                #line 639 
                                                cmd->log_ctrl = (unsigned char)((unsigned int)cmd->log_ctrl | 1U);
      #line 641 
      if ((unsigned int)hw->fw_log.uart_en != 0U) 
                                                  #line 642 
                                                  cmd->log_ctrl = (unsigned char)((unsigned int)cmd->log_ctrl | 2U);
      #line 644 
      buf = (void *)data;
      #line 645 
      len = (unsigned short)((unsigned int)((unsigned short)((unsigned long)((int)chgs + -1) + 1UL)) * 2U);
      #line 646 
      desc.flags = (unsigned short)((unsigned int)desc.flags | 1024U);
    }
  }
  #line 650 
  status = ice_aq_send_cmd(hw,& desc,buf,(unsigned short)((int)len),(struct ice_sq_cd *)0);
  #line 651 
  if (status == ICE_SUCCESS) {
    #line 658 
    unsigned int tmp_3;
    #line 658 
    if ((int)enable != 0) 
                          #line 658 
                          tmp_3 = (unsigned int)chgs; else 
                                                           #line 658 
                                                           tmp_3 = 27U;
    #line 658 
    u16 cnt = (unsigned short)tmp_3;
    #line 660 
    hw->fw_log.actv_evnts = actv_evnts;
    #line 661 
    i = (unsigned short)0U;
    #line 661 
    while ((int)i < (int)cnt) {
      {
        #line 662 
        u16 v;
        #line 662 
        u16 m;
        #line 664 
        if (! enable) {
          #line 671 
          hw->fw_log.evnts[(int)i].cur = (unsigned char)0U;
          #line 672 
          goto __Cont_0;
        }
        #line 675 
        v = data->entry[(int)i];
        #line 676 
        m = (unsigned short)((unsigned int)v & 4095U);
        #line 677 
        hw->fw_log.evnts[(int)m].cur = hw->fw_log.evnts[(int)m].cfg;
      }
      #line 661 
      __Cont_0: 
                #line 661 
      i = (u16)((int)i + 1);
    }
  }
  #line 681 
  out: 
       #line 681 
  ;
  #line 682 
  if (data != (struct ice_aqc_fw_logging_data *)0) {
    #line 683 
    void *__mptr_0;
    #line 683 
    ;
    #line 683 
    __mptr_0 = (void *)hw;
    #line 683 
    devm_kfree(& (((struct ice_pf *)(__mptr_0 + 18446744073709549512U))->pdev)->dev,(void *)data);
  }
  #line 685 
  return status;
}

#line 696  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_common.c"
void ice_output_fw_log(struct ice_hw *hw, struct ice_aq_desc *desc, void *buf)
{
  {
    #line 698 
    bool branch;
    #line 698 
    struct _ddebug __UNIQUE_ID_ddebug549 = {.modname = (char *)"ice", .function = (char *)"ice_output_fw_log", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_common.c", .format = (char *)"[ FW Log Msg Start ]\n", .lineno = (unsigned int)698U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 698 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug549.key.dd_key_false.key,(_Bool)0);
    #line 698 
    if ((long)((long)((int)branch != 0)) != 0L) {
      #line 698 
      void *__mptr;
      #line 698 
      __mptr = (void *)hw;
      #line 698 
      __dynamic_dev_dbg(& __UNIQUE_ID_ddebug549,& (((struct ice_pf *)(__mptr + 18446744073709549512U))->pdev)->dev,(char *)"[ FW Log Msg Start ]\n");
    }
  }
  {
    #line 699 
    bool branch_0;
    #line 699 
    struct _ddebug __UNIQUE_ID_ddebug550 = {.modname = (char *)"ice", .function = (char *)"ice_output_fw_log", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_common.c", .format = (char *)"ice", .lineno = (unsigned int)699U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 699 
    branch_0 = arch_static_branch(& __UNIQUE_ID_ddebug550.key.dd_key_false.key,(_Bool)0);
    #line 699 
    if ((long)((long)((int)branch_0 != 0)) != 0L) 
                                                  #line 699 
                                                  print_hex_dump((char *)"\001",(char *)"ice",2,16,1,buf,(unsigned long)desc->datalen,(_Bool)0);
  }
  {
    #line 701 
    bool branch_1;
    #line 701 
    struct _ddebug __UNIQUE_ID_ddebug551 = {.modname = (char *)"ice", .function = (char *)"ice_output_fw_log", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_common.c", .format = (char *)"[ FW Log Msg End ]\n", .lineno = (unsigned int)701U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 701 
    branch_1 = arch_static_branch(& __UNIQUE_ID_ddebug551.key.dd_key_false.key,(_Bool)0);
    #line 701 
    if ((long)((long)((int)branch_1 != 0)) != 0L) {
      #line 701 
      void *__mptr_0;
      #line 701 
      __mptr_0 = (void *)hw;
      #line 701 
      __dynamic_dev_dbg(& __UNIQUE_ID_ddebug551,& (((struct ice_pf *)(__mptr_0 + 18446744073709549512U))->pdev)->dev,(char *)"[ FW Log Msg End ]\n");
    }
  }
  #line 703 
  return;
}

#line 711  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_common.c"
static void ice_get_itr_intrl_gran(struct ice_hw *hw)
{
  #line 713 
  u8 max_agg_bw = (unsigned char)((unsigned int)((unsigned char)(readl((void *)(hw->hw_addr + 754188U)) >> 30)) & 3U);
  #line 717 
  switch ((int)max_agg_bw) {
    #line 718 
    case 0: 
            #line 718 
    ;
    #line 719 
    case 1: 
            #line 719 
    ;
    #line 720 
    case 2: 
            #line 720 
    ;
    #line 721 
    hw->itr_gran = (unsigned char)2U;
    #line 722 
    hw->intrl_gran = (unsigned char)4U;
    #line 723 
    break;
    #line 724 
    case 3: 
            #line 724 
    ;
    #line 725 
    hw->itr_gran = (unsigned char)4U;
    #line 726 
    hw->intrl_gran = (unsigned char)8U;
    #line 727 
    break;
  }
  #line 729 
  return;
}

#line 741  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_common.c"
void ice_get_nvm_version(struct ice_hw *hw, u8 *oem_ver, u16 *oem_build, u8 *oem_patch, u8 *ver_hi, u8 *ver_lo)
{
  #line 744 
  struct ice_nvm_info *nvm = & hw->nvm;
  #line 746 
  *oem_ver = (unsigned char)(nvm->oem_ver >> 24);
  #line 747 
  *oem_patch = (unsigned char)nvm->oem_ver;
  #line 748 
  *oem_build = (unsigned short)(nvm->oem_ver >> 8);
  #line 750 
  *ver_hi = (unsigned char)((int)nvm->ver >> 12);
  #line 751 
  *ver_lo = (unsigned char)nvm->ver;
  #line 752 
  return;
}

#line 758  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_common.c"
enum ice_status ice_init_hw(struct ice_hw *hw)
{
  #line 898 
  void *__mptr_7;
  #line 833 
  void *__mptr_2;
  #line 803 
  void *__mptr_0;
  #line 870 
  void *__mptr_5;
  #line 842 
  void *__mptr_3;
  #line 881 
  void *__mptr_6;
  #line 760 
  struct ice_aqc_get_phy_caps_data *pcaps;
  #line 761 
  enum ice_status status;
  #line 762 
  u16 mac_buf_len;
  #line 763 
  void *mac_buf;
  #line 766 
  status = ice_set_mac_type(hw);
  #line 767 
  if (status != ICE_SUCCESS) 
                             #line 768 
                             return status;
  #line 770 
  hw->pf_id = (unsigned char)((unsigned int)((unsigned char)readl((void *)(hw->hw_addr + 649344U))) & 7U);
  #line 774 
  status = ice_reset(hw,(enum ice_reset_req)ICE_RESET_PFR);
  #line 775 
  if (status != ICE_SUCCESS) 
                             #line 776 
                             return status;
  #line 778 
  ice_get_itr_intrl_gran(hw);
  #line 780 
  status = ice_create_all_ctrlq(hw);
  #line 781 
  if (status != ICE_SUCCESS) 
                             #line 782 
                             goto err_unroll_cqinit;
  #line 785 
  status = ice_cfg_fw_log(hw,(_Bool)1);
  #line 786 
  if (status != ICE_SUCCESS) {
    #line 787 
    bool branch;
    #line 787 
    struct _ddebug __UNIQUE_ID_ddebug552 = {.modname = (char *)"ice", .function = (char *)"ice_init_hw", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_common.c", .format = (char *)"Failed to enable FW logging.\n", .lineno = (unsigned int)787U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 787 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug552.key.dd_key_false.key,(_Bool)0);
    #line 787 
    if ((long)((long)((int)branch != 0)) != 0L) {
      #line 787 
      void *__mptr;
      #line 787 
      __mptr = (void *)hw;
      #line 787 
      __dynamic_dev_dbg(& __UNIQUE_ID_ddebug552,& (((struct ice_pf *)(__mptr + 18446744073709549512U))->pdev)->dev,(char *)"Failed to enable FW logging.\n");
    }
  }
  #line 789 
  status = ice_clear_pf_cfg(hw);
  #line 790 
  if (status != ICE_SUCCESS) 
                             #line 791 
                             goto err_unroll_cqinit;
  #line 793 
  ice_clear_pxe_mode(hw);
  #line 795 
  status = ice_init_nvm(hw);
  #line 796 
  if (status != ICE_SUCCESS) 
                             #line 797 
                             goto err_unroll_cqinit;
  #line 799 
  status = ice_get_caps(hw);
  #line 800 
  if (status != ICE_SUCCESS) 
                             #line 801 
                             goto err_unroll_cqinit;
  #line 803 
  __mptr_0 = (void *)hw;
  #line 803 
  hw->port_info = (struct ice_port_info *)cif_devm_kzalloc_4(& (((struct ice_pf *)(__mptr_0 + 18446744073709549512U))->pdev)->dev,
                           1632UL,3264U);
  #line 805 
  if (hw->port_info == (struct ice_port_info *)0) {
    #line 806 
    status = ICE_ERR_NO_MEMORY;
    #line 807 
    goto err_unroll_cqinit;
  }
  #line 811 
  (hw->port_info)->hw = hw;
  #line 814 
  status = ice_get_initial_sw_cfg(hw);
  #line 815 
  if (status != ICE_SUCCESS) 
                             #line 816 
                             goto err_unroll_alloc;
  #line 818 
  hw->evb_veb = (unsigned char)1U;
  #line 821 
  status = ice_sched_query_res_alloc(hw);
  #line 822 
  if (status != ICE_SUCCESS) {
    {
      #line 823 
      bool branch_0;
      #line 823 
      struct _ddebug __UNIQUE_ID_ddebug553 = {.modname = (char *)"ice", .function = (char *)"ice_init_hw", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_common.c", .format = (char *)"Failed to get scheduler allocated resources\n", .lineno = (unsigned int)823U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 823 
      branch_0 = arch_static_branch(& __UNIQUE_ID_ddebug553.key.dd_key_false.key,(_Bool)0);
      #line 823 
      if ((long)((long)((int)branch_0 != 0)) != 0L) {
        #line 823 
        void *__mptr_1;
        #line 823 
        __mptr_1 = (void *)hw;
        #line 823 
        __dynamic_dev_dbg(& __UNIQUE_ID_ddebug553,& (((struct ice_pf *)(__mptr_1 + 18446744073709549512U))->pdev)->dev,(char *)"Failed to get scheduler allocated resources\n");
      }
    }
    #line 825 
    goto err_unroll_alloc;
  }
  #line 829 
  status = ice_sched_init_port(hw->port_info);
  #line 830 
  if (status != ICE_SUCCESS) 
                             #line 831 
                             goto err_unroll_sched;
  #line 833 
  __mptr_2 = (void *)hw;
  #line 833 
  pcaps = (struct ice_aqc_get_phy_caps_data *)cif_devm_kzalloc_4(& (((struct ice_pf *)(__mptr_2 + 18446744073709549512U))->pdev)->dev,
                           560UL,3264U);
  #line 834 
  if (pcaps == (struct ice_aqc_get_phy_caps_data *)0) {
    #line 835 
    status = ICE_ERR_NO_MEMORY;
    #line 836 
    goto err_unroll_sched;
  }
  #line 840 
  status = ice_aq_get_phy_caps(hw->port_info,(_Bool)0,(unsigned char)2,pcaps,(struct ice_sq_cd *)0);
  #line 842 
  ;
  #line 842 
  __mptr_3 = (void *)hw;
  #line 842 
  devm_kfree(& (((struct ice_pf *)(__mptr_3 + 18446744073709549512U))->pdev)->dev,(void *)pcaps);
  #line 843 
  if (status != ICE_SUCCESS) 
                             #line 844 
                             goto err_unroll_sched;
  #line 847 
  status = ice_aq_get_link_info(hw->port_info,(_Bool)0,(struct ice_link_status *)0,(struct ice_sq_cd *)0);
  #line 848 
  if (status != ICE_SUCCESS) 
                             #line 849 
                             goto err_unroll_sched;
  #line 852 
  if ((unsigned int)hw->sw_entry_point_layer == 0U) {
    {
      #line 853 
      bool branch_1;
      #line 853 
      struct _ddebug __UNIQUE_ID_ddebug554 = {.modname = (char *)"ice", .function = (char *)"ice_init_hw", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_common.c", .format = (char *)"invalid sw entry point\n", .lineno = (unsigned int)853U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 853 
      branch_1 = arch_static_branch(& __UNIQUE_ID_ddebug554.key.dd_key_false.key,(_Bool)0);
      #line 853 
      if ((long)((long)((int)branch_1 != 0)) != 0L) {
        #line 853 
        void *__mptr_4;
        #line 853 
        __mptr_4 = (void *)hw;
        #line 853 
        __dynamic_dev_dbg(& __UNIQUE_ID_ddebug554,& (((struct ice_pf *)(__mptr_4 + 18446744073709549512U))->pdev)->dev,(char *)"invalid sw entry point\n");
      }
    }
    #line 854 
    status = ICE_ERR_CFG;
    #line 855 
    goto err_unroll_sched;
  }
  #line 857 
  INIT_LIST_HEAD_2(& hw->agg_list);
  #line 859 
  if ((unsigned int)hw->max_burst_size == 0U) 
                                              #line 860 
                                              ice_cfg_rl_burst_size(hw,15360U);
  #line 862 
  status = ice_init_fltr_mgmt_struct(hw);
  #line 863 
  if (status != ICE_SUCCESS) 
                             #line 864 
                             goto err_unroll_sched;
  #line 866 
  ice_dev_onetime_setup(hw);
  #line 870 
  __mptr_5 = (void *)hw;
  #line 870 
  mac_buf = cif_devm_kcalloc_3(& (((struct ice_pf *)(__mptr_5 + 18446744073709549512U))->pdev)->dev,2UL,8UL,3264U);
  #line 873 
  mac_buf_len = (unsigned short)16U;
  #line 875 
  if (mac_buf == (void *)0) {
    #line 876 
    status = ICE_ERR_NO_MEMORY;
    #line 877 
    goto err_unroll_fltr_mgmt_struct;
  }
  #line 880 
  status = ice_aq_manage_mac_read(hw,mac_buf,(unsigned short)((int)mac_buf_len),(struct ice_sq_cd *)0);
  #line 881 
  ;
  #line 881 
  __mptr_6 = (void *)hw;
  #line 881 
  devm_kfree(& (((struct ice_pf *)(__mptr_6 + 18446744073709549512U))->pdev)->dev,mac_buf);
  #line 883 
  if (status != ICE_SUCCESS) 
                             #line 884 
                             goto err_unroll_fltr_mgmt_struct;
  #line 886 
  ice_init_flex_flds(hw,(enum ice_rxdid)ICE_RXDID_FLEX_NIC);
  #line 887 
  ice_init_flex_flds(hw,(enum ice_rxdid)ICE_RXDID_FLEX_NIC_2);
  #line 888 
  status = ice_init_hw_tbls(hw);
  #line 889 
  if (status != ICE_SUCCESS) 
                             #line 890 
                             goto err_unroll_fltr_mgmt_struct;
  #line 891 
  return ICE_SUCCESS;
  #line 893 
  err_unroll_fltr_mgmt_struct: 
                               #line 893 
  ;
  #line 894 
  ice_cleanup_fltr_mgmt_struct(hw);
  #line 895 
  err_unroll_sched: 
                    #line 895 
  ;
  #line 896 
  ice_sched_cleanup_all(hw);
  #line 897 
  err_unroll_alloc: 
                    #line 897 
  ;
  #line 898 
  ;
  #line 898 
  __mptr_7 = (void *)hw;
  #line 898 
  devm_kfree(& (((struct ice_pf *)(__mptr_7 + 18446744073709549512U))->pdev)->dev,(void *)hw->port_info);
  #line 899 
  err_unroll_cqinit: 
                     #line 899 
  ;
  #line 900 
  ice_destroy_all_ctrlq(hw);
  #line 901 
  return status;
}

#line 912  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_common.c"
void ice_deinit_hw(struct ice_hw *hw)
{
  #line 914 
  ice_cleanup_fltr_mgmt_struct(hw);
  #line 916 
  ice_sched_cleanup_all(hw);
  #line 917 
  ice_sched_clear_agg(hw);
  #line 918 
  ice_free_seg(hw);
  #line 919 
  ice_free_hw_tbls(hw);
  #line 921 
  if (hw->port_info != (struct ice_port_info *)0) {
    #line 922 
    void *__mptr;
    #line 922 
    ;
    #line 922 
    __mptr = (void *)hw;
    #line 922 
    devm_kfree(& (((struct ice_pf *)(__mptr + 18446744073709549512U))->pdev)->dev,(void *)hw->port_info);
    #line 923 
    hw->port_info = (struct ice_port_info *)0;
  }
  #line 927 
  ice_cfg_fw_log(hw,(_Bool)0);
  #line 928 
  ice_destroy_all_ctrlq(hw);
  #line 931 
  ice_clear_all_vsi_ctx(hw);
  #line 932 
  return;
}

#line 938  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_common.c"
enum ice_status ice_check_reset(struct ice_hw *hw)
{
  #line 940 
  u32 cnt;
  #line 940 
  u32 grst_delay;
  #line 940 
  u32 reg = 0U;
  #line 946 
  grst_delay = (readl((void *)(hw->hw_addr + 754048U)) & 63U) + 10U;
  #line 949 
  cnt = 0U;
  #line 949 
  while (cnt < grst_delay) {
    {
      #line 950 
      unsigned long __ms = 100UL;
      #line 950 
      while (1) {
        #line 950 
        unsigned long tmp_0;
        #line 950 
        tmp_0 = __ms;
        #line 950 
        __ms --;
        #line 950 
        ;
        #line 950 
        if (! (tmp_0 != 0UL)) 
                              #line 950 
                              break;
        #line 950 
        __const_udelay(4295000UL);
      }
    }
    #line 951 
    reg = readl((void *)(hw->hw_addr + 754056U));
    #line 952 
    if ((reg & 3U) == 0U) 
                          #line 953 
                          break;
    #line 949 
    cnt ++;
  }
  #line 956 
  if (cnt == grst_delay) {
    {
      #line 957 
      bool branch;
      #line 957 
      struct _ddebug __UNIQUE_ID_ddebug555 = {.modname = (char *)"ice", .function = (char *)"ice_check_reset", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_common.c", .format = (char *)"Global reset polling failed to complete.\n", .lineno = (unsigned int)957U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 957 
      branch = arch_static_branch(& __UNIQUE_ID_ddebug555.key.dd_key_false.key,(_Bool)0);
      #line 957 
      if ((long)((long)((int)branch != 0)) != 0L) {
        #line 957 
        void *__mptr;
        #line 957 
        __mptr = (void *)hw;
        #line 957 
        __dynamic_dev_dbg(& __UNIQUE_ID_ddebug555,& (((struct ice_pf *)(__mptr + 18446744073709549512U))->pdev)->dev,(char *)"Global reset polling failed to complete.\n");
      }
    }
    #line 959 
    return ICE_ERR_RESET_FAILED;
  }
  #line 966 
  cnt = 0U;
  #line 966 
  while (cnt <= 199U) {
    {
      #line 967 
      reg = readl((void *)(hw->hw_addr + 745480U)) & 24U;
      #line 968 
      if (reg == 24U) {
        {
          #line 969 
          bool branch_0;
          #line 969 
          struct _ddebug __UNIQUE_ID_ddebug556 = {.modname = (char *)"ice", .function = (char *)"ice_check_reset", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_common.c", .format = (char *)"Global reset processes done. %d\n", .lineno = (unsigned int)969U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
          #line 969 
          branch_0 = arch_static_branch(& __UNIQUE_ID_ddebug556.key.dd_key_false.key,(_Bool)0);
          #line 969 
          if ((long)((long)((int)branch_0 != 0)) != 0L) {
            #line 969 
            void *__mptr_0;
            #line 969 
            ;
            #line 969 
            __mptr_0 = (void *)hw;
            #line 969 
            __dynamic_dev_dbg(& __UNIQUE_ID_ddebug556,& (((struct ice_pf *)(__mptr_0 + 18446744073709549512U))->pdev)->dev,(char *)"Global reset processes done. %d\n",cnt);
          }
        }
        #line 971 
        break;
      }
      {
        #line 973 
        unsigned long __ms_0 = 10UL;
        #line 973 
        while (1) {
          #line 973 
          unsigned long tmp_6;
          #line 973 
          tmp_6 = __ms_0;
          #line 973 
          __ms_0 --;
          #line 973 
          ;
          #line 973 
          if (! (tmp_6 != 0UL)) 
                                #line 973 
                                break;
          #line 973 
          __const_udelay(4295000UL);
        }
      }
    }
    #line 966 
    cnt ++;
  }
  #line 976 
  if (cnt == 200U) {
    {
      #line 977 
      bool branch_1;
      #line 977 
      struct _ddebug __UNIQUE_ID_ddebug557 = {.modname = (char *)"ice", .function = (char *)"ice_check_reset", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_common.c", .format = (char *)"Wait for Reset Done timed out. GLNVM_ULD = 0x%x\n", .lineno = (unsigned int)977U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 977 
      branch_1 = arch_static_branch(& __UNIQUE_ID_ddebug557.key.dd_key_false.key,(_Bool)0);
      #line 977 
      if ((long)((long)((int)branch_1 != 0)) != 0L) {
        #line 977 
        void *__mptr_1;
        #line 977 
        ;
        #line 977 
        __mptr_1 = (void *)hw;
        #line 977 
        __dynamic_dev_dbg(& __UNIQUE_ID_ddebug557,& (((struct ice_pf *)(__mptr_1 + 18446744073709549512U))->pdev)->dev,(char *)"Wait for Reset Done timed out. GLNVM_ULD = 0x%x\n",reg);
      }
    }
    #line 980 
    return ICE_ERR_RESET_FAILED;
  }
  #line 983 
  return ICE_SUCCESS;
}

#line 993  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_common.c"
static enum ice_status ice_pf_reset(struct ice_hw *hw)
{
  #line 995 
  u32 cnt;
  #line 995 
  u32 reg;
  #line 1002 
  if ((readl((void *)(hw->hw_addr + 754056U)) & 3U) != 0U) 
                                                           #line 1002 
                                                           goto _LOR;
  else {
    #line 1002 
    if ((~ ((unsigned long)readl((void *)(hw->hw_addr + 745480U))) & 24UL) != 0UL) {
      #line 1002 
      _LOR: {
              #line 1005 
              if (ice_check_reset(hw) != ICE_SUCCESS) 
                                                      #line 1006 
                                                      return ICE_ERR_RESET_FAILED;
              #line 1008 
              return ICE_SUCCESS;
            }
    }
  }
  #line 1012 
  reg = readl((void *)(hw->hw_addr + 593920U));
  #line 1014 
  writel(reg | 1U,(void *)(hw->hw_addr + 593920U));
  #line 1016 
  cnt = 0U;
  #line 1016 
  while (cnt <= 199U) {
    #line 1017 
    reg = readl((void *)(hw->hw_addr + 593920U));
    #line 1018 
    if (((unsigned long)reg & 1UL) == 0UL) 
                                           #line 1019 
                                           break;
    #line 1021 
    __const_udelay(4295000UL);
    #line 1016 
    cnt ++;
  }
  #line 1024 
  if (cnt == 200U) {
    {
      #line 1025 
      bool branch;
      #line 1025 
      struct _ddebug __UNIQUE_ID_ddebug558 = {.modname = (char *)"ice", .function = (char *)"ice_pf_reset", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_common.c", .format = (char *)"PF reset polling failed to complete.\n", .lineno = (unsigned int)1025U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 1025 
      branch = arch_static_branch(& __UNIQUE_ID_ddebug558.key.dd_key_false.key,(_Bool)0);
      #line 1025 
      if ((long)((long)((int)branch != 0)) != 0L) {
        #line 1025 
        void *__mptr;
        #line 1025 
        __mptr = (void *)hw;
        #line 1025 
        __dynamic_dev_dbg(& __UNIQUE_ID_ddebug558,& (((struct ice_pf *)(__mptr + 18446744073709549512U))->pdev)->dev,(char *)"PF reset polling failed to complete.\n");
      }
    }
    #line 1027 
    return ICE_ERR_RESET_FAILED;
  }
  #line 1030 
  return ICE_SUCCESS;
}

#line 1045  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_common.c"
enum ice_status ice_reset(struct ice_hw *hw, enum ice_reset_req req)
{
  #line 1047 
  u32 val = 0U;
  #line 1049 
  switch ((unsigned int)req) {
    #line 1050 
    case (unsigned int)4: 
                          #line 1050 
    ;
    #line 1051 
    return ice_pf_reset(hw);
    #line 1052 
    case (unsigned int)1: 
                          #line 1052 
    ;
    {
      #line 1053 
      bool branch;
      #line 1053 
      struct _ddebug __UNIQUE_ID_ddebug559 = {.modname = (char *)"ice", .function = (char *)"ice_reset", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_common.c", .format = (char *)"CoreR requested\n", .lineno = (unsigned int)1053U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 1053 
      branch = arch_static_branch(& __UNIQUE_ID_ddebug559.key.dd_key_false.key,(_Bool)0);
      #line 1053 
      if ((long)((long)((int)branch != 0)) != 0L) {
        #line 1053 
        void *__mptr;
        #line 1053 
        __mptr = (void *)hw;
        #line 1053 
        __dynamic_dev_dbg(& __UNIQUE_ID_ddebug559,& (((struct ice_pf *)(__mptr + 18446744073709549512U))->pdev)->dev,(char *)"CoreR requested\n");
      }
    }
    #line 1054 
    val = 1U;
    #line 1055 
    break;
    #line 1056 
    case (unsigned int)2: 
                          #line 1056 
    ;
    {
      #line 1057 
      bool branch_0;
      #line 1057 
      struct _ddebug __UNIQUE_ID_ddebug560 = {.modname = (char *)"ice", .function = (char *)"ice_reset", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_common.c", .format = (char *)"GlobalR requested\n", .lineno = (unsigned int)1057U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 1057 
      branch_0 = arch_static_branch(& __UNIQUE_ID_ddebug560.key.dd_key_false.key,(_Bool)0);
      #line 1057 
      if ((long)((long)((int)branch_0 != 0)) != 0L) {
        #line 1057 
        void *__mptr_0;
        #line 1057 
        __mptr_0 = (void *)hw;
        #line 1057 
        __dynamic_dev_dbg(& __UNIQUE_ID_ddebug560,& (((struct ice_pf *)(__mptr_0 + 18446744073709549512U))->pdev)->dev,(char *)"GlobalR requested\n");
      }
    }
    #line 1058 
    val = 2U;
    #line 1059 
    break;
    #line 1060 
    default: 
             #line 1060 
    ;
    #line 1061 
    return ICE_ERR_PARAM;
  }
  #line 1064 
  val = readl((void *)(hw->hw_addr + 754064U)) | val;
  #line 1065 
  writel(val,(void *)(hw->hw_addr + 754064U));
  #line 1066 
  readl((void *)(hw->hw_addr + 745772U));
  #line 1069 
  return ice_check_reset(hw);
}

#line 1084  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_common.c"
enum ice_status ice_get_pfa_module_tlv(struct ice_hw *hw, u16 *module_tlv, u16 *module_tlv_len, u16 module_type)
{
  #line 1087 
  enum ice_status status;
  #line 1088 
  u16 pfa_len;
  #line 1088 
  u16 pfa_ptr;
  #line 1089 
  u16 next_tlv;
  #line 1091 
  status = ice_read_sr_word(hw,(unsigned short)64,& pfa_ptr);
  #line 1092 
  if (status != ICE_SUCCESS) {
    {
      #line 1093 
      bool branch;
      #line 1093 
      struct _ddebug __UNIQUE_ID_ddebug561 = {.modname = (char *)"ice", .function = (char *)"ice_get_pfa_module_tlv", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_common.c", .format = (char *)"Preserved Field Array pointer.\n", .lineno = (unsigned int)1093U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 1093 
      branch = arch_static_branch(& __UNIQUE_ID_ddebug561.key.dd_key_false.key,(_Bool)0);
      #line 1093 
      if ((long)((long)((int)branch != 0)) != 0L) {
        #line 1093 
        void *__mptr;
        #line 1093 
        __mptr = (void *)hw;
        #line 1093 
        __dynamic_dev_dbg(& __UNIQUE_ID_ddebug561,& (((struct ice_pf *)(__mptr + 18446744073709549512U))->pdev)->dev,(char *)"Preserved Field Array pointer.\n");
      }
    }
    #line 1094 
    return status;
  }
  #line 1096 
  status = ice_read_sr_word(hw,(unsigned short)((int)pfa_ptr),& pfa_len);
  #line 1097 
  if (status != ICE_SUCCESS) {
    {
      #line 1098 
      bool branch_0;
      #line 1098 
      struct _ddebug __UNIQUE_ID_ddebug562 = {.modname = (char *)"ice", .function = (char *)"ice_get_pfa_module_tlv", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_common.c", .format = (char *)"Failed to read PFA length.\n", .lineno = (unsigned int)1098U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 1098 
      branch_0 = arch_static_branch(& __UNIQUE_ID_ddebug562.key.dd_key_false.key,(_Bool)0);
      #line 1098 
      if ((long)((long)((int)branch_0 != 0)) != 0L) {
        #line 1098 
        void *__mptr_0;
        #line 1098 
        __mptr_0 = (void *)hw;
        #line 1098 
        __dynamic_dev_dbg(& __UNIQUE_ID_ddebug562,& (((struct ice_pf *)(__mptr_0 + 18446744073709549512U))->pdev)->dev,(char *)"Failed to read PFA length.\n");
      }
    }
    #line 1099 
    return status;
  }
  #line 1104 
  next_tlv = (unsigned short)((unsigned int)pfa_ptr + 1U);
  #line 1105 
  while ((int)next_tlv < (int)pfa_ptr + (int)pfa_len) {
    #line 1106 
    u16 tlv_sub_module_type;
    #line 1107 
    u16 tlv_len;
    #line 1110 
    status = ice_read_sr_word(hw,(unsigned short)((int)next_tlv),& tlv_sub_module_type);
    #line 1111 
    if (status != ICE_SUCCESS) {
      {
        #line 1112 
        bool branch_1;
        #line 1112 
        struct _ddebug __UNIQUE_ID_ddebug563 = {.modname = (char *)"ice", .function = (char *)"ice_get_pfa_module_tlv", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_common.c", .format = (char *)"Failed to read TLV type.\n", .lineno = (unsigned int)1112U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
        #line 1112 
        branch_1 = arch_static_branch(& __UNIQUE_ID_ddebug563.key.dd_key_false.key,(_Bool)0);
        #line 1112 
        if ((long)((long)((int)branch_1 != 0)) != 0L) {
          #line 1112 
          void *__mptr_1;
          #line 1112 
          __mptr_1 = (void *)hw;
          #line 1112 
          __dynamic_dev_dbg(& __UNIQUE_ID_ddebug563,& (((struct ice_pf *)(__mptr_1 + 18446744073709549512U))->pdev)->dev,(char *)"Failed to read TLV type.\n");
        }
      }
      #line 1113 
      break;
    }
    #line 1116 
    status = ice_read_sr_word(hw,(unsigned short)((int)((unsigned int)next_tlv + 1U)),& tlv_len);
    #line 1117 
    if (status != ICE_SUCCESS) {
      {
        #line 1118 
        bool branch_2;
        #line 1118 
        struct _ddebug __UNIQUE_ID_ddebug564 = {.modname = (char *)"ice", .function = (char *)"ice_get_pfa_module_tlv", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_common.c", .format = (char *)"Failed to read TLV length.\n", .lineno = (unsigned int)1118U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
        #line 1118 
        branch_2 = arch_static_branch(& __UNIQUE_ID_ddebug564.key.dd_key_false.key,(_Bool)0);
        #line 1118 
        if ((long)((long)((int)branch_2 != 0)) != 0L) {
          #line 1118 
          void *__mptr_2;
          #line 1118 
          __mptr_2 = (void *)hw;
          #line 1118 
          __dynamic_dev_dbg(& __UNIQUE_ID_ddebug564,& (((struct ice_pf *)(__mptr_2 + 18446744073709549512U))->pdev)->dev,(char *)"Failed to read TLV length.\n");
        }
      }
      #line 1119 
      break;
    }
    #line 1121 
    if ((int)tlv_sub_module_type == (int)module_type) {
      #line 1122 
      if ((unsigned int)tlv_len != 0U) {
        #line 1123 
        *module_tlv = next_tlv;
        #line 1124 
        *module_tlv_len = tlv_len;
        #line 1125 
        return ICE_SUCCESS;
      }
      #line 1127 
      return ICE_ERR_INVAL_SIZE;
    }
    #line 1132 
    next_tlv = (unsigned short)((unsigned int)((int)next_tlv + (int)tlv_len) + 2U);
  }
  #line 1135 
  return ICE_ERR_DOES_NOT_EXIST;
}

#line 1147  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_common.c"
static enum ice_status ice_copy_rxq_ctx_to_hw(struct ice_hw *hw, u8 *ice_rxq_ctx, u32 rxq_index)
{
  #line 1149 
  u8 i;
  #line 1151 
  if (ice_rxq_ctx == (u8 *)0U) 
                               #line 1152 
                               return ICE_ERR_BAD_PTR;
  #line 1154 
  if (rxq_index > 2047U) 
                         #line 1155 
                         return ICE_ERR_PARAM;
  #line 1158 
  i = (unsigned char)0U;
  #line 1158 
  while ((unsigned int)i <= 7U) {
    #line 1159 
    writel(*((u32 *)(ice_rxq_ctx + (unsigned long)i * 4UL)),(void *)(hw->hw_addr + (unsigned long)(((unsigned int)((int)i * 8192) + rxq_index * 4U) + 2621440U)));
    {
      #line 1162 
      bool branch;
      #line 1162 
      struct _ddebug __UNIQUE_ID_ddebug565 = {.modname = (char *)"ice", .function = (char *)"ice_copy_rxq_ctx_to_hw", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_common.c", .format = (char *)"qrxdata[%d]: %08X\n", .lineno = (unsigned int)1162U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 1162 
      branch = arch_static_branch(& __UNIQUE_ID_ddebug565.key.dd_key_false.key,(_Bool)0);
      #line 1162 
      if ((long)((long)((int)branch != 0)) != 0L) {
        #line 1162 
        void *__mptr;
        #line 1162 
        ;
        #line 1162 
        ;
        #line 1162 
        __mptr = (void *)hw;
        #line 1162 
        __dynamic_dev_dbg(& __UNIQUE_ID_ddebug565,& (((struct ice_pf *)(__mptr + 18446744073709549512U))->pdev)->dev,(char *)"qrxdata[%d]: %08X\n",(int)i,*((u32 *)(ice_rxq_ctx + (unsigned long)i * 4UL)));
      }
    }
    #line 1158 
    i = (u8)((int)i + 1);
  }
  #line 1166 
  return ICE_SUCCESS;
}

#line 1170  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_common.c"
static struct ice_ctx_ele ice_rlan_ctx_info[21U] = {{.size_of = (unsigned short)2U, .width = (unsigned short)13U}, {.offset = (unsigned short)2U, .size_of = (unsigned short)2U, .width = (unsigned short)8U, .lsb = (unsigned short)13U}, {.offset = (unsigned short)8U, .size_of = (unsigned short)8U, .width = (unsigned short)57U, .lsb = (unsigned short)32U}, {.offset = (unsigned short)16U, .size_of = (unsigned short)2U, .width = (unsigned short)13U, .lsb = (unsigned short)89U}, {.offset = (unsigned short)18U, .size_of = (unsigned short)2U, .width = (unsigned short)7U, .lsb = (unsigned short)102U}, {.offset = (unsigned short)20U, .size_of = (unsigned short)2U, .width = (unsigned short)5U, .lsb = (unsigned short)109U}, {.offset = (unsigned short)22U, .size_of = (unsigned short)1U, .width = (unsigned short)2U, .lsb = (unsigned short)114U}, {.offset = (unsigned short)23U, .size_of = (unsigned short)1U, .width = (unsigned short)1U, .lsb = (unsigned short)116U}, {.offset = (unsigned short)24U, .size_of = (unsigned short)1U, .width = (unsigned short)1U, .lsb = (unsigned short)117U}, {.offset = (unsigned short)25U, .size_of = (unsigned short)1U, .width = (unsigned short)1U, .lsb = (unsigned short)119U}, {.offset = (unsigned short)26U, .size_of = (unsigned short)1U, .width = (unsigned short)4U, .lsb = (unsigned short)120U}, {.offset = (unsigned short)27U, .size_of = (unsigned short)1U, .width = (unsigned short)2U, .lsb = (unsigned short)124U}, {.offset = (unsigned short)28U, .size_of = (unsigned short)1U, .width = (unsigned short)1U, .lsb = (unsigned short)127U}, {.offset = (unsigned short)32U, .size_of = (unsigned short)4U, .width = (unsigned short)14U, .lsb = (unsigned short)174U}, {.offset = (unsigned short)36U, .size_of = (unsigned short)1U, .width = (unsigned short)1U, .lsb = (unsigned short)193U}, {.offset = (unsigned short)37U, .size_of = (unsigned short)1U, .width = (unsigned short)1U, .lsb = (unsigned short)194U}, {.offset = (unsigned short)38U, .size_of = (unsigned short)1U, .width = (unsigned short)1U, .lsb = (unsigned short)195U}, {.offset = (unsigned short)39U, .size_of = (unsigned short)1U, .width = (unsigned short)1U, .lsb = (unsigned short)196U}, {.offset = (unsigned short)40U, .size_of = (unsigned short)2U, .width = (unsigned short)3U, .lsb = (unsigned short)198U}, {.offset = (unsigned short)42U, .size_of = (unsigned short)1U, .width = (unsigned short)1U, .lsb = (unsigned short)201U}};
#line 1206  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_common.c"
enum ice_status ice_write_rxq_ctx(struct ice_hw *hw, struct ice_rlan_ctx *rlan_ctx, u32 rxq_index)
{
  #line 1209 
  u8 ctx_buf[32U] = {(unsigned char)0U};
  #line 1211 
  if (rlan_ctx == (struct ice_rlan_ctx *)0) 
                                            #line 1212 
                                            return ICE_ERR_BAD_PTR;
  #line 1214 
  rlan_ctx->prefena = (unsigned char)1U;
  #line 1216 
  ice_set_ctx((u8 *)rlan_ctx,(u8 *)(& ctx_buf),(struct ice_ctx_ele *)(& ice_rlan_ctx_info));
  #line 1217 
  return ice_copy_rxq_ctx_to_hw(hw,(u8 *)(& ctx_buf),rxq_index);
}

#line 1221  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_common.c"
struct ice_ctx_ele ice_tlan_ctx_info[29U] = {{.size_of = (unsigned short)8U, .width = (unsigned short)57U}, {.offset = (unsigned short)8U, .size_of = (unsigned short)1U, .width = (unsigned short)3U, .lsb = (unsigned short)57U}, {.offset = (unsigned short)10U, .size_of = (unsigned short)2U, .width = (unsigned short)5U, .lsb = (unsigned short)60U}, {.offset = (unsigned short)12U, .size_of = (unsigned short)1U, .width = (unsigned short)3U, .lsb = (unsigned short)65U}, {.offset = (unsigned short)14U, .size_of = (unsigned short)2U, .width = (unsigned short)10U, .lsb = (unsigned short)68U}, {.offset = (unsigned short)16U, .size_of = (unsigned short)1U, .width = (unsigned short)2U, .lsb = (unsigned short)78U}, {.offset = (unsigned short)18U, .size_of = (unsigned short)2U, .width = (unsigned short)10U, .lsb = (unsigned short)80U}, {.offset = (unsigned short)20U, .size_of = (unsigned short)1U, .width = (unsigned short)1U, .lsb = (unsigned short)90U}, {.offset = (unsigned short)21U, .size_of = (unsigned short)1U, .width = (unsigned short)1U, .lsb = (unsigned short)91U}, {.offset = (unsigned short)22U, .size_of = (unsigned short)1U, .width = (unsigned short)1U, .lsb = (unsigned short)92U}, {.offset = (unsigned short)24U, .size_of = (unsigned short)2U, .width = (unsigned short)8U, .lsb = (unsigned short)93U}, {.offset = (unsigned short)26U, .size_of = (unsigned short)1U, .width = (unsigned short)1U, .lsb = (unsigned short)101U}, {.offset = (unsigned short)27U, .size_of = (unsigned short)1U, .width = (unsigned short)1U, .lsb = (unsigned short)102U}, {.offset = (unsigned short)28U, .size_of = (unsigned short)1U, .width = (unsigned short)1U, .lsb = (unsigned short)103U}, {.offset = (unsigned short)29U, .size_of = (unsigned short)1U, .width = (unsigned short)1U, .lsb = (unsigned short)104U}, {.offset = (unsigned short)30U, .size_of = (unsigned short)2U, .width = (unsigned short)9U, .lsb = (unsigned short)105U}, {.offset = (unsigned short)32U, .size_of = (unsigned short)2U, .width = (unsigned short)14U, .lsb = (unsigned short)114U}, {.offset = (unsigned short)34U, .size_of = (unsigned short)1U, .width = (unsigned short)1U, .lsb = (unsigned short)128U}, {.offset = (unsigned short)35U, .size_of = (unsigned short)1U, .width = (unsigned short)6U, .lsb = (unsigned short)129U}, {.offset = (unsigned short)36U, .size_of = (unsigned short)4U, .width = (unsigned short)13U, .lsb = (unsigned short)135U}, {.offset = (unsigned short)40U, .size_of = (unsigned short)1U, .width = (unsigned short)4U, .lsb = (unsigned short)148U}, {.offset = (unsigned short)41U, .size_of = (unsigned short)1U, .width = (unsigned short)1U, .lsb = (unsigned short)152U}, {.offset = (unsigned short)42U, .size_of = (unsigned short)2U, .width = (unsigned short)11U, .lsb = (unsigned short)153U}, {.offset = (unsigned short)44U, .size_of = (unsigned short)1U, .width = (unsigned short)1U, .lsb = (unsigned short)164U}, {.offset = (unsigned short)45U, .size_of = (unsigned short)1U, .width = (unsigned short)1U, .lsb = (unsigned short)165U}, {.offset = (unsigned short)46U, .size_of = (unsigned short)1U, .width = (unsigned short)2U, .lsb = (unsigned short)166U}, {.offset = (unsigned short)47U, .size_of = (unsigned short)1U, .width = (unsigned short)3U, .lsb = (unsigned short)168U}, {.offset = (unsigned short)48U, .size_of = (unsigned short)1U, .width = (unsigned short)122U, .lsb = (unsigned short)171U}};
#line 1260  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_common.c"
struct mutex ice_global_cfg_lock_sw = {.wait_lock = {.__anonCompField_spinlock_25 = {.rlock = {.magic = 3735899821U, .owner_cpu = 4294967295U, .owner = (void *)(-1), .dep_map = {.name = (char *)"ice_global_cfg_lock_sw.wait_lock"}}}}, .wait_list = {.next = & ice_global_cfg_lock_sw.wait_list, .prev = & ice_global_cfg_lock_sw.wait_list}, .magic = (void *)(& ice_global_cfg_lock_sw), .dep_map = {.name = (char *)"ice_global_cfg_lock_sw"}};
#line 1273  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_common.c"
enum ice_status ice_aq_send_cmd(struct ice_hw *hw, struct ice_aq_desc *desc, void *buf, u16 buf_size, struct ice_sq_cd *cd)
{
  #line 1278 
  enum ice_status status;
  #line 1276 
  struct ice_aqc_req_res *cmd = & desc->params.res_owner;
  #line 1277 
  bool lock_acquired = (_Bool)0;
  #line 1288 
  switch ((int)desc->opcode) {
    #line 1289 
    case 3136: 
               #line 1289 
    ;
    #line 1290 
    case 3139: 
               #line 1290 
    ;
    #line 1291 
    case 1: 
            #line 1291 
    ;
    #line 1292 
    break;
    #line 1293 
    case 9: 
            #line 1293 
    ;
    #line 1294 
    if ((unsigned int)cmd->res_id == 4U) 
                                         #line 1295 
                                         break;
    #line 1297 
    default: 
             #line 1297 
    ;
    #line 1298 
    cif_mutex_lock_ice_global_cfg_lock_sw(& ice_global_cfg_lock_sw);
    #line 1299 
    lock_acquired = (_Bool)1;
    #line 1300 
    break;
  }
  #line 1303 
  status = ice_sq_send_cmd(hw,& hw->adminq,desc,buf,(unsigned short)((int)buf_size),cd);
  #line 1304 
  if ((int)lock_acquired != 0) 
                               #line 1305 
                               cif_mutex_unlock_ice_global_cfg_lock_sw(& ice_global_cfg_lock_sw);
  #line 1307 
  return status;
}

#line 1317  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_common.c"
enum ice_status ice_aq_get_fw_ver(struct ice_hw *hw, struct ice_sq_cd *cd)
{
  #line 1319 
  struct ice_aqc_get_ver *resp;
  #line 1320 
  struct ice_aq_desc desc;
  #line 1321 
  enum ice_status status;
  #line 1323 
  resp = & desc.params.get_ver;
  #line 1325 
  ice_fill_dflt_direct_cmd_desc(& desc,(unsigned short)1);
  #line 1327 
  status = ice_aq_send_cmd(hw,& desc,(void *)0,(unsigned short)0,cd);
  #line 1329 
  if (status == ICE_SUCCESS) {
    #line 1330 
    hw->fw_branch = resp->fw_branch;
    #line 1331 
    hw->fw_maj_ver = resp->fw_major;
    #line 1332 
    hw->fw_min_ver = resp->fw_minor;
    #line 1333 
    hw->fw_patch = resp->fw_patch;
    #line 1334 
    hw->fw_build = resp->fw_build;
    #line 1335 
    hw->api_branch = resp->api_branch;
    #line 1336 
    hw->api_maj_ver = resp->api_major;
    #line 1337 
    hw->api_min_ver = resp->api_minor;
    #line 1338 
    hw->api_patch = resp->api_patch;
  }
  #line 1341 
  return status;
}

#line 1353  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_common.c"
enum ice_status ice_aq_send_driver_ver(struct ice_hw *hw, struct ice_driver_ver *dv, struct ice_sq_cd *cd)
{
  #line 1356 
  struct ice_aqc_driver_ver *cmd;
  #line 1357 
  struct ice_aq_desc desc;
  #line 1358 
  u16 len;
  #line 1360 
  cmd = & desc.params.driver_ver;
  #line 1362 
  if (dv == (struct ice_driver_ver *)0) 
                                        #line 1363 
                                        return ICE_ERR_PARAM;
  #line 1365 
  ice_fill_dflt_direct_cmd_desc(& desc,(unsigned short)2);
  #line 1367 
  desc.flags = (unsigned short)((unsigned int)desc.flags | 1024U);
  #line 1368 
  cmd->major_ver = dv->major_ver;
  #line 1369 
  cmd->minor_ver = dv->minor_ver;
  #line 1370 
  cmd->build_ver = dv->build_ver;
  #line 1371 
  cmd->subbuild_ver = dv->subbuild_ver;
  #line 1373 
  len = (unsigned short)0U;
  #line 1374 
  while (((unsigned int)len <= 31U && (int)dv->driver_string[(int)len] >= 0) && (unsigned int)dv->driver_string[(int)len] != 0U) 
    #line 1376 
    len = (u16)((int)len + 1);
  #line 1378 
  return ice_aq_send_cmd(hw,& desc,(void *)(& dv->driver_string),
                      (unsigned short)((int)len),cd);
}

#line 1389  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_common.c"
enum ice_status ice_aq_q_shutdown(struct ice_hw *hw, bool unloading)
{
  #line 1391 
  struct ice_aqc_q_shutdown *cmd;
  #line 1392 
  struct ice_aq_desc desc;
  #line 1394 
  cmd = & desc.params.q_shutdown;
  #line 1396 
  ice_fill_dflt_direct_cmd_desc(& desc,(unsigned short)3);
  #line 1398 
  if ((int)unloading != 0) 
                           #line 1399 
                           cmd->driver_unloading = (unsigned char)1U;
  #line 1401 
  return ice_aq_send_cmd(hw,& desc,(void *)0,(unsigned short)0,
                      (struct ice_sq_cd *)0);
}

#line 1431  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_common.c"
static enum ice_status ice_aq_req_res(struct ice_hw *hw, enum ice_aq_res_ids res, enum ice_aq_res_access_type access, u8 sdp_number, u32 *timeout, struct ice_sq_cd *cd)
{
  #line 1435 
  struct ice_aqc_req_res *cmd_resp;
  #line 1436 
  struct ice_aq_desc desc;
  #line 1437 
  enum ice_status status;
  #line 1439 
  cmd_resp = & desc.params.res_owner;
  #line 1441 
  ice_fill_dflt_direct_cmd_desc(& desc,(unsigned short)8);
  #line 1443 
  cmd_resp->res_id = (unsigned short)res;
  #line 1444 
  cmd_resp->access_type = (unsigned short)access;
  #line 1445 
  cmd_resp->res_number = (unsigned int)sdp_number;
  #line 1446 
  cmd_resp->timeout = *timeout;
  #line 1447 
  *timeout = 0U;
  #line 1449 
  status = ice_aq_send_cmd(hw,& desc,(void *)0,(unsigned short)0,cd);
  #line 1462 
  if (res == (unsigned int)ICE_GLOBAL_CFG_LOCK_RES_ID) {
    #line 1463 
    if ((unsigned int)cmd_resp->status == 0U) {
      #line 1464 
      *timeout = cmd_resp->timeout;
      #line 1465 
      return ICE_SUCCESS;
    }
    else 
      #line 1466 
      if ((unsigned int)cmd_resp->status == 1U) {
        #line 1468 
        *timeout = cmd_resp->timeout;
        #line 1469 
        return ICE_ERR_AQ_ERROR;
      }
      else 
        #line 1470 
        if ((unsigned int)cmd_resp->status == 2U) 
                                                  #line 1472 
                                                  return ICE_ERR_AQ_NO_WORK;
    #line 1476 
    *timeout = 0U;
    #line 1477 
    return ICE_ERR_AQ_ERROR;
  }
  #line 1484 
  if (status == ICE_SUCCESS || hw->adminq.sq_last_status == (unsigned int)ICE_AQ_RC_EBUSY) 
    #line 1485 
    *timeout = cmd_resp->timeout;
  #line 1487 
  return status;
}

#line 1500  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_common.c"
static enum ice_status ice_aq_release_res(struct ice_hw *hw, enum ice_aq_res_ids res, u8 sdp_number, struct ice_sq_cd *cd)
{
  #line 1503 
  struct ice_aqc_req_res *cmd;
  #line 1504 
  struct ice_aq_desc desc;
  #line 1506 
  cmd = & desc.params.res_owner;
  #line 1508 
  ice_fill_dflt_direct_cmd_desc(& desc,(unsigned short)9);
  #line 1510 
  cmd->res_id = (unsigned short)res;
  #line 1511 
  cmd->res_number = (unsigned int)sdp_number;
  #line 1513 
  return ice_aq_send_cmd(hw,& desc,(void *)0,(unsigned short)0,cd);
}

#line 1526  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_common.c"
enum ice_status ice_acquire_res(struct ice_hw *hw, enum ice_aq_res_ids res, enum ice_aq_res_access_type access, u32 timeout)
{
  #line 1532 
  enum ice_status status;
  #line 1530 
  u32 delay = 10U;
  #line 1531 
  u32 time_left = timeout;
  #line 1534 
  status = ice_aq_req_res(hw,res,access,(unsigned char)0,& time_left,(struct ice_sq_cd *)0);
  #line 1541 
  if (status == ICE_ERR_AQ_NO_WORK) 
                                    #line 1542 
                                    goto ice_acquire_res_exit;
  #line 1544 
  if (status != ICE_SUCCESS) {
    #line 1545 
    bool branch;
    #line 1545 
    struct _ddebug __UNIQUE_ID_ddebug566 = {.modname = (char *)"ice", .function = (char *)"ice_acquire_res", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_common.c", .format = (char *)"resource %d acquire type %d failed.\n", .lineno = (unsigned int)1545U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 1545 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug566.key.dd_key_false.key,(_Bool)0);
    #line 1545 
    if ((long)((long)((int)branch != 0)) != 0L) {
      #line 1545 
      void *__mptr;
      #line 1545 
      ;
      #line 1545 
      ;
      #line 1545 
      __mptr = (void *)hw;
      #line 1545 
      __dynamic_dev_dbg(& __UNIQUE_ID_ddebug566,& (((struct ice_pf *)(__mptr + 18446744073709549512U))->pdev)->dev,(char *)"resource %d acquire type %d failed.\n",(unsigned int)res,(unsigned int)access);
    }
  }
  #line 1549 
  timeout = time_left;
  #line 1550 
  while ((status != ICE_SUCCESS && timeout != 0U) && time_left != 0U) {
    #line 1551 
    if (0 != 0 && delay <= 5U) 
      #line 1551 
      if (0 != 0) 
        #line 1551 
        if (delay * 1000U > 19999U) 
                                    #line 1551 
                                    __bad_udelay(); else 
                                                         #line 1551 
                                                         __const_udelay((unsigned long)(delay * 1000U) * 4295UL);
      else 
           #line 1551 
           __udelay((unsigned long)(delay * 1000U));
    else {
      #line 1551 
      unsigned long __ms = (unsigned long)delay;
      #line 1551 
      while (1) {
        #line 1551 
        unsigned long tmp_1;
        #line 1551 
        tmp_1 = __ms;
        #line 1551 
        __ms --;
        #line 1551 
        ;
        #line 1551 
        if (! (tmp_1 != 0UL)) 
                              #line 1551 
                              break;
        #line 1551 
        __const_udelay(4295000UL);
      }
    }
    #line 1552 
    if (timeout > delay) 
                         #line 1552 
                         timeout -= delay; else 
                                                #line 1552 
                                                timeout = 0U;
    #line 1553 
    status = ice_aq_req_res(hw,res,access,(unsigned char)0,& time_left,(struct ice_sq_cd *)0);
    #line 1555 
    if (status == ICE_ERR_AQ_NO_WORK) 
                                      #line 1557 
                                      break;
    #line 1559 
    if (status == ICE_SUCCESS) 
                               #line 1561 
                               break;
  }
  #line 1563 
  if (status != ICE_SUCCESS && status != ICE_ERR_AQ_NO_WORK) {
    #line 1564 
    bool branch_0;
    #line 1564 
    struct _ddebug __UNIQUE_ID_ddebug567 = {.modname = (char *)"ice", .function = (char *)"ice_acquire_res", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_common.c", .format = (char *)"resource acquire timed out.\n", .lineno = (unsigned int)1564U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 1564 
    branch_0 = arch_static_branch(& __UNIQUE_ID_ddebug567.key.dd_key_false.key,(_Bool)0);
    #line 1564 
    if ((long)((long)((int)branch_0 != 0)) != 0L) {
      #line 1564 
      void *__mptr_0;
      #line 1564 
      __mptr_0 = (void *)hw;
      #line 1564 
      __dynamic_dev_dbg(& __UNIQUE_ID_ddebug567,& (((struct ice_pf *)(__mptr_0 + 18446744073709549512U))->pdev)->dev,(char *)"resource acquire timed out.\n");
    }
  }
  #line 1566 
  ice_acquire_res_exit: 
                        #line 1566 
  ;
  #line 1567 
  if (status == ICE_ERR_AQ_NO_WORK) 
    #line 1568 
    if (access == (unsigned int)ICE_RES_WRITE) {
      #line 1569 
      bool branch_1;
      #line 1569 
      struct _ddebug __UNIQUE_ID_ddebug568 = {.modname = (char *)"ice", .function = (char *)"ice_acquire_res", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_common.c", .format = (char *)"resource indicates no work to do.\n", .lineno = (unsigned int)1569U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 1569 
      branch_1 = arch_static_branch(& __UNIQUE_ID_ddebug568.key.dd_key_false.key,(_Bool)0);
      #line 1569 
      if ((long)((long)((int)branch_1 != 0)) != 0L) {
        #line 1569 
        void *__mptr_1;
        #line 1569 
        __mptr_1 = (void *)hw;
        #line 1569 
        __dynamic_dev_dbg(& __UNIQUE_ID_ddebug568,& (((struct ice_pf *)(__mptr_1 + 18446744073709549512U))->pdev)->dev,(char *)"resource indicates no work to do.\n");
      }
    }
    else {
      #line 1572 
      bool branch_2;
      #line 1572 
      struct _ddebug __UNIQUE_ID_ddebug569 = {.modname = (char *)"ice", .function = (char *)"ice_acquire_res", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_common.c", .format = (char *)"Warning: ICE_ERR_AQ_NO_WORK not expected\n", .lineno = (unsigned int)1572U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 1572 
      branch_2 = arch_static_branch(& __UNIQUE_ID_ddebug569.key.dd_key_false.key,(_Bool)0);
      #line 1572 
      if ((long)((long)((int)branch_2 != 0)) != 0L) {
        #line 1572 
        void *__mptr_2;
        #line 1572 
        __mptr_2 = (void *)hw;
        #line 1572 
        __dynamic_dev_dbg(& __UNIQUE_ID_ddebug569,& (((struct ice_pf *)(__mptr_2 + 18446744073709549512U))->pdev)->dev,(char *)"Warning: ICE_ERR_AQ_NO_WORK not expected\n");
      }
    }
  #line 1575 
  return status;
}

#line 1585  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_common.c"
void ice_release_res(struct ice_hw *hw, enum ice_aq_res_ids res)
{
  #line 1587 
  enum ice_status status;
  #line 1588 
  u32 total_delay = 0U;
  #line 1590 
  status = ice_aq_release_res(hw,res,(unsigned char)0,(struct ice_sq_cd *)0);
  #line 1595 
  while (status == ICE_ERR_AQ_TIMEOUT && hw->adminq.sq_cmd_timeout > total_delay) {
    #line 1597 
    __const_udelay(4295000UL);
    #line 1598 
    status = ice_aq_release_res(hw,res,(unsigned char)0,(struct ice_sq_cd *)0);
    #line 1599 
    total_delay ++;
  }
  #line 1601 
  return;
}

#line 1612  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_common.c"
static u32 ice_get_num_per_func(struct ice_hw *hw, u32 max)
{
  #line 1614 
  u8 funcs;
  #line 1617 
  if (0 != 0) 
              #line 1617 
              funcs = (unsigned char)((((((((((unsigned long long)hw->dev_caps.common_cap.valid_functions & 1ULL) != 0ULL) + (((unsigned long long)hw->dev_caps.common_cap.valid_functions & 2ULL) != 0ULL)) + (((unsigned long long)hw->dev_caps.common_cap.valid_functions & 4ULL) != 0ULL)) + (((unsigned long long)hw->dev_caps.common_cap.valid_functions & 8ULL) != 0ULL)) + (((unsigned long long)hw->dev_caps.common_cap.valid_functions & 16ULL) != 0ULL)) + (((unsigned long long)hw->dev_caps.common_cap.valid_functions & 32ULL) != 0ULL)) + (((unsigned long long)hw->dev_caps.common_cap.valid_functions & 64ULL) != 0ULL)) + (((unsigned long long)hw->dev_caps.common_cap.valid_functions & 128ULL) != 0ULL));
  else {
    #line 1617 
    funcs = (unsigned char)__arch_hweight8(hw->dev_caps.common_cap.valid_functions & 255U);
  }
  #line 1620 
  if ((unsigned int)funcs == 0U) 
                                 #line 1621 
                                 return 0U;
  #line 1623 
  return max / (unsigned int)funcs;
}

#line 1636  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_common.c"
static void ice_parse_caps(struct ice_hw *hw, void *buf, u32 cap_count, enum ice_adminq_opc opc)
{
  #line 1639 
  struct ice_aqc_list_caps_elem *cap_resp;
  #line 1642 
  struct ice_hw_common_caps *caps;
  #line 1643 
  char *prefix;
  #line 1644 
  u32 i;
  #line 1640 
  struct ice_hw_func_caps *func_p = (struct ice_hw_func_caps *)0;
  #line 1641 
  struct ice_hw_dev_caps *dev_p = (struct ice_hw_dev_caps *)0;
  #line 1646 
  if (buf == (void *)0) 
                        #line 1647 
                        return;
  #line 1649 
  cap_resp = (struct ice_aqc_list_caps_elem *)buf;
  #line 1651 
  if (opc == (unsigned int)ice_aqc_opc_list_dev_caps) {
    #line 1652 
    dev_p = & hw->dev_caps;
    #line 1653 
    caps = & dev_p->common_cap;
    #line 1654 
    prefix = (char *)"dev cap";
  }
  else 
    #line 1655 
    if (opc == (unsigned int)ice_aqc_opc_list_func_caps) {
      #line 1656 
      func_p = & hw->func_caps;
      #line 1657 
      caps = & func_p->common_cap;
      #line 1658 
      prefix = (char *)"func cap";
    }
    else {
      {
        #line 1660 
        bool branch;
        #line 1660 
        struct _ddebug __UNIQUE_ID_ddebug570 = {.modname = (char *)"ice", .function = (char *)"ice_parse_caps", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_common.c", .format = (char *)"wrong opcode\n", .lineno = (unsigned int)1660U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
        #line 1660 
        branch = arch_static_branch(& __UNIQUE_ID_ddebug570.key.dd_key_false.key,(_Bool)0);
        #line 1660 
        if ((long)((long)((int)branch != 0)) != 0L) {
          #line 1660 
          void *__mptr;
          #line 1660 
          __mptr = (void *)hw;
          #line 1660 
          __dynamic_dev_dbg(& __UNIQUE_ID_ddebug570,& (((struct ice_pf *)(__mptr + 18446744073709549512U))->pdev)->dev,(char *)"wrong opcode\n");
        }
      }
      #line 1661 
      return;
    }
  #line 1664 
  i = 0U;
  #line 1664 
  while (caps != (struct ice_hw_common_caps *)0 && i < cap_count) {
    {
      #line 1665 
      u32 logical_id = cap_resp->logical_id;
      #line 1666 
      u32 phys_id = cap_resp->phys_id;
      #line 1667 
      u32 number = cap_resp->number;
      #line 1668 
      u16 cap = cap_resp->cap;
      #line 1670 
      switch ((int)cap) {
        #line 1671 
        case 5: 
                #line 1671 
        ;
        #line 1672 
        caps->valid_functions = number;
        {
          #line 1673 
          bool branch_0;
          #line 1673 
          struct _ddebug __UNIQUE_ID_ddebug571 = {.modname = (char *)"ice", .function = (char *)"ice_parse_caps", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_common.c", .format = (char *)"%s: valid_functions (bitmap) = %d\n", .lineno = (unsigned int)1673U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
          #line 1673 
          branch_0 = arch_static_branch(& __UNIQUE_ID_ddebug571.key.dd_key_false.key,(_Bool)0);
          #line 1673 
          if ((long)((long)((int)branch_0 != 0)) != 0L) {
            #line 1673 
            void *__mptr_0;
            #line 1673 
            ;
            #line 1673 
            ;
            #line 1673 
            __mptr_0 = (void *)hw;
            #line 1673 
            __dynamic_dev_dbg(& __UNIQUE_ID_ddebug571,& (((struct ice_pf *)(__mptr_0 + 18446744073709549512U))->pdev)->dev,(char *)"%s: valid_functions (bitmap) = %d\n",prefix,caps->valid_functions);
          }
        }
        #line 1678 
        if (dev_p != (struct ice_hw_dev_caps *)0) 
          #line 1679 
          if (0 != 0) 
                      #line 1679 
                      dev_p->num_funcs = ((unsigned int)((((((((((unsigned long long)number & 1ULL) != 0ULL) + (((unsigned long long)number & 2ULL) != 0ULL)) + (((unsigned long long)number & 4ULL) != 0ULL)) + (((unsigned long long)number & 8ULL) != 0ULL)) + (((unsigned long long)number & 16ULL) != 0ULL)) + (((unsigned long long)number & 32ULL) != 0ULL)) + (((unsigned long long)number & 64ULL) != 0ULL)) + (((unsigned long long)number & 128ULL) != 0ULL)) + (unsigned int)((((((((((unsigned long long)(number >> 8) & 1ULL) != 0ULL) + (((unsigned long long)(number >> 8) & 2ULL) != 0ULL)) + (((unsigned long long)(number >> 8) & 4ULL) != 0ULL)) + (((unsigned long long)(number >> 8) & 8ULL) != 0ULL)) + (((unsigned long long)(number >> 8) & 16ULL) != 0ULL)) + (((unsigned long long)(number >> 8) & 32ULL) != 0ULL)) + (((unsigned long long)(number >> 8) & 64ULL) != 0ULL)) + (((unsigned long long)(number >> 8) & 128ULL) != 0ULL))) + ((unsigned int)((((((((((unsigned long long)(number >> 16) & 1ULL) != 0ULL) + (((unsigned long long)(number >> 16) & 2ULL) != 0ULL)) + (((unsigned long long)(number >> 16) & 4ULL) != 0ULL)) + (((unsigned long long)(number >> 16) & 8ULL) != 0ULL)) + (((unsigned long long)(number >> 16) & 16ULL) != 0ULL)) + (((unsigned long long)(number >> 16) & 32ULL) != 0ULL)) + (((unsigned long long)(number >> 16) & 64ULL) != 0ULL)) + (((unsigned long long)(number >> 16) & 128ULL) != 0ULL)) + (unsigned int)((((((((((unsigned long long)(number >> 24) & 1ULL) != 0ULL) + (((unsigned long long)(number >> 24) & 2ULL) != 0ULL)) + (((unsigned long long)(number >> 24) & 4ULL) != 0ULL)) + (((unsigned long long)(number >> 24) & 8ULL) != 0ULL)) + (((unsigned long long)(number >> 24) & 16ULL) != 0ULL)) + (((unsigned long long)(number >> 24) & 32ULL) != 0ULL)) + (((unsigned long long)(number >> 24) & 64ULL) != 0ULL)) + (((unsigned long long)(number >> 24) & 128ULL) != 0ULL))); else 
                                                                    #line 1679 
                                                                    dev_p->num_funcs = __arch_hweight32(number);
        #line 1680 
        break;
        #line 1681 
        case 18: 
                 #line 1681 
        ;
        #line 1682 
        caps->sr_iov_1_1 = (unsigned char)(number == 1U);
        {
          #line 1683 
          bool branch_1;
          #line 1683 
          struct _ddebug __UNIQUE_ID_ddebug572 = {.modname = (char *)"ice", .function = (char *)"ice_parse_caps", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_common.c", .format = (char *)"%s: sr_iov_1_1 = %d\n", .lineno = (unsigned int)1683U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
          #line 1683 
          branch_1 = arch_static_branch(& __UNIQUE_ID_ddebug572.key.dd_key_false.key,(_Bool)0);
          #line 1683 
          if ((long)((long)((int)branch_1 != 0)) != 0L) {
            #line 1683 
            void *__mptr_1;
            #line 1683 
            ;
            #line 1683 
            ;
            #line 1683 
            __mptr_1 = (void *)hw;
            #line 1683 
            __dynamic_dev_dbg(& __UNIQUE_ID_ddebug572,& (((struct ice_pf *)(__mptr_1 + 18446744073709549512U))->pdev)->dev,(char *)"%s: sr_iov_1_1 = %d\n",prefix,(int)caps->sr_iov_1_1);
          }
        }
        #line 1686 
        break;
        #line 1687 
        case 19: 
                 #line 1687 
        ;
        #line 1688 
        if (dev_p != (struct ice_hw_dev_caps *)0) {
          #line 1689 
          dev_p->num_vfs_exposed = number;
          {
            #line 1690 
            bool branch_2;
            #line 1690 
            struct _ddebug __UNIQUE_ID_ddebug573 = {.modname = (char *)"ice", .function = (char *)"ice_parse_caps", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_common.c", .format = (char *)"%s: num_vfs_exposed = %d\n", .lineno = (unsigned int)1690U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
            #line 1690 
            branch_2 = arch_static_branch(& __UNIQUE_ID_ddebug573.key.dd_key_false.key,(_Bool)0);
            #line 1690 
            if ((long)((long)((int)branch_2 != 0)) != 0L) {
              #line 1690 
              void *__mptr_2;
              #line 1690 
              ;
              #line 1690 
              ;
              #line 1690 
              __mptr_2 = (void *)hw;
              #line 1690 
              __dynamic_dev_dbg(& __UNIQUE_ID_ddebug573,& (((struct ice_pf *)(__mptr_2 + 18446744073709549512U))->pdev)->dev,(char *)"%s: num_vfs_exposed = %d\n",prefix,dev_p->num_vfs_exposed);
            }
          }
        }
        else 
          #line 1693 
          if (func_p != (struct ice_hw_func_caps *)0) {
            #line 1694 
            func_p->num_allocd_vfs = number;
            #line 1695 
            func_p->vf_base_id = logical_id;
            {
              #line 1696 
              bool branch_3;
              #line 1696 
              struct _ddebug __UNIQUE_ID_ddebug574 = {.modname = (char *)"ice", .function = (char *)"ice_parse_caps", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_common.c", .format = (char *)"%s: num_allocd_vfs = %d\n", .lineno = (unsigned int)1696U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
              #line 1696 
              branch_3 = arch_static_branch(& __UNIQUE_ID_ddebug574.key.dd_key_false.key,(_Bool)0);
              #line 1696 
              if ((long)((long)((int)branch_3 != 0)) != 0L) {
                #line 1696 
                void *__mptr_3;
                #line 1696 
                ;
                #line 1696 
                ;
                #line 1696 
                __mptr_3 = (void *)hw;
                #line 1696 
                __dynamic_dev_dbg(& __UNIQUE_ID_ddebug574,& (((struct ice_pf *)(__mptr_3 + 18446744073709549512U))->pdev)->dev,(char *)"%s: num_allocd_vfs = %d\n",prefix,func_p->num_allocd_vfs);
              }
            }
            {
              #line 1699 
              bool branch_4;
              #line 1699 
              struct _ddebug __UNIQUE_ID_ddebug575 = {.modname = (char *)"ice", .function = (char *)"ice_parse_caps", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_common.c", .format = (char *)"%s: vf_base_id = %d\n", .lineno = (unsigned int)1699U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
              #line 1699 
              branch_4 = arch_static_branch(& __UNIQUE_ID_ddebug575.key.dd_key_false.key,(_Bool)0);
              #line 1699 
              if ((long)((long)((int)branch_4 != 0)) != 0L) {
                #line 1699 
                void *__mptr_4;
                #line 1699 
                ;
                #line 1699 
                ;
                #line 1699 
                __mptr_4 = (void *)hw;
                #line 1699 
                __dynamic_dev_dbg(& __UNIQUE_ID_ddebug575,& (((struct ice_pf *)(__mptr_4 + 18446744073709549512U))->pdev)->dev,(char *)"%s: vf_base_id = %d\n",prefix,func_p->vf_base_id);
              }
            }
          }
        #line 1703 
        break;
        #line 1704 
        case 23: 
                 #line 1704 
        ;
        #line 1705 
        if (dev_p != (struct ice_hw_dev_caps *)0) {
          #line 1706 
          dev_p->num_vsi_allocd_to_host = number;
          {
            #line 1707 
            bool branch_5;
            #line 1707 
            struct _ddebug __UNIQUE_ID_ddebug576 = {.modname = (char *)"ice", .function = (char *)"ice_parse_caps", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_common.c", .format = (char *)"%s: num_vsi_allocd_to_host = %d\n", .lineno = (unsigned int)1707U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
            #line 1707 
            branch_5 = arch_static_branch(& __UNIQUE_ID_ddebug576.key.dd_key_false.key,(_Bool)0);
            #line 1707 
            if ((long)((long)((int)branch_5 != 0)) != 0L) {
              #line 1707 
              void *__mptr_5;
              #line 1707 
              ;
              #line 1707 
              ;
              #line 1707 
              __mptr_5 = (void *)hw;
              #line 1707 
              __dynamic_dev_dbg(& __UNIQUE_ID_ddebug576,& (((struct ice_pf *)(__mptr_5 + 18446744073709549512U))->pdev)->dev,(char *)"%s: num_vsi_allocd_to_host = %d\n",prefix,dev_p->num_vsi_allocd_to_host);
            }
          }
        }
        else 
          #line 1711 
          if (func_p != (struct ice_hw_func_caps *)0) {
            #line 1712 
            func_p->guar_num_vsi = ice_get_num_per_func(hw,768U);
            {
              #line 1714 
              bool branch_6;
              #line 1714 
              struct _ddebug __UNIQUE_ID_ddebug577 = {.modname = (char *)"ice", .function = (char *)"ice_parse_caps", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_common.c", .format = (char *)"%s: guar_num_vsi (fw) = %d\n", .lineno = (unsigned int)1714U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
              #line 1714 
              branch_6 = arch_static_branch(& __UNIQUE_ID_ddebug577.key.dd_key_false.key,(_Bool)0);
              #line 1714 
              if ((long)((long)((int)branch_6 != 0)) != 0L) {
                #line 1714 
                void *__mptr_6;
                #line 1714 
                ;
                #line 1714 
                ;
                #line 1714 
                __mptr_6 = (void *)hw;
                #line 1714 
                __dynamic_dev_dbg(& __UNIQUE_ID_ddebug577,& (((struct ice_pf *)(__mptr_6 + 18446744073709549512U))->pdev)->dev,(char *)"%s: guar_num_vsi (fw) = %d\n",prefix,number);
              }
            }
            {
              #line 1717 
              bool branch_7;
              #line 1717 
              struct _ddebug __UNIQUE_ID_ddebug578 = {.modname = (char *)"ice", .function = (char *)"ice_parse_caps", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_common.c", .format = (char *)"%s: guar_num_vsi = %d\n", .lineno = (unsigned int)1717U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
              #line 1717 
              branch_7 = arch_static_branch(& __UNIQUE_ID_ddebug578.key.dd_key_false.key,(_Bool)0);
              #line 1717 
              if ((long)((long)((int)branch_7 != 0)) != 0L) {
                #line 1717 
                void *__mptr_7;
                #line 1717 
                ;
                #line 1717 
                ;
                #line 1717 
                __mptr_7 = (void *)hw;
                #line 1717 
                __dynamic_dev_dbg(& __UNIQUE_ID_ddebug578,& (((struct ice_pf *)(__mptr_7 + 18446744073709549512U))->pdev)->dev,(char *)"%s: guar_num_vsi = %d\n",prefix,func_p->guar_num_vsi);
              }
            }
          }
        #line 1721 
        break;
        #line 1722 
        case 24: 
                 #line 1722 
        ;
        #line 1723 
        caps->dcb = (unsigned char)(number == 1U);
        #line 1724 
        caps->active_tc_bitmap = logical_id;
        #line 1725 
        caps->maxtc = phys_id;
        {
          #line 1726 
          bool branch_8;
          #line 1726 
          struct _ddebug __UNIQUE_ID_ddebug579 = {.modname = (char *)"ice", .function = (char *)"ice_parse_caps", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_common.c", .format = (char *)"%s: dcb = %d\n", .lineno = (unsigned int)1726U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
          #line 1726 
          branch_8 = arch_static_branch(& __UNIQUE_ID_ddebug579.key.dd_key_false.key,(_Bool)0);
          #line 1726 
          if ((long)((long)((int)branch_8 != 0)) != 0L) {
            #line 1726 
            void *__mptr_8;
            #line 1726 
            ;
            #line 1726 
            ;
            #line 1726 
            __mptr_8 = (void *)hw;
            #line 1726 
            __dynamic_dev_dbg(& __UNIQUE_ID_ddebug579,& (((struct ice_pf *)(__mptr_8 + 18446744073709549512U))->pdev)->dev,(char *)"%s: dcb = %d\n",prefix,(int)caps->dcb);
          }
        }
        {
          #line 1728 
          bool branch_9;
          #line 1728 
          struct _ddebug __UNIQUE_ID_ddebug580 = {.modname = (char *)"ice", .function = (char *)"ice_parse_caps", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_common.c", .format = (char *)"%s: active_tc_bitmap = %d\n", .lineno = (unsigned int)1728U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
          #line 1728 
          branch_9 = arch_static_branch(& __UNIQUE_ID_ddebug580.key.dd_key_false.key,(_Bool)0);
          #line 1728 
          if ((long)((long)((int)branch_9 != 0)) != 0L) {
            #line 1728 
            void *__mptr_9;
            #line 1728 
            ;
            #line 1728 
            ;
            #line 1728 
            __mptr_9 = (void *)hw;
            #line 1728 
            __dynamic_dev_dbg(& __UNIQUE_ID_ddebug580,& (((struct ice_pf *)(__mptr_9 + 18446744073709549512U))->pdev)->dev,(char *)"%s: active_tc_bitmap = %d\n",prefix,caps->active_tc_bitmap);
          }
        }
        {
          #line 1731 
          bool branch_10;
          #line 1731 
          struct _ddebug __UNIQUE_ID_ddebug581 = {.modname = (char *)"ice", .function = (char *)"ice_parse_caps", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_common.c", .format = (char *)"%s: maxtc = %d\n", .lineno = (unsigned int)1731U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
          #line 1731 
          branch_10 = arch_static_branch(& __UNIQUE_ID_ddebug581.key.dd_key_false.key,(_Bool)0);
          #line 1731 
          if ((long)((long)((int)branch_10 != 0)) != 0L) {
            #line 1731 
            void *__mptr_10;
            #line 1731 
            ;
            #line 1731 
            ;
            #line 1731 
            __mptr_10 = (void *)hw;
            #line 1731 
            __dynamic_dev_dbg(& __UNIQUE_ID_ddebug581,& (((struct ice_pf *)(__mptr_10 + 18446744073709549512U))->pdev)->dev,(char *)"%s: maxtc = %d\n",prefix,caps->maxtc);
          }
        }
        #line 1733 
        break;
        #line 1734 
        case 64: 
                 #line 1734 
        ;
        #line 1735 
        caps->rss_table_size = (unsigned short)number;
        #line 1736 
        caps->rss_table_entry_width = (unsigned char)logical_id;
        {
          #line 1737 
          bool branch_11;
          #line 1737 
          struct _ddebug __UNIQUE_ID_ddebug582 = {.modname = (char *)"ice", .function = (char *)"ice_parse_caps", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_common.c", .format = (char *)"%s: rss_table_size = %d\n", .lineno = (unsigned int)1737U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
          #line 1737 
          branch_11 = arch_static_branch(& __UNIQUE_ID_ddebug582.key.dd_key_false.key,(_Bool)0);
          #line 1737 
          if ((long)((long)((int)branch_11 != 0)) != 0L) {
            #line 1737 
            void *__mptr_11;
            #line 1737 
            ;
            #line 1737 
            ;
            #line 1737 
            __mptr_11 = (void *)hw;
            #line 1737 
            __dynamic_dev_dbg(& __UNIQUE_ID_ddebug582,& (((struct ice_pf *)(__mptr_11 + 18446744073709549512U))->pdev)->dev,(char *)"%s: rss_table_size = %d\n",prefix,(int)caps->rss_table_size);
          }
        }
        {
          #line 1740 
          bool branch_12;
          #line 1740 
          struct _ddebug __UNIQUE_ID_ddebug583 = {.modname = (char *)"ice", .function = (char *)"ice_parse_caps", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_common.c", .format = (char *)"%s: rss_table_entry_width = %d\n", .lineno = (unsigned int)1740U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
          #line 1740 
          branch_12 = arch_static_branch(& __UNIQUE_ID_ddebug583.key.dd_key_false.key,(_Bool)0);
          #line 1740 
          if ((long)((long)((int)branch_12 != 0)) != 0L) {
            #line 1740 
            void *__mptr_12;
            #line 1740 
            ;
            #line 1740 
            ;
            #line 1740 
            __mptr_12 = (void *)hw;
            #line 1740 
            __dynamic_dev_dbg(& __UNIQUE_ID_ddebug583,& (((struct ice_pf *)(__mptr_12 + 18446744073709549512U))->pdev)->dev,(char *)"%s: rss_table_entry_width = %d\n",prefix,(int)caps->rss_table_entry_width);
          }
        }
        #line 1743 
        break;
        #line 1744 
        case 65: 
                 #line 1744 
        ;
        #line 1745 
        caps->num_rxq = (unsigned short)number;
        #line 1746 
        caps->rxq_first_id = (unsigned short)phys_id;
        {
          #line 1747 
          bool branch_13;
          #line 1747 
          struct _ddebug __UNIQUE_ID_ddebug584 = {.modname = (char *)"ice", .function = (char *)"ice_parse_caps", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_common.c", .format = (char *)"%s: num_rxq = %d\n", .lineno = (unsigned int)1747U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
          #line 1747 
          branch_13 = arch_static_branch(& __UNIQUE_ID_ddebug584.key.dd_key_false.key,(_Bool)0);
          #line 1747 
          if ((long)((long)((int)branch_13 != 0)) != 0L) {
            #line 1747 
            void *__mptr_13;
            #line 1747 
            ;
            #line 1747 
            ;
            #line 1747 
            __mptr_13 = (void *)hw;
            #line 1747 
            __dynamic_dev_dbg(& __UNIQUE_ID_ddebug584,& (((struct ice_pf *)(__mptr_13 + 18446744073709549512U))->pdev)->dev,(char *)"%s: num_rxq = %d\n",prefix,(int)caps->num_rxq);
          }
        }
        {
          #line 1750 
          bool branch_14;
          #line 1750 
          struct _ddebug __UNIQUE_ID_ddebug585 = {.modname = (char *)"ice", .function = (char *)"ice_parse_caps", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_common.c", .format = (char *)"%s: rxq_first_id = %d\n", .lineno = (unsigned int)1750U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
          #line 1750 
          branch_14 = arch_static_branch(& __UNIQUE_ID_ddebug585.key.dd_key_false.key,(_Bool)0);
          #line 1750 
          if ((long)((long)((int)branch_14 != 0)) != 0L) {
            #line 1750 
            void *__mptr_14;
            #line 1750 
            ;
            #line 1750 
            ;
            #line 1750 
            __mptr_14 = (void *)hw;
            #line 1750 
            __dynamic_dev_dbg(& __UNIQUE_ID_ddebug585,& (((struct ice_pf *)(__mptr_14 + 18446744073709549512U))->pdev)->dev,(char *)"%s: rxq_first_id = %d\n",prefix,(int)caps->rxq_first_id);
          }
        }
        #line 1753 
        break;
        #line 1754 
        case 66: 
                 #line 1754 
        ;
        #line 1755 
        caps->num_txq = (unsigned short)number;
        #line 1756 
        caps->txq_first_id = (unsigned short)phys_id;
        {
          #line 1757 
          bool branch_15;
          #line 1757 
          struct _ddebug __UNIQUE_ID_ddebug586 = {.modname = (char *)"ice", .function = (char *)"ice_parse_caps", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_common.c", .format = (char *)"%s: num_txq = %d\n", .lineno = (unsigned int)1757U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
          #line 1757 
          branch_15 = arch_static_branch(& __UNIQUE_ID_ddebug586.key.dd_key_false.key,(_Bool)0);
          #line 1757 
          if ((long)((long)((int)branch_15 != 0)) != 0L) {
            #line 1757 
            void *__mptr_15;
            #line 1757 
            ;
            #line 1757 
            ;
            #line 1757 
            __mptr_15 = (void *)hw;
            #line 1757 
            __dynamic_dev_dbg(& __UNIQUE_ID_ddebug586,& (((struct ice_pf *)(__mptr_15 + 18446744073709549512U))->pdev)->dev,(char *)"%s: num_txq = %d\n",prefix,(int)caps->num_txq);
          }
        }
        {
          #line 1760 
          bool branch_16;
          #line 1760 
          struct _ddebug __UNIQUE_ID_ddebug587 = {.modname = (char *)"ice", .function = (char *)"ice_parse_caps", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_common.c", .format = (char *)"%s: txq_first_id = %d\n", .lineno = (unsigned int)1760U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
          #line 1760 
          branch_16 = arch_static_branch(& __UNIQUE_ID_ddebug587.key.dd_key_false.key,(_Bool)0);
          #line 1760 
          if ((long)((long)((int)branch_16 != 0)) != 0L) {
            #line 1760 
            void *__mptr_16;
            #line 1760 
            ;
            #line 1760 
            ;
            #line 1760 
            __mptr_16 = (void *)hw;
            #line 1760 
            __dynamic_dev_dbg(& __UNIQUE_ID_ddebug587,& (((struct ice_pf *)(__mptr_16 + 18446744073709549512U))->pdev)->dev,(char *)"%s: txq_first_id = %d\n",prefix,(int)caps->txq_first_id);
          }
        }
        #line 1763 
        break;
        #line 1764 
        case 67: 
                 #line 1764 
        ;
        #line 1765 
        caps->num_msix_vectors = (unsigned short)number;
        #line 1766 
        caps->msix_vector_first_id = (unsigned short)phys_id;
        {
          #line 1767 
          bool branch_17;
          #line 1767 
          struct _ddebug __UNIQUE_ID_ddebug588 = {.modname = (char *)"ice", .function = (char *)"ice_parse_caps", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_common.c", .format = (char *)"%s: num_msix_vectors = %d\n", .lineno = (unsigned int)1767U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
          #line 1767 
          branch_17 = arch_static_branch(& __UNIQUE_ID_ddebug588.key.dd_key_false.key,(_Bool)0);
          #line 1767 
          if ((long)((long)((int)branch_17 != 0)) != 0L) {
            #line 1767 
            void *__mptr_17;
            #line 1767 
            ;
            #line 1767 
            ;
            #line 1767 
            __mptr_17 = (void *)hw;
            #line 1767 
            __dynamic_dev_dbg(& __UNIQUE_ID_ddebug588,& (((struct ice_pf *)(__mptr_17 + 18446744073709549512U))->pdev)->dev,(char *)"%s: num_msix_vectors = %d\n",prefix,(int)caps->num_msix_vectors);
          }
        }
        {
          #line 1770 
          bool branch_18;
          #line 1770 
          struct _ddebug __UNIQUE_ID_ddebug589 = {.modname = (char *)"ice", .function = (char *)"ice_parse_caps", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_common.c", .format = (char *)"%s: msix_vector_first_id = %d\n", .lineno = (unsigned int)1770U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
          #line 1770 
          branch_18 = arch_static_branch(& __UNIQUE_ID_ddebug589.key.dd_key_false.key,(_Bool)0);
          #line 1770 
          if ((long)((long)((int)branch_18 != 0)) != 0L) {
            #line 1770 
            void *__mptr_18;
            #line 1770 
            ;
            #line 1770 
            ;
            #line 1770 
            __mptr_18 = (void *)hw;
            #line 1770 
            __dynamic_dev_dbg(& __UNIQUE_ID_ddebug589,& (((struct ice_pf *)(__mptr_18 + 18446744073709549512U))->pdev)->dev,(char *)"%s: msix_vector_first_id = %d\n",prefix,(int)caps->msix_vector_first_id);
          }
        }
        #line 1773 
        break;
        #line 1774 
        case 71: 
                 #line 1774 
        ;
        #line 1775 
        caps->max_mtu = (unsigned short)number;
        {
          #line 1776 
          bool branch_19;
          #line 1776 
          struct _ddebug __UNIQUE_ID_ddebug590 = {.modname = (char *)"ice", .function = (char *)"ice_parse_caps", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_common.c", .format = (char *)"%s: max_mtu = %d\n", .lineno = (unsigned int)1776U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
          #line 1776 
          branch_19 = arch_static_branch(& __UNIQUE_ID_ddebug590.key.dd_key_false.key,(_Bool)0);
          #line 1776 
          if ((long)((long)((int)branch_19 != 0)) != 0L) {
            #line 1776 
            void *__mptr_19;
            #line 1776 
            ;
            #line 1776 
            ;
            #line 1776 
            __mptr_19 = (void *)hw;
            #line 1776 
            __dynamic_dev_dbg(& __UNIQUE_ID_ddebug590,& (((struct ice_pf *)(__mptr_19 + 18446744073709549512U))->pdev)->dev,(char *)"%s: max_mtu = %d\n",prefix,(int)caps->max_mtu);
          }
        }
        #line 1778 
        break;
        #line 1779 
        default: 
                 #line 1779 
        ;
        {
          #line 1780 
          bool branch_20;
          #line 1780 
          struct _ddebug __UNIQUE_ID_ddebug591 = {.modname = (char *)"ice", .function = (char *)"ice_parse_caps", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_common.c", .format = (char *)"%s: unknown capability[%d]: 0x%x\n", .lineno = (unsigned int)1780U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
          #line 1780 
          branch_20 = arch_static_branch(& __UNIQUE_ID_ddebug591.key.dd_key_false.key,(_Bool)0);
          #line 1780 
          if ((long)((long)((int)branch_20 != 0)) != 0L) {
            #line 1780 
            void *__mptr_20;
            #line 1780 
            ;
            #line 1780 
            ;
            #line 1780 
            ;
            #line 1780 
            __mptr_20 = (void *)hw;
            #line 1780 
            __dynamic_dev_dbg(& __UNIQUE_ID_ddebug591,& (((struct ice_pf *)(__mptr_20 + 18446744073709549512U))->pdev)->dev,(char *)"%s: unknown capability[%d]: 0x%x\n",prefix,i,(int)cap);
          }
        }
        #line 1783 
        break;
      }
    }
    #line 1664 
    i ++;
    #line 1664 
    cap_resp ++;
  }
  #line 1791 
  if (hw->dev_caps.num_funcs > 4U) {
    #line 1793 
    caps->maxtc = 4U;
    {
      #line 1794 
      bool branch_21;
      #line 1794 
      struct _ddebug __UNIQUE_ID_ddebug592 = {.modname = (char *)"ice", .function = (char *)"ice_parse_caps", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_common.c", .format = (char *)"%s: maxtc = %d (based on #ports)\n", .lineno = (unsigned int)1794U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 1794 
      branch_21 = arch_static_branch(& __UNIQUE_ID_ddebug592.key.dd_key_false.key,(_Bool)0);
      #line 1794 
      if ((long)((long)((int)branch_21 != 0)) != 0L) {
        #line 1794 
        void *__mptr_21;
        #line 1794 
        ;
        #line 1794 
        ;
        #line 1794 
        __mptr_21 = (void *)hw;
        #line 1794 
        __dynamic_dev_dbg(& __UNIQUE_ID_ddebug592,& (((struct ice_pf *)(__mptr_21 + 18446744073709549512U))->pdev)->dev,(char *)"%s: maxtc = %d (based on #ports)\n",prefix,caps->maxtc);
      }
    }
  }
  #line 1797 
  return;
}

#line 1813  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_common.c"
static enum ice_status ice_aq_discover_caps(struct ice_hw *hw, void *buf, u16 buf_size, u32 *cap_count, enum ice_adminq_opc opc, struct ice_sq_cd *cd)
{
  #line 1816 
  struct ice_aqc_list_caps *cmd;
  #line 1817 
  struct ice_aq_desc desc;
  #line 1818 
  enum ice_status status;
  #line 1820 
  cmd = & desc.params.get_cap;
  #line 1822 
  if ((unsigned int)opc + 4294967286U > 1U) 
                                            #line 1824 
                                            return ICE_ERR_PARAM;
  #line 1826 
  ice_fill_dflt_direct_cmd_desc(& desc,(unsigned short)((int)((unsigned short)opc)));
  #line 1828 
  status = ice_aq_send_cmd(hw,& desc,buf,(unsigned short)((int)buf_size),cd);
  #line 1829 
  if (status == ICE_SUCCESS) 
                             #line 1830 
                             ice_parse_caps(hw,buf,cmd->count,opc);
  else 
    #line 1831 
    if (hw->adminq.sq_last_status == (unsigned int)ICE_AQ_RC_ENOMEM) 
      #line 1832 
      *cap_count = cmd->count;
  #line 1833 
  return status;
}

#line 1842  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_common.c"
static enum ice_status ice_discover_caps(struct ice_hw *hw, enum ice_adminq_opc opc)
{
  #line 1844 
  enum ice_status status;
  #line 1845 
  u32 cap_count;
  #line 1846 
  u16 cbuf_len;
  #line 1847 
  u8 retries;
  #line 1859 
  cap_count = 40U;
  #line 1860 
  retries = (unsigned char)2U;
  #line 1862 
  while (1) {
    {
      #line 1867 
      void *__mptr;
      #line 1873 
      void *__mptr_0;
      #line 1863 
      void *cbuf;
      #line 1865 
      cbuf_len = (unsigned short)((unsigned int)((unsigned short)cap_count) * 32U);
      #line 1867 
      ;
      #line 1867 
      __mptr = (void *)hw;
      #line 1867 
      cbuf = cif_devm_kzalloc_4(& (((struct ice_pf *)(__mptr + 18446744073709549512U))->pdev)->dev,(unsigned long)cbuf_len,3264U);
      #line 1868 
      if (cbuf == (void *)0) 
                             #line 1869 
                             return ICE_ERR_NO_MEMORY;
      #line 1871 
      status = ice_aq_discover_caps(hw,cbuf,(unsigned short)((int)cbuf_len),& cap_count,opc,(struct ice_sq_cd *)0);
      #line 1873 
      ;
      #line 1873 
      __mptr_0 = (void *)hw;
      #line 1873 
      devm_kfree(& (((struct ice_pf *)(__mptr_0 + 18446744073709549512U))->pdev)->dev,cbuf);
      #line 1875 
      if (status == ICE_SUCCESS || hw->adminq.sq_last_status != (unsigned int)ICE_AQ_RC_ENOMEM) 
        #line 1876 
        break;
    }
    #line 1879 
    retries = (u8)((int)retries - 1);
    #line 1879 
    if (! ((unsigned int)retries != 0U)) 
                                         #line 1862 
                                         break;
  }
  #line 1881 
  return status;
}

#line 1888  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_common.c"
void ice_set_safe_mode_caps(struct ice_hw *hw)
{
  #line 1892 
  u32 valid_func;
  #line 1892 
  u32 rxq_first_id;
  #line 1892 
  u32 txq_first_id;
  #line 1893 
  u32 msix_vector_first_id;
  #line 1893 
  u32 max_mtu;
  #line 1894 
  u32 num_funcs;
  #line 1890 
  struct ice_hw_func_caps *func_caps = & hw->func_caps;
  #line 1891 
  struct ice_hw_dev_caps *dev_caps = & hw->dev_caps;
  #line 1897 
  valid_func = func_caps->common_cap.valid_functions;
  #line 1898 
  txq_first_id = (unsigned int)func_caps->common_cap.txq_first_id;
  #line 1899 
  rxq_first_id = (unsigned int)func_caps->common_cap.rxq_first_id;
  #line 1900 
  msix_vector_first_id = (unsigned int)func_caps->common_cap.msix_vector_first_id;
  #line 1901 
  max_mtu = (unsigned int)func_caps->common_cap.max_mtu;
  #line 1904 
  memset((void *)func_caps,0,44UL);
  #line 1907 
  func_caps->common_cap.valid_functions = valid_func;
  #line 1908 
  func_caps->common_cap.txq_first_id = (unsigned short)txq_first_id;
  #line 1909 
  func_caps->common_cap.rxq_first_id = (unsigned short)rxq_first_id;
  #line 1910 
  func_caps->common_cap.msix_vector_first_id = (unsigned short)msix_vector_first_id;
  #line 1911 
  func_caps->common_cap.max_mtu = (unsigned short)max_mtu;
  #line 1914 
  func_caps->common_cap.num_rxq = (unsigned short)1U;
  #line 1915 
  func_caps->common_cap.num_txq = (unsigned short)1U;
  #line 1918 
  func_caps->common_cap.num_msix_vectors = (unsigned short)2U;
  #line 1919 
  func_caps->guar_num_vsi = 1U;
  #line 1922 
  valid_func = dev_caps->common_cap.valid_functions;
  #line 1923 
  txq_first_id = (unsigned int)dev_caps->common_cap.txq_first_id;
  #line 1924 
  rxq_first_id = (unsigned int)dev_caps->common_cap.rxq_first_id;
  #line 1925 
  msix_vector_first_id = (unsigned int)dev_caps->common_cap.msix_vector_first_id;
  #line 1926 
  max_mtu = (unsigned int)dev_caps->common_cap.max_mtu;
  #line 1927 
  num_funcs = dev_caps->num_funcs;
  #line 1930 
  memset((void *)dev_caps,0,44UL);
  #line 1933 
  dev_caps->common_cap.valid_functions = valid_func;
  #line 1934 
  dev_caps->common_cap.txq_first_id = (unsigned short)txq_first_id;
  #line 1935 
  dev_caps->common_cap.rxq_first_id = (unsigned short)rxq_first_id;
  #line 1936 
  dev_caps->common_cap.msix_vector_first_id = (unsigned short)msix_vector_first_id;
  #line 1937 
  dev_caps->common_cap.max_mtu = (unsigned short)max_mtu;
  #line 1938 
  dev_caps->num_funcs = num_funcs;
  #line 1941 
  dev_caps->common_cap.num_rxq = (unsigned short)num_funcs;
  #line 1942 
  dev_caps->common_cap.num_txq = (unsigned short)num_funcs;
  #line 1945 
  dev_caps->common_cap.num_msix_vectors = (unsigned short)((unsigned int)((unsigned short)num_funcs) * 2U);
  #line 1946 
  return;
}

#line 1952  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_common.c"
enum ice_status ice_get_caps(struct ice_hw *hw)
{
  #line 1954 
  enum ice_status status;
  #line 1956 
  status = ice_discover_caps(hw,(enum ice_adminq_opc)ice_aqc_opc_list_dev_caps);
  #line 1957 
  if (status == ICE_SUCCESS) 
                             #line 1958 
                             status = ice_discover_caps(hw,(enum ice_adminq_opc)ice_aqc_opc_list_func_caps);
  #line 1960 
  return status;
}

#line 1973  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_common.c"
enum ice_status ice_aq_manage_mac_write(struct ice_hw *hw, u8 *mac_addr, u8 flags, struct ice_sq_cd *cd)
{
  #line 1976 
  struct ice_aqc_manage_mac_write *cmd;
  #line 1977 
  struct ice_aq_desc desc;
  #line 1979 
  cmd = & desc.params.mac_write;
  #line 1980 
  ice_fill_dflt_direct_cmd_desc(& desc,(unsigned short)264);
  #line 1982 
  cmd->flags = flags;
  #line 1985 
  cmd->sah = __builtin_bswap16((unsigned short)((int)*((u16 *)mac_addr)));
  #line 1986 
  cmd->sal = __builtin_bswap32(*((u32 *)(mac_addr + 2U)));
  #line 1988 
  return ice_aq_send_cmd(hw,& desc,(void *)0,(unsigned short)0,cd);
}

#line 1997  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_common.c"
static enum ice_status ice_aq_clear_pxe_mode(struct ice_hw *hw)
{
  #line 1999 
  struct ice_aq_desc desc;
  #line 2001 
  ice_fill_dflt_direct_cmd_desc(& desc,(unsigned short)272);
  #line 2002 
  desc.params.clear_pxe.rx_cnt = (unsigned char)2U;
  #line 2004 
  return ice_aq_send_cmd(hw,& desc,(void *)0,(unsigned short)0,
                      (struct ice_sq_cd *)0);
}

#line 2014  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_common.c"
void ice_clear_pxe_mode(struct ice_hw *hw)
{
  #line 2016 
  if ((int)ice_check_sq_alive(hw,& hw->adminq) != 0) 
                                                     #line 2017 
                                                     ice_aq_clear_pxe_mode(hw);
  #line 2018 
  return;
}

#line 2034  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_common.c"
static u16 ice_get_link_speed_based_on_phy_type(u64 phy_type_low, u64 phy_type_high)
{
  #line 2036 
  u16 speed_phy_type_high = (unsigned short)32768U;
  #line 2037 
  u16 speed_phy_type_low = (unsigned short)32768U;
  #line 2039 
  switch (phy_type_low) {
    #line 2040 
    case (u64)1: 
                 #line 2040 
    ;
    #line 2041 
    case (u64)2: 
                 #line 2041 
    ;
    #line 2042 
    speed_phy_type_low = (unsigned short)2U;
    #line 2043 
    break;
    #line 2044 
    case (u64)4: 
                 #line 2044 
    ;
    #line 2045 
    case (u64)8: 
                 #line 2045 
    ;
    #line 2046 
    case (u64)16: 
                  #line 2046 
    ;
    #line 2047 
    case (u64)32: 
                  #line 2047 
    ;
    #line 2048 
    case (u64)64: 
                  #line 2048 
    ;
    #line 2049 
    speed_phy_type_low = (unsigned short)4U;
    #line 2050 
    break;
    #line 2051 
    case (u64)128: 
                   #line 2051 
    ;
    #line 2052 
    case (u64)256: 
                   #line 2052 
    ;
    #line 2053 
    case (u64)512: 
                   #line 2053 
    ;
    #line 2054 
    speed_phy_type_low = (unsigned short)8U;
    #line 2055 
    break;
    #line 2056 
    case (u64)1024: 
                    #line 2056 
    ;
    #line 2057 
    case (u64)2048: 
                    #line 2057 
    ;
    #line 2058 
    speed_phy_type_low = (unsigned short)16U;
    #line 2059 
    break;
    #line 2060 
    case (u64)4096: 
                    #line 2060 
    ;
    #line 2061 
    case (u64)8192: 
                    #line 2061 
    ;
    #line 2062 
    case (u64)16384: 
                     #line 2062 
    ;
    #line 2063 
    case (u64)32768: 
                     #line 2063 
    ;
    #line 2064 
    case (u64)65536: 
                     #line 2064 
    ;
    #line 2065 
    case (u64)131072: 
                      #line 2065 
    ;
    #line 2066 
    case (u64)262144: 
                      #line 2066 
    ;
    #line 2067 
    speed_phy_type_low = (unsigned short)32U;
    #line 2068 
    break;
    #line 2069 
    case (u64)524288: 
                      #line 2069 
    ;
    #line 2070 
    case (u64)1048576: 
                       #line 2070 
    ;
    #line 2071 
    case (u64)2097152: 
                       #line 2071 
    ;
    #line 2072 
    case (u64)4194304: 
                       #line 2072 
    ;
    #line 2073 
    case (u64)8388608: 
                       #line 2073 
    ;
    #line 2074 
    case (u64)16777216: 
                        #line 2074 
    ;
    #line 2075 
    case (u64)33554432: 
                        #line 2075 
    ;
    #line 2076 
    case (u64)67108864: 
                        #line 2076 
    ;
    #line 2077 
    case (u64)134217728: 
                         #line 2077 
    ;
    #line 2078 
    case (u64)268435456: 
                         #line 2078 
    ;
    #line 2079 
    case (u64)536870912: 
                         #line 2079 
    ;
    #line 2080 
    speed_phy_type_low = (unsigned short)128U;
    #line 2081 
    break;
    #line 2082 
    case (u64)1073741824: 
                          #line 2082 
    ;
    #line 2083 
    case (u64)(-2147483648): 
                             #line 2083 
    ;
    #line 2084 
    case (u64)0: 
                 #line 2084 
    ;
    #line 2085 
    case (u64)0: 
                 #line 2085 
    ;
    #line 2086 
    case (u64)0: 
                 #line 2086 
    ;
    #line 2087 
    case (u64)0: 
                 #line 2087 
    ;
    #line 2088 
    speed_phy_type_low = (unsigned short)256U;
    #line 2089 
    break;
    #line 2090 
    case (u64)0: 
                 #line 2090 
    ;
    #line 2091 
    case (u64)0: 
                 #line 2091 
    ;
    #line 2092 
    case (u64)0: 
                 #line 2092 
    ;
    #line 2093 
    case (u64)0: 
                 #line 2093 
    ;
    #line 2094 
    case (u64)0: 
                 #line 2094 
    ;
    #line 2095 
    case (u64)0: 
                 #line 2095 
    ;
    #line 2096 
    case (u64)0: 
                 #line 2096 
    ;
    #line 2097 
    case (u64)0: 
                 #line 2097 
    ;
    #line 2098 
    case (u64)0: 
                 #line 2098 
    ;
    #line 2099 
    case (u64)0: 
                 #line 2099 
    ;
    #line 2100 
    case (u64)0: 
                 #line 2100 
    ;
    #line 2101 
    case (u64)0: 
                 #line 2101 
    ;
    #line 2102 
    case (u64)0: 
                 #line 2102 
    ;
    #line 2103 
    case (u64)0: 
                 #line 2103 
    ;
    #line 2104 
    case (u64)0: 
                 #line 2104 
    ;
    #line 2105 
    speed_phy_type_low = (unsigned short)512U;
    #line 2106 
    break;
    #line 2107 
    case (u64)0: 
                 #line 2107 
    ;
    #line 2108 
    case (u64)0: 
                 #line 2108 
    ;
    #line 2109 
    case (u64)0: 
                 #line 2109 
    ;
    #line 2110 
    case (u64)0: 
                 #line 2110 
    ;
    #line 2111 
    case (u64)0: 
                 #line 2111 
    ;
    #line 2112 
    case (u64)0: 
                 #line 2112 
    ;
    #line 2113 
    case (u64)0: 
                 #line 2113 
    ;
    #line 2114 
    case (u64)0: 
                 #line 2114 
    ;
    #line 2115 
    case (u64)0: 
                 #line 2115 
    ;
    #line 2116 
    case (u64)0: 
                 #line 2116 
    ;
    #line 2117 
    case (u64)0: 
                 #line 2117 
    ;
    #line 2118 
    case (u64)0: 
                 #line 2118 
    ;
    #line 2119 
    case (u64)0: 
                 #line 2119 
    ;
    #line 2120 
    speed_phy_type_low = (unsigned short)1024U;
    #line 2121 
    break;
    #line 2122 
    default: 
             #line 2122 
    ;
    #line 2123 
    speed_phy_type_low = (unsigned short)32768U;
    #line 2124 
    break;
  }
  #line 2127 
  switch (phy_type_high) {
    #line 2128 
    case (u64)1: 
                 #line 2128 
    ;
    #line 2129 
    case (u64)2: 
                 #line 2129 
    ;
    #line 2130 
    case (u64)4: 
                 #line 2130 
    ;
    #line 2131 
    case (u64)8: 
                 #line 2131 
    ;
    #line 2132 
    case (u64)16: 
                  #line 2132 
    ;
    #line 2133 
    speed_phy_type_high = (unsigned short)1024U;
    #line 2134 
    break;
    #line 2135 
    default: 
             #line 2135 
    ;
    #line 2136 
    speed_phy_type_high = (unsigned short)32768U;
    #line 2137 
    break;
  }
  #line 2140 
  if ((unsigned int)speed_phy_type_low == 32768U && (unsigned int)speed_phy_type_high == 32768U) 
    #line 2142 
    return (unsigned short)32768U;
  else 
    #line 2143 
    if ((unsigned int)speed_phy_type_low != 32768U && (unsigned int)speed_phy_type_high != 32768U) 
      #line 2145 
      return (unsigned short)32768U;
    else 
      #line 2146 
      if ((unsigned int)speed_phy_type_low != 32768U && (unsigned int)speed_phy_type_high == 32768U) 
        #line 2148 
        return speed_phy_type_low; else 
                                        #line 2150 
                                        return speed_phy_type_high;
}

#line 2169  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_common.c"
void ice_update_phy_type(u64 *phy_type_low, u64 *phy_type_high, u16 link_speeds_bitmap)
{
  #line 2172 
  u64 pt_high;
  #line 2173 
  u64 pt_low;
  #line 2174 
  int index;
  #line 2175 
  u16 speed;
  #line 2178 
  index = 0;
  #line 2178 
  while (index <= 63) {
    #line 2179 
    pt_low = 1ULL << index;
    #line 2180 
    speed = ice_get_link_speed_based_on_phy_type(pt_low,0ULL);
    #line 2182 
    if ((unsigned int)((int)link_speeds_bitmap & (int)speed) != 0U) 
                                                                    #line 2183 
                                                                    *phy_type_low |= 1ULL << index;
    #line 2178 
    index ++;
  }
  #line 2187 
  index = 0;
  #line 2187 
  while (index <= 19) {
    #line 2188 
    pt_high = 1ULL << index;
    #line 2189 
    speed = ice_get_link_speed_based_on_phy_type(0ULL,pt_high);
    #line 2191 
    if ((unsigned int)((int)link_speeds_bitmap & (int)speed) != 0U) 
                                                                    #line 2192 
                                                                    *phy_type_high |= 1ULL << index;
    #line 2187 
    index ++;
  }
  #line 2194 
  return;
}

#line 2209  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_common.c"
enum ice_status ice_aq_set_phy_cfg(struct ice_hw *hw, u8 lport, struct ice_aqc_set_phy_cfg_data *cfg, struct ice_sq_cd *cd)
{
  #line 2212 
  struct ice_aq_desc desc;
  #line 2214 
  if (cfg == (struct ice_aqc_set_phy_cfg_data *)0) 
                                                   #line 2215 
                                                   return ICE_ERR_PARAM;
  #line 2218 
  if (((int)cfg->caps & -240) != 0) {
    {
      #line 2219 
      bool branch;
      #line 2219 
      struct _ddebug __UNIQUE_ID_ddebug593 = {.modname = (char *)"ice", .function = (char *)"ice_aq_set_phy_cfg", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_common.c", .format = (char *)"Invalid bit is set in ice_aqc_set_phy_cfg_data->caps : 0x%x\n", .lineno = (unsigned int)2219U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 2219 
      branch = arch_static_branch(& __UNIQUE_ID_ddebug593.key.dd_key_false.key,(_Bool)0);
      #line 2219 
      if ((long)((long)((int)branch != 0)) != 0L) {
        #line 2219 
        void *__mptr;
        #line 2219 
        ;
        #line 2219 
        __mptr = (void *)hw;
        #line 2219 
        __dynamic_dev_dbg(& __UNIQUE_ID_ddebug593,& (((struct ice_pf *)(__mptr + 18446744073709549512U))->pdev)->dev,(char *)"Invalid bit is set in ice_aqc_set_phy_cfg_data->caps : 0x%x\n",(int)cfg->caps);
      }
    }
    #line 2223 
    cfg->caps = (unsigned char)((unsigned int)cfg->caps & 239U);
  }
  #line 2226 
  ice_fill_dflt_direct_cmd_desc(& desc,(unsigned short)1537);
  #line 2227 
  desc.params.set_phy.lport_num = lport;
  #line 2228 
  desc.flags = (unsigned short)((unsigned int)desc.flags | 1024U);
  {
    #line 2230 
    bool branch_0;
    #line 2230 
    struct _ddebug __UNIQUE_ID_ddebug594 = {.modname = (char *)"ice", .function = (char *)"ice_aq_set_phy_cfg", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_common.c", .format = (char *)"phy_type_low = 0x%llx\n", .lineno = (unsigned int)2230U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 2230 
    branch_0 = arch_static_branch(& __UNIQUE_ID_ddebug594.key.dd_key_false.key,(_Bool)0);
    #line 2230 
    if ((long)((long)((int)branch_0 != 0)) != 0L) {
      #line 2230 
      void *__mptr_0;
      #line 2230 
      ;
      #line 2230 
      __mptr_0 = (void *)hw;
      #line 2230 
      __dynamic_dev_dbg(& __UNIQUE_ID_ddebug594,& (((struct ice_pf *)(__mptr_0 + 18446744073709549512U))->pdev)->dev,(char *)"phy_type_low = 0x%llx\n",cfg->phy_type_low);
    }
  }
  {
    #line 2232 
    bool branch_1;
    #line 2232 
    struct _ddebug __UNIQUE_ID_ddebug595 = {.modname = (char *)"ice", .function = (char *)"ice_aq_set_phy_cfg", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_common.c", .format = (char *)"phy_type_high = 0x%llx\n", .lineno = (unsigned int)2232U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 2232 
    branch_1 = arch_static_branch(& __UNIQUE_ID_ddebug595.key.dd_key_false.key,(_Bool)0);
    #line 2232 
    if ((long)((long)((int)branch_1 != 0)) != 0L) {
      #line 2232 
      void *__mptr_1;
      #line 2232 
      ;
      #line 2232 
      __mptr_1 = (void *)hw;
      #line 2232 
      __dynamic_dev_dbg(& __UNIQUE_ID_ddebug595,& (((struct ice_pf *)(__mptr_1 + 18446744073709549512U))->pdev)->dev,(char *)"phy_type_high = 0x%llx\n",cfg->phy_type_high);
    }
  }
  {
    #line 2234 
    bool branch_2;
    #line 2234 
    struct _ddebug __UNIQUE_ID_ddebug596 = {.modname = (char *)"ice", .function = (char *)"ice_aq_set_phy_cfg", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_common.c", .format = (char *)"caps = 0x%x\n", .lineno = (unsigned int)2234U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 2234 
    branch_2 = arch_static_branch(& __UNIQUE_ID_ddebug596.key.dd_key_false.key,(_Bool)0);
    #line 2234 
    if ((long)((long)((int)branch_2 != 0)) != 0L) {
      #line 2234 
      void *__mptr_2;
      #line 2234 
      ;
      #line 2234 
      __mptr_2 = (void *)hw;
      #line 2234 
      __dynamic_dev_dbg(& __UNIQUE_ID_ddebug596,& (((struct ice_pf *)(__mptr_2 + 18446744073709549512U))->pdev)->dev,(char *)"caps = 0x%x\n",(int)cfg->caps);
    }
  }
  {
    #line 2235 
    bool branch_3;
    #line 2235 
    struct _ddebug __UNIQUE_ID_ddebug597 = {.modname = (char *)"ice", .function = (char *)"ice_aq_set_phy_cfg", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_common.c", .format = (char *)"low_power_ctrl = 0x%x\n", .lineno = (unsigned int)2235U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 2235 
    branch_3 = arch_static_branch(& __UNIQUE_ID_ddebug597.key.dd_key_false.key,(_Bool)0);
    #line 2235 
    if ((long)((long)((int)branch_3 != 0)) != 0L) {
      #line 2235 
      void *__mptr_3;
      #line 2235 
      ;
      #line 2235 
      __mptr_3 = (void *)hw;
      #line 2235 
      __dynamic_dev_dbg(& __UNIQUE_ID_ddebug597,& (((struct ice_pf *)(__mptr_3 + 18446744073709549512U))->pdev)->dev,(char *)"low_power_ctrl = 0x%x\n",(int)cfg->low_power_ctrl);
    }
  }
  {
    #line 2237 
    bool branch_4;
    #line 2237 
    struct _ddebug __UNIQUE_ID_ddebug598 = {.modname = (char *)"ice", .function = (char *)"ice_aq_set_phy_cfg", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_common.c", .format = (char *)"eee_cap = 0x%x\n", .lineno = (unsigned int)2237U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 2237 
    branch_4 = arch_static_branch(& __UNIQUE_ID_ddebug598.key.dd_key_false.key,(_Bool)0);
    #line 2237 
    if ((long)((long)((int)branch_4 != 0)) != 0L) {
      #line 2237 
      void *__mptr_4;
      #line 2237 
      ;
      #line 2237 
      __mptr_4 = (void *)hw;
      #line 2237 
      __dynamic_dev_dbg(& __UNIQUE_ID_ddebug598,& (((struct ice_pf *)(__mptr_4 + 18446744073709549512U))->pdev)->dev,(char *)"eee_cap = 0x%x\n",(int)cfg->eee_cap);
    }
  }
  {
    #line 2238 
    bool branch_5;
    #line 2238 
    struct _ddebug __UNIQUE_ID_ddebug599 = {.modname = (char *)"ice", .function = (char *)"ice_aq_set_phy_cfg", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_common.c", .format = (char *)"eeer_value = 0x%x\n", .lineno = (unsigned int)2238U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 2238 
    branch_5 = arch_static_branch(& __UNIQUE_ID_ddebug599.key.dd_key_false.key,(_Bool)0);
    #line 2238 
    if ((long)((long)((int)branch_5 != 0)) != 0L) {
      #line 2238 
      void *__mptr_5;
      #line 2238 
      ;
      #line 2238 
      __mptr_5 = (void *)hw;
      #line 2238 
      __dynamic_dev_dbg(& __UNIQUE_ID_ddebug599,& (((struct ice_pf *)(__mptr_5 + 18446744073709549512U))->pdev)->dev,(char *)"eeer_value = 0x%x\n",(int)cfg->eeer_value);
    }
  }
  {
    #line 2239 
    bool branch_6;
    #line 2239 
    struct _ddebug __UNIQUE_ID_ddebug600 = {.modname = (char *)"ice", .function = (char *)"ice_aq_set_phy_cfg", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_common.c", .format = (char *)"link_fec_opt = 0x%x\n", .lineno = (unsigned int)2239U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 2239 
    branch_6 = arch_static_branch(& __UNIQUE_ID_ddebug600.key.dd_key_false.key,(_Bool)0);
    #line 2239 
    if ((long)((long)((int)branch_6 != 0)) != 0L) {
      #line 2239 
      void *__mptr_6;
      #line 2239 
      ;
      #line 2239 
      __mptr_6 = (void *)hw;
      #line 2239 
      __dynamic_dev_dbg(& __UNIQUE_ID_ddebug600,& (((struct ice_pf *)(__mptr_6 + 18446744073709549512U))->pdev)->dev,(char *)"link_fec_opt = 0x%x\n",(int)cfg->link_fec_opt);
    }
  }
  #line 2241 
  return ice_aq_send_cmd(hw,& desc,(void *)cfg,(unsigned short)24,cd);
}

#line 2248  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_common.c"
enum ice_status ice_update_link_info(struct ice_port_info *pi)
{
  #line 2250 
  struct ice_link_status *li;
  #line 2251 
  enum ice_status status;
  #line 2253 
  if (pi == (struct ice_port_info *)0) 
                                       #line 2254 
                                       return ICE_ERR_PARAM;
  #line 2256 
  li = & pi->phy.link_info;
  #line 2258 
  status = ice_aq_get_link_info(pi,(_Bool)1,(struct ice_link_status *)0,(struct ice_sq_cd *)0);
  #line 2259 
  if (status != ICE_SUCCESS) 
                             #line 2260 
                             return status;
  #line 2262 
  if (((unsigned long)li->link_info & 64UL) != 0UL) {
    #line 2267 
    void *__mptr;
    #line 2278 
    void *__mptr_0;
    #line 2263 
    struct ice_aqc_get_phy_caps_data *pcaps;
    #line 2264 
    struct ice_hw *hw;
    #line 2266 
    hw = pi->hw;
    #line 2267 
    __mptr = (void *)hw;
    #line 2267 
    pcaps = (struct ice_aqc_get_phy_caps_data *)cif_devm_kzalloc_4(& (((struct ice_pf *)(__mptr + 18446744073709549512U))->pdev)->dev,
                           560UL,3264U);
    #line 2269 
    if (pcaps == (struct ice_aqc_get_phy_caps_data *)0) 
                                                        #line 2270 
                                                        return ICE_ERR_NO_MEMORY;
    #line 2272 
    status = ice_aq_get_phy_caps(pi,(_Bool)0,(unsigned char)2,pcaps,(struct ice_sq_cd *)0);
    #line 2274 
    if (status == ICE_SUCCESS) 
                               #line 2275 
                               memcpy((void *)(& li->module_type),(void *)(& pcaps->module_type),3UL);
    #line 2278 
    ;
    #line 2278 
    __mptr_0 = (void *)hw;
    #line 2278 
    devm_kfree(& (((struct ice_pf *)(__mptr_0 + 18446744073709549512U))->pdev)->dev,(void *)pcaps);
  }
  #line 2281 
  return status;
}

#line 2293  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_common.c"
enum ice_status ice_set_fc(struct ice_port_info *pi, u8 *aq_failures, bool ena_auto_link_update)
{
  #line 2321 
  void *__mptr;
  #line 2380 
  void *__mptr_0;
  #line 2296 
  struct ice_aqc_get_phy_caps_data *pcaps;
  #line 2297 
  enum ice_status status;
  #line 2299 
  struct ice_hw *hw;
  #line 2295 
  struct ice_aqc_set_phy_cfg_data cfg = {.phy_type_low = 0ULL, .phy_type_high = 0ULL, .caps = (unsigned char)0, .low_power_ctrl = (unsigned char)0, .eee_cap = (unsigned short)0, .eeer_value = (unsigned short)0, .link_fec_opt = (unsigned char)0, .rsvd1 = (unsigned char)0};
  #line 2298 
  u8 pause_mask = (unsigned char)0U;
  #line 2301 
  if (pi == (struct ice_port_info *)0) 
                                       #line 2302 
                                       return ICE_ERR_PARAM;
  #line 2303 
  hw = pi->hw;
  #line 2304 
  *aq_failures = (unsigned char)0U;
  #line 2306 
  switch ((unsigned int)pi->fc.req_mode) {
    #line 2307 
    case (unsigned int)3: 
                          #line 2307 
    ;
    #line 2308 
    pause_mask = (unsigned char)((unsigned int)pause_mask | 1U);
    #line 2309 
    pause_mask = (unsigned char)((unsigned int)pause_mask | 2U);
    #line 2310 
    break;
    #line 2311 
    case (unsigned int)1: 
                          #line 2311 
    ;
    #line 2312 
    pause_mask = (unsigned char)((unsigned int)pause_mask | 2U);
    #line 2313 
    break;
    #line 2314 
    case (unsigned int)2: 
                          #line 2314 
    ;
    #line 2315 
    pause_mask = (unsigned char)((unsigned int)pause_mask | 1U);
    #line 2316 
    break;
    #line 2317 
    default: 
             #line 2317 
    ;
    #line 2318 
    break;
  }
  #line 2321 
  __mptr = (void *)hw;
  #line 2321 
  pcaps = (struct ice_aqc_get_phy_caps_data *)cif_devm_kzalloc_4(& (((struct ice_pf *)(__mptr + 18446744073709549512U))->pdev)->dev,
                           560UL,3264U);
  #line 2322 
  if (pcaps == (struct ice_aqc_get_phy_caps_data *)0) 
                                                      #line 2323 
                                                      return ICE_ERR_NO_MEMORY;
  #line 2326 
  status = ice_aq_get_phy_caps(pi,(_Bool)0,(unsigned char)4,pcaps,(struct ice_sq_cd *)0);
  #line 2328 
  if (status != ICE_SUCCESS) {
    #line 2329 
    *aq_failures = (unsigned char)1U;
    #line 2330 
    goto out;
  }
  #line 2334 
  cfg.caps = (unsigned char)((unsigned int)pcaps->caps & 252U);
  #line 2338 
  cfg.caps = (unsigned char)((int)cfg.caps | (int)pause_mask);
  #line 2341 
  if ((int)cfg.caps != (int)pcaps->caps) {
    #line 2342 
    int retry_count;
    #line 2342 
    int retry_max = 10;
    #line 2345 
    if ((int)ena_auto_link_update != 0) 
                                        #line 2346 
                                        cfg.caps = (unsigned char)((unsigned int)cfg.caps | 32U);
    #line 2348 
    cfg.phy_type_high = pcaps->phy_type_high;
    #line 2349 
    cfg.phy_type_low = pcaps->phy_type_low;
    #line 2350 
    cfg.low_power_ctrl = pcaps->low_power_ctrl;
    #line 2351 
    cfg.eee_cap = pcaps->eee_cap;
    #line 2352 
    cfg.eeer_value = pcaps->eeer_value;
    #line 2353 
    cfg.link_fec_opt = pcaps->link_fec_options;
    #line 2355 
    status = ice_aq_set_phy_cfg(hw,(unsigned char)((int)pi->lport),& cfg,(struct ice_sq_cd *)0);
    #line 2356 
    if (status != ICE_SUCCESS) {
      #line 2357 
      *aq_failures = (unsigned char)2U;
      #line 2358 
      goto out;
    }
    #line 2366 
    retry_count = 0;
    #line 2366 
    while (retry_count < retry_max) {
      #line 2367 
      status = ice_update_link_info(pi);
      #line 2369 
      if (status == ICE_SUCCESS) 
                                 #line 2370 
                                 break;
      {
        #line 2372 
        unsigned long __ms = 100UL;
        #line 2372 
        while (1) {
          #line 2372 
          unsigned long tmp_1;
          #line 2372 
          tmp_1 = __ms;
          #line 2372 
          __ms --;
          #line 2372 
          ;
          #line 2372 
          if (! (tmp_1 != 0UL)) 
                                #line 2372 
                                break;
          #line 2372 
          __const_udelay(4295000UL);
        }
      }
      #line 2366 
      retry_count ++;
    }
    #line 2375 
    if (status != ICE_SUCCESS) 
                               #line 2376 
                               *aq_failures = (unsigned char)3U;
  }
  #line 2379 
  out: 
       #line 2379 
  ;
  #line 2380 
  ;
  #line 2380 
  __mptr_0 = (void *)hw;
  #line 2380 
  devm_kfree(& (((struct ice_pf *)(__mptr_0 + 18446744073709549512U))->pdev)->dev,(void *)pcaps);
  #line 2381 
  return status;
}

#line 2393  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_common.c"
void ice_copy_phy_caps_to_cfg(struct ice_aqc_get_phy_caps_data *caps, struct ice_aqc_set_phy_cfg_data *cfg)
{
  #line 2396 
  if (caps == (struct ice_aqc_get_phy_caps_data *)0 || cfg == (struct ice_aqc_set_phy_cfg_data *)0) 
    #line 2397 
    return;
  #line 2399 
  cfg->phy_type_low = caps->phy_type_low;
  #line 2400 
  cfg->phy_type_high = caps->phy_type_high;
  #line 2401 
  cfg->caps = caps->caps;
  #line 2402 
  cfg->low_power_ctrl = caps->low_power_ctrl;
  #line 2403 
  cfg->eee_cap = caps->eee_cap;
  #line 2404 
  cfg->eeer_value = caps->eeer_value;
  #line 2405 
  cfg->link_fec_opt = caps->link_fec_options;
  #line 2406 
  return;
}

#line 2418  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_common.c"
void ice_cfg_phy_fec(struct ice_aqc_set_phy_cfg_data *cfg, enum ice_fec_mode fec)
{
  #line 2420 
  switch ((unsigned int)fec) {
    #line 2421 
    case (unsigned int)2: 
                          #line 2421 
    ;
    #line 2425 
    cfg->link_fec_opt = (unsigned char)((unsigned int)cfg->link_fec_opt & 129U);
    #line 2427 
    cfg->link_fec_opt = (unsigned char)((unsigned int)cfg->link_fec_opt | 10U);
    #line 2429 
    break;
    #line 2430 
    case (unsigned int)1: 
                          #line 2430 
    ;
    #line 2434 
    cfg->link_fec_opt = (unsigned char)((unsigned int)cfg->link_fec_opt & 64U);
    #line 2435 
    cfg->link_fec_opt = (unsigned char)((unsigned int)cfg->link_fec_opt | 20U);
    #line 2437 
    break;
    #line 2438 
    case (unsigned int)0: 
                          #line 2438 
    ;
    #line 2440 
    cfg->link_fec_opt = (unsigned char)((unsigned int)cfg->link_fec_opt & 32U);
    #line 2441 
    break;
    #line 2442 
    case (unsigned int)3: 
                          #line 2442 
    ;
    #line 2444 
    cfg->caps = cfg->caps;
    #line 2445 
    break;
  }
  #line 2447 
  return;
}

#line 2458  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_common.c"
enum ice_status ice_get_link_status(struct ice_port_info *pi, bool *link_up)
{
  #line 2460 
  struct ice_phy_info *phy_info;
  #line 2461 
  enum ice_status status = 0;
  #line 2463 
  if (pi == (struct ice_port_info *)0 || link_up == (bool *)0) 
                                                               #line 2464 
                                                               return ICE_ERR_PARAM;
  #line 2466 
  phy_info = & pi->phy;
  #line 2468 
  if ((unsigned int)phy_info->get_link_info != 0U) {
    #line 2469 
    status = ice_update_link_info(pi);
    #line 2471 
    if (status != ICE_SUCCESS) {
      #line 2472 
      bool branch;
      #line 2472 
      struct _ddebug __UNIQUE_ID_ddebug601 = {.modname = (char *)"ice", .function = (char *)"ice_get_link_status", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_common.c", .format = (char *)"get link status error, status = %d\n", .lineno = (unsigned int)2472U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 2472 
      branch = arch_static_branch(& __UNIQUE_ID_ddebug601.key.dd_key_false.key,(_Bool)0);
      #line 2472 
      if ((long)((long)((int)branch != 0)) != 0L) {
        #line 2472 
        void *__mptr;
        #line 2472 
        ;
        #line 2472 
        __mptr = (void *)pi->hw;
        #line 2472 
        __dynamic_dev_dbg(& __UNIQUE_ID_ddebug601,& (((struct ice_pf *)(__mptr + 18446744073709549512U))->pdev)->dev,(char *)"get link status error, status = %d\n",(int)status);
      }
    }
  }
  #line 2477 
  *link_up = (_Bool)(((unsigned long)phy_info->link_info.link_info & 1UL) != 0UL);
  #line 2479 
  return status;
}

#line 2491  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_common.c"
enum ice_status ice_aq_set_link_restart_an(struct ice_port_info *pi, bool ena_link, struct ice_sq_cd *cd)
{
  #line 2494 
  struct ice_aqc_restart_an *cmd;
  #line 2495 
  struct ice_aq_desc desc;
  #line 2497 
  cmd = & desc.params.restart_an;
  #line 2499 
  ice_fill_dflt_direct_cmd_desc(& desc,(unsigned short)1541);
  #line 2501 
  cmd->cmd_flags = (unsigned char)2U;
  #line 2502 
  cmd->lport_num = pi->lport;
  #line 2503 
  if ((int)ena_link != 0) 
                          #line 2504 
                          cmd->cmd_flags = (unsigned char)((unsigned int)cmd->cmd_flags | 4U); else 
                                                                    #line 2506 
                                                                    cmd->cmd_flags = (unsigned char)((unsigned int)cmd->cmd_flags & 251U);
  #line 2508 
  return ice_aq_send_cmd(pi->hw,& desc,(void *)0,(unsigned short)0,cd);
}

#line 2521  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_common.c"
enum ice_status ice_aq_set_event_mask(struct ice_hw *hw, u8 port_num, u16 mask, struct ice_sq_cd *cd)
{
  #line 2524 
  struct ice_aqc_set_event_mask *cmd;
  #line 2525 
  struct ice_aq_desc desc;
  #line 2527 
  cmd = & desc.params.set_event_mask;
  #line 2529 
  ice_fill_dflt_direct_cmd_desc(& desc,(unsigned short)1555);
  #line 2531 
  cmd->lport_num = port_num;
  #line 2533 
  cmd->event_mask = mask;
  #line 2534 
  return ice_aq_send_cmd(hw,& desc,(void *)0,(unsigned short)0,cd);
}

#line 2546  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_common.c"
enum ice_status ice_aq_set_mac_loopback(struct ice_hw *hw, bool ena_lpbk, struct ice_sq_cd *cd)
{
  #line 2548 
  struct ice_aqc_set_mac_lb *cmd;
  #line 2549 
  struct ice_aq_desc desc;
  #line 2551 
  cmd = & desc.params.set_mac_lb;
  #line 2553 
  ice_fill_dflt_direct_cmd_desc(& desc,(unsigned short)1568);
  #line 2554 
  if ((int)ena_lpbk != 0) 
                          #line 2555 
                          cmd->lb_mode = (unsigned char)1U;
  #line 2557 
  return ice_aq_send_cmd(hw,& desc,(void *)0,(unsigned short)0,cd);
}

#line 2569  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_common.c"
enum ice_status ice_aq_set_port_id_led(struct ice_port_info *pi, bool is_orig_mode, struct ice_sq_cd *cd)
{
  #line 2572 
  struct ice_aqc_set_port_id_led *cmd;
  #line 2574 
  struct ice_aq_desc desc;
  #line 2573 
  struct ice_hw *hw = pi->hw;
  #line 2576 
  cmd = & desc.params.set_port_id_led;
  #line 2578 
  ice_fill_dflt_direct_cmd_desc(& desc,(unsigned short)1769);
  #line 2580 
  if ((int)is_orig_mode != 0) 
                              #line 2581 
                              cmd->ident_mode = (unsigned char)0U; else 
                                                                    #line 2583 
                                                                    cmd->ident_mode = (unsigned char)1U;
  #line 2585 
  return ice_aq_send_cmd(hw,& desc,(void *)0,(unsigned short)0,cd);
}

#line 2604  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_common.c"
enum ice_status ice_aq_sff_eeprom(struct ice_hw *hw, u16 lport, u8 bus_addr, u16 mem_addr, u8 page, u8 set_page, u8 *data, u8 length, bool write, struct ice_sq_cd *cd)
{
  #line 2608 
  struct ice_aqc_sff_eeprom *cmd;
  #line 2609 
  struct ice_aq_desc desc;
  #line 2610 
  enum ice_status status;
  #line 2612 
  if (data == (u8 *)0U || ((int)mem_addr & 65280) != 0) 
                                                        #line 2613 
                                                        return ICE_ERR_PARAM;
  #line 2615 
  ice_fill_dflt_direct_cmd_desc(& desc,(unsigned short)1774);
  #line 2616 
  cmd = & desc.params.read_write_sff_param;
  #line 2617 
  desc.flags = (unsigned short)5120U;
  #line 2618 
  cmd->lport_num = (unsigned char)lport;
  #line 2619 
  cmd->lport_num_valid = (unsigned char)((unsigned int)((unsigned char)((int)lport >> 8)) & 1U);
  #line 2620 
  cmd->i2c_bus_addr = (unsigned short)((((int)bus_addr >> 1) & 127) | (((int)set_page << 11) & 6144));
  #line 2625 
  cmd->i2c_mem_addr = (unsigned short)((unsigned int)mem_addr & 255U);
  #line 2626 
  cmd->eeprom_page = (unsigned short)((int)((unsigned short)page) << 8U);
  #line 2627 
  if ((int)write != 0) 
                       #line 2628 
                       cmd->i2c_bus_addr = (unsigned short)((unsigned int)cmd->i2c_bus_addr | 32768U);
  #line 2630 
  status = ice_aq_send_cmd(hw,& desc,(void *)data,(unsigned short)((int)length),cd);
  #line 2631 
  return status;
}

#line 2647  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_common.c"
static enum ice_status __ice_aq_get_set_rss_lut(struct ice_hw *hw, u16 vsi_id, u8 lut_type, u8 *lut, u16 lut_size, u8 glob_lut_idx, bool set)
{
  #line 2650 
  struct ice_aqc_get_set_rss_lut *cmd_resp;
  #line 2651 
  struct ice_aq_desc desc;
  #line 2652 
  enum ice_status status;
  #line 2653 
  u16 flags = (unsigned short)0U;
  #line 2655 
  cmd_resp = & desc.params.get_set_rss_lut;
  #line 2657 
  if ((int)set != 0) {
    #line 2658 
    ice_fill_dflt_direct_cmd_desc(& desc,(unsigned short)2819);
    #line 2659 
    desc.flags = (unsigned short)((unsigned int)desc.flags | 1024U);
  }
  else 
       #line 2661 
       ice_fill_dflt_direct_cmd_desc(& desc,(unsigned short)2821);
  #line 2664 
  cmd_resp->vsi_id = (unsigned short)(((unsigned int)vsi_id & 511U) | 32768U);
  #line 2669 
  switch ((int)lut_type) {
    #line 2670 
    case 0: 
            #line 2670 
    ;
    #line 2671 
    case 1: 
            #line 2671 
    ;
    #line 2672 
    case 2: 
            #line 2672 
    ;
    #line 2673 
    flags = (unsigned short)(((int)lut_type & 3) | (int)flags);
    #line 2675 
    break;
    #line 2676 
    default: 
             #line 2676 
    ;
    #line 2677 
    status = ICE_ERR_PARAM;
    #line 2678 
    goto ice_aq_get_set_rss_lut_exit;
  }
  #line 2681 
  if ((unsigned int)lut_type == 2U) {
    #line 2682 
    flags = (unsigned short)((((int)glob_lut_idx << 4) & 255) | (int)flags);
    #line 2685 
    if (! set) 
               #line 2686 
               goto ice_aq_get_set_rss_lut_send;
  }
  else 
    #line 2687 
    if ((unsigned int)lut_type == 1U) {
      #line 2688 
      if (! set) 
                 #line 2689 
                 goto ice_aq_get_set_rss_lut_send;
    }
    else 
         #line 2691 
         goto ice_aq_get_set_rss_lut_send;
  #line 2695 
  switch ((int)lut_size) {
    #line 2696 
    case 128: 
              #line 2696 
    ;
    #line 2697 
    break;
    #line 2698 
    case 512: 
              #line 2698 
    ;
    #line 2699 
    flags = (unsigned short)((unsigned int)flags | 4U);
    #line 2702 
    break;
    #line 2703 
    case 2048: 
               #line 2703 
    ;
    #line 2704 
    if ((unsigned int)lut_type == 1U) {
      #line 2705 
      flags = (unsigned short)((unsigned int)flags | 8U);
      #line 2708 
      break;
    }
    #line 2711 
    default: 
             #line 2711 
    ;
    #line 2712 
    status = ICE_ERR_PARAM;
    #line 2713 
    goto ice_aq_get_set_rss_lut_exit;
  }
  #line 2716 
  ice_aq_get_set_rss_lut_send: 
                               #line 2716 
  ;
  #line 2717 
  cmd_resp->flags = flags;
  #line 2718 
  status = ice_aq_send_cmd(hw,& desc,(void *)lut,(unsigned short)((int)lut_size),(struct ice_sq_cd *)0);
  #line 2720 
  ice_aq_get_set_rss_lut_exit: 
                               #line 2720 
  ;
  #line 2721 
  return status;
}

#line 2735  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_common.c"
enum ice_status ice_aq_get_rss_lut(struct ice_hw *hw, u16 vsi_handle, u8 lut_type, u8 *lut, u16 lut_size)
{
  #line 2738 
  if (ice_is_vsi_valid(hw,(unsigned short)((int)vsi_handle))) {
    #line 2738 
    if (lut == (u8 *)0U) 
                         #line 2739 
                         return ICE_ERR_PARAM;
  }
  else 
       #line 2739 
       return ICE_ERR_PARAM;
  #line 2741 
  ;
  #line 2741 
  ;
  #line 2741 
  ;
  #line 2741 
  ;
  #line 2741 
  return __ice_aq_get_set_rss_lut(hw,
                                 (unsigned short)((int)ice_get_hw_vsi_num(hw,(unsigned short)((int)vsi_handle))),
                                 (unsigned char)((int)lut_type),lut,
                                 (unsigned short)((int)lut_size),
                                 (unsigned char)0,(_Bool)0);
}

#line 2756  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_common.c"
enum ice_status ice_aq_set_rss_lut(struct ice_hw *hw, u16 vsi_handle, u8 lut_type, u8 *lut, u16 lut_size)
{
  #line 2759 
  if (ice_is_vsi_valid(hw,(unsigned short)((int)vsi_handle))) {
    #line 2759 
    if (lut == (u8 *)0U) 
                         #line 2760 
                         return ICE_ERR_PARAM;
  }
  else 
       #line 2760 
       return ICE_ERR_PARAM;
  #line 2762 
  ;
  #line 2762 
  ;
  #line 2762 
  ;
  #line 2762 
  ;
  #line 2762 
  return __ice_aq_get_set_rss_lut(hw,
                                 (unsigned short)((int)ice_get_hw_vsi_num(hw,(unsigned short)((int)vsi_handle))),
                                 (unsigned char)((int)lut_type),lut,
                                 (unsigned short)((int)lut_size),
                                 (unsigned char)0,(_Bool)1);
}

#line 2776  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_common.c"
static enum ice_status __ice_aq_get_set_rss_key(struct ice_hw *hw, u16 vsi_id, struct ice_aqc_get_set_rss_keys *key, bool set)
{
  #line 2780 
  struct ice_aqc_get_set_rss_key *cmd_resp;
  #line 2782 
  struct ice_aq_desc desc;
  #line 2781 
  u16 key_size = (unsigned short)52U;
  #line 2784 
  cmd_resp = & desc.params.get_set_rss_key;
  #line 2786 
  if ((int)set != 0) {
    #line 2787 
    ice_fill_dflt_direct_cmd_desc(& desc,(unsigned short)2818);
    #line 2788 
    desc.flags = (unsigned short)((unsigned int)desc.flags | 1024U);
  }
  else 
       #line 2790 
       ice_fill_dflt_direct_cmd_desc(& desc,(unsigned short)2820);
  #line 2793 
  cmd_resp->vsi_id = (unsigned short)(((unsigned int)vsi_id & 1023U) | 32768U);
  #line 2798 
  return ice_aq_send_cmd(hw,& desc,(void *)key,(unsigned short)((int)key_size),
                      (struct ice_sq_cd *)0);
}

#line 2810  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_common.c"
enum ice_status ice_aq_get_rss_key(struct ice_hw *hw, u16 vsi_handle, struct ice_aqc_get_set_rss_keys *key)
{
  #line 2813 
  if (ice_is_vsi_valid(hw,(unsigned short)((int)vsi_handle))) {
    #line 2813 
    if (key == (struct ice_aqc_get_set_rss_keys *)0) 
                                                     #line 2814 
                                                     return ICE_ERR_PARAM;
  }
  else 
       #line 2814 
       return ICE_ERR_PARAM;
  #line 2816 
  ;
  #line 2816 
  ;
  #line 2816 
  return __ice_aq_get_set_rss_key(hw,
                                 (unsigned short)((int)ice_get_hw_vsi_num(hw,(unsigned short)((int)vsi_handle))),
                                 key,(_Bool)0);
}

#line 2829  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_common.c"
enum ice_status ice_aq_set_rss_key(struct ice_hw *hw, u16 vsi_handle, struct ice_aqc_get_set_rss_keys *keys)
{
  #line 2832 
  if (ice_is_vsi_valid(hw,(unsigned short)((int)vsi_handle))) {
    #line 2832 
    if (keys == (struct ice_aqc_get_set_rss_keys *)0) 
                                                      #line 2833 
                                                      return ICE_ERR_PARAM;
  }
  else 
       #line 2833 
       return ICE_ERR_PARAM;
  #line 2835 
  ;
  #line 2835 
  ;
  #line 2835 
  return __ice_aq_get_set_rss_key(hw,
                                 (unsigned short)((int)ice_get_hw_vsi_num(hw,(unsigned short)((int)vsi_handle))),
                                 keys,(_Bool)1);
}

#line 2861  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_common.c"
static enum ice_status ice_aq_add_lan_txq(struct ice_hw *hw, u8 num_qgrps, struct ice_aqc_add_tx_qgrp *qg_list, u16 buf_size, struct ice_sq_cd *cd)
{
  #line 2865 
  u16 i;
  #line 2865 
  u16 sum_header_size;
  #line 2866 
  struct ice_aqc_add_tx_qgrp *list;
  #line 2867 
  struct ice_aqc_add_txqs *cmd;
  #line 2868 
  struct ice_aq_desc desc;
  #line 2865 
  u16 sum_q_size = (unsigned short)0U;
  #line 2870 
  cmd = & desc.params.add_txqs;
  #line 2872 
  ice_fill_dflt_direct_cmd_desc(& desc,(unsigned short)3120);
  #line 2874 
  if (qg_list == (struct ice_aqc_add_tx_qgrp *)0) 
                                                  #line 2875 
                                                  return ICE_ERR_PARAM;
  #line 2877 
  if ((int)num_qgrps < 0) 
                          #line 2878 
                          return ICE_ERR_PARAM;
  #line 2880 
  sum_header_size = (unsigned short)((unsigned int)((unsigned short)num_qgrps) * 8U);
  #line 2883 
  list = qg_list;
  #line 2884 
  i = (unsigned short)0U;
  #line 2884 
  while ((int)((unsigned short)num_qgrps) > (int)i) {
    {
      #line 2885 
      struct ice_aqc_add_txqs_perq *q = (struct ice_aqc_add_txqs_perq *)(& list->txqs);
      #line 2887 
      sum_q_size = (unsigned short)((unsigned int)((unsigned short)list->num_txqs) * 48U + (unsigned int)sum_q_size);
      #line 2888 
      list = (struct ice_aqc_add_tx_qgrp *)(q + (unsigned long)list->num_txqs);
    }
    #line 2884 
    i = (u16)((int)i + 1);
  }
  #line 2891 
  if ((int)buf_size != (int)sum_header_size + (int)sum_q_size) 
                                                               #line 2892 
                                                               return ICE_ERR_PARAM;
  #line 2894 
  desc.flags = (unsigned short)((unsigned int)desc.flags | 1024U);
  #line 2896 
  cmd->num_qgrps = num_qgrps;
  #line 2898 
  return ice_aq_send_cmd(hw,& desc,(void *)qg_list,
                      (unsigned short)((int)buf_size),cd);
}

#line 2914  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_common.c"
static enum ice_status ice_aq_dis_lan_txq(struct ice_hw *hw, u8 num_qgrps, struct ice_aqc_dis_txq_item *qg_list, u16 buf_size, enum ice_disq_rst_src rst_src, u16 vmvf_num, struct ice_sq_cd *cd)
{
  #line 2919 
  struct ice_aqc_dis_txqs *cmd;
  #line 2920 
  struct ice_aq_desc desc;
  #line 2921 
  enum ice_status status;
  #line 2922 
  u16 i;
  #line 2922 
  u16 sz = (unsigned short)0U;
  #line 2924 
  cmd = & desc.params.dis_txqs;
  #line 2925 
  ice_fill_dflt_direct_cmd_desc(& desc,(unsigned short)3121);
  #line 2928 
  if (qg_list == (struct ice_aqc_dis_txq_item *)0 && rst_src == (unsigned int)ICE_NO_RESET) 
    #line 2929 
    return ICE_ERR_PARAM;
  #line 2931 
  if ((int)num_qgrps < 0) 
                          #line 2932 
                          return ICE_ERR_PARAM;
  #line 2934 
  cmd->num_entries = num_qgrps;
  #line 2936 
  cmd->vmvf_and_timeout = (unsigned short)5120U;
  #line 2939 
  switch ((unsigned int)rst_src) {
    #line 2940 
    case (unsigned int)1: 
                          #line 2940 
    ;
    #line 2941 
    cmd->cmd_type = (unsigned char)1U;
    #line 2942 
    cmd->vmvf_and_timeout = (unsigned short)((int)cmd->vmvf_and_timeout | ((int)vmvf_num & 1023));
    #line 2944 
    break;
    #line 2945 
    case (unsigned int)2: 
                          #line 2945 
    ;
    #line 2946 
    cmd->cmd_type = (unsigned char)2U;
    #line 2948 
    cmd->vmvf_and_timeout = (unsigned short)((int)cmd->vmvf_and_timeout | (((int)((unsigned short)hw->func_caps.vf_base_id) + (int)vmvf_num) & 1023));
    #line 2951 
    break;
    #line 2952 
    case (unsigned int)0: 
                          #line 2952 
    ;
    #line 2953 
    default: 
             #line 2953 
    ;
    #line 2954 
    break;
  }
  #line 2958 
  cmd->cmd_type = (unsigned char)((unsigned int)cmd->cmd_type | 8U);
  #line 2960 
  if (qg_list == (struct ice_aqc_dis_txq_item *)0) 
                                                   #line 2961 
                                                   goto do_aq;
  #line 2966 
  desc.flags = (unsigned short)((unsigned int)desc.flags | 1024U);
  #line 2968 
  i = (unsigned short)0U;
  #line 2968 
  while ((int)((unsigned short)num_qgrps) > (int)i) {
    #line 2970 
    sz = (unsigned short)((unsigned int)((unsigned short)(qg_list + (unsigned long)i)->num_qs) * 2U + (unsigned int)sz);
    #line 2973 
    sz = (unsigned short)((unsigned int)sz + 6U);
    #line 2976 
    if (((unsigned int)(qg_list + (unsigned long)i)->num_qs & 1U) == 0U) 
      #line 2977 
      sz = (unsigned short)((unsigned int)sz + 2U);
    #line 2968 
    i = (u16)((int)i + 1);
  }
  #line 2980 
  if ((int)buf_size != (int)sz) 
                                #line 2981 
                                return ICE_ERR_PARAM;
  #line 2983 
  do_aq: 
         #line 2983 
  ;
  #line 2984 
  status = ice_aq_send_cmd(hw,& desc,(void *)qg_list,(unsigned short)((int)buf_size),cd);
  #line 2985 
  if (status != ICE_SUCCESS) 
    #line 2986 
    if (qg_list == (struct ice_aqc_dis_txq_item *)0) {
      #line 2987 
      bool branch;
      #line 2987 
      struct _ddebug __UNIQUE_ID_ddebug602 = {.modname = (char *)"ice", .function = (char *)"ice_aq_dis_lan_txq", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_common.c", .format = (char *)"VM%d disable failed %d\n", .lineno = (unsigned int)2987U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 2987 
      branch = arch_static_branch(& __UNIQUE_ID_ddebug602.key.dd_key_false.key,(_Bool)0);
      #line 2987 
      if ((long)((long)((int)branch != 0)) != 0L) {
        #line 2987 
        void *__mptr;
        #line 2987 
        ;
        #line 2987 
        ;
        #line 2987 
        __mptr = (void *)hw;
        #line 2987 
        __dynamic_dev_dbg(& __UNIQUE_ID_ddebug602,& (((struct ice_pf *)(__mptr + 18446744073709549512U))->pdev)->dev,(char *)"VM%d disable failed %d\n",(int)vmvf_num,(unsigned int)hw->adminq.sq_last_status);
      }
    }
    else {
      #line 2990 
      bool branch_0;
      #line 2990 
      struct _ddebug __UNIQUE_ID_ddebug603 = {.modname = (char *)"ice", .function = (char *)"ice_aq_dis_lan_txq", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_common.c", .format = (char *)"disable queue %d failed %d\n", .lineno = (unsigned int)2990U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 2990 
      branch_0 = arch_static_branch(& __UNIQUE_ID_ddebug603.key.dd_key_false.key,(_Bool)0);
      #line 2990 
      if ((long)((long)((int)branch_0 != 0)) != 0L) {
        #line 2990 
        void *__mptr_0;
        #line 2990 
        ;
        #line 2990 
        ;
        #line 2990 
        __mptr_0 = (void *)hw;
        #line 2990 
        __dynamic_dev_dbg(& __UNIQUE_ID_ddebug603,& (((struct ice_pf *)(__mptr_0 + 18446744073709549512U))->pdev)->dev,(char *)"disable queue %d failed %d\n",(int)qg_list->q_id[0],(unsigned int)hw->adminq.sq_last_status);
      }
    }
  #line 2994 
  return status;
}

#line 3006  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_common.c"
static void ice_write_byte(u8 *src_ctx, u8 *dest_ctx, struct ice_ctx_ele *ce_info)
{
  #line 3008 
  u8 src_byte;
  #line 3008 
  u8 dest_byte;
  #line 3008 
  u8 mask;
  #line 3009 
  u8 *from;
  #line 3009 
  u8 *dest;
  #line 3010 
  u16 shift_width;
  #line 3013 
  from = src_ctx + (unsigned long)ce_info->offset;
  #line 3016 
  shift_width = (unsigned short)((unsigned int)ce_info->lsb & 7U);
  #line 3017 
  mask = (unsigned char)((unsigned int)((unsigned char)(1UL << (int)ce_info->width)) + 255U);
  #line 3019 
  src_byte = *from;
  #line 3020 
  src_byte = (unsigned char)((int)src_byte & (int)mask);
  #line 3023 
  mask = (unsigned char)((int)mask << (int)shift_width);
  #line 3024 
  src_byte = (unsigned char)((int)src_byte << (int)shift_width);
  #line 3027 
  dest = dest_ctx + (unsigned long)((unsigned int)ce_info->lsb / 8U);
  #line 3029 
  memcpy((void *)(& dest_byte),(void *)dest,1UL);
  #line 3031 
  dest_byte = (unsigned char)(~ ((int)mask) & (int)dest_byte);
  #line 3032 
  dest_byte = (unsigned char)((int)dest_byte | (int)src_byte);
  #line 3035 
  memcpy((void *)dest,(void *)(& dest_byte),1UL);
  #line 3036 
  return;
}

#line 3045  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_common.c"
static void ice_write_word(u8 *src_ctx, u8 *dest_ctx, struct ice_ctx_ele *ce_info)
{
  #line 3047 
  u16 src_word;
  #line 3047 
  u16 mask;
  #line 3048 
  __le16 dest_word;
  #line 3049 
  u8 *from;
  #line 3049 
  u8 *dest;
  #line 3050 
  u16 shift_width;
  #line 3053 
  from = src_ctx + (unsigned long)ce_info->offset;
  #line 3056 
  shift_width = (unsigned short)((unsigned int)ce_info->lsb & 7U);
  #line 3057 
  mask = (unsigned short)((unsigned int)((unsigned short)(1UL << (int)ce_info->width)) + 65535U);
  #line 3062 
  src_word = *((u16 *)from);
  #line 3063 
  src_word = (unsigned short)((int)src_word & (int)mask);
  #line 3066 
  mask = (unsigned short)((int)mask << (int)shift_width);
  #line 3067 
  src_word = (unsigned short)((int)src_word << (int)shift_width);
  #line 3070 
  dest = dest_ctx + (unsigned long)((unsigned int)ce_info->lsb / 8U);
  #line 3072 
  memcpy((void *)(& dest_word),(void *)dest,2UL);
  #line 3074 
  dest_word = (unsigned short)(~ ((int)mask) & (int)dest_word);
  #line 3075 
  dest_word = (unsigned short)((int)dest_word | (int)src_word);
  #line 3078 
  memcpy((void *)dest,(void *)(& dest_word),2UL);
  #line 3079 
  return;
}

#line 3088  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_common.c"
static void ice_write_dword(u8 *src_ctx, u8 *dest_ctx, struct ice_ctx_ele *ce_info)
{
  #line 3090 
  u32 src_dword;
  #line 3090 
  u32 mask;
  #line 3091 
  __le32 dest_dword;
  #line 3092 
  u8 *from;
  #line 3092 
  u8 *dest;
  #line 3093 
  u16 shift_width;
  #line 3096 
  from = src_ctx + (unsigned long)ce_info->offset;
  #line 3099 
  shift_width = (unsigned short)((unsigned int)ce_info->lsb & 7U);
  #line 3105 
  if ((unsigned int)ce_info->width <= 31U) 
                                           #line 3106 
                                           mask = (unsigned int)(1UL << (int)ce_info->width) + 4294967295U; else 
                                                                    #line 3108 
                                                                    mask = 4294967295U;
  #line 3113 
  src_dword = *((u32 *)from);
  #line 3114 
  src_dword &= mask;
  #line 3117 
  mask <<= (int)shift_width;
  #line 3118 
  src_dword <<= (int)shift_width;
  #line 3121 
  dest = dest_ctx + (unsigned long)((unsigned int)ce_info->lsb / 8U);
  #line 3123 
  memcpy((void *)(& dest_dword),(void *)dest,4UL);
  #line 3125 
  dest_dword = ~ mask & dest_dword;
  #line 3126 
  dest_dword |= src_dword;
  #line 3129 
  memcpy((void *)dest,(void *)(& dest_dword),4UL);
  #line 3130 
  return;
}

#line 3139  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_common.c"
static void ice_write_qword(u8 *src_ctx, u8 *dest_ctx, struct ice_ctx_ele *ce_info)
{
  #line 3141 
  u64 src_qword;
  #line 3141 
  u64 mask;
  #line 3142 
  __le64 dest_qword;
  #line 3143 
  u8 *from;
  #line 3143 
  u8 *dest;
  #line 3144 
  u16 shift_width;
  #line 3147 
  from = src_ctx + (unsigned long)ce_info->offset;
  #line 3150 
  shift_width = (unsigned short)((unsigned int)ce_info->lsb & 7U);
  #line 3156 
  if ((unsigned int)ce_info->width <= 63U) 
                                           #line 3157 
                                           mask = (1ULL << (int)ce_info->width) + 18446744073709551615ULL; else 
                                                                    #line 3159 
                                                                    mask = 18446744073709551615ULL;
  #line 3164 
  src_qword = *((u64 *)from);
  #line 3165 
  src_qword &= mask;
  #line 3168 
  mask <<= (int)shift_width;
  #line 3169 
  src_qword <<= (int)shift_width;
  #line 3172 
  dest = dest_ctx + (unsigned long)((unsigned int)ce_info->lsb / 8U);
  #line 3174 
  memcpy((void *)(& dest_qword),(void *)dest,8UL);
  #line 3176 
  dest_qword = ~ mask & dest_qword;
  #line 3177 
  dest_qword |= src_qword;
  #line 3180 
  memcpy((void *)dest,(void *)(& dest_qword),8UL);
  #line 3181 
  return;
}

#line 3190  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_common.c"
enum ice_status ice_set_ctx(u8 *src_ctx, u8 *dest_ctx, struct ice_ctx_ele *ce_info)
{
  #line 3192 
  int f;
  #line 3194 
  f = 0;
  #line 3194 
  while ((unsigned int)(ce_info + (unsigned long)f)->width != 0U) {
    #line 3199 
    switch ((int)(ce_info + (unsigned long)f)->size_of) {
      #line 3200 
      case 1: 
              #line 3200 
      ;
      #line 3201 
      ice_write_byte(src_ctx,dest_ctx,ce_info + (unsigned long)f);
      #line 3202 
      break;
      #line 3203 
      case 2: 
              #line 3203 
      ;
      #line 3204 
      ice_write_word(src_ctx,dest_ctx,ce_info + (unsigned long)f);
      #line 3205 
      break;
      #line 3206 
      case 4: 
              #line 3206 
      ;
      #line 3207 
      ice_write_dword(src_ctx,dest_ctx,ce_info + (unsigned long)f);
      #line 3208 
      break;
      #line 3209 
      case 8: 
              #line 3209 
      ;
      #line 3210 
      ice_write_qword(src_ctx,dest_ctx,ce_info + (unsigned long)f);
      #line 3211 
      break;
      #line 3212 
      default: 
               #line 3212 
      ;
      #line 3213 
      return ICE_ERR_INVAL_SIZE;
    }
    #line 3194 
    f ++;
  }
  #line 3217 
  return ICE_SUCCESS;
}

#line 3228  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_common.c"
struct ice_q_ctx *ice_get_lan_q_ctx(struct ice_hw *hw, u16 vsi_handle, u8 tc, u16 q_handle)
{
  #line 3230 
  struct ice_vsi_ctx *vsi;
  #line 3231 
  struct ice_q_ctx *q_ctx;
  #line 3233 
  vsi = ice_get_vsi_ctx(hw,(unsigned short)((int)vsi_handle));
  #line 3234 
  if (vsi == (struct ice_vsi_ctx *)0) 
                                      #line 3235 
                                      return (struct ice_q_ctx *)0;
  #line 3236 
  if ((int)vsi->num_lan_q_entries[(int)tc] <= (int)q_handle) 
                                                             #line 3237 
                                                             return (struct ice_q_ctx *)0;
  #line 3238 
  if (vsi->lan_q_ctx[(int)tc] == (struct ice_q_ctx *)0) 
                                                        #line 3239 
                                                        return (struct ice_q_ctx *)0;
  #line 3240 
  q_ctx = vsi->lan_q_ctx[(int)tc];
  #line 3241 
  return q_ctx + (unsigned long)q_handle;
}

#line 3258  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_common.c"
enum ice_status ice_ena_vsi_txq(struct ice_port_info *pi, u16 vsi_handle, u8 tc, u16 q_handle, u8 num_qgrps, struct ice_aqc_add_tx_qgrp *buf, u16 buf_size, struct ice_sq_cd *cd)
{
  #line 3263 
  struct ice_sched_node *parent;
  #line 3264 
  struct ice_q_ctx *q_ctx;
  #line 3265 
  enum ice_status status;
  #line 3266 
  struct ice_hw *hw;
  #line 3262 
  struct ice_aqc_txsched_elem_data node = {.parent_teid = 0U, .node_teid = 0U, .data = {.elem_type = (unsigned char)0, .valid_sections = (unsigned char)0, .generic = (unsigned char)0, .flags = (unsigned char)0, .cir_bw = {.bw_profile_idx = (unsigned short)0, .bw_alloc = (unsigned short)0}, .eir_bw = {.bw_profile_idx = (unsigned short)0, .bw_alloc = (unsigned short)0}, .srl_id = (unsigned short)0, .reserved2 = (unsigned short)0}};
  #line 3268 
  if (pi == (struct ice_port_info *)0 || (unsigned int)pi->port_state != 1U) 
    #line 3269 
    return ICE_ERR_CFG;
  #line 3271 
  if ((unsigned int)num_qgrps > 1U || (unsigned int)buf->num_txqs > 1U) 
    #line 3272 
    return ICE_ERR_MAX_LIMIT;
  #line 3274 
  hw = pi->hw;
  #line 3276 
  if (! ice_is_vsi_valid(hw,(unsigned short)((int)vsi_handle))) 
                                                                #line 3277 
                                                                return ICE_ERR_PARAM;
  #line 3279 
  cif_mutex_lock_sched_lock_of_ice_port_info(& pi->sched_lock);
  #line 3281 
  q_ctx = ice_get_lan_q_ctx(hw,(unsigned short)((int)vsi_handle),(unsigned char)((int)tc),(unsigned short)((int)q_handle));
  #line 3282 
  if (q_ctx == (struct ice_q_ctx *)0) {
    {
      #line 3283 
      bool branch;
      #line 3283 
      struct _ddebug __UNIQUE_ID_ddebug604 = {.modname = (char *)"ice", .function = (char *)"ice_ena_vsi_txq", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_common.c", .format = (char *)"Enaq: invalid queue handle %d\n", .lineno = (unsigned int)3283U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 3283 
      branch = arch_static_branch(& __UNIQUE_ID_ddebug604.key.dd_key_false.key,(_Bool)0);
      #line 3283 
      if ((long)((long)((int)branch != 0)) != 0L) {
        #line 3283 
        void *__mptr;
        #line 3283 
        ;
        #line 3283 
        __mptr = (void *)hw;
        #line 3283 
        __dynamic_dev_dbg(& __UNIQUE_ID_ddebug604,& (((struct ice_pf *)(__mptr + 18446744073709549512U))->pdev)->dev,(char *)"Enaq: invalid queue handle %d\n",(int)q_handle);
      }
    }
    #line 3285 
    status = ICE_ERR_PARAM;
    #line 3286 
    goto ena_txq_exit;
  }
  #line 3290 
  parent = ice_sched_get_free_qparent(pi,(unsigned short)((int)vsi_handle),(unsigned char)((int)tc),(unsigned char)0);
  #line 3292 
  if (parent == (struct ice_sched_node *)0) {
    #line 3293 
    status = ICE_ERR_PARAM;
    #line 3294 
    goto ena_txq_exit;
  }
  #line 3297 
  buf->parent_teid = parent->info.node_teid;
  #line 3298 
  node.parent_teid = parent->info.node_teid;
  #line 3310 
  buf->txqs[0].info.valid_sections = (unsigned char)1U;
  #line 3313 
  status = ice_aq_add_lan_txq(hw,(unsigned char)((int)num_qgrps),buf,(unsigned short)((int)buf_size),cd);
  #line 3314 
  if (status != ICE_SUCCESS) {
    {
      #line 3315 
      bool branch_0;
      #line 3315 
      struct _ddebug __UNIQUE_ID_ddebug605 = {.modname = (char *)"ice", .function = (char *)"ice_ena_vsi_txq", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_common.c", .format = (char *)"enable queue %d failed %d\n", .lineno = (unsigned int)3315U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 3315 
      branch_0 = arch_static_branch(& __UNIQUE_ID_ddebug605.key.dd_key_false.key,(_Bool)0);
      #line 3315 
      if ((long)((long)((int)branch_0 != 0)) != 0L) {
        #line 3315 
        void *__mptr_0;
        #line 3315 
        ;
        #line 3315 
        ;
        #line 3315 
        __mptr_0 = (void *)hw;
        #line 3315 
        __dynamic_dev_dbg(& __UNIQUE_ID_ddebug605,& (((struct ice_pf *)(__mptr_0 + 18446744073709549512U))->pdev)->dev,(char *)"enable queue %d failed %d\n",(int)buf->txqs[0].txq_id,(unsigned int)hw->adminq.sq_last_status);
      }
    }
    #line 3318 
    goto ena_txq_exit;
  }
  #line 3321 
  node.node_teid = buf->txqs[0].q_teid;
  #line 3322 
  node.data.elem_type = (unsigned char)5U;
  #line 3323 
  q_ctx->q_handle = q_handle;
  #line 3324 
  q_ctx->q_teid = node.node_teid;
  #line 3327 
  status = ice_sched_add_node(pi,(unsigned char)((int)((unsigned int)((unsigned char)hw->num_tx_sched_layers) + 255U)),& node);
  #line 3328 
  if (status == ICE_SUCCESS) 
                             #line 3329 
                             status = ice_sched_replay_q_bw(pi,q_ctx);
  #line 3331 
  ena_txq_exit: 
                #line 3331 
  ;
  #line 3332 
  cif_mutex_unlock_sched_lock_of_ice_port_info(& pi->sched_lock);
  #line 3333 
  return status;
}

#line 3352  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_common.c"
enum ice_status ice_dis_vsi_txq(struct ice_port_info *pi, u16 vsi_handle, u8 tc, u8 num_queues, u16 *q_handles, u16 *q_ids, u32 *q_teids, enum ice_disq_rst_src rst_src, u16 vmvf_num, struct ice_sq_cd *cd)
{
  #line 3358 
  struct ice_aqc_dis_txq_item qg_list;
  #line 3359 
  struct ice_q_ctx *q_ctx;
  #line 3360 
  u16 i;
  #line 3357 
  enum ice_status status = -15;
  #line 3362 
  if (pi == (struct ice_port_info *)0 || (unsigned int)pi->port_state != 1U) 
    #line 3363 
    return ICE_ERR_CFG;
  #line 3365 
  if ((unsigned int)num_queues == 0U) {
    #line 3370 
    if (rst_src != (unsigned int)ICE_NO_RESET) {
      #line 3371 
      return ice_aq_dis_lan_txq(pi->hw,(unsigned char)0,
                         (struct ice_aqc_dis_txq_item *)0,(unsigned short)0,
                         rst_src,(unsigned short)((int)vmvf_num),
                         (struct ice_sq_cd *)0);
    }
    #line 3373 
    return ICE_ERR_CFG;
  }
  #line 3376 
  cif_mutex_lock_sched_lock_of_ice_port_info(& pi->sched_lock);
  #line 3378 
  i = (unsigned short)0U;
  #line 3378 
  while ((int)((unsigned short)num_queues) > (int)i) {
    {
      #line 3379 
      struct ice_sched_node *node;
      #line 3381 
      node = ice_sched_find_node_by_teid(pi->root,*(q_teids + (unsigned long)i));
      #line 3382 
      if (node == (struct ice_sched_node *)0) 
                                              #line 3383 
                                              goto __Cont;
      #line 3384 
      q_ctx = ice_get_lan_q_ctx(pi->hw,(unsigned short)((int)vsi_handle),(unsigned char)((int)tc),(unsigned short)((int)*(q_handles + (unsigned long)i)));
      #line 3385 
      if (q_ctx == (struct ice_q_ctx *)0) {
        {
          #line 3386 
          bool branch;
          #line 3386 
          struct _ddebug __UNIQUE_ID_ddebug606 = {.modname = (char *)"ice", .function = (char *)"ice_dis_vsi_txq", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_common.c", .format = (char *)"invalid queue handle%d\n", .lineno = (unsigned int)3386U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
          #line 3386 
          branch = arch_static_branch(& __UNIQUE_ID_ddebug606.key.dd_key_false.key,(_Bool)0);
          #line 3386 
          if ((long)((long)((int)branch != 0)) != 0L) {
            #line 3386 
            void *__mptr;
            #line 3386 
            ;
            #line 3386 
            __mptr = (void *)pi->hw;
            #line 3386 
            __dynamic_dev_dbg(& __UNIQUE_ID_ddebug606,& (((struct ice_pf *)(__mptr + 18446744073709549512U))->pdev)->dev,(char *)"invalid queue handle%d\n",(int)*(q_handles + (unsigned long)i));
          }
        }
        #line 3388 
        goto __Cont;
      }
      #line 3390 
      if ((int)q_ctx->q_handle != (int)*(q_handles + (unsigned long)i)) {
        {
          #line 3391 
          bool branch_0;
          #line 3391 
          struct _ddebug __UNIQUE_ID_ddebug607 = {.modname = (char *)"ice", .function = (char *)"ice_dis_vsi_txq", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_common.c", .format = (char *)"Err:handles %d %d\n", .lineno = (unsigned int)3391U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
          #line 3391 
          branch_0 = arch_static_branch(& __UNIQUE_ID_ddebug607.key.dd_key_false.key,(_Bool)0);
          #line 3391 
          if ((long)((long)((int)branch_0 != 0)) != 0L) {
            #line 3391 
            void *__mptr_0;
            #line 3391 
            ;
            #line 3391 
            ;
            #line 3391 
            __mptr_0 = (void *)pi->hw;
            #line 3391 
            __dynamic_dev_dbg(& __UNIQUE_ID_ddebug607,& (((struct ice_pf *)(__mptr_0 + 18446744073709549512U))->pdev)->dev,(char *)"Err:handles %d %d\n",(int)q_ctx->q_handle,(int)*(q_handles + (unsigned long)i));
          }
        }
        #line 3393 
        goto __Cont;
      }
      #line 3395 
      qg_list.parent_teid = node->info.parent_teid;
      #line 3396 
      qg_list.num_qs = (unsigned char)1U;
      #line 3397 
      qg_list.q_id[0] = *(q_ids + (unsigned long)i);
      #line 3398 
      status = ice_aq_dis_lan_txq(pi->hw,(unsigned char)1,& qg_list,(unsigned short)8,rst_src,(unsigned short)((int)vmvf_num),cd);
      #line 3402 
      if (status != ICE_SUCCESS) 
                                 #line 3403 
                                 break;
      #line 3404 
      ice_free_sched_node(pi,node);
      #line 3405 
      q_ctx->q_handle = (unsigned short)65535U;
    }
    #line 3378 
    __Cont: 
            #line 3378 
    i = (u16)((int)i + 1);
  }
  #line 3407 
  cif_mutex_unlock_sched_lock_of_ice_port_info(& pi->sched_lock);
  #line 3408 
  return status;
}

#line 3422  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_common.c"
static enum ice_status ice_cfg_vsi_qs(struct ice_port_info *pi, u16 vsi_handle, u8 tc_bitmap, u16 *maxqs, u8 owner)
{
  #line 3426 
  u8 i;
  #line 3425 
  enum ice_status status = 0;
  #line 3428 
  if (pi == (struct ice_port_info *)0 || (unsigned int)pi->port_state != 1U) 
    #line 3429 
    return ICE_ERR_CFG;
  #line 3431 
  if (! ice_is_vsi_valid(pi->hw,(unsigned short)((int)vsi_handle))) 
                                                                    #line 3432 
                                                                    return ICE_ERR_PARAM;
  #line 3434 
  cif_mutex_lock_sched_lock_of_ice_port_info(& pi->sched_lock);
  #line 3436 
  i = (unsigned char)0U;
  #line 3436 
  while ((unsigned int)i <= 7U) {
    {
      #line 3438 
      if (ice_sched_get_tc_node(pi,(unsigned char)((int)i)) == (struct ice_sched_node *)0) 
        #line 3439 
        goto __Cont;
      #line 3441 
      ;
      #line 3441 
      ;
      #line 3441 
      ;
      #line 3441 
      ;
      #line 3441 
      ;
      #line 3441 
      status = ice_sched_cfg_vsi(pi,(unsigned short)((int)vsi_handle),(unsigned char)((int)i),(unsigned short)((int)*(maxqs + (unsigned long)i)),(unsigned char)((int)owner),(_Bool)((bool)((int)ice_is_tc_ena((unsigned long)tc_bitmap,(unsigned char)((int)i))) != 0));
      #line 3443 
      if (status != ICE_SUCCESS) 
                                 #line 3444 
                                 break;
    }
    #line 3436 
    __Cont: 
            #line 3436 
    i = (u8)((int)i + 1);
  }
  #line 3447 
  cif_mutex_unlock_sched_lock_of_ice_port_info(& pi->sched_lock);
  #line 3448 
  return status;
}

#line 3461  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_common.c"
enum ice_status ice_cfg_vsi_lan(struct ice_port_info *pi, u16 vsi_handle, u8 tc_bitmap, u16 *max_lanqs)
{
  #line 3464 
  return ice_cfg_vsi_qs(pi,(unsigned short)((int)vsi_handle),
                     (unsigned char)((int)tc_bitmap),max_lanqs,
                     (unsigned char)0);
}

#line 3474  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_common.c"
static enum ice_status ice_replay_pre_init(struct ice_hw *hw)
{
  #line 3477 
  u8 i;
  #line 3476 
  struct ice_switch_info *sw = hw->switch_info;
  #line 3480 
  ice_rm_all_sw_replay_rule_info(hw);
  #line 3485 
  i = (unsigned char)0U;
  #line 3485 
  while ((unsigned int)i <= 9U) {
    #line 3486 
    list_replace_init(& (sw->recp_list + (unsigned long)i)->filt_rules,& (sw->recp_list + (unsigned long)i)->filt_replay_rules);
    #line 3485 
    i = (u8)((int)i + 1);
  }
  #line 3489 
  return ICE_SUCCESS;
}

#line 3500  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_common.c"
enum ice_status ice_replay_vsi(struct ice_hw *hw, u16 vsi_handle)
{
  #line 3502 
  enum ice_status status;
  #line 3504 
  if (! ice_is_vsi_valid(hw,(unsigned short)((int)vsi_handle))) 
                                                                #line 3505 
                                                                return ICE_ERR_PARAM;
  #line 3508 
  if ((unsigned int)vsi_handle == 0U) {
    #line 3509 
    status = ice_replay_pre_init(hw);
    #line 3510 
    if (status != ICE_SUCCESS) 
                               #line 3511 
                               return status;
  }
  #line 3515 
  status = ice_replay_vsi_all_fltr(hw,(unsigned short)((int)vsi_handle));
  #line 3516 
  return status;
}

#line 3525  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_common.c"
void ice_replay_post(struct ice_hw *hw)
{
  #line 3528 
  ice_rm_all_sw_replay_rule_info(hw);
  #line 3529 
  return;
}

#line 3540  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_common.c"
void ice_stat_update40(struct ice_hw *hw, u32 reg, bool prev_stat_loaded, u64 *prev_stat, u64 *cur_stat)
{
  #line 3543 
  u64 new_data = readq((void *)(hw->hw_addr + (unsigned long)reg)) & 1099511627775ULL;
  #line 3550 
  if (! prev_stat_loaded) {
    #line 3551 
    *prev_stat = new_data;
    #line 3552 
    return;
  }
  #line 3558 
  if (*prev_stat <= new_data) 
                              #line 3559 
                              *cur_stat += new_data - *prev_stat; else 
                                                                    #line 3562 
                                                                    *cur_stat = (*cur_stat + (new_data - *prev_stat)) + 1099511627776ULL;
  #line 3565 
  *prev_stat = new_data;
  #line 3566 
  return;
}

#line 3577  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_common.c"
void ice_stat_update32(struct ice_hw *hw, u32 reg, bool prev_stat_loaded, u64 *prev_stat, u64 *cur_stat)
{
  #line 3580 
  u32 new_data;
  #line 3582 
  new_data = readl((void *)(hw->hw_addr + (unsigned long)reg));
  #line 3589 
  if (! prev_stat_loaded) {
    #line 3590 
    *prev_stat = (unsigned long long)new_data;
    #line 3591 
    return;
  }
  #line 3597 
  if ((unsigned long long)new_data >= *prev_stat) 
                                                  #line 3598 
                                                  *cur_stat += (unsigned long long)new_data - *prev_stat; else 
                                                                    #line 3601 
                                                                    *cur_stat = (*cur_stat + ((unsigned long long)new_data - *prev_stat)) + 4294967296ULL;
  #line 3604 
  *prev_stat = (unsigned long long)new_data;
  #line 3605 
  return;
}

#line 3616  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_common.c"
enum ice_status ice_sched_query_elem(struct ice_hw *hw, u32 node_teid, struct ice_aqc_get_elem *buf)
{
  #line 3619 
  u16 buf_size;
  #line 3620 
  enum ice_status status;
  #line 3619 
  u16 num_elem_ret = (unsigned short)0U;
  #line 3622 
  buf_size = (unsigned short)24U;
  #line 3623 
  memset((void *)buf,0,(unsigned long)buf_size);
  #line 3624 
  buf->generic[0].node_teid = node_teid;
  #line 3625 
  status = ice_aq_query_sched_elems(hw,(unsigned short)1,buf,(unsigned short)((int)buf_size),& num_elem_ret,(struct ice_sq_cd *)0);
  #line 3627 
  if (status != ICE_SUCCESS || (unsigned int)num_elem_ret != 1U) {
    #line 3628 
    bool branch;
    #line 3628 
    struct _ddebug __UNIQUE_ID_ddebug608 = {.modname = (char *)"ice", .function = (char *)"ice_sched_query_elem", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_common.c", .format = (char *)"query element failed\n", .lineno = (unsigned int)3628U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 3628 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug608.key.dd_key_false.key,(_Bool)0);
    #line 3628 
    if ((long)((long)((int)branch != 0)) != 0L) {
      #line 3628 
      void *__mptr;
      #line 3628 
      __mptr = (void *)hw;
      #line 3628 
      __dynamic_dev_dbg(& __UNIQUE_ID_ddebug608,& (((struct ice_pf *)(__mptr + 18446744073709549512U))->pdev)->dev,(char *)"query element failed\n");
    }
  }
  #line 3629 
  return status;
}

#line 133  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ice/ice.ko/concurrency safety/0/concurrency safety/weaver/ice_common.i.aux"
static void INIT_LIST_HEAD_2(struct list_head *list)
{
  #line 136 
  ldv_init_list_head(list);
  #line 137 
  return;
}

#line 798  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ice/ice.ko/concurrency safety/0/concurrency safety/weaver/ice_common.i.aux"
static void *cif_devm_kzalloc_4(struct device *dev, size_t size, gfp_t flags)
{
  #line 801 
  return ldv_devm_kzalloc(size,flags);
}

#line 805  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ice/ice.ko/concurrency safety/0/concurrency safety/weaver/ice_common.i.aux"
static void *cif_devm_kcalloc_3(struct device *dev, size_t n, size_t size, gfp_t flags)
{
  #line 808 
  return ldv_devm_kcalloc(n,size,flags);
}

#line 812  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ice/ice.ko/concurrency safety/0/concurrency safety/weaver/ice_common.i.aux"
static void cif_mutex_lock_ice_global_cfg_lock_sw(struct mutex *lock)
{
  #line 815 
  ldv_mutex_model_lock(lock,(char *)"ice_global_cfg_lock_sw");
  #line 816 
  return;
}

#line 819  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ice/ice.ko/concurrency safety/0/concurrency safety/weaver/ice_common.i.aux"
static void cif_mutex_unlock_ice_global_cfg_lock_sw(struct mutex *lock)
{
  #line 822 
  ldv_mutex_model_unlock(lock,(char *)"ice_global_cfg_lock_sw");
  #line 823 
  return;
}

#line 826  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ice/ice.ko/concurrency safety/0/concurrency safety/weaver/ice_common.i.aux"
static void cif_mutex_lock_sched_lock_of_ice_port_info(struct mutex *lock)
{
  #line 829 
  ldv_mutex_model_lock(lock,(char *)"sched_lock_of_ice_port_info");
  #line 830 
  return;
}

#line 833  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ice/ice.ko/concurrency safety/0/concurrency safety/weaver/ice_common.i.aux"
static void cif_mutex_unlock_sched_lock_of_ice_port_info(struct mutex *lock)
{
  #line 836 
  ldv_mutex_model_unlock(lock,(char *)"sched_lock_of_ice_port_info");
  #line 837 
  return;
}

#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_common.h"
#line 359  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_nvm.c"
enum ice_status ice_nvm_validate_checksum(struct ice_hw *hw);
#line 39  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_common.h"
#line 340  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_nvm.c"
enum ice_status ice_read_sr_buf(struct ice_hw *hw, u16 offset, u16 *words, u16 *data);
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_nvm.c"
static enum ice_status ice_aq_read_nvm(struct ice_hw *hw, u16 module_typeid, u32 offset, u16 length, void *data, bool last_command, struct ice_sq_cd *cd)
{
  #line 22 
  struct ice_aq_desc desc;
  #line 23 
  struct ice_aqc_nvm *cmd;
  #line 25 
  cmd = & desc.params.nvm;
  #line 28 
  if ((offset & 4278190080U) != 0U) 
                                    #line 29 
                                    return ICE_ERR_PARAM;
  #line 31 
  ice_fill_dflt_direct_cmd_desc(& desc,(unsigned short)1793);
  #line 34 
  if ((int)last_command != 0) 
                              #line 35 
                              cmd->cmd_flags = (unsigned char)((unsigned int)cmd->cmd_flags | 1U);
  #line 36 
  cmd->module_typeid = module_typeid;
  #line 37 
  cmd->offset_low = (unsigned short)offset;
  #line 38 
  cmd->offset_high = (unsigned char)(offset >> 16);
  #line 39 
  cmd->length = length;
  #line 41 
  return ice_aq_send_cmd(hw,& desc,data,(unsigned short)((int)length),cd);
}

#line 51  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_nvm.c"
static enum ice_status ice_check_sr_access_params(struct ice_hw *hw, u32 offset, u16 words)
{
  #line 53 
  if ((unsigned int)words + offset > (unsigned int)hw->nvm.sr_words) {
    {
      #line 54 
      bool branch;
      #line 54 
      struct _ddebug __UNIQUE_ID_ddebug536 = {.modname = (char *)"ice", .function = (char *)"ice_check_sr_access_params", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_nvm.c", .format = (char *)"NVM error: offset beyond SR lmt.\n", .lineno = (unsigned int)54U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 54 
      branch = arch_static_branch(& __UNIQUE_ID_ddebug536.key.dd_key_false.key,(_Bool)0);
      #line 54 
      if ((long)((long)((int)branch != 0)) != 0L) {
        #line 54 
        void *__mptr;
        #line 54 
        __mptr = (void *)hw;
        #line 54 
        __dynamic_dev_dbg(& __UNIQUE_ID_ddebug536,& (((struct ice_pf *)(__mptr + 18446744073709549512U))->pdev)->dev,(char *)"NVM error: offset beyond SR lmt.\n");
      }
    }
    #line 56 
    return ICE_ERR_PARAM;
  }
  #line 59 
  if ((unsigned int)words > 2048U) {
    {
      #line 61 
      bool branch_0;
      #line 61 
      struct _ddebug __UNIQUE_ID_ddebug537 = {.modname = (char *)"ice", .function = (char *)"ice_check_sr_access_params", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_nvm.c", .format = (char *)"NVM error: tried to access %d words, limit is %d.\n", .lineno = (unsigned int)61U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 61 
      branch_0 = arch_static_branch(& __UNIQUE_ID_ddebug537.key.dd_key_false.key,(_Bool)0);
      #line 61 
      if ((long)((long)((int)branch_0 != 0)) != 0L) {
        #line 61 
        void *__mptr_0;
        #line 61 
        ;
        #line 61 
        __mptr_0 = (void *)hw;
        #line 61 
        __dynamic_dev_dbg(& __UNIQUE_ID_ddebug537,& (((struct ice_pf *)(__mptr_0 + 18446744073709549512U))->pdev)->dev,(char *)"NVM error: tried to access %d words, limit is %d.\n",(int)words,2048);
      }
    }
    #line 64 
    return ICE_ERR_PARAM;
  }
  #line 67 
  if ((((unsigned int)words + offset) + 4294967295U) / 2048U != offset / 2048U) {
    {
      #line 70 
      bool branch_1;
      #line 70 
      struct _ddebug __UNIQUE_ID_ddebug538 = {.modname = (char *)"ice", .function = (char *)"ice_check_sr_access_params", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_nvm.c", .format = (char *)"NVM error: cannot spread over two sectors.\n", .lineno = (unsigned int)70U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 70 
      branch_1 = arch_static_branch(& __UNIQUE_ID_ddebug538.key.dd_key_false.key,(_Bool)0);
      #line 70 
      if ((long)((long)((int)branch_1 != 0)) != 0L) {
        #line 70 
        void *__mptr_1;
        #line 70 
        __mptr_1 = (void *)hw;
        #line 70 
        __dynamic_dev_dbg(& __UNIQUE_ID_ddebug538,& (((struct ice_pf *)(__mptr_1 + 18446744073709549512U))->pdev)->dev,(char *)"NVM error: cannot spread over two sectors.\n");
      }
    }
    #line 72 
    return ICE_ERR_PARAM;
  }
  #line 75 
  return ICE_SUCCESS;
}

#line 89  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_nvm.c"
static enum ice_status ice_read_sr_aq(struct ice_hw *hw, u32 offset, u16 words, u16 *data, bool last_command)
{
  #line 92 
  enum ice_status status;
  #line 94 
  status = ice_check_sr_access_params(hw,offset,(unsigned short)((int)words));
  #line 100 
  if (status == ICE_SUCCESS) 
                             #line 101 
                             status = ice_aq_read_nvm(hw,(unsigned short)0,offset * 2U,(unsigned short)((int)((unsigned int)words * 2U)),(void *)data,(_Bool)((bool)((int)last_command) != 0),(struct ice_sq_cd *)0);
  #line 104 
  return status;
}

#line 116  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_nvm.c"
static enum ice_status ice_read_sr_word_aq(struct ice_hw *hw, u16 offset, u16 *data)
{
  #line 118 
  enum ice_status status;
  #line 120 
  status = ice_read_sr_aq(hw,(unsigned int)offset,(unsigned short)1,data,(_Bool)1);
  #line 121 
  if (status == ICE_SUCCESS) 
                             #line 122 
                             *data = *data;
  #line 124 
  return status;
}

#line 139  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_nvm.c"
static enum ice_status ice_read_sr_buf_aq(struct ice_hw *hw, u16 offset, u16 *words, u16 *data)
{
  #line 141 
  enum ice_status status;
  #line 142 
  bool last_cmd = (_Bool)0;
  #line 143 
  u16 words_read = (unsigned short)0U;
  #line 144 
  u16 i = (unsigned short)0U;
  #line 146 
  while (1) {
    {
      #line 147 
      u16 read_size;
      #line 147 
      u16 off_w;
      #line 153 
      off_w = (unsigned short)((unsigned int)offset & 2047U);
      #line 154 
      if ((unsigned int)off_w != 0U) {
        #line 155 
        unsigned short __UNIQUE_ID___x539;
        #line 155 
        int tmp;
        {
          #line 155 
          __UNIQUE_ID___x539 = *words;
          #line 155 
          unsigned short __UNIQUE_ID___y540 = (unsigned short)(2048U - (unsigned int)off_w);
          #line 155 
          if ((int)__UNIQUE_ID___x539 < (int)__UNIQUE_ID___y540) 
                                                                 #line 155 
                                                                 tmp = (int)__UNIQUE_ID___x539; else 
                                                                    #line 155 
                                                                    tmp = (int)__UNIQUE_ID___y540;
          }
        #line 154 
        read_size = (unsigned short)tmp;
      }
      else {
        #line 157 
        unsigned short __UNIQUE_ID___x541;
        #line 157 
        int tmp_1;
        {
          #line 157 
          __UNIQUE_ID___x541 = (unsigned short)((int)*words - (int)words_read);
          #line 157 
          unsigned short __UNIQUE_ID___y542 = (unsigned short)2048U;
          #line 157 
          if ((int)__UNIQUE_ID___x541 < (int)__UNIQUE_ID___y542) 
                                                                 #line 157 
                                                                 tmp_1 = (int)__UNIQUE_ID___x541; else 
                                                                    #line 157 
                                                                    tmp_1 = (int)__UNIQUE_ID___y542;
          }
        #line 154 
        read_size = (unsigned short)tmp_1;
      }
      #line 161 
      if ((int)words_read + (int)read_size >= (int)*words) 
                                                           #line 162 
                                                           last_cmd = (_Bool)1;
      #line 164 
      status = ice_read_sr_aq(hw,(unsigned int)offset,(unsigned short)((int)read_size),data + (unsigned long)words_read,(_Bool)((bool)((int)last_cmd) != 0));
      #line 166 
      if (status != ICE_SUCCESS) 
                                 #line 167 
                                 goto read_nvm_buf_aq_exit;
      #line 172 
      words_read = (unsigned short)((int)words_read + (int)read_size);
      #line 173 
      offset = (unsigned short)((int)offset + (int)read_size);
    }
    #line 174 
    if (! ((int)*words > (int)words_read)) 
                                           #line 146 
                                           break;
  }
  #line 176 
  i = (unsigned short)0U;
  #line 176 
  while ((int)*words > (int)i) {
    #line 177 
    *(data + (unsigned long)i) = *(data + (unsigned long)i);
    #line 176 
    i = (u16)((int)i + 1);
  }
  #line 179 
  read_nvm_buf_aq_exit: 
                        #line 179 
  ;
  #line 180 
  *words = words_read;
  #line 181 
  return status;
}

#line 192  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_nvm.c"
static enum ice_status ice_acquire_nvm(struct ice_hw *hw, enum ice_aq_res_access_type access)
{
  #line 194 
  if ((unsigned int)hw->nvm.blank_nvm_mode != 0U) 
                                                  #line 195 
                                                  return ICE_SUCCESS;
  #line 197 
  return ice_acquire_res(hw,(enum ice_aq_res_ids)ICE_NVM_RES_ID,access,180000U);
}

#line 206  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_nvm.c"
static void ice_release_nvm(struct ice_hw *hw)
{
  #line 208 
  if ((unsigned int)hw->nvm.blank_nvm_mode != 0U) 
                                                  #line 209 
                                                  return;
  #line 211 
  ice_release_res(hw,(enum ice_aq_res_ids)ICE_NVM_RES_ID);
  #line 212 
  return;
}

#line 222  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_nvm.c"
enum ice_status ice_read_sr_word(struct ice_hw *hw, u16 offset, u16 *data)
{
  #line 224 
  enum ice_status status;
  #line 226 
  status = ice_acquire_nvm(hw,(enum ice_aq_res_access_type)ICE_RES_READ);
  #line 227 
  if (status == ICE_SUCCESS) {
    #line 228 
    status = ice_read_sr_word_aq(hw,(unsigned short)((int)offset),data);
    #line 229 
    ice_release_nvm(hw);
  }
  #line 232 
  return status;
}

#line 242  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_nvm.c"
enum ice_status ice_init_nvm(struct ice_hw *hw)
{
  #line 244 
  u16 oem_hi;
  #line 244 
  u16 oem_lo;
  #line 244 
  u16 boot_cfg_tlv;
  #line 244 
  u16 boot_cfg_tlv_len;
  #line 246 
  u16 eetrack_lo;
  #line 246 
  u16 eetrack_hi;
  #line 247 
  enum ice_status status;
  #line 248 
  u32 fla;
  #line 248 
  u32 gens_stat;
  #line 249 
  u8 sr_size;
  #line 245 
  struct ice_nvm_info *nvm = & hw->nvm;
  #line 254 
  gens_stat = readl((void *)(hw->hw_addr + 745728U));
  #line 255 
  sr_size = (unsigned char)((unsigned int)((unsigned char)(gens_stat >> 5)) & 7U);
  #line 258 
  nvm->sr_words = (unsigned short)(512UL << (int)sr_size);
  #line 261 
  fla = readl((void *)(hw->hw_addr + 745736U));
  #line 262 
  if (((unsigned long)fla & 64UL) != 0UL) 
                                          #line 263 
                                          nvm->blank_nvm_mode = (unsigned char)0U;
  else {
    #line 266 
    nvm->blank_nvm_mode = (unsigned char)1U;
    {
      #line 267 
      bool branch;
      #line 267 
      struct _ddebug __UNIQUE_ID_ddebug543 = {.modname = (char *)"ice", .function = (char *)"ice_init_nvm", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_nvm.c", .format = (char *)"NVM init error: unsupported blank mode.\n", .lineno = (unsigned int)267U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 267 
      branch = arch_static_branch(& __UNIQUE_ID_ddebug543.key.dd_key_false.key,(_Bool)0);
      #line 267 
      if ((long)((long)((int)branch != 0)) != 0L) {
        #line 267 
        void *__mptr;
        #line 267 
        __mptr = (void *)hw;
        #line 267 
        __dynamic_dev_dbg(& __UNIQUE_ID_ddebug543,& (((struct ice_pf *)(__mptr + 18446744073709549512U))->pdev)->dev,(char *)"NVM init error: unsupported blank mode.\n");
      }
    }
    #line 269 
    return ICE_ERR_NVM_BLANK_MODE;
  }
  #line 272 
  status = ice_read_sr_word(hw,(unsigned short)24,& nvm->ver);
  #line 273 
  if (status != ICE_SUCCESS) {
    {
      #line 274 
      bool branch_0;
      #line 274 
      struct _ddebug __UNIQUE_ID_ddebug544 = {.modname = (char *)"ice", .function = (char *)"ice_init_nvm", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_nvm.c", .format = (char *)"Failed to read DEV starter version.\n", .lineno = (unsigned int)274U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 274 
      branch_0 = arch_static_branch(& __UNIQUE_ID_ddebug544.key.dd_key_false.key,(_Bool)0);
      #line 274 
      if ((long)((long)((int)branch_0 != 0)) != 0L) {
        #line 274 
        void *__mptr_0;
        #line 274 
        __mptr_0 = (void *)hw;
        #line 274 
        __dynamic_dev_dbg(& __UNIQUE_ID_ddebug544,& (((struct ice_pf *)(__mptr_0 + 18446744073709549512U))->pdev)->dev,(char *)"Failed to read DEV starter version.\n");
      }
    }
    #line 276 
    return status;
  }
  #line 279 
  status = ice_read_sr_word(hw,(unsigned short)45,& eetrack_lo);
  #line 280 
  if (status != ICE_SUCCESS) {
    {
      #line 281 
      bool branch_1;
      #line 281 
      struct _ddebug __UNIQUE_ID_ddebug545 = {.modname = (char *)"ice", .function = (char *)"ice_init_nvm", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_nvm.c", .format = (char *)"Failed to read EETRACK lo.\n", .lineno = (unsigned int)281U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 281 
      branch_1 = arch_static_branch(& __UNIQUE_ID_ddebug545.key.dd_key_false.key,(_Bool)0);
      #line 281 
      if ((long)((long)((int)branch_1 != 0)) != 0L) {
        #line 281 
        void *__mptr_1;
        #line 281 
        __mptr_1 = (void *)hw;
        #line 281 
        __dynamic_dev_dbg(& __UNIQUE_ID_ddebug545,& (((struct ice_pf *)(__mptr_1 + 18446744073709549512U))->pdev)->dev,(char *)"Failed to read EETRACK lo.\n");
      }
    }
    #line 282 
    return status;
  }
  #line 284 
  status = ice_read_sr_word(hw,(unsigned short)46,& eetrack_hi);
  #line 285 
  if (status != ICE_SUCCESS) {
    {
      #line 286 
      bool branch_2;
      #line 286 
      struct _ddebug __UNIQUE_ID_ddebug546 = {.modname = (char *)"ice", .function = (char *)"ice_init_nvm", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_nvm.c", .format = (char *)"Failed to read EETRACK hi.\n", .lineno = (unsigned int)286U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 286 
      branch_2 = arch_static_branch(& __UNIQUE_ID_ddebug546.key.dd_key_false.key,(_Bool)0);
      #line 286 
      if ((long)((long)((int)branch_2 != 0)) != 0L) {
        #line 286 
        void *__mptr_2;
        #line 286 
        __mptr_2 = (void *)hw;
        #line 286 
        __dynamic_dev_dbg(& __UNIQUE_ID_ddebug546,& (((struct ice_pf *)(__mptr_2 + 18446744073709549512U))->pdev)->dev,(char *)"Failed to read EETRACK hi.\n");
      }
    }
    #line 287 
    return status;
  }
  #line 290 
  nvm->eetrack = (unsigned int)(((int)eetrack_hi << 16) | (int)eetrack_lo);
  #line 292 
  status = ice_get_pfa_module_tlv(hw,& boot_cfg_tlv,& boot_cfg_tlv_len,(unsigned short)306);
  #line 294 
  if (status != ICE_SUCCESS) {
    {
      #line 295 
      bool branch_3;
      #line 295 
      struct _ddebug __UNIQUE_ID_ddebug547 = {.modname = (char *)"ice", .function = (char *)"ice_init_nvm", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_nvm.c", .format = (char *)"Failed to read Boot Configuration Block TLV.\n", .lineno = (unsigned int)295U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 295 
      branch_3 = arch_static_branch(& __UNIQUE_ID_ddebug547.key.dd_key_false.key,(_Bool)0);
      #line 295 
      if ((long)((long)((int)branch_3 != 0)) != 0L) {
        #line 295 
        void *__mptr_3;
        #line 295 
        __mptr_3 = (void *)hw;
        #line 295 
        __dynamic_dev_dbg(& __UNIQUE_ID_ddebug547,& (((struct ice_pf *)(__mptr_3 + 18446744073709549512U))->pdev)->dev,(char *)"Failed to read Boot Configuration Block TLV.\n");
      }
    }
    #line 297 
    return status;
  }
  #line 303 
  if ((unsigned int)boot_cfg_tlv_len <= 1U) {
    {
      #line 304 
      bool branch_4;
      #line 304 
      struct _ddebug __UNIQUE_ID_ddebug548 = {.modname = (char *)"ice", .function = (char *)"ice_init_nvm", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_nvm.c", .format = (char *)"Invalid Boot Configuration Block TLV size.\n", .lineno = (unsigned int)304U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 304 
      branch_4 = arch_static_branch(& __UNIQUE_ID_ddebug548.key.dd_key_false.key,(_Bool)0);
      #line 304 
      if ((long)((long)((int)branch_4 != 0)) != 0L) {
        #line 304 
        void *__mptr_4;
        #line 304 
        __mptr_4 = (void *)hw;
        #line 304 
        __dynamic_dev_dbg(& __UNIQUE_ID_ddebug548,& (((struct ice_pf *)(__mptr_4 + 18446744073709549512U))->pdev)->dev,(char *)"Invalid Boot Configuration Block TLV size.\n");
      }
    }
    #line 306 
    return ICE_ERR_INVAL_SIZE;
  }
  #line 309 
  status = ice_read_sr_word(hw,(unsigned short)((int)((unsigned int)boot_cfg_tlv + 2U)),& oem_hi);
  #line 311 
  if (status != ICE_SUCCESS) {
    {
      #line 312 
      bool branch_5;
      #line 312 
      struct _ddebug __UNIQUE_ID_ddebug549 = {.modname = (char *)"ice", .function = (char *)"ice_init_nvm", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_nvm.c", .format = (char *)"Failed to read OEM_VER hi.\n", .lineno = (unsigned int)312U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 312 
      branch_5 = arch_static_branch(& __UNIQUE_ID_ddebug549.key.dd_key_false.key,(_Bool)0);
      #line 312 
      if ((long)((long)((int)branch_5 != 0)) != 0L) {
        #line 312 
        void *__mptr_5;
        #line 312 
        __mptr_5 = (void *)hw;
        #line 312 
        __dynamic_dev_dbg(& __UNIQUE_ID_ddebug549,& (((struct ice_pf *)(__mptr_5 + 18446744073709549512U))->pdev)->dev,(char *)"Failed to read OEM_VER hi.\n");
      }
    }
    #line 313 
    return status;
  }
  #line 316 
  status = ice_read_sr_word(hw,(unsigned short)((int)((unsigned int)boot_cfg_tlv + 3U)),& oem_lo);
  #line 318 
  if (status != ICE_SUCCESS) {
    {
      #line 319 
      bool branch_6;
      #line 319 
      struct _ddebug __UNIQUE_ID_ddebug550 = {.modname = (char *)"ice", .function = (char *)"ice_init_nvm", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_nvm.c", .format = (char *)"Failed to read OEM_VER lo.\n", .lineno = (unsigned int)319U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 319 
      branch_6 = arch_static_branch(& __UNIQUE_ID_ddebug550.key.dd_key_false.key,(_Bool)0);
      #line 319 
      if ((long)((long)((int)branch_6 != 0)) != 0L) {
        #line 319 
        void *__mptr_6;
        #line 319 
        __mptr_6 = (void *)hw;
        #line 319 
        __dynamic_dev_dbg(& __UNIQUE_ID_ddebug550,& (((struct ice_pf *)(__mptr_6 + 18446744073709549512U))->pdev)->dev,(char *)"Failed to read OEM_VER lo.\n");
      }
    }
    #line 320 
    return status;
  }
  #line 323 
  nvm->oem_ver = ((unsigned int)oem_hi << 16) | (unsigned int)oem_lo;
  #line 325 
  return ICE_SUCCESS;
}

#line 340  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_nvm.c"
enum ice_status ice_read_sr_buf(struct ice_hw *hw, u16 offset, u16 *words, u16 *data)
{
  #line 342 
  enum ice_status status;
  #line 344 
  status = ice_acquire_nvm(hw,(enum ice_aq_res_access_type)ICE_RES_READ);
  #line 345 
  if (status == ICE_SUCCESS) {
    #line 346 
    status = ice_read_sr_buf_aq(hw,(unsigned short)((int)offset),words,data);
    #line 347 
    ice_release_nvm(hw);
  }
  #line 350 
  return status;
}

#line 359  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_nvm.c"
enum ice_status ice_nvm_validate_checksum(struct ice_hw *hw)
{
  #line 361 
  struct ice_aqc_nvm_checksum *cmd;
  #line 362 
  struct ice_aq_desc desc;
  #line 363 
  enum ice_status status;
  #line 365 
  status = ice_acquire_nvm(hw,(enum ice_aq_res_access_type)ICE_RES_READ);
  #line 366 
  if (status != ICE_SUCCESS) 
                             #line 367 
                             return status;
  #line 369 
  cmd = & desc.params.nvm_checksum;
  #line 371 
  ice_fill_dflt_direct_cmd_desc(& desc,(unsigned short)1798);
  #line 372 
  cmd->flags = (unsigned char)1U;
  #line 374 
  status = ice_aq_send_cmd(hw,& desc,(void *)0,(unsigned short)0,(struct ice_sq_cd *)0);
  #line 375 
  ice_release_nvm(hw);
  #line 377 
  if (status == ICE_SUCCESS) 
    #line 378 
    if ((unsigned int)cmd->checksum != 47802U) 
                                               #line 379 
                                               status = ICE_ERR_NVM_CHECKSUM;
  #line 381 
  return status;
}

#line 66  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/bitops.h"
__inline static void arch___set_bit(long nr, unsigned long *addr)
{
  #line 68 
  ldv_inline_asm();
  #line 69 
  return;
}

#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bitops/instrumented-atomic.h"
#line 301  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ice/ice.ko/concurrency safety/0/concurrency safety/weaver/ice_ethtool.i.aux"
static void cif_set_bit_7(long nr, unsigned long *addr);
#line 44  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bitops/instrumented-atomic.h"
#line 308  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ice/ice.ko/concurrency safety/0/concurrency safety/weaver/ice_ethtool.i.aux"
static void cif_clear_bit_7(long nr, unsigned long *addr);
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bitops/instrumented-non-atomic.h"
__inline static void __set_bit(long nr, unsigned long *addr)
{
  #line 27 
  kasan_check_read((void *)(addr + (unsigned long)(nr / 64L)),8U);
  #line 28 
  arch___set_bit(nr,addr);
  #line 29 
  return;
}

#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/string.h"
#line 29 
size_t strlcpy(char *, char *, size_t);
#line 140  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bitmap.h"
#line 140 
void __bitmap_xor(unsigned long *, unsigned long *, unsigned long *, unsigned int);
#line 149 
#line 149 
int __bitmap_subset(unsigned long *, unsigned long *, unsigned int);
#line 230 
#line 378  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ice/ice.ko/concurrency safety/0/concurrency safety/weaver/ice_ethtool.i.aux"
static void cif_bitmap_zero(unsigned long *dst, unsigned int nbits);
#line 290  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bitmap.h"
__inline static void bitmap_xor(unsigned long *dst, unsigned long *src1, unsigned long *src2, unsigned int nbits)
{
  #line 293 
  if (0 != 0 && nbits + 4294967295U <= 63U) 
                                            #line 294 
                                            *dst = *src1 ^ *src2; else 
                                                                    #line 296 
                                                                    __bitmap_xor(dst,src1,src2,nbits);
  #line 297 
  return;
}

#line 363  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bitmap.h"
__inline static int bitmap_subset(unsigned long *src1, unsigned long *src2, unsigned int nbits)
{
  #line 366 
  if (0 != 0 && nbits + 4294967295U <= 63U) 
                                            #line 367 
                                            return ((*src1 & ~ *src2) & (18446744073709551615UL >> (- nbits & 63U))) == 0UL;
  else {
    #line 369 
    return __bitmap_subset(src1,src2,nbits);
  }
}

#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/cmpxchg_64.h"
__inline static int arch_atomic_read_3(atomic_t *v)
{
  #line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/atomic.h"
  union __anonunion___u_13393 __u;
  #line 31 
  __read_once_size((void *)(& v->counter),(void *)(& __u.__c),4);
  #line 31 
  return (__u.__val);
}

#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/atomic-instrumented.h"
__inline static int atomic_read_3(atomic_t *v)
{
  #line 26 
  kasan_check_read((void *)v,4U);
  #line 27 
  return arch_atomic_read_3(v);
}

#line 110  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cpumask.h"
__inline static unsigned int num_online_cpus_1(void)
{
  #line 112 
  return (unsigned int)atomic_read_3(& __num_online_cpus);
}

#line 27  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/bitmap.h"
#line 27 
void ldv_bitmap_zero(unsigned long *dst, unsigned int nbits);
#line 607  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/slab.h"
#line 579  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ice/ice.ko/concurrency safety/0/concurrency safety/weaver/ice_ethtool.i.aux"
static void *kcalloc_0(size_t n, size_t size, gfp_t flags);
#line 668  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/slab.h"
#line 600  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ice/ice.ko/concurrency safety/0/concurrency safety/weaver/ice_ethtool.i.aux"
static void *kzalloc_3(size_t size, gfp_t flags);
#line 937  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
#line 987  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ice/ice.ko/concurrency safety/0/concurrency safety/weaver/ice_ethtool.i.aux"
static void *cif_devm_kzalloc_5(struct device *dev, size_t size, gfp_t flags);
#line 952  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
#line 980  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ice/ice.ko/concurrency safety/0/concurrency safety/weaver/ice_ethtool.i.aux"
static void *cif_devm_kcalloc_4(struct device *dev, size_t n, size_t size, gfp_t flags);
#line 86  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ethtool.h"
#line 86 
u32 ethtool_op_get_link(struct net_device *);
#line 87 
#line 87 
int ethtool_op_get_ts_info(struct net_device *, struct ethtool_ts_info *);
#line 170 
#line 170 
void ethtool_intersect_link_masks(struct ethtool_link_ksettings *, struct ethtool_link_ksettings *);
#line 4679  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static bool netif_is_rxfh_configured(struct net_device *dev)
{
  #line 4681 
  return (_Bool)((dev->priv_flags & 8388608U) != 0U);
}

#line 135  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_dcb.h"
#line 135 
enum ice_status ice_aq_stop_lldp(struct ice_hw *hw, bool shutdown_lldp_agent, bool persist, struct ice_sq_cd *cd);
#line 138 
#line 138 
enum ice_status ice_aq_start_lldp(struct ice_hw *hw, bool persist, struct ice_sq_cd *cd);
#line 140 
#line 140 
enum ice_status ice_aq_start_stop_dcbx(struct ice_hw *hw, bool start_dcbx_agent, bool *dcbx_agent_status, struct ice_sq_cd *cd);
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_ethtool.c"
static int ice_q_stats_len(struct net_device *netdev)
{
  #line 29 
  struct ice_netdev_priv *np = netdev_priv(netdev);
  #line 31 
  return (int)((unsigned long)((int)(np->vsi)->alloc_txq + (int)(np->vsi)->alloc_rxq) * (unsigned long)2U);
}

#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_ethtool.c"
static struct ice_stats ice_gstrings_vsi_stats[14U] = {{.stat_string = {(char)'r', (char)'x', (char)'_', (char)'u', (char)'n', (char)'i', (char)'c', (char)'a', (char)'s', (char)'t'}, .sizeof_stat = 8, .stat_offset = 488}, {.stat_string = {(char)'t', (char)'x', (char)'_', (char)'u', (char)'n', (char)'i', (char)'c', (char)'a', (char)'s', (char)'t'}, .sizeof_stat = 8, .stat_offset = 536}, {.stat_string = {(char)'r', (char)'x', (char)'_', (char)'m', (char)'u', (char)'l', (char)'t', (char)'i', (char)'c', (char)'a', (char)'s', (char)'t'}, .sizeof_stat = 8, .stat_offset = 496}, {.stat_string = {(char)'t', (char)'x', (char)'_', (char)'m', (char)'u', (char)'l', (char)'t', (char)'i', (char)'c', (char)'a', (char)'s', (char)'t'}, .sizeof_stat = 8, .stat_offset = 544}, {.stat_string = {(char)'r', (char)'x', (char)'_', (char)'b', (char)'r', (char)'o', (char)'a', (char)'d', (char)'c', (char)'a', (char)'s', (char)'t'}, .sizeof_stat = 8, .stat_offset = 504}, {.stat_string = {(char)'t', (char)'x', (char)'_', (char)'b', (char)'r', (char)'o', (char)'a', (char)'d', (char)'c', (char)'a', (char)'s', (char)'t'}, .sizeof_stat = 8, .stat_offset = 552}, {.stat_string = {(char)'r', (char)'x', (char)'_', (char)'b', (char)'y', (char)'t', (char)'e', (char)'s'}, .sizeof_stat = 8, .stat_offset = 480}, {.stat_string = {(char)'t', (char)'x', (char)'_', (char)'b', (char)'y', (char)'t', (char)'e', (char)'s'}, .sizeof_stat = 8, .stat_offset = 528}, {.stat_string = {(char)'r', (char)'x', (char)'_', (char)'d', (char)'r', (char)'o', (char)'p', (char)'p', (char)'e', (char)'d'}, .sizeof_stat = 8, .stat_offset = 512}, {.stat_string = {(char)'r', (char)'x', (char)'_', (char)'u', (char)'n', (char)'k', (char)'n', (char)'o', (char)'w', (char)'n', (char)'_', (char)'p', (char)'r', (char)'o', (char)'t', (char)'o', (char)'c', (char)'o', (char)'l'}, .sizeof_stat = 8, .stat_offset = 520}, {.stat_string = {(char)'r', (char)'x', (char)'_', (char)'a', (char)'l', (char)'l', (char)'o', (char)'c', (char)'_', (char)'f', (char)'a', (char)'i', (char)'l'}, .sizeof_stat = 4, .stat_offset = 100}, {.stat_string = {(char)'r', (char)'x', (char)'_', (char)'p', (char)'g', (char)'_', (char)'a', (char)'l', (char)'l', (char)'o', (char)'c', (char)'_', (char)'f', (char)'a', (char)'i', (char)'l'}, .sizeof_stat = 4, .stat_offset = 104}, {.stat_string = {(char)'t', (char)'x', (char)'_', (char)'e', (char)'r', (char)'r', (char)'o', (char)'r', (char)'s'}, .sizeof_stat = 8, .stat_offset = 568}, {.stat_string = {(char)'t', (char)'x', (char)'_', (char)'l', (char)'i', (char)'n', (char)'e', (char)'a', (char)'r', (char)'i', (char)'z', (char)'e'}, .sizeof_stat = 8, .stat_offset = 64}};
#line 72  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_ethtool.c"
static char ice_gstrings_test[5U][32U] = {{(char)'R', (char)'e', (char)'g', (char)'i', (char)'s', (char)'t', (char)'e', (char)'r', (char)' ', (char)'t', (char)'e', (char)'s', (char)'t', (char)' ', (char)' ', (char)'(', (char)'o', (char)'f', (char)'f', (char)'l', (char)'i', (char)'n', (char)'e', (char)')'}, {(char)'E', (char)'E', (char)'P', (char)'R', (char)'O', (char)'M', (char)' ', (char)'t', (char)'e', (char)'s', (char)'t', (char)' ', (char)' ', (char)' ', (char)' ', (char)'(', (char)'o', (char)'f', (char)'f', (char)'l', (char)'i', (char)'n', (char)'e', (char)')'}, {(char)'I', (char)'n', (char)'t', (char)'e', (char)'r', (char)'r', (char)'u', (char)'p', (char)'t', (char)' ', (char)'t', (char)'e', (char)'s', (char)'t', (char)' ', (char)'(', (char)'o', (char)'f', (char)'f', (char)'l', (char)'i', (char)'n', (char)'e', (char)')'}, {(char)'L', (char)'o', (char)'o', (char)'p', (char)'b', (char)'a', (char)'c', (char)'k', (char)' ', (char)'t', (char)'e', (char)'s', (char)'t', (char)' ', (char)' ', (char)'(', (char)'o', (char)'f', (char)'f', (char)'l', (char)'i', (char)'n', (char)'e', (char)')'}, {(char)'L', (char)'i', (char)'n', (char)'k', (char)' ', (char)'t', (char)'e', (char)'s', (char)'t', (char)' ', (char)' ', (char)' ', (char)'(', (char)'o', (char)'n', (char)'/', (char)'o', (char)'f', (char)'f', (char)'l', (char)'i', (char)'n', (char)'e', (char)')'}};
#line 91  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_ethtool.c"
static struct ice_stats ice_gstrings_pf_stats[39U] = {{.stat_string = {(char)'r', (char)'x', (char)'_', (char)'b', (char)'y', (char)'t', (char)'e', (char)'s', (char)'.', (char)'n', (char)'i', (char)'c'}, .sizeof_stat = 8, .stat_offset = 808}, {.stat_string = {(char)'t', (char)'x', (char)'_', (char)'b', (char)'y', (char)'t', (char)'e', (char)'s', (char)'.', (char)'n', (char)'i', (char)'c'}, .sizeof_stat = 8, .stat_offset = 856}, {.stat_string = {(char)'r', (char)'x', (char)'_', (char)'u', (char)'n', (char)'i', (char)'c', (char)'a', (char)'s', (char)'t', (char)'.', (char)'n', (char)'i', (char)'c'}, .sizeof_stat = 8, .stat_offset = 816}, {.stat_string = {(char)'t', (char)'x', (char)'_', (char)'u', (char)'n', (char)'i', (char)'c', (char)'a', (char)'s', (char)'t', (char)'.', (char)'n', (char)'i', (char)'c'}, .sizeof_stat = 8, .stat_offset = 864}, {.stat_string = {(char)'r', (char)'x', (char)'_', (char)'m', (char)'u', (char)'l', (char)'t', (char)'i', (char)'c', (char)'a', (char)'s', (char)'t', (char)'.', (char)'n', (char)'i', (char)'c'}, .sizeof_stat = 8, .stat_offset = 824}, {.stat_string = {(char)'t', (char)'x', (char)'_', (char)'m', (char)'u', (char)'l', (char)'t', (char)'i', (char)'c', (char)'a', (char)'s', (char)'t', (char)'.', (char)'n', (char)'i', (char)'c'}, .sizeof_stat = 8, .stat_offset = 872}, {.stat_string = {(char)'r', (char)'x', (char)'_', (char)'b', (char)'r', (char)'o', (char)'a', (char)'d', (char)'c', (char)'a', (char)'s', (char)'t', (char)'.', (char)'n', (char)'i', (char)'c'}, .sizeof_stat = 8, .stat_offset = 832}, {.stat_string = {(char)'t', (char)'x', (char)'_', (char)'b', (char)'r', (char)'o', (char)'a', (char)'d', (char)'c', (char)'a', (char)'s', (char)'t', (char)'.', (char)'n', (char)'i', (char)'c'}, .sizeof_stat = 8, .stat_offset = 880}, {.stat_string = {(char)'t', (char)'x', (char)'_', (char)'e', (char)'r', (char)'r', (char)'o', (char)'r', (char)'s', (char)'.', (char)'n', (char)'i', (char)'c'}, .sizeof_stat = 8, .stat_offset = 896}, {.stat_string = {(char)'r', (char)'x', (char)'_', (char)'s', (char)'i', (char)'z', (char)'e', (char)'_', (char)'6', (char)'4', (char)'.', (char)'n', (char)'i', (char)'c'}, .sizeof_stat = 8, .stat_offset = 1312}, {.stat_string = {(char)'t', (char)'x', (char)'_', (char)'s', (char)'i', (char)'z', (char)'e', (char)'_', (char)'6', (char)'4', (char)'.', (char)'n', (char)'i', (char)'c'}, .sizeof_stat = 8, .stat_offset = 1400}, {.stat_string = {(char)'r', (char)'x', (char)'_', (char)'s', (char)'i', (char)'z', (char)'e', (char)'_', (char)'1', (char)'2', (char)'7', (char)'.', (char)'n', (char)'i', (char)'c'}, .sizeof_stat = 8, .stat_offset = 1320}, {.stat_string = {(char)'t', (char)'x', (char)'_', (char)'s', (char)'i', (char)'z', (char)'e', (char)'_', (char)'1', (char)'2', (char)'7', (char)'.', (char)'n', (char)'i', (char)'c'}, .sizeof_stat = 8, .stat_offset = 1408}, {.stat_string = {(char)'r', (char)'x', (char)'_', (char)'s', (char)'i', (char)'z', (char)'e', (char)'_', (char)'2', (char)'5', (char)'5', (char)'.', (char)'n', (char)'i', (char)'c'}, .sizeof_stat = 8, .stat_offset = 1328}, {.stat_string = {(char)'t', (char)'x', (char)'_', (char)'s', (char)'i', (char)'z', (char)'e', (char)'_', (char)'2', (char)'5', (char)'5', (char)'.', (char)'n', (char)'i', (char)'c'}, .sizeof_stat = 8, .stat_offset = 1416}, {.stat_string = {(char)'r', (char)'x', (char)'_', (char)'s', (char)'i', (char)'z', (char)'e', (char)'_', (char)'5', (char)'1', (char)'1', (char)'.', (char)'n', (char)'i', (char)'c'}, .sizeof_stat = 8, .stat_offset = 1336}, {.stat_string = {(char)'t', (char)'x', (char)'_', (char)'s', (char)'i', (char)'z', (char)'e', (char)'_', (char)'5', (char)'1', (char)'1', (char)'.', (char)'n', (char)'i', (char)'c'}, .sizeof_stat = 8, .stat_offset = 1424}, {.stat_string = {(char)'r', (char)'x', (char)'_', (char)'s', (char)'i', (char)'z', (char)'e', (char)'_', (char)'1', (char)'0', (char)'2', (char)'3', (char)'.', (char)'n', (char)'i', (char)'c'}, .sizeof_stat = 8, .stat_offset = 1344}, {.stat_string = {(char)'t', (char)'x', (char)'_', (char)'s', (char)'i', (char)'z', (char)'e', (char)'_', (char)'1', (char)'0', (char)'2', (char)'3', (char)'.', (char)'n', (char)'i', (char)'c'}, .sizeof_stat = 8, .stat_offset = 1432}, {.stat_string = {(char)'r', (char)'x', (char)'_', (char)'s', (char)'i', (char)'z', (char)'e', (char)'_', (char)'1', (char)'5', (char)'2', (char)'2', (char)'.', (char)'n', (char)'i', (char)'c'}, .sizeof_stat = 8, .stat_offset = 1352}, {.stat_string = {(char)'t', (char)'x', (char)'_', (char)'s', (char)'i', (char)'z', (char)'e', (char)'_', (char)'1', (char)'5', (char)'2', (char)'2', (char)'.', (char)'n', (char)'i', (char)'c'}, .sizeof_stat = 8, .stat_offset = 1440}, {.stat_string = {(char)'r', (char)'x', (char)'_', (char)'s', (char)'i', (char)'z', (char)'e', (char)'_', (char)'b', (char)'i', (char)'g', (char)'.', (char)'n', (char)'i', (char)'c'}, .sizeof_stat = 8, .stat_offset = 1360}, {.stat_string = {(char)'t', (char)'x', (char)'_', (char)'s', (char)'i', (char)'z', (char)'e', (char)'_', (char)'b', (char)'i', (char)'g', (char)'.', (char)'n', (char)'i', (char)'c'}, .sizeof_stat = 8, .stat_offset = 1448}, {.stat_string = {(char)'l', (char)'i', (char)'n', (char)'k', (char)'_', (char)'x', (char)'o', (char)'n', (char)'_', (char)'r', (char)'x', (char)'.', (char)'n', (char)'i', (char)'c'}, .sizeof_stat = 8, .stat_offset = 960}, {.stat_string = {(char)'l', (char)'i', (char)'n', (char)'k', (char)'_', (char)'x', (char)'o', (char)'n', (char)'_', (char)'t', (char)'x', (char)'.', (char)'n', (char)'i', (char)'c'}, .sizeof_stat = 8, .stat_offset = 976}, {.stat_string = {(char)'l', (char)'i', (char)'n', (char)'k', (char)'_', (char)'x', (char)'o', (char)'f', (char)'f', (char)'_', (char)'r', (char)'x', (char)'.', (char)'n', (char)'i', (char)'c'}, .sizeof_stat = 8, .stat_offset = 968}, {.stat_string = {(char)'l', (char)'i', (char)'n', (char)'k', (char)'_', (char)'x', (char)'o', (char)'f', (char)'f', (char)'_', (char)'t', (char)'x', (char)'.', (char)'n', (char)'i', (char)'c'}, .sizeof_stat = 8, .stat_offset = 984}, {.stat_string = {(char)'t', (char)'x', (char)'_', (char)'d', (char)'r', (char)'o', (char)'p', (char)'p', (char)'e', (char)'d', (char)'_', (char)'l', (char)'i', (char)'n', (char)'k', (char)'_', (char)'d', (char)'o', (char)'w', (char)'n', (char)'.', (char)'n', (char)'i', (char)'c'}, .sizeof_stat = 8, .stat_offset = 904}, {.stat_string = {(char)'r', (char)'x', (char)'_', (char)'u', (char)'n', (char)'d', (char)'e', (char)'r', (char)'s', (char)'i', (char)'z', (char)'e', (char)'.', (char)'n', (char)'i', (char)'c'}, .sizeof_stat = 8, .stat_offset = 1368}, {.stat_string = {(char)'r', (char)'x', (char)'_', (char)'f', (char)'r', (char)'a', (char)'g', (char)'m', (char)'e', (char)'n', (char)'t', (char)'s', (char)'.', (char)'n', (char)'i', (char)'c'}, .sizeof_stat = 8, .stat_offset = 1376}, {.stat_string = {(char)'r', (char)'x', (char)'_', (char)'o', (char)'v', (char)'e', (char)'r', (char)'s', (char)'i', (char)'z', (char)'e', (char)'.', (char)'n', (char)'i', (char)'c'}, .sizeof_stat = 8, .stat_offset = 1384}, {.stat_string = {(char)'r', (char)'x', (char)'_', (char)'j', (char)'a', (char)'b', (char)'b', (char)'e', (char)'r', (char)'.', (char)'n', (char)'i', (char)'c'}, .sizeof_stat = 8, .stat_offset = 1392}, {.stat_string = {(char)'r', (char)'x', (char)'_', (char)'c', (char)'s', (char)'u', (char)'m', (char)'_', (char)'b', (char)'a', (char)'d', (char)'.', (char)'n', (char)'i', (char)'c'}, .sizeof_stat = 4, .stat_offset = 772}, {.stat_string = {(char)'r', (char)'x', (char)'_', (char)'l', (char)'e', (char)'n', (char)'g', (char)'t', (char)'h', (char)'_', (char)'e', (char)'r', (char)'r', (char)'o', (char)'r', (char)'s', (char)'.', (char)'n', (char)'i', (char)'c'}, .sizeof_stat = 8, .stat_offset = 952}, {.stat_string = {(char)'r', (char)'x', (char)'_', (char)'d', (char)'r', (char)'o', (char)'p', (char)'p', (char)'e', (char)'d', (char)'.', (char)'n', (char)'i', (char)'c'}, .sizeof_stat = 8, .stat_offset = 840}, {.stat_string = {(char)'r', (char)'x', (char)'_', (char)'c', (char)'r', (char)'c', (char)'_', (char)'e', (char)'r', (char)'r', (char)'o', (char)'r', (char)'s', (char)'.', (char)'n', (char)'i', (char)'c'}, .sizeof_stat = 8, .stat_offset = 912}, {.stat_string = {(char)'i', (char)'l', (char)'l', (char)'e', (char)'g', (char)'a', (char)'l', (char)'_', (char)'b', (char)'y', (char)'t', (char)'e', (char)'s', (char)'.', (char)'n', (char)'i', (char)'c'}, .sizeof_stat = 8, .stat_offset = 920}, {.stat_string = {(char)'m', (char)'a', (char)'c', (char)'_', (char)'l', (char)'o', (char)'c', (char)'a', (char)'l', (char)'_', (char)'f', (char)'a', (char)'u', (char)'l', (char)'t', (char)'s', (char)'.', (char)'n', (char)'i', (char)'c'}, .sizeof_stat = 8, .stat_offset = 936}, {.stat_string = {(char)'m', (char)'a', (char)'c', (char)'_', (char)'r', (char)'e', (char)'m', (char)'o', (char)'t', (char)'e', (char)'_', (char)'f', (char)'a', (char)'u', (char)'l', (char)'t', (char)'s', (char)'.', (char)'n', (char)'i', (char)'c'}, .sizeof_stat = 8, .stat_offset = 944}};
#line 133  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_ethtool.c"
static u32 ice_regs_dump_list[10U] = {557056U, 753920U, 1179648U, 1310720U, 1376256U, 1493248U, 2695168U, 50331652U, 50331656U, 50331660U};
#line 156  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_ethtool.c"
static struct ice_priv_flag ice_gstrings_priv_flags[3U] = {{.name = {(char)'l', (char)'i', (char)'n', (char)'k', (char)'-', (char)'d', (char)'o', (char)'w', (char)'n', (char)'-', (char)'o', (char)'n', (char)'-', (char)'c', (char)'l', (char)'o', (char)'s', (char)'e'}, .bitno = 7U}, {.name = {(char)'f', (char)'w', (char)'-', (char)'l', (char)'l', (char)'d', (char)'p', (char)'-', (char)'a', (char)'g', (char)'e', (char)'n', (char)'t'}, .bitno = 9U}, {.name = {(char)'l', (char)'e', (char)'g', (char)'a', (char)'c', (char)'y', (char)'-', (char)'r', (char)'x'}, .bitno = 11U}};
#line 165  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_ethtool.c"
static void ice_get_drvinfo(struct net_device *netdev, struct ethtool_drvinfo *drvinfo)
{
  #line 167 
  struct ice_netdev_priv *np = netdev_priv(netdev);
  #line 168 
  struct ice_vsi *vsi = np->vsi;
  #line 169 
  struct ice_pf *pf = vsi->back;
  #line 171 
  strlcpy((char *)(& drvinfo->driver),(char *)"ice",32UL);
  #line 172 
  strlcpy((char *)(& drvinfo->version),(char *)(& ice_drv_ver),32UL);
  #line 173 
  ;
  #line 173 
  strlcpy((char *)(& drvinfo->fw_version),ice_nvm_version_str(& pf->hw),32UL);
  #line 175 
  ;
  #line 175 
  strlcpy((char *)(& drvinfo->bus_info),pci_name(pf->pdev),32UL);
  #line 177 
  drvinfo->n_priv_flags = 3U;
  #line 178 
  return;
}

#line 180  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_ethtool.c"
static int ice_get_regs_len(struct net_device *netdev)
{
  #line 182 
  return 40;
}

#line 186  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_ethtool.c"
static void ice_get_regs(struct net_device *netdev, struct ethtool_regs *regs, void *p)
{
  #line 192 
  int i;
  #line 188 
  struct ice_netdev_priv *np = netdev_priv(netdev);
  #line 189 
  struct ice_pf *pf = (np->vsi)->back;
  #line 190 
  struct ice_hw *hw = & pf->hw;
  #line 191 
  u32 *regs_buf = (u32 *)p;
  #line 194 
  regs->version = 1U;
  #line 196 
  i = 0;
  #line 196 
  while ((unsigned int)i <= 9U) {
    #line 197 
    *(regs_buf + (unsigned long)i) = readl((void *)(hw->hw_addr + (unsigned long)ice_regs_dump_list[i]));
    #line 196 
    i ++;
  }
  #line 198 
  return;
}

#line 200  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_ethtool.c"
static u32 ice_get_msglevel(struct net_device *netdev)
{
  #line 202 
  struct ice_netdev_priv *np = netdev_priv(netdev);
  #line 203 
  struct ice_pf *pf = (np->vsi)->back;
  #line 211 
  return pf->msg_enable;
}

#line 214  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_ethtool.c"
static void ice_set_msglevel(struct net_device *netdev, u32 data)
{
  #line 216 
  struct ice_netdev_priv *np = netdev_priv(netdev);
  #line 217 
  struct ice_pf *pf = (np->vsi)->back;
  #line 225 
  pf->msg_enable = data;
  #line 226 
  return;
}

#line 229  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_ethtool.c"
static int ice_get_eeprom_len(struct net_device *netdev)
{
  #line 231 
  struct ice_netdev_priv *np = netdev_priv(netdev);
  #line 232 
  struct ice_pf *pf = (np->vsi)->back;
  #line 234 
  return (int)((unsigned int)pf->hw.nvm.sr_words * 2U);
}

#line 238  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_ethtool.c"
static int ice_get_eeprom(struct net_device *netdev, struct ethtool_eeprom *eeprom, u8 *bytes)
{
  #line 242 
  u16 first_word;
  #line 242 
  u16 last_word;
  #line 242 
  u16 nwords;
  #line 246 
  enum ice_status status;
  #line 247 
  struct device *dev;
  #line 249 
  u16 *buf;
  #line 241 
  struct ice_netdev_priv *np = netdev_priv(netdev);
  #line 243 
  struct ice_vsi *vsi = np->vsi;
  #line 244 
  struct ice_pf *pf = vsi->back;
  #line 245 
  struct ice_hw *hw = & pf->hw;
  #line 248 
  int ret = 0;
  #line 251 
  dev = & (pf->pdev)->dev;
  #line 253 
  eeprom->magic = (unsigned int)((int)hw->vendor_id | ((int)hw->device_id << 16));
  #line 255 
  first_word = (unsigned short)(eeprom->offset >> 1);
  #line 256 
  last_word = (unsigned short)(((eeprom->offset + eeprom->len) + 4294967295U) >> 1);
  #line 257 
  nwords = (unsigned short)((unsigned int)((int)last_word - (int)first_word) + 1U);
  #line 259 
  buf = (u16 *)cif_devm_kcalloc_4(dev,(unsigned long)nwords,2UL,3264U);
  #line 260 
  if (buf == (u16 *)0U) 
                        #line 261 
                        return -12;
  #line 263 
  status = ice_read_sr_buf(hw,(unsigned short)((int)first_word),& nwords,buf);
  #line 264 
  if (status != ICE_SUCCESS) {
    #line 265 
    _dev_err(dev,(char *)"ice_read_sr_buf failed, err %d aq_err %d\n",(int)status,(unsigned int)hw->adminq.sq_last_status);
    #line 267 
    eeprom->len = (unsigned int)nwords * 2U;
    #line 268 
    ret = -5;
    #line 269 
    goto out;
  }
  #line 272 
  memcpy((void *)bytes,(void *)((u8 *)buf + ((unsigned long)eeprom->offset & (unsigned long)1U)),(unsigned long)eeprom->len);
  #line 273 
  out: 
       #line 273 
  ;
  #line 274 
  devm_kfree(dev,(void *)buf);
  #line 275 
  return ret;
}

#line 284  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_ethtool.c"
static bool ice_active_vfs(struct ice_pf *pf)
{
  #line 287 
  int i;
  #line 286 
  struct ice_vf *vf = pf->vf;
  #line 289 
  i = 0;
  #line 289 
  while (pf->num_alloc_vfs > i) {
    #line 290 
    if ((int)test_bit(1L,(unsigned long *)(& vf->vf_states)) != 0) 
                                                                   #line 291 
                                                                   return (_Bool)1;
    #line 289 
    i ++;
    #line 289 
    vf ++;
  }
  #line 292 
  return (_Bool)0;
}

#line 302  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_ethtool.c"
static u64 ice_link_test(struct net_device *netdev)
{
  #line 305 
  enum ice_status status;
  #line 304 
  struct ice_netdev_priv *np = netdev_priv(netdev);
  #line 306 
  bool link_up = (_Bool)0;
  #line 308 
  netdev_info(netdev,(char *)"link test\n");
  #line 309 
  status = ice_get_link_status((np->vsi)->port_info,& link_up);
  #line 310 
  if (status != ICE_SUCCESS) {
    #line 311 
    netdev_err(netdev,(char *)"link query error, status = %d\n",(int)status);
    #line 312 
    return 1ULL;
  }
  #line 315 
  if (! link_up) 
                 #line 316 
                 return 2ULL;
  #line 318 
  return 0ULL;
}

#line 328  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_ethtool.c"
static u64 ice_eeprom_test(struct net_device *netdev)
{
  #line 330 
  struct ice_netdev_priv *np = netdev_priv(netdev);
  #line 331 
  struct ice_pf *pf = (np->vsi)->back;
  #line 333 
  netdev_info(netdev,(char *)"EEPROM test\n");
  #line 334 
  return (unsigned long long)(ice_nvm_validate_checksum(& pf->hw) != ICE_SUCCESS);
}

#line 343  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_ethtool.c"
static int ice_reg_pattern_test(struct ice_hw *hw, u32 reg, u32 mask)
{
  #line 351 
  u32 val;
  #line 351 
  u32 orig_val;
  #line 352 
  int i;
  #line 345 
  struct ice_pf *pf = (struct ice_pf *)hw->back;
  #line 346 
  struct device *dev = & (pf->pdev)->dev;
  #line 347 
  u32 patterns[4U] = {1515870810U, 2779096485U, 0U, 4294967295U};
  #line 354 
  orig_val = readl((void *)(hw->hw_addr + (unsigned long)reg));
  #line 355 
  i = 0;
  #line 355 
  while ((unsigned int)i <= 3U) {
    {
      #line 356 
      u32 pattern = patterns[i] & mask;
      #line 358 
      writel(pattern,(void *)(hw->hw_addr + (unsigned long)reg));
      #line 359 
      val = readl((void *)(hw->hw_addr + (unsigned long)reg));
      #line 360 
      if (val == pattern) 
                          #line 361 
                          goto __Cont;
      #line 362 
      _dev_err(dev,(char *)"%s: reg pattern test failed - reg 0x%08x pat 0x%08x val 0x%08x\n",(char *)"ice_reg_pattern_test",reg,pattern,val);
      #line 365 
      return 1;
    }
    #line 355 
    __Cont: 
            #line 355 
    i ++;
  }
  #line 368 
  writel(orig_val,(void *)(hw->hw_addr + (unsigned long)reg));
  #line 369 
  val = readl((void *)(hw->hw_addr + (unsigned long)reg));
  #line 370 
  if (val != orig_val) {
    #line 371 
    _dev_err(dev,(char *)"%s: reg restore test failed - reg 0x%08x orig 0x%08x val 0x%08x\n",(char *)"ice_reg_pattern_test",reg,orig_val,val);
    #line 374 
    return 1;
  }
  #line 377 
  return 0;
}

#line 387  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_ethtool.c"
static u64 ice_reg_test(struct net_device *netdev)
{
  #line 391 
  unsigned int tmp_0;
  #line 407 
  int i;
  #line 389 
  struct ice_netdev_priv *np = netdev_priv(netdev);
  #line 390 
  struct ice_hw *hw = ((np->vsi)->port_info)->hw;
  #line 391 
  if ((unsigned int)hw->func_caps.common_cap.num_msix_vectors != 0U) 
    #line 391 
    tmp_0 = (unsigned int)((int)hw->func_caps.common_cap.num_msix_vectors + -1); else 
                                                                    #line 391 
                                                                    tmp_0 = 1U;
  #line 391 
  u32 int_elements = tmp_0;
  #line 398 
  struct ice_diag_reg_test_info ice_reg_list[4U] = {{.address = 1392640U, .mask = 4095U, .elem_num = int_elements, .elem_size = 4U}, {.address = 1400832U, .mask = 4095U, .elem_num = int_elements, .elem_size = 4U}, {.address = 1392640U, .mask = 4095U, .elem_num = int_elements, .elem_size = 4U}, {.address = 1494100U, .mask = 4294901761U, .elem_num = 1U, .elem_size = 0U}};
  {
    #line 409 
    bool branch;
    #line 409 
    struct _ddebug __UNIQUE_ID_ddebug536 = {.modname = (char *)"ice", .function = (char *)"ice_reg_test", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_ethtool.c", .format = (char *)"Register test\n", .lineno = (unsigned int)409U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 409 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug536.key.dd_key_false.key,(_Bool)0);
    #line 409 
    if ((long)((long)((int)branch != 0)) != 0L) 
                                                #line 409 
                                                __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug536,netdev,(char *)"Register test\n");
  }
  #line 410 
  i = 0;
  #line 410 
  while ((unsigned int)i <= 3U) {
    {
      #line 411 
      u32 j;
      #line 413 
      j = 0U;
      #line 413 
      while (ice_reg_list[i].elem_num > j) {
        {
          #line 414 
          u32 mask = ice_reg_list[i].mask;
          #line 415 
          u32 reg = ice_reg_list[i].address + ice_reg_list[i].elem_size * j;
          #line 419 
          if (ice_reg_pattern_test(hw,reg,mask) != 0) 
                                                      #line 420 
                                                      return 1ULL;
        }
        #line 413 
        j ++;
      }
    }
    #line 410 
    i ++;
  }
  #line 424 
  return 0ULL;
}

#line 436  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_ethtool.c"
static int ice_lbtest_prepare_rings(struct ice_vsi *vsi)
{
  #line 438 
  int status;
  #line 440 
  status = ice_vsi_setup_tx_rings(vsi);
  #line 441 
  if (status != 0) 
                   #line 442 
                   goto err_setup_tx_ring;
  #line 444 
  status = ice_vsi_setup_rx_rings(vsi);
  #line 445 
  if (status != 0) 
                   #line 446 
                   goto err_setup_rx_ring;
  #line 448 
  status = ice_vsi_cfg(vsi);
  #line 449 
  if (status != 0) 
                   #line 450 
                   goto err_setup_rx_ring;
  #line 452 
  status = ice_vsi_start_rx_rings(vsi);
  #line 453 
  if (status != 0) 
                   #line 454 
                   goto err_start_rx_ring;
  #line 456 
  return status;
  #line 458 
  err_start_rx_ring: 
                     #line 458 
  ;
  #line 459 
  ice_vsi_free_rx_rings(vsi);
  #line 460 
  err_setup_rx_ring: 
                     #line 460 
  ;
  #line 461 
  ice_vsi_stop_lan_tx_rings(vsi,(enum ice_disq_rst_src)ICE_NO_RESET,(unsigned short)0);
  #line 462 
  err_setup_tx_ring: 
                     #line 462 
  ;
  #line 463 
  ice_vsi_free_tx_rings(vsi);
  #line 465 
  return status;
}

#line 475  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_ethtool.c"
static int ice_lbtest_disable_rings(struct ice_vsi *vsi)
{
  #line 477 
  int status;
  #line 479 
  status = ice_vsi_stop_lan_tx_rings(vsi,(enum ice_disq_rst_src)ICE_NO_RESET,(unsigned short)0);
  #line 480 
  if (status != 0) 
                   #line 481 
                   netdev_err(vsi->netdev,(char *)"Failed to stop Tx rings, VSI %d error %d\n",(int)vsi->vsi_num,status);
  #line 484 
  status = ice_vsi_stop_rx_rings(vsi);
  #line 485 
  if (status != 0) 
                   #line 486 
                   netdev_err(vsi->netdev,(char *)"Failed to stop Rx rings, VSI %d error %d\n",(int)vsi->vsi_num,status);
  #line 489 
  ice_vsi_free_tx_rings(vsi);
  #line 490 
  ice_vsi_free_rx_rings(vsi);
  #line 492 
  return status;
}

#line 504  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_ethtool.c"
static int ice_lbtest_create_frame(struct ice_pf *pf, u8 **ret_data, u16 size)
{
  #line 506 
  u8 *data;
  #line 508 
  if (pf == (struct ice_pf *)0) 
                                #line 509 
                                return -22;
  #line 511 
  data = (u8 *)cif_devm_kzalloc_5(& (pf->pdev)->dev,(unsigned long)size,3264U);
  #line 512 
  if (data == (u8 *)0U) 
                        #line 513 
                        return -12;
  #line 518 
  memset((void *)data,255,(unsigned long)size);
  #line 519 
  *(data + 32U) = (unsigned char)222U;
  #line 520 
  *(data + 42U) = (unsigned char)173U;
  #line 521 
  *(data + 44U) = (unsigned char)190U;
  #line 522 
  *(data + 46U) = (unsigned char)239U;
  #line 524 
  *ret_data = data;
  #line 526 
  return 0;
}

#line 536  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_ethtool.c"
static bool ice_lbtest_check_frame(u8 *frame)
{
  #line 539 
  if (((((unsigned int)*(frame + 32U) == 222U && (unsigned int)*(frame + 42U) == 173U) && (unsigned int)*(frame + 44U) == 190U) && (unsigned int)*(frame + 46U) == 239U) && (unsigned int)*(frame + 48U) == 255U) 
    #line 544 
    return (_Bool)1;
  #line 546 
  return (_Bool)0;
}

#line 557  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_ethtool.c"
static int ice_diag_send(struct ice_ring *tx_ring, u8 *data, u16 size)
{
  #line 559 
  struct ice_tx_desc *tx_desc;
  #line 560 
  struct ice_tx_buf *tx_buf;
  #line 561 
  dma_addr_t dma;
  #line 562 
  u64 td_cmd;
  #line 564 
  tx_desc = (struct ice_tx_desc *)tx_ring->desc + (unsigned long)tx_ring->next_to_use;
  #line 565 
  tx_buf = tx_ring->__anonCompField_ice_ring_196.tx_buf + (unsigned long)tx_ring->next_to_use;
  #line 567 
  dma = dma_map_single_attrs(tx_ring->dev,(void *)data,(unsigned long)size,(enum dma_data_direction)DMA_TO_DEVICE,0UL);
  #line 568 
  if (dma_mapping_error(tx_ring->dev,dma) != 0) 
                                                #line 569 
                                                return -22;
  #line 571 
  tx_desc->buf_addr = dma;
  #line 574 
  td_cmd = 3ULL;
  #line 575 
  tx_desc->cmd_type_offset_bsz = (td_cmd << 4) | ((unsigned long long)size << 34);
  #line 582 
  tx_buf->next_to_watch = tx_desc;
  #line 583 
  ldv_inline_asm();
  #line 589 
  tx_ring->next_to_use = (u16)((int)tx_ring->next_to_use + 1);
  #line 590 
  if ((int)tx_ring->next_to_use >= (int)tx_ring->count) 
                                                        #line 591 
                                                        tx_ring->next_to_use = (unsigned short)0U;
  #line 593 
  writel((unsigned int)tx_ring->next_to_use,(void *)tx_ring->tail);
  #line 596 
  usleep_range(1000UL,2000UL);
  #line 597 
  dma_unmap_single_attrs(tx_ring->dev,dma,(unsigned long)size,(enum dma_data_direction)DMA_TO_DEVICE,0UL);
  #line 599 
  return 0;
}

#line 610  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_ethtool.c"
static int ice_lbtest_receive_frames(struct ice_ring *rx_ring)
{
  #line 612 
  struct ice_rx_buf *rx_buf;
  #line 613 
  int valid_frames;
  #line 613 
  int i;
  #line 614 
  u8 *received_buf;
  #line 616 
  valid_frames = 0;
  #line 618 
  i = 0;
  #line 618 
  while ((int)rx_ring->count > i) {
    {
      #line 619 
      union ice_32b_rx_flex_desc *rx_desc;
      #line 621 
      rx_desc = (union ice_32b_rx_flex_desc *)rx_ring->desc + (unsigned long)i;
      #line 623 
      if (((int)rx_desc->wb.status_error0 & 3) == 0) 
                                                     #line 625 
                                                     goto __Cont;
      #line 627 
      rx_buf = rx_ring->__anonCompField_ice_ring_196.rx_buf + (unsigned long)i;
      #line 628 
      received_buf = (u8 *)(lowmem_page_address(rx_buf->__anonCompField_ice_rx_buf_195.__anonCompField___anonunion_1006_193.page) + (unsigned long)rx_buf->__anonCompField_ice_rx_buf_195.__anonCompField___anonunion_1006_193.page_offset);
      #line 630 
      if ((int)ice_lbtest_check_frame(received_buf) != 0) 
                                                          #line 631 
                                                          valid_frames ++;
    }
    #line 618 
    __Cont: 
            #line 618 
    i ++;
  }
  #line 634 
  return valid_frames;
}

#line 644  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_ethtool.c"
static u64 ice_loopback_test(struct net_device *netdev)
{
  #line 703 
  int __UNIQUE_ID___x537;
  #line 703 
  int tmp_6;
  #line 647 
  struct ice_vsi *test_vsi;
  #line 649 
  struct ice_ring *tx_ring;
  #line 649 
  struct ice_ring *rx_ring;
  #line 650 
  u8 broadcast[6U];
  #line 651 
  int num_frames;
  #line 651 
  int valid_frames;
  #line 653 
  struct device *dev;
  #line 654 
  u8 *tx_frame;
  #line 655 
  int i;
  #line 646 
  struct ice_netdev_priv *np = netdev_priv(netdev);
  #line 647 
  struct ice_vsi *orig_vsi = np->vsi;
  #line 648 
  struct ice_pf *pf = orig_vsi->back;
  #line 650 
  u8 ret = (unsigned char)0U;
  #line 652 
  struct list_head tmp_list = {.next = & tmp_list, .prev = & tmp_list};
  #line 657 
  dev = & (pf->pdev)->dev;
  #line 658 
  netdev_info(netdev,(char *)"loopback test\n");
  #line 660 
  test_vsi = ice_lb_vsi_setup(pf,pf->hw.port_info);
  #line 661 
  if (test_vsi == (struct ice_vsi *)0) {
    #line 662 
    netdev_err(netdev,(char *)"Failed to create a VSI for the loopback test");
    #line 663 
    return 1ULL;
  }
  #line 666 
  test_vsi->netdev = netdev;
  #line 667 
  tx_ring = *(test_vsi->tx_rings);
  #line 668 
  rx_ring = *(test_vsi->rx_rings);
  #line 670 
  if (ice_lbtest_prepare_rings(test_vsi) != 0) {
    #line 671 
    ret = (unsigned char)2U;
    #line 672 
    goto lbtest_vsi_close;
  }
  #line 675 
  if ((int)ice_alloc_rx_bufs(rx_ring,(unsigned short)((int)rx_ring->count)) != 0) {
    #line 676 
    ret = (unsigned char)3U;
    #line 677 
    goto lbtest_rings_dis;
  }
  #line 681 
  if (ice_aq_set_mac_loopback(& pf->hw,(_Bool)1,(struct ice_sq_cd *)0) != ICE_SUCCESS) {
    #line 682 
    ret = (unsigned char)4U;
    #line 683 
    goto lbtest_mac_dis;
  }
  #line 687 
  eth_broadcast_addr((u8 *)(& broadcast));
  #line 688 
  if (ice_add_mac_to_list(test_vsi,& tmp_list,(u8 *)(& broadcast)) != 0) {
    #line 689 
    ret = (unsigned char)5U;
    #line 690 
    goto lbtest_mac_dis;
  }
  #line 693 
  if (ice_add_mac(& pf->hw,& tmp_list) != ICE_SUCCESS) {
    #line 694 
    ret = (unsigned char)6U;
    #line 695 
    goto free_mac_list;
  }
  #line 698 
  if (ice_lbtest_create_frame(pf,& tx_frame,(unsigned short)64) != 0) {
    #line 699 
    ret = (unsigned char)7U;
    #line 700 
    goto remove_mac_filters;
  }
  {
    #line 703 
    __UNIQUE_ID___x537 = (int)tx_ring->count;
    #line 703 
    int __UNIQUE_ID___y538 = 32;
    #line 703 
    if (__UNIQUE_ID___x537 < __UNIQUE_ID___y538) 
                                                 #line 703 
                                                 tmp_6 = __UNIQUE_ID___x537; else 
                                                                    #line 703 
                                                                    tmp_6 = __UNIQUE_ID___y538;
    }
  #line 703 
  num_frames = tmp_6;
  #line 704 
  i = 0;
  #line 704 
  while (i < num_frames) {
    #line 705 
    if (ice_diag_send(tx_ring,tx_frame,(unsigned short)64) != 0) {
      #line 706 
      ret = (unsigned char)8U;
      #line 707 
      goto lbtest_free_frame;
    }
    #line 704 
    i ++;
  }
  #line 711 
  valid_frames = ice_lbtest_receive_frames(rx_ring);
  #line 712 
  if (valid_frames == 0) 
                         #line 713 
                         ret = (unsigned char)9U;
  else 
    #line 714 
    if (valid_frames != num_frames) 
                                    #line 715 
                                    ret = (unsigned char)10U;
  #line 717 
  lbtest_free_frame: 
                     #line 717 
  ;
  #line 718 
  devm_kfree(dev,(void *)tx_frame);
  #line 719 
  remove_mac_filters: 
                      #line 719 
  ;
  #line 720 
  if (ice_remove_mac(& pf->hw,& tmp_list) != ICE_SUCCESS) 
                                                          #line 721 
                                                          netdev_err(netdev,(char *)"Could not remove MAC filter for the test VSI");
  #line 722 
  free_mac_list: 
                 #line 722 
  ;
  #line 723 
  ice_free_fltr_list(dev,& tmp_list);
  #line 724 
  lbtest_mac_dis: 
                  #line 724 
  ;
  #line 726 
  if (ice_aq_set_mac_loopback(& pf->hw,(_Bool)0,(struct ice_sq_cd *)0) != ICE_SUCCESS) 
    #line 727 
    netdev_err(netdev,(char *)"Could not disable MAC loopback\n");
  #line 728 
  lbtest_rings_dis: 
                    #line 728 
  ;
  #line 729 
  if (ice_lbtest_disable_rings(test_vsi) != 0) 
                                               #line 730 
                                               netdev_err(netdev,(char *)"Could not disable test rings\n");
  #line 731 
  lbtest_vsi_close: 
                    #line 731 
  ;
  #line 732 
  test_vsi->netdev = (struct net_device *)0;
  #line 733 
  if (ice_vsi_release(test_vsi) != 0) 
                                      #line 734 
                                      netdev_err(netdev,(char *)"Failed to remove the test VSI");
  #line 736 
  return (unsigned long long)ret;
}

#line 746  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_ethtool.c"
static u64 ice_intr_test(struct net_device *netdev)
{
  #line 748 
  struct ice_netdev_priv *np = netdev_priv(netdev);
  #line 749 
  struct ice_pf *pf = (np->vsi)->back;
  #line 750 
  u16 swic_old = (unsigned short)pf->sw_int_count;
  #line 752 
  netdev_info(netdev,(char *)"interrupt test\n");
  #line 754 
  writel(2248146948U,(void *)(pf->hw.hw_addr + (unsigned long)((pf->oicr_idx + 360448U) * 4U)));
  #line 759 
  usleep_range(1000UL,2000UL);
  #line 760 
  return (unsigned long long)((unsigned int)swic_old == pf->sw_int_count);
}

#line 774  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_ethtool.c"
static void ice_self_test(struct net_device *netdev, struct ethtool_test *eth_test, u64 *data)
{
  #line 780 
  struct device *dev;
  #line 777 
  struct ice_netdev_priv *np = netdev_priv(netdev);
  #line 778 
  bool if_running = netif_running(netdev);
  #line 779 
  struct ice_pf *pf = (np->vsi)->back;
  #line 782 
  dev = & (pf->pdev)->dev;
  #line 784 
  if (eth_test->flags == 1U) {
    #line 785 
    netdev_info(netdev,(char *)"offline testing starting\n");
    #line 787 
    cif_set_bit_7(0L,(unsigned long *)(& pf->state));
    #line 789 
    if ((int)ice_active_vfs(pf) != 0) {
      #line 790 
      _dev_warn(dev,(char *)"Please take active VFs and Netqueues offline and restart the adapter before running NIC diagnostics\n");
      #line 792 
      *data = 1ULL;
      #line 793 
      *(data + 1U) = 1ULL;
      #line 794 
      *(data + 2U) = 1ULL;
      #line 795 
      *(data + 3U) = 1ULL;
      #line 796 
      *(data + 4U) = 1ULL;
      #line 797 
      eth_test->flags |= 2U;
      #line 798 
      cif_clear_bit_7(0L,(unsigned long *)(& pf->state));
      #line 799 
      goto skip_ol_tests;
    }
    #line 802 
    if ((int)if_running != 0) 
                              #line 804 
                              ice_stop(netdev);
    #line 806 
    *(data + 4U) = ice_link_test(netdev);
    #line 807 
    *(data + 1U) = ice_eeprom_test(netdev);
    #line 808 
    *(data + 2U) = ice_intr_test(netdev);
    #line 809 
    *(data + 3U) = ice_loopback_test(netdev);
    #line 810 
    *data = ice_reg_test(netdev);
    #line 812 
    if ((((*(data + 4U) != 0ULL || *(data + 1U) != 0ULL) || *(data + 3U) != 0ULL) || *(data + 2U) != 0ULL) || *data != 0ULL) 
      #line 817 
      eth_test->flags |= 2U;
    #line 819 
    cif_clear_bit_7(0L,(unsigned long *)(& pf->state));
    #line 821 
    if ((int)if_running != 0) {
      #line 822 
      int status = ice_open(netdev);
      #line 824 
      if (status != 0) 
                       #line 825 
                       _dev_err(dev,(char *)"Could not open device %s, err %d",(char *)(& pf->int_name),status);
    }
  }
  else {
    #line 831 
    netdev_info(netdev,(char *)"online testing starting\n");
    #line 833 
    *(data + 4U) = ice_link_test(netdev);
    #line 834 
    if (*(data + 4U) != 0ULL) 
                              #line 835 
                              eth_test->flags |= 2U;
    #line 838 
    *data = 0ULL;
    #line 839 
    *(data + 1U) = 0ULL;
    #line 840 
    *(data + 2U) = 0ULL;
    #line 841 
    *(data + 3U) = 0ULL;
  }
  #line 844 
  skip_ol_tests: 
                 #line 844 
  ;
  #line 845 
  netdev_info(netdev,(char *)"testing finished\n");
  #line 846 
  return;
}

#line 848  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_ethtool.c"
static void ice_get_strings(struct net_device *netdev, u32 stringset, u8 *data)
{
  #line 853 
  unsigned int i;
  #line 850 
  struct ice_netdev_priv *np = netdev_priv(netdev);
  #line 851 
  struct ice_vsi *vsi = np->vsi;
  #line 852 
  char *p = (char *)data;
  #line 855 
  switch (stringset) {
    #line 856 
    case (u32)1: 
                 #line 856 
    ;
    #line 857 
    i = 0U;
    #line 857 
    while (i <= 13U) {
      #line 858 
      snprintf(p,32UL,(char *)"%s",(char *)(& ice_gstrings_vsi_stats[i].stat_string));
      #line 860 
      p += 32U;
      #line 857 
      i ++;
    }
    #line 863 
    i = 0U;
    #line 863 
    while ((unsigned int)vsi->alloc_txq > i) {
      #line 864 
      snprintf(p,32UL,(char *)"tx_queue_%u_packets",i);
      #line 866 
      p += 32U;
      #line 867 
      snprintf(p,32UL,(char *)"tx_queue_%u_bytes",i);
      #line 868 
      p += 32U;
      #line 863 
      i ++;
    }
    #line 871 
    i = 0U;
    #line 871 
    while ((unsigned int)vsi->alloc_rxq > i) {
      #line 872 
      snprintf(p,32UL,(char *)"rx_queue_%u_packets",i);
      #line 874 
      p += 32U;
      #line 875 
      snprintf(p,32UL,(char *)"rx_queue_%u_bytes",i);
      #line 876 
      p += 32U;
      #line 871 
      i ++;
    }
    #line 879 
    if (vsi->type != (unsigned int)ICE_VSI_PF) 
                                               #line 880 
                                               return;
    #line 882 
    i = 0U;
    #line 882 
    while (i <= 38U) {
      #line 883 
      snprintf(p,32UL,(char *)"%s",(char *)(& ice_gstrings_pf_stats[i].stat_string));
      #line 885 
      p += 32U;
      #line 882 
      i ++;
    }
    #line 888 
    i = 0U;
    #line 888 
    while (i <= 7U) {
      #line 889 
      snprintf(p,32UL,(char *)"tx_priority_%u_xon.nic",i);
      #line 891 
      p += 32U;
      #line 892 
      snprintf(p,32UL,(char *)"tx_priority_%u_xoff.nic",i);
      #line 894 
      p += 32U;
      #line 888 
      i ++;
    }
    #line 896 
    i = 0U;
    #line 896 
    while (i <= 7U) {
      #line 897 
      snprintf(p,32UL,(char *)"rx_priority_%u_xon.nic",i);
      #line 899 
      p += 32U;
      #line 900 
      snprintf(p,32UL,(char *)"rx_priority_%u_xoff.nic",i);
      #line 902 
      p += 32U;
      #line 896 
      i ++;
    }
    #line 904 
    break;
    #line 905 
    case (u32)0: 
                 #line 905 
    ;
    #line 906 
    memcpy((void *)data,(void *)(& ice_gstrings_test),160UL);
    #line 907 
    break;
    #line 908 
    case (u32)2: 
                 #line 908 
    ;
    #line 909 
    i = 0U;
    #line 909 
    while (i <= 2U) {
      #line 910 
      snprintf(p,32UL,(char *)"%s",(char *)(& ice_gstrings_priv_flags[i].name));
      #line 912 
      p += 32U;
      #line 909 
      i ++;
    }
    #line 914 
    break;
    #line 915 
    default: 
             #line 915 
    ;
    #line 916 
    break;
  }
  #line 918 
  return;
}

#line 921  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_ethtool.c"
static int ice_set_phys_id(struct net_device *netdev, enum ethtool_phys_id_state state)
{
  #line 924 
  bool led_active;
  #line 923 
  struct ice_netdev_priv *np = netdev_priv(netdev);
  #line 926 
  switch ((unsigned int)state) {
    #line 927 
    case (unsigned int)1: 
                          #line 927 
    ;
    #line 928 
    led_active = (_Bool)1;
    #line 929 
    break;
    #line 930 
    case (unsigned int)0: 
                          #line 930 
    ;
    #line 931 
    led_active = (_Bool)0;
    #line 932 
    break;
    #line 933 
    default: 
             #line 933 
    ;
    #line 934 
    return -22;
  }
  #line 937 
  if (ice_aq_set_port_id_led((np->vsi)->port_info,
                               (_Bool)((int)((_Bool)(! ((int)led_active != 0)))),
                               (struct ice_sq_cd *)0) != ICE_SUCCESS) 
    #line 938 
    return -5;
  #line 940 
  return 0;
}

#line 948  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_ethtool.c"
static int ice_set_fec_cfg(struct net_device *netdev, enum ice_fec_mode req_fec)
{
  #line 952 
  struct ice_aqc_get_phy_caps_data *caps;
  #line 954 
  u8 sw_cfg_caps;
  #line 954 
  u8 sw_cfg_fec;
  #line 955 
  struct ice_port_info *pi;
  #line 956 
  enum ice_status status;
  #line 950 
  struct ice_netdev_priv *np = netdev_priv(netdev);
  #line 951 
  struct ice_aqc_set_phy_cfg_data config = {.phy_type_low = 0ULL, .phy_type_high = 0ULL, .caps = (unsigned char)0, .low_power_ctrl = (unsigned char)0, .eee_cap = (unsigned short)0, .eeer_value = (unsigned short)0, .link_fec_opt = (unsigned char)0, .rsvd1 = (unsigned char)0};
  #line 953 
  struct ice_vsi *vsi = np->vsi;
  #line 957 
  int err = 0;
  #line 959 
  pi = vsi->port_info;
  #line 960 
  if (pi == (struct ice_port_info *)0) 
                                       #line 961 
                                       return -95;
  #line 964 
  if (vsi->type != (unsigned int)ICE_VSI_PF) {
    #line 965 
    netdev_info(netdev,(char *)"Changing FEC parameters only supported for PF VSI\n");
    #line 966 
    return -95;
  }
  #line 970 
  caps = (struct ice_aqc_get_phy_caps_data *)kzalloc_3(560UL,3264U);
  #line 971 
  if (caps == (struct ice_aqc_get_phy_caps_data *)0) 
                                                     #line 972 
                                                     return -12;
  #line 974 
  status = ice_aq_get_phy_caps(pi,(_Bool)0,(unsigned char)4,caps,(struct ice_sq_cd *)0);
  #line 976 
  if (status != ICE_SUCCESS) {
    #line 977 
    err = -11;
    #line 978 
    goto done;
  }
  #line 982 
  ice_copy_phy_caps_to_cfg(caps,& config);
  #line 983 
  sw_cfg_caps = caps->caps;
  #line 984 
  sw_cfg_fec = caps->link_fec_options;
  #line 987 
  memset((void *)caps,0,560UL);
  #line 989 
  status = ice_aq_get_phy_caps(pi,(_Bool)0,(unsigned char)2,caps,(struct ice_sq_cd *)0);
  #line 991 
  if (status != ICE_SUCCESS) {
    #line 992 
    err = -11;
    #line 993 
    goto done;
  }
  #line 996 
  config.caps = (unsigned char)((unsigned int)config.caps | ((unsigned int)caps->caps & 128U));
  #line 997 
  config.link_fec_opt = caps->link_fec_options;
  #line 999 
  ice_cfg_phy_fec(& config,req_fec);
  #line 1002 
  if (((unsigned long)((int)config.caps ^ (int)sw_cfg_caps) & 128UL) != 0UL || (int)config.link_fec_opt != (int)sw_cfg_fec) {
    #line 1005 
    if (((unsigned long)caps->caps & 16UL) != 0UL) 
                                                   #line 1006 
                                                   config.caps = (unsigned char)((unsigned int)config.caps | 32U);
    #line 1008 
    status = ice_aq_set_phy_cfg(pi->hw,(unsigned char)((int)pi->lport),& config,(struct ice_sq_cd *)0);
    #line 1010 
    if (status != ICE_SUCCESS) 
                               #line 1011 
                               err = -11;
  }
  #line 1014 
  done: 
        #line 1014 
  ;
  #line 1015 
  kfree((void *)caps);
  #line 1016 
  return err;
}

#line 1025  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_ethtool.c"
static int ice_set_fecparam(struct net_device *netdev, struct ethtool_fecparam *fecparam)
{
  #line 1029 
  enum ice_fec_mode fec;
  #line 1027 
  struct ice_netdev_priv *np = netdev_priv(netdev);
  #line 1028 
  struct ice_vsi *vsi = np->vsi;
  #line 1031 
  switch (fecparam->fec) {
    #line 1032 
    case (__u32)2: 
                   #line 1032 
    ;
    #line 1033 
    fec = ICE_FEC_AUTO;
    #line 1034 
    break;
    #line 1035 
    case (__u32)8: 
                   #line 1035 
    ;
    #line 1036 
    fec = ICE_FEC_RS;
    #line 1037 
    break;
    #line 1038 
    case (__u32)16: 
                    #line 1038 
    ;
    #line 1039 
    fec = ICE_FEC_BASER;
    #line 1040 
    break;
    #line 1041 
    case (__u32)4: 
                   #line 1041 
    ;
    #line 1042 
    case (__u32)1: 
                   #line 1042 
    ;
    #line 1043 
    fec = ICE_FEC_NONE;
    #line 1044 
    break;
    #line 1045 
    default: 
             #line 1045 
    ;
    #line 1046 
    _dev_warn(& ((vsi->back)->pdev)->dev,(char *)"Unsupported FEC mode: %d\n",fecparam->fec);
    #line 1048 
    return -22;
  }
  #line 1051 
  return ice_set_fec_cfg(netdev,fec);
}

#line 1060  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_ethtool.c"
static int ice_get_fecparam(struct net_device *netdev, struct ethtool_fecparam *fecparam)
{
  #line 1063 
  struct ice_aqc_get_phy_caps_data *caps;
  #line 1064 
  struct ice_link_status *link_info;
  #line 1066 
  struct ice_port_info *pi;
  #line 1067 
  enum ice_status status;
  #line 1062 
  struct ice_netdev_priv *np = netdev_priv(netdev);
  #line 1065 
  struct ice_vsi *vsi = np->vsi;
  #line 1068 
  int err = 0;
  #line 1070 
  pi = vsi->port_info;
  #line 1072 
  if (pi == (struct ice_port_info *)0) 
                                       #line 1073 
                                       return -95;
  #line 1074 
  link_info = & pi->phy.link_info;
  #line 1077 
  switch ((int)link_info->fec_info) {
    #line 1078 
    case 1: 
            #line 1078 
    ;
    #line 1079 
    fecparam->active_fec = 16U;
    #line 1080 
    break;
    #line 1081 
    case 2: 
            #line 1081 
    ;
    #line 1083 
    case 4: 
            #line 1083 
    ;
    #line 1084 
    fecparam->active_fec = 8U;
    #line 1085 
    break;
    #line 1086 
    default: 
             #line 1086 
    ;
    #line 1087 
    fecparam->active_fec = 4U;
    #line 1088 
    break;
  }
  #line 1091 
  caps = (struct ice_aqc_get_phy_caps_data *)kzalloc_3(560UL,3264U);
  #line 1092 
  if (caps == (struct ice_aqc_get_phy_caps_data *)0) 
                                                     #line 1093 
                                                     return -12;
  #line 1095 
  status = ice_aq_get_phy_caps(pi,(_Bool)0,(unsigned char)2,caps,(struct ice_sq_cd *)0);
  #line 1097 
  if (status != ICE_SUCCESS) {
    #line 1098 
    err = -11;
    #line 1099 
    goto done;
  }
  #line 1103 
  if (((unsigned long)caps->caps & 128UL) != 0UL) 
                                                  #line 1104 
                                                  fecparam->fec |= 2U;
  #line 1105 
  if (((((unsigned long)caps->link_fec_options & 1UL) != 0UL || ((unsigned long)caps->link_fec_options & 2UL) != 0UL) || ((unsigned long)caps->link_fec_options & 128UL) != 0UL) || ((unsigned long)caps->link_fec_options & 8UL) != 0UL) 
    #line 1109 
    fecparam->fec |= 16U;
  #line 1110 
  if ((((unsigned long)caps->link_fec_options & 4UL) != 0UL || ((unsigned long)caps->link_fec_options & 16UL) != 0UL) || ((unsigned long)caps->link_fec_options & 64UL) != 0UL) 
    #line 1113 
    fecparam->fec |= 8U;
  #line 1114 
  if ((unsigned int)caps->link_fec_options == 0U) 
                                                  #line 1115 
                                                  fecparam->fec |= 4U;
  #line 1117 
  done: 
        #line 1117 
  ;
  #line 1118 
  kfree((void *)caps);
  #line 1119 
  return err;
}

#line 1132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_ethtool.c"
static u32 ice_get_priv_flags(struct net_device *netdev)
{
  #line 1137 
  u32 i;
  #line 1134 
  struct ice_netdev_priv *np = netdev_priv(netdev);
  #line 1135 
  struct ice_vsi *vsi = np->vsi;
  #line 1136 
  struct ice_pf *pf = vsi->back;
  #line 1137 
  u32 ret_flags = 0U;
  #line 1139 
  i = 0U;
  #line 1139 
  while (i <= 2U) {
    {
      #line 1140 
      struct ice_priv_flag *priv_flag;
      #line 1142 
      priv_flag = & ice_gstrings_priv_flags[i];
      #line 1144 
      if ((int)test_bit((long)priv_flag->bitno,(unsigned long *)(& pf->flags)) != 0) 
        #line 1145 
        ret_flags = (unsigned int)(1UL << i) | ret_flags;
    }
    #line 1139 
    i ++;
  }
  #line 1148 
  return ret_flags;
}

#line 1156  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_ethtool.c"
static int ice_set_priv_flags(struct net_device *netdev, u32 flags)
{
  #line 1159 
  unsigned long change_flags[1U];
  #line 1160 
  unsigned long orig_flags[1U];
  #line 1163 
  struct device *dev;
  #line 1165 
  u32 i;
  #line 1158 
  struct ice_netdev_priv *np = netdev_priv(netdev);
  #line 1161 
  struct ice_vsi *vsi = np->vsi;
  #line 1162 
  struct ice_pf *pf = vsi->back;
  #line 1164 
  int ret = 0;
  #line 1167 
  if (flags > 8U) 
                  #line 1168 
                  return -22;
  #line 1170 
  dev = & (pf->pdev)->dev;
  #line 1171 
  cif_set_bit_7(10L,(unsigned long *)(& pf->flags));
  #line 1173 
  bitmap_copy((unsigned long *)(& orig_flags),(unsigned long *)(& pf->flags),12U);
  #line 1174 
  i = 0U;
  #line 1174 
  while (i <= 2U) {
    {
      #line 1175 
      struct ice_priv_flag *priv_flag;
      #line 1177 
      priv_flag = & ice_gstrings_priv_flags[i];
      #line 1179 
      if ((((unsigned long)flags >> i) & 1UL) != 0UL) 
                                                      #line 1180 
                                                      cif_set_bit_7((long)priv_flag->bitno,(unsigned long *)(& pf->flags)); else 
                                                                    #line 1182 
                                                                    cif_clear_bit_7((long)priv_flag->bitno,(unsigned long *)(& pf->flags));
    }
    #line 1174 
    i ++;
  }
  #line 1185 
  bitmap_xor((unsigned long *)(& change_flags),(unsigned long *)(& pf->flags),(unsigned long *)(& orig_flags),12U);
  #line 1187 
  if ((int)test_bit(9L,(unsigned long *)(& change_flags)) != 0) {
    #line 1188 
    if (test_bit(9L,(unsigned long *)(& pf->flags))) {
      #line 1216 
      enum ice_status status_0;
      #line 1217 
      bool dcbx_agent_status;
      #line 1235 
      char *tmp_2;
      #line 1222 
      status_0 = ice_aq_start_lldp(& pf->hw,(_Bool)1,(struct ice_sq_cd *)0);
      #line 1223 
      if (status_0 != ICE_SUCCESS) 
                                   #line 1224 
                                   _dev_warn(dev,(char *)"Fail to start LLDP Agent\n");
      #line 1229 
      status_0 = ice_aq_start_stop_dcbx(& pf->hw,(_Bool)1,& dcbx_agent_status,(struct ice_sq_cd *)0);
      #line 1232 
      if (status_0 != ICE_SUCCESS) {
        #line 1233 
        bool branch;
        #line 1233 
        struct _ddebug __UNIQUE_ID_ddebug539 = {.modname = (char *)"ice", .function = (char *)"ice_set_priv_flags", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_ethtool.c", .format = (char *)"Failed to start FW DCBX\n", .lineno = (unsigned int)1233U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
        #line 1233 
        branch = arch_static_branch(& __UNIQUE_ID_ddebug539.key.dd_key_false.key,(_Bool)0);
        #line 1233 
        if ((long)((long)((int)branch != 0)) != 0L) 
                                                    #line 1233 
                                                    __dynamic_dev_dbg(& __UNIQUE_ID_ddebug539,dev,(char *)"Failed to start FW DCBX\n");
      }
      #line 1235 
      if ((int)dcbx_agent_status != 0) 
                                       #line 1235 
                                       tmp_2 = (char *)"ACTIVE"; else 
                                                                   #line 1235 
                                                                   tmp_2 = (char *)"DISABLED";
      #line 1235 
      ;
      #line 1235 
      _dev_info(dev,(char *)"FW DCBX agent is %s\n",tmp_2);
      #line 1243 
      status_0 = (enum ice_status)ice_init_pf_dcb(pf,(_Bool)1);
      #line 1244 
      if (status_0 != ICE_SUCCESS) {
        #line 1245 
        bool branch_0;
        #line 1245 
        struct _ddebug __UNIQUE_ID_ddebug540 = {.modname = (char *)"ice", .function = (char *)"ice_set_priv_flags", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_ethtool.c", .format = (char *)"Fail to init DCB\n", .lineno = (unsigned int)1245U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
        #line 1245 
        branch_0 = arch_static_branch(& __UNIQUE_ID_ddebug540.key.dd_key_false.key,(_Bool)0);
        #line 1245 
        if ((long)((long)((int)branch_0 != 0)) != 0L) 
                                                      #line 1245 
                                                      __dynamic_dev_dbg(& __UNIQUE_ID_ddebug540,dev,(char *)"Fail to init DCB\n");
      }
      #line 1250 
      ice_cfg_sw_lldp(vsi,(_Bool)0,(_Bool)0);
      #line 1253 
      status_0 = ice_cfg_lldp_mib_change(& pf->hw,(_Bool)1);
      #line 1254 
      if (status_0 != ICE_SUCCESS) {
        #line 1255 
        bool branch_1;
        #line 1255 
        struct _ddebug __UNIQUE_ID_ddebug541 = {.modname = (char *)"ice", .function = (char *)"ice_set_priv_flags", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_ethtool.c", .format = (char *)"Fail to enable MIB change events\n", .lineno = (unsigned int)1255U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
        #line 1255 
        branch_1 = arch_static_branch(& __UNIQUE_ID_ddebug541.key.dd_key_false.key,(_Bool)0);
        #line 1255 
        if ((long)((long)((int)branch_1 != 0)) != 0L) 
                                                      #line 1255 
                                                      __dynamic_dev_dbg(& __UNIQUE_ID_ddebug541,dev,(char *)"Fail to enable MIB change events\n");
      }
    }
    else {
      #line 1189 
      enum ice_status status;
      #line 1192 
      status = ice_cfg_lldp_mib_change(& pf->hw,(_Bool)0);
      #line 1198 
      if (status != ICE_SUCCESS) 
                                 #line 1199 
                                 _dev_info(dev,(char *)"Failed to unreg for LLDP events\n");
      #line 1205 
      status = ice_aq_stop_lldp(& pf->hw,(_Bool)1,(_Bool)1,(struct ice_sq_cd *)0);
      #line 1206 
      if (status != ICE_SUCCESS) 
                                 #line 1207 
                                 _dev_warn(dev,(char *)"Fail to stop LLDP agent\n");
      #line 1212 
      status = (enum ice_status)ice_init_pf_dcb(pf,(_Bool)1);
      #line 1213 
      if (status != ICE_SUCCESS) 
                                 #line 1214 
                                 _dev_warn(dev,(char *)"Fail to init DCB\n");
    }
  }
  #line 1259 
  if ((int)test_bit(11L,(unsigned long *)(& change_flags)) != 0) {
    #line 1261 
    ice_down(vsi);
    #line 1262 
    ice_up(vsi);
  }
  #line 1264 
  cif_clear_bit_7(10L,(unsigned long *)(& pf->flags));
  #line 1265 
  return ret;
}

#line 1268  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_ethtool.c"
static int ice_get_sset_count(struct net_device *netdev, int sset)
{
  #line 1270 
  switch (sset) {
    #line 1271 
    case 1: 
            #line 1271 
    ;
    #line 1290 
    return (int)((unsigned int)ice_q_stats_len(netdev) + 85U);
    #line 1291 
    case 0: 
            #line 1291 
    ;
    #line 1292 
    return 5;
    #line 1293 
    case 2: 
            #line 1293 
    ;
    #line 1294 
    return 3;
    #line 1295 
    default: 
             #line 1295 
    ;
    #line 1296 
    return -95;
  }
}

#line 1301  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_ethtool.c"
static void ice_get_ethtool_stats(struct net_device *netdev, struct ethtool_stats *stats, u64 *data)
{
  #line 1307 
  struct ice_ring *ring;
  #line 1308 
  unsigned int j;
  #line 1310 
  char *p;
  #line 1304 
  struct ice_netdev_priv *np = netdev_priv(netdev);
  #line 1305 
  struct ice_vsi *vsi = np->vsi;
  #line 1306 
  struct ice_pf *pf = vsi->back;
  #line 1309 
  int i = 0;
  #line 1312 
  ice_update_pf_stats(pf);
  #line 1313 
  ice_update_vsi_stats(vsi);
  #line 1315 
  j = 0U;
  #line 1315 
  while (j <= 13U) {
    {
      #line 1317 
      int tmp_0;
      #line 1316 
      p = (char *)vsi + (unsigned long)ice_gstrings_vsi_stats[j].stat_offset;
      #line 1317 
      tmp_0 = i;
      #line 1317 
      i ++;
      #line 1317 
      if (ice_gstrings_vsi_stats[j].sizeof_stat == 8) 
                                                      #line 1317 
                                                      *(data + (unsigned long)tmp_0) = *((u64 *)p); else 
                                                                    #line 1317 
                                                                    *(data + (unsigned long)tmp_0) = (unsigned long long)*((u32 *)p);
    }
    #line 1315 
    j ++;
  }
  #line 1322 
  rcu_read_lock();
  #line 1324 
  j = 0U;
  #line 1324 
  while ((unsigned int)vsi->alloc_txq > j) {
    {
      #line 1326 
      union __anonunion___u_14359 __u;
      #line 1325 
      __read_once_size((void *)(vsi->tx_rings + (unsigned long)j),(void *)(& __u.__c),8);
      #line 1325 
      ring = (__u.__val);
      #line 1326 
      if (ring != (struct ice_ring *)0) {
        #line 1327 
        int tmp_2;
        #line 1328 
        int tmp_3;
        #line 1327 
        tmp_2 = i;
        #line 1327 
        i ++;
        #line 1327 
        *(data + (unsigned long)tmp_2) = ring->stats.pkts;
        #line 1328 
        tmp_3 = i;
        #line 1328 
        i ++;
        #line 1328 
        *(data + (unsigned long)tmp_3) = ring->stats.bytes;
      }
      else {
        #line 1330 
        int tmp_4;
        #line 1331 
        int tmp_5;
        #line 1330 
        tmp_4 = i;
        #line 1330 
        i ++;
        #line 1330 
        *(data + (unsigned long)tmp_4) = 0ULL;
        #line 1331 
        tmp_5 = i;
        #line 1331 
        i ++;
        #line 1331 
        *(data + (unsigned long)tmp_5) = 0ULL;
      }
    }
    #line 1324 
    j ++;
  }
  #line 1335 
  j = 0U;
  #line 1335 
  while ((unsigned int)vsi->alloc_rxq > j) {
    {
      #line 1337 
      union __anonunion___u_14361 __u_0;
      #line 1336 
      __read_once_size((void *)(vsi->rx_rings + (unsigned long)j),(void *)(& __u_0.__c),8);
      #line 1336 
      ring = (__u_0.__val);
      #line 1337 
      if (ring != (struct ice_ring *)0) {
        #line 1338 
        int tmp_7;
        #line 1339 
        int tmp_8;
        #line 1338 
        tmp_7 = i;
        #line 1338 
        i ++;
        #line 1338 
        *(data + (unsigned long)tmp_7) = ring->stats.pkts;
        #line 1339 
        tmp_8 = i;
        #line 1339 
        i ++;
        #line 1339 
        *(data + (unsigned long)tmp_8) = ring->stats.bytes;
      }
      else {
        #line 1341 
        int tmp_9;
        #line 1342 
        int tmp_10;
        #line 1341 
        tmp_9 = i;
        #line 1341 
        i ++;
        #line 1341 
        *(data + (unsigned long)tmp_9) = 0ULL;
        #line 1342 
        tmp_10 = i;
        #line 1342 
        i ++;
        #line 1342 
        *(data + (unsigned long)tmp_10) = 0ULL;
      }
    }
    #line 1335 
    j ++;
  }
  #line 1346 
  rcu_read_unlock();
  #line 1348 
  if (vsi->type != (unsigned int)ICE_VSI_PF) 
                                             #line 1349 
                                             return;
  #line 1351 
  j = 0U;
  #line 1351 
  while (j <= 38U) {
    {
      #line 1353 
      int tmp_11;
      #line 1352 
      p = (char *)pf + (unsigned long)ice_gstrings_pf_stats[j].stat_offset;
      #line 1353 
      tmp_11 = i;
      #line 1353 
      i ++;
      #line 1353 
      if (ice_gstrings_pf_stats[j].sizeof_stat == 8) 
                                                     #line 1353 
                                                     *(data + (unsigned long)tmp_11) = *((u64 *)p); else 
                                                                    #line 1353 
                                                                    *(data + (unsigned long)tmp_11) = (unsigned long long)*((u32 *)p);
    }
    #line 1351 
    j ++;
  }
  #line 1357 
  j = 0U;
  #line 1357 
  while (j <= 7U) {
    {
      #line 1358 
      int tmp_12;
      #line 1359 
      int tmp_13;
      #line 1358 
      tmp_12 = i;
      #line 1358 
      i ++;
      #line 1358 
      *(data + (unsigned long)tmp_12) = pf->stats.priority_xon_tx[j];
      #line 1359 
      tmp_13 = i;
      #line 1359 
      i ++;
      #line 1359 
      *(data + (unsigned long)tmp_13) = pf->stats.priority_xoff_tx[j];
    }
    #line 1357 
    j ++;
  }
  #line 1362 
  j = 0U;
  #line 1362 
  while (j <= 7U) {
    {
      #line 1363 
      int tmp_14;
      #line 1364 
      int tmp_15;
      #line 1363 
      tmp_14 = i;
      #line 1363 
      i ++;
      #line 1363 
      *(data + (unsigned long)tmp_14) = pf->stats.priority_xon_rx[j];
      #line 1364 
      tmp_15 = i;
      #line 1364 
      i ++;
      #line 1364 
      *(data + (unsigned long)tmp_15) = pf->stats.priority_xoff_rx[j];
    }
    #line 1362 
    j ++;
  }
  #line 1366 
  return;
}

#line 1374  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_ethtool.c"
static void ice_phy_type_to_ethtool(struct net_device *netdev, struct ethtool_link_ksettings *ks)
{
  #line 1378 
  struct ice_link_status *hw_link_info;
  #line 1381 
  u64 phy_types_high;
  #line 1382 
  u64 phy_types_low;
  #line 1377 
  struct ice_netdev_priv *np = netdev_priv(netdev);
  #line 1379 
  bool need_add_adv_mode = (_Bool)0;
  #line 1380 
  struct ice_vsi *vsi = np->vsi;
  #line 1384 
  hw_link_info = & (vsi->port_info)->phy.link_info;
  #line 1385 
  phy_types_low = (vsi->port_info)->phy.phy_type_low;
  #line 1386 
  phy_types_high = (vsi->port_info)->phy.phy_type_high;
  #line 1388 
  cif_bitmap_zero((unsigned long *)(& ks->link_modes.supported),74U);
  #line 1389 
  cif_bitmap_zero((unsigned long *)(& ks->link_modes.advertising),74U);
  #line 1391 
  if ((phy_types_low & 1ULL) != 0ULL || (phy_types_low & 2ULL) != 0ULL) {
    #line 1393 
    __set_bit(3L,(unsigned long *)(& ks->link_modes.supported));
    #line 1395 
    if ((unsigned int)hw_link_info->req_speeds == 0U || ((unsigned long)hw_link_info->req_speeds & 2UL) != 0UL) 
      #line 1397 
      __set_bit(3L,(unsigned long *)(& ks->link_modes.advertising));
  }
  #line 1400 
  if ((phy_types_low & 4ULL) != 0ULL || (phy_types_low & 64ULL) != 0ULL) {
    #line 1402 
    __set_bit(5L,(unsigned long *)(& ks->link_modes.supported));
    #line 1404 
    if ((unsigned int)hw_link_info->req_speeds == 0U || ((unsigned long)hw_link_info->req_speeds & 4UL) != 0UL) 
      #line 1406 
      __set_bit(5L,(unsigned long *)(& ks->link_modes.advertising));
  }
  #line 1409 
  if ((phy_types_low & 32ULL) != 0ULL) {
    #line 1410 
    __set_bit(17L,(unsigned long *)(& ks->link_modes.supported));
    #line 1412 
    if ((unsigned int)hw_link_info->req_speeds == 0U || ((unsigned long)hw_link_info->req_speeds & 4UL) != 0UL) 
      #line 1414 
      __set_bit(17L,(unsigned long *)(& ks->link_modes.advertising));
  }
  #line 1417 
  if ((phy_types_low & 8ULL) != 0ULL || (phy_types_low & 16ULL) != 0ULL) {
    #line 1419 
    __set_bit(41L,(unsigned long *)(& ks->link_modes.supported));
    #line 1421 
    if ((unsigned int)hw_link_info->req_speeds == 0U || ((unsigned long)hw_link_info->req_speeds & 4UL) != 0UL) 
      #line 1423 
      __set_bit(41L,(unsigned long *)(& ks->link_modes.advertising));
  }
  #line 1426 
  if ((phy_types_low & 128ULL) != 0ULL) {
    #line 1427 
    __set_bit(47L,(unsigned long *)(& ks->link_modes.supported));
    #line 1429 
    if ((unsigned int)hw_link_info->req_speeds == 0U || ((unsigned long)hw_link_info->req_speeds & 8UL) != 0UL) 
      #line 1431 
      __set_bit(47L,(unsigned long *)(& ks->link_modes.advertising));
  }
  #line 1434 
  if ((phy_types_low & 256ULL) != 0ULL || (phy_types_low & 512ULL) != 0ULL) {
    #line 1436 
    __set_bit(15L,(unsigned long *)(& ks->link_modes.supported));
    #line 1438 
    if ((unsigned int)hw_link_info->req_speeds == 0U || ((unsigned long)hw_link_info->req_speeds & 8UL) != 0UL) 
      #line 1440 
      __set_bit(15L,(unsigned long *)(& ks->link_modes.advertising));
  }
  #line 1443 
  if ((phy_types_low & 1024ULL) != 0ULL || (phy_types_low & 2048ULL) != 0ULL) {
    #line 1445 
    __set_bit(48L,(unsigned long *)(& ks->link_modes.supported));
    #line 1447 
    if ((unsigned int)hw_link_info->req_speeds == 0U || ((unsigned long)hw_link_info->req_speeds & 16UL) != 0UL) 
      #line 1449 
      __set_bit(48L,(unsigned long *)(& ks->link_modes.advertising));
  }
  #line 1452 
  if ((((phy_types_low & 4096ULL) != 0ULL || (phy_types_low & 8192ULL) != 0ULL) || (phy_types_low & 131072ULL) != 0ULL) || (phy_types_low & 262144ULL) != 0ULL) {
    #line 1456 
    __set_bit(12L,(unsigned long *)(& ks->link_modes.supported));
    #line 1458 
    if ((unsigned int)hw_link_info->req_speeds == 0U || ((unsigned long)hw_link_info->req_speeds & 32UL) != 0UL) 
      #line 1460 
      __set_bit(12L,(unsigned long *)(& ks->link_modes.advertising));
  }
  #line 1463 
  if ((phy_types_low & 65536ULL) != 0ULL) {
    #line 1464 
    __set_bit(19L,(unsigned long *)(& ks->link_modes.supported));
    #line 1466 
    if ((unsigned int)hw_link_info->req_speeds == 0U || ((unsigned long)hw_link_info->req_speeds & 32UL) != 0UL) 
      #line 1468 
      __set_bit(19L,(unsigned long *)(& ks->link_modes.advertising));
  }
  #line 1471 
  if ((phy_types_low & 16384ULL) != 0ULL) {
    #line 1472 
    __set_bit(43L,(unsigned long *)(& ks->link_modes.supported));
    #line 1474 
    if ((unsigned int)hw_link_info->req_speeds == 0U || ((unsigned long)hw_link_info->req_speeds & 32UL) != 0UL) 
      #line 1476 
      __set_bit(43L,(unsigned long *)(& ks->link_modes.advertising));
  }
  #line 1479 
  if ((phy_types_low & 32768ULL) != 0ULL) {
    #line 1480 
    __set_bit(44L,(unsigned long *)(& ks->link_modes.supported));
    #line 1482 
    if ((unsigned int)hw_link_info->req_speeds == 0U || ((unsigned long)hw_link_info->req_speeds & 32UL) != 0UL) 
      #line 1484 
      __set_bit(44L,(unsigned long *)(& ks->link_modes.advertising));
  }
  #line 1487 
  if ((((((phy_types_low & 524288ULL) != 0ULL || (phy_types_low & 1048576ULL) != 0ULL) || (phy_types_low & 2097152ULL) != 0ULL) || (phy_types_low & 4194304ULL) != 0ULL) || (phy_types_low & 268435456ULL) != 0ULL) || (phy_types_low & 536870912ULL) != 0ULL) {
    #line 1493 
    __set_bit(31L,(unsigned long *)(& ks->link_modes.supported));
    #line 1495 
    if ((unsigned int)hw_link_info->req_speeds == 0U || ((unsigned long)hw_link_info->req_speeds & 128UL) != 0UL) 
      #line 1497 
      __set_bit(31L,(unsigned long *)(& ks->link_modes.advertising));
  }
  #line 1500 
  if ((phy_types_low & 8388608ULL) != 0ULL || (phy_types_low & 16777216ULL) != 0ULL) {
    #line 1502 
    __set_bit(33L,(unsigned long *)(& ks->link_modes.supported));
    #line 1504 
    if ((unsigned int)hw_link_info->req_speeds == 0U || ((unsigned long)hw_link_info->req_speeds & 128UL) != 0UL) 
      #line 1506 
      __set_bit(33L,(unsigned long *)(& ks->link_modes.advertising));
  }
  #line 1509 
  if (((phy_types_low & 33554432ULL) != 0ULL || (phy_types_low & 67108864ULL) != 0ULL) || (phy_types_low & 134217728ULL) != 0ULL) {
    #line 1512 
    __set_bit(32L,(unsigned long *)(& ks->link_modes.supported));
    #line 1514 
    if ((unsigned int)hw_link_info->req_speeds == 0U || ((unsigned long)hw_link_info->req_speeds & 128UL) != 0UL) 
      #line 1516 
      __set_bit(32L,(unsigned long *)(& ks->link_modes.advertising));
  }
  #line 1519 
  if ((phy_types_low & 8589934592ULL) != 0ULL) {
    #line 1520 
    __set_bit(23L,(unsigned long *)(& ks->link_modes.supported));
    #line 1522 
    if ((unsigned int)hw_link_info->req_speeds == 0U || ((unsigned long)hw_link_info->req_speeds & 256UL) != 0UL) 
      #line 1524 
      __set_bit(23L,(unsigned long *)(& ks->link_modes.advertising));
  }
  #line 1527 
  if (((phy_types_low & 1073741824ULL) != 0ULL || (phy_types_low & 17179869184ULL) != 0ULL) || (phy_types_low & 34359738368ULL) != 0ULL) {
    #line 1530 
    __set_bit(24L,(unsigned long *)(& ks->link_modes.supported));
    #line 1532 
    if ((unsigned int)hw_link_info->req_speeds == 0U || ((unsigned long)hw_link_info->req_speeds & 256UL) != 0UL) 
      #line 1534 
      __set_bit(24L,(unsigned long *)(& ks->link_modes.advertising));
  }
  #line 1537 
  if ((phy_types_low & 2147483648ULL) != 0ULL) {
    #line 1538 
    __set_bit(25L,(unsigned long *)(& ks->link_modes.supported));
    #line 1540 
    if ((unsigned int)hw_link_info->req_speeds == 0U || ((unsigned long)hw_link_info->req_speeds & 256UL) != 0UL) 
      #line 1542 
      __set_bit(25L,(unsigned long *)(& ks->link_modes.advertising));
  }
  #line 1545 
  if ((phy_types_low & 4294967296ULL) != 0ULL) {
    #line 1546 
    __set_bit(26L,(unsigned long *)(& ks->link_modes.supported));
    #line 1548 
    if ((unsigned int)hw_link_info->req_speeds == 0U || ((unsigned long)hw_link_info->req_speeds & 256UL) != 0UL) 
      #line 1550 
      __set_bit(26L,(unsigned long *)(& ks->link_modes.advertising));
  }
  #line 1553 
  if (((((((((phy_types_low & 68719476736ULL) != 0ULL || (phy_types_low & 1099511627776ULL) != 0ULL) || (phy_types_low & 2199023255552ULL) != 0ULL) || (phy_types_low & 4398046511104ULL) != 0ULL) || (phy_types_low & 8796093022208ULL) != 0ULL) || (phy_types_low & 17592186044416ULL) != 0ULL) || (phy_types_low & 35184372088832ULL) != 0ULL) || (phy_types_low & 562949953421312ULL) != 0ULL) || (phy_types_low & 1125899906842624ULL) != 0ULL) {
    #line 1562 
    __set_bit(34L,(unsigned long *)(& ks->link_modes.supported));
    #line 1564 
    if ((unsigned int)hw_link_info->req_speeds == 0U || ((unsigned long)hw_link_info->req_speeds & 512UL) != 0UL) 
      #line 1566 
      __set_bit(34L,(unsigned long *)(& ks->link_modes.advertising));
  }
  #line 1569 
  if ((phy_types_low & 549755813888ULL) != 0ULL || (phy_types_low & 281474976710656ULL) != 0ULL) {
    #line 1571 
    __set_bit(35L,(unsigned long *)(& ks->link_modes.supported));
    #line 1573 
    if ((unsigned int)hw_link_info->req_speeds == 0U || ((unsigned long)hw_link_info->req_speeds & 512UL) != 0UL) 
      #line 1575 
      __set_bit(35L,(unsigned long *)(& ks->link_modes.advertising));
  }
  #line 1578 
  if ((((phy_types_low & 137438953472ULL) != 0ULL || (phy_types_low & 274877906944ULL) != 0ULL) || (phy_types_low & 70368744177664ULL) != 0ULL) || (phy_types_low & 140737488355328ULL) != 0ULL) {
    #line 1582 
    __set_bit(40L,(unsigned long *)(& ks->link_modes.supported));
    #line 1584 
    if ((unsigned int)hw_link_info->req_speeds == 0U || ((unsigned long)hw_link_info->req_speeds & 512UL) != 0UL) 
      #line 1586 
      __set_bit(40L,(unsigned long *)(& ks->link_modes.advertising));
  }
  #line 1589 
  if (((((((((((phy_types_low & 2251799813685248ULL) != 0ULL || (phy_types_low & 36028797018963968ULL) != 0ULL) || (phy_types_low & 72057594037927936ULL) != 0ULL) || (phy_types_low & 144115188075855872ULL) != 0ULL) || (phy_types_low & 288230376151711744ULL) != 0ULL) || (phy_types_low & 576460752303423488ULL) != 0ULL) || (phy_types_low & 2305843009213693952ULL) != 0ULL) || (phy_types_high & 2ULL) != 0ULL) || (phy_types_high & 4ULL) != 0ULL) || (phy_types_high & 8ULL) != 0ULL) || (phy_types_high & 16ULL) != 0ULL) {
    #line 1600 
    __set_bit(38L,(unsigned long *)(& ks->link_modes.supported));
    #line 1602 
    if ((unsigned int)hw_link_info->req_speeds == 0U || ((unsigned long)hw_link_info->req_speeds & 1024UL) != 0UL) 
      #line 1604 
      need_add_adv_mode = (_Bool)1;
  }
  #line 1606 
  if ((int)need_add_adv_mode != 0) {
    #line 1607 
    need_add_adv_mode = (_Bool)0;
    #line 1608 
    __set_bit(38L,(unsigned long *)(& ks->link_modes.advertising));
  }
  #line 1611 
  if ((phy_types_low & 4503599627370496ULL) != 0ULL || (phy_types_low & 4611686018427387904ULL) != 0ULL) {
    #line 1613 
    __set_bit(37L,(unsigned long *)(& ks->link_modes.supported));
    #line 1615 
    if ((unsigned int)hw_link_info->req_speeds == 0U || ((unsigned long)hw_link_info->req_speeds & 1024UL) != 0UL) 
      #line 1617 
      need_add_adv_mode = (_Bool)1;
  }
  #line 1619 
  if ((int)need_add_adv_mode != 0) {
    #line 1620 
    need_add_adv_mode = (_Bool)0;
    #line 1621 
    __set_bit(37L,(unsigned long *)(& ks->link_modes.advertising));
  }
  #line 1624 
  if ((phy_types_low & 9007199254740992ULL) != 0ULL || (phy_types_low & 9223372036854775808ULL) != 0ULL) {
    #line 1626 
    __set_bit(39L,(unsigned long *)(& ks->link_modes.supported));
    #line 1628 
    if ((unsigned int)hw_link_info->req_speeds == 0U || ((unsigned long)hw_link_info->req_speeds & 1024UL) != 0UL) 
      #line 1630 
      need_add_adv_mode = (_Bool)1;
  }
  #line 1632 
  if ((int)need_add_adv_mode != 0) {
    #line 1633 
    need_add_adv_mode = (_Bool)0;
    #line 1634 
    __set_bit(39L,(unsigned long *)(& ks->link_modes.advertising));
  }
  #line 1637 
  if (((phy_types_low & 18014398509481984ULL) != 0ULL || (phy_types_low & 1152921504606846976ULL) != 0ULL) || (phy_types_high & 1ULL) != 0ULL) {
    #line 1640 
    __set_bit(36L,(unsigned long *)(& ks->link_modes.supported));
    #line 1642 
    if ((unsigned int)hw_link_info->req_speeds == 0U || ((unsigned long)hw_link_info->req_speeds & 1024UL) != 0UL) 
      #line 1644 
      need_add_adv_mode = (_Bool)1;
  }
  #line 1646 
  if ((int)need_add_adv_mode != 0) 
                                   #line 1647 
                                   __set_bit(36L,(unsigned long *)(& ks->link_modes.advertising));
  #line 1651 
  if ((((((((((((((((((phy_types_low & 1ULL) != 0ULL || (phy_types_low & 4ULL) != 0ULL) || (phy_types_low & 32ULL) != 0ULL) || (phy_types_low & 128ULL) != 0ULL) || (phy_types_low & 512ULL) != 0ULL) || (phy_types_low & 1024ULL) != 0ULL) || (phy_types_low & 2048ULL) != 0ULL) || (phy_types_low & 4096ULL) != 0ULL) || (phy_types_low & 65536ULL) != 0ULL) || (phy_types_low & 524288ULL) != 0ULL) || (phy_types_low & 1048576ULL) != 0ULL) || (phy_types_low & 2097152ULL) != 0ULL) || (phy_types_low & 4194304ULL) != 0ULL) || (phy_types_low & 33554432ULL) != 0ULL) || (phy_types_low & 67108864ULL) != 0ULL) || (phy_types_low & 134217728ULL) != 0ULL) || (phy_types_low & 1073741824ULL) != 0ULL) || (phy_types_low & 8589934592ULL) != 0ULL) {
    #line 1669 
    __set_bit(6L,(unsigned long *)(& ks->link_modes.supported));
    #line 1671 
    __set_bit(6L,(unsigned long *)(& ks->link_modes.advertising));
  }
  #line 1674 
  if ((((phy_types_low & 68719476736ULL) != 0ULL || (phy_types_low & 549755813888ULL) != 0ULL) || (phy_types_low & 17592186044416ULL) != 0ULL) || (phy_types_low & 281474976710656ULL) != 0ULL) {
    #line 1678 
    __set_bit(6L,(unsigned long *)(& ks->link_modes.supported));
    #line 1680 
    __set_bit(6L,(unsigned long *)(& ks->link_modes.advertising));
  }
  #line 1683 
  if ((((phy_types_low & 2251799813685248ULL) != 0ULL || (phy_types_low & 18014398509481984ULL) != 0ULL) || (phy_types_low & 1152921504606846976ULL) != 0ULL) || (phy_types_low & 2305843009213693952ULL) != 0ULL) {
    #line 1687 
    __set_bit(6L,(unsigned long *)(& ks->link_modes.supported));
    #line 1689 
    __set_bit(6L,(unsigned long *)(& ks->link_modes.advertising));
  }
  #line 1691 
  return;
}

#line 1704  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_ethtool.c"
static void ice_get_settings_link_up(struct ethtool_link_ksettings *ks, struct net_device *netdev)
{
  #line 1709 
  struct ethtool_link_ksettings cap_ksettings;
  #line 1710 
  struct ice_link_status *link_info;
  #line 1707 
  struct ice_netdev_priv *np = netdev_priv(netdev);
  #line 1708 
  struct ice_port_info *pi = (np->vsi)->port_info;
  #line 1711 
  struct ice_vsi *vsi = np->vsi;
  #line 1712 
  bool unrecog_phy_high = (_Bool)0;
  #line 1713 
  bool unrecog_phy_low = (_Bool)0;
  #line 1715 
  link_info = & (vsi->port_info)->phy.link_info;
  #line 1718 
  switch (link_info->phy_type_low) {
    #line 1719 
    case (u64)1: 
                 #line 1719 
    ;
    #line 1720 
    __set_bit(6L,(unsigned long *)(& ks->link_modes.supported));
    #line 1721 
    __set_bit(3L,(unsigned long *)(& ks->link_modes.supported));
    #line 1723 
    __set_bit(6L,(unsigned long *)(& ks->link_modes.advertising));
    #line 1724 
    __set_bit(3L,(unsigned long *)(& ks->link_modes.advertising));
    #line 1726 
    break;
    #line 1727 
    case (u64)2: 
                 #line 1727 
    ;
    #line 1728 
    __set_bit(3L,(unsigned long *)(& ks->link_modes.supported));
    #line 1730 
    break;
    #line 1731 
    case (u64)4: 
                 #line 1731 
    ;
    #line 1732 
    __set_bit(6L,(unsigned long *)(& ks->link_modes.supported));
    #line 1733 
    __set_bit(5L,(unsigned long *)(& ks->link_modes.supported));
    #line 1735 
    __set_bit(6L,(unsigned long *)(& ks->link_modes.advertising));
    #line 1736 
    __set_bit(5L,(unsigned long *)(& ks->link_modes.advertising));
    #line 1738 
    break;
    #line 1739 
    case (u64)64: 
                  #line 1739 
    ;
    #line 1740 
    __set_bit(5L,(unsigned long *)(& ks->link_modes.supported));
    #line 1742 
    break;
    #line 1743 
    case (u64)8: 
                 #line 1743 
    ;
    #line 1744 
    case (u64)16: 
                  #line 1744 
    ;
    #line 1745 
    __set_bit(41L,(unsigned long *)(& ks->link_modes.supported));
    #line 1747 
    break;
    #line 1748 
    case (u64)32: 
                  #line 1748 
    ;
    #line 1749 
    __set_bit(6L,(unsigned long *)(& ks->link_modes.supported));
    #line 1750 
    __set_bit(17L,(unsigned long *)(& ks->link_modes.supported));
    #line 1752 
    __set_bit(6L,(unsigned long *)(& ks->link_modes.advertising));
    #line 1753 
    __set_bit(17L,(unsigned long *)(& ks->link_modes.advertising));
    #line 1755 
    break;
    #line 1756 
    case (u64)128: 
                   #line 1756 
    ;
    #line 1757 
    __set_bit(6L,(unsigned long *)(& ks->link_modes.supported));
    #line 1758 
    __set_bit(6L,(unsigned long *)(& ks->link_modes.advertising));
    #line 1759 
    __set_bit(47L,(unsigned long *)(& ks->link_modes.supported));
    #line 1761 
    __set_bit(47L,(unsigned long *)(& ks->link_modes.advertising));
    #line 1763 
    break;
    #line 1764 
    case (u64)256: 
                   #line 1764 
    ;
    #line 1765 
    __set_bit(15L,(unsigned long *)(& ks->link_modes.supported));
    #line 1767 
    break;
    #line 1768 
    case (u64)512: 
                   #line 1768 
    ;
    #line 1769 
    __set_bit(6L,(unsigned long *)(& ks->link_modes.supported));
    #line 1770 
    __set_bit(15L,(unsigned long *)(& ks->link_modes.supported));
    #line 1772 
    __set_bit(6L,(unsigned long *)(& ks->link_modes.advertising));
    #line 1773 
    __set_bit(15L,(unsigned long *)(& ks->link_modes.advertising));
    #line 1775 
    break;
    #line 1776 
    case (u64)1024: 
                    #line 1776 
    ;
    #line 1777 
    case (u64)2048: 
                    #line 1777 
    ;
    #line 1778 
    __set_bit(6L,(unsigned long *)(& ks->link_modes.supported));
    #line 1779 
    __set_bit(48L,(unsigned long *)(& ks->link_modes.supported));
    #line 1781 
    __set_bit(6L,(unsigned long *)(& ks->link_modes.advertising));
    #line 1782 
    __set_bit(48L,(unsigned long *)(& ks->link_modes.advertising));
    #line 1784 
    break;
    #line 1785 
    case (u64)4096: 
                    #line 1785 
    ;
    #line 1786 
    __set_bit(6L,(unsigned long *)(& ks->link_modes.supported));
    #line 1787 
    __set_bit(12L,(unsigned long *)(& ks->link_modes.supported));
    #line 1789 
    __set_bit(6L,(unsigned long *)(& ks->link_modes.advertising));
    #line 1790 
    __set_bit(12L,(unsigned long *)(& ks->link_modes.advertising));
    #line 1792 
    break;
    #line 1793 
    case (u64)8192: 
                    #line 1793 
    ;
    #line 1794 
    case (u64)131072: 
                      #line 1794 
    ;
    #line 1795 
    case (u64)262144: 
                      #line 1795 
    ;
    #line 1796 
    __set_bit(12L,(unsigned long *)(& ks->link_modes.supported));
    #line 1798 
    break;
    #line 1799 
    case (u64)16384: 
                     #line 1799 
    ;
    #line 1800 
    __set_bit(43L,(unsigned long *)(& ks->link_modes.supported));
    #line 1802 
    break;
    #line 1803 
    case (u64)32768: 
                     #line 1803 
    ;
    #line 1804 
    __set_bit(44L,(unsigned long *)(& ks->link_modes.supported));
    #line 1806 
    break;
    #line 1807 
    case (u64)65536: 
                     #line 1807 
    ;
    #line 1808 
    __set_bit(6L,(unsigned long *)(& ks->link_modes.supported));
    #line 1809 
    __set_bit(19L,(unsigned long *)(& ks->link_modes.supported));
    #line 1811 
    __set_bit(6L,(unsigned long *)(& ks->link_modes.advertising));
    #line 1812 
    __set_bit(19L,(unsigned long *)(& ks->link_modes.advertising));
    #line 1814 
    break;
    #line 1815 
    case (u64)524288: 
                      #line 1815 
    ;
    #line 1816 
    case (u64)1048576: 
                       #line 1816 
    ;
    #line 1817 
    case (u64)2097152: 
                       #line 1817 
    ;
    #line 1818 
    case (u64)4194304: 
                       #line 1818 
    ;
    #line 1819 
    __set_bit(6L,(unsigned long *)(& ks->link_modes.supported));
    #line 1820 
    __set_bit(31L,(unsigned long *)(& ks->link_modes.supported));
    #line 1822 
    __set_bit(6L,(unsigned long *)(& ks->link_modes.advertising));
    #line 1823 
    __set_bit(31L,(unsigned long *)(& ks->link_modes.advertising));
    #line 1825 
    break;
    #line 1826 
    case (u64)268435456: 
                         #line 1826 
    ;
    #line 1827 
    case (u64)536870912: 
                         #line 1827 
    ;
    #line 1828 
    __set_bit(31L,(unsigned long *)(& ks->link_modes.supported));
    #line 1830 
    break;
    #line 1831 
    case (u64)8388608: 
                       #line 1831 
    ;
    #line 1832 
    case (u64)16777216: 
                        #line 1832 
    ;
    #line 1833 
    __set_bit(33L,(unsigned long *)(& ks->link_modes.supported));
    #line 1835 
    break;
    #line 1836 
    case (u64)33554432: 
                        #line 1836 
    ;
    #line 1837 
    case (u64)134217728: 
                         #line 1837 
    ;
    #line 1838 
    case (u64)67108864: 
                        #line 1838 
    ;
    #line 1839 
    __set_bit(6L,(unsigned long *)(& ks->link_modes.supported));
    #line 1840 
    __set_bit(32L,(unsigned long *)(& ks->link_modes.supported));
    #line 1842 
    __set_bit(6L,(unsigned long *)(& ks->link_modes.advertising));
    #line 1843 
    __set_bit(32L,(unsigned long *)(& ks->link_modes.advertising));
    #line 1845 
    break;
    #line 1846 
    case (u64)1073741824: 
                          #line 1846 
    ;
    #line 1847 
    __set_bit(6L,(unsigned long *)(& ks->link_modes.supported));
    #line 1848 
    __set_bit(24L,(unsigned long *)(& ks->link_modes.supported));
    #line 1850 
    __set_bit(6L,(unsigned long *)(& ks->link_modes.advertising));
    #line 1851 
    __set_bit(24L,(unsigned long *)(& ks->link_modes.advertising));
    #line 1853 
    break;
    #line 1854 
    case (u64)0: 
                 #line 1854 
    ;
    #line 1855 
    case (u64)0: 
                 #line 1855 
    ;
    #line 1856 
    __set_bit(24L,(unsigned long *)(& ks->link_modes.supported));
    #line 1858 
    break;
    #line 1859 
    case (u64)(-2147483648): 
                             #line 1859 
    ;
    #line 1860 
    __set_bit(25L,(unsigned long *)(& ks->link_modes.supported));
    #line 1862 
    break;
    #line 1863 
    case (u64)0: 
                 #line 1863 
    ;
    #line 1864 
    __set_bit(26L,(unsigned long *)(& ks->link_modes.supported));
    #line 1866 
    break;
    #line 1867 
    case (u64)0: 
                 #line 1867 
    ;
    #line 1868 
    __set_bit(6L,(unsigned long *)(& ks->link_modes.supported));
    #line 1869 
    __set_bit(23L,(unsigned long *)(& ks->link_modes.supported));
    #line 1871 
    __set_bit(6L,(unsigned long *)(& ks->link_modes.advertising));
    #line 1872 
    __set_bit(23L,(unsigned long *)(& ks->link_modes.advertising));
    #line 1874 
    break;
    #line 1875 
    case (u64)0: 
                 #line 1875 
    ;
    #line 1876 
    case (u64)0: 
                 #line 1876 
    ;
    #line 1877 
    __set_bit(6L,(unsigned long *)(& ks->link_modes.supported));
    #line 1878 
    __set_bit(34L,(unsigned long *)(& ks->link_modes.supported));
    #line 1880 
    __set_bit(6L,(unsigned long *)(& ks->link_modes.advertising));
    #line 1881 
    __set_bit(34L,(unsigned long *)(& ks->link_modes.advertising));
    #line 1883 
    break;
    #line 1884 
    case (u64)0: 
                 #line 1884 
    ;
    #line 1885 
    case (u64)0: 
                 #line 1885 
    ;
    #line 1886 
    case (u64)0: 
                 #line 1886 
    ;
    #line 1887 
    case (u64)0: 
                 #line 1887 
    ;
    #line 1888 
    case (u64)0: 
                 #line 1888 
    ;
    #line 1889 
    case (u64)0: 
                 #line 1889 
    ;
    #line 1890 
    case (u64)0: 
                 #line 1890 
    ;
    #line 1891 
    __set_bit(34L,(unsigned long *)(& ks->link_modes.supported));
    #line 1893 
    break;
    #line 1894 
    case (u64)0: 
                 #line 1894 
    ;
    #line 1895 
    case (u64)0: 
                 #line 1895 
    ;
    #line 1896 
    __set_bit(6L,(unsigned long *)(& ks->link_modes.supported));
    #line 1897 
    __set_bit(35L,(unsigned long *)(& ks->link_modes.supported));
    #line 1899 
    __set_bit(6L,(unsigned long *)(& ks->link_modes.advertising));
    #line 1900 
    __set_bit(35L,(unsigned long *)(& ks->link_modes.advertising));
    #line 1902 
    break;
    #line 1903 
    case (u64)0: 
                 #line 1903 
    ;
    #line 1904 
    case (u64)0: 
                 #line 1904 
    ;
    #line 1905 
    case (u64)0: 
                 #line 1905 
    ;
    #line 1906 
    case (u64)0: 
                 #line 1906 
    ;
    #line 1907 
    __set_bit(40L,(unsigned long *)(& ks->link_modes.supported));
    #line 1909 
    break;
    #line 1910 
    case (u64)0: 
                 #line 1910 
    ;
    #line 1911 
    __set_bit(6L,(unsigned long *)(& ks->link_modes.supported));
    #line 1912 
    __set_bit(38L,(unsigned long *)(& ks->link_modes.supported));
    #line 1914 
    __set_bit(6L,(unsigned long *)(& ks->link_modes.advertising));
    #line 1915 
    __set_bit(38L,(unsigned long *)(& ks->link_modes.advertising));
    #line 1917 
    break;
    #line 1918 
    case (u64)0: 
                 #line 1918 
    ;
    #line 1919 
    case (u64)0: 
                 #line 1919 
    ;
    #line 1920 
    case (u64)0: 
                 #line 1920 
    ;
    #line 1921 
    case (u64)0: 
                 #line 1921 
    ;
    #line 1922 
    case (u64)0: 
                 #line 1922 
    ;
    #line 1923 
    __set_bit(38L,(unsigned long *)(& ks->link_modes.supported));
    #line 1925 
    break;
    #line 1926 
    case (u64)0: 
                 #line 1926 
    ;
    #line 1927 
    __set_bit(6L,(unsigned long *)(& ks->link_modes.supported));
    #line 1928 
    __set_bit(38L,(unsigned long *)(& ks->link_modes.supported));
    #line 1930 
    __set_bit(6L,(unsigned long *)(& ks->link_modes.advertising));
    #line 1931 
    __set_bit(38L,(unsigned long *)(& ks->link_modes.advertising));
    #line 1933 
    break;
    #line 1934 
    case (u64)0: 
                 #line 1934 
    ;
    #line 1935 
    case (u64)0: 
                 #line 1935 
    ;
    #line 1936 
    __set_bit(37L,(unsigned long *)(& ks->link_modes.supported));
    #line 1938 
    break;
    #line 1939 
    case (u64)0: 
                 #line 1939 
    ;
    #line 1940 
    case (u64)0: 
                 #line 1940 
    ;
    #line 1941 
    __set_bit(39L,(unsigned long *)(& ks->link_modes.supported));
    #line 1943 
    break;
    #line 1944 
    case (u64)0: 
                 #line 1944 
    ;
    #line 1945 
    case (u64)0: 
                 #line 1945 
    ;
    #line 1946 
    __set_bit(6L,(unsigned long *)(& ks->link_modes.supported));
    #line 1947 
    __set_bit(36L,(unsigned long *)(& ks->link_modes.supported));
    #line 1949 
    __set_bit(6L,(unsigned long *)(& ks->link_modes.advertising));
    #line 1950 
    __set_bit(36L,(unsigned long *)(& ks->link_modes.advertising));
    #line 1952 
    break;
    #line 1953 
    default: 
             #line 1953 
    ;
    #line 1954 
    unrecog_phy_low = (_Bool)1;
  }
  #line 1957 
  switch (link_info->phy_type_high) {
    #line 1958 
    case (u64)1: 
                 #line 1958 
    ;
    #line 1959 
    __set_bit(6L,(unsigned long *)(& ks->link_modes.supported));
    #line 1960 
    __set_bit(36L,(unsigned long *)(& ks->link_modes.supported));
    #line 1962 
    __set_bit(6L,(unsigned long *)(& ks->link_modes.advertising));
    #line 1963 
    __set_bit(36L,(unsigned long *)(& ks->link_modes.advertising));
    #line 1965 
    break;
    #line 1966 
    case (u64)2: 
                 #line 1966 
    ;
    #line 1967 
    case (u64)4: 
                 #line 1967 
    ;
    #line 1968 
    case (u64)8: 
                 #line 1968 
    ;
    #line 1969 
    case (u64)16: 
                  #line 1969 
    ;
    #line 1970 
    __set_bit(38L,(unsigned long *)(& ks->link_modes.supported));
    #line 1972 
    break;
    #line 1973 
    default: 
             #line 1973 
    ;
    #line 1974 
    unrecog_phy_high = (_Bool)1;
  }
  #line 1977 
  if ((int)unrecog_phy_low != 0 && (int)unrecog_phy_high != 0) {
    #line 1979 
    netdev_info(netdev,(char *)"WARNING: Unrecognized PHY_Low (0x%llx).\n",link_info->phy_type_low);
    #line 1982 
    netdev_info(netdev,(char *)"WARNING: Unrecognized PHY_High (0x%llx).\n",link_info->phy_type_high);
  }
  #line 1991 
  memset((void *)(& cap_ksettings),0,96UL);
  #line 1992 
  ice_phy_type_to_ethtool(netdev,& cap_ksettings);
  #line 1993 
  ethtool_intersect_link_masks(ks,& cap_ksettings);
  #line 1995 
  switch ((int)link_info->link_speed) {
    #line 1996 
    case 1024: 
               #line 1996 
    ;
    #line 1997 
    ks->base.speed = 100000U;
    #line 1998 
    break;
    #line 1999 
    case 512: 
              #line 1999 
    ;
    #line 2000 
    ks->base.speed = 50000U;
    #line 2001 
    break;
    #line 2002 
    case 256: 
              #line 2002 
    ;
    #line 2003 
    ks->base.speed = 40000U;
    #line 2004 
    break;
    #line 2005 
    case 128: 
              #line 2005 
    ;
    #line 2006 
    ks->base.speed = 25000U;
    #line 2007 
    break;
    #line 2008 
    case 64: 
             #line 2008 
    ;
    #line 2009 
    ks->base.speed = 20000U;
    #line 2010 
    break;
    #line 2011 
    case 32: 
             #line 2011 
    ;
    #line 2012 
    ks->base.speed = 10000U;
    #line 2013 
    break;
    #line 2014 
    case 16: 
             #line 2014 
    ;
    #line 2015 
    ks->base.speed = 5000U;
    #line 2016 
    break;
    #line 2017 
    case 8: 
            #line 2017 
    ;
    #line 2018 
    ks->base.speed = 2500U;
    #line 2019 
    break;
    #line 2020 
    case 4: 
            #line 2020 
    ;
    #line 2021 
    ks->base.speed = 1000U;
    #line 2022 
    break;
    #line 2023 
    case 2: 
            #line 2023 
    ;
    #line 2024 
    ks->base.speed = 100U;
    #line 2025 
    break;
    #line 2026 
    default: 
             #line 2026 
    ;
    #line 2027 
    netdev_info(netdev,(char *)"WARNING: Unrecognized link_speed (0x%x).\n",(int)link_info->link_speed);
    #line 2030 
    break;
  }
  #line 2032 
  ks->base.duplex = (unsigned char)1U;
  #line 2034 
  if (((unsigned long)link_info->an_info & 1UL) != 0UL) 
                                                        #line 2035 
                                                        __set_bit(6L,(unsigned long *)(& ks->link_modes.lp_advertising));
  #line 2039 
  switch ((unsigned int)pi->fc.current_mode) {
    #line 2040 
    case (unsigned int)3: 
                          #line 2040 
    ;
    #line 2041 
    __set_bit(13L,(unsigned long *)(& ks->link_modes.lp_advertising));
    #line 2042 
    break;
    #line 2043 
    case (unsigned int)2: 
                          #line 2043 
    ;
    #line 2044 
    __set_bit(13L,(unsigned long *)(& ks->link_modes.lp_advertising));
    #line 2045 
    __set_bit(14L,(unsigned long *)(& ks->link_modes.lp_advertising));
    #line 2047 
    break;
    #line 2048 
    case (unsigned int)1: 
                          #line 2048 
    ;
    #line 2049 
    __set_bit(14L,(unsigned long *)(& ks->link_modes.lp_advertising));
    #line 2051 
    break;
    #line 2052 
    case (unsigned int)4: 
                          #line 2052 
    ;
    #line 2054 
    default: 
             #line 2054 
    ;
    #line 2055 
    __set_bit(13L,(unsigned long *)(& ks->link_modes.lp_advertising));
    #line 2056 
    __set_bit(14L,(unsigned long *)(& ks->link_modes.lp_advertising));
    #line 2058 
    break;
  }
  #line 2060 
  return;
}

#line 2070  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_ethtool.c"
static void ice_get_settings_link_down(struct ethtool_link_ksettings *ks, struct net_device *netdev)
{
  #line 2076 
  ice_phy_type_to_ethtool(netdev,ks);
  #line 2079 
  ks->base.speed = 4294967295U;
  #line 2080 
  ks->base.duplex = (unsigned char)255U;
  #line 2081 
  return;
}

#line 2091  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_ethtool.c"
static int ice_get_link_ksettings(struct net_device *netdev, struct ethtool_link_ksettings *ks)
{
  #line 2095 
  struct ice_aqc_get_phy_caps_data *caps;
  #line 2096 
  struct ice_link_status *hw_link_info;
  #line 2098 
  enum ice_status status;
  #line 2094 
  struct ice_netdev_priv *np = netdev_priv(netdev);
  #line 2097 
  struct ice_vsi *vsi = np->vsi;
  #line 2099 
  int err = 0;
  #line 2101 
  cif_bitmap_zero((unsigned long *)(& ks->link_modes.supported),74U);
  #line 2102 
  cif_bitmap_zero((unsigned long *)(& ks->link_modes.advertising),74U);
  #line 2103 
  cif_bitmap_zero((unsigned long *)(& ks->link_modes.lp_advertising),74U);
  #line 2104 
  hw_link_info = & (vsi->port_info)->phy.link_info;
  #line 2107 
  if (((unsigned long)hw_link_info->link_info & 1UL) != 0UL) 
                                                             #line 2108 
                                                             ice_get_settings_link_up(ks,netdev); else 
                                                                    #line 2110 
                                                                    ice_get_settings_link_down(ks,netdev);
  #line 2113 
  ks->base.autoneg = (unsigned char)((unsigned int)hw_link_info->an_info & 1U);
  #line 2117 
  switch ((unsigned int)(vsi->port_info)->phy.media_type) {
    #line 2118 
    case (unsigned int)1: 
                          #line 2118 
    ;
    #line 2119 
    __set_bit(10L,(unsigned long *)(& ks->link_modes.supported));
    #line 2120 
    ks->base.port = (unsigned char)3U;
    #line 2121 
    break;
    #line 2122 
    case (unsigned int)2: 
                          #line 2122 
    ;
    #line 2123 
    __set_bit(7L,(unsigned long *)(& ks->link_modes.supported));
    #line 2124 
    __set_bit(7L,(unsigned long *)(& ks->link_modes.advertising));
    #line 2125 
    ks->base.port = (unsigned char)0U;
    #line 2126 
    break;
    #line 2127 
    case (unsigned int)3: 
                          #line 2127 
    ;
    #line 2128 
    __set_bit(6L,(unsigned long *)(& ks->link_modes.supported));
    #line 2129 
    __set_bit(16L,(unsigned long *)(& ks->link_modes.supported));
    #line 2130 
    __set_bit(6L,(unsigned long *)(& ks->link_modes.advertising));
    #line 2131 
    __set_bit(16L,(unsigned long *)(& ks->link_modes.advertising));
    #line 2133 
    ks->base.port = (unsigned char)239U;
    #line 2134 
    break;
    #line 2135 
    case (unsigned int)4: 
                          #line 2135 
    ;
    #line 2136 
    __set_bit(10L,(unsigned long *)(& ks->link_modes.supported));
    #line 2137 
    __set_bit(10L,(unsigned long *)(& ks->link_modes.advertising));
    #line 2138 
    ks->base.port = (unsigned char)5U;
    #line 2139 
    break;
    #line 2140 
    default: 
             #line 2140 
    ;
    #line 2141 
    ks->base.port = (unsigned char)255U;
    #line 2142 
    break;
  }
  #line 2146 
  __set_bit(13L,(unsigned long *)(& ks->link_modes.supported));
  #line 2148 
  caps = (struct ice_aqc_get_phy_caps_data *)kzalloc_3(560UL,3264U);
  #line 2149 
  if (caps == (struct ice_aqc_get_phy_caps_data *)0) 
                                                     #line 2150 
                                                     return -12;
  #line 2152 
  status = ice_aq_get_phy_caps(vsi->port_info,(_Bool)0,(unsigned char)4,caps,(struct ice_sq_cd *)0);
  #line 2154 
  if (status != ICE_SUCCESS) {
    #line 2155 
    err = -5;
    #line 2156 
    goto done;
  }
  #line 2160 
  if (((unsigned long)caps->caps & 1UL) != 0UL && ((unsigned long)caps->caps & 2UL) != 0UL) {
    #line 2162 
    __set_bit(13L,(unsigned long *)(& ks->link_modes.advertising));
    #line 2163 
    __set_bit(14L,(unsigned long *)(& ks->link_modes.advertising));
  }
  else 
    #line 2165 
    if (((unsigned long)caps->caps & 1UL) != 0UL) 
                                                  #line 2166 
                                                  __set_bit(14L,(unsigned long *)(& ks->link_modes.advertising));
    else 
      #line 2168 
      if (((unsigned long)caps->caps & 2UL) != 0UL) {
        #line 2169 
        __set_bit(13L,(unsigned long *)(& ks->link_modes.advertising));
        #line 2170 
        __set_bit(14L,(unsigned long *)(& ks->link_modes.advertising));
      }
      else {
        #line 2173 
        __set_bit(13L,(unsigned long *)(& ks->link_modes.advertising));
        #line 2174 
        __set_bit(14L,(unsigned long *)(& ks->link_modes.advertising));
      }
  #line 2179 
  __set_bit(49L,(unsigned long *)(& ks->link_modes.advertising));
  #line 2181 
  if (((unsigned long)caps->link_fec_options & 2UL) != 0UL || ((unsigned long)caps->link_fec_options & 8UL) != 0UL) 
    #line 2183 
    __set_bit(51L,(unsigned long *)(& ks->link_modes.advertising));
  #line 2185 
  if (((unsigned long)caps->link_fec_options & 4UL) != 0UL || ((unsigned long)caps->link_fec_options & 16UL) != 0UL) 
    #line 2187 
    __set_bit(50L,(unsigned long *)(& ks->link_modes.advertising));
  #line 2189 
  status = ice_aq_get_phy_caps(vsi->port_info,(_Bool)0,(unsigned char)2,caps,(struct ice_sq_cd *)0);
  #line 2191 
  if (status != ICE_SUCCESS) {
    #line 2192 
    err = -5;
    #line 2193 
    goto done;
  }
  #line 2197 
  __set_bit(49L,(unsigned long *)(& ks->link_modes.supported));
  #line 2199 
  if (((unsigned long)caps->link_fec_options & 1UL) != 0UL || ((unsigned long)caps->link_fec_options & 128UL) != 0UL) 
    #line 2201 
    __set_bit(51L,(unsigned long *)(& ks->link_modes.supported));
  #line 2202 
  if (((unsigned long)caps->link_fec_options & 64UL) != 0UL) 
                                                             #line 2203 
                                                             __set_bit(50L,(unsigned long *)(& ks->link_modes.supported));
  #line 2205 
  done: 
        #line 2205 
  ;
  #line 2206 
  kfree((void *)caps);
  #line 2207 
  return err;
}

#line 2215  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_ethtool.c"
static u16 ice_ksettings_find_adv_link_speed(struct ethtool_link_ksettings *ks)
{
  #line 2217 
  u16 adv_link_speed = (unsigned short)0U;
  #line 2219 
  if ((int)test_bit(3L,(unsigned long *)(& ks->link_modes.advertising)) != 0) 
    #line 2221 
    adv_link_speed = (unsigned short)((unsigned int)adv_link_speed | 2U);
  #line 2222 
  if ((int)test_bit(41L,(unsigned long *)(& ks->link_modes.advertising)) != 0) 
    #line 2224 
    adv_link_speed = (unsigned short)((unsigned int)adv_link_speed | 4U);
  #line 2225 
  if ((int)test_bit(5L,(unsigned long *)(& ks->link_modes.advertising)) != 0) 
    #line 2229 
    adv_link_speed = (unsigned short)((unsigned int)adv_link_speed | 4U);
  else {
    #line 2226 
    if ((int)test_bit(17L,(unsigned long *)(& ks->link_modes.advertising)) != 0) 
      #line 2229 
      adv_link_speed = (unsigned short)((unsigned int)adv_link_speed | 4U);
  }
  #line 2230 
  if ((int)test_bit(47L,(unsigned long *)(& ks->link_modes.advertising)) != 0) 
    #line 2232 
    adv_link_speed = (unsigned short)((unsigned int)adv_link_speed | 8U);
  #line 2233 
  if ((int)test_bit(15L,(unsigned long *)(& ks->link_modes.advertising)) != 0) 
    #line 2235 
    adv_link_speed = (unsigned short)((unsigned int)adv_link_speed | 8U);
  #line 2236 
  if ((int)test_bit(48L,(unsigned long *)(& ks->link_modes.advertising)) != 0) 
    #line 2238 
    adv_link_speed = (unsigned short)((unsigned int)adv_link_speed | 16U);
  #line 2239 
  if ((int)test_bit(12L,(unsigned long *)(& ks->link_modes.advertising)) != 0) 
    #line 2243 
    adv_link_speed = (unsigned short)((unsigned int)adv_link_speed | 32U);
  else {
    #line 2240 
    if ((int)test_bit(19L,(unsigned long *)(& ks->link_modes.advertising)) != 0) 
      #line 2243 
      adv_link_speed = (unsigned short)((unsigned int)adv_link_speed | 32U);
  }
  #line 2244 
  if ((int)test_bit(43L,(unsigned long *)(& ks->link_modes.advertising)) != 0) 
    #line 2248 
    adv_link_speed = (unsigned short)((unsigned int)adv_link_speed | 32U);
  else {
    #line 2245 
    if ((int)test_bit(44L,(unsigned long *)(& ks->link_modes.advertising)) != 0) 
      #line 2248 
      adv_link_speed = (unsigned short)((unsigned int)adv_link_speed | 32U);
  }
  #line 2249 
  if ((int)test_bit(31L,(unsigned long *)(& ks->link_modes.advertising)) != 0) 
    #line 2255 
    adv_link_speed = (unsigned short)((unsigned int)adv_link_speed | 128U);
  else {
    #line 2250 
    if ((int)test_bit(33L,(unsigned long *)(& ks->link_modes.advertising)) != 0) 
      #line 2255 
      adv_link_speed = (unsigned short)((unsigned int)adv_link_speed | 128U);
    else {
      #line 2252 
      if ((int)test_bit(32L,(unsigned long *)(& ks->link_modes.advertising)) != 0) 
        #line 2255 
        adv_link_speed = (unsigned short)((unsigned int)adv_link_speed | 128U);
    }
  }
  #line 2256 
  if ((int)test_bit(24L,(unsigned long *)(& ks->link_modes.advertising)) != 0) 
    #line 2264 
    adv_link_speed = (unsigned short)((unsigned int)adv_link_speed | 256U);
  else {
    #line 2257 
    if ((int)test_bit(25L,(unsigned long *)(& ks->link_modes.advertising)) != 0) 
      #line 2264 
      adv_link_speed = (unsigned short)((unsigned int)adv_link_speed | 256U);
    else {
      #line 2259 
      if ((int)test_bit(26L,(unsigned long *)(& ks->link_modes.advertising)) != 0) 
        #line 2264 
        adv_link_speed = (unsigned short)((unsigned int)adv_link_speed | 256U);
      else {
        #line 2261 
        if ((int)test_bit(23L,(unsigned long *)(& ks->link_modes.advertising)) != 0) 
          #line 2264 
          adv_link_speed = (unsigned short)((unsigned int)adv_link_speed | 256U);
      }
    }
  }
  #line 2265 
  if ((int)test_bit(34L,(unsigned long *)(& ks->link_modes.advertising)) != 0) 
    #line 2269 
    adv_link_speed = (unsigned short)((unsigned int)adv_link_speed | 512U);
  else {
    #line 2266 
    if ((int)test_bit(35L,(unsigned long *)(& ks->link_modes.advertising)) != 0) 
      #line 2269 
      adv_link_speed = (unsigned short)((unsigned int)adv_link_speed | 512U);
  }
  #line 2270 
  if ((int)test_bit(40L,(unsigned long *)(& ks->link_modes.advertising)) != 0) 
    #line 2272 
    adv_link_speed = (unsigned short)((unsigned int)adv_link_speed | 512U);
  #line 2273 
  if ((int)test_bit(38L,(unsigned long *)(& ks->link_modes.advertising)) != 0) 
    #line 2281 
    adv_link_speed = (unsigned short)((unsigned int)adv_link_speed | 1024U);
  else {
    #line 2274 
    if ((int)test_bit(37L,(unsigned long *)(& ks->link_modes.advertising)) != 0) 
      #line 2281 
      adv_link_speed = (unsigned short)((unsigned int)adv_link_speed | 1024U);
    else {
      #line 2276 
      if ((int)test_bit(39L,(unsigned long *)(& ks->link_modes.advertising)) != 0) 
        #line 2281 
        adv_link_speed = (unsigned short)((unsigned int)adv_link_speed | 1024U);
      else {
        #line 2278 
        if ((int)test_bit(36L,(unsigned long *)(& ks->link_modes.advertising)) != 0) 
          #line 2281 
          adv_link_speed = (unsigned short)((unsigned int)adv_link_speed | 1024U);
      }
    }
  }
  #line 2283 
  return adv_link_speed;
}

#line 2298  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_ethtool.c"
static int ice_setup_autoneg(struct ice_port_info *p, struct ethtool_link_ksettings *ks, struct ice_aqc_set_phy_cfg_data *config, u8 autoneg_enabled, u8 *autoneg_changed, struct net_device *netdev)
{
  #line 2303 
  int err = 0;
  #line 2305 
  *autoneg_changed = (unsigned char)0U;
  #line 2308 
  if ((unsigned int)autoneg_enabled == 1U) {
    #line 2310 
    if (((unsigned long)p->phy.link_info.an_info & 1UL) == 0UL) {
      #line 2312 
      if (test_bit(6L,(unsigned long *)(& ks->link_modes.supported))) {
        #line 2319 
        config->caps = (unsigned char)((unsigned int)config->caps | 32U);
        #line 2320 
        *autoneg_changed = (unsigned char)1U;
      }
      else {
        #line 2315 
        netdev_info(netdev,(char *)"Autoneg not supported on this phy.\n");
        #line 2316 
        err = -22;
      }
    }
  }
  else 
    #line 2325 
    if (((unsigned long)p->phy.link_info.an_info & 1UL) != 0UL) {
      #line 2329 
      if ((int)test_bit(6L,(unsigned long *)(& ks->link_modes.supported)) != 0) {
        #line 2332 
        netdev_info(netdev,(char *)"Autoneg cannot be disabled on this phy\n");
        #line 2333 
        err = -22;
      }
      else {
        #line 2336 
        config->caps = (unsigned char)((unsigned int)config->caps & 223U);
        #line 2337 
        *autoneg_changed = (unsigned char)1U;
      }
    }
  #line 2342 
  return err;
}

#line 2353  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_ethtool.c"
static int ice_set_link_ksettings(struct net_device *netdev, struct ethtool_link_ksettings *ks)
{
  #line 2356 
  u8 autoneg;
  #line 2358 
  struct ethtool_link_ksettings safe_ks;
  #line 2358 
  struct ethtool_link_ksettings copy_ks;
  #line 2359 
  struct ice_aqc_get_phy_caps_data *abilities;
  #line 2360 
  u16 adv_link_speed;
  #line 2360 
  u16 curr_link_speed;
  #line 2360 
  u16 idx;
  #line 2361 
  struct ice_aqc_set_phy_cfg_data config;
  #line 2363 
  struct ice_port_info *p;
  #line 2365 
  enum ice_status status;
  #line 2366 
  u64 phy_type_high;
  #line 2367 
  u64 phy_type_low;
  #line 2369 
  bool linkup;
  #line 2356 
  u8 timeout = (unsigned char)50U;
  #line 2356 
  u8 lport = (unsigned char)0U;
  #line 2357 
  struct ice_netdev_priv *np = netdev_priv(netdev);
  #line 2362 
  struct ice_pf *pf = (np->vsi)->back;
  #line 2364 
  u8 autoneg_changed = (unsigned char)0U;
  #line 2368 
  int err = 0;
  #line 2371 
  p = (np->vsi)->port_info;
  #line 2373 
  if (p == (struct ice_port_info *)0) 
                                      #line 2374 
                                      return -95;
  #line 2377 
  idx = (unsigned short)0U;
  #line 2377 
  while ((int)pf->num_alloc_vsi > (int)idx) {
    #line 2378 
    if ((*(pf->vsi + (unsigned long)idx))->type == (unsigned int)ICE_VSI_PF) {
      #line 2379 
      if (np->vsi != *(pf->vsi + (unsigned long)idx)) 
                                                      #line 2380 
                                                      return -95;
      #line 2381 
      break;
    }
    #line 2377 
    idx = (u16)((int)idx + 1);
  }
  #line 2386 
  if ((unsigned int)p->phy.media_type + 4294967295U > 3U && ((unsigned long)p->phy.link_info.link_info & 1UL) != 0UL) 
    #line 2389 
    return -95;
  #line 2392 
  memcpy((void *)(& copy_ks),(void *)ks,96UL);
  #line 2395 
  autoneg = copy_ks.base.autoneg;
  #line 2397 
  memset((void *)(& safe_ks),0,96UL);
  #line 2400 
  ice_phy_type_to_ethtool(netdev,& safe_ks);
  #line 2405 
  if (bitmap_subset((unsigned long *)(& copy_ks.link_modes.advertising),
                      (unsigned long *)(& safe_ks.link_modes.supported),74U) == 0) 
    #line 2408 
    return -22;
  #line 2411 
  memset((void *)(& safe_ks),0,96UL);
  #line 2412 
  safe_ks.base.cmd = copy_ks.base.cmd;
  #line 2413 
  safe_ks.base.link_mode_masks_nwords = copy_ks.base.link_mode_masks_nwords;
  #line 2415 
  ice_get_link_ksettings(netdev,& safe_ks);
  #line 2418 
  copy_ks.base.autoneg = safe_ks.base.autoneg;
  #line 2420 
  copy_ks.base.speed = safe_ks.base.speed;
  #line 2425 
  if (memcmp((void *)(& copy_ks.base),(void *)(& safe_ks.base),48UL) != 0) 
    #line 2426 
    return -95;
  #line 2428 
  while (1) {
    #line 2428 
    if (! ((int)test_and_clear_bit(21L,(unsigned long *)(& pf->state)) != 0)) 
      #line 2428 
      break;
    #line 2429 
    timeout = (u8)((int)timeout - 1);
    #line 2430 
    if ((unsigned int)timeout == 0U) 
                                     #line 2431 
                                     return -16;
    #line 2432 
    usleep_range(1000UL,2000UL);
  }
  #line 2435 
  abilities = (struct ice_aqc_get_phy_caps_data *)kzalloc_3(560UL,3264U);
  #line 2436 
  if (abilities == (struct ice_aqc_get_phy_caps_data *)0) 
                                                          #line 2437 
                                                          return -12;
  #line 2440 
  status = ice_aq_get_phy_caps(p,(_Bool)0,(unsigned char)4,abilities,(struct ice_sq_cd *)0);
  #line 2442 
  if (status != ICE_SUCCESS) {
    #line 2443 
    err = -11;
    #line 2444 
    goto done;
  }
  #line 2448 
  memset((void *)(& config),0,24UL);
  #line 2449 
  config.caps = (unsigned char)((unsigned int)abilities->caps & 239U);
  #line 2450 
  if (((unsigned long)abilities->caps & 16UL) != 0UL) 
                                                      #line 2451 
                                                      config.caps = (unsigned char)((unsigned int)config.caps | 32U);
  #line 2454 
  err = ice_setup_autoneg(p,& safe_ks,& config,(unsigned char)((int)autoneg),& autoneg_changed,netdev);
  #line 2457 
  if (err != 0) 
                #line 2458 
                goto done;
  #line 2461 
  p->phy.get_link_info = (unsigned char)1U;
  #line 2462 
  status = ice_get_link_status(p,& linkup);
  #line 2463 
  if (status != ICE_SUCCESS) {
    #line 2464 
    err = -11;
    #line 2465 
    goto done;
  }
  #line 2468 
  curr_link_speed = p->phy.link_info.link_speed;
  #line 2469 
  adv_link_speed = ice_ksettings_find_adv_link_speed(ks);
  #line 2475 
  if ((unsigned int)adv_link_speed == 0U) 
                                          #line 2476 
                                          adv_link_speed = curr_link_speed;
  #line 2479 
  ice_update_phy_type(& phy_type_low,& phy_type_high,(unsigned short)((int)adv_link_speed));
  #line 2481 
  if ((unsigned int)autoneg_changed == 0U && (int)adv_link_speed == (int)curr_link_speed) {
    #line 2482 
    netdev_info(netdev,(char *)"Nothing changed, exiting without setting anything.\n");
    #line 2483 
    goto done;
  }
  #line 2487 
  config.low_power_ctrl = abilities->low_power_ctrl;
  #line 2488 
  config.eee_cap = abilities->eee_cap;
  #line 2489 
  config.eeer_value = abilities->eeer_value;
  #line 2490 
  config.link_fec_opt = abilities->link_fec_options;
  #line 2493 
  p->phy.link_info.req_speeds = adv_link_speed;
  #line 2496 
  config.caps = (unsigned char)((unsigned int)config.caps | 8U);
  #line 2498 
  if (phy_type_low != 0ULL || phy_type_high != 0ULL) {
    #line 2499 
    config.phy_type_high = abilities->phy_type_high & phy_type_high;
    #line 2501 
    config.phy_type_low = abilities->phy_type_low & phy_type_low;
  }
  else {
    #line 2504 
    err = -11;
    #line 2505 
    netdev_info(netdev,(char *)"Nothing changed. No PHY_TYPE is corresponded to advertised link speed.\n");
    #line 2506 
    goto done;
  }
  #line 2510 
  if (((unsigned long)p->phy.link_info.link_info & 1UL) != 0UL) {
    #line 2514 
    ice_print_link_msg(np->vsi,(_Bool)0);
    #line 2515 
    netif_carrier_off(netdev);
    #line 2516 
    netif_tx_stop_all_queues(netdev);
  }
  #line 2520 
  status = ice_aq_set_phy_cfg(& pf->hw,(unsigned char)((int)lport),& config,(struct ice_sq_cd *)0);
  #line 2521 
  if (status != ICE_SUCCESS) {
    #line 2522 
    netdev_info(netdev,(char *)"Set phy config failed,\n");
    #line 2523 
    err = -11;
  }
  #line 2526 
  done: 
        #line 2526 
  ;
  #line 2527 
  kfree((void *)abilities);
  #line 2528 
  cif_clear_bit_7(21L,(unsigned long *)(& pf->state));
  #line 2530 
  return err;
}

#line 2542  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_ethtool.c"
static int ice_get_rxnfc(struct net_device *netdev, struct ethtool_rxnfc *cmd, u32 *rule_locs)
{
  #line 2545 
  struct ice_netdev_priv *np = netdev_priv(netdev);
  #line 2546 
  struct ice_vsi *vsi = np->vsi;
  #line 2547 
  int ret = -95;
  #line 2549 
  switch (cmd->cmd) {
    #line 2550 
    case (__u32)45: 
                    #line 2550 
    ;
    #line 2551 
    cmd->data = (unsigned long long)vsi->rss_size;
    #line 2552 
    ret = 0;
    #line 2553 
    break;
    #line 2554 
    default: 
             #line 2554 
    ;
    #line 2555 
    break;
  }
  #line 2558 
  return ret;
}

#line 2562  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_ethtool.c"
static void ice_get_ringparam(struct net_device *netdev, struct ethtool_ringparam *ring)
{
  #line 2564 
  struct ice_netdev_priv *np = netdev_priv(netdev);
  #line 2565 
  struct ice_vsi *vsi = np->vsi;
  #line 2567 
  ring->rx_max_pending = 8160U;
  #line 2568 
  ring->tx_max_pending = 8160U;
  #line 2569 
  ring->rx_pending = (unsigned int)(*(vsi->rx_rings))->count;
  #line 2570 
  ring->tx_pending = (unsigned int)(*(vsi->tx_rings))->count;
  #line 2573 
  ring->rx_mini_max_pending = 0U;
  #line 2574 
  ring->rx_jumbo_max_pending = 0U;
  #line 2575 
  ring->rx_mini_pending = 0U;
  #line 2576 
  ring->rx_jumbo_pending = 0U;
  #line 2577 
  return;
}

#line 2580  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_ethtool.c"
static int ice_set_ringparam(struct net_device *netdev, struct ethtool_ringparam *ring)
{
  #line 2587 
  int i;
  #line 2588 
  u32 new_rx_cnt;
  #line 2588 
  u32 new_tx_cnt;
  #line 2582 
  struct ice_ring *tx_rings = (struct ice_ring *)0;
  #line 2582 
  struct ice_ring *rx_rings = (struct ice_ring *)0;
  #line 2583 
  struct ice_netdev_priv *np = netdev_priv(netdev);
  #line 2584 
  struct ice_ring *xdp_rings = (struct ice_ring *)0;
  #line 2585 
  struct ice_vsi *vsi = np->vsi;
  #line 2586 
  struct ice_pf *pf = vsi->back;
  #line 2587 
  int timeout = 50;
  #line 2587 
  int err = 0;
  #line 2590 
  if ((ring->tx_pending + 4294967232U > 8096U || ring->rx_pending > 8160U) || ring->rx_pending <= 63U) {
    #line 2594 
    netdev_err(netdev,(char *)"Descriptors requested (Tx: %d / Rx: %d) out of range [%d-%d] (increment %d)\n",ring->tx_pending,ring->rx_pending,64,8160,32);
    #line 2598 
    return -22;
  }
  #line 2601 
  new_tx_cnt = (ring->tx_pending + 31U) & 4294967264U;
  #line 2602 
  if (ring->tx_pending != new_tx_cnt) 
                                      #line 2603 
                                      netdev_info(netdev,(char *)"Requested Tx descriptor count rounded up to %d\n",new_tx_cnt);
  #line 2606 
  new_rx_cnt = (ring->rx_pending + 31U) & 4294967264U;
  #line 2607 
  if (ring->rx_pending != new_rx_cnt) 
                                      #line 2608 
                                      netdev_info(netdev,(char *)"Requested Rx descriptor count rounded up to %d\n",new_rx_cnt);
  #line 2613 
  if ((unsigned int)(*(vsi->tx_rings))->count == new_tx_cnt && (unsigned int)(*(vsi->rx_rings))->count == new_rx_cnt) {
    {
      #line 2615 
      bool branch;
      #line 2615 
      struct _ddebug __UNIQUE_ID_ddebug542 = {.modname = (char *)"ice", .function = (char *)"ice_set_ringparam", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_ethtool.c", .format = (char *)"Nothing to change, descriptor count is same as requested\n", .lineno = (unsigned int)2615U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 2615 
      branch = arch_static_branch(& __UNIQUE_ID_ddebug542.key.dd_key_false.key,(_Bool)0);
      #line 2615 
      if ((long)((long)((int)branch != 0)) != 0L) 
                                                  #line 2615 
                                                  __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug542,netdev,(char *)"Nothing to change, descriptor count is same as requested\n");
    }
    #line 2616 
    return 0;
  }
  #line 2623 
  if ((int)ice_xsk_any_rx_ring_ena(vsi) != 0) 
                                              #line 2624 
                                              return -16;
  #line 2626 
  while (1) {
    #line 2626 
    if (! ((int)test_and_clear_bit(21L,(unsigned long *)(& pf->state)) != 0)) 
      #line 2626 
      break;
    #line 2627 
    timeout --;
    #line 2628 
    if (timeout == 0) 
                      #line 2629 
                      return -16;
    #line 2630 
    usleep_range(1000UL,2000UL);
  }
  #line 2634 
  if (! netif_running(vsi->netdev)) {
    #line 2635 
    i = 0;
    #line 2635 
    while ((int)vsi->alloc_txq > i) {
      #line 2636 
      (*(vsi->tx_rings + (unsigned long)i))->count = (unsigned short)new_tx_cnt;
      #line 2635 
      i ++;
    }
    #line 2637 
    i = 0;
    #line 2637 
    while ((int)vsi->alloc_rxq > i) {
      #line 2638 
      (*(vsi->rx_rings + (unsigned long)i))->count = (unsigned short)new_rx_cnt;
      #line 2637 
      i ++;
    }
    #line 2639 
    if ((int)ice_is_xdp_ena_vsi(vsi) != 0) {
      #line 2640 
      i = 0;
      #line 2640 
      while ((int)vsi->num_xdp_txq > i) {
        #line 2641 
        (*(vsi->xdp_rings + (unsigned long)i))->count = (unsigned short)new_tx_cnt;
        #line 2640 
        i ++;
      }
    }
    #line 2642 
    vsi->num_tx_desc = (unsigned short)new_tx_cnt;
    #line 2643 
    vsi->num_rx_desc = (unsigned short)new_rx_cnt;
    {
      #line 2644 
      bool branch_0;
      #line 2644 
      struct _ddebug __UNIQUE_ID_ddebug543 = {.modname = (char *)"ice", .function = (char *)"ice_set_ringparam", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_ethtool.c", .format = (char *)"Link is down, descriptor count change happens when link is brought up\n", .lineno = (unsigned int)2644U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 2644 
      branch_0 = arch_static_branch(& __UNIQUE_ID_ddebug543.key.dd_key_false.key,(_Bool)0);
      #line 2644 
      if ((long)((long)((int)branch_0 != 0)) != 0L) 
                                                    #line 2644 
                                                    __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug543,netdev,(char *)"Link is down, descriptor count change happens when link is brought up\n");
    }
    #line 2645 
    goto done;
  }
  #line 2648 
  if ((unsigned int)(*(vsi->tx_rings))->count == new_tx_cnt) 
                                                             #line 2649 
                                                             goto process_rx;
  #line 2652 
  netdev_info(netdev,(char *)"Changing Tx descriptor count from %d to %d\n",(int)(*(vsi->tx_rings))->count,new_tx_cnt);
  #line 2655 
  tx_rings = (struct ice_ring *)kcalloc_0((unsigned long)vsi->num_txq,4096UL,3264U);
  #line 2656 
  if (tx_rings == (struct ice_ring *)0) {
    #line 2657 
    err = -12;
    #line 2658 
    goto done;
  }
  #line 2661 
  i = 0;
  #line 2661 
  while ((int)vsi->num_txq > i) {
    #line 2663 
    *(tx_rings + (unsigned long)i) = *(*(vsi->tx_rings + (unsigned long)i));
    #line 2664 
    (tx_rings + (unsigned long)i)->count = (unsigned short)new_tx_cnt;
    #line 2665 
    (tx_rings + (unsigned long)i)->desc = (void *)0;
    #line 2666 
    (tx_rings + (unsigned long)i)->__anonCompField_ice_ring_196.tx_buf = (struct ice_tx_buf *)0;
    #line 2667 
    err = ice_setup_tx_ring(tx_rings + (unsigned long)i);
    #line 2668 
    if (err != 0) {
      #line 2669 
      while (1) {
        #line 2669 
        int tmp_7;
        #line 2669 
        tmp_7 = i;
        #line 2669 
        i --;
        #line 2669 
        ;
        #line 2669 
        if (! (tmp_7 != 0)) 
                            #line 2669 
                            break;
        #line 2670 
        ice_clean_tx_ring(tx_rings + (unsigned long)i);
      }
      #line 2671 
      kfree((void *)tx_rings);
      #line 2672 
      goto done;
    }
    #line 2661 
    i ++;
  }
  #line 2676 
  if (! ice_is_xdp_ena_vsi(vsi)) 
                                 #line 2677 
                                 goto process_rx;
  #line 2680 
  netdev_info(netdev,(char *)"Changing XDP descriptor count from %d to %d\n",(int)(*(vsi->xdp_rings))->count,new_tx_cnt);
  #line 2683 
  xdp_rings = (struct ice_ring *)kcalloc_0((unsigned long)vsi->num_xdp_txq,4096UL,3264U);
  #line 2684 
  if (xdp_rings == (struct ice_ring *)0) {
    #line 2685 
    err = -12;
    #line 2686 
    goto free_tx;
  }
  #line 2689 
  i = 0;
  #line 2689 
  while ((int)vsi->num_xdp_txq > i) {
    #line 2691 
    *(xdp_rings + (unsigned long)i) = *(*(vsi->xdp_rings + (unsigned long)i));
    #line 2692 
    (xdp_rings + (unsigned long)i)->count = (unsigned short)new_tx_cnt;
    #line 2693 
    (xdp_rings + (unsigned long)i)->desc = (void *)0;
    #line 2694 
    (xdp_rings + (unsigned long)i)->__anonCompField_ice_ring_196.tx_buf = (struct ice_tx_buf *)0;
    #line 2695 
    err = ice_setup_tx_ring(xdp_rings + (unsigned long)i);
    #line 2696 
    if (err != 0) {
      #line 2697 
      while (1) {
        #line 2697 
        int tmp_10;
        #line 2697 
        tmp_10 = i;
        #line 2697 
        i --;
        #line 2697 
        ;
        #line 2697 
        if (! (tmp_10 != 0)) 
                             #line 2697 
                             break;
        #line 2698 
        ice_clean_tx_ring(xdp_rings + (unsigned long)i);
      }
      #line 2699 
      kfree((void *)xdp_rings);
      #line 2700 
      goto free_tx;
    }
    #line 2702 
    ice_set_ring_xdp(xdp_rings + (unsigned long)i);
    #line 2689 
    i ++;
  }
  #line 2705 
  process_rx: 
              #line 2705 
  ;
  #line 2706 
  if ((unsigned int)(*(vsi->rx_rings))->count == new_rx_cnt) 
                                                             #line 2707 
                                                             goto process_link;
  #line 2710 
  netdev_info(netdev,(char *)"Changing Rx descriptor count from %d to %d\n",(int)(*(vsi->rx_rings))->count,new_rx_cnt);
  #line 2713 
  rx_rings = (struct ice_ring *)kcalloc_0((unsigned long)vsi->num_rxq,4096UL,3264U);
  #line 2714 
  if (rx_rings == (struct ice_ring *)0) {
    #line 2715 
    err = -12;
    #line 2716 
    goto done;
  }
  #line 2719 
  i = 0;
  #line 2719 
  while ((int)vsi->num_rxq > i) {
    {
      #line 2736 
      unsigned int tmp_12;
      #line 2721 
      *(rx_rings + (unsigned long)i) = *(*(vsi->rx_rings + (unsigned long)i));
      #line 2722 
      (rx_rings + (unsigned long)i)->count = (unsigned short)new_rx_cnt;
      #line 2723 
      (rx_rings + (unsigned long)i)->desc = (void *)0;
      #line 2724 
      (rx_rings + (unsigned long)i)->__anonCompField_ice_ring_196.rx_buf = (struct ice_rx_buf *)0;
      #line 2728 
      (rx_rings + (unsigned long)i)->tail = (vsi->back)->hw.hw_addr + 753920U;
      #line 2730 
      err = ice_setup_rx_ring(rx_rings + (unsigned long)i);
      #line 2731 
      if (err != 0) 
                    #line 2732 
                    goto rx_unwind;
      #line 2736 
      if ((int)(rx_rings + (unsigned long)i)->next_to_clean <= (int)(rx_rings + (unsigned long)i)->next_to_use) 
        #line 2736 
        tmp_12 = (unsigned int)(rx_rings + (unsigned long)i)->count; else 
                                                                    #line 2736 
                                                                    tmp_12 = 0U;
      #line 2735 
      ;
      #line 2735 
      ;
      #line 2735 
      err = (int)ice_alloc_rx_bufs(rx_rings + (unsigned long)i,
                           (unsigned short)((int)(((tmp_12 + (unsigned int)(
                                                    rx_rings + (unsigned long)i)->next_to_clean) - (unsigned int)(
                                                   rx_rings + (unsigned long)i)->next_to_use) + 65535U)));
      #line 2737 
      rx_unwind: 
                 #line 2737 
      ;
      #line 2738 
      if (err != 0) {
        #line 2739 
        while (i != 0) {
          #line 2740 
          i --;
          #line 2741 
          ice_free_rx_ring(rx_rings + (unsigned long)i);
        }
        #line 2743 
        kfree((void *)rx_rings);
        #line 2744 
        err = -12;
        #line 2745 
        goto free_tx;
      }
    }
    #line 2719 
    i ++;
  }
  #line 2749 
  process_link: 
                #line 2749 
  ;
  #line 2753 
  if (! test_and_clear_bit(1L,(unsigned long *)(& vsi->state))) {
    #line 2754 
    ice_down(vsi);
    #line 2756 
    if (tx_rings != (struct ice_ring *)0) {
      #line 2757 
      i = 0;
      #line 2757 
      while ((int)vsi->num_txq > i) {
        #line 2758 
        ice_free_tx_ring(*(vsi->tx_rings + (unsigned long)i));
        #line 2759 
        *(*(vsi->tx_rings + (unsigned long)i)) = *(tx_rings + (unsigned long)i);
        #line 2757 
        i ++;
      }
      #line 2761 
      kfree((void *)tx_rings);
    }
    #line 2764 
    if (rx_rings != (struct ice_ring *)0) {
      #line 2765 
      i = 0;
      #line 2765 
      while ((int)vsi->num_rxq > i) {
        #line 2766 
        ice_free_rx_ring(*(vsi->rx_rings + (unsigned long)i));
        #line 2768 
        (rx_rings + (unsigned long)i)->tail = (*(vsi->rx_rings + (unsigned long)i))->tail;
        #line 2774 
        (rx_rings + (unsigned long)i)->next_to_use = (unsigned short)0U;
        #line 2775 
        (rx_rings + (unsigned long)i)->next_to_clean = (unsigned short)0U;
        #line 2776 
        (rx_rings + (unsigned long)i)->next_to_alloc = (unsigned short)0U;
        #line 2777 
        *(*(vsi->rx_rings + (unsigned long)i)) = *(rx_rings + (unsigned long)i);
        #line 2765 
        i ++;
      }
      #line 2779 
      kfree((void *)rx_rings);
    }
    #line 2782 
    if (xdp_rings != (struct ice_ring *)0) {
      #line 2783 
      i = 0;
      #line 2783 
      while ((int)vsi->num_xdp_txq > i) {
        #line 2784 
        ice_free_tx_ring(*(vsi->xdp_rings + (unsigned long)i));
        #line 2785 
        *(*(vsi->xdp_rings + (unsigned long)i)) = *(xdp_rings + (unsigned long)i);
        #line 2783 
        i ++;
      }
      #line 2787 
      kfree((void *)xdp_rings);
    }
    #line 2790 
    vsi->num_tx_desc = (unsigned short)new_tx_cnt;
    #line 2791 
    vsi->num_rx_desc = (unsigned short)new_rx_cnt;
    #line 2792 
    ice_up(vsi);
  }
  #line 2794 
  goto done;
  #line 2796 
  free_tx: 
           #line 2796 
  ;
  #line 2798 
  if (tx_rings != (struct ice_ring *)0) {
    #line 2799 
    i = 0;
    #line 2799 
    while ((int)vsi->num_txq > i) {
      #line 2800 
      ice_free_tx_ring(tx_rings + (unsigned long)i);
      #line 2799 
      i ++;
    }
    #line 2801 
    kfree((void *)tx_rings);
  }
  #line 2804 
  done: 
        #line 2804 
  ;
  #line 2805 
  cif_clear_bit_7(21L,(unsigned long *)(& pf->state));
  #line 2806 
  return err;
}

#line 2809  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_ethtool.c"
static int ice_nway_reset(struct net_device *netdev)
{
  #line 2814 
  struct ice_port_info *pi;
  #line 2815 
  enum ice_status status;
  #line 2812 
  struct ice_netdev_priv *np = netdev_priv(netdev);
  #line 2813 
  struct ice_vsi *vsi = np->vsi;
  #line 2817 
  pi = vsi->port_info;
  #line 2819 
  if (test_bit(1L,(unsigned long *)(& (vsi->back)->state))) 
                                                            #line 2822 
                                                            status = ice_aq_set_link_restart_an(pi,(_Bool)0,(struct ice_sq_cd *)0); else 
                                                                    #line 2820 
                                                                    status = ice_aq_set_link_restart_an(pi,(_Bool)1,(struct ice_sq_cd *)0);
  #line 2824 
  if (status != ICE_SUCCESS) {
    #line 2825 
    netdev_info(netdev,(char *)"link restart failed, err %d aq_err %d\n",(int)status,(unsigned int)(pi->hw)->adminq.sq_last_status);
    #line 2827 
    return -5;
  }
  #line 2830 
  return 0;
}

#line 2844  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_ethtool.c"
static void ice_get_pauseparam(struct net_device *netdev, struct ethtool_pauseparam *pause)
{
  #line 2848 
  struct ice_aqc_get_phy_caps_data *pcaps;
  #line 2849 
  struct ice_dcbx_cfg *dcbx_cfg;
  #line 2850 
  enum ice_status status;
  #line 2846 
  struct ice_netdev_priv *np = netdev_priv(netdev);
  #line 2847 
  struct ice_port_info *pi = (np->vsi)->port_info;
  #line 2853 
  pause->rx_pause = 0U;
  #line 2854 
  pause->tx_pause = 0U;
  #line 2856 
  dcbx_cfg = & pi->local_dcbx_cfg;
  #line 2858 
  pcaps = (struct ice_aqc_get_phy_caps_data *)kzalloc_3(560UL,3264U);
  #line 2859 
  if (pcaps == (struct ice_aqc_get_phy_caps_data *)0) 
                                                      #line 2860 
                                                      return;
  #line 2863 
  status = ice_aq_get_phy_caps(pi,(_Bool)0,(unsigned char)4,pcaps,(struct ice_sq_cd *)0);
  #line 2865 
  if (status != ICE_SUCCESS) 
                             #line 2866 
                             goto out;
  #line 2868 
  pause->autoneg = (unsigned int)((unsigned long)pcaps->caps >> 4) & 1U;
  #line 2871 
  if ((unsigned int)dcbx_cfg->pfc.pfcena != 0U) 
                                                #line 2873 
                                                goto out;
  #line 2875 
  if (((unsigned long)pcaps->caps & 1UL) != 0UL) 
                                                 #line 2876 
                                                 pause->tx_pause = 1U;
  #line 2877 
  if (((unsigned long)pcaps->caps & 2UL) != 0UL) 
                                                 #line 2878 
                                                 pause->rx_pause = 1U;
  #line 2880 
  out: 
       #line 2880 
  ;
  #line 2881 
  kfree((void *)pcaps);
  #line 2882 
  return;
}

#line 2890  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_ethtool.c"
static int ice_set_pauseparam(struct net_device *netdev, struct ethtool_pauseparam *pause)
{
  #line 2893 
  struct ice_aqc_get_phy_caps_data *pcaps;
  #line 2894 
  struct ice_link_status *hw_link_info;
  #line 2896 
  struct ice_dcbx_cfg *dcbx_cfg;
  #line 2899 
  struct ice_port_info *pi;
  #line 2900 
  enum ice_status status;
  #line 2901 
  u8 aq_failures;
  #line 2902 
  bool link_up;
  #line 2904 
  u32 is_an;
  #line 2892 
  struct ice_netdev_priv *np = netdev_priv(netdev);
  #line 2895 
  struct ice_pf *pf = (np->vsi)->back;
  #line 2897 
  struct ice_vsi *vsi = np->vsi;
  #line 2898 
  struct ice_hw *hw = & pf->hw;
  #line 2903 
  int err = 0;
  #line 2906 
  pi = vsi->port_info;
  #line 2907 
  hw_link_info = & pi->phy.link_info;
  #line 2908 
  dcbx_cfg = & pi->local_dcbx_cfg;
  #line 2909 
  link_up = (_Bool)(((unsigned long)hw_link_info->link_info & 1UL) != 0UL);
  #line 2914 
  if (vsi->type != (unsigned int)ICE_VSI_PF) {
    #line 2915 
    netdev_info(netdev,(char *)"Changing flow control parameters only supported for PF VSI\n");
    #line 2916 
    return -95;
  }
  #line 2925 
  pcaps = (struct ice_aqc_get_phy_caps_data *)kzalloc_3(560UL,3264U);
  #line 2926 
  if (pcaps == (struct ice_aqc_get_phy_caps_data *)0) 
                                                      #line 2927 
                                                      return -12;
  #line 2930 
  status = ice_aq_get_phy_caps(pi,(_Bool)0,(unsigned char)4,pcaps,(struct ice_sq_cd *)0);
  #line 2932 
  if (status != ICE_SUCCESS) {
    #line 2933 
    kfree((void *)pcaps);
    #line 2934 
    return -5;
  }
  #line 2937 
  is_an = (unsigned int)((unsigned long)pcaps->caps >> 4) & 1U;
  #line 2940 
  kfree((void *)pcaps);
  #line 2942 
  if (pause->autoneg != is_an) {
    #line 2943 
    netdev_info(netdev,(char *)"To change autoneg please use: ethtool -s <dev> autoneg <on|off>\n");
    #line 2944 
    return -95;
  }
  #line 2948 
  if (! test_bit(1L,(unsigned long *)(& pf->state))) 
    #line 2948 
    if (((unsigned long)hw_link_info->an_info & 1UL) == 0UL) 
                                                             #line 2951 
                                                             netdev_info(netdev,(char *)"Autoneg did not complete so changing settings may not result in an actual change.\n");
  #line 2954 
  if ((unsigned int)dcbx_cfg->pfc.pfcena != 0U) {
    #line 2955 
    netdev_info(netdev,(char *)"Priority flow control enabled. Cannot set link flow control.\n");
    #line 2956 
    return -95;
  }
  #line 2958 
  if (pause->rx_pause != 0U && pause->tx_pause != 0U) 
                                                      #line 2959 
                                                      pi->fc.req_mode = ICE_FC_FULL;
  else 
    #line 2960 
    if (pause->rx_pause != 0U && pause->tx_pause == 0U) 
                                                        #line 2961 
                                                        pi->fc.req_mode = ICE_FC_RX_PAUSE;
    else 
      #line 2962 
      if (pause->rx_pause == 0U && pause->tx_pause != 0U) 
                                                          #line 2963 
                                                          pi->fc.req_mode = ICE_FC_TX_PAUSE;
      else 
        #line 2964 
        if (pause->rx_pause == 0U && pause->tx_pause == 0U) 
                                                            #line 2965 
                                                            pi->fc.req_mode = ICE_FC_NONE; else 
                                                                    #line 2967 
                                                                    return -22;
  #line 2972 
  ice_print_link_msg(vsi,(_Bool)0);
  #line 2973 
  netif_carrier_off(netdev);
  #line 2974 
  netif_tx_stop_all_queues(netdev);
  #line 2977 
  status = ice_set_fc(pi,& aq_failures,(_Bool)((bool)((int)link_up) != 0));
  #line 2979 
  if (((int)aq_failures & 1) != 0) {
    #line 2980 
    netdev_info(netdev,(char *)"Set fc failed on the get_phy_capabilities call with err %d aq_err %d\n",(int)status,(unsigned int)hw->adminq.sq_last_status);
    #line 2982 
    err = -11;
  }
  else 
    #line 2983 
    if (((int)aq_failures & 2) != 0) {
      #line 2984 
      netdev_info(netdev,(char *)"Set fc failed on the set_phy_config call with err %d aq_err %d\n",(int)status,(unsigned int)hw->adminq.sq_last_status);
      #line 2986 
      err = -11;
    }
    else 
      #line 2987 
      if (((int)aq_failures & 3) != 0) {
        #line 2988 
        netdev_info(netdev,(char *)"Set fc failed on the get_link_info call with err %d aq_err %d\n",(int)status,(unsigned int)hw->adminq.sq_last_status);
        #line 2990 
        err = -11;
      }
  #line 2993 
  if (! test_bit(1L,(unsigned long *)(& pf->state))) {
    #line 2997 
    msleep(75U);
    #line 2998 
    if (! test_bit(1L,(unsigned long *)(& pf->state))) {
      #line 2999 
      return ice_nway_reset(netdev);
    }
    #line 3001 
    ice_down(vsi);
    #line 3002 
    ice_up(vsi);
  }
  #line 3005 
  return err;
}

#line 3014  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_ethtool.c"
static u32 ice_get_rxfh_key_size(struct net_device *netdev)
{
  #line 3016 
  return 52U;
}

#line 3025  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_ethtool.c"
static u32 ice_get_rxfh_indir_size(struct net_device *netdev)
{
  #line 3027 
  struct ice_netdev_priv *np = netdev_priv(netdev);
  #line 3029 
  return (unsigned int)(np->vsi)->rss_table_size;
}

#line 3042  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_ethtool.c"
static int ice_get_rxfh(struct net_device *netdev, u32 *indir, u8 *key, u8 *hfunc)
{
  #line 3047 
  int i;
  #line 3048 
  u8 *lut;
  #line 3044 
  struct ice_netdev_priv *np = netdev_priv(netdev);
  #line 3045 
  struct ice_vsi *vsi = np->vsi;
  #line 3046 
  struct ice_pf *pf = vsi->back;
  #line 3047 
  int ret = 0;
  #line 3050 
  if (hfunc != (u8 *)0U) 
                         #line 3051 
                         *hfunc = (unsigned char)1U;
  #line 3053 
  if (indir == (u32 *)0U) 
                          #line 3054 
                          return 0;
  #line 3056 
  if (! test_bit(1L,(unsigned long *)(& pf->flags))) {
    #line 3058 
    netdev_warn(netdev,(char *)"RSS is not configured on this VSI!\n");
    #line 3059 
    return -5;
  }
  #line 3062 
  lut = (u8 *)kzalloc_3((unsigned long)vsi->rss_table_size,3264U);
  #line 3063 
  if (lut == (u8 *)0U) 
                       #line 3064 
                       return -12;
  #line 3066 
  if (ice_get_rss(vsi,key,lut,(unsigned short)((int)vsi->rss_table_size)) != 0) {
    #line 3067 
    ret = -5;
    #line 3068 
    goto out;
  }
  #line 3071 
  i = 0;
  #line 3071 
  while ((int)vsi->rss_table_size > i) {
    #line 3072 
    *(indir + (unsigned long)i) = (unsigned int)*(lut + (unsigned long)i);
    #line 3071 
    i ++;
  }
  #line 3074 
  out: 
       #line 3074 
  ;
  #line 3075 
  kfree((void *)lut);
  #line 3076 
  return ret;
}

#line 3090  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_ethtool.c"
static int ice_set_rxfh(struct net_device *netdev, u32 *indir, u8 *key, u8 hfunc)
{
  #line 3096 
  struct device *dev;
  #line 3093 
  struct ice_netdev_priv *np = netdev_priv(netdev);
  #line 3094 
  struct ice_vsi *vsi = np->vsi;
  #line 3095 
  struct ice_pf *pf = vsi->back;
  #line 3097 
  u8 *seed = (u8 *)0U;
  #line 3099 
  dev = & (pf->pdev)->dev;
  #line 3100 
  if ((unsigned int)hfunc > 1U) 
                                #line 3101 
                                return -95;
  #line 3103 
  if (! test_bit(1L,(unsigned long *)(& pf->flags))) {
    #line 3105 
    netdev_warn(netdev,(char *)"RSS is not configured on this VSI!\n");
    #line 3106 
    return -5;
  }
  #line 3109 
  if (key != (u8 *)0U) {
    #line 3110 
    if (vsi->rss_hkey_user == (u8 *)0U) {
      #line 3112 
      vsi->rss_hkey_user = (u8 *)cif_devm_kzalloc_5(dev,52UL,3264U);
      #line 3114 
      if (vsi->rss_hkey_user == (u8 *)0U) 
                                          #line 3115 
                                          return -12;
    }
    #line 3117 
    memcpy((void *)vsi->rss_hkey_user,(void *)key,52UL);
    #line 3118 
    seed = vsi->rss_hkey_user;
  }
  #line 3121 
  if (vsi->rss_lut_user == (u8 *)0U) {
    #line 3122 
    vsi->rss_lut_user = (u8 *)cif_devm_kzalloc_5(dev,(unsigned long)vsi->rss_table_size,3264U);
    #line 3124 
    if (vsi->rss_lut_user == (u8 *)0U) 
                                       #line 3125 
                                       return -12;
  }
  #line 3129 
  if (indir != (u32 *)0U) {
    #line 3130 
    int i;
    #line 3132 
    i = 0;
    #line 3132 
    while ((int)vsi->rss_table_size > i) {
      #line 3133 
      *(vsi->rss_lut_user + (unsigned long)i) = (unsigned char)*(indir + (unsigned long)i);
      #line 3132 
      i ++;
    }
  }
  else 
       #line 3135 
       ice_fill_rss_lut(vsi->rss_lut_user,(unsigned short)((int)vsi->rss_table_size),(unsigned short)((int)vsi->rss_size));
  #line 3139 
  if (ice_set_rss(vsi,seed,vsi->rss_lut_user,
                    (unsigned short)((int)vsi->rss_table_size)) != 0) 
    #line 3140 
    return -5;
  #line 3142 
  return 0;
}

#line 3149  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_ethtool.c"
static int ice_get_max_txq(struct ice_pf *pf)
{
  #line 3151 
  int __UNIQUE_ID___x544;
  #line 3151 
  int tmp_0;
  {
    #line 3151 
    __UNIQUE_ID___x544 = (int)num_online_cpus_1();
    #line 3151 
    int __UNIQUE_ID___y545 = (int)pf->hw.func_caps.common_cap.num_txq;
    #line 3151 
    if (__UNIQUE_ID___x544 < __UNIQUE_ID___y545) 
                                                 #line 3151 
                                                 tmp_0 = __UNIQUE_ID___x544; else 
                                                                    #line 3151 
                                                                    tmp_0 = __UNIQUE_ID___y545;
    }
  #line 3151 
  return tmp_0;
}

#line 3159  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_ethtool.c"
static int ice_get_max_rxq(struct ice_pf *pf)
{
  #line 3161 
  int __UNIQUE_ID___x546;
  #line 3161 
  int tmp_0;
  {
    #line 3161 
    __UNIQUE_ID___x546 = (int)num_online_cpus_1();
    #line 3161 
    int __UNIQUE_ID___y547 = (int)pf->hw.func_caps.common_cap.num_rxq;
    #line 3161 
    if (__UNIQUE_ID___x546 < __UNIQUE_ID___y547) 
                                                 #line 3161 
                                                 tmp_0 = __UNIQUE_ID___x546; else 
                                                                    #line 3161 
                                                                    tmp_0 = __UNIQUE_ID___y547;
    }
  #line 3161 
  return tmp_0;
}

#line 3172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_ethtool.c"
static u32 ice_get_combined_cnt(struct ice_vsi *vsi)
{
  #line 3175 
  int q_idx;
  #line 3174 
  u32 combined = 0U;
  #line 3177 
  q_idx = 0;
  #line 3177 
  while (vsi->num_q_vectors > q_idx) {
    {
      #line 3178 
      struct ice_q_vector *q_vector = *(vsi->q_vectors + (unsigned long)q_idx);
      #line 3180 
      if (q_vector->rx.ring != (struct ice_ring *)0 && q_vector->tx.ring != (struct ice_ring *)0) 
        #line 3181 
        combined ++;
    }
    #line 3177 
    q_idx ++;
  }
  #line 3184 
  return combined;
}

#line 3193  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_ethtool.c"
static void ice_get_channels(struct net_device *dev, struct ethtool_channels *ch)
{
  #line 3206 
  int __UNIQUE_ID___x548;
  #line 3206 
  int tmp_3;
  #line 3195 
  struct ice_netdev_priv *np = netdev_priv(dev);
  #line 3196 
  struct ice_vsi *vsi = np->vsi;
  #line 3197 
  struct ice_pf *pf = vsi->back;
  #line 3200 
  if ((int)test_bit(1L,(unsigned long *)(& vsi->state)) != 0) 
                                                              #line 3201 
                                                              return;
  #line 3204 
  ch->max_rx = (unsigned int)ice_get_max_rxq(pf);
  #line 3205 
  ch->max_tx = (unsigned int)ice_get_max_txq(pf);
  {
    #line 3206 
    __UNIQUE_ID___x548 = (int)ch->max_rx;
    #line 3206 
    int __UNIQUE_ID___y549 = (int)ch->max_tx;
    #line 3206 
    if (__UNIQUE_ID___x548 < __UNIQUE_ID___y549) 
                                                 #line 3206 
                                                 tmp_3 = __UNIQUE_ID___x548; else 
                                                                    #line 3206 
                                                                    tmp_3 = __UNIQUE_ID___y549;
    }
  #line 3206 
  ch->max_combined = (unsigned int)tmp_3;
  #line 3209 
  ch->combined_count = ice_get_combined_cnt(vsi);
  #line 3210 
  ch->rx_count = (unsigned int)vsi->num_rxq - ch->combined_count;
  #line 3211 
  ch->tx_count = (unsigned int)vsi->num_txq - ch->combined_count;
  #line 3212 
  return;
}

#line 3221  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_ethtool.c"
static int ice_vsi_set_dflt_rss_lut(struct ice_vsi *vsi, int req_rss_size)
{
  #line 3224 
  enum ice_status status;
  #line 3225 
  struct device *dev;
  #line 3226 
  struct ice_hw *hw;
  #line 3228 
  u8 *lut;
  #line 3223 
  struct ice_pf *pf = vsi->back;
  #line 3227 
  int err = 0;
  #line 3230 
  dev = & (pf->pdev)->dev;
  #line 3231 
  hw = & pf->hw;
  #line 3233 
  if (req_rss_size == 0) 
                         #line 3234 
                         return -22;
  #line 3236 
  lut = (u8 *)kzalloc_3((unsigned long)vsi->rss_table_size,3264U);
  #line 3237 
  if (lut == (u8 *)0U) 
                       #line 3238 
                       return -12;
  #line 3241 
  if (test_bit(1L,(unsigned long *)(& pf->flags))) {
    #line 3246 
    int __UNIQUE_ID___x550;
    #line 3246 
    int tmp_0;
    #line 3244 
    struct ice_hw_common_caps *caps = & hw->func_caps.common_cap;
    {
      #line 3246 
      __UNIQUE_ID___x550 = req_rss_size;
      #line 3246 
      int __UNIQUE_ID___y551 = (int)(1UL << (int)caps->rss_table_entry_width);
      #line 3246 
      if (__UNIQUE_ID___x550 < __UNIQUE_ID___y551) 
                                                   #line 3246 
                                                   tmp_0 = __UNIQUE_ID___x550; else 
                                                                    #line 3246 
                                                                    tmp_0 = __UNIQUE_ID___y551;
      }
    #line 3246 
    vsi->rss_size = (unsigned short)tmp_0;
  }
  else 
       #line 3242 
       vsi->rss_size = (unsigned short)1U;
  #line 3251 
  ice_fill_rss_lut(lut,(unsigned short)((int)vsi->rss_table_size),(unsigned short)((int)vsi->rss_size));
  #line 3252 
  status = ice_aq_set_rss_lut(hw,(unsigned short)((int)vsi->idx),(unsigned char)((int)vsi->rss_lut_type),lut,(unsigned short)((int)vsi->rss_table_size));
  #line 3254 
  if (status != ICE_SUCCESS) {
    #line 3255 
    _dev_err(dev,(char *)"Cannot set RSS lut, err %d aq_err %d\n",(int)status,(unsigned int)hw->adminq.rq_last_status);
    #line 3257 
    err = -5;
  }
  #line 3260 
  kfree((void *)lut);
  #line 3261 
  return err;
}

#line 3269  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_ethtool.c"
static int ice_set_channels(struct net_device *dev, struct ethtool_channels *ch)
{
  #line 3275 
  u32 curr_combined;
  #line 3271 
  struct ice_netdev_priv *np = netdev_priv(dev);
  #line 3272 
  struct ice_vsi *vsi = np->vsi;
  #line 3273 
  struct ice_pf *pf = vsi->back;
  #line 3274 
  int new_rx = 0;
  #line 3274 
  int new_tx = 0;
  #line 3278 
  if ((int)ice_is_safe_mode(pf) != 0) {
    #line 3279 
    netdev_err(dev,(char *)"Changing channel in Safe Mode is not supported\n");
    #line 3280 
    return -95;
  }
  #line 3283 
  if (ch->other_count != 0U) 
                             #line 3284 
                             return -22;
  #line 3286 
  curr_combined = ice_get_combined_cnt(vsi);
  #line 3293 
  if (ch->rx_count == (unsigned int)vsi->num_rxq - curr_combined) 
                                                                  #line 3294 
                                                                  ch->rx_count = 0U;
  #line 3295 
  if (ch->tx_count == (unsigned int)vsi->num_txq - curr_combined) 
                                                                  #line 3296 
                                                                  ch->tx_count = 0U;
  #line 3297 
  if (ch->combined_count == curr_combined) 
                                           #line 3298 
                                           ch->combined_count = 0U;
  #line 3300 
  if (ch->combined_count == 0U && (ch->rx_count == 0U || ch->tx_count == 0U)) {
    #line 3301 
    netdev_err(dev,(char *)"Please specify at least 1 Rx and 1 Tx channel\n");
    #line 3302 
    return -22;
  }
  #line 3305 
  new_rx = (int)(ch->combined_count + ch->rx_count);
  #line 3306 
  new_tx = (int)(ch->combined_count + ch->tx_count);
  #line 3308 
  ;
  #line 3308 
  if (ice_get_max_rxq(pf) < new_rx) {
    #line 3309 
    ;
    #line 3309 
    netdev_err(dev,(char *)"Maximum allowed Rx channels is %d\n",ice_get_max_rxq(pf));
    #line 3311 
    return -22;
  }
  #line 3313 
  ;
  #line 3313 
  if (ice_get_max_txq(pf) < new_tx) {
    #line 3314 
    ;
    #line 3314 
    netdev_err(dev,(char *)"Maximum allowed Tx channels is %d\n",ice_get_max_txq(pf));
    #line 3316 
    return -22;
  }
  #line 3319 
  ice_vsi_recfg_qs(vsi,new_rx,new_tx);
  #line 3321 
  if (new_rx != 0) {
    #line 3321 
    if (! netif_is_rxfh_configured(dev)) {
      #line 3322 
      return ice_vsi_set_dflt_rss_lut(vsi,new_rx);
    }
  }
  #line 3324 
  return 0;
}

#line 3345  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_ethtool.c"
static int ice_get_rc_coalesce(struct ethtool_coalesce *ec, enum ice_container_type c_type, struct ice_ring_container *rc)
{
  #line 3348 
  struct ice_pf *pf;
  #line 3350 
  if (rc->ring == (struct ice_ring *)0) 
                                        #line 3351 
                                        return -22;
  #line 3353 
  pf = ((rc->ring)->vsi)->back;
  #line 3355 
  switch ((unsigned int)c_type) {
    #line 3356 
    case (unsigned int)0: 
                          #line 3356 
    ;
    #line 3357 
    ec->use_adaptive_rx_coalesce = (unsigned int)(((int)rc->itr_setting & 32768) != 0);
    #line 3358 
    ec->rx_coalesce_usecs = (unsigned int)rc->itr_setting & 4294934527U;
    #line 3359 
    ec->rx_coalesce_usecs_high = (unsigned int)((rc->ring)->q_vector)->intrl;
    #line 3360 
    break;
    #line 3361 
    case (unsigned int)1: 
                          #line 3361 
    ;
    #line 3362 
    ec->use_adaptive_tx_coalesce = (unsigned int)(((int)rc->itr_setting & 32768) != 0);
    #line 3363 
    ec->tx_coalesce_usecs = (unsigned int)rc->itr_setting & 4294934527U;
    #line 3364 
    break;
    #line 3365 
    default: 
             #line 3365 
    ;
    {
      #line 3366 
      bool branch;
      #line 3366 
      struct _ddebug __UNIQUE_ID_ddebug552 = {.modname = (char *)"ice", .function = (char *)"ice_get_rc_coalesce", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_ethtool.c", .format = (char *)"Invalid c_type %d\n", .lineno = (unsigned int)3366U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 3366 
      branch = arch_static_branch(& __UNIQUE_ID_ddebug552.key.dd_key_false.key,(_Bool)0);
      #line 3366 
      if ((long)((long)((int)branch != 0)) != 0L) 
                                                  #line 3366 
                                                  __dynamic_dev_dbg(& __UNIQUE_ID_ddebug552,& (pf->pdev)->dev,(char *)"Invalid c_type %d\n",(unsigned int)c_type);
    }
    #line 3367 
    return -22;
  }
  #line 3370 
  return 0;
}

#line 3384  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_ethtool.c"
static int ice_get_q_coalesce(struct ice_vsi *vsi, struct ethtool_coalesce *ec, int q_num)
{
  #line 3386 
  if ((int)vsi->num_rxq > q_num && (int)vsi->num_txq > q_num) {
    #line 3387 
    if (ice_get_rc_coalesce(ec,(enum ice_container_type)ICE_RX_CONTAINER,
                          & ((*(vsi->rx_rings + (unsigned long)q_num))->q_vector)->rx) != 0) 
      #line 3389 
      return -22;
    #line 3390 
    if (ice_get_rc_coalesce(ec,(enum ice_container_type)ICE_TX_CONTAINER,
                            & ((*(vsi->tx_rings + (unsigned long)q_num))->q_vector)->tx) != 0) 
      #line 3392 
      return -22;
  }
  else 
    #line 3393 
    if ((int)vsi->num_rxq > q_num) {
      #line 3394 
      if (ice_get_rc_coalesce(ec,(enum ice_container_type)ICE_RX_CONTAINER,
                            & ((*(vsi->rx_rings + (unsigned long)q_num))->q_vector)->rx) != 0) 
        #line 3396 
        return -22;
    }
    else 
      #line 3397 
      if ((int)vsi->num_txq > q_num) {
        #line 3398 
        if (ice_get_rc_coalesce(ec,(enum ice_container_type)ICE_TX_CONTAINER,
                            & ((*(vsi->tx_rings + (unsigned long)q_num))->q_vector)->tx) != 0) 
          #line 3400 
          return -22;
      }
      else 
           #line 3402 
           return -22;
  #line 3405 
  return 0;
}

#line 3418  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_ethtool.c"
static int __ice_get_coalesce(struct net_device *netdev, struct ethtool_coalesce *ec, int q_num)
{
  #line 3421 
  struct ice_netdev_priv *np = netdev_priv(netdev);
  #line 3422 
  struct ice_vsi *vsi = np->vsi;
  #line 3424 
  if (q_num < 0) 
                 #line 3425 
                 q_num = 0;
  #line 3427 
  if (ice_get_q_coalesce(vsi,ec,q_num) != 0) 
                                             #line 3428 
                                             return -22;
  #line 3430 
  return 0;
}

#line 3434  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_ethtool.c"
static int ice_get_coalesce(struct net_device *netdev, struct ethtool_coalesce *ec)
{
  #line 3436 
  return __ice_get_coalesce(netdev,ec,-1);
}

#line 3440  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_ethtool.c"
static int ice_get_per_q_coalesce(struct net_device *netdev, u32 q_num, struct ethtool_coalesce *ec)
{
  #line 3443 
  return __ice_get_coalesce(netdev,ec,(int)q_num);
}

#line 3460  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_ethtool.c"
static int ice_set_rc_coalesce(enum ice_container_type c_type, struct ethtool_coalesce *ec, struct ice_ring_container *rc, struct ice_vsi *vsi)
{
  #line 3463 
  char const *tmp;
  #line 3464 
  u32 use_adaptive_coalesce;
  #line 3464 
  u32 coalesce_usecs;
  #line 3466 
  u16 itr_setting;
  #line 3463 
  if (c_type == (unsigned int)ICE_RX_CONTAINER) 
                                                #line 3463 
                                                tmp = "rx"; else 
                                                                 #line 3463 
                                                                 tmp = "tx";
  #line 3463 
  char *c_type_str = (char *)tmp;
  #line 3465 
  struct ice_pf *pf = vsi->back;
  #line 3468 
  if (rc->ring == (struct ice_ring *)0) 
                                        #line 3469 
                                        return -22;
  #line 3471 
  switch ((unsigned int)c_type) {
    #line 3472 
    case (unsigned int)0: 
                          #line 3472 
    ;
    #line 3473 
    if (ec->rx_coalesce_usecs_high > 236U || ec->rx_coalesce_usecs_high != 0U && ec->rx_coalesce_usecs_high < (unsigned int)pf->hw.intrl_gran) {
      #line 3476 
      netdev_info(vsi->netdev,(char *)"Invalid value, %s-usecs-high valid values are 0 (disabled), %d-%d\n",c_type_str,(int)pf->hw.intrl_gran,236);
      #line 3480 
      return -22;
    }
    #line 3482 
    if (ec->rx_coalesce_usecs_high != (unsigned int)((rc->ring)->q_vector)->intrl) {
      #line 3483 
      ((rc->ring)->q_vector)->intrl = (unsigned char)ec->rx_coalesce_usecs_high;
      #line 3484 
      ;
      #line 3484 
      writel(ice_intrl_usec_to_reg((unsigned char)((int)((unsigned char)ec->rx_coalesce_usecs_high)),
                              (unsigned char)((int)pf->hw.intrl_gran)),(void *)(pf->hw.hw_addr + (unsigned long)(((int)((rc->ring)->q_vector)->reg_idx + 354304) * 4)));
    }
    #line 3489 
    use_adaptive_coalesce = ec->use_adaptive_rx_coalesce;
    #line 3490 
    coalesce_usecs = ec->rx_coalesce_usecs;
    #line 3492 
    break;
    #line 3493 
    case (unsigned int)1: 
                          #line 3493 
    ;
    #line 3494 
    if (ec->tx_coalesce_usecs_high != 0U) {
      #line 3495 
      netdev_info(vsi->netdev,(char *)"setting %s-usecs-high is not supported\n",c_type_str);
      #line 3498 
      return -22;
    }
    #line 3501 
    use_adaptive_coalesce = ec->use_adaptive_tx_coalesce;
    #line 3502 
    coalesce_usecs = ec->tx_coalesce_usecs;
    #line 3504 
    break;
    #line 3505 
    default: 
             #line 3505 
    ;
    {
      #line 3506 
      bool branch;
      #line 3506 
      struct _ddebug __UNIQUE_ID_ddebug553 = {.modname = (char *)"ice", .function = (char *)"ice_set_rc_coalesce", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_ethtool.c", .format = (char *)"Invalid container type %d\n", .lineno = (unsigned int)3506U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 3506 
      branch = arch_static_branch(& __UNIQUE_ID_ddebug553.key.dd_key_false.key,(_Bool)0);
      #line 3506 
      if ((long)((long)((int)branch != 0)) != 0L) 
                                                  #line 3506 
                                                  __dynamic_dev_dbg(& __UNIQUE_ID_ddebug553,& (pf->pdev)->dev,(char *)"Invalid container type %d\n",(unsigned int)c_type);
    }
    #line 3508 
    return -22;
  }
  #line 3511 
  itr_setting = (unsigned short)((unsigned int)rc->itr_setting & 32767U);
  #line 3512 
  if ((unsigned int)itr_setting != coalesce_usecs && use_adaptive_coalesce != 0U) {
    #line 3513 
    netdev_info(vsi->netdev,(char *)"%s interrupt throttling cannot be changed if adaptive-%s is enabled\n",c_type_str,c_type_str);
    #line 3516 
    return -22;
  }
  #line 3519 
  if (coalesce_usecs > 8160U) {
    #line 3520 
    netdev_info(vsi->netdev,(char *)"Invalid value, %s-usecs range is 0-%d\n",c_type_str,8160);
    #line 3523 
    return -22;
  }
  #line 3527 
  if ((coalesce_usecs & 1U) != 0U) {
    #line 3528 
    netdev_info(vsi->netdev,(char *)"Invalid value, %s-usecs must be even\n",c_type_str);
    #line 3531 
    return -22;
  }
  #line 3534 
  if (use_adaptive_coalesce != 0U) 
                                   #line 3535 
                                   rc->itr_setting = (unsigned short)((unsigned int)rc->itr_setting | 32768U);
  else {
    #line 3538 
    rc->itr_setting = (unsigned short)coalesce_usecs;
    #line 3540 
    rc->target_itr = (unsigned short)((unsigned int)((unsigned short)((unsigned int)rc->itr_setting + 57345U)) & 8190U);
  }
  #line 3544 
  return 0;
}

#line 3558  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_ethtool.c"
static int ice_set_q_coalesce(struct ice_vsi *vsi, struct ethtool_coalesce *ec, int q_num)
{
  #line 3560 
  if ((int)vsi->num_rxq > q_num && (int)vsi->num_txq > q_num) {
    #line 3561 
    if (ice_set_rc_coalesce((enum ice_container_type)ICE_RX_CONTAINER,ec,
                          & ((*(vsi->rx_rings + (unsigned long)q_num))->q_vector)->rx,
                          vsi) != 0) 
      #line 3564 
      return -22;
    #line 3566 
    if (ice_set_rc_coalesce((enum ice_container_type)ICE_TX_CONTAINER,ec,
                            & ((*(vsi->tx_rings + (unsigned long)q_num))->q_vector)->tx,
                            vsi) != 0) 
      #line 3569 
      return -22;
  }
  else 
    #line 3570 
    if ((int)vsi->num_rxq > q_num) {
      #line 3571 
      if (ice_set_rc_coalesce((enum ice_container_type)ICE_RX_CONTAINER,ec,
                            & ((*(vsi->rx_rings + (unsigned long)q_num))->q_vector)->rx,
                            vsi) != 0) 
        #line 3574 
        return -22;
    }
    else 
      #line 3575 
      if ((int)vsi->num_txq > q_num) {
        #line 3576 
        if (ice_set_rc_coalesce((enum ice_container_type)ICE_TX_CONTAINER,ec,
                            & ((*(vsi->tx_rings + (unsigned long)q_num))->q_vector)->tx,
                            vsi) != 0) 
          #line 3579 
          return -22;
      }
      else 
           #line 3581 
           return -22;
  #line 3584 
  return 0;
}

#line 3597  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_ethtool.c"
static int __ice_set_coalesce(struct net_device *netdev, struct ethtool_coalesce *ec, int q_num)
{
  #line 3600 
  struct ice_netdev_priv *np = netdev_priv(netdev);
  #line 3601 
  struct ice_vsi *vsi = np->vsi;
  #line 3603 
  if (q_num < 0) {
    #line 3604 
    int v_idx;
    #line 3606 
    v_idx = 0;
    #line 3606 
    while (vsi->num_q_vectors > v_idx) {
      {
        #line 3611 
        if ((int)vsi->num_rxq <= v_idx && (int)vsi->num_txq <= v_idx) 
          #line 3612 
          goto set_complete;
        #line 3614 
        if (ice_set_q_coalesce(vsi,ec,v_idx) != 0) 
                                                   #line 3615 
                                                   return -22;
      }
      #line 3606 
      v_idx ++;
    }
    #line 3617 
    goto set_complete;
  }
  #line 3620 
  if (ice_set_q_coalesce(vsi,ec,q_num) != 0) 
                                             #line 3621 
                                             return -22;
  #line 3623 
  set_complete: 
                #line 3623 
  ;
  #line 3625 
  return 0;
}

#line 3629  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_ethtool.c"
static int ice_set_coalesce(struct net_device *netdev, struct ethtool_coalesce *ec)
{
  #line 3631 
  return __ice_set_coalesce(netdev,ec,-1);
}

#line 3635  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_ethtool.c"
static int ice_set_per_q_coalesce(struct net_device *netdev, u32 q_num, struct ethtool_coalesce *ec)
{
  #line 3638 
  return __ice_set_coalesce(netdev,ec,(int)q_num);
}

#line 3659  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_ethtool.c"
static int ice_get_module_info(struct net_device *netdev, struct ethtool_modinfo *modinfo)
{
  #line 3666 
  enum ice_status status;
  #line 3662 
  struct ice_netdev_priv *np = netdev_priv(netdev);
  #line 3663 
  struct ice_vsi *vsi = np->vsi;
  #line 3664 
  struct ice_pf *pf = vsi->back;
  #line 3665 
  struct ice_hw *hw = & pf->hw;
  #line 3667 
  u8 sff8472_comp = (unsigned char)0U;
  #line 3668 
  u8 sff8472_swap = (unsigned char)0U;
  #line 3669 
  u8 sff8636_rev = (unsigned char)0U;
  #line 3670 
  u8 value = (unsigned char)0U;
  #line 3672 
  status = ice_aq_sff_eeprom(hw,(unsigned short)0,(unsigned char)160,(unsigned short)0,(unsigned char)0,(unsigned char)0,& value,(unsigned char)1,(_Bool)0,(struct ice_sq_cd *)0);
  #line 3674 
  if (status != ICE_SUCCESS) 
                             #line 3675 
                             return -5;
  #line 3677 
  switch ((int)value) {
    #line 3678 
    case 3: 
            #line 3678 
    ;
    #line 3679 
    status = ice_aq_sff_eeprom(hw,(unsigned short)0,(unsigned char)160,(unsigned short)94,(unsigned char)0,(unsigned char)0,& sff8472_comp,(unsigned char)1,(_Bool)0,(struct ice_sq_cd *)0);
    #line 3682 
    if (status != ICE_SUCCESS) 
                               #line 3683 
                               return -5;
    #line 3684 
    status = ice_aq_sff_eeprom(hw,(unsigned short)0,(unsigned char)160,(unsigned short)92,(unsigned char)0,(unsigned char)0,& sff8472_swap,(unsigned char)1,(_Bool)0,(struct ice_sq_cd *)0);
    #line 3687 
    if (status != ICE_SUCCESS) 
                               #line 3688 
                               return -5;
    #line 3690 
    if (((int)sff8472_swap & 4) != 0) {
      #line 3691 
      modinfo->type = 1U;
      #line 3692 
      modinfo->eeprom_len = 256U;
    }
    else 
      #line 3693 
      if ((unsigned int)sff8472_comp != 0U && ((int)sff8472_swap & 64) != 0) {
        #line 3695 
        modinfo->type = 2U;
        #line 3696 
        modinfo->eeprom_len = 512U;
      }
      else {
        #line 3698 
        modinfo->type = 1U;
        #line 3699 
        modinfo->eeprom_len = 256U;
      }
    #line 3701 
    break;
    #line 3702 
    case 13: 
             #line 3702 
    ;
    #line 3703 
    case 17: 
             #line 3703 
    ;
    #line 3704 
    status = ice_aq_sff_eeprom(hw,(unsigned short)0,(unsigned char)160,(unsigned short)1,(unsigned char)0,(unsigned char)0,& sff8636_rev,(unsigned char)1,(_Bool)0,(struct ice_sq_cd *)0);
    #line 3707 
    if (status != ICE_SUCCESS) 
                               #line 3708 
                               return -5;
    #line 3710 
    if ((unsigned int)sff8636_rev > 2U) {
      #line 3712 
      modinfo->type = 3U;
      #line 3713 
      modinfo->eeprom_len = 640U;
    }
    else {
      #line 3715 
      modinfo->type = 4U;
      #line 3716 
      modinfo->eeprom_len = 640U;
    }
    #line 3718 
    break;
    #line 3719 
    default: 
             #line 3719 
    ;
    #line 3720 
    netdev_warn(netdev,(char *)"SFF Module Type not recognized.\n");
    #line 3722 
    return -22;
  }
  #line 3724 
  return 0;
}

#line 3734  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_ethtool.c"
static int ice_get_module_eeprom(struct net_device *netdev, struct ethtool_eeprom *ee, u8 *data)
{
  #line 3742 
  enum ice_status status;
  #line 3747 
  int i;
  #line 3737 
  struct ice_netdev_priv *np = netdev_priv(netdev);
  #line 3738 
  u8 addr = (unsigned char)160U;
  #line 3739 
  struct ice_vsi *vsi = np->vsi;
  #line 3740 
  struct ice_pf *pf = vsi->back;
  #line 3741 
  struct ice_hw *hw = & pf->hw;
  #line 3743 
  bool is_sfp = (_Bool)0;
  #line 3744 
  u16 offset = (unsigned short)0U;
  #line 3745 
  u8 value = (unsigned char)0U;
  #line 3746 
  u8 page = (unsigned char)0U;
  #line 3749 
  status = ice_aq_sff_eeprom(hw,(unsigned short)0,(unsigned char)((int)addr),(unsigned short)((int)offset),(unsigned char)((int)page),(unsigned char)0,& value,(unsigned char)1,(_Bool)0,(struct ice_sq_cd *)0);
  #line 3751 
  if (status != ICE_SUCCESS) 
                             #line 3752 
                             return -5;
  #line 3754 
  if ((ee == (struct ethtool_eeprom *)0 || ee->len == 0U) || data == (u8 *)0U) 
    #line 3755 
    return -22;
  #line 3757 
  if ((unsigned int)value == 3U) 
                                 #line 3758 
                                 is_sfp = (_Bool)1;
  #line 3760 
  i = 0;
  #line 3760 
  while (ee->len > (unsigned int)i) {
    #line 3761 
    offset = (unsigned short)((int)((unsigned short)ee->offset) + (int)((unsigned short)i));
    #line 3764 
    if ((int)is_sfp != 0) {
      #line 3765 
      if ((unsigned int)offset > 255U) {
        #line 3766 
        offset = (unsigned short)((unsigned int)offset + 65280U);
        #line 3767 
        addr = (unsigned char)162U;
      }
    }
    else 
      #line 3770 
      while ((unsigned int)offset > 255U) {
        #line 3772 
        offset = (unsigned short)((unsigned int)offset + 65408U);
        #line 3773 
        page = (u8)((int)page + 1);
      }
    #line 3777 
    status = ice_aq_sff_eeprom(hw,(unsigned short)0,(unsigned char)((int)addr),(unsigned short)((int)offset),(unsigned char)((int)page),(unsigned char)(! is_sfp),& value,(unsigned char)1,(_Bool)0,(struct ice_sq_cd *)0);
    #line 3779 
    if (status != ICE_SUCCESS) 
                               #line 3780 
                               value = (unsigned char)0U;
    #line 3781 
    *(data + (unsigned long)i) = value;
    #line 3760 
    i ++;
  }
  #line 3783 
  return 0;
}

#line 3786  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_ethtool.c"
static struct ethtool_ops ice_ethtool_ops = {.get_drvinfo = & ice_get_drvinfo, .get_regs_len = & ice_get_regs_len, .get_regs = & ice_get_regs, .get_msglevel = & ice_get_msglevel, .set_msglevel = & ice_set_msglevel, .nway_reset = & ice_nway_reset, .get_link = & ethtool_op_get_link, .get_eeprom_len = & ice_get_eeprom_len, .get_eeprom = & ice_get_eeprom, .get_coalesce = & ice_get_coalesce, .set_coalesce = & ice_set_coalesce, .get_ringparam = & ice_get_ringparam, .set_ringparam = & ice_set_ringparam, .get_pauseparam = & ice_get_pauseparam, .set_pauseparam = & ice_set_pauseparam, .self_test = & ice_self_test, .get_strings = & ice_get_strings, .set_phys_id = & ice_set_phys_id, .get_ethtool_stats = & ice_get_ethtool_stats, .get_priv_flags = & ice_get_priv_flags, .set_priv_flags = & ice_set_priv_flags, .get_sset_count = & ice_get_sset_count, .get_rxnfc = & ice_get_rxnfc, .get_rxfh_key_size = & ice_get_rxfh_key_size, .get_rxfh_indir_size = & ice_get_rxfh_indir_size, .get_rxfh = & ice_get_rxfh, .set_rxfh = & ice_set_rxfh, .get_channels = & ice_get_channels, .set_channels = & ice_set_channels, .get_ts_info = & ethtool_op_get_ts_info, .get_module_info = & ice_get_module_info, .get_module_eeprom = & ice_get_module_eeprom, .get_per_queue_coalesce = & ice_get_per_q_coalesce, .set_per_queue_coalesce = & ice_set_per_q_coalesce, .get_link_ksettings = & ice_get_link_ksettings, .set_link_ksettings = & ice_set_link_ksettings, .get_fecparam = & ice_get_fecparam, .set_fecparam = & ice_set_fecparam};
#line 3827  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_ethtool.c"
static struct ethtool_ops ice_ethtool_safe_mode_ops = {.get_drvinfo = & ice_get_drvinfo, .get_regs_len = & ice_get_regs_len, .get_regs = & ice_get_regs, .get_msglevel = & ice_get_msglevel, .set_msglevel = & ice_set_msglevel, .nway_reset = & ice_nway_reset, .get_eeprom_len = & ice_get_eeprom_len, .get_eeprom = & ice_get_eeprom, .get_ringparam = & ice_get_ringparam, .set_ringparam = & ice_set_ringparam, .get_strings = & ice_get_strings, .get_ethtool_stats = & ice_get_ethtool_stats, .get_sset_count = & ice_get_sset_count, .get_channels = & ice_get_channels, .get_link_ksettings = & ice_get_link_ksettings, .set_link_ksettings = & ice_set_link_ksettings};
#line 3850  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_ethtool.c"
void ice_set_ethtool_safe_mode_ops(struct net_device *netdev)
{
  #line 3852 
  netdev->ethtool_ops = & ice_ethtool_safe_mode_ops;
  #line 3853 
  return;
}

#line 3861  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_ethtool.c"
void ice_set_ethtool_ops(struct net_device *netdev)
{
  #line 3863 
  netdev->ethtool_ops = & ice_ethtool_ops;
  #line 3864 
  return;
}

#line 106  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ice/ice.ko/concurrency safety/0/concurrency safety/weaver/ice_ethtool.i.aux"
void emg_wrapper_ice_get_channels(struct net_device *arg0, struct ethtool_channels *arg1)
{
  #line 107 
  ice_get_channels(arg0,arg1);
  #line 108 
  return;
}

#line 111  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ice/ice.ko/concurrency safety/0/concurrency safety/weaver/ice_ethtool.i.aux"
int emg_wrapper_ice_get_coalesce(struct net_device *arg0, struct ethtool_coalesce *arg1)
{
  #line 112 
  return ice_get_coalesce(arg0,arg1);
}

#line 116  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ice/ice.ko/concurrency safety/0/concurrency safety/weaver/ice_ethtool.i.aux"
void emg_wrapper_ice_get_drvinfo(struct net_device *arg0, struct ethtool_drvinfo *arg1)
{
  #line 117 
  ice_get_drvinfo(arg0,arg1);
  #line 118 
  return;
}

#line 121  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ice/ice.ko/concurrency safety/0/concurrency safety/weaver/ice_ethtool.i.aux"
int emg_wrapper_ice_get_eeprom(struct net_device *arg0, struct ethtool_eeprom *arg1, unsigned char *arg2)
{
  #line 122 
  return ice_get_eeprom(arg0,arg1,arg2);
}

#line 126  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ice/ice.ko/concurrency safety/0/concurrency safety/weaver/ice_ethtool.i.aux"
int emg_wrapper_ice_get_eeprom_len(struct net_device *arg0)
{
  #line 127 
  return ice_get_eeprom_len(arg0);
}

#line 131  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ice/ice.ko/concurrency safety/0/concurrency safety/weaver/ice_ethtool.i.aux"
void emg_wrapper_ice_get_ethtool_stats(struct net_device *arg0, struct ethtool_stats *arg1, unsigned long long *arg2)
{
  #line 132 
  ice_get_ethtool_stats(arg0,arg1,arg2);
  #line 133 
  return;
}

#line 136  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ice/ice.ko/concurrency safety/0/concurrency safety/weaver/ice_ethtool.i.aux"
int emg_wrapper_ice_get_fecparam(struct net_device *arg0, struct ethtool_fecparam *arg1)
{
  #line 137 
  return ice_get_fecparam(arg0,arg1);
}

#line 141  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ice/ice.ko/concurrency safety/0/concurrency safety/weaver/ice_ethtool.i.aux"
int emg_wrapper_ice_get_link_ksettings(struct net_device *arg0, struct ethtool_link_ksettings *arg1)
{
  #line 142 
  return ice_get_link_ksettings(arg0,arg1);
}

#line 146  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ice/ice.ko/concurrency safety/0/concurrency safety/weaver/ice_ethtool.i.aux"
int emg_wrapper_ice_get_module_eeprom(struct net_device *arg0, struct ethtool_eeprom *arg1, unsigned char *arg2)
{
  #line 147 
  return ice_get_module_eeprom(arg0,arg1,arg2);
}

#line 151  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ice/ice.ko/concurrency safety/0/concurrency safety/weaver/ice_ethtool.i.aux"
int emg_wrapper_ice_get_module_info(struct net_device *arg0, struct ethtool_modinfo *arg1)
{
  #line 152 
  return ice_get_module_info(arg0,arg1);
}

#line 156  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ice/ice.ko/concurrency safety/0/concurrency safety/weaver/ice_ethtool.i.aux"
unsigned int emg_wrapper_ice_get_msglevel(struct net_device *arg0)
{
  #line 157 
  return ice_get_msglevel(arg0);
}

#line 161  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ice/ice.ko/concurrency safety/0/concurrency safety/weaver/ice_ethtool.i.aux"
void emg_wrapper_ice_get_pauseparam(struct net_device *arg0, struct ethtool_pauseparam *arg1)
{
  #line 162 
  ice_get_pauseparam(arg0,arg1);
  #line 163 
  return;
}

#line 166  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ice/ice.ko/concurrency safety/0/concurrency safety/weaver/ice_ethtool.i.aux"
int emg_wrapper_ice_get_per_q_coalesce(struct net_device *arg0, unsigned int arg1, struct ethtool_coalesce *arg2)
{
  #line 167 
  return ice_get_per_q_coalesce(arg0,arg1,arg2);
}

#line 171  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ice/ice.ko/concurrency safety/0/concurrency safety/weaver/ice_ethtool.i.aux"
unsigned int emg_wrapper_ice_get_priv_flags(struct net_device *arg0)
{
  #line 172 
  return ice_get_priv_flags(arg0);
}

#line 176  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ice/ice.ko/concurrency safety/0/concurrency safety/weaver/ice_ethtool.i.aux"
void emg_wrapper_ice_get_regs(struct net_device *arg0, struct ethtool_regs *arg1, void *arg2)
{
  #line 177 
  ice_get_regs(arg0,arg1,arg2);
  #line 178 
  return;
}

#line 181  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ice/ice.ko/concurrency safety/0/concurrency safety/weaver/ice_ethtool.i.aux"
int emg_wrapper_ice_get_regs_len(struct net_device *arg0)
{
  #line 182 
  return ice_get_regs_len(arg0);
}

#line 186  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ice/ice.ko/concurrency safety/0/concurrency safety/weaver/ice_ethtool.i.aux"
void emg_wrapper_ice_get_ringparam(struct net_device *arg0, struct ethtool_ringparam *arg1)
{
  #line 187 
  ice_get_ringparam(arg0,arg1);
  #line 188 
  return;
}

#line 191  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ice/ice.ko/concurrency safety/0/concurrency safety/weaver/ice_ethtool.i.aux"
int emg_wrapper_ice_get_rxfh(struct net_device *arg0, unsigned int *arg1, unsigned char *arg2, unsigned char *arg3)
{
  #line 192 
  return ice_get_rxfh(arg0,arg1,arg2,arg3);
}

#line 196  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ice/ice.ko/concurrency safety/0/concurrency safety/weaver/ice_ethtool.i.aux"
unsigned int emg_wrapper_ice_get_rxfh_indir_size(struct net_device *arg0)
{
  #line 197 
  return ice_get_rxfh_indir_size(arg0);
}

#line 201  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ice/ice.ko/concurrency safety/0/concurrency safety/weaver/ice_ethtool.i.aux"
unsigned int emg_wrapper_ice_get_rxfh_key_size(struct net_device *arg0)
{
  #line 202 
  return ice_get_rxfh_key_size(arg0);
}

#line 206  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ice/ice.ko/concurrency safety/0/concurrency safety/weaver/ice_ethtool.i.aux"
int emg_wrapper_ice_get_rxnfc(struct net_device *arg0, struct ethtool_rxnfc *arg1, unsigned int *arg2)
{
  #line 207 
  return ice_get_rxnfc(arg0,arg1,arg2);
}

#line 211  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ice/ice.ko/concurrency safety/0/concurrency safety/weaver/ice_ethtool.i.aux"
int emg_wrapper_ice_get_sset_count(struct net_device *arg0, int arg1)
{
  #line 212 
  return ice_get_sset_count(arg0,arg1);
}

#line 216  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ice/ice.ko/concurrency safety/0/concurrency safety/weaver/ice_ethtool.i.aux"
void emg_wrapper_ice_get_strings(struct net_device *arg0, unsigned int arg1, unsigned char *arg2)
{
  #line 217 
  ice_get_strings(arg0,arg1,arg2);
  #line 218 
  return;
}

#line 221  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ice/ice.ko/concurrency safety/0/concurrency safety/weaver/ice_ethtool.i.aux"
int emg_wrapper_ice_nway_reset(struct net_device *arg0)
{
  #line 222 
  return ice_nway_reset(arg0);
}

#line 226  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ice/ice.ko/concurrency safety/0/concurrency safety/weaver/ice_ethtool.i.aux"
void emg_wrapper_ice_self_test(struct net_device *arg0, struct ethtool_test *arg1, unsigned long long *arg2)
{
  #line 227 
  ice_self_test(arg0,arg1,arg2);
  #line 228 
  return;
}

#line 231  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ice/ice.ko/concurrency safety/0/concurrency safety/weaver/ice_ethtool.i.aux"
int emg_wrapper_ice_set_channels(struct net_device *arg0, struct ethtool_channels *arg1)
{
  #line 232 
  return ice_set_channels(arg0,arg1);
}

#line 236  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ice/ice.ko/concurrency safety/0/concurrency safety/weaver/ice_ethtool.i.aux"
int emg_wrapper_ice_set_coalesce(struct net_device *arg0, struct ethtool_coalesce *arg1)
{
  #line 237 
  return ice_set_coalesce(arg0,arg1);
}

#line 241  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ice/ice.ko/concurrency safety/0/concurrency safety/weaver/ice_ethtool.i.aux"
int emg_wrapper_ice_set_fecparam(struct net_device *arg0, struct ethtool_fecparam *arg1)
{
  #line 242 
  return ice_set_fecparam(arg0,arg1);
}

#line 246  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ice/ice.ko/concurrency safety/0/concurrency safety/weaver/ice_ethtool.i.aux"
int emg_wrapper_ice_set_link_ksettings(struct net_device *arg0, struct ethtool_link_ksettings *arg1)
{
  #line 247 
  return ice_set_link_ksettings(arg0,arg1);
}

#line 251  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ice/ice.ko/concurrency safety/0/concurrency safety/weaver/ice_ethtool.i.aux"
void emg_wrapper_ice_set_msglevel(struct net_device *arg0, unsigned int arg1)
{
  #line 252 
  ice_set_msglevel(arg0,arg1);
  #line 253 
  return;
}

#line 256  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ice/ice.ko/concurrency safety/0/concurrency safety/weaver/ice_ethtool.i.aux"
int emg_wrapper_ice_set_pauseparam(struct net_device *arg0, struct ethtool_pauseparam *arg1)
{
  #line 257 
  return ice_set_pauseparam(arg0,arg1);
}

#line 261  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ice/ice.ko/concurrency safety/0/concurrency safety/weaver/ice_ethtool.i.aux"
int emg_wrapper_ice_set_per_q_coalesce(struct net_device *arg0, unsigned int arg1, struct ethtool_coalesce *arg2)
{
  #line 262 
  return ice_set_per_q_coalesce(arg0,arg1,arg2);
}

#line 266  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ice/ice.ko/concurrency safety/0/concurrency safety/weaver/ice_ethtool.i.aux"
int emg_wrapper_ice_set_phys_id(struct net_device *arg0, enum ethtool_phys_id_state arg1)
{
  #line 267 
  return ice_set_phys_id(arg0,arg1);
}

#line 271  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ice/ice.ko/concurrency safety/0/concurrency safety/weaver/ice_ethtool.i.aux"
int emg_wrapper_ice_set_priv_flags(struct net_device *arg0, unsigned int arg1)
{
  #line 272 
  return ice_set_priv_flags(arg0,arg1);
}

#line 276  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ice/ice.ko/concurrency safety/0/concurrency safety/weaver/ice_ethtool.i.aux"
int emg_wrapper_ice_set_ringparam(struct net_device *arg0, struct ethtool_ringparam *arg1)
{
  #line 277 
  return ice_set_ringparam(arg0,arg1);
}

#line 281  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ice/ice.ko/concurrency safety/0/concurrency safety/weaver/ice_ethtool.i.aux"
int emg_wrapper_ice_set_rxfh(struct net_device *arg0, unsigned int *arg1, unsigned char *arg2, unsigned char arg3)
{
  #line 282 
  return ice_set_rxfh(arg0,arg1,arg2,(unsigned char)((int)arg3));
}

#line 301  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ice/ice.ko/concurrency safety/0/concurrency safety/weaver/ice_ethtool.i.aux"
static void cif_set_bit_7(long nr, unsigned long *addr)
{
  #line 304 
  ldv_set_bit(nr,addr);
  #line 305 
  return;
}

#line 308  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ice/ice.ko/concurrency safety/0/concurrency safety/weaver/ice_ethtool.i.aux"
static void cif_clear_bit_7(long nr, unsigned long *addr)
{
  #line 311 
  ldv_clear_bit(nr,addr);
  #line 312 
  return;
}

#line 378  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ice/ice.ko/concurrency safety/0/concurrency safety/weaver/ice_ethtool.i.aux"
static void cif_bitmap_zero(unsigned long *dst, unsigned int nbits)
{
  #line 381 
  ldv_bitmap_zero(dst,nbits);
  #line 382 
  return;
}

#line 579  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ice/ice.ko/concurrency safety/0/concurrency safety/weaver/ice_ethtool.i.aux"
static void *kcalloc_0(size_t n, size_t size, gfp_t flags)
{
  #line 582 
  return ldv_kcalloc(n,size,flags);
}

#line 600  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ice/ice.ko/concurrency safety/0/concurrency safety/weaver/ice_ethtool.i.aux"
static void *kzalloc_3(size_t size, gfp_t flags)
{
  #line 603 
  return ldv_kzalloc(size,flags);
}

#line 980  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ice/ice.ko/concurrency safety/0/concurrency safety/weaver/ice_ethtool.i.aux"
static void *cif_devm_kcalloc_4(struct device *dev, size_t n, size_t size, gfp_t flags)
{
  #line 983 
  return ldv_devm_kcalloc(n,size,flags);
}

#line 987  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ice/ice.ko/concurrency safety/0/concurrency safety/weaver/ice_ethtool.i.aux"
static void *cif_devm_kzalloc_5(struct device *dev, size_t size, gfp_t flags)
{
  #line 990 
  return ldv_devm_kzalloc(size,flags);
}

#line 26  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
#line 133  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ice/ice.ko/concurrency safety/0/concurrency safety/weaver/ice_flex_pipe.i.aux"
static void INIT_LIST_HEAD_3(struct list_head *list);
#line 26 
#line 798 
static void cif_mutex_lock_ice_global_cfg_lock_sw_0(struct mutex *lock);
#line 185  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mutex.h"
#line 805  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ice/ice.ko/concurrency safety/0/concurrency safety/weaver/ice_flex_pipe.i.aux"
static void cif_mutex_unlock_ice_global_cfg_lock_sw_0(struct mutex *lock);
#line 668  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/slab.h"
#line 418  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ice/ice.ko/concurrency safety/0/concurrency safety/weaver/ice_flex_pipe.i.aux"
static void *kzalloc_4(size_t size, gfp_t flags);
#line 952  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
#line 812  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ice/ice.ko/concurrency safety/0/concurrency safety/weaver/ice_flex_pipe.i.aux"
static void *cif_devm_kcalloc_5(struct device *dev, size_t n, size_t size, gfp_t flags);
#line 956  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
#line 956 
void *devm_kmemdup(struct device *, void *, size_t, gfp_t);
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_flex_pipe.c"
static struct ice_buf_hdr *ice_pkg_val_buf(struct ice_buf *buf)
{
  #line 15 
  struct ice_buf_hdr *hdr;
  #line 16 
  u16 section_count;
  #line 17 
  u16 data_end;
  #line 19 
  hdr = (struct ice_buf_hdr *)(& buf->buf);
  #line 21 
  section_count = hdr->section_count;
  #line 22 
  if ((unsigned int)section_count + 65535U > 510U) 
                                                   #line 23 
                                                   return (struct ice_buf_hdr *)0;
  #line 25 
  data_end = hdr->data_end;
  #line 26 
  if ((unsigned int)data_end + 65524U > 4084U) 
                                               #line 27 
                                               return (struct ice_buf_hdr *)0;
  #line 29 
  return hdr;
}

#line 38  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_flex_pipe.c"
static struct ice_buf_table *ice_find_buf_table(struct ice_seg *ice_seg)
{
  #line 40 
  struct ice_nvm_table *nvms;
  #line 42 
  nvms = (struct ice_nvm_table *)((struct ice_device_id_entry *)(& ice_seg->device_table) + (unsigned long)ice_seg->device_table_count);
  #line 46 
  return (struct ice_buf_table *)((__le32 *)(& nvms->vers) + (unsigned long)nvms->table_count);
}

#line 63  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_flex_pipe.c"
static struct ice_buf_hdr *ice_pkg_enum_buf(struct ice_seg *ice_seg, struct ice_pkg_enum *state)
{
  #line 65 
  if (ice_seg != (struct ice_seg *)0) {
    #line 66 
    state->buf_table = ice_find_buf_table(ice_seg);
    #line 67 
    if (state->buf_table == (struct ice_buf_table *)0) 
                                                       #line 68 
                                                       return (struct ice_buf_hdr *)0;
    #line 70 
    state->buf_idx = 0U;
    #line 71 
    return ice_pkg_val_buf((struct ice_buf *)(& (state->buf_table)->buf_array));
  }
  #line 74 
  (state->buf_idx) ++;
  #line 74 
  ;
  #line 74 
  if (state->buf_idx < (state->buf_table)->buf_count) {
    #line 75 
    return ice_pkg_val_buf((struct ice_buf *)(& (state->buf_table)->buf_array) + (unsigned long)state->buf_idx);
  }
  else 
       #line 78 
       return (struct ice_buf_hdr *)0;
}

#line 90  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_flex_pipe.c"
static bool ice_pkg_advance_sect(struct ice_seg *ice_seg, struct ice_pkg_enum *state)
{
  #line 92 
  if (ice_seg == (struct ice_seg *)0 && state->buf == (struct ice_buf_hdr *)0) 
    #line 93 
    return (_Bool)0;
  #line 95 
  if (ice_seg == (struct ice_seg *)0 && state->buf != (struct ice_buf_hdr *)0) {
    #line 96 
    (state->sect_idx) ++;
    #line 96 
    ;
    #line 96 
    if (state->sect_idx < (unsigned int)(state->buf)->section_count) 
      #line 97 
      return (_Bool)1;
  }
  #line 99 
  state->buf = ice_pkg_enum_buf(ice_seg,state);
  #line 100 
  if (state->buf == (struct ice_buf_hdr *)0) 
                                             #line 101 
                                             return (_Bool)0;
  #line 104 
  state->sect_idx = 0U;
  #line 105 
  return (_Bool)1;
}

#line 121  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_flex_pipe.c"
static void *ice_pkg_enum_section(struct ice_seg *ice_seg, struct ice_pkg_enum *state, u32 sect_type)
{
  #line 124 
  u16 offset;
  #line 124 
  u16 size;
  #line 126 
  if (ice_seg != (struct ice_seg *)0) 
                                      #line 127 
                                      state->type = sect_type;
  #line 129 
  if (! ice_pkg_advance_sect(ice_seg,state)) 
                                             #line 130 
                                             return (void *)0;
  #line 133 
  while ((state->buf)->section_entry[state->sect_idx].type != state->type) {
    #line 135 
    if (! ice_pkg_advance_sect((struct ice_seg *)0,state)) 
                                                           #line 136 
                                                           return (void *)0;
  }
  #line 139 
  offset = (state->buf)->section_entry[state->sect_idx].offset;
  #line 140 
  if ((unsigned int)offset + 65524U > 4083U) 
                                             #line 141 
                                             return (void *)0;
  #line 143 
  size = (state->buf)->section_entry[state->sect_idx].size;
  #line 144 
  if ((unsigned int)size + 65535U > 4083U) 
                                           #line 145 
                                           return (void *)0;
  #line 148 
  if ((int)offset + (int)size > 4096) 
                                      #line 149 
                                      return (void *)0;
  #line 151 
  state->sect_type = (state->buf)->section_entry[state->sect_idx].type;
  #line 155 
  state->sect = (void *)((u8 *)state->buf + (unsigned long)(state->buf)->section_entry[state->sect_idx].offset);
  #line 158 
  return state->sect;
}

#line 178  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_flex_pipe.c"
static enum ice_status ice_acquire_global_cfg_lock(struct ice_hw *hw, enum ice_aq_res_access_type access)
{
  #line 181 
  enum ice_status status;
  #line 183 
  status = ice_acquire_res(hw,(enum ice_aq_res_ids)ICE_GLOBAL_CFG_LOCK_RES_ID,access,3000U);
  #line 186 
  if (status == ICE_SUCCESS) 
                             #line 187 
                             cif_mutex_lock_ice_global_cfg_lock_sw_0(& ice_global_cfg_lock_sw);
  else 
    #line 188 
    if (status == ICE_ERR_AQ_NO_WORK) {
      #line 189 
      bool branch;
      #line 189 
      struct _ddebug __UNIQUE_ID_ddebug536 = {.modname = (char *)"ice", .function = (char *)"ice_acquire_global_cfg_lock", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_flex_pipe.c", .format = (char *)"Global config lock: No work to do\n", .lineno = (unsigned int)189U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 189 
      branch = arch_static_branch(& __UNIQUE_ID_ddebug536.key.dd_key_false.key,(_Bool)0);
      #line 189 
      if ((long)((long)((int)branch != 0)) != 0L) {
        #line 189 
        void *__mptr;
        #line 189 
        __mptr = (void *)hw;
        #line 189 
        __dynamic_dev_dbg(& __UNIQUE_ID_ddebug536,& (((struct ice_pf *)(__mptr + 18446744073709549512U))->pdev)->dev,(char *)"Global config lock: No work to do\n");
      }
    }
  #line 192 
  return status;
}

#line 201  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_flex_pipe.c"
static void ice_release_global_cfg_lock(struct ice_hw *hw)
{
  #line 203 
  cif_mutex_unlock_ice_global_cfg_lock_sw_0(& ice_global_cfg_lock_sw);
  #line 204 
  ice_release_res(hw,(enum ice_aq_res_ids)ICE_GLOBAL_CFG_LOCK_RES_ID);
  #line 205 
  return;
}

#line 220  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_flex_pipe.c"
static enum ice_status ice_aq_download_pkg(struct ice_hw *hw, struct ice_buf_hdr *pkg_buf, u16 buf_size, bool last_buf, u32 *error_offset, u32 *error_info, struct ice_sq_cd *cd)
{
  #line 224 
  struct ice_aqc_download_pkg *cmd;
  #line 225 
  struct ice_aq_desc desc;
  #line 226 
  enum ice_status status;
  #line 228 
  if (error_offset != (u32 *)0U) 
                                 #line 229 
                                 *error_offset = 0U;
  #line 230 
  if (error_info != (u32 *)0U) 
                               #line 231 
                               *error_info = 0U;
  #line 233 
  cmd = & desc.params.download_pkg;
  #line 234 
  ice_fill_dflt_direct_cmd_desc(& desc,(unsigned short)3136);
  #line 235 
  desc.flags = (unsigned short)((unsigned int)desc.flags | 1024U);
  #line 237 
  if ((int)last_buf != 0) 
                          #line 238 
                          cmd->flags = (unsigned char)((unsigned int)cmd->flags | 1U);
  #line 240 
  status = ice_aq_send_cmd(hw,& desc,(void *)pkg_buf,(unsigned short)((int)buf_size),cd);
  #line 241 
  if (status == ICE_ERR_AQ_ERROR) {
    #line 243 
    struct ice_aqc_download_pkg_resp *resp;
    #line 245 
    resp = (struct ice_aqc_download_pkg_resp *)pkg_buf;
    #line 246 
    if (error_offset != (u32 *)0U) 
                                   #line 247 
                                   *error_offset = resp->error_offset;
    #line 248 
    if (error_info != (u32 *)0U) 
                                 #line 249 
                                 *error_info = resp->error_info;
  }
  #line 252 
  return status;
}

#line 266  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_flex_pipe.c"
static struct ice_generic_seg_hdr *ice_find_seg_in_pkg(struct ice_hw *hw, u32 seg_type, struct ice_pkg_hdr *pkg_hdr)
{
  #line 269 
  u32 i;
  {
    #line 271 
    bool branch;
    #line 271 
    struct _ddebug __UNIQUE_ID_ddebug537 = {.modname = (char *)"ice", .function = (char *)"ice_find_seg_in_pkg", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_flex_pipe.c", .format = (char *)"Package format version: %d.%d.%d.%d\n", .lineno = (unsigned int)271U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 271 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug537.key.dd_key_false.key,(_Bool)0);
    #line 271 
    if ((long)((long)((int)branch != 0)) != 0L) {
      #line 271 
      void *__mptr;
      #line 271 
      ;
      #line 271 
      ;
      #line 271 
      ;
      #line 271 
      ;
      #line 271 
      __mptr = (void *)hw;
      #line 271 
      __dynamic_dev_dbg(& __UNIQUE_ID_ddebug537,& (((struct ice_pf *)(__mptr + 18446744073709549512U))->pdev)->dev,(char *)"Package format version: %d.%d.%d.%d\n",(int)pkg_hdr->format_ver.major,(int)pkg_hdr->format_ver.minor,(int)pkg_hdr->format_ver.update,(int)pkg_hdr->format_ver.draft);
    }
  }
  #line 276 
  i = 0U;
  #line 276 
  while (pkg_hdr->seg_count > i) {
    {
      #line 277 
      struct ice_generic_seg_hdr *seg;
      #line 279 
      seg = (struct ice_generic_seg_hdr *)((u8 *)pkg_hdr + (unsigned long)pkg_hdr->seg_offset[i]);
      #line 282 
      if (seg->seg_type == seg_type) 
                                     #line 283 
                                     return seg;
    }
    #line 276 
    i ++;
  }
  #line 286 
  return (struct ice_generic_seg_hdr *)0;
}

#line 300  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_flex_pipe.c"
static enum ice_status ice_dwnld_cfg_bufs(struct ice_hw *hw, struct ice_buf *bufs, u32 count)
{
  #line 302 
  enum ice_status status;
  #line 303 
  struct ice_buf_hdr *bh;
  #line 304 
  u32 offset;
  #line 304 
  u32 info;
  #line 304 
  u32 i;
  #line 306 
  if (bufs == (struct ice_buf *)0 || count == 0U) 
                                                  #line 307 
                                                  return ICE_ERR_PARAM;
  #line 313 
  bh = (struct ice_buf_hdr *)bufs;
  #line 314 
  if ((bh->section_entry[0].type & 2147483648U) != 0U) 
                                                       #line 315 
                                                       return ICE_SUCCESS;
  #line 320 
  hw->pkg_dwnld_status = ICE_AQ_RC_OK;
  #line 322 
  status = ice_acquire_global_cfg_lock(hw,(enum ice_aq_res_access_type)ICE_RES_WRITE);
  #line 323 
  if (status != ICE_SUCCESS) {
    #line 324 
    if (status == ICE_ERR_AQ_NO_WORK) 
                                      #line 325 
                                      hw->pkg_dwnld_status = ICE_AQ_RC_EEXIST; else 
                                                                    #line 327 
                                                                    hw->pkg_dwnld_status = hw->adminq.sq_last_status;
    #line 328 
    return status;
  }
  #line 331 
  i = 0U;
  #line 331 
  while (i < count) {
    {
      #line 332 
      bool last = (_Bool)(i + 1U == count);
      #line 334 
      if (! last) {
        #line 336 
        bh = (struct ice_buf_hdr *)(bufs + ((unsigned long)i + (unsigned long)1U));
        #line 342 
        if ((unsigned int)bh->section_count != 0U) 
          #line 343 
          if ((bh->section_entry[0].type & 2147483648U) != 0U) 
                                                               #line 345 
                                                               last = (_Bool)1;
      }
      #line 348 
      bh = (struct ice_buf_hdr *)(bufs + (unsigned long)i);
      #line 350 
      status = ice_aq_download_pkg(hw,bh,(unsigned short)4096,(_Bool)((bool)((int)last) != 0),& offset,& info,(struct ice_sq_cd *)0);
      #line 354 
      hw->pkg_dwnld_status = hw->adminq.sq_last_status;
      #line 355 
      if (status != ICE_SUCCESS) {
        {
          #line 356 
          bool branch;
          #line 356 
          struct _ddebug __UNIQUE_ID_ddebug538 = {.modname = (char *)"ice", .function = (char *)"ice_dwnld_cfg_bufs", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_flex_pipe.c", .format = (char *)"Pkg download failed: err %d off %d inf %d\n", .lineno = (unsigned int)356U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
          #line 356 
          branch = arch_static_branch(& __UNIQUE_ID_ddebug538.key.dd_key_false.key,(_Bool)0);
          #line 356 
          if ((long)((long)((int)branch != 0)) != 0L) {
            #line 356 
            void *__mptr;
            #line 356 
            ;
            #line 356 
            ;
            #line 356 
            ;
            #line 356 
            __mptr = (void *)hw;
            #line 356 
            __dynamic_dev_dbg(& __UNIQUE_ID_ddebug538,& (((struct ice_pf *)(__mptr + 18446744073709549512U))->pdev)->dev,(char *)"Pkg download failed: err %d off %d inf %d\n",(int)status,offset,info);
          }
        }
        #line 360 
        break;
      }
      #line 363 
      if ((int)last != 0) 
                          #line 364 
                          break;
    }
    #line 331 
    i ++;
  }
  #line 367 
  ice_release_global_cfg_lock(hw);
  #line 369 
  return status;
}

#line 382  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_flex_pipe.c"
static enum ice_status ice_aq_get_pkg_info_list(struct ice_hw *hw, struct ice_aqc_get_pkg_info_resp *pkg_info, u16 buf_size, struct ice_sq_cd *cd)
{
  #line 386 
  struct ice_aq_desc desc;
  #line 388 
  ice_fill_dflt_direct_cmd_desc(& desc,(unsigned short)3139);
  #line 390 
  return ice_aq_send_cmd(hw,& desc,(void *)pkg_info,
                      (unsigned short)((int)buf_size),cd);
}

#line 401  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_flex_pipe.c"
static enum ice_status ice_download_pkg(struct ice_hw *hw, struct ice_seg *ice_seg)
{
  #line 403 
  struct ice_buf_table *ice_buf_tbl;
  {
    #line 405 
    bool branch;
    #line 405 
    struct _ddebug __UNIQUE_ID_ddebug539 = {.modname = (char *)"ice", .function = (char *)"ice_download_pkg", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_flex_pipe.c", .format = (char *)"Segment version: %d.%d.%d.%d\n", .lineno = (unsigned int)405U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 405 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug539.key.dd_key_false.key,(_Bool)0);
    #line 405 
    if ((long)((long)((int)branch != 0)) != 0L) {
      #line 405 
      void *__mptr;
      #line 405 
      ;
      #line 405 
      ;
      #line 405 
      ;
      #line 405 
      ;
      #line 405 
      __mptr = (void *)hw;
      #line 405 
      __dynamic_dev_dbg(& __UNIQUE_ID_ddebug539,& (((struct ice_pf *)(__mptr + 18446744073709549512U))->pdev)->dev,(char *)"Segment version: %d.%d.%d.%d\n",(int)ice_seg->hdr.seg_ver.major,(int)ice_seg->hdr.seg_ver.minor,(int)ice_seg->hdr.seg_ver.update,(int)ice_seg->hdr.seg_ver.draft);
    }
  }
  {
    #line 409 
    bool branch_0;
    #line 409 
    struct _ddebug __UNIQUE_ID_ddebug540 = {.modname = (char *)"ice", .function = (char *)"ice_download_pkg", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_flex_pipe.c", .format = (char *)"Seg: type 0x%X, size %d, name %s\n", .lineno = (unsigned int)409U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 409 
    branch_0 = arch_static_branch(& __UNIQUE_ID_ddebug540.key.dd_key_false.key,(_Bool)0);
    #line 409 
    if ((long)((long)((int)branch_0 != 0)) != 0L) {
      #line 409 
      void *__mptr_0;
      #line 409 
      ;
      #line 409 
      ;
      #line 409 
      ;
      #line 409 
      __mptr_0 = (void *)hw;
      #line 409 
      __dynamic_dev_dbg(& __UNIQUE_ID_ddebug540,& (((struct ice_pf *)(__mptr_0 + 18446744073709549512U))->pdev)->dev,(char *)"Seg: type 0x%X, size %d, name %s\n",ice_seg->hdr.seg_type,ice_seg->hdr.seg_size,(char *)(& ice_seg->hdr.seg_name));
    }
  }
  #line 413 
  ice_buf_tbl = ice_find_buf_table(ice_seg);
  {
    #line 415 
    bool branch_1;
    #line 415 
    struct _ddebug __UNIQUE_ID_ddebug541 = {.modname = (char *)"ice", .function = (char *)"ice_download_pkg", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_flex_pipe.c", .format = (char *)"Seg buf count: %d\n", .lineno = (unsigned int)415U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 415 
    branch_1 = arch_static_branch(& __UNIQUE_ID_ddebug541.key.dd_key_false.key,(_Bool)0);
    #line 415 
    if ((long)((long)((int)branch_1 != 0)) != 0L) {
      #line 415 
      void *__mptr_1;
      #line 415 
      ;
      #line 415 
      __mptr_1 = (void *)hw;
      #line 415 
      __dynamic_dev_dbg(& __UNIQUE_ID_ddebug541,& (((struct ice_pf *)(__mptr_1 + 18446744073709549512U))->pdev)->dev,(char *)"Seg buf count: %d\n",ice_buf_tbl->buf_count);
    }
  }
  #line 418 
  return ice_dwnld_cfg_bufs(hw,(struct ice_buf *)(& ice_buf_tbl->buf_array),
                           ice_buf_tbl->buf_count);
}

#line 430  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_flex_pipe.c"
static enum ice_status ice_init_pkg_info(struct ice_hw *hw, struct ice_pkg_hdr *pkg_hdr)
{
  #line 432 
  struct ice_global_metadata_seg *meta_seg;
  #line 433 
  struct ice_generic_seg_hdr *seg_hdr;
  #line 435 
  if (pkg_hdr == (struct ice_pkg_hdr *)0) 
                                          #line 436 
                                          return ICE_ERR_PARAM;
  #line 438 
  meta_seg = (struct ice_global_metadata_seg *)ice_find_seg_in_pkg(hw,1U,pkg_hdr);
  #line 440 
  if (meta_seg != (struct ice_global_metadata_seg *)0) {
    #line 441 
    hw->pkg_ver = meta_seg->pkg_ver;
    #line 442 
    memcpy((void *)(& hw->pkg_name),(void *)(& meta_seg->pkg_name),32UL);
    {
      #line 444 
      bool branch;
      #line 444 
      struct _ddebug __UNIQUE_ID_ddebug542 = {.modname = (char *)"ice", .function = (char *)"ice_init_pkg_info", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_flex_pipe.c", .format = (char *)"Pkg: %d.%d.%d.%d, %s\n", .lineno = (unsigned int)444U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 444 
      branch = arch_static_branch(& __UNIQUE_ID_ddebug542.key.dd_key_false.key,(_Bool)0);
      #line 444 
      if ((long)((long)((int)branch != 0)) != 0L) {
        #line 444 
        void *__mptr;
        #line 444 
        ;
        #line 444 
        ;
        #line 444 
        ;
        #line 444 
        ;
        #line 444 
        ;
        #line 444 
        __mptr = (void *)hw;
        #line 444 
        __dynamic_dev_dbg(& __UNIQUE_ID_ddebug542,& (((struct ice_pf *)(__mptr + 18446744073709549512U))->pdev)->dev,(char *)"Pkg: %d.%d.%d.%d, %s\n",(int)meta_seg->pkg_ver.major,(int)meta_seg->pkg_ver.minor,(int)meta_seg->pkg_ver.update,(int)meta_seg->pkg_ver.draft,(char *)(& meta_seg->pkg_name));
      }
    }
  }
  else {
    {
      #line 449 
      bool branch_0;
      #line 449 
      struct _ddebug __UNIQUE_ID_ddebug543 = {.modname = (char *)"ice", .function = (char *)"ice_init_pkg_info", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_flex_pipe.c", .format = (char *)"Did not find metadata segment in driver package\n", .lineno = (unsigned int)449U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 449 
      branch_0 = arch_static_branch(& __UNIQUE_ID_ddebug543.key.dd_key_false.key,(_Bool)0);
      #line 449 
      if ((long)((long)((int)branch_0 != 0)) != 0L) {
        #line 449 
        void *__mptr_0;
        #line 449 
        __mptr_0 = (void *)hw;
        #line 449 
        __dynamic_dev_dbg(& __UNIQUE_ID_ddebug543,& (((struct ice_pf *)(__mptr_0 + 18446744073709549512U))->pdev)->dev,(char *)"Did not find metadata segment in driver package\n");
      }
    }
    #line 451 
    return ICE_ERR_CFG;
  }
  #line 454 
  seg_hdr = ice_find_seg_in_pkg(hw,16U,pkg_hdr);
  #line 455 
  if (seg_hdr != (struct ice_generic_seg_hdr *)0) {
    #line 456 
    hw->ice_pkg_ver = seg_hdr->seg_ver;
    #line 457 
    memcpy((void *)(& hw->ice_pkg_name),(void *)(& seg_hdr->seg_name),32UL);
    {
      #line 460 
      bool branch_1;
      #line 460 
      struct _ddebug __UNIQUE_ID_ddebug544 = {.modname = (char *)"ice", .function = (char *)"ice_init_pkg_info", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_flex_pipe.c", .format = (char *)"Ice Pkg: %d.%d.%d.%d, %s\n", .lineno = (unsigned int)460U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 460 
      branch_1 = arch_static_branch(& __UNIQUE_ID_ddebug544.key.dd_key_false.key,(_Bool)0);
      #line 460 
      if ((long)((long)((int)branch_1 != 0)) != 0L) {
        #line 460 
        void *__mptr_1;
        #line 460 
        ;
        #line 460 
        ;
        #line 460 
        ;
        #line 460 
        ;
        #line 460 
        ;
        #line 460 
        __mptr_1 = (void *)hw;
        #line 460 
        __dynamic_dev_dbg(& __UNIQUE_ID_ddebug544,& (((struct ice_pf *)(__mptr_1 + 18446744073709549512U))->pdev)->dev,(char *)"Ice Pkg: %d.%d.%d.%d, %s\n",(int)seg_hdr->seg_ver.major,(int)seg_hdr->seg_ver.minor,(int)seg_hdr->seg_ver.update,(int)seg_hdr->seg_ver.draft,(char *)(& seg_hdr->seg_name));
      }
    }
  }
  else {
    {
      #line 465 
      bool branch_2;
      #line 465 
      struct _ddebug __UNIQUE_ID_ddebug545 = {.modname = (char *)"ice", .function = (char *)"ice_init_pkg_info", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_flex_pipe.c", .format = (char *)"Did not find ice segment in driver package\n", .lineno = (unsigned int)465U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 465 
      branch_2 = arch_static_branch(& __UNIQUE_ID_ddebug545.key.dd_key_false.key,(_Bool)0);
      #line 465 
      if ((long)((long)((int)branch_2 != 0)) != 0L) {
        #line 465 
        void *__mptr_2;
        #line 465 
        __mptr_2 = (void *)hw;
        #line 465 
        __dynamic_dev_dbg(& __UNIQUE_ID_ddebug545,& (((struct ice_pf *)(__mptr_2 + 18446744073709549512U))->pdev)->dev,(char *)"Did not find ice segment in driver package\n");
      }
    }
    #line 467 
    return ICE_ERR_CFG;
  }
  #line 470 
  return ICE_SUCCESS;
}

#line 479  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_flex_pipe.c"
static enum ice_status ice_get_pkg_info(struct ice_hw *hw)
{
  #line 481 
  struct ice_aqc_get_pkg_info_resp *pkg_info;
  #line 482 
  enum ice_status status;
  #line 483 
  u16 size;
  #line 484 
  u32 i;
  #line 486 
  size = (unsigned short)164U;
  #line 488 
  pkg_info = (struct ice_aqc_get_pkg_info_resp *)kzalloc_4((unsigned long)size,3264U);
  #line 489 
  if (pkg_info == (struct ice_aqc_get_pkg_info_resp *)0) 
                                                         #line 490 
                                                         return ICE_ERR_NO_MEMORY;
  #line 492 
  status = ice_aq_get_pkg_info_list(hw,pkg_info,(unsigned short)((int)size),(struct ice_sq_cd *)0);
  #line 493 
  if (status != ICE_SUCCESS) 
                             #line 494 
                             goto init_pkg_free_alloc;
  #line 496 
  i = 0U;
  #line 496 
  while (pkg_info->count > i) {
    {
      #line 498 
      char flags[5U] = {(char)0};
      #line 499 
      u8 place = (unsigned char)0U;
      #line 501 
      if ((unsigned int)pkg_info->pkg_info[i].is_active != 0U) {
        #line 502 
        u8 tmp_0;
        #line 502 
        tmp_0 = place;
        #line 502 
        place = (u8)((int)place + 1);
        #line 502 
        flags[(int)tmp_0] = (char)65;
        #line 503 
        hw->active_pkg_ver = pkg_info->pkg_info[i].ver;
        #line 504 
        memcpy((void *)(& hw->active_pkg_name),(void *)(& pkg_info->pkg_info[i].name),32UL);
        #line 507 
        hw->active_pkg_in_nvm = pkg_info->pkg_info[i].is_in_nvm;
      }
      #line 509 
      if ((unsigned int)pkg_info->pkg_info[i].is_active_at_boot != 0U) {
        #line 510 
        u8 tmp_1;
        #line 510 
        tmp_1 = place;
        #line 510 
        place = (u8)((int)place + 1);
        #line 510 
        flags[(int)tmp_1] = (char)66;
      }
      #line 511 
      if ((unsigned int)pkg_info->pkg_info[i].is_modified != 0U) {
        #line 512 
        u8 tmp_2;
        #line 512 
        tmp_2 = place;
        #line 512 
        place = (u8)((int)place + 1);
        #line 512 
        flags[(int)tmp_2] = (char)77;
      }
      #line 513 
      if ((unsigned int)pkg_info->pkg_info[i].is_in_nvm != 0U) {
        #line 514 
        u8 tmp_3;
        #line 514 
        tmp_3 = place;
        #line 514 
        place = (u8)((int)place + 1);
        #line 514 
        flags[(int)tmp_3] = (char)78;
      }
      {
        #line 516 
        bool branch;
        #line 516 
        struct _ddebug __UNIQUE_ID_ddebug546 = {.modname = (char *)"ice", .function = (char *)"ice_get_pkg_info", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_flex_pipe.c", .format = (char *)"Pkg[%d]: %d.%d.%d.%d,%s,%s\n", .lineno = (unsigned int)516U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
        #line 516 
        branch = arch_static_branch(& __UNIQUE_ID_ddebug546.key.dd_key_false.key,(_Bool)0);
        #line 516 
        if ((long)((long)((int)branch != 0)) != 0L) {
          #line 516 
          void *__mptr;
          #line 516 
          ;
          #line 516 
          ;
          #line 516 
          ;
          #line 516 
          ;
          #line 516 
          ;
          #line 516 
          ;
          #line 516 
          __mptr = (void *)hw;
          #line 516 
          __dynamic_dev_dbg(& __UNIQUE_ID_ddebug546,& (((struct ice_pf *)(__mptr + 18446744073709549512U))->pdev)->dev,(char *)"Pkg[%d]: %d.%d.%d.%d,%s,%s\n",i,(int)pkg_info->pkg_info[i].ver.major,(int)pkg_info->pkg_info[i].ver.minor,(int)pkg_info->pkg_info[i].ver.update,(int)pkg_info->pkg_info[i].ver.draft,(char *)(& pkg_info->pkg_info[i].name),(char *)(& flags));
        }
      }
    }
    #line 496 
    i ++;
  }
  #line 524 
  init_pkg_free_alloc: 
                       #line 524 
  ;
  #line 525 
  kfree((void *)pkg_info);
  #line 527 
  return status;
}

#line 538  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_flex_pipe.c"
static enum ice_status ice_verify_pkg(struct ice_pkg_hdr *pkg, u32 len)
{
  #line 540 
  u32 seg_count;
  #line 541 
  u32 i;
  #line 543 
  if (len <= 11U) 
                  #line 544 
                  return ICE_ERR_BUF_TOO_SHORT;
  #line 546 
  if ((((unsigned int)pkg->format_ver.major != 1U || (unsigned int)pkg->format_ver.minor != 0U) || (unsigned int)pkg->format_ver.update != 0U) || (unsigned int)pkg->format_ver.draft != 0U) 
    #line 550 
    return ICE_ERR_CFG;
  #line 553 
  seg_count = pkg->seg_count;
  #line 554 
  if (seg_count == 0U) 
                       #line 555 
                       return ICE_ERR_CFG;
  #line 558 
  if ((unsigned long)len < ((unsigned long)(seg_count + 4294967295U) + 3UL) * 4UL) 
    #line 559 
    return ICE_ERR_BUF_TOO_SHORT;
  #line 562 
  i = 0U;
  #line 562 
  while (i < seg_count) {
    {
      #line 564 
      struct ice_generic_seg_hdr *seg;
      #line 563 
      u32 off = pkg->seg_offset[i];
      #line 567 
      if ((unsigned long)len < (unsigned long)off + 44UL) 
                                                          #line 568 
                                                          return ICE_ERR_BUF_TOO_SHORT;
      #line 570 
      seg = (struct ice_generic_seg_hdr *)((u8 *)pkg + (unsigned long)off);
      #line 573 
      if (seg->seg_size + off > len) 
                                     #line 574 
                                     return ICE_ERR_BUF_TOO_SHORT;
    }
    #line 562 
    i ++;
  }
  #line 577 
  return ICE_SUCCESS;
}

#line 587  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_flex_pipe.c"
void ice_free_seg(struct ice_hw *hw)
{
  #line 589 
  if (hw->pkg_copy != (u8 *)0U) {
    #line 590 
    void *__mptr;
    #line 590 
    ;
    #line 590 
    __mptr = (void *)hw;
    #line 590 
    devm_kfree(& (((struct ice_pf *)(__mptr + 18446744073709549512U))->pdev)->dev,(void *)hw->pkg_copy);
    #line 591 
    hw->pkg_copy = (u8 *)0U;
    #line 592 
    hw->pkg_size = 0U;
  }
  #line 594 
  hw->seg = (struct ice_seg *)0;
  #line 595 
  return;
}

#line 601  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_flex_pipe.c"
static void ice_init_pkg_regs(struct ice_hw *hw)
{
  #line 608 
  writel(4294967295U,(void *)(hw->hw_addr + 2158844U));
  #line 609 
  writel(65535U,(void *)(hw->hw_addr + 2158856U));
  #line 610 
  return;
}

#line 621  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_flex_pipe.c"
static enum ice_status ice_chk_pkg_version(struct ice_pkg_ver *pkg_ver)
{
  #line 623 
  if ((unsigned int)pkg_ver->major != 1U || (unsigned int)pkg_ver->minor != 3U) 
    #line 625 
    return ICE_ERR_NOT_SUPPORTED;
  #line 627 
  return ICE_SUCCESS;
}

#line 655  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_flex_pipe.c"
enum ice_status ice_init_pkg(struct ice_hw *hw, u8 *buf, u32 len)
{
  #line 657 
  struct ice_pkg_hdr *pkg;
  #line 658 
  enum ice_status status;
  #line 659 
  struct ice_seg *seg;
  #line 661 
  if (buf == (u8 *)0U || len == 0U) 
                                    #line 662 
                                    return ICE_ERR_PARAM;
  #line 664 
  pkg = (struct ice_pkg_hdr *)buf;
  #line 665 
  status = ice_verify_pkg(pkg,len);
  #line 666 
  if (status != ICE_SUCCESS) {
    {
      #line 667 
      bool branch;
      #line 667 
      struct _ddebug __UNIQUE_ID_ddebug547 = {.modname = (char *)"ice", .function = (char *)"ice_init_pkg", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_flex_pipe.c", .format = (char *)"failed to verify pkg (err: %d)\n", .lineno = (unsigned int)667U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 667 
      branch = arch_static_branch(& __UNIQUE_ID_ddebug547.key.dd_key_false.key,(_Bool)0);
      #line 667 
      if ((long)((long)((int)branch != 0)) != 0L) {
        #line 667 
        void *__mptr;
        #line 667 
        ;
        #line 667 
        __mptr = (void *)hw;
        #line 667 
        __dynamic_dev_dbg(& __UNIQUE_ID_ddebug547,& (((struct ice_pf *)(__mptr + 18446744073709549512U))->pdev)->dev,(char *)"failed to verify pkg (err: %d)\n",(int)status);
      }
    }
    #line 669 
    return status;
  }
  #line 673 
  status = ice_init_pkg_info(hw,pkg);
  #line 674 
  if (status != ICE_SUCCESS) 
                             #line 675 
                             return status;
  #line 680 
  status = ice_chk_pkg_version(& hw->pkg_ver);
  #line 681 
  if (status != ICE_SUCCESS) 
                             #line 682 
                             return status;
  #line 685 
  seg = (struct ice_seg *)ice_find_seg_in_pkg(hw,16U,pkg);
  #line 686 
  if (seg == (struct ice_seg *)0) {
    {
      #line 687 
      bool branch_0;
      #line 687 
      struct _ddebug __UNIQUE_ID_ddebug548 = {.modname = (char *)"ice", .function = (char *)"ice_init_pkg", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_flex_pipe.c", .format = (char *)"no ice segment in package.\n", .lineno = (unsigned int)687U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 687 
      branch_0 = arch_static_branch(& __UNIQUE_ID_ddebug548.key.dd_key_false.key,(_Bool)0);
      #line 687 
      if ((long)((long)((int)branch_0 != 0)) != 0L) {
        #line 687 
        void *__mptr_0;
        #line 687 
        __mptr_0 = (void *)hw;
        #line 687 
        __dynamic_dev_dbg(& __UNIQUE_ID_ddebug548,& (((struct ice_pf *)(__mptr_0 + 18446744073709549512U))->pdev)->dev,(char *)"no ice segment in package.\n");
      }
    }
    #line 688 
    return ICE_ERR_CFG;
  }
  #line 692 
  status = ice_download_pkg(hw,seg);
  #line 693 
  if (status == ICE_ERR_AQ_NO_WORK) {
    {
      #line 694 
      bool branch_1;
      #line 694 
      struct _ddebug __UNIQUE_ID_ddebug549 = {.modname = (char *)"ice", .function = (char *)"ice_init_pkg", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_flex_pipe.c", .format = (char *)"package previously loaded - no work.\n", .lineno = (unsigned int)694U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 694 
      branch_1 = arch_static_branch(& __UNIQUE_ID_ddebug549.key.dd_key_false.key,(_Bool)0);
      #line 694 
      if ((long)((long)((int)branch_1 != 0)) != 0L) {
        #line 694 
        void *__mptr_1;
        #line 694 
        __mptr_1 = (void *)hw;
        #line 694 
        __dynamic_dev_dbg(& __UNIQUE_ID_ddebug549,& (((struct ice_pf *)(__mptr_1 + 18446744073709549512U))->pdev)->dev,(char *)"package previously loaded - no work.\n");
      }
    }
    #line 696 
    status = ICE_SUCCESS;
  }
  #line 702 
  if (status == ICE_SUCCESS) {
    #line 703 
    status = ice_get_pkg_info(hw);
    #line 704 
    if (status == ICE_SUCCESS) 
                               #line 705 
                               status = ice_chk_pkg_version(& hw->active_pkg_ver);
  }
  #line 708 
  if (status == ICE_SUCCESS) {
    #line 709 
    hw->seg = seg;
    #line 714 
    ice_init_pkg_regs(hw);
    #line 715 
    ice_fill_blk_tbls(hw);
  }
  else {
    #line 717 
    bool branch_2;
    #line 717 
    struct _ddebug __UNIQUE_ID_ddebug550 = {.modname = (char *)"ice", .function = (char *)"ice_init_pkg", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_flex_pipe.c", .format = (char *)"package load failed, %d\n", .lineno = (unsigned int)717U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 717 
    branch_2 = arch_static_branch(& __UNIQUE_ID_ddebug550.key.dd_key_false.key,(_Bool)0);
    #line 717 
    if ((long)((long)((int)branch_2 != 0)) != 0L) {
      #line 717 
      void *__mptr_2;
      #line 717 
      ;
      #line 717 
      __mptr_2 = (void *)hw;
      #line 717 
      __dynamic_dev_dbg(& __UNIQUE_ID_ddebug550,& (((struct ice_pf *)(__mptr_2 + 18446744073709549512U))->pdev)->dev,(char *)"package load failed, %d\n",(int)status);
    }
  }
  #line 721 
  return status;
}

#line 747  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_flex_pipe.c"
enum ice_status ice_copy_and_init_pkg(struct ice_hw *hw, u8 *buf, u32 len)
{
  #line 755 
  void *__mptr;
  #line 749 
  enum ice_status status;
  #line 750 
  u8 *buf_copy;
  #line 752 
  if (buf == (u8 *)0U || len == 0U) 
                                    #line 753 
                                    return ICE_ERR_PARAM;
  #line 755 
  ;
  #line 755 
  ;
  #line 755 
  __mptr = (void *)hw;
  #line 755 
  buf_copy = (u8 *)devm_kmemdup(& (((struct ice_pf *)(__mptr + 18446744073709549512U))->pdev)->dev,
                     (void *)buf,(unsigned long)len,3264U);
  #line 757 
  status = ice_init_pkg(hw,buf_copy,len);
  #line 758 
  if (status != ICE_SUCCESS) {
    #line 760 
    void *__mptr_0;
    #line 760 
    ;
    #line 760 
    __mptr_0 = (void *)hw;
    #line 760 
    devm_kfree(& (((struct ice_pf *)(__mptr_0 + 18446744073709549512U))->pdev)->dev,(void *)buf_copy);
  }
  else {
    #line 763 
    hw->pkg_copy = buf_copy;
    #line 764 
    hw->pkg_size = len;
  }
  #line 767 
  return status;
}

#line 784  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_flex_pipe.c"
static enum ice_status ice_ptg_find_ptype(struct ice_hw *hw, enum ice_block blk, u16 ptype, u8 *ptg)
{
  #line 786 
  if ((unsigned int)ptype > 1023U || ptg == (u8 *)0U) 
                                                      #line 787 
                                                      return ICE_ERR_PARAM;
  #line 789 
  *ptg = (hw->blk[(unsigned int)blk].xlt1.ptypes + (unsigned long)ptype)->ptg;
  #line 790 
  return ICE_SUCCESS;
}

#line 802  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_flex_pipe.c"
static void ice_ptg_alloc_val(struct ice_hw *hw, enum ice_block blk, u8 ptg)
{
  #line 804 
  (hw->blk[(unsigned int)blk].xlt1.ptg_tbl + (unsigned long)ptg)->in_use = (unsigned char)1U;
  #line 805 
  return;
}

#line 818  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_flex_pipe.c"
static enum ice_status ice_ptg_remove_ptype(struct ice_hw *hw, enum ice_block blk, u16 ptype, u8 ptg)
{
  #line 820 
  struct ice_ptg_ptype **ch;
  #line 821 
  struct ice_ptg_ptype *p;
  #line 823 
  if ((unsigned int)ptype > 1023U) 
                                   #line 824 
                                   return ICE_ERR_PARAM;
  #line 826 
  if ((unsigned int)(hw->blk[(unsigned int)blk].xlt1.ptg_tbl + (unsigned long)ptg)->in_use == 0U) 
    #line 827 
    return ICE_ERR_DOES_NOT_EXIST;
  #line 830 
  if ((hw->blk[(unsigned int)blk].xlt1.ptg_tbl + (unsigned long)ptg)->first_ptype == (struct ice_ptg_ptype *)0) 
    #line 831 
    return ICE_ERR_CFG;
  #line 834 
  p = (hw->blk[(unsigned int)blk].xlt1.ptg_tbl + (unsigned long)ptg)->first_ptype;
  #line 835 
  ch = & (hw->blk[(unsigned int)blk].xlt1.ptg_tbl + (unsigned long)ptg)->first_ptype;
  #line 836 
  while (p != (struct ice_ptg_ptype *)0) {
    #line 837 
    if ((long)ptype == (p - hw->blk[(unsigned int)blk].xlt1.ptypes) / 16L) {
      #line 838 
      *ch = p->next_ptype;
      #line 839 
      break;
    }
    #line 842 
    ch = & p->next_ptype;
    #line 843 
    p = p->next_ptype;
  }
  #line 846 
  (hw->blk[(unsigned int)blk].xlt1.ptypes + (unsigned long)ptype)->ptg = (unsigned char)0U;
  #line 847 
  (hw->blk[(unsigned int)blk].xlt1.ptypes + (unsigned long)ptype)->next_ptype = (struct ice_ptg_ptype *)0;
  #line 849 
  return ICE_SUCCESS;
}

#line 865  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_flex_pipe.c"
static enum ice_status ice_ptg_add_mv_ptype(struct ice_hw *hw, enum ice_block blk, u16 ptype, u8 ptg)
{
  #line 867 
  enum ice_status status;
  #line 868 
  u8 original_ptg;
  #line 870 
  if ((unsigned int)ptype > 1023U) 
                                   #line 871 
                                   return ICE_ERR_PARAM;
  #line 873 
  if ((unsigned int)(hw->blk[(unsigned int)blk].xlt1.ptg_tbl + (unsigned long)ptg)->in_use == 0U && (unsigned int)ptg != 0U) 
    #line 874 
    return ICE_ERR_DOES_NOT_EXIST;
  #line 876 
  status = ice_ptg_find_ptype(hw,blk,(unsigned short)((int)ptype),& original_ptg);
  #line 877 
  if (status != ICE_SUCCESS) 
                             #line 878 
                             return status;
  #line 881 
  if ((int)original_ptg == (int)ptg) 
                                     #line 882 
                                     return ICE_SUCCESS;
  #line 885 
  if ((unsigned int)original_ptg != 0U) 
                                        #line 886 
                                        ice_ptg_remove_ptype(hw,blk,(unsigned short)((int)ptype),(unsigned char)((int)original_ptg));
  #line 889 
  if ((unsigned int)ptg == 0U) 
                               #line 890 
                               return ICE_SUCCESS;
  #line 893 
  (hw->blk[(unsigned int)blk].xlt1.ptypes + (unsigned long)ptype)->next_ptype = (hw->blk[(unsigned int)blk].xlt1.ptg_tbl + (unsigned long)ptg)->first_ptype;
  #line 895 
  (hw->blk[(unsigned int)blk].xlt1.ptg_tbl + (unsigned long)ptg)->first_ptype = hw->blk[(unsigned int)blk].xlt1.ptypes + (unsigned long)ptype;
  #line 898 
  (hw->blk[(unsigned int)blk].xlt1.ptypes + (unsigned long)ptype)->ptg = ptg;
  #line 899 
  *(hw->blk[(unsigned int)blk].xlt1.t + (unsigned long)ptype) = ptg;
  #line 901 
  return ICE_SUCCESS;
}

#line 918  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_flex_pipe.c"
static struct ice_blk_size_details blk_sizes[5U] = {{.xlt1 = (unsigned short)1024U, .xlt2 = (unsigned short)768U, .prof_tcam = (unsigned short)512U, .prof_id = (unsigned short)256U, .prof_redir = (unsigned short)256U, .es = (unsigned short)256U, .fvw = (unsigned short)48U}, {.xlt1 = (unsigned short)1024U, .xlt2 = (unsigned short)768U, .prof_tcam = (unsigned short)512U, .prof_id = (unsigned short)128U, .prof_redir = (unsigned short)128U, .es = (unsigned short)128U, .fvw = (unsigned short)32U}, {.xlt1 = (unsigned short)1024U, .xlt2 = (unsigned short)768U, .prof_tcam = (unsigned short)512U, .prof_id = (unsigned short)128U, .prof_redir = (unsigned short)128U, .es = (unsigned short)128U, .fvw = (unsigned short)24U, .reverse = (unsigned char)1U}, {.xlt1 = (unsigned short)1024U, .xlt2 = (unsigned short)768U, .prof_tcam = (unsigned short)512U, .prof_id = (unsigned short)128U, .prof_redir = (unsigned short)128U, .es = (unsigned short)128U, .fvw = (unsigned short)24U, .overwrite = (unsigned char)1U, .reverse = (unsigned char)1U}, {.xlt1 = (unsigned short)1024U, .xlt2 = (unsigned short)768U, .prof_tcam = (unsigned short)64U, .prof_id = (unsigned short)32U, .prof_redir = (unsigned short)32U, .es = (unsigned short)32U, .fvw = (unsigned short)24U}};
#line 967  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_flex_pipe.c"
static enum ice_status ice_vsig_find_vsi(struct ice_hw *hw, enum ice_block blk, u16 vsi, u16 *vsig)
{
  #line 969 
  if (vsig == (u16 *)0U || (unsigned int)vsi > 767U) 
                                                     #line 970 
                                                     return ICE_ERR_PARAM;
  #line 976 
  *vsig = (hw->blk[(unsigned int)blk].xlt2.vsis + (unsigned long)vsi)->vsig;
  #line 978 
  return ICE_SUCCESS;
}

#line 989  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_flex_pipe.c"
static u16 ice_vsig_alloc_val(struct ice_hw *hw, enum ice_block blk, u16 vsig)
{
  #line 991 
  u16 idx = (unsigned short)((unsigned int)vsig & 8191U);
  #line 993 
  if ((unsigned int)(hw->blk[(unsigned int)blk].xlt2.vsig_tbl + (unsigned long)idx)->in_use == 0U) {
    #line 994 
    INIT_LIST_HEAD_3(& (hw->blk[(unsigned int)blk].xlt2.vsig_tbl + (unsigned long)idx)->prop_lst);
    #line 995 
    (hw->blk[(unsigned int)blk].xlt2.vsig_tbl + (unsigned long)idx)->in_use = (unsigned char)1U;
  }
  #line 998 
  return (unsigned short)(((int)idx & 8191) | (((int)hw->pf_id << 13) & -8192));
}

#line 1012  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_flex_pipe.c"
static enum ice_status ice_vsig_remove_vsi(struct ice_hw *hw, enum ice_block blk, u16 vsi, u16 vsig)
{
  #line 1014 
  struct ice_vsig_vsi **vsi_head;
  #line 1014 
  struct ice_vsig_vsi *vsi_cur;
  #line 1014 
  struct ice_vsig_vsi *vsi_tgt;
  #line 1015 
  u16 idx;
  #line 1017 
  idx = (unsigned short)((unsigned int)vsig & 8191U);
  #line 1019 
  if ((unsigned int)vsi > 767U || (unsigned int)idx > 767U) 
                                                            #line 1020 
                                                            return ICE_ERR_PARAM;
  #line 1022 
  if ((unsigned int)(hw->blk[(unsigned int)blk].xlt2.vsig_tbl + (unsigned long)idx)->in_use == 0U) 
    #line 1023 
    return ICE_ERR_DOES_NOT_EXIST;
  #line 1026 
  if ((unsigned int)idx == 0U) 
                               #line 1027 
                               return ICE_SUCCESS;
  #line 1029 
  vsi_head = & (hw->blk[(unsigned int)blk].xlt2.vsig_tbl + (unsigned long)idx)->first_vsi;
  #line 1030 
  if (*vsi_head == (struct ice_vsig_vsi *)0) 
                                             #line 1031 
                                             return ICE_ERR_CFG;
  #line 1033 
  vsi_tgt = hw->blk[(unsigned int)blk].xlt2.vsis + (unsigned long)vsi;
  #line 1034 
  vsi_cur = *vsi_head;
  #line 1037 
  while (vsi_cur != (struct ice_vsig_vsi *)0) {
    #line 1038 
    if (vsi_tgt == vsi_cur) {
      #line 1039 
      *vsi_head = vsi_cur->next_vsi;
      #line 1040 
      break;
    }
    #line 1042 
    vsi_head = & vsi_cur->next_vsi;
    #line 1043 
    vsi_cur = vsi_cur->next_vsi;
  }
  #line 1047 
  if (vsi_cur == (struct ice_vsig_vsi *)0) 
                                           #line 1048 
                                           return ICE_ERR_DOES_NOT_EXIST;
  #line 1050 
  vsi_cur->vsig = (unsigned short)0U;
  #line 1051 
  vsi_cur->changed = (unsigned short)1U;
  #line 1052 
  vsi_cur->next_vsi = (struct ice_vsig_vsi *)0;
  #line 1054 
  return ICE_SUCCESS;
}

#line 1070  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_flex_pipe.c"
static enum ice_status ice_vsig_add_mv_vsi(struct ice_hw *hw, enum ice_block blk, u16 vsi, u16 vsig)
{
  #line 1072 
  struct ice_vsig_vsi *tmp;
  #line 1073 
  enum ice_status status;
  #line 1074 
  u16 orig_vsig;
  #line 1074 
  u16 idx;
  #line 1076 
  idx = (unsigned short)((unsigned int)vsig & 8191U);
  #line 1078 
  if ((unsigned int)vsi > 767U || (unsigned int)idx > 767U) 
                                                            #line 1079 
                                                            return ICE_ERR_PARAM;
  #line 1084 
  if ((unsigned int)(hw->blk[(unsigned int)blk].xlt2.vsig_tbl + (unsigned long)idx)->in_use == 0U && (unsigned int)vsig != 0U) 
    #line 1086 
    return ICE_ERR_DOES_NOT_EXIST;
  #line 1088 
  status = ice_vsig_find_vsi(hw,blk,(unsigned short)((int)vsi),& orig_vsig);
  #line 1089 
  if (status != ICE_SUCCESS) 
                             #line 1090 
                             return status;
  #line 1093 
  if ((int)orig_vsig == (int)vsig) 
                                   #line 1094 
                                   return ICE_SUCCESS;
  #line 1096 
  if ((unsigned int)orig_vsig != 0U) {
    #line 1098 
    status = ice_vsig_remove_vsi(hw,blk,(unsigned short)((int)vsi),(unsigned short)((int)orig_vsig));
    #line 1099 
    if (status != ICE_SUCCESS) 
                               #line 1100 
                               return status;
  }
  #line 1103 
  if ((unsigned int)idx == 0U) 
                               #line 1104 
                               return ICE_SUCCESS;
  #line 1107 
  (hw->blk[(unsigned int)blk].xlt2.vsis + (unsigned long)vsi)->vsig = vsig;
  #line 1108 
  (hw->blk[(unsigned int)blk].xlt2.vsis + (unsigned long)vsi)->changed = (unsigned short)1U;
  #line 1111 
  tmp = (hw->blk[(unsigned int)blk].xlt2.vsig_tbl + (unsigned long)idx)->first_vsi;
  #line 1112 
  (hw->blk[(unsigned int)blk].xlt2.vsig_tbl + (unsigned long)idx)->first_vsi = hw->blk[(unsigned int)blk].xlt2.vsis + (unsigned long)vsi;
  #line 1114 
  (hw->blk[(unsigned int)blk].xlt2.vsis + (unsigned long)vsi)->next_vsi = tmp;
  #line 1115 
  *(hw->blk[(unsigned int)blk].xlt2.t + (unsigned long)vsi) = vsig;
  #line 1117 
  return ICE_SUCCESS;
}

#line 1121  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_flex_pipe.c"
static u32 ice_blk_sids[5U][5U] = {{12U, 13U, 14U, 15U, 16U}, {22U, 23U, 24U, 25U, 26U}, {32U, 33U, 34U, 35U, 36U}, {42U, 43U, 44U, 45U, 46U}, {82U, 83U, 84U, 85U, 86U}};
#line 1168  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_flex_pipe.c"
static void ice_init_sw_xlt1_db(struct ice_hw *hw, enum ice_block blk)
{
  #line 1170 
  u16 pt;
  #line 1172 
  pt = (unsigned short)0U;
  #line 1172 
  while ((int)hw->blk[(unsigned int)blk].xlt1.count > (int)pt) {
    {
      #line 1173 
      u8 ptg;
      #line 1175 
      ptg = *(hw->blk[(unsigned int)blk].xlt1.t + (unsigned long)pt);
      #line 1176 
      if ((unsigned int)ptg != 0U) {
        #line 1177 
        ice_ptg_alloc_val(hw,blk,(unsigned char)((int)ptg));
        #line 1178 
        ice_ptg_add_mv_ptype(hw,blk,(unsigned short)((int)pt),(unsigned char)((int)ptg));
      }
    }
    #line 1172 
    pt = (u16)((int)pt + 1);
  }
  #line 1181 
  return;
}

#line 1188  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_flex_pipe.c"
static void ice_init_sw_xlt2_db(struct ice_hw *hw, enum ice_block blk)
{
  #line 1190 
  u16 vsi;
  #line 1192 
  vsi = (unsigned short)0U;
  #line 1192 
  while ((int)hw->blk[(unsigned int)blk].xlt2.count > (int)vsi) {
    {
      #line 1193 
      u16 vsig;
      #line 1195 
      vsig = *(hw->blk[(unsigned int)blk].xlt2.t + (unsigned long)vsi);
      #line 1196 
      if ((unsigned int)vsig != 0U) {
        #line 1197 
        ice_vsig_alloc_val(hw,blk,(unsigned short)((int)vsig));
        #line 1198 
        ice_vsig_add_mv_vsi(hw,blk,(unsigned short)((int)vsi),(unsigned short)((int)vsig));
        #line 1202 
        (hw->blk[(unsigned int)blk].xlt2.vsis + (unsigned long)vsi)->changed = (unsigned short)0U;
      }
    }
    #line 1192 
    vsi = (u16)((int)vsi + 1);
  }
  #line 1205 
  return;
}

#line 1211  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_flex_pipe.c"
static void ice_init_sw_db(struct ice_hw *hw)
{
  #line 1213 
  u16 i;
  #line 1215 
  i = (unsigned short)0U;
  #line 1215 
  while ((unsigned int)i <= 4U) {
    #line 1216 
    ice_init_sw_xlt1_db(hw,(enum ice_block)i);
    #line 1217 
    ice_init_sw_xlt2_db(hw,(enum ice_block)i);
    #line 1215 
    i = (u16)((int)i + 1);
  }
  #line 1219 
  return;
}

#line 1233  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_flex_pipe.c"
static void ice_fill_tbl(struct ice_hw *hw, enum ice_block block_id, u32 sid)
{
  #line 1235 
  u32 dst_len;
  #line 1235 
  u32 sect_len;
  #line 1236 
  struct ice_prof_redir_section *pr;
  #line 1237 
  struct ice_prof_id_section *pid;
  #line 1238 
  struct ice_xlt1_section *xlt1;
  #line 1239 
  struct ice_xlt2_section *xlt2;
  #line 1240 
  struct ice_sw_fv_section *es;
  #line 1241 
  struct ice_pkg_enum state;
  #line 1242 
  u8 *src;
  #line 1242 
  u8 *dst;
  #line 1243 
  void *sect;
  #line 1235 
  u32 offset = 0U;
  #line 1249 
  if (hw->seg == (struct ice_seg *)0) {
    {
      #line 1250 
      bool branch;
      #line 1250 
      struct _ddebug __UNIQUE_ID_ddebug551 = {.modname = (char *)"ice", .function = (char *)"ice_fill_tbl", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_flex_pipe.c", .format = (char *)"hw->seg is NULL, tables are not filled\n", .lineno = (unsigned int)1250U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 1250 
      branch = arch_static_branch(& __UNIQUE_ID_ddebug551.key.dd_key_false.key,(_Bool)0);
      #line 1250 
      if ((long)((long)((int)branch != 0)) != 0L) {
        #line 1250 
        void *__mptr;
        #line 1250 
        __mptr = (void *)hw;
        #line 1250 
        __dynamic_dev_dbg(& __UNIQUE_ID_ddebug551,& (((struct ice_pf *)(__mptr + 18446744073709549512U))->pdev)->dev,(char *)"hw->seg is NULL, tables are not filled\n");
      }
    }
    #line 1251 
    return;
  }
  #line 1254 
  memset((void *)(& state),0,56UL);
  #line 1256 
  sect = ice_pkg_enum_section(hw->seg,& state,sid);
  #line 1258 
  while (sect != (void *)0) {
    #line 1259 
    switch (sid) {
      #line 1260 
      case (u32)12: 
                    #line 1260 
      ;
      #line 1261 
      case (u32)32: 
                    #line 1261 
      ;
      #line 1262 
      case (u32)42: 
                    #line 1262 
      ;
      #line 1263 
      case (u32)22: 
                    #line 1263 
      ;
      #line 1264 
      case (u32)82: 
                    #line 1264 
      ;
      #line 1265 
      xlt1 = (struct ice_xlt1_section *)sect;
      #line 1266 
      src = (u8 *)(& xlt1->value);
      #line 1267 
      sect_len = (unsigned int)xlt1->count;
      #line 1269 
      dst = hw->blk[(unsigned int)block_id].xlt1.t;
      #line 1270 
      dst_len = (unsigned int)hw->blk[(unsigned int)block_id].xlt1.count;
      #line 1272 
      break;
      #line 1273 
      case (u32)13: 
                    #line 1273 
      ;
      #line 1274 
      case (u32)33: 
                    #line 1274 
      ;
      #line 1275 
      case (u32)43: 
                    #line 1275 
      ;
      #line 1276 
      case (u32)23: 
                    #line 1276 
      ;
      #line 1277 
      case (u32)83: 
                    #line 1277 
      ;
      #line 1278 
      xlt2 = (struct ice_xlt2_section *)sect;
      #line 1279 
      src = (u8 *)(& xlt2->value);
      #line 1280 
      sect_len = (unsigned int)xlt2->count * 2U;
      #line 1282 
      dst = (u8 *)hw->blk[(unsigned int)block_id].xlt2.t;
      #line 1283 
      dst_len = (unsigned int)hw->blk[(unsigned int)block_id].xlt2.count * 2U;
      #line 1285 
      break;
      #line 1286 
      case (u32)14: 
                    #line 1286 
      ;
      #line 1287 
      case (u32)34: 
                    #line 1287 
      ;
      #line 1288 
      case (u32)44: 
                    #line 1288 
      ;
      #line 1289 
      case (u32)24: 
                    #line 1289 
      ;
      #line 1290 
      case (u32)84: 
                    #line 1290 
      ;
      #line 1291 
      pid = (struct ice_prof_id_section *)sect;
      #line 1292 
      src = (u8 *)(& pid->entry);
      #line 1293 
      sect_len = (unsigned int)pid->count * 13U;
      #line 1295 
      dst = (u8 *)hw->blk[(unsigned int)block_id].prof.t;
      #line 1296 
      dst_len = (unsigned int)hw->blk[(unsigned int)block_id].prof.count * 13U;
      #line 1298 
      break;
      #line 1299 
      case (u32)15: 
                    #line 1299 
      ;
      #line 1300 
      case (u32)35: 
                    #line 1300 
      ;
      #line 1301 
      case (u32)45: 
                    #line 1301 
      ;
      #line 1302 
      case (u32)25: 
                    #line 1302 
      ;
      #line 1303 
      case (u32)85: 
                    #line 1303 
      ;
      #line 1304 
      pr = (struct ice_prof_redir_section *)sect;
      #line 1305 
      src = (u8 *)(& pr->redir_value);
      #line 1306 
      sect_len = (unsigned int)pr->count;
      #line 1308 
      dst = hw->blk[(unsigned int)block_id].prof_redir.t;
      #line 1309 
      dst_len = (unsigned int)hw->blk[(unsigned int)block_id].prof_redir.count;
      #line 1311 
      break;
      #line 1312 
      case (u32)16: 
                    #line 1312 
      ;
      #line 1313 
      case (u32)36: 
                    #line 1313 
      ;
      #line 1314 
      case (u32)46: 
                    #line 1314 
      ;
      #line 1315 
      case (u32)26: 
                    #line 1315 
      ;
      #line 1316 
      case (u32)86: 
                    #line 1316 
      ;
      #line 1317 
      es = (struct ice_sw_fv_section *)sect;
      #line 1318 
      src = (u8 *)(& es->fv);
      #line 1319 
      sect_len = (unsigned int)((int)es->count * (int)hw->blk[(unsigned int)block_id].es.fvw) * 4U;
      #line 1322 
      dst = (u8 *)hw->blk[(unsigned int)block_id].es.t;
      #line 1323 
      dst_len = (unsigned int)((int)hw->blk[(unsigned int)block_id].es.count * (int)hw->blk[(unsigned int)block_id].es.fvw) * 4U;
      #line 1326 
      break;
      #line 1327 
      default: 
               #line 1327 
      ;
      #line 1328 
      return;
    }
    #line 1334 
    if (offset > dst_len) 
                          #line 1335 
                          return;
    #line 1342 
    if (offset + sect_len > dst_len) 
                                     #line 1343 
                                     sect_len = dst_len - offset;
    #line 1345 
    memcpy((void *)(dst + (unsigned long)offset),(void *)src,(unsigned long)sect_len);
    #line 1346 
    offset += sect_len;
    #line 1347 
    sect = ice_pkg_enum_section((struct ice_seg *)0,& state,sid);
  }
  #line 1349 
  return;
}

#line 1359  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_flex_pipe.c"
void ice_fill_blk_tbls(struct ice_hw *hw)
{
  #line 1361 
  u8 i;
  #line 1363 
  i = (unsigned char)0U;
  #line 1363 
  while ((unsigned int)i <= 4U) {
    {
      #line 1364 
      enum ice_block blk_id = (enum ice_block)i;
      #line 1366 
      ice_fill_tbl(hw,blk_id,hw->blk[(unsigned int)blk_id].xlt1.sid);
      #line 1367 
      ice_fill_tbl(hw,blk_id,hw->blk[(unsigned int)blk_id].xlt2.sid);
      #line 1368 
      ice_fill_tbl(hw,blk_id,hw->blk[(unsigned int)blk_id].prof.sid);
      #line 1369 
      ice_fill_tbl(hw,blk_id,hw->blk[(unsigned int)blk_id].prof_redir.sid);
      #line 1370 
      ice_fill_tbl(hw,blk_id,hw->blk[(unsigned int)blk_id].es.sid);
    }
    #line 1363 
    i = (u8)((int)i + 1);
  }
  #line 1373 
  ice_init_sw_db(hw);
  #line 1374 
  return;
}

#line 1380  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_flex_pipe.c"
void ice_free_hw_tbls(struct ice_hw *hw)
{
  #line 1382 
  u8 i;
  #line 1384 
  i = (unsigned char)0U;
  #line 1384 
  while ((unsigned int)i <= 4U) {
    {
      #line 1396 
      void *__mptr_8;
      #line 1393 
      void *__mptr_5;
      #line 1390 
      void *__mptr_2;
      #line 1387 
      void *__mptr;
      #line 1397 
      void *__mptr_9;
      #line 1394 
      void *__mptr_6;
      #line 1391 
      void *__mptr_3;
      #line 1388 
      void *__mptr_0;
      #line 1395 
      void *__mptr_7;
      #line 1392 
      void *__mptr_4;
      #line 1389 
      void *__mptr_1;
      #line 1385 
      hw->blk[(int)i].is_list_init = (unsigned char)0U;
      #line 1387 
      ;
      #line 1387 
      __mptr = (void *)hw;
      #line 1387 
      devm_kfree(& (((struct ice_pf *)(__mptr + 18446744073709549512U))->pdev)->dev,(void *)hw->blk[(int)i].xlt1.ptypes);
      #line 1388 
      ;
      #line 1388 
      __mptr_0 = (void *)hw;
      #line 1388 
      devm_kfree(& (((struct ice_pf *)(__mptr_0 + 18446744073709549512U))->pdev)->dev,(void *)hw->blk[(int)i].xlt1.ptg_tbl);
      #line 1389 
      ;
      #line 1389 
      __mptr_1 = (void *)hw;
      #line 1389 
      devm_kfree(& (((struct ice_pf *)(__mptr_1 + 18446744073709549512U))->pdev)->dev,(void *)hw->blk[(int)i].xlt1.t);
      #line 1390 
      ;
      #line 1390 
      __mptr_2 = (void *)hw;
      #line 1390 
      devm_kfree(& (((struct ice_pf *)(__mptr_2 + 18446744073709549512U))->pdev)->dev,(void *)hw->blk[(int)i].xlt2.t);
      #line 1391 
      ;
      #line 1391 
      __mptr_3 = (void *)hw;
      #line 1391 
      devm_kfree(& (((struct ice_pf *)(__mptr_3 + 18446744073709549512U))->pdev)->dev,(void *)hw->blk[(int)i].xlt2.vsig_tbl);
      #line 1392 
      ;
      #line 1392 
      __mptr_4 = (void *)hw;
      #line 1392 
      devm_kfree(& (((struct ice_pf *)(__mptr_4 + 18446744073709549512U))->pdev)->dev,(void *)hw->blk[(int)i].xlt2.vsis);
      #line 1393 
      ;
      #line 1393 
      __mptr_5 = (void *)hw;
      #line 1393 
      devm_kfree(& (((struct ice_pf *)(__mptr_5 + 18446744073709549512U))->pdev)->dev,(void *)hw->blk[(int)i].prof.t);
      #line 1394 
      ;
      #line 1394 
      __mptr_6 = (void *)hw;
      #line 1394 
      devm_kfree(& (((struct ice_pf *)(__mptr_6 + 18446744073709549512U))->pdev)->dev,(void *)hw->blk[(int)i].prof_redir.t);
      #line 1395 
      ;
      #line 1395 
      __mptr_7 = (void *)hw;
      #line 1395 
      devm_kfree(& (((struct ice_pf *)(__mptr_7 + 18446744073709549512U))->pdev)->dev,(void *)hw->blk[(int)i].es.t);
      #line 1396 
      ;
      #line 1396 
      __mptr_8 = (void *)hw;
      #line 1396 
      devm_kfree(& (((struct ice_pf *)(__mptr_8 + 18446744073709549512U))->pdev)->dev,(void *)hw->blk[(int)i].es.ref_count);
      #line 1397 
      ;
      #line 1397 
      __mptr_9 = (void *)hw;
      #line 1397 
      devm_kfree(& (((struct ice_pf *)(__mptr_9 + 18446744073709549512U))->pdev)->dev,(void *)hw->blk[(int)i].es.written);
    }
    #line 1384 
    i = (u8)((int)i + 1);
  }
  #line 1400 
  memset((void *)(& hw->blk),0,1640UL);
  #line 1401 
  return;
}

#line 1407  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_flex_pipe.c"
void ice_clear_hw_tbls(struct ice_hw *hw)
{
  #line 1409 
  u8 i;
  #line 1411 
  i = (unsigned char)0U;
  #line 1411 
  while ((unsigned int)i <= 4U) {
    {
      #line 1412 
      struct ice_prof_redir *prof_redir = & hw->blk[(int)i].prof_redir;
      #line 1413 
      struct ice_prof_tcam *prof = & hw->blk[(int)i].prof;
      #line 1414 
      struct ice_xlt1 *xlt1 = & hw->blk[(int)i].xlt1;
      #line 1415 
      struct ice_xlt2 *xlt2 = & hw->blk[(int)i].xlt2;
      #line 1416 
      struct ice_es *es = & hw->blk[(int)i].es;
      #line 1418 
      memset((void *)xlt1->ptypes,0,(unsigned long)xlt1->count * 16UL);
      #line 1419 
      memset((void *)xlt1->ptg_tbl,0,4096UL);
      #line 1421 
      memset((void *)xlt1->t,0,(unsigned long)xlt1->count);
      #line 1423 
      memset((void *)xlt2->vsis,0,(unsigned long)xlt2->count * 16UL);
      #line 1424 
      memset((void *)xlt2->vsig_tbl,0,(unsigned long)xlt2->count * 32UL);
      #line 1426 
      memset((void *)xlt2->t,0,(unsigned long)xlt2->count * 2UL);
      #line 1428 
      memset((void *)prof->t,0,(unsigned long)prof->count * 13UL);
      #line 1429 
      memset((void *)prof_redir->t,0,(unsigned long)prof_redir->count);
      #line 1432 
      memset((void *)es->t,0,(unsigned long)es->count * 4UL);
      #line 1433 
      memset((void *)es->ref_count,0,(unsigned long)es->count * 2UL);
      #line 1434 
      memset((void *)es->written,0,(unsigned long)es->count);
    }
    #line 1411 
    i = (u8)((int)i + 1);
  }
  #line 1436 
  return;
}

#line 1442  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_flex_pipe.c"
enum ice_status ice_init_hw_tbls(struct ice_hw *hw)
{
  #line 1444 
  u8 i;
  #line 1446 
  i = (unsigned char)0U;
  #line 1446 
  while ((unsigned int)i <= 4U) {
    {
      #line 1486 
      void *__mptr_2;
      #line 1510 
      void *__mptr_5;
      #line 1535 
      void *__mptr_8;
      #line 1471 
      void *__mptr_0;
      #line 1492 
      void *__mptr_3;
      #line 1518 
      void *__mptr_6;
      #line 1539 
      void *__mptr_9;
      #line 1478 
      void *__mptr_1;
      #line 1501 
      void *__mptr_4;
      #line 1529 
      void *__mptr_7;
      #line 1465 
      void *__mptr;
      #line 1452 
      u16 j;
      #line 1447 
      struct ice_prof_redir *prof_redir = & hw->blk[(int)i].prof_redir;
      #line 1448 
      struct ice_prof_tcam *prof = & hw->blk[(int)i].prof;
      #line 1449 
      struct ice_xlt1 *xlt1 = & hw->blk[(int)i].xlt1;
      #line 1450 
      struct ice_xlt2 *xlt2 = & hw->blk[(int)i].xlt2;
      #line 1451 
      struct ice_es *es = & hw->blk[(int)i].es;
      #line 1454 
      if ((unsigned int)hw->blk[(int)i].is_list_init != 0U) 
                                                            #line 1455 
                                                            goto __Cont;
      #line 1457 
      hw->blk[(int)i].is_list_init = (unsigned char)1U;
      #line 1459 
      hw->blk[(int)i].overwrite = blk_sizes[(int)i].overwrite;
      #line 1460 
      es->reverse = blk_sizes[(int)i].reverse;
      #line 1462 
      xlt1->sid = ice_blk_sids[(int)i][0];
      #line 1463 
      xlt1->count = blk_sizes[(int)i].xlt1;
      #line 1465 
      ;
      #line 1465 
      __mptr = (void *)hw;
      #line 1465 
      xlt1->ptypes = (struct ice_ptg_ptype *)cif_devm_kcalloc_5(& (((struct ice_pf *)(__mptr + 18446744073709549512U))->pdev)->dev,
                           (unsigned long)xlt1->count,16UL,3264U);
      #line 1468 
      if (xlt1->ptypes == (struct ice_ptg_ptype *)0) 
                                                     #line 1469 
                                                     goto err;
      #line 1471 
      __mptr_0 = (void *)hw;
      #line 1471 
      xlt1->ptg_tbl = (struct ice_ptg_entry *)cif_devm_kcalloc_5(& (((struct ice_pf *)(__mptr_0 + 18446744073709549512U))->pdev)->dev,
                           256UL,16UL,3264U);
      #line 1475 
      if (xlt1->ptg_tbl == (struct ice_ptg_entry *)0) 
                                                      #line 1476 
                                                      goto err;
      #line 1478 
      ;
      #line 1478 
      __mptr_1 = (void *)hw;
      #line 1478 
      xlt1->t = (u8 *)cif_devm_kcalloc_5(& (((struct ice_pf *)(__mptr_1 + 18446744073709549512U))->pdev)->dev,
                           (unsigned long)xlt1->count,1UL,3264U);
      #line 1480 
      if (xlt1->t == (u8 *)0U) 
                               #line 1481 
                               goto err;
      #line 1483 
      xlt2->sid = ice_blk_sids[(int)i][1];
      #line 1484 
      xlt2->count = blk_sizes[(int)i].xlt2;
      #line 1486 
      ;
      #line 1486 
      __mptr_2 = (void *)hw;
      #line 1486 
      xlt2->vsis = (struct ice_vsig_vsi *)cif_devm_kcalloc_5(& (((struct ice_pf *)(__mptr_2 + 18446744073709549512U))->pdev)->dev,
                           (unsigned long)xlt2->count,16UL,3264U);
      #line 1489 
      if (xlt2->vsis == (struct ice_vsig_vsi *)0) 
                                                  #line 1490 
                                                  goto err;
      #line 1492 
      ;
      #line 1492 
      __mptr_3 = (void *)hw;
      #line 1492 
      xlt2->vsig_tbl = (struct ice_vsig_entry *)cif_devm_kcalloc_5(& (((struct ice_pf *)(__mptr_3 + 18446744073709549512U))->pdev)->dev,
                           (unsigned long)xlt2->count,32UL,3264U);
      #line 1495 
      if (xlt2->vsig_tbl == (struct ice_vsig_entry *)0) 
                                                        #line 1496 
                                                        goto err;
      #line 1498 
      j = (unsigned short)0U;
      #line 1498 
      while ((int)xlt2->count > (int)j) {
        #line 1499 
        INIT_LIST_HEAD_3(& (xlt2->vsig_tbl + (unsigned long)j)->prop_lst);
        #line 1498 
        j = (u16)((int)j + 1);
      }
      #line 1501 
      ;
      #line 1501 
      __mptr_4 = (void *)hw;
      #line 1501 
      xlt2->t = (u16 *)cif_devm_kcalloc_5(& (((struct ice_pf *)(__mptr_4 + 18446744073709549512U))->pdev)->dev,
                            (unsigned long)xlt2->count,2UL,3264U);
      #line 1503 
      if (xlt2->t == (u16 *)0U) 
                                #line 1504 
                                goto err;
      #line 1506 
      prof->sid = ice_blk_sids[(int)i][2];
      #line 1507 
      prof->count = blk_sizes[(int)i].prof_tcam;
      #line 1508 
      prof->max_prof_id = blk_sizes[(int)i].prof_id;
      #line 1509 
      prof->cdid_bits = blk_sizes[(int)i].prof_cdid_bits;
      #line 1510 
      ;
      #line 1510 
      __mptr_5 = (void *)hw;
      #line 1510 
      prof->t = (struct ice_prof_tcam_entry *)cif_devm_kcalloc_5(& (((struct ice_pf *)(__mptr_5 + 18446744073709549512U))->pdev)->dev,
                            (unsigned long)prof->count,13UL,3264U);
      #line 1513 
      if (prof->t == (struct ice_prof_tcam_entry *)0) 
                                                      #line 1514 
                                                      goto err;
      #line 1516 
      prof_redir->sid = ice_blk_sids[(int)i][3];
      #line 1517 
      prof_redir->count = blk_sizes[(int)i].prof_redir;
      #line 1518 
      ;
      #line 1518 
      __mptr_6 = (void *)hw;
      #line 1518 
      prof_redir->t = (u8 *)cif_devm_kcalloc_5(& (((struct ice_pf *)(__mptr_6 + 18446744073709549512U))->pdev)->dev,
                            (unsigned long)prof_redir->count,1UL,3264U);
      #line 1523 
      if (prof_redir->t == (u8 *)0U) 
                                     #line 1524 
                                     goto err;
      #line 1526 
      es->sid = ice_blk_sids[(int)i][4];
      #line 1527 
      es->count = blk_sizes[(int)i].es;
      #line 1528 
      es->fvw = blk_sizes[(int)i].fvw;
      #line 1529 
      ;
      #line 1529 
      __mptr_7 = (void *)hw;
      #line 1529 
      es->t = (struct ice_fv_word *)cif_devm_kcalloc_5(& (((struct ice_pf *)(__mptr_7 + 18446744073709549512U))->pdev)->dev,
                            (unsigned long)((unsigned int)((int)es->count * (int)es->fvw)),
                            4UL,3264U);
      #line 1532 
      if (es->t == (struct ice_fv_word *)0) 
                                            #line 1533 
                                            goto err;
      #line 1535 
      ;
      #line 1535 
      __mptr_8 = (void *)hw;
      #line 1535 
      es->ref_count = (u16 *)cif_devm_kcalloc_5(& (((struct ice_pf *)(__mptr_8 + 18446744073709549512U))->pdev)->dev,
                            (unsigned long)es->count,2UL,3264U);
      #line 1539 
      ;
      #line 1539 
      __mptr_9 = (void *)hw;
      #line 1539 
      es->written = (u8 *)cif_devm_kcalloc_5(& (((struct ice_pf *)(__mptr_9 + 18446744073709549512U))->pdev)->dev,
                            (unsigned long)es->count,1UL,3264U);
      #line 1541 
      if (es->ref_count == (u16 *)0U) 
                                      #line 1542 
                                      goto err;
    }
    #line 1446 
    __Cont: 
            #line 1446 
    i = (u8)((int)i + 1);
  }
  #line 1544 
  return ICE_SUCCESS;
  #line 1546 
  err: 
       #line 1546 
  ;
  #line 1547 
  ice_free_hw_tbls(hw);
  #line 1548 
  return ICE_ERR_NO_MEMORY;
}

#line 133  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ice/ice.ko/concurrency safety/0/concurrency safety/weaver/ice_flex_pipe.i.aux"
static void INIT_LIST_HEAD_3(struct list_head *list)
{
  #line 136 
  ldv_init_list_head(list);
  #line 137 
  return;
}

#line 418  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ice/ice.ko/concurrency safety/0/concurrency safety/weaver/ice_flex_pipe.i.aux"
static void *kzalloc_4(size_t size, gfp_t flags)
{
  #line 421 
  return ldv_kzalloc(size,flags);
}

#line 798  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ice/ice.ko/concurrency safety/0/concurrency safety/weaver/ice_flex_pipe.i.aux"
static void cif_mutex_lock_ice_global_cfg_lock_sw_0(struct mutex *lock)
{
  #line 801 
  ldv_mutex_model_lock(lock,(char *)"ice_global_cfg_lock_sw");
  #line 802 
  return;
}

#line 805  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ice/ice.ko/concurrency safety/0/concurrency safety/weaver/ice_flex_pipe.i.aux"
static void cif_mutex_unlock_ice_global_cfg_lock_sw_0(struct mutex *lock)
{
  #line 808 
  ldv_mutex_model_unlock(lock,(char *)"ice_global_cfg_lock_sw");
  #line 809 
  return;
}

#line 812  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ice/ice.ko/concurrency safety/0/concurrency safety/weaver/ice_flex_pipe.i.aux"
static void *cif_devm_kcalloc_5(struct device *dev, size_t n, size_t size, gfp_t flags)
{
  #line 815 
  return ldv_devm_kcalloc(n,size,flags);
}

#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bitops/find.h"
#line 112  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ice/ice.ko/concurrency safety/0/concurrency safety/weaver/ice_virtchnl_pf.i.aux"
static unsigned long cif_find_next_bit(unsigned long *addr, unsigned long size, unsigned long offset);
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bitops/find.h"
#line 154  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ice/ice.ko/concurrency safety/0/concurrency safety/weaver/ice_virtchnl_pf.i.aux"
static unsigned long cif_find_first_bit_0(unsigned long *addr, unsigned long size);
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bitops/instrumented-atomic.h"
#line 119  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ice/ice.ko/concurrency safety/0/concurrency safety/weaver/ice_virtchnl_pf.i.aux"
static void cif_set_bit_8(long nr, unsigned long *addr);
#line 44  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bitops/instrumented-atomic.h"
#line 126  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ice/ice.ko/concurrency safety/0/concurrency safety/weaver/ice_virtchnl_pf.i.aux"
static void cif_clear_bit_8(long nr, unsigned long *addr);
#line 147  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bitmap.h"
#line 147 
int __bitmap_intersects(unsigned long *, unsigned long *, unsigned int);
#line 230 
#line 196  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ice/ice.ko/concurrency safety/0/concurrency safety/weaver/ice_virtchnl_pf.i.aux"
static void cif_bitmap_zero_0(unsigned long *dst, unsigned int nbits);
#line 354  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bitmap.h"
__inline static int bitmap_intersects(unsigned long *src1, unsigned long *src2, unsigned int nbits)
{
  #line 357 
  if (0 != 0 && nbits + 4294967295U <= 63U) 
                                            #line 358 
                                            return ((*src1 & *src2) & (18446744073709551615UL >> (- nbits & 63U))) != 0UL;
  else {
    #line 360 
    return __bitmap_intersects(src1,src2,nbits);
  }
}

#line 408 
#line 805  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ice/ice.ko/concurrency safety/0/concurrency safety/weaver/ice_virtchnl_pf.i.aux"
static void cif_bitmap_set_0(unsigned long *map, unsigned int start, unsigned int nbits);
#line 22  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/find_bit.h"
#line 22 
unsigned long ldv_find_next_bit(unsigned long *addr, unsigned long size, unsigned long offset);
#line 668  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/slab.h"
#line 418  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ice/ice.ko/concurrency safety/0/concurrency safety/weaver/ice_virtchnl_pf.i.aux"
static void *kzalloc_5(size_t size, gfp_t flags);
#line 952  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
#line 798  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ice/ice.ko/concurrency safety/0/concurrency safety/weaver/ice_virtchnl_pf.i.aux"
static void *cif_devm_kcalloc_6(struct device *dev, size_t n, size_t size, gfp_t flags);
#line 2029  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
#line 2029 
int pci_enable_sriov(struct pci_dev *, int);
#line 2030 
#line 2030 
void pci_disable_sriov(struct pci_dev *);
#line 2033 
#line 2033 
int pci_num_vf(struct pci_dev *);
#line 2034 
#line 2034 
int pci_vfs_assigned(struct pci_dev *);
#line 676  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/avf/virtchnl.h"
__inline static int virtchnl_vc_validate_vf_msg(struct virtchnl_version_info *ver, u32 v_opcode, u8 *msg, u16 msglen)
{
  #line 679 
  bool err_msg_format = (_Bool)0;
  #line 680 
  int valid_len = 0;
  #line 683 
  switch (v_opcode) {
    #line 684 
    case (u32)1: 
                 #line 684 
    ;
    #line 685 
    valid_len = 8;
    #line 686 
    break;
    #line 687 
    case (u32)2: 
                 #line 687 
    ;
    #line 688 
    break;
    #line 689 
    case (u32)3: 
                 #line 689 
    ;
    #line 690 
    if (ver->major == 1U && ver->minor == 1U) 
                                              #line 691 
                                              valid_len = 4;
    #line 692 
    break;
    #line 693 
    case (u32)4: 
                 #line 693 
    ;
    #line 694 
    valid_len = 24;
    #line 695 
    break;
    #line 696 
    case (u32)5: 
                 #line 696 
    ;
    #line 697 
    valid_len = 40;
    #line 698 
    break;
    #line 699 
    case (u32)6: 
                 #line 699 
    ;
    #line 700 
    valid_len = 72;
    #line 701 
    if ((int)msglen >= valid_len) {
      #line 702 
      struct virtchnl_vsi_queue_config_info *vqc = (struct virtchnl_vsi_queue_config_info *)msg;
      #line 704 
      valid_len = (int)((unsigned int)vqc->num_queue_pairs * 64U + (unsigned int)valid_len);
      #line 707 
      if ((unsigned int)vqc->num_queue_pairs == 0U) 
                                                    #line 708 
                                                    err_msg_format = (_Bool)1;
    }
    #line 710 
    break;
    #line 711 
    case (u32)7: 
                 #line 711 
    ;
    #line 712 
    valid_len = 14;
    #line 713 
    if ((int)msglen >= valid_len) {
      #line 714 
      struct virtchnl_irq_map_info *vimi = (struct virtchnl_irq_map_info *)msg;
      #line 716 
      valid_len = (int)((unsigned int)vimi->num_vectors * 12U + (unsigned int)valid_len);
      #line 718 
      if ((unsigned int)vimi->num_vectors == 0U) 
                                                 #line 719 
                                                 err_msg_format = (_Bool)1;
    }
    #line 721 
    break;
    #line 722 
    case (u32)8: 
                 #line 722 
    ;
    #line 723 
    case (u32)9: 
                 #line 723 
    ;
    #line 724 
    valid_len = 12;
    #line 725 
    break;
    #line 726 
    case (u32)10: 
                  #line 726 
    ;
    #line 727 
    case (u32)11: 
                  #line 727 
    ;
    #line 728 
    valid_len = 12;
    #line 729 
    if ((int)msglen >= valid_len) {
      #line 730 
      struct virtchnl_ether_addr_list *veal = (struct virtchnl_ether_addr_list *)msg;
      #line 732 
      valid_len = (int)((unsigned int)veal->num_elements * 8U + (unsigned int)valid_len);
      #line 734 
      if ((unsigned int)veal->num_elements == 0U) 
                                                  #line 735 
                                                  err_msg_format = (_Bool)1;
    }
    #line 737 
    break;
    #line 738 
    case (u32)12: 
                  #line 738 
    ;
    #line 739 
    case (u32)13: 
                  #line 739 
    ;
    #line 740 
    valid_len = 6;
    #line 741 
    if ((int)msglen >= valid_len) {
      #line 742 
      struct virtchnl_vlan_filter_list *vfl = (struct virtchnl_vlan_filter_list *)msg;
      #line 744 
      valid_len = (int)((unsigned int)vfl->num_elements * 2U + (unsigned int)valid_len);
      #line 745 
      if ((unsigned int)vfl->num_elements == 0U) 
                                                 #line 746 
                                                 err_msg_format = (_Bool)1;
    }
    #line 748 
    break;
    #line 749 
    case (u32)14: 
                  #line 749 
    ;
    #line 750 
    valid_len = 4;
    #line 751 
    break;
    #line 752 
    case (u32)15: 
                  #line 752 
    ;
    #line 753 
    valid_len = 12;
    #line 754 
    break;
    #line 755 
    case (u32)20: 
                  #line 755 
    ;
    #line 760 
    if ((unsigned int)msglen != 0U) 
                                    #line 761 
                                    valid_len = (int)msglen; else 
                                                                  #line 763 
                                                                  err_msg_format = (_Bool)1;
    #line 764 
    break;
    #line 765 
    case (u32)22: 
                  #line 765 
    ;
    #line 766 
    break;
    #line 767 
    case (u32)21: 
                  #line 767 
    ;
    #line 768 
    valid_len = 16;
    #line 769 
    if ((int)msglen >= valid_len) {
      #line 770 
      struct virtchnl_iwarp_qvlist_info *qv = (struct virtchnl_iwarp_qvlist_info *)msg;
      #line 772 
      if (qv->num_vectors == 0U) {
        #line 773 
        err_msg_format = (_Bool)1;
        #line 774 
        break;
      }
      #line 776 
      valid_len = (int)((qv->num_vectors * 12U + (u32)valid_len) + 4294967284U);
    }
    #line 779 
    break;
    #line 780 
    case (u32)23: 
                  #line 780 
    ;
    #line 781 
    valid_len = 6;
    #line 782 
    if ((int)msglen >= valid_len) {
      #line 783 
      struct virtchnl_rss_key *vrk = (struct virtchnl_rss_key *)msg;
      #line 785 
      valid_len = ((int)vrk->key_len + -1) + valid_len;
    }
    #line 787 
    break;
    #line 788 
    case (u32)24: 
                  #line 788 
    ;
    #line 789 
    valid_len = 6;
    #line 790 
    if ((int)msglen >= valid_len) {
      #line 791 
      struct virtchnl_rss_lut *vrl = (struct virtchnl_rss_lut *)msg;
      #line 793 
      valid_len = ((int)vrl->lut_entries + -1) + valid_len;
    }
    #line 795 
    break;
    #line 796 
    case (u32)25: 
                  #line 796 
    ;
    #line 797 
    break;
    #line 798 
    case (u32)26: 
                  #line 798 
    ;
    #line 799 
    valid_len = 8;
    #line 800 
    break;
    #line 801 
    case (u32)27: 
                  #line 801 
    ;
    #line 802 
    case (u32)28: 
                  #line 802 
    ;
    #line 803 
    break;
    #line 804 
    case (u32)29: 
                  #line 804 
    ;
    #line 805 
    valid_len = 2;
    #line 806 
    break;
    #line 807 
    case (u32)30: 
                  #line 807 
    ;
    #line 808 
    valid_len = 24;
    #line 809 
    if ((int)msglen >= valid_len) {
      #line 810 
      struct virtchnl_tc_info *vti = (struct virtchnl_tc_info *)msg;
      #line 812 
      valid_len = (int)((vti->num_tc + 4294967295U) * 16U + (u32)valid_len);
      #line 814 
      if (vti->num_tc == 0U) 
                             #line 815 
                             err_msg_format = (_Bool)1;
    }
    #line 817 
    break;
    #line 818 
    case (u32)31: 
                  #line 818 
    ;
    #line 819 
    break;
    #line 820 
    case (u32)32: 
                  #line 820 
    ;
    #line 821 
    valid_len = 272;
    #line 822 
    break;
    #line 823 
    case (u32)33: 
                  #line 823 
    ;
    #line 824 
    valid_len = 272;
    #line 825 
    break;
    #line 827 
    case (u32)17: 
                  #line 827 
    ;
    #line 828 
    case (u32)0: 
                 #line 828 
    ;
    #line 829 
    default: 
             #line 829 
    ;
    #line 830 
    return -5;
  }
  #line 833 
  if ((int)err_msg_format != 0 || (int)msglen != valid_len) 
                                                            #line 834 
                                                            return -38;
  #line 836 
  return 0;
}

#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_virtchnl_pf.c"
static int ice_validate_vf_id(struct ice_pf *pf, int vf_id)
{
  #line 15 
  if (pf->num_alloc_vfs <= vf_id) {
    #line 16 
    _dev_err(& (pf->pdev)->dev,(char *)"Invalid VF ID: %d\n",vf_id);
    #line 17 
    return -22;
  }
  #line 19 
  return 0;
}

#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_virtchnl_pf.c"
static int ice_check_vf_init(struct ice_pf *pf, struct ice_vf *vf)
{
  #line 29 
  if (! test_bit(0L,(unsigned long *)(& vf->vf_states))) {
    #line 30 
    _dev_err(& (pf->pdev)->dev,(char *)"VF ID: %d in reset. Try again.\n",(int)vf->vf_id);
    #line 32 
    return -16;
  }
  #line 34 
  return 0;
}

#line 41  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_virtchnl_pf.c"
static enum virtchnl_status_code ice_err_to_virt_err(enum ice_status ice_err)
{
  #line 43 
  switch ((int)ice_err) {
    #line 44 
    case 0: 
            #line 44 
    ;
    #line 45 
    return VIRTCHNL_STATUS_SUCCESS;
    #line 46 
    case -5: 
             #line 46 
    ;
    #line 47 
    case -6: 
             #line 47 
    ;
    #line 48 
    case -8: 
             #line 48 
    ;
    #line 49 
    case -1: 
             #line 49 
    ;
    #line 50 
    case -12: 
              #line 50 
    ;
    #line 51 
    return VIRTCHNL_STATUS_ERR_PARAM;
    #line 52 
    case -11: 
              #line 52 
    ;
    #line 53 
    return VIRTCHNL_STATUS_ERR_NO_MEMORY;
    #line 54 
    case -3: 
             #line 54 
    ;
    #line 55 
    case -9: 
             #line 55 
    ;
    #line 56 
    case -10: 
              #line 56 
    ;
    #line 57 
    case -100: 
               #line 57 
    ;
    #line 58 
    case -101: 
               #line 58 
    ;
    #line 59 
    case -102: 
               #line 59 
    ;
    #line 60 
    case -103: 
               #line 60 
    ;
    #line 61 
    case -104: 
               #line 61 
    ;
    #line 62 
    return VIRTCHNL_STATUS_ERR_ADMIN_QUEUE_ERROR;
    #line 63 
    default: 
             #line 63 
    ;
    #line 64 
    return VIRTCHNL_STATUS_ERR_NOT_SUPPORTED;
  }
}

#line 77  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_virtchnl_pf.c"
static void ice_vc_vf_broadcast(struct ice_pf *pf, enum virtchnl_ops v_opcode, enum virtchnl_status_code v_retval, u8 *msg, u16 msglen)
{
  #line 82 
  int i;
  #line 80 
  struct ice_hw *hw = & pf->hw;
  #line 81 
  struct ice_vf *vf = pf->vf;
  #line 84 
  i = 0;
  #line 84 
  while (pf->num_alloc_vfs > i) {
    {
      #line 86 
      if (! test_bit(0L,(unsigned long *)(& vf->vf_states))) {
        #line 87 
        if (! test_bit(1L,(unsigned long *)(& vf->vf_states))) 
                                                               #line 88 
                                                               goto __Cont;
      }
      #line 93 
      ice_aq_send_msg_to_vf(hw,(unsigned short)((int)((unsigned short)vf->vf_id)),(unsigned int)v_opcode,(unsigned int)v_retval,msg,(unsigned short)((int)msglen),(struct ice_sq_cd *)0);
    }
    #line 84 
    __Cont: 
            #line 84 
    i ++;
    #line 84 
    vf ++;
  }
  #line 95 
  return;
}

#line 106  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_virtchnl_pf.c"
static void ice_set_pfe_link(struct ice_vf *vf, struct virtchnl_pf_event *pfe, int ice_link_speed, bool link_up)
{
  #line 109 
  if ((vf->driver_caps & 128U) != 0U) {
    #line 110 
    pfe->event_data.link_event_adv.link_status = (unsigned char)link_up;
    #line 112 
    pfe->event_data.link_event_adv.link_speed = ice_conv_link_speed_to_virtchnl((_Bool)1,(unsigned short)((int)((unsigned short)ice_link_speed)));
  }
  else {
    #line 115 
    pfe->event_data.link_event.link_status = link_up;
    #line 117 
    pfe->event_data.link_event.link_speed = (enum virtchnl_link_speed)ice_conv_link_speed_to_virtchnl((_Bool)0,
                                      (unsigned short)((int)((unsigned short)ice_link_speed)));
  }
  #line 121 
  return;
}

#line 130  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_virtchnl_pf.c"
static void ice_set_pfe_link_forced(struct ice_vf *vf, struct virtchnl_pf_event *pfe, bool link_up)
{
  #line 133 
  u16 link_speed;
  #line 135 
  if ((int)link_up != 0) 
                         #line 136 
                         link_speed = (unsigned short)1024U; else 
                                                                  #line 138 
                                                                  link_speed = (unsigned short)32768U;
  #line 140 
  ice_set_pfe_link(vf,pfe,(int)link_speed,(_Bool)((bool)((int)link_up) != 0));
  #line 141 
  return;
}

#line 149  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_virtchnl_pf.c"
static void ice_vc_notify_vf_link_state(struct ice_vf *vf)
{
  #line 152 
  struct ice_link_status *ls;
  #line 154 
  struct ice_hw *hw;
  #line 151 
  struct virtchnl_pf_event pfe = {.event = VIRTCHNL_EVENT_UNKNOWN, .event_data = {.link_event = {.link_speed = 0, .link_status = (_Bool)0}}, .severity = 0};
  #line 153 
  struct ice_pf *pf = vf->pf;
  #line 156 
  hw = & pf->hw;
  #line 157 
  ls = & (hw->port_info)->phy.link_info;
  #line 159 
  pfe.event = VIRTCHNL_EVENT_LINK_CHANGE;
  #line 160 
  pfe.severity = 0;
  #line 163 
  if ((unsigned int)vf->num_qs_ena == 0U) 
                                          #line 164 
                                          ice_set_pfe_link(vf,& pfe,32768,(_Bool)0);
  else 
    #line 165 
    if ((unsigned int)vf->link_forced != 0U) 
                                             #line 166 
                                             ice_set_pfe_link_forced(vf,& pfe,(_Bool)((unsigned int)vf->link_up != 0U)); else 
                                                                    #line 168 
                                                                    ice_set_pfe_link(vf,& pfe,(int)ls->link_speed,(_Bool)(((unsigned long)ls->link_info & 1UL) != 0UL));
  #line 171 
  ice_aq_send_msg_to_vf(hw,(unsigned short)((int)((unsigned short)vf->vf_id)),17U,0U,(u8 *)(& pfe),(unsigned short)16,(struct ice_sq_cd *)0);
  #line 173 
  return;
}

#line 180  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_virtchnl_pf.c"
static void ice_free_vf_res(struct ice_vf *vf)
{
  #line 183 
  int i;
  #line 183 
  int last_vector_idx;
  #line 182 
  struct ice_pf *pf = vf->pf;
  #line 188 
  cif_clear_bit_8(0L,(unsigned long *)(& vf->vf_states));
  #line 191 
  if ((unsigned int)vf->lan_vsi_idx != 0U) {
    #line 192 
    ice_vsi_release(*(pf->vsi + (unsigned long)vf->lan_vsi_idx));
    #line 193 
    vf->lan_vsi_idx = (unsigned short)0U;
    #line 194 
    vf->lan_vsi_num = (unsigned short)0U;
    #line 195 
    vf->num_mac = (unsigned short)0U;
  }
  #line 198 
  last_vector_idx = (vf->first_vector_idx + (int)pf->num_vf_msix) + -1;
  #line 200 
  i = vf->first_vector_idx;
  #line 200 
  while (i <= last_vector_idx) {
    #line 201 
    writel(2U,(void *)(pf->hw.hw_addr + (unsigned long)((i + 360448) * 4)));
    #line 202 
    readl((void *)(pf->hw.hw_addr + 745772U));
    #line 200 
    i ++;
  }
  #line 205 
  cif_clear_bit_8(4L,(unsigned long *)(& vf->vf_states));
  #line 206 
  cif_clear_bit_8(5L,(unsigned long *)(& vf->vf_states));
  #line 207 
  return;
}

#line 213  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_virtchnl_pf.c"
static void ice_dis_vf_mappings(struct ice_vf *vf)
{
  #line 216 
  struct ice_vsi *vsi;
  #line 217 
  struct device *dev;
  #line 218 
  int first;
  #line 218 
  int last;
  #line 218 
  int v;
  #line 219 
  struct ice_hw *hw;
  #line 215 
  struct ice_pf *pf = vf->pf;
  #line 221 
  hw = & pf->hw;
  #line 222 
  vsi = *(pf->vsi + (unsigned long)vf->lan_vsi_idx);
  #line 224 
  dev = & (pf->pdev)->dev;
  #line 225 
  writel(0U,(void *)(hw->hw_addr + (unsigned long)(((int)vf->vf_id + 476160) * 4)));
  #line 226 
  writel(0U,(void *)(hw->hw_addr + (unsigned long)(((int)vf->vf_id + 160768) * 4)));
  #line 228 
  first = vf->first_vector_idx;
  #line 229 
  last = ((int)pf->num_vf_msix + first) + -1;
  #line 230 
  v = first;
  #line 230 
  while (v <= last) {
    {
      #line 231 
      u32 reg;
      #line 233 
      reg = ((unsigned int)((int)hw->pf_id << 12) & 28672U) | 65536U;
      #line 237 
      writel(reg,(void *)(hw->hw_addr + (unsigned long)((v + 362496) * 4)));
    }
    #line 230 
    v ++;
  }
  #line 240 
  if ((unsigned int)vsi->tx_mapping_mode == 0U) 
                                                #line 241 
                                                writel(0U,(void *)(hw->hw_addr + (unsigned long)(((int)vf->vf_id + 476672) * 4))); else 
                                                                    #line 243 
                                                                    _dev_err(dev,(char *)"Scattered mode for VF Tx queues is not yet implemented\n");
  #line 245 
  if ((unsigned int)vsi->rx_mapping_mode == 0U) 
                                                #line 246 
                                                writel(0U,(void *)(hw->hw_addr + (unsigned long)(((int)vf->vf_id + 116736) * 4))); else 
                                                                    #line 248 
                                                                    _dev_err(dev,(char *)"Scattered mode for VF Rx queues is not yet implemented\n");
  #line 249 
  return;
}

#line 265  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_virtchnl_pf.c"
static int ice_sriov_free_msix_res(struct ice_pf *pf)
{
  #line 267 
  struct ice_res_tracker *res;
  #line 269 
  if (pf == (struct ice_pf *)0) 
                                #line 270 
                                return -22;
  #line 272 
  res = pf->irq_tracker;
  #line 273 
  if (res == (struct ice_res_tracker *)0) 
                                          #line 274 
                                          return -22;
  #line 277 
  if ((int)pf->sriov_base_vector < (int)res->num_entries) {
    #line 278 
    res->end = res->num_entries;
    #line 279 
    pf->num_avail_sw_msix += (unsigned int)((int)res->num_entries - (int)pf->sriov_base_vector);
  }
  #line 283 
  pf->sriov_base_vector = (unsigned short)0U;
  #line 285 
  return 0;
}

#line 292  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_virtchnl_pf.c"
void ice_set_vf_state_qs_dis(struct ice_vf *vf)
{
  #line 295 
  cif_bitmap_zero_0((unsigned long *)(& vf->txq_ena),16U);
  #line 296 
  cif_bitmap_zero_0((unsigned long *)(& vf->rxq_ena),16U);
  #line 297 
  vf->num_qs_ena = (unsigned short)0U;
  #line 298 
  cif_clear_bit_8(2L,(unsigned long *)(& vf->vf_states));
  #line 299 
  return;
}

#line 305  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_virtchnl_pf.c"
static void ice_dis_vf_qs(struct ice_vf *vf)
{
  #line 308 
  struct ice_vsi *vsi;
  #line 307 
  struct ice_pf *pf = vf->pf;
  #line 310 
  vsi = *(pf->vsi + (unsigned long)vf->lan_vsi_idx);
  #line 312 
  ice_vsi_stop_lan_tx_rings(vsi,(enum ice_disq_rst_src)ICE_NO_RESET,(unsigned short)((int)((unsigned short)vf->vf_id)));
  #line 313 
  ice_vsi_stop_rx_rings(vsi);
  #line 314 
  ice_set_vf_state_qs_dis(vf);
  #line 315 
  return;
}

#line 321  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_virtchnl_pf.c"
void ice_free_vfs(struct ice_pf *pf)
{
  #line 325 
  int tmp;
  #line 325 
  int i;
  #line 323 
  struct device *dev = & (pf->pdev)->dev;
  #line 324 
  struct ice_hw *hw = & pf->hw;
  #line 327 
  if (pf->vf == (struct ice_vf *)0) 
                                    #line 328 
                                    return;
  #line 330 
  while (1) {
    #line 330 
    if (! ((int)test_and_clear_bit(20L,(unsigned long *)(& pf->state)) != 0)) 
      #line 330 
      break;
    #line 331 
    usleep_range(1000UL,2000UL);
  }
  #line 334 
  i = 0;
  #line 334 
  while (pf->num_alloc_vfs > i) {
    #line 335 
    if ((int)test_bit(2L,
                 (unsigned long *)(& (pf->vf + (unsigned long)i)->vf_states)) != 0) 
      #line 336 
      ice_dis_vf_qs(pf->vf + (unsigned long)i);
    #line 334 
    i ++;
  }
  #line 342 
  if (pci_vfs_assigned(pf->pdev) == 0) 
                                       #line 343 
                                       pci_disable_sriov(pf->pdev); else 
                                                                    #line 345 
                                                                    _dev_warn(dev,(char *)"VFs are assigned - not disabling SR-IOV\n");
  #line 347 
  tmp = pf->num_alloc_vfs;
  #line 348 
  pf->num_vf_qps = (unsigned short)0U;
  #line 349 
  pf->num_alloc_vfs = 0;
  #line 350 
  i = 0;
  #line 350 
  while (i < tmp) {
    #line 351 
    if ((int)test_bit(0L,
                 (unsigned long *)(& (pf->vf + (unsigned long)i)->vf_states)) != 0) {
      #line 353 
      ice_dis_vf_mappings(pf->vf + (unsigned long)i);
      #line 354 
      cif_set_bit_8(3L,(unsigned long *)(& (pf->vf + (unsigned long)i)->vf_states));
      #line 355 
      ice_free_vf_res(pf->vf + (unsigned long)i);
    }
    #line 350 
    i ++;
  }
  #line 359 
  if (ice_sriov_free_msix_res(pf) != 0) 
                                        #line 360 
                                        _dev_err(dev,(char *)"Failed to free MSIX resources used by SR-IOV\n");
  #line 362 
  devm_kfree(dev,(void *)pf->vf);
  #line 363 
  pf->vf = (struct ice_vf *)0;
  #line 369 
  if (pci_vfs_assigned(pf->pdev) == 0) {
    #line 370 
    int vf_id;
    #line 375 
    vf_id = 0;
    #line 375 
    while (vf_id < tmp) {
      {
        #line 376 
        u32 reg_idx;
        #line 376 
        u32 bit_idx;
        #line 378 
        reg_idx = (hw->func_caps.vf_base_id + (unsigned int)vf_id) / 32U;
        #line 379 
        bit_idx = (hw->func_caps.vf_base_id + (unsigned int)vf_id) & 31U;
        #line 380 
        writel((unsigned int)(1UL << bit_idx),(void *)(hw->hw_addr + (unsigned long)((reg_idx + 151169U) * 4U)));
      }
      #line 375 
      vf_id ++;
    }
  }
  #line 383 
  cif_clear_bit_8(20L,(unsigned long *)(& pf->state));
  #line 384 
  cif_clear_bit_8(2L,(unsigned long *)(& pf->flags));
  #line 385 
  return;
}

#line 397  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_virtchnl_pf.c"
static void ice_trigger_vf_reset(struct ice_vf *vf, bool is_vflr, bool is_pfr)
{
  #line 400 
  u32 reg;
  #line 400 
  u32 reg_idx;
  #line 400 
  u32 bit_idx;
  #line 401 
  struct device *dev;
  #line 402 
  struct ice_hw *hw;
  #line 403 
  int vf_abs_id;
  #line 403 
  int i;
  #line 399 
  struct ice_pf *pf = vf->pf;
  #line 405 
  dev = & (pf->pdev)->dev;
  #line 406 
  hw = & pf->hw;
  #line 407 
  vf_abs_id = (int)((unsigned int)vf->vf_id + hw->func_caps.vf_base_id);
  #line 410 
  cif_clear_bit_8(1L,(unsigned long *)(& vf->vf_states));
  #line 418 
  cif_clear_bit_8(0L,(unsigned long *)(& vf->vf_states));
  #line 425 
  if (! is_pfr) 
                #line 426 
                writel(0U,(void *)(hw->hw_addr + (unsigned long)(((int)vf->vf_id + 569088) * 4)));
  #line 431 
  if (! is_vflr) {
    #line 433 
    reg = readl((void *)(hw->hw_addr + (unsigned long)(((int)vf->vf_id + 147456) * 4)));
    #line 434 
    reg |= 1U;
    #line 435 
    writel(reg,(void *)(hw->hw_addr + (unsigned long)(((int)vf->vf_id + 147456) * 4)));
  }
  #line 438 
  reg_idx = (unsigned int)(vf_abs_id / 32);
  #line 439 
  bit_idx = (unsigned int)(vf_abs_id % 32);
  #line 440 
  writel((unsigned int)(1UL << bit_idx),(void *)(hw->hw_addr + (unsigned long)((reg_idx + 151169U) * 4U)));
  #line 441 
  readl((void *)(hw->hw_addr + 745772U));
  #line 443 
  writel((unsigned int)((vf_abs_id << 12) | 170),(void *)(hw->hw_addr + 648576U));
  #line 445 
  i = 0;
  #line 445 
  while (i <= 99) {
    #line 446 
    reg = readl((void *)(hw->hw_addr + 648448U));
    #line 448 
    if ((reg & 32U) == 0U) 
                           #line 449 
                           break;
    #line 451 
    _dev_err(dev,(char *)"VF %d PCI transactions stuck\n",(int)vf->vf_id);
    #line 453 
    __const_udelay(4295UL);
    #line 445 
    i ++;
  }
  #line 456 
  return;
}

#line 462  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_virtchnl_pf.c"
static void ice_vsi_set_pvid_fill_ctxt(struct ice_vsi_ctx *ctxt, u16 vid)
{
  #line 464 
  ctxt->info.vlan_flags = (unsigned char)21U;
  #line 467 
  ctxt->info.pvid = vid;
  #line 468 
  ctxt->info.sw_flags2 = (unsigned char)((unsigned int)ctxt->info.sw_flags2 | 1U);
  #line 469 
  ctxt->info.valid_sections = (unsigned short)5U;
  #line 470 
  return;
}

#line 477  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_virtchnl_pf.c"
static void ice_vsi_kill_pvid_fill_ctxt(struct ice_vsi_ctx *ctxt)
{
  #line 479 
  ctxt->info.vlan_flags = (unsigned char)24U;
  #line 480 
  ctxt->info.vlan_flags = (unsigned char)((unsigned int)ctxt->info.vlan_flags | 3U);
  #line 481 
  ctxt->info.sw_flags2 = (unsigned char)((unsigned int)ctxt->info.sw_flags2 & 254U);
  #line 482 
  ctxt->info.valid_sections = (unsigned short)5U;
  #line 483 
  return;
}

#line 492  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_virtchnl_pf.c"
static int ice_vsi_manage_pvid(struct ice_vsi *vsi, u16 vid, bool enable)
{
  #line 495 
  struct ice_vsi_ctx *ctxt;
  #line 496 
  enum ice_status status;
  #line 494 
  struct ice_hw *hw = & (vsi->back)->hw;
  #line 497 
  int ret = 0;
  #line 499 
  ctxt = (struct ice_vsi_ctx *)kzalloc_5(384UL,3264U);
  #line 500 
  if (ctxt == (struct ice_vsi_ctx *)0) 
                                       #line 501 
                                       return -12;
  #line 503 
  ctxt->info = vsi->info;
  #line 504 
  if ((int)enable != 0) 
                        #line 505 
                        ice_vsi_set_pvid_fill_ctxt(ctxt,(unsigned short)((int)vid)); else 
                                                                    #line 507 
                                                                    ice_vsi_kill_pvid_fill_ctxt(ctxt);
  #line 509 
  status = ice_update_vsi(hw,(unsigned short)((int)vsi->idx),ctxt,(struct ice_sq_cd *)0);
  #line 510 
  if (status != ICE_SUCCESS) {
    #line 511 
    _dev_info(& ((vsi->back)->pdev)->dev,(char *)"update VSI for port VLAN failed, err %d aq_err %d\n",(int)status,(unsigned int)hw->adminq.sq_last_status);
    #line 513 
    ret = -5;
    #line 514 
    goto out;
  }
  #line 517 
  vsi->info = ctxt->info;
  #line 518 
  out: 
       #line 518 
  ;
  #line 519 
  kfree((void *)ctxt);
  #line 520 
  return ret;
}

#line 533  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_virtchnl_pf.c"
static struct ice_vsi *ice_vf_vsi_setup(struct ice_pf *pf, struct ice_port_info *pi, u16 vf_id)
{
  #line 535 
  return ice_vsi_setup(pf,pi,(enum ice_vsi_type)ICE_VSI_VF,
                    (unsigned short)((int)vf_id));
}

#line 550  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_virtchnl_pf.c"
static int ice_calc_vf_first_vector_idx(struct ice_pf *pf, struct ice_vf *vf)
{
  #line 552 
  return (int)pf->sriov_base_vector + (int)vf->vf_id * (int)pf->num_vf_msix;
}

#line 561  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_virtchnl_pf.c"
static int ice_alloc_vsi_res(struct ice_vf *vf)
{
  #line 565 
  u8 broadcast[6U];
  #line 566 
  struct ice_vsi *vsi;
  #line 567 
  struct device *dev;
  #line 563 
  struct ice_pf *pf = vf->pf;
  #line 564 
  struct list_head tmp_add_list = {.next = & tmp_add_list, .prev = & tmp_add_list};
  #line 568 
  int status = 0;
  #line 570 
  dev = & (pf->pdev)->dev;
  #line 572 
  vf->first_vector_idx = ice_calc_vf_first_vector_idx(pf,vf);
  #line 574 
  vsi = ice_vf_vsi_setup(pf,pf->hw.port_info,(unsigned short)((int)((unsigned short)vf->vf_id)));
  #line 575 
  if (vsi == (struct ice_vsi *)0) {
    #line 576 
    _dev_err(dev,(char *)"Failed to create VF VSI\n");
    #line 577 
    return -12;
  }
  #line 580 
  vf->lan_vsi_idx = vsi->idx;
  #line 581 
  vf->lan_vsi_num = vsi->vsi_num;
  #line 584 
  if ((unsigned int)vf->port_vlan_id != 0U) {
    #line 585 
    ice_vsi_manage_pvid(vsi,(unsigned short)((int)vf->port_vlan_id),(_Bool)1);
    #line 586 
    ice_vsi_add_vlan(vsi,(unsigned short)((int)vf->port_vlan_id & 4095));
  }
  #line 589 
  eth_broadcast_addr((u8 *)(& broadcast));
  #line 591 
  status = ice_add_mac_to_list(vsi,& tmp_add_list,(u8 *)(& broadcast));
  #line 592 
  if (status != 0) 
                   #line 593 
                   goto ice_alloc_vsi_res_exit;
  #line 595 
  if ((int)is_valid_ether_addr((u8 *)(& vf->dflt_lan_addr.addr)) != 0) {
    #line 596 
    status = ice_add_mac_to_list(vsi,& tmp_add_list,(u8 *)(& vf->dflt_lan_addr.addr));
    #line 598 
    if (status != 0) 
                     #line 599 
                     goto ice_alloc_vsi_res_exit;
  }
  #line 602 
  status = (int)ice_add_mac(& pf->hw,& tmp_add_list);
  #line 603 
  if (status != 0) 
                   #line 604 
                   _dev_err(dev,(char *)"could not add mac filters error %d\n",status); else 
                                                                    #line 606 
                                                                    vf->num_mac = (unsigned short)1U;
  #line 614 
  ice_alloc_vsi_res_exit: 
                          #line 614 
  ;
  #line 615 
  ice_free_fltr_list(dev,& tmp_add_list);
  #line 616 
  return status;
}

#line 623  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_virtchnl_pf.c"
static int ice_alloc_vf_res(struct ice_vf *vf)
{
  #line 632 
  int __UNIQUE_ID___x536;
  #line 632 
  int tmp_1;
  #line 626 
  int tx_rx_queue_left;
  #line 627 
  int status;
  #line 625 
  struct ice_pf *pf = vf->pf;
  {
    #line 632 
    __UNIQUE_ID___x536 = (int)ice_get_avail_txq_count(pf);
    #line 632 
    int __UNIQUE_ID___y537 = (int)ice_get_avail_rxq_count(pf);
    #line 632 
    if (__UNIQUE_ID___x536 < __UNIQUE_ID___y537) 
                                                 #line 632 
                                                 tmp_1 = __UNIQUE_ID___x536; else 
                                                                    #line 632 
                                                                    tmp_1 = __UNIQUE_ID___y537;
    }
  #line 632 
  tx_rx_queue_left = tmp_1;
  #line 634 
  tx_rx_queue_left += 4;
  #line 635 
  if (((unsigned int)vf->num_req_qs != 0U && (int)vf->num_req_qs <= tx_rx_queue_left) && (int)((unsigned short)vf->num_req_qs) != (int)vf->num_vf_qs) 
    #line 637 
    vf->num_vf_qs = (unsigned short)vf->num_req_qs;
  #line 640 
  status = ice_alloc_vsi_res(vf);
  #line 641 
  if (status != 0) 
                   #line 642 
                   goto ice_alloc_vf_res_exit;
  #line 644 
  if ((unsigned int)vf->trusted != 0U) 
                                       #line 645 
                                       cif_set_bit_8(1L,& vf->vf_caps); else 
                                                                    #line 647 
                                                                    cif_clear_bit_8(1L,& vf->vf_caps);
  #line 650 
  cif_set_bit_8(0L,(unsigned long *)(& vf->vf_states));
  #line 652 
  return status;
  #line 654 
  ice_alloc_vf_res_exit: 
                         #line 654 
  ;
  #line 655 
  ice_free_vf_res(vf);
  #line 656 
  return status;
}

#line 666  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_virtchnl_pf.c"
static void ice_ena_vf_mappings(struct ice_vf *vf)
{
  #line 668 
  int abs_vf_id;
  #line 668 
  int abs_first;
  #line 668 
  int abs_last;
  #line 670 
  struct ice_vsi *vsi;
  #line 671 
  struct device *dev;
  #line 672 
  int first;
  #line 672 
  int last;
  #line 672 
  int v;
  #line 673 
  struct ice_hw *hw;
  #line 674 
  u32 reg;
  #line 669 
  struct ice_pf *pf = vf->pf;
  #line 676 
  dev = & (pf->pdev)->dev;
  #line 677 
  hw = & pf->hw;
  #line 678 
  vsi = *(pf->vsi + (unsigned long)vf->lan_vsi_idx);
  #line 679 
  first = vf->first_vector_idx;
  #line 680 
  last = ((int)pf->num_vf_msix + first) + -1;
  #line 681 
  abs_first = (int)pf->hw.func_caps.common_cap.msix_vector_first_id + first;
  #line 682 
  abs_last = ((int)pf->num_vf_msix + abs_first) + -1;
  #line 683 
  abs_vf_id = (int)((unsigned int)vf->vf_id + hw->func_caps.vf_base_id);
  #line 686 
  reg = (unsigned int)((abs_first & 2047) | ((abs_last << 12) & 8384512)) | 2147483648U;
  #line 689 
  writel(reg,(void *)(hw->hw_addr + (unsigned long)(((int)vf->vf_id + 476160) * 4)));
  #line 691 
  reg = (unsigned int)((abs_first & 2047) | ((abs_last << 12) & 8384512)) | 2147483648U;
  #line 695 
  writel(reg,(void *)(hw->hw_addr + (unsigned long)(((int)vf->vf_id + 160768) * 4)));
  #line 697 
  v = first;
  #line 697 
  while (v <= last) {
    #line 698 
    reg = (unsigned int)((abs_vf_id & 255) | (((int)hw->pf_id << 12) & 28672));
    #line 702 
    writel(reg,(void *)(hw->hw_addr + (unsigned long)((v + 362496) * 4)));
    #line 697 
    v ++;
  }
  #line 708 
  writel(1073741824U,(void *)(hw->hw_addr + (unsigned long)((abs_vf_id + 370688) * 4)));
  #line 710 
  writel(1U,(void *)(hw->hw_addr + (unsigned long)(((int)vf->vf_id + 118272) * 4)));
  #line 713 
  if ((unsigned int)vsi->tx_mapping_mode == 0U) {
    #line 718 
    reg = (unsigned int)(((int)*(vsi->txq_map) & 16383) | ((((int)vsi->alloc_txq + -1) << 16) & 16711680));
    #line 722 
    writel(reg,(void *)(hw->hw_addr + (unsigned long)(((int)vf->vf_id + 476672) * 4)));
  }
  else 
       #line 724 
       _dev_err(dev,(char *)"Scattered mode for VF Tx queues is not yet implemented\n");
  #line 728 
  writel(1U,(void *)(hw->hw_addr + (unsigned long)(((int)vf->vf_id + 117760) * 4)));
  #line 731 
  if ((unsigned int)vsi->rx_mapping_mode == 0U) {
    #line 736 
    reg = (unsigned int)(((int)*(vsi->rxq_map) & 2047) | ((((int)vsi->alloc_txq + -1) << 16) & 16711680));
    #line 740 
    writel(reg,(void *)(hw->hw_addr + (unsigned long)(((int)vf->vf_id + 116736) * 4)));
  }
  else 
       #line 742 
       _dev_err(dev,(char *)"Scattered mode for VF Rx queues is not yet implemented\n");
  #line 743 
  return;
}

#line 757  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_virtchnl_pf.c"
static int ice_determine_res(struct ice_pf *pf, u16 avail_res, u16 max_res, u16 min_res)
{
  #line 760 
  int res;
  #line 759 
  bool checked_min_res = (_Bool)0;
  #line 769 
  res = (int)max_res;
  #line 770 
  while ((int)min_res <= res && ! checked_min_res) {
    #line 771 
    int num_all_res;
    #line 773 
    num_all_res = pf->num_alloc_vfs * res;
    #line 774 
    if ((int)avail_res >= num_all_res) 
                                       #line 775 
                                       return res;
    #line 777 
    if ((int)min_res == res) 
                             #line 778 
                             checked_min_res = (_Bool)1;
    #line 780 
    res = (res + 1) / 2;
  }
  #line 782 
  return 0;
}

#line 790  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_virtchnl_pf.c"
int ice_calc_vf_reg_idx(struct ice_vf *vf, struct ice_q_vector *q_vector)
{
  #line 792 
  struct ice_pf *pf;
  #line 794 
  if (vf == (struct ice_vf *)0 || q_vector == (struct ice_q_vector *)0) 
    #line 795 
    return -22;
  #line 797 
  pf = vf->pf;
  #line 801 
  return (((int)pf->sriov_base_vector + (int)pf->num_vf_msix * (int)vf->vf_id) + (int)q_vector->v_idx) + 1;
}

#line 813  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_virtchnl_pf.c"
static int ice_get_max_valid_res_idx(struct ice_res_tracker *res)
{
  #line 815 
  int i;
  #line 817 
  if (res == (struct ice_res_tracker *)0) 
                                          #line 818 
                                          return -22;
  #line 820 
  i = (int)res->num_entries + -1;
  #line 820 
  while (i >= 0) {
    #line 821 
    if (((int)res->list[i] & 32768) != 0) 
                                          #line 822 
                                          return i;
    #line 820 
    i --;
  }
  #line 824 
  return 0;
}

#line 845  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_virtchnl_pf.c"
static int ice_sriov_set_msix_res(struct ice_pf *pf, u16 num_msix_needed)
{
  #line 851 
  int sriov_base_vector;
  #line 847 
  int max_valid_res_idx = ice_get_max_valid_res_idx(pf->irq_tracker);
  #line 848 
  u16 pf_total_msix_vectors = pf->hw.func_caps.common_cap.num_msix_vectors;
  #line 850 
  struct ice_res_tracker *res = pf->irq_tracker;
  #line 853 
  if (max_valid_res_idx < 0) 
                             #line 854 
                             return max_valid_res_idx;
  #line 856 
  sriov_base_vector = (int)pf_total_msix_vectors - (int)num_msix_needed;
  #line 861 
  if (sriov_base_vector <= max_valid_res_idx) 
                                              #line 862 
                                              return -22;
  #line 864 
  pf->sriov_base_vector = (unsigned short)sriov_base_vector;
  #line 867 
  if ((int)num_msix_needed > (int)pf_total_msix_vectors - (int)res->num_entries) {
    #line 868 
    pf->num_avail_sw_msix -= (unsigned int)((int)res->num_entries - (int)pf->sriov_base_vector);
    #line 870 
    res->end = pf->sriov_base_vector;
  }
  #line 873 
  return 0;
}

#line 884  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_virtchnl_pf.c"
static int ice_check_avail_res(struct ice_pf *pf)
{
  #line 952 
  int __UNIQUE_ID___x538;
  #line 952 
  int tmp_7;
  #line 887 
  u16 num_msix;
  #line 887 
  u16 num_txq;
  #line 887 
  u16 num_rxq;
  #line 887 
  u16 num_avail_msix;
  #line 886 
  int max_valid_res_idx = ice_get_max_valid_res_idx(pf->irq_tracker);
  #line 888 
  struct device *dev = & (pf->pdev)->dev;
  #line 890 
  if (pf->num_alloc_vfs == 0 || max_valid_res_idx < 0) 
                                                       #line 891 
                                                       return -22;
  #line 894 
  num_avail_msix = (unsigned short)((unsigned int)((int)pf->hw.func_caps.common_cap.num_msix_vectors - (int)((unsigned short)max_valid_res_idx)) + 65535U);
  #line 912 
  if (pf->num_alloc_vfs <= 16) {
    #line 913 
    num_msix = (unsigned short)ice_determine_res(pf,(unsigned short)((int)num_avail_msix),
                          (unsigned short)65,(unsigned short)2);
  }
  else 
    #line 916 
    if (pf->num_alloc_vfs <= 256) {
      #line 917 
      num_msix = (unsigned short)ice_determine_res(pf,(unsigned short)((int)num_avail_msix),
                          (unsigned short)5,(unsigned short)2);
    }
    else {
      #line 921 
      _dev_err(dev,(char *)"Number of VFs %d exceeds max VF count %d\n",pf->num_alloc_vfs,256);
      #line 923 
      return -5;
    }
  #line 926 
  if ((unsigned int)num_msix == 0U) 
                                    #line 927 
                                    return -5;
  #line 936 
  ;
  #line 936 
  num_txq = (unsigned short)ice_determine_res(pf,
                          (unsigned short)((int)ice_get_avail_txq_count(pf)),
                          (unsigned short)4,(unsigned short)1);
  #line 939 
  ;
  #line 939 
  num_rxq = (unsigned short)ice_determine_res(pf,
                          (unsigned short)((int)ice_get_avail_rxq_count(pf)),
                          (unsigned short)4,(unsigned short)1);
  #line 942 
  if ((unsigned int)num_txq == 0U || (unsigned int)num_rxq == 0U) 
                                                                  #line 943 
                                                                  return -5;
  #line 945 
  if (ice_sriov_set_msix_res(pf,
                               (unsigned short)((int)((unsigned short)pf->num_alloc_vfs) * (int)num_msix)) != 0) 
    #line 946 
    return -22;
  {
    #line 952 
    __UNIQUE_ID___x538 = (int)num_txq;
    #line 952 
    int __UNIQUE_ID___y539 = (int)num_rxq;
    #line 952 
    if (__UNIQUE_ID___x538 < __UNIQUE_ID___y539) 
                                                 #line 952 
                                                 tmp_7 = __UNIQUE_ID___x538; else 
                                                                    #line 952 
                                                                    tmp_7 = __UNIQUE_ID___y539;
    }
  #line 952 
  pf->num_vf_qps = (unsigned short)tmp_7;
  #line 953 
  pf->num_vf_msix = num_msix;
  #line 955 
  return 0;
}

#line 967  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_virtchnl_pf.c"
static void ice_cleanup_and_realloc_vf(struct ice_vf *vf)
{
  #line 970 
  struct ice_hw *hw;
  #line 971 
  u32 reg;
  #line 969 
  struct ice_pf *pf = vf->pf;
  #line 973 
  hw = & pf->hw;
  #line 988 
  reg = readl((void *)(hw->hw_addr + (unsigned long)(((int)vf->vf_id + 147456) * 4)));
  #line 989 
  reg &= 4294967294U;
  #line 990 
  writel(reg,(void *)(hw->hw_addr + (unsigned long)(((int)vf->vf_id + 147456) * 4)));
  #line 993 
  if (ice_alloc_vf_res(vf) == 0) {
    #line 994 
    ice_ena_vf_mappings(vf);
    #line 995 
    cif_set_bit_8(1L,(unsigned long *)(& vf->vf_states));
    #line 996 
    cif_clear_bit_8(3L,(unsigned long *)(& vf->vf_states));
    #line 997 
    vf->num_vlan = (unsigned short)0U;
  }
  #line 1004 
  writel(2U,(void *)(hw->hw_addr + (unsigned long)(((int)vf->vf_id + 118784) * 4)));
  #line 1005 
  return;
}

#line 1018  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_virtchnl_pf.c"
static enum ice_status ice_vf_set_vsi_promisc(struct ice_vf *vf, struct ice_vsi *vsi, u8 promisc_m, bool rm_promisc)
{
  #line 1023 
  struct ice_hw *hw;
  #line 1021 
  struct ice_pf *pf = vf->pf;
  #line 1022 
  enum ice_status status = 0;
  #line 1025 
  hw = & pf->hw;
  #line 1026 
  if ((unsigned int)vf->num_vlan != 0U) 
                                        #line 1027 
                                        status = ice_set_vlan_vsi_promisc(hw,(unsigned short)((int)vsi->idx),(unsigned char)((int)promisc_m),(_Bool)((bool)((int)rm_promisc) != 0));
  else 
    #line 1029 
    if ((unsigned int)vf->port_vlan_id != 0U) 
      #line 1030 
      if ((int)rm_promisc != 0) 
                                #line 1031 
                                status = ice_clear_vsi_promisc(hw,(unsigned short)((int)vsi->idx),(unsigned char)((int)promisc_m),(unsigned short)((int)vf->port_vlan_id)); else 
                                                                    #line 1034 
                                                                    status = ice_set_vsi_promisc(hw,(unsigned short)((int)vsi->idx),(unsigned char)((int)promisc_m),(unsigned short)((int)vf->port_vlan_id));
    else 
      #line 1037 
      if ((int)rm_promisc != 0) 
                                #line 1038 
                                status = ice_clear_vsi_promisc(hw,(unsigned short)((int)vsi->idx),(unsigned char)((int)promisc_m),(unsigned short)0); else 
                                                                    #line 1041 
                                                                    status = ice_set_vsi_promisc(hw,(unsigned short)((int)vsi->idx),(unsigned char)((int)promisc_m),(unsigned short)0);
  #line 1045 
  return status;
}

#line 1057  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_virtchnl_pf.c"
static bool ice_config_res_vfs(struct ice_pf *pf)
{
  #line 1061 
  int v;
  #line 1059 
  struct device *dev = & (pf->pdev)->dev;
  #line 1060 
  struct ice_hw *hw = & pf->hw;
  #line 1063 
  if (ice_check_avail_res(pf) != 0) {
    #line 1064 
    _dev_err(dev,(char *)"Cannot allocate VF resources, try with fewer number of VFs\n");
    #line 1065 
    return (_Bool)0;
  }
  #line 1069 
  if ((int)test_and_clear_bit(24L,(unsigned long *)(& pf->state)) != 0) 
    #line 1070 
    ice_irq_dynamic_ena(hw,(struct ice_vsi *)0,(struct ice_q_vector *)0);
  #line 1073 
  v = 0;
  #line 1073 
  while (pf->num_alloc_vfs > v) {
    {
      #line 1074 
      struct ice_vf *vf = pf->vf + (unsigned long)v;
      #line 1076 
      vf->num_vf_qs = pf->num_vf_qps;
      {
        #line 1077 
        bool branch;
        #line 1077 
        struct _ddebug __UNIQUE_ID_ddebug540 = {.modname = (char *)"ice", .function = (char *)"ice_config_res_vfs", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_virtchnl_pf.c", .format = (char *)"VF-id %d has %d queues configured\n", .lineno = (unsigned int)1077U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
        #line 1077 
        branch = arch_static_branch(& __UNIQUE_ID_ddebug540.key.dd_key_false.key,(_Bool)0);
        #line 1077 
        if ((long)((long)((int)branch != 0)) != 0L) 
                                                    #line 1077 
                                                    __dynamic_dev_dbg(& __UNIQUE_ID_ddebug540,dev,(char *)"VF-id %d has %d queues configured\n",(int)vf->vf_id,(int)vf->num_vf_qs);
      }
      #line 1079 
      ice_cleanup_and_realloc_vf(vf);
    }
    #line 1073 
    v ++;
  }
  #line 1082 
  readl((void *)(hw->hw_addr + 745772U));
  #line 1083 
  cif_clear_bit_8(20L,(unsigned long *)(& pf->state));
  #line 1085 
  return (_Bool)1;
}

#line 1100  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_virtchnl_pf.c"
bool ice_reset_all_vfs(struct ice_pf *pf, bool is_vflr)
{
  #line 1104 
  struct ice_vf *vf;
  #line 1105 
  int v;
  #line 1105 
  int i;
  #line 1102 
  struct device *dev = & (pf->pdev)->dev;
  #line 1103 
  struct ice_hw *hw = & pf->hw;
  #line 1108 
  if (pf->num_alloc_vfs == 0) 
                              #line 1109 
                              return (_Bool)0;
  #line 1112 
  if ((int)test_and_clear_bit(20L,(unsigned long *)(& pf->state)) != 0) 
    #line 1113 
    return (_Bool)0;
  #line 1116 
  v = 0;
  #line 1116 
  while (pf->num_alloc_vfs > v) {
    #line 1117 
    ice_trigger_vf_reset(pf->vf + (unsigned long)v,(_Bool)((bool)((int)is_vflr) != 0),(_Bool)1);
    #line 1116 
    v ++;
  }
  #line 1119 
  v = 0;
  #line 1119 
  while (pf->num_alloc_vfs > v) {
    {
      #line 1120 
      struct ice_vsi *vsi;
      #line 1122 
      vf = pf->vf + (unsigned long)v;
      #line 1123 
      vsi = *(pf->vsi + (unsigned long)vf->lan_vsi_idx);
      #line 1124 
      if ((int)test_bit(2L,(unsigned long *)(& vf->vf_states)) != 0) 
        #line 1125 
        ice_dis_vf_qs(vf);
      #line 1126 
      ice_dis_vsi_txq(vsi->port_info,(unsigned short)((int)vsi->idx),(unsigned char)0,(unsigned char)0,(u16 *)0U,(u16 *)0U,(u32 *)0U,(enum ice_disq_rst_src)ICE_VF_RESET,(unsigned short)((int)((unsigned short)vf->vf_id)),(struct ice_sq_cd *)0);
    }
    #line 1119 
    v ++;
  }
  #line 1136 
  i = 0;
  #line 1136 
  v = 0;
  #line 1136 
  while (i <= 9 && pf->num_alloc_vfs > v) {
    #line 1139 
    while (pf->num_alloc_vfs > v) {
      #line 1140 
      u32 reg;
      #line 1142 
      vf = pf->vf + (unsigned long)v;
      #line 1143 
      reg = readl((void *)(hw->hw_addr + (unsigned long)(((int)vf->vf_id + 147968) * 4)));
      #line 1144 
      if (((unsigned long)reg & 1UL) == 0UL) {
        #line 1146 
        usleep_range(10UL,20UL);
        #line 1147 
        break;
      }
      #line 1153 
      v ++;
    }
    #line 1136 
    i ++;
  }
  #line 1160 
  if (pf->num_alloc_vfs > v) 
                             #line 1161 
                             _dev_warn(dev,(char *)"VF reset check timeout\n");
  #line 1164 
  v = 0;
  #line 1164 
  while (pf->num_alloc_vfs > v) {
    #line 1165 
    vf = pf->vf + (unsigned long)v;
    #line 1167 
    ice_free_vf_res(vf);
    #line 1174 
    vf->num_vf_qs = (unsigned short)0U;
    #line 1164 
    v ++;
  }
  #line 1177 
  if (ice_sriov_free_msix_res(pf) != 0) 
                                        #line 1178 
                                        _dev_err(dev,(char *)"Failed to free MSIX resources used by SR-IOV\n");
  #line 1180 
  if (! ice_config_res_vfs(pf)) 
                                #line 1181 
                                return (_Bool)0;
  #line 1183 
  return (_Bool)1;
}

#line 1192  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_virtchnl_pf.c"
static bool ice_is_vf_disabled(struct ice_vf *vf)
{
  #line 1201 
  int tmp_1;
  #line 1194 
  struct ice_pf *pf = vf->pf;
  #line 1201 
  if ((int)test_bit(20L,(unsigned long *)(& pf->state)) != 0) 
                                                              #line 1201 
                                                              tmp_1 = 1;
  else {
    #line 1201 
    if ((int)test_bit(3L,(unsigned long *)(& vf->vf_states)) != 0) 
                                                                   #line 1201 
                                                                   tmp_1 = 1; else 
                                                                    #line 1201 
                                                                    tmp_1 = 0;
  }
  #line 1201 
  return (_Bool)(tmp_1 != 0);
}

#line 1212  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_virtchnl_pf.c"
static bool ice_reset_vf(struct ice_vf *vf, bool is_vflr)
{
  #line 1215 
  struct ice_vsi *vsi;
  #line 1216 
  struct device *dev;
  #line 1217 
  struct ice_hw *hw;
  #line 1219 
  u8 promisc_m;
  #line 1220 
  u32 reg;
  #line 1221 
  int i;
  #line 1214 
  struct ice_pf *pf = vf->pf;
  #line 1218 
  bool rsd = (_Bool)0;
  #line 1223 
  dev = & (pf->pdev)->dev;
  #line 1225 
  if ((int)ice_is_vf_disabled(vf) != 0) {
    {
      #line 1226 
      bool branch;
      #line 1226 
      struct _ddebug __UNIQUE_ID_ddebug541 = {.modname = (char *)"ice", .function = (char *)"ice_reset_vf", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_virtchnl_pf.c", .format = (char *)"VF is already disabled, there is no need for resetting it, telling VM, all is fine %d\n", .lineno = (unsigned int)1226U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 1226 
      branch = arch_static_branch(& __UNIQUE_ID_ddebug541.key.dd_key_false.key,(_Bool)0);
      #line 1226 
      if ((long)((long)((int)branch != 0)) != 0L) 
                                                  #line 1226 
                                                  __dynamic_dev_dbg(& __UNIQUE_ID_ddebug541,dev,(char *)"VF is already disabled, there is no need for resetting it, telling VM, all is fine %d\n",(int)vf->vf_id);
    }
    #line 1228 
    return (_Bool)1;
  }
  #line 1232 
  cif_set_bit_8(3L,(unsigned long *)(& vf->vf_states));
  #line 1233 
  ice_trigger_vf_reset(vf,(_Bool)((bool)((int)is_vflr) != 0),(_Bool)0);
  #line 1235 
  vsi = *(pf->vsi + (unsigned long)vf->lan_vsi_idx);
  #line 1237 
  if ((int)test_bit(2L,(unsigned long *)(& vf->vf_states)) != 0) 
                                                                 #line 1238 
                                                                 ice_dis_vf_qs(vf);
  #line 1243 
  ice_dis_vsi_txq(vsi->port_info,(unsigned short)((int)vsi->idx),(unsigned char)0,(unsigned char)0,(u16 *)0U,(u16 *)0U,(u32 *)0U,(enum ice_disq_rst_src)ICE_VF_RESET,(unsigned short)((int)((unsigned short)vf->vf_id)),(struct ice_sq_cd *)0);
  #line 1246 
  hw = & pf->hw;
  #line 1250 
  i = 0;
  #line 1250 
  while (i <= 9) {
    #line 1255 
    reg = readl((void *)(hw->hw_addr + (unsigned long)(((int)vf->vf_id + 147968) * 4)));
    #line 1256 
    if (((unsigned long)reg & 1UL) != 0UL) {
      #line 1257 
      rsd = (_Bool)1;
      #line 1258 
      break;
    }
    #line 1262 
    usleep_range(10UL,20UL);
    #line 1250 
    i ++;
  }
  #line 1268 
  if (! rsd) 
             #line 1269 
             _dev_warn(dev,(char *)"VF reset check timeout on VF %d\n",(int)vf->vf_id);
  #line 1274 
  if ((int)test_bit(5L,(unsigned long *)(& vf->vf_states)) != 0) 
                                                                 #line 1274 
                                                                 goto _LOR;
  else {
    #line 1274 
    if ((int)test_bit(4L,(unsigned long *)(& vf->vf_states)) != 0) {
      #line 1274 
      _LOR: {
              #line 1276 
              if ((unsigned int)vf->port_vlan_id != 0U || (unsigned int)vf->num_vlan != 0U) 
                #line 1277 
                promisc_m = (unsigned char)207U; else 
                                                      #line 1279 
                                                      promisc_m = (unsigned char)15U;
              #line 1281 
              vsi = *(pf->vsi + (unsigned long)vf->lan_vsi_idx);
              #line 1282 
              if (ice_vf_set_vsi_promisc(vf,vsi,(unsigned char)((int)promisc_m),
                               (_Bool)1) != ICE_SUCCESS) 
                #line 1283 
                _dev_err(dev,(char *)"disabling promiscuous mode failed\n");
            }
    }
  }
  #line 1287 
  ice_free_vf_res(vf);
  #line 1289 
  ice_cleanup_and_realloc_vf(vf);
  #line 1291 
  readl((void *)(hw->hw_addr + 745772U));
  #line 1293 
  return (_Bool)1;
}

#line 1300  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_virtchnl_pf.c"
void ice_vc_notify_link_state(struct ice_pf *pf)
{
  #line 1302 
  int i;
  #line 1304 
  i = 0;
  #line 1304 
  while (pf->num_alloc_vfs > i) {
    #line 1305 
    ice_vc_notify_vf_link_state(pf->vf + (unsigned long)i);
    #line 1304 
    i ++;
  }
  #line 1306 
  return;
}

#line 1314  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_virtchnl_pf.c"
void ice_vc_notify_reset(struct ice_pf *pf)
{
  #line 1316 
  struct virtchnl_pf_event pfe;
  #line 1318 
  if (pf->num_alloc_vfs == 0) 
                              #line 1319 
                              return;
  #line 1321 
  pfe.event = VIRTCHNL_EVENT_RESET_IMPENDING;
  #line 1322 
  pfe.severity = 255;
  #line 1323 
  ice_vc_vf_broadcast(pf,(enum virtchnl_ops)VIRTCHNL_OP_EVENT,(enum virtchnl_status_code)VIRTCHNL_STATUS_SUCCESS,(u8 *)(& pfe),(unsigned short)16);
  #line 1325 
  return;
}

#line 1331  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_virtchnl_pf.c"
static void ice_vc_notify_vf_reset(struct ice_vf *vf)
{
  #line 1333 
  struct virtchnl_pf_event pfe;
  #line 1334 
  struct ice_pf *pf;
  #line 1336 
  if (vf == (struct ice_vf *)0) 
                                #line 1337 
                                return;
  #line 1339 
  pf = vf->pf;
  #line 1340 
  if (ice_validate_vf_id(pf,(int)vf->vf_id) != 0) 
                                                  #line 1341 
                                                  return;
  #line 1346 
  if (test_bit(0L,(unsigned long *)(& vf->vf_states))) {
    #line 1346 
    _LAND: 
    #line 1347 
    if ((int)test_bit(3L,(unsigned long *)(& vf->vf_states)) != 0) 
                                                                   #line 1349 
                                                                   return;
  }
  else {
    #line 1347 
    if (test_bit(1L,(unsigned long *)(& vf->vf_states))) 
                                                         #line 1346 
                                                         goto _LAND; else 
                                                                    #line 1349 
                                                                    return;
  }
  #line 1351 
  pfe.event = VIRTCHNL_EVENT_RESET_IMPENDING;
  #line 1352 
  pfe.severity = 255;
  #line 1353 
  ice_aq_send_msg_to_vf(& pf->hw,(unsigned short)((int)((unsigned short)vf->vf_id)),17U,0U,(u8 *)(& pfe),(unsigned short)16,(struct ice_sq_cd *)0);
  #line 1355 
  return;
}

#line 1363  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_virtchnl_pf.c"
static int ice_alloc_vfs(struct ice_pf *pf, u16 num_alloc_vfs)
{
  #line 1367 
  struct ice_vf *vfs;
  #line 1368 
  int i;
  #line 1368 
  int ret;
  #line 1365 
  struct device *dev = & (pf->pdev)->dev;
  #line 1366 
  struct ice_hw *hw = & pf->hw;
  #line 1371 
  writel(24U,(void *)(hw->hw_addr + (unsigned long)((pf->oicr_idx + 360448U) * 4U)));
  #line 1373 
  cif_set_bit_8(24L,(unsigned long *)(& pf->state));
  #line 1374 
  readl((void *)(hw->hw_addr + 745772U));
  #line 1376 
  ret = pci_enable_sriov(pf->pdev,(int)num_alloc_vfs);
  #line 1377 
  if (ret != 0) {
    #line 1378 
    pf->num_alloc_vfs = 0;
    #line 1379 
    goto err_unroll_intr;
  }
  #line 1382 
  vfs = (struct ice_vf *)cif_devm_kcalloc_6(dev,(unsigned long)num_alloc_vfs,136UL,3264U);
  #line 1383 
  if (vfs == (struct ice_vf *)0) {
    #line 1384 
    ret = -12;
    #line 1385 
    goto err_pci_disable_sriov;
  }
  #line 1387 
  pf->vf = vfs;
  #line 1390 
  i = 0;
  #line 1390 
  while ((int)num_alloc_vfs > i) {
    #line 1391 
    (vfs + (unsigned long)i)->pf = pf;
    #line 1392 
    (vfs + (unsigned long)i)->vf_sw_id = pf->first_sw;
    #line 1393 
    (vfs + (unsigned long)i)->vf_id = (short)i;
    #line 1396 
    cif_set_bit_8(0L,& (vfs + (unsigned long)i)->vf_caps);
    #line 1397 
    (vfs + (unsigned long)i)->spoofchk = (unsigned char)1U;
    #line 1390 
    i ++;
  }
  #line 1399 
  pf->num_alloc_vfs = (int)num_alloc_vfs;
  #line 1402 
  if (! ice_config_res_vfs(pf)) {
    #line 1403 
    ret = -5;
    #line 1404 
    goto err_unroll_sriov;
  }
  #line 1407 
  return ret;
  #line 1409 
  err_unroll_sriov: 
                    #line 1409 
  ;
  #line 1410 
  pf->vf = (struct ice_vf *)0;
  #line 1411 
  devm_kfree(dev,(void *)vfs);
  #line 1412 
  vfs = (struct ice_vf *)0;
  #line 1413 
  pf->num_alloc_vfs = 0;
  #line 1414 
  err_pci_disable_sriov: 
                         #line 1414 
  ;
  #line 1415 
  pci_disable_sriov(pf->pdev);
  #line 1416 
  err_unroll_intr: 
                   #line 1416 
  ;
  #line 1418 
  ice_irq_dynamic_ena(hw,(struct ice_vsi *)0,(struct ice_q_vector *)0);
  #line 1419 
  cif_clear_bit_8(24L,(unsigned long *)(& pf->state));
  #line 1420 
  return ret;
}

#line 1434  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_virtchnl_pf.c"
static bool ice_pf_state_is_nominal(struct ice_pf *pf)
{
  #line 1436 
  unsigned long check_bits[1U] = {0UL};
  #line 1438 
  if (pf == (struct ice_pf *)0) 
                                #line 1439 
                                return (_Bool)0;
  #line 1441 
  cif_bitmap_set_0((unsigned long *)(& check_bits),0U,14U);
  #line 1442 
  if (bitmap_intersects((unsigned long *)(& pf->state),
                        (unsigned long *)(& check_bits),25U) != 0) 
    #line 1443 
    return (_Bool)0;
  #line 1445 
  return (_Bool)1;
}

#line 1453  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_virtchnl_pf.c"
static int ice_pci_sriov_ena(struct ice_pf *pf, int num_vfs)
{
  #line 1457 
  int err;
  #line 1455 
  int pre_existing_vfs = pci_num_vf(pf->pdev);
  #line 1456 
  struct device *dev = & (pf->pdev)->dev;
  #line 1459 
  if (! ice_pf_state_is_nominal(pf)) {
    #line 1460 
    _dev_err(dev,(char *)"Cannot enable SR-IOV, device not ready\n");
    #line 1461 
    return -16;
  }
  #line 1464 
  if (! test_bit(3L,(unsigned long *)(& pf->flags))) {
    #line 1465 
    _dev_err(dev,(char *)"This device is not capable of SR-IOV\n");
    #line 1466 
    return -95;
  }
  #line 1469 
  if (pre_existing_vfs != 0 && pre_existing_vfs != num_vfs) 
                                                            #line 1470 
                                                            ice_free_vfs(pf);
  else 
    #line 1471 
    if (pre_existing_vfs != 0 && pre_existing_vfs == num_vfs) 
                                                              #line 1472 
                                                              return num_vfs;
  #line 1474 
  if ((int)pf->num_vfs_supported < num_vfs) {
    #line 1475 
    _dev_err(dev,(char *)"Can\'t enable %d VFs, max VFs supported is %d\n",num_vfs,(int)pf->num_vfs_supported);
    #line 1477 
    return -524;
  }
  #line 1480 
  _dev_info(dev,(char *)"Allocating %d VFs\n",num_vfs);
  #line 1481 
  err = ice_alloc_vfs(pf,(unsigned short)((int)((unsigned short)num_vfs)));
  #line 1482 
  if (err != 0) {
    #line 1483 
    _dev_err(dev,(char *)"Failed to enable SR-IOV: %d\n",err);
    #line 1484 
    return err;
  }
  #line 1487 
  cif_set_bit_8(2L,(unsigned long *)(& pf->flags));
  #line 1488 
  return num_vfs;
}

#line 1498  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_virtchnl_pf.c"
int ice_sriov_configure(struct pci_dev *pdev, int num_vfs)
{
  #line 1500 
  struct ice_pf *pf = pci_get_drvdata(pdev);
  #line 1501 
  struct device *dev = & (pf->pdev)->dev;
  #line 1503 
  if ((int)ice_is_safe_mode(pf) != 0) {
    #line 1504 
    _dev_err(dev,(char *)"SR-IOV cannot be configured - Device is in Safe Mode\n");
    #line 1505 
    return -95;
  }
  #line 1508 
  if (num_vfs != 0) {
    #line 1509 
    return ice_pci_sriov_ena(pf,num_vfs);
  }
  #line 1511 
  if (pci_vfs_assigned(pdev) == 0) 
                                   #line 1512 
                                   ice_free_vfs(pf);
  else {
    #line 1514 
    _dev_err(dev,(char *)"can\'t free VFs because some are assigned to VMs.\n");
    #line 1515 
    return -16;
  }
  #line 1518 
  return 0;
}

#line 1528  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_virtchnl_pf.c"
void ice_process_vflr_event(struct ice_pf *pf)
{
  #line 1531 
  int vf_id;
  #line 1532 
  u32 reg;
  #line 1530 
  struct ice_hw *hw = & pf->hw;
  #line 1534 
  if (test_and_clear_bit(18L,(unsigned long *)(& pf->state))) {
    #line 1534 
    if (pf->num_alloc_vfs == 0) 
                                #line 1536 
                                return;
  }
  else 
       #line 1536 
       return;
  #line 1538 
  vf_id = 0;
  #line 1538 
  while (pf->num_alloc_vfs > vf_id) {
    {
      #line 1540 
      u32 reg_idx;
      #line 1540 
      u32 bit_idx;
      #line 1539 
      struct ice_vf *vf = pf->vf + (unsigned long)vf_id;
      #line 1542 
      reg_idx = (hw->func_caps.vf_base_id + (unsigned int)vf_id) / 32U;
      #line 1543 
      bit_idx = (hw->func_caps.vf_base_id + (unsigned int)vf_id) & 31U;
      #line 1545 
      reg = readl((void *)(hw->hw_addr + (unsigned long)((reg_idx + 151169U) * 4U)));
      #line 1546 
      if ((((unsigned long)reg >> bit_idx) & 1UL) != 0UL) 
                                                          #line 1548 
                                                          ice_reset_vf(vf,(_Bool)1);
    }
    #line 1538 
    vf_id ++;
  }
  #line 1550 
  return;
}

#line 1556  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_virtchnl_pf.c"
static void ice_vc_reset_vf(struct ice_vf *vf)
{
  #line 1558 
  ice_vc_notify_vf_reset(vf);
  #line 1559 
  ice_reset_vf(vf,(_Bool)0);
  #line 1560 
  return;
}

#line 1573  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_virtchnl_pf.c"
static int ice_vc_send_msg_to_vf(struct ice_vf *vf, u32 v_opcode, enum virtchnl_status_code v_retval, u8 *msg, u16 msglen)
{
  #line 1576 
  enum ice_status aq_ret;
  #line 1577 
  struct device *dev;
  #line 1578 
  struct ice_pf *pf;
  #line 1580 
  if (vf == (struct ice_vf *)0) 
                                #line 1581 
                                return -22;
  #line 1583 
  pf = vf->pf;
  #line 1584 
  if (ice_validate_vf_id(pf,(int)vf->vf_id) != 0) 
                                                  #line 1585 
                                                  return -22;
  #line 1587 
  dev = & (pf->pdev)->dev;
  #line 1590 
  if (v_retval != VIRTCHNL_STATUS_SUCCESS) {
    #line 1591 
    (vf->num_inval_msgs) ++;
    #line 1592 
    _dev_info(dev,(char *)"VF %d failed opcode %d, retval: %d\n",(int)vf->vf_id,v_opcode,(int)v_retval);
    #line 1594 
    if (vf->num_inval_msgs > 10ULL) {
      #line 1595 
      _dev_err(dev,(char *)"Number of invalid messages exceeded for VF %d\n",(int)vf->vf_id);
      #line 1598 
      _dev_err(dev,(char *)"Use PF Control I/F to enable the VF\n");
      #line 1599 
      cif_set_bit_8(3L,(unsigned long *)(& vf->vf_states));
      #line 1600 
      return -5;
    }
  }
  else {
    #line 1603 
    (vf->num_valid_msgs) ++;
    #line 1605 
    vf->num_inval_msgs = 0ULL;
  }
  #line 1608 
  aq_ret = ice_aq_send_msg_to_vf(& pf->hw,(unsigned short)((int)((unsigned short)vf->vf_id)),v_opcode,(unsigned int)v_retval,msg,(unsigned short)((int)msglen),(struct ice_sq_cd *)0);
  #line 1610 
  if (aq_ret != ICE_SUCCESS && pf->hw.mailboxq.sq_last_status != (unsigned int)ICE_AQ_RC_ENOSYS) {
    #line 1611 
    _dev_info(dev,(char *)"Unable to send the message to VF %d ret %d aq_err %d\n",(int)vf->vf_id,(int)aq_ret,(unsigned int)pf->hw.mailboxq.sq_last_status);
    #line 1614 
    return -5;
  }
  #line 1617 
  return 0;
}

#line 1627  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_virtchnl_pf.c"
static int ice_vc_get_ver_msg(struct ice_vf *vf, u8 *msg)
{
  #line 1629 
  struct virtchnl_version_info info = {.major = 1U, .minor = 1U};
  #line 1633 
  vf->vf_ver = *((struct virtchnl_version_info *)msg);
  #line 1635 
  if (vf->vf_ver.major == 1U && vf->vf_ver.minor == 0U) 
                                                        #line 1636 
                                                        info.minor = 0U;
  #line 1638 
  return ice_vc_send_msg_to_vf(vf,1U,
                            (enum virtchnl_status_code)VIRTCHNL_STATUS_SUCCESS,
                            (u8 *)(& info),(unsigned short)8);
}

#line 1650  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_virtchnl_pf.c"
static int ice_vc_get_vf_res_msg(struct ice_vf *vf, u8 *msg)
{
  #line 1655 
  struct ice_vsi *vsi;
  #line 1657 
  int ret;
  #line 1652 
  enum virtchnl_status_code v_ret = 0;
  #line 1653 
  struct virtchnl_vf_resource *vfres = (struct virtchnl_vf_resource *)0;
  #line 1654 
  struct ice_pf *pf = vf->pf;
  #line 1656 
  int len = 0;
  #line 1659 
  if (ice_check_vf_init(pf,vf) != 0) {
    #line 1660 
    v_ret = VIRTCHNL_STATUS_ERR_PARAM;
    #line 1661 
    goto err;
  }
  #line 1664 
  len = 36;
  #line 1666 
  vfres = (struct virtchnl_vf_resource *)kzalloc_5((unsigned long)len,3264U);
  #line 1667 
  if (vfres == (struct virtchnl_vf_resource *)0) {
    #line 1668 
    v_ret = VIRTCHNL_STATUS_ERR_NO_MEMORY;
    #line 1669 
    len = 0;
    #line 1670 
    goto err;
  }
  #line 1672 
  if (vf->vf_ver.major == 1U && vf->vf_ver.minor == 1U) 
                                                        #line 1673 
                                                        vf->driver_caps = *((u32 *)msg); else 
                                                                    #line 1675 
                                                                    vf->driver_caps = 65553U;
  #line 1679 
  vfres->vf_cap_flags = 1U;
  #line 1680 
  vsi = *(pf->vsi + (unsigned long)vf->lan_vsi_idx);
  #line 1681 
  if (vsi == (struct ice_vsi *)0) {
    #line 1682 
    v_ret = VIRTCHNL_STATUS_ERR_PARAM;
    #line 1683 
    goto err;
  }
  #line 1686 
  if ((unsigned int)vsi->info.pvid == 0U) 
                                          #line 1687 
                                          vfres->vf_cap_flags |= 65536U;
  #line 1689 
  if ((vf->driver_caps & 524288U) != 0U) 
                                         #line 1690 
                                         vfres->vf_cap_flags |= 524288U;
  else 
    #line 1692 
    if ((vf->driver_caps & 8U) != 0U) 
                                      #line 1693 
                                      vfres->vf_cap_flags |= 8U; else 
                                                                   #line 1695 
                                                                   vfres->vf_cap_flags |= 16U;
  #line 1698 
  if ((vf->driver_caps & 262144U) != 0U) 
                                         #line 1699 
                                         vfres->vf_cap_flags |= 262144U;
  #line 1701 
  if ((vf->driver_caps & 1048576U) != 0U) 
                                          #line 1702 
                                          vfres->vf_cap_flags |= 1048576U;
  #line 1704 
  if ((vf->driver_caps & 2097152U) != 0U) 
                                          #line 1705 
                                          vfres->vf_cap_flags |= 2097152U;
  #line 1707 
  if ((vf->driver_caps & 131072U) != 0U) 
                                         #line 1708 
                                         vfres->vf_cap_flags |= 131072U;
  #line 1710 
  if ((vf->driver_caps & 32U) != 0U) 
                                     #line 1711 
                                     vfres->vf_cap_flags |= 32U;
  #line 1713 
  if ((vf->driver_caps & 64U) != 0U) 
                                     #line 1714 
                                     vfres->vf_cap_flags |= 64U;
  #line 1716 
  if ((vf->driver_caps & 128U) != 0U) 
                                      #line 1717 
                                      vfres->vf_cap_flags |= 128U;
  #line 1719 
  vfres->num_vsis = (unsigned short)1U;
  #line 1721 
  vfres->num_queue_pairs = vsi->num_txq;
  #line 1722 
  vfres->max_vectors = pf->num_vf_msix;
  #line 1723 
  vfres->rss_key_size = 52U;
  #line 1724 
  vfres->rss_lut_size = 64U;
  #line 1726 
  vfres->vsi_res[0].vsi_id = vf->lan_vsi_num;
  #line 1727 
  vfres->vsi_res[0].vsi_type = VIRTCHNL_VSI_SRIOV;
  #line 1728 
  vfres->vsi_res[0].num_queue_pairs = vsi->num_txq;
  #line 1729 
  ether_addr_copy((u8 *)(& vfres->vsi_res[0].default_mac_addr),(u8 *)(& vf->dflt_lan_addr.addr));
  #line 1733 
  vf->driver_caps = vfres->vf_cap_flags;
  #line 1735 
  cif_set_bit_8(1L,(unsigned long *)(& vf->vf_states));
  #line 1737 
  err: 
       #line 1737 
  ;
  #line 1739 
  ret = ice_vc_send_msg_to_vf(vf,3U,v_ret,(u8 *)vfres,(unsigned short)((int)((unsigned short)len)));
  #line 1742 
  kfree((void *)vfres);
  #line 1743 
  return ret;
}

#line 1754  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_virtchnl_pf.c"
static void ice_vc_reset_vf_msg(struct ice_vf *vf)
{
  #line 1756 
  if ((int)test_bit(1L,(unsigned long *)(& vf->vf_states)) != 0) 
                                                                 #line 1757 
                                                                 ice_reset_vf(vf,(_Bool)0);
  #line 1758 
  return;
}

#line 1767  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_virtchnl_pf.c"
static struct ice_vsi *ice_find_vsi_from_id(struct ice_pf *pf, u16 id)
{
  #line 1769 
  int i;
  #line 1771 
  i = 0;
  #line 1771 
  while ((int)pf->num_alloc_vsi > i) {
    #line 1772 
    if (*(pf->vsi + (unsigned long)i) != (struct ice_vsi *)0 && (int)(*(pf->vsi + (unsigned long)i))->vsi_num == (int)id) 
      #line 1773 
      return *(pf->vsi + (unsigned long)i);
    #line 1771 
    i ++;
  }
  #line 1775 
  return (struct ice_vsi *)0;
}

#line 1785  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_virtchnl_pf.c"
static bool ice_vc_isvalid_vsi_id(struct ice_vf *vf, u16 vsi_id)
{
  #line 1788 
  struct ice_vsi *vsi;
  #line 1787 
  struct ice_pf *pf = vf->pf;
  #line 1790 
  vsi = ice_find_vsi_from_id(pf,(unsigned short)((int)vsi_id));
  #line 1792 
  return (_Bool)((vsi != (struct ice_vsi *)0 && (int)vsi->vf_id == (int)vf->vf_id) != 0);
}

#line 1803  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_virtchnl_pf.c"
static bool ice_vc_isvalid_q_id(struct ice_vf *vf, u16 vsi_id, u8 qid)
{
  #line 1805 
  struct ice_vsi *vsi = ice_find_vsi_from_id(vf->pf,(unsigned short)((int)vsi_id));
  #line 1807 
  return (_Bool)((vsi != (struct ice_vsi *)0 && (int)((unsigned short)qid) < (int)vsi->alloc_txq) != 0);
}

#line 1817  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_virtchnl_pf.c"
static bool ice_vc_isvalid_ring_len(u16 ring_len)
{
  #line 1819 
  return (_Bool)(((unsigned int)ring_len == 0U || (unsigned int)ring_len + 65472U <= 8096U && ((unsigned int)ring_len & 31U) == 0U) != 0);
}

#line 1832  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_virtchnl_pf.c"
static int ice_vc_config_rss_key(struct ice_vf *vf, u8 *msg)
{
  #line 1838 
  struct ice_vsi *vsi;
  #line 1834 
  enum virtchnl_status_code v_ret = 0;
  #line 1835 
  struct virtchnl_rss_key *vrk = (struct virtchnl_rss_key *)msg;
  #line 1837 
  struct ice_pf *pf = vf->pf;
  #line 1840 
  if (! test_bit(1L,(unsigned long *)(& vf->vf_states))) {
    #line 1841 
    v_ret = VIRTCHNL_STATUS_ERR_PARAM;
    #line 1842 
    goto error_param;
  }
  #line 1845 
  if (! ice_vc_isvalid_vsi_id(vf,(unsigned short)((int)vrk->vsi_id))) {
    #line 1846 
    v_ret = VIRTCHNL_STATUS_ERR_PARAM;
    #line 1847 
    goto error_param;
  }
  #line 1850 
  if ((unsigned int)vrk->key_len != 52U) {
    #line 1851 
    v_ret = VIRTCHNL_STATUS_ERR_PARAM;
    #line 1852 
    goto error_param;
  }
  #line 1855 
  if (! test_bit(1L,(unsigned long *)(& (vf->pf)->flags))) {
    #line 1856 
    v_ret = VIRTCHNL_STATUS_ERR_PARAM;
    #line 1857 
    goto error_param;
  }
  #line 1860 
  vsi = *(pf->vsi + (unsigned long)vf->lan_vsi_idx);
  #line 1861 
  if (vsi == (struct ice_vsi *)0) {
    #line 1862 
    v_ret = VIRTCHNL_STATUS_ERR_PARAM;
    #line 1863 
    goto error_param;
  }
  #line 1866 
  if (ice_set_rss(vsi,(u8 *)(& vrk->key),(u8 *)0U,(unsigned short)0) != 0) 
    #line 1867 
    v_ret = VIRTCHNL_STATUS_ERR_ADMIN_QUEUE_ERROR;
  #line 1868 
  error_param: 
               #line 1868 
  ;
  #line 1869 
  return ice_vc_send_msg_to_vf(vf,23U,v_ret,(u8 *)0U,(unsigned short)0);
}

#line 1880  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_virtchnl_pf.c"
static int ice_vc_config_rss_lut(struct ice_vf *vf, u8 *msg)
{
  #line 1885 
  struct ice_vsi *vsi;
  #line 1882 
  struct virtchnl_rss_lut *vrl = (struct virtchnl_rss_lut *)msg;
  #line 1883 
  enum virtchnl_status_code v_ret = 0;
  #line 1884 
  struct ice_pf *pf = vf->pf;
  #line 1887 
  if (! test_bit(1L,(unsigned long *)(& vf->vf_states))) {
    #line 1888 
    v_ret = VIRTCHNL_STATUS_ERR_PARAM;
    #line 1889 
    goto error_param;
  }
  #line 1892 
  if (! ice_vc_isvalid_vsi_id(vf,(unsigned short)((int)vrl->vsi_id))) {
    #line 1893 
    v_ret = VIRTCHNL_STATUS_ERR_PARAM;
    #line 1894 
    goto error_param;
  }
  #line 1897 
  if ((unsigned int)vrl->lut_entries != 64U) {
    #line 1898 
    v_ret = VIRTCHNL_STATUS_ERR_PARAM;
    #line 1899 
    goto error_param;
  }
  #line 1902 
  if (! test_bit(1L,(unsigned long *)(& (vf->pf)->flags))) {
    #line 1903 
    v_ret = VIRTCHNL_STATUS_ERR_PARAM;
    #line 1904 
    goto error_param;
  }
  #line 1907 
  vsi = *(pf->vsi + (unsigned long)vf->lan_vsi_idx);
  #line 1908 
  if (vsi == (struct ice_vsi *)0) {
    #line 1909 
    v_ret = VIRTCHNL_STATUS_ERR_PARAM;
    #line 1910 
    goto error_param;
  }
  #line 1913 
  if (ice_set_rss(vsi,(u8 *)0U,(u8 *)(& vrl->lut),(unsigned short)64) != 0) 
    #line 1914 
    v_ret = VIRTCHNL_STATUS_ERR_ADMIN_QUEUE_ERROR;
  #line 1915 
  error_param: 
               #line 1915 
  ;
  #line 1916 
  return ice_vc_send_msg_to_vf(vf,24U,v_ret,(u8 *)0U,(unsigned short)0);
}

#line 1927  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_virtchnl_pf.c"
static int ice_vc_get_stats_msg(struct ice_vf *vf, u8 *msg)
{
  #line 1934 
  struct ice_vsi *vsi;
  #line 1929 
  enum virtchnl_status_code v_ret = 0;
  #line 1930 
  struct virtchnl_queue_select *vqs = (struct virtchnl_queue_select *)msg;
  #line 1932 
  struct ice_eth_stats stats = {.rx_bytes = 0ULL, .rx_unicast = 0ULL, .rx_multicast = 0ULL, .rx_broadcast = 0ULL, .rx_discards = 0ULL, .rx_unknown_protocol = 0ULL, .tx_bytes = 0ULL, .tx_unicast = 0ULL, .tx_multicast = 0ULL, .tx_broadcast = 0ULL, .tx_discards = 0ULL, .tx_errors = 0ULL};
  #line 1933 
  struct ice_pf *pf = vf->pf;
  #line 1936 
  if (! test_bit(1L,(unsigned long *)(& vf->vf_states))) {
    #line 1937 
    v_ret = VIRTCHNL_STATUS_ERR_PARAM;
    #line 1938 
    goto error_param;
  }
  #line 1941 
  if (! ice_vc_isvalid_vsi_id(vf,(unsigned short)((int)vqs->vsi_id))) {
    #line 1942 
    v_ret = VIRTCHNL_STATUS_ERR_PARAM;
    #line 1943 
    goto error_param;
  }
  #line 1946 
  vsi = *(pf->vsi + (unsigned long)vf->lan_vsi_idx);
  #line 1947 
  if (vsi == (struct ice_vsi *)0) {
    #line 1948 
    v_ret = VIRTCHNL_STATUS_ERR_PARAM;
    #line 1949 
    goto error_param;
  }
  #line 1952 
  ice_update_eth_stats(vsi);
  #line 1954 
  stats = vsi->eth_stats;
  #line 1956 
  error_param: 
               #line 1956 
  ;
  #line 1958 
  return ice_vc_send_msg_to_vf(vf,15U,v_ret,(u8 *)(& stats),
                              (unsigned short)96);
}

#line 1969  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_virtchnl_pf.c"
static int ice_vc_ena_qs_msg(struct ice_vf *vf, u8 *msg)
{
  #line 1975 
  struct ice_vsi *vsi;
  #line 1976 
  unsigned long q_map;
  #line 1977 
  u16 vf_q_id;
  #line 1971 
  enum virtchnl_status_code v_ret = 0;
  #line 1972 
  struct virtchnl_queue_select *vqs = (struct virtchnl_queue_select *)msg;
  #line 1974 
  struct ice_pf *pf = vf->pf;
  #line 1979 
  if (! test_bit(1L,(unsigned long *)(& vf->vf_states))) {
    #line 1980 
    v_ret = VIRTCHNL_STATUS_ERR_PARAM;
    #line 1981 
    goto error_param;
  }
  #line 1984 
  if (! ice_vc_isvalid_vsi_id(vf,(unsigned short)((int)vqs->vsi_id))) {
    #line 1985 
    v_ret = VIRTCHNL_STATUS_ERR_PARAM;
    #line 1986 
    goto error_param;
  }
  #line 1989 
  if (vqs->rx_queues == 0U && vqs->tx_queues == 0U) {
    #line 1990 
    v_ret = VIRTCHNL_STATUS_ERR_PARAM;
    #line 1991 
    goto error_param;
  }
  #line 1994 
  if (vqs->rx_queues > 16U || vqs->tx_queues > 16U) {
    #line 1996 
    v_ret = VIRTCHNL_STATUS_ERR_PARAM;
    #line 1997 
    goto error_param;
  }
  #line 2000 
  vsi = *(pf->vsi + (unsigned long)vf->lan_vsi_idx);
  #line 2001 
  if (vsi == (struct ice_vsi *)0) {
    #line 2002 
    v_ret = VIRTCHNL_STATUS_ERR_PARAM;
    #line 2003 
    goto error_param;
  }
  #line 2010 
  q_map = (unsigned long)vqs->rx_queues;
  #line 2011 
  vf_q_id = (unsigned short)cif_find_first_bit_0(& q_map,16UL);
  #line 2011 
  while ((unsigned int)vf_q_id <= 15U) {
    {
      #line 2012 
      if (! ice_vc_isvalid_q_id(vf,(unsigned short)((int)vqs->vsi_id),
                            (unsigned char)((int)((unsigned char)vf_q_id)))) {
        #line 2013 
        v_ret = VIRTCHNL_STATUS_ERR_PARAM;
        #line 2014 
        goto error_param;
      }
      #line 2018 
      if ((int)test_bit((long)vf_q_id,(unsigned long *)(& vf->rxq_ena)) != 0) 
        #line 2019 
        goto __Cont;
      #line 2021 
      if (ice_vsi_ctrl_rx_ring(vsi,(_Bool)1,(unsigned short)((int)vf_q_id)) != 0) {
        #line 2022 
        _dev_err(& ((vsi->back)->pdev)->dev,(char *)"Failed to enable Rx ring %d on VSI %d\n",(int)vf_q_id,(int)vsi->vsi_num);
        #line 2025 
        v_ret = VIRTCHNL_STATUS_ERR_PARAM;
        #line 2026 
        goto error_param;
      }
      #line 2029 
      cif_set_bit_8((long)vf_q_id,(unsigned long *)(& vf->rxq_ena));
      #line 2030 
      vf->num_qs_ena = (u16)((int)vf->num_qs_ena + 1);
    }
    #line 2011 
    __Cont: { /* sequence */
              #line 2011 
              vf_q_id = (unsigned short)cif_find_next_bit(& q_map,16UL,(unsigned long)((int)vf_q_id + 1));
            }
  }
  #line 2033 
  vsi = *(pf->vsi + (unsigned long)vf->lan_vsi_idx);
  #line 2034 
  q_map = (unsigned long)vqs->tx_queues;
  #line 2035 
  vf_q_id = (unsigned short)cif_find_first_bit_0(& q_map,16UL);
  #line 2035 
  while ((unsigned int)vf_q_id <= 15U) {
    {
      #line 2036 
      if (! ice_vc_isvalid_q_id(vf,(unsigned short)((int)vqs->vsi_id),
                            (unsigned char)((int)((unsigned char)vf_q_id)))) {
        #line 2037 
        v_ret = VIRTCHNL_STATUS_ERR_PARAM;
        #line 2038 
        goto error_param;
      }
      #line 2042 
      if ((int)test_bit((long)vf_q_id,(unsigned long *)(& vf->txq_ena)) != 0) 
        #line 2043 
        goto __Cont_0;
      #line 2045 
      cif_set_bit_8((long)vf_q_id,(unsigned long *)(& vf->txq_ena));
      #line 2046 
      vf->num_qs_ena = (u16)((int)vf->num_qs_ena + 1);
    }
    #line 2035 
    __Cont_0: { /* sequence */
                #line 2035 
                vf_q_id = (unsigned short)cif_find_next_bit(& q_map,16UL,(unsigned long)((int)vf_q_id + 1));
              }
  }
  #line 2050 
  if (v_ret == VIRTCHNL_STATUS_SUCCESS) 
                                        #line 2051 
                                        cif_set_bit_8(2L,(unsigned long *)(& vf->vf_states));
  #line 2053 
  error_param: 
               #line 2053 
  ;
  #line 2055 
  return ice_vc_send_msg_to_vf(vf,8U,v_ret,(u8 *)0U,(unsigned short)0);
}

#line 2067  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_virtchnl_pf.c"
static int ice_vc_dis_qs_msg(struct ice_vf *vf, u8 *msg)
{
  #line 2073 
  struct ice_vsi *vsi;
  #line 2074 
  unsigned long q_map;
  #line 2075 
  u16 vf_q_id;
  #line 2069 
  enum virtchnl_status_code v_ret = 0;
  #line 2070 
  struct virtchnl_queue_select *vqs = (struct virtchnl_queue_select *)msg;
  #line 2072 
  struct ice_pf *pf = vf->pf;
  #line 2077 
  if (! test_bit(1L,(unsigned long *)(& vf->vf_states))) {
    #line 2078 
    if (! test_bit(2L,(unsigned long *)(& vf->vf_states))) {
      #line 2079 
      v_ret = VIRTCHNL_STATUS_ERR_PARAM;
      #line 2080 
      goto error_param;
    }
  }
  #line 2083 
  if (! ice_vc_isvalid_vsi_id(vf,(unsigned short)((int)vqs->vsi_id))) {
    #line 2084 
    v_ret = VIRTCHNL_STATUS_ERR_PARAM;
    #line 2085 
    goto error_param;
  }
  #line 2088 
  if (vqs->rx_queues == 0U && vqs->tx_queues == 0U) {
    #line 2089 
    v_ret = VIRTCHNL_STATUS_ERR_PARAM;
    #line 2090 
    goto error_param;
  }
  #line 2093 
  if (vqs->rx_queues > 16U || vqs->tx_queues > 16U) {
    #line 2095 
    v_ret = VIRTCHNL_STATUS_ERR_PARAM;
    #line 2096 
    goto error_param;
  }
  #line 2099 
  vsi = *(pf->vsi + (unsigned long)vf->lan_vsi_idx);
  #line 2100 
  if (vsi == (struct ice_vsi *)0) {
    #line 2101 
    v_ret = VIRTCHNL_STATUS_ERR_PARAM;
    #line 2102 
    goto error_param;
  }
  #line 2105 
  if (vqs->tx_queues != 0U) {
    #line 2106 
    q_map = (unsigned long)vqs->tx_queues;
    #line 2108 
    vf_q_id = (unsigned short)cif_find_first_bit_0(& q_map,16UL);
    #line 2108 
    while ((unsigned int)vf_q_id <= 15U) {
      {
        #line 2109 
        struct ice_ring *ring = *(vsi->tx_rings + (unsigned long)vf_q_id);
        #line 2110 
        struct ice_txq_meta txq_meta = {.q_teid = 0U, .q_id = (unsigned short)0, .q_handle = (unsigned short)0, .vsi_idx = (unsigned short)0, .tc = (unsigned char)0};
        #line 2112 
        if (! ice_vc_isvalid_q_id(vf,(unsigned short)((int)vqs->vsi_id),
                            (unsigned char)((int)((unsigned char)vf_q_id)))) {
          #line 2113 
          v_ret = VIRTCHNL_STATUS_ERR_PARAM;
          #line 2114 
          goto error_param;
        }
        #line 2118 
        if (! test_bit((long)vf_q_id,(unsigned long *)(& vf->txq_ena))) 
          #line 2119 
          goto __Cont;
        #line 2121 
        ice_fill_txq_meta(vsi,ring,& txq_meta);
        #line 2123 
        if (ice_vsi_stop_tx_ring(vsi,(enum ice_disq_rst_src)ICE_NO_RESET,
                             (unsigned short)((int)((unsigned short)vf->vf_id)),
                             ring,& txq_meta) != 0) {
          #line 2125 
          _dev_err(& ((vsi->back)->pdev)->dev,(char *)"Failed to stop Tx ring %d on VSI %d\n",(int)vf_q_id,(int)vsi->vsi_num);
          #line 2128 
          v_ret = VIRTCHNL_STATUS_ERR_PARAM;
          #line 2129 
          goto error_param;
        }
        #line 2133 
        cif_clear_bit_8((long)vf_q_id,(unsigned long *)(& vf->txq_ena));
        #line 2134 
        vf->num_qs_ena = (u16)((int)vf->num_qs_ena - 1);
      }
      #line 2108 
      __Cont: { /* sequence */
                #line 2108 
                vf_q_id = (unsigned short)cif_find_next_bit(& q_map,16UL,(unsigned long)((int)vf_q_id + 1));
              }
    }
  }
  #line 2138 
  if (vqs->rx_queues != 0U) {
    #line 2139 
    q_map = (unsigned long)vqs->rx_queues;
    #line 2141 
    vf_q_id = (unsigned short)cif_find_first_bit_0(& q_map,16UL);
    #line 2141 
    while ((unsigned int)vf_q_id <= 15U) {
      {
        #line 2142 
        if (! ice_vc_isvalid_q_id(vf,(unsigned short)((int)vqs->vsi_id),
                            (unsigned char)((int)((unsigned char)vf_q_id)))) {
          #line 2143 
          v_ret = VIRTCHNL_STATUS_ERR_PARAM;
          #line 2144 
          goto error_param;
        }
        #line 2148 
        if (! test_bit((long)vf_q_id,(unsigned long *)(& vf->rxq_ena))) 
          #line 2149 
          goto __Cont_0;
        #line 2151 
        if (ice_vsi_ctrl_rx_ring(vsi,(_Bool)0,(unsigned short)((int)vf_q_id)) != 0) {
          #line 2152 
          _dev_err(& ((vsi->back)->pdev)->dev,(char *)"Failed to stop Rx ring %d on VSI %d\n",(int)vf_q_id,(int)vsi->vsi_num);
          #line 2155 
          v_ret = VIRTCHNL_STATUS_ERR_PARAM;
          #line 2156 
          goto error_param;
        }
        #line 2160 
        cif_clear_bit_8((long)vf_q_id,(unsigned long *)(& vf->rxq_ena));
        #line 2161 
        vf->num_qs_ena = (u16)((int)vf->num_qs_ena - 1);
      }
      #line 2141 
      __Cont_0: { /* sequence */
                  #line 2141 
                  vf_q_id = (unsigned short)cif_find_next_bit(& q_map,16UL,(unsigned long)((int)vf_q_id + 1));
                }
    }
  }
  #line 2166 
  if (v_ret == VIRTCHNL_STATUS_SUCCESS && (unsigned int)vf->num_qs_ena == 0U) 
    #line 2167 
    cif_clear_bit_8(2L,(unsigned long *)(& vf->vf_states));
  #line 2169 
  error_param: 
               #line 2169 
  ;
  #line 2171 
  return ice_vc_send_msg_to_vf(vf,9U,v_ret,(u8 *)0U,(unsigned short)0);
}

#line 2182  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_virtchnl_pf.c"
static int ice_vc_cfg_irq_map_msg(struct ice_vf *vf, u8 *msg)
{
  #line 2185 
  struct virtchnl_irq_map_info *irqmap_info;
  #line 2186 
  u16 vsi_id;
  #line 2186 
  u16 vsi_q_id;
  #line 2186 
  u16 vector_id;
  #line 2187 
  struct virtchnl_vector_map *map;
  #line 2189 
  u16 num_q_vectors_mapped;
  #line 2190 
  struct ice_vsi *vsi;
  #line 2191 
  unsigned long qmap;
  #line 2192 
  int i;
  #line 2184 
  enum virtchnl_status_code v_ret = 0;
  #line 2188 
  struct ice_pf *pf = vf->pf;
  #line 2194 
  irqmap_info = (struct virtchnl_irq_map_info *)msg;
  #line 2195 
  num_q_vectors_mapped = irqmap_info->num_vectors;
  #line 2201 
  if (test_bit(1L,(unsigned long *)(& vf->vf_states))) {
    #line 2201 
    if ((int)pf->num_vf_msix < (int)num_q_vectors_mapped) 
                                                          #line 2201 
                                                          goto _LOR;
    else 
      #line 2202 
      if ((unsigned int)irqmap_info->num_vectors == 0U) {
        #line 2201 
        _LOR: {
                #line 2204 
                v_ret = VIRTCHNL_STATUS_ERR_PARAM;
                #line 2205 
                goto error_param;
              }
      }
  }
  else 
       #line 2201 
       goto _LOR;
  #line 2208 
  vsi = *(pf->vsi + (unsigned long)vf->lan_vsi_idx);
  #line 2209 
  if (vsi == (struct ice_vsi *)0) {
    #line 2210 
    v_ret = VIRTCHNL_STATUS_ERR_PARAM;
    #line 2211 
    goto error_param;
  }
  #line 2214 
  i = 0;
  #line 2214 
  while ((int)num_q_vectors_mapped > i) {
    {
      #line 2215 
      struct ice_q_vector *q_vector;
      #line 2217 
      map = & irqmap_info->vecmap[i];
      #line 2219 
      vector_id = map->vector_id;
      #line 2220 
      vsi_id = map->vsi_id;
      #line 2224 
      if ((unsigned int)vector_id > 64U) 
                                         #line 2224 
                                         goto _LOR_0;
      else {
        #line 2225 
        if (ice_vc_isvalid_vsi_id(vf,(unsigned short)((int)vsi_id))) {
          #line 2225 
          if ((unsigned int)vector_id == 0U && ((unsigned int)map->rxq_map != 0U || (unsigned int)map->txq_map != 0U)) {
            #line 2224 
            _LOR_0: {
                      #line 2227 
                      v_ret = VIRTCHNL_STATUS_ERR_PARAM;
                      #line 2228 
                      goto error_param;
                    }
          }
        }
        else 
             #line 2224 
             goto _LOR_0;
      }
      #line 2232 
      if ((unsigned int)vector_id == 0U) 
                                         #line 2233 
                                         goto __Cont;
      #line 2238 
      q_vector = *(vsi->q_vectors + ((unsigned long)vector_id + 18446744073709551615U));
      #line 2239 
      if (q_vector == (struct ice_q_vector *)0) {
        #line 2240 
        v_ret = VIRTCHNL_STATUS_ERR_PARAM;
        #line 2241 
        goto error_param;
      }
      #line 2245 
      qmap = (unsigned long)map->rxq_map;
      #line 2246 
      q_vector->num_ring_rx = (unsigned char)0U;
      #line 2247 
      vsi_q_id = (unsigned short)cif_find_first_bit_0(& qmap,16UL);
      #line 2247 
      while ((unsigned int)vsi_q_id <= 15U) {
        {
          #line 2248 
          if (! ice_vc_isvalid_q_id(vf,(unsigned short)((int)vsi_id),
                            (unsigned char)((int)((unsigned char)vsi_q_id)))) {
            #line 2249 
            v_ret = VIRTCHNL_STATUS_ERR_PARAM;
            #line 2250 
            goto error_param;
          }
          #line 2252 
          q_vector->num_ring_rx = (u8)((int)q_vector->num_ring_rx + 1);
          #line 2253 
          q_vector->rx.itr_idx = map->rxitr_idx;
          #line 2254 
          (*(vsi->rx_rings + (unsigned long)vsi_q_id))->q_vector = q_vector;
          #line 2255 
          ice_cfg_rxq_interrupt(vsi,(unsigned short)((int)vsi_q_id),(unsigned short)((int)vector_id),(unsigned short)((int)q_vector->rx.itr_idx));
        }
        #line 2247 
        vsi_q_id = (unsigned short)cif_find_next_bit(& qmap,16UL,(unsigned long)((int)vsi_q_id + 1));
      }
      #line 2259 
      qmap = (unsigned long)map->txq_map;
      #line 2260 
      q_vector->num_ring_tx = (unsigned char)0U;
      #line 2261 
      vsi_q_id = (unsigned short)cif_find_first_bit_0(& qmap,16UL);
      #line 2261 
      while ((unsigned int)vsi_q_id <= 15U) {
        {
          #line 2262 
          if (! ice_vc_isvalid_q_id(vf,(unsigned short)((int)vsi_id),
                            (unsigned char)((int)((unsigned char)vsi_q_id)))) {
            #line 2263 
            v_ret = VIRTCHNL_STATUS_ERR_PARAM;
            #line 2264 
            goto error_param;
          }
          #line 2266 
          q_vector->num_ring_tx = (u8)((int)q_vector->num_ring_tx + 1);
          #line 2267 
          q_vector->tx.itr_idx = map->txitr_idx;
          #line 2268 
          (*(vsi->tx_rings + (unsigned long)vsi_q_id))->q_vector = q_vector;
          #line 2269 
          ice_cfg_txq_interrupt(vsi,(unsigned short)((int)vsi_q_id),(unsigned short)((int)vector_id),(unsigned short)((int)q_vector->tx.itr_idx));
        }
        #line 2261 
        vsi_q_id = (unsigned short)cif_find_next_bit(& qmap,16UL,(unsigned long)((int)vsi_q_id + 1));
      }
    }
    #line 2214 
    __Cont: 
            #line 2214 
    i ++;
  }
  #line 2274 
  error_param: 
               #line 2274 
  ;
  #line 2276 
  return ice_vc_send_msg_to_vf(vf,7U,v_ret,(u8 *)0U,(unsigned short)0);
}

#line 2287  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_virtchnl_pf.c"
static int ice_vc_cfg_qs_msg(struct ice_vf *vf, u8 *msg)
{
  #line 2292 
  struct virtchnl_queue_pair_info *qpi;
  #line 2295 
  struct ice_vsi *vsi;
  #line 2296 
  int i;
  #line 2289 
  enum virtchnl_status_code v_ret = 0;
  #line 2290 
  struct virtchnl_vsi_queue_config_info *qci = (struct virtchnl_vsi_queue_config_info *)msg;
  #line 2293 
  u16 num_rxq = (unsigned short)0U;
  #line 2293 
  u16 num_txq = (unsigned short)0U;
  #line 2294 
  struct ice_pf *pf = vf->pf;
  #line 2298 
  if (! test_bit(1L,(unsigned long *)(& vf->vf_states))) {
    #line 2299 
    v_ret = VIRTCHNL_STATUS_ERR_PARAM;
    #line 2300 
    goto error_param;
  }
  #line 2303 
  if (! ice_vc_isvalid_vsi_id(vf,(unsigned short)((int)qci->vsi_id))) {
    #line 2304 
    v_ret = VIRTCHNL_STATUS_ERR_PARAM;
    #line 2305 
    goto error_param;
  }
  #line 2308 
  vsi = *(pf->vsi + (unsigned long)vf->lan_vsi_idx);
  #line 2309 
  if (vsi == (struct ice_vsi *)0) {
    #line 2310 
    v_ret = VIRTCHNL_STATUS_ERR_PARAM;
    #line 2311 
    goto error_param;
  }
  #line 2314 
  if ((unsigned int)qci->num_queue_pairs > 16U) 
                                                #line 2314 
                                                goto _LOR;
  else {
    #line 2315 
    unsigned short __UNIQUE_ID___x542;
    #line 2315 
    int tmp_3;
    {
      #line 2315 
      __UNIQUE_ID___x542 = vsi->alloc_txq;
      #line 2315 
      unsigned short __UNIQUE_ID___y543 = vsi->alloc_rxq;
      #line 2315 
      if ((int)__UNIQUE_ID___x542 < (int)__UNIQUE_ID___y543) 
                                                             #line 2315 
                                                             tmp_3 = (int)__UNIQUE_ID___x542; else 
                                                                    #line 2315 
                                                                    tmp_3 = (int)__UNIQUE_ID___y543;
      }
    #line 2315 
    ;
    #line 2315 
    if ((int)qci->num_queue_pairs > tmp_3) {
      #line 2314 
      _LOR: {
              #line 2316 
              unsigned short __UNIQUE_ID___x544;
              #line 2316 
              int tmp_1;
              {
                #line 2316 
                __UNIQUE_ID___x544 = vsi->alloc_txq;
                #line 2316 
                unsigned short __UNIQUE_ID___y545 = vsi->alloc_rxq;
                #line 2316 
                if ((int)__UNIQUE_ID___x544 < (int)__UNIQUE_ID___y545) 
                  #line 2316 
                  tmp_1 = (int)__UNIQUE_ID___x544; else 
                                                        #line 2316 
                                                        tmp_1 = (int)__UNIQUE_ID___y545;
                }
              #line 2316 
              ;
              #line 2316 
              ;
              #line 2316 
              _dev_err(& (pf->pdev)->dev,(char *)"VF-%d requesting more than supported number of queues: %d\n",(int)vf->vf_id,tmp_1);
              #line 2319 
              v_ret = VIRTCHNL_STATUS_ERR_PARAM;
              #line 2320 
              goto error_param;
            }
    }
  }
  #line 2323 
  i = 0;
  #line 2323 
  while ((int)qci->num_queue_pairs > i) {
    #line 2324 
    qpi = & qci->qpair[i];
    #line 2325 
    if ((((int)qpi->txq.vsi_id != (int)qci->vsi_id || (int)qpi->rxq.vsi_id != (int)qci->vsi_id) || (int)qpi->rxq.queue_id != (int)qpi->txq.queue_id) || (unsigned int)qpi->txq.headwb_enabled != 0U) 
      #line 2325 
      goto _LOR_0;
    else {
      #line 2329 
      if (ice_vc_isvalid_ring_len((unsigned short)((int)qpi->txq.ring_len))) {
        #line 2330 
        if (ice_vc_isvalid_ring_len((unsigned short)((int)((unsigned short)qpi->rxq.ring_len)))) {
          #line 2331 
          if (! ice_vc_isvalid_q_id(vf,(unsigned short)((int)qci->vsi_id),
                            (unsigned char)((int)((unsigned char)qpi->txq.queue_id)))) {
            #line 2325 
            _LOR_0: {
                      #line 2332 
                      v_ret = VIRTCHNL_STATUS_ERR_PARAM;
                      #line 2333 
                      goto error_param;
                    }
          }
        }
        else 
             #line 2325 
             goto _LOR_0;
      }
      else 
           #line 2325 
           goto _LOR_0;
    }
    #line 2336 
    if ((unsigned int)qpi->txq.ring_len != 0U) {
      #line 2337 
      num_txq = (u16)((int)num_txq + 1);
      #line 2338 
      (*(vsi->tx_rings + (unsigned long)i))->dma = qpi->txq.dma_ring_addr;
      #line 2339 
      (*(vsi->tx_rings + (unsigned long)i))->count = qpi->txq.ring_len;
    }
    #line 2343 
    if (qpi->rxq.ring_len != 0U) {
      #line 2344 
      num_rxq = (u16)((int)num_rxq + 1);
      #line 2345 
      (*(vsi->rx_rings + (unsigned long)i))->dma = qpi->rxq.dma_ring_addr;
      #line 2346 
      (*(vsi->rx_rings + (unsigned long)i))->count = (unsigned short)qpi->rxq.ring_len;
      #line 2348 
      if (qpi->rxq.databuffer_size != 0U && qpi->rxq.databuffer_size + 4294966272U > 15232U) {
        #line 2351 
        v_ret = VIRTCHNL_STATUS_ERR_PARAM;
        #line 2352 
        goto error_param;
      }
      #line 2354 
      vsi->rx_buf_len = (unsigned short)qpi->rxq.databuffer_size;
      #line 2355 
      (*(vsi->rx_rings + (unsigned long)i))->rx_buf_len = vsi->rx_buf_len;
      #line 2356 
      if (qpi->rxq.max_pkt_size + 4294967232U > 16319U) {
        #line 2358 
        v_ret = VIRTCHNL_STATUS_ERR_PARAM;
        #line 2359 
        goto error_param;
      }
    }
    #line 2363 
    vsi->max_frame = (unsigned short)qpi->rxq.max_pkt_size;
    #line 2323 
    i ++;
  }
  #line 2369 
  vsi->num_txq = num_txq;
  #line 2370 
  vsi->num_rxq = num_rxq;
  #line 2372 
  vsi->tc_cfg.tc_info[0].qcount_tx = num_txq;
  #line 2373 
  vsi->tc_cfg.tc_info[0].qcount_rx = num_rxq;
  #line 2375 
  if (ice_vsi_cfg_lan_txqs(vsi) != 0) 
                                      #line 2376 
                                      v_ret = VIRTCHNL_STATUS_ERR_ADMIN_QUEUE_ERROR;
  else {
    #line 2375 
    if (ice_vsi_cfg_rxqs(vsi) != 0) 
                                    #line 2376 
                                    v_ret = VIRTCHNL_STATUS_ERR_ADMIN_QUEUE_ERROR;
  }
  #line 2378 
  error_param: 
               #line 2378 
  ;
  #line 2380 
  return ice_vc_send_msg_to_vf(vf,6U,v_ret,(u8 *)0U,(unsigned short)0);
}

#line 2388  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_virtchnl_pf.c"
static bool ice_is_vf_trusted(struct ice_vf *vf)
{
  #line 2390 
  return test_bit(1L,& vf->vf_caps);
}

#line 2399  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_virtchnl_pf.c"
static bool ice_can_vf_change_mac(struct ice_vf *vf)
{
  #line 2405 
  if ((unsigned int)vf->pf_set_mac != 0U) {
    #line 2405 
    if (! ice_is_vf_trusted(vf)) 
                                 #line 2406 
                                 return (_Bool)0;
  }
  #line 2408 
  return (_Bool)1;
}

#line 2420  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_virtchnl_pf.c"
static int ice_vc_handle_mac_addr_msg(struct ice_vf *vf, u8 *msg, bool set)
{
  #line 2426 
  enum virtchnl_ops vc_op;
  #line 2427 
  enum ice_status status;
  #line 2428 
  struct ice_vsi *vsi;
  #line 2429 
  struct device *dev;
  #line 2431 
  int i;
  #line 2422 
  enum virtchnl_status_code v_ret = 0;
  #line 2423 
  struct virtchnl_ether_addr_list *al = (struct virtchnl_ether_addr_list *)msg;
  #line 2425 
  struct ice_pf *pf = vf->pf;
  #line 2430 
  int mac_count = 0;
  #line 2433 
  dev = & (pf->pdev)->dev;
  #line 2435 
  if ((int)set != 0) 
                     #line 2436 
                     vc_op = VIRTCHNL_OP_ADD_ETH_ADDR; else 
                                                            #line 2438 
                                                            vc_op = VIRTCHNL_OP_DEL_ETH_ADDR;
  #line 2440 
  if (test_bit(1L,(unsigned long *)(& vf->vf_states))) {
    #line 2441 
    if (! ice_vc_isvalid_vsi_id(vf,(unsigned short)((int)al->vsi_id))) {
      #line 2440 
      _LOR: {
              #line 2442 
              v_ret = VIRTCHNL_STATUS_ERR_PARAM;
              #line 2443 
              goto handle_mac_exit;
            }
    }
  }
  else 
       #line 2440 
       goto _LOR;
  #line 2446 
  if ((int)set != 0) {
    #line 2446 
    if (! ice_is_vf_trusted(vf)) 
      #line 2447 
      if ((int)vf->num_mac + (int)al->num_elements > 12) {
        #line 2448 
        _dev_err(dev,(char *)"Can\'t add more MAC addresses, because VF-%d is not trusted, switch the VF to trusted mode in order to add more functionalities\n",(int)vf->vf_id);
        #line 2454 
        v_ret = VIRTCHNL_STATUS_ERR_PARAM;
        #line 2455 
        goto handle_mac_exit;
      }
  }
  #line 2458 
  vsi = *(pf->vsi + (unsigned long)vf->lan_vsi_idx);
  #line 2459 
  if (vsi == (struct ice_vsi *)0) {
    #line 2460 
    v_ret = VIRTCHNL_STATUS_ERR_PARAM;
    #line 2461 
    goto handle_mac_exit;
  }
  #line 2464 
  i = 0;
  #line 2464 
  while ((int)al->num_elements > i) {
    {
      #line 2465 
      u8 *maddr = (u8 *)(& al->list[i].addr);
      #line 2467 
      if ((int)ether_addr_equal(maddr,(u8 *)(& vf->dflt_lan_addr.addr)) != 0) 
        #line 2467 
        goto _LOR_0;
      else {
        #line 2467 
        if ((int)is_broadcast_ether_addr(maddr) != 0) {
          #line 2467 
          _LOR_0: 
                  #line 2469 
          ;
          #line 2469 
          if ((int)set != 0) {
            #line 2473 
            _dev_info(dev,(char *)"MAC %pM already set for VF %d\n",maddr,(int)vf->vf_id);
            #line 2476 
            goto __Cont;
          }
          else {
            #line 2479 
            _dev_err(dev,(char *)"VF can\'t remove default MAC address or MAC %pM programmed by PF for VF %d\n",maddr,(int)vf->vf_id);
            #line 2482 
            goto __Cont;
          }
        }
      }
      #line 2487 
      if ((int)is_zero_ether_addr(maddr) != 0) {
        #line 2488 
        _dev_err(dev,(char *)"invalid MAC %pM provided for VF %d\n",maddr,(int)vf->vf_id);
        #line 2491 
        v_ret = VIRTCHNL_STATUS_ERR_PARAM;
        #line 2492 
        goto handle_mac_exit;
      }
      #line 2495 
      if ((int)is_unicast_ether_addr(maddr) != 0) {
        #line 2496 
        if (! ice_can_vf_change_mac(vf)) {
          #line 2497 
          _dev_err(dev,(char *)"can\'t change unicast MAC for untrusted VF %d\n",(int)vf->vf_id);
          #line 2500 
          v_ret = VIRTCHNL_STATUS_ERR_PARAM;
          #line 2501 
          goto handle_mac_exit;
        }
      }
      #line 2505 
      status = ice_vsi_cfg_mac_fltr(vsi,maddr,(_Bool)((bool)((int)set) != 0));
      #line 2506 
      if ((unsigned int)status + 15U <= 1U) {
        #line 2508 
        char *tmp_7;
        #line 2508 
        ;
        #line 2508 
        ;
        #line 2508 
        ;
        #line 2508 
        if ((int)set != 0) 
                           #line 2508 
                           tmp_7 = (char *)"add"; else 
                                                       #line 2508 
                                                       tmp_7 = (char *)"remove";
        #line 2508 
        ;
        #line 2508 
        _dev_info(dev,(char *)"can\'t %s MAC filters %pM for VF %d, error %d\n",tmp_7,maddr,(int)vf->vf_id,(int)status);
      }
      else 
        #line 2512 
        if (status != ICE_SUCCESS) {
          #line 2513 
          char *tmp_8;
          #line 2513 
          ;
          #line 2513 
          ;
          #line 2513 
          if ((int)set != 0) 
                             #line 2513 
                             tmp_8 = (char *)"add"; else 
                                                         #line 2513 
                                                         tmp_8 = (char *)"remove";
          #line 2513 
          ;
          #line 2513 
          _dev_err(dev,(char *)"can\'t %s MAC filters for VF %d, error %d\n",tmp_8,(int)vf->vf_id,(int)status);
          #line 2516 
          v_ret = ice_err_to_virt_err(status);
          #line 2517 
          goto handle_mac_exit;
        }
      #line 2520 
      mac_count ++;
    }
    #line 2464 
    __Cont: 
            #line 2464 
    i ++;
  }
  #line 2524 
  if ((int)set != 0) 
                     #line 2525 
                     vf->num_mac = (unsigned short)((int)vf->num_mac + (int)((unsigned short)mac_count)); else 
                                                                    #line 2527 
                                                                    vf->num_mac = (unsigned short)((int)vf->num_mac - (int)((unsigned short)mac_count));
  #line 2529 
  handle_mac_exit: 
                   #line 2529 
  ;
  #line 2531 
  return ice_vc_send_msg_to_vf(vf,(unsigned int)vc_op,v_ret,(u8 *)0U,
                              (unsigned short)0);
}

#line 2541  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_virtchnl_pf.c"
static int ice_vc_add_mac_addr_msg(struct ice_vf *vf, u8 *msg)
{
  #line 2543 
  return ice_vc_handle_mac_addr_msg(vf,msg,(_Bool)1);
}

#line 2553  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_virtchnl_pf.c"
static int ice_vc_del_mac_addr_msg(struct ice_vf *vf, u8 *msg)
{
  #line 2555 
  return ice_vc_handle_mac_addr_msg(vf,msg,(_Bool)0);
}

#line 2568  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_virtchnl_pf.c"
static int ice_vc_request_qs_msg(struct ice_vf *vf, u8 *msg)
{
  #line 2587 
  unsigned short __UNIQUE_ID___x546;
  #line 2587 
  int tmp_2;
  #line 2575 
  u16 max_allowed_vf_queues;
  #line 2576 
  u16 tx_rx_queue_left;
  #line 2577 
  u16 cur_queues;
  #line 2578 
  struct device *dev;
  #line 2570 
  enum virtchnl_status_code v_ret = 0;
  #line 2571 
  struct virtchnl_vf_res_request *vfres = (struct virtchnl_vf_res_request *)msg;
  #line 2573 
  u16 req_queues = vfres->num_queue_pairs;
  #line 2574 
  struct ice_pf *pf = vf->pf;
  #line 2580 
  dev = & (pf->pdev)->dev;
  #line 2581 
  if (! test_bit(1L,(unsigned long *)(& vf->vf_states))) {
    #line 2582 
    v_ret = VIRTCHNL_STATUS_ERR_PARAM;
    #line 2583 
    goto error_param;
  }
  #line 2586 
  cur_queues = vf->num_vf_qs;
  {
    #line 2587 
    __UNIQUE_ID___x546 = ice_get_avail_txq_count(pf);
    #line 2587 
    unsigned short __UNIQUE_ID___y547 = ice_get_avail_rxq_count(pf);
    #line 2587 
    if ((int)__UNIQUE_ID___x546 < (int)__UNIQUE_ID___y547) 
                                                           #line 2587 
                                                           tmp_2 = (int)__UNIQUE_ID___x546; else 
                                                                    #line 2587 
                                                                    tmp_2 = (int)__UNIQUE_ID___y547;
    }
  #line 2587 
  tx_rx_queue_left = (unsigned short)tmp_2;
  #line 2589 
  max_allowed_vf_queues = (unsigned short)((int)tx_rx_queue_left + (int)cur_queues);
  #line 2590 
  if ((unsigned int)req_queues == 0U) 
                                      #line 2591 
                                      _dev_err(dev,(char *)"VF %d tried to request 0 queues. Ignoring.\n",(int)vf->vf_id);
  else 
    #line 2593 
    if ((unsigned int)req_queues > 16U) {
      #line 2594 
      _dev_err(dev,(char *)"VF %d tried to request more than %d queues.\n",(int)vf->vf_id,16);
      #line 2596 
      vfres->num_queue_pairs = (unsigned short)16U;
    }
    else 
      #line 2597 
      if ((int)req_queues > (int)cur_queues && (int)req_queues - (int)cur_queues > (int)tx_rx_queue_left) {
        #line 2602 
        unsigned short __UNIQUE_ID___x548;
        #line 2602 
        int tmp_4;
        #line 2599 
        _dev_warn(dev,(char *)"VF %d requested %u more queues, but only %u left.\n",(int)vf->vf_id,(int)req_queues - (int)cur_queues,(int)tx_rx_queue_left);
        {
          #line 2602 
          __UNIQUE_ID___x548 = max_allowed_vf_queues;
          #line 2602 
          unsigned short __UNIQUE_ID___y549 = (unsigned short)16U;
          #line 2602 
          if ((int)__UNIQUE_ID___x548 < (int)__UNIQUE_ID___y549) 
                                                                 #line 2602 
                                                                 tmp_4 = (int)__UNIQUE_ID___x548; else 
                                                                    #line 2602 
                                                                    tmp_4 = (int)__UNIQUE_ID___y549;
          }
        #line 2602 
        vfres->num_queue_pairs = (unsigned short)tmp_4;
      }
      else {
        #line 2606 
        vf->num_req_qs = (unsigned char)req_queues;
        #line 2607 
        ice_vc_reset_vf(vf);
        #line 2608 
        _dev_info(dev,(char *)"VF %d granted request of %u queues.\n",(int)vf->vf_id,(int)req_queues);
        #line 2610 
        return 0;
      }
  #line 2613 
  error_param: 
               #line 2613 
  ;
  #line 2615 
  return ice_vc_send_msg_to_vf(vf,29U,v_ret,(u8 *)vfres,(unsigned short)2);
}

#line 2630  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_virtchnl_pf.c"
int ice_set_vf_port_vlan(struct net_device *netdev, int vf_id, u16 vlan_id, u8 qos, __be16 vlan_proto)
{
  #line 2635 
  struct ice_vsi *vsi;
  #line 2636 
  struct device *dev;
  #line 2637 
  struct ice_vf *vf;
  #line 2633 
  u16 vlanprio = (unsigned short)(((int)qos << 12) | (int)vlan_id);
  #line 2634 
  struct ice_pf *pf = ice_netdev_to_pf(netdev);
  #line 2638 
  int ret = 0;
  #line 2640 
  dev = & (pf->pdev)->dev;
  #line 2641 
  if (ice_validate_vf_id(pf,vf_id) != 0) 
                                         #line 2642 
                                         return -22;
  #line 2644 
  if ((unsigned int)vlan_id > 4095U || (unsigned int)qos > 7U) {
    #line 2645 
    _dev_err(dev,(char *)"Invalid VF Parameters\n");
    #line 2646 
    return -22;
  }
  #line 2649 
  if ((unsigned int)vlan_proto != 129U) {
    #line 2650 
    _dev_err(dev,(char *)"VF VLAN protocol is not supported\n");
    #line 2651 
    return -93;
  }
  #line 2654 
  vf = pf->vf + (unsigned long)vf_id;
  #line 2655 
  vsi = *(pf->vsi + (unsigned long)vf->lan_vsi_idx);
  #line 2656 
  if (ice_check_vf_init(pf,vf) != 0) 
                                     #line 2657 
                                     return -16;
  #line 2659 
  if ((int)vsi->info.pvid == (int)vlanprio) {
    {
      #line 2661 
      bool branch;
      #line 2661 
      struct _ddebug __UNIQUE_ID_ddebug550 = {.modname = (char *)"ice", .function = (char *)"ice_set_vf_port_vlan", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_virtchnl_pf.c", .format = (char *)"Duplicate pvid %d request\n", .lineno = (unsigned int)2661U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 2661 
      branch = arch_static_branch(& __UNIQUE_ID_ddebug550.key.dd_key_false.key,(_Bool)0);
      #line 2661 
      if ((long)((long)((int)branch != 0)) != 0L) 
                                                  #line 2661 
                                                  __dynamic_dev_dbg(& __UNIQUE_ID_ddebug550,dev,(char *)"Duplicate pvid %d request\n",(int)vlanprio);
    }
    #line 2662 
    return ret;
  }
  #line 2666 
  if ((unsigned int)vsi->info.pvid != 0U) 
                                          #line 2667 
                                          ice_vsi_kill_vlan(vsi,(unsigned short)((int)vsi->info.pvid & 4095));
  #line 2670 
  if ((unsigned int)vlan_id != 0U || (unsigned int)qos != 0U) {
    #line 2671 
    ret = ice_vsi_manage_pvid(vsi,(unsigned short)((int)vlanprio),(_Bool)1);
    #line 2672 
    if (ret != 0) 
                  #line 2673 
                  goto error_set_pvid;
  }
  else {
    #line 2675 
    ice_vsi_manage_pvid(vsi,(unsigned short)0,(_Bool)0);
    #line 2676 
    vsi->info.pvid = (unsigned short)0U;
  }
  #line 2679 
  if ((unsigned int)vlan_id != 0U) {
    #line 2680 
    _dev_info(dev,(char *)"Setting VLAN %d, QoS 0x%x on VF %d\n",(int)vlan_id,(int)qos,vf_id);
    #line 2684 
    ret = ice_vsi_add_vlan(vsi,(unsigned short)((int)vlan_id));
    #line 2685 
    if (ret != 0) 
                  #line 2686 
                  goto error_set_pvid;
  }
  #line 2692 
  vf->port_vlan_id = vsi->info.pvid;
  #line 2694 
  error_set_pvid: 
                  #line 2694 
  ;
  #line 2695 
  return ret;
}

#line 2704  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_virtchnl_pf.c"
static bool ice_vf_vlan_offload_ena(u32 caps)
{
  #line 2706 
  return (_Bool)((caps & 65536U) != 0U);
}

#line 2717  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_virtchnl_pf.c"
static int ice_vc_process_vlan_msg(struct ice_vf *vf, u8 *msg, bool add_v)
{
  #line 2724 
  struct ice_vsi *vsi;
  #line 2725 
  struct device *dev;
  #line 2726 
  struct ice_hw *hw;
  #line 2728 
  u8 promisc_m;
  #line 2729 
  int i;
  #line 2719 
  enum virtchnl_status_code v_ret = 0;
  #line 2720 
  struct virtchnl_vlan_filter_list *vfl = (struct virtchnl_vlan_filter_list *)msg;
  #line 2722 
  struct ice_pf *pf = vf->pf;
  #line 2723 
  bool vlan_promisc = (_Bool)0;
  #line 2727 
  int status = 0;
  #line 2731 
  dev = & (pf->pdev)->dev;
  #line 2732 
  if (! test_bit(1L,(unsigned long *)(& vf->vf_states))) {
    #line 2733 
    v_ret = VIRTCHNL_STATUS_ERR_PARAM;
    #line 2734 
    goto error_param;
  }
  #line 2737 
  if (! ice_vf_vlan_offload_ena(vf->driver_caps)) {
    #line 2738 
    v_ret = VIRTCHNL_STATUS_ERR_PARAM;
    #line 2739 
    goto error_param;
  }
  #line 2742 
  if (! ice_vc_isvalid_vsi_id(vf,(unsigned short)((int)vfl->vsi_id))) {
    #line 2743 
    v_ret = VIRTCHNL_STATUS_ERR_PARAM;
    #line 2744 
    goto error_param;
  }
  #line 2747 
  if ((int)add_v != 0) {
    #line 2747 
    if (! ice_is_vf_trusted(vf)) 
      #line 2747 
      if ((unsigned int)vf->num_vlan > 7U) {
        #line 2749 
        _dev_info(dev,(char *)"VF-%d is not trusted, switch the VF to trusted mode, in order to add more VLAN addresses\n",(int)vf->vf_id);
        #line 2755 
        goto error_param;
      }
  }
  #line 2758 
  i = 0;
  #line 2758 
  while ((int)vfl->num_elements > i) {
    #line 2759 
    if ((unsigned int)vfl->vlan_id[i] > 4095U) {
      #line 2760 
      v_ret = VIRTCHNL_STATUS_ERR_PARAM;
      #line 2761 
      _dev_err(dev,(char *)"invalid VF VLAN id %d\n",(int)vfl->vlan_id[i]);
      #line 2763 
      goto error_param;
    }
    #line 2758 
    i ++;
  }
  #line 2767 
  hw = & pf->hw;
  #line 2768 
  vsi = *(pf->vsi + (unsigned long)vf->lan_vsi_idx);
  #line 2769 
  if (vsi == (struct ice_vsi *)0) {
    #line 2770 
    v_ret = VIRTCHNL_STATUS_ERR_PARAM;
    #line 2771 
    goto error_param;
  }
  #line 2774 
  if ((unsigned int)vsi->info.pvid != 0U) {
    #line 2775 
    v_ret = VIRTCHNL_STATUS_ERR_PARAM;
    #line 2776 
    goto error_param;
  }
  #line 2779 
  if ((int)test_bit(5L,(unsigned long *)(& vf->vf_states)) != 0) 
                                                                 #line 2781 
                                                                 vlan_promisc = (_Bool)1;
  else {
    #line 2779 
    if ((int)test_bit(4L,(unsigned long *)(& vf->vf_states)) != 0) 
                                                                   #line 2781 
                                                                   vlan_promisc = (_Bool)1;
  }
  #line 2783 
  if ((int)add_v != 0) {
    #line 2784 
    i = 0;
    #line 2784 
    while ((int)vfl->num_elements > i) {
      {
        #line 2785 
        u16 vid = vfl->vlan_id[i];
        #line 2787 
        if (! ice_is_vf_trusted(vf)) 
          #line 2787 
          if ((unsigned int)vf->num_vlan > 7U) {
            #line 2789 
            _dev_info(dev,(char *)"VF-%d is not trusted, switch the VF to trusted mode, in order to add more VLAN addresses\n",(int)vf->vf_id);
            #line 2796 
            goto error_param;
          }
        #line 2799 
        if (ice_vsi_add_vlan(vsi,(unsigned short)((int)vid)) != 0) {
          #line 2800 
          v_ret = VIRTCHNL_STATUS_ERR_PARAM;
          #line 2801 
          goto error_param;
        }
        #line 2804 
        vf->num_vlan = (u16)((int)vf->num_vlan + 1);
        #line 2806 
        if (! vlan_promisc) {
          #line 2807 
          status = ice_cfg_vlan_pruning(vsi,(_Bool)1,(_Bool)0);
          #line 2808 
          if (status != 0) {
            #line 2809 
            v_ret = VIRTCHNL_STATUS_ERR_PARAM;
            #line 2810 
            _dev_err(dev,(char *)"Enable VLAN pruning on VLAN ID: %d failed error-%d\n",(int)vid,status);
            #line 2813 
            goto error_param;
          }
        }
        else {
          #line 2817 
          promisc_m = (unsigned char)192U;
          #line 2820 
          status = (int)ice_set_vsi_promisc(hw,(unsigned short)((int)vsi->idx),
                            (unsigned char)((int)promisc_m),
                            (unsigned short)((int)vid));
          #line 2822 
          if (status != 0) {
            #line 2823 
            v_ret = VIRTCHNL_STATUS_ERR_PARAM;
            #line 2824 
            _dev_err(dev,(char *)"Enable Unicast/multicast promiscuous mode on VLAN ID:%d failed error-%d\n",(int)vid,status);
          }
        }
      }
      #line 2784 
      i ++;
    }
  }
  else {
    #line 2838 
    int num_vf_vlan;
    #line 2840 
    num_vf_vlan = (int)vf->num_vlan;
    #line 2841 
    i = 0;
    #line 2841 
    while ((int)vfl->num_elements > i && i < num_vf_vlan) {
      {
        #line 2842 
        u16 vid_0 = vfl->vlan_id[i];
        #line 2847 
        if (ice_vsi_kill_vlan(vsi,(unsigned short)((int)vid_0)) != 0) {
          #line 2848 
          v_ret = VIRTCHNL_STATUS_ERR_PARAM;
          #line 2849 
          goto error_param;
        }
        #line 2852 
        vf->num_vlan = (u16)((int)vf->num_vlan - 1);
        #line 2854 
        if ((unsigned int)vf->num_vlan == 0U) 
                                              #line 2855 
                                              ice_cfg_vlan_pruning(vsi,(_Bool)0,(_Bool)0);
        #line 2858 
        if ((int)vlan_promisc != 0) {
          #line 2859 
          promisc_m = (unsigned char)192U;
          #line 2862 
          ice_clear_vsi_promisc(hw,(unsigned short)((int)vsi->idx),(unsigned char)((int)promisc_m),(unsigned short)((int)vid_0));
        }
      }
      #line 2841 
      i ++;
    }
  }
  #line 2868 
  error_param: 
               #line 2868 
  ;
  #line 2870 
  if ((int)add_v != 0) {
    #line 2871 
    return ice_vc_send_msg_to_vf(vf,12U,v_ret,(u8 *)0U,(unsigned short)0);
  }
  else {
    #line 2874 
    return ice_vc_send_msg_to_vf(vf,13U,v_ret,(u8 *)0U,(unsigned short)0);
  }
}

#line 2885  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_virtchnl_pf.c"
static int ice_vc_add_vlan_msg(struct ice_vf *vf, u8 *msg)
{
  #line 2887 
  return ice_vc_process_vlan_msg(vf,msg,(_Bool)1);
}

#line 2897  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_virtchnl_pf.c"
static int ice_vc_remove_vlan_msg(struct ice_vf *vf, u8 *msg)
{
  #line 2899 
  return ice_vc_process_vlan_msg(vf,msg,(_Bool)0);
}

#line 2908  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_virtchnl_pf.c"
static int ice_vc_ena_vlan_stripping(struct ice_vf *vf)
{
  #line 2912 
  struct ice_vsi *vsi;
  #line 2910 
  enum virtchnl_status_code v_ret = 0;
  #line 2911 
  struct ice_pf *pf = vf->pf;
  #line 2914 
  if (! test_bit(1L,(unsigned long *)(& vf->vf_states))) {
    #line 2915 
    v_ret = VIRTCHNL_STATUS_ERR_PARAM;
    #line 2916 
    goto error_param;
  }
  #line 2919 
  if (! ice_vf_vlan_offload_ena(vf->driver_caps)) {
    #line 2920 
    v_ret = VIRTCHNL_STATUS_ERR_PARAM;
    #line 2921 
    goto error_param;
  }
  #line 2924 
  vsi = *(pf->vsi + (unsigned long)vf->lan_vsi_idx);
  #line 2925 
  if (ice_vsi_manage_vlan_stripping(vsi,(_Bool)1) != 0) 
                                                        #line 2926 
                                                        v_ret = VIRTCHNL_STATUS_ERR_PARAM;
  #line 2928 
  error_param: 
               #line 2928 
  ;
  #line 2929 
  return ice_vc_send_msg_to_vf(vf,27U,v_ret,(u8 *)0U,(unsigned short)0);
}

#line 2939  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_virtchnl_pf.c"
static int ice_vc_dis_vlan_stripping(struct ice_vf *vf)
{
  #line 2943 
  struct ice_vsi *vsi;
  #line 2941 
  enum virtchnl_status_code v_ret = 0;
  #line 2942 
  struct ice_pf *pf = vf->pf;
  #line 2945 
  if (! test_bit(1L,(unsigned long *)(& vf->vf_states))) {
    #line 2946 
    v_ret = VIRTCHNL_STATUS_ERR_PARAM;
    #line 2947 
    goto error_param;
  }
  #line 2950 
  if (! ice_vf_vlan_offload_ena(vf->driver_caps)) {
    #line 2951 
    v_ret = VIRTCHNL_STATUS_ERR_PARAM;
    #line 2952 
    goto error_param;
  }
  #line 2955 
  vsi = *(pf->vsi + (unsigned long)vf->lan_vsi_idx);
  #line 2956 
  if (vsi == (struct ice_vsi *)0) {
    #line 2957 
    v_ret = VIRTCHNL_STATUS_ERR_PARAM;
    #line 2958 
    goto error_param;
  }
  #line 2961 
  if (ice_vsi_manage_vlan_stripping(vsi,(_Bool)0) != 0) 
                                                        #line 2962 
                                                        v_ret = VIRTCHNL_STATUS_ERR_PARAM;
  #line 2964 
  error_param: 
               #line 2964 
  ;
  #line 2965 
  return ice_vc_send_msg_to_vf(vf,28U,v_ret,(u8 *)0U,(unsigned short)0);
}

#line 2979  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_virtchnl_pf.c"
static int ice_vf_init_vlan_stripping(struct ice_vf *vf)
{
  #line 2981 
  struct ice_vsi *vsi = *((vf->pf)->vsi + (unsigned long)vf->lan_vsi_idx);
  #line 2983 
  if (vsi == (struct ice_vsi *)0) 
                                  #line 2984 
                                  return -22;
  #line 2987 
  if ((unsigned int)vsi->info.pvid != 0U) 
                                          #line 2988 
                                          return 0;
  #line 2990 
  if ((int)ice_vf_vlan_offload_ena(vf->driver_caps) != 0) {
    #line 2991 
    return ice_vsi_manage_vlan_stripping(vsi,(_Bool)1);
  }
  else {
    #line 2993 
    return ice_vsi_manage_vlan_stripping(vsi,(_Bool)0);
  }
}

#line 3004  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_virtchnl_pf.c"
void ice_vc_process_vf_msg(struct ice_pf *pf, struct ice_rq_event_info *event)
{
  #line 3011 
  struct device *dev;
  #line 3006 
  u32 v_opcode = event->desc.cookie_high;
  #line 3007 
  s16 vf_id = (short)event->desc.retval;
  #line 3008 
  u16 msglen = event->msg_len;
  #line 3009 
  u8 *msg = event->msg_buf;
  #line 3010 
  struct ice_vf *vf = (struct ice_vf *)0;
  #line 3012 
  int err = 0;
  #line 3014 
  dev = & (pf->pdev)->dev;
  #line 3015 
  if (ice_validate_vf_id(pf,(int)vf_id) != 0) {
    #line 3016 
    err = -22;
    #line 3017 
    goto error_handler;
  }
  #line 3020 
  vf = pf->vf + (unsigned long)vf_id;
  #line 3023 
  if ((int)test_bit(3L,(unsigned long *)(& vf->vf_states)) != 0) {
    #line 3024 
    err = -1;
    #line 3025 
    goto error_handler;
  }
  #line 3029 
  err = virtchnl_vc_validate_vf_msg(& vf->vf_ver,v_opcode,msg,(unsigned short)((int)msglen));
  #line 3030 
  if (err != 0) 
    #line 3031 
    if (err == -5) 
                   #line 3032 
                   err = -1; else 
                                  #line 3034 
                                  err = -22;
  #line 3037 
  error_handler: 
                 #line 3037 
  ;
  #line 3038 
  if (err != 0) {
    #line 3039 
    ice_vc_send_msg_to_vf(vf,v_opcode,(enum virtchnl_status_code)VIRTCHNL_STATUS_ERR_PARAM,(u8 *)0U,(unsigned short)0);
    #line 3041 
    _dev_err(dev,(char *)"Invalid message from VF %d, opcode %d, len %d, error %d\n",(int)vf_id,v_opcode,(int)msglen,err);
    #line 3043 
    return;
  }
  #line 3046 
  switch (v_opcode) {
    #line 3047 
    case (u32)1: 
                 #line 3047 
    ;
    #line 3048 
    err = ice_vc_get_ver_msg(vf,msg);
    #line 3049 
    break;
    #line 3050 
    case (u32)3: 
                 #line 3050 
    ;
    #line 3051 
    err = ice_vc_get_vf_res_msg(vf,msg);
    #line 3052 
    if (ice_vf_init_vlan_stripping(vf) != 0) 
                                             #line 3053 
                                             _dev_err(dev,(char *)"Failed to initialize VLAN stripping for VF %d\n",(int)vf->vf_id);
    #line 3056 
    ice_vc_notify_vf_link_state(vf);
    #line 3057 
    break;
    #line 3058 
    case (u32)2: 
                 #line 3058 
    ;
    #line 3059 
    ice_vc_reset_vf_msg(vf);
    #line 3060 
    break;
    #line 3061 
    case (u32)10: 
                  #line 3061 
    ;
    #line 3062 
    err = ice_vc_add_mac_addr_msg(vf,msg);
    #line 3063 
    break;
    #line 3064 
    case (u32)11: 
                  #line 3064 
    ;
    #line 3065 
    err = ice_vc_del_mac_addr_msg(vf,msg);
    #line 3066 
    break;
    #line 3067 
    case (u32)6: 
                 #line 3067 
    ;
    #line 3068 
    err = ice_vc_cfg_qs_msg(vf,msg);
    #line 3069 
    break;
    #line 3070 
    case (u32)8: 
                 #line 3070 
    ;
    #line 3071 
    err = ice_vc_ena_qs_msg(vf,msg);
    #line 3072 
    ice_vc_notify_vf_link_state(vf);
    #line 3073 
    break;
    #line 3074 
    case (u32)9: 
                 #line 3074 
    ;
    #line 3075 
    err = ice_vc_dis_qs_msg(vf,msg);
    #line 3076 
    break;
    #line 3077 
    case (u32)29: 
                  #line 3077 
    ;
    #line 3078 
    err = ice_vc_request_qs_msg(vf,msg);
    #line 3079 
    break;
    #line 3080 
    case (u32)7: 
                 #line 3080 
    ;
    #line 3081 
    err = ice_vc_cfg_irq_map_msg(vf,msg);
    #line 3082 
    break;
    #line 3083 
    case (u32)23: 
                  #line 3083 
    ;
    #line 3084 
    err = ice_vc_config_rss_key(vf,msg);
    #line 3085 
    break;
    #line 3086 
    case (u32)24: 
                  #line 3086 
    ;
    #line 3087 
    err = ice_vc_config_rss_lut(vf,msg);
    #line 3088 
    break;
    #line 3089 
    case (u32)15: 
                  #line 3089 
    ;
    #line 3090 
    err = ice_vc_get_stats_msg(vf,msg);
    #line 3091 
    break;
    #line 3092 
    case (u32)12: 
                  #line 3092 
    ;
    #line 3093 
    err = ice_vc_add_vlan_msg(vf,msg);
    #line 3094 
    break;
    #line 3095 
    case (u32)13: 
                  #line 3095 
    ;
    #line 3096 
    err = ice_vc_remove_vlan_msg(vf,msg);
    #line 3097 
    break;
    #line 3098 
    case (u32)27: 
                  #line 3098 
    ;
    #line 3099 
    err = ice_vc_ena_vlan_stripping(vf);
    #line 3100 
    break;
    #line 3101 
    case (u32)28: 
                  #line 3101 
    ;
    #line 3102 
    err = ice_vc_dis_vlan_stripping(vf);
    #line 3103 
    break;
    #line 3104 
    case (u32)0: 
                 #line 3104 
    ;
    #line 3105 
    default: 
             #line 3105 
    ;
    #line 3106 
    _dev_err(dev,(char *)"Unsupported opcode %d from VF %d\n",v_opcode,(int)vf_id);
    #line 3108 
    err = ice_vc_send_msg_to_vf(vf,v_opcode,(enum virtchnl_status_code)VIRTCHNL_STATUS_ERR_NOT_SUPPORTED,(u8 *)0U,(unsigned short)0);
    #line 3111 
    break;
  }
  #line 3113 
  if (err != 0) 
                #line 3117 
                _dev_info(dev,(char *)"PF failed to honor VF %d, opcode %d, error %d\n",(int)vf_id,v_opcode,err);
  #line 3118 
  return;
}

#line 3131  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_virtchnl_pf.c"
int ice_get_vf_cfg(struct net_device *netdev, int vf_id, struct ifla_vf_info *ivi)
{
  #line 3134 
  struct ice_vsi *vsi;
  #line 3135 
  struct ice_vf *vf;
  #line 3133 
  struct ice_pf *pf = ice_netdev_to_pf(netdev);
  #line 3137 
  if (ice_validate_vf_id(pf,vf_id) != 0) 
                                         #line 3138 
                                         return -22;
  #line 3140 
  vf = pf->vf + (unsigned long)vf_id;
  #line 3141 
  vsi = *(pf->vsi + (unsigned long)vf->lan_vsi_idx);
  #line 3143 
  if (ice_check_vf_init(pf,vf) != 0) 
                                     #line 3144 
                                     return -16;
  #line 3146 
  ivi->vf = (unsigned int)vf_id;
  #line 3147 
  ether_addr_copy((u8 *)(& ivi->mac),(u8 *)(& vf->dflt_lan_addr.addr));
  #line 3150 
  ivi->vlan = (unsigned int)vsi->info.pvid & 4095U;
  #line 3151 
  ivi->qos = (unsigned int)((int)vsi->info.pvid >> 12) & 7U;
  #line 3154 
  ivi->trusted = (unsigned int)vf->trusted;
  #line 3155 
  ivi->spoofchk = (unsigned int)vf->spoofchk;
  #line 3156 
  if ((unsigned int)vf->link_forced == 0U) 
                                           #line 3157 
                                           ivi->linkstate = 0U;
  else 
    #line 3158 
    if ((unsigned int)vf->link_up != 0U) 
                                         #line 3159 
                                         ivi->linkstate = 1U; else 
                                                                   #line 3161 
                                                                   ivi->linkstate = 2U;
  #line 3162 
  ivi->max_tx_rate = vf->tx_rate;
  #line 3163 
  ivi->min_tx_rate = 0U;
  #line 3164 
  return 0;
}

#line 3175  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_virtchnl_pf.c"
int ice_set_vf_spoofchk(struct net_device *netdev, int vf_id, bool ena)
{
  #line 3179 
  struct ice_vsi_ctx *ctx;
  #line 3180 
  enum ice_status status;
  #line 3181 
  struct device *dev;
  #line 3182 
  struct ice_vf *vf;
  #line 3177 
  struct ice_pf *pf = ice_netdev_to_pf(netdev);
  #line 3178 
  struct ice_vsi *vsi = *(pf->vsi);
  #line 3183 
  int ret = 0;
  #line 3185 
  dev = & (pf->pdev)->dev;
  #line 3186 
  if (ice_validate_vf_id(pf,vf_id) != 0) 
                                         #line 3187 
                                         return -22;
  #line 3189 
  vf = pf->vf + (unsigned long)vf_id;
  #line 3190 
  if (ice_check_vf_init(pf,vf) != 0) 
                                     #line 3191 
                                     return -16;
  #line 3193 
  if ((int)((_Bool)(vf->spoofchk != 0)) == (int)ena) {
    {
      #line 3194 
      bool branch;
      #line 3194 
      struct _ddebug __UNIQUE_ID_ddebug551 = {.modname = (char *)"ice", .function = (char *)"ice_set_vf_spoofchk", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_virtchnl_pf.c", .format = (char *)"VF spoofchk already %s\n", .lineno = (unsigned int)3194U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 3194 
      branch = arch_static_branch(& __UNIQUE_ID_ddebug551.key.dd_key_false.key,(_Bool)0);
      #line 3194 
      if ((long)((long)((int)branch != 0)) != 0L) {
        #line 3194 
        char *tmp_2;
        #line 3194 
        if ((int)ena != 0) 
                           #line 3194 
                           tmp_2 = (char *)"ON"; else 
                                                      #line 3194 
                                                      tmp_2 = (char *)"OFF";
        #line 3194 
        ;
        #line 3194 
        __dynamic_dev_dbg(& __UNIQUE_ID_ddebug551,dev,(char *)"VF spoofchk already %s\n",tmp_2);
      }
    }
    #line 3196 
    return 0;
  }
  #line 3199 
  ctx = (struct ice_vsi_ctx *)kzalloc_5(384UL,3264U);
  #line 3200 
  if (ctx == (struct ice_vsi_ctx *)0) 
                                      #line 3201 
                                      return -12;
  #line 3203 
  ctx->info.valid_sections = (unsigned short)2U;
  #line 3205 
  if ((int)ena != 0) {
    #line 3206 
    ctx->info.sec_flags = (unsigned char)((unsigned int)ctx->info.sec_flags | 4U);
    #line 3207 
    ctx->info.sw_flags2 = (unsigned char)((unsigned int)ctx->info.sw_flags2 | 15U);
  }
  #line 3210 
  status = ice_update_vsi(& pf->hw,(unsigned short)((int)vsi->idx),ctx,(struct ice_sq_cd *)0);
  #line 3211 
  if (status != ICE_SUCCESS) {
    {
      #line 3212 
      bool branch_0;
      #line 3212 
      struct _ddebug __UNIQUE_ID_ddebug552 = {.modname = (char *)"ice", .function = (char *)"ice_set_vf_spoofchk", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_virtchnl_pf.c", .format = (char *)"Error %d, failed to update VSI* parameters\n", .lineno = (unsigned int)3212U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 3212 
      branch_0 = arch_static_branch(& __UNIQUE_ID_ddebug552.key.dd_key_false.key,(_Bool)0);
      #line 3212 
      if ((long)((long)((int)branch_0 != 0)) != 0L) 
                                                    #line 3212 
                                                    __dynamic_dev_dbg(& __UNIQUE_ID_ddebug552,dev,(char *)"Error %d, failed to update VSI* parameters\n",(int)status);
    }
    #line 3214 
    ret = -5;
    #line 3215 
    goto out;
  }
  #line 3218 
  vf->spoofchk = (unsigned char)ena;
  #line 3219 
  vsi->info.sec_flags = ctx->info.sec_flags;
  #line 3220 
  vsi->info.sw_flags2 = ctx->info.sw_flags2;
  #line 3221 
  out: 
       #line 3221 
  ;
  #line 3222 
  kfree((void *)ctx);
  #line 3223 
  return ret;
}

#line 3232  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_virtchnl_pf.c"
static void ice_wait_on_vf_reset(struct ice_vf *vf)
{
  #line 3234 
  int i;
  #line 3236 
  i = 0;
  #line 3236 
  while (i <= 14) {
    {
      #line 3237 
      if ((int)test_bit(0L,(unsigned long *)(& vf->vf_states)) != 0) 
        #line 3238 
        break;
      #line 3239 
      msleep(20U);
    }
    #line 3236 
    i ++;
  }
  #line 3241 
  return;
}

#line 3251  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_virtchnl_pf.c"
int ice_set_vf_mac(struct net_device *netdev, int vf_id, u8 *mac)
{
  #line 3254 
  struct ice_vf *vf;
  #line 3253 
  struct ice_pf *pf = ice_netdev_to_pf(netdev);
  #line 3255 
  int ret = 0;
  #line 3257 
  if (ice_validate_vf_id(pf,vf_id) != 0) 
                                         #line 3258 
                                         return -22;
  #line 3260 
  vf = pf->vf + (unsigned long)vf_id;
  #line 3262 
  if ((int)ice_is_vf_disabled(vf) != 0) 
                                        #line 3263 
                                        return -22;
  #line 3268 
  ice_wait_on_vf_reset(vf);
  #line 3270 
  if (ice_check_vf_init(pf,vf) != 0) 
                                     #line 3271 
                                     return -16;
  #line 3273 
  if ((int)is_zero_ether_addr(mac) != 0) 
                                         #line 3273 
                                         goto _LOR;
  else {
    #line 3273 
    if ((int)is_multicast_ether_addr(mac) != 0) {
      #line 3273 
      _LOR: {
              #line 3274 
              netdev_err(netdev,(char *)"%pM not a valid unicast address\n",mac);
              #line 3275 
              return -22;
            }
    }
  }
  #line 3283 
  ether_addr_copy((u8 *)(& vf->dflt_lan_addr.addr),mac);
  #line 3284 
  vf->pf_set_mac = (unsigned char)1U;
  #line 3285 
  netdev_info(netdev,(char *)"MAC on VF %d set to %pM. VF driver will be reinitialized\n",vf_id,mac);
  #line 3289 
  ice_vc_reset_vf(vf);
  #line 3290 
  return ret;
}

#line 3301  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_virtchnl_pf.c"
int ice_set_vf_trust(struct net_device *netdev, int vf_id, bool trusted)
{
  #line 3304 
  struct device *dev;
  #line 3305 
  struct ice_vf *vf;
  #line 3330 
  char *tmp_3;
  #line 3303 
  struct ice_pf *pf = ice_netdev_to_pf(netdev);
  #line 3307 
  dev = & (pf->pdev)->dev;
  #line 3308 
  if (ice_validate_vf_id(pf,vf_id) != 0) 
                                         #line 3309 
                                         return -22;
  #line 3311 
  vf = pf->vf + (unsigned long)vf_id;
  #line 3313 
  if ((int)ice_is_vf_disabled(vf) != 0) 
                                        #line 3314 
                                        return -22;
  #line 3319 
  ice_wait_on_vf_reset(vf);
  #line 3321 
  if (ice_check_vf_init(pf,vf) != 0) 
                                     #line 3322 
                                     return -16;
  #line 3325 
  if ((int)((_Bool)(vf->trusted != 0)) == (int)trusted) 
                                                        #line 3326 
                                                        return 0;
  #line 3328 
  vf->trusted = (unsigned char)trusted;
  #line 3329 
  ice_vc_reset_vf(vf);
  #line 3330 
  if ((int)trusted != 0) 
                         #line 3330 
                         tmp_3 = (char *)""; else 
                                                  #line 3330 
                                                  tmp_3 = (char *)"un";
  #line 3330 
  ;
  #line 3330 
  ;
  #line 3330 
  _dev_info(dev,(char *)"VF %u is now %strusted\n",vf_id,tmp_3);
  #line 3333 
  return 0;
}

#line 3344  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_virtchnl_pf.c"
int ice_set_vf_link_state(struct net_device *netdev, int vf_id, int link_state)
{
  #line 3348 
  struct ice_link_status *ls;
  #line 3349 
  struct ice_vf *vf;
  #line 3350 
  struct ice_hw *hw;
  #line 3346 
  struct ice_pf *pf = ice_netdev_to_pf(netdev);
  #line 3347 
  struct virtchnl_pf_event pfe = {.event = VIRTCHNL_EVENT_UNKNOWN, .event_data = {.link_event = {.link_speed = 0, .link_status = (_Bool)0}}, .severity = 0};
  #line 3352 
  if (ice_validate_vf_id(pf,vf_id) != 0) 
                                         #line 3353 
                                         return -22;
  #line 3355 
  vf = pf->vf + (unsigned long)vf_id;
  #line 3356 
  hw = & pf->hw;
  #line 3357 
  ls = & (pf->hw.port_info)->phy.link_info;
  #line 3359 
  if (ice_check_vf_init(pf,vf) != 0) 
                                     #line 3360 
                                     return -16;
  #line 3362 
  pfe.event = VIRTCHNL_EVENT_LINK_CHANGE;
  #line 3363 
  pfe.severity = 0;
  #line 3365 
  switch (link_state) {
    #line 3366 
    case 0: 
            #line 3366 
    ;
    #line 3367 
    vf->link_forced = (unsigned char)0U;
    #line 3368 
    vf->link_up = (unsigned char)ls->link_info;
    #line 3369 
    break;
    #line 3370 
    case 1: 
            #line 3370 
    ;
    #line 3371 
    vf->link_forced = (unsigned char)1U;
    #line 3372 
    vf->link_up = (unsigned char)1U;
    #line 3373 
    break;
    #line 3374 
    case 2: 
            #line 3374 
    ;
    #line 3375 
    vf->link_forced = (unsigned char)1U;
    #line 3376 
    vf->link_up = (unsigned char)0U;
    #line 3377 
    break;
    #line 3378 
    default: 
             #line 3378 
    ;
    #line 3379 
    return -22;
  }
  #line 3382 
  if ((unsigned int)vf->link_forced != 0U) 
                                           #line 3383 
                                           ice_set_pfe_link_forced(vf,& pfe,(_Bool)((unsigned int)vf->link_up != 0U)); else 
                                                                    #line 3385 
                                                                    ice_set_pfe_link(vf,& pfe,(int)ls->link_speed,(_Bool)((unsigned int)vf->link_up != 0U));
  #line 3388 
  ice_aq_send_msg_to_vf(hw,(unsigned short)((int)((unsigned short)vf->vf_id)),17U,0U,(u8 *)(& pfe),(unsigned short)16,(struct ice_sq_cd *)0);
  #line 3392 
  return 0;
}

#line 3401  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_virtchnl_pf.c"
int ice_get_vf_stats(struct net_device *netdev, int vf_id, struct ifla_vf_stats *vf_stats)
{
  #line 3405 
  struct ice_eth_stats *stats;
  #line 3406 
  struct ice_vsi *vsi;
  #line 3407 
  struct ice_vf *vf;
  #line 3404 
  struct ice_pf *pf = ice_netdev_to_pf(netdev);
  #line 3409 
  if (ice_validate_vf_id(pf,vf_id) != 0) 
                                         #line 3410 
                                         return -22;
  #line 3412 
  vf = pf->vf + (unsigned long)vf_id;
  #line 3414 
  if (ice_check_vf_init(pf,vf) != 0) 
                                     #line 3415 
                                     return -16;
  #line 3417 
  vsi = *(pf->vsi + (unsigned long)vf->lan_vsi_idx);
  #line 3418 
  if (vsi == (struct ice_vsi *)0) 
                                  #line 3419 
                                  return -22;
  #line 3421 
  ice_update_eth_stats(vsi);
  #line 3422 
  stats = & vsi->eth_stats;
  #line 3424 
  memset((void *)vf_stats,0,64UL);
  #line 3426 
  vf_stats->rx_packets = (stats->rx_unicast + stats->rx_broadcast) + stats->rx_multicast;
  #line 3428 
  vf_stats->tx_packets = (stats->tx_unicast + stats->tx_broadcast) + stats->tx_multicast;
  #line 3430 
  vf_stats->rx_bytes = stats->rx_bytes;
  #line 3431 
  vf_stats->tx_bytes = stats->tx_bytes;
  #line 3432 
  vf_stats->broadcast = stats->rx_broadcast;
  #line 3433 
  vf_stats->multicast = stats->rx_multicast;
  #line 3434 
  vf_stats->rx_dropped = stats->rx_discards;
  #line 3435 
  vf_stats->tx_dropped = stats->tx_discards;
  #line 3437 
  return 0;
}

#line 112  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ice/ice.ko/concurrency safety/0/concurrency safety/weaver/ice_virtchnl_pf.i.aux"
static unsigned long cif_find_next_bit(unsigned long *addr, unsigned long size, unsigned long offset)
{
  #line 115 
  return ldv_find_next_bit(addr,size,offset);
}

#line 119  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ice/ice.ko/concurrency safety/0/concurrency safety/weaver/ice_virtchnl_pf.i.aux"
static void cif_set_bit_8(long nr, unsigned long *addr)
{
  #line 122 
  ldv_set_bit(nr,addr);
  #line 123 
  return;
}

#line 126  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ice/ice.ko/concurrency safety/0/concurrency safety/weaver/ice_virtchnl_pf.i.aux"
static void cif_clear_bit_8(long nr, unsigned long *addr)
{
  #line 129 
  ldv_clear_bit(nr,addr);
  #line 130 
  return;
}

#line 154  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ice/ice.ko/concurrency safety/0/concurrency safety/weaver/ice_virtchnl_pf.i.aux"
static unsigned long cif_find_first_bit_0(unsigned long *addr, unsigned long size)
{
  #line 157 
  return ldv_find_first_bit(addr,size);
}

#line 196  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ice/ice.ko/concurrency safety/0/concurrency safety/weaver/ice_virtchnl_pf.i.aux"
static void cif_bitmap_zero_0(unsigned long *dst, unsigned int nbits)
{
  #line 199 
  ldv_bitmap_zero(dst,nbits);
  #line 200 
  return;
}

#line 418  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ice/ice.ko/concurrency safety/0/concurrency safety/weaver/ice_virtchnl_pf.i.aux"
static void *kzalloc_5(size_t size, gfp_t flags)
{
  #line 421 
  return ldv_kzalloc(size,flags);
}

#line 798  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ice/ice.ko/concurrency safety/0/concurrency safety/weaver/ice_virtchnl_pf.i.aux"
static void *cif_devm_kcalloc_6(struct device *dev, size_t n, size_t size, gfp_t flags)
{
  #line 801 
  return ldv_devm_kcalloc(n,size,flags);
}

#line 805  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ice/ice.ko/concurrency safety/0/concurrency safety/weaver/ice_virtchnl_pf.i.aux"
static void cif_bitmap_set_0(unsigned long *map, unsigned int start, unsigned int nbits)
{
  #line 808 
  ldv_bitmap_set(map,start,(int)nbits);
  #line 809 
  return;
}

#line 26  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ice/ice.ko/concurrency safety/0/concurrency safety/weaver/ice_dcb.i.aux"
#line 805 
static void cif_mutex_lock_sched_lock_of_ice_port_info_0(struct mutex *lock);
#line 185  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mutex.h"
#line 812  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ice/ice.ko/concurrency safety/0/concurrency safety/weaver/ice_dcb.i.aux"
static void cif_mutex_unlock_sched_lock_of_ice_port_info_0(struct mutex *lock);
#line 937  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
#line 798  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ice/ice.ko/concurrency safety/0/concurrency safety/weaver/ice_dcb.i.aux"
static void *cif_devm_kzalloc_6(struct device *dev, size_t size, gfp_t flags);
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_dcb.c"
static enum ice_status ice_aq_get_lldp_mib(struct ice_hw *hw, u8 bridge_type, u8 mib_type, void *buf, u16 buf_size, u16 *local_len, u16 *remote_len, struct ice_sq_cd *cd)
{
  #line 26 
  struct ice_aqc_lldp_get_mib *cmd;
  #line 27 
  struct ice_aq_desc desc;
  #line 28 
  enum ice_status status;
  #line 30 
  cmd = & desc.params.lldp_get_mib;
  #line 32 
  if ((unsigned int)buf_size == 0U || buf == (void *)0) 
                                                        #line 33 
                                                        return ICE_ERR_PARAM;
  #line 35 
  ice_fill_dflt_direct_cmd_desc(& desc,(unsigned short)2560);
  #line 37 
  cmd->type = (unsigned char)((unsigned int)mib_type & 3U);
  #line 38 
  cmd->type = (unsigned char)((int)cmd->type | (((int)bridge_type << 2) & 12));
  #line 41 
  desc.datalen = buf_size;
  #line 43 
  status = ice_aq_send_cmd(hw,& desc,buf,(unsigned short)((int)buf_size),cd);
  #line 44 
  if (status == ICE_SUCCESS) {
    #line 45 
    if (local_len != (u16 *)0U) 
                                #line 46 
                                *local_len = cmd->local_len;
    #line 47 
    if (remote_len != (u16 *)0U) 
                                 #line 48 
                                 *remote_len = cmd->remote_len;
  }
  #line 51 
  return status;
}

#line 64  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_dcb.c"
static enum ice_status ice_aq_cfg_lldp_mib_change(struct ice_hw *hw, bool ena_update, struct ice_sq_cd *cd)
{
  #line 67 
  struct ice_aqc_lldp_set_mib_change *cmd;
  #line 68 
  struct ice_aq_desc desc;
  #line 70 
  cmd = & desc.params.lldp_set_event;
  #line 72 
  ice_fill_dflt_direct_cmd_desc(& desc,(unsigned short)2561);
  #line 74 
  if (! ena_update) 
                    #line 75 
                    cmd->command = (unsigned char)((unsigned int)cmd->command | 1U);
  #line 77 
  return ice_aq_send_cmd(hw,& desc,(void *)0,(unsigned short)0,cd);
}

#line 92  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_dcb.c"
enum ice_status ice_aq_stop_lldp(struct ice_hw *hw, bool shutdown_lldp_agent, bool persist, struct ice_sq_cd *cd)
{
  #line 95 
  struct ice_aqc_lldp_stop *cmd;
  #line 96 
  struct ice_aq_desc desc;
  #line 98 
  cmd = & desc.params.lldp_stop;
  #line 100 
  ice_fill_dflt_direct_cmd_desc(& desc,(unsigned short)2565);
  #line 102 
  if ((int)shutdown_lldp_agent != 0) 
                                     #line 103 
                                     cmd->command = (unsigned char)((unsigned int)cmd->command | 1U);
  #line 105 
  if ((int)persist != 0) 
                         #line 106 
                         cmd->command = (unsigned char)((unsigned int)cmd->command | 2U);
  #line 108 
  return ice_aq_send_cmd(hw,& desc,(void *)0,(unsigned short)0,cd);
}

#line 120  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_dcb.c"
enum ice_status ice_aq_start_lldp(struct ice_hw *hw, bool persist, struct ice_sq_cd *cd)
{
  #line 122 
  struct ice_aqc_lldp_start *cmd;
  #line 123 
  struct ice_aq_desc desc;
  #line 125 
  cmd = & desc.params.lldp_start;
  #line 127 
  ice_fill_dflt_direct_cmd_desc(& desc,(unsigned short)2566);
  #line 129 
  cmd->command = (unsigned char)1U;
  #line 131 
  if ((int)persist != 0) 
                         #line 132 
                         cmd->command = (unsigned char)((unsigned int)cmd->command | 2U);
  #line 134 
  return ice_aq_send_cmd(hw,& desc,(void *)0,(unsigned short)0,cd);
}

#line 148  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_dcb.c"
static enum ice_status ice_aq_set_lldp_mib(struct ice_hw *hw, u8 mib_type, void *buf, u16 buf_size, struct ice_sq_cd *cd)
{
  #line 151 
  struct ice_aqc_lldp_set_local_mib *cmd;
  #line 152 
  struct ice_aq_desc desc;
  #line 154 
  cmd = & desc.params.lldp_set_mib;
  #line 156 
  if ((unsigned int)buf_size == 0U || buf == (void *)0) 
                                                        #line 157 
                                                        return ICE_ERR_PARAM;
  #line 159 
  ice_fill_dflt_direct_cmd_desc(& desc,(unsigned short)2568);
  #line 161 
  desc.flags = (unsigned short)((unsigned int)desc.flags | 1024U);
  #line 162 
  desc.datalen = buf_size;
  #line 164 
  cmd->type = mib_type;
  #line 165 
  cmd->length = buf_size;
  #line 167 
  return ice_aq_send_cmd(hw,& desc,buf,(unsigned short)((int)buf_size),cd);
}

#line 176  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_dcb.c"
static u8 ice_get_dcbx_status(struct ice_hw *hw)
{
  #line 178 
  u32 reg;
  #line 180 
  reg = readl((void *)(hw->hw_addr + 536608U));
  #line 181 
  return (unsigned char)((unsigned int)((unsigned char)reg) & 7U);
}

#line 193  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_dcb.c"
static void ice_parse_ieee_ets_common_tlv(u8 *buf, struct ice_dcb_ets_cfg *ets_cfg)
{
  #line 196 
  int i;
  #line 195 
  u8 offset = (unsigned char)0U;
  #line 206 
  i = 0;
  #line 206 
  while (i <= 3) {
    #line 207 
    ets_cfg->prio_table[i * 2] = (unsigned char)((unsigned int)((unsigned char)((int)*(buf + (unsigned long)offset) >> 4)) & 7U);
    #line 210 
    ets_cfg->prio_table[i * 2 + 1] = (unsigned char)((unsigned int)*(buf + (unsigned long)offset) & 7U);
    #line 213 
    offset = (u8)((int)offset + 1);
    #line 206 
    i ++;
  }
  #line 228 
  i = 0;
  #line 228 
  while (i <= 7) {
    {
      #line 230 
      u8 tmp;
      #line 229 
      ets_cfg->tcbwtable[i] = *(buf + (unsigned long)offset);
      #line 230 
      tmp = offset;
      #line 230 
      offset = (u8)((int)offset + 1);
      #line 230 
      ets_cfg->tsatable[i] = *(buf + (unsigned long)((int)tmp + 8));
    }
    #line 228 
    i ++;
  }
  #line 232 
  return;
}

#line 242  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_dcb.c"
static void ice_parse_ieee_etscfg_tlv(struct ice_lldp_org_tlv *tlv, struct ice_dcbx_cfg *dcbcfg)
{
  #line 245 
  struct ice_dcb_ets_cfg *etscfg;
  #line 246 
  u8 *buf = (u8 *)(& tlv->tlvinfo);
  #line 255 
  etscfg = & dcbcfg->etscfg;
  #line 256 
  etscfg->willing = (unsigned char)((int)*buf >> 7);
  #line 258 
  etscfg->cbs = (unsigned char)((unsigned int)((unsigned char)((unsigned long)*buf >> 6)) & 1U);
  #line 259 
  etscfg->maxtcs = (unsigned char)((unsigned int)*buf & 7U);
  #line 263 
  ice_parse_ieee_ets_common_tlv(buf + 1U,etscfg);
  #line 264 
  return;
}

#line 274  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_dcb.c"
static void ice_parse_ieee_etsrec_tlv(struct ice_lldp_org_tlv *tlv, struct ice_dcbx_cfg *dcbcfg)
{
  #line 277 
  u8 *buf = (u8 *)(& tlv->tlvinfo);
  #line 280 
  ice_parse_ieee_ets_common_tlv(buf + 1U,& dcbcfg->etsrec);
  #line 281 
  return;
}

#line 291  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_dcb.c"
static void ice_parse_ieee_pfccfg_tlv(struct ice_lldp_org_tlv *tlv, struct ice_dcbx_cfg *dcbcfg)
{
  #line 294 
  u8 *buf = (u8 *)(& tlv->tlvinfo);
  #line 302 
  dcbcfg->pfc.willing = (unsigned char)((int)*buf >> 7);
  #line 304 
  dcbcfg->pfc.mbc = (unsigned char)((unsigned int)((unsigned char)((unsigned long)*buf >> 6)) & 1U);
  #line 305 
  dcbcfg->pfc.pfccap = (unsigned char)((unsigned int)*buf & 15U);
  #line 307 
  dcbcfg->pfc.pfcena = *(buf + 1U);
  #line 308 
  return;
}

#line 318  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_dcb.c"
static void ice_parse_ieee_app_tlv(struct ice_lldp_org_tlv *tlv, struct ice_dcbx_cfg *dcbcfg)
{
  #line 322 
  u16 typelen;
  #line 324 
  u16 len;
  #line 325 
  u8 *buf;
  #line 321 
  u16 offset = (unsigned short)0U;
  #line 323 
  int i = 0;
  #line 327 
  typelen = __builtin_bswap16((unsigned short)((int)tlv->typelen));
  #line 328 
  len = (unsigned short)((unsigned int)typelen & 511U);
  #line 329 
  buf = (u8 *)(& tlv->tlvinfo);
  #line 334 
  len = (unsigned short)((unsigned int)len + 65531U);
  #line 337 
  offset = (u16)((int)offset + 1);
  #line 347 
  while ((int)offset < (int)len) {
    #line 348 
    dcbcfg->app[i].priority = (unsigned char)((int)*(buf + (unsigned long)offset) >> 5);
    #line 351 
    dcbcfg->app[i].selector = (unsigned char)((unsigned int)*(buf + (unsigned long)offset) & 7U);
    #line 354 
    dcbcfg->app[i].prot_id = (unsigned short)(((int)*(buf + ((unsigned long)offset + (unsigned long)1U)) << 8) | (int)*(buf + ((unsigned long)offset + (unsigned long)2U)));
    #line 357 
    offset = (unsigned short)((unsigned int)offset + 3U);
    #line 358 
    i ++;
    #line 359 
    if (i > 31) 
                #line 360 
                break;
  }
  #line 363 
  dcbcfg->numapps = (unsigned int)i;
  #line 364 
  return;
}

#line 375  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_dcb.c"
static void ice_parse_ieee_tlv(struct ice_lldp_org_tlv *tlv, struct ice_dcbx_cfg *dcbcfg)
{
  #line 377 
  u32 ouisubtype;
  #line 378 
  u8 subtype;
  #line 380 
  ouisubtype = __builtin_bswap32(tlv->ouisubtype);
  #line 381 
  subtype = (unsigned char)ouisubtype;
  #line 383 
  switch ((int)subtype) {
    #line 384 
    case 9: 
            #line 384 
    ;
    #line 385 
    ice_parse_ieee_etscfg_tlv(tlv,dcbcfg);
    #line 386 
    break;
    #line 387 
    case 10: 
             #line 387 
    ;
    #line 388 
    ice_parse_ieee_etsrec_tlv(tlv,dcbcfg);
    #line 389 
    break;
    #line 390 
    case 11: 
             #line 390 
    ;
    #line 391 
    ice_parse_ieee_pfccfg_tlv(tlv,dcbcfg);
    #line 392 
    break;
    #line 393 
    case 12: 
             #line 393 
    ;
    #line 394 
    ice_parse_ieee_app_tlv(tlv,dcbcfg);
    #line 395 
    break;
    #line 396 
    default: 
             #line 396 
    ;
    #line 397 
    break;
  }
  #line 399 
  return;
}

#line 409  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_dcb.c"
static void ice_parse_cee_pgcfg_tlv(struct ice_cee_feat_tlv *tlv, struct ice_dcbx_cfg *dcbcfg)
{
  #line 412 
  struct ice_dcb_ets_cfg *etscfg;
  #line 415 
  int i;
  #line 413 
  u8 *buf = (u8 *)(& tlv->tlvinfo);
  #line 414 
  u16 offset = (unsigned short)0U;
  #line 417 
  etscfg = & dcbcfg->etscfg;
  #line 419 
  if (((int)tlv->en_will_err & 64) != 0) 
                                         #line 420 
                                         etscfg->willing = (unsigned char)1U;
  #line 422 
  etscfg->cbs = (unsigned char)0U;
  #line 431 
  i = 0;
  #line 431 
  while (i <= 3) {
    #line 432 
    etscfg->prio_table[i * 2] = (unsigned char)((int)*(buf + (unsigned long)offset) >> 4);
    #line 435 
    etscfg->prio_table[i * 2 + 1] = (unsigned char)((unsigned int)*(buf + (unsigned long)offset) & 15U);
    #line 438 
    offset = (u16)((int)offset + 1);
    #line 431 
    i ++;
  }
  #line 447 
  i = 0;
  #line 447 
  while (i <= 7) {
    {
      #line 448 
      u16 tmp;
      #line 448 
      tmp = offset;
      #line 448 
      offset = (u16)((int)offset + 1);
      #line 448 
      etscfg->tcbwtable[i] = *(buf + (unsigned long)tmp);
      #line 450 
      if ((unsigned int)etscfg->prio_table[i] == 15U) 
                                                      #line 451 
                                                      dcbcfg->etscfg.tsatable[i] = (unsigned char)0U; else 
                                                                    #line 453 
                                                                    dcbcfg->etscfg.tsatable[i] = (unsigned char)2U;
    }
    #line 447 
    i ++;
  }
  #line 457 
  etscfg->maxtcs = *(buf + (unsigned long)offset);
  #line 458 
  return;
}

#line 468  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_dcb.c"
static void ice_parse_cee_pfccfg_tlv(struct ice_cee_feat_tlv *tlv, struct ice_dcbx_cfg *dcbcfg)
{
  #line 471 
  u8 *buf = (u8 *)(& tlv->tlvinfo);
  #line 473 
  if (((int)tlv->en_will_err & 64) != 0) 
                                         #line 474 
                                         dcbcfg->pfc.willing = (unsigned char)1U;
  #line 481 
  dcbcfg->pfc.pfcena = *buf;
  #line 482 
  dcbcfg->pfc.pfccap = *(buf + 1U);
  #line 483 
  return;
}

#line 493  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_dcb.c"
static void ice_parse_cee_app_tlv(struct ice_cee_feat_tlv *tlv, struct ice_dcbx_cfg *dcbcfg)
{
  #line 495 
  u16 len;
  #line 495 
  u16 typelen;
  #line 496 
  struct ice_cee_app_prio *app;
  #line 497 
  u8 i;
  #line 495 
  u16 offset = (unsigned short)0U;
  #line 499 
  typelen = __builtin_bswap16((unsigned short)((int)tlv->hdr.typelen));
  #line 500 
  len = (unsigned short)((unsigned int)typelen & 511U);
  #line 502 
  dcbcfg->numapps = (unsigned int)len / 6U;
  #line 503 
  if (dcbcfg->numapps == 0U) 
                             #line 504 
                             return;
  #line 505 
  if (dcbcfg->numapps > 32U) 
                             #line 506 
                             dcbcfg->numapps = 32U;
  #line 508 
  i = (unsigned char)0U;
  #line 508 
  while ((unsigned int)i < dcbcfg->numapps) {
    {
      #line 509 
      u8 up;
      #line 509 
      u8 selector;
      #line 511 
      app = (struct ice_cee_app_prio *)((u8 *)(& tlv->tlvinfo) + (unsigned long)offset);
      #line 512 
      up = (unsigned char)0U;
      #line 512 
      while ((unsigned int)up <= 7U) {
        #line 513 
        if ((((unsigned long)app->prio_map >> (int)up) & 1UL) != 0UL) 
          #line 514 
          break;
        #line 512 
        up = (u8)((int)up + 1);
      }
      #line 516 
      dcbcfg->app[(int)i].priority = up;
      #line 519 
      selector = (unsigned char)((unsigned int)app->upper_oui_sel & 3U);
      #line 520 
      switch ((int)selector) {
        #line 521 
        case 0: 
                #line 521 
        ;
        #line 522 
        dcbcfg->app[(int)i].selector = (unsigned char)1U;
        #line 523 
        break;
        #line 524 
        case 1: 
                #line 524 
        ;
        #line 525 
        dcbcfg->app[(int)i].selector = (unsigned char)2U;
        #line 526 
        break;
        #line 527 
        default: 
                 #line 527 
        ;
        #line 529 
        dcbcfg->app[(int)i].selector = selector;
      }
      #line 532 
      dcbcfg->app[(int)i].prot_id = __builtin_bswap16((unsigned short)((int)app->protocol));
      #line 534 
      offset = (unsigned short)((unsigned int)offset + 6U);
    }
    #line 508 
    i = (u8)((int)i + 1);
  }
  #line 536 
  return;
}

#line 547  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_dcb.c"
static void ice_parse_cee_tlv(struct ice_lldp_org_tlv *tlv, struct ice_dcbx_cfg *dcbcfg)
{
  #line 549 
  struct ice_cee_feat_tlv *sub_tlv;
  #line 550 
  u8 subtype;
  #line 551 
  u16 len;
  #line 551 
  u16 tlvlen;
  #line 551 
  u16 typelen;
  #line 552 
  u32 ouisubtype;
  #line 550 
  u8 feat_tlv_count = (unsigned char)0U;
  #line 554 
  ouisubtype = __builtin_bswap32(tlv->ouisubtype);
  #line 555 
  subtype = (unsigned char)ouisubtype;
  #line 558 
  if ((unsigned int)subtype != 2U) 
                                   #line 559 
                                   return;
  #line 561 
  typelen = __builtin_bswap16((unsigned short)((int)tlv->typelen));
  #line 562 
  tlvlen = (unsigned short)((unsigned int)typelen & 511U);
  #line 563 
  len = (unsigned short)18U;
  #line 566 
  if ((int)tlvlen <= (int)len) 
                               #line 567 
                               return;
  #line 569 
  sub_tlv = (struct ice_cee_feat_tlv *)((char *)tlv + (unsigned long)len);
  #line 570 
  while ((unsigned int)feat_tlv_count <= 2U) {
    #line 571 
    u16 sublen;
    #line 573 
    typelen = __builtin_bswap16((unsigned short)((int)sub_tlv->hdr.typelen));
    #line 574 
    sublen = (unsigned short)((unsigned int)typelen & 511U);
    #line 575 
    subtype = (unsigned char)((int)typelen >> 9);
    #line 577 
    switch ((int)subtype) {
      #line 578 
      case 2: 
              #line 578 
      ;
      #line 579 
      ice_parse_cee_pgcfg_tlv(sub_tlv,dcbcfg);
      #line 580 
      break;
      #line 581 
      case 3: 
              #line 581 
      ;
      #line 582 
      ice_parse_cee_pfccfg_tlv(sub_tlv,dcbcfg);
      #line 583 
      break;
      #line 584 
      case 4: 
              #line 584 
      ;
      #line 585 
      ice_parse_cee_app_tlv(sub_tlv,dcbcfg);
      #line 586 
      break;
      #line 587 
      default: 
               #line 587 
      ;
      #line 588 
      return;
    }
    #line 590 
    feat_tlv_count = (u8)((int)feat_tlv_count + 1);
    #line 592 
    sub_tlv = (struct ice_cee_feat_tlv *)((char *)sub_tlv + ((unsigned long)sublen + 2UL));
  }
  #line 595 
  return;
}

#line 607  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_dcb.c"
static void ice_parse_org_tlv(struct ice_lldp_org_tlv *tlv, struct ice_dcbx_cfg *dcbcfg)
{
  #line 609 
  u32 ouisubtype;
  #line 610 
  u32 oui;
  #line 612 
  ouisubtype = __builtin_bswap32(tlv->ouisubtype);
  #line 613 
  oui = ouisubtype >> 8;
  #line 614 
  switch (oui) {
    #line 615 
    case (u32)32962: 
                     #line 615 
    ;
    #line 616 
    ice_parse_ieee_tlv(tlv,dcbcfg);
    #line 617 
    break;
    #line 618 
    case (u32)6945: 
                    #line 618 
    ;
    #line 619 
    ice_parse_cee_tlv(tlv,dcbcfg);
    #line 620 
    break;
    #line 621 
    default: 
             #line 621 
    ;
    #line 622 
    break;
  }
  #line 624 
  return;
}

#line 634  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_dcb.c"
static enum ice_status ice_lldp_to_dcb_cfg(u8 *lldpmib, struct ice_dcbx_cfg *dcbcfg)
{
  #line 636 
  struct ice_lldp_org_tlv *tlv;
  #line 639 
  u16 typelen;
  #line 640 
  u16 type;
  #line 641 
  u16 len;
  #line 637 
  enum ice_status ret = 0;
  #line 638 
  u16 offset = (unsigned short)0U;
  #line 643 
  if (lldpmib == (u8 *)0U || dcbcfg == (struct ice_dcbx_cfg *)0) 
                                                                 #line 644 
                                                                 return ICE_ERR_PARAM;
  #line 647 
  lldpmib += 14U;
  #line 648 
  tlv = (struct ice_lldp_org_tlv *)lldpmib;
  #line 649 
  while (1) {
    #line 650 
    typelen = __builtin_bswap16((unsigned short)((int)tlv->typelen));
    #line 651 
    type = (unsigned short)((int)typelen >> 9);
    #line 652 
    len = (unsigned short)((unsigned int)typelen & 511U);
    #line 653 
    offset = (unsigned short)((unsigned int)((int)offset + (int)len) + 2U);
    #line 656 
    if ((unsigned int)type == 0U || (unsigned int)offset > 1500U) 
                                                                  #line 657 
                                                                  break;
    #line 659 
    switch ((int)type) {
      #line 660 
      case 127: 
                #line 660 
      ;
      #line 661 
      ice_parse_org_tlv(tlv,dcbcfg);
      #line 662 
      break;
      #line 663 
      default: 
               #line 663 
      ;
      #line 664 
      break;
    }
    #line 668 
    tlv = (struct ice_lldp_org_tlv *)((char *)tlv + ((unsigned long)len + 2UL));
  }
  #line 672 
  return ret;
}

#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_dcb.c"
enum ice_status ice_aq_get_dcb_cfg(struct ice_hw *hw, u8 mib_type, u8 bridgetype, struct ice_dcbx_cfg *dcbcfg)
{
  #line 692 
  void *__mptr;
  #line 703 
  void *__mptr_0;
  #line 688 
  enum ice_status ret;
  #line 689 
  u8 *lldpmib;
  #line 692 
  __mptr = (void *)hw;
  #line 692 
  lldpmib = (u8 *)cif_devm_kzalloc_6(& (((struct ice_pf *)(__mptr + 18446744073709549512U))->pdev)->dev,
                           1500UL,3264U);
  #line 693 
  if (lldpmib == (u8 *)0U) 
                           #line 694 
                           return ICE_ERR_NO_MEMORY;
  #line 696 
  ret = ice_aq_get_lldp_mib(hw,(unsigned char)((int)bridgetype),(unsigned char)((int)mib_type),(void *)lldpmib,(unsigned short)1500,(u16 *)0U,(u16 *)0U,(struct ice_sq_cd *)0);
  #line 699 
  if (ret == ICE_SUCCESS) 
                          #line 701 
                          ret = ice_lldp_to_dcb_cfg(lldpmib,dcbcfg);
  #line 703 
  ;
  #line 703 
  __mptr_0 = (void *)hw;
  #line 703 
  devm_kfree(& (((struct ice_pf *)(__mptr_0 + 18446744073709549512U))->pdev)->dev,(void *)lldpmib);
  #line 705 
  return ret;
}

#line 723  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_dcb.c"
enum ice_status ice_aq_start_stop_dcbx(struct ice_hw *hw, bool start_dcbx_agent, bool *dcbx_agent_status, struct ice_sq_cd *cd)
{
  #line 726 
  struct ice_aqc_lldp_stop_start_specific_agent *cmd;
  #line 727 
  enum ice_status status;
  #line 728 
  struct ice_aq_desc desc;
  #line 729 
  u16 opcode;
  #line 731 
  cmd = & desc.params.lldp_agent_ctrl;
  #line 733 
  opcode = (unsigned short)2569U;
  #line 735 
  ice_fill_dflt_direct_cmd_desc(& desc,(unsigned short)((int)opcode));
  #line 737 
  if ((int)start_dcbx_agent != 0) 
                                  #line 738 
                                  cmd->command = (unsigned char)1U;
  #line 740 
  status = ice_aq_send_cmd(hw,& desc,(void *)0,(unsigned short)0,cd);
  #line 742 
  *dcbx_agent_status = (_Bool)0;
  #line 744 
  if (status == ICE_SUCCESS && (unsigned int)cmd->command == 1U) 
                                                                 #line 746 
                                                                 *dcbx_agent_status = (_Bool)1;
  #line 748 
  return status;
}

#line 760  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_dcb.c"
static enum ice_status ice_aq_get_cee_dcb_cfg(struct ice_hw *hw, struct ice_aqc_get_cee_dcb_cfg_resp *buff, struct ice_sq_cd *cd)
{
  #line 764 
  struct ice_aq_desc desc;
  #line 766 
  ice_fill_dflt_direct_cmd_desc(& desc,(unsigned short)2567);
  #line 768 
  return ice_aq_send_cmd(hw,& desc,(void *)buff,(unsigned short)32,cd);
}

#line 779  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_dcb.c"
static void ice_cee_to_dcb_cfg(struct ice_aqc_get_cee_dcb_cfg_resp *cee_cfg, struct ice_dcbx_cfg *dcbcfg)
{
  #line 782 
  u32 status;
  #line 783 
  u32 ice_aqc_cee_status_mask;
  #line 783 
  u32 ice_aqc_cee_status_shift;
  #line 785 
  u8 i;
  #line 785 
  u8 err;
  #line 785 
  u8 sync;
  #line 785 
  u8 oper;
  #line 785 
  u8 app_index;
  #line 785 
  u8 ice_app_sel_type;
  #line 786 
  u16 ice_aqc_cee_app_mask;
  #line 786 
  u16 ice_aqc_cee_app_shift;
  #line 787 
  u16 ice_app_prot_id_type;
  #line 782 
  u32 tlv_status = cee_cfg->tlv_status;
  #line 784 
  u16 app_prio = cee_cfg->oper_app_prio;
  #line 790 
  dcbcfg->etscfg.maxtcs = cee_cfg->oper_num_tc;
  #line 795 
  i = (unsigned char)0U;
  #line 795 
  while ((unsigned int)i <= 3U) {
    #line 796 
    dcbcfg->etscfg.prio_table[(int)i * 2] = (unsigned char)((unsigned int)cee_cfg->oper_prio_tc[(int)i] & 15U);
    #line 799 
    dcbcfg->etscfg.prio_table[(int)i * 2 + 1] = (unsigned char)((int)cee_cfg->oper_prio_tc[(int)i] >> 4);
    #line 795 
    i = (u8)((int)i + 1);
  }
  #line 804 
  i = (unsigned char)0U;
  #line 804 
  while ((unsigned int)i <= 7U) {
    #line 805 
    dcbcfg->etscfg.tcbwtable[(int)i] = cee_cfg->oper_tc_bw[(int)i];
    #line 807 
    if ((unsigned int)dcbcfg->etscfg.prio_table[(int)i] == 15U) {
      #line 809 
      dcbcfg->etscfg.prio_table[(int)i] = (unsigned char)((unsigned int)cee_cfg->oper_num_tc + 255U);
      #line 810 
      dcbcfg->etscfg.tsatable[(int)i] = (unsigned char)0U;
    }
    else 
         #line 812 
         dcbcfg->etscfg.tsatable[(int)i] = (unsigned char)2U;
    #line 804 
    i = (u8)((int)i + 1);
  }
  #line 817 
  dcbcfg->pfc.pfcena = cee_cfg->oper_pfc_en;
  #line 818 
  dcbcfg->pfc.pfccap = (unsigned char)8U;
  #line 820 
  app_index = (unsigned char)0U;
  #line 821 
  i = (unsigned char)0U;
  #line 821 
  while ((unsigned int)i <= 2U) {
    #line 822 
    if ((unsigned int)i == 0U) {
      #line 824 
      ice_aqc_cee_status_mask = 1792U;
      #line 825 
      ice_aqc_cee_status_shift = 8U;
      #line 826 
      ice_aqc_cee_app_mask = (unsigned short)7U;
      #line 827 
      ice_aqc_cee_app_shift = (unsigned short)0U;
      #line 828 
      ice_app_sel_type = (unsigned char)1U;
      #line 829 
      ice_app_prot_id_type = (unsigned short)35078U;
    }
    else 
      #line 830 
      if ((unsigned int)i == 1U) {
        #line 832 
        ice_aqc_cee_status_mask = 14336U;
        #line 833 
        ice_aqc_cee_status_shift = 11U;
        #line 834 
        ice_aqc_cee_app_mask = (unsigned short)56U;
        #line 835 
        ice_aqc_cee_app_shift = (unsigned short)3U;
        #line 836 
        ice_app_sel_type = (unsigned char)2U;
        #line 837 
        ice_app_prot_id_type = (unsigned short)3260U;
      }
      else {
        #line 840 
        ice_aqc_cee_status_mask = 458752U;
        #line 841 
        ice_aqc_cee_status_shift = 16U;
        #line 842 
        ice_aqc_cee_app_mask = (unsigned short)1792U;
        #line 843 
        ice_aqc_cee_app_shift = (unsigned short)8U;
        #line 844 
        ice_app_sel_type = (unsigned char)1U;
        #line 845 
        ice_app_prot_id_type = (unsigned short)35092U;
      }
    #line 848 
    status = (tlv_status & ice_aqc_cee_status_mask) >> ice_aqc_cee_status_shift;
    #line 850 
    err = (unsigned char)((unsigned int)((unsigned char)(status >> 2)) & 1U);
    #line 851 
    sync = (unsigned char)((unsigned int)((unsigned char)(status >> 1)) & 1U);
    #line 852 
    oper = (unsigned char)((unsigned int)((unsigned char)status) & 1U);
    #line 856 
    if (((unsigned int)err == 0U && (unsigned int)sync != 0U) && (unsigned int)oper != 0U) {
      #line 857 
      dcbcfg->app[(int)app_index].priority = (unsigned char)(((int)app_prio & (int)ice_aqc_cee_app_mask) >> (int)ice_aqc_cee_app_shift);
      #line 860 
      dcbcfg->app[(int)app_index].selector = ice_app_sel_type;
      #line 861 
      dcbcfg->app[(int)app_index].prot_id = ice_app_prot_id_type;
      #line 862 
      app_index = (u8)((int)app_index + 1);
    }
    #line 821 
    i = (u8)((int)i + 1);
  }
  #line 866 
  dcbcfg->numapps = (unsigned int)app_index;
  #line 867 
  return;
}

#line 877  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_dcb.c"
static enum ice_status ice_get_ieee_or_cee_dcb_cfg(struct ice_port_info *pi, u8 dcbx_mode)
{
  #line 880 
  enum ice_status ret;
  #line 879 
  struct ice_dcbx_cfg *dcbx_cfg = (struct ice_dcbx_cfg *)0;
  #line 882 
  if (pi == (struct ice_port_info *)0) 
                                       #line 883 
                                       return ICE_ERR_PARAM;
  #line 885 
  if ((unsigned int)dcbx_mode == 2U) 
                                     #line 886 
                                     dcbx_cfg = & pi->local_dcbx_cfg;
  else 
    #line 887 
    if ((unsigned int)dcbx_mode == 1U) 
                                       #line 888 
                                       dcbx_cfg = & pi->desired_dcbx_cfg;
  #line 893 
  ret = ice_aq_get_dcb_cfg(pi->hw,(unsigned char)0,(unsigned char)0,dcbx_cfg);
  #line 895 
  if (ret != ICE_SUCCESS) 
                          #line 896 
                          goto out;
  #line 899 
  dcbx_cfg = & pi->remote_dcbx_cfg;
  #line 900 
  ret = ice_aq_get_dcb_cfg(pi->hw,(unsigned char)1,(unsigned char)0,dcbx_cfg);
  #line 903 
  if ((pi->hw)->adminq.sq_last_status == (unsigned int)ICE_AQ_RC_ENOENT) 
    #line 904 
    ret = ICE_SUCCESS;
  #line 906 
  out: 
       #line 906 
  ;
  #line 907 
  return ret;
}

#line 916  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_dcb.c"
enum ice_status ice_get_dcb_cfg(struct ice_port_info *pi)
{
  #line 918 
  struct ice_aqc_get_cee_dcb_cfg_resp cee_cfg;
  #line 919 
  struct ice_dcbx_cfg *dcbx_cfg;
  #line 920 
  enum ice_status ret;
  #line 922 
  if (pi == (struct ice_port_info *)0) 
                                       #line 923 
                                       return ICE_ERR_PARAM;
  #line 925 
  ret = ice_aq_get_cee_dcb_cfg(pi->hw,& cee_cfg,(struct ice_sq_cd *)0);
  #line 926 
  if (ret == ICE_SUCCESS) {
    #line 928 
    dcbx_cfg = & pi->local_dcbx_cfg;
    #line 929 
    dcbx_cfg->dcbx_mode = (unsigned char)1U;
    #line 930 
    dcbx_cfg->tlv_status = cee_cfg.tlv_status;
    #line 931 
    ice_cee_to_dcb_cfg(& cee_cfg,dcbx_cfg);
    #line 932 
    ret = ice_get_ieee_or_cee_dcb_cfg(pi,(unsigned char)1);
  }
  else 
    #line 933 
    if ((pi->hw)->adminq.sq_last_status == (unsigned int)ICE_AQ_RC_ENOENT) {
      #line 935 
      dcbx_cfg = & pi->local_dcbx_cfg;
      #line 936 
      dcbx_cfg->dcbx_mode = (unsigned char)2U;
      #line 937 
      ret = ice_get_ieee_or_cee_dcb_cfg(pi,(unsigned char)2);
    }
  #line 940 
  return ret;
}

#line 950  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_dcb.c"
enum ice_status ice_init_dcb(struct ice_hw *hw, bool enable_mib_change)
{
  #line 952 
  struct ice_port_info *pi = hw->port_info;
  #line 953 
  enum ice_status ret = 0;
  #line 955 
  if ((unsigned int)hw->func_caps.common_cap.dcb == 0U) 
                                                        #line 956 
                                                        return ICE_ERR_NOT_SUPPORTED;
  #line 958 
  pi->is_sw_lldp = (unsigned char)1U;
  #line 961 
  pi->dcbx_status = (unsigned char)ice_get_dcbx_status(hw);
  #line 963 
  if ((unsigned int)pi->dcbx_status <= 2U) {
    #line 967 
    ret = ice_get_dcb_cfg(pi);
    #line 968 
    if (ret != ICE_SUCCESS) 
                            #line 969 
                            return ret;
    #line 970 
    pi->is_sw_lldp = (unsigned char)0U;
  }
  else 
    #line 971 
    if ((unsigned int)pi->dcbx_status == 7U) 
                                             #line 972 
                                             return ICE_ERR_NOT_READY;
  #line 976 
  if ((int)enable_mib_change != 0) {
    #line 977 
    ret = ice_aq_cfg_lldp_mib_change(hw,(_Bool)1,(struct ice_sq_cd *)0);
    #line 978 
    if (ret != ICE_SUCCESS) 
                            #line 979 
                            pi->is_sw_lldp = (unsigned char)1U;
  }
  #line 982 
  return ret;
}

#line 992  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_dcb.c"
enum ice_status ice_cfg_lldp_mib_change(struct ice_hw *hw, bool ena_mib)
{
  #line 995 
  enum ice_status ret;
  #line 994 
  struct ice_port_info *pi = hw->port_info;
  #line 997 
  if ((unsigned int)hw->func_caps.common_cap.dcb == 0U) 
                                                        #line 998 
                                                        return ICE_ERR_NOT_SUPPORTED;
  #line 1001 
  pi->dcbx_status = (unsigned char)ice_get_dcbx_status(hw);
  #line 1003 
  if ((unsigned int)pi->dcbx_status == 7U) 
                                           #line 1004 
                                           return ICE_ERR_NOT_READY;
  #line 1006 
  ret = ice_aq_cfg_lldp_mib_change(hw,(_Bool)((bool)((int)ena_mib) != 0),(struct ice_sq_cd *)0);
  #line 1007 
  if (ret == ICE_SUCCESS) 
                          #line 1008 
                          pi->is_sw_lldp = (unsigned char)(! ena_mib);
  #line 1010 
  return ret;
}

#line 1021  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_dcb.c"
static void ice_add_ieee_ets_common_tlv(u8 *buf, struct ice_dcb_ets_cfg *ets_cfg)
{
  #line 1023 
  u8 priority0;
  #line 1023 
  u8 priority1;
  #line 1025 
  int i;
  #line 1024 
  u8 offset = (unsigned char)0U;
  #line 1035 
  i = 0;
  #line 1035 
  while (i <= 3) {
    #line 1036 
    priority0 = (unsigned char)((unsigned int)ets_cfg->prio_table[i * 2] & 15U);
    #line 1037 
    priority1 = (unsigned char)((unsigned int)ets_cfg->prio_table[i * 2 + 1] & 15U);
    #line 1038 
    *(buf + (unsigned long)offset) = (unsigned char)(((int)priority0 << 4) | (int)priority1);
    #line 1039 
    offset = (u8)((int)offset + 1);
    #line 1035 
    i ++;
  }
  #line 1054 
  i = 0;
  #line 1054 
  while (i <= 7) {
    #line 1055 
    *(buf + (unsigned long)offset) = ets_cfg->tcbwtable[i];
    #line 1056 
    *(buf + (unsigned long)((int)offset + 8)) = ets_cfg->tsatable[i];
    #line 1057 
    offset = (u8)((int)offset + 1);
    #line 1054 
    i ++;
  }
  #line 1059 
  return;
}

#line 1069  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_dcb.c"
static void ice_add_ieee_ets_tlv(struct ice_lldp_org_tlv *tlv, struct ice_dcbx_cfg *dcbcfg)
{
  #line 1071 
  struct ice_dcb_ets_cfg *etscfg;
  #line 1074 
  u32 ouisubtype;
  #line 1075 
  u16 typelen;
  #line 1072 
  u8 *buf = (u8 *)(& tlv->tlvinfo);
  #line 1073 
  u8 maxtcwilling = (unsigned char)0U;
  #line 1077 
  typelen = (unsigned short)65049U;
  #line 1079 
  tlv->typelen = __builtin_bswap16((unsigned short)((int)typelen));
  #line 1081 
  ouisubtype = 8438281U;
  #line 1083 
  tlv->ouisubtype = __builtin_bswap32(ouisubtype);
  #line 1092 
  etscfg = & dcbcfg->etscfg;
  #line 1093 
  if ((unsigned int)etscfg->willing != 0U) 
                                           #line 1094 
                                           maxtcwilling = (unsigned char)128U;
  #line 1095 
  maxtcwilling = (unsigned char)(((int)etscfg->maxtcs & 7) | (int)maxtcwilling);
  #line 1096 
  *buf = maxtcwilling;
  #line 1099 
  ice_add_ieee_ets_common_tlv(buf + 1U,etscfg);
  #line 1100 
  return;
}

#line 1110  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_dcb.c"
static void ice_add_ieee_etsrec_tlv(struct ice_lldp_org_tlv *tlv, struct ice_dcbx_cfg *dcbcfg)
{
  #line 1113 
  struct ice_dcb_ets_cfg *etsrec;
  #line 1115 
  u32 ouisubtype;
  #line 1116 
  u16 typelen;
  #line 1114 
  u8 *buf = (u8 *)(& tlv->tlvinfo);
  #line 1118 
  typelen = (unsigned short)65049U;
  #line 1120 
  tlv->typelen = __builtin_bswap16((unsigned short)((int)typelen));
  #line 1122 
  ouisubtype = 8438282U;
  #line 1124 
  tlv->ouisubtype = __builtin_bswap32(ouisubtype);
  #line 1126 
  etsrec = & dcbcfg->etsrec;
  #line 1130 
  ice_add_ieee_ets_common_tlv(buf + 1U,etsrec);
  #line 1131 
  return;
}

#line 1141  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_dcb.c"
static void ice_add_ieee_pfc_tlv(struct ice_lldp_org_tlv *tlv, struct ice_dcbx_cfg *dcbcfg)
{
  #line 1144 
  u32 ouisubtype;
  #line 1145 
  u16 typelen;
  #line 1143 
  u8 *buf = (u8 *)(& tlv->tlvinfo);
  #line 1147 
  typelen = (unsigned short)65030U;
  #line 1149 
  tlv->typelen = __builtin_bswap16((unsigned short)((int)typelen));
  #line 1151 
  ouisubtype = 8438283U;
  #line 1153 
  tlv->ouisubtype = __builtin_bswap32(ouisubtype);
  #line 1161 
  if ((unsigned int)dcbcfg->pfc.willing != 0U) 
                                               #line 1162 
                                               *buf = (unsigned char)128U;
  #line 1164 
  if ((unsigned int)dcbcfg->pfc.mbc != 0U) 
                                           #line 1165 
                                           *buf = (unsigned char)((unsigned int)*buf | 64U);
  #line 1167 
  *buf = (unsigned char)((int)*buf | ((int)dcbcfg->pfc.pfccap & 15));
  #line 1168 
  *(buf + 1U) = dcbcfg->pfc.pfcena;
  #line 1169 
  return;
}

#line 1179  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_dcb.c"
static void ice_add_ieee_app_pri_tlv(struct ice_lldp_org_tlv *tlv, struct ice_dcbx_cfg *dcbcfg)
{
  #line 1182 
  u16 typelen;
  #line 1182 
  u16 len;
  #line 1183 
  u8 priority;
  #line 1183 
  u8 selector;
  #line 1185 
  u32 ouisubtype;
  #line 1182 
  u16 offset = (unsigned short)0U;
  #line 1183 
  u8 i = (unsigned char)0U;
  #line 1184 
  u8 *buf = (u8 *)(& tlv->tlvinfo);
  #line 1188 
  if (dcbcfg->numapps == 0U) 
                             #line 1189 
                             return;
  #line 1190 
  ouisubtype = 8438284U;
  #line 1192 
  tlv->ouisubtype = __builtin_bswap32(ouisubtype);
  #line 1195 
  offset = (u16)((int)offset + 1);
  #line 1204 
  while ((unsigned int)i < dcbcfg->numapps) {
    #line 1205 
    priority = (unsigned char)((unsigned int)dcbcfg->app[(int)i].priority & 7U);
    #line 1206 
    selector = (unsigned char)((unsigned int)dcbcfg->app[(int)i].selector & 7U);
    #line 1207 
    *(buf + (unsigned long)offset) = (unsigned char)(((int)priority << 5) | (int)selector);
    #line 1208 
    *(buf + ((unsigned long)offset + (unsigned long)1U)) = (unsigned char)((int)dcbcfg->app[(int)i].prot_id >> 8);
    #line 1209 
    *(buf + ((unsigned long)offset + (unsigned long)2U)) = (unsigned char)dcbcfg->app[(int)i].prot_id;
    #line 1211 
    offset = (unsigned short)((unsigned int)offset + 3U);
    #line 1212 
    i = (u8)((int)i + 1);
    #line 1213 
    if ((unsigned int)i > 31U) 
                               #line 1214 
                               break;
  }
  #line 1217 
  len = (unsigned short)((unsigned int)((unsigned short)i) * 3U + 5U);
  #line 1218 
  typelen = (unsigned short)((unsigned int)len | 65024U);
  #line 1219 
  tlv->typelen = __builtin_bswap16((unsigned short)((int)typelen));
  #line 1220 
  return;
}

#line 1231  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_dcb.c"
static void ice_add_dcb_tlv(struct ice_lldp_org_tlv *tlv, struct ice_dcbx_cfg *dcbcfg, u16 tlvid)
{
  #line 1234 
  switch ((int)tlvid) {
    #line 1235 
    case 3: 
            #line 1235 
    ;
    #line 1236 
    ice_add_ieee_ets_tlv(tlv,dcbcfg);
    #line 1237 
    break;
    #line 1238 
    case 4: 
            #line 1238 
    ;
    #line 1239 
    ice_add_ieee_etsrec_tlv(tlv,dcbcfg);
    #line 1240 
    break;
    #line 1241 
    case 5: 
            #line 1241 
    ;
    #line 1242 
    ice_add_ieee_pfc_tlv(tlv,dcbcfg);
    #line 1243 
    break;
    #line 1244 
    case 6: 
            #line 1244 
    ;
    #line 1245 
    ice_add_ieee_app_pri_tlv(tlv,dcbcfg);
    #line 1246 
    break;
    #line 1247 
    default: 
             #line 1247 
    ;
    #line 1248 
    break;
  }
  #line 1250 
  return;
}

#line 1261  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_dcb.c"
static void ice_dcb_cfg_to_lldp(u8 *lldpmib, u16 *miblen, struct ice_dcbx_cfg *dcbcfg)
{
  #line 1263 
  u16 len;
  #line 1264 
  struct ice_lldp_org_tlv *tlv;
  #line 1265 
  u16 typelen;
  #line 1263 
  u16 offset = (unsigned short)0U;
  #line 1263 
  u16 tlvid = (unsigned short)3U;
  #line 1267 
  tlv = (struct ice_lldp_org_tlv *)lldpmib;
  #line 1268 
  while (1) {
    {
      #line 1269 
      u16 tmp;
      #line 1269 
      tmp = tlvid;
      #line 1269 
      tlvid = (u16)((int)tlvid + 1);
      #line 1269 
      ;
      #line 1269 
      ;
      #line 1269 
      ;
      #line 1269 
      ice_add_dcb_tlv(tlv,dcbcfg,(unsigned short)((int)tmp));
      #line 1270 
      typelen = __builtin_bswap16((unsigned short)((int)tlv->typelen));
      #line 1271 
      len = (unsigned short)((unsigned int)typelen & 511U);
      #line 1272 
      if ((unsigned int)len != 0U) 
                                   #line 1273 
                                   offset = (unsigned short)((unsigned int)((int)len + (int)offset) + 2U);
      #line 1275 
      if ((unsigned int)tlvid > 6U || (unsigned int)offset > 1500U) 
                                                                    #line 1277 
                                                                    break;
      #line 1279 
      if ((unsigned int)len != 0U) 
                                   #line 1280 
                                   tlv = (struct ice_lldp_org_tlv *)((char *)tlv + ((unsigned long)len + 2UL));
    }
  }
  #line 1283 
  *miblen = offset;
  #line 1284 
  return;
}

#line 1292  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_dcb.c"
enum ice_status ice_set_dcb_cfg(struct ice_port_info *pi)
{
  #line 1320 
  void *__mptr_0;
  #line 1308 
  void *__mptr;
  #line 1294 
  u8 mib_type;
  #line 1295 
  struct ice_dcbx_cfg *dcbcfg;
  #line 1296 
  enum ice_status ret;
  #line 1297 
  struct ice_hw *hw;
  #line 1298 
  u16 miblen;
  #line 1294 
  u8 *lldpmib = (u8 *)0U;
  #line 1300 
  if (pi == (struct ice_port_info *)0) 
                                       #line 1301 
                                       return ICE_ERR_PARAM;
  #line 1303 
  hw = pi->hw;
  #line 1306 
  dcbcfg = & pi->local_dcbx_cfg;
  #line 1308 
  __mptr = (void *)hw;
  #line 1308 
  lldpmib = (u8 *)cif_devm_kzalloc_6(& (((struct ice_pf *)(__mptr + 18446744073709549512U))->pdev)->dev,
                           1500UL,3264U);
  #line 1309 
  if (lldpmib == (u8 *)0U) 
                           #line 1310 
                           return ICE_ERR_NO_MEMORY;
  #line 1312 
  mib_type = (unsigned char)0U;
  #line 1313 
  if ((unsigned int)dcbcfg->app_mode == 1U) 
                                            #line 1314 
                                            mib_type = (unsigned char)((unsigned int)mib_type | 2U);
  #line 1316 
  ice_dcb_cfg_to_lldp(lldpmib,& miblen,dcbcfg);
  #line 1317 
  ret = ice_aq_set_lldp_mib(hw,(unsigned char)((int)mib_type),(void *)lldpmib,(unsigned short)((int)miblen),(struct ice_sq_cd *)0);
  #line 1320 
  ;
  #line 1320 
  __mptr_0 = (void *)hw;
  #line 1320 
  devm_kfree(& (((struct ice_pf *)(__mptr_0 + 18446744073709549512U))->pdev)->dev,(void *)lldpmib);
  #line 1322 
  return ret;
}

#line 1335  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_dcb.c"
static enum ice_status ice_aq_query_port_ets(struct ice_port_info *pi, struct ice_aqc_port_ets_elem *buf, u16 buf_size, struct ice_sq_cd *cd)
{
  #line 1339 
  struct ice_aqc_query_port_ets *cmd;
  #line 1340 
  struct ice_aq_desc desc;
  #line 1341 
  enum ice_status status;
  #line 1343 
  if (pi == (struct ice_port_info *)0) 
                                       #line 1344 
                                       return ICE_ERR_PARAM;
  #line 1345 
  cmd = & desc.params.port_ets;
  #line 1346 
  ice_fill_dflt_direct_cmd_desc(& desc,(unsigned short)1038);
  #line 1347 
  cmd->port_teid = (pi->root)->info.node_teid;
  #line 1349 
  status = ice_aq_send_cmd(pi->hw,& desc,(void *)buf,(unsigned short)((int)buf_size),cd);
  #line 1350 
  return status;
}

#line 1361  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_dcb.c"
static enum ice_status ice_update_port_tc_tree_cfg(struct ice_port_info *pi, struct ice_aqc_port_ets_elem *buf)
{
  #line 1364 
  struct ice_sched_node *node;
  #line 1364 
  struct ice_sched_node *tc_node;
  #line 1365 
  struct ice_aqc_get_elem elem;
  #line 1367 
  u32 teid1;
  #line 1367 
  u32 teid2;
  #line 1368 
  u8 i;
  #line 1368 
  u8 j;
  #line 1366 
  enum ice_status status = 0;
  #line 1370 
  if (pi == (struct ice_port_info *)0) 
                                       #line 1371 
                                       return ICE_ERR_PARAM;
  #line 1373 
  i = (unsigned char)0U;
  #line 1373 
  while ((int)(pi->root)->num_children > (int)i) {
    #line 1374 
    teid1 = (*((pi->root)->children + (unsigned long)i))->info.node_teid;
    #line 1375 
    j = (unsigned char)0U;
    #line 1375 
    while ((unsigned int)j <= 7U) {
      #line 1376 
      teid2 = buf->tc_node_teid[(int)j];
      #line 1377 
      if (teid1 == teid2) 
                          #line 1378 
                          break;
      #line 1375 
      j = (u8)((int)j + 1);
    }
    #line 1380 
    if ((unsigned int)j <= 7U) 
                               #line 1381 
                               goto __Cont;
    #line 1383 
    (*((pi->root)->children + (unsigned long)i))->in_use = (unsigned char)0U;
    #line 1373 
    __Cont: 
            #line 1373 
    i = (u8)((int)i + 1);
  }
  #line 1386 
  j = (unsigned char)0U;
  #line 1386 
  while ((unsigned int)j <= 7U) {
    #line 1387 
    teid2 = buf->tc_node_teid[(int)j];
    #line 1388 
    if (teid2 == 4294967295U) 
                              #line 1389 
                              goto __Cont_0;
    #line 1391 
    i = (unsigned char)0U;
    #line 1391 
    while ((int)(pi->root)->num_children > (int)i) {
      #line 1392 
      tc_node = *((pi->root)->children + (unsigned long)i);
      #line 1393 
      if (tc_node == (struct ice_sched_node *)0) 
                                                 #line 1394 
                                                 goto __Cont_1;
      #line 1395 
      teid1 = tc_node->info.node_teid;
      #line 1396 
      if (teid1 == teid2) {
        #line 1397 
        tc_node->tc_num = j;
        #line 1398 
        tc_node->in_use = (unsigned char)1U;
        #line 1399 
        break;
      }
      #line 1391 
      __Cont_1: 
                #line 1391 
      i = (u8)((int)i + 1);
    }
    #line 1402 
    if ((int)(pi->root)->num_children > (int)i) 
                                                #line 1403 
                                                goto __Cont_0;
    #line 1405 
    status = ice_sched_query_elem(pi->hw,teid2,& elem);
    #line 1406 
    if (status == ICE_SUCCESS) 
                               #line 1407 
                               status = ice_sched_add_node(pi,(unsigned char)1,& elem.generic[0]);
    #line 1408 
    if (status != ICE_SUCCESS) 
                               #line 1409 
                               break;
    #line 1411 
    node = ice_sched_find_node_by_teid(pi->root,teid2);
    #line 1412 
    if (node != (struct ice_sched_node *)0) 
                                            #line 1413 
                                            node->tc_num = j;
    #line 1386 
    __Cont_0: 
              #line 1386 
    j = (u8)((int)j + 1);
  }
  #line 1415 
  return status;
}

#line 1429  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_dcb.c"
enum ice_status ice_query_port_ets(struct ice_port_info *pi, struct ice_aqc_port_ets_elem *buf, u16 buf_size, struct ice_sq_cd *cd)
{
  #line 1433 
  enum ice_status status;
  #line 1435 
  cif_mutex_lock_sched_lock_of_ice_port_info_0(& pi->sched_lock);
  #line 1436 
  status = ice_aq_query_port_ets(pi,buf,(unsigned short)((int)buf_size),cd);
  #line 1437 
  if (status == ICE_SUCCESS) 
                             #line 1438 
                             status = ice_update_port_tc_tree_cfg(pi,buf);
  #line 1439 
  cif_mutex_unlock_sched_lock_of_ice_port_info_0(& pi->sched_lock);
  #line 1440 
  return status;
}

#line 798  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ice/ice.ko/concurrency safety/0/concurrency safety/weaver/ice_dcb.i.aux"
static void *cif_devm_kzalloc_6(struct device *dev, size_t size, gfp_t flags)
{
  #line 801 
  return ldv_devm_kzalloc(size,flags);
}

#line 805  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ice/ice.ko/concurrency safety/0/concurrency safety/weaver/ice_dcb.i.aux"
static void cif_mutex_lock_sched_lock_of_ice_port_info_0(struct mutex *lock)
{
  #line 808 
  ldv_mutex_model_lock(lock,(char *)"sched_lock_of_ice_port_info");
  #line 809 
  return;
}

#line 812  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ice/ice.ko/concurrency safety/0/concurrency safety/weaver/ice_dcb.i.aux"
static void cif_mutex_unlock_sched_lock_of_ice_port_info_0(struct mutex *lock)
{
  #line 815 
  ldv_mutex_model_unlock(lock,(char *)"sched_lock_of_ice_port_info");
  #line 816 
  return;
}

#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bitops/find.h"
#line 154  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ice/ice.ko/concurrency safety/0/concurrency safety/weaver/ice_sched.i.aux"
static unsigned long cif_find_first_bit_1(unsigned long *addr, unsigned long size);
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bitops/instrumented-atomic.h"
#line 119  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ice/ice.ko/concurrency safety/0/concurrency safety/weaver/ice_sched.i.aux"
static void cif_set_bit_9(long nr, unsigned long *addr);
#line 44  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bitops/instrumented-atomic.h"
#line 126  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ice/ice.ko/concurrency safety/0/concurrency safety/weaver/ice_sched.i.aux"
static void cif_clear_bit_9(long nr, unsigned long *addr);
#line 26  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
#line 133  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ice/ice.ko/concurrency safety/0/concurrency safety/weaver/ice_sched.i.aux"
static void INIT_LIST_HEAD_4(struct list_head *list);
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static void __list_add_1(struct list_head *new, struct list_head *prev, struct list_head *next)
{
  #line 60 
  if (! __list_add_valid(new,prev,next)) 
                                         #line 61 
                                         return;
  #line 63 
  next->prev = new;
  #line 64 
  new->next = next;
  #line 65 
  new->prev = prev;
  {
    #line 67 
    union __anonunion___u_17422 __u = {.__val = new};
    #line 66 
    __write_once_size((void *)(& prev->next),(void *)(& __u.__c),8);
    #line 66 
    struct list_head *tmp_2 = __u.__val;
  }
  #line 68 
  return;
}

#line 77  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static void list_add_1(struct list_head *new, struct list_head *head)
{
  #line 79 
  __list_add_1(new,head,head->next);
  #line 80 
  return;
}

#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static void __list_del_2(struct list_head *prev, struct list_head *next)
{
  #line 97 
  next->prev = prev;
  {
    #line 107 
    union __anonunion___u_17424 __u = {.__val = next};
    #line 106 
    __write_once_size((void *)(& prev->next),(void *)(& __u.__c),8);
    #line 106 
    struct list_head *tmp = __u.__val;
  }
  #line 108 
  return;
}

#line 129  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static void __list_del_entry_2(struct list_head *entry)
{
  #line 131 
  if (! __list_del_entry_valid(entry)) 
                                       #line 132 
                                       return;
  #line 134 
  __list_del_2(entry->prev,entry->next);
  #line 135 
  return;
}

#line 137  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static void list_del_2(struct list_head *entry)
{
  #line 139 
  __list_del_entry_2(entry);
  #line 140 
  entry->next = (struct list_head *)(-2401263026318606080);
  #line 141 
  entry->prev = (struct list_head *)(-2401263026318606046);
  #line 142 
  return;
}

#line 77  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/math64.h"
__inline static s64 div64_s64(s64 dividend, s64 divisor)
{
  #line 79 
  return dividend / divisor;
}

#line 372  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bitmap.h"
__inline static int bitmap_empty(unsigned long *src, unsigned int nbits)
{
  #line 374 
  if (0 != 0 && nbits + 4294967295U <= 63U) 
                                            #line 375 
                                            return (*src & (18446744073709551615UL >> (- nbits & 63U))) == 0UL;
  #line 377 
  ;
  #line 377 
  return cif_find_first_bit_1(src,(unsigned long)nbits) == (unsigned long)nbits;
}

#line 26  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ice/ice.ko/concurrency safety/0/concurrency safety/weaver/ice_sched.i.aux"
#line 812 
static void cif_mutex_lock_sched_lock_of_ice_port_info_1(struct mutex *lock);
#line 185  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mutex.h"
#line 819  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ice/ice.ko/concurrency safety/0/concurrency safety/weaver/ice_sched.i.aux"
static void cif_mutex_unlock_sched_lock_of_ice_port_info_1(struct mutex *lock);
#line 257  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/overflow.h"
#line 257 
extern int ( /* missing proto */ __builtin_mul_overflow)(unsigned long x_0, unsigned long x_1, size_t *x_2);
#line 297 
#line 297 
extern int ( /* missing proto */ __builtin_add_overflow)(unsigned long x_0, unsigned long x_1, size_t *x_2);
#line 291  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/overflow.h"
__inline static size_t __ab_c_size(size_t a, size_t b, size_t c)
{
  #line 295 
  size_t __a;
  #line 295 
  size_t __b;
  #line 295 
  size_t *__d;
  #line 297 
  size_t __a_0;
  #line 297 
  size_t __b_0;
  #line 297 
  size_t *__d_0;
  #line 293 
  size_t bytes;
  {
    #line 295 
    __a = a;
    #line 295 
    __b = b;
    #line 295 
    __d = & bytes;
    #line 295 
    int tmp = & __a == __d;
    }
  #line 295 
  if (__builtin_mul_overflow(__a,__b,__d) != 0) 
                                                #line 296 
                                                return 18446744073709551615UL;
  {
    #line 297 
    __a_0 = bytes;
    #line 297 
    __b_0 = c;
    #line 297 
    __d_0 = & bytes;
    #line 297 
    int tmp_3 = & __a_0 == __d_0;
    }
  #line 297 
  if (__builtin_add_overflow(__a_0,__b_0,__d_0) != 0) 
                                                      #line 298 
                                                      return 18446744073709551615UL;
  #line 300 
  return bytes;
}

#line 937  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
#line 798  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ice/ice.ko/concurrency safety/0/concurrency safety/weaver/ice_sched.i.aux"
static void *cif_devm_kzalloc_7(struct device *dev, size_t size, gfp_t flags);
#line 952  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
#line 805  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ice/ice.ko/concurrency safety/0/concurrency safety/weaver/ice_sched.i.aux"
static void *cif_devm_kcalloc_7(struct device *dev, size_t n, size_t size, gfp_t flags);
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_type.h"
__inline static u64 round_up_64bit(u64 a, u32 b)
{
  #line 24 
  return (unsigned long long)div64_s64((long long)((unsigned long long)(b / 2U) + a),(long long)b);
}

#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_type.h"
__inline static u32 ice_round_to_num(u32 N, u32 R)
{
  #line 29 
  u32 tmp;
  #line 29 
  if (N % R < R / 2U) 
                      #line 29 
                      tmp = (N / R) * R; else 
                                              #line 29 
                                              tmp = (((N + R) + 4294967295U) / R) * R;
  #line 29 
  return tmp;
}

#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_sched.c"
static enum ice_status ice_sched_add_root_node(struct ice_port_info *pi, struct ice_aqc_txsched_elem_data *info)
{
  #line 31 
  void *__mptr_0;
  #line 26 
  void *__mptr;
  #line 18 
  struct ice_sched_node *root;
  #line 19 
  struct ice_hw *hw;
  #line 21 
  if (pi == (struct ice_port_info *)0) 
                                       #line 22 
                                       return ICE_ERR_PARAM;
  #line 24 
  hw = pi->hw;
  #line 26 
  __mptr = (void *)hw;
  #line 26 
  root = (struct ice_sched_node *)cif_devm_kzalloc_7(& (((struct ice_pf *)(__mptr + 18446744073709549512U))->pdev)->dev,
                           64UL,3264U);
  #line 27 
  if (root == (struct ice_sched_node *)0) 
                                          #line 28 
                                          return ICE_ERR_NO_MEMORY;
  #line 31 
  ;
  #line 31 
  __mptr_0 = (void *)hw;
  #line 31 
  root->children = (struct ice_sched_node **)cif_devm_kcalloc_7(& (((struct ice_pf *)(__mptr_0 + 18446744073709549512U))->pdev)->dev,
                           (unsigned long)hw->max_children[0],64UL,3264U);
  #line 33 
  if (root->children == (struct ice_sched_node **)0) {
    #line 34 
    void *__mptr_1;
    #line 34 
    ;
    #line 34 
    __mptr_1 = (void *)hw;
    #line 34 
    devm_kfree(& (((struct ice_pf *)(__mptr_1 + 18446744073709549512U))->pdev)->dev,(void *)root);
    #line 35 
    return ICE_ERR_NO_MEMORY;
  }
  #line 38 
  memcpy((void *)(& root->info),(void *)info,24UL);
  #line 39 
  pi->root = root;
  #line 40 
  return ICE_SUCCESS;
}

#line 55  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_sched.c"
struct ice_sched_node *ice_sched_find_node_by_teid(struct ice_sched_node *start_node, u32 teid)
{
  #line 57 
  u16 i;
  #line 60 
  if (start_node->info.node_teid == teid) 
                                          #line 61 
                                          return start_node;
  #line 64 
  if (((unsigned int)start_node->num_children == 0U || (unsigned int)start_node->tx_sched_layer > 8U) || (unsigned int)start_node->info.data.elem_type == 5U) 
    #line 67 
    return (struct ice_sched_node *)0;
  #line 70 
  i = (unsigned short)0U;
  #line 70 
  while ((int)((unsigned short)start_node->num_children) > (int)i) {
    #line 71 
    if ((*(start_node->children + (unsigned long)i))->info.node_teid == teid) 
      #line 72 
      return *(start_node->children + (unsigned long)i);
    #line 70 
    i = (u16)((int)i + 1);
  }
  #line 75 
  i = (unsigned short)0U;
  #line 75 
  while ((int)((unsigned short)start_node->num_children) > (int)i) {
    {
      #line 76 
      struct ice_sched_node *tmp;
      #line 78 
      tmp = ice_sched_find_node_by_teid(*(start_node->children + (unsigned long)i),teid);
      #line 80 
      if (tmp != (struct ice_sched_node *)0) 
                                             #line 81 
                                             return tmp;
    }
    #line 75 
    i = (u16)((int)i + 1);
  }
  #line 84 
  return (struct ice_sched_node *)0;
}

#line 100  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_sched.c"
static enum ice_status ice_aqc_send_sched_elem_cmd(struct ice_hw *hw, enum ice_adminq_opc cmd_opc, u16 elems_req, void *buf, u16 buf_size, u16 *elems_resp, struct ice_sq_cd *cd)
{
  #line 104 
  struct ice_aqc_sched_elem_cmd *cmd;
  #line 105 
  struct ice_aq_desc desc;
  #line 106 
  enum ice_status status;
  #line 108 
  cmd = & desc.params.sched_elem_cmd;
  #line 109 
  ice_fill_dflt_direct_cmd_desc(& desc,(unsigned short)((int)((unsigned short)cmd_opc)));
  #line 110 
  cmd->num_elem_req = elems_req;
  #line 111 
  desc.flags = (unsigned short)((unsigned int)desc.flags | 1024U);
  #line 112 
  status = ice_aq_send_cmd(hw,& desc,buf,(unsigned short)((int)buf_size),cd);
  #line 113 
  if (status == ICE_SUCCESS && elems_resp != (u16 *)0U) 
                                                        #line 114 
                                                        *elems_resp = cmd->num_elem_resp;
  #line 116 
  return status;
}

#line 131  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_sched.c"
enum ice_status ice_aq_query_sched_elems(struct ice_hw *hw, u16 elems_req, struct ice_aqc_get_elem *buf, u16 buf_size, u16 *elems_ret, struct ice_sq_cd *cd)
{
  #line 135 
  return ice_aqc_send_sched_elem_cmd(hw,
                                  (enum ice_adminq_opc)ice_aqc_opc_get_sched_elems,
                                  (unsigned short)((int)elems_req),
                                  (void *)buf,
                                  (unsigned short)((int)buf_size),elems_ret,
                                  cd);
}

#line 149  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_sched.c"
enum ice_status ice_sched_add_node(struct ice_port_info *pi, u8 layer, struct ice_aqc_txsched_elem_data *info)
{
  #line 180 
  void *__mptr_0;
  #line 152 
  struct ice_sched_node *parent;
  #line 153 
  struct ice_aqc_get_elem elem;
  #line 154 
  struct ice_sched_node *node;
  #line 155 
  enum ice_status status;
  #line 156 
  struct ice_hw *hw;
  #line 197 
  u8 tmp_6;
  #line 158 
  if (pi == (struct ice_port_info *)0) 
                                       #line 159 
                                       return ICE_ERR_PARAM;
  #line 161 
  hw = pi->hw;
  #line 164 
  parent = ice_sched_find_node_by_teid(pi->root,info->parent_teid);
  #line 166 
  if (parent == (struct ice_sched_node *)0) {
    {
      #line 167 
      bool branch;
      #line 167 
      struct _ddebug __UNIQUE_ID_ddebug536 = {.modname = (char *)"ice", .function = (char *)"ice_sched_add_node", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_sched.c", .format = (char *)"Parent Node not found for parent_teid=0x%x\n", .lineno = (unsigned int)167U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 167 
      branch = arch_static_branch(& __UNIQUE_ID_ddebug536.key.dd_key_false.key,(_Bool)0);
      #line 167 
      if ((long)((long)((int)branch != 0)) != 0L) {
        #line 167 
        void *__mptr;
        #line 167 
        ;
        #line 167 
        __mptr = (void *)hw;
        #line 167 
        __dynamic_dev_dbg(& __UNIQUE_ID_ddebug536,& (((struct ice_pf *)(__mptr + 18446744073709549512U))->pdev)->dev,(char *)"Parent Node not found for parent_teid=0x%x\n",info->parent_teid);
      }
    }
    #line 170 
    return ICE_ERR_PARAM;
  }
  #line 176 
  status = ice_sched_query_elem(hw,info->node_teid,& elem);
  #line 177 
  if (status != ICE_SUCCESS) 
                             #line 178 
                             return status;
  #line 180 
  __mptr_0 = (void *)hw;
  #line 180 
  node = (struct ice_sched_node *)cif_devm_kzalloc_7(& (((struct ice_pf *)(__mptr_0 + 18446744073709549512U))->pdev)->dev,
                           64UL,3264U);
  #line 181 
  if (node == (struct ice_sched_node *)0) 
                                          #line 182 
                                          return ICE_ERR_NO_MEMORY;
  #line 183 
  if ((unsigned int)hw->max_children[(int)layer] != 0U) {
    #line 185 
    void *__mptr_1;
    #line 185 
    ;
    #line 185 
    __mptr_1 = (void *)hw;
    #line 185 
    node->children = (struct ice_sched_node **)cif_devm_kcalloc_7(& (((struct ice_pf *)(__mptr_1 + 18446744073709549512U))->pdev)->dev,
                           (unsigned long)hw->max_children[(int)layer],64UL,
                           3264U);
    #line 188 
    if (node->children == (struct ice_sched_node **)0) {
      #line 189 
      void *__mptr_2;
      #line 189 
      ;
      #line 189 
      __mptr_2 = (void *)hw;
      #line 189 
      devm_kfree(& (((struct ice_pf *)(__mptr_2 + 18446744073709549512U))->pdev)->dev,(void *)node);
      #line 190 
      return ICE_ERR_NO_MEMORY;
    }
  }
  #line 194 
  node->in_use = (unsigned char)1U;
  #line 195 
  node->parent = parent;
  #line 196 
  node->tx_sched_layer = layer;
  #line 197 
  tmp_6 = parent->num_children;
  #line 197 
  parent->num_children = (u8)((int)parent->num_children + 1);
  #line 197 
  *(parent->children + (unsigned long)tmp_6) = node;
  #line 198 
  memcpy((void *)(& node->info),(void *)(& elem.generic[0]),24UL);
  #line 199 
  return ICE_SUCCESS;
}

#line 214  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_sched.c"
static enum ice_status ice_aq_delete_sched_elems(struct ice_hw *hw, u16 grps_req, struct ice_aqc_delete_elem *buf, u16 buf_size, u16 *grps_del, struct ice_sq_cd *cd)
{
  #line 218 
  return ice_aqc_send_sched_elem_cmd(hw,
                                  (enum ice_adminq_opc)ice_aqc_opc_delete_sched_elems,
                                  (unsigned short)((int)grps_req),
                                  (void *)buf,
                                  (unsigned short)((int)buf_size),grps_del,
                                  cd);
}

#line 233  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_sched.c"
static enum ice_status ice_sched_remove_elems(struct ice_hw *hw, struct ice_sched_node *parent, u16 num_nodes, u32 *node_teids)
{
  #line 257 
  void *__mptr_1;
  #line 242 
  void *__mptr;
  #line 236 
  struct ice_aqc_delete_elem *buf;
  #line 237 
  u16 i;
  #line 238 
  enum ice_status status;
  #line 239 
  u16 buf_size;
  #line 237 
  u16 num_groups_removed = (unsigned short)0U;
  #line 241 
  buf_size = (unsigned short)((unsigned int)((unsigned short)((unsigned long)((int)num_nodes + -1) + 3UL)) * 4U);
  #line 242 
  ;
  #line 242 
  __mptr = (void *)hw;
  #line 242 
  buf = (struct ice_aqc_delete_elem *)cif_devm_kzalloc_7(& (((struct ice_pf *)(__mptr + 18446744073709549512U))->pdev)->dev,
                           (unsigned long)buf_size,3264U);
  #line 243 
  if (buf == (struct ice_aqc_delete_elem *)0) 
                                              #line 244 
                                              return ICE_ERR_NO_MEMORY;
  #line 246 
  buf->hdr.parent_teid = parent->info.node_teid;
  #line 247 
  buf->hdr.num_elems = num_nodes;
  #line 248 
  i = (unsigned short)0U;
  #line 248 
  while ((int)i < (int)num_nodes) {
    #line 249 
    buf->teid[(int)i] = *(node_teids + (unsigned long)i);
    #line 248 
    i = (u16)((int)i + 1);
  }
  #line 251 
  status = ice_aq_delete_sched_elems(hw,(unsigned short)1,buf,(unsigned short)((int)buf_size),& num_groups_removed,(struct ice_sq_cd *)0);
  #line 253 
  if (status != ICE_SUCCESS || (unsigned int)num_groups_removed != 1U) {
    #line 254 
    bool branch;
    #line 254 
    struct _ddebug __UNIQUE_ID_ddebug537 = {.modname = (char *)"ice", .function = (char *)"ice_sched_remove_elems", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_sched.c", .format = (char *)"remove node failed FW error %d\n", .lineno = (unsigned int)254U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 254 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug537.key.dd_key_false.key,(_Bool)0);
    #line 254 
    if ((long)((long)((int)branch != 0)) != 0L) {
      #line 254 
      void *__mptr_0;
      #line 254 
      ;
      #line 254 
      __mptr_0 = (void *)hw;
      #line 254 
      __dynamic_dev_dbg(& __UNIQUE_ID_ddebug537,& (((struct ice_pf *)(__mptr_0 + 18446744073709549512U))->pdev)->dev,(char *)"remove node failed FW error %d\n",(unsigned int)hw->adminq.sq_last_status);
    }
  }
  #line 257 
  ;
  #line 257 
  __mptr_1 = (void *)hw;
  #line 257 
  devm_kfree(& (((struct ice_pf *)(__mptr_1 + 18446744073709549512U))->pdev)->dev,(void *)buf);
  #line 258 
  return status;
}

#line 270  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_sched.c"
static struct ice_sched_node *ice_sched_get_first_node(struct ice_port_info *pi, struct ice_sched_node *parent, u8 layer)
{
  #line 273 
  return pi->sib_head[(int)parent->tc_num][(int)layer];
}

#line 283  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_sched.c"
struct ice_sched_node *ice_sched_get_tc_node(struct ice_port_info *pi, u8 tc)
{
  #line 285 
  u8 i;
  #line 287 
  if (pi == (struct ice_port_info *)0 || pi->root == (struct ice_sched_node *)0) 
    #line 288 
    return (struct ice_sched_node *)0;
  #line 289 
  i = (unsigned char)0U;
  #line 289 
  while ((int)(pi->root)->num_children > (int)i) {
    #line 290 
    if ((int)(*((pi->root)->children + (unsigned long)i))->tc_num == (int)tc) 
      #line 291 
      return *((pi->root)->children + (unsigned long)i);
    #line 289 
    i = (u8)((int)i + 1);
  }
  #line 292 
  return (struct ice_sched_node *)0;
}

#line 304  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_sched.c"
void ice_free_sched_node(struct ice_port_info *pi, struct ice_sched_node *node)
{
  #line 359 
  void *__mptr_0;
  #line 306 
  struct ice_sched_node *parent;
  #line 308 
  u8 i;
  #line 308 
  u8 j;
  #line 307 
  struct ice_hw *hw = pi->hw;
  #line 314 
  while ((unsigned int)node->num_children != 0U) 
                                                 #line 315 
                                                 ice_free_sched_node(pi,*(node->children));
  #line 318 
  if ((((int)node->tx_sched_layer >= (int)hw->sw_entry_point_layer && (unsigned int)node->info.data.elem_type != 2U) && (unsigned int)node->info.data.elem_type != 1U) && (unsigned int)node->info.data.elem_type != 5U) {
    #line 322 
    u32 teid = node->info.node_teid;
    #line 324 
    ice_sched_remove_elems(hw,node->parent,(unsigned short)1,& teid);
  }
  #line 326 
  parent = node->parent;
  #line 328 
  if (parent != (struct ice_sched_node *)0) {
    #line 329 
    struct ice_sched_node *p;
    #line 332 
    i = (unsigned char)0U;
    #line 332 
    while ((int)parent->num_children > (int)i) {
      #line 333 
      if (*(parent->children + (unsigned long)i) == node) {
        #line 334 
        j = (unsigned char)((unsigned int)i + 1U);
        #line 334 
        while ((int)parent->num_children > (int)j) {
          #line 335 
          *(parent->children + ((unsigned long)j + 18446744073709551615U)) = *(parent->children + (unsigned long)j);
          #line 334 
          j = (u8)((int)j + 1);
        }
        #line 337 
        parent->num_children = (u8)((int)parent->num_children - 1);
        #line 338 
        break;
      }
      #line 332 
      i = (u8)((int)i + 1);
    }
    #line 341 
    p = ice_sched_get_first_node(pi,node,(unsigned char)((int)node->tx_sched_layer));
    #line 342 
    while (p != (struct ice_sched_node *)0) {
      #line 343 
      if (p->sibling == node) {
        #line 344 
        p->sibling = node->sibling;
        #line 345 
        break;
      }
      #line 347 
      p = p->sibling;
    }
    #line 351 
    if (pi->sib_head[(int)node->tc_num][(int)node->tx_sched_layer] == node) 
      #line 352 
      pi->sib_head[(int)node->tc_num][(int)node->tx_sched_layer] = node->sibling;
  }
  #line 357 
  if (node->children != (struct ice_sched_node **)0) {
    #line 358 
    void *__mptr;
    #line 358 
    ;
    #line 358 
    __mptr = (void *)hw;
    #line 358 
    devm_kfree(& (((struct ice_pf *)(__mptr + 18446744073709549512U))->pdev)->dev,(void *)node->children);
  }
  #line 359 
  ;
  #line 359 
  __mptr_0 = (void *)hw;
  #line 359 
  devm_kfree(& (((struct ice_pf *)(__mptr_0 + 18446744073709549512U))->pdev)->dev,(void *)node);
  #line 360 
  return;
}

#line 374  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_sched.c"
static enum ice_status ice_aq_get_dflt_topo(struct ice_hw *hw, u8 lport, struct ice_aqc_get_topo_elem *buf, u16 buf_size, u8 *num_branches, struct ice_sq_cd *cd)
{
  #line 378 
  struct ice_aqc_get_topo *cmd;
  #line 379 
  struct ice_aq_desc desc;
  #line 380 
  enum ice_status status;
  #line 382 
  cmd = & desc.params.get_topo;
  #line 383 
  ice_fill_dflt_direct_cmd_desc(& desc,(unsigned short)1024);
  #line 384 
  cmd->port_num = lport;
  #line 385 
  status = ice_aq_send_cmd(hw,& desc,(void *)buf,(unsigned short)((int)buf_size),cd);
  #line 386 
  if (status == ICE_SUCCESS && num_branches != (u8 *)0U) 
                                                         #line 387 
                                                         *num_branches = cmd->num_branches;
  #line 389 
  return status;
}

#line 404  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_sched.c"
static enum ice_status ice_aq_add_sched_elems(struct ice_hw *hw, u16 grps_req, struct ice_aqc_add_elem *buf, u16 buf_size, u16 *grps_added, struct ice_sq_cd *cd)
{
  #line 408 
  return ice_aqc_send_sched_elem_cmd(hw,
                                  (enum ice_adminq_opc)ice_aqc_opc_add_sched_elems,
                                  (unsigned short)((int)grps_req),
                                  (void *)buf,
                                  (unsigned short)((int)buf_size),grps_added,
                                  cd);
}

#line 425  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_sched.c"
static enum ice_status ice_aq_cfg_sched_elems(struct ice_hw *hw, u16 elems_req, struct ice_aqc_conf_elem *buf, u16 buf_size, u16 *elems_cfgd, struct ice_sq_cd *cd)
{
  #line 429 
  return ice_aqc_send_sched_elem_cmd(hw,
                                  (enum ice_adminq_opc)ice_aqc_opc_cfg_sched_elems,
                                  (unsigned short)((int)elems_req),
                                  (void *)buf,
                                  (unsigned short)((int)buf_size),elems_cfgd,
                                  cd);
}

#line 446  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_sched.c"
static enum ice_status ice_aq_suspend_sched_elems(struct ice_hw *hw, u16 elems_req, struct ice_aqc_suspend_resume_elem *buf, u16 buf_size, u16 *elems_ret, struct ice_sq_cd *cd)
{
  #line 450 
  return ice_aqc_send_sched_elem_cmd(hw,
                                  (enum ice_adminq_opc)ice_aqc_opc_suspend_sched_elems,
                                  (unsigned short)((int)elems_req),
                                  (void *)buf,
                                  (unsigned short)((int)buf_size),elems_ret,
                                  cd);
}

#line 467  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_sched.c"
static enum ice_status ice_aq_resume_sched_elems(struct ice_hw *hw, u16 elems_req, struct ice_aqc_suspend_resume_elem *buf, u16 buf_size, u16 *elems_ret, struct ice_sq_cd *cd)
{
  #line 471 
  return ice_aqc_send_sched_elem_cmd(hw,
                                  (enum ice_adminq_opc)ice_aqc_opc_resume_sched_elems,
                                  (unsigned short)((int)elems_req),
                                  (void *)buf,
                                  (unsigned short)((int)buf_size),elems_ret,
                                  cd);
}

#line 486  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_sched.c"
static enum ice_status ice_aq_query_sched_res(struct ice_hw *hw, u16 buf_size, struct ice_aqc_query_txsched_res_resp *buf, struct ice_sq_cd *cd)
{
  #line 490 
  struct ice_aq_desc desc;
  #line 492 
  ice_fill_dflt_direct_cmd_desc(& desc,(unsigned short)1042);
  #line 493 
  return ice_aq_send_cmd(hw,& desc,(void *)buf,(unsigned short)((int)buf_size),
                      cd);
}

#line 506  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_sched.c"
static enum ice_status ice_sched_suspend_resume_elems(struct ice_hw *hw, u8 num_nodes, u32 *node_teids, bool suspend)
{
  #line 532 
  void *__mptr_1;
  #line 514 
  void *__mptr;
  #line 509 
  struct ice_aqc_suspend_resume_elem *buf;
  #line 510 
  u16 i;
  #line 510 
  u16 buf_size;
  #line 511 
  enum ice_status status;
  #line 510 
  u16 num_elem_ret = (unsigned short)0U;
  #line 513 
  buf_size = (unsigned short)((unsigned int)((unsigned short)num_nodes) * 4U);
  #line 514 
  ;
  #line 514 
  __mptr = (void *)hw;
  #line 514 
  buf = (struct ice_aqc_suspend_resume_elem *)cif_devm_kzalloc_7(& (((struct ice_pf *)(__mptr + 18446744073709549512U))->pdev)->dev,
                           (unsigned long)buf_size,3264U);
  #line 515 
  if (buf == (struct ice_aqc_suspend_resume_elem *)0) 
                                                      #line 516 
                                                      return ICE_ERR_NO_MEMORY;
  #line 518 
  i = (unsigned short)0U;
  #line 518 
  while ((int)((unsigned short)num_nodes) > (int)i) {
    #line 519 
    buf->teid[(int)i] = *(node_teids + (unsigned long)i);
    #line 518 
    i = (u16)((int)i + 1);
  }
  #line 521 
  if ((int)suspend != 0) 
                         #line 522 
                         status = ice_aq_suspend_sched_elems(hw,(unsigned short)((int)num_nodes),buf,(unsigned short)((int)buf_size),& num_elem_ret,(struct ice_sq_cd *)0); else 
                                                                    #line 526 
                                                                    status = ice_aq_resume_sched_elems(hw,(unsigned short)((int)num_nodes),buf,(unsigned short)((int)buf_size),& num_elem_ret,(struct ice_sq_cd *)0);
  #line 529 
  if (status != ICE_SUCCESS || (int)((unsigned short)num_nodes) != (int)num_elem_ret) {
    #line 530 
    bool branch;
    #line 530 
    struct _ddebug __UNIQUE_ID_ddebug538 = {.modname = (char *)"ice", .function = (char *)"ice_sched_suspend_resume_elems", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_sched.c", .format = (char *)"suspend/resume failed\n", .lineno = (unsigned int)530U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 530 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug538.key.dd_key_false.key,(_Bool)0);
    #line 530 
    if ((long)((long)((int)branch != 0)) != 0L) {
      #line 530 
      void *__mptr_0;
      #line 530 
      __mptr_0 = (void *)hw;
      #line 530 
      __dynamic_dev_dbg(& __UNIQUE_ID_ddebug538,& (((struct ice_pf *)(__mptr_0 + 18446744073709549512U))->pdev)->dev,(char *)"suspend/resume failed\n");
    }
  }
  #line 532 
  ;
  #line 532 
  __mptr_1 = (void *)hw;
  #line 532 
  devm_kfree(& (((struct ice_pf *)(__mptr_1 + 18446744073709549512U))->pdev)->dev,(void *)buf);
  #line 533 
  return status;
}

#line 544  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_sched.c"
static enum ice_status ice_alloc_lan_q_ctx(struct ice_hw *hw, u16 vsi_handle, u8 tc, u16 new_numqs)
{
  #line 546 
  struct ice_vsi_ctx *vsi_ctx;
  #line 547 
  struct ice_q_ctx *q_ctx;
  #line 549 
  vsi_ctx = ice_get_vsi_ctx(hw,(unsigned short)((int)vsi_handle));
  #line 550 
  if (vsi_ctx == (struct ice_vsi_ctx *)0) 
                                          #line 551 
                                          return ICE_ERR_PARAM;
  #line 553 
  if (vsi_ctx->lan_q_ctx[(int)tc] == (struct ice_q_ctx *)0) {
    #line 554 
    void *__mptr;
    #line 554 
    ;
    #line 554 
    __mptr = (void *)hw;
    #line 554 
    vsi_ctx->lan_q_ctx[(int)tc] = (struct ice_q_ctx *)cif_devm_kcalloc_7(& (((struct ice_pf *)(__mptr + 18446744073709549512U))->pdev)->dev,
                           (unsigned long)new_numqs,40UL,3264U);
    #line 558 
    if (vsi_ctx->lan_q_ctx[(int)tc] == (struct ice_q_ctx *)0) 
                                                              #line 559 
                                                              return ICE_ERR_NO_MEMORY;
    #line 560 
    vsi_ctx->num_lan_q_entries[(int)tc] = new_numqs;
    #line 561 
    return ICE_SUCCESS;
  }
  #line 564 
  if ((int)vsi_ctx->num_lan_q_entries[(int)tc] < (int)new_numqs) {
    #line 573 
    void *__mptr_1;
    #line 567 
    void *__mptr_0;
    #line 565 
    u16 prev_num = vsi_ctx->num_lan_q_entries[(int)tc];
    #line 567 
    ;
    #line 567 
    __mptr_0 = (void *)hw;
    #line 567 
    q_ctx = (struct ice_q_ctx *)cif_devm_kcalloc_7(& (((struct ice_pf *)(__mptr_0 + 18446744073709549512U))->pdev)->dev,
                           (unsigned long)new_numqs,40UL,3264U);
    #line 569 
    if (q_ctx == (struct ice_q_ctx *)0) 
                                        #line 570 
                                        return ICE_ERR_NO_MEMORY;
    #line 571 
    memcpy((void *)q_ctx,(void *)vsi_ctx->lan_q_ctx[(int)tc],(unsigned long)prev_num * 40UL);
    #line 573 
    ;
    #line 573 
    __mptr_1 = (void *)hw;
    #line 573 
    devm_kfree(& (((struct ice_pf *)(__mptr_1 + 18446744073709549512U))->pdev)->dev,(void *)vsi_ctx->lan_q_ctx[(int)tc]);
    #line 574 
    vsi_ctx->lan_q_ctx[(int)tc] = q_ctx;
    #line 575 
    vsi_ctx->num_lan_q_entries[(int)tc] = new_numqs;
  }
  #line 577 
  return ICE_SUCCESS;
}

#line 593  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_sched.c"
static enum ice_status ice_aq_rl_profile(struct ice_hw *hw, enum ice_adminq_opc opcode, u16 num_profiles, struct ice_aqc_rl_profile_generic_elem *buf, u16 buf_size, u16 *num_processed, struct ice_sq_cd *cd)
{
  #line 597 
  struct ice_aqc_rl_profile *cmd;
  #line 598 
  struct ice_aq_desc desc;
  #line 599 
  enum ice_status status;
  #line 601 
  cmd = & desc.params.rl_profile;
  #line 603 
  ice_fill_dflt_direct_cmd_desc(& desc,(unsigned short)((int)((unsigned short)opcode)));
  #line 604 
  desc.flags = (unsigned short)((unsigned int)desc.flags | 1024U);
  #line 605 
  cmd->num_profiles = num_profiles;
  #line 606 
  status = ice_aq_send_cmd(hw,& desc,(void *)buf,(unsigned short)((int)buf_size),cd);
  #line 607 
  if (status == ICE_SUCCESS && num_processed != (u16 *)0U) 
                                                           #line 608 
                                                           *num_processed = cmd->num_processed;
  #line 609 
  return status;
}

#line 624  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_sched.c"
static enum ice_status ice_aq_add_rl_profile(struct ice_hw *hw, u16 num_profiles, struct ice_aqc_rl_profile_generic_elem *buf, u16 buf_size, u16 *num_profiles_added, struct ice_sq_cd *cd)
{
  #line 629 
  return ice_aq_rl_profile(hw,(enum ice_adminq_opc)ice_aqc_opc_add_rl_profiles,
                        (unsigned short)((int)num_profiles),buf,
                        (unsigned short)((int)buf_size),num_profiles_added,
                        cd);
}

#line 646  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_sched.c"
static enum ice_status ice_aq_remove_rl_profile(struct ice_hw *hw, u16 num_profiles, struct ice_aqc_rl_profile_generic_elem *buf, u16 buf_size, u16 *num_profiles_removed, struct ice_sq_cd *cd)
{
  #line 651 
  return ice_aq_rl_profile(hw,
                        (enum ice_adminq_opc)ice_aqc_opc_remove_rl_profiles,
                        (unsigned short)((int)num_profiles),buf,
                        (unsigned short)((int)buf_size),num_profiles_removed,
                        cd);
}

#line 666  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_sched.c"
static enum ice_status ice_sched_del_rl_profile(struct ice_hw *hw, struct ice_aqc_rl_profile_info *rl_info)
{
  #line 687 
  void *__mptr;
  #line 669 
  struct ice_aqc_rl_profile_generic_elem *buf;
  #line 670 
  u16 num_profiles_removed;
  #line 671 
  enum ice_status status;
  #line 672 
  u16 num_profiles = (unsigned short)1U;
  #line 674 
  if ((unsigned int)rl_info->prof_id_ref != 0U) 
                                                #line 675 
                                                return ICE_ERR_IN_USE;
  #line 678 
  buf = (struct ice_aqc_rl_profile_generic_elem *)(& rl_info->profile);
  #line 680 
  status = ice_aq_remove_rl_profile(hw,(unsigned short)((int)num_profiles),buf,(unsigned short)12,& num_profiles_removed,(struct ice_sq_cd *)0);
  #line 682 
  if (status != ICE_SUCCESS || (int)num_profiles_removed != (int)num_profiles) 
    #line 683 
    return ICE_ERR_CFG;
  #line 686 
  list_del_2(& rl_info->list_entry);
  #line 687 
  ;
  #line 687 
  __mptr = (void *)hw;
  #line 687 
  devm_kfree(& (((struct ice_pf *)(__mptr + 18446744073709549512U))->pdev)->dev,(void *)rl_info);
  #line 688 
  return status;
}

#line 697  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_sched.c"
static void ice_sched_clear_rl_prof(struct ice_port_info *pi)
{
  #line 699 
  u16 ln;
  #line 701 
  ln = (unsigned short)0U;
  #line 701 
  while ((int)(pi->hw)->num_tx_sched_layers > (int)ln) {
    {
      #line 705 
      void *__mptr;
      #line 705 
      void *__mptr_0;
      #line 702 
      struct ice_aqc_rl_profile_info *rl_prof_elem;
      #line 703 
      struct ice_aqc_rl_profile_info *rl_prof_tmp;
      #line 705 
      __mptr = (void *)pi->rl_prof_list[(int)ln].next;
      #line 705 
      rl_prof_elem = ((struct ice_aqc_rl_profile_info *)(__mptr + 18446744073709551600U));
      #line 705 
      __mptr_0 = (void *)rl_prof_elem->list_entry.next;
      #line 706 
      rl_prof_tmp = ((struct ice_aqc_rl_profile_info *)(__mptr_0 + 18446744073709551600U));
      #line 705 
      while (& rl_prof_elem->list_entry != & pi->rl_prof_list[(int)ln]) {
        #line 705 
        void *__mptr_1;
        {
          #line 708 
          enum ice_status status;
          #line 707 
          struct ice_hw *hw = pi->hw;
          #line 710 
          rl_prof_elem->prof_id_ref = (unsigned short)0U;
          #line 711 
          status = ice_sched_del_rl_profile(hw,rl_prof_elem);
          #line 712 
          if (status != ICE_SUCCESS) {
            #line 717 
            void *__mptr_3;
            {
              #line 713 
              bool branch;
              #line 713 
              struct _ddebug __UNIQUE_ID_ddebug539 = {.modname = (char *)"ice", .function = (char *)"ice_sched_clear_rl_prof", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_sched.c", .format = (char *)"Remove rl profile failed\n", .lineno = (unsigned int)713U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
              #line 713 
              branch = arch_static_branch(& __UNIQUE_ID_ddebug539.key.dd_key_false.key,(_Bool)0);
              #line 713 
              if ((long)((long)((int)branch != 0)) != 0L) {
                #line 713 
                void *__mptr_2;
                #line 713 
                __mptr_2 = (void *)hw;
                #line 713 
                __dynamic_dev_dbg(& __UNIQUE_ID_ddebug539,& (((struct ice_pf *)(__mptr_2 + 18446744073709549512U))->pdev)->dev,(char *)"Remove rl profile failed\n");
              }
            }
            #line 716 
            list_del_2(& rl_prof_elem->list_entry);
            #line 717 
            ;
            #line 717 
            __mptr_3 = (void *)hw;
            #line 717 
            devm_kfree(& (((struct ice_pf *)(__mptr_3 + 18446744073709549512U))->pdev)->dev,(void *)rl_prof_elem);
          }
        }
        #line 705 
        rl_prof_elem = rl_prof_tmp;
        #line 705 
        __mptr_1 = (void *)rl_prof_tmp->list_entry.next;
        #line 705 
        rl_prof_tmp = ((struct ice_aqc_rl_profile_info *)(__mptr_1 + 18446744073709551600U));
      }
    }
    #line 701 
    ln = (u16)((int)ln + 1);
  }
  #line 721 
  return;
}

#line 730  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_sched.c"
void ice_sched_clear_agg(struct ice_hw *hw)
{
  #line 735 
  void *__mptr;
  #line 735 
  void *__mptr_0;
  #line 732 
  struct ice_sched_agg_info *agg_info;
  #line 733 
  struct ice_sched_agg_info *atmp;
  #line 735 
  __mptr = (void *)hw->agg_list.next;
  #line 735 
  agg_info = ((struct ice_sched_agg_info *)(__mptr + 18446744073709551600U));
  #line 735 
  __mptr_0 = (void *)agg_info->list_entry.next;
  #line 736 
  atmp = ((struct ice_sched_agg_info *)(__mptr_0 + 18446744073709551600U));
  #line 735 
  while (& agg_info->list_entry != & hw->agg_list) {
    #line 735 
    void *__mptr_1;
    {
      #line 739 
      void *__mptr_2;
      #line 745 
      void *__mptr_6;
      #line 739 
      void *__mptr_3;
      #line 736 
      struct ice_sched_agg_vsi_info *agg_vsi_info;
      #line 737 
      struct ice_sched_agg_vsi_info *vtmp;
      #line 739 
      __mptr_2 = (void *)agg_info->agg_vsi_list.next;
      #line 739 
      agg_vsi_info = ((struct ice_sched_agg_vsi_info *)__mptr_2);
      #line 739 
      __mptr_3 = (void *)agg_vsi_info->list_entry.next;
      #line 740 
      vtmp = ((struct ice_sched_agg_vsi_info *)__mptr_3);
      #line 739 
      while ((void *)agg_vsi_info != (void *)agg_info) {
        #line 739 
        void *__mptr_4;
        {
          #line 742 
          void *__mptr_5;
          #line 741 
          list_del_2(& agg_vsi_info->list_entry);
          #line 742 
          ;
          #line 742 
          __mptr_5 = (void *)hw;
          #line 742 
          devm_kfree(& (((struct ice_pf *)(__mptr_5 + 18446744073709549512U))->pdev)->dev,(void *)agg_vsi_info);
        }
        #line 739 
        agg_vsi_info = vtmp;
        #line 739 
        __mptr_4 = (void *)vtmp->list_entry.next;
        #line 739 
        vtmp = ((struct ice_sched_agg_vsi_info *)__mptr_4);
      }
      #line 744 
      list_del_2(& agg_info->list_entry);
      #line 745 
      ;
      #line 745 
      __mptr_6 = (void *)hw;
      #line 745 
      devm_kfree(& (((struct ice_pf *)(__mptr_6 + 18446744073709549512U))->pdev)->dev,(void *)agg_info);
    }
    #line 735 
    agg_info = atmp;
    #line 735 
    __mptr_1 = (void *)atmp->list_entry.next;
    #line 735 
    atmp = ((struct ice_sched_agg_info *)(__mptr_1 + 18446744073709551600U));
  }
  #line 747 
  return;
}

#line 755  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_sched.c"
static void ice_sched_clear_tx_topo(struct ice_port_info *pi)
{
  #line 757 
  if (pi == (struct ice_port_info *)0) 
                                       #line 758 
                                       return;
  #line 760 
  ice_sched_clear_rl_prof(pi);
  #line 761 
  if (pi->root != (struct ice_sched_node *)0) {
    #line 762 
    ice_free_sched_node(pi,pi->root);
    #line 763 
    pi->root = (struct ice_sched_node *)0;
  }
  #line 765 
  return;
}

#line 773  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_sched.c"
void ice_sched_clear_port(struct ice_port_info *pi)
{
  #line 775 
  if (pi == (struct ice_port_info *)0 || (unsigned int)pi->port_state != 1U) 
    #line 776 
    return;
  #line 778 
  pi->port_state = (unsigned char)0U;
  #line 779 
  cif_mutex_lock_sched_lock_of_ice_port_info_1(& pi->sched_lock);
  #line 780 
  ice_sched_clear_tx_topo(pi);
  #line 781 
  cif_mutex_unlock_sched_lock_of_ice_port_info_1(& pi->sched_lock);
  #line 782 
  mutex_destroy(& pi->sched_lock);
  #line 783 
  return;
}

#line 791  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_sched.c"
void ice_sched_cleanup_all(struct ice_hw *hw)
{
  #line 793 
  if (hw == (struct ice_hw *)0) 
                                #line 794 
                                return;
  #line 796 
  if (hw->layer_info != (struct ice_aqc_layer_props *)0) {
    #line 797 
    void *__mptr;
    #line 797 
    ;
    #line 797 
    __mptr = (void *)hw;
    #line 797 
    devm_kfree(& (((struct ice_pf *)(__mptr + 18446744073709549512U))->pdev)->dev,(void *)hw->layer_info);
    #line 798 
    hw->layer_info = (struct ice_aqc_layer_props *)0;
  }
  #line 801 
  ice_sched_clear_port(hw->port_info);
  #line 803 
  hw->num_tx_sched_layers = (unsigned short)0U;
  #line 804 
  hw->num_tx_sched_phys_layers = (unsigned short)0U;
  #line 805 
  hw->flattened_layers = (unsigned char)0U;
  #line 806 
  hw->max_cgds = (unsigned char)0U;
  #line 807 
  return;
}

#line 822  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_sched.c"
static enum ice_status ice_sched_add_elems(struct ice_port_info *pi, struct ice_sched_node *tc_node, struct ice_sched_node *parent, u8 layer, u16 num_nodes, u16 *num_nodes_added, u32 *first_node_teid)
{
  #line 835 
  void *__mptr;
  #line 906 
  void *__mptr_4;
  #line 826 
  struct ice_sched_node *prev;
  #line 826 
  struct ice_sched_node *new_node;
  #line 827 
  struct ice_aqc_add_elem *buf;
  #line 828 
  u16 i;
  #line 831 
  size_t buf_size;
  #line 832 
  u32 teid;
  #line 828 
  u16 num_groups_added = (unsigned short)0U;
  #line 829 
  enum ice_status status = 0;
  #line 830 
  struct ice_hw *hw = pi->hw;
  #line 834 
  buf_size = __ab_c_size((unsigned long)((int)num_nodes + -1),24UL,32UL);
  #line 835 
  ;
  #line 835 
  __mptr = (void *)hw;
  #line 835 
  buf = (struct ice_aqc_add_elem *)cif_devm_kzalloc_7(& (((struct ice_pf *)(__mptr + 18446744073709549512U))->pdev)->dev,
                           buf_size,3264U);
  #line 836 
  if (buf == (struct ice_aqc_add_elem *)0) 
                                           #line 837 
                                           return ICE_ERR_NO_MEMORY;
  #line 839 
  buf->hdr.parent_teid = parent->info.node_teid;
  #line 840 
  buf->hdr.num_elems = num_nodes;
  #line 841 
  i = (unsigned short)0U;
  #line 841 
  while ((int)i < (int)num_nodes) {
    #line 842 
    buf->generic[(int)i].parent_teid = parent->info.node_teid;
    #line 843 
    buf->generic[(int)i].data.elem_type = (unsigned char)3U;
    #line 844 
    buf->generic[(int)i].data.valid_sections = (unsigned char)7U;
    #line 847 
    buf->generic[(int)i].data.generic = (unsigned char)0U;
    #line 848 
    buf->generic[(int)i].data.cir_bw.bw_profile_idx = (unsigned short)0U;
    #line 850 
    buf->generic[(int)i].data.cir_bw.bw_alloc = (unsigned short)1U;
    #line 852 
    buf->generic[(int)i].data.eir_bw.bw_profile_idx = (unsigned short)0U;
    #line 854 
    buf->generic[(int)i].data.eir_bw.bw_alloc = (unsigned short)1U;
    #line 841 
    i = (u16)((int)i + 1);
  }
  #line 858 
  status = ice_aq_add_sched_elems(hw,(unsigned short)1,buf,(unsigned short)((int)((unsigned short)buf_size)),& num_groups_added,(struct ice_sq_cd *)0);
  #line 860 
  if (status != ICE_SUCCESS || (unsigned int)num_groups_added != 1U) {
    #line 863 
    void *__mptr_1;
    {
      #line 861 
      bool branch;
      #line 861 
      struct _ddebug __UNIQUE_ID_ddebug540 = {.modname = (char *)"ice", .function = (char *)"ice_sched_add_elems", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_sched.c", .format = (char *)"add node failed FW Error %d\n", .lineno = (unsigned int)861U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 861 
      branch = arch_static_branch(& __UNIQUE_ID_ddebug540.key.dd_key_false.key,(_Bool)0);
      #line 861 
      if ((long)((long)((int)branch != 0)) != 0L) {
        #line 861 
        void *__mptr_0;
        #line 861 
        ;
        #line 861 
        __mptr_0 = (void *)hw;
        #line 861 
        __dynamic_dev_dbg(& __UNIQUE_ID_ddebug540,& (((struct ice_pf *)(__mptr_0 + 18446744073709549512U))->pdev)->dev,(char *)"add node failed FW Error %d\n",(unsigned int)hw->adminq.sq_last_status);
      }
    }
    #line 863 
    ;
    #line 863 
    __mptr_1 = (void *)hw;
    #line 863 
    devm_kfree(& (((struct ice_pf *)(__mptr_1 + 18446744073709549512U))->pdev)->dev,(void *)buf);
    #line 864 
    return ICE_ERR_CFG;
  }
  #line 867 
  *num_nodes_added = num_nodes;
  #line 869 
  i = (unsigned short)0U;
  #line 869 
  while ((int)i < (int)num_nodes) {
    #line 870 
    status = ice_sched_add_node(pi,(unsigned char)((int)layer),& buf->generic[(int)i]);
    #line 871 
    if (status != ICE_SUCCESS) {
      {
        #line 872 
        bool branch_0;
        #line 872 
        struct _ddebug __UNIQUE_ID_ddebug541 = {.modname = (char *)"ice", .function = (char *)"ice_sched_add_elems", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_sched.c", .format = (char *)"add nodes in SW DB failed status =%d\n", .lineno = (unsigned int)872U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
        #line 872 
        branch_0 = arch_static_branch(& __UNIQUE_ID_ddebug541.key.dd_key_false.key,(_Bool)0);
        #line 872 
        if ((long)((long)((int)branch_0 != 0)) != 0L) {
          #line 872 
          void *__mptr_2;
          #line 872 
          ;
          #line 872 
          __mptr_2 = (void *)hw;
          #line 872 
          __dynamic_dev_dbg(& __UNIQUE_ID_ddebug541,& (((struct ice_pf *)(__mptr_2 + 18446744073709549512U))->pdev)->dev,(char *)"add nodes in SW DB failed status =%d\n",(int)status);
        }
      }
      #line 875 
      break;
    }
    #line 878 
    teid = buf->generic[(int)i].node_teid;
    #line 879 
    new_node = ice_sched_find_node_by_teid(parent,teid);
    #line 880 
    if (new_node == (struct ice_sched_node *)0) {
      {
        #line 881 
        bool branch_1;
        #line 881 
        struct _ddebug __UNIQUE_ID_ddebug542 = {.modname = (char *)"ice", .function = (char *)"ice_sched_add_elems", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_sched.c", .format = (char *)"Node is missing for teid =%d\n", .lineno = (unsigned int)881U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
        #line 881 
        branch_1 = arch_static_branch(& __UNIQUE_ID_ddebug542.key.dd_key_false.key,(_Bool)0);
        #line 881 
        if ((long)((long)((int)branch_1 != 0)) != 0L) {
          #line 881 
          void *__mptr_3;
          #line 881 
          ;
          #line 881 
          __mptr_3 = (void *)hw;
          #line 881 
          __dynamic_dev_dbg(& __UNIQUE_ID_ddebug542,& (((struct ice_pf *)(__mptr_3 + 18446744073709549512U))->pdev)->dev,(char *)"Node is missing for teid =%d\n",teid);
        }
      }
      #line 883 
      break;
    }
    #line 886 
    new_node->sibling = (struct ice_sched_node *)0;
    #line 887 
    new_node->tc_num = tc_node->tc_num;
    #line 891 
    prev = ice_sched_get_first_node(pi,tc_node,(unsigned char)((int)layer));
    #line 892 
    if (prev != (struct ice_sched_node *)0 && prev != new_node) {
      #line 893 
      while (prev->sibling != (struct ice_sched_node *)0) 
                                                          #line 894 
                                                          prev = prev->sibling;
      #line 895 
      prev->sibling = new_node;
    }
    #line 899 
    if (pi->sib_head[(int)tc_node->tc_num][(int)layer] == (struct ice_sched_node *)0) 
      #line 900 
      pi->sib_head[(int)tc_node->tc_num][(int)layer] = new_node;
    #line 902 
    if ((unsigned int)i == 0U) 
                               #line 903 
                               *first_node_teid = teid;
    #line 869 
    i = (u16)((int)i + 1);
  }
  #line 906 
  ;
  #line 906 
  __mptr_4 = (void *)hw;
  #line 906 
  devm_kfree(& (((struct ice_pf *)(__mptr_4 + 18446744073709549512U))->pdev)->dev,(void *)buf);
  #line 907 
  return status;
}

#line 923  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_sched.c"
static enum ice_status ice_sched_add_nodes_to_layer(struct ice_port_info *pi, struct ice_sched_node *tc_node, struct ice_sched_node *parent, u8 layer, u16 num_nodes, u32 *first_node_teid, u16 *num_nodes_added)
{
  #line 930 
  u16 new_num_nodes;
  #line 930 
  u16 max_child_nodes;
  #line 934 
  u32 temp;
  #line 929 
  u32 *first_teid_ptr = first_node_teid;
  #line 931 
  enum ice_status status = 0;
  #line 932 
  struct ice_hw *hw = pi->hw;
  #line 933 
  u16 num_added = (unsigned short)0U;
  #line 936 
  *num_nodes_added = (unsigned short)0U;
  #line 938 
  if ((unsigned int)num_nodes == 0U) 
                                     #line 939 
                                     return status;
  #line 941 
  if (parent == (struct ice_sched_node *)0 || (int)hw->sw_entry_point_layer > (int)layer) 
    #line 942 
    return ICE_ERR_PARAM;
  #line 945 
  max_child_nodes = hw->max_children[(int)parent->tx_sched_layer];
  #line 948 
  if ((int)parent->num_children + (int)num_nodes > (int)max_child_nodes) {
    #line 950 
    if (parent == tc_node) 
                           #line 951 
                           return ICE_ERR_CFG;
    #line 954 
    if ((int)((unsigned short)parent->num_children) < (int)max_child_nodes) {
      #line 955 
      new_num_nodes = (unsigned short)((int)max_child_nodes - (int)((unsigned short)parent->num_children));
      #line 959 
      status = ice_sched_add_nodes_to_layer(pi,tc_node,parent,(unsigned char)((int)layer),(unsigned short)((int)new_num_nodes),first_node_teid,& num_added);
      #line 964 
      if (status != ICE_SUCCESS) 
                                 #line 965 
                                 return status;
      #line 967 
      *num_nodes_added = (unsigned short)((int)*num_nodes_added + (int)num_added);
    }
    #line 973 
    if ((unsigned int)num_added != 0U) 
                                       #line 974 
                                       first_teid_ptr = & temp;
    #line 976 
    new_num_nodes = (unsigned short)((int)num_nodes - (int)num_added);
    #line 979 
    parent = parent->sibling;
    #line 986 
    status = ice_sched_add_nodes_to_layer(pi,tc_node,parent,(unsigned char)((int)layer),(unsigned short)((int)new_num_nodes),first_teid_ptr,& num_added);
    #line 990 
    *num_nodes_added = (unsigned short)((int)*num_nodes_added + (int)num_added);
    #line 991 
    return status;
  }
  #line 994 
  status = ice_sched_add_elems(pi,tc_node,parent,(unsigned char)((int)layer),(unsigned short)((int)num_nodes),num_nodes_added,first_node_teid);
  #line 996 
  return status;
}

#line 1005  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_sched.c"
static u8 ice_sched_get_qgrp_layer(struct ice_hw *hw)
{
  #line 1008 
  return (unsigned char)((unsigned int)((unsigned char)hw->num_tx_sched_layers) + 254U);
}

#line 1017  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_sched.c"
static u8 ice_sched_get_vsi_layer(struct ice_hw *hw)
{
  #line 1025 
  if ((unsigned int)hw->num_tx_sched_layers > 5U) {
    #line 1026 
    u8 layer = (unsigned char)((unsigned int)((unsigned char)hw->num_tx_sched_layers) + 252U);
    #line 1028 
    if ((int)hw->sw_entry_point_layer < (int)layer) 
                                                    #line 1029 
                                                    return layer;
  }
  #line 1031 
  return hw->sw_entry_point_layer;
}

#line 1041  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_sched.c"
static void ice_rm_dflt_leaf_node(struct ice_port_info *pi)
{
  #line 1043 
  struct ice_sched_node *node;
  #line 1045 
  node = pi->root;
  #line 1046 
  while (node != (struct ice_sched_node *)0) {
    #line 1047 
    if ((unsigned int)node->num_children == 0U) 
                                                #line 1048 
                                                break;
    #line 1049 
    node = *(node->children);
  }
  #line 1051 
  if (node != (struct ice_sched_node *)0 && (unsigned int)node->info.data.elem_type == 5U) {
    #line 1053 
    enum ice_status status;
    #line 1052 
    u32 teid = node->info.node_teid;
    #line 1056 
    status = ice_sched_remove_elems(pi->hw,node->parent,(unsigned short)1,& teid);
    #line 1057 
    if (status == ICE_SUCCESS) 
                               #line 1058 
                               ice_free_sched_node(pi,node);
  }
  #line 1060 
  return;
}

#line 1069  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_sched.c"
static void ice_sched_rm_dflt_nodes(struct ice_port_info *pi)
{
  #line 1071 
  struct ice_sched_node *node;
  #line 1073 
  ice_rm_dflt_leaf_node(pi);
  #line 1076 
  node = pi->root;
  #line 1077 
  while (node != (struct ice_sched_node *)0) {
    #line 1078 
    if (((int)node->tx_sched_layer >= (int)(pi->hw)->sw_entry_point_layer && (unsigned int)node->info.data.elem_type != 2U) && (unsigned int)node->info.data.elem_type != 1U) {
      #line 1081 
      ice_free_sched_node(pi,node);
      #line 1082 
      break;
    }
    #line 1085 
    if ((unsigned int)node->num_children == 0U) 
                                                #line 1086 
                                                break;
    #line 1087 
    node = *(node->children);
  }
  #line 1089 
  return;
}

#line 1099  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_sched.c"
enum ice_status ice_sched_init_port(struct ice_port_info *pi)
{
  #line 1191 
  void *__mptr_2;
  #line 1113 
  void *__mptr;
  #line 1101 
  struct ice_aqc_get_topo_elem *buf;
  #line 1102 
  enum ice_status status;
  #line 1103 
  struct ice_hw *hw;
  #line 1104 
  u8 num_branches;
  #line 1105 
  u16 num_elems;
  #line 1106 
  u8 i;
  #line 1106 
  u8 j;
  #line 1108 
  if (pi == (struct ice_port_info *)0) 
                                       #line 1109 
                                       return ICE_ERR_PARAM;
  #line 1110 
  hw = pi->hw;
  #line 1113 
  __mptr = (void *)hw;
  #line 1113 
  buf = (struct ice_aqc_get_topo_elem *)cif_devm_kzalloc_7(& (((struct ice_pf *)(__mptr + 18446744073709549512U))->pdev)->dev,
                           4096UL,3264U);
  #line 1114 
  if (buf == (struct ice_aqc_get_topo_elem *)0) 
                                                #line 1115 
                                                return ICE_ERR_NO_MEMORY;
  #line 1118 
  status = ice_aq_get_dflt_topo(hw,(unsigned char)((int)pi->lport),buf,(unsigned short)4096,& num_branches,(struct ice_sq_cd *)0);
  #line 1120 
  if (status != ICE_SUCCESS) 
                             #line 1121 
                             goto err_init_port;
  #line 1124 
  if ((unsigned int)num_branches + 255U > 7U) {
    {
      #line 1125 
      bool branch;
      #line 1125 
      struct _ddebug __UNIQUE_ID_ddebug543 = {.modname = (char *)"ice", .function = (char *)"ice_sched_init_port", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_sched.c", .format = (char *)"num_branches unexpected %d\n", .lineno = (unsigned int)1125U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 1125 
      branch = arch_static_branch(& __UNIQUE_ID_ddebug543.key.dd_key_false.key,(_Bool)0);
      #line 1125 
      if ((long)((long)((int)branch != 0)) != 0L) {
        #line 1125 
        void *__mptr_0;
        #line 1125 
        ;
        #line 1125 
        __mptr_0 = (void *)hw;
        #line 1125 
        __dynamic_dev_dbg(& __UNIQUE_ID_ddebug543,& (((struct ice_pf *)(__mptr_0 + 18446744073709549512U))->pdev)->dev,(char *)"num_branches unexpected %d\n",(int)num_branches);
      }
    }
    #line 1127 
    status = ICE_ERR_PARAM;
    #line 1128 
    goto err_init_port;
  }
  #line 1132 
  num_elems = buf->hdr.num_elems;
  #line 1135 
  if ((unsigned int)num_elems + 65535U > 8U) {
    {
      #line 1136 
      bool branch_0;
      #line 1136 
      struct _ddebug __UNIQUE_ID_ddebug544 = {.modname = (char *)"ice", .function = (char *)"ice_sched_init_port", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_sched.c", .format = (char *)"num_elems unexpected %d\n", .lineno = (unsigned int)1136U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 1136 
      branch_0 = arch_static_branch(& __UNIQUE_ID_ddebug544.key.dd_key_false.key,(_Bool)0);
      #line 1136 
      if ((long)((long)((int)branch_0 != 0)) != 0L) {
        #line 1136 
        void *__mptr_1;
        #line 1136 
        ;
        #line 1136 
        __mptr_1 = (void *)hw;
        #line 1136 
        __dynamic_dev_dbg(& __UNIQUE_ID_ddebug544,& (((struct ice_pf *)(__mptr_1 + 18446744073709549512U))->pdev)->dev,(char *)"num_elems unexpected %d\n",(int)num_elems);
      }
    }
    #line 1138 
    status = ICE_ERR_PARAM;
    #line 1139 
    goto err_init_port;
  }
  #line 1145 
  if ((unsigned int)num_elems > 2U && (unsigned int)buf->generic[(int)num_elems + -1].data.elem_type == 5U) 
    #line 1147 
    pi->last_node_teid = buf->generic[(int)num_elems + -2].node_teid; else 
                                                                    #line 1150 
                                                                    pi->last_node_teid = buf->generic[(int)num_elems + -1].node_teid;
  #line 1154 
  status = ice_sched_add_root_node(pi,& buf->generic[0]);
  #line 1155 
  if (status != ICE_SUCCESS) 
                             #line 1156 
                             goto err_init_port;
  #line 1159 
  i = (unsigned char)0U;
  #line 1159 
  while ((int)i < (int)num_branches) {
    #line 1160 
    num_elems = (buf + (unsigned long)i)->hdr.num_elems;
    #line 1163 
    j = (unsigned char)1U;
    #line 1163 
    while ((int)((unsigned short)j) < (int)num_elems) {
      #line 1165 
      if ((unsigned int)buf->generic[(int)j].data.elem_type == 4U) 
                                                                   #line 1167 
                                                                   hw->sw_entry_point_layer = j;
      #line 1169 
      status = ice_sched_add_node(pi,(unsigned char)((int)j),& (buf + (unsigned long)i)->generic[(int)j]);
      #line 1170 
      if (status != ICE_SUCCESS) 
                                 #line 1171 
                                 goto err_init_port;
      #line 1163 
      j = (u8)((int)j + 1);
    }
    #line 1159 
    i = (u8)((int)i + 1);
  }
  #line 1176 
  if (pi->root != (struct ice_sched_node *)0) 
                                              #line 1177 
                                              ice_sched_rm_dflt_nodes(pi);
  #line 1180 
  pi->port_state = (unsigned char)1U;
  {
    #line 1181 
    struct lock_class_key __key;
    #line 1181 
    __mutex_init(& pi->sched_lock,(char *)"&pi->sched_lock",& __key);
  }
  #line 1182 
  i = (unsigned char)0U;
  #line 1182 
  while ((unsigned int)i <= 8U) {
    #line 1183 
    INIT_LIST_HEAD_4(& pi->rl_prof_list[(int)i]);
    #line 1182 
    i = (u8)((int)i + 1);
  }
  #line 1185 
  err_init_port: 
                 #line 1185 
  ;
  #line 1186 
  if (status != ICE_SUCCESS && pi->root != (struct ice_sched_node *)0) {
    #line 1187 
    ice_free_sched_node(pi,pi->root);
    #line 1188 
    pi->root = (struct ice_sched_node *)0;
  }
  #line 1191 
  ;
  #line 1191 
  __mptr_2 = (void *)hw;
  #line 1191 
  devm_kfree(& (((struct ice_pf *)(__mptr_2 + 18446744073709549512U))->pdev)->dev,(void *)buf);
  #line 1192 
  return status;
}

#line 1201  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_sched.c"
enum ice_status ice_sched_query_res_alloc(struct ice_hw *hw)
{
  #line 1247 
  void *__mptr_1;
  #line 1211 
  void *__mptr;
  #line 1237 
  void *__mptr_0;
  #line 1203 
  struct ice_aqc_query_txsched_res_resp *buf;
  #line 1205 
  __le16 max_sibl;
  #line 1206 
  u16 i;
  #line 1204 
  enum ice_status status = 0;
  #line 1208 
  if (hw->layer_info != (struct ice_aqc_layer_props *)0) 
                                                         #line 1209 
                                                         return status;
  #line 1211 
  __mptr = (void *)hw;
  #line 1211 
  buf = (struct ice_aqc_query_txsched_res_resp *)cif_devm_kzalloc_7(& (((struct ice_pf *)(__mptr + 18446744073709549512U))->pdev)->dev,
                           320UL,3264U);
  #line 1212 
  if (buf == (struct ice_aqc_query_txsched_res_resp *)0) 
                                                         #line 1213 
                                                         return ICE_ERR_NO_MEMORY;
  #line 1215 
  status = ice_aq_query_sched_res(hw,(unsigned short)320,buf,(struct ice_sq_cd *)0);
  #line 1216 
  if (status != ICE_SUCCESS) 
                             #line 1217 
                             goto sched_query_out;
  #line 1219 
  hw->num_tx_sched_layers = buf->sched_props.logical_levels;
  #line 1220 
  hw->num_tx_sched_phys_layers = buf->sched_props.phys_levels;
  #line 1222 
  hw->flattened_layers = buf->sched_props.flattening_bitmap;
  #line 1223 
  hw->max_cgds = buf->sched_props.max_pf_cgds;
  #line 1232 
  i = (unsigned short)0U;
  #line 1232 
  while ((int)i < (int)hw->num_tx_sched_layers + -1) {
    #line 1233 
    max_sibl = buf->layer_props[(int)i + 1].max_sibl_grp_sz;
    #line 1234 
    hw->max_children[(int)i] = max_sibl;
    #line 1232 
    i = (u16)((int)i + 1);
  }
  #line 1237 
  ;
  #line 1237 
  ;
  #line 1237 
  __mptr_0 = (void *)hw;
  #line 1237 
  hw->layer_info = (struct ice_aqc_layer_props *)devm_kmemdup(& (((struct ice_pf *)(__mptr_0 + 18446744073709549512U))->pdev)->dev,
                     (void *)(& buf->layer_props),
                     (unsigned long)hw->num_tx_sched_layers * 32UL,3264U);
  #line 1241 
  if (hw->layer_info == (struct ice_aqc_layer_props *)0) {
    #line 1242 
    status = ICE_ERR_NO_MEMORY;
    #line 1243 
    goto sched_query_out;
  }
  #line 1246 
  sched_query_out: 
                   #line 1246 
  ;
  #line 1247 
  ;
  #line 1247 
  __mptr_1 = (void *)hw;
  #line 1247 
  devm_kfree(& (((struct ice_pf *)(__mptr_1 + 18446744073709549512U))->pdev)->dev,(void *)buf);
  #line 1248 
  return status;
}

#line 1261  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_sched.c"
static bool ice_sched_find_node_in_subtree(struct ice_hw *hw, struct ice_sched_node *base, struct ice_sched_node *node)
{
  #line 1264 
  u8 i;
  #line 1266 
  i = (unsigned char)0U;
  #line 1266 
  while ((int)base->num_children > (int)i) {
    {
      #line 1267 
      struct ice_sched_node *child = *(base->children + (unsigned long)i);
      #line 1269 
      if (node == child) 
                         #line 1270 
                         return (_Bool)1;
      #line 1272 
      if ((int)child->tx_sched_layer > (int)node->tx_sched_layer) 
                                                                  #line 1273 
                                                                  return (_Bool)0;
      #line 1278 
      if ((int)ice_sched_find_node_in_subtree(hw,child,node) != 0) 
                                                                   #line 1279 
                                                                   return (_Bool)1;
    }
    #line 1266 
    i = (u8)((int)i + 1);
  }
  #line 1281 
  return (_Bool)0;
}

#line 1294  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_sched.c"
struct ice_sched_node *ice_sched_get_free_qparent(struct ice_port_info *pi, u16 vsi_handle, u8 tc, u8 owner)
{
  #line 1297 
  struct ice_sched_node *vsi_node;
  #line 1298 
  struct ice_vsi_ctx *vsi_ctx;
  #line 1299 
  u16 max_children;
  #line 1300 
  u8 qgrp_layer;
  #line 1297 
  struct ice_sched_node *qgrp_node = (struct ice_sched_node *)0;
  #line 1302 
  qgrp_layer = ice_sched_get_qgrp_layer(pi->hw);
  #line 1303 
  max_children = (pi->hw)->max_children[(int)qgrp_layer];
  #line 1305 
  vsi_ctx = ice_get_vsi_ctx(pi->hw,(unsigned short)((int)vsi_handle));
  #line 1306 
  if (vsi_ctx == (struct ice_vsi_ctx *)0) 
                                          #line 1307 
                                          return (struct ice_sched_node *)0;
  #line 1308 
  vsi_node = vsi_ctx->sched.vsi_node[(int)tc];
  #line 1310 
  if (vsi_node == (struct ice_sched_node *)0) 
                                              #line 1311 
                                              goto lan_q_exit;
  #line 1314 
  qgrp_node = ice_sched_get_first_node(pi,vsi_node,(unsigned char)((int)qgrp_layer));
  #line 1315 
  while (qgrp_node != (struct ice_sched_node *)0) {
    #line 1317 
    if ((int)ice_sched_find_node_in_subtree(pi->hw,vsi_node,qgrp_node) != 0) 
      #line 1318 
      if ((int)((unsigned short)qgrp_node->num_children) < (int)max_children && (int)qgrp_node->owner == (int)owner) 
        #line 1320 
        break;
    #line 1321 
    qgrp_node = qgrp_node->sibling;
  }
  #line 1324 
  lan_q_exit: 
              #line 1324 
  ;
  #line 1325 
  return qgrp_node;
}

#line 1338  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_sched.c"
static struct ice_sched_node *ice_sched_get_vsi_node(struct ice_hw *hw, struct ice_sched_node *tc_node, u16 vsi_handle)
{
  #line 1341 
  struct ice_sched_node *node;
  #line 1342 
  u8 vsi_layer;
  #line 1344 
  vsi_layer = ice_sched_get_vsi_layer(hw);
  #line 1345 
  node = ice_sched_get_first_node(hw->port_info,tc_node,(unsigned char)((int)vsi_layer));
  #line 1348 
  while (node != (struct ice_sched_node *)0) {
    #line 1349 
    if ((int)node->vsi_handle == (int)vsi_handle) 
                                                  #line 1350 
                                                  return node;
    #line 1351 
    node = node->sibling;
  }
  #line 1354 
  return node;
}

#line 1367  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_sched.c"
static void ice_sched_calc_vsi_child_nodes(struct ice_hw *hw, u16 num_qs, u16 *num_nodes)
{
  #line 1370 
  u8 i;
  #line 1370 
  u8 qgl;
  #line 1370 
  u8 vsil;
  #line 1369 
  u16 num = num_qs;
  #line 1372 
  qgl = ice_sched_get_qgrp_layer(hw);
  #line 1373 
  vsil = ice_sched_get_vsi_layer(hw);
  #line 1376 
  i = qgl;
  #line 1376 
  while ((int)i > (int)vsil) {
    #line 1378 
    num = (unsigned short)((((int)num + (int)hw->max_children[(int)i]) + -1) / (int)hw->max_children[(int)i]);
    #line 1381 
    if ((unsigned int)num != 0U) 
                                 #line 1381 
                                 *(num_nodes + (unsigned long)i) = num; else 
                                                                    #line 1381 
                                                                    *(num_nodes + (unsigned long)i) = (unsigned short)1U;
    #line 1376 
    i = (u8)((int)i - 1);
  }
  #line 1383 
  return;
}

#line 1397  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_sched.c"
static enum ice_status ice_sched_add_vsi_child_nodes(struct ice_port_info *pi, u16 vsi_handle, struct ice_sched_node *tc_node, u16 *num_nodes, u8 owner)
{
  #line 1401 
  struct ice_sched_node *parent;
  #line 1401 
  struct ice_sched_node *node;
  #line 1403 
  enum ice_status status;
  #line 1404 
  u32 first_node_teid;
  #line 1406 
  u8 i;
  #line 1406 
  u8 qgl;
  #line 1406 
  u8 vsil;
  #line 1402 
  struct ice_hw *hw = pi->hw;
  #line 1405 
  u16 num_added = (unsigned short)0U;
  #line 1408 
  qgl = ice_sched_get_qgrp_layer(hw);
  #line 1409 
  vsil = ice_sched_get_vsi_layer(hw);
  #line 1410 
  parent = ice_sched_get_vsi_node(hw,tc_node,(unsigned short)((int)vsi_handle));
  #line 1411 
  i = (unsigned char)((unsigned int)vsil + 1U);
  #line 1411 
  while ((int)i <= (int)qgl) {
    #line 1412 
    if (parent == (struct ice_sched_node *)0) 
                                              #line 1413 
                                              return ICE_ERR_CFG;
    #line 1415 
    status = ice_sched_add_nodes_to_layer(pi,tc_node,parent,(unsigned char)((int)i),(unsigned short)((int)*(num_nodes + (unsigned long)i)),& first_node_teid,& num_added);
    #line 1419 
    if (status != ICE_SUCCESS || (int)*(num_nodes + (unsigned long)i) != (int)num_added) 
      #line 1420 
      return ICE_ERR_CFG;
    #line 1425 
    if ((unsigned int)num_added != 0U) {
      #line 1426 
      parent = ice_sched_find_node_by_teid(tc_node,first_node_teid);
      #line 1428 
      node = parent;
      #line 1429 
      while (node != (struct ice_sched_node *)0) {
        #line 1430 
        node->owner = owner;
        #line 1431 
        node = node->sibling;
      }
    }
    else 
         #line 1434 
         parent = *(parent->children);
    #line 1411 
    i = (u8)((int)i + 1);
  }
  #line 1438 
  return ICE_SUCCESS;
}

#line 1452  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_sched.c"
static void ice_sched_calc_vsi_support_nodes(struct ice_hw *hw, struct ice_sched_node *tc_node, u16 *num_nodes)
{
  #line 1455 
  struct ice_sched_node *node;
  #line 1456 
  u8 vsil;
  #line 1457 
  int i;
  #line 1459 
  vsil = ice_sched_get_vsi_layer(hw);
  #line 1460 
  i = (int)vsil;
  #line 1460 
  while ((int)hw->sw_entry_point_layer <= i) {
    #line 1464 
    if ((unsigned int)tc_node->num_children == 0U || (int)vsil == i) 
      #line 1465 
      *(num_nodes + (unsigned long)i) = (u16)((int)*(num_nodes + (unsigned long)i) + 1);
    else {
      #line 1470 
      node = ice_sched_get_first_node(hw->port_info,tc_node,(unsigned char)((int)((unsigned char)i)));
      #line 1473 
      while (node != (struct ice_sched_node *)0) {
        #line 1474 
        if ((int)((unsigned short)node->num_children) < (int)hw->max_children[i]) 
          #line 1475 
          break;
        #line 1476 
        node = node->sibling;
      }
      #line 1483 
      if (node != (struct ice_sched_node *)0) 
                                              #line 1484 
                                              break;
      #line 1486 
      *(num_nodes + (unsigned long)i) = (u16)((int)*(num_nodes + (unsigned long)i) + 1);
    }
    #line 1460 
    i --;
  }
  #line 1488 
  return;
}

#line 1501  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_sched.c"
static enum ice_status ice_sched_add_vsi_support_nodes(struct ice_port_info *pi, u16 vsi_handle, struct ice_sched_node *tc_node, u16 *num_nodes)
{
  #line 1505 
  enum ice_status status;
  #line 1506 
  u32 first_node_teid;
  #line 1508 
  u8 i;
  #line 1508 
  u8 vsil;
  #line 1504 
  struct ice_sched_node *parent = tc_node;
  #line 1507 
  u16 num_added = (unsigned short)0U;
  #line 1510 
  if (pi == (struct ice_port_info *)0) 
                                       #line 1511 
                                       return ICE_ERR_PARAM;
  #line 1513 
  vsil = ice_sched_get_vsi_layer(pi->hw);
  #line 1514 
  i = (pi->hw)->sw_entry_point_layer;
  #line 1514 
  while ((int)i <= (int)vsil) {
    #line 1515 
    status = ice_sched_add_nodes_to_layer(pi,tc_node,parent,(unsigned char)((int)i),(unsigned short)((int)*(num_nodes + (unsigned long)i)),& first_node_teid,& num_added);
    #line 1519 
    if (status != ICE_SUCCESS || (int)*(num_nodes + (unsigned long)i) != (int)num_added) 
      #line 1520 
      return ICE_ERR_CFG;
    #line 1525 
    if ((unsigned int)num_added != 0U) 
                                       #line 1526 
                                       parent = ice_sched_find_node_by_teid(tc_node,first_node_teid); else 
                                                                    #line 1529 
                                                                    parent = *(parent->children);
    #line 1531 
    if (parent == (struct ice_sched_node *)0) 
                                              #line 1532 
                                              return ICE_ERR_CFG;
    #line 1534 
    if ((int)i == (int)vsil) 
                             #line 1535 
                             parent->vsi_handle = vsi_handle;
    #line 1514 
    i = (u8)((int)i + 1);
  }
  #line 1538 
  return ICE_SUCCESS;
}

#line 1550  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_sched.c"
static enum ice_status ice_sched_add_vsi_to_topo(struct ice_port_info *pi, u16 vsi_handle, u8 tc)
{
  #line 1553 
  struct ice_sched_node *tc_node;
  #line 1552 
  u16 num_nodes[9U] = {(unsigned short)0U};
  #line 1554 
  struct ice_hw *hw = pi->hw;
  #line 1556 
  tc_node = ice_sched_get_tc_node(pi,(unsigned char)((int)tc));
  #line 1557 
  if (tc_node == (struct ice_sched_node *)0) 
                                             #line 1558 
                                             return ICE_ERR_PARAM;
  #line 1561 
  ice_sched_calc_vsi_support_nodes(hw,tc_node,(u16 *)(& num_nodes));
  #line 1564 
  return ice_sched_add_vsi_support_nodes(pi,(unsigned short)((int)vsi_handle),
                                      tc_node,(u16 *)(& num_nodes));
}

#line 1579  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_sched.c"
static enum ice_status ice_sched_update_vsi_child_nodes(struct ice_port_info *pi, u16 vsi_handle, u8 tc, u16 new_numqs, u8 owner)
{
  #line 1583 
  struct ice_sched_node *vsi_node;
  #line 1584 
  struct ice_sched_node *tc_node;
  #line 1585 
  struct ice_vsi_ctx *vsi_ctx;
  #line 1588 
  u16 prev_numqs;
  #line 1582 
  u16 new_num_nodes[9U] = {(unsigned short)0U};
  #line 1586 
  enum ice_status status = 0;
  #line 1587 
  struct ice_hw *hw = pi->hw;
  #line 1590 
  tc_node = ice_sched_get_tc_node(pi,(unsigned char)((int)tc));
  #line 1591 
  if (tc_node == (struct ice_sched_node *)0) 
                                             #line 1592 
                                             return ICE_ERR_CFG;
  #line 1594 
  vsi_node = ice_sched_get_vsi_node(hw,tc_node,(unsigned short)((int)vsi_handle));
  #line 1595 
  if (vsi_node == (struct ice_sched_node *)0) 
                                              #line 1596 
                                              return ICE_ERR_CFG;
  #line 1598 
  vsi_ctx = ice_get_vsi_ctx(hw,(unsigned short)((int)vsi_handle));
  #line 1599 
  if (vsi_ctx == (struct ice_vsi_ctx *)0) 
                                          #line 1600 
                                          return ICE_ERR_PARAM;
  #line 1602 
  prev_numqs = vsi_ctx->sched.max_lanq[(int)tc];
  #line 1604 
  if ((int)new_numqs <= (int)prev_numqs) 
                                         #line 1605 
                                         return status;
  #line 1606 
  status = ice_alloc_lan_q_ctx(hw,(unsigned short)((int)vsi_handle),(unsigned char)((int)tc),(unsigned short)((int)new_numqs));
  #line 1607 
  if (status != ICE_SUCCESS) 
                             #line 1608 
                             return status;
  #line 1610 
  if ((unsigned int)new_numqs != 0U) 
                                     #line 1611 
                                     ice_sched_calc_vsi_child_nodes(hw,(unsigned short)((int)new_numqs),(u16 *)(& new_num_nodes));
  #line 1619 
  status = ice_sched_add_vsi_child_nodes(pi,(unsigned short)((int)vsi_handle),tc_node,(u16 *)(& new_num_nodes),(unsigned char)((int)owner));
  #line 1621 
  if (status != ICE_SUCCESS) 
                             #line 1622 
                             return status;
  #line 1623 
  vsi_ctx->sched.max_lanq[(int)tc] = new_numqs;
  #line 1625 
  return ICE_SUCCESS;
}

#line 1642  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_sched.c"
enum ice_status ice_sched_cfg_vsi(struct ice_port_info *pi, u16 vsi_handle, u8 tc, u16 maxqs, u8 owner, bool enable)
{
  #line 1645 
  struct ice_sched_node *vsi_node;
  #line 1645 
  struct ice_sched_node *tc_node;
  #line 1646 
  struct ice_vsi_ctx *vsi_ctx;
  #line 1647 
  enum ice_status status = 0;
  #line 1648 
  struct ice_hw *hw = pi->hw;
  {
    #line 1650 
    bool branch;
    #line 1650 
    struct _ddebug __UNIQUE_ID_ddebug545 = {.modname = (char *)"ice", .function = (char *)"ice_sched_cfg_vsi", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_sched.c", .format = (char *)"add/config VSI %d\n", .lineno = (unsigned int)1650U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 1650 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug545.key.dd_key_false.key,(_Bool)0);
    #line 1650 
    if ((long)((long)((int)branch != 0)) != 0L) {
      #line 1650 
      void *__mptr;
      #line 1650 
      ;
      #line 1650 
      __mptr = (void *)pi->hw;
      #line 1650 
      __dynamic_dev_dbg(& __UNIQUE_ID_ddebug545,& (((struct ice_pf *)(__mptr + 18446744073709549512U))->pdev)->dev,(char *)"add/config VSI %d\n",(int)vsi_handle);
    }
  }
  #line 1651 
  tc_node = ice_sched_get_tc_node(pi,(unsigned char)((int)tc));
  #line 1652 
  if (tc_node == (struct ice_sched_node *)0) 
                                             #line 1653 
                                             return ICE_ERR_PARAM;
  #line 1654 
  vsi_ctx = ice_get_vsi_ctx(hw,(unsigned short)((int)vsi_handle));
  #line 1655 
  if (vsi_ctx == (struct ice_vsi_ctx *)0) 
                                          #line 1656 
                                          return ICE_ERR_PARAM;
  #line 1657 
  vsi_node = ice_sched_get_vsi_node(hw,tc_node,(unsigned short)((int)vsi_handle));
  #line 1660 
  if (! enable) {
    #line 1661 
    if (vsi_node != (struct ice_sched_node *)0 && (unsigned int)vsi_node->in_use != 0U) {
      #line 1662 
      u32 teid = vsi_node->info.node_teid;
      #line 1664 
      status = ice_sched_suspend_resume_elems(hw,(unsigned char)1,& teid,(_Bool)1);
      #line 1666 
      if (status == ICE_SUCCESS) 
                                 #line 1667 
                                 vsi_node->in_use = (unsigned char)0U;
    }
    #line 1669 
    return status;
  }
  #line 1673 
  if (vsi_node == (struct ice_sched_node *)0) {
    #line 1674 
    status = ice_sched_add_vsi_to_topo(pi,(unsigned short)((int)vsi_handle),(unsigned char)((int)tc));
    #line 1675 
    if (status != ICE_SUCCESS) 
                               #line 1676 
                               return status;
    #line 1678 
    vsi_node = ice_sched_get_vsi_node(hw,tc_node,(unsigned short)((int)vsi_handle));
    #line 1679 
    if (vsi_node == (struct ice_sched_node *)0) 
                                                #line 1680 
                                                return ICE_ERR_CFG;
    #line 1682 
    vsi_ctx->sched.vsi_node[(int)tc] = vsi_node;
    #line 1683 
    vsi_node->in_use = (unsigned char)1U;
    #line 1688 
    vsi_ctx->sched.max_lanq[(int)tc] = (unsigned short)0U;
  }
  #line 1692 
  status = ice_sched_update_vsi_child_nodes(pi,(unsigned short)((int)vsi_handle),(unsigned char)((int)tc),(unsigned short)((int)maxqs),(unsigned char)((int)owner));
  #line 1694 
  if (status != ICE_SUCCESS) 
                             #line 1695 
                             return status;
  #line 1698 
  if ((unsigned int)vsi_node->in_use == 0U) {
    #line 1699 
    u32 teid_0 = vsi_node->info.node_teid;
    #line 1701 
    status = ice_sched_suspend_resume_elems(hw,(unsigned char)1,& teid_0,(_Bool)0);
    #line 1702 
    if (status == ICE_SUCCESS) 
                               #line 1703 
                               vsi_node->in_use = (unsigned char)1U;
  }
  #line 1706 
  return status;
}

#line 1718  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_sched.c"
static void ice_sched_rm_agg_vsi_info(struct ice_port_info *pi, u16 vsi_handle)
{
  #line 1723 
  void *__mptr;
  #line 1723 
  void *__mptr_0;
  #line 1720 
  struct ice_sched_agg_info *agg_info;
  #line 1721 
  struct ice_sched_agg_info *atmp;
  #line 1723 
  __mptr = (void *)(pi->hw)->agg_list.next;
  #line 1723 
  agg_info = ((struct ice_sched_agg_info *)(__mptr + 18446744073709551600U));
  #line 1723 
  __mptr_0 = (void *)agg_info->list_entry.next;
  #line 1724 
  atmp = ((struct ice_sched_agg_info *)(__mptr_0 + 18446744073709551600U));
  #line 1723 
  while (& agg_info->list_entry != & (pi->hw)->agg_list) {
    #line 1723 
    void *__mptr_1;
    {
      #line 1728 
      void *__mptr_2;
      #line 1728 
      void *__mptr_3;
      #line 1725 
      struct ice_sched_agg_vsi_info *agg_vsi_info;
      #line 1726 
      struct ice_sched_agg_vsi_info *vtmp;
      #line 1728 
      __mptr_2 = (void *)agg_info->agg_vsi_list.next;
      #line 1728 
      agg_vsi_info = ((struct ice_sched_agg_vsi_info *)__mptr_2);
      #line 1728 
      __mptr_3 = (void *)agg_vsi_info->list_entry.next;
      #line 1729 
      vtmp = ((struct ice_sched_agg_vsi_info *)__mptr_3);
      #line 1728 
      while ((void *)agg_vsi_info != (void *)agg_info) {
        #line 1728 
        void *__mptr_4;
        #line 1730 
        if ((int)agg_vsi_info->vsi_handle == (int)vsi_handle) {
          #line 1732 
          void *__mptr_5;
          #line 1731 
          list_del_2(& agg_vsi_info->list_entry);
          #line 1732 
          ;
          #line 1732 
          __mptr_5 = (void *)pi->hw;
          #line 1732 
          devm_kfree(& (((struct ice_pf *)(__mptr_5 + 18446744073709549512U))->pdev)->dev,(void *)agg_vsi_info);
          #line 1734 
          return;
        }
        #line 1728 
        agg_vsi_info = vtmp;
        #line 1728 
        __mptr_4 = (void *)vtmp->list_entry.next;
        #line 1728 
        vtmp = ((struct ice_sched_agg_vsi_info *)__mptr_4);
      }
    }
    #line 1723 
    agg_info = atmp;
    #line 1723 
    __mptr_1 = (void *)atmp->list_entry.next;
    #line 1723 
    atmp = ((struct ice_sched_agg_info *)(__mptr_1 + 18446744073709551600U));
  }
  #line 1737 
  return;
}

#line 1745  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_sched.c"
static bool ice_sched_is_leaf_node_present(struct ice_sched_node *node)
{
  #line 1747 
  u8 i;
  #line 1749 
  i = (unsigned char)0U;
  #line 1749 
  while ((int)node->num_children > (int)i) {
    #line 1750 
    if ((int)ice_sched_is_leaf_node_present(*(node->children + (unsigned long)i)) != 0) 
      #line 1751 
      return (_Bool)1;
    #line 1749 
    i = (u8)((int)i + 1);
  }
  #line 1753 
  return (_Bool)((unsigned int)node->info.data.elem_type == 5U);
}

#line 1766  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_sched.c"
static enum ice_status ice_sched_rm_vsi_cfg(struct ice_port_info *pi, u16 vsi_handle, u8 owner)
{
  #line 1769 
  struct ice_vsi_ctx *vsi_ctx;
  #line 1770 
  u8 i;
  #line 1768 
  enum ice_status status = -1;
  {
    #line 1772 
    bool branch;
    #line 1772 
    struct _ddebug __UNIQUE_ID_ddebug546 = {.modname = (char *)"ice", .function = (char *)"ice_sched_rm_vsi_cfg", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_sched.c", .format = (char *)"removing VSI %d\n", .lineno = (unsigned int)1772U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 1772 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug546.key.dd_key_false.key,(_Bool)0);
    #line 1772 
    if ((long)((long)((int)branch != 0)) != 0L) {
      #line 1772 
      void *__mptr;
      #line 1772 
      ;
      #line 1772 
      __mptr = (void *)pi->hw;
      #line 1772 
      __dynamic_dev_dbg(& __UNIQUE_ID_ddebug546,& (((struct ice_pf *)(__mptr + 18446744073709549512U))->pdev)->dev,(char *)"removing VSI %d\n",(int)vsi_handle);
    }
  }
  #line 1773 
  if (! ice_is_vsi_valid(pi->hw,(unsigned short)((int)vsi_handle))) 
                                                                    #line 1774 
                                                                    return status;
  #line 1775 
  cif_mutex_lock_sched_lock_of_ice_port_info_1(& pi->sched_lock);
  #line 1776 
  vsi_ctx = ice_get_vsi_ctx(pi->hw,(unsigned short)((int)vsi_handle));
  #line 1777 
  if (vsi_ctx == (struct ice_vsi_ctx *)0) 
                                          #line 1778 
                                          goto exit_sched_rm_vsi_cfg;
  #line 1780 
  i = (unsigned char)0U;
  #line 1780 
  while ((unsigned int)i <= 7U) {
    {
      #line 1781 
      struct ice_sched_node *vsi_node;
      #line 1781 
      struct ice_sched_node *tc_node;
      #line 1782 
      u8 j = (unsigned char)0U;
      #line 1784 
      tc_node = ice_sched_get_tc_node(pi,(unsigned char)((int)i));
      #line 1785 
      if (tc_node == (struct ice_sched_node *)0) 
                                                 #line 1786 
                                                 goto __Cont;
      #line 1788 
      vsi_node = ice_sched_get_vsi_node(pi->hw,tc_node,(unsigned short)((int)vsi_handle));
      #line 1789 
      if (vsi_node == (struct ice_sched_node *)0) 
                                                  #line 1790 
                                                  goto __Cont;
      #line 1792 
      if ((int)ice_sched_is_leaf_node_present(vsi_node) != 0) {
        {
          #line 1793 
          bool branch_0;
          #line 1793 
          struct _ddebug __UNIQUE_ID_ddebug547 = {.modname = (char *)"ice", .function = (char *)"ice_sched_rm_vsi_cfg", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_sched.c", .format = (char *)"VSI has leaf nodes in TC %d\n", .lineno = (unsigned int)1793U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
          #line 1793 
          branch_0 = arch_static_branch(& __UNIQUE_ID_ddebug547.key.dd_key_false.key,(_Bool)0);
          #line 1793 
          if ((long)((long)((int)branch_0 != 0)) != 0L) {
            #line 1793 
            void *__mptr_0;
            #line 1793 
            ;
            #line 1793 
            __mptr_0 = (void *)pi->hw;
            #line 1793 
            __dynamic_dev_dbg(& __UNIQUE_ID_ddebug547,& (((struct ice_pf *)(__mptr_0 + 18446744073709549512U))->pdev)->dev,(char *)"VSI has leaf nodes in TC %d\n",(int)i);
          }
        }
        #line 1795 
        status = ICE_ERR_IN_USE;
        #line 1796 
        goto exit_sched_rm_vsi_cfg;
      }
      #line 1798 
      while ((int)vsi_node->num_children > (int)j) 
        #line 1799 
        if ((int)(*(vsi_node->children + (unsigned long)j))->owner == (int)owner) {
          #line 1800 
          ice_free_sched_node(pi,*(vsi_node->children + (unsigned long)j));
          #line 1805 
          j = (unsigned char)0U;
        }
        else 
             #line 1807 
             j = (u8)((int)j + 1);
      #line 1811 
      if ((unsigned int)vsi_node->num_children == 0U) {
        #line 1812 
        ice_free_sched_node(pi,vsi_node);
        #line 1813 
        vsi_ctx->sched.vsi_node[(int)i] = (struct ice_sched_node *)0;
        #line 1816 
        ice_sched_rm_agg_vsi_info(pi,(unsigned short)((int)vsi_handle));
      }
      #line 1818 
      if ((unsigned int)owner == 0U) 
                                     #line 1819 
                                     vsi_ctx->sched.max_lanq[(int)i] = (unsigned short)0U;
    }
    #line 1780 
    __Cont: 
            #line 1780 
    i = (u8)((int)i + 1);
  }
  #line 1821 
  status = ICE_SUCCESS;
  #line 1823 
  exit_sched_rm_vsi_cfg: 
                         #line 1823 
  ;
  #line 1824 
  cif_mutex_unlock_sched_lock_of_ice_port_info_1(& pi->sched_lock);
  #line 1825 
  return status;
}

#line 1836  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_sched.c"
enum ice_status ice_rm_vsi_lan_cfg(struct ice_port_info *pi, u16 vsi_handle)
{
  #line 1838 
  return ice_sched_rm_vsi_cfg(pi,(unsigned short)((int)vsi_handle),
                           (unsigned char)0);
}

#line 1848  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_sched.c"
static void ice_sched_rm_unused_rl_prof(struct ice_port_info *pi)
{
  #line 1850 
  u16 ln;
  #line 1852 
  ln = (unsigned short)0U;
  #line 1852 
  while ((int)(pi->hw)->num_tx_sched_layers > (int)ln) {
    {
      #line 1856 
      void *__mptr_0;
      #line 1856 
      void *__mptr;
      #line 1853 
      struct ice_aqc_rl_profile_info *rl_prof_elem;
      #line 1854 
      struct ice_aqc_rl_profile_info *rl_prof_tmp;
      #line 1856 
      __mptr = (void *)pi->rl_prof_list[(int)ln].next;
      #line 1856 
      rl_prof_elem = ((struct ice_aqc_rl_profile_info *)(__mptr + 18446744073709551600U));
      #line 1856 
      __mptr_0 = (void *)rl_prof_elem->list_entry.next;
      #line 1857 
      rl_prof_tmp = ((struct ice_aqc_rl_profile_info *)(__mptr_0 + 18446744073709551600U));
      #line 1856 
      while (& rl_prof_elem->list_entry != & pi->rl_prof_list[(int)ln]) {
        #line 1856 
        void *__mptr_1;
        #line 1858 
        if (ice_sched_del_rl_profile(pi->hw,rl_prof_elem) == ICE_SUCCESS) {
          #line 1859 
          bool branch;
          #line 1859 
          struct _ddebug __UNIQUE_ID_ddebug548 = {.modname = (char *)"ice", .function = (char *)"ice_sched_rm_unused_rl_prof", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_sched.c", .format = (char *)"Removed rl profile\n", .lineno = (unsigned int)1859U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
          #line 1859 
          branch = arch_static_branch(& __UNIQUE_ID_ddebug548.key.dd_key_false.key,(_Bool)0);
          #line 1859 
          if ((long)((long)((int)branch != 0)) != 0L) {
            #line 1859 
            void *__mptr_2;
            #line 1859 
            __mptr_2 = (void *)pi->hw;
            #line 1859 
            __dynamic_dev_dbg(& __UNIQUE_ID_ddebug548,& (((struct ice_pf *)(__mptr_2 + 18446744073709549512U))->pdev)->dev,(char *)"Removed rl profile\n");
          }
        }
        #line 1856 
        rl_prof_elem = rl_prof_tmp;
        #line 1856 
        __mptr_1 = (void *)rl_prof_tmp->list_entry.next;
        #line 1856 
        rl_prof_tmp = ((struct ice_aqc_rl_profile_info *)(__mptr_1 + 18446744073709551600U));
      }
    }
    #line 1852 
    ln = (u16)((int)ln + 1);
  }
  #line 1862 
  return;
}

#line 1877  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_sched.c"
static enum ice_status ice_sched_update_elem(struct ice_hw *hw, struct ice_sched_node *node, struct ice_aqc_txsched_elem_data *info)
{
  #line 1880 
  struct ice_aqc_conf_elem buf;
  #line 1881 
  enum ice_status status;
  #line 1882 
  u16 elem_cfgd = (unsigned short)0U;
  #line 1883 
  u16 num_elems = (unsigned short)1U;
  #line 1885 
  buf.generic[0] = *info;
  #line 1887 
  buf.generic[0].parent_teid = 0U;
  #line 1889 
  buf.generic[0].data.elem_type = (unsigned char)0U;
  #line 1891 
  buf.generic[0].data.flags = (unsigned char)0U;
  #line 1895 
  status = ice_aq_cfg_sched_elems(hw,(unsigned short)((int)num_elems),& buf,(unsigned short)24,& elem_cfgd,(struct ice_sq_cd *)0);
  #line 1897 
  if (status != ICE_SUCCESS || (int)elem_cfgd != (int)num_elems) {
    {
      #line 1898 
      bool branch;
      #line 1898 
      struct _ddebug __UNIQUE_ID_ddebug549 = {.modname = (char *)"ice", .function = (char *)"ice_sched_update_elem", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_sched.c", .format = (char *)"Config sched elem error\n", .lineno = (unsigned int)1898U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 1898 
      branch = arch_static_branch(& __UNIQUE_ID_ddebug549.key.dd_key_false.key,(_Bool)0);
      #line 1898 
      if ((long)((long)((int)branch != 0)) != 0L) {
        #line 1898 
        void *__mptr;
        #line 1898 
        __mptr = (void *)hw;
        #line 1898 
        __dynamic_dev_dbg(& __UNIQUE_ID_ddebug549,& (((struct ice_pf *)(__mptr + 18446744073709549512U))->pdev)->dev,(char *)"Config sched elem error\n");
      }
    }
    #line 1899 
    return ICE_ERR_CFG;
  }
  #line 1905 
  node->info.data = info->data;
  #line 1906 
  return status;
}

#line 1919  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_sched.c"
static enum ice_status ice_sched_cfg_node_bw_alloc(struct ice_hw *hw, struct ice_sched_node *node, enum ice_rl_type rl_type, u8 bw_alloc)
{
  #line 1922 
  struct ice_aqc_txsched_elem_data buf;
  #line 1923 
  struct ice_aqc_txsched_elem *data;
  #line 1924 
  enum ice_status status;
  #line 1926 
  buf = node->info;
  #line 1927 
  data = & buf.data;
  #line 1928 
  if (rl_type == (unsigned int)ICE_MIN_BW) {
    #line 1929 
    data->valid_sections = (unsigned char)((unsigned int)data->valid_sections | 2U);
    #line 1930 
    data->cir_bw.bw_alloc = (unsigned short)bw_alloc;
  }
  else 
    #line 1931 
    if (rl_type == (unsigned int)ICE_MAX_BW) {
      #line 1932 
      data->valid_sections = (unsigned char)((unsigned int)data->valid_sections | 4U);
      #line 1933 
      data->eir_bw.bw_alloc = (unsigned short)bw_alloc;
    }
    else 
         #line 1935 
         return ICE_ERR_PARAM;
  #line 1939 
  status = ice_sched_update_elem(hw,node,& buf);
  #line 1940 
  return status;
}

#line 1951  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_sched.c"
static void ice_set_clear_cir_bw(struct ice_bw_type_info *bw_t_info, u32 bw)
{
  #line 1953 
  if (bw == 4294967295U) {
    #line 1954 
    cif_clear_bit_9(1L,(unsigned long *)(& bw_t_info->bw_t_bitmap));
    #line 1955 
    bw_t_info->cir_bw.bw = 0U;
  }
  else {
    #line 1958 
    cif_set_bit_9(1L,(unsigned long *)(& bw_t_info->bw_t_bitmap));
    #line 1959 
    bw_t_info->cir_bw.bw = bw;
  }
  #line 1961 
  return;
}

#line 1971  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_sched.c"
static void ice_set_clear_eir_bw(struct ice_bw_type_info *bw_t_info, u32 bw)
{
  #line 1973 
  if (bw == 4294967295U) {
    #line 1974 
    cif_clear_bit_9(3L,(unsigned long *)(& bw_t_info->bw_t_bitmap));
    #line 1975 
    bw_t_info->eir_bw.bw = 0U;
  }
  else {
    #line 1981 
    cif_clear_bit_9(5L,(unsigned long *)(& bw_t_info->bw_t_bitmap));
    #line 1982 
    bw_t_info->shared_bw = 0U;
    #line 1984 
    cif_set_bit_9(3L,(unsigned long *)(& bw_t_info->bw_t_bitmap));
    #line 1985 
    bw_t_info->eir_bw.bw = bw;
  }
  #line 1987 
  return;
}

#line 1997  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_sched.c"
static void ice_set_clear_shared_bw(struct ice_bw_type_info *bw_t_info, u32 bw)
{
  #line 1999 
  if (bw == 4294967295U) {
    #line 2000 
    cif_clear_bit_9(5L,(unsigned long *)(& bw_t_info->bw_t_bitmap));
    #line 2001 
    bw_t_info->shared_bw = 0U;
  }
  else {
    #line 2007 
    cif_clear_bit_9(3L,(unsigned long *)(& bw_t_info->bw_t_bitmap));
    #line 2008 
    bw_t_info->eir_bw.bw = 0U;
    #line 2010 
    cif_set_bit_9(5L,(unsigned long *)(& bw_t_info->bw_t_bitmap));
    #line 2011 
    bw_t_info->shared_bw = bw;
  }
  #line 2013 
  return;
}

#line 2021  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_sched.c"
static u16 ice_sched_calc_wakeup(s32 bw)
{
  #line 2023 
  s64 bytes_per_sec;
  #line 2023 
  s64 wakeup_int;
  #line 2023 
  s64 wakeup_a;
  #line 2023 
  s64 wakeup_b;
  #line 2023 
  s64 wakeup_f;
  #line 2024 
  s32 wakeup_f_int;
  #line 2025 
  u16 wakeup = (unsigned short)0U;
  #line 2028 
  bytes_per_sec = div64_s64((long long)bw * 1000LL,8LL);
  #line 2029 
  wakeup_int = div64_s64(446000000LL,bytes_per_sec);
  #line 2030 
  if (wakeup_int > 63LL) 
                         #line 2031 
                         wakeup = (unsigned short)(wakeup_int | (long long)(-32768));
  else {
    #line 2036 
    wakeup_b = wakeup_int * 10000LL;
    #line 2037 
    wakeup_a = div64_s64(4460000000000LL,bytes_per_sec);
    #line 2042 
    wakeup_f = wakeup_a - wakeup_b;
    #line 2045 
    ;
    #line 2045 
    if (div64_s64(10000LL,2LL) < wakeup_f) 
                                           #line 2046 
                                           wakeup_f ++;
    #line 2048 
    wakeup_f_int = (int)div64_s64(wakeup_f * 512LL,10000LL);
    #line 2050 
    wakeup = (unsigned short)(((int)((unsigned short)wakeup_int) << 9U) | (int)wakeup);
    #line 2051 
    wakeup = (unsigned short)((wakeup_f_int & 511) | (int)wakeup);
  }
  #line 2054 
  return wakeup;
}

#line 2065  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_sched.c"
static enum ice_status ice_sched_bw_to_rl_profile(u32 bw, struct ice_aqc_rl_profile_elem *profile)
{
  #line 2068 
  s64 bytes_per_sec;
  #line 2068 
  s64 ts_rate;
  #line 2068 
  s64 mv_tmp;
  #line 2072 
  s32 i;
  #line 2067 
  enum ice_status status = -1;
  #line 2069 
  bool found = (_Bool)0;
  #line 2070 
  s32 encode = 0;
  #line 2071 
  s64 mv = 0LL;
  #line 2075 
  if (bw + 4294966796U > 99999500U) 
                                    #line 2076 
                                    return status;
  #line 2079 
  bytes_per_sec = div64_s64((long long)bw * 1000LL,8LL);
  #line 2082 
  i = 0;
  #line 2082 
  while (i <= 63) {
    {
      #line 2083 
      u64 pow_result = 1ULL << i;
      #line 2085 
      ts_rate = div64_s64(446000000LL,(long long)(pow_result * 32ULL));
      #line 2087 
      if (ts_rate <= 0LL) 
                          #line 2088 
                          goto __Cont;
      #line 2091 
      mv_tmp = div64_s64(bytes_per_sec * 10000LL,ts_rate);
      #line 2095 
      mv = (long long)round_up_64bit((unsigned long long)mv_tmp,10000U);
      #line 2100 
      if (mv > 128LL) {
        #line 2101 
        encode = i;
        #line 2102 
        found = (_Bool)1;
        #line 2103 
        break;
      }
    }
    #line 2082 
    __Cont: 
            #line 2082 
    i ++;
  }
  #line 2106 
  if ((int)found != 0) {
    #line 2107 
    u16 wm;
    #line 2109 
    wm = ice_sched_calc_wakeup((int)bw);
    #line 2110 
    profile->rl_multiply = (unsigned short)mv;
    #line 2111 
    profile->wake_up_calc = wm;
    #line 2112 
    profile->rl_encode = (unsigned short)encode;
    #line 2113 
    status = ICE_SUCCESS;
  }
  else 
       #line 2115 
       status = ICE_ERR_DOES_NOT_EXIST;
  #line 2118 
  return status;
}

#line 2135  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_sched.c"
static struct ice_aqc_rl_profile_info *ice_sched_add_rl_profile(struct ice_port_info *pi, enum ice_rl_type rl_type, u32 bw, u8 layer_num)
{
  #line 2172 
  void *__mptr_1;
  #line 2202 
  void *__mptr_2;
  #line 2164 
  void *__mptr;
  #line 2138 
  struct ice_aqc_rl_profile_generic_elem *buf;
  #line 2139 
  struct ice_aqc_rl_profile_info *rl_prof_elem;
  #line 2141 
  enum ice_status status;
  #line 2142 
  struct ice_hw *hw;
  #line 2143 
  u8 profile_type;
  #line 2140 
  u16 profiles_added = (unsigned short)0U;
  #line 2140 
  u16 num_profiles = (unsigned short)1U;
  #line 2145 
  if ((unsigned int)layer_num > 8U) 
                                    #line 2146 
                                    return (struct ice_aqc_rl_profile_info *)0;
  #line 2147 
  switch ((unsigned int)rl_type) {
    #line 2148 
    case (unsigned int)1: 
                          #line 2148 
    ;
    #line 2149 
    profile_type = (unsigned char)0U;
    #line 2150 
    break;
    #line 2151 
    case (unsigned int)2: 
                          #line 2151 
    ;
    #line 2152 
    profile_type = (unsigned char)1U;
    #line 2153 
    break;
    #line 2154 
    case (unsigned int)3: 
                          #line 2154 
    ;
    #line 2155 
    profile_type = (unsigned char)2U;
    #line 2156 
    break;
    #line 2157 
    default: 
             #line 2157 
    ;
    #line 2158 
    return (struct ice_aqc_rl_profile_info *)0;
  }
  #line 2161 
  if (pi == (struct ice_port_info *)0) 
                                       #line 2162 
                                       return (struct ice_aqc_rl_profile_info *)0;
  #line 2163 
  hw = pi->hw;
  #line 2164 
  __mptr = (void *)pi->rl_prof_list[(int)layer_num].next;
  #line 2164 
  rl_prof_elem = ((struct ice_aqc_rl_profile_info *)(__mptr + 18446744073709551600U));
  #line 2164 
  while (& rl_prof_elem->list_entry != & pi->rl_prof_list[(int)layer_num]) {
    #line 2164 
    void *__mptr_0;
    #line 2166 
    if ((int)rl_prof_elem->profile.flags == (int)profile_type && rl_prof_elem->bw == bw) 
      #line 2169 
      return rl_prof_elem;
    #line 2164 
    __mptr_0 = (void *)rl_prof_elem->list_entry.next;
    #line 2164 
    rl_prof_elem = ((struct ice_aqc_rl_profile_info *)(__mptr_0 + 18446744073709551600U));
  }
  #line 2172 
  __mptr_1 = (void *)hw;
  #line 2172 
  rl_prof_elem = (struct ice_aqc_rl_profile_info *)cif_devm_kzalloc_7(& (((struct ice_pf *)(__mptr_1 + 18446744073709549512U))->pdev)->dev,
                           40UL,3264U);
  #line 2175 
  if (rl_prof_elem == (struct ice_aqc_rl_profile_info *)0) 
                                                           #line 2176 
                                                           return (struct ice_aqc_rl_profile_info *)0;
  #line 2178 
  status = ice_sched_bw_to_rl_profile(bw,& rl_prof_elem->profile);
  #line 2179 
  if (status != ICE_SUCCESS) 
                             #line 2180 
                             goto exit_add_rl_prof;
  #line 2182 
  rl_prof_elem->bw = bw;
  #line 2184 
  rl_prof_elem->profile.level = (unsigned char)((unsigned int)layer_num + 1U);
  #line 2185 
  rl_prof_elem->profile.flags = profile_type;
  #line 2186 
  rl_prof_elem->profile.max_burst_size = hw->max_burst_size;
  #line 2189 
  buf = (struct ice_aqc_rl_profile_generic_elem *)(& rl_prof_elem->profile);
  #line 2191 
  status = ice_aq_add_rl_profile(hw,(unsigned short)((int)num_profiles),buf,(unsigned short)12,& profiles_added,(struct ice_sq_cd *)0);
  #line 2193 
  if (status != ICE_SUCCESS || (int)profiles_added != (int)num_profiles) 
    #line 2194 
    goto exit_add_rl_prof;
  #line 2197 
  rl_prof_elem->prof_id_ref = (unsigned short)0U;
  #line 2198 
  list_add_1(& rl_prof_elem->list_entry,& pi->rl_prof_list[(int)layer_num]);
  #line 2199 
  return rl_prof_elem;
  #line 2201 
  exit_add_rl_prof: 
                    #line 2201 
  ;
  #line 2202 
  ;
  #line 2202 
  __mptr_2 = (void *)hw;
  #line 2202 
  devm_kfree(& (((struct ice_pf *)(__mptr_2 + 18446744073709549512U))->pdev)->dev,(void *)rl_prof_elem);
  #line 2203 
  return (struct ice_aqc_rl_profile_info *)0;
}

#line 2216  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_sched.c"
static enum ice_status ice_sched_cfg_node_bw_lmt(struct ice_hw *hw, struct ice_sched_node *node, enum ice_rl_type rl_type, u16 rl_prof_id)
{
  #line 2219 
  struct ice_aqc_txsched_elem_data buf;
  #line 2220 
  struct ice_aqc_txsched_elem *data;
  #line 2222 
  buf = node->info;
  #line 2223 
  data = & buf.data;
  #line 2224 
  switch ((unsigned int)rl_type) {
    #line 2225 
    case (unsigned int)1: 
                          #line 2225 
    ;
    #line 2226 
    data->valid_sections = (unsigned char)((unsigned int)data->valid_sections | 2U);
    #line 2227 
    data->cir_bw.bw_profile_idx = rl_prof_id;
    #line 2228 
    break;
    #line 2229 
    case (unsigned int)2: 
                          #line 2229 
    ;
    #line 2233 
    if (((unsigned long)data->valid_sections & 8UL) != 0UL) 
                                                            #line 2234 
                                                            return ICE_ERR_CFG;
    #line 2235 
    data->valid_sections = (unsigned char)((unsigned int)data->valid_sections | 4U);
    #line 2236 
    data->eir_bw.bw_profile_idx = rl_prof_id;
    #line 2237 
    break;
    #line 2238 
    case (unsigned int)3: 
                          #line 2238 
    ;
    #line 2240 
    if ((unsigned int)rl_prof_id == 65535U) {
      #line 2242 
      data->valid_sections = (unsigned char)((unsigned int)data->valid_sections & 247U);
      #line 2243 
      data->srl_id = (unsigned short)0U;
      #line 2246 
      data->valid_sections = (unsigned char)((unsigned int)data->valid_sections | 4U);
      #line 2247 
      data->eir_bw.bw_profile_idx = (unsigned short)0U;
      #line 2249 
      break;
    }
    #line 2254 
    if (((unsigned long)data->valid_sections & 4UL) != 0UL && (unsigned int)data->eir_bw.bw_profile_idx != 0U) 
      #line 2257 
      return ICE_ERR_CFG;
    #line 2259 
    data->valid_sections = (unsigned char)((unsigned int)data->valid_sections & 251U);
    #line 2261 
    data->valid_sections = (unsigned char)((unsigned int)data->valid_sections | 8U);
    #line 2262 
    data->srl_id = rl_prof_id;
    #line 2263 
    break;
    #line 2264 
    default: 
             #line 2264 
    ;
    #line 2266 
    return ICE_ERR_PARAM;
  }
  #line 2270 
  return ice_sched_update_elem(hw,node,& buf);
}

#line 2282  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_sched.c"
static u16 ice_sched_get_node_rl_prof_id(struct ice_sched_node *node, enum ice_rl_type rl_type)
{
  #line 2286 
  struct ice_aqc_txsched_elem *data;
  #line 2285 
  u16 rl_prof_id = (unsigned short)65535U;
  #line 2288 
  data = & node->info.data;
  #line 2289 
  switch ((unsigned int)rl_type) {
    #line 2290 
    case (unsigned int)1: 
                          #line 2290 
    ;
    #line 2291 
    if (((unsigned long)data->valid_sections & 2UL) != 0UL) 
                                                            #line 2292 
                                                            rl_prof_id = data->cir_bw.bw_profile_idx;
    #line 2293 
    break;
    #line 2294 
    case (unsigned int)2: 
                          #line 2294 
    ;
    #line 2295 
    if (((unsigned long)data->valid_sections & 4UL) != 0UL) 
                                                            #line 2296 
                                                            rl_prof_id = data->eir_bw.bw_profile_idx;
    #line 2297 
    break;
    #line 2298 
    case (unsigned int)3: 
                          #line 2298 
    ;
    #line 2299 
    if (((unsigned long)data->valid_sections & 8UL) != 0UL) 
                                                            #line 2300 
                                                            rl_prof_id = data->srl_id;
    #line 2301 
    break;
    #line 2302 
    default: 
             #line 2302 
    ;
    #line 2303 
    break;
  }
  #line 2306 
  return rl_prof_id;
}

#line 2318  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_sched.c"
static u8 ice_sched_get_rl_prof_layer(struct ice_port_info *pi, enum ice_rl_type rl_type, u8 layer_index)
{
  #line 2321 
  struct ice_hw *hw = pi->hw;
  #line 2323 
  if ((int)((unsigned short)layer_index) >= (int)hw->num_tx_sched_layers) 
    #line 2324 
    return (unsigned char)255U;
  #line 2325 
  switch ((unsigned int)rl_type) {
    #line 2326 
    case (unsigned int)1: 
                          #line 2326 
    ;
    #line 2327 
    if ((unsigned int)(hw->layer_info + (unsigned long)layer_index)->max_cir_rl_profiles != 0U) 
      #line 2328 
      return layer_index;
    #line 2329 
    break;
    #line 2330 
    case (unsigned int)2: 
                          #line 2330 
    ;
    #line 2331 
    if ((unsigned int)(hw->layer_info + (unsigned long)layer_index)->max_eir_rl_profiles != 0U) 
      #line 2332 
      return layer_index;
    #line 2333 
    break;
    #line 2334 
    case (unsigned int)3: 
                          #line 2334 
    ;
    #line 2338 
    if ((unsigned int)(hw->layer_info + (unsigned long)layer_index)->max_srl_profiles != 0U) 
      #line 2339 
      return layer_index;
    else 
      #line 2340 
      if ((int)layer_index < (int)hw->num_tx_sched_layers + -1 && (unsigned int)(hw->layer_info + ((unsigned long)layer_index + (unsigned long)1U))->max_srl_profiles != 0U) 
        #line 2342 
        return (unsigned char)((unsigned int)layer_index + 1U);
      else 
        #line 2343 
        if ((unsigned int)layer_index != 0U && (unsigned int)(hw->layer_info + ((unsigned long)layer_index + 18446744073709551615U))->max_srl_profiles != 0U) 
          #line 2345 
          return (unsigned char)((unsigned int)layer_index + 255U);
    #line 2346 
    break;
    #line 2347 
    default: 
             #line 2347 
    ;
    #line 2348 
    break;
  }
  #line 2350 
  return (unsigned char)255U;
}

#line 2362  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_sched.c"
static struct ice_sched_node *ice_sched_get_srl_node(struct ice_sched_node *node, u8 srl_layer)
{
  #line 2364 
  if ((int)node->tx_sched_layer < (int)srl_layer) 
                                                  #line 2365 
                                                  return *(node->children);
  else 
    #line 2366 
    if ((int)node->tx_sched_layer > (int)srl_layer) 
                                                    #line 2370 
                                                    return node->parent; else 
                                                                    #line 2372 
                                                                    return node;
}

#line 2387  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_sched.c"
static enum ice_status ice_sched_rm_rl_profile(struct ice_port_info *pi, u8 layer_num, u8 profile_type, u16 profile_id)
{
  #line 2396 
  void *__mptr;
  #line 2390 
  struct ice_aqc_rl_profile_info *rl_prof_elem;
  #line 2391 
  enum ice_status status = 0;
  #line 2393 
  if ((unsigned int)layer_num > 8U) 
                                    #line 2394 
                                    return ICE_ERR_PARAM;
  #line 2396 
  __mptr = (void *)pi->rl_prof_list[(int)layer_num].next;
  #line 2396 
  rl_prof_elem = ((struct ice_aqc_rl_profile_info *)(__mptr + 18446744073709551600U));
  #line 2396 
  while (& rl_prof_elem->list_entry != & pi->rl_prof_list[(int)layer_num]) {
    #line 2396 
    void *__mptr_0;
    #line 2398 
    if ((int)rl_prof_elem->profile.flags == (int)profile_type && (int)rl_prof_elem->profile.profile_id == (int)profile_id) {
      #line 2401 
      if ((unsigned int)rl_prof_elem->prof_id_ref != 0U) 
                                                         #line 2402 
                                                         rl_prof_elem->prof_id_ref = (u16)((int)rl_prof_elem->prof_id_ref - 1);
      #line 2405 
      status = ice_sched_del_rl_profile(pi->hw,rl_prof_elem);
      #line 2406 
      if (status != ICE_SUCCESS && status != ICE_ERR_IN_USE) {
        #line 2407 
        bool branch;
        #line 2407 
        struct _ddebug __UNIQUE_ID_ddebug550 = {.modname = (char *)"ice", .function = (char *)"ice_sched_rm_rl_profile", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_sched.c", .format = (char *)"Remove rl profile failed\n", .lineno = (unsigned int)2407U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
        #line 2407 
        branch = arch_static_branch(& __UNIQUE_ID_ddebug550.key.dd_key_false.key,(_Bool)0);
        #line 2407 
        if ((long)((long)((int)branch != 0)) != 0L) {
          #line 2407 
          void *__mptr_1;
          #line 2407 
          __mptr_1 = (void *)pi->hw;
          #line 2407 
          __dynamic_dev_dbg(& __UNIQUE_ID_ddebug550,& (((struct ice_pf *)(__mptr_1 + 18446744073709549512U))->pdev)->dev,(char *)"Remove rl profile failed\n");
        }
      }
      #line 2409 
      break;
    }
    #line 2396 
    __mptr_0 = (void *)rl_prof_elem->list_entry.next;
    #line 2396 
    rl_prof_elem = ((struct ice_aqc_rl_profile_info *)(__mptr_0 + 18446744073709551600U));
  }
  #line 2411 
  if (status == ICE_ERR_IN_USE) 
                                #line 2412 
                                status = ICE_SUCCESS;
  #line 2413 
  return status;
}

#line 2428  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_sched.c"
static enum ice_status ice_sched_set_node_bw_dflt(struct ice_port_info *pi, struct ice_sched_node *node, enum ice_rl_type rl_type, u8 layer_num)
{
  #line 2432 
  enum ice_status status;
  #line 2433 
  struct ice_hw *hw;
  #line 2434 
  u8 profile_type;
  #line 2435 
  u16 rl_prof_id;
  #line 2436 
  u16 old_id;
  #line 2438 
  hw = pi->hw;
  #line 2439 
  switch ((unsigned int)rl_type) {
    #line 2440 
    case (unsigned int)1: 
                          #line 2440 
    ;
    #line 2441 
    profile_type = (unsigned char)0U;
    #line 2442 
    rl_prof_id = (unsigned short)0U;
    #line 2443 
    break;
    #line 2444 
    case (unsigned int)2: 
                          #line 2444 
    ;
    #line 2445 
    profile_type = (unsigned char)1U;
    #line 2446 
    rl_prof_id = (unsigned short)0U;
    #line 2447 
    break;
    #line 2448 
    case (unsigned int)3: 
                          #line 2448 
    ;
    #line 2449 
    profile_type = (unsigned char)2U;
    #line 2451 
    rl_prof_id = (unsigned short)65535U;
    #line 2452 
    break;
    #line 2453 
    default: 
             #line 2453 
    ;
    #line 2454 
    return ICE_ERR_PARAM;
  }
  #line 2457 
  old_id = ice_sched_get_node_rl_prof_id(node,rl_type);
  #line 2459 
  status = ice_sched_cfg_node_bw_lmt(hw,node,rl_type,(unsigned short)((int)rl_prof_id));
  #line 2460 
  if (status != ICE_SUCCESS) 
                             #line 2461 
                             return status;
  #line 2464 
  if ((unsigned int)old_id + 65535U > 65533U) 
                                              #line 2466 
                                              return ICE_SUCCESS;
  #line 2468 
  return ice_sched_rm_rl_profile(pi,(unsigned char)((int)layer_num),
                              (unsigned char)((int)profile_type),
                              (unsigned short)((int)old_id));
}

#line 2485  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_sched.c"
static enum ice_status ice_sched_set_eir_srl_excl(struct ice_port_info *pi, struct ice_sched_node *node, u8 layer_num, enum ice_rl_type rl_type, u32 bw)
{
  #line 2489 
  if (rl_type == (unsigned int)ICE_SHARED_BW) {
    #line 2491 
    if (bw == 4294967295U) 
                           #line 2496 
                           return ICE_SUCCESS;
    #line 2502 
    return ice_sched_set_node_bw_dflt(pi,node,(enum ice_rl_type)ICE_MAX_BW,
                                 (unsigned char)((int)layer_num));
  }
  else 
    #line 2504 
    if (rl_type == (unsigned int)ICE_MAX_BW && ((unsigned long)node->info.data.valid_sections & 8UL) != 0UL) {
      #line 2509 
      return ice_sched_set_node_bw_dflt(pi,node,(enum ice_rl_type)ICE_SHARED_BW,
                                   (unsigned char)((int)layer_num));
    }
  #line 2513 
  return ICE_SUCCESS;
}

#line 2529  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_sched.c"
static enum ice_status ice_sched_set_node_bw(struct ice_port_info *pi, struct ice_sched_node *node, enum ice_rl_type rl_type, u32 bw, u8 layer_num)
{
  #line 2532 
  struct ice_aqc_rl_profile_info *rl_prof_info;
  #line 2535 
  u16 old_id;
  #line 2535 
  u16 rl_prof_id;
  #line 2533 
  enum ice_status status = -1;
  #line 2534 
  struct ice_hw *hw = pi->hw;
  #line 2537 
  rl_prof_info = ice_sched_add_rl_profile(pi,rl_type,bw,(unsigned char)((int)layer_num));
  #line 2538 
  if (rl_prof_info == (struct ice_aqc_rl_profile_info *)0) 
                                                           #line 2539 
                                                           return status;
  #line 2541 
  rl_prof_id = rl_prof_info->profile.profile_id;
  #line 2544 
  old_id = ice_sched_get_node_rl_prof_id(node,rl_type);
  #line 2546 
  status = ice_sched_cfg_node_bw_lmt(hw,node,rl_type,(unsigned short)((int)rl_prof_id));
  #line 2547 
  if (status != ICE_SUCCESS) 
                             #line 2548 
                             return status;
  #line 2552 
  rl_prof_info->prof_id_ref = (u16)((int)rl_prof_info->prof_id_ref + 1);
  #line 2555 
  if ((unsigned int)old_id == 0U && rl_type != (unsigned int)ICE_SHARED_BW || ((unsigned int)old_id == 65535U || (int)old_id == (int)rl_prof_id)) 
    #line 2557 
    return ICE_SUCCESS;
  #line 2559 
  return ice_sched_rm_rl_profile(pi,(unsigned char)((int)layer_num),
                              (unsigned char)((int)rl_prof_info->profile.flags),
                              (unsigned short)((int)old_id));
}

#line 2575  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_sched.c"
static enum ice_status ice_sched_set_node_bw_lmt(struct ice_port_info *pi, struct ice_sched_node *node, enum ice_rl_type rl_type, u32 bw)
{
  #line 2579 
  enum ice_status status;
  #line 2581 
  struct ice_hw *hw;
  #line 2582 
  u8 layer_num;
  #line 2578 
  struct ice_sched_node *cfg_node = node;
  #line 2584 
  if (pi == (struct ice_port_info *)0) 
                                       #line 2585 
                                       return ICE_ERR_PARAM;
  #line 2586 
  hw = pi->hw;
  #line 2588 
  ice_sched_rm_unused_rl_prof(pi);
  #line 2589 
  layer_num = ice_sched_get_rl_prof_layer(pi,rl_type,(unsigned char)((int)node->tx_sched_layer));
  #line 2591 
  if ((int)((unsigned short)layer_num) >= (int)hw->num_tx_sched_layers) 
    #line 2592 
    return ICE_ERR_PARAM;
  #line 2594 
  if (rl_type == (unsigned int)ICE_SHARED_BW) {
    #line 2596 
    cfg_node = ice_sched_get_srl_node(node,(unsigned char)((int)layer_num));
    #line 2597 
    if (cfg_node == (struct ice_sched_node *)0) 
                                                #line 2598 
                                                return ICE_ERR_CFG;
  }
  #line 2603 
  status = ice_sched_set_eir_srl_excl(pi,cfg_node,(unsigned char)((int)layer_num),rl_type,bw);
  #line 2605 
  if (status != ICE_SUCCESS) 
                             #line 2606 
                             return status;
  #line 2607 
  if (bw == 4294967295U) {
    #line 2608 
    return ice_sched_set_node_bw_dflt(pi,cfg_node,rl_type,
                                 (unsigned char)((int)layer_num));
  }
  #line 2610 
  return ice_sched_set_node_bw(pi,cfg_node,rl_type,bw,
                              (unsigned char)((int)layer_num));
}

#line 2624  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_sched.c"
static enum ice_status ice_sched_set_node_bw_dflt_lmt(struct ice_port_info *pi, struct ice_sched_node *node, enum ice_rl_type rl_type)
{
  #line 2628 
  return ice_sched_set_node_bw_lmt(pi,node,rl_type,4294967295U);
}

#line 2642  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_sched.c"
static enum ice_status ice_sched_validate_srl_node(struct ice_sched_node *node, u8 sel_layer)
{
  #line 2649 
  if (((int)node->tx_sched_layer == (int)sel_layer || (int)sel_layer == (int)node->tx_sched_layer + 1 && (unsigned int)node->num_children == 1U) || (node->parent != (struct ice_sched_node *)0 && (unsigned int)(node->parent)->num_children == 1U) && (int)sel_layer == (int)node->tx_sched_layer + -1) 
    #line 2654 
    return ICE_SUCCESS;
  #line 2656 
  return ICE_ERR_CFG;
}

#line 2668  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_sched.c"
static enum ice_status ice_sched_save_q_bw(struct ice_q_ctx *q_ctx, enum ice_rl_type rl_type, u32 bw)
{
  #line 2670 
  switch ((unsigned int)rl_type) {
    #line 2671 
    case (unsigned int)1: 
                          #line 2671 
    ;
    #line 2672 
    ice_set_clear_cir_bw(& q_ctx->bw_t_info,bw);
    #line 2673 
    break;
    #line 2674 
    case (unsigned int)2: 
                          #line 2674 
    ;
    #line 2675 
    ice_set_clear_eir_bw(& q_ctx->bw_t_info,bw);
    #line 2676 
    break;
    #line 2677 
    case (unsigned int)3: 
                          #line 2677 
    ;
    #line 2678 
    ice_set_clear_shared_bw(& q_ctx->bw_t_info,bw);
    #line 2679 
    break;
    #line 2680 
    default: 
             #line 2680 
    ;
    #line 2681 
    return ICE_ERR_PARAM;
  }
  #line 2683 
  return ICE_SUCCESS;
}

#line 2698  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_sched.c"
static enum ice_status ice_sched_set_q_bw_lmt(struct ice_port_info *pi, u16 vsi_handle, u8 tc, u16 q_handle, enum ice_rl_type rl_type, u32 bw)
{
  #line 2702 
  struct ice_sched_node *node;
  #line 2703 
  struct ice_q_ctx *q_ctx;
  #line 2701 
  enum ice_status status = -1;
  #line 2705 
  if (! ice_is_vsi_valid(pi->hw,(unsigned short)((int)vsi_handle))) 
                                                                    #line 2706 
                                                                    return ICE_ERR_PARAM;
  #line 2707 
  cif_mutex_lock_sched_lock_of_ice_port_info_1(& pi->sched_lock);
  #line 2708 
  q_ctx = ice_get_lan_q_ctx(pi->hw,(unsigned short)((int)vsi_handle),(unsigned char)((int)tc),(unsigned short)((int)q_handle));
  #line 2709 
  if (q_ctx == (struct ice_q_ctx *)0) 
                                      #line 2710 
                                      goto exit_q_bw_lmt;
  #line 2711 
  node = ice_sched_find_node_by_teid(pi->root,q_ctx->q_teid);
  #line 2712 
  if (node == (struct ice_sched_node *)0) {
    {
      #line 2713 
      bool branch;
      #line 2713 
      struct _ddebug __UNIQUE_ID_ddebug551 = {.modname = (char *)"ice", .function = (char *)"ice_sched_set_q_bw_lmt", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_sched.c", .format = (char *)"Wrong q_teid\n", .lineno = (unsigned int)2713U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 2713 
      branch = arch_static_branch(& __UNIQUE_ID_ddebug551.key.dd_key_false.key,(_Bool)0);
      #line 2713 
      if ((long)((long)((int)branch != 0)) != 0L) {
        #line 2713 
        void *__mptr;
        #line 2713 
        __mptr = (void *)pi->hw;
        #line 2713 
        __dynamic_dev_dbg(& __UNIQUE_ID_ddebug551,& (((struct ice_pf *)(__mptr + 18446744073709549512U))->pdev)->dev,(char *)"Wrong q_teid\n");
      }
    }
    #line 2714 
    goto exit_q_bw_lmt;
  }
  #line 2718 
  if ((unsigned int)node->info.data.elem_type != 5U) 
                                                     #line 2719 
                                                     goto exit_q_bw_lmt;
  #line 2722 
  if (rl_type == (unsigned int)ICE_SHARED_BW) {
    #line 2723 
    u8 sel_layer;
    #line 2725 
    sel_layer = ice_sched_get_rl_prof_layer(pi,rl_type,(unsigned char)((int)node->tx_sched_layer));
    #line 2727 
    if ((int)((unsigned short)sel_layer) >= (int)(pi->hw)->num_tx_sched_layers) {
      #line 2728 
      status = ICE_ERR_PARAM;
      #line 2729 
      goto exit_q_bw_lmt;
    }
    #line 2731 
    status = ice_sched_validate_srl_node(node,(unsigned char)((int)sel_layer));
    #line 2732 
    if (status != ICE_SUCCESS) 
                               #line 2733 
                               goto exit_q_bw_lmt;
  }
  #line 2736 
  if (bw == 4294967295U) 
                         #line 2737 
                         status = ice_sched_set_node_bw_dflt_lmt(pi,node,rl_type); else 
                                                                    #line 2739 
                                                                    status = ice_sched_set_node_bw_lmt(pi,node,rl_type,bw);
  #line 2741 
  if (status == ICE_SUCCESS) 
                             #line 2742 
                             status = ice_sched_save_q_bw(q_ctx,rl_type,bw);
  #line 2744 
  exit_q_bw_lmt: 
                 #line 2744 
  ;
  #line 2745 
  cif_mutex_unlock_sched_lock_of_ice_port_info_1(& pi->sched_lock);
  #line 2746 
  return status;
}

#line 2761  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_sched.c"
enum ice_status ice_cfg_q_bw_lmt(struct ice_port_info *pi, u16 vsi_handle, u8 tc, u16 q_handle, enum ice_rl_type rl_type, u32 bw)
{
  #line 2764 
  return ice_sched_set_q_bw_lmt(pi,(unsigned short)((int)vsi_handle),
                             (unsigned char)((int)tc),
                             (unsigned short)((int)q_handle),rl_type,bw);
}

#line 2779  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_sched.c"
enum ice_status ice_cfg_q_bw_dflt_lmt(struct ice_port_info *pi, u16 vsi_handle, u8 tc, u16 q_handle, enum ice_rl_type rl_type)
{
  #line 2782 
  return ice_sched_set_q_bw_lmt(pi,(unsigned short)((int)vsi_handle),
                             (unsigned char)((int)tc),
                             (unsigned short)((int)q_handle),rl_type,
                             4294967295U);
}

#line 2795  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_sched.c"
enum ice_status ice_cfg_rl_burst_size(struct ice_hw *hw, u32 bytes)
{
  #line 2797 
  u16 burst_size_to_prog;
  #line 2799 
  if (bytes + 4294967232U > 2096064U) 
                                      #line 2801 
                                      return ICE_ERR_PARAM;
  #line 2802 
  if (ice_round_to_num(bytes,64U) <= 131008U) {
    #line 2806 
    burst_size_to_prog = (unsigned short)0U;
    #line 2808 
    bytes = ice_round_to_num(bytes,64U);
    #line 2810 
    burst_size_to_prog = (unsigned short)((int)((unsigned short)(bytes / 64U)) | (int)burst_size_to_prog);
  }
  else {
    #line 2814 
    burst_size_to_prog = (unsigned short)2048U;
    #line 2816 
    bytes = ice_round_to_num(bytes,1024U);
    #line 2818 
    if (bytes > 2096128U) 
                          #line 2819 
                          bytes = 2096128U;
    #line 2821 
    burst_size_to_prog = (unsigned short)((int)((unsigned short)(bytes / 1024U)) | (int)burst_size_to_prog);
  }
  #line 2823 
  hw->max_burst_size = burst_size_to_prog;
  #line 2824 
  return ICE_SUCCESS;
}

#line 2837  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_sched.c"
static enum ice_status ice_sched_replay_node_prio(struct ice_hw *hw, struct ice_sched_node *node, u8 priority)
{
  #line 2840 
  struct ice_aqc_txsched_elem_data buf;
  #line 2841 
  struct ice_aqc_txsched_elem *data;
  #line 2842 
  enum ice_status status;
  #line 2844 
  buf = node->info;
  #line 2845 
  data = & buf.data;
  #line 2846 
  data->valid_sections = (unsigned char)((unsigned int)data->valid_sections | 1U);
  #line 2847 
  data->generic = priority;
  #line 2850 
  status = ice_sched_update_elem(hw,node,& buf);
  #line 2851 
  return status;
}

#line 2864  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_sched.c"
static enum ice_status ice_sched_replay_node_bw(struct ice_hw *hw, struct ice_sched_node *node, struct ice_bw_type_info *bw_t_info)
{
  #line 2869 
  u16 bw_alloc;
  #line 2867 
  struct ice_port_info *pi = hw->port_info;
  #line 2868 
  enum ice_status status = -1;
  #line 2871 
  if (node == (struct ice_sched_node *)0) 
                                          #line 2872 
                                          return status;
  #line 2873 
  if (bitmap_empty((unsigned long *)(& bw_t_info->bw_t_bitmap),6U) != 0) 
    #line 2874 
    return ICE_SUCCESS;
  #line 2875 
  if ((int)test_bit(0L,(unsigned long *)(& bw_t_info->bw_t_bitmap)) != 0) {
    #line 2876 
    status = ice_sched_replay_node_prio(hw,node,(unsigned char)((int)bw_t_info->generic));
    #line 2878 
    if (status != ICE_SUCCESS) 
                               #line 2879 
                               return status;
  }
  #line 2881 
  if ((int)test_bit(1L,(unsigned long *)(& bw_t_info->bw_t_bitmap)) != 0) {
    #line 2882 
    status = ice_sched_set_node_bw_lmt(pi,node,(enum ice_rl_type)ICE_MIN_BW,bw_t_info->cir_bw.bw);
    #line 2884 
    if (status != ICE_SUCCESS) 
                               #line 2885 
                               return status;
  }
  #line 2887 
  if ((int)test_bit(2L,(unsigned long *)(& bw_t_info->bw_t_bitmap)) != 0) {
    #line 2888 
    bw_alloc = bw_t_info->cir_bw.bw_alloc;
    #line 2889 
    status = ice_sched_cfg_node_bw_alloc(hw,node,(enum ice_rl_type)ICE_MIN_BW,(unsigned char)((int)((unsigned char)bw_alloc)));
    #line 2891 
    if (status != ICE_SUCCESS) 
                               #line 2892 
                               return status;
  }
  #line 2894 
  if ((int)test_bit(3L,(unsigned long *)(& bw_t_info->bw_t_bitmap)) != 0) {
    #line 2895 
    status = ice_sched_set_node_bw_lmt(pi,node,(enum ice_rl_type)ICE_MAX_BW,bw_t_info->eir_bw.bw);
    #line 2897 
    if (status != ICE_SUCCESS) 
                               #line 2898 
                               return status;
  }
  #line 2900 
  if ((int)test_bit(4L,(unsigned long *)(& bw_t_info->bw_t_bitmap)) != 0) {
    #line 2901 
    bw_alloc = bw_t_info->eir_bw.bw_alloc;
    #line 2902 
    status = ice_sched_cfg_node_bw_alloc(hw,node,(enum ice_rl_type)ICE_MAX_BW,(unsigned char)((int)((unsigned char)bw_alloc)));
    #line 2904 
    if (status != ICE_SUCCESS) 
                               #line 2905 
                               return status;
  }
  #line 2907 
  if ((int)test_bit(5L,(unsigned long *)(& bw_t_info->bw_t_bitmap)) != 0) 
    #line 2908 
    status = ice_sched_set_node_bw_lmt(pi,node,(enum ice_rl_type)ICE_SHARED_BW,bw_t_info->shared_bw);
  #line 2910 
  return status;
}

#line 2922  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/ice/ice_sched.c"
enum ice_status ice_sched_replay_q_bw(struct ice_port_info *pi, struct ice_q_ctx *q_ctx)
{
  #line 2924 
  struct ice_sched_node *q_node;
  #line 2927 
  q_node = ice_sched_find_node_by_teid(pi->root,q_ctx->q_teid);
  #line 2928 
  if (q_node == (struct ice_sched_node *)0) 
                                            #line 2929 
                                            return ICE_ERR_PARAM;
  #line 2930 
  return ice_sched_replay_node_bw(pi->hw,q_node,& q_ctx->bw_t_info);
}

#line 119  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ice/ice.ko/concurrency safety/0/concurrency safety/weaver/ice_sched.i.aux"
static void cif_set_bit_9(long nr, unsigned long *addr)
{
  #line 122 
  ldv_set_bit(nr,addr);
  #line 123 
  return;
}

#line 126  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ice/ice.ko/concurrency safety/0/concurrency safety/weaver/ice_sched.i.aux"
static void cif_clear_bit_9(long nr, unsigned long *addr)
{
  #line 129 
  ldv_clear_bit(nr,addr);
  #line 130 
  return;
}

#line 133  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ice/ice.ko/concurrency safety/0/concurrency safety/weaver/ice_sched.i.aux"
static void INIT_LIST_HEAD_4(struct list_head *list)
{
  #line 136 
  ldv_init_list_head(list);
  #line 137 
  return;
}

#line 154  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ice/ice.ko/concurrency safety/0/concurrency safety/weaver/ice_sched.i.aux"
static unsigned long cif_find_first_bit_1(unsigned long *addr, unsigned long size)
{
  #line 157 
  return ldv_find_first_bit(addr,size);
}

#line 798  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ice/ice.ko/concurrency safety/0/concurrency safety/weaver/ice_sched.i.aux"
static void *cif_devm_kzalloc_7(struct device *dev, size_t size, gfp_t flags)
{
  #line 801 
  return ldv_devm_kzalloc(size,flags);
}

#line 805  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ice/ice.ko/concurrency safety/0/concurrency safety/weaver/ice_sched.i.aux"
static void *cif_devm_kcalloc_7(struct device *dev, size_t n, size_t size, gfp_t flags)
{
  #line 808 
  return ldv_devm_kcalloc(n,size,flags);
}

#line 812  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ice/ice.ko/concurrency safety/0/concurrency safety/weaver/ice_sched.i.aux"
static void cif_mutex_lock_sched_lock_of_ice_port_info_1(struct mutex *lock)
{
  #line 815 
  ldv_mutex_model_lock(lock,(char *)"sched_lock_of_ice_port_info");
  #line 816 
  return;
}

#line 819  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ice/ice.ko/concurrency safety/0/concurrency safety/weaver/ice_sched.i.aux"
static void cif_mutex_unlock_sched_lock_of_ice_port_info_1(struct mutex *lock)
{
  #line 822 
  ldv_mutex_model_unlock(lock,(char *)"sched_lock_of_ice_port_info");
  #line 823 
  return;
}

#line 20  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/common/inline_asm.c"
void ldv_inline_asm(void)
{
  #line 24 
  return;
}

#line 20  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
void ldv_atomic_add(int i, atomic_t *v)
{
  #line 22 
  v->counter += i;
  #line 23 
  return;
}

#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
void ldv_atomic_sub(int i, atomic_t *v)
{
  #line 27 
  v->counter -= i;
  #line 28 
  return;
}

#line 30  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
int ldv_atomic_sub_and_test(int i, atomic_t *v)
{
  #line 32 
  v->counter -= i;
  #line 33 
  if (v->counter != 0) 
                       #line 34 
                       return 0;
  #line 36 
  return 1;
}

#line 39  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
void ldv_atomic_inc(atomic_t *v)
{
  #line 41 
  (v->counter) ++;
  #line 42 
  return;
}

#line 44  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
void ldv_atomic_dec(atomic_t *v)
{
  #line 46 
  (v->counter) --;
  #line 47 
  return;
}

#line 49  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
int ldv_atomic_dec_and_test(atomic_t *v)
{
  #line 51 
  (v->counter) --;
  #line 52 
  if (v->counter != 0) 
                       #line 53 
                       return 0;
  #line 55 
  return 1;
}

#line 58  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
int ldv_atomic_inc_and_test(atomic_t *v)
{
  #line 60 
  (v->counter) ++;
  #line 61 
  if (v->counter != 0) 
                       #line 62 
                       return 0;
  #line 64 
  return 1;
}

#line 67  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
int ldv_atomic_add_return(int i, atomic_t *v)
{
  #line 69 
  v->counter += i;
  #line 70 
  return v->counter;
}

#line 73  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
int ldv_atomic_add_negative(int i, atomic_t *v)
{
  #line 75 
  v->counter += i;
  #line 76 
  return v->counter < 0;
}

#line 79  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
int ldv_atomic_inc_short(short *v)
{
  #line 81 
  *v = (short)((unsigned int)*v + 1U);
  #line 82 
  return (int)*v;
}

#line 20  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/current.c"
static struct task_struct ldv_current;
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/current.c"
struct task_struct *ldv_get_current(void)
{
  #line 28 
  ldv_current.pid = 1;
  #line 29 
  return & ldv_current;
}

#line 32  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 28  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
void ldv_switch_to_interrupt_context(void);
#line 42  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 34  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
void ldv_switch_to_process_context(void);
#line 50  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 40  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
bool ldv_in_interrupt_context(void);
#line 112  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 55  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
int ldv_post_init(int init_ret_val);
#line 132  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 61  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
int ldv_post_probe(int probe_ret_val);
#line 133  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 133 
void ldv_check_return_value_probe(int);
#line 141 
#line 68  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
int ldv_filter_err_code(int ret_val);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/common.h"
#line 23 
void __VERIFIER_assume(int);
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
static bool __ldv_in_interrupt_context = (_Bool)0;
#line 28  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
void ldv_switch_to_interrupt_context(void)
{
  #line 31 
  __ldv_in_interrupt_context = (_Bool)1;
  #line 32 
  return;
}

#line 34  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
void ldv_switch_to_process_context(void)
{
  #line 37 
  __ldv_in_interrupt_context = (_Bool)0;
  #line 38 
  return;
}

#line 40  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
bool ldv_in_interrupt_context(void)
{
  #line 42 
  return __ldv_in_interrupt_context;
}

#line 45  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
static int ldv_filter_positive_int(int val)
{
  #line 47 
  __VERIFIER_assume(val <= 0);
  #line 48 
  return val;
}

#line 55  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
int ldv_post_init(int init_ret_val)
{
  #line 57 
  return ldv_filter_positive_int(init_ret_val);
}

#line 61  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
int ldv_post_probe(int probe_ret_val)
{
  #line 63 
  ldv_check_return_value_probe(probe_ret_val);
  #line 64 
  return ldv_filter_positive_int(probe_ret_val);
}

#line 68  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
int ldv_filter_err_code(int ret_val)
{
  #line 70 
  return ldv_filter_positive_int(ret_val);
}

#line 28  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/common/list.h"
#line 28 
void ldv_save_allocated_memory_to_list(void *);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/device.h"
#line 29  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/dd.c"
void *ldv_dev_get_drvdata(struct device *dev);
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/device.h"
#line 43  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/dd.c"
int ldv_dev_set_drvdata(struct device *dev, void *data);
#line 57  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 57 
void *ldv_xzalloc(size_t size);
#line 29  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/dd.c"
void *ldv_dev_get_drvdata(struct device *dev)
{
  #line 31 
  if (dev != (struct device *)0 && dev->p != (struct device_private *)0) 
    #line 32 
    return (dev->p)->driver_data;
  #line 34 
  return (void *)0;
}

#line 43  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/dd.c"
int ldv_dev_set_drvdata(struct device *dev, void *data)
{
  #line 45 
  dev->p = (struct device_private *)ldv_xzalloc(8UL);
  #line 46 
  ldv_save_allocated_memory_to_list((void *)dev->p);
  #line 47 
  (dev->p)->driver_data = data;
  #line 49 
  return 0;
}

#line 156  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 156 
void ldv_check_alloc_flags(gfp_t);
#line 48  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 48 
void *ldv_malloc(size_t size);
#line 49 
#line 49 
void *ldv_calloc(size_t nmemb, size_t size);
#line 50 
#line 50 
void *ldv_zalloc(size_t size);
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/devres.c"
void *ldv_devm_kmalloc(size_t size, gfp_t flags)
{
  #line 26 
  void *res;
  #line 28 
  ldv_check_alloc_flags(flags);
  #line 29 
  res = ldv_malloc(size);
  #line 30 
  ldv_save_allocated_memory_to_list(res);
  #line 32 
  return res;
}

#line 35  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/devres.c"
void *ldv_devm_kzalloc(size_t size, gfp_t flags)
{
  #line 37 
  void *res;
  #line 39 
  ldv_check_alloc_flags(flags);
  #line 40 
  res = ldv_zalloc(size);
  #line 41 
  ldv_save_allocated_memory_to_list(res);
  #line 43 
  return res;
}

#line 46  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/devres.c"
void *ldv_devm_kmalloc_array(size_t n, size_t size, gfp_t flags)
{
  #line 48 
  void *res;
  #line 50 
  ldv_check_alloc_flags(flags);
  #line 51 
  res = ldv_malloc(n * size);
  #line 52 
  ldv_save_allocated_memory_to_list(res);
  #line 54 
  return res;
}

#line 57  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/devres.c"
void *ldv_devm_kcalloc(size_t n, size_t size, gfp_t flags)
{
  #line 59 
  void *res;
  #line 61 
  ldv_check_alloc_flags(flags);
  #line 62 
  res = ldv_calloc(n,size);
  #line 63 
  ldv_save_allocated_memory_to_list(res);
  #line 65 
  return res;
}

#line 51  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 51 
void ldv_free(void *s);
#line 59 
#line 59 
void *ldv_malloc_unknown_size(void);
#line 31  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 31 
int ldv_undef_int_positive(void);
#line 40 
#line 40 
int ldv_undef_int_nonpositive(void);
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/firmware_loader.c"
int ldv_request_firmware(struct firmware **fw)
{
  #line 27 
  int retval;
  #line 26 
  struct firmware *_fw = (struct firmware *)0;
  #line 29 
  retval = ldv_undef_int_nonpositive();
  #line 31 
  if (retval == 0) {
    #line 33 
    _fw = (struct firmware *)ldv_xzalloc(32UL);
    #line 34 
    _fw->data = (u8 *)ldv_malloc_unknown_size();
    #line 35 
    __VERIFIER_assume(_fw->data != (u8 *)0U);
    #line 36 
    _fw->size = (unsigned long)ldv_undef_int_positive();
  }
  #line 39 
  *fw = _fw;
  #line 41 
  return retval;
}

#line 44  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/firmware_loader.c"
void ldv_release_firmware(struct firmware *fw)
{
  #line 46 
  if (fw != (struct firmware *)0) {
    #line 48 
    ldv_free((void *)fw->data);
    #line 49 
    ldv_free((void *)fw);
  }
  #line 51 
  return;
}

#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/i2c.h"
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/i2c/i2c-core-smbus.c"
s32 ldv_i2c_smbus_read_block_data(u8 *values);
#line 55  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 55 
void *ldv_xmalloc(size_t size);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 23 
int ldv_undef_int(void);
#line 34 
#line 34 
int ldv_undef_int_negative(void);
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/i2c/i2c-core-smbus.c"
s32 ldv_i2c_smbus_read_block_data(u8 *values)
{
  #line 27 
  __u8 size;
  #line 28 
  char *bytes;
  #line 30 
  if (ldv_undef_int() != 0) {
    #line 33 
    size = (unsigned char)ldv_undef_int_positive();
    #line 35 
    __VERIFIER_assume((unsigned int)size <= 32U);
    #line 37 
    bytes = (char *)ldv_xmalloc((unsigned long)size);
    #line 39 
    memcpy((void *)values,(void *)bytes,(unsigned long)size);
    #line 40 
    ldv_free((void *)bytes);
    #line 42 
    return (int)size;
  }
  else {
    #line 46 
    return ldv_undef_int_negative();
  }
}

#line 988  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
__inline static void v4l2_set_subdevdata(struct v4l2_subdev *sd, void *p)
{
  #line 990 
  sd->dev_priv = p;
  #line 991 
  return;
}

#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/media/v4l2-common.h"
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/media/v4l2-core/v4l2-i2c.c"
void ldv_v4l2_i2c_subdev_init(struct v4l2_subdev *sd, struct i2c_client *client, struct v4l2_subdev_ops *ops);
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/media/v4l2-core/v4l2-i2c.c"
void ldv_v4l2_i2c_subdev_init(struct v4l2_subdev *sd, struct i2c_client *client, struct v4l2_subdev_ops *ops)
{
  #line 26 
  sd->ops = ops;
  #line 27 
  v4l2_set_subdevdata(sd,(void *)client);
  #line 28 
  ldv_dev_set_drvdata(& client->dev,(void *)sd);
  #line 29 
  return;
}

#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/spi.c"
struct spi_controller *ldv_spi_alloc_master(struct device *host, unsigned int size)
{
  #line 25 
  struct spi_controller *master;
  #line 27 
  master = (struct spi_controller *)ldv_zalloc((unsigned long)size + 2936UL);
  #line 29 
  if (master == (struct spi_controller *)0) 
                                            #line 30 
                                            return (struct spi_controller *)0;
  #line 32 
  ldv_dev_set_drvdata(& master->dev,(void *)(master + 1U));
  #line 34 
  return master;
}

#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/fb.h"
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/video/fbdev/core/fbsysfs.c"
struct fb_info *ldv_framebuffer_alloc(size_t size);
#line 26  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/fb.h"
#line 38  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/video/fbdev/core/fbsysfs.c"
void ldv_framebuffer_release(struct fb_info *info);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/video/fbdev/core/fbsysfs.c"
struct fb_info *ldv_framebuffer_alloc(size_t size)
{
  #line 25 
  struct fb_info *info;
  #line 27 
  info = (struct fb_info *)ldv_zalloc(size + 1568UL);
  #line 29 
  if (info == (struct fb_info *)0) 
                                   #line 30 
                                   return (struct fb_info *)0;
  #line 32 
  if (size != 0UL) 
                   #line 33 
                   info->par = (void *)((char *)info + 1568UL);
  #line 35 
  return info;
}

#line 38  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/video/fbdev/core/fbsysfs.c"
void ldv_framebuffer_release(struct fb_info *info)
{
  #line 40 
  if (info == (struct fb_info *)0) 
                                   #line 41 
                                   return;
  #line 44 
  ldv_free((void *)info->apertures);
  #line 46 
  ldv_free((void *)info);
  #line 47 
  return;
}

#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/err.h"
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/err.c"
bool ldv_is_err(void *ptr);
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/err.h"
#line 59  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/err.c"
bool ldv_is_err_or_null(void *ptr);
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/err.h"
#line 35  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/err.c"
void *ldv_err_ptr(long error);
#line 26  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/err.h"
#line 47  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/err.c"
long ldv_ptr_err(void *ptr);
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/err.c"
bool ldv_is_err(void *ptr)
{
  #line 29 
  if ((unsigned long)ptr > 18446744073709547520UL) 
                                                   #line 30 
                                                   return (_Bool)1; else 
                                                                    #line 32 
                                                                    return (_Bool)0;
}

#line 35  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/err.c"
void *ldv_err_ptr(long error)
{
  #line 37 
  unsigned long result;
  #line 39 
  __VERIFIER_assume(error < 0L);
  #line 40 
  __VERIFIER_assume(error >= -4095L);
  #line 41 
  result = 18446744073709547520UL - (unsigned long)error;
  #line 42 
  __VERIFIER_assume(result > 18446744073709547520UL);
  #line 44 
  return (void *)result;
}

#line 47  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/err.c"
long ldv_ptr_err(void *ptr)
{
  #line 49 
  long result;
  #line 51 
  __VERIFIER_assume((unsigned long)ptr > 18446744073709547520UL);
  #line 52 
  result = (long)(18446744073709547520UL - (unsigned long)ptr);
  #line 53 
  __VERIFIER_assume(result < 0L);
  #line 54 
  __VERIFIER_assume(result >= -4095L);
  #line 56 
  return result;
}

#line 59  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/err.c"
bool ldv_is_err_or_null(void *ptr)
{
  #line 61 
  int tmp_0;
  #line 61 
  if (ptr == (void *)0) 
                        #line 61 
                        tmp_0 = 1;
  else {
    #line 61 
    if ((int)ldv_is_err(ptr) != 0) 
                                   #line 61 
                                   tmp_0 = 1; else 
                                                   #line 61 
                                                   tmp_0 = 0;
  }
  #line 61 
  return (_Bool)(tmp_0 != 0);
}

#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/panic.h"
#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/kernel/panic.c"
void ldv_panic(void);
#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/kernel/panic.c"
void ldv_panic(void)
{
  #line 23 
  __VERIFIER_assume(0);
  #line 24 
  return;
}

#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/bitmap.h"
#line 52  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_bitmap_clear(unsigned long *map, unsigned int start, int nbits);
#line 22  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_set_bit(long nr, unsigned long *addr)
{
  #line 24 
  *(addr + (unsigned long)nr / 64UL) |= 1UL << ((unsigned long)nr & 63UL);
  #line 25 
  return;
}

#line 27  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_clear_bit(long nr, unsigned long *addr)
{
  #line 29 
  *(addr + (unsigned long)nr / 64UL) &= ~ (1UL << ((unsigned long)nr & 63UL));
  #line 30 
  return;
}

#line 32  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_bitmap_set(unsigned long *map, unsigned int start, int nbits)
{
  #line 34 
  unsigned long *p = map + (unsigned long)(start / 64U);
  #line 35 
  unsigned int size = start + (unsigned int)nbits;
  #line 36 
  int bits_to_set = (int)(64U - (start & 63U));
  #line 37 
  unsigned long mask_to_set = 18446744073709551615UL << ((unsigned long)start & 63UL);
  #line 39 
  while (nbits - bits_to_set >= 0) {
    #line 40 
    *p |= mask_to_set;
    #line 41 
    nbits -= bits_to_set;
    #line 42 
    bits_to_set = 64;
    #line 43 
    mask_to_set = 18446744073709551615UL;
    #line 44 
    p ++;
  }
  #line 46 
  if (nbits != 0) {
    #line 47 
    mask_to_set = (18446744073709551615UL >> ((unsigned long)(- size) & 63UL)) & mask_to_set;
    #line 48 
    *p |= mask_to_set;
  }
  #line 50 
  return;
}

#line 52  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_bitmap_clear(unsigned long *map, unsigned int start, int nbits)
{
  #line 54 
  unsigned long *p = map + (unsigned long)(start / 64U);
  #line 55 
  unsigned int size = start + (unsigned int)nbits;
  #line 56 
  int bits_to_clear = (int)(64U - (start & 63U));
  #line 57 
  unsigned long mask_to_clear = 18446744073709551615UL << ((unsigned long)start & 63UL);
  #line 59 
  while (nbits - bits_to_clear >= 0) {
    #line 60 
    *p &= ~ mask_to_clear;
    #line 61 
    nbits -= bits_to_clear;
    #line 62 
    bits_to_clear = 64;
    #line 63 
    mask_to_clear = 18446744073709551615UL;
    #line 64 
    p ++;
  }
  #line 66 
  if (nbits != 0) {
    #line 67 
    mask_to_clear = (18446744073709551615UL >> ((unsigned long)(- size) & 63UL)) & mask_to_clear;
    #line 68 
    *p &= ~ mask_to_clear;
  }
  #line 70 
  return;
}

#line 72  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_bitmap_zero(unsigned long *dst, unsigned int nbits)
{
  #line 74 
  unsigned int len = (unsigned int)(((unsigned long)nbits + 63UL) / 64UL) * 8U;
  #line 75 
  memset((void *)dst,0,(unsigned long)len);
  #line 76 
  return;
}

#line 78  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
unsigned long ldv_bitmap_find_next_zero_area(unsigned long *map, unsigned long size, unsigned long start, unsigned int nr, unsigned long align_mask)
{
  #line 80 
  unsigned long index;
  #line 80 
  unsigned long end;
  #line 80 
  unsigned long i;
  #line 82 
  again: 
         #line 82 
  ;
  #line 83 
  index = ldv_find_next_zero_bit(map,size,start);
  #line 84 
  index = (index + align_mask) & ~ align_mask;
  #line 85 
  end = (unsigned long)nr + index;
  #line 87 
  if (end > size) 
                  #line 88 
                  return end;
  #line 90 
  i = ldv_find_next_bit(map,end,index);
  #line 92 
  if (i < end) {
    #line 93 
    start = i + 1UL;
    #line 94 
    goto again;
  }
  #line 97 
  return index;
}

#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/find_bit.h"
#line 25 
void ldv_check_find_bit_offset(unsigned long, unsigned long);
#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/find_bit.common.c"
static unsigned long ldv_ffs(unsigned long word)
{
  #line 23 
  int num = 0;
  #line 25 
  if ((word & 4294967295UL) == 0UL) {
    #line 26 
    num += 32;
    #line 27 
    word >>= 32;
  }
  #line 29 
  if ((word & 65535UL) == 0UL) {
    #line 30 
    num += 16;
    #line 31 
    word >>= 16;
  }
  #line 33 
  if ((word & 255UL) == 0UL) {
    #line 34 
    num += 8;
    #line 35 
    word >>= 8;
  }
  #line 37 
  if ((word & 15UL) == 0UL) {
    #line 38 
    num += 4;
    #line 39 
    word >>= 4;
  }
  #line 41 
  if ((word & 3UL) == 0UL) {
    #line 42 
    num += 2;
    #line 43 
    word >>= 2;
  }
  #line 45 
  if ((word & 1UL) == 0UL) 
                           #line 46 
                           num ++;
  #line 48 
  return (unsigned long)num;
}

#line 51  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/find_bit.common.c"
static unsigned long ldv_min(unsigned long a, unsigned long b)
{
  #line 53 
  if (a < b) 
             #line 54 
             return a;
  #line 56 
  return b;
}

#line 59  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/find_bit.common.c"
static unsigned long ldv_restrict_find_bit_res(unsigned long res, unsigned long size)
{
  #line 62 
  __VERIFIER_assume(1);
  #line 63 
  __VERIFIER_assume(res <= size);
  #line 65 
  return res;
}

#line 68  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/find_bit.common.c"
unsigned long ldv_find_first_bit(unsigned long *addr, unsigned long size)
{
  #line 70 
  unsigned long i;
  #line 72 
  i = 0UL;
  #line 72 
  while (i * 64UL < size) {
    #line 73 
    if (*(addr + i) != 0UL) {
      #line 74 
      ;
      #line 74 
      ;
      #line 74 
      ;
      #line 74 
      return ldv_restrict_find_bit_res(ldv_min(i * 64UL + ldv_ffs(*(addr + i)),size),
                                  size);
    }
    #line 72 
    i ++;
  }
  #line 76 
  return size;
}

#line 79  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/find_bit.common.c"
unsigned long ldv_find_next_bit(unsigned long *addr, unsigned long size, unsigned long offset)
{
  #line 81 
  unsigned long tmp;
  #line 83 
  ldv_check_find_bit_offset(size,offset);
  #line 85 
  tmp = *(addr + offset / 64UL);
  #line 86 
  tmp = (unsigned long)((18446744073709551615ULL << (offset & 63UL)) & (unsigned long long)tmp);
  #line 87 
  offset &= 18446744073709551552UL;
  #line 89 
  while (tmp == 0UL) {
    #line 90 
    offset += 64UL;
    #line 91 
    if (offset >= size) 
                        #line 92 
                        return size;
    #line 94 
    tmp = *(addr + offset / 64UL);
  }
  #line 97 
  ;
  #line 97 
  ;
  #line 97 
  ;
  #line 97 
  return ldv_restrict_find_bit_res(ldv_min(ldv_ffs(tmp) + offset,size),size);
}

#line 100  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/find_bit.common.c"
unsigned long ldv_find_next_zero_bit(unsigned long *addr, unsigned long size, unsigned long offset)
{
  #line 102 
  unsigned long tmp;
  #line 104 
  ldv_check_find_bit_offset(size,offset);
  #line 106 
  tmp = *(addr + offset / 64UL);
  #line 107 
  tmp = ~ tmp;
  #line 108 
  tmp = (unsigned long)((18446744073709551615ULL << (offset & 63UL)) & (unsigned long long)tmp);
  #line 109 
  offset &= 18446744073709551552UL;
  #line 111 
  while (tmp == 0UL) {
    #line 112 
    offset += 64UL;
    #line 113 
    if (offset >= size) 
                        #line 114 
                        return size;
    #line 116 
    tmp = *(addr + offset / 64UL);
    #line 117 
    tmp = ~ tmp;
  }
  #line 120 
  ;
  #line 120 
  ;
  #line 120 
  ;
  #line 120 
  return ldv_restrict_find_bit_res(ldv_min(ldv_ffs(tmp) + offset,size),size);
}

#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/string.h"
#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
size_t ldv_strlen(char *s);
#line 26  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/string.h"
#line 31  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
int ldv_strcmp(char *cs, char *ct);
#line 27  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/string.h"
#line 40  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
int ldv_strncmp(char *cs, char *ct, __kernel_size_t count);
#line 28  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/string.h"
#line 70  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
char *ldv_strstr(char *cs, char *ct);
#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
size_t ldv_strlen(char *s)
{
  #line 23 
  unsigned int len = 0U;
  #line 25 
  while ((int)*s != 0) {
    #line 26 
    len ++;
    #line 25 
    s ++;
  }
  #line 28 
  return (unsigned long)len;
}

#line 31  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
int ldv_strcmp(char *cs, char *ct)
{
  #line 33 
  while ((int)*cs != 0 && (int)*ct != 0) {
    #line 34 
    if ((int)*cs != (int)*ct) 
                              #line 35 
                              break;
    #line 33 
    cs ++;
    #line 33 
    ct ++;
  }
  #line 37 
  return (int)*cs - (int)*ct;
}

#line 40  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
int ldv_strncmp(char *cs, char *ct, __kernel_size_t count)
{
  #line 42 
  if (count == 0UL) 
                    #line 43 
                    return 0;
  #line 45 
  while ((int)*cs != 0 && (int)*ct != 0) {
    #line 46 
    if ((int)*cs != (int)*ct) 
                              #line 47 
                              break;
    #line 49 
    count --;
    #line 51 
    if (count == 0UL) 
                      #line 52 
                      break;
    #line 45 
    cs ++;
    #line 45 
    ct ++;
  }
  #line 55 
  return (int)*cs - (int)*ct;
}

#line 58  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
int ldv_memcmp(void *cs, void *ct, size_t count)
{
  #line 60 
  unsigned char *su1;
  #line 60 
  unsigned char *su2;
  #line 61 
  int res = 0;
  #line 63 
  su1 = (unsigned char *)cs;
  #line 63 
  su2 = (unsigned char *)ct;
  #line 63 
  while (count != 0UL) {
    #line 64 
    res = (int)*su1 - (int)*su2;
    #line 64 
    if (res != 0) 
                  #line 65 
                  break;
    #line 63 
    su1 ++;
    #line 63 
    su2 ++;
    #line 63 
    count --;
  }
  #line 67 
  return res;
}

#line 70  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
char *ldv_strstr(char *cs, char *ct)
{
  #line 72 
  size_t cs_len;
  #line 72 
  size_t ct_len;
  #line 74 
  cs_len = ldv_strlen(cs);
  #line 75 
  ct_len = ldv_strlen(ct);
  #line 77 
  while (cs_len >= ct_len) {
    #line 78 
    if (ldv_memcmp((void *)cs,(void *)ct,ct_len) == 0) 
                                                       #line 79 
                                                       return cs;
    #line 81 
    cs_len --;
    #line 82 
    cs ++;
  }
  #line 85 
  return (char *)0;
}

#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/list.c"
void ldv_init_list_head(struct list_head *list)
{
  #line 23 
  list->next = list;
  #line 24 
  list->prev = list;
  #line 25 
  return;
}

#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmalloc(size_t size, gfp_t flags);
#line 26  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 43  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmalloc_array(size_t n, size_t size, gfp_t flags);
#line 30  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 69  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
struct kmem_cache *ldv_kmem_cache_create(char *name, unsigned int size);
#line 31  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 85  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmem_cache_alloc(struct kmem_cache *cachep, gfp_t flags);
#line 32  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 90  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmem_cache_zalloc(struct kmem_cache *cachep, gfp_t flags);
#line 33  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 95  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void ldv_kmem_cache_free(struct kmem_cache *cachep, void *objp);
#line 34  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 100  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void ldv_kmem_cache_destroy(struct kmem_cache *cachep);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmalloc(size_t size, gfp_t flags)
{
  #line 25 
  void *res;
  #line 27 
  ldv_check_alloc_flags(flags);
  #line 28 
  res = ldv_malloc(size);
  #line 30 
  return res;
}

#line 33  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kzalloc(size_t size, gfp_t flags)
{
  #line 35 
  void *res;
  #line 37 
  ldv_check_alloc_flags(flags);
  #line 38 
  res = ldv_zalloc(size);
  #line 40 
  return res;
}

#line 43  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmalloc_array(size_t n, size_t size, gfp_t flags)
{
  #line 45 
  void *res;
  #line 47 
  ldv_check_alloc_flags(flags);
  #line 48 
  res = ldv_malloc(n * size);
  #line 50 
  return res;
}

#line 53  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kcalloc(size_t n, size_t size, gfp_t flags)
{
  #line 55 
  void *res;
  #line 57 
  ldv_check_alloc_flags(flags);
  #line 58 
  res = ldv_calloc(n,size);
  #line 60 
  return res;
}

#line 69  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
struct kmem_cache *ldv_kmem_cache_create(char *name, unsigned int size)
{
  #line 71 
  struct kmem_cache *res;
  #line 72 
  struct ldv_kmem_cache *ldv_res;
  #line 74 
  res = (struct kmem_cache *)ldv_zalloc(16UL);
  #line 76 
  if (res != (struct kmem_cache *)0) {
    #line 77 
    ldv_res = (struct ldv_kmem_cache *)res;
    #line 78 
    ldv_res->name = name;
    #line 79 
    ldv_res->size = size;
  }
  #line 82 
  return res;
}

#line 85  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmem_cache_alloc(struct kmem_cache *cachep, gfp_t flags)
{
  #line 87 
  return ldv_kmalloc((unsigned long)((struct ldv_kmem_cache *)cachep)->size,
                  flags);
}

#line 90  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmem_cache_zalloc(struct kmem_cache *cachep, gfp_t flags)
{
  #line 92 
  return ldv_kzalloc((unsigned long)((struct ldv_kmem_cache *)cachep)->size,
                  flags);
}

#line 95  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void ldv_kmem_cache_free(struct kmem_cache *cachep, void *objp)
{
  #line 97 
  ldv_free(objp);
  #line 98 
  return;
}

#line 100  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void ldv_kmem_cache_destroy(struct kmem_cache *cachep)
{
  #line 102 
  ldv_free((void *)cachep);
  #line 103 
  return;
}

#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/util.c"
void *ldv_kmemdup(void *src, size_t len, gfp_t gfp)
{
  #line 25 
  void *res;
  #line 27 
  ldv_check_alloc_flags(gfp);
  #line 28 
  res = ldv_malloc(len);
  #line 30 
  if (res != (void *)0) 
                        #line 31 
                        memcpy(res,src,len);
  #line 33 
  return res;
}

#line 162  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 162 
void ldv_check_alloc_nonatomic(void);
#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/vmalloc.h"
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/vmalloc.c"
void *ldv_vmalloc(unsigned long size);
#line 22  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/vmalloc.h"
#line 33  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/vmalloc.c"
void *ldv_vzalloc(unsigned long size);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/vmalloc.h"
#line 43  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/vmalloc.c"
void ldv_vfree(void *addr);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/vmalloc.c"
void *ldv_vmalloc(unsigned long size)
{
  #line 25 
  void *res;
  #line 27 
  ldv_check_alloc_nonatomic();
  #line 28 
  res = ldv_malloc(size);
  #line 30 
  return res;
}

#line 33  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/vmalloc.c"
void *ldv_vzalloc(unsigned long size)
{
  #line 35 
  void *res;
  #line 37 
  ldv_check_alloc_nonatomic();
  #line 38 
  res = ldv_zalloc(size);
  #line 40 
  return res;
}

#line 43  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/vmalloc.c"
void ldv_vfree(void *addr)
{
  #line 45 
  ldv_free(addr);
  #line 46 
  return;
}

#line 28  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 28 
void *malloc(size_t);
#line 29 
#line 29 
void *calloc(size_t, size_t);
#line 30 
#line 30 
void free(void *);
#line 45 
#line 22  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
unsigned int ldv_is_memory_alloc_failures;
#line 56  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 63  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_xcalloc(size_t nmemb, size_t size);
#line 60  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 88  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_calloc_unknown_size(void);
#line 61  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 97  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_zalloc_unknown_size(void);
#line 64  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_malloc(size_t size);
#line 65  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 37  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_calloc(size_t nmemb, size_t size);
#line 66  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 42  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_zalloc(size_t size);
#line 67  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 47  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void ldv_reference_free(void *s);
#line 69  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 52  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_realloc(void *ptr, size_t size);
#line 71  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 80  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xmalloc(size_t size);
#line 72  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 90  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xcalloc(size_t nmemb, size_t size);
#line 73  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 100  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xzalloc(size_t size);
#line 75  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 110  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_malloc_unknown_size(void);
#line 76  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 124  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_calloc_unknown_size(void);
#line 77  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 139  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_zalloc_unknown_size(void);
#line 83  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 106  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_xmalloc_unknown_size(size_t size);
#line 85  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 144  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xmalloc_unknown_size(size_t size);
#line 87  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 87 
void *external_allocated_data(void);
#line 22  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
unsigned int ldv_is_memory_alloc_failures = 1U;
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_malloc(size_t size)
{
  #line 26 
  void *res;
  #line 28 
  if (ldv_is_memory_alloc_failures != 0U) {
    #line 28 
    if (ldv_undef_int() != 0) 
                              #line 29 
                              return (void *)0;
  }
  #line 32 
  res = malloc(size);
  #line 33 
  __VERIFIER_assume(res != (void *)0);
  #line 34 
  return res;
}

#line 37  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_calloc(size_t nmemb, size_t size)
{
  #line 39 
  return calloc(nmemb,size);
}

#line 42  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_zalloc(size_t size)
{
  #line 44 
  return calloc(1UL,size);
}

#line 47  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void ldv_reference_free(void *s)
{
  #line 49 
  free(s);
  #line 50 
  return;
}

#line 52  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_realloc(void *ptr, size_t size)
{
  #line 54 
  void *res;
  #line 56 
  if (ptr != (void *)0 && size == 0UL) {
    #line 57 
    free(ptr);
    #line 58 
    return (void *)0;
  }
  #line 61 
  if (ptr == (void *)0) {
    #line 62 
    res = malloc(size);
    #line 63 
    return res;
  }
  #line 66 
  if (ldv_undef_int() != 0) {
    #line 68 
    res = malloc(size);
    #line 69 
    __VERIFIER_assume(res != (void *)0);
    #line 71 
    memcpy(res,ptr,size);
    #line 72 
    free(ptr);
    #line 74 
    return res;
  }
  else 
       #line 77 
       return (void *)0;
}

#line 80  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xmalloc(size_t size)
{
  #line 82 
  void *res;
  #line 84 
  res = malloc(size);
  #line 85 
  __VERIFIER_assume(res != (void *)0);
  #line 87 
  return res;
}

#line 90  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xcalloc(size_t nmemb, size_t size)
{
  #line 92 
  void *res;
  #line 94 
  res = calloc(nmemb,size);
  #line 95 
  __VERIFIER_assume(res != (void *)0);
  #line 97 
  return res;
}

#line 100  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xzalloc(size_t size)
{
  #line 102 
  void *res;
  #line 104 
  res = calloc(1UL,size);
  #line 105 
  __VERIFIER_assume(res != (void *)0);
  #line 107 
  return res;
}

#line 110  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_malloc_unknown_size(void)
{
  #line 112 
  void *res;
  #line 114 
  if (ldv_undef_int() != 0) {
    #line 116 
    res = external_allocated_data();
    #line 117 
    __VERIFIER_assume(res != (void *)0);
    #line 118 
    return res;
  }
  else 
       #line 121 
       return (void *)0;
}

#line 124  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_calloc_unknown_size(void)
{
  #line 126 
  void *res;
  #line 128 
  if (ldv_undef_int() != 0) {
    #line 130 
    res = external_allocated_data();
    #line 131 
    memset(res,0,8UL);
    #line 132 
    __VERIFIER_assume(res != (void *)0);
    #line 133 
    return res;
  }
  else 
       #line 136 
       return (void *)0;
}

#line 139  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_zalloc_unknown_size(void)
{
  #line 141 
  return ldv_reference_calloc_unknown_size();
}

#line 144  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xmalloc_unknown_size(size_t size)
{
  #line 146 
  void *res;
  #line 149 
  res = external_allocated_data();
  #line 150 
  __VERIFIER_assume(res != (void *)0);
  #line 152 
  return res;
}

#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_malloc(size_t size)
{
  #line 25 
  void *res;
  #line 26 
  res = ldv_reference_malloc(size);
  #line 27 
  if (res != (void *)0) {
    #line 28 
    int tmp_0;
    #line 28 
    if (ldv_is_err(res)) 
                         #line 28 
                         tmp_0 = 0; else 
                                         #line 28 
                                         tmp_0 = 1;
    #line 28 
    __VERIFIER_assume(tmp_0);
  }
  #line 29 
  return res;
}

#line 32  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_calloc(size_t nmemb, size_t size)
{
  #line 34 
  void *res;
  #line 35 
  res = ldv_reference_calloc(nmemb,size);
  #line 36 
  if (res != (void *)0) {
    #line 37 
    int tmp_0;
    #line 37 
    if (ldv_is_err(res)) 
                         #line 37 
                         tmp_0 = 0; else 
                                         #line 37 
                                         tmp_0 = 1;
    #line 37 
    __VERIFIER_assume(tmp_0);
  }
  #line 38 
  return res;
}

#line 41  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_zalloc(size_t size)
{
  #line 43 
  void *res;
  #line 44 
  res = ldv_reference_zalloc(size);
  #line 45 
  if (res != (void *)0) {
    #line 46 
    int tmp_0;
    #line 46 
    if (ldv_is_err(res)) 
                         #line 46 
                         tmp_0 = 0; else 
                                         #line 46 
                                         tmp_0 = 1;
    #line 46 
    __VERIFIER_assume(tmp_0);
  }
  #line 47 
  return res;
}

#line 50  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void ldv_free(void *s)
{
  #line 52 
  ldv_reference_free(s);
  #line 53 
  return;
}

#line 55  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_xmalloc(size_t size)
{
  #line 57 
  void *res;
  #line 59 
  int tmp_0;
  #line 58 
  res = ldv_reference_xmalloc(size);
  #line 59 
  if (ldv_is_err(res)) 
                       #line 59 
                       tmp_0 = 0; else 
                                       #line 59 
                                       tmp_0 = 1;
  #line 59 
  __VERIFIER_assume(tmp_0);
  #line 60 
  return res;
}

#line 63  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_xcalloc(size_t nmemb, size_t size)
{
  #line 65 
  void *res;
  #line 67 
  int tmp_0;
  #line 66 
  res = ldv_reference_xcalloc(nmemb,size);
  #line 67 
  if (ldv_is_err(res)) 
                       #line 67 
                       tmp_0 = 0; else 
                                       #line 67 
                                       tmp_0 = 1;
  #line 67 
  __VERIFIER_assume(tmp_0);
  #line 68 
  return res;
}

#line 71  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_xzalloc(size_t size)
{
  #line 73 
  void *res;
  #line 75 
  int tmp_0;
  #line 74 
  res = ldv_reference_xzalloc(size);
  #line 75 
  if (ldv_is_err(res)) 
                       #line 75 
                       tmp_0 = 0; else 
                                       #line 75 
                                       tmp_0 = 1;
  #line 75 
  __VERIFIER_assume(tmp_0);
  #line 76 
  return res;
}

#line 79  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_malloc_unknown_size(void)
{
  #line 81 
  void *res;
  #line 82 
  res = ldv_reference_malloc_unknown_size();
  #line 83 
  if (res != (void *)0) {
    #line 84 
    int tmp_0;
    #line 84 
    if (ldv_is_err(res)) 
                         #line 84 
                         tmp_0 = 0; else 
                                         #line 84 
                                         tmp_0 = 1;
    #line 84 
    __VERIFIER_assume(tmp_0);
  }
  #line 85 
  return res;
}

#line 88  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_calloc_unknown_size(void)
{
  #line 90 
  void *res;
  #line 91 
  res = ldv_reference_calloc_unknown_size();
  #line 92 
  if (res != (void *)0) {
    #line 93 
    int tmp_0;
    #line 93 
    if (ldv_is_err(res)) 
                         #line 93 
                         tmp_0 = 0; else 
                                         #line 93 
                                         tmp_0 = 1;
    #line 93 
    __VERIFIER_assume(tmp_0);
  }
  #line 94 
  return res;
}

#line 97  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_zalloc_unknown_size(void)
{
  #line 99 
  void *res;
  #line 100 
  res = ldv_reference_zalloc_unknown_size();
  #line 101 
  if (res != (void *)0) {
    #line 102 
    int tmp_0;
    #line 102 
    if (ldv_is_err(res)) 
                         #line 102 
                         tmp_0 = 0; else 
                                         #line 102 
                                         tmp_0 = 1;
    #line 102 
    __VERIFIER_assume(tmp_0);
  }
  #line 103 
  return res;
}

#line 106  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_xmalloc_unknown_size(size_t size)
{
  #line 108 
  void *res;
  #line 110 
  int tmp_0;
  #line 109 
  res = ldv_reference_xmalloc_unknown_size(size);
  #line 110 
  if (ldv_is_err(res)) 
                       #line 110 
                       tmp_0 = 0; else 
                                       #line 110 
                                       tmp_0 = 1;
  #line 110 
  __VERIFIER_assume(tmp_0);
  #line 111 
  return res;
}

/* compiler builtin: 
   long __builtin_expect(long exp, long c);   */
#line 22  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/common.h"
#line 22 
void __VERIFIER_error(void);
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/common.h"
long __builtin_expect(long exp, long c)
{
  #line 26 
  return exp;
}

#line 35  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/gcc.c"
void __builtin_trap(void)
{
  #line 37 
  __VERIFIER_error();
  #line 38 
  return;
}

#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 53  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
long ldv_undef_long(void);
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 61  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
unsigned int ldv_undef_uint(void);
#line 26  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 77  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
unsigned long ldv_undef_ulong(void);
#line 27  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 85  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
unsigned long long ldv_undef_ulonglong(void);
#line 28  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 69  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
void *ldv_undef_ptr(void);
#line 37  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 111  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int ldv_undef_int_nonnegative(void);
#line 43  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 129  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
void *ldv_undef_ptr_non_null(void);
#line 54  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 139  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int __ldv_undef_int_range(int begin, int end);
#line 56  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 151  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int __ldv_undef_int_range2(int begin, int end);
#line 29 
#line 29 
int __VERIFIER_nondet_int(void);
#line 31 
#line 31 
long __VERIFIER_nondet_long(void);
#line 38 
#line 38 
unsigned int __VERIFIER_nondet_uint(void);
#line 41 
#line 41 
unsigned long __VERIFIER_nondet_ulong(void);
#line 42 
#line 42 
unsigned long long __VERIFIER_nondet_ulonglong(void);
#line 43 
#line 43 
void *__VERIFIER_nondet_pointer(void);
#line 45  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int ldv_undef_int(void)
{
  #line 48 
  int undef_int = __VERIFIER_nondet_int();
  #line 50 
  return undef_int;
}

#line 53  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
long ldv_undef_long(void)
{
  #line 56 
  long undef_long = __VERIFIER_nondet_long();
  #line 58 
  return undef_long;
}

#line 61  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
unsigned int ldv_undef_uint(void)
{
  #line 64 
  unsigned int undef_uint = __VERIFIER_nondet_uint();
  #line 66 
  return undef_uint;
}

#line 69  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
void *ldv_undef_ptr(void)
{
  #line 72 
  void *undef_ptr = __VERIFIER_nondet_pointer();
  #line 74 
  return undef_ptr;
}

#line 77  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
unsigned long ldv_undef_ulong(void)
{
  #line 80 
  unsigned long undef_ulong = __VERIFIER_nondet_ulong();
  #line 82 
  return undef_ulong;
}

#line 85  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
unsigned long long ldv_undef_ulonglong(void)
{
  #line 88 
  unsigned long long undef_ulonglong = __VERIFIER_nondet_ulonglong();
  #line 90 
  return undef_ulonglong;
}

#line 93  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int ldv_undef_int_positive(void)
{
  #line 95 
  int ret = ldv_undef_int();
  #line 97 
  __VERIFIER_assume(ret > 0);
  #line 99 
  return ret;
}

#line 102  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int ldv_undef_int_negative(void)
{
  #line 104 
  int ret = ldv_undef_int();
  #line 106 
  __VERIFIER_assume(ret < 0);
  #line 108 
  return ret;
}

#line 111  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int ldv_undef_int_nonnegative(void)
{
  #line 113 
  int ret = ldv_undef_int();
  #line 115 
  __VERIFIER_assume(ret >= 0);
  #line 117 
  return ret;
}

#line 120  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int ldv_undef_int_nonpositive(void)
{
  #line 122 
  int ret = ldv_undef_int();
  #line 124 
  __VERIFIER_assume(ret <= 0);
  #line 126 
  return ret;
}

#line 129  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
void *ldv_undef_ptr_non_null(void)
{
  #line 131 
  void *ret = ldv_undef_ptr();
  #line 133 
  __VERIFIER_assume(ret != (void *)0);
  #line 135 
  return ret;
}

#line 139  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int __ldv_undef_int_range(int begin, int end)
{
  #line 141 
  int ret;
  #line 143 
  ret = ldv_undef_int();
  #line 144 
  __VERIFIER_assume(ret >= begin);
  #line 145 
  __VERIFIER_assume(ret <= end);
  #line 147 
  return ret;
}

#line 151  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int __ldv_undef_int_range2(int begin, int end)
{
  #line 153 
  int ret;
  #line 155 
  ret = begin;
  #line 155 
  while (ret < end) {
    #line 156 
    if (ldv_undef_int() != 0) 
                              #line 157 
                              break;
    #line 155 
    ret ++;
  }
  #line 159 
  return ret;
}

#line 62  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 62 
void ldv_initialize(void);
#line 97 
#line 97 
void ldv_failed_register_netdev(void);
#line 123 
#line 123 
void ldv_pre_probe(void);
#line 35  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/thread.h"
#line 35 
int pthread_create(pthread_t *, pthread_attr_t *, void *(*)(void *), void *);
#line 39 
#line 39 
int pthread_join(pthread_t, void **);
#line 110  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ice/ice.ko/concurrency safety/emg/0/environment_model.c"
#line 186 
void emg_dispatch_deregister_11(struct net_device *arg0);
#line 111 
#line 166 
void emg_dispatch_deregister_8(struct pci_driver *arg0);
#line 112 
#line 146 
void emg_dispatch_instance_deregister_4(struct timer_list *arg0);
#line 113 
#line 155 
void emg_dispatch_instance_register_7(struct timer_list *arg0);
#line 114 
#line 175 
void emg_dispatch_register_10(struct net_device *arg0);
#line 115 
#line 135 
void emg_dispatch_register_2(struct pci_driver *arg0);
#line 116 
#line 1799 
void *emg_entry_point_insmod(void *arg0);
#line 119 
#line 195 
void *emg_net_random_allocationless_scenario_ice_start_xmit(void *arg0);
#line 120 
#line 1332 
void *emg_pci_pci_scenario_ice_driver(void *arg0);
#line 124 
#line 1511 
void *emg_timer_timer_scenario_2(void *arg0);
#line 126 
#line 1828 
int main(void);
#line 129  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ice/ice.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_12;
#line 130  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ice/ice.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_13;
#line 131  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ice/ice.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_14;
#line 135  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ice/ice.ko/concurrency safety/emg/0/environment_model.c"
void emg_dispatch_register_2(struct pci_driver *arg0)
{
  #line 136 
  int ret;
  #line 137 
  struct emg_struct_pci_scenario_ice_driver_13 *cf_arg_13;
  #line 138 
  cf_arg_13 = (struct emg_struct_pci_scenario_ice_driver_13 *)ldv_xmalloc(16UL);
  #line 139 
  cf_arg_13->arg0 = arg0;
  #line 140 
  ret = pthread_create(& emg_thread_13,(pthread_attr_t *)0,& emg_pci_pci_scenario_ice_driver,(void *)cf_arg_13);
  #line 141 
  __VERIFIER_assume(ret == 0);
  #line 142 
  return;
}

#line 146  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ice/ice.ko/concurrency safety/emg/0/environment_model.c"
void emg_dispatch_instance_deregister_4(struct timer_list *arg0)
{
  #line 147 
  int ret;
  #line 148 
  struct emg_struct_timer_scenario_2_14 *cf_arg_14;
  #line 149 
  ret = pthread_join(emg_thread_14,(void **)0);
  #line 150 
  __VERIFIER_assume(ret == 0);
  #line 151 
  return;
}

#line 155  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ice/ice.ko/concurrency safety/emg/0/environment_model.c"
void emg_dispatch_instance_register_7(struct timer_list *arg0)
{
  #line 156 
  int ret;
  #line 157 
  struct emg_struct_timer_scenario_2_14 *cf_arg_14;
  #line 158 
  cf_arg_14 = (struct emg_struct_timer_scenario_2_14 *)ldv_xmalloc(16UL);
  #line 159 
  cf_arg_14->arg0 = arg0;
  #line 160 
  ret = pthread_create(& emg_thread_14,(pthread_attr_t *)0,& emg_timer_timer_scenario_2,(void *)cf_arg_14);
  #line 161 
  __VERIFIER_assume(ret == 0);
  #line 162 
  return;
}

#line 166  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ice/ice.ko/concurrency safety/emg/0/environment_model.c"
void emg_dispatch_deregister_8(struct pci_driver *arg0)
{
  #line 167 
  int ret;
  #line 168 
  struct emg_struct_pci_scenario_ice_driver_13 *cf_arg_13;
  #line 169 
  ret = pthread_join(emg_thread_13,(void **)0);
  #line 170 
  __VERIFIER_assume(ret == 0);
  #line 171 
  return;
}

#line 175  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ice/ice.ko/concurrency safety/emg/0/environment_model.c"
void emg_dispatch_register_10(struct net_device *arg0)
{
  #line 176 
  int ret;
  #line 177 
  struct emg_struct_random_allocationless_scenario_ice_start_xmit_12 *cf_arg_12;
  #line 178 
  cf_arg_12 = (struct emg_struct_random_allocationless_scenario_ice_start_xmit_12 *)ldv_xmalloc(16UL);
  #line 179 
  cf_arg_12->arg0 = arg0;
  #line 180 
  ret = pthread_create(& emg_thread_12,(pthread_attr_t *)0,& emg_net_random_allocationless_scenario_ice_start_xmit,(void *)cf_arg_12);
  #line 181 
  __VERIFIER_assume(ret == 0);
  #line 182 
  return;
}

#line 186  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ice/ice.ko/concurrency safety/emg/0/environment_model.c"
void emg_dispatch_deregister_11(struct net_device *arg0)
{
  #line 187 
  int ret;
  #line 188 
  struct emg_struct_random_allocationless_scenario_ice_start_xmit_12 *cf_arg_12;
  #line 189 
  ret = pthread_join(emg_thread_12,(void **)0);
  #line 190 
  __VERIFIER_assume(ret == 0);
  #line 191 
  return;
}

#line 195  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ice/ice.ko/concurrency safety/emg/0/environment_model.c"
void *emg_net_random_allocationless_scenario_ice_start_xmit(void *arg0)
{
  #line 198 
  struct net_device *emg_12_container;
  #line 199 
  struct sk_buff *emg_12_emg_param_0_0;
  #line 200 
  struct sk_buff *emg_12_emg_param_0_48;
  #line 201 
  struct ndmsg *emg_12_emg_param_0_57;
  #line 202 
  struct ndmsg *emg_12_emg_param_0_63;
  #line 203 
  struct sk_buff *emg_12_emg_param_0_67;
  #line 204 
  struct sk_buff *emg_12_emg_param_0_90;
  #line 205 
  struct ethtool_link_ksettings *emg_12_emg_param_1_1;
  #line 206 
  struct ethtool_ringparam *emg_12_emg_param_1_10;
  #line 207 
  struct ethtool_test *emg_12_emg_param_1_100;
  #line 208 
  struct ethtool_channels *emg_12_emg_param_1_102;
  #line 209 
  struct ethtool_coalesce *emg_12_emg_param_1_103;
  #line 210 
  struct ethtool_fecparam *emg_12_emg_param_1_104;
  #line 211 
  struct ethtool_link_ksettings *emg_12_emg_param_1_105;
  #line 212 
  unsigned int emg_12_emg_param_1_106;
  #line 213 
  struct ethtool_pauseparam *emg_12_emg_param_1_107;
  #line 214 
  unsigned int emg_12_emg_param_1_108;
  #line 215 
  struct ethtool_eeprom *emg_12_emg_param_1_11;
  #line 216 
  enum ethtool_phys_id_state *emg_12_emg_param_1_110;
  #line 217 
  unsigned int emg_12_emg_param_1_111;
  #line 218 
  struct ethtool_ringparam *emg_12_emg_param_1_112;
  #line 219 
  unsigned int *emg_12_emg_param_1_113;
  #line 220 
  struct rtnl_link_stats64 *emg_12_emg_param_1_13;
  #line 221 
  unsigned int emg_12_emg_param_1_14;
  #line 222 
  struct ethtool_regs *emg_12_emg_param_1_15;
  #line 223 
  struct ethtool_drvinfo *emg_12_emg_param_1_17;
  #line 224 
  int emg_12_emg_param_1_18;
  #line 225 
  void *emg_12_emg_param_1_19;
  #line 226 
  struct ethtool_link_ksettings *emg_12_emg_param_1_2;
  #line 227 
  struct ethtool_channels *emg_12_emg_param_1_20;
  #line 228 
  struct ethtool_coalesce *emg_12_emg_param_1_21;
  #line 229 
  struct ethtool_drvinfo *emg_12_emg_param_1_22;
  #line 230 
  struct ethtool_eeprom *emg_12_emg_param_1_23;
  #line 231 
  struct ethtool_stats *emg_12_emg_param_1_25;
  #line 232 
  struct ethtool_fecparam *emg_12_emg_param_1_27;
  #line 233 
  struct ethtool_link_ksettings *emg_12_emg_param_1_28;
  #line 234 
  struct ethtool_eeprom *emg_12_emg_param_1_29;
  #line 235 
  struct ethtool_channels *emg_12_emg_param_1_3;
  #line 236 
  struct ethtool_modinfo *emg_12_emg_param_1_31;
  #line 237 
  struct ethtool_pauseparam *emg_12_emg_param_1_32;
  #line 238 
  unsigned int emg_12_emg_param_1_33;
  #line 239 
  struct ethtool_regs *emg_12_emg_param_1_35;
  #line 240 
  struct ethtool_ringparam *emg_12_emg_param_1_37;
  #line 241 
  unsigned int *emg_12_emg_param_1_38;
  #line 242 
  int emg_12_emg_param_1_4;
  #line 243 
  struct ethtool_rxnfc *emg_12_emg_param_1_41;
  #line 244 
  int emg_12_emg_param_1_43;
  #line 245 
  unsigned int emg_12_emg_param_1_44;
  #line 246 
  struct ethtool_ts_info *emg_12_emg_param_1_46;
  #line 247 
  struct netdev_bpf *emg_12_emg_param_1_47;
  #line 248 
  unsigned int emg_12_emg_param_1_49;
  #line 249 
  struct ethtool_stats *emg_12_emg_param_1_5;
  #line 250 
  struct nlmsghdr *emg_12_emg_param_1_53;
  #line 251 
  int emg_12_emg_param_1_56;
  #line 252 
  struct nlattr **emg_12_emg_param_1_58;
  #line 253 
  struct nlattr **emg_12_emg_param_1_64;
  #line 254 
  struct rtnl_link_stats64 *emg_12_emg_param_1_69;
  #line 255 
  unsigned int emg_12_emg_param_1_7;
  #line 256 
  int emg_12_emg_param_1_70;
  #line 257 
  int emg_12_emg_param_1_72;
  #line 258 
  unsigned long long emg_12_emg_param_1_74;
  #line 259 
  void *emg_12_emg_param_1_75;
  #line 260 
  int emg_12_emg_param_1_76;
  #line 261 
  int emg_12_emg_param_1_78;
  #line 262 
  int emg_12_emg_param_1_80;
  #line 263 
  int emg_12_emg_param_1_82;
  #line 264 
  int emg_12_emg_param_1_84;
  #line 265 
  int emg_12_emg_param_1_86;
  #line 266 
  struct ethtool_ringparam *emg_12_emg_param_1_9;
  #line 267 
  unsigned short emg_12_emg_param_1_91;
  #line 268 
  unsigned short emg_12_emg_param_1_93;
  #line 269 
  int emg_12_emg_param_1_95;
  #line 270 
  unsigned int emg_12_emg_param_1_98;
  #line 271 
  unsigned long long *emg_12_emg_param_2_101;
  #line 272 
  struct ethtool_coalesce *emg_12_emg_param_2_109;
  #line 273 
  unsigned char *emg_12_emg_param_2_114;
  #line 274 
  unsigned char *emg_12_emg_param_2_12;
  #line 275 
  void *emg_12_emg_param_2_16;
  #line 276 
  unsigned char *emg_12_emg_param_2_24;
  #line 277 
  unsigned long long *emg_12_emg_param_2_26;
  #line 278 
  unsigned char *emg_12_emg_param_2_30;
  #line 279 
  struct ethtool_coalesce *emg_12_emg_param_2_34;
  #line 280 
  void *emg_12_emg_param_2_36;
  #line 281 
  unsigned char *emg_12_emg_param_2_39;
  #line 282 
  unsigned int *emg_12_emg_param_2_42;
  #line 283 
  unsigned char *emg_12_emg_param_2_45;
  #line 284 
  unsigned int emg_12_emg_param_2_50;
  #line 285 
  unsigned short emg_12_emg_param_2_54;
  #line 286 
  unsigned long long *emg_12_emg_param_2_6;
  #line 287 
  unsigned long long emg_12_emg_param_2_68;
  #line 288 
  struct ifla_vf_info *emg_12_emg_param_2_71;
  #line 289 
  struct ifla_vf_stats *emg_12_emg_param_2_73;
  #line 290 
  unsigned int emg_12_emg_param_2_77;
  #line 291 
  int emg_12_emg_param_2_79;
  #line 292 
  unsigned char *emg_12_emg_param_2_8;
  #line 293 
  unsigned char *emg_12_emg_param_2_81;
  #line 294 
  _Bool emg_12_emg_param_2_83;
  #line 295 
  _Bool emg_12_emg_param_2_85;
  #line 296 
  unsigned short emg_12_emg_param_2_87;
  #line 297 
  unsigned short emg_12_emg_param_2_92;
  #line 298 
  unsigned short emg_12_emg_param_2_94;
  #line 299 
  struct xdp_frame **emg_12_emg_param_2_96;
  #line 300 
  unsigned int emg_12_emg_param_2_99;
  #line 301 
  unsigned char emg_12_emg_param_3_115;
  #line 302 
  unsigned char *emg_12_emg_param_3_40;
  #line 303 
  struct netlink_ext_ack *emg_12_emg_param_3_55;
  #line 304 
  unsigned char *emg_12_emg_param_3_59;
  #line 305 
  unsigned char *emg_12_emg_param_3_65;
  #line 306 
  unsigned char emg_12_emg_param_3_88;
  #line 307 
  unsigned int emg_12_emg_param_3_97;
  #line 308 
  unsigned int emg_12_emg_param_4_51;
  #line 309 
  unsigned short emg_12_emg_param_4_60;
  #line 310 
  unsigned short emg_12_emg_param_4_66;
  #line 311 
  unsigned short emg_12_emg_param_4_89;
  #line 312 
  int emg_12_emg_param_5_52;
  #line 313 
  unsigned short emg_12_emg_param_5_61;
  #line 314 
  struct netlink_ext_ack *emg_12_emg_param_6_62;
  #line 315 
  int emg_repeat_cnt_call_12 = 1;
  #line 317 
  struct emg_struct_random_allocationless_scenario_ice_start_xmit_12 *data = (struct emg_struct_random_allocationless_scenario_ice_start_xmit_12 *)arg0;
  #line 322 
  if (data != (struct emg_struct_random_allocationless_scenario_ice_start_xmit_12 *)0) {
    #line 323 
    emg_12_container = data->arg0;
    #line 324 
    ldv_free((void *)data);
  }
  #line 329 
  goto emg_call_12;
  #line 333 
  return (void *)0;
  #line 336 
  emg_call_12: 
               #line 336 
  ;
  #line 337 
  switch (ldv_undef_int()) {
    #line 338 
    case 0: 
            #line 338 
    ;
    #line 340 
    emg_12_emg_param_1_113 = (unsigned int *)ldv_xmalloc_unknown_size(0UL);
    #line 340 
    emg_12_emg_param_1_113 = emg_12_emg_param_1_113;
    #line 341 
    emg_12_emg_param_2_114 = (unsigned char *)ldv_xmalloc_unknown_size(0UL);
    #line 341 
    emg_12_emg_param_2_114 = emg_12_emg_param_2_114;
    #line 345 
    emg_wrapper_ice_set_rxfh(emg_12_container,emg_12_emg_param_1_113,emg_12_emg_param_2_114,(unsigned char)((int)emg_12_emg_param_3_115));
    #line 349 
    ldv_free((void *)emg_12_emg_param_1_113);
    #line 350 
    ldv_free((void *)emg_12_emg_param_2_114);
    #line 352 
    break;
    #line 354 
    case 1: 
            #line 354 
    ;
    #line 356 
    emg_12_emg_param_1_112 = (struct ethtool_ringparam *)ldv_xmalloc_unknown_size(0UL);
    #line 356 
    emg_12_emg_param_1_112 = emg_12_emg_param_1_112;
    #line 360 
    emg_wrapper_ice_set_ringparam(emg_12_container,emg_12_emg_param_1_112);
    #line 364 
    ldv_free((void *)emg_12_emg_param_1_112);
    #line 366 
    break;
    #line 368 
    case 2: 
            #line 368 
    ;
    #line 370 
    emg_wrapper_ice_set_priv_flags(emg_12_container,emg_12_emg_param_1_111);
    #line 372 
    break;
    #line 374 
    case 3: 
            #line 374 
    ;
    #line 376 
    emg_12_emg_param_1_110 = (enum ethtool_phys_id_state *)ldv_xmalloc_unknown_size(0UL);
    #line 376 
    emg_12_emg_param_1_110 = emg_12_emg_param_1_110;
    #line 380 
    emg_wrapper_ice_set_phys_id(emg_12_container,*emg_12_emg_param_1_110);
    #line 384 
    ldv_free((void *)emg_12_emg_param_1_110);
    #line 386 
    break;
    #line 388 
    case 4: 
            #line 388 
    ;
    #line 390 
    emg_12_emg_param_2_109 = (struct ethtool_coalesce *)ldv_xmalloc_unknown_size(0UL);
    #line 390 
    emg_12_emg_param_2_109 = emg_12_emg_param_2_109;
    #line 394 
    emg_wrapper_ice_set_per_q_coalesce(emg_12_container,emg_12_emg_param_1_108,emg_12_emg_param_2_109);
    #line 398 
    ldv_free((void *)emg_12_emg_param_2_109);
    #line 400 
    break;
    #line 402 
    case 5: 
            #line 402 
    ;
    #line 404 
    emg_12_emg_param_1_107 = (struct ethtool_pauseparam *)ldv_xmalloc_unknown_size(0UL);
    #line 404 
    emg_12_emg_param_1_107 = emg_12_emg_param_1_107;
    #line 408 
    emg_wrapper_ice_set_pauseparam(emg_12_container,emg_12_emg_param_1_107);
    #line 412 
    ldv_free((void *)emg_12_emg_param_1_107);
    #line 414 
    break;
    #line 416 
    case 6: 
            #line 416 
    ;
    #line 418 
    emg_wrapper_ice_set_msglevel(emg_12_container,emg_12_emg_param_1_106);
    #line 420 
    break;
    #line 422 
    case 7: 
            #line 422 
    ;
    #line 424 
    emg_12_emg_param_1_105 = (struct ethtool_link_ksettings *)ldv_xmalloc_unknown_size(0UL);
    #line 424 
    emg_12_emg_param_1_105 = emg_12_emg_param_1_105;
    #line 428 
    emg_wrapper_ice_set_link_ksettings(emg_12_container,emg_12_emg_param_1_105);
    #line 432 
    ldv_free((void *)emg_12_emg_param_1_105);
    #line 434 
    break;
    #line 436 
    case 8: 
            #line 436 
    ;
    #line 438 
    emg_12_emg_param_1_104 = (struct ethtool_fecparam *)ldv_xmalloc_unknown_size(0UL);
    #line 438 
    emg_12_emg_param_1_104 = emg_12_emg_param_1_104;
    #line 442 
    emg_wrapper_ice_set_fecparam(emg_12_container,emg_12_emg_param_1_104);
    #line 446 
    ldv_free((void *)emg_12_emg_param_1_104);
    #line 448 
    break;
    #line 450 
    case 9: 
            #line 450 
    ;
    #line 452 
    emg_12_emg_param_1_103 = (struct ethtool_coalesce *)ldv_xmalloc_unknown_size(0UL);
    #line 452 
    emg_12_emg_param_1_103 = emg_12_emg_param_1_103;
    #line 456 
    emg_wrapper_ice_set_coalesce(emg_12_container,emg_12_emg_param_1_103);
    #line 460 
    ldv_free((void *)emg_12_emg_param_1_103);
    #line 462 
    break;
    #line 464 
    case 10: 
             #line 464 
    ;
    #line 466 
    emg_12_emg_param_1_102 = (struct ethtool_channels *)ldv_xmalloc_unknown_size(0UL);
    #line 466 
    emg_12_emg_param_1_102 = emg_12_emg_param_1_102;
    #line 470 
    emg_wrapper_ice_set_channels(emg_12_container,emg_12_emg_param_1_102);
    #line 474 
    ldv_free((void *)emg_12_emg_param_1_102);
    #line 476 
    break;
    #line 478 
    case 11: 
             #line 478 
    ;
    #line 480 
    emg_12_emg_param_1_100 = (struct ethtool_test *)ldv_xmalloc_unknown_size(0UL);
    #line 480 
    emg_12_emg_param_1_100 = emg_12_emg_param_1_100;
    #line 481 
    emg_12_emg_param_2_101 = (unsigned long long *)ldv_xmalloc_unknown_size(0UL);
    #line 481 
    emg_12_emg_param_2_101 = emg_12_emg_param_2_101;
    #line 485 
    emg_wrapper_ice_self_test(emg_12_container,emg_12_emg_param_1_100,emg_12_emg_param_2_101);
    #line 489 
    ldv_free((void *)emg_12_emg_param_1_100);
    #line 490 
    ldv_free((void *)emg_12_emg_param_2_101);
    #line 492 
    break;
    #line 494 
    case 12: 
             #line 494 
    ;
    #line 496 
    emg_wrapper_ice_nway_reset(emg_12_container);
    #line 498 
    break;
    #line 500 
    case 13: 
             #line 500 
    ;
    #line 502 
    ice_xsk_wakeup(emg_12_container,emg_12_emg_param_1_98,emg_12_emg_param_2_99);
    #line 504 
    break;
    #line 506 
    case 14: 
             #line 506 
    ;
    #line 508 
    emg_12_emg_param_2_96 = (struct xdp_frame **)ldv_xmalloc_unknown_size(0UL);
    #line 508 
    emg_12_emg_param_2_96 = emg_12_emg_param_2_96;
    #line 512 
    ice_xdp_xmit(emg_12_container,emg_12_emg_param_1_95,emg_12_emg_param_2_96,emg_12_emg_param_3_97);
    #line 516 
    ldv_free((void *)emg_12_emg_param_2_96);
    #line 518 
    break;
    #line 520 
    case 15: 
             #line 520 
    ;
    #line 522 
    emg_wrapper_ice_vlan_rx_kill_vid(emg_12_container,(unsigned short)((int)emg_12_emg_param_1_93),(unsigned short)((int)emg_12_emg_param_2_94));
    #line 524 
    break;
    #line 526 
    case 16: 
             #line 526 
    ;
    #line 528 
    emg_wrapper_ice_vlan_rx_add_vid(emg_12_container,(unsigned short)((int)emg_12_emg_param_1_91),(unsigned short)((int)emg_12_emg_param_2_92));
    #line 530 
    break;
    #line 532 
    case 17: 
             #line 532 
    ;
    #line 534 
    eth_validate_addr(emg_12_container);
    #line 536 
    break;
    #line 538 
    case 18: 
             #line 538 
    ;
    #line 540 
    emg_wrapper_ice_tx_timeout(emg_12_container);
    #line 542 
    break;
    #line 544 
    case 19: 
             #line 544 
    ;
    #line 546 
    emg_12_emg_param_0_90 = (struct sk_buff *)ldv_xmalloc_unknown_size(0UL);
    #line 546 
    emg_12_emg_param_0_90 = emg_12_emg_param_0_90;
    #line 550 
    ice_start_xmit(emg_12_emg_param_0_90,emg_12_container);
    #line 554 
    ldv_free((void *)emg_12_emg_param_0_90);
    #line 556 
    break;
    #line 558 
    case 20: 
             #line 558 
    ;
    #line 560 
    ice_set_vf_port_vlan(emg_12_container,emg_12_emg_param_1_86,(unsigned short)((int)emg_12_emg_param_2_87),(unsigned char)((int)emg_12_emg_param_3_88),(unsigned short)((int)emg_12_emg_param_4_89));
    #line 562 
    break;
    #line 564 
    case 21: 
             #line 564 
    ;
    #line 566 
    ice_set_vf_trust(emg_12_container,emg_12_emg_param_1_84,(_Bool)((bool)((int)emg_12_emg_param_2_85) != 0));
    #line 568 
    break;
    #line 570 
    case 22: 
             #line 570 
    ;
    #line 572 
    ice_set_vf_spoofchk(emg_12_container,emg_12_emg_param_1_82,(_Bool)((bool)((int)emg_12_emg_param_2_83) != 0));
    #line 574 
    break;
    #line 576 
    case 23: 
             #line 576 
    ;
    #line 578 
    emg_12_emg_param_2_81 = (unsigned char *)ldv_xmalloc_unknown_size(0UL);
    #line 578 
    emg_12_emg_param_2_81 = emg_12_emg_param_2_81;
    #line 582 
    emg_wrapper_ice_set_vf_mac(emg_12_container,emg_12_emg_param_1_80,emg_12_emg_param_2_81);
    #line 586 
    ldv_free((void *)emg_12_emg_param_2_81);
    #line 588 
    break;
    #line 590 
    case 24: 
             #line 590 
    ;
    #line 592 
    ice_set_vf_link_state(emg_12_container,emg_12_emg_param_1_78,emg_12_emg_param_2_79);
    #line 594 
    break;
    #line 596 
    case 25: 
             #line 596 
    ;
    #line 598 
    emg_wrapper_ice_set_tx_maxrate(emg_12_container,emg_12_emg_param_1_76,emg_12_emg_param_2_77);
    #line 600 
    break;
    #line 602 
    case 26: 
             #line 602 
    ;
    #line 604 
    emg_wrapper_ice_set_rx_mode(emg_12_container);
    #line 606 
    break;
    #line 608 
    case 27: 
             #line 608 
    ;
    #line 610 
    emg_12_emg_param_1_75 = ldv_xmalloc_unknown_size(0UL);
    #line 610 
    emg_12_emg_param_1_75 = emg_12_emg_param_1_75;
    #line 614 
    emg_wrapper_ice_set_mac_address(emg_12_container,emg_12_emg_param_1_75);
    #line 618 
    ldv_free(emg_12_emg_param_1_75);
    #line 620 
    break;
    #line 622 
    case 28: 
             #line 622 
    ;
    #line 624 
    emg_wrapper_ice_set_features(emg_12_container,emg_12_emg_param_1_74);
    #line 626 
    break;
    #line 628 
    case 29: 
             #line 628 
    ;
    #line 630 
    emg_12_emg_param_2_73 = (struct ifla_vf_stats *)ldv_xmalloc_unknown_size(0UL);
    #line 630 
    emg_12_emg_param_2_73 = emg_12_emg_param_2_73;
    #line 634 
    ice_get_vf_stats(emg_12_container,emg_12_emg_param_1_72,emg_12_emg_param_2_73);
    #line 638 
    ldv_free((void *)emg_12_emg_param_2_73);
    #line 640 
    break;
    #line 642 
    case 30: 
             #line 642 
    ;
    #line 644 
    emg_12_emg_param_2_71 = (struct ifla_vf_info *)ldv_xmalloc_unknown_size(0UL);
    #line 644 
    emg_12_emg_param_2_71 = emg_12_emg_param_2_71;
    #line 648 
    ice_get_vf_cfg(emg_12_container,emg_12_emg_param_1_70,emg_12_emg_param_2_71);
    #line 652 
    ldv_free((void *)emg_12_emg_param_2_71);
    #line 654 
    break;
    #line 656 
    case 31: 
             #line 656 
    ;
    #line 658 
    emg_12_emg_param_1_69 = (struct rtnl_link_stats64 *)ldv_xmalloc_unknown_size(0UL);
    #line 658 
    emg_12_emg_param_1_69 = emg_12_emg_param_1_69;
    #line 662 
    emg_wrapper_ice_get_stats64(emg_12_container,emg_12_emg_param_1_69);
    #line 666 
    ldv_free((void *)emg_12_emg_param_1_69);
    #line 668 
    break;
    #line 670 
    case 32: 
             #line 670 
    ;
    #line 672 
    emg_12_emg_param_0_67 = (struct sk_buff *)ldv_xmalloc_unknown_size(0UL);
    #line 672 
    emg_12_emg_param_0_67 = emg_12_emg_param_0_67;
    #line 676 
    emg_wrapper_ice_features_check(emg_12_emg_param_0_67,emg_12_container,emg_12_emg_param_2_68);
    #line 680 
    ldv_free((void *)emg_12_emg_param_0_67);
    #line 682 
    break;
    #line 684 
    case 33: 
             #line 684 
    ;
    #line 686 
    emg_12_emg_param_0_63 = (struct ndmsg *)ldv_xmalloc_unknown_size(0UL);
    #line 686 
    emg_12_emg_param_0_63 = emg_12_emg_param_0_63;
    #line 687 
    emg_12_emg_param_1_64 = (struct nlattr **)ldv_xmalloc_unknown_size(0UL);
    #line 687 
    emg_12_emg_param_1_64 = emg_12_emg_param_1_64;
    #line 688 
    emg_12_emg_param_3_65 = (unsigned char *)ldv_xmalloc_unknown_size(0UL);
    #line 688 
    emg_12_emg_param_3_65 = emg_12_emg_param_3_65;
    #line 692 
    emg_wrapper_ice_fdb_del(emg_12_emg_param_0_63,emg_12_emg_param_1_64,emg_12_container,emg_12_emg_param_3_65,(unsigned short)((int)emg_12_emg_param_4_66));
    #line 696 
    ldv_free((void *)emg_12_emg_param_0_63);
    #line 697 
    ldv_free((void *)emg_12_emg_param_1_64);
    #line 698 
    ldv_free((void *)emg_12_emg_param_3_65);
    #line 700 
    break;
    #line 702 
    case 34: 
             #line 702 
    ;
    #line 704 
    emg_12_emg_param_0_57 = (struct ndmsg *)ldv_xmalloc_unknown_size(0UL);
    #line 704 
    emg_12_emg_param_0_57 = emg_12_emg_param_0_57;
    #line 705 
    emg_12_emg_param_1_58 = (struct nlattr **)ldv_xmalloc_unknown_size(0UL);
    #line 705 
    emg_12_emg_param_1_58 = emg_12_emg_param_1_58;
    #line 706 
    emg_12_emg_param_3_59 = (unsigned char *)ldv_xmalloc_unknown_size(0UL);
    #line 706 
    emg_12_emg_param_3_59 = emg_12_emg_param_3_59;
    #line 707 
    emg_12_emg_param_6_62 = (struct netlink_ext_ack *)ldv_xmalloc_unknown_size(0UL);
    #line 707 
    emg_12_emg_param_6_62 = emg_12_emg_param_6_62;
    #line 711 
    emg_wrapper_ice_fdb_add(emg_12_emg_param_0_57,emg_12_emg_param_1_58,emg_12_container,emg_12_emg_param_3_59,(unsigned short)((int)emg_12_emg_param_4_60),(unsigned short)((int)emg_12_emg_param_5_61),emg_12_emg_param_6_62);
    #line 715 
    ldv_free((void *)emg_12_emg_param_0_57);
    #line 716 
    ldv_free((void *)emg_12_emg_param_1_58);
    #line 717 
    ldv_free((void *)emg_12_emg_param_3_59);
    #line 718 
    ldv_free((void *)emg_12_emg_param_6_62);
    #line 720 
    break;
    #line 722 
    case 35: 
             #line 722 
    ;
    #line 724 
    emg_wrapper_ice_change_mtu(emg_12_container,emg_12_emg_param_1_56);
    #line 726 
    break;
    #line 728 
    case 36: 
             #line 728 
    ;
    #line 730 
    emg_12_emg_param_1_53 = (struct nlmsghdr *)ldv_xmalloc_unknown_size(0UL);
    #line 730 
    emg_12_emg_param_1_53 = emg_12_emg_param_1_53;
    #line 731 
    emg_12_emg_param_3_55 = (struct netlink_ext_ack *)ldv_xmalloc_unknown_size(0UL);
    #line 731 
    emg_12_emg_param_3_55 = emg_12_emg_param_3_55;
    #line 735 
    emg_wrapper_ice_bridge_setlink(emg_12_container,emg_12_emg_param_1_53,(unsigned short)((int)emg_12_emg_param_2_54),emg_12_emg_param_3_55);
    #line 739 
    ldv_free((void *)emg_12_emg_param_1_53);
    #line 740 
    ldv_free((void *)emg_12_emg_param_3_55);
    #line 742 
    break;
    #line 744 
    case 37: 
             #line 744 
    ;
    #line 746 
    emg_12_emg_param_0_48 = (struct sk_buff *)ldv_xmalloc_unknown_size(0UL);
    #line 746 
    emg_12_emg_param_0_48 = emg_12_emg_param_0_48;
    #line 750 
    emg_wrapper_ice_bridge_getlink(emg_12_emg_param_0_48,emg_12_emg_param_1_49,emg_12_emg_param_2_50,emg_12_container,emg_12_emg_param_4_51,emg_12_emg_param_5_52);
    #line 754 
    ldv_free((void *)emg_12_emg_param_0_48);
    #line 756 
    break;
    #line 758 
    case 38: 
             #line 758 
    ;
    #line 760 
    emg_12_emg_param_1_47 = (struct netdev_bpf *)ldv_xmalloc_unknown_size(0UL);
    #line 760 
    emg_12_emg_param_1_47 = emg_12_emg_param_1_47;
    #line 764 
    emg_wrapper_ice_xdp(emg_12_container,emg_12_emg_param_1_47);
    #line 768 
    ldv_free((void *)emg_12_emg_param_1_47);
    #line 770 
    break;
    #line 772 
    case 39: 
             #line 772 
    ;
    #line 774 
    emg_12_emg_param_1_46 = (struct ethtool_ts_info *)ldv_xmalloc_unknown_size(0UL);
    #line 774 
    emg_12_emg_param_1_46 = emg_12_emg_param_1_46;
    #line 778 
    ethtool_op_get_ts_info(emg_12_container,emg_12_emg_param_1_46);
    #line 782 
    ldv_free((void *)emg_12_emg_param_1_46);
    #line 784 
    break;
    #line 786 
    case 40: 
             #line 786 
    ;
    #line 788 
    emg_12_emg_param_2_45 = (unsigned char *)ldv_xmalloc_unknown_size(0UL);
    #line 788 
    emg_12_emg_param_2_45 = emg_12_emg_param_2_45;
    #line 792 
    emg_wrapper_ice_get_strings(emg_12_container,emg_12_emg_param_1_44,emg_12_emg_param_2_45);
    #line 796 
    ldv_free((void *)emg_12_emg_param_2_45);
    #line 798 
    break;
    #line 800 
    case 41: 
             #line 800 
    ;
    #line 802 
    emg_wrapper_ice_get_sset_count(emg_12_container,emg_12_emg_param_1_43);
    #line 804 
    break;
    #line 806 
    case 42: 
             #line 806 
    ;
    #line 808 
    emg_12_emg_param_1_41 = (struct ethtool_rxnfc *)ldv_xmalloc_unknown_size(0UL);
    #line 808 
    emg_12_emg_param_1_41 = emg_12_emg_param_1_41;
    #line 809 
    emg_12_emg_param_2_42 = (unsigned int *)ldv_xmalloc_unknown_size(0UL);
    #line 809 
    emg_12_emg_param_2_42 = emg_12_emg_param_2_42;
    #line 813 
    emg_wrapper_ice_get_rxnfc(emg_12_container,emg_12_emg_param_1_41,emg_12_emg_param_2_42);
    #line 817 
    ldv_free((void *)emg_12_emg_param_1_41);
    #line 818 
    ldv_free((void *)emg_12_emg_param_2_42);
    #line 820 
    break;
    #line 822 
    case 43: 
             #line 822 
    ;
    #line 824 
    emg_wrapper_ice_get_rxfh_key_size(emg_12_container);
    #line 826 
    break;
    #line 828 
    case 44: 
             #line 828 
    ;
    #line 830 
    emg_wrapper_ice_get_rxfh_indir_size(emg_12_container);
    #line 832 
    break;
    #line 834 
    case 45: 
             #line 834 
    ;
    #line 836 
    emg_12_emg_param_1_38 = (unsigned int *)ldv_xmalloc_unknown_size(0UL);
    #line 836 
    emg_12_emg_param_1_38 = emg_12_emg_param_1_38;
    #line 837 
    emg_12_emg_param_2_39 = (unsigned char *)ldv_xmalloc_unknown_size(0UL);
    #line 837 
    emg_12_emg_param_2_39 = emg_12_emg_param_2_39;
    #line 838 
    emg_12_emg_param_3_40 = (unsigned char *)ldv_xmalloc_unknown_size(0UL);
    #line 838 
    emg_12_emg_param_3_40 = emg_12_emg_param_3_40;
    #line 842 
    emg_wrapper_ice_get_rxfh(emg_12_container,emg_12_emg_param_1_38,emg_12_emg_param_2_39,emg_12_emg_param_3_40);
    #line 846 
    ldv_free((void *)emg_12_emg_param_1_38);
    #line 847 
    ldv_free((void *)emg_12_emg_param_2_39);
    #line 848 
    ldv_free((void *)emg_12_emg_param_3_40);
    #line 850 
    break;
    #line 852 
    case 46: 
             #line 852 
    ;
    #line 854 
    emg_12_emg_param_1_37 = (struct ethtool_ringparam *)ldv_xmalloc_unknown_size(0UL);
    #line 854 
    emg_12_emg_param_1_37 = emg_12_emg_param_1_37;
    #line 858 
    emg_wrapper_ice_get_ringparam(emg_12_container,emg_12_emg_param_1_37);
    #line 862 
    ldv_free((void *)emg_12_emg_param_1_37);
    #line 864 
    break;
    #line 866 
    case 47: 
             #line 866 
    ;
    #line 868 
    emg_wrapper_ice_get_regs_len(emg_12_container);
    #line 870 
    break;
    #line 872 
    case 48: 
             #line 872 
    ;
    #line 874 
    emg_12_emg_param_1_35 = (struct ethtool_regs *)ldv_xmalloc_unknown_size(0UL);
    #line 874 
    emg_12_emg_param_1_35 = emg_12_emg_param_1_35;
    #line 875 
    emg_12_emg_param_2_36 = ldv_xmalloc_unknown_size(0UL);
    #line 875 
    emg_12_emg_param_2_36 = emg_12_emg_param_2_36;
    #line 879 
    emg_wrapper_ice_get_regs(emg_12_container,emg_12_emg_param_1_35,emg_12_emg_param_2_36);
    #line 883 
    ldv_free((void *)emg_12_emg_param_1_35);
    #line 884 
    ldv_free(emg_12_emg_param_2_36);
    #line 886 
    break;
    #line 888 
    case 49: 
             #line 888 
    ;
    #line 890 
    emg_wrapper_ice_get_priv_flags(emg_12_container);
    #line 892 
    break;
    #line 894 
    case 50: 
             #line 894 
    ;
    #line 896 
    emg_12_emg_param_2_34 = (struct ethtool_coalesce *)ldv_xmalloc_unknown_size(0UL);
    #line 896 
    emg_12_emg_param_2_34 = emg_12_emg_param_2_34;
    #line 900 
    emg_wrapper_ice_get_per_q_coalesce(emg_12_container,emg_12_emg_param_1_33,emg_12_emg_param_2_34);
    #line 904 
    ldv_free((void *)emg_12_emg_param_2_34);
    #line 906 
    break;
    #line 908 
    case 51: 
             #line 908 
    ;
    #line 910 
    emg_12_emg_param_1_32 = (struct ethtool_pauseparam *)ldv_xmalloc_unknown_size(0UL);
    #line 910 
    emg_12_emg_param_1_32 = emg_12_emg_param_1_32;
    #line 914 
    emg_wrapper_ice_get_pauseparam(emg_12_container,emg_12_emg_param_1_32);
    #line 918 
    ldv_free((void *)emg_12_emg_param_1_32);
    #line 920 
    break;
    #line 922 
    case 52: 
             #line 922 
    ;
    #line 924 
    emg_wrapper_ice_get_msglevel(emg_12_container);
    #line 926 
    break;
    #line 928 
    case 53: 
             #line 928 
    ;
    #line 930 
    emg_12_emg_param_1_31 = (struct ethtool_modinfo *)ldv_xmalloc_unknown_size(0UL);
    #line 930 
    emg_12_emg_param_1_31 = emg_12_emg_param_1_31;
    #line 934 
    emg_wrapper_ice_get_module_info(emg_12_container,emg_12_emg_param_1_31);
    #line 938 
    ldv_free((void *)emg_12_emg_param_1_31);
    #line 940 
    break;
    #line 942 
    case 54: 
             #line 942 
    ;
    #line 944 
    emg_12_emg_param_1_29 = (struct ethtool_eeprom *)ldv_xmalloc_unknown_size(0UL);
    #line 944 
    emg_12_emg_param_1_29 = emg_12_emg_param_1_29;
    #line 945 
    emg_12_emg_param_2_30 = (unsigned char *)ldv_xmalloc_unknown_size(0UL);
    #line 945 
    emg_12_emg_param_2_30 = emg_12_emg_param_2_30;
    #line 949 
    emg_wrapper_ice_get_module_eeprom(emg_12_container,emg_12_emg_param_1_29,emg_12_emg_param_2_30);
    #line 953 
    ldv_free((void *)emg_12_emg_param_1_29);
    #line 954 
    ldv_free((void *)emg_12_emg_param_2_30);
    #line 956 
    break;
    #line 958 
    case 55: 
             #line 958 
    ;
    #line 960 
    emg_12_emg_param_1_28 = (struct ethtool_link_ksettings *)ldv_xmalloc_unknown_size(0UL);
    #line 960 
    emg_12_emg_param_1_28 = emg_12_emg_param_1_28;
    #line 964 
    emg_wrapper_ice_get_link_ksettings(emg_12_container,emg_12_emg_param_1_28);
    #line 968 
    ldv_free((void *)emg_12_emg_param_1_28);
    #line 970 
    break;
    #line 972 
    case 56: 
             #line 972 
    ;
    #line 974 
    ethtool_op_get_link(emg_12_container);
    #line 976 
    break;
    #line 978 
    case 57: 
             #line 978 
    ;
    #line 980 
    emg_12_emg_param_1_27 = (struct ethtool_fecparam *)ldv_xmalloc_unknown_size(0UL);
    #line 980 
    emg_12_emg_param_1_27 = emg_12_emg_param_1_27;
    #line 984 
    emg_wrapper_ice_get_fecparam(emg_12_container,emg_12_emg_param_1_27);
    #line 988 
    ldv_free((void *)emg_12_emg_param_1_27);
    #line 990 
    break;
    #line 992 
    case 58: 
             #line 992 
    ;
    #line 994 
    emg_12_emg_param_1_25 = (struct ethtool_stats *)ldv_xmalloc_unknown_size(0UL);
    #line 994 
    emg_12_emg_param_1_25 = emg_12_emg_param_1_25;
    #line 995 
    emg_12_emg_param_2_26 = (unsigned long long *)ldv_xmalloc_unknown_size(0UL);
    #line 995 
    emg_12_emg_param_2_26 = emg_12_emg_param_2_26;
    #line 999 
    emg_wrapper_ice_get_ethtool_stats(emg_12_container,emg_12_emg_param_1_25,emg_12_emg_param_2_26);
    #line 1003 
    ldv_free((void *)emg_12_emg_param_1_25);
    #line 1004 
    ldv_free((void *)emg_12_emg_param_2_26);
    #line 1006 
    break;
    #line 1008 
    case 59: 
             #line 1008 
    ;
    #line 1010 
    emg_wrapper_ice_get_eeprom_len(emg_12_container);
    #line 1012 
    break;
    #line 1014 
    case 60: 
             #line 1014 
    ;
    #line 1016 
    emg_12_emg_param_1_23 = (struct ethtool_eeprom *)ldv_xmalloc_unknown_size(0UL);
    #line 1016 
    emg_12_emg_param_1_23 = emg_12_emg_param_1_23;
    #line 1017 
    emg_12_emg_param_2_24 = (unsigned char *)ldv_xmalloc_unknown_size(0UL);
    #line 1017 
    emg_12_emg_param_2_24 = emg_12_emg_param_2_24;
    #line 1021 
    emg_wrapper_ice_get_eeprom(emg_12_container,emg_12_emg_param_1_23,emg_12_emg_param_2_24);
    #line 1025 
    ldv_free((void *)emg_12_emg_param_1_23);
    #line 1026 
    ldv_free((void *)emg_12_emg_param_2_24);
    #line 1028 
    break;
    #line 1030 
    case 61: 
             #line 1030 
    ;
    #line 1032 
    emg_12_emg_param_1_22 = (struct ethtool_drvinfo *)ldv_xmalloc_unknown_size(0UL);
    #line 1032 
    emg_12_emg_param_1_22 = emg_12_emg_param_1_22;
    #line 1036 
    emg_wrapper_ice_get_drvinfo(emg_12_container,emg_12_emg_param_1_22);
    #line 1040 
    ldv_free((void *)emg_12_emg_param_1_22);
    #line 1042 
    break;
    #line 1044 
    case 62: 
             #line 1044 
    ;
    #line 1046 
    emg_12_emg_param_1_21 = (struct ethtool_coalesce *)ldv_xmalloc_unknown_size(0UL);
    #line 1046 
    emg_12_emg_param_1_21 = emg_12_emg_param_1_21;
    #line 1050 
    emg_wrapper_ice_get_coalesce(emg_12_container,emg_12_emg_param_1_21);
    #line 1054 
    ldv_free((void *)emg_12_emg_param_1_21);
    #line 1056 
    break;
    #line 1058 
    case 63: 
             #line 1058 
    ;
    #line 1060 
    emg_12_emg_param_1_20 = (struct ethtool_channels *)ldv_xmalloc_unknown_size(0UL);
    #line 1060 
    emg_12_emg_param_1_20 = emg_12_emg_param_1_20;
    #line 1064 
    emg_wrapper_ice_get_channels(emg_12_container,emg_12_emg_param_1_20);
    #line 1068 
    ldv_free((void *)emg_12_emg_param_1_20);
    #line 1070 
    break;
    #line 1072 
    case 64: 
             #line 1072 
    ;
    #line 1074 
    emg_12_emg_param_1_19 = ldv_xmalloc_unknown_size(0UL);
    #line 1074 
    emg_12_emg_param_1_19 = emg_12_emg_param_1_19;
    #line 1078 
    emg_wrapper_ice_set_mac_address(emg_12_container,emg_12_emg_param_1_19);
    #line 1082 
    ldv_free(emg_12_emg_param_1_19);
    #line 1084 
    break;
    #line 1086 
    case 65: 
             #line 1086 
    ;
    #line 1088 
    emg_wrapper_ice_change_mtu(emg_12_container,emg_12_emg_param_1_18);
    #line 1090 
    break;
    #line 1092 
    case 66: 
             #line 1092 
    ;
    #line 1094 
    emg_wrapper_ice_tx_timeout(emg_12_container);
    #line 1096 
    break;
    #line 1098 
    case 67: 
             #line 1098 
    ;
    #line 1100 
    emg_12_emg_param_1_17 = (struct ethtool_drvinfo *)ldv_xmalloc_unknown_size(0UL);
    #line 1100 
    emg_12_emg_param_1_17 = emg_12_emg_param_1_17;
    #line 1104 
    emg_wrapper_ice_get_drvinfo(emg_12_container,emg_12_emg_param_1_17);
    #line 1108 
    ldv_free((void *)emg_12_emg_param_1_17);
    #line 1110 
    break;
    #line 1112 
    case 68: 
             #line 1112 
    ;
    #line 1114 
    emg_wrapper_ice_get_regs_len(emg_12_container);
    #line 1116 
    break;
    #line 1118 
    case 69: 
             #line 1118 
    ;
    #line 1120 
    emg_12_emg_param_1_15 = (struct ethtool_regs *)ldv_xmalloc_unknown_size(0UL);
    #line 1120 
    emg_12_emg_param_1_15 = emg_12_emg_param_1_15;
    #line 1121 
    emg_12_emg_param_2_16 = ldv_xmalloc_unknown_size(0UL);
    #line 1121 
    emg_12_emg_param_2_16 = emg_12_emg_param_2_16;
    #line 1125 
    emg_wrapper_ice_get_regs(emg_12_container,emg_12_emg_param_1_15,emg_12_emg_param_2_16);
    #line 1129 
    ldv_free((void *)emg_12_emg_param_1_15);
    #line 1130 
    ldv_free(emg_12_emg_param_2_16);
    #line 1132 
    break;
    #line 1134 
    case 70: 
             #line 1134 
    ;
    #line 1136 
    emg_wrapper_ice_get_msglevel(emg_12_container);
    #line 1138 
    break;
    #line 1140 
    case 71: 
             #line 1140 
    ;
    #line 1142 
    emg_wrapper_ice_set_msglevel(emg_12_container,emg_12_emg_param_1_14);
    #line 1144 
    break;
    #line 1146 
    case 72: 
             #line 1146 
    ;
    #line 1148 
    emg_wrapper_ice_nway_reset(emg_12_container);
    #line 1150 
    break;
    #line 1152 
    case 73: 
             #line 1152 
    ;
    #line 1154 
    emg_wrapper_ice_get_eeprom_len(emg_12_container);
    #line 1156 
    break;
    #line 1158 
    case 74: 
             #line 1158 
    ;
    #line 1160 
    emg_12_emg_param_1_13 = (struct rtnl_link_stats64 *)ldv_xmalloc_unknown_size(0UL);
    #line 1160 
    emg_12_emg_param_1_13 = emg_12_emg_param_1_13;
    #line 1164 
    emg_wrapper_ice_get_stats64(emg_12_container,emg_12_emg_param_1_13);
    #line 1168 
    ldv_free((void *)emg_12_emg_param_1_13);
    #line 1170 
    break;
    #line 1172 
    case 75: 
             #line 1172 
    ;
    #line 1174 
    emg_12_emg_param_1_11 = (struct ethtool_eeprom *)ldv_xmalloc_unknown_size(0UL);
    #line 1174 
    emg_12_emg_param_1_11 = emg_12_emg_param_1_11;
    #line 1175 
    emg_12_emg_param_2_12 = (unsigned char *)ldv_xmalloc_unknown_size(0UL);
    #line 1175 
    emg_12_emg_param_2_12 = emg_12_emg_param_2_12;
    #line 1179 
    emg_wrapper_ice_get_eeprom(emg_12_container,emg_12_emg_param_1_11,emg_12_emg_param_2_12);
    #line 1183 
    ldv_free((void *)emg_12_emg_param_1_11);
    #line 1184 
    ldv_free((void *)emg_12_emg_param_2_12);
    #line 1186 
    break;
    #line 1188 
    case 76: 
             #line 1188 
    ;
    #line 1190 
    emg_12_emg_param_1_10 = (struct ethtool_ringparam *)ldv_xmalloc_unknown_size(0UL);
    #line 1190 
    emg_12_emg_param_1_10 = emg_12_emg_param_1_10;
    #line 1194 
    emg_wrapper_ice_get_ringparam(emg_12_container,emg_12_emg_param_1_10);
    #line 1198 
    ldv_free((void *)emg_12_emg_param_1_10);
    #line 1200 
    break;
    #line 1202 
    case 77: 
             #line 1202 
    ;
    #line 1204 
    emg_12_emg_param_1_9 = (struct ethtool_ringparam *)ldv_xmalloc_unknown_size(0UL);
    #line 1204 
    emg_12_emg_param_1_9 = emg_12_emg_param_1_9;
    #line 1208 
    emg_wrapper_ice_set_ringparam(emg_12_container,emg_12_emg_param_1_9);
    #line 1212 
    ldv_free((void *)emg_12_emg_param_1_9);
    #line 1214 
    break;
    #line 1216 
    case 78: 
             #line 1216 
    ;
    #line 1218 
    emg_12_emg_param_2_8 = (unsigned char *)ldv_xmalloc_unknown_size(0UL);
    #line 1218 
    emg_12_emg_param_2_8 = emg_12_emg_param_2_8;
    #line 1222 
    emg_wrapper_ice_get_strings(emg_12_container,emg_12_emg_param_1_7,emg_12_emg_param_2_8);
    #line 1226 
    ldv_free((void *)emg_12_emg_param_2_8);
    #line 1228 
    break;
    #line 1230 
    case 79: 
             #line 1230 
    ;
    #line 1232 
    emg_12_emg_param_1_5 = (struct ethtool_stats *)ldv_xmalloc_unknown_size(0UL);
    #line 1232 
    emg_12_emg_param_1_5 = emg_12_emg_param_1_5;
    #line 1233 
    emg_12_emg_param_2_6 = (unsigned long long *)ldv_xmalloc_unknown_size(0UL);
    #line 1233 
    emg_12_emg_param_2_6 = emg_12_emg_param_2_6;
    #line 1237 
    emg_wrapper_ice_get_ethtool_stats(emg_12_container,emg_12_emg_param_1_5,emg_12_emg_param_2_6);
    #line 1241 
    ldv_free((void *)emg_12_emg_param_1_5);
    #line 1242 
    ldv_free((void *)emg_12_emg_param_2_6);
    #line 1244 
    break;
    #line 1246 
    case 80: 
             #line 1246 
    ;
    #line 1248 
    emg_wrapper_ice_get_sset_count(emg_12_container,emg_12_emg_param_1_4);
    #line 1250 
    break;
    #line 1252 
    case 81: 
             #line 1252 
    ;
    #line 1254 
    emg_12_emg_param_1_3 = (struct ethtool_channels *)ldv_xmalloc_unknown_size(0UL);
    #line 1254 
    emg_12_emg_param_1_3 = emg_12_emg_param_1_3;
    #line 1258 
    emg_wrapper_ice_get_channels(emg_12_container,emg_12_emg_param_1_3);
    #line 1262 
    ldv_free((void *)emg_12_emg_param_1_3);
    #line 1264 
    break;
    #line 1266 
    case 82: 
             #line 1266 
    ;
    #line 1268 
    emg_12_emg_param_1_2 = (struct ethtool_link_ksettings *)ldv_xmalloc_unknown_size(0UL);
    #line 1268 
    emg_12_emg_param_1_2 = emg_12_emg_param_1_2;
    #line 1272 
    emg_wrapper_ice_get_link_ksettings(emg_12_container,emg_12_emg_param_1_2);
    #line 1276 
    ldv_free((void *)emg_12_emg_param_1_2);
    #line 1278 
    break;
    #line 1280 
    case 83: 
             #line 1280 
    ;
    #line 1282 
    emg_12_emg_param_1_1 = (struct ethtool_link_ksettings *)ldv_xmalloc_unknown_size(0UL);
    #line 1282 
    emg_12_emg_param_1_1 = emg_12_emg_param_1_1;
    #line 1286 
    emg_wrapper_ice_set_link_ksettings(emg_12_container,emg_12_emg_param_1_1);
    #line 1290 
    ldv_free((void *)emg_12_emg_param_1_1);
    #line 1292 
    break;
    #line 1294 
    case 84: 
             #line 1294 
    ;
    #line 1296 
    emg_12_emg_param_0_0 = (struct sk_buff *)ldv_xmalloc_unknown_size(0UL);
    #line 1296 
    emg_12_emg_param_0_0 = emg_12_emg_param_0_0;
    #line 1300 
    ice_start_xmit(emg_12_emg_param_0_0,emg_12_container);
    #line 1304 
    ldv_free((void *)emg_12_emg_param_0_0);
    #line 1307 
    if (emg_repeat_cnt_call_12 > 0) {
      #line 1308 
      emg_repeat_cnt_call_12 --;
      #line 1310 
      goto emg_call_12;
    }
    else 
         #line 1312 
         __VERIFIER_assume(0);
    #line 1316 
    break;
    #line 1318 
    case 85: 
             #line 1318 
    ;
    #line 1322 
    break;
    #line 1324 
    default: 
             #line 1324 
    ;
    #line 1324 
    __VERIFIER_assume(0);
  }
  #line 1327 
  return (void *)0;
}

#line 1332  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ice/ice.ko/concurrency safety/emg/0/environment_model.c"
void *emg_pci_pci_scenario_ice_driver(void *arg0)
{
  #line 1335 
  int emg_13_choice;
  #line 1336 
  struct pci_driver *emg_13_container;
  #line 1337 
  struct pci_device_id *emg_13_device_id;
  #line 1338 
  int emg_13_emg_param_1_0;
  #line 1339 
  struct pci_dev *emg_13_resource_0;
  #line 1340 
  struct pm_message emg_13_resource_1;
  #line 1341 
  int emg_13_ret;
  #line 1342 
  int emg_repeat_cnt_main_13_0 = 1;
  #line 1343 
  int emg_repeat_cnt_call_13_0 = 1;
  #line 1344 
  int emg_repeat_cnt_call_13_1 = 1;
  #line 1345 
  int emg_repeat_cnt_main_13_1 = 1;
  #line 1347 
  struct emg_struct_pci_scenario_ice_driver_13 *data = (struct emg_struct_pci_scenario_ice_driver_13 *)arg0;
  #line 1351 
  emg_13_choice = 0;
  #line 1352 
  emg_13_ret = ldv_undef_int();
  #line 1353 
  emg_13_choice = 0;
  #line 1354 
  emg_13_container = emg_alias_ice_driver;
  #line 1355 
  emg_13_ret = ldv_undef_int();
  #line 1357 
  __VERIFIER_assume(data->arg0 == emg_alias_ice_driver);
  #line 1359 
  if (data != (struct emg_struct_pci_scenario_ice_driver_13 *)0) {
    #line 1360 
    emg_13_container = data->arg0;
    #line 1361 
    ldv_free((void *)data);
  }
  #line 1366 
  emg_13_resource_0 = (struct pci_dev *)ldv_xmalloc(3312UL);
  #line 1367 
  emg_13_choice = __ldv_undef_int_range(0,3);
  #line 1368 
  emg_13_device_id = emg_13_container->id_table + (unsigned long)emg_13_choice;
  #line 1372 
  goto emg_main_13;
  #line 1376 
  return (void *)0;
  #line 1379 
  emg_call_13: 
               #line 1379 
  ;
  #line 1380 
  switch (ldv_undef_int()) {
    #line 1381 
    case 0: 
            #line 1381 
    ;
    #line 1383 
    ice_sriov_configure(emg_13_resource_0,emg_13_emg_param_1_0);
    #line 1386 
    if (emg_repeat_cnt_call_13_0 > 0) {
      #line 1387 
      emg_repeat_cnt_call_13_0 --;
      #line 1389 
      goto emg_call_13;
    }
    else 
         #line 1391 
         __VERIFIER_assume(0);
    #line 1395 
    break;
    #line 1397 
    case 1: 
            #line 1397 
    ;
    #line 1399 
    if (emg_13_container->suspend != (int (*)(struct pci_dev *, pm_message_t ))0) 
      #line 1400 
      emg_13_ret = (*(emg_13_container->suspend))(emg_13_resource_0,emg_13_resource_1); else 
                                                                    #line 1402 
                                                                    emg_13_ret = ldv_undef_int();
    #line 1408 
    emg_13_ret = ldv_filter_err_code(emg_13_ret);
    #line 1412 
    if (emg_13_container->resume != (int (*)(struct pci_dev *))0) 
                                                                  #line 1413 
                                                                  (*(emg_13_container->resume))(emg_13_resource_0);
    #line 1417 
    if (emg_repeat_cnt_call_13_1 > 0) {
      #line 1418 
      emg_repeat_cnt_call_13_1 --;
      #line 1420 
      goto emg_call_13;
    }
    else 
         #line 1422 
         __VERIFIER_assume(0);
    #line 1426 
    break;
    #line 1428 
    case 2: 
            #line 1428 
    ;
    #line 1430 
    if (emg_13_container->shutdown != (void (*)(struct pci_dev *))0) 
      #line 1431 
      (*(emg_13_container->shutdown))(emg_13_resource_0);
    #line 1436 
    emg_wrapper_ice_remove(emg_13_resource_0);
    #line 1439 
    if (emg_repeat_cnt_main_13_0 > 0) {
      #line 1440 
      emg_repeat_cnt_main_13_0 --;
      #line 1442 
      goto emg_main_13;
    }
    else 
         #line 1444 
         __VERIFIER_assume(0);
    #line 1448 
    break;
    #line 1450 
    default: 
             #line 1450 
    ;
    #line 1450 
    __VERIFIER_assume(0);
  }
  #line 1453 
  return (void *)0;
  #line 1456 
  emg_main_13: 
               #line 1456 
  ;
  #line 1457 
  if (ldv_undef_int() != 0) {
    #line 1460 
    ldv_pre_probe();
    #line 1464 
    emg_13_ret = emg_wrapper_ice_probe(emg_13_resource_0,emg_13_device_id);
    #line 1469 
    emg_13_ret = ldv_post_probe(emg_13_ret);
    #line 1472 
    if (ldv_undef_int() != 0) {
      #line 1474 
      __VERIFIER_assume(emg_13_ret == 0);
      #line 1478 
      goto emg_call_13;
    }
    else 
         #line 1483 
         __VERIFIER_assume(emg_13_ret != 0);
    #line 1487 
    if (emg_repeat_cnt_main_13_1 > 0) {
      #line 1488 
      emg_repeat_cnt_main_13_1 --;
      #line 1490 
      goto emg_main_13;
    }
    else 
         #line 1492 
         __VERIFIER_assume(0);
  }
  else 
       #line 1498 
       ldv_free((void *)emg_13_resource_0);
  #line 1506 
  return (void *)0;
}

#line 1511  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ice/ice.ko/concurrency safety/emg/0/environment_model.c"
void *emg_timer_timer_scenario_2(void *arg0)
{
  #line 1514 
  struct timer_list *emg_14_container;
  #line 1515 
  unsigned long emg_14_emg_param_0_0;
  #line 1517 
  struct emg_struct_timer_scenario_2_14 *data = (struct emg_struct_timer_scenario_2_14 *)arg0;
  #line 1522 
  if (data != (struct emg_struct_timer_scenario_2_14 *)0) {
    #line 1523 
    emg_14_container = data->arg0;
    #line 1524 
    ldv_free((void *)data);
  }
  #line 1530 
  ldv_switch_to_interrupt_context();
  #line 1534 
  if (emg_14_container->function != (void (*)(struct timer_list *))0) 
    #line 1535 
    (*(emg_14_container->function))((struct timer_list *)emg_14_emg_param_0_0);
  #line 1541 
  ldv_switch_to_process_context();
  #line 1548 
  return (void *)0;
}

#line 1553  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ice/ice.ko/concurrency safety/emg/0/environment_model.c"
int emg___pci_register_driver(struct pci_driver *arg0, struct module *arg1, char *arg2)
{
  #line 1556 
  struct pci_driver *emg_2_pci_driver;
  #line 1558 
  emg_2_pci_driver = emg_alias_ice_driver;
  #line 1559 
  if (ldv_undef_int() != 0) {
    #line 1561 
    emg_2_pci_driver = arg0;
    #line 1565 
    emg_dispatch_register_2(emg_2_pci_driver);
    #line 1569 
    return 0;
  }
  else {
    #line 1573 
    return ldv_undef_int_negative();
  }
}

#line 1581  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ice/ice.ko/concurrency safety/emg/0/environment_model.c"
struct net_device *emg_alloc_etherdev_mqs(int arg0, unsigned int arg1, unsigned int arg2)
{
  #line 1584 
  struct net_device *emg_3_netdev;
  #line 1586 
  if (ldv_undef_int() != 0) {
    #line 1588 
    emg_3_netdev = (struct net_device *)ldv_xmalloc(3328UL);
    #line 1592 
    return emg_3_netdev;
  }
  else 
       #line 1596 
       return (struct net_device *)0;
}

#line 1604  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ice/ice.ko/concurrency safety/emg/0/environment_model.c"
int emg_del_timer_sync(struct timer_list *arg0)
{
  #line 1607 
  struct timer_list *emg_4_timer_list;
  #line 1610 
  emg_4_timer_list = arg0;
  #line 1614 
  emg_dispatch_instance_deregister_4(emg_4_timer_list);
  #line 1615 
  ;
  #line 1615 
  return 0;
}

#line 1621  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ice/ice.ko/concurrency safety/emg/0/environment_model.c"
void emg_devm_free_irq(struct device *arg0, unsigned int arg1, void *arg2)
{
  #line 1624 
  int emg_5_line;
  #line 1627 
  emg_5_line = (int)((long)arg0);
  #line 1634 
  return;
}

#line 1639  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ice/ice.ko/concurrency safety/emg/0/environment_model.c"
void emg_free_netdev(struct net_device *arg0)
{
  #line 1642 
  struct net_device *emg_6_netdev;
  #line 1645 
  emg_6_netdev = arg0;
  #line 1646 
  ldv_free((void *)emg_6_netdev);
  #line 1649 
  return;
}

#line 1654  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ice/ice.ko/concurrency safety/emg/0/environment_model.c"
int emg_mod_timer(struct timer_list *arg0, unsigned long arg1)
{
  #line 1657 
  struct timer_list *emg_7_timer_list;
  #line 1659 
  if (ldv_undef_int() != 0) {
    #line 1661 
    emg_7_timer_list = arg0;
    #line 1665 
    emg_dispatch_instance_register_7(emg_7_timer_list);
    #line 1669 
    return 1;
  }
  else 
       #line 1673 
       return 0;
}

#line 1681  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ice/ice.ko/concurrency safety/emg/0/environment_model.c"
void emg_pci_unregister_driver(struct pci_driver *arg0)
{
  #line 1684 
  struct pci_driver *emg_8_pci_driver;
  #line 1686 
  emg_8_pci_driver = emg_alias_ice_driver;
  #line 1688 
  emg_8_pci_driver = arg0;
  #line 1692 
  emg_dispatch_deregister_8(emg_8_pci_driver);
  #line 1695 
  return;
}

#line 1700  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ice/ice.ko/concurrency safety/emg/0/environment_model.c"
_Bool emg_queue_work(struct workqueue_struct *arg0, struct work_struct *arg1)
{
  #line 1703 
  struct work_struct *emg_9_work_struct;
  #line 1705 
  if (ldv_undef_int() != 0) {
    #line 1707 
    emg_9_work_struct = arg1;
    #line 1711 
    if (emg_9_work_struct->func != (void (*)(struct work_struct *))0) 
      #line 1712 
      (*(emg_9_work_struct->func))(emg_9_work_struct);
    #line 1717 
    return (_Bool)1;
  }
  else 
       #line 1721 
       return (_Bool)0;
}

#line 1729  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ice/ice.ko/concurrency safety/emg/0/environment_model.c"
int emg_register_netdev(struct net_device *arg0)
{
  #line 1732 
  struct net_device *emg_10_netdev;
  #line 1733 
  int emg_10_ret;
  #line 1736 
  emg_10_ret = ldv_undef_int();
  #line 1737 
  emg_10_ret = ldv_undef_int();
  #line 1738 
  if (ldv_undef_int() != 0) {
    #line 1740 
    emg_10_netdev = arg0;
    #line 1744 
    emg_10_ret = ice_open(emg_10_netdev);
    #line 1747 
    if (ldv_undef_int() != 0) {
      #line 1749 
      __VERIFIER_assume(emg_10_ret == 0);
      #line 1753 
      emg_dispatch_register_10(emg_10_netdev);
      #line 1757 
      return 0;
    }
    else {
      #line 1761 
      __VERIFIER_assume(emg_10_ret != 0);
      #line 1762 
      ldv_failed_register_netdev();
      #line 1763 
      return ldv_undef_int_negative();
    }
  }
  else {
    #line 1768 
    ldv_failed_register_netdev();
    #line 1769 
    return ldv_undef_int_negative();
  }
}

#line 1777  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ice/ice.ko/concurrency safety/emg/0/environment_model.c"
void emg_unregister_netdev(struct net_device *arg0)
{
  #line 1780 
  struct net_device *emg_11_netdev;
  #line 1783 
  emg_11_netdev = arg0;
  #line 1787 
  ice_stop(emg_11_netdev);
  #line 1791 
  emg_dispatch_deregister_11(emg_11_netdev);
  #line 1794 
  return;
}

#line 1799  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ice/ice.ko/concurrency safety/emg/0/environment_model.c"
void *emg_entry_point_insmod(void *arg0)
{
  #line 1802 
  int emg_1_ret;
  #line 1805 
  emg_1_ret = emg_ice_module_init();
  #line 1806 
  emg_1_ret = ldv_post_init(emg_1_ret);
  #line 1809 
  if (ldv_undef_int() != 0) {
    #line 1811 
    __VERIFIER_assume(emg_1_ret == 0);
    #line 1815 
    emg_ice_module_exit();
  }
  else 
       #line 1819 
       __VERIFIER_assume(emg_1_ret != 0);
  #line 1823 
  return (void *)0;
}

#line 1828  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ice/ice.ko/concurrency safety/emg/0/environment_model.c"
int main(void)
{
  #line 1830 
  ldv_initialize();
  #line 1832 
  emg_entry_point_insmod((void *)0);
  #line 1834 
  return 0;
}

