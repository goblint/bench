/* Generated by Frama-C */
#line 106  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/compiler_types.h"
typedef signed char __s8;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef unsigned char __u8;
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef short __s16;
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef unsigned short __u16;
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef int __s32;
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef unsigned int __u32;
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef long long __s64;
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef unsigned long long __u64;
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef __s8 s8;
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/int-ll64.h"
typedef __u8 u8;
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/int-ll64.h"
typedef __s16 s16;
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/int-ll64.h"
typedef __u16 u16;
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/int-ll64.h"
typedef __s32 s32;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/int-ll64.h"
typedef __u32 u32;
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/int-ll64.h"
typedef __s64 s64;
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/int-ll64.h"
typedef __u64 u64;
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/uapi/asm/posix_types_64.h"
typedef long __kernel_long_t;
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef unsigned long __kernel_ulong_t;
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef int __kernel_pid_t;
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef unsigned int __kernel_uid32_t;
#line 50  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef unsigned int __kernel_gid32_t;
#line 51  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef __kernel_ulong_t __kernel_size_t;
#line 73  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef __kernel_long_t __kernel_ssize_t;
#line 88  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef long long __kernel_loff_t;
#line 91  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef long long __kernel_time64_t;
#line 92  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef __kernel_long_t __kernel_clock_t;
#line 93  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef int __kernel_timer_t;
#line 94  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef int __kernel_clockid_t;
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef __u16 __le16;
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef __u16 __be16;
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef __u32 __be32;
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef __u64 __be64;
#line 35  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef __u16 __sum16;
#line 37  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef __u32 __wsum;
#line 38  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef unsigned int __poll_t;
#line 53  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef u32 __kernel_dev_t;
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_dev_t dev_t;
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef unsigned short umode_t;
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_pid_t pid_t;
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_clockid_t clockid_t;
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef _Bool bool;
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_uid32_t uid_t;
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_gid32_t gid_t;
#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_loff_t loff_t;
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_size_t size_t;
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_ssize_t ssize_t;
#line 103  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef s32 int32_t;
#line 109  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef u32 uint32_t;
#line 115  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef u64 sector_t;
#line 131  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef u64 blkcnt_t;
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef u64 dma_addr_t;
#line 149  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef unsigned int gfp_t;
#line 154  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef unsigned int slab_flags_t;
#line 155  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef unsigned int fmode_t;
#line 156  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef u64 phys_addr_t;
#line 159  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef phys_addr_t resource_size_t;
#line 164  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef unsigned long irq_hw_number_t;
#line 170  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
struct __anonstruct_atomic_t_6 {
   int counter ;
};
#line 170  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef struct __anonstruct_atomic_t_6 atomic_t;
#line 174  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
struct __anonstruct_atomic64_t_7 {
   s64 counter ;
};
#line 174  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef struct __anonstruct_atomic64_t_7 atomic64_t;
#line 181  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
struct list_head {
   struct list_head *next ;
   struct list_head *prev ;
};
#line 185 
struct hlist_node;
#line 185  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
struct hlist_head {
   struct hlist_node *first ;
};
#line 189  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
struct hlist_node {
   struct hlist_node *next ;
   struct hlist_node **pprev ;
};
#line 219  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
struct callback_head {
   struct callback_head *next ;
   void (*func)(struct callback_head *) ;
} __attribute__((__aligned__(8)));
#line 14  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/broadcom/tg3.ko/concurrency safety/0/concurrency safety/weaver/tg3.i.aux"
struct task_struct;
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/export.h"
struct module;
#line 60  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/export.h"
struct kernel_symbol {
   int value_offset ;
   int name_offset ;
   int namespace_offset ;
};
#line 136  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/init.h"
typedef void (*ctor_fn_t)(void);
#line 139 
struct file_system_type;
#line 83  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/printk.h"
struct ctl_table;
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jump_label.h"
struct jump_entry;
#line 87 
struct static_key_mod;
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jump_label.h"
union __anonunion_8 {
   unsigned long type ;
   struct jump_entry *entries ;
   struct static_key_mod *next ;
};
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jump_label.h"
struct static_key {
   atomic_t enabled ;
   union __anonunion_8 __anonCompField_static_key_4 ;
};
#line 122  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jump_label.h"
struct jump_entry {
   s32 code ;
   s32 target ;
   long key ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dynamic_debug.h"
struct device;
#line 65 
struct net_device;
#line 476  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/printk.h"
struct file_operations;
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/div64.h"
struct completion;
#line 88 
struct pt_regs;
#line 557  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernel.h"
enum system_states {
    SYSTEM_BOOTING = 0,
    SYSTEM_SCHEDULING = 1,
    SYSTEM_RUNNING = 2,
    SYSTEM_HALT = 3,
    SYSTEM_POWER_OFF = 4,
    SYSTEM_RESTART = 5,
    SYSTEM_SUSPEND = 6
};
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bug.h"
struct bug_entry {
   int bug_addr_disp ;
   int file_disp ;
   unsigned short line ;
   unsigned short flags ;
};
#line 188  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/math64.h"
typedef __s64 time64_t;
#line 7  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/time_types.h"
struct __kernel_timespec {
   __kernel_time64_t tv_sec ;
   long long tv_nsec ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/time64.h"
struct timespec64 {
   time64_t tv_sec ;
   long tv_nsec ;
};
#line 165 
struct old_timespec32;
#line 166 
struct pollfd;
#line 167 
enum timespec_type {
    TT_NONE = 0,
    TT_NATIVE = 1,
    TT_COMPAT = 2
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/restart_block.h"
struct __anonstruct_futex_27 {
   u32 *uaddr ;
   u32 val ;
   u32 flags ;
   u32 bitset ;
   u64 time ;
   u32 *uaddr2 ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/restart_block.h"
union __anonunion_29 {
   struct __kernel_timespec *rmtp ;
   struct old_timespec32 *compat_rmtp ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/restart_block.h"
struct __anonstruct_nanosleep_28 {
   clockid_t clockid ;
   enum timespec_type type ;
   union __anonunion_29 __anonCompField___anonstruct_nanosleep_28_5 ;
   u64 expires ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/restart_block.h"
struct __anonstruct_poll_30 {
   struct pollfd *ufds ;
   int nfds ;
   int has_timeout ;
   unsigned long tv_sec ;
   unsigned long tv_nsec ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/restart_block.h"
union __anonunion_26 {
   struct __anonstruct_futex_27 futex ;
   struct __anonstruct_nanosleep_28 nanosleep ;
   struct __anonstruct_poll_30 poll ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/restart_block.h"
struct restart_block {
   long (*fn)(struct restart_block *) ;
   union __anonunion_26 __anonCompField_restart_block_6 ;
};
#line 58  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/page_64.h"
struct page;
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/getorder.h"
struct mm_struct;
#line 49 
struct io_bitmap;
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/ptrace.h"
struct pt_regs {
   unsigned long r15 ;
   unsigned long r14 ;
   unsigned long r13 ;
   unsigned long r12 ;
   unsigned long bp ;
   unsigned long bx ;
   unsigned long r11 ;
   unsigned long r10 ;
   unsigned long r9 ;
   unsigned long r8 ;
   unsigned long ax ;
   unsigned long cx ;
   unsigned long dx ;
   unsigned long si ;
   unsigned long di ;
   unsigned long orig_ax ;
   unsigned long ip ;
   unsigned long cs ;
   unsigned long flags ;
   unsigned long sp ;
   unsigned long ss ;
};
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/desc_defs.h"
struct desc_struct {
   u16 limit0 ;
   u16 base0 ;
   u16 base1 : 8 ;
   u16 type : 4 ;
   u16 s : 1 ;
   u16 dpl : 2 ;
   u16 p : 1 ;
   u16 limit1 : 4 ;
   u16 avl : 1 ;
   u16 l : 1 ;
   u16 d : 1 ;
   u16 g : 1 ;
   u16 base2 : 8 ;
} __attribute__((__packed__));
#line 119  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/desc_defs.h"
typedef unsigned long pteval_t;
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_64_types.h"
typedef unsigned long pmdval_t;
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_64_types.h"
typedef unsigned long pudval_t;
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_64_types.h"
typedef unsigned long pgdval_t;
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_64_types.h"
typedef unsigned long pgprotval_t;
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_64_types.h"
struct __anonstruct_pte_t_53 {
   pteval_t pte ;
};
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_64_types.h"
typedef struct __anonstruct_pte_t_53 pte_t;
#line 265  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
struct pgprot {
   pgprotval_t pgprot ;
};
#line 267  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
typedef struct pgprot pgprot_t;
#line 266  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
struct __anonstruct_pgd_t_54 {
   pgdval_t pgd ;
};
#line 266  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
typedef struct __anonstruct_pgd_t_54 pgd_t;
#line 319  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
struct __anonstruct_pud_t_56 {
   pudval_t pud ;
};
#line 319  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
typedef struct __anonstruct_pud_t_56 pud_t;
#line 345  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
struct __anonstruct_pmd_t_57 {
   pmdval_t pmd ;
};
#line 345  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
typedef struct __anonstruct_pmd_t_57 pmd_t;
#line 505  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
typedef struct page *pgtable_t;
#line 519 
struct file;
#line 530 
struct seq_file;
#line 360  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/nospec-branch.h"
struct thread_struct;
#line 362 
struct cpumask;
#line 365 
struct vm_area_struct;
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qspinlock_types.h"
struct __anonstruct_59 {
   u8 locked ;
   u8 pending ;
};
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qspinlock_types.h"
struct __anonstruct_60 {
   u16 locked_pending ;
   u16 tail ;
};
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qspinlock_types.h"
union __anonunion_58 {
   atomic_t val ;
   struct __anonstruct_59 __anonCompField___anonunion_58_7 ;
   struct __anonstruct_60 __anonCompField___anonunion_58_8 ;
};
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qspinlock_types.h"
struct qspinlock {
   union __anonunion_58 __anonCompField_qspinlock_9 ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qspinlock_types.h"
typedef struct qspinlock arch_spinlock_t;
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qrwlock_types.h"
struct __anonstruct_62 {
   u8 wlocked ;
   u8 __lstate[3U] ;
};
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qrwlock_types.h"
union __anonunion_61 {
   atomic_t cnts ;
   struct __anonstruct_62 __anonCompField___anonunion_61_10 ;
};
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qrwlock_types.h"
struct qrwlock {
   union __anonunion_61 __anonCompField_qrwlock_11 ;
   arch_spinlock_t wait_lock ;
};
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qrwlock_types.h"
typedef struct qrwlock arch_rwlock_t;
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/math_emu.h"
struct math_emu_info {
   long ___orig_eip ;
   struct pt_regs *regs ;
};
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/atomic.h"
union __anonunion___u_67 {
   int __val ;
   char __c[1U] ;
};
#line 2288  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/atomic-fallback.h"
typedef atomic64_t atomic_long_t;
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cpumask.h"
struct cpumask {
   unsigned long bits[128U] ;
};
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cpumask.h"
typedef struct cpumask cpumask_t;
#line 690  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cpumask.h"
typedef struct cpumask *cpumask_var_t;
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/tracepoint-defs.h"
struct tracepoint_func {
   void *func ;
   void *data ;
   int prio ;
};
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/tracepoint-defs.h"
struct tracepoint {
   char *name ;
   struct static_key key ;
   int (*regfunc)(void) ;
   void (*unregfunc)(void) ;
   struct tracepoint_func *funcs ;
};
#line 37  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/tracepoint-defs.h"
typedef int tracepoint_ptr_t;
#line 44  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/tracepoint-defs.h"
struct bpf_raw_event_map {
   struct tracepoint *tp ;
   void *bpf_func ;
   u32 num_args ;
   u32 writable_size ;
} __attribute__((__aligned__(32)));
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct fregs_state {
   u32 cwd ;
   u32 swd ;
   u32 twd ;
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
   u32 st_space[20U] ;
   u32 status ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct __anonstruct_90 {
   u64 rip ;
   u64 rdp ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct __anonstruct_91 {
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
union __anonunion_89 {
   struct __anonstruct_90 __anonCompField___anonunion_89_17 ;
   struct __anonstruct_91 __anonCompField___anonunion_89_18 ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
union __anonunion_92 {
   u32 padding1[12U] ;
   u32 sw_reserved[12U] ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct fxregs_state {
   u16 cwd ;
   u16 swd ;
   u16 twd ;
   u16 fop ;
   union __anonunion_89 __anonCompField_fxregs_state_19 ;
   u32 mxcsr ;
   u32 mxcsr_mask ;
   u32 st_space[32U] ;
   u32 xmm_space[64U] ;
   u32 padding[12U] ;
   union __anonunion_92 __anonCompField_fxregs_state_20 ;
} __attribute__((__aligned__(16)));
#line 79  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct swregs_state {
   u32 cwd ;
   u32 swd ;
   u32 twd ;
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
   u32 st_space[20U] ;
   u8 ftop ;
   u8 changed ;
   u8 lookahead ;
   u8 no_update ;
   u8 rm ;
   u8 alimit ;
   struct math_emu_info *info ;
   u32 entry_eip ;
};
#line 232  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct xstate_header {
   u64 xfeatures ;
   u64 xcomp_bv ;
   u64 reserved[6U] ;
} __attribute__((__packed__));
#line 253  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct xregs_state {
   struct fxregs_state i387 ;
   struct xstate_header header ;
   u8 extended_state_area[0U] ;
} __attribute__((__packed__, __aligned__(64)));
#line 268  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
union fpregs_state {
   struct fregs_state fsave ;
   struct fxregs_state fxsave ;
   struct swregs_state soft ;
   struct xregs_state xsave ;
   u8 __padding[4096U] ;
};
#line 281  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct fpu {
   unsigned int last_cpu ;
   unsigned long avx512_timestamp ;
   union fpregs_state state ;
};
#line 73  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/orc_types.h"
struct orc_entry {
   s16 sp_offset ;
   s16 bp_offset ;
   unsigned int sp_reg : 4 ;
   unsigned int bp_reg : 4 ;
   unsigned int type : 2 ;
   unsigned int end : 1 ;
} __attribute__((__packed__));
#line 180  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/processor.h"
struct seq_operations;
#line 478 
struct perf_event;
#line 479  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/processor.h"
struct __anonstruct_mm_segment_t_95 {
   unsigned long seg ;
};
#line 479  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/processor.h"
typedef struct __anonstruct_mm_segment_t_95 mm_segment_t;
#line 485  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/processor.h"
struct thread_struct {
   struct desc_struct tls_array[3U] ;
   unsigned long sp ;
   unsigned short es ;
   unsigned short ds ;
   unsigned short fsindex ;
   unsigned short gsindex ;
   unsigned long fsbase ;
   unsigned long gsbase ;
   struct perf_event *ptrace_bps[4U] ;
   unsigned long debugreg6 ;
   unsigned long ptrace_dr7 ;
   unsigned long cr2 ;
   unsigned long trap_nr ;
   unsigned long error_code ;
   struct io_bitmap *io_bitmap ;
   unsigned long iopl_emul ;
   mm_segment_t addr_limit ;
   unsigned int sig_on_uaccess_err : 1 ;
   unsigned int uaccess_err : 1 ;
   struct fpu fpu ;
};
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/thread_info.h"
struct thread_info {
   unsigned long flags ;
   u32 status ;
};
#line 35  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bottom_half.h"
struct lockdep_map;
#line 55  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockdep.h"
struct lockdep_subclass_key {
   char __one_byte ;
} __attribute__((__packed__));
#line 60  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockdep.h"
union __anonunion_96 {
   struct hlist_node hash_entry ;
   struct lockdep_subclass_key subkeys[8U] ;
};
#line 60  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockdep.h"
struct lock_class_key {
   union __anonunion_96 __anonCompField_lock_class_key_23 ;
};
#line 68 
struct lock_trace;
#line 77  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockdep.h"
struct lock_class {
   struct hlist_node hash_entry ;
   struct list_head lock_entry ;
   struct list_head locks_after ;
   struct list_head locks_before ;
   struct lockdep_subclass_key *key ;
   unsigned int subclass ;
   unsigned int dep_gen_id ;
   unsigned long usage_mask ;
   struct lock_trace *usage_traces[9U] ;
   int name_version ;
   char *name ;
   unsigned long contention_point[4U] ;
   unsigned long contending_point[4U] ;
};
#line 157  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockdep.h"
struct lockdep_map {
   struct lock_class_key *key ;
   struct lock_class *class_cache[2U] ;
   char *name ;
   int cpu ;
   unsigned long ip ;
};
#line 226  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockdep.h"
struct held_lock {
   u64 prev_chain_key ;
   unsigned long acquire_ip ;
   struct lockdep_map *instance ;
   struct lockdep_map *nest_lock ;
   u64 waittime_stamp ;
   u64 holdtime_stamp ;
   unsigned int class_idx : 13 ;
   unsigned int irq_context : 2 ;
   unsigned int trylock : 1 ;
   unsigned int read : 2 ;
   unsigned int check : 1 ;
   unsigned int hardirqs_off : 1 ;
   unsigned int references : 12 ;
   unsigned int pin_count ;
};
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
struct raw_spinlock {
   arch_spinlock_t raw_lock ;
   unsigned int magic ;
   unsigned int owner_cpu ;
   void *owner ;
   struct lockdep_map dep_map ;
};
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
typedef struct raw_spinlock raw_spinlock_t;
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
struct __anonstruct_98 {
   u8 __padding[24U] ;
   struct lockdep_map dep_map ;
};
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
union __anonunion_97 {
   struct raw_spinlock rlock ;
   struct __anonstruct_98 __anonCompField___anonunion_97_24 ;
};
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
struct spinlock {
   union __anonunion_97 __anonCompField_spinlock_25 ;
};
#line 73  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
typedef struct spinlock spinlock_t;
#line 74  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
struct __anonstruct_rwlock_t_99 {
   arch_rwlock_t raw_lock ;
   unsigned int magic ;
   unsigned int owner_cpu ;
   void *owner ;
   struct lockdep_map dep_map ;
};
#line 74  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
typedef struct __anonstruct_rwlock_t_99 rwlock_t;
#line 57  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
struct mutex;
#line 31  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/device.h"
struct firmware;
#line 27  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
struct kmem_cache;
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seqlock.h"
struct seqcount {
   unsigned int sequence ;
   struct lockdep_map dep_map ;
};
#line 53  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seqlock.h"
typedef struct seqcount seqcount_t;
#line 403  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seqlock.h"
struct __anonstruct_seqlock_t_112 {
   struct seqcount seqcount ;
   spinlock_t lock ;
};
#line 403  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seqlock.h"
typedef struct __anonstruct_seqlock_t_112 seqlock_t;
#line 161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timex.h"
typedef s32 old_time32_t;
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/time32.h"
struct old_timespec32 {
   old_time32_t tv_sec ;
   s32 tv_nsec ;
};
#line 84  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/highuid.h"
struct user_namespace;
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uidgid.h"
struct __anonstruct_kuid_t_113 {
   uid_t val ;
};
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uidgid.h"
typedef struct __anonstruct_kuid_t_113 kuid_t;
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uidgid.h"
struct __anonstruct_kgid_t_114 {
   gid_t val ;
};
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uidgid.h"
typedef struct __anonstruct_kgid_t_114 kgid_t;
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/stat.h"
struct kstat {
   u32 result_mask ;
   umode_t mode ;
   unsigned int nlink ;
   uint32_t blksize ;
   u64 attributes ;
   u64 attributes_mask ;
   u64 ino ;
   dev_t dev ;
   dev_t rdev ;
   kuid_t uid ;
   kgid_t gid ;
   loff_t size ;
   struct timespec64 atime ;
   struct timespec64 mtime ;
   struct timespec64 ctime ;
   struct timespec64 btime ;
   u64 blocks ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/wait.h"
struct wait_queue_head {
   spinlock_t lock ;
   struct list_head head ;
};
#line 38  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/wait.h"
typedef struct wait_queue_head wait_queue_head_t;
#line 1133  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/wait.h"
struct __anonstruct_nodemask_t_115 {
   unsigned long bits[16U] ;
};
#line 1133  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/wait.h"
typedef struct __anonstruct_nodemask_t_115 nodemask_t;
#line 7  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/tlbbatch.h"
struct arch_tlbflush_unmap_batch {
   struct cpumask cpumask ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types_task.h"
struct vmacache {
   u64 seqnum ;
   struct vm_area_struct *vmas[4U] ;
};
#line 54  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types_task.h"
struct task_rss_stat {
   int events ;
   int count[4U] ;
};
#line 60  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types_task.h"
struct mm_rss_stat {
   atomic_long_t count[4U] ;
};
#line 64  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types_task.h"
struct page_frag {
   struct page *page ;
   __u32 offset ;
   __u32 size ;
};
#line 76  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types_task.h"
struct tlbflush_unmap_batch {
   struct arch_tlbflush_unmap_batch arch ;
   bool flush_required ;
   bool writable ;
};
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rbtree.h"
struct rb_node {
   unsigned long __rb_parent_color ;
   struct rb_node *rb_right ;
   struct rb_node *rb_left ;
} __attribute__((__aligned__(8)));
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rbtree.h"
struct rb_root {
   struct rb_node *rb_node ;
};
#line 125  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rbtree.h"
struct rb_root_cached {
   struct rb_root rb_root ;
   struct rb_node *rb_leftmost ;
};
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/osq_lock.h"
struct optimistic_spin_queue {
   atomic_t tail ;
};
#line 35  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rwsem.h"
struct rw_semaphore {
   atomic_long_t count ;
   atomic_long_t owner ;
   struct optimistic_spin_queue osq ;
   raw_spinlock_t wait_lock ;
   struct list_head wait_list ;
   void *magic ;
   struct lockdep_map dep_map ;
};
#line 26  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/completion.h"
struct completion {
   unsigned int done ;
   wait_queue_head_t wait ;
};
#line 120 
struct inode;
#line 121 
struct notifier_block;
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
struct ww_acquire_ctx;
#line 53  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mutex.h"
struct mutex {
   atomic_long_t owner ;
   spinlock_t wait_lock ;
   struct optimistic_spin_queue osq ;
   struct list_head wait_list ;
   void *magic ;
   struct lockdep_map dep_map ;
};
#line 72  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mutex.h"
struct mutex_waiter {
   struct list_head list ;
   struct task_struct *task ;
   struct ww_acquire_ctx *ww_ctx ;
   void *magic ;
};
#line 461  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jiffies.h"
typedef s64 ktime_t;
#line 55  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timekeeping.h"
enum tk_offsets {
    TK_OFFS_REAL = 0,
    TK_OFFS_BOOT = 1,
    TK_OFFS_TAI = 2,
    TK_OFFS_MAX = 3
};
#line 249  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timekeeping.h"
struct system_device_crosststamp {
   ktime_t device ;
   ktime_t sys_realtime ;
   ktime_t sys_monoraw ;
};
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
struct timer_list {
   struct hlist_node entry ;
   unsigned long expires ;
   void (*function)(struct timer_list *) ;
   u32 flags ;
   struct lockdep_map lockdep_map ;
};
#line 195 
struct hrtimer;
#line 196 
enum hrtimer_restart;
#line 220 
struct workqueue_struct;
#line 221 
struct work_struct;
#line 102  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/workqueue.h"
struct work_struct {
   atomic_long_t data ;
   struct list_head entry ;
   void (*func)(struct work_struct *) ;
   struct lockdep_map lockdep_map ;
};
#line 115  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/workqueue.h"
struct delayed_work {
   struct work_struct work ;
   struct timer_list timer ;
   struct workqueue_struct *wq ;
   int cpu ;
};
#line 124  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/workqueue.h"
struct rcu_work {
   struct work_struct work ;
   struct callback_head rcu ;
   struct workqueue_struct *wq ;
};
#line 67  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rcu_segcblist.h"
struct rcu_segcblist {
   struct callback_head *head ;
   struct callback_head **tails[4U] ;
   unsigned long gp_seq[4U] ;
   atomic_long_t len ;
   long len_lazy ;
   u8 enabled ;
   u8 offloaded ;
};
#line 80 
struct srcu_struct;
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/srcu.h"
struct srcu_node;
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/srcutree.h"
struct srcu_data {
   unsigned long srcu_lock_count[2U] ;
   unsigned long srcu_unlock_count[2U] ;
   spinlock_t lock ;
   struct rcu_segcblist srcu_cblist ;
   unsigned long srcu_gp_seq_needed ;
   unsigned long srcu_gp_seq_needed_exp ;
   bool srcu_cblist_invoking ;
   struct timer_list delay_work ;
   struct work_struct work ;
   struct callback_head srcu_barrier_head ;
   struct srcu_node *mynode ;
   unsigned long grpmask ;
   int cpu ;
   struct srcu_struct *ssp ;
};
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/srcutree.h"
struct srcu_node {
   spinlock_t lock ;
   unsigned long srcu_have_cbs[4U] ;
   unsigned long srcu_data_have_cbs[4U] ;
   unsigned long srcu_gp_seq_needed_exp ;
   struct srcu_node *srcu_parent ;
   int grplo ;
   int grphi ;
};
#line 64  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/srcutree.h"
struct srcu_struct {
   struct srcu_node node[521U] ;
   struct srcu_node *level[4U] ;
   struct mutex srcu_cb_mutex ;
   spinlock_t lock ;
   struct mutex srcu_gp_mutex ;
   unsigned int srcu_idx ;
   unsigned long srcu_gp_seq ;
   unsigned long srcu_gp_seq_needed ;
   unsigned long srcu_gp_seq_needed_exp ;
   unsigned long srcu_last_gp_end ;
   struct srcu_data *sda ;
   unsigned long srcu_barrier_seq ;
   struct mutex srcu_barrier_mutex ;
   struct completion srcu_barrier_completion ;
   atomic_t srcu_barrier_cpu_cnt ;
   struct delayed_work work ;
   struct lockdep_map dep_map ;
};
#line 54  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/notifier.h"
struct notifier_block {
   int (*notifier_call)(struct notifier_block *, unsigned long , void *) ;
   struct notifier_block *next ;
   int priority ;
};
#line 70  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/notifier.h"
struct raw_notifier_head {
   struct notifier_block *head ;
};
#line 50  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/uprobes.h"
struct arch_uprobe_task {
   unsigned long saved_scratch_register ;
   unsigned int saved_trap_nr ;
   unsigned int saved_tf ;
};
#line 57 
enum uprobe_task_state {
    UTASK_RUNNING = 0,
    UTASK_SSTEP = 1,
    UTASK_SSTEP_ACK = 2,
    UTASK_SSTEP_TRAPPED = 3
};
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
struct __anonstruct_128 {
   struct arch_uprobe_task autask ;
   unsigned long vaddr ;
};
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
struct __anonstruct_129 {
   struct callback_head dup_xol_work ;
   unsigned long dup_xol_addr ;
};
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
union __anonunion_127 {
   struct __anonstruct_128 __anonCompField___anonunion_127_28 ;
   struct __anonstruct_129 __anonCompField___anonunion_127_29 ;
};
#line 61 
struct uprobe;
#line 61 
struct return_instance;
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
struct uprobe_task {
   enum uprobe_task_state state ;
   union __anonunion_127 __anonCompField_uprobe_task_30 ;
   struct uprobe *active_uprobe ;
   unsigned long xol_vaddr ;
   struct return_instance *return_instances ;
   unsigned int depth ;
};
#line 83  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
struct return_instance {
   struct uprobe *uprobe ;
   unsigned long func ;
   unsigned long stack ;
   unsigned long orig_ret_vaddr ;
   bool chained ;
   struct return_instance *next ;
};
#line 98 
struct xol_area;
#line 101  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
struct uprobes_state {
   struct xol_area *xol_area ;
};
#line 140 
struct ldt_struct;
#line 140 
struct vdso_image;
#line 140  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
struct __anonstruct_mm_context_t_130 {
   u64 ctx_id ;
   atomic64_t tlb_gen ;
   struct rw_semaphore ldt_usr_sem ;
   struct ldt_struct *ldt ;
   unsigned short ia32_compat ;
   struct mutex lock ;
   void *vdso ;
   struct vdso_image *vdso_image ;
   atomic_t perf_rdpmc_allowed ;
   u16 pkey_allocation_map ;
   s16 execute_only_pkey ;
   void *bd_addr ;
};
#line 140  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
typedef struct __anonstruct_mm_context_t_130 mm_context_t;
#line 66  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct address_space;
#line 67 
struct mem_cgroup;
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct __anonstruct_132 {
   struct list_head lru ;
   struct address_space *mapping ;
   unsigned long index ;
   unsigned long private ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct __anonstruct_133 {
   dma_addr_t dma_addr ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct __anonstruct_136 {
   struct page *next ;
   int pages ;
   int pobjects ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
union __anonunion_135 {
   struct list_head slab_list ;
   struct __anonstruct_136 __anonCompField___anonunion_135_33 ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct __anonstruct_138 {
   unsigned int inuse : 16 ;
   unsigned int objects : 15 ;
   unsigned int frozen : 1 ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
union __anonunion_137 {
   void *s_mem ;
   unsigned long counters ;
   struct __anonstruct_138 __anonCompField___anonunion_137_35 ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct __anonstruct_134 {
   union __anonunion_135 __anonCompField___anonstruct_134_34 ;
   struct kmem_cache *slab_cache ;
   void *freelist ;
   union __anonunion_137 __anonCompField___anonstruct_134_36 ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct __anonstruct_139 {
   unsigned long compound_head ;
   unsigned char compound_dtor ;
   unsigned char compound_order ;
   atomic_t compound_mapcount ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct __anonstruct_140 {
   unsigned long _compound_pad_1 ;
   unsigned long _compound_pad_2 ;
   struct list_head deferred_list ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
union __anonunion_142 {
   struct mm_struct *pt_mm ;
   atomic_t pt_frag_refcount ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct __anonstruct_141 {
   unsigned long _pt_pad_1 ;
   pgtable_t pmd_huge_pte ;
   unsigned long _pt_pad_2 ;
   union __anonunion_142 __anonCompField___anonstruct_141_40 ;
   spinlock_t *ptl ;
};
#line 68 
struct dev_pagemap;
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct __anonstruct_143 {
   struct dev_pagemap *pgmap ;
   void *zone_device_data ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
union __anonunion_131 {
   struct __anonstruct_132 __anonCompField___anonunion_131_31 ;
   struct __anonstruct_133 __anonCompField___anonunion_131_32 ;
   struct __anonstruct_134 __anonCompField___anonunion_131_37 ;
   struct __anonstruct_139 __anonCompField___anonunion_131_38 ;
   struct __anonstruct_140 __anonCompField___anonunion_131_39 ;
   struct __anonstruct_141 __anonCompField___anonunion_131_41 ;
   struct __anonstruct_143 __anonCompField___anonunion_131_42 ;
   struct callback_head callback_head ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
union __anonunion_144 {
   atomic_t _mapcount ;
   unsigned int page_type ;
   unsigned int active ;
   int units ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct page {
   unsigned long flags ;
   union __anonunion_131 __anonCompField_page_43 ;
   union __anonunion_144 __anonCompField_page_44 ;
   atomic_t _refcount ;
   struct mem_cgroup *mem_cgroup ;
} __attribute__((__aligned__(16)));
#line 278  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct userfaultfd_ctx;
#line 278  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct vm_userfaultfd_ctx {
   struct userfaultfd_ctx *ctx ;
};
#line 292  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct __anonstruct_shared_145 {
   struct rb_node rb ;
   unsigned long rb_subtree_last ;
};
#line 292 
struct anon_vma;
#line 292 
struct vm_operations_struct;
#line 292 
struct mempolicy;
#line 292  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct vm_area_struct {
   unsigned long vm_start ;
   unsigned long vm_end ;
   struct vm_area_struct *vm_next ;
   struct vm_area_struct *vm_prev ;
   struct rb_node vm_rb ;
   unsigned long rb_subtree_gap ;
   struct mm_struct *vm_mm ;
   pgprot_t vm_page_prot ;
   unsigned long vm_flags ;
   struct __anonstruct_shared_145 shared ;
   struct list_head anon_vma_chain ;
   struct anon_vma *anon_vma ;
   struct vm_operations_struct *vm_ops ;
   unsigned long vm_pgoff ;
   struct file *vm_file ;
   void *vm_private_data ;
   atomic_long_t swap_readahead_info ;
   struct mempolicy *vm_policy ;
   struct vm_userfaultfd_ctx vm_userfaultfd_ctx ;
} __attribute__((__designated_init__));
#line 358  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct core_thread {
   struct task_struct *task ;
   struct core_thread *next ;
};
#line 363  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct core_state {
   atomic_t nr_threads ;
   struct core_thread dumper ;
   struct completion startup ;
};
#line 368 
struct kioctx_table;
#line 370 
struct linux_binfmt;
#line 370 
struct mmu_notifier_mm;
#line 370  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct __anonstruct_146 {
   struct vm_area_struct *mmap ;
   struct rb_root mm_rb ;
   u64 vmacache_seqnum ;
   unsigned long (*get_unmapped_area)(struct file *, unsigned long , unsigned long , unsigned long , unsigned long ) ;
   unsigned long mmap_base ;
   unsigned long mmap_legacy_base ;
   unsigned long mmap_compat_base ;
   unsigned long mmap_compat_legacy_base ;
   unsigned long task_size ;
   unsigned long highest_vm_end ;
   pgd_t *pgd ;
   atomic_t membarrier_state ;
   atomic_t mm_users ;
   atomic_t mm_count ;
   atomic_long_t pgtables_bytes ;
   int map_count ;
   spinlock_t page_table_lock ;
   struct rw_semaphore mmap_sem ;
   struct list_head mmlist ;
   unsigned long hiwater_rss ;
   unsigned long hiwater_vm ;
   unsigned long total_vm ;
   unsigned long locked_vm ;
   atomic64_t pinned_vm ;
   unsigned long data_vm ;
   unsigned long exec_vm ;
   unsigned long stack_vm ;
   unsigned long def_flags ;
   spinlock_t arg_lock ;
   unsigned long start_code ;
   unsigned long end_code ;
   unsigned long start_data ;
   unsigned long end_data ;
   unsigned long start_brk ;
   unsigned long brk ;
   unsigned long start_stack ;
   unsigned long arg_start ;
   unsigned long arg_end ;
   unsigned long env_start ;
   unsigned long env_end ;
   unsigned long saved_auxv[46U] ;
   struct mm_rss_stat rss_stat ;
   struct linux_binfmt *binfmt ;
   mm_context_t context ;
   unsigned long flags ;
   struct core_state *core_state ;
   spinlock_t ioctx_lock ;
   struct kioctx_table *ioctx_table ;
   struct task_struct *owner ;
   struct user_namespace *user_ns ;
   struct file *exe_file ;
   struct mmu_notifier_mm *mmu_notifier_mm ;
   unsigned long numa_next_scan ;
   unsigned long numa_scan_offset ;
   int numa_scan_seq ;
   atomic_t tlb_flush_pending ;
   bool tlb_flush_batched ;
   struct uprobes_state uprobes_state ;
   atomic_long_t hugetlb_usage ;
   struct work_struct async_put_work ;
} __attribute__((__designated_init__));
#line 370  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct mm_struct {
   struct __anonstruct_146 __anonCompField_mm_struct_45 ;
   unsigned long cpu_bitmap[] ;
};
#line 642 
struct vm_fault;
#line 643  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
typedef unsigned int vm_fault_t;
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct free_area {
   struct list_head free_list[6U] ;
   unsigned long nr_free ;
};
#line 158 
struct pglist_data;
#line 168  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct zone_padding {
   char x[0U] ;
} __attribute__((__aligned__(4096)));
#line 285  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct zone_reclaim_stat {
   unsigned long recent_rotated[2U] ;
   unsigned long recent_scanned[2U] ;
};
#line 304  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct lruvec {
   struct list_head lists[5U] ;
   struct zone_reclaim_stat reclaim_stat ;
   atomic_long_t inactive_age ;
   unsigned long refaults ;
   unsigned long flags ;
   struct pglist_data *pgdat ;
};
#line 316  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
typedef unsigned int isolate_mode_t;
#line 340  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct per_cpu_pages {
   int count ;
   int high ;
   int batch ;
   struct list_head lists[3U] ;
};
#line 349  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct per_cpu_pageset {
   struct per_cpu_pages pcp ;
   s8 expire ;
   u16 vm_numa_stat_diff[6U] ;
   s8 stat_threshold ;
   s8 vm_stat_diff[13U] ;
};
#line 361  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct per_cpu_nodestat {
   s8 stat_threshold ;
   s8 vm_node_stat_diff[32U] ;
};
#line 365 
enum zone_type {
    ZONE_DMA = 0,
    ZONE_DMA32 = 1,
    ZONE_NORMAL = 2,
    ZONE_MOVABLE = 3,
    ZONE_DEVICE = 4,
    __MAX_NR_ZONES = 5
};
#line 432  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct zone {
   unsigned long _watermark[3U] ;
   unsigned long watermark_boost ;
   unsigned long nr_reserved_highatomic ;
   long lowmem_reserve[5U] ;
   int node ;
   struct pglist_data *zone_pgdat ;
   struct per_cpu_pageset *pageset ;
   unsigned long zone_start_pfn ;
   atomic_long_t managed_pages ;
   unsigned long spanned_pages ;
   unsigned long present_pages ;
   char *name ;
   unsigned long nr_isolate_pageblock ;
   seqlock_t span_seqlock ;
   int initialized ;
   struct zone_padding _pad1_ ;
   struct free_area free_area[11U] ;
   unsigned long flags ;
   spinlock_t lock ;
   struct zone_padding _pad2_ ;
   unsigned long percpu_drift_mark ;
   unsigned long compact_cached_free_pfn ;
   unsigned long compact_cached_migrate_pfn[2U] ;
   unsigned long compact_init_migrate_pfn ;
   unsigned long compact_init_free_pfn ;
   unsigned int compact_considered ;
   unsigned int compact_defer_shift ;
   int compact_order_failed ;
   bool compact_blockskip_flush ;
   bool contiguous ;
   struct zone_padding _pad3_ ;
   atomic_long_t vm_stat[13U] ;
   atomic_long_t vm_numa_stat[6U] ;
} __attribute__((__aligned__(4096)));
#line 665  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct zoneref {
   struct zone *zone ;
   int zone_idx ;
};
#line 684  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct zonelist {
   struct zoneref _zonerefs[5121U] ;
};
#line 694  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct deferred_split {
   spinlock_t split_queue_lock ;
   struct list_head split_queue ;
   unsigned long split_queue_len ;
};
#line 710  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct pglist_data {
   struct zone node_zones[5U] ;
   struct zonelist node_zonelists[2U] ;
   int nr_zones ;
   spinlock_t node_size_lock ;
   unsigned long node_start_pfn ;
   unsigned long node_present_pages ;
   unsigned long node_spanned_pages ;
   int node_id ;
   wait_queue_head_t kswapd_wait ;
   wait_queue_head_t pfmemalloc_wait ;
   struct task_struct *kswapd ;
   int kswapd_order ;
   enum zone_type kswapd_classzone_idx ;
   int kswapd_failures ;
   int kcompactd_max_order ;
   enum zone_type kcompactd_classzone_idx ;
   wait_queue_head_t kcompactd_wait ;
   struct task_struct *kcompactd ;
   unsigned long totalreserve_pages ;
   unsigned long min_unmapped_pages ;
   unsigned long min_slab_pages ;
   struct zone_padding _pad1_ ;
   spinlock_t lru_lock ;
   unsigned long first_deferred_pfn ;
   struct deferred_split deferred_split_queue ;
   struct lruvec __lruvec ;
   unsigned long flags ;
   struct zone_padding _pad2_ ;
   struct per_cpu_nodestat *per_cpu_nodestats ;
   atomic_long_t vm_stat[32U] ;
};
#line 824 
struct resource;
#line 825 
struct vmem_altmap;
#line 282  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/x86_init.h"
struct pci_dev;
#line 159  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/topology.h"
struct pci_bus;
#line 440  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/io.h"
struct fwnode_operations;
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fwnode.h"
struct fwnode_handle {
   struct fwnode_handle *secondary ;
   struct fwnode_operations *ops ;
   struct device *dev ;
};
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fwnode.h"
struct fwnode_endpoint {
   unsigned int port ;
   unsigned int id ;
   struct fwnode_handle *local_fwnode ;
};
#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fwnode.h"
struct fwnode_reference_args {
   struct fwnode_handle *fwnode ;
   unsigned int nargs ;
   u64 args[8U] ;
};
#line 110  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fwnode.h"
struct fwnode_operations {
   struct fwnode_handle *(*get)(struct fwnode_handle *) ;
   void (*put)(struct fwnode_handle *) ;
   bool (*device_is_available)(struct fwnode_handle *) ;
   void *(*device_get_match_data)(struct fwnode_handle *, struct device *) ;
   bool (*property_present)(struct fwnode_handle *, char *) ;
   int (*property_read_int_array)(struct fwnode_handle *, char *, unsigned int , void *, size_t ) ;
   int (*property_read_string_array)(struct fwnode_handle *, char *, char **, size_t ) ;
   char *(*get_name)(struct fwnode_handle *) ;
   char *(*get_name_prefix)(struct fwnode_handle *) ;
   struct fwnode_handle *(*get_parent)(struct fwnode_handle *) ;
   struct fwnode_handle *(*get_next_child_node)(struct fwnode_handle *, struct fwnode_handle *) ;
   struct fwnode_handle *(*get_named_child_node)(struct fwnode_handle *, char *) ;
   int (*get_reference_args)(struct fwnode_handle *, char *, char *, unsigned int , unsigned int , struct fwnode_reference_args *) ;
   struct fwnode_handle *(*graph_get_next_endpoint)(struct fwnode_handle *, struct fwnode_handle *) ;
   struct fwnode_handle *(*graph_get_remote_endpoint)(struct fwnode_handle *) ;
   struct fwnode_handle *(*graph_get_port_parent)(struct fwnode_handle *) ;
   int (*graph_parse_endpoint)(struct fwnode_handle *, struct fwnode_endpoint *) ;
   int (*add_links)(struct fwnode_handle *, struct device *) ;
};
#line 54  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/llist.h"
struct llist_node;
#line 58  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/llist.h"
struct llist_node {
   struct llist_node *next ;
};
#line 53  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/vmalloc.h"
struct vm_struct {
   struct vm_struct *next ;
   void *addr ;
   unsigned long size ;
   unsigned long flags ;
   struct page **pages ;
   unsigned int nr_pages ;
   phys_addr_t phys_addr ;
   void *caller ;
};
#line 266  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/apic.h"
struct irq_data;
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/smp.h"
struct __call_single_data {
   struct llist_node llist ;
   void (*func)(void *) ;
   void *info ;
   unsigned int flags ;
};
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/arch_topology.h"
struct device_node;
#line 822  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/sysctl.h"
struct nsproxy;
#line 823 
struct ctl_table_root;
#line 824 
struct ctl_table_header;
#line 825 
struct ctl_dir;
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
typedef int proc_handler(struct ctl_table *, int , void *, size_t *, loff_t *);
#line 105  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct ctl_table_poll {
   atomic_t event ;
   wait_queue_head_t wait ;
};
#line 123  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct ctl_table {
   char *procname ;
   void *data ;
   int maxlen ;
   umode_t mode ;
   struct ctl_table *child ;
   proc_handler *proc_handler ;
   struct ctl_table_poll *poll ;
   void *extra1 ;
   void *extra2 ;
} __attribute__((__designated_init__));
#line 135  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct ctl_node {
   struct rb_node node ;
   struct ctl_table_header *header ;
};
#line 142  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct __anonstruct_237 {
   struct ctl_table *ctl_table ;
   int used ;
   int count ;
   int nreg ;
};
#line 142  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
union __anonunion_236 {
   struct __anonstruct_237 __anonCompField___anonunion_236_47 ;
   struct callback_head rcu ;
};
#line 142 
struct ctl_table_set;
#line 142  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct ctl_table_header {
   union __anonunion_236 __anonCompField_ctl_table_header_48 ;
   struct completion *unregistering ;
   struct ctl_table *ctl_table_arg ;
   struct ctl_table_root *root ;
   struct ctl_table_set *set ;
   struct ctl_dir *parent ;
   struct ctl_node *node ;
   struct hlist_head inodes ;
};
#line 161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct ctl_dir {
   struct ctl_table_header header ;
   struct rb_root root ;
};
#line 167  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct ctl_table_set {
   int (*is_seen)(struct ctl_table_set *) ;
   struct ctl_dir dir ;
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct ctl_table_root {
   struct ctl_table_set default_set ;
   struct ctl_table_set *(*lookup)(struct ctl_table_root *) ;
   void (*set_ownership)(struct ctl_table_header *, struct ctl_table *, kuid_t *, kgid_t *) ;
   int (*permissions)(struct ctl_table_header *, struct ctl_table *) ;
};
#line 242 
struct cred;
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/vdso.h"
struct vdso_image {
   void *data ;
   unsigned long size ;
   unsigned long alt ;
   unsigned long alt_len ;
   long sym_vvar_start ;
   long sym_vvar_page ;
   long sym_pvclock_page ;
   long sym_hvclock_page ;
   long sym_VDSO32_NOTE_MASK ;
   long sym___kernel_sigreturn ;
   long sym___kernel_rt_sigreturn ;
   long sym___kernel_vsyscall ;
   long sym_int80_landing_pad ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef __u64 Elf64_Addr;
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef __u16 Elf64_Half;
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef __u64 Elf64_Off;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef __u32 Elf64_Word;
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef __u64 Elf64_Xword;
#line 192  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
struct elf64_sym {
   Elf64_Word st_name ;
   unsigned char st_info ;
   unsigned char st_other ;
   Elf64_Half st_shndx ;
   Elf64_Addr st_value ;
   Elf64_Xword st_size ;
};
#line 200  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef struct elf64_sym Elf64_Sym;
#line 221  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
struct elf64_hdr {
   unsigned char e_ident[16U] ;
   Elf64_Half e_type ;
   Elf64_Half e_machine ;
   Elf64_Word e_version ;
   Elf64_Addr e_entry ;
   Elf64_Off e_phoff ;
   Elf64_Off e_shoff ;
   Elf64_Word e_flags ;
   Elf64_Half e_ehsize ;
   Elf64_Half e_phentsize ;
   Elf64_Half e_phnum ;
   Elf64_Half e_shentsize ;
   Elf64_Half e_shnum ;
   Elf64_Half e_shstrndx ;
};
#line 237  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef struct elf64_hdr Elf64_Ehdr;
#line 316  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
struct elf64_shdr {
   Elf64_Word sh_name ;
   Elf64_Word sh_type ;
   Elf64_Xword sh_flags ;
   Elf64_Addr sh_addr ;
   Elf64_Off sh_offset ;
   Elf64_Xword sh_size ;
   Elf64_Word sh_link ;
   Elf64_Word sh_info ;
   Elf64_Xword sh_addralign ;
   Elf64_Xword sh_entsize ;
};
#line 328  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef struct elf64_shdr Elf64_Shdr;
#line 292  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/xarray.h"
struct xarray {
   spinlock_t xa_lock ;
   gfp_t xa_flags ;
   void *xa_head ;
};
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/idr.h"
struct idr {
   struct xarray idr_rt ;
   unsigned int idr_base ;
   unsigned int idr_next ;
};
#line 322 
struct dentry;
#line 323 
struct iattr;
#line 324 
struct super_block;
#line 325 
struct poll_table_struct;
#line 326 
struct fs_context;
#line 328 
struct kernfs_open_node;
#line 329 
struct kernfs_iattrs;
#line 84  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_root;
#line 84  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_elem_dir {
   unsigned long subdirs ;
   struct rb_root children ;
   struct kernfs_root *root ;
};
#line 96 
struct kernfs_node;
#line 96  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_elem_symlink {
   struct kernfs_node *target_kn ;
};
#line 100 
struct kernfs_ops;
#line 100  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_elem_attr {
   struct kernfs_ops *ops ;
   struct kernfs_open_node *open ;
   loff_t size ;
   struct kernfs_node *notify_next ;
};
#line 116  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
union __anonunion_256 {
   struct kernfs_elem_dir dir ;
   struct kernfs_elem_symlink symlink ;
   struct kernfs_elem_attr attr ;
};
#line 116  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_node {
   atomic_t count ;
   atomic_t active ;
   struct lockdep_map dep_map ;
   struct kernfs_node *parent ;
   char *name ;
   struct rb_node rb ;
   void *ns ;
   unsigned int hash ;
   union __anonunion_256 __anonCompField_kernfs_node_51 ;
   void *priv ;
   u64 id ;
   unsigned short flags ;
   umode_t mode ;
   struct kernfs_iattrs *iattr ;
};
#line 161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_syscall_ops {
   int (*show_options)(struct seq_file *, struct kernfs_root *) ;
   int (*mkdir)(struct kernfs_node *, char *, umode_t ) ;
   int (*rmdir)(struct kernfs_node *) ;
   int (*rename)(struct kernfs_node *, struct kernfs_node *, char *) ;
   int (*show_path)(struct seq_file *, struct kernfs_node *, struct kernfs_root *) ;
};
#line 173  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_root {
   struct kernfs_node *kn ;
   unsigned int flags ;
   struct idr ino_idr ;
   u32 last_id_lowbits ;
   u32 id_highbits ;
   struct kernfs_syscall_ops *syscall_ops ;
   struct list_head supers ;
   wait_queue_head_t deactivate_waitq ;
};
#line 190  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_open_file {
   struct kernfs_node *kn ;
   struct file *file ;
   struct seq_file *seq_file ;
   void *priv ;
   struct mutex mutex ;
   struct mutex prealloc_mutex ;
   int event ;
   struct list_head list ;
   char *prealloc_buf ;
   size_t atomic_write_len ;
   bool mmapped : 1 ;
   bool released : 1 ;
   struct vm_operations_struct *vm_ops ;
};
#line 210  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_ops {
   int (*open)(struct kernfs_open_file *) ;
   void (*release)(struct kernfs_open_file *) ;
   int (*seq_show)(struct seq_file *, void *) ;
   void *(*seq_start)(struct seq_file *, loff_t *) ;
   void *(*seq_next)(struct seq_file *, void *, loff_t *) ;
   void (*seq_stop)(struct seq_file *, void *) ;
   ssize_t (*read)(struct kernfs_open_file *, char *, size_t , loff_t ) ;
   size_t atomic_write_len ;
   bool prealloc ;
   ssize_t (*write)(struct kernfs_open_file *, char *, size_t , loff_t ) ;
   __poll_t (*poll)(struct kernfs_open_file *, struct poll_table_struct *) ;
   int (*mmap)(struct kernfs_open_file *, struct vm_area_struct *) ;
   struct lock_class_key lockdep_key ;
};
#line 595 
struct sock;
#line 596 
struct kobject;
#line 597 
enum kobj_ns_type {
    KOBJ_NS_TYPE_NONE = 0,
    KOBJ_NS_TYPE_NET = 1,
    KOBJ_NS_TYPES = 2
};
#line 39  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject_ns.h"
struct kobj_ns_type_operations {
   enum kobj_ns_type type ;
   bool (*current_may_mount)(void) ;
   void *(*grab_current_ns)(void) ;
   void *(*netlink_ns)(struct sock *) ;
   void *(*initial_ns)(void) ;
   void (*drop_ns)(void *) ;
};
#line 58 
struct bin_attribute;
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysfs.h"
struct attribute {
   char *name ;
   umode_t mode ;
   bool ignore_lockdep : 1 ;
   struct lock_class_key *key ;
   struct lock_class_key skey ;
};
#line 84  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysfs.h"
struct attribute_group {
   char *name ;
   umode_t (*is_visible)(struct kobject *, struct attribute *, int ) ;
   umode_t (*is_bin_visible)(struct kobject *, struct bin_attribute *, int ) ;
   struct attribute **attrs ;
   struct bin_attribute **bin_attrs ;
};
#line 161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysfs.h"
struct bin_attribute {
   struct attribute attr ;
   size_t size ;
   void *private ;
   ssize_t (*read)(struct file *, struct kobject *, struct bin_attribute *, char *, loff_t , size_t ) ;
   ssize_t (*write)(struct file *, struct kobject *, struct bin_attribute *, char *, loff_t , size_t ) ;
   int (*mmap)(struct file *, struct kobject *, struct bin_attribute *, struct vm_area_struct *) ;
};
#line 223  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysfs.h"
struct sysfs_ops {
   ssize_t (*show)(struct kobject *, struct attribute *, char *) ;
   ssize_t (*store)(struct kobject *, struct attribute *, char *, size_t ) ;
};
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/refcount.h"
struct refcount_struct {
   atomic_t refs ;
};
#line 101  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/refcount.h"
typedef struct refcount_struct refcount_t;
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kref.h"
struct kref {
   refcount_t refcount ;
};
#line 65  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject.h"
struct kset;
#line 65 
struct kobj_type;
#line 65  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject.h"
struct kobject {
   char *name ;
   struct list_head entry ;
   struct kobject *parent ;
   struct kset *kset ;
   struct kobj_type *ktype ;
   struct kernfs_node *sd ;
   struct kref kref ;
   struct delayed_work release ;
   unsigned int state_initialized : 1 ;
   unsigned int state_in_sysfs : 1 ;
   unsigned int state_add_uevent_sent : 1 ;
   unsigned int state_remove_uevent_sent : 1 ;
   unsigned int uevent_suppress : 1 ;
};
#line 139  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject.h"
struct kobj_type {
   void (*release)(struct kobject *) ;
   struct sysfs_ops *sysfs_ops ;
   struct attribute **default_attrs ;
   struct attribute_group **default_groups ;
   struct kobj_ns_type_operations *(*child_ns_type)(struct kobject *) ;
   void *(*namespace)(struct kobject *) ;
   void (*get_ownership)(struct kobject *, kuid_t *, kgid_t *) ;
};
#line 149  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject.h"
struct kobj_uevent_env {
   char *argv[3U] ;
   char *envp[32U] ;
   int envp_idx ;
   char buf[2048U] ;
   int buflen ;
};
#line 157  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject.h"
struct kset_uevent_ops {
   int (*filter)(struct kset *, struct kobject *) ;
   char *(*name)(struct kset *, struct kobject *) ;
   int (*uevent)(struct kset *, struct kobject *, struct kobj_uevent_env *) ;
};
#line 193  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject.h"
struct kset {
   struct list_head list ;
   spinlock_t list_lock ;
   struct kobject kobj ;
   struct kset_uevent_ops *uevent_ops ;
} __attribute__((__designated_init__));
#line 247 
struct kernel_param;
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/moduleparam.h"
struct kernel_param_ops {
   unsigned int flags ;
   int (*set)(char *, struct kernel_param *) ;
   int (*get)(char *, struct kernel_param *) ;
   void (*free)(void *) ;
};
#line 69 
struct kparam_string;
#line 69 
struct kparam_array;
#line 69  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/moduleparam.h"
union __anonunion_259 {
   void *arg ;
   struct kparam_string *str ;
   struct kparam_array *arr ;
};
#line 69  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/moduleparam.h"
struct kernel_param {
   char *name ;
   struct module *mod ;
   struct kernel_param_ops *ops ;
   u16 perm ;
   s8 level ;
   u8 flags ;
   union __anonunion_259 __anonCompField_kernel_param_52 ;
};
#line 86  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/moduleparam.h"
struct kparam_string {
   unsigned int maxlen ;
   char *string ;
};
#line 92  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/moduleparam.h"
struct kparam_array {
   unsigned int max ;
   unsigned int elemsize ;
   unsigned int *num ;
   struct kernel_param_ops *ops ;
   void *elem ;
};
#line 40  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rbtree_latch.h"
struct latch_tree_node {
   struct rb_node node[2U] ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/error-injection.h"
struct error_injection_entry {
   unsigned long addr ;
   int etype ;
};
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/module.h"
struct mod_arch_specific {
   unsigned int num_orcs ;
   int *orc_unwind_ip ;
   struct orc_entry *orc_unwind ;
};
#line 41  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct exception_table_entry;
#line 45 
struct module_param_attrs;
#line 45  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct module_kobject {
   struct kobject kobj ;
   struct module *mod ;
   struct kobject *drivers_dir ;
   struct module_param_attrs *mp ;
   struct completion *kobj_completion ;
} __attribute__((__designated_init__));
#line 53  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct module_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct module_attribute *, struct module_kobject *, char *) ;
   ssize_t (*store)(struct module_attribute *, struct module_kobject *, char *, size_t ) ;
   void (*setup)(struct module *, char *) ;
   int (*test)(struct module *) ;
   void (*free)(struct module *) ;
};
#line 297 
enum module_state {
    MODULE_STATE_LIVE = 0,
    MODULE_STATE_COMING = 1,
    MODULE_STATE_GOING = 2,
    MODULE_STATE_UNFORMED = 3
};
#line 305  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct mod_tree_node {
   struct module *mod ;
   struct latch_tree_node node ;
};
#line 310  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct module_layout {
   void *base ;
   unsigned int size ;
   unsigned int text_size ;
   unsigned int ro_size ;
   unsigned int ro_after_init_size ;
   struct mod_tree_node mtn ;
};
#line 334  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct mod_kallsyms {
   Elf64_Sym *symtab ;
   unsigned int num_symtab ;
   char *strtab ;
   char *typetab ;
};
#line 342  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct klp_modinfo {
   Elf64_Ehdr hdr ;
   Elf64_Shdr *sechdrs ;
   char *secstrings ;
   unsigned int symndx ;
};
#line 350 
struct module_sect_attrs;
#line 350 
struct module_notes_attrs;
#line 350 
struct trace_event_call;
#line 350 
struct trace_eval_map;
#line 350  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct module {
   enum module_state state ;
   struct list_head list ;
   char name[56U] ;
   struct module_kobject mkobj ;
   struct module_attribute *modinfo_attrs ;
   char *version ;
   char *srcversion ;
   struct kobject *holders_dir ;
   struct kernel_symbol *syms ;
   s32 *crcs ;
   unsigned int num_syms ;
   struct mutex param_lock ;
   struct kernel_param *kp ;
   unsigned int num_kp ;
   unsigned int num_gpl_syms ;
   struct kernel_symbol *gpl_syms ;
   s32 *gpl_crcs ;
   struct kernel_symbol *unused_syms ;
   s32 *unused_crcs ;
   unsigned int num_unused_syms ;
   unsigned int num_unused_gpl_syms ;
   struct kernel_symbol *unused_gpl_syms ;
   s32 *unused_gpl_crcs ;
   bool sig_ok ;
   bool async_probe_requested ;
   struct kernel_symbol *gpl_future_syms ;
   s32 *gpl_future_crcs ;
   unsigned int num_gpl_future_syms ;
   unsigned int num_exentries ;
   struct exception_table_entry *extable ;
   int (*init)(void) ;
   struct module_layout core_layout ;
   struct module_layout init_layout ;
   struct mod_arch_specific arch ;
   unsigned long taints ;
   unsigned int num_bugs ;
   struct list_head bug_list ;
   struct bug_entry *bug_table ;
   struct mod_kallsyms *kallsyms ;
   struct mod_kallsyms core_kallsyms ;
   struct module_sect_attrs *sect_attrs ;
   struct module_notes_attrs *notes_attrs ;
   char *args ;
   void *percpu ;
   unsigned int percpu_size ;
   unsigned int num_tracepoints ;
   tracepoint_ptr_t *tracepoints_ptrs ;
   unsigned int num_srcu_structs ;
   struct srcu_struct **srcu_struct_ptrs ;
   unsigned int num_bpf_raw_events ;
   struct bpf_raw_event_map *bpf_raw_events ;
   struct jump_entry *jump_entries ;
   unsigned int num_jump_entries ;
   unsigned int num_trace_bprintk_fmt ;
   char **trace_bprintk_fmt_start ;
   struct trace_event_call **trace_events ;
   unsigned int num_trace_events ;
   struct trace_eval_map **trace_evals ;
   unsigned int num_trace_evals ;
   unsigned int num_ftrace_callsites ;
   unsigned long *ftrace_callsites ;
   bool klp ;
   bool klp_alive ;
   struct klp_modinfo *klp_info ;
   struct list_head source_list ;
   struct list_head target_list ;
   void (*exit)(void) ;
   atomic_t refcnt ;
   ctor_fn_t *ctors ;
   unsigned int num_ctors ;
   struct error_injection_entry *ei_funcs ;
   unsigned int num_ei_funcs ;
} __attribute__((__designated_init__, __aligned__(64)));
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/signal.h"
struct __anonstruct_sigset_t_302 {
   unsigned long sig[1U] ;
};
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/signal.h"
typedef struct __anonstruct_sigset_t_302 sigset_t;
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/signal.h"
typedef void __signalfn_t(int );
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/signal-defs.h"
typedef __signalfn_t *__sighandler_t;
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/signal-defs.h"
typedef void __restorefn_t(void);
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/signal-defs.h"
typedef __restorefn_t *__sigrestore_t;
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
union sigval {
   int sival_int ;
   void *sival_ptr ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
typedef union sigval sigval_t;
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__kill_303 {
   __kernel_pid_t _pid ;
   __kernel_uid32_t _uid ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__timer_304 {
   __kernel_timer_t _tid ;
   int _overrun ;
   sigval_t _sigval ;
   int _sys_private ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__rt_305 {
   __kernel_pid_t _pid ;
   __kernel_uid32_t _uid ;
   sigval_t _sigval ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__sigchld_306 {
   __kernel_pid_t _pid ;
   __kernel_uid32_t _uid ;
   int _status ;
   __kernel_clock_t _utime ;
   __kernel_clock_t _stime ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__addr_bnd_309 {
   char _dummy_bnd[8U] ;
   void *_lower ;
   void *_upper ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__addr_pkey_310 {
   char _dummy_pkey[8U] ;
   __u32 _pkey ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
union __anonunion_308 {
   short _addr_lsb ;
   struct __anonstruct__addr_bnd_309 _addr_bnd ;
   struct __anonstruct__addr_pkey_310 _addr_pkey ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__sigfault_307 {
   void *_addr ;
   union __anonunion_308 __anonCompField___anonstruct__sigfault_307_53 ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__sigpoll_311 {
   long _band ;
   int _fd ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__sigsys_312 {
   void *_call_addr ;
   int _syscall ;
   unsigned int _arch ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
union __sifields {
   struct __anonstruct__kill_303 _kill ;
   struct __anonstruct__timer_304 _timer ;
   struct __anonstruct__rt_305 _rt ;
   struct __anonstruct__sigchld_306 _sigchld ;
   struct __anonstruct__sigfault_307 _sigfault ;
   struct __anonstruct__sigpoll_311 _sigpoll ;
   struct __anonstruct__sigsys_312 _sigsys ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/signal_types.h"
struct __anonstruct_317 {
   int si_signo ;
   int si_errno ;
   int si_code ;
   union __sifields _sifields ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/signal_types.h"
struct kernel_siginfo {
   struct __anonstruct_317 __anonCompField_kernel_siginfo_56 ;
};
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/signal_types.h"
typedef struct kernel_siginfo kernel_siginfo_t;
#line 20 
struct user_struct;
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/signal_types.h"
struct sigpending {
   struct list_head list ;
   sigset_t signal ;
};
#line 35  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/signal_types.h"
struct sigaction {
   __sighandler_t sa_handler ;
   unsigned long sa_flags ;
   __sigrestore_t sa_restorer ;
   sigset_t sa_mask ;
};
#line 49  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/signal_types.h"
struct k_sigaction {
   struct sigaction sa ;
};
#line 264  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/signal.h"
enum pid_type;
#line 264 
enum pid_type;
#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/sched.h"
enum pid_type {
    PIDTYPE_PID = 0,
    PIDTYPE_TGID = 1,
    PIDTYPE_PGID = 2,
    PIDTYPE_SID = 3,
    PIDTYPE_MAX = 4
};
#line 54  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pid.h"
struct pid_namespace;
#line 54  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pid.h"
struct upid {
   int nr ;
   struct pid_namespace *ns ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pid.h"
struct pid {
   refcount_t count ;
   unsigned int level ;
   struct hlist_head tasks[4U] ;
   wait_queue_head_t wait_pidfd ;
   struct callback_head rcu ;
   struct upid numbers[1U] ;
};
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rhashtable-types.h"
struct rhash_head {
   struct rhash_head *next ;
};
#line 25 
struct bucket_table;
#line 33 
struct rhashtable;
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rhashtable-types.h"
struct rhashtable_compare_arg {
   struct rhashtable *ht ;
   void *key ;
};
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rhashtable-types.h"
struct rhashtable_params {
   u16 nelem_hint ;
   u16 key_len ;
   u16 key_offset ;
   u16 head_offset ;
   unsigned int max_size ;
   u16 min_size ;
   bool automatic_shrinking ;
   u32 (*hashfn)(void *, u32 , u32 ) ;
   u32 (*obj_hashfn)(void *, u32 , u32 ) ;
   int (*obj_cmpfn)(struct rhashtable_compare_arg *, void *) ;
};
#line 81  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rhashtable-types.h"
struct rhashtable {
   struct bucket_table *tbl ;
   unsigned int key_len ;
   unsigned int max_elems ;
   struct rhashtable_params p ;
   bool rhlist ;
   struct work_struct run_work ;
   struct mutex mutex ;
   spinlock_t lock ;
   atomic_t nelems ;
};
#line 67  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/sem.h"
struct sem_undo_list;
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sem.h"
struct sysv_sem {
   struct sem_undo_list *undo_list ;
};
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/shm.h"
struct sysv_shm {
   struct list_head shm_clist ;
};
#line 83  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/plist.h"
struct plist_node {
   int prio ;
   struct list_head prio_list ;
   struct list_head node_list ;
};
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timerqueue.h"
struct timerqueue_node {
   struct rb_node node ;
   ktime_t expires ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timerqueue.h"
struct timerqueue_head {
   struct rb_root_cached rb_root ;
};
#line 60 
struct hrtimer_clock_base;
#line 61 
struct hrtimer_cpu_base;
#line 80 
enum hrtimer_restart {
    HRTIMER_NORESTART = 0,
    HRTIMER_RESTART = 1
};
#line 117  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/hrtimer.h"
struct hrtimer {
   struct timerqueue_node node ;
   ktime_t _softexpires ;
   enum hrtimer_restart (*function)(struct hrtimer *) ;
   struct hrtimer_clock_base *base ;
   u8 state ;
   u8 is_rel ;
   u8 is_soft ;
   u8 is_hard ;
};
#line 158  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/hrtimer.h"
struct hrtimer_clock_base {
   struct hrtimer_cpu_base *cpu_base ;
   unsigned int index ;
   clockid_t clockid ;
   seqcount_t seq ;
   struct hrtimer *running ;
   struct timerqueue_head active ;
   ktime_t (*get_time)(void) ;
   ktime_t offset ;
} __attribute__((__aligned__(64)));
#line 213  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/hrtimer.h"
struct hrtimer_cpu_base {
   raw_spinlock_t lock ;
   unsigned int cpu ;
   unsigned int active_bases ;
   unsigned int clock_was_set_seq ;
   unsigned int hres_active : 1 ;
   unsigned int in_hrtirq : 1 ;
   unsigned int hang_detected : 1 ;
   unsigned int softirq_activated : 1 ;
   unsigned int nr_events ;
   unsigned short nr_retries ;
   unsigned short nr_hangs ;
   unsigned int max_hang_time ;
   ktime_t expires_next ;
   struct hrtimer *next_timer ;
   ktime_t softirq_expires_next ;
   struct hrtimer *softirq_next_timer ;
   struct hrtimer_clock_base clock_base[8U] ;
} __attribute__((__aligned__(64)));
#line 40  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/seccomp.h"
struct seccomp_filter;
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seccomp.h"
struct seccomp {
   int mode ;
   struct seccomp_filter *filter ;
};
#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/resource.h"
struct rlimit {
   __kernel_ulong_t rlim_cur ;
   __kernel_ulong_t rlim_max ;
};
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/latencytop.h"
struct latency_record {
   unsigned long backtrace[12U] ;
   unsigned int count ;
   unsigned long time ;
   unsigned long max ;
};
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/types.h"
struct task_cputime {
   u64 stime ;
   u64 utime ;
   unsigned long long sum_exec_runtime ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/task_io_accounting.h"
struct task_io_accounting {
   u64 rchar ;
   u64 wchar ;
   u64 syscr ;
   u64 syscw ;
   u64 read_bytes ;
   u64 write_bytes ;
   u64 cancelled_write_bytes ;
};
#line 107  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/posix-timers.h"
struct posix_cputimer_base {
   u64 nextevt ;
   struct timerqueue_head tqhead ;
};
#line 122  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/posix-timers.h"
struct posix_cputimers {
   struct posix_cputimer_base bases[3U] ;
   unsigned int timers_active ;
   unsigned int expiry_active ;
};
#line 193 
struct signal_struct;
#line 62  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/rseq.h"
union __anonunion_rseq_cs_324 {
   __u64 ptr64 ;
   __u64 ptr ;
};
#line 62  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/rseq.h"
struct rseq {
   __u32 cpu_id_start ;
   __u32 cpu_id ;
   union __anonunion_rseq_cs_324 rseq_cs ;
   __u32 flags ;
} __attribute__((__aligned__(32)));
#line 146 
struct audit_context;
#line 147 
struct backing_dev_info;
#line 148 
struct bio_list;
#line 149 
struct blk_plug;
#line 150 
struct capture_control;
#line 151 
struct cfs_rq;
#line 152 
struct fs_struct;
#line 153 
struct futex_pi_state;
#line 154 
struct io_context;
#line 155 
struct nameidata;
#line 156 
struct perf_event_context;
#line 157 
struct pipe_inode_info;
#line 159 
struct reclaim_state;
#line 160 
struct robust_list_head;
#line 165 
struct sighand_struct;
#line 166 
struct task_delay_info;
#line 167 
struct task_group;
#line 242  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct prev_cputime {
   u64 utime ;
   u64 stime ;
   raw_spinlock_t lock ;
};
#line 290  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct sched_info {
   unsigned long pcount ;
   unsigned long long run_delay ;
   unsigned long long last_arrival ;
   unsigned long long last_queued ;
};
#line 325  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct load_weight {
   unsigned long weight ;
   u32 inv_weight ;
};
#line 352  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct util_est {
   unsigned int enqueued ;
   unsigned int ewma ;
} __attribute__((__aligned__(8)));
#line 401  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct sched_avg {
   u64 last_update_time ;
   u64 load_sum ;
   u64 runnable_load_sum ;
   u32 util_sum ;
   u32 period_contrib ;
   unsigned long load_avg ;
   unsigned long runnable_load_avg ;
   unsigned long util_avg ;
   struct util_est util_est ;
} __attribute__((__aligned__(64)));
#line 413  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct sched_statistics {
   u64 wait_start ;
   u64 wait_max ;
   u64 wait_count ;
   u64 wait_sum ;
   u64 iowait_count ;
   u64 iowait_sum ;
   u64 sleep_start ;
   u64 sleep_max ;
   s64 sum_sleep_runtime ;
   u64 block_start ;
   u64 block_max ;
   u64 exec_max ;
   u64 slice_max ;
   u64 nr_migrations_cold ;
   u64 nr_failed_migrations_affine ;
   u64 nr_failed_migrations_running ;
   u64 nr_failed_migrations_hot ;
   u64 nr_forced_migrations ;
   u64 nr_wakeups ;
   u64 nr_wakeups_sync ;
   u64 nr_wakeups_migrate ;
   u64 nr_wakeups_local ;
   u64 nr_wakeups_remote ;
   u64 nr_wakeups_affine ;
   u64 nr_wakeups_affine_attempts ;
   u64 nr_wakeups_passive ;
   u64 nr_wakeups_idle ;
};
#line 449  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct sched_entity {
   struct load_weight load ;
   unsigned long runnable_weight ;
   struct rb_node run_node ;
   struct list_head group_node ;
   unsigned int on_rq ;
   u64 exec_start ;
   u64 sum_exec_runtime ;
   u64 vruntime ;
   u64 prev_sum_exec_runtime ;
   u64 nr_migrations ;
   struct sched_statistics statistics ;
   int depth ;
   struct sched_entity *parent ;
   struct cfs_rq *cfs_rq ;
   struct cfs_rq *my_q ;
   struct sched_avg avg ;
};
#line 486 
struct rt_rq;
#line 486  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct sched_rt_entity {
   struct list_head run_list ;
   unsigned long timeout ;
   unsigned long watchdog_stamp ;
   unsigned int time_slice ;
   unsigned short on_rq ;
   unsigned short on_list ;
   struct sched_rt_entity *back ;
   struct sched_rt_entity *parent ;
   struct rt_rq *rt_rq ;
   struct rt_rq *my_q ;
} __attribute__((__designated_init__));
#line 504  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct sched_dl_entity {
   struct rb_node rb_node ;
   u64 dl_runtime ;
   u64 dl_deadline ;
   u64 dl_period ;
   u64 dl_bw ;
   u64 dl_density ;
   s64 runtime ;
   u64 deadline ;
   unsigned int flags ;
   unsigned int dl_throttled : 1 ;
   unsigned int dl_boosted : 1 ;
   unsigned int dl_yielded : 1 ;
   unsigned int dl_non_contending : 1 ;
   unsigned int dl_overrun : 1 ;
   struct hrtimer dl_timer ;
   struct hrtimer inactive_timer ;
};
#line 600  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct uclamp_se {
   unsigned int value : 11 ;
   unsigned int bucket_id : 3 ;
   unsigned int active : 1 ;
   unsigned int user_defined : 1 ;
};
#line 625  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct wake_q_node {
   struct wake_q_node *next ;
};
#line 629 
struct sched_class;
#line 629 
struct key;
#line 629 
struct files_struct;
#line 629 
struct rt_mutex_waiter;
#line 629 
struct css_set;
#line 629 
struct compat_robust_list_head;
#line 629 
struct numa_group;
#line 629  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
union __anonunion_326 {
   refcount_t rcu_users ;
   struct callback_head rcu ;
};
#line 629 
struct ftrace_ret_stack;
#line 629 
struct kcov;
#line 629 
struct request_queue;
#line 629  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct task_struct {
   struct thread_info thread_info ;
   long state ;
   void *stack ;
   refcount_t usage ;
   unsigned int flags ;
   unsigned int ptrace ;
   struct llist_node wake_entry ;
   int on_cpu ;
   unsigned int cpu ;
   unsigned int wakee_flips ;
   unsigned long wakee_flip_decay_ts ;
   struct task_struct *last_wakee ;
   int recent_used_cpu ;
   int wake_cpu ;
   int on_rq ;
   int prio ;
   int static_prio ;
   int normal_prio ;
   unsigned int rt_priority ;
   struct sched_class *sched_class ;
   struct sched_entity se ;
   struct sched_rt_entity rt ;
   struct task_group *sched_task_group ;
   struct sched_dl_entity dl ;
   struct uclamp_se uclamp_req[2U] ;
   struct uclamp_se uclamp[2U] ;
   struct hlist_head preempt_notifiers ;
   unsigned int btrace_seq ;
   unsigned int policy ;
   int nr_cpus_allowed ;
   cpumask_t *cpus_ptr ;
   cpumask_t cpus_mask ;
   unsigned long rcu_tasks_nvcsw ;
   u8 rcu_tasks_holdout ;
   u8 rcu_tasks_idx ;
   int rcu_tasks_idle_cpu ;
   struct list_head rcu_tasks_holdout_list ;
   struct sched_info sched_info ;
   struct list_head tasks ;
   struct plist_node pushable_tasks ;
   struct rb_node pushable_dl_tasks ;
   struct mm_struct *mm ;
   struct mm_struct *active_mm ;
   struct vmacache vmacache ;
   struct task_rss_stat rss_stat ;
   int exit_state ;
   int exit_code ;
   int exit_signal ;
   int pdeath_signal ;
   unsigned long jobctl ;
   unsigned int personality ;
   unsigned int sched_reset_on_fork : 1 ;
   unsigned int sched_contributes_to_load : 1 ;
   unsigned int sched_migrated : 1 ;
   unsigned int sched_remote_wakeup : 1 ;
   unsigned int sched_psi_wake_requeue : 1 ;
   unsigned int  ;
   unsigned int in_execve : 1 ;
   unsigned int in_iowait : 1 ;
   unsigned int restore_sigmask : 1 ;
   unsigned int in_user_fault : 1 ;
   unsigned int brk_randomized : 1 ;
   unsigned int no_cgroup_migration : 1 ;
   unsigned int frozen : 1 ;
   unsigned int use_memdelay : 1 ;
   unsigned long atomic_flags ;
   struct restart_block restart_block ;
   pid_t pid ;
   pid_t tgid ;
   unsigned long stack_canary ;
   struct task_struct *real_parent ;
   struct task_struct *parent ;
   struct list_head children ;
   struct list_head sibling ;
   struct task_struct *group_leader ;
   struct list_head ptraced ;
   struct list_head ptrace_entry ;
   struct pid *thread_pid ;
   struct hlist_node pid_links[4U] ;
   struct list_head thread_group ;
   struct list_head thread_node ;
   struct completion *vfork_done ;
   int *set_child_tid ;
   int *clear_child_tid ;
   u64 utime ;
   u64 stime ;
   u64 gtime ;
   struct prev_cputime prev_cputime ;
   unsigned long nvcsw ;
   unsigned long nivcsw ;
   u64 start_time ;
   u64 start_boottime ;
   unsigned long min_flt ;
   unsigned long maj_flt ;
   struct posix_cputimers posix_cputimers ;
   struct cred *ptracer_cred ;
   struct cred *real_cred ;
   struct cred *cred ;
   struct key *cached_requested_key ;
   char comm[16U] ;
   struct nameidata *nameidata ;
   struct sysv_sem sysvsem ;
   struct sysv_shm sysvshm ;
   unsigned long last_switch_count ;
   unsigned long last_switch_time ;
   struct fs_struct *fs ;
   struct files_struct *files ;
   struct nsproxy *nsproxy ;
   struct signal_struct *signal ;
   struct sighand_struct *sighand ;
   sigset_t blocked ;
   sigset_t real_blocked ;
   sigset_t saved_sigmask ;
   struct sigpending pending ;
   unsigned long sas_ss_sp ;
   size_t sas_ss_size ;
   unsigned int sas_ss_flags ;
   struct callback_head *task_works ;
   struct audit_context *audit_context ;
   kuid_t loginuid ;
   unsigned int sessionid ;
   struct seccomp seccomp ;
   u32 parent_exec_id ;
   u32 self_exec_id ;
   spinlock_t alloc_lock ;
   raw_spinlock_t pi_lock ;
   struct wake_q_node wake_q ;
   struct rb_root_cached pi_waiters ;
   struct task_struct *pi_top_task ;
   struct rt_mutex_waiter *pi_blocked_on ;
   struct mutex_waiter *blocked_on ;
   int non_block_count ;
   unsigned int irq_events ;
   unsigned long hardirq_enable_ip ;
   unsigned long hardirq_disable_ip ;
   unsigned int hardirq_enable_event ;
   unsigned int hardirq_disable_event ;
   int hardirqs_enabled ;
   int hardirq_context ;
   unsigned long softirq_disable_ip ;
   unsigned long softirq_enable_ip ;
   unsigned int softirq_disable_event ;
   unsigned int softirq_enable_event ;
   int softirqs_enabled ;
   int softirq_context ;
   u64 curr_chain_key ;
   int lockdep_depth ;
   unsigned int lockdep_recursion ;
   struct held_lock held_locks[48U] ;
   unsigned int in_ubsan ;
   void *journal_info ;
   struct bio_list *bio_list ;
   struct blk_plug *plug ;
   struct reclaim_state *reclaim_state ;
   struct backing_dev_info *backing_dev_info ;
   struct io_context *io_context ;
   struct capture_control *capture_control ;
   unsigned long ptrace_message ;
   kernel_siginfo_t *last_siginfo ;
   struct task_io_accounting ioac ;
   unsigned int psi_flags ;
   u64 acct_rss_mem1 ;
   u64 acct_vm_mem1 ;
   u64 acct_timexpd ;
   nodemask_t mems_allowed ;
   seqcount_t mems_allowed_seq ;
   int cpuset_mem_spread_rotor ;
   int cpuset_slab_spread_rotor ;
   struct css_set *cgroups ;
   struct list_head cg_list ;
   u32 closid ;
   u32 rmid ;
   struct robust_list_head *robust_list ;
   struct compat_robust_list_head *compat_robust_list ;
   struct list_head pi_state_list ;
   struct futex_pi_state *pi_state_cache ;
   struct mutex futex_exit_mutex ;
   unsigned int futex_state ;
   struct perf_event_context *perf_event_ctxp[2U] ;
   struct mutex perf_event_mutex ;
   struct list_head perf_event_list ;
   struct mempolicy *mempolicy ;
   short il_prev ;
   short pref_node_fork ;
   int numa_scan_seq ;
   unsigned int numa_scan_period ;
   unsigned int numa_scan_period_max ;
   int numa_preferred_nid ;
   unsigned long numa_migrate_retry ;
   u64 node_stamp ;
   u64 last_task_numa_placement ;
   u64 last_sum_exec_runtime ;
   struct callback_head numa_work ;
   struct numa_group *numa_group ;
   unsigned long *numa_faults ;
   unsigned long total_numa_faults ;
   unsigned long numa_faults_locality[3U] ;
   unsigned long numa_pages_migrated ;
   struct rseq *rseq ;
   u32 rseq_sig ;
   unsigned long rseq_event_mask ;
   struct tlbflush_unmap_batch tlb_ubc ;
   union __anonunion_326 __anonCompField_task_struct_58 ;
   struct pipe_inode_info *splice_pipe ;
   struct page_frag task_frag ;
   struct task_delay_info *delays ;
   int make_it_fail ;
   unsigned int fail_nth ;
   int nr_dirtied ;
   int nr_dirtied_pause ;
   unsigned long dirty_paused_when ;
   int latency_record_count ;
   struct latency_record latency_record[32U] ;
   u64 timer_slack_ns ;
   u64 default_timer_slack_ns ;
   unsigned int kasan_depth ;
   int curr_ret_stack ;
   int curr_ret_depth ;
   struct ftrace_ret_stack *ret_stack ;
   unsigned long long ftrace_timestamp ;
   atomic_t trace_overrun ;
   atomic_t tracing_graph_pause ;
   unsigned long trace ;
   unsigned long trace_recursion ;
   unsigned int kcov_mode ;
   unsigned int kcov_size ;
   void *kcov_area ;
   struct kcov *kcov ;
   u64 kcov_handle ;
   int kcov_sequence ;
   struct mem_cgroup *memcg_in_oom ;
   gfp_t memcg_oom_gfp_mask ;
   int memcg_oom_order ;
   unsigned int memcg_nr_pages_over_high ;
   struct mem_cgroup *active_memcg ;
   struct request_queue *throttle_queue ;
   struct uprobe_task *utask ;
   unsigned int sequential_io ;
   unsigned int sequential_io_avg ;
   unsigned long task_state_change ;
   int pagefault_disabled ;
   struct task_struct *oom_reaper_list ;
   struct vm_struct *stack_vm_area ;
   refcount_t stack_refcount ;
   int patch_state ;
   void *security ;
   struct thread_struct thread ;
};
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/extable.h"
struct exception_table_entry {
   int insn ;
   int fixup ;
   int handler ;
};
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/capability.h"
struct kernel_cap_struct {
   __u32 cap[2U] ;
};
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/capability.h"
typedef struct kernel_cap_struct kernel_cap_t;
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/assoc_array.h"
struct assoc_array_ptr;
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/assoc_array.h"
struct assoc_array {
   struct assoc_array_ptr *root ;
   unsigned long nr_leaves_on_tree ;
};
#line 83  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/assoc_array.h"
typedef int32_t key_serial_t;
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
typedef uint32_t key_perm_t;
#line 32 
struct net;
#line 33 
struct key_type;
#line 35 
struct key_tag;
#line 85  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
struct key_tag {
   struct callback_head rcu ;
   refcount_t usage ;
   bool removed ;
};
#line 91  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
struct __anonstruct_336 {
   u16 desc_len ;
   char desc[6U] ;
};
#line 91  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
union __anonunion_335 {
   struct __anonstruct_336 __anonCompField___anonunion_335_59 ;
   unsigned long x ;
};
#line 91  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
struct keyring_index_key {
   unsigned long hash ;
   union __anonunion_335 __anonCompField_keyring_index_key_60 ;
   struct key_type *type ;
   struct key_tag *domain_tag ;
   char *description ;
};
#line 111  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
union key_payload {
   void *rcu_data0 ;
   void *data[4U] ;
};
#line 153  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
struct key_restriction {
   int (*check)(struct key *, struct key_type *, union key_payload *, struct key *) ;
   struct key *key ;
   struct key_type *keytype ;
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
union __anonunion_337 {
   struct list_head graveyard_link ;
   struct rb_node serial_node ;
};
#line 172 
struct key_user;
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
union __anonunion_338 {
   time64_t expiry ;
   time64_t revoked_at ;
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
struct __anonstruct_340 {
   unsigned long hash ;
   unsigned long len_desc ;
   struct key_type *type ;
   struct key_tag *domain_tag ;
   char *description ;
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
union __anonunion_339 {
   struct keyring_index_key index_key ;
   struct __anonstruct_340 __anonCompField___anonunion_339_63 ;
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
struct __anonstruct_342 {
   struct list_head name_link ;
   struct assoc_array keys ;
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
union __anonunion_341 {
   union key_payload payload ;
   struct __anonstruct_342 __anonCompField___anonunion_341_65 ;
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
struct key {
   refcount_t usage ;
   key_serial_t serial ;
   union __anonunion_337 __anonCompField_key_61 ;
   struct rw_semaphore sem ;
   struct key_user *user ;
   void *security ;
   union __anonunion_338 __anonCompField_key_62 ;
   time64_t last_used_at ;
   kuid_t uid ;
   kgid_t gid ;
   key_perm_t perm ;
   unsigned short quotalen ;
   unsigned short datalen ;
   short state ;
   unsigned long flags ;
   union __anonunion_339 __anonCompField_key_64 ;
   union __anonunion_341 __anonCompField_key_66 ;
   struct key_restriction *restrict_link ;
};
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ratelimit.h"
struct ratelimit_state {
   raw_spinlock_t lock ;
   int interval ;
   int burst ;
   int printed ;
   int missed ;
   unsigned long begin ;
   unsigned long flags ;
};
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/user.h"
struct user_struct {
   refcount_t __count ;
   atomic_t processes ;
   atomic_t sigpending ;
   atomic_t fanotify_listeners ;
   atomic_long_t epoll_watches ;
   unsigned long mq_bytes ;
   unsigned long locked_shm ;
   unsigned long unix_inflight ;
   atomic_long_t pipe_bufs ;
   struct hlist_node uidhash_node ;
   kuid_t uid ;
   atomic_long_t locked_vm ;
   struct ratelimit_state ratelimit ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cred.h"
struct group_info {
   atomic_t usage ;
   int ngroups ;
   kgid_t gid[0U] ;
} __attribute__((__designated_init__));
#line 111  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cred.h"
union __anonunion_345 {
   int non_rcu ;
   struct callback_head rcu ;
};
#line 111  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cred.h"
struct cred {
   atomic_t usage ;
   atomic_t subscribers ;
   void *put_addr ;
   unsigned int magic ;
   kuid_t uid ;
   kgid_t gid ;
   kuid_t suid ;
   kgid_t sgid ;
   kuid_t euid ;
   kgid_t egid ;
   kuid_t fsuid ;
   kgid_t fsgid ;
   unsigned int securebits ;
   kernel_cap_t cap_inheritable ;
   kernel_cap_t cap_permitted ;
   kernel_cap_t cap_effective ;
   kernel_cap_t cap_bset ;
   kernel_cap_t cap_ambient ;
   unsigned char jit_keyring ;
   struct key *session_keyring ;
   struct key *process_keyring ;
   struct key *thread_keyring ;
   struct key *request_key_auth ;
   void *security ;
   struct user_struct *user ;
   struct user_namespace *user_ns ;
   struct group_info *group_info ;
   union __anonunion_345 __anonCompField_cred_67 ;
} __attribute__((__designated_init__));
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/signal.h"
struct sighand_struct {
   spinlock_t siglock ;
   refcount_t count ;
   wait_queue_head_t signalfd_wqh ;
   struct k_sigaction action[64U] ;
};
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/signal.h"
struct pacct_struct {
   int ac_flag ;
   long ac_exitcode ;
   unsigned long ac_mem ;
   u64 ac_utime ;
   u64 ac_stime ;
   unsigned long ac_minflt ;
   unsigned long ac_majflt ;
};
#line 36  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/signal.h"
struct cpu_itimer {
   u64 expires ;
   u64 incr ;
};
#line 45  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/signal.h"
struct task_cputime_atomic {
   atomic64_t utime ;
   atomic64_t stime ;
   atomic64_t sum_exec_runtime ;
};
#line 64  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/signal.h"
struct thread_group_cputimer {
   struct task_cputime_atomic cputime_atomic ;
};
#line 80 
struct tty_struct;
#line 80 
struct autogroup;
#line 80 
struct taskstats;
#line 80 
struct tty_audit_buf;
#line 80  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/signal.h"
struct signal_struct {
   refcount_t sigcnt ;
   atomic_t live ;
   int nr_threads ;
   struct list_head thread_head ;
   wait_queue_head_t wait_chldexit ;
   struct task_struct *curr_target ;
   struct sigpending shared_pending ;
   struct hlist_head multiprocess ;
   int group_exit_code ;
   int notify_count ;
   struct task_struct *group_exit_task ;
   int group_stop_count ;
   unsigned int flags ;
   unsigned int is_child_subreaper : 1 ;
   unsigned int has_child_subreaper : 1 ;
   int posix_timer_id ;
   struct list_head posix_timers ;
   struct hrtimer real_timer ;
   ktime_t it_real_incr ;
   struct cpu_itimer it[2U] ;
   struct thread_group_cputimer cputimer ;
   struct posix_cputimers posix_cputimers ;
   struct pid *pids[4U] ;
   struct pid *tty_old_pgrp ;
   int leader ;
   struct tty_struct *tty ;
   struct autogroup *autogroup ;
   seqlock_t stats_lock ;
   u64 utime ;
   u64 stime ;
   u64 cutime ;
   u64 cstime ;
   u64 gtime ;
   u64 cgtime ;
   struct prev_cputime prev_cputime ;
   unsigned long nvcsw ;
   unsigned long nivcsw ;
   unsigned long cnvcsw ;
   unsigned long cnivcsw ;
   unsigned long min_flt ;
   unsigned long maj_flt ;
   unsigned long cmin_flt ;
   unsigned long cmaj_flt ;
   unsigned long inblock ;
   unsigned long oublock ;
   unsigned long cinblock ;
   unsigned long coublock ;
   unsigned long maxrss ;
   unsigned long cmaxrss ;
   struct task_io_accounting ioac ;
   unsigned long long sum_sched_runtime ;
   struct rlimit rlim[16U] ;
   struct pacct_struct pacct ;
   struct taskstats *stats ;
   unsigned int audit_tty ;
   struct tty_audit_buf *tty_audit_buf ;
   bool oom_flag_origin ;
   short oom_score_adj ;
   short oom_score_adj_min ;
   struct mm_struct *oom_mm ;
   struct mutex cred_guard_mutex ;
} __attribute__((__designated_init__));
#line 705 
struct percpu_ref;
#line 706  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/signal.h"
typedef void percpu_ref_func_t(struct percpu_ref *);
#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/percpu-refcount.h"
struct percpu_ref {
   atomic_long_t count ;
   unsigned long percpu_count_ptr ;
   percpu_ref_func_t *release ;
   percpu_ref_func_t *confirm_switch ;
   bool force_atomic : 1 ;
   bool allow_reinit : 1 ;
   struct callback_head rcu ;
};
#line 67  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/delay.h"
struct scatterlist;
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/uio.h"
struct iovec {
   void *iov_base ;
   __kernel_size_t iov_len ;
};
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uio.h"
struct kvec {
   void *iov_base ;
   size_t iov_len ;
};
#line 30 
struct bio_vec;
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uio.h"
union __anonunion_425 {
   struct iovec *iov ;
   struct kvec *kvec ;
   struct bio_vec *bvec ;
   struct pipe_inode_info *pipe ;
};
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uio.h"
struct __anonstruct_427 {
   unsigned int head ;
   unsigned int start_head ;
};
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uio.h"
union __anonunion_426 {
   unsigned long nr_segs ;
   struct __anonstruct_427 __anonCompField___anonunion_426_69 ;
};
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uio.h"
struct iov_iter {
   unsigned int type ;
   size_t iov_offset ;
   size_t count ;
   union __anonunion_425 __anonCompField_iov_iter_68 ;
   union __anonunion_426 __anonCompField_iov_iter_70 ;
};
#line 285  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uio.h"
typedef unsigned short __kernel_sa_family_t;
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/socket.h"
struct socket;
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/socket.h"
typedef __kernel_sa_family_t sa_family_t;
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/socket.h"
struct sockaddr {
   sa_family_t sa_family ;
   char sa_data[14U] ;
};
#line 49 
struct kiocb;
#line 49  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/socket.h"
struct msghdr {
   void *msg_name ;
   int msg_namelen ;
   struct iov_iter msg_iter ;
   void *msg_control ;
   __kernel_size_t msg_controllen ;
   unsigned int msg_flags ;
   struct kiocb *msg_iocb ;
};
#line 422 
struct ns_common;
#line 105  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/in.h"
enum irqreturn {
    IRQ_NONE = 0,
    IRQ_HANDLED = 1,
    IRQ_WAKE_THREAD = 2
};
#line 111  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/in.h"
typedef enum irqreturn irqreturn_t;
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/irqnr.h"
struct irq_desc;
#line 110  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/interrupt.h"
struct proc_dir_entry;
#line 110  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/interrupt.h"
struct irqaction {
   irqreturn_t (*handler)(int , void *) ;
   void *dev_id ;
   void *percpu_dev_id ;
   struct irqaction *next ;
   irqreturn_t (*thread_fn)(int , void *) ;
   struct task_struct *thread ;
   struct irqaction *secondary ;
   unsigned int irq ;
   unsigned int flags ;
   unsigned long thread_flags ;
   unsigned long thread_mask ;
   char *name ;
   struct proc_dir_entry *dir ;
} __attribute__((__aligned__(4096)));
#line 268  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/interrupt.h"
struct irq_affinity_notify {
   unsigned int irq ;
   struct kref kref ;
   struct work_struct work ;
   void (*notify)(struct irq_affinity_notify *, cpumask_t *) ;
   void (*release)(struct kref *) ;
};
#line 472 
enum irqchip_irq_state {
    IRQCHIP_STATE_PENDING = 0,
    IRQCHIP_STATE_ACTIVE = 1,
    IRQCHIP_STATE_MASKED = 2,
    IRQCHIP_STATE_LINE_LEVEL = 3
};
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ioport.h"
struct resource {
   resource_size_t start ;
   resource_size_t end ;
   char *name ;
   unsigned long flags ;
   unsigned long desc ;
   struct resource *parent ;
   struct resource *sibling ;
   struct resource *child ;
};
#line 36  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/uuid.h"
struct __anonstruct_uuid_t_431 {
   __u8 b[16U] ;
};
#line 36  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/uuid.h"
typedef struct __anonstruct_uuid_t_431 uuid_t;
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uuid.h"
typedef unsigned long kernel_ulong_t;
#line 38  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mod_devicetable.h"
struct pci_device_id {
   __u32 vendor ;
   __u32 device ;
   __u32 subvendor ;
   __u32 subdevice ;
   __u32 class ;
   __u32 class_mask ;
   kernel_ulong_t driver_data ;
};
#line 210  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mod_devicetable.h"
struct acpi_device_id {
   __u8 id[9U] ;
   kernel_ulong_t driver_data ;
   __u32 cls ;
   __u32 cls_msk ;
};
#line 260  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mod_devicetable.h"
struct of_device_id {
   char name[32U] ;
   char type[32U] ;
   char compatible[128U] ;
   void *data ;
};
#line 50  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm.h"
struct pm_message {
   int event ;
};
#line 53  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm.h"
typedef struct pm_message pm_message_t;
#line 278  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm.h"
struct dev_pm_ops {
   int (*prepare)(struct device *) ;
   void (*complete)(struct device *) ;
   int (*suspend)(struct device *) ;
   int (*resume)(struct device *) ;
   int (*freeze)(struct device *) ;
   int (*thaw)(struct device *) ;
   int (*poweroff)(struct device *) ;
   int (*restore)(struct device *) ;
   int (*suspend_late)(struct device *) ;
   int (*resume_early)(struct device *) ;
   int (*freeze_late)(struct device *) ;
   int (*thaw_early)(struct device *) ;
   int (*poweroff_late)(struct device *) ;
   int (*restore_early)(struct device *) ;
   int (*suspend_noirq)(struct device *) ;
   int (*resume_noirq)(struct device *) ;
   int (*freeze_noirq)(struct device *) ;
   int (*thaw_noirq)(struct device *) ;
   int (*poweroff_noirq)(struct device *) ;
   int (*restore_noirq)(struct device *) ;
   int (*runtime_suspend)(struct device *) ;
   int (*runtime_resume)(struct device *) ;
   int (*runtime_idle)(struct device *) ;
};
#line 303 
enum rpm_status {
    RPM_ACTIVE = 0,
    RPM_RESUMING = 1,
    RPM_SUSPENDED = 2,
    RPM_SUSPENDING = 3
};
#line 310 
enum rpm_request {
    RPM_REQ_NONE = 0,
    RPM_REQ_IDLE = 1,
    RPM_REQ_SUSPEND = 2,
    RPM_REQ_AUTOSUSPEND = 3,
    RPM_REQ_RESUME = 4
};
#line 318 
struct wakeup_source;
#line 319 
struct wake_irq;
#line 320 
struct pm_domain_data;
#line 530  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm.h"
struct pm_subsys_data {
   spinlock_t lock ;
   unsigned int refcount ;
   struct list_head clock_list ;
   struct pm_domain_data *domain_data ;
};
#line 573 
struct dev_pm_qos;
#line 573  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm.h"
struct dev_pm_info {
   pm_message_t power_state ;
   unsigned int can_wakeup : 1 ;
   unsigned int async_suspend : 1 ;
   bool in_dpm_list : 1 ;
   bool is_prepared : 1 ;
   bool is_suspended : 1 ;
   bool is_noirq_suspended : 1 ;
   bool is_late_suspended : 1 ;
   bool no_pm : 1 ;
   bool early_init : 1 ;
   bool direct_complete : 1 ;
   u32 driver_flags ;
   spinlock_t lock ;
   struct list_head entry ;
   struct completion completion ;
   struct wakeup_source *wakeup ;
   bool wakeup_path : 1 ;
   bool syscore : 1 ;
   bool no_pm_callbacks : 1 ;
   unsigned int must_resume : 1 ;
   unsigned int may_skip_resume : 1 ;
   struct hrtimer suspend_timer ;
   unsigned long timer_expires ;
   struct work_struct work ;
   wait_queue_head_t wait_queue ;
   struct wake_irq *wakeirq ;
   atomic_t usage_count ;
   atomic_t child_count ;
   unsigned int disable_depth : 3 ;
   unsigned int idle_notification : 1 ;
   unsigned int request_pending : 1 ;
   unsigned int deferred_resume : 1 ;
   unsigned int runtime_auto : 1 ;
   bool ignore_children : 1 ;
   unsigned int no_callbacks : 1 ;
   unsigned int irq_safe : 1 ;
   unsigned int use_autosuspend : 1 ;
   unsigned int timer_autosuspends : 1 ;
   unsigned int memalloc_noio : 1 ;
   unsigned int links_count ;
   enum rpm_request request ;
   enum rpm_status runtime_status ;
   int runtime_error ;
   int autosuspend_delay ;
   u64 last_busy ;
   u64 active_time ;
   u64 suspended_time ;
   u64 accounting_timestamp ;
   struct pm_subsys_data *subsys_data ;
   void (*set_latency_tolerance)(struct device *, s32 ) ;
   struct dev_pm_qos *qos ;
};
#line 650  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm.h"
struct dev_pm_domain {
   struct dev_pm_ops ops ;
   int (*start)(struct device *) ;
   void (*detach)(struct device *, bool ) ;
   int (*activate)(struct device *) ;
   void (*sync)(struct device *) ;
   void (*dismiss)(struct device *) ;
};
#line 5  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/device.h"
struct dev_archdata {
   void *iommu ;
};
#line 12 
struct dma_map_ops;
#line 23 
struct device_driver;
#line 24 
struct driver_private;
#line 25 
struct class;
#line 26 
struct subsys_private;
#line 27 
struct bus_type;
#line 28 
struct iommu_ops;
#line 29 
struct iommu_group;
#line 30 
struct iommu_fwspec;
#line 31 
struct dev_pin_info;
#line 32 
struct iommu_param;
#line 122  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct bus_type {
   char *name ;
   char *dev_name ;
   struct device *dev_root ;
   struct attribute_group **bus_groups ;
   struct attribute_group **dev_groups ;
   struct attribute_group **drv_groups ;
   int (*match)(struct device *, struct device_driver *) ;
   int (*uevent)(struct device *, struct kobj_uevent_env *) ;
   int (*probe)(struct device *) ;
   void (*sync_state)(struct device *) ;
   int (*remove)(struct device *) ;
   void (*shutdown)(struct device *) ;
   int (*online)(struct device *) ;
   int (*offline)(struct device *) ;
   int (*suspend)(struct device *, pm_message_t ) ;
   int (*resume)(struct device *) ;
   int (*num_vf)(struct device *) ;
   int (*dma_configure)(struct device *) ;
   struct dev_pm_ops *pm ;
   struct iommu_ops *iommu_ops ;
   struct subsys_private *p ;
   struct lock_class_key lock_key ;
   bool need_parent_lock ;
};
#line 164 
struct device_type;
#line 309 
enum probe_type {
    PROBE_DEFAULT_STRATEGY = 0,
    PROBE_PREFER_ASYNCHRONOUS = 1,
    PROBE_FORCE_SYNCHRONOUS = 2
};
#line 383  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct device_driver {
   char *name ;
   struct bus_type *bus ;
   struct module *owner ;
   char *mod_name ;
   bool suppress_bind_attrs ;
   enum probe_type probe_type ;
   struct of_device_id *of_match_table ;
   struct acpi_device_id *acpi_match_table ;
   int (*probe)(struct device *) ;
   void (*sync_state)(struct device *) ;
   int (*remove)(struct device *) ;
   void (*shutdown)(struct device *) ;
   int (*suspend)(struct device *, pm_message_t ) ;
   int (*resume)(struct device *) ;
   struct attribute_group **groups ;
   struct attribute_group **dev_groups ;
   struct dev_pm_ops *pm ;
   void (*coredump)(struct device *) ;
   struct driver_private *p ;
};
#line 589  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct class {
   char *name ;
   struct module *owner ;
   struct attribute_group **class_groups ;
   struct attribute_group **dev_groups ;
   struct kobject *dev_kobj ;
   int (*dev_uevent)(struct device *, struct kobj_uevent_env *) ;
   char *(*devnode)(struct device *, umode_t *) ;
   void (*class_release)(struct class *) ;
   void (*dev_release)(struct device *) ;
   int (*shutdown_pre)(struct device *) ;
   struct kobj_ns_type_operations *ns_type ;
   void *(*namespace)(struct device *) ;
   void (*get_ownership)(struct device *, kuid_t *, kgid_t *) ;
   struct dev_pm_ops *pm ;
   struct subsys_private *p ;
};
#line 809  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct device_type {
   char *name ;
   struct attribute_group **groups ;
   int (*uevent)(struct device *, struct kobj_uevent_env *) ;
   char *(*devnode)(struct device *, umode_t *, kuid_t *, kgid_t *) ;
   void (*release)(struct device *) ;
   struct dev_pm_ops *pm ;
};
#line 821  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct device_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct device *, struct device_attribute *, char *) ;
   ssize_t (*store)(struct device *, struct device_attribute *, char *, size_t ) ;
};
#line 1008  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct device_dma_parameters {
   unsigned int max_segment_size ;
   unsigned long segment_boundary_mask ;
};
#line 1139 
enum dl_dev_state {
    DL_DEV_NO_DRIVER = 0,
    DL_DEV_PROBING = 1,
    DL_DEV_DRIVER_BOUND = 2,
    DL_DEV_UNBINDING = 3
};
#line 1164  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct dev_links_info {
   struct list_head suppliers ;
   struct list_head consumers ;
   struct list_head needs_suppliers ;
   struct list_head defer_sync ;
   bool need_for_probe ;
   enum dl_dev_state status ;
};
#line 1259 
struct irq_domain;
#line 1259 
struct dma_coherent_mem;
#line 1259 
struct cma;
#line 1259  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct device {
   struct kobject kobj ;
   struct device *parent ;
   struct device_private *p ;
   char *init_name ;
   struct device_type *type ;
   struct bus_type *bus ;
   struct device_driver *driver ;
   void *platform_data ;
   void *driver_data ;
   struct mutex lockdep_mutex ;
   struct mutex mutex ;
   struct dev_links_info links ;
   struct dev_pm_info power ;
   struct dev_pm_domain *pm_domain ;
   struct irq_domain *msi_domain ;
   struct dev_pin_info *pins ;
   struct list_head msi_list ;
   struct dma_map_ops *dma_ops ;
   u64 *dma_mask ;
   u64 coherent_dma_mask ;
   u64 bus_dma_limit ;
   unsigned long dma_pfn_offset ;
   struct device_dma_parameters *dma_parms ;
   struct list_head dma_pools ;
   struct dma_coherent_mem *dma_mem ;
   struct cma *cma_area ;
   struct dev_archdata archdata ;
   struct device_node *of_node ;
   struct fwnode_handle *fwnode ;
   int numa_node ;
   dev_t devt ;
   u32 id ;
   spinlock_t devres_lock ;
   struct list_head devres_head ;
   struct class *class ;
   struct attribute_group **groups ;
   void (*release)(struct device *) ;
   struct iommu_group *iommu_group ;
   struct iommu_fwspec *iommu_fwspec ;
   struct iommu_param *iommu_param ;
   bool offline_disabled : 1 ;
   bool offline : 1 ;
   bool of_node_reused : 1 ;
   bool state_synced : 1 ;
};
#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm_wakeup.h"
struct wakeup_source {
   char *name ;
   int id ;
   struct list_head entry ;
   spinlock_t lock ;
   struct wake_irq *wakeirq ;
   struct timer_list timer ;
   unsigned long timer_expires ;
   ktime_t total_time ;
   ktime_t max_time ;
   ktime_t last_time ;
   ktime_t start_prevent_time ;
   ktime_t prevent_sleep_time ;
   unsigned long event_count ;
   unsigned long active_count ;
   unsigned long relax_count ;
   unsigned long expire_count ;
   unsigned long wakeup_count ;
   struct device *dev ;
   bool active : 1 ;
   bool autosleep_enabled : 1 ;
};
#line 62  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
struct hotplug_slot;
#line 62  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
struct pci_slot {
   struct pci_bus *bus ;
   struct list_head list ;
   struct hotplug_slot *hotplug ;
   unsigned char number ;
   struct kobject kobj ;
};
#line 99  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
typedef int pci_power_t;
#line 153  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
typedef unsigned int pci_channel_state_t;
#line 162 
enum pci_channel_state {
    pci_channel_io_normal = 1,
    pci_channel_io_frozen = 2,
    pci_channel_io_perm_failure = 3
};
#line 181  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
typedef unsigned short pci_dev_flags_t;
#line 207  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
typedef unsigned short pci_bus_flags_t;
#line 282 
struct pcie_link_state;
#line 283 
struct pci_vpd;
#line 284 
struct pci_sriov;
#line 285 
struct pci_p2pdma;
#line 290 
struct aer_stats;
#line 290 
struct pci_driver;
#line 290  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
union __anonunion_433 {
   struct pci_sriov *sriov ;
   struct pci_dev *physfn ;
};
#line 290  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
struct pci_dev {
   struct list_head bus_list ;
   struct pci_bus *bus ;
   struct pci_bus *subordinate ;
   void *sysdata ;
   struct proc_dir_entry *procent ;
   struct pci_slot *slot ;
   unsigned int devfn ;
   unsigned short vendor ;
   unsigned short device ;
   unsigned short subsystem_vendor ;
   unsigned short subsystem_device ;
   unsigned int class ;
   u8 revision ;
   u8 hdr_type ;
   u16 aer_cap ;
   struct aer_stats *aer_stats ;
   u8 pcie_cap ;
   u8 msi_cap ;
   u8 msix_cap ;
   u8 pcie_mpss : 3 ;
   u8 rom_base_reg ;
   u8 pin ;
   u16 pcie_flags_reg ;
   unsigned long *dma_alias_mask ;
   struct pci_driver *driver ;
   u64 dma_mask ;
   struct device_dma_parameters dma_parms ;
   pci_power_t current_state ;
   unsigned int imm_ready : 1 ;
   u8 pm_cap ;
   unsigned int pme_support : 5 ;
   unsigned int pme_poll : 1 ;
   unsigned int d1_support : 1 ;
   unsigned int d2_support : 1 ;
   unsigned int no_d1d2 : 1 ;
   unsigned int no_d3cold : 1 ;
   unsigned int bridge_d3 : 1 ;
   unsigned int d3cold_allowed : 1 ;
   unsigned int mmio_always_on : 1 ;
   unsigned int wakeup_prepared : 1 ;
   unsigned int runtime_d3cold : 1 ;
   unsigned int skip_bus_pm : 1 ;
   unsigned int ignore_hotplug : 1 ;
   unsigned int hotplug_user_indicators : 1 ;
   unsigned int clear_retrain_link : 1 ;
   unsigned int d3_delay ;
   unsigned int d3cold_delay ;
   struct pcie_link_state *link_state ;
   unsigned int ltr_path : 1 ;
   unsigned int eetlp_prefix_path : 1 ;
   pci_channel_state_t error_state ;
   struct device dev ;
   int cfg_size ;
   unsigned int irq ;
   struct resource resource[17U] ;
   bool match_driver ;
   unsigned int transparent : 1 ;
   unsigned int io_window : 1 ;
   unsigned int pref_window : 1 ;
   unsigned int pref_64_window : 1 ;
   unsigned int multifunction : 1 ;
   unsigned int is_busmaster : 1 ;
   unsigned int no_msi : 1 ;
   unsigned int no_64bit_msi : 1 ;
   unsigned int block_cfg_access : 1 ;
   unsigned int broken_parity_status : 1 ;
   unsigned int irq_reroute_variant : 2 ;
   unsigned int msi_enabled : 1 ;
   unsigned int msix_enabled : 1 ;
   unsigned int ari_enabled : 1 ;
   unsigned int ats_enabled : 1 ;
   unsigned int pasid_enabled : 1 ;
   unsigned int pri_enabled : 1 ;
   unsigned int is_managed : 1 ;
   unsigned int needs_freset : 1 ;
   unsigned int state_saved : 1 ;
   unsigned int is_physfn : 1 ;
   unsigned int is_virtfn : 1 ;
   unsigned int reset_fn : 1 ;
   unsigned int is_hotplug_bridge : 1 ;
   unsigned int shpc_managed : 1 ;
   unsigned int is_thunderbolt : 1 ;
   unsigned int untrusted : 1 ;
   unsigned int __aer_firmware_first_valid : 1 ;
   unsigned int __aer_firmware_first : 1 ;
   unsigned int broken_intx_masking : 1 ;
   unsigned int io_window_1k : 1 ;
   unsigned int irq_managed : 1 ;
   unsigned int non_compliant_bars : 1 ;
   unsigned int is_probed : 1 ;
   unsigned int link_active_reporting : 1 ;
   unsigned int no_vf_scan : 1 ;
   pci_dev_flags_t dev_flags ;
   atomic_t enable_cnt ;
   u32 saved_config_space[16U] ;
   struct hlist_head saved_cap_space ;
   struct bin_attribute *rom_attr ;
   int rom_attr_enabled ;
   struct bin_attribute *res_attr[17U] ;
   struct bin_attribute *res_attr_wc[17U] ;
   unsigned int broken_cmd_compl : 1 ;
   unsigned int ptm_root : 1 ;
   unsigned int ptm_enabled : 1 ;
   u8 ptm_granularity ;
   struct attribute_group **msi_irq_groups ;
   struct pci_vpd *vpd ;
   union __anonunion_433 __anonCompField_pci_dev_73 ;
   u16 ats_cap ;
   u8 ats_stu ;
   u16 pri_cap ;
   u32 pri_reqs_alloc ;
   unsigned int pasid_required : 1 ;
   u16 pasid_cap ;
   u16 pasid_features ;
   struct pci_p2pdma *p2pdma ;
   phys_addr_t rom ;
   size_t romlen ;
   char *driver_override ;
   unsigned long priv_flags ;
};
#line 493 
struct pci_ops;
#line 493 
struct msi_controller;
#line 571  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
struct pci_bus {
   struct list_head node ;
   struct pci_bus *parent ;
   struct list_head children ;
   struct list_head devices ;
   struct pci_dev *self ;
   struct list_head slots ;
   struct resource *resource[4U] ;
   struct list_head resources ;
   struct resource busn_res ;
   struct pci_ops *ops ;
   struct msi_controller *msi ;
   void *sysdata ;
   struct proc_dir_entry *procdir ;
   unsigned char number ;
   unsigned char primary ;
   unsigned char max_bus_speed ;
   unsigned char cur_bus_speed ;
   char name[48U] ;
   unsigned short bridge_ctl ;
   pci_bus_flags_t bus_flags ;
   struct device *bridge ;
   struct device dev ;
   struct bin_attribute *legacy_io ;
   struct bin_attribute *legacy_mem ;
   unsigned int is_added : 1 ;
};
#line 697  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
struct pci_ops {
   int (*add_bus)(struct pci_bus *) ;
   void (*remove_bus)(struct pci_bus *) ;
   void *(*map_bus)(struct pci_bus *, unsigned int , int ) ;
   int (*read)(struct pci_bus *, unsigned int , int , int , u32 *) ;
   int (*write)(struct pci_bus *, unsigned int , int , int , u32 ) ;
};
#line 725  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
struct pci_dynids {
   spinlock_t lock ;
   struct list_head list ;
};
#line 729  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
typedef unsigned int pci_ers_result_t;
#line 761  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
struct pci_error_handlers {
   pci_ers_result_t (*error_detected)(struct pci_dev *, enum pci_channel_state ) ;
   pci_ers_result_t (*mmio_enabled)(struct pci_dev *) ;
   pci_ers_result_t (*slot_reset)(struct pci_dev *) ;
   void (*reset_prepare)(struct pci_dev *) ;
   void (*reset_done)(struct pci_dev *) ;
   void (*resume)(struct pci_dev *) ;
};
#line 824  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
struct pci_driver {
   struct list_head node ;
   char *name ;
   struct pci_device_id *id_table ;
   int (*probe)(struct pci_dev *, struct pci_device_id *) ;
   void (*remove)(struct pci_dev *) ;
   int (*suspend)(struct pci_dev *, pm_message_t ) ;
   int (*resume)(struct pci_dev *) ;
   void (*shutdown)(struct pci_dev *) ;
   int (*sriov_configure)(struct pci_dev *, int ) ;
   struct pci_error_handlers *err_handler ;
   struct attribute_group **groups ;
   struct device_driver driver ;
   struct pci_dynids dynids ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/shrinker.h"
struct shrink_control {
   gfp_t gfp_mask ;
   int nid ;
   unsigned long nr_to_scan ;
   unsigned long nr_scanned ;
   struct mem_cgroup *memcg ;
};
#line 60  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/shrinker.h"
struct shrinker {
   unsigned long (*count_objects)(struct shrinker *, struct shrink_control *) ;
   unsigned long (*scan_objects)(struct shrinker *, struct shrink_control *) ;
   long batch ;
   int seeks ;
   unsigned int flags ;
   struct list_head list ;
   int id ;
   atomic_long_t *nr_deferred ;
};
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memremap.h"
struct vmem_altmap {
   unsigned long base_pfn ;
   unsigned long end_pfn ;
   unsigned long reserve ;
   unsigned long free ;
   unsigned long align ;
   unsigned long alloc ;
};
#line 26 
enum memory_type {
    MEMORY_DEVICE_PRIVATE = 1,
    MEMORY_DEVICE_FS_DAX = 2,
    MEMORY_DEVICE_DEVDAX = 3,
    MEMORY_DEVICE_PCI_P2PDMA = 4
};
#line 67  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memremap.h"
struct dev_pagemap_ops {
   void (*page_free)(struct page *) ;
   void (*kill)(struct dev_pagemap *) ;
   void (*cleanup)(struct dev_pagemap *) ;
   vm_fault_t (*migrate_to_ram)(struct vm_fault *) ;
};
#line 107  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memremap.h"
struct dev_pagemap {
   struct vmem_altmap altmap ;
   struct resource res ;
   struct percpu_ref *ref ;
   struct percpu_ref internal_ref ;
   struct completion done ;
   enum memory_type type ;
   unsigned int flags ;
   struct dev_pagemap_ops *ops ;
};
#line 176 
struct file_ra_state;
#line 177 
struct writeback_control;
#line 178 
struct bdi_writeback;
#line 417  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm.h"
struct vm_fault {
   struct vm_area_struct *vma ;
   unsigned int flags ;
   gfp_t gfp_mask ;
   unsigned long pgoff ;
   unsigned long address ;
   pmd_t *pmd ;
   pud_t *pud ;
   pte_t orig_pte ;
   struct page *cow_page ;
   struct mem_cgroup *memcg ;
   struct page *page ;
   pte_t *pte ;
   spinlock_t *ptl ;
   pgtable_t prealloc_pte ;
};
#line 448 
enum page_entry_size {
    PE_SIZE_PTE = 0,
    PE_SIZE_PMD = 1,
    PE_SIZE_PUD = 2
};
#line 467  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm.h"
struct vm_operations_struct {
   void (*open)(struct vm_area_struct *) ;
   void (*close)(struct vm_area_struct *) ;
   int (*split)(struct vm_area_struct *, unsigned long ) ;
   int (*mremap)(struct vm_area_struct *) ;
   vm_fault_t (*fault)(struct vm_fault *) ;
   vm_fault_t (*huge_fault)(struct vm_fault *, enum page_entry_size ) ;
   void (*map_pages)(struct vm_fault *, unsigned long , unsigned long ) ;
   unsigned long (*pagesize)(struct vm_area_struct *) ;
   vm_fault_t (*page_mkwrite)(struct vm_fault *) ;
   vm_fault_t (*pfn_mkwrite)(struct vm_fault *) ;
   int (*access)(struct vm_area_struct *, unsigned long , void *, int , int ) ;
   char *(*name)(struct vm_area_struct *) ;
   int (*set_policy)(struct vm_area_struct *, struct mempolicy *) ;
   struct mempolicy *(*get_policy)(struct vm_area_struct *, unsigned long ) ;
   struct page *(*find_special_page)(struct vm_area_struct *, unsigned long ) ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_bl.h"
struct hlist_bl_node;
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_bl.h"
struct hlist_bl_head {
   struct hlist_bl_node *first ;
};
#line 38  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_bl.h"
struct hlist_bl_node {
   struct hlist_bl_node *next ;
   struct hlist_bl_node **pprev ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockref.h"
struct __anonstruct_447 {
   spinlock_t lock ;
   int count ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockref.h"
union __anonunion_446 {
   struct __anonstruct_447 __anonCompField___anonunion_446_74 ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockref.h"
struct lockref {
   union __anonunion_446 __anonCompField_lockref_75 ;
};
#line 78  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/stringhash.h"
struct path;
#line 79 
struct vfsmount;
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dcache.h"
struct __anonstruct_449 {
   u32 hash ;
   u32 len ;
};
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dcache.h"
union __anonunion_448 {
   struct __anonstruct_449 __anonCompField___anonunion_448_76 ;
   u64 hash_len ;
};
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dcache.h"
struct qstr {
   union __anonunion_448 __anonCompField_qstr_77 ;
   unsigned char *name ;
};
#line 89 
struct dentry_operations;
#line 89  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dcache.h"
union __anonunion_450 {
   struct list_head d_lru ;
   wait_queue_head_t *d_wait ;
};
#line 89  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dcache.h"
union __anonunion_d_u_451 {
   struct hlist_node d_alias ;
   struct hlist_bl_node d_in_lookup_hash ;
   struct callback_head d_rcu ;
};
#line 89  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dcache.h"
struct dentry {
   unsigned int d_flags ;
   seqcount_t d_seq ;
   struct hlist_bl_node d_hash ;
   struct dentry *d_parent ;
   struct qstr d_name ;
   struct inode *d_inode ;
   unsigned char d_iname[32U] ;
   struct lockref d_lockref ;
   struct dentry_operations *d_op ;
   struct super_block *d_sb ;
   unsigned long d_time ;
   void *d_fsdata ;
   union __anonunion_450 __anonCompField_dentry_78 ;
   struct list_head d_child ;
   struct list_head d_subdirs ;
   union __anonunion_d_u_451 d_u ;
} __attribute__((__designated_init__));
#line 135  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dcache.h"
struct dentry_operations {
   int (*d_revalidate)(struct dentry *, unsigned int ) ;
   int (*d_weak_revalidate)(struct dentry *, unsigned int ) ;
   int (*d_hash)(struct dentry *, struct qstr *) ;
   int (*d_compare)(struct dentry *, unsigned int , char *, struct qstr *) ;
   int (*d_delete)(struct dentry *) ;
   int (*d_init)(struct dentry *) ;
   void (*d_release)(struct dentry *) ;
   void (*d_prune)(struct dentry *) ;
   void (*d_iput)(struct dentry *, struct inode *) ;
   char *(*d_dname)(struct dentry *, char *, int ) ;
   struct vfsmount *(*d_automount)(struct path *) ;
   int (*d_manage)(struct path *, bool ) ;
   struct dentry *(*d_real)(struct dentry *, struct inode *) ;
} __attribute__((__aligned__(64)));
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/path.h"
struct path {
   struct vfsmount *mnt ;
   struct dentry *dentry ;
} __attribute__((__designated_init__));
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_lru.h"
struct list_lru_one {
   struct list_head list ;
   long nr_items ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_lru.h"
struct list_lru_memcg {
   struct callback_head rcu ;
   struct list_lru_one *lru[0U] ;
};
#line 40  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_lru.h"
struct list_lru_node {
   spinlock_t lock ;
   struct list_lru_one lru ;
   struct list_lru_memcg *memcg_lrus ;
   long nr_items ;
} __attribute__((__aligned__(64)));
#line 52  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_lru.h"
struct list_lru {
   struct list_lru_node *node ;
   struct list_head list ;
   int shrinker_id ;
   bool memcg_aware ;
};
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fiemap.h"
struct fiemap_extent {
   __u64 fe_logical ;
   __u64 fe_physical ;
   __u64 fe_length ;
   __u64 fe_reserved64[2U] ;
   __u32 fe_flags ;
   __u32 fe_reserved[3U] ;
};
#line 39 
enum migrate_mode {
    MIGRATE_ASYNC = 0,
    MIGRATE_SYNC_LIGHT = 1,
    MIGRATE_SYNC = 2,
    MIGRATE_SYNC_NO_COPY = 3
};
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rcuwait.h"
struct rcuwait {
   struct task_struct *task ;
};
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rcu_sync.h"
struct rcu_sync {
   int gp_state ;
   int gp_count ;
   wait_queue_head_t gp_wait ;
   struct callback_head cb_head ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/percpu-rwsem.h"
struct percpu_rw_semaphore {
   struct rcu_sync rss ;
   unsigned int *read_count ;
   struct rw_semaphore rw_sem ;
   struct rcuwait writer ;
   int readers_block ;
};
#line 10  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/delayed_call.h"
struct delayed_call {
   void (*fn)(void *) ;
   void *arg ;
};
#line 35  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/delayed_call.h"
typedef u32 errseq_t;
#line 72  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/iocontext.h"
union __anonunion_456 {
   struct list_head q_node ;
   struct kmem_cache *__rcu_icq_cache ;
};
#line 72  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/iocontext.h"
union __anonunion_457 {
   struct hlist_node ioc_node ;
   struct callback_head __rcu_head ;
};
#line 72  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/iocontext.h"
struct io_cq {
   struct request_queue *q ;
   struct io_context *ioc ;
   union __anonunion_456 __anonCompField_io_cq_79 ;
   union __anonunion_457 __anonCompField_io_cq_80 ;
   unsigned int flags ;
};
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/iocontext.h"
struct io_context {
   atomic_long_t refcount ;
   atomic_t active_ref ;
   atomic_t nr_tasks ;
   spinlock_t lock ;
   unsigned short ioprio ;
   int nr_batch_requests ;
   unsigned long last_waited ;
   struct xarray icq_tree ;
   struct io_cq *icq_hint ;
   struct hlist_head icq_list ;
   struct work_struct release_work ;
};
#line 286  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fs.h"
struct bio;
#line 287 
struct export_operations;
#line 288 
struct hd_geometry;
#line 289 
struct kstatfs;
#line 290 
struct swap_info_struct;
#line 291 
struct fscrypt_info;
#line 292 
struct fscrypt_operations;
#line 293 
struct fsverity_info;
#line 294 
struct fsverity_operations;
#line 295 
struct fs_parameter_description;
#line 224  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct iattr {
   unsigned int ia_valid ;
   umode_t ia_mode ;
   kuid_t ia_uid ;
   kgid_t ia_gid ;
   loff_t ia_size ;
   struct timespec64 ia_atime ;
   struct timespec64 ia_mtime ;
   struct timespec64 ia_ctime ;
   struct file *ia_file ;
};
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/percpu_counter.h"
struct percpu_counter {
   raw_spinlock_t lock ;
   s64 count ;
   struct list_head list ;
   s32 *counters ;
};
#line 214  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dqblk_xfs.h"
struct dquot;
#line 215 
struct kqid;
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/projid.h"
typedef __kernel_uid32_t projid_t;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/projid.h"
struct __anonstruct_kprojid_t_458 {
   projid_t val ;
};
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/projid.h"
typedef struct __anonstruct_kprojid_t_458 kprojid_t;
#line 180  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/quota.h"
enum quota_type {
    USRQUOTA = 0,
    GRPQUOTA = 1,
    PRJQUOTA = 2
};
#line 66  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
typedef long long qsize_t;
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
union __anonunion_459 {
   kuid_t uid ;
   kgid_t gid ;
   kprojid_t projid ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct kqid {
   union __anonunion_459 __anonCompField_kqid_81 ;
   enum quota_type type ;
};
#line 205  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct mem_dqblk {
   qsize_t dqb_bhardlimit ;
   qsize_t dqb_bsoftlimit ;
   qsize_t dqb_curspace ;
   qsize_t dqb_rsvspace ;
   qsize_t dqb_ihardlimit ;
   qsize_t dqb_isoftlimit ;
   qsize_t dqb_curinodes ;
   time64_t dqb_btime ;
   time64_t dqb_itime ;
};
#line 216 
struct quota_format_type;
#line 222  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct mem_dqinfo {
   struct quota_format_type *dqi_format ;
   int dqi_fmt_id ;
   struct list_head dqi_dirty_list ;
   unsigned long dqi_flags ;
   unsigned int dqi_bgrace ;
   unsigned int dqi_igrace ;
   qsize_t dqi_max_spc_limit ;
   qsize_t dqi_max_ino_limit ;
   void *dqi_priv ;
};
#line 294  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct dquot {
   struct hlist_node dq_hash ;
   struct list_head dq_inuse ;
   struct list_head dq_free ;
   struct list_head dq_dirty ;
   struct mutex dq_lock ;
   spinlock_t dq_dqb_lock ;
   atomic_t dq_count ;
   struct super_block *dq_sb ;
   struct kqid dq_id ;
   loff_t dq_off ;
   unsigned long dq_flags ;
   struct mem_dqblk dq_dqb ;
};
#line 310  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct quota_format_ops {
   int (*check_quota_file)(struct super_block *, int ) ;
   int (*read_file_info)(struct super_block *, int ) ;
   int (*write_file_info)(struct super_block *, int ) ;
   int (*free_file_info)(struct super_block *, int ) ;
   int (*read_dqblk)(struct dquot *) ;
   int (*commit_dqblk)(struct dquot *) ;
   int (*release_dqblk)(struct dquot *) ;
   int (*get_next_id)(struct super_block *, struct kqid *) ;
};
#line 322  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct dquot_operations {
   int (*write_dquot)(struct dquot *) ;
   struct dquot *(*alloc_dquot)(struct super_block *, int ) ;
   void (*destroy_dquot)(struct dquot *) ;
   int (*acquire_dquot)(struct dquot *) ;
   int (*release_dquot)(struct dquot *) ;
   int (*mark_dirty)(struct dquot *) ;
   int (*write_info)(struct super_block *, int ) ;
   qsize_t *(*get_reserved_space)(struct inode *) ;
   int (*get_projid)(struct inode *, kprojid_t *) ;
   int (*get_inode_usage)(struct inode *, qsize_t *) ;
   int (*get_next_id)(struct super_block *, struct kqid *) ;
};
#line 343  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct qc_dqblk {
   int d_fieldmask ;
   u64 d_spc_hardlimit ;
   u64 d_spc_softlimit ;
   u64 d_ino_hardlimit ;
   u64 d_ino_softlimit ;
   u64 d_space ;
   u64 d_ino_count ;
   s64 d_ino_timer ;
   s64 d_spc_timer ;
   int d_ino_warns ;
   int d_spc_warns ;
   u64 d_rt_spc_hardlimit ;
   u64 d_rt_spc_softlimit ;
   u64 d_rt_space ;
   s64 d_rt_spc_timer ;
   int d_rt_spc_warns ;
};
#line 395  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct qc_type_state {
   unsigned int flags ;
   unsigned int spc_timelimit ;
   unsigned int ino_timelimit ;
   unsigned int rt_spc_timelimit ;
   unsigned int spc_warnlimit ;
   unsigned int ino_warnlimit ;
   unsigned int rt_spc_warnlimit ;
   unsigned long long ino ;
   blkcnt_t blocks ;
   blkcnt_t nextents ;
};
#line 409  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct qc_state {
   unsigned int s_incoredqs ;
   struct qc_type_state s_state[3U] ;
};
#line 415  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct qc_info {
   int i_fieldmask ;
   unsigned int i_flags ;
   unsigned int i_spc_timelimit ;
   unsigned int i_ino_timelimit ;
   unsigned int i_rt_spc_timelimit ;
   unsigned int i_spc_warnlimit ;
   unsigned int i_ino_warnlimit ;
   unsigned int i_rt_spc_warnlimit ;
};
#line 428  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct quotactl_ops {
   int (*quota_on)(struct super_block *, int , int , struct path *) ;
   int (*quota_off)(struct super_block *, int ) ;
   int (*quota_enable)(struct super_block *, unsigned int ) ;
   int (*quota_disable)(struct super_block *, unsigned int ) ;
   int (*quota_sync)(struct super_block *, int ) ;
   int (*set_info)(struct super_block *, int , struct qc_info *) ;
   int (*get_dqblk)(struct super_block *, struct kqid , struct qc_dqblk *) ;
   int (*get_nextdqblk)(struct super_block *, struct kqid *, struct qc_dqblk *) ;
   int (*set_dqblk)(struct super_block *, struct kqid , struct qc_dqblk *) ;
   int (*get_state)(struct super_block *, struct qc_state *) ;
   int (*rm_xquota)(struct super_block *, unsigned int ) ;
};
#line 443  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct quota_format_type {
   int qf_fmt_id ;
   struct quota_format_ops *qf_ops ;
   struct module *qf_owner ;
   struct quota_format_type *qf_next ;
};
#line 518  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct quota_info {
   unsigned int flags ;
   struct rw_semaphore dqio_sem ;
   struct inode *files[3U] ;
   struct mem_dqinfo info[3U] ;
   struct quota_format_ops *ops[3U] ;
};
#line 538 
enum rw_hint {
    WRITE_LIFE_NOT_SET = 0,
    WRITE_LIFE_NONE = 1,
    WRITE_LIFE_SHORT = 2,
    WRITE_LIFE_MEDIUM = 3,
    WRITE_LIFE_LONG = 4,
    WRITE_LIFE_EXTREME = 5
};
#line 318  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct kiocb {
   struct file *ki_filp ;
   loff_t ki_pos ;
   void (*ki_complete)(struct kiocb *, long , long ) ;
   void *private ;
   int ki_flags ;
   u16 ki_hint ;
   u16 ki_ioprio ;
   unsigned int ki_cookie ;
};
#line 339  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
union __anonunion_arg_461 {
   char *buf ;
   void *data ;
};
#line 339  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct __anonstruct_read_descriptor_t_460 {
   size_t written ;
   size_t count ;
   union __anonunion_arg_461 arg ;
   int error ;
};
#line 339  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
typedef struct __anonstruct_read_descriptor_t_460 read_descriptor_t;
#line 362  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct address_space_operations {
   int (*writepage)(struct page *, struct writeback_control *) ;
   int (*readpage)(struct file *, struct page *) ;
   int (*writepages)(struct address_space *, struct writeback_control *) ;
   int (*set_page_dirty)(struct page *) ;
   int (*readpages)(struct file *, struct address_space *, struct list_head *, unsigned int ) ;
   int (*write_begin)(struct file *, struct address_space *, loff_t , unsigned int , unsigned int , struct page **, void **) ;
   int (*write_end)(struct file *, struct address_space *, loff_t , unsigned int , unsigned int , struct page *, void *) ;
   sector_t (*bmap)(struct address_space *, sector_t ) ;
   void (*invalidatepage)(struct page *, unsigned int , unsigned int ) ;
   int (*releasepage)(struct page *, gfp_t ) ;
   void (*freepage)(struct page *) ;
   ssize_t (*direct_IO)(struct kiocb *, struct iov_iter *) ;
   int (*migratepage)(struct address_space *, struct page *, struct page *, enum migrate_mode ) ;
   bool (*isolate_page)(struct page *, isolate_mode_t ) ;
   void (*putback_page)(struct page *) ;
   int (*launder_page)(struct page *) ;
   int (*is_partially_uptodate)(struct page *, unsigned long , unsigned long ) ;
   void (*is_dirty_writeback)(struct page *, bool *, bool *) ;
   int (*error_remove_page)(struct address_space *, struct page *) ;
   int (*swap_activate)(struct swap_info_struct *, struct file *, sector_t *) ;
   void (*swap_deactivate)(struct file *) ;
};
#line 445  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct address_space {
   struct inode *host ;
   struct xarray i_pages ;
   gfp_t gfp_mask ;
   atomic_t i_mmap_writable ;
   atomic_t nr_thps ;
   struct rb_root_cached i_mmap ;
   struct rw_semaphore i_mmap_rwsem ;
   unsigned long nrpages ;
   unsigned long nrexceptional ;
   unsigned long writeback_index ;
   struct address_space_operations *a_ops ;
   unsigned long flags ;
   errseq_t wb_err ;
   spinlock_t private_lock ;
   struct list_head private_list ;
   void *private_data ;
} __attribute__((__designated_init__, __aligned__(8)));
#line 473 
struct hd_struct;
#line 473 
struct gendisk;
#line 473  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct block_device {
   dev_t bd_dev ;
   int bd_openers ;
   struct inode *bd_inode ;
   struct super_block *bd_super ;
   struct mutex bd_mutex ;
   void *bd_claiming ;
   void *bd_holder ;
   int bd_holders ;
   bool bd_write_holder ;
   struct list_head bd_holder_disks ;
   struct block_device *bd_contains ;
   unsigned int bd_block_size ;
   u8 bd_partno ;
   struct hd_struct *bd_part ;
   unsigned int bd_part_count ;
   int bd_invalidated ;
   struct gendisk *bd_disk ;
   struct request_queue *bd_queue ;
   struct backing_dev_info *bd_bdi ;
   struct list_head bd_list ;
   unsigned long bd_private ;
   int bd_fsfreeze_count ;
   struct mutex bd_fsfreeze_mutex ;
} __attribute__((__designated_init__));
#line 587 
struct posix_acl;
#line 614 
struct fsnotify_mark_connector;
#line 628 
struct inode_operations;
#line 628  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
union __anonunion_464 {
   unsigned int i_nlink ;
   unsigned int __i_nlink ;
};
#line 628  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
union __anonunion_465 {
   struct hlist_head i_dentry ;
   struct callback_head i_rcu ;
};
#line 628  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
union __anonunion_466 {
   struct file_operations *i_fop ;
   void (*free_inode)(struct inode *) ;
};
#line 628 
struct file_lock_context;
#line 628 
struct cdev;
#line 628  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
union __anonunion_467 {
   struct pipe_inode_info *i_pipe ;
   struct block_device *i_bdev ;
   struct cdev *i_cdev ;
   char *i_link ;
   unsigned int i_dir_seq ;
};
#line 628  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct inode {
   umode_t i_mode ;
   unsigned short i_opflags ;
   kuid_t i_uid ;
   kgid_t i_gid ;
   unsigned int i_flags ;
   struct posix_acl *i_acl ;
   struct posix_acl *i_default_acl ;
   struct inode_operations *i_op ;
   struct super_block *i_sb ;
   struct address_space *i_mapping ;
   void *i_security ;
   unsigned long i_ino ;
   union __anonunion_464 __anonCompField_inode_82 ;
   dev_t i_rdev ;
   loff_t i_size ;
   struct timespec64 i_atime ;
   struct timespec64 i_mtime ;
   struct timespec64 i_ctime ;
   spinlock_t i_lock ;
   unsigned short i_bytes ;
   u8 i_blkbits ;
   u8 i_write_hint ;
   blkcnt_t i_blocks ;
   unsigned long i_state ;
   struct rw_semaphore i_rwsem ;
   unsigned long dirtied_when ;
   unsigned long dirtied_time_when ;
   struct hlist_node i_hash ;
   struct list_head i_io_list ;
   struct bdi_writeback *i_wb ;
   int i_wb_frn_winner ;
   u16 i_wb_frn_avg_time ;
   u16 i_wb_frn_history ;
   struct list_head i_lru ;
   struct list_head i_sb_list ;
   struct list_head i_wb_list ;
   union __anonunion_465 __anonCompField_inode_83 ;
   atomic64_t i_version ;
   atomic_t i_count ;
   atomic_t i_dio_count ;
   atomic_t i_writecount ;
   atomic_t i_readcount ;
   union __anonunion_466 __anonCompField_inode_84 ;
   struct file_lock_context *i_flctx ;
   struct address_space i_data ;
   struct list_head i_devices ;
   union __anonunion_467 __anonCompField_inode_85 ;
   __u32 i_generation ;
   __u32 i_fsnotify_mask ;
   struct fsnotify_mark_connector *i_fsnotify_marks ;
   struct fscrypt_info *i_crypt_info ;
   struct fsverity_info *i_verity_info ;
   void *i_private ;
} __attribute__((__designated_init__));
#line 904  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct fown_struct {
   rwlock_t lock ;
   struct pid *pid ;
   enum pid_type pid_type ;
   kuid_t uid ;
   kuid_t euid ;
   int signum ;
};
#line 915  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct file_ra_state {
   unsigned long start ;
   unsigned int size ;
   unsigned int async_size ;
   unsigned int ra_pages ;
   unsigned int mmap_miss ;
   loff_t prev_pos ;
};
#line 935  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
union __anonunion_f_u_468 {
   struct llist_node fu_llist ;
   struct callback_head fu_rcuhead ;
};
#line 935  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct file {
   union __anonunion_f_u_468 f_u ;
   struct path f_path ;
   struct inode *f_inode ;
   struct file_operations *f_op ;
   spinlock_t f_lock ;
   enum rw_hint f_write_hint ;
   atomic_long_t f_count ;
   unsigned int f_flags ;
   fmode_t f_mode ;
   struct mutex f_pos_lock ;
   loff_t f_pos ;
   struct fown_struct f_owner ;
   struct cred *f_cred ;
   struct file_ra_state f_ra ;
   u64 f_version ;
   void *f_security ;
   void *private_data ;
   struct list_head f_ep_links ;
   struct list_head f_tfile_llink ;
   struct address_space *f_mapping ;
   errseq_t f_wb_err ;
} __attribute__((__designated_init__, __aligned__(4)));
#line 988  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
typedef void *fl_owner_t;
#line 1026 
struct file_lock;
#line 1029  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct file_lock_operations {
   void (*fl_copy_lock)(struct file_lock *, struct file_lock *) ;
   void (*fl_release_private)(struct file_lock *) ;
};
#line 1034  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct lock_manager_operations {
   fl_owner_t (*lm_get_owner)(fl_owner_t ) ;
   void (*lm_put_owner)(fl_owner_t ) ;
   void (*lm_notify)(struct file_lock *) ;
   int (*lm_grant)(struct file_lock *, int ) ;
   bool (*lm_break)(struct file_lock *) ;
   int (*lm_change)(struct file_lock *, int , struct list_head *) ;
   void (*lm_setup)(struct file_lock *, void **) ;
};
#line 1058 
struct nlm_lockowner;
#line 10  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/nfs_fs_i.h"
struct nfs_lock_info {
   u32 state ;
   struct nlm_lockowner *owner ;
   struct list_head list ;
};
#line 15 
struct nfs4_lock_state;
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/nfs_fs_i.h"
struct nfs4_lock_info {
   struct nfs4_lock_state *owner ;
};
#line 1079  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct fasync_struct;
#line 1079  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct __anonstruct_afs_470 {
   struct list_head link ;
   int state ;
   unsigned int debug_id ;
};
#line 1079  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
union __anonunion_fl_u_469 {
   struct nfs_lock_info nfs_fl ;
   struct nfs4_lock_info nfs4_fl ;
   struct __anonstruct_afs_470 afs ;
};
#line 1079  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct file_lock {
   struct file_lock *fl_blocker ;
   struct list_head fl_list ;
   struct hlist_node fl_link ;
   struct list_head fl_blocked_requests ;
   struct list_head fl_blocked_member ;
   fl_owner_t fl_owner ;
   unsigned int fl_flags ;
   unsigned char fl_type ;
   unsigned int fl_pid ;
   int fl_link_cpu ;
   wait_queue_head_t fl_wait ;
   struct file *fl_file ;
   loff_t fl_start ;
   loff_t fl_end ;
   struct fasync_struct *fl_fasync ;
   unsigned long fl_break_time ;
   unsigned long fl_downgrade_time ;
   struct file_lock_operations *fl_ops ;
   struct lock_manager_operations *fl_lmops ;
   union __anonunion_fl_u_469 fl_u ;
} __attribute__((__designated_init__));
#line 1117  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct file_lock_context {
   spinlock_t flc_lock ;
   struct list_head flc_flock ;
   struct list_head flc_posix ;
   struct list_head flc_lease ;
};
#line 1331  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct fasync_struct {
   rwlock_t fa_lock ;
   int magic ;
   int fa_fd ;
   struct fasync_struct *fa_next ;
   struct file *fa_file ;
   struct callback_head fa_rcu ;
};
#line 1418  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct sb_writers {
   int frozen ;
   wait_queue_head_t wait_unfrozen ;
   struct percpu_rw_semaphore rw_sem[3U] ;
};
#line 1424 
struct super_operations;
#line 1424 
struct xattr_handler;
#line 1424 
struct mtd_info;
#line 1424  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct super_block {
   struct list_head s_list ;
   dev_t s_dev ;
   unsigned char s_blocksize_bits ;
   unsigned long s_blocksize ;
   loff_t s_maxbytes ;
   struct file_system_type *s_type ;
   struct super_operations *s_op ;
   struct dquot_operations *dq_op ;
   struct quotactl_ops *s_qcop ;
   struct export_operations *s_export_op ;
   unsigned long s_flags ;
   unsigned long s_iflags ;
   unsigned long s_magic ;
   struct dentry *s_root ;
   struct rw_semaphore s_umount ;
   int s_count ;
   atomic_t s_active ;
   void *s_security ;
   struct xattr_handler **s_xattr ;
   struct fscrypt_operations *s_cop ;
   struct key *s_master_keys ;
   struct fsverity_operations *s_vop ;
   struct hlist_bl_head s_roots ;
   struct list_head s_mounts ;
   struct block_device *s_bdev ;
   struct backing_dev_info *s_bdi ;
   struct mtd_info *s_mtd ;
   struct hlist_node s_instances ;
   unsigned int s_quota_types ;
   struct quota_info s_dquot ;
   struct sb_writers s_writers ;
   void *s_fs_info ;
   u32 s_time_gran ;
   time64_t s_time_min ;
   time64_t s_time_max ;
   __u32 s_fsnotify_mask ;
   struct fsnotify_mark_connector *s_fsnotify_marks ;
   char s_id[32U] ;
   uuid_t s_uuid ;
   unsigned int s_max_links ;
   fmode_t s_mode ;
   struct mutex s_vfs_rename_mutex ;
   char *s_subtype ;
   struct dentry_operations *s_d_op ;
   int cleancache_poolid ;
   struct shrinker s_shrink ;
   atomic_long_t s_remove_count ;
   atomic_long_t s_fsnotify_inode_refs ;
   int s_readonly_remount ;
   struct workqueue_struct *s_dio_done_wq ;
   struct hlist_head s_pins ;
   struct user_namespace *s_user_ns ;
   struct list_lru s_dentry_lru ;
   struct list_lru s_inode_lru ;
   struct callback_head rcu ;
   struct work_struct destroy_work ;
   struct mutex s_sync_lock ;
   int s_stack_depth ;
   spinlock_t s_inode_list_lock ;
   struct list_head s_inodes ;
   spinlock_t s_inode_wblist_lock ;
   struct list_head s_inodes_wb ;
} __attribute__((__designated_init__));
#line 1746  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct fiemap_extent_info {
   unsigned int fi_flags ;
   unsigned int fi_extents_mapped ;
   unsigned int fi_extents_max ;
   struct fiemap_extent *fi_extents_start ;
};
#line 1756 
struct dir_context;
#line 1767  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct dir_context {
   int (*actor)(struct dir_context *, char *, int , loff_t , u64 , unsigned int ) ;
   loff_t pos ;
};
#line 1771 
struct block_device_operations;
#line 1821  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct file_operations {
   struct module *owner ;
   loff_t (*llseek)(struct file *, loff_t , int ) ;
   ssize_t (*read)(struct file *, char *, size_t , loff_t *) ;
   ssize_t (*write)(struct file *, char *, size_t , loff_t *) ;
   ssize_t (*read_iter)(struct kiocb *, struct iov_iter *) ;
   ssize_t (*write_iter)(struct kiocb *, struct iov_iter *) ;
   int (*iopoll)(struct kiocb *, bool ) ;
   int (*iterate)(struct file *, struct dir_context *) ;
   int (*iterate_shared)(struct file *, struct dir_context *) ;
   __poll_t (*poll)(struct file *, struct poll_table_struct *) ;
   long (*unlocked_ioctl)(struct file *, unsigned int , unsigned long ) ;
   long (*compat_ioctl)(struct file *, unsigned int , unsigned long ) ;
   int (*mmap)(struct file *, struct vm_area_struct *) ;
   unsigned long mmap_supported_flags ;
   int (*open)(struct inode *, struct file *) ;
   int (*flush)(struct file *, fl_owner_t ) ;
   int (*release)(struct inode *, struct file *) ;
   int (*fsync)(struct file *, loff_t , loff_t , int ) ;
   int (*fasync)(int , struct file *, int ) ;
   int (*lock)(struct file *, int , struct file_lock *) ;
   ssize_t (*sendpage)(struct file *, struct page *, int , size_t , loff_t *, int ) ;
   unsigned long (*get_unmapped_area)(struct file *, unsigned long , unsigned long , unsigned long , unsigned long ) ;
   int (*check_flags)(int ) ;
   int (*flock)(struct file *, int , struct file_lock *) ;
   ssize_t (*splice_write)(struct pipe_inode_info *, struct file *, loff_t *, size_t , unsigned int ) ;
   ssize_t (*splice_read)(struct file *, loff_t *, struct pipe_inode_info *, size_t , unsigned int ) ;
   int (*setlease)(struct file *, long , struct file_lock **, void **) ;
   long (*fallocate)(struct file *, int , loff_t , loff_t ) ;
   void (*show_fdinfo)(struct seq_file *, struct file *) ;
   ssize_t (*copy_file_range)(struct file *, loff_t , struct file *, loff_t , size_t , unsigned int ) ;
   loff_t (*remap_file_range)(struct file *, loff_t , struct file *, loff_t , loff_t , unsigned int ) ;
   int (*fadvise)(struct file *, loff_t , loff_t , int ) ;
} __attribute__((__designated_init__));
#line 1863  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct inode_operations {
   struct dentry *(*lookup)(struct inode *, struct dentry *, unsigned int ) ;
   char *(*get_link)(struct dentry *, struct inode *, struct delayed_call *) ;
   int (*permission)(struct inode *, int ) ;
   struct posix_acl *(*get_acl)(struct inode *, int ) ;
   int (*readlink)(struct dentry *, char *, int ) ;
   int (*create)(struct inode *, struct dentry *, umode_t , bool ) ;
   int (*link)(struct dentry *, struct inode *, struct dentry *) ;
   int (*unlink)(struct inode *, struct dentry *) ;
   int (*symlink)(struct inode *, struct dentry *, char *) ;
   int (*mkdir)(struct inode *, struct dentry *, umode_t ) ;
   int (*rmdir)(struct inode *, struct dentry *) ;
   int (*mknod)(struct inode *, struct dentry *, umode_t , dev_t ) ;
   int (*rename)(struct inode *, struct dentry *, struct inode *, struct dentry *, unsigned int ) ;
   int (*setattr)(struct dentry *, struct iattr *) ;
   int (*getattr)(struct path *, struct kstat *, u32 , unsigned int ) ;
   ssize_t (*listxattr)(struct dentry *, char *, size_t ) ;
   int (*fiemap)(struct inode *, struct fiemap_extent_info *, u64 , u64 ) ;
   int (*update_time)(struct inode *, struct timespec64 *, int ) ;
   int (*atomic_open)(struct inode *, struct dentry *, struct file *, unsigned int , umode_t ) ;
   int (*tmpfile)(struct inode *, struct dentry *, umode_t ) ;
   int (*set_acl)(struct inode *, struct posix_acl *, int ) ;
} __attribute__((__aligned__(64)));
#line 1942  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct super_operations {
   struct inode *(*alloc_inode)(struct super_block *) ;
   void (*destroy_inode)(struct inode *) ;
   void (*free_inode)(struct inode *) ;
   void (*dirty_inode)(struct inode *, int ) ;
   int (*write_inode)(struct inode *, struct writeback_control *) ;
   int (*drop_inode)(struct inode *) ;
   void (*evict_inode)(struct inode *) ;
   void (*put_super)(struct super_block *) ;
   int (*sync_fs)(struct super_block *, int ) ;
   int (*freeze_super)(struct super_block *) ;
   int (*freeze_fs)(struct super_block *) ;
   int (*thaw_super)(struct super_block *) ;
   int (*unfreeze_fs)(struct super_block *) ;
   int (*statfs)(struct dentry *, struct kstatfs *) ;
   int (*remount_fs)(struct super_block *, int *, char *) ;
   void (*umount_begin)(struct super_block *) ;
   int (*show_options)(struct seq_file *, struct dentry *) ;
   int (*show_devname)(struct seq_file *, struct dentry *) ;
   int (*show_path)(struct seq_file *, struct dentry *) ;
   int (*show_stats)(struct seq_file *, struct dentry *) ;
   ssize_t (*quota_read)(struct super_block *, int , char *, size_t , loff_t ) ;
   ssize_t (*quota_write)(struct super_block *, int , char *, size_t , loff_t ) ;
   struct dquot **(*get_dquots)(struct inode *) ;
   int (*bdev_try_to_free_page)(struct super_block *, struct page *, gfp_t ) ;
   long (*nr_cached_objects)(struct super_block *, struct shrink_control *) ;
   long (*free_cached_objects)(struct super_block *, struct shrink_control *) ;
};
#line 2217  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct file_system_type {
   char *name ;
   int fs_flags ;
   int (*init_fs_context)(struct fs_context *) ;
   struct fs_parameter_description *parameters ;
   struct dentry *(*mount)(struct file_system_type *, int , char *, void *) ;
   void (*kill_sb)(struct super_block *) ;
   struct module *owner ;
   struct file_system_type *next ;
   struct hlist_head fs_supers ;
   struct lock_class_key s_lock_key ;
   struct lock_class_key s_umount_key ;
   struct lock_class_key s_vfs_rename_key ;
   struct lock_class_key s_writers_key[3U] ;
   struct lock_class_key i_lock_key ;
   struct lock_class_key i_mutex_key ;
   struct lock_class_key i_mutex_dir_key ;
};
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/scatterlist.h"
struct scatterlist {
   unsigned long page_link ;
   unsigned int offset ;
   unsigned int length ;
   dma_addr_t dma_address ;
   unsigned int dma_length ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/scatterlist.h"
struct sg_table {
   struct scatterlist *sgl ;
   unsigned int nents ;
   unsigned int orig_nents ;
};
#line 1424  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
struct msix_entry {
   u32 vector ;
   u16 entry ;
};
#line 108  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pci.h"
struct msi_desc;
#line 71  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-debug.h"
enum dma_data_direction {
    DMA_BIDIRECTIONAL = 0,
    DMA_TO_DEVICE = 1,
    DMA_FROM_DEVICE = 2,
    DMA_NONE = 3
};
#line 76  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
struct dma_map_ops {
   void *(*alloc)(struct device *, size_t , dma_addr_t *, gfp_t , unsigned long ) ;
   void (*free)(struct device *, size_t , void *, dma_addr_t , unsigned long ) ;
   int (*mmap)(struct device *, struct vm_area_struct *, void *, dma_addr_t , size_t , unsigned long ) ;
   int (*get_sgtable)(struct device *, struct sg_table *, void *, dma_addr_t , size_t , unsigned long ) ;
   dma_addr_t (*map_page)(struct device *, struct page *, unsigned long , size_t , enum dma_data_direction , unsigned long ) ;
   void (*unmap_page)(struct device *, dma_addr_t , size_t , enum dma_data_direction , unsigned long ) ;
   int (*map_sg)(struct device *, struct scatterlist *, int , enum dma_data_direction , unsigned long ) ;
   void (*unmap_sg)(struct device *, struct scatterlist *, int , enum dma_data_direction , unsigned long ) ;
   dma_addr_t (*map_resource)(struct device *, phys_addr_t , size_t , enum dma_data_direction , unsigned long ) ;
   void (*unmap_resource)(struct device *, dma_addr_t , size_t , enum dma_data_direction , unsigned long ) ;
   void (*sync_single_for_cpu)(struct device *, dma_addr_t , size_t , enum dma_data_direction ) ;
   void (*sync_single_for_device)(struct device *, dma_addr_t , size_t , enum dma_data_direction ) ;
   void (*sync_sg_for_cpu)(struct device *, struct scatterlist *, int , enum dma_data_direction ) ;
   void (*sync_sg_for_device)(struct device *, struct scatterlist *, int , enum dma_data_direction ) ;
   void (*cache_sync)(struct device *, void *, size_t , enum dma_data_direction ) ;
   int (*dma_supported)(struct device *, u64 ) ;
   u64 (*get_required_mask)(struct device *) ;
   size_t (*max_mapping_size)(struct device *) ;
   unsigned long (*get_merge_boundary)(struct device *) ;
};
#line 41  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dynamic_queue_limits.h"
struct dql {
   unsigned int num_queued ;
   unsigned int adj_limit ;
   unsigned int last_obj_cnt ;
   unsigned int limit ;
   unsigned int num_completed ;
   unsigned int prev_ovlimit ;
   unsigned int prev_num_queued ;
   unsigned int prev_last_obj_cnt ;
   unsigned int lowest_slack ;
   unsigned long slack_start_time ;
   unsigned int max_limit ;
   unsigned int min_limit ;
   unsigned int slack_hold_time ;
};
#line 92  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dynamic_queue_limits.h"
union __anonunion___u_482 {
   unsigned int __val ;
   char __c[1U] ;
};
#line 92  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dynamic_queue_limits.h"
union __anonunion___u_484 {
   unsigned int __val ;
   char __c[1U] ;
};
#line 103  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dynamic_queue_limits.h"
struct __anonstruct_sync_serial_settings_485 {
   unsigned int clock_rate ;
   unsigned int clock_type ;
   unsigned short loopback ;
};
#line 103  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dynamic_queue_limits.h"
typedef struct __anonstruct_sync_serial_settings_485 sync_serial_settings;
#line 45  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_te1_settings_486 {
   unsigned int clock_rate ;
   unsigned int clock_type ;
   unsigned short loopback ;
   unsigned int slot_map ;
};
#line 45  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_te1_settings_486 te1_settings;
#line 52  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_raw_hdlc_proto_487 {
   unsigned short encoding ;
   unsigned short parity ;
};
#line 52  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_raw_hdlc_proto_487 raw_hdlc_proto;
#line 57  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_fr_proto_488 {
   unsigned int t391 ;
   unsigned int t392 ;
   unsigned int n391 ;
   unsigned int n392 ;
   unsigned int n393 ;
   unsigned short lmi ;
   unsigned short dce ;
};
#line 57  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_fr_proto_488 fr_proto;
#line 67  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_fr_proto_pvc_489 {
   unsigned int dlci ;
};
#line 67  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_fr_proto_pvc_489 fr_proto_pvc;
#line 71  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_fr_proto_pvc_info_490 {
   unsigned int dlci ;
   char master[16U] ;
};
#line 71  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_fr_proto_pvc_info_490 fr_proto_pvc_info;
#line 76  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_cisco_proto_491 {
   unsigned int interval ;
   unsigned int timeout ;
};
#line 76  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_cisco_proto_491 cisco_proto;
#line 195  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if.h"
struct ifmap {
   unsigned long mem_start ;
   unsigned long mem_end ;
   unsigned short base_addr ;
   unsigned char irq ;
   unsigned char dma ;
   unsigned char port ;
};
#line 206  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if.h"
union __anonunion_ifs_ifsu_492 {
   raw_hdlc_proto *raw_hdlc ;
   cisco_proto *cisco ;
   fr_proto *fr ;
   fr_proto_pvc *fr_pvc ;
   fr_proto_pvc_info *fr_pvc_info ;
   sync_serial_settings *sync ;
   te1_settings *te1 ;
};
#line 206  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if.h"
struct if_settings {
   unsigned int type ;
   unsigned int size ;
   union __anonunion_ifs_ifsu_492 ifs_ifsu ;
};
#line 232  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if.h"
union __anonunion_ifr_ifrn_493 {
   char ifrn_name[16U] ;
};
#line 232  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if.h"
union __anonunion_ifr_ifru_494 {
   struct sockaddr ifru_addr ;
   struct sockaddr ifru_dstaddr ;
   struct sockaddr ifru_broadaddr ;
   struct sockaddr ifru_netmask ;
   struct sockaddr ifru_hwaddr ;
   short ifru_flags ;
   int ifru_ivalue ;
   int ifru_mtu ;
   struct ifmap ifru_map ;
   char ifru_slave[16U] ;
   char ifru_newname[16U] ;
   void *ifru_data ;
   struct if_settings ifru_settings ;
};
#line 232  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if.h"
struct ifreq {
   union __anonunion_ifr_ifrn_493 ifr_ifrn ;
   union __anonunion_ifr_ifru_494 ifr_ifru ;
};
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/compat.h"
typedef s32 compat_long_t;
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/compat.h"
typedef u32 compat_uptr_t;
#line 367  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/compat.h"
struct compat_robust_list {
   compat_uptr_t next ;
};
#line 371  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/compat.h"
struct compat_robust_list_head {
   struct compat_robust_list list ;
   compat_long_t futex_offset ;
   compat_uptr_t list_op_pending ;
};
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bvec.h"
struct bio_vec {
   struct page *bv_page ;
   unsigned int bv_len ;
   unsigned int bv_offset ;
};
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bvec.h"
struct bvec_iter {
   sector_t bi_sector ;
   unsigned int bi_size ;
   unsigned int bi_idx ;
   unsigned int bi_bvec_done ;
};
#line 201  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/random.h"
enum ldv_11574 {
    SS_FREE = 0,
    SS_UNCONNECTED = 1,
    SS_CONNECTING = 2,
    SS_CONNECTED = 3,
    SS_DISCONNECTING = 4
};
#line 209  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/random.h"
typedef enum ldv_11574 socket_state;
#line 94  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/net.h"
struct socket_wq {
   wait_queue_head_t wait ;
   struct fasync_struct *fasync_list ;
   unsigned long flags ;
   struct callback_head rcu ;
} __attribute__((__aligned__(64)));
#line 112 
struct proto_ops;
#line 112  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/net.h"
struct socket {
   socket_state state ;
   short type ;
   unsigned long flags ;
   struct file *file ;
   struct sock *sk ;
   struct proto_ops *ops ;
   struct socket_wq wq ;
};
#line 125 
struct sk_buff;
#line 135  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/net.h"
struct proto_ops {
   int family ;
   struct module *owner ;
   int (*release)(struct socket *) ;
   int (*bind)(struct socket *, struct sockaddr *, int ) ;
   int (*connect)(struct socket *, struct sockaddr *, int , int ) ;
   int (*socketpair)(struct socket *, struct socket *) ;
   int (*accept)(struct socket *, struct socket *, int , bool ) ;
   int (*getname)(struct socket *, struct sockaddr *, int ) ;
   __poll_t (*poll)(struct file *, struct socket *, struct poll_table_struct *) ;
   int (*ioctl)(struct socket *, unsigned int , unsigned long ) ;
   int (*compat_ioctl)(struct socket *, unsigned int , unsigned long ) ;
   int (*gettstamp)(struct socket *, void *, bool , bool ) ;
   int (*listen)(struct socket *, int ) ;
   int (*shutdown)(struct socket *, int ) ;
   int (*setsockopt)(struct socket *, int , int , char *, unsigned int ) ;
   int (*getsockopt)(struct socket *, int , int , char *, int *) ;
   int (*compat_setsockopt)(struct socket *, int , int , char *, unsigned int ) ;
   int (*compat_getsockopt)(struct socket *, int , int , char *, int *) ;
   int (*sendmsg)(struct socket *, struct msghdr *, size_t ) ;
   int (*recvmsg)(struct socket *, struct msghdr *, size_t , int ) ;
   int (*mmap)(struct file *, struct socket *, struct vm_area_struct *) ;
   ssize_t (*sendpage)(struct socket *, struct page *, int , size_t , int ) ;
   ssize_t (*splice_read)(struct socket *, loff_t *, struct pipe_inode_info *, size_t , unsigned int ) ;
   int (*set_peek_off)(struct sock *, int ) ;
   int (*peek_len)(struct socket *) ;
   int (*read_sock)(struct sock *, read_descriptor_t *, int (*)(read_descriptor_t *, struct sk_buff *, unsigned int , size_t )) ;
   int (*sendpage_locked)(struct sock *, struct page *, int , size_t , int ) ;
   int (*sendmsg_locked)(struct sock *, struct msghdr *, size_t ) ;
   int (*set_rcvlowat)(struct sock *, int ) ;
};
#line 162  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/checksum_64.h"
struct in6_addr;
#line 180  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/checksum.h"
typedef u64 netdev_features_t;
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/in6.h"
union __anonunion_in6_u_529 {
   __u8 u6_addr8[16U] ;
   __be16 u6_addr16[8U] ;
   __be32 u6_addr32[4U] ;
};
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/in6.h"
struct in6_addr {
   union __anonunion_in6_u_529 in6_u ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/in6.h"
struct __anonstruct_siphash_key_t_530 {
   u64 key[2U] ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/in6.h"
typedef struct __anonstruct_siphash_key_t_530 siphash_key_t;
#line 163  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if_ether.h"
struct ethhdr {
   unsigned char h_dest[6U] ;
   unsigned char h_source[6U] ;
   __be16 h_proto ;
} __attribute__((__packed__));
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pipe_fs_i.h"
struct pipe_buf_operations;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pipe_fs_i.h"
struct pipe_buffer {
   struct page *page ;
   unsigned int offset ;
   unsigned int len ;
   struct pipe_buf_operations *ops ;
   unsigned int flags ;
   unsigned long private ;
};
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pipe_fs_i.h"
struct pipe_inode_info {
   struct mutex mutex ;
   wait_queue_head_t wait ;
   unsigned int head ;
   unsigned int tail ;
   unsigned int max_usage ;
   unsigned int ring_size ;
   unsigned int readers ;
   unsigned int writers ;
   unsigned int files ;
   unsigned int r_counter ;
   unsigned int w_counter ;
   struct page *tmp_page ;
   struct fasync_struct *fasync_readers ;
   struct fasync_struct *fasync_writers ;
   struct pipe_buffer *bufs ;
   struct user_struct *user ;
};
#line 77  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pipe_fs_i.h"
struct pipe_buf_operations {
   int (*confirm)(struct pipe_inode_info *, struct pipe_buffer *) ;
   void (*release)(struct pipe_inode_info *, struct pipe_buffer *) ;
   int (*steal)(struct pipe_inode_info *, struct pipe_buffer *) ;
   bool (*get)(struct pipe_inode_info *, struct pipe_buffer *) ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct flowi_tunnel {
   __be64 tun_id ;
};
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct flowi_common {
   int flowic_oif ;
   int flowic_iif ;
   __u32 flowic_mark ;
   __u8 flowic_tos ;
   __u8 flowic_scope ;
   __u8 flowic_proto ;
   __u8 flowic_flags ;
   __u32 flowic_secid ;
   kuid_t flowic_uid ;
   struct flowi_tunnel flowic_tun_key ;
   __u32 flowic_multipath_hash ;
};
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct __anonstruct_ports_541 {
   __be16 dport ;
   __be16 sport ;
};
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct __anonstruct_icmpt_542 {
   __u8 type ;
   __u8 code ;
};
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct __anonstruct_dnports_543 {
   __le16 dport ;
   __le16 sport ;
};
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct __anonstruct_mht_544 {
   __u8 type ;
};
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
union flowi_uli {
   struct __anonstruct_ports_541 ports ;
   struct __anonstruct_icmpt_542 icmpt ;
   struct __anonstruct_dnports_543 dnports ;
   __be32 spi ;
   __be32 gre_key ;
   struct __anonstruct_mht_544 mht ;
};
#line 70  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct flowi4 {
   struct flowi_common __fl_common ;
   __be32 saddr ;
   __be32 daddr ;
   union flowi_uli uli ;
} __attribute__((__aligned__(8)));
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct flowi6 {
   struct flowi_common __fl_common ;
   struct in6_addr daddr ;
   struct in6_addr saddr ;
   __be32 flowlabel ;
   union flowi_uli uli ;
   __u32 mp_hash ;
} __attribute__((__aligned__(8)));
#line 158  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct flowidn {
   struct flowi_common __fl_common ;
   __le16 daddr ;
   __le16 saddr ;
   union flowi_uli uli ;
} __attribute__((__aligned__(8)));
#line 173  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
union __anonunion_u_545 {
   struct flowi_common __fl_common ;
   struct flowi4 ip4 ;
   struct flowi6 ip6 ;
   struct flowidn dn ;
};
#line 173  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct flowi {
   union __anonunion_u_545 u ;
} __attribute__((__aligned__(8)));
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netfilter/nf_conntrack_common.h"
struct ip_conntrack_stat {
   unsigned int found ;
   unsigned int invalid ;
   unsigned int ignore ;
   unsigned int insert ;
   unsigned int insert_failed ;
   unsigned int drop ;
   unsigned int early_drop ;
   unsigned int error ;
   unsigned int expect_new ;
   unsigned int expect_create ;
   unsigned int expect_delete ;
   unsigned int search_restart ;
};
#line 41 
struct napi_struct;
#line 42 
struct bpf_prog;
#line 43 
union bpf_attr;
#line 44 
struct skb_ext;
#line 289  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
struct sk_buff_head {
   struct sk_buff *next ;
   struct sk_buff *prev ;
   __u32 qlen ;
   spinlock_t lock ;
};
#line 313  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
typedef struct bio_vec skb_frag_t;
#line 416  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
struct skb_shared_hwtstamps {
   ktime_t hwtstamp ;
};
#line 510  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
struct skb_shared_info {
   __u8 __unused ;
   __u8 meta_len ;
   __u8 nr_frags ;
   __u8 tx_flags ;
   unsigned short gso_size ;
   unsigned short gso_segs ;
   struct sk_buff *frag_list ;
   struct skb_shared_hwtstamps hwtstamps ;
   unsigned int gso_type ;
   u32 tskey ;
   atomic_t dataref ;
   void *destructor_arg ;
   skb_frag_t frags[17U] ;
};
#line 562  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
typedef unsigned int sk_buff_data_t;
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_552 {
   struct net_device *dev ;
   unsigned long dev_scratch ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
struct __anonstruct_551 {
   struct sk_buff *next ;
   struct sk_buff *prev ;
   union __anonunion_552 __anonCompField___anonstruct_551_99 ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_550 {
   struct __anonstruct_551 __anonCompField___anonunion_550_100 ;
   struct rb_node rbnode ;
   struct list_head list ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_553 {
   struct sock *sk ;
   int ip_defrag_offset ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_554 {
   ktime_t tstamp ;
   u64 skb_mstamp_ns ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
struct __anonstruct_556 {
   unsigned long _skb_refdst ;
   void (*destructor)(struct sk_buff *) ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_555 {
   struct __anonstruct_556 __anonCompField___anonunion_555_104 ;
   struct list_head tcp_tsorted_anchor ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
struct __anonstruct_558 {
   __u16 csum_start ;
   __u16 csum_offset ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_557 {
   __wsum csum ;
   struct __anonstruct_558 __anonCompField___anonunion_557_106 ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_559 {
   unsigned int napi_id ;
   unsigned int sender_cpu ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_560 {
   __u32 mark ;
   __u32 reserved_tailroom ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_561 {
   __be16 inner_protocol ;
   __u8 inner_ipproto ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
struct sk_buff {
   union __anonunion_550 __anonCompField_sk_buff_101 ;
   union __anonunion_553 __anonCompField_sk_buff_102 ;
   union __anonunion_554 __anonCompField_sk_buff_103 ;
   char cb[48U] ;
   union __anonunion_555 __anonCompField_sk_buff_105 ;
   unsigned long _nfct ;
   unsigned int len ;
   unsigned int data_len ;
   __u16 mac_len ;
   __u16 hdr_len ;
   __u16 queue_mapping ;
   __u8 __cloned_offset[0U] ;
   __u8 cloned : 1 ;
   __u8 nohdr : 1 ;
   __u8 fclone : 2 ;
   __u8 peeked : 1 ;
   __u8 head_frag : 1 ;
   __u8 pfmemalloc : 1 ;
   __u8 active_extensions ;
   __u32 headers_start[0U] ;
   __u8 __pkt_type_offset[0U] ;
   __u8 pkt_type : 3 ;
   __u8 ignore_df : 1 ;
   __u8 nf_trace : 1 ;
   __u8 ip_summed : 2 ;
   __u8 ooo_okay : 1 ;
   __u8 l4_hash : 1 ;
   __u8 sw_hash : 1 ;
   __u8 wifi_acked_valid : 1 ;
   __u8 wifi_acked : 1 ;
   __u8 no_fcs : 1 ;
   __u8 encapsulation : 1 ;
   __u8 encap_hdr_csum : 1 ;
   __u8 csum_valid : 1 ;
   __u8 __pkt_vlan_present_offset[0U] ;
   __u8 vlan_present : 1 ;
   __u8 csum_complete_sw : 1 ;
   __u8 csum_level : 2 ;
   __u8 csum_not_inet : 1 ;
   __u8 dst_pending_confirm : 1 ;
   __u8 ndisc_nodetype : 2 ;
   __u8 ipvs_property : 1 ;
   __u8 inner_protocol_type : 1 ;
   __u8 remcsum_offload : 1 ;
   __u8 offload_fwd_mark : 1 ;
   __u8 offload_l3_fwd_mark : 1 ;
   __u8 tc_skip_classify : 1 ;
   __u8 tc_at_ingress : 1 ;
   __u8 tc_redirected : 1 ;
   __u8 tc_from_ingress : 1 ;
   __u8 decrypted : 1 ;
   __u16 tc_index ;
   union __anonunion_557 __anonCompField_sk_buff_107 ;
   __u32 priority ;
   int skb_iif ;
   __u32 hash ;
   __be16 vlan_proto ;
   __u16 vlan_tci ;
   union __anonunion_559 __anonCompField_sk_buff_108 ;
   __u32 secmark ;
   union __anonunion_560 __anonCompField_sk_buff_109 ;
   union __anonunion_561 __anonCompField_sk_buff_110 ;
   __u16 inner_transport_header ;
   __u16 inner_network_header ;
   __u16 inner_mac_header ;
   __be16 protocol ;
   __u16 transport_header ;
   __u16 network_header ;
   __u16 mac_header ;
   __u32 headers_end[0U] ;
   sk_buff_data_t tail ;
   sk_buff_data_t end ;
   unsigned char *head ;
   unsigned char *data ;
   unsigned int truesize ;
   refcount_t users ;
   struct skb_ext *extensions ;
};
#line 920 
struct dst_entry;
#line 4108  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
struct skb_ext {
   refcount_t refcnt ;
   u8 offset[3U] ;
   u8 chunks ;
   char data[0U] ;
};
#line 177  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_drvinfo {
   __u32 cmd ;
   char driver[32U] ;
   char version[32U] ;
   char fw_version[32U] ;
   char bus_info[32U] ;
   char erom_version[32U] ;
   char reserved2[12U] ;
   __u32 n_priv_flags ;
   __u32 n_stats ;
   __u32 testinfo_len ;
   __u32 eedump_len ;
   __u32 regdump_len ;
};
#line 203  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_wolinfo {
   __u32 cmd ;
   __u32 supported ;
   __u32 wolopts ;
   __u8 sopass[6U] ;
};
#line 244  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_tunable {
   __u32 cmd ;
   __u32 id ;
   __u32 type_id ;
   __u32 len ;
   void *data[0U] ;
};
#line 310  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_regs {
   __u32 cmd ;
   __u32 version ;
   __u32 len ;
   __u8 data[0U] ;
};
#line 335  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_eeprom {
   __u32 cmd ;
   __u32 magic ;
   __u32 offset ;
   __u32 len ;
   __u8 data[0U] ;
};
#line 360  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_eee {
   __u32 cmd ;
   __u32 supported ;
   __u32 advertised ;
   __u32 lp_advertised ;
   __u32 eee_active ;
   __u32 eee_enabled ;
   __u32 tx_lpi_enabled ;
   __u32 tx_lpi_timer ;
   __u32 reserved[2U] ;
};
#line 382  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_modinfo {
   __u32 cmd ;
   __u32 type ;
   __u32 eeprom_len ;
   __u32 reserved[8U] ;
};
#line 462  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_coalesce {
   __u32 cmd ;
   __u32 rx_coalesce_usecs ;
   __u32 rx_max_coalesced_frames ;
   __u32 rx_coalesce_usecs_irq ;
   __u32 rx_max_coalesced_frames_irq ;
   __u32 tx_coalesce_usecs ;
   __u32 tx_max_coalesced_frames ;
   __u32 tx_coalesce_usecs_irq ;
   __u32 tx_max_coalesced_frames_irq ;
   __u32 stats_block_coalesce_usecs ;
   __u32 use_adaptive_rx_coalesce ;
   __u32 use_adaptive_tx_coalesce ;
   __u32 pkt_rate_low ;
   __u32 rx_coalesce_usecs_low ;
   __u32 rx_max_coalesced_frames_low ;
   __u32 tx_coalesce_usecs_low ;
   __u32 tx_max_coalesced_frames_low ;
   __u32 pkt_rate_high ;
   __u32 rx_coalesce_usecs_high ;
   __u32 rx_max_coalesced_frames_high ;
   __u32 tx_coalesce_usecs_high ;
   __u32 tx_max_coalesced_frames_high ;
   __u32 rate_sample_interval ;
};
#line 513  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_ringparam {
   __u32 cmd ;
   __u32 rx_max_pending ;
   __u32 rx_mini_max_pending ;
   __u32 rx_jumbo_max_pending ;
   __u32 tx_max_pending ;
   __u32 rx_pending ;
   __u32 rx_mini_pending ;
   __u32 rx_jumbo_pending ;
   __u32 tx_pending ;
};
#line 541  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_channels {
   __u32 cmd ;
   __u32 max_rx ;
   __u32 max_tx ;
   __u32 max_other ;
   __u32 max_combined ;
   __u32 rx_count ;
   __u32 tx_count ;
   __u32 other_count ;
   __u32 combined_count ;
};
#line 575  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_pauseparam {
   __u32 cmd ;
   __u32 autoneg ;
   __u32 rx_pause ;
   __u32 tx_pause ;
};
#line 683  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_test {
   __u32 cmd ;
   __u32 flags ;
   __u32 reserved ;
   __u32 len ;
   __u64 data[0U] ;
};
#line 702  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_stats {
   __u32 cmd ;
   __u32 n_stats ;
   __u64 data[0U] ;
};
#line 758  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_tcpip4_spec {
   __be32 ip4src ;
   __be32 ip4dst ;
   __be16 psrc ;
   __be16 pdst ;
   __u8 tos ;
};
#line 775  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_ah_espip4_spec {
   __be32 ip4src ;
   __be32 ip4dst ;
   __be32 spi ;
   __u8 tos ;
};
#line 793  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_usrip4_spec {
   __be32 ip4src ;
   __be32 ip4dst ;
   __be32 l4_4_bytes ;
   __u8 tos ;
   __u8 ip_ver ;
   __u8 proto ;
};
#line 812  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_tcpip6_spec {
   __be32 ip6src[4U] ;
   __be32 ip6dst[4U] ;
   __be16 psrc ;
   __be16 pdst ;
   __u8 tclass ;
};
#line 829  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_ah_espip6_spec {
   __be32 ip6src[4U] ;
   __be32 ip6dst[4U] ;
   __be32 spi ;
   __u8 tclass ;
};
#line 844  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_usrip6_spec {
   __be32 ip6src[4U] ;
   __be32 ip6dst[4U] ;
   __be32 l4_4_bytes ;
   __u8 tclass ;
   __u8 l4_proto ;
};
#line 852  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
union ethtool_flow_union {
   struct ethtool_tcpip4_spec tcp_ip4_spec ;
   struct ethtool_tcpip4_spec udp_ip4_spec ;
   struct ethtool_tcpip4_spec sctp_ip4_spec ;
   struct ethtool_ah_espip4_spec ah_ip4_spec ;
   struct ethtool_ah_espip4_spec esp_ip4_spec ;
   struct ethtool_usrip4_spec usr_ip4_spec ;
   struct ethtool_tcpip6_spec tcp_ip6_spec ;
   struct ethtool_tcpip6_spec udp_ip6_spec ;
   struct ethtool_tcpip6_spec sctp_ip6_spec ;
   struct ethtool_ah_espip6_spec ah_ip6_spec ;
   struct ethtool_ah_espip6_spec esp_ip6_spec ;
   struct ethtool_usrip6_spec usr_ip6_spec ;
   struct ethhdr ether_spec ;
   __u8 hdata[52U] ;
};
#line 880  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_flow_ext {
   __u8 padding[2U] ;
   unsigned char h_dest[6U] ;
   __be16 vlan_etype ;
   __be16 vlan_tci ;
   __be32 data[2U] ;
};
#line 905  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_rx_flow_spec {
   __u32 flow_type ;
   union ethtool_flow_union h_u ;
   struct ethtool_flow_ext h_ext ;
   union ethtool_flow_union m_u ;
   struct ethtool_flow_ext m_ext ;
   __u64 ring_cookie ;
   __u32 location ;
};
#line 1001  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
union __anonunion_587 {
   __u32 rule_cnt ;
   __u32 rss_context ;
};
#line 1001  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_rxnfc {
   __u32 cmd ;
   __u32 flow_type ;
   __u64 data ;
   struct ethtool_rx_flow_spec fs ;
   union __anonunion_587 __anonCompField_ethtool_rxnfc_112 ;
   __u32 rule_locs[0U] ;
};
#line 1130  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_flash {
   __u32 cmd ;
   __u32 region ;
   char data[128U] ;
};
#line 1150  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_dump {
   __u32 cmd ;
   __u32 version ;
   __u32 flag ;
   __u32 len ;
   __u8 data[0U] ;
};
#line 1230  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_ts_info {
   __u32 cmd ;
   __u32 so_timestamping ;
   __s32 phc_index ;
   __u32 tx_types ;
   __u32 tx_reserved[3U] ;
   __u32 rx_filters ;
   __u32 rx_reserved[3U] ;
};
#line 1302  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_fecparam {
   __u32 cmd ;
   __u32 active_fec ;
   __u32 fec ;
   __u32 reserved ;
};
#line 1876  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_link_settings {
   __u32 cmd ;
   __u32 speed ;
   __u8 duplex ;
   __u8 port ;
   __u8 phy_address ;
   __u8 autoneg ;
   __u8 mdio_support ;
   __u8 eth_tp_mdix ;
   __u8 eth_tp_mdix_ctrl ;
   __s8 link_mode_masks_nwords ;
   __u8 transceiver ;
   __u8 reserved1[3U] ;
   __u32 reserved[7U] ;
   __u32 link_mode_masks[0U] ;
};
#line 40  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ethtool.h"
enum ethtool_phys_id_state {
    ETHTOOL_ID_INACTIVE = 0,
    ETHTOOL_ID_ACTIVE = 1,
    ETHTOOL_ID_ON = 2,
    ETHTOOL_ID_OFF = 3
};
#line 108  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ethtool.h"
struct __anonstruct_link_modes_590 {
   unsigned long supported[2U] ;
   unsigned long advertising[2U] ;
   unsigned long lp_advertising[2U] ;
};
#line 108  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ethtool.h"
struct ethtool_link_ksettings {
   struct ethtool_link_settings base ;
   struct __anonstruct_link_modes_590 link_modes ;
};
#line 325  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ethtool.h"
struct ethtool_ops {
   void (*get_drvinfo)(struct net_device *, struct ethtool_drvinfo *) ;
   int (*get_regs_len)(struct net_device *) ;
   void (*get_regs)(struct net_device *, struct ethtool_regs *, void *) ;
   void (*get_wol)(struct net_device *, struct ethtool_wolinfo *) ;
   int (*set_wol)(struct net_device *, struct ethtool_wolinfo *) ;
   u32 (*get_msglevel)(struct net_device *) ;
   void (*set_msglevel)(struct net_device *, u32 ) ;
   int (*nway_reset)(struct net_device *) ;
   u32 (*get_link)(struct net_device *) ;
   int (*get_eeprom_len)(struct net_device *) ;
   int (*get_eeprom)(struct net_device *, struct ethtool_eeprom *, u8 *) ;
   int (*set_eeprom)(struct net_device *, struct ethtool_eeprom *, u8 *) ;
   int (*get_coalesce)(struct net_device *, struct ethtool_coalesce *) ;
   int (*set_coalesce)(struct net_device *, struct ethtool_coalesce *) ;
   void (*get_ringparam)(struct net_device *, struct ethtool_ringparam *) ;
   int (*set_ringparam)(struct net_device *, struct ethtool_ringparam *) ;
   void (*get_pauseparam)(struct net_device *, struct ethtool_pauseparam *) ;
   int (*set_pauseparam)(struct net_device *, struct ethtool_pauseparam *) ;
   void (*self_test)(struct net_device *, struct ethtool_test *, u64 *) ;
   void (*get_strings)(struct net_device *, u32 , u8 *) ;
   int (*set_phys_id)(struct net_device *, enum ethtool_phys_id_state ) ;
   void (*get_ethtool_stats)(struct net_device *, struct ethtool_stats *, u64 *) ;
   int (*begin)(struct net_device *) ;
   void (*complete)(struct net_device *) ;
   u32 (*get_priv_flags)(struct net_device *) ;
   int (*set_priv_flags)(struct net_device *, u32 ) ;
   int (*get_sset_count)(struct net_device *, int ) ;
   int (*get_rxnfc)(struct net_device *, struct ethtool_rxnfc *, u32 *) ;
   int (*set_rxnfc)(struct net_device *, struct ethtool_rxnfc *) ;
   int (*flash_device)(struct net_device *, struct ethtool_flash *) ;
   int (*reset)(struct net_device *, u32 *) ;
   u32 (*get_rxfh_key_size)(struct net_device *) ;
   u32 (*get_rxfh_indir_size)(struct net_device *) ;
   int (*get_rxfh)(struct net_device *, u32 *, u8 *, u8 *) ;
   int (*set_rxfh)(struct net_device *, u32 *, u8 *, u8 ) ;
   int (*get_rxfh_context)(struct net_device *, u32 *, u8 *, u8 *, u32 ) ;
   int (*set_rxfh_context)(struct net_device *, u32 *, u8 *, u8 , u32 *, bool ) ;
   void (*get_channels)(struct net_device *, struct ethtool_channels *) ;
   int (*set_channels)(struct net_device *, struct ethtool_channels *) ;
   int (*get_dump_flag)(struct net_device *, struct ethtool_dump *) ;
   int (*get_dump_data)(struct net_device *, struct ethtool_dump *, void *) ;
   int (*set_dump)(struct net_device *, struct ethtool_dump *) ;
   int (*get_ts_info)(struct net_device *, struct ethtool_ts_info *) ;
   int (*get_module_info)(struct net_device *, struct ethtool_modinfo *) ;
   int (*get_module_eeprom)(struct net_device *, struct ethtool_eeprom *, u8 *) ;
   int (*get_eee)(struct net_device *, struct ethtool_eee *) ;
   int (*set_eee)(struct net_device *, struct ethtool_eee *) ;
   int (*get_tunable)(struct net_device *, struct ethtool_tunable *, void *) ;
   int (*set_tunable)(struct net_device *, struct ethtool_tunable *, void *) ;
   int (*get_per_queue_coalesce)(struct net_device *, u32 , struct ethtool_coalesce *) ;
   int (*set_per_queue_coalesce)(struct net_device *, u32 , struct ethtool_coalesce *) ;
   int (*get_link_ksettings)(struct net_device *, struct ethtool_link_ksettings *) ;
   int (*set_link_ksettings)(struct net_device *, struct ethtool_link_ksettings *) ;
   int (*get_fecparam)(struct net_device *, struct ethtool_fecparam *) ;
   int (*set_fecparam)(struct net_device *, struct ethtool_fecparam *) ;
   void (*get_ethtool_phy_stats)(struct net_device *, struct ethtool_stats *, u64 *) ;
};
#line 422 
struct prot_inuse;
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/core.h"
struct netns_core {
   struct ctl_table_header *sysctl_hdr ;
   int sysctl_somaxconn ;
   int *sock_inuse ;
   struct prot_inuse *prot_inuse ;
};
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct u64_stats_sync {
   };
#line 36  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct __anonstruct_local_t_591 {
   atomic_long_t a ;
};
#line 36  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
typedef struct __anonstruct_local_t_591 local_t;
#line 119  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/local.h"
struct __anonstruct_local64_t_592 {
   local_t a ;
};
#line 119  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/local.h"
typedef struct __anonstruct_local64_t_592 local64_t;
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/local64.h"
struct __anonstruct_u64_stats_t_593 {
   local64_t v ;
};
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/local64.h"
typedef struct __anonstruct_u64_stats_t_593 u64_stats_t;
#line 51  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct ipstats_mib {
   u64 mibs[37U] ;
   struct u64_stats_sync syncp ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct icmp_mib {
   unsigned long mibs[28U] ;
};
#line 64  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct icmpmsg_mib {
   atomic_long_t mibs[512U] ;
};
#line 71  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct icmpv6_mib {
   unsigned long mibs[6U] ;
};
#line 75  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct icmpv6_mib_device {
   atomic_long_t mibs[6U] ;
};
#line 81  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct icmpv6msg_mib {
   atomic_long_t mibs[512U] ;
};
#line 85  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct icmpv6msg_mib_device {
   atomic_long_t mibs[512U] ;
};
#line 92  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct tcp_mib {
   unsigned long mibs[16U] ;
};
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct udp_mib {
   unsigned long mibs[9U] ;
};
#line 104  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct linux_mib {
   unsigned long mibs[120U] ;
};
#line 110  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct linux_xfrm_mib {
   unsigned long mibs[29U] ;
};
#line 116  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct linux_tls_mib {
   unsigned long mibs[11U] ;
};
#line 7  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/mib.h"
struct netns_mib {
   struct tcp_mib *tcp_statistics ;
   struct ipstats_mib *ip_statistics ;
   struct linux_mib *net_statistics ;
   struct udp_mib *udp_statistics ;
   struct udp_mib *udplite_statistics ;
   struct icmp_mib *icmp_statistics ;
   struct icmpmsg_mib *icmpmsg_statistics ;
   struct proc_dir_entry *proc_net_devsnmp6 ;
   struct udp_mib *udp_stats_in6 ;
   struct udp_mib *udplite_stats_in6 ;
   struct ipstats_mib *ipv6_statistics ;
   struct icmpv6_mib *icmpv6_statistics ;
   struct icmpv6msg_mib *icmpv6msg_statistics ;
   struct linux_xfrm_mib *xfrm_statistics ;
   struct linux_tls_mib *tls_statistics ;
};
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/unix.h"
struct netns_unix {
   int sysctl_max_dgram_qlen ;
   struct ctl_table_header *ctl ;
};
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/packet.h"
struct netns_packet {
   struct mutex sklist_lock ;
   struct hlist_head sklist ;
};
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_frag.h"
struct inet_frags;
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_frag.h"
struct fqdir {
   long high_thresh ;
   long low_thresh ;
   int timeout ;
   int max_dist ;
   struct inet_frags *f ;
   struct net *net ;
   bool dead ;
   struct rhashtable rhashtable ;
   atomic_long_t mem ;
   struct work_struct destroy_work ;
};
#line 41  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_frag.h"
struct frag_v4_compare_key {
   __be32 saddr ;
   __be32 daddr ;
   u32 user ;
   u32 vif ;
   __be16 id ;
   u16 protocol ;
};
#line 50  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_frag.h"
struct frag_v6_compare_key {
   struct in6_addr saddr ;
   struct in6_addr daddr ;
   u32 user ;
   __be32 id ;
   u32 iif ;
};
#line 77  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_frag.h"
union __anonunion_key_594 {
   struct frag_v4_compare_key v4 ;
   struct frag_v6_compare_key v6 ;
};
#line 77  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_frag.h"
struct inet_frag_queue {
   struct rhash_head node ;
   union __anonunion_key_594 key ;
   struct timer_list timer ;
   spinlock_t lock ;
   refcount_t refcnt ;
   struct rb_root rb_fragments ;
   struct sk_buff *fragments_tail ;
   struct sk_buff *last_run_head ;
   ktime_t stamp ;
   int len ;
   int meat ;
   __u8 flags ;
   u16 max_size ;
   struct fqdir *fqdir ;
   struct callback_head rcu ;
};
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_frag.h"
struct inet_frags {
   unsigned int qsize ;
   void (*constructor)(struct inet_frag_queue *, void *) ;
   void (*destructor)(struct inet_frag_queue *) ;
   void (*frag_expire)(struct timer_list *) ;
   struct kmem_cache *frags_cachep ;
   char *frags_cache_name ;
   struct rhashtable_params rhash_params ;
   refcount_t refcnt ;
   struct completion completion ;
};
#line 177 
struct ipv4_devconf;
#line 178 
struct fib_rules_ops;
#line 179 
struct fib_table;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv4.h"
struct local_ports {
   seqlock_t lock ;
   int range[2U] ;
   bool warned ;
};
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv4.h"
struct ping_group_range {
   seqlock_t lock ;
   kgid_t range[2U] ;
};
#line 31 
struct inet_hashinfo;
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv4.h"
struct inet_timewait_death_row {
   atomic_t tw_count ;
   struct inet_hashinfo *hashinfo ;
   int sysctl_max_tw_buckets ;
};
#line 40 
struct tcp_fastopen_context;
#line 43 
struct ip_ra_chain;
#line 43 
struct inet_peer_base;
#line 43 
struct xt_table;
#line 43 
struct tcp_congestion_ops;
#line 43 
struct fib_notifier_ops;
#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv4.h"
struct netns_ipv4 {
   struct ctl_table_header *forw_hdr ;
   struct ctl_table_header *frags_hdr ;
   struct ctl_table_header *ipv4_hdr ;
   struct ctl_table_header *route_hdr ;
   struct ctl_table_header *xfrm4_hdr ;
   struct ipv4_devconf *devconf_all ;
   struct ipv4_devconf *devconf_dflt ;
   struct ip_ra_chain *ra_chain ;
   struct mutex ra_mutex ;
   struct fib_rules_ops *rules_ops ;
   bool fib_has_custom_rules ;
   unsigned int fib_rules_require_fldissect ;
   struct fib_table *fib_main ;
   struct fib_table *fib_default ;
   bool fib_has_custom_local_routes ;
   int fib_num_tclassid_users ;
   struct hlist_head *fib_table_hash ;
   bool fib_offload_disabled ;
   struct sock *fibnl ;
   struct sock **icmp_sk ;
   struct sock *mc_autojoin_sk ;
   struct inet_peer_base *peers ;
   struct sock **tcp_sk ;
   struct fqdir *fqdir ;
   struct xt_table *iptable_filter ;
   struct xt_table *iptable_mangle ;
   struct xt_table *iptable_raw ;
   struct xt_table *arptable_filter ;
   struct xt_table *iptable_security ;
   struct xt_table *nat_table ;
   int sysctl_icmp_echo_ignore_all ;
   int sysctl_icmp_echo_ignore_broadcasts ;
   int sysctl_icmp_ignore_bogus_error_responses ;
   int sysctl_icmp_ratelimit ;
   int sysctl_icmp_ratemask ;
   int sysctl_icmp_errors_use_inbound_ifaddr ;
   struct local_ports ip_local_ports ;
   int sysctl_tcp_ecn ;
   int sysctl_tcp_ecn_fallback ;
   int sysctl_ip_default_ttl ;
   int sysctl_ip_no_pmtu_disc ;
   int sysctl_ip_fwd_use_pmtu ;
   int sysctl_ip_fwd_update_priority ;
   int sysctl_ip_nonlocal_bind ;
   int sysctl_ip_dynaddr ;
   int sysctl_ip_early_demux ;
   int sysctl_raw_l3mdev_accept ;
   int sysctl_tcp_early_demux ;
   int sysctl_udp_early_demux ;
   int sysctl_fwmark_reflect ;
   int sysctl_tcp_fwmark_accept ;
   int sysctl_tcp_l3mdev_accept ;
   int sysctl_tcp_mtu_probing ;
   int sysctl_tcp_mtu_probe_floor ;
   int sysctl_tcp_base_mss ;
   int sysctl_tcp_min_snd_mss ;
   int sysctl_tcp_probe_threshold ;
   u32 sysctl_tcp_probe_interval ;
   int sysctl_tcp_keepalive_time ;
   int sysctl_tcp_keepalive_probes ;
   int sysctl_tcp_keepalive_intvl ;
   int sysctl_tcp_syn_retries ;
   int sysctl_tcp_synack_retries ;
   int sysctl_tcp_syncookies ;
   int sysctl_tcp_reordering ;
   int sysctl_tcp_retries1 ;
   int sysctl_tcp_retries2 ;
   int sysctl_tcp_orphan_retries ;
   int sysctl_tcp_fin_timeout ;
   unsigned int sysctl_tcp_notsent_lowat ;
   int sysctl_tcp_tw_reuse ;
   int sysctl_tcp_sack ;
   int sysctl_tcp_window_scaling ;
   int sysctl_tcp_timestamps ;
   int sysctl_tcp_early_retrans ;
   int sysctl_tcp_recovery ;
   int sysctl_tcp_thin_linear_timeouts ;
   int sysctl_tcp_slow_start_after_idle ;
   int sysctl_tcp_retrans_collapse ;
   int sysctl_tcp_stdurg ;
   int sysctl_tcp_rfc1337 ;
   int sysctl_tcp_abort_on_overflow ;
   int sysctl_tcp_fack ;
   int sysctl_tcp_max_reordering ;
   int sysctl_tcp_dsack ;
   int sysctl_tcp_app_win ;
   int sysctl_tcp_adv_win_scale ;
   int sysctl_tcp_frto ;
   int sysctl_tcp_nometrics_save ;
   int sysctl_tcp_moderate_rcvbuf ;
   int sysctl_tcp_tso_win_divisor ;
   int sysctl_tcp_workaround_signed_windows ;
   int sysctl_tcp_limit_output_bytes ;
   int sysctl_tcp_challenge_ack_limit ;
   int sysctl_tcp_min_tso_segs ;
   int sysctl_tcp_min_rtt_wlen ;
   int sysctl_tcp_autocorking ;
   int sysctl_tcp_invalid_ratelimit ;
   int sysctl_tcp_pacing_ss_ratio ;
   int sysctl_tcp_pacing_ca_ratio ;
   int sysctl_tcp_wmem[3U] ;
   int sysctl_tcp_rmem[3U] ;
   int sysctl_tcp_comp_sack_nr ;
   unsigned long sysctl_tcp_comp_sack_delay_ns ;
   struct inet_timewait_death_row tcp_death_row ;
   int sysctl_max_syn_backlog ;
   int sysctl_tcp_fastopen ;
   struct tcp_congestion_ops *tcp_congestion_control ;
   struct tcp_fastopen_context *tcp_fastopen_ctx ;
   spinlock_t tcp_fastopen_ctx_lock ;
   unsigned int sysctl_tcp_fastopen_blackhole_timeout ;
   atomic_t tfo_active_disable_times ;
   unsigned long tfo_active_disable_stamp ;
   int sysctl_udp_wmem_min ;
   int sysctl_udp_rmem_min ;
   int sysctl_udp_l3mdev_accept ;
   int sysctl_igmp_max_memberships ;
   int sysctl_igmp_max_msf ;
   int sysctl_igmp_llm_reports ;
   int sysctl_igmp_qrv ;
   struct ping_group_range ping_group_range ;
   atomic_t dev_addr_genid ;
   unsigned long *sysctl_local_reserved_ports ;
   int sysctl_ip_prot_sock ;
   struct list_head mr_tables ;
   struct fib_rules_ops *mr_rules_ops ;
   int sysctl_fib_multipath_use_neigh ;
   int sysctl_fib_multipath_hash_policy ;
   struct fib_notifier_ops *notifier_ops ;
   unsigned int fib_seq ;
   struct fib_notifier_ops *ipmr_notifier_ops ;
   unsigned int ipmr_seq ;
   atomic_t rt_genid ;
   siphash_key_t ip_id_key ;
};
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/dst_ops.h"
struct neighbour;
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/dst_ops.h"
struct dst_ops {
   unsigned short family ;
   unsigned int gc_thresh ;
   int (*gc)(struct dst_ops *) ;
   struct dst_entry *(*check)(struct dst_entry *, __u32 ) ;
   unsigned int (*default_advmss)(struct dst_entry *) ;
   unsigned int (*mtu)(struct dst_entry *) ;
   u32 *(*cow_metrics)(struct dst_entry *, unsigned long ) ;
   void (*destroy)(struct dst_entry *) ;
   void (*ifdown)(struct dst_entry *, struct net_device *, int ) ;
   struct dst_entry *(*negative_advice)(struct dst_entry *) ;
   void (*link_failure)(struct sk_buff *) ;
   void (*update_pmtu)(struct dst_entry *, struct sock *, struct sk_buff *, u32 , bool ) ;
   void (*redirect)(struct dst_entry *, struct sock *, struct sk_buff *) ;
   int (*local_out)(struct net *, struct sock *, struct sk_buff *) ;
   struct neighbour *(*neigh_lookup)(struct dst_entry *, struct sk_buff *, void *) ;
   void (*confirm_neigh)(struct dst_entry *, void *) ;
   struct kmem_cache *kmem_cachep ;
   struct percpu_counter pcpuc_entries ;
};
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv6.h"
struct netns_sysctl_ipv6 {
   struct ctl_table_header *hdr ;
   struct ctl_table_header *route_hdr ;
   struct ctl_table_header *icmp_hdr ;
   struct ctl_table_header *frags_hdr ;
   struct ctl_table_header *xfrm6_hdr ;
   int bindv6only ;
   int flush_delay ;
   int ip6_rt_max_size ;
   int ip6_rt_gc_min_interval ;
   int ip6_rt_gc_timeout ;
   int ip6_rt_gc_interval ;
   int ip6_rt_gc_elasticity ;
   int ip6_rt_mtu_expires ;
   int ip6_rt_min_advmss ;
   int multipath_hash_policy ;
   int flowlabel_consistency ;
   int auto_flowlabels ;
   int icmpv6_time ;
   int icmpv6_echo_ignore_all ;
   int icmpv6_echo_ignore_multicast ;
   int icmpv6_echo_ignore_anycast ;
   unsigned long icmpv6_ratemask[4U] ;
   unsigned long *icmpv6_ratemask_ptr ;
   int anycast_src_echo_reply ;
   int ip_nonlocal_bind ;
   int fwmark_reflect ;
   int idgen_retries ;
   int idgen_delay ;
   int flowlabel_state_ranges ;
   int flowlabel_reflect ;
   int max_dst_opts_cnt ;
   int max_hbh_opts_cnt ;
   int max_dst_opts_len ;
   int max_hbh_opts_len ;
   int seg6_flowlabel ;
   bool skip_notify_on_dev_down ;
};
#line 56 
struct ipv6_devconf;
#line 56 
struct fib6_info;
#line 56 
struct rt6_info;
#line 56 
struct rt6_statistics;
#line 56 
struct fib6_table;
#line 56 
struct seg6_pernet_data;
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv6.h"
struct __anonstruct_ip6addrlbl_table_596 {
   struct hlist_head head ;
   spinlock_t lock ;
   u32 seq ;
};
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv6.h"
struct netns_ipv6 {
   struct netns_sysctl_ipv6 sysctl ;
   struct ipv6_devconf *devconf_all ;
   struct ipv6_devconf *devconf_dflt ;
   struct inet_peer_base *peers ;
   struct fqdir *fqdir ;
   struct xt_table *ip6table_filter ;
   struct xt_table *ip6table_mangle ;
   struct xt_table *ip6table_raw ;
   struct xt_table *ip6table_security ;
   struct xt_table *ip6table_nat ;
   struct fib6_info *fib6_null_entry ;
   struct rt6_info *ip6_null_entry ;
   struct rt6_statistics *rt6_stats ;
   struct timer_list ip6_fib_timer ;
   struct hlist_head *fib_table_hash ;
   struct fib6_table *fib6_main_tbl ;
   struct list_head fib6_walkers ;
   struct dst_ops ip6_dst_ops ;
   rwlock_t fib6_walker_lock ;
   spinlock_t fib6_gc_lock ;
   unsigned int ip6_rt_gc_expire ;
   unsigned long ip6_rt_last_gc ;
   unsigned int fib6_rules_require_fldissect ;
   bool fib6_has_custom_rules ;
   unsigned int fib6_routes_require_src ;
   struct rt6_info *ip6_prohibit_entry ;
   struct rt6_info *ip6_blk_hole_entry ;
   struct fib6_table *fib6_local_tbl ;
   struct fib_rules_ops *fib6_rules_ops ;
   struct sock **icmp_sk ;
   struct sock *ndisc_sk ;
   struct sock *tcp_sk ;
   struct sock *igmp_sk ;
   struct sock *mc_autojoin_sk ;
   struct list_head mr6_tables ;
   struct fib_rules_ops *mr6_rules_ops ;
   atomic_t dev_addr_genid ;
   atomic_t fib6_sernum ;
   struct seg6_pernet_data *seg6_data ;
   struct fib_notifier_ops *notifier_ops ;
   struct fib_notifier_ops *ip6mr_notifier_ops ;
   unsigned int ipmr_seq ;
   struct __anonstruct_ip6addrlbl_table_596 ip6addrlbl_table ;
};
#line 121  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv6.h"
struct netns_nf_frag {
   struct fqdir *fqdir ;
};
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/nexthop.h"
struct netns_nexthop {
   struct rb_root rb_root ;
   struct hlist_head *devhash ;
   unsigned int seq ;
   u32 last_id_allocated ;
};
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ieee802154_6lowpan.h"
struct netns_sysctl_lowpan {
   struct ctl_table_header *frags_hdr ;
};
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ieee802154_6lowpan.h"
struct netns_ieee802154_lowpan {
   struct netns_sysctl_lowpan sysctl ;
   struct fqdir *fqdir ;
};
#line 21 
struct sctp_mib;
#line 10  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/sctp.h"
struct netns_sctp {
   struct sctp_mib *sctp_statistics ;
   struct proc_dir_entry *proc_net_sctp ;
   struct ctl_table_header *sysctl_header ;
   struct sock *ctl_sock ;
   struct list_head local_addr_list ;
   struct list_head addr_waitq ;
   struct timer_list addr_wq_timer ;
   struct list_head auto_asconf_splist ;
   spinlock_t addr_wq_lock ;
   spinlock_t local_addr_lock ;
   unsigned int rto_initial ;
   unsigned int rto_min ;
   unsigned int rto_max ;
   int rto_alpha ;
   int rto_beta ;
   int max_burst ;
   int cookie_preserve_enable ;
   char *sctp_hmac_alg ;
   unsigned int valid_cookie_life ;
   unsigned int sack_timeout ;
   unsigned int hb_interval ;
   int max_retrans_association ;
   int max_retrans_path ;
   int max_retrans_init ;
   int pf_retrans ;
   int ps_retrans ;
   int pf_enable ;
   int pf_expose ;
   int sndbuf_policy ;
   int rcvbuf_policy ;
   int default_auto_asconf ;
   int addip_enable ;
   int addip_noauth ;
   int prsctp_enable ;
   int reconf_enable ;
   int auth_enable ;
   int intl_enable ;
   int ecn_enable ;
   int scope_policy ;
   int rwnd_upd_shift ;
   unsigned long max_autoclose ;
};
#line 7  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/dccp.h"
struct netns_dccp {
   struct sock *v4_ctl_sk ;
   struct sock *v6_ctl_sk ;
};
#line 75  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/netfilter.h"
struct nf_logger;
#line 76 
struct nf_queue_handler;
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/netfilter.h"
struct nf_hook_entries;
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/netfilter.h"
struct netns_nf {
   struct proc_dir_entry *proc_netfilter ;
   struct nf_queue_handler *queue_handler ;
   struct nf_logger *nf_loggers[13U] ;
   struct ctl_table_header *nf_log_dir_header ;
   struct nf_hook_entries *hooks_ipv4[5U] ;
   struct nf_hook_entries *hooks_ipv6[5U] ;
   struct nf_hook_entries *hooks_arp[3U] ;
   struct nf_hook_entries *hooks_bridge[5U] ;
   struct nf_hook_entries *hooks_decnet[7U] ;
   bool defrag_ipv4 ;
   bool defrag_ipv6 ;
};
#line 37 
struct ebt_table;
#line 10  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/x_tables.h"
struct netns_xt {
   struct list_head tables[13U] ;
   bool notrack_deprecated_warning ;
   bool clusterip_deprecated_warning ;
   struct ebt_table *broute_table ;
   struct ebt_table *frame_filter ;
   struct ebt_table *frame_nat ;
};
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_nulls.h"
struct hlist_nulls_node;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_nulls.h"
struct hlist_nulls_head {
   struct hlist_nulls_node *first ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_nulls.h"
struct hlist_nulls_node {
   struct hlist_nulls_node *next ;
   struct hlist_nulls_node **pprev ;
};
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_generic_net {
   unsigned int timeout ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_tcp_net {
   unsigned int timeouts[14U] ;
   int tcp_loose ;
   int tcp_be_liberal ;
   int tcp_max_retrans ;
};
#line 38  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_udp_net {
   unsigned int timeouts[2U] ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_icmp_net {
   unsigned int timeout ;
};
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_dccp_net {
   int dccp_loose ;
   unsigned int dccp_timeout[10U] ;
};
#line 54  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_sctp_net {
   unsigned int timeouts[10U] ;
};
#line 66  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_gre_net {
   struct list_head keymap_list ;
   unsigned int timeouts[2U] ;
};
#line 72  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_ip_net {
   struct nf_generic_net generic ;
   struct nf_tcp_net tcp ;
   struct nf_udp_net udp ;
   struct nf_icmp_net icmp ;
   struct nf_icmp_net icmpv6 ;
   struct nf_dccp_net dccp ;
   struct nf_sctp_net sctp ;
   struct nf_gre_net gre ;
};
#line 89  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct ct_pcpu {
   spinlock_t lock ;
   struct hlist_nulls_head unconfirmed ;
   struct hlist_nulls_head dying ;
};
#line 95 
struct nf_ct_event_notifier;
#line 95 
struct nf_exp_event_notifier;
#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct netns_ct {
   atomic_t count ;
   unsigned int expect_count ;
   struct delayed_work ecache_dwork ;
   bool ecache_dwork_pending ;
   bool auto_assign_helper_warned ;
   struct ctl_table_header *sysctl_header ;
   unsigned int sysctl_log_invalid ;
   int sysctl_events ;
   int sysctl_acct ;
   int sysctl_auto_assign_helper ;
   int sysctl_tstamp ;
   int sysctl_checksum ;
   struct ct_pcpu *pcpu_lists ;
   struct ip_conntrack_stat *stat ;
   struct nf_ct_event_notifier *nf_conntrack_event_cb ;
   struct nf_exp_event_notifier *nf_expect_event_cb ;
   struct nf_ip_net nf_ct_proto ;
   unsigned int labels_used ;
};
#line 7  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/nftables.h"
struct netns_nftables {
   struct list_head tables ;
   struct list_head commit_list ;
   struct list_head module_list ;
   struct mutex commit_mutex ;
   unsigned int base_seq ;
   u8 gencursor ;
   u8 validate_state ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/xfrm.h"
struct xfrm_policy_hash {
   struct hlist_head *table ;
   unsigned int hmask ;
   u8 dbits4 ;
   u8 sbits4 ;
   u8 dbits6 ;
   u8 sbits6 ;
};
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/xfrm.h"
struct xfrm_policy_hthresh {
   struct work_struct work ;
   seqlock_t lock ;
   u8 lbits4 ;
   u8 rbits4 ;
   u8 lbits6 ;
   u8 rbits6 ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/xfrm.h"
struct netns_xfrm {
   struct list_head state_all ;
   struct hlist_head *state_bydst ;
   struct hlist_head *state_bysrc ;
   struct hlist_head *state_byspi ;
   unsigned int state_hmask ;
   unsigned int state_num ;
   struct work_struct state_hash_work ;
   struct list_head policy_all ;
   struct hlist_head *policy_byidx ;
   unsigned int policy_idx_hmask ;
   struct hlist_head policy_inexact[3U] ;
   struct xfrm_policy_hash policy_bydst[3U] ;
   unsigned int policy_count[6U] ;
   struct work_struct policy_hash_work ;
   struct xfrm_policy_hthresh policy_hthresh ;
   struct list_head inexact_bins ;
   struct sock *nlsk ;
   struct sock *nlsk_stash ;
   u32 sysctl_aevent_etime ;
   u32 sysctl_aevent_rseqth ;
   int sysctl_larval_drop ;
   u32 sysctl_acq_expires ;
   struct ctl_table_header *sysctl_hdr ;
   struct dst_ops xfrm4_dst_ops ;
   struct dst_ops xfrm6_dst_ops ;
   spinlock_t xfrm_state_lock ;
   spinlock_t xfrm_policy_lock ;
   struct mutex xfrm_cfg_mutex ;
};
#line 79 
struct mpls_route;
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/mpls.h"
struct netns_mpls {
   int ip_ttl_propagate ;
   int default_ttl ;
   size_t platform_labels ;
   struct mpls_route **platform_label ;
   struct ctl_table_header *ctl ;
};
#line 20 
struct can_dev_rcv_lists;
#line 21 
struct can_pkg_stats;
#line 22 
struct can_rcv_lists_stats;
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/can.h"
struct netns_can {
   struct proc_dir_entry *proc_dir ;
   struct proc_dir_entry *pde_version ;
   struct proc_dir_entry *pde_stats ;
   struct proc_dir_entry *pde_reset_stats ;
   struct proc_dir_entry *pde_rcvlist_all ;
   struct proc_dir_entry *pde_rcvlist_fil ;
   struct proc_dir_entry *pde_rcvlist_inv ;
   struct proc_dir_entry *pde_rcvlist_sff ;
   struct proc_dir_entry *pde_rcvlist_eff ;
   struct proc_dir_entry *pde_rcvlist_err ;
   struct proc_dir_entry *bcmproc_dir ;
   struct can_dev_rcv_lists *rx_alldev_list ;
   spinlock_t rcvlists_lock ;
   struct timer_list stattimer ;
   struct can_pkg_stats *pkg_stats ;
   struct can_rcv_lists_stats *rcv_lists_stats ;
   struct hlist_head cgw_list ;
};
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/xdp.h"
struct netns_xdp {
   struct mutex lock ;
   struct hlist_head list ;
};
#line 12 
struct proc_ns_operations;
#line 7  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ns_common.h"
struct ns_common {
   atomic_long_t stashed ;
   struct proc_ns_operations *ops ;
   unsigned int inum ;
};
#line 12 
struct net_generic;
#line 13 
struct uevent_sock;
#line 14 
struct netns_ipvs;
#line 55  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/net_namespace.h"
struct ucounts;
#line 55  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/net_namespace.h"
struct net {
   refcount_t passive ;
   refcount_t count ;
   spinlock_t rules_mod_lock ;
   unsigned int dev_unreg_count ;
   unsigned int dev_base_seq ;
   int ifindex ;
   spinlock_t nsid_lock ;
   atomic_t fnhe_genid ;
   struct list_head list ;
   struct list_head exit_list ;
   struct llist_node cleanup_list ;
   struct key_tag *key_domain ;
   struct user_namespace *user_ns ;
   struct ucounts *ucounts ;
   struct idr netns_ids ;
   struct ns_common ns ;
   struct list_head dev_base_head ;
   struct proc_dir_entry *proc_net ;
   struct proc_dir_entry *proc_net_stat ;
   struct ctl_table_set sysctls ;
   struct sock *rtnl ;
   struct sock *genl_sock ;
   struct uevent_sock *uevent_sock ;
   struct hlist_head *dev_name_head ;
   struct hlist_head *dev_index_head ;
   struct raw_notifier_head netdev_chain ;
   u32 hash_mix ;
   struct net_device *loopback_dev ;
   struct list_head rules_ops ;
   struct netns_core core ;
   struct netns_mib mib ;
   struct netns_packet packet ;
   struct netns_unix unx ;
   struct netns_nexthop nexthop ;
   struct netns_ipv4 ipv4 ;
   struct netns_ipv6 ipv6 ;
   struct netns_ieee802154_lowpan ieee802154_lowpan ;
   struct netns_sctp sctp ;
   struct netns_dccp dccp ;
   struct netns_nf nf ;
   struct netns_xt xt ;
   struct netns_ct ct ;
   struct netns_nftables nft ;
   struct netns_nf_frag nf_frag ;
   struct ctl_table_header *nf_frag_frags_hdr ;
   struct sock *nfnl ;
   struct sock *nfnl_stash ;
   struct list_head nfnl_acct_list ;
   struct list_head nfct_timeout_list ;
   struct sk_buff_head wext_nlevents ;
   struct net_generic *gen ;
   struct bpf_prog *flow_dissector_prog ;
   struct netns_xfrm xfrm ;
   struct netns_ipvs *ipvs ;
   struct netns_mpls mpls ;
   struct netns_can can ;
   struct netns_xdp xdp ;
   struct sock *crypto_nlsk ;
   struct sock *diag_nlsk ;
} __attribute__((__designated_init__));
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seq_file.h"
struct seq_file {
   char *buf ;
   size_t size ;
   size_t from ;
   size_t count ;
   size_t pad_until ;
   loff_t index ;
   loff_t read_pos ;
   u64 version ;
   struct mutex lock ;
   struct seq_operations *op ;
   int poll_event ;
   struct file *file ;
   void *private ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seq_file.h"
struct seq_operations {
   void *(*start)(struct seq_file *, loff_t *) ;
   void (*stop)(struct seq_file *, void *) ;
   void *(*next)(struct seq_file *, void *, loff_t *) ;
   int (*show)(struct seq_file *, void *) ;
};
#line 275  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/net_namespace.h"
struct __anonstruct_possible_net_t_608 {
   struct net *net ;
};
#line 275  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/net_namespace.h"
typedef struct __anonstruct_possible_net_t_608 possible_net_t;
#line 58  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct ieee_ets {
   __u8 willing ;
   __u8 ets_cap ;
   __u8 cbs ;
   __u8 tc_tx_bw[8U] ;
   __u8 tc_rx_bw[8U] ;
   __u8 tc_tsa[8U] ;
   __u8 prio_tc[8U] ;
   __u8 tc_reco_bw[8U] ;
   __u8 tc_reco_tsa[8U] ;
   __u8 reco_prio_tc[8U] ;
};
#line 78  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct ieee_maxrate {
   __u64 tc_maxrate[8U] ;
};
#line 119  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct ieee_qcn {
   __u8 rpg_enable[8U] ;
   __u32 rppp_max_rps[8U] ;
   __u32 rpg_time_reset[8U] ;
   __u32 rpg_byte_reset[8U] ;
   __u32 rpg_threshold[8U] ;
   __u32 rpg_max_rate[8U] ;
   __u32 rpg_ai_rate[8U] ;
   __u32 rpg_hai_rate[8U] ;
   __u32 rpg_gd[8U] ;
   __u32 rpg_min_dec_fac[8U] ;
   __u32 rpg_min_rate[8U] ;
   __u32 cndd_state_machine[8U] ;
};
#line 141  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct ieee_qcn_stats {
   __u64 rppp_rp_centiseconds[8U] ;
   __u32 rppp_created_rps[8U] ;
};
#line 157  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct ieee_pfc {
   __u8 pfc_cap ;
   __u8 pfc_en ;
   __u8 mbc ;
   __u16 delay ;
   __u64 requests[8U] ;
   __u64 indications[8U] ;
};
#line 168  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct dcbnl_buffer {
   __u8 prio2buffer[8U] ;
   __u32 buffer_size[8U] ;
   __u32 total_size ;
};
#line 190  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct cee_pg {
   __u8 willing ;
   __u8 error ;
   __u8 pg_en ;
   __u8 tcs_supported ;
   __u8 pg_bw[8U] ;
   __u8 prio_pg[8U] ;
};
#line 207  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct cee_pfc {
   __u8 willing ;
   __u8 error ;
   __u8 pfc_en ;
   __u8 tcs_supported ;
};
#line 244  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct dcb_app {
   __u8 selector ;
   __u8 priority ;
   __u16 protocol ;
};
#line 259  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct dcb_peer_app_info {
   __u8 willing ;
   __u8 error ;
};
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/dcbnl.h"
struct dcbnl_rtnl_ops {
   int (*ieee_getets)(struct net_device *, struct ieee_ets *) ;
   int (*ieee_setets)(struct net_device *, struct ieee_ets *) ;
   int (*ieee_getmaxrate)(struct net_device *, struct ieee_maxrate *) ;
   int (*ieee_setmaxrate)(struct net_device *, struct ieee_maxrate *) ;
   int (*ieee_getqcn)(struct net_device *, struct ieee_qcn *) ;
   int (*ieee_setqcn)(struct net_device *, struct ieee_qcn *) ;
   int (*ieee_getqcnstats)(struct net_device *, struct ieee_qcn_stats *) ;
   int (*ieee_getpfc)(struct net_device *, struct ieee_pfc *) ;
   int (*ieee_setpfc)(struct net_device *, struct ieee_pfc *) ;
   int (*ieee_getapp)(struct net_device *, struct dcb_app *) ;
   int (*ieee_setapp)(struct net_device *, struct dcb_app *) ;
   int (*ieee_delapp)(struct net_device *, struct dcb_app *) ;
   int (*ieee_peer_getets)(struct net_device *, struct ieee_ets *) ;
   int (*ieee_peer_getpfc)(struct net_device *, struct ieee_pfc *) ;
   u8 (*getstate)(struct net_device *) ;
   u8 (*setstate)(struct net_device *, u8 ) ;
   void (*getpermhwaddr)(struct net_device *, u8 *) ;
   void (*setpgtccfgtx)(struct net_device *, int , u8 , u8 , u8 , u8 ) ;
   void (*setpgbwgcfgtx)(struct net_device *, int , u8 ) ;
   void (*setpgtccfgrx)(struct net_device *, int , u8 , u8 , u8 , u8 ) ;
   void (*setpgbwgcfgrx)(struct net_device *, int , u8 ) ;
   void (*getpgtccfgtx)(struct net_device *, int , u8 *, u8 *, u8 *, u8 *) ;
   void (*getpgbwgcfgtx)(struct net_device *, int , u8 *) ;
   void (*getpgtccfgrx)(struct net_device *, int , u8 *, u8 *, u8 *, u8 *) ;
   void (*getpgbwgcfgrx)(struct net_device *, int , u8 *) ;
   void (*setpfccfg)(struct net_device *, int , u8 ) ;
   void (*getpfccfg)(struct net_device *, int , u8 *) ;
   u8 (*setall)(struct net_device *) ;
   u8 (*getcap)(struct net_device *, int , u8 *) ;
   int (*getnumtcs)(struct net_device *, int , u8 *) ;
   int (*setnumtcs)(struct net_device *, int , u8 ) ;
   u8 (*getpfcstate)(struct net_device *) ;
   void (*setpfcstate)(struct net_device *, u8 ) ;
   void (*getbcncfg)(struct net_device *, int , u32 *) ;
   void (*setbcncfg)(struct net_device *, int , u32 ) ;
   void (*getbcnrp)(struct net_device *, int , u8 *) ;
   void (*setbcnrp)(struct net_device *, int , u8 ) ;
   int (*setapp)(struct net_device *, u8 , u16 , u8 ) ;
   int (*getapp)(struct net_device *, u8 , u16 ) ;
   u8 (*getfeatcfg)(struct net_device *, int , u8 *) ;
   u8 (*setfeatcfg)(struct net_device *, int , u8 ) ;
   u8 (*getdcbx)(struct net_device *) ;
   u8 (*setdcbx)(struct net_device *, u8 ) ;
   int (*peer_getappinfo)(struct net_device *, struct dcb_peer_app_info *, u16 *) ;
   int (*peer_getapptable)(struct net_device *, struct dcb_app *) ;
   int (*cee_peer_getpg)(struct net_device *, struct cee_pg *) ;
   int (*cee_peer_getpfc)(struct net_device *, struct cee_pfc *) ;
   int (*dcbnl_getbuffer)(struct net_device *, struct dcbnl_buffer *) ;
   int (*dcbnl_setbuffer)(struct net_device *, struct dcbnl_buffer *) ;
};
#line 41  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/taskstats.h"
struct taskstats {
   __u16 version ;
   __u32 ac_exitcode ;
   __u8 ac_flag ;
   __u8 ac_nice ;
   __u64 cpu_count ;
   __u64 cpu_delay_total ;
   __u64 blkio_count ;
   __u64 blkio_delay_total ;
   __u64 swapin_count ;
   __u64 swapin_delay_total ;
   __u64 cpu_run_real_total ;
   __u64 cpu_run_virtual_total ;
   char ac_comm[32U] ;
   __u8 ac_sched ;
   __u8 ac_pad[3U] ;
   __u32 ac_uid ;
   __u32 ac_gid ;
   __u32 ac_pid ;
   __u32 ac_ppid ;
   __u32 ac_btime ;
   __u64 ac_etime ;
   __u64 ac_utime ;
   __u64 ac_stime ;
   __u64 ac_minflt ;
   __u64 ac_majflt ;
   __u64 coremem ;
   __u64 virtmem ;
   __u64 hiwater_rss ;
   __u64 hiwater_vm ;
   __u64 read_char ;
   __u64 write_char ;
   __u64 read_syscalls ;
   __u64 write_syscalls ;
   __u64 read_bytes ;
   __u64 write_bytes ;
   __u64 cancelled_write_bytes ;
   __u64 nvcsw ;
   __u64 nivcsw ;
   __u64 ac_utimescaled ;
   __u64 ac_stimescaled ;
   __u64 cpu_scaled_run_real_total ;
   __u64 freepages_count ;
   __u64 freepages_delay_total ;
   __u64 thrashing_count ;
   __u64 thrashing_delay_total ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/cgroupstats.h"
struct mnt_namespace;
#line 60 
struct uts_namespace;
#line 61 
struct ipc_namespace;
#line 62 
struct cgroup_namespace;
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/nsproxy.h"
struct nsproxy {
   atomic_t count ;
   struct uts_namespace *uts_ns ;
   struct ipc_namespace *ipc_ns ;
   struct mnt_namespace *mnt_ns ;
   struct pid_namespace *pid_ns_for_children ;
   struct net *net_ns ;
   struct cgroup_namespace *cgroup_ns ;
};
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/user_namespace.h"
struct uid_gid_extent {
   u32 first ;
   u32 lower_first ;
   u32 count ;
};
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/user_namespace.h"
struct __anonstruct_610 {
   struct uid_gid_extent *forward ;
   struct uid_gid_extent *reverse ;
};
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/user_namespace.h"
union __anonunion_609 {
   struct uid_gid_extent extent[5U] ;
   struct __anonstruct_610 __anonCompField___anonunion_609_113 ;
};
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/user_namespace.h"
struct uid_gid_map {
   u32 nr_extents ;
   union __anonunion_609 __anonCompField_uid_gid_map_114 ;
};
#line 55  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/user_namespace.h"
struct user_namespace {
   struct uid_gid_map uid_map ;
   struct uid_gid_map gid_map ;
   struct uid_gid_map projid_map ;
   atomic_t count ;
   struct user_namespace *parent ;
   int level ;
   kuid_t owner ;
   kgid_t group ;
   struct ns_common ns ;
   unsigned long flags ;
   struct list_head keyring_name_list ;
   struct key *user_keyring_register ;
   struct rw_semaphore keyring_sem ;
   struct key *persistent_keyring_register ;
   struct work_struct work ;
   struct ctl_table_set set ;
   struct ctl_table_header *sysctls ;
   struct ucounts *ucounts ;
   int ucount_max[9U] ;
} __attribute__((__designated_init__));
#line 91  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/user_namespace.h"
struct ucounts {
   struct hlist_node node ;
   struct user_namespace *ns ;
   kuid_t uid ;
   int count ;
   atomic_t ucount[9U] ;
};
#line 65  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct bpf_insn {
   __u8 code ;
   __u8 dst_reg : 4 ;
   __u8 src_reg : 4 ;
   __s16 off ;
   __s32 imm ;
};
#line 79  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct bpf_cgroup_storage_key {
   __u64 cgroup_inode_id ;
   __u32 attach_type ;
};
#line 110 
enum bpf_map_type {
    BPF_MAP_TYPE_UNSPEC = 0,
    BPF_MAP_TYPE_HASH = 1,
    BPF_MAP_TYPE_ARRAY = 2,
    BPF_MAP_TYPE_PROG_ARRAY = 3,
    BPF_MAP_TYPE_PERF_EVENT_ARRAY = 4,
    BPF_MAP_TYPE_PERCPU_HASH = 5,
    BPF_MAP_TYPE_PERCPU_ARRAY = 6,
    BPF_MAP_TYPE_STACK_TRACE = 7,
    BPF_MAP_TYPE_CGROUP_ARRAY = 8,
    BPF_MAP_TYPE_LRU_HASH = 9,
    BPF_MAP_TYPE_LRU_PERCPU_HASH = 10,
    BPF_MAP_TYPE_LPM_TRIE = 11,
    BPF_MAP_TYPE_ARRAY_OF_MAPS = 12,
    BPF_MAP_TYPE_HASH_OF_MAPS = 13,
    BPF_MAP_TYPE_DEVMAP = 14,
    BPF_MAP_TYPE_SOCKMAP = 15,
    BPF_MAP_TYPE_CPUMAP = 16,
    BPF_MAP_TYPE_XSKMAP = 17,
    BPF_MAP_TYPE_SOCKHASH = 18,
    BPF_MAP_TYPE_CGROUP_STORAGE = 19,
    BPF_MAP_TYPE_REUSEPORT_SOCKARRAY = 20,
    BPF_MAP_TYPE_PERCPU_CGROUP_STORAGE = 21,
    BPF_MAP_TYPE_QUEUE = 22,
    BPF_MAP_TYPE_STACK = 23,
    BPF_MAP_TYPE_SK_STORAGE = 24,
    BPF_MAP_TYPE_DEVMAP_HASH = 25
};
#line 139 
enum bpf_prog_type {
    BPF_PROG_TYPE_UNSPEC = 0,
    BPF_PROG_TYPE_SOCKET_FILTER = 1,
    BPF_PROG_TYPE_KPROBE = 2,
    BPF_PROG_TYPE_SCHED_CLS = 3,
    BPF_PROG_TYPE_SCHED_ACT = 4,
    BPF_PROG_TYPE_TRACEPOINT = 5,
    BPF_PROG_TYPE_XDP = 6,
    BPF_PROG_TYPE_PERF_EVENT = 7,
    BPF_PROG_TYPE_CGROUP_SKB = 8,
    BPF_PROG_TYPE_CGROUP_SOCK = 9,
    BPF_PROG_TYPE_LWT_IN = 10,
    BPF_PROG_TYPE_LWT_OUT = 11,
    BPF_PROG_TYPE_LWT_XMIT = 12,
    BPF_PROG_TYPE_SOCK_OPS = 13,
    BPF_PROG_TYPE_SK_SKB = 14,
    BPF_PROG_TYPE_CGROUP_DEVICE = 15,
    BPF_PROG_TYPE_SK_MSG = 16,
    BPF_PROG_TYPE_RAW_TRACEPOINT = 17,
    BPF_PROG_TYPE_CGROUP_SOCK_ADDR = 18,
    BPF_PROG_TYPE_LWT_SEG6LOCAL = 19,
    BPF_PROG_TYPE_LIRC_MODE2 = 20,
    BPF_PROG_TYPE_SK_REUSEPORT = 21,
    BPF_PROG_TYPE_FLOW_DISSECTOR = 22,
    BPF_PROG_TYPE_CGROUP_SYSCTL = 23,
    BPF_PROG_TYPE_RAW_TRACEPOINT_WRITABLE = 24,
    BPF_PROG_TYPE_CGROUP_SOCKOPT = 25,
    BPF_PROG_TYPE_TRACING = 26
};
#line 169 
enum bpf_attach_type {
    BPF_CGROUP_INET_INGRESS = 0,
    BPF_CGROUP_INET_EGRESS = 1,
    BPF_CGROUP_INET_SOCK_CREATE = 2,
    BPF_CGROUP_SOCK_OPS = 3,
    BPF_SK_SKB_STREAM_PARSER = 4,
    BPF_SK_SKB_STREAM_VERDICT = 5,
    BPF_CGROUP_DEVICE = 6,
    BPF_SK_MSG_VERDICT = 7,
    BPF_CGROUP_INET4_BIND = 8,
    BPF_CGROUP_INET6_BIND = 9,
    BPF_CGROUP_INET4_CONNECT = 10,
    BPF_CGROUP_INET6_CONNECT = 11,
    BPF_CGROUP_INET4_POST_BIND = 12,
    BPF_CGROUP_INET6_POST_BIND = 13,
    BPF_CGROUP_UDP4_SENDMSG = 14,
    BPF_CGROUP_UDP6_SENDMSG = 15,
    BPF_LIRC_MODE2 = 16,
    BPF_FLOW_DISSECTOR = 17,
    BPF_CGROUP_SYSCTL = 18,
    BPF_CGROUP_UDP4_RECVMSG = 19,
    BPF_CGROUP_UDP6_RECVMSG = 20,
    BPF_CGROUP_GETSOCKOPT = 21,
    BPF_CGROUP_SETSOCKOPT = 22,
    BPF_TRACE_RAW_TP = 23,
    BPF_TRACE_FENTRY = 24,
    BPF_TRACE_FEXIT = 25,
    __MAX_BPF_ATTACH_TYPE = 26
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_612 {
   __u32 map_type ;
   __u32 key_size ;
   __u32 value_size ;
   __u32 max_entries ;
   __u32 map_flags ;
   __u32 inner_map_fd ;
   __u32 numa_node ;
   char map_name[16U] ;
   __u32 map_ifindex ;
   __u32 btf_fd ;
   __u32 btf_key_type_id ;
   __u32 btf_value_type_id ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
union __anonunion_614 {
   __u64 value ;
   __u64 next_key ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_613 {
   __u32 map_fd ;
   __u64 key ;
   union __anonunion_614 __anonCompField___anonstruct_613_117 ;
   __u64 flags ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_615 {
   __u32 prog_type ;
   __u32 insn_cnt ;
   __u64 insns ;
   __u64 license ;
   __u32 log_level ;
   __u32 log_size ;
   __u64 log_buf ;
   __u32 kern_version ;
   __u32 prog_flags ;
   char prog_name[16U] ;
   __u32 prog_ifindex ;
   __u32 expected_attach_type ;
   __u32 prog_btf_fd ;
   __u32 func_info_rec_size ;
   __u64 func_info ;
   __u32 func_info_cnt ;
   __u32 line_info_rec_size ;
   __u64 line_info ;
   __u32 line_info_cnt ;
   __u32 attach_btf_id ;
   __u32 attach_prog_fd ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_616 {
   __u64 pathname ;
   __u32 bpf_fd ;
   __u32 file_flags ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_617 {
   __u32 target_fd ;
   __u32 attach_bpf_fd ;
   __u32 attach_type ;
   __u32 attach_flags ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_test_618 {
   __u32 prog_fd ;
   __u32 retval ;
   __u32 data_size_in ;
   __u32 data_size_out ;
   __u64 data_in ;
   __u64 data_out ;
   __u32 repeat ;
   __u32 duration ;
   __u32 ctx_size_in ;
   __u32 ctx_size_out ;
   __u64 ctx_in ;
   __u64 ctx_out ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
union __anonunion_620 {
   __u32 start_id ;
   __u32 prog_id ;
   __u32 map_id ;
   __u32 btf_id ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_619 {
   union __anonunion_620 __anonCompField___anonstruct_619_122 ;
   __u32 next_id ;
   __u32 open_flags ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_info_621 {
   __u32 bpf_fd ;
   __u32 info_len ;
   __u64 info ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_query_622 {
   __u32 target_fd ;
   __u32 attach_type ;
   __u32 query_flags ;
   __u32 attach_flags ;
   __u64 prog_ids ;
   __u32 prog_cnt ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_raw_tracepoint_623 {
   __u64 name ;
   __u32 prog_fd ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_624 {
   __u64 btf ;
   __u64 btf_log_buf ;
   __u32 btf_size ;
   __u32 btf_log_size ;
   __u32 btf_log_level ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_task_fd_query_625 {
   __u32 pid ;
   __u32 fd ;
   __u32 flags ;
   __u32 buf_len ;
   __u64 buf ;
   __u32 prog_id ;
   __u32 fd_type ;
   __u64 probe_offset ;
   __u64 probe_addr ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
union bpf_attr {
   struct __anonstruct_612 __anonCompField_bpf_attr_116 ;
   struct __anonstruct_613 __anonCompField_bpf_attr_118 ;
   struct __anonstruct_615 __anonCompField_bpf_attr_119 ;
   struct __anonstruct_616 __anonCompField_bpf_attr_120 ;
   struct __anonstruct_617 __anonCompField_bpf_attr_121 ;
   struct __anonstruct_test_618 test ;
   struct __anonstruct_619 __anonCompField_bpf_attr_123 ;
   struct __anonstruct_info_621 info ;
   struct __anonstruct_query_622 query ;
   struct __anonstruct_raw_tracepoint_623 raw_tracepoint ;
   struct __anonstruct_624 __anonCompField_bpf_attr_124 ;
   struct __anonstruct_task_fd_query_625 task_fd_query ;
} __attribute__((__aligned__(8)));
#line 3653  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct bpf_func_info {
   __u32 insn_off ;
   __u32 type_id ;
};
#line 3661  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct bpf_line_info {
   __u32 insn_off ;
   __u32 file_name_off ;
   __u32 line_off ;
   __u32 line_col ;
};
#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/file.h"
struct bpf_prog_aux;
#line 96 
struct bpf_map;
#line 97 
struct btf;
#line 98 
struct btf_type;
#line 37  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_map_ops {
   int (*map_alloc_check)(union bpf_attr *) ;
   struct bpf_map *(*map_alloc)(union bpf_attr *) ;
   void (*map_release)(struct bpf_map *, struct file *) ;
   void (*map_free)(struct bpf_map *) ;
   int (*map_get_next_key)(struct bpf_map *, void *, void *) ;
   void (*map_release_uref)(struct bpf_map *) ;
   void *(*map_lookup_elem_sys_only)(struct bpf_map *, void *) ;
   void *(*map_lookup_elem)(struct bpf_map *, void *) ;
   int (*map_update_elem)(struct bpf_map *, void *, void *, u64 ) ;
   int (*map_delete_elem)(struct bpf_map *, void *) ;
   int (*map_push_elem)(struct bpf_map *, void *, u64 ) ;
   int (*map_pop_elem)(struct bpf_map *, void *) ;
   int (*map_peek_elem)(struct bpf_map *, void *) ;
   void *(*map_fd_get_ptr)(struct bpf_map *, struct file *, int ) ;
   void (*map_fd_put_ptr)(void *) ;
   u32 (*map_gen_lookup)(struct bpf_map *, struct bpf_insn *) ;
   u32 (*map_fd_sys_lookup_elem)(void *) ;
   void (*map_seq_show_elem)(struct bpf_map *, void *, struct seq_file *) ;
   int (*map_check_btf)(struct bpf_map *, struct btf *, struct btf_type *, struct btf_type *) ;
   int (*map_poke_track)(struct bpf_map *, struct bpf_prog_aux *) ;
   void (*map_poke_untrack)(struct bpf_map *, struct bpf_prog_aux *) ;
   void (*map_poke_run)(struct bpf_map *, u32 , struct bpf_prog *, struct bpf_prog *) ;
   int (*map_direct_value_addr)(struct bpf_map *, u64 *, u32 ) ;
   int (*map_direct_value_meta)(struct bpf_map *, u64 , u32 *) ;
   int (*map_mmap)(struct bpf_map *, struct vm_area_struct *) ;
};
#line 82  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_map_memory {
   u32 pages ;
   struct user_struct *user ;
};
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_map {
   struct bpf_map_ops *ops ;
   struct bpf_map *inner_map_meta ;
   void *security ;
   enum bpf_map_type map_type ;
   u32 key_size ;
   u32 value_size ;
   u32 max_entries ;
   u32 map_flags ;
   int spin_lock_off ;
   u32 id ;
   int numa_node ;
   u32 btf_key_type_id ;
   u32 btf_value_type_id ;
   struct btf *btf ;
   struct bpf_map_memory memory ;
   char name[16U] ;
   bool unpriv_array ;
   bool frozen ;
   atomic64_t refcnt ;
   atomic64_t usercnt ;
   struct work_struct work ;
   struct mutex freeze_mutex ;
   u64 writecnt ;
};
#line 151 
struct bpf_offload_dev;
#line 152 
struct bpf_offloaded_map;
#line 156  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_map_dev_ops {
   int (*map_get_next_key)(struct bpf_offloaded_map *, void *, void *) ;
   int (*map_lookup_elem)(struct bpf_offloaded_map *, void *, void *) ;
   int (*map_update_elem)(struct bpf_offloaded_map *, void *, void *, u64 ) ;
   int (*map_delete_elem)(struct bpf_offloaded_map *, void *) ;
};
#line 166  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_offloaded_map {
   struct bpf_map map ;
   struct net_device *netdev ;
   struct bpf_map_dev_ops *dev_ops ;
   void *dev_priv ;
   struct list_head offloads ;
};
#line 327  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_prog_ops {
   int (*test_run)(struct bpf_prog *, union bpf_attr *, union bpf_attr *) ;
};
#line 369  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_prog_offload {
   struct bpf_prog *prog ;
   struct net_device *netdev ;
   struct bpf_offload_dev *offdev ;
   void *dev_priv ;
   struct list_head offloads ;
   bool dev_state ;
   bool opt_failed ;
   void *jited_image ;
   u32 jited_len ;
};
#line 394  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_prog_stats {
   u64 cnt ;
   u64 nsecs ;
   struct u64_stats_sync syncp ;
} __attribute__((__aligned__(16)));
#line 400  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct btf_func_model {
   u8 ret_size ;
   u8 nr_args ;
   u8 arg_size[12U] ;
};
#line 447 
enum bpf_tramp_prog_type {
    BPF_TRAMP_FENTRY = 0,
    BPF_TRAMP_FEXIT = 1,
    BPF_TRAMP_MAX = 2
};
#line 454  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct __anonstruct_func_652 {
   struct btf_func_model model ;
   void *addr ;
   bool ftrace_managed ;
};
#line 454  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_trampoline {
   struct hlist_node hlist ;
   struct mutex mutex ;
   refcount_t refcnt ;
   u64 key ;
   struct __anonstruct_func_652 func ;
   struct hlist_head progs_hlist[2U] ;
   int progs_cnt[2U] ;
   void *image ;
   u64 selector ;
};
#line 495  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_func_info_aux {
   bool unreliable ;
};
#line 504  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct __anonstruct_tail_call_654 {
   struct bpf_map *map ;
   u32 key ;
};
#line 504  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
union __anonunion_653 {
   struct __anonstruct_tail_call_654 tail_call ;
};
#line 504  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_jit_poke_descriptor {
   void *ip ;
   union __anonunion_653 __anonCompField_bpf_jit_poke_descriptor_149 ;
   bool ip_stable ;
   u8 adj_off ;
   u16 reason ;
};
#line 517  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
union __anonunion_655 {
   struct work_struct work ;
   struct callback_head rcu ;
};
#line 517  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_prog_aux {
   atomic64_t refcnt ;
   u32 used_map_cnt ;
   u32 max_ctx_offset ;
   u32 max_pkt_offset ;
   u32 max_tp_access ;
   u32 stack_depth ;
   u32 id ;
   u32 func_cnt ;
   u32 func_idx ;
   u32 attach_btf_id ;
   struct bpf_prog *linked_prog ;
   bool verifier_zext ;
   bool offload_requested ;
   bool attach_btf_trace ;
   bool func_proto_unreliable ;
   enum bpf_tramp_prog_type trampoline_prog_type ;
   struct bpf_trampoline *trampoline ;
   struct hlist_node tramp_hlist ;
   struct btf_type *attach_func_proto ;
   char *attach_func_name ;
   struct bpf_prog **func ;
   void *jit_data ;
   struct bpf_jit_poke_descriptor *poke_tab ;
   u32 size_poke_tab ;
   struct latch_tree_node ksym_tnode ;
   struct list_head ksym_lnode ;
   struct bpf_prog_ops *ops ;
   struct bpf_map **used_maps ;
   struct bpf_prog *prog ;
   struct user_struct *user ;
   u64 load_time ;
   struct bpf_map *cgroup_storage[2U] ;
   char name[16U] ;
   void *security ;
   struct bpf_prog_offload *offload ;
   struct btf *btf ;
   struct bpf_func_info *func_info ;
   struct bpf_func_info_aux *func_info_aux ;
   struct bpf_line_info *linfo ;
   void **jited_linfo ;
   u32 func_info_cnt ;
   u32 nr_linfo ;
   u32 linfo_idx ;
   u32 num_exentries ;
   struct exception_table_entry *extable ;
   struct bpf_prog_stats *stats ;
   union __anonunion_655 __anonCompField_bpf_prog_aux_150 ;
};
#line 686 
struct bpf_cgroup_storage;
#line 686  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_prog_array_item {
   struct bpf_prog *prog ;
   struct bpf_cgroup_storage *cgroup_storage[2U] ;
};
#line 691  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_prog_array {
   struct callback_head rcu ;
   struct bpf_prog_array_item items[0U] ;
};
#line 1335 
struct cgroup;
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf-cgroup.h"
struct bpf_cgroup_storage_map;
#line 37  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf-cgroup.h"
struct bpf_storage_buffer {
   struct callback_head rcu ;
   char data[0U] ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf-cgroup.h"
union __anonunion_657 {
   struct bpf_storage_buffer *buf ;
   void *percpu_buf ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf-cgroup.h"
struct bpf_cgroup_storage {
   union __anonunion_657 __anonCompField_bpf_cgroup_storage_152 ;
   struct bpf_cgroup_storage_map *map ;
   struct bpf_cgroup_storage_key key ;
   struct list_head list ;
   struct rb_node node ;
   struct callback_head rcu ;
};
#line 62  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf-cgroup.h"
struct cgroup_bpf {
   struct bpf_prog_array *effective[26U] ;
   struct list_head progs[26U] ;
   u32 flags[26U] ;
   struct bpf_prog_array *inactive ;
   struct percpu_ref refcnt ;
   struct work_struct release_work ;
};
#line 69  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kthread.h"
struct kthread_work;
#line 86  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kthread.h"
struct kthread_worker {
   unsigned int flags ;
   raw_spinlock_t lock ;
   struct list_head work_list ;
   struct list_head delayed_work_list ;
   struct task_struct *task ;
   struct kthread_work *current_work ;
};
#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kthread.h"
struct kthread_work {
   struct list_head node ;
   void (*func)(struct kthread_work *) ;
   struct kthread_worker *worker ;
   int canceling ;
};
#line 103  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kthread.h"
struct kthread_delayed_work {
   struct kthread_work work ;
   struct timer_list timer ;
};
#line 199 
struct cgroup_subsys_state;
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/psi_types.h"
struct psi_group_cpu {
   seqcount_t seq ;
   unsigned int tasks[3U] ;
   u32 state_mask ;
   u32 times[6U] ;
   u64 state_start ;
   u32 times_prev[2U][6U] ;
};
#line 96 
struct psi_group;
#line 128  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/psi_types.h"
struct psi_group {
   struct mutex avgs_lock ;
   struct psi_group_cpu *pcpu ;
   u64 avg_total[5U] ;
   u64 avg_last_update ;
   u64 avg_next_update ;
   struct delayed_work avgs_work ;
   u64 total[2U][5U] ;
   unsigned long avg[5U][3U] ;
   atomic_t poll_scheduled ;
   struct kthread_worker *poll_kworker ;
   struct kthread_delayed_work poll_work ;
   struct mutex trigger_lock ;
   struct list_head triggers ;
   u32 nr_triggers[5U] ;
   u32 poll_states ;
   u64 poll_min_period ;
   u64 polling_total[5U] ;
   u64 polling_next_update ;
   u64 polling_until ;
};
#line 166 
struct cgroup_root;
#line 167 
struct cgroup_subsys;
#line 168 
struct cgroup_taskset;
#line 119  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup_file {
   struct kernfs_node *kn ;
   unsigned long notified_at ;
   struct timer_list notify_timer ;
};
#line 133  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup_subsys_state {
   struct cgroup *cgroup ;
   struct cgroup_subsys *ss ;
   struct percpu_ref refcnt ;
   struct list_head sibling ;
   struct list_head children ;
   struct list_head rstat_css_node ;
   int id ;
   unsigned int flags ;
   u64 serial_nr ;
   atomic_t online_cnt ;
   struct work_struct destroy_work ;
   struct rcu_work destroy_rwork ;
   struct cgroup_subsys_state *parent ;
};
#line 190  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct css_set {
   struct cgroup_subsys_state *subsys[14U] ;
   refcount_t refcount ;
   struct css_set *dom_cset ;
   struct cgroup *dfl_cgrp ;
   int nr_tasks ;
   struct list_head tasks ;
   struct list_head mg_tasks ;
   struct list_head dying_tasks ;
   struct list_head task_iters ;
   struct list_head e_cset_node[14U] ;
   struct list_head threaded_csets ;
   struct list_head threaded_csets_node ;
   struct hlist_node hlist ;
   struct list_head cgrp_links ;
   struct list_head mg_preload_node ;
   struct list_head mg_node ;
   struct cgroup *mg_src_cgrp ;
   struct cgroup *mg_dst_cgrp ;
   struct css_set *mg_dst_cset ;
   bool dead ;
   struct callback_head callback_head ;
};
#line 279  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup_base_stat {
   struct task_cputime cputime ;
};
#line 303  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup_rstat_cpu {
   struct u64_stats_sync bsync ;
   struct cgroup_base_stat bstat ;
   struct cgroup_base_stat last_bstat ;
   struct cgroup *updated_children ;
   struct cgroup *updated_next ;
};
#line 332  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup_freezer_state {
   bool freeze ;
   int e_freeze ;
   int nr_frozen_descendants ;
   int nr_frozen_tasks ;
};
#line 351  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup {
   struct cgroup_subsys_state self ;
   unsigned long flags ;
   int level ;
   int max_depth ;
   int nr_descendants ;
   int nr_dying_descendants ;
   int max_descendants ;
   int nr_populated_csets ;
   int nr_populated_domain_children ;
   int nr_populated_threaded_children ;
   int nr_threaded_children ;
   struct kernfs_node *kn ;
   struct cgroup_file procs_file ;
   struct cgroup_file events_file ;
   u16 subtree_control ;
   u16 subtree_ss_mask ;
   u16 old_subtree_control ;
   u16 old_subtree_ss_mask ;
   struct cgroup_subsys_state *subsys[14U] ;
   struct cgroup_root *root ;
   struct list_head cset_links ;
   struct list_head e_csets[14U] ;
   struct cgroup *dom_cgrp ;
   struct cgroup *old_dom_cgrp ;
   struct cgroup_rstat_cpu *rstat_cpu ;
   struct list_head rstat_css_list ;
   struct cgroup_base_stat last_bstat ;
   struct cgroup_base_stat bstat ;
   struct prev_cputime prev_cputime ;
   struct list_head pidlists ;
   struct mutex pidlist_mutex ;
   wait_queue_head_t offline_waitq ;
   struct work_struct release_agent_work ;
   struct psi_group psi ;
   struct cgroup_bpf bpf ;
   atomic_t congestion_count ;
   struct cgroup_freezer_state freezer ;
   u64 ancestor_ids[] ;
};
#line 489  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup_root {
   struct kernfs_root *kf_root ;
   unsigned int subsys_mask ;
   int hierarchy_id ;
   struct cgroup cgrp ;
   u64 cgrp_ancestor_id_storage ;
   atomic_t nr_cgrps ;
   struct list_head root_list ;
   unsigned int flags ;
   char release_agent_path[4096U] ;
   char name[64U] ;
};
#line 527  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cftype {
   char name[64U] ;
   unsigned long private ;
   size_t max_write_len ;
   unsigned int flags ;
   unsigned int file_offset ;
   struct cgroup_subsys *ss ;
   struct list_head node ;
   struct kernfs_ops *kf_ops ;
   int (*open)(struct kernfs_open_file *) ;
   void (*release)(struct kernfs_open_file *) ;
   u64 (*read_u64)(struct cgroup_subsys_state *, struct cftype *) ;
   s64 (*read_s64)(struct cgroup_subsys_state *, struct cftype *) ;
   int (*seq_show)(struct seq_file *, void *) ;
   void *(*seq_start)(struct seq_file *, loff_t *) ;
   void *(*seq_next)(struct seq_file *, void *, loff_t *) ;
   void (*seq_stop)(struct seq_file *, void *) ;
   int (*write_u64)(struct cgroup_subsys_state *, struct cftype *, u64 ) ;
   int (*write_s64)(struct cgroup_subsys_state *, struct cftype *, s64 ) ;
   ssize_t (*write)(struct kernfs_open_file *, char *, size_t , loff_t ) ;
   __poll_t (*poll)(struct kernfs_open_file *, struct poll_table_struct *) ;
   struct lock_class_key lockdep_key ;
};
#line 616  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup_subsys {
   struct cgroup_subsys_state *(*css_alloc)(struct cgroup_subsys_state *) ;
   int (*css_online)(struct cgroup_subsys_state *) ;
   void (*css_offline)(struct cgroup_subsys_state *) ;
   void (*css_released)(struct cgroup_subsys_state *) ;
   void (*css_free)(struct cgroup_subsys_state *) ;
   void (*css_reset)(struct cgroup_subsys_state *) ;
   void (*css_rstat_flush)(struct cgroup_subsys_state *, int ) ;
   int (*css_extra_stat_show)(struct seq_file *, struct cgroup_subsys_state *) ;
   int (*can_attach)(struct cgroup_taskset *) ;
   void (*cancel_attach)(struct cgroup_taskset *) ;
   void (*attach)(struct cgroup_taskset *) ;
   void (*post_attach)(void) ;
   int (*can_fork)(struct task_struct *) ;
   void (*cancel_fork)(struct task_struct *) ;
   void (*fork)(struct task_struct *) ;
   void (*exit)(struct task_struct *) ;
   void (*release)(struct task_struct *) ;
   void (*bind)(struct cgroup_subsys_state *) ;
   bool early_init : 1 ;
   bool implicit_on_dfl : 1 ;
   bool threaded : 1 ;
   bool broken_hierarchy : 1 ;
   bool warned_broken_hierarchy : 1 ;
   int id ;
   char *name ;
   char *legacy_name ;
   struct cgroup_root *root ;
   struct idr css_idr ;
   struct list_head cfts ;
   struct cftype *dfl_cftypes ;
   struct cftype *legacy_cftypes ;
   unsigned int depends_on ;
};
#line 783  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct __anonstruct_659 {
   u8 is_data ;
   u8 padding ;
   u16 prioidx ;
   u32 classid ;
} __attribute__((__packed__));
#line 783  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
union __anonunion_658 {
   struct __anonstruct_659 __anonCompField___anonunion_658_153 ;
   u64 val ;
};
#line 783  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct sock_cgroup_data {
   union __anonunion_658 __anonCompField_sock_cgroup_data_154 ;
};
#line 848  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup.h"
struct cgroup_namespace {
   refcount_t count ;
   struct ns_common ns ;
   struct user_namespace *user_ns ;
   struct ucounts *ucounts ;
   struct css_set *root_cset ;
};
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netprio_cgroup.h"
struct netprio_map {
   struct callback_head rcu ;
   u32 priomap_len ;
   u32 priomap[] ;
};
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/xdp.h"
struct xdp_mem_info {
   u32 type ;
   u32 id ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/xdp.h"
struct xdp_rxq_info {
   struct net_device *dev ;
   u32 queue_index ;
   u32 reg_state ;
   struct xdp_mem_info mem ;
} __attribute__((__aligned__(64)));
#line 75  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/xdp.h"
struct xdp_frame {
   void *data ;
   u16 len ;
   u16 headroom ;
   u16 metasize ;
   struct xdp_mem_info mem ;
   struct net_device *dev_rx ;
};
#line 175 
struct netdev_bpf;
#line 160  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/security.h"
struct xfrm_policy;
#line 161 
struct xfrm_state;
#line 178 
struct request_sock;
#line 44  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/netlink.h"
struct nlmsghdr {
   __u32 nlmsg_len ;
   __u16 nlmsg_type ;
   __u16 nlmsg_flags ;
   __u32 nlmsg_seq ;
   __u32 nlmsg_pid ;
};
#line 211  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/netlink.h"
struct nlattr {
   __u16 nla_len ;
   __u16 nla_type ;
};
#line 74  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netlink.h"
struct netlink_ext_ack {
   char *_msg ;
   struct nlattr *bad_attr ;
   u8 cookie[20U] ;
   u8 cookie_len ;
};
#line 180  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netlink.h"
union __anonunion_676 {
   u8 ctx[48U] ;
   long args[6U] ;
};
#line 180  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netlink.h"
struct netlink_callback {
   struct sk_buff *skb ;
   struct nlmsghdr *nlh ;
   int (*dump)(struct sk_buff *, struct netlink_callback *) ;
   int (*done)(struct netlink_callback *) ;
   void *data ;
   struct module *module ;
   struct netlink_ext_ack *extack ;
   u16 family ;
   u16 min_dump_alloc ;
   bool strict_check ;
   u16 answer_flags ;
   unsigned int prev_seq ;
   unsigned int seq ;
   union __anonunion_676 __anonCompField_netlink_callback_155 ;
};
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/neighbour.h"
struct ndmsg {
   __u8 ndm_family ;
   __u8 ndm_pad1 ;
   __u16 ndm_pad2 ;
   __s32 ndm_ifindex ;
   __u16 ndm_state ;
   __u8 ndm_flags ;
   __u8 ndm_type ;
};
#line 44  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if_link.h"
struct rtnl_link_stats64 {
   __u64 rx_packets ;
   __u64 tx_packets ;
   __u64 rx_bytes ;
   __u64 tx_bytes ;
   __u64 rx_errors ;
   __u64 tx_errors ;
   __u64 rx_dropped ;
   __u64 tx_dropped ;
   __u64 multicast ;
   __u64 collisions ;
   __u64 rx_length_errors ;
   __u64 rx_over_errors ;
   __u64 rx_crc_errors ;
   __u64 rx_frame_errors ;
   __u64 rx_fifo_errors ;
   __u64 rx_missed_errors ;
   __u64 tx_aborted_errors ;
   __u64 tx_carrier_errors ;
   __u64 tx_fifo_errors ;
   __u64 tx_heartbeat_errors ;
   __u64 tx_window_errors ;
   __u64 rx_compressed ;
   __u64 tx_compressed ;
   __u64 rx_nohandler ;
};
#line 753  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if_link.h"
struct ifla_vf_guid {
   __u32 vf ;
   __u64 guid ;
};
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/if_link.h"
struct ifla_vf_stats {
   __u64 rx_packets ;
   __u64 tx_packets ;
   __u64 rx_bytes ;
   __u64 tx_bytes ;
   __u64 broadcast ;
   __u64 multicast ;
   __u64 rx_dropped ;
   __u64 tx_dropped ;
};
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/if_link.h"
struct ifla_vf_info {
   __u32 vf ;
   __u8 mac[32U] ;
   __u32 vlan ;
   __u32 qos ;
   __u32 spoofchk ;
   __u32 linkstate ;
   __u32 min_tx_rate ;
   __u32 max_tx_rate ;
   __u32 rss_query_en ;
   __u32 trusted ;
   __be16 vlan_proto ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/pkt_sched.h"
struct tc_stats {
   __u64 bytes ;
   __u32 packets ;
   __u32 drops ;
   __u32 overlimits ;
   __u32 bps ;
   __u32 pps ;
   __u32 qlen ;
   __u32 backlog ;
};
#line 102  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/pkt_sched.h"
struct tc_sizespec {
   unsigned char cell_log ;
   unsigned char size_log ;
   short cell_align ;
   int overhead ;
   unsigned int linklayer ;
   unsigned int mpu ;
   unsigned int mtu ;
   unsigned int tsize ;
};
#line 118  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/hashtable.h"
struct netpoll_info;
#line 119 
struct phy_device;
#line 120 
struct dsa_port;
#line 121 
struct sfp_bus;
#line 122 
struct wireless_dev;
#line 123 
struct wpan_dev;
#line 124 
struct mpls_dev;
#line 125 
struct udp_tunnel_info;
#line 69  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
enum netdev_tx {
    __NETDEV_TX_MIN = -2147483648,
    NETDEV_TX_OK = 0,
    NETDEV_TX_BUSY = 16
};
#line 75  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
typedef enum netdev_tx netdev_tx_t;
#line 161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct net_device_stats {
   unsigned long rx_packets ;
   unsigned long tx_packets ;
   unsigned long rx_bytes ;
   unsigned long tx_bytes ;
   unsigned long rx_errors ;
   unsigned long tx_errors ;
   unsigned long rx_dropped ;
   unsigned long tx_dropped ;
   unsigned long multicast ;
   unsigned long collisions ;
   unsigned long rx_length_errors ;
   unsigned long rx_over_errors ;
   unsigned long rx_crc_errors ;
   unsigned long rx_frame_errors ;
   unsigned long rx_fifo_errors ;
   unsigned long rx_missed_errors ;
   unsigned long tx_aborted_errors ;
   unsigned long tx_carrier_errors ;
   unsigned long tx_fifo_errors ;
   unsigned long tx_heartbeat_errors ;
   unsigned long tx_window_errors ;
   unsigned long rx_compressed ;
   unsigned long tx_compressed ;
};
#line 195 
struct neigh_parms;
#line 201  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_hw_addr {
   struct list_head list ;
   unsigned char addr[32U] ;
   unsigned char type ;
   bool global_use ;
   int sync_cnt ;
   int refcount ;
   int synced ;
   struct callback_head callback_head ;
};
#line 217  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_hw_addr_list {
   struct list_head list ;
   int count ;
};
#line 237  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct hh_cache {
   unsigned int hh_len ;
   seqlock_t hh_lock ;
   unsigned long hh_data[16U] ;
};
#line 263  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct header_ops {
   int (*create)(struct sk_buff *, struct net_device *, unsigned short , void *, void *, unsigned int ) ;
   int (*parse)(struct sk_buff *, unsigned char *) ;
   int (*cache)(struct neighbour *, struct hh_cache *, __be16 ) ;
   void (*cache_update)(struct hh_cache *, struct net_device *, unsigned char *) ;
   bool (*validate)(char *, unsigned int ) ;
   __be16 (*parse_protocol)(struct sk_buff *) ;
};
#line 302  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct gro_list {
   struct list_head list ;
   int count ;
};
#line 316  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct napi_struct {
   struct list_head poll_list ;
   unsigned long state ;
   int weight ;
   unsigned long gro_bitmask ;
   int (*poll)(struct napi_struct *, int ) ;
   int poll_owner ;
   struct net_device *dev ;
   struct gro_list gro_hash[8U] ;
   struct sk_buff *skb ;
   struct list_head rx_list ;
   int rx_count ;
   struct hrtimer timer ;
   struct list_head dev_list ;
   struct hlist_node napi_hash_node ;
   unsigned int napi_id ;
};
#line 362 
enum gro_result {
    GRO_MERGED = 0,
    GRO_MERGED_FREE = 1,
    GRO_HELD = 2,
    GRO_NORMAL = 3,
    GRO_DROP = 4,
    GRO_CONSUMED = 5
};
#line 371  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
typedef enum gro_result gro_result_t;
#line 372 
enum rx_handler_result {
    RX_HANDLER_CONSUMED = 0,
    RX_HANDLER_ANOTHER = 1,
    RX_HANDLER_EXACT = 2,
    RX_HANDLER_PASS = 3
};
#line 379  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
typedef enum rx_handler_result rx_handler_result_t;
#line 421  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
typedef rx_handler_result_t rx_handler_func_t(struct sk_buff **);
#line 589 
struct Qdisc;
#line 589 
struct xdp_umem;
#line 589  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_queue {
   struct net_device *dev ;
   struct Qdisc *qdisc ;
   struct Qdisc *qdisc_sleeping ;
   struct kobject kobj ;
   int numa_node ;
   unsigned long tx_maxrate ;
   unsigned long trans_timeout ;
   struct net_device *sb_dev ;
   struct xdp_umem *umem ;
   spinlock_t _xmit_lock ;
   int xmit_lock_owner ;
   unsigned long trans_start ;
   unsigned long state ;
   struct dql dql ;
} __attribute__((__aligned__(64)));
#line 662  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct rps_map {
   unsigned int len ;
   struct callback_head rcu ;
   u16 cpus[0U] ;
};
#line 674  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct rps_dev_flow {
   u16 cpu ;
   u16 filter ;
   unsigned int last_qtail ;
};
#line 684  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct rps_dev_flow_table {
   unsigned int mask ;
   struct callback_head rcu ;
   struct rps_dev_flow flows[0U] ;
};
#line 736  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_rx_queue {
   struct rps_map *rps_map ;
   struct rps_dev_flow_table *rps_flow_table ;
   struct kobject kobj ;
   struct net_device *dev ;
   struct xdp_rxq_info xdp_rxq ;
   struct xdp_umem *umem ;
} __attribute__((__aligned__(64)));
#line 764  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct xps_map {
   unsigned int len ;
   unsigned int alloc_len ;
   struct callback_head rcu ;
   u16 queues[0U] ;
};
#line 777  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct xps_dev_maps {
   struct callback_head rcu ;
   struct xps_map *attr_map[0U] ;
};
#line 793  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_tc_txq {
   u16 count ;
   u16 offset ;
};
#line 803  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_fcoe_hbainfo {
   char manufacturer[64U] ;
   char serial_number[64U] ;
   char hardware_version[64U] ;
   char driver_version[64U] ;
   char optionrom_version[64U] ;
   char firmware_version[64U] ;
   char model[256U] ;
   char model_description[256U] ;
};
#line 820  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_phys_item_id {
   unsigned char id[32U] ;
   unsigned char id_len ;
};
#line 833 
enum tc_setup_type {
    TC_SETUP_QDISC_MQPRIO = 0,
    TC_SETUP_CLSU32 = 1,
    TC_SETUP_CLSFLOWER = 2,
    TC_SETUP_CLSMATCHALL = 3,
    TC_SETUP_CLSBPF = 4,
    TC_SETUP_BLOCK = 5,
    TC_SETUP_QDISC_CBS = 6,
    TC_SETUP_QDISC_RED = 7,
    TC_SETUP_QDISC_PRIO = 8,
    TC_SETUP_QDISC_MQ = 9,
    TC_SETUP_QDISC_ETF = 10,
    TC_SETUP_ROOT_QDISC = 11,
    TC_SETUP_QDISC_GRED = 12,
    TC_SETUP_QDISC_TAPRIO = 13,
    TC_SETUP_FT = 14
};
#line 851 
enum bpf_netdev_command {
    XDP_SETUP_PROG = 0,
    XDP_SETUP_PROG_HW = 1,
    XDP_QUERY_PROG = 2,
    XDP_QUERY_PROG_HW = 3,
    BPF_OFFLOAD_MAP_ALLOC = 4,
    BPF_OFFLOAD_MAP_FREE = 5,
    XDP_SETUP_XSK_UMEM = 6
};
#line 879  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct __anonstruct_681 {
   u32 flags ;
   struct bpf_prog *prog ;
   struct netlink_ext_ack *extack ;
};
#line 879  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct __anonstruct_682 {
   u32 prog_id ;
   u32 prog_flags ;
};
#line 879  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct __anonstruct_683 {
   struct bpf_offloaded_map *offmap ;
};
#line 879  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct __anonstruct_xsk_684 {
   struct xdp_umem *umem ;
   u16 queue_id ;
};
#line 879  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
union __anonunion_680 {
   struct __anonstruct_681 __anonCompField___anonunion_680_157 ;
   struct __anonstruct_682 __anonCompField___anonunion_680_158 ;
   struct __anonstruct_683 __anonCompField___anonunion_680_159 ;
   struct __anonstruct_xsk_684 xsk ;
};
#line 879  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_bpf {
   enum bpf_netdev_command command ;
   union __anonunion_680 __anonCompField_netdev_bpf_160 ;
};
#line 911  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct xfrmdev_ops {
   int (*xdo_dev_state_add)(struct xfrm_state *) ;
   void (*xdo_dev_state_delete)(struct xfrm_state *) ;
   void (*xdo_dev_state_free)(struct xfrm_state *) ;
   bool (*xdo_dev_offload_ok)(struct sk_buff *, struct xfrm_state *) ;
   void (*xdo_dev_state_advance_esn)(struct xfrm_state *) ;
};
#line 921  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct dev_ifalias {
   struct callback_head rcuhead ;
   char ifalias[] ;
};
#line 926 
struct tlsdev_ops;
#line 929  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_name_node {
   struct hlist_node hlist ;
   struct list_head list ;
   struct net_device *dev ;
   char *name ;
};
#line 1257 
struct devlink_port;
#line 1257  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct net_device_ops {
   int (*ndo_init)(struct net_device *) ;
   void (*ndo_uninit)(struct net_device *) ;
   int (*ndo_open)(struct net_device *) ;
   int (*ndo_stop)(struct net_device *) ;
   netdev_tx_t (*ndo_start_xmit)(struct sk_buff *, struct net_device *) ;
   netdev_features_t (*ndo_features_check)(struct sk_buff *, struct net_device *, netdev_features_t ) ;
   u16 (*ndo_select_queue)(struct net_device *, struct sk_buff *, struct net_device *) ;
   void (*ndo_change_rx_flags)(struct net_device *, int ) ;
   void (*ndo_set_rx_mode)(struct net_device *) ;
   int (*ndo_set_mac_address)(struct net_device *, void *) ;
   int (*ndo_validate_addr)(struct net_device *) ;
   int (*ndo_do_ioctl)(struct net_device *, struct ifreq *, int ) ;
   int (*ndo_set_config)(struct net_device *, struct ifmap *) ;
   int (*ndo_change_mtu)(struct net_device *, int ) ;
   int (*ndo_neigh_setup)(struct net_device *, struct neigh_parms *) ;
   void (*ndo_tx_timeout)(struct net_device *) ;
   void (*ndo_get_stats64)(struct net_device *, struct rtnl_link_stats64 *) ;
   bool (*ndo_has_offload_stats)(struct net_device *, int ) ;
   int (*ndo_get_offload_stats)(int , struct net_device *, void *) ;
   struct net_device_stats *(*ndo_get_stats)(struct net_device *) ;
   int (*ndo_vlan_rx_add_vid)(struct net_device *, __be16 , u16 ) ;
   int (*ndo_vlan_rx_kill_vid)(struct net_device *, __be16 , u16 ) ;
   void (*ndo_poll_controller)(struct net_device *) ;
   int (*ndo_netpoll_setup)(struct net_device *, struct netpoll_info *) ;
   void (*ndo_netpoll_cleanup)(struct net_device *) ;
   int (*ndo_set_vf_mac)(struct net_device *, int , u8 *) ;
   int (*ndo_set_vf_vlan)(struct net_device *, int , u16 , u8 , __be16 ) ;
   int (*ndo_set_vf_rate)(struct net_device *, int , int , int ) ;
   int (*ndo_set_vf_spoofchk)(struct net_device *, int , bool ) ;
   int (*ndo_set_vf_trust)(struct net_device *, int , bool ) ;
   int (*ndo_get_vf_config)(struct net_device *, int , struct ifla_vf_info *) ;
   int (*ndo_set_vf_link_state)(struct net_device *, int , int ) ;
   int (*ndo_get_vf_stats)(struct net_device *, int , struct ifla_vf_stats *) ;
   int (*ndo_set_vf_port)(struct net_device *, int , struct nlattr **) ;
   int (*ndo_get_vf_port)(struct net_device *, int , struct sk_buff *) ;
   int (*ndo_get_vf_guid)(struct net_device *, int , struct ifla_vf_guid *, struct ifla_vf_guid *) ;
   int (*ndo_set_vf_guid)(struct net_device *, int , u64 , int ) ;
   int (*ndo_set_vf_rss_query_en)(struct net_device *, int , bool ) ;
   int (*ndo_setup_tc)(struct net_device *, enum tc_setup_type , void *) ;
   int (*ndo_fcoe_enable)(struct net_device *) ;
   int (*ndo_fcoe_disable)(struct net_device *) ;
   int (*ndo_fcoe_ddp_setup)(struct net_device *, u16 , struct scatterlist *, unsigned int ) ;
   int (*ndo_fcoe_ddp_done)(struct net_device *, u16 ) ;
   int (*ndo_fcoe_ddp_target)(struct net_device *, u16 , struct scatterlist *, unsigned int ) ;
   int (*ndo_fcoe_get_hbainfo)(struct net_device *, struct netdev_fcoe_hbainfo *) ;
   int (*ndo_fcoe_get_wwn)(struct net_device *, u64 *, int ) ;
   int (*ndo_rx_flow_steer)(struct net_device *, struct sk_buff *, u16 , u32 ) ;
   int (*ndo_add_slave)(struct net_device *, struct net_device *, struct netlink_ext_ack *) ;
   int (*ndo_del_slave)(struct net_device *, struct net_device *) ;
   netdev_features_t (*ndo_fix_features)(struct net_device *, netdev_features_t ) ;
   int (*ndo_set_features)(struct net_device *, netdev_features_t ) ;
   int (*ndo_neigh_construct)(struct net_device *, struct neighbour *) ;
   void (*ndo_neigh_destroy)(struct net_device *, struct neighbour *) ;
   int (*ndo_fdb_add)(struct ndmsg *, struct nlattr **, struct net_device *, unsigned char *, u16 , u16 , struct netlink_ext_ack *) ;
   int (*ndo_fdb_del)(struct ndmsg *, struct nlattr **, struct net_device *, unsigned char *, u16 ) ;
   int (*ndo_fdb_dump)(struct sk_buff *, struct netlink_callback *, struct net_device *, struct net_device *, int *) ;
   int (*ndo_fdb_get)(struct sk_buff *, struct nlattr **, struct net_device *, unsigned char *, u16 , u32 , u32 , struct netlink_ext_ack *) ;
   int (*ndo_bridge_setlink)(struct net_device *, struct nlmsghdr *, u16 , struct netlink_ext_ack *) ;
   int (*ndo_bridge_getlink)(struct sk_buff *, u32 , u32 , struct net_device *, u32 , int ) ;
   int (*ndo_bridge_dellink)(struct net_device *, struct nlmsghdr *, u16 ) ;
   int (*ndo_change_carrier)(struct net_device *, bool ) ;
   int (*ndo_get_phys_port_id)(struct net_device *, struct netdev_phys_item_id *) ;
   int (*ndo_get_port_parent_id)(struct net_device *, struct netdev_phys_item_id *) ;
   int (*ndo_get_phys_port_name)(struct net_device *, char *, size_t ) ;
   void (*ndo_udp_tunnel_add)(struct net_device *, struct udp_tunnel_info *) ;
   void (*ndo_udp_tunnel_del)(struct net_device *, struct udp_tunnel_info *) ;
   void *(*ndo_dfwd_add_station)(struct net_device *, struct net_device *) ;
   void (*ndo_dfwd_del_station)(struct net_device *, void *) ;
   int (*ndo_set_tx_maxrate)(struct net_device *, int , u32 ) ;
   int (*ndo_get_iflink)(struct net_device *) ;
   int (*ndo_change_proto_down)(struct net_device *, bool ) ;
   int (*ndo_fill_metadata_dst)(struct net_device *, struct sk_buff *) ;
   void (*ndo_set_rx_headroom)(struct net_device *, int ) ;
   int (*ndo_bpf)(struct net_device *, struct netdev_bpf *) ;
   int (*ndo_xdp_xmit)(struct net_device *, int , struct xdp_frame **, u32 ) ;
   int (*ndo_xsk_wakeup)(struct net_device *, u32 , u32 ) ;
   struct devlink_port *(*ndo_get_devlink_port)(struct net_device *) ;
};
#line 1492 
enum ldv_15274 {
    NETREG_UNINITIALIZED = 0,
    NETREG_REGISTERED = 1,
    NETREG_UNREGISTERING = 2,
    NETREG_UNREGISTERED = 3,
    NETREG_RELEASED = 4,
    NETREG_DUMMY = 5
};
#line 1501 
enum ldv_15275 {
    RTNL_LINK_INITIALIZED = 0,
    RTNL_LINK_INITIALIZING = 1
};
#line 1795  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct __anonstruct_adj_list_685 {
   struct list_head upper ;
   struct list_head lower ;
};
#line 1795 
struct iw_handler_def;
#line 1795 
struct iw_public_data;
#line 1795 
struct l3mdev_ops;
#line 1795 
struct ndisc_ops;
#line 1795 
struct vlan_info;
#line 1795 
struct tipc_bearer;
#line 1795 
struct in_device;
#line 1795 
struct dn_dev;
#line 1795 
struct inet6_dev;
#line 1795 
struct mini_Qdisc;
#line 1795 
struct cpu_rmap;
#line 1795 
struct pcpu_lstats;
#line 1795 
struct pcpu_sw_netstats;
#line 1795 
struct pcpu_dstats;
#line 1795  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
union __anonunion_686 {
   void *ml_priv ;
   struct pcpu_lstats *lstats ;
   struct pcpu_sw_netstats *tstats ;
   struct pcpu_dstats *dstats ;
};
#line 1795 
struct garp_port;
#line 1795 
struct mrp_port;
#line 1795 
struct rtnl_link_ops;
#line 1795  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct net_device {
   char name[16U] ;
   struct netdev_name_node *name_node ;
   struct dev_ifalias *ifalias ;
   unsigned long mem_end ;
   unsigned long mem_start ;
   unsigned long base_addr ;
   int irq ;
   unsigned long state ;
   struct list_head dev_list ;
   struct list_head napi_list ;
   struct list_head unreg_list ;
   struct list_head close_list ;
   struct list_head ptype_all ;
   struct list_head ptype_specific ;
   struct __anonstruct_adj_list_685 adj_list ;
   netdev_features_t features ;
   netdev_features_t hw_features ;
   netdev_features_t wanted_features ;
   netdev_features_t vlan_features ;
   netdev_features_t hw_enc_features ;
   netdev_features_t mpls_features ;
   netdev_features_t gso_partial_features ;
   int ifindex ;
   int group ;
   struct net_device_stats stats ;
   atomic_long_t rx_dropped ;
   atomic_long_t tx_dropped ;
   atomic_long_t rx_nohandler ;
   atomic_t carrier_up_count ;
   atomic_t carrier_down_count ;
   struct iw_handler_def *wireless_handlers ;
   struct iw_public_data *wireless_data ;
   struct net_device_ops *netdev_ops ;
   struct ethtool_ops *ethtool_ops ;
   struct l3mdev_ops *l3mdev_ops ;
   struct ndisc_ops *ndisc_ops ;
   struct xfrmdev_ops *xfrmdev_ops ;
   struct tlsdev_ops *tlsdev_ops ;
   struct header_ops *header_ops ;
   unsigned int flags ;
   unsigned int priv_flags ;
   unsigned short gflags ;
   unsigned short padded ;
   unsigned char operstate ;
   unsigned char link_mode ;
   unsigned char if_port ;
   unsigned char dma ;
   unsigned int mtu ;
   unsigned int min_mtu ;
   unsigned int max_mtu ;
   unsigned short type ;
   unsigned short hard_header_len ;
   unsigned char min_header_len ;
   unsigned short needed_headroom ;
   unsigned short needed_tailroom ;
   unsigned char perm_addr[32U] ;
   unsigned char addr_assign_type ;
   unsigned char addr_len ;
   unsigned char upper_level ;
   unsigned char lower_level ;
   unsigned short neigh_priv_len ;
   unsigned short dev_id ;
   unsigned short dev_port ;
   spinlock_t addr_list_lock ;
   unsigned char name_assign_type ;
   bool uc_promisc ;
   struct netdev_hw_addr_list uc ;
   struct netdev_hw_addr_list mc ;
   struct netdev_hw_addr_list dev_addrs ;
   struct kset *queues_kset ;
   unsigned int promiscuity ;
   unsigned int allmulti ;
   struct vlan_info *vlan_info ;
   struct dsa_port *dsa_ptr ;
   struct tipc_bearer *tipc_ptr ;
   void *atalk_ptr ;
   struct in_device *ip_ptr ;
   struct dn_dev *dn_ptr ;
   struct inet6_dev *ip6_ptr ;
   void *ax25_ptr ;
   struct wireless_dev *ieee80211_ptr ;
   struct wpan_dev *ieee802154_ptr ;
   struct mpls_dev *mpls_ptr ;
   unsigned char *dev_addr ;
   struct netdev_rx_queue *_rx ;
   unsigned int num_rx_queues ;
   unsigned int real_num_rx_queues ;
   struct bpf_prog *xdp_prog ;
   unsigned long gro_flush_timeout ;
   rx_handler_func_t *rx_handler ;
   void *rx_handler_data ;
   struct mini_Qdisc *miniq_ingress ;
   struct netdev_queue *ingress_queue ;
   struct nf_hook_entries *nf_hooks_ingress ;
   unsigned char broadcast[32U] ;
   struct cpu_rmap *rx_cpu_rmap ;
   struct hlist_node index_hlist ;
   struct netdev_queue *_tx ;
   unsigned int num_tx_queues ;
   unsigned int real_num_tx_queues ;
   struct Qdisc *qdisc ;
   struct hlist_head qdisc_hash[16U] ;
   unsigned int tx_queue_len ;
   spinlock_t tx_global_lock ;
   int watchdog_timeo ;
   struct xps_dev_maps *xps_cpus_map ;
   struct xps_dev_maps *xps_rxqs_map ;
   struct mini_Qdisc *miniq_egress ;
   struct timer_list watchdog_timer ;
   int *pcpu_refcnt ;
   struct list_head todo_list ;
   struct list_head link_watch_list ;
   enum ldv_15274 reg_state : 8 ;
   bool dismantle ;
   enum ldv_15275 rtnl_link_state : 16 ;
   bool needs_free_netdev ;
   void (*priv_destructor)(struct net_device *) ;
   struct netpoll_info *npinfo ;
   possible_net_t nd_net ;
   union __anonunion_686 __anonCompField_net_device_161 ;
   struct garp_port *garp_port ;
   struct mrp_port *mrp_port ;
   struct device dev ;
   struct attribute_group *sysfs_groups[4U] ;
   struct attribute_group *sysfs_rx_queue_group ;
   struct rtnl_link_ops *rtnl_link_ops ;
   unsigned int gso_max_size ;
   u16 gso_max_segs ;
   struct dcbnl_rtnl_ops *dcbnl_ops ;
   s16 num_tc ;
   struct netdev_tc_txq tc_to_txq[16U] ;
   u8 prio_tc_map[16U] ;
   unsigned int fcoe_ddp_xid ;
   struct netprio_map *priomap ;
   struct phy_device *phydev ;
   struct sfp_bus *sfp_bus ;
   struct lock_class_key qdisc_tx_busylock_key ;
   struct lock_class_key qdisc_running_key ;
   struct lock_class_key qdisc_xmit_lock_key ;
   struct lock_class_key addr_list_lock_key ;
   bool proto_down ;
   unsigned int wol_enabled : 1 ;
};
#line 2400  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct pcpu_sw_netstats {
   u64 rx_packets ;
   u64 rx_bytes ;
   u64 tx_packets ;
   u64 tx_bytes ;
   struct u64_stats_sync syncp ;
} __attribute__((__aligned__(32)));
#line 2408  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct pcpu_lstats {
   u64_stats_t packets ;
   u64_stats_t bytes ;
   struct u64_stats_sync syncp ;
} __attribute__((__aligned__(16)));
#line 3610 
enum skb_free_reason {
    SKB_REASON_CONSUMED = 0,
    SKB_REASON_DROPPED = 1
};
#line 159  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/mii.h"
struct mii_ioctl_data {
   __u16 phy_id ;
   __u16 reg_num ;
   __u16 val_in ;
   __u16 val_out ;
};
#line 326  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/mdio.h"
struct gpio_desc;
#line 327 
struct mii_bus;
#line 26  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mdio.h"
struct reset_control;
#line 26  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mdio.h"
struct mdio_device {
   struct device dev ;
   struct mii_bus *bus ;
   char modalias[32U] ;
   int (*bus_match)(struct device *, struct device_driver *) ;
   void (*device_free)(struct mdio_device *) ;
   void (*device_remove)(struct mdio_device *) ;
   int addr ;
   int flags ;
   struct gpio_desc *reset_gpio ;
   struct reset_control *reset_ctrl ;
   unsigned int reset_assert_delay ;
   unsigned int reset_deassert_delay ;
};
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mdio.h"
struct mdio_driver_common {
   struct device_driver driver ;
   int flags ;
};
#line 65  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/phy.h"
enum ldv_15859 {
    PHY_INTERFACE_MODE_NA = 0,
    PHY_INTERFACE_MODE_INTERNAL = 1,
    PHY_INTERFACE_MODE_MII = 2,
    PHY_INTERFACE_MODE_GMII = 3,
    PHY_INTERFACE_MODE_SGMII = 4,
    PHY_INTERFACE_MODE_TBI = 5,
    PHY_INTERFACE_MODE_REVMII = 6,
    PHY_INTERFACE_MODE_RMII = 7,
    PHY_INTERFACE_MODE_RGMII = 8,
    PHY_INTERFACE_MODE_RGMII_ID = 9,
    PHY_INTERFACE_MODE_RGMII_RXID = 10,
    PHY_INTERFACE_MODE_RGMII_TXID = 11,
    PHY_INTERFACE_MODE_RTBI = 12,
    PHY_INTERFACE_MODE_SMII = 13,
    PHY_INTERFACE_MODE_XGMII = 14,
    PHY_INTERFACE_MODE_MOCA = 15,
    PHY_INTERFACE_MODE_QSGMII = 16,
    PHY_INTERFACE_MODE_TRGMII = 17,
    PHY_INTERFACE_MODE_1000BASEX = 18,
    PHY_INTERFACE_MODE_2500BASEX = 19,
    PHY_INTERFACE_MODE_RXAUI = 20,
    PHY_INTERFACE_MODE_XAUI = 21,
    PHY_INTERFACE_MODE_10GKR = 22,
    PHY_INTERFACE_MODE_USXGMII = 23,
    PHY_INTERFACE_MODE_MAX = 24
};
#line 93  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/phy.h"
typedef enum ldv_15859 phy_interface_t;
#line 186 
struct phylink;
#line 188 
enum ldv_15874 {
    MDIOBUS_ALLOCATED = 1,
    MDIOBUS_REGISTERED = 2,
    MDIOBUS_UNREGISTERED = 3,
    MDIOBUS_RELEASED = 4
};
#line 214  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/phy.h"
struct mii_bus {
   struct module *owner ;
   char *name ;
   char id[61U] ;
   void *priv ;
   int (*read)(struct mii_bus *, int , int ) ;
   int (*write)(struct mii_bus *, int , int , u16 ) ;
   int (*reset)(struct mii_bus *) ;
   struct mutex mdio_lock ;
   struct device *parent ;
   enum ldv_15874 state ;
   struct device dev ;
   struct mdio_device *mdio_map[32U] ;
   u32 phy_mask ;
   u32 phy_ignore_ta_mask ;
   int irq[32U] ;
   int reset_delay_us ;
   struct gpio_desc *reset_gpiod ;
};
#line 278 
enum phy_state {
    PHY_DOWN = 0,
    PHY_READY = 1,
    PHY_HALTED = 2,
    PHY_UP = 3,
    PHY_RUNNING = 4,
    PHY_NOLINK = 5
};
#line 325  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/phy.h"
struct phy_c45_device_ids {
   u32 devices_in_package ;
   u32 device_ids[8U] ;
};
#line 363 
struct phy_driver;
#line 363 
struct phy_led_trigger;
#line 363  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/phy.h"
struct phy_device {
   struct mdio_device mdio ;
   struct phy_driver *drv ;
   u32 phy_id ;
   struct phy_c45_device_ids c45_ids ;
   unsigned int is_c45 : 1 ;
   unsigned int is_internal : 1 ;
   unsigned int is_pseudo_fixed_link : 1 ;
   unsigned int is_gigabit_capable : 1 ;
   unsigned int has_fixups : 1 ;
   unsigned int suspended : 1 ;
   unsigned int sysfs_links : 1 ;
   unsigned int loopback_enabled : 1 ;
   unsigned int autoneg : 1 ;
   unsigned int link : 1 ;
   unsigned int autoneg_complete : 1 ;
   unsigned int interrupts : 1 ;
   enum phy_state state ;
   u32 dev_flags ;
   phy_interface_t interface ;
   int speed ;
   int duplex ;
   int pause ;
   int asym_pause ;
   unsigned long supported[2U] ;
   unsigned long advertising[2U] ;
   unsigned long lp_advertising[2U] ;
   unsigned long adv_old[2U] ;
   u32 eee_broken_modes ;
   struct phy_led_trigger *phy_led_triggers ;
   unsigned int phy_num_led_triggers ;
   struct phy_led_trigger *last_triggered ;
   struct phy_led_trigger *led_link_trigger ;
   int irq ;
   void *priv ;
   struct delayed_work state_queue ;
   struct mutex lock ;
   bool sfp_bus_attached ;
   struct sfp_bus *sfp_bus ;
   struct phylink *phylink ;
   struct net_device *attached_dev ;
   u8 mdix ;
   u8 mdix_ctrl ;
   void (*phy_link_change)(struct phy_device *, bool , bool ) ;
   void (*adjust_link)(struct net_device *) ;
};
#line 475  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/phy.h"
struct phy_driver {
   struct mdio_driver_common mdiodrv ;
   u32 phy_id ;
   char *name ;
   u32 phy_id_mask ;
   unsigned long *features ;
   u32 flags ;
   void *driver_data ;
   int (*soft_reset)(struct phy_device *) ;
   int (*config_init)(struct phy_device *) ;
   int (*probe)(struct phy_device *) ;
   int (*get_features)(struct phy_device *) ;
   int (*suspend)(struct phy_device *) ;
   int (*resume)(struct phy_device *) ;
   int (*config_aneg)(struct phy_device *) ;
   int (*aneg_done)(struct phy_device *) ;
   int (*read_status)(struct phy_device *) ;
   int (*ack_interrupt)(struct phy_device *) ;
   int (*config_intr)(struct phy_device *) ;
   int (*did_interrupt)(struct phy_device *) ;
   int (*handle_interrupt)(struct phy_device *) ;
   void (*remove)(struct phy_device *) ;
   int (*match_phy_device)(struct phy_device *) ;
   int (*ts_info)(struct phy_device *, struct ethtool_ts_info *) ;
   int (*hwtstamp)(struct phy_device *, struct ifreq *) ;
   bool (*rxtstamp)(struct phy_device *, struct sk_buff *, int ) ;
   void (*txtstamp)(struct phy_device *, struct sk_buff *, int ) ;
   int (*set_wol)(struct phy_device *, struct ethtool_wolinfo *) ;
   void (*get_wol)(struct phy_device *, struct ethtool_wolinfo *) ;
   void (*link_change_notify)(struct phy_device *) ;
   int (*read_mmd)(struct phy_device *, int , u16 ) ;
   int (*write_mmd)(struct phy_device *, int , u16 , u16 ) ;
   int (*read_page)(struct phy_device *) ;
   int (*write_page)(struct phy_device *, int ) ;
   int (*module_info)(struct phy_device *, struct ethtool_modinfo *) ;
   int (*module_eeprom)(struct phy_device *, struct ethtool_eeprom *, u8 *) ;
   int (*get_sset_count)(struct phy_device *) ;
   void (*get_strings)(struct phy_device *, u8 *) ;
   void (*get_stats)(struct phy_device *, struct ethtool_stats *, u64 *) ;
   int (*get_tunable)(struct phy_device *, struct ethtool_tunable *, void *) ;
   int (*set_tunable)(struct phy_device *, struct ethtool_tunable *, void *) ;
   int (*set_loopback)(struct phy_device *, bool ) ;
};
#line 567  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/rtnetlink.h"
struct tcmsg {
   unsigned char tcm_family ;
   unsigned char tcm__pad1 ;
   unsigned short tcm__pad2 ;
   int tcm_ifindex ;
   __u32 tcm_handle ;
   __u32 tcm_parent ;
   __u32 tcm_info ;
};
#line 86  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ip.h"
struct iphdr {
   __u8 ihl : 4 ;
   __u8 version : 4 ;
   __u8 tos ;
   __be16 tot_len ;
   __be16 id ;
   __be16 frag_off ;
   __u8 ttl ;
   __u8 protocol ;
   __sum16 check ;
   __be32 saddr ;
   __be32 daddr ;
};
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/page_counter.h"
struct page_counter {
   atomic_long_t usage ;
   unsigned long min ;
   unsigned long low ;
   unsigned long max ;
   struct page_counter *parent ;
   unsigned long emin ;
   atomic_long_t min_usage ;
   atomic_long_t children_min_usage ;
   unsigned long elow ;
   atomic_long_t low_usage ;
   atomic_long_t children_low_usage ;
   unsigned long watermark ;
   unsigned long failcnt ;
};
#line 66 
struct eventfd_ctx;
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/vmpressure.h"
struct vmpressure {
   unsigned long scanned ;
   unsigned long reclaimed ;
   unsigned long tree_scanned ;
   unsigned long tree_reclaimed ;
   spinlock_t sr_lock ;
   struct list_head events ;
   struct mutex events_lock ;
   struct work_struct work ;
};
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/flex_proportions.h"
struct fprop_global {
   struct percpu_counter events ;
   unsigned int period ;
   seqcount_t sequence ;
};
#line 76  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/flex_proportions.h"
struct fprop_local_percpu {
   struct percpu_counter events ;
   unsigned int period ;
   raw_spinlock_t lock ;
};
#line 116  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/flex_proportions.h"
typedef int congested_fn(void *, int );
#line 45  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backing-dev-defs.h"
enum wb_reason {
    WB_REASON_BACKGROUND = 0,
    WB_REASON_VMSCAN = 1,
    WB_REASON_SYNC = 2,
    WB_REASON_PERIODIC = 3,
    WB_REASON_LAPTOP_TIMER = 4,
    WB_REASON_FREE_MORE_MEM = 5,
    WB_REASON_FS_FREE_SPACE = 6,
    WB_REASON_FORKER_THREAD = 7,
    WB_REASON_FOREIGN_FLUSH = 8,
    WB_REASON_MAX = 9
};
#line 71  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backing-dev-defs.h"
struct wb_completion {
   atomic_t cnt ;
   wait_queue_head_t *waitq ;
};
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backing-dev-defs.h"
struct bdi_writeback_congested {
   unsigned long state ;
   refcount_t refcnt ;
   struct backing_dev_info *__bdi ;
   int blkcg_id ;
   struct rb_node rb_node ;
};
#line 130  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backing-dev-defs.h"
union __anonunion_703 {
   struct work_struct release_work ;
   struct callback_head rcu ;
};
#line 130  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backing-dev-defs.h"
struct bdi_writeback {
   struct backing_dev_info *bdi ;
   unsigned long state ;
   unsigned long last_old_flush ;
   struct list_head b_dirty ;
   struct list_head b_io ;
   struct list_head b_more_io ;
   struct list_head b_dirty_time ;
   spinlock_t list_lock ;
   struct percpu_counter stat[4U] ;
   struct bdi_writeback_congested *congested ;
   unsigned long bw_time_stamp ;
   unsigned long dirtied_stamp ;
   unsigned long written_stamp ;
   unsigned long write_bandwidth ;
   unsigned long avg_write_bandwidth ;
   unsigned long dirty_ratelimit ;
   unsigned long balanced_dirty_ratelimit ;
   struct fprop_local_percpu completions ;
   int dirty_exceeded ;
   enum wb_reason start_all_reason ;
   spinlock_t work_lock ;
   struct list_head work_list ;
   struct delayed_work dwork ;
   unsigned long dirty_sleep ;
   struct list_head bdi_node ;
   struct percpu_ref refcnt ;
   struct fprop_local_percpu memcg_completions ;
   struct cgroup_subsys_state *memcg_css ;
   struct cgroup_subsys_state *blkcg_css ;
   struct list_head memcg_node ;
   struct list_head blkcg_node ;
   union __anonunion_703 __anonCompField_bdi_writeback_162 ;
};
#line 188  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backing-dev-defs.h"
struct backing_dev_info {
   u64 id ;
   struct rb_node rb_node ;
   struct list_head bdi_list ;
   unsigned long ra_pages ;
   unsigned long io_pages ;
   congested_fn *congested_fn ;
   void *congested_data ;
   char *name ;
   struct kref refcnt ;
   unsigned int capabilities ;
   unsigned int min_ratio ;
   unsigned int max_ratio ;
   unsigned int max_prop_frac ;
   atomic_long_t tot_write_bandwidth ;
   struct bdi_writeback wb ;
   struct list_head wb_list ;
   struct xarray cgwb_tree ;
   struct rb_root cgwb_congested_tree ;
   struct mutex cgwb_release_mutex ;
   struct rw_semaphore wb_switch_rwsem ;
   wait_queue_head_t wb_waitq ;
   struct device *dev ;
   struct device *owner ;
   struct timer_list laptop_mode_wb_timer ;
   struct dentry *debug_dir ;
};
#line 306 
struct bio_set;
#line 307 
struct bio_integrity_payload;
#line 308  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backing-dev-defs.h"
typedef void bio_end_io_t(struct bio *);
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk_types.h"
typedef u8 blk_status_t;
#line 112  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk_types.h"
struct bio_issue {
   u64 value ;
};
#line 144 
struct blkcg_gq;
#line 144  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk_types.h"
union __anonunion_704 {
   struct bio_integrity_payload *bi_integrity ;
};
#line 144  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk_types.h"
struct bio {
   struct bio *bi_next ;
   struct gendisk *bi_disk ;
   unsigned int bi_opf ;
   unsigned short bi_flags ;
   unsigned short bi_ioprio ;
   unsigned short bi_write_hint ;
   blk_status_t bi_status ;
   u8 bi_partno ;
   atomic_t __bi_remaining ;
   struct bvec_iter bi_iter ;
   bio_end_io_t *bi_end_io ;
   void *bi_private ;
   struct blkcg_gq *bi_blkg ;
   struct bio_issue bi_issue ;
   u64 bi_iocost_cost ;
   union __anonunion_704 __anonCompField_bio_163 ;
   unsigned short bi_vcnt ;
   unsigned short bi_max_vecs ;
   atomic_t __bi_cnt ;
   struct bio_vec *bi_io_vec ;
   struct bio_set *bi_pool ;
   struct bio_vec bi_inline_vecs[0U] ;
};
#line 452  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk_types.h"
typedef unsigned int blk_qc_t;
#line 479  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk_types.h"
struct blk_rq_stat {
   u64 mean ;
   u64 min ;
   u64 max ;
   u32 nr_samples ;
   u64 batch ;
};
#line 86  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/genhd.h"
struct disk_stats {
   u64 nsecs[4U] ;
   unsigned long sectors[4U] ;
   unsigned long ios[4U] ;
   unsigned long merges[4U] ;
   unsigned long io_ticks ;
   unsigned long time_in_queue ;
   local_t in_flight[2U] ;
};
#line 103  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/genhd.h"
struct partition_meta_info {
   char uuid[37U] ;
   u8 volname[64U] ;
};
#line 108  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/genhd.h"
struct hd_struct {
   sector_t start_sect ;
   sector_t nr_sects ;
   seqcount_t nr_sects_seq ;
   sector_t alignment_offset ;
   unsigned int discard_alignment ;
   struct device __dev ;
   struct kobject *holder_dir ;
   int policy ;
   int partno ;
   struct partition_meta_info *info ;
   int make_it_fail ;
   unsigned long stamp ;
   struct disk_stats *dkstats ;
   struct percpu_ref ref ;
   struct rcu_work rcu_work ;
};
#line 160  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/genhd.h"
struct disk_part_tbl {
   struct callback_head callback_head ;
   int len ;
   struct hd_struct *last_lookup ;
   struct hd_struct *part[] ;
};
#line 166 
struct disk_events;
#line 167 
struct badblocks;
#line 172 
struct blk_integrity_profile;
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/genhd.h"
struct blk_integrity {
   struct blk_integrity_profile *profile ;
   unsigned char flags ;
   unsigned char tuple_size ;
   unsigned char interval_exp ;
   unsigned char tag_size ;
};
#line 182 
struct timer_rand_state;
#line 182  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/genhd.h"
struct gendisk {
   int major ;
   int first_minor ;
   int minors ;
   char disk_name[32U] ;
   char *(*devnode)(struct gendisk *, umode_t *) ;
   unsigned short events ;
   unsigned short event_flags ;
   struct disk_part_tbl *part_tbl ;
   struct hd_struct part0 ;
   struct block_device_operations *fops ;
   struct request_queue *queue ;
   void *private_data ;
   int flags ;
   struct rw_semaphore lookup_sem ;
   struct kobject *slave_dir ;
   struct timer_rand_state *random ;
   atomic_t sync_io ;
   struct disk_events *ev ;
   struct kobject integrity_kobj ;
   int node_id ;
   struct badblocks *bb ;
   struct lockdep_map lockdep_map ;
};
#line 637  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pagemap.h"
typedef void *mempool_alloc_t(gfp_t , void *);
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mempool.h"
typedef void mempool_free_t(void *, void *);
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mempool.h"
struct mempool_s {
   spinlock_t lock ;
   int min_nr ;
   int curr_nr ;
   void **elements ;
   void *pool_data ;
   mempool_alloc_t *alloc ;
   mempool_free_t *free ;
   wait_queue_head_t wait ;
};
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mempool.h"
typedef struct mempool_s mempool_t;
#line 307  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bio.h"
struct bio_integrity_payload {
   struct bio *bip_bio ;
   struct bvec_iter bip_iter ;
   unsigned short bip_slab ;
   unsigned short bip_vcnt ;
   unsigned short bip_max_vcnt ;
   unsigned short bip_flags ;
   struct bvec_iter bio_iter ;
   struct work_struct bip_work ;
   struct bio_vec *bip_vec ;
   struct bio_vec bip_inline_vecs[0U] ;
};
#line 575  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bio.h"
struct bio_list {
   struct bio *head ;
   struct bio *tail ;
};
#line 703  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bio.h"
struct bio_set {
   struct kmem_cache *bio_slab ;
   unsigned int front_pad ;
   mempool_t bio_pool ;
   mempool_t bvec_pool ;
   mempool_t bio_integrity_pool ;
   mempool_t bvec_integrity_pool ;
   spinlock_t rescue_lock ;
   struct bio_list rescue_list ;
   struct work_struct rescue_work ;
   struct workqueue_struct *rescue_workqueue ;
};
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bsg.h"
struct sg_io_v4 {
   __s32 guard ;
   __u32 protocol ;
   __u32 subprotocol ;
   __u32 request_len ;
   __u64 request ;
   __u64 request_tag ;
   __u32 request_attr ;
   __u32 request_priority ;
   __u32 request_extra ;
   __u32 max_response_len ;
   __u64 response ;
   __u32 dout_iovec_count ;
   __u32 dout_xfer_len ;
   __u32 din_iovec_count ;
   __u32 din_xfer_len ;
   __u64 dout_xferp ;
   __u64 din_xferp ;
   __u32 timeout ;
   __u32 flags ;
   __u64 usr_ptr ;
   __u32 spare_in ;
   __u32 driver_status ;
   __u32 transport_status ;
   __u32 device_status ;
   __u32 retry_delay ;
   __u32 info ;
   __u32 duration ;
   __u32 response_len ;
   __s32 din_resid ;
   __s32 dout_resid ;
   __u64 generated_tag ;
   __u32 spare_out ;
   __u32 padding ;
};
#line 65 
struct request;
#line 10  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bsg.h"
struct bsg_ops {
   int (*check_proto)(struct sg_io_v4 *) ;
   int (*fill_hdr)(struct request *, struct sg_io_v4 *, fmode_t ) ;
   int (*complete_rq)(struct request *, struct sg_io_v4 *) ;
   void (*free_rq)(struct request *) ;
};
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bsg.h"
struct bsg_class_device {
   struct device *class_dev ;
   int minor ;
   struct request_queue *queue ;
   struct bsg_ops *ops ;
};
#line 94  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/blkzoned.h"
struct blk_zone {
   __u64 start ;
   __u64 len ;
   __u64 wp ;
   __u8 type ;
   __u8 cond ;
   __u8 non_seq ;
   __u8 reset ;
   __u8 reserved[36U] ;
};
#line 134 
struct elevator_queue;
#line 135 
struct blk_trace;
#line 138 
struct blk_flush_queue;
#line 139 
struct pr_ops;
#line 140 
struct rq_qos;
#line 141 
struct blk_queue_stats;
#line 142 
struct blk_stat_callback;
#line 143  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/blkzoned.h"
typedef void rq_end_io_fn(struct request *, blk_status_t );
#line 63  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
typedef __u32 req_flags_t;
#line 67 
enum mq_rq_state {
    MQ_RQ_IDLE = 0,
    MQ_RQ_IN_FLIGHT = 1,
    MQ_RQ_COMPLETE = 2
};
#line 132 
struct blk_mq_ctx;
#line 132 
struct blk_mq_hw_ctx;
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
union __anonunion_707 {
   struct hlist_node hash ;
   struct list_head ipi_list ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
union __anonunion_708 {
   struct rb_node rb_node ;
   struct bio_vec special_vec ;
   void *completion_data ;
   int error_count ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
struct __anonstruct_elv_710 {
   struct io_cq *icq ;
   void *priv[2U] ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
struct __anonstruct_flush_711 {
   unsigned int seq ;
   struct list_head list ;
   rq_end_io_fn *saved_end_io ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
union __anonunion_709 {
   struct __anonstruct_elv_710 elv ;
   struct __anonstruct_flush_711 flush ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
union __anonunion_712 {
   struct __call_single_data csd ;
   u64 fifo_time ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
struct request {
   struct request_queue *q ;
   struct blk_mq_ctx *mq_ctx ;
   struct blk_mq_hw_ctx *mq_hctx ;
   unsigned int cmd_flags ;
   req_flags_t rq_flags ;
   int tag ;
   int internal_tag ;
   unsigned int __data_len ;
   sector_t __sector ;
   struct bio *bio ;
   struct bio *biotail ;
   struct list_head queuelist ;
   union __anonunion_707 __anonCompField_request_164 ;
   union __anonunion_708 __anonCompField_request_165 ;
   union __anonunion_709 __anonCompField_request_166 ;
   struct gendisk *rq_disk ;
   struct hd_struct *part ;
   u64 alloc_time_ns ;
   u64 start_time_ns ;
   u64 io_start_time_ns ;
   unsigned short wbt_flags ;
   unsigned short stats_sectors ;
   unsigned short nr_phys_segments ;
   unsigned short nr_integrity_segments ;
   unsigned short write_hint ;
   unsigned short ioprio ;
   unsigned int extra_len ;
   enum mq_rq_state state ;
   refcount_t ref ;
   unsigned int timeout ;
   unsigned long deadline ;
   union __anonunion_712 __anonCompField_request_167 ;
   rq_end_io_fn *end_io ;
   void *end_io_data ;
};
#line 285 
struct elevator_type;
#line 286 
struct blk_mq_debugfs_attr;
#line 287 
enum elv_merge {
    ELEVATOR_NO_MERGE = 0,
    ELEVATOR_FRONT_MERGE = 1,
    ELEVATOR_BACK_MERGE = 2,
    ELEVATOR_DISCARD_MERGE = 3
};
#line 294 
struct blk_mq_alloc_data;
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/elevator.h"
struct elevator_mq_ops {
   int (*init_sched)(struct request_queue *, struct elevator_type *) ;
   void (*exit_sched)(struct elevator_queue *) ;
   int (*init_hctx)(struct blk_mq_hw_ctx *, unsigned int ) ;
   void (*exit_hctx)(struct blk_mq_hw_ctx *, unsigned int ) ;
   void (*depth_updated)(struct blk_mq_hw_ctx *) ;
   bool (*allow_merge)(struct request_queue *, struct request *, struct bio *) ;
   bool (*bio_merge)(struct blk_mq_hw_ctx *, struct bio *, unsigned int ) ;
   int (*request_merge)(struct request_queue *, struct request **, struct bio *) ;
   void (*request_merged)(struct request_queue *, struct request *, enum elv_merge ) ;
   void (*requests_merged)(struct request_queue *, struct request *, struct request *) ;
   void (*limit_depth)(unsigned int , struct blk_mq_alloc_data *) ;
   void (*prepare_request)(struct request *, struct bio *) ;
   void (*finish_request)(struct request *) ;
   void (*insert_requests)(struct blk_mq_hw_ctx *, struct list_head *, bool ) ;
   struct request *(*dispatch_request)(struct blk_mq_hw_ctx *) ;
   bool (*has_work)(struct blk_mq_hw_ctx *) ;
   void (*completed_request)(struct request *, u64 ) ;
   void (*requeue_request)(struct request *) ;
   struct request *(*former_request)(struct request_queue *, struct request *) ;
   struct request *(*next_request)(struct request_queue *, struct request *) ;
   void (*init_icq)(struct io_cq *) ;
   void (*exit_icq)(struct io_cq *) ;
};
#line 57  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/elevator.h"
struct elv_fs_entry {
   struct attribute attr ;
   ssize_t (*show)(struct elevator_queue *, char *) ;
   ssize_t (*store)(struct elevator_queue *, char *, size_t ) ;
};
#line 66  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/elevator.h"
struct elevator_type {
   struct kmem_cache *icq_cache ;
   struct elevator_mq_ops ops ;
   size_t icq_size ;
   size_t icq_align ;
   struct elv_fs_entry *elevator_attrs ;
   char *elevator_name ;
   char *elevator_alias ;
   unsigned int elevator_features ;
   struct module *elevator_owner ;
   struct blk_mq_debugfs_attr *queue_debugfs_attrs ;
   struct blk_mq_debugfs_attr *hctx_debugfs_attrs ;
   char icq_cache_name[22U] ;
   struct list_head list ;
};
#line 101  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/elevator.h"
struct elevator_queue {
   struct elevator_type *type ;
   void *elevator_data ;
   struct kobject kobj ;
   struct mutex sysfs_lock ;
   unsigned int registered : 1 ;
   struct hlist_head hash[64U] ;
};
#line 153  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/elevator.h"
typedef blk_qc_t make_request_fn(struct request_queue *, struct bio *);
#line 291  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
typedef int dma_drain_needed_fn(struct request *);
#line 304 
enum blk_zoned_model {
    BLK_ZONED_NONE = 0,
    BLK_ZONED_HA = 1,
    BLK_ZONED_HM = 2
};
#line 320  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
struct queue_limits {
   unsigned long bounce_pfn ;
   unsigned long seg_boundary_mask ;
   unsigned long virt_boundary_mask ;
   unsigned int max_hw_sectors ;
   unsigned int max_dev_sectors ;
   unsigned int chunk_sectors ;
   unsigned int max_sectors ;
   unsigned int max_segment_size ;
   unsigned int physical_block_size ;
   unsigned int logical_block_size ;
   unsigned int alignment_offset ;
   unsigned int io_min ;
   unsigned int io_opt ;
   unsigned int max_discard_sectors ;
   unsigned int max_hw_discard_sectors ;
   unsigned int max_write_same_sectors ;
   unsigned int max_write_zeroes_sectors ;
   unsigned int discard_granularity ;
   unsigned int discard_alignment ;
   unsigned short max_segments ;
   unsigned short max_integrity_segments ;
   unsigned short max_discard_segments ;
   unsigned char misaligned ;
   unsigned char discard_misaligned ;
   unsigned char raid_partial_stripes_expensive ;
   enum blk_zoned_model zoned ;
};
#line 394 
struct blk_mq_ops;
#line 394 
struct throtl_data;
#line 394 
struct blk_mq_tag_set;
#line 394  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
struct request_queue {
   struct request *last_merge ;
   struct elevator_queue *elevator ;
   struct blk_queue_stats *stats ;
   struct rq_qos *rq_qos ;
   make_request_fn *make_request_fn ;
   dma_drain_needed_fn *dma_drain_needed ;
   struct blk_mq_ops *mq_ops ;
   struct blk_mq_ctx *queue_ctx ;
   unsigned int queue_depth ;
   struct blk_mq_hw_ctx **queue_hw_ctx ;
   unsigned int nr_hw_queues ;
   struct backing_dev_info *backing_dev_info ;
   void *queuedata ;
   unsigned long queue_flags ;
   atomic_t pm_only ;
   int id ;
   gfp_t bounce_gfp ;
   spinlock_t queue_lock ;
   struct kobject kobj ;
   struct kobject *mq_kobj ;
   struct blk_integrity integrity ;
   struct device *dev ;
   int rpm_status ;
   unsigned int nr_pending ;
   unsigned long nr_requests ;
   unsigned int dma_drain_size ;
   void *dma_drain_buffer ;
   unsigned int dma_pad_mask ;
   unsigned int dma_alignment ;
   unsigned int rq_timeout ;
   int poll_nsec ;
   struct blk_stat_callback *poll_cb ;
   struct blk_rq_stat poll_stat[16U] ;
   struct timer_list timeout ;
   struct work_struct timeout_work ;
   struct list_head icq_list ;
   unsigned long blkcg_pols[1U] ;
   struct blkcg_gq *root_blkg ;
   struct list_head blkg_list ;
   struct queue_limits limits ;
   unsigned int required_elevator_features ;
   unsigned int nr_zones ;
   unsigned long *conv_zones_bitmap ;
   unsigned long *seq_zones_wlock ;
   unsigned int sg_timeout ;
   unsigned int sg_reserved_size ;
   int node ;
   struct blk_trace *blk_trace ;
   struct mutex blk_trace_mutex ;
   struct blk_flush_queue *fq ;
   struct list_head requeue_list ;
   spinlock_t requeue_lock ;
   struct delayed_work requeue_work ;
   struct mutex sysfs_lock ;
   struct mutex sysfs_dir_lock ;
   struct list_head unused_hctx_list ;
   spinlock_t unused_hctx_lock ;
   int mq_freeze_depth ;
   struct bsg_class_device bsg_dev ;
   struct throtl_data *td ;
   struct callback_head callback_head ;
   wait_queue_head_t mq_freeze_wq ;
   struct mutex mq_freeze_lock ;
   struct percpu_ref q_usage_counter ;
   struct blk_mq_tag_set *tag_set ;
   struct list_head tag_set_list ;
   struct bio_set bio_split ;
   struct dentry *debugfs_dir ;
   struct dentry *sched_debugfs_dir ;
   struct dentry *rqos_debugfs_dir ;
   bool mq_sysfs_init_done ;
   size_t cmd_size ;
   struct work_struct release_work ;
   u64 write_hints[5U] ;
};
#line 1160  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
struct blk_plug {
   struct list_head mq_list ;
   struct list_head cb_list ;
   unsigned short rq_count ;
   bool multiple_queues ;
};
#line 1514  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
struct blk_integrity_iter {
   void *prot_buf ;
   void *data_buf ;
   sector_t seed ;
   unsigned int data_size ;
   unsigned short interval ;
   char *disk_name ;
};
#line 1522  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
typedef blk_status_t integrity_processing_fn(struct blk_integrity_iter *);
#line 1524  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
typedef void integrity_prepare_fn(struct request *);
#line 1525  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
typedef void integrity_complete_fn(struct request *, unsigned int );
#line 1527  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
struct blk_integrity_profile {
   integrity_processing_fn *generate_fn ;
   integrity_processing_fn *verify_fn ;
   integrity_prepare_fn *prepare_fn ;
   integrity_complete_fn *complete_fn ;
   char *name ;
};
#line 1693  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
struct block_device_operations {
   int (*open)(struct block_device *, fmode_t ) ;
   void (*release)(struct gendisk *, fmode_t ) ;
   int (*rw_page)(struct block_device *, sector_t , struct page *, unsigned int ) ;
   int (*ioctl)(struct block_device *, fmode_t , unsigned int , unsigned long ) ;
   int (*compat_ioctl)(struct block_device *, fmode_t , unsigned int , unsigned long ) ;
   unsigned int (*check_events)(struct gendisk *, unsigned int ) ;
   int (*media_changed)(struct gendisk *) ;
   void (*unlock_native_capacity)(struct gendisk *) ;
   int (*revalidate_disk)(struct gendisk *) ;
   int (*getgeo)(struct block_device *, struct hd_geometry *) ;
   void (*swap_slot_free_notify)(struct block_device *, unsigned long ) ;
   int (*report_zones)(struct gendisk *, sector_t , unsigned int , int (*)(struct blk_zone *, unsigned int , void *), void *) ;
   struct module *owner ;
   struct pr_ops *pr_ops ;
};
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk-cgroup.h"
struct blkcg_policy_data;
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk-cgroup.h"
struct blkcg {
   struct cgroup_subsys_state css ;
   spinlock_t lock ;
   struct xarray blkg_tree ;
   struct blkcg_gq *blkg_hint ;
   struct hlist_head blkg_list ;
   struct blkcg_policy_data *cpd[5U] ;
   struct list_head all_blkcgs_node ;
   struct list_head cgwb_list ;
   refcount_t cgwb_refcnt ;
};
#line 63  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk-cgroup.h"
struct blkg_iostat {
   u64 bytes[3U] ;
   u64 ios[3U] ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk-cgroup.h"
struct blkg_iostat_set {
   struct u64_stats_sync sync ;
   struct blkg_iostat cur ;
   struct blkg_iostat last ;
};
#line 85  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk-cgroup.h"
struct blkg_policy_data {
   struct blkcg_gq *blkg ;
   int plid ;
};
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk-cgroup.h"
struct blkcg_policy_data {
   struct blkcg *blkcg ;
   int plid ;
};
#line 105  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk-cgroup.h"
struct blkcg_gq {
   struct request_queue *q ;
   struct list_head q_node ;
   struct hlist_node blkcg_node ;
   struct blkcg *blkcg ;
   struct bdi_writeback_congested *wb_congested ;
   struct blkcg_gq *parent ;
   struct percpu_ref refcnt ;
   bool online ;
   struct blkg_iostat_set *iostat_cpu ;
   struct blkg_iostat_set iostat ;
   struct blkg_policy_data *pd[5U] ;
   spinlock_t async_bio_lock ;
   struct bio_list async_bios ;
   struct work_struct async_bio_work ;
   atomic_t use_delay ;
   atomic64_t delay_nsec ;
   atomic64_t delay_start ;
   u64 last_delay ;
   int last_use ;
   struct callback_head callback_head ;
};
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/writeback.h"
enum writeback_sync_modes {
    WB_SYNC_NONE = 0,
    WB_SYNC_ALL = 1
};
#line 51  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/writeback.h"
struct writeback_control {
   long nr_to_write ;
   long pages_skipped ;
   loff_t range_start ;
   loff_t range_end ;
   enum writeback_sync_modes sync_mode ;
   unsigned int for_kupdate : 1 ;
   unsigned int for_background : 1 ;
   unsigned int tagged_writepages : 1 ;
   unsigned int for_reclaim : 1 ;
   unsigned int range_cyclic : 1 ;
   unsigned int for_sync : 1 ;
   unsigned int no_cgroup_owner : 1 ;
   unsigned int punt_to_cgroup : 1 ;
   struct bdi_writeback *wb ;
   struct inode *inode ;
   int wb_id ;
   int wb_lcand_id ;
   int wb_tcand_id ;
   size_t wb_bytes ;
   size_t wb_lcand_bytes ;
   size_t wb_tcand_bytes ;
};
#line 129  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/writeback.h"
struct wb_domain {
   spinlock_t lock ;
   struct fprop_global completions ;
   struct timer_list period_timer ;
   unsigned long period_time ;
   unsigned long dirty_limit_tstamp ;
   unsigned long dirty_limit ;
};
#line 69  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct mem_cgroup_id {
   int id ;
   refcount_t ref ;
};
#line 86  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct memcg_vmstats_percpu {
   long stat[38U] ;
   unsigned long events[91U] ;
   unsigned long nr_page_events ;
   unsigned long targets[2U] ;
};
#line 93  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct mem_cgroup_reclaim_iter {
   struct mem_cgroup *position ;
   unsigned int generation ;
};
#line 99  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct lruvec_stat {
   long count[32U] ;
};
#line 107  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct memcg_shrinker_map {
   struct callback_head rcu ;
   unsigned long map[0U] ;
};
#line 115  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct mem_cgroup_per_node {
   struct lruvec lruvec ;
   struct lruvec_stat *lruvec_stat_local ;
   struct lruvec_stat *lruvec_stat_cpu ;
   atomic_long_t lruvec_stat[32U] ;
   unsigned long lru_zone_size[5U][5U] ;
   struct mem_cgroup_reclaim_iter iter ;
   struct memcg_shrinker_map *shrinker_map ;
   struct rb_node tree_node ;
   unsigned long usage_in_excess ;
   bool on_tree ;
   struct mem_cgroup *memcg ;
};
#line 139  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct mem_cgroup_threshold {
   struct eventfd_ctx *eventfd ;
   unsigned long threshold ;
};
#line 145  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct mem_cgroup_threshold_ary {
   int current_threshold ;
   unsigned int size ;
   struct mem_cgroup_threshold entries[0U] ;
};
#line 154  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct mem_cgroup_thresholds {
   struct mem_cgroup_threshold_ary *primary ;
   struct mem_cgroup_threshold_ary *spare ;
};
#line 164 
enum memcg_kmem_state {
    KMEM_NONE = 0,
    KMEM_ALLOCATED = 1,
    KMEM_ONLINE = 2
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct memcg_padding {
   char x[0U] ;
} __attribute__((__aligned__(4096)));
#line 190  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct memcg_cgwb_frn {
   u64 bdi_id ;
   int memcg_id ;
   u64 at ;
   struct wb_completion done ;
};
#line 203  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct mem_cgroup {
   struct cgroup_subsys_state css ;
   struct mem_cgroup_id id ;
   struct page_counter memory ;
   struct page_counter swap ;
   struct page_counter memsw ;
   struct page_counter kmem ;
   struct page_counter tcpmem ;
   unsigned long high ;
   struct work_struct high_work ;
   unsigned long soft_limit ;
   struct vmpressure vmpressure ;
   bool use_hierarchy ;
   bool oom_group ;
   bool oom_lock ;
   int under_oom ;
   int swappiness ;
   int oom_kill_disable ;
   struct cgroup_file events_file ;
   struct cgroup_file events_local_file ;
   struct cgroup_file swap_events_file ;
   struct mutex thresholds_lock ;
   struct mem_cgroup_thresholds thresholds ;
   struct mem_cgroup_thresholds memsw_thresholds ;
   struct list_head oom_notify ;
   unsigned long move_charge_at_immigrate ;
   spinlock_t move_lock ;
   unsigned long move_lock_flags ;
   struct memcg_padding _pad1_ ;
   atomic_t moving_account ;
   struct task_struct *move_lock_task ;
   struct memcg_vmstats_percpu *vmstats_local ;
   struct memcg_vmstats_percpu *vmstats_percpu ;
   struct memcg_padding _pad2_ ;
   atomic_long_t vmstats[38U] ;
   atomic_long_t vmevents[91U] ;
   atomic_long_t memory_events[7U] ;
   atomic_long_t memory_events_local[7U] ;
   unsigned long socket_pressure ;
   bool tcpmem_active ;
   int tcpmem_pressure ;
   int kmemcg_id ;
   enum memcg_kmem_state kmem_state ;
   struct list_head kmem_caches ;
   struct list_head cgwb_list ;
   struct wb_domain cgwb_domain ;
   struct memcg_cgwb_frn cgwb_frn[4U] ;
   struct list_head event_list ;
   spinlock_t event_list_lock ;
   struct deferred_split deferred_split_queue ;
   struct mem_cgroup_per_node *nodeinfo[0U] ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/gen_stats.h"
struct gnet_stats_queue {
   __u32 qlen ;
   __u32 backlog ;
   __u32 drops ;
   __u32 requeues ;
   __u32 overlimits ;
};
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/gen_stats.h"
struct gnet_stats_basic_packed {
   __u64 bytes ;
   __u64 packets ;
};
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/gen_stats.h"
struct gnet_stats_basic_cpu {
   struct gnet_stats_basic_packed bstats ;
   struct u64_stats_sync syncp ;
} __attribute__((__aligned__(16)));
#line 20 
struct net_rate_estimator;
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/gen_stats.h"
struct gnet_dump {
   spinlock_t *lock ;
   struct sk_buff *skb ;
   struct nlattr *tail ;
   int compat_tc_stats ;
   int compat_xstats ;
   int padattr ;
   void *xstats ;
   int xstats_len ;
   struct tc_stats tc_stats ;
};
#line 291  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netlink.h"
struct __anonstruct_729 {
   s16 min ;
   s16 max ;
};
#line 291  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netlink.h"
union __anonunion_728 {
   void *validation_data ;
   struct __anonstruct_729 __anonCompField___anonunion_728_168 ;
   int (*validate)(struct nlattr *, struct netlink_ext_ack *) ;
   u16 strict_start_type ;
};
#line 291  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netlink.h"
struct nla_policy {
   u8 type ;
   u8 validation_type ;
   u16 len ;
   union __anonunion_728 __anonCompField_nla_policy_169 ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/rtnetlink.h"
struct rtnl_link_ops {
   struct list_head list ;
   char *kind ;
   size_t priv_size ;
   void (*setup)(struct net_device *) ;
   unsigned int maxtype ;
   struct nla_policy *policy ;
   int (*validate)(struct nlattr **, struct nlattr **, struct netlink_ext_ack *) ;
   int (*newlink)(struct net *, struct net_device *, struct nlattr **, struct nlattr **, struct netlink_ext_ack *) ;
   int (*changelink)(struct net_device *, struct nlattr **, struct nlattr **, struct netlink_ext_ack *) ;
   void (*dellink)(struct net_device *, struct list_head *) ;
   size_t (*get_size)(struct net_device *) ;
   int (*fill_info)(struct sk_buff *, struct net_device *) ;
   size_t (*get_xstats_size)(struct net_device *) ;
   int (*fill_xstats)(struct sk_buff *, struct net_device *) ;
   unsigned int (*get_num_tx_queues)(void) ;
   unsigned int (*get_num_rx_queues)(void) ;
   unsigned int slave_maxtype ;
   struct nla_policy *slave_policy ;
   int (*slave_changelink)(struct net_device *, struct net_device *, struct nlattr **, struct nlattr **, struct netlink_ext_ack *) ;
   size_t (*get_slave_size)(struct net_device *, struct net_device *) ;
   int (*fill_slave_info)(struct sk_buff *, struct net_device *, struct net_device *) ;
   struct net *(*get_link_net)(struct net_device *) ;
   size_t (*get_linkxstats_size)(struct net_device *, int ) ;
   int (*fill_linkxstats)(struct sk_buff *, struct net_device *, int *, int ) ;
};
#line 173  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jhash.h"
struct rhash_lock_head {
   };
#line 76  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rhashtable.h"
struct bucket_table {
   unsigned int size ;
   unsigned int nest ;
   u32 hash_rnd ;
   struct list_head walkers ;
   struct callback_head rcu ;
   struct bucket_table *future_tbl ;
   struct lockdep_map dep_map ;
   struct rhash_lock_head *buckets[] ;
};
#line 281  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow_offload.h"
struct flow_block {
   struct list_head cb_list ;
};
#line 298  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow_offload.h"
typedef int flow_setup_cb_t(enum tc_setup_type , void *, void *);
#line 412 
struct Qdisc_ops;
#line 413 
struct qdisc_walker;
#line 414 
struct tcf_walker;
#line 41  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct qdisc_size_table {
   struct callback_head rcu ;
   struct list_head list ;
   struct tc_sizespec szopts ;
   int refcnt ;
   u16 data[] ;
};
#line 50  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct qdisc_skb_head {
   struct sk_buff *head ;
   struct sk_buff *tail ;
   __u32 qlen ;
   spinlock_t lock ;
};
#line 57  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct Qdisc {
   int (*enqueue)(struct sk_buff *, struct Qdisc *, struct sk_buff **) ;
   struct sk_buff *(*dequeue)(struct Qdisc *) ;
   unsigned int flags ;
   u32 limit ;
   struct Qdisc_ops *ops ;
   struct qdisc_size_table *stab ;
   struct hlist_node hash ;
   u32 handle ;
   u32 parent ;
   struct netdev_queue *dev_queue ;
   struct net_rate_estimator *rate_est ;
   struct gnet_stats_basic_cpu *cpu_bstats ;
   struct gnet_stats_queue *cpu_qstats ;
   int padded ;
   refcount_t refcnt ;
   struct sk_buff_head gso_skb ;
   struct qdisc_skb_head q ;
   struct gnet_stats_basic_packed bstats ;
   seqcount_t running ;
   struct gnet_stats_queue qstats ;
   unsigned long state ;
   struct Qdisc *next_sched ;
   struct sk_buff_head skb_bad_txq ;
   spinlock_t busylock ;
   spinlock_t seqlock ;
   bool empty ;
   struct callback_head rcu ;
};
#line 195 
struct tcf_block;
#line 195  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct Qdisc_class_ops {
   unsigned int flags ;
   struct netdev_queue *(*select_queue)(struct Qdisc *, struct tcmsg *) ;
   int (*graft)(struct Qdisc *, unsigned long , struct Qdisc *, struct Qdisc **, struct netlink_ext_ack *) ;
   struct Qdisc *(*leaf)(struct Qdisc *, unsigned long ) ;
   void (*qlen_notify)(struct Qdisc *, unsigned long ) ;
   unsigned long (*find)(struct Qdisc *, u32 ) ;
   int (*change)(struct Qdisc *, u32 , u32 , struct nlattr **, unsigned long *, struct netlink_ext_ack *) ;
   int (*delete)(struct Qdisc *, unsigned long ) ;
   void (*walk)(struct Qdisc *, struct qdisc_walker *) ;
   struct tcf_block *(*tcf_block)(struct Qdisc *, unsigned long , struct netlink_ext_ack *) ;
   unsigned long (*bind_tcf)(struct Qdisc *, unsigned long , u32 ) ;
   void (*unbind_tcf)(struct Qdisc *, unsigned long ) ;
   int (*dump)(struct Qdisc *, unsigned long , struct sk_buff *, struct tcmsg *) ;
   int (*dump_stats)(struct Qdisc *, unsigned long , struct gnet_dump *) ;
};
#line 235  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct Qdisc_ops {
   struct Qdisc_ops *next ;
   struct Qdisc_class_ops *cl_ops ;
   char id[16U] ;
   int priv_size ;
   unsigned int static_flags ;
   int (*enqueue)(struct sk_buff *, struct Qdisc *, struct sk_buff **) ;
   struct sk_buff *(*dequeue)(struct Qdisc *) ;
   struct sk_buff *(*peek)(struct Qdisc *) ;
   int (*init)(struct Qdisc *, struct nlattr *, struct netlink_ext_ack *) ;
   void (*reset)(struct Qdisc *) ;
   void (*destroy)(struct Qdisc *) ;
   int (*change)(struct Qdisc *, struct nlattr *, struct netlink_ext_ack *) ;
   void (*attach)(struct Qdisc *) ;
   int (*change_tx_queue_len)(struct Qdisc *, unsigned int ) ;
   int (*dump)(struct Qdisc *, struct sk_buff *) ;
   int (*dump_stats)(struct Qdisc *, struct gnet_dump *) ;
   void (*ingress_block_set)(struct Qdisc *, u32 ) ;
   void (*egress_block_set)(struct Qdisc *, u32 ) ;
   u32 (*ingress_block_get)(struct Qdisc *) ;
   u32 (*egress_block_get)(struct Qdisc *) ;
   struct module *owner ;
};
#line 272  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct __anonstruct_803 {
   unsigned long class ;
   u32 classid ;
};
#line 272 
struct tcf_proto;
#line 272  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct __anonstruct_804 {
   bool ingress ;
   struct gnet_stats_queue *qstats ;
};
#line 272  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
union __anonunion_802 {
   struct __anonstruct_803 __anonCompField___anonunion_802_171 ;
   struct tcf_proto *goto_tp ;
   struct __anonstruct_804 __anonCompField___anonunion_802_172 ;
};
#line 272  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct tcf_result {
   union __anonunion_802 __anonCompField_tcf_result_173 ;
};
#line 287 
struct tcf_chain;
#line 290  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct tcf_proto_ops {
   struct list_head head ;
   char kind[16U] ;
   int (*classify)(struct sk_buff *, struct tcf_proto *, struct tcf_result *) ;
   int (*init)(struct tcf_proto *) ;
   void (*destroy)(struct tcf_proto *, bool , struct netlink_ext_ack *) ;
   void *(*get)(struct tcf_proto *, u32 ) ;
   void (*put)(struct tcf_proto *, void *) ;
   int (*change)(struct net *, struct sk_buff *, struct tcf_proto *, unsigned long , u32 , struct nlattr **, void **, bool , bool , struct netlink_ext_ack *) ;
   int (*delete)(struct tcf_proto *, void *, bool *, bool , struct netlink_ext_ack *) ;
   bool (*delete_empty)(struct tcf_proto *) ;
   void (*walk)(struct tcf_proto *, struct tcf_walker *, bool ) ;
   int (*reoffload)(struct tcf_proto *, bool , flow_setup_cb_t *, void *, struct netlink_ext_ack *) ;
   void (*hw_add)(struct tcf_proto *, void *) ;
   void (*hw_del)(struct tcf_proto *, void *) ;
   void (*bind_class)(void *, u32 , unsigned long ) ;
   void *(*tmplt_create)(struct net *, struct tcf_chain *, struct nlattr **, struct netlink_ext_ack *) ;
   void (*tmplt_destroy)(void *) ;
   int (*dump)(struct net *, struct tcf_proto *, void *, struct sk_buff *, struct tcmsg *, bool ) ;
   int (*tmplt_dump)(struct sk_buff *, struct net *, void *) ;
   struct module *owner ;
   int flags ;
};
#line 348  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct tcf_proto {
   struct tcf_proto *next ;
   void *root ;
   int (*classify)(struct sk_buff *, struct tcf_proto *, struct tcf_result *) ;
   __be16 protocol ;
   u32 prio ;
   void *data ;
   struct tcf_proto_ops *ops ;
   struct tcf_chain *chain ;
   spinlock_t lock ;
   bool deleting ;
   refcount_t refcnt ;
   struct callback_head rcu ;
   struct hlist_node destroy_ht_node ;
};
#line 386  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct tcf_chain {
   struct mutex filter_chain_lock ;
   struct tcf_proto *filter_chain ;
   struct list_head list ;
   struct tcf_block *block ;
   u32 index ;
   unsigned int refcnt ;
   unsigned int action_refcnt ;
   bool explicitly_created ;
   bool flushing ;
   struct tcf_proto_ops *tmplt_ops ;
   void *tmplt_priv ;
   struct callback_head rcu ;
};
#line 402  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct __anonstruct_chain0_806 {
   struct tcf_chain *chain ;
   struct list_head filter_chain_list ;
};
#line 402  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct tcf_block {
   struct mutex lock ;
   struct list_head chain_list ;
   u32 index ;
   refcount_t refcnt ;
   struct net *net ;
   struct Qdisc *q ;
   struct rw_semaphore cb_lock ;
   struct flow_block flow_block ;
   struct list_head owner_list ;
   bool keep_dst ;
   atomic_t offloadcnt ;
   unsigned int nooffloaddevcnt ;
   unsigned int lockeddevcnt ;
   struct __anonstruct_chain0_806 chain0 ;
   struct callback_head rcu ;
   struct hlist_head proto_destroy_ht[128U] ;
   struct mutex proto_destroy_lock ;
};
#line 1269  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct mini_Qdisc {
   struct tcf_proto *filter_list ;
   struct gnet_stats_basic_cpu *cpu_bstats ;
   struct gnet_stats_queue *cpu_qstats ;
   struct callback_head rcu ;
};
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/filter.h"
struct sock_filter {
   __u16 code ;
   __u8 jt ;
   __u8 jf ;
   __u32 k ;
};
#line 35 
struct sock_reuseport;
#line 513  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/filter.h"
struct sock_fprog_kern {
   u16 len ;
   struct sock_filter *filter ;
};
#line 526  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/filter.h"
union __anonunion_819 {
   struct sock_filter insns[0U] ;
   struct bpf_insn insnsi[0U] ;
};
#line 526  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/filter.h"
struct bpf_prog {
   u16 pages ;
   u16 jited : 1 ;
   u16 jit_requested : 1 ;
   u16 gpl_compatible : 1 ;
   u16 cb_access : 1 ;
   u16 dst_needed : 1 ;
   u16 blinded : 1 ;
   u16 is_func : 1 ;
   u16 kprobe_override : 1 ;
   u16 has_callchain_buf : 1 ;
   u16 enforce_expected_attach_type : 1 ;
   enum bpf_prog_type type ;
   enum bpf_attach_type expected_attach_type ;
   u32 len ;
   u32 jited_len ;
   u8 tag[8U] ;
   struct bpf_prog_aux *aux ;
   struct sock_fprog_kern *orig_prog ;
   unsigned int (*bpf_func)(void *, struct bpf_insn *) ;
   union __anonunion_819 __anonCompField_bpf_prog_175 ;
};
#line 554  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/filter.h"
struct sk_filter {
   refcount_t refcnt ;
   struct callback_head rcu ;
   struct bpf_prog *prog ;
};
#line 36  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/poll.h"
struct pollfd {
   int fd ;
   short events ;
   short revents ;
};
#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/poll.h"
struct poll_table_struct {
   void (*_qproc)(struct file *, wait_queue_head_t *, struct poll_table_struct *) ;
   __poll_t _key ;
};
#line 70  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/neighbour.h"
struct neigh_table;
#line 70  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/neighbour.h"
struct neigh_parms {
   possible_net_t net ;
   struct net_device *dev ;
   struct list_head list ;
   int (*neigh_setup)(struct neighbour *) ;
   struct neigh_table *tbl ;
   void *sysctl_table ;
   int dead ;
   refcount_t refcnt ;
   struct callback_head callback_head ;
   int reachable_time ;
   int data[13U] ;
   unsigned long data_state[1U] ;
};
#line 112  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/neighbour.h"
struct neigh_statistics {
   unsigned long allocs ;
   unsigned long destroys ;
   unsigned long hash_grows ;
   unsigned long res_failed ;
   unsigned long lookups ;
   unsigned long hits ;
   unsigned long rcv_probes_mcast ;
   unsigned long rcv_probes_ucast ;
   unsigned long periodic_gc_runs ;
   unsigned long forced_gc_runs ;
   unsigned long unres_discards ;
   unsigned long table_fulls ;
};
#line 134 
struct neigh_ops;
#line 134  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/neighbour.h"
struct neighbour {
   struct neighbour *next ;
   struct neigh_table *tbl ;
   struct neigh_parms *parms ;
   unsigned long confirmed ;
   unsigned long updated ;
   rwlock_t lock ;
   refcount_t refcnt ;
   unsigned int arp_queue_len_bytes ;
   struct sk_buff_head arp_queue ;
   struct timer_list timer ;
   unsigned long used ;
   atomic_t probes ;
   __u8 flags ;
   __u8 nud_state ;
   __u8 type ;
   __u8 dead ;
   u8 protocol ;
   seqlock_t ha_lock ;
   unsigned char ha[32U] ;
   struct hh_cache hh ;
   int (*output)(struct neighbour *, struct sk_buff *) ;
   struct neigh_ops *ops ;
   struct list_head gc_list ;
   struct callback_head rcu ;
   struct net_device *dev ;
   u8 primary_key[0U] ;
} __attribute__((__designated_init__));
#line 163  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/neighbour.h"
struct neigh_ops {
   int family ;
   void (*solicit)(struct neighbour *, struct sk_buff *) ;
   void (*error_report)(struct neighbour *, struct sk_buff *) ;
   int (*output)(struct neighbour *, struct sk_buff *) ;
   int (*connected_output)(struct neighbour *, struct sk_buff *) ;
};
#line 171  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/neighbour.h"
struct pneigh_entry {
   struct pneigh_entry *next ;
   possible_net_t net ;
   struct net_device *dev ;
   u8 flags ;
   u8 protocol ;
   u8 key[0U] ;
};
#line 186  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/neighbour.h"
struct neigh_hash_table {
   struct neighbour **hash_buckets ;
   unsigned int hash_shift ;
   __u32 hash_rnd[4U] ;
   struct callback_head rcu ;
};
#line 194  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/neighbour.h"
struct neigh_table {
   int family ;
   unsigned int entry_size ;
   unsigned int key_len ;
   __be16 protocol ;
   __u32 (*hash)(void *, struct net_device *, __u32 *) ;
   bool (*key_eq)(struct neighbour *, void *) ;
   int (*constructor)(struct neighbour *) ;
   int (*pconstructor)(struct pneigh_entry *) ;
   void (*pdestructor)(struct pneigh_entry *) ;
   void (*proxy_redo)(struct sk_buff *) ;
   bool (*allow_add)(struct net_device *, struct netlink_ext_ack *) ;
   char *id ;
   struct neigh_parms parms ;
   struct list_head parms_list ;
   int gc_interval ;
   int gc_thresh1 ;
   int gc_thresh2 ;
   int gc_thresh3 ;
   unsigned long last_flush ;
   struct delayed_work gc_work ;
   struct timer_list proxy_timer ;
   struct sk_buff_head proxy_queue ;
   atomic_t entries ;
   atomic_t gc_entries ;
   struct list_head gc_list ;
   rwlock_t lock ;
   unsigned long last_rand ;
   struct neigh_statistics *stats ;
   struct neigh_hash_table *nht ;
   struct pneigh_entry **phash_buckets ;
};
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/dst.h"
struct lwtunnel_state;
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/dst.h"
struct dst_entry {
   struct net_device *dev ;
   struct dst_ops *ops ;
   unsigned long _metrics ;
   unsigned long expires ;
   struct xfrm_state *xfrm ;
   int (*input)(struct sk_buff *) ;
   int (*output)(struct net *, struct sock *, struct sk_buff *) ;
   unsigned short flags ;
   short obsolete ;
   unsigned short header_len ;
   unsigned short trailer_len ;
   atomic_t __refcnt ;
   int __use ;
   unsigned long lastuse ;
   struct lwtunnel_state *lwtstate ;
   struct callback_head callback_head ;
   short error ;
   short __pad ;
   __u32 tclassid ;
};
#line 62  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/net_tstamp.h"
struct hwtstamp_config {
   int flags ;
   int tx_type ;
   int rx_filter ;
};
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fib_rules.h"
struct fib_rule_hdr {
   __u8 family ;
   __u8 dst_len ;
   __u8 src_len ;
   __u8 tos ;
   __u8 table ;
   __u8 res1 ;
   __u8 res2 ;
   __u8 action ;
   __u32 flags ;
};
#line 38  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fib_rules.h"
struct fib_rule_port_range {
   __u16 start ;
   __u16 end ;
};
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/fib_notifier.h"
struct fib_notifier_ops {
   int family ;
   struct list_head list ;
   unsigned int (*fib_seq_read)(struct net *) ;
   int (*fib_dump)(struct net *, struct notifier_block *, struct netlink_ext_ack *) ;
   struct module *owner ;
   struct callback_head rcu ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/fib_rules.h"
struct fib_kuid_range {
   kuid_t start ;
   kuid_t end ;
};
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/fib_rules.h"
struct fib_rule {
   struct list_head list ;
   int iifindex ;
   int oifindex ;
   u32 mark ;
   u32 mark_mask ;
   u32 flags ;
   u32 table ;
   u8 action ;
   u8 l3mdev ;
   u8 proto ;
   u8 ip_proto ;
   u32 target ;
   __be64 tun_id ;
   struct fib_rule *ctarget ;
   struct net *fr_net ;
   refcount_t refcnt ;
   u32 pref ;
   int suppress_ifgroup ;
   int suppress_prefixlen ;
   char iifname[16U] ;
   char oifname[16U] ;
   struct fib_kuid_range uid_range ;
   struct fib_rule_port_range sport_range ;
   struct fib_rule_port_range dport_range ;
   struct callback_head rcu ;
};
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/fib_rules.h"
struct fib_lookup_arg {
   void *lookup_ptr ;
   void *lookup_data ;
   void *result ;
   struct fib_rule *rule ;
   u32 table ;
   int flags ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/fib_rules.h"
struct fib_rules_ops {
   int family ;
   struct list_head list ;
   int rule_size ;
   int addr_size ;
   int unresolved_rules ;
   int nr_goto_rules ;
   unsigned int fib_rules_seq ;
   int (*action)(struct fib_rule *, struct flowi *, int , struct fib_lookup_arg *) ;
   bool (*suppress)(struct fib_rule *, struct fib_lookup_arg *) ;
   int (*match)(struct fib_rule *, struct flowi *, int ) ;
   int (*configure)(struct fib_rule *, struct sk_buff *, struct fib_rule_hdr *, struct nlattr **, struct netlink_ext_ack *) ;
   int (*delete)(struct fib_rule *) ;
   int (*compare)(struct fib_rule *, struct fib_rule_hdr *, struct nlattr **) ;
   int (*fill)(struct fib_rule *, struct sk_buff *, struct fib_rule_hdr *) ;
   size_t (*nlmsg_payload)(struct fib_rule *) ;
   void (*flush_cache)(struct fib_rules_ops *) ;
   int nlgroup ;
   struct nla_policy *policy ;
   struct list_head rules_list ;
   struct module *owner ;
   struct net *fro_net ;
   struct callback_head rcu ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/l3mdev.h"
struct l3mdev_ops {
   u32 (*l3mdev_fib_table)(struct net_device *) ;
   struct sk_buff *(*l3mdev_l3_rcv)(struct net_device *, struct sk_buff *, u16 ) ;
   struct sk_buff *(*l3mdev_l3_out)(struct net_device *, struct sock *, struct sk_buff *, u16 ) ;
   struct dst_entry *(*l3mdev_link_scope_lookup)(struct net_device *, struct flowi6 *) ;
};
#line 202  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/l3mdev.h"
struct __anonstruct_socket_lock_t_841 {
   spinlock_t slock ;
   int owned ;
   wait_queue_head_t wq ;
   struct lockdep_map dep_map ;
};
#line 202  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/l3mdev.h"
typedef struct __anonstruct_socket_lock_t_841 socket_lock_t;
#line 108  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
struct proto;
#line 109  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
typedef __u32 __portpair;
#line 114  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
typedef __u64 __addrpair;
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
struct __anonstruct_843 {
   __be32 skc_daddr ;
   __be32 skc_rcv_saddr ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_842 {
   __addrpair skc_addrpair ;
   struct __anonstruct_843 __anonCompField___anonunion_842_177 ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_844 {
   unsigned int skc_hash ;
   __u16 skc_u16hashes[2U] ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
struct __anonstruct_846 {
   __be16 skc_dport ;
   __u16 skc_num ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_845 {
   __portpair skc_portpair ;
   struct __anonstruct_846 __anonCompField___anonunion_845_180 ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_847 {
   struct hlist_node skc_bind_node ;
   struct hlist_node skc_portaddr_node ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_848 {
   unsigned long skc_flags ;
   struct sock *skc_listener ;
   struct inet_timewait_death_row *skc_tw_dr ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_849 {
   struct hlist_node skc_node ;
   struct hlist_nulls_node skc_nulls_node ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_850 {
   int skc_incoming_cpu ;
   u32 skc_rcv_wnd ;
   u32 skc_tw_rcv_nxt ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_851 {
   u32 skc_rxhash ;
   u32 skc_window_clamp ;
   u32 skc_tw_snd_nxt ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
struct sock_common {
   union __anonunion_842 __anonCompField_sock_common_178 ;
   union __anonunion_844 __anonCompField_sock_common_179 ;
   union __anonunion_845 __anonCompField_sock_common_181 ;
   unsigned short skc_family ;
   unsigned char skc_state ;
   unsigned char skc_reuse : 4 ;
   unsigned char skc_reuseport : 1 ;
   unsigned char skc_ipv6only : 1 ;
   unsigned char skc_net_refcnt : 1 ;
   int skc_bound_dev_if ;
   union __anonunion_847 __anonCompField_sock_common_182 ;
   struct proto *skc_prot ;
   possible_net_t skc_net ;
   struct in6_addr skc_v6_daddr ;
   struct in6_addr skc_v6_rcv_saddr ;
   atomic64_t skc_cookie ;
   union __anonunion_848 __anonCompField_sock_common_183 ;
   int skc_dontcopy_begin[0U] ;
   union __anonunion_849 __anonCompField_sock_common_184 ;
   unsigned short skc_tx_queue_mapping ;
   unsigned short skc_rx_queue_mapping ;
   union __anonunion_850 __anonCompField_sock_common_185 ;
   refcount_t skc_refcnt ;
   int skc_dontcopy_end[0U] ;
   union __anonunion_851 __anonCompField_sock_common_186 ;
};
#line 231 
struct bpf_sk_storage;
#line 323  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
struct __anonstruct_sk_backlog_852 {
   atomic_t rmem_alloc ;
   int len ;
   struct sk_buff *head ;
   struct sk_buff *tail ;
};
#line 323  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_853 {
   struct socket_wq *sk_wq ;
   struct socket_wq *sk_wq_raw ;
};
#line 323  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_854 {
   struct sk_buff *sk_send_head ;
   struct rb_root tcp_rtx_queue ;
};
#line 323  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
struct sock {
   struct sock_common __sk_common ;
   socket_lock_t sk_lock ;
   atomic_t sk_drops ;
   int sk_rcvlowat ;
   struct sk_buff_head sk_error_queue ;
   struct sk_buff *sk_rx_skb_cache ;
   struct sk_buff_head sk_receive_queue ;
   struct __anonstruct_sk_backlog_852 sk_backlog ;
   int sk_forward_alloc ;
   unsigned int sk_ll_usec ;
   unsigned int sk_napi_id ;
   int sk_rcvbuf ;
   struct sk_filter *sk_filter ;
   union __anonunion_853 __anonCompField_sock_187 ;
   struct xfrm_policy *sk_policy[2U] ;
   struct dst_entry *sk_rx_dst ;
   struct dst_entry *sk_dst_cache ;
   atomic_t sk_omem_alloc ;
   int sk_sndbuf ;
   int sk_wmem_queued ;
   refcount_t sk_wmem_alloc ;
   unsigned long sk_tsq_flags ;
   union __anonunion_854 __anonCompField_sock_188 ;
   struct sk_buff *sk_tx_skb_cache ;
   struct sk_buff_head sk_write_queue ;
   __s32 sk_peek_off ;
   int sk_write_pending ;
   __u32 sk_dst_pending_confirm ;
   u32 sk_pacing_status ;
   long sk_sndtimeo ;
   struct timer_list sk_timer ;
   __u32 sk_priority ;
   __u32 sk_mark ;
   unsigned long sk_pacing_rate ;
   unsigned long sk_max_pacing_rate ;
   struct page_frag sk_frag ;
   netdev_features_t sk_route_caps ;
   netdev_features_t sk_route_nocaps ;
   netdev_features_t sk_route_forced_caps ;
   int sk_gso_type ;
   unsigned int sk_gso_max_size ;
   gfp_t sk_allocation ;
   __u32 sk_txhash ;
   unsigned int __sk_flags_offset[0U] ;
   unsigned int sk_padding : 1 ;
   unsigned int sk_kern_sock : 1 ;
   unsigned int sk_no_check_tx : 1 ;
   unsigned int sk_no_check_rx : 1 ;
   unsigned int sk_userlocks : 4 ;
   unsigned int sk_protocol : 8 ;
   unsigned int sk_type : 16 ;
   u16 sk_gso_max_segs ;
   u8 sk_pacing_shift ;
   unsigned long sk_lingertime ;
   struct proto *sk_prot_creator ;
   rwlock_t sk_callback_lock ;
   int sk_err ;
   int sk_err_soft ;
   u32 sk_ack_backlog ;
   u32 sk_max_ack_backlog ;
   kuid_t sk_uid ;
   struct pid *sk_peer_pid ;
   struct cred *sk_peer_cred ;
   long sk_rcvtimeo ;
   ktime_t sk_stamp ;
   u16 sk_tsflags ;
   u8 sk_shutdown ;
   u32 sk_tskey ;
   atomic_t sk_zckey ;
   u8 sk_clockid ;
   u8 sk_txtime_deadline_mode : 1 ;
   u8 sk_txtime_report_errors : 1 ;
   u8 sk_txtime_unused : 6 ;
   struct socket *sk_socket ;
   void *sk_user_data ;
   void *sk_security ;
   struct sock_cgroup_data sk_cgrp_data ;
   struct mem_cgroup *sk_memcg ;
   void (*sk_state_change)(struct sock *) ;
   void (*sk_data_ready)(struct sock *) ;
   void (*sk_write_space)(struct sock *) ;
   void (*sk_error_report)(struct sock *) ;
   int (*sk_backlog_rcv)(struct sock *, struct sk_buff *) ;
   struct sk_buff *(*sk_validate_xmit_skb)(struct sock *, struct net_device *, struct sk_buff *) ;
   void (*sk_destruct)(struct sock *) ;
   struct sock_reuseport *sk_reuseport_cb ;
   struct bpf_sk_storage *sk_bpf_storage ;
   struct callback_head sk_rcu ;
};
#line 1048 
struct request_sock_ops;
#line 1049 
struct timewait_sock_ops;
#line 1050 
struct raw_hashinfo;
#line 1051 
struct smc_hashinfo;
#line 1071 
struct udp_table;
#line 1071  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_h_889 {
   struct inet_hashinfo *hashinfo ;
   struct udp_table *udp_table ;
   struct raw_hashinfo *raw_hash ;
   struct smc_hashinfo *smc_hash ;
};
#line 1071  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
struct proto {
   void (*close)(struct sock *, long ) ;
   int (*pre_connect)(struct sock *, struct sockaddr *, int ) ;
   int (*connect)(struct sock *, struct sockaddr *, int ) ;
   int (*disconnect)(struct sock *, int ) ;
   struct sock *(*accept)(struct sock *, int , int *, bool ) ;
   int (*ioctl)(struct sock *, int , unsigned long ) ;
   int (*init)(struct sock *) ;
   void (*destroy)(struct sock *) ;
   void (*shutdown)(struct sock *, int ) ;
   int (*setsockopt)(struct sock *, int , int , char *, unsigned int ) ;
   int (*getsockopt)(struct sock *, int , int , char *, int *) ;
   void (*keepalive)(struct sock *, int ) ;
   int (*compat_setsockopt)(struct sock *, int , int , char *, unsigned int ) ;
   int (*compat_getsockopt)(struct sock *, int , int , char *, int *) ;
   int (*compat_ioctl)(struct sock *, unsigned int , unsigned long ) ;
   int (*sendmsg)(struct sock *, struct msghdr *, size_t ) ;
   int (*recvmsg)(struct sock *, struct msghdr *, size_t , int , int , int *) ;
   int (*sendpage)(struct sock *, struct page *, int , size_t , int ) ;
   int (*bind)(struct sock *, struct sockaddr *, int ) ;
   int (*backlog_rcv)(struct sock *, struct sk_buff *) ;
   void (*release_cb)(struct sock *) ;
   int (*hash)(struct sock *) ;
   void (*unhash)(struct sock *) ;
   void (*rehash)(struct sock *) ;
   int (*get_port)(struct sock *, unsigned short ) ;
   unsigned int inuse_idx ;
   bool (*stream_memory_free)(struct sock *, int ) ;
   bool (*stream_memory_read)(struct sock *) ;
   void (*enter_memory_pressure)(struct sock *) ;
   void (*leave_memory_pressure)(struct sock *) ;
   atomic_long_t *memory_allocated ;
   struct percpu_counter *sockets_allocated ;
   unsigned long *memory_pressure ;
   long *sysctl_mem ;
   int *sysctl_wmem ;
   int *sysctl_rmem ;
   u32 sysctl_wmem_offset ;
   u32 sysctl_rmem_offset ;
   int max_header ;
   bool no_autobind ;
   struct kmem_cache *slab ;
   unsigned int obj_size ;
   slab_flags_t slab_flags ;
   unsigned int useroffset ;
   unsigned int usersize ;
   struct percpu_counter *orphan_count ;
   struct request_sock_ops *rsk_prot ;
   struct timewait_sock_ops *twsk_prot ;
   union __anonunion_h_889 h ;
   struct module *owner ;
   char name[32U] ;
   struct list_head node ;
   int (*diag_destroy)(struct sock *, int ) ;
} __attribute__((__designated_init__));
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/request_sock.h"
struct request_sock_ops {
   int family ;
   unsigned int obj_size ;
   struct kmem_cache *slab ;
   char *slab_name ;
   int (*rtx_syn_ack)(struct sock *, struct request_sock *) ;
   void (*send_ack)(struct sock *, struct sk_buff *, struct request_sock *) ;
   void (*send_reset)(struct sock *, struct sk_buff *) ;
   void (*destructor)(struct request_sock *) ;
   void (*syn_ack_timeout)(struct request_sock *) ;
};
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/request_sock.h"
struct request_sock {
   struct sock_common __req_common ;
   struct request_sock *dl_next ;
   u16 mss ;
   u8 num_retrans ;
   u8 cookie_ts : 1 ;
   u8 num_timeout : 7 ;
   u32 ts_recent ;
   struct timer_list rsk_timer ;
   struct request_sock_ops *rsk_ops ;
   struct sock *sk ;
   u32 *saved_syn ;
   u32 secid ;
   u32 peer_secid ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/timewait_sock.h"
struct timewait_sock_ops {
   struct kmem_cache *twsk_slab ;
   char *twsk_slab_name ;
   unsigned int twsk_obj_size ;
   int (*twsk_unique)(struct sock *, struct sock *, void *) ;
   void (*twsk_destructor)(struct sock *) ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/tcp.h"
struct tcphdr {
   __be16 source ;
   __be16 dest ;
   __be32 seq ;
   __be32 ack_seq ;
   __u16 res1 : 4 ;
   __u16 doff : 4 ;
   __u16 fin : 1 ;
   __u16 syn : 1 ;
   __u16 rst : 1 ;
   __u16 psh : 1 ;
   __u16 ack : 1 ;
   __u16 urg : 1 ;
   __u16 ece : 1 ;
   __u16 cwr : 1 ;
   __be16 window ;
   __sum16 check ;
   __be16 urg_ptr ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/firmware.h"
struct firmware {
   size_t size ;
   u8 *data ;
   struct page **pages ;
   void *priv ;
};
#line 439  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/property.h"
typedef u32 phandle;
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/of.h"
struct property {
   char *name ;
   int length ;
   void *value ;
   struct property *next ;
   unsigned long _flags ;
   struct bin_attribute attr ;
};
#line 51  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/of.h"
struct device_node {
   char *name ;
   phandle phandle ;
   char *full_name ;
   struct fwnode_handle fwnode ;
   struct property *properties ;
   struct property *deadprops ;
   struct device_node *parent ;
   struct device_node *child ;
   struct device_node *sibling ;
   struct kobject kobj ;
   unsigned long _flags ;
   void *data ;
};
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/irq_regs.h"
struct msi_msg;
#line 143  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/irq.h"
struct irq_common_data {
   unsigned int state_use_accessors ;
   unsigned int node ;
   void *handler_data ;
   struct msi_desc *msi_desc ;
   cpumask_var_t affinity ;
   cpumask_var_t effective_affinity ;
};
#line 173 
struct irq_chip;
#line 173  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/irq.h"
struct irq_data {
   u32 mask ;
   unsigned int irq ;
   unsigned long hwirq ;
   struct irq_common_data *common ;
   struct irq_chip *chip ;
   struct irq_domain *domain ;
   struct irq_data *parent_data ;
   void *chip_data ;
};
#line 449  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/irq.h"
struct irq_chip {
   struct device *parent_device ;
   char *name ;
   unsigned int (*irq_startup)(struct irq_data *) ;
   void (*irq_shutdown)(struct irq_data *) ;
   void (*irq_enable)(struct irq_data *) ;
   void (*irq_disable)(struct irq_data *) ;
   void (*irq_ack)(struct irq_data *) ;
   void (*irq_mask)(struct irq_data *) ;
   void (*irq_mask_ack)(struct irq_data *) ;
   void (*irq_unmask)(struct irq_data *) ;
   void (*irq_eoi)(struct irq_data *) ;
   int (*irq_set_affinity)(struct irq_data *, struct cpumask *, bool ) ;
   int (*irq_retrigger)(struct irq_data *) ;
   int (*irq_set_type)(struct irq_data *, unsigned int ) ;
   int (*irq_set_wake)(struct irq_data *, unsigned int ) ;
   void (*irq_bus_lock)(struct irq_data *) ;
   void (*irq_bus_sync_unlock)(struct irq_data *) ;
   void (*irq_cpu_online)(struct irq_data *) ;
   void (*irq_cpu_offline)(struct irq_data *) ;
   void (*irq_suspend)(struct irq_data *) ;
   void (*irq_resume)(struct irq_data *) ;
   void (*irq_pm_shutdown)(struct irq_data *) ;
   void (*irq_calc_mask)(struct irq_data *) ;
   void (*irq_print_chip)(struct irq_data *, struct seq_file *) ;
   int (*irq_request_resources)(struct irq_data *) ;
   void (*irq_release_resources)(struct irq_data *) ;
   void (*irq_compose_msi_msg)(struct irq_data *, struct msi_msg *) ;
   void (*irq_write_msi_msg)(struct irq_data *, struct msi_msg *) ;
   int (*irq_get_irqchip_state)(struct irq_data *, enum irqchip_irq_state , bool *) ;
   int (*irq_set_irqchip_state)(struct irq_data *, enum irqchip_irq_state , bool ) ;
   int (*irq_set_vcpu_affinity)(struct irq_data *, void *) ;
   void (*ipi_send_single)(struct irq_data *, unsigned int ) ;
   void (*ipi_send_mask)(struct irq_data *, struct cpumask *) ;
   int (*irq_nmi_setup)(struct irq_data *) ;
   void (*irq_nmi_teardown)(struct irq_data *) ;
   unsigned long flags ;
};
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/irqdesc.h"
struct irq_desc {
   struct irq_common_data irq_common_data ;
   struct irq_data irq_data ;
   unsigned int *kstat_irqs ;
   void (*handle_irq)(struct irq_desc *) ;
   struct irqaction *action ;
   unsigned int status_use_accessors ;
   unsigned int core_internal_state__do_not_mess_with_it ;
   unsigned int depth ;
   unsigned int wake_depth ;
   unsigned int tot_count ;
   unsigned int irq_count ;
   unsigned long last_unhandled ;
   unsigned int irqs_unhandled ;
   atomic_t threads_handled ;
   int threads_handled_last ;
   raw_spinlock_t lock ;
   struct cpumask *percpu_enabled ;
   struct cpumask *percpu_affinity ;
   struct cpumask *affinity_hint ;
   struct irq_affinity_notify *affinity_notify ;
   cpumask_var_t pending_mask ;
   unsigned long threads_oneshot ;
   atomic_t threads_active ;
   wait_queue_head_t wait_for_threads ;
   unsigned int nr_actions ;
   unsigned int no_suspend_depth ;
   unsigned int cond_suspend_depth ;
   unsigned int force_resume_depth ;
   struct proc_dir_entry *dir ;
   struct dentry *debugfs_file ;
   char *dev_name ;
   struct callback_head rcu ;
   struct kobject kobj ;
   struct mutex request_mutex ;
   int parent_irq ;
   struct module *owner ;
   char *name ;
} __attribute__((__aligned__(4096)));
#line 930  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/irq.h"
struct irq_chip_regs {
   unsigned long enable ;
   unsigned long disable ;
   unsigned long mask ;
   unsigned long ack ;
   unsigned long eoi ;
   unsigned long type ;
   unsigned long polarity ;
};
#line 953  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/irq.h"
struct irq_chip_type {
   struct irq_chip chip ;
   struct irq_chip_regs regs ;
   void (*handler)(struct irq_desc *) ;
   u32 type ;
   u32 mask_cache_priv ;
   u32 *mask_cache ;
};
#line 995  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/irq.h"
struct irq_chip_generic {
   raw_spinlock_t lock ;
   void *reg_base ;
   u32 (*reg_readl)(void *) ;
   void (*reg_writel)(u32 , void *) ;
   void (*suspend)(struct irq_chip_generic *) ;
   void (*resume)(struct irq_chip_generic *) ;
   unsigned int irq_base ;
   unsigned int irq_cnt ;
   u32 mask_cache ;
   u32 type_cache ;
   u32 polarity_cache ;
   u32 wake_enabled ;
   u32 wake_active ;
   unsigned int num_ct ;
   void *private ;
   unsigned long installed ;
   unsigned long unused ;
   struct irq_domain *domain ;
   struct list_head list ;
   struct irq_chip_type chip_types[0U] ;
};
#line 1017 
enum irq_gc_flags {
    IRQ_GC_INIT_MASK_CACHE = 1,
    IRQ_GC_INIT_NESTED_LOCK = 2,
    IRQ_GC_MASK_CACHE_PER_TYPE = 4,
    IRQ_GC_NO_MASK = 8,
    IRQ_GC_BE_IO = 16
};
#line 1045  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/irq.h"
struct irq_domain_chip_generic {
   unsigned int irqs_per_chip ;
   unsigned int num_chips ;
   unsigned int irq_flags_to_clear ;
   unsigned int irq_flags_to_set ;
   enum irq_gc_flags gc_flags ;
   struct irq_chip_generic *gc[0U] ;
};
#line 63  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/irqdomain.h"
struct irq_fwspec {
   struct fwnode_handle *fwnode ;
   int param_count ;
   u32 param[16U] ;
};
#line 68 
enum irq_domain_bus_token {
    DOMAIN_BUS_ANY = 0,
    DOMAIN_BUS_WIRED = 1,
    DOMAIN_BUS_GENERIC_MSI = 2,
    DOMAIN_BUS_PCI_MSI = 3,
    DOMAIN_BUS_PLATFORM_MSI = 4,
    DOMAIN_BUS_NEXUS = 5,
    DOMAIN_BUS_IPI = 6,
    DOMAIN_BUS_FSL_MC_MSI = 7,
    DOMAIN_BUS_TI_SCI_INTA_MSI = 8,
    DOMAIN_BUS_WAKEUP = 9
};
#line 104  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/irqdomain.h"
struct irq_domain_ops {
   int (*match)(struct irq_domain *, struct device_node *, enum irq_domain_bus_token ) ;
   int (*select)(struct irq_domain *, struct irq_fwspec *, enum irq_domain_bus_token ) ;
   int (*map)(struct irq_domain *, unsigned int , irq_hw_number_t ) ;
   void (*unmap)(struct irq_domain *, unsigned int ) ;
   int (*xlate)(struct irq_domain *, struct device_node *, u32 *, unsigned int , unsigned long *, unsigned int *) ;
   int (*alloc)(struct irq_domain *, unsigned int , unsigned int , void *) ;
   void (*free)(struct irq_domain *, unsigned int , unsigned int ) ;
   int (*activate)(struct irq_domain *, struct irq_data *, bool ) ;
   void (*deactivate)(struct irq_domain *, struct irq_data *) ;
   int (*translate)(struct irq_domain *, struct irq_fwspec *, unsigned long *, unsigned int *) ;
   void (*debug_show)(struct seq_file *, struct irq_domain *, struct irq_data *, int ) ;
};
#line 161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/irqdomain.h"
struct irq_domain {
   struct list_head link ;
   char *name ;
   struct irq_domain_ops *ops ;
   void *host_data ;
   unsigned int flags ;
   unsigned int mapcount ;
   struct fwnode_handle *fwnode ;
   enum irq_domain_bus_token bus_token ;
   struct irq_domain_chip_generic *gc ;
   struct irq_domain *parent ;
   struct dentry *debugfs_file ;
   irq_hw_number_t hwirq_max ;
   unsigned int revmap_direct_max_irq ;
   unsigned int revmap_size ;
   struct xarray revmap_tree ;
   struct mutex revmap_tree_mutex ;
   unsigned int linear_revmap[] ;
};
#line 532 
struct pinctrl;
#line 533 
struct pinctrl_state;
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pinctrl/devinfo.h"
struct dev_pin_info {
   struct pinctrl *p ;
   struct pinctrl_state *default_state ;
   struct pinctrl_state *init_state ;
   struct pinctrl_state *sleep_state ;
   struct pinctrl_state *idle_state ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/hwmon-sysfs.h"
struct sensor_device_attribute {
   struct device_attribute dev_attr ;
   int index ;
};
#line 63  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ipv6.h"
struct ipv6_stable_secret {
   bool initialized ;
   struct in6_addr secret ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ipv6.h"
struct ipv6_devconf {
   __s32 forwarding ;
   __s32 hop_limit ;
   __s32 mtu6 ;
   __s32 accept_ra ;
   __s32 accept_redirects ;
   __s32 autoconf ;
   __s32 dad_transmits ;
   __s32 rtr_solicits ;
   __s32 rtr_solicit_interval ;
   __s32 rtr_solicit_max_interval ;
   __s32 rtr_solicit_delay ;
   __s32 force_mld_version ;
   __s32 mldv1_unsolicited_report_interval ;
   __s32 mldv2_unsolicited_report_interval ;
   __s32 use_tempaddr ;
   __s32 temp_valid_lft ;
   __s32 temp_prefered_lft ;
   __s32 regen_max_retry ;
   __s32 max_desync_factor ;
   __s32 max_addresses ;
   __s32 accept_ra_defrtr ;
   __s32 accept_ra_min_hop_limit ;
   __s32 accept_ra_pinfo ;
   __s32 ignore_routes_with_linkdown ;
   __s32 accept_ra_rtr_pref ;
   __s32 rtr_probe_interval ;
   __s32 accept_ra_rt_info_min_plen ;
   __s32 accept_ra_rt_info_max_plen ;
   __s32 proxy_ndp ;
   __s32 accept_source_route ;
   __s32 accept_ra_from_local ;
   __s32 optimistic_dad ;
   __s32 use_optimistic ;
   __s32 mc_forwarding ;
   __s32 disable_ipv6 ;
   __s32 drop_unicast_in_l2_multicast ;
   __s32 accept_dad ;
   __s32 force_tllao ;
   __s32 ndisc_notify ;
   __s32 suppress_frag_ndisc ;
   __s32 accept_ra_mtu ;
   __s32 drop_unsolicited_na ;
   struct ipv6_stable_secret stable_secret ;
   __s32 use_oif_addrs_only ;
   __s32 keep_addr_on_down ;
   __s32 seg6_enabled ;
   __s32 seg6_require_hmac ;
   __u32 enhanced_dad ;
   __u32 addr_gen_mode ;
   __s32 disable_policy ;
   __s32 ndisc_tclass ;
   struct ctl_table_header *sysctl_header ;
};
#line 99  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/if_inet6.h"
struct ip6_sf_list {
   struct ip6_sf_list *sf_next ;
   struct in6_addr sf_addr ;
   unsigned long sf_count[2U] ;
   unsigned char sf_gsresp ;
   unsigned char sf_oldin ;
   unsigned char sf_crcount ;
};
#line 114  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/if_inet6.h"
struct ifmcaddr6 {
   struct in6_addr mca_addr ;
   struct inet6_dev *idev ;
   struct ifmcaddr6 *next ;
   struct ip6_sf_list *mca_sources ;
   struct ip6_sf_list *mca_tomb ;
   unsigned int mca_sfmode ;
   unsigned char mca_crcount ;
   unsigned long mca_sfcount[2U] ;
   struct timer_list mca_timer ;
   unsigned int mca_flags ;
   int mca_users ;
   refcount_t mca_refcnt ;
   spinlock_t mca_lock ;
   unsigned long mca_cstamp ;
   unsigned long mca_tstamp ;
};
#line 140  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/if_inet6.h"
struct ifacaddr6 {
   struct in6_addr aca_addr ;
   struct fib6_info *aca_rt ;
   struct ifacaddr6 *aca_next ;
   struct hlist_node aca_addr_lst ;
   int aca_users ;
   refcount_t aca_refcnt ;
   unsigned long aca_cstamp ;
   unsigned long aca_tstamp ;
   struct callback_head rcu ;
};
#line 156  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/if_inet6.h"
struct ipv6_devstat {
   struct proc_dir_entry *proc_dir_entry ;
   struct ipstats_mib *ipv6 ;
   struct icmpv6_mib_device *icmpv6dev ;
   struct icmpv6msg_mib_device *icmpv6msgdev ;
};
#line 163  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/if_inet6.h"
struct inet6_dev {
   struct net_device *dev ;
   struct list_head addr_list ;
   struct ifmcaddr6 *mc_list ;
   struct ifmcaddr6 *mc_tomb ;
   spinlock_t mc_lock ;
   unsigned char mc_qrv ;
   unsigned char mc_gq_running ;
   unsigned char mc_ifc_count ;
   unsigned char mc_dad_count ;
   unsigned long mc_v1_seen ;
   unsigned long mc_qi ;
   unsigned long mc_qri ;
   unsigned long mc_maxdelay ;
   struct timer_list mc_gq_timer ;
   struct timer_list mc_ifc_timer ;
   struct timer_list mc_dad_timer ;
   struct ifacaddr6 *ac_list ;
   rwlock_t lock ;
   refcount_t refcnt ;
   __u32 if_flags ;
   int dead ;
   u32 desync_factor ;
   u8 rndid[8U] ;
   struct list_head tempaddr_list ;
   struct in6_addr token ;
   struct neigh_parms *nd_parms ;
   struct ipv6_devconf cnf ;
   struct ipv6_devstat stats ;
   struct timer_list rs_timer ;
   __s32 rs_interval ;
   __u8 rs_probes ;
   unsigned long tstamp ;
   struct callback_head rcu ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/if_arp.h"
struct prefix_info;
#line 104  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/ndisc.h"
struct nd_opt_hdr {
   __u8 nd_opt_type ;
   __u8 nd_opt_len ;
} __attribute__((__packed__));
#line 110  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/ndisc.h"
struct ndisc_options {
   struct nd_opt_hdr *nd_opt_array[15U] ;
   struct nd_opt_hdr *nd_opts_ri ;
   struct nd_opt_hdr *nd_opts_ri_end ;
   struct nd_opt_hdr *nd_useropts ;
   struct nd_opt_hdr *nd_useropts_end ;
   struct nd_opt_hdr *nd_802154_opt_array[3U] ;
};
#line 201  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/ndisc.h"
struct ndisc_ops {
   int (*is_useropt)(u8 ) ;
   int (*parse_options)(struct net_device *, struct nd_opt_hdr *, struct ndisc_options *) ;
   void (*update)(struct net_device *, struct neighbour *, u32 , u8 , struct ndisc_options *) ;
   int (*opt_addr_space)(struct net_device *, u8 , struct neighbour *, u8 *, u8 **) ;
   void (*fill_addr_option)(struct net_device *, struct sk_buff *, u8 , u8 *) ;
   void (*prefix_rcv_add_addr)(struct net *, struct net_device *, struct prefix_info *, struct inet6_dev *, struct in6_addr *, int , u32 , bool , bool , __u32 , u32 , bool ) ;
};
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inetpeer.h"
struct inet_peer_base {
   struct rb_root rb_root ;
   seqlock_t lock ;
   int total ;
};
#line 235  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/ip_fib.h"
struct fib_table {
   struct hlist_node tb_hlist ;
   u32 tb_id ;
   int tb_num_default ;
   struct callback_head rcu ;
   unsigned long *tb_data ;
   unsigned long __data[0U] ;
};
#line 121  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/ip.h"
union __anonunion_1002 {
   void (*destructor)(struct sock *) ;
   struct sock *saved_sk ;
};
#line 121  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/ip.h"
struct ip_ra_chain {
   struct ip_ra_chain *next ;
   struct sock *sk ;
   union __anonunion_1002 __anonCompField_ip_ra_chain_206 ;
   struct callback_head rcu ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cdev.h"
struct cdev {
   struct kobject kobj ;
   struct module *owner ;
   struct file_operations *ops ;
   struct list_head list ;
   dev_t dev ;
   unsigned int count ;
} __attribute__((__designated_init__));
#line 77  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ptp_clock.h"
struct ptp_clock_time {
   __s64 sec ;
   __u32 nsec ;
   __u32 reserved ;
};
#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ptp_clock.h"
struct ptp_extts_request {
   unsigned int index ;
   unsigned int flags ;
   unsigned int rsv[2U] ;
};
#line 101  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ptp_clock.h"
struct ptp_perout_request {
   struct ptp_clock_time start ;
   struct ptp_clock_time period ;
   unsigned int index ;
   unsigned int flags ;
   unsigned int rsv[4U] ;
};
#line 138 
enum ptp_pin_function {
    PTP_PF_NONE = 0,
    PTP_PF_EXTTS = 1,
    PTP_PF_PEROUT = 2,
    PTP_PF_PHYSYNC = 3
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ptp_clock.h"
struct ptp_pin_desc {
   char name[64U] ;
   unsigned int index ;
   unsigned int func ;
   unsigned int chan ;
   unsigned int rsv[5U] ;
};
#line 205 
enum ldv_21290 {
    PTP_CLK_REQ_EXTTS = 0,
    PTP_CLK_REQ_PEROUT = 1,
    PTP_CLK_REQ_PPS = 2
};
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ptp_clock_kernel.h"
union __anonunion_1009 {
   struct ptp_extts_request extts ;
   struct ptp_perout_request perout ;
};
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ptp_clock_kernel.h"
struct ptp_clock_request {
   enum ldv_21290 type ;
   union __anonunion_1009 __anonCompField_ptp_clock_request_207 ;
};
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ptp_clock_kernel.h"
struct ptp_system_timestamp {
   struct timespec64 pre_ts ;
   struct timespec64 post_ts ;
};
#line 119  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ptp_clock_kernel.h"
struct ptp_clock_info {
   struct module *owner ;
   char name[16U] ;
   s32 max_adj ;
   int n_alarm ;
   int n_ext_ts ;
   int n_per_out ;
   int n_pins ;
   int pps ;
   struct ptp_pin_desc *pin_config ;
   int (*adjfine)(struct ptp_clock_info *, long ) ;
   int (*adjfreq)(struct ptp_clock_info *, s32 ) ;
   int (*adjtime)(struct ptp_clock_info *, s64 ) ;
   int (*gettime64)(struct ptp_clock_info *, struct timespec64 *) ;
   int (*gettimex64)(struct ptp_clock_info *, struct timespec64 *, struct ptp_system_timestamp *) ;
   int (*getcrosststamp)(struct ptp_clock_info *, struct system_device_crosststamp *) ;
   int (*settime64)(struct ptp_clock_info *, struct timespec64 *) ;
   int (*enable)(struct ptp_clock_info *, struct ptp_clock_request *, int ) ;
   int (*verify)(struct ptp_clock_info *, unsigned int , enum ptp_pin_function , unsigned int ) ;
   long (*do_aux_work)(struct ptp_clock_info *) ;
};
#line 144 
struct ptp_clock;
#line 2553  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.h"
struct tg3_tx_buffer_desc {
   u32 addr_hi ;
   u32 addr_lo ;
   u32 len_flags ;
   u32 vlan_tag ;
};
#line 2584  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.h"
struct tg3_rx_buffer_desc {
   u32 addr_hi ;
   u32 addr_lo ;
   u32 idx_len ;
   u32 type_flags ;
   u32 ip_tcp_csum ;
   u32 err_vlan ;
   u32 reserved ;
   u32 opaque ;
};
#line 2645  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.h"
struct __anonstruct_addrlist_1011 {
   u32 addr_hi ;
   u32 addr_lo ;
};
#line 2645  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.h"
struct tg3_ext_rx_buffer_desc {
   struct __anonstruct_addrlist_1011 addrlist[3U] ;
   u32 len2_len1 ;
   u32 resv_len3 ;
   struct tg3_rx_buffer_desc std ;
};
#line 2659  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.h"
struct tg3_internal_buffer_desc {
   u32 addr_hi ;
   u32 addr_lo ;
   u32 nic_mbuf ;
   u16 len ;
   u16 cqid_sqid ;
   u32 flags ;
   u32 __cookie1 ;
   u32 __cookie2 ;
   u32 __cookie3 ;
};
#line 2678  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.h"
struct __anonstruct_idx_1012 {
   u16 rx_producer ;
   u16 tx_consumer ;
};
#line 2678  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.h"
struct tg3_hw_status {
   u32 status ;
   u32 status_tag ;
   u16 rx_jumbo_consumer ;
   u16 rx_consumer ;
   u16 rx_mini_consumer ;
   u16 reserved ;
   struct __anonstruct_idx_1012 idx[16U] ;
};
#line 2711  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.h"
struct __anonstruct_tg3_stat64_t_1013 {
   u32 high ;
   u32 low ;
};
#line 2711  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.h"
typedef struct __anonstruct_tg3_stat64_t_1013 tg3_stat64_t;
#line 2716  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.h"
struct tg3_hw_stats {
   u8 __reserved0[256U] ;
   tg3_stat64_t rx_octets ;
   u64 __reserved1 ;
   tg3_stat64_t rx_fragments ;
   tg3_stat64_t rx_ucast_packets ;
   tg3_stat64_t rx_mcast_packets ;
   tg3_stat64_t rx_bcast_packets ;
   tg3_stat64_t rx_fcs_errors ;
   tg3_stat64_t rx_align_errors ;
   tg3_stat64_t rx_xon_pause_rcvd ;
   tg3_stat64_t rx_xoff_pause_rcvd ;
   tg3_stat64_t rx_mac_ctrl_rcvd ;
   tg3_stat64_t rx_xoff_entered ;
   tg3_stat64_t rx_frame_too_long_errors ;
   tg3_stat64_t rx_jabbers ;
   tg3_stat64_t rx_undersize_packets ;
   tg3_stat64_t rx_in_length_errors ;
   tg3_stat64_t rx_out_length_errors ;
   tg3_stat64_t rx_64_or_less_octet_packets ;
   tg3_stat64_t rx_65_to_127_octet_packets ;
   tg3_stat64_t rx_128_to_255_octet_packets ;
   tg3_stat64_t rx_256_to_511_octet_packets ;
   tg3_stat64_t rx_512_to_1023_octet_packets ;
   tg3_stat64_t rx_1024_to_1522_octet_packets ;
   tg3_stat64_t rx_1523_to_2047_octet_packets ;
   tg3_stat64_t rx_2048_to_4095_octet_packets ;
   tg3_stat64_t rx_4096_to_8191_octet_packets ;
   tg3_stat64_t rx_8192_to_9022_octet_packets ;
   u64 __unused0[37U] ;
   tg3_stat64_t tx_octets ;
   u64 __reserved2 ;
   tg3_stat64_t tx_collisions ;
   tg3_stat64_t tx_xon_sent ;
   tg3_stat64_t tx_xoff_sent ;
   tg3_stat64_t tx_flow_control ;
   tg3_stat64_t tx_mac_errors ;
   tg3_stat64_t tx_single_collisions ;
   tg3_stat64_t tx_mult_collisions ;
   tg3_stat64_t tx_deferred ;
   u64 __reserved3 ;
   tg3_stat64_t tx_excessive_collisions ;
   tg3_stat64_t tx_late_collisions ;
   tg3_stat64_t tx_collide_2times ;
   tg3_stat64_t tx_collide_3times ;
   tg3_stat64_t tx_collide_4times ;
   tg3_stat64_t tx_collide_5times ;
   tg3_stat64_t tx_collide_6times ;
   tg3_stat64_t tx_collide_7times ;
   tg3_stat64_t tx_collide_8times ;
   tg3_stat64_t tx_collide_9times ;
   tg3_stat64_t tx_collide_10times ;
   tg3_stat64_t tx_collide_11times ;
   tg3_stat64_t tx_collide_12times ;
   tg3_stat64_t tx_collide_13times ;
   tg3_stat64_t tx_collide_14times ;
   tg3_stat64_t tx_collide_15times ;
   tg3_stat64_t tx_ucast_packets ;
   tg3_stat64_t tx_mcast_packets ;
   tg3_stat64_t tx_bcast_packets ;
   tg3_stat64_t tx_carrier_sense_errors ;
   tg3_stat64_t tx_discards ;
   tg3_stat64_t tx_errors ;
   u64 __unused1[31U] ;
   tg3_stat64_t COS_rx_packets[16U] ;
   tg3_stat64_t COS_rx_filter_dropped ;
   tg3_stat64_t dma_writeq_full ;
   tg3_stat64_t dma_write_prioq_full ;
   tg3_stat64_t rxbds_empty ;
   tg3_stat64_t rx_discards ;
   tg3_stat64_t rx_errors ;
   tg3_stat64_t rx_threshold_hit ;
   u64 __unused2[9U] ;
   tg3_stat64_t COS_out_packets[16U] ;
   tg3_stat64_t dma_readq_full ;
   tg3_stat64_t dma_read_prioq_full ;
   tg3_stat64_t tx_comp_queue_full ;
   tg3_stat64_t ring_set_send_prod_index ;
   tg3_stat64_t ring_status_update ;
   tg3_stat64_t nic_irqs ;
   tg3_stat64_t nic_avoided_irqs ;
   tg3_stat64_t nic_tx_threshold_hit ;
   tg3_stat64_t mbuf_lwm_thresh_hit ;
   u8 __reserved4[312U] ;
};
#line 2830  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.h"
struct tg3_ocir {
   u32 signature ;
   u16 version_flags ;
   u16 refresh_int ;
   u32 refresh_tmr ;
   u32 update_tmr ;
   u32 dst_base_addr ;
   u16 src_hdr_offset ;
   u16 src_hdr_length ;
   u16 src_data_offset ;
   u16 src_data_length ;
   u16 dst_hdr_offset ;
   u16 dst_data_offset ;
   u16 dst_reg_upd_offset ;
   u16 dst_sem_offset ;
   u32 reserved1[2U] ;
   u32 port0_flags ;
   u32 port1_flags ;
   u32 port2_flags ;
   u32 port3_flags ;
   u32 reserved2[1U] ;
};
#line 2862  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.h"
struct ring_info {
   u8 *data ;
   dma_addr_t mapping ;
};
#line 2867  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.h"
struct tg3_tx_ring_info {
   struct sk_buff *skb ;
   dma_addr_t mapping ;
   bool fragmented ;
};
#line 2873  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.h"
struct tg3_link_config {
   u32 advertising ;
   u32 speed ;
   u8 duplex ;
   u8 autoneg ;
   u8 flowctrl ;
   u8 active_flowctrl ;
   u8 active_duplex ;
   u32 active_speed ;
   u32 rmt_adv ;
};
#line 2889  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.h"
struct tg3_bufmgr_config {
   u32 mbuf_read_dma_low_water ;
   u32 mbuf_mac_rx_low_water ;
   u32 mbuf_high_water ;
   u32 mbuf_read_dma_low_water_jumbo ;
   u32 mbuf_mac_rx_low_water_jumbo ;
   u32 mbuf_high_water_jumbo ;
   u32 dma_low_water ;
   u32 dma_high_water ;
};
#line 2902  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.h"
struct tg3_ethtool_stats {
   u64 rx_octets ;
   u64 rx_fragments ;
   u64 rx_ucast_packets ;
   u64 rx_mcast_packets ;
   u64 rx_bcast_packets ;
   u64 rx_fcs_errors ;
   u64 rx_align_errors ;
   u64 rx_xon_pause_rcvd ;
   u64 rx_xoff_pause_rcvd ;
   u64 rx_mac_ctrl_rcvd ;
   u64 rx_xoff_entered ;
   u64 rx_frame_too_long_errors ;
   u64 rx_jabbers ;
   u64 rx_undersize_packets ;
   u64 rx_in_length_errors ;
   u64 rx_out_length_errors ;
   u64 rx_64_or_less_octet_packets ;
   u64 rx_65_to_127_octet_packets ;
   u64 rx_128_to_255_octet_packets ;
   u64 rx_256_to_511_octet_packets ;
   u64 rx_512_to_1023_octet_packets ;
   u64 rx_1024_to_1522_octet_packets ;
   u64 rx_1523_to_2047_octet_packets ;
   u64 rx_2048_to_4095_octet_packets ;
   u64 rx_4096_to_8191_octet_packets ;
   u64 rx_8192_to_9022_octet_packets ;
   u64 tx_octets ;
   u64 tx_collisions ;
   u64 tx_xon_sent ;
   u64 tx_xoff_sent ;
   u64 tx_flow_control ;
   u64 tx_mac_errors ;
   u64 tx_single_collisions ;
   u64 tx_mult_collisions ;
   u64 tx_deferred ;
   u64 tx_excessive_collisions ;
   u64 tx_late_collisions ;
   u64 tx_collide_2times ;
   u64 tx_collide_3times ;
   u64 tx_collide_4times ;
   u64 tx_collide_5times ;
   u64 tx_collide_6times ;
   u64 tx_collide_7times ;
   u64 tx_collide_8times ;
   u64 tx_collide_9times ;
   u64 tx_collide_10times ;
   u64 tx_collide_11times ;
   u64 tx_collide_12times ;
   u64 tx_collide_13times ;
   u64 tx_collide_14times ;
   u64 tx_collide_15times ;
   u64 tx_ucast_packets ;
   u64 tx_mcast_packets ;
   u64 tx_bcast_packets ;
   u64 tx_carrier_sense_errors ;
   u64 tx_discards ;
   u64 tx_errors ;
   u64 dma_writeq_full ;
   u64 dma_write_prioq_full ;
   u64 rxbds_empty ;
   u64 rx_discards ;
   u64 rx_errors ;
   u64 rx_threshold_hit ;
   u64 dma_readq_full ;
   u64 dma_read_prioq_full ;
   u64 tx_comp_queue_full ;
   u64 ring_set_send_prod_index ;
   u64 ring_status_update ;
   u64 nic_irqs ;
   u64 nic_avoided_irqs ;
   u64 nic_tx_threshold_hit ;
   u64 mbuf_lwm_thresh_hit ;
};
#line 2987  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.h"
struct tg3_rx_prodring_set {
   u32 rx_std_prod_idx ;
   u32 rx_std_cons_idx ;
   u32 rx_jmb_prod_idx ;
   u32 rx_jmb_cons_idx ;
   struct tg3_rx_buffer_desc *rx_std ;
   struct tg3_ext_rx_buffer_desc *rx_jmb ;
   struct ring_info *rx_std_buffers ;
   struct ring_info *rx_jmb_buffers ;
   dma_addr_t rx_std_mapping ;
   dma_addr_t rx_jmb_mapping ;
};
#line 3004 
struct tg3;
#line 3004  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.h"
struct tg3_napi {
   struct napi_struct napi ;
   struct tg3 *tp ;
   struct tg3_hw_status *hw_status ;
   u32 chk_msi_cnt ;
   u32 last_tag ;
   u32 last_irq_tag ;
   u32 int_mbox ;
   u32 coal_now ;
   u32 consmbox ;
   u32 rx_rcb_ptr ;
   u32 last_rx_cons ;
   u16 *rx_rcb_prod_idx ;
   struct tg3_rx_prodring_set prodring ;
   struct tg3_rx_buffer_desc *rx_rcb ;
   u32 tx_prod ;
   u32 tx_cons ;
   u32 tx_pending ;
   u32 last_tx_cons ;
   u32 prodmbox ;
   struct tg3_tx_buffer_desc *tx_ring ;
   struct tg3_tx_ring_info *tx_buffers ;
   dma_addr_t status_mapping ;
   dma_addr_t rx_rcb_mapping ;
   dma_addr_t tx_desc_mapping ;
   char irq_lbl[16U] ;
   unsigned int irq_vec ;
};
#line 3037 
enum TG3_FLAGS {
    TG3_FLAG_TAGGED_STATUS = 0,
    TG3_FLAG_TXD_MBOX_HWBUG = 1,
    TG3_FLAG_USE_LINKCHG_REG = 2,
    TG3_FLAG_ERROR_PROCESSED = 3,
    TG3_FLAG_ENABLE_ASF = 4,
    TG3_FLAG_ASPM_WORKAROUND = 5,
    TG3_FLAG_POLL_SERDES = 6,
    TG3_FLAG_POLL_CPMU_LINK = 7,
    TG3_FLAG_MBOX_WRITE_REORDER = 8,
    TG3_FLAG_PCIX_TARGET_HWBUG = 9,
    TG3_FLAG_WOL_SPEED_100MB = 10,
    TG3_FLAG_WOL_ENABLE = 11,
    TG3_FLAG_EEPROM_WRITE_PROT = 12,
    TG3_FLAG_NVRAM = 13,
    TG3_FLAG_NVRAM_BUFFERED = 14,
    TG3_FLAG_SUPPORT_MSI = 15,
    TG3_FLAG_SUPPORT_MSIX = 16,
    TG3_FLAG_USING_MSI = 17,
    TG3_FLAG_USING_MSIX = 18,
    TG3_FLAG_PCIX_MODE = 19,
    TG3_FLAG_PCI_HIGH_SPEED = 20,
    TG3_FLAG_PCI_32BIT = 21,
    TG3_FLAG_SRAM_USE_CONFIG = 22,
    TG3_FLAG_TX_RECOVERY_PENDING = 23,
    TG3_FLAG_WOL_CAP = 24,
    TG3_FLAG_JUMBO_RING_ENABLE = 25,
    TG3_FLAG_PAUSE_AUTONEG = 26,
    TG3_FLAG_CPMU_PRESENT = 27,
    TG3_FLAG_40BIT_DMA_BUG = 28,
    TG3_FLAG_BROKEN_CHECKSUMS = 29,
    TG3_FLAG_JUMBO_CAPABLE = 30,
    TG3_FLAG_CHIP_RESETTING = 31,
    TG3_FLAG_INIT_COMPLETE = 32,
    TG3_FLAG_MAX_RXPEND_64 = 33,
    TG3_FLAG_PCI_EXPRESS = 34,
    TG3_FLAG_ASF_NEW_HANDSHAKE = 35,
    TG3_FLAG_HW_AUTONEG = 36,
    TG3_FLAG_IS_NIC = 37,
    TG3_FLAG_FLASH = 38,
    TG3_FLAG_FW_TSO = 39,
    TG3_FLAG_HW_TSO_1 = 40,
    TG3_FLAG_HW_TSO_2 = 41,
    TG3_FLAG_HW_TSO_3 = 42,
    TG3_FLAG_TSO_CAPABLE = 43,
    TG3_FLAG_TSO_BUG = 44,
    TG3_FLAG_ICH_WORKAROUND = 45,
    TG3_FLAG_1SHOT_MSI = 46,
    TG3_FLAG_NO_FWARE_REPORTED = 47,
    TG3_FLAG_NO_NVRAM_ADDR_TRANS = 48,
    TG3_FLAG_ENABLE_APE = 49,
    TG3_FLAG_PROTECTED_NVRAM = 50,
    TG3_FLAG_5701_DMA_BUG = 51,
    TG3_FLAG_USE_PHYLIB = 52,
    TG3_FLAG_MDIOBUS_INITED = 53,
    TG3_FLAG_LRG_PROD_RING_CAP = 54,
    TG3_FLAG_RGMII_INBAND_DISABLE = 55,
    TG3_FLAG_RGMII_EXT_IBND_RX_EN = 56,
    TG3_FLAG_RGMII_EXT_IBND_TX_EN = 57,
    TG3_FLAG_CLKREQ_BUG = 58,
    TG3_FLAG_NO_NVRAM = 59,
    TG3_FLAG_ENABLE_RSS = 60,
    TG3_FLAG_ENABLE_TSS = 61,
    TG3_FLAG_SHORT_DMA_BUG = 62,
    TG3_FLAG_USE_JUMBO_BDFLAG = 63,
    TG3_FLAG_L1PLLPD_EN = 64,
    TG3_FLAG_APE_HAS_NCSI = 65,
    TG3_FLAG_TX_TSTAMP_EN = 66,
    TG3_FLAG_4K_FIFO_LIMIT = 67,
    TG3_FLAG_5719_5720_RDMA_BUG = 68,
    TG3_FLAG_RESET_TASK_PENDING = 69,
    TG3_FLAG_PTP_CAPABLE = 70,
    TG3_FLAG_5705_PLUS = 71,
    TG3_FLAG_IS_5788 = 72,
    TG3_FLAG_5750_PLUS = 73,
    TG3_FLAG_5780_CLASS = 74,
    TG3_FLAG_5755_PLUS = 75,
    TG3_FLAG_57765_PLUS = 76,
    TG3_FLAG_57765_CLASS = 77,
    TG3_FLAG_5717_PLUS = 78,
    TG3_FLAG_IS_SSB_CORE = 79,
    TG3_FLAG_FLUSH_POSTED_WRITES = 80,
    TG3_FLAG_ROBOSWITCH = 81,
    TG3_FLAG_ONE_DMA_AT_ONCE = 82,
    TG3_FLAG_RGMII_MODE = 83,
    TG3_FLAG_NUMBER_OF_FLAGS = 84
};
#line 3128  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.h"
struct tg3_firmware_hdr {
   __be32 version ;
   __be32 base_addr ;
   __be32 len ;
};
#line 3135  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.h"
union __anonunion_1014 {
   unsigned long phy_crc_errors ;
   unsigned long last_event_jiffies ;
};
#line 3135  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.h"
struct tg3 {
   unsigned int irq_sync ;
   spinlock_t lock ;
   spinlock_t indirect_lock ;
   u32 (*read32)(struct tg3 *, u32 ) ;
   void (*write32)(struct tg3 *, u32 , u32 ) ;
   u32 (*read32_mbox)(struct tg3 *, u32 ) ;
   void (*write32_mbox)(struct tg3 *, u32 , u32 ) ;
   void *regs ;
   void *aperegs ;
   struct net_device *dev ;
   struct pci_dev *pdev ;
   u32 coal_now ;
   u32 msg_enable ;
   struct ptp_clock_info ptp_info ;
   struct ptp_clock *ptp_clock ;
   s64 ptp_adjust ;
   void (*write32_tx_mbox)(struct tg3 *, u32 , u32 ) ;
   u32 dma_limit ;
   u32 txq_req ;
   u32 txq_cnt ;
   u32 txq_max ;
   struct tg3_napi napi[5U] ;
   void (*write32_rx_mbox)(struct tg3 *, u32 , u32 ) ;
   u32 rx_copy_thresh ;
   u32 rx_std_ring_mask ;
   u32 rx_jmb_ring_mask ;
   u32 rx_ret_ring_mask ;
   u32 rx_pending ;
   u32 rx_jumbo_pending ;
   u32 rx_std_max_post ;
   u32 rx_offset ;
   u32 rx_pkt_map_sz ;
   u32 rxq_req ;
   u32 rxq_cnt ;
   u32 rxq_max ;
   bool rx_refill ;
   unsigned long rx_dropped ;
   unsigned long tx_dropped ;
   struct rtnl_link_stats64 net_stats_prev ;
   struct tg3_ethtool_stats estats_prev ;
   unsigned long tg3_flags[2U] ;
   union __anonunion_1014 __anonCompField_tg3_209 ;
   struct timer_list timer ;
   u16 timer_counter ;
   u16 timer_multiplier ;
   u32 timer_offset ;
   u16 asf_counter ;
   u16 asf_multiplier ;
   u32 serdes_counter ;
   struct tg3_link_config link_config ;
   struct tg3_bufmgr_config bufmgr_config ;
   u32 rx_mode ;
   u32 tx_mode ;
   u32 mac_mode ;
   u32 mi_mode ;
   u32 misc_host_ctrl ;
   u32 grc_mode ;
   u32 grc_local_ctrl ;
   u32 dma_rwctrl ;
   u32 coalesce_mode ;
   u32 pwrmgmt_thresh ;
   u32 rxptpctl ;
   u32 pci_chip_rev_id ;
   u16 pci_cmd ;
   u8 pci_cacheline_sz ;
   u8 pci_lat_timer ;
   int pci_fn ;
   int msi_cap ;
   int pcix_cap ;
   int pcie_readrq ;
   struct mii_bus *mdio_bus ;
   int old_link ;
   u8 phy_addr ;
   u8 phy_ape_lock ;
   u32 phy_id ;
   u32 phy_flags ;
   u32 led_ctrl ;
   u32 phy_otp ;
   u32 setlpicnt ;
   u8 rss_ind_tbl[128U] ;
   char board_part_number[24U] ;
   char fw_ver[32U] ;
   u32 nic_sram_data_cfg ;
   u32 pci_clock_ctrl ;
   struct pci_dev *pdev_peer ;
   struct tg3_hw_stats *hw_stats ;
   dma_addr_t stats_mapping ;
   struct work_struct reset_task ;
   int nvram_lock_cnt ;
   u32 nvram_size ;
   u32 nvram_pagesize ;
   u32 nvram_jedecnum ;
   unsigned int irq_max ;
   unsigned int irq_cnt ;
   struct ethtool_coalesce coal ;
   struct ethtool_eee eee ;
   char *fw_needed ;
   struct firmware *fw ;
   u32 fw_len ;
   struct device *hwmon_dev ;
   bool link_up ;
   bool pcierr_recovery ;
   u32 ape_hb ;
   unsigned long ape_hb_interval ;
   unsigned long ape_hb_jiffies ;
};
#line 366  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
struct __anonstruct_ethtool_stats_keys_1015 {
   char string[32U] ;
};
#line 460  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
struct __anonstruct_ethtool_test_keys_1016 {
   char string[32U] ;
};
#line 5097  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
struct tg3_fiber_aneginfo {
   int state ;
   u32 flags ;
   unsigned long link_time ;
   unsigned long cur_time ;
   u32 ability_match_cfg ;
   int ability_match_count ;
   char ability_match ;
   char idle_match ;
   char ack_match ;
   u32 txconfig ;
   u32 rxconfig ;
};
#line 13098  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
struct __anonstruct_reg_tbl_1020 {
   u16 offset ;
   u16 flags ;
   u32 read_mask ;
   u32 write_mask ;
};
#line 13335  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
struct mem_entry {
   u32 offset ;
   u32 len ;
};
#line 15066  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
struct subsys_tbl_ent {
   u16 subsys_vendor ;
   u16 subsys_devid ;
   u32 phy_id ;
};
#line 16254  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
struct tg3_dev_id {
   u32 vendor ;
   u32 device ;
   u32 rev ;
};
#line 16294  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
struct tg3_dev_id_0 {
   u32 vendor ;
   u32 device ;
};
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 197 
enum hrtimer_restart;
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/dd.c"
struct device_private {
   void *driver_data ;
};
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 244  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/idr.h"
struct ida {
   struct xarray xa ;
};
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rtmutex.h"
struct rt_mutex {
   raw_spinlock_t wait_lock ;
   struct rb_root_cached waiters ;
   struct task_struct *owner ;
   int save_state ;
   char *name ;
   char *file ;
   int line ;
   void *magic ;
   struct lockdep_map dep_map ;
};
#line 69  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/i2c.h"
struct i2c_msg {
   __u16 addr ;
   __u16 flags ;
   __u16 len ;
   __u8 *buf ;
};
#line 135  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/i2c.h"
union i2c_smbus_data {
   __u8 byte ;
   __u16 word ;
   __u8 block[34U] ;
};
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/i2c.h"
struct i2c_algorithm;
#line 28 
struct i2c_adapter;
#line 29 
struct i2c_client;
#line 33 
enum i2c_slave_event;
#line 33 
enum i2c_slave_event;
#line 314  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/i2c.h"
struct i2c_client {
   unsigned short flags ;
   unsigned short addr ;
   char name[20U] ;
   struct i2c_adapter *adapter ;
   struct device dev ;
   int init_irq ;
   int irq ;
   struct list_head detected ;
   int (*slave_cb)(struct i2c_client *, enum i2c_slave_event , u8 *) ;
};
#line 360 
enum i2c_slave_event {
    I2C_SLAVE_READ_REQUESTED = 0,
    I2C_SLAVE_WRITE_REQUESTED = 1,
    I2C_SLAVE_READ_PROCESSED = 2,
    I2C_SLAVE_WRITE_RECEIVED = 3,
    I2C_SLAVE_STOP = 4
};
#line 527  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/i2c.h"
struct i2c_algorithm {
   int (*master_xfer)(struct i2c_adapter *, struct i2c_msg *, int ) ;
   int (*master_xfer_atomic)(struct i2c_adapter *, struct i2c_msg *, int ) ;
   int (*smbus_xfer)(struct i2c_adapter *, u16 , unsigned short , char , u8 , int , union i2c_smbus_data *) ;
   int (*smbus_xfer_atomic)(struct i2c_adapter *, u16 , unsigned short , char , u8 , int , union i2c_smbus_data *) ;
   u32 (*functionality)(struct i2c_adapter *) ;
   int (*reg_slave)(struct i2c_client *) ;
   int (*unreg_slave)(struct i2c_client *) ;
};
#line 565  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/i2c.h"
struct i2c_lock_operations {
   void (*lock_bus)(struct i2c_adapter *, unsigned int ) ;
   int (*trylock_bus)(struct i2c_adapter *, unsigned int ) ;
   void (*unlock_bus)(struct i2c_adapter *, unsigned int ) ;
};
#line 618  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/i2c.h"
struct i2c_bus_recovery_info {
   int (*recover_bus)(struct i2c_adapter *) ;
   int (*get_scl)(struct i2c_adapter *) ;
   void (*set_scl)(struct i2c_adapter *, int ) ;
   int (*get_sda)(struct i2c_adapter *) ;
   void (*set_sda)(struct i2c_adapter *, int ) ;
   int (*get_bus_free)(struct i2c_adapter *) ;
   void (*prepare_recovery)(struct i2c_adapter *) ;
   void (*unprepare_recovery)(struct i2c_adapter *) ;
   struct gpio_desc *scl_gpiod ;
   struct gpio_desc *sda_gpiod ;
};
#line 661  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/i2c.h"
struct i2c_adapter_quirks {
   u64 flags ;
   int max_num_msgs ;
   u16 max_write_len ;
   u16 max_read_len ;
   u16 max_comb_1st_msg_len ;
   u16 max_comb_2nd_msg_len ;
};
#line 692  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/i2c.h"
struct i2c_adapter {
   struct module *owner ;
   unsigned int class ;
   struct i2c_algorithm *algo ;
   void *algo_data ;
   struct i2c_lock_operations *lock_ops ;
   struct rt_mutex bus_lock ;
   struct rt_mutex mux_lock ;
   int timeout ;
   int retries ;
   struct device dev ;
   unsigned long locked_flags ;
   int nr ;
   char name[48U] ;
   struct completion dev_released ;
   struct mutex userspace_clients_lock ;
   struct list_head userspace_clients ;
   struct i2c_bus_recovery_info *bus_recovery_info ;
   struct i2c_adapter_quirks *quirks ;
   struct irq_domain *host_notify_domain ;
};
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-common.h"
struct v4l2_edid {
   __u32 pad ;
   __u32 start_block ;
   __u32 blocks ;
   __u32 reserved[5U] ;
   __u8 *edid ;
};
#line 754 
enum v4l2_priority {
    V4L2_PRIORITY_UNSET = 0,
    V4L2_PRIORITY_BACKGROUND = 1,
    V4L2_PRIORITY_INTERACTIVE = 2,
    V4L2_PRIORITY_RECORD = 3,
    V4L2_PRIORITY_DEFAULT = 2
};
#line 413  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_rect {
   __s32 left ;
   __s32 top ;
   __u32 width ;
   __u32 height ;
};
#line 420  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_fract {
   __u32 numerator ;
   __u32 denominator ;
};
#line 1212  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
typedef __u64 v4l2_std_id;
#line 1394  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_bt_timings {
   __u32 width ;
   __u32 height ;
   __u32 interlaced ;
   __u32 polarities ;
   __u64 pixelclock ;
   __u32 hfrontporch ;
   __u32 hsync ;
   __u32 hbackporch ;
   __u32 vfrontporch ;
   __u32 vsync ;
   __u32 vbackporch ;
   __u32 il_vfrontporch ;
   __u32 il_vsync ;
   __u32 il_vbackporch ;
   __u32 standards ;
   __u32 flags ;
   struct v4l2_fract picture_aspect ;
   __u8 cea861_vic ;
   __u8 hdmi_vic ;
   __u8 reserved[46U] ;
} __attribute__((__packed__));
#line 1517  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
union __anonunion_2803 {
   struct v4l2_bt_timings bt ;
   __u32 reserved[32U] ;
};
#line 1517  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_dv_timings {
   __u32 type ;
   union __anonunion_2803 __anonCompField_v4l2_dv_timings_77 ;
} __attribute__((__packed__));
#line 1536  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_enum_dv_timings {
   __u32 index ;
   __u32 pad ;
   __u32 reserved[2U] ;
   struct v4l2_dv_timings timings ;
};
#line 1554  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_bt_timings_cap {
   __u32 min_width ;
   __u32 max_width ;
   __u32 min_height ;
   __u32 max_height ;
   __u64 min_pixelclock ;
   __u64 max_pixelclock ;
   __u32 standards ;
   __u32 capabilities ;
   __u32 reserved[16U] ;
} __attribute__((__packed__));
#line 1581  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
union __anonunion_2804 {
   struct v4l2_bt_timings_cap bt ;
   __u32 raw_data[32U] ;
};
#line 1581  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_dv_timings_cap {
   __u32 type ;
   __u32 pad ;
   __u32 reserved[2U] ;
   union __anonunion_2804 __anonCompField_v4l2_dv_timings_cap_78 ;
};
#line 1803  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_tuner {
   __u32 index ;
   __u8 name[32U] ;
   __u32 type ;
   __u32 capability ;
   __u32 rangelow ;
   __u32 rangehigh ;
   __u32 rxsubchans ;
   __u32 audmode ;
   __s32 signal ;
   __s32 afc ;
   __u32 reserved[4U] ;
};
#line 1817  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_modulator {
   __u32 index ;
   __u8 name[32U] ;
   __u32 capability ;
   __u32 rangelow ;
   __u32 rangehigh ;
   __u32 txsubchans ;
   __u32 type ;
   __u32 reserved[3U] ;
};
#line 1860  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_frequency {
   __u32 tuner ;
   __u32 type ;
   __u32 frequency ;
   __u32 reserved[8U] ;
};
#line 1871  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_frequency_band {
   __u32 tuner ;
   __u32 type ;
   __u32 index ;
   __u32 capability ;
   __u32 rangelow ;
   __u32 rangehigh ;
   __u32 modulation ;
   __u32 reserved[9U] ;
};
#line 2043  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_vbi_format {
   __u32 sampling_rate ;
   __u32 offset ;
   __u32 samples_per_line ;
   __u32 sample_format ;
   __s32 start[2U] ;
   __u32 count[2U] ;
   __u32 flags ;
   __u32 reserved[2U] ;
};
#line 2071  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_sliced_vbi_format {
   __u16 service_set ;
   __u16 service_lines[2U][24U] ;
   __u32 io_size ;
   __u32 reserved[2U] ;
};
#line 2095  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_sliced_vbi_cap {
   __u16 service_set ;
   __u16 service_lines[2U][24U] ;
   __u32 type ;
   __u32 reserved[3U] ;
};
#line 2106  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_sliced_vbi_data {
   __u32 id ;
   __u32 field ;
   __u32 line ;
   __u32 reserved ;
   __u8 data[48U] ;
};
#line 2350  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_event_subscription {
   __u32 type ;
   __u32 id ;
   __u32 flags ;
   __u32 reserved[5U] ;
};
#line 2375  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
union __anonunion_2820 {
   __u32 addr ;
   char name[32U] ;
};
#line 2375  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_dbg_match {
   __u32 type ;
   union __anonunion_2820 __anonCompField_v4l2_dbg_match_87 ;
} __attribute__((__packed__));
#line 2383  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_dbg_register {
   struct v4l2_dbg_match match ;
   __u32 size ;
   __u64 reg ;
   __u64 val ;
} __attribute__((__packed__));
#line 57  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_device;
#line 57  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_gobj {
   struct media_device *mdev ;
   u32 id ;
   struct list_head list ;
};
#line 72  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_entity_enum {
   unsigned long *bmap ;
   int idx_max ;
};
#line 88 
struct media_entity;
#line 88  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct __anonstruct_stack_2824 {
   struct media_entity *entity ;
   struct list_head *link ;
};
#line 88  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_graph {
   struct __anonstruct_stack_2824 stack[16U] ;
   struct media_entity_enum ent_enum ;
   int top ;
};
#line 104  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_pipeline {
   int streaming_count ;
   struct media_graph graph ;
};
#line 132 
struct media_pad;
#line 132 
struct media_interface;
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
union __anonunion_2825 {
   struct media_gobj *gobj0 ;
   struct media_pad *source ;
   struct media_interface *intf ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
union __anonunion_2826 {
   struct media_gobj *gobj1 ;
   struct media_pad *sink ;
   struct media_entity *entity ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_link {
   struct media_gobj graph_obj ;
   struct list_head list ;
   union __anonunion_2825 __anonCompField_media_link_90 ;
   union __anonunion_2826 __anonCompField_media_link_91 ;
   struct media_link *reverse ;
   unsigned long flags ;
   bool is_backlink ;
};
#line 149 
enum media_pad_signal_type {
    PAD_SIGNAL_DEFAULT = 0,
    PAD_SIGNAL_ANALOG = 1,
    PAD_SIGNAL_DV = 2,
    PAD_SIGNAL_AUDIO = 3
};
#line 189  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_pad {
   struct media_gobj graph_obj ;
   struct media_entity *entity ;
   u16 index ;
   enum media_pad_signal_type sig_type ;
   unsigned long flags ;
};
#line 214  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_entity_operations {
   int (*get_fwnode_pad)(struct fwnode_endpoint *) ;
   int (*link_setup)(struct media_entity *, struct media_pad *, struct media_pad *, u32 ) ;
   int (*link_validate)(struct media_link *) ;
};
#line 221 
enum media_entity_type {
    MEDIA_ENTITY_TYPE_BASE = 0,
    MEDIA_ENTITY_TYPE_VIDEO_DEVICE = 1,
    MEDIA_ENTITY_TYPE_V4L2_SUBDEV = 2
};
#line 289  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct __anonstruct_dev_2828 {
   u32 major ;
   u32 minor ;
};
#line 289  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
union __anonunion_info_2827 {
   struct __anonstruct_dev_2828 dev ;
};
#line 289  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_entity {
   struct media_gobj graph_obj ;
   char *name ;
   enum media_entity_type obj_type ;
   u32 function ;
   unsigned long flags ;
   u16 num_pads ;
   u16 num_links ;
   u16 num_backlinks ;
   int internal_idx ;
   struct media_pad *pads ;
   struct list_head links ;
   struct media_entity_operations *ops ;
   int stream_count ;
   int use_count ;
   struct media_pipeline *pipe ;
   union __anonunion_info_2827 info ;
};
#line 335  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_interface {
   struct media_gobj graph_obj ;
   struct list_head links ;
   u32 type ;
   u32 flags ;
};
#line 349  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_intf_devnode {
   struct media_interface intf ;
   u32 major ;
   u32 minor ;
};
#line 1087 
enum vfl_devnode_type {
    VFL_TYPE_GRABBER = 0,
    VFL_TYPE_VBI = 1,
    VFL_TYPE_RADIO = 2,
    VFL_TYPE_SUBDEV = 3,
    VFL_TYPE_SDR = 4,
    VFL_TYPE_TOUCH = 5,
    VFL_TYPE_MAX = 6
};
#line 1097 
enum vfl_devnode_direction {
    VFL_DIR_RX = 0,
    VFL_DIR_TX = 1,
    VFL_DIR_M2M = 2
};
#line 1104 
struct video_device;
#line 1105 
struct v4l2_device;
#line 1106 
struct v4l2_ctrl_handler;
#line 104  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-dev.h"
struct v4l2_prio_state {
   atomic_t prios[4U] ;
};
#line 193  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-dev.h"
struct v4l2_file_operations {
   struct module *owner ;
   ssize_t (*read)(struct file *, char *, size_t , loff_t *) ;
   ssize_t (*write)(struct file *, char *, size_t , loff_t *) ;
   __poll_t (*poll)(struct file *, struct poll_table_struct *) ;
   long (*unlocked_ioctl)(struct file *, unsigned int , unsigned long ) ;
   long (*compat_ioctl32)(struct file *, unsigned int , unsigned long ) ;
   unsigned long (*get_unmapped_area)(struct file *, unsigned long , unsigned long , unsigned long , unsigned long ) ;
   int (*mmap)(struct file *, struct vm_area_struct *) ;
   int (*open)(struct file *) ;
   int (*release)(struct file *) ;
};
#line 256 
struct vb2_queue;
#line 256 
struct v4l2_ioctl_ops;
#line 256  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-dev.h"
struct video_device {
   struct media_entity entity ;
   struct media_intf_devnode *intf_devnode ;
   struct media_pipeline pipe ;
   struct v4l2_file_operations *fops ;
   u32 device_caps ;
   struct device dev ;
   struct cdev *cdev ;
   struct v4l2_device *v4l2_dev ;
   struct device *dev_parent ;
   struct v4l2_ctrl_handler *ctrl_handler ;
   struct vb2_queue *queue ;
   struct v4l2_prio_state *prio ;
   char name[32U] ;
   enum vfl_devnode_type vfl_type ;
   enum vfl_devnode_direction vfl_dir ;
   int minor ;
   u16 num ;
   unsigned long flags ;
   int index ;
   spinlock_t fh_lock ;
   struct list_head fh_list ;
   int dev_debug ;
   v4l2_std_id tvnorms ;
   void (*release)(struct video_device *) ;
   struct v4l2_ioctl_ops *ioctl_ops ;
   unsigned long valid_ioctls[3U] ;
   struct mutex *lock ;
};
#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-common.h"
struct v4l2_subdev;
#line 96 
struct v4l2_subdev_ops;
#line 335  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-common.h"
struct v4l2_priv_tun_config {
   int tuner ;
   void *priv ;
};
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-devnode.h"
struct media_file_operations {
   struct module *owner ;
   ssize_t (*read)(struct file *, char *, size_t , loff_t *) ;
   ssize_t (*write)(struct file *, char *, size_t , loff_t *) ;
   __poll_t (*poll)(struct file *, struct poll_table_struct *) ;
   long (*ioctl)(struct file *, unsigned int , unsigned long ) ;
   long (*compat_ioctl)(struct file *, unsigned int , unsigned long ) ;
   int (*open)(struct file *) ;
   int (*release)(struct file *) ;
};
#line 75  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-devnode.h"
struct media_devnode {
   struct media_device *media_dev ;
   struct media_file_operations *fops ;
   struct device dev ;
   struct cdev cdev ;
   struct device *parent ;
   int minor ;
   unsigned long flags ;
   void (*release)(struct media_devnode *) ;
};
#line 65  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-device.h"
struct media_request;
#line 65  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-device.h"
struct media_device_ops {
   int (*link_notify)(struct media_link *, u32 , unsigned int ) ;
   struct media_request *(*req_alloc)(struct media_device *) ;
   void (*req_free)(struct media_request *) ;
   int (*req_validate)(struct media_request *) ;
   void (*req_queue)(struct media_request *) ;
};
#line 144  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-device.h"
struct media_device {
   struct device *dev ;
   struct media_devnode *devnode ;
   char model[32U] ;
   char driver_name[32U] ;
   char serial[40U] ;
   char bus_info[32U] ;
   u32 hw_revision ;
   u64 topology_version ;
   u32 id ;
   struct ida entity_internal_idx ;
   int entity_internal_idx_max ;
   struct list_head entities ;
   struct list_head interfaces ;
   struct list_head pads ;
   struct list_head links ;
   struct list_head entity_notify ;
   struct mutex graph_mutex ;
   struct media_graph pm_count_walk ;
   void *source_priv ;
   int (*enable_source)(struct media_entity *, struct media_pipeline *) ;
   void (*disable_source)(struct media_entity *) ;
   struct media_device_ops *ops ;
   struct mutex req_queue_mutex ;
   atomic_t request_id ;
};
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-mediabus.h"
struct v4l2_mbus_framefmt {
   __u32 width ;
   __u32 height ;
   __u32 code ;
   __u32 field ;
   __u32 colorspace ;
   __u16 ycbcr_enc ;
   __u16 quantization ;
   __u16 xfer_func ;
   __u16 reserved[11U] ;
};
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-subdev.h"
struct v4l2_subdev_format {
   __u32 which ;
   __u32 pad ;
   struct v4l2_mbus_framefmt format ;
   __u32 reserved[8U] ;
};
#line 75  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-subdev.h"
struct v4l2_subdev_mbus_code_enum {
   __u32 pad ;
   __u32 index ;
   __u32 code ;
   __u32 which ;
   __u32 reserved[8U] ;
};
#line 90  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-subdev.h"
struct v4l2_subdev_frame_size_enum {
   __u32 index ;
   __u32 pad ;
   __u32 code ;
   __u32 min_width ;
   __u32 max_width ;
   __u32 min_height ;
   __u32 max_height ;
   __u32 which ;
   __u32 reserved[8U] ;
};
#line 107  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-subdev.h"
struct v4l2_subdev_frame_interval {
   __u32 pad ;
   struct v4l2_fract interval ;
   __u32 reserved[9U] ;
};
#line 123  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-subdev.h"
struct v4l2_subdev_frame_interval_enum {
   __u32 index ;
   __u32 pad ;
   __u32 code ;
   __u32 width ;
   __u32 height ;
   struct v4l2_fract interval ;
   __u32 which ;
   __u32 reserved[8U] ;
};
#line 149  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-subdev.h"
struct v4l2_subdev_selection {
   __u32 which ;
   __u32 pad ;
   __u32 target ;
   __u32 flags ;
   struct v4l2_rect r ;
   __u32 reserved[8U] ;
};
#line 157 
struct v4l2_async_notifier;
#line 158 
enum v4l2_async_match_type {
    V4L2_ASYNC_MATCH_CUSTOM = 0,
    V4L2_ASYNC_MATCH_DEVNAME = 1,
    V4L2_ASYNC_MATCH_I2C = 2,
    V4L2_ASYNC_MATCH_FWNODE = 3
};
#line 79  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-async.h"
struct __anonstruct_i2c_2842 {
   int adapter_id ;
   unsigned short address ;
};
#line 79  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-async.h"
struct __anonstruct_custom_2843 {
   bool (*match)(struct device *, struct v4l2_async_subdev *) ;
   void *priv ;
};
#line 79  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-async.h"
union __anonunion_match_2841 {
   struct fwnode_handle *fwnode ;
   char *device_name ;
   struct __anonstruct_i2c_2842 i2c ;
   struct __anonstruct_custom_2843 custom ;
};
#line 79  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-async.h"
struct v4l2_async_subdev {
   enum v4l2_async_match_type match_type ;
   union __anonunion_match_2841 match ;
   struct list_head list ;
   struct list_head asd_list ;
};
#line 107  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-async.h"
struct v4l2_async_notifier_operations {
   int (*bound)(struct v4l2_async_notifier *, struct v4l2_subdev *, struct v4l2_async_subdev *) ;
   int (*complete)(struct v4l2_async_notifier *) ;
   void (*unbind)(struct v4l2_async_notifier *, struct v4l2_subdev *, struct v4l2_async_subdev *) ;
};
#line 129  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-async.h"
struct v4l2_async_notifier {
   struct v4l2_async_notifier_operations *ops ;
   struct v4l2_device *v4l2_dev ;
   struct v4l2_subdev *sd ;
   struct v4l2_async_notifier *parent ;
   struct list_head asd_list ;
   struct list_head waiting ;
   struct list_head done ;
   struct list_head list ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-fh.h"
struct v4l2_m2m_ctx;
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-fh.h"
struct v4l2_fh {
   struct list_head list ;
   struct video_device *vdev ;
   struct v4l2_ctrl_handler *ctrl_handler ;
   enum v4l2_priority prio ;
   wait_queue_head_t wait ;
   struct mutex subscribe_lock ;
   struct list_head subscribed ;
   struct list_head available ;
   unsigned int navailable ;
   u32 sequence ;
   struct v4l2_m2m_ctx *m2m_ctx ;
};
#line 162 
enum v4l2_mbus_type {
    V4L2_MBUS_UNKNOWN = 0,
    V4L2_MBUS_PARALLEL = 1,
    V4L2_MBUS_BT656 = 2,
    V4L2_MBUS_CSI1 = 3,
    V4L2_MBUS_CCP2 = 4,
    V4L2_MBUS_CSI2_DPHY = 5,
    V4L2_MBUS_CSI2_CPHY = 6
};
#line 97  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-mediabus.h"
struct v4l2_mbus_config {
   enum v4l2_mbus_type type ;
   unsigned int flags ;
};
#line 184 
struct v4l2_subdev_fh;
#line 185 
struct tuner_setup;
#line 186 
struct v4l2_mbus_frame_desc;
#line 52  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_decode_vbi_line {
   u32 is_second_field ;
   u8 *p ;
   u32 line ;
   u32 type ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_io_pin_config {
   u32 flags ;
   u8 pin ;
   u8 function ;
   u8 value ;
   u8 strength ;
};
#line 188  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_core_ops {
   int (*log_status)(struct v4l2_subdev *) ;
   int (*s_io_pin_config)(struct v4l2_subdev *, size_t , struct v4l2_subdev_io_pin_config *) ;
   int (*init)(struct v4l2_subdev *, u32 ) ;
   int (*load_fw)(struct v4l2_subdev *) ;
   int (*reset)(struct v4l2_subdev *, u32 ) ;
   int (*s_gpio)(struct v4l2_subdev *, u32 ) ;
   long (*ioctl)(struct v4l2_subdev *, unsigned int , void *) ;
   long (*compat_ioctl32)(struct v4l2_subdev *, unsigned int , unsigned long ) ;
   int (*g_register)(struct v4l2_subdev *, struct v4l2_dbg_register *) ;
   int (*s_register)(struct v4l2_subdev *, struct v4l2_dbg_register *) ;
   int (*s_power)(struct v4l2_subdev *, int ) ;
   int (*interrupt_service_routine)(struct v4l2_subdev *, u32 , bool *) ;
   int (*subscribe_event)(struct v4l2_subdev *, struct v4l2_fh *, struct v4l2_event_subscription *) ;
   int (*unsubscribe_event)(struct v4l2_subdev *, struct v4l2_fh *, struct v4l2_event_subscription *) ;
};
#line 264  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_tuner_ops {
   int (*standby)(struct v4l2_subdev *) ;
   int (*s_radio)(struct v4l2_subdev *) ;
   int (*s_frequency)(struct v4l2_subdev *, struct v4l2_frequency *) ;
   int (*g_frequency)(struct v4l2_subdev *, struct v4l2_frequency *) ;
   int (*enum_freq_bands)(struct v4l2_subdev *, struct v4l2_frequency_band *) ;
   int (*g_tuner)(struct v4l2_subdev *, struct v4l2_tuner *) ;
   int (*s_tuner)(struct v4l2_subdev *, struct v4l2_tuner *) ;
   int (*g_modulator)(struct v4l2_subdev *, struct v4l2_modulator *) ;
   int (*s_modulator)(struct v4l2_subdev *, struct v4l2_modulator *) ;
   int (*s_type_addr)(struct v4l2_subdev *, struct tuner_setup *) ;
   int (*s_config)(struct v4l2_subdev *, struct v4l2_priv_tun_config *) ;
};
#line 304  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_audio_ops {
   int (*s_clock_freq)(struct v4l2_subdev *, u32 ) ;
   int (*s_i2s_clock_freq)(struct v4l2_subdev *, u32 ) ;
   int (*s_routing)(struct v4l2_subdev *, u32 , u32 , u32 ) ;
   int (*s_stream)(struct v4l2_subdev *, int ) ;
};
#line 310 
enum v4l2_mbus_frame_desc_flags {
    V4L2_MBUS_FRAME_DESC_FL_LEN_MAX = 1,
    V4L2_MBUS_FRAME_DESC_FL_BLOB = 2
};
#line 335  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_mbus_frame_desc_entry {
   enum v4l2_mbus_frame_desc_flags flags ;
   u32 pixelcode ;
   u32 length ;
};
#line 348  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_mbus_frame_desc {
   struct v4l2_mbus_frame_desc_entry entry[4U] ;
   unsigned short num_entries ;
};
#line 415  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_video_ops {
   int (*s_routing)(struct v4l2_subdev *, u32 , u32 , u32 ) ;
   int (*s_crystal_freq)(struct v4l2_subdev *, u32 , u32 ) ;
   int (*g_std)(struct v4l2_subdev *, v4l2_std_id *) ;
   int (*s_std)(struct v4l2_subdev *, v4l2_std_id ) ;
   int (*s_std_output)(struct v4l2_subdev *, v4l2_std_id ) ;
   int (*g_std_output)(struct v4l2_subdev *, v4l2_std_id *) ;
   int (*querystd)(struct v4l2_subdev *, v4l2_std_id *) ;
   int (*g_tvnorms)(struct v4l2_subdev *, v4l2_std_id *) ;
   int (*g_tvnorms_output)(struct v4l2_subdev *, v4l2_std_id *) ;
   int (*g_input_status)(struct v4l2_subdev *, u32 *) ;
   int (*s_stream)(struct v4l2_subdev *, int ) ;
   int (*g_pixelaspect)(struct v4l2_subdev *, struct v4l2_fract *) ;
   int (*g_frame_interval)(struct v4l2_subdev *, struct v4l2_subdev_frame_interval *) ;
   int (*s_frame_interval)(struct v4l2_subdev *, struct v4l2_subdev_frame_interval *) ;
   int (*s_dv_timings)(struct v4l2_subdev *, struct v4l2_dv_timings *) ;
   int (*g_dv_timings)(struct v4l2_subdev *, struct v4l2_dv_timings *) ;
   int (*query_dv_timings)(struct v4l2_subdev *, struct v4l2_dv_timings *) ;
   int (*g_mbus_config)(struct v4l2_subdev *, struct v4l2_mbus_config *) ;
   int (*s_mbus_config)(struct v4l2_subdev *, struct v4l2_mbus_config *) ;
   int (*s_rx_buffer)(struct v4l2_subdev *, void *, unsigned int *) ;
};
#line 481  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_vbi_ops {
   int (*decode_vbi_line)(struct v4l2_subdev *, struct v4l2_decode_vbi_line *) ;
   int (*s_vbi_data)(struct v4l2_subdev *, struct v4l2_sliced_vbi_data *) ;
   int (*g_vbi_data)(struct v4l2_subdev *, struct v4l2_sliced_vbi_data *) ;
   int (*g_sliced_vbi_cap)(struct v4l2_subdev *, struct v4l2_sliced_vbi_cap *) ;
   int (*s_raw_fmt)(struct v4l2_subdev *, struct v4l2_vbi_format *) ;
   int (*g_sliced_fmt)(struct v4l2_subdev *, struct v4l2_sliced_vbi_format *) ;
   int (*s_sliced_fmt)(struct v4l2_subdev *, struct v4l2_sliced_vbi_format *) ;
};
#line 501  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_sensor_ops {
   int (*g_skip_top_lines)(struct v4l2_subdev *, u32 *) ;
   int (*g_skip_frames)(struct v4l2_subdev *, u32 *) ;
};
#line 505 
enum v4l2_subdev_ir_mode {
    V4L2_SUBDEV_IR_MODE_PULSE_WIDTH = 0
};
#line 540  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_ir_parameters {
   unsigned int bytes_per_data_element ;
   enum v4l2_subdev_ir_mode mode ;
   bool enable ;
   bool interrupt_enable ;
   bool shutdown ;
   bool modulation ;
   u32 max_pulse_width ;
   unsigned int carrier_freq ;
   unsigned int duty_cycle ;
   bool invert_level ;
   bool invert_carrier_sense ;
   u32 noise_filter_min_width ;
   unsigned int carrier_range_lower ;
   unsigned int carrier_range_upper ;
   u32 resolution ;
};
#line 599  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_ir_ops {
   int (*rx_read)(struct v4l2_subdev *, u8 *, size_t , ssize_t *) ;
   int (*rx_g_parameters)(struct v4l2_subdev *, struct v4l2_subdev_ir_parameters *) ;
   int (*rx_s_parameters)(struct v4l2_subdev *, struct v4l2_subdev_ir_parameters *) ;
   int (*tx_write)(struct v4l2_subdev *, u8 *, size_t , ssize_t *) ;
   int (*tx_g_parameters)(struct v4l2_subdev *, struct v4l2_subdev_ir_parameters *) ;
   int (*tx_s_parameters)(struct v4l2_subdev *, struct v4l2_subdev_ir_parameters *) ;
};
#line 630  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_pad_config {
   struct v4l2_mbus_framefmt try_fmt ;
   struct v4l2_rect try_crop ;
   struct v4l2_rect try_compose ;
};
#line 674  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_pad_ops {
   int (*init_cfg)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *) ;
   int (*enum_mbus_code)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *, struct v4l2_subdev_mbus_code_enum *) ;
   int (*enum_frame_size)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *, struct v4l2_subdev_frame_size_enum *) ;
   int (*enum_frame_interval)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *, struct v4l2_subdev_frame_interval_enum *) ;
   int (*get_fmt)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *, struct v4l2_subdev_format *) ;
   int (*set_fmt)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *, struct v4l2_subdev_format *) ;
   int (*get_selection)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *, struct v4l2_subdev_selection *) ;
   int (*set_selection)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *, struct v4l2_subdev_selection *) ;
   int (*get_edid)(struct v4l2_subdev *, struct v4l2_edid *) ;
   int (*set_edid)(struct v4l2_subdev *, struct v4l2_edid *) ;
   int (*dv_timings_cap)(struct v4l2_subdev *, struct v4l2_dv_timings_cap *) ;
   int (*enum_dv_timings)(struct v4l2_subdev *, struct v4l2_enum_dv_timings *) ;
   int (*link_validate)(struct v4l2_subdev *, struct media_link *, struct v4l2_subdev_format *, struct v4l2_subdev_format *) ;
   int (*get_frame_desc)(struct v4l2_subdev *, unsigned int , struct v4l2_mbus_frame_desc *) ;
   int (*set_frame_desc)(struct v4l2_subdev *, unsigned int , struct v4l2_mbus_frame_desc *) ;
};
#line 727  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_ops {
   struct v4l2_subdev_core_ops *core ;
   struct v4l2_subdev_tuner_ops *tuner ;
   struct v4l2_subdev_audio_ops *audio ;
   struct v4l2_subdev_video_ops *video ;
   struct v4l2_subdev_vbi_ops *vbi ;
   struct v4l2_subdev_ir_ops *ir ;
   struct v4l2_subdev_sensor_ops *sensor ;
   struct v4l2_subdev_pad_ops *pad ;
};
#line 765  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_internal_ops {
   int (*registered)(struct v4l2_subdev *) ;
   void (*unregistered)(struct v4l2_subdev *) ;
   int (*open)(struct v4l2_subdev *, struct v4l2_subdev_fh *) ;
   int (*close)(struct v4l2_subdev *, struct v4l2_subdev_fh *) ;
   void (*release)(struct v4l2_subdev *) ;
};
#line 772 
struct regulator_bulk_data;
#line 797  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_platform_data {
   struct regulator_bulk_data *regulators ;
   int num_regulators ;
   void *host_priv ;
};
#line 848  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev {
   struct media_entity entity ;
   struct list_head list ;
   struct module *owner ;
   bool owner_v4l2_dev ;
   u32 flags ;
   struct v4l2_device *v4l2_dev ;
   struct v4l2_subdev_ops *ops ;
   struct v4l2_subdev_internal_ops *internal_ops ;
   struct v4l2_ctrl_handler *ctrl_handler ;
   char name[32U] ;
   u32 grp_id ;
   void *dev_priv ;
   void *host_priv ;
   struct video_device *devnode ;
   struct device *dev ;
   struct fwnode_handle *fwnode ;
   struct list_head async_list ;
   struct v4l2_async_subdev *asd ;
   struct v4l2_async_notifier *notifier ;
   struct v4l2_async_notifier *subdev_notifier ;
   struct v4l2_subdev_platform_data *pdata ;
};
#line 906  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_fh {
   struct v4l2_fh vfh ;
   struct module *owner ;
   struct v4l2_subdev_pad_config *pad ;
};
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-device.h"
struct v4l2_device {
   struct device *dev ;
   struct media_device *mdev ;
   struct list_head subdevs ;
   spinlock_t lock ;
   char name[36U] ;
   void (*notify)(struct v4l2_subdev *, unsigned int , void *) ;
   struct v4l2_ctrl_handler *ctrl_handler ;
   struct v4l2_prio_state prio ;
   struct kref ref ;
   void (*release)(struct v4l2_device *) ;
};
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 277  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ptp_clock_kernel.h"
struct dma_chan;
#line 279 
struct spi_controller;
#line 280 
struct spi_transfer;
#line 281 
struct spi_controller_mem_ops;
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spi/spi.h"
struct spi_statistics {
   spinlock_t lock ;
   unsigned long messages ;
   unsigned long transfers ;
   unsigned long errors ;
   unsigned long timedout ;
   unsigned long spi_sync ;
   unsigned long spi_sync_immediate ;
   unsigned long spi_async ;
   unsigned long long bytes ;
   unsigned long long bytes_rx ;
   unsigned long long bytes_tx ;
   unsigned long transfer_bytes_histo[17U] ;
   unsigned long transfers_split_maxsize ;
};
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spi/spi.h"
struct spi_delay {
   u16 value ;
   u8 unit ;
};
#line 157  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spi/spi.h"
struct spi_device {
   struct device dev ;
   struct spi_controller *controller ;
   struct spi_controller *master ;
   u32 max_speed_hz ;
   u8 chip_select ;
   u8 bits_per_word ;
   bool rt ;
   u32 mode ;
   int irq ;
   void *controller_state ;
   void *controller_data ;
   char modalias[32U] ;
   char *driver_override ;
   int cs_gpio ;
   struct gpio_desc *cs_gpiod ;
   struct spi_delay word_delay ;
   struct spi_statistics statistics ;
};
#line 247 
struct spi_message;
#line 452  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spi/spi.h"
struct spi_controller {
   struct device dev ;
   struct list_head list ;
   s16 bus_num ;
   u16 num_chipselect ;
   u16 dma_alignment ;
   u32 mode_bits ;
   u32 bits_per_word_mask ;
   u32 min_speed_hz ;
   u32 max_speed_hz ;
   u16 flags ;
   bool slave ;
   size_t (*max_transfer_size)(struct spi_device *) ;
   size_t (*max_message_size)(struct spi_device *) ;
   struct mutex io_mutex ;
   spinlock_t bus_lock_spinlock ;
   struct mutex bus_lock_mutex ;
   bool bus_lock_flag ;
   int (*setup)(struct spi_device *) ;
   int (*set_cs_timing)(struct spi_device *, struct spi_delay *, struct spi_delay *, struct spi_delay *) ;
   int (*transfer)(struct spi_device *, struct spi_message *) ;
   void (*cleanup)(struct spi_device *) ;
   bool (*can_dma)(struct spi_controller *, struct spi_device *, struct spi_transfer *) ;
   bool queued ;
   struct kthread_worker kworker ;
   struct task_struct *kworker_task ;
   struct kthread_work pump_messages ;
   spinlock_t queue_lock ;
   struct list_head queue ;
   struct spi_message *cur_msg ;
   bool idling ;
   bool busy ;
   bool running ;
   bool rt ;
   bool auto_runtime_pm ;
   bool cur_msg_prepared ;
   bool cur_msg_mapped ;
   struct completion xfer_completion ;
   size_t max_dma_len ;
   int (*prepare_transfer_hardware)(struct spi_controller *) ;
   int (*transfer_one_message)(struct spi_controller *, struct spi_message *) ;
   int (*unprepare_transfer_hardware)(struct spi_controller *) ;
   int (*prepare_message)(struct spi_controller *, struct spi_message *) ;
   int (*unprepare_message)(struct spi_controller *, struct spi_message *) ;
   int (*slave_abort)(struct spi_controller *) ;
   void (*set_cs)(struct spi_device *, bool ) ;
   int (*transfer_one)(struct spi_controller *, struct spi_device *, struct spi_transfer *) ;
   void (*handle_err)(struct spi_controller *, struct spi_message *) ;
   struct spi_controller_mem_ops *mem_ops ;
   struct spi_delay cs_setup ;
   struct spi_delay cs_hold ;
   struct spi_delay cs_inactive ;
   int *cs_gpios ;
   struct gpio_desc **cs_gpiods ;
   bool use_gpio_descriptors ;
   struct spi_statistics statistics ;
   struct dma_chan *dma_tx ;
   struct dma_chan *dma_rx ;
   void *dummy_rx ;
   void *dummy_tx ;
   int (*fw_translate_cs)(struct spi_controller *, unsigned int ) ;
   bool ptp_sts_supported ;
   unsigned long irq_flags ;
};
#line 890  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spi/spi.h"
struct spi_transfer {
   void *tx_buf ;
   void *rx_buf ;
   unsigned int len ;
   dma_addr_t tx_dma ;
   dma_addr_t rx_dma ;
   struct sg_table tx_sg ;
   struct sg_table rx_sg ;
   unsigned int cs_change : 1 ;
   unsigned int tx_nbits : 3 ;
   unsigned int rx_nbits : 3 ;
   u8 bits_per_word ;
   u16 delay_usecs ;
   struct spi_delay delay ;
   struct spi_delay cs_change_delay ;
   struct spi_delay word_delay ;
   u32 speed_hz ;
   u32 effective_speed_hz ;
   unsigned int ptp_sts_word_pre ;
   unsigned int ptp_sts_word_post ;
   struct ptp_system_timestamp *ptp_sts ;
   bool timestamped_pre ;
   bool timestamped_post ;
   struct list_head transfer_list ;
};
#line 961  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spi/spi.h"
struct spi_message {
   struct list_head transfers ;
   struct spi_device *spi ;
   unsigned int is_dma_mapped : 1 ;
   void (*complete)(void *) ;
   void *context ;
   unsigned int frame_length ;
   unsigned int actual_length ;
   int status ;
   struct list_head queue ;
   void *state ;
   struct list_head resources ;
};
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 157  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_fix_screeninfo {
   char id[16U] ;
   unsigned long smem_start ;
   __u32 smem_len ;
   __u32 type ;
   __u32 type_aux ;
   __u32 visual ;
   __u16 xpanstep ;
   __u16 ypanstep ;
   __u16 ywrapstep ;
   __u32 line_length ;
   unsigned long mmio_start ;
   __u32 mmio_len ;
   __u32 accel ;
   __u16 capabilities ;
   __u16 reserved[2U] ;
};
#line 188  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_bitfield {
   __u32 offset ;
   __u32 length ;
   __u32 msb_right ;
};
#line 241  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_var_screeninfo {
   __u32 xres ;
   __u32 yres ;
   __u32 xres_virtual ;
   __u32 yres_virtual ;
   __u32 xoffset ;
   __u32 yoffset ;
   __u32 bits_per_pixel ;
   __u32 grayscale ;
   struct fb_bitfield red ;
   struct fb_bitfield green ;
   struct fb_bitfield blue ;
   struct fb_bitfield transp ;
   __u32 nonstd ;
   __u32 activate ;
   __u32 height ;
   __u32 width ;
   __u32 accel_flags ;
   __u32 pixclock ;
   __u32 left_margin ;
   __u32 right_margin ;
   __u32 upper_margin ;
   __u32 lower_margin ;
   __u32 hsync_len ;
   __u32 vsync_len ;
   __u32 sync ;
   __u32 vmode ;
   __u32 rotate ;
   __u32 colorspace ;
   __u32 reserved[4U] ;
};
#line 281  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_cmap {
   __u32 start ;
   __u32 len ;
   __u16 *red ;
   __u16 *green ;
   __u16 *blue ;
   __u16 *transp ;
};
#line 341  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_copyarea {
   __u32 dx ;
   __u32 dy ;
   __u32 width ;
   __u32 height ;
   __u32 sx ;
   __u32 sy ;
};
#line 350  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_fillrect {
   __u32 dx ;
   __u32 dy ;
   __u32 width ;
   __u32 height ;
   __u32 color ;
   __u32 rop ;
};
#line 359  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_image {
   __u32 dx ;
   __u32 dy ;
   __u32 width ;
   __u32 height ;
   __u32 fg_color ;
   __u32 bg_color ;
   __u8 depth ;
   char *data ;
   struct fb_cmap cmap ;
};
#line 383  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fbcurpos {
   __u16 x ;
   __u16 y ;
};
#line 387  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_cursor {
   __u16 set ;
   __u16 enable ;
   __u16 rop ;
   char *mask ;
   struct fbcurpos hot ;
   struct fb_image image ;
};
#line 400 
enum backlight_type {
    BACKLIGHT_RAW = 1,
    BACKLIGHT_PLATFORM = 2,
    BACKLIGHT_FIRMWARE = 3,
    BACKLIGHT_TYPE_MAX = 4
};
#line 412 
enum backlight_scale {
    BACKLIGHT_SCALE_UNKNOWN = 0,
    BACKLIGHT_SCALE_LINEAR = 1,
    BACKLIGHT_SCALE_NON_LINEAR = 2
};
#line 418 
struct backlight_device;
#line 419 
struct fb_info;
#line 58  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backlight.h"
struct backlight_ops {
   unsigned int options ;
   int (*update_status)(struct backlight_device *) ;
   int (*get_brightness)(struct backlight_device *) ;
   int (*check_fb)(struct backlight_device *, struct fb_info *) ;
};
#line 74  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backlight.h"
struct backlight_properties {
   int brightness ;
   int max_brightness ;
   int power ;
   int fb_blank ;
   enum backlight_type type ;
   unsigned int state ;
   enum backlight_scale scale ;
};
#line 97  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backlight.h"
struct backlight_device {
   struct backlight_properties props ;
   struct mutex update_lock ;
   struct mutex ops_lock ;
   struct backlight_ops *ops ;
   struct notifier_block fb_notif ;
   struct list_head entry ;
   struct device dev ;
   bool fb_bl_on[32U] ;
   int use_count ;
};
#line 52  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_chroma {
   __u32 redx ;
   __u32 greenx ;
   __u32 bluex ;
   __u32 whitex ;
   __u32 redy ;
   __u32 greeny ;
   __u32 bluey ;
   __u32 whitey ;
};
#line 63 
struct fb_videomode;
#line 63  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_monspecs {
   struct fb_chroma chroma ;
   struct fb_videomode *modedb ;
   __u8 manufacturer[4U] ;
   __u8 monitor[14U] ;
   __u8 serial_no[14U] ;
   __u8 ascii[14U] ;
   __u32 modedb_len ;
   __u32 model ;
   __u32 serial ;
   __u32 year ;
   __u32 week ;
   __u32 hfmin ;
   __u32 hfmax ;
   __u32 dclkmin ;
   __u32 dclkmax ;
   __u16 input ;
   __u16 dpms ;
   __u16 signal ;
   __u16 vfmin ;
   __u16 vfmax ;
   __u16 gamma ;
   __u16 gtf : 1 ;
   __u16 misc ;
   __u8 version ;
   __u8 revision ;
   __u8 max_x ;
   __u8 max_y ;
};
#line 144  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_blit_caps {
   u32 x ;
   u32 y ;
   u32 len ;
   u32 flags ;
};
#line 185  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_pixmap {
   u8 *addr ;
   u32 size ;
   u32 offset ;
   u32 buf_align ;
   u32 scan_align ;
   u32 access_align ;
   u32 flags ;
   u32 blit_x ;
   u32 blit_y ;
   void (*writeio)(struct fb_info *, void *, void *, unsigned int ) ;
   void (*readio)(struct fb_info *, void *, void *, unsigned int ) ;
};
#line 203  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_deferred_io {
   unsigned long delay ;
   struct mutex lock ;
   struct list_head pagelist ;
   void (*first_io)(struct fb_info *) ;
   void (*deferred_io)(struct fb_info *, struct list_head *) ;
};
#line 228  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_ops {
   struct module *owner ;
   int (*fb_open)(struct fb_info *, int ) ;
   int (*fb_release)(struct fb_info *, int ) ;
   ssize_t (*fb_read)(struct fb_info *, char *, size_t , loff_t *) ;
   ssize_t (*fb_write)(struct fb_info *, char *, size_t , loff_t *) ;
   int (*fb_check_var)(struct fb_var_screeninfo *, struct fb_info *) ;
   int (*fb_set_par)(struct fb_info *) ;
   int (*fb_setcolreg)(unsigned int , unsigned int , unsigned int , unsigned int , unsigned int , struct fb_info *) ;
   int (*fb_setcmap)(struct fb_cmap *, struct fb_info *) ;
   int (*fb_blank)(int , struct fb_info *) ;
   int (*fb_pan_display)(struct fb_var_screeninfo *, struct fb_info *) ;
   void (*fb_fillrect)(struct fb_info *, struct fb_fillrect *) ;
   void (*fb_copyarea)(struct fb_info *, struct fb_copyarea *) ;
   void (*fb_imageblit)(struct fb_info *, struct fb_image *) ;
   int (*fb_cursor)(struct fb_info *, struct fb_cursor *) ;
   int (*fb_sync)(struct fb_info *) ;
   int (*fb_ioctl)(struct fb_info *, unsigned int , unsigned long ) ;
   int (*fb_compat_ioctl)(struct fb_info *, unsigned int , unsigned long ) ;
   int (*fb_mmap)(struct fb_info *, struct vm_area_struct *) ;
   void (*fb_get_caps)(struct fb_info *, struct fb_blit_caps *, struct fb_var_screeninfo *) ;
   void (*fb_destroy)(struct fb_info *) ;
   int (*fb_debug_enter)(struct fb_info *) ;
   int (*fb_debug_leave)(struct fb_info *) ;
};
#line 306  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_tilemap {
   __u32 width ;
   __u32 height ;
   __u32 depth ;
   __u32 length ;
   __u8 *data ;
};
#line 315  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_tilerect {
   __u32 sx ;
   __u32 sy ;
   __u32 width ;
   __u32 height ;
   __u32 index ;
   __u32 fg ;
   __u32 bg ;
   __u32 rop ;
};
#line 326  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_tilearea {
   __u32 sx ;
   __u32 sy ;
   __u32 dx ;
   __u32 dy ;
   __u32 width ;
   __u32 height ;
};
#line 335  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_tileblit {
   __u32 sx ;
   __u32 sy ;
   __u32 width ;
   __u32 height ;
   __u32 fg ;
   __u32 bg ;
   __u32 length ;
   __u32 *indices ;
};
#line 346  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_tilecursor {
   __u32 sx ;
   __u32 sy ;
   __u32 mode ;
   __u32 shape ;
   __u32 fg ;
   __u32 bg ;
};
#line 355  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_tile_ops {
   void (*fb_settile)(struct fb_info *, struct fb_tilemap *) ;
   void (*fb_tilecopy)(struct fb_info *, struct fb_tilearea *) ;
   void (*fb_tilefill)(struct fb_info *, struct fb_tilerect *) ;
   void (*fb_tileblit)(struct fb_info *, struct fb_tileblit *) ;
   void (*fb_tilecursor)(struct fb_info *, struct fb_tilecursor *) ;
   int (*fb_get_tilemax)(struct fb_info *) ;
};
#line 499  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct aperture {
   resource_size_t base ;
   resource_size_t size ;
};
#line 497  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct apertures_struct {
   unsigned int count ;
   struct aperture ranges[0U] ;
};
#line 439  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
union __anonunion_3744 {
   char *screen_base ;
   char *screen_buffer ;
};
#line 439  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_info {
   atomic_t count ;
   int node ;
   int flags ;
   int fbcon_rotate_hint ;
   struct mutex lock ;
   struct mutex mm_lock ;
   struct fb_var_screeninfo var ;
   struct fb_fix_screeninfo fix ;
   struct fb_monspecs monspecs ;
   struct work_struct queue ;
   struct fb_pixmap pixmap ;
   struct fb_pixmap sprite ;
   struct fb_cmap cmap ;
   struct list_head modelist ;
   struct fb_videomode *mode ;
   struct backlight_device *bl_dev ;
   struct mutex bl_curve_mutex ;
   u8 bl_curve[128U] ;
   struct delayed_work deferred_work ;
   struct fb_deferred_io *fbdefio ;
   struct fb_ops *fbops ;
   struct device *device ;
   struct device *dev ;
   int class_flag ;
   struct fb_tile_ops *tileops ;
   union __anonunion_3744 __anonCompField_fb_info_73 ;
   unsigned long screen_size ;
   void *pseudo_palette ;
   u32 state ;
   void *fbcon_par ;
   void *par ;
   struct apertures_struct *apertures ;
   bool skip_vt_switch ;
};
#line 767  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_videomode {
   char *name ;
   u32 refresh ;
   u32 xres ;
   u32 yres ;
   u32 pixclock ;
   u32 left_margin ;
   u32 right_margin ;
   u32 upper_margin ;
   u32 lower_margin ;
   u32 hsync_len ;
   u32 vsync_len ;
   u32 sync ;
   u32 vmode ;
   u32 flag ;
};
#line 63  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
struct ldv_kmem_cache {
   char *name ;
   unsigned int size ;
};
#line 88  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
typedef unsigned long pthread_t;
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/thread.h"
union pthread_attr_t {
   char __size[56U] ;
   long __align ;
};
#line 30  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/thread.h"
typedef union pthread_attr_t pthread_attr_t;
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 16  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/broadcom/tg3.ko/concurrency safety/emg/0/environment_model.c"
struct emg_struct_free_irq_5 {
   int arg0 ;
   int signal_pending ;
};
#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/broadcom/tg3.ko/concurrency safety/emg/0/environment_model.c"
struct emg_struct_interrupt_scenario_tg3_test_isr_12 {
   int arg0 ;
   enum irqreturn (*arg1)(int , void *) ;
   enum irqreturn (*arg2)(int , void *) ;
   void *arg3 ;
   int signal_pending ;
};
#line 29  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/broadcom/tg3.ko/concurrency safety/emg/0/environment_model.c"
struct emg_struct_random_allocationless_scenario_tg3_get_channels_13 {
   struct net_device *arg0 ;
   int signal_pending ;
};
#line 34  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/broadcom/tg3.ko/concurrency safety/emg/0/environment_model.c"
struct emg_struct_pci_scenario_tg3_driver_14 {
   struct pci_driver *arg0 ;
   int signal_pending ;
};
/* compiler builtin: 
   unsigned short __builtin_bswap16(unsigned short);   */
/* compiler builtin: 
   unsigned int __builtin_bswap32(unsigned int);   */
/* compiler builtin: 
   void *__builtin_memcpy(void *, void const *, unsigned long);   */
/* compiler builtin: 
   unsigned long __builtin_object_size(void *, int);   */
/* compiler builtin: 
   void __builtin_prefetch(void const * , ...);   */
/* compiler builtin: 
   void __builtin_unreachable(void);   */
#line 22  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/common/inline_asm.h"
#line 22 
void ldv_inline_asm(void);
#line 16  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/broadcom/tg3.ko/concurrency safety/0/concurrency safety/weaver/tg3.i.aux"
#line 16 
struct task_struct *ldv_get_current(void);
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/export.h"
#line 16 
extern struct module __this_module;
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/compiler.h"
__inline static void __read_once_size(void *p, void *res, int size)
{
  #line 199 
  switch (size) {
    #line 199 
    case 1: 
            #line 199 
    ;
    #line 199 
    *((__u8 *)res) = *((__u8 *)p);
    #line 199 
    break;
    #line 199 
    case 2: 
            #line 199 
    ;
    #line 199 
    *((__u16 *)res) = *((__u16 *)p);
    #line 199 
    break;
    #line 199 
    case 4: 
            #line 199 
    ;
    #line 199 
    *((__u32 *)res) = *((__u32 *)p);
    #line 199 
    break;
    #line 199 
    case 8: 
            #line 199 
    ;
    #line 199 
    *((__u64 *)res) = *((__u64 *)p);
    #line 199 
    break;
    #line 199 
    default: 
             #line 199 
    ;
    #line 200 
    ldv_inline_asm();
    #line 199 
    __builtin_memcpy(res,(void const *)p,(unsigned long)size);
    #line 200 
    ldv_inline_asm();
  }
  #line 203 
  return;
}

#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kasan-checks.h"
__inline static bool kasan_check_read(void *p, unsigned int size)
{
  #line 36 
  return (_Bool)1;
}

#line 66  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/bitops.h"
__inline static void arch___set_bit(long nr, unsigned long *addr)
{
  #line 68 
  ldv_inline_asm();
  #line 69 
  return;
}

#line 136  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/bitops.h"
__inline static bool arch_test_and_set_bit(long nr, unsigned long *addr)
{
  #line 138 
  bool c;
  #line 139 
  ldv_inline_asm();
  #line 138 
  return c;
}

#line 204  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/bitops.h"
__inline static bool constant_test_bit(long nr, unsigned long *addr)
{
  #line 207 
  return (_Bool)(((*(addr + (unsigned long)(nr >> 6)) >> (nr & 63L)) & 1UL) != 0UL);
}

#line 210  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/bitops.h"
__inline static bool variable_test_bit(long nr, unsigned long *addr)
{
  #line 212 
  bool oldbit;
  #line 213 
  ldv_inline_asm();
  #line 219 
  return oldbit;
}

#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/arch_hweight.h"
__inline static unsigned int __arch_hweight32(unsigned int w)
{
  #line 17 
  unsigned int res;
  #line 18 
  ldv_inline_asm();
  #line 23 
  return res;
}

#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/arch_hweight.h"
__inline static unsigned int __arch_hweight8(unsigned int w)
{
  #line 33 
  return __arch_hweight32(w & 255U);
}

#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bitops/instrumented-atomic.h"
#line 389  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/broadcom/tg3.ko/concurrency safety/0/concurrency safety/weaver/tg3.i.aux"
static void cif_set_bit(long nr, unsigned long *addr);
#line 44  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bitops/instrumented-atomic.h"
#line 396  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/broadcom/tg3.ko/concurrency safety/0/concurrency safety/weaver/tg3.i.aux"
static void cif_clear_bit(long nr, unsigned long *addr);
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bitops/instrumented-atomic.h"
__inline static bool test_and_set_bit(long nr, unsigned long *addr)
{
  #line 70 
  kasan_check_read((void *)(addr + (unsigned long)(nr / 64L)),8U);
  #line 71 
  return arch_test_and_set_bit(nr,addr);
}

#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bitops/instrumented-non-atomic.h"
__inline static void __set_bit(long nr, unsigned long *addr)
{
  #line 27 
  kasan_check_read((void *)(addr + (unsigned long)(nr / 64L)),8U);
  #line 28 
  arch___set_bit(nr,addr);
  #line 29 
  return;
}

#line 108  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bitops/instrumented-non-atomic.h"
__inline static bool test_bit(long nr, unsigned long *addr)
{
  #line 111 
  int tmp_1;
  #line 110 
  kasan_check_read((void *)(addr + (unsigned long)(nr / 64L)),8U);
  #line 111 
  if (0 != 0) {
    #line 111 
    tmp_1 = (int)constant_test_bit(nr,addr) != 0;
  }
  else {
    #line 111 
    tmp_1 = (int)variable_test_bit(nr,addr) != 0;
  }
  #line 111 
  return (_Bool)(tmp_1 != 0);
}

#line 171  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/printk.h"
#line 171 
int printk(char * , ...);
#line 203  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernel.h"
#line 203 
void ___might_sleep(char *, int, int);
#line 469 
#line 469 
int sprintf(char *, char * , ...);
#line 472 
#line 472 
int snprintf(char *, size_t, char * , ...);
#line 570 
#line 570 
extern enum system_states system_state;
#line 26  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
#line 403  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/broadcom/tg3.ko/concurrency safety/0/concurrency safety/weaver/tg3.i.aux"
static void INIT_LIST_HEAD(struct list_head *list);
#line 88  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/percpu.h"
#line 88 
void __bad_percpu_size(void);
#line 309  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/percpu-defs.h"
#line 309 
void __bad_size_call_parameter(void);
#line 314  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/percpu-defs.h"
__inline static void __this_cpu_preempt_check(char *op)
{
  #line 316 
  return;
}

#line 89  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bug.h"
#line 89 
void __warn_printk(char * , ...);
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/math64.h"
__inline static u64 div_u64_rem(u64 dividend, u32 divisor, u32 *remainder)
{
  #line 26 
  *remainder = (unsigned int)(dividend % (unsigned long long)divisor);
  #line 27 
  return dividend / (unsigned long long)divisor;
}

#line 123  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/math64.h"
__inline static u64 div_u64(u64 dividend, u32 divisor)
{
  #line 125 
  u32 remainder;
  #line 126 
  return div_u64_rem(dividend,divisor,& remainder);
}

#line 133  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/time64.h"
__inline static s64 timespec64_to_ns(struct timespec64 *ts)
{
  #line 135 
  return ts->tv_sec * 1000000000LL + (long long)ts->tv_nsec;
}

#line 144 
#line 144 
struct timespec64 ns_to_timespec64(s64);
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/page_64.h"
#line 15 
extern unsigned long vmalloc_base;
#line 16 
#line 16 
extern unsigned long vmemmap_base;
#line 29 
#line 29 
unsigned long __phys_addr(unsigned long);
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/string_64.h"
#line 14 
void *memcpy(void *, void *, size_t);
#line 15 
#line 15 
void *__memcpy(void *, void *, size_t);
#line 18 
#line 18 
void *memset(void *, int, size_t);
#line 61 
#line 61 
int memcmp(void *, void *, size_t);
#line 63 
#line 63 
char *strcpy(char *, char *);
#line 64 
#line 64 
char *strcat(char *, char *);
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/string.h"
#line 29 
size_t strlcpy(char *, char *, size_t);
#line 42 
#line 42 
char *strncat(char *, char *, __kernel_size_t);
#line 88 
#line 417  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/broadcom/tg3.ko/concurrency safety/0/concurrency safety/weaver/tg3.i.aux"
static size_t cif_strlen(char *s);
#line 237  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bitmap.h"
__inline static void bitmap_copy(unsigned long *dst, unsigned long *src, unsigned int nbits)
{
  #line 240 
  unsigned int len = (unsigned int)(((unsigned long)nbits + 63UL) / 64UL) * 8U;
  #line 241 
  __memcpy((void *)dst,(void *)src,(unsigned long)len);
  #line 242 
  return;
}

#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/cmpxchg_64.h"
__inline static int arch_atomic_read(atomic_t *v)
{
  #line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/atomic.h"
  union __anonunion___u_67 __u;
  #line 31 
  __read_once_size((void *)(& v->counter),(void *)(& __u.__c),4);
  #line 31 
  return (__u.__val);
}

#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/atomic-instrumented.h"
__inline static int atomic_read(atomic_t *v)
{
  #line 26 
  kasan_check_read((void *)v,4U);
  #line 27 
  return arch_atomic_read(v);
}

#line 99  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cpumask.h"
#line 99 
extern atomic_t __num_online_cpus;
#line 110  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cpumask.h"
__inline static unsigned int num_online_cpus(void)
{
  #line 112 
  return (unsigned int)atomic_read(& __num_online_cpus);
}

#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/err.h"
#line 480  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/broadcom/tg3.ko/concurrency safety/0/concurrency safety/weaver/tg3.i.aux"
static long PTR_ERR(void *ptr);
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/err.h"
#line 487  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/broadcom/tg3.ko/concurrency safety/0/concurrency safety/weaver/tg3.i.aux"
static bool IS_ERR(void *ptr);
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/irqflags.h"
#line 20 
unsigned long native_save_fl(void);
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/irqflags.h"
unsigned long native_save_fl(void)
{
  #line 22 
  unsigned long flags;
  #line 23 
  ldv_inline_asm();
  #line 35 
  return flags;
}

#line 38 
#line 39 
void native_restore_fl(unsigned long flags);
#line 39  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/irqflags.h"
void native_restore_fl(unsigned long flags)
{
  #line 41 
  ldv_inline_asm();
  #line 42 
  return;
}

#line 173  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/cpufeature.h"
__inline static bool _static_cpu_has(u16 bit)
{
  #line 177 
  ldv_inline_asm();
  #line 178 
  ldv_inline_asm();
  #line 211 
  t_yes: 
         #line 211 
  ;
  #line 212 
  return (_Bool)1;
  #line 213 
  t_no: 
        #line 213 
  ;
  #line 214 
  return (_Bool)0;
}

#line 82  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/thread_info.h"
__inline static int test_ti_thread_flag(struct thread_info *ti, int flag)
{
  #line 84 
  return (int)test_bit((long)flag,& ti->flags);
}

#line 112 
#line 112 
void __check_object_size(void *, unsigned long, bool);
#line 115  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/thread_info.h"
__inline static void check_object_size(void *ptr, unsigned long n, bool to_user)
{
  #line 118 
  if (0 == 0) 
              #line 119 
              __check_object_size(ptr,n,(_Bool)((bool)((int)to_user) != 0));
  #line 120 
  return;
}

#line 128 
#line 128 
void __bad_copy_from(void);
#line 130 
#line 130 
void __bad_copy_to(void);
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/thread_info.h"
__inline static void copy_overflow(int size, unsigned long count)
{
  #line 134 
  int __ret_warn_on = 1;
  #line 134 
  if ((long)(__ret_warn_on != 0) != 0L) {
    #line 134 
    __warn_printk((char *)"Buffer overflow detected (%d < %lu)!\n",size,count);
    #line 135 
    ldv_inline_asm();
    #line 136 
    ldv_inline_asm();
  }
  #line 134 
  long tmp = (long)(__ret_warn_on != 0);
  #line 136 
  return;
}

#line 138  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/thread_info.h"
__inline static bool check_copy_size(void *addr, size_t bytes, bool is_source)
{
  #line 150 
  int __ret_warn_on;
  #line 140 
  int sz = (int)__builtin_object_size(addr,0);
  #line 141 
  if ((long)(sz >= 0) != 0L && (long)((unsigned long)sz < bytes) != 0L) {
    #line 142 
    if (0 == 0) 
                #line 143 
                copy_overflow(sz,bytes);
    else 
      #line 144 
      if ((int)is_source != 0) 
                               #line 145 
                               __bad_copy_from(); else 
                                                       #line 147 
                                                       __bad_copy_to();
    #line 148 
    return (_Bool)0;
  }
  #line 150 
  __ret_warn_on = bytes > 2147483647UL;
  #line 150 
  if ((long)(__ret_warn_on != 0) != 0L) {
    #line 151 
    ldv_inline_asm();
    #line 152 
    ldv_inline_asm();
  }
  #line 150 
  if ((long)((long)(__ret_warn_on != 0)) != 0L) 
                                                #line 151 
                                                return (_Bool)0;
  #line 152 
  check_object_size(addr,bytes,(_Bool)((bool)((int)is_source) != 0));
  #line 153 
  return (_Bool)1;
}

#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bottom_half.h"
#line 8 
void __local_bh_disable_ip(unsigned long, unsigned int);
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bottom_half.h"
__inline static void local_bh_disable(void)
{
  #line 19 
  __here_0: 
            #line 19 
  ;
  #line 19 
  __local_bh_disable_ip((unsigned long)((void *)0),512U);
  #line 21 
  return;
}

#line 23 
#line 23 
void __local_bh_enable_ip(unsigned long, unsigned int);
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bottom_half.h"
__inline static void local_bh_enable(void)
{
  #line 32 
  __here_0: 
            #line 32 
  ;
  #line 32 
  __local_bh_enable_ip((unsigned long)((void *)0),512U);
  #line 34 
  return;
}

#line 302  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockdep.h"
#line 302 
void lockdep_init_map(struct lockdep_map *, char *, struct lock_class_key *, int);
#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
#line 95 
void __raw_spin_lock_init(raw_spinlock_t *, char *, struct lock_class_key *);
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_api_smp.h"
#line 22 
void _raw_spin_lock(raw_spinlock_t *);
#line 28 
#line 28 
void _raw_spin_lock_bh(raw_spinlock_t *);
#line 39 
#line 39 
void _raw_spin_unlock(raw_spinlock_t *);
#line 40 
#line 40 
void _raw_spin_unlock_bh(raw_spinlock_t *);
#line 43 
#line 43 
void _raw_spin_unlock_irqrestore(raw_spinlock_t *, unsigned long);
#line 325  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
__inline static raw_spinlock_t *spinlock_check(spinlock_t *lock)
{
  #line 327 
  return & lock->__anonCompField_spinlock_25.rlock;
}

#line 336  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static void spin_lock(spinlock_t *lock)
{
  #line 338 
  _raw_spin_lock(& lock->__anonCompField_spinlock_25.rlock);
  #line 339 
  return;
}

#line 340 
#line 807  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/broadcom/tg3.ko/concurrency safety/0/concurrency safety/weaver/tg3.i.aux"
static void cif_spin_lock__xmit_lock_of_netdev_queue(spinlock_t *lock);
#line 340  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
#line 1147  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/broadcom/tg3.ko/concurrency safety/0/concurrency safety/weaver/tg3.i.aux"
static void cif_spin_lock_lock_of_tg3(spinlock_t *lock);
#line 341  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static void spin_lock_bh(spinlock_t *lock)
{
  #line 343 
  _raw_spin_lock_bh(& lock->__anonCompField_spinlock_25.rlock);
  #line 344 
  return;
}

#line 345 
#line 1129  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/broadcom/tg3.ko/concurrency safety/0/concurrency safety/weaver/tg3.i.aux"
static void cif_spin_lock_bh_lock_of_tg3(spinlock_t *lock);
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static void spin_unlock(spinlock_t *lock)
{
  #line 378 
  _raw_spin_unlock(& lock->__anonCompField_spinlock_25.rlock);
  #line 379 
  return;
}

#line 380 
#line 847  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/broadcom/tg3.ko/concurrency safety/0/concurrency safety/weaver/tg3.i.aux"
static void cif_spin_unlock__xmit_lock_of_netdev_queue(spinlock_t *lock);
#line 380  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
#line 1156  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/broadcom/tg3.ko/concurrency safety/0/concurrency safety/weaver/tg3.i.aux"
static void cif_spin_unlock_lock_of_tg3(spinlock_t *lock);
#line 381  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static void spin_unlock_bh(spinlock_t *lock)
{
  #line 383 
  _raw_spin_unlock_bh(& lock->__anonCompField_spinlock_25.rlock);
  #line 384 
  return;
}

#line 385 
#line 1138  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/broadcom/tg3.ko/concurrency safety/0/concurrency safety/weaver/tg3.i.aux"
static void cif_spin_unlock_bh_lock_of_tg3(spinlock_t *lock);
#line 391  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static void spin_unlock_irqrestore(spinlock_t *lock, unsigned long flags)
{
  {
    #line 393 
    unsigned long __dummy;
    #line 393 
    unsigned long __dummy2;
    }
  #line 393 
  _raw_spin_unlock_irqrestore(& lock->__anonCompField_spinlock_25.rlock,flags);
  #line 395 
  return;
}

#line 395 
#line 1120  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/broadcom/tg3.ko/concurrency safety/0/concurrency safety/weaver/tg3.i.aux"
static void cif_spin_unlock_irqrestore_indirect_lock_of_tg3(spinlock_t *lock, unsigned long flags);
#line 33 
#line 33 
void __ldv_spin_lock(spinlock_t *);
#line 35 
#line 1111 
static void cif___ldv_spin_lock_indirect_lock_of_tg3(spinlock_t *lock);
#line 40 
#line 40 
void ldv_spin_model_lock(char *);
#line 41 
#line 41 
void ldv_spin_model_unlock(char *);
#line 51 
#line 51 
int ldv_request_firmware(struct firmware **fw);
#line 52 
#line 52 
void ldv_release_firmware(struct firmware *fw);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/err.h"
#line 23 
bool ldv_is_err(void *ptr);
#line 26 
#line 26 
long ldv_ptr_err(void *ptr);
#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/bitmap.h"
#line 21 
void ldv_set_bit(long nr, unsigned long *addr);
#line 22 
#line 22 
void ldv_clear_bit(long nr, unsigned long *addr);
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/string.h"
#line 25 
size_t ldv_strlen(char *s);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/list.h"
#line 23 
void ldv_init_list_head(struct list_head *list);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 23 
void *ldv_kzalloc(size_t size, gfp_t flags);
#line 24 
#line 24 
void *ldv_kmalloc(size_t size, gfp_t flags);
#line 25 
#line 25 
void *ldv_kcalloc(size_t n, size_t size, gfp_t flags);
#line 81  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jiffies.h"
#line 81 
extern unsigned long jiffies;
#line 292 
#line 292 
unsigned int jiffies_to_usecs(unsigned long);
#line 302 
#line 302 
unsigned long __msecs_to_jiffies(unsigned int);
#line 309  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jiffies.h"
__inline static unsigned long _msecs_to_jiffies(unsigned int m)
{
  #line 311 
  return (unsigned long)(((long)m + 3L) / 4L);
}

#line 364  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jiffies.h"
__inline static unsigned long msecs_to_jiffies(unsigned int m)
{
  #line 366 
  if (0 != 0) {
    #line 367 
    if ((int)m < 0) 
                    #line 368 
                    return 4611686018427387902UL;
    #line 369 
    return _msecs_to_jiffies(m);
  }
  else {
    #line 371 
    return __msecs_to_jiffies(m);
  }
}

#line 375 
#line 375 
unsigned long __usecs_to_jiffies(unsigned int);
#line 377  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jiffies.h"
__inline static unsigned long _usecs_to_jiffies(unsigned int u)
{
  #line 379 
  return (unsigned long)(((long)u + 3999L) / 4000L);
}

#line 411  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jiffies.h"
__inline static unsigned long usecs_to_jiffies(unsigned int u)
{
  #line 413 
  if (0 != 0) {
    #line 414 
    ;
    #line 414 
    if (jiffies_to_usecs(4611686018427387902UL) < u) 
                                                     #line 415 
                                                     return 4611686018427387902UL;
    #line 416 
    return _usecs_to_jiffies(u);
  }
  else {
    #line 418 
    return __usecs_to_jiffies(u);
  }
}

#line 97  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ktime.h"
__inline static s64 ktime_to_ns(ktime_t kt)
{
  #line 99 
  return kt;
}

#line 265  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ktime.h"
__inline static ktime_t ns_to_ktime(u64 ns)
{
  #line 267 
  return (long long)ns;
}

#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timekeeping.h"
#line 43 
void ktime_get_real_ts64(struct timespec64 *);
#line 68 
#line 68 
ktime_t ktime_get_with_offset(enum tk_offsets);
#line 77  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timekeeping.h"
__inline static ktime_t ktime_get_real(void)
{
  #line 79 
  return ktime_get_with_offset((enum tk_offsets)TK_OFFS_REAL);
}

#line 90  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
#line 90 
void init_timer_key(struct timer_list *, void (*)(struct timer_list *), unsigned int, char *, struct lock_class_key *);
#line 182 
#line 182 
void add_timer(struct timer_list *);
#line 188 
#line 1165  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/broadcom/tg3.ko/concurrency safety/0/concurrency safety/weaver/tg3.i.aux"
static int cif_del_timer_sync(struct timer_list *timer);
#line 207  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/workqueue.h"
#line 207 
void __init_work(struct work_struct *, int);
#line 462 
#line 462 
bool cancel_work_sync(struct work_struct *);
#line 554 
#line 981  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/broadcom/tg3.ko/concurrency safety/0/concurrency safety/weaver/tg3.i.aux"
static bool cif_schedule_work(struct work_struct *work);
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/io.h"
__inline static unsigned int readl(void *addr)
{
  #line 59 
  unsigned int ret;
  #line 60 
  ldv_inline_asm();
  #line 59 
  return ret;
}

#line 67  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/io.h"
__inline static void writel(unsigned int val, void *addr)
{
  #line 69 
  ldv_inline_asm();
  #line 70 
  return;
}

#line 209 
#line 209 
void iounmap(void *);
#line 575  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/gfp.h"
#line 575 
void page_frag_free(void *);
#line 89  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject.h"
__inline static char *kobject_name(struct kobject *kobj)
{
  #line 91 
  return kobj->name;
}

#line 1660  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
__inline static struct thread_info *task_thread_info(struct task_struct *task)
{
  #line 1662 
  return & task->thread_info;
}

#line 1751  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
__inline static int test_tsk_thread_flag(struct task_struct *tsk, int flag)
{
  #line 1753 
  ;
  #line 1753 
  return test_ti_thread_flag(task_thread_info(tsk),flag);
}

#line 1778 
#line 1778 
int _cond_resched(void);
#line 1818  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
__inline static bool need_resched(void)
{
  #line 1820 
  return (_Bool)((long)(test_ti_thread_flag((struct thread_info *)ldv_get_current(),3) != 0) != 0L);
}

#line 121  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uaccess.h"
#line 121 
unsigned long _copy_from_user(void *, void *, unsigned long);
#line 137 
#line 137 
unsigned long _copy_to_user(void *, void *, unsigned long);
#line 141  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uaccess.h"
__inline static unsigned long copy_from_user(void *to, void *from, unsigned long n)
{
  #line 143 
  if ((long)((int)check_copy_size(to,n,(_Bool)0) != 0) != 0L) 
                                                              #line 144 
                                                              n = _copy_from_user(to,from,n);
  #line 145 
  return n;
}

#line 149  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uaccess.h"
__inline static unsigned long copy_to_user(void *to, void *from, unsigned long n)
{
  #line 151 
  if ((long)((int)check_copy_size(from,n,(_Bool)1) != 0) != 0L) 
                                                                #line 152 
                                                                n = _copy_to_user(to,from,n);
  #line 153 
  return n;
}

#line 347  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/signal.h"
__inline static int signal_pending(struct task_struct *p)
{
  #line 349 
  return (long)(test_tsk_thread_flag(p,2) != 0);
}

#line 189  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/slab.h"
#line 189 
void kfree(void *);
#line 542 
#line 690  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/broadcom/tg3.ko/concurrency safety/0/concurrency safety/weaver/tg3.i.aux"
static void *kmalloc(size_t size, gfp_t flags);
#line 607  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/slab.h"
#line 704  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/broadcom/tg3.ko/concurrency safety/0/concurrency safety/weaver/tg3.i.aux"
static void *kcalloc(size_t n, size_t size, gfp_t flags);
#line 668  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/slab.h"
#line 725  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/broadcom/tg3.ko/concurrency safety/0/concurrency safety/weaver/tg3.i.aux"
static void *kzalloc(size_t size, gfp_t flags);
#line 6  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/delay.h"
#line 6 
void __bad_udelay(void);
#line 9 
#line 9 
void __udelay(unsigned long);
#line 11 
#line 11 
void __const_udelay(unsigned long);
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/delay.h"
#line 59 
void msleep(unsigned int);
#line 60 
#line 60 
unsigned long msleep_interruptible(unsigned int);
#line 61 
#line 61 
void usleep_range(unsigned long, unsigned long);
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/hardirq.h"
#line 12 
void synchronize_irq(unsigned int);
#line 162  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/interrupt.h"
#line 1173  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/broadcom/tg3.ko/concurrency safety/0/concurrency safety/weaver/tg3.i.aux"
static int cif_request_irq(unsigned int irq, irqreturn_t (*handler)(int , void *), unsigned long flags, char *name, void *dev);
#line 189  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/interrupt.h"
#line 1181  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/broadcom/tg3.ko/concurrency safety/0/concurrency safety/weaver/tg3.i.aux"
static void *cif_free_irq(unsigned int ldv_func_arg1, void *ldv_func_arg2);
#line 77  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm_wakeup.h"
__inline static bool device_can_wakeup(struct device *dev)
{
  #line 79 
  return (_Bool)((int)dev->power.can_wakeup != 0);
}

#line 82  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm_wakeup.h"
__inline static bool device_may_wakeup(struct device *dev)
{
  #line 84 
  return (_Bool)(((unsigned int)dev->power.can_wakeup != 0U && dev->power.wakeup != (struct wakeup_source *)0) != 0);
}

#line 106 
#line 106 
void device_set_wakeup_capable(struct device *, bool);
#line 108 
#line 108 
int device_set_wakeup_enable(struct device *, bool);
#line 1370  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
__inline static char *dev_name(struct device *dev)
{
  #line 1373 
  if (dev->init_name != (char *)0) 
                                   #line 1374 
                                   return dev->init_name;
  #line 1376 
  return kobject_name(& dev->kobj);
}

#line 1417  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
__inline static void *dev_get_drvdata(struct device *dev)
{
  #line 1419 
  return dev->driver_data;
}

#line 1422  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
__inline static void dev_set_drvdata(struct device *dev, void *data)
{
  #line 1424 
  dev->driver_data = data;
  #line 1425 
  return;
}

#line 1680 
#line 1680 
char *dev_driver_string(struct device *);
#line 1712 
#line 1712 
void _dev_err(struct device *, char * , ...);
#line 1714 
#line 1714 
void _dev_warn(struct device *, char * , ...);
#line 488  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
__inline static int pci_channel_offline(struct pci_dev *pdev)
{
  #line 490 
  return pdev->error_state != 1U;
}

#line 1019 
#line 1019 
void pci_dev_put(struct pci_dev *);
#line 1040 
#line 1040 
int pci_find_capability(struct pci_dev *, int);
#line 1048 
#line 1048 
struct pci_dev *pci_get_device(unsigned int, unsigned int, struct pci_dev *);
#line 1053 
#line 1053 
struct pci_dev *pci_get_slot(struct pci_bus *, unsigned int);
#line 1057 
#line 1057 
int pci_dev_present(struct pci_device_id *);
#line 1083 
#line 1083 
int pci_read_config_byte(struct pci_dev *, int, u8 *);
#line 1084 
#line 1084 
int pci_read_config_word(struct pci_dev *, int, u16 *);
#line 1085 
#line 1085 
int pci_read_config_dword(struct pci_dev *, int, u32 *);
#line 1086 
#line 1086 
int pci_write_config_byte(struct pci_dev *, int, u8);
#line 1087 
#line 1087 
int pci_write_config_word(struct pci_dev *, int, u16);
#line 1088 
#line 1088 
int pci_write_config_dword(struct pci_dev *, int, u32);
#line 1090 
#line 1090 
int pcie_capability_read_word(struct pci_dev *, int, u16 *);
#line 1092 
#line 1092 
int pcie_capability_write_word(struct pci_dev *, int, u16);
#line 1094 
#line 1094 
int pcie_capability_clear_and_set_word(struct pci_dev *, int, u16, u16);
#line 1099  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
__inline static int pcie_capability_set_word(struct pci_dev *dev, int pos, u16 set)
{
  #line 1102 
  return pcie_capability_clear_and_set_word(dev,pos,(unsigned short)0,
                                         (unsigned short)((int)set));
}

#line 1111  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
__inline static int pcie_capability_clear_word(struct pci_dev *dev, int pos, u16 clear)
{
  #line 1114 
  return pcie_capability_clear_and_set_word(dev,pos,
                                         (unsigned short)((int)clear),
                                         (unsigned short)0);
}

#line 1131 
#line 1131 
int pci_enable_device(struct pci_dev *);
#line 1147  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
__inline static int pci_is_enabled(struct pci_dev *pdev)
{
  #line 1149 
  return atomic_read(& pdev->enable_cnt) > 0;
}

#line 1157 
#line 1157 
void pci_disable_device(struct pci_dev *);
#line 1160 
#line 1160 
void pci_set_master(struct pci_dev *);
#line 1203 
#line 1203 
bool pci_device_is_present(struct pci_dev *);
#line 1219 
#line 1219 
int pci_save_state(struct pci_dev *);
#line 1220 
#line 1220 
void pci_restore_state(struct pci_dev *);
#line 1233 
#line 1233 
int pci_set_power_state(struct pci_dev *, pci_power_t);
#line 1238 
#line 1238 
int pci_wake_from_d3(struct pci_dev *, bool);
#line 1260 
#line 1260 
ssize_t pci_read_vpd(struct pci_dev *, loff_t, size_t, void *);
#line 1281 
#line 1281 
int pci_request_regions(struct pci_dev *, char *);
#line 1283 
#line 1283 
void pci_release_regions(struct pci_dev *);
#line 1346 
#line 1235  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/broadcom/tg3.ko/concurrency safety/0/concurrency safety/weaver/tg3.i.aux"
static int cif___pci_register_driver(struct pci_driver *ldv_func_arg1, struct module *ldv_func_arg2, char *mod_name);
#line 1352  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
#line 1103  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/broadcom/tg3.ko/concurrency safety/0/concurrency safety/weaver/tg3.i.aux"
static void cif_pci_unregister_driver(struct pci_driver *dev);
#line 628  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm.h"
__inline static bool is_vmalloc_addr(void *x)
{
  #line 633 
  int tmp_1;
  #line 631 
  unsigned long addr = (unsigned long)x;
  #line 633 
  if (addr >= vmalloc_base) {
    #line 633 
    unsigned long tmp_0;
    #line 633 
    if ((int)_static_cpu_has((unsigned short)528) != 0) 
                                                        #line 633 
                                                        tmp_0 = 14073748835532800UL; else 
                                                                    #line 633 
                                                                    tmp_0 = 35184372088832UL;
    #line 633 
    ;
    #line 633 
    if ((tmp_0 + vmalloc_base) + 18446744073709551615UL > addr) 
                                                                #line 633 
                                                                tmp_1 = 1; else 
                                                                    #line 633 
                                                                    tmp_1 = 0;
  }
  else 
       #line 633 
       tmp_1 = 0;
  #line 633 
  return (_Bool)(tmp_1 != 0);
}

#line 1431  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
#line 1431 
void pci_disable_msi(struct pci_dev *);
#line 1433 
#line 1433 
void pci_disable_msix(struct pci_dev *);
#line 1436 
#line 1436 
int pci_enable_msi(struct pci_dev *);
#line 1437 
#line 1437 
int pci_enable_msix_range(struct pci_dev *, struct msix_entry *, int, int);
#line 1833  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
__inline static void *pci_get_drvdata(struct pci_dev *pdev)
{
  #line 1835 
  return dev_get_drvdata(& pdev->dev);
}

#line 1838  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
__inline static void pci_set_drvdata(struct pci_dev *pdev, void *data)
{
  #line 1840 
  dev_set_drvdata(& pdev->dev,data);
  #line 1841 
  return;
}

#line 1843  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
__inline static char *pci_name(struct pci_dev *pdev)
{
  #line 1845 
  return dev_name(& pdev->dev);
}

#line 2022 
#line 2022 
void *pci_ioremap_bar(struct pci_dev *, int);
#line 2092  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
__inline static int pci_pcie_cap(struct pci_dev *dev)
{
  #line 2094 
  return (int)dev->pcie_cap;
}

#line 2103  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
__inline static bool pci_is_pcie(struct pci_dev *dev)
{
  #line 2105 
  return (_Bool)(pci_pcie_cap(dev) != 0);
}

#line 2183  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
__inline static u16 pci_vpd_lrdt_size(u8 *lrdt)
{
  #line 2185 
  return (unsigned short)((int)((unsigned short)*(lrdt + 1U)) + ((int)((unsigned short)*(lrdt + 2U)) << 8U));
}

#line 2227  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
__inline static u8 pci_vpd_info_field_size(u8 *info_field)
{
  #line 2229 
  return *(info_field + 2U);
}

#line 2242 
#line 2242 
int pci_vpd_find_tag(u8 *, unsigned int, unsigned int, u8);
#line 2254 
#line 2254 
int pci_vpd_find_info_keyword(u8 *, unsigned int, unsigned int, char *);
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-debug.h"
#line 21 
void debug_dma_map_single(struct device *, void *, unsigned long);
#line 24 
#line 24 
void debug_dma_map_page(struct device *, struct page *, size_t, size_t, int, dma_addr_t);
#line 28 
#line 28 
void debug_dma_mapping_error(struct device *, dma_addr_t);
#line 30 
#line 30 
void debug_dma_unmap_page(struct device *, dma_addr_t, size_t, int);
#line 52 
#line 52 
void debug_dma_sync_single_for_cpu(struct device *, dma_addr_t, size_t, int);
#line 56 
#line 56 
void debug_dma_sync_single_for_device(struct device *, dma_addr_t, size_t, int);
#line 143  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static int valid_dma_direction(int dma_direction)
{
  #line 146 
  return (unsigned int)dma_direction <= 2U;
}

#line 191  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static bool dma_is_direct(struct dma_map_ops *ops)
{
  #line 193 
  return (_Bool)((long)(ops == (struct dma_map_ops *)0) != 0L);
}

#line 200 
#line 200 
dma_addr_t dma_direct_map_page(struct device *, struct page *, unsigned long, size_t, enum dma_data_direction, unsigned long);
#line 210 
#line 210 
void dma_direct_sync_single_for_device(struct device *, dma_addr_t, size_t, enum dma_data_direction);
#line 228 
#line 228 
void dma_direct_unmap_page(struct device *, dma_addr_t, size_t, enum dma_data_direction, unsigned long);
#line 232 
#line 232 
void dma_direct_sync_single_for_cpu(struct device *, dma_addr_t, size_t, enum dma_data_direction);
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/dma-mapping.h"
#line 19 
extern struct dma_map_ops *dma_ops;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/dma-mapping.h"
__inline static struct dma_map_ops *get_arch_dma_ops(struct bus_type *bus)
{
  #line 23 
  return dma_ops;
}

#line 261  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static struct dma_map_ops *get_dma_ops(struct device *dev)
{
  #line 263 
  if (dev->dma_ops != (struct dma_map_ops *)0) 
                                               #line 264 
                                               return dev->dma_ops;
  #line 265 
  return get_arch_dma_ops(dev->bus);
}

#line 274  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static dma_addr_t dma_map_page_attrs(struct device *dev, struct page *page, size_t offset, size_t size, enum dma_data_direction dir, unsigned long attrs)
{
  #line 279 
  dma_addr_t addr;
  #line 278 
  struct dma_map_ops *ops = get_dma_ops(dev);
  #line 281 
  if ((long)(valid_dma_direction((int)dir) == 0) != 0L) {
    #line 282 
    ldv_inline_asm();
    #line 283 
    ldv_inline_asm();
    #line 284 
    ldv_inline_asm();
    #line 281 
    ;
  }
  #line 282 
  if ((int)dma_is_direct(ops) != 0) 
                                    #line 283 
                                    addr = dma_direct_map_page(dev,page,offset,size,dir,attrs); else 
                                                                    #line 285 
                                                                    addr = (*(ops->map_page))(dev,page,offset,size,dir,attrs);
  #line 286 
  debug_dma_map_page(dev,page,offset,size,(int)dir,addr);
  #line 288 
  return addr;
}

#line 291  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static void dma_unmap_page_attrs(struct device *dev, dma_addr_t addr, size_t size, enum dma_data_direction dir, unsigned long attrs)
{
  #line 294 
  struct dma_map_ops *ops = get_dma_ops(dev);
  #line 296 
  if ((long)(valid_dma_direction((int)dir) == 0) != 0L) {
    #line 297 
    ldv_inline_asm();
    #line 298 
    ldv_inline_asm();
    #line 299 
    ldv_inline_asm();
    #line 296 
    ;
  }
  #line 297 
  if ((int)dma_is_direct(ops) != 0) 
                                    #line 298 
                                    dma_direct_unmap_page(dev,addr,size,dir,attrs);
  else 
    #line 299 
    if (ops->unmap_page != (void (*)(struct device *, dma_addr_t , size_t , enum dma_data_direction , unsigned long ))0) 
      #line 300 
      (*(ops->unmap_page))(dev,addr,size,dir,attrs);
  #line 301 
  debug_dma_unmap_page(dev,addr,size,(int)dir);
  #line 302 
  return;
}

#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static void dma_sync_single_for_cpu(struct device *dev, dma_addr_t addr, size_t size, enum dma_data_direction dir)
{
  #line 380 
  struct dma_map_ops *ops = get_dma_ops(dev);
  #line 382 
  if ((long)(valid_dma_direction((int)dir) == 0) != 0L) {
    #line 383 
    ldv_inline_asm();
    #line 384 
    ldv_inline_asm();
    #line 385 
    ldv_inline_asm();
    #line 382 
    ;
  }
  #line 383 
  if ((int)dma_is_direct(ops) != 0) 
                                    #line 384 
                                    dma_direct_sync_single_for_cpu(dev,addr,size,dir);
  else 
    #line 385 
    if (ops->sync_single_for_cpu != (void (*)(struct device *, dma_addr_t , size_t , enum dma_data_direction ))0) 
      #line 386 
      (*(ops->sync_single_for_cpu))(dev,addr,size,dir);
  #line 387 
  debug_dma_sync_single_for_cpu(dev,addr,size,(int)dir);
  #line 388 
  return;
}

#line 390  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static void dma_sync_single_for_device(struct device *dev, dma_addr_t addr, size_t size, enum dma_data_direction dir)
{
  #line 394 
  struct dma_map_ops *ops = get_dma_ops(dev);
  #line 396 
  if ((long)(valid_dma_direction((int)dir) == 0) != 0L) {
    #line 397 
    ldv_inline_asm();
    #line 398 
    ldv_inline_asm();
    #line 399 
    ldv_inline_asm();
    #line 396 
    ;
  }
  #line 397 
  if ((int)dma_is_direct(ops) != 0) 
                                    #line 398 
                                    dma_direct_sync_single_for_device(dev,addr,size,dir);
  else 
    #line 399 
    if (ops->sync_single_for_device != (void (*)(struct device *, dma_addr_t , size_t , enum dma_data_direction ))0) 
      #line 400 
      (*(ops->sync_single_for_device))(dev,addr,size,dir);
  #line 401 
  debug_dma_sync_single_for_device(dev,addr,size,(int)dir);
  #line 402 
  return;
}

#line 433  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static int dma_mapping_error(struct device *dev, dma_addr_t dma_addr)
{
  #line 435 
  debug_dma_mapping_error(dev,dma_addr);
  #line 437 
  if (dma_addr == 18446744073709551615ULL) 
                                           #line 438 
                                           return -12;
  #line 439 
  return 0;
}

#line 442 
#line 442 
void *dma_alloc_attrs(struct device *, size_t, dma_addr_t *, gfp_t, unsigned long);
#line 444 
#line 444 
void dma_free_attrs(struct device *, size_t, void *, dma_addr_t, unsigned long);
#line 460 
#line 460 
int dma_set_mask(struct device *, u64);
#line 461 
#line 461 
int dma_set_coherent_mask(struct device *, u64);
#line 580  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static dma_addr_t dma_map_single_attrs(struct device *dev, void *ptr, size_t size, enum dma_data_direction dir, unsigned long attrs)
{
  #line 584 
  int __ret_warn_once;
  {
    #line 584 
    bool __warned;
    #line 584 
    __ret_warn_once = (int)is_vmalloc_addr(ptr) != 0;
    #line 584 
    if ((long)(__ret_warn_once != 0) != 0L && (long)(! __warned) != 0L) {
      #line 584 
      __warned = (_Bool)1;
      {
        #line 584 
        int __ret_warn_on = 1;
        #line 584 
        if ((long)(__ret_warn_on != 0) != 0L) {
          #line 584 
          __warn_printk((char *)"%s %s: ",dev_driver_string(dev),dev_name(dev));
          #line 585 
          ldv_inline_asm();
          #line 586 
          ldv_inline_asm();
        }
        #line 584 
        long tmp_2 = (long)(__ret_warn_on != 0);
      }
    }
    }
  #line 584 
  if ((long)((long)(__ret_warn_once != 0)) != 0L) 
                                                  #line 586 
                                                  return 18446744073709551615ULL;
  #line 587 
  debug_dma_map_single(dev,ptr,size);
  #line 588 
  ;
  #line 588 
  ;
  #line 588 
  ;
  #line 588 
  ;
  #line 588 
  ;
  #line 588 
  ;
  #line 588 
  return dma_map_page_attrs(dev,
                           (struct page *)((__phys_addr((unsigned long)ptr) >> 12) + vmemmap_base),
                           (unsigned long)ptr & 4095UL,size,dir,attrs);
}

#line 592  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static void dma_unmap_single_attrs(struct device *dev, dma_addr_t addr, size_t size, enum dma_data_direction dir, unsigned long attrs)
{
  #line 595 
  dma_unmap_page_attrs(dev,addr,size,dir,attrs);
  #line 596 
  return;
}

#line 641  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static void *dma_alloc_coherent(struct device *dev, size_t size, dma_addr_t *dma_handle, gfp_t gfp)
{
  #line 645 
  return dma_alloc_attrs(dev,size,dma_handle,gfp,
                      (unsigned long)(gfp >> 5) & 256UL);
}

#line 649  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static void dma_free_coherent(struct device *dev, size_t size, void *cpu_addr, dma_addr_t dma_handle)
{
  #line 652 
  dma_free_attrs(dev,size,cpu_addr,dma_handle,0UL);
  #line 653 
  return;
}

#line 38  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci-dma-compat.h"
__inline static dma_addr_t pci_map_single(struct pci_dev *hwdev, void *ptr, size_t size, int direction)
{
  #line 40 
  return dma_map_single_attrs(& hwdev->dev,ptr,size,
                           (enum dma_data_direction)direction,0UL);
}

#line 44  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci-dma-compat.h"
__inline static void pci_unmap_single(struct pci_dev *hwdev, dma_addr_t dma_addr, size_t size, int direction)
{
  #line 47 
  dma_unmap_single_attrs(& hwdev->dev,dma_addr,size,(enum dma_data_direction)direction,0UL);
  #line 48 
  return;
}

#line 58  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci-dma-compat.h"
__inline static void pci_unmap_page(struct pci_dev *hwdev, dma_addr_t dma_address, size_t size, int direction)
{
  #line 61 
  dma_unmap_page_attrs(& hwdev->dev,dma_address,size,(enum dma_data_direction)direction,0UL);
  #line 62 
  return;
}

#line 79  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci-dma-compat.h"
__inline static void pci_dma_sync_single_for_cpu(struct pci_dev *hwdev, dma_addr_t dma_handle, size_t size, int direction)
{
  #line 82 
  dma_sync_single_for_cpu(& hwdev->dev,dma_handle,size,(enum dma_data_direction)direction);
  #line 83 
  return;
}

#line 86  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci-dma-compat.h"
__inline static void pci_dma_sync_single_for_device(struct pci_dev *hwdev, dma_addr_t dma_handle, size_t size, int direction)
{
  #line 89 
  dma_sync_single_for_device(& hwdev->dev,dma_handle,size,(enum dma_data_direction)direction);
  #line 90 
  return;
}

#line 107  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci-dma-compat.h"
__inline static int pci_dma_mapping_error(struct pci_dev *pdev, dma_addr_t dma_addr)
{
  #line 109 
  return dma_mapping_error(& pdev->dev,dma_addr);
}

#line 113  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci-dma-compat.h"
__inline static int pci_set_dma_mask(struct pci_dev *dev, u64 mask)
{
  #line 115 
  return dma_set_mask(& dev->dev,mask);
}

#line 118  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci-dma-compat.h"
__inline static int pci_set_consistent_dma_mask(struct pci_dev *dev, u64 mask)
{
  #line 120 
  return dma_set_coherent_mask(& dev->dev,mask);
}

#line 73  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dynamic_queue_limits.h"
__inline static void dql_queued(struct dql *dql, unsigned int count)
{
  #line 75 
  if ((long)(count > 268435455U) != 0L) {
    #line 76 
    ldv_inline_asm();
    #line 77 
    ldv_inline_asm();
    #line 78 
    ldv_inline_asm();
    #line 75 
    ;
  }
  #line 77 
  dql->last_obj_cnt = count;
  #line 78 
  ldv_inline_asm();
  #line 86 
  dql->num_queued += count;
  #line 87 
  return;
}

#line 90  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dynamic_queue_limits.h"
__inline static int dql_avail(struct dql *dql)
{
  #line 93 
  union __anonunion___u_482 __u;
  #line 93 
  union __anonunion___u_484 __u_0;
  #line 92 
  unsigned int tmp;
  #line 92 
  __read_once_size((void *)(& dql->adj_limit),(void *)(& __u.__c),4);
  #line 92 
  tmp = __u.__val;
  #line 92 
  __read_once_size((void *)(& dql->num_queued),(void *)(& __u_0.__c),4);
  #line 92 
  return (int)(tmp - (__u_0.__val));
}

#line 96 
#line 96 
void dql_completed(struct dql *, unsigned int);
#line 99 
#line 99 
void dql_reset(struct dql *);
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/checksum_64.h"
__inline static __sum16 csum_fold(__wsum sum)
{
  #line 25 
  ldv_inline_asm();
  #line 30 
  return (unsigned short)(~ sum >> 16);
}

#line 88  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/checksum_64.h"
__inline static __wsum csum_tcpudp_nofold(__be32 saddr, __be32 daddr, __u32 len, __u8 proto, __wsum sum)
{
  #line 90 
  ldv_inline_asm();
  #line 98 
  return sum;
}

#line 113  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/checksum_64.h"
__inline static __sum16 csum_tcpudp_magic(__be32 saddr, __be32 daddr, __u32 len, __u8 proto, __wsum sum)
{
  #line 117 
  return csum_fold(csum_tcpudp_nofold(saddr,daddr,len,(unsigned char)((int)proto),sum));
}

#line 325  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static unsigned int skb_frag_size(skb_frag_t *frag)
{
  #line 327 
  return frag->bv_len;
}

#line 1023 
#line 1023 
void consume_skb(struct sk_buff *);
#line 1035 
#line 1035 
struct sk_buff *build_skb(void *, unsigned int);
#line 1107 
#line 1107 
struct sk_buff *skb_copy(struct sk_buff *, gfp_t);
#line 1116 
#line 1116 
int pskb_expand_head(struct sk_buff *, int, int, gfp_t);
#line 1119 
#line 1119 
struct sk_buff *skb_copy_expand(struct sk_buff *, int, int, gfp_t);
#line 1381  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static unsigned char *skb_end_pointer(struct sk_buff *skb)
{
  #line 1383 
  return skb->head + (unsigned long)skb->end;
}

#line 1405  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static struct skb_shared_hwtstamps *skb_hwtstamps(struct sk_buff *skb)
{
  #line 1407 
  return & ((struct skb_shared_info *)skb_end_pointer(skb))->hwtstamps;
}

#line 1621  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static int skb_header_cloned(struct sk_buff *skb)
{
  #line 1623 
  int dataref;
  #line 1625 
  if ((unsigned int)skb->cloned == 0U) 
                                       #line 1626 
                                       return 0;
  #line 1628 
  dataref = atomic_read(& ((struct skb_shared_info *)skb_end_pointer(skb))->dataref);
  #line 1629 
  dataref = (dataref & 65535) - (dataref >> 16);
  #line 1630 
  return dataref != 1;
}

#line 2065  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static bool skb_is_nonlinear(struct sk_buff *skb)
{
  #line 2067 
  return (_Bool)(skb->data_len != 0U);
}

#line 2070  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static unsigned int skb_headlen(struct sk_buff *skb)
{
  #line 2072 
  return skb->len - skb->data_len;
}

#line 2189 
#line 2189 
void *skb_put(struct sk_buff *, unsigned int);
#line 2299  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static unsigned int skb_headroom(struct sk_buff *skb)
{
  #line 2301 
  return (unsigned int)(skb->data - skb->head);
}

#line 2310  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static int skb_tailroom(struct sk_buff *skb)
{
  #line 2312 
  int tmp_0;
  #line 2312 
  if ((int)skb_is_nonlinear(skb) == 0) 
                                       #line 2312 
                                       tmp_0 = (int)(skb->end - skb->tail); else 
                                                                    #line 2312 
                                                                    tmp_0 = 0;
  #line 2312 
  return tmp_0;
}

#line 2338  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static void skb_reserve(struct sk_buff *skb, int len)
{
  #line 2340 
  skb->data += (unsigned long)len;
  #line 2341 
  skb->tail += (unsigned int)len;
  #line 2342 
  return;
}

#line 2458  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static unsigned char *skb_transport_header(struct sk_buff *skb)
{
  #line 2460 
  return skb->head + (unsigned long)skb->transport_header;
}

#line 2475  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static unsigned char *skb_network_header(struct sk_buff *skb)
{
  #line 2477 
  return skb->head + (unsigned long)skb->network_header;
}

#line 2559  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static int skb_transport_offset(struct sk_buff *skb)
{
  #line 2561 
  ;
  #line 2561 
  return (int)(skb_transport_header(skb) - skb->data);
}

#line 2762 
#line 2762 
struct sk_buff *__netdev_alloc_skb(struct net_device *, unsigned int, gfp_t);
#line 2778  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static struct sk_buff *netdev_alloc_skb(struct net_device *dev, unsigned int length)
{
  #line 2781 
  return __netdev_alloc_skb(dev,length,2592U);
}

#line 2814  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static void skb_free_frag(void *addr)
{
  #line 2816 
  page_frag_free(addr);
  #line 2817 
  return;
}

#line 2819 
#line 2819 
void *napi_alloc_frag(unsigned int);
#line 2896  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static unsigned int skb_frag_off(skb_frag_t *frag)
{
  #line 2898 
  return frag->bv_offset;
}

#line 2938  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static struct page *skb_frag_page(skb_frag_t *frag)
{
  #line 2940 
  return frag->bv_page;
}

#line 3067  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static dma_addr_t skb_frag_dma_map(struct device *dev, skb_frag_t *frag, size_t offset, size_t size, enum dma_data_direction dir)
{
  #line 3072 
  ;
  #line 3072 
  ;
  #line 3072 
  ;
  #line 3072 
  ;
  #line 3072 
  return dma_map_page_attrs(dev,skb_frag_page(frag),
                           (unsigned long)skb_frag_off(frag) + offset,size,
                           dir,0UL);
}

#line 3111  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static int __skb_cow(struct sk_buff *skb, unsigned int headroom, int cloned)
{
  #line 3114 
  int delta = 0;
  #line 3116 
  ;
  #line 3116 
  if (skb_headroom(skb) < headroom) {
    #line 3117 
    delta = (int)(headroom - skb_headroom(skb));
  }
  #line 3119 
  if (delta != 0 || cloned != 0) {
    #line 3120 
    return pskb_expand_head(skb,(delta + 63) & -64,0,2592U);
  }
  #line 3122 
  return 0;
}

#line 3152  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static int skb_cow_head(struct sk_buff *skb, unsigned int headroom)
{
  #line 3154 
  ;
  #line 3154 
  ;
  #line 3154 
  return __skb_cow(skb,headroom,skb_header_cloned(skb));
}

#line 3767 
#line 3767 
void skb_clone_tx_timestamp(struct sk_buff *);
#line 3813 
#line 3813 
void skb_tstamp_tx(struct sk_buff *, struct skb_shared_hwtstamps *);
#line 3828  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static void skb_tx_timestamp(struct sk_buff *skb)
{
  #line 3830 
  skb_clone_tx_timestamp(skb);
  #line 3831 
  ;
  #line 3831 
  if (((int)((struct skb_shared_info *)skb_end_pointer(skb))->tx_flags & 2) != 0) 
    #line 3832 
    skb_tstamp_tx(skb,(struct skb_shared_hwtstamps *)0);
  #line 3833 
  return;
}

#line 4277  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static u16 skb_get_queue_mapping(struct sk_buff *skb)
{
  #line 4279 
  return skb->queue_mapping;
}

#line 4396  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static bool skb_is_gso_v6(struct sk_buff *skb)
{
  #line 4398 
  ;
  #line 4398 
  return (_Bool)((((struct skb_shared_info *)skb_end_pointer(skb))->gso_type & 16U) != 0U);
}

#line 4467  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static void skb_checksum_none_assert(struct sk_buff *skb)
{
  #line 4469 
  return;
}

#line 86  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ethtool.h"
#line 86 
u32 ethtool_op_get_link(struct net_device *);
#line 96  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ethtool.h"
__inline static u32 ethtool_rxfh_indir_default(u32 index, u32 n_rx_rings)
{
  #line 98 
  return index % n_rx_rings;
}

#line 173 
#line 173 
void ethtool_convert_legacy_u32_to_link_mode(unsigned long *, u32);
#line 177 
#line 177 
bool ethtool_convert_link_mode_to_legacy_u32(u32 *, unsigned long *);
#line 423  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
#line 423 
void __napi_schedule(struct napi_struct *);
#line 431 
#line 431 
bool napi_schedule_prep(struct napi_struct *);
#line 440  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void napi_schedule(struct napi_struct *n)
{
  #line 442 
  if ((int)napi_schedule_prep(n) != 0) 
                                       #line 443 
                                       __napi_schedule(n);
  #line 444 
  return;
}

#line 468 
#line 468 
bool napi_complete_done(struct napi_struct *, int);
#line 477  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static bool napi_complete(struct napi_struct *n)
{
  #line 479 
  return napi_complete_done(n,0);
}

#line 503 
#line 503 
void napi_disable(struct napi_struct *);
#line 512  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void napi_enable(struct napi_struct *n)
{
  #line 514 
  int tmp_0;
  #line 514 
  if (test_bit(0L,& n->state)) 
                               #line 514 
                               tmp_0 = 0; else 
                                               #line 514 
                                               tmp_0 = 1;
  #line 514 
  if ((long)tmp_0 != 0L) {
    #line 515 
    ldv_inline_asm();
    #line 516 
    ldv_inline_asm();
    #line 517 
    ldv_inline_asm();
    #line 514 
    ;
  }
  #line 516 
  cif_clear_bit(0L,& n->state);
  #line 517 
  cif_clear_bit(3L,& n->state);
  #line 518 
  return;
}

#line 2132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static struct netdev_queue *netdev_get_tx_queue(struct net_device *dev, unsigned int index)
{
  #line 2135 
  return dev->_tx + (unsigned long)index;
}

#line 2203  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void *netdev_priv(struct net_device *dev)
{
  #line 2205 
  return (void *)((char *)dev + 3328UL);
}

#line 2234 
#line 2234 
void netif_napi_add(struct net_device *, struct napi_struct *, int (*)(struct napi_struct *, int ), int);
#line 2263 
#line 2263 
void netif_napi_del(struct napi_struct *);
#line 2658 
#line 2658 
void dev_close(struct net_device *);
#line 2679 
#line 1219  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/broadcom/tg3.ko/concurrency safety/0/concurrency safety/weaver/tg3.i.aux"
static void cif_free_netdev(struct net_device *dev);
#line 3094  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
#line 3094 
void netif_schedule_queue(struct netdev_queue *);
#line 3104  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void netif_tx_start_queue(struct netdev_queue *dev_queue)
{
  #line 3106 
  cif_clear_bit(0L,& dev_queue->state);
  #line 3107 
  return;
}

#line 3120  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void netif_tx_start_all_queues(struct net_device *dev)
{
  #line 3122 
  unsigned int i;
  #line 3124 
  i = 0U;
  #line 3124 
  while (dev->num_tx_queues > i) {
    {
      #line 3125 
      struct netdev_queue *txq = netdev_get_tx_queue(dev,i);
      #line 3126 
      netif_tx_start_queue(txq);
    }
    #line 3124 
    i ++;
  }
  #line 3128 
  return;
}

#line 3130 
#line 3130 
void netif_tx_wake_queue(struct netdev_queue *);
#line 3144  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void netif_tx_wake_all_queues(struct net_device *dev)
{
  #line 3146 
  unsigned int i;
  #line 3148 
  i = 0U;
  #line 3148 
  while (dev->num_tx_queues > i) {
    {
      #line 3149 
      struct netdev_queue *txq = netdev_get_tx_queue(dev,i);
      #line 3150 
      netif_tx_wake_queue(txq);
    }
    #line 3148 
    i ++;
  }
  #line 3152 
  return;
}

#line 3154  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void netif_tx_stop_queue(struct netdev_queue *dev_queue)
{
  #line 3156 
  cif_set_bit(0L,& dev_queue->state);
  #line 3157 
  return;
}

#line 3174  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static bool netif_tx_queue_stopped(struct netdev_queue *dev_queue)
{
  #line 3176 
  return test_bit(0L,& dev_queue->state);
}

#line 3190  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static bool netif_xmit_stopped(struct netdev_queue *dev_queue)
{
  #line 3192 
  return (_Bool)((dev_queue->state & 3UL) != 0UL);
}

#line 3235  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void netdev_tx_sent_queue(struct netdev_queue *dev_queue, unsigned int bytes)
{
  #line 3239 
  dql_queued(& dev_queue->dql,bytes);
  #line 3241 
  if ((long)(dql_avail(& dev_queue->dql) >= 0) != 0L) 
                                                      #line 3242 
                                                      return;
  #line 3244 
  cif_set_bit(1L,& dev_queue->state);
  #line 3245 
  ldv_inline_asm();
  #line 3254 
  if ((long)(dql_avail(& dev_queue->dql) >= 0) != 0L) 
                                                      #line 3255 
                                                      cif_clear_bit(1L,& dev_queue->state);
  #line 3256 
  return;
}

#line 3301  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void netdev_tx_completed_queue(struct netdev_queue *dev_queue, unsigned int pkts, unsigned int bytes)
{
  #line 3305 
  if ((long)(bytes == 0U) != 0L) 
                                 #line 3306 
                                 return;
  #line 3308 
  dql_completed(& dev_queue->dql,bytes);
  #line 3309 
  ldv_inline_asm();
  #line 3317 
  if ((long)(dql_avail(& dev_queue->dql) < 0) != 0L) 
                                                     #line 3318 
                                                     return;
  #line 3320 
  if ((int)test_and_set_bit(1L,& dev_queue->state) != 0) 
                                                         #line 3321 
                                                         netif_schedule_queue(dev_queue);
  #line 3322 
  return;
}

#line 3341  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void netdev_tx_reset_queue(struct netdev_queue *q)
{
  #line 3344 
  cif_clear_bit(1L,& q->state);
  #line 3345 
  dql_reset(& q->dql);
  #line 3346 
  return;
}

#line 3387  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static bool netif_running(struct net_device *dev)
{
  #line 3389 
  return test_bit(0L,& dev->state);
}

#line 3577 
#line 3577 
int netif_set_real_num_tx_queues(struct net_device *, unsigned int);
#line 3580 
#line 3580 
int netif_set_real_num_rx_queues(struct net_device *, unsigned int);
#line 3609 
#line 3609 
int netif_get_num_default_rss_queues(void);
#line 3617 
#line 3617 
void __dev_kfree_skb_any(struct sk_buff *, enum skb_free_reason);
#line 3648  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void dev_kfree_skb_any(struct sk_buff *skb)
{
  #line 3650 
  __dev_kfree_skb_any(skb,(enum skb_free_reason)SKB_REASON_DROPPED);
  #line 3651 
  return;
}

#line 3653  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void dev_consume_skb_any(struct sk_buff *skb)
{
  #line 3655 
  __dev_kfree_skb_any(skb,(enum skb_free_reason)SKB_REASON_CONSUMED);
  #line 3656 
  return;
}

#line 3665 
#line 3665 
gro_result_t napi_gro_receive(struct napi_struct *, struct sk_buff *);
#line 3803  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static bool netif_carrier_ok(struct net_device *dev)
{
  #line 3805 
  int tmp_0;
  #line 3805 
  if ((int)test_bit(2L,& dev->state) != 0) 
                                           #line 3805 
                                           tmp_0 = 0; else 
                                                           #line 3805 
                                                           tmp_0 = 1;
  #line 3805 
  return (_Bool)(tmp_0 != 0);
}

#line 3812 
#line 3812 
void netif_carrier_on(struct net_device *);
#line 3814 
#line 3814 
void netif_carrier_off(struct net_device *);
#line 3881 
#line 3881 
void netif_device_detach(struct net_device *);
#line 3883 
#line 3883 
void netif_device_attach(struct net_device *);
#line 3934  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void __netif_tx_lock(struct netdev_queue *txq, int cpu)
{
  #line 3936 
  cif_spin_lock__xmit_lock_of_netdev_queue(& txq->_xmit_lock);
  #line 3937 
  txq->xmit_lock_owner = cpu;
  #line 3938 
  return;
}

#line 3965  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void __netif_tx_unlock(struct netdev_queue *txq)
{
  #line 3967 
  txq->xmit_lock_owner = -1;
  #line 3968 
  cif_spin_unlock__xmit_lock_of_netdev_queue(& txq->_xmit_lock);
  #line 3969 
  return;
}

#line 3984  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void netif_trans_update(struct net_device *dev)
{
  #line 3986 
  struct netdev_queue *txq = netdev_get_tx_queue(dev,0U);
  #line 3988 
  if (txq->trans_start != jiffies) 
                                   #line 3989 
                                   txq->trans_start = jiffies;
  #line 3990 
  return;
}

#line 4070  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void netif_tx_disable(struct net_device *dev)
{
  #line 4076 
  int pscr_ret__;
  #line 4072 
  unsigned int i;
  #line 4073 
  int cpu;
  #line 4075 
  local_bh_disable();
  #line 4076 
  __this_cpu_preempt_check((char *)"read");
  {
    #line 4076 
    void *__vpp_verify = (void *)0;
    #line 4076 
    void *tmp = __vpp_verify;
  }
  #line 4076 
  switch (4UL) {
    #line 4076 
    int pfo_ret___2;
    #line 4076 
    int pfo_ret__;
    #line 4076 
    int pfo_ret___0;
    #line 4076 
    int pfo_ret___1;
    #line 4076 
    case (unsigned long)1: 
                           #line 4076 
    ;
    #line 4076 
    switch (4UL) {
      #line 4076 
      case (unsigned long)1: 
                             #line 4076 
      ;
      #line 4077 
      ldv_inline_asm();
      #line 4076 
      break;
      #line 4076 
      case (unsigned long)2: 
                             #line 4076 
      ;
      #line 4077 
      ldv_inline_asm();
      #line 4076 
      break;
      #line 4076 
      case (unsigned long)4: 
                             #line 4076 
      ;
      #line 4077 
      ldv_inline_asm();
      #line 4076 
      break;
      #line 4076 
      case (unsigned long)8: 
                             #line 4076 
      ;
      #line 4077 
      ldv_inline_asm();
      #line 4076 
      break;
      #line 4076 
      default: 
               #line 4076 
      ;
      #line 4076 
      __bad_percpu_size();
    }
    #line 4076 
    pscr_ret__ = pfo_ret__;
    #line 4076 
    break;
    #line 4076 
    case (unsigned long)2: 
                           #line 4076 
    ;
    #line 4076 
    switch (4UL) {
      #line 4076 
      case (unsigned long)1: 
                             #line 4076 
      ;
      #line 4077 
      ldv_inline_asm();
      #line 4076 
      break;
      #line 4076 
      case (unsigned long)2: 
                             #line 4076 
      ;
      #line 4077 
      ldv_inline_asm();
      #line 4076 
      break;
      #line 4076 
      case (unsigned long)4: 
                             #line 4076 
      ;
      #line 4077 
      ldv_inline_asm();
      #line 4076 
      break;
      #line 4076 
      case (unsigned long)8: 
                             #line 4076 
      ;
      #line 4077 
      ldv_inline_asm();
      #line 4076 
      break;
      #line 4076 
      default: 
               #line 4076 
      ;
      #line 4076 
      __bad_percpu_size();
    }
    #line 4076 
    pscr_ret__ = pfo_ret___0;
    #line 4076 
    break;
    #line 4076 
    case (unsigned long)4: 
                           #line 4076 
    ;
    #line 4076 
    switch (4UL) {
      #line 4076 
      case (unsigned long)1: 
                             #line 4076 
      ;
      #line 4077 
      ldv_inline_asm();
      #line 4076 
      break;
      #line 4076 
      case (unsigned long)2: 
                             #line 4076 
      ;
      #line 4077 
      ldv_inline_asm();
      #line 4076 
      break;
      #line 4076 
      case (unsigned long)4: 
                             #line 4076 
      ;
      #line 4077 
      ldv_inline_asm();
      #line 4076 
      break;
      #line 4076 
      case (unsigned long)8: 
                             #line 4076 
      ;
      #line 4077 
      ldv_inline_asm();
      #line 4076 
      break;
      #line 4076 
      default: 
               #line 4076 
      ;
      #line 4076 
      __bad_percpu_size();
    }
    #line 4076 
    pscr_ret__ = pfo_ret___1;
    #line 4076 
    break;
    #line 4076 
    case (unsigned long)8: 
                           #line 4076 
    ;
    #line 4076 
    switch (4UL) {
      #line 4076 
      case (unsigned long)1: 
                             #line 4076 
      ;
      #line 4077 
      ldv_inline_asm();
      #line 4076 
      break;
      #line 4076 
      case (unsigned long)2: 
                             #line 4076 
      ;
      #line 4077 
      ldv_inline_asm();
      #line 4076 
      break;
      #line 4076 
      case (unsigned long)4: 
                             #line 4076 
      ;
      #line 4077 
      ldv_inline_asm();
      #line 4076 
      break;
      #line 4076 
      case (unsigned long)8: 
                             #line 4076 
      ;
      #line 4077 
      ldv_inline_asm();
      #line 4076 
      break;
      #line 4076 
      default: 
               #line 4076 
      ;
      #line 4076 
      __bad_percpu_size();
    }
    #line 4076 
    pscr_ret__ = pfo_ret___2;
    #line 4076 
    break;
    #line 4076 
    default: 
             #line 4076 
    ;
    #line 4076 
    __bad_size_call_parameter();
    #line 4076 
    break;
  }
  #line 4076 
  cpu = pscr_ret__;
  #line 4077 
  i = 0U;
  #line 4077 
  while (dev->num_tx_queues > i) {
    {
      #line 4078 
      struct netdev_queue *txq = netdev_get_tx_queue(dev,i);
      #line 4080 
      __netif_tx_lock(txq,cpu);
      #line 4081 
      netif_tx_stop_queue(txq);
      #line 4082 
      __netif_tx_unlock(txq);
    }
    #line 4077 
    i ++;
  }
  #line 4084 
  local_bh_enable();
  #line 4085 
  return;
}

#line 4131 
#line 1211  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/broadcom/tg3.ko/concurrency safety/0/concurrency safety/weaver/tg3.i.aux"
static int cif_register_netdev(struct net_device *dev);
#line 4132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
#line 1227  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/broadcom/tg3.ko/concurrency safety/0/concurrency safety/weaver/tg3.i.aux"
static void cif_unregister_netdev(struct net_device *dev);
#line 4371  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
#line 4371 
void netdev_rss_key_fill(void *, size_t);
#line 4373 
#line 4373 
int skb_checksum_help(struct sk_buff *);
#line 4378 
#line 4378 
struct sk_buff *__skb_gso_segment(struct sk_buff *, netdev_features_t, bool);
#line 4397  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static struct sk_buff *skb_gso_segment(struct sk_buff *skb, netdev_features_t features)
{
  #line 4399 
  return __skb_gso_segment(skb,features,(_Bool)1);
}

#line 4452  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static bool netdev_xmit_more(void)
{
  #line 4454 
  u8 pscr_ret__;
  #line 4454 
  __this_cpu_preempt_check((char *)"read");
  {
    #line 4454 
    void *__vpp_verify = (void *)0;
    #line 4454 
    void *tmp = __vpp_verify;
  }
  #line 4454 
  switch (1UL) {
    #line 4454 
    u8 pfo_ret___1;
    #line 4454 
    u8 pfo_ret___2;
    #line 4454 
    u8 pfo_ret__;
    #line 4454 
    u8 pfo_ret___0;
    #line 4454 
    case (unsigned long)1: 
                           #line 4454 
    ;
    #line 4454 
    switch (1UL) {
      #line 4454 
      case (unsigned long)1: 
                             #line 4454 
      ;
      #line 4455 
      ldv_inline_asm();
      #line 4454 
      break;
      #line 4454 
      case (unsigned long)2: 
                             #line 4454 
      ;
      #line 4455 
      ldv_inline_asm();
      #line 4454 
      break;
      #line 4454 
      case (unsigned long)4: 
                             #line 4454 
      ;
      #line 4455 
      ldv_inline_asm();
      #line 4454 
      break;
      #line 4454 
      case (unsigned long)8: 
                             #line 4454 
      ;
      #line 4455 
      ldv_inline_asm();
      #line 4454 
      break;
      #line 4454 
      default: 
               #line 4454 
      ;
      #line 4454 
      __bad_percpu_size();
    }
    #line 4454 
    pscr_ret__ = pfo_ret__;
    #line 4454 
    break;
    #line 4454 
    case (unsigned long)2: 
                           #line 4454 
    ;
    #line 4454 
    switch (1UL) {
      #line 4454 
      case (unsigned long)1: 
                             #line 4454 
      ;
      #line 4455 
      ldv_inline_asm();
      #line 4454 
      break;
      #line 4454 
      case (unsigned long)2: 
                             #line 4454 
      ;
      #line 4455 
      ldv_inline_asm();
      #line 4454 
      break;
      #line 4454 
      case (unsigned long)4: 
                             #line 4454 
      ;
      #line 4455 
      ldv_inline_asm();
      #line 4454 
      break;
      #line 4454 
      case (unsigned long)8: 
                             #line 4454 
      ;
      #line 4455 
      ldv_inline_asm();
      #line 4454 
      break;
      #line 4454 
      default: 
               #line 4454 
      ;
      #line 4454 
      __bad_percpu_size();
    }
    #line 4454 
    pscr_ret__ = pfo_ret___0;
    #line 4454 
    break;
    #line 4454 
    case (unsigned long)4: 
                           #line 4454 
    ;
    #line 4454 
    switch (1UL) {
      #line 4454 
      case (unsigned long)1: 
                             #line 4454 
      ;
      #line 4455 
      ldv_inline_asm();
      #line 4454 
      break;
      #line 4454 
      case (unsigned long)2: 
                             #line 4454 
      ;
      #line 4455 
      ldv_inline_asm();
      #line 4454 
      break;
      #line 4454 
      case (unsigned long)4: 
                             #line 4454 
      ;
      #line 4455 
      ldv_inline_asm();
      #line 4454 
      break;
      #line 4454 
      case (unsigned long)8: 
                             #line 4454 
      ;
      #line 4455 
      ldv_inline_asm();
      #line 4454 
      break;
      #line 4454 
      default: 
               #line 4454 
      ;
      #line 4454 
      __bad_percpu_size();
    }
    #line 4454 
    pscr_ret__ = pfo_ret___1;
    #line 4454 
    break;
    #line 4454 
    case (unsigned long)8: 
                           #line 4454 
    ;
    #line 4454 
    switch (1UL) {
      #line 4454 
      case (unsigned long)1: 
                             #line 4454 
      ;
      #line 4455 
      ldv_inline_asm();
      #line 4454 
      break;
      #line 4454 
      case (unsigned long)2: 
                             #line 4454 
      ;
      #line 4455 
      ldv_inline_asm();
      #line 4454 
      break;
      #line 4454 
      case (unsigned long)4: 
                             #line 4454 
      ;
      #line 4455 
      ldv_inline_asm();
      #line 4454 
      break;
      #line 4454 
      case (unsigned long)8: 
                             #line 4454 
      ;
      #line 4455 
      ldv_inline_asm();
      #line 4454 
      break;
      #line 4454 
      default: 
               #line 4454 
      ;
      #line 4454 
      __bad_percpu_size();
    }
    #line 4454 
    pscr_ret__ = pfo_ret___2;
    #line 4454 
    break;
    #line 4454 
    default: 
             #line 4454 
    ;
    #line 4454 
    __bad_size_call_parameter();
    #line 4454 
    break;
  }
  #line 4454 
  return (_Bool)((unsigned int)pscr_ret__ != 0U);
}

#line 4523 
#line 4523 
void netdev_update_features(struct net_device *);
#line 4750 
#line 4750 
void netdev_err(struct net_device *, char * , ...);
#line 4752 
#line 4752 
void netdev_warn(struct net_device *, char * , ...);
#line 4754 
#line 4754 
void netdev_notice(struct net_device *, char * , ...);
#line 4756 
#line 4756 
void netdev_info(struct net_device *, char * , ...);
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/etherdevice.h"
#line 28 
int eth_platform_get_mac_address(struct device *, u8 *);
#line 32 
#line 32 
__be16 eth_type_trans(struct sk_buff *, struct net_device *);
#line 47 
#line 47 
int eth_validate_addr(struct net_device *);
#line 51 
#line 1203  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/broadcom/tg3.ko/concurrency safety/0/concurrency safety/weaver/tg3.i.aux"
static struct net_device *cif_alloc_etherdev_mqs(int sizeof_priv, unsigned int txqs, unsigned int rxqs);
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/etherdevice.h"
__inline static bool is_zero_ether_addr(u8 *addr)
{
  #line 101 
  return (_Bool)((*((u32 *)addr) | (unsigned int)*((u16 *)(addr + 4U))) == 0U);
}

#line 116  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/etherdevice.h"
__inline static bool is_multicast_ether_addr(u8 *addr)
{
  #line 119 
  u32 a = *((u32 *)addr);
  #line 126 
  return (_Bool)((a & 1U) != 0U);
}

#line 191  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/etherdevice.h"
__inline static bool is_valid_ether_addr(u8 *addr)
{
  #line 195 
  int tmp_1;
  #line 195 
  if (is_multicast_ether_addr(addr)) 
                                     #line 195 
                                     tmp_1 = 0;
  else {
    #line 195 
    if (is_zero_ether_addr(addr)) 
                                  #line 195 
                                  tmp_1 = 0; else 
                                                  #line 195 
                                                  tmp_1 = 1;
  }
  #line 195 
  return (_Bool)(tmp_1 != 0);
}

#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/linkmode.h"
__inline static void linkmode_copy(unsigned long *dst, unsigned long *src)
{
  #line 15 
  bitmap_copy(dst,src,74U);
  #line 16 
  return;
}

#line 41  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/linkmode.h"
__inline static void linkmode_set_bit(int nr, unsigned long *addr)
{
  #line 43 
  __set_bit((long)nr,addr);
  #line 44 
  return;
}

#line 51  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mii.h"
__inline static struct mii_ioctl_data *if_mii(struct ifreq *rq)
{
  #line 53 
  return (struct mii_ioctl_data *)(& rq->ifr_ifru);
}

#line 115  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mii.h"
__inline static u32 ethtool_adv_to_mii_adv_t(u32 ethadv)
{
  #line 117 
  u32 result = 0U;
  #line 119 
  if (((unsigned long)ethadv & 1UL) != 0UL) 
                                            #line 120 
                                            result |= 32U;
  #line 121 
  if (((unsigned long)ethadv & 2UL) != 0UL) 
                                            #line 122 
                                            result |= 64U;
  #line 123 
  if (((unsigned long)ethadv & 4UL) != 0UL) 
                                            #line 124 
                                            result |= 128U;
  #line 125 
  if (((unsigned long)ethadv & 8UL) != 0UL) 
                                            #line 126 
                                            result |= 256U;
  #line 127 
  if (((unsigned long)ethadv & 8192UL) != 0UL) 
                                               #line 128 
                                               result |= 1024U;
  #line 129 
  if (((unsigned long)ethadv & 16384UL) != 0UL) 
                                                #line 130 
                                                result |= 2048U;
  #line 132 
  return result;
}

#line 170  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mii.h"
__inline static u32 mii_adv_to_ethtool_adv_t(u32 adv)
{
  #line 172 
  u32 result = 0U;
  #line 174 
  if ((adv & 32U) != 0U) 
                         #line 175 
                         result |= 1U;
  #line 176 
  if ((adv & 64U) != 0U) 
                         #line 177 
                         result |= 2U;
  #line 178 
  if ((adv & 128U) != 0U) 
                          #line 179 
                          result |= 4U;
  #line 180 
  if ((adv & 256U) != 0U) 
                          #line 181 
                          result |= 8U;
  #line 182 
  if ((adv & 1024U) != 0U) 
                           #line 183 
                           result |= 8192U;
  #line 184 
  if ((adv & 2048U) != 0U) 
                           #line 185 
                           result |= 16384U;
  #line 187 
  return result;
}

#line 198  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mii.h"
__inline static u32 ethtool_adv_to_mii_ctrl1000_t(u32 ethadv)
{
  #line 200 
  u32 result = 0U;
  #line 202 
  if (((unsigned long)ethadv & 16UL) != 0UL) 
                                             #line 203 
                                             result |= 256U;
  #line 204 
  if (((unsigned long)ethadv & 32UL) != 0UL) 
                                             #line 205 
                                             result |= 512U;
  #line 207 
  return result;
}

#line 240  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mii.h"
__inline static u32 mii_ctrl1000_to_ethtool_adv_t(u32 adv)
{
  #line 242 
  u32 result = 0U;
  #line 244 
  if ((adv & 256U) != 0U) 
                          #line 245 
                          result |= 16U;
  #line 246 
  if ((adv & 512U) != 0U) 
                          #line 247 
                          result |= 32U;
  #line 249 
  return result;
}

#line 260  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mii.h"
__inline static u32 mii_lpa_to_ethtool_lpa_t(u32 lpa)
{
  #line 262 
  u32 result = 0U;
  #line 264 
  if ((lpa & 16384U) != 0U) 
                            #line 265 
                            result |= 64U;
  #line 267 
  ;
  #line 267 
  return mii_adv_to_ethtool_adv_t(lpa) | result;
}

#line 278  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mii.h"
__inline static u32 mii_stat1000_to_ethtool_lpa_t(u32 lpa)
{
  #line 280 
  u32 result = 0U;
  #line 282 
  if ((lpa & 1024U) != 0U) 
                           #line 283 
                           result |= 16U;
  #line 284 
  if ((lpa & 2048U) != 0U) 
                           #line 285 
                           result |= 32U;
  #line 287 
  return result;
}

#line 317  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mii.h"
__inline static u32 ethtool_adv_to_mii_adv_x(u32 ethadv)
{
  #line 319 
  u32 result = 0U;
  #line 321 
  if (((unsigned long)ethadv & 16UL) != 0UL) 
                                             #line 322 
                                             result |= 64U;
  #line 323 
  if (((unsigned long)ethadv & 32UL) != 0UL) 
                                             #line 324 
                                             result |= 32U;
  #line 325 
  if (((unsigned long)ethadv & 8192UL) != 0UL) 
                                               #line 326 
                                               result |= 128U;
  #line 327 
  if (((unsigned long)ethadv & 16384UL) != 0UL) 
                                                #line 328 
                                                result |= 256U;
  #line 330 
  return result;
}

#line 341  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mii.h"
__inline static u32 mii_adv_to_ethtool_adv_x(u32 adv)
{
  #line 343 
  u32 result = 0U;
  #line 345 
  if ((adv & 64U) != 0U) 
                         #line 346 
                         result |= 16U;
  #line 347 
  if ((adv & 32U) != 0U) 
                         #line 348 
                         result |= 32U;
  #line 349 
  if ((adv & 128U) != 0U) 
                          #line 350 
                          result |= 8192U;
  #line 351 
  if ((adv & 256U) != 0U) 
                          #line 352 
                          result |= 16384U;
  #line 354 
  return result;
}

#line 492  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mii.h"
__inline static u16 mii_advertise_flowctrl(int cap)
{
  #line 494 
  u16 adv = (unsigned short)0U;
  #line 496 
  if ((cap & 2) != 0) 
                      #line 497 
                      adv = (unsigned short)3072U;
  #line 498 
  if ((cap & 1) != 0) 
                      #line 499 
                      adv = (unsigned short)((unsigned int)adv ^ 2048U);
  #line 501 
  return adv;
}

#line 511  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mii.h"
__inline static u8 mii_resolve_flowctrl_fdx(u16 lcladv, u16 rmtadv)
{
  #line 513 
  u8 cap = (unsigned char)0U;
  #line 515 
  if ((((int)lcladv & (int)rmtadv) & 1024) != 0) 
                                                 #line 516 
                                                 cap = (unsigned char)3U;
  else 
    #line 517 
    if ((((int)lcladv & (int)rmtadv) & 2048) != 0) 
      #line 518 
      if (((int)lcladv & 1024) != 0) 
                                     #line 519 
                                     cap = (unsigned char)2U;
      else 
        #line 520 
        if (((int)rmtadv & 1024) != 0) 
                                       #line 521 
                                       cap = (unsigned char)1U;
  #line 524 
  return cap;
}

#line 225  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mdio.h"
__inline static u32 mmd_eee_adv_to_ethtool_adv_t(u16 eee_adv)
{
  #line 227 
  u32 adv = 0U;
  #line 229 
  if (((int)eee_adv & 2) != 0) 
                               #line 230 
                               adv |= 8U;
  #line 231 
  if (((int)eee_adv & 4) != 0) 
                               #line 232 
                               adv |= 32U;
  #line 233 
  if (((int)eee_adv & 8) != 0) 
                               #line 234 
                               adv |= 4096U;
  #line 235 
  if (((int)eee_adv & 16) != 0) 
                                #line 236 
                                adv |= 131072U;
  #line 237 
  if (((int)eee_adv & 32) != 0) 
                                #line 238 
                                adv |= 262144U;
  #line 239 
  if (((int)eee_adv & 64) != 0) 
                                #line 240 
                                adv |= 524288U;
  #line 242 
  return adv;
}

#line 328 
#line 328 
struct phy_device *mdiobus_get_phy(struct mii_bus *, int);
#line 260  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/phy.h"
#line 260 
struct mii_bus *mdiobus_alloc_size(size_t);
#line 261  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/phy.h"
__inline static struct mii_bus *mdiobus_alloc(void)
{
  #line 263 
  return mdiobus_alloc_size(0UL);
}

#line 266 
#line 266 
int __mdiobus_register(struct mii_bus *, struct module *);
#line 268 
#line 268 
void mdiobus_unregister(struct mii_bus *);
#line 269 
#line 269 
void mdiobus_free(struct mii_bus *);
#line 1042 
#line 1042 
struct phy_device *phy_connect(struct net_device *, char *, void (*)(struct net_device *), phy_interface_t);
#line 1045 
#line 1045 
void phy_disconnect(struct phy_device *);
#line 1047 
#line 1047 
void phy_start(struct phy_device *);
#line 1048 
#line 1048 
void phy_stop(struct phy_device *);
#line 1049 
#line 1049 
int phy_start_aneg(struct phy_device *);
#line 1074  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/phy.h"
__inline static char *phydev_name(struct phy_device *phydev)
{
  #line 1076 
  return dev_name(& phydev->mdio.dev);
}

#line 1091 
#line 1091 
void phy_attached_info(struct phy_device *);
#line 1173 
#line 1173 
void phy_ethtool_ksettings_get(struct phy_device *, struct ethtool_link_ksettings *);
#line 1175 
#line 1175 
int phy_ethtool_ksettings_set(struct phy_device *, struct ethtool_link_ksettings *);
#line 1177 
#line 1177 
int phy_mii_ioctl(struct phy_device *, struct ifreq *, int);
#line 1181 
#line 1181 
int phy_set_max_speed(struct phy_device *, u32);
#line 1185 
#line 1185 
void phy_support_asym_pause(struct phy_device *);
#line 1188 
#line 1188 
void phy_set_asym_pause(struct phy_device *, bool, bool);
#line 1189 
#line 1189 
bool phy_validate_pause(struct phy_device *, struct ethtool_pauseparam *);
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rtnetlink.h"
#line 33 
void rtnl_lock(void);
#line 34 
#line 34 
void rtnl_unlock(void);
#line 510  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/if_vlan.h"
__inline static void __vlan_hwaccel_put_tag(struct sk_buff *skb, __be16 vlan_proto, u16 vlan_tci)
{
  #line 513 
  skb->vlan_proto = vlan_proto;
  #line 514 
  skb->vlan_tci = vlan_tci;
  #line 515 
  skb->vlan_present = (unsigned char)1U;
  #line 516 
  return;
}

#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ip.h"
__inline static struct iphdr *ip_hdr(struct sk_buff *skb)
{
  #line 21 
  return (struct iphdr *)skb_network_header(skb);
}

#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/tcp.h"
__inline static struct tcphdr *tcp_hdr(struct sk_buff *skb)
{
  #line 26 
  return (struct tcphdr *)skb_transport_header(skb);
}

#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/tcp.h"
__inline static unsigned int __tcp_hdrlen(struct tcphdr *th)
{
  #line 31 
  return (unsigned int)((int)th->doff * 4);
}

#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/tcp.h"
__inline static unsigned int tcp_hdrlen(struct sk_buff *skb)
{
  #line 36 
  return __tcp_hdrlen(tcp_hdr(skb));
}

#line 49  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/tcp.h"
__inline static unsigned int tcp_optlen(struct sk_buff *skb)
{
  #line 51 
  ;
  #line 51 
  return (unsigned int)(((int)tcp_hdr(skb)->doff + -5) * 4);
}

#line 45  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/firmware.h"
#line 1189  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/broadcom/tg3.ko/concurrency safety/0/concurrency safety/weaver/tg3.i.aux"
static int cif_request_firmware(struct firmware **fw, char *name, struct device *device);
#line 57  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/firmware.h"
#line 1196  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/broadcom/tg3.ko/concurrency safety/0/concurrency safety/weaver/tg3.i.aux"
static void cif_release_firmware(struct firmware *fw);
#line 160  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ssb/ssb_driver_gige.h"
__inline static bool pdev_is_ssb_gige_core(struct pci_dev *pdev)
{
  #line 162 
  return (_Bool)0;
}

#line 184  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ssb/ssb_driver_gige.h"
__inline static int ssb_gige_get_macaddr(struct pci_dev *pdev, u8 *macaddr)
{
  #line 186 
  return -19;
}

#line 188  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ssb/ssb_driver_gige.h"
__inline static int ssb_gige_get_phyaddr(struct pci_dev *pdev)
{
  #line 190 
  return -19;
}

#line 398  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/hwmon.h"
#line 398 
struct device *hwmon_device_register_with_groups(struct device *, char *, void *, struct attribute_group **);
#line 416 
#line 416 
void hwmon_device_unregister(struct device *);
#line 186  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ptp_clock_kernel.h"
#line 186 
struct ptp_clock *ptp_clock_register(struct ptp_clock_info *, struct device *);
#line 195 
#line 195 
int ptp_clock_unregister(struct ptp_clock *);
#line 213 
#line 213 
int ptp_clock_index(struct ptp_clock *);
#line 266  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ptp_clock_kernel.h"
__inline static void ptp_read_system_prets(struct ptp_system_timestamp *sts)
{
  #line 268 
  if (sts != (struct ptp_system_timestamp *)0) 
                                               #line 269 
                                               ktime_get_real_ts64(& sts->pre_ts);
  #line 270 
  return;
}

#line 272  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ptp_clock_kernel.h"
__inline static void ptp_read_system_postts(struct ptp_system_timestamp *sts)
{
  #line 274 
  if (sts != (struct ptp_system_timestamp *)0) 
                                               #line 275 
                                               ktime_get_real_ts64(& sts->post_ts);
  #line 276 
  return;
}

#line 76  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
__inline static int _tg3_flag(enum TG3_FLAGS flag, unsigned long *bits)
{
  #line 78 
  return (int)test_bit((long)flag,bits);
}

#line 81  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
__inline static void _tg3_flag_set(enum TG3_FLAGS flag, unsigned long *bits)
{
  #line 83 
  cif_set_bit((long)flag,bits);
  #line 84 
  return;
}

#line 86  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
__inline static void _tg3_flag_clear(enum TG3_FLAGS flag, unsigned long *bits)
{
  #line 88 
  cif_clear_bit((long)flag,bits);
  #line 89 
  return;
}

#line 225  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
static char version[28U] = {(char)'t', (char)'g', (char)'3'};
#line 236  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
static int tg3_debug = -1;
#line 243  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
static struct pci_device_id tg3_pci_tbl[97U] = {{.vendor = 5348U, .device = 5700U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 5348U, .device = 5701U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 5348U, .device = 5702U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 5348U, .device = 5703U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 5348U, .device = 5704U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 5348U, .device = 5709U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 5348U, .device = 5715U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 5348U, .device = 5716U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 5348U, .device = 5725U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 5348U, .device = 5726U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 5348U, .device = 5798U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 5348U, .device = 5799U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 5348U, .device = 5800U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 5348U, .device = 5830U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 5348U, .device = 5831U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 5348U, .device = 5782U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 5348U, .device = 5788U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 5348U, .device = 5789U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 5348U, .device = 5901U, .subvendor = 4294967295U, .subdevice = 4294967295U, .driver_data = 3UL}, {.vendor = 5348U, .device = 5902U, .subvendor = 4294967295U, .subdevice = 4294967295U, .driver_data = 3UL}, {.vendor = 5348U, .device = 5705U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 5348U, .device = 5742U, .subvendor = 4294967295U, .subdevice = 4294967295U, .driver_data = 3UL}, {.vendor = 5348U, .device = 5721U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 5348U, .device = 5722U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 5348U, .device = 5750U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 5348U, .device = 5751U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 5348U, .device = 5757U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 5348U, .device = 5758U, .subvendor = 4294967295U, .subdevice = 4294967295U, .driver_data = 1UL}, {.vendor = 5348U, .device = 5632U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 5348U, .device = 5633U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 5348U, .device = 5879U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 5348U, .device = 5885U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 5348U, .device = 5886U, .subvendor = 4294967295U, .subdevice = 4294967295U, .driver_data = 1UL}, {.vendor = 5348U, .device = 5754U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 5348U, .device = 5746U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 5348U, .device = 5755U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 5348U, .device = 5747U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 5348U, .device = 5748U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 5348U, .device = 5786U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 5348U, .device = 5787U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 5348U, .device = 5779U, .subvendor = 6058U, .subdevice = 12374U, .driver_data = 1UL}, {.vendor = 5348U, .device = 5779U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 5348U, .device = 5759U, .subvendor = 4294967295U, .subdevice = 4294967295U, .driver_data = 1UL}, {.vendor = 5348U, .device = 5736U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 5348U, .device = 5737U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 5348U, .device = 5752U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 5348U, .device = 5753U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 5348U, .device = 5738U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 5348U, .device = 5739U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 5348U, .device = 5853U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 5348U, .device = 5906U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 5348U, .device = 5907U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 5348U, .device = 5784U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 5348U, .device = 5764U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 5348U, .device = 5723U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 5348U, .device = 5761U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 5348U, .device = 5760U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 5348U, .device = 5768U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 5348U, .device = 5769U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 5348U, .device = 5785U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 5348U, .device = 5792U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 5348U, .device = 5778U, .subvendor = 4133U, .subdevice = 1537U, .driver_data = 1UL}, {.vendor = 5348U, .device = 5778U, .subvendor = 4133U, .subdevice = 1554U, .driver_data = 1UL}, {.vendor = 5348U, .device = 5778U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 5348U, .device = 5776U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 5348U, .device = 5780U, .subvendor = 4294967295U, .subdevice = 4294967295U, .driver_data = 1UL}, {.vendor = 5348U, .device = 5777U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 5348U, .device = 5717U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 5348U, .device = 5733U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 5348U, .device = 5718U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 5348U, .device = 5809U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 5348U, .device = 5813U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 5348U, .device = 5808U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 5348U, .device = 5812U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 5348U, .device = 5810U, .subvendor = 4294967295U, .subdevice = 4294967295U, .driver_data = 1UL}, {.vendor = 5348U, .device = 5814U, .subvendor = 4294967295U, .subdevice = 4294967295U, .driver_data = 1UL}, {.vendor = 5348U, .device = 5719U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 5348U, .device = 5727U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 5348U, .device = 5762U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 5348U, .device = 5766U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 5348U, .device = 5767U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 5348U, .device = 5699U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 5348U, .device = 5875U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 5348U, .device = 5698U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 5348U, .device = 5763U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 5348U, .device = 5697U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 5348U, .device = 5815U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 5348U, .device = 5811U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 4424U, .device = 17408U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 4424U, .device = 17664U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 5947U, .device = 1000U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 5947U, .device = 1001U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 5947U, .device = 1003U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 5947U, .device = 1002U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 4203U, .device = 5701U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 4303U, .device = 4514U, .subvendor = 4294967295U, .subdevice = 4294967295U}};
#line 362  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
struct pci_device_id __mod_pci__tg3_pci_tbl_device_table[97U];
#line 366  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
static struct __anonstruct_ethtool_stats_keys_1015 ethtool_stats_keys[72U] = {{.string = {(char)'r', (char)'x', (char)'_', (char)'o', (char)'c', (char)'t', (char)'e', (char)'t', (char)'s'}}, {.string = {(char)'r', (char)'x', (char)'_', (char)'f', (char)'r', (char)'a', (char)'g', (char)'m', (char)'e', (char)'n', (char)'t', (char)'s'}}, {.string = {(char)'r', (char)'x', (char)'_', (char)'u', (char)'c', (char)'a', (char)'s', (char)'t', (char)'_', (char)'p', (char)'a', (char)'c', (char)'k', (char)'e', (char)'t', (char)'s'}}, {.string = {(char)'r', (char)'x', (char)'_', (char)'m', (char)'c', (char)'a', (char)'s', (char)'t', (char)'_', (char)'p', (char)'a', (char)'c', (char)'k', (char)'e', (char)'t', (char)'s'}}, {.string = {(char)'r', (char)'x', (char)'_', (char)'b', (char)'c', (char)'a', (char)'s', (char)'t', (char)'_', (char)'p', (char)'a', (char)'c', (char)'k', (char)'e', (char)'t', (char)'s'}}, {.string = {(char)'r', (char)'x', (char)'_', (char)'f', (char)'c', (char)'s', (char)'_', (char)'e', (char)'r', (char)'r', (char)'o', (char)'r', (char)'s'}}, {.string = {(char)'r', (char)'x', (char)'_', (char)'a', (char)'l', (char)'i', (char)'g', (char)'n', (char)'_', (char)'e', (char)'r', (char)'r', (char)'o', (char)'r', (char)'s'}}, {.string = {(char)'r', (char)'x', (char)'_', (char)'x', (char)'o', (char)'n', (char)'_', (char)'p', (char)'a', (char)'u', (char)'s', (char)'e', (char)'_', (char)'r', (char)'c', (char)'v', (char)'d'}}, {.string = {(char)'r', (char)'x', (char)'_', (char)'x', (char)'o', (char)'f', (char)'f', (char)'_', (char)'p', (char)'a', (char)'u', (char)'s', (char)'e', (char)'_', (char)'r', (char)'c', (char)'v', (char)'d'}}, {.string = {(char)'r', (char)'x', (char)'_', (char)'m', (char)'a', (char)'c', (char)'_', (char)'c', (char)'t', (char)'r', (char)'l', (char)'_', (char)'r', (char)'c', (char)'v', (char)'d'}}, {.string = {(char)'r', (char)'x', (char)'_', (char)'x', (char)'o', (char)'f', (char)'f', (char)'_', (char)'e', (char)'n', (char)'t', (char)'e', (char)'r', (char)'e', (char)'d'}}, {.string = {(char)'r', (char)'x', (char)'_', (char)'f', (char)'r', (char)'a', (char)'m', (char)'e', (char)'_', (char)'t', (char)'o', (char)'o', (char)'_', (char)'l', (char)'o', (char)'n', (char)'g', (char)'_', (char)'e', (char)'r', (char)'r', (char)'o', (char)'r', (char)'s'}}, {.string = {(char)'r', (char)'x', (char)'_', (char)'j', (char)'a', (char)'b', (char)'b', (char)'e', (char)'r', (char)'s'}}, {.string = {(char)'r', (char)'x', (char)'_', (char)'u', (char)'n', (char)'d', (char)'e', (char)'r', (char)'s', (char)'i', (char)'z', (char)'e', (char)'_', (char)'p', (char)'a', (char)'c', (char)'k', (char)'e', (char)'t', (char)'s'}}, {.string = {(char)'r', (char)'x', (char)'_', (char)'i', (char)'n', (char)'_', (char)'l', (char)'e', (char)'n', (char)'g', (char)'t', (char)'h', (char)'_', (char)'e', (char)'r', (char)'r', (char)'o', (char)'r', (char)'s'}}, {.string = {(char)'r', (char)'x', (char)'_', (char)'o', (char)'u', (char)'t', (char)'_', (char)'l', (char)'e', (char)'n', (char)'g', (char)'t', (char)'h', (char)'_', (char)'e', (char)'r', (char)'r', (char)'o', (char)'r', (char)'s'}}, {.string = {(char)'r', (char)'x', (char)'_', (char)'6', (char)'4', (char)'_', (char)'o', (char)'r', (char)'_', (char)'l', (char)'e', (char)'s', (char)'s', (char)'_', (char)'o', (char)'c', (char)'t', (char)'e', (char)'t', (char)'_', (char)'p', (char)'a', (char)'c', (char)'k', (char)'e', (char)'t', (char)'s'}}, {.string = {(char)'r', (char)'x', (char)'_', (char)'6', (char)'5', (char)'_', (char)'t', (char)'o', (char)'_', (char)'1', (char)'2', (char)'7', (char)'_', (char)'o', (char)'c', (char)'t', (char)'e', (char)'t', (char)'_', (char)'p', (char)'a', (char)'c', (char)'k', (char)'e', (char)'t', (char)'s'}}, {.string = {(char)'r', (char)'x', (char)'_', (char)'1', (char)'2', (char)'8', (char)'_', (char)'t', (char)'o', (char)'_', (char)'2', (char)'5', (char)'5', (char)'_', (char)'o', (char)'c', (char)'t', (char)'e', (char)'t', (char)'_', (char)'p', (char)'a', (char)'c', (char)'k', (char)'e', (char)'t', (char)'s'}}, {.string = {(char)'r', (char)'x', (char)'_', (char)'2', (char)'5', (char)'6', (char)'_', (char)'t', (char)'o', (char)'_', (char)'5', (char)'1', (char)'1', (char)'_', (char)'o', (char)'c', (char)'t', (char)'e', (char)'t', (char)'_', (char)'p', (char)'a', (char)'c', (char)'k', (char)'e', (char)'t', (char)'s'}}, {.string = {(char)'r', (char)'x', (char)'_', (char)'5', (char)'1', (char)'2', (char)'_', (char)'t', (char)'o', (char)'_', (char)'1', (char)'0', (char)'2', (char)'3', (char)'_', (char)'o', (char)'c', (char)'t', (char)'e', (char)'t', (char)'_', (char)'p', (char)'a', (char)'c', (char)'k', (char)'e', (char)'t', (char)'s'}}, {.string = {(char)'r', (char)'x', (char)'_', (char)'1', (char)'0', (char)'2', (char)'4', (char)'_', (char)'t', (char)'o', (char)'_', (char)'1', (char)'5', (char)'2', (char)'2', (char)'_', (char)'o', (char)'c', (char)'t', (char)'e', (char)'t', (char)'_', (char)'p', (char)'a', (char)'c', (char)'k', (char)'e', (char)'t', (char)'s'}}, {.string = {(char)'r', (char)'x', (char)'_', (char)'1', (char)'5', (char)'2', (char)'3', (char)'_', (char)'t', (char)'o', (char)'_', (char)'2', (char)'0', (char)'4', (char)'7', (char)'_', (char)'o', (char)'c', (char)'t', (char)'e', (char)'t', (char)'_', (char)'p', (char)'a', (char)'c', (char)'k', (char)'e', (char)'t', (char)'s'}}, {.string = {(char)'r', (char)'x', (char)'_', (char)'2', (char)'0', (char)'4', (char)'8', (char)'_', (char)'t', (char)'o', (char)'_', (char)'4', (char)'0', (char)'9', (char)'5', (char)'_', (char)'o', (char)'c', (char)'t', (char)'e', (char)'t', (char)'_', (char)'p', (char)'a', (char)'c', (char)'k', (char)'e', (char)'t', (char)'s'}}, {.string = {(char)'r', (char)'x', (char)'_', (char)'4', (char)'0', (char)'9', (char)'6', (char)'_', (char)'t', (char)'o', (char)'_', (char)'8', (char)'1', (char)'9', (char)'1', (char)'_', (char)'o', (char)'c', (char)'t', (char)'e', (char)'t', (char)'_', (char)'p', (char)'a', (char)'c', (char)'k', (char)'e', (char)'t', (char)'s'}}, {.string = {(char)'r', (char)'x', (char)'_', (char)'8', (char)'1', (char)'9', (char)'2', (char)'_', (char)'t', (char)'o', (char)'_', (char)'9', (char)'0', (char)'2', (char)'2', (char)'_', (char)'o', (char)'c', (char)'t', (char)'e', (char)'t', (char)'_', (char)'p', (char)'a', (char)'c', (char)'k', (char)'e', (char)'t', (char)'s'}}, {.string = {(char)'t', (char)'x', (char)'_', (char)'o', (char)'c', (char)'t', (char)'e', (char)'t', (char)'s'}}, {.string = {(char)'t', (char)'x', (char)'_', (char)'c', (char)'o', (char)'l', (char)'l', (char)'i', (char)'s', (char)'i', (char)'o', (char)'n', (char)'s'}}, {.string = {(char)'t', (char)'x', (char)'_', (char)'x', (char)'o', (char)'n', (char)'_', (char)'s', (char)'e', (char)'n', (char)'t'}}, {.string = {(char)'t', (char)'x', (char)'_', (char)'x', (char)'o', (char)'f', (char)'f', (char)'_', (char)'s', (char)'e', (char)'n', (char)'t'}}, {.string = {(char)'t', (char)'x', (char)'_', (char)'f', (char)'l', (char)'o', (char)'w', (char)'_', (char)'c', (char)'o', (char)'n', (char)'t', (char)'r', (char)'o', (char)'l'}}, {.string = {(char)'t', (char)'x', (char)'_', (char)'m', (char)'a', (char)'c', (char)'_', (char)'e', (char)'r', (char)'r', (char)'o', (char)'r', (char)'s'}}, {.string = {(char)'t', (char)'x', (char)'_', (char)'s', (char)'i', (char)'n', (char)'g', (char)'l', (char)'e', (char)'_', (char)'c', (char)'o', (char)'l', (char)'l', (char)'i', (char)'s', (char)'i', (char)'o', (char)'n', (char)'s'}}, {.string = {(char)'t', (char)'x', (char)'_', (char)'m', (char)'u', (char)'l', (char)'t', (char)'_', (char)'c', (char)'o', (char)'l', (char)'l', (char)'i', (char)'s', (char)'i', (char)'o', (char)'n', (char)'s'}}, {.string = {(char)'t', (char)'x', (char)'_', (char)'d', (char)'e', (char)'f', (char)'e', (char)'r', (char)'r', (char)'e', (char)'d'}}, {.string = {(char)'t', (char)'x', (char)'_', (char)'e', (char)'x', (char)'c', (char)'e', (char)'s', (char)'s', (char)'i', (char)'v', (char)'e', (char)'_', (char)'c', (char)'o', (char)'l', (char)'l', (char)'i', (char)'s', (char)'i', (char)'o', (char)'n', (char)'s'}}, {.string = {(char)'t', (char)'x', (char)'_', (char)'l', (char)'a', (char)'t', (char)'e', (char)'_', (char)'c', (char)'o', (char)'l', (char)'l', (char)'i', (char)'s', (char)'i', (char)'o', (char)'n', (char)'s'}}, {.string = {(char)'t', (char)'x', (char)'_', (char)'c', (char)'o', (char)'l', (char)'l', (char)'i', (char)'d', (char)'e', (char)'_', (char)'2', (char)'t', (char)'i', (char)'m', (char)'e', (char)'s'}}, {.string = {(char)'t', (char)'x', (char)'_', (char)'c', (char)'o', (char)'l', (char)'l', (char)'i', (char)'d', (char)'e', (char)'_', (char)'3', (char)'t', (char)'i', (char)'m', (char)'e', (char)'s'}}, {.string = {(char)'t', (char)'x', (char)'_', (char)'c', (char)'o', (char)'l', (char)'l', (char)'i', (char)'d', (char)'e', (char)'_', (char)'4', (char)'t', (char)'i', (char)'m', (char)'e', (char)'s'}}, {.string = {(char)'t', (char)'x', (char)'_', (char)'c', (char)'o', (char)'l', (char)'l', (char)'i', (char)'d', (char)'e', (char)'_', (char)'5', (char)'t', (char)'i', (char)'m', (char)'e', (char)'s'}}, {.string = {(char)'t', (char)'x', (char)'_', (char)'c', (char)'o', (char)'l', (char)'l', (char)'i', (char)'d', (char)'e', (char)'_', (char)'6', (char)'t', (char)'i', (char)'m', (char)'e', (char)'s'}}, {.string = {(char)'t', (char)'x', (char)'_', (char)'c', (char)'o', (char)'l', (char)'l', (char)'i', (char)'d', (char)'e', (char)'_', (char)'7', (char)'t', (char)'i', (char)'m', (char)'e', (char)'s'}}, {.string = {(char)'t', (char)'x', (char)'_', (char)'c', (char)'o', (char)'l', (char)'l', (char)'i', (char)'d', (char)'e', (char)'_', (char)'8', (char)'t', (char)'i', (char)'m', (char)'e', (char)'s'}}, {.string = {(char)'t', (char)'x', (char)'_', (char)'c', (char)'o', (char)'l', (char)'l', (char)'i', (char)'d', (char)'e', (char)'_', (char)'9', (char)'t', (char)'i', (char)'m', (char)'e', (char)'s'}}, {.string = {(char)'t', (char)'x', (char)'_', (char)'c', (char)'o', (char)'l', (char)'l', (char)'i', (char)'d', (char)'e', (char)'_', (char)'1', (char)'0', (char)'t', (char)'i', (char)'m', (char)'e', (char)'s'}}, {.string = {(char)'t', (char)'x', (char)'_', (char)'c', (char)'o', (char)'l', (char)'l', (char)'i', (char)'d', (char)'e', (char)'_', (char)'1', (char)'1', (char)'t', (char)'i', (char)'m', (char)'e', (char)'s'}}, {.string = {(char)'t', (char)'x', (char)'_', (char)'c', (char)'o', (char)'l', (char)'l', (char)'i', (char)'d', (char)'e', (char)'_', (char)'1', (char)'2', (char)'t', (char)'i', (char)'m', (char)'e', (char)'s'}}, {.string = {(char)'t', (char)'x', (char)'_', (char)'c', (char)'o', (char)'l', (char)'l', (char)'i', (char)'d', (char)'e', (char)'_', (char)'1', (char)'3', (char)'t', (char)'i', (char)'m', (char)'e', (char)'s'}}, {.string = {(char)'t', (char)'x', (char)'_', (char)'c', (char)'o', (char)'l', (char)'l', (char)'i', (char)'d', (char)'e', (char)'_', (char)'1', (char)'4', (char)'t', (char)'i', (char)'m', (char)'e', (char)'s'}}, {.string = {(char)'t', (char)'x', (char)'_', (char)'c', (char)'o', (char)'l', (char)'l', (char)'i', (char)'d', (char)'e', (char)'_', (char)'1', (char)'5', (char)'t', (char)'i', (char)'m', (char)'e', (char)'s'}}, {.string = {(char)'t', (char)'x', (char)'_', (char)'u', (char)'c', (char)'a', (char)'s', (char)'t', (char)'_', (char)'p', (char)'a', (char)'c', (char)'k', (char)'e', (char)'t', (char)'s'}}, {.string = {(char)'t', (char)'x', (char)'_', (char)'m', (char)'c', (char)'a', (char)'s', (char)'t', (char)'_', (char)'p', (char)'a', (char)'c', (char)'k', (char)'e', (char)'t', (char)'s'}}, {.string = {(char)'t', (char)'x', (char)'_', (char)'b', (char)'c', (char)'a', (char)'s', (char)'t', (char)'_', (char)'p', (char)'a', (char)'c', (char)'k', (char)'e', (char)'t', (char)'s'}}, {.string = {(char)'t', (char)'x', (char)'_', (char)'c', (char)'a', (char)'r', (char)'r', (char)'i', (char)'e', (char)'r', (char)'_', (char)'s', (char)'e', (char)'n', (char)'s', (char)'e', (char)'_', (char)'e', (char)'r', (char)'r', (char)'o', (char)'r', (char)'s'}}, {.string = {(char)'t', (char)'x', (char)'_', (char)'d', (char)'i', (char)'s', (char)'c', (char)'a', (char)'r', (char)'d', (char)'s'}}, {.string = {(char)'t', (char)'x', (char)'_', (char)'e', (char)'r', (char)'r', (char)'o', (char)'r', (char)'s'}}, {.string = {(char)'d', (char)'m', (char)'a', (char)'_', (char)'w', (char)'r', (char)'i', (char)'t', (char)'e', (char)'q', (char)'_', (char)'f', (char)'u', (char)'l', (char)'l'}}, {.string = {(char)'d', (char)'m', (char)'a', (char)'_', (char)'w', (char)'r', (char)'i', (char)'t', (char)'e', (char)'_', (char)'p', (char)'r', (char)'i', (char)'o', (char)'q', (char)'_', (char)'f', (char)'u', (char)'l', (char)'l'}}, {.string = {(char)'r', (char)'x', (char)'b', (char)'d', (char)'s', (char)'_', (char)'e', (char)'m', (char)'p', (char)'t', (char)'y'}}, {.string = {(char)'r', (char)'x', (char)'_', (char)'d', (char)'i', (char)'s', (char)'c', (char)'a', (char)'r', (char)'d', (char)'s'}}, {.string = {(char)'r', (char)'x', (char)'_', (char)'e', (char)'r', (char)'r', (char)'o', (char)'r', (char)'s'}}, {.string = {(char)'r', (char)'x', (char)'_', (char)'t', (char)'h', (char)'r', (char)'e', (char)'s', (char)'h', (char)'o', (char)'l', (char)'d', (char)'_', (char)'h', (char)'i', (char)'t'}}, {.string = {(char)'d', (char)'m', (char)'a', (char)'_', (char)'r', (char)'e', (char)'a', (char)'d', (char)'q', (char)'_', (char)'f', (char)'u', (char)'l', (char)'l'}}, {.string = {(char)'d', (char)'m', (char)'a', (char)'_', (char)'r', (char)'e', (char)'a', (char)'d', (char)'_', (char)'p', (char)'r', (char)'i', (char)'o', (char)'q', (char)'_', (char)'f', (char)'u', (char)'l', (char)'l'}}, {.string = {(char)'t', (char)'x', (char)'_', (char)'c', (char)'o', (char)'m', (char)'p', (char)'_', (char)'q', (char)'u', (char)'e', (char)'u', (char)'e', (char)'_', (char)'f', (char)'u', (char)'l', (char)'l'}}, {.string = {(char)'r', (char)'i', (char)'n', (char)'g', (char)'_', (char)'s', (char)'e', (char)'t', (char)'_', (char)'s', (char)'e', (char)'n', (char)'d', (char)'_', (char)'p', (char)'r', (char)'o', (char)'d', (char)'_', (char)'i', (char)'n', (char)'d', (char)'e', (char)'x'}}, {.string = {(char)'r', (char)'i', (char)'n', (char)'g', (char)'_', (char)'s', (char)'t', (char)'a', (char)'t', (char)'u', (char)'s', (char)'_', (char)'u', (char)'p', (char)'d', (char)'a', (char)'t', (char)'e'}}, {.string = {(char)'n', (char)'i', (char)'c', (char)'_', (char)'i', (char)'r', (char)'q', (char)'s'}}, {.string = {(char)'n', (char)'i', (char)'c', (char)'_', (char)'a', (char)'v', (char)'o', (char)'i', (char)'d', (char)'e', (char)'d', (char)'_', (char)'i', (char)'r', (char)'q', (char)'s'}}, {.string = {(char)'n', (char)'i', (char)'c', (char)'_', (char)'t', (char)'x', (char)'_', (char)'t', (char)'h', (char)'r', (char)'e', (char)'s', (char)'h', (char)'o', (char)'l', (char)'d', (char)'_', (char)'h', (char)'i', (char)'t'}}, {.string = {(char)'m', (char)'b', (char)'u', (char)'f', (char)'_', (char)'l', (char)'w', (char)'m', (char)'_', (char)'t', (char)'h', (char)'r', (char)'e', (char)'s', (char)'h', (char)'_', (char)'h', (char)'i', (char)'t'}}};
#line 460  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
static struct __anonstruct_ethtool_test_keys_1016 ethtool_test_keys[8U] = {{.string = {(char)'n', (char)'v', (char)'r', (char)'a', (char)'m', (char)' ', (char)'t', (char)'e', (char)'s', (char)'t', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)'(', (char)'o', (char)'n', (char)'l', (char)'i', (char)'n', (char)'e', (char)')', (char)' '}}, {.string = {(char)'l', (char)'i', (char)'n', (char)'k', (char)' ', (char)'t', (char)'e', (char)'s', (char)'t', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)'(', (char)'o', (char)'n', (char)'l', (char)'i', (char)'n', (char)'e', (char)')', (char)' '}}, {.string = {(char)'r', (char)'e', (char)'g', (char)'i', (char)'s', (char)'t', (char)'e', (char)'r', (char)' ', (char)'t', (char)'e', (char)'s', (char)'t', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)'(', (char)'o', (char)'f', (char)'f', (char)'l', (char)'i', (char)'n', (char)'e', (char)')'}}, {.string = {(char)'m', (char)'e', (char)'m', (char)'o', (char)'r', (char)'y', (char)' ', (char)'t', (char)'e', (char)'s', (char)'t', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)'(', (char)'o', (char)'f', (char)'f', (char)'l', (char)'i', (char)'n', (char)'e', (char)')'}}, {.string = {(char)'m', (char)'a', (char)'c', (char)' ', (char)'l', (char)'o', (char)'o', (char)'p', (char)'b', (char)'a', (char)'c', (char)'k', (char)' ', (char)'t', (char)'e', (char)'s', (char)'t', (char)' ', (char)'(', (char)'o', (char)'f', (char)'f', (char)'l', (char)'i', (char)'n', (char)'e', (char)')'}}, {.string = {(char)'p', (char)'h', (char)'y', (char)' ', (char)'l', (char)'o', (char)'o', (char)'p', (char)'b', (char)'a', (char)'c', (char)'k', (char)' ', (char)'t', (char)'e', (char)'s', (char)'t', (char)' ', (char)'(', (char)'o', (char)'f', (char)'f', (char)'l', (char)'i', (char)'n', (char)'e', (char)')'}}, {.string = {(char)'e', (char)'x', (char)'t', (char)' ', (char)'l', (char)'o', (char)'o', (char)'p', (char)'b', (char)'a', (char)'c', (char)'k', (char)' ', (char)'t', (char)'e', (char)'s', (char)'t', (char)' ', (char)'(', (char)'o', (char)'f', (char)'f', (char)'l', (char)'i', (char)'n', (char)'e', (char)')'}}, {.string = {(char)'i', (char)'n', (char)'t', (char)'e', (char)'r', (char)'r', (char)'u', (char)'p', (char)'t', (char)' ', (char)'t', (char)'e', (char)'s', (char)'t', (char)' ', (char)' ', (char)' ', (char)' ', (char)'(', (char)'o', (char)'f', (char)'f', (char)'l', (char)'i', (char)'n', (char)'e', (char)')'}}};
#line 474  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
static void tg3_write32(struct tg3 *tp, u32 off, u32 val)
{
  #line 476 
  writel(val,tp->regs + (unsigned long)off);
  #line 477 
  return;
}

#line 479  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
static u32 tg3_read32(struct tg3 *tp, u32 off)
{
  #line 481 
  return readl(tp->regs + (unsigned long)off);
}

#line 484  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
static void tg3_ape_write32(struct tg3 *tp, u32 off, u32 val)
{
  #line 486 
  writel(val,tp->aperegs + (unsigned long)off);
  #line 487 
  return;
}

#line 489  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
static u32 tg3_ape_read32(struct tg3 *tp, u32 off)
{
  #line 491 
  return readl(tp->aperegs + (unsigned long)off);
}

#line 494  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
static void tg3_write_indirect_reg32(struct tg3 *tp, u32 off, u32 val)
{
  #line 496 
  unsigned long flags;
  #line 498 
  cif___ldv_spin_lock_indirect_lock_of_tg3(& tp->indirect_lock);
  #line 499 
  pci_write_config_dword(tp->pdev,120,off);
  #line 500 
  pci_write_config_dword(tp->pdev,128,val);
  #line 501 
  cif_spin_unlock_irqrestore_indirect_lock_of_tg3(& tp->indirect_lock,flags);
  #line 502 
  return;
}

#line 504  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
static void tg3_write_flush_reg32(struct tg3 *tp, u32 off, u32 val)
{
  #line 506 
  writel(val,tp->regs + (unsigned long)off);
  #line 507 
  readl(tp->regs + (unsigned long)off);
  #line 508 
  return;
}

#line 510  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
static u32 tg3_read_indirect_reg32(struct tg3 *tp, u32 off)
{
  #line 512 
  unsigned long flags;
  #line 513 
  u32 val;
  #line 515 
  cif___ldv_spin_lock_indirect_lock_of_tg3(& tp->indirect_lock);
  #line 516 
  pci_write_config_dword(tp->pdev,120,off);
  #line 517 
  pci_read_config_dword(tp->pdev,128,& val);
  #line 518 
  cif_spin_unlock_irqrestore_indirect_lock_of_tg3(& tp->indirect_lock,flags);
  #line 519 
  return val;
}

#line 522  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
static void tg3_write_indirect_mbox(struct tg3 *tp, u32 off, u32 val)
{
  #line 524 
  unsigned long flags;
  #line 526 
  if (off == 644U) {
    #line 527 
    pci_write_config_dword(tp->pdev,164,val);
    #line 529 
    return;
  }
  #line 531 
  if (off == 620U) {
    #line 532 
    pci_write_config_dword(tp->pdev,156,val);
    #line 534 
    return;
  }
  #line 537 
  cif___ldv_spin_lock_indirect_lock_of_tg3(& tp->indirect_lock);
  #line 538 
  pci_write_config_dword(tp->pdev,120,off + 22016U);
  #line 539 
  pci_write_config_dword(tp->pdev,128,val);
  #line 540 
  cif_spin_unlock_irqrestore_indirect_lock_of_tg3(& tp->indirect_lock,flags);
  #line 545 
  if (off == 516U && val == 1U) 
                                #line 547 
                                pci_write_config_dword(tp->pdev,144,tp->grc_local_ctrl | 2U);
  #line 549 
  return;
}

#line 552  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
static u32 tg3_read_indirect_mbox(struct tg3 *tp, u32 off)
{
  #line 554 
  unsigned long flags;
  #line 555 
  u32 val;
  #line 557 
  cif___ldv_spin_lock_indirect_lock_of_tg3(& tp->indirect_lock);
  #line 558 
  pci_write_config_dword(tp->pdev,120,off + 22016U);
  #line 559 
  pci_read_config_dword(tp->pdev,128,& val);
  #line 560 
  cif_spin_unlock_irqrestore_indirect_lock_of_tg3(& tp->indirect_lock,flags);
  #line 561 
  return val;
}

#line 569  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
static void _tw32_flush(struct tg3 *tp, u32 off, u32 val, u32 usec_wait)
{
  #line 571 
  if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_PCIX_TARGET_HWBUG,
                (unsigned long *)(& tp->tg3_flags)) != 0) 
    #line 571 
    goto _LOR;
  else {
    #line 571 
    if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_ICH_WORKAROUND,
                  (unsigned long *)(& tp->tg3_flags)) != 0) 
      #line 571 
      _LOR: 
            #line 573 
            (*(tp->write32))(tp,off,val);
    else {
      #line 576 
      tg3_write32(tp,off,val);
      #line 577 
      if (usec_wait != 0U) 
        #line 578 
        if (0 != 0) 
          #line 578 
          if (usec_wait > 19999U) 
                                  #line 578 
                                  __bad_udelay(); else 
                                                       #line 578 
                                                       __const_udelay((unsigned long)usec_wait * 4295UL);
        else 
             #line 578 
             __udelay((unsigned long)usec_wait);
      #line 579 
      (*(tp->read32))(tp,off);
    }
  }
  #line 584 
  if (usec_wait != 0U) 
    #line 585 
    if (0 != 0) 
      #line 585 
      if (usec_wait > 19999U) 
                              #line 585 
                              __bad_udelay(); else 
                                                   #line 585 
                                                   __const_udelay((unsigned long)usec_wait * 4295UL);
    else 
         #line 585 
         __udelay((unsigned long)usec_wait);
  #line 587 
  return;
}

#line 588  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
__inline static void tw32_mailbox_flush(struct tg3 *tp, u32 off, u32 val)
{
  #line 590 
  (*(tp->write32_mbox))(tp,off,val);
  #line 591 
  if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_FLUSH_POSTED_WRITES,
                (unsigned long *)(& tp->tg3_flags)) != 0) 
    #line 594 
    (*(tp->read32_mbox))(tp,off);
  else {
    #line 591 
    if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_MBOX_WRITE_REORDER,
                  (unsigned long *)(& tp->tg3_flags)) == 0) {
      #line 592 
      if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_ICH_WORKAROUND,
                  (unsigned long *)(& tp->tg3_flags)) == 0) 
        #line 594 
        (*(tp->read32_mbox))(tp,off);
    }
  }
  #line 595 
  return;
}

#line 597  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
static void tg3_write32_tx_mbox(struct tg3 *tp, u32 off, u32 val)
{
  #line 599 
  void *mbox = tp->regs + (unsigned long)off;
  #line 600 
  writel(val,mbox);
  #line 601 
  if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_TXD_MBOX_HWBUG,
                (unsigned long *)(& tp->tg3_flags)) != 0) 
    #line 602 
    writel(val,mbox);
  #line 603 
  if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_MBOX_WRITE_REORDER,
                  (unsigned long *)(& tp->tg3_flags)) != 0) 
    #line 605 
    readl(mbox);
  else {
    #line 603 
    if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_FLUSH_POSTED_WRITES,
                  (unsigned long *)(& tp->tg3_flags)) != 0) 
      #line 605 
      readl(mbox);
  }
  #line 606 
  return;
}

#line 608  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
static u32 tg3_read32_mbox_5906(struct tg3 *tp, u32 off)
{
  #line 610 
  return readl(tp->regs + ((unsigned long)off + (unsigned long)22016U));
}

#line 613  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
static void tg3_write32_mbox_5906(struct tg3 *tp, u32 off, u32 val)
{
  #line 615 
  writel(val,tp->regs + ((unsigned long)off + (unsigned long)22016U));
  #line 616 
  return;
}

#line 629  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
static void tg3_write_mem(struct tg3 *tp, u32 off, u32 val)
{
  #line 631 
  unsigned long flags;
  #line 633 
  if (tp->pci_chip_rev_id >> 12 == 12U && off + 4294966528U <= 15615U) 
    #line 635 
    return;
  #line 637 
  cif___ldv_spin_lock_indirect_lock_of_tg3(& tp->indirect_lock);
  #line 638 
  if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_SRAM_USE_CONFIG,
                (unsigned long *)(& tp->tg3_flags)) != 0) {
    #line 639 
    pci_write_config_dword(tp->pdev,124,off);
    #line 640 
    pci_write_config_dword(tp->pdev,132,val);
    #line 643 
    pci_write_config_dword(tp->pdev,124,0U);
  }
  else {
    #line 645 
    _tw32_flush(tp,124U,off,0U);
    #line 646 
    _tw32_flush(tp,132U,val,0U);
    #line 649 
    _tw32_flush(tp,124U,0U,0U);
  }
  #line 651 
  cif_spin_unlock_irqrestore_indirect_lock_of_tg3(& tp->indirect_lock,flags);
  #line 652 
  return;
}

#line 654  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
static void tg3_read_mem(struct tg3 *tp, u32 off, u32 *val)
{
  #line 656 
  unsigned long flags;
  #line 658 
  if (tp->pci_chip_rev_id >> 12 == 12U && off + 4294966528U <= 15615U) {
    #line 660 
    *val = 0U;
    #line 661 
    return;
  }
  #line 664 
  cif___ldv_spin_lock_indirect_lock_of_tg3(& tp->indirect_lock);
  #line 665 
  if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_SRAM_USE_CONFIG,
                (unsigned long *)(& tp->tg3_flags)) != 0) {
    #line 666 
    pci_write_config_dword(tp->pdev,124,off);
    #line 667 
    pci_read_config_dword(tp->pdev,132,val);
    #line 670 
    pci_write_config_dword(tp->pdev,124,0U);
  }
  else {
    #line 672 
    _tw32_flush(tp,124U,off,0U);
    #line 673 
    *val = (*(tp->read32))(tp,132U);
    #line 676 
    _tw32_flush(tp,124U,0U,0U);
  }
  #line 678 
  cif_spin_unlock_irqrestore_indirect_lock_of_tg3(& tp->indirect_lock,flags);
  #line 679 
  return;
}

#line 681  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
static void tg3_ape_lock_init(struct tg3 *tp)
{
  #line 683 
  int i;
  #line 684 
  u32 regbase;
  #line 684 
  u32 bit;
  #line 686 
  if (tp->pci_chip_rev_id >> 12 == 22369U) 
                                           #line 687 
                                           regbase = 76U; else 
                                                               #line 689 
                                                               regbase = 33824U;
  #line 692 
  i = 0;
  #line 692 
  while (i <= 7) {
    #line 693 
    switch (i) {
      #line 694 
      case 0: 
              #line 694 
      ;
      #line 695 
      case 2: 
              #line 695 
      ;
      #line 696 
      case 3: 
              #line 696 
      ;
      #line 697 
      case 5: 
              #line 697 
      ;
      #line 698 
      bit = 4096U;
      #line 699 
      break;
      #line 700 
      default: 
               #line 700 
      ;
      #line 701 
      if (tp->pci_fn == 0) 
                           #line 702 
                           bit = 4096U; else 
                                             #line 704 
                                             bit = (unsigned int)(1 << tp->pci_fn);
    }
    #line 706 
    tg3_ape_write32(tp,(unsigned int)(i * 4) + regbase,bit);
    #line 692 
    i ++;
  }
  #line 708 
  return;
}

#line 711  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
static int tg3_ape_lock(struct tg3 *tp, int locknum)
{
  #line 713 
  int i;
  #line 713 
  int off;
  #line 715 
  u32 status;
  #line 715 
  u32 req;
  #line 715 
  u32 gnt;
  #line 715 
  u32 bit;
  #line 714 
  int ret = 0;
  #line 717 
  if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_ENABLE_APE,
                (unsigned long *)(& tp->tg3_flags)) == 0) 
    #line 718 
    return 0;
  #line 720 
  switch (locknum) {
    #line 721 
    case 7: 
            #line 721 
    ;
    #line 722 
    if (tp->pci_chip_rev_id >> 12 == 22369U) 
                                             #line 723 
                                             return 0;
    #line 725 
    case 1: 
            #line 725 
    ;
    #line 726 
    case 4: 
            #line 726 
    ;
    #line 727 
    if (tp->pci_fn == 0) 
                         #line 728 
                         bit = 4096U; else 
                                           #line 730 
                                           bit = (unsigned int)(1 << tp->pci_fn);
    #line 731 
    break;
    #line 732 
    case 0: 
            #line 732 
    ;
    #line 733 
    case 2: 
            #line 733 
    ;
    #line 734 
    case 3: 
            #line 734 
    ;
    #line 735 
    case 5: 
            #line 735 
    ;
    #line 736 
    bit = 4096U;
    #line 737 
    break;
    #line 738 
    default: 
             #line 738 
    ;
    #line 739 
    return -22;
  }
  #line 742 
  if (tp->pci_chip_rev_id >> 12 == 22369U) {
    #line 743 
    req = 44U;
    #line 744 
    gnt = 76U;
  }
  else {
    #line 746 
    req = 33792U;
    #line 747 
    gnt = 33824U;
  }
  #line 750 
  off = locknum * 4;
  #line 752 
  tg3_ape_write32(tp,req + (unsigned int)off,bit);
  #line 755 
  i = 0;
  #line 755 
  while (i <= 99) {
    {
      #line 756 
      status = tg3_ape_read32(tp,gnt + (unsigned int)off);
      #line 757 
      if (status == bit) 
                         #line 758 
                         break;
      #line 759 
      if (pci_channel_offline(tp->pdev) != 0) 
                                              #line 760 
                                              break;
      #line 762 
      __const_udelay(42950UL);
    }
    #line 755 
    i ++;
  }
  #line 765 
  if (status != bit) {
    #line 767 
    tg3_ape_write32(tp,gnt + (unsigned int)off,bit);
    #line 768 
    ret = -16;
  }
  #line 771 
  return ret;
}

#line 774  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
static void tg3_ape_unlock(struct tg3 *tp, int locknum)
{
  #line 776 
  u32 gnt;
  #line 776 
  u32 bit;
  #line 778 
  if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_ENABLE_APE,
                (unsigned long *)(& tp->tg3_flags)) == 0) 
    #line 779 
    return;
  #line 781 
  switch (locknum) {
    #line 782 
    case 7: 
            #line 782 
    ;
    #line 783 
    if (tp->pci_chip_rev_id >> 12 == 22369U) 
                                             #line 784 
                                             return;
    #line 786 
    case 1: 
            #line 786 
    ;
    #line 787 
    case 4: 
            #line 787 
    ;
    #line 788 
    if (tp->pci_fn == 0) 
                         #line 789 
                         bit = 4096U; else 
                                           #line 791 
                                           bit = (unsigned int)(1 << tp->pci_fn);
    #line 792 
    break;
    #line 793 
    case 0: 
            #line 793 
    ;
    #line 794 
    case 2: 
            #line 794 
    ;
    #line 795 
    case 3: 
            #line 795 
    ;
    #line 796 
    case 5: 
            #line 796 
    ;
    #line 797 
    bit = 4096U;
    #line 798 
    break;
    #line 799 
    default: 
             #line 799 
    ;
    #line 800 
    return;
  }
  #line 803 
  if (tp->pci_chip_rev_id >> 12 == 22369U) 
                                           #line 804 
                                           gnt = 76U; else 
                                                           #line 806 
                                                           gnt = 33824U;
  #line 808 
  tg3_ape_write32(tp,(unsigned int)(locknum * 4) + gnt,bit);
  #line 809 
  return;
}

#line 811  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
static int tg3_ape_event_lock(struct tg3 *tp, u32 timeout_us)
{
  #line 813 
  u32 apedata;
  #line 829 
  int tmp_1;
  #line 815 
  while (timeout_us != 0U) {
    #line 826 
    unsigned int tmp_0;
    #line 816 
    if (tg3_ape_lock(tp,4) != 0) 
                                 #line 817 
                                 return -16;
    #line 819 
    apedata = tg3_ape_read32(tp,17152U);
    #line 820 
    if ((apedata & 2147483648U) == 0U) 
                                       #line 821 
                                       break;
    #line 823 
    tg3_ape_unlock(tp,4);
    #line 825 
    __const_udelay(42950UL);
    #line 826 
    if (10U < timeout_us) 
                          #line 826 
                          tmp_0 = 10U; else 
                                            #line 826 
                                            tmp_0 = timeout_us;
    #line 826 
    timeout_us -= tmp_0;
  }
  #line 829 
  if (timeout_us != 0U) 
                        #line 829 
                        tmp_1 = 0; else 
                                        #line 829 
                                        tmp_1 = -16;
  #line 829 
  return tmp_1;
}

#line 833  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
static int tg3_ape_wait_for_event(struct tg3 *tp, u32 timeout_us)
{
  #line 835 
  u32 i;
  #line 835 
  u32 apedata;
  #line 837 
  i = 0U;
  #line 837 
  while (timeout_us / 10U > i) {
    #line 838 
    apedata = tg3_ape_read32(tp,17152U);
    #line 840 
    if ((apedata & 2147483648U) == 0U) 
                                       #line 841 
                                       break;
    #line 843 
    __const_udelay(42950UL);
    #line 837 
    i ++;
  }
  #line 846 
  return timeout_us / 10U == i;
}

#line 849  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
static int tg3_ape_scratchpad_read(struct tg3 *tp, u32 *data, u32 base_off, u32 len)
{
  #line 852 
  int err;
  #line 853 
  u32 i;
  #line 853 
  u32 bufoff;
  #line 853 
  u32 msgoff;
  #line 853 
  u32 maxlen;
  #line 853 
  u32 apedata;
  #line 855 
  if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_APE_HAS_NCSI,
                (unsigned long *)(& tp->tg3_flags)) == 0) 
    #line 856 
    return 0;
  #line 858 
  apedata = tg3_ape_read32(tp,16384U);
  #line 859 
  if (apedata != 1095779617U) 
                              #line 860 
                              return -19;
  #line 862 
  apedata = tg3_ape_read32(tp,16396U);
  #line 863 
  if ((apedata & 256U) == 0U) 
                              #line 864 
                              return -11;
  #line 866 
  bufoff = tg3_ape_read32(tp,16412U) + 16384U;
  #line 868 
  msgoff = bufoff + 8U;
  #line 869 
  maxlen = tg3_ape_read32(tp,16416U);
  #line 871 
  while (len != 0U) {
    #line 872 
    u32 length;
    #line 875 
    if (maxlen < len) 
                      #line 875 
                      length = maxlen; else 
                                            #line 875 
                                            length = len;
    #line 876 
    len -= length;
    #line 878 
    apedata = tg3_ape_read32(tp,16396U);
    #line 879 
    if ((apedata & 256U) == 0U) 
                                #line 880 
                                return -11;
    #line 883 
    err = tg3_ape_event_lock(tp,1000U);
    #line 884 
    if (err != 0) 
                  #line 885 
                  return err;
    #line 887 
    apedata = 2147489296U;
    #line 890 
    tg3_ape_write32(tp,17152U,apedata);
    #line 892 
    tg3_ape_write32(tp,bufoff,base_off);
    #line 893 
    tg3_ape_write32(tp,bufoff + 4U,length);
    #line 895 
    tg3_ape_unlock(tp,4);
    #line 896 
    tg3_ape_write32(tp,12U,1U);
    #line 898 
    base_off += length;
    #line 900 
    if (tg3_ape_wait_for_event(tp,30000U) != 0) 
                                                #line 901 
                                                return -11;
    #line 903 
    i = 0U;
    #line 903 
    while (length != 0U) {
      {
        #line 904 
        u32 val = tg3_ape_read32(tp,msgoff + i);
        #line 905 
        memcpy((void *)data,(void *)(& val),4UL);
        #line 906 
        data ++;
      }
      #line 903 
      i += 4U;
      #line 903 
      length += 4294967292U;
    }
  }
  #line 910 
  return 0;
}

#line 914  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
static int tg3_ape_send_event(struct tg3 *tp, u32 event)
{
  #line 916 
  int err;
  #line 917 
  u32 apedata;
  #line 919 
  apedata = tg3_ape_read32(tp,16384U);
  #line 920 
  if (apedata != 1095779617U) 
                              #line 921 
                              return -11;
  #line 923 
  apedata = tg3_ape_read32(tp,16396U);
  #line 924 
  if ((apedata & 256U) == 0U) 
                              #line 925 
                              return -11;
  #line 928 
  err = tg3_ape_event_lock(tp,20000U);
  #line 929 
  if (err != 0) 
                #line 930 
                return err;
  #line 932 
  tg3_ape_write32(tp,17152U,event | 2147483648U);
  #line 935 
  tg3_ape_unlock(tp,4);
  #line 936 
  tg3_ape_write32(tp,12U,1U);
  #line 938 
  return 0;
}

#line 941  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
static void tg3_ape_driver_state_change(struct tg3 *tp, int kind)
{
  #line 943 
  u32 event;
  #line 944 
  u32 apedata;
  #line 946 
  if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_ENABLE_APE,
                (unsigned long *)(& tp->tg3_flags)) == 0) 
    #line 947 
    return;
  #line 949 
  switch (kind) {
    #line 951 
    u32 tmp_0;
    #line 950 
    case 1: 
            #line 950 
    ;
    #line 951 
    tmp_0 = tp->ape_hb;
    #line 951 
    (tp->ape_hb) ++;
    #line 951 
    ;
    #line 951 
    ;
    #line 951 
    tg3_ape_write32(tp,16920U,tmp_0);
    #line 952 
    tg3_ape_write32(tp,16896U,1213158228U);
    #line 954 
    tg3_ape_write32(tp,16900U,32U);
    #line 956 
    apedata = tg3_ape_read32(tp,16904U);
    #line 957 
    apedata ++;
    #line 957 
    ;
    #line 957 
    tg3_ape_write32(tp,16904U,apedata);
    #line 958 
    tg3_ape_write32(tp,16908U,4026763520U);
    #line 960 
    tg3_ape_write32(tp,16912U,1U);
    #line 962 
    tg3_ape_write32(tp,16924U,1U);
    #line 965 
    event = 65536U;
    #line 966 
    break;
    #line 967 
    case 0: 
            #line 967 
    ;
    #line 968 
    if ((int)device_may_wakeup(& (tp->pdev)->dev) != 0) {
      #line 968 
      if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_WOL_ENABLE,
                  (unsigned long *)(& tp->tg3_flags)) != 0) {
        #line 970 
        tg3_ape_write32(tp,16932U,32768U);
        #line 972 
        apedata = 3U;
      }
      else 
           #line 974 
           apedata = 2U;
    }
    else 
         #line 974 
         apedata = 2U;
    #line 976 
    tg3_ape_write32(tp,16924U,apedata);
    #line 978 
    event = 131072U;
    #line 979 
    break;
    #line 980 
    default: 
             #line 980 
    ;
    #line 981 
    return;
  }
  #line 984 
  event |= 1296U;
  #line 986 
  tg3_ape_send_event(tp,event);
  #line 987 
  return;
}

#line 989  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
static void tg3_send_ape_heartbeat(struct tg3 *tp, unsigned long interval)
{
  #line 997 
  u32 tmp_2;
  #line 993 
  if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_ENABLE_APE,
                (unsigned long *)(& tp->tg3_flags)) == 0) 
    #line 995 
    return;
  else {
    {
      #line 994 
      unsigned long __dummy;
      #line 994 
      unsigned long __dummy2;
      }
    #line 993 
    if (1 != 0) {
      {
        #line 994 
        unsigned long __dummy_0;
        #line 994 
        unsigned long __dummy2_0;
        }
      #line 994 
      if (1 != 0) 
        #line 994 
        if ((long)(jiffies - (tp->ape_hb_jiffies + interval)) < 0L) 
                                                                    #line 995 
                                                                    return;
    }
  }
  #line 997 
  tmp_2 = tp->ape_hb;
  #line 997 
  (tp->ape_hb) ++;
  #line 997 
  ;
  #line 997 
  ;
  #line 997 
  tg3_ape_write32(tp,16920U,tmp_2);
  #line 998 
  tp->ape_hb_jiffies = jiffies;
  #line 999 
  return;
}

#line 1001  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
static void tg3_disable_ints(struct tg3 *tp)
{
  #line 1003 
  int i;
  #line 1005 
  (*(tp->write32))(tp,104U,tp->misc_host_ctrl | 2U);
  #line 1007 
  i = 0;
  #line 1007 
  while (tp->irq_max > (unsigned int)i) {
    #line 1008 
    tw32_mailbox_flush(tp,tp->napi[i].int_mbox,1U);
    #line 1007 
    i ++;
  }
  #line 1009 
  return;
}

#line 1011  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
static void tg3_enable_ints(struct tg3 *tp)
{
  #line 1013 
  int i;
  #line 1015 
  tp->irq_sync = 0U;
  #line 1016 
  ldv_inline_asm();
  #line 1018 
  (*(tp->write32))(tp,104U,tp->misc_host_ctrl & 4294967293U);
  #line 1021 
  tp->coal_now = tp->coalesce_mode | 2U;
  #line 1022 
  i = 0;
  #line 1022 
  while (tp->irq_cnt > (unsigned int)i) {
    {
      #line 1023 
      struct tg3_napi *tnapi = & tp->napi[i];
      #line 1025 
      tw32_mailbox_flush(tp,tnapi->int_mbox,tnapi->last_tag << 24);
      #line 1026 
      if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_1SHOT_MSI,
                (unsigned long *)(& tp->tg3_flags)) != 0) 
        #line 1027 
        tw32_mailbox_flush(tp,tnapi->int_mbox,tnapi->last_tag << 24);
      #line 1029 
      tp->coal_now |= tnapi->coal_now;
    }
    #line 1022 
    i ++;
  }
  #line 1033 
  if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_TAGGED_STATUS,
                  (unsigned long *)(& tp->tg3_flags)) == 0) 
    #line 1033 
    if (((tp->napi[0].hw_status)->status & 1U) != 0U) 
                                                      #line 1035 
                                                      (*(tp->write32))(tp,26632U,tp->grc_local_ctrl | 4U); else 
                                                                    #line 1037 
                                                                    (*(tp->write32))(tp,15360U,tp->coal_now);
  else 
       #line 1037 
       (*(tp->write32))(tp,15360U,tp->coal_now);
  #line 1039 
  tp->coal_now &= ~ (tp->napi[0].coal_now | tp->napi[1].coal_now);
  #line 1040 
  return;
}

#line 1042  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
__inline static unsigned int tg3_has_work(struct tg3_napi *tnapi)
{
  #line 1044 
  struct tg3 *tp = tnapi->tp;
  #line 1045 
  struct tg3_hw_status *sblk = tnapi->hw_status;
  #line 1046 
  unsigned int work_exists = 0U;
  #line 1049 
  if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_USE_LINKCHG_REG,
                (unsigned long *)(& tp->tg3_flags)) == 0) {
    #line 1049 
    if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_POLL_SERDES,
                  (unsigned long *)(& tp->tg3_flags)) == 0) 
      #line 1050 
      if ((sblk->status & 2U) != 0U) 
                                     #line 1051 
                                     work_exists = 1U;
  }
  #line 1055 
  if ((unsigned int)sblk->idx[0].tx_consumer != tnapi->tx_cons) 
                                                                #line 1056 
                                                                work_exists = 1U;
  #line 1059 
  if (tnapi->rx_rcb_prod_idx != (u16 *)0U && (unsigned int)*(tnapi->rx_rcb_prod_idx) != tnapi->rx_rcb_ptr) 
    #line 1061 
    work_exists = 1U;
  #line 1063 
  return work_exists;
}

#line 1071  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
static void tg3_int_reenable(struct tg3_napi *tnapi)
{
  #line 1073 
  struct tg3 *tp = tnapi->tp;
  #line 1075 
  (*(tp->write32_mbox))(tp,tnapi->int_mbox,tnapi->last_tag << 24);
  #line 1081 
  if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_TAGGED_STATUS,
                (unsigned long *)(& tp->tg3_flags)) == 0) {
    #line 1081 
    if (tg3_has_work(tnapi) != 0U) 
                                   #line 1082 
                                   (*(tp->write32))(tp,15360U,(tp->coalesce_mode | tnapi->coal_now) | 2U);
  }
  #line 1083 
  return;
}

#line 1086  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
static void tg3_switch_clocks(struct tg3 *tp)
{
  #line 1088 
  u32 clock_ctrl;
  #line 1089 
  u32 orig_clock_ctrl;
  #line 1091 
  if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_CPMU_PRESENT,
                (unsigned long *)(& tp->tg3_flags)) != 0) 
    #line 1092 
    return;
  else {
    #line 1091 
    if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_5780_CLASS,
                  (unsigned long *)(& tp->tg3_flags)) != 0) 
      #line 1092 
      return;
  }
  #line 1094 
  clock_ctrl = (*(tp->read32))(tp,116U);
  #line 1096 
  orig_clock_ctrl = clock_ctrl;
  #line 1097 
  clock_ctrl &= 6291487U;
  #line 1100 
  tp->pci_clock_ctrl = clock_ctrl;
  #line 1102 
  if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_5705_PLUS,
                  (unsigned long *)(& tp->tg3_flags)) != 0) {
    #line 1103 
    if ((orig_clock_ctrl & 1048576U) != 0U) 
                                            #line 1104 
                                            _tw32_flush(tp,116U,clock_ctrl | 1048576U,40U);
  }
  else 
    #line 1107 
    if ((orig_clock_ctrl & 262144U) != 0U) {
      #line 1108 
      _tw32_flush(tp,116U,clock_ctrl | 266240U,40U);
      #line 1112 
      _tw32_flush(tp,116U,clock_ctrl | 4096U,40U);
    }
  #line 1116 
  _tw32_flush(tp,116U,clock_ctrl,40U);
  #line 1117 
  return;
}

#line 1121  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
static int __tg3_readphy(struct tg3 *tp, unsigned int phy_addr, int reg, u32 *val)
{
  #line 1124 
  u32 frame_val;
  #line 1125 
  unsigned int loops;
  #line 1126 
  int ret;
  #line 1128 
  if ((tp->mi_mode & 16U) != 0U) {
    #line 1129 
    _tw32_flush(tp,1108U,tp->mi_mode & 4294967279U,0U);
    #line 1131 
    __const_udelay(343600UL);
  }
  #line 1134 
  tg3_ape_lock(tp,(int)tp->phy_ape_lock);
  #line 1136 
  *val = 0U;
  #line 1138 
  frame_val = (phy_addr << 21) & 65011712U;
  #line 1140 
  frame_val = ((unsigned int)(reg << 16) & 2031616U) | frame_val;
  #line 1142 
  frame_val |= 671088640U;
  #line 1144 
  _tw32_flush(tp,1100U,frame_val,0U);
  #line 1146 
  loops = 5000U;
  #line 1147 
  while (loops != 0U) {
    #line 1148 
    __const_udelay(42950UL);
    #line 1149 
    frame_val = (*(tp->read32))(tp,1100U);
    #line 1151 
    if ((frame_val & 536870912U) == 0U) {
      #line 1152 
      __const_udelay(21475UL);
      #line 1153 
      frame_val = (*(tp->read32))(tp,1100U);
      #line 1154 
      break;
    }
    #line 1156 
    loops += 4294967295U;
  }
  #line 1159 
  ret = -16;
  #line 1160 
  if (loops != 0U) {
    #line 1161 
    *val = frame_val & 65535U;
    #line 1162 
    ret = 0;
  }
  #line 1165 
  if ((tp->mi_mode & 16U) != 0U) {
    #line 1166 
    _tw32_flush(tp,1108U,tp->mi_mode,0U);
    #line 1167 
    __const_udelay(343600UL);
  }
  #line 1170 
  tg3_ape_unlock(tp,(int)tp->phy_ape_lock);
  #line 1172 
  return ret;
}

#line 1175  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
static int tg3_readphy(struct tg3 *tp, int reg, u32 *val)
{
  #line 1177 
  return __tg3_readphy(tp,(unsigned int)tp->phy_addr,reg,val);
}

#line 1180  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
static int __tg3_writephy(struct tg3 *tp, unsigned int phy_addr, int reg, u32 val)
{
  #line 1183 
  u32 frame_val;
  #line 1184 
  unsigned int loops;
  #line 1185 
  int ret;
  #line 1187 
  if ((tp->phy_flags & 64U) != 0U && (reg == 9 || reg == 24)) 
                                                              #line 1189 
                                                              return 0;
  #line 1191 
  if ((tp->mi_mode & 16U) != 0U) {
    #line 1192 
    _tw32_flush(tp,1108U,tp->mi_mode & 4294967279U,0U);
    #line 1194 
    __const_udelay(343600UL);
  }
  #line 1197 
  tg3_ape_lock(tp,(int)tp->phy_ape_lock);
  #line 1199 
  frame_val = (phy_addr << 21) & 65011712U;
  #line 1201 
  frame_val = ((unsigned int)(reg << 16) & 2031616U) | frame_val;
  #line 1203 
  frame_val = (val & 65535U) | frame_val;
  #line 1204 
  frame_val |= 603979776U;
  #line 1206 
  _tw32_flush(tp,1100U,frame_val,0U);
  #line 1208 
  loops = 5000U;
  #line 1209 
  while (loops != 0U) {
    #line 1210 
    __const_udelay(42950UL);
    #line 1211 
    frame_val = (*(tp->read32))(tp,1100U);
    #line 1212 
    if ((frame_val & 536870912U) == 0U) {
      #line 1213 
      __const_udelay(21475UL);
      #line 1214 
      frame_val = (*(tp->read32))(tp,1100U);
      #line 1215 
      break;
    }
    #line 1217 
    loops += 4294967295U;
  }
  #line 1220 
  ret = -16;
  #line 1221 
  if (loops != 0U) 
                   #line 1222 
                   ret = 0;
  #line 1224 
  if ((tp->mi_mode & 16U) != 0U) {
    #line 1225 
    _tw32_flush(tp,1108U,tp->mi_mode,0U);
    #line 1226 
    __const_udelay(343600UL);
  }
  #line 1229 
  tg3_ape_unlock(tp,(int)tp->phy_ape_lock);
  #line 1231 
  return ret;
}

#line 1234  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
static int tg3_writephy(struct tg3 *tp, int reg, u32 val)
{
  #line 1236 
  return __tg3_writephy(tp,(unsigned int)tp->phy_addr,reg,val);
}

#line 1239  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
static int tg3_phy_cl45_write(struct tg3 *tp, u32 devad, u32 addr, u32 val)
{
  #line 1241 
  int err;
  #line 1243 
  err = tg3_writephy(tp,13,devad);
  #line 1244 
  if (err != 0) 
                #line 1245 
                goto done;
  #line 1247 
  err = tg3_writephy(tp,14,addr);
  #line 1248 
  if (err != 0) 
                #line 1249 
                goto done;
  #line 1251 
  err = tg3_writephy(tp,13,devad | 16384U);
  #line 1253 
  if (err != 0) 
                #line 1254 
                goto done;
  #line 1256 
  err = tg3_writephy(tp,14,val);
  #line 1258 
  done: 
        #line 1258 
  ;
  #line 1259 
  return err;
}

#line 1262  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
static int tg3_phy_cl45_read(struct tg3 *tp, u32 devad, u32 addr, u32 *val)
{
  #line 1264 
  int err;
  #line 1266 
  err = tg3_writephy(tp,13,devad);
  #line 1267 
  if (err != 0) 
                #line 1268 
                goto done;
  #line 1270 
  err = tg3_writephy(tp,14,addr);
  #line 1271 
  if (err != 0) 
                #line 1272 
                goto done;
  #line 1274 
  err = tg3_writephy(tp,13,devad | 16384U);
  #line 1276 
  if (err != 0) 
                #line 1277 
                goto done;
  #line 1279 
  err = tg3_readphy(tp,14,val);
  #line 1281 
  done: 
        #line 1281 
  ;
  #line 1282 
  return err;
}

#line 1285  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
static int tg3_phydsp_read(struct tg3 *tp, u32 reg, u32 *val)
{
  #line 1287 
  int err;
  #line 1289 
  err = tg3_writephy(tp,23,reg);
  #line 1290 
  if (err == 0) 
                #line 1291 
                err = tg3_readphy(tp,21,val);
  #line 1293 
  return err;
}

#line 1296  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
static int tg3_phydsp_write(struct tg3 *tp, u32 reg, u32 val)
{
  #line 1298 
  int err;
  #line 1300 
  err = tg3_writephy(tp,23,reg);
  #line 1301 
  if (err == 0) 
                #line 1302 
                err = tg3_writephy(tp,21,val);
  #line 1304 
  return err;
}

#line 1307  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
static int tg3_phy_auxctl_read(struct tg3 *tp, int reg, u32 *val)
{
  #line 1309 
  int err;
  #line 1311 
  err = tg3_writephy(tp,24,(unsigned int)((reg << 12) | 7));
  #line 1314 
  if (err == 0) 
                #line 1315 
                err = tg3_readphy(tp,24,val);
  #line 1317 
  return err;
}

#line 1320  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
static int tg3_phy_auxctl_write(struct tg3 *tp, int reg, u32 set)
{
  #line 1322 
  if (reg == 7) 
                #line 1323 
                set |= 32768U;
  #line 1325 
  return tg3_writephy(tp,24,set | (unsigned int)reg);
}

#line 1328  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
static int tg3_phy_toggle_auxctl_smdsp(struct tg3 *tp, bool enable)
{
  #line 1330 
  u32 val;
  #line 1331 
  int err;
  #line 1333 
  err = tg3_phy_auxctl_read(tp,0,& val);
  #line 1335 
  if (err != 0) 
                #line 1336 
                return err;
  #line 1338 
  if ((int)enable != 0) 
                        #line 1339 
                        val |= 2048U; else 
                                           #line 1341 
                                           val &= 4294965247U;
  #line 1343 
  err = tg3_phy_auxctl_write(tp,0,val | 1024U);
  #line 1346 
  return err;
}

#line 1349  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
static int tg3_phy_shdw_write(struct tg3 *tp, int reg, u32 val)
{
  #line 1351 
  return tg3_writephy(tp,28,((unsigned int)reg | val) | 32768U);
}

#line 1355  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
static int tg3_bmcr_reset(struct tg3 *tp)
{
  #line 1357 
  u32 phy_control;
  #line 1358 
  int limit;
  #line 1358 
  int err;
  #line 1363 
  phy_control = 32768U;
  #line 1364 
  err = tg3_writephy(tp,0,phy_control);
  #line 1365 
  if (err != 0) 
                #line 1366 
                return -16;
  #line 1368 
  limit = 5000;
  #line 1369 
  while (1) {
    #line 1369 
    int tmp;
    #line 1369 
    tmp = limit;
    #line 1369 
    limit --;
    #line 1369 
    ;
    #line 1369 
    if (! (tmp != 0)) 
                      #line 1369 
                      break;
    #line 1370 
    err = tg3_readphy(tp,0,& phy_control);
    #line 1371 
    if (err != 0) 
                  #line 1372 
                  return -16;
    #line 1374 
    if ((phy_control & 32768U) == 0U) {
      #line 1375 
      __const_udelay(171800UL);
      #line 1376 
      break;
    }
    #line 1378 
    __const_udelay(42950UL);
  }
  #line 1380 
  if (limit < 0) 
                 #line 1381 
                 return -16;
  #line 1383 
  return 0;
}

#line 1386  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
static int tg3_mdio_read(struct mii_bus *bp, int mii_id, int reg)
{
  #line 1389 
  u32 val;
  #line 1388 
  struct tg3 *tp = (struct tg3 *)bp->priv;
  #line 1391 
  cif_spin_lock_bh_lock_of_tg3(& tp->lock);
  #line 1393 
  if (__tg3_readphy(tp,(unsigned int)mii_id,reg,& val) != 0) 
                                                             #line 1394 
                                                             val = 4294967291U;
  #line 1396 
  cif_spin_unlock_bh_lock_of_tg3(& tp->lock);
  #line 1398 
  return (int)val;
}

#line 1401  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
static int tg3_mdio_write(struct mii_bus *bp, int mii_id, int reg, u16 val)
{
  #line 1403 
  struct tg3 *tp = (struct tg3 *)bp->priv;
  #line 1404 
  u32 ret = 0U;
  #line 1406 
  cif_spin_lock_bh_lock_of_tg3(& tp->lock);
  #line 1408 
  if (__tg3_writephy(tp,(unsigned int)mii_id,reg,(unsigned int)val) != 0) 
    #line 1409 
    ret = 4294967291U;
  #line 1411 
  cif_spin_unlock_bh_lock_of_tg3(& tp->lock);
  #line 1413 
  return (int)ret;
}

#line 1416  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
static void tg3_mdio_config_5785(struct tg3 *tp)
{
  #line 1418 
  u32 val;
  #line 1419 
  struct phy_device *phydev;
  #line 1421 
  phydev = mdiobus_get_phy(tp->mdio_bus,(int)tp->phy_addr);
  #line 1422 
  switch ((phydev->drv)->phy_id & (phydev->drv)->phy_id_mask) {
    #line 1423 
    case (unsigned int)21216608: 
                                 #line 1423 
    ;
    #line 1424 
    case (unsigned int)21216624: 
                                 #line 1424 
    ;
    #line 1425 
    val = 823182592U;
    #line 1426 
    break;
    #line 1427 
    case (unsigned int)21216368: 
                                 #line 1427 
    ;
    #line 1428 
    val = 872376000U;
    #line 1429 
    break;
    #line 1430 
    case (unsigned int)1886480: 
                                #line 1430 
    ;
    #line 1431 
    val = 857966592U;
    #line 1432 
    break;
    #line 1433 
    case (unsigned int)33280: 
                              #line 1433 
    ;
    #line 1434 
    val = 958165440U;
    #line 1435 
    break;
    #line 1436 
    default: 
             #line 1436 
    ;
    #line 1437 
    return;
  }
  #line 1440 
  if (phydev->interface != (unsigned int)PHY_INTERFACE_MODE_RGMII) {
    #line 1441 
    (*(tp->write32))(tp,1444U,val);
    #line 1443 
    val = (*(tp->read32))(tp,1440U);
    #line 1444 
    val &= 4261470222U;
    #line 1446 
    val |= 16781312U;
    #line 1447 
    (*(tp->write32))(tp,1440U,val);
    #line 1449 
    return;
  }
  #line 1452 
  if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_RGMII_INBAND_DISABLE,
                (unsigned long *)(& tp->tg3_flags)) == 0) 
    #line 1453 
    val |= 857502145U;
  #line 1460 
  (*(tp->write32))(tp,1444U,val);
  #line 1462 
  val = (*(tp->read32))(tp,1440U);
  #line 1463 
  val &= 4160806927U;
  #line 1465 
  if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_RGMII_INBAND_DISABLE,
                  (unsigned long *)(& tp->tg3_flags)) == 0) {
    #line 1466 
    if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_RGMII_EXT_IBND_RX_EN,
                  (unsigned long *)(& tp->tg3_flags)) != 0) 
      #line 1467 
      val |= 33554432U;
    #line 1468 
    if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_RGMII_EXT_IBND_TX_EN,
                  (unsigned long *)(& tp->tg3_flags)) != 0) 
      #line 1469 
      val |= 67108864U;
  }
  #line 1471 
  val |= 553652225U;
  #line 1473 
  (*(tp->write32))(tp,1440U,val);
  #line 1475 
  val = (*(tp->read32))(tp,1448U);
  #line 1476 
  val &= 4294963448U;
  #line 1483 
  if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_RGMII_INBAND_DISABLE,
                  (unsigned long *)(& tp->tg3_flags)) == 0) {
    #line 1484 
    if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_RGMII_EXT_IBND_RX_EN,
                  (unsigned long *)(& tp->tg3_flags)) != 0) 
      #line 1485 
      val |= 3840U;
    #line 1489 
    if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_RGMII_EXT_IBND_TX_EN,
                  (unsigned long *)(& tp->tg3_flags)) != 0) 
      #line 1490 
      val |= 7U;
  }
  #line 1494 
  (*(tp->write32))(tp,1448U,val);
  #line 1495 
  return;
}

#line 1497  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
static void tg3_mdio_start(struct tg3 *tp)
{
  #line 1499 
  tp->mi_mode &= 4294967279U;
  #line 1500 
  _tw32_flush(tp,1108U,tp->mi_mode,0U);
  #line 1501 
  __const_udelay(343600UL);
  #line 1503 
  if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_MDIOBUS_INITED,
                (unsigned long *)(& tp->tg3_flags)) != 0) 
    #line 1503 
    if (tp->pci_chip_rev_id >> 12 == 22405U) 
                                             #line 1505 
                                             tg3_mdio_config_5785(tp);
  #line 1506 
  return;
}

#line 1508  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
static int tg3_mdio_init(struct tg3 *tp)
{
  #line 1510 
  int i;
  #line 1511 
  u32 reg;
  #line 1512 
  struct phy_device *phydev;
  #line 1514 
  if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_5717_PLUS,
                  (unsigned long *)(& tp->tg3_flags)) != 0) {
    #line 1515 
    u32 is_serdes;
    #line 1517 
    tp->phy_addr = (unsigned char)((unsigned int)((unsigned char)tp->pci_fn) + 1U);
    #line 1519 
    if (tp->pci_chip_rev_id != 91320320U) {
      #line 1520 
      is_serdes = (*(tp->read32))(tp,1460U) & 256U;
    }
    else {
      #line 1522 
      is_serdes = (*(tp->read32))(tp,13924U) & 32U;
    }
    #line 1524 
    if (is_serdes != 0U) 
                         #line 1525 
                         tp->phy_addr = (unsigned char)((unsigned int)tp->phy_addr + 7U);
  }
  else {
    #line 1526 
    if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_IS_SSB_CORE,
                  (unsigned long *)(& tp->tg3_flags)) != 0) {
      #line 1526 
      if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_ROBOSWITCH,
                  (unsigned long *)(& tp->tg3_flags)) != 0) {
        #line 1527 
        int addr;
        #line 1529 
        addr = ssb_gige_get_phyaddr(tp->pdev);
        #line 1530 
        if (addr < 0) 
                      #line 1531 
                      return addr;
        #line 1532 
        tp->phy_addr = (unsigned char)addr;
      }
      else 
           #line 1534 
           tp->phy_addr = (unsigned char)1U;
    }
    else 
         #line 1534 
         tp->phy_addr = (unsigned char)1U;
  }
  #line 1536 
  tg3_mdio_start(tp);
  #line 1538 
  if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_USE_PHYLIB,
                  (unsigned long *)(& tp->tg3_flags)) == 0) 
    #line 1539 
    return 0;
  else {
    #line 1538 
    if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_MDIOBUS_INITED,
                  (unsigned long *)(& tp->tg3_flags)) != 0) 
      #line 1539 
      return 0;
  }
  #line 1541 
  tp->mdio_bus = mdiobus_alloc();
  #line 1542 
  if (tp->mdio_bus == (struct mii_bus *)0) 
                                           #line 1543 
                                           return -12;
  #line 1545 
  (tp->mdio_bus)->name = (char *)"tg3 mdio bus";
  #line 1546 
  snprintf((char *)(& (tp->mdio_bus)->id),61UL,(char *)"%x",(unsigned int)((int)((tp->pdev)->bus)->number << 8) | (tp->pdev)->devfn);
  #line 1548 
  (tp->mdio_bus)->priv = (void *)tp;
  #line 1549 
  (tp->mdio_bus)->parent = & (tp->pdev)->dev;
  #line 1550 
  (tp->mdio_bus)->read = & tg3_mdio_read;
  #line 1551 
  (tp->mdio_bus)->write = & tg3_mdio_write;
  #line 1552 
  (tp->mdio_bus)->phy_mask = (unsigned int)(~ (1 << (int)tp->phy_addr));
  #line 1559 
  if (tg3_readphy(tp,0,& reg) != 0) 
                                    #line 1560 
                                    tg3_bmcr_reset(tp);
  else 
    #line 1559 
    if ((reg & 2048U) != 0U) 
                             #line 1560 
                             tg3_bmcr_reset(tp);
  #line 1562 
  i = __mdiobus_register(tp->mdio_bus,& __this_module);
  #line 1563 
  if (i != 0) {
    #line 1564 
    _dev_warn(& (tp->pdev)->dev,(char *)"mdiobus_reg failed (0x%x)\n",i);
    #line 1565 
    mdiobus_free(tp->mdio_bus);
    #line 1566 
    return i;
  }
  #line 1569 
  phydev = mdiobus_get_phy(tp->mdio_bus,(int)tp->phy_addr);
  #line 1571 
  if (phydev == (struct phy_device *)0 || phydev->drv == (struct phy_driver *)0) {
    #line 1572 
    _dev_warn(& (tp->pdev)->dev,(char *)"No PHY devices\n");
    #line 1573 
    mdiobus_unregister(tp->mdio_bus);
    #line 1574 
    mdiobus_free(tp->mdio_bus);
    #line 1575 
    return -19;
  }
  #line 1578 
  switch ((phydev->drv)->phy_id & (phydev->drv)->phy_id_mask) {
    #line 1579 
    case (unsigned int)56778128: 
                                 #line 1579 
    ;
    #line 1580 
    phydev->interface = PHY_INTERFACE_MODE_GMII;
    #line 1581 
    phydev->dev_flags |= 512U;
    #line 1582 
    break;
    #line 1583 
    case (unsigned int)21216608: 
                                 #line 1583 
    ;
    #line 1584 
    case (unsigned int)21216624: 
                                 #line 1584 
    ;
    #line 1585 
    phydev->dev_flags |= 50688U;
    #line 1589 
    if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_RGMII_INBAND_DISABLE,
                  (unsigned long *)(& tp->tg3_flags)) != 0) 
      #line 1590 
      phydev->dev_flags |= 2048U;
    #line 1591 
    if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_RGMII_EXT_IBND_RX_EN,
                  (unsigned long *)(& tp->tg3_flags)) != 0) 
      #line 1592 
      phydev->dev_flags |= 4096U;
    #line 1593 
    if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_RGMII_EXT_IBND_TX_EN,
                  (unsigned long *)(& tp->tg3_flags)) != 0) 
      #line 1594 
      phydev->dev_flags |= 8192U;
    #line 1596 
    case (unsigned int)1886480: 
                                #line 1596 
    ;
    #line 1597 
    phydev->interface = PHY_INTERFACE_MODE_RGMII;
    #line 1598 
    break;
    #line 1599 
    case (unsigned int)33280: 
                              #line 1599 
    ;
    #line 1600 
    case (unsigned int)21216368: 
                                 #line 1600 
    ;
    #line 1601 
    phydev->interface = PHY_INTERFACE_MODE_MII;
    #line 1602 
    phydev->dev_flags |= 512U;
    #line 1603 
    tp->phy_flags |= 64U;
    #line 1604 
    break;
  }
  #line 1607 
  _tg3_flag_set((enum TG3_FLAGS)TG3_FLAG_MDIOBUS_INITED,(unsigned long *)(& tp->tg3_flags));
  #line 1609 
  if (tp->pci_chip_rev_id >> 12 == 22405U) 
                                           #line 1610 
                                           tg3_mdio_config_5785(tp);
  #line 1612 
  return 0;
}

#line 1615  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
static void tg3_mdio_fini(struct tg3 *tp)
{
  #line 1617 
  if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_MDIOBUS_INITED,
                (unsigned long *)(& tp->tg3_flags)) != 0) {
    #line 1618 
    _tg3_flag_clear((enum TG3_FLAGS)TG3_FLAG_MDIOBUS_INITED,(unsigned long *)(& tp->tg3_flags));
    #line 1619 
    mdiobus_unregister(tp->mdio_bus);
    #line 1620 
    mdiobus_free(tp->mdio_bus);
  }
  #line 1622 
  return;
}

#line 1625  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
__inline static void tg3_generate_fw_event(struct tg3 *tp)
{
  #line 1627 
  u32 val;
  #line 1629 
  val = (*(tp->read32))(tp,26640U);
  #line 1630 
  val |= 16384U;
  #line 1631 
  _tw32_flush(tp,26640U,val,0U);
  #line 1633 
  tp->__anonCompField_tg3_209.last_event_jiffies = jiffies;
  #line 1634 
  return;
}

#line 1639  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
static void tg3_wait_for_event_ack(struct tg3 *tp)
{
  #line 1641 
  int i;
  #line 1642 
  unsigned int delay_cnt;
  #line 1643 
  long time_remain;
  #line 1646 
  time_remain = (long)(((tp->__anonCompField_tg3_209.last_event_jiffies + usecs_to_jiffies(2500U)) - jiffies) + 1UL);
  #line 1649 
  if (time_remain < 0L) 
                        #line 1650 
                        return;
  #line 1653 
  delay_cnt = jiffies_to_usecs((unsigned long)time_remain);
  #line 1654 
  if (delay_cnt > 2500U) 
                         #line 1655 
                         delay_cnt = 2500U;
  #line 1656 
  delay_cnt = (delay_cnt >> 3) + 1U;
  #line 1658 
  i = 0;
  #line 1658 
  while ((unsigned int)i < delay_cnt) {
    {
      #line 1659 
      if (((*(tp->read32))(tp,26640U) & 16384U) == 0U) 
                                                       #line 1660 
                                                       break;
      #line 1661 
      if (pci_channel_offline(tp->pdev) != 0) 
                                              #line 1662 
                                              break;
      #line 1664 
      __const_udelay(34360UL);
    }
    #line 1658 
    i ++;
  }
  #line 1667 
  return;
}

#line 1669  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
static void tg3_phy_gather_ump_data(struct tg3 *tp, u32 *data)
{
  #line 1671 
  u32 reg;
  #line 1671 
  u32 val;
  #line 1678 
  u32 *tmp_1;
  #line 1685 
  u32 *tmp_4;
  #line 1694 
  u32 *tmp_7;
  #line 1700 
  u32 *tmp_9;
  #line 1673 
  val = 0U;
  #line 1674 
  if (tg3_readphy(tp,0,& reg) == 0) 
                                    #line 1675 
                                    val = reg << 16;
  #line 1676 
  if (tg3_readphy(tp,1,& reg) == 0) 
                                    #line 1677 
                                    val = (reg & 65535U) | val;
  #line 1678 
  tmp_1 = data;
  #line 1678 
  data ++;
  #line 1678 
  *tmp_1 = val;
  #line 1680 
  val = 0U;
  #line 1681 
  if (tg3_readphy(tp,4,& reg) == 0) 
                                    #line 1682 
                                    val = reg << 16;
  #line 1683 
  if (tg3_readphy(tp,5,& reg) == 0) 
                                    #line 1684 
                                    val = (reg & 65535U) | val;
  #line 1685 
  tmp_4 = data;
  #line 1685 
  data ++;
  #line 1685 
  *tmp_4 = val;
  #line 1687 
  val = 0U;
  #line 1688 
  if ((tp->phy_flags & 32U) == 0U) {
    #line 1689 
    if (tg3_readphy(tp,9,& reg) == 0) 
                                      #line 1690 
                                      val = reg << 16;
    #line 1691 
    if (tg3_readphy(tp,10,& reg) == 0) 
                                       #line 1692 
                                       val = (reg & 65535U) | val;
  }
  #line 1694 
  tmp_7 = data;
  #line 1694 
  data ++;
  #line 1694 
  *tmp_7 = val;
  #line 1696 
  if (tg3_readphy(tp,25,& reg) == 0) 
                                     #line 1697 
                                     val = reg << 16; else 
                                                           #line 1699 
                                                           val = 0U;
  #line 1700 
  tmp_9 = data;
  #line 1700 
  data ++;
  #line 1700 
  *tmp_9 = val;
  #line 1701 
  return;
}

#line 1704  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
static void tg3_ump_link_report(struct tg3 *tp)
{
  #line 1706 
  u32 data[4U];
  #line 1708 
  if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_5780_CLASS,
                (unsigned long *)(& tp->tg3_flags)) == 0) 
    #line 1709 
    return;
  else {
    #line 1708 
    if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_ENABLE_ASF,
                  (unsigned long *)(& tp->tg3_flags)) == 0) 
      #line 1709 
      return;
  }
  #line 1711 
  tg3_phy_gather_ump_data(tp,(u32 *)(& data));
  #line 1713 
  tg3_wait_for_event_ack(tp);
  #line 1715 
  tg3_write_mem(tp,2936U,12U);
  #line 1716 
  tg3_write_mem(tp,2940U,14U);
  #line 1717 
  tg3_write_mem(tp,2944U,data[0]);
  #line 1718 
  tg3_write_mem(tp,2948U,data[1]);
  #line 1719 
  tg3_write_mem(tp,2952U,data[2]);
  #line 1720 
  tg3_write_mem(tp,2956U,data[3]);
  #line 1722 
  tg3_generate_fw_event(tp);
  #line 1723 
  return;
}

#line 1726  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
static void tg3_stop_fw(struct tg3 *tp)
{
  #line 1728 
  if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_ENABLE_ASF,
                (unsigned long *)(& tp->tg3_flags)) != 0) {
    #line 1728 
    if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_ENABLE_APE,
                  (unsigned long *)(& tp->tg3_flags)) == 0) {
      #line 1730 
      tg3_wait_for_event_ack(tp);
      #line 1732 
      tg3_write_mem(tp,2936U,2U);
      #line 1734 
      tg3_generate_fw_event(tp);
      #line 1737 
      tg3_wait_for_event_ack(tp);
    }
  }
  #line 1739 
  return;
}

#line 1742  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
static void tg3_write_sig_pre_reset(struct tg3 *tp, int kind)
{
  #line 1744 
  tg3_write_mem(tp,2896U,1264940628U);
  #line 1747 
  if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_ASF_NEW_HANDSHAKE,
                (unsigned long *)(& tp->tg3_flags)) != 0) 
    #line 1748 
    switch (kind) {
      #line 1749 
      case 1: 
              #line 1749 
      ;
      #line 1750 
      tg3_write_mem(tp,3076U,1U);
      #line 1752 
      break;
      #line 1754 
      case 0: 
              #line 1754 
      ;
      #line 1755 
      tg3_write_mem(tp,3076U,2U);
      #line 1757 
      break;
      #line 1759 
      case 2: 
              #line 1759 
      ;
      #line 1760 
      tg3_write_mem(tp,3076U,4U);
      #line 1762 
      break;
      #line 1764 
      default: 
               #line 1764 
      ;
      #line 1765 
      break;
    }
  #line 1767 
  return;
}

#line 1771  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
static void tg3_write_sig_post_reset(struct tg3 *tp, int kind)
{
  #line 1773 
  if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_ASF_NEW_HANDSHAKE,
                (unsigned long *)(& tp->tg3_flags)) != 0) 
    #line 1774 
    switch (kind) {
      #line 1775 
      case 1: 
              #line 1775 
      ;
      #line 1776 
      tg3_write_mem(tp,3076U,2147483649U);
      #line 1778 
      break;
      #line 1780 
      case 0: 
              #line 1780 
      ;
      #line 1781 
      tg3_write_mem(tp,3076U,2147483650U);
      #line 1783 
      break;
      #line 1785 
      default: 
               #line 1785 
      ;
      #line 1786 
      break;
    }
  #line 1788 
  return;
}

#line 1792  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
static void tg3_write_sig_legacy(struct tg3 *tp, int kind)
{
  #line 1794 
  if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_ENABLE_ASF,
                (unsigned long *)(& tp->tg3_flags)) != 0) 
    #line 1795 
    switch (kind) {
      #line 1796 
      case 1: 
              #line 1796 
      ;
      #line 1797 
      tg3_write_mem(tp,3076U,1U);
      #line 1799 
      break;
      #line 1801 
      case 0: 
              #line 1801 
      ;
      #line 1802 
      tg3_write_mem(tp,3076U,2U);
      #line 1804 
      break;
      #line 1806 
      case 2: 
              #line 1806 
      ;
      #line 1807 
      tg3_write_mem(tp,3076U,4U);
      #line 1809 
      break;
      #line 1811 
      default: 
               #line 1811 
      ;
      #line 1812 
      break;
    }
  #line 1814 
  return;
}

#line 1817  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
static int tg3_poll_fw(struct tg3 *tp)
{
  #line 1819 
  int i;
  #line 1820 
  u32 val;
  #line 1822 
  if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_NO_FWARE_REPORTED,
                (unsigned long *)(& tp->tg3_flags)) != 0) 
    #line 1823 
    return 0;
  #line 1825 
  if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_IS_SSB_CORE,
                  (unsigned long *)(& tp->tg3_flags)) != 0) 
    #line 1827 
    return 0;
  #line 1830 
  if (tp->pci_chip_rev_id >> 12 == 12U) {
    #line 1832 
    i = 0;
    #line 1832 
    while (i <= 199) {
      {
        #line 1833 
        if (((*(tp->read32))(tp,20736U) & 67108864U) != 0U) 
                                                            #line 1834 
                                                            return 0;
        #line 1835 
        if (pci_channel_offline(tp->pdev) != 0) 
                                                #line 1836 
                                                return -19;
        #line 1838 
        __const_udelay(429500UL);
      }
      #line 1832 
      i ++;
    }
    #line 1840 
    return -19;
  }
  #line 1844 
  i = 0;
  #line 1844 
  while (i <= 99999) {
    {
      #line 1845 
      tg3_read_mem(tp,2896U,& val);
      #line 1846 
      if (val == 3030026667U) 
                              #line 1847 
                              break;
      #line 1848 
      if (pci_channel_offline(tp->pdev) != 0) {
        #line 1849 
        if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_NO_FWARE_REPORTED,
                  (unsigned long *)(& tp->tg3_flags)) == 0) {
          #line 1850 
          _tg3_flag_set((enum TG3_FLAGS)TG3_FLAG_NO_FWARE_REPORTED,(unsigned long *)(& tp->tg3_flags));
          #line 1851 
          netdev_info(tp->dev,(char *)"No firmware running\n");
        }
        #line 1854 
        break;
      }
      #line 1857 
      __const_udelay(42950UL);
    }
    #line 1844 
    i ++;
  }
  #line 1865 
  if (i > 99999) {
    #line 1865 
    if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_NO_FWARE_REPORTED,
                  (unsigned long *)(& tp->tg3_flags)) == 0) {
      #line 1866 
      _tg3_flag_set((enum TG3_FLAGS)TG3_FLAG_NO_FWARE_REPORTED,(unsigned long *)(& tp->tg3_flags));
      #line 1868 
      netdev_info(tp->dev,(char *)"No firmware running\n");
    }
  }
  #line 1871 
  if (tp->pci_chip_rev_id == 1467502592U) {
    #line 1875 
    unsigned long __ms = 10UL;
    #line 1875 
    while (1) {
      #line 1875 
      unsigned long tmp_6;
      #line 1875 
      tmp_6 = __ms;
      #line 1875 
      __ms --;
      #line 1875 
      ;
      #line 1875 
      if (! (tmp_6 != 0UL)) 
                            #line 1875 
                            break;
      #line 1875 
      __const_udelay(4295000UL);
    }
  }
  #line 1878 
  return 0;
}

#line 1881  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
static void tg3_link_report(struct tg3 *tp)
{
  #line 1883 
  if (netif_carrier_ok(tp->dev)) {
    #line 1886 
    if ((tp->msg_enable & 4U) != 0U) {
      #line 1888 
      int tmp_0;
      #line 1889 
      char *tmp;
      #line 1887 
      int tmp_1;
      #line 1897 
      char *tmp_2;
      #line 1895 
      char *tmp_3;
      #line 1889 
      if ((unsigned int)tp->link_config.active_duplex == 1U) 
                                                             #line 1889 
                                                             tmp = (char *)"full"; else 
                                                                    #line 1889 
                                                                    tmp = (char *)"half";
      #line 1887 
      if (tp->link_config.active_speed != 1000U) {
        #line 1888 
        if (tp->link_config.active_speed == 100U) 
                                                  #line 1888 
                                                  tmp_0 = 100; else 
                                                                    #line 1888 
                                                                    tmp_0 = 10;
        #line 1887 
        tmp_1 = tmp_0;
      }
      else 
           #line 1887 
           tmp_1 = 1000;
      #line 1887 
      ;
      #line 1887 
      netdev_info(tp->dev,(char *)"Link is up at %d Mbps, %s duplex\n",tmp_1,tmp);
      #line 1897 
      if (((int)tp->link_config.active_flowctrl & 2) != 0) 
                                                           #line 1897 
                                                           tmp_2 = (char *)"on"; else 
                                                                    #line 1897 
                                                                    tmp_2 = (char *)"off";
      #line 1895 
      if (((int)tp->link_config.active_flowctrl & 1) != 0) 
                                                           #line 1895 
                                                           tmp_3 = (char *)"on"; else 
                                                                    #line 1895 
                                                                    tmp_3 = (char *)"off";
      #line 1895 
      ;
      #line 1895 
      netdev_info(tp->dev,(char *)"Flow control is %s for TX and %s for RX\n",tmp_3,tmp_2);
      #line 1901 
      if ((tp->phy_flags & 262144U) != 0U) {
        #line 1902 
        char *tmp_4;
        #line 1902 
        if (tp->setlpicnt != 0U) 
                                 #line 1902 
                                 tmp_4 = (char *)"enabled"; else 
                                                                 #line 1902 
                                                                 tmp_4 = (char *)"disabled";
        #line 1902 
        ;
        #line 1902 
        netdev_info(tp->dev,(char *)"EEE is %s\n",tmp_4);
      }
      #line 1905 
      tg3_ump_link_report(tp);
    }
  }
  else {
    #line 1884 
    if ((tp->msg_enable & 4U) != 0U) 
                                     #line 1884 
                                     netdev_info(tp->dev,(char *)"Link is down\n");
    #line 1885 
    tg3_ump_link_report(tp);
  }
  #line 1908 
  tp->link_up = netif_carrier_ok(tp->dev);
  #line 1909 
  return;
}

#line 1911  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
static u32 tg3_decode_flowctrl_1000T(u32 adv)
{
  #line 1913 
  u32 flowctrl = 0U;
  #line 1915 
  if ((adv & 1024U) != 0U) {
    #line 1916 
    flowctrl |= 2U;
    #line 1917 
    if ((adv & 2048U) == 0U) 
                             #line 1918 
                             flowctrl |= 1U;
  }
  else 
    #line 1919 
    if ((adv & 2048U) != 0U) 
                             #line 1920 
                             flowctrl |= 1U;
  #line 1922 
  return flowctrl;
}

#line 1925  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
static u16 tg3_advert_flowctrl_1000X(u8 flow_ctrl)
{
  #line 1927 
  u16 miireg;
  #line 1929 
  if (((int)flow_ctrl & 1) != 0 && ((int)flow_ctrl & 2) != 0) 
                                                              #line 1930 
                                                              miireg = (unsigned short)128U;
  else 
    #line 1931 
    if (((int)flow_ctrl & 1) != 0) 
                                   #line 1932 
                                   miireg = (unsigned short)256U;
    else 
      #line 1933 
      if (((int)flow_ctrl & 2) != 0) 
                                     #line 1934 
                                     miireg = (unsigned short)384U; else 
                                                                    #line 1936 
                                                                    miireg = (unsigned short)0U;
  #line 1938 
  return miireg;
}

#line 1941  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
static u32 tg3_decode_flowctrl_1000X(u32 adv)
{
  #line 1943 
  u32 flowctrl = 0U;
  #line 1945 
  if ((adv & 128U) != 0U) {
    #line 1946 
    flowctrl |= 2U;
    #line 1947 
    if ((adv & 256U) == 0U) 
                            #line 1948 
                            flowctrl |= 1U;
  }
  else 
    #line 1949 
    if ((adv & 256U) != 0U) 
                            #line 1950 
                            flowctrl |= 1U;
  #line 1952 
  return flowctrl;
}

#line 1955  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
static u8 tg3_resolve_flowctrl_1000X(u16 lcladv, u16 rmtadv)
{
  #line 1957 
  u8 cap = (unsigned char)0U;
  #line 1959 
  if ((((int)lcladv & (int)rmtadv) & 128) != 0) 
                                                #line 1960 
                                                cap = (unsigned char)3U;
  else 
    #line 1961 
    if ((((int)lcladv & (int)rmtadv) & 256) != 0) {
      #line 1962 
      if (((int)lcladv & 128) != 0) 
                                    #line 1963 
                                    cap = (unsigned char)2U;
      #line 1964 
      if (((int)rmtadv & 128) != 0) 
                                    #line 1965 
                                    cap = (unsigned char)1U;
    }
  #line 1968 
  return cap;
}

#line 1971  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
static void tg3_setup_flow_control(struct tg3 *tp, u32 lcladv, u32 rmtadv)
{
  #line 1973 
  u8 autoneg;
  #line 1974 
  u8 flowctrl = (unsigned char)0U;
  #line 1975 
  u32 old_rx_mode = tp->rx_mode;
  #line 1976 
  u32 old_tx_mode = tp->tx_mode;
  #line 1978 
  if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_USE_PHYLIB,
                  (unsigned long *)(& tp->tg3_flags)) != 0) {
    #line 1979 
    autoneg = (unsigned char)mdiobus_get_phy(tp->mdio_bus,(int)tp->phy_addr)->autoneg;
  }
  else 
       #line 1981 
       autoneg = tp->link_config.autoneg;
  #line 1983 
  if ((unsigned int)autoneg == 1U) {
    #line 1983 
    if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_PAUSE_AUTONEG,
                  (unsigned long *)(& tp->tg3_flags)) != 0) 
      #line 1984 
      if ((tp->phy_flags & 48U) != 0U) 
                                       #line 1985 
                                       flowctrl = tg3_resolve_flowctrl_1000X((unsigned short)((int)((unsigned short)lcladv)),(unsigned short)((int)((unsigned short)rmtadv))); else 
                                                                    #line 1987 
                                                                    flowctrl = mii_resolve_flowctrl_fdx((unsigned short)((int)((unsigned short)lcladv)),(unsigned short)((int)((unsigned short)rmtadv)));
    else 
         #line 1989 
         flowctrl = tp->link_config.flowctrl;
  }
  else 
       #line 1989 
       flowctrl = tp->link_config.flowctrl;
  #line 1991 
  tp->link_config.active_flowctrl = flowctrl;
  #line 1993 
  if (((int)flowctrl & 2) != 0) 
                                #line 1994 
                                tp->rx_mode |= 4U; else 
                                                        #line 1996 
                                                        tp->rx_mode &= 4294967291U;
  #line 1998 
  if (tp->rx_mode != old_rx_mode) 
                                  #line 1999 
                                  _tw32_flush(tp,1128U,tp->rx_mode,0U);
  #line 2001 
  if (((int)flowctrl & 1) != 0) 
                                #line 2002 
                                tp->tx_mode |= 16U; else 
                                                         #line 2004 
                                                         tp->tx_mode &= 4294967279U;
  #line 2006 
  if (tp->tx_mode != old_tx_mode) 
                                  #line 2007 
                                  _tw32_flush(tp,1116U,tp->tx_mode,0U);
  #line 2008 
  return;
}

#line 2010  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
static void tg3_adjust_link(struct net_device *dev)
{
  #line 2012 
  u8 oldflowctrl;
  #line 2013 
  u32 mac_mode;
  #line 2013 
  u32 lcl_adv;
  #line 2013 
  u32 rmt_adv;
  #line 2012 
  u8 linkmesg = (unsigned char)0U;
  #line 2014 
  struct tg3 *tp = netdev_priv(dev);
  #line 2015 
  struct phy_device *phydev = mdiobus_get_phy(tp->mdio_bus,(int)tp->phy_addr);
  #line 2017 
  cif_spin_lock_bh_lock_of_tg3(& tp->lock);
  #line 2019 
  mac_mode = tp->mac_mode & 4294967281U;
  #line 2022 
  oldflowctrl = tp->link_config.active_flowctrl;
  #line 2024 
  if ((unsigned int)phydev->link != 0U) {
    #line 2025 
    lcl_adv = 0U;
    #line 2026 
    rmt_adv = 0U;
    #line 2028 
    if (phydev->speed == 100 || phydev->speed == 10) 
                                                     #line 2029 
                                                     mac_mode |= 4U;
    else 
      #line 2030 
      if (phydev->speed == 1000 || tp->pci_chip_rev_id >> 12 != 22405U) 
        #line 2032 
        mac_mode |= 8U; else 
                             #line 2034 
                             mac_mode |= 4U;
    #line 2036 
    if (phydev->duplex == 0) 
                             #line 2037 
                             mac_mode |= 2U;
    else {
      #line 2039 
      lcl_adv = (unsigned int)mii_advertise_flowctrl((int)tp->link_config.flowctrl);
      #line 2042 
      if (phydev->pause != 0) 
                              #line 2043 
                              rmt_adv = 1024U;
      #line 2044 
      if (phydev->asym_pause != 0) 
                                   #line 2045 
                                   rmt_adv |= 2048U;
    }
    #line 2048 
    tg3_setup_flow_control(tp,lcl_adv,rmt_adv);
  }
  else 
       #line 2050 
       mac_mode |= 8U;
  #line 2052 
  if (tp->mac_mode != mac_mode) {
    #line 2053 
    tp->mac_mode = mac_mode;
    #line 2054 
    _tw32_flush(tp,1024U,tp->mac_mode,0U);
    #line 2055 
    __const_udelay(171800UL);
  }
  #line 2058 
  if (tp->pci_chip_rev_id >> 12 == 22405U) 
    #line 2059 
    if (phydev->speed == 10) 
                             #line 2060 
                             (*(tp->write32))(tp,1104U,3U); else 
                                                                 #line 2064 
                                                                 (*(tp->write32))(tp,1104U,1U);
  #line 2067 
  if (phydev->speed == 1000 && phydev->duplex == 0) 
                                                    #line 2068 
                                                    (*(tp->write32))(tp,1124U,9983U); else 
                                                                    #line 2073 
                                                                    (*(tp->write32))(tp,1124U,9760U);
  #line 2078 
  if ((((int)phydev->link != tp->old_link || (unsigned int)phydev->speed != tp->link_config.active_speed) || phydev->duplex != (int)tp->link_config.active_duplex) || (int)tp->link_config.active_flowctrl != (int)oldflowctrl) 
    #line 2082 
    linkmesg = (unsigned char)1U;
  #line 2084 
  tp->old_link = (int)phydev->link;
  #line 2085 
  tp->link_config.active_speed = (unsigned int)phydev->speed;
  #line 2086 
  tp->link_config.active_duplex = (unsigned char)phydev->duplex;
  #line 2088 
  cif_spin_unlock_bh_lock_of_tg3(& tp->lock);
  #line 2090 
  if ((unsigned int)linkmesg != 0U) 
                                    #line 2091 
                                    tg3_link_report(tp);
  #line 2092 
  return;
}

#line 2094  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
static int tg3_phy_init(struct tg3 *tp)
{
  #line 2096 
  struct phy_device *phydev;
  #line 2098 
  if ((tp->phy_flags & 2U) != 0U) 
                                  #line 2099 
                                  return 0;
  #line 2102 
  tg3_bmcr_reset(tp);
  #line 2104 
  phydev = mdiobus_get_phy(tp->mdio_bus,(int)tp->phy_addr);
  #line 2107 
  ;
  #line 2107 
  ;
  #line 2107 
  phydev = phy_connect(tp->dev,phydev_name(phydev),& tg3_adjust_link,phydev->interface);
  #line 2109 
  if ((int)IS_ERR((void *)phydev) != 0) {
    #line 2110 
    _dev_err(& (tp->pdev)->dev,(char *)"Could not attach to PHY\n");
    #line 2111 
    return (int)PTR_ERR((void *)phydev);
  }
  #line 2115 
  switch ((unsigned int)phydev->interface) {
    #line 2116 
    case (unsigned int)3: 
                          #line 2116 
    ;
    #line 2117 
    case (unsigned int)8: 
                          #line 2117 
    ;
    #line 2118 
    if ((tp->phy_flags & 128U) == 0U) {
      #line 2119 
      phy_set_max_speed(phydev,1000U);
      #line 2120 
      phy_support_asym_pause(phydev);
      #line 2121 
      break;
    }
    #line 2124 
    case (unsigned int)2: 
                          #line 2124 
    ;
    #line 2125 
    phy_set_max_speed(phydev,100U);
    #line 2126 
    phy_support_asym_pause(phydev);
    #line 2127 
    break;
    #line 2128 
    default: 
             #line 2128 
    ;
    #line 2129 
    phy_disconnect(mdiobus_get_phy(tp->mdio_bus,(int)tp->phy_addr));
    #line 2130 
    return -22;
  }
  #line 2133 
  tp->phy_flags |= 2U;
  #line 2135 
  phy_attached_info(phydev);
  #line 2137 
  return 0;
}

#line 2140  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
static void tg3_phy_start(struct tg3 *tp)
{
  #line 2142 
  struct phy_device *phydev;
  #line 2144 
  if ((tp->phy_flags & 2U) == 0U) 
                                  #line 2145 
                                  return;
  #line 2147 
  phydev = mdiobus_get_phy(tp->mdio_bus,(int)tp->phy_addr);
  #line 2149 
  if ((tp->phy_flags & 1U) != 0U) {
    #line 2150 
    tp->phy_flags &= 4294967294U;
    #line 2151 
    phydev->speed = (int)tp->link_config.speed;
    #line 2152 
    phydev->duplex = (int)tp->link_config.duplex;
    #line 2153 
    phydev->autoneg = (unsigned int)tp->link_config.autoneg;
    #line 2154 
    ethtool_convert_legacy_u32_to_link_mode((unsigned long *)(& phydev->advertising),tp->link_config.advertising);
  }
  #line 2158 
  phy_start(phydev);
  #line 2160 
  phy_start_aneg(phydev);
  #line 2161 
  return;
}

#line 2163  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
static void tg3_phy_stop(struct tg3 *tp)
{
  #line 2165 
  if ((tp->phy_flags & 2U) == 0U) 
                                  #line 2166 
                                  return;
  #line 2168 
  phy_stop(mdiobus_get_phy(tp->mdio_bus,(int)tp->phy_addr));
  #line 2169 
  return;
}

#line 2171  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
static void tg3_phy_fini(struct tg3 *tp)
{
  #line 2173 
  if ((tp->phy_flags & 2U) != 0U) {
    #line 2174 
    phy_disconnect(mdiobus_get_phy(tp->mdio_bus,(int)tp->phy_addr));
    #line 2175 
    tp->phy_flags &= 4294967293U;
  }
  #line 2177 
  return;
}

#line 2179  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
static int tg3_phy_set_extloopbk(struct tg3 *tp)
{
  #line 2181 
  int err;
  #line 2182 
  u32 val;
  #line 2184 
  if ((tp->phy_flags & 64U) != 0U) 
                                   #line 2185 
                                   return 0;
  #line 2187 
  if ((tp->phy_id & 4294967280U) == 1610645584U) {
    #line 2189 
    err = tg3_phy_auxctl_write(tp,0,52256U);
    #line 2193 
    goto done;
  }
  #line 2196 
  err = tg3_phy_auxctl_read(tp,0,& val);
  #line 2198 
  if (err != 0) 
                #line 2199 
                return err;
  #line 2201 
  val |= 32768U;
  #line 2202 
  err = tg3_phy_auxctl_write(tp,0,val);
  #line 2205 
  done: 
        #line 2205 
  ;
  #line 2206 
  return err;
}

#line 2209  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
static void tg3_phy_fet_toggle_apd(struct tg3 *tp, bool enable)
{
  #line 2211 
  u32 phytest;
  #line 2213 
  if (tg3_readphy(tp,31,& phytest) == 0) {
    #line 2214 
    u32 phy;
    #line 2216 
    tg3_writephy(tp,31,phytest | 128U);
    #line 2218 
    if (tg3_readphy(tp,27,& phy) == 0) {
      #line 2219 
      if ((int)enable != 0) 
                            #line 2220 
                            phy |= 32U; else 
                                             #line 2222 
                                             phy &= 4294967263U;
      #line 2223 
      tg3_writephy(tp,27,phy);
    }
    #line 2225 
    tg3_writephy(tp,31,phytest);
  }
  #line 2227 
  return;
}

#line 2229  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
static void tg3_phy_toggle_apd(struct tg3 *tp, bool enable)
{
  #line 2231 
  u32 reg;
  #line 2233 
  if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_5705_PLUS,
                (unsigned long *)(& tp->tg3_flags)) == 0) 
    #line 2236 
    return;
  else {
    #line 2233 
    if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_5717_PLUS,
                  (unsigned long *)(& tp->tg3_flags)) != 0) 
      #line 2234 
      if ((tp->phy_flags & 32U) != 0U) 
                                       #line 2236 
                                       return;
  }
  #line 2238 
  if ((tp->phy_flags & 64U) != 0U) {
    #line 2239 
    tg3_phy_fet_toggle_apd(tp,(_Bool)((bool)((int)enable) != 0));
    #line 2240 
    return;
  }
  #line 2243 
  reg = 29U;
  #line 2247 
  if (tp->pci_chip_rev_id >> 12 != 22404U || ! enable) 
                                                       #line 2248 
                                                       reg |= 2U;
  #line 2250 
  tg3_phy_shdw_write(tp,5120,reg);
  #line 2253 
  reg = 1U;
  #line 2254 
  if ((int)enable != 0) 
                        #line 2255 
                        reg |= 32U;
  #line 2257 
  tg3_phy_shdw_write(tp,10240,reg);
  #line 2258 
  return;
}

#line 2260  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
static void tg3_phy_toggle_automdix(struct tg3 *tp, bool enable)
{
  #line 2262 
  u32 phy;
  #line 2264 
  if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_5705_PLUS,
                (unsigned long *)(& tp->tg3_flags)) == 0) 
    #line 2266 
    return;
  else 
    #line 2264 
    if ((tp->phy_flags & 48U) != 0U) 
                                     #line 2266 
                                     return;
  #line 2268 
  if ((tp->phy_flags & 64U) != 0U) {
    #line 2269 
    u32 ephy;
    #line 2271 
    if (tg3_readphy(tp,31,& ephy) == 0) {
      #line 2272 
      u32 reg = 16U;
      #line 2274 
      tg3_writephy(tp,31,ephy | 128U);
      #line 2276 
      if (tg3_readphy(tp,(int)reg,& phy) == 0) {
        #line 2277 
        if ((int)enable != 0) 
                              #line 2278 
                              phy |= 16384U; else 
                                                  #line 2280 
                                                  phy &= 4294950911U;
        #line 2281 
        tg3_writephy(tp,(int)reg,phy);
      }
      #line 2283 
      tg3_writephy(tp,31,ephy);
    }
  }
  else {
    #line 2286 
    int ret;
    #line 2288 
    ret = tg3_phy_auxctl_read(tp,7,& phy);
    #line 2290 
    if (ret == 0) {
      #line 2291 
      if ((int)enable != 0) 
                            #line 2292 
                            phy |= 512U; else 
                                              #line 2294 
                                              phy &= 4294966783U;
      #line 2295 
      tg3_phy_auxctl_write(tp,7,phy);
    }
  }
  #line 2298 
  return;
}

#line 2301  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
static void tg3_phy_set_wirespeed(struct tg3 *tp)
{
  #line 2303 
  int ret;
  #line 2304 
  u32 val;
  #line 2306 
  if ((tp->phy_flags & 1024U) != 0U) 
                                     #line 2307 
                                     return;
  #line 2309 
  ret = tg3_phy_auxctl_read(tp,7,& val);
  #line 2310 
  if (ret == 0) 
                #line 2311 
                tg3_phy_auxctl_write(tp,7,val | 16U);
  #line 2313 
  return;
}

#line 2315  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
static void tg3_phy_apply_otp(struct tg3 *tp)
{
  #line 2317 
  u32 otp;
  #line 2317 
  u32 phy;
  #line 2319 
  if (tp->phy_otp == 0U) 
                         #line 2320 
                         return;
  #line 2322 
  otp = tp->phy_otp;
  #line 2324 
  if (tg3_phy_toggle_auxctl_smdsp(tp,(_Bool)1) != 0) 
                                                     #line 2325 
                                                     return;
  #line 2327 
  phy = (otp >> 1) & 112U;
  #line 2328 
  phy |= 7U;
  #line 2329 
  tg3_phydsp_write(tp,1U,phy);
  #line 2331 
  phy = (otp >> 1) & 896U;
  #line 2333 
  tg3_phydsp_write(tp,31U,phy);
  #line 2335 
  phy = (otp >> 11) & 1U;
  #line 2336 
  phy |= 2U;
  #line 2337 
  tg3_phydsp_write(tp,24607U,phy);
  #line 2339 
  phy = otp >> 24;
  #line 2340 
  tg3_phydsp_write(tp,3957U,phy);
  #line 2342 
  phy = (otp >> 8) & 240U;
  #line 2343 
  tg3_phydsp_write(tp,3990U,phy);
  #line 2345 
  phy = ((otp >> 11) & 7168U) | ((otp >> 16) & 28U);
  #line 2347 
  tg3_phydsp_write(tp,3991U,phy);
  #line 2349 
  tg3_phy_toggle_auxctl_smdsp(tp,(_Bool)0);
  #line 2350 
  return;
}

#line 2352  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
static void tg3_eee_pull_config(struct tg3 *tp, struct ethtool_eee *eee)
{
  #line 2354 
  u32 val;
  #line 2355 
  struct ethtool_eee *dest = & tp->eee;
  #line 2357 
  if ((tp->phy_flags & 262144U) == 0U) 
                                       #line 2358 
                                       return;
  #line 2360 
  if (eee != (struct ethtool_eee *)0) 
                                      #line 2361 
                                      dest = eee;
  #line 2363 
  if (tg3_phy_cl45_read(tp,7U,32830U,& val) != 0) 
                                                  #line 2364 
                                                  return;
  #line 2367 
  if (val == 4U || val == 2U) 
                              #line 2369 
                              dest->eee_active = 1U; else 
                                                          #line 2371 
                                                          dest->eee_active = 0U;
  #line 2374 
  if (tg3_phy_cl45_read(tp,7U,61U,& val) != 0) 
                                               #line 2375 
                                               return;
  #line 2376 
  dest->lp_advertised = mmd_eee_adv_to_ethtool_adv_t((unsigned short)((int)((unsigned short)val)));
  #line 2379 
  if (tg3_phy_cl45_read(tp,7U,60U,& val) != 0) 
                                               #line 2380 
                                               return;
  #line 2381 
  dest->eee_enabled = (unsigned int)(val != 0U);
  #line 2382 
  dest->advertised = mmd_eee_adv_to_ethtool_adv_t((unsigned short)((int)((unsigned short)val)));
  #line 2385 
  val = (*(tp->read32))(tp,14000U);
  #line 2386 
  dest->tx_lpi_enabled = (unsigned int)((val & 256U) != 0U);
  #line 2389 
  dest->tx_lpi_timer = (*(tp->read32))(tp,14004U) & 65535U;
  #line 2390 
  return;
}

#line 2392  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
static void tg3_phy_eee_adjust(struct tg3 *tp, bool current_link_up)
{
  #line 2394 
  u32 val;
  #line 2396 
  if ((tp->phy_flags & 262144U) == 0U) 
                                       #line 2397 
                                       return;
  #line 2399 
  tp->setlpicnt = 0U;
  #line 2401 
  if ((((unsigned int)tp->link_config.autoneg == 1U && (int)current_link_up != 0) && (unsigned int)tp->link_config.active_duplex == 1U) && (tp->link_config.active_speed == 100U || tp->link_config.active_speed == 1000U)) {
    #line 2406 
    u32 eeectl;
    #line 2408 
    if (tp->link_config.active_speed == 1000U) 
                                               #line 2409 
                                               eeectl = 413U; else 
                                                                   #line 2411 
                                                                   eeectl = 900U;
    #line 2413 
    (*(tp->write32))(tp,14032U,eeectl);
    #line 2415 
    tg3_eee_pull_config(tp,(struct ethtool_eee *)0);
    #line 2416 
    if (tp->eee.eee_active != 0U) 
                                  #line 2417 
                                  tp->setlpicnt = 2U;
  }
  #line 2420 
  if (tp->setlpicnt == 0U) {
    #line 2421 
    if ((int)current_link_up != 0) {
      #line 2421 
      if (tg3_phy_toggle_auxctl_smdsp(tp,(_Bool)1) == 0) {
        #line 2423 
        tg3_phydsp_write(tp,26U,0U);
        #line 2424 
        tg3_phy_toggle_auxctl_smdsp(tp,(_Bool)0);
      }
    }
    #line 2427 
    val = (*(tp->read32))(tp,14000U);
    #line 2428 
    (*(tp->write32))(tp,14000U,val & 4294967167U);
  }
  #line 2430 
  return;
}

#line 2432  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
static void tg3_phy_eee_enable(struct tg3 *tp)
{
  #line 2434 
  u32 val;
  #line 2436 
  if (tp->link_config.active_speed == 1000U) 
    #line 2436 
    if (tp->pci_chip_rev_id >> 12 == 22295U || tp->pci_chip_rev_id >> 12 == 22297U) 
      #line 2436 
      goto _LOR;
    else {
      #line 2438 
      if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_57765_CLASS,
                (unsigned long *)(& tp->tg3_flags)) != 0) {
        #line 2436 
        _LOR: 
        #line 2439 
        if (tg3_phy_toggle_auxctl_smdsp(tp,(_Bool)1) == 0) {
          #line 2441 
          val = 3U;
          #line 2443 
          tg3_phydsp_write(tp,26U,val);
          #line 2444 
          tg3_phy_toggle_auxctl_smdsp(tp,(_Bool)0);
        }
      }
    }
  #line 2447 
  val = (*(tp->read32))(tp,14000U);
  #line 2448 
  (*(tp->write32))(tp,14000U,val | 128U);
  #line 2449 
  return;
}

#line 2451  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
static int tg3_wait_macro_done(struct tg3 *tp)
{
  #line 2453 
  int limit = 100;
  #line 2455 
  while (1) {
    #line 2455 
    int tmp_0;
    #line 2455 
    tmp_0 = limit;
    #line 2455 
    limit --;
    #line 2455 
    ;
    #line 2455 
    if (! (tmp_0 != 0)) 
                        #line 2455 
                        break;
    {
      #line 2456 
      u32 tmp32;
      #line 2458 
      if (tg3_readphy(tp,22,& tmp32) == 0) 
        #line 2459 
        if ((tmp32 & 4096U) == 0U) 
                                   #line 2460 
                                   break;
    }
  }
  #line 2463 
  if (limit < 0) 
                 #line 2464 
                 return -16;
  #line 2466 
  return 0;
}

#line 2469  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
static int tg3_phy_write_and_check_testpat(struct tg3 *tp, int *resetp)
{
  #line 2477 
  int chan;
  #line 2471 
  u32 test_pat[4U][6U] = {{21845U, 5U, 10922U, 10U, 13398U, 3U}, {10922U, 10U, 13107U, 3U, 30874U, 5U}, {23130U, 5U, 10858U, 10U, 7117U, 3U}, {10842U, 10U, 13251U, 3U, 12017U, 5U}};
  #line 2479 
  chan = 0;
  #line 2479 
  while (chan <= 3) {
    {
      #line 2480 
      int i;
      #line 2482 
      tg3_writephy(tp,23,(unsigned int)(chan * 8192 | 512));
      #line 2484 
      tg3_writephy(tp,22,2U);
      #line 2486 
      i = 0;
      #line 2486 
      while (i <= 5) {
        #line 2487 
        tg3_writephy(tp,21,test_pat[chan][i]);
        #line 2486 
        i ++;
      }
      #line 2490 
      tg3_writephy(tp,22,514U);
      #line 2491 
      if (tg3_wait_macro_done(tp) != 0) {
        #line 2492 
        *resetp = 1;
        #line 2493 
        return -16;
      }
      #line 2496 
      tg3_writephy(tp,23,(unsigned int)(chan * 8192 | 512));
      #line 2498 
      tg3_writephy(tp,22,130U);
      #line 2499 
      if (tg3_wait_macro_done(tp) != 0) {
        #line 2500 
        *resetp = 1;
        #line 2501 
        return -16;
      }
      #line 2504 
      tg3_writephy(tp,22,2050U);
      #line 2505 
      if (tg3_wait_macro_done(tp) != 0) {
        #line 2506 
        *resetp = 1;
        #line 2507 
        return -16;
      }
      #line 2510 
      i = 0;
      #line 2510 
      while (i <= 5) {
        {
          #line 2511 
          u32 low;
          #line 2511 
          u32 high;
          #line 2513 
          if (tg3_readphy(tp,21,& low) != 0) 
                                             #line 2513 
                                             goto _LOR;
          else {
            #line 2513 
            if (tg3_readphy(tp,21,& high) != 0) 
                                                #line 2513 
                                                goto _LOR;
            else {
              #line 2514 
              if (tg3_wait_macro_done(tp) != 0) {
                #line 2513 
                _LOR: {
                        #line 2516 
                        *resetp = 1;
                        #line 2517 
                        return -16;
                      }
              }
            }
          }
          #line 2519 
          low &= 32767U;
          #line 2520 
          high &= 15U;
          #line 2521 
          if (test_pat[chan][i] != low || test_pat[chan][i + 1] != high) {
            #line 2523 
            tg3_writephy(tp,23,11U);
            #line 2524 
            tg3_writephy(tp,21,16385U);
            #line 2525 
            tg3_writephy(tp,21,16389U);
            #line 2527 
            return -16;
          }
        }
        #line 2510 
        i += 2;
      }
    }
    #line 2479 
    chan ++;
  }
  #line 2532 
  return 0;
}

#line 2535  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
static int tg3_phy_reset_chanpat(struct tg3 *tp)
{
  #line 2537 
  int chan;
  #line 2539 
  chan = 0;
  #line 2539 
  while (chan <= 3) {
    {
      #line 2540 
      int i;
      #line 2542 
      tg3_writephy(tp,23,(unsigned int)(chan * 8192 | 512));
      #line 2544 
      tg3_writephy(tp,22,2U);
      #line 2545 
      i = 0;
      #line 2545 
      while (i <= 5) {
        #line 2546 
        tg3_writephy(tp,21,0U);
        #line 2545 
        i ++;
      }
      #line 2547 
      tg3_writephy(tp,22,514U);
      #line 2548 
      if (tg3_wait_macro_done(tp) != 0) 
                                        #line 2549 
                                        return -16;
    }
    #line 2539 
    chan ++;
  }
  #line 2552 
  return 0;
}

#line 2555  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
static int tg3_phy_reset_5703_4_5(struct tg3 *tp)
{
  #line 2557 
  u32 reg32;
  #line 2557 
  u32 phy9_orig;
  #line 2558 
  int retries;
  #line 2558 
  int do_phy_reset;
  #line 2558 
  int err;
  #line 2560 
  retries = 10;
  #line 2561 
  do_phy_reset = 1;
  #line 2562 
  while (1) {
    {
      #line 2563 
      if (do_phy_reset != 0) {
        #line 2564 
        err = tg3_bmcr_reset(tp);
        #line 2565 
        if (err != 0) 
                      #line 2566 
                      return err;
        #line 2567 
        do_phy_reset = 0;
      }
      #line 2571 
      if (tg3_readphy(tp,16,& reg32) != 0) 
                                           #line 2572 
                                           goto __Cont;
      #line 2574 
      reg32 |= 12288U;
      #line 2575 
      tg3_writephy(tp,16,reg32);
      #line 2578 
      tg3_writephy(tp,0,320U);
      #line 2582 
      if (tg3_readphy(tp,9,& phy9_orig) != 0) 
                                              #line 2583 
                                              goto __Cont;
      #line 2585 
      tg3_writephy(tp,9,6144U);
      #line 2588 
      err = tg3_phy_toggle_auxctl_smdsp(tp,(_Bool)1);
      #line 2589 
      if (err != 0) 
                    #line 2590 
                    return err;
      #line 2593 
      tg3_phydsp_write(tp,32773U,2048U);
      #line 2595 
      err = tg3_phy_write_and_check_testpat(tp,& do_phy_reset);
      #line 2596 
      if (err == 0) 
                    #line 2597 
                    break;
    }
    #line 2562 
    __Cont: 
            #line 2598 
    retries --;
    #line 2598 
    if (! (retries != 0)) 
                          #line 2562 
                          break;
  }
  #line 2600 
  err = tg3_phy_reset_chanpat(tp);
  #line 2601 
  if (err != 0) 
                #line 2602 
                return err;
  #line 2604 
  tg3_phydsp_write(tp,32773U,0U);
  #line 2606 
  tg3_writephy(tp,23,33280U);
  #line 2607 
  tg3_writephy(tp,22,0U);
  #line 2609 
  tg3_phy_toggle_auxctl_smdsp(tp,(_Bool)0);
  #line 2611 
  tg3_writephy(tp,9,phy9_orig);
  #line 2613 
  err = tg3_readphy(tp,16,& reg32);
  #line 2614 
  if (err != 0) 
                #line 2615 
                return err;
  #line 2617 
  reg32 &= 4294955007U;
  #line 2618 
  tg3_writephy(tp,16,reg32);
  #line 2620 
  return 0;
}

#line 2623  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
static void tg3_carrier_off(struct tg3 *tp)
{
  #line 2625 
  netif_carrier_off(tp->dev);
  #line 2626 
  tp->link_up = (_Bool)0;
  #line 2627 
  return;
}

#line 2629  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
static void tg3_warn_mgmt_link_flap(struct tg3 *tp)
{
  #line 2631 
  if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_ENABLE_ASF,
                (unsigned long *)(& tp->tg3_flags)) != 0) 
    #line 2632 
    netdev_warn(tp->dev,(char *)"Management side-band traffic will be interrupted during phy settings change\n");
  #line 2634 
  return;
}

#line 2639  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
static int tg3_phy_reset(struct tg3 *tp)
{
  #line 2641 
  u32 val;
  #line 2641 
  u32 cpmuctrl;
  #line 2642 
  int err;
  #line 2644 
  if (tp->pci_chip_rev_id >> 12 == 12U) {
    #line 2645 
    val = (*(tp->read32))(tp,26628U);
    #line 2646 
    _tw32_flush(tp,26628U,val & 4292870143U,0U);
    #line 2647 
    __const_udelay(171800UL);
  }
  #line 2649 
  err = tg3_readphy(tp,1,& val);
  #line 2650 
  err = tg3_readphy(tp,1,& val) | err;
  #line 2651 
  if (err != 0) 
                #line 2652 
                return -16;
  #line 2654 
  if ((int)netif_running(tp->dev) != 0) 
    #line 2654 
    if ((int)tp->link_up != 0) {
      #line 2655 
      netif_carrier_off(tp->dev);
      #line 2656 
      tg3_link_report(tp);
    }
  #line 2659 
  if ((tp->pci_chip_rev_id >> 12) + 4294967295U <= 2U) {
    #line 2662 
    err = tg3_phy_reset_5703_4_5(tp);
    #line 2663 
    if (err != 0) 
                  #line 2664 
                  return err;
    #line 2665 
    goto out;
  }
  #line 2668 
  cpmuctrl = 0U;
  #line 2669 
  if (tp->pci_chip_rev_id >> 12 == 22404U && tp->pci_chip_rev_id >> 8 != 358464U) {
    #line 2671 
    cpmuctrl = (*(tp->read32))(tp,13824U);
    #line 2672 
    if ((cpmuctrl & 65536U) != 0U) 
                                   #line 2673 
                                   (*(tp->write32))(tp,13824U,cpmuctrl & 4294901759U);
  }
  #line 2677 
  err = tg3_bmcr_reset(tp);
  #line 2678 
  if (err != 0) 
                #line 2679 
                return err;
  #line 2681 
  if ((cpmuctrl & 65536U) != 0U) {
    #line 2682 
    val = 513U;
    #line 2683 
    tg3_phydsp_write(tp,3848U,val);
    #line 2685 
    (*(tp->write32))(tp,13824U,cpmuctrl);
  }
  #line 2688 
  if (tp->pci_chip_rev_id >> 8 == 358464U || tp->pci_chip_rev_id >> 8 == 357904U) {
    #line 2690 
    val = (*(tp->read32))(tp,13836U);
    #line 2691 
    if ((val & 2031616U) == 1114112U) {
      #line 2693 
      val &= 4292935679U;
      #line 2694 
      __const_udelay(171800UL);
      #line 2695 
      _tw32_flush(tp,13836U,val,0U);
    }
  }
  #line 2699 
  if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_5717_PLUS,
                  (unsigned long *)(& tp->tg3_flags)) != 0) 
    #line 2699 
    if ((tp->phy_flags & 32U) != 0U) 
                                     #line 2701 
                                     return 0;
  #line 2703 
  tg3_phy_apply_otp(tp);
  #line 2705 
  if ((tp->phy_flags & 256U) != 0U) 
                                    #line 2706 
                                    tg3_phy_toggle_apd(tp,(_Bool)1); else 
                                                                    #line 2708 
                                                                    tg3_phy_toggle_apd(tp,(_Bool)0);
  #line 2710 
  out: 
       #line 2710 
  ;
  #line 2711 
  if ((tp->phy_flags & 8192U) != 0U) {
    #line 2711 
    if (tg3_phy_toggle_auxctl_smdsp(tp,(_Bool)1) == 0) {
      #line 2713 
      tg3_phydsp_write(tp,8223U,10922U);
      #line 2714 
      tg3_phydsp_write(tp,10U,803U);
      #line 2715 
      tg3_phy_toggle_auxctl_smdsp(tp,(_Bool)0);
    }
  }
  #line 2718 
  if ((tp->phy_flags & 16384U) != 0U) {
    #line 2719 
    tg3_writephy(tp,28,36200U);
    #line 2720 
    tg3_writephy(tp,28,36200U);
  }
  #line 2723 
  if ((tp->phy_flags & 32768U) != 0U) {
    #line 2724 
    if (tg3_phy_toggle_auxctl_smdsp(tp,(_Bool)1) == 0) {
      #line 2725 
      tg3_phydsp_write(tp,10U,12555U);
      #line 2726 
      tg3_phydsp_write(tp,8223U,38150U);
      #line 2727 
      tg3_phydsp_write(tp,16415U,5346U);
      #line 2728 
      tg3_phy_toggle_auxctl_smdsp(tp,(_Bool)0);
    }
  }
  else 
    #line 2730 
    if ((tp->phy_flags & 2048U) != 0U) {
      #line 2731 
      if (tg3_phy_toggle_auxctl_smdsp(tp,(_Bool)1) == 0) {
        #line 2732 
        tg3_writephy(tp,23,10U);
        #line 2733 
        if ((tp->phy_flags & 4096U) != 0U) {
          #line 2734 
          tg3_writephy(tp,21,4363U);
          #line 2735 
          tg3_writephy(tp,30,20U);
        }
        else 
             #line 2738 
             tg3_writephy(tp,21,267U);
        #line 2740 
        tg3_phy_toggle_auxctl_smdsp(tp,(_Bool)0);
      }
    }
  #line 2746 
  if ((tp->phy_id & 4294967280U) == 1610645584U) 
                                                 #line 2748 
                                                 tg3_phy_auxctl_write(tp,0,19488U);
  else {
    #line 2749 
    if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_JUMBO_CAPABLE,
                  (unsigned long *)(& tp->tg3_flags)) != 0) {
      #line 2751 
      err = tg3_phy_auxctl_read(tp,0,& val);
      #line 2753 
      if (err == 0) 
                    #line 2754 
                    tg3_phy_auxctl_write(tp,0,val | 16384U);
    }
  }
  #line 2761 
  if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_JUMBO_CAPABLE,
                  (unsigned long *)(& tp->tg3_flags)) != 0) {
    #line 2762 
    if (tg3_readphy(tp,16,& val) == 0) 
                                       #line 2763 
                                       tg3_writephy(tp,16,val | 1U);
  }
  #line 2767 
  if (tp->pci_chip_rev_id >> 12 == 12U) 
                                        #line 2769 
                                        tg3_writephy(tp,23,18U);
  #line 2772 
  if (tp->pci_chip_rev_id == 91627520U) 
                                        #line 2773 
                                        tg3_phydsp_write(tp,4091U,16384U);
  #line 2775 
  tg3_phy_toggle_automdix(tp,(_Bool)1);
  #line 2776 
  tg3_phy_set_wirespeed(tp);
  #line 2777 
  return 0;
}

#line 2796  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
__inline static u32 tg3_set_function_status(struct tg3 *tp, u32 newstat)
{
  #line 2798 
  u32 status;
  #line 2798 
  u32 shift;
  #line 2800 
  if (tp->pci_chip_rev_id >> 12 == 22295U || tp->pci_chip_rev_id >> 12 == 22297U) 
    #line 2802 
    status = tg3_ape_read32(tp,8U); else 
                                         #line 2804 
                                         status = (*(tp->read32))(tp,13388U);
  #line 2806 
  shift = (unsigned int)((tp->pci_fn + 1) * 4);
  #line 2807 
  status = (unsigned int)(~ (3 << shift)) & status;
  #line 2808 
  status = (newstat << shift) | status;
  #line 2810 
  if (tp->pci_chip_rev_id >> 12 == 22295U || tp->pci_chip_rev_id >> 12 == 22297U) 
    #line 2812 
    tg3_ape_write32(tp,8U,status); else 
                                        #line 2814 
                                        (*(tp->write32))(tp,13388U,status);
  #line 2816 
  return status >> 4;
}

#line 2819  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
__inline static int tg3_pwrsrc_switch_to_vmain(struct tg3 *tp)
{
  #line 2821 
  if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_IS_NIC,
                (unsigned long *)(& tp->tg3_flags)) == 0) 
    #line 2822 
    return 0;
  #line 2824 
  if ((tp->pci_chip_rev_id >> 12 == 22295U || tp->pci_chip_rev_id >> 12 == 22297U) || tp->pci_chip_rev_id >> 12 == 22304U) {
    #line 2827 
    if (tg3_ape_lock(tp,7) != 0) 
                                 #line 2828 
                                 return -5;
    #line 2830 
    tg3_set_function_status(tp,1U);
    #line 2832 
    _tw32_flush(tp,26632U,tp->grc_local_ctrl,100U);
    #line 2835 
    tg3_ape_unlock(tp,7);
  }
  else 
       #line 2837 
       _tw32_flush(tp,26632U,tp->grc_local_ctrl,100U);
  #line 2841 
  return 0;
}

#line 2844  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
static void tg3_pwrsrc_die_with_vmain(struct tg3 *tp)
{
  #line 2846 
  u32 grc_local_ctrl;
  #line 2848 
  if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_IS_NIC,
                (unsigned long *)(& tp->tg3_flags)) == 0) 
    #line 2851 
    return;
  else 
    #line 2848 
    if (tp->pci_chip_rev_id >> 12 == 7U) 
                                         #line 2851 
                                         return;
    else 
      #line 2849 
      if (tp->pci_chip_rev_id >> 12 == 0U) 
                                           #line 2851 
                                           return;
  #line 2853 
  grc_local_ctrl = tp->grc_local_ctrl | 4096U;
  #line 2855 
  _tw32_flush(tp,26632U,grc_local_ctrl | 32768U,100U);
  #line 2859 
  _tw32_flush(tp,26632U,grc_local_ctrl,100U);
  #line 2863 
  _tw32_flush(tp,26632U,grc_local_ctrl | 32768U,100U);
  #line 2864 
  return;
}

#line 2868  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
static void tg3_pwrsrc_switch_to_vaux(struct tg3 *tp)
{
  #line 2870 
  if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_IS_NIC,
                (unsigned long *)(& tp->tg3_flags)) == 0) 
    #line 2871 
    return;
  #line 2873 
  if (tp->pci_chip_rev_id >> 12 == 7U || tp->pci_chip_rev_id >> 12 == 0U) 
    #line 2875 
    _tw32_flush(tp,26632U,tp->grc_local_ctrl | 63488U,100U);
  else 
    #line 2882 
    if ((unsigned int)(tp->pdev)->device == 5761U || (unsigned int)(tp->pdev)->device == 5768U) {
      #line 2885 
      u32 grc_local_ctrl = tp->grc_local_ctrl | 63488U;
      #line 2891 
      _tw32_flush(tp,26632U,grc_local_ctrl,100U);
      #line 2894 
      grc_local_ctrl |= 65536U;
      #line 2895 
      _tw32_flush(tp,26632U,grc_local_ctrl,100U);
      #line 2898 
      grc_local_ctrl &= 4294950911U;
      #line 2899 
      _tw32_flush(tp,26632U,grc_local_ctrl,100U);
    }
    else {
      #line 2902 
      u32 no_gpio2;
      #line 2903 
      u32 grc_local_ctrl_0 = 0U;
      #line 2906 
      if (tp->pci_chip_rev_id >> 12 == 9U) {
        #line 2907 
        grc_local_ctrl_0 |= 64U;
        #line 2908 
        _tw32_flush(tp,26632U,tp->grc_local_ctrl | grc_local_ctrl_0,100U);
      }
      #line 2914 
      no_gpio2 = tp->nic_sram_data_cfg & 1048576U;
      #line 2917 
      grc_local_ctrl_0 |= 112640U;
      #line 2922 
      if (no_gpio2 != 0U) 
                          #line 2923 
                          grc_local_ctrl_0 &= 4294893567U;
      #line 2926 
      _tw32_flush(tp,26632U,tp->grc_local_ctrl | grc_local_ctrl_0,100U);
      #line 2930 
      grc_local_ctrl_0 |= 16384U;
      #line 2932 
      _tw32_flush(tp,26632U,tp->grc_local_ctrl | grc_local_ctrl_0,100U);
      #line 2936 
      if (no_gpio2 == 0U) {
        #line 2937 
        grc_local_ctrl_0 &= 4294901759U;
        #line 2938 
        _tw32_flush(tp,26632U,tp->grc_local_ctrl | grc_local_ctrl_0,100U);
      }
    }
  #line 2941 
  return;
}

#line 2945  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
static void tg3_frob_aux_power_5717(struct tg3 *tp, bool wol_enable)
{
  #line 2947 
  u32 msg = 0U;
  #line 2950 
  if (tg3_ape_lock(tp,7) != 0) 
                               #line 2951 
                               return;
  #line 2953 
  if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_ENABLE_ASF,
                  (unsigned long *)(& tp->tg3_flags)) != 0) 
    #line 2954 
    msg = 2U;
  else {
    #line 2953 
    if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_ENABLE_APE,
                  (unsigned long *)(& tp->tg3_flags)) != 0) 
      #line 2954 
      msg = 2U;
    else 
      #line 2953 
      if ((int)wol_enable != 0) 
                                #line 2954 
                                msg = 2U;
  }
  #line 2956 
  msg = tg3_set_function_status(tp,msg);
  #line 2958 
  if ((msg & 4369U) != 0U) 
                           #line 2959 
                           goto done;
  #line 2961 
  if ((msg & 8738U) != 0U) 
                           #line 2962 
                           tg3_pwrsrc_switch_to_vaux(tp); else 
                                                               #line 2964 
                                                               tg3_pwrsrc_die_with_vmain(tp);
  #line 2966 
  done: 
        #line 2966 
  ;
  #line 2967 
  tg3_ape_unlock(tp,7);
  #line 2968 
  return;
}

#line 2970  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
static void tg3_frob_aux_power(struct tg3 *tp, bool include_wol)
{
  #line 2972 
  bool need_vaux = (_Bool)0;
  #line 2975 
  if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_IS_NIC,
                (unsigned long *)(& tp->tg3_flags)) == 0) 
    #line 2976 
    return;
  else {
    #line 2975 
    if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_57765_CLASS,
                  (unsigned long *)(& tp->tg3_flags)) != 0) 
      #line 2976 
      return;
  }
  #line 2978 
  if ((tp->pci_chip_rev_id >> 12 == 22295U || tp->pci_chip_rev_id >> 12 == 22297U) || tp->pci_chip_rev_id >> 12 == 22304U) {
    #line 2982 
    int tmp_2;
    #line 2982 
    if ((int)include_wol != 0) {
      #line 2982 
      if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_WOL_ENABLE,
                  (unsigned long *)(& tp->tg3_flags)) != 0) 
        #line 2982 
        tmp_2 = 1; else 
                        #line 2982 
                        tmp_2 = 0;
    }
    else 
         #line 2982 
         tmp_2 = 0;
    #line 2981 
    ;
    #line 2981 
    tg3_frob_aux_power_5717(tp,(_Bool)((int)((_Bool)(tmp_2 != 0))));
    #line 2983 
    return;
  }
  #line 2986 
  if (tp->pdev_peer != (struct pci_dev *)0 && tp->pdev_peer != tp->pdev) {
    #line 2987 
    struct net_device *dev_peer;
    #line 2989 
    dev_peer = (struct net_device *)pci_get_drvdata(tp->pdev_peer);
    #line 2992 
    if (dev_peer != (struct net_device *)0) {
      #line 2993 
      struct tg3 *tp_peer = netdev_priv(dev_peer);
      #line 2995 
      if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_INIT_COMPLETE,
                  (unsigned long *)(& tp_peer->tg3_flags)) != 0) 
        #line 2996 
        return;
      #line 2998 
      if ((int)include_wol != 0) {
        #line 2998 
        if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_WOL_ENABLE,
                  (unsigned long *)(& tp_peer->tg3_flags)) != 0) 
          #line 3000 
          need_vaux = (_Bool)1; else 
                                     #line 2998 
                                     goto _LAND;
      }
      else {
        #line 2998 
        _LAND: 
        #line 2998 
        if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_ENABLE_ASF,
                  (unsigned long *)(& tp_peer->tg3_flags)) != 0) 
          #line 3000 
          need_vaux = (_Bool)1;
      }
    }
  }
  #line 3004 
  if ((int)include_wol != 0) {
    #line 3004 
    if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_WOL_ENABLE,
                  (unsigned long *)(& tp->tg3_flags)) != 0) 
      #line 3006 
      need_vaux = (_Bool)1; else 
                                 #line 3004 
                                 goto _LAND_0;
  }
  else {
    #line 3004 
    _LAND_0: 
    #line 3004 
    if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_ENABLE_ASF,
                  (unsigned long *)(& tp->tg3_flags)) != 0) 
      #line 3006 
      need_vaux = (_Bool)1;
  }
  #line 3008 
  if ((int)need_vaux != 0) 
                           #line 3009 
                           tg3_pwrsrc_switch_to_vaux(tp); else 
                                                               #line 3011 
                                                               tg3_pwrsrc_die_with_vmain(tp);
  #line 3012 
  return;
}

#line 3014  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
static int tg3_5700_link_polarity(struct tg3 *tp, u32 speed)
{
  #line 3016 
  if (tp->led_ctrl == 4096U) 
                             #line 3017 
                             return 1;
  else 
    #line 3018 
    if ((tp->phy_id & 4294967280U) == 1610645616U) {
      #line 3019 
      if (speed != 10U) 
                        #line 3020 
                        return 1;
    }
    else 
      #line 3021 
      if (speed == 10U) 
                        #line 3022 
                        return 1;
  #line 3024 
  return 0;
}

#line 3027  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
static bool tg3_phy_power_bug(struct tg3 *tp)
{
  #line 3029 
  switch (tp->pci_chip_rev_id >> 12) {
    #line 3030 
    case (u32)7: 
                 #line 3030 
    ;
    #line 3031 
    case (u32)2: 
                 #line 3031 
    ;
    #line 3032 
    return (_Bool)1;
    #line 3033 
    case (u32)8: 
                 #line 3033 
    ;
    #line 3034 
    if ((tp->phy_flags & 32U) != 0U) 
                                     #line 3035 
                                     return (_Bool)1;
    #line 3036 
    return (_Bool)0;
    #line 3037 
    case (u32)22295: 
                     #line 3037 
    ;
    #line 3038 
    if (tp->pci_fn == 0) 
                         #line 3039 
                         return (_Bool)1;
    #line 3040 
    return (_Bool)0;
    #line 3041 
    case (u32)22297: 
                     #line 3041 
    ;
    #line 3042 
    case (u32)22304: 
                     #line 3042 
    ;
    #line 3043 
    if ((tp->phy_flags & 16U) != 0U && tp->pci_fn == 0) 
                                                        #line 3045 
                                                        return (_Bool)1;
    #line 3046 
    return (_Bool)0;
  }
  #line 3049 
  return (_Bool)0;
}

#line 3052  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
static bool tg3_phy_led_bug(struct tg3 *tp)
{
  #line 3054 
  switch (tp->pci_chip_rev_id >> 12) {
    #line 3055 
    case (u32)22297: 
                     #line 3055 
    ;
    #line 3056 
    case (u32)22304: 
                     #line 3056 
    ;
    #line 3057 
    if ((tp->phy_flags & 32U) != 0U && tp->pci_fn == 0) 
                                                        #line 3059 
                                                        return (_Bool)1;
    #line 3060 
    return (_Bool)0;
  }
  #line 3063 
  return (_Bool)0;
}

#line 3066  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
static void tg3_power_down_phy(struct tg3 *tp, bool do_low_power)
{
  #line 3068 
  u32 val;
  #line 3070 
  if ((tp->phy_flags & 1048576U) != 0U) 
                                        #line 3071 
                                        return;
  #line 3073 
  if ((tp->phy_flags & 16U) != 0U) {
    #line 3074 
    if (tp->pci_chip_rev_id >> 12 == 2U) {
      #line 3075 
      u32 sg_dig_ctrl = (*(tp->read32))(tp,1456U);
      #line 3076 
      u32 serdes_cfg = (*(tp->read32))(tp,1424U);
      #line 3078 
      sg_dig_ctrl |= 3221225472U;
      #line 3080 
      (*(tp->write32))(tp,1456U,sg_dig_ctrl);
      #line 3081 
      (*(tp->write32))(tp,1424U,serdes_cfg | 32768U);
    }
    #line 3083 
    return;
  }
  #line 3086 
  if (tp->pci_chip_rev_id >> 12 == 12U) {
    #line 3087 
    tg3_bmcr_reset(tp);
    #line 3088 
    val = (*(tp->read32))(tp,26628U);
    #line 3089 
    _tw32_flush(tp,26628U,val | 2097152U,0U);
    #line 3090 
    __const_udelay(171800UL);
    #line 3091 
    return;
  }
  else 
    #line 3092 
    if ((tp->phy_flags & 64U) != 0U) {
      #line 3093 
      u32 phytest;
      #line 3094 
      if (tg3_readphy(tp,31,& phytest) == 0) {
        #line 3095 
        u32 phy;
        #line 3097 
        tg3_writephy(tp,4,0U);
        #line 3098 
        tg3_writephy(tp,0,4608U);
        #line 3101 
        tg3_writephy(tp,31,phytest | 128U);
        #line 3103 
        if (tg3_readphy(tp,26,& phy) == 0) {
          #line 3104 
          phy |= 8U;
          #line 3105 
          tg3_writephy(tp,26,phy);
        }
        #line 3109 
        tg3_writephy(tp,31,phytest);
      }
      #line 3111 
      return;
    }
    else 
      #line 3112 
      if ((int)do_low_power != 0) {
        #line 3113 
        if (! tg3_phy_led_bug(tp)) 
                                   #line 3114 
                                   tg3_writephy(tp,16,8U);
        #line 3117 
        val = 432U;
        #line 3120 
        tg3_phy_auxctl_write(tp,2,val);
      }
  #line 3126 
  if ((int)tg3_phy_power_bug(tp) != 0) 
                                       #line 3127 
                                       return;
  #line 3129 
  if (tp->pci_chip_rev_id >> 8 == 358464U || tp->pci_chip_rev_id >> 8 == 357904U) {
    #line 3131 
    val = (*(tp->read32))(tp,13836U);
    #line 3132 
    val &= 4292935679U;
    #line 3133 
    val |= 1114112U;
    #line 3134 
    _tw32_flush(tp,13836U,val,0U);
  }
  #line 3137 
  tg3_writephy(tp,0,2048U);
  #line 3138 
  return;
}

#line 3141  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
static int tg3_nvram_lock(struct tg3 *tp)
{
  #line 3143 
  if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_NVRAM,
                  (unsigned long *)(& tp->tg3_flags)) != 0) {
    #line 3144 
    int i;
    #line 3146 
    if (tp->nvram_lock_cnt == 0) {
      #line 3147 
      (*(tp->write32))(tp,28704U,2U);
      #line 3148 
      i = 0;
      #line 3148 
      while (i <= 7999) {
        {
          #line 3149 
          if (((*(tp->read32))(tp,28704U) & 512U) != 0U) 
                                                         #line 3150 
                                                         break;
          #line 3151 
          __const_udelay(85900UL);
        }
        #line 3148 
        i ++;
      }
      #line 3153 
      if (i == 8000) {
        #line 3154 
        (*(tp->write32))(tp,28704U,32U);
        #line 3155 
        return -19;
      }
    }
    #line 3158 
    (tp->nvram_lock_cnt) ++;
  }
  #line 3160 
  return 0;
}

#line 3164  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
static void tg3_nvram_unlock(struct tg3 *tp)
{
  #line 3166 
  if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_NVRAM,
                (unsigned long *)(& tp->tg3_flags)) != 0) {
    #line 3167 
    if (tp->nvram_lock_cnt > 0) 
                                #line 3168 
                                (tp->nvram_lock_cnt) --;
    #line 3169 
    if (tp->nvram_lock_cnt == 0) 
                                 #line 3170 
                                 _tw32_flush(tp,28704U,32U,0U);
  }
  #line 3172 
  return;
}

#line 3175  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
static void tg3_enable_nvram_access(struct tg3 *tp)
{
  #line 3177 
  if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_5750_PLUS,
                  (unsigned long *)(& tp->tg3_flags)) != 0) {
    #line 3177 
    if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_PROTECTED_NVRAM,
                  (unsigned long *)(& tp->tg3_flags)) == 0) {
      #line 3178 
      u32 nvaccess = (*(tp->read32))(tp,28708U);
      #line 3180 
      (*(tp->write32))(tp,28708U,nvaccess | 1U);
    }
  }
  #line 3182 
  return;
}

#line 3185  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
static void tg3_disable_nvram_access(struct tg3 *tp)
{
  #line 3187 
  if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_5750_PLUS,
                  (unsigned long *)(& tp->tg3_flags)) != 0) {
    #line 3187 
    if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_PROTECTED_NVRAM,
                  (unsigned long *)(& tp->tg3_flags)) == 0) {
      #line 3188 
      u32 nvaccess = (*(tp->read32))(tp,28708U);
      #line 3190 
      (*(tp->write32))(tp,28708U,nvaccess & 4294967294U);
    }
  }
  #line 3192 
  return;
}

#line 3194  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
static int tg3_nvram_read_using_eeprom(struct tg3 *tp, u32 offset, u32 *val)
{
  #line 3197 
  u32 tmp;
  #line 3198 
  int i;
  #line 3200 
  if (offset > 65535U || (offset & 3U) != 0U) 
                                              #line 3201 
                                              return -22;
  #line 3203 
  tmp = (*(tp->read32))(tp,26680U) & 1677656064U;
  #line 3206 
  (*(tp->write32))(tp,26680U,((offset & 65535U) | tmp) | 2181038080U);
  #line 3213 
  i = 0;
  #line 3213 
  while (i <= 999) {
    #line 3214 
    tmp = (*(tp->read32))(tp,26680U);
    #line 3216 
    if ((tmp & 1073741824U) != 0U) 
                                   #line 3217 
                                   break;
    #line 3218 
    msleep(1U);
    #line 3213 
    i ++;
  }
  #line 3220 
  if ((tmp & 1073741824U) == 0U) 
                                 #line 3221 
                                 return -16;
  #line 3223 
  tmp = (*(tp->read32))(tp,26684U);
  #line 3229 
  *val = __builtin_bswap32(tmp);
  #line 3231 
  return 0;
}

#line 3236  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
static int tg3_nvram_exec_cmd(struct tg3 *tp, u32 nvram_cmd)
{
  #line 3238 
  int i;
  #line 3240 
  (*(tp->write32))(tp,28672U,nvram_cmd);
  #line 3241 
  i = 0;
  #line 3241 
  while (i <= 9999) {
    {
      #line 3242 
      usleep_range(10UL,40UL);
      #line 3243 
      if (((*(tp->read32))(tp,28672U) & 8U) != 0U) {
        #line 3244 
        __const_udelay(42950UL);
        #line 3245 
        break;
      }
    }
    #line 3241 
    i ++;
  }
  #line 3249 
  if (i == 10000) 
                  #line 3250 
                  return -16;
  #line 3252 
  return 0;
}

#line 3255  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
static u32 tg3_nvram_phys_addr(struct tg3 *tp, u32 addr)
{
  #line 3257 
  if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_NVRAM,
                (unsigned long *)(& tp->tg3_flags)) != 0) {
    #line 3257 
    if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_NVRAM_BUFFERED,
                  (unsigned long *)(& tp->tg3_flags)) != 0) {
      #line 3258 
      if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_FLASH,
                  (unsigned long *)(& tp->tg3_flags)) != 0) {
        #line 3259 
        if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_NO_NVRAM_ADDR_TRANS,
                  (unsigned long *)(& tp->tg3_flags)) == 0) 
          #line 3260 
          if (tp->nvram_jedecnum == 31U) 
                                         #line 3263 
                                         addr = (addr / tp->nvram_pagesize << 9) + addr % tp->nvram_pagesize;
      }
    }
  }
  #line 3267 
  return addr;
}

#line 3270  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
static u32 tg3_nvram_logical_addr(struct tg3 *tp, u32 addr)
{
  #line 3272 
  if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_NVRAM,
                (unsigned long *)(& tp->tg3_flags)) != 0) {
    #line 3272 
    if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_NVRAM_BUFFERED,
                  (unsigned long *)(& tp->tg3_flags)) != 0) {
      #line 3273 
      if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_FLASH,
                  (unsigned long *)(& tp->tg3_flags)) != 0) {
        #line 3274 
        if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_NO_NVRAM_ADDR_TRANS,
                  (unsigned long *)(& tp->tg3_flags)) == 0) 
          #line 3275 
          if (tp->nvram_jedecnum == 31U) 
                                         #line 3278 
                                         addr = (addr >> 9) * tp->nvram_pagesize + (addr & 511U);
      }
    }
  }
  #line 3282 
  return addr;
}

#line 3291  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
static int tg3_nvram_read(struct tg3 *tp, u32 offset, u32 *val)
{
  #line 3293 
  int ret;
  #line 3295 
  if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_NVRAM,
                  (unsigned long *)(& tp->tg3_flags)) == 0) {
    #line 3296 
    return tg3_nvram_read_using_eeprom(tp,offset,val);
  }
  #line 3298 
  offset = tg3_nvram_phys_addr(tp,offset);
  #line 3300 
  if (offset > 134217727U) 
                           #line 3301 
                           return -22;
  #line 3303 
  ret = tg3_nvram_lock(tp);
  #line 3304 
  if (ret != 0) 
                #line 3305 
                return ret;
  #line 3307 
  tg3_enable_nvram_access(tp);
  #line 3309 
  (*(tp->write32))(tp,28684U,offset);
  #line 3310 
  ret = tg3_nvram_exec_cmd(tp,408U);
  #line 3313 
  if (ret == 0) 
                #line 3314 
                *val = (*(tp->read32))(tp,28688U);
  #line 3316 
  tg3_disable_nvram_access(tp);
  #line 3318 
  tg3_nvram_unlock(tp);
  #line 3320 
  return ret;
}

#line 3324  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
static int tg3_nvram_read_be32(struct tg3 *tp, u32 offset, __be32 *val)
{
  #line 3326 
  u32 v;
  #line 3327 
  int res = tg3_nvram_read(tp,offset,& v);
  #line 3328 
  if (res == 0) 
                #line 3329 
                *val = __builtin_bswap32(v);
  #line 3330 
  return res;
}

#line 3333  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
static int tg3_nvram_write_block_using_eeprom(struct tg3 *tp, u32 offset, u32 len, u8 *buf)
{
  #line 3336 
  int i;
  #line 3336 
  int j;
  #line 3337 
  u32 val;
  #line 3336 
  int rc = 0;
  #line 3339 
  i = 0;
  #line 3339 
  while ((unsigned int)i < len) {
    {
      #line 3340 
      u32 addr;
      #line 3341 
      __be32 data;
      #line 3343 
      addr = offset + (unsigned int)i;
      #line 3345 
      memcpy((void *)(& data),(void *)(buf + (unsigned long)i),4UL);
      #line 3353 
      ;
      #line 3353 
      (*(tp->write32))(tp,26684U,__builtin_bswap32(__builtin_bswap32(data)));
      #line 3355 
      val = (*(tp->read32))(tp,26680U);
      #line 3356 
      (*(tp->write32))(tp,26680U,val | 1073741824U);
      #line 3358 
      val &= 1677656064U;
      #line 3360 
      (*(tp->write32))(tp,26680U,((addr & 65535U) | val) | 33554432U);
      #line 3366 
      j = 0;
      #line 3366 
      while (j <= 999) {
        #line 3367 
        val = (*(tp->read32))(tp,26680U);
        #line 3369 
        if ((val & 1073741824U) != 0U) 
                                       #line 3370 
                                       break;
        #line 3371 
        msleep(1U);
        #line 3366 
        j ++;
      }
      #line 3373 
      if ((val & 1073741824U) == 0U) {
        #line 3374 
        rc = -16;
        #line 3375 
        break;
      }
    }
    #line 3339 
    i += 4;
  }
  #line 3379 
  return rc;
}

#line 3383  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
static int tg3_nvram_write_block_unbuffered(struct tg3 *tp, u32 offset, u32 len, u8 *buf)
{
  #line 3389 
  u32 nvram_cmd;
  #line 3390 
  u8 *tmp;
  #line 3386 
  int ret = 0;
  #line 3387 
  u32 pagesize = tp->nvram_pagesize;
  #line 3388 
  u32 pagemask = pagesize + 4294967295U;
  #line 3392 
  tmp = (u8 *)kmalloc((unsigned long)pagesize,3264U);
  #line 3393 
  if (tmp == (u8 *)0U) 
                       #line 3394 
                       return -12;
  #line 3396 
  while (len != 0U) {
    #line 3397 
    int j;
    #line 3398 
    u32 phy_addr;
    #line 3398 
    u32 page_off;
    #line 3398 
    u32 size;
    #line 3400 
    phy_addr = ~ pagemask & offset;
    #line 3402 
    j = 0;
    #line 3402 
    while ((unsigned int)j < pagesize) {
      #line 3403 
      ret = tg3_nvram_read_be32(tp,phy_addr + (unsigned int)j,(__be32 *)(tmp + (unsigned long)j));
      #line 3405 
      if (ret != 0) 
                    #line 3406 
                    break;
      #line 3402 
      j += 4;
    }
    #line 3408 
    if (ret != 0) 
                  #line 3409 
                  break;
    #line 3411 
    page_off = offset & pagemask;
    #line 3412 
    size = pagesize;
    #line 3413 
    if (len < size) 
                    #line 3414 
                    size = len;
    #line 3416 
    len -= size;
    #line 3418 
    memcpy((void *)(tmp + (unsigned long)page_off),(void *)buf,(unsigned long)size);
    #line 3420 
    offset = (pagesize - page_off) + offset;
    #line 3422 
    tg3_enable_nvram_access(tp);
    #line 3428 
    nvram_cmd = 65560U;
    #line 3430 
    if (tg3_nvram_exec_cmd(tp,nvram_cmd) != 0) 
                                               #line 3431 
                                               break;
    #line 3434 
    (*(tp->write32))(tp,28684U,phy_addr);
    #line 3436 
    nvram_cmd = 504U;
    #line 3439 
    if (tg3_nvram_exec_cmd(tp,nvram_cmd) != 0) 
                                               #line 3440 
                                               break;
    #line 3443 
    nvram_cmd = 65560U;
    #line 3445 
    if (tg3_nvram_exec_cmd(tp,nvram_cmd) != 0) 
                                               #line 3446 
                                               break;
    #line 3448 
    j = 0;
    #line 3448 
    while ((unsigned int)j < pagesize) {
      {
        #line 3449 
        __be32 data;
        #line 3451 
        data = *((__be32 *)(tmp + (unsigned long)j));
        #line 3453 
        ;
        #line 3453 
        (*(tp->write32))(tp,28680U,__builtin_bswap32(data));
        #line 3455 
        (*(tp->write32))(tp,28684U,phy_addr + (unsigned int)j);
        #line 3457 
        nvram_cmd = 56U;
        #line 3460 
        if (j == 0) 
                    #line 3461 
                    nvram_cmd |= 128U;
        else 
          #line 3462 
          if (pagesize + 4294967292U == (unsigned int)j) 
                                                         #line 3463 
                                                         nvram_cmd |= 256U;
        #line 3465 
        ret = tg3_nvram_exec_cmd(tp,nvram_cmd);
        #line 3466 
        if (ret != 0) 
                      #line 3467 
                      break;
      }
      #line 3448 
      j += 4;
    }
    #line 3469 
    if (ret != 0) 
                  #line 3470 
                  break;
  }
  #line 3473 
  nvram_cmd = 131096U;
  #line 3474 
  tg3_nvram_exec_cmd(tp,nvram_cmd);
  #line 3476 
  kfree((void *)tmp);
  #line 3478 
  return ret;
}

#line 3482  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
static int tg3_nvram_write_block_buffered(struct tg3 *tp, u32 offset, u32 len, u8 *buf)
{
  #line 3485 
  int i;
  #line 3485 
  int ret = 0;
  #line 3487 
  i = 0;
  #line 3487 
  while ((unsigned int)i < len) {
    {
      #line 3488 
      u32 page_off;
      #line 3488 
      u32 phy_addr;
      #line 3488 
      u32 nvram_cmd;
      #line 3489 
      __be32 data;
      #line 3491 
      memcpy((void *)(& data),(void *)(buf + (unsigned long)i),4UL);
      #line 3492 
      ;
      #line 3492 
      (*(tp->write32))(tp,28680U,__builtin_bswap32(data));
      #line 3494 
      page_off = offset % tp->nvram_pagesize;
      #line 3496 
      phy_addr = tg3_nvram_phys_addr(tp,offset);
      #line 3498 
      nvram_cmd = 56U;
      #line 3500 
      if (page_off == 0U || i == 0) 
                                    #line 3501 
                                    nvram_cmd |= 128U;
      #line 3502 
      if (tp->nvram_pagesize + 4294967292U == page_off) 
                                                        #line 3503 
                                                        nvram_cmd |= 256U;
      #line 3505 
      if (len + 4294967292U == (unsigned int)i) 
                                                #line 3506 
                                                nvram_cmd |= 256U;
      #line 3508 
      if ((nvram_cmd & 128U) != 0U) 
                                    #line 3511 
                                    (*(tp->write32))(tp,28684U,phy_addr);
      else {
        #line 3508 
        if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_FLASH,
                  (unsigned long *)(& tp->tg3_flags)) == 0) 
          #line 3511 
          (*(tp->write32))(tp,28684U,phy_addr);
        else {
          #line 3509 
          if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_57765_PLUS,
                  (unsigned long *)(& tp->tg3_flags)) == 0) 
            #line 3511 
            (*(tp->write32))(tp,28684U,phy_addr);
        }
      }
      #line 3513 
      if (tp->pci_chip_rev_id >> 12 != 6U) {
        #line 3513 
        if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_5755_PLUS,
                  (unsigned long *)(& tp->tg3_flags)) == 0) 
          #line 3514 
          if (tp->nvram_jedecnum == 32U) 
            #line 3515 
            if ((nvram_cmd & 128U) != 0U) {
              #line 3517 
              u32 cmd;
              #line 3519 
              cmd = 65560U;
              #line 3520 
              ret = tg3_nvram_exec_cmd(tp,cmd);
              #line 3521 
              if (ret != 0) 
                            #line 3522 
                            break;
            }
      }
      #line 3524 
      if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_FLASH,
                  (unsigned long *)(& tp->tg3_flags)) == 0) 
        #line 3526 
        nvram_cmd |= 384U;
      #line 3529 
      ret = tg3_nvram_exec_cmd(tp,nvram_cmd);
      #line 3530 
      if (ret != 0) 
                    #line 3531 
                    break;
    }
    #line 3487 
    i += 4;
    #line 3487 
    offset += 4U;
  }
  #line 3533 
  return ret;
}

#line 3537  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
static int tg3_nvram_write_block(struct tg3 *tp, u32 offset, u32 len, u8 *buf)
{
  #line 3539 
  int ret;
  #line 3541 
  if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_EEPROM_WRITE_PROT,
                (unsigned long *)(& tp->tg3_flags)) != 0) {
    #line 3542 
    _tw32_flush(tp,26632U,tp->grc_local_ctrl & 4294934527U,0U);
    #line 3544 
    __const_udelay(171800UL);
  }
  #line 3547 
  if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_NVRAM,
                  (unsigned long *)(& tp->tg3_flags)) == 0) 
    #line 3548 
    ret = tg3_nvram_write_block_using_eeprom(tp,offset,len,buf);
  else {
    #line 3550 
    u32 grc_mode;
    #line 3552 
    ret = tg3_nvram_lock(tp);
    #line 3553 
    if (ret != 0) 
                  #line 3554 
                  return ret;
    #line 3556 
    tg3_enable_nvram_access(tp);
    #line 3557 
    if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_5750_PLUS,
                  (unsigned long *)(& tp->tg3_flags)) != 0) {
      #line 3557 
      if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_PROTECTED_NVRAM,
                  (unsigned long *)(& tp->tg3_flags)) == 0) 
        #line 3558 
        (*(tp->write32))(tp,28712U,1030U);
    }
    #line 3560 
    grc_mode = (*(tp->read32))(tp,26624U);
    #line 3561 
    (*(tp->write32))(tp,26624U,grc_mode | 2097152U);
    #line 3563 
    if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_NVRAM_BUFFERED,
                  (unsigned long *)(& tp->tg3_flags)) != 0) 
      #line 3563 
      goto _LOR;
    else {
      #line 3563 
      if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_FLASH,
                  (unsigned long *)(& tp->tg3_flags)) == 0) 
        #line 3563 
        _LOR: 
              #line 3564 
              ret = tg3_nvram_write_block_buffered(tp,offset,len,buf); else 
                                                                    #line 3567 
                                                                    ret = tg3_nvram_write_block_unbuffered(tp,offset,len,buf);
    }
    #line 3571 
    grc_mode = (*(tp->read32))(tp,26624U);
    #line 3572 
    (*(tp->write32))(tp,26624U,grc_mode & 4292870143U);
    #line 3574 
    tg3_disable_nvram_access(tp);
    #line 3575 
    tg3_nvram_unlock(tp);
  }
  #line 3578 
  if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_EEPROM_WRITE_PROT,
                  (unsigned long *)(& tp->tg3_flags)) != 0) {
    #line 3579 
    _tw32_flush(tp,26632U,tp->grc_local_ctrl,0U);
    #line 3580 
    __const_udelay(171800UL);
  }
  #line 3583 
  return ret;
}

#line 3592  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
static int tg3_pause_cpu(struct tg3 *tp, u32 cpu_base)
{
  #line 3594 
  int i;
  #line 3606 
  int tmp_1;
  #line 3595 
  int iters = 10000;
  #line 3597 
  i = 0;
  #line 3597 
  while (i <= 9999) {
    {
      #line 3598 
      (*(tp->write32))(tp,cpu_base + 4U,4294967295U);
      #line 3599 
      (*(tp->write32))(tp,cpu_base,1024U);
      #line 3600 
      if (((*(tp->read32))(tp,cpu_base) & 1024U) != 0U) 
                                                        #line 3601 
                                                        break;
      #line 3602 
      if (pci_channel_offline(tp->pdev) != 0) 
                                              #line 3603 
                                              return -16;
    }
    #line 3597 
    i ++;
  }
  #line 3606 
  if (i == 10000) 
                  #line 3606 
                  tmp_1 = -16; else 
                                    #line 3606 
                                    tmp_1 = 0;
  #line 3606 
  return tmp_1;
}

#line 3610  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
static int tg3_rxcpu_pause(struct tg3 *tp)
{
  #line 3612 
  int rc = tg3_pause_cpu(tp,20480U);
  #line 3614 
  (*(tp->write32))(tp,20484U,4294967295U);
  #line 3615 
  _tw32_flush(tp,20480U,1024U,0U);
  #line 3616 
  __const_udelay(42950UL);
  #line 3618 
  return rc;
}

#line 3622  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
static int tg3_txcpu_pause(struct tg3 *tp)
{
  #line 3624 
  return tg3_pause_cpu(tp,21504U);
}

#line 3628  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
static void tg3_resume_cpu(struct tg3 *tp, u32 cpu_base)
{
  #line 3630 
  (*(tp->write32))(tp,cpu_base + 4U,4294967295U);
  #line 3631 
  _tw32_flush(tp,cpu_base,0U,0U);
  #line 3632 
  return;
}

#line 3635  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
static void tg3_rxcpu_resume(struct tg3 *tp)
{
  #line 3637 
  tg3_resume_cpu(tp,20480U);
  #line 3638 
  return;
}

#line 3641  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
static int tg3_halt_cpu(struct tg3 *tp, u32 cpu_base)
{
  #line 3643 
  int rc;
  #line 3645 
  if ((long)(cpu_base == 21504U) != 0L) {
    #line 3645 
    if ((long)(_tg3_flag((enum TG3_FLAGS)TG3_FLAG_5705_PLUS,
                (unsigned long *)(& tp->tg3_flags)) != 0) != 0L) {
      #line 3646 
      ldv_inline_asm();
      #line 3647 
      ldv_inline_asm();
      #line 3648 
      ldv_inline_asm();
      #line 3645 
      ;
    }
  }
  #line 3647 
  if (tp->pci_chip_rev_id >> 12 == 12U) {
    #line 3648 
    u32 val = (*(tp->read32))(tp,26768U);
    #line 3650 
    (*(tp->write32))(tp,26768U,val | 4194304U);
    #line 3651 
    return 0;
  }
  #line 3653 
  if (cpu_base == 20480U) 
                          #line 3654 
                          rc = tg3_rxcpu_pause(tp);
  else {
    #line 3660 
    if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_IS_SSB_CORE,
                  (unsigned long *)(& tp->tg3_flags)) != 0) 
      #line 3661 
      return 0;
    #line 3663 
    rc = tg3_txcpu_pause(tp);
  }
  #line 3666 
  if (rc != 0) {
    #line 3668 
    char *tmp_2;
    #line 3668 
    if (cpu_base == 20480U) 
                            #line 3668 
                            tmp_2 = (char *)"RX"; else 
                                                       #line 3668 
                                                       tmp_2 = (char *)"TX";
    #line 3667 
    ;
    #line 3667 
    netdev_err(tp->dev,(char *)"%s timed out, %s CPU\n",(char *)"tg3_halt_cpu",tmp_2);
    #line 3669 
    return -19;
  }
  #line 3673 
  if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_NVRAM,
                  (unsigned long *)(& tp->tg3_flags)) != 0) 
    #line 3674 
    (*(tp->write32))(tp,28704U,16U);
  #line 3675 
  return 0;
}

#line 3678  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
static int tg3_fw_data_len(struct tg3 *tp, struct tg3_firmware_hdr *fw_hdr)
{
  #line 3681 
  int fw_len;
  #line 3697 
  if (tp->fw_len == 4294967295U) {
    #line 3698 
    fw_len = (int)__builtin_bswap32(fw_hdr->len);
  }
  else 
       #line 3700 
       fw_len = (int)(tp->fw)->size;
  #line 3702 
  return (int)(((unsigned long)fw_len + 18446744073709551604UL) / 4UL);
}

#line 3706  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
static int tg3_load_firmware_cpu(struct tg3 *tp, u32 cpu_base, u32 cpu_scratch_base, int cpu_scratch_size, struct tg3_firmware_hdr *fw_hdr)
{
  #line 3710 
  int err;
  #line 3710 
  int i;
  #line 3711 
  void (*write_op)(struct tg3 *, u32 , u32 );
  #line 3712 
  int total_len = (int)(tp->fw)->size;
  #line 3714 
  if (cpu_base == 21504U) {
    #line 3714 
    if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_5705_PLUS,
                (unsigned long *)(& tp->tg3_flags)) != 0) {
      #line 3715 
      netdev_err(tp->dev,(char *)"%s: Trying to load TX cpu firmware which is 5705\n",(char *)"tg3_load_firmware_cpu");
      #line 3718 
      return -22;
    }
  }
  #line 3721 
  if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_5705_PLUS,
                  (unsigned long *)(& tp->tg3_flags)) != 0) 
    #line 3721 
    if (tp->pci_chip_rev_id >> 12 != 358246U) 
                                              #line 3722 
                                              write_op = & tg3_write_mem; else 
                                                                    #line 3724 
                                                                    write_op = & tg3_write_indirect_reg32;
  else 
       #line 3724 
       write_op = & tg3_write_indirect_reg32;
  #line 3726 
  if (tp->pci_chip_rev_id >> 12 != 358246U) {
    #line 3730 
    int lock_err = tg3_nvram_lock(tp);
    #line 3731 
    err = tg3_halt_cpu(tp,cpu_base);
    #line 3732 
    if (lock_err == 0) 
                       #line 3733 
                       tg3_nvram_unlock(tp);
    #line 3734 
    if (err != 0) 
                  #line 3735 
                  goto out;
    #line 3737 
    i = 0;
    #line 3737 
    while (i < cpu_scratch_size) {
      #line 3738 
      (*write_op)(tp,cpu_scratch_base + (unsigned int)i,0U);
      #line 3737 
      i = (int)((unsigned int)i + 4U);
    }
    #line 3739 
    (*(tp->write32))(tp,cpu_base + 4U,4294967295U);
    #line 3740 
    ;
    #line 3740 
    ;
    #line 3740 
    (*(tp->write32))(tp,cpu_base,(*(tp->read32))(tp,cpu_base) | 1024U);
  }
  else {
    #line 3746 
    total_len = (int)((unsigned int)total_len + 4294967284U);
    #line 3747 
    fw_hdr ++;
  }
  #line 3750 
  while (1) {
    {
      #line 3751 
      u32 *fw_data = (u32 *)(fw_hdr + 1U);
      #line 3752 
      i = 0;
      #line 3752 
      while (1) {
        #line 3752 
        ;
        #line 3752 
        if (! (tg3_fw_data_len(tp,fw_hdr) > i)) 
                                                #line 3752 
                                                break;
        #line 3753 
        ;
        #line 3753 
        ;
        #line 3753 
        (*write_op)(tp,((__builtin_bswap32(fw_hdr->base_addr) & 65535U) + cpu_scratch_base) + (unsigned int)((unsigned long)i) * 4U,__builtin_bswap32(*(fw_data + (unsigned long)i)));
        #line 3752 
        i ++;
      }
      #line 3758 
      total_len = (int)((unsigned int)total_len - __builtin_bswap32(fw_hdr->len));
      #line 3761 
      fw_hdr = (struct tg3_firmware_hdr *)((void *)fw_hdr + (unsigned long)__builtin_bswap32(fw_hdr->len));
    }
    #line 3763 
    if (! (total_len > 0)) 
                           #line 3750 
                           break;
  }
  #line 3765 
  err = 0;
  #line 3767 
  out: 
       #line 3767 
  ;
  #line 3768 
  return err;
}

#line 3772  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
static int tg3_pause_cpu_and_set_pc(struct tg3 *tp, u32 cpu_base, u32 pc)
{
  #line 3774 
  int i;
  #line 3789 
  int tmp_0;
  #line 3775 
  int iters = 5;
  #line 3777 
  (*(tp->write32))(tp,cpu_base + 4U,4294967295U);
  #line 3778 
  _tw32_flush(tp,cpu_base + 28U,pc,0U);
  #line 3780 
  i = 0;
  #line 3780 
  while (i <= 4) {
    {
      #line 3781 
      ;
      #line 3781 
      if ((*(tp->read32))(tp,cpu_base + 28U) == pc) 
                                                    #line 3782 
                                                    break;
      #line 3783 
      (*(tp->write32))(tp,cpu_base + 4U,4294967295U);
      #line 3784 
      (*(tp->write32))(tp,cpu_base,1024U);
      #line 3785 
      _tw32_flush(tp,cpu_base + 28U,pc,0U);
      #line 3786 
      __const_udelay(4295000UL);
    }
    #line 3780 
    i ++;
  }
  #line 3789 
  if (i == 5) 
              #line 3789 
              tmp_0 = -16; else 
                                #line 3789 
                                tmp_0 = 0;
  #line 3789 
  return tmp_0;
}

#line 3793  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
static int tg3_load_5701_a0_firmware_fix(struct tg3 *tp)
{
  #line 3795 
  struct tg3_firmware_hdr *fw_hdr;
  #line 3796 
  int err;
  #line 3798 
  fw_hdr = (struct tg3_firmware_hdr *)(tp->fw)->data;
  #line 3806 
  err = tg3_load_firmware_cpu(tp,20480U,196608U,16384,fw_hdr);
  #line 3809 
  if (err != 0) 
                #line 3810 
                return err;
  #line 3812 
  err = tg3_load_firmware_cpu(tp,21504U,212992U,16384,fw_hdr);
  #line 3815 
  if (err != 0) 
                #line 3816 
                return err;
  #line 3819 
  ;
  #line 3819 
  err = tg3_pause_cpu_and_set_pc(tp,20480U,__builtin_bswap32(fw_hdr->base_addr));
  #line 3821 
  if (err != 0) {
    #line 3822 
    ;
    #line 3822 
    netdev_err(tp->dev,(char *)"%s fails to set RX CPU PC, is %08x ",(char *)"tg3_load_5701_a0_firmware_fix",(*(tp->read32))(tp,20508U),__builtin_bswap32(fw_hdr->base_addr));
    #line 3826 
    return -19;
  }
  #line 3829 
  tg3_rxcpu_resume(tp);
  #line 3831 
  return 0;
}

#line 3834  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
static int tg3_validate_rxcpu_state(struct tg3 *tp)
{
  #line 3837 
  int i;
  #line 3838 
  u32 val;
  #line 3836 
  int iters = 1000;
  #line 3843 
  i = 0;
  #line 3843 
  while (i <= 999) {
    {
      #line 3844 
      if ((*(tp->read32))(tp,20532U) == 81U) 
                                             #line 3845 
                                             break;
      #line 3847 
      __const_udelay(42950UL);
    }
    #line 3843 
    i ++;
  }
  #line 3850 
  if (i == 1000) {
    #line 3851 
    netdev_err(tp->dev,(char *)"Boot code not ready for service patches\n");
    #line 3852 
    return -16;
  }
  #line 3855 
  val = tg3_read_indirect_reg32(tp,261324U);
  #line 3856 
  if ((val & 255U) != 0U) {
    #line 3857 
    netdev_warn(tp->dev,(char *)"Other patches exist. Not downloading EEE patch\n");
    #line 3859 
    return -17;
  }
  #line 3862 
  return 0;
}

#line 3866  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
static void tg3_load_57766_firmware(struct tg3 *tp)
{
  #line 3868 
  struct tg3_firmware_hdr *fw_hdr;
  #line 3870 
  if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_NO_NVRAM,
                (unsigned long *)(& tp->tg3_flags)) == 0) 
    #line 3871 
    return;
  #line 3873 
  if (tg3_validate_rxcpu_state(tp) != 0) 
                                         #line 3874 
                                         return;
  #line 3876 
  if (tp->fw == (struct firmware *)0) 
                                      #line 3877 
                                      return;
  #line 3893 
  fw_hdr = (struct tg3_firmware_hdr *)(tp->fw)->data;
  #line 3894 
  if (__builtin_bswap32(fw_hdr->base_addr) != 196608U) 
                                                       #line 3895 
                                                       return;
  #line 3897 
  if (tg3_rxcpu_pause(tp) != 0) 
                                #line 3898 
                                return;
  #line 3901 
  tg3_load_firmware_cpu(tp,0U,196608U,0,fw_hdr);
  #line 3903 
  tg3_rxcpu_resume(tp);
  #line 3904 
  return;
}

#line 3907  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
static int tg3_load_tso_firmware(struct tg3 *tp)
{
  #line 3909 
  struct tg3_firmware_hdr *fw_hdr;
  #line 3910 
  unsigned long cpu_base;
  #line 3910 
  unsigned long cpu_scratch_base;
  #line 3910 
  unsigned long cpu_scratch_size;
  #line 3911 
  int err;
  #line 3913 
  if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_FW_TSO,
                (unsigned long *)(& tp->tg3_flags)) == 0) 
    #line 3914 
    return 0;
  #line 3916 
  fw_hdr = (struct tg3_firmware_hdr *)(tp->fw)->data;
  #line 3924 
  cpu_scratch_size = (unsigned long)tp->fw_len;
  #line 3926 
  if (tp->pci_chip_rev_id >> 12 == 3U) {
    #line 3927 
    cpu_base = 20480UL;
    #line 3928 
    cpu_scratch_base = 65536UL;
  }
  else {
    #line 3930 
    cpu_base = 21504UL;
    #line 3931 
    cpu_scratch_base = 212992UL;
    #line 3932 
    cpu_scratch_size = 16384UL;
  }
  #line 3935 
  err = tg3_load_firmware_cpu(tp,(unsigned int)cpu_base,(unsigned int)cpu_scratch_base,(int)cpu_scratch_size,fw_hdr);
  #line 3938 
  if (err != 0) 
                #line 3939 
                return err;
  #line 3942 
  ;
  #line 3942 
  ;
  #line 3942 
  err = tg3_pause_cpu_and_set_pc(tp,(unsigned int)cpu_base,__builtin_bswap32(fw_hdr->base_addr));
  #line 3944 
  if (err != 0) {
    #line 3945 
    ;
    #line 3945 
    netdev_err(tp->dev,(char *)"%s fails to set CPU PC, is %08x should be %08x\n",(char *)"tg3_load_tso_firmware",(*(tp->read32))(tp,(unsigned int)cpu_base + 28U),__builtin_bswap32(fw_hdr->base_addr));
    #line 3949 
    return -19;
  }
  #line 3952 
  tg3_resume_cpu(tp,(unsigned int)cpu_base);
  #line 3953 
  return 0;
}

#line 3957  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
static void __tg3_set_one_mac_addr(struct tg3 *tp, u8 *mac_addr, int index)
{
  #line 3959 
  u32 addr_high;
  #line 3959 
  u32 addr_low;
  #line 3961 
  addr_high = (unsigned int)(((int)*mac_addr << 8) | (int)*(mac_addr + 1U));
  #line 3962 
  addr_low = (unsigned int)(((((int)*(mac_addr + 2U) << 24) | ((int)*(mac_addr + 3U) << 16)) | ((int)*(mac_addr + 4U) << 8)) | (int)*(mac_addr + 5U));
  #line 3965 
  if (index <= 3) {
    #line 3966 
    (*(tp->write32))(tp,(unsigned int)((index + 130) * 8),addr_high);
    #line 3967 
    (*(tp->write32))(tp,(unsigned int)(index * 8 + 1044),addr_low);
  }
  else {
    #line 3969 
    index += -4;
    #line 3970 
    (*(tp->write32))(tp,(unsigned int)((index + 166) * 8),addr_high);
    #line 3971 
    (*(tp->write32))(tp,(unsigned int)(index * 8 + 1332),addr_low);
  }
  #line 3973 
  return;
}

#line 3976  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
static void __tg3_set_mac_addr(struct tg3 *tp, bool skip_mac_1)
{
  #line 3978 
  u32 addr_high;
  #line 3979 
  int i;
  #line 3981 
  i = 0;
  #line 3981 
  while (i <= 3) {
    #line 3982 
    if (i == 1 && (int)skip_mac_1 != 0) 
                                        #line 3983 
                                        goto __Cont;
    #line 3984 
    __tg3_set_one_mac_addr(tp,(tp->dev)->dev_addr,i);
    #line 3981 
    __Cont: 
            #line 3981 
    i ++;
  }
  #line 3987 
  if ((tp->pci_chip_rev_id >> 12) + 4294967295U <= 1U) {
    #line 3989 
    i = 4;
    #line 3989 
    while (i <= 15) {
      #line 3990 
      __tg3_set_one_mac_addr(tp,(tp->dev)->dev_addr,i);
      #line 3989 
      i ++;
    }
  }
  #line 3993 
  addr_high = (unsigned int)((((((int)*((tp->dev)->dev_addr) + (int)*((tp->dev)->dev_addr + 1U)) + (int)*((tp->dev)->dev_addr + 2U)) + (int)*((tp->dev)->dev_addr + 3U)) + (int)*((tp->dev)->dev_addr + 4U)) + (int)*((tp->dev)->dev_addr + 5U)) & 1023U;
  #line 4000 
  (*(tp->write32))(tp,1080U,addr_high);
  #line 4001 
  return;
}

#line 4003  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
static void tg3_enable_register_access(struct tg3 *tp)
{
  #line 4009 
  pci_write_config_dword(tp->pdev,104,tp->misc_host_ctrl);
  #line 4011 
  return;
}

#line 4013  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
static int tg3_power_up(struct tg3 *tp)
{
  #line 4015 
  int err;
  #line 4017 
  tg3_enable_register_access(tp);
  #line 4019 
  err = pci_set_power_state(tp->pdev,0);
  #line 4020 
  if (err == 0) 
                #line 4022 
                tg3_pwrsrc_switch_to_vmain(tp); else 
                                                     #line 4024 
                                                     netdev_err(tp->dev,(char *)"Transition to D0 failed\n");
  #line 4027 
  return err;
}

#line 4030 
#line 6075 
static int tg3_setup_phy(struct tg3 *tp, bool force_reset);
#line 4032  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
static int tg3_power_down_prepare(struct tg3 *tp)
{
  #line 4034 
  u32 misc_host_ctrl;
  #line 4035 
  bool device_should_wake;
  #line 4035 
  bool do_low_power;
  #line 4048 
  int tmp_2;
  #line 4037 
  tg3_enable_register_access(tp);
  #line 4040 
  if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_CLKREQ_BUG,
                (unsigned long *)(& tp->tg3_flags)) != 0) 
    #line 4041 
    pcie_capability_set_word(tp->pdev,16,(unsigned short)256);
  #line 4044 
  misc_host_ctrl = (*(tp->read32))(tp,104U);
  #line 4045 
  (*(tp->write32))(tp,104U,misc_host_ctrl | 2U);
  #line 4048 
  if ((int)device_may_wakeup(& (tp->pdev)->dev) != 0) {
    #line 4048 
    if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_WOL_ENABLE,
                  (unsigned long *)(& tp->tg3_flags)) != 0) 
      #line 4048 
      tmp_2 = 1; else 
                      #line 4048 
                      tmp_2 = 0;
  }
  else 
       #line 4048 
       tmp_2 = 0;
  #line 4048 
  device_should_wake = (_Bool)(tmp_2 != 0);
  #line 4051 
  if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_USE_PHYLIB,
                  (unsigned long *)(& tp->tg3_flags)) != 0) {
    #line 4052 
    do_low_power = (_Bool)0;
    #line 4053 
    if ((tp->phy_flags & 2U) != 0U && (tp->phy_flags & 1U) == 0U) {
      #line 4056 
      struct phy_device *phydev;
      #line 4057 
      u32 phyid;
      #line 4055 
      unsigned long advertising[2U] = {0UL};
      #line 4059 
      phydev = mdiobus_get_phy(tp->mdio_bus,(int)tp->phy_addr);
      #line 4061 
      tp->phy_flags |= 1U;
      #line 4063 
      tp->link_config.speed = (unsigned int)phydev->speed;
      #line 4064 
      tp->link_config.duplex = (unsigned char)phydev->duplex;
      #line 4065 
      tp->link_config.autoneg = (unsigned char)phydev->autoneg;
      #line 4066 
      ethtool_convert_link_mode_to_legacy_u32(& tp->link_config.advertising,(unsigned long *)(& phydev->advertising));
      #line 4070 
      linkmode_set_bit(7,(unsigned long *)(& advertising));
      #line 4071 
      linkmode_set_bit(13,(unsigned long *)(& advertising));
      #line 4073 
      linkmode_set_bit(6,(unsigned long *)(& advertising));
      #line 4075 
      linkmode_set_bit(0,(unsigned long *)(& advertising));
      #line 4078 
      if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_ENABLE_ASF,
                  (unsigned long *)(& tp->tg3_flags)) != 0) 
        #line 4078 
        goto _LOR;
      else 
        #line 4078 
        if ((int)device_should_wake != 0) {
          #line 4078 
          _LOR: 
          #line 4079 
          if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_WOL_SPEED_100MB,
                  (unsigned long *)(& tp->tg3_flags)) != 0) {
            #line 4080 
            linkmode_set_bit(2,(unsigned long *)(& advertising));
            #line 4082 
            linkmode_set_bit(3,(unsigned long *)(& advertising));
            #line 4084 
            linkmode_set_bit(1,(unsigned long *)(& advertising));
          }
          else 
               #line 4087 
               linkmode_set_bit(1,(unsigned long *)(& advertising));
        }
      #line 4092 
      linkmode_copy((unsigned long *)(& phydev->advertising),(unsigned long *)(& advertising));
      #line 4093 
      phy_start_aneg(phydev);
      #line 4095 
      phyid = (phydev->drv)->phy_id & (phydev->drv)->phy_id_mask;
      #line 4096 
      if (phyid != 21216368U) {
        #line 4097 
        phyid &= 4294966272U;
        #line 4098 
        if ((phyid == 2121728U || phyid == 21216256U) || phyid == 56777728U) 
          #line 4101 
          do_low_power = (_Bool)1;
      }
    }
  }
  else {
    #line 4105 
    do_low_power = (_Bool)1;
    #line 4107 
    if ((tp->phy_flags & 1U) == 0U) 
                                    #line 4108 
                                    tp->phy_flags |= 1U;
    #line 4110 
    if ((tp->phy_flags & 48U) == 0U) 
                                     #line 4111 
                                     tg3_setup_phy(tp,(_Bool)0);
  }
  #line 4114 
  if (tp->pci_chip_rev_id >> 12 == 12U) {
    #line 4115 
    u32 val;
    #line 4117 
    val = (*(tp->read32))(tp,26768U);
    #line 4118 
    (*(tp->write32))(tp,26768U,val | 536870912U);
  }
  else {
    #line 4119 
    if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_ENABLE_ASF,
                  (unsigned long *)(& tp->tg3_flags)) == 0) {
      #line 4120 
      int i;
      #line 4121 
      u32 val_0;
      #line 4123 
      i = 0;
      #line 4123 
      while (i <= 199) {
        #line 4124 
        tg3_read_mem(tp,3072U,& val_0);
        #line 4125 
        if (val_0 == 3030026667U) 
                                  #line 4126 
                                  break;
        #line 4127 
        msleep(1U);
        #line 4123 
        i ++;
      }
    }
  }
  #line 4130 
  if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_WOL_CAP,
                  (unsigned long *)(& tp->tg3_flags)) != 0) 
    #line 4131 
    tg3_write_mem(tp,3376U,1196163079U);
  #line 4136 
  if ((int)device_should_wake != 0) {
    #line 4137 
    u32 mac_mode;
    #line 4139 
    if ((tp->phy_flags & 16U) == 0U) {
      #line 4140 
      if ((int)do_low_power != 0 && (tp->phy_flags & 64U) == 0U) {
        #line 4142 
        tg3_phy_auxctl_write(tp,2,88U);
        #line 4147 
        __const_udelay(171800UL);
      }
      #line 4150 
      if ((tp->phy_flags & 32U) != 0U) 
                                       #line 4151 
                                       mac_mode = 8U;
      else 
        #line 4152 
        if ((tp->phy_flags & 1048576U) != 0U) 
          #line 4154 
          if (tp->link_config.active_speed == 1000U) 
                                                     #line 4155 
                                                     mac_mode = 8U; else 
                                                                    #line 4157 
                                                                    mac_mode = 4U;
        else 
             #line 4159 
             mac_mode = 4U;
      #line 4161 
      mac_mode = (tp->mac_mode & 1024U) | mac_mode;
      #line 4162 
      if (tp->pci_chip_rev_id >> 12 == 7U) {
        #line 4163 
        unsigned int tmp_9;
        #line 4163 
        if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_WOL_SPEED_100MB,
                  (unsigned long *)(& tp->tg3_flags)) != 0) 
          #line 4163 
          tmp_9 = 100U; else 
                             #line 4163 
                             tmp_9 = 10U;
        #line 4163 
        u32 speed = tmp_9;
        #line 4165 
        if (tg3_5700_link_polarity(tp,speed) != 0) 
                                                   #line 4166 
                                                   mac_mode |= 1024U; else 
                                                                    #line 4168 
                                                                    mac_mode &= 4294966271U;
      }
    }
    else 
         #line 4171 
         mac_mode = 12U;
    #line 4174 
    if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_5750_PLUS,
                   (unsigned long *)(& tp->tg3_flags)) == 0) 
      #line 4175 
      (*(tp->write32))(tp,1036U,tp->led_ctrl);
    #line 4177 
    mac_mode |= 262144U;
    #line 4178 
    if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_5705_PLUS,
                   (unsigned long *)(& tp->tg3_flags)) != 0) {
      #line 4178 
      if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_5780_CLASS,
                   (unsigned long *)(& tp->tg3_flags)) == 0) {
        #line 4178 
        if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_ENABLE_ASF,
                   (unsigned long *)(& tp->tg3_flags)) != 0) 
          #line 4180 
          mac_mode |= 16777216U;
        else {
          #line 4179 
          if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_ENABLE_APE,
                   (unsigned long *)(& tp->tg3_flags)) != 0) 
            #line 4180 
            mac_mode |= 16777216U;
        }
      }
    }
    #line 4182 
    if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_ENABLE_APE,
                   (unsigned long *)(& tp->tg3_flags)) != 0) 
      #line 4183 
      mac_mode |= 404750336U;
    #line 4187 
    _tw32_flush(tp,1024U,mac_mode,0U);
    #line 4188 
    __const_udelay(429500UL);
    #line 4190 
    _tw32_flush(tp,1128U,2U,0U);
    #line 4191 
    __const_udelay(42950UL);
  }
  #line 4194 
  if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_WOL_SPEED_100MB,
                   (unsigned long *)(& tp->tg3_flags)) == 0) {
    #line 4194 
    if (tp->pci_chip_rev_id >> 12 == 7U || tp->pci_chip_rev_id >> 12 == 0U) {
      #line 4197 
      u32 base_val;
      #line 4199 
      base_val = tp->pci_clock_ctrl;
      #line 4200 
      base_val |= 3072U;
      #line 4203 
      _tw32_flush(tp,116U,base_val | 36864U,40U);
    }
    else 
         #line 4194 
         goto _LAND;
  }
  else {
    #line 4194 
    _LAND: 
    #line 4205 
    if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_5780_CLASS,
                   (unsigned long *)(& tp->tg3_flags)) != 0) 
      #line 4205 
      goto _LOR_1;
    else {
      #line 4205 
      if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_CPMU_PRESENT,
                   (unsigned long *)(& tp->tg3_flags)) != 0) 
        #line 4205 
        goto _LOR_1;
      else 
        #line 4206 
        if (tp->pci_chip_rev_id >> 12 == 12U) 
                                              #line 4205 
                                              _LOR_1: ;
        else {
          #line 4209 
          if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_5750_PLUS,
                   (unsigned long *)(& tp->tg3_flags)) == 0) 
            #line 4209 
            goto _LOR_0;
          else {
            #line 4209 
            if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_ENABLE_ASF,
                   (unsigned long *)(& tp->tg3_flags)) == 0) {
              #line 4209 
              _LOR_0: {
                        #line 4210 
                        u32 newbits1;
                        #line 4210 
                        u32 newbits2;
                        #line 4212 
                        if (tp->pci_chip_rev_id >> 12 == 7U || tp->pci_chip_rev_id >> 12 == 0U) {
                          #line 4214 
                          newbits1 = 7168U;
                          #line 4217 
                          newbits2 = newbits1 | 262144U;
                        }
                        else {
                          #line 4218 
                          if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_5705_PLUS,
                   (unsigned long *)(& tp->tg3_flags)) != 0) {
                            #line 4219 
                            newbits1 = 1048576U;
                            #line 4220 
                            newbits2 = newbits1 | 4096U;
                          }
                          else {
                            #line 4222 
                            newbits1 = 4096U;
                            #line 4223 
                            newbits2 = newbits1 | 262144U;
                          }
                        }
                        #line 4226 
                        _tw32_flush(tp,116U,tp->pci_clock_ctrl | newbits1,40U);
                        #line 4229 
                        _tw32_flush(tp,116U,tp->pci_clock_ctrl | newbits2,40U);
                        #line 4232 
                        if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_5705_PLUS,
                   (unsigned long *)(& tp->tg3_flags)) == 0) {
                          #line 4233 
                          u32 newbits3;
                          #line 4235 
                          if (tp->pci_chip_rev_id >> 12 == 7U || tp->pci_chip_rev_id >> 12 == 0U) 
                            #line 4237 
                            newbits3 = 265216U; else 
                                                     #line 4241 
                                                     newbits3 = 262144U;
                          #line 4244 
                          _tw32_flush(tp,116U,tp->pci_clock_ctrl | newbits3,40U);
                        }
                      }
            }
          }
        }
    }
  }
  #line 4249 
  if (! device_should_wake) {
    #line 4249 
    if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_ENABLE_ASF,
                   (unsigned long *)(& tp->tg3_flags)) == 0) 
      #line 4250 
      tg3_power_down_phy(tp,(_Bool)((bool)((int)do_low_power) != 0));
  }
  #line 4252 
  tg3_frob_aux_power(tp,(_Bool)1);
  #line 4255 
  if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_IS_SSB_CORE,
                   (unsigned long *)(& tp->tg3_flags)) == 0) 
    #line 4255 
    if ((tp->pci_chip_rev_id >> 8) + 4294967232U <= 1U) {
      #line 4258 
      u32 val_1 = (*(tp->read32))(tp,32000U);
      #line 4260 
      val_1 &= 4294901736U;
      #line 4261 
      (*(tp->write32))(tp,32000U,val_1);
      #line 4262 
      if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_ENABLE_ASF,
                   (unsigned long *)(& tp->tg3_flags)) == 0) {
        #line 4263 
        int err;
        #line 4265 
        err = tg3_nvram_lock(tp);
        #line 4266 
        tg3_halt_cpu(tp,20480U);
        #line 4267 
        if (err == 0) 
                      #line 4268 
                      tg3_nvram_unlock(tp);
      }
    }
  #line 4272 
  tg3_write_sig_post_reset(tp,0);
  #line 4274 
  tg3_ape_driver_state_change(tp,0);
  #line 4276 
  return 0;
}

#line 4279  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
static void tg3_power_down(struct tg3 *tp)
{
  #line 4281 
  ;
  #line 4281 
  pci_wake_from_d3(tp->pdev,(_Bool)(_tg3_flag((enum TG3_FLAGS)TG3_FLAG_WOL_ENABLE,
                (unsigned long *)(& tp->tg3_flags)) != 0));
  #line 4282 
  pci_set_power_state(tp->pdev,3);
  #line 4283 
  return;
}

#line 4285  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
static void tg3_aux_stat_to_speed_duplex(struct tg3 *tp, u32 val, u32 *speed, u8 *duplex)
{
  #line 4287 
  switch (val & 1792U) {
    #line 4288 
    case (unsigned int)256: 
                            #line 4288 
    ;
    #line 4289 
    *speed = 10U;
    #line 4290 
    *duplex = (unsigned char)0U;
    #line 4291 
    break;
    #line 4293 
    case (unsigned int)512: 
                            #line 4293 
    ;
    #line 4294 
    *speed = 10U;
    #line 4295 
    *duplex = (unsigned char)1U;
    #line 4296 
    break;
    #line 4298 
    case (unsigned int)768: 
                            #line 4298 
    ;
    #line 4299 
    *speed = 100U;
    #line 4300 
    *duplex = (unsigned char)0U;
    #line 4301 
    break;
    #line 4303 
    case (unsigned int)1280: 
                             #line 4303 
    ;
    #line 4304 
    *speed = 100U;
    #line 4305 
    *duplex = (unsigned char)1U;
    #line 4306 
    break;
    #line 4308 
    case (unsigned int)1536: 
                             #line 4308 
    ;
    #line 4309 
    *speed = 1000U;
    #line 4310 
    *duplex = (unsigned char)0U;
    #line 4311 
    break;
    #line 4313 
    case (unsigned int)1792: 
                             #line 4313 
    ;
    #line 4314 
    *speed = 1000U;
    #line 4315 
    *duplex = (unsigned char)1U;
    #line 4316 
    break;
    #line 4318 
    default: 
             #line 4318 
    ;
    #line 4319 
    if ((tp->phy_flags & 64U) != 0U) {
      #line 4320 
      if ((val & 8U) != 0U) 
                            #line 4320 
                            *speed = 100U; else 
                                                #line 4320 
                                                *speed = 10U;
      #line 4322 
      *duplex = (unsigned char)((unsigned int)((unsigned char)val) & 1U);
      #line 4324 
      break;
    }
    #line 4326 
    *speed = 4294967295U;
    #line 4327 
    *duplex = (unsigned char)255U;
    #line 4328 
    break;
  }
  #line 4330 
  return;
}

#line 4332  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
static int tg3_phy_autoneg_cfg(struct tg3 *tp, u32 advertise, u32 flowctrl)
{
  #line 4335 
  u32 val;
  #line 4335 
  u32 new_adv;
  #line 4334 
  int err = 0;
  #line 4337 
  new_adv = 1U;
  #line 4338 
  new_adv = (ethtool_adv_to_mii_adv_t(advertise) & 480U) | new_adv;
  #line 4339 
  new_adv = (unsigned int)mii_advertise_flowctrl((int)flowctrl) | new_adv;
  #line 4341 
  err = tg3_writephy(tp,4,new_adv);
  #line 4342 
  if (err != 0) 
                #line 4343 
                goto done;
  #line 4345 
  if ((tp->phy_flags & 128U) == 0U) {
    #line 4346 
    new_adv = ethtool_adv_to_mii_ctrl1000_t(advertise);
    #line 4348 
    if (tp->pci_chip_rev_id == 0U || tp->pci_chip_rev_id == 256U) 
                                                                  #line 4350 
                                                                  new_adv |= 6144U;
    #line 4352 
    err = tg3_writephy(tp,9,new_adv);
    #line 4353 
    if (err != 0) 
                  #line 4354 
                  goto done;
  }
  #line 4357 
  if ((tp->phy_flags & 262144U) == 0U) 
                                       #line 4358 
                                       goto done;
  #line 4360 
  ;
  #line 4360 
  (*(tp->write32))(tp,14000U,(*(tp->read32))(tp,14000U) & 4294967167U);
  #line 4363 
  err = tg3_phy_toggle_auxctl_smdsp(tp,(_Bool)1);
  #line 4364 
  if (err == 0) {
    #line 4365 
    u32 err2;
    #line 4367 
    val = 0U;
    #line 4369 
    if (((unsigned long)advertise & 8UL) != 0UL) 
                                                 #line 4370 
                                                 val |= 2U;
    #line 4372 
    if (((unsigned long)advertise & 32UL) != 0UL) 
                                                  #line 4373 
                                                  val |= 4U;
    #line 4375 
    if (tp->eee.eee_enabled == 0U) {
      #line 4376 
      val = 0U;
      #line 4377 
      tp->eee.advertised = 0U;
    }
    else 
         #line 4379 
         tp->eee.advertised = advertise & 40U;
    #line 4384 
    err = tg3_phy_cl45_write(tp,7U,60U,val);
    #line 4385 
    if (err != 0) 
                  #line 4386 
                  val = 0U;
    #line 4388 
    switch (tp->pci_chip_rev_id >> 12) {
      #line 4389 
      case (u32)22295: 
                       #line 4389 
      ;
      #line 4390 
      case (u32)358277: 
                        #line 4390 
      ;
      #line 4391 
      case (u32)358246: 
                        #line 4391 
      ;
      #line 4392 
      case (u32)22297: 
                       #line 4392 
      ;
      #line 4394 
      if (val != 0U) 
                     #line 4395 
                     val = 7U;
      #line 4398 
      tg3_phydsp_write(tp,26U,val);
      #line 4400 
      case (u32)22304: 
                       #line 4400 
      ;
      #line 4401 
      case (u32)22370: 
                       #line 4401 
      ;
      #line 4402 
      if (tg3_phydsp_read(tp,16418U,& val) == 0) 
                                                 #line 4403 
                                                 tg3_phydsp_write(tp,16418U,val | 511U);
    }
    #line 4407 
    err2 = (unsigned int)tg3_phy_toggle_auxctl_smdsp(tp,(_Bool)0);
    #line 4408 
    if (err == 0) 
                  #line 4409 
                  err = (int)err2;
  }
  #line 4412 
  done: 
        #line 4412 
  ;
  #line 4413 
  return err;
}

#line 4416  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
static void tg3_phy_copper_begin(struct tg3 *tp)
{
  #line 4418 
  if ((unsigned int)tp->link_config.autoneg == 1U || (tp->phy_flags & 1U) != 0U) {
    #line 4420 
    u32 adv;
    #line 4420 
    u32 fc;
    #line 4422 
    if ((tp->phy_flags & 1U) != 0U && (tp->phy_flags & 1048576U) == 0U) {
      #line 4424 
      adv = 3U;
      #line 4426 
      if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_WOL_SPEED_100MB,
                (unsigned long *)(& tp->tg3_flags)) != 0) 
        #line 4427 
        adv |= 12U;
      #line 4429 
      if ((tp->phy_flags & 524288U) != 0U) {
        #line 4430 
        if ((tp->phy_flags & 4194304U) == 0U) 
                                              #line 4432 
                                              adv |= 16U;
        #line 4433 
        adv |= 32U;
      }
      #line 4436 
      fc = 3U;
    }
    else {
      #line 4438 
      adv = tp->link_config.advertising;
      #line 4439 
      if ((tp->phy_flags & 128U) != 0U) 
                                        #line 4440 
                                        adv &= 4294967247U;
      #line 4443 
      fc = (unsigned int)tp->link_config.flowctrl;
    }
    #line 4446 
    tg3_phy_autoneg_cfg(tp,adv,fc);
    #line 4448 
    if ((tp->phy_flags & 1U) != 0U && (tp->phy_flags & 1048576U) != 0U) 
      #line 4454 
      return;
    #line 4457 
    tg3_writephy(tp,0,4608U);
  }
  else {
    #line 4460 
    int i;
    #line 4461 
    u32 bmcr;
    #line 4461 
    u32 orig_bmcr;
    #line 4463 
    tp->link_config.active_speed = tp->link_config.speed;
    #line 4464 
    tp->link_config.active_duplex = tp->link_config.duplex;
    #line 4466 
    if (tp->pci_chip_rev_id >> 12 == 9U) 
                                         #line 4471 
                                         tg3_writephy(tp,4,480U);
    #line 4474 
    bmcr = 0U;
    #line 4475 
    switch (tp->link_config.speed) {
      #line 4476 
      default: 
               #line 4476 
      ;
      #line 4477 
      case (u32)10: 
                    #line 4477 
      ;
      #line 4478 
      break;
      #line 4480 
      case (u32)100: 
                     #line 4480 
      ;
      #line 4481 
      bmcr |= 8192U;
      #line 4482 
      break;
      #line 4484 
      case (u32)1000: 
                      #line 4484 
      ;
      #line 4485 
      bmcr |= 64U;
      #line 4486 
      break;
    }
    #line 4489 
    if ((unsigned int)tp->link_config.duplex == 1U) 
                                                    #line 4490 
                                                    bmcr |= 256U;
    #line 4492 
    if (tg3_readphy(tp,0,& orig_bmcr) == 0) 
      #line 4492 
      if (bmcr != orig_bmcr) {
        #line 4494 
        tg3_writephy(tp,0,16384U);
        #line 4495 
        i = 0;
        #line 4495 
        while (i <= 1499) {
          {
            #line 4496 
            u32 tmp_0;
            #line 4498 
            __const_udelay(42950UL);
            #line 4499 
            if (tg3_readphy(tp,1,& tmp_0) != 0) 
                                                #line 4501 
                                                goto __Cont;
            else {
              #line 4499 
              if (tg3_readphy(tp,1,& tmp_0) != 0) 
                                                  #line 4501 
                                                  goto __Cont;
            }
            #line 4502 
            if ((tmp_0 & 4U) == 0U) {
              #line 4503 
              __const_udelay(171800UL);
              #line 4504 
              break;
            }
          }
          #line 4495 
          __Cont: 
                  #line 4495 
          i ++;
        }
        #line 4507 
        tg3_writephy(tp,0,bmcr);
        #line 4508 
        __const_udelay(171800UL);
      }
  }
  #line 4512 
  return;
}

#line 4513  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
static int tg3_phy_pull_config(struct tg3 *tp)
{
  #line 4515 
  int err;
  #line 4516 
  u32 val;
  #line 4518 
  err = tg3_readphy(tp,0,& val);
  #line 4519 
  if (err != 0) 
                #line 4520 
                goto done;
  #line 4522 
  if ((val & 4096U) == 0U) {
    #line 4523 
    tp->link_config.autoneg = (unsigned char)0U;
    #line 4524 
    tp->link_config.advertising = 0U;
    #line 4525 
    _tg3_flag_clear((enum TG3_FLAGS)TG3_FLAG_PAUSE_AUTONEG,(unsigned long *)(& tp->tg3_flags));
    #line 4527 
    err = -5;
    #line 4529 
    switch (val & 8256U) {
      #line 4530 
      case (unsigned int)0: 
                            #line 4530 
      ;
      #line 4531 
      if ((tp->phy_flags & 48U) != 0U) 
                                       #line 4532 
                                       goto done;
      #line 4534 
      tp->link_config.speed = 10U;
      #line 4535 
      break;
      #line 4536 
      case (unsigned int)8192: 
                               #line 4536 
      ;
      #line 4537 
      if ((tp->phy_flags & 48U) != 0U) 
                                       #line 4538 
                                       goto done;
      #line 4540 
      tp->link_config.speed = 100U;
      #line 4541 
      break;
      #line 4542 
      case (unsigned int)64: 
                             #line 4542 
      ;
      #line 4543 
      if ((tp->phy_flags & 128U) == 0U) {
        #line 4544 
        tp->link_config.speed = 1000U;
        #line 4545 
        break;
      }
      #line 4548 
      default: 
               #line 4548 
      ;
      #line 4549 
      goto done;
    }
    #line 4552 
    if ((val & 256U) != 0U) 
                            #line 4553 
                            tp->link_config.duplex = (unsigned char)1U; else 
                                                                    #line 4555 
                                                                    tp->link_config.duplex = (unsigned char)0U;
    #line 4557 
    tp->link_config.flowctrl = (unsigned char)3U;
    #line 4559 
    err = 0;
    #line 4560 
    goto done;
  }
  #line 4563 
  tp->link_config.autoneg = (unsigned char)1U;
  #line 4564 
  tp->link_config.advertising = 64U;
  #line 4565 
  _tg3_flag_set((enum TG3_FLAGS)TG3_FLAG_PAUSE_AUTONEG,(unsigned long *)(& tp->tg3_flags));
  #line 4567 
  if ((tp->phy_flags & 48U) == 0U) {
    #line 4568 
    u32 adv;
    #line 4570 
    err = tg3_readphy(tp,4,& val);
    #line 4571 
    if (err != 0) 
                  #line 4572 
                  goto done;
    #line 4574 
    adv = mii_adv_to_ethtool_adv_t(val & 480U);
    #line 4575 
    tp->link_config.advertising = (tp->link_config.advertising | adv) | 128U;
    #line 4577 
    tp->link_config.flowctrl = (unsigned char)tg3_decode_flowctrl_1000T(val);
  }
  else 
       #line 4579 
       tp->link_config.advertising |= 1024U;
  #line 4582 
  if ((tp->phy_flags & 128U) == 0U) {
    #line 4583 
    u32 adv_0;
    #line 4585 
    if ((tp->phy_flags & 48U) == 0U) {
      #line 4586 
      err = tg3_readphy(tp,9,& val);
      #line 4587 
      if (err != 0) 
                    #line 4588 
                    goto done;
      #line 4590 
      adv_0 = mii_ctrl1000_to_ethtool_adv_t(val);
    }
    else {
      #line 4592 
      err = tg3_readphy(tp,4,& val);
      #line 4593 
      if (err != 0) 
                    #line 4594 
                    goto done;
      #line 4596 
      adv_0 = tg3_decode_flowctrl_1000X(val);
      #line 4597 
      tp->link_config.flowctrl = (unsigned char)adv_0;
      #line 4599 
      val &= 96U;
      #line 4600 
      adv_0 = mii_adv_to_ethtool_adv_x(val);
    }
    #line 4603 
    tp->link_config.advertising |= adv_0;
  }
  #line 4606 
  done: 
        #line 4606 
  ;
  #line 4607 
  return err;
}

#line 4610  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
static int tg3_init_5401phy_dsp(struct tg3 *tp)
{
  #line 4612 
  int err;
  #line 4616 
  err = tg3_phy_auxctl_write(tp,0,19488U);
  #line 4618 
  err = tg3_phydsp_write(tp,18U,6148U) | err;
  #line 4619 
  err = tg3_phydsp_write(tp,19U,4612U) | err;
  #line 4620 
  err = tg3_phydsp_write(tp,32774U,306U) | err;
  #line 4621 
  err = tg3_phydsp_write(tp,32774U,562U) | err;
  #line 4622 
  err = tg3_phydsp_write(tp,8223U,2592U) | err;
  #line 4624 
  __const_udelay(171800UL);
  #line 4626 
  return err;
}

#line 4629  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
static bool tg3_phy_eee_config_ok(struct tg3 *tp)
{
  #line 4631 
  struct ethtool_eee eee;
  #line 4633 
  if ((tp->phy_flags & 262144U) == 0U) 
                                       #line 4634 
                                       return (_Bool)1;
  #line 4636 
  tg3_eee_pull_config(tp,& eee);
  #line 4638 
  if (tp->eee.eee_enabled != 0U) {
    #line 4639 
    if ((tp->eee.advertised != eee.advertised || tp->eee.tx_lpi_timer != eee.tx_lpi_timer) || tp->eee.tx_lpi_enabled != eee.tx_lpi_enabled) 
      #line 4642 
      return (_Bool)0;
  }
  else 
    #line 4645 
    if (eee.advertised != 0U) 
                              #line 4646 
                              return (_Bool)0;
  #line 4649 
  return (_Bool)1;
}

#line 4652  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
static bool tg3_phy_copper_an_config_ok(struct tg3 *tp, u32 *lcladv)
{
  #line 4654 
  u32 advmsk;
  #line 4654 
  u32 tgtadv;
  #line 4654 
  u32 advertising;
  #line 4656 
  advertising = tp->link_config.advertising;
  #line 4657 
  tgtadv = ethtool_adv_to_mii_adv_t(advertising) & 480U;
  #line 4659 
  advmsk = 480U;
  #line 4660 
  if ((unsigned int)tp->link_config.active_duplex == 1U) {
    #line 4661 
    tgtadv = (unsigned int)mii_advertise_flowctrl((int)tp->link_config.flowctrl) | tgtadv;
    #line 4662 
    advmsk |= 3072U;
  }
  #line 4665 
  if (tg3_readphy(tp,4,lcladv) != 0) 
                                     #line 4666 
                                     return (_Bool)0;
  #line 4668 
  if ((*lcladv & advmsk) != tgtadv) 
                                    #line 4669 
                                    return (_Bool)0;
  #line 4671 
  if ((tp->phy_flags & 128U) == 0U) {
    #line 4672 
    u32 tg3_ctrl;
    #line 4674 
    tgtadv = ethtool_adv_to_mii_ctrl1000_t(advertising);
    #line 4676 
    if (tg3_readphy(tp,9,& tg3_ctrl) != 0) 
                                           #line 4677 
                                           return (_Bool)0;
    #line 4679 
    if (tgtadv != 0U && (tp->pci_chip_rev_id == 0U || tp->pci_chip_rev_id == 256U)) {
      #line 4682 
      tgtadv |= 6144U;
      #line 4683 
      tg3_ctrl &= 6912U;
    }
    else 
         #line 4686 
         tg3_ctrl &= 768U;
    #line 4689 
    if (tg3_ctrl != tgtadv) 
                            #line 4690 
                            return (_Bool)0;
  }
  #line 4693 
  return (_Bool)1;
}

#line 4696  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
static bool tg3_phy_copper_fetch_rmtadv(struct tg3 *tp, u32 *rmtadv)
{
  #line 4698 
  u32 lpeth = 0U;
  #line 4700 
  if ((tp->phy_flags & 128U) == 0U) {
    #line 4701 
    u32 val;
    #line 4703 
    if (tg3_readphy(tp,10,& val) != 0) 
                                       #line 4704 
                                       return (_Bool)0;
    #line 4706 
    lpeth = mii_stat1000_to_ethtool_lpa_t(val);
  }
  #line 4709 
  if (tg3_readphy(tp,5,rmtadv) != 0) 
                                     #line 4710 
                                     return (_Bool)0;
  #line 4712 
  lpeth = mii_lpa_to_ethtool_lpa_t(*rmtadv) | lpeth;
  #line 4713 
  tp->link_config.rmt_adv = lpeth;
  #line 4715 
  return (_Bool)1;
}

#line 4718  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
static bool tg3_test_and_report_link_chg(struct tg3 *tp, bool curr_link_up)
{
  #line 4720 
  if ((int)tp->link_up != (int)curr_link_up) {
    #line 4721 
    if ((int)curr_link_up != 0) 
                                #line 4722 
                                netif_carrier_on(tp->dev);
    else {
      #line 4724 
      netif_carrier_off(tp->dev);
      #line 4725 
      if ((tp->phy_flags & 32U) != 0U) 
                                       #line 4726 
                                       tp->phy_flags &= 4294836223U;
    }
    #line 4729 
    tg3_link_report(tp);
    #line 4730 
    return (_Bool)1;
  }
  #line 4733 
  return (_Bool)0;
}

#line 4736  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
static void tg3_clear_mac_status(struct tg3 *tp)
{
  #line 4738 
  (*(tp->write32))(tp,1032U,0U);
  #line 4740 
  _tw32_flush(tp,1028U,4198424U,0U);
  #line 4745 
  __const_udelay(171800UL);
  #line 4747 
  return;
}

#line 4748  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
static void tg3_setup_eee(struct tg3 *tp)
{
  #line 4750 
  u32 val;
  #line 4773 
  u32 tmp_0;
  #line 4752 
  val = 16777220U;
  #line 4754 
  if (tp->pci_chip_rev_id == 1467502592U) 
                                          #line 4755 
                                          val |= 2U;
  #line 4757 
  _tw32_flush(tp,14012U,val,0U);
  #line 4759 
  _tw32_flush(tp,14032U,504U,0U);
  #line 4762 
  if (tp->eee.tx_lpi_enabled != 0U) 
                                    #line 4762 
                                    val = 1049352U; else 
                                                         #line 4762 
                                                         val = 1049096U;
  #line 4767 
  if (tp->pci_chip_rev_id >> 12 != 22295U) 
                                           #line 4768 
                                           val |= 64U;
  #line 4770 
  if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_ENABLE_APE,
                (unsigned long *)(& tp->tg3_flags)) != 0) 
    #line 4771 
    val |= 4U;
  #line 4773 
  if (tp->eee.eee_enabled != 0U) 
                                 #line 4773 
                                 tmp_0 = val; else 
                                                   #line 4773 
                                                   tmp_0 = 0U;
  #line 4773 
  ;
  #line 4773 
  _tw32_flush(tp,14000U,tmp_0,0U);
  #line 4775 
  _tw32_flush(tp,14004U,(tp->eee.tx_lpi_timer & 65535U) | 134152192U,0U);
  #line 4779 
  _tw32_flush(tp,14008U,134154239U,0U);
  #line 4780 
  return;
}

#line 4784  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
static int tg3_setup_copper_phy(struct tg3 *tp, bool force_reset)
{
  #line 4786 
  bool current_link_up;
  #line 4787 
  u32 bmsr;
  #line 4787 
  u32 val;
  #line 4788 
  u32 lcl_adv;
  #line 4788 
  u32 rmt_adv;
  #line 4789 
  u32 current_speed;
  #line 4790 
  u8 current_duplex;
  #line 4791 
  int i;
  #line 4791 
  int err;
  #line 4793 
  tg3_clear_mac_status(tp);
  #line 4795 
  if ((tp->mi_mode & 16U) != 0U) {
    #line 4796 
    _tw32_flush(tp,1108U,tp->mi_mode & 4294967279U,0U);
    #line 4798 
    __const_udelay(343600UL);
  }
  #line 4801 
  tg3_phy_auxctl_write(tp,2,0U);
  #line 4806 
  if ((tp->pci_chip_rev_id >> 12) + 4294967295U <= 2U && (int)tp->link_up != 0) {
    #line 4810 
    tg3_readphy(tp,1,& bmsr);
    #line 4811 
    if (tg3_readphy(tp,1,& bmsr) == 0) 
      #line 4811 
      if ((bmsr & 4U) == 0U) 
                             #line 4813 
                             force_reset = (_Bool)1;
  }
  #line 4815 
  if ((int)force_reset != 0) 
                             #line 4816 
                             tg3_phy_reset(tp);
  #line 4818 
  if ((tp->phy_id & 4294967280U) == 1610645584U) {
    #line 4819 
    tg3_readphy(tp,1,& bmsr);
    #line 4820 
    if (tg3_readphy(tp,1,& bmsr) != 0) 
                                       #line 4822 
                                       bmsr = 0U;
    else {
      #line 4820 
      if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_INIT_COMPLETE,
                  (unsigned long *)(& tp->tg3_flags)) == 0) 
        #line 4822 
        bmsr = 0U;
    }
    #line 4824 
    if ((bmsr & 4U) == 0U) {
      #line 4825 
      err = tg3_init_5401phy_dsp(tp);
      #line 4826 
      if (err != 0) 
                    #line 4827 
                    return err;
      #line 4829 
      tg3_readphy(tp,1,& bmsr);
      #line 4830 
      i = 0;
      #line 4830 
      while (i <= 999) {
        {
          #line 4831 
          __const_udelay(42950UL);
          #line 4832 
          if (tg3_readphy(tp,1,& bmsr) == 0) 
            #line 4832 
            if ((bmsr & 4U) != 0U) {
              #line 4834 
              __const_udelay(171800UL);
              #line 4835 
              break;
            }
        }
        #line 4830 
        i ++;
      }
      #line 4839 
      if (((tp->phy_id & 15U) == 1U && (bmsr & 4U) == 0U) && tp->link_config.active_speed == 1000U) {
        #line 4843 
        err = tg3_phy_reset(tp);
        #line 4844 
        if (err == 0) 
                      #line 4845 
                      err = tg3_init_5401phy_dsp(tp);
        #line 4846 
        if (err != 0) 
                      #line 4847 
                      return err;
      }
    }
  }
  else 
    #line 4850 
    if (tp->pci_chip_rev_id == 0U || tp->pci_chip_rev_id == 256U) {
      #line 4853 
      tg3_writephy(tp,21,2677U);
      #line 4854 
      tg3_writephy(tp,28,35944U);
      #line 4855 
      tg3_writephy(tp,28,36200U);
      #line 4856 
      tg3_writephy(tp,28,35944U);
    }
  #line 4860 
  tg3_readphy(tp,26,& val);
  #line 4861 
  tg3_readphy(tp,26,& val);
  #line 4863 
  if ((tp->phy_flags & 4U) != 0U) 
                                  #line 4864 
                                  tg3_writephy(tp,27,4294967293U);
  else 
    #line 4865 
    if ((tp->phy_flags & 64U) == 0U) 
                                     #line 4866 
                                     tg3_writephy(tp,27,4294967295U);
  #line 4868 
  if (tp->pci_chip_rev_id >> 12 == 7U || tp->pci_chip_rev_id >> 12 == 0U) 
    #line 4870 
    if (tp->led_ctrl == 2048U) 
                               #line 4871 
                               tg3_writephy(tp,16,2U); else 
                                                            #line 4874 
                                                            tg3_writephy(tp,16,0U);
  #line 4877 
  current_link_up = (_Bool)0;
  #line 4878 
  current_speed = 4294967295U;
  #line 4879 
  current_duplex = (unsigned char)255U;
  #line 4880 
  tp->phy_flags &= 4292870143U;
  #line 4881 
  tp->link_config.rmt_adv = 0U;
  #line 4883 
  if ((tp->phy_flags & 512U) != 0U) {
    #line 4884 
    err = tg3_phy_auxctl_read(tp,4,& val);
    #line 4887 
    if (err == 0 && (val & 1024U) == 0U) {
      #line 4888 
      tg3_phy_auxctl_write(tp,4,val | 1024U);
      #line 4891 
      goto relink;
    }
  }
  #line 4895 
  bmsr = 0U;
  #line 4896 
  i = 0;
  #line 4896 
  while (i <= 99) {
    {
      #line 4897 
      tg3_readphy(tp,1,& bmsr);
      #line 4898 
      if (tg3_readphy(tp,1,& bmsr) == 0) 
        #line 4898 
        if ((bmsr & 4U) != 0U) 
                               #line 4900 
                               break;
      #line 4901 
      __const_udelay(171800UL);
    }
    #line 4896 
    i ++;
  }
  #line 4904 
  if ((bmsr & 4U) != 0U) {
    #line 4905 
    u32 aux_stat;
    #line 4905 
    u32 bmcr;
    #line 4907 
    tg3_readphy(tp,25,& aux_stat);
    #line 4908 
    i = 0;
    #line 4908 
    while (i <= 1999) {
      {
        #line 4909 
        __const_udelay(42950UL);
        #line 4910 
        if (tg3_readphy(tp,25,& aux_stat) == 0) 
          #line 4910 
          if (aux_stat != 0U) 
                              #line 4912 
                              break;
      }
      #line 4908 
      i ++;
    }
    #line 4915 
    tg3_aux_stat_to_speed_duplex(tp,aux_stat,& current_speed,& current_duplex);
    #line 4919 
    bmcr = 0U;
    #line 4920 
    i = 0;
    #line 4920 
    while (i <= 199) {
      {
        #line 4921 
        tg3_readphy(tp,0,& bmcr);
        #line 4922 
        if (tg3_readphy(tp,0,& bmcr) != 0) 
                                           #line 4923 
                                           goto __Cont;
        #line 4924 
        if (bmcr != 0U && bmcr != 32767U) 
                                          #line 4925 
                                          break;
        #line 4926 
        __const_udelay(42950UL);
      }
      #line 4920 
      __Cont: 
              #line 4920 
      i ++;
    }
    #line 4929 
    lcl_adv = 0U;
    #line 4930 
    rmt_adv = 0U;
    #line 4932 
    tp->link_config.active_speed = current_speed;
    #line 4933 
    tp->link_config.active_duplex = current_duplex;
    #line 4935 
    if ((unsigned int)tp->link_config.autoneg == 1U) {
      #line 4936 
      bool eee_config_ok = tg3_phy_eee_config_ok(tp);
      #line 4938 
      if ((bmcr & 4096U) != 0U && (int)eee_config_ok != 0) {
        #line 4939 
        if ((int)tg3_phy_copper_an_config_ok(tp,& lcl_adv) != 0) {
          #line 4940 
          if ((int)tg3_phy_copper_fetch_rmtadv(tp,& rmt_adv) != 0) 
                                                                   #line 4942 
                                                                   current_link_up = (_Bool)1;
        }
      }
      #line 4948 
      if ((! eee_config_ok && (tp->phy_flags & 1048576U) != 0U) && ! force_reset) {
        #line 4951 
        tg3_setup_eee(tp);
        #line 4952 
        tg3_phy_reset(tp);
      }
    }
    else 
      #line 4955 
      if (((bmcr & 4096U) == 0U && tp->link_config.speed == current_speed) && (int)tp->link_config.duplex == (int)current_duplex) 
        #line 4958 
        current_link_up = (_Bool)1;
    #line 4962 
    if ((int)current_link_up != 0 && (unsigned int)tp->link_config.active_duplex == 1U) {
      #line 4964 
      u32 reg;
      #line 4964 
      u32 bit;
      #line 4966 
      if ((tp->phy_flags & 64U) != 0U) {
        #line 4967 
        reg = 28U;
        #line 4968 
        bit = 8192U;
      }
      else {
        #line 4970 
        reg = 17U;
        #line 4971 
        bit = 8192U;
      }
      #line 4974 
      if (tg3_readphy(tp,(int)reg,& val) == 0) 
        #line 4974 
        if ((val & bit) != 0U) 
                               #line 4975 
                               tp->phy_flags |= 2097152U;
      #line 4977 
      tg3_setup_flow_control(tp,lcl_adv,rmt_adv);
    }
  }
  #line 4981 
  relink: 
          #line 4981 
  ;
  #line 4982 
  if (! current_link_up || (tp->phy_flags & 1U) != 0U) {
    #line 4983 
    tg3_phy_copper_begin(tp);
    #line 4985 
    if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_ROBOSWITCH,
                   (unsigned long *)(& tp->tg3_flags)) != 0) {
      #line 4986 
      current_link_up = (_Bool)1;
      #line 4988 
      current_speed = 1000U;
      #line 4989 
      current_duplex = (unsigned char)1U;
      #line 4990 
      tp->link_config.active_speed = current_speed;
      #line 4991 
      tp->link_config.active_duplex = current_duplex;
    }
    #line 4994 
    tg3_readphy(tp,1,& bmsr);
    #line 4995 
    if (tg3_readphy(tp,1,& bmsr) == 0) {
      #line 4995 
      if ((bmsr & 4U) != 0U) 
                             #line 4997 
                             current_link_up = (_Bool)1; else 
                                                              #line 4995 
                                                              goto _LAND;
    }
    else {
      #line 4995 
      _LAND: 
             #line 4995 
      ;
      #line 4995 
      if ((tp->mac_mode & 16U) != 0U) 
                                      #line 4997 
                                      current_link_up = (_Bool)1;
    }
  }
  #line 5000 
  tp->mac_mode &= 4294967283U;
  #line 5001 
  if ((int)current_link_up != 0) 
    #line 5002 
    if (tp->link_config.active_speed == 100U || tp->link_config.active_speed == 10U) 
      #line 5004 
      tp->mac_mode |= 4U; else 
                               #line 5006 
                               tp->mac_mode |= 8U;
  else 
    #line 5007 
    if ((tp->phy_flags & 64U) != 0U) 
                                     #line 5008 
                                     tp->mac_mode |= 4U; else 
                                                              #line 5010 
                                                              tp->mac_mode |= 8U;
  #line 5015 
  if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_RGMII_MODE,
                   (unsigned long *)(& tp->tg3_flags)) != 0) {
    #line 5016 
    u32 led_ctrl = (*(tp->read32))(tp,1036U);
    #line 5017 
    led_ctrl &= 4294967289U;
    #line 5019 
    if (tp->link_config.active_speed == 10U) 
                                             #line 5020 
                                             led_ctrl |= 1U;
    else 
      #line 5021 
      if (tp->link_config.active_speed == 100U) 
                                                #line 5022 
                                                led_ctrl |= 5U;
      else 
        #line 5024 
        if (tp->link_config.active_speed == 1000U) 
                                                   #line 5025 
                                                   led_ctrl |= 3U;
    #line 5028 
    (*(tp->write32))(tp,1036U,led_ctrl);
    #line 5029 
    __const_udelay(171800UL);
  }
  #line 5032 
  tp->mac_mode &= 4294967293U;
  #line 5033 
  if ((unsigned int)tp->link_config.active_duplex == 0U) 
                                                         #line 5034 
                                                         tp->mac_mode |= 2U;
  #line 5036 
  if (tp->pci_chip_rev_id >> 12 == 7U) 
    #line 5037 
    if ((int)current_link_up != 0) {
      #line 5037 
      if (tg3_5700_link_polarity(tp,tp->link_config.active_speed) != 0) 
        #line 5039 
        tp->mac_mode |= 1024U; else 
                                    #line 5041 
                                    tp->mac_mode &= 4294966271U;
    }
    else 
         #line 5041 
         tp->mac_mode &= 4294966271U;
  #line 5047 
  if ((tp->phy_id & 4294967280U) == 1610645616U && tp->pci_chip_rev_id == 28932U) {
    #line 5049 
    tp->mi_mode |= 16U;
    #line 5050 
    _tw32_flush(tp,1108U,tp->mi_mode,0U);
    #line 5051 
    __const_udelay(343600UL);
  }
  #line 5054 
  _tw32_flush(tp,1024U,tp->mac_mode,0U);
  #line 5055 
  __const_udelay(171800UL);
  #line 5057 
  tg3_phy_eee_adjust(tp,(_Bool)((bool)((int)current_link_up) != 0));
  #line 5059 
  if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_USE_LINKCHG_REG,
                   (unsigned long *)(& tp->tg3_flags)) != 0) 
    #line 5061 
    _tw32_flush(tp,1032U,0U,0U); else 
                                      #line 5063 
                                      _tw32_flush(tp,1032U,4096U,0U);
  #line 5065 
  __const_udelay(171800UL);
  #line 5067 
  if ((tp->pci_chip_rev_id >> 12 == 7U && (int)current_link_up != 0) && tp->link_config.active_speed == 1000U) {
    #line 5069 
    if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_PCIX_MODE,
                   (unsigned long *)(& tp->tg3_flags)) != 0) 
      #line 5067 
      goto _LOR;
    else {
      #line 5070 
      if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_PCI_HIGH_SPEED,
                   (unsigned long *)(& tp->tg3_flags)) != 0) {
        #line 5067 
        _LOR: {
                #line 5071 
                __const_udelay(515400UL);
                #line 5072 
                _tw32_flush(tp,1028U,24U,0U);
                #line 5075 
                __const_udelay(171800UL);
                #line 5076 
                tg3_write_mem(tp,2896U,1214346827U);
              }
      }
    }
  }
  #line 5082 
  if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_CLKREQ_BUG,
                   (unsigned long *)(& tp->tg3_flags)) != 0) 
    #line 5083 
    if (tp->link_config.active_speed == 100U || tp->link_config.active_speed == 10U) 
      #line 5085 
      pcie_capability_clear_word(tp->pdev,16,(unsigned short)256); else 
                                                                    #line 5088 
                                                                    pcie_capability_set_word(tp->pdev,16,(unsigned short)256);
  #line 5092 
  tg3_test_and_report_link_chg(tp,(_Bool)((bool)((int)current_link_up) != 0));
  #line 5094 
  return 0;
}

#line 5161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
static int tg3_fiber_aneg_smachine(struct tg3 *tp, struct tg3_fiber_aneginfo *ap)
{
  #line 5164 
  u16 flowctrl;
  #line 5165 
  unsigned long delta;
  #line 5166 
  u32 rx_cfg_reg;
  #line 5167 
  int ret;
  #line 5169 
  if (ap->state == 0) {
    #line 5170 
    ap->rxconfig = 0U;
    #line 5171 
    ap->link_time = 0UL;
    #line 5172 
    ap->cur_time = 0UL;
    #line 5173 
    ap->ability_match_cfg = 0U;
    #line 5174 
    ap->ability_match_count = 0;
    #line 5175 
    ap->ability_match = (char)0;
    #line 5176 
    ap->idle_match = (char)0;
    #line 5177 
    ap->ack_match = (char)0;
  }
  #line 5179 
  (ap->cur_time) ++;
  #line 5181 
  if (((*(tp->read32))(tp,1028U) & 4U) != 0U) {
    #line 5182 
    rx_cfg_reg = (*(tp->read32))(tp,1096U);
    #line 5184 
    if (ap->ability_match_cfg != rx_cfg_reg) {
      #line 5185 
      ap->ability_match_cfg = rx_cfg_reg;
      #line 5186 
      ap->ability_match = (char)0;
      #line 5187 
      ap->ability_match_count = 0;
    }
    else {
      #line 5189 
      (ap->ability_match_count) ++;
      #line 5189 
      if (ap->ability_match_count > 1) {
        #line 5190 
        ap->ability_match = (char)1;
        #line 5191 
        ap->ability_match_cfg = rx_cfg_reg;
      }
    }
    #line 5194 
    if ((rx_cfg_reg & 64U) != 0U) 
                                  #line 5195 
                                  ap->ack_match = (char)1; else 
                                                                #line 5197 
                                                                ap->ack_match = (char)0;
    #line 5199 
    ap->idle_match = (char)0;
  }
  else {
    #line 5201 
    ap->idle_match = (char)1;
    #line 5202 
    ap->ability_match_cfg = 0U;
    #line 5203 
    ap->ability_match_count = 0;
    #line 5204 
    ap->ability_match = (char)0;
    #line 5205 
    ap->ack_match = (char)0;
    #line 5207 
    rx_cfg_reg = 0U;
  }
  #line 5210 
  ap->rxconfig = rx_cfg_reg;
  #line 5211 
  ret = 0;
  #line 5213 
  switch (ap->state) {
    #line 5214 
    case 0: 
            #line 5214 
    ;
    #line 5215 
    if ((ap->flags & 3U) != 0U) 
                                #line 5216 
                                ap->state = 1;
    #line 5219 
    case 1: 
            #line 5219 
    ;
    #line 5220 
    ap->flags &= 4294967283U;
    #line 5221 
    if ((ap->flags & 1U) != 0U) {
      #line 5222 
      ap->link_time = 0UL;
      #line 5223 
      ap->cur_time = 0UL;
      #line 5224 
      ap->ability_match_cfg = 0U;
      #line 5225 
      ap->ability_match_count = 0;
      #line 5226 
      ap->ability_match = (char)0;
      #line 5227 
      ap->idle_match = (char)0;
      #line 5228 
      ap->ack_match = (char)0;
      #line 5230 
      ap->state = 2;
    }
    else 
         #line 5232 
         ap->state = 4;
    #line 5234 
    break;
    #line 5236 
    case 2: 
            #line 5236 
    ;
    #line 5237 
    ap->link_time = ap->cur_time;
    #line 5238 
    ap->flags &= 4294967279U;
    #line 5239 
    ap->txconfig = 0U;
    #line 5240 
    (*(tp->write32))(tp,1092U,0U);
    #line 5241 
    tp->mac_mode |= 131072U;
    #line 5242 
    _tw32_flush(tp,1024U,tp->mac_mode,0U);
    #line 5243 
    __const_udelay(171800UL);
    #line 5245 
    ret = 2;
    #line 5246 
    ap->state = 3;
    #line 5249 
    case 3: 
            #line 5249 
    ;
    #line 5250 
    delta = ap->cur_time - ap->link_time;
    #line 5251 
    if (delta > 10000UL) 
                         #line 5252 
                         ap->state = 5; else 
                                             #line 5254 
                                             ret = 2;
    #line 5255 
    break;
    #line 5257 
    case 4: 
            #line 5257 
    ;
    #line 5258 
    ret = 1;
    #line 5259 
    break;
    #line 5261 
    case 5: 
            #line 5261 
    ;
    #line 5262 
    ap->flags &= 4294967263U;
    #line 5263 
    ap->txconfig = 8192U;
    #line 5264 
    flowctrl = tg3_advert_flowctrl_1000X((unsigned char)((int)tp->link_config.flowctrl));
    #line 5265 
    if (((int)flowctrl & 128) != 0) 
                                    #line 5266 
                                    ap->txconfig |= 32768U;
    #line 5267 
    if (((int)flowctrl & 256) != 0) 
                                    #line 5268 
                                    ap->txconfig |= 1U;
    #line 5269 
    (*(tp->write32))(tp,1092U,ap->txconfig);
    #line 5270 
    tp->mac_mode |= 131072U;
    #line 5271 
    _tw32_flush(tp,1024U,tp->mac_mode,0U);
    #line 5272 
    __const_udelay(171800UL);
    #line 5274 
    ap->state = 6;
    #line 5275 
    break;
    #line 5277 
    case 6: 
            #line 5277 
    ;
    #line 5278 
    if ((int)ap->ability_match != 0 && ap->rxconfig != 0U) 
                                                           #line 5279 
                                                           ap->state = 7;
    #line 5280 
    break;
    #line 5282 
    case 7: 
            #line 5282 
    ;
    #line 5283 
    ap->txconfig |= 64U;
    #line 5284 
    (*(tp->write32))(tp,1092U,ap->txconfig);
    #line 5285 
    tp->mac_mode |= 131072U;
    #line 5286 
    _tw32_flush(tp,1024U,tp->mac_mode,0U);
    #line 5287 
    __const_udelay(171800UL);
    #line 5289 
    ap->state = 8;
    #line 5292 
    case 8: 
            #line 5292 
    ;
    #line 5293 
    if ((int)ap->ack_match != 0) 
      #line 5294 
      if (((ap->rxconfig ^ ap->ability_match_cfg) & 4294967231U) == 0U) 
        #line 5296 
        ap->state = 9; else 
                            #line 5298 
                            ap->state = 1;
    else 
      #line 5300 
      if ((int)ap->ability_match != 0 && ap->rxconfig == 0U) 
                                                             #line 5302 
                                                             ap->state = 1;
    #line 5304 
    break;
    #line 5306 
    case 9: 
            #line 5306 
    ;
    #line 5307 
    if ((ap->rxconfig & 7942U) != 0U) {
      #line 5308 
      ret = -1;
      #line 5309 
      break;
    }
    #line 5311 
    ap->flags &= 4294934591U;
    #line 5320 
    if ((ap->rxconfig & 8192U) != 0U) 
                                      #line 5321 
                                      ap->flags |= 64U;
    #line 5322 
    if ((ap->rxconfig & 16384U) != 0U) 
                                       #line 5323 
                                       ap->flags |= 128U;
    #line 5324 
    if ((ap->rxconfig & 32768U) != 0U) 
                                       #line 5325 
                                       ap->flags |= 256U;
    #line 5326 
    if ((ap->rxconfig & 1U) != 0U) 
                                   #line 5327 
                                   ap->flags |= 512U;
    #line 5328 
    if ((ap->rxconfig & 16U) != 0U) 
                                    #line 5329 
                                    ap->flags |= 1024U;
    #line 5330 
    if ((ap->rxconfig & 32U) != 0U) 
                                    #line 5331 
                                    ap->flags |= 2048U;
    #line 5332 
    if ((ap->rxconfig & 128U) != 0U) 
                                     #line 5333 
                                     ap->flags |= 4096U;
    #line 5335 
    ap->link_time = ap->cur_time;
    #line 5337 
    ap->flags ^= 32U;
    #line 5338 
    if ((ap->rxconfig & 8U) != 0U) 
                                   #line 5339 
                                   ap->flags |= 8192U;
    #line 5340 
    if ((ap->rxconfig & 128U) != 0U) 
                                     #line 5341 
                                     ap->flags |= 16384U;
    #line 5342 
    ap->flags |= 8U;
    #line 5344 
    ap->state = 10;
    #line 5345 
    ret = 2;
    #line 5346 
    break;
    #line 5348 
    case 10: 
             #line 5348 
    ;
    #line 5349 
    if ((int)ap->ability_match != 0 && ap->rxconfig == 0U) {
      #line 5351 
      ap->state = 1;
      #line 5352 
      break;
    }
    #line 5354 
    delta = ap->cur_time - ap->link_time;
    #line 5355 
    if (delta > 10000UL) 
      #line 5356 
      if ((ap->flags & 4096U) == 0U) 
                                     #line 5357 
                                     ap->state = 11;
      else 
        #line 5359 
        if ((ap->txconfig & 128U) == 0U && (ap->flags & 16384U) == 0U) 
          #line 5361 
          ap->state = 11; else 
                               #line 5363 
                               ret = -1;
    #line 5367 
    break;
    #line 5369 
    case 11: 
             #line 5369 
    ;
    #line 5370 
    ap->link_time = ap->cur_time;
    #line 5371 
    tp->mac_mode &= 4294836223U;
    #line 5372 
    _tw32_flush(tp,1024U,tp->mac_mode,0U);
    #line 5373 
    __const_udelay(171800UL);
    #line 5375 
    ap->state = 12;
    #line 5376 
    ret = 2;
    #line 5377 
    break;
    #line 5379 
    case 12: 
             #line 5379 
    ;
    #line 5380 
    if ((int)ap->ability_match != 0 && ap->rxconfig == 0U) {
      #line 5382 
      ap->state = 1;
      #line 5383 
      break;
    }
    #line 5385 
    delta = ap->cur_time - ap->link_time;
    #line 5386 
    if (delta > 10000UL) 
                         #line 5388 
                         ap->state = 13;
    #line 5390 
    break;
    #line 5392 
    case 13: 
             #line 5392 
    ;
    #line 5393 
    ap->flags |= 2147483652U;
    #line 5394 
    ret = 1;
    #line 5395 
    break;
    #line 5397 
    case 14: 
             #line 5397 
    ;
    #line 5399 
    break;
    #line 5401 
    case 15: 
             #line 5401 
    ;
    #line 5403 
    break;
    #line 5405 
    default: 
             #line 5405 
    ;
    #line 5406 
    ret = -1;
    #line 5407 
    break;
  }
  #line 5410 
  return ret;
}

#line 5413  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
static int fiber_autoneg(struct tg3 *tp, u32 *txflags, u32 *rxflags)
{
  #line 5416 
  struct tg3_fiber_aneginfo aninfo;
  #line 5418 
  unsigned int tick;
  #line 5419 
  u32 tmp;
  #line 5415 
  int res = 0;
  #line 5417 
  int status = -1;
  #line 5421 
  _tw32_flush(tp,1092U,0U,0U);
  #line 5423 
  tmp = tp->mac_mode & 4294967283U;
  #line 5424 
  _tw32_flush(tp,1024U,tmp | 8U,0U);
  #line 5425 
  __const_udelay(171800UL);
  #line 5427 
  _tw32_flush(tp,1024U,tp->mac_mode | 131072U,0U);
  #line 5428 
  __const_udelay(171800UL);
  #line 5430 
  memset((void *)(& aninfo),0,48UL);
  #line 5431 
  aninfo.flags |= 1U;
  #line 5432 
  aninfo.state = 0;
  #line 5433 
  aninfo.cur_time = 0UL;
  #line 5434 
  tick = 0U;
  #line 5435 
  while (1) {
    #line 5435 
    tick ++;
    #line 5435 
    if (! (tick <= 194999U)) 
                             #line 5435 
                             break;
    #line 5436 
    status = tg3_fiber_aneg_smachine(tp,& aninfo);
    #line 5437 
    if (status == 1 || status == -1) 
                                     #line 5438 
                                     break;
    #line 5440 
    __const_udelay(4295UL);
  }
  #line 5443 
  tp->mac_mode &= 4294836223U;
  #line 5444 
  _tw32_flush(tp,1024U,tp->mac_mode,0U);
  #line 5445 
  __const_udelay(171800UL);
  #line 5447 
  *txflags = aninfo.txconfig;
  #line 5448 
  *rxflags = aninfo.flags;
  #line 5450 
  if (status == 1 && (aninfo.flags & 2147483716U) != 0U) 
                                                         #line 5453 
                                                         res = 1;
  #line 5455 
  return res;
}

#line 5458  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
static void tg3_init_bcm8002(struct tg3 *tp)
{
  #line 5461 
  int i;
  #line 5460 
  u32 mac_status = (*(tp->read32))(tp,1028U);
  #line 5464 
  if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_INIT_COMPLETE,
                  (unsigned long *)(& tp->tg3_flags)) != 0) 
    #line 5464 
    if ((mac_status & 1U) == 0U) 
                                 #line 5466 
                                 return;
  #line 5469 
  tg3_writephy(tp,22,32775U);
  #line 5472 
  tg3_writephy(tp,0,32768U);
  #line 5476 
  i = 0;
  #line 5476 
  while (i <= 499) {
    #line 5477 
    __const_udelay(42950UL);
    #line 5476 
    i ++;
  }
  #line 5480 
  tg3_writephy(tp,16,33809U);
  #line 5483 
  tg3_writephy(tp,17,2576U);
  #line 5485 
  tg3_writephy(tp,24,160U);
  #line 5486 
  tg3_writephy(tp,22,16895U);
  #line 5489 
  tg3_writephy(tp,19,1024U);
  #line 5490 
  __const_udelay(171800UL);
  #line 5491 
  tg3_writephy(tp,19,0U);
  #line 5493 
  tg3_writephy(tp,17,2640U);
  #line 5494 
  __const_udelay(171800UL);
  #line 5495 
  tg3_writephy(tp,17,2576U);
  #line 5499 
  i = 0;
  #line 5499 
  while (i <= 14999) {
    #line 5500 
    __const_udelay(42950UL);
    #line 5499 
    i ++;
  }
  #line 5505 
  tg3_writephy(tp,16,32785U);
  #line 5506 
  return;
}

#line 5508  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
static bool tg3_setup_fiber_hw_autoneg(struct tg3 *tp, u32 mac_status)
{
  #line 5510 
  u16 flowctrl;
  #line 5511 
  bool current_link_up;
  #line 5512 
  u32 sg_dig_ctrl;
  #line 5512 
  u32 sg_dig_status;
  #line 5513 
  u32 serdes_cfg;
  #line 5513 
  u32 expected_sg_dig_ctrl;
  #line 5514 
  int workaround;
  #line 5514 
  int port_a;
  #line 5516 
  serdes_cfg = 0U;
  #line 5517 
  expected_sg_dig_ctrl = 0U;
  #line 5518 
  workaround = 0;
  #line 5519 
  port_a = 1;
  #line 5520 
  current_link_up = (_Bool)0;
  #line 5522 
  if (tp->pci_chip_rev_id + 4294959104U > 1U) {
    #line 5524 
    workaround = 1;
    #line 5525 
    if (((*(tp->read32))(tp,184U) & 4U) != 0U) 
                                               #line 5526 
                                               port_a = 0;
    #line 5530 
    serdes_cfg = (*(tp->read32))(tp,1424U) & 15757311U;
  }
  #line 5533 
  sg_dig_ctrl = (*(tp->read32))(tp,1456U);
  #line 5535 
  if ((unsigned int)tp->link_config.autoneg != 1U) {
    #line 5536 
    if ((sg_dig_ctrl & 2147483648U) != 0U) {
      #line 5537 
      if (workaround != 0) {
        #line 5538 
        u32 val = serdes_cfg;
        #line 5540 
        if (port_a != 0) 
                         #line 5541 
                         val |= 201392128U; else 
                                                 #line 5543 
                                                 val |= 67174400U;
        #line 5544 
        _tw32_flush(tp,1424U,val,0U);
      }
      #line 5547 
      _tw32_flush(tp,1456U,20481024U,0U);
    }
    #line 5549 
    if ((mac_status & 1U) != 0U) {
      #line 5550 
      tg3_setup_flow_control(tp,0U,0U);
      #line 5551 
      current_link_up = (_Bool)1;
    }
    #line 5553 
    goto out;
  }
  #line 5557 
  expected_sg_dig_ctrl = 2167964672U;
  #line 5559 
  flowctrl = tg3_advert_flowctrl_1000X((unsigned char)((int)tp->link_config.flowctrl));
  #line 5560 
  if (((int)flowctrl & 128) != 0) 
                                  #line 5561 
                                  expected_sg_dig_ctrl |= 2048U;
  #line 5562 
  if (((int)flowctrl & 256) != 0) 
                                  #line 5563 
                                  expected_sg_dig_ctrl |= 4096U;
  #line 5565 
  if (sg_dig_ctrl != expected_sg_dig_ctrl) {
    #line 5566 
    if (((tp->phy_flags & 131072U) != 0U && tp->serdes_counter != 0U) && (mac_status & 5U) == 1U) {
      #line 5571 
      (tp->serdes_counter) --;
      #line 5572 
      current_link_up = (_Bool)1;
      #line 5573 
      goto out;
    }
    #line 5575 
    restart_autoneg: 
                     #line 5575 
    ;
    #line 5576 
    if (workaround != 0) 
                         #line 5577 
                         _tw32_flush(tp,1424U,serdes_cfg | 201396224U,0U);
    #line 5578 
    _tw32_flush(tp,1456U,expected_sg_dig_ctrl | 1073741824U,0U);
    #line 5579 
    __const_udelay(21475UL);
    #line 5580 
    _tw32_flush(tp,1456U,expected_sg_dig_ctrl,0U);
    #line 5582 
    tp->serdes_counter = 2U;
    #line 5583 
    tp->phy_flags &= 4294836223U;
  }
  else 
    #line 5584 
    if ((mac_status & 3U) != 0U) {
      #line 5586 
      sg_dig_status = (*(tp->read32))(tp,1460U);
      #line 5587 
      mac_status = (*(tp->read32))(tp,1028U);
      #line 5589 
      if ((sg_dig_status & 2U) != 0U && (mac_status & 1U) != 0U) {
        #line 5591 
        u32 local_adv = 0U;
        #line 5591 
        u32 remote_adv = 0U;
        #line 5593 
        if ((sg_dig_ctrl & 2048U) != 0U) 
                                         #line 5594 
                                         local_adv |= 128U;
        #line 5595 
        if ((sg_dig_ctrl & 4096U) != 0U) 
                                         #line 5596 
                                         local_adv |= 256U;
        #line 5598 
        if ((sg_dig_status & 524288U) != 0U) 
                                             #line 5599 
                                             remote_adv |= 128U;
        #line 5600 
        if ((sg_dig_status & 1048576U) != 0U) 
                                              #line 5601 
                                              remote_adv |= 256U;
        #line 5603 
        tp->link_config.rmt_adv = mii_adv_to_ethtool_adv_x(remote_adv);
        #line 5606 
        tg3_setup_flow_control(tp,local_adv,remote_adv);
        #line 5607 
        current_link_up = (_Bool)1;
        #line 5608 
        tp->serdes_counter = 0U;
        #line 5609 
        tp->phy_flags &= 4294836223U;
      }
      else 
        #line 5610 
        if ((sg_dig_status & 2U) == 0U) 
          #line 5611 
          if (tp->serdes_counter != 0U) 
                                        #line 5612 
                                        (tp->serdes_counter) --;
          else {
            #line 5614 
            if (workaround != 0) {
              #line 5615 
              u32 val_0 = serdes_cfg;
              #line 5617 
              if (port_a != 0) 
                               #line 5618 
                               val_0 |= 201392128U; else 
                                                         #line 5620 
                                                         val_0 |= 67174400U;
              #line 5622 
              _tw32_flush(tp,1424U,val_0,0U);
            }
            #line 5625 
            _tw32_flush(tp,1456U,20481024U,0U);
            #line 5626 
            __const_udelay(171800UL);
            #line 5631 
            mac_status = (*(tp->read32))(tp,1028U);
            #line 5632 
            if ((mac_status & 1U) != 0U && (mac_status & 4U) == 0U) {
              #line 5634 
              tg3_setup_flow_control(tp,0U,0U);
              #line 5635 
              current_link_up = (_Bool)1;
              #line 5636 
              tp->phy_flags |= 131072U;
              #line 5638 
              tp->serdes_counter = 1U;
            }
            else 
                 #line 5641 
                 goto restart_autoneg;
          }
    }
    else {
      #line 5645 
      tp->serdes_counter = 2U;
      #line 5646 
      tp->phy_flags &= 4294836223U;
    }
  #line 5649 
  out: 
       #line 5649 
  ;
  #line 5650 
  return current_link_up;
}

#line 5653  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
static bool tg3_setup_fiber_by_hand(struct tg3 *tp, u32 mac_status)
{
  #line 5655 
  bool current_link_up = (_Bool)0;
  #line 5657 
  if ((mac_status & 1U) == 0U) 
                               #line 5658 
                               goto out;
  #line 5660 
  if ((unsigned int)tp->link_config.autoneg == 1U) {
    #line 5661 
    u32 txflags;
    #line 5661 
    u32 rxflags;
    #line 5662 
    int i;
    #line 5664 
    if (fiber_autoneg(tp,& txflags,& rxflags) != 0) {
      #line 5665 
      u32 local_adv = 0U;
      #line 5665 
      u32 remote_adv = 0U;
      #line 5667 
      if ((txflags & 32768U) != 0U) 
                                    #line 5668 
                                    local_adv |= 128U;
      #line 5669 
      if ((txflags & 1U) != 0U) 
                                #line 5670 
                                local_adv |= 256U;
      #line 5672 
      if ((rxflags & 256U) != 0U) 
                                  #line 5673 
                                  remote_adv |= 128U;
      #line 5674 
      if ((rxflags & 512U) != 0U) 
                                  #line 5675 
                                  remote_adv |= 256U;
      #line 5677 
      tp->link_config.rmt_adv = mii_adv_to_ethtool_adv_x(remote_adv);
      #line 5680 
      tg3_setup_flow_control(tp,local_adv,remote_adv);
      #line 5682 
      current_link_up = (_Bool)1;
    }
    #line 5684 
    i = 0;
    #line 5684 
    while (i <= 29) {
      {
        #line 5685 
        __const_udelay(85900UL);
        #line 5686 
        _tw32_flush(tp,1028U,24U,0U);
        #line 5689 
        __const_udelay(171800UL);
        #line 5690 
        if (((*(tp->read32))(tp,1028U) & 24U) == 0U) 
                                                     #line 5693 
                                                     break;
      }
      #line 5684 
      i ++;
    }
    #line 5696 
    mac_status = (*(tp->read32))(tp,1028U);
    #line 5697 
    if ((! current_link_up && (mac_status & 1U) != 0U) && (mac_status & 4U) == 0U) 
      #line 5700 
      current_link_up = (_Bool)1;
  }
  else {
    #line 5702 
    tg3_setup_flow_control(tp,0U,0U);
    #line 5705 
    current_link_up = (_Bool)1;
    #line 5707 
    _tw32_flush(tp,1024U,tp->mac_mode | 131072U,0U);
    #line 5708 
    __const_udelay(171800UL);
    #line 5710 
    _tw32_flush(tp,1024U,tp->mac_mode,0U);
    #line 5711 
    __const_udelay(171800UL);
  }
  #line 5714 
  out: 
       #line 5714 
  ;
  #line 5715 
  return current_link_up;
}

#line 5718  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
static int tg3_setup_fiber_phy(struct tg3 *tp, bool force_reset)
{
  #line 5720 
  u32 orig_pause_cfg;
  #line 5721 
  u32 orig_active_speed;
  #line 5722 
  u8 orig_active_duplex;
  #line 5723 
  u32 mac_status;
  #line 5724 
  bool current_link_up;
  #line 5725 
  int i;
  #line 5727 
  orig_pause_cfg = (unsigned int)tp->link_config.active_flowctrl;
  #line 5728 
  orig_active_speed = tp->link_config.active_speed;
  #line 5729 
  orig_active_duplex = tp->link_config.active_duplex;
  #line 5731 
  if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_HW_AUTONEG,
                (unsigned long *)(& tp->tg3_flags)) == 0) 
    #line 5731 
    if ((int)tp->link_up != 0) {
      #line 5732 
      if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_INIT_COMPLETE,
                  (unsigned long *)(& tp->tg3_flags)) != 0) {
        #line 5734 
        mac_status = (*(tp->read32))(tp,1028U);
        #line 5735 
        mac_status &= 15U;
        #line 5739 
        if (mac_status == 3U) {
          #line 5741 
          _tw32_flush(tp,1028U,24U,0U);
          #line 5743 
          return 0;
        }
      }
    }
  #line 5747 
  _tw32_flush(tp,1092U,0U,0U);
  #line 5749 
  tp->mac_mode &= 4294967281U;
  #line 5750 
  tp->mac_mode |= 12U;
  #line 5751 
  _tw32_flush(tp,1024U,tp->mac_mode,0U);
  #line 5752 
  __const_udelay(171800UL);
  #line 5754 
  if (tp->phy_id == 1610678592U) 
                                 #line 5755 
                                 tg3_init_bcm8002(tp);
  #line 5758 
  _tw32_flush(tp,1032U,4096U,0U);
  #line 5759 
  __const_udelay(171800UL);
  #line 5761 
  current_link_up = (_Bool)0;
  #line 5762 
  tp->link_config.rmt_adv = 0U;
  #line 5763 
  mac_status = (*(tp->read32))(tp,1028U);
  #line 5765 
  if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_HW_AUTONEG,
                  (unsigned long *)(& tp->tg3_flags)) != 0) 
    #line 5766 
    current_link_up = tg3_setup_fiber_hw_autoneg(tp,mac_status); else 
                                                                   #line 5768 
                                                                   current_link_up = tg3_setup_fiber_by_hand(tp,mac_status);
  #line 5770 
  (tp->napi[0].hw_status)->status = ((tp->napi[0].hw_status)->status & 4294967292U) | 1U;
  #line 5774 
  i = 0;
  #line 5774 
  while (i <= 99) {
    {
      #line 5775 
      _tw32_flush(tp,1028U,24U,0U);
      #line 5777 
      __const_udelay(21475UL);
      #line 5778 
      if (((*(tp->read32))(tp,1028U) & 4120U) == 0U) 
                                                     #line 5781 
                                                     break;
    }
    #line 5774 
    i ++;
  }
  #line 5784 
  mac_status = (*(tp->read32))(tp,1028U);
  #line 5785 
  if ((mac_status & 1U) == 0U) {
    #line 5786 
    current_link_up = (_Bool)0;
    #line 5787 
    if ((unsigned int)tp->link_config.autoneg == 1U && tp->serdes_counter == 0U) {
      #line 5789 
      _tw32_flush(tp,1024U,tp->mac_mode | 131072U,0U);
      #line 5791 
      __const_udelay(4295UL);
      #line 5792 
      _tw32_flush(tp,1024U,tp->mac_mode,0U);
    }
  }
  #line 5796 
  if ((int)current_link_up != 0) {
    #line 5797 
    tp->link_config.active_speed = 1000U;
    #line 5798 
    tp->link_config.active_duplex = (unsigned char)1U;
    #line 5799 
    (*(tp->write32))(tp,1036U,tp->led_ctrl | 3U);
  }
  else {
    #line 5803 
    tp->link_config.active_speed = 4294967295U;
    #line 5804 
    tp->link_config.active_duplex = (unsigned char)255U;
    #line 5805 
    (*(tp->write32))(tp,1036U,tp->led_ctrl | 17U);
  }
  #line 5810 
  if (! tg3_test_and_report_link_chg(tp,
                                     (_Bool)((bool)((int)current_link_up) != 0))) {
    #line 5811 
    u32 now_pause_cfg = (unsigned int)tp->link_config.active_flowctrl;
    #line 5812 
    if ((orig_pause_cfg != now_pause_cfg || tp->link_config.active_speed != orig_active_speed) || (int)tp->link_config.active_duplex != (int)orig_active_duplex) 
      #line 5815 
      tg3_link_report(tp);
  }
  #line 5818 
  return 0;
}

#line 5821  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
static int tg3_setup_fiber_mii_phy(struct tg3 *tp, bool force_reset)
{
  #line 5824 
  u32 bmsr;
  #line 5824 
  u32 bmcr;
  #line 5828 
  u32 local_adv;
  #line 5828 
  u32 remote_adv;
  #line 5828 
  u32 sgsr;
  #line 5823 
  int err = 0;
  #line 5825 
  u32 current_speed = 4294967295U;
  #line 5826 
  u8 current_duplex = (unsigned char)255U;
  #line 5827 
  bool current_link_up = (_Bool)0;
  #line 5830 
  if (tp->pci_chip_rev_id >> 12 == 22297U || tp->pci_chip_rev_id >> 12 == 22304U) {
    #line 5831 
    if (tg3_readphy(tp,20,& sgsr) == 0) 
      #line 5832 
      if ((sgsr & 1U) != 0U) {
        #line 5835 
        if ((int)force_reset != 0) 
                                   #line 5836 
                                   tg3_phy_reset(tp);
        #line 5838 
        tp->mac_mode &= 4294967283U;
        #line 5840 
        if ((sgsr & 2U) == 0U) 
                               #line 5841 
                               tp->mac_mode |= 8U;
        else {
          #line 5843 
          current_link_up = (_Bool)1;
          #line 5844 
          if ((sgsr & 16U) != 0U) {
            #line 5845 
            current_speed = 1000U;
            #line 5846 
            tp->mac_mode |= 8U;
          }
          else 
            #line 5847 
            if ((sgsr & 8U) != 0U) {
              #line 5848 
              current_speed = 100U;
              #line 5849 
              tp->mac_mode |= 4U;
            }
            else {
              #line 5851 
              current_speed = 10U;
              #line 5852 
              tp->mac_mode |= 4U;
            }
          #line 5855 
          if ((sgsr & 4U) != 0U) 
                                 #line 5856 
                                 current_duplex = (unsigned char)1U; else 
                                                                    #line 5858 
                                                                    current_duplex = (unsigned char)0U;
        }
        #line 5861 
        _tw32_flush(tp,1024U,tp->mac_mode,0U);
        #line 5862 
        __const_udelay(171800UL);
        #line 5864 
        tg3_clear_mac_status(tp);
        #line 5866 
        goto fiber_setup_done;
      }
  }
  #line 5869 
  tp->mac_mode |= 8U;
  #line 5870 
  _tw32_flush(tp,1024U,tp->mac_mode,0U);
  #line 5871 
  __const_udelay(171800UL);
  #line 5873 
  tg3_clear_mac_status(tp);
  #line 5875 
  if ((int)force_reset != 0) 
                             #line 5876 
                             tg3_phy_reset(tp);
  #line 5878 
  tp->link_config.rmt_adv = 0U;
  #line 5880 
  err = tg3_readphy(tp,1,& bmsr) | err;
  #line 5881 
  err = tg3_readphy(tp,1,& bmsr) | err;
  #line 5882 
  if (tp->pci_chip_rev_id >> 12 == 9U) {
    #line 5883 
    if (((*(tp->read32))(tp,1120U) & 8U) != 0U) 
                                                #line 5884 
                                                bmsr |= 4U; else 
                                                                 #line 5886 
                                                                 bmsr &= 4294967291U;
  }
  #line 5889 
  err = tg3_readphy(tp,0,& bmcr) | err;
  #line 5891 
  if (! (((unsigned int)tp->link_config.autoneg == 1U && ! force_reset) && (tp->phy_flags & 131072U) != 0U)) 
    #line 5894 
    if ((unsigned int)tp->link_config.autoneg == 1U) {
      #line 5895 
      u32 adv;
      #line 5895 
      u32 newadv;
      #line 5897 
      err = tg3_readphy(tp,4,& adv) | err;
      #line 5898 
      newadv = adv & 4294966784U;
      #line 5903 
      newadv = (unsigned int)tg3_advert_flowctrl_1000X((unsigned char)((int)tp->link_config.flowctrl)) | newadv;
      #line 5904 
      newadv = ethtool_adv_to_mii_adv_x(tp->link_config.advertising) | newadv;
      #line 5906 
      if (newadv != adv || (bmcr & 4096U) == 0U) {
        #line 5907 
        tg3_writephy(tp,4,newadv);
        #line 5908 
        bmcr |= 4608U;
        #line 5909 
        tg3_writephy(tp,0,bmcr);
        #line 5911 
        _tw32_flush(tp,1032U,4096U,0U);
        #line 5912 
        tp->serdes_counter = 1U;
        #line 5913 
        tp->phy_flags &= 4294836223U;
        #line 5915 
        return err;
      }
    }
    else {
      #line 5918 
      u32 new_bmcr;
      #line 5920 
      bmcr &= 4294967231U;
      #line 5921 
      new_bmcr = bmcr & 4294962943U;
      #line 5923 
      if ((unsigned int)tp->link_config.duplex == 1U) 
                                                      #line 5924 
                                                      new_bmcr |= 256U;
      #line 5926 
      if (new_bmcr != bmcr) {
        #line 5930 
        new_bmcr |= 64U;
        #line 5933 
        if ((int)tp->link_up != 0) {
          #line 5934 
          u32 adv_0;
          #line 5936 
          err = tg3_readphy(tp,4,& adv_0) | err;
          #line 5937 
          adv_0 &= 4294967168U;
          #line 5940 
          tg3_writephy(tp,4,adv_0);
          #line 5941 
          tg3_writephy(tp,0,bmcr | 4608U);
          #line 5944 
          __const_udelay(42950UL);
          #line 5945 
          tg3_carrier_off(tp);
        }
        #line 5947 
        tg3_writephy(tp,0,new_bmcr);
        #line 5948 
        bmcr = new_bmcr;
        #line 5949 
        err = tg3_readphy(tp,1,& bmsr) | err;
        #line 5950 
        err = tg3_readphy(tp,1,& bmsr) | err;
        #line 5951 
        if (tp->pci_chip_rev_id >> 12 == 9U) {
          #line 5952 
          if (((*(tp->read32))(tp,1120U) & 8U) != 0U) 
                                                      #line 5953 
                                                      bmsr |= 4U; else 
                                                                    #line 5955 
                                                                    bmsr &= 4294967291U;
        }
        #line 5957 
        tp->phy_flags &= 4294836223U;
      }
    }
  #line 5961 
  if ((bmsr & 4U) != 0U) {
    #line 5962 
    current_speed = 1000U;
    #line 5963 
    current_link_up = (_Bool)1;
    #line 5964 
    if ((bmcr & 256U) != 0U) 
                             #line 5965 
                             current_duplex = (unsigned char)1U; else 
                                                                   #line 5967 
                                                                   current_duplex = (unsigned char)0U;
    #line 5969 
    local_adv = 0U;
    #line 5970 
    remote_adv = 0U;
    #line 5972 
    if ((bmcr & 4096U) != 0U) {
      #line 5973 
      u32 common;
      #line 5975 
      err = tg3_readphy(tp,4,& local_adv) | err;
      #line 5976 
      err = tg3_readphy(tp,5,& remote_adv) | err;
      #line 5977 
      common = local_adv & remote_adv;
      #line 5978 
      if ((common & 96U) != 0U) {
        #line 5980 
        if ((common & 32U) != 0U) 
                                  #line 5981 
                                  current_duplex = (unsigned char)1U; else 
                                                                    #line 5983 
                                                                    current_duplex = (unsigned char)0U;
        #line 5985 
        tp->link_config.rmt_adv = mii_adv_to_ethtool_adv_x(remote_adv);
      }
      else {
        #line 5987 
        if (! (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_5780_CLASS,
                   (unsigned long *)(& tp->tg3_flags)) == 0)) 
          #line 5990 
          current_link_up = (_Bool)0;
      }
    }
  }
  #line 5995 
  fiber_setup_done: 
                    #line 5995 
  ;
  #line 5996 
  if ((int)current_link_up != 0 && (unsigned int)current_duplex == 1U) 
    #line 5997 
    tg3_setup_flow_control(tp,local_adv,remote_adv);
  #line 5999 
  tp->mac_mode &= 4294967293U;
  #line 6000 
  if ((unsigned int)tp->link_config.active_duplex == 0U) 
                                                         #line 6001 
                                                         tp->mac_mode |= 2U;
  #line 6003 
  _tw32_flush(tp,1024U,tp->mac_mode,0U);
  #line 6004 
  __const_udelay(171800UL);
  #line 6006 
  _tw32_flush(tp,1032U,4096U,0U);
  #line 6008 
  tp->link_config.active_speed = current_speed;
  #line 6009 
  tp->link_config.active_duplex = current_duplex;
  #line 6011 
  tg3_test_and_report_link_chg(tp,(_Bool)((bool)((int)current_link_up) != 0));
  #line 6012 
  return err;
}

#line 6015  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
static void tg3_serdes_parallel_detect(struct tg3 *tp)
{
  #line 6017 
  if (tp->serdes_counter != 0U) {
    #line 6019 
    (tp->serdes_counter) --;
    #line 6020 
    return;
  }
  #line 6023 
  if (! tp->link_up && (unsigned int)tp->link_config.autoneg == 1U) {
    #line 6025 
    u32 bmcr;
    #line 6027 
    tg3_readphy(tp,0,& bmcr);
    #line 6028 
    if ((bmcr & 4096U) != 0U) {
      #line 6029 
      u32 phy1;
      #line 6029 
      u32 phy2;
      #line 6032 
      tg3_writephy(tp,28,31744U);
      #line 6033 
      tg3_readphy(tp,28,& phy1);
      #line 6036 
      tg3_writephy(tp,23,3841U);
      #line 6038 
      tg3_readphy(tp,21,& phy2);
      #line 6039 
      tg3_readphy(tp,21,& phy2);
      #line 6041 
      if ((phy1 & 16U) != 0U && (phy2 & 32U) == 0U) {
        #line 6047 
        bmcr &= 4294963199U;
        #line 6048 
        bmcr |= 320U;
        #line 6049 
        tg3_writephy(tp,0,bmcr);
        #line 6050 
        tp->phy_flags |= 131072U;
      }
    }
  }
  else 
    #line 6053 
    if (((int)tp->link_up != 0 && (unsigned int)tp->link_config.autoneg == 1U) && (tp->phy_flags & 131072U) != 0U) {
      #line 6056 
      u32 phy2_0;
      #line 6059 
      tg3_writephy(tp,23,3841U);
      #line 6061 
      tg3_readphy(tp,21,& phy2_0);
      #line 6062 
      if ((phy2_0 & 32U) != 0U) {
        #line 6063 
        u32 bmcr_0;
        #line 6066 
        tg3_readphy(tp,0,& bmcr_0);
        #line 6067 
        tg3_writephy(tp,0,bmcr_0 | 4096U);
        #line 6069 
        tp->phy_flags &= 4294836223U;
      }
    }
  #line 6072 
  return;
}

#line 6075  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
static int tg3_setup_phy(struct tg3 *tp, bool force_reset)
{
  #line 6077 
  u32 val;
  #line 6078 
  int err;
  #line 6080 
  if ((tp->phy_flags & 16U) != 0U) 
                                   #line 6081 
                                   err = tg3_setup_fiber_phy(tp,(_Bool)((bool)((int)force_reset) != 0));
  else 
    #line 6082 
    if ((tp->phy_flags & 32U) != 0U) 
                                     #line 6083 
                                     err = tg3_setup_fiber_mii_phy(tp,(_Bool)((bool)((int)force_reset) != 0)); else 
                                                                    #line 6085 
                                                                    err = tg3_setup_copper_phy(tp,(_Bool)((bool)((int)force_reset) != 0));
  #line 6087 
  if (tp->pci_chip_rev_id >> 8 == 358464U) {
    #line 6088 
    u32 scale;
    #line 6090 
    val = (*(tp->read32))(tp,13872U) & 2031616U;
    #line 6091 
    if (val == 0U) 
                   #line 6092 
                   scale = 65U;
    else 
      #line 6093 
      if (val == 1245184U) 
                           #line 6094 
                           scale = 6U; else 
                                            #line 6096 
                                            scale = 12U;
    #line 6098 
    val = (*(tp->read32))(tp,26628U) & 4294967041U;
    #line 6099 
    val = (scale << 1) | val;
    #line 6100 
    (*(tp->write32))(tp,26628U,val);
  }
  #line 6103 
  val = 9728U;
  #line 6105 
  if (tp->pci_chip_rev_id >> 12 == 22304U || tp->pci_chip_rev_id >> 12 == 22370U) {
    #line 6109 
    val = ((*(tp->read32))(tp,1124U) & 4294901760U) | val;
  }
  #line 6111 
  if (tp->link_config.active_speed == 1000U && (unsigned int)tp->link_config.active_duplex == 0U) 
    #line 6113 
    (*(tp->write32))(tp,1124U,val | 255U); else 
                                                #line 6116 
                                                (*(tp->write32))(tp,1124U,val | 32U);
  #line 6119 
  if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_5705_PLUS,
                  (unsigned long *)(& tp->tg3_flags)) == 0) 
    #line 6120 
    if ((int)tp->link_up != 0) 
                               #line 6121 
                               (*(tp->write32))(tp,15400U,tp->coal.stats_block_coalesce_usecs); else 
                                                                    #line 6124 
                                                                    (*(tp->write32))(tp,15400U,0U);
  #line 6128 
  if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_ASPM_WORKAROUND,
                  (unsigned long *)(& tp->tg3_flags)) != 0) {
    #line 6129 
    val = (*(tp->read32))(tp,32040U);
    #line 6130 
    if (! tp->link_up) 
                       #line 6131 
                       val = (val & 4294902015U) | tp->pwrmgmt_thresh; else 
                                                                    #line 6134 
                                                                    val |= 65280U;
    #line 6135 
    (*(tp->write32))(tp,32040U,val);
  }
  #line 6138 
  return err;
}

#line 6142  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
static u64 tg3_refclk_read(struct tg3 *tp, struct ptp_system_timestamp *sts)
{
  #line 6144 
  u64 stamp;
  #line 6146 
  ptp_read_system_prets(sts);
  #line 6147 
  stamp = (unsigned long long)(*(tp->read32))(tp,26880U);
  #line 6148 
  ptp_read_system_postts(sts);
  #line 6149 
  stamp = ((unsigned long long)(*(tp->read32))(tp,26884U) << 32) | stamp;
  #line 6151 
  return stamp;
}

#line 6155  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
static void tg3_refclk_write(struct tg3 *tp, u64 newval)
{
  #line 6157 
  u32 clock_ctl = (*(tp->read32))(tp,26888U);
  #line 6159 
  (*(tp->write32))(tp,26888U,clock_ctl | 2U);
  #line 6160 
  (*(tp->write32))(tp,26880U,(unsigned int)newval);
  #line 6161 
  (*(tp->write32))(tp,26884U,(unsigned int)(newval >> 32));
  #line 6162 
  _tw32_flush(tp,26888U,clock_ctl | 4U,0U);
  #line 6163 
  return;
}

#line 6165 
#line 7462 
static void tg3_full_lock(struct tg3 *tp, int irq_sync);
#line 6166 
#line 7469 
static void tg3_full_unlock(struct tg3 *tp);
#line 6167  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
static int tg3_get_ts_info(struct net_device *dev, struct ethtool_ts_info *info)
{
  #line 6169 
  struct tg3 *tp = netdev_priv(dev);
  #line 6171 
  info->so_timestamping = 26U;
  #line 6175 
  if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_PTP_CAPABLE,
                  (unsigned long *)(& tp->tg3_flags)) != 0) 
    #line 6176 
    info->so_timestamping |= 69U;
  #line 6181 
  if (tp->ptp_clock != (struct ptp_clock *)0) 
                                              #line 6182 
                                              info->phc_index = ptp_clock_index(tp->ptp_clock); else 
                                                                    #line 6184 
                                                                    info->phc_index = -1;
  #line 6186 
  info->tx_types = 3U;
  #line 6188 
  info->rx_filters = 585U;
  #line 6192 
  return 0;
}

#line 6195  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
static int tg3_ptp_adjfreq(struct ptp_clock_info *ptp, s32 ppb)
{
  #line 6197 
  void *__mptr;
  #line 6197 
  __mptr = (void *)ptp;
  #line 6197 
  struct tg3 *tp = ((struct tg3 *)(__mptr + 18446744073709551392U));
  #line 6198 
  bool neg_adj = (_Bool)0;
  #line 6199 
  u32 correction = 0U;
  #line 6201 
  if (ppb < 0) {
    #line 6202 
    neg_adj = (_Bool)1;
    #line 6203 
    ppb = - ppb;
  }
  #line 6214 
  correction = (unsigned int)div_u64((unsigned long long)ppb * 16777216ULL,1000000000U) & 16777215U;
  #line 6217 
  tg3_full_lock(tp,0);
  #line 6219 
  if (correction != 0U) {
    #line 6220 
    unsigned int tmp_1;
    #line 6220 
    if ((int)neg_adj != 0) 
                           #line 6220 
                           tmp_1 = 3221225472U; else 
                                                     #line 6220 
                                                     tmp_1 = 2147483648U;
    #line 6220 
    ;
    #line 6220 
    ;
    #line 6220 
    (*(tp->write32))(tp,26920U,tmp_1 | correction);
  }
  else 
       #line 6224 
       (*(tp->write32))(tp,26920U,0U);
  #line 6226 
  tg3_full_unlock(tp);
  #line 6228 
  return 0;
}

#line 6231  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
static int tg3_ptp_adjtime(struct ptp_clock_info *ptp, s64 delta)
{
  #line 6233 
  void *__mptr;
  #line 6233 
  __mptr = (void *)ptp;
  #line 6233 
  struct tg3 *tp = ((struct tg3 *)(__mptr + 18446744073709551392U));
  #line 6235 
  tg3_full_lock(tp,0);
  #line 6236 
  tp->ptp_adjust += delta;
  #line 6237 
  tg3_full_unlock(tp);
  #line 6239 
  return 0;
}

#line 6242  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
static int tg3_ptp_gettimex(struct ptp_clock_info *ptp, struct timespec64 *ts, struct ptp_system_timestamp *sts)
{
  #line 6246 
  void *__mptr;
  #line 6245 
  u64 ns;
  #line 6246 
  __mptr = (void *)ptp;
  #line 6246 
  struct tg3 *tp = ((struct tg3 *)(__mptr + 18446744073709551392U));
  #line 6248 
  tg3_full_lock(tp,0);
  #line 6249 
  ns = tg3_refclk_read(tp,sts);
  #line 6250 
  ns = (unsigned long long)tp->ptp_adjust + ns;
  #line 6251 
  tg3_full_unlock(tp);
  #line 6253 
  *ts = ns_to_timespec64((long long)ns);
  #line 6255 
  return 0;
}

#line 6258  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
static int tg3_ptp_settime(struct ptp_clock_info *ptp, struct timespec64 *ts)
{
  #line 6262 
  void *__mptr;
  #line 6261 
  u64 ns;
  #line 6262 
  __mptr = (void *)ptp;
  #line 6262 
  struct tg3 *tp = ((struct tg3 *)(__mptr + 18446744073709551392U));
  #line 6264 
  ns = (unsigned long long)timespec64_to_ns(ts);
  #line 6266 
  tg3_full_lock(tp,0);
  #line 6267 
  tg3_refclk_write(tp,ns);
  #line 6268 
  tp->ptp_adjust = 0LL;
  #line 6269 
  tg3_full_unlock(tp);
  #line 6271 
  return 0;
}

#line 6274  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
static int tg3_ptp_enable(struct ptp_clock_info *ptp, struct ptp_clock_request *rq, int on)
{
  #line 6277 
  void *__mptr;
  #line 6278 
  u32 clock_ctl;
  #line 6277 
  __mptr = (void *)ptp;
  #line 6277 
  struct tg3 *tp = ((struct tg3 *)(__mptr + 18446744073709551392U));
  #line 6279 
  int rval = 0;
  #line 6281 
  switch ((unsigned int)rq->type) {
    #line 6282 
    case (unsigned int)1: 
                          #line 6282 
    ;
    #line 6284 
    if (rq->__anonCompField_ptp_clock_request_207.perout.flags != 0U) 
      #line 6285 
      return -95;
    #line 6287 
    if (rq->__anonCompField_ptp_clock_request_207.perout.index != 0U) 
      #line 6288 
      return -22;
    #line 6290 
    tg3_full_lock(tp,0);
    #line 6291 
    clock_ctl = (*(tp->read32))(tp,26888U);
    #line 6292 
    clock_ctl &= 4294770687U;
    #line 6294 
    if (on != 0) {
      #line 6295 
      u64 nsec;
      #line 6297 
      nsec = (unsigned long long)rq->__anonCompField_ptp_clock_request_207.perout.start.sec * 1000000000ULL + (unsigned long long)rq->__anonCompField_ptp_clock_request_207.perout.start.nsec;
      #line 6300 
      if (rq->__anonCompField_ptp_clock_request_207.perout.period.sec != 0LL || rq->__anonCompField_ptp_clock_request_207.perout.period.nsec != 0U) {
        #line 6301 
        netdev_warn(tp->dev,(char *)"Device supports only a one-shot timesync output, period must be 0\n");
        #line 6303 
        rval = -22;
        #line 6304 
        goto err_out;
      }
      #line 6307 
      if ((nsec & 9223372036854775808ULL) != 0ULL) {
        #line 6308 
        netdev_warn(tp->dev,(char *)"Start value (nsec) is over limit. Maximum size of start is only 63 bits\n");
        #line 6310 
        rval = -22;
        #line 6311 
        goto err_out;
      }
      #line 6314 
      (*(tp->write32))(tp,26904U,(unsigned int)nsec);
      #line 6315 
      (*(tp->write32))(tp,26908U,(unsigned int)(nsec >> 32) | 2147483648U);
      #line 6319 
      (*(tp->write32))(tp,26888U,clock_ctl | 131072U);
    }
    else {
      #line 6322 
      (*(tp->write32))(tp,26908U,0U);
      #line 6323 
      (*(tp->write32))(tp,26888U,clock_ctl);
    }
    #line 6326 
    err_out: 
             #line 6326 
    ;
    #line 6327 
    tg3_full_unlock(tp);
    #line 6328 
    return rval;
    #line 6330 
    default: 
             #line 6330 
    ;
    #line 6331 
    break;
  }
  #line 6334 
  return -95;
}

#line 6337  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
static struct ptp_clock_info tg3_ptp_caps = {.owner = & __this_module, .name = {(char)'t', (char)'g', (char)'3', (char)' ', (char)'c', (char)'l', (char)'o', (char)'c', (char)'k'}, .max_adj = 250000000, .n_per_out = 1, .adjfreq = & tg3_ptp_adjfreq, .adjtime = & tg3_ptp_adjtime, .gettimex64 = & tg3_ptp_gettimex, .settime64 = & tg3_ptp_settime, .enable = & tg3_ptp_enable};
#line 6353  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
static void tg3_hwclock_to_timestamp(struct tg3 *tp, u64 hwclock, struct skb_shared_hwtstamps *timestamp)
{
  #line 6356 
  memset((void *)timestamp,0,8UL);
  #line 6357 
  timestamp->hwtstamp = ns_to_ktime((hwclock & 9223372036854775807ULL) + (unsigned long long)tp->ptp_adjust);
  #line 6359 
  return;
}

#line 6362  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
static void tg3_ptp_init(struct tg3 *tp)
{
  #line 6364 
  if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_PTP_CAPABLE,
                (unsigned long *)(& tp->tg3_flags)) == 0) 
    #line 6365 
    return;
  #line 6368 
  ;
  #line 6368 
  tg3_refclk_write(tp,(unsigned long long)ktime_to_ns(ktime_get_real()));
  #line 6369 
  tp->ptp_adjust = 0LL;
  #line 6370 
  tp->ptp_info = tg3_ptp_caps;
  #line 6371 
  return;
}

#line 6374  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
static void tg3_ptp_resume(struct tg3 *tp)
{
  #line 6376 
  if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_PTP_CAPABLE,
                (unsigned long *)(& tp->tg3_flags)) == 0) 
    #line 6377 
    return;
  #line 6379 
  ;
  #line 6379 
  ;
  #line 6379 
  tg3_refclk_write(tp,(unsigned long long)(ktime_to_ns(ktime_get_real()) + tp->ptp_adjust));
  #line 6380 
  tp->ptp_adjust = 0LL;
  #line 6381 
  return;
}

#line 6383  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
static void tg3_ptp_fini(struct tg3 *tp)
{
  #line 6385 
  if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_PTP_CAPABLE,
                (unsigned long *)(& tp->tg3_flags)) == 0) 
    #line 6386 
    return;
  else 
    #line 6385 
    if (tp->ptp_clock == (struct ptp_clock *)0) 
                                                #line 6386 
                                                return;
  #line 6388 
  ptp_clock_unregister(tp->ptp_clock);
  #line 6389 
  tp->ptp_clock = (struct ptp_clock *)0;
  #line 6390 
  tp->ptp_adjust = 0LL;
  #line 6391 
  return;
}

#line 6393  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
__inline static int tg3_irq_sync(struct tg3 *tp)
{
  #line 6395 
  return (int)tp->irq_sync;
}

#line 6398  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
__inline static void tg3_rd32_loop(struct tg3 *tp, u32 *dst, u32 off, u32 len)
{
  #line 6400 
  int i;
  #line 6402 
  dst = (u32 *)((u8 *)dst + (unsigned long)off);
  #line 6403 
  i = 0;
  #line 6403 
  while ((unsigned int)i < len) {
    #line 6404 
    u32 *tmp;
    #line 6404 
    tmp = dst;
    #line 6404 
    dst ++;
    #line 6404 
    *tmp = (*(tp->read32))(tp,off + (unsigned int)i);
    #line 6403 
    i = (int)((unsigned int)i + 4U);
  }
  #line 6405 
  return;
}

#line 6407  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
static void tg3_dump_legacy_regs(struct tg3 *tp, u32 *regs)
{
  #line 6409 
  tg3_rd32_loop(tp,regs,0U,176U);
  #line 6410 
  tg3_rd32_loop(tp,regs,512U,512U);
  #line 6411 
  tg3_rd32_loop(tp,regs,1024U,1264U);
  #line 6412 
  tg3_rd32_loop(tp,regs,3072U,224U);
  #line 6413 
  tg3_rd32_loop(tp,regs,4096U,4U);
  #line 6414 
  tg3_rd32_loop(tp,regs,5120U,128U);
  #line 6415 
  tg3_rd32_loop(tp,regs,6144U,72U);
  #line 6416 
  tg3_rd32_loop(tp,regs,7168U,4U);
  #line 6417 
  tg3_rd32_loop(tp,regs,8192U,32U);
  #line 6418 
  tg3_rd32_loop(tp,regs,8448U,348U);
  #line 6419 
  tg3_rd32_loop(tp,regs,9216U,12U);
  #line 6420 
  tg3_rd32_loop(tp,regs,9280U,60U);
  #line 6421 
  tg3_rd32_loop(tp,regs,9344U,68U);
  #line 6422 
  tg3_rd32_loop(tp,regs,10240U,4U);
  #line 6423 
  tg3_rd32_loop(tp,regs,11264U,32U);
  #line 6424 
  tg3_rd32_loop(tp,regs,12288U,20U);
  #line 6425 
  tg3_rd32_loop(tp,regs,13312U,8U);
  #line 6426 
  tg3_rd32_loop(tp,regs,14336U,8U);
  #line 6427 
  tg3_rd32_loop(tp,regs,15360U,256U);
  #line 6429 
  if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_SUPPORT_MSIX,
                (unsigned long *)(& tp->tg3_flags)) != 0) 
    #line 6430 
    tg3_rd32_loop(tp,regs,15744U,384U);
  #line 6432 
  tg3_rd32_loop(tp,regs,16384U,16U);
  #line 6433 
  tg3_rd32_loop(tp,regs,17408U,88U);
  #line 6434 
  tg3_rd32_loop(tp,regs,18432U,8U);
  #line 6435 
  tg3_rd32_loop(tp,regs,19456U,8U);
  #line 6436 
  tg3_rd32_loop(tp,regs,20480U,4U);
  #line 6437 
  tg3_rd32_loop(tp,regs,20484U,4U);
  #line 6438 
  tg3_rd32_loop(tp,regs,20508U,4U);
  #line 6439 
  tg3_rd32_loop(tp,regs,20532U,4U);
  #line 6441 
  if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_5705_PLUS,
                  (unsigned long *)(& tp->tg3_flags)) == 0) {
    #line 6442 
    tg3_rd32_loop(tp,regs,21504U,4U);
    #line 6443 
    tg3_rd32_loop(tp,regs,21508U,4U);
    #line 6444 
    tg3_rd32_loop(tp,regs,21532U,4U);
  }
  #line 6447 
  tg3_rd32_loop(tp,regs,22528U,272U);
  #line 6448 
  tg3_rd32_loop(tp,regs,23552U,288U);
  #line 6449 
  tg3_rd32_loop(tp,regs,24576U,12U);
  #line 6450 
  tg3_rd32_loop(tp,regs,25600U,4U);
  #line 6451 
  tg3_rd32_loop(tp,regs,26624U,76U);
  #line 6453 
  if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_NVRAM,
                  (unsigned long *)(& tp->tg3_flags)) != 0) 
    #line 6454 
    tg3_rd32_loop(tp,regs,28672U,36U);
  #line 6455 
  return;
}

#line 6457  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
static void tg3_dump_state(struct tg3 *tp)
{
  #line 6459 
  int i;
  #line 6460 
  u32 *regs;
  #line 6462 
  regs = (u32 *)kzalloc(32768UL,2592U);
  #line 6463 
  if (regs == (u32 *)0U) 
                         #line 6464 
                         return;
  #line 6466 
  if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_PCI_EXPRESS,
                  (unsigned long *)(& tp->tg3_flags)) != 0) {
    #line 6468 
    i = 0;
    #line 6468 
    while (i <= 31743) {
      #line 6469 
      *(regs + (unsigned long)i / 4UL) = (*(tp->read32))(tp,(unsigned int)i);
      #line 6468 
      i = (int)((unsigned int)i + 4U);
    }
  }
  else 
       #line 6471 
       tg3_dump_legacy_regs(tp,regs);
  #line 6473 
  i = 0;
  #line 6473 
  while ((unsigned int)i <= 8191U) {
    #line 6474 
    if (((*(regs + (unsigned long)i) == 0U && *(regs + ((unsigned long)i + (unsigned long)1U)) == 0U) && *(regs + ((unsigned long)i + (unsigned long)2U)) == 0U) && *(regs + ((unsigned long)i + (unsigned long)3U)) == 0U) 
      #line 6476 
      goto __Cont;
    #line 6478 
    netdev_err(tp->dev,(char *)"0x%08x: 0x%08x, 0x%08x, 0x%08x, 0x%08x\n",i * 4,*(regs + (unsigned long)i),*(regs + ((unsigned long)i + (unsigned long)1U)),*(regs + ((unsigned long)i + (unsigned long)2U)),*(regs + ((unsigned long)i + (unsigned long)3U)));
    #line 6473 
    __Cont: 
            #line 6473 
    i += 4;
  }
  #line 6483 
  kfree((void *)regs);
  #line 6485 
  i = 0;
  #line 6485 
  while (tp->irq_cnt > (unsigned int)i) {
    {
      #line 6486 
      struct tg3_napi *tnapi = & tp->napi[i];
      #line 6489 
      netdev_err(tp->dev,(char *)"%d: Host status block [%08x:%08x:(%04x:%04x:%04x):(%04x:%04x)]\n",i,(tnapi->hw_status)->status,(tnapi->hw_status)->status_tag,(int)(tnapi->hw_status)->rx_jumbo_consumer,(int)(tnapi->hw_status)->rx_consumer,(int)(tnapi->hw_status)->rx_mini_consumer,(int)(tnapi->hw_status)->idx[0].rx_producer,(int)(tnapi->hw_status)->idx[0].tx_consumer);
      #line 6500 
      netdev_err(tp->dev,(char *)"%d: NAPI info [%08x:%08x:(%04x:%04x:%04x):%04x:(%04x:%04x:%04x:%04x)]\n",i,tnapi->last_tag,tnapi->last_irq_tag,tnapi->tx_prod,tnapi->tx_cons,tnapi->tx_pending,tnapi->rx_rcb_ptr,tnapi->prodring.rx_std_prod_idx,tnapi->prodring.rx_std_cons_idx,tnapi->prodring.rx_jmb_prod_idx,tnapi->prodring.rx_jmb_cons_idx);
    }
    #line 6485 
    i ++;
  }
  #line 6511 
  return;
}

#line 6519  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
static void tg3_tx_recover(struct tg3 *tp)
{
  #line 6521 
  if ((long)(_tg3_flag((enum TG3_FLAGS)TG3_FLAG_MBOX_WRITE_REORDER,
                (unsigned long *)(& tp->tg3_flags)) != 0) != 0L) 
    #line 6521 
    goto _LOR;
  else 
    #line 6521 
    if ((long)(tp->write32_tx_mbox == & tg3_write_indirect_mbox) != 0L) {
      #line 6521 
      _LOR: {
              #line 6522 
              ldv_inline_asm();
              #line 6523 
              ldv_inline_asm();
              #line 6524 
              ldv_inline_asm();
              #line 6521 
              ;
            }
    }
  #line 6524 
  netdev_warn(tp->dev,(char *)"The system may be re-ordering memory-mapped I/O ");
  #line 6530 
  _tg3_flag_set((enum TG3_FLAGS)TG3_FLAG_TX_RECOVERY_PENDING,(unsigned long *)(& tp->tg3_flags));
  #line 6531 
  return;
}

#line 6533  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
__inline static u32 tg3_tx_avail(struct tg3_napi *tnapi)
{
  #line 6535 
  ldv_inline_asm();
  #line 6537 
  return tnapi->tx_pending - ((tnapi->tx_prod - tnapi->tx_cons) & 511U);
}

#line 6545  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
static void tg3_tx(struct tg3_napi *tnapi)
{
  #line 6550 
  struct netdev_queue *txq;
  #line 6547 
  struct tg3 *tp = tnapi->tp;
  #line 6548 
  u32 hw_idx = (unsigned int)(tnapi->hw_status)->idx[0].tx_consumer;
  #line 6549 
  u32 sw_idx = tnapi->tx_cons;
  #line 6551 
  int index = (int)((tnapi - (struct tg3_napi *)(& tp->napi)) / 704L);
  #line 6552 
  unsigned int pkts_compl = 0U;
  #line 6552 
  unsigned int bytes_compl = 0U;
  #line 6554 
  if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_ENABLE_TSS,
                (unsigned long *)(& tp->tg3_flags)) != 0) 
    #line 6555 
    index --;
  #line 6557 
  txq = netdev_get_tx_queue(tp->dev,(unsigned int)index);
  #line 6559 
  while (sw_idx != hw_idx) {
    #line 6562 
    int i;
    #line 6560 
    struct tg3_tx_ring_info *ri = tnapi->tx_buffers + (unsigned long)sw_idx;
    #line 6561 
    struct sk_buff *skb = ri->skb;
    #line 6562 
    int tx_bug = 0;
    #line 6564 
    if ((long)(skb == (struct sk_buff *)0) != 0L) {
      #line 6565 
      tg3_tx_recover(tp);
      #line 6566 
      return;
    }
    #line 6569 
    if (((tnapi->tx_ring + (unsigned long)sw_idx)->len_flags & 32U) != 0U) {
      #line 6570 
      struct skb_shared_hwtstamps timestamp;
      #line 6571 
      u64 hwclock = (unsigned long long)(*(tp->read32))(tp,1472U);
      #line 6572 
      hwclock = ((unsigned long long)(*(tp->read32))(tp,1476U) << 32) | hwclock;
      #line 6574 
      tg3_hwclock_to_timestamp(tp,hwclock,& timestamp);
      #line 6576 
      skb_tstamp_tx(skb,& timestamp);
    }
    #line 6579 
    ;
    #line 6579 
    ;
    #line 6579 
    pci_unmap_single(tp->pdev,ri->mapping,(unsigned long)skb_headlen(skb),1);
    #line 6584 
    ri->skb = (struct sk_buff *)0;
    #line 6586 
    while ((int)ri->fragmented != 0) {
      #line 6587 
      ri->fragmented = (_Bool)0;
      #line 6588 
      sw_idx = (sw_idx + 1U) & 511U;
      #line 6589 
      ri = tnapi->tx_buffers + (unsigned long)sw_idx;
    }
    #line 6592 
    sw_idx = (sw_idx + 1U) & 511U;
    #line 6594 
    i = 0;
    #line 6594 
    while (1) {
      #line 6594 
      ;
      #line 6594 
      if (! ((int)((struct skb_shared_info *)skb_end_pointer(skb))->nr_frags > i)) 
        #line 6594 
        break;
      {
        #line 6595 
        ri = tnapi->tx_buffers + (unsigned long)sw_idx;
        #line 6596 
        if ((long)(ri->skb != (struct sk_buff *)0) != 0L || (long)(sw_idx == hw_idx) != 0L) 
          #line 6597 
          tx_bug = 1;
        #line 6599 
        ;
        #line 6599 
        ;
        #line 6599 
        pci_unmap_page(tp->pdev,ri->mapping,(unsigned long)skb_frag_size(& ((struct skb_shared_info *)skb_end_pointer(skb))->frags[i]),1);
        #line 6604 
        while ((int)ri->fragmented != 0) {
          #line 6605 
          ri->fragmented = (_Bool)0;
          #line 6606 
          sw_idx = (sw_idx + 1U) & 511U;
          #line 6607 
          ri = tnapi->tx_buffers + (unsigned long)sw_idx;
        }
        #line 6610 
        sw_idx = (sw_idx + 1U) & 511U;
      }
      #line 6594 
      i ++;
    }
    #line 6613 
    pkts_compl ++;
    #line 6614 
    bytes_compl = skb->len + bytes_compl;
    #line 6616 
    dev_consume_skb_any(skb);
    #line 6618 
    if ((long)(tx_bug != 0) != 0L) {
      #line 6619 
      tg3_tx_recover(tp);
      #line 6620 
      return;
    }
  }
  #line 6624 
  netdev_tx_completed_queue(txq,pkts_compl,bytes_compl);
  #line 6626 
  tnapi->tx_cons = sw_idx;
  #line 6627 
  ldv_inline_asm();
  #line 6635 
  if ((long)((int)netif_tx_queue_stopped(txq) != 0) != 0L) {
    #line 6635 
    ;
    #line 6635 
    if ((long)(tg3_tx_avail(tnapi) > tnapi->tx_pending / 4U) != 0L) {
      #line 6637 
      int pscr_ret__;
      #line 6637 
      __this_cpu_preempt_check((char *)"read");
      {
        #line 6637 
        void *__vpp_verify = (void *)0;
        #line 6637 
        void *tmp_6 = __vpp_verify;
      }
      #line 6637 
      switch (4UL) {
        #line 6637 
        int pfo_ret__;
        #line 6637 
        int pfo_ret___0;
        #line 6637 
        int pfo_ret___1;
        #line 6637 
        int pfo_ret___2;
        #line 6637 
        case (unsigned long)1: 
                               #line 6637 
        ;
        #line 6637 
        switch (4UL) {
          #line 6637 
          case (unsigned long)1: 
                                 #line 6637 
          ;
          #line 6638 
          ldv_inline_asm();
          #line 6637 
          break;
          #line 6637 
          case (unsigned long)2: 
                                 #line 6637 
          ;
          #line 6638 
          ldv_inline_asm();
          #line 6637 
          break;
          #line 6637 
          case (unsigned long)4: 
                                 #line 6637 
          ;
          #line 6638 
          ldv_inline_asm();
          #line 6637 
          break;
          #line 6637 
          case (unsigned long)8: 
                                 #line 6637 
          ;
          #line 6638 
          ldv_inline_asm();
          #line 6637 
          break;
          #line 6637 
          default: 
                   #line 6637 
          ;
          #line 6637 
          __bad_percpu_size();
        }
        #line 6637 
        pscr_ret__ = pfo_ret__;
        #line 6637 
        break;
        #line 6637 
        case (unsigned long)2: 
                               #line 6637 
        ;
        #line 6637 
        switch (4UL) {
          #line 6637 
          case (unsigned long)1: 
                                 #line 6637 
          ;
          #line 6638 
          ldv_inline_asm();
          #line 6637 
          break;
          #line 6637 
          case (unsigned long)2: 
                                 #line 6637 
          ;
          #line 6638 
          ldv_inline_asm();
          #line 6637 
          break;
          #line 6637 
          case (unsigned long)4: 
                                 #line 6637 
          ;
          #line 6638 
          ldv_inline_asm();
          #line 6637 
          break;
          #line 6637 
          case (unsigned long)8: 
                                 #line 6637 
          ;
          #line 6638 
          ldv_inline_asm();
          #line 6637 
          break;
          #line 6637 
          default: 
                   #line 6637 
          ;
          #line 6637 
          __bad_percpu_size();
        }
        #line 6637 
        pscr_ret__ = pfo_ret___0;
        #line 6637 
        break;
        #line 6637 
        case (unsigned long)4: 
                               #line 6637 
        ;
        #line 6637 
        switch (4UL) {
          #line 6637 
          case (unsigned long)1: 
                                 #line 6637 
          ;
          #line 6638 
          ldv_inline_asm();
          #line 6637 
          break;
          #line 6637 
          case (unsigned long)2: 
                                 #line 6637 
          ;
          #line 6638 
          ldv_inline_asm();
          #line 6637 
          break;
          #line 6637 
          case (unsigned long)4: 
                                 #line 6637 
          ;
          #line 6638 
          ldv_inline_asm();
          #line 6637 
          break;
          #line 6637 
          case (unsigned long)8: 
                                 #line 6637 
          ;
          #line 6638 
          ldv_inline_asm();
          #line 6637 
          break;
          #line 6637 
          default: 
                   #line 6637 
          ;
          #line 6637 
          __bad_percpu_size();
        }
        #line 6637 
        pscr_ret__ = pfo_ret___1;
        #line 6637 
        break;
        #line 6637 
        case (unsigned long)8: 
                               #line 6637 
        ;
        #line 6637 
        switch (4UL) {
          #line 6637 
          case (unsigned long)1: 
                                 #line 6637 
          ;
          #line 6638 
          ldv_inline_asm();
          #line 6637 
          break;
          #line 6637 
          case (unsigned long)2: 
                                 #line 6637 
          ;
          #line 6638 
          ldv_inline_asm();
          #line 6637 
          break;
          #line 6637 
          case (unsigned long)4: 
                                 #line 6637 
          ;
          #line 6638 
          ldv_inline_asm();
          #line 6637 
          break;
          #line 6637 
          case (unsigned long)8: 
                                 #line 6637 
          ;
          #line 6638 
          ldv_inline_asm();
          #line 6637 
          break;
          #line 6637 
          default: 
                   #line 6637 
          ;
          #line 6637 
          __bad_percpu_size();
        }
        #line 6637 
        pscr_ret__ = pfo_ret___2;
        #line 6637 
        break;
        #line 6637 
        default: 
                 #line 6637 
        ;
        #line 6637 
        __bad_size_call_parameter();
        #line 6637 
        break;
      }
      #line 6637 
      ;
      #line 6637 
      __netif_tx_lock(txq,pscr_ret__);
      #line 6638 
      if ((int)netif_tx_queue_stopped(txq) != 0) {
        #line 6638 
        ;
        #line 6638 
        if (tg3_tx_avail(tnapi) > tnapi->tx_pending / 4U) 
                                                          #line 6640 
                                                          netif_tx_wake_queue(txq);
      }
      #line 6641 
      __netif_tx_unlock(txq);
    }
  }
  #line 6643 
  return;
}

#line 6645  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
static void tg3_frag_free(bool is_frag, void *data)
{
  #line 6647 
  if ((int)is_frag != 0) 
                         #line 6648 
                         skb_free_frag(data); else 
                                                   #line 6650 
                                                   kfree(data);
  #line 6651 
  return;
}

#line 6653  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
static void tg3_rx_data_free(struct tg3 *tp, struct ring_info *ri, u32 map_sz)
{
  #line 6655 
  unsigned int skb_size = ((map_sz + 127U) & 4294967232U) + 320U;
  #line 6658 
  if (ri->data == (u8 *)0U) 
                            #line 6659 
                            return;
  #line 6661 
  pci_unmap_single(tp->pdev,ri->mapping,(unsigned long)map_sz,2);
  #line 6663 
  tg3_frag_free((_Bool)(skb_size <= 4096U),(void *)ri->data);
  #line 6664 
  ri->data = (u8 *)0U;
  #line 6665 
  return;
}

#line 6679  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
static int tg3_alloc_rx_data(struct tg3 *tp, struct tg3_rx_prodring_set *tpr, u32 opaque_key, u32 dest_idx_unmasked, unsigned int *frag_size)
{
  #line 6683 
  struct tg3_rx_buffer_desc *desc;
  #line 6684 
  struct ring_info *map;
  #line 6685 
  u8 *data;
  #line 6686 
  dma_addr_t mapping;
  #line 6687 
  int skb_size;
  #line 6687 
  int data_size;
  #line 6687 
  int dest_idx;
  #line 6689 
  switch (opaque_key) {
    #line 6690 
    case (u32)65536: 
                     #line 6690 
    ;
    #line 6691 
    dest_idx = (int)(tp->rx_std_ring_mask & dest_idx_unmasked);
    #line 6692 
    desc = tpr->rx_std + (unsigned long)dest_idx;
    #line 6693 
    map = tpr->rx_std_buffers + (unsigned long)dest_idx;
    #line 6694 
    data_size = (int)tp->rx_pkt_map_sz;
    #line 6695 
    break;
    #line 6697 
    case (u32)131072: 
                      #line 6697 
    ;
    #line 6698 
    dest_idx = (int)(tp->rx_jmb_ring_mask & dest_idx_unmasked);
    #line 6699 
    desc = & (tpr->rx_jmb + (unsigned long)dest_idx)->std;
    #line 6700 
    map = tpr->rx_jmb_buffers + (unsigned long)dest_idx;
    #line 6701 
    data_size = 9110;
    #line 6702 
    break;
    #line 6704 
    default: 
             #line 6704 
    ;
    #line 6705 
    return -22;
  }
  #line 6714 
  skb_size = (int)(((unsigned int)(data_size + 127) & 4294967232U) + 320U);
  #line 6716 
  if ((unsigned int)skb_size <= 4096U) {
    #line 6717 
    data = (u8 *)napi_alloc_frag((unsigned int)skb_size);
    #line 6718 
    *frag_size = (unsigned int)skb_size;
  }
  else {
    #line 6720 
    data = (u8 *)kmalloc((unsigned long)skb_size,2592U);
    #line 6721 
    *frag_size = 0U;
  }
  #line 6723 
  if (data == (u8 *)0U) 
                        #line 6724 
                        return -12;
  #line 6726 
  mapping = pci_map_single(tp->pdev,(void *)(data + 64U),(unsigned long)data_size,2);
  #line 6730 
  if ((long)(pci_dma_mapping_error(tp->pdev,mapping) != 0) != 0L) {
    #line 6731 
    tg3_frag_free((_Bool)((unsigned int)skb_size <= 4096U),(void *)data);
    #line 6732 
    return -5;
  }
  #line 6735 
  map->data = data;
  #line 6736 
  map->mapping = mapping;
  #line 6738 
  desc->addr_hi = (unsigned int)(mapping >> 32);
  #line 6739 
  desc->addr_lo = (unsigned int)mapping;
  #line 6741 
  return data_size;
}

#line 6748  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
static void tg3_recycle_rx(struct tg3_napi *tnapi, struct tg3_rx_prodring_set *dpr, u32 opaque_key, int src_idx, u32 dest_idx_unmasked)
{
  #line 6754 
  struct tg3_rx_buffer_desc *src_desc;
  #line 6754 
  struct tg3_rx_buffer_desc *dest_desc;
  #line 6755 
  struct ring_info *src_map;
  #line 6755 
  struct ring_info *dest_map;
  #line 6757 
  int dest_idx;
  #line 6753 
  struct tg3 *tp = tnapi->tp;
  #line 6756 
  struct tg3_rx_prodring_set *spr = & tp->napi[0].prodring;
  #line 6759 
  switch (opaque_key) {
    #line 6760 
    case (u32)65536: 
                     #line 6760 
    ;
    #line 6761 
    dest_idx = (int)(tp->rx_std_ring_mask & dest_idx_unmasked);
    #line 6762 
    dest_desc = dpr->rx_std + (unsigned long)dest_idx;
    #line 6763 
    dest_map = dpr->rx_std_buffers + (unsigned long)dest_idx;
    #line 6764 
    src_desc = spr->rx_std + (unsigned long)src_idx;
    #line 6765 
    src_map = spr->rx_std_buffers + (unsigned long)src_idx;
    #line 6766 
    break;
    #line 6768 
    case (u32)131072: 
                      #line 6768 
    ;
    #line 6769 
    dest_idx = (int)(tp->rx_jmb_ring_mask & dest_idx_unmasked);
    #line 6770 
    dest_desc = & (dpr->rx_jmb + (unsigned long)dest_idx)->std;
    #line 6771 
    dest_map = dpr->rx_jmb_buffers + (unsigned long)dest_idx;
    #line 6772 
    src_desc = & (spr->rx_jmb + (unsigned long)src_idx)->std;
    #line 6773 
    src_map = spr->rx_jmb_buffers + (unsigned long)src_idx;
    #line 6774 
    break;
    #line 6776 
    default: 
             #line 6776 
    ;
    #line 6777 
    return;
  }
  #line 6780 
  dest_map->data = src_map->data;
  #line 6781 
  dest_map->mapping = src_map->mapping;
  #line 6783 
  dest_desc->addr_hi = src_desc->addr_hi;
  #line 6784 
  dest_desc->addr_lo = src_desc->addr_lo;
  #line 6785 
  ldv_inline_asm();
  #line 6791 
  src_map->data = (u8 *)0U;
  #line 6792 
  return;
}

#line 6818  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
static int tg3_rx(struct tg3_napi *tnapi, int budget)
{
  #line 6821 
  u32 work_mask;
  #line 6822 
  u32 std_prod_idx;
  #line 6822 
  u32 jmb_prod_idx;
  #line 6824 
  u16 hw_idx;
  #line 6825 
  int received;
  #line 6820 
  struct tg3 *tp = tnapi->tp;
  #line 6821 
  u32 rx_std_posted = 0U;
  #line 6823 
  u32 sw_idx = tnapi->rx_rcb_ptr;
  #line 6826 
  struct tg3_rx_prodring_set *tpr = & tnapi->prodring;
  #line 6828 
  hw_idx = *(tnapi->rx_rcb_prod_idx);
  #line 6829 
  ldv_inline_asm();
  #line 6834 
  work_mask = 0U;
  #line 6835 
  received = 0;
  #line 6836 
  std_prod_idx = tpr->rx_std_prod_idx;
  #line 6837 
  jmb_prod_idx = tpr->rx_jmb_prod_idx;
  #line 6838 
  while ((unsigned int)hw_idx != sw_idx && budget > 0) {
    #line 6839 
    struct ring_info *ri;
    #line 6841 
    unsigned int len;
    #line 6842 
    struct sk_buff *skb;
    #line 6843 
    dma_addr_t dma_addr;
    #line 6844 
    u32 opaque_key;
    #line 6844 
    u32 desc_idx;
    #line 6844 
    u32 *post_ptr;
    #line 6845 
    u8 *data;
    #line 6840 
    struct tg3_rx_buffer_desc *desc = tnapi->rx_rcb + (unsigned long)sw_idx;
    #line 6846 
    u64 tstamp = 0ULL;
    #line 6848 
    desc_idx = desc->opaque & 65535U;
    #line 6849 
    opaque_key = desc->opaque & 458752U;
    #line 6850 
    if (opaque_key == 65536U) {
      #line 6851 
      ri = tp->napi[0].prodring.rx_std_buffers + (unsigned long)desc_idx;
      #line 6852 
      dma_addr = ri->mapping;
      #line 6853 
      data = ri->data;
      #line 6854 
      post_ptr = & std_prod_idx;
      #line 6855 
      rx_std_posted ++;
    }
    else 
      #line 6856 
      if (opaque_key == 131072U) {
        #line 6857 
        ri = tp->napi[0].prodring.rx_jmb_buffers + (unsigned long)desc_idx;
        #line 6858 
        dma_addr = ri->mapping;
        #line 6859 
        data = ri->data;
        #line 6860 
        post_ptr = & jmb_prod_idx;
      }
      else 
           #line 6862 
           goto next_pkt_nopost;
    #line 6864 
    work_mask |= opaque_key;
    #line 6866 
    if ((desc->err_vlan & 32440320U) != 0U) {
      #line 6867 
      drop_it: 
               #line 6867 
      ;
      #line 6868 
      tg3_recycle_rx(tnapi,tpr,opaque_key,(int)desc_idx,*post_ptr);
      #line 6870 
      drop_it_no_recycle: 
                          #line 6870 
      ;
      #line 6872 
      (tp->rx_dropped) ++;
      #line 6873 
      goto next_pkt;
    }
    #line 6876 
    __builtin_prefetch((void const *)((void *)(data + 64U)));
    #line 6877 
    len = (desc->idx_len & 65535U) + 4294967292U;
    #line 6880 
    if ((desc->type_flags & 528U) == 16U || (desc->type_flags & 528U) == 512U) {
      #line 6884 
      tstamp = (unsigned long long)(*(tp->read32))(tp,1712U);
      #line 6885 
      tstamp = ((unsigned long long)(*(tp->read32))(tp,1716U) << 32) | tstamp;
    }
    #line 6888 
    if (len > 256U) {
      #line 6889 
      int skb_size;
      #line 6890 
      unsigned int frag_size;
      #line 6892 
      skb_size = tg3_alloc_rx_data(tp,tpr,opaque_key,*post_ptr,& frag_size);
      #line 6894 
      if (skb_size < 0) 
                        #line 6895 
                        goto drop_it;
      #line 6897 
      pci_unmap_single(tp->pdev,dma_addr,(unsigned long)skb_size,2);
      #line 6898 
      ldv_inline_asm();
      #line 6905 
      ri->data = (u8 *)0U;
      #line 6907 
      skb = build_skb((void *)data,frag_size);
      #line 6908 
      if (skb == (struct sk_buff *)0) {
        #line 6909 
        tg3_frag_free((_Bool)(frag_size != 0U),(void *)data);
        #line 6910 
        goto drop_it_no_recycle;
      }
      #line 6912 
      skb_reserve(skb,64);
    }
    else {
      #line 6914 
      tg3_recycle_rx(tnapi,tpr,opaque_key,(int)desc_idx,*post_ptr);
      #line 6917 
      skb = netdev_alloc_skb(tp->dev,len + 2U);
      #line 6919 
      if (skb == (struct sk_buff *)0) 
                                      #line 6920 
                                      goto drop_it_no_recycle;
      #line 6922 
      skb_reserve(skb,2);
      #line 6923 
      pci_dma_sync_single_for_cpu(tp->pdev,dma_addr,(unsigned long)len,2);
      #line 6924 
      memcpy((void *)skb->data,(void *)(data + 64U),(unsigned long)len);
      #line 6927 
      pci_dma_sync_single_for_device(tp->pdev,dma_addr,(unsigned long)len,2);
    }
    #line 6930 
    skb_put(skb,len);
    #line 6931 
    if (tstamp != 0ULL) {
      #line 6932 
      ;
      #line 6932 
      ;
      #line 6932 
      tg3_hwclock_to_timestamp(tp,tstamp,skb_hwtstamps(skb));
    }
    #line 6935 
    if ((((tp->dev)->features & 549755813888ULL) != 0ULL && (desc->type_flags & 8192U) != 0U) && (desc->ip_tcp_csum & 65535U) == 65535U) 
      #line 6939 
      skb->ip_summed = (unsigned char)1U; else 
                                               #line 6941 
                                               skb_checksum_none_assert(skb);
    #line 6943 
    skb->protocol = eth_type_trans(skb,tp->dev);
    #line 6945 
    if (((tp->dev)->mtu + 14U < len && (unsigned int)skb->protocol != 129U) && (unsigned int)skb->protocol != 43144U) {
      #line 6948 
      dev_kfree_skb_any(skb);
      #line 6949 
      goto drop_it_no_recycle;
    }
    #line 6952 
    if ((desc->type_flags & 64U) != 0U && (tp->rx_mode & 1024U) == 0U) 
      #line 6954 
      __vlan_hwaccel_put_tag(skb,(unsigned short)129,(unsigned short)((int)((unsigned short)desc->err_vlan)));
    #line 6957 
    napi_gro_receive(& tnapi->napi,skb);
    #line 6959 
    received ++;
    #line 6960 
    budget --;
    #line 6962 
    next_pkt: 
              #line 6962 
    ;
    #line 6963 
    (*post_ptr) ++;
    #line 6965 
    if ((long)(tp->rx_std_max_post <= rx_std_posted) != 0L) {
      #line 6966 
      tpr->rx_std_prod_idx = tp->rx_std_ring_mask & std_prod_idx;
      #line 6968 
      (*(tp->write32_rx_mbox))(tp,620U,tpr->rx_std_prod_idx);
      #line 6970 
      work_mask &= 4294901759U;
      #line 6971 
      rx_std_posted = 0U;
    }
    #line 6973 
    next_pkt_nopost: 
                     #line 6973 
    ;
    #line 6974 
    sw_idx ++;
    #line 6975 
    sw_idx = tp->rx_ret_ring_mask & sw_idx;
    #line 6978 
    if ((unsigned int)hw_idx == sw_idx) {
      #line 6979 
      hw_idx = *(tnapi->rx_rcb_prod_idx);
      #line 6980 
      ldv_inline_asm();
    }
  }
  #line 6985 
  tnapi->rx_rcb_ptr = sw_idx;
  #line 6986 
  (*(tp->write32_rx_mbox))(tp,tnapi->consmbox,sw_idx);
  #line 6989 
  if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_ENABLE_RSS,
                  (unsigned long *)(& tp->tg3_flags)) == 0) {
    #line 6991 
    ldv_inline_asm();
    #line 6993 
    if ((work_mask & 65536U) != 0U) {
      #line 6994 
      tpr->rx_std_prod_idx = tp->rx_std_ring_mask & std_prod_idx;
      #line 6996 
      (*(tp->write32_rx_mbox))(tp,620U,tpr->rx_std_prod_idx);
    }
    #line 6999 
    if ((work_mask & 131072U) != 0U) {
      #line 7000 
      tpr->rx_jmb_prod_idx = tp->rx_jmb_ring_mask & jmb_prod_idx;
      #line 7002 
      (*(tp->write32_rx_mbox))(tp,628U,tpr->rx_jmb_prod_idx);
    }
  }
  else 
    #line 7005 
    if (work_mask != 0U) {
      #line 7007 
      ldv_inline_asm();
      #line 7011 
      tpr->rx_std_prod_idx = tp->rx_std_ring_mask & std_prod_idx;
      #line 7012 
      tpr->rx_jmb_prod_idx = tp->rx_jmb_ring_mask & jmb_prod_idx;
      #line 7014 
      if (& tp->napi[1] != tnapi) {
        #line 7015 
        tp->rx_refill = (_Bool)1;
        #line 7016 
        napi_schedule(& tp->napi[1].napi);
      }
    }
  #line 7020 
  return received;
}

#line 7023  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
static void tg3_poll_link(struct tg3 *tp)
{
  #line 7026 
  if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_USE_LINKCHG_REG,
                  (unsigned long *)(& tp->tg3_flags)) == 0) {
    #line 7026 
    if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_POLL_SERDES,
                  (unsigned long *)(& tp->tg3_flags)) == 0) {
      #line 7027 
      struct tg3_hw_status *sblk = tp->napi[0].hw_status;
      #line 7029 
      if ((sblk->status & 2U) != 0U) {
        #line 7030 
        sblk->status = (sblk->status & 4294967292U) | 1U;
        #line 7032 
        cif_spin_lock_lock_of_tg3(& tp->lock);
        #line 7033 
        if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_USE_PHYLIB,
                (unsigned long *)(& tp->tg3_flags)) != 0) {
          #line 7034 
          _tw32_flush(tp,1028U,4198424U,0U);
          #line 7039 
          __const_udelay(171800UL);
        }
        else 
             #line 7041 
             tg3_setup_phy(tp,(_Bool)0);
        #line 7042 
        cif_spin_unlock_lock_of_tg3(& tp->lock);
      }
    }
  }
  #line 7045 
  return;
}

#line 7047  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
static int tg3_rx_prodring_xfer(struct tg3 *tp, struct tg3_rx_prodring_set *dpr, struct tg3_rx_prodring_set *spr)
{
  #line 7051 
  u32 si;
  #line 7051 
  u32 di;
  #line 7051 
  u32 cpycnt;
  #line 7051 
  u32 src_prod_idx;
  #line 7052 
  int i;
  #line 7052 
  int err = 0;
  #line 7054 
  while (1) {
    {
      #line 7071 
      u32 __UNIQUE_ID___x561;
      #line 7071 
      u32 tmp;
      #line 7055 
      src_prod_idx = spr->rx_std_prod_idx;
      #line 7056 
      ldv_inline_asm();
      #line 7062 
      if (spr->rx_std_cons_idx == src_prod_idx) 
                                                #line 7063 
                                                break;
      #line 7065 
      if (spr->rx_std_cons_idx < src_prod_idx) 
                                               #line 7066 
                                               cpycnt = src_prod_idx - spr->rx_std_cons_idx; else 
                                                                    #line 7068 
                                                                    cpycnt = (tp->rx_std_ring_mask - spr->rx_std_cons_idx) + 1U;
      {
        #line 7071 
        __UNIQUE_ID___x561 = cpycnt;
        #line 7071 
        u32 __UNIQUE_ID___y562 = (tp->rx_std_ring_mask - dpr->rx_std_prod_idx) + 1U;
        #line 7071 
        if (__UNIQUE_ID___x561 < __UNIQUE_ID___y562) 
                                                     #line 7071 
                                                     tmp = __UNIQUE_ID___x561; else 
                                                                    #line 7071 
                                                                    tmp = __UNIQUE_ID___y562;
        }
      #line 7071 
      cpycnt = tmp;
      #line 7074 
      si = spr->rx_std_cons_idx;
      #line 7075 
      di = dpr->rx_std_prod_idx;
      #line 7077 
      i = (int)di;
      #line 7077 
      while (di + cpycnt > (unsigned int)i) {
        #line 7078 
        if ((dpr->rx_std_buffers + (unsigned long)i)->data != (u8 *)0U) {
          #line 7079 
          cpycnt = (unsigned int)i - di;
          #line 7080 
          err = -28;
          #line 7081 
          break;
        }
        #line 7077 
        i ++;
      }
      #line 7085 
      if (cpycnt == 0U) 
                        #line 7086 
                        break;
      #line 7087 
      ldv_inline_asm();
      #line 7094 
      memcpy((void *)(dpr->rx_std_buffers + (unsigned long)di),(void *)(spr->rx_std_buffers + (unsigned long)si),(unsigned long)cpycnt * 16UL);
      #line 7098 
      i = 0;
      #line 7098 
      while ((unsigned int)i < cpycnt) {
        {
          #line 7099 
          struct tg3_rx_buffer_desc *sbd;
          #line 7099 
          struct tg3_rx_buffer_desc *dbd;
          #line 7100 
          sbd = spr->rx_std + (unsigned long)si;
          #line 7101 
          dbd = dpr->rx_std + (unsigned long)di;
          #line 7102 
          dbd->addr_hi = sbd->addr_hi;
          #line 7103 
          dbd->addr_lo = sbd->addr_lo;
        }
        #line 7098 
        i ++;
        #line 7098 
        di ++;
        #line 7098 
        si ++;
      }
      #line 7106 
      spr->rx_std_cons_idx = (spr->rx_std_cons_idx + cpycnt) & tp->rx_std_ring_mask;
      #line 7108 
      dpr->rx_std_prod_idx = (dpr->rx_std_prod_idx + cpycnt) & tp->rx_std_ring_mask;
    }
  }
  #line 7112 
  while (1) {
    {
      #line 7129 
      u32 __UNIQUE_ID___x563;
      #line 7129 
      u32 tmp_1;
      #line 7113 
      src_prod_idx = spr->rx_jmb_prod_idx;
      #line 7114 
      ldv_inline_asm();
      #line 7120 
      if (spr->rx_jmb_cons_idx == src_prod_idx) 
                                                #line 7121 
                                                break;
      #line 7123 
      if (spr->rx_jmb_cons_idx < src_prod_idx) 
                                               #line 7124 
                                               cpycnt = src_prod_idx - spr->rx_jmb_cons_idx; else 
                                                                    #line 7126 
                                                                    cpycnt = (tp->rx_jmb_ring_mask - spr->rx_jmb_cons_idx) + 1U;
      {
        #line 7129 
        __UNIQUE_ID___x563 = cpycnt;
        #line 7129 
        u32 __UNIQUE_ID___y564 = (tp->rx_jmb_ring_mask - dpr->rx_jmb_prod_idx) + 1U;
        #line 7129 
        if (__UNIQUE_ID___x563 < __UNIQUE_ID___y564) 
                                                     #line 7129 
                                                     tmp_1 = __UNIQUE_ID___x563; else 
                                                                    #line 7129 
                                                                    tmp_1 = __UNIQUE_ID___y564;
        }
      #line 7129 
      cpycnt = tmp_1;
      #line 7132 
      si = spr->rx_jmb_cons_idx;
      #line 7133 
      di = dpr->rx_jmb_prod_idx;
      #line 7135 
      i = (int)di;
      #line 7135 
      while (di + cpycnt > (unsigned int)i) {
        #line 7136 
        if ((dpr->rx_jmb_buffers + (unsigned long)i)->data != (u8 *)0U) {
          #line 7137 
          cpycnt = (unsigned int)i - di;
          #line 7138 
          err = -28;
          #line 7139 
          break;
        }
        #line 7135 
        i ++;
      }
      #line 7143 
      if (cpycnt == 0U) 
                        #line 7144 
                        break;
      #line 7145 
      ldv_inline_asm();
      #line 7152 
      memcpy((void *)(dpr->rx_jmb_buffers + (unsigned long)di),(void *)(spr->rx_jmb_buffers + (unsigned long)si),(unsigned long)cpycnt * 16UL);
      #line 7156 
      i = 0;
      #line 7156 
      while ((unsigned int)i < cpycnt) {
        {
          #line 7157 
          struct tg3_rx_buffer_desc *sbd_0;
          #line 7157 
          struct tg3_rx_buffer_desc *dbd_0;
          #line 7158 
          sbd_0 = & (spr->rx_jmb + (unsigned long)si)->std;
          #line 7159 
          dbd_0 = & (dpr->rx_jmb + (unsigned long)di)->std;
          #line 7160 
          dbd_0->addr_hi = sbd_0->addr_hi;
          #line 7161 
          dbd_0->addr_lo = sbd_0->addr_lo;
        }
        #line 7156 
        i ++;
        #line 7156 
        di ++;
        #line 7156 
        si ++;
      }
      #line 7164 
      spr->rx_jmb_cons_idx = (spr->rx_jmb_cons_idx + cpycnt) & tp->rx_jmb_ring_mask;
      #line 7166 
      dpr->rx_jmb_prod_idx = (dpr->rx_jmb_prod_idx + cpycnt) & tp->rx_jmb_ring_mask;
    }
  }
  #line 7170 
  return err;
}

#line 7173  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
static int tg3_poll_work(struct tg3_napi *tnapi, int work_done, int budget)
{
  #line 7175 
  struct tg3 *tp = tnapi->tp;
  #line 7178 
  if ((unsigned int)(tnapi->hw_status)->idx[0].tx_consumer != tnapi->tx_cons) {
    #line 7179 
    tg3_tx(tnapi);
    #line 7180 
    if ((long)(_tg3_flag((enum TG3_FLAGS)TG3_FLAG_TX_RECOVERY_PENDING,
                (unsigned long *)(& tp->tg3_flags)) != 0) != 0L) 
      #line 7181 
      return work_done;
  }
  #line 7184 
  if (tnapi->rx_rcb_prod_idx == (u16 *)0U) 
                                           #line 7185 
                                           return work_done;
  #line 7191 
  if ((unsigned int)*(tnapi->rx_rcb_prod_idx) != tnapi->rx_rcb_ptr) {
    #line 7192 
    work_done = tg3_rx(tnapi,budget - work_done) + work_done;
  }
  #line 7194 
  if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_ENABLE_RSS,
                  (unsigned long *)(& tp->tg3_flags)) != 0) 
    #line 7194 
    if (& tp->napi[1] == tnapi) {
      #line 7196 
      int i;
      #line 7195 
      struct tg3_rx_prodring_set *dpr = & tp->napi[0].prodring;
      #line 7196 
      int err = 0;
      #line 7197 
      u32 std_prod_idx = dpr->rx_std_prod_idx;
      #line 7198 
      u32 jmb_prod_idx = dpr->rx_jmb_prod_idx;
      #line 7200 
      tp->rx_refill = (_Bool)0;
      #line 7201 
      i = 1;
      #line 7201 
      while (tp->rxq_cnt >= (unsigned int)i) {
        #line 7203 
        err = tg3_rx_prodring_xfer(tp,dpr,& tp->napi[i].prodring) | err;
        #line 7201 
        i ++;
      }
      #line 7203 
      ldv_inline_asm();
      #line 7207 
      if (dpr->rx_std_prod_idx != std_prod_idx) 
                                                #line 7208 
                                                (*(tp->write32_rx_mbox))(tp,620U,dpr->rx_std_prod_idx);
      #line 7211 
      if (dpr->rx_jmb_prod_idx != jmb_prod_idx) 
                                                #line 7212 
                                                (*(tp->write32_rx_mbox))(tp,628U,dpr->rx_jmb_prod_idx);
      #line 7215 
      if (err != 0) 
                    #line 7216 
                    _tw32_flush(tp,15360U,tp->coal_now,0U);
    }
  #line 7219 
  return work_done;
}

#line 7222  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
__inline static void tg3_reset_task_schedule(struct tg3 *tp)
{
  #line 7224 
  if (! test_and_set_bit(69L,(unsigned long *)(& tp->tg3_flags))) 
                                                                  #line 7225 
                                                                  cif_schedule_work(& tp->reset_task);
  #line 7226 
  return;
}

#line 7228  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
__inline static void tg3_reset_task_cancel(struct tg3 *tp)
{
  #line 7230 
  cancel_work_sync(& tp->reset_task);
  #line 7231 
  _tg3_flag_clear((enum TG3_FLAGS)TG3_FLAG_RESET_TASK_PENDING,(unsigned long *)(& tp->tg3_flags));
  #line 7232 
  _tg3_flag_clear((enum TG3_FLAGS)TG3_FLAG_TX_RECOVERY_PENDING,(unsigned long *)(& tp->tg3_flags));
  #line 7233 
  return;
}

#line 7235  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
static int tg3_poll_msix(struct napi_struct *napi, int budget)
{
  #line 7237 
  void *__mptr;
  #line 7237 
  __mptr = (void *)napi;
  #line 7237 
  struct tg3_napi *tnapi = ((struct tg3_napi *)__mptr);
  #line 7238 
  struct tg3 *tp = tnapi->tp;
  #line 7239 
  int work_done = 0;
  #line 7240 
  struct tg3_hw_status *sblk = tnapi->hw_status;
  #line 7242 
  while (1) {
    {
      #line 7243 
      work_done = tg3_poll_work(tnapi,work_done,budget);
      #line 7245 
      if ((long)(_tg3_flag((enum TG3_FLAGS)TG3_FLAG_TX_RECOVERY_PENDING,
                  (unsigned long *)(& tp->tg3_flags)) != 0) != 0L) 
        #line 7246 
        goto tx_recovery;
      #line 7248 
      if ((long)(work_done >= budget) != 0L) 
                                             #line 7249 
                                             break;
      #line 7255 
      tnapi->last_tag = sblk->status_tag;
      #line 7256 
      tnapi->last_irq_tag = tnapi->last_tag;
      #line 7257 
      ldv_inline_asm();
      #line 7260 
      if ((long)((unsigned int)sblk->idx[0].tx_consumer == tnapi->tx_cons) != 0L && (long)((unsigned int)*(tnapi->rx_rcb_prod_idx) == tnapi->rx_rcb_ptr) != 0L) {
        #line 7266 
        if (& tp->napi[1] == tnapi && (int)tp->rx_refill != 0) 
                                                               #line 7267 
                                                               continue;
        #line 7269 
        napi_complete_done(napi,work_done);
        #line 7271 
        (*(tp->write32_mbox))(tp,tnapi->int_mbox,tnapi->last_tag << 24);
        #line 7276 
        if ((long)(& tp->napi[1] == tnapi) != 0L && (long)((int)tp->rx_refill != 0) != 0L) 
          #line 7277 
          (*(tp->write32))(tp,15360U,(tp->coalesce_mode | tnapi->coal_now) | 2U);
        #line 7281 
        break;
      }
    }
  }
  #line 7285 
  tg3_send_ape_heartbeat(tp,tp->ape_hb_interval << 1);
  #line 7286 
  return work_done;
  #line 7288 
  tx_recovery: 
               #line 7288 
  ;
  #line 7290 
  napi_complete(napi);
  #line 7291 
  tg3_reset_task_schedule(tp);
  #line 7292 
  return work_done;
}

#line 7295  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
static void tg3_process_error(struct tg3 *tp)
{
  #line 7297 
  u32 val;
  #line 7298 
  bool real_error = (_Bool)0;
  #line 7300 
  if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_ERROR_PROCESSED,
                (unsigned long *)(& tp->tg3_flags)) != 0) 
    #line 7301 
    return;
  #line 7304 
  val = (*(tp->read32))(tp,15432U);
  #line 7305 
  if ((val & 4294967231U) != 0U) {
    #line 7306 
    netdev_err(tp->dev,(char *)"FLOW Attention error.  Resetting chip.\n");
    #line 7307 
    real_error = (_Bool)1;
  }
  #line 7310 
  if (((*(tp->read32))(tp,24580U) & 4294967294U) != 0U) {
    #line 7311 
    netdev_err(tp->dev,(char *)"MSI Status error.  Resetting chip.\n");
    #line 7312 
    real_error = (_Bool)1;
  }
  #line 7315 
  if ((*(tp->read32))(tp,18436U) != 0U) 
                                        #line 7315 
                                        goto _LOR;
  else {
    #line 7315 
    if ((*(tp->read32))(tp,19460U) != 0U) {
      #line 7315 
      _LOR: {
              #line 7316 
              netdev_err(tp->dev,(char *)"DMA Status error.  Resetting chip.\n");
              #line 7317 
              real_error = (_Bool)1;
            }
    }
  }
  #line 7320 
  if (! real_error) 
                    #line 7321 
                    return;
  #line 7323 
  tg3_dump_state(tp);
  #line 7325 
  _tg3_flag_set((enum TG3_FLAGS)TG3_FLAG_ERROR_PROCESSED,(unsigned long *)(& tp->tg3_flags));
  #line 7326 
  tg3_reset_task_schedule(tp);
  #line 7327 
  return;
}

#line 7329  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
static int tg3_poll(struct napi_struct *napi, int budget)
{
  #line 7331 
  void *__mptr;
  #line 7331 
  __mptr = (void *)napi;
  #line 7331 
  struct tg3_napi *tnapi = ((struct tg3_napi *)__mptr);
  #line 7332 
  struct tg3 *tp = tnapi->tp;
  #line 7333 
  int work_done = 0;
  #line 7334 
  struct tg3_hw_status *sblk = tnapi->hw_status;
  #line 7336 
  while (1) {
    {
      #line 7337 
      if ((sblk->status & 4U) != 0U) 
                                     #line 7338 
                                     tg3_process_error(tp);
      #line 7340 
      tg3_poll_link(tp);
      #line 7342 
      work_done = tg3_poll_work(tnapi,work_done,budget);
      #line 7344 
      if ((long)(_tg3_flag((enum TG3_FLAGS)TG3_FLAG_TX_RECOVERY_PENDING,
                  (unsigned long *)(& tp->tg3_flags)) != 0) != 0L) 
        #line 7345 
        goto tx_recovery;
      #line 7347 
      if ((long)(work_done >= budget) != 0L) 
                                             #line 7348 
                                             break;
      #line 7350 
      if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_TAGGED_STATUS,
                  (unsigned long *)(& tp->tg3_flags)) != 0) {
        #line 7355 
        tnapi->last_tag = sblk->status_tag;
        #line 7356 
        tnapi->last_irq_tag = tnapi->last_tag;
        #line 7357 
        ldv_inline_asm();
      }
      else 
           #line 7359 
           sblk->status &= 4294967294U;
      #line 7361 
      if ((long)(tg3_has_work(tnapi) == 0U) != 0L) {
        #line 7362 
        napi_complete_done(napi,work_done);
        #line 7363 
        tg3_int_reenable(tnapi);
        #line 7364 
        break;
      }
    }
  }
  #line 7368 
  tg3_send_ape_heartbeat(tp,tp->ape_hb_interval << 1);
  #line 7369 
  return work_done;
  #line 7371 
  tx_recovery: 
               #line 7371 
  ;
  #line 7373 
  napi_complete(napi);
  #line 7374 
  tg3_reset_task_schedule(tp);
  #line 7375 
  return work_done;
}

#line 7378  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
static void tg3_napi_disable(struct tg3 *tp)
{
  #line 7380 
  int i;
  #line 7382 
  i = (int)(tp->irq_cnt + 4294967295U);
  #line 7382 
  while (i >= 0) {
    #line 7383 
    napi_disable(& tp->napi[i].napi);
    #line 7382 
    i --;
  }
  #line 7384 
  return;
}

#line 7386  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
static void tg3_napi_enable(struct tg3 *tp)
{
  #line 7388 
  int i;
  #line 7390 
  i = 0;
  #line 7390 
  while (tp->irq_cnt > (unsigned int)i) {
    #line 7391 
    napi_enable(& tp->napi[i].napi);
    #line 7390 
    i ++;
  }
  #line 7392 
  return;
}

#line 7394  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
static void tg3_napi_init(struct tg3 *tp)
{
  #line 7396 
  int i;
  #line 7398 
  netif_napi_add(tp->dev,& tp->napi[0].napi,& tg3_poll,64);
  #line 7399 
  i = 1;
  #line 7399 
  while (tp->irq_cnt > (unsigned int)i) {
    #line 7400 
    netif_napi_add(tp->dev,& tp->napi[i].napi,& tg3_poll_msix,64);
    #line 7399 
    i ++;
  }
  #line 7401 
  return;
}

#line 7403  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
static void tg3_napi_fini(struct tg3 *tp)
{
  #line 7405 
  int i;
  #line 7407 
  i = 0;
  #line 7407 
  while (tp->irq_cnt > (unsigned int)i) {
    #line 7408 
    netif_napi_del(& tp->napi[i].napi);
    #line 7407 
    i ++;
  }
  #line 7409 
  return;
}

#line 7411  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
__inline static void tg3_netif_stop(struct tg3 *tp)
{
  #line 7413 
  netif_trans_update(tp->dev);
  #line 7414 
  tg3_napi_disable(tp);
  #line 7415 
  netif_carrier_off(tp->dev);
  #line 7416 
  netif_tx_disable(tp->dev);
  #line 7417 
  return;
}

#line 7420  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
__inline static void tg3_netif_start(struct tg3 *tp)
{
  #line 7422 
  tg3_ptp_resume(tp);
  #line 7428 
  netif_tx_wake_all_queues(tp->dev);
  #line 7430 
  if ((int)tp->link_up != 0) 
                             #line 7431 
                             netif_carrier_on(tp->dev);
  #line 7433 
  tg3_napi_enable(tp);
  #line 7434 
  (tp->napi[0].hw_status)->status |= 1U;
  #line 7435 
  tg3_enable_ints(tp);
  #line 7436 
  return;
}

#line 7438  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
static void tg3_irq_quiesce(struct tg3 *tp)
{
  #line 7442 
  int i;
  #line 7444 
  if ((long)(tp->irq_sync != 0U) != 0L) {
    #line 7445 
    ldv_inline_asm();
    #line 7446 
    ldv_inline_asm();
    #line 7447 
    ldv_inline_asm();
    #line 7444 
    ;
  }
  #line 7446 
  tp->irq_sync = 1U;
  #line 7447 
  ldv_inline_asm();
  #line 7449 
  cif_spin_unlock_bh_lock_of_tg3(& tp->lock);
  #line 7451 
  i = 0;
  #line 7451 
  while (tp->irq_cnt > (unsigned int)i) {
    #line 7452 
    synchronize_irq(tp->napi[i].irq_vec);
    #line 7451 
    i ++;
  }
  #line 7454 
  cif_spin_lock_bh_lock_of_tg3(& tp->lock);
  #line 7455 
  return;
}

#line 7462  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
static void tg3_full_lock(struct tg3 *tp, int irq_sync)
{
  #line 7464 
  cif_spin_lock_bh_lock_of_tg3(& tp->lock);
  #line 7465 
  if (irq_sync != 0) 
                     #line 7466 
                     tg3_irq_quiesce(tp);
  #line 7467 
  return;
}

#line 7469  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
static void tg3_full_unlock(struct tg3 *tp)
{
  #line 7471 
  cif_spin_unlock_bh_lock_of_tg3(& tp->lock);
  #line 7472 
  return;
}

#line 7477  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
static irqreturn_t tg3_msi_1shot(int irq, void *dev_id)
{
  #line 7479 
  struct tg3_napi *tnapi = (struct tg3_napi *)dev_id;
  #line 7480 
  struct tg3 *tp = tnapi->tp;
  #line 7482 
  __builtin_prefetch((void const *)((void *)tnapi->hw_status));
  #line 7483 
  if (tnapi->rx_rcb != (struct tg3_rx_buffer_desc *)0) 
                                                       #line 7484 
                                                       __builtin_prefetch((void const *)((void *)(tnapi->rx_rcb + (unsigned long)tnapi->rx_rcb_ptr)));
  #line 7486 
  if ((long)(tg3_irq_sync(tp) == 0) != 0L) 
                                           #line 7487 
                                           napi_schedule(& tnapi->napi);
  #line 7489 
  return IRQ_HANDLED;
}

#line 7496  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
static irqreturn_t tg3_msi(int irq, void *dev_id)
{
  #line 7498 
  struct tg3_napi *tnapi = (struct tg3_napi *)dev_id;
  #line 7499 
  struct tg3 *tp = tnapi->tp;
  #line 7501 
  __builtin_prefetch((void const *)((void *)tnapi->hw_status));
  #line 7502 
  if (tnapi->rx_rcb != (struct tg3_rx_buffer_desc *)0) 
                                                       #line 7503 
                                                       __builtin_prefetch((void const *)((void *)(tnapi->rx_rcb + (unsigned long)tnapi->rx_rcb_ptr)));
  #line 7511 
  (*(tp->write32_mbox))(tp,tnapi->int_mbox,1U);
  #line 7512 
  if ((long)(tg3_irq_sync(tp) == 0) != 0L) 
                                           #line 7513 
                                           napi_schedule(& tnapi->napi);
  #line 7515 
  return IRQ_HANDLED;
}

#line 7518  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
static irqreturn_t tg3_interrupt(int irq, void *dev_id)
{
  #line 7520 
  struct tg3_napi *tnapi = (struct tg3_napi *)dev_id;
  #line 7521 
  struct tg3 *tp = tnapi->tp;
  #line 7522 
  struct tg3_hw_status *sblk = tnapi->hw_status;
  #line 7523 
  unsigned int handled = 1U;
  #line 7530 
  if ((long)((sblk->status & 1U) == 0U) != 0L) {
    #line 7531 
    if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_CHIP_RESETTING,
                (unsigned long *)(& tp->tg3_flags)) != 0) 
      #line 7531 
      goto _LOR;
    else {
      #line 7531 
      if (((*(tp->read32))(tp,112U) & 2U) != 0U) {
        #line 7531 
        _LOR: {
                #line 7533 
                handled = 0U;
                #line 7534 
                goto out;
              }
      }
    }
  }
  #line 7549 
  tw32_mailbox_flush(tp,516U,1U);
  #line 7550 
  if (tg3_irq_sync(tp) != 0) 
                             #line 7551 
                             goto out;
  #line 7552 
  sblk->status &= 4294967294U;
  #line 7553 
  if ((long)(tg3_has_work(tnapi) != 0U) != 0L) {
    #line 7554 
    __builtin_prefetch((void const *)((void *)(tnapi->rx_rcb + (unsigned long)tnapi->rx_rcb_ptr)));
    #line 7555 
    napi_schedule(& tnapi->napi);
  }
  else 
       #line 7560 
       tw32_mailbox_flush(tp,516U,0U);
  #line 7563 
  out: 
       #line 7563 
  ;
  #line 7564 
  return (enum irqreturn)(handled != 0U);
}

#line 7567  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
static irqreturn_t tg3_interrupt_tagged(int irq, void *dev_id)
{
  #line 7569 
  struct tg3_napi *tnapi = (struct tg3_napi *)dev_id;
  #line 7570 
  struct tg3 *tp = tnapi->tp;
  #line 7571 
  struct tg3_hw_status *sblk = tnapi->hw_status;
  #line 7572 
  unsigned int handled = 1U;
  #line 7579 
  if ((long)(sblk->status_tag == tnapi->last_irq_tag) != 0L) {
    #line 7580 
    if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_CHIP_RESETTING,
                (unsigned long *)(& tp->tg3_flags)) != 0) 
      #line 7580 
      goto _LOR;
    else {
      #line 7580 
      if (((*(tp->read32))(tp,112U) & 2U) != 0U) {
        #line 7580 
        _LOR: {
                #line 7582 
                handled = 0U;
                #line 7583 
                goto out;
              }
      }
    }
  }
  #line 7598 
  tw32_mailbox_flush(tp,516U,1U);
  #line 7606 
  tnapi->last_irq_tag = sblk->status_tag;
  #line 7608 
  if (tg3_irq_sync(tp) != 0) 
                             #line 7609 
                             goto out;
  #line 7611 
  __builtin_prefetch((void const *)((void *)(tnapi->rx_rcb + (unsigned long)tnapi->rx_rcb_ptr)));
  #line 7613 
  napi_schedule(& tnapi->napi);
  #line 7615 
  out: 
       #line 7615 
  ;
  #line 7616 
  return (enum irqreturn)(handled != 0U);
}

#line 7620  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
static irqreturn_t tg3_test_isr(int irq, void *dev_id)
{
  #line 7622 
  struct tg3_napi *tnapi = (struct tg3_napi *)dev_id;
  #line 7623 
  struct tg3 *tp = tnapi->tp;
  #line 7624 
  struct tg3_hw_status *sblk = tnapi->hw_status;
  #line 7626 
  if ((sblk->status & 1U) != 0U) 
                                 #line 7626 
                                 goto _LOR;
  else {
    #line 7626 
    if (((*(tp->read32))(tp,112U) & 2U) == 0U) {
      #line 7626 
      _LOR: {
              #line 7628 
              tg3_disable_ints(tp);
              #line 7629 
              return IRQ_HANDLED;
            }
    }
  }
  #line 7631 
  return IRQ_NONE;
}

#line 7635  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
static void tg3_poll_controller(struct net_device *dev)
{
  #line 7637 
  int i;
  #line 7638 
  struct tg3 *tp = netdev_priv(dev);
  #line 7640 
  if (tg3_irq_sync(tp) != 0) 
                             #line 7641 
                             return;
  #line 7643 
  i = 0;
  #line 7643 
  while (tp->irq_cnt > (unsigned int)i) {
    #line 7644 
    tg3_interrupt((int)tp->napi[i].irq_vec,(void *)(& tp->napi[i]));
    #line 7643 
    i ++;
  }
  #line 7645 
  return;
}

#line 7648  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
static void tg3_tx_timeout(struct net_device *dev)
{
  #line 7650 
  struct tg3 *tp = netdev_priv(dev);
  #line 7652 
  if ((tp->msg_enable & 128U) != 0U) {
    #line 7653 
    netdev_err(dev,(char *)"transmit timed out, resetting\n");
    #line 7654 
    tg3_dump_state(tp);
  }
  #line 7657 
  tg3_reset_task_schedule(tp);
  #line 7658 
  return;
}

#line 7661  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
__inline static int tg3_4g_overflow_test(dma_addr_t mapping, int len)
{
  #line 7663 
  u32 base = (unsigned int)mapping;
  #line 7665 
  return (base + (unsigned int)len) + 8U < base;
}

#line 7671  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
__inline static int tg3_4g_tso_overflow_test(struct tg3 *tp, dma_addr_t mapping, u32 len, u32 mss)
{
  #line 7674 
  if (tp->pci_chip_rev_id >> 12 == 22370U && mss != 0U) {
    #line 7675 
    u32 base = (unsigned int)mapping;
    #line 7677 
    return (base + len) + (mss & 16383U) < base;
  }
  #line 7679 
  return 0;
}

#line 7683  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
__inline static int tg3_40bit_overflow_test(struct tg3 *tp, dma_addr_t mapping, int len)
{
  #line 7691 
  return 0;
}

#line 7695  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
__inline static void tg3_tx_set_bd(struct tg3_tx_buffer_desc *txbd, dma_addr_t mapping, u32 len, u32 flags, u32 mss, u32 vlan)
{
  #line 7699 
  txbd->addr_hi = (unsigned int)(mapping >> 32);
  #line 7700 
  txbd->addr_lo = (unsigned int)mapping;
  #line 7701 
  txbd->len_flags = (len << 16) | (flags & 65535U);
  #line 7702 
  txbd->vlan_tag = (mss << 16) | vlan;
  #line 7703 
  return;
}

#line 7705  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
static bool tg3_tx_frag_set(struct tg3_napi *tnapi, u32 *entry, u32 *budget, dma_addr_t map, u32 len, u32 flags, u32 mss, u32 vlan)
{
  #line 7709 
  struct tg3 *tp = tnapi->tp;
  #line 7710 
  bool hwbug = (_Bool)0;
  #line 7712 
  if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_SHORT_DMA_BUG,
                (unsigned long *)(& tp->tg3_flags)) != 0) 
    #line 7712 
    if (len <= 8U) 
                   #line 7713 
                   hwbug = (_Bool)1;
  #line 7715 
  if (tg3_4g_overflow_test(map,(int)len) != 0) 
                                               #line 7716 
                                               hwbug = (_Bool)1;
  #line 7718 
  if (tg3_4g_tso_overflow_test(tp,map,len,mss) != 0) 
                                                     #line 7719 
                                                     hwbug = (_Bool)1;
  #line 7721 
  if (tg3_40bit_overflow_test(tp,map,(int)len) != 0) 
                                                     #line 7722 
                                                     hwbug = (_Bool)1;
  #line 7724 
  if (tp->dma_limit != 0U) {
    #line 7725 
    u32 prvidx = *entry;
    #line 7726 
    u32 tmp_flag = flags & 4294967291U;
    #line 7727 
    while (tp->dma_limit < len && *budget != 0U) {
      #line 7728 
      u32 frag_len = tp->dma_limit;
      #line 7729 
      len -= tp->dma_limit;
      #line 7732 
      if (len <= 8U) {
        #line 7733 
        len = tp->dma_limit / 2U + len;
        #line 7734 
        frag_len = tp->dma_limit / 2U;
      }
      #line 7737 
      (tnapi->tx_buffers + (unsigned long)*entry)->fragmented = (_Bool)1;
      #line 7739 
      tg3_tx_set_bd(tnapi->tx_ring + (unsigned long)*entry,map,frag_len,tmp_flag,mss,vlan);
      #line 7741 
      *budget += 4294967295U;
      #line 7742 
      prvidx = *entry;
      #line 7743 
      *entry = (*entry + 1U) & 511U;
      #line 7745 
      map = (unsigned long long)frag_len + map;
    }
    #line 7748 
    if (len != 0U) 
      #line 7749 
      if (*budget != 0U) {
        #line 7750 
        tg3_tx_set_bd(tnapi->tx_ring + (unsigned long)*entry,map,len,flags,mss,vlan);
        #line 7752 
        *budget += 4294967295U;
        #line 7753 
        *entry = (*entry + 1U) & 511U;
      }
      else {
        #line 7755 
        hwbug = (_Bool)1;
        #line 7756 
        (tnapi->tx_buffers + (unsigned long)prvidx)->fragmented = (_Bool)0;
      }
  }
  else {
    #line 7760 
    tg3_tx_set_bd(tnapi->tx_ring + (unsigned long)*entry,map,len,flags,mss,vlan);
    #line 7762 
    *entry = (*entry + 1U) & 511U;
  }
  #line 7765 
  return hwbug;
}

#line 7768  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
static void tg3_tx_skb_unmap(struct tg3_napi *tnapi, u32 entry, int last)
{
  #line 7770 
  int i;
  #line 7771 
  struct sk_buff *skb;
  #line 7772 
  struct tg3_tx_ring_info *txb = tnapi->tx_buffers + (unsigned long)entry;
  #line 7774 
  skb = txb->skb;
  #line 7775 
  txb->skb = (struct sk_buff *)0;
  #line 7777 
  ;
  #line 7777 
  ;
  #line 7777 
  pci_unmap_single((tnapi->tp)->pdev,txb->mapping,(unsigned long)skb_headlen(skb),1);
  #line 7782 
  while ((int)txb->fragmented != 0) {
    #line 7783 
    txb->fragmented = (_Bool)0;
    #line 7784 
    entry = (entry + 1U) & 511U;
    #line 7785 
    txb = tnapi->tx_buffers + (unsigned long)entry;
  }
  #line 7788 
  i = 0;
  #line 7788 
  while (i <= last) {
    {
      #line 7789 
      skb_frag_t *frag = & ((struct skb_shared_info *)skb_end_pointer(skb))->frags[i];
      #line 7791 
      entry = (entry + 1U) & 511U;
      #line 7792 
      txb = tnapi->tx_buffers + (unsigned long)entry;
      #line 7794 
      ;
      #line 7794 
      ;
      #line 7794 
      pci_unmap_page((tnapi->tp)->pdev,txb->mapping,(unsigned long)skb_frag_size(frag),1);
      #line 7798 
      while ((int)txb->fragmented != 0) {
        #line 7799 
        txb->fragmented = (_Bool)0;
        #line 7800 
        entry = (entry + 1U) & 511U;
        #line 7801 
        txb = tnapi->tx_buffers + (unsigned long)entry;
      }
    }
    #line 7788 
    i ++;
  }
  #line 7804 
  return;
}

#line 7807  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
static int tigon3_dma_hwbug_workaround(struct tg3_napi *tnapi, struct sk_buff **pskb, u32 *entry, u32 *budget, u32 base_flags, u32 mss, u32 vlan)
{
  #line 7813 
  struct sk_buff *new_skb;
  #line 7812 
  struct tg3 *tp = tnapi->tp;
  #line 7813 
  struct sk_buff *skb = *pskb;
  #line 7814 
  dma_addr_t new_addr = 0ULL;
  #line 7815 
  int ret = 0;
  #line 7817 
  if (tp->pci_chip_rev_id >> 12 != 0U) 
                                       #line 7818 
                                       new_skb = skb_copy(skb,2592U);
  else {
    #line 7820 
    int more_headroom = (int)((long)4U - ((long)skb->data & (long)3U));
    #line 7822 
    ;
    #line 7822 
    ;
    #line 7822 
    new_skb = skb_copy_expand(skb,(int)(skb_headroom(skb) + (unsigned int)more_headroom),skb_tailroom(skb),2592U);
  }
  #line 7827 
  if (new_skb == (struct sk_buff *)0) 
                                      #line 7828 
                                      ret = -1;
  else {
    #line 7831 
    new_addr = pci_map_single(tp->pdev,(void *)new_skb->data,(unsigned long)new_skb->len,1);
    #line 7834 
    if (pci_dma_mapping_error(tp->pdev,new_addr) != 0) {
      #line 7835 
      dev_kfree_skb_any(new_skb);
      #line 7836 
      ret = -1;
    }
    else {
      #line 7838 
      u32 save_entry = *entry;
      #line 7840 
      base_flags |= 4U;
      #line 7842 
      (tnapi->tx_buffers + (unsigned long)*entry)->skb = new_skb;
      #line 7843 
      (tnapi->tx_buffers + (unsigned long)*entry)->mapping = new_addr;
      #line 7846 
      if ((int)tg3_tx_frag_set(tnapi,entry,budget,new_addr,new_skb->len,base_flags,
                        mss,vlan) != 0) {
        #line 7849 
        tg3_tx_skb_unmap(tnapi,save_entry,-1);
        #line 7850 
        dev_kfree_skb_any(new_skb);
        #line 7851 
        ret = -1;
      }
    }
  }
  #line 7856 
  dev_consume_skb_any(skb);
  #line 7857 
  *pskb = new_skb;
  #line 7858 
  return ret;
}

#line 7861  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
static bool tg3_tso_bug_gso_check(struct tg3_napi *tnapi, struct sk_buff *skb)
{
  #line 7866 
  ;
  #line 7866 
  return (_Bool)((unsigned int)((struct skb_shared_info *)skb_end_pointer(skb))->gso_segs < tnapi->tx_pending / 3U);
}

#line 7869 
#line 7915 
static netdev_tx_t tg3_start_xmit(struct sk_buff *skb, struct net_device *dev);
#line 7874  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
static int tg3_tso_bug(struct tg3 *tp, struct tg3_napi *tnapi, struct netdev_queue *txq, struct sk_buff *skb)
{
  #line 7877 
  struct sk_buff *segs;
  #line 7877 
  struct sk_buff *nskb;
  #line 7878 
  u32 frag_cnt_est = (unsigned int)((int)((struct skb_shared_info *)skb_end_pointer(skb))->gso_segs * 3);
  #line 7881 
  ;
  #line 7881 
  if ((long)(tg3_tx_avail(tnapi) <= frag_cnt_est) != 0L) {
    #line 7882 
    netif_tx_stop_queue(txq);
    #line 7883 
    ldv_inline_asm();
    #line 7890 
    ;
    #line 7890 
    if (tg3_tx_avail(tnapi) <= frag_cnt_est) 
                                             #line 7891 
                                             return 16;
    #line 7893 
    netif_tx_wake_queue(txq);
  }
  #line 7896 
  segs = skb_gso_segment(skb,(tp->dev)->features & 18446744073708437503ULL);
  #line 7898 
  if ((int)IS_ERR((void *)segs) != 0) 
                                      #line 7898 
                                      goto _LOR;
  else 
    #line 7898 
    if (segs == (struct sk_buff *)0) 
                                     #line 7898 
                                     _LOR: 
                                           #line 7899 
                                           goto tg3_tso_bug_end;
  #line 7901 
  while (1) {
    #line 7902 
    nskb = segs;
    #line 7903 
    segs = segs->__anonCompField_sk_buff_101.__anonCompField___anonunion_550_100.next;
    #line 7904 
    nskb->__anonCompField_sk_buff_101.__anonCompField___anonunion_550_100.next = (struct sk_buff *)0;
    #line 7905 
    tg3_start_xmit(nskb,tp->dev);
    #line 7906 
    if (! (segs != (struct sk_buff *)0)) 
                                         #line 7901 
                                         break;
  }
  #line 7908 
  tg3_tso_bug_end: 
                   #line 7908 
  ;
  #line 7909 
  dev_consume_skb_any(skb);
  #line 7911 
  return 0;
}

#line 7915  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
static netdev_tx_t tg3_start_xmit(struct sk_buff *skb, struct net_device *dev)
{
  #line 7918 
  u32 len;
  #line 7918 
  u32 entry;
  #line 7918 
  u32 base_flags;
  #line 7918 
  u32 mss;
  #line 7919 
  u32 budget;
  #line 7920 
  int would_hit_hwbug;
  #line 7921 
  dma_addr_t mapping;
  #line 7922 
  struct tg3_napi *tnapi;
  #line 7923 
  struct netdev_queue *txq;
  #line 7924 
  unsigned int last;
  #line 8073 
  unsigned int tmp_40;
  #line 7917 
  struct tg3 *tp = netdev_priv(dev);
  #line 7918 
  u32 vlan = 0U;
  #line 7920 
  int i = -1;
  #line 7925 
  struct iphdr *iph = (struct iphdr *)0;
  #line 7926 
  struct tcphdr *tcph = (struct tcphdr *)0;
  #line 7927 
  __sum16 tcp_csum = (unsigned short)0U;
  #line 7927 
  __sum16 ip_csum = (unsigned short)0U;
  #line 7928 
  __be16 ip_tot_len = (unsigned short)0U;
  #line 7930 
  ;
  #line 7930 
  txq = netdev_get_tx_queue(dev,(unsigned int)skb_get_queue_mapping(skb));
  #line 7931 
  tnapi = & tp->napi[(int)skb_get_queue_mapping(skb)];
  #line 7932 
  if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_ENABLE_TSS,
                  (unsigned long *)(& tp->tg3_flags)) != 0) 
    #line 7933 
    tnapi ++;
  #line 7935 
  budget = tg3_tx_avail(tnapi);
  #line 7942 
  ;
  #line 7942 
  if ((long)((unsigned int)((int)((struct skb_shared_info *)skb_end_pointer(skb))->nr_frags + 1) >= budget) != 0L) {
    #line 7943 
    if (! netif_tx_queue_stopped(txq)) {
      #line 7944 
      netif_tx_stop_queue(txq);
      #line 7947 
      netdev_err(dev,(char *)"BUG! Tx Ring full when queue awake!\n");
    }
    #line 7950 
    return NETDEV_TX_BUSY;
  }
  #line 7953 
  entry = tnapi->tx_prod;
  #line 7954 
  base_flags = 0U;
  #line 7956 
  mss = (unsigned int)((struct skb_shared_info *)skb_end_pointer(skb))->gso_size;
  #line 7957 
  if (mss != 0U) {
    #line 7958 
    u32 tcp_opt_len;
    #line 7958 
    u32 hdr_len;
    #line 7960 
    if (skb_cow_head(skb,0U) != 0) 
                                   #line 7961 
                                   goto drop;
    #line 7963 
    iph = ip_hdr(skb);
    #line 7964 
    tcp_opt_len = tcp_optlen(skb);
    #line 7966 
    hdr_len = ((unsigned int)skb_transport_offset(skb) + tcp_hdrlen(skb)) + 4294967282U;
    #line 7971 
    if ((unsigned int)skb->protocol == 129U || (unsigned int)skb->protocol == 43144U) {
      #line 7973 
      if ((int)tg3_tso_bug_gso_check(tnapi,skb) != 0) {
        #line 7974 
        return (enum netdev_tx)tg3_tso_bug(tp,tnapi,txq,skb);
      }
      #line 7975 
      goto drop;
    }
    #line 7978 
    if (! skb_is_gso_v6(skb)) {
      #line 7979 
      if ((long)(hdr_len + 14U > 80U) != 0L) {
        #line 7979 
        if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_TSO_BUG,
                   (unsigned long *)(& tp->tg3_flags)) != 0) {
          #line 7981 
          if ((int)tg3_tso_bug_gso_check(tnapi,skb) != 0) {
            #line 7982 
            return (enum netdev_tx)tg3_tso_bug(tp,tnapi,txq,skb);
          }
          #line 7983 
          goto drop;
        }
      }
      #line 7985 
      ip_csum = iph->check;
      #line 7986 
      ip_tot_len = iph->tot_len;
      #line 7987 
      iph->check = (unsigned short)0U;
      #line 7988 
      iph->tot_len = __builtin_bswap16((unsigned short)((int)((unsigned short)mss) + (int)((unsigned short)hdr_len)));
    }
    #line 7991 
    base_flags |= 768U;
    #line 7994 
    tcph = tcp_hdr(skb);
    #line 7995 
    tcp_csum = tcph->check;
    #line 7997 
    if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_HW_TSO_1,
                   (unsigned long *)(& tp->tg3_flags)) != 0) 
      #line 7997 
      goto _LOR;
    else {
      #line 7997 
      if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_HW_TSO_2,
                   (unsigned long *)(& tp->tg3_flags)) != 0) 
        #line 7997 
        goto _LOR;
      else {
        #line 7998 
        if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_HW_TSO_3,
                   (unsigned long *)(& tp->tg3_flags)) != 0) {
          #line 7997 
          _LOR: {
                  #line 8000 
                  tcph->check = (unsigned short)0U;
                  #line 8001 
                  base_flags &= 4294967294U;
                }
        }
        else {
          #line 8003 
          tcph->check = (unsigned short)(~ ((int)csum_tcpudp_magic(iph->saddr,iph->daddr,0U,(unsigned char)6,0U)));
        }
      }
    }
    #line 8007 
    if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_HW_TSO_3,
                   (unsigned long *)(& tp->tg3_flags)) != 0) {
      #line 8008 
      mss = ((hdr_len << 12) & 49152U) | mss;
      #line 8009 
      if ((hdr_len & 16U) != 0U) 
                                 #line 8010 
                                 base_flags |= 16U;
      #line 8011 
      base_flags = ((hdr_len << 5) & 31744U) | base_flags;
    }
    else {
      #line 8012 
      if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_HW_TSO_2,
                   (unsigned long *)(& tp->tg3_flags)) != 0) 
        #line 8013 
        mss = (hdr_len << 9) | mss;
      else {
        #line 8014 
        if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_HW_TSO_1,
                   (unsigned long *)(& tp->tg3_flags)) != 0) 
          #line 8014 
          goto _LOR_0;
        else 
          #line 8014 
          if (tp->pci_chip_rev_id >> 12 == 3U) {
            #line 8014 
            _LOR_0: 
                    #line 8016 
                    if (tcp_opt_len != 0U || (unsigned int)iph->ihl > 5U) {
                      #line 8017 
                      int tsflags;
                      #line 8019 
                      tsflags = (int)(((unsigned int)iph->ihl + (tcp_opt_len >> 2)) + 4294967291U);
                      #line 8020 
                      mss = (unsigned int)(tsflags << 11) | mss;
                    }
          }
          else 
            #line 8023 
            if (tcp_opt_len != 0U || (unsigned int)iph->ihl > 5U) {
              #line 8024 
              int tsflags_0;
              #line 8026 
              tsflags_0 = (int)(((unsigned int)iph->ihl + (tcp_opt_len >> 2)) + 4294967291U);
              #line 8027 
              base_flags = (unsigned int)(tsflags_0 << 12) | base_flags;
            }
      }
    }
  }
  else 
    #line 8030 
    if ((unsigned int)skb->ip_summed == 3U) 
      #line 8034 
      if ((unsigned int)skb->protocol == 129U || (unsigned int)skb->protocol == 43144U) {
        #line 8036 
        if (skb_checksum_help(skb) != 0) 
                                         #line 8037 
                                         goto drop;
      }
      else 
           #line 8039 
           base_flags |= 1U;
  #line 8043 
  if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_USE_JUMBO_BDFLAG,
                   (unsigned long *)(& tp->tg3_flags)) != 0) 
    #line 8043 
    if (mss == 0U) 
      #line 8044 
      if (skb->len > 1518U) 
                            #line 8045 
                            base_flags |= 8U;
  #line 8047 
  if ((unsigned int)skb->vlan_present != 0U) {
    #line 8048 
    base_flags |= 64U;
    #line 8049 
    vlan = (unsigned int)skb->vlan_tci;
  }
  #line 8052 
  ;
  #line 8052 
  if ((long)(((int)((struct skb_shared_info *)skb_end_pointer(skb))->tx_flags & 1) != 0) != 0L) {
    #line 8052 
    if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_TX_TSTAMP_EN,
                   (unsigned long *)(& tp->tg3_flags)) != 0) {
      #line 8054 
      ((struct skb_shared_info *)skb_end_pointer(skb))->tx_flags = (unsigned char)((unsigned int)((struct skb_shared_info *)skb_end_pointer(skb))->tx_flags | 4U);
      #line 8055 
      base_flags |= 32U;
    }
  }
  #line 8058 
  len = skb_headlen(skb);
  #line 8060 
  mapping = pci_map_single(tp->pdev,(void *)skb->data,(unsigned long)len,1);
  #line 8061 
  if (pci_dma_mapping_error(tp->pdev,mapping) != 0) 
                                                    #line 8062 
                                                    goto drop;
  #line 8065 
  (tnapi->tx_buffers + (unsigned long)entry)->skb = skb;
  #line 8066 
  (tnapi->tx_buffers + (unsigned long)entry)->mapping = mapping;
  #line 8068 
  would_hit_hwbug = 0;
  #line 8070 
  if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_5701_DMA_BUG,
                   (unsigned long *)(& tp->tg3_flags)) != 0) 
    #line 8071 
    would_hit_hwbug = 1;
  #line 8073 
  ;
  #line 8073 
  ;
  #line 8073 
  ;
  #line 8073 
  if ((unsigned int)((struct skb_shared_info *)skb_end_pointer(skb))->nr_frags == 0U) 
    #line 8073 
    tmp_40 = 4U; else 
                      #line 8073 
                      tmp_40 = 0U;
  #line 8073 
  ;
  #line 8073 
  ;
  #line 8073 
  ;
  #line 8073 
  ;
  #line 8073 
  if ((int)tg3_tx_frag_set(tnapi,& entry,& budget,mapping,len,
                         tmp_40 | base_flags,mss,vlan) != 0) 
    #line 8076 
    would_hit_hwbug = 1;
  else {
    #line 8077 
    ;
    #line 8077 
    if ((unsigned int)((struct skb_shared_info *)skb_end_pointer(skb))->nr_frags != 0U) {
      #line 8078 
      u32 tmp_mss = mss;
      #line 8080 
      if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_HW_TSO_1,
                   (unsigned long *)(& tp->tg3_flags)) == 0) {
        #line 8080 
        if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_HW_TSO_2,
                   (unsigned long *)(& tp->tg3_flags)) == 0) {
          #line 8081 
          if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_HW_TSO_3,
                   (unsigned long *)(& tp->tg3_flags)) == 0) 
            #line 8083 
            tmp_mss = 0U;
        }
      }
      #line 8088 
      last = (unsigned int)((int)((struct skb_shared_info *)skb_end_pointer(skb))->nr_frags + -1);
      #line 8089 
      i = 0;
      #line 8089 
      while ((unsigned int)i <= last) {
        {
          #line 8090 
          skb_frag_t *frag = & ((struct skb_shared_info *)skb_end_pointer(skb))->frags[i];
          #line 8092 
          len = skb_frag_size(frag);
          #line 8093 
          mapping = skb_frag_dma_map(& (tp->pdev)->dev,frag,0UL,(unsigned long)len,(enum dma_data_direction)DMA_TO_DEVICE);
          #line 8096 
          (tnapi->tx_buffers + (unsigned long)entry)->skb = (struct sk_buff *)0;
          #line 8097 
          (tnapi->tx_buffers + (unsigned long)entry)->mapping = mapping;
          #line 8099 
          if (dma_mapping_error(& (tp->pdev)->dev,mapping) != 0) 
                                                                 #line 8100 
                                                                 goto dma_error;
          #line 8102 
          if (budget == 0U) 
                            #line 8102 
                            goto _LOR_1;
          else {
            #line 8103 
            unsigned int tmp_36;
            #line 8102 
            ;
            #line 8102 
            ;
            #line 8103 
            if ((unsigned int)i == last) 
                                         #line 8103 
                                         tmp_36 = 4U; else 
                                                           #line 8103 
                                                           tmp_36 = 0U;
            #line 8102 
            ;
            #line 8102 
            ;
            #line 8102 
            ;
            #line 8102 
            ;
            #line 8102 
            if ((int)tg3_tx_frag_set(tnapi,& entry,& budget,mapping,len,
                         tmp_36 | base_flags,tmp_mss,vlan) != 0) {
              #line 8102 
              _LOR_1: {
                        #line 8107 
                        would_hit_hwbug = 1;
                        #line 8108 
                        break;
                      }
            }
          }
        }
        #line 8089 
        i ++;
      }
    }
  }
  #line 8113 
  if (would_hit_hwbug != 0) {
    #line 8114 
    tg3_tx_skb_unmap(tnapi,tnapi->tx_prod,i);
    #line 8116 
    if (mss != 0U) {
      #line 8116 
      if ((int)tg3_tso_bug_gso_check(tnapi,skb) != 0) {
        #line 8120 
        if ((unsigned int)ip_tot_len != 0U) {
          #line 8121 
          iph->check = ip_csum;
          #line 8122 
          iph->tot_len = ip_tot_len;
        }
        #line 8124 
        tcph->check = tcp_csum;
        #line 8125 
        return (enum netdev_tx)tg3_tso_bug(tp,tnapi,txq,skb);
      }
    }
    #line 8131 
    entry = tnapi->tx_prod;
    #line 8132 
    budget = tg3_tx_avail(tnapi);
    #line 8133 
    if (tigon3_dma_hwbug_workaround(tnapi,& skb,& entry,& budget,base_flags,
                                     mss,vlan) != 0) 
      #line 8135 
      goto drop_nofree;
  }
  #line 8138 
  skb_tx_timestamp(skb);
  #line 8139 
  netdev_tx_sent_queue(txq,skb->len);
  #line 8140 
  ldv_inline_asm();
  #line 8144 
  tnapi->tx_prod = entry;
  #line 8145 
  if ((long)(tg3_tx_avail(tnapi) <= 18U) != 0L) {
    #line 8146 
    netif_tx_stop_queue(txq);
    #line 8147 
    ldv_inline_asm();
    #line 8154 
    ;
    #line 8154 
    if (tg3_tx_avail(tnapi) > tnapi->tx_pending / 4U) 
                                                      #line 8155 
                                                      netif_tx_wake_queue(txq);
  }
  #line 8158 
  if (netdev_xmit_more()) {
    #line 8158 
    if ((int)netif_xmit_stopped(txq) != 0) 
                                           #line 8160 
                                           (*(tp->write32_tx_mbox))(tp,tnapi->prodmbox,entry);
  }
  else 
       #line 8160 
       (*(tp->write32_tx_mbox))(tp,tnapi->prodmbox,entry);
  #line 8163 
  return NETDEV_TX_OK;
  #line 8165 
  dma_error: 
             #line 8165 
  ;
  #line 8166 
  i --;
  #line 8166 
  ;
  #line 8166 
  ;
  #line 8166 
  tg3_tx_skb_unmap(tnapi,tnapi->tx_prod,i);
  #line 8167 
  (tnapi->tx_buffers + (unsigned long)tnapi->tx_prod)->skb = (struct sk_buff *)0;
  #line 8168 
  drop: 
        #line 8168 
  ;
  #line 8169 
  dev_kfree_skb_any(skb);
  #line 8170 
  drop_nofree: 
               #line 8170 
  ;
  #line 8171 
  (tp->tx_dropped) ++;
  #line 8172 
  return NETDEV_TX_OK;
}

#line 8175  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
static void tg3_mac_loopback(struct tg3 *tp, bool enable)
{
  #line 8177 
  if ((int)enable != 0) {
    #line 8178 
    tp->mac_mode &= 4294967281U;
    #line 8181 
    tp->mac_mode |= 16U;
    #line 8183 
    if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_5705_PLUS,
                (unsigned long *)(& tp->tg3_flags)) == 0) 
      #line 8184 
      tp->mac_mode |= 1024U;
    #line 8186 
    if ((tp->phy_flags & 128U) != 0U) 
                                      #line 8187 
                                      tp->mac_mode |= 4U; else 
                                                               #line 8189 
                                                               tp->mac_mode |= 8U;
  }
  else {
    #line 8191 
    tp->mac_mode &= 4294967279U;
    #line 8193 
    if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_5705_PLUS,
                  (unsigned long *)(& tp->tg3_flags)) != 0) 
      #line 8196 
      tp->mac_mode &= 4294966271U;
    else 
      #line 8193 
      if ((tp->phy_flags & 16U) != 0U) 
                                       #line 8196 
                                       tp->mac_mode &= 4294966271U;
      else 
        #line 8194 
        if (tp->pci_chip_rev_id >> 12 == 7U) 
                                             #line 8196 
                                             tp->mac_mode &= 4294966271U;
  }
  #line 8199 
  (*(tp->write32))(tp,1024U,tp->mac_mode);
  #line 8200 
  __const_udelay(171800UL);
  #line 8202 
  return;
}

#line 8203  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
static int tg3_phy_lpbk_set(struct tg3 *tp, u32 speed, bool extlpbk)
{
  #line 8205 
  u32 val;
  #line 8205 
  u32 bmcr;
  #line 8205 
  u32 mac_mode;
  #line 8205 
  u32 ptest = 0U;
  #line 8207 
  tg3_phy_toggle_apd(tp,(_Bool)0);
  #line 8208 
  tg3_phy_toggle_automdix(tp,(_Bool)0);
  #line 8210 
  if ((int)extlpbk != 0) {
    #line 8210 
    if (tg3_phy_set_extloopbk(tp) != 0) 
                                        #line 8211 
                                        return -5;
  }
  #line 8213 
  bmcr = 256U;
  #line 8214 
  switch (speed) {
    #line 8215 
    case (u32)10: 
                  #line 8215 
    ;
    #line 8216 
    break;
    #line 8217 
    case (u32)100: 
                   #line 8217 
    ;
    #line 8218 
    bmcr |= 8192U;
    #line 8219 
    break;
    #line 8220 
    case (u32)1000: 
                    #line 8220 
    ;
    #line 8221 
    default: 
             #line 8221 
    ;
    #line 8222 
    if ((tp->phy_flags & 64U) != 0U) {
      #line 8223 
      speed = 100U;
      #line 8224 
      bmcr |= 8192U;
    }
    else {
      #line 8226 
      speed = 1000U;
      #line 8227 
      bmcr |= 64U;
    }
  }
  #line 8231 
  if ((int)extlpbk != 0) 
    #line 8232 
    if ((tp->phy_flags & 64U) == 0U) {
      #line 8233 
      tg3_readphy(tp,9,& val);
      #line 8234 
      val |= 6144U;
      #line 8236 
      tg3_writephy(tp,9,val);
    }
    else {
      #line 8238 
      ptest = 18U;
      #line 8240 
      tg3_writephy(tp,23,ptest);
    }
  else 
       #line 8243 
       bmcr |= 16384U;
  #line 8245 
  tg3_writephy(tp,0,bmcr);
  #line 8248 
  if ((tp->phy_flags & 64U) != 0U) 
                                   #line 8249 
                                   tg3_readphy(tp,0,& bmcr);
  #line 8251 
  __const_udelay(171800UL);
  #line 8253 
  if ((tp->phy_flags & 64U) != 0U && tp->pci_chip_rev_id >> 12 == 22405U) {
    #line 8255 
    tg3_writephy(tp,23,ptest | 6144U);
    #line 8260 
    tg3_readphy(tp,23,& val);
  }
  #line 8264 
  if ((tp->phy_flags & 32U) != 0U) {
    #line 8264 
    if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_5780_CLASS,
                  (unsigned long *)(& tp->tg3_flags)) != 0) {
      #line 8266 
      _tw32_flush(tp,1128U,1U,0U);
      #line 8267 
      __const_udelay(42950UL);
      #line 8268 
      _tw32_flush(tp,1128U,tp->rx_mode,0U);
    }
  }
  #line 8271 
  mac_mode = tp->mac_mode & 4294967281U;
  #line 8273 
  if (speed == 1000U) 
                      #line 8274 
                      mac_mode |= 8U; else 
                                           #line 8276 
                                           mac_mode |= 4U;
  #line 8278 
  if (tp->pci_chip_rev_id >> 12 == 7U) {
    #line 8279 
    u32 masked_phy_id = tp->phy_id & 4294967280U;
    #line 8281 
    if (masked_phy_id == 1610645584U) 
                                      #line 8282 
                                      mac_mode &= 4294966271U;
    else 
      #line 8283 
      if (masked_phy_id == 1610645616U) 
                                        #line 8284 
                                        mac_mode |= 1024U;
    #line 8286 
    tg3_writephy(tp,16,2U);
  }
  #line 8290 
  (*(tp->write32))(tp,1024U,mac_mode);
  #line 8291 
  __const_udelay(171800UL);
  #line 8293 
  return 0;
}

#line 8296  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
static void tg3_set_loopback(struct net_device *dev, netdev_features_t features)
{
  #line 8298 
  struct tg3 *tp = netdev_priv(dev);
  #line 8300 
  if ((features & 2199023255552ULL) != 0ULL) {
    #line 8301 
    if ((tp->mac_mode & 16U) != 0U) 
                                    #line 8302 
                                    return;
    #line 8304 
    cif_spin_lock_bh_lock_of_tg3(& tp->lock);
    #line 8305 
    tg3_mac_loopback(tp,(_Bool)1);
    #line 8306 
    netif_carrier_on(tp->dev);
    #line 8307 
    cif_spin_unlock_bh_lock_of_tg3(& tp->lock);
    #line 8308 
    netdev_info(dev,(char *)"Internal MAC loopback mode enabled.\n");
  }
  else {
    #line 8310 
    if ((tp->mac_mode & 16U) == 0U) 
                                    #line 8311 
                                    return;
    #line 8313 
    cif_spin_lock_bh_lock_of_tg3(& tp->lock);
    #line 8314 
    tg3_mac_loopback(tp,(_Bool)0);
    #line 8316 
    tg3_setup_phy(tp,(_Bool)1);
    #line 8317 
    cif_spin_unlock_bh_lock_of_tg3(& tp->lock);
    #line 8318 
    netdev_info(dev,(char *)"Internal MAC loopback mode disabled.\n");
  }
  #line 8320 
  return;
}

#line 8322  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
static netdev_features_t tg3_fix_features(struct net_device *dev, netdev_features_t features)
{
  #line 8325 
  struct tg3 *tp = netdev_priv(dev);
  #line 8327 
  if (dev->mtu > 1500U) {
    #line 8327 
    if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_5780_CLASS,
                  (unsigned long *)(& tp->tg3_flags)) != 0) 
      #line 8328 
      features &= 18446744073707651071ULL;
  }
  #line 8330 
  return features;
}

#line 8333  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
static int tg3_set_features(struct net_device *dev, netdev_features_t features)
{
  #line 8335 
  netdev_features_t changed = dev->features ^ features;
  #line 8337 
  if ((changed & 2199023255552ULL) != 0ULL) {
    #line 8337 
    if ((int)netif_running(dev) != 0) 
                                      #line 8338 
                                      tg3_set_loopback(dev,features);
  }
  #line 8340 
  return 0;
}

#line 8343  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
static void tg3_rx_prodring_free(struct tg3 *tp, struct tg3_rx_prodring_set *tpr)
{
  #line 8346 
  int i;
  #line 8348 
  if (& tp->napi[0].prodring != tpr) {
    #line 8349 
    i = (int)tpr->rx_std_cons_idx;
    #line 8349 
    while (tpr->rx_std_prod_idx != (unsigned int)i) {
      #line 8351 
      tg3_rx_data_free(tp,tpr->rx_std_buffers + (unsigned long)i,tp->rx_pkt_map_sz);
      #line 8349 
      i = (int)((unsigned int)(i + 1) & tp->rx_std_ring_mask);
    }
    #line 8354 
    if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_JUMBO_CAPABLE,
                (unsigned long *)(& tp->tg3_flags)) != 0) {
      #line 8355 
      i = (int)tpr->rx_jmb_cons_idx;
      #line 8355 
      while (tpr->rx_jmb_prod_idx != (unsigned int)i) {
        #line 8358 
        tg3_rx_data_free(tp,tpr->rx_jmb_buffers + (unsigned long)i,9110U);
        #line 8356 
        i = (int)((unsigned int)(i + 1) & tp->rx_jmb_ring_mask);
      }
    }
    #line 8363 
    return;
  }
  #line 8366 
  i = 0;
  #line 8366 
  while (tp->rx_std_ring_mask >= (unsigned int)i) {
    #line 8367 
    tg3_rx_data_free(tp,tpr->rx_std_buffers + (unsigned long)i,tp->rx_pkt_map_sz);
    #line 8366 
    i ++;
  }
  #line 8370 
  if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_JUMBO_CAPABLE,
                  (unsigned long *)(& tp->tg3_flags)) != 0) {
    #line 8370 
    if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_5780_CLASS,
                  (unsigned long *)(& tp->tg3_flags)) == 0) {
      #line 8371 
      i = 0;
      #line 8371 
      while (tp->rx_jmb_ring_mask >= (unsigned int)i) {
        #line 8372 
        tg3_rx_data_free(tp,tpr->rx_jmb_buffers + (unsigned long)i,9110U);
        #line 8371 
        i ++;
      }
    }
  }
  #line 8374 
  return;
}

#line 8384  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
static int tg3_rx_prodring_alloc(struct tg3 *tp, struct tg3_rx_prodring_set *tpr)
{
  #line 8387 
  u32 i;
  #line 8387 
  u32 rx_pkt_dma_sz;
  #line 8404 
  unsigned long tmp_4;
  #line 8446 
  unsigned long tmp_10;
  #line 8389 
  tpr->rx_std_cons_idx = 0U;
  #line 8390 
  tpr->rx_std_prod_idx = 0U;
  #line 8391 
  tpr->rx_jmb_cons_idx = 0U;
  #line 8392 
  tpr->rx_jmb_prod_idx = 0U;
  #line 8394 
  if (& tp->napi[0].prodring != tpr) {
    #line 8395 
    unsigned long tmp_0;
    #line 8395 
    if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_LRG_PROD_RING_CAP,
                (unsigned long *)(& tp->tg3_flags)) != 0) 
      #line 8395 
      tmp_0 = 32768UL; else 
                            #line 8395 
                            tmp_0 = 8192UL;
    #line 8395 
    ;
    #line 8395 
    memset((void *)tpr->rx_std_buffers,0,tmp_0);
    #line 8397 
    if (tpr->rx_jmb_buffers != (struct ring_info *)0) {
      #line 8398 
      unsigned long tmp_2;
      #line 8398 
      if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_LRG_PROD_RING_CAP,
                  (unsigned long *)(& tp->tg3_flags)) != 0) 
        #line 8398 
        tmp_2 = 16384UL; else 
                              #line 8398 
                              tmp_2 = 4096UL;
      #line 8398 
      ;
      #line 8398 
      memset((void *)tpr->rx_jmb_buffers,0,tmp_2);
    }
    #line 8400 
    goto done;
  }
  #line 8404 
  if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_LRG_PROD_RING_CAP,
                  (unsigned long *)(& tp->tg3_flags)) != 0) 
    #line 8404 
    tmp_4 = 65536UL; else 
                          #line 8404 
                          tmp_4 = 16384UL;
  #line 8404 
  ;
  #line 8404 
  memset((void *)tpr->rx_std,0,tmp_4);
  #line 8406 
  rx_pkt_dma_sz = 1536U;
  #line 8407 
  if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_5780_CLASS,
                  (unsigned long *)(& tp->tg3_flags)) != 0) 
    #line 8407 
    if ((tp->dev)->mtu > 1500U) 
                                #line 8409 
                                rx_pkt_dma_sz = 9046U;
  #line 8410 
  tp->rx_pkt_map_sz = rx_pkt_dma_sz + 64U;
  #line 8416 
  i = 0U;
  #line 8416 
  while (tp->rx_std_ring_mask >= i) {
    {
      #line 8417 
      struct tg3_rx_buffer_desc *rxd;
      #line 8419 
      rxd = tpr->rx_std + (unsigned long)i;
      #line 8420 
      rxd->idx_len = rx_pkt_dma_sz;
      #line 8421 
      rxd->type_flags = 4U;
      #line 8422 
      rxd->opaque = i | 65536U;
    }
    #line 8416 
    i ++;
  }
  #line 8427 
  i = 0U;
  #line 8427 
  while (tp->rx_pending > i) {
    {
      #line 8428 
      unsigned int frag_size;
      #line 8430 
      if (tg3_alloc_rx_data(tp,tpr,65536U,i,& frag_size) < 0) {
        #line 8432 
        netdev_warn(tp->dev,(char *)"Using a smaller RX standard ring. Only ",i,tp->rx_pending);
        #line 8436 
        if (i == 0U) 
                     #line 8437 
                     goto initfail;
        #line 8438 
        tp->rx_pending = i;
        #line 8439 
        break;
      }
    }
    #line 8427 
    i ++;
  }
  #line 8443 
  if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_JUMBO_CAPABLE,
                  (unsigned long *)(& tp->tg3_flags)) == 0) 
    #line 8443 
    goto _LOR;
  else {
    #line 8443 
    if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_5780_CLASS,
                  (unsigned long *)(& tp->tg3_flags)) != 0) 
      #line 8443 
      _LOR: 
            #line 8444 
            goto done;
  }
  #line 8446 
  if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_LRG_PROD_RING_CAP,
                  (unsigned long *)(& tp->tg3_flags)) != 0) 
    #line 8446 
    tmp_10 = 65536UL; else 
                           #line 8446 
                           tmp_10 = 16384UL;
  #line 8446 
  ;
  #line 8446 
  memset((void *)tpr->rx_jmb,0,tmp_10);
  #line 8448 
  if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_JUMBO_RING_ENABLE,
                   (unsigned long *)(& tp->tg3_flags)) == 0) 
    #line 8449 
    goto done;
  #line 8451 
  i = 0U;
  #line 8451 
  while (tp->rx_jmb_ring_mask >= i) {
    {
      #line 8452 
      struct tg3_rx_buffer_desc *rxd_0;
      #line 8454 
      rxd_0 = & (tpr->rx_jmb + (unsigned long)i)->std;
      #line 8455 
      rxd_0->idx_len = 9046U;
      #line 8456 
      rxd_0->type_flags = 36U;
      #line 8458 
      rxd_0->opaque = i | 131072U;
    }
    #line 8451 
    i ++;
  }
  #line 8462 
  i = 0U;
  #line 8462 
  while (tp->rx_jumbo_pending > i) {
    {
      #line 8463 
      unsigned int frag_size_0;
      #line 8465 
      if (tg3_alloc_rx_data(tp,tpr,131072U,i,& frag_size_0) < 0) {
        #line 8467 
        netdev_warn(tp->dev,(char *)"Using a smaller RX jumbo ring. Only %d ",i,tp->rx_jumbo_pending);
        #line 8471 
        if (i == 0U) 
                     #line 8472 
                     goto initfail;
        #line 8473 
        tp->rx_jumbo_pending = i;
        #line 8474 
        break;
      }
    }
    #line 8462 
    i ++;
  }
  #line 8478 
  done: 
        #line 8478 
  ;
  #line 8479 
  return 0;
  #line 8481 
  initfail: 
            #line 8481 
  ;
  #line 8482 
  tg3_rx_prodring_free(tp,tpr);
  #line 8483 
  return -12;
}

#line 8486  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
static void tg3_rx_prodring_fini(struct tg3 *tp, struct tg3_rx_prodring_set *tpr)
{
  #line 8489 
  kfree((void *)tpr->rx_std_buffers);
  #line 8490 
  tpr->rx_std_buffers = (struct ring_info *)0;
  #line 8491 
  kfree((void *)tpr->rx_jmb_buffers);
  #line 8492 
  tpr->rx_jmb_buffers = (struct ring_info *)0;
  #line 8493 
  if (tpr->rx_std != (struct tg3_rx_buffer_desc *)0) {
    #line 8494 
    unsigned long tmp_0;
    #line 8494 
    ;
    #line 8494 
    ;
    #line 8494 
    if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_LRG_PROD_RING_CAP,
                (unsigned long *)(& tp->tg3_flags)) != 0) 
      #line 8494 
      tmp_0 = 65536UL; else 
                            #line 8494 
                            tmp_0 = 16384UL;
    #line 8494 
    ;
    #line 8494 
    dma_free_coherent(& (tp->pdev)->dev,tmp_0,(void *)tpr->rx_std,tpr->rx_std_mapping);
    #line 8496 
    tpr->rx_std = (struct tg3_rx_buffer_desc *)0;
  }
  #line 8498 
  if (tpr->rx_jmb != (struct tg3_ext_rx_buffer_desc *)0) {
    #line 8499 
    unsigned long tmp_2;
    #line 8499 
    ;
    #line 8499 
    ;
    #line 8499 
    if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_LRG_PROD_RING_CAP,
                  (unsigned long *)(& tp->tg3_flags)) != 0) 
      #line 8499 
      tmp_2 = 65536UL; else 
                            #line 8499 
                            tmp_2 = 16384UL;
    #line 8499 
    ;
    #line 8499 
    dma_free_coherent(& (tp->pdev)->dev,tmp_2,(void *)tpr->rx_jmb,tpr->rx_jmb_mapping);
    #line 8501 
    tpr->rx_jmb = (struct tg3_ext_rx_buffer_desc *)0;
  }
  #line 8503 
  return;
}

#line 8505  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
static int tg3_rx_prodring_init(struct tg3 *tp, struct tg3_rx_prodring_set *tpr)
{
  #line 8508 
  unsigned long tmp_0;
  #line 8513 
  unsigned long tmp_3;
  #line 8508 
  if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_LRG_PROD_RING_CAP,
                (unsigned long *)(& tp->tg3_flags)) != 0) 
    #line 8508 
    tmp_0 = 32768UL; else 
                          #line 8508 
                          tmp_0 = 8192UL;
  #line 8508 
  tpr->rx_std_buffers = (struct ring_info *)kzalloc(tmp_0,3264U);
  #line 8510 
  if (tpr->rx_std_buffers == (struct ring_info *)0) 
                                                    #line 8511 
                                                    return -12;
  #line 8513 
  ;
  #line 8513 
  if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_LRG_PROD_RING_CAP,
                  (unsigned long *)(& tp->tg3_flags)) != 0) 
    #line 8513 
    tmp_3 = 65536UL; else 
                          #line 8513 
                          tmp_3 = 16384UL;
  #line 8513 
  ;
  #line 8513 
  tpr->rx_std = (struct tg3_rx_buffer_desc *)dma_alloc_coherent(& (tp->pdev)->dev,tmp_3,& tpr->rx_std_mapping,
                           3264U);
  #line 8517 
  if (tpr->rx_std == (struct tg3_rx_buffer_desc *)0) 
                                                     #line 8518 
                                                     goto err_out;
  #line 8520 
  if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_JUMBO_CAPABLE,
                   (unsigned long *)(& tp->tg3_flags)) != 0) {
    #line 8520 
    if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_5780_CLASS,
                   (unsigned long *)(& tp->tg3_flags)) == 0) {
      #line 8521 
      unsigned long tmp_6;
      #line 8526 
      unsigned long tmp_9;
      #line 8521 
      if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_LRG_PROD_RING_CAP,
                  (unsigned long *)(& tp->tg3_flags)) != 0) 
        #line 8521 
        tmp_6 = 16384UL; else 
                              #line 8521 
                              tmp_6 = 4096UL;
      #line 8521 
      tpr->rx_jmb_buffers = (struct ring_info *)kzalloc(tmp_6,3264U);
      #line 8523 
      if (tpr->rx_jmb_buffers == (struct ring_info *)0) 
                                                        #line 8524 
                                                        goto err_out;
      #line 8526 
      ;
      #line 8526 
      if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_LRG_PROD_RING_CAP,
                  (unsigned long *)(& tp->tg3_flags)) != 0) 
        #line 8526 
        tmp_9 = 65536UL; else 
                              #line 8526 
                              tmp_9 = 16384UL;
      #line 8526 
      ;
      #line 8526 
      tpr->rx_jmb = (struct tg3_ext_rx_buffer_desc *)dma_alloc_coherent(& (tp->pdev)->dev,tmp_9,& tpr->rx_jmb_mapping,
                            3264U);
      #line 8530 
      if (tpr->rx_jmb == (struct tg3_ext_rx_buffer_desc *)0) 
                                                             #line 8531 
                                                             goto err_out;
    }
  }
  #line 8534 
  return 0;
  #line 8536 
  err_out: 
           #line 8536 
  ;
  #line 8537 
  tg3_rx_prodring_fini(tp,tpr);
  #line 8538 
  return -12;
}

#line 8548  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
static void tg3_free_rings(struct tg3 *tp)
{
  #line 8550 
  int i;
  #line 8550 
  int j;
  #line 8552 
  j = 0;
  #line 8552 
  while (tp->irq_cnt > (unsigned int)j) {
    {
      #line 8553 
      struct tg3_napi *tnapi = & tp->napi[j];
      #line 8555 
      tg3_rx_prodring_free(tp,& tnapi->prodring);
      #line 8557 
      if (tnapi->tx_buffers == (struct tg3_tx_ring_info *)0) 
                                                             #line 8558 
                                                             goto __Cont;
      #line 8560 
      i = 0;
      #line 8560 
      while (i <= 511) {
        {
          #line 8561 
          struct sk_buff *skb = (tnapi->tx_buffers + (unsigned long)i)->skb;
          #line 8563 
          if (skb == (struct sk_buff *)0) 
                                          #line 8564 
                                          goto __Cont_0;
          #line 8566 
          ;
          #line 8566 
          ;
          #line 8566 
          ;
          #line 8566 
          tg3_tx_skb_unmap(tnapi,(unsigned int)i,(int)((struct skb_shared_info *)skb_end_pointer(skb))->nr_frags + -1);
          #line 8569 
          dev_consume_skb_any(skb);
        }
        #line 8560 
        __Cont_0: 
                  #line 8560 
        i ++;
      }
      #line 8571 
      netdev_tx_reset_queue(netdev_get_tx_queue(tp->dev,(unsigned int)j));
    }
    #line 8552 
    __Cont: 
            #line 8552 
    j ++;
  }
  #line 8573 
  return;
}

#line 8582  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
static int tg3_init_rings(struct tg3 *tp)
{
  #line 8584 
  int i;
  #line 8587 
  tg3_free_rings(tp);
  #line 8589 
  i = 0;
  #line 8589 
  while (tp->irq_cnt > (unsigned int)i) {
    {
      #line 8590 
      struct tg3_napi *tnapi = & tp->napi[i];
      #line 8592 
      tnapi->last_tag = 0U;
      #line 8593 
      tnapi->last_irq_tag = 0U;
      #line 8594 
      (tnapi->hw_status)->status = 0U;
      #line 8595 
      (tnapi->hw_status)->status_tag = 0U;
      #line 8596 
      memset((void *)tnapi->hw_status,0,80UL);
      #line 8598 
      tnapi->tx_prod = 0U;
      #line 8599 
      tnapi->tx_cons = 0U;
      #line 8600 
      if (tnapi->tx_ring != (struct tg3_tx_buffer_desc *)0) 
                                                            #line 8601 
                                                            memset((void *)tnapi->tx_ring,0,8192UL);
      #line 8603 
      tnapi->rx_rcb_ptr = 0U;
      #line 8604 
      if (tnapi->rx_rcb != (struct tg3_rx_buffer_desc *)0) 
                                                           #line 8605 
                                                           memset((void *)tnapi->rx_rcb,0,(unsigned long)(tp->rx_ret_ring_mask + 1U) * 32UL);
      #line 8607 
      if (tnapi->prodring.rx_std != (struct tg3_rx_buffer_desc *)0) {
        #line 8607 
        if (tg3_rx_prodring_alloc(tp,& tnapi->prodring) != 0) {
          #line 8609 
          tg3_free_rings(tp);
          #line 8610 
          return -12;
        }
      }
    }
    #line 8589 
    i ++;
  }
  #line 8614 
  return 0;
}

#line 8617  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
static void tg3_mem_tx_release(struct tg3 *tp)
{
  #line 8619 
  int i;
  #line 8621 
  i = 0;
  #line 8621 
  while (tp->irq_max > (unsigned int)i) {
    {
      #line 8622 
      struct tg3_napi *tnapi = & tp->napi[i];
      #line 8624 
      if (tnapi->tx_ring != (struct tg3_tx_buffer_desc *)0) {
        #line 8625 
        dma_free_coherent(& (tp->pdev)->dev,8192UL,(void *)tnapi->tx_ring,tnapi->tx_desc_mapping);
        #line 8627 
        tnapi->tx_ring = (struct tg3_tx_buffer_desc *)0;
      }
      #line 8630 
      kfree((void *)tnapi->tx_buffers);
      #line 8631 
      tnapi->tx_buffers = (struct tg3_tx_ring_info *)0;
    }
    #line 8621 
    i ++;
  }
  #line 8633 
  return;
}

#line 8635  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
static int tg3_mem_tx_acquire(struct tg3 *tp)
{
  #line 8637 
  int i;
  #line 8638 
  struct tg3_napi *tnapi = & tp->napi[0];
  #line 8643 
  if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_ENABLE_TSS,
                (unsigned long *)(& tp->tg3_flags)) != 0) 
    #line 8644 
    tnapi ++;
  #line 8646 
  i = 0;
  #line 8646 
  while (tp->txq_cnt > (unsigned int)i) {
    #line 8647 
    tnapi->tx_buffers = (struct tg3_tx_ring_info *)kcalloc(512UL,24UL,3264U);
    #line 8650 
    if (tnapi->tx_buffers == (struct tg3_tx_ring_info *)0) 
                                                           #line 8651 
                                                           goto err_out;
    #line 8653 
    tnapi->tx_ring = (struct tg3_tx_buffer_desc *)dma_alloc_coherent(& (tp->pdev)->dev,8192UL,& tnapi->tx_desc_mapping,3264U);
    #line 8657 
    if (tnapi->tx_ring == (struct tg3_tx_buffer_desc *)0) 
                                                          #line 8658 
                                                          goto err_out;
    #line 8646 
    i ++;
    #line 8646 
    tnapi ++;
  }
  #line 8661 
  return 0;
  #line 8663 
  err_out: 
           #line 8663 
  ;
  #line 8664 
  tg3_mem_tx_release(tp);
  #line 8665 
  return -12;
}

#line 8668  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
static void tg3_mem_rx_release(struct tg3 *tp)
{
  #line 8670 
  int i;
  #line 8672 
  i = 0;
  #line 8672 
  while (tp->irq_max > (unsigned int)i) {
    {
      #line 8673 
      struct tg3_napi *tnapi = & tp->napi[i];
      #line 8675 
      tg3_rx_prodring_fini(tp,& tnapi->prodring);
      #line 8677 
      if (tnapi->rx_rcb == (struct tg3_rx_buffer_desc *)0) 
                                                           #line 8678 
                                                           goto __Cont;
      #line 8680 
      dma_free_coherent(& (tp->pdev)->dev,(unsigned long)(tp->rx_ret_ring_mask + 1U) * 32UL,(void *)tnapi->rx_rcb,tnapi->rx_rcb_mapping);
      #line 8684 
      tnapi->rx_rcb = (struct tg3_rx_buffer_desc *)0;
    }
    #line 8672 
    __Cont: 
            #line 8672 
    i ++;
  }
  #line 8686 
  return;
}

#line 8688  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
static int tg3_mem_rx_acquire(struct tg3 *tp)
{
  #line 8690 
  unsigned int i;
  #line 8690 
  unsigned int limit;
  #line 8692 
  limit = tp->rxq_cnt;
  #line 8697 
  if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_ENABLE_RSS,
                (unsigned long *)(& tp->tg3_flags)) != 0) 
    #line 8698 
    limit ++;
  #line 8700 
  i = 0U;
  #line 8700 
  while (i < limit) {
    {
      #line 8701 
      struct tg3_napi *tnapi = & tp->napi[i];
      #line 8703 
      if (tg3_rx_prodring_init(tp,& tnapi->prodring) != 0) 
                                                           #line 8704 
                                                           goto err_out;
      #line 8710 
      if (i == 0U) {
        #line 8710 
        if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_ENABLE_RSS,
                  (unsigned long *)(& tp->tg3_flags)) != 0) 
          #line 8711 
          goto __Cont;
      }
      #line 8713 
      tnapi->rx_rcb = (struct tg3_rx_buffer_desc *)dma_alloc_coherent(& (tp->pdev)->dev,(unsigned long)(tp->rx_ret_ring_mask + 1U) * 32UL,& tnapi->rx_rcb_mapping,3264U);
      #line 8717 
      if (tnapi->rx_rcb == (struct tg3_rx_buffer_desc *)0) 
                                                           #line 8718 
                                                           goto err_out;
    }
    #line 8700 
    __Cont: 
            #line 8700 
    i ++;
  }
  #line 8721 
  return 0;
  #line 8723 
  err_out: 
           #line 8723 
  ;
  #line 8724 
  tg3_mem_rx_release(tp);
  #line 8725 
  return -12;
}

#line 8732  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
static void tg3_free_consistent(struct tg3 *tp)
{
  #line 8734 
  int i;
  #line 8736 
  i = 0;
  #line 8736 
  while (tp->irq_cnt > (unsigned int)i) {
    {
      #line 8737 
      struct tg3_napi *tnapi = & tp->napi[i];
      #line 8739 
      if (tnapi->hw_status != (struct tg3_hw_status *)0) {
        #line 8740 
        dma_free_coherent(& (tp->pdev)->dev,80UL,(void *)tnapi->hw_status,tnapi->status_mapping);
        #line 8743 
        tnapi->hw_status = (struct tg3_hw_status *)0;
      }
    }
    #line 8736 
    i ++;
  }
  #line 8747 
  tg3_mem_rx_release(tp);
  #line 8748 
  tg3_mem_tx_release(tp);
  #line 8754 
  if (tp->hw_stats != (struct tg3_hw_stats *)0) {
    #line 8755 
    dma_free_coherent(& (tp->pdev)->dev,2048UL,(void *)tp->hw_stats,tp->stats_mapping);
    #line 8757 
    tp->hw_stats = (struct tg3_hw_stats *)0;
  }
  #line 8759 
  return;
}

#line 8765  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
static int tg3_alloc_consistent(struct tg3 *tp)
{
  #line 8767 
  int i;
  #line 8769 
  tp->hw_stats = (struct tg3_hw_stats *)dma_alloc_coherent(& (tp->pdev)->dev,2048UL,& tp->stats_mapping,3264U);
  #line 8772 
  if (tp->hw_stats == (struct tg3_hw_stats *)0) 
                                                #line 8773 
                                                goto err_out;
  #line 8775 
  i = 0;
  #line 8775 
  while (tp->irq_cnt > (unsigned int)i) {
    {
      #line 8777 
      struct tg3_hw_status *sblk;
      #line 8776 
      struct tg3_napi *tnapi = & tp->napi[i];
      #line 8779 
      tnapi->hw_status = (struct tg3_hw_status *)dma_alloc_coherent(& (tp->pdev)->dev,80UL,& tnapi->status_mapping,3264U);
      #line 8783 
      if (tnapi->hw_status == (struct tg3_hw_status *)0) 
                                                         #line 8784 
                                                         goto err_out;
      #line 8786 
      sblk = tnapi->hw_status;
      #line 8788 
      if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_ENABLE_RSS,
                  (unsigned long *)(& tp->tg3_flags)) != 0) {
        #line 8789 
        u16 *prodptr = (u16 *)0U;
        #line 8797 
        switch (i) {
          #line 8798 
          case 1: 
                  #line 8798 
          ;
          #line 8799 
          prodptr = & sblk->idx[0].rx_producer;
          #line 8800 
          break;
          #line 8801 
          case 2: 
                  #line 8801 
          ;
          #line 8802 
          prodptr = & sblk->rx_jumbo_consumer;
          #line 8803 
          break;
          #line 8804 
          case 3: 
                  #line 8804 
          ;
          #line 8805 
          prodptr = & sblk->reserved;
          #line 8806 
          break;
          #line 8807 
          case 4: 
                  #line 8807 
          ;
          #line 8808 
          prodptr = & sblk->rx_mini_consumer;
          #line 8809 
          break;
        }
        #line 8811 
        tnapi->rx_rcb_prod_idx = prodptr;
      }
      else 
           #line 8813 
           tnapi->rx_rcb_prod_idx = & sblk->idx[0].rx_producer;
    }
    #line 8775 
    i ++;
  }
  #line 8817 
  if (tg3_mem_tx_acquire(tp) != 0) 
                                   #line 8817 
                                   goto _LOR;
  else {
    #line 8817 
    if (tg3_mem_rx_acquire(tp) != 0) 
                                     #line 8817 
                                     _LOR: 
                                           #line 8818 
                                           goto err_out;
  }
  #line 8820 
  return 0;
  #line 8822 
  err_out: 
           #line 8822 
  ;
  #line 8823 
  tg3_free_consistent(tp);
  #line 8824 
  return -12;
}

#line 8832  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
static int tg3_stop_block(struct tg3 *tp, unsigned long ofs, u32 enable_bit, bool silent)
{
  #line 8834 
  unsigned int i;
  #line 8835 
  u32 val;
  #line 8837 
  if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_5705_PLUS,
                (unsigned long *)(& tp->tg3_flags)) != 0) 
    #line 8838 
    switch (ofs) {
      #line 8839 
      case (unsigned long)13312: 
                                 #line 8839 
      ;
      #line 8840 
      case (unsigned long)25600: 
                                 #line 8840 
      ;
      #line 8841 
      case (unsigned long)14336: 
                                 #line 8841 
      ;
      #line 8842 
      case (unsigned long)17408: 
                                 #line 8842 
      ;
      #line 8843 
      case (unsigned long)16384: 
                                 #line 8843 
      ;
      #line 8847 
      return 0;
      #line 8849 
      default: 
               #line 8849 
      ;
      #line 8850 
      break;
    }
  #line 8854 
  val = (*(tp->read32))(tp,(unsigned int)ofs);
  #line 8855 
  val = ~ enable_bit & val;
  #line 8856 
  _tw32_flush(tp,(unsigned int)ofs,val,0U);
  #line 8858 
  i = 0U;
  #line 8858 
  while (i <= 999U) {
    {
      #line 8859 
      if (pci_channel_offline(tp->pdev) != 0) {
        #line 8860 
        _dev_err(& (tp->pdev)->dev,(char *)"tg3_stop_block device offline, ",ofs,enable_bit);
        #line 8864 
        return -19;
      }
      #line 8867 
      __const_udelay(429500UL);
      #line 8868 
      val = (*(tp->read32))(tp,(unsigned int)ofs);
      #line 8869 
      if ((val & enable_bit) == 0U) 
                                    #line 8870 
                                    break;
    }
    #line 8858 
    i ++;
  }
  #line 8873 
  if (i == 1000U && ! silent) {
    #line 8874 
    _dev_err(& (tp->pdev)->dev,(char *)"tg3_stop_block timed out, ofs=%lx enable_bit=%x\n",ofs,enable_bit);
    #line 8877 
    return -19;
  }
  #line 8880 
  return 0;
}

#line 8884  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
static int tg3_abort_hw(struct tg3 *tp, bool silent)
{
  #line 8886 
  int i;
  #line 8886 
  int err;
  #line 8888 
  tg3_disable_ints(tp);
  #line 8890 
  if (pci_channel_offline(tp->pdev) != 0) {
    #line 8891 
    tp->rx_mode &= 4294967293U;
    #line 8892 
    tp->mac_mode &= 4292870143U;
    #line 8893 
    err = -19;
    #line 8894 
    goto err_no_dev;
  }
  #line 8897 
  tp->rx_mode &= 4294967293U;
  #line 8898 
  _tw32_flush(tp,1128U,tp->rx_mode,0U);
  #line 8899 
  __const_udelay(42950UL);
  #line 8901 
  err = tg3_stop_block(tp,11264UL,2U,(_Bool)((bool)((int)silent) != 0));
  #line 8902 
  err = tg3_stop_block(tp,8192UL,2U,(_Bool)((bool)((int)silent) != 0)) | err;
  #line 8903 
  err = tg3_stop_block(tp,13312UL,2U,(_Bool)((bool)((int)silent) != 0)) | err;
  #line 8904 
  err = tg3_stop_block(tp,9216UL,2U,(_Bool)((bool)((int)silent) != 0)) | err;
  #line 8905 
  err = tg3_stop_block(tp,10240UL,2U,(_Bool)((bool)((int)silent) != 0)) | err;
  #line 8906 
  err = tg3_stop_block(tp,12288UL,2U,(_Bool)((bool)((int)silent) != 0)) | err;
  #line 8908 
  err = tg3_stop_block(tp,5120UL,2U,(_Bool)((bool)((int)silent) != 0)) | err;
  #line 8909 
  err = tg3_stop_block(tp,6144UL,2U,(_Bool)((bool)((int)silent) != 0)) | err;
  #line 8910 
  err = tg3_stop_block(tp,3072UL,2U,(_Bool)((bool)((int)silent) != 0)) | err;
  #line 8911 
  err = tg3_stop_block(tp,18432UL,2U,(_Bool)((bool)((int)silent) != 0)) | err;
  #line 8912 
  err = tg3_stop_block(tp,4096UL,2U,(_Bool)((bool)((int)silent) != 0)) | err;
  #line 8913 
  err = tg3_stop_block(tp,25600UL,2U,(_Bool)((bool)((int)silent) != 0)) | err;
  #line 8914 
  err = tg3_stop_block(tp,7168UL,2U,(_Bool)((bool)((int)silent) != 0)) | err;
  #line 8916 
  tp->mac_mode &= 4292870143U;
  #line 8917 
  _tw32_flush(tp,1024U,tp->mac_mode,0U);
  #line 8918 
  __const_udelay(171800UL);
  #line 8920 
  tp->tx_mode &= 4294967293U;
  #line 8921 
  _tw32_flush(tp,1116U,tp->tx_mode,0U);
  #line 8923 
  i = 0;
  #line 8923 
  while (i <= 999) {
    {
      #line 8924 
      __const_udelay(429500UL);
      #line 8925 
      if (((*(tp->read32))(tp,1116U) & 2U) == 0U) 
                                                  #line 8926 
                                                  break;
    }
    #line 8923 
    i ++;
  }
  #line 8928 
  if (i > 999) {
    #line 8929 
    ;
    #line 8929 
    _dev_err(& (tp->pdev)->dev,(char *)"%s timed out, TX_MODE_ENABLE will not clear ",(char *)"tg3_abort_hw",(*(tp->read32))(tp,1116U));
    #line 8932 
    err |= -19;
  }
  #line 8935 
  err = tg3_stop_block(tp,15360UL,2U,(_Bool)((bool)((int)silent) != 0)) | err;
  #line 8936 
  err = tg3_stop_block(tp,19456UL,2U,(_Bool)((bool)((int)silent) != 0)) | err;
  #line 8937 
  err = tg3_stop_block(tp,14336UL,2U,(_Bool)((bool)((int)silent) != 0)) | err;
  #line 8939 
  (*(tp->write32))(tp,23552U,4294967295U);
  #line 8940 
  (*(tp->write32))(tp,23552U,0U);
  #line 8942 
  err = tg3_stop_block(tp,17408UL,2U,(_Bool)((bool)((int)silent) != 0)) | err;
  #line 8943 
  err = tg3_stop_block(tp,16384UL,2U,(_Bool)((bool)((int)silent) != 0)) | err;
  #line 8945 
  err_no_dev: 
              #line 8945 
  ;
  #line 8946 
  i = 0;
  #line 8946 
  while (tp->irq_cnt > (unsigned int)i) {
    {
      #line 8947 
      struct tg3_napi *tnapi = & tp->napi[i];
      #line 8948 
      if (tnapi->hw_status != (struct tg3_hw_status *)0) 
                                                         #line 8949 
                                                         memset((void *)tnapi->hw_status,0,80UL);
    }
    #line 8946 
    i ++;
  }
  #line 8952 
  return err;
}

#line 8956  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
static void tg3_save_pci_state(struct tg3 *tp)
{
  #line 8958 
  pci_read_config_word(tp->pdev,4,& tp->pci_cmd);
  #line 8959 
  return;
}

#line 8962  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
static void tg3_restore_pci_state(struct tg3 *tp)
{
  #line 8964 
  u32 val;
  #line 8967 
  pci_write_config_dword(tp->pdev,104,tp->misc_host_ctrl);
  #line 8971 
  val = 96U;
  #line 8972 
  if (tp->pci_chip_rev_id == 8192U) {
    #line 8972 
    if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_PCIX_MODE,
                (unsigned long *)(& tp->tg3_flags)) != 0) 
      #line 8974 
      val |= 8192U;
  }
  #line 8976 
  if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_ENABLE_APE,
                  (unsigned long *)(& tp->tg3_flags)) != 0) 
    #line 8977 
    val |= 458752U;
  #line 8980 
  pci_write_config_dword(tp->pdev,112,val);
  #line 8982 
  pci_write_config_word(tp->pdev,4,(unsigned short)((int)tp->pci_cmd));
  #line 8984 
  if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_PCI_EXPRESS,
                  (unsigned long *)(& tp->tg3_flags)) == 0) {
    #line 8985 
    pci_write_config_byte(tp->pdev,12,(unsigned char)((int)tp->pci_cacheline_sz));
    #line 8987 
    pci_write_config_byte(tp->pdev,13,(unsigned char)((int)tp->pci_lat_timer));
  }
  #line 8992 
  if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_PCIX_MODE,
                  (unsigned long *)(& tp->tg3_flags)) != 0) {
    #line 8993 
    u16 pcix_cmd;
    #line 8995 
    pci_read_config_word(tp->pdev,tp->pcix_cap + 2,& pcix_cmd);
    #line 8997 
    pcix_cmd = (unsigned short)((unsigned int)pcix_cmd & 65533U);
    #line 8998 
    pci_write_config_word(tp->pdev,tp->pcix_cap + 2,(unsigned short)((int)pcix_cmd));
  }
  #line 9002 
  if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_5780_CLASS,
                  (unsigned long *)(& tp->tg3_flags)) != 0) {
    #line 9007 
    if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_USING_MSI,
                  (unsigned long *)(& tp->tg3_flags)) != 0) {
      #line 9008 
      u16 ctrl;
      #line 9010 
      pci_read_config_word(tp->pdev,tp->msi_cap + 2,& ctrl);
      #line 9013 
      pci_write_config_word(tp->pdev,tp->msi_cap + 2,(unsigned short)((int)((unsigned int)ctrl | 1U)));
      #line 9016 
      val = (*(tp->read32))(tp,24576U);
      #line 9017 
      (*(tp->write32))(tp,24576U,val | 2U);
    }
  }
  #line 9019 
  return;
}

#line 9022  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
static void tg3_override_clk(struct tg3 *tp)
{
  #line 9024 
  u32 val;
  #line 9026 
  switch (tp->pci_chip_rev_id >> 12) {
    #line 9027 
    case (u32)22295: 
                     #line 9027 
    ;
    #line 9028 
    val = (*(tp->read32))(tp,13864U);
    #line 9029 
    (*(tp->write32))(tp,13864U,val | 8192U);
    #line 9031 
    break;
    #line 9033 
    case (u32)22297: 
                     #line 9033 
    ;
    #line 9034 
    case (u32)22304: 
                     #line 9034 
    ;
    #line 9035 
    (*(tp->write32))(tp,13860U,2147483648U);
    #line 9036 
    break;
    #line 9038 
    default: 
             #line 9038 
    ;
    #line 9039 
    return;
  }
  #line 9041 
  return;
}

#line 9043  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
static void tg3_restore_clk(struct tg3 *tp)
{
  #line 9045 
  u32 val;
  #line 9047 
  switch (tp->pci_chip_rev_id >> 12) {
    #line 9048 
    case (u32)22295: 
                     #line 9048 
    ;
    #line 9049 
    val = (*(tp->read32))(tp,13864U);
    #line 9050 
    (*(tp->write32))(tp,13864U,val & 4294959103U);
    #line 9052 
    break;
    #line 9054 
    case (u32)22297: 
                     #line 9054 
    ;
    #line 9055 
    case (u32)22304: 
                     #line 9055 
    ;
    #line 9056 
    val = (*(tp->read32))(tp,13860U);
    #line 9057 
    (*(tp->write32))(tp,13860U,val & 2147483647U);
    #line 9058 
    break;
    #line 9060 
    default: 
             #line 9060 
    ;
    #line 9061 
    return;
  }
  #line 9063 
  return;
}

#line 9066  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
static int tg3_chip_reset(struct tg3 *tp)
{
  #line 9070 
  u32 val;
  #line 9071 
  void (*write_op)(struct tg3 *, u32 , u32 );
  #line 9072 
  int i;
  #line 9072 
  int err;
  #line 9074 
  if (! pci_device_is_present(tp->pdev)) 
                                         #line 9075 
                                         return -19;
  #line 9077 
  tg3_nvram_lock(tp);
  #line 9079 
  tg3_ape_lock(tp,1);
  #line 9084 
  tp->nvram_lock_cnt = 0;
  #line 9090 
  tg3_save_pci_state(tp);
  #line 9092 
  if (tp->pci_chip_rev_id >> 12 == 6U) 
                                       #line 9094 
                                       (*(tp->write32))(tp,26772U,0U);
  else {
    #line 9092 
    if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_5755_PLUS,
                  (unsigned long *)(& tp->tg3_flags)) != 0) 
      #line 9094 
      (*(tp->write32))(tp,26772U,0U);
  }
  #line 9102 
  write_op = tp->write32;
  #line 9103 
  if (write_op == & tg3_write_flush_reg32) 
                                           #line 9104 
                                           tp->write32 = & tg3_write32;
  #line 9112 
  _tg3_flag_set((enum TG3_FLAGS)TG3_FLAG_CHIP_RESETTING,(unsigned long *)(& tp->tg3_flags));
  #line 9113 
  i = 0;
  #line 9113 
  while (tp->irq_cnt > (unsigned int)i) {
    {
      #line 9114 
      struct tg3_napi *tnapi = & tp->napi[i];
      #line 9115 
      if (tnapi->hw_status != (struct tg3_hw_status *)0) {
        #line 9116 
        (tnapi->hw_status)->status = 0U;
        #line 9117 
        (tnapi->hw_status)->status_tag = 0U;
      }
      #line 9119 
      tnapi->last_tag = 0U;
      #line 9120 
      tnapi->last_irq_tag = 0U;
    }
    #line 9113 
    i ++;
  }
  #line 9122 
  ldv_inline_asm();
  #line 9124 
  tg3_full_unlock(tp);
  #line 9126 
  i = 0;
  #line 9126 
  while (tp->irq_cnt > (unsigned int)i) {
    #line 9127 
    synchronize_irq(tp->napi[i].irq_vec);
    #line 9126 
    i ++;
  }
  #line 9129 
  tg3_full_lock(tp,0);
  #line 9131 
  if (tp->pci_chip_rev_id >> 12 == 358272U) {
    #line 9132 
    val = (*(tp->read32))(tp,32084U) & 4294967287U;
    #line 9133 
    (*(tp->write32))(tp,32084U,val | 128U);
  }
  #line 9137 
  val = 1U;
  #line 9139 
  if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_PCI_EXPRESS,
                  (unsigned long *)(& tp->tg3_flags)) != 0) {
    #line 9141 
    if (tp->pci_chip_rev_id >> 12 != 22405U) {
      #line 9141 
      if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_57765_PLUS,
                  (unsigned long *)(& tp->tg3_flags)) == 0) {
        #line 9142 
        if ((*(tp->read32))(tp,32300U) == 96U) 
                                               #line 9145 
                                               (*(tp->write32))(tp,32300U,32U);
      }
    }
    #line 9147 
    if (tp->pci_chip_rev_id != 16384U) {
      #line 9148 
      (*(tp->write32))(tp,26628U,536870912U);
      #line 9149 
      val |= 536870912U;
    }
  }
  #line 9153 
  if (tp->pci_chip_rev_id >> 12 == 12U) {
    #line 9154 
    ;
    #line 9154 
    (*(tp->write32))(tp,20736U,(*(tp->read32))(tp,20736U) | 134217728U);
    #line 9155 
    ;
    #line 9155 
    (*(tp->write32))(tp,26768U,(*(tp->read32))(tp,26768U) & 4290772991U);
  }
  #line 9164 
  tg3_override_clk(tp);
  #line 9167 
  if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_5705_PLUS,
                  (unsigned long *)(& tp->tg3_flags)) != 0) {
    #line 9167 
    if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_CPMU_PRESENT,
                  (unsigned long *)(& tp->tg3_flags)) == 0) 
      #line 9168 
      val |= 67108864U;
  }
  #line 9170 
  (*(tp->write32))(tp,26628U,val);
  #line 9173 
  tp->write32 = write_op;
  #line 9188 
  __const_udelay(515400UL);
  #line 9196 
  pci_read_config_dword(tp->pdev,4,& val);
  #line 9198 
  __const_udelay(515400UL);
  #line 9200 
  if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_PCI_EXPRESS,
                   (unsigned long *)(& tp->tg3_flags)) != 0) {
    #line 9200 
    if ((int)pci_is_pcie(tp->pdev) != 0) {
      #line 9201 
      u16 val16;
      #line 9203 
      if (tp->pci_chip_rev_id == 16384U) {
        #line 9204 
        int j;
        #line 9205 
        u32 cfg_val;
        #line 9208 
        j = 0;
        #line 9208 
        while (j <= 4999) {
          #line 9209 
          __const_udelay(429500UL);
          #line 9208 
          j ++;
        }
        #line 9211 
        pci_read_config_dword(tp->pdev,196,& cfg_val);
        #line 9212 
        pci_write_config_dword(tp->pdev,196,cfg_val | 32768U);
      }
      #line 9217 
      val16 = (unsigned short)2064U;
      #line 9222 
      if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_CPMU_PRESENT,
                  (unsigned long *)(& tp->tg3_flags)) == 0) 
        #line 9223 
        val16 = (unsigned short)((unsigned int)val16 | 224U);
      #line 9224 
      pcie_capability_clear_word(tp->pdev,8,(unsigned short)((int)val16));
      #line 9227 
      pcie_capability_write_word(tp->pdev,10,(unsigned short)15);
    }
  }
  #line 9234 
  tg3_restore_pci_state(tp);
  #line 9236 
  _tg3_flag_clear((enum TG3_FLAGS)TG3_FLAG_CHIP_RESETTING,(unsigned long *)(& tp->tg3_flags));
  #line 9237 
  _tg3_flag_clear((enum TG3_FLAGS)TG3_FLAG_ERROR_PROCESSED,(unsigned long *)(& tp->tg3_flags));
  #line 9239 
  val = 0U;
  #line 9240 
  if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_5780_CLASS,
                   (unsigned long *)(& tp->tg3_flags)) != 0) 
    #line 9241 
    val = (*(tp->read32))(tp,16384U);
  #line 9242 
  (*(tp->write32))(tp,16384U,val | 2U);
  #line 9244 
  if (tp->pci_chip_rev_id == 16387U) {
    #line 9245 
    tg3_stop_fw(tp);
    #line 9246 
    (*(tp->write32))(tp,20480U,1024U);
  }
  #line 9249 
  if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_IS_SSB_CORE,
                   (unsigned long *)(& tp->tg3_flags)) != 0) {
    #line 9255 
    tg3_stop_fw(tp);
    #line 9256 
    tg3_halt_cpu(tp,20480U);
  }
  #line 9259 
  err = tg3_poll_fw(tp);
  #line 9260 
  if (err != 0) 
                #line 9261 
                return err;
  #line 9263 
  (*(tp->write32))(tp,26624U,tp->grc_mode);
  #line 9265 
  if (tp->pci_chip_rev_id == 12288U) {
    #line 9266 
    val = (*(tp->read32))(tp,196U);
    #line 9268 
    (*(tp->write32))(tp,196U,val | 32768U);
  }
  #line 9271 
  if ((tp->nic_sram_data_cfg & 4096U) != 0U && tp->pci_chip_rev_id >> 12 == 3U) {
    #line 9273 
    tp->pci_clock_ctrl |= 4194304U;
    #line 9274 
    if (tp->pci_chip_rev_id == 12288U) 
                                       #line 9275 
                                       tp->pci_clock_ctrl |= 2097152U;
    #line 9276 
    (*(tp->write32))(tp,116U,tp->pci_clock_ctrl);
  }
  #line 9279 
  if ((tp->phy_flags & 16U) != 0U) {
    #line 9280 
    tp->mac_mode = 12U;
    #line 9281 
    val = tp->mac_mode;
  }
  else 
    #line 9282 
    if ((tp->phy_flags & 32U) != 0U) {
      #line 9283 
      tp->mac_mode = 8U;
      #line 9284 
      val = tp->mac_mode;
    }
    else 
         #line 9286 
         val = 0U;
  #line 9288 
  _tw32_flush(tp,1024U,val,0U);
  #line 9289 
  __const_udelay(171800UL);
  #line 9291 
  tg3_ape_unlock(tp,1);
  #line 9293 
  tg3_mdio_start(tp);
  #line 9295 
  if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_PCI_EXPRESS,
                   (unsigned long *)(& tp->tg3_flags)) != 0) 
    #line 9295 
    if (tp->pci_chip_rev_id != 16384U) 
      #line 9296 
      if (tp->pci_chip_rev_id >> 12 != 22405U) {
        #line 9297 
        if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_57765_PLUS,
                   (unsigned long *)(& tp->tg3_flags)) == 0) {
          #line 9299 
          val = (*(tp->read32))(tp,31744U);
          #line 9301 
          (*(tp->write32))(tp,31744U,val | 33554432U);
        }
      }
  #line 9304 
  tg3_restore_clk(tp);
  #line 9309 
  if (tp->pci_chip_rev_id >> 12 == 22370U) {
    #line 9310 
    val = (*(tp->read32))(tp,13864U);
    #line 9311 
    (*(tp->write32))(tp,13864U,val | 8192U);
  }
  #line 9316 
  _tg3_flag_clear((enum TG3_FLAGS)TG3_FLAG_ENABLE_ASF,(unsigned long *)(& tp->tg3_flags));
  #line 9317 
  tp->phy_flags &= 4293394431U;
  #line 9320 
  _tg3_flag_clear((enum TG3_FLAGS)TG3_FLAG_ASF_NEW_HANDSHAKE,(unsigned long *)(& tp->tg3_flags));
  #line 9321 
  tg3_read_mem(tp,2900U,& val);
  #line 9322 
  if (val == 1264940628U) {
    #line 9323 
    u32 nic_cfg;
    #line 9325 
    tg3_read_mem(tp,2904U,& nic_cfg);
    #line 9326 
    if ((nic_cfg & 128U) != 0U) {
      #line 9327 
      _tg3_flag_set((enum TG3_FLAGS)TG3_FLAG_ENABLE_ASF,(unsigned long *)(& tp->tg3_flags));
      #line 9328 
      tp->__anonCompField_tg3_209.last_event_jiffies = jiffies;
      #line 9329 
      if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_5750_PLUS,
                   (unsigned long *)(& tp->tg3_flags)) != 0) 
        #line 9330 
        _tg3_flag_set((enum TG3_FLAGS)TG3_FLAG_ASF_NEW_HANDSHAKE,(unsigned long *)(& tp->tg3_flags));
      #line 9332 
      tg3_read_mem(tp,3388U,& nic_cfg);
      #line 9333 
      if ((nic_cfg & 8388608U) != 0U) 
                                      #line 9334 
                                      tp->phy_flags |= 524288U;
      #line 9335 
      if ((nic_cfg & 4194304U) != 0U) 
                                      #line 9336 
                                      tp->phy_flags |= 1048576U;
    }
  }
  #line 9340 
  return 0;
}

#line 9343 
#line 11914 
static void tg3_get_nstats(struct tg3 *tp, struct rtnl_link_stats64 *stats);
#line 9344 
#line 11830 
static void tg3_get_estats(struct tg3 *tp, struct tg3_ethtool_stats *estats);
#line 9345 
#line 9748 
static void __tg3_set_rx_mode(struct net_device *dev);
#line 9348  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
static int tg3_halt(struct tg3 *tp, int kind, bool silent)
{
  #line 9350 
  int err;
  #line 9352 
  tg3_stop_fw(tp);
  #line 9354 
  tg3_write_sig_pre_reset(tp,kind);
  #line 9356 
  tg3_abort_hw(tp,(_Bool)((bool)((int)silent) != 0));
  #line 9357 
  err = tg3_chip_reset(tp);
  #line 9359 
  __tg3_set_mac_addr(tp,(_Bool)0);
  #line 9361 
  tg3_write_sig_legacy(tp,kind);
  #line 9362 
  tg3_write_sig_post_reset(tp,kind);
  #line 9364 
  if (tp->hw_stats != (struct tg3_hw_stats *)0) {
    #line 9366 
    tg3_get_nstats(tp,& tp->net_stats_prev);
    #line 9367 
    tg3_get_estats(tp,& tp->estats_prev);
    #line 9370 
    memset((void *)tp->hw_stats,0,2048UL);
  }
  #line 9373 
  return err;
}

#line 9376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
static int tg3_set_mac_addr(struct net_device *dev, void *p)
{
  #line 9378 
  struct tg3 *tp = netdev_priv(dev);
  #line 9379 
  struct sockaddr *addr = (struct sockaddr *)p;
  #line 9380 
  int err = 0;
  #line 9381 
  bool skip_mac_1 = (_Bool)0;
  #line 9383 
  if (! is_valid_ether_addr((u8 *)(& addr->sa_data))) 
                                                      #line 9384 
                                                      return -99;
  #line 9386 
  memcpy((void *)dev->dev_addr,(void *)(& addr->sa_data),(unsigned long)dev->addr_len);
  #line 9388 
  if (! netif_running(dev)) 
                            #line 9389 
                            return 0;
  #line 9391 
  if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_ENABLE_ASF,
                  (unsigned long *)(& tp->tg3_flags)) != 0) {
    #line 9392 
    u32 addr0_high;
    #line 9392 
    u32 addr0_low;
    #line 9392 
    u32 addr1_high;
    #line 9392 
    u32 addr1_low;
    #line 9394 
    addr0_high = (*(tp->read32))(tp,1040U);
    #line 9395 
    addr0_low = (*(tp->read32))(tp,1044U);
    #line 9396 
    addr1_high = (*(tp->read32))(tp,1048U);
    #line 9397 
    addr1_low = (*(tp->read32))(tp,1052U);
    #line 9400 
    if ((addr0_high != addr1_high || addr0_low != addr1_low) && (addr1_high != 0U || addr1_low != 0U)) 
      #line 9402 
      skip_mac_1 = (_Bool)1;
  }
  #line 9404 
  cif_spin_lock_bh_lock_of_tg3(& tp->lock);
  #line 9405 
  __tg3_set_mac_addr(tp,(_Bool)((bool)((int)skip_mac_1) != 0));
  #line 9406 
  __tg3_set_rx_mode(dev);
  #line 9407 
  cif_spin_unlock_bh_lock_of_tg3(& tp->lock);
  #line 9409 
  return err;
}

#line 9413  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
static void tg3_set_bdinfo(struct tg3 *tp, u32 bdinfo_addr, dma_addr_t mapping, u32 maxlen_flags, u32 nic_addr)
{
  #line 9417 
  tg3_write_mem(tp,bdinfo_addr,(unsigned int)(mapping >> 32));
  #line 9420 
  tg3_write_mem(tp,bdinfo_addr + 4U,(unsigned int)mapping);
  #line 9423 
  tg3_write_mem(tp,bdinfo_addr + 8U,maxlen_flags);
  #line 9427 
  if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_5705_PLUS,
                (unsigned long *)(& tp->tg3_flags)) == 0) 
    #line 9428 
    tg3_write_mem(tp,bdinfo_addr + 12U,nic_addr);
  #line 9430 
  return;
}

#line 9434  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
static void tg3_coal_tx_init(struct tg3 *tp, struct ethtool_coalesce *ec)
{
  #line 9436 
  int i = 0;
  #line 9438 
  if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_ENABLE_TSS,
                (unsigned long *)(& tp->tg3_flags)) == 0) {
    #line 9439 
    (*(tp->write32))(tp,15372U,ec->tx_coalesce_usecs);
    #line 9440 
    (*(tp->write32))(tp,15380U,ec->tx_max_coalesced_frames);
    #line 9441 
    (*(tp->write32))(tp,15396U,ec->tx_max_coalesced_frames_irq);
  }
  else {
    #line 9443 
    (*(tp->write32))(tp,15372U,0U);
    #line 9444 
    (*(tp->write32))(tp,15380U,0U);
    #line 9445 
    (*(tp->write32))(tp,15396U,0U);
    #line 9447 
    while (tp->txq_cnt > (unsigned int)i) {
      {
        #line 9448 
        u32 reg;
        #line 9450 
        reg = (unsigned int)(i * 24 + 15748);
        #line 9451 
        (*(tp->write32))(tp,reg,ec->tx_coalesce_usecs);
        #line 9452 
        reg = (unsigned int)(i * 24 + 15756);
        #line 9453 
        (*(tp->write32))(tp,reg,ec->tx_max_coalesced_frames);
        #line 9454 
        reg = (unsigned int)(i * 24 + 15764);
        #line 9455 
        (*(tp->write32))(tp,reg,ec->tx_max_coalesced_frames_irq);
      }
      #line 9447 
      i ++;
    }
  }
  #line 9459 
  while (tp->irq_max + 4294967295U > (unsigned int)i) {
    #line 9460 
    (*(tp->write32))(tp,(unsigned int)(i * 24 + 15748),0U);
    #line 9461 
    (*(tp->write32))(tp,(unsigned int)(i * 24 + 15756),0U);
    #line 9462 
    (*(tp->write32))(tp,(unsigned int)(i * 24 + 15764),0U);
    #line 9459 
    i ++;
  }
  #line 9464 
  return;
}

#line 9466  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
static void tg3_coal_rx_init(struct tg3 *tp, struct ethtool_coalesce *ec)
{
  #line 9468 
  int i = 0;
  #line 9469 
  u32 limit = tp->rxq_cnt;
  #line 9471 
  if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_ENABLE_RSS,
                (unsigned long *)(& tp->tg3_flags)) == 0) {
    #line 9472 
    (*(tp->write32))(tp,15368U,ec->rx_coalesce_usecs);
    #line 9473 
    (*(tp->write32))(tp,15376U,ec->rx_max_coalesced_frames);
    #line 9474 
    (*(tp->write32))(tp,15392U,ec->rx_max_coalesced_frames_irq);
    #line 9475 
    limit --;
  }
  else {
    #line 9477 
    (*(tp->write32))(tp,15368U,0U);
    #line 9478 
    (*(tp->write32))(tp,15376U,0U);
    #line 9479 
    (*(tp->write32))(tp,15392U,0U);
  }
  #line 9482 
  while ((unsigned int)i < limit) {
    {
      #line 9483 
      u32 reg;
      #line 9485 
      reg = (unsigned int)(i * 24 + 15744);
      #line 9486 
      (*(tp->write32))(tp,reg,ec->rx_coalesce_usecs);
      #line 9487 
      reg = (unsigned int)(i * 24 + 15752);
      #line 9488 
      (*(tp->write32))(tp,reg,ec->rx_max_coalesced_frames);
      #line 9489 
      reg = (unsigned int)(i * 24 + 15760);
      #line 9490 
      (*(tp->write32))(tp,reg,ec->rx_max_coalesced_frames_irq);
    }
    #line 9482 
    i ++;
  }
  #line 9493 
  while (tp->irq_max + 4294967295U > (unsigned int)i) {
    #line 9494 
    (*(tp->write32))(tp,(unsigned int)(i * 24 + 15744),0U);
    #line 9495 
    (*(tp->write32))(tp,(unsigned int)(i * 24 + 15752),0U);
    #line 9496 
    (*(tp->write32))(tp,(unsigned int)(i * 24 + 15760),0U);
    #line 9493 
    i ++;
  }
  #line 9498 
  return;
}

#line 9500  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
static void __tg3_set_coalesce(struct tg3 *tp, struct ethtool_coalesce *ec)
{
  #line 9502 
  tg3_coal_tx_init(tp,ec);
  #line 9503 
  tg3_coal_rx_init(tp,ec);
  #line 9505 
  if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_5705_PLUS,
                (unsigned long *)(& tp->tg3_flags)) == 0) {
    #line 9506 
    u32 val = ec->stats_block_coalesce_usecs;
    #line 9508 
    (*(tp->write32))(tp,15384U,ec->rx_coalesce_usecs_irq);
    #line 9509 
    (*(tp->write32))(tp,15388U,ec->tx_coalesce_usecs_irq);
    #line 9511 
    if (! tp->link_up) 
                       #line 9512 
                       val = 0U;
    #line 9514 
    (*(tp->write32))(tp,15400U,val);
  }
  #line 9516 
  return;
}

#line 9519  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
static void tg3_tx_rcbs_disable(struct tg3 *tp)
{
  #line 9521 
  u32 txrcb;
  #line 9521 
  u32 limit;
  #line 9524 
  if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_5705_PLUS,
                  (unsigned long *)(& tp->tg3_flags)) == 0) 
    #line 9525 
    limit = 512U;
  else {
    #line 9526 
    if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_5717_PLUS,
                  (unsigned long *)(& tp->tg3_flags)) != 0) 
      #line 9527 
      limit = 320U;
    else {
      #line 9528 
      if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_57765_CLASS,
                (unsigned long *)(& tp->tg3_flags)) != 0) 
        #line 9528 
        goto _LOR;
      else 
        #line 9528 
        if (tp->pci_chip_rev_id >> 12 == 22370U) 
                                                 #line 9528 
                                                 _LOR: 
                                                       #line 9530 
                                                       limit = 288U; else 
                                                                    #line 9532 
                                                                    limit = 272U;
    }
  }
  #line 9534 
  txrcb = 272U;
  #line 9534 
  while (txrcb < limit) {
    #line 9536 
    tg3_write_mem(tp,txrcb + 8U,2U);
    #line 9535 
    txrcb += 16U;
  }
  #line 9537 
  return;
}

#line 9541  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
static void tg3_tx_rcbs_init(struct tg3 *tp)
{
  #line 9543 
  int i = 0;
  #line 9544 
  u32 txrcb = 256U;
  #line 9546 
  if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_ENABLE_TSS,
                (unsigned long *)(& tp->tg3_flags)) != 0) 
    #line 9547 
    i ++;
  #line 9549 
  while (tp->irq_max > (unsigned int)i) {
    {
      #line 9550 
      struct tg3_napi *tnapi = & tp->napi[i];
      #line 9552 
      if (tnapi->tx_ring == (struct tg3_tx_buffer_desc *)0) 
                                                            #line 9553 
                                                            goto __Cont;
      #line 9555 
      tg3_set_bdinfo(tp,txrcb,tnapi->tx_desc_mapping,33554432U,16384U);
    }
    #line 9549 
    __Cont: 
            #line 9549 
    i ++;
    #line 9549 
    txrcb += 16U;
  }
  #line 9557 
  return;
}

#line 9562  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
static void tg3_rx_ret_rcbs_disable(struct tg3 *tp)
{
  #line 9564 
  u32 rxrcb;
  #line 9564 
  u32 limit;
  #line 9567 
  if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_5717_PLUS,
                  (unsigned long *)(& tp->tg3_flags)) != 0) 
    #line 9568 
    limit = 784U;
  else {
    #line 9569 
    if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_5705_PLUS,
                  (unsigned long *)(& tp->tg3_flags)) == 0) 
      #line 9570 
      limit = 768U;
    else 
      #line 9571 
      if (tp->pci_chip_rev_id >> 12 == 10U || tp->pci_chip_rev_id >> 12 == 22370U) 
        #line 9571 
        goto _LOR;
      else {
        #line 9572 
        if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_57765_CLASS,
                (unsigned long *)(& tp->tg3_flags)) != 0) 
          #line 9571 
          _LOR: 
                #line 9574 
                limit = 576U; else 
                                   #line 9576 
                                   limit = 528U;
      }
  }
  #line 9578 
  rxrcb = 528U;
  #line 9578 
  while (rxrcb < limit) {
    #line 9580 
    tg3_write_mem(tp,rxrcb + 8U,2U);
    #line 9579 
    rxrcb += 16U;
  }
  #line 9581 
  return;
}

#line 9585  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
static void tg3_rx_ret_rcbs_init(struct tg3 *tp)
{
  #line 9587 
  int i = 0;
  #line 9588 
  u32 rxrcb = 512U;
  #line 9590 
  if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_ENABLE_RSS,
                (unsigned long *)(& tp->tg3_flags)) != 0) 
    #line 9591 
    i ++;
  #line 9593 
  while (tp->irq_max > (unsigned int)i) {
    {
      #line 9594 
      struct tg3_napi *tnapi = & tp->napi[i];
      #line 9596 
      if (tnapi->rx_rcb == (struct tg3_rx_buffer_desc *)0) 
                                                           #line 9597 
                                                           goto __Cont;
      #line 9599 
      tg3_set_bdinfo(tp,rxrcb,tnapi->rx_rcb_mapping,(tp->rx_ret_ring_mask + 1U) << 16,0U);
    }
    #line 9593 
    __Cont: 
            #line 9593 
    i ++;
    #line 9593 
    rxrcb += 16U;
  }
  #line 9602 
  return;
}

#line 9606  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
static void tg3_rings_reset(struct tg3 *tp)
{
  #line 9608 
  int i;
  #line 9609 
  u32 stblk;
  #line 9610 
  struct tg3_napi *tnapi = & tp->napi[0];
  #line 9612 
  tg3_tx_rcbs_disable(tp);
  #line 9614 
  tg3_rx_ret_rcbs_disable(tp);
  #line 9617 
  tw32_mailbox_flush(tp,tp->napi[0].int_mbox,1U);
  #line 9618 
  tp->napi[0].chk_msi_cnt = 0U;
  #line 9619 
  tp->napi[0].last_rx_cons = 0U;
  #line 9620 
  tp->napi[0].last_tx_cons = 0U;
  #line 9623 
  if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_SUPPORT_MSIX,
                  (unsigned long *)(& tp->tg3_flags)) != 0) {
    #line 9624 
    i = 1;
    #line 9624 
    while (tp->irq_max > (unsigned int)i) {
      {
        #line 9625 
        tp->napi[i].tx_prod = 0U;
        #line 9626 
        tp->napi[i].tx_cons = 0U;
        #line 9627 
        if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_ENABLE_TSS,
                (unsigned long *)(& tp->tg3_flags)) != 0) 
          #line 9628 
          (*(tp->write32_mbox))(tp,tp->napi[i].prodmbox,0U);
        #line 9629 
        (*(tp->write32_rx_mbox))(tp,tp->napi[i].consmbox,0U);
        #line 9630 
        tw32_mailbox_flush(tp,tp->napi[i].int_mbox,1U);
        #line 9631 
        tp->napi[i].chk_msi_cnt = 0U;
        #line 9632 
        tp->napi[i].last_rx_cons = 0U;
        #line 9633 
        tp->napi[i].last_tx_cons = 0U;
      }
      #line 9624 
      i ++;
    }
    #line 9635 
    if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_ENABLE_TSS,
                  (unsigned long *)(& tp->tg3_flags)) == 0) 
      #line 9636 
      (*(tp->write32_mbox))(tp,tp->napi[0].prodmbox,0U);
  }
  else {
    #line 9638 
    tp->napi[0].tx_prod = 0U;
    #line 9639 
    tp->napi[0].tx_cons = 0U;
    #line 9640 
    (*(tp->write32_mbox))(tp,tp->napi[0].prodmbox,0U);
    #line 9641 
    (*(tp->write32_rx_mbox))(tp,tp->napi[0].consmbox,0U);
  }
  #line 9645 
  if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_5705_PLUS,
                  (unsigned long *)(& tp->tg3_flags)) == 0) {
    #line 9646 
    u32 mbox = 900U;
    #line 9647 
    i = 0;
    #line 9647 
    while (i <= 15) {
      #line 9648 
      (*(tp->write32_tx_mbox))(tp,(unsigned int)(i * 8) + mbox,0U);
      #line 9647 
      i ++;
    }
  }
  #line 9652 
  memset((void *)tnapi->hw_status,0,80UL);
  #line 9655 
  (*(tp->write32))(tp,15416U,(unsigned int)(tnapi->status_mapping >> 32));
  #line 9657 
  (*(tp->write32))(tp,15420U,(unsigned int)tnapi->status_mapping);
  #line 9660 
  stblk = 15616U;
  #line 9662 
  i = 1;
  #line 9662 
  tnapi ++;
  #line 9662 
  while (tp->irq_cnt > (unsigned int)i) {
    {
      #line 9663 
      u64 mapping = tnapi->status_mapping;
      #line 9664 
      (*(tp->write32))(tp,stblk,(unsigned int)(mapping >> 32));
      #line 9665 
      (*(tp->write32))(tp,stblk + 4U,(unsigned int)mapping);
      #line 9666 
      stblk += 8U;
      #line 9669 
      memset((void *)tnapi->hw_status,0,80UL);
    }
    #line 9662 
    i ++;
    #line 9662 
    tnapi ++;
  }
  #line 9672 
  tg3_tx_rcbs_init(tp);
  #line 9673 
  tg3_rx_ret_rcbs_init(tp);
  #line 9674 
  return;
}

#line 9676  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
static void tg3_setup_rxbd_thresholds(struct tg3 *tp)
{
  #line 9708 
  u32 tmp_13;
  #line 9693 
  unsigned int tmp_4;
  #line 9695 
  u32 __UNIQUE_ID___x570;
  #line 9695 
  u32 tmp_6;
  #line 9706 
  unsigned int __UNIQUE_ID___x572;
  #line 9692 
  u32 __UNIQUE_ID___x566;
  #line 9706 
  unsigned int tmp_11;
  #line 9692 
  u32 tmp_2;
  #line 9708 
  u32 __UNIQUE_ID___x574;
  #line 9693 
  unsigned int __UNIQUE_ID___x568;
  #line 9678 
  u32 val;
  #line 9678 
  u32 bdcache_maxcnt;
  #line 9678 
  u32 host_rep_thresh;
  #line 9678 
  u32 nic_rep_thresh;
  #line 9680 
  if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_5750_PLUS,
                (unsigned long *)(& tp->tg3_flags)) == 0) 
    #line 9680 
    goto _LOR;
  else {
    #line 9680 
    if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_5780_CLASS,
                  (unsigned long *)(& tp->tg3_flags)) != 0) 
      #line 9680 
      goto _LOR;
    else 
      #line 9681 
      if (tp->pci_chip_rev_id >> 12 == 4U) 
                                           #line 9680 
                                           goto _LOR;
      else 
        #line 9682 
        if (tp->pci_chip_rev_id >> 12 == 6U) 
                                             #line 9680 
                                             goto _LOR;
        else {
          #line 9683 
          if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_57765_PLUS,
                  (unsigned long *)(& tp->tg3_flags)) != 0) 
            #line 9680 
            _LOR: 
                  #line 9685 
                  bdcache_maxcnt = 128U;
          else 
            #line 9686 
            if ((tp->pci_chip_rev_id >> 12) + 4294967286U <= 1U) 
                                                                 #line 9688 
                                                                 bdcache_maxcnt = 64U; else 
                                                                    #line 9690 
                                                                    bdcache_maxcnt = 32U;
        }
  }
  {
    #line 9692 
    __UNIQUE_ID___x566 = bdcache_maxcnt / 2U;
    #line 9692 
    u32 __UNIQUE_ID___y567 = tp->rx_std_max_post;
    #line 9692 
    if (__UNIQUE_ID___x566 < __UNIQUE_ID___y567) 
                                                 #line 9692 
                                                 tmp_2 = __UNIQUE_ID___x566; else 
                                                                    #line 9692 
                                                                    tmp_2 = __UNIQUE_ID___y567;
    }
  #line 9692 
  nic_rep_thresh = tmp_2;
  {
    #line 9693 
    __UNIQUE_ID___x568 = tp->rx_pending / 8U;
    #line 9693 
    unsigned int __UNIQUE_ID___y569 = 1U;
    #line 9693 
    if (__UNIQUE_ID___x568 > __UNIQUE_ID___y569) 
                                                 #line 9693 
                                                 tmp_4 = __UNIQUE_ID___x568; else 
                                                                    #line 9693 
                                                                    tmp_4 = __UNIQUE_ID___y569;
    }
  #line 9693 
  host_rep_thresh = tmp_4;
  {
    #line 9695 
    __UNIQUE_ID___x570 = nic_rep_thresh;
    #line 9695 
    u32 __UNIQUE_ID___y571 = host_rep_thresh;
    #line 9695 
    if (__UNIQUE_ID___x570 < __UNIQUE_ID___y571) 
                                                 #line 9695 
                                                 tmp_6 = __UNIQUE_ID___x570; else 
                                                                    #line 9695 
                                                                    tmp_6 = __UNIQUE_ID___y571;
    }
  #line 9695 
  val = tmp_6;
  #line 9696 
  (*(tp->write32))(tp,11288U,val);
  #line 9698 
  if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_57765_PLUS,
                  (unsigned long *)(& tp->tg3_flags)) != 0) 
    #line 9699 
    (*(tp->write32))(tp,11520U,bdcache_maxcnt);
  #line 9701 
  if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_JUMBO_CAPABLE,
                  (unsigned long *)(& tp->tg3_flags)) == 0) 
    #line 9702 
    return;
  else {
    #line 9701 
    if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_5780_CLASS,
                   (unsigned long *)(& tp->tg3_flags)) != 0) 
      #line 9702 
      return;
  }
  #line 9704 
  bdcache_maxcnt = 64U;
  {
    #line 9706 
    __UNIQUE_ID___x572 = tp->rx_jumbo_pending / 8U;
    #line 9706 
    unsigned int __UNIQUE_ID___y573 = 1U;
    #line 9706 
    if (__UNIQUE_ID___x572 > __UNIQUE_ID___y573) 
                                                 #line 9706 
                                                 tmp_11 = __UNIQUE_ID___x572; else 
                                                                    #line 9706 
                                                                    tmp_11 = __UNIQUE_ID___y573;
    }
  #line 9706 
  host_rep_thresh = tmp_11;
  {
    #line 9708 
    __UNIQUE_ID___x574 = bdcache_maxcnt / 2U;
    #line 9708 
    u32 __UNIQUE_ID___y575 = host_rep_thresh;
    #line 9708 
    if (__UNIQUE_ID___x574 < __UNIQUE_ID___y575) 
                                                 #line 9708 
                                                 tmp_13 = __UNIQUE_ID___x574; else 
                                                                    #line 9708 
                                                                    tmp_13 = __UNIQUE_ID___y575;
    }
  #line 9708 
  val = tmp_13;
  #line 9709 
  (*(tp->write32))(tp,11292U,val);
  #line 9711 
  if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_57765_PLUS,
                   (unsigned long *)(& tp->tg3_flags)) != 0) 
    #line 9712 
    (*(tp->write32))(tp,11524U,bdcache_maxcnt);
  #line 9713 
  return;
}

#line 9715  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
__inline static u32 calc_crc(unsigned char *buf, int len)
{
  #line 9717 
  u32 reg;
  #line 9718 
  u32 tmp;
  #line 9719 
  int j;
  #line 9719 
  int k;
  #line 9721 
  reg = 4294967295U;
  #line 9723 
  j = 0;
  #line 9723 
  while (j < len) {
    #line 9724 
    reg = (unsigned int)*(buf + (unsigned long)j) ^ reg;
    #line 9726 
    k = 0;
    #line 9726 
    while (k <= 7) {
      #line 9727 
      tmp = reg & 1U;
      #line 9729 
      reg >>= 1;
      #line 9731 
      if (tmp != 0U) 
                     #line 9732 
                     reg ^= 3988292384U;
      #line 9726 
      k ++;
    }
    #line 9723 
    j ++;
  }
  #line 9736 
  return ~ reg;
}

#line 9739  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
static void tg3_set_multi(struct tg3 *tp, unsigned int accept_all)
{
  #line 9742 
  unsigned int tmp;
  #line 9743 
  unsigned int tmp_0;
  #line 9744 
  unsigned int tmp_1;
  #line 9745 
  unsigned int tmp_2;
  #line 9742 
  if (accept_all != 0U) 
                        #line 9742 
                        tmp = 4294967295U; else 
                                                #line 9742 
                                                tmp = 0U;
  #line 9742 
  ;
  #line 9742 
  (*(tp->write32))(tp,1136U,tmp);
  #line 9743 
  if (accept_all != 0U) 
                        #line 9743 
                        tmp_0 = 4294967295U; else 
                                                  #line 9743 
                                                  tmp_0 = 0U;
  #line 9743 
  ;
  #line 9743 
  (*(tp->write32))(tp,1140U,tmp_0);
  #line 9744 
  if (accept_all != 0U) 
                        #line 9744 
                        tmp_1 = 4294967295U; else 
                                                  #line 9744 
                                                  tmp_1 = 0U;
  #line 9744 
  ;
  #line 9744 
  (*(tp->write32))(tp,1144U,tmp_1);
  #line 9745 
  if (accept_all != 0U) 
                        #line 9745 
                        tmp_2 = 4294967295U; else 
                                                  #line 9745 
                                                  tmp_2 = 0U;
  #line 9745 
  ;
  #line 9745 
  (*(tp->write32))(tp,1148U,tmp_2);
  #line 9746 
  return;
}

#line 9748  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
static void __tg3_set_rx_mode(struct net_device *dev)
{
  #line 9751 
  u32 rx_mode;
  #line 9795 
  int tmp_7;
  #line 9750 
  struct tg3 *tp = netdev_priv(dev);
  #line 9753 
  rx_mode = tp->rx_mode & 4294966015U;
  #line 9764 
  if ((dev->flags & 256U) != 0U) 
                                 #line 9766 
                                 rx_mode |= 256U;
  else 
    #line 9767 
    if ((dev->flags & 512U) != 0U) 
                                   #line 9769 
                                   tg3_set_multi(tp,1U);
    else 
      #line 9770 
      if (dev->mc.count == 0) 
                              #line 9772 
                              tg3_set_multi(tp,0U);
      else {
        #line 9781 
        void *__mptr;
        #line 9775 
        struct netdev_hw_addr *ha;
        #line 9777 
        u32 regidx;
        #line 9778 
        u32 bit;
        #line 9779 
        u32 crc;
        #line 9776 
        u32 mc_filter[4U] = {0U};
        #line 9781 
        __mptr = (void *)dev->mc.list.next;
        #line 9781 
        ha = ((struct netdev_hw_addr *)__mptr);
        #line 9781 
        while (& ha->list != & dev->mc.list) {
          #line 9781 
          void *__mptr_0;
          #line 9782 
          crc = calc_crc((unsigned char *)(& ha->addr),6);
          #line 9783 
          bit = ~ crc & 127U;
          #line 9784 
          regidx = (bit >> 5) & 3U;
          #line 9785 
          bit &= 31U;
          #line 9786 
          mc_filter[regidx] |= (unsigned int)(1 << bit);
          #line 9781 
          __mptr_0 = (void *)ha->list.next;
          #line 9781 
          ha = ((struct netdev_hw_addr *)__mptr_0);
        }
        #line 9789 
        (*(tp->write32))(tp,1136U,mc_filter[0]);
        #line 9790 
        (*(tp->write32))(tp,1140U,mc_filter[1]);
        #line 9791 
        (*(tp->write32))(tp,1144U,mc_filter[2]);
        #line 9792 
        (*(tp->write32))(tp,1148U,mc_filter[3]);
      }
  #line 9795 
  if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_ENABLE_ASF,
                  (unsigned long *)(& tp->tg3_flags)) != 0) 
    #line 9795 
    tmp_7 = 2; else 
                    #line 9795 
                    tmp_7 = 3;
  #line 9795 
  ;
  #line 9795 
  if (dev->uc.count > tmp_7) 
                             #line 9796 
                             rx_mode |= 256U;
  else 
    #line 9797 
    if ((dev->flags & 256U) == 0U) {
      #line 9802 
      void *__mptr_1;
      #line 9800 
      struct netdev_hw_addr *ha_0;
      #line 9799 
      int i = 0;
      #line 9802 
      __mptr_1 = (void *)dev->uc.list.next;
      #line 9802 
      ha_0 = ((struct netdev_hw_addr *)__mptr_1);
      #line 9802 
      while (& ha_0->list != & dev->uc.list) {
        #line 9802 
        void *__mptr_2;
        {
          #line 9803 
          int tmp_5;
          #line 9803 
          if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_ENABLE_ASF,
                  (unsigned long *)(& tp->tg3_flags)) != 0) 
            #line 9803 
            tmp_5 = 2; else 
                            #line 9803 
                            tmp_5 = 1;
          #line 9803 
          ;
          #line 9803 
          ;
          #line 9803 
          ;
          #line 9803 
          __tg3_set_one_mac_addr(tp,(u8 *)(& ha_0->addr),tmp_5 + i);
          #line 9805 
          i ++;
        }
        #line 9802 
        __mptr_2 = (void *)ha_0->list.next;
        #line 9802 
        ha_0 = ((struct netdev_hw_addr *)__mptr_2);
      }
    }
  #line 9809 
  if (tp->rx_mode != rx_mode) {
    #line 9810 
    tp->rx_mode = rx_mode;
    #line 9811 
    _tw32_flush(tp,1128U,rx_mode,0U);
    #line 9812 
    __const_udelay(42950UL);
  }
  #line 9815 
  return;
}

#line 9816  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
static void tg3_rss_init_dflt_indir_tbl(struct tg3 *tp, u32 qcnt)
{
  #line 9818 
  int i;
  #line 9820 
  i = 0;
  #line 9820 
  while (i <= 127) {
    #line 9821 
    tp->rss_ind_tbl[i] = (unsigned char)ethtool_rxfh_indir_default((unsigned int)i,qcnt);
    #line 9820 
    i ++;
  }
  #line 9822 
  return;
}

#line 9824  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
static void tg3_rss_check_indir_tbl(struct tg3 *tp)
{
  #line 9826 
  int i;
  #line 9828 
  if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_SUPPORT_MSIX,
                (unsigned long *)(& tp->tg3_flags)) == 0) 
    #line 9829 
    return;
  #line 9831 
  if (tp->rxq_cnt == 1U) {
    #line 9832 
    memset((void *)(& tp->rss_ind_tbl[0]),0,128UL);
    #line 9833 
    return;
  }
  #line 9837 
  i = 0;
  #line 9837 
  while (i <= 127) {
    #line 9838 
    if ((unsigned int)tp->rss_ind_tbl[i] >= tp->rxq_cnt) 
                                                         #line 9839 
                                                         break;
    #line 9837 
    i ++;
  }
  #line 9842 
  if (i != 128) 
                #line 9843 
                tg3_rss_init_dflt_indir_tbl(tp,tp->rxq_cnt);
  #line 9844 
  return;
}

#line 9846  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
static void tg3_rss_write_indir_tbl(struct tg3 *tp)
{
  #line 9848 
  int i = 0;
  #line 9849 
  u32 reg = 1584U;
  #line 9851 
  while (i <= 127) {
    #line 9852 
    u32 val = (unsigned int)tp->rss_ind_tbl[i];
    #line 9853 
    i ++;
    #line 9854 
    while (((unsigned int)i & 7U) != 0U) {
      #line 9855 
      val <<= 4;
      #line 9856 
      val = (unsigned int)tp->rss_ind_tbl[i] | val;
      #line 9854 
      i ++;
    }
    #line 9858 
    (*(tp->write32))(tp,reg,val);
    #line 9859 
    reg += 4U;
  }
  #line 9861 
  return;
}

#line 9863  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
__inline static u32 tg3_lso_rd_dma_workaround_bit(struct tg3 *tp)
{
  #line 9865 
  if (tp->pci_chip_rev_id >> 12 == 22297U) 
                                           #line 9866 
                                           return 33554432U; else 
                                                                  #line 9868 
                                                                  return 2097152U;
}

#line 9872  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
static int tg3_reset_hw(struct tg3 *tp, bool reset_phy)
{
  #line 9874 
  u32 val;
  #line 9874 
  u32 rdmac_mode;
  #line 9875 
  int i;
  #line 9875 
  int err;
  #line 9875 
  int limit;
  #line 9876 
  struct tg3_rx_prodring_set *tpr = & tp->napi[0].prodring;
  #line 9878 
  tg3_disable_ints(tp);
  #line 9880 
  tg3_stop_fw(tp);
  #line 9882 
  tg3_write_sig_pre_reset(tp,1);
  #line 9884 
  if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_INIT_COMPLETE,
                (unsigned long *)(& tp->tg3_flags)) != 0) 
    #line 9885 
    tg3_abort_hw(tp,(_Bool)1);
  #line 9887 
  if ((tp->phy_flags & 1048576U) != 0U && (tp->phy_flags & 8U) == 0U) {
    #line 9889 
    tg3_phy_pull_config(tp);
    #line 9890 
    tg3_eee_pull_config(tp,(struct ethtool_eee *)0);
    #line 9891 
    tp->phy_flags |= 8U;
  }
  #line 9895 
  if ((tp->phy_flags & 262144U) != 0U) 
                                       #line 9896 
                                       tg3_setup_eee(tp);
  #line 9898 
  if ((int)reset_phy != 0) 
                           #line 9899 
                           tg3_phy_reset(tp);
  #line 9901 
  err = tg3_chip_reset(tp);
  #line 9902 
  if (err != 0) 
                #line 9903 
                return err;
  #line 9905 
  tg3_write_sig_legacy(tp,1);
  #line 9907 
  if (tp->pci_chip_rev_id >> 8 == 358464U) {
    #line 9908 
    val = (*(tp->read32))(tp,13824U);
    #line 9909 
    val &= 4294965759U;
    #line 9910 
    (*(tp->write32))(tp,13824U,val);
    #line 9912 
    val = (*(tp->read32))(tp,13828U);
    #line 9913 
    val &= 4292935679U;
    #line 9914 
    val |= 1245184U;
    #line 9915 
    (*(tp->write32))(tp,13828U,val);
    #line 9917 
    val = (*(tp->read32))(tp,13840U);
    #line 9918 
    val &= 4292935679U;
    #line 9919 
    val |= 1245184U;
    #line 9920 
    (*(tp->write32))(tp,13840U,val);
    #line 9922 
    val = (*(tp->read32))(tp,13852U);
    #line 9923 
    val &= 4292935679U;
    #line 9924 
    val |= 1245184U;
    #line 9925 
    (*(tp->write32))(tp,13852U,val);
  }
  #line 9928 
  if (tp->pci_chip_rev_id >> 12 == 358272U) {
    #line 9929 
    val = (*(tp->read32))(tp,32040U) & 4294902015U;
    #line 9930 
    val |= 16842496U;
    #line 9932 
    (*(tp->write32))(tp,32040U,val);
    #line 9934 
    val = (*(tp->read32))(tp,32368U) & 4294967264U;
    #line 9935 
    (*(tp->write32))(tp,32368U,val | 12U);
    #line 9937 
    (*(tp->write32))(tp,272U,4294967295U);
    #line 9939 
    val = (*(tp->read32))(tp,32084U) & 4294967287U;
    #line 9940 
    (*(tp->write32))(tp,32084U,val | 128U);
  }
  #line 9943 
  if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_L1PLLPD_EN,
                  (unsigned long *)(& tp->tg3_flags)) != 0) {
    #line 9944 
    u32 grc_mode = (*(tp->read32))(tp,26624U);
    #line 9947 
    val = grc_mode & 1606418431U;
    #line 9948 
    (*(tp->write32))(tp,26624U,val | 4194304U);
    #line 9950 
    val = (*(tp->read32))(tp,31748U);
    #line 9951 
    (*(tp->write32))(tp,31748U,val | 4096U);
    #line 9954 
    (*(tp->write32))(tp,26624U,grc_mode);
  }
  #line 9957 
  if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_57765_CLASS,
                  (unsigned long *)(& tp->tg3_flags)) != 0) {
    #line 9958 
    if (tp->pci_chip_rev_id == 1467502592U) {
      #line 9959 
      u32 grc_mode_0 = (*(tp->read32))(tp,26624U);
      #line 9962 
      val = grc_mode_0 & 1606418431U;
      #line 9963 
      (*(tp->write32))(tp,26624U,val | 4194304U);
      #line 9965 
      val = (*(tp->read32))(tp,31764U);
      #line 9967 
      (*(tp->write32))(tp,31764U,val | 2147483648U);
      #line 9970 
      (*(tp->write32))(tp,26624U,grc_mode_0);
    }
    #line 9973 
    if (tp->pci_chip_rev_id >> 8 != 5731920U) {
      #line 9974 
      u32 grc_mode_1;
      #line 9977 
      val = (*(tp->read32))(tp,13928U);
      #line 9978 
      val |= 262144U;
      #line 9979 
      (*(tp->write32))(tp,13928U,val);
      #line 9981 
      grc_mode_1 = (*(tp->read32))(tp,26624U);
      #line 9984 
      val = grc_mode_1 & 1606418431U;
      #line 9985 
      (*(tp->write32))(tp,26624U,val | 536870912U);
      #line 9987 
      val = (*(tp->read32))(tp,31756U);
      #line 9989 
      val &= 4294967040U;
      #line 9990 
      (*(tp->write32))(tp,31756U,val | 44U);
      #line 9993 
      (*(tp->write32))(tp,26624U,grc_mode_1);
    }
    #line 9996 
    val = (*(tp->read32))(tp,13828U);
    #line 9997 
    val &= 4292935679U;
    #line 9998 
    val |= 1245184U;
    #line 9999 
    (*(tp->write32))(tp,13828U,val);
  }
  #line 10007 
  if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_CPMU_PRESENT,
                  (unsigned long *)(& tp->tg3_flags)) == 0) {
    #line 10008 
    if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_PCI_EXPRESS,
                  (unsigned long *)(& tp->tg3_flags)) == 0) 
      #line 10009 
      tp->pci_clock_ctrl |= 2147483648U;
    #line 10010 
    _tw32_flush(tp,116U,tp->pci_clock_ctrl,0U);
  }
  #line 10013 
  if (tp->pci_chip_rev_id == 8192U) {
    #line 10013 
    if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_PCIX_MODE,
                  (unsigned long *)(& tp->tg3_flags)) != 0) {
      #line 10015 
      val = (*(tp->read32))(tp,112U);
      #line 10016 
      val |= 8192U;
      #line 10017 
      (*(tp->write32))(tp,112U,val);
    }
  }
  #line 10020 
  if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_ENABLE_APE,
                   (unsigned long *)(& tp->tg3_flags)) != 0) {
    #line 10024 
    val = (*(tp->read32))(tp,112U);
    #line 10025 
    val |= 458752U;
    #line 10028 
    (*(tp->write32))(tp,112U,val);
  }
  #line 10031 
  if (tp->pci_chip_rev_id >> 8 == 33U) {
    #line 10033 
    val = (*(tp->read32))(tp,100U);
    #line 10034 
    val |= 872415232U;
    #line 10035 
    (*(tp->write32))(tp,100U,val);
  }
  #line 10043 
  err = tg3_init_rings(tp);
  #line 10044 
  if (err != 0) 
                #line 10045 
                return err;
  #line 10047 
  if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_57765_PLUS,
                   (unsigned long *)(& tp->tg3_flags)) != 0) {
    #line 10048 
    val = (*(tp->read32))(tp,108U) & 4294967294U;
    #line 10050 
    if (tp->pci_chip_rev_id == 1467502592U) 
                                            #line 10051 
                                            val &= 4294966399U;
    #line 10052 
    if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_57765_CLASS,
                   (unsigned long *)(& tp->tg3_flags)) == 0) 
      #line 10052 
      if (tp->pci_chip_rev_id >> 12 != 22295U) 
        #line 10053 
        if (tp->pci_chip_rev_id >> 12 != 22370U) 
                                                 #line 10055 
                                                 val |= 128U;
    #line 10056 
    (*(tp->write32))(tp,108U,tp->dma_rwctrl | val);
  }
  else 
    #line 10057 
    if (tp->pci_chip_rev_id >> 12 != 22404U && tp->pci_chip_rev_id >> 12 != 22369U) 
      #line 10062 
      (*(tp->write32))(tp,108U,tp->dma_rwctrl);
  #line 10065 
  tp->grc_mode &= 3748528127U;
  #line 10069 
  tp->grc_mode |= 131072U;
  #line 10077 
  tp->grc_mode |= 1048576U;
  #line 10079 
  val = 67174400U;
  #line 10080 
  if (tp->rxptpctl != 0U) 
                          #line 10081 
                          (*(tp->write32))(tp,1736U,tp->rxptpctl | 67108864U);
  #line 10084 
  if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_PTP_CAPABLE,
                   (unsigned long *)(& tp->tg3_flags)) != 0) 
    #line 10085 
    val |= 524288U;
  #line 10087 
  (*(tp->write32))(tp,26624U,tp->grc_mode | val);
  #line 10093 
  if ((unsigned int)(tp->pdev)->subsystem_vendor == 4136U && (unsigned int)(tp->pdev)->subsystem_device == 2032U) {
    #line 10095 
    val = (*(tp->read32))(tp,180U) & 4294938623U;
    #line 10096 
    (*(tp->write32))(tp,180U,val | 16384U);
  }
  #line 10100 
  val = (*(tp->read32))(tp,26628U);
  #line 10101 
  val &= 4294967040U;
  #line 10102 
  val |= 130U;
  #line 10103 
  (*(tp->write32))(tp,26628U,val);
  #line 10106 
  if (! (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_5750_PLUS,
                   (unsigned long *)(& tp->tg3_flags)) != 0)) 
    #line 10108 
    if (tp->pci_chip_rev_id >> 12 != 3U) {
      #line 10109 
      (*(tp->write32))(tp,17416U,32768U);
      #line 10110 
      if (tp->pci_chip_rev_id >> 12 == 2U) 
                                           #line 10111 
                                           (*(tp->write32))(tp,17420U,65536U); else 
                                                                    #line 10113 
                                                                    (*(tp->write32))(tp,17420U,98304U);
      #line 10114 
      (*(tp->write32))(tp,17452U,8192U);
      #line 10115 
      (*(tp->write32))(tp,17456U,8192U);
    }
    else {
      #line 10116 
      if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_TSO_CAPABLE,
                   (unsigned long *)(& tp->tg3_flags)) != 0) {
        #line 10117 
        int fw_len;
        #line 10119 
        fw_len = (int)tp->fw_len;
        #line 10120 
        fw_len = (fw_len + 127) & -128;
        #line 10121 
        (*(tp->write32))(tp,17416U,(unsigned int)(fw_len + 65536));
        #line 10123 
        (*(tp->write32))(tp,17420U,(unsigned int)(54784 - fw_len));
      }
    }
  #line 10127 
  if ((tp->dev)->mtu <= 1500U) {
    #line 10128 
    (*(tp->write32))(tp,17424U,tp->bufmgr_config.mbuf_read_dma_low_water);
    #line 10130 
    (*(tp->write32))(tp,17428U,tp->bufmgr_config.mbuf_mac_rx_low_water);
    #line 10132 
    (*(tp->write32))(tp,17432U,tp->bufmgr_config.mbuf_high_water);
  }
  else {
    #line 10135 
    (*(tp->write32))(tp,17424U,tp->bufmgr_config.mbuf_read_dma_low_water_jumbo);
    #line 10137 
    (*(tp->write32))(tp,17428U,tp->bufmgr_config.mbuf_mac_rx_low_water_jumbo);
    #line 10139 
    (*(tp->write32))(tp,17432U,tp->bufmgr_config.mbuf_high_water_jumbo);
  }
  #line 10142 
  (*(tp->write32))(tp,17460U,tp->bufmgr_config.dma_low_water);
  #line 10144 
  (*(tp->write32))(tp,17464U,tp->bufmgr_config.dma_high_water);
  #line 10147 
  val = 6U;
  #line 10148 
  if (tp->pci_chip_rev_id >> 12 == 22297U) 
                                           #line 10149 
                                           val |= 2147483648U;
  #line 10150 
  if (((tp->pci_chip_rev_id >> 12 == 22295U || tp->pci_chip_rev_id >> 12 == 22370U) || tp->pci_chip_rev_id == 91328512U) || tp->pci_chip_rev_id == 91357184U) 
    #line 10154 
    val |= 16U;
  #line 10155 
  (*(tp->write32))(tp,17408U,val);
  #line 10156 
  i = 0;
  #line 10156 
  while (i <= 1999) {
    {
      #line 10157 
      if (((*(tp->read32))(tp,17408U) & 2U) != 0U) 
                                                   #line 10158 
                                                   break;
      #line 10159 
      __const_udelay(42950UL);
    }
    #line 10156 
    i ++;
  }
  #line 10161 
  if (i > 1999) {
    #line 10162 
    netdev_err(tp->dev,(char *)"%s cannot enable BUFMGR\n",(char *)"tg3_reset_hw");
    #line 10163 
    return -19;
  }
  #line 10166 
  if (tp->pci_chip_rev_id == 49153U) {
    #line 10167 
    ;
    #line 10167 
    (*(tp->write32))(tp,3104U,((*(tp->read32))(tp,3104U) & 4294967292U) | 2U);
  }
  #line 10169 
  tg3_setup_rxbd_thresholds(tp);
  #line 10188 
  (*(tp->write32))(tp,9296U,(unsigned int)(tpr->rx_std_mapping >> 32));
  #line 10190 
  (*(tp->write32))(tp,9300U,(unsigned int)tpr->rx_std_mapping);
  #line 10192 
  if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_5717_PLUS,
                   (unsigned long *)(& tp->tg3_flags)) == 0) 
    #line 10193 
    (*(tp->write32))(tp,9308U,24576U);
  #line 10197 
  if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_5705_PLUS,
                   (unsigned long *)(& tp->tg3_flags)) == 0) 
    #line 10198 
    (*(tp->write32))(tp,9320U,2U);
  #line 10204 
  if (tp->pci_chip_rev_id == 91328512U) 
                                        #line 10204 
                                        goto _LOR;
  else {
    #line 10204 
    if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_JUMBO_CAPABLE,
                   (unsigned long *)(& tp->tg3_flags)) != 0) {
      #line 10205 
      if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_5780_CLASS,
                   (unsigned long *)(& tp->tg3_flags)) == 0) {
        #line 10204 
        _LOR: {
                #line 10207 
                if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_JUMBO_RING_ENABLE,
                   (unsigned long *)(& tp->tg3_flags)) != 0) {
                  #line 10208 
                  (*(tp->write32))(tp,9280U,(unsigned int)(tpr->rx_jmb_mapping >> 32));
                  #line 10210 
                  (*(tp->write32))(tp,9284U,(unsigned int)tpr->rx_jmb_mapping);
                  #line 10212 
                  if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_LRG_PROD_RING_CAP,
                   (unsigned long *)(& tp->tg3_flags)) != 0) 
                    #line 10212 
                    val = 67108864U; else 
                                          #line 10212 
                                          val = 16777216U;
                  #line 10214 
                  (*(tp->write32))(tp,9288U,val | 1U);
                  #line 10216 
                  if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_USE_JUMBO_BDFLAG,
                   (unsigned long *)(& tp->tg3_flags)) == 0) 
                    #line 10219 
                    (*(tp->write32))(tp,9292U,28672U);
                  else {
                    #line 10216 
                    if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_57765_CLASS,
                   (unsigned long *)(& tp->tg3_flags)) != 0) 
                      #line 10219 
                      (*(tp->write32))(tp,9292U,28672U);
                    else 
                      #line 10217 
                      if (tp->pci_chip_rev_id >> 12 == 22370U) 
                                                               #line 10219 
                                                               (*(tp->write32))(tp,9292U,28672U);
                  }
                }
                else 
                     #line 10222 
                     (*(tp->write32))(tp,9288U,2U);
                #line 10226 
                if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_57765_PLUS,
                   (unsigned long *)(& tp->tg3_flags)) != 0) {
                  #line 10227 
                  if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_LRG_PROD_RING_CAP,
                   (unsigned long *)(& tp->tg3_flags)) != 0) 
                    #line 10227 
                    val = 2048U; else 
                                      #line 10227 
                                      val = 512U;
                  #line 10228 
                  val <<= 16;
                  #line 10229 
                  val |= 6144U;
                }
                else 
                     #line 10231 
                     val = 100663296U;
              }
      }
      else 
           #line 10233 
           val = 33554432U;
    }
    else 
         #line 10233 
         val = 33554432U;
  }
  #line 10235 
  (*(tp->write32))(tp,9304U,val);
  #line 10237 
  tpr->rx_std_prod_idx = tp->rx_pending;
  #line 10238 
  (*(tp->write32_rx_mbox))(tp,620U,tpr->rx_std_prod_idx);
  #line 10240 
  if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_JUMBO_RING_ENABLE,
                   (unsigned long *)(& tp->tg3_flags)) != 0) 
    #line 10240 
    tpr->rx_jmb_prod_idx = tp->rx_jumbo_pending; else 
                                                      #line 10240 
                                                      tpr->rx_jmb_prod_idx = 0U;
  #line 10242 
  (*(tp->write32_rx_mbox))(tp,628U,tpr->rx_jmb_prod_idx);
  #line 10244 
  tg3_rings_reset(tp);
  #line 10247 
  __tg3_set_mac_addr(tp,(_Bool)0);
  #line 10250 
  (*(tp->write32))(tp,1084U,(tp->dev)->mtu + 22U);
  #line 10256 
  val = 9760U;
  #line 10260 
  if (tp->pci_chip_rev_id >> 12 == 22304U || tp->pci_chip_rev_id >> 12 == 22370U) {
    #line 10264 
    val = ((*(tp->read32))(tp,1124U) & 4294901760U) | val;
  }
  #line 10266 
  (*(tp->write32))(tp,1124U,val);
  #line 10269 
  (*(tp->write32))(tp,1280U,8U);
  #line 10270 
  (*(tp->write32))(tp,8208U,385U);
  #line 10275 
  rdmac_mode = 1022U;
  #line 10281 
  if (tp->pci_chip_rev_id >> 12 == 22295U) 
                                           #line 10282 
                                           rdmac_mode |= 16777216U;
  #line 10284 
  if ((tp->pci_chip_rev_id >> 12) + 4294944892U <= 1U || tp->pci_chip_rev_id >> 12 == 358272U) 
    #line 10287 
    rdmac_mode |= 14336U;
  #line 10291 
  if (tp->pci_chip_rev_id >> 12 == 3U && tp->pci_chip_rev_id != 12288U) {
    #line 10293 
    if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_TSO_CAPABLE,
                   (unsigned long *)(& tp->tg3_flags)) != 0) {
      #line 10293 
      if (tp->pci_chip_rev_id >> 12 == 3U) 
                                           #line 10295 
                                           rdmac_mode |= 131072U; else 
                                                                    #line 10293 
                                                                    goto _LAND;
    }
    else {
      #line 10293 
      _LAND: 
      #line 10296 
      if (((*(tp->read32))(tp,112U) & 8U) == 0U) {
        #line 10296 
        if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_IS_5788,
                   (unsigned long *)(& tp->tg3_flags)) == 0) 
          #line 10298 
          rdmac_mode |= 196608U;
      }
    }
  }
  #line 10302 
  if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_PCI_EXPRESS,
                   (unsigned long *)(& tp->tg3_flags)) != 0) 
    #line 10303 
    rdmac_mode |= 196608U;
  #line 10305 
  if (tp->pci_chip_rev_id >> 12 == 358246U) {
    #line 10306 
    tp->dma_limit = 0U;
    #line 10307 
    if ((tp->dev)->mtu <= 1500U) {
      #line 10308 
      rdmac_mode |= 8388608U;
      #line 10309 
      tp->dma_limit = 2048U;
    }
  }
  #line 10313 
  if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_HW_TSO_1,
                   (unsigned long *)(& tp->tg3_flags)) != 0) 
    #line 10316 
    rdmac_mode |= 134217728U;
  else {
    #line 10313 
    if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_HW_TSO_2,
                   (unsigned long *)(& tp->tg3_flags)) != 0) 
      #line 10316 
      rdmac_mode |= 134217728U;
    else {
      #line 10314 
      if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_HW_TSO_3,
                   (unsigned long *)(& tp->tg3_flags)) != 0) 
        #line 10316 
        rdmac_mode |= 134217728U;
    }
  }
  #line 10318 
  if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_57765_PLUS,
                   (unsigned long *)(& tp->tg3_flags)) != 0) 
    #line 10321 
    rdmac_mode |= 268435456U;
  else 
    #line 10318 
    if (tp->pci_chip_rev_id >> 12 == 22405U) 
                                             #line 10321 
                                             rdmac_mode |= 268435456U;
    else 
      #line 10319 
      if (tp->pci_chip_rev_id >> 12 == 358272U) 
                                                #line 10321 
                                                rdmac_mode |= 268435456U;
  #line 10323 
  if (tp->pci_chip_rev_id >> 12 == 22304U || tp->pci_chip_rev_id >> 12 == 22370U) {
    #line 10325 
    rdmac_mode = ((*(tp->read32))(tp,18432U) & 536870912U) | rdmac_mode;
  }
  #line 10327 
  if (((tp->pci_chip_rev_id >> 12 == 22369U || tp->pci_chip_rev_id >> 12 == 22404U) || tp->pci_chip_rev_id >> 12 == 22405U) || tp->pci_chip_rev_id >> 12 == 358272U) 
    #line 10327 
    goto _LOR_0;
  else {
    #line 10330 
    if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_57765_PLUS,
                   (unsigned long *)(& tp->tg3_flags)) != 0) {
      #line 10327 
      _LOR_0: {
                #line 10332 
                u32 tgtreg;
                #line 10334 
                if (tp->pci_chip_rev_id >> 12 == 22370U) 
                                                         #line 10335 
                                                         tgtreg = 18576U; else 
                                                                    #line 10337 
                                                                    tgtreg = 18688U;
                #line 10339 
                val = (*(tp->read32))(tp,tgtreg);
                #line 10340 
                if (tp->pci_chip_rev_id == 91328512U || tp->pci_chip_rev_id >> 12 == 22370U) {
                  #line 10342 
                  val &= 1048591U;
                  #line 10345 
                  val |= 671878144U;
                }
                #line 10349 
                (*(tp->write32))(tp,tgtreg,val | 4U);
              }
    }
  }
  #line 10352 
  if ((tp->pci_chip_rev_id >> 12 == 22297U || tp->pci_chip_rev_id >> 12 == 22304U) || tp->pci_chip_rev_id >> 12 == 22370U) {
    #line 10355 
    u32 tgtreg_0;
    #line 10357 
    if (tp->pci_chip_rev_id >> 12 == 22370U) 
                                             #line 10358 
                                             tgtreg_0 = 18592U; else 
                                                                  #line 10360 
                                                                  tgtreg_0 = 18704U;
    #line 10362 
    val = (*(tp->read32))(tp,tgtreg_0);
    #line 10363 
    (*(tp->write32))(tp,tgtreg_0,val | 983040U);
  }
  #line 10369 
  if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_5750_PLUS,
                   (unsigned long *)(& tp->tg3_flags)) != 0) {
    #line 10370 
    val = (*(tp->read32))(tp,8216U);
    #line 10371 
    val &= 4294705151U;
    #line 10372 
    (*(tp->write32))(tp,8216U,val);
  }
  else 
    #line 10373 
    if ((rdmac_mode & 131072U) != 0U) {
      #line 10373 
      if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_TSO_CAPABLE,
                   (unsigned long *)(& tp->tg3_flags)) != 0) {
        #line 10375 
        val = (*(tp->read32))(tp,8216U);
        #line 10376 
        val &= 4290772991U;
        #line 10377 
        (*(tp->write32))(tp,8216U,val);
      }
      else 
           #line 10379 
           (*(tp->write32))(tp,8216U,16777215U);
    }
    else 
         #line 10379 
         (*(tp->write32))(tp,8216U,16777215U);
  #line 10381 
  (*(tp->write32))(tp,8212U,1U);
  #line 10382 
  (*(tp->write32))(tp,3084U,16777215U);
  #line 10383 
  (*(tp->write32))(tp,3080U,3U);
  #line 10388 
  (*(tp->write32))(tp,15360U,0U);
  #line 10389 
  i = 0;
  #line 10389 
  while (i <= 1999) {
    {
      #line 10390 
      if (((*(tp->read32))(tp,15360U) & 2U) == 0U) 
                                                   #line 10391 
                                                   break;
      #line 10392 
      __const_udelay(42950UL);
    }
    #line 10389 
    i ++;
  }
  #line 10395 
  __tg3_set_coalesce(tp,& tp->coal);
  #line 10397 
  if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_5705_PLUS,
                   (unsigned long *)(& tp->tg3_flags)) == 0) {
    #line 10402 
    (*(tp->write32))(tp,15408U,(unsigned int)(tp->stats_mapping >> 32));
    #line 10404 
    (*(tp->write32))(tp,15412U,(unsigned int)tp->stats_mapping);
    #line 10406 
    (*(tp->write32))(tp,15424U,768U);
    #line 10408 
    (*(tp->write32))(tp,15428U,2816U);
    #line 10411 
    i = 768;
    #line 10411 
    while (i <= 2895) {
      #line 10414 
      tg3_write_mem(tp,(unsigned int)i,0U);
      #line 10415 
      __const_udelay(171800UL);
      #line 10412 
      i = (int)((unsigned int)i + 4U);
    }
  }
  #line 10419 
  (*(tp->write32))(tp,15360U,tp->coalesce_mode | 2U);
  #line 10421 
  (*(tp->write32))(tp,12288U,6U);
  #line 10422 
  (*(tp->write32))(tp,8192U,2U);
  #line 10423 
  if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_5705_PLUS,
                   (unsigned long *)(& tp->tg3_flags)) == 0) 
    #line 10424 
    (*(tp->write32))(tp,13312U,6U);
  #line 10426 
  if ((tp->phy_flags & 32U) != 0U) {
    #line 10427 
    tp->phy_flags &= 4294836223U;
    #line 10429 
    _tw32_flush(tp,1128U,1U,0U);
    #line 10430 
    __const_udelay(42950UL);
  }
  #line 10433 
  tp->mac_mode |= 14698496U;
  #line 10436 
  if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_ENABLE_APE,
                   (unsigned long *)(& tp->tg3_flags)) != 0) 
    #line 10437 
    tp->mac_mode |= 402653184U;
  #line 10438 
  if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_5705_PLUS,
                   (unsigned long *)(& tp->tg3_flags)) == 0) 
    #line 10438 
    if ((tp->phy_flags & 16U) == 0U) 
      #line 10439 
      if (tp->pci_chip_rev_id >> 12 != 7U) 
                                           #line 10441 
                                           tp->mac_mode |= 1024U;
  #line 10442 
  _tw32_flush(tp,1024U,tp->mac_mode | 36864U,0U);
  #line 10443 
  __const_udelay(171800UL);
  #line 10451 
  if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_IS_NIC,
                   (unsigned long *)(& tp->tg3_flags)) == 0) {
    #line 10452 
    u32 gpio_mask;
    #line 10454 
    gpio_mask = 129024U;
    #line 10458 
    if (tp->pci_chip_rev_id >> 12 == 6U) 
                                         #line 10459 
                                         gpio_mask |= 192U;
    #line 10462 
    if (tp->pci_chip_rev_id >> 12 == 10U) 
                                          #line 10463 
                                          gpio_mask |= 16U;
    #line 10465 
    tp->grc_local_ctrl &= ~ gpio_mask;
    #line 10466 
    tp->grc_local_ctrl |= (*(tp->read32))(tp,26632U) & gpio_mask;
    #line 10469 
    if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_EEPROM_WRITE_PROT,
                   (unsigned long *)(& tp->tg3_flags)) != 0) 
      #line 10470 
      tp->grc_local_ctrl |= 36864U;
  }
  #line 10473 
  _tw32_flush(tp,26632U,tp->grc_local_ctrl,0U);
  #line 10474 
  __const_udelay(429500UL);
  #line 10476 
  if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_USING_MSIX,
                   (unsigned long *)(& tp->tg3_flags)) != 0) {
    #line 10477 
    val = (*(tp->read32))(tp,24576U);
    #line 10478 
    val |= 2U;
    #line 10479 
    if (tp->irq_cnt > 1U) 
                          #line 10480 
                          val |= 128U;
    #line 10481 
    if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_1SHOT_MSI,
                   (unsigned long *)(& tp->tg3_flags)) == 0) 
      #line 10482 
      val |= 32U;
    #line 10483 
    (*(tp->write32))(tp,24576U,val);
  }
  #line 10486 
  if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_5705_PLUS,
                   (unsigned long *)(& tp->tg3_flags)) == 0) {
    #line 10487 
    _tw32_flush(tp,25600U,2U,0U);
    #line 10488 
    __const_udelay(171800UL);
  }
  #line 10491 
  val = 1022U;
  #line 10497 
  if (tp->pci_chip_rev_id >> 12 == 3U && tp->pci_chip_rev_id != 12288U) {
    #line 10499 
    if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_TSO_CAPABLE,
                   (unsigned long *)(& tp->tg3_flags)) != 0) {
      #line 10499 
      if (! (tp->pci_chip_rev_id + 4294955007U <= 1U)) 
                                                       #line 10499 
                                                       goto _LAND_0;
    }
    else {
      #line 10499 
      _LAND_0: 
      #line 10503 
      if (((*(tp->read32))(tp,112U) & 8U) == 0U) {
        #line 10503 
        if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_IS_5788,
                   (unsigned long *)(& tp->tg3_flags)) == 0) 
          #line 10505 
          val |= 1024U;
      }
    }
  }
  #line 10510 
  if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_5755_PLUS,
                   (unsigned long *)(& tp->tg3_flags)) != 0) 
    #line 10511 
    val |= 536870912U;
  #line 10513 
  if (tp->pci_chip_rev_id >> 12 == 22405U) 
                                           #line 10514 
                                           val |= 3221225472U;
  #line 10516 
  _tw32_flush(tp,19456U,val,0U);
  #line 10517 
  __const_udelay(171800UL);
  #line 10519 
  if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_PCIX_MODE,
                   (unsigned long *)(& tp->tg3_flags)) != 0) {
    #line 10520 
    u16 pcix_cmd;
    #line 10522 
    pci_read_config_word(tp->pdev,tp->pcix_cap + 2,& pcix_cmd);
    #line 10524 
    if (tp->pci_chip_rev_id >> 12 == 1U) {
      #line 10525 
      pcix_cmd = (unsigned short)((unsigned int)pcix_cmd & 65523U);
      #line 10526 
      pcix_cmd = (unsigned short)((unsigned int)pcix_cmd | 8U);
    }
    else 
      #line 10527 
      if (tp->pci_chip_rev_id >> 12 == 2U) {
        #line 10528 
        pcix_cmd = (unsigned short)((unsigned int)pcix_cmd & 65411U);
        #line 10529 
        pcix_cmd = (unsigned short)((unsigned int)pcix_cmd | 8U);
      }
    #line 10531 
    pci_write_config_word(tp->pdev,tp->pcix_cap + 2,(unsigned short)((int)pcix_cmd));
  }
  #line 10535 
  _tw32_flush(tp,18432U,rdmac_mode,0U);
  #line 10536 
  __const_udelay(171800UL);
  #line 10538 
  if (tp->pci_chip_rev_id >> 12 == 22297U || tp->pci_chip_rev_id >> 12 == 22304U) {
    #line 10540 
    i = 0;
    #line 10540 
    while (i <= 3) {
      #line 10541 
      u32 tmp_60;
      #line 10541 
      unsigned int tmp_62;
      #line 10541 
      tmp_60 = (*(tp->read32))(tp,(unsigned int)((i << 2) + 19424));
      #line 10541 
      if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_JUMBO_CAPABLE,
                   (unsigned long *)(& tp->tg3_flags)) != 0) 
        #line 10541 
        tmp_62 = 9000U; else 
                             #line 10541 
                             tmp_62 = 1500U;
      #line 10541 
      if (tmp_60 > tmp_62) 
                           #line 10542 
                           break;
      #line 10540 
      i ++;
    }
    #line 10544 
    if (i <= 3) {
      #line 10545 
      val = (*(tp->read32))(tp,18704U);
      #line 10546 
      val = tg3_lso_rd_dma_workaround_bit(tp) | val;
      #line 10547 
      (*(tp->write32))(tp,18704U,val);
      #line 10548 
      _tg3_flag_set((enum TG3_FLAGS)TG3_FLAG_5719_5720_RDMA_BUG,(unsigned long *)(& tp->tg3_flags));
    }
  }
  #line 10552 
  (*(tp->write32))(tp,10240U,6U);
  #line 10553 
  if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_5705_PLUS,
                   (unsigned long *)(& tp->tg3_flags)) == 0) 
    #line 10554 
    (*(tp->write32))(tp,14336U,2U);
  #line 10556 
  if (tp->pci_chip_rev_id >> 12 == 22369U) 
                                           #line 10557 
                                           (*(tp->write32))(tp,4096U,18U); else 
                                                                    #line 10560 
                                                                    (*(tp->write32))(tp,4096U,2U);
  #line 10562 
  (*(tp->write32))(tp,7168U,6U);
  #line 10563 
  (*(tp->write32))(tp,11264U,6U);
  #line 10564 
  val = 18U;
  #line 10565 
  if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_LRG_PROD_RING_CAP,
                   (unsigned long *)(& tp->tg3_flags)) != 0) 
    #line 10566 
    val |= 65536U;
  #line 10567 
  (*(tp->write32))(tp,9216U,val);
  #line 10568 
  (*(tp->write32))(tp,3072U,2U);
  #line 10569 
  if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_HW_TSO_1,
                   (unsigned long *)(& tp->tg3_flags)) != 0) 
    #line 10572 
    (*(tp->write32))(tp,3072U,10U);
  else {
    #line 10569 
    if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_HW_TSO_2,
                   (unsigned long *)(& tp->tg3_flags)) != 0) 
      #line 10572 
      (*(tp->write32))(tp,3072U,10U);
    else {
      #line 10570 
      if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_HW_TSO_3,
                   (unsigned long *)(& tp->tg3_flags)) != 0) 
        #line 10572 
        (*(tp->write32))(tp,3072U,10U);
    }
  }
  #line 10573 
  val = 6U;
  #line 10574 
  if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_ENABLE_TSS,
                   (unsigned long *)(& tp->tg3_flags)) != 0) 
    #line 10575 
    val |= 32U;
  #line 10576 
  (*(tp->write32))(tp,6144U,val);
  #line 10577 
  (*(tp->write32))(tp,5120U,6U);
  #line 10579 
  if (tp->pci_chip_rev_id == 0U) {
    #line 10580 
    err = tg3_load_5701_a0_firmware_fix(tp);
    #line 10581 
    if (err != 0) 
                  #line 10582 
                  return err;
  }
  #line 10585 
  if (tp->pci_chip_rev_id >> 12 == 358246U) 
                                            #line 10589 
                                            tg3_load_57766_firmware(tp);
  #line 10592 
  if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_TSO_CAPABLE,
                   (unsigned long *)(& tp->tg3_flags)) != 0) {
    #line 10593 
    err = tg3_load_tso_firmware(tp);
    #line 10594 
    if (err != 0) 
                  #line 10595 
                  return err;
  }
  #line 10598 
  tp->tx_mode = 2U;
  #line 10600 
  if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_5755_PLUS,
                   (unsigned long *)(& tp->tg3_flags)) != 0) 
    #line 10602 
    tp->tx_mode |= 256U;
  else 
    #line 10600 
    if (tp->pci_chip_rev_id >> 12 == 12U) 
                                          #line 10602 
                                          tp->tx_mode |= 256U;
  #line 10604 
  if (tp->pci_chip_rev_id >> 12 == 22304U || tp->pci_chip_rev_id >> 12 == 22370U) {
    #line 10606 
    val = 12582912U;
    #line 10607 
    tp->tx_mode &= ~ val;
    #line 10608 
    tp->tx_mode |= (*(tp->read32))(tp,1116U) & val;
  }
  #line 10611 
  _tw32_flush(tp,1116U,tp->tx_mode,0U);
  #line 10612 
  __const_udelay(429500UL);
  #line 10614 
  if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_ENABLE_RSS,
                   (unsigned long *)(& tp->tg3_flags)) != 0) {
    #line 10615 
    u32 rss_key[10U];
    #line 10617 
    tg3_rss_write_indir_tbl(tp);
    #line 10619 
    netdev_rss_key_fill((void *)(& rss_key),40UL);
    #line 10621 
    i = 0;
    #line 10621 
    while (i <= 9) {
      #line 10622 
      (*(tp->write32))(tp,(unsigned int)((i + 412) * 4),rss_key[i]);
      #line 10621 
      i ++;
    }
  }
  #line 10625 
  tp->rx_mode = 2U;
  #line 10626 
  if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_5755_PLUS,
                   (unsigned long *)(& tp->tg3_flags)) != 0) 
    #line 10627 
    tp->rx_mode |= 16777216U;
  #line 10629 
  if (tp->pci_chip_rev_id >> 12 == 22370U) 
                                           #line 10630 
                                           tp->rx_mode |= 33554432U;
  #line 10632 
  if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_ENABLE_RSS,
                   (unsigned long *)(& tp->tg3_flags)) != 0) 
    #line 10633 
    tp->rx_mode |= 16711680U;
  #line 10640 
  _tw32_flush(tp,1128U,tp->rx_mode,0U);
  #line 10641 
  __const_udelay(42950UL);
  #line 10643 
  (*(tp->write32))(tp,1036U,tp->led_ctrl);
  #line 10645 
  (*(tp->write32))(tp,1104U,1U);
  #line 10646 
  if ((tp->phy_flags & 16U) != 0U) {
    #line 10647 
    _tw32_flush(tp,1128U,1U,0U);
    #line 10648 
    __const_udelay(42950UL);
  }
  #line 10650 
  _tw32_flush(tp,1128U,tp->rx_mode,0U);
  #line 10651 
  __const_udelay(42950UL);
  #line 10653 
  if ((tp->phy_flags & 16U) != 0U) {
    #line 10654 
    if (tp->pci_chip_rev_id >> 12 == 2U && (tp->phy_flags & 65536U) == 0U) {
      #line 10658 
      val = (*(tp->read32))(tp,1424U);
      #line 10659 
      val &= 4294963200U;
      #line 10660 
      val |= 2176U;
      #line 10661 
      (*(tp->write32))(tp,1424U,val);
    }
    #line 10663 
    if (tp->pci_chip_rev_id == 4097U) 
                                      #line 10664 
                                      (*(tp->write32))(tp,1424U,6381568U);
  }
  #line 10670 
  if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_57765_CLASS,
                   (unsigned long *)(& tp->tg3_flags)) != 0) 
    #line 10671 
    val = 1U; else 
                   #line 10673 
                   val = 2U;
  #line 10674 
  _tw32_flush(tp,1284U,val,0U);
  #line 10676 
  if (tp->pci_chip_rev_id >> 12 == 2U && (tp->phy_flags & 16U) != 0U) 
    #line 10679 
    _tg3_flag_set((enum TG3_FLAGS)TG3_FLAG_HW_AUTONEG,(unsigned long *)(& tp->tg3_flags));
  #line 10682 
  if ((tp->phy_flags & 32U) != 0U && tp->pci_chip_rev_id >> 12 == 9U) {
    #line 10684 
    u32 tmp_77;
    #line 10686 
    tmp_77 = (*(tp->read32))(tp,1456U);
    #line 10687 
    (*(tp->write32))(tp,1456U,tmp_77 | 1024U);
    #line 10688 
    tp->grc_local_ctrl &= 4294967263U;
    #line 10689 
    tp->grc_local_ctrl |= 16U;
    #line 10690 
    (*(tp->write32))(tp,26632U,tp->grc_local_ctrl);
  }
  #line 10693 
  if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_USE_PHYLIB,
                   (unsigned long *)(& tp->tg3_flags)) == 0) {
    #line 10694 
    if ((tp->phy_flags & 1U) != 0U) 
                                    #line 10695 
                                    tp->phy_flags &= 4294967294U;
    #line 10697 
    err = tg3_setup_phy(tp,(_Bool)0);
    #line 10698 
    if (err != 0) 
                  #line 10699 
                  return err;
    #line 10701 
    if ((tp->phy_flags & 16U) == 0U && (tp->phy_flags & 64U) == 0U) {
      #line 10703 
      u32 tmp_78;
      #line 10706 
      if (tg3_readphy(tp,30,& tmp_78) == 0) {
        #line 10707 
        tg3_writephy(tp,30,tmp_78 | 32768U);
        #line 10709 
        tg3_readphy(tp,20,& tmp_78);
      }
    }
  }
  #line 10714 
  __tg3_set_rx_mode(tp->dev);
  #line 10717 
  (*(tp->write32))(tp,1152U,1107296256U);
  #line 10718 
  (*(tp->write32))(tp,1156U,2147483647U);
  #line 10719 
  (*(tp->write32))(tp,1160U,100663300U);
  #line 10720 
  (*(tp->write32))(tp,1164U,2147483647U);
  #line 10722 
  if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_5705_PLUS,
                   (unsigned long *)(& tp->tg3_flags)) != 0) {
    #line 10722 
    if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_5780_CLASS,
                   (unsigned long *)(& tp->tg3_flags)) == 0) 
      #line 10723 
      limit = 8; else 
                      #line 10725 
                      limit = 16;
  }
  else 
       #line 10725 
       limit = 16;
  #line 10726 
  if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_ENABLE_ASF,
                   (unsigned long *)(& tp->tg3_flags)) != 0) 
    #line 10727 
    limit += -4;
  #line 10728 
  switch (limit) {
    #line 10729 
    case 16: 
             #line 10729 
    ;
    #line 10730 
    (*(tp->write32))(tp,1272U,0U);
    #line 10730 
    (*(tp->write32))(tp,1276U,0U);
    #line 10732 
    case 15: 
             #line 10732 
    ;
    #line 10733 
    (*(tp->write32))(tp,1264U,0U);
    #line 10733 
    (*(tp->write32))(tp,1268U,0U);
    #line 10735 
    case 14: 
             #line 10735 
    ;
    #line 10736 
    (*(tp->write32))(tp,1256U,0U);
    #line 10736 
    (*(tp->write32))(tp,1260U,0U);
    #line 10738 
    case 13: 
             #line 10738 
    ;
    #line 10739 
    (*(tp->write32))(tp,1248U,0U);
    #line 10739 
    (*(tp->write32))(tp,1252U,0U);
    #line 10741 
    case 12: 
             #line 10741 
    ;
    #line 10742 
    (*(tp->write32))(tp,1240U,0U);
    #line 10742 
    (*(tp->write32))(tp,1244U,0U);
    #line 10744 
    case 11: 
             #line 10744 
    ;
    #line 10745 
    (*(tp->write32))(tp,1232U,0U);
    #line 10745 
    (*(tp->write32))(tp,1236U,0U);
    #line 10747 
    case 10: 
             #line 10747 
    ;
    #line 10748 
    (*(tp->write32))(tp,1224U,0U);
    #line 10748 
    (*(tp->write32))(tp,1228U,0U);
    #line 10750 
    case 9: 
            #line 10750 
    ;
    #line 10751 
    (*(tp->write32))(tp,1216U,0U);
    #line 10751 
    (*(tp->write32))(tp,1220U,0U);
    #line 10753 
    case 8: 
            #line 10753 
    ;
    #line 10754 
    (*(tp->write32))(tp,1208U,0U);
    #line 10754 
    (*(tp->write32))(tp,1212U,0U);
    #line 10756 
    case 7: 
            #line 10756 
    ;
    #line 10757 
    (*(tp->write32))(tp,1200U,0U);
    #line 10757 
    (*(tp->write32))(tp,1204U,0U);
    #line 10759 
    case 6: 
            #line 10759 
    ;
    #line 10760 
    (*(tp->write32))(tp,1192U,0U);
    #line 10760 
    (*(tp->write32))(tp,1196U,0U);
    #line 10762 
    case 5: 
            #line 10762 
    ;
    #line 10763 
    (*(tp->write32))(tp,1184U,0U);
    #line 10763 
    (*(tp->write32))(tp,1188U,0U);
    #line 10765 
    case 4: 
            #line 10765 
    ;
    #line 10767 
    case 3: 
            #line 10767 
    ;
    #line 10769 
    case 2: 
            #line 10769 
    ;
    #line 10770 
    case 1: 
            #line 10770 
    ;
    #line 10772 
    default: 
             #line 10772 
    ;
    #line 10773 
    break;
  }
  #line 10776 
  if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_ENABLE_APE,
                   (unsigned long *)(& tp->tg3_flags)) != 0) 
    #line 10778 
    tg3_ape_write32(tp,16916U,5000U);
  #line 10781 
  tg3_write_sig_post_reset(tp,1);
  #line 10783 
  return 0;
}

#line 10789  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
static int tg3_init_hw(struct tg3 *tp, bool reset_phy)
{
  #line 10795 
  tg3_enable_register_access(tp);
  #line 10796 
  tg3_poll_fw(tp);
  #line 10798 
  tg3_switch_clocks(tp);
  #line 10800 
  (*(tp->write32))(tp,124U,0U);
  #line 10802 
  return tg3_reset_hw(tp,(_Bool)((bool)((int)reset_phy) != 0));
}

#line 10806  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
static void tg3_sd_scan_scratchpad(struct tg3 *tp, struct tg3_ocir *ocir)
{
  #line 10808 
  int i;
  #line 10810 
  i = 0;
  #line 10810 
  while (i <= 2) {
    {
      #line 10811 
      u32 off = (unsigned int)((unsigned long)i) * 64U;
      #line 10811 
      u32 len = 64U;
      #line 10813 
      tg3_ape_scratchpad_read(tp,(u32 *)ocir,off,len);
      #line 10814 
      off += len;
      #line 10816 
      if (ocir->signature != 1381188431U || ((int)ocir->version_flags & 1) == 0) 
        #line 10818 
        memset((void *)ocir,0,64UL);
    }
    #line 10810 
    i ++;
    #line 10810 
    ocir ++;
  }
  #line 10820 
  return;
}

#line 10823  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
static ssize_t tg3_show_temp(struct device *dev, struct device_attribute *devattr, char *buf)
{
  #line 10826 
  void *__mptr;
  #line 10828 
  u32 temperature;
  #line 10826 
  __mptr = (void *)devattr;
  #line 10826 
  struct sensor_device_attribute *attr = ((struct sensor_device_attribute *)__mptr);
  #line 10827 
  struct tg3 *tp = dev_get_drvdata(dev);
  #line 10830 
  cif_spin_lock_bh_lock_of_tg3(& tp->lock);
  #line 10831 
  tg3_ape_scratchpad_read(tp,& temperature,(unsigned int)attr->index,4U);
  #line 10833 
  cif_spin_unlock_bh_lock_of_tg3(& tp->lock);
  #line 10834 
  return (long)sprintf(buf,(char *)"%u\n",temperature * 1000U);
}

#line 10838  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
static struct sensor_device_attribute sensor_dev_attr_temp1_input = {.dev_attr = {.attr = {.name = (char *)"temp1_input", .mode = (unsigned short)292U}, .show = & tg3_show_temp}, .index = 212};
#line 10840  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
static struct sensor_device_attribute sensor_dev_attr_temp1_crit = {.dev_attr = {.attr = {.name = (char *)"temp1_crit", .mode = (unsigned short)292U}, .show = & tg3_show_temp}, .index = 200};
#line 10842  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
static struct sensor_device_attribute sensor_dev_attr_temp1_max = {.dev_attr = {.attr = {.name = (char *)"temp1_max", .mode = (unsigned short)292U}, .show = & tg3_show_temp}, .index = 204};
#line 10845  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
static struct attribute *tg3_attrs[4U] = {& sensor_dev_attr_temp1_input.dev_attr.attr, & sensor_dev_attr_temp1_crit.dev_attr.attr, & sensor_dev_attr_temp1_max.dev_attr.attr};
#line 10851  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
static struct attribute_group tg3_group = {.attrs = (struct attribute **)(& tg3_attrs)};
#line 10851  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
static struct attribute_group *tg3_groups[2U] = {& tg3_group};
#line 10853  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
static void tg3_hwmon_close(struct tg3 *tp)
{
  #line 10855 
  if (tp->hwmon_dev != (struct device *)0) {
    #line 10856 
    hwmon_device_unregister(tp->hwmon_dev);
    #line 10857 
    tp->hwmon_dev = (struct device *)0;
  }
  #line 10859 
  return;
}

#line 10861  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
static void tg3_hwmon_open(struct tg3 *tp)
{
  #line 10863 
  int i;
  #line 10866 
  struct tg3_ocir ocirs[3U];
  #line 10864 
  u32 size = 0U;
  #line 10865 
  struct pci_dev *pdev = tp->pdev;
  #line 10868 
  tg3_sd_scan_scratchpad(tp,(struct tg3_ocir *)(& ocirs));
  #line 10870 
  i = 0;
  #line 10870 
  while (i <= 2) {
    #line 10871 
    if ((unsigned int)ocirs[i].src_data_length == 0U) 
                                                      #line 10872 
                                                      goto __Cont;
    #line 10874 
    size = (unsigned int)ocirs[i].src_hdr_length + size;
    #line 10875 
    size = (unsigned int)ocirs[i].src_data_length + size;
    #line 10870 
    __Cont: 
            #line 10870 
    i ++;
  }
  #line 10878 
  if (size == 0U) 
                  #line 10879 
                  return;
  #line 10881 
  tp->hwmon_dev = hwmon_device_register_with_groups(& pdev->dev,(char *)"tg3",(void *)tp,(struct attribute_group **)(& tg3_groups));
  #line 10883 
  if ((int)IS_ERR((void *)tp->hwmon_dev) != 0) {
    #line 10884 
    tp->hwmon_dev = (struct device *)0;
    #line 10885 
    _dev_err(& pdev->dev,(char *)"Cannot register hwmon device, aborting\n");
  }
  #line 10887 
  return;
}

#line 10901  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
static void tg3_periodic_fetch_stats(struct tg3 *tp)
{
  #line 10903 
  struct tg3_hw_stats *sp = tp->hw_stats;
  #line 10905 
  if (! tp->link_up) 
                     #line 10906 
                     return;
  {
    #line 10908 
    u32 __val = (*(tp->read32))(tp,2048U);
    #line 10908 
    sp->tx_octets.low += __val;
    #line 10908 
    if (sp->tx_octets.low < __val) 
                                   #line 10908 
                                   (sp->tx_octets.high) ++;
  }
  {
    #line 10909 
    u32 __val_0 = (*(tp->read32))(tp,2056U);
    #line 10909 
    sp->tx_collisions.low += __val_0;
    #line 10909 
    if (sp->tx_collisions.low < __val_0) 
                                         #line 10909 
                                         (sp->tx_collisions.high) ++;
  }
  {
    #line 10910 
    u32 __val_1 = (*(tp->read32))(tp,2060U);
    #line 10910 
    sp->tx_xon_sent.low += __val_1;
    #line 10910 
    if (sp->tx_xon_sent.low < __val_1) 
                                       #line 10910 
                                       (sp->tx_xon_sent.high) ++;
  }
  {
    #line 10911 
    u32 __val_2 = (*(tp->read32))(tp,2064U);
    #line 10911 
    sp->tx_xoff_sent.low += __val_2;
    #line 10911 
    if (sp->tx_xoff_sent.low < __val_2) 
                                        #line 10911 
                                        (sp->tx_xoff_sent.high) ++;
  }
  {
    #line 10912 
    u32 __val_3 = (*(tp->read32))(tp,2072U);
    #line 10912 
    sp->tx_mac_errors.low += __val_3;
    #line 10912 
    if (sp->tx_mac_errors.low < __val_3) 
                                         #line 10912 
                                         (sp->tx_mac_errors.high) ++;
  }
  {
    #line 10913 
    u32 __val_4 = (*(tp->read32))(tp,2076U);
    #line 10913 
    sp->tx_single_collisions.low += __val_4;
    #line 10913 
    if (sp->tx_single_collisions.low < __val_4) 
                                                #line 10913 
                                                (sp->tx_single_collisions.high) ++;
  }
  {
    #line 10914 
    u32 __val_5 = (*(tp->read32))(tp,2080U);
    #line 10914 
    sp->tx_mult_collisions.low += __val_5;
    #line 10914 
    if (sp->tx_mult_collisions.low < __val_5) 
                                              #line 10914 
                                              (sp->tx_mult_collisions.high) ++;
  }
  {
    #line 10915 
    u32 __val_6 = (*(tp->read32))(tp,2084U);
    #line 10915 
    sp->tx_deferred.low += __val_6;
    #line 10915 
    if (sp->tx_deferred.low < __val_6) 
                                       #line 10915 
                                       (sp->tx_deferred.high) ++;
  }
  {
    #line 10916 
    u32 __val_7 = (*(tp->read32))(tp,2092U);
    #line 10916 
    sp->tx_excessive_collisions.low += __val_7;
    #line 10916 
    if (sp->tx_excessive_collisions.low < __val_7) 
                                                   #line 10916 
                                                   (sp->tx_excessive_collisions.high) ++;
  }
  {
    #line 10917 
    u32 __val_8 = (*(tp->read32))(tp,2096U);
    #line 10917 
    sp->tx_late_collisions.low += __val_8;
    #line 10917 
    if (sp->tx_late_collisions.low < __val_8) 
                                              #line 10917 
                                              (sp->tx_late_collisions.high) ++;
  }
  {
    #line 10918 
    u32 __val_9 = (*(tp->read32))(tp,2156U);
    #line 10918 
    sp->tx_ucast_packets.low += __val_9;
    #line 10918 
    if (sp->tx_ucast_packets.low < __val_9) 
                                            #line 10918 
                                            (sp->tx_ucast_packets.high) ++;
  }
  {
    #line 10919 
    u32 __val_10 = (*(tp->read32))(tp,2160U);
    #line 10919 
    sp->tx_mcast_packets.low += __val_10;
    #line 10919 
    if (sp->tx_mcast_packets.low < __val_10) 
                                             #line 10919 
                                             (sp->tx_mcast_packets.high) ++;
  }
  {
    #line 10920 
    u32 __val_11 = (*(tp->read32))(tp,2164U);
    #line 10920 
    sp->tx_bcast_packets.low += __val_11;
    #line 10920 
    if (sp->tx_bcast_packets.low < __val_11) 
                                             #line 10920 
                                             (sp->tx_bcast_packets.high) ++;
  }
  #line 10921 
  if ((long)(_tg3_flag((enum TG3_FLAGS)TG3_FLAG_5719_5720_RDMA_BUG,
                   (unsigned long *)(& tp->tg3_flags)) != 0) != 0L) 
    #line 10921 
    if ((long)((sp->tx_ucast_packets.low + sp->tx_mcast_packets.low) + sp->tx_bcast_packets.low > 4U) != 0L) {
      #line 10924 
      u32 val;
      #line 10926 
      val = (*(tp->read32))(tp,18704U);
      #line 10927 
      val = ~ tg3_lso_rd_dma_workaround_bit(tp) & val;
      #line 10928 
      (*(tp->write32))(tp,18704U,val);
      #line 10929 
      _tg3_flag_clear((enum TG3_FLAGS)TG3_FLAG_5719_5720_RDMA_BUG,(unsigned long *)(& tp->tg3_flags));
    }
  {
    #line 10932 
    u32 __val_12 = (*(tp->read32))(tp,2176U);
    #line 10932 
    sp->rx_octets.low += __val_12;
    #line 10932 
    if (sp->rx_octets.low < __val_12) 
                                      #line 10932 
                                      (sp->rx_octets.high) ++;
  }
  {
    #line 10933 
    u32 __val_13 = (*(tp->read32))(tp,2184U);
    #line 10933 
    sp->rx_fragments.low += __val_13;
    #line 10933 
    if (sp->rx_fragments.low < __val_13) 
                                         #line 10933 
                                         (sp->rx_fragments.high) ++;
  }
  {
    #line 10934 
    u32 __val_14 = (*(tp->read32))(tp,2188U);
    #line 10934 
    sp->rx_ucast_packets.low += __val_14;
    #line 10934 
    if (sp->rx_ucast_packets.low < __val_14) 
                                             #line 10934 
                                             (sp->rx_ucast_packets.high) ++;
  }
  {
    #line 10935 
    u32 __val_15 = (*(tp->read32))(tp,2192U);
    #line 10935 
    sp->rx_mcast_packets.low += __val_15;
    #line 10935 
    if (sp->rx_mcast_packets.low < __val_15) 
                                             #line 10935 
                                             (sp->rx_mcast_packets.high) ++;
  }
  {
    #line 10936 
    u32 __val_16 = (*(tp->read32))(tp,2196U);
    #line 10936 
    sp->rx_bcast_packets.low += __val_16;
    #line 10936 
    if (sp->rx_bcast_packets.low < __val_16) 
                                             #line 10936 
                                             (sp->rx_bcast_packets.high) ++;
  }
  {
    #line 10937 
    u32 __val_17 = (*(tp->read32))(tp,2200U);
    #line 10937 
    sp->rx_fcs_errors.low += __val_17;
    #line 10937 
    if (sp->rx_fcs_errors.low < __val_17) 
                                          #line 10937 
                                          (sp->rx_fcs_errors.high) ++;
  }
  {
    #line 10938 
    u32 __val_18 = (*(tp->read32))(tp,2204U);
    #line 10938 
    sp->rx_align_errors.low += __val_18;
    #line 10938 
    if (sp->rx_align_errors.low < __val_18) 
                                            #line 10938 
                                            (sp->rx_align_errors.high) ++;
  }
  {
    #line 10939 
    u32 __val_19 = (*(tp->read32))(tp,2208U);
    #line 10939 
    sp->rx_xon_pause_rcvd.low += __val_19;
    #line 10939 
    if (sp->rx_xon_pause_rcvd.low < __val_19) 
                                              #line 10939 
                                              (sp->rx_xon_pause_rcvd.high) ++;
  }
  {
    #line 10940 
    u32 __val_20 = (*(tp->read32))(tp,2212U);
    #line 10940 
    sp->rx_xoff_pause_rcvd.low += __val_20;
    #line 10940 
    if (sp->rx_xoff_pause_rcvd.low < __val_20) 
                                               #line 10940 
                                               (sp->rx_xoff_pause_rcvd.high) ++;
  }
  {
    #line 10941 
    u32 __val_21 = (*(tp->read32))(tp,2216U);
    #line 10941 
    sp->rx_mac_ctrl_rcvd.low += __val_21;
    #line 10941 
    if (sp->rx_mac_ctrl_rcvd.low < __val_21) 
                                             #line 10941 
                                             (sp->rx_mac_ctrl_rcvd.high) ++;
  }
  {
    #line 10942 
    u32 __val_22 = (*(tp->read32))(tp,2220U);
    #line 10942 
    sp->rx_xoff_entered.low += __val_22;
    #line 10942 
    if (sp->rx_xoff_entered.low < __val_22) 
                                            #line 10942 
                                            (sp->rx_xoff_entered.high) ++;
  }
  {
    #line 10943 
    u32 __val_23 = (*(tp->read32))(tp,2224U);
    #line 10943 
    sp->rx_frame_too_long_errors.low += __val_23;
    #line 10943 
    if (sp->rx_frame_too_long_errors.low < __val_23) 
                                                     #line 10943 
                                                     (sp->rx_frame_too_long_errors.high) ++;
  }
  {
    #line 10944 
    u32 __val_24 = (*(tp->read32))(tp,2228U);
    #line 10944 
    sp->rx_jabbers.low += __val_24;
    #line 10944 
    if (sp->rx_jabbers.low < __val_24) 
                                       #line 10944 
                                       (sp->rx_jabbers.high) ++;
  }
  {
    #line 10945 
    u32 __val_25 = (*(tp->read32))(tp,2232U);
    #line 10945 
    sp->rx_undersize_packets.low += __val_25;
    #line 10945 
    if (sp->rx_undersize_packets.low < __val_25) 
                                                 #line 10945 
                                                 (sp->rx_undersize_packets.high) ++;
  }
  {
    #line 10947 
    u32 __val_26 = (*(tp->read32))(tp,8780U);
    #line 10947 
    sp->rxbds_empty.low += __val_26;
    #line 10947 
    if (sp->rxbds_empty.low < __val_26) 
                                        #line 10947 
                                        (sp->rxbds_empty.high) ++;
  }
  #line 10948 
  if (((tp->pci_chip_rev_id >> 12 != 22295U && tp->pci_chip_rev_id >> 12 != 22370U) && tp->pci_chip_rev_id != 91328512U) && tp->pci_chip_rev_id != 91357184U) {
    #line 10952 
    u32 __val_27 = (*(tp->read32))(tp,8784U);
    #line 10952 
    sp->rx_discards.low += __val_27;
    #line 10952 
    if (sp->rx_discards.low < __val_27) 
                                        #line 10952 
                                        (sp->rx_discards.high) ++;
  }
  else {
    #line 10954 
    u32 val_0 = (*(tp->read32))(tp,15432U);
    #line 10955 
    val_0 = (val_0 >> 6) & 1U;
    #line 10956 
    if (val_0 != 0U) {
      #line 10957 
      (*(tp->write32))(tp,15432U,64U);
      #line 10958 
      sp->rx_discards.low += val_0;
      #line 10959 
      if (sp->rx_discards.low < val_0) 
                                       #line 10960 
                                       (sp->rx_discards.high) ++;
    }
    #line 10962 
    sp->mbuf_lwm_thresh_hit = sp->rx_discards;
  }
  {
    #line 10964 
    u32 __val_28 = (*(tp->read32))(tp,8788U);
    #line 10964 
    sp->rx_errors.low += __val_28;
    #line 10964 
    if (sp->rx_errors.low < __val_28) 
                                      #line 10964 
                                      (sp->rx_errors.high) ++;
  }
  #line 10966 
  return;
}

#line 10967  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
static void tg3_chk_missed_msi(struct tg3 *tp)
{
  #line 10969 
  u32 i;
  #line 10971 
  i = 0U;
  #line 10971 
  while (tp->irq_cnt > i) {
    {
      #line 10972 
      struct tg3_napi *tnapi = & tp->napi[i];
      #line 10974 
      if (tg3_has_work(tnapi) != 0U) 
        #line 10975 
        if (tnapi->last_rx_cons == tnapi->rx_rcb_ptr && tnapi->last_tx_cons == tnapi->tx_cons) {
          #line 10977 
          if (tnapi->chk_msi_cnt == 0U) {
            #line 10978 
            (tnapi->chk_msi_cnt) ++;
            #line 10979 
            return;
          }
          #line 10981 
          tg3_msi(0,(void *)tnapi);
        }
      #line 10984 
      tnapi->chk_msi_cnt = 0U;
      #line 10985 
      tnapi->last_rx_cons = tnapi->rx_rcb_ptr;
      #line 10986 
      tnapi->last_tx_cons = tnapi->tx_cons;
    }
    #line 10971 
    i ++;
  }
  #line 10988 
  return;
}

#line 10990  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
static void tg3_timer(struct timer_list *t)
{
  #line 10992 
  void *__mptr;
  #line 10992 
  __mptr = (void *)t;
  #line 10992 
  struct tg3 *tp = ((struct tg3 *)(__mptr + 18446744073709546776U));
  #line 10994 
  cif_spin_lock_lock_of_tg3(& tp->lock);
  #line 10996 
  if (tp->irq_sync != 0U) 
                          #line 10996 
                          goto _LOR;
  else {
    #line 10996 
    if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_RESET_TASK_PENDING,
                  (unsigned long *)(& tp->tg3_flags)) != 0) {
      #line 10996 
      _LOR: {
              #line 10997 
              cif_spin_unlock_lock_of_tg3(& tp->lock);
              #line 10998 
              goto restart_timer;
            }
    }
  }
  #line 11001 
  if (tp->pci_chip_rev_id >> 12 == 22295U) 
                                           #line 11003 
                                           tg3_chk_missed_msi(tp);
  else {
    #line 11001 
    if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_57765_CLASS,
                  (unsigned long *)(& tp->tg3_flags)) != 0) 
      #line 11003 
      tg3_chk_missed_msi(tp);
  }
  #line 11005 
  if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_FLUSH_POSTED_WRITES,
                  (unsigned long *)(& tp->tg3_flags)) != 0) 
    #line 11007 
    (*(tp->read32))(tp,15360U);
  #line 11010 
  if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_TAGGED_STATUS,
                  (unsigned long *)(& tp->tg3_flags)) == 0) {
    #line 11015 
    if (((tp->napi[0].hw_status)->status & 1U) != 0U) 
                                                      #line 11016 
                                                      (*(tp->write32))(tp,26632U,tp->grc_local_ctrl | 4U); else 
                                                                    #line 11019 
                                                                    (*(tp->write32))(tp,15360U,tp->coalesce_mode | 10U);
    #line 11023 
    if (((*(tp->read32))(tp,19456U) & 2U) == 0U) {
      #line 11024 
      cif_spin_unlock_lock_of_tg3(& tp->lock);
      #line 11025 
      tg3_reset_task_schedule(tp);
      #line 11026 
      goto restart_timer;
    }
  }
  #line 11031 
  tp->timer_counter = (u16)((int)tp->timer_counter - 1);
  #line 11031 
  if ((unsigned int)tp->timer_counter == 0U) {
    #line 11032 
    if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_5705_PLUS,
                  (unsigned long *)(& tp->tg3_flags)) != 0) 
      #line 11033 
      tg3_periodic_fetch_stats(tp);
    #line 11035 
    if (tp->setlpicnt != 0U) {
      #line 11035 
      (tp->setlpicnt) --;
      #line 11035 
      if (tp->setlpicnt == 0U) 
                               #line 11036 
                               tg3_phy_eee_enable(tp);
    }
    #line 11038 
    if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_USE_LINKCHG_REG,
                   (unsigned long *)(& tp->tg3_flags)) != 0) {
      #line 11039 
      u32 mac_stat;
      #line 11040 
      int phy_event;
      #line 11042 
      mac_stat = (*(tp->read32))(tp,1028U);
      #line 11044 
      phy_event = 0;
      #line 11045 
      if ((tp->phy_flags & 4U) != 0U) {
        #line 11046 
        if ((mac_stat & 8388608U) != 0U) 
                                         #line 11047 
                                         phy_event = 1;
      }
      else 
        #line 11048 
        if ((mac_stat & 4096U) != 0U) 
                                      #line 11049 
                                      phy_event = 1;
      #line 11051 
      if (phy_event != 0) 
                          #line 11052 
                          tg3_setup_phy(tp,(_Bool)0);
    }
    else {
      #line 11053 
      if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_POLL_SERDES,
                   (unsigned long *)(& tp->tg3_flags)) != 0) {
        #line 11054 
        u32 mac_stat_0 = (*(tp->read32))(tp,1028U);
        #line 11055 
        int need_setup = 0;
        #line 11057 
        if ((int)tp->link_up != 0 && (mac_stat_0 & 4096U) != 0U) 
                                                                 #line 11059 
                                                                 need_setup = 1;
        #line 11061 
        if (! tp->link_up && (mac_stat_0 & 3U) != 0U) 
                                                      #line 11064 
                                                      need_setup = 1;
        #line 11066 
        if (need_setup != 0) {
          #line 11067 
          if (tp->serdes_counter == 0U) {
            #line 11068 
            _tw32_flush(tp,1024U,tp->mac_mode & 4294967283U,0U);
            #line 11071 
            __const_udelay(171800UL);
            #line 11072 
            _tw32_flush(tp,1024U,tp->mac_mode,0U);
            #line 11073 
            __const_udelay(171800UL);
          }
          #line 11075 
          tg3_setup_phy(tp,(_Bool)0);
        }
      }
      else 
        #line 11077 
        if ((tp->phy_flags & 32U) != 0U) {
          #line 11077 
          if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_5780_CLASS,
                  (unsigned long *)(& tp->tg3_flags)) != 0) 
            #line 11079 
            tg3_serdes_parallel_detect(tp); else 
                                                 #line 11077 
                                                 goto _LAND;
        }
        else {
          #line 11077 
          _LAND: 
          #line 11080 
          if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_POLL_CPMU_LINK,
                  (unsigned long *)(& tp->tg3_flags)) != 0) {
            #line 11081 
            u32 cpmu = (*(tp->read32))(tp,13868U);
            #line 11082 
            bool link_up = (_Bool)((cpmu & 1572864U) != 1572864U);
            #line 11085 
            if ((int)tp->link_up != (int)link_up) 
                                                  #line 11086 
                                                  tg3_setup_phy(tp,(_Bool)0);
          }
        }
    }
    #line 11089 
    tp->timer_counter = tp->timer_multiplier;
  }
  #line 11109 
  tp->asf_counter = (u16)((int)tp->asf_counter - 1);
  #line 11109 
  if ((unsigned int)tp->asf_counter == 0U) {
    #line 11110 
    if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_ENABLE_ASF,
                   (unsigned long *)(& tp->tg3_flags)) != 0) {
      #line 11110 
      if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_ENABLE_APE,
                   (unsigned long *)(& tp->tg3_flags)) == 0) {
        #line 11111 
        tg3_wait_for_event_ack(tp);
        #line 11113 
        tg3_write_mem(tp,2936U,14U);
        #line 11115 
        tg3_write_mem(tp,2940U,4U);
        #line 11116 
        tg3_write_mem(tp,2944U,5U);
        #line 11119 
        tg3_generate_fw_event(tp);
      }
    }
    #line 11121 
    tp->asf_counter = tp->asf_multiplier;
  }
  #line 11125 
  tg3_send_ape_heartbeat(tp,tp->ape_hb_interval);
  #line 11127 
  cif_spin_unlock_lock_of_tg3(& tp->lock);
  #line 11129 
  restart_timer: 
                 #line 11129 
  ;
  #line 11130 
  tp->timer.expires = (unsigned long)tp->timer_offset + jiffies;
  #line 11131 
  add_timer(& tp->timer);
  #line 11132 
  return;
}

#line 11134  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
static void tg3_timer_init(struct tg3 *tp)
{
  #line 11136 
  if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_TAGGED_STATUS,
                (unsigned long *)(& tp->tg3_flags)) != 0) 
    #line 11136 
    if (tp->pci_chip_rev_id >> 12 != 22295U) {
      #line 11137 
      if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_57765_CLASS,
                  (unsigned long *)(& tp->tg3_flags)) == 0) 
        #line 11139 
        tp->timer_offset = 250U; else 
                                      #line 11141 
                                      tp->timer_offset = 25U;
    }
    else 
         #line 11141 
         tp->timer_offset = 25U;
  else 
       #line 11141 
       tp->timer_offset = 25U;
  #line 11143 
  if ((long)(tp->timer_offset > 250U) != 0L) {
    #line 11144 
    ldv_inline_asm();
    #line 11145 
    ldv_inline_asm();
    #line 11146 
    ldv_inline_asm();
    #line 11143 
    ;
  }
  #line 11145 
  tp->timer_multiplier = (unsigned short)(250U / tp->timer_offset);
  #line 11146 
  tp->asf_multiplier = (unsigned short)((unsigned int)((unsigned short)(250U / tp->timer_offset)) * 2U);
  {
    #line 11149 
    struct lock_class_key __key;
    #line 11149 
    init_timer_key(& tp->timer,& tg3_timer,0U,(char *)"(&tp->timer)",& __key);
  }
  #line 11151 
  return;
}

#line 11152  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
static void tg3_timer_start(struct tg3 *tp)
{
  #line 11154 
  tp->asf_counter = tp->asf_multiplier;
  #line 11155 
  tp->timer_counter = tp->timer_multiplier;
  #line 11157 
  tp->timer.expires = (unsigned long)tp->timer_offset + jiffies;
  #line 11158 
  add_timer(& tp->timer);
  #line 11159 
  return;
}

#line 11161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
static void tg3_timer_stop(struct tg3 *tp)
{
  #line 11163 
  cif_del_timer_sync(& tp->timer);
  #line 11164 
  return;
}

#line 11169  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
static int tg3_restart_hw(struct tg3 *tp, bool reset_phy)
{
  #line 11173 
  int err;
  #line 11175 
  err = tg3_init_hw(tp,(_Bool)((bool)((int)reset_phy) != 0));
  #line 11176 
  if (err != 0) {
    #line 11177 
    netdev_err(tp->dev,(char *)"Failed to re-initialize device, aborting\n");
    #line 11179 
    tg3_halt(tp,0,(_Bool)1);
    #line 11180 
    tg3_full_unlock(tp);
    #line 11181 
    tg3_timer_stop(tp);
    #line 11182 
    tp->irq_sync = 0U;
    #line 11183 
    tg3_napi_enable(tp);
    #line 11184 
    dev_close(tp->dev);
    #line 11185 
    tg3_full_lock(tp,0);
  }
  #line 11187 
  return err;
}

#line 11190  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
static void tg3_reset_task(struct work_struct *work)
{
  #line 11192 
  void *__mptr;
  #line 11193 
  int err;
  #line 11192 
  __mptr = (void *)work;
  #line 11192 
  struct tg3 *tp = ((struct tg3 *)(__mptr + 18446744073709546288U));
  #line 11195 
  rtnl_lock();
  #line 11196 
  tg3_full_lock(tp,0);
  #line 11198 
  if (! netif_running(tp->dev)) {
    #line 11199 
    _tg3_flag_clear((enum TG3_FLAGS)TG3_FLAG_RESET_TASK_PENDING,(unsigned long *)(& tp->tg3_flags));
    #line 11200 
    tg3_full_unlock(tp);
    #line 11201 
    rtnl_unlock();
    #line 11202 
    return;
  }
  #line 11205 
  tg3_full_unlock(tp);
  #line 11207 
  tg3_phy_stop(tp);
  #line 11209 
  tg3_netif_stop(tp);
  #line 11211 
  tg3_full_lock(tp,1);
  #line 11213 
  if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_TX_RECOVERY_PENDING,
                  (unsigned long *)(& tp->tg3_flags)) != 0) {
    #line 11214 
    tp->write32_tx_mbox = & tg3_write32_tx_mbox;
    #line 11215 
    tp->write32_rx_mbox = & tg3_write_flush_reg32;
    #line 11216 
    _tg3_flag_set((enum TG3_FLAGS)TG3_FLAG_MBOX_WRITE_REORDER,(unsigned long *)(& tp->tg3_flags));
    #line 11217 
    _tg3_flag_clear((enum TG3_FLAGS)TG3_FLAG_TX_RECOVERY_PENDING,(unsigned long *)(& tp->tg3_flags));
  }
  #line 11220 
  tg3_halt(tp,0,(_Bool)0);
  #line 11221 
  err = tg3_init_hw(tp,(_Bool)1);
  #line 11222 
  if (err != 0) 
                #line 11223 
                goto out;
  #line 11225 
  tg3_netif_start(tp);
  #line 11227 
  out: 
       #line 11227 
  ;
  #line 11228 
  tg3_full_unlock(tp);
  #line 11230 
  if (err == 0) 
                #line 11231 
                tg3_phy_start(tp);
  #line 11233 
  _tg3_flag_clear((enum TG3_FLAGS)TG3_FLAG_RESET_TASK_PENDING,(unsigned long *)(& tp->tg3_flags));
  #line 11234 
  rtnl_unlock();
  #line 11235 
  return;
}

#line 11237  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
static int tg3_request_irq(struct tg3 *tp, int irq_num)
{
  #line 11239 
  irqreturn_t (*fn)(int , void *);
  #line 11240 
  unsigned long flags;
  #line 11241 
  char *name;
  #line 11242 
  struct tg3_napi *tnapi = & tp->napi[irq_num];
  #line 11244 
  if (tp->irq_cnt == 1U) 
                         #line 11245 
                         name = (char *)(& (tp->dev)->name);
  else {
    #line 11247 
    name = & tnapi->irq_lbl[0];
    #line 11248 
    if (tnapi->tx_buffers != (struct tg3_tx_ring_info *)0 && tnapi->rx_rcb != (struct tg3_rx_buffer_desc *)0) 
      #line 11249 
      snprintf(name,16UL,(char *)"%s-txrx-%d",(char *)(& (tp->dev)->name),irq_num);
    else 
      #line 11251 
      if (tnapi->tx_buffers != (struct tg3_tx_ring_info *)0) 
                                                             #line 11252 
                                                             snprintf(name,16UL,(char *)"%s-tx-%d",(char *)(& (tp->dev)->name),irq_num);
      else 
        #line 11254 
        if (tnapi->rx_rcb != (struct tg3_rx_buffer_desc *)0) 
                                                             #line 11255 
                                                             snprintf(name,16UL,(char *)"%s-rx-%d",(char *)(& (tp->dev)->name),irq_num); else 
                                                                    #line 11258 
                                                                    snprintf(name,16UL,(char *)"%s-%d",(char *)(& (tp->dev)->name),irq_num);
    #line 11260 
    *(name + 15U) = (char)0;
  }
  #line 11263 
  if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_USING_MSI,
                  (unsigned long *)(& tp->tg3_flags)) != 0) 
    #line 11263 
    goto _LOR;
  else {
    #line 11263 
    if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_USING_MSIX,
                  (unsigned long *)(& tp->tg3_flags)) != 0) {
      #line 11263 
      _LOR: {
              #line 11264 
              fn = & tg3_msi;
              #line 11265 
              if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_1SHOT_MSI,
                (unsigned long *)(& tp->tg3_flags)) != 0) 
                #line 11266 
                fn = & tg3_msi_1shot;
              #line 11267 
              flags = 0UL;
            }
    }
    else {
      #line 11269 
      fn = & tg3_interrupt;
      #line 11270 
      if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_TAGGED_STATUS,
                  (unsigned long *)(& tp->tg3_flags)) != 0) 
        #line 11271 
        fn = & tg3_interrupt_tagged;
      #line 11272 
      flags = 128UL;
    }
  }
  #line 11275 
  return cif_request_irq(tnapi->irq_vec,fn,flags,name,(void *)tnapi);
}

#line 11278  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
static int tg3_test_interrupt(struct tg3 *tp)
{
  #line 11282 
  int err;
  #line 11282 
  int i;
  #line 11283 
  u32 val;
  #line 11280 
  struct tg3_napi *tnapi = & tp->napi[0];
  #line 11281 
  struct net_device *dev = tp->dev;
  #line 11282 
  int intr_ok = 0;
  #line 11285 
  if (! netif_running(dev)) 
                            #line 11286 
                            return -19;
  #line 11288 
  tg3_disable_ints(tp);
  #line 11290 
  cif_free_irq(tnapi->irq_vec,(void *)tnapi);
  #line 11296 
  if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_57765_PLUS,
                  (unsigned long *)(& tp->tg3_flags)) != 0) {
    #line 11297 
    val = (*(tp->read32))(tp,24576U) | 32U;
    #line 11298 
    (*(tp->write32))(tp,24576U,val);
  }
  #line 11301 
  err = cif_request_irq(tnapi->irq_vec,& tg3_test_isr,128UL,(char *)(& dev->name),(void *)tnapi);
  #line 11303 
  if (err != 0) 
                #line 11304 
                return err;
  #line 11306 
  (tnapi->hw_status)->status &= 4294967294U;
  #line 11307 
  tg3_enable_ints(tp);
  #line 11309 
  _tw32_flush(tp,15360U,(tp->coalesce_mode | tnapi->coal_now) | 2U,0U);
  #line 11312 
  i = 0;
  #line 11312 
  while (i <= 4) {
    {
      #line 11313 
      u32 int_mbox;
      #line 11313 
      u32 misc_host_ctrl;
      #line 11315 
      int_mbox = (*(tp->read32_mbox))(tp,tnapi->int_mbox);
      #line 11316 
      misc_host_ctrl = (*(tp->read32))(tp,104U);
      #line 11318 
      if (int_mbox != 0U || (misc_host_ctrl & 2U) != 0U) {
        #line 11320 
        intr_ok = 1;
        #line 11321 
        break;
      }
      #line 11324 
      if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_57765_PLUS,
                  (unsigned long *)(& tp->tg3_flags)) != 0) 
        #line 11324 
        if ((tnapi->hw_status)->status_tag != tnapi->last_tag) 
                                                               #line 11326 
                                                               tw32_mailbox_flush(tp,tnapi->int_mbox,tnapi->last_tag << 24);
      #line 11328 
      msleep(10U);
    }
    #line 11312 
    i ++;
  }
  #line 11331 
  tg3_disable_ints(tp);
  #line 11333 
  cif_free_irq(tnapi->irq_vec,(void *)tnapi);
  #line 11335 
  err = tg3_request_irq(tp,0);
  #line 11337 
  if (err != 0) 
                #line 11338 
                return err;
  #line 11340 
  if (intr_ok != 0) {
    #line 11342 
    if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_57765_PLUS,
                  (unsigned long *)(& tp->tg3_flags)) != 0) {
      #line 11342 
      if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_1SHOT_MSI,
                  (unsigned long *)(& tp->tg3_flags)) != 0) {
        #line 11343 
        val = (*(tp->read32))(tp,24576U) & 4294967263U;
        #line 11344 
        (*(tp->write32))(tp,24576U,val);
      }
    }
    #line 11346 
    return 0;
  }
  #line 11349 
  return -5;
}

#line 11355  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
static int tg3_test_msi(struct tg3 *tp)
{
  #line 11357 
  int err;
  #line 11358 
  u16 pci_cmd;
  #line 11360 
  if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_USING_MSI,
                (unsigned long *)(& tp->tg3_flags)) == 0) 
    #line 11361 
    return 0;
  #line 11366 
  pci_read_config_word(tp->pdev,4,& pci_cmd);
  #line 11367 
  pci_write_config_word(tp->pdev,4,(unsigned short)((int)pci_cmd & 65279));
  #line 11370 
  err = tg3_test_interrupt(tp);
  #line 11372 
  pci_write_config_word(tp->pdev,4,(unsigned short)((int)pci_cmd));
  #line 11374 
  if (err == 0) 
                #line 11375 
                return 0;
  #line 11378 
  if (err != -5) 
                 #line 11379 
                 return err;
  #line 11382 
  netdev_warn(tp->dev,(char *)"No interrupt was generated using MSI. Switching ");
  #line 11386 
  cif_free_irq(tp->napi[0].irq_vec,(void *)(& tp->napi[0]));
  #line 11388 
  pci_disable_msi(tp->pdev);
  #line 11390 
  _tg3_flag_clear((enum TG3_FLAGS)TG3_FLAG_USING_MSI,(unsigned long *)(& tp->tg3_flags));
  #line 11391 
  tp->napi[0].irq_vec = (tp->pdev)->irq;
  #line 11393 
  err = tg3_request_irq(tp,0);
  #line 11394 
  if (err != 0) 
                #line 11395 
                return err;
  #line 11400 
  tg3_full_lock(tp,1);
  #line 11402 
  tg3_halt(tp,0,(_Bool)1);
  #line 11403 
  err = tg3_init_hw(tp,(_Bool)1);
  #line 11405 
  tg3_full_unlock(tp);
  #line 11407 
  if (err != 0) 
                #line 11408 
                cif_free_irq(tp->napi[0].irq_vec,(void *)(& tp->napi[0]));
  #line 11410 
  return err;
}

#line 11413  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
static int tg3_request_firmware(struct tg3 *tp)
{
  #line 11415 
  struct tg3_firmware_hdr *fw_hdr;
  #line 11417 
  if (cif_request_firmware(& tp->fw,tp->fw_needed,& (tp->pdev)->dev) != 0) {
    #line 11418 
    netdev_err(tp->dev,(char *)"Failed to load firmware \"%s\"\n",tp->fw_needed);
    #line 11420 
    return -2;
  }
  #line 11423 
  fw_hdr = (struct tg3_firmware_hdr *)(tp->fw)->data;
  #line 11430 
  tp->fw_len = __builtin_bswap32(fw_hdr->len);
  #line 11431 
  if ((unsigned long)tp->fw_len < (tp->fw)->size + 18446744073709551604UL) {
    #line 11432 
    netdev_err(tp->dev,(char *)"bogus length %d in \"%s\"\n",tp->fw_len,tp->fw_needed);
    #line 11434 
    cif_release_firmware(tp->fw);
    #line 11435 
    tp->fw = (struct firmware *)0;
    #line 11436 
    return -22;
  }
  #line 11440 
  tp->fw_needed = (char *)0;
  #line 11441 
  return 0;
}

#line 11444  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
static u32 tg3_irq_count(struct tg3 *tp)
{
  #line 11446 
  u32 __UNIQUE_ID___x577;
  #line 11446 
  u32 tmp;
  {
    #line 11446 
    __UNIQUE_ID___x577 = tp->rxq_cnt;
    #line 11446 
    u32 __UNIQUE_ID___y578 = tp->txq_cnt;
    #line 11446 
    if (__UNIQUE_ID___x577 > __UNIQUE_ID___y578) 
                                                 #line 11446 
                                                 tmp = __UNIQUE_ID___x577; else 
                                                                    #line 11446 
                                                                    tmp = __UNIQUE_ID___y578;
    }
  #line 11446 
  u32 irq_cnt = tmp;
  #line 11448 
  if (irq_cnt > 1U) {
    #line 11454 
    unsigned int __UNIQUE_ID___x579;
    #line 11454 
    unsigned int tmp_1;
    {
      #line 11454 
      __UNIQUE_ID___x579 = irq_cnt + 1U;
      #line 11454 
      unsigned int __UNIQUE_ID___y580 = tp->irq_max;
      #line 11454 
      if (__UNIQUE_ID___x579 < __UNIQUE_ID___y580) 
                                                   #line 11454 
                                                   tmp_1 = __UNIQUE_ID___x579; else 
                                                                    #line 11454 
                                                                    tmp_1 = __UNIQUE_ID___y580;
      }
    #line 11454 
    irq_cnt = tmp_1;
  }
  #line 11457 
  return irq_cnt;
}

#line 11460  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
static bool tg3_enable_msix(struct tg3 *tp)
{
  #line 11462 
  int i;
  #line 11462 
  int rc;
  #line 11463 
  struct msix_entry msix_ent[5U];
  #line 11465 
  tp->txq_cnt = tp->txq_req;
  #line 11466 
  tp->rxq_cnt = tp->rxq_req;
  #line 11467 
  if (tp->rxq_cnt == 0U) {
    #line 11468 
    tp->rxq_cnt = (unsigned int)netif_get_num_default_rss_queues();
  }
  #line 11469 
  if (tp->rxq_cnt > tp->rxq_max) 
                                 #line 11470 
                                 tp->rxq_cnt = tp->rxq_max;
  #line 11476 
  if (tp->txq_req == 0U) 
                         #line 11477 
                         tp->txq_cnt = 1U;
  #line 11479 
  tp->irq_cnt = tg3_irq_count(tp);
  #line 11481 
  i = 0;
  #line 11481 
  while (tp->irq_max > (unsigned int)i) {
    #line 11482 
    msix_ent[i].entry = (unsigned short)i;
    #line 11483 
    msix_ent[i].vector = 0U;
    #line 11481 
    i ++;
  }
  #line 11486 
  rc = pci_enable_msix_range(tp->pdev,(struct msix_entry *)(& msix_ent),1,(int)tp->irq_cnt);
  #line 11487 
  if (rc < 0) 
              #line 11488 
              return (_Bool)0;
  else 
    #line 11489 
    if (tp->irq_cnt > (unsigned int)rc) {
      #line 11493 
      int __UNIQUE_ID___x581;
      #line 11493 
      int tmp_0;
      #line 11490 
      netdev_notice(tp->dev,(char *)"Requested %d MSI-X vectors, received %d\n",tp->irq_cnt,rc);
      #line 11492 
      tp->irq_cnt = (unsigned int)rc;
      {
        #line 11493 
        __UNIQUE_ID___x581 = rc + -1;
        #line 11493 
        int __UNIQUE_ID___y582 = 1;
        #line 11493 
        if (__UNIQUE_ID___x581 > __UNIQUE_ID___y582) 
                                                     #line 11493 
                                                     tmp_0 = __UNIQUE_ID___x581; else 
                                                                    #line 11493 
                                                                    tmp_0 = __UNIQUE_ID___y582;
        }
      #line 11493 
      tp->rxq_cnt = (unsigned int)tmp_0;
      #line 11494 
      if (tp->txq_cnt != 0U) {
        #line 11495 
        u32 tmp_2;
        #line 11495 
        u32 __UNIQUE_ID___x583;
        {
          #line 11495 
          __UNIQUE_ID___x583 = tp->rxq_cnt;
          #line 11495 
          u32 __UNIQUE_ID___y584 = tp->txq_max;
          #line 11495 
          if (__UNIQUE_ID___x583 < __UNIQUE_ID___y584) 
                                                       #line 11495 
                                                       tmp_2 = __UNIQUE_ID___x583; else 
                                                                    #line 11495 
                                                                    tmp_2 = __UNIQUE_ID___y584;
          }
        #line 11495 
        tp->txq_cnt = tmp_2;
      }
    }
  #line 11498 
  i = 0;
  #line 11498 
  while (tp->irq_max > (unsigned int)i) {
    #line 11499 
    tp->napi[i].irq_vec = msix_ent[i].vector;
    #line 11498 
    i ++;
  }
  #line 11501 
  if (netif_set_real_num_rx_queues(tp->dev,tp->rxq_cnt) != 0) {
    #line 11502 
    pci_disable_msix(tp->pdev);
    #line 11503 
    return (_Bool)0;
  }
  #line 11506 
  if (tp->irq_cnt == 1U) 
                         #line 11507 
                         return (_Bool)1;
  #line 11509 
  _tg3_flag_set((enum TG3_FLAGS)TG3_FLAG_ENABLE_RSS,(unsigned long *)(& tp->tg3_flags));
  #line 11511 
  if (tp->txq_cnt > 1U) 
                        #line 11512 
                        _tg3_flag_set((enum TG3_FLAGS)TG3_FLAG_ENABLE_TSS,(unsigned long *)(& tp->tg3_flags));
  #line 11514 
  netif_set_real_num_tx_queues(tp->dev,tp->txq_cnt);
  #line 11516 
  return (_Bool)1;
}

#line 11519  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
static void tg3_ints_init(struct tg3 *tp)
{
  #line 11521 
  if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_SUPPORT_MSI,
                (unsigned long *)(& tp->tg3_flags)) != 0) 
    #line 11521 
    goto _LOR;
  else {
    #line 11521 
    if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_SUPPORT_MSIX,
                  (unsigned long *)(& tp->tg3_flags)) != 0) {
      #line 11521 
      _LOR: 
      #line 11521 
      if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_TAGGED_STATUS,
                  (unsigned long *)(& tp->tg3_flags)) == 0) {
        #line 11526 
        netdev_warn(tp->dev,(char *)"MSI without TAGGED_STATUS? Not using MSI\n");
        #line 11528 
        goto defcfg;
      }
    }
  }
  #line 11531 
  if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_SUPPORT_MSIX,
                  (unsigned long *)(& tp->tg3_flags)) != 0) {
    #line 11531 
    if ((int)tg3_enable_msix(tp) != 0) 
                                       #line 11532 
                                       _tg3_flag_set((enum TG3_FLAGS)TG3_FLAG_USING_MSIX,(unsigned long *)(& tp->tg3_flags)); else 
                                                                    #line 11531 
                                                                    goto _LAND;
  }
  else {
    #line 11531 
    _LAND: 
    #line 11533 
    if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_SUPPORT_MSI,
                  (unsigned long *)(& tp->tg3_flags)) != 0) {
      #line 11533 
      if (pci_enable_msi(tp->pdev) == 0) 
                                         #line 11534 
                                         _tg3_flag_set((enum TG3_FLAGS)TG3_FLAG_USING_MSI,(unsigned long *)(& tp->tg3_flags));
    }
  }
  #line 11536 
  if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_USING_MSI,
                  (unsigned long *)(& tp->tg3_flags)) != 0) 
    #line 11536 
    goto _LOR_0;
  else {
    #line 11536 
    if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_USING_MSIX,
                   (unsigned long *)(& tp->tg3_flags)) != 0) {
      #line 11536 
      _LOR_0: {
                #line 11537 
                u32 msi_mode = (*(tp->read32))(tp,24576U);
                #line 11538 
                if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_USING_MSIX,
                  (unsigned long *)(& tp->tg3_flags)) != 0) 
                  #line 11538 
                  if (tp->irq_cnt > 1U) 
                                        #line 11539 
                                        msi_mode |= 128U;
                #line 11540 
                if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_1SHOT_MSI,
                  (unsigned long *)(& tp->tg3_flags)) == 0) 
                  #line 11541 
                  msi_mode |= 32U;
                #line 11542 
                (*(tp->write32))(tp,24576U,msi_mode | 2U);
              }
    }
  }
  #line 11544 
  defcfg: 
          #line 11544 
  ;
  #line 11545 
  if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_USING_MSIX,
                   (unsigned long *)(& tp->tg3_flags)) == 0) {
    #line 11546 
    tp->irq_cnt = 1U;
    #line 11547 
    tp->napi[0].irq_vec = (tp->pdev)->irq;
  }
  #line 11550 
  if (tp->irq_cnt == 1U) {
    #line 11551 
    tp->txq_cnt = 1U;
    #line 11552 
    tp->rxq_cnt = 1U;
    #line 11553 
    netif_set_real_num_tx_queues(tp->dev,1U);
    #line 11554 
    netif_set_real_num_rx_queues(tp->dev,1U);
  }
  #line 11556 
  return;
}

#line 11558  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
static void tg3_ints_fini(struct tg3 *tp)
{
  #line 11560 
  if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_USING_MSIX,
                  (unsigned long *)(& tp->tg3_flags)) != 0) 
    #line 11561 
    pci_disable_msix(tp->pdev);
  else {
    #line 11562 
    if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_USING_MSI,
                (unsigned long *)(& tp->tg3_flags)) != 0) 
      #line 11563 
      pci_disable_msi(tp->pdev);
  }
  #line 11564 
  _tg3_flag_clear((enum TG3_FLAGS)TG3_FLAG_USING_MSI,(unsigned long *)(& tp->tg3_flags));
  #line 11565 
  _tg3_flag_clear((enum TG3_FLAGS)TG3_FLAG_USING_MSIX,(unsigned long *)(& tp->tg3_flags));
  #line 11566 
  _tg3_flag_clear((enum TG3_FLAGS)TG3_FLAG_ENABLE_RSS,(unsigned long *)(& tp->tg3_flags));
  #line 11567 
  _tg3_flag_clear((enum TG3_FLAGS)TG3_FLAG_ENABLE_TSS,(unsigned long *)(& tp->tg3_flags));
  #line 11568 
  return;
}

#line 11570  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
static int tg3_start(struct tg3 *tp, bool reset_phy, bool test_irq, bool init)
{
  #line 11574 
  int i;
  #line 11574 
  int err;
  #line 11573 
  struct net_device *dev = tp->dev;
  #line 11580 
  tg3_ints_init(tp);
  #line 11582 
  tg3_rss_check_indir_tbl(tp);
  #line 11587 
  err = tg3_alloc_consistent(tp);
  #line 11588 
  if (err != 0) 
                #line 11589 
                goto out_ints_fini;
  #line 11591 
  tg3_napi_init(tp);
  #line 11593 
  tg3_napi_enable(tp);
  #line 11595 
  i = 0;
  #line 11595 
  while (tp->irq_cnt > (unsigned int)i) {
    #line 11596 
    err = tg3_request_irq(tp,i);
    #line 11597 
    if (err != 0) {
      #line 11598 
      i --;
      #line 11598 
      while (i >= 0) {
        {
          #line 11599 
          struct tg3_napi *tnapi = & tp->napi[i];
          #line 11601 
          cif_free_irq(tnapi->irq_vec,(void *)tnapi);
        }
        #line 11598 
        i --;
      }
      #line 11603 
      goto out_napi_fini;
    }
    #line 11595 
    i ++;
  }
  #line 11607 
  tg3_full_lock(tp,0);
  #line 11609 
  if ((int)init != 0) 
                      #line 11610 
                      tg3_ape_driver_state_change(tp,1);
  #line 11612 
  err = tg3_init_hw(tp,(_Bool)((bool)((int)reset_phy) != 0));
  #line 11613 
  if (err != 0) {
    #line 11614 
    tg3_halt(tp,0,(_Bool)1);
    #line 11615 
    tg3_free_rings(tp);
  }
  #line 11618 
  tg3_full_unlock(tp);
  #line 11620 
  if (err != 0) 
                #line 11621 
                goto out_free_irq;
  #line 11623 
  if ((int)test_irq != 0) {
    #line 11623 
    if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_USING_MSI,
                  (unsigned long *)(& tp->tg3_flags)) != 0) {
      #line 11624 
      err = tg3_test_msi(tp);
      #line 11626 
      if (err != 0) {
        #line 11627 
        tg3_full_lock(tp,0);
        #line 11628 
        tg3_halt(tp,0,(_Bool)1);
        #line 11629 
        tg3_free_rings(tp);
        #line 11630 
        tg3_full_unlock(tp);
        #line 11632 
        goto out_napi_fini;
      }
      #line 11635 
      if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_57765_PLUS,
                  (unsigned long *)(& tp->tg3_flags)) == 0) {
        #line 11635 
        if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_USING_MSI,
                  (unsigned long *)(& tp->tg3_flags)) != 0) {
          #line 11636 
          u32 val = (*(tp->read32))(tp,31748U);
          #line 11638 
          (*(tp->write32))(tp,31748U,val | 536870912U);
        }
      }
    }
  }
  #line 11643 
  tg3_phy_start(tp);
  #line 11645 
  tg3_hwmon_open(tp);
  #line 11647 
  tg3_full_lock(tp,0);
  #line 11649 
  tg3_timer_start(tp);
  #line 11650 
  _tg3_flag_set((enum TG3_FLAGS)TG3_FLAG_INIT_COMPLETE,(unsigned long *)(& tp->tg3_flags));
  #line 11651 
  tg3_enable_ints(tp);
  #line 11653 
  tg3_ptp_resume(tp);
  #line 11655 
  tg3_full_unlock(tp);
  #line 11657 
  netif_tx_start_all_queues(dev);
  #line 11663 
  if ((dev->features & 2199023255552ULL) != 0ULL) 
                                                  #line 11664 
                                                  tg3_set_loopback(dev,dev->features);
  #line 11666 
  return 0;
  #line 11668 
  out_free_irq: 
                #line 11668 
  ;
  #line 11669 
  i = (int)(tp->irq_cnt + 4294967295U);
  #line 11669 
  while (i >= 0) {
    {
      #line 11670 
      struct tg3_napi *tnapi_0 = & tp->napi[i];
      #line 11671 
      cif_free_irq(tnapi_0->irq_vec,(void *)tnapi_0);
    }
    #line 11669 
    i --;
  }
  #line 11674 
  out_napi_fini: 
                 #line 11674 
  ;
  #line 11675 
  tg3_napi_disable(tp);
  #line 11676 
  tg3_napi_fini(tp);
  #line 11677 
  tg3_free_consistent(tp);
  #line 11679 
  out_ints_fini: 
                 #line 11679 
  ;
  #line 11680 
  tg3_ints_fini(tp);
  #line 11682 
  return err;
}

#line 11685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
static void tg3_stop(struct tg3 *tp)
{
  #line 11687 
  int i;
  #line 11689 
  tg3_reset_task_cancel(tp);
  #line 11690 
  tg3_netif_stop(tp);
  #line 11692 
  tg3_timer_stop(tp);
  #line 11694 
  tg3_hwmon_close(tp);
  #line 11696 
  tg3_phy_stop(tp);
  #line 11698 
  tg3_full_lock(tp,1);
  #line 11700 
  tg3_disable_ints(tp);
  #line 11702 
  tg3_halt(tp,0,(_Bool)1);
  #line 11703 
  tg3_free_rings(tp);
  #line 11704 
  _tg3_flag_clear((enum TG3_FLAGS)TG3_FLAG_INIT_COMPLETE,(unsigned long *)(& tp->tg3_flags));
  #line 11706 
  tg3_full_unlock(tp);
  #line 11708 
  i = (int)(tp->irq_cnt + 4294967295U);
  #line 11708 
  while (i >= 0) {
    {
      #line 11709 
      struct tg3_napi *tnapi = & tp->napi[i];
      #line 11710 
      cif_free_irq(tnapi->irq_vec,(void *)tnapi);
    }
    #line 11708 
    i --;
  }
  #line 11713 
  tg3_ints_fini(tp);
  #line 11715 
  tg3_napi_fini(tp);
  #line 11717 
  tg3_free_consistent(tp);
  #line 11718 
  return;
}

#line 11720  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
static int tg3_open(struct net_device *dev)
{
  #line 11723 
  int err;
  #line 11722 
  struct tg3 *tp = netdev_priv(dev);
  #line 11725 
  if ((int)tp->pcierr_recovery != 0) {
    #line 11726 
    netdev_err(dev,(char *)"Failed to open device. PCI error recovery ");
    #line 11728 
    return -11;
  }
  #line 11731 
  if (tp->fw_needed != (char *)0) {
    #line 11732 
    err = tg3_request_firmware(tp);
    #line 11733 
    if (tp->pci_chip_rev_id >> 12 == 358246U) {
      #line 11734 
      if (err != 0) {
        #line 11735 
        netdev_warn(tp->dev,(char *)"EEE capability disabled\n");
        #line 11736 
        tp->phy_flags &= 4294705151U;
      }
      else 
        #line 11737 
        if ((tp->phy_flags & 262144U) == 0U) {
          #line 11738 
          netdev_warn(tp->dev,(char *)"EEE capability restored\n");
          #line 11739 
          tp->phy_flags |= 262144U;
        }
    }
    else 
      #line 11741 
      if (tp->pci_chip_rev_id == 0U) {
        #line 11742 
        if (err != 0) 
                      #line 11743 
                      return err;
      }
      else 
        #line 11744 
        if (err != 0) {
          #line 11745 
          netdev_warn(tp->dev,(char *)"TSO capability disabled\n");
          #line 11746 
          _tg3_flag_clear((enum TG3_FLAGS)TG3_FLAG_TSO_CAPABLE,(unsigned long *)(& tp->tg3_flags));
        }
        else {
          #line 11747 
          if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_TSO_CAPABLE,
                  (unsigned long *)(& tp->tg3_flags)) == 0) {
            #line 11748 
            netdev_notice(tp->dev,(char *)"TSO capability restored\n");
            #line 11749 
            _tg3_flag_set((enum TG3_FLAGS)TG3_FLAG_TSO_CAPABLE,(unsigned long *)(& tp->tg3_flags));
          }
        }
  }
  #line 11753 
  tg3_carrier_off(tp);
  #line 11755 
  err = tg3_power_up(tp);
  #line 11756 
  if (err != 0) 
                #line 11757 
                return err;
  #line 11759 
  tg3_full_lock(tp,0);
  #line 11761 
  tg3_disable_ints(tp);
  #line 11762 
  _tg3_flag_clear((enum TG3_FLAGS)TG3_FLAG_INIT_COMPLETE,(unsigned long *)(& tp->tg3_flags));
  #line 11764 
  tg3_full_unlock(tp);
  #line 11766 
  err = tg3_start(tp,(_Bool)((tp->phy_flags & 1048576U) == 0U),(_Bool)1,(_Bool)1);
  #line 11769 
  if (err != 0) {
    #line 11770 
    tg3_frob_aux_power(tp,(_Bool)0);
    #line 11771 
    pci_set_power_state(tp->pdev,3);
  }
  #line 11774 
  return err;
}

#line 11777  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
static int tg3_close(struct net_device *dev)
{
  #line 11779 
  struct tg3 *tp = netdev_priv(dev);
  #line 11781 
  if ((int)tp->pcierr_recovery != 0) {
    #line 11782 
    netdev_err(dev,(char *)"Failed to close device. PCI error recovery ");
    #line 11784 
    return -11;
  }
  #line 11787 
  tg3_stop(tp);
  #line 11789 
  if ((int)pci_device_is_present(tp->pdev) != 0) {
    #line 11790 
    tg3_power_down_prepare(tp);
    #line 11792 
    tg3_carrier_off(tp);
  }
  #line 11794 
  return 0;
}

#line 11797  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
__inline static u64 get_stat64(tg3_stat64_t *val)
{
  #line 11799 
  return ((unsigned long long)val->high << 32) | (unsigned long long)val->low;
}

#line 11802  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
static u64 tg3_calc_crc_errors(struct tg3 *tp)
{
  #line 11804 
  struct tg3_hw_stats *hw_stats = tp->hw_stats;
  #line 11806 
  if ((tp->phy_flags & 16U) == 0U && (tp->pci_chip_rev_id >> 12 == 7U || tp->pci_chip_rev_id >> 12 == 0U)) {
    #line 11809 
    u32 val;
    #line 11811 
    if (tg3_readphy(tp,30,& val) == 0) {
      #line 11812 
      tg3_writephy(tp,30,val | 32768U);
      #line 11814 
      tg3_readphy(tp,20,& val);
    }
    else 
         #line 11816 
         val = 0U;
    #line 11818 
    tp->__anonCompField_tg3_209.phy_crc_errors += (unsigned long)val;
    #line 11820 
    return (unsigned long long)tp->__anonCompField_tg3_209.phy_crc_errors;
  }
  #line 11823 
  return get_stat64(& hw_stats->rx_fcs_errors);
}

#line 11830  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
static void tg3_get_estats(struct tg3 *tp, struct tg3_ethtool_stats *estats)
{
  #line 11832 
  struct tg3_ethtool_stats *old_estats = & tp->estats_prev;
  #line 11833 
  struct tg3_hw_stats *hw_stats = tp->hw_stats;
  #line 11835 
  estats->rx_octets = old_estats->rx_octets + get_stat64(& hw_stats->rx_octets);
  #line 11836 
  estats->rx_fragments = old_estats->rx_fragments + get_stat64(& hw_stats->rx_fragments);
  #line 11837 
  estats->rx_ucast_packets = old_estats->rx_ucast_packets + get_stat64(& hw_stats->rx_ucast_packets);
  #line 11838 
  estats->rx_mcast_packets = old_estats->rx_mcast_packets + get_stat64(& hw_stats->rx_mcast_packets);
  #line 11839 
  estats->rx_bcast_packets = old_estats->rx_bcast_packets + get_stat64(& hw_stats->rx_bcast_packets);
  #line 11840 
  estats->rx_fcs_errors = old_estats->rx_fcs_errors + get_stat64(& hw_stats->rx_fcs_errors);
  #line 11841 
  estats->rx_align_errors = old_estats->rx_align_errors + get_stat64(& hw_stats->rx_align_errors);
  #line 11842 
  estats->rx_xon_pause_rcvd = old_estats->rx_xon_pause_rcvd + get_stat64(& hw_stats->rx_xon_pause_rcvd);
  #line 11843 
  estats->rx_xoff_pause_rcvd = old_estats->rx_xoff_pause_rcvd + get_stat64(& hw_stats->rx_xoff_pause_rcvd);
  #line 11844 
  estats->rx_mac_ctrl_rcvd = old_estats->rx_mac_ctrl_rcvd + get_stat64(& hw_stats->rx_mac_ctrl_rcvd);
  #line 11845 
  estats->rx_xoff_entered = old_estats->rx_xoff_entered + get_stat64(& hw_stats->rx_xoff_entered);
  #line 11846 
  estats->rx_frame_too_long_errors = old_estats->rx_frame_too_long_errors + get_stat64(& hw_stats->rx_frame_too_long_errors);
  #line 11847 
  estats->rx_jabbers = old_estats->rx_jabbers + get_stat64(& hw_stats->rx_jabbers);
  #line 11848 
  estats->rx_undersize_packets = old_estats->rx_undersize_packets + get_stat64(& hw_stats->rx_undersize_packets);
  #line 11849 
  estats->rx_in_length_errors = old_estats->rx_in_length_errors + get_stat64(& hw_stats->rx_in_length_errors);
  #line 11850 
  estats->rx_out_length_errors = old_estats->rx_out_length_errors + get_stat64(& hw_stats->rx_out_length_errors);
  #line 11851 
  estats->rx_64_or_less_octet_packets = old_estats->rx_64_or_less_octet_packets + get_stat64(& hw_stats->rx_64_or_less_octet_packets);
  #line 11852 
  estats->rx_65_to_127_octet_packets = old_estats->rx_65_to_127_octet_packets + get_stat64(& hw_stats->rx_65_to_127_octet_packets);
  #line 11853 
  estats->rx_128_to_255_octet_packets = old_estats->rx_128_to_255_octet_packets + get_stat64(& hw_stats->rx_128_to_255_octet_packets);
  #line 11854 
  estats->rx_256_to_511_octet_packets = old_estats->rx_256_to_511_octet_packets + get_stat64(& hw_stats->rx_256_to_511_octet_packets);
  #line 11855 
  estats->rx_512_to_1023_octet_packets = old_estats->rx_512_to_1023_octet_packets + get_stat64(& hw_stats->rx_512_to_1023_octet_packets);
  #line 11856 
  estats->rx_1024_to_1522_octet_packets = old_estats->rx_1024_to_1522_octet_packets + get_stat64(& hw_stats->rx_1024_to_1522_octet_packets);
  #line 11857 
  estats->rx_1523_to_2047_octet_packets = old_estats->rx_1523_to_2047_octet_packets + get_stat64(& hw_stats->rx_1523_to_2047_octet_packets);
  #line 11858 
  estats->rx_2048_to_4095_octet_packets = old_estats->rx_2048_to_4095_octet_packets + get_stat64(& hw_stats->rx_2048_to_4095_octet_packets);
  #line 11859 
  estats->rx_4096_to_8191_octet_packets = old_estats->rx_4096_to_8191_octet_packets + get_stat64(& hw_stats->rx_4096_to_8191_octet_packets);
  #line 11860 
  estats->rx_8192_to_9022_octet_packets = old_estats->rx_8192_to_9022_octet_packets + get_stat64(& hw_stats->rx_8192_to_9022_octet_packets);
  #line 11862 
  estats->tx_octets = old_estats->tx_octets + get_stat64(& hw_stats->tx_octets);
  #line 11863 
  estats->tx_collisions = old_estats->tx_collisions + get_stat64(& hw_stats->tx_collisions);
  #line 11864 
  estats->tx_xon_sent = old_estats->tx_xon_sent + get_stat64(& hw_stats->tx_xon_sent);
  #line 11865 
  estats->tx_xoff_sent = old_estats->tx_xoff_sent + get_stat64(& hw_stats->tx_xoff_sent);
  #line 11866 
  estats->tx_flow_control = old_estats->tx_flow_control + get_stat64(& hw_stats->tx_flow_control);
  #line 11867 
  estats->tx_mac_errors = old_estats->tx_mac_errors + get_stat64(& hw_stats->tx_mac_errors);
  #line 11868 
  estats->tx_single_collisions = old_estats->tx_single_collisions + get_stat64(& hw_stats->tx_single_collisions);
  #line 11869 
  estats->tx_mult_collisions = old_estats->tx_mult_collisions + get_stat64(& hw_stats->tx_mult_collisions);
  #line 11870 
  estats->tx_deferred = old_estats->tx_deferred + get_stat64(& hw_stats->tx_deferred);
  #line 11871 
  estats->tx_excessive_collisions = old_estats->tx_excessive_collisions + get_stat64(& hw_stats->tx_excessive_collisions);
  #line 11872 
  estats->tx_late_collisions = old_estats->tx_late_collisions + get_stat64(& hw_stats->tx_late_collisions);
  #line 11873 
  estats->tx_collide_2times = old_estats->tx_collide_2times + get_stat64(& hw_stats->tx_collide_2times);
  #line 11874 
  estats->tx_collide_3times = old_estats->tx_collide_3times + get_stat64(& hw_stats->tx_collide_3times);
  #line 11875 
  estats->tx_collide_4times = old_estats->tx_collide_4times + get_stat64(& hw_stats->tx_collide_4times);
  #line 11876 
  estats->tx_collide_5times = old_estats->tx_collide_5times + get_stat64(& hw_stats->tx_collide_5times);
  #line 11877 
  estats->tx_collide_6times = old_estats->tx_collide_6times + get_stat64(& hw_stats->tx_collide_6times);
  #line 11878 
  estats->tx_collide_7times = old_estats->tx_collide_7times + get_stat64(& hw_stats->tx_collide_7times);
  #line 11879 
  estats->tx_collide_8times = old_estats->tx_collide_8times + get_stat64(& hw_stats->tx_collide_8times);
  #line 11880 
  estats->tx_collide_9times = old_estats->tx_collide_9times + get_stat64(& hw_stats->tx_collide_9times);
  #line 11881 
  estats->tx_collide_10times = old_estats->tx_collide_10times + get_stat64(& hw_stats->tx_collide_10times);
  #line 11882 
  estats->tx_collide_11times = old_estats->tx_collide_11times + get_stat64(& hw_stats->tx_collide_11times);
  #line 11883 
  estats->tx_collide_12times = old_estats->tx_collide_12times + get_stat64(& hw_stats->tx_collide_12times);
  #line 11884 
  estats->tx_collide_13times = old_estats->tx_collide_13times + get_stat64(& hw_stats->tx_collide_13times);
  #line 11885 
  estats->tx_collide_14times = old_estats->tx_collide_14times + get_stat64(& hw_stats->tx_collide_14times);
  #line 11886 
  estats->tx_collide_15times = old_estats->tx_collide_15times + get_stat64(& hw_stats->tx_collide_15times);
  #line 11887 
  estats->tx_ucast_packets = old_estats->tx_ucast_packets + get_stat64(& hw_stats->tx_ucast_packets);
  #line 11888 
  estats->tx_mcast_packets = old_estats->tx_mcast_packets + get_stat64(& hw_stats->tx_mcast_packets);
  #line 11889 
  estats->tx_bcast_packets = old_estats->tx_bcast_packets + get_stat64(& hw_stats->tx_bcast_packets);
  #line 11890 
  estats->tx_carrier_sense_errors = old_estats->tx_carrier_sense_errors + get_stat64(& hw_stats->tx_carrier_sense_errors);
  #line 11891 
  estats->tx_discards = old_estats->tx_discards + get_stat64(& hw_stats->tx_discards);
  #line 11892 
  estats->tx_errors = old_estats->tx_errors + get_stat64(& hw_stats->tx_errors);
  #line 11894 
  estats->dma_writeq_full = old_estats->dma_writeq_full + get_stat64(& hw_stats->dma_writeq_full);
  #line 11895 
  estats->dma_write_prioq_full = old_estats->dma_write_prioq_full + get_stat64(& hw_stats->dma_write_prioq_full);
  #line 11896 
  estats->rxbds_empty = old_estats->rxbds_empty + get_stat64(& hw_stats->rxbds_empty);
  #line 11897 
  estats->rx_discards = old_estats->rx_discards + get_stat64(& hw_stats->rx_discards);
  #line 11898 
  estats->rx_errors = old_estats->rx_errors + get_stat64(& hw_stats->rx_errors);
  #line 11899 
  estats->rx_threshold_hit = old_estats->rx_threshold_hit + get_stat64(& hw_stats->rx_threshold_hit);
  #line 11901 
  estats->dma_readq_full = old_estats->dma_readq_full + get_stat64(& hw_stats->dma_readq_full);
  #line 11902 
  estats->dma_read_prioq_full = old_estats->dma_read_prioq_full + get_stat64(& hw_stats->dma_read_prioq_full);
  #line 11903 
  estats->tx_comp_queue_full = old_estats->tx_comp_queue_full + get_stat64(& hw_stats->tx_comp_queue_full);
  #line 11905 
  estats->ring_set_send_prod_index = old_estats->ring_set_send_prod_index + get_stat64(& hw_stats->ring_set_send_prod_index);
  #line 11906 
  estats->ring_status_update = old_estats->ring_status_update + get_stat64(& hw_stats->ring_status_update);
  #line 11907 
  estats->nic_irqs = old_estats->nic_irqs + get_stat64(& hw_stats->nic_irqs);
  #line 11908 
  estats->nic_avoided_irqs = old_estats->nic_avoided_irqs + get_stat64(& hw_stats->nic_avoided_irqs);
  #line 11909 
  estats->nic_tx_threshold_hit = old_estats->nic_tx_threshold_hit + get_stat64(& hw_stats->nic_tx_threshold_hit);
  #line 11911 
  estats->mbuf_lwm_thresh_hit = old_estats->mbuf_lwm_thresh_hit + get_stat64(& hw_stats->mbuf_lwm_thresh_hit);
  #line 11912 
  return;
}

#line 11914  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
static void tg3_get_nstats(struct tg3 *tp, struct rtnl_link_stats64 *stats)
{
  #line 11916 
  struct rtnl_link_stats64 *old_stats = & tp->net_stats_prev;
  #line 11917 
  struct tg3_hw_stats *hw_stats = tp->hw_stats;
  #line 11919 
  stats->rx_packets = ((old_stats->rx_packets + get_stat64(& hw_stats->rx_ucast_packets)) + get_stat64(& hw_stats->rx_mcast_packets)) + get_stat64(& hw_stats->rx_bcast_packets);
  #line 11924 
  stats->tx_packets = ((old_stats->tx_packets + get_stat64(& hw_stats->tx_ucast_packets)) + get_stat64(& hw_stats->tx_mcast_packets)) + get_stat64(& hw_stats->tx_bcast_packets);
  #line 11929 
  stats->rx_bytes = old_stats->rx_bytes + get_stat64(& hw_stats->rx_octets);
  #line 11931 
  stats->tx_bytes = old_stats->tx_bytes + get_stat64(& hw_stats->tx_octets);
  #line 11934 
  stats->rx_errors = old_stats->rx_errors + get_stat64(& hw_stats->rx_errors);
  #line 11936 
  stats->tx_errors = (((old_stats->tx_errors + get_stat64(& hw_stats->tx_errors)) + get_stat64(& hw_stats->tx_mac_errors)) + get_stat64(& hw_stats->tx_carrier_sense_errors)) + get_stat64(& hw_stats->tx_discards);
  #line 11942 
  stats->multicast = old_stats->multicast + get_stat64(& hw_stats->rx_mcast_packets);
  #line 11944 
  stats->collisions = old_stats->collisions + get_stat64(& hw_stats->tx_collisions);
  #line 11947 
  stats->rx_length_errors = (old_stats->rx_length_errors + get_stat64(& hw_stats->rx_frame_too_long_errors)) + get_stat64(& hw_stats->rx_undersize_packets);
  #line 11951 
  stats->rx_frame_errors = old_stats->rx_frame_errors + get_stat64(& hw_stats->rx_align_errors);
  #line 11953 
  stats->tx_aborted_errors = old_stats->tx_aborted_errors + get_stat64(& hw_stats->tx_discards);
  #line 11955 
  stats->tx_carrier_errors = old_stats->tx_carrier_errors + get_stat64(& hw_stats->tx_carrier_sense_errors);
  #line 11958 
  stats->rx_crc_errors = old_stats->rx_crc_errors + tg3_calc_crc_errors(tp);
  #line 11961 
  stats->rx_missed_errors = old_stats->rx_missed_errors + get_stat64(& hw_stats->rx_discards);
  #line 11964 
  stats->rx_dropped = (unsigned long long)tp->rx_dropped;
  #line 11965 
  stats->tx_dropped = (unsigned long long)tp->tx_dropped;
  #line 11966 
  return;
}

#line 11968  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
static int tg3_get_regs_len(struct net_device *dev)
{
  #line 11970 
  return 32768;
}

#line 11973  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
static void tg3_get_regs(struct net_device *dev, struct ethtool_regs *regs, void *_p)
{
  #line 11976 
  struct tg3 *tp = netdev_priv(dev);
  #line 11978 
  regs->version = 0U;
  #line 11980 
  memset(_p,0,32768UL);
  #line 11982 
  if ((tp->phy_flags & 1U) != 0U) 
                                  #line 11983 
                                  return;
  #line 11985 
  tg3_full_lock(tp,0);
  #line 11987 
  tg3_dump_legacy_regs(tp,(u32 *)_p);
  #line 11989 
  tg3_full_unlock(tp);
  #line 11990 
  return;
}

#line 11992  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
static int tg3_get_eeprom_len(struct net_device *dev)
{
  #line 11994 
  struct tg3 *tp = netdev_priv(dev);
  #line 11996 
  return (int)tp->nvram_size;
}

#line 11999  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
static int tg3_get_eeprom(struct net_device *dev, struct ethtool_eeprom *eeprom, u8 *data)
{
  #line 12002 
  int ret;
  #line 12003 
  u8 *pd;
  #line 12004 
  u32 i;
  #line 12004 
  u32 offset;
  #line 12004 
  u32 len;
  #line 12004 
  u32 b_offset;
  #line 12004 
  u32 b_count;
  #line 12005 
  __be32 val;
  #line 12001 
  struct tg3 *tp = netdev_priv(dev);
  #line 12002 
  int cpmu_restore = 0;
  #line 12004 
  u32 cpmu_val = 0U;
  #line 12007 
  if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_NO_NVRAM,
                  (unsigned long *)(& tp->tg3_flags)) != 0) 
    #line 12008 
    return -22;
  #line 12010 
  offset = eeprom->offset;
  #line 12011 
  len = eeprom->len;
  #line 12012 
  eeprom->len = 0U;
  #line 12014 
  eeprom->magic = 1721324970U;
  #line 12017 
  if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_CPMU_PRESENT,
                  (unsigned long *)(& tp->tg3_flags)) != 0) {
    #line 12018 
    cpmu_val = (*(tp->read32))(tp,13824U);
    #line 12019 
    if ((cpmu_val & 1536U) != 0U) {
      #line 12021 
      (*(tp->write32))(tp,13824U,cpmu_val & 4294965759U);
      #line 12024 
      cpmu_restore = 1;
    }
  }
  #line 12027 
  tg3_override_clk(tp);
  #line 12029 
  if ((offset & 3U) != 0U) {
    #line 12031 
    b_offset = offset & 3U;
    #line 12032 
    b_count = 4U - b_offset;
    #line 12033 
    if (b_count > len) 
                       #line 12035 
                       b_count = len;
    #line 12037 
    ret = tg3_nvram_read_be32(tp,offset - b_offset,& val);
    #line 12038 
    if (ret != 0) 
                  #line 12039 
                  goto eeprom_done;
    #line 12040 
    memcpy((void *)data,(void *)((char *)(& val) + (unsigned long)b_offset),(unsigned long)b_count);
    #line 12041 
    len -= b_count;
    #line 12042 
    offset += b_count;
    #line 12043 
    eeprom->len += b_count;
  }
  #line 12047 
  pd = data + (unsigned long)eeprom->len;
  #line 12048 
  i = 0U;
  #line 12048 
  while ((len & 4294967292U) > i) {
    {
      #line 12049 
      ret = tg3_nvram_read_be32(tp,offset + i,& val);
      #line 12050 
      if (ret != 0) {
        #line 12051 
        if (i != 0U) 
                     #line 12052 
                     i += 4294967292U;
        #line 12053 
        eeprom->len += i;
        #line 12054 
        goto eeprom_done;
      }
      #line 12056 
      memcpy((void *)(pd + (unsigned long)i),(void *)(& val),4UL);
      #line 12057 
      if ((int)need_resched() != 0) {
        #line 12058 
        if (signal_pending(ldv_get_current()) != 0) {
          #line 12059 
          eeprom->len += i;
          #line 12060 
          ret = -4;
          #line 12061 
          goto eeprom_done;
        }
        #line 12063 
        ___might_sleep((char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c",12063,0);
        #line 12063 
        _cond_resched();
      }
    }
    #line 12048 
    i += 4U;
  }
  #line 12066 
  eeprom->len += i;
  #line 12068 
  if ((len & 3U) != 0U) {
    #line 12070 
    pd = data + (unsigned long)eeprom->len;
    #line 12071 
    b_count = len & 3U;
    #line 12072 
    b_offset = (offset + len) - b_count;
    #line 12073 
    ret = tg3_nvram_read_be32(tp,b_offset,& val);
    #line 12074 
    if (ret != 0) 
                  #line 12075 
                  goto eeprom_done;
    #line 12076 
    memcpy((void *)pd,(void *)(& val),(unsigned long)b_count);
    #line 12077 
    eeprom->len += b_count;
  }
  #line 12079 
  ret = 0;
  #line 12081 
  eeprom_done: 
               #line 12081 
  ;
  #line 12083 
  tg3_restore_clk(tp);
  #line 12084 
  if (cpmu_restore != 0) 
                         #line 12085 
                         (*(tp->write32))(tp,13824U,cpmu_val);
  #line 12087 
  return ret;
}

#line 12090  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
static int tg3_set_eeprom(struct net_device *dev, struct ethtool_eeprom *eeprom, u8 *data)
{
  #line 12093 
  int ret;
  #line 12094 
  u32 offset;
  #line 12094 
  u32 len;
  #line 12094 
  u32 b_offset;
  #line 12094 
  u32 odd_len;
  #line 12095 
  u8 *buf;
  #line 12096 
  __be32 end;
  #line 12092 
  struct tg3 *tp = netdev_priv(dev);
  #line 12096 
  __be32 start = 0U;
  #line 12098 
  if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_NO_NVRAM,
                  (unsigned long *)(& tp->tg3_flags)) != 0) 
    #line 12100 
    return -22;
  else 
    #line 12098 
    if (eeprom->magic != 1721324970U) 
                                      #line 12100 
                                      return -22;
  #line 12102 
  offset = eeprom->offset;
  #line 12103 
  len = eeprom->len;
  #line 12105 
  b_offset = offset & 3U;
  #line 12105 
  if (b_offset != 0U) {
    #line 12107 
    ret = tg3_nvram_read_be32(tp,offset - b_offset,& start);
    #line 12108 
    if (ret != 0) 
                  #line 12109 
                  return ret;
    #line 12110 
    len += b_offset;
    #line 12111 
    offset &= 4294967292U;
    #line 12112 
    if (len <= 3U) 
                   #line 12113 
                   len = 4U;
  }
  #line 12116 
  odd_len = 0U;
  #line 12117 
  if ((len & 3U) != 0U) {
    #line 12119 
    odd_len = 1U;
    #line 12120 
    len = (len + 3U) & 4294967292U;
    #line 12121 
    ret = tg3_nvram_read_be32(tp,(offset + len) + 4294967292U,& end);
    #line 12122 
    if (ret != 0) 
                  #line 12123 
                  return ret;
  }
  #line 12126 
  buf = data;
  #line 12127 
  if (b_offset != 0U || odd_len != 0U) {
    #line 12128 
    buf = (u8 *)kmalloc((unsigned long)len,3264U);
    #line 12129 
    if (buf == (u8 *)0U) 
                         #line 12130 
                         return -12;
    #line 12131 
    if (b_offset != 0U) 
                        #line 12132 
                        memcpy((void *)buf,(void *)(& start),4UL);
    #line 12133 
    if (odd_len != 0U) 
                       #line 12134 
                       memcpy((void *)(buf + ((unsigned long)len + 18446744073709551612U)),(void *)(& end),4UL);
    #line 12135 
    memcpy((void *)(buf + (unsigned long)b_offset),(void *)data,(unsigned long)eeprom->len);
  }
  #line 12138 
  ret = tg3_nvram_write_block(tp,offset,len,buf);
  #line 12140 
  if (buf != data) 
                   #line 12141 
                   kfree((void *)buf);
  #line 12143 
  return ret;
}

#line 12146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
static int tg3_get_link_ksettings(struct net_device *dev, struct ethtool_link_ksettings *cmd)
{
  #line 12150 
  u32 supported;
  #line 12150 
  u32 advertising;
  #line 12149 
  struct tg3 *tp = netdev_priv(dev);
  #line 12152 
  if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_USE_PHYLIB,
                  (unsigned long *)(& tp->tg3_flags)) != 0) {
    #line 12153 
    struct phy_device *phydev;
    #line 12154 
    if ((tp->phy_flags & 2U) == 0U) 
                                    #line 12155 
                                    return -11;
    #line 12156 
    phydev = mdiobus_get_phy(tp->mdio_bus,(int)tp->phy_addr);
    #line 12157 
    phy_ethtool_ksettings_get(phydev,cmd);
    #line 12159 
    return 0;
  }
  #line 12162 
  supported = 64U;
  #line 12164 
  if ((tp->phy_flags & 128U) == 0U) 
                                    #line 12165 
                                    supported |= 48U;
  #line 12168 
  if ((tp->phy_flags & 48U) == 0U) {
    #line 12169 
    supported |= 143U;
    #line 12174 
    cmd->base.port = (unsigned char)0U;
  }
  else {
    #line 12176 
    supported |= 1024U;
    #line 12177 
    cmd->base.port = (unsigned char)3U;
  }
  #line 12179 
  ethtool_convert_legacy_u32_to_link_mode((unsigned long *)(& cmd->link_modes.supported),supported);
  #line 12182 
  advertising = tp->link_config.advertising;
  #line 12183 
  if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_PAUSE_AUTONEG,
                  (unsigned long *)(& tp->tg3_flags)) != 0) 
    #line 12184 
    if (((int)tp->link_config.flowctrl & 2) != 0) 
      #line 12185 
      if (((int)tp->link_config.flowctrl & 1) != 0) 
                                                    #line 12186 
                                                    advertising |= 8192U; else 
                                                                    #line 12188 
                                                                    advertising |= 24576U;
    else 
      #line 12191 
      if (((int)tp->link_config.flowctrl & 1) != 0) 
                                                    #line 12192 
                                                    advertising |= 16384U;
  #line 12195 
  ethtool_convert_legacy_u32_to_link_mode((unsigned long *)(& cmd->link_modes.advertising),advertising);
  #line 12198 
  if ((int)netif_running(dev) != 0) {
    #line 12198 
    if ((int)tp->link_up != 0) {
      #line 12199 
      cmd->base.speed = tp->link_config.active_speed;
      #line 12200 
      cmd->base.duplex = tp->link_config.active_duplex;
      #line 12201 
      ethtool_convert_legacy_u32_to_link_mode((unsigned long *)(& cmd->link_modes.lp_advertising),tp->link_config.rmt_adv);
      #line 12205 
      if ((tp->phy_flags & 48U) == 0U) 
        #line 12206 
        if ((tp->phy_flags & 2097152U) != 0U) 
                                              #line 12207 
                                              cmd->base.eth_tp_mdix = (unsigned char)2U; else 
                                                                    #line 12209 
                                                                    cmd->base.eth_tp_mdix = (unsigned char)1U;
    }
    else 
         #line 12198 
         goto _LAND;
  }
  else {
    #line 12198 
    _LAND: {
             #line 12212 
             cmd->base.speed = 4294967295U;
             #line 12213 
             cmd->base.duplex = (unsigned char)255U;
             #line 12214 
             cmd->base.eth_tp_mdix = (unsigned char)0U;
           }
  }
  #line 12216 
  cmd->base.phy_address = tp->phy_addr;
  #line 12217 
  cmd->base.autoneg = tp->link_config.autoneg;
  #line 12218 
  return 0;
}

#line 12221  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
static int tg3_set_link_ksettings(struct net_device *dev, struct ethtool_link_ksettings *cmd)
{
  #line 12226 
  u32 advertising;
  #line 12224 
  struct tg3 *tp = netdev_priv(dev);
  #line 12225 
  u32 speed = cmd->base.speed;
  #line 12228 
  if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_USE_PHYLIB,
                  (unsigned long *)(& tp->tg3_flags)) != 0) {
    #line 12229 
    struct phy_device *phydev;
    #line 12230 
    if ((tp->phy_flags & 2U) == 0U) 
                                    #line 12231 
                                    return -11;
    #line 12232 
    phydev = mdiobus_get_phy(tp->mdio_bus,(int)tp->phy_addr);
    #line 12233 
    return phy_ethtool_ksettings_set(phydev,cmd);
  }
  #line 12236 
  if ((unsigned int)cmd->base.autoneg > 1U) 
                                            #line 12238 
                                            return -22;
  #line 12240 
  if (((unsigned int)cmd->base.autoneg == 0U && (unsigned int)cmd->base.duplex != 1U) && (unsigned int)cmd->base.duplex != 0U) 
    #line 12243 
    return -22;
  #line 12245 
  ethtool_convert_link_mode_to_legacy_u32(& advertising,(unsigned long *)(& cmd->link_modes.advertising));
  #line 12248 
  if ((unsigned int)cmd->base.autoneg == 1U) {
    #line 12249 
    u32 mask = 24640U;
    #line 12253 
    if ((tp->phy_flags & 128U) == 0U) 
                                      #line 12254 
                                      mask |= 48U;
    #line 12257 
    if ((tp->phy_flags & 48U) == 0U) 
                                     #line 12258 
                                     mask |= 143U; else 
                                                        #line 12264 
                                                        mask |= 1024U;
    #line 12266 
    if ((~ mask & advertising) != 0U) 
                                      #line 12267 
                                      return -22;
    #line 12269 
    mask &= 63U;
    #line 12276 
    advertising &= mask;
  }
  else 
    #line 12278 
    if ((tp->phy_flags & 48U) != 0U) {
      #line 12279 
      if (speed != 1000U) 
                          #line 12280 
                          return -22;
      #line 12282 
      if ((unsigned int)cmd->base.duplex != 1U) 
                                                #line 12283 
                                                return -22;
    }
    else 
      #line 12285 
      if (speed != 100U && speed != 10U) 
                                         #line 12287 
                                         return -22;
  #line 12291 
  tg3_full_lock(tp,0);
  #line 12293 
  tp->link_config.autoneg = cmd->base.autoneg;
  #line 12294 
  if ((unsigned int)cmd->base.autoneg == 1U) {
    #line 12295 
    tp->link_config.advertising = advertising | 64U;
    #line 12297 
    tp->link_config.speed = 4294967295U;
    #line 12298 
    tp->link_config.duplex = (unsigned char)255U;
  }
  else {
    #line 12300 
    tp->link_config.advertising = 0U;
    #line 12301 
    tp->link_config.speed = speed;
    #line 12302 
    tp->link_config.duplex = cmd->base.duplex;
  }
  #line 12305 
  tp->phy_flags |= 8U;
  #line 12307 
  tg3_warn_mgmt_link_flap(tp);
  #line 12309 
  if ((int)netif_running(dev) != 0) 
                                    #line 12310 
                                    tg3_setup_phy(tp,(_Bool)1);
  #line 12312 
  tg3_full_unlock(tp);
  #line 12314 
  return 0;
}

#line 12317  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
static void tg3_get_drvinfo(struct net_device *dev, struct ethtool_drvinfo *info)
{
  #line 12319 
  struct tg3 *tp = netdev_priv(dev);
  #line 12321 
  strlcpy((char *)(& info->driver),(char *)"tg3",32UL);
  #line 12322 
  strlcpy((char *)(& info->version),(char *)"3",32UL);
  #line 12323 
  strlcpy((char *)(& info->fw_version),(char *)(& tp->fw_ver),32UL);
  #line 12324 
  ;
  #line 12324 
  strlcpy((char *)(& info->bus_info),pci_name(tp->pdev),32UL);
  #line 12325 
  return;
}

#line 12327  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
static void tg3_get_wol(struct net_device *dev, struct ethtool_wolinfo *wol)
{
  #line 12329 
  struct tg3 *tp = netdev_priv(dev);
  #line 12331 
  if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_WOL_CAP,
                  (unsigned long *)(& tp->tg3_flags)) != 0) {
    #line 12331 
    if ((int)device_can_wakeup(& (tp->pdev)->dev) != 0) 
                                                        #line 12332 
                                                        wol->supported = 32U; else 
                                                                    #line 12334 
                                                                    wol->supported = 0U;
  }
  else 
       #line 12334 
       wol->supported = 0U;
  #line 12335 
  wol->wolopts = 0U;
  #line 12336 
  if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_WOL_ENABLE,
                  (unsigned long *)(& tp->tg3_flags)) != 0) {
    #line 12336 
    if ((int)device_can_wakeup(& (tp->pdev)->dev) != 0) 
                                                        #line 12337 
                                                        wol->wolopts = 32U;
  }
  #line 12338 
  memset((void *)(& wol->sopass),0,6UL);
  #line 12339 
  return;
}

#line 12341  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
static int tg3_set_wol(struct net_device *dev, struct ethtool_wolinfo *wol)
{
  #line 12343 
  struct tg3 *tp = netdev_priv(dev);
  #line 12344 
  struct device *dp = & (tp->pdev)->dev;
  #line 12346 
  if ((wol->wolopts & 4294967263U) != 0U) 
                                          #line 12347 
                                          return -22;
  #line 12348 
  if ((wol->wolopts & 32U) != 0U) {
    #line 12348 
    if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_WOL_CAP,
                  (unsigned long *)(& tp->tg3_flags)) == 0) 
      #line 12350 
      return -22;
    else {
      #line 12349 
      if (! device_can_wakeup(dp)) 
                                   #line 12350 
                                   return -22;
    }
  }
  #line 12352 
  device_set_wakeup_enable(dp,(_Bool)((wol->wolopts & 32U) != 0U));
  #line 12354 
  if ((int)device_may_wakeup(dp) != 0) 
                                       #line 12355 
                                       _tg3_flag_set((enum TG3_FLAGS)TG3_FLAG_WOL_ENABLE,(unsigned long *)(& tp->tg3_flags)); else 
                                                                    #line 12357 
                                                                    _tg3_flag_clear((enum TG3_FLAGS)TG3_FLAG_WOL_ENABLE,(unsigned long *)(& tp->tg3_flags));
  #line 12359 
  return 0;
}

#line 12362  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
static u32 tg3_get_msglevel(struct net_device *dev)
{
  #line 12364 
  struct tg3 *tp = netdev_priv(dev);
  #line 12365 
  return tp->msg_enable;
}

#line 12368  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
static void tg3_set_msglevel(struct net_device *dev, u32 value)
{
  #line 12370 
  struct tg3 *tp = netdev_priv(dev);
  #line 12371 
  tp->msg_enable = value;
  #line 12372 
  return;
}

#line 12374  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
static int tg3_nway_reset(struct net_device *dev)
{
  #line 12377 
  int r;
  #line 12376 
  struct tg3 *tp = netdev_priv(dev);
  #line 12379 
  if (! netif_running(dev)) 
                            #line 12380 
                            return -11;
  #line 12382 
  if ((tp->phy_flags & 16U) != 0U) 
                                   #line 12383 
                                   return -22;
  #line 12385 
  tg3_warn_mgmt_link_flap(tp);
  #line 12387 
  if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_USE_PHYLIB,
                  (unsigned long *)(& tp->tg3_flags)) != 0) {
    #line 12388 
    if ((tp->phy_flags & 2U) == 0U) 
                                    #line 12389 
                                    return -11;
    #line 12390 
    r = phy_start_aneg(mdiobus_get_phy(tp->mdio_bus,(int)tp->phy_addr));
  }
  else {
    #line 12392 
    u32 bmcr;
    #line 12394 
    cif_spin_lock_bh_lock_of_tg3(& tp->lock);
    #line 12395 
    r = -22;
    #line 12396 
    tg3_readphy(tp,0,& bmcr);
    #line 12397 
    if (tg3_readphy(tp,0,& bmcr) == 0) 
      #line 12397 
      if ((bmcr & 4096U) != 0U || (tp->phy_flags & 131072U) != 0U) {
        #line 12400 
        tg3_writephy(tp,0,bmcr | 4608U);
        #line 12402 
        r = 0;
      }
    #line 12404 
    cif_spin_unlock_bh_lock_of_tg3(& tp->lock);
  }
  #line 12407 
  return r;
}

#line 12410  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
static void tg3_get_ringparam(struct net_device *dev, struct ethtool_ringparam *ering)
{
  #line 12412 
  struct tg3 *tp = netdev_priv(dev);
  #line 12414 
  ering->rx_max_pending = tp->rx_std_ring_mask;
  #line 12415 
  if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_JUMBO_RING_ENABLE,
                  (unsigned long *)(& tp->tg3_flags)) != 0) 
    #line 12416 
    ering->rx_jumbo_max_pending = tp->rx_jmb_ring_mask; else 
                                                             #line 12418 
                                                             ering->rx_jumbo_max_pending = 0U;
  #line 12420 
  ering->tx_max_pending = 511U;
  #line 12422 
  ering->rx_pending = tp->rx_pending;
  #line 12423 
  if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_JUMBO_RING_ENABLE,
                  (unsigned long *)(& tp->tg3_flags)) != 0) 
    #line 12424 
    ering->rx_jumbo_pending = tp->rx_jumbo_pending; else 
                                                         #line 12426 
                                                         ering->rx_jumbo_pending = 0U;
  #line 12428 
  ering->tx_pending = tp->napi[0].tx_pending;
  #line 12429 
  return;
}

#line 12431  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
static int tg3_set_ringparam(struct net_device *dev, struct ethtool_ringparam *ering)
{
  #line 12434 
  int i;
  #line 12433 
  struct tg3 *tp = netdev_priv(dev);
  #line 12434 
  int irq_sync = 0;
  #line 12434 
  int err = 0;
  #line 12435 
  bool reset_phy = (_Bool)0;
  #line 12437 
  if (((ering->rx_pending > tp->rx_std_ring_mask || ering->rx_jumbo_pending > tp->rx_jmb_ring_mask) || ering->tx_pending > 511U) || ering->tx_pending <= 17U) 
    #line 12443 
    return -22;
  else {
    #line 12440 
    if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_TSO_BUG,
                  (unsigned long *)(& tp->tg3_flags)) != 0) 
      #line 12441 
      if (ering->tx_pending <= 51U) 
                                    #line 12443 
                                    return -22;
  }
  #line 12445 
  if ((int)netif_running(dev) != 0) {
    #line 12446 
    tg3_phy_stop(tp);
    #line 12447 
    tg3_netif_stop(tp);
    #line 12448 
    irq_sync = 1;
  }
  #line 12451 
  tg3_full_lock(tp,irq_sync);
  #line 12453 
  tp->rx_pending = ering->rx_pending;
  #line 12455 
  if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_MAX_RXPEND_64,
                  (unsigned long *)(& tp->tg3_flags)) != 0) 
    #line 12455 
    if (tp->rx_pending > 63U) 
                              #line 12457 
                              tp->rx_pending = 63U;
  #line 12459 
  if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_JUMBO_RING_ENABLE,
                  (unsigned long *)(& tp->tg3_flags)) != 0) 
    #line 12460 
    tp->rx_jumbo_pending = ering->rx_jumbo_pending;
  #line 12462 
  i = 0;
  #line 12462 
  while (tp->irq_max > (unsigned int)i) {
    #line 12463 
    tp->napi[i].tx_pending = ering->tx_pending;
    #line 12462 
    i ++;
  }
  #line 12465 
  if ((int)netif_running(dev) != 0) {
    #line 12466 
    tg3_halt(tp,0,(_Bool)1);
    #line 12468 
    if ((tp->pci_chip_rev_id >> 12 == 22295U || tp->pci_chip_rev_id >> 12 == 22297U) || tp->pci_chip_rev_id >> 12 == 22304U) 
      #line 12471 
      reset_phy = (_Bool)1;
    #line 12473 
    err = tg3_restart_hw(tp,(_Bool)((bool)((int)reset_phy) != 0));
    #line 12474 
    if (err == 0) 
                  #line 12475 
                  tg3_netif_start(tp);
  }
  #line 12478 
  tg3_full_unlock(tp);
  #line 12480 
  if (irq_sync != 0 && err == 0) 
                                 #line 12481 
                                 tg3_phy_start(tp);
  #line 12483 
  return err;
}

#line 12486  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
static void tg3_get_pauseparam(struct net_device *dev, struct ethtool_pauseparam *epause)
{
  #line 12488 
  struct tg3 *tp = netdev_priv(dev);
  #line 12490 
  epause->autoneg = (unsigned int)(_tg3_flag((enum TG3_FLAGS)TG3_FLAG_PAUSE_AUTONEG,
                  (unsigned long *)(& tp->tg3_flags)) != 0);
  #line 12492 
  if (((int)tp->link_config.flowctrl & 2) != 0) 
                                                #line 12493 
                                                epause->rx_pause = 1U; else 
                                                                    #line 12495 
                                                                    epause->rx_pause = 0U;
  #line 12497 
  if (((int)tp->link_config.flowctrl & 1) != 0) 
                                                #line 12498 
                                                epause->tx_pause = 1U; else 
                                                                    #line 12500 
                                                                    epause->tx_pause = 0U;
  #line 12501 
  return;
}

#line 12503  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
static int tg3_set_pauseparam(struct net_device *dev, struct ethtool_pauseparam *epause)
{
  #line 12505 
  struct tg3 *tp = netdev_priv(dev);
  #line 12506 
  int err = 0;
  #line 12507 
  bool reset_phy = (_Bool)0;
  #line 12509 
  if ((unsigned int)tp->link_config.autoneg == 1U) 
                                                   #line 12510 
                                                   tg3_warn_mgmt_link_flap(tp);
  #line 12512 
  if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_USE_PHYLIB,
                  (unsigned long *)(& tp->tg3_flags)) != 0) {
    #line 12513 
    struct phy_device *phydev;
    #line 12515 
    phydev = mdiobus_get_phy(tp->mdio_bus,(int)tp->phy_addr);
    #line 12517 
    if (! phy_validate_pause(phydev,epause)) 
                                             #line 12518 
                                             return -22;
    #line 12520 
    tp->link_config.flowctrl = (unsigned char)0U;
    #line 12521 
    phy_set_asym_pause(phydev,(_Bool)(epause->rx_pause != 0U),(_Bool)(epause->tx_pause != 0U));
    #line 12522 
    if (epause->rx_pause != 0U) {
      #line 12523 
      tp->link_config.flowctrl = (unsigned char)((unsigned int)tp->link_config.flowctrl | 2U);
      #line 12525 
      if (epause->tx_pause != 0U) 
                                  #line 12526 
                                  tp->link_config.flowctrl = (unsigned char)((unsigned int)tp->link_config.flowctrl | 1U);
    }
    else 
      #line 12528 
      if (epause->tx_pause != 0U) 
                                  #line 12529 
                                  tp->link_config.flowctrl = (unsigned char)((unsigned int)tp->link_config.flowctrl | 1U);
    #line 12532 
    if (epause->autoneg != 0U) 
                               #line 12533 
                               _tg3_flag_set((enum TG3_FLAGS)TG3_FLAG_PAUSE_AUTONEG,(unsigned long *)(& tp->tg3_flags)); else 
                                                                    #line 12535 
                                                                    _tg3_flag_clear((enum TG3_FLAGS)TG3_FLAG_PAUSE_AUTONEG,(unsigned long *)(& tp->tg3_flags));
    #line 12537 
    if ((tp->phy_flags & 2U) != 0U) {
      #line 12538 
      if ((unsigned int)phydev->autoneg != 0U) 
                                               #line 12546 
                                               return 0;
      #line 12549 
      if (epause->autoneg == 0U) 
                                 #line 12550 
                                 tg3_setup_flow_control(tp,0U,0U);
    }
  }
  else {
    #line 12553 
    int irq_sync = 0;
    #line 12555 
    if ((int)netif_running(dev) != 0) {
      #line 12556 
      tg3_netif_stop(tp);
      #line 12557 
      irq_sync = 1;
    }
    #line 12560 
    tg3_full_lock(tp,irq_sync);
    #line 12562 
    if (epause->autoneg != 0U) 
                               #line 12563 
                               _tg3_flag_set((enum TG3_FLAGS)TG3_FLAG_PAUSE_AUTONEG,(unsigned long *)(& tp->tg3_flags)); else 
                                                                    #line 12565 
                                                                    _tg3_flag_clear((enum TG3_FLAGS)TG3_FLAG_PAUSE_AUTONEG,(unsigned long *)(& tp->tg3_flags));
    #line 12566 
    if (epause->rx_pause != 0U) 
                                #line 12567 
                                tp->link_config.flowctrl = (unsigned char)((unsigned int)tp->link_config.flowctrl | 2U); else 
                                                                    #line 12569 
                                                                    tp->link_config.flowctrl = (unsigned char)((unsigned int)tp->link_config.flowctrl & 253U);
    #line 12570 
    if (epause->tx_pause != 0U) 
                                #line 12571 
                                tp->link_config.flowctrl = (unsigned char)((unsigned int)tp->link_config.flowctrl | 1U); else 
                                                                    #line 12573 
                                                                    tp->link_config.flowctrl = (unsigned char)((unsigned int)tp->link_config.flowctrl & 254U);
    #line 12575 
    if ((int)netif_running(dev) != 0) {
      #line 12576 
      tg3_halt(tp,0,(_Bool)1);
      #line 12578 
      if ((tp->pci_chip_rev_id >> 12 == 22295U || tp->pci_chip_rev_id >> 12 == 22297U) || tp->pci_chip_rev_id >> 12 == 22304U) 
        #line 12581 
        reset_phy = (_Bool)1;
      #line 12583 
      err = tg3_restart_hw(tp,(_Bool)((bool)((int)reset_phy) != 0));
      #line 12584 
      if (err == 0) 
                    #line 12585 
                    tg3_netif_start(tp);
    }
    #line 12588 
    tg3_full_unlock(tp);
  }
  #line 12591 
  tp->phy_flags |= 8U;
  #line 12593 
  return err;
}

#line 12596  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
static int tg3_get_sset_count(struct net_device *dev, int sset)
{
  #line 12598 
  switch (sset) {
    #line 12599 
    case 0: 
            #line 12599 
    ;
    #line 12600 
    return 8;
    #line 12601 
    case 1: 
            #line 12601 
    ;
    #line 12602 
    return 72;
    #line 12603 
    default: 
             #line 12603 
    ;
    #line 12604 
    return -95;
  }
}

#line 12608  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
static int tg3_get_rxnfc(struct net_device *dev, struct ethtool_rxnfc *info, u32 *rules)
{
  #line 12611 
  struct tg3 *tp = netdev_priv(dev);
  #line 12613 
  if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_SUPPORT_MSIX,
                  (unsigned long *)(& tp->tg3_flags)) == 0) 
    #line 12614 
    return -95;
  #line 12616 
  switch (info->cmd) {
    #line 12617 
    case (__u32)45: 
                    #line 12617 
    ;
    #line 12618 
    if ((int)netif_running(tp->dev) != 0) 
                                          #line 12619 
                                          info->data = (unsigned long long)tp->rxq_cnt;
    else {
      #line 12621 
      info->data = (unsigned long long)num_online_cpus();
      #line 12622 
      if (info->data > 4ULL) 
                             #line 12623 
                             info->data = 4ULL;
    }
    #line 12626 
    return 0;
    #line 12628 
    default: 
             #line 12628 
    ;
    #line 12629 
    return -95;
  }
}

#line 12633  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
static u32 tg3_get_rxfh_indir_size(struct net_device *dev)
{
  #line 12635 
  u32 size = 0U;
  #line 12636 
  struct tg3 *tp = netdev_priv(dev);
  #line 12638 
  if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_SUPPORT_MSIX,
                  (unsigned long *)(& tp->tg3_flags)) != 0) 
    #line 12639 
    size = 128U;
  #line 12641 
  return size;
}

#line 12644  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
static int tg3_get_rxfh(struct net_device *dev, u32 *indir, u8 *key, u8 *hfunc)
{
  #line 12647 
  int i;
  #line 12646 
  struct tg3 *tp = netdev_priv(dev);
  #line 12649 
  if (hfunc != (u8 *)0U) 
                         #line 12650 
                         *hfunc = (unsigned char)1U;
  #line 12651 
  if (indir == (u32 *)0U) 
                          #line 12652 
                          return 0;
  #line 12654 
  i = 0;
  #line 12654 
  while (i <= 127) {
    #line 12655 
    *(indir + (unsigned long)i) = (unsigned int)tp->rss_ind_tbl[i];
    #line 12654 
    i ++;
  }
  #line 12657 
  return 0;
}

#line 12660  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
static int tg3_set_rxfh(struct net_device *dev, u32 *indir, u8 *key, u8 hfunc)
{
  #line 12664 
  size_t i;
  #line 12663 
  struct tg3 *tp = netdev_priv(dev);
  #line 12669 
  if (key != (u8 *)0U || (unsigned int)hfunc > 1U) 
                                                   #line 12671 
                                                   return -95;
  #line 12673 
  if (indir == (u32 *)0U) 
                          #line 12674 
                          return 0;
  #line 12676 
  i = 0UL;
  #line 12676 
  while (i <= 127UL) {
    #line 12677 
    tp->rss_ind_tbl[i] = (unsigned char)*(indir + i);
    #line 12676 
    i ++;
  }
  #line 12679 
  if (netif_running(dev)) {
    #line 12679 
    if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_ENABLE_RSS,
                  (unsigned long *)(& tp->tg3_flags)) == 0) 
      #line 12680 
      return 0;
  }
  else 
       #line 12680 
       return 0;
  #line 12685 
  tg3_full_lock(tp,0);
  #line 12686 
  tg3_rss_write_indir_tbl(tp);
  #line 12687 
  tg3_full_unlock(tp);
  #line 12689 
  return 0;
}

#line 12692  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
static void tg3_get_channels(struct net_device *dev, struct ethtool_channels *channel)
{
  #line 12695 
  struct tg3 *tp = netdev_priv(dev);
  #line 12696 
  u32 deflt_qs = (unsigned int)netif_get_num_default_rss_queues();
  #line 12698 
  channel->max_rx = tp->rxq_max;
  #line 12699 
  channel->max_tx = tp->txq_max;
  #line 12701 
  if ((int)netif_running(dev) != 0) {
    #line 12702 
    channel->rx_count = tp->rxq_cnt;
    #line 12703 
    channel->tx_count = tp->txq_cnt;
  }
  else {
    #line 12705 
    if (tp->rxq_req != 0U) 
                           #line 12706 
                           channel->rx_count = tp->rxq_req;
    else {
      #line 12708 
      u32 __UNIQUE_ID___x585;
      #line 12708 
      u32 tmp_1;
      {
        #line 12708 
        __UNIQUE_ID___x585 = deflt_qs;
        #line 12708 
        u32 __UNIQUE_ID___y586 = tp->rxq_max;
        #line 12708 
        if (__UNIQUE_ID___x585 < __UNIQUE_ID___y586) 
                                                     #line 12708 
                                                     tmp_1 = __UNIQUE_ID___x585; else 
                                                                    #line 12708 
                                                                    tmp_1 = __UNIQUE_ID___y586;
        }
      #line 12708 
      channel->rx_count = tmp_1;
    }
    #line 12710 
    if (tp->txq_req != 0U) 
                           #line 12711 
                           channel->tx_count = tp->txq_req;
    else {
      #line 12713 
      u32 __UNIQUE_ID___x587;
      #line 12713 
      u32 tmp_3;
      {
        #line 12713 
        __UNIQUE_ID___x587 = deflt_qs;
        #line 12713 
        u32 __UNIQUE_ID___y588 = tp->txq_max;
        #line 12713 
        if (__UNIQUE_ID___x587 < __UNIQUE_ID___y588) 
                                                     #line 12713 
                                                     tmp_3 = __UNIQUE_ID___x587; else 
                                                                    #line 12713 
                                                                    tmp_3 = __UNIQUE_ID___y588;
        }
      #line 12713 
      channel->tx_count = tmp_3;
    }
  }
  #line 12716 
  return;
}

#line 12717  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
static int tg3_set_channels(struct net_device *dev, struct ethtool_channels *channel)
{
  #line 12720 
  struct tg3 *tp = netdev_priv(dev);
  #line 12722 
  if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_SUPPORT_MSIX,
                  (unsigned long *)(& tp->tg3_flags)) == 0) 
    #line 12723 
    return -95;
  #line 12725 
  if (channel->rx_count > tp->rxq_max || channel->tx_count > tp->txq_max) 
    #line 12727 
    return -22;
  #line 12729 
  tp->rxq_req = channel->rx_count;
  #line 12730 
  tp->txq_req = channel->tx_count;
  #line 12732 
  if (! netif_running(dev)) 
                            #line 12733 
                            return 0;
  #line 12735 
  tg3_stop(tp);
  #line 12737 
  tg3_carrier_off(tp);
  #line 12739 
  tg3_start(tp,(_Bool)1,(_Bool)0,(_Bool)0);
  #line 12741 
  return 0;
}

#line 12744  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
static void tg3_get_strings(struct net_device *dev, u32 stringset, u8 *buf)
{
  #line 12746 
  switch (stringset) {
    #line 12747 
    case (u32)1: 
                 #line 12747 
    ;
    #line 12748 
    memcpy((void *)buf,(void *)(& ethtool_stats_keys),2304UL);
    #line 12749 
    break;
    #line 12750 
    case (u32)0: 
                 #line 12750 
    ;
    #line 12751 
    memcpy((void *)buf,(void *)(& ethtool_test_keys),256UL);
    #line 12752 
    break;
    #line 12753 
    default: 
             #line 12753 
    ;
    {
      #line 12754 
      int __ret_warn_on = 1;
      #line 12754 
      if ((long)(__ret_warn_on != 0) != 0L) {
        #line 12755 
        ldv_inline_asm();
        #line 12756 
        ldv_inline_asm();
      }
      #line 12754 
      long tmp = (long)(__ret_warn_on != 0);
    }
    #line 12755 
    break;
  }
  #line 12757 
  return;
}

#line 12759  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
static int tg3_set_phys_id(struct net_device *dev, enum ethtool_phys_id_state state)
{
  #line 12762 
  struct tg3 *tp = netdev_priv(dev);
  #line 12764 
  switch ((unsigned int)state) {
    #line 12765 
    case (unsigned int)1: 
                          #line 12765 
    ;
    #line 12766 
    return 1;
    #line 12768 
    case (unsigned int)2: 
                          #line 12768 
    ;
    #line 12769 
    (*(tp->write32))(tp,1036U,127U);
    #line 12776 
    break;
    #line 12778 
    case (unsigned int)3: 
                          #line 12778 
    ;
    #line 12779 
    (*(tp->write32))(tp,1036U,17U);
    #line 12781 
    break;
    #line 12783 
    case (unsigned int)0: 
                          #line 12783 
    ;
    #line 12784 
    (*(tp->write32))(tp,1036U,tp->led_ctrl);
    #line 12785 
    break;
  }
  #line 12788 
  return 0;
}

#line 12791  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
static void tg3_get_ethtool_stats(struct net_device *dev, struct ethtool_stats *estats, u64 *tmp_stats)
{
  #line 12794 
  struct tg3 *tp = netdev_priv(dev);
  #line 12796 
  if (tp->hw_stats != (struct tg3_hw_stats *)0) 
                                                #line 12797 
                                                tg3_get_estats(tp,(struct tg3_ethtool_stats *)tmp_stats); else 
                                                                    #line 12799 
                                                                    memset((void *)tmp_stats,0,576UL);
  #line 12800 
  return;
}

#line 12802  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
static __be32 *tg3_vpd_readblock(struct tg3 *tp, u32 *vpdlen)
{
  #line 12804 
  int i;
  #line 12805 
  __be32 *buf;
  #line 12807 
  u32 magic;
  #line 12807 
  u32 val;
  #line 12806 
  u32 offset = 0U;
  #line 12806 
  u32 len = 0U;
  #line 12809 
  if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_NO_NVRAM,
                (unsigned long *)(& tp->tg3_flags)) != 0) 
    #line 12810 
    return (__be32 *)0U;
  else {
    #line 12809 
    if (tg3_nvram_read(tp,0U,& magic) != 0) 
                                            #line 12810 
                                            return (__be32 *)0U;
  }
  #line 12812 
  if (magic == 1721324970U) {
    #line 12813 
    offset = 24U;
    #line 12813 
    while (offset <= 119U) {
      {
        #line 12816 
        if (tg3_nvram_read(tp,offset,& val) != 0) 
                                                  #line 12817 
                                                  return (__be32 *)0U;
        #line 12819 
        if (val >> 24 == 20U) 
                              #line 12821 
                              break;
      }
      #line 12814 
      offset += 12U;
    }
    #line 12824 
    if (offset != 120U) {
      #line 12825 
      len = (val & 4194303U) * 4U;
      #line 12826 
      if (tg3_nvram_read(tp,offset + 4U,& offset) != 0) 
                                                        #line 12827 
                                                        return (__be32 *)0U;
      #line 12829 
      offset = tg3_nvram_logical_addr(tp,offset);
    }
  }
  #line 12833 
  if (offset == 0U || len == 0U) {
    #line 12834 
    offset = 256U;
    #line 12835 
    len = 256U;
  }
  #line 12838 
  buf = (__be32 *)kmalloc((unsigned long)len,3264U);
  #line 12839 
  if (buf == (__be32 *)0U) 
                           #line 12840 
                           return (__be32 *)0U;
  #line 12842 
  if (magic == 1721324970U) {
    #line 12843 
    i = 0;
    #line 12843 
    while ((unsigned int)i < len) {
      #line 12848 
      if (tg3_nvram_read_be32(tp,offset + (unsigned int)i,
                            buf + (unsigned long)(i / 4)) != 0) 
        #line 12849 
        goto error;
      #line 12843 
      i += 4;
    }
  }
  else {
    #line 12852 
    u8 *ptr;
    #line 12853 
    ssize_t cnt;
    #line 12854 
    unsigned int pos = 0U;
    #line 12856 
    ptr = (u8 *)buf;
    #line 12857 
    i = 0;
    #line 12857 
    while (pos < len && i <= 2) {
      #line 12858 
      cnt = pci_read_vpd(tp->pdev,(long long)pos,(unsigned long)(len - pos),(void *)ptr);
      #line 12860 
      if (cnt == -110L || cnt == -4L) 
                                      #line 12861 
                                      cnt = 0L;
      else 
        #line 12862 
        if (cnt < 0L) 
                      #line 12863 
                      goto error;
      #line 12857 
      i ++;
      #line 12857 
      pos = (unsigned int)cnt + pos;
      #line 12857 
      ptr += (unsigned long)cnt;
    }
    #line 12865 
    if (pos != len) 
                    #line 12866 
                    goto error;
  }
  #line 12869 
  *vpdlen = len;
  #line 12871 
  return buf;
  #line 12873 
  error: 
         #line 12873 
  ;
  #line 12874 
  kfree((void *)buf);
  #line 12875 
  return (__be32 *)0U;
}

#line 12888  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
static int tg3_test_nvram(struct tg3 *tp)
{
  #line 12890 
  u32 csum;
  #line 12890 
  u32 magic;
  #line 12890 
  u32 len;
  #line 12891 
  __be32 *buf;
  #line 12892 
  int i;
  #line 12892 
  int j;
  #line 12892 
  int k;
  #line 12892 
  int size;
  #line 12892 
  int err = 0;
  #line 12894 
  if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_NO_NVRAM,
                (unsigned long *)(& tp->tg3_flags)) != 0) 
    #line 12895 
    return 0;
  #line 12897 
  if (tg3_nvram_read(tp,0U,& magic) != 0) 
                                          #line 12898 
                                          return -5;
  #line 12900 
  if (magic == 1721324970U) 
                            #line 12901 
                            size = 256;
  else 
    #line 12902 
    if ((magic & 4278190080U) == 2768240640U) 
      #line 12903 
      if ((magic & 14680064U) == 2097152U) 
        #line 12905 
        switch (magic & 2031616U) {
          #line 12906 
          case (unsigned int)0: 
                                #line 12906 
          ;
          #line 12907 
          size = 20;
          #line 12908 
          break;
          #line 12909 
          case (unsigned int)131072: 
                                     #line 12909 
          ;
          #line 12910 
          size = 24;
          #line 12911 
          break;
          #line 12912 
          case (unsigned int)196608: 
                                     #line 12912 
          ;
          #line 12913 
          size = 28;
          #line 12914 
          break;
          #line 12915 
          case (unsigned int)262144: 
                                     #line 12915 
          ;
          #line 12916 
          size = 32;
          #line 12917 
          break;
          #line 12918 
          case (unsigned int)327680: 
                                     #line 12918 
          ;
          #line 12919 
          size = 36;
          #line 12920 
          break;
          #line 12921 
          case (unsigned int)393216: 
                                     #line 12921 
          ;
          #line 12922 
          size = 80;
          #line 12923 
          break;
          #line 12924 
          default: 
                   #line 12924 
          ;
          #line 12925 
          return -5;
        }
      else 
           #line 12928 
           return 0;
    else 
      #line 12929 
      if ((magic & 65535U) == 43981U) 
                                      #line 12930 
                                      size = 32; else 
                                                      #line 12932 
                                                      return -5;
  #line 12934 
  buf = (__be32 *)kmalloc((unsigned long)size,3264U);
  #line 12935 
  if (buf == (__be32 *)0U) 
                           #line 12936 
                           return -12;
  #line 12938 
  err = -5;
  #line 12939 
  i = 0;
  #line 12939 
  j = 0;
  #line 12939 
  while (i < size) {
    #line 12940 
    err = tg3_nvram_read_be32(tp,(unsigned int)i,buf + (unsigned long)j);
    #line 12941 
    if (err != 0) 
                  #line 12942 
                  break;
    #line 12939 
    i += 4;
    #line 12939 
    j ++;
  }
  #line 12944 
  if (i < size) 
                #line 12945 
                goto out;
  #line 12948 
  magic = __builtin_bswap32(*buf);
  #line 12949 
  if ((magic & 4278190080U) == 2768240640U) {
    #line 12951 
    u8 *buf8 = (u8 *)buf;
    #line 12951 
    u8 csum8 = (unsigned char)0U;
    #line 12953 
    if ((magic & 2031616U) == 131072U) {
      #line 12956 
      i = 0;
      #line 12956 
      while (i <= 15) {
        #line 12957 
        csum8 = (unsigned char)((int)*(buf8 + (unsigned long)i) + (int)csum8);
        #line 12956 
        i ++;
      }
      #line 12958 
      i = 20;
      #line 12958 
      while (i < size) {
        #line 12959 
        csum8 = (unsigned char)((int)*(buf8 + (unsigned long)i) + (int)csum8);
        #line 12958 
        i ++;
      }
    }
    else {
      #line 12961 
      i = 0;
      #line 12961 
      while (i < size) {
        #line 12962 
        csum8 = (unsigned char)((int)*(buf8 + (unsigned long)i) + (int)csum8);
        #line 12961 
        i ++;
      }
    }
    #line 12965 
    if ((unsigned int)csum8 == 0U) {
      #line 12966 
      err = 0;
      #line 12967 
      goto out;
    }
    #line 12970 
    err = -5;
    #line 12971 
    goto out;
  }
  #line 12974 
  if ((magic & 65535U) == 43981U) {
    #line 12976 
    u8 data[28U];
    #line 12977 
    u8 parity[28U];
    #line 12978 
    u8 *buf8_0 = (u8 *)buf;
    #line 12981 
    i = 0;
    #line 12981 
    j = 0;
    #line 12981 
    k = 0;
    #line 12981 
    while (i <= 31) {
      {
        #line 13001 
        int tmp_5;
        #line 12982 
        if (i == 0 || i == 8) {
          #line 12983 
          int l;
          #line 12984 
          u8 msk;
          #line 12986 
          l = 0;
          #line 12986 
          msk = (unsigned char)128U;
          #line 12986 
          while (l <= 6) {
            #line 12987 
            int tmp_2;
            #line 12987 
            tmp_2 = k;
            #line 12987 
            k ++;
            #line 12987 
            parity[tmp_2] = (unsigned char)((int)*(buf8_0 + (unsigned long)i) & (int)msk);
            #line 12986 
            l ++;
            #line 12986 
            msk = (unsigned char)((int)msk >> 1);
          }
          #line 12988 
          i ++;
        }
        else 
          #line 12989 
          if (i == 16) {
            #line 12990 
            int l_0;
            #line 12991 
            u8 msk_0;
            #line 12993 
            l_0 = 0;
            #line 12993 
            msk_0 = (unsigned char)32U;
            #line 12993 
            while (l_0 <= 5) {
              #line 12994 
              int tmp_3;
              #line 12994 
              tmp_3 = k;
              #line 12994 
              k ++;
              #line 12994 
              parity[tmp_3] = (unsigned char)((int)*(buf8_0 + (unsigned long)i) & (int)msk_0);
              #line 12993 
              l_0 ++;
              #line 12993 
              msk_0 = (unsigned char)((int)msk_0 >> 1);
            }
            #line 12995 
            i ++;
            #line 12997 
            l_0 = 0;
            #line 12997 
            msk_0 = (unsigned char)128U;
            #line 12997 
            while (l_0 <= 7) {
              #line 12998 
              int tmp_4;
              #line 12998 
              tmp_4 = k;
              #line 12998 
              k ++;
              #line 12998 
              parity[tmp_4] = (unsigned char)((int)*(buf8_0 + (unsigned long)i) & (int)msk_0);
              #line 12997 
              l_0 ++;
              #line 12997 
              msk_0 = (unsigned char)((int)msk_0 >> 1);
            }
            #line 12999 
            i ++;
          }
        #line 13001 
        tmp_5 = j;
        #line 13001 
        j ++;
        #line 13001 
        data[tmp_5] = *(buf8_0 + (unsigned long)i);
      }
      #line 12981 
      i ++;
    }
    #line 13004 
    err = -5;
    #line 13005 
    i = 0;
    #line 13005 
    while (i <= 27) {
      {
        #line 13006 
        int tmp_7;
        #line 13006 
        if (0 != 0) 
                    #line 13006 
                    tmp_7 = (((((((((unsigned long long)data[i] & 1ULL) != 0ULL) + (((unsigned long long)data[i] & 2ULL) != 0ULL)) + (((unsigned long long)data[i] & 4ULL) != 0ULL)) + (((unsigned long long)data[i] & 8ULL) != 0ULL)) + (((unsigned long long)data[i] & 16ULL) != 0ULL)) + (((unsigned long long)data[i] & 32ULL) != 0ULL)) + (((unsigned long long)data[i] & 64ULL) != 0ULL)) + (((unsigned long long)data[i] & 128ULL) != 0ULL);
        else {
          #line 13006 
          tmp_7 = (int)((unsigned char)__arch_hweight8((unsigned int)data[i]));
        }
        #line 13006 
        u8 hw8 = (unsigned char)tmp_7;
        #line 13008 
        if (((int)hw8 & 1) != 0 && (unsigned int)parity[i] != 0U) 
                                                                  #line 13009 
                                                                  goto out;
        else 
          #line 13010 
          if (((int)hw8 & 1) == 0 && (unsigned int)parity[i] == 0U) 
                                                                    #line 13011 
                                                                    goto out;
      }
      #line 13005 
      i ++;
    }
    #line 13013 
    err = 0;
    #line 13014 
    goto out;
  }
  #line 13017 
  err = -5;
  #line 13020 
  csum = calc_crc((unsigned char *)buf,16);
  #line 13021 
  if (*(buf + 4U) != csum) 
                           #line 13022 
                           goto out;
  #line 13025 
  csum = calc_crc((unsigned char *)(buf + 29U),136);
  #line 13026 
  if (*(buf + 63U) != csum) 
                            #line 13027 
                            goto out;
  #line 13029 
  kfree((void *)buf);
  #line 13031 
  buf = tg3_vpd_readblock(tp,& len);
  #line 13032 
  if (buf == (__be32 *)0U) 
                           #line 13033 
                           return -12;
  #line 13035 
  i = pci_vpd_find_tag((u8 *)buf,0U,len,(unsigned char)144);
  #line 13036 
  if (i > 0) {
    #line 13037 
    j = (int)pci_vpd_lrdt_size((u8 *)buf + (unsigned long)i);
    #line 13038 
    if (j < 0) 
               #line 13039 
               goto out;
    #line 13041 
    if ((unsigned int)((i + 3) + j) > len) 
                                           #line 13042 
                                           goto out;
    #line 13044 
    i += 3;
    #line 13045 
    j = pci_vpd_find_info_keyword((u8 *)buf,(unsigned int)i,(unsigned int)j,(char *)"RV");
    #line 13047 
    if (j > 0) {
      #line 13048 
      u8 csum8_0 = (unsigned char)0U;
      #line 13050 
      j += 3;
      #line 13052 
      i = 0;
      #line 13052 
      while (i <= j) {
        #line 13053 
        csum8_0 = (unsigned char)((int)*((u8 *)buf + (unsigned long)i) + (int)csum8_0);
        #line 13052 
        i ++;
      }
      #line 13055 
      if ((unsigned int)csum8_0 != 0U) 
                                       #line 13056 
                                       goto out;
    }
  }
  #line 13060 
  err = 0;
  #line 13062 
  out: 
       #line 13062 
  ;
  #line 13063 
  kfree((void *)buf);
  #line 13064 
  return err;
}

#line 13070  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
static int tg3_test_link(struct tg3 *tp)
{
  #line 13072 
  int i;
  #line 13072 
  int max;
  #line 13074 
  if (! netif_running(tp->dev)) 
                                #line 13075 
                                return -19;
  #line 13077 
  if ((tp->phy_flags & 48U) != 0U) 
                                   #line 13078 
                                   max = 2; else 
                                                 #line 13080 
                                                 max = 6;
  #line 13082 
  i = 0;
  #line 13082 
  while (i < max) {
    {
      #line 13083 
      if ((int)tp->link_up != 0) 
                                 #line 13084 
                                 return 0;
      #line 13086 
      if (msleep_interruptible(1000U) != 0UL) 
                                              #line 13087 
                                              break;
    }
    #line 13082 
    i ++;
  }
  #line 13090 
  return -5;
}

#line 13094  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
static int tg3_test_registers(struct tg3 *tp)
{
  #line 13096 
  int i;
  #line 13096 
  int is_5705;
  #line 13096 
  int is_5750;
  #line 13097 
  u32 offset;
  #line 13097 
  u32 read_mask;
  #line 13097 
  u32 write_mask;
  #line 13097 
  u32 val;
  #line 13097 
  u32 save_val;
  #line 13097 
  u32 read_val;
  #line 13107 
  struct __anonstruct_reg_tbl_1020 reg_tbl[61U] = {{.offset = (unsigned short)1024U, .flags = (unsigned short)2U, .read_mask = 0U, .write_mask = 15691660U}, {.offset = (unsigned short)1024U, .flags = (unsigned short)1U, .read_mask = 0U, .write_mask = 32467852U}, {.offset = (unsigned short)1028U, .flags = (unsigned short)2U, .read_mask = 58720519U, .write_mask = 0U}, {.offset = (unsigned short)1028U, .flags = (unsigned short)1U, .read_mask = 58720512U, .write_mask = 0U}, {.offset = (unsigned short)1040U, .flags = (unsigned short)0U, .read_mask = 0U, .write_mask = 65535U}, {.offset = (unsigned short)1044U, .flags = (unsigned short)0U, .read_mask = 0U, .write_mask = 4294967295U}, {.offset = (unsigned short)1084U, .flags = (unsigned short)0U, .read_mask = 0U, .write_mask = 65535U}, {.offset = (unsigned short)1116U, .flags = (unsigned short)0U, .read_mask = 0U, .write_mask = 112U}, {.offset = (unsigned short)1124U, .flags = (unsigned short)0U, .read_mask = 0U, .write_mask = 16383U}, {.offset = (unsigned short)1128U, .flags = (unsigned short)2U, .read_mask = 0U, .write_mask = 2044U}, {.offset = (unsigned short)1128U, .flags = (unsigned short)1U, .read_mask = 0U, .write_mask = 2012U}, {.offset = (unsigned short)1136U, .flags = (unsigned short)0U, .read_mask = 0U, .write_mask = 4294967295U}, {.offset = (unsigned short)1140U, .flags = (unsigned short)0U, .read_mask = 0U, .write_mask = 4294967295U}, {.offset = (unsigned short)1144U, .flags = (unsigned short)0U, .read_mask = 0U, .write_mask = 4294967295U}, {.offset = (unsigned short)1148U, .flags = (unsigned short)0U, .read_mask = 0U, .write_mask = 4294967295U}, {.offset = (unsigned short)9280U, .flags = (unsigned short)2U, .read_mask = 0U, .write_mask = 4294967295U}, {.offset = (unsigned short)9284U, .flags = (unsigned short)2U, .read_mask = 0U, .write_mask = 4294967295U}, {.offset = (unsigned short)9288U, .flags = (unsigned short)2U, .read_mask = 0U, .write_mask = 3U}, {.offset = (unsigned short)9292U, .flags = (unsigned short)2U, .read_mask = 0U, .write_mask = 4294967295U}, {.offset = (unsigned short)9296U, .flags = (unsigned short)0U, .read_mask = 0U, .write_mask = 4294967295U}, {.offset = (unsigned short)9300U, .flags = (unsigned short)0U, .read_mask = 0U, .write_mask = 4294967295U}, {.offset = (unsigned short)9304U, .flags = (unsigned short)0U, .read_mask = 0U, .write_mask = 4294901762U}, {.offset = (unsigned short)9308U, .flags = (unsigned short)0U, .read_mask = 0U, .write_mask = 4294967295U}, {.offset = (unsigned short)11288U, .flags = (unsigned short)2U, .read_mask = 0U, .write_mask = 4294967295U}, {.offset = (unsigned short)11288U, .flags = (unsigned short)1U, .read_mask = 0U, .write_mask = 1023U}, {.offset = (unsigned short)11292U, .flags = (unsigned short)2U, .read_mask = 0U, .write_mask = 4294967295U}, {.offset = (unsigned short)15360U, .flags = (unsigned short)2U, .read_mask = 0U, .write_mask = 4U}, {.offset = (unsigned short)15360U, .flags = (unsigned short)1U, .read_mask = 0U, .write_mask = 246U}, {.offset = (unsigned short)15368U, .flags = (unsigned short)2U, .read_mask = 0U, .write_mask = 4294967295U}, {.offset = (unsigned short)15368U, .flags = (unsigned short)1U, .read_mask = 0U, .write_mask = 1023U}, {.offset = (unsigned short)15372U, .flags = (unsigned short)2U, .read_mask = 0U, .write_mask = 4294967295U}, {.offset = (unsigned short)15372U, .flags = (unsigned short)1U, .read_mask = 0U, .write_mask = 1023U}, {.offset = (unsigned short)15376U, .flags = (unsigned short)2U, .read_mask = 0U, .write_mask = 4294967295U}, {.offset = (unsigned short)15376U, .flags = (unsigned short)5U, .read_mask = 0U, .write_mask = 255U}, {.offset = (unsigned short)15380U, .flags = (unsigned short)2U, .read_mask = 0U, .write_mask = 4294967295U}, {.offset = (unsigned short)15380U, .flags = (unsigned short)5U, .read_mask = 0U, .write_mask = 255U}, {.offset = (unsigned short)15384U, .flags = (unsigned short)2U, .read_mask = 0U, .write_mask = 4294967295U}, {.offset = (unsigned short)15388U, .flags = (unsigned short)2U, .read_mask = 0U, .write_mask = 4294967295U}, {.offset = (unsigned short)15392U, .flags = (unsigned short)2U, .read_mask = 0U, .write_mask = 4294967295U}, {.offset = (unsigned short)15392U, .flags = (unsigned short)5U, .read_mask = 0U, .write_mask = 255U}, {.offset = (unsigned short)15396U, .flags = (unsigned short)2U, .read_mask = 0U, .write_mask = 4294967295U}, {.offset = (unsigned short)15396U, .flags = (unsigned short)5U, .read_mask = 0U, .write_mask = 255U}, {.offset = (unsigned short)15400U, .flags = (unsigned short)2U, .read_mask = 0U, .write_mask = 4294967295U}, {.offset = (unsigned short)15408U, .flags = (unsigned short)2U, .read_mask = 0U, .write_mask = 4294967295U}, {.offset = (unsigned short)15412U, .flags = (unsigned short)2U, .read_mask = 0U, .write_mask = 4294967295U}, {.offset = (unsigned short)15416U, .flags = (unsigned short)0U, .read_mask = 0U, .write_mask = 4294967295U}, {.offset = (unsigned short)15420U, .flags = (unsigned short)0U, .read_mask = 0U, .write_mask = 4294967295U}, {.offset = (unsigned short)15424U, .flags = (unsigned short)0U, .read_mask = 4294967295U, .write_mask = 0U}, {.offset = (unsigned short)15428U, .flags = (unsigned short)0U, .read_mask = 4294967295U, .write_mask = 0U}, {.offset = (unsigned short)17416U, .flags = (unsigned short)8U, .read_mask = 0U, .write_mask = 8388480U}, {.offset = (unsigned short)17420U, .flags = (unsigned short)8U, .read_mask = 0U, .write_mask = 8388607U}, {.offset = (unsigned short)17424U, .flags = (unsigned short)0U, .read_mask = 0U, .write_mask = 63U}, {.offset = (unsigned short)17428U, .flags = (unsigned short)0U, .read_mask = 0U, .write_mask = 511U}, {.offset = (unsigned short)17432U, .flags = (unsigned short)0U, .read_mask = 0U, .write_mask = 511U}, {.offset = (unsigned short)17452U, .flags = (unsigned short)2U, .read_mask = 4294967295U, .write_mask = 0U}, {.offset = (unsigned short)17456U, .flags = (unsigned short)2U, .read_mask = 4294967295U, .write_mask = 0U}, {.offset = (unsigned short)22636U, .flags = (unsigned short)0U, .read_mask = 0U, .write_mask = 511U}, {.offset = (unsigned short)22644U, .flags = (unsigned short)2U, .read_mask = 0U, .write_mask = 511U}, {.offset = (unsigned short)22660U, .flags = (unsigned short)0U, .read_mask = 0U, .write_mask = 2047U}, {.offset = (unsigned short)22788U, .flags = (unsigned short)0U, .read_mask = 0U, .write_mask = 511U}, {.offset = (unsigned short)65535U, .flags = (unsigned short)0U, .read_mask = 0U, .write_mask = 0U}};
  #line 13243 
  is_5750 = 0;
  #line 13243 
  is_5705 = is_5750;
  #line 13244 
  if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_5705_PLUS,
                  (unsigned long *)(& tp->tg3_flags)) != 0) {
    #line 13245 
    is_5705 = 1;
    #line 13246 
    if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_5750_PLUS,
                (unsigned long *)(& tp->tg3_flags)) != 0) 
      #line 13247 
      is_5750 = 1;
  }
  #line 13250 
  i = 0;
  #line 13250 
  while ((unsigned int)reg_tbl[i].offset != 65535U) {
    {
      #line 13251 
      if (is_5705 != 0 && ((int)reg_tbl[i].flags & 2) != 0) 
                                                            #line 13252 
                                                            goto __Cont;
      #line 13254 
      if (is_5705 == 0 && ((int)reg_tbl[i].flags & 1) != 0) 
                                                            #line 13255 
                                                            goto __Cont;
      #line 13257 
      if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_IS_5788,
                  (unsigned long *)(& tp->tg3_flags)) != 0) 
        #line 13257 
        if (((int)reg_tbl[i].flags & 4) != 0) 
                                              #line 13259 
                                              goto __Cont;
      #line 13261 
      if (is_5750 != 0 && ((int)reg_tbl[i].flags & 8) != 0) 
                                                            #line 13262 
                                                            goto __Cont;
      #line 13264 
      offset = (unsigned int)reg_tbl[i].offset;
      #line 13265 
      read_mask = reg_tbl[i].read_mask;
      #line 13266 
      write_mask = reg_tbl[i].write_mask;
      #line 13269 
      save_val = (*(tp->read32))(tp,offset);
      #line 13272 
      read_val = save_val & read_mask;
      #line 13277 
      (*(tp->write32))(tp,offset,0U);
      #line 13279 
      val = (*(tp->read32))(tp,offset);
      #line 13282 
      if ((val & read_mask) != read_val || (val & write_mask) != 0U) 
        #line 13283 
        goto out;
      #line 13289 
      (*(tp->write32))(tp,offset,read_mask | write_mask);
      #line 13291 
      val = (*(tp->read32))(tp,offset);
      #line 13294 
      if ((val & read_mask) != read_val) 
                                         #line 13295 
                                         goto out;
      #line 13298 
      if ((val & write_mask) != write_mask) 
                                            #line 13299 
                                            goto out;
      #line 13301 
      (*(tp->write32))(tp,offset,save_val);
    }
    #line 13250 
    __Cont: 
            #line 13250 
    i ++;
  }
  #line 13304 
  return 0;
  #line 13306 
  out: 
       #line 13306 
  ;
  #line 13307 
  if ((tp->msg_enable & 8192U) != 0U) 
                                      #line 13308 
                                      netdev_err(tp->dev,(char *)"Register test failed at offset %x\n",offset);
  #line 13310 
  (*(tp->write32))(tp,offset,save_val);
  #line 13311 
  return -5;
}

#line 13314  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
static int tg3_do_mem_test(struct tg3 *tp, u32 offset, u32 len)
{
  #line 13317 
  int i;
  #line 13318 
  u32 j;
  #line 13316 
  u32 test_pattern[3U] = {0U, 4294967295U, 2857739610U};
  #line 13320 
  i = 0;
  #line 13320 
  while ((unsigned int)i <= 2U) {
    #line 13321 
    j = 0U;
    #line 13321 
    while (j < len) {
      {
        #line 13322 
        u32 val;
        #line 13324 
        tg3_write_mem(tp,offset + j,test_pattern[i]);
        #line 13325 
        tg3_read_mem(tp,offset + j,& val);
        #line 13326 
        if (test_pattern[i] != val) 
                                    #line 13327 
                                    return -5;
      }
      #line 13321 
      j += 4U;
    }
    #line 13320 
    i ++;
  }
  #line 13330 
  return 0;
}

#line 13333  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
static int tg3_test_memory(struct tg3 *tp)
{
  #line 13376 
  struct mem_entry *mem_tbl;
  #line 13378 
  int i;
  #line 13338 
  struct mem_entry mem_tbl_570x[3U] = {{.offset = 0U, .len = 2896U}, {.offset = 8192U, .len = 114688U}, {.offset = 4294967295U, .len = 0U}};
  #line 13342 
  struct mem_entry mem_tbl_5705[7U] = {{.offset = 256U, .len = 12U}, {.offset = 512U, .len = 8U}, {.offset = 16384U, .len = 2048U}, {.offset = 24576U, .len = 4096U}, {.offset = 32768U, .len = 8192U}, {.offset = 65536U, .len = 57344U}, {.offset = 4294967295U, .len = 0U}};
  #line 13350 
  struct mem_entry mem_tbl_5755[6U] = {{.offset = 512U, .len = 8U}, {.offset = 16384U, .len = 2048U}, {.offset = 24576U, .len = 2048U}, {.offset = 32768U, .len = 8192U}, {.offset = 65536U, .len = 49152U}, {.offset = 4294967295U, .len = 0U}};
  #line 13357 
  struct mem_entry mem_tbl_5906[6U] = {{.offset = 512U, .len = 8U}, {.offset = 16384U, .len = 1024U}, {.offset = 24576U, .len = 1024U}, {.offset = 32768U, .len = 4096U}, {.offset = 65536U, .len = 4096U}, {.offset = 4294967295U, .len = 0U}};
  #line 13364 
  struct mem_entry mem_tbl_5717[4U] = {{.offset = 512U, .len = 8U}, {.offset = 65536U, .len = 40960U}, {.offset = 131072U, .len = 80896U}, {.offset = 4294967295U, .len = 0U}};
  #line 13369 
  struct mem_entry mem_tbl_57765[5U] = {{.offset = 512U, .len = 8U}, {.offset = 16384U, .len = 2048U}, {.offset = 24576U, .len = 38912U}, {.offset = 65536U, .len = 40960U}, {.offset = 4294967295U, .len = 0U}};
  #line 13377 
  int err = 0;
  #line 13380 
  if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_5717_PLUS,
                  (unsigned long *)(& tp->tg3_flags)) != 0) 
    #line 13381 
    mem_tbl = (struct mem_entry *)(& mem_tbl_5717);
  else {
    #line 13382 
    if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_57765_CLASS,
                  (unsigned long *)(& tp->tg3_flags)) != 0) 
      #line 13382 
      goto _LOR;
    else 
      #line 13382 
      if (tp->pci_chip_rev_id >> 12 == 22370U) 
                                               #line 13382 
                                               _LOR: 
                                                     #line 13384 
                                                     mem_tbl = (struct mem_entry *)(& mem_tbl_57765);
      else {
        #line 13385 
        if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_5755_PLUS,
                  (unsigned long *)(& tp->tg3_flags)) != 0) 
          #line 13386 
          mem_tbl = (struct mem_entry *)(& mem_tbl_5755);
        else 
          #line 13387 
          if (tp->pci_chip_rev_id >> 12 == 12U) 
                                                #line 13388 
                                                mem_tbl = (struct mem_entry *)(& mem_tbl_5906);
          else {
            #line 13389 
            if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_5705_PLUS,
                (unsigned long *)(& tp->tg3_flags)) != 0) 
              #line 13390 
              mem_tbl = (struct mem_entry *)(& mem_tbl_5705); else 
                                                                   #line 13392 
                                                                   mem_tbl = (struct mem_entry *)(& mem_tbl_570x);
          }
      }
  }
  #line 13394 
  i = 0;
  #line 13394 
  while ((mem_tbl + (unsigned long)i)->offset != 4294967295U) {
    #line 13395 
    err = tg3_do_mem_test(tp,(mem_tbl + (unsigned long)i)->offset,(mem_tbl + (unsigned long)i)->len);
    #line 13396 
    if (err != 0) 
                  #line 13397 
                  break;
    #line 13394 
    i ++;
  }
  #line 13400 
  return err;
}

#line 13409  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
static u8 tg3_tso_header[54U] = {(unsigned char)8U, [2] = (unsigned char)69U, [8] = (unsigned char)64U, [10] = (unsigned char)64U, (unsigned char)6U, [14] = (unsigned char)10U, [17] = (unsigned char)1U, (unsigned char)10U, [21] = (unsigned char)2U, (unsigned char)13U, [24] = (unsigned char)224U, [28] = (unsigned char)1U, [32] = (unsigned char)2U, [34] = (unsigned char)128U, (unsigned char)16U, (unsigned char)16U, [38] = (unsigned char)20U, (unsigned char)9U, [42] = (unsigned char)1U, (unsigned char)1U, (unsigned char)8U, (unsigned char)10U, (unsigned char)17U, (unsigned char)17U, (unsigned char)17U, (unsigned char)17U, (unsigned char)17U, (unsigned char)17U, (unsigned char)17U, (unsigned char)17U};
#line 13426  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
static int tg3_run_loopback(struct tg3 *tp, u32 pktsz, bool tso_loopback)
{
  #line 13428 
  u32 rx_start_idx;
  #line 13428 
  u32 rx_idx;
  #line 13428 
  u32 tx_idx;
  #line 13428 
  u32 opaque_key;
  #line 13429 
  u32 desc_idx;
  #line 13429 
  u32 coal_now;
  #line 13429 
  u32 data_off;
  #line 13429 
  u32 val;
  #line 13430 
  u32 budget;
  #line 13431 
  struct sk_buff *skb;
  #line 13432 
  u8 *tx_data;
  #line 13432 
  u8 *rx_data;
  #line 13433 
  dma_addr_t map;
  #line 13434 
  int num_pkts;
  #line 13434 
  int tx_len;
  #line 13434 
  int rx_len;
  #line 13434 
  int i;
  #line 13434 
  int err;
  #line 13435 
  struct tg3_rx_buffer_desc *desc;
  #line 13436 
  struct tg3_napi *tnapi;
  #line 13436 
  struct tg3_napi *rnapi;
  #line 13429 
  u32 base_flags = 0U;
  #line 13429 
  u32 mss = 0U;
  #line 13437 
  struct tg3_rx_prodring_set *tpr = & tp->napi[0].prodring;
  #line 13439 
  tnapi = & tp->napi[0];
  #line 13440 
  rnapi = & tp->napi[0];
  #line 13441 
  if (tp->irq_cnt > 1U) {
    #line 13442 
    if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_ENABLE_RSS,
                (unsigned long *)(& tp->tg3_flags)) != 0) 
      #line 13443 
      rnapi = & tp->napi[1];
    #line 13444 
    if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_ENABLE_TSS,
                  (unsigned long *)(& tp->tg3_flags)) != 0) 
      #line 13445 
      tnapi = & tp->napi[1];
  }
  #line 13447 
  coal_now = tnapi->coal_now | rnapi->coal_now;
  #line 13449 
  err = -5;
  #line 13451 
  tx_len = (int)pktsz;
  #line 13452 
  skb = netdev_alloc_skb(tp->dev,(unsigned int)tx_len);
  #line 13453 
  if (skb == (struct sk_buff *)0) 
                                  #line 13454 
                                  return -12;
  #line 13456 
  tx_data = (u8 *)skb_put(skb,(unsigned int)tx_len);
  #line 13457 
  memcpy((void *)tx_data,(void *)(tp->dev)->dev_addr,6UL);
  #line 13458 
  memset((void *)(tx_data + 6U),0,8UL);
  #line 13460 
  (*(tp->write32))(tp,1084U,(unsigned int)(tx_len + 4));
  #line 13462 
  if ((int)tso_loopback != 0) {
    #line 13463 
    struct iphdr *iph = (struct iphdr *)(tx_data + 14U);
    #line 13465 
    u32 hdr_len = 52U;
    #line 13468 
    memcpy((void *)(tx_data + 12U),(void *)(& tg3_tso_header),54UL);
    #line 13470 
    mss = 500U;
    #line 13472 
    val = (unsigned int)tx_len + 4294967230U;
    #line 13473 
    num_pkts = (int)((val + 499U) / 500U);
    #line 13476 
    iph->tot_len = __builtin_bswap16((unsigned short)((int)((unsigned short)mss) + (int)((unsigned short)hdr_len)));
    #line 13478 
    base_flags = 768U;
    #line 13481 
    if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_HW_TSO_1,
                  (unsigned long *)(& tp->tg3_flags)) != 0) 
      #line 13481 
      goto _LOR;
    else {
      #line 13481 
      if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_HW_TSO_2,
                  (unsigned long *)(& tp->tg3_flags)) != 0) 
        #line 13481 
        goto _LOR;
      else {
        #line 13482 
        if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_HW_TSO_3,
                  (unsigned long *)(& tp->tg3_flags)) != 0) {
          #line 13481 
          _LOR: {
                  #line 13484 
                  struct tcphdr *th;
                  #line 13485 
                  val = 34U;
                  #line 13486 
                  th = (struct tcphdr *)(tx_data + (unsigned long)val);
                  #line 13487 
                  th->check = (unsigned short)0U;
                }
        }
        else 
             #line 13489 
             base_flags |= 1U;
      }
    }
    #line 13491 
    if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_HW_TSO_3,
                  (unsigned long *)(& tp->tg3_flags)) != 0) {
      #line 13492 
      mss = ((hdr_len << 12) & 49152U) | mss;
      #line 13493 
      if ((hdr_len & 16U) != 0U) 
                                 #line 13494 
                                 base_flags |= 16U;
      #line 13495 
      base_flags = ((hdr_len << 5) & 31744U) | base_flags;
    }
    else {
      #line 13496 
      if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_HW_TSO_2,
                  (unsigned long *)(& tp->tg3_flags)) != 0) 
        #line 13497 
        mss = (hdr_len << 9) | mss;
      else {
        #line 13498 
        if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_HW_TSO_1,
                  (unsigned long *)(& tp->tg3_flags)) != 0) 
          #line 13498 
          goto _LOR_0;
        else 
          #line 13498 
          if (tp->pci_chip_rev_id >> 12 == 3U) 
                                               #line 13498 
                                               _LOR_0: 
                                                       #line 13500 
                                                       mss |= 6144U; else 
                                                                    #line 13502 
                                                                    base_flags |= 12288U;
      }
    }
    #line 13505 
    data_off = 66U;
  }
  else {
    #line 13507 
    num_pkts = 1;
    #line 13508 
    data_off = 14U;
    #line 13510 
    if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_USE_JUMBO_BDFLAG,
                  (unsigned long *)(& tp->tg3_flags)) != 0) 
      #line 13510 
      if (tx_len > 1518) 
                         #line 13512 
                         base_flags |= 8U;
  }
  #line 13515 
  i = (int)data_off;
  #line 13515 
  while (i < tx_len) {
    #line 13516 
    *(tx_data + (unsigned long)i) = (unsigned char)i;
    #line 13515 
    i ++;
  }
  #line 13518 
  map = pci_map_single(tp->pdev,(void *)skb->data,(unsigned long)tx_len,1);
  #line 13519 
  if (pci_dma_mapping_error(tp->pdev,map) != 0) {
    #line 13520 
    consume_skb(skb);
    #line 13521 
    return -5;
  }
  #line 13524 
  val = tnapi->tx_prod;
  #line 13525 
  (tnapi->tx_buffers + (unsigned long)val)->skb = skb;
  #line 13526 
  (tnapi->tx_buffers + (unsigned long)val)->mapping = map;
  #line 13528 
  _tw32_flush(tp,15360U,(tp->coalesce_mode | rnapi->coal_now) | 2U,0U);
  #line 13531 
  __const_udelay(42950UL);
  #line 13533 
  rx_start_idx = (unsigned int)(rnapi->hw_status)->idx[0].rx_producer;
  #line 13535 
  budget = tg3_tx_avail(tnapi);
  #line 13536 
  if ((int)tg3_tx_frag_set(tnapi,& val,& budget,map,(unsigned int)tx_len,
                         base_flags | 4U,mss,0U) != 0) {
    #line 13538 
    (tnapi->tx_buffers + (unsigned long)val)->skb = (struct sk_buff *)0;
    #line 13539 
    consume_skb(skb);
    #line 13540 
    return -5;
  }
  #line 13543 
  (tnapi->tx_prod) ++;
  #line 13544 
  ldv_inline_asm();
  #line 13548 
  (*(tp->write32_tx_mbox))(tp,tnapi->prodmbox,tnapi->tx_prod);
  #line 13549 
  (*(tp->read32_mbox))(tp,tnapi->prodmbox);
  #line 13551 
  __const_udelay(42950UL);
  #line 13554 
  i = 0;
  #line 13554 
  while (i <= 34) {
    #line 13555 
    _tw32_flush(tp,15360U,(tp->coalesce_mode | coal_now) | 2U,0U);
    #line 13558 
    __const_udelay(42950UL);
    #line 13560 
    tx_idx = (unsigned int)(tnapi->hw_status)->idx[0].tx_consumer;
    #line 13561 
    rx_idx = (unsigned int)(rnapi->hw_status)->idx[0].rx_producer;
    #line 13562 
    if (tnapi->tx_prod == tx_idx && rx_start_idx + (unsigned int)num_pkts == rx_idx) 
      #line 13564 
      break;
    #line 13554 
    i ++;
  }
  #line 13567 
  tg3_tx_skb_unmap(tnapi,tnapi->tx_prod + 4294967295U,-1);
  #line 13568 
  consume_skb(skb);
  #line 13570 
  if (tnapi->tx_prod != tx_idx) 
                                #line 13571 
                                goto out;
  #line 13573 
  if (rx_start_idx + (unsigned int)num_pkts != rx_idx) 
                                                       #line 13574 
                                                       goto out;
  #line 13576 
  val = data_off;
  #line 13577 
  while (rx_idx != rx_start_idx) {
    #line 13578 
    u32 tmp_11;
    #line 13578 
    tmp_11 = rx_start_idx;
    #line 13578 
    rx_start_idx ++;
    #line 13578 
    desc = rnapi->rx_rcb + (unsigned long)tmp_11;
    #line 13579 
    desc_idx = desc->opaque & 65535U;
    #line 13580 
    opaque_key = desc->opaque & 458752U;
    #line 13582 
    if ((desc->err_vlan & 32440320U) != 0U && desc->err_vlan != 1048576U) 
      #line 13584 
      goto out;
    #line 13586 
    rx_len = (int)((desc->idx_len & 65535U) + 4294967292U);
    #line 13589 
    if (! tso_loopback) {
      #line 13590 
      if (rx_len != tx_len) 
                            #line 13591 
                            goto out;
      #line 13593 
      if (pktsz <= 1532U) {
        #line 13594 
        if (opaque_key != 65536U) 
                                  #line 13595 
                                  goto out;
      }
      else 
        #line 13597 
        if (opaque_key != 131072U) 
                                   #line 13598 
                                   goto out;
    }
    else 
      #line 13600 
      if ((desc->type_flags & 8192U) != 0U && (desc->ip_tcp_csum & 65535U) != 65535U) 
        #line 13603 
        goto out;
    #line 13606 
    if (opaque_key == 65536U) {
      #line 13607 
      rx_data = (tpr->rx_std_buffers + (unsigned long)desc_idx)->data;
      #line 13608 
      map = (tpr->rx_std_buffers + (unsigned long)desc_idx)->mapping;
    }
    else 
      #line 13610 
      if (opaque_key == 131072U) {
        #line 13611 
        rx_data = (tpr->rx_jmb_buffers + (unsigned long)desc_idx)->data;
        #line 13612 
        map = (tpr->rx_jmb_buffers + (unsigned long)desc_idx)->mapping;
      }
      else 
           #line 13615 
           goto out;
    #line 13617 
    pci_dma_sync_single_for_cpu(tp->pdev,map,(unsigned long)rx_len,2);
    #line 13620 
    rx_data += 64U;
    #line 13621 
    i = (int)data_off;
    #line 13621 
    while (i < rx_len) {
      #line 13622 
      if ((int)*(rx_data + (unsigned long)i) != (int)((unsigned char)val)) 
        #line 13623 
        goto out;
      #line 13621 
      i ++;
      #line 13621 
      val ++;
    }
  }
  #line 13627 
  err = 0;
  #line 13630 
  out: 
       #line 13630 
  ;
  #line 13631 
  return err;
}

#line 13642  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
static int tg3_test_loopback(struct tg3 *tp, u64 *data, bool do_extlpbk)
{
  #line 13645 
  u32 eee_cap;
  #line 13644 
  int err = -5;
  #line 13646 
  u32 jmb_pkt_sz = 9000U;
  #line 13648 
  if (tp->dma_limit != 0U) 
                           #line 13649 
                           jmb_pkt_sz = tp->dma_limit + 4294967282U;
  #line 13651 
  eee_cap = tp->phy_flags & 262144U;
  #line 13652 
  tp->phy_flags &= 4294705151U;
  #line 13654 
  if (! netif_running(tp->dev)) {
    #line 13655 
    *(data + 4U) = 7ULL;
    #line 13656 
    *(data + 5U) = 7ULL;
    #line 13657 
    if ((int)do_extlpbk != 0) 
                              #line 13658 
                              *(data + 6U) = 7ULL;
    #line 13659 
    goto done;
  }
  #line 13662 
  err = tg3_reset_hw(tp,(_Bool)1);
  #line 13663 
  if (err != 0) {
    #line 13664 
    *(data + 4U) = 7ULL;
    #line 13665 
    *(data + 5U) = 7ULL;
    #line 13666 
    if ((int)do_extlpbk != 0) 
                              #line 13667 
                              *(data + 6U) = 7ULL;
    #line 13668 
    goto done;
  }
  #line 13671 
  if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_ENABLE_RSS,
                  (unsigned long *)(& tp->tg3_flags)) != 0) {
    #line 13672 
    int i;
    #line 13675 
    i = 1584;
    #line 13675 
    while (i <= 1711) {
      #line 13677 
      (*(tp->write32))(tp,(unsigned int)i,0U);
      #line 13676 
      i += 4;
    }
  }
  #line 13685 
  if (tp->pci_chip_rev_id >> 12 != 8U) {
    #line 13685 
    if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_CPMU_PRESENT,
                  (unsigned long *)(& tp->tg3_flags)) == 0) {
      #line 13687 
      tg3_mac_loopback(tp,(_Bool)1);
      #line 13689 
      if (tg3_run_loopback(tp,1514U,(_Bool)0) != 0) 
                                                    #line 13690 
                                                    *(data + 4U) |= 1ULL;
      #line 13692 
      if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_JUMBO_RING_ENABLE,
                  (unsigned long *)(& tp->tg3_flags)) != 0) {
        #line 13692 
        if (tg3_run_loopback(tp,jmb_pkt_sz + 14U,(_Bool)0) != 0) 
                                                                 #line 13694 
                                                                 *(data + 4U) |= 2ULL;
      }
      #line 13696 
      tg3_mac_loopback(tp,(_Bool)0);
    }
  }
  #line 13699 
  if ((tp->phy_flags & 16U) == 0U) {
    #line 13699 
    if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_USE_PHYLIB,
                   (unsigned long *)(& tp->tg3_flags)) == 0) {
      #line 13701 
      int i_0;
      #line 13703 
      tg3_phy_lpbk_set(tp,0U,(_Bool)0);
      #line 13706 
      i_0 = 0;
      #line 13706 
      while (i_0 <= 99) {
        {
          #line 13707 
          if (((*(tp->read32))(tp,1120U) & 8U) != 0U) 
                                                      #line 13708 
                                                      break;
          #line 13709 
          __const_udelay(4295000UL);
        }
        #line 13706 
        i_0 ++;
      }
      #line 13712 
      if (tg3_run_loopback(tp,1514U,(_Bool)0) != 0) 
                                                    #line 13713 
                                                    *(data + 5U) |= 1ULL;
      #line 13714 
      if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_TSO_CAPABLE,
                  (unsigned long *)(& tp->tg3_flags)) != 0) {
        #line 13714 
        if (tg3_run_loopback(tp,1514U,(_Bool)1) != 0) 
                                                      #line 13716 
                                                      *(data + 5U) |= 4ULL;
      }
      #line 13717 
      if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_JUMBO_RING_ENABLE,
                  (unsigned long *)(& tp->tg3_flags)) != 0) {
        #line 13717 
        if (tg3_run_loopback(tp,jmb_pkt_sz + 14U,(_Bool)0) != 0) 
                                                                 #line 13719 
                                                                 *(data + 5U) |= 2ULL;
      }
      #line 13721 
      if ((int)do_extlpbk != 0) {
        #line 13722 
        tg3_phy_lpbk_set(tp,0U,(_Bool)1);
        {
          #line 13728 
          unsigned long __ms = 40UL;
          #line 13728 
          while (1) {
            #line 13728 
            unsigned long tmp_11;
            #line 13728 
            tmp_11 = __ms;
            #line 13728 
            __ms --;
            #line 13728 
            ;
            #line 13728 
            if (! (tmp_11 != 0UL)) 
                                   #line 13728 
                                   break;
            #line 13728 
            __const_udelay(4295000UL);
          }
        }
        #line 13730 
        if (tg3_run_loopback(tp,1514U,(_Bool)0) != 0) 
                                                      #line 13731 
                                                      *(data + 6U) |= 1ULL;
        #line 13733 
        if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_TSO_CAPABLE,
                   (unsigned long *)(& tp->tg3_flags)) != 0) {
          #line 13733 
          if (tg3_run_loopback(tp,1514U,(_Bool)1) != 0) 
                                                        #line 13735 
                                                        *(data + 6U) |= 4ULL;
        }
        #line 13737 
        if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_JUMBO_RING_ENABLE,
                   (unsigned long *)(& tp->tg3_flags)) != 0) {
          #line 13737 
          if (tg3_run_loopback(tp,jmb_pkt_sz + 14U,(_Bool)0) != 0) 
                                                                   #line 13739 
                                                                   *(data + 6U) |= 2ULL;
        }
      }
      #line 13744 
      if ((tp->phy_flags & 256U) != 0U) 
                                        #line 13745 
                                        tg3_phy_toggle_apd(tp,(_Bool)1);
    }
  }
  #line 13748 
  if (((*(data + 4U) | *(data + 5U)) | *(data + 6U)) != 0ULL) 
                                                              #line 13748 
                                                              err = -5; else 
                                                                    #line 13748 
                                                                    err = 0;
  #line 13751 
  done: 
        #line 13751 
  ;
  #line 13752 
  tp->phy_flags |= eee_cap;
  #line 13754 
  return err;
}

#line 13757  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
static void tg3_self_test(struct net_device *dev, struct ethtool_test *etest, u64 *data)
{
  #line 13760 
  struct tg3 *tp = netdev_priv(dev);
  #line 13761 
  bool doextlpbk = (_Bool)((etest->flags & 4U) != 0U);
  #line 13763 
  if ((tp->phy_flags & 1U) != 0U) {
    #line 13764 
    if (tg3_power_up(tp) != 0) {
      #line 13765 
      etest->flags |= 2U;
      #line 13766 
      memset((void *)data,1,64UL);
      #line 13767 
      return;
    }
    #line 13769 
    tg3_ape_driver_state_change(tp,1);
  }
  #line 13772 
  memset((void *)data,0,64UL);
  #line 13774 
  if (tg3_test_nvram(tp) != 0) {
    #line 13775 
    etest->flags |= 2U;
    #line 13776 
    *data = 1ULL;
  }
  #line 13778 
  if (! doextlpbk) {
    #line 13778 
    if (tg3_test_link(tp) != 0) {
      #line 13779 
      etest->flags |= 2U;
      #line 13780 
      *(data + 1U) = 1ULL;
    }
  }
  #line 13782 
  if ((etest->flags & 1U) != 0U) {
    #line 13783 
    int err;
    #line 13783 
    int err2 = 0;
    #line 13783 
    int irq_sync = 0;
    #line 13785 
    if ((int)netif_running(dev) != 0) {
      #line 13786 
      tg3_phy_stop(tp);
      #line 13787 
      tg3_netif_stop(tp);
      #line 13788 
      irq_sync = 1;
    }
    #line 13791 
    tg3_full_lock(tp,irq_sync);
    #line 13792 
    tg3_halt(tp,2,(_Bool)1);
    #line 13793 
    err = tg3_nvram_lock(tp);
    #line 13794 
    tg3_halt_cpu(tp,20480U);
    #line 13795 
    if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_5705_PLUS,
                  (unsigned long *)(& tp->tg3_flags)) == 0) 
      #line 13796 
      tg3_halt_cpu(tp,21504U);
    #line 13797 
    if (err == 0) 
                  #line 13798 
                  tg3_nvram_unlock(tp);
    #line 13800 
    if ((tp->phy_flags & 32U) != 0U) 
                                     #line 13801 
                                     tg3_phy_reset(tp);
    #line 13803 
    if (tg3_test_registers(tp) != 0) {
      #line 13804 
      etest->flags |= 2U;
      #line 13805 
      *(data + 2U) = 1ULL;
    }
    #line 13808 
    if (tg3_test_memory(tp) != 0) {
      #line 13809 
      etest->flags |= 2U;
      #line 13810 
      *(data + 3U) = 1ULL;
    }
    #line 13813 
    if ((int)doextlpbk != 0) 
                             #line 13814 
                             etest->flags |= 8U;
    #line 13816 
    if (tg3_test_loopback(tp,data,(_Bool)((bool)((int)doextlpbk) != 0)) != 0) 
      #line 13817 
      etest->flags |= 2U;
    #line 13819 
    tg3_full_unlock(tp);
    #line 13821 
    if (tg3_test_interrupt(tp) != 0) {
      #line 13822 
      etest->flags |= 2U;
      #line 13823 
      *(data + 7U) = 1ULL;
    }
    #line 13826 
    tg3_full_lock(tp,0);
    #line 13828 
    tg3_halt(tp,0,(_Bool)1);
    #line 13829 
    if ((int)netif_running(dev) != 0) {
      #line 13830 
      _tg3_flag_set((enum TG3_FLAGS)TG3_FLAG_INIT_COMPLETE,(unsigned long *)(& tp->tg3_flags));
      #line 13831 
      err2 = tg3_restart_hw(tp,(_Bool)1);
      #line 13832 
      if (err2 == 0) 
                     #line 13833 
                     tg3_netif_start(tp);
    }
    #line 13836 
    tg3_full_unlock(tp);
    #line 13838 
    if (irq_sync != 0 && err2 == 0) 
                                    #line 13839 
                                    tg3_phy_start(tp);
  }
  #line 13841 
  if ((tp->phy_flags & 1U) != 0U) 
                                  #line 13842 
                                  tg3_power_down_prepare(tp);
  #line 13843 
  return;
}

#line 13846  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
static int tg3_hwtstamp_set(struct net_device *dev, struct ifreq *ifr)
{
  #line 13849 
  struct hwtstamp_config stmpconf;
  #line 13930 
  int tmp_4;
  #line 13848 
  struct tg3 *tp = netdev_priv(dev);
  #line 13851 
  if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_PTP_CAPABLE,
                  (unsigned long *)(& tp->tg3_flags)) == 0) 
    #line 13852 
    return -95;
  #line 13854 
  if (copy_from_user((void *)(& stmpconf),ifr->ifr_ifru.ifru_data,12UL) != 0UL) 
    #line 13855 
    return -14;
  #line 13857 
  if (stmpconf.flags != 0) 
                           #line 13858 
                           return -22;
  #line 13860 
  if ((unsigned int)stmpconf.tx_type > 1U) 
                                           #line 13862 
                                           return -34;
  #line 13864 
  switch (stmpconf.rx_filter) {
    #line 13865 
    case 0: 
            #line 13865 
    ;
    #line 13866 
    tp->rxptpctl = 0U;
    #line 13867 
    break;
    #line 13868 
    case 3: 
            #line 13868 
    ;
    #line 13869 
    tp->rxptpctl = 33554435U;
    #line 13871 
    break;
    #line 13872 
    case 4: 
            #line 13872 
    ;
    #line 13873 
    tp->rxptpctl = 33554433U;
    #line 13875 
    break;
    #line 13876 
    case 5: 
            #line 13876 
    ;
    #line 13877 
    tp->rxptpctl = 33554434U;
    #line 13879 
    break;
    #line 13880 
    case 12: 
             #line 13880 
    ;
    #line 13881 
    tp->rxptpctl = 25165839U;
    #line 13883 
    break;
    #line 13884 
    case 9: 
            #line 13884 
    ;
    #line 13885 
    tp->rxptpctl = 8388623U;
    #line 13887 
    break;
    #line 13888 
    case 6: 
            #line 13888 
    ;
    #line 13889 
    tp->rxptpctl = 16777231U;
    #line 13891 
    break;
    #line 13892 
    case 13: 
             #line 13892 
    ;
    #line 13893 
    tp->rxptpctl = 25165825U;
    #line 13895 
    break;
    #line 13896 
    case 10: 
             #line 13896 
    ;
    #line 13897 
    tp->rxptpctl = 8388609U;
    #line 13899 
    break;
    #line 13900 
    case 7: 
            #line 13900 
    ;
    #line 13901 
    tp->rxptpctl = 16777217U;
    #line 13903 
    break;
    #line 13904 
    case 14: 
             #line 13904 
    ;
    #line 13905 
    tp->rxptpctl = 25165826U;
    #line 13907 
    break;
    #line 13908 
    case 11: 
             #line 13908 
    ;
    #line 13909 
    tp->rxptpctl = 8388610U;
    #line 13911 
    break;
    #line 13912 
    case 8: 
            #line 13912 
    ;
    #line 13913 
    tp->rxptpctl = 16777218U;
    #line 13915 
    break;
    #line 13916 
    default: 
             #line 13916 
    ;
    #line 13917 
    return -34;
  }
  #line 13920 
  if ((int)netif_running(dev) != 0) 
    #line 13920 
    if (tp->rxptpctl != 0U) 
                            #line 13921 
                            (*(tp->write32))(tp,1736U,tp->rxptpctl | 67108864U);
  #line 13924 
  if (stmpconf.tx_type == 1) 
                             #line 13925 
                             _tg3_flag_set((enum TG3_FLAGS)TG3_FLAG_TX_TSTAMP_EN,(unsigned long *)(& tp->tg3_flags)); else 
                                                                    #line 13927 
                                                                    _tg3_flag_clear((enum TG3_FLAGS)TG3_FLAG_TX_TSTAMP_EN,(unsigned long *)(& tp->tg3_flags));
  #line 13930 
  if (copy_to_user(ifr->ifr_ifru.ifru_data,(void *)(& stmpconf),12UL) != 0UL) 
    #line 13930 
    tmp_4 = -14; else 
                      #line 13930 
                      tmp_4 = 0;
  #line 13930 
  return tmp_4;
}

#line 13933  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
static int tg3_hwtstamp_get(struct net_device *dev, struct ifreq *ifr)
{
  #line 13936 
  struct hwtstamp_config stmpconf;
  #line 13991 
  int tmp_3;
  #line 13935 
  struct tg3 *tp = netdev_priv(dev);
  #line 13938 
  if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_PTP_CAPABLE,
                  (unsigned long *)(& tp->tg3_flags)) == 0) 
    #line 13939 
    return -95;
  #line 13941 
  stmpconf.flags = 0;
  #line 13942 
  stmpconf.tx_type = _tg3_flag((enum TG3_FLAGS)TG3_FLAG_TX_TSTAMP_EN,
                  (unsigned long *)(& tp->tg3_flags)) != 0;
  #line 13945 
  switch (tp->rxptpctl) {
    #line 13946 
    case (u32)0: 
                 #line 13946 
    ;
    #line 13947 
    stmpconf.rx_filter = 0;
    #line 13948 
    break;
    #line 13949 
    case (u32)33554435: 
                        #line 13949 
    ;
    #line 13950 
    stmpconf.rx_filter = 3;
    #line 13951 
    break;
    #line 13952 
    case (u32)33554433: 
                        #line 13952 
    ;
    #line 13953 
    stmpconf.rx_filter = 4;
    #line 13954 
    break;
    #line 13955 
    case (u32)33554434: 
                        #line 13955 
    ;
    #line 13956 
    stmpconf.rx_filter = 5;
    #line 13957 
    break;
    #line 13958 
    case (u32)25165839: 
                        #line 13958 
    ;
    #line 13959 
    stmpconf.rx_filter = 12;
    #line 13960 
    break;
    #line 13961 
    case (u32)8388623: 
                       #line 13961 
    ;
    #line 13962 
    stmpconf.rx_filter = 9;
    #line 13963 
    break;
    #line 13964 
    case (u32)16777231: 
                        #line 13964 
    ;
    #line 13965 
    stmpconf.rx_filter = 6;
    #line 13966 
    break;
    #line 13967 
    case (u32)25165825: 
                        #line 13967 
    ;
    #line 13968 
    stmpconf.rx_filter = 13;
    #line 13969 
    break;
    #line 13970 
    case (u32)8388609: 
                       #line 13970 
    ;
    #line 13971 
    stmpconf.rx_filter = 10;
    #line 13972 
    break;
    #line 13973 
    case (u32)16777217: 
                        #line 13973 
    ;
    #line 13974 
    stmpconf.rx_filter = 7;
    #line 13975 
    break;
    #line 13976 
    case (u32)25165826: 
                        #line 13976 
    ;
    #line 13977 
    stmpconf.rx_filter = 14;
    #line 13978 
    break;
    #line 13979 
    case (u32)8388610: 
                       #line 13979 
    ;
    #line 13980 
    stmpconf.rx_filter = 11;
    #line 13981 
    break;
    #line 13982 
    case (u32)16777218: 
                        #line 13982 
    ;
    #line 13983 
    stmpconf.rx_filter = 8;
    #line 13984 
    break;
    #line 13985 
    default: 
             #line 13985 
    ;
    {
      #line 13986 
      int __ret_warn_on = 1;
      #line 13986 
      if ((long)(__ret_warn_on != 0) != 0L) {
        #line 13987 
        ldv_inline_asm();
        #line 13988 
        ldv_inline_asm();
      }
      #line 13986 
      long tmp_2 = (long)(__ret_warn_on != 0);
    }
    #line 13987 
    return -34;
  }
  #line 13991 
  if (copy_to_user(ifr->ifr_ifru.ifru_data,(void *)(& stmpconf),12UL) != 0UL) 
    #line 13991 
    tmp_3 = -14; else 
                      #line 13991 
                      tmp_3 = 0;
  #line 13991 
  return tmp_3;
}

#line 13994  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
static int tg3_ioctl(struct net_device *dev, struct ifreq *ifr, int cmd)
{
  #line 13998 
  int err;
  #line 13996 
  struct mii_ioctl_data *data = if_mii(ifr);
  #line 13997 
  struct tg3 *tp = netdev_priv(dev);
  #line 14000 
  if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_USE_PHYLIB,
                  (unsigned long *)(& tp->tg3_flags)) != 0) {
    #line 14001 
    struct phy_device *phydev;
    #line 14002 
    if ((tp->phy_flags & 2U) == 0U) 
                                    #line 14003 
                                    return -11;
    #line 14004 
    phydev = mdiobus_get_phy(tp->mdio_bus,(int)tp->phy_addr);
    #line 14005 
    return phy_mii_ioctl(phydev,ifr,cmd);
  }
  #line 14008 
  switch (cmd) {
    #line 14009 
    case 35143: 
                #line 14009 
    ;
    #line 14010 
    data->phy_id = (unsigned short)tp->phy_addr;
    #line 14013 
    case 35144: 
                #line 14013 
    ;
    {
      #line 14014 
      u32 mii_regval;
      #line 14016 
      if ((tp->phy_flags & 16U) != 0U) 
                                       #line 14017 
                                       break;
      #line 14019 
      if (! netif_running(dev)) 
                                #line 14020 
                                return -11;
      #line 14022 
      cif_spin_lock_bh_lock_of_tg3(& tp->lock);
      #line 14023 
      err = __tg3_readphy(tp,(unsigned int)data->phy_id & 31U,(int)data->reg_num & 31,& mii_regval);
      #line 14025 
      cif_spin_unlock_bh_lock_of_tg3(& tp->lock);
      #line 14027 
      data->val_out = (unsigned short)mii_regval;
      #line 14029 
      return err;
    }
    #line 14032 
    case 35145: 
                #line 14032 
    ;
    #line 14033 
    if ((tp->phy_flags & 16U) != 0U) 
                                     #line 14034 
                                     break;
    #line 14036 
    if (! netif_running(dev)) 
                              #line 14037 
                              return -11;
    #line 14039 
    cif_spin_lock_bh_lock_of_tg3(& tp->lock);
    #line 14040 
    err = __tg3_writephy(tp,(unsigned int)data->phy_id & 31U,(int)data->reg_num & 31,(unsigned int)data->val_in);
    #line 14042 
    cif_spin_unlock_bh_lock_of_tg3(& tp->lock);
    #line 14044 
    return err;
    #line 14046 
    case 35248: 
                #line 14046 
    ;
    #line 14047 
    return tg3_hwtstamp_set(dev,ifr);
    #line 14049 
    case 35249: 
                #line 14049 
    ;
    #line 14050 
    return tg3_hwtstamp_get(dev,ifr);
    #line 14052 
    default: 
             #line 14052 
    ;
    #line 14054 
    break;
  }
  #line 14056 
  return -95;
}

#line 14059  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
static int tg3_get_coalesce(struct net_device *dev, struct ethtool_coalesce *ec)
{
  #line 14061 
  struct tg3 *tp = netdev_priv(dev);
  #line 14063 
  memcpy((void *)ec,(void *)(& tp->coal),92UL);
  #line 14064 
  return 0;
}

#line 14067  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
static int tg3_set_coalesce(struct net_device *dev, struct ethtool_coalesce *ec)
{
  #line 14069 
  struct tg3 *tp = netdev_priv(dev);
  #line 14070 
  u32 max_rxcoal_tick_int = 0U;
  #line 14070 
  u32 max_txcoal_tick_int = 0U;
  #line 14071 
  u32 max_stat_coal_ticks = 0U;
  #line 14071 
  u32 min_stat_coal_ticks = 0U;
  #line 14073 
  if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_5705_PLUS,
                  (unsigned long *)(& tp->tg3_flags)) == 0) {
    #line 14074 
    max_rxcoal_tick_int = 1023U;
    #line 14075 
    max_txcoal_tick_int = 1023U;
    #line 14076 
    max_stat_coal_ticks = 3600012288U;
    #line 14077 
    min_stat_coal_ticks = 100U;
  }
  #line 14080 
  if ((((((((((ec->rx_coalesce_usecs + 4294967295U > 1022U || ec->tx_coalesce_usecs > 1023U) || ec->tx_coalesce_usecs == 0U) || ec->rx_max_coalesced_frames > 255U) || ec->tx_max_coalesced_frames > 255U) || ec->rx_coalesce_usecs_irq > max_rxcoal_tick_int) || ec->tx_coalesce_usecs_irq > max_txcoal_tick_int) || ec->rx_max_coalesced_frames_irq > 255U) || ec->tx_max_coalesced_frames_irq > 255U) || ec->stats_block_coalesce_usecs > max_stat_coal_ticks) || ec->stats_block_coalesce_usecs < min_stat_coal_ticks) 
    #line 14092 
    return -22;
  #line 14095 
  tp->coal.rx_coalesce_usecs = ec->rx_coalesce_usecs;
  #line 14096 
  tp->coal.tx_coalesce_usecs = ec->tx_coalesce_usecs;
  #line 14097 
  tp->coal.rx_max_coalesced_frames = ec->rx_max_coalesced_frames;
  #line 14098 
  tp->coal.tx_max_coalesced_frames = ec->tx_max_coalesced_frames;
  #line 14099 
  tp->coal.rx_coalesce_usecs_irq = ec->rx_coalesce_usecs_irq;
  #line 14100 
  tp->coal.tx_coalesce_usecs_irq = ec->tx_coalesce_usecs_irq;
  #line 14101 
  tp->coal.rx_max_coalesced_frames_irq = ec->rx_max_coalesced_frames_irq;
  #line 14102 
  tp->coal.tx_max_coalesced_frames_irq = ec->tx_max_coalesced_frames_irq;
  #line 14103 
  tp->coal.stats_block_coalesce_usecs = ec->stats_block_coalesce_usecs;
  #line 14105 
  if ((int)netif_running(dev) != 0) {
    #line 14106 
    tg3_full_lock(tp,0);
    #line 14107 
    __tg3_set_coalesce(tp,& tp->coal);
    #line 14108 
    tg3_full_unlock(tp);
  }
  #line 14110 
  return 0;
}

#line 14113  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
static int tg3_set_eee(struct net_device *dev, struct ethtool_eee *edata)
{
  #line 14115 
  struct tg3 *tp = netdev_priv(dev);
  #line 14117 
  if ((tp->phy_flags & 262144U) == 0U) {
    #line 14118 
    netdev_warn(tp->dev,(char *)"Board does not support EEE!\n");
    #line 14119 
    return -95;
  }
  #line 14122 
  if (edata->advertised != tp->eee.advertised) {
    #line 14123 
    netdev_warn(tp->dev,(char *)"Direct manipulation of EEE advertisement is not supported\n");
    #line 14125 
    return -22;
  }
  #line 14128 
  if (edata->tx_lpi_timer > 65535U) {
    #line 14129 
    netdev_warn(tp->dev,(char *)"Maximal Tx Lpi timer supported is %#x(u)\n",65535);
    #line 14132 
    return -22;
  }
  #line 14135 
  tp->eee = *edata;
  #line 14137 
  tp->phy_flags |= 8U;
  #line 14138 
  tg3_warn_mgmt_link_flap(tp);
  #line 14140 
  if ((int)netif_running(tp->dev) != 0) {
    #line 14141 
    tg3_full_lock(tp,0);
    #line 14142 
    tg3_setup_eee(tp);
    #line 14143 
    tg3_phy_reset(tp);
    #line 14144 
    tg3_full_unlock(tp);
  }
  #line 14147 
  return 0;
}

#line 14150  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
static int tg3_get_eee(struct net_device *dev, struct ethtool_eee *edata)
{
  #line 14152 
  struct tg3 *tp = netdev_priv(dev);
  #line 14154 
  if ((tp->phy_flags & 262144U) == 0U) {
    #line 14155 
    netdev_warn(tp->dev,(char *)"Board does not support EEE!\n");
    #line 14157 
    return -95;
  }
  #line 14160 
  *edata = tp->eee;
  #line 14161 
  return 0;
}

#line 14164  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
static struct ethtool_ops tg3_ethtool_ops = {.get_drvinfo = & tg3_get_drvinfo, .get_regs_len = & tg3_get_regs_len, .get_regs = & tg3_get_regs, .get_wol = & tg3_get_wol, .set_wol = & tg3_set_wol, .get_msglevel = & tg3_get_msglevel, .set_msglevel = & tg3_set_msglevel, .nway_reset = & tg3_nway_reset, .get_link = & ethtool_op_get_link, .get_eeprom_len = & tg3_get_eeprom_len, .get_eeprom = & tg3_get_eeprom, .set_eeprom = & tg3_set_eeprom, .get_coalesce = & tg3_get_coalesce, .set_coalesce = & tg3_set_coalesce, .get_ringparam = & tg3_get_ringparam, .set_ringparam = & tg3_set_ringparam, .get_pauseparam = & tg3_get_pauseparam, .set_pauseparam = & tg3_set_pauseparam, .self_test = & tg3_self_test, .get_strings = & tg3_get_strings, .set_phys_id = & tg3_set_phys_id, .get_ethtool_stats = & tg3_get_ethtool_stats, .get_sset_count = & tg3_get_sset_count, .get_rxnfc = & tg3_get_rxnfc, .get_rxfh_indir_size = & tg3_get_rxfh_indir_size, .get_rxfh = & tg3_get_rxfh, .set_rxfh = & tg3_set_rxfh, .get_channels = & tg3_get_channels, .set_channels = & tg3_set_channels, .get_ts_info = & tg3_get_ts_info, .get_eee = & tg3_get_eee, .set_eee = & tg3_set_eee, .get_link_ksettings = & tg3_get_link_ksettings, .set_link_ksettings = & tg3_set_link_ksettings};
#line 14201  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
static void tg3_get_stats64(struct net_device *dev, struct rtnl_link_stats64 *stats)
{
  #line 14204 
  struct tg3 *tp = netdev_priv(dev);
  #line 14206 
  cif_spin_lock_bh_lock_of_tg3(& tp->lock);
  #line 14207 
  if (tp->hw_stats == (struct tg3_hw_stats *)0) 
                                                #line 14207 
                                                goto _LOR;
  else {
    #line 14207 
    if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_INIT_COMPLETE,
                  (unsigned long *)(& tp->tg3_flags)) == 0) {
      #line 14207 
      _LOR: {
              #line 14208 
              *stats = tp->net_stats_prev;
              #line 14209 
              cif_spin_unlock_bh_lock_of_tg3(& tp->lock);
              #line 14210 
              return;
            }
    }
  }
  #line 14213 
  tg3_get_nstats(tp,stats);
  #line 14214 
  cif_spin_unlock_bh_lock_of_tg3(& tp->lock);
  #line 14215 
  return;
}

#line 14217  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
static void tg3_set_rx_mode(struct net_device *dev)
{
  #line 14219 
  struct tg3 *tp = netdev_priv(dev);
  #line 14221 
  if (! netif_running(dev)) 
                            #line 14222 
                            return;
  #line 14224 
  tg3_full_lock(tp,0);
  #line 14225 
  __tg3_set_rx_mode(dev);
  #line 14226 
  tg3_full_unlock(tp);
  #line 14227 
  return;
}

#line 14229  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
__inline static void tg3_set_mtu(struct net_device *dev, struct tg3 *tp, int new_mtu)
{
  #line 14232 
  dev->mtu = (unsigned int)new_mtu;
  #line 14234 
  if (new_mtu > 1500) {
    #line 14235 
    if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_5780_CLASS,
                (unsigned long *)(& tp->tg3_flags)) != 0) {
      #line 14236 
      netdev_update_features(dev);
      #line 14237 
      _tg3_flag_clear((enum TG3_FLAGS)TG3_FLAG_TSO_CAPABLE,(unsigned long *)(& tp->tg3_flags));
    }
    else 
         #line 14239 
         _tg3_flag_set((enum TG3_FLAGS)TG3_FLAG_JUMBO_RING_ENABLE,(unsigned long *)(& tp->tg3_flags));
  }
  else {
    #line 14242 
    if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_5780_CLASS,
                  (unsigned long *)(& tp->tg3_flags)) != 0) {
      #line 14243 
      _tg3_flag_set((enum TG3_FLAGS)TG3_FLAG_TSO_CAPABLE,(unsigned long *)(& tp->tg3_flags));
      #line 14244 
      netdev_update_features(dev);
    }
    #line 14246 
    _tg3_flag_clear((enum TG3_FLAGS)TG3_FLAG_JUMBO_RING_ENABLE,(unsigned long *)(& tp->tg3_flags));
  }
  #line 14248 
  return;
}

#line 14250  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
static int tg3_change_mtu(struct net_device *dev, int new_mtu)
{
  #line 14253 
  int err;
  #line 14252 
  struct tg3 *tp = netdev_priv(dev);
  #line 14254 
  bool reset_phy = (_Bool)0;
  #line 14256 
  if (! netif_running(dev)) {
    #line 14260 
    tg3_set_mtu(dev,tp,new_mtu);
    #line 14261 
    return 0;
  }
  #line 14264 
  tg3_phy_stop(tp);
  #line 14266 
  tg3_netif_stop(tp);
  #line 14268 
  tg3_set_mtu(dev,tp,new_mtu);
  #line 14270 
  tg3_full_lock(tp,1);
  #line 14272 
  tg3_halt(tp,0,(_Bool)1);
  #line 14277 
  if (((tp->pci_chip_rev_id >> 12 == 358246U || tp->pci_chip_rev_id >> 12 == 22295U) || tp->pci_chip_rev_id >> 12 == 22297U) || tp->pci_chip_rev_id >> 12 == 22304U) 
    #line 14281 
    reset_phy = (_Bool)1;
  #line 14283 
  err = tg3_restart_hw(tp,(_Bool)((bool)((int)reset_phy) != 0));
  #line 14285 
  if (err == 0) 
                #line 14286 
                tg3_netif_start(tp);
  #line 14288 
  tg3_full_unlock(tp);
  #line 14290 
  if (err == 0) 
                #line 14291 
                tg3_phy_start(tp);
  #line 14293 
  return err;
}

#line 14296  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
static struct net_device_ops tg3_netdev_ops = {.ndo_open = & tg3_open, .ndo_stop = & tg3_close, .ndo_start_xmit = & tg3_start_xmit, .ndo_set_rx_mode = & tg3_set_rx_mode, .ndo_set_mac_address = & tg3_set_mac_addr, .ndo_validate_addr = & eth_validate_addr, .ndo_do_ioctl = & tg3_ioctl, .ndo_change_mtu = & tg3_change_mtu, .ndo_tx_timeout = & tg3_tx_timeout, .ndo_get_stats64 = & tg3_get_stats64, .ndo_poll_controller = & tg3_poll_controller, .ndo_fix_features = & tg3_fix_features, .ndo_set_features = & tg3_set_features};
#line 14314  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
static void tg3_get_eeprom_size(struct tg3 *tp)
{
  #line 14316 
  u32 cursize;
  #line 14316 
  u32 val;
  #line 14316 
  u32 magic;
  #line 14318 
  tp->nvram_size = 65536U;
  #line 14320 
  if (tg3_nvram_read(tp,0U,& magic) != 0) 
                                          #line 14321 
                                          return;
  #line 14323 
  if ((magic != 1721324970U && (magic & 4278190080U) != 2768240640U) && (magic & 65535U) != 43981U) 
    #line 14326 
    return;
  #line 14333 
  cursize = 16U;
  #line 14335 
  while (tp->nvram_size > cursize) {
    #line 14336 
    if (tg3_nvram_read(tp,cursize,& val) != 0) 
                                               #line 14337 
                                               return;
    #line 14339 
    if (val == magic) 
                      #line 14340 
                      break;
    #line 14342 
    cursize <<= 1;
  }
  #line 14345 
  tp->nvram_size = cursize;
  #line 14346 
  return;
}

#line 14348  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
static void tg3_get_nvram_size(struct tg3 *tp)
{
  #line 14350 
  u32 val;
  #line 14352 
  if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_NO_NVRAM,
                (unsigned long *)(& tp->tg3_flags)) != 0) 
    #line 14353 
    return;
  else {
    #line 14352 
    if (tg3_nvram_read(tp,0U,& val) != 0) 
                                          #line 14353 
                                          return;
  }
  #line 14356 
  if (val != 1721324970U) {
    #line 14357 
    tg3_get_eeprom_size(tp);
    #line 14358 
    return;
  }
  #line 14361 
  if (tg3_nvram_read(tp,240U,& val) == 0) 
    #line 14362 
    if (val != 0U) {
      #line 14374 
      tp->nvram_size = (unsigned int)((int)__builtin_bswap16((unsigned short)((int)((unsigned short)val))) * 1024);
      #line 14375 
      return;
    }
  #line 14378 
  tp->nvram_size = 524288U;
  #line 14379 
  return;
}

#line 14381  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
static void tg3_get_nvram_info(struct tg3 *tp)
{
  #line 14383 
  u32 nvcfg1;
  #line 14385 
  nvcfg1 = (*(tp->read32))(tp,28692U);
  #line 14386 
  if ((nvcfg1 & 1U) != 0U) 
                           #line 14387 
                           _tg3_flag_set((enum TG3_FLAGS)TG3_FLAG_FLASH,(unsigned long *)(& tp->tg3_flags));
  else {
    #line 14389 
    nvcfg1 &= 2147483647U;
    #line 14390 
    (*(tp->write32))(tp,28692U,nvcfg1);
  }
  #line 14393 
  if (tp->pci_chip_rev_id >> 12 == 4U) 
                                       #line 14393 
                                       goto _LOR;
  else {
    #line 14393 
    if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_5780_CLASS,
                (unsigned long *)(& tp->tg3_flags)) != 0) 
      #line 14393 
      _LOR: 
            #line 14395 
            switch (nvcfg1 & 50331651U) {
              #line 14396 
              case (unsigned int)33554435: 
                                           #line 14396 
              ;
              #line 14397 
              tp->nvram_jedecnum = 31U;
              #line 14398 
              tp->nvram_pagesize = 264U;
              #line 14399 
              _tg3_flag_set((enum TG3_FLAGS)TG3_FLAG_NVRAM_BUFFERED,(unsigned long *)(& tp->tg3_flags));
              #line 14400 
              break;
              #line 14401 
              case (unsigned int)3: 
                                    #line 14401 
              ;
              #line 14402 
              tp->nvram_jedecnum = 31U;
              #line 14403 
              tp->nvram_pagesize = 256U;
              #line 14404 
              break;
              #line 14405 
              case (unsigned int)33554432: 
                                           #line 14405 
              ;
              #line 14406 
              tp->nvram_jedecnum = 31U;
              #line 14407 
              tp->nvram_pagesize = 524288U;
              #line 14408 
              _tg3_flag_set((enum TG3_FLAGS)TG3_FLAG_NVRAM_BUFFERED,(unsigned long *)(& tp->tg3_flags));
              #line 14409 
              break;
              #line 14410 
              case (unsigned int)50331649: 
                                           #line 14410 
              ;
              #line 14411 
              tp->nvram_jedecnum = 32U;
              #line 14412 
              tp->nvram_pagesize = 256U;
              #line 14413 
              _tg3_flag_set((enum TG3_FLAGS)TG3_FLAG_NVRAM_BUFFERED,(unsigned long *)(& tp->tg3_flags));
              #line 14414 
              break;
              #line 14415 
              case (unsigned int)16777219: 
                                           #line 14415 
              ;
              #line 14416 
              tp->nvram_jedecnum = 79U;
              #line 14417 
              tp->nvram_pagesize = 256U;
              #line 14418 
              break;
              #line 14419 
              case (unsigned int)1: 
                                    #line 14419 
              ;
              #line 14420 
              case (unsigned int)33554433: 
                                           #line 14420 
              ;
              #line 14421 
              tp->nvram_jedecnum = 191U;
              #line 14422 
              tp->nvram_pagesize = 4098U;
              #line 14423 
              break;
            }
    else {
      #line 14426 
      tp->nvram_jedecnum = 31U;
      #line 14427 
      tp->nvram_pagesize = 264U;
      #line 14428 
      _tg3_flag_set((enum TG3_FLAGS)TG3_FLAG_NVRAM_BUFFERED,(unsigned long *)(& tp->tg3_flags));
    }
  }
  #line 14430 
  return;
}

#line 14432  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
static void tg3_nvram_get_pagesize(struct tg3 *tp, u32 nvmcfg1)
{
  #line 14434 
  switch (nvmcfg1 & 1879048192U) {
    #line 14435 
    case (unsigned int)0: 
                          #line 14435 
    ;
    #line 14436 
    tp->nvram_pagesize = 256U;
    #line 14437 
    break;
    #line 14438 
    case (unsigned int)268435456: 
                                  #line 14438 
    ;
    #line 14439 
    tp->nvram_pagesize = 512U;
    #line 14440 
    break;
    #line 14441 
    case (unsigned int)536870912: 
                                  #line 14441 
    ;
    #line 14442 
    tp->nvram_pagesize = 1024U;
    #line 14443 
    break;
    #line 14444 
    case (unsigned int)805306368: 
                                  #line 14444 
    ;
    #line 14445 
    tp->nvram_pagesize = 2048U;
    #line 14446 
    break;
    #line 14447 
    case (unsigned int)1073741824: 
                                   #line 14447 
    ;
    #line 14448 
    tp->nvram_pagesize = 4096U;
    #line 14449 
    break;
    #line 14450 
    case (unsigned int)1342177280: 
                                   #line 14450 
    ;
    #line 14451 
    tp->nvram_pagesize = 264U;
    #line 14452 
    break;
    #line 14453 
    case (unsigned int)1610612736: 
                                   #line 14453 
    ;
    #line 14454 
    tp->nvram_pagesize = 528U;
    #line 14455 
    break;
  }
  #line 14457 
  return;
}

#line 14459  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
static void tg3_get_5752_nvram_info(struct tg3 *tp)
{
  #line 14461 
  u32 nvcfg1;
  #line 14463 
  nvcfg1 = (*(tp->read32))(tp,28692U);
  #line 14466 
  if ((nvcfg1 & 134217728U) != 0U) 
                                   #line 14467 
                                   _tg3_flag_set((enum TG3_FLAGS)TG3_FLAG_PROTECTED_NVRAM,(unsigned long *)(& tp->tg3_flags));
  #line 14469 
  switch (nvcfg1 & 62914563U) {
    #line 14470 
    case (unsigned int)0: 
                          #line 14470 
    ;
    #line 14471 
    case (unsigned int)33554432: 
                                 #line 14471 
    ;
    #line 14472 
    tp->nvram_jedecnum = 31U;
    #line 14473 
    _tg3_flag_set((enum TG3_FLAGS)TG3_FLAG_NVRAM_BUFFERED,(unsigned long *)(& tp->tg3_flags));
    #line 14474 
    break;
    #line 14475 
    case (unsigned int)33554435: 
                                 #line 14475 
    ;
    #line 14476 
    tp->nvram_jedecnum = 31U;
    #line 14477 
    _tg3_flag_set((enum TG3_FLAGS)TG3_FLAG_NVRAM_BUFFERED,(unsigned long *)(& tp->tg3_flags));
    #line 14478 
    _tg3_flag_set((enum TG3_FLAGS)TG3_FLAG_FLASH,(unsigned long *)(& tp->tg3_flags));
    #line 14479 
    break;
    #line 14480 
    case (unsigned int)37748736: 
                                 #line 14480 
    ;
    #line 14481 
    case (unsigned int)37748738: 
                                 #line 14481 
    ;
    #line 14482 
    case (unsigned int)37748737: 
                                 #line 14482 
    ;
    #line 14483 
    tp->nvram_jedecnum = 32U;
    #line 14484 
    _tg3_flag_set((enum TG3_FLAGS)TG3_FLAG_NVRAM_BUFFERED,(unsigned long *)(& tp->tg3_flags));
    #line 14485 
    _tg3_flag_set((enum TG3_FLAGS)TG3_FLAG_FLASH,(unsigned long *)(& tp->tg3_flags));
    #line 14486 
    break;
  }
  #line 14489 
  if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_FLASH,
                (unsigned long *)(& tp->tg3_flags)) != 0) 
    #line 14490 
    tg3_nvram_get_pagesize(tp,nvcfg1);
  else {
    #line 14493 
    tp->nvram_pagesize = 524288U;
    #line 14495 
    nvcfg1 &= 2147483647U;
    #line 14496 
    (*(tp->write32))(tp,28692U,nvcfg1);
  }
  #line 14498 
  return;
}

#line 14500  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
static void tg3_get_5755_nvram_info(struct tg3 *tp)
{
  #line 14502 
  u32 nvcfg1;
  #line 14502 
  u32 protect = 0U;
  #line 14504 
  nvcfg1 = (*(tp->read32))(tp,28692U);
  #line 14507 
  if ((nvcfg1 & 134217728U) != 0U) {
    #line 14508 
    _tg3_flag_set((enum TG3_FLAGS)TG3_FLAG_PROTECTED_NVRAM,(unsigned long *)(& tp->tg3_flags));
    #line 14509 
    protect = 1U;
  }
  #line 14512 
  nvcfg1 &= 62914563U;
  #line 14513 
  switch (nvcfg1) {
    #line 14514 
    case (u32)54525953: 
                        #line 14514 
    ;
    #line 14515 
    case (u32)54525954: 
                        #line 14515 
    ;
    #line 14516 
    case (u32)54525952: 
                        #line 14516 
    ;
    #line 14517 
    case (u32)33554435: 
                        #line 14517 
    ;
    #line 14518 
    tp->nvram_jedecnum = 31U;
    #line 14519 
    _tg3_flag_set((enum TG3_FLAGS)TG3_FLAG_NVRAM_BUFFERED,(unsigned long *)(& tp->tg3_flags));
    #line 14520 
    _tg3_flag_set((enum TG3_FLAGS)TG3_FLAG_FLASH,(unsigned long *)(& tp->tg3_flags));
    #line 14521 
    tp->nvram_pagesize = 264U;
    #line 14522 
    if (nvcfg1 == 54525953U || nvcfg1 == 33554435U) 
      #line 14524 
      if (protect != 0U) 
                         #line 14524 
                         tp->nvram_size = 254464U; else 
                                                        #line 14524 
                                                        tp->nvram_size = 524288U;
    else 
      #line 14526 
      if (nvcfg1 == 54525954U) 
        #line 14527 
        if (protect != 0U) 
                           #line 14527 
                           tp->nvram_size = 127488U; else 
                                                          #line 14527 
                                                          tp->nvram_size = 262144U;
      else 
        #line 14530 
        if (protect != 0U) 
                           #line 14530 
                           tp->nvram_size = 127488U; else 
                                                          #line 14530 
                                                          tp->nvram_size = 131072U;
    #line 14532 
    break;
    #line 14533 
    case (u32)37748736: 
                        #line 14533 
    ;
    #line 14534 
    case (u32)37748738: 
                        #line 14534 
    ;
    #line 14535 
    case (u32)37748737: 
                        #line 14535 
    ;
    #line 14536 
    tp->nvram_jedecnum = 32U;
    #line 14537 
    _tg3_flag_set((enum TG3_FLAGS)TG3_FLAG_NVRAM_BUFFERED,(unsigned long *)(& tp->tg3_flags));
    #line 14538 
    _tg3_flag_set((enum TG3_FLAGS)TG3_FLAG_FLASH,(unsigned long *)(& tp->tg3_flags));
    #line 14539 
    tp->nvram_pagesize = 256U;
    #line 14540 
    if (nvcfg1 == 37748736U) 
      #line 14541 
      if (protect != 0U) 
                         #line 14541 
                         tp->nvram_size = 65536U; else 
                                                       #line 14541 
                                                       tp->nvram_size = 131072U;
    else 
      #line 14544 
      if (nvcfg1 == 37748738U) 
        #line 14545 
        if (protect != 0U) 
                           #line 14545 
                           tp->nvram_size = 65536U; else 
                                                         #line 14545 
                                                         tp->nvram_size = 262144U;
      else 
        #line 14549 
        if (protect != 0U) 
                           #line 14549 
                           tp->nvram_size = 131072U; else 
                                                          #line 14549 
                                                          tp->nvram_size = 524288U;
    #line 14552 
    break;
  }
  #line 14554 
  return;
}

#line 14556  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
static void tg3_get_5787_nvram_info(struct tg3 *tp)
{
  #line 14558 
  u32 nvcfg1;
  #line 14560 
  nvcfg1 = (*(tp->read32))(tp,28692U);
  #line 14562 
  switch (nvcfg1 & 62914563U) {
    #line 14563 
    case (unsigned int)50331651: 
                                 #line 14563 
    ;
    #line 14564 
    case (unsigned int)50331650: 
                                 #line 14564 
    ;
    #line 14565 
    case (unsigned int)50331648: 
                                 #line 14565 
    ;
    #line 14566 
    case (unsigned int)33554432: 
                                 #line 14566 
    ;
    #line 14567 
    tp->nvram_jedecnum = 31U;
    #line 14568 
    _tg3_flag_set((enum TG3_FLAGS)TG3_FLAG_NVRAM_BUFFERED,(unsigned long *)(& tp->tg3_flags));
    #line 14569 
    tp->nvram_pagesize = 524288U;
    #line 14571 
    nvcfg1 &= 2147483647U;
    #line 14572 
    (*(tp->write32))(tp,28692U,nvcfg1);
    #line 14573 
    break;
    #line 14574 
    case (unsigned int)33554435: 
                                 #line 14574 
    ;
    #line 14575 
    case (unsigned int)54525953: 
                                 #line 14575 
    ;
    #line 14576 
    case (unsigned int)54525954: 
                                 #line 14576 
    ;
    #line 14577 
    case (unsigned int)54525952: 
                                 #line 14577 
    ;
    #line 14578 
    tp->nvram_jedecnum = 31U;
    #line 14579 
    _tg3_flag_set((enum TG3_FLAGS)TG3_FLAG_NVRAM_BUFFERED,(unsigned long *)(& tp->tg3_flags));
    #line 14580 
    _tg3_flag_set((enum TG3_FLAGS)TG3_FLAG_FLASH,(unsigned long *)(& tp->tg3_flags));
    #line 14581 
    tp->nvram_pagesize = 264U;
    #line 14582 
    break;
    #line 14583 
    case (unsigned int)37748736: 
                                 #line 14583 
    ;
    #line 14584 
    case (unsigned int)37748738: 
                                 #line 14584 
    ;
    #line 14585 
    case (unsigned int)37748737: 
                                 #line 14585 
    ;
    #line 14586 
    tp->nvram_jedecnum = 32U;
    #line 14587 
    _tg3_flag_set((enum TG3_FLAGS)TG3_FLAG_NVRAM_BUFFERED,(unsigned long *)(& tp->tg3_flags));
    #line 14588 
    _tg3_flag_set((enum TG3_FLAGS)TG3_FLAG_FLASH,(unsigned long *)(& tp->tg3_flags));
    #line 14589 
    tp->nvram_pagesize = 256U;
    #line 14590 
    break;
  }
  #line 14592 
  return;
}

#line 14594  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
static void tg3_get_5761_nvram_info(struct tg3 *tp)
{
  #line 14596 
  u32 nvcfg1;
  #line 14596 
  u32 protect = 0U;
  #line 14598 
  nvcfg1 = (*(tp->read32))(tp,28692U);
  #line 14601 
  if ((nvcfg1 & 134217728U) != 0U) {
    #line 14602 
    _tg3_flag_set((enum TG3_FLAGS)TG3_FLAG_PROTECTED_NVRAM,(unsigned long *)(& tp->tg3_flags));
    #line 14603 
    protect = 1U;
  }
  #line 14606 
  nvcfg1 &= 62914563U;
  #line 14607 
  switch (nvcfg1) {
    #line 14608 
    case (u32)3: 
                 #line 14608 
    ;
    #line 14609 
    case (u32)0: 
                 #line 14609 
    ;
    #line 14610 
    case (u32)2: 
                 #line 14610 
    ;
    #line 14611 
    case (u32)1: 
                 #line 14611 
    ;
    #line 14612 
    case (u32)8388611: 
                       #line 14612 
    ;
    #line 14613 
    case (u32)8388608: 
                       #line 14613 
    ;
    #line 14614 
    case (u32)8388610: 
                       #line 14614 
    ;
    #line 14615 
    case (u32)8388609: 
                       #line 14615 
    ;
    #line 14616 
    tp->nvram_jedecnum = 31U;
    #line 14617 
    _tg3_flag_set((enum TG3_FLAGS)TG3_FLAG_NVRAM_BUFFERED,(unsigned long *)(& tp->tg3_flags));
    #line 14618 
    _tg3_flag_set((enum TG3_FLAGS)TG3_FLAG_FLASH,(unsigned long *)(& tp->tg3_flags));
    #line 14619 
    _tg3_flag_set((enum TG3_FLAGS)TG3_FLAG_NO_NVRAM_ADDR_TRANS,(unsigned long *)(& tp->tg3_flags));
    #line 14620 
    tp->nvram_pagesize = 256U;
    #line 14621 
    break;
    #line 14622 
    case (u32)33554433: 
                        #line 14622 
    ;
    #line 14623 
    case (u32)33554432: 
                        #line 14623 
    ;
    #line 14624 
    case (u32)33554434: 
                        #line 14624 
    ;
    #line 14625 
    case (u32)33554435: 
                        #line 14625 
    ;
    #line 14626 
    case (u32)41943041: 
                        #line 14626 
    ;
    #line 14627 
    case (u32)41943040: 
                        #line 14627 
    ;
    #line 14628 
    case (u32)41943042: 
                        #line 14628 
    ;
    #line 14629 
    case (u32)41943043: 
                        #line 14629 
    ;
    #line 14630 
    tp->nvram_jedecnum = 32U;
    #line 14631 
    _tg3_flag_set((enum TG3_FLAGS)TG3_FLAG_NVRAM_BUFFERED,(unsigned long *)(& tp->tg3_flags));
    #line 14632 
    _tg3_flag_set((enum TG3_FLAGS)TG3_FLAG_FLASH,(unsigned long *)(& tp->tg3_flags));
    #line 14633 
    tp->nvram_pagesize = 256U;
    #line 14634 
    break;
  }
  #line 14637 
  if (protect != 0U) 
                     #line 14638 
                     tp->nvram_size = (*(tp->read32))(tp,28720U);
  else 
    #line 14640 
    switch (nvcfg1) {
      #line 14641 
      case (u32)1: 
                   #line 14641 
      ;
      #line 14642 
      case (u32)8388609: 
                         #line 14642 
      ;
      #line 14643 
      case (u32)33554435: 
                          #line 14643 
      ;
      #line 14644 
      case (u32)41943043: 
                          #line 14644 
      ;
      #line 14645 
      tp->nvram_size = 2097152U;
      #line 14646 
      break;
      #line 14647 
      case (u32)2: 
                   #line 14647 
      ;
      #line 14648 
      case (u32)8388610: 
                         #line 14648 
      ;
      #line 14649 
      case (u32)33554434: 
                          #line 14649 
      ;
      #line 14650 
      case (u32)41943042: 
                          #line 14650 
      ;
      #line 14651 
      tp->nvram_size = 1048576U;
      #line 14652 
      break;
      #line 14653 
      case (u32)0: 
                   #line 14653 
      ;
      #line 14654 
      case (u32)8388608: 
                         #line 14654 
      ;
      #line 14655 
      case (u32)33554432: 
                          #line 14655 
      ;
      #line 14656 
      case (u32)41943040: 
                          #line 14656 
      ;
      #line 14657 
      tp->nvram_size = 524288U;
      #line 14658 
      break;
      #line 14659 
      case (u32)3: 
                   #line 14659 
      ;
      #line 14660 
      case (u32)8388611: 
                         #line 14660 
      ;
      #line 14661 
      case (u32)33554433: 
                          #line 14661 
      ;
      #line 14662 
      case (u32)41943041: 
                          #line 14662 
      ;
      #line 14663 
      tp->nvram_size = 262144U;
      #line 14664 
      break;
    }
  #line 14666 
  return;
}

#line 14669  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
static void tg3_get_5906_nvram_info(struct tg3 *tp)
{
  #line 14671 
  tp->nvram_jedecnum = 31U;
  #line 14672 
  _tg3_flag_set((enum TG3_FLAGS)TG3_FLAG_NVRAM_BUFFERED,(unsigned long *)(& tp->tg3_flags));
  #line 14673 
  tp->nvram_pagesize = 524288U;
  #line 14674 
  return;
}

#line 14676  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
static void tg3_get_57780_nvram_info(struct tg3 *tp)
{
  #line 14678 
  u32 nvcfg1;
  #line 14680 
  nvcfg1 = (*(tp->read32))(tp,28692U);
  #line 14682 
  switch (nvcfg1 & 62914563U) {
    #line 14683 
    case (unsigned int)50331650: 
                                 #line 14683 
    ;
    #line 14684 
    case (unsigned int)33554432: 
                                 #line 14684 
    ;
    #line 14685 
    tp->nvram_jedecnum = 31U;
    #line 14686 
    _tg3_flag_set((enum TG3_FLAGS)TG3_FLAG_NVRAM_BUFFERED,(unsigned long *)(& tp->tg3_flags));
    #line 14687 
    tp->nvram_pagesize = 524288U;
    #line 14689 
    nvcfg1 &= 2147483647U;
    #line 14690 
    (*(tp->write32))(tp,28692U,nvcfg1);
    #line 14691 
    return;
    #line 14692 
    case (unsigned int)33554435: 
                                 #line 14692 
    ;
    #line 14693 
    case (unsigned int)4194304: 
                                #line 14693 
    ;
    #line 14694 
    case (unsigned int)54525952: 
                                 #line 14694 
    ;
    #line 14695 
    case (unsigned int)4194306: 
                                #line 14695 
    ;
    #line 14696 
    case (unsigned int)54525954: 
                                 #line 14696 
    ;
    #line 14697 
    case (unsigned int)4194305: 
                                #line 14697 
    ;
    #line 14698 
    case (unsigned int)54525953: 
                                 #line 14698 
    ;
    #line 14699 
    tp->nvram_jedecnum = 31U;
    #line 14700 
    _tg3_flag_set((enum TG3_FLAGS)TG3_FLAG_NVRAM_BUFFERED,(unsigned long *)(& tp->tg3_flags));
    #line 14701 
    _tg3_flag_set((enum TG3_FLAGS)TG3_FLAG_FLASH,(unsigned long *)(& tp->tg3_flags));
    #line 14703 
    switch (nvcfg1 & 62914563U) {
      #line 14704 
      case (unsigned int)33554435: 
                                   #line 14704 
      ;
      #line 14705 
      case (unsigned int)4194304: 
                                  #line 14705 
      ;
      #line 14706 
      case (unsigned int)54525952: 
                                   #line 14706 
      ;
      #line 14707 
      tp->nvram_size = 131072U;
      #line 14708 
      break;
      #line 14709 
      case (unsigned int)4194306: 
                                  #line 14709 
      ;
      #line 14710 
      case (unsigned int)54525954: 
                                   #line 14710 
      ;
      #line 14711 
      tp->nvram_size = 262144U;
      #line 14712 
      break;
      #line 14713 
      case (unsigned int)4194305: 
                                  #line 14713 
      ;
      #line 14714 
      case (unsigned int)54525953: 
                                   #line 14714 
      ;
      #line 14715 
      tp->nvram_size = 524288U;
      #line 14716 
      break;
    }
    #line 14718 
    break;
    #line 14719 
    case (unsigned int)37748736: 
                                 #line 14719 
    ;
    #line 14720 
    case (unsigned int)37748738: 
                                 #line 14720 
    ;
    #line 14721 
    case (unsigned int)37748737: 
                                 #line 14721 
    ;
    #line 14722 
    tp->nvram_jedecnum = 32U;
    #line 14723 
    _tg3_flag_set((enum TG3_FLAGS)TG3_FLAG_NVRAM_BUFFERED,(unsigned long *)(& tp->tg3_flags));
    #line 14724 
    _tg3_flag_set((enum TG3_FLAGS)TG3_FLAG_FLASH,(unsigned long *)(& tp->tg3_flags));
    #line 14726 
    switch (nvcfg1 & 62914563U) {
      #line 14727 
      case (unsigned int)37748736: 
                                   #line 14727 
      ;
      #line 14728 
      tp->nvram_size = 131072U;
      #line 14729 
      break;
      #line 14730 
      case (unsigned int)37748738: 
                                   #line 14730 
      ;
      #line 14731 
      tp->nvram_size = 262144U;
      #line 14732 
      break;
      #line 14733 
      case (unsigned int)37748737: 
                                   #line 14733 
      ;
      #line 14734 
      tp->nvram_size = 524288U;
      #line 14735 
      break;
    }
    #line 14737 
    break;
    #line 14738 
    default: 
             #line 14738 
    ;
    #line 14739 
    _tg3_flag_set((enum TG3_FLAGS)TG3_FLAG_NO_NVRAM,(unsigned long *)(& tp->tg3_flags));
    #line 14740 
    return;
  }
  #line 14743 
  tg3_nvram_get_pagesize(tp,nvcfg1);
  #line 14744 
  if (tp->nvram_pagesize != 264U && tp->nvram_pagesize != 528U) 
                                                                #line 14745 
                                                                _tg3_flag_set((enum TG3_FLAGS)TG3_FLAG_NO_NVRAM_ADDR_TRANS,(unsigned long *)(& tp->tg3_flags));
  #line 14746 
  return;
}

#line 14749  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
static void tg3_get_5717_nvram_info(struct tg3 *tp)
{
  #line 14751 
  u32 nvcfg1;
  #line 14753 
  nvcfg1 = (*(tp->read32))(tp,28692U);
  #line 14755 
  switch (nvcfg1 & 62914563U) {
    #line 14756 
    case (unsigned int)33554433: 
                                 #line 14756 
    ;
    #line 14757 
    case (unsigned int)33554435: 
                                 #line 14757 
    ;
    #line 14758 
    tp->nvram_jedecnum = 31U;
    #line 14759 
    _tg3_flag_set((enum TG3_FLAGS)TG3_FLAG_NVRAM_BUFFERED,(unsigned long *)(& tp->tg3_flags));
    #line 14760 
    tp->nvram_pagesize = 524288U;
    #line 14762 
    nvcfg1 &= 2147483647U;
    #line 14763 
    (*(tp->write32))(tp,28692U,nvcfg1);
    #line 14764 
    return;
    #line 14765 
    case (unsigned int)16777217: 
                                 #line 14765 
    ;
    #line 14766 
    case (unsigned int)20971520: 
                                 #line 14766 
    ;
    #line 14767 
    case (unsigned int)20971521: 
                                 #line 14767 
    ;
    #line 14768 
    case (unsigned int)16777219: 
                                 #line 14768 
    ;
    #line 14769 
    case (unsigned int)20971522: 
                                 #line 14769 
    ;
    #line 14770 
    case (unsigned int)20971523: 
                                 #line 14770 
    ;
    #line 14771 
    case (unsigned int)54525952: 
                                 #line 14771 
    ;
    #line 14772 
    tp->nvram_jedecnum = 31U;
    #line 14773 
    _tg3_flag_set((enum TG3_FLAGS)TG3_FLAG_NVRAM_BUFFERED,(unsigned long *)(& tp->tg3_flags));
    #line 14774 
    _tg3_flag_set((enum TG3_FLAGS)TG3_FLAG_FLASH,(unsigned long *)(& tp->tg3_flags));
    #line 14776 
    switch (nvcfg1 & 62914563U) {
      #line 14777 
      case (unsigned int)16777219: 
                                   #line 14777 
      ;
      #line 14779 
      break;
      #line 14780 
      case (unsigned int)20971522: 
                                   #line 14780 
      ;
      #line 14781 
      case (unsigned int)20971523: 
                                   #line 14781 
      ;
      #line 14782 
      tp->nvram_size = 262144U;
      #line 14783 
      break;
      #line 14784 
      default: 
               #line 14784 
      ;
      #line 14785 
      tp->nvram_size = 131072U;
      #line 14786 
      break;
    }
    #line 14788 
    break;
    #line 14789 
    case (unsigned int)33554432: 
                                 #line 14789 
    ;
    #line 14790 
    case (unsigned int)37748736: 
                                 #line 14790 
    ;
    #line 14791 
    case (unsigned int)1: 
                          #line 14791 
    ;
    #line 14792 
    case (unsigned int)37748737: 
                                 #line 14792 
    ;
    #line 14793 
    case (unsigned int)33554434: 
                                 #line 14793 
    ;
    #line 14794 
    case (unsigned int)37748738: 
                                 #line 14794 
    ;
    #line 14795 
    case (unsigned int)3: 
                          #line 14795 
    ;
    #line 14796 
    case (unsigned int)37748739: 
                                 #line 14796 
    ;
    #line 14797 
    case (unsigned int)54525954: 
                                 #line 14797 
    ;
    #line 14798 
    case (unsigned int)54525953: 
                                 #line 14798 
    ;
    #line 14799 
    tp->nvram_jedecnum = 32U;
    #line 14800 
    _tg3_flag_set((enum TG3_FLAGS)TG3_FLAG_NVRAM_BUFFERED,(unsigned long *)(& tp->tg3_flags));
    #line 14801 
    _tg3_flag_set((enum TG3_FLAGS)TG3_FLAG_FLASH,(unsigned long *)(& tp->tg3_flags));
    #line 14803 
    switch (nvcfg1 & 62914563U) {
      #line 14804 
      case (unsigned int)33554434: 
                                   #line 14804 
      ;
      #line 14805 
      case (unsigned int)3: 
                            #line 14805 
      ;
      #line 14807 
      break;
      #line 14808 
      case (unsigned int)37748738: 
                                   #line 14808 
      ;
      #line 14809 
      case (unsigned int)37748739: 
                                   #line 14809 
      ;
      #line 14810 
      tp->nvram_size = 262144U;
      #line 14811 
      break;
      #line 14812 
      default: 
               #line 14812 
      ;
      #line 14813 
      tp->nvram_size = 131072U;
      #line 14814 
      break;
    }
    #line 14816 
    break;
    #line 14817 
    default: 
             #line 14817 
    ;
    #line 14818 
    _tg3_flag_set((enum TG3_FLAGS)TG3_FLAG_NO_NVRAM,(unsigned long *)(& tp->tg3_flags));
    #line 14819 
    return;
  }
  #line 14822 
  tg3_nvram_get_pagesize(tp,nvcfg1);
  #line 14823 
  if (tp->nvram_pagesize != 264U && tp->nvram_pagesize != 528U) 
                                                                #line 14824 
                                                                _tg3_flag_set((enum TG3_FLAGS)TG3_FLAG_NO_NVRAM_ADDR_TRANS,(unsigned long *)(& tp->tg3_flags));
  #line 14825 
  return;
}

#line 14827  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
static void tg3_get_5720_nvram_info(struct tg3 *tp)
{
  #line 14829 
  u32 nvcfg1;
  #line 14829 
  u32 nvmpinstrp;
  #line 14829 
  u32 nv_status;
  #line 14831 
  nvcfg1 = (*(tp->read32))(tp,28692U);
  #line 14832 
  nvmpinstrp = nvcfg1 & 62914563U;
  #line 14834 
  if (tp->pci_chip_rev_id >> 12 == 22370U) {
    #line 14835 
    if ((nvcfg1 & 65011715U) == 0U) {
      #line 14836 
      _tg3_flag_set((enum TG3_FLAGS)TG3_FLAG_NO_NVRAM,(unsigned long *)(& tp->tg3_flags));
      #line 14837 
      return;
    }
    #line 14840 
    switch (nvmpinstrp) {
      #line 14841 
      case (u32)8388608: 
                         #line 14841 
      ;
      #line 14842 
      case (u32)8388610: 
                         #line 14842 
      ;
      #line 14843 
      case (u32)8388609: 
                         #line 14843 
      ;
      #line 14844 
      case (u32)8388611: 
                         #line 14844 
      ;
      #line 14845 
      case (u32)58720258: 
                          #line 14845 
      ;
      #line 14846 
      tp->nvram_pagesize = 4096U;
      #line 14847 
      tp->nvram_jedecnum = 194U;
      #line 14848 
      _tg3_flag_set((enum TG3_FLAGS)TG3_FLAG_NVRAM_BUFFERED,(unsigned long *)(& tp->tg3_flags));
      #line 14849 
      _tg3_flag_set((enum TG3_FLAGS)TG3_FLAG_NO_NVRAM_ADDR_TRANS,(unsigned long *)(& tp->tg3_flags));
      #line 14850 
      _tg3_flag_set((enum TG3_FLAGS)TG3_FLAG_FLASH,(unsigned long *)(& tp->tg3_flags));
      #line 14851 
      nv_status = (*(tp->read32))(tp,28728U);
      #line 14852 
      tp->nvram_size = (unsigned int)((1 << ((nv_status >> 16) & 7U)) << 17);
      #line 14856 
      return;
      #line 14858 
      case (u32)33554433: 
                          #line 14858 
      ;
      #line 14859 
      nvmpinstrp = 1U;
      #line 14860 
      break;
      #line 14861 
      case (u32)33554435: 
                          #line 14861 
      ;
      #line 14862 
      nvmpinstrp = 3U;
      #line 14863 
      break;
      #line 14864 
      case (u32)50331650: 
                          #line 14864 
      ;
      #line 14868 
      nvmpinstrp = 62914561U;
      #line 14869 
      break;
    }
  }
  #line 14873 
  switch (nvmpinstrp) {
    #line 14874 
    case (u32)1: 
                 #line 14874 
    ;
    #line 14875 
    case (u32)3: 
                 #line 14875 
    ;
    #line 14876 
    tp->nvram_jedecnum = 31U;
    #line 14877 
    _tg3_flag_set((enum TG3_FLAGS)TG3_FLAG_NVRAM_BUFFERED,(unsigned long *)(& tp->tg3_flags));
    #line 14879 
    nvcfg1 &= 2147483647U;
    #line 14880 
    (*(tp->write32))(tp,28692U,nvcfg1);
    #line 14881 
    if (nvmpinstrp == 1U) 
                          #line 14882 
                          tp->nvram_pagesize = 524288U; else 
                                                             #line 14884 
                                                             tp->nvram_pagesize = 2048U;
    #line 14885 
    return;
    #line 14886 
    case (u32)16777216: 
                        #line 14886 
    ;
    #line 14887 
    case (u32)25165824: 
                        #line 14887 
    ;
    #line 14888 
    case (u32)29360128: 
                        #line 14888 
    ;
    #line 14889 
    case (u32)16777218: 
                        #line 14889 
    ;
    #line 14890 
    case (u32)25165826: 
                        #line 14890 
    ;
    #line 14891 
    case (u32)29360130: 
                        #line 14891 
    ;
    #line 14892 
    case (u32)16777217: 
                        #line 14892 
    ;
    #line 14893 
    case (u32)25165825: 
                        #line 14893 
    ;
    #line 14894 
    case (u32)29360129: 
                        #line 14894 
    ;
    #line 14895 
    case (u32)16777219: 
                        #line 14895 
    ;
    #line 14896 
    case (u32)29360131: 
                        #line 14896 
    ;
    #line 14897 
    case (u32)62914560: 
                        #line 14897 
    ;
    #line 14898 
    tp->nvram_jedecnum = 31U;
    #line 14899 
    _tg3_flag_set((enum TG3_FLAGS)TG3_FLAG_NVRAM_BUFFERED,(unsigned long *)(& tp->tg3_flags));
    #line 14900 
    _tg3_flag_set((enum TG3_FLAGS)TG3_FLAG_FLASH,(unsigned long *)(& tp->tg3_flags));
    #line 14902 
    switch (nvmpinstrp) {
      #line 14903 
      case (u32)16777218: 
                          #line 14903 
      ;
      #line 14904 
      case (u32)25165826: 
                          #line 14904 
      ;
      #line 14905 
      case (u32)29360130: 
                          #line 14905 
      ;
      #line 14906 
      tp->nvram_size = 262144U;
      #line 14907 
      break;
      #line 14908 
      case (u32)16777217: 
                          #line 14908 
      ;
      #line 14909 
      case (u32)25165825: 
                          #line 14909 
      ;
      #line 14910 
      case (u32)29360129: 
                          #line 14910 
      ;
      #line 14911 
      tp->nvram_size = 524288U;
      #line 14912 
      break;
      #line 14913 
      case (u32)16777219: 
                          #line 14913 
      ;
      #line 14914 
      case (u32)29360131: 
                          #line 14914 
      ;
      #line 14915 
      tp->nvram_size = 1048576U;
      #line 14916 
      break;
      #line 14917 
      default: 
               #line 14917 
      ;
      #line 14918 
      if (tp->pci_chip_rev_id >> 12 != 22370U) 
                                               #line 14919 
                                               tp->nvram_size = 131072U;
      #line 14920 
      break;
    }
    #line 14922 
    break;
    #line 14923 
    case (u32)33554432: 
                        #line 14923 
    ;
    #line 14924 
    case (u32)50331648: 
                        #line 14924 
    ;
    #line 14925 
    case (u32)41943040: 
                        #line 14925 
    ;
    #line 14926 
    case (u32)46137344: 
                        #line 14926 
    ;
    #line 14927 
    case (u32)33554434: 
                        #line 14927 
    ;
    #line 14928 
    case (u32)50331650: 
                        #line 14928 
    ;
    #line 14929 
    case (u32)41943042: 
                        #line 14929 
    ;
    #line 14930 
    case (u32)46137346: 
                        #line 14930 
    ;
    #line 14931 
    case (u32)33554433: 
                        #line 14931 
    ;
    #line 14932 
    case (u32)50331649: 
                        #line 14932 
    ;
    #line 14933 
    case (u32)41943041: 
                        #line 14933 
    ;
    #line 14934 
    case (u32)46137345: 
                        #line 14934 
    ;
    #line 14935 
    case (u32)33554435: 
                        #line 14935 
    ;
    #line 14936 
    case (u32)50331651: 
                        #line 14936 
    ;
    #line 14937 
    case (u32)41943043: 
                        #line 14937 
    ;
    #line 14938 
    case (u32)46137347: 
                        #line 14938 
    ;
    #line 14939 
    case (u32)62914562: 
                        #line 14939 
    ;
    #line 14940 
    case (u32)62914561: 
                        #line 14940 
    ;
    #line 14941 
    tp->nvram_jedecnum = 32U;
    #line 14942 
    _tg3_flag_set((enum TG3_FLAGS)TG3_FLAG_NVRAM_BUFFERED,(unsigned long *)(& tp->tg3_flags));
    #line 14943 
    _tg3_flag_set((enum TG3_FLAGS)TG3_FLAG_FLASH,(unsigned long *)(& tp->tg3_flags));
    #line 14945 
    switch (nvmpinstrp) {
      #line 14946 
      case (u32)33554434: 
                          #line 14946 
      ;
      #line 14947 
      case (u32)50331650: 
                          #line 14947 
      ;
      #line 14948 
      case (u32)41943042: 
                          #line 14948 
      ;
      #line 14949 
      case (u32)46137346: 
                          #line 14949 
      ;
      #line 14950 
      tp->nvram_size = 262144U;
      #line 14951 
      break;
      #line 14952 
      case (u32)33554433: 
                          #line 14952 
      ;
      #line 14953 
      case (u32)50331649: 
                          #line 14953 
      ;
      #line 14954 
      case (u32)41943041: 
                          #line 14954 
      ;
      #line 14955 
      case (u32)46137345: 
                          #line 14955 
      ;
      #line 14956 
      tp->nvram_size = 524288U;
      #line 14957 
      break;
      #line 14958 
      case (u32)33554435: 
                          #line 14958 
      ;
      #line 14959 
      case (u32)50331651: 
                          #line 14959 
      ;
      #line 14960 
      case (u32)41943043: 
                          #line 14960 
      ;
      #line 14961 
      case (u32)46137347: 
                          #line 14961 
      ;
      #line 14962 
      tp->nvram_size = 1048576U;
      #line 14963 
      break;
      #line 14964 
      default: 
               #line 14964 
      ;
      #line 14965 
      if (tp->pci_chip_rev_id >> 12 != 22370U) 
                                               #line 14966 
                                               tp->nvram_size = 131072U;
      #line 14967 
      break;
    }
    #line 14969 
    break;
    #line 14970 
    default: 
             #line 14970 
    ;
    #line 14971 
    _tg3_flag_set((enum TG3_FLAGS)TG3_FLAG_NO_NVRAM,(unsigned long *)(& tp->tg3_flags));
    #line 14972 
    return;
  }
  #line 14975 
  tg3_nvram_get_pagesize(tp,nvcfg1);
  #line 14976 
  if (tp->nvram_pagesize != 264U && tp->nvram_pagesize != 528U) 
                                                                #line 14977 
                                                                _tg3_flag_set((enum TG3_FLAGS)TG3_FLAG_NO_NVRAM_ADDR_TRANS,(unsigned long *)(& tp->tg3_flags));
  #line 14979 
  if (tp->pci_chip_rev_id >> 12 == 22370U) {
    #line 14980 
    u32 val;
    #line 14982 
    if (tg3_nvram_read(tp,0U,& val) != 0) 
                                          #line 14983 
                                          return;
    #line 14985 
    if (val != 1721324970U && (val & 4278190080U) != 2768240640U) 
                                                                  #line 14987 
                                                                  _tg3_flag_set((enum TG3_FLAGS)TG3_FLAG_NO_NVRAM,(unsigned long *)(& tp->tg3_flags));
  }
  #line 14989 
  return;
}

#line 14992  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
static void tg3_nvram_init(struct tg3 *tp)
{
  #line 14994 
  if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_IS_SSB_CORE,
                (unsigned long *)(& tp->tg3_flags)) != 0) {
    #line 14996 
    _tg3_flag_clear((enum TG3_FLAGS)TG3_FLAG_NVRAM,(unsigned long *)(& tp->tg3_flags));
    #line 14997 
    _tg3_flag_clear((enum TG3_FLAGS)TG3_FLAG_NVRAM_BUFFERED,(unsigned long *)(& tp->tg3_flags));
    #line 14998 
    _tg3_flag_set((enum TG3_FLAGS)TG3_FLAG_NO_NVRAM,(unsigned long *)(& tp->tg3_flags));
    #line 14999 
    return;
  }
  #line 15002 
  _tw32_flush(tp,26680U,543162368U,0U);
  #line 15007 
  msleep(1U);
  #line 15010 
  ;
  #line 15010 
  _tw32_flush(tp,26632U,(*(tp->read32))(tp,26632U) | 16777216U,0U);
  #line 15012 
  __const_udelay(429500UL);
  #line 15014 
  if (tp->pci_chip_rev_id >> 12 != 7U && tp->pci_chip_rev_id >> 12 != 0U) {
    #line 15016 
    _tg3_flag_set((enum TG3_FLAGS)TG3_FLAG_NVRAM,(unsigned long *)(& tp->tg3_flags));
    #line 15018 
    if (tg3_nvram_lock(tp) != 0) {
      #line 15019 
      netdev_warn(tp->dev,(char *)"Cannot get nvram lock, %s failed\n",(char *)"tg3_nvram_init");
      #line 15022 
      return;
    }
    #line 15024 
    tg3_enable_nvram_access(tp);
    #line 15026 
    tp->nvram_size = 0U;
    #line 15028 
    if (tp->pci_chip_rev_id >> 12 == 6U) 
                                         #line 15029 
                                         tg3_get_5752_nvram_info(tp);
    else 
      #line 15030 
      if (tp->pci_chip_rev_id >> 12 == 10U) 
                                            #line 15031 
                                            tg3_get_5755_nvram_info(tp);
      else 
        #line 15032 
        if ((tp->pci_chip_rev_id >> 12 == 11U || tp->pci_chip_rev_id >> 12 == 22404U) || tp->pci_chip_rev_id >> 12 == 22405U) 
          #line 15035 
          tg3_get_5787_nvram_info(tp);
        else 
          #line 15036 
          if (tp->pci_chip_rev_id >> 12 == 22369U) 
                                                   #line 15037 
                                                   tg3_get_5761_nvram_info(tp);
          else 
            #line 15038 
            if (tp->pci_chip_rev_id >> 12 == 12U) 
                                                  #line 15039 
                                                  tg3_get_5906_nvram_info(tp);
            else 
              #line 15040 
              if (tp->pci_chip_rev_id >> 12 == 358272U) 
                                                        #line 15040 
                                                        goto _LOR;
              else {
                #line 15040 
                if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_57765_CLASS,
                  (unsigned long *)(& tp->tg3_flags)) != 0) 
                  #line 15040 
                  _LOR: 
                        #line 15042 
                        tg3_get_57780_nvram_info(tp);
                else 
                  #line 15043 
                  if (tp->pci_chip_rev_id >> 12 == 22295U || tp->pci_chip_rev_id >> 12 == 22297U) 
                    #line 15045 
                    tg3_get_5717_nvram_info(tp);
                  else 
                    #line 15046 
                    if (tp->pci_chip_rev_id >> 12 == 22304U || tp->pci_chip_rev_id >> 12 == 22370U) 
                      #line 15048 
                      tg3_get_5720_nvram_info(tp); else 
                                                        #line 15050 
                                                        tg3_get_nvram_info(tp);
              }
    #line 15052 
    if (tp->nvram_size == 0U) 
                              #line 15053 
                              tg3_get_nvram_size(tp);
    #line 15055 
    tg3_disable_nvram_access(tp);
    #line 15056 
    tg3_nvram_unlock(tp);
  }
  else {
    #line 15059 
    _tg3_flag_clear((enum TG3_FLAGS)TG3_FLAG_NVRAM,(unsigned long *)(& tp->tg3_flags));
    #line 15060 
    _tg3_flag_clear((enum TG3_FLAGS)TG3_FLAG_NVRAM_BUFFERED,(unsigned long *)(& tp->tg3_flags));
    #line 15062 
    tg3_get_eeprom_size(tp);
  }
  #line 15064 
  return;
}

#line 15071  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
static struct subsys_tbl_ent subsys_id_to_phy_id[26U] = {{.subsys_vendor = (unsigned short)5348U, .subsys_devid = (unsigned short)5700U, .phy_id = 1610645584U}, {.subsys_vendor = (unsigned short)5348U, .subsys_devid = (unsigned short)1U, .phy_id = 1610645776U}, {.subsys_vendor = (unsigned short)5348U, .subsys_devid = (unsigned short)2U, .phy_id = 1610678592U}, {.subsys_vendor = (unsigned short)5348U, .subsys_devid = (unsigned short)3U}, {.subsys_vendor = (unsigned short)5348U, .subsys_devid = (unsigned short)5U, .phy_id = 1610645776U}, {.subsys_vendor = (unsigned short)5348U, .subsys_devid = (unsigned short)6U, .phy_id = 1610645776U}, {.subsys_vendor = (unsigned short)5348U, .subsys_devid = (unsigned short)7U}, {.subsys_vendor = (unsigned short)5348U, .subsys_devid = (unsigned short)8U, .phy_id = 1610645776U}, {.subsys_vendor = (unsigned short)5348U, .subsys_devid = (unsigned short)32776U, .phy_id = 1610645776U}, {.subsys_vendor = (unsigned short)5348U, .subsys_devid = (unsigned short)9U, .phy_id = 1610645856U}, {.subsys_vendor = (unsigned short)5348U, .subsys_devid = (unsigned short)32777U, .phy_id = 1610645856U}, {.subsys_vendor = (unsigned short)4279U, .subsys_devid = (unsigned short)4096U, .phy_id = 1610645584U}, {.subsys_vendor = (unsigned short)4279U, .subsys_devid = (unsigned short)4102U, .phy_id = 1610645776U}, {.subsys_vendor = (unsigned short)4279U, .subsys_devid = (unsigned short)4100U}, {.subsys_vendor = (unsigned short)4279U, .subsys_devid = (unsigned short)4103U, .phy_id = 1610645776U}, {.subsys_vendor = (unsigned short)4279U, .subsys_devid = (unsigned short)4104U, .phy_id = 1610645776U}, {.subsys_vendor = (unsigned short)4136U, .subsys_devid = (unsigned short)209U, .phy_id = 1610645584U}, {.subsys_vendor = (unsigned short)4136U, .subsys_devid = (unsigned short)262U, .phy_id = 1610645584U}, {.subsys_vendor = (unsigned short)4136U, .subsys_devid = (unsigned short)265U, .phy_id = 1610645616U}, {.subsys_vendor = (unsigned short)4136U, .subsys_devid = (unsigned short)266U, .phy_id = 1610645616U}, {.subsys_vendor = (unsigned short)3601U, .subsys_devid = (unsigned short)124U, .phy_id = 1610645776U}, {.subsys_vendor = (unsigned short)3601U, .subsys_devid = (unsigned short)154U, .phy_id = 1610645776U}, {.subsys_vendor = (unsigned short)3601U, .subsys_devid = (unsigned short)125U}, {.subsys_vendor = (unsigned short)3601U, .subsys_devid = (unsigned short)133U, .phy_id = 1610645776U}, {.subsys_vendor = (unsigned short)3601U, .subsys_devid = (unsigned short)153U, .phy_id = 1610645776U}, {.subsys_vendor = (unsigned short)4116U, .subsys_devid = (unsigned short)641U}};
#line 15135  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
static struct subsys_tbl_ent *tg3_lookup_by_subsys(struct tg3 *tp)
{
  #line 15137 
  int i;
  #line 15139 
  i = 0;
  #line 15139 
  while ((unsigned int)i <= 25U) {
    #line 15140 
    if ((int)subsys_id_to_phy_id[i].subsys_vendor == (int)(tp->pdev)->subsystem_vendor && (int)subsys_id_to_phy_id[i].subsys_devid == (int)(tp->pdev)->subsystem_device) 
      #line 15144 
      return & subsys_id_to_phy_id[i];
    #line 15139 
    i ++;
  }
  #line 15146 
  return (struct subsys_tbl_ent *)0;
}

#line 15149  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
static void tg3_get_eeprom_hw_cfg(struct tg3 *tp)
{
  #line 15151 
  u32 val;
  #line 15153 
  tp->phy_id = 4294967295U;
  #line 15154 
  tp->led_ctrl = 2048U;
  #line 15157 
  _tg3_flag_set((enum TG3_FLAGS)TG3_FLAG_EEPROM_WRITE_PROT,(unsigned long *)(& tp->tg3_flags));
  #line 15158 
  _tg3_flag_set((enum TG3_FLAGS)TG3_FLAG_WOL_CAP,(unsigned long *)(& tp->tg3_flags));
  #line 15160 
  if (tp->pci_chip_rev_id >> 12 == 12U) {
    #line 15161 
    if (((*(tp->read32))(tp,31748U) & 32U) == 0U) {
      #line 15162 
      _tg3_flag_clear((enum TG3_FLAGS)TG3_FLAG_EEPROM_WRITE_PROT,(unsigned long *)(& tp->tg3_flags));
      #line 15163 
      _tg3_flag_set((enum TG3_FLAGS)TG3_FLAG_IS_NIC,(unsigned long *)(& tp->tg3_flags));
    }
    #line 15165 
    val = (*(tp->read32))(tp,20740U);
    #line 15166 
    if ((val & 4096U) != 0U) 
                             #line 15167 
                             _tg3_flag_set((enum TG3_FLAGS)TG3_FLAG_ASPM_WORKAROUND,(unsigned long *)(& tp->tg3_flags));
    #line 15168 
    if ((val & 1U) != 0U && (val & 4U) != 0U) {
      #line 15170 
      _tg3_flag_set((enum TG3_FLAGS)TG3_FLAG_WOL_ENABLE,(unsigned long *)(& tp->tg3_flags));
      #line 15171 
      device_set_wakeup_enable(& (tp->pdev)->dev,(_Bool)1);
    }
    #line 15173 
    goto done;
  }
  #line 15176 
  tg3_read_mem(tp,2900U,& val);
  #line 15177 
  if (val == 1264940628U) {
    #line 15178 
    u32 nic_cfg;
    #line 15178 
    u32 led_cfg;
    #line 15180 
    u32 nic_phy_id;
    #line 15180 
    u32 ver;
    #line 15180 
    u32 eeprom_phy_id;
    #line 15179 
    u32 cfg2 = 0U;
    #line 15179 
    u32 cfg4 = 0U;
    #line 15179 
    u32 cfg5 = 0U;
    #line 15181 
    int eeprom_phy_serdes = 0;
    #line 15183 
    tg3_read_mem(tp,2904U,& nic_cfg);
    #line 15184 
    tp->nic_sram_data_cfg = nic_cfg;
    #line 15186 
    tg3_read_mem(tp,2908U,& ver);
    #line 15187 
    ver >>= 16;
    #line 15188 
    if ((((tp->pci_chip_rev_id >> 12 != 7U && tp->pci_chip_rev_id >> 12 != 0U) && tp->pci_chip_rev_id >> 12 != 1U) && ver != 0U) && ver <= 255U) 
      #line 15192 
      tg3_read_mem(tp,3384U,& cfg2);
    #line 15194 
    if (tp->pci_chip_rev_id >> 12 == 22405U) 
                                             #line 15195 
                                             tg3_read_mem(tp,3424U,& cfg4);
    #line 15197 
    if ((tp->pci_chip_rev_id >> 12 == 22295U || tp->pci_chip_rev_id >> 12 == 22297U) || tp->pci_chip_rev_id >> 12 == 22304U) 
      #line 15200 
      tg3_read_mem(tp,3596U,& cfg5);
    #line 15202 
    if ((nic_cfg & 48U) == 32U) 
                                #line 15204 
                                eeprom_phy_serdes = 1;
    #line 15206 
    tg3_read_mem(tp,2932U,& nic_phy_id);
    #line 15207 
    if (nic_phy_id != 0U) {
      #line 15208 
      u32 id1 = nic_phy_id & 4294901760U;
      #line 15209 
      u32 id2 = nic_phy_id & 65535U;
      #line 15211 
      eeprom_phy_id = (id1 >> 16) << 10;
      #line 15212 
      eeprom_phy_id = ((id2 << 16) & 4227858432U) | eeprom_phy_id;
      #line 15213 
      eeprom_phy_id = (id2 & 1023U) | eeprom_phy_id;
    }
    else 
         #line 15215 
         eeprom_phy_id = 0U;
    #line 15217 
    tp->phy_id = eeprom_phy_id;
    #line 15218 
    if (eeprom_phy_serdes != 0) {
      #line 15219 
      if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_5705_PLUS,
                  (unsigned long *)(& tp->tg3_flags)) == 0) 
        #line 15220 
        tp->phy_flags |= 16U; else 
                                   #line 15222 
                                   tp->phy_flags |= 32U;
    }
    #line 15225 
    if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_5750_PLUS,
                  (unsigned long *)(& tp->tg3_flags)) != 0) 
      #line 15226 
      led_cfg = cfg2 & 98316U; else 
                                    #line 15229 
                                    led_cfg = nic_cfg & 12U;
    #line 15231 
    switch (led_cfg) {
      #line 15232 
      default: 
               #line 15232 
      ;
      #line 15233 
      case (u32)4: 
                   #line 15233 
      ;
      #line 15234 
      tp->led_ctrl = 2048U;
      #line 15235 
      break;
      #line 15237 
      case (u32)8: 
                   #line 15237 
      ;
      #line 15238 
      tp->led_ctrl = 4096U;
      #line 15239 
      break;
      #line 15241 
      case (u32)0: 
                   #line 15241 
      ;
      #line 15242 
      tp->led_ctrl = 0U;
      #line 15247 
      if (tp->pci_chip_rev_id >> 12 == 7U || tp->pci_chip_rev_id >> 12 == 0U) 
        #line 15249 
        tp->led_ctrl = 2048U;
      #line 15251 
      break;
      #line 15253 
      case (u32)32768: 
                       #line 15253 
      ;
      #line 15254 
      tp->led_ctrl = 16384U;
      #line 15255 
      if (tp->pci_chip_rev_id + 4294950912U > 1U) 
                                                  #line 15257 
                                                  tp->led_ctrl |= 6144U;
      #line 15260 
      if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_5717_PLUS,
                  (unsigned long *)(& tp->tg3_flags)) != 0) 
        #line 15262 
        tp->led_ctrl |= 4294443008U;
      else 
        #line 15260 
        if (tp->pci_chip_rev_id >> 12 == 22370U) 
                                                 #line 15262 
                                                 tp->led_ctrl |= 4294443008U;
      #line 15265 
      break;
      #line 15267 
      case (u32)65536: 
                       #line 15267 
      ;
      #line 15268 
      tp->led_ctrl = 8192U;
      #line 15269 
      break;
      #line 15271 
      case (u32)98304: 
                       #line 15271 
      ;
      #line 15272 
      tp->led_ctrl = 32768U;
      #line 15273 
      if (tp->pci_chip_rev_id != 16384U) 
                                         #line 15274 
                                         tp->led_ctrl |= 6144U;
      #line 15276 
      break;
    }
    #line 15280 
    if ((tp->pci_chip_rev_id >> 12 == 7U || tp->pci_chip_rev_id >> 12 == 0U) && (unsigned int)(tp->pdev)->subsystem_vendor == 4136U) 
      #line 15283 
      tp->led_ctrl = 4096U;
    #line 15285 
    if (tp->pci_chip_rev_id >> 8 == 358464U) 
                                             #line 15286 
                                             tp->led_ctrl = 2048U;
    #line 15288 
    if ((nic_cfg & 256U) != 0U) {
      #line 15289 
      _tg3_flag_set((enum TG3_FLAGS)TG3_FLAG_EEPROM_WRITE_PROT,(unsigned long *)(& tp->tg3_flags));
      #line 15290 
      if ((unsigned int)(tp->pdev)->subsystem_vendor == 5663U && ((unsigned int)(tp->pdev)->subsystem_device == 8282U || (unsigned int)(tp->pdev)->subsystem_device == 8291U)) 
        #line 15294 
        _tg3_flag_clear((enum TG3_FLAGS)TG3_FLAG_EEPROM_WRITE_PROT,(unsigned long *)(& tp->tg3_flags));
    }
    else {
      #line 15296 
      _tg3_flag_clear((enum TG3_FLAGS)TG3_FLAG_EEPROM_WRITE_PROT,(unsigned long *)(& tp->tg3_flags));
      #line 15297 
      _tg3_flag_set((enum TG3_FLAGS)TG3_FLAG_IS_NIC,(unsigned long *)(& tp->tg3_flags));
    }
    #line 15300 
    if ((nic_cfg & 128U) != 0U) {
      #line 15301 
      _tg3_flag_set((enum TG3_FLAGS)TG3_FLAG_ENABLE_ASF,(unsigned long *)(& tp->tg3_flags));
      #line 15302 
      if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_5750_PLUS,
                  (unsigned long *)(& tp->tg3_flags)) != 0) 
        #line 15303 
        _tg3_flag_set((enum TG3_FLAGS)TG3_FLAG_ASF_NEW_HANDSHAKE,(unsigned long *)(& tp->tg3_flags));
    }
    #line 15306 
    if ((nic_cfg & 2097152U) != 0U) {
      #line 15306 
      if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_5750_PLUS,
                  (unsigned long *)(& tp->tg3_flags)) != 0) 
        #line 15308 
        _tg3_flag_set((enum TG3_FLAGS)TG3_FLAG_ENABLE_APE,(unsigned long *)(& tp->tg3_flags));
    }
    #line 15310 
    if ((tp->phy_flags & 48U) != 0U && (nic_cfg & 16384U) == 0U) 
                                                                 #line 15312 
                                                                 _tg3_flag_clear((enum TG3_FLAGS)TG3_FLAG_WOL_CAP,(unsigned long *)(& tp->tg3_flags));
    #line 15314 
    if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_WOL_CAP,
                  (unsigned long *)(& tp->tg3_flags)) != 0) 
      #line 15314 
      if ((nic_cfg & 64U) != 0U) {
        #line 15316 
        _tg3_flag_set((enum TG3_FLAGS)TG3_FLAG_WOL_ENABLE,(unsigned long *)(& tp->tg3_flags));
        #line 15317 
        device_set_wakeup_enable(& (tp->pdev)->dev,(_Bool)1);
      }
    #line 15320 
    if ((cfg2 & 131072U) != 0U) 
                                #line 15321 
                                tp->phy_flags |= 512U;
    #line 15325 
    if ((cfg2 & 262144U) != 0U) 
                                #line 15326 
                                tp->phy_flags |= 65536U;
    #line 15328 
    if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_57765_PLUS,
                  (unsigned long *)(& tp->tg3_flags)) != 0) 
      #line 15328 
      goto _LOR;
    else 
      #line 15328 
      if (tp->pci_chip_rev_id >> 12 == 22404U && tp->pci_chip_rev_id >> 8 != 358464U) {
        #line 15328 
        _LOR: 
              #line 15330 
        ;
        #line 15330 
        if ((cfg2 & 16384U) != 0U) 
                                   #line 15332 
                                   tp->phy_flags |= 256U;
      }
    #line 15334 
    if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_PCI_EXPRESS,
                  (unsigned long *)(& tp->tg3_flags)) != 0) {
      #line 15335 
      u32 cfg3;
      #line 15337 
      tg3_read_mem(tp,3388U,& cfg3);
      #line 15338 
      if (tp->pci_chip_rev_id >> 12 != 22405U) {
        #line 15338 
        if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_57765_PLUS,
                  (unsigned long *)(& tp->tg3_flags)) == 0) 
          #line 15339 
          if ((cfg3 & 2U) != 0U) 
                                 #line 15341 
                                 _tg3_flag_set((enum TG3_FLAGS)TG3_FLAG_ASPM_WORKAROUND,(unsigned long *)(& tp->tg3_flags));
      }
      #line 15342 
      if ((cfg3 & 4194304U) != 0U) 
                                   #line 15343 
                                   tp->phy_flags |= 1048576U;
      #line 15344 
      if ((cfg3 & 8388608U) != 0U) 
                                   #line 15345 
                                   tp->phy_flags |= 524288U;
    }
    #line 15348 
    if ((cfg4 & 4U) != 0U) 
                           #line 15349 
                           _tg3_flag_set((enum TG3_FLAGS)TG3_FLAG_RGMII_INBAND_DISABLE,(unsigned long *)(& tp->tg3_flags));
    #line 15350 
    if ((cfg4 & 8U) != 0U) 
                           #line 15351 
                           _tg3_flag_set((enum TG3_FLAGS)TG3_FLAG_RGMII_EXT_IBND_RX_EN,(unsigned long *)(& tp->tg3_flags));
    #line 15352 
    if ((cfg4 & 16U) != 0U) 
                            #line 15353 
                            _tg3_flag_set((enum TG3_FLAGS)TG3_FLAG_RGMII_EXT_IBND_TX_EN,(unsigned long *)(& tp->tg3_flags));
    #line 15355 
    if ((cfg5 & 2U) != 0U) 
                           #line 15356 
                           tp->phy_flags |= 4194304U;
  }
  #line 15358 
  done: 
        #line 15358 
  ;
  #line 15359 
  if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_WOL_CAP,
                   (unsigned long *)(& tp->tg3_flags)) != 0) {
    #line 15360 
    ;
    #line 15360 
    device_set_wakeup_enable(& (tp->pdev)->dev,(_Bool)(_tg3_flag((enum TG3_FLAGS)TG3_FLAG_WOL_ENABLE,
                  (unsigned long *)(& tp->tg3_flags)) != 0));
  }
  else 
       #line 15363 
       device_set_wakeup_capable(& (tp->pdev)->dev,(_Bool)0);
  #line 15364 
  return;
}

#line 15366  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
static int tg3_ape_otp_read(struct tg3 *tp, u32 offset, u32 *val)
{
  #line 15368 
  int i;
  #line 15368 
  int err;
  #line 15369 
  u32 val2;
  #line 15369 
  u32 off = offset * 8U;
  #line 15371 
  err = tg3_nvram_lock(tp);
  #line 15372 
  if (err != 0) 
                #line 15373 
                return err;
  #line 15375 
  tg3_ape_write32(tp,240U,off | 2147483648U);
  #line 15376 
  tg3_ape_write32(tp,232U,2097153U);
  #line 15378 
  tg3_ape_read32(tp,232U);
  #line 15379 
  __const_udelay(42950UL);
  #line 15381 
  i = 0;
  #line 15381 
  while (i <= 99) {
    #line 15382 
    val2 = tg3_ape_read32(tp,236U);
    #line 15383 
    if ((val2 & 1U) != 0U) {
      #line 15384 
      *val = tg3_ape_read32(tp,248U);
      #line 15385 
      break;
    }
    #line 15387 
    __const_udelay(42950UL);
    #line 15381 
    i ++;
  }
  #line 15390 
  tg3_ape_write32(tp,232U,0U);
  #line 15392 
  tg3_nvram_unlock(tp);
  #line 15393 
  if ((val2 & 1U) != 0U) 
                         #line 15394 
                         return 0;
  #line 15396 
  return -16;
}

#line 15399  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
static int tg3_issue_otp_command(struct tg3 *tp, u32 cmd)
{
  #line 15401 
  int i;
  #line 15402 
  u32 val;
  #line 15415 
  int tmp;
  #line 15404 
  (*(tp->write32))(tp,29956U,cmd | 1U);
  #line 15405 
  (*(tp->write32))(tp,29956U,cmd);
  #line 15408 
  i = 0;
  #line 15408 
  while (i <= 99) {
    #line 15409 
    val = (*(tp->read32))(tp,29960U);
    #line 15410 
    if ((val & 1U) != 0U) 
                          #line 15411 
                          break;
    #line 15412 
    __const_udelay(42950UL);
    #line 15408 
    i ++;
  }
  #line 15415 
  if ((val & 1U) != 0U) 
                        #line 15415 
                        tmp = 0; else 
                                      #line 15415 
                                      tmp = -16;
  #line 15415 
  return tmp;
}

#line 15422  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
static u32 tg3_read_otp_phycfg(struct tg3 *tp)
{
  #line 15424 
  u32 bhalf_otp;
  #line 15424 
  u32 thalf_otp;
  #line 15426 
  (*(tp->write32))(tp,29952U,1U);
  #line 15428 
  if (tg3_issue_otp_command(tp,8U) != 0) 
                                         #line 15429 
                                         return 0U;
  #line 15431 
  (*(tp->write32))(tp,29964U,160U);
  #line 15433 
  if (tg3_issue_otp_command(tp,0U) != 0) 
                                         #line 15434 
                                         return 0U;
  #line 15436 
  thalf_otp = (*(tp->read32))(tp,29972U);
  #line 15438 
  (*(tp->write32))(tp,29964U,128U);
  #line 15440 
  if (tg3_issue_otp_command(tp,0U) != 0) 
                                         #line 15441 
                                         return 0U;
  #line 15443 
  bhalf_otp = (*(tp->read32))(tp,29972U);
  #line 15445 
  return (thalf_otp << 16) | (bhalf_otp >> 16);
}

#line 15448  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
static void tg3_phy_init_link_config(struct tg3 *tp)
{
  #line 15450 
  u32 adv = 64U;
  #line 15452 
  if ((tp->phy_flags & 128U) == 0U) {
    #line 15453 
    if ((tp->phy_flags & 4194304U) == 0U) 
                                          #line 15454 
                                          adv |= 16U;
    #line 15455 
    adv |= 32U;
  }
  #line 15458 
  if ((tp->phy_flags & 48U) == 0U) 
                                   #line 15459 
                                   adv |= 143U; else 
                                                     #line 15465 
                                                     adv |= 1024U;
  #line 15467 
  tp->link_config.advertising = adv;
  #line 15468 
  tp->link_config.speed = 4294967295U;
  #line 15469 
  tp->link_config.duplex = (unsigned char)255U;
  #line 15470 
  tp->link_config.autoneg = (unsigned char)1U;
  #line 15471 
  tp->link_config.active_speed = 4294967295U;
  #line 15472 
  tp->link_config.active_duplex = (unsigned char)255U;
  #line 15474 
  tp->old_link = -1;
  #line 15475 
  return;
}

#line 15477  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
static int tg3_phy_probe(struct tg3 *tp)
{
  #line 15479 
  u32 hw_phy_id_1;
  #line 15479 
  u32 hw_phy_id_2;
  #line 15480 
  u32 hw_phy_id;
  #line 15480 
  u32 hw_phy_id_masked;
  #line 15481 
  int err;
  #line 15484 
  _tg3_flag_set((enum TG3_FLAGS)TG3_FLAG_PAUSE_AUTONEG,(unsigned long *)(& tp->tg3_flags));
  #line 15485 
  tp->link_config.flowctrl = (unsigned char)3U;
  #line 15487 
  if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_ENABLE_APE,
                (unsigned long *)(& tp->tg3_flags)) != 0) 
    #line 15488 
    switch (tp->pci_fn) {
      #line 15489 
      case 0: 
              #line 15489 
      ;
      #line 15490 
      tp->phy_ape_lock = (unsigned char)0U;
      #line 15491 
      break;
      #line 15492 
      case 1: 
              #line 15492 
      ;
      #line 15493 
      tp->phy_ape_lock = (unsigned char)2U;
      #line 15494 
      break;
      #line 15495 
      case 2: 
              #line 15495 
      ;
      #line 15496 
      tp->phy_ape_lock = (unsigned char)3U;
      #line 15497 
      break;
      #line 15498 
      case 3: 
              #line 15498 
      ;
      #line 15499 
      tp->phy_ape_lock = (unsigned char)5U;
      #line 15500 
      break;
    }
  #line 15504 
  if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_ENABLE_ASF,
                  (unsigned long *)(& tp->tg3_flags)) == 0) 
    #line 15504 
    if ((tp->phy_flags & 48U) == 0U) 
      #line 15505 
      if ((tp->phy_flags & 128U) == 0U) 
                                        #line 15507 
                                        tp->phy_flags &= 4293394431U;
  #line 15510 
  if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_USE_PHYLIB,
                  (unsigned long *)(& tp->tg3_flags)) != 0) {
    #line 15511 
    return tg3_phy_init(tp);
  }
  #line 15516 
  err = 0;
  #line 15517 
  if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_ENABLE_ASF,
                  (unsigned long *)(& tp->tg3_flags)) != 0) 
    #line 15517 
    goto _LOR;
  else {
    #line 15517 
    if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_ENABLE_APE,
                  (unsigned long *)(& tp->tg3_flags)) != 0) {
      #line 15517 
      _LOR: {
              #line 15518 
              hw_phy_id_masked = 4294967295U;
              #line 15518 
              hw_phy_id = hw_phy_id_masked;
            }
    }
    else {
      #line 15525 
      err = tg3_readphy(tp,2,& hw_phy_id_1) | err;
      #line 15526 
      err = tg3_readphy(tp,3,& hw_phy_id_2) | err;
      #line 15528 
      hw_phy_id = (hw_phy_id_1 << 10) & 67107840U;
      #line 15529 
      hw_phy_id = ((hw_phy_id_2 << 16) & 4227858432U) | hw_phy_id;
      #line 15530 
      hw_phy_id = (hw_phy_id_2 & 1023U) | hw_phy_id;
      #line 15532 
      hw_phy_id_masked = hw_phy_id & 4294967280U;
    }
  }
  #line 15535 
  if (err == 0 && ((((((((((((hw_phy_id_masked == 1610645568U || hw_phy_id_masked == 1610645584U) || (hw_phy_id_masked == 1610645616U || hw_phy_id_masked == 1610645776U)) || (hw_phy_id_masked == 1610645856U || hw_phy_id_masked == 1610645904U)) || (hw_phy_id_masked == 1610645920U || hw_phy_id_masked == 1610645888U)) || (hw_phy_id_masked == 1610645760U || hw_phy_id_masked == 1610646336U)) || (hw_phy_id_masked == 1610646352U || hw_phy_id_masked == 3154447584U)) || (hw_phy_id_masked == 3154447552U || hw_phy_id_masked == 3154448080U)) || (hw_phy_id_masked == 3691031616U || hw_phy_id_masked == 3154448336U)) || (hw_phy_id_masked == 1544391168U || hw_phy_id_masked == 3154448368U)) || (hw_phy_id_masked == 1544391232U || hw_phy_id_masked == 1544391200U)) || (hw_phy_id_masked == 1544391520U || hw_phy_id_masked == 2239772544U)) || hw_phy_id_masked == 1610678592U)) {
    #line 15536 
    tp->phy_id = hw_phy_id;
    #line 15537 
    if (hw_phy_id_masked == 1610678592U) 
                                         #line 15538 
                                         tp->phy_flags |= 16U; else 
                                                                    #line 15540 
                                                                    tp->phy_flags &= 4294967279U;
  }
  else 
    #line 15542 
    if (! (tp->phy_id != 4294967295U)) {
      #line 15547 
      struct subsys_tbl_ent *p;
      #line 15552 
      p = tg3_lookup_by_subsys(tp);
      #line 15553 
      if (p != (struct subsys_tbl_ent *)0) 
                                           #line 15554 
                                           tp->phy_id = p->phy_id;
      else {
        #line 15555 
        if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_IS_SSB_CORE,
                  (unsigned long *)(& tp->tg3_flags)) == 0) 
          #line 15563 
          return -19;
      }
      #line 15566 
      if (tp->phy_id == 0U || tp->phy_id == 1610678592U) 
                                                         #line 15568 
                                                         tp->phy_flags |= 16U;
    }
  #line 15572 
  if ((tp->phy_flags & 48U) == 0U && (((((tp->pci_chip_rev_id >> 12 == 22297U || tp->pci_chip_rev_id >> 12 == 22304U) || tp->pci_chip_rev_id >> 12 == 358246U) || tp->pci_chip_rev_id >> 12 == 22370U) || tp->pci_chip_rev_id >> 12 == 22295U && tp->pci_chip_rev_id != 91320320U) || tp->pci_chip_rev_id >> 12 == 358277U && tp->pci_chip_rev_id != 1467502592U)) {
    #line 15581 
    tp->phy_flags |= 262144U;
    #line 15583 
    tp->eee.supported = 40U;
    #line 15585 
    tp->eee.advertised = 40U;
    #line 15587 
    tp->eee.eee_enabled = 1U;
    #line 15588 
    tp->eee.tx_lpi_enabled = 1U;
    #line 15589 
    tp->eee.tx_lpi_timer = 2047U;
  }
  #line 15592 
  tg3_phy_init_link_config(tp);
  #line 15594 
  if ((tp->phy_flags & 1048576U) == 0U && (tp->phy_flags & 48U) == 0U) {
    #line 15595 
    if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_ENABLE_APE,
                   (unsigned long *)(& tp->tg3_flags)) == 0) {
      #line 15596 
      if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_ENABLE_ASF,
                   (unsigned long *)(& tp->tg3_flags)) == 0) {
        #line 15598 
        u32 bmsr;
        #line 15598 
        u32 dummy;
        #line 15600 
        tg3_readphy(tp,1,& bmsr);
        #line 15601 
        if (tg3_readphy(tp,1,& bmsr) == 0) 
          #line 15601 
          if ((bmsr & 4U) != 0U) 
                                 #line 15603 
                                 goto skip_phy_reset;
        #line 15605 
        err = tg3_phy_reset(tp);
        #line 15606 
        if (err != 0) 
                      #line 15607 
                      return err;
        #line 15609 
        tg3_phy_set_wirespeed(tp);
        #line 15611 
        if (! tg3_phy_copper_an_config_ok(tp,& dummy)) {
          #line 15612 
          tg3_phy_autoneg_cfg(tp,tp->link_config.advertising,(unsigned int)tp->link_config.flowctrl);
          #line 15615 
          tg3_writephy(tp,0,4608U);
        }
      }
    }
  }
  #line 15620 
  skip_phy_reset: 
                  #line 15620 
  ;
  #line 15621 
  if ((tp->phy_id & 4294967280U) == 1610645584U) {
    #line 15622 
    err = tg3_init_5401phy_dsp(tp);
    #line 15623 
    if (err != 0) 
                  #line 15624 
                  return err;
    #line 15626 
    err = tg3_init_5401phy_dsp(tp);
  }
  #line 15629 
  return err;
}

#line 15632  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
static void tg3_read_vpd(struct tg3 *tp)
{
  #line 15634 
  u8 *vpd_data;
  #line 15635 
  unsigned int block_end;
  #line 15635 
  unsigned int rosize;
  #line 15635 
  unsigned int len;
  #line 15636 
  u32 vpdlen;
  #line 15637 
  int j;
  #line 15637 
  int i = 0;
  #line 15639 
  vpd_data = (u8 *)tg3_vpd_readblock(tp,& vpdlen);
  #line 15640 
  if (vpd_data == (u8 *)0U) 
                            #line 15641 
                            goto out_no_vpd;
  #line 15643 
  i = pci_vpd_find_tag(vpd_data,0U,vpdlen,(unsigned char)144);
  #line 15644 
  if (i < 0) 
             #line 15645 
             goto out_not_found;
  #line 15647 
  rosize = (unsigned int)pci_vpd_lrdt_size(vpd_data + (unsigned long)i);
  #line 15648 
  block_end = ((unsigned int)i + rosize) + 3U;
  #line 15649 
  i += 3;
  #line 15651 
  if (block_end > vpdlen) 
                          #line 15652 
                          goto out_not_found;
  #line 15654 
  j = pci_vpd_find_info_keyword(vpd_data,(unsigned int)i,rosize,(char *)"MN");
  #line 15656 
  if (j > 0) {
    #line 15657 
    len = (unsigned int)pci_vpd_info_field_size(vpd_data + (unsigned long)j);
    #line 15659 
    j += 3;
    #line 15660 
    if ((unsigned int)j + len > block_end || len != 4U) 
                                                        #line 15660 
                                                        goto _LOR;
    else {
      #line 15660 
      if (memcmp((void *)(vpd_data + (unsigned long)j),(void *)"1028",4UL) != 0) 
        #line 15660 
        _LOR: 
              #line 15662 
              goto partno;
    }
    #line 15664 
    j = pci_vpd_find_info_keyword(vpd_data,(unsigned int)i,rosize,(char *)"V0");
    #line 15666 
    if (j < 0) 
               #line 15667 
               goto partno;
    #line 15669 
    len = (unsigned int)pci_vpd_info_field_size(vpd_data + (unsigned long)j);
    #line 15671 
    j += 3;
    #line 15672 
    if ((unsigned int)j + len > block_end) 
                                           #line 15673 
                                           goto partno;
    #line 15675 
    if (len > 31U) 
                   #line 15676 
                   len = 31U;
    #line 15677 
    memset((void *)(& tp->fw_ver),0,32UL);
    #line 15678 
    snprintf((char *)(& tp->fw_ver),32UL,(char *)"%.*s bc ",len,vpd_data + (unsigned long)j);
  }
  #line 15682 
  partno: 
          #line 15682 
  ;
  #line 15683 
  i = pci_vpd_find_info_keyword(vpd_data,(unsigned int)i,rosize,(char *)"PN");
  #line 15685 
  if (i < 0) 
             #line 15686 
             goto out_not_found;
  #line 15688 
  len = (unsigned int)pci_vpd_info_field_size(vpd_data + (unsigned long)i);
  #line 15690 
  i += 3;
  #line 15691 
  if (len > 24U || len + (unsigned int)i > vpdlen) 
                                                   #line 15693 
                                                   goto out_not_found;
  #line 15695 
  memcpy((void *)(& tp->board_part_number),(void *)(vpd_data + (unsigned long)i),(unsigned long)len);
  #line 15697 
  out_not_found: 
                 #line 15697 
  ;
  #line 15698 
  kfree((void *)vpd_data);
  #line 15699 
  if ((int)tp->board_part_number[0] != 0) 
                                          #line 15700 
                                          return;
  #line 15702 
  out_no_vpd: 
              #line 15702 
  ;
  #line 15703 
  if (tp->pci_chip_rev_id >> 12 == 22295U) {
    #line 15704 
    if ((unsigned int)(tp->pdev)->device == 5717U || (unsigned int)(tp->pdev)->device == 5733U) 
      #line 15706 
      strcpy((char *)(& tp->board_part_number),(char *)"BCM5717");
    else 
      #line 15707 
      if ((unsigned int)(tp->pdev)->device == 5718U) 
                                                     #line 15708 
                                                     strcpy((char *)(& tp->board_part_number),(char *)"BCM5718"); else 
                                                                    #line 15710 
                                                                    goto nomatch;
  }
  else 
    #line 15711 
    if (tp->pci_chip_rev_id >> 12 == 358272U) {
      #line 15712 
      if ((unsigned int)(tp->pdev)->device == 5778U) 
                                                     #line 15713 
                                                     strcpy((char *)(& tp->board_part_number),(char *)"BCM57780");
      else 
        #line 15714 
        if ((unsigned int)(tp->pdev)->device == 5776U) 
                                                       #line 15715 
                                                       strcpy((char *)(& tp->board_part_number),(char *)"BCM57760");
        else 
          #line 15716 
          if ((unsigned int)(tp->pdev)->device == 5780U) 
                                                         #line 15717 
                                                         strcpy((char *)(& tp->board_part_number),(char *)"BCM57790");
          else 
            #line 15718 
            if ((unsigned int)(tp->pdev)->device == 5777U) 
                                                           #line 15719 
                                                           strcpy((char *)(& tp->board_part_number),(char *)"BCM57788"); else 
                                                                    #line 15721 
                                                                    goto nomatch;
    }
    else 
      #line 15722 
      if (tp->pci_chip_rev_id >> 12 == 358277U) {
        #line 15723 
        if ((unsigned int)(tp->pdev)->device == 5808U) 
                                                       #line 15724 
                                                       strcpy((char *)(& tp->board_part_number),(char *)"BCM57761");
        else 
          #line 15725 
          if ((unsigned int)(tp->pdev)->device == 5812U) 
                                                         #line 15726 
                                                         strcpy((char *)(& tp->board_part_number),(char *)"BCM57765");
          else 
            #line 15727 
            if ((unsigned int)(tp->pdev)->device == 5809U) 
                                                           #line 15728 
                                                           strcpy((char *)(& tp->board_part_number),(char *)"BCM57781");
            else 
              #line 15729 
              if ((unsigned int)(tp->pdev)->device == 5813U) 
                                                             #line 15730 
                                                             strcpy((char *)(& tp->board_part_number),(char *)"BCM57785");
              else 
                #line 15731 
                if ((unsigned int)(tp->pdev)->device == 5810U) 
                                                               #line 15732 
                                                               strcpy((char *)(& tp->board_part_number),(char *)"BCM57791");
                else 
                  #line 15733 
                  if ((unsigned int)(tp->pdev)->device == 5814U) 
                                                                 #line 15734 
                                                                 strcpy((char *)(& tp->board_part_number),(char *)"BCM57795"); else 
                                                                    #line 15736 
                                                                    goto nomatch;
      }
      else 
        #line 15737 
        if (tp->pci_chip_rev_id >> 12 == 358246U) {
          #line 15738 
          if ((unsigned int)(tp->pdev)->device == 5762U) 
                                                         #line 15739 
                                                         strcpy((char *)(& tp->board_part_number),(char *)"BCM57762");
          else 
            #line 15740 
            if ((unsigned int)(tp->pdev)->device == 5766U) 
                                                           #line 15741 
                                                           strcpy((char *)(& tp->board_part_number),(char *)"BCM57766");
            else 
              #line 15742 
              if ((unsigned int)(tp->pdev)->device == 5815U) 
                                                             #line 15743 
                                                             strcpy((char *)(& tp->board_part_number),(char *)"BCM57782");
              else 
                #line 15744 
                if ((unsigned int)(tp->pdev)->device == 5811U) 
                                                               #line 15745 
                                                               strcpy((char *)(& tp->board_part_number),(char *)"BCM57786"); else 
                                                                    #line 15747 
                                                                    goto nomatch;
        }
        else 
          #line 15748 
          if (tp->pci_chip_rev_id >> 12 == 12U) 
                                                #line 15749 
                                                strcpy((char *)(& tp->board_part_number),(char *)"BCM95906");
          else {
            #line 15751 
            nomatch: 
                     #line 15751 
            ;
            #line 15752 
            strcpy((char *)(& tp->board_part_number),(char *)"none");
          }
  #line 15754 
  return;
}

#line 15756  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
static int tg3_fw_img_is_valid(struct tg3 *tp, u32 offset)
{
  #line 15758 
  u32 val;
  #line 15760 
  if (tg3_nvram_read(tp,offset,& val) != 0) 
                                            #line 15764 
                                            return 0;
  else 
    #line 15760 
    if ((val & 4227858432U) != 201326592U) 
                                           #line 15764 
                                           return 0;
    else {
      #line 15761 
      if (tg3_nvram_read(tp,offset + 4U,& val) != 0) 
                                                     #line 15764 
                                                     return 0;
      else 
        #line 15762 
        if (val != 0U) 
                       #line 15764 
                       return 0;
    }
  #line 15766 
  return 1;
}

#line 15769  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
static void tg3_read_bc_ver(struct tg3 *tp)
{
  #line 15771 
  u32 val;
  #line 15771 
  u32 offset;
  #line 15771 
  u32 start;
  #line 15771 
  u32 ver_offset;
  #line 15772 
  int i;
  #line 15772 
  int dst_off;
  #line 15773 
  bool newver = (_Bool)0;
  #line 15775 
  if (tg3_nvram_read(tp,12U,& offset) != 0) 
                                            #line 15777 
                                            return;
  else {
    #line 15775 
    if (tg3_nvram_read(tp,4U,& start) != 0) 
                                            #line 15777 
                                            return;
  }
  #line 15779 
  offset = tg3_nvram_logical_addr(tp,offset);
  #line 15781 
  if (tg3_nvram_read(tp,offset,& val) != 0) 
                                            #line 15782 
                                            return;
  #line 15784 
  if ((val & 4227858432U) == 201326592U) {
    #line 15785 
    if (tg3_nvram_read(tp,offset + 4U,& val) != 0) 
                                                   #line 15786 
                                                   return;
    #line 15788 
    if (val == 0U) 
                   #line 15789 
                   newver = (_Bool)1;
  }
  #line 15792 
  dst_off = (int)cif_strlen((char *)(& tp->fw_ver));
  #line 15794 
  if ((int)newver != 0) {
    #line 15795 
    if (32 - dst_off <= 15) 
                            #line 15797 
                            return;
    else {
      #line 15795 
      if (tg3_nvram_read(tp,offset + 8U,& ver_offset) != 0) 
                                                            #line 15797 
                                                            return;
    }
    #line 15799 
    offset = (offset + ver_offset) - start;
    #line 15800 
    i = 0;
    #line 15800 
    while (i <= 15) {
      {
        #line 15801 
        __be32 v;
        #line 15802 
        if (tg3_nvram_read_be32(tp,offset + (unsigned int)i,& v) != 0) 
          #line 15803 
          return;
        #line 15805 
        memcpy((void *)((char *)(& tp->fw_ver) + ((unsigned long)dst_off + (unsigned long)i)),(void *)(& v),4UL);
      }
      #line 15800 
      i += 4;
    }
  }
  else {
    #line 15808 
    u32 major;
    #line 15808 
    u32 minor;
    #line 15810 
    if (tg3_nvram_read(tp,148U,& ver_offset) != 0) 
                                                   #line 15811 
                                                   return;
    #line 15813 
    major = (ver_offset >> 8) & 255U;
    #line 15815 
    minor = ver_offset & 255U;
    #line 15816 
    snprintf(& tp->fw_ver[dst_off],(unsigned long)(32 - dst_off),(char *)"v%d.%02d",major,minor);
  }
  #line 15819 
  return;
}

#line 15821  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
static void tg3_read_hwsb_ver(struct tg3 *tp)
{
  #line 15823 
  u32 val;
  #line 15823 
  u32 major;
  #line 15823 
  u32 minor;
  #line 15826 
  if (tg3_nvram_read(tp,4U,& val) != 0) 
                                        #line 15827 
                                        return;
  #line 15829 
  major = val >> 27;
  #line 15831 
  minor = (val >> 22) & 31U;
  #line 15834 
  snprintf(& tp->fw_ver[0],32UL,(char *)"sb v%d.%02d",major,minor);
  #line 15835 
  return;
}

#line 15837  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
static void tg3_read_sb_ver(struct tg3 *tp, u32 val)
{
  #line 15839 
  u32 offset;
  #line 15839 
  u32 major;
  #line 15839 
  u32 minor;
  #line 15839 
  u32 build;
  #line 15841 
  ;
  #line 15841 
  strncat((char *)(& tp->fw_ver),(char *)"sb",31UL - cif_strlen((char *)(& tp->fw_ver)));
  #line 15843 
  if ((val & 14680064U) != 2097152U) 
                                     #line 15844 
                                     return;
  #line 15846 
  switch (val & 2031616U) {
    #line 15847 
    case (unsigned int)0: 
                          #line 15847 
    ;
    #line 15848 
    offset = 16U;
    #line 15849 
    break;
    #line 15850 
    case (unsigned int)131072: 
                               #line 15850 
    ;
    #line 15851 
    offset = 20U;
    #line 15852 
    break;
    #line 15853 
    case (unsigned int)196608: 
                               #line 15853 
    ;
    #line 15854 
    offset = 24U;
    #line 15855 
    break;
    #line 15856 
    case (unsigned int)262144: 
                               #line 15856 
    ;
    #line 15857 
    offset = 28U;
    #line 15858 
    break;
    #line 15859 
    case (unsigned int)327680: 
                               #line 15859 
    ;
    #line 15860 
    offset = 32U;
    #line 15861 
    break;
    #line 15862 
    case (unsigned int)393216: 
                               #line 15862 
    ;
    #line 15863 
    offset = 76U;
    #line 15864 
    break;
    #line 15865 
    default: 
             #line 15865 
    ;
    #line 15866 
    return;
  }
  #line 15869 
  if (tg3_nvram_read(tp,offset,& val) != 0) 
                                            #line 15870 
                                            return;
  #line 15872 
  build = (val >> 11) & 31U;
  #line 15874 
  major = (val >> 8) & 7U;
  #line 15876 
  minor = val & 255U;
  #line 15878 
  if (minor > 99U || build > 26U) 
                                  #line 15879 
                                  return;
  #line 15881 
  offset = (unsigned int)cif_strlen((char *)(& tp->fw_ver));
  #line 15882 
  snprintf(& tp->fw_ver[offset],(unsigned long)(32U - offset),(char *)" v%d.%02d",major,minor);
  #line 15885 
  if (build != 0U) {
    #line 15886 
    offset = (unsigned int)cif_strlen((char *)(& tp->fw_ver));
    #line 15887 
    if (offset <= 30U) 
                       #line 15888 
                       tp->fw_ver[offset] = (char)(build + 96U);
  }
  #line 15890 
  return;
}

#line 15892  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
static void tg3_read_mgmtfw_ver(struct tg3 *tp)
{
  #line 15894 
  u32 val;
  #line 15894 
  u32 offset;
  #line 15894 
  u32 start;
  #line 15895 
  int i;
  #line 15895 
  int vlen;
  #line 15924 
  int tmp_6;
  #line 15925 
  int tmp_7;
  #line 15897 
  offset = 24U;
  #line 15897 
  while (offset <= 119U) {
    {
      #line 15900 
      if (tg3_nvram_read(tp,offset,& val) != 0) 
                                                #line 15901 
                                                return;
      #line 15903 
      if (val >> 24 == 1U) 
                           #line 15904 
                           break;
    }
    #line 15898 
    offset += 12U;
  }
  #line 15907 
  if (offset == 120U) 
                      #line 15908 
                      return;
  #line 15910 
  if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_5705_PLUS,
                  (unsigned long *)(& tp->tg3_flags)) == 0) 
    #line 15911 
    start = 134217728U;
  else {
    #line 15912 
    if (tg3_nvram_read(tp,offset + 4294967292U,& start) != 0) 
                                                              #line 15913 
                                                              return;
  }
  #line 15915 
  if (tg3_nvram_read(tp,offset + 4U,& offset) != 0) 
                                                    #line 15918 
                                                    return;
  else {
    #line 15915 
    if (tg3_fw_img_is_valid(tp,offset) == 0) 
                                             #line 15918 
                                             return;
    else {
      #line 15916 
      if (tg3_nvram_read(tp,offset + 8U,& val) != 0) 
                                                     #line 15918 
                                                     return;
    }
  }
  #line 15920 
  offset = (val - start) + offset;
  #line 15922 
  vlen = (int)cif_strlen((char *)(& tp->fw_ver));
  #line 15924 
  tmp_6 = vlen;
  #line 15924 
  vlen ++;
  #line 15924 
  tp->fw_ver[tmp_6] = (char)44;
  #line 15925 
  tmp_7 = vlen;
  #line 15925 
  vlen ++;
  #line 15925 
  tp->fw_ver[tmp_7] = (char)32;
  #line 15927 
  i = 0;
  #line 15927 
  while (i <= 3) {
    {
      #line 15928 
      __be32 v;
      #line 15929 
      if (tg3_nvram_read_be32(tp,offset,& v) != 0) 
                                                   #line 15930 
                                                   return;
      #line 15932 
      offset += 4U;
      #line 15934 
      if ((unsigned int)vlen > 28U) {
        #line 15935 
        memcpy((void *)(& tp->fw_ver[vlen]),(void *)(& v),(unsigned long)(32 - vlen));
        #line 15936 
        break;
      }
      #line 15939 
      memcpy((void *)(& tp->fw_ver[vlen]),(void *)(& v),4UL);
      #line 15940 
      vlen = (int)((unsigned int)vlen + 4U);
    }
    #line 15927 
    i ++;
  }
  #line 15942 
  return;
}

#line 15944  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
static void tg3_probe_ncsi(struct tg3 *tp)
{
  #line 15946 
  u32 apedata;
  #line 15948 
  apedata = tg3_ape_read32(tp,16384U);
  #line 15949 
  if (apedata != 1095779617U) 
                              #line 15950 
                              return;
  #line 15952 
  apedata = tg3_ape_read32(tp,16396U);
  #line 15953 
  if ((apedata & 256U) == 0U) 
                              #line 15954 
                              return;
  #line 15956 
  if ((tg3_ape_read32(tp,16400U) & 2U) != 0U) 
                                              #line 15957 
                                              _tg3_flag_set((enum TG3_FLAGS)TG3_FLAG_APE_HAS_NCSI,(unsigned long *)(& tp->tg3_flags));
  #line 15958 
  return;
}

#line 15960  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
static void tg3_read_dash_ver(struct tg3 *tp)
{
  #line 15962 
  int vlen;
  #line 15963 
  u32 apedata;
  #line 15964 
  char *fwtype;
  #line 15966 
  apedata = tg3_ape_read32(tp,16408U);
  #line 15968 
  if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_APE_HAS_NCSI,
                (unsigned long *)(& tp->tg3_flags)) != 0) 
    #line 15969 
    fwtype = (char *)"NCSI";
  else 
    #line 15970 
    if ((unsigned int)(tp->pdev)->device == 5699U) 
                                                   #line 15971 
                                                   fwtype = (char *)"SMASH"; else 
                                                                    #line 15973 
                                                                    fwtype = (char *)"DASH";
  #line 15975 
  vlen = (int)cif_strlen((char *)(& tp->fw_ver));
  #line 15977 
  snprintf(& tp->fw_ver[vlen],(unsigned long)(32 - vlen),(char *)" %s v%d.%d.%d.%d",fwtype,apedata >> 24,(apedata >> 16) & 255U,(apedata >> 8) & 255U,apedata & 255U);
  #line 15983 
  return;
}

#line 15985  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
static void tg3_read_otp_ver(struct tg3 *tp)
{
  #line 15987 
  u32 val;
  #line 15987 
  u32 val2;
  #line 15989 
  if (tp->pci_chip_rev_id >> 12 != 22370U) 
                                           #line 15990 
                                           return;
  #line 15992 
  if (tg3_ape_otp_read(tp,80U,& val) == 0) {
    #line 15992 
    if (tg3_ape_otp_read(tp,84U,& val2) == 0) 
      #line 15993 
      if ((val & 4026531840U) == 2684354560U || (val & 251658240U) == 167772160U) {
        #line 15997 
        int i;
        #line 15997 
        int vlen;
        #line 15995 
        u64 val64 = ((unsigned long long)val << 32) | (unsigned long long)val2;
        #line 15996 
        u32 ver = 0U;
        #line 15999 
        i = 0;
        #line 15999 
        while (i <= 6) {
          #line 16000 
          if ((val64 & 255ULL) == 0ULL) 
                                        #line 16001 
                                        break;
          #line 16002 
          ver = (unsigned int)val64 & 255U;
          #line 16003 
          val64 >>= 8;
          #line 15999 
          i ++;
        }
        #line 16005 
        vlen = (int)cif_strlen((char *)(& tp->fw_ver));
        #line 16006 
        snprintf(& tp->fw_ver[vlen],(unsigned long)(32 - vlen),(char *)" .%02d",ver);
      }
  }
  #line 16008 
  return;
}

#line 16010  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
static void tg3_read_fw_ver(struct tg3 *tp)
{
  #line 16012 
  u32 val;
  #line 16013 
  bool vpd_vers = (_Bool)0;
  #line 16015 
  if ((int)tp->fw_ver[0] != 0) 
                               #line 16016 
                               vpd_vers = (_Bool)1;
  #line 16018 
  if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_NO_NVRAM,
                (unsigned long *)(& tp->tg3_flags)) != 0) {
    #line 16019 
    strcat((char *)(& tp->fw_ver),(char *)"sb");
    #line 16020 
    tg3_read_otp_ver(tp);
    #line 16021 
    return;
  }
  #line 16024 
  if (tg3_nvram_read(tp,0U,& val) != 0) 
                                        #line 16025 
                                        return;
  #line 16027 
  if (val == 1721324970U) 
                          #line 16028 
                          tg3_read_bc_ver(tp);
  else 
    #line 16029 
    if ((val & 4278190080U) == 2768240640U) 
                                            #line 16030 
                                            tg3_read_sb_ver(tp,val);
    else 
      #line 16031 
      if ((val & 65535U) == 43981U) 
                                    #line 16032 
                                    tg3_read_hwsb_ver(tp);
  #line 16034 
  if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_ENABLE_ASF,
                  (unsigned long *)(& tp->tg3_flags)) != 0) {
    #line 16035 
    if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_ENABLE_APE,
                  (unsigned long *)(& tp->tg3_flags)) != 0) {
      #line 16036 
      tg3_probe_ncsi(tp);
      #line 16037 
      if (! vpd_vers) 
                      #line 16038 
                      tg3_read_dash_ver(tp);
    }
    else 
      #line 16039 
      if (! vpd_vers) 
                      #line 16040 
                      tg3_read_mgmtfw_ver(tp);
  }
  #line 16044 
  tp->fw_ver[31] = (char)0;
  #line 16045 
  return;
}

#line 16047  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
__inline static u32 tg3_rx_ret_ring_size(struct tg3 *tp)
{
  #line 16049 
  if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_LRG_PROD_RING_CAP,
                  (unsigned long *)(& tp->tg3_flags)) != 0) 
    #line 16050 
    return 4096U;
  else {
    #line 16051 
    if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_JUMBO_CAPABLE,
                (unsigned long *)(& tp->tg3_flags)) != 0) {
      #line 16051 
      if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_5780_CLASS,
                  (unsigned long *)(& tp->tg3_flags)) == 0) 
        #line 16052 
        return 1024U; else 
                           #line 16054 
                           return 512U;
    }
    else 
         #line 16054 
         return 512U;
  }
}

#line 16057  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
static struct pci_device_id tg3_write_reorder_chipsets[4U] = {{.vendor = 4130U, .device = 28684U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 4130U, .device = 29776U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 4358U, .device = 12680U, .subvendor = 4294967295U, .subdevice = 4294967295U}};
#line 16064  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
static struct pci_dev *tg3_find_peer(struct tg3 *tp)
{
  #line 16066 
  struct pci_dev *peer;
  #line 16067 
  unsigned int func;
  #line 16067 
  unsigned int devnr = (tp->pdev)->devfn & 4294967288U;
  #line 16069 
  func = 0U;
  #line 16069 
  while (func <= 7U) {
    #line 16070 
    peer = pci_get_slot((tp->pdev)->bus,devnr | func);
    #line 16071 
    if (peer != (struct pci_dev *)0 && tp->pdev != peer) 
                                                         #line 16072 
                                                         break;
    #line 16073 
    pci_dev_put(peer);
    #line 16069 
    func ++;
  }
  #line 16078 
  if (peer == (struct pci_dev *)0) {
    #line 16079 
    peer = tp->pdev;
    #line 16080 
    return peer;
  }
  #line 16087 
  pci_dev_put(peer);
  #line 16089 
  return peer;
}

#line 16092  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
static void tg3_detect_asic_rev(struct tg3 *tp, u32 misc_ctrl_reg)
{
  #line 16094 
  tp->pci_chip_rev_id = misc_ctrl_reg >> 16;
  #line 16095 
  if (tp->pci_chip_rev_id >> 12 == 15U) {
    #line 16096 
    u32 reg;
    #line 16101 
    _tg3_flag_set((enum TG3_FLAGS)TG3_FLAG_CPMU_PRESENT,(unsigned long *)(& tp->tg3_flags));
    #line 16103 
    if (((((((((((unsigned int)(tp->pdev)->device == 5717U || (unsigned int)(tp->pdev)->device == 5733U) || (unsigned int)(tp->pdev)->device == 5718U) || (unsigned int)(tp->pdev)->device == 5719U) || (unsigned int)(tp->pdev)->device == 5727U) || (unsigned int)(tp->pdev)->device == 5763U) || (unsigned int)(tp->pdev)->device == 5698U) || (unsigned int)(tp->pdev)->device == 5767U) || (unsigned int)(tp->pdev)->device == 5699U) || (unsigned int)(tp->pdev)->device == 5875U) || (unsigned int)(tp->pdev)->device == 5697U) 
      #line 16114 
      reg = 244U;
    else 
      #line 16115 
      if ((((((((((unsigned int)(tp->pdev)->device == 5809U || (unsigned int)(tp->pdev)->device == 5813U) || (unsigned int)(tp->pdev)->device == 5808U) || (unsigned int)(tp->pdev)->device == 5812U) || (unsigned int)(tp->pdev)->device == 5810U) || (unsigned int)(tp->pdev)->device == 5814U) || (unsigned int)(tp->pdev)->device == 5762U) || (unsigned int)(tp->pdev)->device == 5766U) || (unsigned int)(tp->pdev)->device == 5815U) || (unsigned int)(tp->pdev)->device == 5811U) 
        #line 16125 
        reg = 252U; else 
                         #line 16127 
                         reg = 188U;
    #line 16129 
    pci_read_config_dword(tp->pdev,(int)reg,& tp->pci_chip_rev_id);
  }
  #line 16135 
  if (tp->pci_chip_rev_id == 20480U) 
                                     #line 16136 
                                     tp->pci_chip_rev_id = 24576U;
  #line 16138 
  if (tp->pci_chip_rev_id == 91320832U) 
                                        #line 16139 
                                        tp->pci_chip_rev_id = 91357184U;
  #line 16141 
  if ((tp->pci_chip_rev_id >> 12 == 22295U || tp->pci_chip_rev_id >> 12 == 22297U) || tp->pci_chip_rev_id >> 12 == 22304U) 
    #line 16144 
    _tg3_flag_set((enum TG3_FLAGS)TG3_FLAG_5717_PLUS,(unsigned long *)(& tp->tg3_flags));
  #line 16146 
  if (tp->pci_chip_rev_id >> 12 == 358277U || tp->pci_chip_rev_id >> 12 == 358246U) 
    #line 16148 
    _tg3_flag_set((enum TG3_FLAGS)TG3_FLAG_57765_CLASS,(unsigned long *)(& tp->tg3_flags));
  #line 16150 
  if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_57765_CLASS,
                (unsigned long *)(& tp->tg3_flags)) != 0) 
    #line 16152 
    _tg3_flag_set((enum TG3_FLAGS)TG3_FLAG_57765_PLUS,(unsigned long *)(& tp->tg3_flags));
  else {
    #line 16150 
    if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_5717_PLUS,
                  (unsigned long *)(& tp->tg3_flags)) != 0) 
      #line 16152 
      _tg3_flag_set((enum TG3_FLAGS)TG3_FLAG_57765_PLUS,(unsigned long *)(& tp->tg3_flags));
    else 
      #line 16150 
      if (tp->pci_chip_rev_id >> 12 == 22370U) 
                                               #line 16152 
                                               _tg3_flag_set((enum TG3_FLAGS)TG3_FLAG_57765_PLUS,(unsigned long *)(& tp->tg3_flags));
  }
  #line 16155 
  if (((((tp->pci_chip_rev_id >> 12) + 4294967286U <= 1U || tp->pci_chip_rev_id >> 12 == 22404U) || tp->pci_chip_rev_id >> 12 == 22369U) || tp->pci_chip_rev_id >> 12 == 22405U) || tp->pci_chip_rev_id >> 12 == 358272U) 
    #line 16162 
    _tg3_flag_set((enum TG3_FLAGS)TG3_FLAG_5755_PLUS,(unsigned long *)(& tp->tg3_flags));
  else {
    #line 16160 
    if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_57765_PLUS,
                  (unsigned long *)(& tp->tg3_flags)) != 0) 
      #line 16162 
      _tg3_flag_set((enum TG3_FLAGS)TG3_FLAG_5755_PLUS,(unsigned long *)(& tp->tg3_flags));
  }
  #line 16164 
  if ((tp->pci_chip_rev_id >> 12) + 4294967288U <= 1U) 
                                                       #line 16166 
                                                       _tg3_flag_set((enum TG3_FLAGS)TG3_FLAG_5780_CLASS,(unsigned long *)(& tp->tg3_flags));
  #line 16168 
  if ((tp->pci_chip_rev_id >> 12 == 4U || tp->pci_chip_rev_id >> 12 == 6U) || tp->pci_chip_rev_id >> 12 == 12U) 
    #line 16173 
    _tg3_flag_set((enum TG3_FLAGS)TG3_FLAG_5750_PLUS,(unsigned long *)(& tp->tg3_flags));
  else {
    #line 16170 
    if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_5755_PLUS,
                  (unsigned long *)(& tp->tg3_flags)) != 0) 
      #line 16173 
      _tg3_flag_set((enum TG3_FLAGS)TG3_FLAG_5750_PLUS,(unsigned long *)(& tp->tg3_flags));
    else {
      #line 16171 
      if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_5780_CLASS,
                  (unsigned long *)(& tp->tg3_flags)) != 0) 
        #line 16173 
        _tg3_flag_set((enum TG3_FLAGS)TG3_FLAG_5750_PLUS,(unsigned long *)(& tp->tg3_flags));
    }
  }
  #line 16175 
  if (tp->pci_chip_rev_id >> 12 == 3U) 
                                       #line 16177 
                                       _tg3_flag_set((enum TG3_FLAGS)TG3_FLAG_5705_PLUS,(unsigned long *)(& tp->tg3_flags));
  else {
    #line 16175 
    if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_5750_PLUS,
                  (unsigned long *)(& tp->tg3_flags)) != 0) 
      #line 16177 
      _tg3_flag_set((enum TG3_FLAGS)TG3_FLAG_5705_PLUS,(unsigned long *)(& tp->tg3_flags));
  }
  #line 16178 
  return;
}

#line 16180  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
static bool tg3_10_100_only_device(struct tg3 *tp, struct pci_device_id *ent)
{
  #line 16183 
  u32 grc_misc_cfg = (*(tp->read32))(tp,26628U) & 122880U;
  #line 16185 
  if (tp->pci_chip_rev_id >> 12 == 1U && (grc_misc_cfg == 32768U || grc_misc_cfg == 16384U) || (tp->phy_flags & 64U) != 0U) 
    #line 16188 
    return (_Bool)1;
  #line 16190 
  if ((ent->driver_data & 1UL) != 0UL) 
    #line 16191 
    if (tp->pci_chip_rev_id >> 12 == 3U) {
      #line 16192 
      if ((ent->driver_data & 2UL) != 0UL) 
                                           #line 16193 
                                           return (_Bool)1;
    }
    else 
         #line 16195 
         return (_Bool)1;
  #line 16199 
  return (_Bool)0;
}

#line 16202  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
static int tg3_get_invariants(struct tg3 *tp, struct pci_device_id *ent)
{
  #line 16204 
  u32 misc_ctrl_reg;
  #line 16205 
  u32 pci_state_reg;
  #line 16205 
  u32 grc_misc_cfg;
  #line 16206 
  u32 val;
  #line 16207 
  u16 pci_cmd;
  #line 16208 
  int err;
  #line 16217 
  pci_read_config_word(tp->pdev,4,& pci_cmd);
  #line 16218 
  pci_cmd = (unsigned short)((unsigned int)pci_cmd & 65519U);
  #line 16219 
  pci_write_config_word(tp->pdev,4,(unsigned short)((int)pci_cmd));
  #line 16226 
  pci_read_config_dword(tp->pdev,104,& misc_ctrl_reg);
  #line 16228 
  tp->misc_host_ctrl |= misc_ctrl_reg & 4294901760U;
  #line 16230 
  pci_write_config_dword(tp->pdev,104,tp->misc_host_ctrl);
  #line 16233 
  tg3_detect_asic_rev(tp,misc_ctrl_reg);
  #line 16252 
  if (tp->pci_chip_rev_id + 4294963199U <= 1U) {
    #line 16258 
    struct tg3_dev_id ich_chipsets[5U] = {{.vendor = 32902U, .device = 9240U, .rev = 4294967295U}, {.vendor = 32902U, .device = 9256U, .rev = 4294967295U}, {.vendor = 32902U, .device = 9294U, .rev = 10U}, {.vendor = 32902U, .device = 9288U, .rev = 4294967295U}, {.vendor = 0U, .device = 0U, .rev = 0U}};
    #line 16269 
    struct tg3_dev_id *pci_id = ich_chipsets;
    #line 16270 
    struct pci_dev *bridge = (struct pci_dev *)0;
    #line 16272 
    while (pci_id->vendor != 0U) {
      #line 16273 
      bridge = pci_get_device(pci_id->vendor,pci_id->device,bridge);
      #line 16275 
      if (bridge == (struct pci_dev *)0) {
        #line 16276 
        pci_id ++;
        #line 16277 
        continue;
      }
      #line 16279 
      if (pci_id->rev != 4294967295U) 
        #line 16280 
        if ((unsigned int)bridge->revision > pci_id->rev) 
                                                          #line 16281 
                                                          continue;
      #line 16283 
      if (bridge->subordinate != (struct pci_bus *)0 && (int)(bridge->subordinate)->number == (int)((tp->pdev)->bus)->number) {
        #line 16286 
        _tg3_flag_set((enum TG3_FLAGS)TG3_FLAG_ICH_WORKAROUND,(unsigned long *)(& tp->tg3_flags));
        #line 16287 
        pci_dev_put(bridge);
        #line 16288 
        break;
      }
    }
  }
  #line 16293 
  if (tp->pci_chip_rev_id >> 12 == 0U) {
    #line 16297 
    struct tg3_dev_id_0 bridge_chipsets[3U] = {{.vendor = 32902U, .device = 809U}, {.vendor = 32902U, .device = 810U}, {.vendor = 0U, .device = 0U}};
    #line 16302 
    struct tg3_dev_id_0 *pci_id_0 = bridge_chipsets;
    #line 16303 
    struct pci_dev *bridge_0 = (struct pci_dev *)0;
    #line 16305 
    while (pci_id_0->vendor != 0U) {
      #line 16306 
      bridge_0 = pci_get_device(pci_id_0->vendor,pci_id_0->device,bridge_0);
      #line 16309 
      if (bridge_0 == (struct pci_dev *)0) {
        #line 16310 
        pci_id_0 ++;
        #line 16311 
        continue;
      }
      #line 16313 
      if ((bridge_0->subordinate != (struct pci_bus *)0 && (int)(bridge_0->subordinate)->number <= (int)((tp->pdev)->bus)->number) && (bridge_0->subordinate)->busn_res.end >= (unsigned long long)((tp->pdev)->bus)->number) {
        #line 16318 
        _tg3_flag_set((enum TG3_FLAGS)TG3_FLAG_5701_DMA_BUG,(unsigned long *)(& tp->tg3_flags));
        #line 16319 
        pci_dev_put(bridge_0);
        #line 16320 
        break;
      }
    }
  }
  #line 16331 
  if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_5780_CLASS,
                (unsigned long *)(& tp->tg3_flags)) != 0) {
    #line 16332 
    _tg3_flag_set((enum TG3_FLAGS)TG3_FLAG_40BIT_DMA_BUG,(unsigned long *)(& tp->tg3_flags));
    #line 16333 
    tp->msi_cap = (int)(tp->pdev)->msi_cap;
  }
  else {
    #line 16335 
    struct pci_dev *bridge_1 = (struct pci_dev *)0;
    #line 16337 
    while (1) {
      #line 16338 
      bridge_1 = pci_get_device(4454U,259U,bridge_1);
      #line 16341 
      if (((bridge_1 != (struct pci_dev *)0 && bridge_1->subordinate != (struct pci_bus *)0) && (int)(bridge_1->subordinate)->number <= (int)((tp->pdev)->bus)->number) && (bridge_1->subordinate)->busn_res.end >= (unsigned long long)((tp->pdev)->bus)->number) {
        #line 16346 
        _tg3_flag_set((enum TG3_FLAGS)TG3_FLAG_40BIT_DMA_BUG,(unsigned long *)(& tp->tg3_flags));
        #line 16347 
        pci_dev_put(bridge_1);
        #line 16348 
        break;
      }
      #line 16350 
      if (! (bridge_1 != (struct pci_dev *)0)) 
                                               #line 16337 
                                               break;
    }
  }
  #line 16353 
  if (tp->pci_chip_rev_id >> 12 == 2U || tp->pci_chip_rev_id >> 12 == 9U) 
    #line 16355 
    tp->pdev_peer = tg3_find_peer(tp);
  #line 16358 
  if (! (tp->pci_chip_rev_id == 91328512U)) {
    #line 16360 
    if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_57765_PLUS,
                  (unsigned long *)(& tp->tg3_flags)) != 0) 
      #line 16361 
      _tg3_flag_set((enum TG3_FLAGS)TG3_FLAG_HW_TSO_3,(unsigned long *)(& tp->tg3_flags));
    else {
      #line 16362 
      if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_5755_PLUS,
                  (unsigned long *)(& tp->tg3_flags)) != 0) 
        #line 16362 
        goto _LOR;
      else 
        #line 16362 
        if (tp->pci_chip_rev_id >> 12 == 12U) 
                                              #line 16362 
                                              _LOR: 
                                                    #line 16364 
                                                    _tg3_flag_set((enum TG3_FLAGS)TG3_FLAG_HW_TSO_2,(unsigned long *)(& tp->tg3_flags));
        else {
          #line 16365 
          if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_5750_PLUS,
                  (unsigned long *)(& tp->tg3_flags)) != 0) {
            #line 16366 
            _tg3_flag_set((enum TG3_FLAGS)TG3_FLAG_HW_TSO_1,(unsigned long *)(& tp->tg3_flags));
            #line 16367 
            _tg3_flag_set((enum TG3_FLAGS)TG3_FLAG_TSO_BUG,(unsigned long *)(& tp->tg3_flags));
            #line 16368 
            if (tp->pci_chip_rev_id >> 12 == 4U && tp->pci_chip_rev_id > 16897U) 
              #line 16370 
              _tg3_flag_clear((enum TG3_FLAGS)TG3_FLAG_TSO_BUG,(unsigned long *)(& tp->tg3_flags));
          }
          else 
            #line 16371 
            if ((tp->pci_chip_rev_id >> 12 != 7U && tp->pci_chip_rev_id >> 12 != 0U) && tp->pci_chip_rev_id != 12288U) {
              #line 16374 
              _tg3_flag_set((enum TG3_FLAGS)TG3_FLAG_FW_TSO,(unsigned long *)(& tp->tg3_flags));
              #line 16375 
              _tg3_flag_set((enum TG3_FLAGS)TG3_FLAG_TSO_BUG,(unsigned long *)(& tp->tg3_flags));
              #line 16376 
              if (tp->pci_chip_rev_id >> 12 == 3U) 
                                                   #line 16377 
                                                   tp->fw_needed = (char *)"tigon/tg3_tso5.bin"; else 
                                                                    #line 16379 
                                                                    tp->fw_needed = (char *)"tigon/tg3_tso.bin";
            }
        }
    }
  }
  #line 16383 
  if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_HW_TSO_1,
                  (unsigned long *)(& tp->tg3_flags)) != 0) 
    #line 16383 
    goto _LOR_0;
  else {
    #line 16383 
    if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_HW_TSO_2,
                  (unsigned long *)(& tp->tg3_flags)) != 0) 
      #line 16383 
      goto _LOR_0;
    else {
      #line 16384 
      if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_HW_TSO_3,
                  (unsigned long *)(& tp->tg3_flags)) != 0) 
        #line 16383 
        goto _LOR_0;
      else {
        #line 16385 
        if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_FW_TSO,
                  (unsigned long *)(& tp->tg3_flags)) != 0) 
          #line 16383 
          _LOR_0: 
                  #line 16391 
                  _tg3_flag_set((enum TG3_FLAGS)TG3_FLAG_TSO_CAPABLE,(unsigned long *)(& tp->tg3_flags));
        else {
          #line 16393 
          _tg3_flag_clear((enum TG3_FLAGS)TG3_FLAG_TSO_CAPABLE,(unsigned long *)(& tp->tg3_flags));
          #line 16394 
          _tg3_flag_clear((enum TG3_FLAGS)TG3_FLAG_TSO_BUG,(unsigned long *)(& tp->tg3_flags));
          #line 16395 
          tp->fw_needed = (char *)0;
        }
      }
    }
  }
  #line 16398 
  if (tp->pci_chip_rev_id == 0U) 
                                 #line 16399 
                                 tp->fw_needed = (char *)"tigon/tg3.bin";
  #line 16401 
  if (tp->pci_chip_rev_id >> 12 == 358246U) 
                                            #line 16402 
                                            tp->fw_needed = (char *)"tigon/tg357766.bin";
  #line 16404 
  tp->irq_max = 1U;
  #line 16406 
  if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_5750_PLUS,
                  (unsigned long *)(& tp->tg3_flags)) != 0) {
    #line 16407 
    _tg3_flag_set((enum TG3_FLAGS)TG3_FLAG_SUPPORT_MSI,(unsigned long *)(& tp->tg3_flags));
    #line 16408 
    if ((tp->pci_chip_rev_id >> 8) + 4294967232U <= 1U || (tp->pci_chip_rev_id >> 12 == 9U && tp->pci_chip_rev_id <= 36866U) && tp->pdev_peer == tp->pdev) 
      #line 16413 
      _tg3_flag_clear((enum TG3_FLAGS)TG3_FLAG_SUPPORT_MSI,(unsigned long *)(& tp->tg3_flags));
    #line 16415 
    if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_5755_PLUS,
                  (unsigned long *)(& tp->tg3_flags)) != 0) 
      #line 16417 
      _tg3_flag_set((enum TG3_FLAGS)TG3_FLAG_1SHOT_MSI,(unsigned long *)(& tp->tg3_flags));
    else 
      #line 16415 
      if (tp->pci_chip_rev_id >> 12 == 12U) 
                                            #line 16417 
                                            _tg3_flag_set((enum TG3_FLAGS)TG3_FLAG_1SHOT_MSI,(unsigned long *)(& tp->tg3_flags));
    #line 16420 
    if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_57765_PLUS,
                  (unsigned long *)(& tp->tg3_flags)) != 0) {
      #line 16421 
      _tg3_flag_set((enum TG3_FLAGS)TG3_FLAG_SUPPORT_MSIX,(unsigned long *)(& tp->tg3_flags));
      #line 16422 
      tp->irq_max = 5U;
    }
  }
  #line 16426 
  tp->txq_max = 1U;
  #line 16427 
  tp->rxq_max = 1U;
  #line 16428 
  if (tp->irq_max > 1U) {
    #line 16429 
    tp->rxq_max = 4U;
    #line 16430 
    tg3_rss_init_dflt_indir_tbl(tp,4U);
    #line 16432 
    if (tp->pci_chip_rev_id >> 12 == 22297U || tp->pci_chip_rev_id >> 12 == 22304U) 
      #line 16434 
      tp->txq_max = tp->irq_max + 4294967295U;
  }
  #line 16437 
  if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_5755_PLUS,
                   (unsigned long *)(& tp->tg3_flags)) != 0) 
    #line 16439 
    _tg3_flag_set((enum TG3_FLAGS)TG3_FLAG_SHORT_DMA_BUG,(unsigned long *)(& tp->tg3_flags));
  else 
    #line 16437 
    if (tp->pci_chip_rev_id >> 12 == 12U) 
                                          #line 16439 
                                          _tg3_flag_set((enum TG3_FLAGS)TG3_FLAG_SHORT_DMA_BUG,(unsigned long *)(& tp->tg3_flags));
  #line 16441 
  if (tp->pci_chip_rev_id >> 12 == 22297U) 
                                           #line 16442 
                                           tp->dma_limit = 4096U;
  #line 16444 
  if (((tp->pci_chip_rev_id >> 12 == 22295U || tp->pci_chip_rev_id >> 12 == 22297U) || tp->pci_chip_rev_id >> 12 == 22304U) || tp->pci_chip_rev_id >> 12 == 22370U) 
    #line 16448 
    _tg3_flag_set((enum TG3_FLAGS)TG3_FLAG_LRG_PROD_RING_CAP,(unsigned long *)(& tp->tg3_flags));
  #line 16450 
  if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_57765_PLUS,
                   (unsigned long *)(& tp->tg3_flags)) != 0) 
    #line 16450 
    if (tp->pci_chip_rev_id != 91328512U) 
                                          #line 16452 
                                          _tg3_flag_set((enum TG3_FLAGS)TG3_FLAG_USE_JUMBO_BDFLAG,(unsigned long *)(& tp->tg3_flags));
  #line 16454 
  if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_5705_PLUS,
                   (unsigned long *)(& tp->tg3_flags)) == 0) 
    #line 16457 
    _tg3_flag_set((enum TG3_FLAGS)TG3_FLAG_JUMBO_CAPABLE,(unsigned long *)(& tp->tg3_flags));
  else {
    #line 16454 
    if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_5780_CLASS,
                   (unsigned long *)(& tp->tg3_flags)) != 0) 
      #line 16457 
      _tg3_flag_set((enum TG3_FLAGS)TG3_FLAG_JUMBO_CAPABLE,(unsigned long *)(& tp->tg3_flags));
    else {
      #line 16455 
      if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_USE_JUMBO_BDFLAG,
                   (unsigned long *)(& tp->tg3_flags)) != 0) 
        #line 16457 
        _tg3_flag_set((enum TG3_FLAGS)TG3_FLAG_JUMBO_CAPABLE,(unsigned long *)(& tp->tg3_flags));
    }
  }
  #line 16459 
  pci_read_config_dword(tp->pdev,112,& pci_state_reg);
  #line 16462 
  if ((int)pci_is_pcie(tp->pdev) != 0) {
    #line 16463 
    u16 lnkctl;
    #line 16465 
    _tg3_flag_set((enum TG3_FLAGS)TG3_FLAG_PCI_EXPRESS,(unsigned long *)(& tp->tg3_flags));
    #line 16467 
    pcie_capability_read_word(tp->pdev,16,& lnkctl);
    #line 16468 
    if (((int)lnkctl & 256) != 0) {
      #line 16469 
      if (tp->pci_chip_rev_id >> 12 == 12U) {
        #line 16470 
        _tg3_flag_clear((enum TG3_FLAGS)TG3_FLAG_HW_TSO_2,(unsigned long *)(& tp->tg3_flags));
        #line 16471 
        _tg3_flag_clear((enum TG3_FLAGS)TG3_FLAG_TSO_CAPABLE,(unsigned long *)(& tp->tg3_flags));
      }
      #line 16473 
      if (((tp->pci_chip_rev_id >> 12 == 22404U || tp->pci_chip_rev_id >> 12 == 22369U) || tp->pci_chip_rev_id == 1467482112U) || tp->pci_chip_rev_id == 1467482113U) 
        #line 16477 
        _tg3_flag_set((enum TG3_FLAGS)TG3_FLAG_CLKREQ_BUG,(unsigned long *)(& tp->tg3_flags));
    }
    else 
      #line 16478 
      if (tp->pci_chip_rev_id == 91320320U) 
                                            #line 16479 
                                            _tg3_flag_set((enum TG3_FLAGS)TG3_FLAG_L1PLLPD_EN,(unsigned long *)(& tp->tg3_flags));
  }
  else 
    #line 16481 
    if (tp->pci_chip_rev_id >> 12 == 22405U) 
                                             #line 16486 
                                             _tg3_flag_set((enum TG3_FLAGS)TG3_FLAG_PCI_EXPRESS,(unsigned long *)(& tp->tg3_flags));
    else {
      #line 16487 
      if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_5705_PLUS,
                   (unsigned long *)(& tp->tg3_flags)) == 0) 
        #line 16487 
        goto _LOR_1;
      else {
        #line 16487 
        if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_5780_CLASS,
                   (unsigned long *)(& tp->tg3_flags)) != 0) {
          #line 16487 
          _LOR_1: {
                    #line 16489 
                    tp->pcix_cap = pci_find_capability(tp->pdev,7);
                    #line 16490 
                    if (tp->pcix_cap == 0) {
                      #line 16491 
                      _dev_err(& (tp->pdev)->dev,(char *)"Cannot find PCI-X capability, aborting\n");
                      #line 16493 
                      return -5;
                    }
                    #line 16496 
                    if ((pci_state_reg & 4U) == 0U) 
                                                    #line 16497 
                                                    _tg3_flag_set((enum TG3_FLAGS)TG3_FLAG_PCIX_MODE,(unsigned long *)(& tp->tg3_flags));
                  }
        }
      }
    }
  #line 16506 
  if (pci_dev_present((struct pci_device_id *)(& tg3_write_reorder_chipsets)) != 0) {
    #line 16506 
    if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_PCI_EXPRESS,
                   (unsigned long *)(& tp->tg3_flags)) == 0) 
      #line 16508 
      _tg3_flag_set((enum TG3_FLAGS)TG3_FLAG_MBOX_WRITE_REORDER,(unsigned long *)(& tp->tg3_flags));
  }
  #line 16510 
  pci_read_config_byte(tp->pdev,12,& tp->pci_cacheline_sz);
  #line 16512 
  pci_read_config_byte(tp->pdev,13,& tp->pci_lat_timer);
  #line 16514 
  if (tp->pci_chip_rev_id >> 12 == 1U && (unsigned int)tp->pci_lat_timer <= 63U) {
    #line 16516 
    tp->pci_lat_timer = (unsigned char)64U;
    #line 16517 
    pci_write_config_byte(tp->pdev,13,(unsigned char)((int)tp->pci_lat_timer));
  }
  #line 16524 
  if (tp->pci_chip_rev_id >> 8 == 113U) {
    #line 16528 
    _tg3_flag_set((enum TG3_FLAGS)TG3_FLAG_TXD_MBOX_HWBUG,(unsigned long *)(& tp->tg3_flags));
    #line 16535 
    if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_PCIX_MODE,
                   (unsigned long *)(& tp->tg3_flags)) != 0) {
      #line 16536 
      u32 pm_reg;
      #line 16538 
      _tg3_flag_set((enum TG3_FLAGS)TG3_FLAG_PCIX_TARGET_HWBUG,(unsigned long *)(& tp->tg3_flags));
      #line 16544 
      pci_read_config_dword(tp->pdev,(int)(tp->pdev)->pm_cap + 4,& pm_reg);
      #line 16547 
      pm_reg &= 4294967292U;
      #line 16548 
      pm_reg |= 256U;
      #line 16549 
      pci_write_config_dword(tp->pdev,(int)(tp->pdev)->pm_cap + 4,pm_reg);
      #line 16554 
      pci_read_config_word(tp->pdev,4,& pci_cmd);
      #line 16555 
      pci_cmd = (unsigned short)((unsigned int)pci_cmd | 320U);
      #line 16556 
      pci_write_config_word(tp->pdev,4,(unsigned short)((int)pci_cmd));
    }
  }
  #line 16560 
  if ((pci_state_reg & 8U) != 0U) 
                                  #line 16561 
                                  _tg3_flag_set((enum TG3_FLAGS)TG3_FLAG_PCI_HIGH_SPEED,(unsigned long *)(& tp->tg3_flags));
  #line 16562 
  if ((pci_state_reg & 16U) != 0U) 
                                   #line 16563 
                                   _tg3_flag_set((enum TG3_FLAGS)TG3_FLAG_PCI_32BIT,(unsigned long *)(& tp->tg3_flags));
  #line 16566 
  if (tp->pci_chip_rev_id == 8192U && (pci_state_reg & 8192U) == 0U) {
    #line 16568 
    pci_state_reg |= 8192U;
    #line 16569 
    pci_write_config_dword(tp->pdev,112,pci_state_reg);
  }
  #line 16573 
  tp->read32 = & tg3_read32;
  #line 16574 
  tp->write32 = & tg3_write32;
  #line 16575 
  tp->read32_mbox = & tg3_read32;
  #line 16576 
  tp->write32_mbox = & tg3_write32;
  #line 16577 
  tp->write32_tx_mbox = & tg3_write32;
  #line 16578 
  tp->write32_rx_mbox = & tg3_write32;
  #line 16581 
  if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_PCIX_TARGET_HWBUG,
                   (unsigned long *)(& tp->tg3_flags)) != 0) 
    #line 16582 
    tp->write32 = & tg3_write_indirect_reg32;
  else 
    #line 16583 
    if (tp->pci_chip_rev_id >> 12 == 0U) 
                                         #line 16593 
                                         tp->write32 = & tg3_write_flush_reg32;
    else {
      #line 16583 
      if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_PCI_EXPRESS,
                   (unsigned long *)(& tp->tg3_flags)) != 0) 
        #line 16584 
        if (tp->pci_chip_rev_id == 16384U) 
                                           #line 16593 
                                           tp->write32 = & tg3_write_flush_reg32;
    }
  #line 16596 
  if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_TXD_MBOX_HWBUG,
                   (unsigned long *)(& tp->tg3_flags)) != 0) 
    #line 16596 
    goto _LOR_2;
  else {
    #line 16596 
    if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_MBOX_WRITE_REORDER,
                   (unsigned long *)(& tp->tg3_flags)) != 0) {
      #line 16596 
      _LOR_2: {
                #line 16597 
                tp->write32_tx_mbox = & tg3_write32_tx_mbox;
                #line 16598 
                if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_MBOX_WRITE_REORDER,
                   (unsigned long *)(& tp->tg3_flags)) != 0) 
                  #line 16599 
                  tp->write32_rx_mbox = & tg3_write_flush_reg32;
              }
    }
  }
  #line 16602 
  if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_ICH_WORKAROUND,
                   (unsigned long *)(& tp->tg3_flags)) != 0) {
    #line 16603 
    tp->read32 = & tg3_read_indirect_reg32;
    #line 16604 
    tp->write32 = & tg3_write_indirect_reg32;
    #line 16605 
    tp->read32_mbox = & tg3_read_indirect_mbox;
    #line 16606 
    tp->write32_mbox = & tg3_write_indirect_mbox;
    #line 16607 
    tp->write32_tx_mbox = & tg3_write_indirect_mbox;
    #line 16608 
    tp->write32_rx_mbox = & tg3_write_indirect_mbox;
    #line 16610 
    iounmap(tp->regs);
    #line 16611 
    tp->regs = (void *)0;
    #line 16613 
    pci_read_config_word(tp->pdev,4,& pci_cmd);
    #line 16614 
    pci_cmd = (unsigned short)((unsigned int)pci_cmd & 65533U);
    #line 16615 
    pci_write_config_word(tp->pdev,4,(unsigned short)((int)pci_cmd));
  }
  #line 16617 
  if (tp->pci_chip_rev_id >> 12 == 12U) {
    #line 16618 
    tp->read32_mbox = & tg3_read32_mbox_5906;
    #line 16619 
    tp->write32_mbox = & tg3_write32_mbox_5906;
    #line 16620 
    tp->write32_tx_mbox = & tg3_write32_mbox_5906;
    #line 16621 
    tp->write32_rx_mbox = & tg3_write32_mbox_5906;
  }
  #line 16624 
  if (tp->write32 == & tg3_write_indirect_reg32) 
                                                 #line 16628 
                                                 _tg3_flag_set((enum TG3_FLAGS)TG3_FLAG_SRAM_USE_CONFIG,(unsigned long *)(& tp->tg3_flags));
  else {
    #line 16624 
    if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_PCIX_MODE,
                   (unsigned long *)(& tp->tg3_flags)) != 0) 
      #line 16625 
      if (tp->pci_chip_rev_id >> 12 == 7U || tp->pci_chip_rev_id >> 12 == 0U) 
        #line 16628 
        _tg3_flag_set((enum TG3_FLAGS)TG3_FLAG_SRAM_USE_CONFIG,(unsigned long *)(& tp->tg3_flags));
  }
  #line 16635 
  val = (*(tp->read32))(tp,16384U);
  #line 16636 
  (*(tp->write32))(tp,16384U,val | 2U);
  #line 16638 
  tp->pci_fn = (int)(tp->pdev)->devfn & 3;
  #line 16639 
  if (tp->pci_chip_rev_id >> 12 == 2U) 
                                       #line 16639 
                                       goto _LOR_3;
  else {
    #line 16639 
    if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_5780_CLASS,
                   (unsigned long *)(& tp->tg3_flags)) != 0) {
      #line 16639 
      _LOR_3: {
                #line 16641 
                if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_PCIX_MODE,
                   (unsigned long *)(& tp->tg3_flags)) != 0) {
                  #line 16642 
                  pci_read_config_dword(tp->pdev,tp->pcix_cap + 4,& val);
                  #line 16645 
                  tp->pci_fn = (int)val & 7;
                }
              }
    }
    else 
      #line 16647 
      if ((tp->pci_chip_rev_id >> 12 == 22295U || tp->pci_chip_rev_id >> 12 == 22297U) || tp->pci_chip_rev_id >> 12 == 22304U) {
        #line 16650 
        tg3_read_mem(tp,3584U,& val);
        #line 16651 
        if ((val & 65535U) != 13868U) 
                                      #line 16652 
                                      val = (*(tp->read32))(tp,13868U);
        #line 16654 
        if (tp->pci_chip_rev_id >> 12 == 22295U) 
                                                 #line 16655 
                                                 tp->pci_fn = (int)(val >> 29) & 1; else 
                                                                    #line 16657 
                                                                    tp->pci_fn = (int)(val >> 30);
      }
  }
  #line 16661 
  if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_FLUSH_POSTED_WRITES,
                   (unsigned long *)(& tp->tg3_flags)) != 0) {
    #line 16662 
    tp->write32_tx_mbox = & tg3_write_flush_reg32;
    #line 16663 
    tp->write32_rx_mbox = & tg3_write_flush_reg32;
  }
  #line 16674 
  tg3_get_eeprom_hw_cfg(tp);
  #line 16676 
  if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_FW_TSO,
                   (unsigned long *)(& tp->tg3_flags)) != 0) {
    #line 16676 
    if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_ENABLE_ASF,
                   (unsigned long *)(& tp->tg3_flags)) != 0) {
      #line 16677 
      _tg3_flag_clear((enum TG3_FLAGS)TG3_FLAG_TSO_CAPABLE,(unsigned long *)(& tp->tg3_flags));
      #line 16678 
      _tg3_flag_clear((enum TG3_FLAGS)TG3_FLAG_TSO_BUG,(unsigned long *)(& tp->tg3_flags));
      #line 16679 
      tp->fw_needed = (char *)0;
    }
  }
  #line 16682 
  if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_ENABLE_APE,
                   (unsigned long *)(& tp->tg3_flags)) != 0) {
    #line 16686 
    pci_state_reg |= 458752U;
    #line 16689 
    pci_write_config_dword(tp->pdev,112,pci_state_reg);
    #line 16692 
    tg3_ape_lock_init(tp);
    #line 16693 
    tp->ape_hb_interval = msecs_to_jiffies(5000U);
  }
  #line 16702 
  tp->grc_local_ctrl = 16777224U;
  #line 16703 
  if (tp->pci_chip_rev_id >> 12 == 7U) 
                                       #line 16703 
                                       goto _LOR_4;
  else {
    #line 16703 
    if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_EEPROM_WRITE_PROT,
                   (unsigned long *)(& tp->tg3_flags)) != 0) 
      #line 16703 
      _LOR_4: 
              #line 16705 
              tp->grc_local_ctrl |= 36864U;
    else 
      #line 16710 
      if (tp->pci_chip_rev_id >> 12 == 6U) 
                                           #line 16711 
                                           tp->grc_local_ctrl |= 64U;
  }
  #line 16713 
  if (tp->pci_chip_rev_id >> 12 == 10U || tp->pci_chip_rev_id >> 12 == 358272U) 
    #line 16716 
    tp->grc_local_ctrl |= 16U;
  else {
    #line 16714 
    if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_57765_CLASS,
                   (unsigned long *)(& tp->tg3_flags)) != 0) 
      #line 16716 
      tp->grc_local_ctrl |= 16U;
  }
  #line 16718 
  if ((unsigned int)(tp->pdev)->device == 5761U || (unsigned int)(tp->pdev)->device == 5768U) {
    #line 16721 
    tp->grc_local_ctrl |= 16U;
    #line 16722 
    if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_IS_NIC,
                   (unsigned long *)(& tp->tg3_flags)) != 0) 
      #line 16724 
      tp->grc_local_ctrl |= 18432U;
  }
  #line 16728 
  if (tp->pci_chip_rev_id >> 12 == 22370U) {
    #line 16730 
    tp->grc_local_ctrl |= (*(tp->read32))(tp,26632U) & 16U;
  }
  #line 16733 
  tg3_pwrsrc_switch_to_vmain(tp);
  #line 16738 
  if ((tp->dev)->mtu > 1500U) {
    #line 16738 
    if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_5780_CLASS,
                   (unsigned long *)(& tp->tg3_flags)) == 0) 
      #line 16739 
      _tg3_flag_set((enum TG3_FLAGS)TG3_FLAG_JUMBO_RING_ENABLE,(unsigned long *)(& tp->tg3_flags));
  }
  #line 16742 
  if (((tp->pci_chip_rev_id >> 12 == 7U || tp->pci_chip_rev_id == 0U) || tp->pci_chip_rev_id == 256U) || tp->pci_chip_rev_id == 258U) 
    #line 16746 
    _tg3_flag_clear((enum TG3_FLAGS)TG3_FLAG_WOL_SPEED_100MB,(unsigned long *)(& tp->tg3_flags)); else 
                                                                    #line 16748 
                                                                    _tg3_flag_set((enum TG3_FLAGS)TG3_FLAG_WOL_SPEED_100MB,(unsigned long *)(& tp->tg3_flags));
  #line 16751 
  if (tp->pci_chip_rev_id >> 12 == 12U) 
                                        #line 16752 
                                        tp->phy_flags |= 64U;
  #line 16755 
  if (((tp->pci_chip_rev_id >> 12 == 7U || (tp->pci_chip_rev_id >> 12 == 3U && tp->pci_chip_rev_id != 12288U) && tp->pci_chip_rev_id != 12289U) || (tp->phy_flags & 64U) != 0U) || (tp->phy_flags & 48U) != 0U) 
    #line 16761 
    tp->phy_flags |= 1024U;
  #line 16763 
  if (tp->pci_chip_rev_id >> 8 == 16U || tp->pci_chip_rev_id >> 8 == 32U) 
    #line 16765 
    tp->phy_flags |= 8192U;
  #line 16766 
  if (tp->pci_chip_rev_id == 8192U) 
                                    #line 16767 
                                    tp->phy_flags |= 16384U;
  #line 16769 
  if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_5705_PLUS,
                   (unsigned long *)(& tp->tg3_flags)) != 0) 
    #line 16769 
    if ((tp->phy_flags & 64U) == 0U) 
      #line 16770 
      if (tp->pci_chip_rev_id >> 12 != 22405U) 
        #line 16771 
        if (tp->pci_chip_rev_id >> 12 != 358272U) {
          #line 16772 
          if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_57765_PLUS,
                   (unsigned long *)(& tp->tg3_flags)) == 0) 
            #line 16774 
            if (((tp->pci_chip_rev_id >> 12) + 4294967286U <= 1U || tp->pci_chip_rev_id >> 12 == 22404U) || tp->pci_chip_rev_id >> 12 == 22369U) {
              #line 16778 
              if ((unsigned int)(tp->pdev)->device != 5748U && (unsigned int)(tp->pdev)->device != 5722U) 
                #line 16780 
                tp->phy_flags |= 2048U;
              #line 16781 
              if ((unsigned int)(tp->pdev)->device == 5747U) 
                                                             #line 16782 
                                                             tp->phy_flags |= 4096U;
            }
            else 
                 #line 16784 
                 tp->phy_flags |= 32768U;
        }
  #line 16787 
  if (tp->pci_chip_rev_id >> 12 == 22404U && tp->pci_chip_rev_id >> 8 != 358464U) {
    #line 16789 
    tp->phy_otp = tg3_read_otp_phycfg(tp);
    #line 16790 
    if (tp->phy_otp == 0U) 
                           #line 16791 
                           tp->phy_otp = 678172224U;
  }
  #line 16794 
  if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_CPMU_PRESENT,
                   (unsigned long *)(& tp->tg3_flags)) != 0) 
    #line 16795 
    tp->mi_mode = 32768U; else 
                               #line 16797 
                               tp->mi_mode = 786432U;
  #line 16799 
  tp->coalesce_mode = 0U;
  #line 16800 
  if ((tp->pci_chip_rev_id >> 8) + 4294967184U > 1U) 
                                                     #line 16802 
                                                     tp->coalesce_mode |= 256U;
  #line 16805 
  if (((tp->pci_chip_rev_id >> 12 == 22295U || tp->pci_chip_rev_id >> 12 == 22370U) || tp->pci_chip_rev_id == 91328512U) || tp->pci_chip_rev_id == 91357184U) {
    #line 16809 
    tp->coalesce_mode |= 4U;
    #line 16810 
    tp->grc_mode |= 268435456U;
  }
  #line 16813 
  if (tp->pci_chip_rev_id >> 12 == 22405U || tp->pci_chip_rev_id >> 12 == 358272U) 
    #line 16815 
    _tg3_flag_set((enum TG3_FLAGS)TG3_FLAG_USE_PHYLIB,(unsigned long *)(& tp->tg3_flags));
  #line 16817 
  err = tg3_mdio_init(tp);
  #line 16818 
  if (err != 0) 
                #line 16819 
                return err;
  #line 16822 
  val = (*(tp->read32))(tp,26624U);
  #line 16823 
  if (tp->pci_chip_rev_id >> 12 == 22304U || tp->pci_chip_rev_id >> 12 == 22370U) 
    #line 16825 
    val &= 360640U; else 
                         #line 16831 
                         val &= 65536U;
  #line 16833 
  (*(tp->write32))(tp,26624U,tp->grc_mode | val);
  #line 16835 
  tg3_switch_clocks(tp);
  #line 16838 
  (*(tp->write32))(tp,124U,0U);
  #line 16841 
  (*(tp->write32))(tp,120U,0U);
  #line 16843 
  pci_read_config_dword(tp->pdev,112,& pci_state_reg);
  #line 16845 
  if ((pci_state_reg & 4U) == 0U) {
    #line 16845 
    if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_PCIX_TARGET_HWBUG,
                   (unsigned long *)(& tp->tg3_flags)) == 0) 
      #line 16847 
      if (((tp->pci_chip_rev_id == 0U || tp->pci_chip_rev_id == 256U) || tp->pci_chip_rev_id == 258U) || tp->pci_chip_rev_id == 261U) {
        #line 16851 
        void *sram_base;
        #line 16857 
        sram_base = tp->regs + 33536U;
        #line 16859 
        writel(0U,sram_base);
        #line 16860 
        writel(0U,sram_base + 4U);
        #line 16861 
        writel(4294967295U,sram_base + 4U);
        #line 16862 
        if (readl(sram_base) != 0U) 
                                    #line 16863 
                                    _tg3_flag_set((enum TG3_FLAGS)TG3_FLAG_PCIX_TARGET_HWBUG,(unsigned long *)(& tp->tg3_flags));
      }
  }
  #line 16867 
  __const_udelay(214750UL);
  #line 16868 
  tg3_nvram_init(tp);
  #line 16871 
  if (tp->pci_chip_rev_id >> 12 == 358246U) {
    #line 16871 
    if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_NO_NVRAM,
                   (unsigned long *)(& tp->tg3_flags)) == 0) 
      #line 16873 
      tp->fw_needed = (char *)0;
  }
  #line 16875 
  grc_misc_cfg = (*(tp->read32))(tp,26628U);
  #line 16876 
  grc_misc_cfg &= 122880U;
  #line 16878 
  if (tp->pci_chip_rev_id >> 12 == 3U && (grc_misc_cfg == 65536U || grc_misc_cfg == 98304U)) 
    #line 16881 
    _tg3_flag_set((enum TG3_FLAGS)TG3_FLAG_IS_5788,(unsigned long *)(& tp->tg3_flags));
  #line 16883 
  if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_IS_5788,
                   (unsigned long *)(& tp->tg3_flags)) == 0) 
    #line 16883 
    if (tp->pci_chip_rev_id >> 12 != 7U) 
                                         #line 16885 
                                         _tg3_flag_set((enum TG3_FLAGS)TG3_FLAG_TAGGED_STATUS,(unsigned long *)(& tp->tg3_flags));
  #line 16886 
  if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_TAGGED_STATUS,
                   (unsigned long *)(& tp->tg3_flags)) != 0) {
    #line 16887 
    tp->coalesce_mode |= 1536U;
    #line 16890 
    tp->misc_host_ctrl |= 512U;
    #line 16891 
    pci_write_config_dword(tp->pdev,104,tp->misc_host_ctrl);
  }
  #line 16896 
  if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_ENABLE_APE,
                   (unsigned long *)(& tp->tg3_flags)) != 0) 
    #line 16897 
    tp->mac_mode = 402653184U; else 
                                    #line 16899 
                                    tp->mac_mode = 0U;
  #line 16901 
  if ((int)tg3_10_100_only_device(tp,ent) != 0) 
                                                #line 16902 
                                                tp->phy_flags |= 128U;
  #line 16904 
  err = tg3_phy_probe(tp);
  #line 16905 
  if (err != 0) {
    #line 16906 
    _dev_err(& (tp->pdev)->dev,(char *)"phy probe failed, err %d\n",err);
    #line 16908 
    tg3_mdio_fini(tp);
  }
  #line 16911 
  tg3_read_vpd(tp);
  #line 16912 
  tg3_read_fw_ver(tp);
  #line 16914 
  if ((tp->phy_flags & 16U) != 0U) 
                                   #line 16915 
                                   tp->phy_flags &= 4294967291U;
  else 
    #line 16917 
    if (tp->pci_chip_rev_id >> 12 == 7U) 
                                         #line 16918 
                                         tp->phy_flags |= 4U; else 
                                                                   #line 16920 
                                                                   tp->phy_flags &= 4294967291U;
  #line 16927 
  if (tp->pci_chip_rev_id >> 12 == 7U) 
                                       #line 16928 
                                       _tg3_flag_set((enum TG3_FLAGS)TG3_FLAG_USE_LINKCHG_REG,(unsigned long *)(& tp->tg3_flags)); else 
                                                                    #line 16930 
                                                                    _tg3_flag_clear((enum TG3_FLAGS)TG3_FLAG_USE_LINKCHG_REG,(unsigned long *)(& tp->tg3_flags));
  #line 16936 
  if (((unsigned int)(tp->pdev)->subsystem_vendor == 4136U && tp->pci_chip_rev_id >> 12 == 0U) && (tp->phy_flags & 16U) == 0U) {
    #line 16939 
    tp->phy_flags |= 4U;
    #line 16940 
    _tg3_flag_set((enum TG3_FLAGS)TG3_FLAG_USE_LINKCHG_REG,(unsigned long *)(& tp->tg3_flags));
  }
  #line 16944 
  if ((tp->phy_flags & 16U) != 0U) 
                                   #line 16945 
                                   _tg3_flag_set((enum TG3_FLAGS)TG3_FLAG_POLL_SERDES,(unsigned long *)(& tp->tg3_flags)); else 
                                                                    #line 16947 
                                                                    _tg3_flag_clear((enum TG3_FLAGS)TG3_FLAG_POLL_SERDES,(unsigned long *)(& tp->tg3_flags));
  #line 16949 
  if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_ENABLE_APE,
                   (unsigned long *)(& tp->tg3_flags)) != 0) {
    #line 16949 
    if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_ENABLE_ASF,
                   (unsigned long *)(& tp->tg3_flags)) != 0) 
      #line 16950 
      _tg3_flag_set((enum TG3_FLAGS)TG3_FLAG_POLL_CPMU_LINK,(unsigned long *)(& tp->tg3_flags));
  }
  #line 16952 
  tp->rx_offset = 64U;
  #line 16953 
  tp->rx_copy_thresh = 256U;
  #line 16954 
  if (tp->pci_chip_rev_id >> 12 == 0U) {
    #line 16954 
    if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_PCIX_MODE,
                   (unsigned long *)(& tp->tg3_flags)) != 0) 
      #line 16956 
      tp->rx_offset = 64U;
  }
  #line 16962 
  if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_LRG_PROD_RING_CAP,
                   (unsigned long *)(& tp->tg3_flags)) != 0) 
    #line 16962 
    tp->rx_std_ring_mask = 2047U; else 
                                       #line 16962 
                                       tp->rx_std_ring_mask = 511U;
  #line 16963 
  if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_LRG_PROD_RING_CAP,
                   (unsigned long *)(& tp->tg3_flags)) != 0) 
    #line 16963 
    tp->rx_jmb_ring_mask = 1023U; else 
                                       #line 16963 
                                       tp->rx_jmb_ring_mask = 255U;
  #line 16964 
  tp->rx_ret_ring_mask = tg3_rx_ret_ring_size(tp) + 4294967295U;
  #line 16966 
  tp->rx_std_max_post = tp->rx_std_ring_mask + 1U;
  #line 16971 
  if ((tp->pci_chip_rev_id >> 12 == 4U || tp->pci_chip_rev_id >> 12 == 6U) || tp->pci_chip_rev_id >> 12 == 10U) 
    #line 16974 
    tp->rx_std_max_post = 8U;
  #line 16976 
  if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_ASPM_WORKAROUND,
                   (unsigned long *)(& tp->tg3_flags)) != 0) {
    #line 16977 
    tp->pwrmgmt_thresh = (*(tp->read32))(tp,32040U) & 65280U;
  }
  #line 16980 
  return err;
}

#line 16983  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
static int tg3_get_device_address(struct tg3 *tp)
{
  #line 16986 
  u32 hi;
  #line 16986 
  u32 lo;
  #line 16986 
  u32 mac_offset;
  #line 16988 
  int err;
  #line 16985 
  struct net_device *dev = tp->dev;
  #line 16987 
  int addr_ok = 0;
  #line 16990 
  if (eth_platform_get_mac_address(& (tp->pdev)->dev,dev->dev_addr) == 0) 
    #line 16991 
    return 0;
  #line 16993 
  if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_IS_SSB_CORE,
                  (unsigned long *)(& tp->tg3_flags)) != 0) {
    #line 16994 
    err = ssb_gige_get_macaddr(tp->pdev,dev->dev_addr);
    #line 16995 
    if (err == 0) {
      #line 16995 
      if ((int)is_valid_ether_addr(dev->dev_addr) != 0) 
                                                        #line 16996 
                                                        return 0;
    }
  }
  #line 16999 
  mac_offset = 124U;
  #line 17000 
  if (tp->pci_chip_rev_id >> 12 == 2U) 
                                       #line 17000 
                                       goto _LOR;
  else {
    #line 17000 
    if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_5780_CLASS,
                  (unsigned long *)(& tp->tg3_flags)) != 0) {
      #line 17000 
      _LOR: {
              #line 17002 
              if (((*(tp->read32))(tp,184U) & 4U) != 0U) 
                                                         #line 17003 
                                                         mac_offset = 204U;
              #line 17004 
              if (tg3_nvram_lock(tp) != 0) 
                                           #line 17005 
                                           _tw32_flush(tp,28672U,1U,0U); else 
                                                                    #line 17007 
                                                                    tg3_nvram_unlock(tp);
            }
    }
    else {
      #line 17008 
      if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_5717_PLUS,
                  (unsigned long *)(& tp->tg3_flags)) != 0) {
        #line 17009 
        if ((tp->pci_fn & 1) != 0) 
                                   #line 17010 
                                   mac_offset = 204U;
        #line 17011 
        if (tp->pci_fn > 1) 
                            #line 17012 
                            mac_offset += 396U;
      }
      else 
        #line 17013 
        if (tp->pci_chip_rev_id >> 12 == 12U) 
                                              #line 17014 
                                              mac_offset = 16U;
    }
  }
  #line 17017 
  tg3_read_mem(tp,3092U,& hi);
  #line 17018 
  if (hi >> 16 == 18507U) {
    #line 17019 
    *(dev->dev_addr) = (unsigned char)(hi >> 8);
    #line 17020 
    *(dev->dev_addr + 1U) = (unsigned char)hi;
    #line 17022 
    tg3_read_mem(tp,3096U,& lo);
    #line 17023 
    *(dev->dev_addr + 2U) = (unsigned char)(lo >> 24);
    #line 17024 
    *(dev->dev_addr + 3U) = (unsigned char)(lo >> 16);
    #line 17025 
    *(dev->dev_addr + 4U) = (unsigned char)(lo >> 8);
    #line 17026 
    *(dev->dev_addr + 5U) = (unsigned char)lo;
    #line 17029 
    addr_ok = (int)is_valid_ether_addr(dev->dev_addr);
  }
  #line 17031 
  if (addr_ok == 0) {
    #line 17033 
    if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_NO_NVRAM,
                  (unsigned long *)(& tp->tg3_flags)) == 0) {
      #line 17033 
      if (tg3_nvram_read_be32(tp,mac_offset,& hi) == 0) {
        #line 17034 
        if (tg3_nvram_read_be32(tp,mac_offset + 4U,& lo) == 0) {
          #line 17036 
          memcpy((void *)dev->dev_addr,(void *)((char *)(& hi) + 2U),2UL);
          #line 17037 
          memcpy((void *)(dev->dev_addr + 2U),(void *)(& lo),4UL);
        }
        else 
             #line 17033 
             goto _LAND_0;
      }
      else 
           #line 17033 
           goto _LAND_0;
    }
    else {
      #line 17033 
      _LAND_0: {
                 #line 17041 
                 hi = (*(tp->read32))(tp,1040U);
                 #line 17042 
                 lo = (*(tp->read32))(tp,1044U);
                 #line 17044 
                 *(dev->dev_addr + 5U) = (unsigned char)lo;
                 #line 17045 
                 *(dev->dev_addr + 4U) = (unsigned char)(lo >> 8);
                 #line 17046 
                 *(dev->dev_addr + 3U) = (unsigned char)(lo >> 16);
                 #line 17047 
                 *(dev->dev_addr + 2U) = (unsigned char)(lo >> 24);
                 #line 17048 
                 *(dev->dev_addr + 1U) = (unsigned char)hi;
                 #line 17049 
                 *(dev->dev_addr) = (unsigned char)(hi >> 8);
               }
    }
  }
  #line 17053 
  if (! is_valid_ether_addr(dev->dev_addr)) 
                                            #line 17054 
                                            return -22;
  #line 17055 
  return 0;
}

#line 17061  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
static u32 tg3_calc_dma_bndry(struct tg3 *tp, u32 val)
{
  #line 17063 
  int cacheline_size;
  #line 17064 
  u8 byte;
  #line 17065 
  int goal;
  #line 17067 
  pci_read_config_byte(tp->pdev,12,& byte);
  #line 17068 
  if ((unsigned int)byte == 0U) 
                                #line 17069 
                                cacheline_size = 1024; else 
                                                            #line 17071 
                                                            cacheline_size = (int)byte * 4;
  #line 17076 
  if (tp->pci_chip_rev_id >> 12 != 7U && tp->pci_chip_rev_id >> 12 != 0U) {
    #line 17077 
    if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_PCI_EXPRESS,
                (unsigned long *)(& tp->tg3_flags)) == 0) 
      #line 17079 
      goto out;
  }
  #line 17087 
  goal = 0;
  #line 17091 
  if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_57765_PLUS,
                  (unsigned long *)(& tp->tg3_flags)) != 0) {
    #line 17092 
    val = (unsigned int)(goal == 0);
    #line 17093 
    goto out;
  }
  #line 17096 
  if (goal == 0) 
                 #line 17097 
                 goto out;
  #line 17110 
  if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_PCIX_MODE,
                  (unsigned long *)(& tp->tg3_flags)) != 0) {
    #line 17110 
    if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_PCI_EXPRESS,
                  (unsigned long *)(& tp->tg3_flags)) == 0) 
      #line 17111 
      switch (cacheline_size) {
        #line 17112 
        case 16: 
                 #line 17112 
        ;
        #line 17113 
        case 32: 
                 #line 17113 
        ;
        #line 17114 
        case 64: 
                 #line 17114 
        ;
        #line 17115 
        case 128: 
                  #line 17115 
        ;
        #line 17116 
        if (goal == 1) 
                       #line 17117 
                       val |= 2304U; else 
                                          #line 17120 
                                          val |= 6912U;
        #line 17123 
        break;
        #line 17125 
        case 256: 
                  #line 17125 
        ;
        #line 17126 
        val |= 4608U;
        #line 17128 
        break;
        #line 17130 
        default: 
                 #line 17130 
        ;
        #line 17131 
        val |= 6912U;
        #line 17133 
        break;
      }
    else 
         #line 17110 
         goto _LAND;
  }
  else {
    #line 17110 
    _LAND: 
    #line 17135 
    if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_PCI_EXPRESS,
                  (unsigned long *)(& tp->tg3_flags)) != 0) 
      #line 17136 
      switch (cacheline_size) {
        #line 17137 
        case 16: 
                 #line 17137 
        ;
        #line 17138 
        case 32: 
                 #line 17138 
        ;
        #line 17139 
        case 64: 
                 #line 17139 
        ;
        #line 17140 
        if (goal == 1) {
          #line 17141 
          val &= 2415919103U;
          #line 17142 
          val |= 268435456U;
          #line 17143 
          break;
        }
        #line 17146 
        case 128: 
                  #line 17146 
        ;
        #line 17147 
        default: 
                 #line 17147 
        ;
        #line 17148 
        val &= 2415919103U;
        #line 17149 
        val |= 805306368U;
        #line 17150 
        break;
      }
    else 
      #line 17153 
      switch (cacheline_size) {
        #line 17154 
        case 16: 
                 #line 17154 
        ;
        #line 17155 
        if (goal == 1) {
          #line 17156 
          val |= 2304U;
          #line 17158 
          break;
        }
        #line 17161 
        case 32: 
                 #line 17161 
        ;
        #line 17162 
        if (goal == 1) {
          #line 17163 
          val |= 4608U;
          #line 17165 
          break;
        }
        #line 17168 
        case 64: 
                 #line 17168 
        ;
        #line 17169 
        if (goal == 1) {
          #line 17170 
          val |= 6912U;
          #line 17172 
          break;
        }
        #line 17175 
        case 128: 
                  #line 17175 
        ;
        #line 17176 
        if (goal == 1) {
          #line 17177 
          val |= 9216U;
          #line 17179 
          break;
        }
        #line 17182 
        case 256: 
                  #line 17182 
        ;
        #line 17183 
        val |= 11520U;
        #line 17185 
        break;
        #line 17186 
        case 512: 
                  #line 17186 
        ;
        #line 17187 
        val |= 13824U;
        #line 17189 
        break;
        #line 17190 
        case 1024: 
                   #line 17190 
        ;
        #line 17191 
        default: 
                 #line 17191 
        ;
        #line 17192 
        val |= 16128U;
        #line 17194 
        break;
      }
  }
  #line 17198 
  out: 
       #line 17198 
  ;
  #line 17199 
  return val;
}

#line 17202  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
static int tg3_do_test_dma(struct tg3 *tp, u32 *buf, dma_addr_t buf_dma, int size, bool to_device)
{
  #line 17205 
  struct tg3_internal_buffer_desc test_desc;
  #line 17206 
  u32 sram_dma_descs;
  #line 17207 
  int i;
  #line 17207 
  int ret;
  #line 17209 
  sram_dma_descs = 8192U;
  #line 17211 
  (*(tp->write32))(tp,23768U,0U);
  #line 17212 
  (*(tp->write32))(tp,23816U,0U);
  #line 17213 
  (*(tp->write32))(tp,18436U,0U);
  #line 17214 
  (*(tp->write32))(tp,19460U,0U);
  #line 17216 
  (*(tp->write32))(tp,17408U,0U);
  #line 17217 
  (*(tp->write32))(tp,23552U,0U);
  #line 17219 
  test_desc.addr_hi = (unsigned int)(buf_dma >> 32);
  #line 17220 
  test_desc.addr_lo = (unsigned int)buf_dma;
  #line 17221 
  test_desc.nic_mbuf = 8448U;
  #line 17222 
  test_desc.len = (unsigned short)size;
  #line 17236 
  if ((int)to_device != 0) {
    #line 17237 
    test_desc.cqid_sqid = (unsigned short)3330U;
    #line 17239 
    _tw32_flush(tp,18432U,2U,0U);
    #line 17240 
    __const_udelay(171800UL);
  }
  else {
    #line 17242 
    test_desc.cqid_sqid = (unsigned short)4103U;
    #line 17244 
    _tw32_flush(tp,19456U,2U,0U);
    #line 17245 
    __const_udelay(171800UL);
  }
  #line 17247 
  test_desc.flags = 5U;
  #line 17249 
  i = 0;
  #line 17249 
  while ((unsigned int)i <= 7U) {
    {
      #line 17250 
      u32 val;
      #line 17252 
      val = *((u32 *)(& test_desc) + (unsigned long)i);
      #line 17253 
      pci_write_config_dword(tp->pdev,124,(unsigned int)((unsigned long)i) * 4U + sram_dma_descs);
      #line 17255 
      pci_write_config_dword(tp->pdev,132,val);
    }
    #line 17249 
    i ++;
  }
  #line 17257 
  pci_write_config_dword(tp->pdev,124,0U);
  #line 17259 
  if ((int)to_device != 0) 
                           #line 17260 
                           (*(tp->write32))(tp,23592U,sram_dma_descs); else 
                                                                    #line 17262 
                                                                    (*(tp->write32))(tp,23672U,sram_dma_descs);
  #line 17264 
  ret = -19;
  #line 17265 
  i = 0;
  #line 17265 
  while (i <= 39) {
    {
      #line 17266 
      u32 val_0;
      #line 17268 
      if ((int)to_device != 0) 
                               #line 17269 
                               val_0 = (*(tp->read32))(tp,23768U); else 
                                                                    #line 17271 
                                                                    val_0 = (*(tp->read32))(tp,23816U);
      #line 17272 
      if ((val_0 & 65535U) == sram_dma_descs) {
        #line 17273 
        ret = 0;
        #line 17274 
        break;
      }
      #line 17277 
      __const_udelay(429500UL);
    }
    #line 17265 
    i ++;
  }
  #line 17280 
  return ret;
}

#line 17285  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
static struct pci_device_id tg3_dma_wait_state_chipsets[2U] = {{.vendor = 4203U, .device = 46U, .subvendor = 4294967295U, .subdevice = 4294967295U}};
#line 17290  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
static int tg3_test_dma(struct tg3 *tp)
{
  #line 17292 
  dma_addr_t buf_dma;
  #line 17293 
  u32 *buf;
  #line 17293 
  u32 saved_dma_rwctrl;
  #line 17294 
  int ret = 0;
  #line 17296 
  buf = (u32 *)dma_alloc_coherent(& (tp->pdev)->dev,8192UL,& buf_dma,3264U);
  #line 17298 
  if (buf == (u32 *)0U) {
    #line 17299 
    ret = -12;
    #line 17300 
    goto out_nofree;
  }
  #line 17303 
  tp->dma_rwctrl = 1979711488U;
  #line 17306 
  tp->dma_rwctrl = tg3_calc_dma_bndry(tp,tp->dma_rwctrl);
  #line 17308 
  if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_57765_PLUS,
                  (unsigned long *)(& tp->tg3_flags)) != 0) 
    #line 17309 
    goto out;
  #line 17311 
  if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_PCI_EXPRESS,
                  (unsigned long *)(& tp->tg3_flags)) != 0) 
    #line 17313 
    tp->dma_rwctrl |= 1572864U;
  else {
    #line 17314 
    if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_PCIX_MODE,
                  (unsigned long *)(& tp->tg3_flags)) == 0) 
      #line 17315 
      if ((tp->pci_chip_rev_id >> 12) + 4294967293U <= 1U) 
                                                           #line 17317 
                                                           tp->dma_rwctrl |= 4128768U; else 
                                                                    #line 17319 
                                                                    tp->dma_rwctrl |= 4128783U;
    else 
      #line 17321 
      if ((tp->pci_chip_rev_id >> 12) + 4294967295U <= 1U) {
        #line 17323 
        u32 ccval = (*(tp->read32))(tp,116U) & 31U;
        #line 17324 
        u32 read_water = 7U;
        #line 17330 
        if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_40BIT_DMA_BUG,
                  (unsigned long *)(& tp->tg3_flags)) != 0) {
          #line 17330 
          if (tp->pci_chip_rev_id >> 12 == 2U) 
                                               #line 17332 
                                               tp->dma_rwctrl |= 32768U; else 
                                                                    #line 17330 
                                                                    goto _LAND;
        }
        else {
          #line 17330 
          _LAND: 
                 #line 17333 
          ;
          #line 17333 
          if (ccval + 4294967290U <= 1U) 
                                         #line 17334 
                                         tp->dma_rwctrl |= 16384U;
        }
        #line 17336 
        if (tp->pci_chip_rev_id >> 12 == 1U) 
                                             #line 17337 
                                             read_water = 4U;
        #line 17339 
        tp->dma_rwctrl = (tp->dma_rwctrl | (read_water << 16)) | 9961472U;
      }
      else 
        #line 17343 
        if (tp->pci_chip_rev_id >> 12 == 8U) 
                                             #line 17345 
                                             tp->dma_rwctrl |= 1327104U;
        else 
          #line 17346 
          if (tp->pci_chip_rev_id >> 12 == 9U) 
                                               #line 17348 
                                               tp->dma_rwctrl |= 1343488U; else 
                                                                    #line 17350 
                                                                    tp->dma_rwctrl |= 1769487U;
  }
  #line 17353 
  if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_ONE_DMA_AT_ONCE,
                  (unsigned long *)(& tp->tg3_flags)) != 0) 
    #line 17354 
    tp->dma_rwctrl |= 16384U;
  #line 17356 
  if ((tp->pci_chip_rev_id >> 12) + 4294967295U <= 1U) 
                                                       #line 17358 
                                                       tp->dma_rwctrl &= 4294967280U;
  #line 17360 
  if (tp->pci_chip_rev_id >> 12 == 7U || tp->pci_chip_rev_id >> 12 == 0U) {
    #line 17363 
    tp->dma_rwctrl |= 4194304U;
    #line 17375 
    tp->dma_rwctrl |= 8388608U;
  }
  #line 17378 
  (*(tp->write32))(tp,108U,tp->dma_rwctrl);
  #line 17381 
  if (tp->pci_chip_rev_id >> 12 != 7U && tp->pci_chip_rev_id >> 12 != 0U) 
    #line 17383 
    goto out;
  #line 17388 
  saved_dma_rwctrl = tp->dma_rwctrl;
  #line 17389 
  tp->dma_rwctrl &= 4294952959U;
  #line 17390 
  (*(tp->write32))(tp,108U,tp->dma_rwctrl);
  #line 17392 
  while (1) {
    {
      #line 17393 
      u32 i;
      #line 17393 
      u32 *p = buf;
      #line 17395 
      i = 0U;
      #line 17395 
      while (i <= 2047U) {
        #line 17396 
        *(p + (unsigned long)i) = i;
        #line 17395 
        i ++;
      }
      #line 17399 
      ret = tg3_do_test_dma(tp,buf,buf_dma,8192,(_Bool)1);
      #line 17400 
      if (ret != 0) {
        #line 17401 
        _dev_err(& (tp->pdev)->dev,(char *)"%s: Buffer write failed. err = %d\n",(char *)"tg3_test_dma",ret);
        #line 17404 
        break;
      }
      #line 17408 
      ret = tg3_do_test_dma(tp,buf,buf_dma,8192,(_Bool)0);
      #line 17409 
      if (ret != 0) {
        #line 17410 
        _dev_err(& (tp->pdev)->dev,(char *)"%s: Buffer read failed. ",(char *)"tg3_test_dma",ret);
        #line 17412 
        break;
      }
      #line 17416 
      i = 0U;
      #line 17416 
      while (i <= 2047U) {
        #line 17417 
        if (*(p + (unsigned long)i) == i) 
                                          #line 17418 
                                          goto __Cont;
        #line 17420 
        if ((tp->dma_rwctrl & 14336U) != 2048U) {
          #line 17422 
          tp->dma_rwctrl &= 4294952959U;
          #line 17423 
          tp->dma_rwctrl |= 2048U;
          #line 17424 
          (*(tp->write32))(tp,108U,tp->dma_rwctrl);
          #line 17425 
          break;
        }
        else {
          #line 17427 
          _dev_err(& (tp->pdev)->dev,(char *)"%s: Buffer corrupted on read back! ",(char *)"tg3_test_dma",*(p + (unsigned long)i),i);
          #line 17430 
          ret = -19;
          #line 17431 
          goto out;
        }
        #line 17416 
        __Cont: 
                #line 17416 
        i ++;
      }
      #line 17435 
      if (i == 2048U) {
        #line 17437 
        ret = 0;
        #line 17438 
        break;
      }
    }
  }
  #line 17441 
  if ((tp->dma_rwctrl & 14336U) != 2048U) {
    #line 17447 
    if (pci_dev_present((struct pci_device_id *)(& tg3_dma_wait_state_chipsets)) != 0) {
      #line 17448 
      tp->dma_rwctrl &= 4294952959U;
      #line 17449 
      tp->dma_rwctrl |= 2048U;
    }
    else 
         #line 17452 
         tp->dma_rwctrl = saved_dma_rwctrl;
    #line 17455 
    (*(tp->write32))(tp,108U,tp->dma_rwctrl);
  }
  #line 17458 
  out: 
       #line 17458 
  ;
  #line 17459 
  dma_free_coherent(& (tp->pdev)->dev,8192UL,(void *)buf,buf_dma);
  #line 17460 
  out_nofree: 
              #line 17460 
  ;
  #line 17461 
  return ret;
}

#line 17464  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
static void tg3_init_bufmgr_config(struct tg3 *tp)
{
  #line 17466 
  if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_57765_PLUS,
                  (unsigned long *)(& tp->tg3_flags)) != 0) {
    #line 17467 
    tp->bufmgr_config.mbuf_read_dma_low_water = 0U;
    #line 17469 
    tp->bufmgr_config.mbuf_mac_rx_low_water = 42U;
    #line 17471 
    tp->bufmgr_config.mbuf_high_water = 160U;
    #line 17474 
    tp->bufmgr_config.mbuf_read_dma_low_water_jumbo = 0U;
    #line 17476 
    tp->bufmgr_config.mbuf_mac_rx_low_water_jumbo = 126U;
    #line 17478 
    tp->bufmgr_config.mbuf_high_water_jumbo = 234U;
  }
  else {
    #line 17480 
    if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_5705_PLUS,
                (unsigned long *)(& tp->tg3_flags)) != 0) {
      #line 17481 
      tp->bufmgr_config.mbuf_read_dma_low_water = 0U;
      #line 17483 
      tp->bufmgr_config.mbuf_mac_rx_low_water = 16U;
      #line 17485 
      tp->bufmgr_config.mbuf_high_water = 96U;
      #line 17487 
      if (tp->pci_chip_rev_id >> 12 == 12U) {
        #line 17488 
        tp->bufmgr_config.mbuf_mac_rx_low_water = 4U;
        #line 17490 
        tp->bufmgr_config.mbuf_high_water = 16U;
      }
      #line 17494 
      tp->bufmgr_config.mbuf_read_dma_low_water_jumbo = 0U;
      #line 17496 
      tp->bufmgr_config.mbuf_mac_rx_low_water_jumbo = 75U;
      #line 17498 
      tp->bufmgr_config.mbuf_high_water_jumbo = 150U;
    }
    else {
      #line 17501 
      tp->bufmgr_config.mbuf_read_dma_low_water = 80U;
      #line 17503 
      tp->bufmgr_config.mbuf_mac_rx_low_water = 32U;
      #line 17505 
      tp->bufmgr_config.mbuf_high_water = 96U;
      #line 17508 
      tp->bufmgr_config.mbuf_read_dma_low_water_jumbo = 304U;
      #line 17510 
      tp->bufmgr_config.mbuf_mac_rx_low_water_jumbo = 152U;
      #line 17512 
      tp->bufmgr_config.mbuf_high_water_jumbo = 380U;
    }
  }
  #line 17516 
  tp->bufmgr_config.dma_low_water = 5U;
  #line 17517 
  tp->bufmgr_config.dma_high_water = 10U;
  #line 17518 
  return;
}

#line 17520  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
static char *tg3_phy_string(struct tg3 *tp)
{
  #line 17522 
  switch (tp->phy_id & 4294967280U) {
    #line 17523 
    case (unsigned int)1610645568: 
                                   #line 17523 
    ;
    #line 17523 
    return (char *)"5400";
    #line 17524 
    case (unsigned int)1610645584: 
                                   #line 17524 
    ;
    #line 17524 
    return (char *)"5401";
    #line 17525 
    case (unsigned int)1610645616: 
                                   #line 17525 
    ;
    #line 17525 
    return (char *)"5411";
    #line 17526 
    case (unsigned int)1610645776: 
                                   #line 17526 
    ;
    #line 17526 
    return (char *)"5701";
    #line 17527 
    case (unsigned int)1610645856: 
                                   #line 17527 
    ;
    #line 17527 
    return (char *)"5703";
    #line 17528 
    case (unsigned int)1610645904: 
                                   #line 17528 
    ;
    #line 17528 
    return (char *)"5704";
    #line 17529 
    case (unsigned int)1610645920: 
                                   #line 17529 
    ;
    #line 17529 
    return (char *)"5705";
    #line 17530 
    case (unsigned int)1610645888: 
                                   #line 17530 
    ;
    #line 17530 
    return (char *)"5750";
    #line 17531 
    case (unsigned int)1610645760: 
                                   #line 17531 
    ;
    #line 17531 
    return (char *)"5752";
    #line 17532 
    case (unsigned int)1610646336: 
                                   #line 17532 
    ;
    #line 17532 
    return (char *)"5714";
    #line 17533 
    case (unsigned int)1610646352: 
                                   #line 17533 
    ;
    #line 17533 
    return (char *)"5780";
    #line 17534 
    case (unsigned int)(-1140519744): 
                                      #line 17534 
    ;
    #line 17534 
    return (char *)"5755";
    #line 17535 
    case (unsigned int)(-1140519712): 
                                      #line 17535 
    ;
    #line 17535 
    return (char *)"5787";
    #line 17536 
    case (unsigned int)(-1140519008): 
                                      #line 17536 
    ;
    #line 17536 
    return (char *)"5784";
    #line 17537 
    case (unsigned int)(-1140519216): 
                                      #line 17537 
    ;
    #line 17537 
    return (char *)"5722/5756";
    #line 17538 
    case (unsigned int)(-603935680): 
                                     #line 17538 
    ;
    #line 17538 
    return (char *)"5906";
    #line 17539 
    case (unsigned int)(-1140518960): 
                                      #line 17539 
    ;
    #line 17539 
    return (char *)"5761";
    #line 17540 
    case (unsigned int)1544391168: 
                                   #line 17540 
    ;
    #line 17540 
    return (char *)"5718C";
    #line 17541 
    case (unsigned int)(-1140518928): 
                                      #line 17541 
    ;
    #line 17541 
    return (char *)"5718S";
    #line 17542 
    case (unsigned int)1544391232: 
                                   #line 17542 
    ;
    #line 17542 
    return (char *)"57765";
    #line 17543 
    case (unsigned int)1544391200: 
                                   #line 17543 
    ;
    #line 17543 
    return (char *)"5719C";
    #line 17544 
    case (unsigned int)1544391520: 
                                   #line 17544 
    ;
    #line 17544 
    return (char *)"5720C";
    #line 17545 
    case (unsigned int)(-2055194752): 
                                      #line 17545 
    ;
    #line 17545 
    return (char *)"5762C";
    #line 17546 
    case (unsigned int)1610678592: 
                                   #line 17546 
    ;
    #line 17546 
    return (char *)"8002/serdes";
    #line 17547 
    case (unsigned int)0: 
                          #line 17547 
    ;
    #line 17547 
    return (char *)"serdes";
    #line 17548 
    default: 
             #line 17548 
    ;
    #line 17548 
    return (char *)"unknown";
  }
}

#line 17552  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
static char *tg3_bus_string(struct tg3 *tp, char *str)
{
  #line 17554 
  if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_PCI_EXPRESS,
                  (unsigned long *)(& tp->tg3_flags)) != 0) {
    #line 17555 
    strcpy(str,(char *)"PCI Express");
    #line 17556 
    return str;
  }
  else {
    #line 17557 
    if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_PCIX_MODE,
                  (unsigned long *)(& tp->tg3_flags)) != 0) {
      #line 17558 
      u32 clock_ctrl = (*(tp->read32))(tp,116U) & 31U;
      #line 17560 
      strcpy(str,(char *)"PCIX:");
      #line 17562 
      if (clock_ctrl == 7U) 
                            #line 17562 
                            goto _LOR;
      else {
        #line 17562 
        if (((*(tp->read32))(tp,26628U) & 122880U) == 16384U) 
                                                              #line 17562 
                                                              _LOR: 
                                                                    #line 17565 
                                                                    strcat(str,(char *)"133MHz");
        else 
          #line 17566 
          if (clock_ctrl == 0U) 
                                #line 17567 
                                strcat(str,(char *)"33MHz");
          else 
            #line 17568 
            if (clock_ctrl == 2U) 
                                  #line 17569 
                                  strcat(str,(char *)"50MHz");
            else 
              #line 17570 
              if (clock_ctrl == 4U) 
                                    #line 17571 
                                    strcat(str,(char *)"66MHz");
              else 
                #line 17572 
                if (clock_ctrl == 6U) 
                                      #line 17573 
                                      strcat(str,(char *)"100MHz");
      }
    }
    else {
      #line 17575 
      strcpy(str,(char *)"PCI:");
      #line 17576 
      if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_PCI_HIGH_SPEED,
                  (unsigned long *)(& tp->tg3_flags)) != 0) 
        #line 17577 
        strcat(str,(char *)"66MHz"); else 
                                          #line 17579 
                                          strcat(str,(char *)"33MHz");
    }
  }
  #line 17581 
  if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_PCI_32BIT,
                  (unsigned long *)(& tp->tg3_flags)) != 0) 
    #line 17582 
    strcat(str,(char *)":32-bit"); else 
                                        #line 17584 
                                        strcat(str,(char *)":64-bit");
  #line 17585 
  return str;
}

#line 17588  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
static void tg3_init_coal(struct tg3 *tp)
{
  #line 17590 
  struct ethtool_coalesce *ec = & tp->coal;
  #line 17592 
  memset((void *)ec,0,92UL);
  #line 17593 
  ec->cmd = 14U;
  #line 17594 
  ec->rx_coalesce_usecs = 50U;
  #line 17595 
  ec->tx_coalesce_usecs = 150U;
  #line 17596 
  ec->rx_max_coalesced_frames = 5U;
  #line 17597 
  ec->tx_max_coalesced_frames = 53U;
  #line 17598 
  ec->rx_coalesce_usecs_irq = 25U;
  #line 17599 
  ec->tx_coalesce_usecs_irq = 25U;
  #line 17600 
  ec->rx_max_coalesced_frames_irq = 5U;
  #line 17601 
  ec->tx_max_coalesced_frames_irq = 5U;
  #line 17602 
  ec->stats_block_coalesce_usecs = 1000000U;
  #line 17604 
  if ((tp->coalesce_mode & 1536U) != 0U) {
    #line 17606 
    ec->rx_coalesce_usecs = 20U;
    #line 17607 
    ec->rx_coalesce_usecs_irq = 20U;
    #line 17608 
    ec->tx_coalesce_usecs = 72U;
    #line 17609 
    ec->tx_coalesce_usecs_irq = 20U;
  }
  #line 17612 
  if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_5705_PLUS,
                (unsigned long *)(& tp->tg3_flags)) != 0) {
    #line 17613 
    ec->rx_coalesce_usecs_irq = 0U;
    #line 17614 
    ec->tx_coalesce_usecs_irq = 0U;
    #line 17615 
    ec->stats_block_coalesce_usecs = 0U;
  }
  #line 17617 
  return;
}

#line 17619  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
static int tg3_init_one(struct pci_dev *pdev, struct pci_device_id *ent)
{
  #line 17981 
  int tmp_28;
  #line 17622 
  struct net_device *dev;
  #line 17623 
  struct tg3 *tp;
  #line 17624 
  int i;
  #line 17624 
  int err;
  #line 17625 
  u32 sndmbx;
  #line 17625 
  u32 rcvmbx;
  #line 17625 
  u32 intmbx;
  #line 17626 
  char str[40U];
  #line 17627 
  u64 dma_mask;
  #line 17627 
  u64 persist_dma_mask;
  #line 17980 
  int tmp_29;
  #line 17628 
  netdev_features_t features = 0ULL;
  {
    #line 17630 
    bool __print_once;
    #line 17630 
    bool __ret_print_once = (_Bool)(! ((int)__print_once != 0));
    #line 17630 
    if (! __print_once) {
      #line 17630 
      __print_once = (_Bool)1;
      #line 17630 
      printk((char *)"\001",(char *)(& version));
    }
    #line 17630 
    long tmp = (long)((int)__ret_print_once != 0);
  }
  #line 17632 
  err = pci_enable_device(pdev);
  #line 17633 
  if (err != 0) {
    #line 17634 
    _dev_err(& pdev->dev,(char *)"Cannot enable PCI device, aborting\n");
    #line 17635 
    return err;
  }
  #line 17638 
  err = pci_request_regions(pdev,(char *)"tg3");
  #line 17639 
  if (err != 0) {
    #line 17640 
    _dev_err(& pdev->dev,(char *)"Cannot obtain PCI resources, aborting\n");
    #line 17641 
    goto err_out_disable_pdev;
  }
  #line 17644 
  pci_set_master(pdev);
  #line 17646 
  dev = cif_alloc_etherdev_mqs(5632,5U,5U);
  #line 17647 
  if (dev == (struct net_device *)0) {
    #line 17648 
    err = -12;
    #line 17649 
    goto err_out_free_res;
  }
  #line 17652 
  dev->dev.parent = & pdev->dev;
  #line 17654 
  tp = (struct tg3 *)netdev_priv(dev);
  #line 17655 
  tp->pdev = pdev;
  #line 17656 
  tp->dev = dev;
  #line 17657 
  tp->rx_mode = 0U;
  #line 17658 
  tp->tx_mode = 0U;
  #line 17659 
  tp->irq_sync = 1U;
  #line 17660 
  tp->pcierr_recovery = (_Bool)0;
  #line 17662 
  if (tg3_debug > 0) 
                     #line 17663 
                     tp->msg_enable = (unsigned int)tg3_debug; else 
                                                                    #line 17665 
                                                                    tp->msg_enable = 255U;
  #line 17667 
  if ((int)pdev_is_ssb_gige_core(pdev) != 0) {
    #line 17668 
    _tg3_flag_set((enum TG3_FLAGS)TG3_FLAG_IS_SSB_CORE,(unsigned long *)(& tp->tg3_flags));
    #line 17669 
    if ((int)pdev_is_ssb_gige_core(pdev) != 0) 
                                               #line 17670 
                                               _tg3_flag_set((enum TG3_FLAGS)TG3_FLAG_FLUSH_POSTED_WRITES,(unsigned long *)(& tp->tg3_flags));
    #line 17671 
    if ((int)pdev_is_ssb_gige_core(pdev) != 0) 
                                               #line 17672 
                                               _tg3_flag_set((enum TG3_FLAGS)TG3_FLAG_ONE_DMA_AT_ONCE,(unsigned long *)(& tp->tg3_flags));
    #line 17673 
    if ((int)pdev_is_ssb_gige_core(pdev) != 0) {
      #line 17674 
      _tg3_flag_set((enum TG3_FLAGS)TG3_FLAG_USE_PHYLIB,(unsigned long *)(& tp->tg3_flags));
      #line 17675 
      _tg3_flag_set((enum TG3_FLAGS)TG3_FLAG_ROBOSWITCH,(unsigned long *)(& tp->tg3_flags));
    }
    #line 17677 
    if ((int)pdev_is_ssb_gige_core(pdev) != 0) 
                                               #line 17678 
                                               _tg3_flag_set((enum TG3_FLAGS)TG3_FLAG_RGMII_MODE,(unsigned long *)(& tp->tg3_flags));
  }
  #line 17685 
  tp->misc_host_ctrl = 154U;
  #line 17697 
  tp->grc_mode = 52U;
  #line 17702 
  spinlock_check(& tp->lock);
  {
    #line 17702 
    struct lock_class_key __key;
    #line 17702 
    __raw_spin_lock_init(& tp->lock.__anonCompField_spinlock_25.rlock,(char *)"&(&tp->lock)->rlock",& __key);
  }
  #line 17703 
  spinlock_check(& tp->indirect_lock);
  {
    #line 17703 
    struct lock_class_key __key_0;
    #line 17703 
    __raw_spin_lock_init(& tp->indirect_lock.__anonCompField_spinlock_25.rlock,(char *)"&(&tp->indirect_lock)->rlock",& __key_0);
  }
  {
    #line 17704 
    struct lock_class_key __key_1;
    #line 17704 
    __init_work(& tp->reset_task,0);
    #line 17704 
    atomic_long_t __constr_expr_44 = {.counter = 137438953408LL};
    #line 17704 
    tp->reset_task.data = __constr_expr_44;
    #line 17704 
    lockdep_init_map(& tp->reset_task.lockdep_map,(char *)"(work_completion)",& __key_1,0);
    #line 17704 
    INIT_LIST_HEAD(& tp->reset_task.entry);
    #line 17704 
    tp->reset_task.func = & tg3_reset_task;
  }
  #line 17706 
  tp->regs = pci_ioremap_bar(pdev,0);
  #line 17707 
  if (tp->regs == (void *)0) {
    #line 17708 
    _dev_err(& pdev->dev,(char *)"Cannot map device registers, aborting\n");
    #line 17709 
    err = -12;
    #line 17710 
    goto err_out_free_dev;
  }
  #line 17713 
  if ((((((((((((((unsigned int)(tp->pdev)->device + 59776U <= 1U || (unsigned int)(tp->pdev)->device == 5768U) || (unsigned int)(tp->pdev)->device == 5769U) || (unsigned int)(tp->pdev)->device == 5717U) || (unsigned int)(tp->pdev)->device == 5733U) || (unsigned int)(tp->pdev)->device == 5718U) || (unsigned int)(tp->pdev)->device == 5719U) || (unsigned int)(tp->pdev)->device == 5727U) || (unsigned int)(tp->pdev)->device == 5763U) || (unsigned int)(tp->pdev)->device == 5698U) || (unsigned int)(tp->pdev)->device == 5767U) || (unsigned int)(tp->pdev)->device == 5699U) || (unsigned int)(tp->pdev)->device == 5875U) || (unsigned int)(tp->pdev)->device == 5697U) {
    #line 17728 
    _tg3_flag_set((enum TG3_FLAGS)TG3_FLAG_ENABLE_APE,(unsigned long *)(& tp->tg3_flags));
    #line 17729 
    tp->aperegs = pci_ioremap_bar(pdev,2);
    #line 17730 
    if (tp->aperegs == (void *)0) {
      #line 17731 
      _dev_err(& pdev->dev,(char *)"Cannot map APE registers, aborting\n");
      #line 17733 
      err = -12;
      #line 17734 
      goto err_out_iounmap;
    }
  }
  #line 17738 
  tp->rx_pending = 200U;
  #line 17739 
  tp->rx_jumbo_pending = 100U;
  #line 17741 
  dev->ethtool_ops = & tg3_ethtool_ops;
  #line 17742 
  dev->watchdog_timeo = 1250;
  #line 17743 
  dev->netdev_ops = & tg3_netdev_ops;
  #line 17744 
  dev->irq = (int)pdev->irq;
  #line 17746 
  err = tg3_get_invariants(tp,ent);
  #line 17747 
  if (err != 0) {
    #line 17748 
    _dev_err(& pdev->dev,(char *)"Problem fetching invariants of chip, aborting\n");
    #line 17750 
    goto err_out_apeunmap;
  }
  #line 17759 
  if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_IS_5788,
                  (unsigned long *)(& tp->tg3_flags)) != 0) {
    #line 17760 
    dma_mask = 4294967295ULL;
    #line 17760 
    persist_dma_mask = dma_mask;
  }
  else {
    #line 17761 
    if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_40BIT_DMA_BUG,
                  (unsigned long *)(& tp->tg3_flags)) != 0) {
      #line 17762 
      dma_mask = 1099511627775ULL;
      #line 17762 
      persist_dma_mask = dma_mask;
    }
    else {
      #line 17767 
      dma_mask = 18446744073709551615ULL;
      #line 17767 
      persist_dma_mask = dma_mask;
    }
  }
  #line 17770 
  if (dma_mask > 4294967295ULL) {
    #line 17771 
    err = pci_set_dma_mask(pdev,dma_mask);
    #line 17772 
    if (err == 0) {
      #line 17773 
      features |= 32ULL;
      #line 17774 
      err = pci_set_consistent_dma_mask(pdev,persist_dma_mask);
      #line 17776 
      if (err < 0) {
        #line 17777 
        _dev_err(& pdev->dev,(char *)"Unable to obtain 64 bit ");
        #line 17779 
        goto err_out_apeunmap;
      }
    }
  }
  #line 17783 
  if (err != 0 || dma_mask == 4294967295ULL) {
    #line 17784 
    err = pci_set_dma_mask(pdev,4294967295ULL);
    #line 17785 
    if (err != 0) {
      #line 17786 
      _dev_err(& pdev->dev,(char *)"No usable DMA configuration, aborting\n");
      #line 17788 
      goto err_out_apeunmap;
    }
  }
  #line 17792 
  tg3_init_bufmgr_config(tp);
  #line 17797 
  if (tp->pci_chip_rev_id != 28928U) {
    #line 17798 
    features |= 549755813891ULL;
    #line 17800 
    if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_5755_PLUS,
                  (unsigned long *)(& tp->tg3_flags)) != 0) 
      #line 17801 
      features |= 16ULL;
  }
  #line 17808 
  if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_HW_TSO_1,
                  (unsigned long *)(& tp->tg3_flags)) != 0) 
    #line 17808 
    goto _LOR;
  else {
    #line 17808 
    if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_HW_TSO_2,
                  (unsigned long *)(& tp->tg3_flags)) != 0) 
      #line 17808 
      goto _LOR;
    else {
      #line 17809 
      if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_HW_TSO_3,
                   (unsigned long *)(& tp->tg3_flags)) != 0) {
        #line 17808 
        _LOR: 
              #line 17810 
        ;
        #line 17810 
        if ((features & 2ULL) != 0ULL) 
                                       #line 17812 
                                       features |= 65536ULL;
      }
    }
  }
  #line 17813 
  if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_HW_TSO_2,
                   (unsigned long *)(& tp->tg3_flags)) != 0) 
    #line 17813 
    goto _LOR_0;
  else {
    #line 17813 
    if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_HW_TSO_3,
                   (unsigned long *)(& tp->tg3_flags)) != 0) {
      #line 17813 
      _LOR_0: {
                #line 17814 
                if ((features & 16ULL) != 0ULL) 
                                                #line 17815 
                                                features |= 1048576ULL;
                #line 17816 
                if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_HW_TSO_3,
                   (unsigned long *)(& tp->tg3_flags)) != 0) 
                  #line 17822 
                  features |= 262144ULL;
                else 
                  #line 17816 
                  if (tp->pci_chip_rev_id >> 12 == 22369U) 
                                                           #line 17822 
                                                           features |= 262144ULL;
                  else 
                    #line 17817 
                    if (tp->pci_chip_rev_id >> 12 == 22404U && tp->pci_chip_rev_id >> 8 != 358464U) 
                      #line 17822 
                      features |= 262144ULL;
                    else 
                      #line 17819 
                      if (tp->pci_chip_rev_id >> 12 == 22405U) 
                                                               #line 17822 
                                                               features |= 262144ULL;
                      else 
                        #line 17820 
                        if (tp->pci_chip_rev_id >> 12 == 358272U) 
                                                                  #line 17822 
                                                                  features |= 262144ULL;
              }
    }
  }
  #line 17825 
  dev->features = (dev->features | features) | 384ULL;
  #line 17827 
  dev->vlan_features |= features;
  #line 17834 
  if (tp->pci_chip_rev_id >> 12 != 8U) {
    #line 17834 
    if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_CPMU_PRESENT,
                   (unsigned long *)(& tp->tg3_flags)) == 0) 
      #line 17837 
      features |= 2199023255552ULL;
  }
  #line 17839 
  dev->hw_features |= features;
  #line 17840 
  dev->priv_flags |= 4096U;
  #line 17843 
  dev->min_mtu = 60U;
  #line 17844 
  if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_JUMBO_CAPABLE,
                   (unsigned long *)(& tp->tg3_flags)) != 0) 
    #line 17844 
    dev->max_mtu = 9000U; else 
                               #line 17844 
                               dev->max_mtu = 1500U;
  #line 17846 
  if (tp->pci_chip_rev_id == 12289U) {
    #line 17846 
    if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_TSO_CAPABLE,
                   (unsigned long *)(& tp->tg3_flags)) == 0) {
      #line 17847 
      if (((*(tp->read32))(tp,112U) & 8U) == 0U) {
        #line 17849 
        _tg3_flag_set((enum TG3_FLAGS)TG3_FLAG_MAX_RXPEND_64,(unsigned long *)(& tp->tg3_flags));
        #line 17850 
        tp->rx_pending = 63U;
      }
    }
  }
  #line 17853 
  err = tg3_get_device_address(tp);
  #line 17854 
  if (err != 0) {
    #line 17855 
    _dev_err(& pdev->dev,(char *)"Could not obtain valid ethernet address, aborting\n");
    #line 17857 
    goto err_out_apeunmap;
  }
  #line 17860 
  intmbx = 516U;
  #line 17861 
  rcvmbx = 644U;
  #line 17862 
  sndmbx = 772U;
  #line 17863 
  i = 0;
  #line 17863 
  while (tp->irq_max > (unsigned int)i) {
    {
      #line 17864 
      struct tg3_napi *tnapi = & tp->napi[i];
      #line 17866 
      tnapi->tp = tp;
      #line 17867 
      tnapi->tx_pending = 511U;
      #line 17869 
      tnapi->int_mbox = intmbx;
      #line 17870 
      if (i <= 4) 
                  #line 17871 
                  intmbx += 8U; else 
                                     #line 17873 
                                     intmbx += 4U;
      #line 17875 
      tnapi->consmbox = rcvmbx;
      #line 17876 
      tnapi->prodmbox = sndmbx;
      #line 17878 
      if (i != 0) 
                  #line 17879 
                  tnapi->coal_now = (unsigned int)(8192 << (i + -1)); else 
                                                                    #line 17881 
                                                                    tnapi->coal_now = 8U;
      #line 17883 
      if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_SUPPORT_MSIX,
                   (unsigned long *)(& tp->tg3_flags)) == 0) 
        #line 17884 
        break;
      #line 17893 
      if (i == 0) 
                  #line 17894 
                  goto __Cont;
      #line 17896 
      rcvmbx += 8U;
      #line 17898 
      if ((sndmbx & 4U) != 0U) 
                               #line 17899 
                               sndmbx += 4294967292U; else 
                                                           #line 17901 
                                                           sndmbx += 12U;
    }
    #line 17863 
    __Cont: 
            #line 17863 
    i ++;
  }
  #line 17909 
  if (((*(tp->read32))(tp,15360U) & 2U) != 0U) 
                                               #line 17909 
                                               goto _LOR_1;
  else {
    #line 17909 
    if (((*(tp->read32))(tp,19456U) & 2U) != 0U) {
      #line 17909 
      _LOR_1: {
                #line 17911 
                tg3_full_lock(tp,0);
                #line 17912 
                (*(tp->write32))(tp,16384U,2U);
                #line 17913 
                tg3_halt(tp,0,(_Bool)1);
                #line 17914 
                tg3_full_unlock(tp);
              }
    }
  }
  #line 17917 
  err = tg3_test_dma(tp);
  #line 17918 
  if (err != 0) {
    #line 17919 
    _dev_err(& pdev->dev,(char *)"DMA engine test failed, aborting\n");
    #line 17920 
    goto err_out_apeunmap;
  }
  #line 17923 
  tg3_init_coal(tp);
  #line 17925 
  pci_set_drvdata(pdev,(void *)dev);
  #line 17927 
  if ((tp->pci_chip_rev_id >> 12 == 22297U || tp->pci_chip_rev_id >> 12 == 22304U) || tp->pci_chip_rev_id >> 12 == 22370U) 
    #line 17930 
    _tg3_flag_set((enum TG3_FLAGS)TG3_FLAG_PTP_CAPABLE,(unsigned long *)(& tp->tg3_flags));
  #line 17932 
  tg3_timer_init(tp);
  #line 17934 
  tg3_carrier_off(tp);
  #line 17936 
  err = cif_register_netdev(dev);
  #line 17937 
  if (err != 0) {
    #line 17938 
    _dev_err(& pdev->dev,(char *)"Cannot register net device, aborting\n");
    #line 17939 
    goto err_out_apeunmap;
  }
  #line 17942 
  if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_PTP_CAPABLE,
                   (unsigned long *)(& tp->tg3_flags)) != 0) {
    #line 17943 
    tg3_ptp_init(tp);
    #line 17944 
    tp->ptp_clock = ptp_clock_register(& tp->ptp_info,& (tp->pdev)->dev);
    #line 17946 
    if ((int)IS_ERR((void *)tp->ptp_clock) != 0) 
                                                 #line 17947 
                                                 tp->ptp_clock = (struct ptp_clock *)0;
  }
  #line 17950 
  ;
  #line 17950 
  ;
  #line 17950 
  ;
  #line 17950 
  ;
  #line 17950 
  netdev_info(dev,(char *)"Tigon3 [partno(%s) rev %04x] (%s) MAC address %pM\n",(char *)(& tp->board_part_number),tp->pci_chip_rev_id,tg3_bus_string(tp,(char *)(& str)),dev->dev_addr);
  #line 17956 
  if ((tp->phy_flags & 2U) == 0U) {
    #line 17957 
    char *ethtype;
    #line 17959 
    if ((tp->phy_flags & 128U) != 0U) 
                                      #line 17960 
                                      ethtype = (char *)"10/100Base-TX";
    else 
      #line 17961 
      if ((tp->phy_flags & 48U) != 0U) 
                                       #line 17962 
                                       ethtype = (char *)"1000Base-SX"; else 
                                                                    #line 17964 
                                                                    ethtype = (char *)"10/100/1000Base-T";
    #line 17966 
    ;
    #line 17966 
    ;
    #line 17966 
    ;
    #line 17966 
    ;
    #line 17966 
    netdev_info(dev,(char *)"attached PHY is %s (%s Ethernet) ",tg3_phy_string(tp),ethtype,(tp->phy_flags & 1024U) == 0U,(tp->phy_flags & 262144U) != 0U);
  }
  #line 17973 
  ;
  #line 17973 
  ;
  #line 17973 
  ;
  #line 17973 
  netdev_info(dev,(char *)"RXcsums[%d] LinkChgREG[%d] MIirq[%d] ASF[%d] TSOcap[%d]\n",(dev->features & 549755813888ULL) != 0ULL,_tg3_flag((enum TG3_FLAGS)TG3_FLAG_USE_LINKCHG_REG,
                   (unsigned long *)(& tp->tg3_flags)) != 0,(tp->phy_flags & 4U) != 0U,_tg3_flag((enum TG3_FLAGS)TG3_FLAG_ENABLE_ASF,
                   (unsigned long *)(& tp->tg3_flags)) != 0,_tg3_flag((enum TG3_FLAGS)TG3_FLAG_TSO_CAPABLE,
                   (unsigned long *)(& tp->tg3_flags)) != 0);
  #line 17980 
  if (pdev->dma_mask != 4294967295ULL) {
    #line 17981 
    if (pdev->dma_mask == 1099511627775ULL) 
                                            #line 17981 
                                            tmp_28 = 40; else 
                                                              #line 17981 
                                                              tmp_28 = 64;
    #line 17980 
    tmp_29 = tmp_28;
  }
  else 
       #line 17980 
       tmp_29 = 32;
  #line 17979 
  ;
  #line 17979 
  ;
  #line 17979 
  netdev_info(dev,(char *)"dma_rwctrl[%08x] dma_mask[%d-bit]\n",tp->dma_rwctrl,tmp_29);
  #line 17984 
  pci_save_state(pdev);
  #line 17986 
  return 0;
  #line 17988 
  err_out_apeunmap: 
                    #line 17988 
  ;
  #line 17989 
  if (tp->aperegs != (void *)0) {
    #line 17990 
    iounmap(tp->aperegs);
    #line 17991 
    tp->aperegs = (void *)0;
  }
  #line 17994 
  err_out_iounmap: 
                   #line 17994 
  ;
  #line 17995 
  if (tp->regs != (void *)0) {
    #line 17996 
    iounmap(tp->regs);
    #line 17997 
    tp->regs = (void *)0;
  }
  #line 18000 
  err_out_free_dev: 
                    #line 18000 
  ;
  #line 18001 
  cif_free_netdev(dev);
  #line 18003 
  err_out_free_res: 
                    #line 18003 
  ;
  #line 18004 
  pci_release_regions(pdev);
  #line 18006 
  err_out_disable_pdev: 
                        #line 18006 
  ;
  #line 18007 
  if (pci_is_enabled(pdev) != 0) 
                                 #line 18008 
                                 pci_disable_device(pdev);
  #line 18009 
  return err;
}

#line 18012  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
static void tg3_remove_one(struct pci_dev *pdev)
{
  #line 18014 
  struct net_device *dev = pci_get_drvdata(pdev);
  #line 18016 
  if (dev != (struct net_device *)0) {
    #line 18017 
    struct tg3 *tp = netdev_priv(dev);
    #line 18019 
    tg3_ptp_fini(tp);
    #line 18021 
    cif_release_firmware(tp->fw);
    #line 18023 
    tg3_reset_task_cancel(tp);
    #line 18025 
    if (_tg3_flag((enum TG3_FLAGS)TG3_FLAG_USE_PHYLIB,
                  (unsigned long *)(& tp->tg3_flags)) != 0) {
      #line 18026 
      tg3_phy_fini(tp);
      #line 18027 
      tg3_mdio_fini(tp);
    }
    #line 18030 
    cif_unregister_netdev(dev);
    #line 18031 
    if (tp->aperegs != (void *)0) {
      #line 18032 
      iounmap(tp->aperegs);
      #line 18033 
      tp->aperegs = (void *)0;
    }
    #line 18035 
    if (tp->regs != (void *)0) {
      #line 18036 
      iounmap(tp->regs);
      #line 18037 
      tp->regs = (void *)0;
    }
    #line 18039 
    cif_free_netdev(dev);
    #line 18040 
    pci_release_regions(pdev);
    #line 18041 
    pci_disable_device(pdev);
  }
  #line 18043 
  return;
}

#line 18046  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
static int tg3_suspend(struct device *device)
{
  #line 18048 
  struct net_device *dev = dev_get_drvdata(device);
  #line 18049 
  struct tg3 *tp = netdev_priv(dev);
  #line 18050 
  int err = 0;
  #line 18052 
  rtnl_lock();
  #line 18054 
  if (! netif_running(dev)) 
                            #line 18055 
                            goto unlock;
  #line 18057 
  tg3_reset_task_cancel(tp);
  #line 18058 
  tg3_phy_stop(tp);
  #line 18059 
  tg3_netif_stop(tp);
  #line 18061 
  tg3_timer_stop(tp);
  #line 18063 
  tg3_full_lock(tp,1);
  #line 18064 
  tg3_disable_ints(tp);
  #line 18065 
  tg3_full_unlock(tp);
  #line 18067 
  netif_device_detach(dev);
  #line 18069 
  tg3_full_lock(tp,0);
  #line 18070 
  tg3_halt(tp,0,(_Bool)1);
  #line 18071 
  _tg3_flag_clear((enum TG3_FLAGS)TG3_FLAG_INIT_COMPLETE,(unsigned long *)(& tp->tg3_flags));
  #line 18072 
  tg3_full_unlock(tp);
  #line 18074 
  err = tg3_power_down_prepare(tp);
  #line 18075 
  if (err != 0) {
    #line 18076 
    int err2;
    #line 18078 
    tg3_full_lock(tp,0);
    #line 18080 
    _tg3_flag_set((enum TG3_FLAGS)TG3_FLAG_INIT_COMPLETE,(unsigned long *)(& tp->tg3_flags));
    #line 18081 
    err2 = tg3_restart_hw(tp,(_Bool)1);
    #line 18082 
    if (err2 != 0) 
                   #line 18083 
                   goto out;
    #line 18085 
    tg3_timer_start(tp);
    #line 18087 
    netif_device_attach(dev);
    #line 18088 
    tg3_netif_start(tp);
    #line 18090 
    out: 
         #line 18090 
    ;
    #line 18091 
    tg3_full_unlock(tp);
    #line 18093 
    if (err2 == 0) 
                   #line 18094 
                   tg3_phy_start(tp);
  }
  #line 18097 
  unlock: 
          #line 18097 
  ;
  #line 18098 
  rtnl_unlock();
  #line 18099 
  return err;
}

#line 18102  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
static int tg3_resume(struct device *device)
{
  #line 18104 
  struct net_device *dev = dev_get_drvdata(device);
  #line 18105 
  struct tg3 *tp = netdev_priv(dev);
  #line 18106 
  int err = 0;
  #line 18108 
  rtnl_lock();
  #line 18110 
  if (! netif_running(dev)) 
                            #line 18111 
                            goto unlock;
  #line 18113 
  netif_device_attach(dev);
  #line 18115 
  tg3_full_lock(tp,0);
  #line 18117 
  tg3_ape_driver_state_change(tp,1);
  #line 18119 
  _tg3_flag_set((enum TG3_FLAGS)TG3_FLAG_INIT_COMPLETE,(unsigned long *)(& tp->tg3_flags));
  #line 18120 
  err = tg3_restart_hw(tp,(_Bool)((tp->phy_flags & 1048576U) == 0U));
  #line 18122 
  if (err != 0) 
                #line 18123 
                goto out;
  #line 18125 
  tg3_timer_start(tp);
  #line 18127 
  tg3_netif_start(tp);
  #line 18129 
  out: 
       #line 18129 
  ;
  #line 18130 
  tg3_full_unlock(tp);
  #line 18132 
  if (err == 0) 
                #line 18133 
                tg3_phy_start(tp);
  #line 18135 
  unlock: 
          #line 18135 
  ;
  #line 18136 
  rtnl_unlock();
  #line 18137 
  return err;
}

#line 18141  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
static struct dev_pm_ops tg3_pm_ops = {.suspend = & tg3_suspend, .resume = & tg3_resume, .freeze = & tg3_suspend, .thaw = & tg3_resume, .poweroff = & tg3_suspend, .restore = & tg3_resume};
#line 18143  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
static void tg3_shutdown(struct pci_dev *pdev)
{
  #line 18145 
  struct net_device *dev = pci_get_drvdata(pdev);
  #line 18146 
  struct tg3 *tp = netdev_priv(dev);
  #line 18148 
  rtnl_lock();
  #line 18149 
  netif_device_detach(dev);
  #line 18151 
  if ((int)netif_running(dev) != 0) 
                                    #line 18152 
                                    dev_close(dev);
  #line 18154 
  if (system_state == (unsigned int)SYSTEM_POWER_OFF) 
                                                      #line 18155 
                                                      tg3_power_down(tp);
  #line 18157 
  rtnl_unlock();
  #line 18158 
  return;
}

#line 18168  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
static pci_ers_result_t tg3_io_error_detected(struct pci_dev *pdev, pci_channel_state_t state)
{
  #line 18171 
  struct net_device *netdev = pci_get_drvdata(pdev);
  #line 18172 
  struct tg3 *tp = netdev_priv(netdev);
  #line 18173 
  pci_ers_result_t err = 3U;
  #line 18175 
  netdev_info(netdev,(char *)"PCI I/O error detected\n");
  #line 18177 
  rtnl_lock();
  #line 18180 
  if (netdev == (struct net_device *)0) 
                                        #line 18180 
                                        goto _LOR;
  else {
    #line 18180 
    if (! netif_running(netdev)) 
                                 #line 18180 
                                 _LOR: 
                                       #line 18181 
                                       goto done;
  }
  #line 18184 
  if (state == 2U) 
                   #line 18185 
                   tp->pcierr_recovery = (_Bool)1;
  #line 18187 
  tg3_phy_stop(tp);
  #line 18189 
  tg3_netif_stop(tp);
  #line 18191 
  tg3_timer_stop(tp);
  #line 18194 
  tg3_reset_task_cancel(tp);
  #line 18196 
  netif_device_detach(netdev);
  #line 18199 
  tg3_full_lock(tp,0);
  #line 18200 
  tg3_halt(tp,0,(_Bool)0);
  #line 18201 
  tg3_full_unlock(tp);
  #line 18203 
  done: 
        #line 18203 
  ;
  #line 18204 
  if (state == 3U) {
    #line 18205 
    if (netdev != (struct net_device *)0) {
      #line 18206 
      tg3_napi_enable(tp);
      #line 18207 
      dev_close(netdev);
    }
    #line 18209 
    err = 4U;
  }
  else 
       #line 18211 
       pci_disable_device(pdev);
  #line 18214 
  rtnl_unlock();
  #line 18216 
  return err;
}

#line 18228  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
static pci_ers_result_t tg3_io_slot_reset(struct pci_dev *pdev)
{
  #line 18233 
  int err;
  #line 18230 
  struct net_device *netdev = pci_get_drvdata(pdev);
  #line 18231 
  struct tg3 *tp = netdev_priv(netdev);
  #line 18232 
  pci_ers_result_t rc = 4U;
  #line 18235 
  rtnl_lock();
  #line 18237 
  if (pci_enable_device(pdev) != 0) {
    #line 18238 
    _dev_err(& pdev->dev,(char *)"Cannot re-enable PCI device after reset.\n");
    #line 18240 
    goto done;
  }
  #line 18243 
  pci_set_master(pdev);
  #line 18244 
  pci_restore_state(pdev);
  #line 18245 
  pci_save_state(pdev);
  #line 18247 
  if (netdev == (struct net_device *)0) 
                                        #line 18247 
                                        goto _LOR;
  else {
    #line 18247 
    if (! netif_running(netdev)) {
      #line 18247 
      _LOR: {
              #line 18248 
              rc = 5U;
              #line 18249 
              goto done;
            }
    }
  }
  #line 18252 
  err = tg3_power_up(tp);
  #line 18253 
  if (err != 0) 
                #line 18254 
                goto done;
  #line 18256 
  rc = 5U;
  #line 18258 
  done: 
        #line 18258 
  ;
  #line 18259 
  if (rc != 5U && netdev != (struct net_device *)0) {
    #line 18259 
    if ((int)netif_running(netdev) != 0) {
      #line 18260 
      tg3_napi_enable(tp);
      #line 18261 
      dev_close(netdev);
    }
  }
  #line 18263 
  rtnl_unlock();
  #line 18265 
  return rc;
}

#line 18275  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
static void tg3_io_resume(struct pci_dev *pdev)
{
  #line 18279 
  int err;
  #line 18277 
  struct net_device *netdev = pci_get_drvdata(pdev);
  #line 18278 
  struct tg3 *tp = netdev_priv(netdev);
  #line 18281 
  rtnl_lock();
  #line 18283 
  if (netdev == (struct net_device *)0) 
                                        #line 18283 
                                        goto _LOR;
  else {
    #line 18283 
    if (! netif_running(netdev)) 
                                 #line 18283 
                                 _LOR: 
                                       #line 18284 
                                       goto done;
  }
  #line 18286 
  tg3_full_lock(tp,0);
  #line 18287 
  tg3_ape_driver_state_change(tp,1);
  #line 18288 
  _tg3_flag_set((enum TG3_FLAGS)TG3_FLAG_INIT_COMPLETE,(unsigned long *)(& tp->tg3_flags));
  #line 18289 
  err = tg3_restart_hw(tp,(_Bool)1);
  #line 18290 
  if (err != 0) {
    #line 18291 
    tg3_full_unlock(tp);
    #line 18292 
    netdev_err(netdev,(char *)"Cannot restart hardware after reset.\n");
    #line 18293 
    goto done;
  }
  #line 18296 
  netif_device_attach(netdev);
  #line 18298 
  tg3_timer_start(tp);
  #line 18300 
  tg3_netif_start(tp);
  #line 18302 
  tg3_full_unlock(tp);
  #line 18304 
  tg3_phy_start(tp);
  #line 18306 
  done: 
        #line 18306 
  ;
  #line 18307 
  tp->pcierr_recovery = (_Bool)0;
  #line 18308 
  rtnl_unlock();
  #line 18309 
  return;
}

#line 18311  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
static struct pci_error_handlers tg3_err_handler = {.error_detected = (pci_ers_result_t (*)(struct pci_dev *, enum pci_channel_state ))(& tg3_io_error_detected), .slot_reset = & tg3_io_slot_reset, .resume = & tg3_io_resume};
#line 18317  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
static struct pci_driver tg3_driver = {.name = (char *)"tg3", .id_table = (struct pci_device_id *)(& tg3_pci_tbl), .probe = & tg3_init_one, .remove = & tg3_remove_one, .shutdown = & tg3_shutdown, .err_handler = & tg3_err_handler, .driver = {.pm = & tg3_pm_ops}};
#line 18327  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
static int tg3_driver_init(void)
{
  #line 18327 
  return cif___pci_register_driver(& tg3_driver,& __this_module,(char *)"tg3");
}

#line 18327  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/broadcom/tg3.c"
static void tg3_driver_exit(void)
{
  #line 18327 
  cif_pci_unregister_driver(& tg3_driver);
  #line 18328 
  return;
}

#line 93  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/broadcom/tg3.ko/concurrency safety/0/concurrency safety/weaver/tg3.i.aux"
int (*emg_alias_eth_validate_addr)(struct net_device *) = & eth_validate_addr;
#line 94  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/broadcom/tg3.ko/concurrency safety/0/concurrency safety/weaver/tg3.i.aux"
struct pci_driver *emg_alias_tg3_driver = & tg3_driver;
#line 95  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/broadcom/tg3.ko/concurrency safety/0/concurrency safety/weaver/tg3.i.aux"
struct dev_pm_ops *emg_alias_tg3_pm_ops = & tg3_pm_ops;
#line 98 
#line 98 
int emg___pci_register_driver(struct pci_driver *arg0, struct module *arg1, char *arg2);
#line 99 
#line 99 
struct net_device *emg_alloc_etherdev_mqs(int arg0, unsigned int arg1, unsigned int arg2);
#line 100 
#line 100 
int emg_del_timer_sync(struct timer_list *arg0);
#line 101 
#line 101 
void *emg_free_irq(unsigned int arg0, void *arg1);
#line 102 
#line 102 
void emg_free_netdev(struct net_device *arg0);
#line 103 
#line 103 
void emg_pci_unregister_driver(struct pci_driver *arg0);
#line 104 
#line 104 
int emg_register_netdev(struct net_device *arg0);
#line 105 
#line 105 
int emg_request_irq(unsigned int arg0, enum irqreturn (*arg1)(int , void *), unsigned long arg2, char *arg3, void *arg4);
#line 106 
#line 106 
_Bool emg_schedule_work(struct work_struct *arg0);
#line 107 
#line 107 
void emg_unregister_netdev(struct net_device *arg0);
#line 111  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/broadcom/tg3.ko/concurrency safety/0/concurrency safety/weaver/tg3.i.aux"
int emg_wrapper_tg3_change_mtu(struct net_device *arg0, int arg1)
{
  #line 112 
  return tg3_change_mtu(arg0,arg1);
}

#line 116  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/broadcom/tg3.ko/concurrency safety/0/concurrency safety/weaver/tg3.i.aux"
int emg_wrapper_tg3_close(struct net_device *arg0)
{
  #line 117 
  return tg3_close(arg0);
}

#line 121  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/broadcom/tg3.ko/concurrency safety/0/concurrency safety/weaver/tg3.i.aux"
unsigned long long emg_wrapper_tg3_fix_features(struct net_device *arg0, unsigned long long arg1)
{
  #line 122 
  return tg3_fix_features(arg0,arg1);
}

#line 126  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/broadcom/tg3.ko/concurrency safety/0/concurrency safety/weaver/tg3.i.aux"
void emg_wrapper_tg3_get_channels(struct net_device *arg0, struct ethtool_channels *arg1)
{
  #line 127 
  tg3_get_channels(arg0,arg1);
  #line 128 
  return;
}

#line 131  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/broadcom/tg3.ko/concurrency safety/0/concurrency safety/weaver/tg3.i.aux"
int emg_wrapper_tg3_get_coalesce(struct net_device *arg0, struct ethtool_coalesce *arg1)
{
  #line 132 
  return tg3_get_coalesce(arg0,arg1);
}

#line 136  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/broadcom/tg3.ko/concurrency safety/0/concurrency safety/weaver/tg3.i.aux"
void emg_wrapper_tg3_get_drvinfo(struct net_device *arg0, struct ethtool_drvinfo *arg1)
{
  #line 137 
  tg3_get_drvinfo(arg0,arg1);
  #line 138 
  return;
}

#line 141  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/broadcom/tg3.ko/concurrency safety/0/concurrency safety/weaver/tg3.i.aux"
int emg_wrapper_tg3_get_eee(struct net_device *arg0, struct ethtool_eee *arg1)
{
  #line 142 
  return tg3_get_eee(arg0,arg1);
}

#line 146  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/broadcom/tg3.ko/concurrency safety/0/concurrency safety/weaver/tg3.i.aux"
int emg_wrapper_tg3_get_eeprom(struct net_device *arg0, struct ethtool_eeprom *arg1, unsigned char *arg2)
{
  #line 147 
  return tg3_get_eeprom(arg0,arg1,arg2);
}

#line 151  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/broadcom/tg3.ko/concurrency safety/0/concurrency safety/weaver/tg3.i.aux"
int emg_wrapper_tg3_get_eeprom_len(struct net_device *arg0)
{
  #line 152 
  return tg3_get_eeprom_len(arg0);
}

#line 156  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/broadcom/tg3.ko/concurrency safety/0/concurrency safety/weaver/tg3.i.aux"
void emg_wrapper_tg3_get_ethtool_stats(struct net_device *arg0, struct ethtool_stats *arg1, unsigned long long *arg2)
{
  #line 157 
  tg3_get_ethtool_stats(arg0,arg1,arg2);
  #line 158 
  return;
}

#line 161  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/broadcom/tg3.ko/concurrency safety/0/concurrency safety/weaver/tg3.i.aux"
int emg_wrapper_tg3_get_link_ksettings(struct net_device *arg0, struct ethtool_link_ksettings *arg1)
{
  #line 162 
  return tg3_get_link_ksettings(arg0,arg1);
}

#line 166  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/broadcom/tg3.ko/concurrency safety/0/concurrency safety/weaver/tg3.i.aux"
unsigned int emg_wrapper_tg3_get_msglevel(struct net_device *arg0)
{
  #line 167 
  return tg3_get_msglevel(arg0);
}

#line 171  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/broadcom/tg3.ko/concurrency safety/0/concurrency safety/weaver/tg3.i.aux"
void emg_wrapper_tg3_get_pauseparam(struct net_device *arg0, struct ethtool_pauseparam *arg1)
{
  #line 172 
  tg3_get_pauseparam(arg0,arg1);
  #line 173 
  return;
}

#line 176  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/broadcom/tg3.ko/concurrency safety/0/concurrency safety/weaver/tg3.i.aux"
void emg_wrapper_tg3_get_regs(struct net_device *arg0, struct ethtool_regs *arg1, void *arg2)
{
  #line 177 
  tg3_get_regs(arg0,arg1,arg2);
  #line 178 
  return;
}

#line 181  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/broadcom/tg3.ko/concurrency safety/0/concurrency safety/weaver/tg3.i.aux"
int emg_wrapper_tg3_get_regs_len(struct net_device *arg0)
{
  #line 182 
  return tg3_get_regs_len(arg0);
}

#line 186  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/broadcom/tg3.ko/concurrency safety/0/concurrency safety/weaver/tg3.i.aux"
void emg_wrapper_tg3_get_ringparam(struct net_device *arg0, struct ethtool_ringparam *arg1)
{
  #line 187 
  tg3_get_ringparam(arg0,arg1);
  #line 188 
  return;
}

#line 191  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/broadcom/tg3.ko/concurrency safety/0/concurrency safety/weaver/tg3.i.aux"
int emg_wrapper_tg3_get_rxfh(struct net_device *arg0, unsigned int *arg1, unsigned char *arg2, unsigned char *arg3)
{
  #line 192 
  return tg3_get_rxfh(arg0,arg1,arg2,arg3);
}

#line 196  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/broadcom/tg3.ko/concurrency safety/0/concurrency safety/weaver/tg3.i.aux"
unsigned int emg_wrapper_tg3_get_rxfh_indir_size(struct net_device *arg0)
{
  #line 197 
  return tg3_get_rxfh_indir_size(arg0);
}

#line 201  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/broadcom/tg3.ko/concurrency safety/0/concurrency safety/weaver/tg3.i.aux"
int emg_wrapper_tg3_get_rxnfc(struct net_device *arg0, struct ethtool_rxnfc *arg1, unsigned int *arg2)
{
  #line 202 
  return tg3_get_rxnfc(arg0,arg1,arg2);
}

#line 206  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/broadcom/tg3.ko/concurrency safety/0/concurrency safety/weaver/tg3.i.aux"
int emg_wrapper_tg3_get_sset_count(struct net_device *arg0, int arg1)
{
  #line 207 
  return tg3_get_sset_count(arg0,arg1);
}

#line 211  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/broadcom/tg3.ko/concurrency safety/0/concurrency safety/weaver/tg3.i.aux"
void emg_wrapper_tg3_get_stats64(struct net_device *arg0, struct rtnl_link_stats64 *arg1)
{
  #line 212 
  tg3_get_stats64(arg0,arg1);
  #line 213 
  return;
}

#line 216  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/broadcom/tg3.ko/concurrency safety/0/concurrency safety/weaver/tg3.i.aux"
void emg_wrapper_tg3_get_strings(struct net_device *arg0, unsigned int arg1, unsigned char *arg2)
{
  #line 217 
  tg3_get_strings(arg0,arg1,arg2);
  #line 218 
  return;
}

#line 221  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/broadcom/tg3.ko/concurrency safety/0/concurrency safety/weaver/tg3.i.aux"
int emg_wrapper_tg3_get_ts_info(struct net_device *arg0, struct ethtool_ts_info *arg1)
{
  #line 222 
  return tg3_get_ts_info(arg0,arg1);
}

#line 226  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/broadcom/tg3.ko/concurrency safety/0/concurrency safety/weaver/tg3.i.aux"
void emg_wrapper_tg3_get_wol(struct net_device *arg0, struct ethtool_wolinfo *arg1)
{
  #line 227 
  tg3_get_wol(arg0,arg1);
  #line 228 
  return;
}

#line 231  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/broadcom/tg3.ko/concurrency safety/0/concurrency safety/weaver/tg3.i.aux"
int emg_wrapper_tg3_init_one(struct pci_dev *arg0, struct pci_device_id *arg1)
{
  #line 232 
  return tg3_init_one(arg0,arg1);
}

#line 236  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/broadcom/tg3.ko/concurrency safety/0/concurrency safety/weaver/tg3.i.aux"
int emg_wrapper_tg3_ioctl(struct net_device *arg0, struct ifreq *arg1, int arg2)
{
  #line 237 
  return tg3_ioctl(arg0,arg1,arg2);
}

#line 241  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/broadcom/tg3.ko/concurrency safety/0/concurrency safety/weaver/tg3.i.aux"
int emg_wrapper_tg3_nway_reset(struct net_device *arg0)
{
  #line 242 
  return tg3_nway_reset(arg0);
}

#line 246  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/broadcom/tg3.ko/concurrency safety/0/concurrency safety/weaver/tg3.i.aux"
int emg_wrapper_tg3_open(struct net_device *arg0)
{
  #line 247 
  return tg3_open(arg0);
}

#line 251  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/broadcom/tg3.ko/concurrency safety/0/concurrency safety/weaver/tg3.i.aux"
void emg_wrapper_tg3_poll_controller(struct net_device *arg0)
{
  #line 252 
  tg3_poll_controller(arg0);
  #line 253 
  return;
}

#line 256  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/broadcom/tg3.ko/concurrency safety/0/concurrency safety/weaver/tg3.i.aux"
void emg_wrapper_tg3_remove_one(struct pci_dev *arg0)
{
  #line 257 
  tg3_remove_one(arg0);
  #line 258 
  return;
}

#line 261  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/broadcom/tg3.ko/concurrency safety/0/concurrency safety/weaver/tg3.i.aux"
int emg_wrapper_tg3_resume(struct device *arg0)
{
  #line 262 
  return tg3_resume(arg0);
}

#line 266  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/broadcom/tg3.ko/concurrency safety/0/concurrency safety/weaver/tg3.i.aux"
void emg_wrapper_tg3_self_test(struct net_device *arg0, struct ethtool_test *arg1, unsigned long long *arg2)
{
  #line 267 
  tg3_self_test(arg0,arg1,arg2);
  #line 268 
  return;
}

#line 271  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/broadcom/tg3.ko/concurrency safety/0/concurrency safety/weaver/tg3.i.aux"
int emg_wrapper_tg3_set_channels(struct net_device *arg0, struct ethtool_channels *arg1)
{
  #line 272 
  return tg3_set_channels(arg0,arg1);
}

#line 276  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/broadcom/tg3.ko/concurrency safety/0/concurrency safety/weaver/tg3.i.aux"
int emg_wrapper_tg3_set_coalesce(struct net_device *arg0, struct ethtool_coalesce *arg1)
{
  #line 277 
  return tg3_set_coalesce(arg0,arg1);
}

#line 281  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/broadcom/tg3.ko/concurrency safety/0/concurrency safety/weaver/tg3.i.aux"
int emg_wrapper_tg3_set_eee(struct net_device *arg0, struct ethtool_eee *arg1)
{
  #line 282 
  return tg3_set_eee(arg0,arg1);
}

#line 286  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/broadcom/tg3.ko/concurrency safety/0/concurrency safety/weaver/tg3.i.aux"
int emg_wrapper_tg3_set_eeprom(struct net_device *arg0, struct ethtool_eeprom *arg1, unsigned char *arg2)
{
  #line 287 
  return tg3_set_eeprom(arg0,arg1,arg2);
}

#line 291  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/broadcom/tg3.ko/concurrency safety/0/concurrency safety/weaver/tg3.i.aux"
int emg_wrapper_tg3_set_features(struct net_device *arg0, unsigned long long arg1)
{
  #line 292 
  return tg3_set_features(arg0,arg1);
}

#line 296  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/broadcom/tg3.ko/concurrency safety/0/concurrency safety/weaver/tg3.i.aux"
int emg_wrapper_tg3_set_link_ksettings(struct net_device *arg0, struct ethtool_link_ksettings *arg1)
{
  #line 297 
  return tg3_set_link_ksettings(arg0,arg1);
}

#line 301  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/broadcom/tg3.ko/concurrency safety/0/concurrency safety/weaver/tg3.i.aux"
int emg_wrapper_tg3_set_mac_addr(struct net_device *arg0, void *arg1)
{
  #line 302 
  return tg3_set_mac_addr(arg0,arg1);
}

#line 306  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/broadcom/tg3.ko/concurrency safety/0/concurrency safety/weaver/tg3.i.aux"
void emg_wrapper_tg3_set_msglevel(struct net_device *arg0, unsigned int arg1)
{
  #line 307 
  tg3_set_msglevel(arg0,arg1);
  #line 308 
  return;
}

#line 311  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/broadcom/tg3.ko/concurrency safety/0/concurrency safety/weaver/tg3.i.aux"
int emg_wrapper_tg3_set_pauseparam(struct net_device *arg0, struct ethtool_pauseparam *arg1)
{
  #line 312 
  return tg3_set_pauseparam(arg0,arg1);
}

#line 316  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/broadcom/tg3.ko/concurrency safety/0/concurrency safety/weaver/tg3.i.aux"
int emg_wrapper_tg3_set_phys_id(struct net_device *arg0, enum ethtool_phys_id_state arg1)
{
  #line 317 
  return tg3_set_phys_id(arg0,arg1);
}

#line 321  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/broadcom/tg3.ko/concurrency safety/0/concurrency safety/weaver/tg3.i.aux"
int emg_wrapper_tg3_set_ringparam(struct net_device *arg0, struct ethtool_ringparam *arg1)
{
  #line 322 
  return tg3_set_ringparam(arg0,arg1);
}

#line 326  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/broadcom/tg3.ko/concurrency safety/0/concurrency safety/weaver/tg3.i.aux"
void emg_wrapper_tg3_set_rx_mode(struct net_device *arg0)
{
  #line 327 
  tg3_set_rx_mode(arg0);
  #line 328 
  return;
}

#line 331  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/broadcom/tg3.ko/concurrency safety/0/concurrency safety/weaver/tg3.i.aux"
int emg_wrapper_tg3_set_rxfh(struct net_device *arg0, unsigned int *arg1, unsigned char *arg2, unsigned char arg3)
{
  #line 332 
  return tg3_set_rxfh(arg0,arg1,arg2,(unsigned char)((int)arg3));
}

#line 336  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/broadcom/tg3.ko/concurrency safety/0/concurrency safety/weaver/tg3.i.aux"
int emg_wrapper_tg3_set_wol(struct net_device *arg0, struct ethtool_wolinfo *arg1)
{
  #line 337 
  return tg3_set_wol(arg0,arg1);
}

#line 341  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/broadcom/tg3.ko/concurrency safety/0/concurrency safety/weaver/tg3.i.aux"
void emg_wrapper_tg3_shutdown(struct pci_dev *arg0)
{
  #line 342 
  tg3_shutdown(arg0);
  #line 343 
  return;
}

#line 346  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/broadcom/tg3.ko/concurrency safety/0/concurrency safety/weaver/tg3.i.aux"
enum netdev_tx emg_wrapper_tg3_start_xmit(struct sk_buff *arg0, struct net_device *arg1)
{
  #line 347 
  return tg3_start_xmit(arg0,arg1);
}

#line 351  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/broadcom/tg3.ko/concurrency safety/0/concurrency safety/weaver/tg3.i.aux"
int emg_wrapper_tg3_suspend(struct device *arg0)
{
  #line 352 
  return tg3_suspend(arg0);
}

#line 356  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/broadcom/tg3.ko/concurrency safety/0/concurrency safety/weaver/tg3.i.aux"
enum irqreturn emg_wrapper_tg3_test_isr(int arg0, void *arg1)
{
  #line 357 
  return tg3_test_isr(arg0,arg1);
}

#line 361  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/broadcom/tg3.ko/concurrency safety/0/concurrency safety/weaver/tg3.i.aux"
void emg_wrapper_tg3_tx_timeout(struct net_device *arg0)
{
  #line 362 
  tg3_tx_timeout(arg0);
  #line 363 
  return;
}

#line 366  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/broadcom/tg3.ko/concurrency safety/0/concurrency safety/weaver/tg3.i.aux"
void emg_tg3_driver_exit(void)
{
  #line 367 
  tg3_driver_exit();
  #line 368 
  return;
}

#line 370  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/broadcom/tg3.ko/concurrency safety/0/concurrency safety/weaver/tg3.i.aux"
int emg_tg3_driver_init(void)
{
  #line 371 
  return tg3_driver_init();
}

#line 389  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/broadcom/tg3.ko/concurrency safety/0/concurrency safety/weaver/tg3.i.aux"
static void cif_set_bit(long nr, unsigned long *addr)
{
  #line 392 
  ldv_set_bit(nr,addr);
  #line 393 
  return;
}

#line 396  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/broadcom/tg3.ko/concurrency safety/0/concurrency safety/weaver/tg3.i.aux"
static void cif_clear_bit(long nr, unsigned long *addr)
{
  #line 399 
  ldv_clear_bit(nr,addr);
  #line 400 
  return;
}

#line 403  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/broadcom/tg3.ko/concurrency safety/0/concurrency safety/weaver/tg3.i.aux"
static void INIT_LIST_HEAD(struct list_head *list)
{
  #line 406 
  ldv_init_list_head(list);
  #line 407 
  return;
}

#line 417  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/broadcom/tg3.ko/concurrency safety/0/concurrency safety/weaver/tg3.i.aux"
static size_t cif_strlen(char *s)
{
  #line 420 
  return ldv_strlen(s);
}

#line 480  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/broadcom/tg3.ko/concurrency safety/0/concurrency safety/weaver/tg3.i.aux"
static long PTR_ERR(void *ptr)
{
  #line 483 
  return ldv_ptr_err(ptr);
}

#line 487  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/broadcom/tg3.ko/concurrency safety/0/concurrency safety/weaver/tg3.i.aux"
static bool IS_ERR(void *ptr)
{
  #line 490 
  return ldv_is_err(ptr);
}

#line 690  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/broadcom/tg3.ko/concurrency safety/0/concurrency safety/weaver/tg3.i.aux"
static void *kmalloc(size_t size, gfp_t flags)
{
  #line 693 
  return ldv_kmalloc(size,flags);
}

#line 704  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/broadcom/tg3.ko/concurrency safety/0/concurrency safety/weaver/tg3.i.aux"
static void *kcalloc(size_t n, size_t size, gfp_t flags)
{
  #line 707 
  return ldv_kcalloc(n,size,flags);
}

#line 725  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/broadcom/tg3.ko/concurrency safety/0/concurrency safety/weaver/tg3.i.aux"
static void *kzalloc(size_t size, gfp_t flags)
{
  #line 728 
  return ldv_kzalloc(size,flags);
}

#line 807  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/broadcom/tg3.ko/concurrency safety/0/concurrency safety/weaver/tg3.i.aux"
static void cif_spin_lock__xmit_lock_of_netdev_queue(spinlock_t *lock)
{
  #line 810 
  ldv_spin_model_lock((char *)"_xmit_lock_of_netdev_queue");
  #line 812 
  spin_lock(lock);
  #line 813 
  return;
}

#line 847  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/broadcom/tg3.ko/concurrency safety/0/concurrency safety/weaver/tg3.i.aux"
static void cif_spin_unlock__xmit_lock_of_netdev_queue(spinlock_t *lock)
{
  #line 850 
  ldv_spin_model_unlock((char *)"_xmit_lock_of_netdev_queue");
  #line 852 
  spin_unlock(lock);
  #line 853 
  return;
}

#line 981  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/broadcom/tg3.ko/concurrency safety/0/concurrency safety/weaver/tg3.i.aux"
static bool cif_schedule_work(struct work_struct *work)
{
  #line 985 
  return emg_schedule_work(work);
}

#line 1103  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/broadcom/tg3.ko/concurrency safety/0/concurrency safety/weaver/tg3.i.aux"
static void cif_pci_unregister_driver(struct pci_driver *dev)
{
  #line 1107 
  emg_pci_unregister_driver(dev);
  #line 1108 
  return;
}

#line 1111  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/broadcom/tg3.ko/concurrency safety/0/concurrency safety/weaver/tg3.i.aux"
static void cif___ldv_spin_lock_indirect_lock_of_tg3(spinlock_t *lock)
{
  #line 1114 
  ldv_spin_model_lock((char *)"indirect_lock_of_tg3");
  #line 1116 
  __ldv_spin_lock(lock);
  #line 1117 
  return;
}

#line 1120  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/broadcom/tg3.ko/concurrency safety/0/concurrency safety/weaver/tg3.i.aux"
static void cif_spin_unlock_irqrestore_indirect_lock_of_tg3(spinlock_t *lock, unsigned long flags)
{
  #line 1123 
  ldv_spin_model_unlock((char *)"indirect_lock_of_tg3");
  #line 1125 
  spin_unlock_irqrestore(lock,flags);
  #line 1126 
  return;
}

#line 1129  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/broadcom/tg3.ko/concurrency safety/0/concurrency safety/weaver/tg3.i.aux"
static void cif_spin_lock_bh_lock_of_tg3(spinlock_t *lock)
{
  #line 1132 
  ldv_spin_model_lock((char *)"lock_of_tg3");
  #line 1134 
  spin_lock_bh(lock);
  #line 1135 
  return;
}

#line 1138  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/broadcom/tg3.ko/concurrency safety/0/concurrency safety/weaver/tg3.i.aux"
static void cif_spin_unlock_bh_lock_of_tg3(spinlock_t *lock)
{
  #line 1141 
  ldv_spin_model_unlock((char *)"lock_of_tg3");
  #line 1143 
  spin_unlock_bh(lock);
  #line 1144 
  return;
}

#line 1147  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/broadcom/tg3.ko/concurrency safety/0/concurrency safety/weaver/tg3.i.aux"
static void cif_spin_lock_lock_of_tg3(spinlock_t *lock)
{
  #line 1150 
  ldv_spin_model_lock((char *)"lock_of_tg3");
  #line 1152 
  spin_lock(lock);
  #line 1153 
  return;
}

#line 1156  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/broadcom/tg3.ko/concurrency safety/0/concurrency safety/weaver/tg3.i.aux"
static void cif_spin_unlock_lock_of_tg3(spinlock_t *lock)
{
  #line 1159 
  ldv_spin_model_unlock((char *)"lock_of_tg3");
  #line 1161 
  spin_unlock(lock);
  #line 1162 
  return;
}

#line 1165  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/broadcom/tg3.ko/concurrency safety/0/concurrency safety/weaver/tg3.i.aux"
static int cif_del_timer_sync(struct timer_list *timer)
{
  #line 1169 
  return emg_del_timer_sync(timer);
}

#line 1173  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/broadcom/tg3.ko/concurrency safety/0/concurrency safety/weaver/tg3.i.aux"
static int cif_request_irq(unsigned int irq, irqreturn_t (*handler)(int , void *), unsigned long flags, char *name, void *dev)
{
  #line 1177 
  return emg_request_irq(irq,handler,flags,name,dev);
}

#line 1181  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/broadcom/tg3.ko/concurrency safety/0/concurrency safety/weaver/tg3.i.aux"
static void *cif_free_irq(unsigned int ldv_func_arg1, void *ldv_func_arg2)
{
  #line 1185 
  return emg_free_irq(ldv_func_arg1,ldv_func_arg2);
}

#line 1189  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/broadcom/tg3.ko/concurrency safety/0/concurrency safety/weaver/tg3.i.aux"
static int cif_request_firmware(struct firmware **fw, char *name, struct device *device)
{
  #line 1192 
  return ldv_request_firmware(fw);
}

#line 1196  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/broadcom/tg3.ko/concurrency safety/0/concurrency safety/weaver/tg3.i.aux"
static void cif_release_firmware(struct firmware *fw)
{
  #line 1199 
  ldv_release_firmware(fw);
  #line 1200 
  return;
}

#line 1203  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/broadcom/tg3.ko/concurrency safety/0/concurrency safety/weaver/tg3.i.aux"
static struct net_device *cif_alloc_etherdev_mqs(int sizeof_priv, unsigned int txqs, unsigned int rxqs)
{
  #line 1207 
  return emg_alloc_etherdev_mqs(sizeof_priv,txqs,rxqs);
}

#line 1211  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/broadcom/tg3.ko/concurrency safety/0/concurrency safety/weaver/tg3.i.aux"
static int cif_register_netdev(struct net_device *dev)
{
  #line 1215 
  return emg_register_netdev(dev);
}

#line 1219  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/broadcom/tg3.ko/concurrency safety/0/concurrency safety/weaver/tg3.i.aux"
static void cif_free_netdev(struct net_device *dev)
{
  #line 1223 
  emg_free_netdev(dev);
  #line 1224 
  return;
}

#line 1227  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/broadcom/tg3.ko/concurrency safety/0/concurrency safety/weaver/tg3.i.aux"
static void cif_unregister_netdev(struct net_device *dev)
{
  #line 1231 
  emg_unregister_netdev(dev);
  #line 1232 
  return;
}

#line 1235  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/broadcom/tg3.ko/concurrency safety/0/concurrency safety/weaver/tg3.i.aux"
static int cif___pci_register_driver(struct pci_driver *ldv_func_arg1, struct module *ldv_func_arg2, char *mod_name)
{
  #line 1239 
  return emg___pci_register_driver(ldv_func_arg1,ldv_func_arg2,mod_name);
}

#line 20  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/common/inline_asm.c"
void ldv_inline_asm(void)
{
  #line 24 
  return;
}

#line 20  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
void ldv_atomic_add(int i, atomic_t *v)
{
  #line 22 
  v->counter += i;
  #line 23 
  return;
}

#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
void ldv_atomic_sub(int i, atomic_t *v)
{
  #line 27 
  v->counter -= i;
  #line 28 
  return;
}

#line 30  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
int ldv_atomic_sub_and_test(int i, atomic_t *v)
{
  #line 32 
  v->counter -= i;
  #line 33 
  if (v->counter != 0) 
                       #line 34 
                       return 0;
  #line 36 
  return 1;
}

#line 39  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
void ldv_atomic_inc(atomic_t *v)
{
  #line 41 
  (v->counter) ++;
  #line 42 
  return;
}

#line 44  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
void ldv_atomic_dec(atomic_t *v)
{
  #line 46 
  (v->counter) --;
  #line 47 
  return;
}

#line 49  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
int ldv_atomic_dec_and_test(atomic_t *v)
{
  #line 51 
  (v->counter) --;
  #line 52 
  if (v->counter != 0) 
                       #line 53 
                       return 0;
  #line 55 
  return 1;
}

#line 58  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
int ldv_atomic_inc_and_test(atomic_t *v)
{
  #line 60 
  (v->counter) ++;
  #line 61 
  if (v->counter != 0) 
                       #line 62 
                       return 0;
  #line 64 
  return 1;
}

#line 67  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
int ldv_atomic_add_return(int i, atomic_t *v)
{
  #line 69 
  v->counter += i;
  #line 70 
  return v->counter;
}

#line 73  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
int ldv_atomic_add_negative(int i, atomic_t *v)
{
  #line 75 
  v->counter += i;
  #line 76 
  return v->counter < 0;
}

#line 79  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
int ldv_atomic_inc_short(short *v)
{
  #line 81 
  *v = (short)((unsigned int)*v + 1U);
  #line 82 
  return (int)*v;
}

#line 20  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/current.c"
static struct task_struct ldv_current;
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/current.c"
struct task_struct *ldv_get_current(void)
{
  #line 28 
  ldv_current.pid = 1;
  #line 29 
  return & ldv_current;
}

#line 32  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 28  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
void ldv_switch_to_interrupt_context(void);
#line 42  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 34  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
void ldv_switch_to_process_context(void);
#line 50  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 40  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
bool ldv_in_interrupt_context(void);
#line 112  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 55  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
int ldv_post_init(int init_ret_val);
#line 132  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 61  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
int ldv_post_probe(int probe_ret_val);
#line 133  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 133 
void ldv_check_return_value_probe(int);
#line 141 
#line 68  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
int ldv_filter_err_code(int ret_val);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/common.h"
#line 23 
void __VERIFIER_assume(int);
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
static bool __ldv_in_interrupt_context = (_Bool)0;
#line 28  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
void ldv_switch_to_interrupt_context(void)
{
  #line 31 
  __ldv_in_interrupt_context = (_Bool)1;
  #line 32 
  return;
}

#line 34  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
void ldv_switch_to_process_context(void)
{
  #line 37 
  __ldv_in_interrupt_context = (_Bool)0;
  #line 38 
  return;
}

#line 40  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
bool ldv_in_interrupt_context(void)
{
  #line 42 
  return __ldv_in_interrupt_context;
}

#line 45  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
static int ldv_filter_positive_int(int val)
{
  #line 47 
  __VERIFIER_assume(val <= 0);
  #line 48 
  return val;
}

#line 55  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
int ldv_post_init(int init_ret_val)
{
  #line 57 
  return ldv_filter_positive_int(init_ret_val);
}

#line 61  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
int ldv_post_probe(int probe_ret_val)
{
  #line 63 
  ldv_check_return_value_probe(probe_ret_val);
  #line 64 
  return ldv_filter_positive_int(probe_ret_val);
}

#line 68  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
int ldv_filter_err_code(int ret_val)
{
  #line 70 
  return ldv_filter_positive_int(ret_val);
}

#line 28  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/common/list.h"
#line 28 
void ldv_save_allocated_memory_to_list(void *);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/device.h"
#line 29  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/dd.c"
void *ldv_dev_get_drvdata(struct device *dev);
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/device.h"
#line 43  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/dd.c"
int ldv_dev_set_drvdata(struct device *dev, void *data);
#line 57  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 57 
void *ldv_xzalloc(size_t size);
#line 29  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/dd.c"
void *ldv_dev_get_drvdata(struct device *dev)
{
  #line 31 
  if (dev != (struct device *)0 && dev->p != (struct device_private *)0) 
    #line 32 
    return (dev->p)->driver_data;
  #line 34 
  return (void *)0;
}

#line 43  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/dd.c"
int ldv_dev_set_drvdata(struct device *dev, void *data)
{
  #line 45 
  dev->p = (struct device_private *)ldv_xzalloc(8UL);
  #line 46 
  ldv_save_allocated_memory_to_list((void *)dev->p);
  #line 47 
  (dev->p)->driver_data = data;
  #line 49 
  return 0;
}

#line 156  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 156 
void ldv_check_alloc_flags(gfp_t);
#line 48  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 48 
void *ldv_malloc(size_t size);
#line 49 
#line 49 
void *ldv_calloc(size_t nmemb, size_t size);
#line 50 
#line 50 
void *ldv_zalloc(size_t size);
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/devres.c"
void *ldv_devm_kmalloc(size_t size, gfp_t flags)
{
  #line 26 
  void *res;
  #line 28 
  ldv_check_alloc_flags(flags);
  #line 29 
  res = ldv_malloc(size);
  #line 30 
  ldv_save_allocated_memory_to_list(res);
  #line 32 
  return res;
}

#line 35  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/devres.c"
void *ldv_devm_kzalloc(size_t size, gfp_t flags)
{
  #line 37 
  void *res;
  #line 39 
  ldv_check_alloc_flags(flags);
  #line 40 
  res = ldv_zalloc(size);
  #line 41 
  ldv_save_allocated_memory_to_list(res);
  #line 43 
  return res;
}

#line 46  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/devres.c"
void *ldv_devm_kmalloc_array(size_t n, size_t size, gfp_t flags)
{
  #line 48 
  void *res;
  #line 50 
  ldv_check_alloc_flags(flags);
  #line 51 
  res = ldv_malloc(n * size);
  #line 52 
  ldv_save_allocated_memory_to_list(res);
  #line 54 
  return res;
}

#line 57  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/devres.c"
void *ldv_devm_kcalloc(size_t n, size_t size, gfp_t flags)
{
  #line 59 
  void *res;
  #line 61 
  ldv_check_alloc_flags(flags);
  #line 62 
  res = ldv_calloc(n,size);
  #line 63 
  ldv_save_allocated_memory_to_list(res);
  #line 65 
  return res;
}

#line 51  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 51 
void ldv_free(void *s);
#line 59 
#line 59 
void *ldv_malloc_unknown_size(void);
#line 31  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 31 
int ldv_undef_int_positive(void);
#line 40 
#line 40 
int ldv_undef_int_nonpositive(void);
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/firmware_loader.c"
int ldv_request_firmware(struct firmware **fw)
{
  #line 27 
  int retval;
  #line 26 
  struct firmware *_fw = (struct firmware *)0;
  #line 29 
  retval = ldv_undef_int_nonpositive();
  #line 31 
  if (retval == 0) {
    #line 33 
    _fw = (struct firmware *)ldv_xzalloc(32UL);
    #line 34 
    _fw->data = (u8 *)ldv_malloc_unknown_size();
    #line 35 
    __VERIFIER_assume(_fw->data != (u8 *)0U);
    #line 36 
    _fw->size = (unsigned long)ldv_undef_int_positive();
  }
  #line 39 
  *fw = _fw;
  #line 41 
  return retval;
}

#line 44  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/firmware_loader.c"
void ldv_release_firmware(struct firmware *fw)
{
  #line 46 
  if (fw != (struct firmware *)0) {
    #line 48 
    ldv_free((void *)fw->data);
    #line 49 
    ldv_free((void *)fw);
  }
  #line 51 
  return;
}

#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/i2c.h"
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/i2c/i2c-core-smbus.c"
s32 ldv_i2c_smbus_read_block_data(u8 *values);
#line 55  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 55 
void *ldv_xmalloc(size_t size);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 23 
int ldv_undef_int(void);
#line 34 
#line 34 
int ldv_undef_int_negative(void);
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/i2c/i2c-core-smbus.c"
s32 ldv_i2c_smbus_read_block_data(u8 *values)
{
  #line 27 
  __u8 size;
  #line 28 
  char *bytes;
  #line 30 
  if (ldv_undef_int() != 0) {
    #line 33 
    size = (unsigned char)ldv_undef_int_positive();
    #line 35 
    __VERIFIER_assume((unsigned int)size <= 32U);
    #line 37 
    bytes = (char *)ldv_xmalloc((unsigned long)size);
    #line 39 
    memcpy((void *)values,(void *)bytes,(unsigned long)size);
    #line 40 
    ldv_free((void *)bytes);
    #line 42 
    return (int)size;
  }
  else {
    #line 46 
    return ldv_undef_int_negative();
  }
}

#line 988  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
__inline static void v4l2_set_subdevdata(struct v4l2_subdev *sd, void *p)
{
  #line 990 
  sd->dev_priv = p;
  #line 991 
  return;
}

#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/media/v4l2-common.h"
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/media/v4l2-core/v4l2-i2c.c"
void ldv_v4l2_i2c_subdev_init(struct v4l2_subdev *sd, struct i2c_client *client, struct v4l2_subdev_ops *ops);
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/media/v4l2-core/v4l2-i2c.c"
void ldv_v4l2_i2c_subdev_init(struct v4l2_subdev *sd, struct i2c_client *client, struct v4l2_subdev_ops *ops)
{
  #line 26 
  sd->ops = ops;
  #line 27 
  v4l2_set_subdevdata(sd,(void *)client);
  #line 28 
  ldv_dev_set_drvdata(& client->dev,(void *)sd);
  #line 29 
  return;
}

#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/spi.c"
struct spi_controller *ldv_spi_alloc_master(struct device *host, unsigned int size)
{
  #line 25 
  struct spi_controller *master;
  #line 27 
  master = (struct spi_controller *)ldv_zalloc((unsigned long)size + 2936UL);
  #line 29 
  if (master == (struct spi_controller *)0) 
                                            #line 30 
                                            return (struct spi_controller *)0;
  #line 32 
  ldv_dev_set_drvdata(& master->dev,(void *)(master + 1U));
  #line 34 
  return master;
}

#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/fb.h"
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/video/fbdev/core/fbsysfs.c"
struct fb_info *ldv_framebuffer_alloc(size_t size);
#line 26  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/fb.h"
#line 38  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/video/fbdev/core/fbsysfs.c"
void ldv_framebuffer_release(struct fb_info *info);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/video/fbdev/core/fbsysfs.c"
struct fb_info *ldv_framebuffer_alloc(size_t size)
{
  #line 25 
  struct fb_info *info;
  #line 27 
  info = (struct fb_info *)ldv_zalloc(size + 1568UL);
  #line 29 
  if (info == (struct fb_info *)0) 
                                   #line 30 
                                   return (struct fb_info *)0;
  #line 32 
  if (size != 0UL) 
                   #line 33 
                   info->par = (void *)((char *)info + 1568UL);
  #line 35 
  return info;
}

#line 38  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/video/fbdev/core/fbsysfs.c"
void ldv_framebuffer_release(struct fb_info *info)
{
  #line 40 
  if (info == (struct fb_info *)0) 
                                   #line 41 
                                   return;
  #line 44 
  ldv_free((void *)info->apertures);
  #line 46 
  ldv_free((void *)info);
  #line 47 
  return;
}

#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/err.h"
#line 59  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/err.c"
bool ldv_is_err_or_null(void *ptr);
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/err.h"
#line 35  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/err.c"
void *ldv_err_ptr(long error);
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/err.c"
bool ldv_is_err(void *ptr)
{
  #line 29 
  if ((unsigned long)ptr > 18446744073709547520UL) 
                                                   #line 30 
                                                   return (_Bool)1; else 
                                                                    #line 32 
                                                                    return (_Bool)0;
}

#line 35  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/err.c"
void *ldv_err_ptr(long error)
{
  #line 37 
  unsigned long result;
  #line 39 
  __VERIFIER_assume(error < 0L);
  #line 40 
  __VERIFIER_assume(error >= -4095L);
  #line 41 
  result = 18446744073709547520UL - (unsigned long)error;
  #line 42 
  __VERIFIER_assume(result > 18446744073709547520UL);
  #line 44 
  return (void *)result;
}

#line 47  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/err.c"
long ldv_ptr_err(void *ptr)
{
  #line 49 
  long result;
  #line 51 
  __VERIFIER_assume((unsigned long)ptr > 18446744073709547520UL);
  #line 52 
  result = (long)(18446744073709547520UL - (unsigned long)ptr);
  #line 53 
  __VERIFIER_assume(result < 0L);
  #line 54 
  __VERIFIER_assume(result >= -4095L);
  #line 56 
  return result;
}

#line 59  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/err.c"
bool ldv_is_err_or_null(void *ptr)
{
  #line 61 
  int tmp_0;
  #line 61 
  if (ptr == (void *)0) 
                        #line 61 
                        tmp_0 = 1;
  else {
    #line 61 
    if ((int)ldv_is_err(ptr) != 0) 
                                   #line 61 
                                   tmp_0 = 1; else 
                                                   #line 61 
                                                   tmp_0 = 0;
  }
  #line 61 
  return (_Bool)(tmp_0 != 0);
}

#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/panic.h"
#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/kernel/panic.c"
void ldv_panic(void);
#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/kernel/panic.c"
void ldv_panic(void)
{
  #line 23 
  __VERIFIER_assume(0);
  #line 24 
  return;
}

#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/bitmap.h"
#line 32  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_bitmap_set(unsigned long *map, unsigned int start, int nbits);
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/bitmap.h"
#line 52  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_bitmap_clear(unsigned long *map, unsigned int start, int nbits);
#line 27  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/bitmap.h"
#line 72  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_bitmap_zero(unsigned long *dst, unsigned int nbits);
#line 29  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/bitmap.h"
#line 78  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
unsigned long ldv_bitmap_find_next_zero_area(unsigned long *map, unsigned long size, unsigned long start, unsigned int nr, unsigned long align_mask);
#line 22  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/find_bit.h"
#line 22 
unsigned long ldv_find_next_bit(unsigned long *addr, unsigned long size, unsigned long offset);
#line 23 
#line 23 
unsigned long ldv_find_next_zero_bit(unsigned long *addr, unsigned long size, unsigned long offset);
#line 22  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_set_bit(long nr, unsigned long *addr)
{
  #line 24 
  *(addr + (unsigned long)nr / 64UL) |= 1UL << ((unsigned long)nr & 63UL);
  #line 25 
  return;
}

#line 27  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_clear_bit(long nr, unsigned long *addr)
{
  #line 29 
  *(addr + (unsigned long)nr / 64UL) &= ~ (1UL << ((unsigned long)nr & 63UL));
  #line 30 
  return;
}

#line 32  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_bitmap_set(unsigned long *map, unsigned int start, int nbits)
{
  #line 34 
  unsigned long *p = map + (unsigned long)(start / 64U);
  #line 35 
  unsigned int size = start + (unsigned int)nbits;
  #line 36 
  int bits_to_set = (int)(64U - (start & 63U));
  #line 37 
  unsigned long mask_to_set = 18446744073709551615UL << ((unsigned long)start & 63UL);
  #line 39 
  while (nbits - bits_to_set >= 0) {
    #line 40 
    *p |= mask_to_set;
    #line 41 
    nbits -= bits_to_set;
    #line 42 
    bits_to_set = 64;
    #line 43 
    mask_to_set = 18446744073709551615UL;
    #line 44 
    p ++;
  }
  #line 46 
  if (nbits != 0) {
    #line 47 
    mask_to_set = (18446744073709551615UL >> ((unsigned long)(- size) & 63UL)) & mask_to_set;
    #line 48 
    *p |= mask_to_set;
  }
  #line 50 
  return;
}

#line 52  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_bitmap_clear(unsigned long *map, unsigned int start, int nbits)
{
  #line 54 
  unsigned long *p = map + (unsigned long)(start / 64U);
  #line 55 
  unsigned int size = start + (unsigned int)nbits;
  #line 56 
  int bits_to_clear = (int)(64U - (start & 63U));
  #line 57 
  unsigned long mask_to_clear = 18446744073709551615UL << ((unsigned long)start & 63UL);
  #line 59 
  while (nbits - bits_to_clear >= 0) {
    #line 60 
    *p &= ~ mask_to_clear;
    #line 61 
    nbits -= bits_to_clear;
    #line 62 
    bits_to_clear = 64;
    #line 63 
    mask_to_clear = 18446744073709551615UL;
    #line 64 
    p ++;
  }
  #line 66 
  if (nbits != 0) {
    #line 67 
    mask_to_clear = (18446744073709551615UL >> ((unsigned long)(- size) & 63UL)) & mask_to_clear;
    #line 68 
    *p &= ~ mask_to_clear;
  }
  #line 70 
  return;
}

#line 72  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_bitmap_zero(unsigned long *dst, unsigned int nbits)
{
  #line 74 
  unsigned int len = (unsigned int)(((unsigned long)nbits + 63UL) / 64UL) * 8U;
  #line 75 
  memset((void *)dst,0,(unsigned long)len);
  #line 76 
  return;
}

#line 78  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
unsigned long ldv_bitmap_find_next_zero_area(unsigned long *map, unsigned long size, unsigned long start, unsigned int nr, unsigned long align_mask)
{
  #line 80 
  unsigned long index;
  #line 80 
  unsigned long end;
  #line 80 
  unsigned long i;
  #line 82 
  again: 
         #line 82 
  ;
  #line 83 
  index = ldv_find_next_zero_bit(map,size,start);
  #line 84 
  index = (index + align_mask) & ~ align_mask;
  #line 85 
  end = (unsigned long)nr + index;
  #line 87 
  if (end > size) 
                  #line 88 
                  return end;
  #line 90 
  i = ldv_find_next_bit(map,end,index);
  #line 92 
  if (i < end) {
    #line 93 
    start = i + 1UL;
    #line 94 
    goto again;
  }
  #line 97 
  return index;
}

#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/find_bit.h"
#line 68  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/find_bit.common.c"
unsigned long ldv_find_first_bit(unsigned long *addr, unsigned long size);
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/find_bit.h"
#line 25 
void ldv_check_find_bit_offset(unsigned long, unsigned long);
#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/find_bit.common.c"
static unsigned long ldv_ffs(unsigned long word)
{
  #line 23 
  int num = 0;
  #line 25 
  if ((word & 4294967295UL) == 0UL) {
    #line 26 
    num += 32;
    #line 27 
    word >>= 32;
  }
  #line 29 
  if ((word & 65535UL) == 0UL) {
    #line 30 
    num += 16;
    #line 31 
    word >>= 16;
  }
  #line 33 
  if ((word & 255UL) == 0UL) {
    #line 34 
    num += 8;
    #line 35 
    word >>= 8;
  }
  #line 37 
  if ((word & 15UL) == 0UL) {
    #line 38 
    num += 4;
    #line 39 
    word >>= 4;
  }
  #line 41 
  if ((word & 3UL) == 0UL) {
    #line 42 
    num += 2;
    #line 43 
    word >>= 2;
  }
  #line 45 
  if ((word & 1UL) == 0UL) 
                           #line 46 
                           num ++;
  #line 48 
  return (unsigned long)num;
}

#line 51  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/find_bit.common.c"
static unsigned long ldv_min(unsigned long a, unsigned long b)
{
  #line 53 
  if (a < b) 
             #line 54 
             return a;
  #line 56 
  return b;
}

#line 59  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/find_bit.common.c"
static unsigned long ldv_restrict_find_bit_res(unsigned long res, unsigned long size)
{
  #line 62 
  __VERIFIER_assume(1);
  #line 63 
  __VERIFIER_assume(res <= size);
  #line 65 
  return res;
}

#line 68  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/find_bit.common.c"
unsigned long ldv_find_first_bit(unsigned long *addr, unsigned long size)
{
  #line 70 
  unsigned long i;
  #line 72 
  i = 0UL;
  #line 72 
  while (i * 64UL < size) {
    #line 73 
    if (*(addr + i) != 0UL) {
      #line 74 
      ;
      #line 74 
      ;
      #line 74 
      ;
      #line 74 
      return ldv_restrict_find_bit_res(ldv_min(i * 64UL + ldv_ffs(*(addr + i)),size),
                                  size);
    }
    #line 72 
    i ++;
  }
  #line 76 
  return size;
}

#line 79  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/find_bit.common.c"
unsigned long ldv_find_next_bit(unsigned long *addr, unsigned long size, unsigned long offset)
{
  #line 81 
  unsigned long tmp;
  #line 83 
  ldv_check_find_bit_offset(size,offset);
  #line 85 
  tmp = *(addr + offset / 64UL);
  #line 86 
  tmp = (unsigned long)((18446744073709551615ULL << (offset & 63UL)) & (unsigned long long)tmp);
  #line 87 
  offset &= 18446744073709551552UL;
  #line 89 
  while (tmp == 0UL) {
    #line 90 
    offset += 64UL;
    #line 91 
    if (offset >= size) 
                        #line 92 
                        return size;
    #line 94 
    tmp = *(addr + offset / 64UL);
  }
  #line 97 
  ;
  #line 97 
  ;
  #line 97 
  ;
  #line 97 
  return ldv_restrict_find_bit_res(ldv_min(ldv_ffs(tmp) + offset,size),size);
}

#line 100  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/find_bit.common.c"
unsigned long ldv_find_next_zero_bit(unsigned long *addr, unsigned long size, unsigned long offset)
{
  #line 102 
  unsigned long tmp;
  #line 104 
  ldv_check_find_bit_offset(size,offset);
  #line 106 
  tmp = *(addr + offset / 64UL);
  #line 107 
  tmp = ~ tmp;
  #line 108 
  tmp = (unsigned long)((18446744073709551615ULL << (offset & 63UL)) & (unsigned long long)tmp);
  #line 109 
  offset &= 18446744073709551552UL;
  #line 111 
  while (tmp == 0UL) {
    #line 112 
    offset += 64UL;
    #line 113 
    if (offset >= size) 
                        #line 114 
                        return size;
    #line 116 
    tmp = *(addr + offset / 64UL);
    #line 117 
    tmp = ~ tmp;
  }
  #line 120 
  ;
  #line 120 
  ;
  #line 120 
  ;
  #line 120 
  return ldv_restrict_find_bit_res(ldv_min(ldv_ffs(tmp) + offset,size),size);
}

#line 26  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/string.h"
#line 31  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
int ldv_strcmp(char *cs, char *ct);
#line 27  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/string.h"
#line 40  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
int ldv_strncmp(char *cs, char *ct, __kernel_size_t count);
#line 28  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/string.h"
#line 70  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
char *ldv_strstr(char *cs, char *ct);
#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
size_t ldv_strlen(char *s)
{
  #line 23 
  unsigned int len = 0U;
  #line 25 
  while ((int)*s != 0) {
    #line 26 
    len ++;
    #line 25 
    s ++;
  }
  #line 28 
  return (unsigned long)len;
}

#line 31  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
int ldv_strcmp(char *cs, char *ct)
{
  #line 33 
  while ((int)*cs != 0 && (int)*ct != 0) {
    #line 34 
    if ((int)*cs != (int)*ct) 
                              #line 35 
                              break;
    #line 33 
    cs ++;
    #line 33 
    ct ++;
  }
  #line 37 
  return (int)*cs - (int)*ct;
}

#line 40  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
int ldv_strncmp(char *cs, char *ct, __kernel_size_t count)
{
  #line 42 
  if (count == 0UL) 
                    #line 43 
                    return 0;
  #line 45 
  while ((int)*cs != 0 && (int)*ct != 0) {
    #line 46 
    if ((int)*cs != (int)*ct) 
                              #line 47 
                              break;
    #line 49 
    count --;
    #line 51 
    if (count == 0UL) 
                      #line 52 
                      break;
    #line 45 
    cs ++;
    #line 45 
    ct ++;
  }
  #line 55 
  return (int)*cs - (int)*ct;
}

#line 58  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
int ldv_memcmp(void *cs, void *ct, size_t count)
{
  #line 60 
  unsigned char *su1;
  #line 60 
  unsigned char *su2;
  #line 61 
  int res = 0;
  #line 63 
  su1 = (unsigned char *)cs;
  #line 63 
  su2 = (unsigned char *)ct;
  #line 63 
  while (count != 0UL) {
    #line 64 
    res = (int)*su1 - (int)*su2;
    #line 64 
    if (res != 0) 
                  #line 65 
                  break;
    #line 63 
    su1 ++;
    #line 63 
    su2 ++;
    #line 63 
    count --;
  }
  #line 67 
  return res;
}

#line 70  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
char *ldv_strstr(char *cs, char *ct)
{
  #line 72 
  size_t cs_len;
  #line 72 
  size_t ct_len;
  #line 74 
  cs_len = ldv_strlen(cs);
  #line 75 
  ct_len = ldv_strlen(ct);
  #line 77 
  while (cs_len >= ct_len) {
    #line 78 
    if (ldv_memcmp((void *)cs,(void *)ct,ct_len) == 0) 
                                                       #line 79 
                                                       return cs;
    #line 81 
    cs_len --;
    #line 82 
    cs ++;
  }
  #line 85 
  return (char *)0;
}

#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/list.c"
void ldv_init_list_head(struct list_head *list)
{
  #line 23 
  list->next = list;
  #line 24 
  list->prev = list;
  #line 25 
  return;
}

#line 26  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 43  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmalloc_array(size_t n, size_t size, gfp_t flags);
#line 30  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 69  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
struct kmem_cache *ldv_kmem_cache_create(char *name, unsigned int size);
#line 31  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 85  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmem_cache_alloc(struct kmem_cache *cachep, gfp_t flags);
#line 32  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 90  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmem_cache_zalloc(struct kmem_cache *cachep, gfp_t flags);
#line 33  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 95  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void ldv_kmem_cache_free(struct kmem_cache *cachep, void *objp);
#line 34  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 100  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void ldv_kmem_cache_destroy(struct kmem_cache *cachep);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmalloc(size_t size, gfp_t flags)
{
  #line 25 
  void *res;
  #line 27 
  ldv_check_alloc_flags(flags);
  #line 28 
  res = ldv_malloc(size);
  #line 30 
  return res;
}

#line 33  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kzalloc(size_t size, gfp_t flags)
{
  #line 35 
  void *res;
  #line 37 
  ldv_check_alloc_flags(flags);
  #line 38 
  res = ldv_zalloc(size);
  #line 40 
  return res;
}

#line 43  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmalloc_array(size_t n, size_t size, gfp_t flags)
{
  #line 45 
  void *res;
  #line 47 
  ldv_check_alloc_flags(flags);
  #line 48 
  res = ldv_malloc(n * size);
  #line 50 
  return res;
}

#line 53  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kcalloc(size_t n, size_t size, gfp_t flags)
{
  #line 55 
  void *res;
  #line 57 
  ldv_check_alloc_flags(flags);
  #line 58 
  res = ldv_calloc(n,size);
  #line 60 
  return res;
}

#line 69  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
struct kmem_cache *ldv_kmem_cache_create(char *name, unsigned int size)
{
  #line 71 
  struct kmem_cache *res;
  #line 72 
  struct ldv_kmem_cache *ldv_res;
  #line 74 
  res = (struct kmem_cache *)ldv_zalloc(16UL);
  #line 76 
  if (res != (struct kmem_cache *)0) {
    #line 77 
    ldv_res = (struct ldv_kmem_cache *)res;
    #line 78 
    ldv_res->name = name;
    #line 79 
    ldv_res->size = size;
  }
  #line 82 
  return res;
}

#line 85  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmem_cache_alloc(struct kmem_cache *cachep, gfp_t flags)
{
  #line 87 
  return ldv_kmalloc((unsigned long)((struct ldv_kmem_cache *)cachep)->size,
                  flags);
}

#line 90  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmem_cache_zalloc(struct kmem_cache *cachep, gfp_t flags)
{
  #line 92 
  return ldv_kzalloc((unsigned long)((struct ldv_kmem_cache *)cachep)->size,
                  flags);
}

#line 95  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void ldv_kmem_cache_free(struct kmem_cache *cachep, void *objp)
{
  #line 97 
  ldv_free(objp);
  #line 98 
  return;
}

#line 100  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void ldv_kmem_cache_destroy(struct kmem_cache *cachep)
{
  #line 102 
  ldv_free((void *)cachep);
  #line 103 
  return;
}

#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/string.h"
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/util.c"
void *ldv_kmemdup(void *src, size_t len, gfp_t gfp);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/util.c"
void *ldv_kmemdup(void *src, size_t len, gfp_t gfp)
{
  #line 25 
  void *res;
  #line 27 
  ldv_check_alloc_flags(gfp);
  #line 28 
  res = ldv_malloc(len);
  #line 30 
  if (res != (void *)0) 
                        #line 31 
                        memcpy(res,src,len);
  #line 33 
  return res;
}

#line 162  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 162 
void ldv_check_alloc_nonatomic(void);
#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/vmalloc.h"
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/vmalloc.c"
void *ldv_vmalloc(unsigned long size);
#line 22  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/vmalloc.h"
#line 33  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/vmalloc.c"
void *ldv_vzalloc(unsigned long size);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/vmalloc.h"
#line 43  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/vmalloc.c"
void ldv_vfree(void *addr);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/vmalloc.c"
void *ldv_vmalloc(unsigned long size)
{
  #line 25 
  void *res;
  #line 27 
  ldv_check_alloc_nonatomic();
  #line 28 
  res = ldv_malloc(size);
  #line 30 
  return res;
}

#line 33  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/vmalloc.c"
void *ldv_vzalloc(unsigned long size)
{
  #line 35 
  void *res;
  #line 37 
  ldv_check_alloc_nonatomic();
  #line 38 
  res = ldv_zalloc(size);
  #line 40 
  return res;
}

#line 43  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/vmalloc.c"
void ldv_vfree(void *addr)
{
  #line 45 
  ldv_free(addr);
  #line 46 
  return;
}

#line 28  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 28 
void *malloc(size_t);
#line 29 
#line 29 
void *calloc(size_t, size_t);
#line 30 
#line 30 
void free(void *);
#line 45 
#line 22  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
unsigned int ldv_is_memory_alloc_failures;
#line 56  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 63  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_xcalloc(size_t nmemb, size_t size);
#line 60  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 88  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_calloc_unknown_size(void);
#line 61  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 97  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_zalloc_unknown_size(void);
#line 64  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_malloc(size_t size);
#line 65  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 37  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_calloc(size_t nmemb, size_t size);
#line 66  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 42  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_zalloc(size_t size);
#line 67  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 47  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void ldv_reference_free(void *s);
#line 69  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 52  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_realloc(void *ptr, size_t size);
#line 71  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 80  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xmalloc(size_t size);
#line 72  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 90  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xcalloc(size_t nmemb, size_t size);
#line 73  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 100  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xzalloc(size_t size);
#line 75  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 110  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_malloc_unknown_size(void);
#line 76  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 124  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_calloc_unknown_size(void);
#line 77  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 139  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_zalloc_unknown_size(void);
#line 83  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 106  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_xmalloc_unknown_size(size_t size);
#line 85  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 144  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xmalloc_unknown_size(size_t size);
#line 87  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 87 
void *external_allocated_data(void);
#line 22  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
unsigned int ldv_is_memory_alloc_failures = 1U;
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_malloc(size_t size)
{
  #line 26 
  void *res;
  #line 28 
  if (ldv_is_memory_alloc_failures != 0U) {
    #line 28 
    if (ldv_undef_int() != 0) 
                              #line 29 
                              return (void *)0;
  }
  #line 32 
  res = malloc(size);
  #line 33 
  __VERIFIER_assume(res != (void *)0);
  #line 34 
  return res;
}

#line 37  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_calloc(size_t nmemb, size_t size)
{
  #line 39 
  return calloc(nmemb,size);
}

#line 42  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_zalloc(size_t size)
{
  #line 44 
  return calloc(1UL,size);
}

#line 47  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void ldv_reference_free(void *s)
{
  #line 49 
  free(s);
  #line 50 
  return;
}

#line 52  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_realloc(void *ptr, size_t size)
{
  #line 54 
  void *res;
  #line 56 
  if (ptr != (void *)0 && size == 0UL) {
    #line 57 
    free(ptr);
    #line 58 
    return (void *)0;
  }
  #line 61 
  if (ptr == (void *)0) {
    #line 62 
    res = malloc(size);
    #line 63 
    return res;
  }
  #line 66 
  if (ldv_undef_int() != 0) {
    #line 68 
    res = malloc(size);
    #line 69 
    __VERIFIER_assume(res != (void *)0);
    #line 71 
    memcpy(res,ptr,size);
    #line 72 
    free(ptr);
    #line 74 
    return res;
  }
  else 
       #line 77 
       return (void *)0;
}

#line 80  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xmalloc(size_t size)
{
  #line 82 
  void *res;
  #line 84 
  res = malloc(size);
  #line 85 
  __VERIFIER_assume(res != (void *)0);
  #line 87 
  return res;
}

#line 90  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xcalloc(size_t nmemb, size_t size)
{
  #line 92 
  void *res;
  #line 94 
  res = calloc(nmemb,size);
  #line 95 
  __VERIFIER_assume(res != (void *)0);
  #line 97 
  return res;
}

#line 100  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xzalloc(size_t size)
{
  #line 102 
  void *res;
  #line 104 
  res = calloc(1UL,size);
  #line 105 
  __VERIFIER_assume(res != (void *)0);
  #line 107 
  return res;
}

#line 110  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_malloc_unknown_size(void)
{
  #line 112 
  void *res;
  #line 114 
  if (ldv_undef_int() != 0) {
    #line 116 
    res = external_allocated_data();
    #line 117 
    __VERIFIER_assume(res != (void *)0);
    #line 118 
    return res;
  }
  else 
       #line 121 
       return (void *)0;
}

#line 124  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_calloc_unknown_size(void)
{
  #line 126 
  void *res;
  #line 128 
  if (ldv_undef_int() != 0) {
    #line 130 
    res = external_allocated_data();
    #line 131 
    memset(res,0,8UL);
    #line 132 
    __VERIFIER_assume(res != (void *)0);
    #line 133 
    return res;
  }
  else 
       #line 136 
       return (void *)0;
}

#line 139  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_zalloc_unknown_size(void)
{
  #line 141 
  return ldv_reference_calloc_unknown_size();
}

#line 144  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xmalloc_unknown_size(size_t size)
{
  #line 146 
  void *res;
  #line 149 
  res = external_allocated_data();
  #line 150 
  __VERIFIER_assume(res != (void *)0);
  #line 152 
  return res;
}

#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_malloc(size_t size)
{
  #line 25 
  void *res;
  #line 26 
  res = ldv_reference_malloc(size);
  #line 27 
  if (res != (void *)0) {
    #line 28 
    int tmp_0;
    #line 28 
    if (ldv_is_err(res)) 
                         #line 28 
                         tmp_0 = 0; else 
                                         #line 28 
                                         tmp_0 = 1;
    #line 28 
    __VERIFIER_assume(tmp_0);
  }
  #line 29 
  return res;
}

#line 32  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_calloc(size_t nmemb, size_t size)
{
  #line 34 
  void *res;
  #line 35 
  res = ldv_reference_calloc(nmemb,size);
  #line 36 
  if (res != (void *)0) {
    #line 37 
    int tmp_0;
    #line 37 
    if (ldv_is_err(res)) 
                         #line 37 
                         tmp_0 = 0; else 
                                         #line 37 
                                         tmp_0 = 1;
    #line 37 
    __VERIFIER_assume(tmp_0);
  }
  #line 38 
  return res;
}

#line 41  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_zalloc(size_t size)
{
  #line 43 
  void *res;
  #line 44 
  res = ldv_reference_zalloc(size);
  #line 45 
  if (res != (void *)0) {
    #line 46 
    int tmp_0;
    #line 46 
    if (ldv_is_err(res)) 
                         #line 46 
                         tmp_0 = 0; else 
                                         #line 46 
                                         tmp_0 = 1;
    #line 46 
    __VERIFIER_assume(tmp_0);
  }
  #line 47 
  return res;
}

#line 50  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void ldv_free(void *s)
{
  #line 52 
  ldv_reference_free(s);
  #line 53 
  return;
}

#line 55  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_xmalloc(size_t size)
{
  #line 57 
  void *res;
  #line 59 
  int tmp_0;
  #line 58 
  res = ldv_reference_xmalloc(size);
  #line 59 
  if (ldv_is_err(res)) 
                       #line 59 
                       tmp_0 = 0; else 
                                       #line 59 
                                       tmp_0 = 1;
  #line 59 
  __VERIFIER_assume(tmp_0);
  #line 60 
  return res;
}

#line 63  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_xcalloc(size_t nmemb, size_t size)
{
  #line 65 
  void *res;
  #line 67 
  int tmp_0;
  #line 66 
  res = ldv_reference_xcalloc(nmemb,size);
  #line 67 
  if (ldv_is_err(res)) 
                       #line 67 
                       tmp_0 = 0; else 
                                       #line 67 
                                       tmp_0 = 1;
  #line 67 
  __VERIFIER_assume(tmp_0);
  #line 68 
  return res;
}

#line 71  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_xzalloc(size_t size)
{
  #line 73 
  void *res;
  #line 75 
  int tmp_0;
  #line 74 
  res = ldv_reference_xzalloc(size);
  #line 75 
  if (ldv_is_err(res)) 
                       #line 75 
                       tmp_0 = 0; else 
                                       #line 75 
                                       tmp_0 = 1;
  #line 75 
  __VERIFIER_assume(tmp_0);
  #line 76 
  return res;
}

#line 79  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_malloc_unknown_size(void)
{
  #line 81 
  void *res;
  #line 82 
  res = ldv_reference_malloc_unknown_size();
  #line 83 
  if (res != (void *)0) {
    #line 84 
    int tmp_0;
    #line 84 
    if (ldv_is_err(res)) 
                         #line 84 
                         tmp_0 = 0; else 
                                         #line 84 
                                         tmp_0 = 1;
    #line 84 
    __VERIFIER_assume(tmp_0);
  }
  #line 85 
  return res;
}

#line 88  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_calloc_unknown_size(void)
{
  #line 90 
  void *res;
  #line 91 
  res = ldv_reference_calloc_unknown_size();
  #line 92 
  if (res != (void *)0) {
    #line 93 
    int tmp_0;
    #line 93 
    if (ldv_is_err(res)) 
                         #line 93 
                         tmp_0 = 0; else 
                                         #line 93 
                                         tmp_0 = 1;
    #line 93 
    __VERIFIER_assume(tmp_0);
  }
  #line 94 
  return res;
}

#line 97  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_zalloc_unknown_size(void)
{
  #line 99 
  void *res;
  #line 100 
  res = ldv_reference_zalloc_unknown_size();
  #line 101 
  if (res != (void *)0) {
    #line 102 
    int tmp_0;
    #line 102 
    if (ldv_is_err(res)) 
                         #line 102 
                         tmp_0 = 0; else 
                                         #line 102 
                                         tmp_0 = 1;
    #line 102 
    __VERIFIER_assume(tmp_0);
  }
  #line 103 
  return res;
}

#line 106  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_xmalloc_unknown_size(size_t size)
{
  #line 108 
  void *res;
  #line 110 
  int tmp_0;
  #line 109 
  res = ldv_reference_xmalloc_unknown_size(size);
  #line 110 
  if (ldv_is_err(res)) 
                       #line 110 
                       tmp_0 = 0; else 
                                       #line 110 
                                       tmp_0 = 1;
  #line 110 
  __VERIFIER_assume(tmp_0);
  #line 111 
  return res;
}

/* compiler builtin: 
   long __builtin_expect(long exp, long c);   */
#line 22  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/common.h"
#line 22 
void __VERIFIER_error(void);
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/common.h"
long __builtin_expect(long exp, long c)
{
  #line 26 
  return exp;
}

#line 35  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/gcc.c"
void __builtin_trap(void)
{
  #line 37 
  __VERIFIER_error();
  #line 38 
  return;
}

#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 53  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
long ldv_undef_long(void);
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 61  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
unsigned int ldv_undef_uint(void);
#line 26  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 77  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
unsigned long ldv_undef_ulong(void);
#line 27  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 85  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
unsigned long long ldv_undef_ulonglong(void);
#line 28  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 69  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
void *ldv_undef_ptr(void);
#line 37  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 111  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int ldv_undef_int_nonnegative(void);
#line 43  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 129  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
void *ldv_undef_ptr_non_null(void);
#line 54  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 139  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int __ldv_undef_int_range(int begin, int end);
#line 56  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 151  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int __ldv_undef_int_range2(int begin, int end);
#line 29 
#line 29 
int __VERIFIER_nondet_int(void);
#line 31 
#line 31 
long __VERIFIER_nondet_long(void);
#line 38 
#line 38 
unsigned int __VERIFIER_nondet_uint(void);
#line 41 
#line 41 
unsigned long __VERIFIER_nondet_ulong(void);
#line 42 
#line 42 
unsigned long long __VERIFIER_nondet_ulonglong(void);
#line 43 
#line 43 
void *__VERIFIER_nondet_pointer(void);
#line 45  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int ldv_undef_int(void)
{
  #line 48 
  int undef_int = __VERIFIER_nondet_int();
  #line 50 
  return undef_int;
}

#line 53  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
long ldv_undef_long(void)
{
  #line 56 
  long undef_long = __VERIFIER_nondet_long();
  #line 58 
  return undef_long;
}

#line 61  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
unsigned int ldv_undef_uint(void)
{
  #line 64 
  unsigned int undef_uint = __VERIFIER_nondet_uint();
  #line 66 
  return undef_uint;
}

#line 69  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
void *ldv_undef_ptr(void)
{
  #line 72 
  void *undef_ptr = __VERIFIER_nondet_pointer();
  #line 74 
  return undef_ptr;
}

#line 77  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
unsigned long ldv_undef_ulong(void)
{
  #line 80 
  unsigned long undef_ulong = __VERIFIER_nondet_ulong();
  #line 82 
  return undef_ulong;
}

#line 85  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
unsigned long long ldv_undef_ulonglong(void)
{
  #line 88 
  unsigned long long undef_ulonglong = __VERIFIER_nondet_ulonglong();
  #line 90 
  return undef_ulonglong;
}

#line 93  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int ldv_undef_int_positive(void)
{
  #line 95 
  int ret = ldv_undef_int();
  #line 97 
  __VERIFIER_assume(ret > 0);
  #line 99 
  return ret;
}

#line 102  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int ldv_undef_int_negative(void)
{
  #line 104 
  int ret = ldv_undef_int();
  #line 106 
  __VERIFIER_assume(ret < 0);
  #line 108 
  return ret;
}

#line 111  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int ldv_undef_int_nonnegative(void)
{
  #line 113 
  int ret = ldv_undef_int();
  #line 115 
  __VERIFIER_assume(ret >= 0);
  #line 117 
  return ret;
}

#line 120  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int ldv_undef_int_nonpositive(void)
{
  #line 122 
  int ret = ldv_undef_int();
  #line 124 
  __VERIFIER_assume(ret <= 0);
  #line 126 
  return ret;
}

#line 129  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
void *ldv_undef_ptr_non_null(void)
{
  #line 131 
  void *ret = ldv_undef_ptr();
  #line 133 
  __VERIFIER_assume(ret != (void *)0);
  #line 135 
  return ret;
}

#line 139  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int __ldv_undef_int_range(int begin, int end)
{
  #line 141 
  int ret;
  #line 143 
  ret = ldv_undef_int();
  #line 144 
  __VERIFIER_assume(ret >= begin);
  #line 145 
  __VERIFIER_assume(ret <= end);
  #line 147 
  return ret;
}

#line 151  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int __ldv_undef_int_range2(int begin, int end)
{
  #line 153 
  int ret;
  #line 155 
  ret = begin;
  #line 155 
  while (ret < end) {
    #line 156 
    if (ldv_undef_int() != 0) 
                              #line 157 
                              break;
    #line 155 
    ret ++;
  }
  #line 159 
  return ret;
}

#line 62  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 62 
void ldv_initialize(void);
#line 97 
#line 97 
void ldv_failed_register_netdev(void);
#line 123 
#line 123 
void ldv_pre_probe(void);
#line 35  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/thread.h"
#line 35 
int pthread_create(pthread_t *, pthread_attr_t *, void *(*)(void *), void *);
#line 39 
#line 39 
int pthread_join(pthread_t, void **);
#line 45  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/broadcom/tg3.ko/concurrency safety/emg/0/environment_model.c"
int emg_runtime_enabled = 0;
#line 46  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/broadcom/tg3.ko/concurrency safety/emg/0/environment_model.c"
int emg_runtime_lowpower = 1;
#line 105 
#line 187 
void emg_dispatch_deregister_11(struct net_device *arg0);
#line 106 
#line 153 
void emg_dispatch_deregister_7(struct pci_driver *arg0);
#line 107 
#line 144 
void emg_dispatch_irq_deregister_5(int arg0);
#line 108 
#line 173 
void emg_dispatch_irq_register_9(int arg0, enum irqreturn (*arg1)(int , void *), enum irqreturn (*arg2)(int , void *), void *arg3);
#line 109 
#line 133 
void emg_dispatch_register_2(struct pci_driver *arg0);
#line 110 
#line 162 
void emg_dispatch_register_8(struct net_device *arg0);
#line 111 
#line 2308 
void *emg_entry_point_insmod(void *arg0);
#line 114 
#line 196 
void *emg_interrupt_interrupt_scenario_tg3_test_isr(void *arg0);
#line 115 
#line 259 
void *emg_net_random_allocationless_scenario_tg3_get_channels(void *arg0);
#line 116 
#line 885 
void *emg_pci_pci_scenario_tg3_driver(void *arg0);
#line 118 
#line 1061 
void *emg_pm_pm_ops_scenario_tg3_pm_ops(void *arg0);
#line 123 
#line 2337 
int main(void);
#line 126  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/broadcom/tg3.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_12;
#line 127  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/broadcom/tg3.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_13;
#line 128  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/broadcom/tg3.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_14;
#line 129  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/broadcom/tg3.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_15;
#line 133  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/broadcom/tg3.ko/concurrency safety/emg/0/environment_model.c"
void emg_dispatch_register_2(struct pci_driver *arg0)
{
  #line 134 
  int ret;
  #line 135 
  struct emg_struct_pci_scenario_tg3_driver_14 *cf_arg_14;
  #line 136 
  cf_arg_14 = (struct emg_struct_pci_scenario_tg3_driver_14 *)ldv_xmalloc(16UL);
  #line 137 
  cf_arg_14->arg0 = arg0;
  #line 138 
  ret = pthread_create(& emg_thread_14,(pthread_attr_t *)0,& emg_pci_pci_scenario_tg3_driver,(void *)cf_arg_14);
  #line 139 
  __VERIFIER_assume(ret == 0);
  #line 140 
  return;
}

#line 144  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/broadcom/tg3.ko/concurrency safety/emg/0/environment_model.c"
void emg_dispatch_irq_deregister_5(int arg0)
{
  #line 145 
  int ret;
  #line 146 
  struct emg_struct_free_irq_5 *cf_arg_12;
  #line 147 
  ret = pthread_join(emg_thread_12,(void **)0);
  #line 148 
  __VERIFIER_assume(ret == 0);
  #line 149 
  return;
}

#line 153  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/broadcom/tg3.ko/concurrency safety/emg/0/environment_model.c"
void emg_dispatch_deregister_7(struct pci_driver *arg0)
{
  #line 154 
  int ret;
  #line 155 
  struct emg_struct_pci_scenario_tg3_driver_14 *cf_arg_14;
  #line 156 
  ret = pthread_join(emg_thread_14,(void **)0);
  #line 157 
  __VERIFIER_assume(ret == 0);
  #line 158 
  return;
}

#line 162  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/broadcom/tg3.ko/concurrency safety/emg/0/environment_model.c"
void emg_dispatch_register_8(struct net_device *arg0)
{
  #line 163 
  int ret;
  #line 164 
  struct emg_struct_random_allocationless_scenario_tg3_get_channels_13 *cf_arg_13;
  #line 165 
  cf_arg_13 = (struct emg_struct_random_allocationless_scenario_tg3_get_channels_13 *)ldv_xmalloc(16UL);
  #line 166 
  cf_arg_13->arg0 = arg0;
  #line 167 
  ret = pthread_create(& emg_thread_13,(pthread_attr_t *)0,& emg_net_random_allocationless_scenario_tg3_get_channels,(void *)cf_arg_13);
  #line 168 
  __VERIFIER_assume(ret == 0);
  #line 169 
  return;
}

#line 173  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/broadcom/tg3.ko/concurrency safety/emg/0/environment_model.c"
void emg_dispatch_irq_register_9(int arg0, enum irqreturn (*arg1)(int , void *), enum irqreturn (*arg2)(int , void *), void *arg3)
{
  #line 174 
  int ret;
  #line 175 
  struct emg_struct_interrupt_scenario_tg3_test_isr_12 *cf_arg_12;
  #line 176 
  cf_arg_12 = (struct emg_struct_interrupt_scenario_tg3_test_isr_12 *)ldv_xmalloc(40UL);
  #line 177 
  cf_arg_12->arg0 = arg0;
  #line 178 
  cf_arg_12->arg1 = arg1;
  #line 179 
  cf_arg_12->arg2 = arg2;
  #line 180 
  cf_arg_12->arg3 = arg3;
  #line 181 
  ret = pthread_create(& emg_thread_12,(pthread_attr_t *)0,& emg_interrupt_interrupt_scenario_tg3_test_isr,(void *)cf_arg_12);
  #line 182 
  __VERIFIER_assume(ret == 0);
  #line 183 
  return;
}

#line 187  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/broadcom/tg3.ko/concurrency safety/emg/0/environment_model.c"
void emg_dispatch_deregister_11(struct net_device *arg0)
{
  #line 188 
  int ret;
  #line 189 
  struct emg_struct_random_allocationless_scenario_tg3_get_channels_13 *cf_arg_13;
  #line 190 
  ret = pthread_join(emg_thread_13,(void **)0);
  #line 191 
  __VERIFIER_assume(ret == 0);
  #line 192 
  return;
}

#line 196  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/broadcom/tg3.ko/concurrency safety/emg/0/environment_model.c"
void *emg_interrupt_interrupt_scenario_tg3_test_isr(void *arg0)
{
  #line 199 
  enum irqreturn (*emg_12_callback)(int , void *);
  #line 200 
  void *emg_12_data;
  #line 201 
  int emg_12_line;
  #line 202 
  enum irqreturn emg_12_ret_val;
  #line 203 
  enum irqreturn (*emg_12_thread)(int , void *);
  #line 205 
  struct emg_struct_interrupt_scenario_tg3_test_isr_12 *data = (struct emg_struct_interrupt_scenario_tg3_test_isr_12 *)arg0;
  #line 208 
  emg_12_callback = & emg_wrapper_tg3_test_isr;
  #line 211 
  if (data != (struct emg_struct_interrupt_scenario_tg3_test_isr_12 *)0) {
    #line 212 
    emg_12_line = data->arg0;
    #line 213 
    emg_12_callback = data->arg1;
    #line 214 
    emg_12_thread = data->arg2;
    #line 215 
    emg_12_data = data->arg3;
    #line 216 
    ldv_free((void *)data);
  }
  #line 222 
  ldv_switch_to_interrupt_context();
  #line 226 
  emg_12_ret_val = emg_wrapper_tg3_test_isr(emg_12_line,emg_12_data);
  #line 231 
  ldv_switch_to_process_context();
  #line 234 
  if (ldv_undef_int() != 0) {
    #line 236 
    __VERIFIER_assume(emg_12_ret_val == (unsigned int)IRQ_WAKE_THREAD);
    #line 240 
    if (emg_12_thread != (enum irqreturn (*)(int , void *))0) 
                                                              #line 241 
                                                              (*emg_12_thread)(emg_12_line,emg_12_data);
  }
  else 
       #line 246 
       __VERIFIER_assume(emg_12_ret_val != (unsigned int)IRQ_WAKE_THREAD);
  #line 254 
  return (void *)0;
}

#line 259  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/broadcom/tg3.ko/concurrency safety/emg/0/environment_model.c"
void *emg_net_random_allocationless_scenario_tg3_get_channels(void *arg0)
{
  #line 262 
  struct net_device *emg_13_container;
  #line 263 
  struct sk_buff *emg_13_emg_param_0_30;
  #line 264 
  struct ethtool_channels *emg_13_emg_param_1_0;
  #line 265 
  struct ethtool_coalesce *emg_13_emg_param_1_1;
  #line 266 
  struct ethtool_regs *emg_13_emg_param_1_10;
  #line 267 
  struct ethtool_ringparam *emg_13_emg_param_1_12;
  #line 268 
  unsigned int *emg_13_emg_param_1_13;
  #line 269 
  struct ethtool_rxnfc *emg_13_emg_param_1_16;
  #line 270 
  int emg_13_emg_param_1_18;
  #line 271 
  unsigned int emg_13_emg_param_1_19;
  #line 272 
  struct ethtool_drvinfo *emg_13_emg_param_1_2;
  #line 273 
  struct ethtool_ts_info *emg_13_emg_param_1_21;
  #line 274 
  struct ethtool_wolinfo *emg_13_emg_param_1_22;
  #line 275 
  int emg_13_emg_param_1_23;
  #line 276 
  struct ifreq *emg_13_emg_param_1_24;
  #line 277 
  unsigned long long emg_13_emg_param_1_26;
  #line 278 
  struct rtnl_link_stats64 *emg_13_emg_param_1_27;
  #line 279 
  unsigned long long emg_13_emg_param_1_28;
  #line 280 
  void *emg_13_emg_param_1_29;
  #line 281 
  struct ethtool_eee *emg_13_emg_param_1_3;
  #line 282 
  struct ethtool_test *emg_13_emg_param_1_31;
  #line 283 
  struct ethtool_channels *emg_13_emg_param_1_33;
  #line 284 
  struct ethtool_coalesce *emg_13_emg_param_1_34;
  #line 285 
  struct ethtool_eee *emg_13_emg_param_1_35;
  #line 286 
  struct ethtool_eeprom *emg_13_emg_param_1_36;
  #line 287 
  struct ethtool_link_ksettings *emg_13_emg_param_1_38;
  #line 288 
  unsigned int emg_13_emg_param_1_39;
  #line 289 
  struct ethtool_eeprom *emg_13_emg_param_1_4;
  #line 290 
  struct ethtool_pauseparam *emg_13_emg_param_1_40;
  #line 291 
  enum ethtool_phys_id_state *emg_13_emg_param_1_41;
  #line 292 
  struct ethtool_ringparam *emg_13_emg_param_1_42;
  #line 293 
  unsigned int *emg_13_emg_param_1_43;
  #line 294 
  struct ethtool_wolinfo *emg_13_emg_param_1_46;
  #line 295 
  struct ethtool_stats *emg_13_emg_param_1_6;
  #line 296 
  struct ethtool_link_ksettings *emg_13_emg_param_1_8;
  #line 297 
  struct ethtool_pauseparam *emg_13_emg_param_1_9;
  #line 298 
  void *emg_13_emg_param_2_11;
  #line 299 
  unsigned char *emg_13_emg_param_2_14;
  #line 300 
  unsigned int *emg_13_emg_param_2_17;
  #line 301 
  unsigned char *emg_13_emg_param_2_20;
  #line 302 
  int emg_13_emg_param_2_25;
  #line 303 
  unsigned long long *emg_13_emg_param_2_32;
  #line 304 
  unsigned char *emg_13_emg_param_2_37;
  #line 305 
  unsigned char *emg_13_emg_param_2_44;
  #line 306 
  unsigned char *emg_13_emg_param_2_5;
  #line 307 
  unsigned long long *emg_13_emg_param_2_7;
  #line 308 
  unsigned char *emg_13_emg_param_3_15;
  #line 309 
  unsigned char emg_13_emg_param_3_45;
  #line 310 
  int emg_repeat_cnt_call_13 = 1;
  #line 312 
  struct emg_struct_random_allocationless_scenario_tg3_get_channels_13 *data = (struct emg_struct_random_allocationless_scenario_tg3_get_channels_13 *)arg0;
  #line 317 
  if (data != (struct emg_struct_random_allocationless_scenario_tg3_get_channels_13 *)0) {
    #line 318 
    emg_13_container = data->arg0;
    #line 319 
    ldv_free((void *)data);
  }
  #line 324 
  goto emg_call_13;
  #line 328 
  return (void *)0;
  #line 331 
  emg_call_13: 
               #line 331 
  ;
  #line 332 
  switch (ldv_undef_int()) {
    #line 333 
    case 0: 
            #line 333 
    ;
    #line 335 
    emg_13_emg_param_1_46 = (struct ethtool_wolinfo *)ldv_xmalloc_unknown_size(0UL);
    #line 335 
    emg_13_emg_param_1_46 = emg_13_emg_param_1_46;
    #line 339 
    emg_wrapper_tg3_set_wol(emg_13_container,emg_13_emg_param_1_46);
    #line 343 
    ldv_free((void *)emg_13_emg_param_1_46);
    #line 345 
    break;
    #line 347 
    case 1: 
            #line 347 
    ;
    #line 349 
    emg_13_emg_param_1_43 = (unsigned int *)ldv_xmalloc_unknown_size(0UL);
    #line 349 
    emg_13_emg_param_1_43 = emg_13_emg_param_1_43;
    #line 350 
    emg_13_emg_param_2_44 = (unsigned char *)ldv_xmalloc_unknown_size(0UL);
    #line 350 
    emg_13_emg_param_2_44 = emg_13_emg_param_2_44;
    #line 354 
    emg_wrapper_tg3_set_rxfh(emg_13_container,emg_13_emg_param_1_43,emg_13_emg_param_2_44,(unsigned char)((int)emg_13_emg_param_3_45));
    #line 358 
    ldv_free((void *)emg_13_emg_param_1_43);
    #line 359 
    ldv_free((void *)emg_13_emg_param_2_44);
    #line 361 
    break;
    #line 363 
    case 2: 
            #line 363 
    ;
    #line 365 
    emg_13_emg_param_1_42 = (struct ethtool_ringparam *)ldv_xmalloc_unknown_size(0UL);
    #line 365 
    emg_13_emg_param_1_42 = emg_13_emg_param_1_42;
    #line 369 
    emg_wrapper_tg3_set_ringparam(emg_13_container,emg_13_emg_param_1_42);
    #line 373 
    ldv_free((void *)emg_13_emg_param_1_42);
    #line 375 
    break;
    #line 377 
    case 3: 
            #line 377 
    ;
    #line 379 
    emg_13_emg_param_1_41 = (enum ethtool_phys_id_state *)ldv_xmalloc_unknown_size(0UL);
    #line 379 
    emg_13_emg_param_1_41 = emg_13_emg_param_1_41;
    #line 383 
    emg_wrapper_tg3_set_phys_id(emg_13_container,*emg_13_emg_param_1_41);
    #line 387 
    ldv_free((void *)emg_13_emg_param_1_41);
    #line 389 
    break;
    #line 391 
    case 4: 
            #line 391 
    ;
    #line 393 
    emg_13_emg_param_1_40 = (struct ethtool_pauseparam *)ldv_xmalloc_unknown_size(0UL);
    #line 393 
    emg_13_emg_param_1_40 = emg_13_emg_param_1_40;
    #line 397 
    emg_wrapper_tg3_set_pauseparam(emg_13_container,emg_13_emg_param_1_40);
    #line 401 
    ldv_free((void *)emg_13_emg_param_1_40);
    #line 403 
    break;
    #line 405 
    case 5: 
            #line 405 
    ;
    #line 407 
    emg_wrapper_tg3_set_msglevel(emg_13_container,emg_13_emg_param_1_39);
    #line 409 
    break;
    #line 411 
    case 6: 
            #line 411 
    ;
    #line 413 
    emg_13_emg_param_1_38 = (struct ethtool_link_ksettings *)ldv_xmalloc_unknown_size(0UL);
    #line 413 
    emg_13_emg_param_1_38 = emg_13_emg_param_1_38;
    #line 417 
    emg_wrapper_tg3_set_link_ksettings(emg_13_container,emg_13_emg_param_1_38);
    #line 421 
    ldv_free((void *)emg_13_emg_param_1_38);
    #line 423 
    break;
    #line 425 
    case 7: 
            #line 425 
    ;
    #line 427 
    emg_13_emg_param_1_36 = (struct ethtool_eeprom *)ldv_xmalloc_unknown_size(0UL);
    #line 427 
    emg_13_emg_param_1_36 = emg_13_emg_param_1_36;
    #line 428 
    emg_13_emg_param_2_37 = (unsigned char *)ldv_xmalloc_unknown_size(0UL);
    #line 428 
    emg_13_emg_param_2_37 = emg_13_emg_param_2_37;
    #line 432 
    emg_wrapper_tg3_set_eeprom(emg_13_container,emg_13_emg_param_1_36,emg_13_emg_param_2_37);
    #line 436 
    ldv_free((void *)emg_13_emg_param_1_36);
    #line 437 
    ldv_free((void *)emg_13_emg_param_2_37);
    #line 439 
    break;
    #line 441 
    case 8: 
            #line 441 
    ;
    #line 443 
    emg_13_emg_param_1_35 = (struct ethtool_eee *)ldv_xmalloc_unknown_size(0UL);
    #line 443 
    emg_13_emg_param_1_35 = emg_13_emg_param_1_35;
    #line 447 
    emg_wrapper_tg3_set_eee(emg_13_container,emg_13_emg_param_1_35);
    #line 451 
    ldv_free((void *)emg_13_emg_param_1_35);
    #line 453 
    break;
    #line 455 
    case 9: 
            #line 455 
    ;
    #line 457 
    emg_13_emg_param_1_34 = (struct ethtool_coalesce *)ldv_xmalloc_unknown_size(0UL);
    #line 457 
    emg_13_emg_param_1_34 = emg_13_emg_param_1_34;
    #line 461 
    emg_wrapper_tg3_set_coalesce(emg_13_container,emg_13_emg_param_1_34);
    #line 465 
    ldv_free((void *)emg_13_emg_param_1_34);
    #line 467 
    break;
    #line 469 
    case 10: 
             #line 469 
    ;
    #line 471 
    emg_13_emg_param_1_33 = (struct ethtool_channels *)ldv_xmalloc_unknown_size(0UL);
    #line 471 
    emg_13_emg_param_1_33 = emg_13_emg_param_1_33;
    #line 475 
    emg_wrapper_tg3_set_channels(emg_13_container,emg_13_emg_param_1_33);
    #line 479 
    ldv_free((void *)emg_13_emg_param_1_33);
    #line 481 
    break;
    #line 483 
    case 11: 
             #line 483 
    ;
    #line 485 
    emg_13_emg_param_1_31 = (struct ethtool_test *)ldv_xmalloc_unknown_size(0UL);
    #line 485 
    emg_13_emg_param_1_31 = emg_13_emg_param_1_31;
    #line 486 
    emg_13_emg_param_2_32 = (unsigned long long *)ldv_xmalloc_unknown_size(0UL);
    #line 486 
    emg_13_emg_param_2_32 = emg_13_emg_param_2_32;
    #line 490 
    emg_wrapper_tg3_self_test(emg_13_container,emg_13_emg_param_1_31,emg_13_emg_param_2_32);
    #line 494 
    ldv_free((void *)emg_13_emg_param_1_31);
    #line 495 
    ldv_free((void *)emg_13_emg_param_2_32);
    #line 497 
    break;
    #line 499 
    case 12: 
             #line 499 
    ;
    #line 501 
    emg_wrapper_tg3_nway_reset(emg_13_container);
    #line 503 
    break;
    #line 505 
    case 13: 
             #line 505 
    ;
    #line 507 
    (*emg_alias_eth_validate_addr)(emg_13_container);
    #line 509 
    break;
    #line 511 
    case 14: 
             #line 511 
    ;
    #line 513 
    emg_wrapper_tg3_tx_timeout(emg_13_container);
    #line 515 
    break;
    #line 517 
    case 15: 
             #line 517 
    ;
    #line 519 
    emg_13_emg_param_0_30 = (struct sk_buff *)ldv_xmalloc_unknown_size(0UL);
    #line 519 
    emg_13_emg_param_0_30 = emg_13_emg_param_0_30;
    #line 523 
    emg_wrapper_tg3_start_xmit(emg_13_emg_param_0_30,emg_13_container);
    #line 527 
    ldv_free((void *)emg_13_emg_param_0_30);
    #line 529 
    break;
    #line 531 
    case 16: 
             #line 531 
    ;
    #line 533 
    emg_wrapper_tg3_set_rx_mode(emg_13_container);
    #line 535 
    break;
    #line 537 
    case 17: 
             #line 537 
    ;
    #line 539 
    emg_13_emg_param_1_29 = ldv_xmalloc_unknown_size(0UL);
    #line 539 
    emg_13_emg_param_1_29 = emg_13_emg_param_1_29;
    #line 543 
    emg_wrapper_tg3_set_mac_addr(emg_13_container,emg_13_emg_param_1_29);
    #line 547 
    ldv_free(emg_13_emg_param_1_29);
    #line 549 
    break;
    #line 551 
    case 18: 
             #line 551 
    ;
    #line 553 
    emg_wrapper_tg3_set_features(emg_13_container,emg_13_emg_param_1_28);
    #line 555 
    break;
    #line 557 
    case 19: 
             #line 557 
    ;
    #line 559 
    emg_wrapper_tg3_poll_controller(emg_13_container);
    #line 561 
    break;
    #line 563 
    case 20: 
             #line 563 
    ;
    #line 565 
    emg_13_emg_param_1_27 = (struct rtnl_link_stats64 *)ldv_xmalloc_unknown_size(0UL);
    #line 565 
    emg_13_emg_param_1_27 = emg_13_emg_param_1_27;
    #line 569 
    emg_wrapper_tg3_get_stats64(emg_13_container,emg_13_emg_param_1_27);
    #line 573 
    ldv_free((void *)emg_13_emg_param_1_27);
    #line 575 
    break;
    #line 577 
    case 21: 
             #line 577 
    ;
    #line 579 
    emg_wrapper_tg3_fix_features(emg_13_container,emg_13_emg_param_1_26);
    #line 581 
    break;
    #line 583 
    case 22: 
             #line 583 
    ;
    #line 585 
    emg_13_emg_param_1_24 = (struct ifreq *)ldv_xmalloc_unknown_size(0UL);
    #line 585 
    emg_13_emg_param_1_24 = emg_13_emg_param_1_24;
    #line 589 
    emg_wrapper_tg3_ioctl(emg_13_container,emg_13_emg_param_1_24,emg_13_emg_param_2_25);
    #line 593 
    ldv_free((void *)emg_13_emg_param_1_24);
    #line 595 
    break;
    #line 597 
    case 23: 
             #line 597 
    ;
    #line 599 
    emg_wrapper_tg3_change_mtu(emg_13_container,emg_13_emg_param_1_23);
    #line 601 
    break;
    #line 603 
    case 24: 
             #line 603 
    ;
    #line 605 
    emg_13_emg_param_1_22 = (struct ethtool_wolinfo *)ldv_xmalloc_unknown_size(0UL);
    #line 605 
    emg_13_emg_param_1_22 = emg_13_emg_param_1_22;
    #line 609 
    emg_wrapper_tg3_get_wol(emg_13_container,emg_13_emg_param_1_22);
    #line 613 
    ldv_free((void *)emg_13_emg_param_1_22);
    #line 615 
    break;
    #line 617 
    case 25: 
             #line 617 
    ;
    #line 619 
    emg_13_emg_param_1_21 = (struct ethtool_ts_info *)ldv_xmalloc_unknown_size(0UL);
    #line 619 
    emg_13_emg_param_1_21 = emg_13_emg_param_1_21;
    #line 623 
    emg_wrapper_tg3_get_ts_info(emg_13_container,emg_13_emg_param_1_21);
    #line 627 
    ldv_free((void *)emg_13_emg_param_1_21);
    #line 629 
    break;
    #line 631 
    case 26: 
             #line 631 
    ;
    #line 633 
    emg_13_emg_param_2_20 = (unsigned char *)ldv_xmalloc_unknown_size(0UL);
    #line 633 
    emg_13_emg_param_2_20 = emg_13_emg_param_2_20;
    #line 637 
    emg_wrapper_tg3_get_strings(emg_13_container,emg_13_emg_param_1_19,emg_13_emg_param_2_20);
    #line 641 
    ldv_free((void *)emg_13_emg_param_2_20);
    #line 643 
    break;
    #line 645 
    case 27: 
             #line 645 
    ;
    #line 647 
    emg_wrapper_tg3_get_sset_count(emg_13_container,emg_13_emg_param_1_18);
    #line 649 
    break;
    #line 651 
    case 28: 
             #line 651 
    ;
    #line 653 
    emg_13_emg_param_1_16 = (struct ethtool_rxnfc *)ldv_xmalloc_unknown_size(0UL);
    #line 653 
    emg_13_emg_param_1_16 = emg_13_emg_param_1_16;
    #line 654 
    emg_13_emg_param_2_17 = (unsigned int *)ldv_xmalloc_unknown_size(0UL);
    #line 654 
    emg_13_emg_param_2_17 = emg_13_emg_param_2_17;
    #line 658 
    emg_wrapper_tg3_get_rxnfc(emg_13_container,emg_13_emg_param_1_16,emg_13_emg_param_2_17);
    #line 662 
    ldv_free((void *)emg_13_emg_param_1_16);
    #line 663 
    ldv_free((void *)emg_13_emg_param_2_17);
    #line 665 
    break;
    #line 667 
    case 29: 
             #line 667 
    ;
    #line 669 
    emg_wrapper_tg3_get_rxfh_indir_size(emg_13_container);
    #line 671 
    break;
    #line 673 
    case 30: 
             #line 673 
    ;
    #line 675 
    emg_13_emg_param_1_13 = (unsigned int *)ldv_xmalloc_unknown_size(0UL);
    #line 675 
    emg_13_emg_param_1_13 = emg_13_emg_param_1_13;
    #line 676 
    emg_13_emg_param_2_14 = (unsigned char *)ldv_xmalloc_unknown_size(0UL);
    #line 676 
    emg_13_emg_param_2_14 = emg_13_emg_param_2_14;
    #line 677 
    emg_13_emg_param_3_15 = (unsigned char *)ldv_xmalloc_unknown_size(0UL);
    #line 677 
    emg_13_emg_param_3_15 = emg_13_emg_param_3_15;
    #line 681 
    emg_wrapper_tg3_get_rxfh(emg_13_container,emg_13_emg_param_1_13,emg_13_emg_param_2_14,emg_13_emg_param_3_15);
    #line 685 
    ldv_free((void *)emg_13_emg_param_1_13);
    #line 686 
    ldv_free((void *)emg_13_emg_param_2_14);
    #line 687 
    ldv_free((void *)emg_13_emg_param_3_15);
    #line 689 
    break;
    #line 691 
    case 31: 
             #line 691 
    ;
    #line 693 
    emg_13_emg_param_1_12 = (struct ethtool_ringparam *)ldv_xmalloc_unknown_size(0UL);
    #line 693 
    emg_13_emg_param_1_12 = emg_13_emg_param_1_12;
    #line 697 
    emg_wrapper_tg3_get_ringparam(emg_13_container,emg_13_emg_param_1_12);
    #line 701 
    ldv_free((void *)emg_13_emg_param_1_12);
    #line 703 
    break;
    #line 705 
    case 32: 
             #line 705 
    ;
    #line 707 
    emg_wrapper_tg3_get_regs_len(emg_13_container);
    #line 709 
    break;
    #line 711 
    case 33: 
             #line 711 
    ;
    #line 713 
    emg_13_emg_param_1_10 = (struct ethtool_regs *)ldv_xmalloc_unknown_size(0UL);
    #line 713 
    emg_13_emg_param_1_10 = emg_13_emg_param_1_10;
    #line 714 
    emg_13_emg_param_2_11 = ldv_xmalloc_unknown_size(0UL);
    #line 714 
    emg_13_emg_param_2_11 = emg_13_emg_param_2_11;
    #line 718 
    emg_wrapper_tg3_get_regs(emg_13_container,emg_13_emg_param_1_10,emg_13_emg_param_2_11);
    #line 722 
    ldv_free((void *)emg_13_emg_param_1_10);
    #line 723 
    ldv_free(emg_13_emg_param_2_11);
    #line 725 
    break;
    #line 727 
    case 34: 
             #line 727 
    ;
    #line 729 
    emg_13_emg_param_1_9 = (struct ethtool_pauseparam *)ldv_xmalloc_unknown_size(0UL);
    #line 729 
    emg_13_emg_param_1_9 = emg_13_emg_param_1_9;
    #line 733 
    emg_wrapper_tg3_get_pauseparam(emg_13_container,emg_13_emg_param_1_9);
    #line 737 
    ldv_free((void *)emg_13_emg_param_1_9);
    #line 739 
    break;
    #line 741 
    case 35: 
             #line 741 
    ;
    #line 743 
    emg_wrapper_tg3_get_msglevel(emg_13_container);
    #line 745 
    break;
    #line 747 
    case 36: 
             #line 747 
    ;
    #line 749 
    emg_13_emg_param_1_8 = (struct ethtool_link_ksettings *)ldv_xmalloc_unknown_size(0UL);
    #line 749 
    emg_13_emg_param_1_8 = emg_13_emg_param_1_8;
    #line 753 
    emg_wrapper_tg3_get_link_ksettings(emg_13_container,emg_13_emg_param_1_8);
    #line 757 
    ldv_free((void *)emg_13_emg_param_1_8);
    #line 759 
    break;
    #line 761 
    case 37: 
             #line 761 
    ;
    #line 763 
    ethtool_op_get_link(emg_13_container);
    #line 765 
    break;
    #line 767 
    case 38: 
             #line 767 
    ;
    #line 769 
    emg_13_emg_param_1_6 = (struct ethtool_stats *)ldv_xmalloc_unknown_size(0UL);
    #line 769 
    emg_13_emg_param_1_6 = emg_13_emg_param_1_6;
    #line 770 
    emg_13_emg_param_2_7 = (unsigned long long *)ldv_xmalloc_unknown_size(0UL);
    #line 770 
    emg_13_emg_param_2_7 = emg_13_emg_param_2_7;
    #line 774 
    emg_wrapper_tg3_get_ethtool_stats(emg_13_container,emg_13_emg_param_1_6,emg_13_emg_param_2_7);
    #line 778 
    ldv_free((void *)emg_13_emg_param_1_6);
    #line 779 
    ldv_free((void *)emg_13_emg_param_2_7);
    #line 781 
    break;
    #line 783 
    case 39: 
             #line 783 
    ;
    #line 785 
    emg_wrapper_tg3_get_eeprom_len(emg_13_container);
    #line 787 
    break;
    #line 789 
    case 40: 
             #line 789 
    ;
    #line 791 
    emg_13_emg_param_1_4 = (struct ethtool_eeprom *)ldv_xmalloc_unknown_size(0UL);
    #line 791 
    emg_13_emg_param_1_4 = emg_13_emg_param_1_4;
    #line 792 
    emg_13_emg_param_2_5 = (unsigned char *)ldv_xmalloc_unknown_size(0UL);
    #line 792 
    emg_13_emg_param_2_5 = emg_13_emg_param_2_5;
    #line 796 
    emg_wrapper_tg3_get_eeprom(emg_13_container,emg_13_emg_param_1_4,emg_13_emg_param_2_5);
    #line 800 
    ldv_free((void *)emg_13_emg_param_1_4);
    #line 801 
    ldv_free((void *)emg_13_emg_param_2_5);
    #line 803 
    break;
    #line 805 
    case 41: 
             #line 805 
    ;
    #line 807 
    emg_13_emg_param_1_3 = (struct ethtool_eee *)ldv_xmalloc_unknown_size(0UL);
    #line 807 
    emg_13_emg_param_1_3 = emg_13_emg_param_1_3;
    #line 811 
    emg_wrapper_tg3_get_eee(emg_13_container,emg_13_emg_param_1_3);
    #line 815 
    ldv_free((void *)emg_13_emg_param_1_3);
    #line 817 
    break;
    #line 819 
    case 42: 
             #line 819 
    ;
    #line 821 
    emg_13_emg_param_1_2 = (struct ethtool_drvinfo *)ldv_xmalloc_unknown_size(0UL);
    #line 821 
    emg_13_emg_param_1_2 = emg_13_emg_param_1_2;
    #line 825 
    emg_wrapper_tg3_get_drvinfo(emg_13_container,emg_13_emg_param_1_2);
    #line 829 
    ldv_free((void *)emg_13_emg_param_1_2);
    #line 831 
    break;
    #line 833 
    case 43: 
             #line 833 
    ;
    #line 835 
    emg_13_emg_param_1_1 = (struct ethtool_coalesce *)ldv_xmalloc_unknown_size(0UL);
    #line 835 
    emg_13_emg_param_1_1 = emg_13_emg_param_1_1;
    #line 839 
    emg_wrapper_tg3_get_coalesce(emg_13_container,emg_13_emg_param_1_1);
    #line 843 
    ldv_free((void *)emg_13_emg_param_1_1);
    #line 845 
    break;
    #line 847 
    case 44: 
             #line 847 
    ;
    #line 849 
    emg_13_emg_param_1_0 = (struct ethtool_channels *)ldv_xmalloc_unknown_size(0UL);
    #line 849 
    emg_13_emg_param_1_0 = emg_13_emg_param_1_0;
    #line 853 
    emg_wrapper_tg3_get_channels(emg_13_container,emg_13_emg_param_1_0);
    #line 857 
    ldv_free((void *)emg_13_emg_param_1_0);
    #line 860 
    if (emg_repeat_cnt_call_13 > 0) {
      #line 861 
      emg_repeat_cnt_call_13 --;
      #line 863 
      goto emg_call_13;
    }
    else 
         #line 865 
         __VERIFIER_assume(0);
    #line 869 
    break;
    #line 871 
    case 45: 
             #line 871 
    ;
    #line 875 
    break;
    #line 877 
    default: 
             #line 877 
    ;
    #line 877 
    __VERIFIER_assume(0);
  }
  #line 880 
  return (void *)0;
}

#line 885  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/broadcom/tg3.ko/concurrency safety/emg/0/environment_model.c"
void *emg_pci_pci_scenario_tg3_driver(void *arg0)
{
  #line 888 
  int emg_14_choice;
  #line 889 
  struct pci_driver *emg_14_container;
  #line 890 
  struct pci_device_id *emg_14_device_id;
  #line 891 
  struct pci_dev *emg_14_resource_0;
  #line 892 
  struct pm_message emg_14_resource_1;
  #line 893 
  int emg_14_ret;
  #line 894 
  int emg_repeat_cnt_main_14_0 = 1;
  #line 895 
  int emg_repeat_cnt_call_14_0 = 1;
  #line 896 
  int emg_repeat_cnt_call_14_1 = 1;
  #line 897 
  int emg_repeat_cnt_main_14_1 = 1;
  #line 899 
  struct emg_struct_pci_scenario_tg3_driver_14 *data = (struct emg_struct_pci_scenario_tg3_driver_14 *)arg0;
  #line 903 
  emg_14_choice = 0;
  #line 904 
  emg_14_ret = ldv_undef_int();
  #line 905 
  emg_14_choice = 0;
  #line 906 
  emg_14_container = emg_alias_tg3_driver;
  #line 907 
  emg_14_ret = ldv_undef_int();
  #line 909 
  __VERIFIER_assume(data->arg0 == emg_alias_tg3_driver);
  #line 911 
  if (data != (struct emg_struct_pci_scenario_tg3_driver_14 *)0) {
    #line 912 
    emg_14_container = data->arg0;
    #line 913 
    ldv_free((void *)data);
  }
  #line 918 
  emg_14_resource_0 = (struct pci_dev *)ldv_xmalloc(3312UL);
  #line 919 
  emg_14_choice = 0;
  #line 920 
  emg_14_device_id = emg_14_container->id_table + (unsigned long)emg_14_choice;
  #line 924 
  goto emg_main_14;
  #line 928 
  return (void *)0;
  #line 931 
  emg_call_14: 
               #line 931 
  ;
  #line 932 
  switch (ldv_undef_int()) {
    #line 933 
    case 0: 
            #line 933 
    ;
    #line 938 
    if (emg_repeat_cnt_call_14_1 > 0) {
      #line 939 
      emg_repeat_cnt_call_14_1 --;
      #line 941 
      goto emg_call_14;
    }
    else 
         #line 943 
         __VERIFIER_assume(0);
    #line 947 
    break;
    #line 949 
    case 1: 
            #line 949 
    ;
    #line 951 
    if (emg_14_container->suspend != (int (*)(struct pci_dev *, pm_message_t ))0) 
      #line 952 
      emg_14_ret = (*(emg_14_container->suspend))(emg_14_resource_0,emg_14_resource_1); else 
                                                                    #line 954 
                                                                    emg_14_ret = ldv_undef_int();
    #line 960 
    emg_14_ret = ldv_filter_err_code(emg_14_ret);
    #line 964 
    if (emg_14_container->resume != (int (*)(struct pci_dev *))0) 
                                                                  #line 965 
                                                                  (*(emg_14_container->resume))(emg_14_resource_0);
    #line 969 
    if (emg_repeat_cnt_call_14_0 > 0) {
      #line 970 
      emg_repeat_cnt_call_14_0 --;
      #line 972 
      goto emg_call_14;
    }
    else 
         #line 974 
         __VERIFIER_assume(0);
    #line 978 
    break;
    #line 980 
    case 2: 
            #line 980 
    ;
    #line 982 
    emg_wrapper_tg3_shutdown(emg_14_resource_0);
    #line 986 
    emg_wrapper_tg3_remove_one(emg_14_resource_0);
    #line 989 
    if (emg_repeat_cnt_main_14_1 > 0) {
      #line 990 
      emg_repeat_cnt_main_14_1 --;
      #line 992 
      goto emg_main_14;
    }
    else 
         #line 994 
         __VERIFIER_assume(0);
    #line 998 
    break;
    #line 1000 
    default: 
             #line 1000 
    ;
    #line 1000 
    __VERIFIER_assume(0);
  }
  #line 1003 
  return (void *)0;
  #line 1006 
  emg_main_14: 
               #line 1006 
  ;
  #line 1007 
  if (ldv_undef_int() != 0) {
    #line 1010 
    ldv_pre_probe();
    #line 1014 
    emg_14_ret = emg_wrapper_tg3_init_one(emg_14_resource_0,emg_14_device_id);
    #line 1019 
    emg_14_ret = ldv_post_probe(emg_14_ret);
    #line 1022 
    if (ldv_undef_int() != 0) {
      #line 1024 
      __VERIFIER_assume(emg_14_ret == 0);
      #line 1028 
      goto emg_call_14;
    }
    else 
         #line 1033 
         __VERIFIER_assume(emg_14_ret != 0);
    #line 1037 
    if (emg_repeat_cnt_main_14_0 > 0) {
      #line 1038 
      emg_repeat_cnt_main_14_0 --;
      #line 1040 
      goto emg_main_14;
    }
    else 
         #line 1042 
         __VERIFIER_assume(0);
  }
  else 
       #line 1048 
       ldv_free((void *)emg_14_resource_0);
  #line 1056 
  return (void *)0;
}

#line 1061  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/broadcom/tg3.ko/concurrency safety/emg/0/environment_model.c"
void *emg_pm_pm_ops_scenario_tg3_pm_ops(void *arg0)
{
  #line 1064 
  struct device *emg_15_device;
  #line 1065 
  struct dev_pm_ops *emg_15_pm_ops;
  #line 1066 
  int emg_15_ret;
  #line 1067 
  int emg_repeat_cnt_resnoirq_15 = 1;
  #line 1068 
  int emg_repeat_cnt_th_15 = 1;
  #line 1069 
  int emg_repeat_cnt_flate_15 = 1;
  #line 1070 
  int emg_repeat_cnt_restnoirq_15 = 1;
  #line 1071 
  int emg_repeat_cnt_fnoirq_15 = 1;
  #line 1072 
  int emg_repeat_cnt_rest_15 = 1;
  #line 1073 
  int emg_repeat_cnt_tnoirq_15 = 1;
  #line 1074 
  int emg_repeat_cnt_sus_15 = 1;
  #line 1075 
  int emg_repeat_cnt_fr_15 = 1;
  #line 1076 
  int emg_repeat_cnt_res_15 = 1;
  #line 1077 
  int emg_repeat_cnt_slate_15 = 1;
  #line 1078 
  int emg_repeat_cnt_run_resume_15 = 1;
  #line 1079 
  int emg_repeat_cnt_poff_15 = 1;
  #line 1080 
  int emg_repeat_cnt_reslate_15 = 1;
  #line 1081 
  int emg_repeat_cnt_pno_irq_15 = 1;
  #line 1082 
  int emg_repeat_cnt_plate_15 = 1;
  #line 1083 
  int emg_repeat_cnt_thlate_15 = 1;
  #line 1084 
  int emg_repeat_cnt_no_irq_15 = 1;
  #line 1085 
  int emg_repeat_cnt_reste_15 = 1;
  #line 1088 
  emg_15_ret = ldv_undef_int();
  #line 1089 
  emg_15_pm_ops = emg_alias_tg3_pm_ops;
  #line 1090 
  emg_15_ret = ldv_undef_int();
  #line 1096 
  goto emg_do_15;
  #line 1100 
  return (void *)0;
  #line 1103 
  emg_compl_15: 
                #line 1103 
  ;
  #line 1105 
  if (emg_15_pm_ops->complete != (void (*)(struct device *))0) 
                                                               #line 1106 
                                                               (*(emg_15_pm_ops->complete))(emg_15_device);
  #line 1114 
  return (void *)0;
  #line 1117 
  emg_do_15: 
             #line 1117 
  ;
  #line 1118 
  switch (ldv_undef_int()) {
    #line 1119 
    case 0: 
            #line 1119 
    ;
    #line 1121 
    __VERIFIER_assume((emg_runtime_enabled == 1 && emg_runtime_lowpower == 1) != 0);
    #line 1125 
    goto emg_runt_15;
    #line 1130 
    case 1: 
            #line 1130 
    ;
    #line 1132 
    goto emg_normal_15;
    #line 1137 
    case 2: 
            #line 1137 
    ;
    #line 1141 
    break;
    #line 1143 
    default: 
             #line 1143 
    ;
    #line 1143 
    __VERIFIER_assume(0);
  }
  #line 1146 
  return (void *)0;
  #line 1149 
  emg_flate_15: 
                #line 1149 
  ;
  #line 1151 
  if (emg_15_pm_ops->freeze_late != (int (*)(struct device *))0) 
                                                                 #line 1152 
                                                                 emg_15_ret = (*(emg_15_pm_ops->freeze_late))(emg_15_device); else 
                                                                    #line 1154 
                                                                    emg_15_ret = ldv_undef_int();
  #line 1160 
  emg_15_ret = ldv_post_probe(emg_15_ret);
  #line 1163 
  if (ldv_undef_int() != 0) {
    #line 1165 
    __VERIFIER_assume(emg_15_ret == 0);
    #line 1169 
    goto emg_thlate_15;
  }
  else 
       #line 1174 
       __VERIFIER_assume(emg_15_ret != 0);
  #line 1178 
  if (emg_repeat_cnt_flate_15 > 0) {
    #line 1179 
    emg_repeat_cnt_flate_15 --;
    #line 1181 
    goto emg_flate_15;
  }
  else 
       #line 1183 
       __VERIFIER_assume(0);
  #line 1188 
  return (void *)0;
  #line 1191 
  emg_fnoirq_15: 
                 #line 1191 
  ;
  #line 1193 
  if (emg_15_pm_ops->freeze_noirq != (int (*)(struct device *))0) 
                                                                  #line 1194 
                                                                  emg_15_ret = (*(emg_15_pm_ops->freeze_noirq))(emg_15_device); else 
                                                                    #line 1196 
                                                                    emg_15_ret = ldv_undef_int();
  #line 1202 
  emg_15_ret = ldv_post_probe(emg_15_ret);
  #line 1205 
  if (ldv_undef_int() != 0) {
    #line 1207 
    __VERIFIER_assume(emg_15_ret == 0);
    #line 1211 
    goto emg_tnoirq_15;
  }
  else 
       #line 1216 
       __VERIFIER_assume(emg_15_ret != 0);
  #line 1220 
  if (emg_repeat_cnt_fnoirq_15 > 0) {
    #line 1221 
    emg_repeat_cnt_fnoirq_15 --;
    #line 1223 
    goto emg_fnoirq_15;
  }
  else 
       #line 1225 
       __VERIFIER_assume(0);
  #line 1230 
  return (void *)0;
  #line 1233 
  emg_fr_15: 
             #line 1233 
  ;
  #line 1235 
  emg_15_ret = emg_wrapper_tg3_suspend(emg_15_device);
  #line 1240 
  emg_15_ret = ldv_post_probe(emg_15_ret);
  #line 1243 
  if (ldv_undef_int() != 0) {
    #line 1245 
    __VERIFIER_assume(emg_15_ret == 0);
    #line 1248 
    if (ldv_undef_int() != 0) 
                              #line 1250 
                              goto emg_fnoirq_15; else 
                                                       #line 1255 
                                                       goto emg_flate_15;
  }
  else {
    #line 1261 
    __VERIFIER_assume(emg_15_ret != 0);
    #line 1264 
    if (emg_repeat_cnt_fr_15 > 0) {
      #line 1265 
      emg_repeat_cnt_fr_15 --;
      #line 1267 
      goto emg_fr_15;
    }
    else 
         #line 1269 
         __VERIFIER_assume(0);
  }
  #line 1275 
  return (void *)0;
  #line 1278 
  emg_no_irq_15: 
                 #line 1278 
  ;
  #line 1280 
  if (emg_15_pm_ops->suspend_noirq != (int (*)(struct device *))0) 
                                                                   #line 1281 
                                                                   emg_15_ret = (*(emg_15_pm_ops->suspend_noirq))(emg_15_device); else 
                                                                    #line 1283 
                                                                    emg_15_ret = ldv_undef_int();
  #line 1289 
  emg_15_ret = ldv_post_probe(emg_15_ret);
  #line 1292 
  if (ldv_undef_int() != 0) {
    #line 1294 
    __VERIFIER_assume(emg_15_ret == 0);
    #line 1298 
    goto emg_resnoirq_15;
  }
  else 
       #line 1303 
       __VERIFIER_assume(emg_15_ret != 0);
  #line 1307 
  if (emg_repeat_cnt_no_irq_15 > 0) {
    #line 1308 
    emg_repeat_cnt_no_irq_15 --;
    #line 1310 
    goto emg_no_irq_15;
  }
  else 
       #line 1312 
       __VERIFIER_assume(0);
  #line 1317 
  return (void *)0;
  #line 1320 
  emg_normal_15: 
                 #line 1320 
  ;
  #line 1322 
  if (emg_15_pm_ops->prepare != (int (*)(struct device *))0) 
                                                             #line 1323 
                                                             emg_15_ret = (*(emg_15_pm_ops->prepare))(emg_15_device); else 
                                                                    #line 1325 
                                                                    emg_15_ret = ldv_undef_int();
  #line 1331 
  emg_15_ret = ldv_post_probe(emg_15_ret);
  #line 1334 
  if (ldv_undef_int() != 0) {
    #line 1336 
    __VERIFIER_assume(emg_15_ret == 0);
    #line 1339 
    switch (ldv_undef_int()) {
      #line 1340 
      case 0: 
              #line 1340 
      ;
      #line 1342 
      goto emg_sus_15;
      #line 1347 
      case 1: 
              #line 1347 
      ;
      #line 1349 
      goto emg_fr_15;
      #line 1354 
      case 2: 
              #line 1354 
      ;
      #line 1356 
      goto emg_poff_15;
      #line 1361 
      default: 
               #line 1361 
      ;
      #line 1361 
      __VERIFIER_assume(0);
    }
  }
  else 
       #line 1365 
       __VERIFIER_assume(emg_15_ret != 0);
  #line 1373 
  return (void *)0;
  #line 1376 
  emg_plate_15: 
                #line 1376 
  ;
  #line 1378 
  if (emg_15_pm_ops->poweroff_late != (int (*)(struct device *))0) 
                                                                   #line 1379 
                                                                   emg_15_ret = (*(emg_15_pm_ops->poweroff_late))(emg_15_device); else 
                                                                    #line 1381 
                                                                    emg_15_ret = ldv_undef_int();
  #line 1387 
  emg_15_ret = ldv_post_probe(emg_15_ret);
  #line 1390 
  if (ldv_undef_int() != 0) {
    #line 1392 
    __VERIFIER_assume(emg_15_ret == 0);
    #line 1396 
    goto emg_reste_15;
  }
  else 
       #line 1401 
       __VERIFIER_assume(emg_15_ret != 0);
  #line 1405 
  if (emg_repeat_cnt_plate_15 > 0) {
    #line 1406 
    emg_repeat_cnt_plate_15 --;
    #line 1408 
    goto emg_plate_15;
  }
  else 
       #line 1410 
       __VERIFIER_assume(0);
  #line 1415 
  return (void *)0;
  #line 1418 
  emg_pno_irq_15: 
                  #line 1418 
  ;
  #line 1420 
  if (emg_15_pm_ops->poweroff_noirq != (int (*)(struct device *))0) 
                                                                    #line 1421 
                                                                    emg_15_ret = (*(emg_15_pm_ops->poweroff_noirq))(emg_15_device); else 
                                                                    #line 1423 
                                                                    emg_15_ret = ldv_undef_int();
  #line 1429 
  emg_15_ret = ldv_post_probe(emg_15_ret);
  #line 1432 
  if (ldv_undef_int() != 0) {
    #line 1434 
    __VERIFIER_assume(emg_15_ret == 0);
    #line 1438 
    goto emg_restnoirq_15;
  }
  else 
       #line 1443 
       __VERIFIER_assume(emg_15_ret != 0);
  #line 1447 
  if (emg_repeat_cnt_pno_irq_15 > 0) {
    #line 1448 
    emg_repeat_cnt_pno_irq_15 --;
    #line 1450 
    goto emg_pno_irq_15;
  }
  else 
       #line 1452 
       __VERIFIER_assume(0);
  #line 1457 
  return (void *)0;
  #line 1460 
  emg_poff_15: 
               #line 1460 
  ;
  #line 1462 
  emg_15_ret = emg_wrapper_tg3_suspend(emg_15_device);
  #line 1467 
  emg_15_ret = ldv_post_probe(emg_15_ret);
  #line 1470 
  if (ldv_undef_int() != 0) {
    #line 1472 
    __VERIFIER_assume(emg_15_ret == 0);
    #line 1475 
    if (ldv_undef_int() != 0) 
                              #line 1477 
                              goto emg_pno_irq_15; else 
                                                        #line 1482 
                                                        goto emg_plate_15;
  }
  else {
    #line 1488 
    __VERIFIER_assume(emg_15_ret != 0);
    #line 1491 
    if (emg_repeat_cnt_poff_15 > 0) {
      #line 1492 
      emg_repeat_cnt_poff_15 --;
      #line 1494 
      goto emg_poff_15;
    }
    else 
         #line 1496 
         __VERIFIER_assume(0);
  }
  #line 1502 
  return (void *)0;
  #line 1505 
  emg_res_15: 
              #line 1505 
  ;
  #line 1507 
  emg_15_ret = emg_wrapper_tg3_resume(emg_15_device);
  #line 1512 
  emg_15_ret = ldv_post_probe(emg_15_ret);
  #line 1515 
  if (ldv_undef_int() != 0) {
    #line 1517 
    __VERIFIER_assume(emg_15_ret == 0);
    #line 1521 
    goto emg_compl_15;
  }
  else {
    #line 1526 
    __VERIFIER_assume(emg_15_ret != 0);
    #line 1529 
    if (emg_repeat_cnt_res_15 > 0) {
      #line 1530 
      emg_repeat_cnt_res_15 --;
      #line 1532 
      goto emg_res_15;
    }
    else 
         #line 1534 
         __VERIFIER_assume(0);
  }
  #line 1540 
  return (void *)0;
  #line 1543 
  emg_reslate_15: 
                  #line 1543 
  ;
  #line 1545 
  if (emg_15_pm_ops->resume_early != (int (*)(struct device *))0) 
                                                                  #line 1546 
                                                                  emg_15_ret = (*(emg_15_pm_ops->resume_early))(emg_15_device); else 
                                                                    #line 1548 
                                                                    emg_15_ret = ldv_undef_int();
  #line 1554 
  emg_15_ret = ldv_post_probe(emg_15_ret);
  #line 1557 
  if (ldv_undef_int() != 0) {
    #line 1559 
    __VERIFIER_assume(emg_15_ret == 0);
    #line 1563 
    goto emg_res_15;
  }
  else 
       #line 1568 
       __VERIFIER_assume(emg_15_ret != 0);
  #line 1572 
  if (emg_repeat_cnt_reslate_15 > 0) {
    #line 1573 
    emg_repeat_cnt_reslate_15 --;
    #line 1575 
    goto emg_reslate_15;
  }
  else 
       #line 1577 
       __VERIFIER_assume(0);
  #line 1582 
  return (void *)0;
  #line 1585 
  emg_resnoirq_15: 
                   #line 1585 
  ;
  #line 1587 
  if (emg_15_pm_ops->resume_noirq != (int (*)(struct device *))0) 
                                                                  #line 1588 
                                                                  emg_15_ret = (*(emg_15_pm_ops->resume_noirq))(emg_15_device); else 
                                                                    #line 1590 
                                                                    emg_15_ret = ldv_undef_int();
  #line 1596 
  emg_15_ret = ldv_post_probe(emg_15_ret);
  #line 1599 
  if (ldv_undef_int() != 0) {
    #line 1601 
    __VERIFIER_assume(emg_15_ret == 0);
    #line 1605 
    goto emg_res_15;
  }
  else 
       #line 1610 
       __VERIFIER_assume(emg_15_ret != 0);
  #line 1614 
  if (emg_repeat_cnt_resnoirq_15 > 0) {
    #line 1615 
    emg_repeat_cnt_resnoirq_15 --;
    #line 1617 
    goto emg_resnoirq_15;
  }
  else 
       #line 1619 
       __VERIFIER_assume(0);
  #line 1624 
  return (void *)0;
  #line 1627 
  emg_rest_15: 
               #line 1627 
  ;
  #line 1629 
  emg_15_ret = emg_wrapper_tg3_resume(emg_15_device);
  #line 1634 
  emg_15_ret = ldv_post_probe(emg_15_ret);
  #line 1637 
  if (ldv_undef_int() != 0) {
    #line 1639 
    __VERIFIER_assume(emg_15_ret == 0);
    #line 1643 
    goto emg_compl_15;
  }
  else {
    #line 1648 
    __VERIFIER_assume(emg_15_ret != 0);
    #line 1651 
    if (emg_repeat_cnt_rest_15 > 0) {
      #line 1652 
      emg_repeat_cnt_rest_15 --;
      #line 1654 
      goto emg_rest_15;
    }
    else 
         #line 1656 
         __VERIFIER_assume(0);
  }
  #line 1662 
  return (void *)0;
  #line 1665 
  emg_reste_15: 
                #line 1665 
  ;
  #line 1667 
  if (emg_15_pm_ops->restore_early != (int (*)(struct device *))0) 
                                                                   #line 1668 
                                                                   emg_15_ret = (*(emg_15_pm_ops->restore_early))(emg_15_device); else 
                                                                    #line 1670 
                                                                    emg_15_ret = ldv_undef_int();
  #line 1676 
  emg_15_ret = ldv_post_probe(emg_15_ret);
  #line 1679 
  if (ldv_undef_int() != 0) {
    #line 1681 
    __VERIFIER_assume(emg_15_ret == 0);
    #line 1685 
    goto emg_rest_15;
  }
  else 
       #line 1690 
       __VERIFIER_assume(emg_15_ret != 0);
  #line 1694 
  if (emg_repeat_cnt_reste_15 > 0) {
    #line 1695 
    emg_repeat_cnt_reste_15 --;
    #line 1697 
    goto emg_reste_15;
  }
  else 
       #line 1699 
       __VERIFIER_assume(0);
  #line 1704 
  return (void *)0;
  #line 1707 
  emg_restnoirq_15: 
                    #line 1707 
  ;
  #line 1709 
  if (emg_15_pm_ops->restore_noirq != (int (*)(struct device *))0) 
                                                                   #line 1710 
                                                                   emg_15_ret = (*(emg_15_pm_ops->restore_noirq))(emg_15_device); else 
                                                                    #line 1712 
                                                                    emg_15_ret = ldv_undef_int();
  #line 1718 
  emg_15_ret = ldv_post_probe(emg_15_ret);
  #line 1721 
  if (ldv_undef_int() != 0) {
    #line 1723 
    __VERIFIER_assume(emg_15_ret == 0);
    #line 1727 
    goto emg_rest_15;
  }
  else 
       #line 1732 
       __VERIFIER_assume(emg_15_ret != 0);
  #line 1736 
  if (emg_repeat_cnt_restnoirq_15 > 0) {
    #line 1737 
    emg_repeat_cnt_restnoirq_15 --;
    #line 1739 
    goto emg_restnoirq_15;
  }
  else 
       #line 1741 
       __VERIFIER_assume(0);
  #line 1746 
  return (void *)0;
  #line 1749 
  emg_run_resume_15: 
                     #line 1749 
  ;
  #line 1751 
  if (emg_15_pm_ops->runtime_resume != (int (*)(struct device *))0) 
                                                                    #line 1752 
                                                                    emg_15_ret = (*(emg_15_pm_ops->runtime_resume))(emg_15_device); else 
                                                                    #line 1754 
                                                                    emg_15_ret = ldv_undef_int();
  #line 1760 
  emg_15_ret = ldv_post_probe(emg_15_ret);
  #line 1761 
  if (emg_15_ret != 0) 
                       #line 1762 
                       emg_runtime_lowpower = 0;
  #line 1765 
  if (ldv_undef_int() != 0) 
                            #line 1767 
                            __VERIFIER_assume(emg_15_ret == 0);
  else {
    #line 1771 
    __VERIFIER_assume(emg_15_ret != 0);
    #line 1774 
    if (emg_repeat_cnt_run_resume_15 > 0) {
      #line 1775 
      emg_repeat_cnt_run_resume_15 --;
      #line 1777 
      goto emg_run_resume_15;
    }
    else 
         #line 1779 
         __VERIFIER_assume(0);
  }
  #line 1789 
  return (void *)0;
  #line 1792 
  emg_runt_15: 
               #line 1792 
  ;
  #line 1793 
  if (ldv_undef_int() != 0) {
    #line 1795 
    if (emg_15_pm_ops->runtime_idle != (int (*)(struct device *))0) 
                                                                    #line 1796 
                                                                    emg_15_ret = (*(emg_15_pm_ops->runtime_idle))(emg_15_device); else 
                                                                    #line 1798 
                                                                    emg_15_ret = ldv_undef_int();
    #line 1804 
    emg_15_ret = ldv_post_probe(emg_15_ret);
  }
  else {
    #line 1808 
    if (emg_15_pm_ops->runtime_suspend != (int (*)(struct device *))0) 
      #line 1809 
      emg_15_ret = (*(emg_15_pm_ops->runtime_suspend))(emg_15_device); else 
                                                                    #line 1811 
                                                                    emg_15_ret = ldv_undef_int();
    #line 1817 
    emg_15_ret = ldv_post_probe(emg_15_ret);
    #line 1818 
    if (emg_15_ret != 0) 
                         #line 1819 
                         emg_runtime_lowpower = 1;
    #line 1822 
    if (ldv_undef_int() != 0) {
      #line 1824 
      __VERIFIER_assume(emg_15_ret == 0);
      #line 1828 
      goto emg_run_resume_15;
    }
    else 
         #line 1833 
         __VERIFIER_assume(emg_15_ret != 0);
  }
  #line 1842 
  return (void *)0;
  #line 1845 
  emg_slate_15: 
                #line 1845 
  ;
  #line 1847 
  if (emg_15_pm_ops->suspend_late != (int (*)(struct device *))0) 
                                                                  #line 1848 
                                                                  emg_15_ret = (*(emg_15_pm_ops->suspend_late))(emg_15_device); else 
                                                                    #line 1850 
                                                                    emg_15_ret = ldv_undef_int();
  #line 1856 
  emg_15_ret = ldv_post_probe(emg_15_ret);
  #line 1859 
  if (ldv_undef_int() != 0) {
    #line 1861 
    __VERIFIER_assume(emg_15_ret == 0);
    #line 1865 
    goto emg_reslate_15;
  }
  else 
       #line 1870 
       __VERIFIER_assume(emg_15_ret != 0);
  #line 1874 
  if (emg_repeat_cnt_slate_15 > 0) {
    #line 1875 
    emg_repeat_cnt_slate_15 --;
    #line 1877 
    goto emg_slate_15;
  }
  else 
       #line 1879 
       __VERIFIER_assume(0);
  #line 1884 
  return (void *)0;
  #line 1887 
  emg_sus_15: 
              #line 1887 
  ;
  #line 1889 
  emg_15_ret = emg_wrapper_tg3_suspend(emg_15_device);
  #line 1894 
  emg_15_ret = ldv_post_probe(emg_15_ret);
  #line 1897 
  if (ldv_undef_int() != 0) {
    #line 1899 
    __VERIFIER_assume(emg_15_ret == 0);
    #line 1902 
    if (ldv_undef_int() != 0) 
                              #line 1904 
                              goto emg_no_irq_15; else 
                                                       #line 1909 
                                                       goto emg_slate_15;
  }
  else {
    #line 1915 
    __VERIFIER_assume(emg_15_ret != 0);
    #line 1918 
    if (emg_repeat_cnt_sus_15 > 0) {
      #line 1919 
      emg_repeat_cnt_sus_15 --;
      #line 1921 
      goto emg_sus_15;
    }
    else 
         #line 1923 
         __VERIFIER_assume(0);
  }
  #line 1929 
  return (void *)0;
  #line 1932 
  emg_th_15: 
             #line 1932 
  ;
  #line 1934 
  emg_15_ret = emg_wrapper_tg3_resume(emg_15_device);
  #line 1939 
  emg_15_ret = ldv_post_probe(emg_15_ret);
  #line 1942 
  if (ldv_undef_int() != 0) {
    #line 1944 
    __VERIFIER_assume(emg_15_ret == 0);
    #line 1948 
    goto emg_compl_15;
  }
  else {
    #line 1953 
    __VERIFIER_assume(emg_15_ret != 0);
    #line 1956 
    if (emg_repeat_cnt_th_15 > 0) {
      #line 1957 
      emg_repeat_cnt_th_15 --;
      #line 1959 
      goto emg_th_15;
    }
    else 
         #line 1961 
         __VERIFIER_assume(0);
  }
  #line 1967 
  return (void *)0;
  #line 1970 
  emg_thlate_15: 
                 #line 1970 
  ;
  #line 1972 
  if (emg_15_pm_ops->thaw_early != (int (*)(struct device *))0) 
                                                                #line 1973 
                                                                emg_15_ret = (*(emg_15_pm_ops->thaw_early))(emg_15_device); else 
                                                                    #line 1975 
                                                                    emg_15_ret = ldv_undef_int();
  #line 1981 
  emg_15_ret = ldv_post_probe(emg_15_ret);
  #line 1984 
  if (ldv_undef_int() != 0) {
    #line 1986 
    __VERIFIER_assume(emg_15_ret == 0);
    #line 1990 
    goto emg_th_15;
  }
  else 
       #line 1995 
       __VERIFIER_assume(emg_15_ret != 0);
  #line 1999 
  if (emg_repeat_cnt_thlate_15 > 0) {
    #line 2000 
    emg_repeat_cnt_thlate_15 --;
    #line 2002 
    goto emg_thlate_15;
  }
  else 
       #line 2004 
       __VERIFIER_assume(0);
  #line 2009 
  return (void *)0;
  #line 2012 
  emg_tnoirq_15: 
                 #line 2012 
  ;
  #line 2014 
  if (emg_15_pm_ops->thaw_noirq != (int (*)(struct device *))0) 
                                                                #line 2015 
                                                                emg_15_ret = (*(emg_15_pm_ops->thaw_noirq))(emg_15_device); else 
                                                                    #line 2017 
                                                                    emg_15_ret = ldv_undef_int();
  #line 2023 
  emg_15_ret = ldv_post_probe(emg_15_ret);
  #line 2026 
  if (ldv_undef_int() != 0) {
    #line 2028 
    __VERIFIER_assume(emg_15_ret == 0);
    #line 2032 
    goto emg_th_15;
  }
  else 
       #line 2037 
       __VERIFIER_assume(emg_15_ret != 0);
  #line 2041 
  if (emg_repeat_cnt_tnoirq_15 > 0) {
    #line 2042 
    emg_repeat_cnt_tnoirq_15 --;
    #line 2044 
    goto emg_tnoirq_15;
  }
  else 
       #line 2046 
       __VERIFIER_assume(0);
  #line 2051 
  return (void *)0;
}

#line 2056  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/broadcom/tg3.ko/concurrency safety/emg/0/environment_model.c"
int emg___pci_register_driver(struct pci_driver *arg0, struct module *arg1, char *arg2)
{
  #line 2059 
  struct pci_driver *emg_2_pci_driver;
  #line 2061 
  emg_2_pci_driver = emg_alias_tg3_driver;
  #line 2062 
  if (ldv_undef_int() != 0) {
    #line 2064 
    emg_2_pci_driver = arg0;
    #line 2068 
    emg_dispatch_register_2(emg_2_pci_driver);
    #line 2072 
    return 0;
  }
  else {
    #line 2076 
    return ldv_undef_int_negative();
  }
}

#line 2084  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/broadcom/tg3.ko/concurrency safety/emg/0/environment_model.c"
struct net_device *emg_alloc_etherdev_mqs(int arg0, unsigned int arg1, unsigned int arg2)
{
  #line 2087 
  struct net_device *emg_3_netdev;
  #line 2089 
  if (ldv_undef_int() != 0) {
    #line 2091 
    emg_3_netdev = (struct net_device *)ldv_xmalloc(3328UL);
    #line 2095 
    return emg_3_netdev;
  }
  else 
       #line 2099 
       return (struct net_device *)0;
}

#line 2107  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/broadcom/tg3.ko/concurrency safety/emg/0/environment_model.c"
int emg_del_timer_sync(struct timer_list *arg0)
{
  #line 2110 
  struct timer_list *emg_4_timer_list;
  #line 2113 
  emg_4_timer_list = arg0;
  #line 2114 
  ;
  #line 2114 
  return 0;
}

#line 2124  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/broadcom/tg3.ko/concurrency safety/emg/0/environment_model.c"
void *emg_free_irq(unsigned int arg0, void *arg1)
{
  #line 2127 
  int emg_5_line;
  #line 2130 
  emg_5_line = (int)arg0;
  #line 2134 
  emg_dispatch_irq_deregister_5(emg_5_line);
  #line 2135 
  ;
  #line 2135 
  return (void *)0;
}

#line 2141  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/broadcom/tg3.ko/concurrency safety/emg/0/environment_model.c"
void emg_free_netdev(struct net_device *arg0)
{
  #line 2144 
  struct net_device *emg_6_netdev;
  #line 2147 
  emg_6_netdev = arg0;
  #line 2148 
  ldv_free((void *)emg_6_netdev);
  #line 2151 
  return;
}

#line 2156  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/broadcom/tg3.ko/concurrency safety/emg/0/environment_model.c"
void emg_pci_unregister_driver(struct pci_driver *arg0)
{
  #line 2159 
  struct pci_driver *emg_7_pci_driver;
  #line 2161 
  emg_7_pci_driver = emg_alias_tg3_driver;
  #line 2163 
  emg_7_pci_driver = arg0;
  #line 2167 
  emg_dispatch_deregister_7(emg_7_pci_driver);
  #line 2170 
  return;
}

#line 2175  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/broadcom/tg3.ko/concurrency safety/emg/0/environment_model.c"
int emg_register_netdev(struct net_device *arg0)
{
  #line 2178 
  struct net_device *emg_8_netdev;
  #line 2179 
  int emg_8_ret;
  #line 2182 
  emg_8_ret = ldv_undef_int();
  #line 2183 
  emg_8_ret = ldv_undef_int();
  #line 2184 
  if (ldv_undef_int() != 0) {
    #line 2186 
    emg_8_netdev = arg0;
    #line 2190 
    emg_8_ret = emg_wrapper_tg3_open(emg_8_netdev);
    #line 2193 
    if (ldv_undef_int() != 0) {
      #line 2195 
      __VERIFIER_assume(emg_8_ret == 0);
      #line 2199 
      emg_dispatch_register_8(emg_8_netdev);
      #line 2203 
      return 0;
    }
    else {
      #line 2207 
      __VERIFIER_assume(emg_8_ret != 0);
      #line 2208 
      ldv_failed_register_netdev();
      #line 2209 
      return ldv_undef_int_negative();
    }
  }
  else {
    #line 2214 
    ldv_failed_register_netdev();
    #line 2215 
    return ldv_undef_int_negative();
  }
}

#line 2223  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/broadcom/tg3.ko/concurrency safety/emg/0/environment_model.c"
int emg_request_irq(unsigned int arg0, enum irqreturn (*arg1)(int , void *), unsigned long arg2, char *arg3, void *arg4)
{
  #line 2226 
  enum irqreturn (*emg_9_callback)(int , void *);
  #line 2227 
  void *emg_9_data;
  #line 2228 
  int emg_9_line;
  #line 2229 
  enum irqreturn (*emg_9_thread)(int , void *);
  #line 2231 
  emg_9_callback = & emg_wrapper_tg3_test_isr;
  #line 2232 
  if (ldv_undef_int() != 0) {
    #line 2234 
    emg_9_line = (int)arg0;
    #line 2235 
    emg_9_callback = arg1;
    #line 2236 
    emg_9_thread = (enum irqreturn (*)(int , void *))0;
    #line 2237 
    emg_9_data = arg4;
    #line 2241 
    emg_dispatch_irq_register_9(emg_9_line,emg_9_callback,emg_9_thread,emg_9_data);
    #line 2245 
    return 0;
  }
  else {
    #line 2249 
    return ldv_undef_int_negative();
  }
}

#line 2257  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/broadcom/tg3.ko/concurrency safety/emg/0/environment_model.c"
_Bool emg_schedule_work(struct work_struct *arg0)
{
  #line 2260 
  struct work_struct *emg_10_work_struct;
  #line 2262 
  if (ldv_undef_int() != 0) {
    #line 2264 
    emg_10_work_struct = arg0;
    #line 2268 
    if (emg_10_work_struct->func != (void (*)(struct work_struct *))0) 
      #line 2269 
      (*(emg_10_work_struct->func))(emg_10_work_struct);
    #line 2274 
    return (_Bool)1;
  }
  else 
       #line 2278 
       return (_Bool)0;
}

#line 2286  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/broadcom/tg3.ko/concurrency safety/emg/0/environment_model.c"
void emg_unregister_netdev(struct net_device *arg0)
{
  #line 2289 
  struct net_device *emg_11_netdev;
  #line 2292 
  emg_11_netdev = arg0;
  #line 2296 
  emg_wrapper_tg3_close(emg_11_netdev);
  #line 2300 
  emg_dispatch_deregister_11(emg_11_netdev);
  #line 2303 
  return;
}

#line 2308  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/broadcom/tg3.ko/concurrency safety/emg/0/environment_model.c"
void *emg_entry_point_insmod(void *arg0)
{
  #line 2311 
  int emg_1_ret;
  #line 2314 
  emg_1_ret = emg_tg3_driver_init();
  #line 2315 
  emg_1_ret = ldv_post_init(emg_1_ret);
  #line 2318 
  if (ldv_undef_int() != 0) {
    #line 2320 
    __VERIFIER_assume(emg_1_ret == 0);
    #line 2324 
    emg_tg3_driver_exit();
  }
  else 
       #line 2328 
       __VERIFIER_assume(emg_1_ret != 0);
  #line 2332 
  return (void *)0;
}

#line 2337  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/broadcom/tg3.ko/concurrency safety/emg/0/environment_model.c"
int main(void)
{
  #line 2339 
  ldv_initialize();
  #line 2341 
  emg_entry_point_insmod((void *)0);
  #line 2343 
  return 0;
}

