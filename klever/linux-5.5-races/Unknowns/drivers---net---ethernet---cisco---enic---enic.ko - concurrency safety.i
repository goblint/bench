/* Generated by Frama-C */
#line 106  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/compiler_types.h"
typedef signed char __s8;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef unsigned char __u8;
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef short __s16;
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef unsigned short __u16;
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef int __s32;
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef unsigned int __u32;
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef long long __s64;
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef unsigned long long __u64;
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/int-ll64.h"
typedef __u8 u8;
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/int-ll64.h"
typedef __s16 s16;
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/int-ll64.h"
typedef __u16 u16;
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/int-ll64.h"
typedef __s32 s32;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/int-ll64.h"
typedef __u32 u32;
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/int-ll64.h"
typedef __s64 s64;
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/int-ll64.h"
typedef __u64 u64;
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/uapi/asm/posix_types_64.h"
typedef long __kernel_long_t;
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef unsigned long __kernel_ulong_t;
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef int __kernel_pid_t;
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef unsigned int __kernel_uid32_t;
#line 50  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef unsigned int __kernel_gid32_t;
#line 51  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef __kernel_ulong_t __kernel_size_t;
#line 73  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef __kernel_long_t __kernel_ssize_t;
#line 88  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef long long __kernel_loff_t;
#line 91  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef long long __kernel_time64_t;
#line 92  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef __kernel_long_t __kernel_clock_t;
#line 93  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef int __kernel_timer_t;
#line 94  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef int __kernel_clockid_t;
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef __u16 __be16;
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef __u32 __be32;
#line 37  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef __u32 __wsum;
#line 38  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef unsigned int __poll_t;
#line 53  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef u32 __kernel_dev_t;
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_dev_t dev_t;
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef unsigned short umode_t;
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_pid_t pid_t;
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_clockid_t clockid_t;
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef _Bool bool;
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_uid32_t uid_t;
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_gid32_t gid_t;
#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_loff_t loff_t;
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_size_t size_t;
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_ssize_t ssize_t;
#line 103  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef s32 int32_t;
#line 104  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef u8 uint8_t;
#line 109  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef u32 uint32_t;
#line 110  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef u64 uint64_t;
#line 115  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef u64 sector_t;
#line 131  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef u64 blkcnt_t;
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef u64 dma_addr_t;
#line 149  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef unsigned int gfp_t;
#line 155  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef unsigned int fmode_t;
#line 156  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef u64 phys_addr_t;
#line 159  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef phys_addr_t resource_size_t;
#line 170  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
struct __anonstruct_atomic_t_6 {
   int counter ;
};
#line 170  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef struct __anonstruct_atomic_t_6 atomic_t;
#line 174  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
struct __anonstruct_atomic64_t_7 {
   s64 counter ;
};
#line 174  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef struct __anonstruct_atomic64_t_7 atomic64_t;
#line 181  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
struct list_head {
   struct list_head *next ;
   struct list_head *prev ;
};
#line 185 
struct hlist_node;
#line 185  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
struct hlist_head {
   struct hlist_node *first ;
};
#line 189  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
struct hlist_node {
   struct hlist_node *next ;
   struct hlist_node **pprev ;
};
#line 219  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
struct callback_head {
   struct callback_head *next ;
   void (*func)(struct callback_head *) ;
} __attribute__((__aligned__(8)));
#line 14  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cisco/enic/enic.ko/concurrency safety/0/concurrency safety/weaver/vnic_wq.i.aux"
struct task_struct;
#line 139  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/init.h"
struct file_system_type;
#line 83  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/printk.h"
struct ctl_table;
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dynamic_debug.h"
struct device;
#line 65 
struct net_device;
#line 476  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/printk.h"
struct file_operations;
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/div64.h"
struct completion;
#line 88 
struct pt_regs;
#line 188  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/math64.h"
typedef __s64 time64_t;
#line 7  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/time_types.h"
struct __kernel_timespec {
   __kernel_time64_t tv_sec ;
   long long tv_nsec ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/time64.h"
struct timespec64 {
   time64_t tv_sec ;
   long tv_nsec ;
};
#line 165 
struct old_timespec32;
#line 167 
enum timespec_type {
    TT_NONE = 0,
    TT_NATIVE = 1,
    TT_COMPAT = 2
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/restart_block.h"
struct __anonstruct_futex_27 {
   u32 *uaddr ;
   u32 val ;
   u32 flags ;
   u32 bitset ;
   u64 time ;
   u32 *uaddr2 ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/restart_block.h"
union __anonunion_29 {
   struct __kernel_timespec *rmtp ;
   struct old_timespec32 *compat_rmtp ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/restart_block.h"
struct __anonstruct_nanosleep_28 {
   clockid_t clockid ;
   enum timespec_type type ;
   union __anonunion_29 __anonCompField___anonstruct_nanosleep_28_5 ;
   u64 expires ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/restart_block.h"
struct __anonstruct_poll_30 {
   struct pollfd *ufds ;
   int nfds ;
   int has_timeout ;
   unsigned long tv_sec ;
   unsigned long tv_nsec ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/restart_block.h"
union __anonunion_26 {
   struct __anonstruct_futex_27 futex ;
   struct __anonstruct_nanosleep_28 nanosleep ;
   struct __anonstruct_poll_30 poll ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/restart_block.h"
struct restart_block {
   long (*fn)(struct restart_block *) ;
   union __anonunion_26 __anonCompField_restart_block_6 ;
};
#line 58  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/page_64.h"
struct page;
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/getorder.h"
struct mm_struct;
#line 49 
struct io_bitmap;
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/ptrace.h"
struct pt_regs {
   unsigned long r15 ;
   unsigned long r14 ;
   unsigned long r13 ;
   unsigned long r12 ;
   unsigned long bp ;
   unsigned long bx ;
   unsigned long r11 ;
   unsigned long r10 ;
   unsigned long r9 ;
   unsigned long r8 ;
   unsigned long ax ;
   unsigned long cx ;
   unsigned long dx ;
   unsigned long si ;
   unsigned long di ;
   unsigned long orig_ax ;
   unsigned long ip ;
   unsigned long cs ;
   unsigned long flags ;
   unsigned long sp ;
   unsigned long ss ;
};
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/desc_defs.h"
struct desc_struct {
   u16 limit0 ;
   u16 base0 ;
   u16 base1 : 8 ;
   u16 type : 4 ;
   u16 s : 1 ;
   u16 dpl : 2 ;
   u16 p : 1 ;
   u16 limit1 : 4 ;
   u16 avl : 1 ;
   u16 l : 1 ;
   u16 d : 1 ;
   u16 g : 1 ;
   u16 base2 : 8 ;
} __attribute__((__packed__));
#line 119  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/desc_defs.h"
typedef unsigned long pteval_t;
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_64_types.h"
typedef unsigned long pmdval_t;
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_64_types.h"
typedef unsigned long pudval_t;
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_64_types.h"
typedef unsigned long pgdval_t;
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_64_types.h"
typedef unsigned long pgprotval_t;
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_64_types.h"
struct __anonstruct_pte_t_53 {
   pteval_t pte ;
};
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_64_types.h"
typedef struct __anonstruct_pte_t_53 pte_t;
#line 265  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
struct pgprot {
   pgprotval_t pgprot ;
};
#line 267  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
typedef struct pgprot pgprot_t;
#line 266  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
struct __anonstruct_pgd_t_54 {
   pgdval_t pgd ;
};
#line 266  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
typedef struct __anonstruct_pgd_t_54 pgd_t;
#line 319  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
struct __anonstruct_pud_t_56 {
   pudval_t pud ;
};
#line 319  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
typedef struct __anonstruct_pud_t_56 pud_t;
#line 345  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
struct __anonstruct_pmd_t_57 {
   pmdval_t pmd ;
};
#line 345  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
typedef struct __anonstruct_pmd_t_57 pmd_t;
#line 505  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
typedef struct page *pgtable_t;
#line 519 
struct file;
#line 530 
struct seq_file;
#line 360  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/nospec-branch.h"
struct thread_struct;
#line 362 
struct cpumask;
#line 365 
struct vm_area_struct;
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qspinlock_types.h"
struct __anonstruct_59 {
   u8 locked ;
   u8 pending ;
};
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qspinlock_types.h"
struct __anonstruct_60 {
   u16 locked_pending ;
   u16 tail ;
};
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qspinlock_types.h"
union __anonunion_58 {
   atomic_t val ;
   struct __anonstruct_59 __anonCompField___anonunion_58_7 ;
   struct __anonstruct_60 __anonCompField___anonunion_58_8 ;
};
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qspinlock_types.h"
struct qspinlock {
   union __anonunion_58 __anonCompField_qspinlock_9 ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qspinlock_types.h"
typedef struct qspinlock arch_spinlock_t;
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qrwlock_types.h"
struct __anonstruct_62 {
   u8 wlocked ;
   u8 __lstate[3U] ;
};
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qrwlock_types.h"
union __anonunion_61 {
   atomic_t cnts ;
   struct __anonstruct_62 __anonCompField___anonunion_61_10 ;
};
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qrwlock_types.h"
struct qrwlock {
   union __anonunion_61 __anonCompField_qrwlock_11 ;
   arch_spinlock_t wait_lock ;
};
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qrwlock_types.h"
typedef struct qrwlock arch_rwlock_t;
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/math_emu.h"
struct math_emu_info {
   long ___orig_eip ;
   struct pt_regs *regs ;
};
#line 2288  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/atomic-fallback.h"
typedef atomic64_t atomic_long_t;
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cpumask.h"
struct cpumask {
   unsigned long bits[128U] ;
};
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cpumask.h"
typedef struct cpumask cpumask_t;
#line 690  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cpumask.h"
typedef struct cpumask *cpumask_var_t;
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct fregs_state {
   u32 cwd ;
   u32 swd ;
   u32 twd ;
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
   u32 st_space[20U] ;
   u32 status ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct __anonstruct_90 {
   u64 rip ;
   u64 rdp ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct __anonstruct_91 {
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
union __anonunion_89 {
   struct __anonstruct_90 __anonCompField___anonunion_89_17 ;
   struct __anonstruct_91 __anonCompField___anonunion_89_18 ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
union __anonunion_92 {
   u32 padding1[12U] ;
   u32 sw_reserved[12U] ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct fxregs_state {
   u16 cwd ;
   u16 swd ;
   u16 twd ;
   u16 fop ;
   union __anonunion_89 __anonCompField_fxregs_state_19 ;
   u32 mxcsr ;
   u32 mxcsr_mask ;
   u32 st_space[32U] ;
   u32 xmm_space[64U] ;
   u32 padding[12U] ;
   union __anonunion_92 __anonCompField_fxregs_state_20 ;
} __attribute__((__aligned__(16)));
#line 79  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct swregs_state {
   u32 cwd ;
   u32 swd ;
   u32 twd ;
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
   u32 st_space[20U] ;
   u8 ftop ;
   u8 changed ;
   u8 lookahead ;
   u8 no_update ;
   u8 rm ;
   u8 alimit ;
   struct math_emu_info *info ;
   u32 entry_eip ;
};
#line 232  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct xstate_header {
   u64 xfeatures ;
   u64 xcomp_bv ;
   u64 reserved[6U] ;
} __attribute__((__packed__));
#line 253  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct xregs_state {
   struct fxregs_state i387 ;
   struct xstate_header header ;
   u8 extended_state_area[0U] ;
} __attribute__((__packed__, __aligned__(64)));
#line 268  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
union fpregs_state {
   struct fregs_state fsave ;
   struct fxregs_state fxsave ;
   struct swregs_state soft ;
   struct xregs_state xsave ;
   u8 __padding[4096U] ;
};
#line 281  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct fpu {
   unsigned int last_cpu ;
   unsigned long avx512_timestamp ;
   union fpregs_state state ;
};
#line 180  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/processor.h"
struct seq_operations;
#line 478 
struct perf_event;
#line 479  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/processor.h"
struct __anonstruct_mm_segment_t_95 {
   unsigned long seg ;
};
#line 479  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/processor.h"
typedef struct __anonstruct_mm_segment_t_95 mm_segment_t;
#line 485  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/processor.h"
struct thread_struct {
   struct desc_struct tls_array[3U] ;
   unsigned long sp ;
   unsigned short es ;
   unsigned short ds ;
   unsigned short fsindex ;
   unsigned short gsindex ;
   unsigned long fsbase ;
   unsigned long gsbase ;
   struct perf_event *ptrace_bps[4U] ;
   unsigned long debugreg6 ;
   unsigned long ptrace_dr7 ;
   unsigned long cr2 ;
   unsigned long trap_nr ;
   unsigned long error_code ;
   struct io_bitmap *io_bitmap ;
   unsigned long iopl_emul ;
   mm_segment_t addr_limit ;
   unsigned int sig_on_uaccess_err : 1 ;
   unsigned int uaccess_err : 1 ;
   struct fpu fpu ;
};
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/thread_info.h"
struct thread_info {
   unsigned long flags ;
   u32 status ;
};
#line 35  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bottom_half.h"
struct lockdep_map;
#line 55  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockdep.h"
struct lockdep_subclass_key {
   char __one_byte ;
} __attribute__((__packed__));
#line 60  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockdep.h"
union __anonunion_96 {
   struct hlist_node hash_entry ;
   struct lockdep_subclass_key subkeys[8U] ;
};
#line 60  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockdep.h"
struct lock_class_key {
   union __anonunion_96 __anonCompField_lock_class_key_23 ;
};
#line 68 
struct lock_trace;
#line 77  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockdep.h"
struct lock_class {
   struct hlist_node hash_entry ;
   struct list_head lock_entry ;
   struct list_head locks_after ;
   struct list_head locks_before ;
   struct lockdep_subclass_key *key ;
   unsigned int subclass ;
   unsigned int dep_gen_id ;
   unsigned long usage_mask ;
   struct lock_trace *usage_traces[9U] ;
   int name_version ;
   char *name ;
   unsigned long contention_point[4U] ;
   unsigned long contending_point[4U] ;
};
#line 157  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockdep.h"
struct lockdep_map {
   struct lock_class_key *key ;
   struct lock_class *class_cache[2U] ;
   char *name ;
   int cpu ;
   unsigned long ip ;
};
#line 226  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockdep.h"
struct held_lock {
   u64 prev_chain_key ;
   unsigned long acquire_ip ;
   struct lockdep_map *instance ;
   struct lockdep_map *nest_lock ;
   u64 waittime_stamp ;
   u64 holdtime_stamp ;
   unsigned int class_idx : 13 ;
   unsigned int irq_context : 2 ;
   unsigned int trylock : 1 ;
   unsigned int read : 2 ;
   unsigned int check : 1 ;
   unsigned int hardirqs_off : 1 ;
   unsigned int references : 12 ;
   unsigned int pin_count ;
};
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
struct raw_spinlock {
   arch_spinlock_t raw_lock ;
   unsigned int magic ;
   unsigned int owner_cpu ;
   void *owner ;
   struct lockdep_map dep_map ;
};
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
typedef struct raw_spinlock raw_spinlock_t;
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
struct __anonstruct_98 {
   u8 __padding[24U] ;
   struct lockdep_map dep_map ;
};
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
union __anonunion_97 {
   struct raw_spinlock rlock ;
   struct __anonstruct_98 __anonCompField___anonunion_97_24 ;
};
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
struct spinlock {
   union __anonunion_97 __anonCompField_spinlock_25 ;
};
#line 73  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
typedef struct spinlock spinlock_t;
#line 74  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
struct __anonstruct_rwlock_t_99 {
   arch_rwlock_t raw_lock ;
   unsigned int magic ;
   unsigned int owner_cpu ;
   void *owner ;
   struct lockdep_map dep_map ;
};
#line 74  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
typedef struct __anonstruct_rwlock_t_99 rwlock_t;
#line 57  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
struct mutex;
#line 27  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
struct kmem_cache;
#line 36  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/uuid.h"
struct __anonstruct_uuid_t_105 {
   __u8 b[16U] ;
};
#line 36  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/uuid.h"
typedef struct __anonstruct_uuid_t_105 uuid_t;
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uuid.h"
typedef unsigned long kernel_ulong_t;
#line 38  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mod_devicetable.h"
struct pci_device_id {
   __u32 vendor ;
   __u32 device ;
   __u32 subvendor ;
   __u32 subdevice ;
   __u32 class ;
   __u32 class_mask ;
   kernel_ulong_t driver_data ;
};
#line 210  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mod_devicetable.h"
struct acpi_device_id {
   __u8 id[9U] ;
   kernel_ulong_t driver_data ;
   __u32 cls ;
   __u32 cls_msk ;
};
#line 260  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mod_devicetable.h"
struct of_device_id {
   char name[32U] ;
   char type[32U] ;
   char compatible[128U] ;
   void *data ;
};
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ioport.h"
struct resource {
   resource_size_t start ;
   resource_size_t end ;
   char *name ;
   unsigned long flags ;
   unsigned long desc ;
   struct resource *parent ;
   struct resource *sibling ;
   struct resource *child ;
};
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/osq_lock.h"
struct optimistic_spin_queue {
   atomic_t tail ;
};
#line 40 
struct ww_acquire_ctx;
#line 53  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mutex.h"
struct mutex {
   atomic_long_t owner ;
   spinlock_t wait_lock ;
   struct optimistic_spin_queue osq ;
   struct list_head wait_list ;
   void *magic ;
   struct lockdep_map dep_map ;
};
#line 72  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mutex.h"
struct mutex_waiter {
   struct list_head list ;
   struct task_struct *task ;
   struct ww_acquire_ctx *ww_ctx ;
   void *magic ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/wait.h"
struct wait_queue_head {
   spinlock_t lock ;
   struct list_head head ;
};
#line 38  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/wait.h"
typedef struct wait_queue_head wait_queue_head_t;
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seqlock.h"
struct seqcount {
   unsigned int sequence ;
   struct lockdep_map dep_map ;
};
#line 53  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seqlock.h"
typedef struct seqcount seqcount_t;
#line 403  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seqlock.h"
struct __anonstruct_seqlock_t_117 {
   struct seqcount seqcount ;
   spinlock_t lock ;
};
#line 403  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seqlock.h"
typedef struct __anonstruct_seqlock_t_117 seqlock_t;
#line 601  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seqlock.h"
struct __anonstruct_nodemask_t_118 {
   unsigned long bits[16U] ;
};
#line 601  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seqlock.h"
typedef struct __anonstruct_nodemask_t_118 nodemask_t;
#line 7  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/tlbbatch.h"
struct arch_tlbflush_unmap_batch {
   struct cpumask cpumask ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types_task.h"
struct vmacache {
   u64 seqnum ;
   struct vm_area_struct *vmas[4U] ;
};
#line 54  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types_task.h"
struct task_rss_stat {
   int events ;
   int count[4U] ;
};
#line 60  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types_task.h"
struct mm_rss_stat {
   atomic_long_t count[4U] ;
};
#line 64  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types_task.h"
struct page_frag {
   struct page *page ;
   __u32 offset ;
   __u32 size ;
};
#line 76  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types_task.h"
struct tlbflush_unmap_batch {
   struct arch_tlbflush_unmap_batch arch ;
   bool flush_required ;
   bool writable ;
};
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rbtree.h"
struct rb_node {
   unsigned long __rb_parent_color ;
   struct rb_node *rb_right ;
   struct rb_node *rb_left ;
} __attribute__((__aligned__(8)));
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rbtree.h"
struct rb_root {
   struct rb_node *rb_node ;
};
#line 125  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rbtree.h"
struct rb_root_cached {
   struct rb_root rb_root ;
   struct rb_node *rb_leftmost ;
};
#line 35  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rwsem.h"
struct rw_semaphore {
   atomic_long_t count ;
   atomic_long_t owner ;
   struct optimistic_spin_queue osq ;
   raw_spinlock_t wait_lock ;
   struct list_head wait_list ;
   void *magic ;
   struct lockdep_map dep_map ;
};
#line 26  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/completion.h"
struct completion {
   unsigned int done ;
   wait_queue_head_t wait ;
};
#line 120 
struct inode;
#line 121 
struct notifier_block;
#line 161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timex.h"
typedef s32 old_time32_t;
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/time32.h"
struct old_timespec32 {
   old_time32_t tv_sec ;
   s32 tv_nsec ;
};
#line 461  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jiffies.h"
typedef s64 ktime_t;
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
struct timer_list {
   struct hlist_node entry ;
   unsigned long expires ;
   void (*function)(struct timer_list *) ;
   u32 flags ;
   struct lockdep_map lockdep_map ;
};
#line 196 
struct hrtimer;
#line 197 
enum hrtimer_restart;
#line 221 
struct workqueue_struct;
#line 222 
struct work_struct;
#line 102  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/workqueue.h"
struct work_struct {
   atomic_long_t data ;
   struct list_head entry ;
   void (*func)(struct work_struct *) ;
   struct lockdep_map lockdep_map ;
};
#line 115  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/workqueue.h"
struct delayed_work {
   struct work_struct work ;
   struct timer_list timer ;
   struct workqueue_struct *wq ;
   int cpu ;
};
#line 124  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/workqueue.h"
struct rcu_work {
   struct work_struct work ;
   struct callback_head rcu ;
   struct workqueue_struct *wq ;
};
#line 54  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/notifier.h"
struct notifier_block {
   int (*notifier_call)(struct notifier_block *, unsigned long , void *) ;
   struct notifier_block *next ;
   int priority ;
};
#line 70  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/notifier.h"
struct raw_notifier_head {
   struct notifier_block *head ;
};
#line 50  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/uprobes.h"
struct arch_uprobe_task {
   unsigned long saved_scratch_register ;
   unsigned int saved_trap_nr ;
   unsigned int saved_tf ;
};
#line 57 
enum uprobe_task_state {
    UTASK_RUNNING = 0,
    UTASK_SSTEP = 1,
    UTASK_SSTEP_ACK = 2,
    UTASK_SSTEP_TRAPPED = 3
};
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
struct __anonstruct_129 {
   struct arch_uprobe_task autask ;
   unsigned long vaddr ;
};
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
struct __anonstruct_130 {
   struct callback_head dup_xol_work ;
   unsigned long dup_xol_addr ;
};
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
union __anonunion_128 {
   struct __anonstruct_129 __anonCompField___anonunion_128_28 ;
   struct __anonstruct_130 __anonCompField___anonunion_128_29 ;
};
#line 61 
struct uprobe;
#line 61 
struct return_instance;
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
struct uprobe_task {
   enum uprobe_task_state state ;
   union __anonunion_128 __anonCompField_uprobe_task_30 ;
   struct uprobe *active_uprobe ;
   unsigned long xol_vaddr ;
   struct return_instance *return_instances ;
   unsigned int depth ;
};
#line 83  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
struct return_instance {
   struct uprobe *uprobe ;
   unsigned long func ;
   unsigned long stack ;
   unsigned long orig_ret_vaddr ;
   bool chained ;
   struct return_instance *next ;
};
#line 98 
struct xol_area;
#line 101  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
struct uprobes_state {
   struct xol_area *xol_area ;
};
#line 140 
struct ldt_struct;
#line 140  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
struct __anonstruct_mm_context_t_131 {
   u64 ctx_id ;
   atomic64_t tlb_gen ;
   struct rw_semaphore ldt_usr_sem ;
   struct ldt_struct *ldt ;
   unsigned short ia32_compat ;
   struct mutex lock ;
   void *vdso ;
   struct vdso_image *vdso_image ;
   atomic_t perf_rdpmc_allowed ;
   u16 pkey_allocation_map ;
   s16 execute_only_pkey ;
   void *bd_addr ;
};
#line 140  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
typedef struct __anonstruct_mm_context_t_131 mm_context_t;
#line 66  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct address_space;
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct __anonstruct_133 {
   struct list_head lru ;
   struct address_space *mapping ;
   unsigned long index ;
   unsigned long private ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct __anonstruct_134 {
   dma_addr_t dma_addr ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct __anonstruct_137 {
   struct page *next ;
   int pages ;
   int pobjects ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
union __anonunion_136 {
   struct list_head slab_list ;
   struct __anonstruct_137 __anonCompField___anonunion_136_33 ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct __anonstruct_139 {
   unsigned int inuse : 16 ;
   unsigned int objects : 15 ;
   unsigned int frozen : 1 ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
union __anonunion_138 {
   void *s_mem ;
   unsigned long counters ;
   struct __anonstruct_139 __anonCompField___anonunion_138_35 ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct __anonstruct_135 {
   union __anonunion_136 __anonCompField___anonstruct_135_34 ;
   struct kmem_cache *slab_cache ;
   void *freelist ;
   union __anonunion_138 __anonCompField___anonstruct_135_36 ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct __anonstruct_140 {
   unsigned long compound_head ;
   unsigned char compound_dtor ;
   unsigned char compound_order ;
   atomic_t compound_mapcount ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct __anonstruct_141 {
   unsigned long _compound_pad_1 ;
   unsigned long _compound_pad_2 ;
   struct list_head deferred_list ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
union __anonunion_143 {
   struct mm_struct *pt_mm ;
   atomic_t pt_frag_refcount ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct __anonstruct_142 {
   unsigned long _pt_pad_1 ;
   pgtable_t pmd_huge_pte ;
   unsigned long _pt_pad_2 ;
   union __anonunion_143 __anonCompField___anonstruct_142_40 ;
   spinlock_t *ptl ;
};
#line 68 
struct dev_pagemap;
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct __anonstruct_144 {
   struct dev_pagemap *pgmap ;
   void *zone_device_data ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
union __anonunion_132 {
   struct __anonstruct_133 __anonCompField___anonunion_132_31 ;
   struct __anonstruct_134 __anonCompField___anonunion_132_32 ;
   struct __anonstruct_135 __anonCompField___anonunion_132_37 ;
   struct __anonstruct_140 __anonCompField___anonunion_132_38 ;
   struct __anonstruct_141 __anonCompField___anonunion_132_39 ;
   struct __anonstruct_142 __anonCompField___anonunion_132_41 ;
   struct __anonstruct_144 __anonCompField___anonunion_132_42 ;
   struct callback_head callback_head ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
union __anonunion_145 {
   atomic_t _mapcount ;
   unsigned int page_type ;
   unsigned int active ;
   int units ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct page {
   unsigned long flags ;
   union __anonunion_132 __anonCompField_page_43 ;
   union __anonunion_145 __anonCompField_page_44 ;
   atomic_t _refcount ;
   struct mem_cgroup *mem_cgroup ;
} __attribute__((__aligned__(16)));
#line 278  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct userfaultfd_ctx;
#line 278  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct vm_userfaultfd_ctx {
   struct userfaultfd_ctx *ctx ;
};
#line 292  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct __anonstruct_shared_146 {
   struct rb_node rb ;
   unsigned long rb_subtree_last ;
};
#line 292 
struct anon_vma;
#line 292 
struct vm_operations_struct;
#line 292 
struct mempolicy;
#line 292  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct vm_area_struct {
   unsigned long vm_start ;
   unsigned long vm_end ;
   struct vm_area_struct *vm_next ;
   struct vm_area_struct *vm_prev ;
   struct rb_node vm_rb ;
   unsigned long rb_subtree_gap ;
   struct mm_struct *vm_mm ;
   pgprot_t vm_page_prot ;
   unsigned long vm_flags ;
   struct __anonstruct_shared_146 shared ;
   struct list_head anon_vma_chain ;
   struct anon_vma *anon_vma ;
   struct vm_operations_struct *vm_ops ;
   unsigned long vm_pgoff ;
   struct file *vm_file ;
   void *vm_private_data ;
   atomic_long_t swap_readahead_info ;
   struct mempolicy *vm_policy ;
   struct vm_userfaultfd_ctx vm_userfaultfd_ctx ;
} __attribute__((__designated_init__));
#line 358  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct core_thread {
   struct task_struct *task ;
   struct core_thread *next ;
};
#line 363  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct core_state {
   atomic_t nr_threads ;
   struct core_thread dumper ;
   struct completion startup ;
};
#line 368 
struct kioctx_table;
#line 370 
struct linux_binfmt;
#line 370 
struct user_namespace;
#line 370 
struct mmu_notifier_mm;
#line 370  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct __anonstruct_147 {
   struct vm_area_struct *mmap ;
   struct rb_root mm_rb ;
   u64 vmacache_seqnum ;
   unsigned long (*get_unmapped_area)(struct file *, unsigned long , unsigned long , unsigned long , unsigned long ) ;
   unsigned long mmap_base ;
   unsigned long mmap_legacy_base ;
   unsigned long mmap_compat_base ;
   unsigned long mmap_compat_legacy_base ;
   unsigned long task_size ;
   unsigned long highest_vm_end ;
   pgd_t *pgd ;
   atomic_t membarrier_state ;
   atomic_t mm_users ;
   atomic_t mm_count ;
   atomic_long_t pgtables_bytes ;
   int map_count ;
   spinlock_t page_table_lock ;
   struct rw_semaphore mmap_sem ;
   struct list_head mmlist ;
   unsigned long hiwater_rss ;
   unsigned long hiwater_vm ;
   unsigned long total_vm ;
   unsigned long locked_vm ;
   atomic64_t pinned_vm ;
   unsigned long data_vm ;
   unsigned long exec_vm ;
   unsigned long stack_vm ;
   unsigned long def_flags ;
   spinlock_t arg_lock ;
   unsigned long start_code ;
   unsigned long end_code ;
   unsigned long start_data ;
   unsigned long end_data ;
   unsigned long start_brk ;
   unsigned long brk ;
   unsigned long start_stack ;
   unsigned long arg_start ;
   unsigned long arg_end ;
   unsigned long env_start ;
   unsigned long env_end ;
   unsigned long saved_auxv[46U] ;
   struct mm_rss_stat rss_stat ;
   struct linux_binfmt *binfmt ;
   mm_context_t context ;
   unsigned long flags ;
   struct core_state *core_state ;
   spinlock_t ioctx_lock ;
   struct kioctx_table *ioctx_table ;
   struct task_struct *owner ;
   struct user_namespace *user_ns ;
   struct file *exe_file ;
   struct mmu_notifier_mm *mmu_notifier_mm ;
   unsigned long numa_next_scan ;
   unsigned long numa_scan_offset ;
   int numa_scan_seq ;
   atomic_t tlb_flush_pending ;
   bool tlb_flush_batched ;
   struct uprobes_state uprobes_state ;
   atomic_long_t hugetlb_usage ;
   struct work_struct async_put_work ;
} __attribute__((__designated_init__));
#line 370  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct mm_struct {
   struct __anonstruct_147 __anonCompField_mm_struct_45 ;
   unsigned long cpu_bitmap[] ;
};
#line 642 
struct vm_fault;
#line 643  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
typedef unsigned int vm_fault_t;
#line 316  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
typedef unsigned int isolate_mode_t;
#line 824 
struct vmem_altmap;
#line 282  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/x86_init.h"
struct pci_dev;
#line 159  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/topology.h"
struct pci_bus;
#line 440  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/io.h"
struct fwnode_operations;
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fwnode.h"
struct fwnode_handle {
   struct fwnode_handle *secondary ;
   struct fwnode_operations *ops ;
   struct device *dev ;
};
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fwnode.h"
struct fwnode_endpoint {
   unsigned int port ;
   unsigned int id ;
   struct fwnode_handle *local_fwnode ;
};
#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fwnode.h"
struct fwnode_reference_args {
   struct fwnode_handle *fwnode ;
   unsigned int nargs ;
   u64 args[8U] ;
};
#line 110  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fwnode.h"
struct fwnode_operations {
   struct fwnode_handle *(*get)(struct fwnode_handle *) ;
   void (*put)(struct fwnode_handle *) ;
   bool (*device_is_available)(struct fwnode_handle *) ;
   void *(*device_get_match_data)(struct fwnode_handle *, struct device *) ;
   bool (*property_present)(struct fwnode_handle *, char *) ;
   int (*property_read_int_array)(struct fwnode_handle *, char *, unsigned int , void *, size_t ) ;
   int (*property_read_string_array)(struct fwnode_handle *, char *, char **, size_t ) ;
   char *(*get_name)(struct fwnode_handle *) ;
   char *(*get_name_prefix)(struct fwnode_handle *) ;
   struct fwnode_handle *(*get_parent)(struct fwnode_handle *) ;
   struct fwnode_handle *(*get_next_child_node)(struct fwnode_handle *, struct fwnode_handle *) ;
   struct fwnode_handle *(*get_named_child_node)(struct fwnode_handle *, char *) ;
   int (*get_reference_args)(struct fwnode_handle *, char *, char *, unsigned int , unsigned int , struct fwnode_reference_args *) ;
   struct fwnode_handle *(*graph_get_next_endpoint)(struct fwnode_handle *, struct fwnode_handle *) ;
   struct fwnode_handle *(*graph_get_remote_endpoint)(struct fwnode_handle *) ;
   struct fwnode_handle *(*graph_get_port_parent)(struct fwnode_handle *) ;
   int (*graph_parse_endpoint)(struct fwnode_handle *, struct fwnode_endpoint *) ;
   int (*add_links)(struct fwnode_handle *, struct device *) ;
};
#line 54  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/llist.h"
struct llist_node;
#line 58  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/llist.h"
struct llist_node {
   struct llist_node *next ;
};
#line 53  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/vmalloc.h"
struct vm_struct {
   struct vm_struct *next ;
   void *addr ;
   unsigned long size ;
   unsigned long flags ;
   struct page **pages ;
   unsigned int nr_pages ;
   phys_addr_t phys_addr ;
   void *caller ;
};
#line 292  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/xarray.h"
struct xarray {
   spinlock_t xa_lock ;
   gfp_t xa_flags ;
   void *xa_head ;
};
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/idr.h"
struct idr {
   struct xarray idr_rt ;
   unsigned int idr_base ;
   unsigned int idr_next ;
};
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uidgid.h"
struct __anonstruct_kuid_t_251 {
   uid_t val ;
};
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uidgid.h"
typedef struct __anonstruct_kuid_t_251 kuid_t;
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uidgid.h"
struct __anonstruct_kgid_t_252 {
   gid_t val ;
};
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uidgid.h"
typedef struct __anonstruct_kgid_t_252 kgid_t;
#line 140 
struct dentry;
#line 141 
struct iattr;
#line 142 
struct super_block;
#line 144 
struct fs_context;
#line 146 
struct kernfs_open_node;
#line 147 
struct kernfs_iattrs;
#line 84  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_root;
#line 84  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_elem_dir {
   unsigned long subdirs ;
   struct rb_root children ;
   struct kernfs_root *root ;
};
#line 96 
struct kernfs_node;
#line 96  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_elem_symlink {
   struct kernfs_node *target_kn ;
};
#line 100 
struct kernfs_ops;
#line 100  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_elem_attr {
   struct kernfs_ops *ops ;
   struct kernfs_open_node *open ;
   loff_t size ;
   struct kernfs_node *notify_next ;
};
#line 116  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
union __anonunion_253 {
   struct kernfs_elem_dir dir ;
   struct kernfs_elem_symlink symlink ;
   struct kernfs_elem_attr attr ;
};
#line 116  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_node {
   atomic_t count ;
   atomic_t active ;
   struct lockdep_map dep_map ;
   struct kernfs_node *parent ;
   char *name ;
   struct rb_node rb ;
   void *ns ;
   unsigned int hash ;
   union __anonunion_253 __anonCompField_kernfs_node_49 ;
   void *priv ;
   u64 id ;
   unsigned short flags ;
   umode_t mode ;
   struct kernfs_iattrs *iattr ;
};
#line 161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_syscall_ops {
   int (*show_options)(struct seq_file *, struct kernfs_root *) ;
   int (*mkdir)(struct kernfs_node *, char *, umode_t ) ;
   int (*rmdir)(struct kernfs_node *) ;
   int (*rename)(struct kernfs_node *, struct kernfs_node *, char *) ;
   int (*show_path)(struct seq_file *, struct kernfs_node *, struct kernfs_root *) ;
};
#line 173  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_root {
   struct kernfs_node *kn ;
   unsigned int flags ;
   struct idr ino_idr ;
   u32 last_id_lowbits ;
   u32 id_highbits ;
   struct kernfs_syscall_ops *syscall_ops ;
   struct list_head supers ;
   wait_queue_head_t deactivate_waitq ;
};
#line 190  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_open_file {
   struct kernfs_node *kn ;
   struct file *file ;
   struct seq_file *seq_file ;
   void *priv ;
   struct mutex mutex ;
   struct mutex prealloc_mutex ;
   int event ;
   struct list_head list ;
   char *prealloc_buf ;
   size_t atomic_write_len ;
   bool mmapped : 1 ;
   bool released : 1 ;
   struct vm_operations_struct *vm_ops ;
};
#line 210  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_ops {
   int (*open)(struct kernfs_open_file *) ;
   void (*release)(struct kernfs_open_file *) ;
   int (*seq_show)(struct seq_file *, void *) ;
   void *(*seq_start)(struct seq_file *, loff_t *) ;
   void *(*seq_next)(struct seq_file *, void *, loff_t *) ;
   void (*seq_stop)(struct seq_file *, void *) ;
   ssize_t (*read)(struct kernfs_open_file *, char *, size_t , loff_t ) ;
   size_t atomic_write_len ;
   bool prealloc ;
   ssize_t (*write)(struct kernfs_open_file *, char *, size_t , loff_t ) ;
   __poll_t (*poll)(struct kernfs_open_file *, struct poll_table_struct *) ;
   int (*mmap)(struct kernfs_open_file *, struct vm_area_struct *) ;
   struct lock_class_key lockdep_key ;
};
#line 596 
struct kobject;
#line 597 
enum kobj_ns_type {
    KOBJ_NS_TYPE_NONE = 0,
    KOBJ_NS_TYPE_NET = 1,
    KOBJ_NS_TYPES = 2
};
#line 39  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject_ns.h"
struct kobj_ns_type_operations {
   enum kobj_ns_type type ;
   bool (*current_may_mount)(void) ;
   void *(*grab_current_ns)(void) ;
   void *(*netlink_ns)(struct sock *) ;
   void *(*initial_ns)(void) ;
   void (*drop_ns)(void *) ;
};
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/stat.h"
struct kstat {
   u32 result_mask ;
   umode_t mode ;
   unsigned int nlink ;
   uint32_t blksize ;
   u64 attributes ;
   u64 attributes_mask ;
   u64 ino ;
   dev_t dev ;
   dev_t rdev ;
   kuid_t uid ;
   kgid_t gid ;
   loff_t size ;
   struct timespec64 atime ;
   struct timespec64 mtime ;
   struct timespec64 ctime ;
   struct timespec64 btime ;
   u64 blocks ;
};
#line 51 
struct bin_attribute;
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysfs.h"
struct attribute {
   char *name ;
   umode_t mode ;
   bool ignore_lockdep : 1 ;
   struct lock_class_key *key ;
   struct lock_class_key skey ;
};
#line 84  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysfs.h"
struct attribute_group {
   char *name ;
   umode_t (*is_visible)(struct kobject *, struct attribute *, int ) ;
   umode_t (*is_bin_visible)(struct kobject *, struct bin_attribute *, int ) ;
   struct attribute **attrs ;
   struct bin_attribute **bin_attrs ;
};
#line 161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysfs.h"
struct bin_attribute {
   struct attribute attr ;
   size_t size ;
   void *private ;
   ssize_t (*read)(struct file *, struct kobject *, struct bin_attribute *, char *, loff_t , size_t ) ;
   ssize_t (*write)(struct file *, struct kobject *, struct bin_attribute *, char *, loff_t , size_t ) ;
   int (*mmap)(struct file *, struct kobject *, struct bin_attribute *, struct vm_area_struct *) ;
};
#line 223  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysfs.h"
struct sysfs_ops {
   ssize_t (*show)(struct kobject *, struct attribute *, char *) ;
   ssize_t (*store)(struct kobject *, struct attribute *, char *, size_t ) ;
};
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/refcount.h"
struct refcount_struct {
   atomic_t refs ;
};
#line 101  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/refcount.h"
typedef struct refcount_struct refcount_t;
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kref.h"
struct kref {
   refcount_t refcount ;
};
#line 65  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject.h"
struct kset;
#line 65 
struct kobj_type;
#line 65  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject.h"
struct kobject {
   char *name ;
   struct list_head entry ;
   struct kobject *parent ;
   struct kset *kset ;
   struct kobj_type *ktype ;
   struct kernfs_node *sd ;
   struct kref kref ;
   struct delayed_work release ;
   unsigned int state_initialized : 1 ;
   unsigned int state_in_sysfs : 1 ;
   unsigned int state_add_uevent_sent : 1 ;
   unsigned int state_remove_uevent_sent : 1 ;
   unsigned int uevent_suppress : 1 ;
};
#line 139  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject.h"
struct kobj_type {
   void (*release)(struct kobject *) ;
   struct sysfs_ops *sysfs_ops ;
   struct attribute **default_attrs ;
   struct attribute_group **default_groups ;
   struct kobj_ns_type_operations *(*child_ns_type)(struct kobject *) ;
   void *(*namespace)(struct kobject *) ;
   void (*get_ownership)(struct kobject *, kuid_t *, kgid_t *) ;
};
#line 149  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject.h"
struct kobj_uevent_env {
   char *argv[3U] ;
   char *envp[32U] ;
   int envp_idx ;
   char buf[2048U] ;
   int buflen ;
};
#line 157  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject.h"
struct kset_uevent_ops {
   int (*filter)(struct kset *, struct kobject *) ;
   char *(*name)(struct kset *, struct kobject *) ;
   int (*uevent)(struct kset *, struct kobject *, struct kobj_uevent_env *) ;
};
#line 193  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject.h"
struct kset {
   struct list_head list ;
   spinlock_t list_lock ;
   struct kobject kobj ;
   struct kset_uevent_ops *uevent_ops ;
} __attribute__((__designated_init__));
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timerqueue.h"
struct timerqueue_node {
   struct rb_node node ;
   ktime_t expires ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timerqueue.h"
struct timerqueue_head {
   struct rb_root_cached rb_root ;
};
#line 60 
struct hrtimer_clock_base;
#line 61 
struct hrtimer_cpu_base;
#line 80 
enum hrtimer_restart {
    HRTIMER_NORESTART = 0,
    HRTIMER_RESTART = 1
};
#line 117  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/hrtimer.h"
struct hrtimer {
   struct timerqueue_node node ;
   ktime_t _softexpires ;
   enum hrtimer_restart (*function)(struct hrtimer *) ;
   struct hrtimer_clock_base *base ;
   u8 state ;
   u8 is_rel ;
   u8 is_soft ;
   u8 is_hard ;
};
#line 158  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/hrtimer.h"
struct hrtimer_clock_base {
   struct hrtimer_cpu_base *cpu_base ;
   unsigned int index ;
   clockid_t clockid ;
   seqcount_t seq ;
   struct hrtimer *running ;
   struct timerqueue_head active ;
   ktime_t (*get_time)(void) ;
   ktime_t offset ;
} __attribute__((__aligned__(64)));
#line 213  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/hrtimer.h"
struct hrtimer_cpu_base {
   raw_spinlock_t lock ;
   unsigned int cpu ;
   unsigned int active_bases ;
   unsigned int clock_was_set_seq ;
   unsigned int hres_active : 1 ;
   unsigned int in_hrtirq : 1 ;
   unsigned int hang_detected : 1 ;
   unsigned int softirq_activated : 1 ;
   unsigned int nr_events ;
   unsigned short nr_retries ;
   unsigned short nr_hangs ;
   unsigned int max_hang_time ;
   ktime_t expires_next ;
   struct hrtimer *next_timer ;
   ktime_t softirq_expires_next ;
   struct hrtimer *softirq_next_timer ;
   struct hrtimer_clock_base clock_base[8U] ;
} __attribute__((__aligned__(64)));
#line 50  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm.h"
struct pm_message {
   int event ;
};
#line 53  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm.h"
typedef struct pm_message pm_message_t;
#line 278  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm.h"
struct dev_pm_ops {
   int (*prepare)(struct device *) ;
   void (*complete)(struct device *) ;
   int (*suspend)(struct device *) ;
   int (*resume)(struct device *) ;
   int (*freeze)(struct device *) ;
   int (*thaw)(struct device *) ;
   int (*poweroff)(struct device *) ;
   int (*restore)(struct device *) ;
   int (*suspend_late)(struct device *) ;
   int (*resume_early)(struct device *) ;
   int (*freeze_late)(struct device *) ;
   int (*thaw_early)(struct device *) ;
   int (*poweroff_late)(struct device *) ;
   int (*restore_early)(struct device *) ;
   int (*suspend_noirq)(struct device *) ;
   int (*resume_noirq)(struct device *) ;
   int (*freeze_noirq)(struct device *) ;
   int (*thaw_noirq)(struct device *) ;
   int (*poweroff_noirq)(struct device *) ;
   int (*restore_noirq)(struct device *) ;
   int (*runtime_suspend)(struct device *) ;
   int (*runtime_resume)(struct device *) ;
   int (*runtime_idle)(struct device *) ;
};
#line 303 
enum rpm_status {
    RPM_ACTIVE = 0,
    RPM_RESUMING = 1,
    RPM_SUSPENDED = 2,
    RPM_SUSPENDING = 3
};
#line 310 
enum rpm_request {
    RPM_REQ_NONE = 0,
    RPM_REQ_IDLE = 1,
    RPM_REQ_SUSPEND = 2,
    RPM_REQ_AUTOSUSPEND = 3,
    RPM_REQ_RESUME = 4
};
#line 318 
struct wakeup_source;
#line 319 
struct wake_irq;
#line 320 
struct pm_domain_data;
#line 530  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm.h"
struct pm_subsys_data {
   spinlock_t lock ;
   unsigned int refcount ;
   struct list_head clock_list ;
   struct pm_domain_data *domain_data ;
};
#line 573 
struct dev_pm_qos;
#line 573  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm.h"
struct dev_pm_info {
   pm_message_t power_state ;
   unsigned int can_wakeup : 1 ;
   unsigned int async_suspend : 1 ;
   bool in_dpm_list : 1 ;
   bool is_prepared : 1 ;
   bool is_suspended : 1 ;
   bool is_noirq_suspended : 1 ;
   bool is_late_suspended : 1 ;
   bool no_pm : 1 ;
   bool early_init : 1 ;
   bool direct_complete : 1 ;
   u32 driver_flags ;
   spinlock_t lock ;
   struct list_head entry ;
   struct completion completion ;
   struct wakeup_source *wakeup ;
   bool wakeup_path : 1 ;
   bool syscore : 1 ;
   bool no_pm_callbacks : 1 ;
   unsigned int must_resume : 1 ;
   unsigned int may_skip_resume : 1 ;
   struct hrtimer suspend_timer ;
   unsigned long timer_expires ;
   struct work_struct work ;
   wait_queue_head_t wait_queue ;
   struct wake_irq *wakeirq ;
   atomic_t usage_count ;
   atomic_t child_count ;
   unsigned int disable_depth : 3 ;
   unsigned int idle_notification : 1 ;
   unsigned int request_pending : 1 ;
   unsigned int deferred_resume : 1 ;
   unsigned int runtime_auto : 1 ;
   bool ignore_children : 1 ;
   unsigned int no_callbacks : 1 ;
   unsigned int irq_safe : 1 ;
   unsigned int use_autosuspend : 1 ;
   unsigned int timer_autosuspends : 1 ;
   unsigned int memalloc_noio : 1 ;
   unsigned int links_count ;
   enum rpm_request request ;
   enum rpm_status runtime_status ;
   int runtime_error ;
   int autosuspend_delay ;
   u64 last_busy ;
   u64 active_time ;
   u64 suspended_time ;
   u64 accounting_timestamp ;
   struct pm_subsys_data *subsys_data ;
   void (*set_latency_tolerance)(struct device *, s32 ) ;
   struct dev_pm_qos *qos ;
};
#line 650  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm.h"
struct dev_pm_domain {
   struct dev_pm_ops ops ;
   int (*start)(struct device *) ;
   void (*detach)(struct device *, bool ) ;
   int (*activate)(struct device *) ;
   void (*sync)(struct device *) ;
   void (*dismiss)(struct device *) ;
};
#line 628  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rculist.h"
enum pid_type {
    PIDTYPE_PID = 0,
    PIDTYPE_TGID = 1,
    PIDTYPE_PGID = 2,
    PIDTYPE_SID = 3,
    PIDTYPE_MAX = 4
};
#line 54  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pid.h"
struct upid {
   int nr ;
   struct pid_namespace *ns ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pid.h"
struct pid {
   refcount_t count ;
   unsigned int level ;
   struct hlist_head tasks[4U] ;
   wait_queue_head_t wait_pidfd ;
   struct callback_head rcu ;
   struct upid numbers[1U] ;
};
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rhashtable-types.h"
struct rhash_head {
   struct rhash_head *next ;
};
#line 33 
struct rhashtable;
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rhashtable-types.h"
struct rhashtable_compare_arg {
   struct rhashtable *ht ;
   void *key ;
};
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rhashtable-types.h"
struct rhashtable_params {
   u16 nelem_hint ;
   u16 key_len ;
   u16 key_offset ;
   u16 head_offset ;
   unsigned int max_size ;
   u16 min_size ;
   bool automatic_shrinking ;
   u32 (*hashfn)(void *, u32 , u32 ) ;
   u32 (*obj_hashfn)(void *, u32 , u32 ) ;
   int (*obj_cmpfn)(struct rhashtable_compare_arg *, void *) ;
};
#line 81  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rhashtable-types.h"
struct rhashtable {
   struct bucket_table *tbl ;
   unsigned int key_len ;
   unsigned int max_elems ;
   struct rhashtable_params p ;
   bool rhlist ;
   struct work_struct run_work ;
   struct mutex mutex ;
   spinlock_t lock ;
   atomic_t nelems ;
};
#line 67  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/sem.h"
struct sem_undo_list;
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sem.h"
struct sysv_sem {
   struct sem_undo_list *undo_list ;
};
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/shm.h"
struct sysv_shm {
   struct list_head shm_clist ;
};
#line 83  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/plist.h"
struct plist_node {
   int prio ;
   struct list_head prio_list ;
   struct list_head node_list ;
};
#line 40  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/seccomp.h"
struct seccomp_filter;
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seccomp.h"
struct seccomp {
   int mode ;
   struct seccomp_filter *filter ;
};
#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/resource.h"
struct rlimit {
   __kernel_ulong_t rlim_cur ;
   __kernel_ulong_t rlim_max ;
};
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/latencytop.h"
struct latency_record {
   unsigned long backtrace[12U] ;
   unsigned int count ;
   unsigned long time ;
   unsigned long max ;
};
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/types.h"
struct task_cputime {
   u64 stime ;
   u64 utime ;
   unsigned long long sum_exec_runtime ;
};
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/signal.h"
struct __anonstruct_sigset_t_294 {
   unsigned long sig[1U] ;
};
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/signal.h"
typedef struct __anonstruct_sigset_t_294 sigset_t;
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/signal.h"
typedef void __signalfn_t(int );
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/signal-defs.h"
typedef __signalfn_t *__sighandler_t;
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/signal-defs.h"
typedef void __restorefn_t(void);
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/signal-defs.h"
typedef __restorefn_t *__sigrestore_t;
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
union sigval {
   int sival_int ;
   void *sival_ptr ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
typedef union sigval sigval_t;
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__kill_295 {
   __kernel_pid_t _pid ;
   __kernel_uid32_t _uid ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__timer_296 {
   __kernel_timer_t _tid ;
   int _overrun ;
   sigval_t _sigval ;
   int _sys_private ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__rt_297 {
   __kernel_pid_t _pid ;
   __kernel_uid32_t _uid ;
   sigval_t _sigval ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__sigchld_298 {
   __kernel_pid_t _pid ;
   __kernel_uid32_t _uid ;
   int _status ;
   __kernel_clock_t _utime ;
   __kernel_clock_t _stime ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__addr_bnd_301 {
   char _dummy_bnd[8U] ;
   void *_lower ;
   void *_upper ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__addr_pkey_302 {
   char _dummy_pkey[8U] ;
   __u32 _pkey ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
union __anonunion_300 {
   short _addr_lsb ;
   struct __anonstruct__addr_bnd_301 _addr_bnd ;
   struct __anonstruct__addr_pkey_302 _addr_pkey ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__sigfault_299 {
   void *_addr ;
   union __anonunion_300 __anonCompField___anonstruct__sigfault_299_50 ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__sigpoll_303 {
   long _band ;
   int _fd ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__sigsys_304 {
   void *_call_addr ;
   int _syscall ;
   unsigned int _arch ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
union __sifields {
   struct __anonstruct__kill_295 _kill ;
   struct __anonstruct__timer_296 _timer ;
   struct __anonstruct__rt_297 _rt ;
   struct __anonstruct__sigchld_298 _sigchld ;
   struct __anonstruct__sigfault_299 _sigfault ;
   struct __anonstruct__sigpoll_303 _sigpoll ;
   struct __anonstruct__sigsys_304 _sigsys ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/signal_types.h"
struct __anonstruct_309 {
   int si_signo ;
   int si_errno ;
   int si_code ;
   union __sifields _sifields ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/signal_types.h"
struct kernel_siginfo {
   struct __anonstruct_309 __anonCompField_kernel_siginfo_53 ;
};
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/signal_types.h"
typedef struct kernel_siginfo kernel_siginfo_t;
#line 20 
struct user_struct;
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/signal_types.h"
struct sigpending {
   struct list_head list ;
   sigset_t signal ;
};
#line 35  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/signal_types.h"
struct sigaction {
   __sighandler_t sa_handler ;
   unsigned long sa_flags ;
   __sigrestore_t sa_restorer ;
   sigset_t sa_mask ;
};
#line 49  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/signal_types.h"
struct k_sigaction {
   struct sigaction sa ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/task_io_accounting.h"
struct task_io_accounting {
   u64 rchar ;
   u64 wchar ;
   u64 syscr ;
   u64 syscw ;
   u64 read_bytes ;
   u64 write_bytes ;
   u64 cancelled_write_bytes ;
};
#line 107  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/posix-timers.h"
struct posix_cputimer_base {
   u64 nextevt ;
   struct timerqueue_head tqhead ;
};
#line 122  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/posix-timers.h"
struct posix_cputimers {
   struct posix_cputimer_base bases[3U] ;
   unsigned int timers_active ;
   unsigned int expiry_active ;
};
#line 193 
struct signal_struct;
#line 62  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/rseq.h"
union __anonunion_rseq_cs_314 {
   __u64 ptr64 ;
   __u64 ptr ;
};
#line 62  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/rseq.h"
struct rseq {
   __u32 cpu_id_start ;
   __u32 cpu_id ;
   union __anonunion_rseq_cs_314 rseq_cs ;
   __u32 flags ;
} __attribute__((__aligned__(32)));
#line 146 
struct audit_context;
#line 150 
struct capture_control;
#line 151 
struct cfs_rq;
#line 152 
struct fs_struct;
#line 153 
struct futex_pi_state;
#line 154 
struct io_context;
#line 155 
struct nameidata;
#line 156 
struct nsproxy;
#line 157 
struct perf_event_context;
#line 158 
struct pipe_inode_info;
#line 160 
struct reclaim_state;
#line 161 
struct robust_list_head;
#line 166 
struct sighand_struct;
#line 167 
struct task_delay_info;
#line 168 
struct task_group;
#line 242  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct prev_cputime {
   u64 utime ;
   u64 stime ;
   raw_spinlock_t lock ;
};
#line 290  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct sched_info {
   unsigned long pcount ;
   unsigned long long run_delay ;
   unsigned long long last_arrival ;
   unsigned long long last_queued ;
};
#line 325  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct load_weight {
   unsigned long weight ;
   u32 inv_weight ;
};
#line 352  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct util_est {
   unsigned int enqueued ;
   unsigned int ewma ;
} __attribute__((__aligned__(8)));
#line 401  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct sched_avg {
   u64 last_update_time ;
   u64 load_sum ;
   u64 runnable_load_sum ;
   u32 util_sum ;
   u32 period_contrib ;
   unsigned long load_avg ;
   unsigned long runnable_load_avg ;
   unsigned long util_avg ;
   struct util_est util_est ;
} __attribute__((__aligned__(64)));
#line 413  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct sched_statistics {
   u64 wait_start ;
   u64 wait_max ;
   u64 wait_count ;
   u64 wait_sum ;
   u64 iowait_count ;
   u64 iowait_sum ;
   u64 sleep_start ;
   u64 sleep_max ;
   s64 sum_sleep_runtime ;
   u64 block_start ;
   u64 block_max ;
   u64 exec_max ;
   u64 slice_max ;
   u64 nr_migrations_cold ;
   u64 nr_failed_migrations_affine ;
   u64 nr_failed_migrations_running ;
   u64 nr_failed_migrations_hot ;
   u64 nr_forced_migrations ;
   u64 nr_wakeups ;
   u64 nr_wakeups_sync ;
   u64 nr_wakeups_migrate ;
   u64 nr_wakeups_local ;
   u64 nr_wakeups_remote ;
   u64 nr_wakeups_affine ;
   u64 nr_wakeups_affine_attempts ;
   u64 nr_wakeups_passive ;
   u64 nr_wakeups_idle ;
};
#line 449  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct sched_entity {
   struct load_weight load ;
   unsigned long runnable_weight ;
   struct rb_node run_node ;
   struct list_head group_node ;
   unsigned int on_rq ;
   u64 exec_start ;
   u64 sum_exec_runtime ;
   u64 vruntime ;
   u64 prev_sum_exec_runtime ;
   u64 nr_migrations ;
   struct sched_statistics statistics ;
   int depth ;
   struct sched_entity *parent ;
   struct cfs_rq *cfs_rq ;
   struct cfs_rq *my_q ;
   struct sched_avg avg ;
};
#line 486 
struct rt_rq;
#line 486  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct sched_rt_entity {
   struct list_head run_list ;
   unsigned long timeout ;
   unsigned long watchdog_stamp ;
   unsigned int time_slice ;
   unsigned short on_rq ;
   unsigned short on_list ;
   struct sched_rt_entity *back ;
   struct sched_rt_entity *parent ;
   struct rt_rq *rt_rq ;
   struct rt_rq *my_q ;
} __attribute__((__designated_init__));
#line 504  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct sched_dl_entity {
   struct rb_node rb_node ;
   u64 dl_runtime ;
   u64 dl_deadline ;
   u64 dl_period ;
   u64 dl_bw ;
   u64 dl_density ;
   s64 runtime ;
   u64 deadline ;
   unsigned int flags ;
   unsigned int dl_throttled : 1 ;
   unsigned int dl_boosted : 1 ;
   unsigned int dl_yielded : 1 ;
   unsigned int dl_non_contending : 1 ;
   unsigned int dl_overrun : 1 ;
   struct hrtimer dl_timer ;
   struct hrtimer inactive_timer ;
};
#line 600  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct uclamp_se {
   unsigned int value : 11 ;
   unsigned int bucket_id : 3 ;
   unsigned int active : 1 ;
   unsigned int user_defined : 1 ;
};
#line 625  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct wake_q_node {
   struct wake_q_node *next ;
};
#line 629 
struct sched_class;
#line 629 
struct cred;
#line 629 
struct key;
#line 629 
struct files_struct;
#line 629 
struct rt_mutex_waiter;
#line 629 
struct css_set;
#line 629 
struct compat_robust_list_head;
#line 629 
struct numa_group;
#line 629  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
union __anonunion_316 {
   refcount_t rcu_users ;
   struct callback_head rcu ;
};
#line 629 
struct ftrace_ret_stack;
#line 629 
struct kcov;
#line 629  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct task_struct {
   struct thread_info thread_info ;
   long state ;
   void *stack ;
   refcount_t usage ;
   unsigned int flags ;
   unsigned int ptrace ;
   struct llist_node wake_entry ;
   int on_cpu ;
   unsigned int cpu ;
   unsigned int wakee_flips ;
   unsigned long wakee_flip_decay_ts ;
   struct task_struct *last_wakee ;
   int recent_used_cpu ;
   int wake_cpu ;
   int on_rq ;
   int prio ;
   int static_prio ;
   int normal_prio ;
   unsigned int rt_priority ;
   struct sched_class *sched_class ;
   struct sched_entity se ;
   struct sched_rt_entity rt ;
   struct task_group *sched_task_group ;
   struct sched_dl_entity dl ;
   struct uclamp_se uclamp_req[2U] ;
   struct uclamp_se uclamp[2U] ;
   struct hlist_head preempt_notifiers ;
   unsigned int btrace_seq ;
   unsigned int policy ;
   int nr_cpus_allowed ;
   cpumask_t *cpus_ptr ;
   cpumask_t cpus_mask ;
   unsigned long rcu_tasks_nvcsw ;
   u8 rcu_tasks_holdout ;
   u8 rcu_tasks_idx ;
   int rcu_tasks_idle_cpu ;
   struct list_head rcu_tasks_holdout_list ;
   struct sched_info sched_info ;
   struct list_head tasks ;
   struct plist_node pushable_tasks ;
   struct rb_node pushable_dl_tasks ;
   struct mm_struct *mm ;
   struct mm_struct *active_mm ;
   struct vmacache vmacache ;
   struct task_rss_stat rss_stat ;
   int exit_state ;
   int exit_code ;
   int exit_signal ;
   int pdeath_signal ;
   unsigned long jobctl ;
   unsigned int personality ;
   unsigned int sched_reset_on_fork : 1 ;
   unsigned int sched_contributes_to_load : 1 ;
   unsigned int sched_migrated : 1 ;
   unsigned int sched_remote_wakeup : 1 ;
   unsigned int sched_psi_wake_requeue : 1 ;
   unsigned int  ;
   unsigned int in_execve : 1 ;
   unsigned int in_iowait : 1 ;
   unsigned int restore_sigmask : 1 ;
   unsigned int in_user_fault : 1 ;
   unsigned int brk_randomized : 1 ;
   unsigned int no_cgroup_migration : 1 ;
   unsigned int frozen : 1 ;
   unsigned int use_memdelay : 1 ;
   unsigned long atomic_flags ;
   struct restart_block restart_block ;
   pid_t pid ;
   pid_t tgid ;
   unsigned long stack_canary ;
   struct task_struct *real_parent ;
   struct task_struct *parent ;
   struct list_head children ;
   struct list_head sibling ;
   struct task_struct *group_leader ;
   struct list_head ptraced ;
   struct list_head ptrace_entry ;
   struct pid *thread_pid ;
   struct hlist_node pid_links[4U] ;
   struct list_head thread_group ;
   struct list_head thread_node ;
   struct completion *vfork_done ;
   int *set_child_tid ;
   int *clear_child_tid ;
   u64 utime ;
   u64 stime ;
   u64 gtime ;
   struct prev_cputime prev_cputime ;
   unsigned long nvcsw ;
   unsigned long nivcsw ;
   u64 start_time ;
   u64 start_boottime ;
   unsigned long min_flt ;
   unsigned long maj_flt ;
   struct posix_cputimers posix_cputimers ;
   struct cred *ptracer_cred ;
   struct cred *real_cred ;
   struct cred *cred ;
   struct key *cached_requested_key ;
   char comm[16U] ;
   struct nameidata *nameidata ;
   struct sysv_sem sysvsem ;
   struct sysv_shm sysvshm ;
   unsigned long last_switch_count ;
   unsigned long last_switch_time ;
   struct fs_struct *fs ;
   struct files_struct *files ;
   struct nsproxy *nsproxy ;
   struct signal_struct *signal ;
   struct sighand_struct *sighand ;
   sigset_t blocked ;
   sigset_t real_blocked ;
   sigset_t saved_sigmask ;
   struct sigpending pending ;
   unsigned long sas_ss_sp ;
   size_t sas_ss_size ;
   unsigned int sas_ss_flags ;
   struct callback_head *task_works ;
   struct audit_context *audit_context ;
   kuid_t loginuid ;
   unsigned int sessionid ;
   struct seccomp seccomp ;
   u32 parent_exec_id ;
   u32 self_exec_id ;
   spinlock_t alloc_lock ;
   raw_spinlock_t pi_lock ;
   struct wake_q_node wake_q ;
   struct rb_root_cached pi_waiters ;
   struct task_struct *pi_top_task ;
   struct rt_mutex_waiter *pi_blocked_on ;
   struct mutex_waiter *blocked_on ;
   int non_block_count ;
   unsigned int irq_events ;
   unsigned long hardirq_enable_ip ;
   unsigned long hardirq_disable_ip ;
   unsigned int hardirq_enable_event ;
   unsigned int hardirq_disable_event ;
   int hardirqs_enabled ;
   int hardirq_context ;
   unsigned long softirq_disable_ip ;
   unsigned long softirq_enable_ip ;
   unsigned int softirq_disable_event ;
   unsigned int softirq_enable_event ;
   int softirqs_enabled ;
   int softirq_context ;
   u64 curr_chain_key ;
   int lockdep_depth ;
   unsigned int lockdep_recursion ;
   struct held_lock held_locks[48U] ;
   unsigned int in_ubsan ;
   void *journal_info ;
   struct bio_list *bio_list ;
   struct blk_plug *plug ;
   struct reclaim_state *reclaim_state ;
   struct backing_dev_info *backing_dev_info ;
   struct io_context *io_context ;
   struct capture_control *capture_control ;
   unsigned long ptrace_message ;
   kernel_siginfo_t *last_siginfo ;
   struct task_io_accounting ioac ;
   unsigned int psi_flags ;
   u64 acct_rss_mem1 ;
   u64 acct_vm_mem1 ;
   u64 acct_timexpd ;
   nodemask_t mems_allowed ;
   seqcount_t mems_allowed_seq ;
   int cpuset_mem_spread_rotor ;
   int cpuset_slab_spread_rotor ;
   struct css_set *cgroups ;
   struct list_head cg_list ;
   u32 closid ;
   u32 rmid ;
   struct robust_list_head *robust_list ;
   struct compat_robust_list_head *compat_robust_list ;
   struct list_head pi_state_list ;
   struct futex_pi_state *pi_state_cache ;
   struct mutex futex_exit_mutex ;
   unsigned int futex_state ;
   struct perf_event_context *perf_event_ctxp[2U] ;
   struct mutex perf_event_mutex ;
   struct list_head perf_event_list ;
   struct mempolicy *mempolicy ;
   short il_prev ;
   short pref_node_fork ;
   int numa_scan_seq ;
   unsigned int numa_scan_period ;
   unsigned int numa_scan_period_max ;
   int numa_preferred_nid ;
   unsigned long numa_migrate_retry ;
   u64 node_stamp ;
   u64 last_task_numa_placement ;
   u64 last_sum_exec_runtime ;
   struct callback_head numa_work ;
   struct numa_group *numa_group ;
   unsigned long *numa_faults ;
   unsigned long total_numa_faults ;
   unsigned long numa_faults_locality[3U] ;
   unsigned long numa_pages_migrated ;
   struct rseq *rseq ;
   u32 rseq_sig ;
   unsigned long rseq_event_mask ;
   struct tlbflush_unmap_batch tlb_ubc ;
   union __anonunion_316 __anonCompField_task_struct_55 ;
   struct pipe_inode_info *splice_pipe ;
   struct page_frag task_frag ;
   struct task_delay_info *delays ;
   int make_it_fail ;
   unsigned int fail_nth ;
   int nr_dirtied ;
   int nr_dirtied_pause ;
   unsigned long dirty_paused_when ;
   int latency_record_count ;
   struct latency_record latency_record[32U] ;
   u64 timer_slack_ns ;
   u64 default_timer_slack_ns ;
   unsigned int kasan_depth ;
   int curr_ret_stack ;
   int curr_ret_depth ;
   struct ftrace_ret_stack *ret_stack ;
   unsigned long long ftrace_timestamp ;
   atomic_t trace_overrun ;
   atomic_t tracing_graph_pause ;
   unsigned long trace ;
   unsigned long trace_recursion ;
   unsigned int kcov_mode ;
   unsigned int kcov_size ;
   void *kcov_area ;
   struct kcov *kcov ;
   u64 kcov_handle ;
   int kcov_sequence ;
   struct mem_cgroup *memcg_in_oom ;
   gfp_t memcg_oom_gfp_mask ;
   int memcg_oom_order ;
   unsigned int memcg_nr_pages_over_high ;
   struct mem_cgroup *active_memcg ;
   struct request_queue *throttle_queue ;
   struct uprobe_task *utask ;
   unsigned int sequential_io ;
   unsigned int sequential_io_avg ;
   unsigned long task_state_change ;
   int pagefault_disabled ;
   struct task_struct *oom_reaper_list ;
   struct vm_struct *stack_vm_area ;
   refcount_t stack_refcount ;
   int patch_state ;
   void *security ;
   struct thread_struct thread ;
};
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ratelimit.h"
struct ratelimit_state {
   raw_spinlock_t lock ;
   int interval ;
   int burst ;
   int printed ;
   int missed ;
   unsigned long begin ;
   unsigned long flags ;
};
#line 5  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/device.h"
struct dev_archdata {
   void *iommu ;
};
#line 12 
struct dma_map_ops;
#line 23 
struct device_driver;
#line 24 
struct driver_private;
#line 25 
struct class;
#line 26 
struct subsys_private;
#line 27 
struct bus_type;
#line 28 
struct iommu_ops;
#line 29 
struct iommu_group;
#line 30 
struct iommu_fwspec;
#line 31 
struct dev_pin_info;
#line 32 
struct iommu_param;
#line 122  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct bus_type {
   char *name ;
   char *dev_name ;
   struct device *dev_root ;
   struct attribute_group **bus_groups ;
   struct attribute_group **dev_groups ;
   struct attribute_group **drv_groups ;
   int (*match)(struct device *, struct device_driver *) ;
   int (*uevent)(struct device *, struct kobj_uevent_env *) ;
   int (*probe)(struct device *) ;
   void (*sync_state)(struct device *) ;
   int (*remove)(struct device *) ;
   void (*shutdown)(struct device *) ;
   int (*online)(struct device *) ;
   int (*offline)(struct device *) ;
   int (*suspend)(struct device *, pm_message_t ) ;
   int (*resume)(struct device *) ;
   int (*num_vf)(struct device *) ;
   int (*dma_configure)(struct device *) ;
   struct dev_pm_ops *pm ;
   struct iommu_ops *iommu_ops ;
   struct subsys_private *p ;
   struct lock_class_key lock_key ;
   bool need_parent_lock ;
};
#line 164 
struct device_type;
#line 309 
enum probe_type {
    PROBE_DEFAULT_STRATEGY = 0,
    PROBE_PREFER_ASYNCHRONOUS = 1,
    PROBE_FORCE_SYNCHRONOUS = 2
};
#line 383  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct device_driver {
   char *name ;
   struct bus_type *bus ;
   struct module *owner ;
   char *mod_name ;
   bool suppress_bind_attrs ;
   enum probe_type probe_type ;
   struct of_device_id *of_match_table ;
   struct acpi_device_id *acpi_match_table ;
   int (*probe)(struct device *) ;
   void (*sync_state)(struct device *) ;
   int (*remove)(struct device *) ;
   void (*shutdown)(struct device *) ;
   int (*suspend)(struct device *, pm_message_t ) ;
   int (*resume)(struct device *) ;
   struct attribute_group **groups ;
   struct attribute_group **dev_groups ;
   struct dev_pm_ops *pm ;
   void (*coredump)(struct device *) ;
   struct driver_private *p ;
};
#line 589  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct class {
   char *name ;
   struct module *owner ;
   struct attribute_group **class_groups ;
   struct attribute_group **dev_groups ;
   struct kobject *dev_kobj ;
   int (*dev_uevent)(struct device *, struct kobj_uevent_env *) ;
   char *(*devnode)(struct device *, umode_t *) ;
   void (*class_release)(struct class *) ;
   void (*dev_release)(struct device *) ;
   int (*shutdown_pre)(struct device *) ;
   struct kobj_ns_type_operations *ns_type ;
   void *(*namespace)(struct device *) ;
   void (*get_ownership)(struct device *, kuid_t *, kgid_t *) ;
   struct dev_pm_ops *pm ;
   struct subsys_private *p ;
};
#line 809  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct device_type {
   char *name ;
   struct attribute_group **groups ;
   int (*uevent)(struct device *, struct kobj_uevent_env *) ;
   char *(*devnode)(struct device *, umode_t *, kuid_t *, kgid_t *) ;
   void (*release)(struct device *) ;
   struct dev_pm_ops *pm ;
};
#line 1008  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct device_dma_parameters {
   unsigned int max_segment_size ;
   unsigned long segment_boundary_mask ;
};
#line 1139 
enum dl_dev_state {
    DL_DEV_NO_DRIVER = 0,
    DL_DEV_PROBING = 1,
    DL_DEV_DRIVER_BOUND = 2,
    DL_DEV_UNBINDING = 3
};
#line 1164  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct dev_links_info {
   struct list_head suppliers ;
   struct list_head consumers ;
   struct list_head needs_suppliers ;
   struct list_head defer_sync ;
   bool need_for_probe ;
   enum dl_dev_state status ;
};
#line 1259 
struct dma_coherent_mem;
#line 1259 
struct cma;
#line 1259  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct device {
   struct kobject kobj ;
   struct device *parent ;
   struct device_private *p ;
   char *init_name ;
   struct device_type *type ;
   struct bus_type *bus ;
   struct device_driver *driver ;
   void *platform_data ;
   void *driver_data ;
   struct mutex lockdep_mutex ;
   struct mutex mutex ;
   struct dev_links_info links ;
   struct dev_pm_info power ;
   struct dev_pm_domain *pm_domain ;
   struct irq_domain *msi_domain ;
   struct dev_pin_info *pins ;
   struct list_head msi_list ;
   struct dma_map_ops *dma_ops ;
   u64 *dma_mask ;
   u64 coherent_dma_mask ;
   u64 bus_dma_limit ;
   unsigned long dma_pfn_offset ;
   struct device_dma_parameters *dma_parms ;
   struct list_head dma_pools ;
   struct dma_coherent_mem *dma_mem ;
   struct cma *cma_area ;
   struct dev_archdata archdata ;
   struct device_node *of_node ;
   struct fwnode_handle *fwnode ;
   int numa_node ;
   dev_t devt ;
   u32 id ;
   spinlock_t devres_lock ;
   struct list_head devres_head ;
   struct class *class ;
   struct attribute_group **groups ;
   void (*release)(struct device *) ;
   struct iommu_group *iommu_group ;
   struct iommu_fwspec *iommu_fwspec ;
   struct iommu_param *iommu_param ;
   bool offline_disabled : 1 ;
   bool offline : 1 ;
   bool of_node_reused : 1 ;
   bool state_synced : 1 ;
};
#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm_wakeup.h"
struct wakeup_source {
   char *name ;
   int id ;
   struct list_head entry ;
   spinlock_t lock ;
   struct wake_irq *wakeirq ;
   struct timer_list timer ;
   unsigned long timer_expires ;
   ktime_t total_time ;
   ktime_t max_time ;
   ktime_t last_time ;
   ktime_t start_prevent_time ;
   ktime_t prevent_sleep_time ;
   unsigned long event_count ;
   unsigned long active_count ;
   unsigned long relax_count ;
   unsigned long expire_count ;
   unsigned long wakeup_count ;
   struct device *dev ;
   bool active : 1 ;
   bool autosleep_enabled : 1 ;
};
#line 1913  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
enum irqreturn {
    IRQ_NONE = 0,
    IRQ_HANDLED = 1,
    IRQ_WAKE_THREAD = 2
};
#line 1919  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
typedef enum irqreturn irqreturn_t;
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/extable.h"
struct exception_table_entry {
   int insn ;
   int fixup ;
   int handler ;
};
#line 110  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/interrupt.h"
struct proc_dir_entry;
#line 157  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/io.h"
struct percpu_ref;
#line 158  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/io.h"
typedef void percpu_ref_func_t(struct percpu_ref *);
#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/percpu-refcount.h"
struct percpu_ref {
   atomic_long_t count ;
   unsigned long percpu_count_ptr ;
   percpu_ref_func_t *release ;
   percpu_ref_func_t *confirm_switch ;
   bool force_atomic : 1 ;
   bool allow_reinit : 1 ;
   struct callback_head rcu ;
};
#line 62  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
struct hotplug_slot;
#line 62  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
struct pci_slot {
   struct pci_bus *bus ;
   struct list_head list ;
   struct hotplug_slot *hotplug ;
   unsigned char number ;
   struct kobject kobj ;
};
#line 99  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
typedef int pci_power_t;
#line 153  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
typedef unsigned int pci_channel_state_t;
#line 162 
enum pci_channel_state {
    pci_channel_io_normal = 1,
    pci_channel_io_frozen = 2,
    pci_channel_io_perm_failure = 3
};
#line 181  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
typedef unsigned short pci_dev_flags_t;
#line 207  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
typedef unsigned short pci_bus_flags_t;
#line 282 
struct pcie_link_state;
#line 283 
struct pci_vpd;
#line 284 
struct pci_sriov;
#line 285 
struct pci_p2pdma;
#line 290 
struct aer_stats;
#line 290 
struct pci_driver;
#line 290  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
union __anonunion_394 {
   struct pci_sriov *sriov ;
   struct pci_dev *physfn ;
};
#line 290  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
struct pci_dev {
   struct list_head bus_list ;
   struct pci_bus *bus ;
   struct pci_bus *subordinate ;
   void *sysdata ;
   struct proc_dir_entry *procent ;
   struct pci_slot *slot ;
   unsigned int devfn ;
   unsigned short vendor ;
   unsigned short device ;
   unsigned short subsystem_vendor ;
   unsigned short subsystem_device ;
   unsigned int class ;
   u8 revision ;
   u8 hdr_type ;
   u16 aer_cap ;
   struct aer_stats *aer_stats ;
   u8 pcie_cap ;
   u8 msi_cap ;
   u8 msix_cap ;
   u8 pcie_mpss : 3 ;
   u8 rom_base_reg ;
   u8 pin ;
   u16 pcie_flags_reg ;
   unsigned long *dma_alias_mask ;
   struct pci_driver *driver ;
   u64 dma_mask ;
   struct device_dma_parameters dma_parms ;
   pci_power_t current_state ;
   unsigned int imm_ready : 1 ;
   u8 pm_cap ;
   unsigned int pme_support : 5 ;
   unsigned int pme_poll : 1 ;
   unsigned int d1_support : 1 ;
   unsigned int d2_support : 1 ;
   unsigned int no_d1d2 : 1 ;
   unsigned int no_d3cold : 1 ;
   unsigned int bridge_d3 : 1 ;
   unsigned int d3cold_allowed : 1 ;
   unsigned int mmio_always_on : 1 ;
   unsigned int wakeup_prepared : 1 ;
   unsigned int runtime_d3cold : 1 ;
   unsigned int skip_bus_pm : 1 ;
   unsigned int ignore_hotplug : 1 ;
   unsigned int hotplug_user_indicators : 1 ;
   unsigned int clear_retrain_link : 1 ;
   unsigned int d3_delay ;
   unsigned int d3cold_delay ;
   struct pcie_link_state *link_state ;
   unsigned int ltr_path : 1 ;
   unsigned int eetlp_prefix_path : 1 ;
   pci_channel_state_t error_state ;
   struct device dev ;
   int cfg_size ;
   unsigned int irq ;
   struct resource resource[17U] ;
   bool match_driver ;
   unsigned int transparent : 1 ;
   unsigned int io_window : 1 ;
   unsigned int pref_window : 1 ;
   unsigned int pref_64_window : 1 ;
   unsigned int multifunction : 1 ;
   unsigned int is_busmaster : 1 ;
   unsigned int no_msi : 1 ;
   unsigned int no_64bit_msi : 1 ;
   unsigned int block_cfg_access : 1 ;
   unsigned int broken_parity_status : 1 ;
   unsigned int irq_reroute_variant : 2 ;
   unsigned int msi_enabled : 1 ;
   unsigned int msix_enabled : 1 ;
   unsigned int ari_enabled : 1 ;
   unsigned int ats_enabled : 1 ;
   unsigned int pasid_enabled : 1 ;
   unsigned int pri_enabled : 1 ;
   unsigned int is_managed : 1 ;
   unsigned int needs_freset : 1 ;
   unsigned int state_saved : 1 ;
   unsigned int is_physfn : 1 ;
   unsigned int is_virtfn : 1 ;
   unsigned int reset_fn : 1 ;
   unsigned int is_hotplug_bridge : 1 ;
   unsigned int shpc_managed : 1 ;
   unsigned int is_thunderbolt : 1 ;
   unsigned int untrusted : 1 ;
   unsigned int __aer_firmware_first_valid : 1 ;
   unsigned int __aer_firmware_first : 1 ;
   unsigned int broken_intx_masking : 1 ;
   unsigned int io_window_1k : 1 ;
   unsigned int irq_managed : 1 ;
   unsigned int non_compliant_bars : 1 ;
   unsigned int is_probed : 1 ;
   unsigned int link_active_reporting : 1 ;
   unsigned int no_vf_scan : 1 ;
   pci_dev_flags_t dev_flags ;
   atomic_t enable_cnt ;
   u32 saved_config_space[16U] ;
   struct hlist_head saved_cap_space ;
   struct bin_attribute *rom_attr ;
   int rom_attr_enabled ;
   struct bin_attribute *res_attr[17U] ;
   struct bin_attribute *res_attr_wc[17U] ;
   unsigned int broken_cmd_compl : 1 ;
   unsigned int ptm_root : 1 ;
   unsigned int ptm_enabled : 1 ;
   u8 ptm_granularity ;
   struct attribute_group **msi_irq_groups ;
   struct pci_vpd *vpd ;
   union __anonunion_394 __anonCompField_pci_dev_56 ;
   u16 ats_cap ;
   u8 ats_stu ;
   u16 pri_cap ;
   u32 pri_reqs_alloc ;
   unsigned int pasid_required : 1 ;
   u16 pasid_cap ;
   u16 pasid_features ;
   struct pci_p2pdma *p2pdma ;
   phys_addr_t rom ;
   size_t romlen ;
   char *driver_override ;
   unsigned long priv_flags ;
};
#line 493 
struct pci_ops;
#line 493 
struct msi_controller;
#line 571  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
struct pci_bus {
   struct list_head node ;
   struct pci_bus *parent ;
   struct list_head children ;
   struct list_head devices ;
   struct pci_dev *self ;
   struct list_head slots ;
   struct resource *resource[4U] ;
   struct list_head resources ;
   struct resource busn_res ;
   struct pci_ops *ops ;
   struct msi_controller *msi ;
   void *sysdata ;
   struct proc_dir_entry *procdir ;
   unsigned char number ;
   unsigned char primary ;
   unsigned char max_bus_speed ;
   unsigned char cur_bus_speed ;
   char name[48U] ;
   unsigned short bridge_ctl ;
   pci_bus_flags_t bus_flags ;
   struct device *bridge ;
   struct device dev ;
   struct bin_attribute *legacy_io ;
   struct bin_attribute *legacy_mem ;
   unsigned int is_added : 1 ;
};
#line 697  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
struct pci_ops {
   int (*add_bus)(struct pci_bus *) ;
   void (*remove_bus)(struct pci_bus *) ;
   void *(*map_bus)(struct pci_bus *, unsigned int , int ) ;
   int (*read)(struct pci_bus *, unsigned int , int , int , u32 *) ;
   int (*write)(struct pci_bus *, unsigned int , int , int , u32 ) ;
};
#line 725  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
struct pci_dynids {
   spinlock_t lock ;
   struct list_head list ;
};
#line 729  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
typedef unsigned int pci_ers_result_t;
#line 761  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
struct pci_error_handlers {
   pci_ers_result_t (*error_detected)(struct pci_dev *, enum pci_channel_state ) ;
   pci_ers_result_t (*mmio_enabled)(struct pci_dev *) ;
   pci_ers_result_t (*slot_reset)(struct pci_dev *) ;
   void (*reset_prepare)(struct pci_dev *) ;
   void (*reset_done)(struct pci_dev *) ;
   void (*resume)(struct pci_dev *) ;
};
#line 824  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
struct pci_driver {
   struct list_head node ;
   char *name ;
   struct pci_device_id *id_table ;
   int (*probe)(struct pci_dev *, struct pci_device_id *) ;
   void (*remove)(struct pci_dev *) ;
   int (*suspend)(struct pci_dev *, pm_message_t ) ;
   int (*resume)(struct pci_dev *) ;
   void (*shutdown)(struct pci_dev *) ;
   int (*sriov_configure)(struct pci_dev *, int ) ;
   struct pci_error_handlers *err_handler ;
   struct attribute_group **groups ;
   struct device_driver driver ;
   struct pci_dynids dynids ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/shrinker.h"
struct shrink_control {
   gfp_t gfp_mask ;
   int nid ;
   unsigned long nr_to_scan ;
   unsigned long nr_scanned ;
   struct mem_cgroup *memcg ;
};
#line 60  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/shrinker.h"
struct shrinker {
   unsigned long (*count_objects)(struct shrinker *, struct shrink_control *) ;
   unsigned long (*scan_objects)(struct shrinker *, struct shrink_control *) ;
   long batch ;
   int seeks ;
   unsigned int flags ;
   struct list_head list ;
   int id ;
   atomic_long_t *nr_deferred ;
};
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memremap.h"
struct vmem_altmap {
   unsigned long base_pfn ;
   unsigned long end_pfn ;
   unsigned long reserve ;
   unsigned long free ;
   unsigned long align ;
   unsigned long alloc ;
};
#line 26 
enum memory_type {
    MEMORY_DEVICE_PRIVATE = 1,
    MEMORY_DEVICE_FS_DAX = 2,
    MEMORY_DEVICE_DEVDAX = 3,
    MEMORY_DEVICE_PCI_P2PDMA = 4
};
#line 67  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memremap.h"
struct dev_pagemap_ops {
   void (*page_free)(struct page *) ;
   void (*kill)(struct dev_pagemap *) ;
   void (*cleanup)(struct dev_pagemap *) ;
   vm_fault_t (*migrate_to_ram)(struct vm_fault *) ;
};
#line 107  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memremap.h"
struct dev_pagemap {
   struct vmem_altmap altmap ;
   struct resource res ;
   struct percpu_ref *ref ;
   struct percpu_ref internal_ref ;
   struct completion done ;
   enum memory_type type ;
   unsigned int flags ;
   struct dev_pagemap_ops *ops ;
};
#line 176 
struct file_ra_state;
#line 417  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm.h"
struct vm_fault {
   struct vm_area_struct *vma ;
   unsigned int flags ;
   gfp_t gfp_mask ;
   unsigned long pgoff ;
   unsigned long address ;
   pmd_t *pmd ;
   pud_t *pud ;
   pte_t orig_pte ;
   struct page *cow_page ;
   struct mem_cgroup *memcg ;
   struct page *page ;
   pte_t *pte ;
   spinlock_t *ptl ;
   pgtable_t prealloc_pte ;
};
#line 448 
enum page_entry_size {
    PE_SIZE_PTE = 0,
    PE_SIZE_PMD = 1,
    PE_SIZE_PUD = 2
};
#line 467  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm.h"
struct vm_operations_struct {
   void (*open)(struct vm_area_struct *) ;
   void (*close)(struct vm_area_struct *) ;
   int (*split)(struct vm_area_struct *, unsigned long ) ;
   int (*mremap)(struct vm_area_struct *) ;
   vm_fault_t (*fault)(struct vm_fault *) ;
   vm_fault_t (*huge_fault)(struct vm_fault *, enum page_entry_size ) ;
   void (*map_pages)(struct vm_fault *, unsigned long , unsigned long ) ;
   unsigned long (*pagesize)(struct vm_area_struct *) ;
   vm_fault_t (*page_mkwrite)(struct vm_fault *) ;
   vm_fault_t (*pfn_mkwrite)(struct vm_fault *) ;
   int (*access)(struct vm_area_struct *, unsigned long , void *, int , int ) ;
   char *(*name)(struct vm_area_struct *) ;
   int (*set_policy)(struct vm_area_struct *, struct mempolicy *) ;
   struct mempolicy *(*get_policy)(struct vm_area_struct *, unsigned long ) ;
   struct page *(*find_special_page)(struct vm_area_struct *, unsigned long ) ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_bl.h"
struct hlist_bl_node;
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_bl.h"
struct hlist_bl_head {
   struct hlist_bl_node *first ;
};
#line 38  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_bl.h"
struct hlist_bl_node {
   struct hlist_bl_node *next ;
   struct hlist_bl_node **pprev ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockref.h"
struct __anonstruct_408 {
   spinlock_t lock ;
   int count ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockref.h"
union __anonunion_407 {
   struct __anonstruct_408 __anonCompField___anonunion_407_57 ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockref.h"
struct lockref {
   union __anonunion_407 __anonCompField_lockref_58 ;
};
#line 78  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/stringhash.h"
struct path;
#line 79 
struct vfsmount;
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dcache.h"
struct __anonstruct_410 {
   u32 hash ;
   u32 len ;
};
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dcache.h"
union __anonunion_409 {
   struct __anonstruct_410 __anonCompField___anonunion_409_59 ;
   u64 hash_len ;
};
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dcache.h"
struct qstr {
   union __anonunion_409 __anonCompField_qstr_60 ;
   unsigned char *name ;
};
#line 89 
struct dentry_operations;
#line 89  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dcache.h"
union __anonunion_411 {
   struct list_head d_lru ;
   wait_queue_head_t *d_wait ;
};
#line 89  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dcache.h"
union __anonunion_d_u_412 {
   struct hlist_node d_alias ;
   struct hlist_bl_node d_in_lookup_hash ;
   struct callback_head d_rcu ;
};
#line 89  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dcache.h"
struct dentry {
   unsigned int d_flags ;
   seqcount_t d_seq ;
   struct hlist_bl_node d_hash ;
   struct dentry *d_parent ;
   struct qstr d_name ;
   struct inode *d_inode ;
   unsigned char d_iname[32U] ;
   struct lockref d_lockref ;
   struct dentry_operations *d_op ;
   struct super_block *d_sb ;
   unsigned long d_time ;
   void *d_fsdata ;
   union __anonunion_411 __anonCompField_dentry_61 ;
   struct list_head d_child ;
   struct list_head d_subdirs ;
   union __anonunion_d_u_412 d_u ;
} __attribute__((__designated_init__));
#line 135  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dcache.h"
struct dentry_operations {
   int (*d_revalidate)(struct dentry *, unsigned int ) ;
   int (*d_weak_revalidate)(struct dentry *, unsigned int ) ;
   int (*d_hash)(struct dentry *, struct qstr *) ;
   int (*d_compare)(struct dentry *, unsigned int , char *, struct qstr *) ;
   int (*d_delete)(struct dentry *) ;
   int (*d_init)(struct dentry *) ;
   void (*d_release)(struct dentry *) ;
   void (*d_prune)(struct dentry *) ;
   void (*d_iput)(struct dentry *, struct inode *) ;
   char *(*d_dname)(struct dentry *, char *, int ) ;
   struct vfsmount *(*d_automount)(struct path *) ;
   int (*d_manage)(struct path *, bool ) ;
   struct dentry *(*d_real)(struct dentry *, struct inode *) ;
} __attribute__((__aligned__(64)));
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/path.h"
struct path {
   struct vfsmount *mnt ;
   struct dentry *dentry ;
} __attribute__((__designated_init__));
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_lru.h"
struct list_lru_one {
   struct list_head list ;
   long nr_items ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_lru.h"
struct list_lru_memcg {
   struct callback_head rcu ;
   struct list_lru_one *lru[0U] ;
};
#line 40  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_lru.h"
struct list_lru_node {
   spinlock_t lock ;
   struct list_lru_one lru ;
   struct list_lru_memcg *memcg_lrus ;
   long nr_items ;
} __attribute__((__aligned__(64)));
#line 52  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_lru.h"
struct list_lru {
   struct list_lru_node *node ;
   struct list_head list ;
   int shrinker_id ;
   bool memcg_aware ;
};
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/capability.h"
struct kernel_cap_struct {
   __u32 cap[2U] ;
};
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/capability.h"
typedef struct kernel_cap_struct kernel_cap_t;
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fiemap.h"
struct fiemap_extent {
   __u64 fe_logical ;
   __u64 fe_physical ;
   __u64 fe_length ;
   __u64 fe_reserved64[2U] ;
   __u32 fe_flags ;
   __u32 fe_reserved[3U] ;
};
#line 39 
enum migrate_mode {
    MIGRATE_ASYNC = 0,
    MIGRATE_SYNC_LIGHT = 1,
    MIGRATE_SYNC = 2,
    MIGRATE_SYNC_NO_COPY = 3
};
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rcuwait.h"
struct rcuwait {
   struct task_struct *task ;
};
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rcu_sync.h"
struct rcu_sync {
   int gp_state ;
   int gp_count ;
   wait_queue_head_t gp_wait ;
   struct callback_head cb_head ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/percpu-rwsem.h"
struct percpu_rw_semaphore {
   struct rcu_sync rss ;
   unsigned int *read_count ;
   struct rw_semaphore rw_sem ;
   struct rcuwait writer ;
   int readers_block ;
};
#line 10  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/delayed_call.h"
struct delayed_call {
   void (*fn)(void *) ;
   void *arg ;
};
#line 35  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/delayed_call.h"
typedef u32 errseq_t;
#line 72  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/iocontext.h"
union __anonunion_419 {
   struct list_head q_node ;
   struct kmem_cache *__rcu_icq_cache ;
};
#line 72  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/iocontext.h"
union __anonunion_420 {
   struct hlist_node ioc_node ;
   struct callback_head __rcu_head ;
};
#line 72  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/iocontext.h"
struct io_cq {
   struct request_queue *q ;
   struct io_context *ioc ;
   union __anonunion_419 __anonCompField_io_cq_62 ;
   union __anonunion_420 __anonCompField_io_cq_63 ;
   unsigned int flags ;
};
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/iocontext.h"
struct io_context {
   atomic_long_t refcount ;
   atomic_t active_ref ;
   atomic_t nr_tasks ;
   spinlock_t lock ;
   unsigned short ioprio ;
   int nr_batch_requests ;
   unsigned long last_waited ;
   struct xarray icq_tree ;
   struct io_cq *icq_hint ;
   struct hlist_head icq_list ;
   struct work_struct release_work ;
};
#line 287  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fs.h"
struct export_operations;
#line 289 
struct iovec;
#line 290 
struct kiocb;
#line 291 
struct kstatfs;
#line 292 
struct swap_info_struct;
#line 293 
struct iov_iter;
#line 294 
struct fscrypt_info;
#line 295 
struct fscrypt_operations;
#line 296 
struct fsverity_info;
#line 297 
struct fsverity_operations;
#line 298 
struct fs_parameter_description;
#line 224  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct iattr {
   unsigned int ia_valid ;
   umode_t ia_mode ;
   kuid_t ia_uid ;
   kgid_t ia_gid ;
   loff_t ia_size ;
   struct timespec64 ia_atime ;
   struct timespec64 ia_mtime ;
   struct timespec64 ia_ctime ;
   struct file *ia_file ;
};
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/percpu_counter.h"
struct percpu_counter {
   raw_spinlock_t lock ;
   s64 count ;
   struct list_head list ;
   s32 *counters ;
};
#line 214  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dqblk_xfs.h"
struct dquot;
#line 215 
struct kqid;
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/projid.h"
typedef __kernel_uid32_t projid_t;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/projid.h"
struct __anonstruct_kprojid_t_421 {
   projid_t val ;
};
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/projid.h"
typedef struct __anonstruct_kprojid_t_421 kprojid_t;
#line 180  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/quota.h"
enum quota_type {
    USRQUOTA = 0,
    GRPQUOTA = 1,
    PRJQUOTA = 2
};
#line 66  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
typedef long long qsize_t;
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
union __anonunion_422 {
   kuid_t uid ;
   kgid_t gid ;
   kprojid_t projid ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct kqid {
   union __anonunion_422 __anonCompField_kqid_64 ;
   enum quota_type type ;
};
#line 205  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct mem_dqblk {
   qsize_t dqb_bhardlimit ;
   qsize_t dqb_bsoftlimit ;
   qsize_t dqb_curspace ;
   qsize_t dqb_rsvspace ;
   qsize_t dqb_ihardlimit ;
   qsize_t dqb_isoftlimit ;
   qsize_t dqb_curinodes ;
   time64_t dqb_btime ;
   time64_t dqb_itime ;
};
#line 216 
struct quota_format_type;
#line 222  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct mem_dqinfo {
   struct quota_format_type *dqi_format ;
   int dqi_fmt_id ;
   struct list_head dqi_dirty_list ;
   unsigned long dqi_flags ;
   unsigned int dqi_bgrace ;
   unsigned int dqi_igrace ;
   qsize_t dqi_max_spc_limit ;
   qsize_t dqi_max_ino_limit ;
   void *dqi_priv ;
};
#line 294  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct dquot {
   struct hlist_node dq_hash ;
   struct list_head dq_inuse ;
   struct list_head dq_free ;
   struct list_head dq_dirty ;
   struct mutex dq_lock ;
   spinlock_t dq_dqb_lock ;
   atomic_t dq_count ;
   struct super_block *dq_sb ;
   struct kqid dq_id ;
   loff_t dq_off ;
   unsigned long dq_flags ;
   struct mem_dqblk dq_dqb ;
};
#line 310  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct quota_format_ops {
   int (*check_quota_file)(struct super_block *, int ) ;
   int (*read_file_info)(struct super_block *, int ) ;
   int (*write_file_info)(struct super_block *, int ) ;
   int (*free_file_info)(struct super_block *, int ) ;
   int (*read_dqblk)(struct dquot *) ;
   int (*commit_dqblk)(struct dquot *) ;
   int (*release_dqblk)(struct dquot *) ;
   int (*get_next_id)(struct super_block *, struct kqid *) ;
};
#line 322  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct dquot_operations {
   int (*write_dquot)(struct dquot *) ;
   struct dquot *(*alloc_dquot)(struct super_block *, int ) ;
   void (*destroy_dquot)(struct dquot *) ;
   int (*acquire_dquot)(struct dquot *) ;
   int (*release_dquot)(struct dquot *) ;
   int (*mark_dirty)(struct dquot *) ;
   int (*write_info)(struct super_block *, int ) ;
   qsize_t *(*get_reserved_space)(struct inode *) ;
   int (*get_projid)(struct inode *, kprojid_t *) ;
   int (*get_inode_usage)(struct inode *, qsize_t *) ;
   int (*get_next_id)(struct super_block *, struct kqid *) ;
};
#line 343  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct qc_dqblk {
   int d_fieldmask ;
   u64 d_spc_hardlimit ;
   u64 d_spc_softlimit ;
   u64 d_ino_hardlimit ;
   u64 d_ino_softlimit ;
   u64 d_space ;
   u64 d_ino_count ;
   s64 d_ino_timer ;
   s64 d_spc_timer ;
   int d_ino_warns ;
   int d_spc_warns ;
   u64 d_rt_spc_hardlimit ;
   u64 d_rt_spc_softlimit ;
   u64 d_rt_space ;
   s64 d_rt_spc_timer ;
   int d_rt_spc_warns ;
};
#line 395  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct qc_type_state {
   unsigned int flags ;
   unsigned int spc_timelimit ;
   unsigned int ino_timelimit ;
   unsigned int rt_spc_timelimit ;
   unsigned int spc_warnlimit ;
   unsigned int ino_warnlimit ;
   unsigned int rt_spc_warnlimit ;
   unsigned long long ino ;
   blkcnt_t blocks ;
   blkcnt_t nextents ;
};
#line 409  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct qc_state {
   unsigned int s_incoredqs ;
   struct qc_type_state s_state[3U] ;
};
#line 415  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct qc_info {
   int i_fieldmask ;
   unsigned int i_flags ;
   unsigned int i_spc_timelimit ;
   unsigned int i_ino_timelimit ;
   unsigned int i_rt_spc_timelimit ;
   unsigned int i_spc_warnlimit ;
   unsigned int i_ino_warnlimit ;
   unsigned int i_rt_spc_warnlimit ;
};
#line 428  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct quotactl_ops {
   int (*quota_on)(struct super_block *, int , int , struct path *) ;
   int (*quota_off)(struct super_block *, int ) ;
   int (*quota_enable)(struct super_block *, unsigned int ) ;
   int (*quota_disable)(struct super_block *, unsigned int ) ;
   int (*quota_sync)(struct super_block *, int ) ;
   int (*set_info)(struct super_block *, int , struct qc_info *) ;
   int (*get_dqblk)(struct super_block *, struct kqid , struct qc_dqblk *) ;
   int (*get_nextdqblk)(struct super_block *, struct kqid *, struct qc_dqblk *) ;
   int (*set_dqblk)(struct super_block *, struct kqid , struct qc_dqblk *) ;
   int (*get_state)(struct super_block *, struct qc_state *) ;
   int (*rm_xquota)(struct super_block *, unsigned int ) ;
};
#line 443  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct quota_format_type {
   int qf_fmt_id ;
   struct quota_format_ops *qf_ops ;
   struct module *qf_owner ;
   struct quota_format_type *qf_next ;
};
#line 518  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct quota_info {
   unsigned int flags ;
   struct rw_semaphore dqio_sem ;
   struct inode *files[3U] ;
   struct mem_dqinfo info[3U] ;
   struct quota_format_ops *ops[3U] ;
};
#line 538 
enum rw_hint {
    WRITE_LIFE_NOT_SET = 0,
    WRITE_LIFE_NONE = 1,
    WRITE_LIFE_SHORT = 2,
    WRITE_LIFE_MEDIUM = 3,
    WRITE_LIFE_LONG = 4,
    WRITE_LIFE_EXTREME = 5
};
#line 318  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct kiocb {
   struct file *ki_filp ;
   loff_t ki_pos ;
   void (*ki_complete)(struct kiocb *, long , long ) ;
   void *private ;
   int ki_flags ;
   u16 ki_hint ;
   u16 ki_ioprio ;
   unsigned int ki_cookie ;
};
#line 362  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct address_space_operations {
   int (*writepage)(struct page *, struct writeback_control *) ;
   int (*readpage)(struct file *, struct page *) ;
   int (*writepages)(struct address_space *, struct writeback_control *) ;
   int (*set_page_dirty)(struct page *) ;
   int (*readpages)(struct file *, struct address_space *, struct list_head *, unsigned int ) ;
   int (*write_begin)(struct file *, struct address_space *, loff_t , unsigned int , unsigned int , struct page **, void **) ;
   int (*write_end)(struct file *, struct address_space *, loff_t , unsigned int , unsigned int , struct page *, void *) ;
   sector_t (*bmap)(struct address_space *, sector_t ) ;
   void (*invalidatepage)(struct page *, unsigned int , unsigned int ) ;
   int (*releasepage)(struct page *, gfp_t ) ;
   void (*freepage)(struct page *) ;
   ssize_t (*direct_IO)(struct kiocb *, struct iov_iter *) ;
   int (*migratepage)(struct address_space *, struct page *, struct page *, enum migrate_mode ) ;
   bool (*isolate_page)(struct page *, isolate_mode_t ) ;
   void (*putback_page)(struct page *) ;
   int (*launder_page)(struct page *) ;
   int (*is_partially_uptodate)(struct page *, unsigned long , unsigned long ) ;
   void (*is_dirty_writeback)(struct page *, bool *, bool *) ;
   int (*error_remove_page)(struct address_space *, struct page *) ;
   int (*swap_activate)(struct swap_info_struct *, struct file *, sector_t *) ;
   void (*swap_deactivate)(struct file *) ;
};
#line 445  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct address_space {
   struct inode *host ;
   struct xarray i_pages ;
   gfp_t gfp_mask ;
   atomic_t i_mmap_writable ;
   atomic_t nr_thps ;
   struct rb_root_cached i_mmap ;
   struct rw_semaphore i_mmap_rwsem ;
   unsigned long nrpages ;
   unsigned long nrexceptional ;
   unsigned long writeback_index ;
   struct address_space_operations *a_ops ;
   unsigned long flags ;
   errseq_t wb_err ;
   spinlock_t private_lock ;
   struct list_head private_list ;
   void *private_data ;
} __attribute__((__designated_init__, __aligned__(8)));
#line 473  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct block_device {
   dev_t bd_dev ;
   int bd_openers ;
   struct inode *bd_inode ;
   struct super_block *bd_super ;
   struct mutex bd_mutex ;
   void *bd_claiming ;
   void *bd_holder ;
   int bd_holders ;
   bool bd_write_holder ;
   struct list_head bd_holder_disks ;
   struct block_device *bd_contains ;
   unsigned int bd_block_size ;
   u8 bd_partno ;
   struct hd_struct *bd_part ;
   unsigned int bd_part_count ;
   int bd_invalidated ;
   struct gendisk *bd_disk ;
   struct request_queue *bd_queue ;
   struct backing_dev_info *bd_bdi ;
   struct list_head bd_list ;
   unsigned long bd_private ;
   int bd_fsfreeze_count ;
   struct mutex bd_fsfreeze_mutex ;
} __attribute__((__designated_init__));
#line 587 
struct posix_acl;
#line 614 
struct fsnotify_mark_connector;
#line 628 
struct inode_operations;
#line 628  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
union __anonunion_427 {
   unsigned int i_nlink ;
   unsigned int __i_nlink ;
};
#line 628  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
union __anonunion_428 {
   struct hlist_head i_dentry ;
   struct callback_head i_rcu ;
};
#line 628  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
union __anonunion_429 {
   struct file_operations *i_fop ;
   void (*free_inode)(struct inode *) ;
};
#line 628 
struct file_lock_context;
#line 628  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
union __anonunion_430 {
   struct pipe_inode_info *i_pipe ;
   struct block_device *i_bdev ;
   struct cdev *i_cdev ;
   char *i_link ;
   unsigned int i_dir_seq ;
};
#line 628  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct inode {
   umode_t i_mode ;
   unsigned short i_opflags ;
   kuid_t i_uid ;
   kgid_t i_gid ;
   unsigned int i_flags ;
   struct posix_acl *i_acl ;
   struct posix_acl *i_default_acl ;
   struct inode_operations *i_op ;
   struct super_block *i_sb ;
   struct address_space *i_mapping ;
   void *i_security ;
   unsigned long i_ino ;
   union __anonunion_427 __anonCompField_inode_65 ;
   dev_t i_rdev ;
   loff_t i_size ;
   struct timespec64 i_atime ;
   struct timespec64 i_mtime ;
   struct timespec64 i_ctime ;
   spinlock_t i_lock ;
   unsigned short i_bytes ;
   u8 i_blkbits ;
   u8 i_write_hint ;
   blkcnt_t i_blocks ;
   unsigned long i_state ;
   struct rw_semaphore i_rwsem ;
   unsigned long dirtied_when ;
   unsigned long dirtied_time_when ;
   struct hlist_node i_hash ;
   struct list_head i_io_list ;
   struct bdi_writeback *i_wb ;
   int i_wb_frn_winner ;
   u16 i_wb_frn_avg_time ;
   u16 i_wb_frn_history ;
   struct list_head i_lru ;
   struct list_head i_sb_list ;
   struct list_head i_wb_list ;
   union __anonunion_428 __anonCompField_inode_66 ;
   atomic64_t i_version ;
   atomic_t i_count ;
   atomic_t i_dio_count ;
   atomic_t i_writecount ;
   atomic_t i_readcount ;
   union __anonunion_429 __anonCompField_inode_67 ;
   struct file_lock_context *i_flctx ;
   struct address_space i_data ;
   struct list_head i_devices ;
   union __anonunion_430 __anonCompField_inode_68 ;
   __u32 i_generation ;
   __u32 i_fsnotify_mask ;
   struct fsnotify_mark_connector *i_fsnotify_marks ;
   struct fscrypt_info *i_crypt_info ;
   struct fsverity_info *i_verity_info ;
   void *i_private ;
} __attribute__((__designated_init__));
#line 904  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct fown_struct {
   rwlock_t lock ;
   struct pid *pid ;
   enum pid_type pid_type ;
   kuid_t uid ;
   kuid_t euid ;
   int signum ;
};
#line 915  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct file_ra_state {
   unsigned long start ;
   unsigned int size ;
   unsigned int async_size ;
   unsigned int ra_pages ;
   unsigned int mmap_miss ;
   loff_t prev_pos ;
};
#line 935  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
union __anonunion_f_u_431 {
   struct llist_node fu_llist ;
   struct callback_head fu_rcuhead ;
};
#line 935  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct file {
   union __anonunion_f_u_431 f_u ;
   struct path f_path ;
   struct inode *f_inode ;
   struct file_operations *f_op ;
   spinlock_t f_lock ;
   enum rw_hint f_write_hint ;
   atomic_long_t f_count ;
   unsigned int f_flags ;
   fmode_t f_mode ;
   struct mutex f_pos_lock ;
   loff_t f_pos ;
   struct fown_struct f_owner ;
   struct cred *f_cred ;
   struct file_ra_state f_ra ;
   u64 f_version ;
   void *f_security ;
   void *private_data ;
   struct list_head f_ep_links ;
   struct list_head f_tfile_llink ;
   struct address_space *f_mapping ;
   errseq_t f_wb_err ;
} __attribute__((__designated_init__, __aligned__(4)));
#line 988  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
typedef void *fl_owner_t;
#line 1026 
struct file_lock;
#line 1029  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct file_lock_operations {
   void (*fl_copy_lock)(struct file_lock *, struct file_lock *) ;
   void (*fl_release_private)(struct file_lock *) ;
};
#line 1034  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct lock_manager_operations {
   fl_owner_t (*lm_get_owner)(fl_owner_t ) ;
   void (*lm_put_owner)(fl_owner_t ) ;
   void (*lm_notify)(struct file_lock *) ;
   int (*lm_grant)(struct file_lock *, int ) ;
   bool (*lm_break)(struct file_lock *) ;
   int (*lm_change)(struct file_lock *, int , struct list_head *) ;
   void (*lm_setup)(struct file_lock *, void **) ;
};
#line 1052 
struct net;
#line 1058 
struct nlm_lockowner;
#line 10  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/nfs_fs_i.h"
struct nfs_lock_info {
   u32 state ;
   struct nlm_lockowner *owner ;
   struct list_head list ;
};
#line 15 
struct nfs4_lock_state;
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/nfs_fs_i.h"
struct nfs4_lock_info {
   struct nfs4_lock_state *owner ;
};
#line 1079  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct fasync_struct;
#line 1079  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct __anonstruct_afs_433 {
   struct list_head link ;
   int state ;
   unsigned int debug_id ;
};
#line 1079  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
union __anonunion_fl_u_432 {
   struct nfs_lock_info nfs_fl ;
   struct nfs4_lock_info nfs4_fl ;
   struct __anonstruct_afs_433 afs ;
};
#line 1079  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct file_lock {
   struct file_lock *fl_blocker ;
   struct list_head fl_list ;
   struct hlist_node fl_link ;
   struct list_head fl_blocked_requests ;
   struct list_head fl_blocked_member ;
   fl_owner_t fl_owner ;
   unsigned int fl_flags ;
   unsigned char fl_type ;
   unsigned int fl_pid ;
   int fl_link_cpu ;
   wait_queue_head_t fl_wait ;
   struct file *fl_file ;
   loff_t fl_start ;
   loff_t fl_end ;
   struct fasync_struct *fl_fasync ;
   unsigned long fl_break_time ;
   unsigned long fl_downgrade_time ;
   struct file_lock_operations *fl_ops ;
   struct lock_manager_operations *fl_lmops ;
   union __anonunion_fl_u_432 fl_u ;
} __attribute__((__designated_init__));
#line 1117  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct file_lock_context {
   spinlock_t flc_lock ;
   struct list_head flc_flock ;
   struct list_head flc_posix ;
   struct list_head flc_lease ;
};
#line 1331  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct fasync_struct {
   rwlock_t fa_lock ;
   int magic ;
   int fa_fd ;
   struct fasync_struct *fa_next ;
   struct file *fa_file ;
   struct callback_head fa_rcu ;
};
#line 1418  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct sb_writers {
   int frozen ;
   wait_queue_head_t wait_unfrozen ;
   struct percpu_rw_semaphore rw_sem[3U] ;
};
#line 1424 
struct super_operations;
#line 1424 
struct xattr_handler;
#line 1424 
struct mtd_info;
#line 1424  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct super_block {
   struct list_head s_list ;
   dev_t s_dev ;
   unsigned char s_blocksize_bits ;
   unsigned long s_blocksize ;
   loff_t s_maxbytes ;
   struct file_system_type *s_type ;
   struct super_operations *s_op ;
   struct dquot_operations *dq_op ;
   struct quotactl_ops *s_qcop ;
   struct export_operations *s_export_op ;
   unsigned long s_flags ;
   unsigned long s_iflags ;
   unsigned long s_magic ;
   struct dentry *s_root ;
   struct rw_semaphore s_umount ;
   int s_count ;
   atomic_t s_active ;
   void *s_security ;
   struct xattr_handler **s_xattr ;
   struct fscrypt_operations *s_cop ;
   struct key *s_master_keys ;
   struct fsverity_operations *s_vop ;
   struct hlist_bl_head s_roots ;
   struct list_head s_mounts ;
   struct block_device *s_bdev ;
   struct backing_dev_info *s_bdi ;
   struct mtd_info *s_mtd ;
   struct hlist_node s_instances ;
   unsigned int s_quota_types ;
   struct quota_info s_dquot ;
   struct sb_writers s_writers ;
   void *s_fs_info ;
   u32 s_time_gran ;
   time64_t s_time_min ;
   time64_t s_time_max ;
   __u32 s_fsnotify_mask ;
   struct fsnotify_mark_connector *s_fsnotify_marks ;
   char s_id[32U] ;
   uuid_t s_uuid ;
   unsigned int s_max_links ;
   fmode_t s_mode ;
   struct mutex s_vfs_rename_mutex ;
   char *s_subtype ;
   struct dentry_operations *s_d_op ;
   int cleancache_poolid ;
   struct shrinker s_shrink ;
   atomic_long_t s_remove_count ;
   atomic_long_t s_fsnotify_inode_refs ;
   int s_readonly_remount ;
   struct workqueue_struct *s_dio_done_wq ;
   struct hlist_head s_pins ;
   struct user_namespace *s_user_ns ;
   struct list_lru s_dentry_lru ;
   struct list_lru s_inode_lru ;
   struct callback_head rcu ;
   struct work_struct destroy_work ;
   struct mutex s_sync_lock ;
   int s_stack_depth ;
   spinlock_t s_inode_list_lock ;
   struct list_head s_inodes ;
   spinlock_t s_inode_wblist_lock ;
   struct list_head s_inodes_wb ;
} __attribute__((__designated_init__));
#line 1746  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct fiemap_extent_info {
   unsigned int fi_flags ;
   unsigned int fi_extents_mapped ;
   unsigned int fi_extents_max ;
   struct fiemap_extent *fi_extents_start ;
};
#line 1756 
struct dir_context;
#line 1767  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct dir_context {
   int (*actor)(struct dir_context *, char *, int , loff_t , u64 , unsigned int ) ;
   loff_t pos ;
};
#line 1821  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct file_operations {
   struct module *owner ;
   loff_t (*llseek)(struct file *, loff_t , int ) ;
   ssize_t (*read)(struct file *, char *, size_t , loff_t *) ;
   ssize_t (*write)(struct file *, char *, size_t , loff_t *) ;
   ssize_t (*read_iter)(struct kiocb *, struct iov_iter *) ;
   ssize_t (*write_iter)(struct kiocb *, struct iov_iter *) ;
   int (*iopoll)(struct kiocb *, bool ) ;
   int (*iterate)(struct file *, struct dir_context *) ;
   int (*iterate_shared)(struct file *, struct dir_context *) ;
   __poll_t (*poll)(struct file *, struct poll_table_struct *) ;
   long (*unlocked_ioctl)(struct file *, unsigned int , unsigned long ) ;
   long (*compat_ioctl)(struct file *, unsigned int , unsigned long ) ;
   int (*mmap)(struct file *, struct vm_area_struct *) ;
   unsigned long mmap_supported_flags ;
   int (*open)(struct inode *, struct file *) ;
   int (*flush)(struct file *, fl_owner_t ) ;
   int (*release)(struct inode *, struct file *) ;
   int (*fsync)(struct file *, loff_t , loff_t , int ) ;
   int (*fasync)(int , struct file *, int ) ;
   int (*lock)(struct file *, int , struct file_lock *) ;
   ssize_t (*sendpage)(struct file *, struct page *, int , size_t , loff_t *, int ) ;
   unsigned long (*get_unmapped_area)(struct file *, unsigned long , unsigned long , unsigned long , unsigned long ) ;
   int (*check_flags)(int ) ;
   int (*flock)(struct file *, int , struct file_lock *) ;
   ssize_t (*splice_write)(struct pipe_inode_info *, struct file *, loff_t *, size_t , unsigned int ) ;
   ssize_t (*splice_read)(struct file *, loff_t *, struct pipe_inode_info *, size_t , unsigned int ) ;
   int (*setlease)(struct file *, long , struct file_lock **, void **) ;
   long (*fallocate)(struct file *, int , loff_t , loff_t ) ;
   void (*show_fdinfo)(struct seq_file *, struct file *) ;
   ssize_t (*copy_file_range)(struct file *, loff_t , struct file *, loff_t , size_t , unsigned int ) ;
   loff_t (*remap_file_range)(struct file *, loff_t , struct file *, loff_t , loff_t , unsigned int ) ;
   int (*fadvise)(struct file *, loff_t , loff_t , int ) ;
} __attribute__((__designated_init__));
#line 1863  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct inode_operations {
   struct dentry *(*lookup)(struct inode *, struct dentry *, unsigned int ) ;
   char *(*get_link)(struct dentry *, struct inode *, struct delayed_call *) ;
   int (*permission)(struct inode *, int ) ;
   struct posix_acl *(*get_acl)(struct inode *, int ) ;
   int (*readlink)(struct dentry *, char *, int ) ;
   int (*create)(struct inode *, struct dentry *, umode_t , bool ) ;
   int (*link)(struct dentry *, struct inode *, struct dentry *) ;
   int (*unlink)(struct inode *, struct dentry *) ;
   int (*symlink)(struct inode *, struct dentry *, char *) ;
   int (*mkdir)(struct inode *, struct dentry *, umode_t ) ;
   int (*rmdir)(struct inode *, struct dentry *) ;
   int (*mknod)(struct inode *, struct dentry *, umode_t , dev_t ) ;
   int (*rename)(struct inode *, struct dentry *, struct inode *, struct dentry *, unsigned int ) ;
   int (*setattr)(struct dentry *, struct iattr *) ;
   int (*getattr)(struct path *, struct kstat *, u32 , unsigned int ) ;
   ssize_t (*listxattr)(struct dentry *, char *, size_t ) ;
   int (*fiemap)(struct inode *, struct fiemap_extent_info *, u64 , u64 ) ;
   int (*update_time)(struct inode *, struct timespec64 *, int ) ;
   int (*atomic_open)(struct inode *, struct dentry *, struct file *, unsigned int , umode_t ) ;
   int (*tmpfile)(struct inode *, struct dentry *, umode_t ) ;
   int (*set_acl)(struct inode *, struct posix_acl *, int ) ;
} __attribute__((__aligned__(64)));
#line 1942  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct super_operations {
   struct inode *(*alloc_inode)(struct super_block *) ;
   void (*destroy_inode)(struct inode *) ;
   void (*free_inode)(struct inode *) ;
   void (*dirty_inode)(struct inode *, int ) ;
   int (*write_inode)(struct inode *, struct writeback_control *) ;
   int (*drop_inode)(struct inode *) ;
   void (*evict_inode)(struct inode *) ;
   void (*put_super)(struct super_block *) ;
   int (*sync_fs)(struct super_block *, int ) ;
   int (*freeze_super)(struct super_block *) ;
   int (*freeze_fs)(struct super_block *) ;
   int (*thaw_super)(struct super_block *) ;
   int (*unfreeze_fs)(struct super_block *) ;
   int (*statfs)(struct dentry *, struct kstatfs *) ;
   int (*remount_fs)(struct super_block *, int *, char *) ;
   void (*umount_begin)(struct super_block *) ;
   int (*show_options)(struct seq_file *, struct dentry *) ;
   int (*show_devname)(struct seq_file *, struct dentry *) ;
   int (*show_path)(struct seq_file *, struct dentry *) ;
   int (*show_stats)(struct seq_file *, struct dentry *) ;
   ssize_t (*quota_read)(struct super_block *, int , char *, size_t , loff_t ) ;
   ssize_t (*quota_write)(struct super_block *, int , char *, size_t , loff_t ) ;
   struct dquot **(*get_dquots)(struct inode *) ;
   int (*bdev_try_to_free_page)(struct super_block *, struct page *, gfp_t ) ;
   long (*nr_cached_objects)(struct super_block *, struct shrink_control *) ;
   long (*free_cached_objects)(struct super_block *, struct shrink_control *) ;
};
#line 2217  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct file_system_type {
   char *name ;
   int fs_flags ;
   int (*init_fs_context)(struct fs_context *) ;
   struct fs_parameter_description *parameters ;
   struct dentry *(*mount)(struct file_system_type *, int , char *, void *) ;
   void (*kill_sb)(struct super_block *) ;
   struct module *owner ;
   struct file_system_type *next ;
   struct hlist_head fs_supers ;
   struct lock_class_key s_lock_key ;
   struct lock_class_key s_umount_key ;
   struct lock_class_key s_vfs_rename_key ;
   struct lock_class_key s_writers_key[3U] ;
   struct lock_class_key i_lock_key ;
   struct lock_class_key i_mutex_key ;
   struct lock_class_key i_mutex_dir_key ;
};
#line 1565  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm.h"
struct kvec;
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/scatterlist.h"
struct scatterlist {
   unsigned long page_link ;
   unsigned int offset ;
   unsigned int length ;
   dma_addr_t dma_address ;
   unsigned int dma_length ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/scatterlist.h"
struct sg_table {
   struct scatterlist *sgl ;
   unsigned int nents ;
   unsigned int orig_nents ;
};
#line 1424  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
struct msix_entry {
   u32 vector ;
   u16 entry ;
};
#line 71  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-debug.h"
enum dma_data_direction {
    DMA_BIDIRECTIONAL = 0,
    DMA_TO_DEVICE = 1,
    DMA_FROM_DEVICE = 2,
    DMA_NONE = 3
};
#line 76  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
struct dma_map_ops {
   void *(*alloc)(struct device *, size_t , dma_addr_t *, gfp_t , unsigned long ) ;
   void (*free)(struct device *, size_t , void *, dma_addr_t , unsigned long ) ;
   int (*mmap)(struct device *, struct vm_area_struct *, void *, dma_addr_t , size_t , unsigned long ) ;
   int (*get_sgtable)(struct device *, struct sg_table *, void *, dma_addr_t , size_t , unsigned long ) ;
   dma_addr_t (*map_page)(struct device *, struct page *, unsigned long , size_t , enum dma_data_direction , unsigned long ) ;
   void (*unmap_page)(struct device *, dma_addr_t , size_t , enum dma_data_direction , unsigned long ) ;
   int (*map_sg)(struct device *, struct scatterlist *, int , enum dma_data_direction , unsigned long ) ;
   void (*unmap_sg)(struct device *, struct scatterlist *, int , enum dma_data_direction , unsigned long ) ;
   dma_addr_t (*map_resource)(struct device *, phys_addr_t , size_t , enum dma_data_direction , unsigned long ) ;
   void (*unmap_resource)(struct device *, dma_addr_t , size_t , enum dma_data_direction , unsigned long ) ;
   void (*sync_single_for_cpu)(struct device *, dma_addr_t , size_t , enum dma_data_direction ) ;
   void (*sync_single_for_device)(struct device *, dma_addr_t , size_t , enum dma_data_direction ) ;
   void (*sync_sg_for_cpu)(struct device *, struct scatterlist *, int , enum dma_data_direction ) ;
   void (*sync_sg_for_device)(struct device *, struct scatterlist *, int , enum dma_data_direction ) ;
   void (*cache_sync)(struct device *, void *, size_t , enum dma_data_direction ) ;
   int (*dma_supported)(struct device *, u64 ) ;
   u64 (*get_required_mask)(struct device *) ;
   size_t (*max_mapping_size)(struct device *) ;
   unsigned long (*get_merge_boundary)(struct device *) ;
};
#line 67  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/delay.h"
enum vnic_res_type {
    RES_TYPE_EOL = 0,
    RES_TYPE_WQ = 1,
    RES_TYPE_RQ = 2,
    RES_TYPE_CQ = 3,
    RES_TYPE_RSVD1 = 4,
    RES_TYPE_NIC_CFG = 5,
    RES_TYPE_RSVD2 = 6,
    RES_TYPE_RSVD3 = 7,
    RES_TYPE_RSVD4 = 8,
    RES_TYPE_RSVD5 = 9,
    RES_TYPE_INTR_CTRL = 10,
    RES_TYPE_INTR_TABLE = 11,
    RES_TYPE_INTR_PBA = 12,
    RES_TYPE_INTR_PBA_LEGACY = 13,
    RES_TYPE_RSVD6 = 14,
    RES_TYPE_RSVD7 = 15,
    RES_TYPE_DEVCMD = 16,
    RES_TYPE_PASS_THRU_PAGE = 17,
    RES_TYPE_SUBVNIC = 18,
    RES_TYPE_MQ_WQ = 19,
    RES_TYPE_MQ_RQ = 20,
    RES_TYPE_MQ_CQ = 21,
    RES_TYPE_DEPRECATED1 = 22,
    RES_TYPE_DEPRECATED2 = 23,
    RES_TYPE_DEVCMD2 = 24,
    RES_TYPE_MAX = 25
};
#line 82  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/vnic_resource.h"
enum vnic_devcmd_cmd {
    CMD_NONE = 0,
    CMD_MCPU_FW_INFO_OLD = 1073856513,
    CMD_MCPU_FW_INFO = 3221340161,
    CMD_DEV_SPEC = 3221340162,
    CMD_STATS_CLEAR = 16891907,
    CMD_STATS_DUMP = 1073856516,
    CMD_PACKET_FILTER = 1090535431,
    CMD_PACKET_FILTER_ALL = 1090633735,
    CMD_HANG_NOTIFY = 114696,
    CMD_GET_MAC_ADDR = 2147532809,
    CMD_ADDR_ADD = 1090568204,
    CMD_ADDR_DEL = 1090568205,
    CMD_VLAN_ADD = 1090535438,
    CMD_VLAN_DEL = 1090535439,
    CMD_NIC_CFG = 1090633744,
    CMD_NIC_CFG_CHK = 1073856528,
    CMD_RSS_KEY = 1073758225,
    CMD_RSS_CPU = 1073758226,
    CMD_SOFT_RESET = 16891923,
    CMD_SOFT_RESET_STATUS = 2147598356,
    CMD_NOTIFY = 3221340181,
    CMD_UNDI = 1073758230,
    CMD_OPEN = 1090633751,
    CMD_OPEN_STATUS = 2147598360,
    CMD_CLOSE = 114713,
    CMD_INIT_v1 = 2164375578,
    CMD_INIT_PROV_INFO = 1073758235,
    CMD_ENABLE = 1090633756,
    CMD_ENABLE_WAIT = 1073856540,
    CMD_DISABLE = 114717,
    CMD_STATS_DUMP_ALL = 1073856542,
    CMD_INIT_STATUS = 2147598367,
    CMD_INT13 = 1073774624,
    CMD_LOGICAL_UPLINK = 1090535457,
    CMD_DEINIT = 16891938,
    CMD_INIT = 1090633763,
    CMD_CAPABILITY = 3221340196,
    CMD_PERBI = 3221258277,
    CMD_IAR = 1090633766,
    CMD_HANG_RESET = 114727,
    CMD_HANG_RESET_STATUS = 2147598376,
    CMD_IG_VLAN_REWRITE_MODE = 3221241897,
    CMD_PROXY_BY_BDF = 3221340202,
    CMD_PROXY_BY_INDEX = 3221340203,
    CMD_CONFIG_INFO_GET = 3221340204,
    CMD_INT13_ALL = 1073856557,
    CMD_SET_DEFAULT_VLAN = 3221340206,
    CMD_INIT_PROV_INFO2 = 1073758255,
    CMD_ENABLE2 = 1073758256,
    CMD_STATUS = 3221340209,
    CMD_INTR_COAL_CONVERT = 2147598386,
    CMD_SET_MAC_ADDR = 1073758263,
    CMD_PROV_INFO_UPDATE = 1073758264,
    CMD_INITIALIZE_DEVCMD2 = 1073856569,
    CMD_ADD_FILTER = 3221241914,
    CMD_DEL_FILTER = 1073758267,
    CMD_QP_ENABLE = 1073758268,
    CMD_QP_DISABLE = 1073758269,
    CMD_QP_STATS_DUMP = 1073758270,
    CMD_QP_STATS_CLEAR = 1073758271,
    CMD_GET_SUPP_FEATURE_VER = 3221241925,
    CMD_OVERLAY_OFFLOAD_CTRL = 1073758280,
    CMD_OVERLAY_OFFLOAD_CFG = 1073758281
};
#line 510  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/vnic_devcmd.h"
struct vnic_devcmd_fw_info {
   char fw_version[32U] ;
   char fw_build[32U] ;
   char hw_version[32U] ;
   char hw_serial_number[32U] ;
   u16 asic_type ;
   u16 asic_rev ;
};
#line 519  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/vnic_devcmd.h"
struct vnic_devcmd_notify {
   u32 csum ;
   u32 link_state ;
   u32 port_speed ;
   u32 mtu ;
   u32 msglvl ;
   u32 uif ;
   u32 status ;
   u32 error ;
   u32 link_down_cnt ;
   u32 perbi_rebuild_cnt ;
};
#line 676  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/vnic_devcmd.h"
struct vnic_devcmd {
   u32 status ;
   u32 cmd ;
   u64 args[15U] ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/vnic_devcmd.h"
struct vnic_devcmd2 {
   u16 pad ;
   u16 flags ;
   u32 cmd ;
   u64 args[15U] ;
};
#line 693  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/vnic_devcmd.h"
struct devcmd2_result {
   u64 results[15U] ;
   u32 pad ;
   u16 completed_index ;
   u8 error ;
   u8 color ;
};
#line 720 
enum vnic_dev_intr_mode {
    VNIC_DEV_INTR_MODE_UNKNOWN = 0,
    VNIC_DEV_INTR_MODE_INTX = 1,
    VNIC_DEV_INTR_MODE_MSI = 2,
    VNIC_DEV_INTR_MODE_MSIX = 3
};
#line 54  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/vnic_dev.h"
struct vnic_dev_bar {
   void *vaddr ;
   dma_addr_t bus_addr ;
   unsigned long len ;
};
#line 60  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/vnic_dev.h"
struct vnic_dev_ring {
   void *descs ;
   size_t size ;
   dma_addr_t base_addr ;
   size_t base_align ;
   void *descs_unaligned ;
   size_t size_unaligned ;
   dma_addr_t base_addr_unaligned ;
   unsigned int desc_size ;
   unsigned int desc_count ;
   unsigned int desc_avail ;
};
#line 72 
enum vnic_proxy_type {
    PROXY_NONE = 0,
    PROXY_BY_BDF = 1,
    PROXY_BY_INDEX = 2
};
#line 79  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/vnic_dev.h"
struct vnic_res {
   void *vaddr ;
   dma_addr_t bus_addr ;
   unsigned int count ;
};
#line 85  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/vnic_dev.h"
struct vnic_intr_coal_timer_info {
   u32 mul ;
   u32 div ;
   u32 max_usec ;
};
#line 91 
struct vnic_stats;
#line 91 
struct devcmd2_controller;
#line 91  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/vnic_dev.h"
struct vnic_dev {
   void *priv ;
   struct pci_dev *pdev ;
   struct vnic_res res[25U] ;
   enum vnic_dev_intr_mode intr_mode ;
   struct vnic_devcmd *devcmd ;
   struct vnic_devcmd_notify *notify ;
   struct vnic_devcmd_notify notify_copy ;
   dma_addr_t notify_pa ;
   u32 notify_sz ;
   dma_addr_t linkstatus_pa ;
   struct vnic_stats *stats ;
   dma_addr_t stats_pa ;
   struct vnic_devcmd_fw_info *fw_info ;
   dma_addr_t fw_info_pa ;
   enum vnic_proxy_type proxy ;
   u32 proxy_index ;
   u64 args[15U] ;
   struct vnic_intr_coal_timer_info intr_coal_timer_info ;
   struct devcmd2_controller *devcmd2 ;
   int (*devcmd_rtn)(struct vnic_dev *, enum vnic_devcmd_cmd , int ) ;
};
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/vnic_cq.h"
struct vnic_cq_ctrl {
   u64 ring_base ;
   u32 ring_size ;
   u32 pad0 ;
   u32 flow_control_enable ;
   u32 pad1 ;
   u32 color_enable ;
   u32 pad2 ;
   u32 cq_head ;
   u32 pad3 ;
   u32 cq_tail ;
   u32 pad4 ;
   u32 cq_tail_color ;
   u32 pad5 ;
   u32 interrupt_enable ;
   u32 pad6 ;
   u32 cq_entry_enable ;
   u32 pad7 ;
   u32 cq_message_enable ;
   u32 pad8 ;
   u32 interrupt_offset ;
   u32 pad9 ;
   u64 cq_message_addr ;
   u32 pad10 ;
};
#line 53  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/vnic_cq.h"
struct vnic_rx_bytes_counter {
   unsigned int small_pkt_bytes_cnt ;
   unsigned int large_pkt_bytes_cnt ;
};
#line 58  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/vnic_cq.h"
struct vnic_cq {
   unsigned int index ;
   struct vnic_dev *vdev ;
   struct vnic_cq_ctrl *ctrl ;
   struct vnic_dev_ring ring ;
   unsigned int to_clean ;
   unsigned int last_color ;
   unsigned int interrupt_offset ;
   struct vnic_rx_bytes_counter pkt_size_counter ;
   unsigned int cur_rx_coal_timeval ;
   unsigned int tobe_rx_coal_timeval ;
   ktime_t prev_ts ;
};
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/vnic_wq.h"
struct vnic_wq_ctrl {
   u64 ring_base ;
   u32 ring_size ;
   u32 pad0 ;
   u32 posted_index ;
   u32 pad1 ;
   u32 cq_index ;
   u32 pad2 ;
   u32 enable ;
   u32 pad3 ;
   u32 running ;
   u32 pad4 ;
   u32 fetch_index ;
   u32 pad5 ;
   u32 dca_value ;
   u32 pad6 ;
   u32 error_interrupt_enable ;
   u32 pad7 ;
   u32 error_interrupt_offset ;
   u32 pad8 ;
   u32 error_status ;
   u32 pad9 ;
};
#line 53  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/vnic_wq.h"
struct vnic_wq_buf {
   struct vnic_wq_buf *next ;
   dma_addr_t dma_addr ;
   void *os_buf ;
   unsigned int len ;
   unsigned int index ;
   int sop ;
   void *desc ;
   uint64_t wr_id ;
   uint8_t cq_entry ;
   uint8_t desc_skip_cnt ;
   uint8_t compressed_send ;
   struct vnic_wq_buf *prev ;
};
#line 80  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/vnic_wq.h"
struct vnic_wq {
   unsigned int index ;
   struct vnic_dev *vdev ;
   struct vnic_wq_ctrl *ctrl ;
   struct vnic_dev_ring ring ;
   struct vnic_wq_buf *bufs[64U] ;
   struct vnic_wq_buf *to_use ;
   struct vnic_wq_buf *to_clean ;
   unsigned int pkts_outstanding ;
};
#line 91  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/vnic_wq.h"
struct devcmd2_controller {
   struct vnic_wq_ctrl *wq_ctrl ;
   struct vnic_devcmd2 *cmd_ring ;
   struct devcmd2_result *result ;
   u16 next_result ;
   u16 result_size ;
   int color ;
   struct vnic_dev_ring results_ring ;
   struct vnic_wq wq ;
   u32 posted ;
};
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/vnic_enet.h"
struct vnic_enet_config {
   u32 flags ;
   u32 wq_desc_count ;
   u32 rq_desc_count ;
   u16 mtu ;
   u16 intr_timer_deprecated ;
   u8 intr_timer_type ;
   u8 intr_mode ;
   char devname[16U] ;
   u32 intr_timer_usec ;
   u16 loop_tag ;
   u16 vf_rq_count ;
   u16 num_arfs ;
};
#line 41  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dynamic_queue_limits.h"
struct dql {
   unsigned int num_queued ;
   unsigned int adj_limit ;
   unsigned int last_obj_cnt ;
   unsigned int limit ;
   unsigned int num_completed ;
   unsigned int prev_ovlimit ;
   unsigned int prev_num_queued ;
   unsigned int prev_last_obj_cnt ;
   unsigned int lowest_slack ;
   unsigned long slack_start_time ;
   unsigned int max_limit ;
   unsigned int min_limit ;
   unsigned int slack_hold_time ;
};
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/uio.h"
struct iovec {
   void *iov_base ;
   __kernel_size_t iov_len ;
};
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uio.h"
struct kvec {
   void *iov_base ;
   size_t iov_len ;
};
#line 30 
struct bio_vec;
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uio.h"
union __anonunion_453 {
   struct iovec *iov ;
   struct kvec *kvec ;
   struct bio_vec *bvec ;
   struct pipe_inode_info *pipe ;
};
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uio.h"
struct __anonstruct_455 {
   unsigned int head ;
   unsigned int start_head ;
};
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uio.h"
union __anonunion_454 {
   unsigned long nr_segs ;
   struct __anonstruct_455 __anonCompField___anonunion_454_70 ;
};
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uio.h"
struct iov_iter {
   unsigned int type ;
   size_t iov_offset ;
   size_t count ;
   union __anonunion_453 __anonCompField_iov_iter_69 ;
   union __anonunion_454 __anonCompField_iov_iter_71 ;
};
#line 285  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uio.h"
typedef unsigned short __kernel_sa_family_t;
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/socket.h"
typedef __kernel_sa_family_t sa_family_t;
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/socket.h"
struct sockaddr {
   sa_family_t sa_family ;
   char sa_data[14U] ;
};
#line 422 
struct ns_common;
#line 423  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/socket.h"
struct __anonstruct_sync_serial_settings_458 {
   unsigned int clock_rate ;
   unsigned int clock_type ;
   unsigned short loopback ;
};
#line 423  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/socket.h"
typedef struct __anonstruct_sync_serial_settings_458 sync_serial_settings;
#line 45  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_te1_settings_459 {
   unsigned int clock_rate ;
   unsigned int clock_type ;
   unsigned short loopback ;
   unsigned int slot_map ;
};
#line 45  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_te1_settings_459 te1_settings;
#line 52  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_raw_hdlc_proto_460 {
   unsigned short encoding ;
   unsigned short parity ;
};
#line 52  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_raw_hdlc_proto_460 raw_hdlc_proto;
#line 57  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_fr_proto_461 {
   unsigned int t391 ;
   unsigned int t392 ;
   unsigned int n391 ;
   unsigned int n392 ;
   unsigned int n393 ;
   unsigned short lmi ;
   unsigned short dce ;
};
#line 57  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_fr_proto_461 fr_proto;
#line 67  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_fr_proto_pvc_462 {
   unsigned int dlci ;
};
#line 67  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_fr_proto_pvc_462 fr_proto_pvc;
#line 71  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_fr_proto_pvc_info_463 {
   unsigned int dlci ;
   char master[16U] ;
};
#line 71  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_fr_proto_pvc_info_463 fr_proto_pvc_info;
#line 76  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_cisco_proto_464 {
   unsigned int interval ;
   unsigned int timeout ;
};
#line 76  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_cisco_proto_464 cisco_proto;
#line 195  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if.h"
struct ifmap {
   unsigned long mem_start ;
   unsigned long mem_end ;
   unsigned short base_addr ;
   unsigned char irq ;
   unsigned char dma ;
   unsigned char port ;
};
#line 206  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if.h"
union __anonunion_ifs_ifsu_465 {
   raw_hdlc_proto *raw_hdlc ;
   cisco_proto *cisco ;
   fr_proto *fr ;
   fr_proto_pvc *fr_pvc ;
   fr_proto_pvc_info *fr_pvc_info ;
   sync_serial_settings *sync ;
   te1_settings *te1 ;
};
#line 206  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if.h"
struct if_settings {
   unsigned int type ;
   unsigned int size ;
   union __anonunion_ifs_ifsu_465 ifs_ifsu ;
};
#line 232  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if.h"
union __anonunion_ifr_ifrn_466 {
   char ifrn_name[16U] ;
};
#line 232  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if.h"
union __anonunion_ifr_ifru_467 {
   struct sockaddr ifru_addr ;
   struct sockaddr ifru_dstaddr ;
   struct sockaddr ifru_broadaddr ;
   struct sockaddr ifru_netmask ;
   struct sockaddr ifru_hwaddr ;
   short ifru_flags ;
   int ifru_ivalue ;
   int ifru_mtu ;
   struct ifmap ifru_map ;
   char ifru_slave[16U] ;
   char ifru_newname[16U] ;
   void *ifru_data ;
   struct if_settings ifru_settings ;
};
#line 232  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if.h"
struct ifreq {
   union __anonunion_ifr_ifrn_466 ifr_ifrn ;
   union __anonunion_ifr_ifru_467 ifr_ifru ;
};
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/compat.h"
typedef s32 compat_long_t;
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/compat.h"
typedef u32 compat_uptr_t;
#line 367  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/compat.h"
struct compat_robust_list {
   compat_uptr_t next ;
};
#line 371  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/compat.h"
struct compat_robust_list_head {
   struct compat_robust_list list ;
   compat_long_t futex_offset ;
   compat_uptr_t list_op_pending ;
};
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bvec.h"
struct bio_vec {
   struct page *bv_page ;
   unsigned int bv_len ;
   unsigned int bv_offset ;
};
#line 125  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/net.h"
struct sk_buff;
#line 162  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/checksum_64.h"
struct in6_addr;
#line 180  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/checksum.h"
typedef u64 netdev_features_t;
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/in6.h"
union __anonunion_in6_u_502 {
   __u8 u6_addr8[16U] ;
   __be16 u6_addr16[8U] ;
   __be32 u6_addr32[4U] ;
};
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/in6.h"
struct in6_addr {
   union __anonunion_in6_u_502 in6_u ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/in6.h"
struct __anonstruct_siphash_key_t_503 {
   u64 key[2U] ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/in6.h"
typedef struct __anonstruct_siphash_key_t_503 siphash_key_t;
#line 163  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if_ether.h"
struct ethhdr {
   unsigned char h_dest[6U] ;
   unsigned char h_source[6U] ;
   __be16 h_proto ;
} __attribute__((__packed__));
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pipe_fs_i.h"
struct pipe_buf_operations;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pipe_fs_i.h"
struct pipe_buffer {
   struct page *page ;
   unsigned int offset ;
   unsigned int len ;
   struct pipe_buf_operations *ops ;
   unsigned int flags ;
   unsigned long private ;
};
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pipe_fs_i.h"
struct pipe_inode_info {
   struct mutex mutex ;
   wait_queue_head_t wait ;
   unsigned int head ;
   unsigned int tail ;
   unsigned int max_usage ;
   unsigned int ring_size ;
   unsigned int readers ;
   unsigned int writers ;
   unsigned int files ;
   unsigned int r_counter ;
   unsigned int w_counter ;
   struct page *tmp_page ;
   struct fasync_struct *fasync_readers ;
   struct fasync_struct *fasync_writers ;
   struct pipe_buffer *bufs ;
   struct user_struct *user ;
};
#line 77  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pipe_fs_i.h"
struct pipe_buf_operations {
   int (*confirm)(struct pipe_inode_info *, struct pipe_buffer *) ;
   void (*release)(struct pipe_inode_info *, struct pipe_buffer *) ;
   int (*steal)(struct pipe_inode_info *, struct pipe_buffer *) ;
   bool (*get)(struct pipe_inode_info *, struct pipe_buffer *) ;
};
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netfilter/nf_conntrack_common.h"
struct ip_conntrack_stat {
   unsigned int found ;
   unsigned int invalid ;
   unsigned int ignore ;
   unsigned int insert ;
   unsigned int insert_failed ;
   unsigned int drop ;
   unsigned int early_drop ;
   unsigned int error ;
   unsigned int expect_new ;
   unsigned int expect_create ;
   unsigned int expect_delete ;
   unsigned int search_restart ;
};
#line 41 
struct napi_struct;
#line 43 
union bpf_attr;
#line 44 
struct skb_ext;
#line 289  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
struct sk_buff_head {
   struct sk_buff *next ;
   struct sk_buff *prev ;
   __u32 qlen ;
   spinlock_t lock ;
};
#line 562  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
typedef unsigned int sk_buff_data_t;
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_525 {
   struct net_device *dev ;
   unsigned long dev_scratch ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
struct __anonstruct_524 {
   struct sk_buff *next ;
   struct sk_buff *prev ;
   union __anonunion_525 __anonCompField___anonstruct_524_87 ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_523 {
   struct __anonstruct_524 __anonCompField___anonunion_523_88 ;
   struct rb_node rbnode ;
   struct list_head list ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_526 {
   struct sock *sk ;
   int ip_defrag_offset ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_527 {
   ktime_t tstamp ;
   u64 skb_mstamp_ns ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
struct __anonstruct_529 {
   unsigned long _skb_refdst ;
   void (*destructor)(struct sk_buff *) ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_528 {
   struct __anonstruct_529 __anonCompField___anonunion_528_92 ;
   struct list_head tcp_tsorted_anchor ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
struct __anonstruct_531 {
   __u16 csum_start ;
   __u16 csum_offset ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_530 {
   __wsum csum ;
   struct __anonstruct_531 __anonCompField___anonunion_530_94 ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_532 {
   unsigned int napi_id ;
   unsigned int sender_cpu ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_533 {
   __u32 mark ;
   __u32 reserved_tailroom ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_534 {
   __be16 inner_protocol ;
   __u8 inner_ipproto ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
struct sk_buff {
   union __anonunion_523 __anonCompField_sk_buff_89 ;
   union __anonunion_526 __anonCompField_sk_buff_90 ;
   union __anonunion_527 __anonCompField_sk_buff_91 ;
   char cb[48U] ;
   union __anonunion_528 __anonCompField_sk_buff_93 ;
   unsigned long _nfct ;
   unsigned int len ;
   unsigned int data_len ;
   __u16 mac_len ;
   __u16 hdr_len ;
   __u16 queue_mapping ;
   __u8 __cloned_offset[0U] ;
   __u8 cloned : 1 ;
   __u8 nohdr : 1 ;
   __u8 fclone : 2 ;
   __u8 peeked : 1 ;
   __u8 head_frag : 1 ;
   __u8 pfmemalloc : 1 ;
   __u8 active_extensions ;
   __u32 headers_start[0U] ;
   __u8 __pkt_type_offset[0U] ;
   __u8 pkt_type : 3 ;
   __u8 ignore_df : 1 ;
   __u8 nf_trace : 1 ;
   __u8 ip_summed : 2 ;
   __u8 ooo_okay : 1 ;
   __u8 l4_hash : 1 ;
   __u8 sw_hash : 1 ;
   __u8 wifi_acked_valid : 1 ;
   __u8 wifi_acked : 1 ;
   __u8 no_fcs : 1 ;
   __u8 encapsulation : 1 ;
   __u8 encap_hdr_csum : 1 ;
   __u8 csum_valid : 1 ;
   __u8 __pkt_vlan_present_offset[0U] ;
   __u8 vlan_present : 1 ;
   __u8 csum_complete_sw : 1 ;
   __u8 csum_level : 2 ;
   __u8 csum_not_inet : 1 ;
   __u8 dst_pending_confirm : 1 ;
   __u8 ndisc_nodetype : 2 ;
   __u8 ipvs_property : 1 ;
   __u8 inner_protocol_type : 1 ;
   __u8 remcsum_offload : 1 ;
   __u8 offload_fwd_mark : 1 ;
   __u8 offload_l3_fwd_mark : 1 ;
   __u8 tc_skip_classify : 1 ;
   __u8 tc_at_ingress : 1 ;
   __u8 tc_redirected : 1 ;
   __u8 tc_from_ingress : 1 ;
   __u8 decrypted : 1 ;
   __u16 tc_index ;
   union __anonunion_530 __anonCompField_sk_buff_95 ;
   __u32 priority ;
   int skb_iif ;
   __u32 hash ;
   __be16 vlan_proto ;
   __u16 vlan_tci ;
   union __anonunion_532 __anonCompField_sk_buff_96 ;
   __u32 secmark ;
   union __anonunion_533 __anonCompField_sk_buff_97 ;
   union __anonunion_534 __anonCompField_sk_buff_98 ;
   __u16 inner_transport_header ;
   __u16 inner_network_header ;
   __u16 inner_mac_header ;
   __be16 protocol ;
   __u16 transport_header ;
   __u16 network_header ;
   __u16 mac_header ;
   __u32 headers_end[0U] ;
   sk_buff_data_t tail ;
   sk_buff_data_t end ;
   unsigned char *head ;
   unsigned char *data ;
   unsigned int truesize ;
   refcount_t users ;
   struct skb_ext *extensions ;
};
#line 4108  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
struct skb_ext {
   refcount_t refcnt ;
   u8 offset[3U] ;
   u8 chunks ;
   char data[0U] ;
};
#line 177  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_drvinfo {
   __u32 cmd ;
   char driver[32U] ;
   char version[32U] ;
   char fw_version[32U] ;
   char bus_info[32U] ;
   char erom_version[32U] ;
   char reserved2[12U] ;
   __u32 n_priv_flags ;
   __u32 n_stats ;
   __u32 testinfo_len ;
   __u32 eedump_len ;
   __u32 regdump_len ;
};
#line 203  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_wolinfo {
   __u32 cmd ;
   __u32 supported ;
   __u32 wolopts ;
   __u8 sopass[6U] ;
};
#line 244  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_tunable {
   __u32 cmd ;
   __u32 id ;
   __u32 type_id ;
   __u32 len ;
   void *data[0U] ;
};
#line 310  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_regs {
   __u32 cmd ;
   __u32 version ;
   __u32 len ;
   __u8 data[0U] ;
};
#line 335  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_eeprom {
   __u32 cmd ;
   __u32 magic ;
   __u32 offset ;
   __u32 len ;
   __u8 data[0U] ;
};
#line 360  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_eee {
   __u32 cmd ;
   __u32 supported ;
   __u32 advertised ;
   __u32 lp_advertised ;
   __u32 eee_active ;
   __u32 eee_enabled ;
   __u32 tx_lpi_enabled ;
   __u32 tx_lpi_timer ;
   __u32 reserved[2U] ;
};
#line 382  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_modinfo {
   __u32 cmd ;
   __u32 type ;
   __u32 eeprom_len ;
   __u32 reserved[8U] ;
};
#line 462  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_coalesce {
   __u32 cmd ;
   __u32 rx_coalesce_usecs ;
   __u32 rx_max_coalesced_frames ;
   __u32 rx_coalesce_usecs_irq ;
   __u32 rx_max_coalesced_frames_irq ;
   __u32 tx_coalesce_usecs ;
   __u32 tx_max_coalesced_frames ;
   __u32 tx_coalesce_usecs_irq ;
   __u32 tx_max_coalesced_frames_irq ;
   __u32 stats_block_coalesce_usecs ;
   __u32 use_adaptive_rx_coalesce ;
   __u32 use_adaptive_tx_coalesce ;
   __u32 pkt_rate_low ;
   __u32 rx_coalesce_usecs_low ;
   __u32 rx_max_coalesced_frames_low ;
   __u32 tx_coalesce_usecs_low ;
   __u32 tx_max_coalesced_frames_low ;
   __u32 pkt_rate_high ;
   __u32 rx_coalesce_usecs_high ;
   __u32 rx_max_coalesced_frames_high ;
   __u32 tx_coalesce_usecs_high ;
   __u32 tx_max_coalesced_frames_high ;
   __u32 rate_sample_interval ;
};
#line 513  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_ringparam {
   __u32 cmd ;
   __u32 rx_max_pending ;
   __u32 rx_mini_max_pending ;
   __u32 rx_jumbo_max_pending ;
   __u32 tx_max_pending ;
   __u32 rx_pending ;
   __u32 rx_mini_pending ;
   __u32 rx_jumbo_pending ;
   __u32 tx_pending ;
};
#line 541  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_channels {
   __u32 cmd ;
   __u32 max_rx ;
   __u32 max_tx ;
   __u32 max_other ;
   __u32 max_combined ;
   __u32 rx_count ;
   __u32 tx_count ;
   __u32 other_count ;
   __u32 combined_count ;
};
#line 575  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_pauseparam {
   __u32 cmd ;
   __u32 autoneg ;
   __u32 rx_pause ;
   __u32 tx_pause ;
};
#line 683  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_test {
   __u32 cmd ;
   __u32 flags ;
   __u32 reserved ;
   __u32 len ;
   __u64 data[0U] ;
};
#line 702  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_stats {
   __u32 cmd ;
   __u32 n_stats ;
   __u64 data[0U] ;
};
#line 758  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_tcpip4_spec {
   __be32 ip4src ;
   __be32 ip4dst ;
   __be16 psrc ;
   __be16 pdst ;
   __u8 tos ;
};
#line 775  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_ah_espip4_spec {
   __be32 ip4src ;
   __be32 ip4dst ;
   __be32 spi ;
   __u8 tos ;
};
#line 793  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_usrip4_spec {
   __be32 ip4src ;
   __be32 ip4dst ;
   __be32 l4_4_bytes ;
   __u8 tos ;
   __u8 ip_ver ;
   __u8 proto ;
};
#line 812  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_tcpip6_spec {
   __be32 ip6src[4U] ;
   __be32 ip6dst[4U] ;
   __be16 psrc ;
   __be16 pdst ;
   __u8 tclass ;
};
#line 829  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_ah_espip6_spec {
   __be32 ip6src[4U] ;
   __be32 ip6dst[4U] ;
   __be32 spi ;
   __u8 tclass ;
};
#line 844  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_usrip6_spec {
   __be32 ip6src[4U] ;
   __be32 ip6dst[4U] ;
   __be32 l4_4_bytes ;
   __u8 tclass ;
   __u8 l4_proto ;
};
#line 852  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
union ethtool_flow_union {
   struct ethtool_tcpip4_spec tcp_ip4_spec ;
   struct ethtool_tcpip4_spec udp_ip4_spec ;
   struct ethtool_tcpip4_spec sctp_ip4_spec ;
   struct ethtool_ah_espip4_spec ah_ip4_spec ;
   struct ethtool_ah_espip4_spec esp_ip4_spec ;
   struct ethtool_usrip4_spec usr_ip4_spec ;
   struct ethtool_tcpip6_spec tcp_ip6_spec ;
   struct ethtool_tcpip6_spec udp_ip6_spec ;
   struct ethtool_tcpip6_spec sctp_ip6_spec ;
   struct ethtool_ah_espip6_spec ah_ip6_spec ;
   struct ethtool_ah_espip6_spec esp_ip6_spec ;
   struct ethtool_usrip6_spec usr_ip6_spec ;
   struct ethhdr ether_spec ;
   __u8 hdata[52U] ;
};
#line 880  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_flow_ext {
   __u8 padding[2U] ;
   unsigned char h_dest[6U] ;
   __be16 vlan_etype ;
   __be16 vlan_tci ;
   __be32 data[2U] ;
};
#line 905  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_rx_flow_spec {
   __u32 flow_type ;
   union ethtool_flow_union h_u ;
   struct ethtool_flow_ext h_ext ;
   union ethtool_flow_union m_u ;
   struct ethtool_flow_ext m_ext ;
   __u64 ring_cookie ;
   __u32 location ;
};
#line 1001  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
union __anonunion_560 {
   __u32 rule_cnt ;
   __u32 rss_context ;
};
#line 1001  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_rxnfc {
   __u32 cmd ;
   __u32 flow_type ;
   __u64 data ;
   struct ethtool_rx_flow_spec fs ;
   union __anonunion_560 __anonCompField_ethtool_rxnfc_100 ;
   __u32 rule_locs[0U] ;
};
#line 1130  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_flash {
   __u32 cmd ;
   __u32 region ;
   char data[128U] ;
};
#line 1150  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_dump {
   __u32 cmd ;
   __u32 version ;
   __u32 flag ;
   __u32 len ;
   __u8 data[0U] ;
};
#line 1230  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_ts_info {
   __u32 cmd ;
   __u32 so_timestamping ;
   __s32 phc_index ;
   __u32 tx_types ;
   __u32 tx_reserved[3U] ;
   __u32 rx_filters ;
   __u32 rx_reserved[3U] ;
};
#line 1302  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_fecparam {
   __u32 cmd ;
   __u32 active_fec ;
   __u32 fec ;
   __u32 reserved ;
};
#line 1876  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_link_settings {
   __u32 cmd ;
   __u32 speed ;
   __u8 duplex ;
   __u8 port ;
   __u8 phy_address ;
   __u8 autoneg ;
   __u8 mdio_support ;
   __u8 eth_tp_mdix ;
   __u8 eth_tp_mdix_ctrl ;
   __s8 link_mode_masks_nwords ;
   __u8 transceiver ;
   __u8 reserved1[3U] ;
   __u32 reserved[7U] ;
   __u32 link_mode_masks[0U] ;
};
#line 40  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ethtool.h"
enum ethtool_phys_id_state {
    ETHTOOL_ID_INACTIVE = 0,
    ETHTOOL_ID_ACTIVE = 1,
    ETHTOOL_ID_ON = 2,
    ETHTOOL_ID_OFF = 3
};
#line 108  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ethtool.h"
struct __anonstruct_link_modes_563 {
   unsigned long supported[2U] ;
   unsigned long advertising[2U] ;
   unsigned long lp_advertising[2U] ;
};
#line 108  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ethtool.h"
struct ethtool_link_ksettings {
   struct ethtool_link_settings base ;
   struct __anonstruct_link_modes_563 link_modes ;
};
#line 325  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ethtool.h"
struct ethtool_ops {
   void (*get_drvinfo)(struct net_device *, struct ethtool_drvinfo *) ;
   int (*get_regs_len)(struct net_device *) ;
   void (*get_regs)(struct net_device *, struct ethtool_regs *, void *) ;
   void (*get_wol)(struct net_device *, struct ethtool_wolinfo *) ;
   int (*set_wol)(struct net_device *, struct ethtool_wolinfo *) ;
   u32 (*get_msglevel)(struct net_device *) ;
   void (*set_msglevel)(struct net_device *, u32 ) ;
   int (*nway_reset)(struct net_device *) ;
   u32 (*get_link)(struct net_device *) ;
   int (*get_eeprom_len)(struct net_device *) ;
   int (*get_eeprom)(struct net_device *, struct ethtool_eeprom *, u8 *) ;
   int (*set_eeprom)(struct net_device *, struct ethtool_eeprom *, u8 *) ;
   int (*get_coalesce)(struct net_device *, struct ethtool_coalesce *) ;
   int (*set_coalesce)(struct net_device *, struct ethtool_coalesce *) ;
   void (*get_ringparam)(struct net_device *, struct ethtool_ringparam *) ;
   int (*set_ringparam)(struct net_device *, struct ethtool_ringparam *) ;
   void (*get_pauseparam)(struct net_device *, struct ethtool_pauseparam *) ;
   int (*set_pauseparam)(struct net_device *, struct ethtool_pauseparam *) ;
   void (*self_test)(struct net_device *, struct ethtool_test *, u64 *) ;
   void (*get_strings)(struct net_device *, u32 , u8 *) ;
   int (*set_phys_id)(struct net_device *, enum ethtool_phys_id_state ) ;
   void (*get_ethtool_stats)(struct net_device *, struct ethtool_stats *, u64 *) ;
   int (*begin)(struct net_device *) ;
   void (*complete)(struct net_device *) ;
   u32 (*get_priv_flags)(struct net_device *) ;
   int (*set_priv_flags)(struct net_device *, u32 ) ;
   int (*get_sset_count)(struct net_device *, int ) ;
   int (*get_rxnfc)(struct net_device *, struct ethtool_rxnfc *, u32 *) ;
   int (*set_rxnfc)(struct net_device *, struct ethtool_rxnfc *) ;
   int (*flash_device)(struct net_device *, struct ethtool_flash *) ;
   int (*reset)(struct net_device *, u32 *) ;
   u32 (*get_rxfh_key_size)(struct net_device *) ;
   u32 (*get_rxfh_indir_size)(struct net_device *) ;
   int (*get_rxfh)(struct net_device *, u32 *, u8 *, u8 *) ;
   int (*set_rxfh)(struct net_device *, u32 *, u8 *, u8 ) ;
   int (*get_rxfh_context)(struct net_device *, u32 *, u8 *, u8 *, u32 ) ;
   int (*set_rxfh_context)(struct net_device *, u32 *, u8 *, u8 , u32 *, bool ) ;
   void (*get_channels)(struct net_device *, struct ethtool_channels *) ;
   int (*set_channels)(struct net_device *, struct ethtool_channels *) ;
   int (*get_dump_flag)(struct net_device *, struct ethtool_dump *) ;
   int (*get_dump_data)(struct net_device *, struct ethtool_dump *, void *) ;
   int (*set_dump)(struct net_device *, struct ethtool_dump *) ;
   int (*get_ts_info)(struct net_device *, struct ethtool_ts_info *) ;
   int (*get_module_info)(struct net_device *, struct ethtool_modinfo *) ;
   int (*get_module_eeprom)(struct net_device *, struct ethtool_eeprom *, u8 *) ;
   int (*get_eee)(struct net_device *, struct ethtool_eee *) ;
   int (*set_eee)(struct net_device *, struct ethtool_eee *) ;
   int (*get_tunable)(struct net_device *, struct ethtool_tunable *, void *) ;
   int (*set_tunable)(struct net_device *, struct ethtool_tunable *, void *) ;
   int (*get_per_queue_coalesce)(struct net_device *, u32 , struct ethtool_coalesce *) ;
   int (*set_per_queue_coalesce)(struct net_device *, u32 , struct ethtool_coalesce *) ;
   int (*get_link_ksettings)(struct net_device *, struct ethtool_link_ksettings *) ;
   int (*set_link_ksettings)(struct net_device *, struct ethtool_link_ksettings *) ;
   int (*get_fecparam)(struct net_device *, struct ethtool_fecparam *) ;
   int (*set_fecparam)(struct net_device *, struct ethtool_fecparam *) ;
   void (*get_ethtool_phy_stats)(struct net_device *, struct ethtool_stats *, u64 *) ;
};
#line 822  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/sysctl.h"
struct ctl_table_root;
#line 823 
struct ctl_table_header;
#line 824 
struct ctl_dir;
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
typedef int proc_handler(struct ctl_table *, int , void *, size_t *, loff_t *);
#line 105  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct ctl_table_poll {
   atomic_t event ;
   wait_queue_head_t wait ;
};
#line 123  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct ctl_table {
   char *procname ;
   void *data ;
   int maxlen ;
   umode_t mode ;
   struct ctl_table *child ;
   proc_handler *proc_handler ;
   struct ctl_table_poll *poll ;
   void *extra1 ;
   void *extra2 ;
} __attribute__((__designated_init__));
#line 135  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct ctl_node {
   struct rb_node node ;
   struct ctl_table_header *header ;
};
#line 142  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct __anonstruct_565 {
   struct ctl_table *ctl_table ;
   int used ;
   int count ;
   int nreg ;
};
#line 142  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
union __anonunion_564 {
   struct __anonstruct_565 __anonCompField___anonunion_564_101 ;
   struct callback_head rcu ;
};
#line 142 
struct ctl_table_set;
#line 142  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct ctl_table_header {
   union __anonunion_564 __anonCompField_ctl_table_header_102 ;
   struct completion *unregistering ;
   struct ctl_table *ctl_table_arg ;
   struct ctl_table_root *root ;
   struct ctl_table_set *set ;
   struct ctl_dir *parent ;
   struct ctl_node *node ;
   struct hlist_head inodes ;
};
#line 161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct ctl_dir {
   struct ctl_table_header header ;
   struct rb_root root ;
};
#line 167  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct ctl_table_set {
   int (*is_seen)(struct ctl_table_set *) ;
   struct ctl_dir dir ;
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct ctl_table_root {
   struct ctl_table_set default_set ;
   struct ctl_table_set *(*lookup)(struct ctl_table_root *) ;
   void (*set_ownership)(struct ctl_table_header *, struct ctl_table *, kuid_t *, kgid_t *) ;
   int (*permissions)(struct ctl_table_header *, struct ctl_table *) ;
};
#line 242 
struct prot_inuse;
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/core.h"
struct netns_core {
   struct ctl_table_header *sysctl_hdr ;
   int sysctl_somaxconn ;
   int *sock_inuse ;
   struct prot_inuse *prot_inuse ;
};
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct u64_stats_sync {
   };
#line 36  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct __anonstruct_local_t_566 {
   atomic_long_t a ;
};
#line 36  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
typedef struct __anonstruct_local_t_566 local_t;
#line 119  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/local.h"
struct __anonstruct_local64_t_567 {
   local_t a ;
};
#line 119  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/local.h"
typedef struct __anonstruct_local64_t_567 local64_t;
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/local64.h"
struct __anonstruct_u64_stats_t_568 {
   local64_t v ;
};
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/local64.h"
typedef struct __anonstruct_u64_stats_t_568 u64_stats_t;
#line 51  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct ipstats_mib {
   u64 mibs[37U] ;
   struct u64_stats_sync syncp ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct icmp_mib {
   unsigned long mibs[28U] ;
};
#line 64  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct icmpmsg_mib {
   atomic_long_t mibs[512U] ;
};
#line 71  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct icmpv6_mib {
   unsigned long mibs[6U] ;
};
#line 81  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct icmpv6msg_mib {
   atomic_long_t mibs[512U] ;
};
#line 92  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct tcp_mib {
   unsigned long mibs[16U] ;
};
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct udp_mib {
   unsigned long mibs[9U] ;
};
#line 104  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct linux_mib {
   unsigned long mibs[120U] ;
};
#line 110  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct linux_xfrm_mib {
   unsigned long mibs[29U] ;
};
#line 116  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct linux_tls_mib {
   unsigned long mibs[11U] ;
};
#line 7  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/mib.h"
struct netns_mib {
   struct tcp_mib *tcp_statistics ;
   struct ipstats_mib *ip_statistics ;
   struct linux_mib *net_statistics ;
   struct udp_mib *udp_statistics ;
   struct udp_mib *udplite_statistics ;
   struct icmp_mib *icmp_statistics ;
   struct icmpmsg_mib *icmpmsg_statistics ;
   struct proc_dir_entry *proc_net_devsnmp6 ;
   struct udp_mib *udp_stats_in6 ;
   struct udp_mib *udplite_stats_in6 ;
   struct ipstats_mib *ipv6_statistics ;
   struct icmpv6_mib *icmpv6_statistics ;
   struct icmpv6msg_mib *icmpv6msg_statistics ;
   struct linux_xfrm_mib *xfrm_statistics ;
   struct linux_tls_mib *tls_statistics ;
};
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/unix.h"
struct netns_unix {
   int sysctl_max_dgram_qlen ;
   struct ctl_table_header *ctl ;
};
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/packet.h"
struct netns_packet {
   struct mutex sklist_lock ;
   struct hlist_head sklist ;
};
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_frag.h"
struct inet_frags;
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_frag.h"
struct fqdir {
   long high_thresh ;
   long low_thresh ;
   int timeout ;
   int max_dist ;
   struct inet_frags *f ;
   struct net *net ;
   bool dead ;
   struct rhashtable rhashtable ;
   atomic_long_t mem ;
   struct work_struct destroy_work ;
};
#line 41  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_frag.h"
struct frag_v4_compare_key {
   __be32 saddr ;
   __be32 daddr ;
   u32 user ;
   u32 vif ;
   __be16 id ;
   u16 protocol ;
};
#line 50  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_frag.h"
struct frag_v6_compare_key {
   struct in6_addr saddr ;
   struct in6_addr daddr ;
   u32 user ;
   __be32 id ;
   u32 iif ;
};
#line 77  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_frag.h"
union __anonunion_key_569 {
   struct frag_v4_compare_key v4 ;
   struct frag_v6_compare_key v6 ;
};
#line 77  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_frag.h"
struct inet_frag_queue {
   struct rhash_head node ;
   union __anonunion_key_569 key ;
   struct timer_list timer ;
   spinlock_t lock ;
   refcount_t refcnt ;
   struct rb_root rb_fragments ;
   struct sk_buff *fragments_tail ;
   struct sk_buff *last_run_head ;
   ktime_t stamp ;
   int len ;
   int meat ;
   __u8 flags ;
   u16 max_size ;
   struct fqdir *fqdir ;
   struct callback_head rcu ;
};
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_frag.h"
struct inet_frags {
   unsigned int qsize ;
   void (*constructor)(struct inet_frag_queue *, void *) ;
   void (*destructor)(struct inet_frag_queue *) ;
   void (*frag_expire)(struct timer_list *) ;
   struct kmem_cache *frags_cachep ;
   char *frags_cache_name ;
   struct rhashtable_params rhash_params ;
   refcount_t refcnt ;
   struct completion completion ;
};
#line 177 
struct ipv4_devconf;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv4.h"
struct local_ports {
   seqlock_t lock ;
   int range[2U] ;
   bool warned ;
};
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv4.h"
struct ping_group_range {
   seqlock_t lock ;
   kgid_t range[2U] ;
};
#line 31 
struct inet_hashinfo;
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv4.h"
struct inet_timewait_death_row {
   atomic_t tw_count ;
   struct inet_hashinfo *hashinfo ;
   int sysctl_max_tw_buckets ;
};
#line 40 
struct tcp_fastopen_context;
#line 43 
struct xt_table;
#line 43 
struct tcp_congestion_ops;
#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv4.h"
struct netns_ipv4 {
   struct ctl_table_header *forw_hdr ;
   struct ctl_table_header *frags_hdr ;
   struct ctl_table_header *ipv4_hdr ;
   struct ctl_table_header *route_hdr ;
   struct ctl_table_header *xfrm4_hdr ;
   struct ipv4_devconf *devconf_all ;
   struct ipv4_devconf *devconf_dflt ;
   struct ip_ra_chain *ra_chain ;
   struct mutex ra_mutex ;
   struct fib_rules_ops *rules_ops ;
   bool fib_has_custom_rules ;
   unsigned int fib_rules_require_fldissect ;
   struct fib_table *fib_main ;
   struct fib_table *fib_default ;
   bool fib_has_custom_local_routes ;
   int fib_num_tclassid_users ;
   struct hlist_head *fib_table_hash ;
   bool fib_offload_disabled ;
   struct sock *fibnl ;
   struct sock **icmp_sk ;
   struct sock *mc_autojoin_sk ;
   struct inet_peer_base *peers ;
   struct sock **tcp_sk ;
   struct fqdir *fqdir ;
   struct xt_table *iptable_filter ;
   struct xt_table *iptable_mangle ;
   struct xt_table *iptable_raw ;
   struct xt_table *arptable_filter ;
   struct xt_table *iptable_security ;
   struct xt_table *nat_table ;
   int sysctl_icmp_echo_ignore_all ;
   int sysctl_icmp_echo_ignore_broadcasts ;
   int sysctl_icmp_ignore_bogus_error_responses ;
   int sysctl_icmp_ratelimit ;
   int sysctl_icmp_ratemask ;
   int sysctl_icmp_errors_use_inbound_ifaddr ;
   struct local_ports ip_local_ports ;
   int sysctl_tcp_ecn ;
   int sysctl_tcp_ecn_fallback ;
   int sysctl_ip_default_ttl ;
   int sysctl_ip_no_pmtu_disc ;
   int sysctl_ip_fwd_use_pmtu ;
   int sysctl_ip_fwd_update_priority ;
   int sysctl_ip_nonlocal_bind ;
   int sysctl_ip_dynaddr ;
   int sysctl_ip_early_demux ;
   int sysctl_raw_l3mdev_accept ;
   int sysctl_tcp_early_demux ;
   int sysctl_udp_early_demux ;
   int sysctl_fwmark_reflect ;
   int sysctl_tcp_fwmark_accept ;
   int sysctl_tcp_l3mdev_accept ;
   int sysctl_tcp_mtu_probing ;
   int sysctl_tcp_mtu_probe_floor ;
   int sysctl_tcp_base_mss ;
   int sysctl_tcp_min_snd_mss ;
   int sysctl_tcp_probe_threshold ;
   u32 sysctl_tcp_probe_interval ;
   int sysctl_tcp_keepalive_time ;
   int sysctl_tcp_keepalive_probes ;
   int sysctl_tcp_keepalive_intvl ;
   int sysctl_tcp_syn_retries ;
   int sysctl_tcp_synack_retries ;
   int sysctl_tcp_syncookies ;
   int sysctl_tcp_reordering ;
   int sysctl_tcp_retries1 ;
   int sysctl_tcp_retries2 ;
   int sysctl_tcp_orphan_retries ;
   int sysctl_tcp_fin_timeout ;
   unsigned int sysctl_tcp_notsent_lowat ;
   int sysctl_tcp_tw_reuse ;
   int sysctl_tcp_sack ;
   int sysctl_tcp_window_scaling ;
   int sysctl_tcp_timestamps ;
   int sysctl_tcp_early_retrans ;
   int sysctl_tcp_recovery ;
   int sysctl_tcp_thin_linear_timeouts ;
   int sysctl_tcp_slow_start_after_idle ;
   int sysctl_tcp_retrans_collapse ;
   int sysctl_tcp_stdurg ;
   int sysctl_tcp_rfc1337 ;
   int sysctl_tcp_abort_on_overflow ;
   int sysctl_tcp_fack ;
   int sysctl_tcp_max_reordering ;
   int sysctl_tcp_dsack ;
   int sysctl_tcp_app_win ;
   int sysctl_tcp_adv_win_scale ;
   int sysctl_tcp_frto ;
   int sysctl_tcp_nometrics_save ;
   int sysctl_tcp_moderate_rcvbuf ;
   int sysctl_tcp_tso_win_divisor ;
   int sysctl_tcp_workaround_signed_windows ;
   int sysctl_tcp_limit_output_bytes ;
   int sysctl_tcp_challenge_ack_limit ;
   int sysctl_tcp_min_tso_segs ;
   int sysctl_tcp_min_rtt_wlen ;
   int sysctl_tcp_autocorking ;
   int sysctl_tcp_invalid_ratelimit ;
   int sysctl_tcp_pacing_ss_ratio ;
   int sysctl_tcp_pacing_ca_ratio ;
   int sysctl_tcp_wmem[3U] ;
   int sysctl_tcp_rmem[3U] ;
   int sysctl_tcp_comp_sack_nr ;
   unsigned long sysctl_tcp_comp_sack_delay_ns ;
   struct inet_timewait_death_row tcp_death_row ;
   int sysctl_max_syn_backlog ;
   int sysctl_tcp_fastopen ;
   struct tcp_congestion_ops *tcp_congestion_control ;
   struct tcp_fastopen_context *tcp_fastopen_ctx ;
   spinlock_t tcp_fastopen_ctx_lock ;
   unsigned int sysctl_tcp_fastopen_blackhole_timeout ;
   atomic_t tfo_active_disable_times ;
   unsigned long tfo_active_disable_stamp ;
   int sysctl_udp_wmem_min ;
   int sysctl_udp_rmem_min ;
   int sysctl_udp_l3mdev_accept ;
   int sysctl_igmp_max_memberships ;
   int sysctl_igmp_max_msf ;
   int sysctl_igmp_llm_reports ;
   int sysctl_igmp_qrv ;
   struct ping_group_range ping_group_range ;
   atomic_t dev_addr_genid ;
   unsigned long *sysctl_local_reserved_ports ;
   int sysctl_ip_prot_sock ;
   struct list_head mr_tables ;
   struct fib_rules_ops *mr_rules_ops ;
   int sysctl_fib_multipath_use_neigh ;
   int sysctl_fib_multipath_hash_policy ;
   struct fib_notifier_ops *notifier_ops ;
   unsigned int fib_seq ;
   struct fib_notifier_ops *ipmr_notifier_ops ;
   unsigned int ipmr_seq ;
   atomic_t rt_genid ;
   siphash_key_t ip_id_key ;
};
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/dst_ops.h"
struct dst_ops {
   unsigned short family ;
   unsigned int gc_thresh ;
   int (*gc)(struct dst_ops *) ;
   struct dst_entry *(*check)(struct dst_entry *, __u32 ) ;
   unsigned int (*default_advmss)(struct dst_entry *) ;
   unsigned int (*mtu)(struct dst_entry *) ;
   u32 *(*cow_metrics)(struct dst_entry *, unsigned long ) ;
   void (*destroy)(struct dst_entry *) ;
   void (*ifdown)(struct dst_entry *, struct net_device *, int ) ;
   struct dst_entry *(*negative_advice)(struct dst_entry *) ;
   void (*link_failure)(struct sk_buff *) ;
   void (*update_pmtu)(struct dst_entry *, struct sock *, struct sk_buff *, u32 , bool ) ;
   void (*redirect)(struct dst_entry *, struct sock *, struct sk_buff *) ;
   int (*local_out)(struct net *, struct sock *, struct sk_buff *) ;
   struct neighbour *(*neigh_lookup)(struct dst_entry *, struct sk_buff *, void *) ;
   void (*confirm_neigh)(struct dst_entry *, void *) ;
   struct kmem_cache *kmem_cachep ;
   struct percpu_counter pcpuc_entries ;
};
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv6.h"
struct netns_sysctl_ipv6 {
   struct ctl_table_header *hdr ;
   struct ctl_table_header *route_hdr ;
   struct ctl_table_header *icmp_hdr ;
   struct ctl_table_header *frags_hdr ;
   struct ctl_table_header *xfrm6_hdr ;
   int bindv6only ;
   int flush_delay ;
   int ip6_rt_max_size ;
   int ip6_rt_gc_min_interval ;
   int ip6_rt_gc_timeout ;
   int ip6_rt_gc_interval ;
   int ip6_rt_gc_elasticity ;
   int ip6_rt_mtu_expires ;
   int ip6_rt_min_advmss ;
   int multipath_hash_policy ;
   int flowlabel_consistency ;
   int auto_flowlabels ;
   int icmpv6_time ;
   int icmpv6_echo_ignore_all ;
   int icmpv6_echo_ignore_multicast ;
   int icmpv6_echo_ignore_anycast ;
   unsigned long icmpv6_ratemask[4U] ;
   unsigned long *icmpv6_ratemask_ptr ;
   int anycast_src_echo_reply ;
   int ip_nonlocal_bind ;
   int fwmark_reflect ;
   int idgen_retries ;
   int idgen_delay ;
   int flowlabel_state_ranges ;
   int flowlabel_reflect ;
   int max_dst_opts_cnt ;
   int max_hbh_opts_cnt ;
   int max_dst_opts_len ;
   int max_hbh_opts_len ;
   int seg6_flowlabel ;
   bool skip_notify_on_dev_down ;
};
#line 56 
struct seg6_pernet_data;
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv6.h"
struct __anonstruct_ip6addrlbl_table_571 {
   struct hlist_head head ;
   spinlock_t lock ;
   u32 seq ;
};
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv6.h"
struct netns_ipv6 {
   struct netns_sysctl_ipv6 sysctl ;
   struct ipv6_devconf *devconf_all ;
   struct ipv6_devconf *devconf_dflt ;
   struct inet_peer_base *peers ;
   struct fqdir *fqdir ;
   struct xt_table *ip6table_filter ;
   struct xt_table *ip6table_mangle ;
   struct xt_table *ip6table_raw ;
   struct xt_table *ip6table_security ;
   struct xt_table *ip6table_nat ;
   struct fib6_info *fib6_null_entry ;
   struct rt6_info *ip6_null_entry ;
   struct rt6_statistics *rt6_stats ;
   struct timer_list ip6_fib_timer ;
   struct hlist_head *fib_table_hash ;
   struct fib6_table *fib6_main_tbl ;
   struct list_head fib6_walkers ;
   struct dst_ops ip6_dst_ops ;
   rwlock_t fib6_walker_lock ;
   spinlock_t fib6_gc_lock ;
   unsigned int ip6_rt_gc_expire ;
   unsigned long ip6_rt_last_gc ;
   unsigned int fib6_rules_require_fldissect ;
   bool fib6_has_custom_rules ;
   unsigned int fib6_routes_require_src ;
   struct rt6_info *ip6_prohibit_entry ;
   struct rt6_info *ip6_blk_hole_entry ;
   struct fib6_table *fib6_local_tbl ;
   struct fib_rules_ops *fib6_rules_ops ;
   struct sock **icmp_sk ;
   struct sock *ndisc_sk ;
   struct sock *tcp_sk ;
   struct sock *igmp_sk ;
   struct sock *mc_autojoin_sk ;
   struct list_head mr6_tables ;
   struct fib_rules_ops *mr6_rules_ops ;
   atomic_t dev_addr_genid ;
   atomic_t fib6_sernum ;
   struct seg6_pernet_data *seg6_data ;
   struct fib_notifier_ops *notifier_ops ;
   struct fib_notifier_ops *ip6mr_notifier_ops ;
   unsigned int ipmr_seq ;
   struct __anonstruct_ip6addrlbl_table_571 ip6addrlbl_table ;
};
#line 121  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv6.h"
struct netns_nf_frag {
   struct fqdir *fqdir ;
};
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/nexthop.h"
struct netns_nexthop {
   struct rb_root rb_root ;
   struct hlist_head *devhash ;
   unsigned int seq ;
   u32 last_id_allocated ;
};
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ieee802154_6lowpan.h"
struct netns_sysctl_lowpan {
   struct ctl_table_header *frags_hdr ;
};
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ieee802154_6lowpan.h"
struct netns_ieee802154_lowpan {
   struct netns_sysctl_lowpan sysctl ;
   struct fqdir *fqdir ;
};
#line 21 
struct sctp_mib;
#line 10  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/sctp.h"
struct netns_sctp {
   struct sctp_mib *sctp_statistics ;
   struct proc_dir_entry *proc_net_sctp ;
   struct ctl_table_header *sysctl_header ;
   struct sock *ctl_sock ;
   struct list_head local_addr_list ;
   struct list_head addr_waitq ;
   struct timer_list addr_wq_timer ;
   struct list_head auto_asconf_splist ;
   spinlock_t addr_wq_lock ;
   spinlock_t local_addr_lock ;
   unsigned int rto_initial ;
   unsigned int rto_min ;
   unsigned int rto_max ;
   int rto_alpha ;
   int rto_beta ;
   int max_burst ;
   int cookie_preserve_enable ;
   char *sctp_hmac_alg ;
   unsigned int valid_cookie_life ;
   unsigned int sack_timeout ;
   unsigned int hb_interval ;
   int max_retrans_association ;
   int max_retrans_path ;
   int max_retrans_init ;
   int pf_retrans ;
   int ps_retrans ;
   int pf_enable ;
   int pf_expose ;
   int sndbuf_policy ;
   int rcvbuf_policy ;
   int default_auto_asconf ;
   int addip_enable ;
   int addip_noauth ;
   int prsctp_enable ;
   int reconf_enable ;
   int auth_enable ;
   int intl_enable ;
   int ecn_enable ;
   int scope_policy ;
   int rwnd_upd_shift ;
   unsigned long max_autoclose ;
};
#line 7  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/dccp.h"
struct netns_dccp {
   struct sock *v4_ctl_sk ;
   struct sock *v6_ctl_sk ;
};
#line 75  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/netfilter.h"
struct nf_logger;
#line 76 
struct nf_queue_handler;
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/netfilter.h"
struct nf_hook_entries;
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/netfilter.h"
struct netns_nf {
   struct proc_dir_entry *proc_netfilter ;
   struct nf_queue_handler *queue_handler ;
   struct nf_logger *nf_loggers[13U] ;
   struct ctl_table_header *nf_log_dir_header ;
   struct nf_hook_entries *hooks_ipv4[5U] ;
   struct nf_hook_entries *hooks_ipv6[5U] ;
   struct nf_hook_entries *hooks_arp[3U] ;
   struct nf_hook_entries *hooks_bridge[5U] ;
   struct nf_hook_entries *hooks_decnet[7U] ;
   bool defrag_ipv4 ;
   bool defrag_ipv6 ;
};
#line 37 
struct ebt_table;
#line 10  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/x_tables.h"
struct netns_xt {
   struct list_head tables[13U] ;
   bool notrack_deprecated_warning ;
   bool clusterip_deprecated_warning ;
   struct ebt_table *broute_table ;
   struct ebt_table *frame_filter ;
   struct ebt_table *frame_nat ;
};
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_nulls.h"
struct hlist_nulls_node;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_nulls.h"
struct hlist_nulls_head {
   struct hlist_nulls_node *first ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_nulls.h"
struct hlist_nulls_node {
   struct hlist_nulls_node *next ;
   struct hlist_nulls_node **pprev ;
};
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_generic_net {
   unsigned int timeout ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_tcp_net {
   unsigned int timeouts[14U] ;
   int tcp_loose ;
   int tcp_be_liberal ;
   int tcp_max_retrans ;
};
#line 38  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_udp_net {
   unsigned int timeouts[2U] ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_icmp_net {
   unsigned int timeout ;
};
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_dccp_net {
   int dccp_loose ;
   unsigned int dccp_timeout[10U] ;
};
#line 54  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_sctp_net {
   unsigned int timeouts[10U] ;
};
#line 66  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_gre_net {
   struct list_head keymap_list ;
   unsigned int timeouts[2U] ;
};
#line 72  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_ip_net {
   struct nf_generic_net generic ;
   struct nf_tcp_net tcp ;
   struct nf_udp_net udp ;
   struct nf_icmp_net icmp ;
   struct nf_icmp_net icmpv6 ;
   struct nf_dccp_net dccp ;
   struct nf_sctp_net sctp ;
   struct nf_gre_net gre ;
};
#line 89  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct ct_pcpu {
   spinlock_t lock ;
   struct hlist_nulls_head unconfirmed ;
   struct hlist_nulls_head dying ;
};
#line 95 
struct nf_ct_event_notifier;
#line 95 
struct nf_exp_event_notifier;
#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct netns_ct {
   atomic_t count ;
   unsigned int expect_count ;
   struct delayed_work ecache_dwork ;
   bool ecache_dwork_pending ;
   bool auto_assign_helper_warned ;
   struct ctl_table_header *sysctl_header ;
   unsigned int sysctl_log_invalid ;
   int sysctl_events ;
   int sysctl_acct ;
   int sysctl_auto_assign_helper ;
   int sysctl_tstamp ;
   int sysctl_checksum ;
   struct ct_pcpu *pcpu_lists ;
   struct ip_conntrack_stat *stat ;
   struct nf_ct_event_notifier *nf_conntrack_event_cb ;
   struct nf_exp_event_notifier *nf_expect_event_cb ;
   struct nf_ip_net nf_ct_proto ;
   unsigned int labels_used ;
};
#line 7  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/nftables.h"
struct netns_nftables {
   struct list_head tables ;
   struct list_head commit_list ;
   struct list_head module_list ;
   struct mutex commit_mutex ;
   unsigned int base_seq ;
   u8 gencursor ;
   u8 validate_state ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/xfrm.h"
struct xfrm_policy_hash {
   struct hlist_head *table ;
   unsigned int hmask ;
   u8 dbits4 ;
   u8 sbits4 ;
   u8 dbits6 ;
   u8 sbits6 ;
};
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/xfrm.h"
struct xfrm_policy_hthresh {
   struct work_struct work ;
   seqlock_t lock ;
   u8 lbits4 ;
   u8 rbits4 ;
   u8 lbits6 ;
   u8 rbits6 ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/xfrm.h"
struct netns_xfrm {
   struct list_head state_all ;
   struct hlist_head *state_bydst ;
   struct hlist_head *state_bysrc ;
   struct hlist_head *state_byspi ;
   unsigned int state_hmask ;
   unsigned int state_num ;
   struct work_struct state_hash_work ;
   struct list_head policy_all ;
   struct hlist_head *policy_byidx ;
   unsigned int policy_idx_hmask ;
   struct hlist_head policy_inexact[3U] ;
   struct xfrm_policy_hash policy_bydst[3U] ;
   unsigned int policy_count[6U] ;
   struct work_struct policy_hash_work ;
   struct xfrm_policy_hthresh policy_hthresh ;
   struct list_head inexact_bins ;
   struct sock *nlsk ;
   struct sock *nlsk_stash ;
   u32 sysctl_aevent_etime ;
   u32 sysctl_aevent_rseqth ;
   int sysctl_larval_drop ;
   u32 sysctl_acq_expires ;
   struct ctl_table_header *sysctl_hdr ;
   struct dst_ops xfrm4_dst_ops ;
   struct dst_ops xfrm6_dst_ops ;
   spinlock_t xfrm_state_lock ;
   spinlock_t xfrm_policy_lock ;
   struct mutex xfrm_cfg_mutex ;
};
#line 79 
struct mpls_route;
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/mpls.h"
struct netns_mpls {
   int ip_ttl_propagate ;
   int default_ttl ;
   size_t platform_labels ;
   struct mpls_route **platform_label ;
   struct ctl_table_header *ctl ;
};
#line 20 
struct can_dev_rcv_lists;
#line 21 
struct can_pkg_stats;
#line 22 
struct can_rcv_lists_stats;
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/can.h"
struct netns_can {
   struct proc_dir_entry *proc_dir ;
   struct proc_dir_entry *pde_version ;
   struct proc_dir_entry *pde_stats ;
   struct proc_dir_entry *pde_reset_stats ;
   struct proc_dir_entry *pde_rcvlist_all ;
   struct proc_dir_entry *pde_rcvlist_fil ;
   struct proc_dir_entry *pde_rcvlist_inv ;
   struct proc_dir_entry *pde_rcvlist_sff ;
   struct proc_dir_entry *pde_rcvlist_eff ;
   struct proc_dir_entry *pde_rcvlist_err ;
   struct proc_dir_entry *bcmproc_dir ;
   struct can_dev_rcv_lists *rx_alldev_list ;
   spinlock_t rcvlists_lock ;
   struct timer_list stattimer ;
   struct can_pkg_stats *pkg_stats ;
   struct can_rcv_lists_stats *rcv_lists_stats ;
   struct hlist_head cgw_list ;
};
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/xdp.h"
struct netns_xdp {
   struct mutex lock ;
   struct hlist_head list ;
};
#line 12 
struct proc_ns_operations;
#line 7  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ns_common.h"
struct ns_common {
   atomic_long_t stashed ;
   struct proc_ns_operations *ops ;
   unsigned int inum ;
};
#line 13 
struct uevent_sock;
#line 14 
struct netns_ipvs;
#line 55  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/net_namespace.h"
struct key_tag;
#line 55 
struct ucounts;
#line 55  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/net_namespace.h"
struct net {
   refcount_t passive ;
   refcount_t count ;
   spinlock_t rules_mod_lock ;
   unsigned int dev_unreg_count ;
   unsigned int dev_base_seq ;
   int ifindex ;
   spinlock_t nsid_lock ;
   atomic_t fnhe_genid ;
   struct list_head list ;
   struct list_head exit_list ;
   struct llist_node cleanup_list ;
   struct key_tag *key_domain ;
   struct user_namespace *user_ns ;
   struct ucounts *ucounts ;
   struct idr netns_ids ;
   struct ns_common ns ;
   struct list_head dev_base_head ;
   struct proc_dir_entry *proc_net ;
   struct proc_dir_entry *proc_net_stat ;
   struct ctl_table_set sysctls ;
   struct sock *rtnl ;
   struct sock *genl_sock ;
   struct uevent_sock *uevent_sock ;
   struct hlist_head *dev_name_head ;
   struct hlist_head *dev_index_head ;
   struct raw_notifier_head netdev_chain ;
   u32 hash_mix ;
   struct net_device *loopback_dev ;
   struct list_head rules_ops ;
   struct netns_core core ;
   struct netns_mib mib ;
   struct netns_packet packet ;
   struct netns_unix unx ;
   struct netns_nexthop nexthop ;
   struct netns_ipv4 ipv4 ;
   struct netns_ipv6 ipv6 ;
   struct netns_ieee802154_lowpan ieee802154_lowpan ;
   struct netns_sctp sctp ;
   struct netns_dccp dccp ;
   struct netns_nf nf ;
   struct netns_xt xt ;
   struct netns_ct ct ;
   struct netns_nftables nft ;
   struct netns_nf_frag nf_frag ;
   struct ctl_table_header *nf_frag_frags_hdr ;
   struct sock *nfnl ;
   struct sock *nfnl_stash ;
   struct list_head nfnl_acct_list ;
   struct list_head nfct_timeout_list ;
   struct sk_buff_head wext_nlevents ;
   struct net_generic *gen ;
   struct bpf_prog *flow_dissector_prog ;
   struct netns_xfrm xfrm ;
   struct netns_ipvs *ipvs ;
   struct netns_mpls mpls ;
   struct netns_can can ;
   struct netns_xdp xdp ;
   struct sock *crypto_nlsk ;
   struct sock *diag_nlsk ;
} __attribute__((__designated_init__));
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/assoc_array.h"
struct assoc_array_ptr;
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/assoc_array.h"
struct assoc_array {
   struct assoc_array_ptr *root ;
   unsigned long nr_leaves_on_tree ;
};
#line 83  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/assoc_array.h"
typedef int32_t key_serial_t;
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
typedef uint32_t key_perm_t;
#line 32 
struct key_type;
#line 85  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
struct key_tag {
   struct callback_head rcu ;
   refcount_t usage ;
   bool removed ;
};
#line 91  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
struct __anonstruct_584 {
   u16 desc_len ;
   char desc[6U] ;
};
#line 91  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
union __anonunion_583 {
   struct __anonstruct_584 __anonCompField___anonunion_583_103 ;
   unsigned long x ;
};
#line 91  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
struct keyring_index_key {
   unsigned long hash ;
   union __anonunion_583 __anonCompField_keyring_index_key_104 ;
   struct key_type *type ;
   struct key_tag *domain_tag ;
   char *description ;
};
#line 111  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
union key_payload {
   void *rcu_data0 ;
   void *data[4U] ;
};
#line 153  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
struct key_restriction {
   int (*check)(struct key *, struct key_type *, union key_payload *, struct key *) ;
   struct key *key ;
   struct key_type *keytype ;
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
union __anonunion_585 {
   struct list_head graveyard_link ;
   struct rb_node serial_node ;
};
#line 172 
struct key_user;
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
union __anonunion_586 {
   time64_t expiry ;
   time64_t revoked_at ;
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
struct __anonstruct_588 {
   unsigned long hash ;
   unsigned long len_desc ;
   struct key_type *type ;
   struct key_tag *domain_tag ;
   char *description ;
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
union __anonunion_587 {
   struct keyring_index_key index_key ;
   struct __anonstruct_588 __anonCompField___anonunion_587_107 ;
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
struct __anonstruct_590 {
   struct list_head name_link ;
   struct assoc_array keys ;
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
union __anonunion_589 {
   union key_payload payload ;
   struct __anonstruct_590 __anonCompField___anonunion_589_109 ;
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
struct key {
   refcount_t usage ;
   key_serial_t serial ;
   union __anonunion_585 __anonCompField_key_105 ;
   struct rw_semaphore sem ;
   struct key_user *user ;
   void *security ;
   union __anonunion_586 __anonCompField_key_106 ;
   time64_t last_used_at ;
   kuid_t uid ;
   kgid_t gid ;
   key_perm_t perm ;
   unsigned short quotalen ;
   unsigned short datalen ;
   short state ;
   unsigned long flags ;
   union __anonunion_587 __anonCompField_key_108 ;
   union __anonunion_589 __anonCompField_key_110 ;
   struct key_restriction *restrict_link ;
};
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/user.h"
struct user_struct {
   refcount_t __count ;
   atomic_t processes ;
   atomic_t sigpending ;
   atomic_t fanotify_listeners ;
   atomic_long_t epoll_watches ;
   unsigned long mq_bytes ;
   unsigned long locked_shm ;
   unsigned long unix_inflight ;
   atomic_long_t pipe_bufs ;
   struct hlist_node uidhash_node ;
   kuid_t uid ;
   atomic_long_t locked_vm ;
   struct ratelimit_state ratelimit ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cred.h"
struct group_info {
   atomic_t usage ;
   int ngroups ;
   kgid_t gid[0U] ;
} __attribute__((__designated_init__));
#line 111  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cred.h"
union __anonunion_593 {
   int non_rcu ;
   struct callback_head rcu ;
};
#line 111  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cred.h"
struct cred {
   atomic_t usage ;
   atomic_t subscribers ;
   void *put_addr ;
   unsigned int magic ;
   kuid_t uid ;
   kgid_t gid ;
   kuid_t suid ;
   kgid_t sgid ;
   kuid_t euid ;
   kgid_t egid ;
   kuid_t fsuid ;
   kgid_t fsgid ;
   unsigned int securebits ;
   kernel_cap_t cap_inheritable ;
   kernel_cap_t cap_permitted ;
   kernel_cap_t cap_effective ;
   kernel_cap_t cap_bset ;
   kernel_cap_t cap_ambient ;
   unsigned char jit_keyring ;
   struct key *session_keyring ;
   struct key *process_keyring ;
   struct key *thread_keyring ;
   struct key *request_key_auth ;
   void *security ;
   struct user_struct *user ;
   struct user_namespace *user_ns ;
   struct group_info *group_info ;
   union __anonunion_593 __anonCompField_cred_111 ;
} __attribute__((__designated_init__));
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seq_file.h"
struct seq_file {
   char *buf ;
   size_t size ;
   size_t from ;
   size_t count ;
   size_t pad_until ;
   loff_t index ;
   loff_t read_pos ;
   u64 version ;
   struct mutex lock ;
   struct seq_operations *op ;
   int poll_event ;
   struct file *file ;
   void *private ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seq_file.h"
struct seq_operations {
   void *(*start)(struct seq_file *, loff_t *) ;
   void (*stop)(struct seq_file *, void *) ;
   void *(*next)(struct seq_file *, void *, loff_t *) ;
   int (*show)(struct seq_file *, void *) ;
};
#line 275  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/net_namespace.h"
struct __anonstruct_possible_net_t_594 {
   struct net *net ;
};
#line 275  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/net_namespace.h"
typedef struct __anonstruct_possible_net_t_594 possible_net_t;
#line 58  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct ieee_ets {
   __u8 willing ;
   __u8 ets_cap ;
   __u8 cbs ;
   __u8 tc_tx_bw[8U] ;
   __u8 tc_rx_bw[8U] ;
   __u8 tc_tsa[8U] ;
   __u8 prio_tc[8U] ;
   __u8 tc_reco_bw[8U] ;
   __u8 tc_reco_tsa[8U] ;
   __u8 reco_prio_tc[8U] ;
};
#line 78  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct ieee_maxrate {
   __u64 tc_maxrate[8U] ;
};
#line 119  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct ieee_qcn {
   __u8 rpg_enable[8U] ;
   __u32 rppp_max_rps[8U] ;
   __u32 rpg_time_reset[8U] ;
   __u32 rpg_byte_reset[8U] ;
   __u32 rpg_threshold[8U] ;
   __u32 rpg_max_rate[8U] ;
   __u32 rpg_ai_rate[8U] ;
   __u32 rpg_hai_rate[8U] ;
   __u32 rpg_gd[8U] ;
   __u32 rpg_min_dec_fac[8U] ;
   __u32 rpg_min_rate[8U] ;
   __u32 cndd_state_machine[8U] ;
};
#line 141  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct ieee_qcn_stats {
   __u64 rppp_rp_centiseconds[8U] ;
   __u32 rppp_created_rps[8U] ;
};
#line 157  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct ieee_pfc {
   __u8 pfc_cap ;
   __u8 pfc_en ;
   __u8 mbc ;
   __u16 delay ;
   __u64 requests[8U] ;
   __u64 indications[8U] ;
};
#line 168  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct dcbnl_buffer {
   __u8 prio2buffer[8U] ;
   __u32 buffer_size[8U] ;
   __u32 total_size ;
};
#line 190  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct cee_pg {
   __u8 willing ;
   __u8 error ;
   __u8 pg_en ;
   __u8 tcs_supported ;
   __u8 pg_bw[8U] ;
   __u8 prio_pg[8U] ;
};
#line 207  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct cee_pfc {
   __u8 willing ;
   __u8 error ;
   __u8 pfc_en ;
   __u8 tcs_supported ;
};
#line 244  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct dcb_app {
   __u8 selector ;
   __u8 priority ;
   __u16 protocol ;
};
#line 259  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct dcb_peer_app_info {
   __u8 willing ;
   __u8 error ;
};
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/dcbnl.h"
struct dcbnl_rtnl_ops {
   int (*ieee_getets)(struct net_device *, struct ieee_ets *) ;
   int (*ieee_setets)(struct net_device *, struct ieee_ets *) ;
   int (*ieee_getmaxrate)(struct net_device *, struct ieee_maxrate *) ;
   int (*ieee_setmaxrate)(struct net_device *, struct ieee_maxrate *) ;
   int (*ieee_getqcn)(struct net_device *, struct ieee_qcn *) ;
   int (*ieee_setqcn)(struct net_device *, struct ieee_qcn *) ;
   int (*ieee_getqcnstats)(struct net_device *, struct ieee_qcn_stats *) ;
   int (*ieee_getpfc)(struct net_device *, struct ieee_pfc *) ;
   int (*ieee_setpfc)(struct net_device *, struct ieee_pfc *) ;
   int (*ieee_getapp)(struct net_device *, struct dcb_app *) ;
   int (*ieee_setapp)(struct net_device *, struct dcb_app *) ;
   int (*ieee_delapp)(struct net_device *, struct dcb_app *) ;
   int (*ieee_peer_getets)(struct net_device *, struct ieee_ets *) ;
   int (*ieee_peer_getpfc)(struct net_device *, struct ieee_pfc *) ;
   u8 (*getstate)(struct net_device *) ;
   u8 (*setstate)(struct net_device *, u8 ) ;
   void (*getpermhwaddr)(struct net_device *, u8 *) ;
   void (*setpgtccfgtx)(struct net_device *, int , u8 , u8 , u8 , u8 ) ;
   void (*setpgbwgcfgtx)(struct net_device *, int , u8 ) ;
   void (*setpgtccfgrx)(struct net_device *, int , u8 , u8 , u8 , u8 ) ;
   void (*setpgbwgcfgrx)(struct net_device *, int , u8 ) ;
   void (*getpgtccfgtx)(struct net_device *, int , u8 *, u8 *, u8 *, u8 *) ;
   void (*getpgbwgcfgtx)(struct net_device *, int , u8 *) ;
   void (*getpgtccfgrx)(struct net_device *, int , u8 *, u8 *, u8 *, u8 *) ;
   void (*getpgbwgcfgrx)(struct net_device *, int , u8 *) ;
   void (*setpfccfg)(struct net_device *, int , u8 ) ;
   void (*getpfccfg)(struct net_device *, int , u8 *) ;
   u8 (*setall)(struct net_device *) ;
   u8 (*getcap)(struct net_device *, int , u8 *) ;
   int (*getnumtcs)(struct net_device *, int , u8 *) ;
   int (*setnumtcs)(struct net_device *, int , u8 ) ;
   u8 (*getpfcstate)(struct net_device *) ;
   void (*setpfcstate)(struct net_device *, u8 ) ;
   void (*getbcncfg)(struct net_device *, int , u32 *) ;
   void (*setbcncfg)(struct net_device *, int , u32 ) ;
   void (*getbcnrp)(struct net_device *, int , u8 *) ;
   void (*setbcnrp)(struct net_device *, int , u8 ) ;
   int (*setapp)(struct net_device *, u8 , u16 , u8 ) ;
   int (*getapp)(struct net_device *, u8 , u16 ) ;
   u8 (*getfeatcfg)(struct net_device *, int , u8 *) ;
   u8 (*setfeatcfg)(struct net_device *, int , u8 ) ;
   u8 (*getdcbx)(struct net_device *) ;
   u8 (*setdcbx)(struct net_device *, u8 ) ;
   int (*peer_getappinfo)(struct net_device *, struct dcb_peer_app_info *, u16 *) ;
   int (*peer_getapptable)(struct net_device *, struct dcb_app *) ;
   int (*cee_peer_getpg)(struct net_device *, struct cee_pg *) ;
   int (*cee_peer_getpfc)(struct net_device *, struct cee_pfc *) ;
   int (*dcbnl_getbuffer)(struct net_device *, struct dcbnl_buffer *) ;
   int (*dcbnl_setbuffer)(struct net_device *, struct dcbnl_buffer *) ;
};
#line 41  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/taskstats.h"
struct taskstats {
   __u16 version ;
   __u32 ac_exitcode ;
   __u8 ac_flag ;
   __u8 ac_nice ;
   __u64 cpu_count ;
   __u64 cpu_delay_total ;
   __u64 blkio_count ;
   __u64 blkio_delay_total ;
   __u64 swapin_count ;
   __u64 swapin_delay_total ;
   __u64 cpu_run_real_total ;
   __u64 cpu_run_virtual_total ;
   char ac_comm[32U] ;
   __u8 ac_sched ;
   __u8 ac_pad[3U] ;
   __u32 ac_uid ;
   __u32 ac_gid ;
   __u32 ac_pid ;
   __u32 ac_ppid ;
   __u32 ac_btime ;
   __u64 ac_etime ;
   __u64 ac_utime ;
   __u64 ac_stime ;
   __u64 ac_minflt ;
   __u64 ac_majflt ;
   __u64 coremem ;
   __u64 virtmem ;
   __u64 hiwater_rss ;
   __u64 hiwater_vm ;
   __u64 read_char ;
   __u64 write_char ;
   __u64 read_syscalls ;
   __u64 write_syscalls ;
   __u64 read_bytes ;
   __u64 write_bytes ;
   __u64 cancelled_write_bytes ;
   __u64 nvcsw ;
   __u64 nivcsw ;
   __u64 ac_utimescaled ;
   __u64 ac_stimescaled ;
   __u64 cpu_scaled_run_real_total ;
   __u64 freepages_count ;
   __u64 freepages_delay_total ;
   __u64 thrashing_count ;
   __u64 thrashing_delay_total ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/cgroupstats.h"
struct mnt_namespace;
#line 60 
struct uts_namespace;
#line 61 
struct ipc_namespace;
#line 62 
struct cgroup_namespace;
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/nsproxy.h"
struct nsproxy {
   atomic_t count ;
   struct uts_namespace *uts_ns ;
   struct ipc_namespace *ipc_ns ;
   struct mnt_namespace *mnt_ns ;
   struct pid_namespace *pid_ns_for_children ;
   struct net *net_ns ;
   struct cgroup_namespace *cgroup_ns ;
};
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/user_namespace.h"
struct uid_gid_extent {
   u32 first ;
   u32 lower_first ;
   u32 count ;
};
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/user_namespace.h"
struct __anonstruct_596 {
   struct uid_gid_extent *forward ;
   struct uid_gid_extent *reverse ;
};
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/user_namespace.h"
union __anonunion_595 {
   struct uid_gid_extent extent[5U] ;
   struct __anonstruct_596 __anonCompField___anonunion_595_112 ;
};
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/user_namespace.h"
struct uid_gid_map {
   u32 nr_extents ;
   union __anonunion_595 __anonCompField_uid_gid_map_113 ;
};
#line 55  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/user_namespace.h"
struct user_namespace {
   struct uid_gid_map uid_map ;
   struct uid_gid_map gid_map ;
   struct uid_gid_map projid_map ;
   atomic_t count ;
   struct user_namespace *parent ;
   int level ;
   kuid_t owner ;
   kgid_t group ;
   struct ns_common ns ;
   unsigned long flags ;
   struct list_head keyring_name_list ;
   struct key *user_keyring_register ;
   struct rw_semaphore keyring_sem ;
   struct key *persistent_keyring_register ;
   struct work_struct work ;
   struct ctl_table_set set ;
   struct ctl_table_header *sysctls ;
   struct ucounts *ucounts ;
   int ucount_max[9U] ;
} __attribute__((__designated_init__));
#line 91  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/user_namespace.h"
struct ucounts {
   struct hlist_node node ;
   struct user_namespace *ns ;
   kuid_t uid ;
   int count ;
   atomic_t ucount[9U] ;
};
#line 65  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct bpf_insn {
   __u8 code ;
   __u8 dst_reg : 4 ;
   __u8 src_reg : 4 ;
   __s16 off ;
   __s32 imm ;
};
#line 79  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct bpf_cgroup_storage_key {
   __u64 cgroup_inode_id ;
   __u32 attach_type ;
};
#line 110 
enum bpf_map_type {
    BPF_MAP_TYPE_UNSPEC = 0,
    BPF_MAP_TYPE_HASH = 1,
    BPF_MAP_TYPE_ARRAY = 2,
    BPF_MAP_TYPE_PROG_ARRAY = 3,
    BPF_MAP_TYPE_PERF_EVENT_ARRAY = 4,
    BPF_MAP_TYPE_PERCPU_HASH = 5,
    BPF_MAP_TYPE_PERCPU_ARRAY = 6,
    BPF_MAP_TYPE_STACK_TRACE = 7,
    BPF_MAP_TYPE_CGROUP_ARRAY = 8,
    BPF_MAP_TYPE_LRU_HASH = 9,
    BPF_MAP_TYPE_LRU_PERCPU_HASH = 10,
    BPF_MAP_TYPE_LPM_TRIE = 11,
    BPF_MAP_TYPE_ARRAY_OF_MAPS = 12,
    BPF_MAP_TYPE_HASH_OF_MAPS = 13,
    BPF_MAP_TYPE_DEVMAP = 14,
    BPF_MAP_TYPE_SOCKMAP = 15,
    BPF_MAP_TYPE_CPUMAP = 16,
    BPF_MAP_TYPE_XSKMAP = 17,
    BPF_MAP_TYPE_SOCKHASH = 18,
    BPF_MAP_TYPE_CGROUP_STORAGE = 19,
    BPF_MAP_TYPE_REUSEPORT_SOCKARRAY = 20,
    BPF_MAP_TYPE_PERCPU_CGROUP_STORAGE = 21,
    BPF_MAP_TYPE_QUEUE = 22,
    BPF_MAP_TYPE_STACK = 23,
    BPF_MAP_TYPE_SK_STORAGE = 24,
    BPF_MAP_TYPE_DEVMAP_HASH = 25
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_598 {
   __u32 map_type ;
   __u32 key_size ;
   __u32 value_size ;
   __u32 max_entries ;
   __u32 map_flags ;
   __u32 inner_map_fd ;
   __u32 numa_node ;
   char map_name[16U] ;
   __u32 map_ifindex ;
   __u32 btf_fd ;
   __u32 btf_key_type_id ;
   __u32 btf_value_type_id ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
union __anonunion_600 {
   __u64 value ;
   __u64 next_key ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_599 {
   __u32 map_fd ;
   __u64 key ;
   union __anonunion_600 __anonCompField___anonstruct_599_116 ;
   __u64 flags ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_601 {
   __u32 prog_type ;
   __u32 insn_cnt ;
   __u64 insns ;
   __u64 license ;
   __u32 log_level ;
   __u32 log_size ;
   __u64 log_buf ;
   __u32 kern_version ;
   __u32 prog_flags ;
   char prog_name[16U] ;
   __u32 prog_ifindex ;
   __u32 expected_attach_type ;
   __u32 prog_btf_fd ;
   __u32 func_info_rec_size ;
   __u64 func_info ;
   __u32 func_info_cnt ;
   __u32 line_info_rec_size ;
   __u64 line_info ;
   __u32 line_info_cnt ;
   __u32 attach_btf_id ;
   __u32 attach_prog_fd ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_602 {
   __u64 pathname ;
   __u32 bpf_fd ;
   __u32 file_flags ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_603 {
   __u32 target_fd ;
   __u32 attach_bpf_fd ;
   __u32 attach_type ;
   __u32 attach_flags ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_test_604 {
   __u32 prog_fd ;
   __u32 retval ;
   __u32 data_size_in ;
   __u32 data_size_out ;
   __u64 data_in ;
   __u64 data_out ;
   __u32 repeat ;
   __u32 duration ;
   __u32 ctx_size_in ;
   __u32 ctx_size_out ;
   __u64 ctx_in ;
   __u64 ctx_out ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
union __anonunion_606 {
   __u32 start_id ;
   __u32 prog_id ;
   __u32 map_id ;
   __u32 btf_id ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_605 {
   union __anonunion_606 __anonCompField___anonstruct_605_121 ;
   __u32 next_id ;
   __u32 open_flags ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_info_607 {
   __u32 bpf_fd ;
   __u32 info_len ;
   __u64 info ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_query_608 {
   __u32 target_fd ;
   __u32 attach_type ;
   __u32 query_flags ;
   __u32 attach_flags ;
   __u64 prog_ids ;
   __u32 prog_cnt ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_raw_tracepoint_609 {
   __u64 name ;
   __u32 prog_fd ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_610 {
   __u64 btf ;
   __u64 btf_log_buf ;
   __u32 btf_size ;
   __u32 btf_log_size ;
   __u32 btf_log_level ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_task_fd_query_611 {
   __u32 pid ;
   __u32 fd ;
   __u32 flags ;
   __u32 buf_len ;
   __u64 buf ;
   __u32 prog_id ;
   __u32 fd_type ;
   __u64 probe_offset ;
   __u64 probe_addr ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
union bpf_attr {
   struct __anonstruct_598 __anonCompField_bpf_attr_115 ;
   struct __anonstruct_599 __anonCompField_bpf_attr_117 ;
   struct __anonstruct_601 __anonCompField_bpf_attr_118 ;
   struct __anonstruct_602 __anonCompField_bpf_attr_119 ;
   struct __anonstruct_603 __anonCompField_bpf_attr_120 ;
   struct __anonstruct_test_604 test ;
   struct __anonstruct_605 __anonCompField_bpf_attr_122 ;
   struct __anonstruct_info_607 info ;
   struct __anonstruct_query_608 query ;
   struct __anonstruct_raw_tracepoint_609 raw_tracepoint ;
   struct __anonstruct_610 __anonCompField_bpf_attr_123 ;
   struct __anonstruct_task_fd_query_611 task_fd_query ;
} __attribute__((__aligned__(8)));
#line 3653  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct bpf_func_info {
   __u32 insn_off ;
   __u32 type_id ;
};
#line 3661  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct bpf_line_info {
   __u32 insn_off ;
   __u32 file_name_off ;
   __u32 line_off ;
   __u32 line_col ;
};
#line 40  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rbtree_latch.h"
struct latch_tree_node {
   struct rb_node node[2U] ;
};
#line 215 
struct bpf_prog_aux;
#line 216 
struct bpf_map;
#line 217 
struct btf;
#line 218 
struct btf_type;
#line 37  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_map_ops {
   int (*map_alloc_check)(union bpf_attr *) ;
   struct bpf_map *(*map_alloc)(union bpf_attr *) ;
   void (*map_release)(struct bpf_map *, struct file *) ;
   void (*map_free)(struct bpf_map *) ;
   int (*map_get_next_key)(struct bpf_map *, void *, void *) ;
   void (*map_release_uref)(struct bpf_map *) ;
   void *(*map_lookup_elem_sys_only)(struct bpf_map *, void *) ;
   void *(*map_lookup_elem)(struct bpf_map *, void *) ;
   int (*map_update_elem)(struct bpf_map *, void *, void *, u64 ) ;
   int (*map_delete_elem)(struct bpf_map *, void *) ;
   int (*map_push_elem)(struct bpf_map *, void *, u64 ) ;
   int (*map_pop_elem)(struct bpf_map *, void *) ;
   int (*map_peek_elem)(struct bpf_map *, void *) ;
   void *(*map_fd_get_ptr)(struct bpf_map *, struct file *, int ) ;
   void (*map_fd_put_ptr)(void *) ;
   u32 (*map_gen_lookup)(struct bpf_map *, struct bpf_insn *) ;
   u32 (*map_fd_sys_lookup_elem)(void *) ;
   void (*map_seq_show_elem)(struct bpf_map *, void *, struct seq_file *) ;
   int (*map_check_btf)(struct bpf_map *, struct btf *, struct btf_type *, struct btf_type *) ;
   int (*map_poke_track)(struct bpf_map *, struct bpf_prog_aux *) ;
   void (*map_poke_untrack)(struct bpf_map *, struct bpf_prog_aux *) ;
   void (*map_poke_run)(struct bpf_map *, u32 , struct bpf_prog *, struct bpf_prog *) ;
   int (*map_direct_value_addr)(struct bpf_map *, u64 *, u32 ) ;
   int (*map_direct_value_meta)(struct bpf_map *, u64 , u32 *) ;
   int (*map_mmap)(struct bpf_map *, struct vm_area_struct *) ;
};
#line 82  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_map_memory {
   u32 pages ;
   struct user_struct *user ;
};
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_map {
   struct bpf_map_ops *ops ;
   struct bpf_map *inner_map_meta ;
   void *security ;
   enum bpf_map_type map_type ;
   u32 key_size ;
   u32 value_size ;
   u32 max_entries ;
   u32 map_flags ;
   int spin_lock_off ;
   u32 id ;
   int numa_node ;
   u32 btf_key_type_id ;
   u32 btf_value_type_id ;
   struct btf *btf ;
   struct bpf_map_memory memory ;
   char name[16U] ;
   bool unpriv_array ;
   bool frozen ;
   atomic64_t refcnt ;
   atomic64_t usercnt ;
   struct work_struct work ;
   struct mutex freeze_mutex ;
   u64 writecnt ;
};
#line 151 
struct bpf_offload_dev;
#line 152 
struct bpf_offloaded_map;
#line 156  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_map_dev_ops {
   int (*map_get_next_key)(struct bpf_offloaded_map *, void *, void *) ;
   int (*map_lookup_elem)(struct bpf_offloaded_map *, void *, void *) ;
   int (*map_update_elem)(struct bpf_offloaded_map *, void *, void *, u64 ) ;
   int (*map_delete_elem)(struct bpf_offloaded_map *, void *) ;
};
#line 166  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_offloaded_map {
   struct bpf_map map ;
   struct net_device *netdev ;
   struct bpf_map_dev_ops *dev_ops ;
   void *dev_priv ;
   struct list_head offloads ;
};
#line 327  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_prog_ops {
   int (*test_run)(struct bpf_prog *, union bpf_attr *, union bpf_attr *) ;
};
#line 369  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_prog_offload {
   struct bpf_prog *prog ;
   struct net_device *netdev ;
   struct bpf_offload_dev *offdev ;
   void *dev_priv ;
   struct list_head offloads ;
   bool dev_state ;
   bool opt_failed ;
   void *jited_image ;
   u32 jited_len ;
};
#line 394  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_prog_stats {
   u64 cnt ;
   u64 nsecs ;
   struct u64_stats_sync syncp ;
} __attribute__((__aligned__(16)));
#line 400  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct btf_func_model {
   u8 ret_size ;
   u8 nr_args ;
   u8 arg_size[12U] ;
};
#line 447 
enum bpf_tramp_prog_type {
    BPF_TRAMP_FENTRY = 0,
    BPF_TRAMP_FEXIT = 1,
    BPF_TRAMP_MAX = 2
};
#line 454  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct __anonstruct_func_644 {
   struct btf_func_model model ;
   void *addr ;
   bool ftrace_managed ;
};
#line 454  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_trampoline {
   struct hlist_node hlist ;
   struct mutex mutex ;
   refcount_t refcnt ;
   u64 key ;
   struct __anonstruct_func_644 func ;
   struct hlist_head progs_hlist[2U] ;
   int progs_cnt[2U] ;
   void *image ;
   u64 selector ;
};
#line 495  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_func_info_aux {
   bool unreliable ;
};
#line 504  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct __anonstruct_tail_call_646 {
   struct bpf_map *map ;
   u32 key ;
};
#line 504  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
union __anonunion_645 {
   struct __anonstruct_tail_call_646 tail_call ;
};
#line 504  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_jit_poke_descriptor {
   void *ip ;
   union __anonunion_645 __anonCompField_bpf_jit_poke_descriptor_148 ;
   bool ip_stable ;
   u8 adj_off ;
   u16 reason ;
};
#line 517  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
union __anonunion_647 {
   struct work_struct work ;
   struct callback_head rcu ;
};
#line 517  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_prog_aux {
   atomic64_t refcnt ;
   u32 used_map_cnt ;
   u32 max_ctx_offset ;
   u32 max_pkt_offset ;
   u32 max_tp_access ;
   u32 stack_depth ;
   u32 id ;
   u32 func_cnt ;
   u32 func_idx ;
   u32 attach_btf_id ;
   struct bpf_prog *linked_prog ;
   bool verifier_zext ;
   bool offload_requested ;
   bool attach_btf_trace ;
   bool func_proto_unreliable ;
   enum bpf_tramp_prog_type trampoline_prog_type ;
   struct bpf_trampoline *trampoline ;
   struct hlist_node tramp_hlist ;
   struct btf_type *attach_func_proto ;
   char *attach_func_name ;
   struct bpf_prog **func ;
   void *jit_data ;
   struct bpf_jit_poke_descriptor *poke_tab ;
   u32 size_poke_tab ;
   struct latch_tree_node ksym_tnode ;
   struct list_head ksym_lnode ;
   struct bpf_prog_ops *ops ;
   struct bpf_map **used_maps ;
   struct bpf_prog *prog ;
   struct user_struct *user ;
   u64 load_time ;
   struct bpf_map *cgroup_storage[2U] ;
   char name[16U] ;
   void *security ;
   struct bpf_prog_offload *offload ;
   struct btf *btf ;
   struct bpf_func_info *func_info ;
   struct bpf_func_info_aux *func_info_aux ;
   struct bpf_line_info *linfo ;
   void **jited_linfo ;
   u32 func_info_cnt ;
   u32 nr_linfo ;
   u32 linfo_idx ;
   u32 num_exentries ;
   struct exception_table_entry *extable ;
   struct bpf_prog_stats *stats ;
   union __anonunion_647 __anonCompField_bpf_prog_aux_149 ;
};
#line 686 
struct bpf_cgroup_storage;
#line 686  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_prog_array_item {
   struct bpf_prog *prog ;
   struct bpf_cgroup_storage *cgroup_storage[2U] ;
};
#line 691  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_prog_array {
   struct callback_head rcu ;
   struct bpf_prog_array_item items[0U] ;
};
#line 1335 
struct cgroup;
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf-cgroup.h"
struct bpf_cgroup_storage_map;
#line 37  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf-cgroup.h"
struct bpf_storage_buffer {
   struct callback_head rcu ;
   char data[0U] ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf-cgroup.h"
union __anonunion_649 {
   struct bpf_storage_buffer *buf ;
   void *percpu_buf ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf-cgroup.h"
struct bpf_cgroup_storage {
   union __anonunion_649 __anonCompField_bpf_cgroup_storage_151 ;
   struct bpf_cgroup_storage_map *map ;
   struct bpf_cgroup_storage_key key ;
   struct list_head list ;
   struct rb_node node ;
   struct callback_head rcu ;
};
#line 62  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf-cgroup.h"
struct cgroup_bpf {
   struct bpf_prog_array *effective[26U] ;
   struct list_head progs[26U] ;
   u32 flags[26U] ;
   struct bpf_prog_array *inactive ;
   struct percpu_ref refcnt ;
   struct work_struct release_work ;
};
#line 69  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kthread.h"
struct kthread_work;
#line 86  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kthread.h"
struct kthread_worker {
   unsigned int flags ;
   raw_spinlock_t lock ;
   struct list_head work_list ;
   struct list_head delayed_work_list ;
   struct task_struct *task ;
   struct kthread_work *current_work ;
};
#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kthread.h"
struct kthread_work {
   struct list_head node ;
   void (*func)(struct kthread_work *) ;
   struct kthread_worker *worker ;
   int canceling ;
};
#line 103  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kthread.h"
struct kthread_delayed_work {
   struct kthread_work work ;
   struct timer_list timer ;
};
#line 199 
struct cgroup_subsys_state;
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/psi_types.h"
struct psi_group_cpu {
   seqcount_t seq ;
   unsigned int tasks[3U] ;
   u32 state_mask ;
   u32 times[6U] ;
   u64 state_start ;
   u32 times_prev[2U][6U] ;
};
#line 96 
struct psi_group;
#line 128  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/psi_types.h"
struct psi_group {
   struct mutex avgs_lock ;
   struct psi_group_cpu *pcpu ;
   u64 avg_total[5U] ;
   u64 avg_last_update ;
   u64 avg_next_update ;
   struct delayed_work avgs_work ;
   u64 total[2U][5U] ;
   unsigned long avg[5U][3U] ;
   atomic_t poll_scheduled ;
   struct kthread_worker *poll_kworker ;
   struct kthread_delayed_work poll_work ;
   struct mutex trigger_lock ;
   struct list_head triggers ;
   u32 nr_triggers[5U] ;
   u32 poll_states ;
   u64 poll_min_period ;
   u64 polling_total[5U] ;
   u64 polling_next_update ;
   u64 polling_until ;
};
#line 166 
struct cgroup_root;
#line 167 
struct cgroup_subsys;
#line 168 
struct cgroup_taskset;
#line 119  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup_file {
   struct kernfs_node *kn ;
   unsigned long notified_at ;
   struct timer_list notify_timer ;
};
#line 133  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup_subsys_state {
   struct cgroup *cgroup ;
   struct cgroup_subsys *ss ;
   struct percpu_ref refcnt ;
   struct list_head sibling ;
   struct list_head children ;
   struct list_head rstat_css_node ;
   int id ;
   unsigned int flags ;
   u64 serial_nr ;
   atomic_t online_cnt ;
   struct work_struct destroy_work ;
   struct rcu_work destroy_rwork ;
   struct cgroup_subsys_state *parent ;
};
#line 190  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct css_set {
   struct cgroup_subsys_state *subsys[14U] ;
   refcount_t refcount ;
   struct css_set *dom_cset ;
   struct cgroup *dfl_cgrp ;
   int nr_tasks ;
   struct list_head tasks ;
   struct list_head mg_tasks ;
   struct list_head dying_tasks ;
   struct list_head task_iters ;
   struct list_head e_cset_node[14U] ;
   struct list_head threaded_csets ;
   struct list_head threaded_csets_node ;
   struct hlist_node hlist ;
   struct list_head cgrp_links ;
   struct list_head mg_preload_node ;
   struct list_head mg_node ;
   struct cgroup *mg_src_cgrp ;
   struct cgroup *mg_dst_cgrp ;
   struct css_set *mg_dst_cset ;
   bool dead ;
   struct callback_head callback_head ;
};
#line 279  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup_base_stat {
   struct task_cputime cputime ;
};
#line 303  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup_rstat_cpu {
   struct u64_stats_sync bsync ;
   struct cgroup_base_stat bstat ;
   struct cgroup_base_stat last_bstat ;
   struct cgroup *updated_children ;
   struct cgroup *updated_next ;
};
#line 332  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup_freezer_state {
   bool freeze ;
   int e_freeze ;
   int nr_frozen_descendants ;
   int nr_frozen_tasks ;
};
#line 351  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup {
   struct cgroup_subsys_state self ;
   unsigned long flags ;
   int level ;
   int max_depth ;
   int nr_descendants ;
   int nr_dying_descendants ;
   int max_descendants ;
   int nr_populated_csets ;
   int nr_populated_domain_children ;
   int nr_populated_threaded_children ;
   int nr_threaded_children ;
   struct kernfs_node *kn ;
   struct cgroup_file procs_file ;
   struct cgroup_file events_file ;
   u16 subtree_control ;
   u16 subtree_ss_mask ;
   u16 old_subtree_control ;
   u16 old_subtree_ss_mask ;
   struct cgroup_subsys_state *subsys[14U] ;
   struct cgroup_root *root ;
   struct list_head cset_links ;
   struct list_head e_csets[14U] ;
   struct cgroup *dom_cgrp ;
   struct cgroup *old_dom_cgrp ;
   struct cgroup_rstat_cpu *rstat_cpu ;
   struct list_head rstat_css_list ;
   struct cgroup_base_stat last_bstat ;
   struct cgroup_base_stat bstat ;
   struct prev_cputime prev_cputime ;
   struct list_head pidlists ;
   struct mutex pidlist_mutex ;
   wait_queue_head_t offline_waitq ;
   struct work_struct release_agent_work ;
   struct psi_group psi ;
   struct cgroup_bpf bpf ;
   atomic_t congestion_count ;
   struct cgroup_freezer_state freezer ;
   u64 ancestor_ids[] ;
};
#line 489  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup_root {
   struct kernfs_root *kf_root ;
   unsigned int subsys_mask ;
   int hierarchy_id ;
   struct cgroup cgrp ;
   u64 cgrp_ancestor_id_storage ;
   atomic_t nr_cgrps ;
   struct list_head root_list ;
   unsigned int flags ;
   char release_agent_path[4096U] ;
   char name[64U] ;
};
#line 527  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cftype {
   char name[64U] ;
   unsigned long private ;
   size_t max_write_len ;
   unsigned int flags ;
   unsigned int file_offset ;
   struct cgroup_subsys *ss ;
   struct list_head node ;
   struct kernfs_ops *kf_ops ;
   int (*open)(struct kernfs_open_file *) ;
   void (*release)(struct kernfs_open_file *) ;
   u64 (*read_u64)(struct cgroup_subsys_state *, struct cftype *) ;
   s64 (*read_s64)(struct cgroup_subsys_state *, struct cftype *) ;
   int (*seq_show)(struct seq_file *, void *) ;
   void *(*seq_start)(struct seq_file *, loff_t *) ;
   void *(*seq_next)(struct seq_file *, void *, loff_t *) ;
   void (*seq_stop)(struct seq_file *, void *) ;
   int (*write_u64)(struct cgroup_subsys_state *, struct cftype *, u64 ) ;
   int (*write_s64)(struct cgroup_subsys_state *, struct cftype *, s64 ) ;
   ssize_t (*write)(struct kernfs_open_file *, char *, size_t , loff_t ) ;
   __poll_t (*poll)(struct kernfs_open_file *, struct poll_table_struct *) ;
   struct lock_class_key lockdep_key ;
};
#line 616  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup_subsys {
   struct cgroup_subsys_state *(*css_alloc)(struct cgroup_subsys_state *) ;
   int (*css_online)(struct cgroup_subsys_state *) ;
   void (*css_offline)(struct cgroup_subsys_state *) ;
   void (*css_released)(struct cgroup_subsys_state *) ;
   void (*css_free)(struct cgroup_subsys_state *) ;
   void (*css_reset)(struct cgroup_subsys_state *) ;
   void (*css_rstat_flush)(struct cgroup_subsys_state *, int ) ;
   int (*css_extra_stat_show)(struct seq_file *, struct cgroup_subsys_state *) ;
   int (*can_attach)(struct cgroup_taskset *) ;
   void (*cancel_attach)(struct cgroup_taskset *) ;
   void (*attach)(struct cgroup_taskset *) ;
   void (*post_attach)(void) ;
   int (*can_fork)(struct task_struct *) ;
   void (*cancel_fork)(struct task_struct *) ;
   void (*fork)(struct task_struct *) ;
   void (*exit)(struct task_struct *) ;
   void (*release)(struct task_struct *) ;
   void (*bind)(struct cgroup_subsys_state *) ;
   bool early_init : 1 ;
   bool implicit_on_dfl : 1 ;
   bool threaded : 1 ;
   bool broken_hierarchy : 1 ;
   bool warned_broken_hierarchy : 1 ;
   int id ;
   char *name ;
   char *legacy_name ;
   struct cgroup_root *root ;
   struct idr css_idr ;
   struct list_head cfts ;
   struct cftype *dfl_cftypes ;
   struct cftype *legacy_cftypes ;
   unsigned int depends_on ;
};
#line 848  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup.h"
struct cgroup_namespace {
   refcount_t count ;
   struct ns_common ns ;
   struct user_namespace *user_ns ;
   struct ucounts *ucounts ;
   struct css_set *root_cset ;
};
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netprio_cgroup.h"
struct netprio_map {
   struct callback_head rcu ;
   u32 priomap_len ;
   u32 priomap[] ;
};
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/xdp.h"
struct xdp_mem_info {
   u32 type ;
   u32 id ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/xdp.h"
struct xdp_rxq_info {
   struct net_device *dev ;
   u32 queue_index ;
   u32 reg_state ;
   struct xdp_mem_info mem ;
} __attribute__((__aligned__(64)));
#line 75  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/xdp.h"
struct xdp_frame {
   void *data ;
   u16 len ;
   u16 headroom ;
   u16 metasize ;
   struct xdp_mem_info mem ;
   struct net_device *dev_rx ;
};
#line 175 
struct netdev_bpf;
#line 161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/security.h"
struct xfrm_state;
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/signal.h"
struct sighand_struct {
   spinlock_t siglock ;
   refcount_t count ;
   wait_queue_head_t signalfd_wqh ;
   struct k_sigaction action[64U] ;
};
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/signal.h"
struct pacct_struct {
   int ac_flag ;
   long ac_exitcode ;
   unsigned long ac_mem ;
   u64 ac_utime ;
   u64 ac_stime ;
   unsigned long ac_minflt ;
   unsigned long ac_majflt ;
};
#line 36  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/signal.h"
struct cpu_itimer {
   u64 expires ;
   u64 incr ;
};
#line 45  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/signal.h"
struct task_cputime_atomic {
   atomic64_t utime ;
   atomic64_t stime ;
   atomic64_t sum_exec_runtime ;
};
#line 64  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/signal.h"
struct thread_group_cputimer {
   struct task_cputime_atomic cputime_atomic ;
};
#line 80 
struct tty_struct;
#line 80 
struct autogroup;
#line 80 
struct tty_audit_buf;
#line 80  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/signal.h"
struct signal_struct {
   refcount_t sigcnt ;
   atomic_t live ;
   int nr_threads ;
   struct list_head thread_head ;
   wait_queue_head_t wait_chldexit ;
   struct task_struct *curr_target ;
   struct sigpending shared_pending ;
   struct hlist_head multiprocess ;
   int group_exit_code ;
   int notify_count ;
   struct task_struct *group_exit_task ;
   int group_stop_count ;
   unsigned int flags ;
   unsigned int is_child_subreaper : 1 ;
   unsigned int has_child_subreaper : 1 ;
   int posix_timer_id ;
   struct list_head posix_timers ;
   struct hrtimer real_timer ;
   ktime_t it_real_incr ;
   struct cpu_itimer it[2U] ;
   struct thread_group_cputimer cputimer ;
   struct posix_cputimers posix_cputimers ;
   struct pid *pids[4U] ;
   struct pid *tty_old_pgrp ;
   int leader ;
   struct tty_struct *tty ;
   struct autogroup *autogroup ;
   seqlock_t stats_lock ;
   u64 utime ;
   u64 stime ;
   u64 cutime ;
   u64 cstime ;
   u64 gtime ;
   u64 cgtime ;
   struct prev_cputime prev_cputime ;
   unsigned long nvcsw ;
   unsigned long nivcsw ;
   unsigned long cnvcsw ;
   unsigned long cnivcsw ;
   unsigned long min_flt ;
   unsigned long maj_flt ;
   unsigned long cmin_flt ;
   unsigned long cmaj_flt ;
   unsigned long inblock ;
   unsigned long oublock ;
   unsigned long cinblock ;
   unsigned long coublock ;
   unsigned long maxrss ;
   unsigned long cmaxrss ;
   struct task_io_accounting ioac ;
   unsigned long long sum_sched_runtime ;
   struct rlimit rlim[16U] ;
   struct pacct_struct pacct ;
   struct taskstats *stats ;
   unsigned int audit_tty ;
   struct tty_audit_buf *tty_audit_buf ;
   bool oom_flag_origin ;
   short oom_score_adj ;
   short oom_score_adj_min ;
   struct mm_struct *oom_mm ;
   struct mutex cred_guard_mutex ;
} __attribute__((__designated_init__));
#line 44  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/netlink.h"
struct nlmsghdr {
   __u32 nlmsg_len ;
   __u16 nlmsg_type ;
   __u16 nlmsg_flags ;
   __u32 nlmsg_seq ;
   __u32 nlmsg_pid ;
};
#line 211  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/netlink.h"
struct nlattr {
   __u16 nla_len ;
   __u16 nla_type ;
};
#line 74  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netlink.h"
struct netlink_ext_ack {
   char *_msg ;
   struct nlattr *bad_attr ;
   u8 cookie[20U] ;
   u8 cookie_len ;
};
#line 180  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netlink.h"
union __anonunion_674 {
   u8 ctx[48U] ;
   long args[6U] ;
};
#line 180  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netlink.h"
struct netlink_callback {
   struct sk_buff *skb ;
   struct nlmsghdr *nlh ;
   int (*dump)(struct sk_buff *, struct netlink_callback *) ;
   int (*done)(struct netlink_callback *) ;
   void *data ;
   struct module *module ;
   struct netlink_ext_ack *extack ;
   u16 family ;
   u16 min_dump_alloc ;
   bool strict_check ;
   u16 answer_flags ;
   unsigned int prev_seq ;
   unsigned int seq ;
   union __anonunion_674 __anonCompField_netlink_callback_154 ;
};
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/neighbour.h"
struct ndmsg {
   __u8 ndm_family ;
   __u8 ndm_pad1 ;
   __u16 ndm_pad2 ;
   __s32 ndm_ifindex ;
   __u16 ndm_state ;
   __u8 ndm_flags ;
   __u8 ndm_type ;
};
#line 44  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if_link.h"
struct rtnl_link_stats64 {
   __u64 rx_packets ;
   __u64 tx_packets ;
   __u64 rx_bytes ;
   __u64 tx_bytes ;
   __u64 rx_errors ;
   __u64 tx_errors ;
   __u64 rx_dropped ;
   __u64 tx_dropped ;
   __u64 multicast ;
   __u64 collisions ;
   __u64 rx_length_errors ;
   __u64 rx_over_errors ;
   __u64 rx_crc_errors ;
   __u64 rx_frame_errors ;
   __u64 rx_fifo_errors ;
   __u64 rx_missed_errors ;
   __u64 tx_aborted_errors ;
   __u64 tx_carrier_errors ;
   __u64 tx_fifo_errors ;
   __u64 tx_heartbeat_errors ;
   __u64 tx_window_errors ;
   __u64 rx_compressed ;
   __u64 tx_compressed ;
   __u64 rx_nohandler ;
};
#line 753  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if_link.h"
struct ifla_vf_guid {
   __u32 vf ;
   __u64 guid ;
};
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/if_link.h"
struct ifla_vf_stats {
   __u64 rx_packets ;
   __u64 tx_packets ;
   __u64 rx_bytes ;
   __u64 tx_bytes ;
   __u64 broadcast ;
   __u64 multicast ;
   __u64 rx_dropped ;
   __u64 tx_dropped ;
};
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/if_link.h"
struct ifla_vf_info {
   __u32 vf ;
   __u8 mac[32U] ;
   __u32 vlan ;
   __u32 qos ;
   __u32 spoofchk ;
   __u32 linkstate ;
   __u32 min_tx_rate ;
   __u32 max_tx_rate ;
   __u32 rss_query_en ;
   __u32 trusted ;
   __be16 vlan_proto ;
};
#line 118  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/hashtable.h"
struct netpoll_info;
#line 119 
struct phy_device;
#line 120 
struct dsa_port;
#line 121 
struct sfp_bus;
#line 122 
struct wireless_dev;
#line 123 
struct wpan_dev;
#line 124 
struct mpls_dev;
#line 69  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
enum netdev_tx {
    __NETDEV_TX_MIN = -2147483648,
    NETDEV_TX_OK = 0,
    NETDEV_TX_BUSY = 16
};
#line 75  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
typedef enum netdev_tx netdev_tx_t;
#line 161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct net_device_stats {
   unsigned long rx_packets ;
   unsigned long tx_packets ;
   unsigned long rx_bytes ;
   unsigned long tx_bytes ;
   unsigned long rx_errors ;
   unsigned long tx_errors ;
   unsigned long rx_dropped ;
   unsigned long tx_dropped ;
   unsigned long multicast ;
   unsigned long collisions ;
   unsigned long rx_length_errors ;
   unsigned long rx_over_errors ;
   unsigned long rx_crc_errors ;
   unsigned long rx_frame_errors ;
   unsigned long rx_fifo_errors ;
   unsigned long rx_missed_errors ;
   unsigned long tx_aborted_errors ;
   unsigned long tx_carrier_errors ;
   unsigned long tx_fifo_errors ;
   unsigned long tx_heartbeat_errors ;
   unsigned long tx_window_errors ;
   unsigned long rx_compressed ;
   unsigned long tx_compressed ;
};
#line 217  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_hw_addr_list {
   struct list_head list ;
   int count ;
};
#line 237  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct hh_cache {
   unsigned int hh_len ;
   seqlock_t hh_lock ;
   unsigned long hh_data[16U] ;
};
#line 263  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct header_ops {
   int (*create)(struct sk_buff *, struct net_device *, unsigned short , void *, void *, unsigned int ) ;
   int (*parse)(struct sk_buff *, unsigned char *) ;
   int (*cache)(struct neighbour *, struct hh_cache *, __be16 ) ;
   void (*cache_update)(struct hh_cache *, struct net_device *, unsigned char *) ;
   bool (*validate)(char *, unsigned int ) ;
   __be16 (*parse_protocol)(struct sk_buff *) ;
};
#line 302  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct gro_list {
   struct list_head list ;
   int count ;
};
#line 316  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct napi_struct {
   struct list_head poll_list ;
   unsigned long state ;
   int weight ;
   unsigned long gro_bitmask ;
   int (*poll)(struct napi_struct *, int ) ;
   int poll_owner ;
   struct net_device *dev ;
   struct gro_list gro_hash[8U] ;
   struct sk_buff *skb ;
   struct list_head rx_list ;
   int rx_count ;
   struct hrtimer timer ;
   struct list_head dev_list ;
   struct hlist_node napi_hash_node ;
   unsigned int napi_id ;
};
#line 372 
enum rx_handler_result {
    RX_HANDLER_CONSUMED = 0,
    RX_HANDLER_ANOTHER = 1,
    RX_HANDLER_EXACT = 2,
    RX_HANDLER_PASS = 3
};
#line 379  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
typedef enum rx_handler_result rx_handler_result_t;
#line 421  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
typedef rx_handler_result_t rx_handler_func_t(struct sk_buff **);
#line 589 
struct xdp_umem;
#line 589  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_queue {
   struct net_device *dev ;
   struct Qdisc *qdisc ;
   struct Qdisc *qdisc_sleeping ;
   struct kobject kobj ;
   int numa_node ;
   unsigned long tx_maxrate ;
   unsigned long trans_timeout ;
   struct net_device *sb_dev ;
   struct xdp_umem *umem ;
   spinlock_t _xmit_lock ;
   int xmit_lock_owner ;
   unsigned long trans_start ;
   unsigned long state ;
   struct dql dql ;
} __attribute__((__aligned__(64)));
#line 662  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct rps_map {
   unsigned int len ;
   struct callback_head rcu ;
   u16 cpus[0U] ;
};
#line 674  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct rps_dev_flow {
   u16 cpu ;
   u16 filter ;
   unsigned int last_qtail ;
};
#line 684  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct rps_dev_flow_table {
   unsigned int mask ;
   struct callback_head rcu ;
   struct rps_dev_flow flows[0U] ;
};
#line 736  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_rx_queue {
   struct rps_map *rps_map ;
   struct rps_dev_flow_table *rps_flow_table ;
   struct kobject kobj ;
   struct net_device *dev ;
   struct xdp_rxq_info xdp_rxq ;
   struct xdp_umem *umem ;
} __attribute__((__aligned__(64)));
#line 764  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct xps_map {
   unsigned int len ;
   unsigned int alloc_len ;
   struct callback_head rcu ;
   u16 queues[0U] ;
};
#line 777  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct xps_dev_maps {
   struct callback_head rcu ;
   struct xps_map *attr_map[0U] ;
};
#line 793  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_tc_txq {
   u16 count ;
   u16 offset ;
};
#line 803  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_fcoe_hbainfo {
   char manufacturer[64U] ;
   char serial_number[64U] ;
   char hardware_version[64U] ;
   char driver_version[64U] ;
   char optionrom_version[64U] ;
   char firmware_version[64U] ;
   char model[256U] ;
   char model_description[256U] ;
};
#line 820  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_phys_item_id {
   unsigned char id[32U] ;
   unsigned char id_len ;
};
#line 833 
enum tc_setup_type {
    TC_SETUP_QDISC_MQPRIO = 0,
    TC_SETUP_CLSU32 = 1,
    TC_SETUP_CLSFLOWER = 2,
    TC_SETUP_CLSMATCHALL = 3,
    TC_SETUP_CLSBPF = 4,
    TC_SETUP_BLOCK = 5,
    TC_SETUP_QDISC_CBS = 6,
    TC_SETUP_QDISC_RED = 7,
    TC_SETUP_QDISC_PRIO = 8,
    TC_SETUP_QDISC_MQ = 9,
    TC_SETUP_QDISC_ETF = 10,
    TC_SETUP_ROOT_QDISC = 11,
    TC_SETUP_QDISC_GRED = 12,
    TC_SETUP_QDISC_TAPRIO = 13,
    TC_SETUP_FT = 14
};
#line 851 
enum bpf_netdev_command {
    XDP_SETUP_PROG = 0,
    XDP_SETUP_PROG_HW = 1,
    XDP_QUERY_PROG = 2,
    XDP_QUERY_PROG_HW = 3,
    BPF_OFFLOAD_MAP_ALLOC = 4,
    BPF_OFFLOAD_MAP_FREE = 5,
    XDP_SETUP_XSK_UMEM = 6
};
#line 879  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct __anonstruct_679 {
   u32 flags ;
   struct bpf_prog *prog ;
   struct netlink_ext_ack *extack ;
};
#line 879  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct __anonstruct_680 {
   u32 prog_id ;
   u32 prog_flags ;
};
#line 879  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct __anonstruct_681 {
   struct bpf_offloaded_map *offmap ;
};
#line 879  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct __anonstruct_xsk_682 {
   struct xdp_umem *umem ;
   u16 queue_id ;
};
#line 879  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
union __anonunion_678 {
   struct __anonstruct_679 __anonCompField___anonunion_678_156 ;
   struct __anonstruct_680 __anonCompField___anonunion_678_157 ;
   struct __anonstruct_681 __anonCompField___anonunion_678_158 ;
   struct __anonstruct_xsk_682 xsk ;
};
#line 879  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_bpf {
   enum bpf_netdev_command command ;
   union __anonunion_678 __anonCompField_netdev_bpf_159 ;
};
#line 911  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct xfrmdev_ops {
   int (*xdo_dev_state_add)(struct xfrm_state *) ;
   void (*xdo_dev_state_delete)(struct xfrm_state *) ;
   void (*xdo_dev_state_free)(struct xfrm_state *) ;
   bool (*xdo_dev_offload_ok)(struct sk_buff *, struct xfrm_state *) ;
   void (*xdo_dev_state_advance_esn)(struct xfrm_state *) ;
};
#line 921  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct dev_ifalias {
   struct callback_head rcuhead ;
   char ifalias[] ;
};
#line 926 
struct tlsdev_ops;
#line 929  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_name_node {
   struct hlist_node hlist ;
   struct list_head list ;
   struct net_device *dev ;
   char *name ;
};
#line 1257 
struct devlink_port;
#line 1257  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct net_device_ops {
   int (*ndo_init)(struct net_device *) ;
   void (*ndo_uninit)(struct net_device *) ;
   int (*ndo_open)(struct net_device *) ;
   int (*ndo_stop)(struct net_device *) ;
   netdev_tx_t (*ndo_start_xmit)(struct sk_buff *, struct net_device *) ;
   netdev_features_t (*ndo_features_check)(struct sk_buff *, struct net_device *, netdev_features_t ) ;
   u16 (*ndo_select_queue)(struct net_device *, struct sk_buff *, struct net_device *) ;
   void (*ndo_change_rx_flags)(struct net_device *, int ) ;
   void (*ndo_set_rx_mode)(struct net_device *) ;
   int (*ndo_set_mac_address)(struct net_device *, void *) ;
   int (*ndo_validate_addr)(struct net_device *) ;
   int (*ndo_do_ioctl)(struct net_device *, struct ifreq *, int ) ;
   int (*ndo_set_config)(struct net_device *, struct ifmap *) ;
   int (*ndo_change_mtu)(struct net_device *, int ) ;
   int (*ndo_neigh_setup)(struct net_device *, struct neigh_parms *) ;
   void (*ndo_tx_timeout)(struct net_device *) ;
   void (*ndo_get_stats64)(struct net_device *, struct rtnl_link_stats64 *) ;
   bool (*ndo_has_offload_stats)(struct net_device *, int ) ;
   int (*ndo_get_offload_stats)(int , struct net_device *, void *) ;
   struct net_device_stats *(*ndo_get_stats)(struct net_device *) ;
   int (*ndo_vlan_rx_add_vid)(struct net_device *, __be16 , u16 ) ;
   int (*ndo_vlan_rx_kill_vid)(struct net_device *, __be16 , u16 ) ;
   void (*ndo_poll_controller)(struct net_device *) ;
   int (*ndo_netpoll_setup)(struct net_device *, struct netpoll_info *) ;
   void (*ndo_netpoll_cleanup)(struct net_device *) ;
   int (*ndo_set_vf_mac)(struct net_device *, int , u8 *) ;
   int (*ndo_set_vf_vlan)(struct net_device *, int , u16 , u8 , __be16 ) ;
   int (*ndo_set_vf_rate)(struct net_device *, int , int , int ) ;
   int (*ndo_set_vf_spoofchk)(struct net_device *, int , bool ) ;
   int (*ndo_set_vf_trust)(struct net_device *, int , bool ) ;
   int (*ndo_get_vf_config)(struct net_device *, int , struct ifla_vf_info *) ;
   int (*ndo_set_vf_link_state)(struct net_device *, int , int ) ;
   int (*ndo_get_vf_stats)(struct net_device *, int , struct ifla_vf_stats *) ;
   int (*ndo_set_vf_port)(struct net_device *, int , struct nlattr **) ;
   int (*ndo_get_vf_port)(struct net_device *, int , struct sk_buff *) ;
   int (*ndo_get_vf_guid)(struct net_device *, int , struct ifla_vf_guid *, struct ifla_vf_guid *) ;
   int (*ndo_set_vf_guid)(struct net_device *, int , u64 , int ) ;
   int (*ndo_set_vf_rss_query_en)(struct net_device *, int , bool ) ;
   int (*ndo_setup_tc)(struct net_device *, enum tc_setup_type , void *) ;
   int (*ndo_fcoe_enable)(struct net_device *) ;
   int (*ndo_fcoe_disable)(struct net_device *) ;
   int (*ndo_fcoe_ddp_setup)(struct net_device *, u16 , struct scatterlist *, unsigned int ) ;
   int (*ndo_fcoe_ddp_done)(struct net_device *, u16 ) ;
   int (*ndo_fcoe_ddp_target)(struct net_device *, u16 , struct scatterlist *, unsigned int ) ;
   int (*ndo_fcoe_get_hbainfo)(struct net_device *, struct netdev_fcoe_hbainfo *) ;
   int (*ndo_fcoe_get_wwn)(struct net_device *, u64 *, int ) ;
   int (*ndo_rx_flow_steer)(struct net_device *, struct sk_buff *, u16 , u32 ) ;
   int (*ndo_add_slave)(struct net_device *, struct net_device *, struct netlink_ext_ack *) ;
   int (*ndo_del_slave)(struct net_device *, struct net_device *) ;
   netdev_features_t (*ndo_fix_features)(struct net_device *, netdev_features_t ) ;
   int (*ndo_set_features)(struct net_device *, netdev_features_t ) ;
   int (*ndo_neigh_construct)(struct net_device *, struct neighbour *) ;
   void (*ndo_neigh_destroy)(struct net_device *, struct neighbour *) ;
   int (*ndo_fdb_add)(struct ndmsg *, struct nlattr **, struct net_device *, unsigned char *, u16 , u16 , struct netlink_ext_ack *) ;
   int (*ndo_fdb_del)(struct ndmsg *, struct nlattr **, struct net_device *, unsigned char *, u16 ) ;
   int (*ndo_fdb_dump)(struct sk_buff *, struct netlink_callback *, struct net_device *, struct net_device *, int *) ;
   int (*ndo_fdb_get)(struct sk_buff *, struct nlattr **, struct net_device *, unsigned char *, u16 , u32 , u32 , struct netlink_ext_ack *) ;
   int (*ndo_bridge_setlink)(struct net_device *, struct nlmsghdr *, u16 , struct netlink_ext_ack *) ;
   int (*ndo_bridge_getlink)(struct sk_buff *, u32 , u32 , struct net_device *, u32 , int ) ;
   int (*ndo_bridge_dellink)(struct net_device *, struct nlmsghdr *, u16 ) ;
   int (*ndo_change_carrier)(struct net_device *, bool ) ;
   int (*ndo_get_phys_port_id)(struct net_device *, struct netdev_phys_item_id *) ;
   int (*ndo_get_port_parent_id)(struct net_device *, struct netdev_phys_item_id *) ;
   int (*ndo_get_phys_port_name)(struct net_device *, char *, size_t ) ;
   void (*ndo_udp_tunnel_add)(struct net_device *, struct udp_tunnel_info *) ;
   void (*ndo_udp_tunnel_del)(struct net_device *, struct udp_tunnel_info *) ;
   void *(*ndo_dfwd_add_station)(struct net_device *, struct net_device *) ;
   void (*ndo_dfwd_del_station)(struct net_device *, void *) ;
   int (*ndo_set_tx_maxrate)(struct net_device *, int , u32 ) ;
   int (*ndo_get_iflink)(struct net_device *) ;
   int (*ndo_change_proto_down)(struct net_device *, bool ) ;
   int (*ndo_fill_metadata_dst)(struct net_device *, struct sk_buff *) ;
   void (*ndo_set_rx_headroom)(struct net_device *, int ) ;
   int (*ndo_bpf)(struct net_device *, struct netdev_bpf *) ;
   int (*ndo_xdp_xmit)(struct net_device *, int , struct xdp_frame **, u32 ) ;
   int (*ndo_xsk_wakeup)(struct net_device *, u32 , u32 ) ;
   struct devlink_port *(*ndo_get_devlink_port)(struct net_device *) ;
};
#line 1492 
enum ldv_15197 {
    NETREG_UNINITIALIZED = 0,
    NETREG_REGISTERED = 1,
    NETREG_UNREGISTERING = 2,
    NETREG_UNREGISTERED = 3,
    NETREG_RELEASED = 4,
    NETREG_DUMMY = 5
};
#line 1501 
enum ldv_15198 {
    RTNL_LINK_INITIALIZED = 0,
    RTNL_LINK_INITIALIZING = 1
};
#line 1795  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct __anonstruct_adj_list_683 {
   struct list_head upper ;
   struct list_head lower ;
};
#line 1795 
struct iw_handler_def;
#line 1795 
struct iw_public_data;
#line 1795 
struct vlan_info;
#line 1795 
struct tipc_bearer;
#line 1795 
struct in_device;
#line 1795 
struct dn_dev;
#line 1795 
struct pcpu_lstats;
#line 1795 
struct pcpu_sw_netstats;
#line 1795 
struct pcpu_dstats;
#line 1795  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
union __anonunion_684 {
   void *ml_priv ;
   struct pcpu_lstats *lstats ;
   struct pcpu_sw_netstats *tstats ;
   struct pcpu_dstats *dstats ;
};
#line 1795 
struct garp_port;
#line 1795 
struct mrp_port;
#line 1795  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct net_device {
   char name[16U] ;
   struct netdev_name_node *name_node ;
   struct dev_ifalias *ifalias ;
   unsigned long mem_end ;
   unsigned long mem_start ;
   unsigned long base_addr ;
   int irq ;
   unsigned long state ;
   struct list_head dev_list ;
   struct list_head napi_list ;
   struct list_head unreg_list ;
   struct list_head close_list ;
   struct list_head ptype_all ;
   struct list_head ptype_specific ;
   struct __anonstruct_adj_list_683 adj_list ;
   netdev_features_t features ;
   netdev_features_t hw_features ;
   netdev_features_t wanted_features ;
   netdev_features_t vlan_features ;
   netdev_features_t hw_enc_features ;
   netdev_features_t mpls_features ;
   netdev_features_t gso_partial_features ;
   int ifindex ;
   int group ;
   struct net_device_stats stats ;
   atomic_long_t rx_dropped ;
   atomic_long_t tx_dropped ;
   atomic_long_t rx_nohandler ;
   atomic_t carrier_up_count ;
   atomic_t carrier_down_count ;
   struct iw_handler_def *wireless_handlers ;
   struct iw_public_data *wireless_data ;
   struct net_device_ops *netdev_ops ;
   struct ethtool_ops *ethtool_ops ;
   struct l3mdev_ops *l3mdev_ops ;
   struct ndisc_ops *ndisc_ops ;
   struct xfrmdev_ops *xfrmdev_ops ;
   struct tlsdev_ops *tlsdev_ops ;
   struct header_ops *header_ops ;
   unsigned int flags ;
   unsigned int priv_flags ;
   unsigned short gflags ;
   unsigned short padded ;
   unsigned char operstate ;
   unsigned char link_mode ;
   unsigned char if_port ;
   unsigned char dma ;
   unsigned int mtu ;
   unsigned int min_mtu ;
   unsigned int max_mtu ;
   unsigned short type ;
   unsigned short hard_header_len ;
   unsigned char min_header_len ;
   unsigned short needed_headroom ;
   unsigned short needed_tailroom ;
   unsigned char perm_addr[32U] ;
   unsigned char addr_assign_type ;
   unsigned char addr_len ;
   unsigned char upper_level ;
   unsigned char lower_level ;
   unsigned short neigh_priv_len ;
   unsigned short dev_id ;
   unsigned short dev_port ;
   spinlock_t addr_list_lock ;
   unsigned char name_assign_type ;
   bool uc_promisc ;
   struct netdev_hw_addr_list uc ;
   struct netdev_hw_addr_list mc ;
   struct netdev_hw_addr_list dev_addrs ;
   struct kset *queues_kset ;
   unsigned int promiscuity ;
   unsigned int allmulti ;
   struct vlan_info *vlan_info ;
   struct dsa_port *dsa_ptr ;
   struct tipc_bearer *tipc_ptr ;
   void *atalk_ptr ;
   struct in_device *ip_ptr ;
   struct dn_dev *dn_ptr ;
   struct inet6_dev *ip6_ptr ;
   void *ax25_ptr ;
   struct wireless_dev *ieee80211_ptr ;
   struct wpan_dev *ieee802154_ptr ;
   struct mpls_dev *mpls_ptr ;
   unsigned char *dev_addr ;
   struct netdev_rx_queue *_rx ;
   unsigned int num_rx_queues ;
   unsigned int real_num_rx_queues ;
   struct bpf_prog *xdp_prog ;
   unsigned long gro_flush_timeout ;
   rx_handler_func_t *rx_handler ;
   void *rx_handler_data ;
   struct mini_Qdisc *miniq_ingress ;
   struct netdev_queue *ingress_queue ;
   struct nf_hook_entries *nf_hooks_ingress ;
   unsigned char broadcast[32U] ;
   struct cpu_rmap *rx_cpu_rmap ;
   struct hlist_node index_hlist ;
   struct netdev_queue *_tx ;
   unsigned int num_tx_queues ;
   unsigned int real_num_tx_queues ;
   struct Qdisc *qdisc ;
   struct hlist_head qdisc_hash[16U] ;
   unsigned int tx_queue_len ;
   spinlock_t tx_global_lock ;
   int watchdog_timeo ;
   struct xps_dev_maps *xps_cpus_map ;
   struct xps_dev_maps *xps_rxqs_map ;
   struct mini_Qdisc *miniq_egress ;
   struct timer_list watchdog_timer ;
   int *pcpu_refcnt ;
   struct list_head todo_list ;
   struct list_head link_watch_list ;
   enum ldv_15197 reg_state : 8 ;
   bool dismantle ;
   enum ldv_15198 rtnl_link_state : 16 ;
   bool needs_free_netdev ;
   void (*priv_destructor)(struct net_device *) ;
   struct netpoll_info *npinfo ;
   possible_net_t nd_net ;
   union __anonunion_684 __anonCompField_net_device_160 ;
   struct garp_port *garp_port ;
   struct mrp_port *mrp_port ;
   struct device dev ;
   struct attribute_group *sysfs_groups[4U] ;
   struct attribute_group *sysfs_rx_queue_group ;
   struct rtnl_link_ops *rtnl_link_ops ;
   unsigned int gso_max_size ;
   u16 gso_max_segs ;
   struct dcbnl_rtnl_ops *dcbnl_ops ;
   s16 num_tc ;
   struct netdev_tc_txq tc_to_txq[16U] ;
   u8 prio_tc_map[16U] ;
   unsigned int fcoe_ddp_xid ;
   struct netprio_map *priomap ;
   struct phy_device *phydev ;
   struct sfp_bus *sfp_bus ;
   struct lock_class_key qdisc_tx_busylock_key ;
   struct lock_class_key qdisc_running_key ;
   struct lock_class_key qdisc_xmit_lock_key ;
   struct lock_class_key addr_list_lock_key ;
   bool proto_down ;
   unsigned int wol_enabled : 1 ;
};
#line 2400  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct pcpu_sw_netstats {
   u64 rx_packets ;
   u64 rx_bytes ;
   u64 tx_packets ;
   u64 tx_bytes ;
   struct u64_stats_sync syncp ;
} __attribute__((__aligned__(32)));
#line 2408  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct pcpu_lstats {
   u64_stats_t packets ;
   u64_stats_t bytes ;
   struct u64_stats_sync syncp ;
} __attribute__((__aligned__(16)));
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/vnic_rq.h"
struct vnic_rq_ctrl {
   u64 ring_base ;
   u32 ring_size ;
   u32 pad0 ;
   u32 posted_index ;
   u32 pad1 ;
   u32 cq_index ;
   u32 pad2 ;
   u32 enable ;
   u32 pad3 ;
   u32 running ;
   u32 pad4 ;
   u32 fetch_index ;
   u32 pad5 ;
   u32 error_interrupt_enable ;
   u32 pad6 ;
   u32 error_interrupt_offset ;
   u32 pad7 ;
   u32 error_status ;
   u32 pad8 ;
   u32 dropped_packet_count ;
   u32 pad9 ;
   u32 dropped_packet_count_rc ;
   u32 pad10 ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/vnic_rq.h"
struct vnic_rq_buf {
   struct vnic_rq_buf *next ;
   dma_addr_t dma_addr ;
   void *os_buf ;
   unsigned int os_buf_index ;
   unsigned int len ;
   unsigned int index ;
   void *desc ;
   uint64_t wr_id ;
};
#line 85  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/vnic_rq.h"
struct vnic_rq {
   unsigned int index ;
   struct vnic_dev *vdev ;
   struct vnic_rq_ctrl *ctrl ;
   struct vnic_dev_ring ring ;
   struct vnic_rq_buf *bufs[64U] ;
   struct vnic_rq_buf *to_use ;
   struct vnic_rq_buf *to_clean ;
   void *os_buf_head ;
   unsigned int pkts_outstanding ;
};
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/vnic_intr.h"
struct vnic_intr_ctrl {
   u32 coalescing_timer ;
   u32 pad0 ;
   u32 coalescing_value ;
   u32 pad1 ;
   u32 coalescing_type ;
   u32 pad2 ;
   u32 mask_on_assertion ;
   u32 pad3 ;
   u32 mask ;
   u32 pad4 ;
   u32 int_credits ;
   u32 pad5 ;
   u32 int_credit_return ;
   u32 pad6 ;
};
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/vnic_intr.h"
struct vnic_intr {
   unsigned int index ;
   struct vnic_dev *vdev ;
   struct vnic_intr_ctrl *ctrl ;
};
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/vnic_stats.h"
struct vnic_tx_stats {
   u64 tx_frames_ok ;
   u64 tx_unicast_frames_ok ;
   u64 tx_multicast_frames_ok ;
   u64 tx_broadcast_frames_ok ;
   u64 tx_bytes_ok ;
   u64 tx_unicast_bytes_ok ;
   u64 tx_multicast_bytes_ok ;
   u64 tx_broadcast_bytes_ok ;
   u64 tx_drops ;
   u64 tx_errors ;
   u64 tx_tso ;
   u64 rsvd[16U] ;
};
#line 40  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/vnic_stats.h"
struct vnic_rx_stats {
   u64 rx_frames_ok ;
   u64 rx_frames_total ;
   u64 rx_unicast_frames_ok ;
   u64 rx_multicast_frames_ok ;
   u64 rx_broadcast_frames_ok ;
   u64 rx_bytes_ok ;
   u64 rx_unicast_bytes_ok ;
   u64 rx_multicast_bytes_ok ;
   u64 rx_broadcast_bytes_ok ;
   u64 rx_drop ;
   u64 rx_no_bufs ;
   u64 rx_errors ;
   u64 rx_rss ;
   u64 rx_crc_errors ;
   u64 rx_frames_64 ;
   u64 rx_frames_127 ;
   u64 rx_frames_255 ;
   u64 rx_frames_511 ;
   u64 rx_frames_1023 ;
   u64 rx_frames_1518 ;
   u64 rx_frames_to_max ;
   u64 rsvd[16U] ;
};
#line 66  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/vnic_stats.h"
struct vnic_gen_stats {
   u64 dma_map_error ;
};
#line 70  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/vnic_stats.h"
struct vnic_stats {
   struct vnic_tx_stats tx ;
   struct vnic_rx_stats rx ;
};
#line 50  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/enic.h"
struct enic_msix_entry {
   int requested ;
   char devname[24U] ;
   irqreturn_t (*isr)(int , void *) ;
   void *devid ;
   cpumask_var_t affinity_mask ;
};
#line 78  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/enic.h"
struct enic_rx_coal {
   u32 small_pkt_range_start ;
   u32 large_pkt_range_start ;
   u32 range_end ;
   u32 use_adaptive_rx_coalesce ;
};
#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/enic.h"
struct enic_port_profile {
   u32 set ;
   u8 request ;
   char name[40U] ;
   u8 instance_uuid[16U] ;
   u8 host_uuid[16U] ;
   u8 vf_mac[6U] ;
   u8 mac_addr[6U] ;
};
#line 128  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/enic.h"
struct enic_rfs_flw_tbl {
   u16 max ;
   int free ;
   u16 toclean : 10 ;
   struct hlist_head ht_head[1024U] ;
   spinlock_t lock ;
   struct timer_list rfs_may_expire ;
};
#line 140  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/enic.h"
struct vxlan_offload {
   u16 vxlan_udp_port_number ;
   u8 patch_level ;
   u8 flags ;
};
#line 147  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/enic.h"
struct enic {
   struct net_device *netdev ;
   struct pci_dev *pdev ;
   struct vnic_enet_config config ;
   struct vnic_dev_bar bar[6U] ;
   struct vnic_dev *vdev ;
   struct timer_list notify_timer ;
   struct work_struct reset ;
   struct work_struct tx_hang_reset ;
   struct work_struct change_mtu_work ;
   struct msix_entry msix_entry[18U] ;
   struct enic_msix_entry msix[18U] ;
   u32 msg_enable ;
   spinlock_t devcmd_lock ;
   u8 mac_addr[6U] ;
   unsigned int flags ;
   unsigned int priv_flags ;
   unsigned int mc_count ;
   unsigned int uc_count ;
   u32 port_mtu ;
   struct enic_rx_coal rx_coalesce_setting ;
   u32 rx_coalesce_usecs ;
   u32 tx_coalesce_usecs ;
   u16 num_vfs ;
   spinlock_t enic_api_lock ;
   struct enic_port_profile *pp ;
   struct vnic_wq wq[8U] ;
   spinlock_t wq_lock[8U] ;
   unsigned int wq_count ;
   u16 loop_enable ;
   u16 loop_tag ;
   struct vnic_rq rq[8U] ;
   unsigned int rq_count ;
   struct vxlan_offload vxlan ;
   u64 rq_truncated_pkts ;
   u64 rq_bad_fcs ;
   struct napi_struct napi[16U] ;
   struct vnic_intr intr[18U] ;
   unsigned int intr_count ;
   u32 *legacy_pba ;
   struct vnic_cq cq[16U] ;
   unsigned int cq_count ;
   struct enic_rfs_flw_tbl rfs_h ;
   u32 rx_copybreak ;
   u8 rss_key[40U] ;
   struct vnic_gen_stats gen_stats ;
};
#line 196  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow_dissector.h"
struct flow_dissector_key_control {
   u16 thoff ;
   u16 addr_type ;
   u32 flags ;
};
#line 40  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow_dissector.h"
struct flow_dissector_key_basic {
   __be16 n_proto ;
   u8 ip_proto ;
   u8 padding ;
};
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow_dissector.h"
struct flow_dissector_key_tags {
   u32 flow_label ;
};
#line 50  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow_dissector.h"
struct __anonstruct_1201 {
   u16 vlan_id : 12 ;
   u16 vlan_dei : 1 ;
   u16 vlan_priority : 3 ;
};
#line 50  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow_dissector.h"
union __anonunion_1200 {
   struct __anonstruct_1201 __anonCompField___anonunion_1200_74 ;
   __be16 vlan_tci ;
};
#line 50  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow_dissector.h"
struct flow_dissector_key_vlan {
   union __anonunion_1200 __anonCompField_flow_dissector_key_vlan_75 ;
   __be16 vlan_tpid ;
};
#line 84  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow_dissector.h"
struct flow_dissector_key_keyid {
   __be32 keyid ;
};
#line 93  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow_dissector.h"
struct flow_dissector_key_ipv4_addrs {
   __be32 src ;
   __be32 dst ;
};
#line 104  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow_dissector.h"
struct flow_dissector_key_ipv6_addrs {
   struct in6_addr src ;
   struct in6_addr dst ;
};
#line 114  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow_dissector.h"
struct flow_dissector_key_tipc {
   __be32 key ;
};
#line 123  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow_dissector.h"
union __anonunion_1202 {
   struct flow_dissector_key_ipv4_addrs v4addrs ;
   struct flow_dissector_key_ipv6_addrs v6addrs ;
   struct flow_dissector_key_tipc tipckey ;
};
#line 123  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow_dissector.h"
struct flow_dissector_key_addrs {
   union __anonunion_1202 __anonCompField_flow_dissector_key_addrs_76 ;
};
#line 155  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow_dissector.h"
struct __anonstruct_1204 {
   __be16 src ;
   __be16 dst ;
};
#line 155  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow_dissector.h"
union __anonunion_1203 {
   __be32 ports ;
   struct __anonstruct_1204 __anonCompField___anonunion_1203_77 ;
};
#line 155  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow_dissector.h"
struct flow_dissector_key_ports {
   union __anonunion_1203 __anonCompField_flow_dissector_key_ports_78 ;
};
#line 171  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow_dissector.h"
struct __anonstruct_1205 {
   u8 type ;
   u8 code ;
};
#line 171  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow_dissector.h"
struct flow_dissector_key_icmp {
   struct __anonstruct_1205 __anonCompField_flow_dissector_key_icmp_79 ;
   u16 id ;
};
#line 284  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow_dissector.h"
struct flow_keys {
   struct flow_dissector_key_control control ;
   struct flow_dissector_key_basic basic ;
   struct flow_dissector_key_tags tags ;
   struct flow_dissector_key_vlan vlan ;
   struct flow_dissector_key_vlan cvlan ;
   struct flow_dissector_key_keyid keyid ;
   struct flow_dissector_key_ports ports ;
   struct flow_dissector_key_icmp icmp ;
   struct flow_dissector_key_addrs addrs ;
};
#line 112  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/enic.h"
struct enic_rfs_fltr_node {
   struct flow_keys keys ;
   u32 flow_id ;
   u16 fltr_id ;
   u16 rq_id ;
   struct hlist_node node ;
};
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/enic_ethtool.c"
struct enic_stat {
   char name[32U] ;
   unsigned int index ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef __s8 s8;
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef __u16 __le16;
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef __u64 __be64;
#line 154  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef unsigned int slab_flags_t;
#line 60  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/export.h"
struct kernel_symbol {
   int value_offset ;
   int name_offset ;
   int namespace_offset ;
};
#line 136  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/init.h"
typedef void (*ctor_fn_t)(void);
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jump_label.h"
struct jump_entry;
#line 87 
struct static_key_mod;
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jump_label.h"
union __anonunion_1406 {
   unsigned long type ;
   struct jump_entry *entries ;
   struct static_key_mod *next ;
};
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jump_label.h"
struct static_key {
   atomic_t enabled ;
   union __anonunion_1406 __anonCompField_static_key_4 ;
};
#line 122  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jump_label.h"
struct jump_entry {
   s32 code ;
   s32 target ;
   long key ;
};
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bug.h"
struct bug_entry {
   int bug_addr_disp ;
   int file_disp ;
   unsigned short line ;
   unsigned short flags ;
};
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/tracepoint-defs.h"
struct tracepoint_func {
   void *func ;
   void *data ;
   int prio ;
};
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/tracepoint-defs.h"
struct tracepoint {
   char *name ;
   struct static_key key ;
   int (*regfunc)(void) ;
   void (*unregfunc)(void) ;
   struct tracepoint_func *funcs ;
};
#line 37  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/tracepoint-defs.h"
typedef int tracepoint_ptr_t;
#line 44  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/tracepoint-defs.h"
struct bpf_raw_event_map {
   struct tracepoint *tp ;
   void *bpf_func ;
   u32 num_args ;
   u32 writable_size ;
} __attribute__((__aligned__(32)));
#line 73  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/orc_types.h"
struct orc_entry {
   s16 sp_offset ;
   s16 bp_offset ;
   unsigned int sp_reg : 4 ;
   unsigned int bp_reg : 4 ;
   unsigned int type : 2 ;
   unsigned int end : 1 ;
} __attribute__((__packed__));
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/smp.h"
struct __call_single_data {
   struct llist_node llist ;
   void (*func)(void *) ;
   void *info ;
   unsigned int flags ;
};
#line 67  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rcu_segcblist.h"
struct rcu_segcblist {
   struct callback_head *head ;
   struct callback_head **tails[4U] ;
   unsigned long gp_seq[4U] ;
   atomic_long_t len ;
   long len_lazy ;
   u8 enabled ;
   u8 offloaded ;
};
#line 80 
struct srcu_struct;
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/srcu.h"
struct srcu_node;
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/srcutree.h"
struct srcu_data {
   unsigned long srcu_lock_count[2U] ;
   unsigned long srcu_unlock_count[2U] ;
   spinlock_t lock ;
   struct rcu_segcblist srcu_cblist ;
   unsigned long srcu_gp_seq_needed ;
   unsigned long srcu_gp_seq_needed_exp ;
   bool srcu_cblist_invoking ;
   struct timer_list delay_work ;
   struct work_struct work ;
   struct callback_head srcu_barrier_head ;
   struct srcu_node *mynode ;
   unsigned long grpmask ;
   int cpu ;
   struct srcu_struct *ssp ;
};
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/srcutree.h"
struct srcu_node {
   spinlock_t lock ;
   unsigned long srcu_have_cbs[4U] ;
   unsigned long srcu_data_have_cbs[4U] ;
   unsigned long srcu_gp_seq_needed_exp ;
   struct srcu_node *srcu_parent ;
   int grplo ;
   int grphi ;
};
#line 64  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/srcutree.h"
struct srcu_struct {
   struct srcu_node node[521U] ;
   struct srcu_node *level[4U] ;
   struct mutex srcu_cb_mutex ;
   spinlock_t lock ;
   struct mutex srcu_gp_mutex ;
   unsigned int srcu_idx ;
   unsigned long srcu_gp_seq ;
   unsigned long srcu_gp_seq_needed ;
   unsigned long srcu_gp_seq_needed_exp ;
   unsigned long srcu_last_gp_end ;
   struct srcu_data *sda ;
   unsigned long srcu_barrier_seq ;
   struct mutex srcu_barrier_mutex ;
   struct completion srcu_barrier_completion ;
   atomic_t srcu_barrier_cpu_cnt ;
   struct delayed_work work ;
   struct lockdep_map dep_map ;
};
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct free_area {
   struct list_head free_list[6U] ;
   unsigned long nr_free ;
};
#line 158 
struct pglist_data;
#line 168  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct zone_padding {
   char x[0U] ;
} __attribute__((__aligned__(4096)));
#line 285  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct zone_reclaim_stat {
   unsigned long recent_rotated[2U] ;
   unsigned long recent_scanned[2U] ;
};
#line 304  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct lruvec {
   struct list_head lists[5U] ;
   struct zone_reclaim_stat reclaim_stat ;
   atomic_long_t inactive_age ;
   unsigned long refaults ;
   unsigned long flags ;
   struct pglist_data *pgdat ;
};
#line 340  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct per_cpu_pages {
   int count ;
   int high ;
   int batch ;
   struct list_head lists[3U] ;
};
#line 349  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct per_cpu_pageset {
   struct per_cpu_pages pcp ;
   s8 expire ;
   u16 vm_numa_stat_diff[6U] ;
   s8 stat_threshold ;
   s8 vm_stat_diff[13U] ;
};
#line 361  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct per_cpu_nodestat {
   s8 stat_threshold ;
   s8 vm_node_stat_diff[32U] ;
};
#line 365 
enum zone_type {
    ZONE_DMA = 0,
    ZONE_DMA32 = 1,
    ZONE_NORMAL = 2,
    ZONE_MOVABLE = 3,
    ZONE_DEVICE = 4,
    __MAX_NR_ZONES = 5
};
#line 432  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct zone {
   unsigned long _watermark[3U] ;
   unsigned long watermark_boost ;
   unsigned long nr_reserved_highatomic ;
   long lowmem_reserve[5U] ;
   int node ;
   struct pglist_data *zone_pgdat ;
   struct per_cpu_pageset *pageset ;
   unsigned long zone_start_pfn ;
   atomic_long_t managed_pages ;
   unsigned long spanned_pages ;
   unsigned long present_pages ;
   char *name ;
   unsigned long nr_isolate_pageblock ;
   seqlock_t span_seqlock ;
   int initialized ;
   struct zone_padding _pad1_ ;
   struct free_area free_area[11U] ;
   unsigned long flags ;
   spinlock_t lock ;
   struct zone_padding _pad2_ ;
   unsigned long percpu_drift_mark ;
   unsigned long compact_cached_free_pfn ;
   unsigned long compact_cached_migrate_pfn[2U] ;
   unsigned long compact_init_migrate_pfn ;
   unsigned long compact_init_free_pfn ;
   unsigned int compact_considered ;
   unsigned int compact_defer_shift ;
   int compact_order_failed ;
   bool compact_blockskip_flush ;
   bool contiguous ;
   struct zone_padding _pad3_ ;
   atomic_long_t vm_stat[13U] ;
   atomic_long_t vm_numa_stat[6U] ;
} __attribute__((__aligned__(4096)));
#line 665  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct zoneref {
   struct zone *zone ;
   int zone_idx ;
};
#line 684  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct zonelist {
   struct zoneref _zonerefs[5121U] ;
};
#line 694  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct deferred_split {
   spinlock_t split_queue_lock ;
   struct list_head split_queue ;
   unsigned long split_queue_len ;
};
#line 710  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct pglist_data {
   struct zone node_zones[5U] ;
   struct zonelist node_zonelists[2U] ;
   int nr_zones ;
   spinlock_t node_size_lock ;
   unsigned long node_start_pfn ;
   unsigned long node_present_pages ;
   unsigned long node_spanned_pages ;
   int node_id ;
   wait_queue_head_t kswapd_wait ;
   wait_queue_head_t pfmemalloc_wait ;
   struct task_struct *kswapd ;
   int kswapd_order ;
   enum zone_type kswapd_classzone_idx ;
   int kswapd_failures ;
   int kcompactd_max_order ;
   enum zone_type kcompactd_classzone_idx ;
   wait_queue_head_t kcompactd_wait ;
   struct task_struct *kcompactd ;
   unsigned long totalreserve_pages ;
   unsigned long min_unmapped_pages ;
   unsigned long min_slab_pages ;
   struct zone_padding _pad1_ ;
   spinlock_t lru_lock ;
   unsigned long first_deferred_pfn ;
   struct deferred_split deferred_split_queue ;
   struct lruvec __lruvec ;
   unsigned long flags ;
   struct zone_padding _pad2_ ;
   struct per_cpu_nodestat *per_cpu_nodestats ;
   atomic_long_t vm_stat[32U] ;
};
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/socket.h"
struct socket;
#line 49  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/socket.h"
struct msghdr {
   void *msg_name ;
   int msg_namelen ;
   struct iov_iter msg_iter ;
   void *msg_control ;
   __kernel_size_t msg_controllen ;
   unsigned int msg_flags ;
   struct kiocb *msg_iocb ;
};
#line 287  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fs.h"
struct bio;
#line 289 
struct hd_geometry;
#line 339  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
union __anonunion_arg_1836 {
   char *buf ;
   void *data ;
};
#line 339  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct __anonstruct_read_descriptor_t_1835 {
   size_t written ;
   size_t count ;
   union __anonunion_arg_1836 arg ;
   int error ;
};
#line 339  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
typedef struct __anonstruct_read_descriptor_t_1835 read_descriptor_t;
#line 1771 
struct block_device_operations;
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bvec.h"
struct bvec_iter {
   sector_t bi_sector ;
   unsigned int bi_size ;
   unsigned int bi_idx ;
   unsigned int bi_bvec_done ;
};
#line 201  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/random.h"
enum ldv_9120 {
    SS_FREE = 0,
    SS_UNCONNECTED = 1,
    SS_CONNECTING = 2,
    SS_CONNECTED = 3,
    SS_DISCONNECTING = 4
};
#line 209  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/random.h"
typedef enum ldv_9120 socket_state;
#line 94  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/net.h"
struct socket_wq {
   wait_queue_head_t wait ;
   struct fasync_struct *fasync_list ;
   unsigned long flags ;
   struct callback_head rcu ;
} __attribute__((__aligned__(64)));
#line 112 
struct proto_ops;
#line 112  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/net.h"
struct socket {
   socket_state state ;
   short type ;
   unsigned long flags ;
   struct file *file ;
   struct sock *sk ;
   struct proto_ops *ops ;
   struct socket_wq wq ;
};
#line 135  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/net.h"
struct proto_ops {
   int family ;
   struct module *owner ;
   int (*release)(struct socket *) ;
   int (*bind)(struct socket *, struct sockaddr *, int ) ;
   int (*connect)(struct socket *, struct sockaddr *, int , int ) ;
   int (*socketpair)(struct socket *, struct socket *) ;
   int (*accept)(struct socket *, struct socket *, int , bool ) ;
   int (*getname)(struct socket *, struct sockaddr *, int ) ;
   __poll_t (*poll)(struct file *, struct socket *, struct poll_table_struct *) ;
   int (*ioctl)(struct socket *, unsigned int , unsigned long ) ;
   int (*compat_ioctl)(struct socket *, unsigned int , unsigned long ) ;
   int (*gettstamp)(struct socket *, void *, bool , bool ) ;
   int (*listen)(struct socket *, int ) ;
   int (*shutdown)(struct socket *, int ) ;
   int (*setsockopt)(struct socket *, int , int , char *, unsigned int ) ;
   int (*getsockopt)(struct socket *, int , int , char *, int *) ;
   int (*compat_setsockopt)(struct socket *, int , int , char *, unsigned int ) ;
   int (*compat_getsockopt)(struct socket *, int , int , char *, int *) ;
   int (*sendmsg)(struct socket *, struct msghdr *, size_t ) ;
   int (*recvmsg)(struct socket *, struct msghdr *, size_t , int ) ;
   int (*mmap)(struct file *, struct socket *, struct vm_area_struct *) ;
   ssize_t (*sendpage)(struct socket *, struct page *, int , size_t , int ) ;
   ssize_t (*splice_read)(struct socket *, loff_t *, struct pipe_inode_info *, size_t , unsigned int ) ;
   int (*set_peek_off)(struct sock *, int ) ;
   int (*peek_len)(struct socket *) ;
   int (*read_sock)(struct sock *, read_descriptor_t *, int (*)(read_descriptor_t *, struct sk_buff *, unsigned int , size_t )) ;
   int (*sendpage_locked)(struct sock *, struct page *, int , size_t , int ) ;
   int (*sendmsg_locked)(struct sock *, struct msghdr *, size_t ) ;
   int (*set_rcvlowat)(struct sock *, int ) ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct flowi_tunnel {
   __be64 tun_id ;
};
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct flowi_common {
   int flowic_oif ;
   int flowic_iif ;
   __u32 flowic_mark ;
   __u8 flowic_tos ;
   __u8 flowic_scope ;
   __u8 flowic_proto ;
   __u8 flowic_flags ;
   __u32 flowic_secid ;
   kuid_t flowic_uid ;
   struct flowi_tunnel flowic_tun_key ;
   __u32 flowic_multipath_hash ;
};
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct __anonstruct_ports_1908 {
   __be16 dport ;
   __be16 sport ;
};
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct __anonstruct_icmpt_1909 {
   __u8 type ;
   __u8 code ;
};
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct __anonstruct_dnports_1910 {
   __le16 dport ;
   __le16 sport ;
};
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct __anonstruct_mht_1911 {
   __u8 type ;
};
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
union flowi_uli {
   struct __anonstruct_ports_1908 ports ;
   struct __anonstruct_icmpt_1909 icmpt ;
   struct __anonstruct_dnports_1910 dnports ;
   __be32 spi ;
   __be32 gre_key ;
   struct __anonstruct_mht_1911 mht ;
};
#line 70  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct flowi4 {
   struct flowi_common __fl_common ;
   __be32 saddr ;
   __be32 daddr ;
   union flowi_uli uli ;
} __attribute__((__aligned__(8)));
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct flowi6 {
   struct flowi_common __fl_common ;
   struct in6_addr daddr ;
   struct in6_addr saddr ;
   __be32 flowlabel ;
   union flowi_uli uli ;
   __u32 mp_hash ;
} __attribute__((__aligned__(8)));
#line 158  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct flowidn {
   struct flowi_common __fl_common ;
   __le16 daddr ;
   __le16 saddr ;
   union flowi_uli uli ;
} __attribute__((__aligned__(8)));
#line 173  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
union __anonunion_u_1912 {
   struct flowi_common __fl_common ;
   struct flowi4 ip4 ;
   struct flowi6 ip6 ;
   struct flowidn dn ;
};
#line 173  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct flowi {
   union __anonunion_u_1912 u ;
} __attribute__((__aligned__(8)));
#line 75  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct icmpv6_mib_device {
   atomic_long_t mibs[6U] ;
};
#line 85  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct icmpv6msg_mib_device {
   atomic_long_t mibs[512U] ;
};
#line 139  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
enum bpf_prog_type {
    BPF_PROG_TYPE_UNSPEC = 0,
    BPF_PROG_TYPE_SOCKET_FILTER = 1,
    BPF_PROG_TYPE_KPROBE = 2,
    BPF_PROG_TYPE_SCHED_CLS = 3,
    BPF_PROG_TYPE_SCHED_ACT = 4,
    BPF_PROG_TYPE_TRACEPOINT = 5,
    BPF_PROG_TYPE_XDP = 6,
    BPF_PROG_TYPE_PERF_EVENT = 7,
    BPF_PROG_TYPE_CGROUP_SKB = 8,
    BPF_PROG_TYPE_CGROUP_SOCK = 9,
    BPF_PROG_TYPE_LWT_IN = 10,
    BPF_PROG_TYPE_LWT_OUT = 11,
    BPF_PROG_TYPE_LWT_XMIT = 12,
    BPF_PROG_TYPE_SOCK_OPS = 13,
    BPF_PROG_TYPE_SK_SKB = 14,
    BPF_PROG_TYPE_CGROUP_DEVICE = 15,
    BPF_PROG_TYPE_SK_MSG = 16,
    BPF_PROG_TYPE_RAW_TRACEPOINT = 17,
    BPF_PROG_TYPE_CGROUP_SOCK_ADDR = 18,
    BPF_PROG_TYPE_LWT_SEG6LOCAL = 19,
    BPF_PROG_TYPE_LIRC_MODE2 = 20,
    BPF_PROG_TYPE_SK_REUSEPORT = 21,
    BPF_PROG_TYPE_FLOW_DISSECTOR = 22,
    BPF_PROG_TYPE_CGROUP_SYSCTL = 23,
    BPF_PROG_TYPE_RAW_TRACEPOINT_WRITABLE = 24,
    BPF_PROG_TYPE_CGROUP_SOCKOPT = 25,
    BPF_PROG_TYPE_TRACING = 26
};
#line 169 
enum bpf_attach_type {
    BPF_CGROUP_INET_INGRESS = 0,
    BPF_CGROUP_INET_EGRESS = 1,
    BPF_CGROUP_INET_SOCK_CREATE = 2,
    BPF_CGROUP_SOCK_OPS = 3,
    BPF_SK_SKB_STREAM_PARSER = 4,
    BPF_SK_SKB_STREAM_VERDICT = 5,
    BPF_CGROUP_DEVICE = 6,
    BPF_SK_MSG_VERDICT = 7,
    BPF_CGROUP_INET4_BIND = 8,
    BPF_CGROUP_INET6_BIND = 9,
    BPF_CGROUP_INET4_CONNECT = 10,
    BPF_CGROUP_INET6_CONNECT = 11,
    BPF_CGROUP_INET4_POST_BIND = 12,
    BPF_CGROUP_INET6_POST_BIND = 13,
    BPF_CGROUP_UDP4_SENDMSG = 14,
    BPF_CGROUP_UDP6_SENDMSG = 15,
    BPF_LIRC_MODE2 = 16,
    BPF_FLOW_DISSECTOR = 17,
    BPF_CGROUP_SYSCTL = 18,
    BPF_CGROUP_UDP4_RECVMSG = 19,
    BPF_CGROUP_UDP6_RECVMSG = 20,
    BPF_CGROUP_GETSOCKOPT = 21,
    BPF_CGROUP_SETSOCKOPT = 22,
    BPF_TRACE_RAW_TP = 23,
    BPF_TRACE_FENTRY = 24,
    BPF_TRACE_FEXIT = 25,
    __MAX_BPF_ATTACH_TYPE = 26
};
#line 783  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct __anonstruct_2045 {
   u8 is_data ;
   u8 padding ;
   u16 prioidx ;
   u32 classid ;
} __attribute__((__packed__));
#line 783  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
union __anonunion_2044 {
   struct __anonstruct_2045 __anonCompField___anonunion_2044_151 ;
   u64 val ;
};
#line 783  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct sock_cgroup_data {
   union __anonunion_2044 __anonCompField_sock_cgroup_data_152 ;
};
#line 160  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/security.h"
struct xfrm_policy;
#line 178 
struct request_sock;
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/pkt_sched.h"
struct tc_stats {
   __u64 bytes ;
   __u32 packets ;
   __u32 drops ;
   __u32 overlimits ;
   __u32 bps ;
   __u32 pps ;
   __u32 qlen ;
   __u32 backlog ;
};
#line 102  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/pkt_sched.h"
struct tc_sizespec {
   unsigned char cell_log ;
   unsigned char size_log ;
   short cell_align ;
   int overhead ;
   unsigned int linklayer ;
   unsigned int mpu ;
   unsigned int mtu ;
   unsigned int tsize ;
};
#line 567  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/rtnetlink.h"
struct tcmsg {
   unsigned char tcm_family ;
   unsigned char tcm__pad1 ;
   unsigned short tcm__pad2 ;
   int tcm_ifindex ;
   __u32 tcm_handle ;
   __u32 tcm_parent ;
   __u32 tcm_info ;
};
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/page_counter.h"
struct page_counter {
   atomic_long_t usage ;
   unsigned long min ;
   unsigned long low ;
   unsigned long max ;
   struct page_counter *parent ;
   unsigned long emin ;
   atomic_long_t min_usage ;
   atomic_long_t children_min_usage ;
   unsigned long elow ;
   atomic_long_t low_usage ;
   atomic_long_t children_low_usage ;
   unsigned long watermark ;
   unsigned long failcnt ;
};
#line 66 
struct eventfd_ctx;
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/vmpressure.h"
struct vmpressure {
   unsigned long scanned ;
   unsigned long reclaimed ;
   unsigned long tree_scanned ;
   unsigned long tree_reclaimed ;
   spinlock_t sr_lock ;
   struct list_head events ;
   struct mutex events_lock ;
   struct work_struct work ;
};
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/flex_proportions.h"
struct fprop_global {
   struct percpu_counter events ;
   unsigned int period ;
   seqcount_t sequence ;
};
#line 76  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/flex_proportions.h"
struct fprop_local_percpu {
   struct percpu_counter events ;
   unsigned int period ;
   raw_spinlock_t lock ;
};
#line 116  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/flex_proportions.h"
typedef int congested_fn(void *, int );
#line 45  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backing-dev-defs.h"
enum wb_reason {
    WB_REASON_BACKGROUND = 0,
    WB_REASON_VMSCAN = 1,
    WB_REASON_SYNC = 2,
    WB_REASON_PERIODIC = 3,
    WB_REASON_LAPTOP_TIMER = 4,
    WB_REASON_FREE_MORE_MEM = 5,
    WB_REASON_FS_FREE_SPACE = 6,
    WB_REASON_FORKER_THREAD = 7,
    WB_REASON_FOREIGN_FLUSH = 8,
    WB_REASON_MAX = 9
};
#line 71  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backing-dev-defs.h"
struct wb_completion {
   atomic_t cnt ;
   wait_queue_head_t *waitq ;
};
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backing-dev-defs.h"
struct bdi_writeback_congested {
   unsigned long state ;
   refcount_t refcnt ;
   struct backing_dev_info *__bdi ;
   int blkcg_id ;
   struct rb_node rb_node ;
};
#line 130  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backing-dev-defs.h"
union __anonunion_2094 {
   struct work_struct release_work ;
   struct callback_head rcu ;
};
#line 130  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backing-dev-defs.h"
struct bdi_writeback {
   struct backing_dev_info *bdi ;
   unsigned long state ;
   unsigned long last_old_flush ;
   struct list_head b_dirty ;
   struct list_head b_io ;
   struct list_head b_more_io ;
   struct list_head b_dirty_time ;
   spinlock_t list_lock ;
   struct percpu_counter stat[4U] ;
   struct bdi_writeback_congested *congested ;
   unsigned long bw_time_stamp ;
   unsigned long dirtied_stamp ;
   unsigned long written_stamp ;
   unsigned long write_bandwidth ;
   unsigned long avg_write_bandwidth ;
   unsigned long dirty_ratelimit ;
   unsigned long balanced_dirty_ratelimit ;
   struct fprop_local_percpu completions ;
   int dirty_exceeded ;
   enum wb_reason start_all_reason ;
   spinlock_t work_lock ;
   struct list_head work_list ;
   struct delayed_work dwork ;
   unsigned long dirty_sleep ;
   struct list_head bdi_node ;
   struct percpu_ref refcnt ;
   struct fprop_local_percpu memcg_completions ;
   struct cgroup_subsys_state *memcg_css ;
   struct cgroup_subsys_state *blkcg_css ;
   struct list_head memcg_node ;
   struct list_head blkcg_node ;
   union __anonunion_2094 __anonCompField_bdi_writeback_160 ;
};
#line 188  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backing-dev-defs.h"
struct backing_dev_info {
   u64 id ;
   struct rb_node rb_node ;
   struct list_head bdi_list ;
   unsigned long ra_pages ;
   unsigned long io_pages ;
   congested_fn *congested_fn ;
   void *congested_data ;
   char *name ;
   struct kref refcnt ;
   unsigned int capabilities ;
   unsigned int min_ratio ;
   unsigned int max_ratio ;
   unsigned int max_prop_frac ;
   atomic_long_t tot_write_bandwidth ;
   struct bdi_writeback wb ;
   struct list_head wb_list ;
   struct xarray cgwb_tree ;
   struct rb_root cgwb_congested_tree ;
   struct mutex cgwb_release_mutex ;
   struct rw_semaphore wb_switch_rwsem ;
   wait_queue_head_t wb_waitq ;
   struct device *dev ;
   struct device *owner ;
   struct timer_list laptop_mode_wb_timer ;
   struct dentry *debug_dir ;
};
#line 306 
struct bio_set;
#line 307 
struct bio_integrity_payload;
#line 308  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backing-dev-defs.h"
typedef void bio_end_io_t(struct bio *);
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk_types.h"
typedef u8 blk_status_t;
#line 112  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk_types.h"
struct bio_issue {
   u64 value ;
};
#line 144 
struct blkcg_gq;
#line 144  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk_types.h"
union __anonunion_2095 {
   struct bio_integrity_payload *bi_integrity ;
};
#line 144  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk_types.h"
struct bio {
   struct bio *bi_next ;
   struct gendisk *bi_disk ;
   unsigned int bi_opf ;
   unsigned short bi_flags ;
   unsigned short bi_ioprio ;
   unsigned short bi_write_hint ;
   blk_status_t bi_status ;
   u8 bi_partno ;
   atomic_t __bi_remaining ;
   struct bvec_iter bi_iter ;
   bio_end_io_t *bi_end_io ;
   void *bi_private ;
   struct blkcg_gq *bi_blkg ;
   struct bio_issue bi_issue ;
   u64 bi_iocost_cost ;
   union __anonunion_2095 __anonCompField_bio_161 ;
   unsigned short bi_vcnt ;
   unsigned short bi_max_vecs ;
   atomic_t __bi_cnt ;
   struct bio_vec *bi_io_vec ;
   struct bio_set *bi_pool ;
   struct bio_vec bi_inline_vecs[0U] ;
};
#line 452  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk_types.h"
typedef unsigned int blk_qc_t;
#line 479  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk_types.h"
struct blk_rq_stat {
   u64 mean ;
   u64 min ;
   u64 max ;
   u32 nr_samples ;
   u64 batch ;
};
#line 86  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/genhd.h"
struct disk_stats {
   u64 nsecs[4U] ;
   unsigned long sectors[4U] ;
   unsigned long ios[4U] ;
   unsigned long merges[4U] ;
   unsigned long io_ticks ;
   unsigned long time_in_queue ;
   local_t in_flight[2U] ;
};
#line 103  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/genhd.h"
struct partition_meta_info {
   char uuid[37U] ;
   u8 volname[64U] ;
};
#line 108  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/genhd.h"
struct hd_struct {
   sector_t start_sect ;
   sector_t nr_sects ;
   seqcount_t nr_sects_seq ;
   sector_t alignment_offset ;
   unsigned int discard_alignment ;
   struct device __dev ;
   struct kobject *holder_dir ;
   int policy ;
   int partno ;
   struct partition_meta_info *info ;
   int make_it_fail ;
   unsigned long stamp ;
   struct disk_stats *dkstats ;
   struct percpu_ref ref ;
   struct rcu_work rcu_work ;
};
#line 160  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/genhd.h"
struct disk_part_tbl {
   struct callback_head callback_head ;
   int len ;
   struct hd_struct *last_lookup ;
   struct hd_struct *part[] ;
};
#line 166 
struct disk_events;
#line 167 
struct badblocks;
#line 172 
struct blk_integrity_profile;
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/genhd.h"
struct blk_integrity {
   struct blk_integrity_profile *profile ;
   unsigned char flags ;
   unsigned char tuple_size ;
   unsigned char interval_exp ;
   unsigned char tag_size ;
};
#line 182 
struct timer_rand_state;
#line 182  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/genhd.h"
struct gendisk {
   int major ;
   int first_minor ;
   int minors ;
   char disk_name[32U] ;
   char *(*devnode)(struct gendisk *, umode_t *) ;
   unsigned short events ;
   unsigned short event_flags ;
   struct disk_part_tbl *part_tbl ;
   struct hd_struct part0 ;
   struct block_device_operations *fops ;
   struct request_queue *queue ;
   void *private_data ;
   int flags ;
   struct rw_semaphore lookup_sem ;
   struct kobject *slave_dir ;
   struct timer_rand_state *random ;
   atomic_t sync_io ;
   struct disk_events *ev ;
   struct kobject integrity_kobj ;
   int node_id ;
   struct badblocks *bb ;
   struct lockdep_map lockdep_map ;
};
#line 637  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pagemap.h"
typedef void *mempool_alloc_t(gfp_t , void *);
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mempool.h"
typedef void mempool_free_t(void *, void *);
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mempool.h"
struct mempool_s {
   spinlock_t lock ;
   int min_nr ;
   int curr_nr ;
   void **elements ;
   void *pool_data ;
   mempool_alloc_t *alloc ;
   mempool_free_t *free ;
   wait_queue_head_t wait ;
};
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mempool.h"
typedef struct mempool_s mempool_t;
#line 307  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bio.h"
struct bio_integrity_payload {
   struct bio *bip_bio ;
   struct bvec_iter bip_iter ;
   unsigned short bip_slab ;
   unsigned short bip_vcnt ;
   unsigned short bip_max_vcnt ;
   unsigned short bip_flags ;
   struct bvec_iter bio_iter ;
   struct work_struct bip_work ;
   struct bio_vec *bip_vec ;
   struct bio_vec bip_inline_vecs[0U] ;
};
#line 575  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bio.h"
struct bio_list {
   struct bio *head ;
   struct bio *tail ;
};
#line 703  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bio.h"
struct bio_set {
   struct kmem_cache *bio_slab ;
   unsigned int front_pad ;
   mempool_t bio_pool ;
   mempool_t bvec_pool ;
   mempool_t bio_integrity_pool ;
   mempool_t bvec_integrity_pool ;
   spinlock_t rescue_lock ;
   struct bio_list rescue_list ;
   struct work_struct rescue_work ;
   struct workqueue_struct *rescue_workqueue ;
};
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bsg.h"
struct sg_io_v4 {
   __s32 guard ;
   __u32 protocol ;
   __u32 subprotocol ;
   __u32 request_len ;
   __u64 request ;
   __u64 request_tag ;
   __u32 request_attr ;
   __u32 request_priority ;
   __u32 request_extra ;
   __u32 max_response_len ;
   __u64 response ;
   __u32 dout_iovec_count ;
   __u32 dout_xfer_len ;
   __u32 din_iovec_count ;
   __u32 din_xfer_len ;
   __u64 dout_xferp ;
   __u64 din_xferp ;
   __u32 timeout ;
   __u32 flags ;
   __u64 usr_ptr ;
   __u32 spare_in ;
   __u32 driver_status ;
   __u32 transport_status ;
   __u32 device_status ;
   __u32 retry_delay ;
   __u32 info ;
   __u32 duration ;
   __u32 response_len ;
   __s32 din_resid ;
   __s32 dout_resid ;
   __u64 generated_tag ;
   __u32 spare_out ;
   __u32 padding ;
};
#line 65 
struct request;
#line 10  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bsg.h"
struct bsg_ops {
   int (*check_proto)(struct sg_io_v4 *) ;
   int (*fill_hdr)(struct request *, struct sg_io_v4 *, fmode_t ) ;
   int (*complete_rq)(struct request *, struct sg_io_v4 *) ;
   void (*free_rq)(struct request *) ;
};
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bsg.h"
struct bsg_class_device {
   struct device *class_dev ;
   int minor ;
   struct request_queue *queue ;
   struct bsg_ops *ops ;
};
#line 94  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/blkzoned.h"
struct blk_zone {
   __u64 start ;
   __u64 len ;
   __u64 wp ;
   __u8 type ;
   __u8 cond ;
   __u8 non_seq ;
   __u8 reset ;
   __u8 reserved[36U] ;
};
#line 134 
struct elevator_queue;
#line 135 
struct blk_trace;
#line 138 
struct blk_flush_queue;
#line 139 
struct pr_ops;
#line 140 
struct rq_qos;
#line 141 
struct blk_queue_stats;
#line 142 
struct blk_stat_callback;
#line 143  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/blkzoned.h"
typedef void rq_end_io_fn(struct request *, blk_status_t );
#line 63  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
typedef __u32 req_flags_t;
#line 67 
enum mq_rq_state {
    MQ_RQ_IDLE = 0,
    MQ_RQ_IN_FLIGHT = 1,
    MQ_RQ_COMPLETE = 2
};
#line 132 
struct blk_mq_ctx;
#line 132 
struct blk_mq_hw_ctx;
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
union __anonunion_2098 {
   struct hlist_node hash ;
   struct list_head ipi_list ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
union __anonunion_2099 {
   struct rb_node rb_node ;
   struct bio_vec special_vec ;
   void *completion_data ;
   int error_count ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
struct __anonstruct_elv_2101 {
   struct io_cq *icq ;
   void *priv[2U] ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
struct __anonstruct_flush_2102 {
   unsigned int seq ;
   struct list_head list ;
   rq_end_io_fn *saved_end_io ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
union __anonunion_2100 {
   struct __anonstruct_elv_2101 elv ;
   struct __anonstruct_flush_2102 flush ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
union __anonunion_2103 {
   struct __call_single_data csd ;
   u64 fifo_time ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
struct request {
   struct request_queue *q ;
   struct blk_mq_ctx *mq_ctx ;
   struct blk_mq_hw_ctx *mq_hctx ;
   unsigned int cmd_flags ;
   req_flags_t rq_flags ;
   int tag ;
   int internal_tag ;
   unsigned int __data_len ;
   sector_t __sector ;
   struct bio *bio ;
   struct bio *biotail ;
   struct list_head queuelist ;
   union __anonunion_2098 __anonCompField_request_162 ;
   union __anonunion_2099 __anonCompField_request_163 ;
   union __anonunion_2100 __anonCompField_request_164 ;
   struct gendisk *rq_disk ;
   struct hd_struct *part ;
   u64 alloc_time_ns ;
   u64 start_time_ns ;
   u64 io_start_time_ns ;
   unsigned short wbt_flags ;
   unsigned short stats_sectors ;
   unsigned short nr_phys_segments ;
   unsigned short nr_integrity_segments ;
   unsigned short write_hint ;
   unsigned short ioprio ;
   unsigned int extra_len ;
   enum mq_rq_state state ;
   refcount_t ref ;
   unsigned int timeout ;
   unsigned long deadline ;
   union __anonunion_2103 __anonCompField_request_165 ;
   rq_end_io_fn *end_io ;
   void *end_io_data ;
};
#line 285 
struct elevator_type;
#line 286 
struct blk_mq_debugfs_attr;
#line 287 
enum elv_merge {
    ELEVATOR_NO_MERGE = 0,
    ELEVATOR_FRONT_MERGE = 1,
    ELEVATOR_BACK_MERGE = 2,
    ELEVATOR_DISCARD_MERGE = 3
};
#line 294 
struct blk_mq_alloc_data;
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/elevator.h"
struct elevator_mq_ops {
   int (*init_sched)(struct request_queue *, struct elevator_type *) ;
   void (*exit_sched)(struct elevator_queue *) ;
   int (*init_hctx)(struct blk_mq_hw_ctx *, unsigned int ) ;
   void (*exit_hctx)(struct blk_mq_hw_ctx *, unsigned int ) ;
   void (*depth_updated)(struct blk_mq_hw_ctx *) ;
   bool (*allow_merge)(struct request_queue *, struct request *, struct bio *) ;
   bool (*bio_merge)(struct blk_mq_hw_ctx *, struct bio *, unsigned int ) ;
   int (*request_merge)(struct request_queue *, struct request **, struct bio *) ;
   void (*request_merged)(struct request_queue *, struct request *, enum elv_merge ) ;
   void (*requests_merged)(struct request_queue *, struct request *, struct request *) ;
   void (*limit_depth)(unsigned int , struct blk_mq_alloc_data *) ;
   void (*prepare_request)(struct request *, struct bio *) ;
   void (*finish_request)(struct request *) ;
   void (*insert_requests)(struct blk_mq_hw_ctx *, struct list_head *, bool ) ;
   struct request *(*dispatch_request)(struct blk_mq_hw_ctx *) ;
   bool (*has_work)(struct blk_mq_hw_ctx *) ;
   void (*completed_request)(struct request *, u64 ) ;
   void (*requeue_request)(struct request *) ;
   struct request *(*former_request)(struct request_queue *, struct request *) ;
   struct request *(*next_request)(struct request_queue *, struct request *) ;
   void (*init_icq)(struct io_cq *) ;
   void (*exit_icq)(struct io_cq *) ;
};
#line 57  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/elevator.h"
struct elv_fs_entry {
   struct attribute attr ;
   ssize_t (*show)(struct elevator_queue *, char *) ;
   ssize_t (*store)(struct elevator_queue *, char *, size_t ) ;
};
#line 66  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/elevator.h"
struct elevator_type {
   struct kmem_cache *icq_cache ;
   struct elevator_mq_ops ops ;
   size_t icq_size ;
   size_t icq_align ;
   struct elv_fs_entry *elevator_attrs ;
   char *elevator_name ;
   char *elevator_alias ;
   unsigned int elevator_features ;
   struct module *elevator_owner ;
   struct blk_mq_debugfs_attr *queue_debugfs_attrs ;
   struct blk_mq_debugfs_attr *hctx_debugfs_attrs ;
   char icq_cache_name[22U] ;
   struct list_head list ;
};
#line 101  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/elevator.h"
struct elevator_queue {
   struct elevator_type *type ;
   void *elevator_data ;
   struct kobject kobj ;
   struct mutex sysfs_lock ;
   unsigned int registered : 1 ;
   struct hlist_head hash[64U] ;
};
#line 153  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/elevator.h"
typedef blk_qc_t make_request_fn(struct request_queue *, struct bio *);
#line 291  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
typedef int dma_drain_needed_fn(struct request *);
#line 304 
enum blk_zoned_model {
    BLK_ZONED_NONE = 0,
    BLK_ZONED_HA = 1,
    BLK_ZONED_HM = 2
};
#line 320  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
struct queue_limits {
   unsigned long bounce_pfn ;
   unsigned long seg_boundary_mask ;
   unsigned long virt_boundary_mask ;
   unsigned int max_hw_sectors ;
   unsigned int max_dev_sectors ;
   unsigned int chunk_sectors ;
   unsigned int max_sectors ;
   unsigned int max_segment_size ;
   unsigned int physical_block_size ;
   unsigned int logical_block_size ;
   unsigned int alignment_offset ;
   unsigned int io_min ;
   unsigned int io_opt ;
   unsigned int max_discard_sectors ;
   unsigned int max_hw_discard_sectors ;
   unsigned int max_write_same_sectors ;
   unsigned int max_write_zeroes_sectors ;
   unsigned int discard_granularity ;
   unsigned int discard_alignment ;
   unsigned short max_segments ;
   unsigned short max_integrity_segments ;
   unsigned short max_discard_segments ;
   unsigned char misaligned ;
   unsigned char discard_misaligned ;
   unsigned char raid_partial_stripes_expensive ;
   enum blk_zoned_model zoned ;
};
#line 394 
struct blk_mq_ops;
#line 394 
struct throtl_data;
#line 394 
struct blk_mq_tag_set;
#line 394  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
struct request_queue {
   struct request *last_merge ;
   struct elevator_queue *elevator ;
   struct blk_queue_stats *stats ;
   struct rq_qos *rq_qos ;
   make_request_fn *make_request_fn ;
   dma_drain_needed_fn *dma_drain_needed ;
   struct blk_mq_ops *mq_ops ;
   struct blk_mq_ctx *queue_ctx ;
   unsigned int queue_depth ;
   struct blk_mq_hw_ctx **queue_hw_ctx ;
   unsigned int nr_hw_queues ;
   struct backing_dev_info *backing_dev_info ;
   void *queuedata ;
   unsigned long queue_flags ;
   atomic_t pm_only ;
   int id ;
   gfp_t bounce_gfp ;
   spinlock_t queue_lock ;
   struct kobject kobj ;
   struct kobject *mq_kobj ;
   struct blk_integrity integrity ;
   struct device *dev ;
   int rpm_status ;
   unsigned int nr_pending ;
   unsigned long nr_requests ;
   unsigned int dma_drain_size ;
   void *dma_drain_buffer ;
   unsigned int dma_pad_mask ;
   unsigned int dma_alignment ;
   unsigned int rq_timeout ;
   int poll_nsec ;
   struct blk_stat_callback *poll_cb ;
   struct blk_rq_stat poll_stat[16U] ;
   struct timer_list timeout ;
   struct work_struct timeout_work ;
   struct list_head icq_list ;
   unsigned long blkcg_pols[1U] ;
   struct blkcg_gq *root_blkg ;
   struct list_head blkg_list ;
   struct queue_limits limits ;
   unsigned int required_elevator_features ;
   unsigned int nr_zones ;
   unsigned long *conv_zones_bitmap ;
   unsigned long *seq_zones_wlock ;
   unsigned int sg_timeout ;
   unsigned int sg_reserved_size ;
   int node ;
   struct blk_trace *blk_trace ;
   struct mutex blk_trace_mutex ;
   struct blk_flush_queue *fq ;
   struct list_head requeue_list ;
   spinlock_t requeue_lock ;
   struct delayed_work requeue_work ;
   struct mutex sysfs_lock ;
   struct mutex sysfs_dir_lock ;
   struct list_head unused_hctx_list ;
   spinlock_t unused_hctx_lock ;
   int mq_freeze_depth ;
   struct bsg_class_device bsg_dev ;
   struct throtl_data *td ;
   struct callback_head callback_head ;
   wait_queue_head_t mq_freeze_wq ;
   struct mutex mq_freeze_lock ;
   struct percpu_ref q_usage_counter ;
   struct blk_mq_tag_set *tag_set ;
   struct list_head tag_set_list ;
   struct bio_set bio_split ;
   struct dentry *debugfs_dir ;
   struct dentry *sched_debugfs_dir ;
   struct dentry *rqos_debugfs_dir ;
   bool mq_sysfs_init_done ;
   size_t cmd_size ;
   struct work_struct release_work ;
   u64 write_hints[5U] ;
};
#line 1160  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
struct blk_plug {
   struct list_head mq_list ;
   struct list_head cb_list ;
   unsigned short rq_count ;
   bool multiple_queues ;
};
#line 1514  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
struct blk_integrity_iter {
   void *prot_buf ;
   void *data_buf ;
   sector_t seed ;
   unsigned int data_size ;
   unsigned short interval ;
   char *disk_name ;
};
#line 1522  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
typedef blk_status_t integrity_processing_fn(struct blk_integrity_iter *);
#line 1524  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
typedef void integrity_prepare_fn(struct request *);
#line 1525  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
typedef void integrity_complete_fn(struct request *, unsigned int );
#line 1527  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
struct blk_integrity_profile {
   integrity_processing_fn *generate_fn ;
   integrity_processing_fn *verify_fn ;
   integrity_prepare_fn *prepare_fn ;
   integrity_complete_fn *complete_fn ;
   char *name ;
};
#line 1693  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
struct block_device_operations {
   int (*open)(struct block_device *, fmode_t ) ;
   void (*release)(struct gendisk *, fmode_t ) ;
   int (*rw_page)(struct block_device *, sector_t , struct page *, unsigned int ) ;
   int (*ioctl)(struct block_device *, fmode_t , unsigned int , unsigned long ) ;
   int (*compat_ioctl)(struct block_device *, fmode_t , unsigned int , unsigned long ) ;
   unsigned int (*check_events)(struct gendisk *, unsigned int ) ;
   int (*media_changed)(struct gendisk *) ;
   void (*unlock_native_capacity)(struct gendisk *) ;
   int (*revalidate_disk)(struct gendisk *) ;
   int (*getgeo)(struct block_device *, struct hd_geometry *) ;
   void (*swap_slot_free_notify)(struct block_device *, unsigned long ) ;
   int (*report_zones)(struct gendisk *, sector_t , unsigned int , int (*)(struct blk_zone *, unsigned int , void *), void *) ;
   struct module *owner ;
   struct pr_ops *pr_ops ;
};
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk-cgroup.h"
struct blkcg_policy_data;
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk-cgroup.h"
struct blkcg {
   struct cgroup_subsys_state css ;
   spinlock_t lock ;
   struct xarray blkg_tree ;
   struct blkcg_gq *blkg_hint ;
   struct hlist_head blkg_list ;
   struct blkcg_policy_data *cpd[5U] ;
   struct list_head all_blkcgs_node ;
   struct list_head cgwb_list ;
   refcount_t cgwb_refcnt ;
};
#line 63  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk-cgroup.h"
struct blkg_iostat {
   u64 bytes[3U] ;
   u64 ios[3U] ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk-cgroup.h"
struct blkg_iostat_set {
   struct u64_stats_sync sync ;
   struct blkg_iostat cur ;
   struct blkg_iostat last ;
};
#line 85  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk-cgroup.h"
struct blkg_policy_data {
   struct blkcg_gq *blkg ;
   int plid ;
};
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk-cgroup.h"
struct blkcg_policy_data {
   struct blkcg *blkcg ;
   int plid ;
};
#line 105  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk-cgroup.h"
struct blkcg_gq {
   struct request_queue *q ;
   struct list_head q_node ;
   struct hlist_node blkcg_node ;
   struct blkcg *blkcg ;
   struct bdi_writeback_congested *wb_congested ;
   struct blkcg_gq *parent ;
   struct percpu_ref refcnt ;
   bool online ;
   struct blkg_iostat_set *iostat_cpu ;
   struct blkg_iostat_set iostat ;
   struct blkg_policy_data *pd[5U] ;
   spinlock_t async_bio_lock ;
   struct bio_list async_bios ;
   struct work_struct async_bio_work ;
   atomic_t use_delay ;
   atomic64_t delay_nsec ;
   atomic64_t delay_start ;
   u64 last_delay ;
   int last_use ;
   struct callback_head callback_head ;
};
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/writeback.h"
enum writeback_sync_modes {
    WB_SYNC_NONE = 0,
    WB_SYNC_ALL = 1
};
#line 51  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/writeback.h"
struct writeback_control {
   long nr_to_write ;
   long pages_skipped ;
   loff_t range_start ;
   loff_t range_end ;
   enum writeback_sync_modes sync_mode ;
   unsigned int for_kupdate : 1 ;
   unsigned int for_background : 1 ;
   unsigned int tagged_writepages : 1 ;
   unsigned int for_reclaim : 1 ;
   unsigned int range_cyclic : 1 ;
   unsigned int for_sync : 1 ;
   unsigned int no_cgroup_owner : 1 ;
   unsigned int punt_to_cgroup : 1 ;
   struct bdi_writeback *wb ;
   struct inode *inode ;
   int wb_id ;
   int wb_lcand_id ;
   int wb_tcand_id ;
   size_t wb_bytes ;
   size_t wb_lcand_bytes ;
   size_t wb_tcand_bytes ;
};
#line 129  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/writeback.h"
struct wb_domain {
   spinlock_t lock ;
   struct fprop_global completions ;
   struct timer_list period_timer ;
   unsigned long period_time ;
   unsigned long dirty_limit_tstamp ;
   unsigned long dirty_limit ;
};
#line 69  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct mem_cgroup_id {
   int id ;
   refcount_t ref ;
};
#line 86  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct memcg_vmstats_percpu {
   long stat[38U] ;
   unsigned long events[91U] ;
   unsigned long nr_page_events ;
   unsigned long targets[2U] ;
};
#line 93  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct mem_cgroup_reclaim_iter {
   struct mem_cgroup *position ;
   unsigned int generation ;
};
#line 99  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct lruvec_stat {
   long count[32U] ;
};
#line 107  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct memcg_shrinker_map {
   struct callback_head rcu ;
   unsigned long map[0U] ;
};
#line 115  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct mem_cgroup_per_node {
   struct lruvec lruvec ;
   struct lruvec_stat *lruvec_stat_local ;
   struct lruvec_stat *lruvec_stat_cpu ;
   atomic_long_t lruvec_stat[32U] ;
   unsigned long lru_zone_size[5U][5U] ;
   struct mem_cgroup_reclaim_iter iter ;
   struct memcg_shrinker_map *shrinker_map ;
   struct rb_node tree_node ;
   unsigned long usage_in_excess ;
   bool on_tree ;
   struct mem_cgroup *memcg ;
};
#line 139  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct mem_cgroup_threshold {
   struct eventfd_ctx *eventfd ;
   unsigned long threshold ;
};
#line 145  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct mem_cgroup_threshold_ary {
   int current_threshold ;
   unsigned int size ;
   struct mem_cgroup_threshold entries[0U] ;
};
#line 154  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct mem_cgroup_thresholds {
   struct mem_cgroup_threshold_ary *primary ;
   struct mem_cgroup_threshold_ary *spare ;
};
#line 164 
enum memcg_kmem_state {
    KMEM_NONE = 0,
    KMEM_ALLOCATED = 1,
    KMEM_ONLINE = 2
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct memcg_padding {
   char x[0U] ;
} __attribute__((__aligned__(4096)));
#line 190  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct memcg_cgwb_frn {
   u64 bdi_id ;
   int memcg_id ;
   u64 at ;
   struct wb_completion done ;
};
#line 203  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct mem_cgroup {
   struct cgroup_subsys_state css ;
   struct mem_cgroup_id id ;
   struct page_counter memory ;
   struct page_counter swap ;
   struct page_counter memsw ;
   struct page_counter kmem ;
   struct page_counter tcpmem ;
   unsigned long high ;
   struct work_struct high_work ;
   unsigned long soft_limit ;
   struct vmpressure vmpressure ;
   bool use_hierarchy ;
   bool oom_group ;
   bool oom_lock ;
   int under_oom ;
   int swappiness ;
   int oom_kill_disable ;
   struct cgroup_file events_file ;
   struct cgroup_file events_local_file ;
   struct cgroup_file swap_events_file ;
   struct mutex thresholds_lock ;
   struct mem_cgroup_thresholds thresholds ;
   struct mem_cgroup_thresholds memsw_thresholds ;
   struct list_head oom_notify ;
   unsigned long move_charge_at_immigrate ;
   spinlock_t move_lock ;
   unsigned long move_lock_flags ;
   struct memcg_padding _pad1_ ;
   atomic_t moving_account ;
   struct task_struct *move_lock_task ;
   struct memcg_vmstats_percpu *vmstats_local ;
   struct memcg_vmstats_percpu *vmstats_percpu ;
   struct memcg_padding _pad2_ ;
   atomic_long_t vmstats[38U] ;
   atomic_long_t vmevents[91U] ;
   atomic_long_t memory_events[7U] ;
   atomic_long_t memory_events_local[7U] ;
   unsigned long socket_pressure ;
   bool tcpmem_active ;
   int tcpmem_pressure ;
   int kmemcg_id ;
   enum memcg_kmem_state kmem_state ;
   struct list_head kmem_caches ;
   struct list_head cgwb_list ;
   struct wb_domain cgwb_domain ;
   struct memcg_cgwb_frn cgwb_frn[4U] ;
   struct list_head event_list ;
   spinlock_t event_list_lock ;
   struct deferred_split deferred_split_queue ;
   struct mem_cgroup_per_node *nodeinfo[0U] ;
};
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/vdso.h"
struct vdso_image {
   void *data ;
   unsigned long size ;
   unsigned long alt ;
   unsigned long alt_len ;
   long sym_vvar_start ;
   long sym_vvar_page ;
   long sym_pvclock_page ;
   long sym_hvclock_page ;
   long sym_VDSO32_NOTE_MASK ;
   long sym___kernel_sigreturn ;
   long sym___kernel_rt_sigreturn ;
   long sym___kernel_vsyscall ;
   long sym_int80_landing_pad ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef __u64 Elf64_Addr;
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef __u16 Elf64_Half;
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef __u64 Elf64_Off;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef __u32 Elf64_Word;
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef __u64 Elf64_Xword;
#line 192  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
struct elf64_sym {
   Elf64_Word st_name ;
   unsigned char st_info ;
   unsigned char st_other ;
   Elf64_Half st_shndx ;
   Elf64_Addr st_value ;
   Elf64_Xword st_size ;
};
#line 200  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef struct elf64_sym Elf64_Sym;
#line 221  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
struct elf64_hdr {
   unsigned char e_ident[16U] ;
   Elf64_Half e_type ;
   Elf64_Half e_machine ;
   Elf64_Word e_version ;
   Elf64_Addr e_entry ;
   Elf64_Off e_phoff ;
   Elf64_Off e_shoff ;
   Elf64_Word e_flags ;
   Elf64_Half e_ehsize ;
   Elf64_Half e_phentsize ;
   Elf64_Half e_phnum ;
   Elf64_Half e_shentsize ;
   Elf64_Half e_shnum ;
   Elf64_Half e_shstrndx ;
};
#line 237  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef struct elf64_hdr Elf64_Ehdr;
#line 316  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
struct elf64_shdr {
   Elf64_Word sh_name ;
   Elf64_Word sh_type ;
   Elf64_Xword sh_flags ;
   Elf64_Addr sh_addr ;
   Elf64_Off sh_offset ;
   Elf64_Xword sh_size ;
   Elf64_Word sh_link ;
   Elf64_Word sh_info ;
   Elf64_Xword sh_addralign ;
   Elf64_Xword sh_entsize ;
};
#line 328  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef struct elf64_shdr Elf64_Shdr;
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/elf.h"
struct kernel_param;
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/moduleparam.h"
struct kernel_param_ops {
   unsigned int flags ;
   int (*set)(char *, struct kernel_param *) ;
   int (*get)(char *, struct kernel_param *) ;
   void (*free)(void *) ;
};
#line 69 
struct kparam_string;
#line 69 
struct kparam_array;
#line 69  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/moduleparam.h"
union __anonunion_2122 {
   void *arg ;
   struct kparam_string *str ;
   struct kparam_array *arr ;
};
#line 69  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/moduleparam.h"
struct kernel_param {
   char *name ;
   struct module *mod ;
   struct kernel_param_ops *ops ;
   u16 perm ;
   s8 level ;
   u8 flags ;
   union __anonunion_2122 __anonCompField_kernel_param_166 ;
};
#line 86  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/moduleparam.h"
struct kparam_string {
   unsigned int maxlen ;
   char *string ;
};
#line 92  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/moduleparam.h"
struct kparam_array {
   unsigned int max ;
   unsigned int elemsize ;
   unsigned int *num ;
   struct kernel_param_ops *ops ;
   void *elem ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/error-injection.h"
struct error_injection_entry {
   unsigned long addr ;
   int etype ;
};
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/module.h"
struct mod_arch_specific {
   unsigned int num_orcs ;
   int *orc_unwind_ip ;
   struct orc_entry *orc_unwind ;
};
#line 45  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct module_param_attrs;
#line 45  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct module_kobject {
   struct kobject kobj ;
   struct module *mod ;
   struct kobject *drivers_dir ;
   struct module_param_attrs *mp ;
   struct completion *kobj_completion ;
} __attribute__((__designated_init__));
#line 53  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct module_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct module_attribute *, struct module_kobject *, char *) ;
   ssize_t (*store)(struct module_attribute *, struct module_kobject *, char *, size_t ) ;
   void (*setup)(struct module *, char *) ;
   int (*test)(struct module *) ;
   void (*free)(struct module *) ;
};
#line 297 
enum module_state {
    MODULE_STATE_LIVE = 0,
    MODULE_STATE_COMING = 1,
    MODULE_STATE_GOING = 2,
    MODULE_STATE_UNFORMED = 3
};
#line 305  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct mod_tree_node {
   struct module *mod ;
   struct latch_tree_node node ;
};
#line 310  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct module_layout {
   void *base ;
   unsigned int size ;
   unsigned int text_size ;
   unsigned int ro_size ;
   unsigned int ro_after_init_size ;
   struct mod_tree_node mtn ;
};
#line 334  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct mod_kallsyms {
   Elf64_Sym *symtab ;
   unsigned int num_symtab ;
   char *strtab ;
   char *typetab ;
};
#line 342  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct klp_modinfo {
   Elf64_Ehdr hdr ;
   Elf64_Shdr *sechdrs ;
   char *secstrings ;
   unsigned int symndx ;
};
#line 350 
struct module_sect_attrs;
#line 350 
struct module_notes_attrs;
#line 350 
struct trace_event_call;
#line 350 
struct trace_eval_map;
#line 350  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct module {
   enum module_state state ;
   struct list_head list ;
   char name[56U] ;
   struct module_kobject mkobj ;
   struct module_attribute *modinfo_attrs ;
   char *version ;
   char *srcversion ;
   struct kobject *holders_dir ;
   struct kernel_symbol *syms ;
   s32 *crcs ;
   unsigned int num_syms ;
   struct mutex param_lock ;
   struct kernel_param *kp ;
   unsigned int num_kp ;
   unsigned int num_gpl_syms ;
   struct kernel_symbol *gpl_syms ;
   s32 *gpl_crcs ;
   struct kernel_symbol *unused_syms ;
   s32 *unused_crcs ;
   unsigned int num_unused_syms ;
   unsigned int num_unused_gpl_syms ;
   struct kernel_symbol *unused_gpl_syms ;
   s32 *unused_gpl_crcs ;
   bool sig_ok ;
   bool async_probe_requested ;
   struct kernel_symbol *gpl_future_syms ;
   s32 *gpl_future_crcs ;
   unsigned int num_gpl_future_syms ;
   unsigned int num_exentries ;
   struct exception_table_entry *extable ;
   int (*init)(void) ;
   struct module_layout core_layout ;
   struct module_layout init_layout ;
   struct mod_arch_specific arch ;
   unsigned long taints ;
   unsigned int num_bugs ;
   struct list_head bug_list ;
   struct bug_entry *bug_table ;
   struct mod_kallsyms *kallsyms ;
   struct mod_kallsyms core_kallsyms ;
   struct module_sect_attrs *sect_attrs ;
   struct module_notes_attrs *notes_attrs ;
   char *args ;
   void *percpu ;
   unsigned int percpu_size ;
   unsigned int num_tracepoints ;
   tracepoint_ptr_t *tracepoints_ptrs ;
   unsigned int num_srcu_structs ;
   struct srcu_struct **srcu_struct_ptrs ;
   unsigned int num_bpf_raw_events ;
   struct bpf_raw_event_map *bpf_raw_events ;
   struct jump_entry *jump_entries ;
   unsigned int num_jump_entries ;
   unsigned int num_trace_bprintk_fmt ;
   char **trace_bprintk_fmt_start ;
   struct trace_event_call **trace_events ;
   unsigned int num_trace_events ;
   struct trace_eval_map **trace_evals ;
   unsigned int num_trace_evals ;
   unsigned int num_ftrace_callsites ;
   unsigned long *ftrace_callsites ;
   bool klp ;
   bool klp_alive ;
   struct klp_modinfo *klp_info ;
   struct list_head source_list ;
   struct list_head target_list ;
   void (*exit)(void) ;
   atomic_t refcnt ;
   ctor_fn_t *ctors ;
   unsigned int num_ctors ;
   struct error_injection_entry *ei_funcs ;
   unsigned int num_ei_funcs ;
} __attribute__((__designated_init__, __aligned__(64)));
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/gen_stats.h"
struct gnet_stats_queue {
   __u32 qlen ;
   __u32 backlog ;
   __u32 drops ;
   __u32 requeues ;
   __u32 overlimits ;
};
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/gen_stats.h"
struct gnet_stats_basic_packed {
   __u64 bytes ;
   __u64 packets ;
};
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/gen_stats.h"
struct gnet_stats_basic_cpu {
   struct gnet_stats_basic_packed bstats ;
   struct u64_stats_sync syncp ;
} __attribute__((__aligned__(16)));
#line 20 
struct net_rate_estimator;
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/gen_stats.h"
struct gnet_dump {
   spinlock_t *lock ;
   struct sk_buff *skb ;
   struct nlattr *tail ;
   int compat_tc_stats ;
   int compat_xstats ;
   int padattr ;
   void *xstats ;
   int xstats_len ;
   struct tc_stats tc_stats ;
};
#line 291  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netlink.h"
struct __anonstruct_2125 {
   s16 min ;
   s16 max ;
};
#line 291  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netlink.h"
union __anonunion_2124 {
   void *validation_data ;
   struct __anonstruct_2125 __anonCompField___anonunion_2124_167 ;
   int (*validate)(struct nlattr *, struct netlink_ext_ack *) ;
   u16 strict_start_type ;
};
#line 291  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netlink.h"
struct nla_policy {
   u8 type ;
   u8 validation_type ;
   u16 len ;
   union __anonunion_2124 __anonCompField_nla_policy_168 ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/rtnetlink.h"
struct rtnl_link_ops {
   struct list_head list ;
   char *kind ;
   size_t priv_size ;
   void (*setup)(struct net_device *) ;
   unsigned int maxtype ;
   struct nla_policy *policy ;
   int (*validate)(struct nlattr **, struct nlattr **, struct netlink_ext_ack *) ;
   int (*newlink)(struct net *, struct net_device *, struct nlattr **, struct nlattr **, struct netlink_ext_ack *) ;
   int (*changelink)(struct net_device *, struct nlattr **, struct nlattr **, struct netlink_ext_ack *) ;
   void (*dellink)(struct net_device *, struct list_head *) ;
   size_t (*get_size)(struct net_device *) ;
   int (*fill_info)(struct sk_buff *, struct net_device *) ;
   size_t (*get_xstats_size)(struct net_device *) ;
   int (*fill_xstats)(struct sk_buff *, struct net_device *) ;
   unsigned int (*get_num_tx_queues)(void) ;
   unsigned int (*get_num_rx_queues)(void) ;
   unsigned int slave_maxtype ;
   struct nla_policy *slave_policy ;
   int (*slave_changelink)(struct net_device *, struct net_device *, struct nlattr **, struct nlattr **, struct netlink_ext_ack *) ;
   size_t (*get_slave_size)(struct net_device *, struct net_device *) ;
   int (*fill_slave_info)(struct sk_buff *, struct net_device *, struct net_device *) ;
   struct net *(*get_link_net)(struct net_device *) ;
   size_t (*get_linkxstats_size)(struct net_device *, int ) ;
   int (*fill_linkxstats)(struct sk_buff *, struct net_device *, int *, int ) ;
};
#line 170  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/rtnetlink.h"
struct rhash_lock_head {
   };
#line 76  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rhashtable.h"
struct bucket_table {
   unsigned int size ;
   unsigned int nest ;
   u32 hash_rnd ;
   struct list_head walkers ;
   struct callback_head rcu ;
   struct bucket_table *future_tbl ;
   struct lockdep_map dep_map ;
   struct rhash_lock_head *buckets[] ;
};
#line 281  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow_offload.h"
struct flow_block {
   struct list_head cb_list ;
};
#line 298  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow_offload.h"
typedef int flow_setup_cb_t(enum tc_setup_type , void *, void *);
#line 412 
struct Qdisc_ops;
#line 413 
struct qdisc_walker;
#line 414 
struct tcf_walker;
#line 41  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct qdisc_size_table {
   struct callback_head rcu ;
   struct list_head list ;
   struct tc_sizespec szopts ;
   int refcnt ;
   u16 data[] ;
};
#line 50  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct qdisc_skb_head {
   struct sk_buff *head ;
   struct sk_buff *tail ;
   __u32 qlen ;
   spinlock_t lock ;
};
#line 57  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct Qdisc {
   int (*enqueue)(struct sk_buff *, struct Qdisc *, struct sk_buff **) ;
   struct sk_buff *(*dequeue)(struct Qdisc *) ;
   unsigned int flags ;
   u32 limit ;
   struct Qdisc_ops *ops ;
   struct qdisc_size_table *stab ;
   struct hlist_node hash ;
   u32 handle ;
   u32 parent ;
   struct netdev_queue *dev_queue ;
   struct net_rate_estimator *rate_est ;
   struct gnet_stats_basic_cpu *cpu_bstats ;
   struct gnet_stats_queue *cpu_qstats ;
   int padded ;
   refcount_t refcnt ;
   struct sk_buff_head gso_skb ;
   struct qdisc_skb_head q ;
   struct gnet_stats_basic_packed bstats ;
   seqcount_t running ;
   struct gnet_stats_queue qstats ;
   unsigned long state ;
   struct Qdisc *next_sched ;
   struct sk_buff_head skb_bad_txq ;
   spinlock_t busylock ;
   spinlock_t seqlock ;
   bool empty ;
   struct callback_head rcu ;
};
#line 195 
struct tcf_block;
#line 195  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct Qdisc_class_ops {
   unsigned int flags ;
   struct netdev_queue *(*select_queue)(struct Qdisc *, struct tcmsg *) ;
   int (*graft)(struct Qdisc *, unsigned long , struct Qdisc *, struct Qdisc **, struct netlink_ext_ack *) ;
   struct Qdisc *(*leaf)(struct Qdisc *, unsigned long ) ;
   void (*qlen_notify)(struct Qdisc *, unsigned long ) ;
   unsigned long (*find)(struct Qdisc *, u32 ) ;
   int (*change)(struct Qdisc *, u32 , u32 , struct nlattr **, unsigned long *, struct netlink_ext_ack *) ;
   int (*delete)(struct Qdisc *, unsigned long ) ;
   void (*walk)(struct Qdisc *, struct qdisc_walker *) ;
   struct tcf_block *(*tcf_block)(struct Qdisc *, unsigned long , struct netlink_ext_ack *) ;
   unsigned long (*bind_tcf)(struct Qdisc *, unsigned long , u32 ) ;
   void (*unbind_tcf)(struct Qdisc *, unsigned long ) ;
   int (*dump)(struct Qdisc *, unsigned long , struct sk_buff *, struct tcmsg *) ;
   int (*dump_stats)(struct Qdisc *, unsigned long , struct gnet_dump *) ;
};
#line 235  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct Qdisc_ops {
   struct Qdisc_ops *next ;
   struct Qdisc_class_ops *cl_ops ;
   char id[16U] ;
   int priv_size ;
   unsigned int static_flags ;
   int (*enqueue)(struct sk_buff *, struct Qdisc *, struct sk_buff **) ;
   struct sk_buff *(*dequeue)(struct Qdisc *) ;
   struct sk_buff *(*peek)(struct Qdisc *) ;
   int (*init)(struct Qdisc *, struct nlattr *, struct netlink_ext_ack *) ;
   void (*reset)(struct Qdisc *) ;
   void (*destroy)(struct Qdisc *) ;
   int (*change)(struct Qdisc *, struct nlattr *, struct netlink_ext_ack *) ;
   void (*attach)(struct Qdisc *) ;
   int (*change_tx_queue_len)(struct Qdisc *, unsigned int ) ;
   int (*dump)(struct Qdisc *, struct sk_buff *) ;
   int (*dump_stats)(struct Qdisc *, struct gnet_dump *) ;
   void (*ingress_block_set)(struct Qdisc *, u32 ) ;
   void (*egress_block_set)(struct Qdisc *, u32 ) ;
   u32 (*ingress_block_get)(struct Qdisc *) ;
   u32 (*egress_block_get)(struct Qdisc *) ;
   struct module *owner ;
};
#line 272  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct __anonstruct_2199 {
   unsigned long class ;
   u32 classid ;
};
#line 272 
struct tcf_proto;
#line 272  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct __anonstruct_2200 {
   bool ingress ;
   struct gnet_stats_queue *qstats ;
};
#line 272  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
union __anonunion_2198 {
   struct __anonstruct_2199 __anonCompField___anonunion_2198_170 ;
   struct tcf_proto *goto_tp ;
   struct __anonstruct_2200 __anonCompField___anonunion_2198_171 ;
};
#line 272  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct tcf_result {
   union __anonunion_2198 __anonCompField_tcf_result_172 ;
};
#line 287 
struct tcf_chain;
#line 290  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct tcf_proto_ops {
   struct list_head head ;
   char kind[16U] ;
   int (*classify)(struct sk_buff *, struct tcf_proto *, struct tcf_result *) ;
   int (*init)(struct tcf_proto *) ;
   void (*destroy)(struct tcf_proto *, bool , struct netlink_ext_ack *) ;
   void *(*get)(struct tcf_proto *, u32 ) ;
   void (*put)(struct tcf_proto *, void *) ;
   int (*change)(struct net *, struct sk_buff *, struct tcf_proto *, unsigned long , u32 , struct nlattr **, void **, bool , bool , struct netlink_ext_ack *) ;
   int (*delete)(struct tcf_proto *, void *, bool *, bool , struct netlink_ext_ack *) ;
   bool (*delete_empty)(struct tcf_proto *) ;
   void (*walk)(struct tcf_proto *, struct tcf_walker *, bool ) ;
   int (*reoffload)(struct tcf_proto *, bool , flow_setup_cb_t *, void *, struct netlink_ext_ack *) ;
   void (*hw_add)(struct tcf_proto *, void *) ;
   void (*hw_del)(struct tcf_proto *, void *) ;
   void (*bind_class)(void *, u32 , unsigned long ) ;
   void *(*tmplt_create)(struct net *, struct tcf_chain *, struct nlattr **, struct netlink_ext_ack *) ;
   void (*tmplt_destroy)(void *) ;
   int (*dump)(struct net *, struct tcf_proto *, void *, struct sk_buff *, struct tcmsg *, bool ) ;
   int (*tmplt_dump)(struct sk_buff *, struct net *, void *) ;
   struct module *owner ;
   int flags ;
};
#line 348  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct tcf_proto {
   struct tcf_proto *next ;
   void *root ;
   int (*classify)(struct sk_buff *, struct tcf_proto *, struct tcf_result *) ;
   __be16 protocol ;
   u32 prio ;
   void *data ;
   struct tcf_proto_ops *ops ;
   struct tcf_chain *chain ;
   spinlock_t lock ;
   bool deleting ;
   refcount_t refcnt ;
   struct callback_head rcu ;
   struct hlist_node destroy_ht_node ;
};
#line 386  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct tcf_chain {
   struct mutex filter_chain_lock ;
   struct tcf_proto *filter_chain ;
   struct list_head list ;
   struct tcf_block *block ;
   u32 index ;
   unsigned int refcnt ;
   unsigned int action_refcnt ;
   bool explicitly_created ;
   bool flushing ;
   struct tcf_proto_ops *tmplt_ops ;
   void *tmplt_priv ;
   struct callback_head rcu ;
};
#line 402  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct __anonstruct_chain0_2202 {
   struct tcf_chain *chain ;
   struct list_head filter_chain_list ;
};
#line 402  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct tcf_block {
   struct mutex lock ;
   struct list_head chain_list ;
   u32 index ;
   refcount_t refcnt ;
   struct net *net ;
   struct Qdisc *q ;
   struct rw_semaphore cb_lock ;
   struct flow_block flow_block ;
   struct list_head owner_list ;
   bool keep_dst ;
   atomic_t offloadcnt ;
   unsigned int nooffloaddevcnt ;
   unsigned int lockeddevcnt ;
   struct __anonstruct_chain0_2202 chain0 ;
   struct callback_head rcu ;
   struct hlist_head proto_destroy_ht[128U] ;
   struct mutex proto_destroy_lock ;
};
#line 1269  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct mini_Qdisc {
   struct tcf_proto *filter_list ;
   struct gnet_stats_basic_cpu *cpu_bstats ;
   struct gnet_stats_queue *cpu_qstats ;
   struct callback_head rcu ;
};
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/filter.h"
struct sock_filter {
   __u16 code ;
   __u8 jt ;
   __u8 jf ;
   __u32 k ;
};
#line 35 
struct sock_reuseport;
#line 513  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/filter.h"
struct sock_fprog_kern {
   u16 len ;
   struct sock_filter *filter ;
};
#line 526  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/filter.h"
union __anonunion_2215 {
   struct sock_filter insns[0U] ;
   struct bpf_insn insnsi[0U] ;
};
#line 526  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/filter.h"
struct bpf_prog {
   u16 pages ;
   u16 jited : 1 ;
   u16 jit_requested : 1 ;
   u16 gpl_compatible : 1 ;
   u16 cb_access : 1 ;
   u16 dst_needed : 1 ;
   u16 blinded : 1 ;
   u16 is_func : 1 ;
   u16 kprobe_override : 1 ;
   u16 has_callchain_buf : 1 ;
   u16 enforce_expected_attach_type : 1 ;
   enum bpf_prog_type type ;
   enum bpf_attach_type expected_attach_type ;
   u32 len ;
   u32 jited_len ;
   u8 tag[8U] ;
   struct bpf_prog_aux *aux ;
   struct sock_fprog_kern *orig_prog ;
   unsigned int (*bpf_func)(void *, struct bpf_insn *) ;
   union __anonunion_2215 __anonCompField_bpf_prog_174 ;
};
#line 554  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/filter.h"
struct sk_filter {
   refcount_t refcnt ;
   struct callback_head rcu ;
   struct bpf_prog *prog ;
};
#line 36  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/poll.h"
struct pollfd {
   int fd ;
   short events ;
   short revents ;
};
#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/poll.h"
struct poll_table_struct {
   void (*_qproc)(struct file *, wait_queue_head_t *, struct poll_table_struct *) ;
   __poll_t _key ;
};
#line 70  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/neighbour.h"
struct neigh_table;
#line 70  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/neighbour.h"
struct neigh_parms {
   possible_net_t net ;
   struct net_device *dev ;
   struct list_head list ;
   int (*neigh_setup)(struct neighbour *) ;
   struct neigh_table *tbl ;
   void *sysctl_table ;
   int dead ;
   refcount_t refcnt ;
   struct callback_head callback_head ;
   int reachable_time ;
   int data[13U] ;
   unsigned long data_state[1U] ;
};
#line 112  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/neighbour.h"
struct neigh_statistics {
   unsigned long allocs ;
   unsigned long destroys ;
   unsigned long hash_grows ;
   unsigned long res_failed ;
   unsigned long lookups ;
   unsigned long hits ;
   unsigned long rcv_probes_mcast ;
   unsigned long rcv_probes_ucast ;
   unsigned long periodic_gc_runs ;
   unsigned long forced_gc_runs ;
   unsigned long unres_discards ;
   unsigned long table_fulls ;
};
#line 134 
struct neigh_ops;
#line 134  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/neighbour.h"
struct neighbour {
   struct neighbour *next ;
   struct neigh_table *tbl ;
   struct neigh_parms *parms ;
   unsigned long confirmed ;
   unsigned long updated ;
   rwlock_t lock ;
   refcount_t refcnt ;
   unsigned int arp_queue_len_bytes ;
   struct sk_buff_head arp_queue ;
   struct timer_list timer ;
   unsigned long used ;
   atomic_t probes ;
   __u8 flags ;
   __u8 nud_state ;
   __u8 type ;
   __u8 dead ;
   u8 protocol ;
   seqlock_t ha_lock ;
   unsigned char ha[32U] ;
   struct hh_cache hh ;
   int (*output)(struct neighbour *, struct sk_buff *) ;
   struct neigh_ops *ops ;
   struct list_head gc_list ;
   struct callback_head rcu ;
   struct net_device *dev ;
   u8 primary_key[0U] ;
} __attribute__((__designated_init__));
#line 163  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/neighbour.h"
struct neigh_ops {
   int family ;
   void (*solicit)(struct neighbour *, struct sk_buff *) ;
   void (*error_report)(struct neighbour *, struct sk_buff *) ;
   int (*output)(struct neighbour *, struct sk_buff *) ;
   int (*connected_output)(struct neighbour *, struct sk_buff *) ;
};
#line 171  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/neighbour.h"
struct pneigh_entry {
   struct pneigh_entry *next ;
   possible_net_t net ;
   struct net_device *dev ;
   u8 flags ;
   u8 protocol ;
   u8 key[0U] ;
};
#line 186  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/neighbour.h"
struct neigh_hash_table {
   struct neighbour **hash_buckets ;
   unsigned int hash_shift ;
   __u32 hash_rnd[4U] ;
   struct callback_head rcu ;
};
#line 194  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/neighbour.h"
struct neigh_table {
   int family ;
   unsigned int entry_size ;
   unsigned int key_len ;
   __be16 protocol ;
   __u32 (*hash)(void *, struct net_device *, __u32 *) ;
   bool (*key_eq)(struct neighbour *, void *) ;
   int (*constructor)(struct neighbour *) ;
   int (*pconstructor)(struct pneigh_entry *) ;
   void (*pdestructor)(struct pneigh_entry *) ;
   void (*proxy_redo)(struct sk_buff *) ;
   bool (*allow_add)(struct net_device *, struct netlink_ext_ack *) ;
   char *id ;
   struct neigh_parms parms ;
   struct list_head parms_list ;
   int gc_interval ;
   int gc_thresh1 ;
   int gc_thresh2 ;
   int gc_thresh3 ;
   unsigned long last_flush ;
   struct delayed_work gc_work ;
   struct timer_list proxy_timer ;
   struct sk_buff_head proxy_queue ;
   atomic_t entries ;
   atomic_t gc_entries ;
   struct list_head gc_list ;
   rwlock_t lock ;
   unsigned long last_rand ;
   struct neigh_statistics *stats ;
   struct neigh_hash_table *nht ;
   struct pneigh_entry **phash_buckets ;
};
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/dst.h"
struct dst_entry {
   struct net_device *dev ;
   struct dst_ops *ops ;
   unsigned long _metrics ;
   unsigned long expires ;
   struct xfrm_state *xfrm ;
   int (*input)(struct sk_buff *) ;
   int (*output)(struct net *, struct sock *, struct sk_buff *) ;
   unsigned short flags ;
   short obsolete ;
   unsigned short header_len ;
   unsigned short trailer_len ;
   atomic_t __refcnt ;
   int __use ;
   unsigned long lastuse ;
   struct lwtunnel_state *lwtstate ;
   struct callback_head callback_head ;
   short error ;
   short __pad ;
   __u32 tclassid ;
};
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fib_rules.h"
struct fib_rule_hdr {
   __u8 family ;
   __u8 dst_len ;
   __u8 src_len ;
   __u8 tos ;
   __u8 table ;
   __u8 res1 ;
   __u8 res2 ;
   __u8 action ;
   __u32 flags ;
};
#line 38  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fib_rules.h"
struct fib_rule_port_range {
   __u16 start ;
   __u16 end ;
};
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/fib_notifier.h"
struct fib_notifier_ops {
   int family ;
   struct list_head list ;
   unsigned int (*fib_seq_read)(struct net *) ;
   int (*fib_dump)(struct net *, struct notifier_block *, struct netlink_ext_ack *) ;
   struct module *owner ;
   struct callback_head rcu ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/fib_rules.h"
struct fib_kuid_range {
   kuid_t start ;
   kuid_t end ;
};
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/fib_rules.h"
struct fib_rule {
   struct list_head list ;
   int iifindex ;
   int oifindex ;
   u32 mark ;
   u32 mark_mask ;
   u32 flags ;
   u32 table ;
   u8 action ;
   u8 l3mdev ;
   u8 proto ;
   u8 ip_proto ;
   u32 target ;
   __be64 tun_id ;
   struct fib_rule *ctarget ;
   struct net *fr_net ;
   refcount_t refcnt ;
   u32 pref ;
   int suppress_ifgroup ;
   int suppress_prefixlen ;
   char iifname[16U] ;
   char oifname[16U] ;
   struct fib_kuid_range uid_range ;
   struct fib_rule_port_range sport_range ;
   struct fib_rule_port_range dport_range ;
   struct callback_head rcu ;
};
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/fib_rules.h"
struct fib_lookup_arg {
   void *lookup_ptr ;
   void *lookup_data ;
   void *result ;
   struct fib_rule *rule ;
   u32 table ;
   int flags ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/fib_rules.h"
struct fib_rules_ops {
   int family ;
   struct list_head list ;
   int rule_size ;
   int addr_size ;
   int unresolved_rules ;
   int nr_goto_rules ;
   unsigned int fib_rules_seq ;
   int (*action)(struct fib_rule *, struct flowi *, int , struct fib_lookup_arg *) ;
   bool (*suppress)(struct fib_rule *, struct fib_lookup_arg *) ;
   int (*match)(struct fib_rule *, struct flowi *, int ) ;
   int (*configure)(struct fib_rule *, struct sk_buff *, struct fib_rule_hdr *, struct nlattr **, struct netlink_ext_ack *) ;
   int (*delete)(struct fib_rule *) ;
   int (*compare)(struct fib_rule *, struct fib_rule_hdr *, struct nlattr **) ;
   int (*fill)(struct fib_rule *, struct sk_buff *, struct fib_rule_hdr *) ;
   size_t (*nlmsg_payload)(struct fib_rule *) ;
   void (*flush_cache)(struct fib_rules_ops *) ;
   int nlgroup ;
   struct nla_policy *policy ;
   struct list_head rules_list ;
   struct module *owner ;
   struct net *fro_net ;
   struct callback_head rcu ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/l3mdev.h"
struct l3mdev_ops {
   u32 (*l3mdev_fib_table)(struct net_device *) ;
   struct sk_buff *(*l3mdev_l3_rcv)(struct net_device *, struct sk_buff *, u16 ) ;
   struct sk_buff *(*l3mdev_l3_out)(struct net_device *, struct sock *, struct sk_buff *, u16 ) ;
   struct dst_entry *(*l3mdev_link_scope_lookup)(struct net_device *, struct flowi6 *) ;
};
#line 202  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/l3mdev.h"
struct __anonstruct_socket_lock_t_2237 {
   spinlock_t slock ;
   int owned ;
   wait_queue_head_t wq ;
   struct lockdep_map dep_map ;
};
#line 202  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/l3mdev.h"
typedef struct __anonstruct_socket_lock_t_2237 socket_lock_t;
#line 108  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
struct proto;
#line 109  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
typedef __u32 __portpair;
#line 114  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
typedef __u64 __addrpair;
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
struct __anonstruct_2239 {
   __be32 skc_daddr ;
   __be32 skc_rcv_saddr ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_2238 {
   __addrpair skc_addrpair ;
   struct __anonstruct_2239 __anonCompField___anonunion_2238_176 ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_2240 {
   unsigned int skc_hash ;
   __u16 skc_u16hashes[2U] ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
struct __anonstruct_2242 {
   __be16 skc_dport ;
   __u16 skc_num ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_2241 {
   __portpair skc_portpair ;
   struct __anonstruct_2242 __anonCompField___anonunion_2241_179 ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_2243 {
   struct hlist_node skc_bind_node ;
   struct hlist_node skc_portaddr_node ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_2244 {
   unsigned long skc_flags ;
   struct sock *skc_listener ;
   struct inet_timewait_death_row *skc_tw_dr ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_2245 {
   struct hlist_node skc_node ;
   struct hlist_nulls_node skc_nulls_node ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_2246 {
   int skc_incoming_cpu ;
   u32 skc_rcv_wnd ;
   u32 skc_tw_rcv_nxt ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_2247 {
   u32 skc_rxhash ;
   u32 skc_window_clamp ;
   u32 skc_tw_snd_nxt ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
struct sock_common {
   union __anonunion_2238 __anonCompField_sock_common_177 ;
   union __anonunion_2240 __anonCompField_sock_common_178 ;
   union __anonunion_2241 __anonCompField_sock_common_180 ;
   unsigned short skc_family ;
   unsigned char skc_state ;
   unsigned char skc_reuse : 4 ;
   unsigned char skc_reuseport : 1 ;
   unsigned char skc_ipv6only : 1 ;
   unsigned char skc_net_refcnt : 1 ;
   int skc_bound_dev_if ;
   union __anonunion_2243 __anonCompField_sock_common_181 ;
   struct proto *skc_prot ;
   possible_net_t skc_net ;
   struct in6_addr skc_v6_daddr ;
   struct in6_addr skc_v6_rcv_saddr ;
   atomic64_t skc_cookie ;
   union __anonunion_2244 __anonCompField_sock_common_182 ;
   int skc_dontcopy_begin[0U] ;
   union __anonunion_2245 __anonCompField_sock_common_183 ;
   unsigned short skc_tx_queue_mapping ;
   unsigned short skc_rx_queue_mapping ;
   union __anonunion_2246 __anonCompField_sock_common_184 ;
   refcount_t skc_refcnt ;
   int skc_dontcopy_end[0U] ;
   union __anonunion_2247 __anonCompField_sock_common_185 ;
};
#line 231 
struct bpf_sk_storage;
#line 323  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
struct __anonstruct_sk_backlog_2248 {
   atomic_t rmem_alloc ;
   int len ;
   struct sk_buff *head ;
   struct sk_buff *tail ;
};
#line 323  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_2249 {
   struct socket_wq *sk_wq ;
   struct socket_wq *sk_wq_raw ;
};
#line 323  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_2250 {
   struct sk_buff *sk_send_head ;
   struct rb_root tcp_rtx_queue ;
};
#line 323  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
struct sock {
   struct sock_common __sk_common ;
   socket_lock_t sk_lock ;
   atomic_t sk_drops ;
   int sk_rcvlowat ;
   struct sk_buff_head sk_error_queue ;
   struct sk_buff *sk_rx_skb_cache ;
   struct sk_buff_head sk_receive_queue ;
   struct __anonstruct_sk_backlog_2248 sk_backlog ;
   int sk_forward_alloc ;
   unsigned int sk_ll_usec ;
   unsigned int sk_napi_id ;
   int sk_rcvbuf ;
   struct sk_filter *sk_filter ;
   union __anonunion_2249 __anonCompField_sock_186 ;
   struct xfrm_policy *sk_policy[2U] ;
   struct dst_entry *sk_rx_dst ;
   struct dst_entry *sk_dst_cache ;
   atomic_t sk_omem_alloc ;
   int sk_sndbuf ;
   int sk_wmem_queued ;
   refcount_t sk_wmem_alloc ;
   unsigned long sk_tsq_flags ;
   union __anonunion_2250 __anonCompField_sock_187 ;
   struct sk_buff *sk_tx_skb_cache ;
   struct sk_buff_head sk_write_queue ;
   __s32 sk_peek_off ;
   int sk_write_pending ;
   __u32 sk_dst_pending_confirm ;
   u32 sk_pacing_status ;
   long sk_sndtimeo ;
   struct timer_list sk_timer ;
   __u32 sk_priority ;
   __u32 sk_mark ;
   unsigned long sk_pacing_rate ;
   unsigned long sk_max_pacing_rate ;
   struct page_frag sk_frag ;
   netdev_features_t sk_route_caps ;
   netdev_features_t sk_route_nocaps ;
   netdev_features_t sk_route_forced_caps ;
   int sk_gso_type ;
   unsigned int sk_gso_max_size ;
   gfp_t sk_allocation ;
   __u32 sk_txhash ;
   unsigned int __sk_flags_offset[0U] ;
   unsigned int sk_padding : 1 ;
   unsigned int sk_kern_sock : 1 ;
   unsigned int sk_no_check_tx : 1 ;
   unsigned int sk_no_check_rx : 1 ;
   unsigned int sk_userlocks : 4 ;
   unsigned int sk_protocol : 8 ;
   unsigned int sk_type : 16 ;
   u16 sk_gso_max_segs ;
   u8 sk_pacing_shift ;
   unsigned long sk_lingertime ;
   struct proto *sk_prot_creator ;
   rwlock_t sk_callback_lock ;
   int sk_err ;
   int sk_err_soft ;
   u32 sk_ack_backlog ;
   u32 sk_max_ack_backlog ;
   kuid_t sk_uid ;
   struct pid *sk_peer_pid ;
   struct cred *sk_peer_cred ;
   long sk_rcvtimeo ;
   ktime_t sk_stamp ;
   u16 sk_tsflags ;
   u8 sk_shutdown ;
   u32 sk_tskey ;
   atomic_t sk_zckey ;
   u8 sk_clockid ;
   u8 sk_txtime_deadline_mode : 1 ;
   u8 sk_txtime_report_errors : 1 ;
   u8 sk_txtime_unused : 6 ;
   struct socket *sk_socket ;
   void *sk_user_data ;
   void *sk_security ;
   struct sock_cgroup_data sk_cgrp_data ;
   struct mem_cgroup *sk_memcg ;
   void (*sk_state_change)(struct sock *) ;
   void (*sk_data_ready)(struct sock *) ;
   void (*sk_write_space)(struct sock *) ;
   void (*sk_error_report)(struct sock *) ;
   int (*sk_backlog_rcv)(struct sock *, struct sk_buff *) ;
   struct sk_buff *(*sk_validate_xmit_skb)(struct sock *, struct net_device *, struct sk_buff *) ;
   void (*sk_destruct)(struct sock *) ;
   struct sock_reuseport *sk_reuseport_cb ;
   struct bpf_sk_storage *sk_bpf_storage ;
   struct callback_head sk_rcu ;
};
#line 1048 
struct request_sock_ops;
#line 1049 
struct timewait_sock_ops;
#line 1050 
struct raw_hashinfo;
#line 1051 
struct smc_hashinfo;
#line 1071  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_h_2285 {
   struct inet_hashinfo *hashinfo ;
   struct udp_table *udp_table ;
   struct raw_hashinfo *raw_hash ;
   struct smc_hashinfo *smc_hash ;
};
#line 1071  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
struct proto {
   void (*close)(struct sock *, long ) ;
   int (*pre_connect)(struct sock *, struct sockaddr *, int ) ;
   int (*connect)(struct sock *, struct sockaddr *, int ) ;
   int (*disconnect)(struct sock *, int ) ;
   struct sock *(*accept)(struct sock *, int , int *, bool ) ;
   int (*ioctl)(struct sock *, int , unsigned long ) ;
   int (*init)(struct sock *) ;
   void (*destroy)(struct sock *) ;
   void (*shutdown)(struct sock *, int ) ;
   int (*setsockopt)(struct sock *, int , int , char *, unsigned int ) ;
   int (*getsockopt)(struct sock *, int , int , char *, int *) ;
   void (*keepalive)(struct sock *, int ) ;
   int (*compat_setsockopt)(struct sock *, int , int , char *, unsigned int ) ;
   int (*compat_getsockopt)(struct sock *, int , int , char *, int *) ;
   int (*compat_ioctl)(struct sock *, unsigned int , unsigned long ) ;
   int (*sendmsg)(struct sock *, struct msghdr *, size_t ) ;
   int (*recvmsg)(struct sock *, struct msghdr *, size_t , int , int , int *) ;
   int (*sendpage)(struct sock *, struct page *, int , size_t , int ) ;
   int (*bind)(struct sock *, struct sockaddr *, int ) ;
   int (*backlog_rcv)(struct sock *, struct sk_buff *) ;
   void (*release_cb)(struct sock *) ;
   int (*hash)(struct sock *) ;
   void (*unhash)(struct sock *) ;
   void (*rehash)(struct sock *) ;
   int (*get_port)(struct sock *, unsigned short ) ;
   unsigned int inuse_idx ;
   bool (*stream_memory_free)(struct sock *, int ) ;
   bool (*stream_memory_read)(struct sock *) ;
   void (*enter_memory_pressure)(struct sock *) ;
   void (*leave_memory_pressure)(struct sock *) ;
   atomic_long_t *memory_allocated ;
   struct percpu_counter *sockets_allocated ;
   unsigned long *memory_pressure ;
   long *sysctl_mem ;
   int *sysctl_wmem ;
   int *sysctl_rmem ;
   u32 sysctl_wmem_offset ;
   u32 sysctl_rmem_offset ;
   int max_header ;
   bool no_autobind ;
   struct kmem_cache *slab ;
   unsigned int obj_size ;
   slab_flags_t slab_flags ;
   unsigned int useroffset ;
   unsigned int usersize ;
   struct percpu_counter *orphan_count ;
   struct request_sock_ops *rsk_prot ;
   struct timewait_sock_ops *twsk_prot ;
   union __anonunion_h_2285 h ;
   struct module *owner ;
   char name[32U] ;
   struct list_head node ;
   int (*diag_destroy)(struct sock *, int ) ;
} __attribute__((__designated_init__));
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/request_sock.h"
struct request_sock_ops {
   int family ;
   unsigned int obj_size ;
   struct kmem_cache *slab ;
   char *slab_name ;
   int (*rtx_syn_ack)(struct sock *, struct request_sock *) ;
   void (*send_ack)(struct sock *, struct sk_buff *, struct request_sock *) ;
   void (*send_reset)(struct sock *, struct sk_buff *) ;
   void (*destructor)(struct request_sock *) ;
   void (*syn_ack_timeout)(struct request_sock *) ;
};
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/request_sock.h"
struct request_sock {
   struct sock_common __req_common ;
   struct request_sock *dl_next ;
   u16 mss ;
   u8 num_retrans ;
   u8 cookie_ts : 1 ;
   u8 num_timeout : 7 ;
   u32 ts_recent ;
   struct timer_list rsk_timer ;
   struct request_sock_ops *rsk_ops ;
   struct sock *sk ;
   u32 *saved_syn ;
   u32 secid ;
   u32 peer_secid ;
};
#line 63  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ipv6.h"
struct ipv6_stable_secret {
   bool initialized ;
   struct in6_addr secret ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ipv6.h"
struct ipv6_devconf {
   __s32 forwarding ;
   __s32 hop_limit ;
   __s32 mtu6 ;
   __s32 accept_ra ;
   __s32 accept_redirects ;
   __s32 autoconf ;
   __s32 dad_transmits ;
   __s32 rtr_solicits ;
   __s32 rtr_solicit_interval ;
   __s32 rtr_solicit_max_interval ;
   __s32 rtr_solicit_delay ;
   __s32 force_mld_version ;
   __s32 mldv1_unsolicited_report_interval ;
   __s32 mldv2_unsolicited_report_interval ;
   __s32 use_tempaddr ;
   __s32 temp_valid_lft ;
   __s32 temp_prefered_lft ;
   __s32 regen_max_retry ;
   __s32 max_desync_factor ;
   __s32 max_addresses ;
   __s32 accept_ra_defrtr ;
   __s32 accept_ra_min_hop_limit ;
   __s32 accept_ra_pinfo ;
   __s32 ignore_routes_with_linkdown ;
   __s32 accept_ra_rtr_pref ;
   __s32 rtr_probe_interval ;
   __s32 accept_ra_rt_info_min_plen ;
   __s32 accept_ra_rt_info_max_plen ;
   __s32 proxy_ndp ;
   __s32 accept_source_route ;
   __s32 accept_ra_from_local ;
   __s32 optimistic_dad ;
   __s32 use_optimistic ;
   __s32 mc_forwarding ;
   __s32 disable_ipv6 ;
   __s32 drop_unicast_in_l2_multicast ;
   __s32 accept_dad ;
   __s32 force_tllao ;
   __s32 ndisc_notify ;
   __s32 suppress_frag_ndisc ;
   __s32 accept_ra_mtu ;
   __s32 drop_unsolicited_na ;
   struct ipv6_stable_secret stable_secret ;
   __s32 use_oif_addrs_only ;
   __s32 keep_addr_on_down ;
   __s32 seg6_enabled ;
   __s32 seg6_require_hmac ;
   __u32 enhanced_dad ;
   __u32 addr_gen_mode ;
   __s32 disable_policy ;
   __s32 ndisc_tclass ;
   struct ctl_table_header *sysctl_header ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/timewait_sock.h"
struct timewait_sock_ops {
   struct kmem_cache *twsk_slab ;
   char *twsk_slab_name ;
   unsigned int twsk_obj_size ;
   int (*twsk_unique)(struct sock *, struct sock *, void *) ;
   void (*twsk_destructor)(struct sock *) ;
};
#line 99  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/if_inet6.h"
struct ip6_sf_list {
   struct ip6_sf_list *sf_next ;
   struct in6_addr sf_addr ;
   unsigned long sf_count[2U] ;
   unsigned char sf_gsresp ;
   unsigned char sf_oldin ;
   unsigned char sf_crcount ;
};
#line 114  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/if_inet6.h"
struct ifmcaddr6 {
   struct in6_addr mca_addr ;
   struct inet6_dev *idev ;
   struct ifmcaddr6 *next ;
   struct ip6_sf_list *mca_sources ;
   struct ip6_sf_list *mca_tomb ;
   unsigned int mca_sfmode ;
   unsigned char mca_crcount ;
   unsigned long mca_sfcount[2U] ;
   struct timer_list mca_timer ;
   unsigned int mca_flags ;
   int mca_users ;
   refcount_t mca_refcnt ;
   spinlock_t mca_lock ;
   unsigned long mca_cstamp ;
   unsigned long mca_tstamp ;
};
#line 140  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/if_inet6.h"
struct ifacaddr6 {
   struct in6_addr aca_addr ;
   struct fib6_info *aca_rt ;
   struct ifacaddr6 *aca_next ;
   struct hlist_node aca_addr_lst ;
   int aca_users ;
   refcount_t aca_refcnt ;
   unsigned long aca_cstamp ;
   unsigned long aca_tstamp ;
   struct callback_head rcu ;
};
#line 156  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/if_inet6.h"
struct ipv6_devstat {
   struct proc_dir_entry *proc_dir_entry ;
   struct ipstats_mib *ipv6 ;
   struct icmpv6_mib_device *icmpv6dev ;
   struct icmpv6msg_mib_device *icmpv6msgdev ;
};
#line 163  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/if_inet6.h"
struct inet6_dev {
   struct net_device *dev ;
   struct list_head addr_list ;
   struct ifmcaddr6 *mc_list ;
   struct ifmcaddr6 *mc_tomb ;
   spinlock_t mc_lock ;
   unsigned char mc_qrv ;
   unsigned char mc_gq_running ;
   unsigned char mc_ifc_count ;
   unsigned char mc_dad_count ;
   unsigned long mc_v1_seen ;
   unsigned long mc_qi ;
   unsigned long mc_qri ;
   unsigned long mc_maxdelay ;
   struct timer_list mc_gq_timer ;
   struct timer_list mc_ifc_timer ;
   struct timer_list mc_dad_timer ;
   struct ifacaddr6 *ac_list ;
   rwlock_t lock ;
   refcount_t refcnt ;
   __u32 if_flags ;
   int dead ;
   u32 desync_factor ;
   u8 rndid[8U] ;
   struct list_head tempaddr_list ;
   struct in6_addr token ;
   struct neigh_parms *nd_parms ;
   struct ipv6_devconf cnf ;
   struct ipv6_devstat stats ;
   struct timer_list rs_timer ;
   __s32 rs_interval ;
   __u8 rs_probes ;
   unsigned long tstamp ;
   struct callback_head rcu ;
};
#line 104  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/ndisc.h"
struct nd_opt_hdr {
   __u8 nd_opt_type ;
   __u8 nd_opt_len ;
} __attribute__((__packed__));
#line 110  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/ndisc.h"
struct ndisc_options {
   struct nd_opt_hdr *nd_opt_array[15U] ;
   struct nd_opt_hdr *nd_opts_ri ;
   struct nd_opt_hdr *nd_opts_ri_end ;
   struct nd_opt_hdr *nd_useropts ;
   struct nd_opt_hdr *nd_useropts_end ;
   struct nd_opt_hdr *nd_802154_opt_array[3U] ;
};
#line 201  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/ndisc.h"
struct ndisc_ops {
   int (*is_useropt)(u8 ) ;
   int (*parse_options)(struct net_device *, struct nd_opt_hdr *, struct ndisc_options *) ;
   void (*update)(struct net_device *, struct neighbour *, u32 , u8 , struct ndisc_options *) ;
   int (*opt_addr_space)(struct net_device *, u8 , struct neighbour *, u8 *, u8 **) ;
   void (*fill_addr_option)(struct net_device *, struct sk_buff *, u8 , u8 *) ;
   void (*prefix_rcv_add_addr)(struct net *, struct net_device *, struct prefix_info *, struct inet6_dev *, struct in6_addr *, int , u32 , bool , bool , __u32 , u32 , bool ) ;
};
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inetpeer.h"
struct inet_peer_base {
   struct rb_root rb_root ;
   seqlock_t lock ;
   int total ;
};
#line 235  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/ip_fib.h"
struct fib_table {
   struct hlist_node tb_hlist ;
   u32 tb_id ;
   int tb_num_default ;
   struct callback_head rcu ;
   unsigned long *tb_data ;
   unsigned long __data[0U] ;
};
#line 121  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/ip.h"
union __anonunion_2382 {
   void (*destructor)(struct sock *) ;
   struct sock *saved_sk ;
};
#line 121  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/ip.h"
struct ip_ra_chain {
   struct ip_ra_chain *next ;
   struct sock *sk ;
   union __anonunion_2382 __anonCompField_ip_ra_chain_195 ;
   struct callback_head rcu ;
};
#line 58  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/vnic_vic.h"
struct vic_provinfo_tlv {
   u16 type ;
   u16 length ;
   u8 value[0U] ;
};
#line 53  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/vnic_vic.h"
struct vic_provinfo {
   u8 oui[3U] ;
   u8 type ;
   u32 length ;
   u32 num_tlvs ;
   struct vic_provinfo_tlv tlv[0U] ;
} __attribute__((__packed__));
#line 762  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
union __anonunion___u_2422 {
   struct hlist_node *__val ;
   char __c[1U] ;
};
#line 788  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
union __anonunion___u_2424 {
   struct hlist_node *__val ;
   char __c[1U] ;
};
#line 196  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 274  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow_dissector.h"
struct flow_dissector {
   unsigned int used_keys ;
   unsigned short offset[27U] ;
};
#line 574  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/vnic_devcmd.h"
struct filter_usnic_id {
   u32 flags ;
   u16 vlan ;
   u16 ethtype ;
   u8 proto_version ;
   u32 usnic_id ;
} __attribute__((__packed__));
#line 594  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/vnic_devcmd.h"
struct filter_ipv4_5tuple {
   u32 flags ;
   u32 protocol ;
   u32 src_addr ;
   u32 dst_addr ;
   u16 src_port ;
   u16 dst_port ;
} __attribute__((__packed__));
#line 606  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/vnic_devcmd.h"
struct filter_mac_vlan {
   u32 flags ;
   u16 vlan ;
   u8 mac_addr[6U] ;
} __attribute__((__packed__));
#line 633  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/vnic_devcmd.h"
union __anonunion_u_3091 {
   struct filter_usnic_id usnic ;
   struct filter_ipv4_5tuple ipv4 ;
   struct filter_mac_vlan mac_vlan ;
};
#line 633  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/vnic_devcmd.h"
struct filter {
   u32 type ;
   union __anonunion_u_3091 u ;
} __attribute__((__packed__));
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 197 
enum hrtimer_restart;
#line 102  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef u32 u_int32_t;
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 62  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/vnic_resource.h"
struct vnic_resource_header {
   u32 magic ;
   u32 version ;
};
#line 67  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/vnic_resource.h"
struct mgmt_barmap_hdr {
   u32 magic ;
   u32 version ;
   u16 lif ;
   u16 pci_slot ;
   char serial[16U] ;
};
#line 75  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/vnic_resource.h"
struct vnic_resource {
   u8 type ;
   u8 bar ;
   u8 pad[2U] ;
   u32 bar_offset ;
   u32 count ;
};
#line 618  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/vnic_devcmd.h"
union __anonunion_u_5028 {
   u32 rq_idx ;
};
#line 618  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/vnic_devcmd.h"
struct filter_action {
   u32 type ;
   union __anonunion_u_5028 u ;
} __attribute__((__packed__));
#line 650  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/vnic_devcmd.h"
struct filter_tlv {
   u_int32_t type ;
   u_int32_t length ;
   u_int32_t val[0U] ;
};
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 197 
enum hrtimer_restart;
#line 197 
enum hrtimer_restart;
#line 197 
enum hrtimer_restart;
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef __u32 __le32;
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef __u64 __le64;
#line 35  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef __u16 __sum16;
#line 196  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 313  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
typedef struct bio_vec skb_frag_t;
#line 416  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
struct skb_shared_hwtstamps {
   ktime_t hwtstamp ;
};
#line 510  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
struct skb_shared_info {
   __u8 __unused ;
   __u8 meta_len ;
   __u8 nr_frags ;
   __u8 tx_flags ;
   unsigned short gso_size ;
   unsigned short gso_segs ;
   struct sk_buff *frag_list ;
   struct skb_shared_hwtstamps hwtstamps ;
   unsigned int gso_type ;
   u32 tskey ;
   atomic_t dataref ;
   void *destructor_arg ;
   skb_frag_t frags[17U] ;
};
#line 973 
struct rtable;
#line 1165 
enum pkt_hash_types {
    PKT_HASH_TYPE_NONE = 0,
    PKT_HASH_TYPE_L2 = 1,
    PKT_HASH_TYPE_L3 = 2,
    PKT_HASH_TYPE_L4 = 3
};
#line 362  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
enum gro_result {
    GRO_MERGED = 0,
    GRO_MERGED_FREE = 1,
    GRO_HELD = 2,
    GRO_NORMAL = 3,
    GRO_DROP = 4,
    GRO_CONSUMED = 5
};
#line 371  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
typedef enum gro_result gro_result_t;
#line 3610 
enum skb_free_reason {
    SKB_REASON_CONSUMED = 0,
    SKB_REASON_DROPPED = 1
};
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/if_vlan.h"
struct vlan_hdr {
   __be16 h_vlan_TCI ;
   __be16 h_vlan_encapsulated_proto ;
};
#line 86  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ip.h"
struct iphdr {
   __u8 ihl : 4 ;
   __u8 version : 4 ;
   __u8 tos ;
   __be16 tot_len ;
   __be16 id ;
   __be16 frag_off ;
   __u8 ttl ;
   __u8 protocol ;
   __sum16 check ;
   __be32 saddr ;
   __be32 daddr ;
};
#line 116  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ipv6.h"
struct ipv6hdr {
   __u8 priority : 4 ;
   __u8 version : 4 ;
   __u8 flow_lbl[3U] ;
   __be16 payload_len ;
   __u8 nexthdr ;
   __u8 hop_limit ;
   struct in6_addr saddr ;
   struct in6_addr daddr ;
};
#line 82  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/dst.h"
struct dst_metrics {
   u32 metrics[17U] ;
   refcount_t refcnt ;
} __attribute__((__aligned__(4)));
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/tcp.h"
struct tcphdr {
   __be16 source ;
   __be16 dest ;
   __be32 seq ;
   __be32 ack_seq ;
   __u16 res1 : 4 ;
   __u16 doff : 4 ;
   __u16 fin : 1 ;
   __u16 syn : 1 ;
   __u16 rst : 1 ;
   __u16 psh : 1 ;
   __u16 ack : 1 ;
   __u16 urg : 1 ;
   __u16 ece : 1 ;
   __u16 cwr : 1 ;
   __be16 window ;
   __sum16 check ;
   __be16 urg_ptr ;
};
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/udp.h"
struct udphdr {
   __be16 source ;
   __be16 dest ;
   __be16 len ;
   __sum16 check ;
};
#line 261  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/if_inet6.h"
struct fib6_nh;
#line 54  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/ip_fib.h"
struct fib_info;
#line 58  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/ip_fib.h"
struct fib_nh_exception {
   struct fib_nh_exception *fnhe_next ;
   int fnhe_genid ;
   __be32 fnhe_daddr ;
   u32 fnhe_pmtu ;
   bool fnhe_mtu_locked ;
   __be32 fnhe_gw ;
   unsigned long fnhe_expires ;
   struct rtable *fnhe_rth_input ;
   struct rtable *fnhe_rth_output ;
   unsigned long fnhe_stamp ;
   struct callback_head rcu ;
};
#line 72  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/ip_fib.h"
struct fnhe_hash_bucket {
   struct fib_nh_exception *chain ;
};
#line 80  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/ip_fib.h"
union __anonunion_nhc_gw_9346 {
   __be32 ipv4 ;
   struct in6_addr ipv6 ;
};
#line 80  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/ip_fib.h"
struct fib_nh_common {
   struct net_device *nhc_dev ;
   int nhc_oif ;
   unsigned char nhc_scope ;
   u8 nhc_family ;
   u8 nhc_gw_family ;
   unsigned char nhc_flags ;
   struct lwtunnel_state *nhc_lwtstate ;
   union __anonunion_nhc_gw_9346 nhc_gw ;
   int nhc_weight ;
   atomic_t nhc_upper_bound ;
   struct rtable **nhc_pcpu_rth_output ;
   struct rtable *nhc_rth_input ;
   struct fnhe_hash_bucket *nhc_exceptions ;
};
#line 103  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/ip_fib.h"
struct fib_nh {
   struct fib_nh_common nh_common ;
   struct hlist_node nh_hash ;
   struct fib_info *nh_parent ;
   __u32 nh_tclassid ;
   __be32 nh_saddr ;
   int nh_saddr_genid ;
};
#line 113 
struct nexthop;
#line 131  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/ip_fib.h"
struct fib_info {
   struct hlist_node fib_hash ;
   struct hlist_node fib_lhash ;
   struct list_head nh_list ;
   struct net *fib_net ;
   int fib_treeref ;
   refcount_t fib_clntref ;
   unsigned int fib_flags ;
   unsigned char fib_dead ;
   unsigned char fib_protocol ;
   unsigned char fib_scope ;
   unsigned char fib_type ;
   __be32 fib_prefsrc ;
   u32 fib_tb_id ;
   u32 fib_priority ;
   struct dst_metrics *fib_metrics ;
   int fib_nhs ;
   bool fib_nh_is_v6 ;
   bool nh_updated ;
   struct nexthop *nh ;
   struct callback_head rcu ;
   struct fib_nh fib_nh[0U] ;
};
#line 49  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/route.h"
struct uncached_list;
#line 49  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/route.h"
union __anonunion_9355 {
   __be32 rt_gw4 ;
   struct in6_addr rt_gw6 ;
};
#line 49  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/route.h"
struct rtable {
   struct dst_entry dst ;
   int rt_genid ;
   unsigned int rt_flags ;
   __u16 rt_type ;
   __u8 rt_is_input ;
   __u8 rt_uses_gateway ;
   int rt_iif ;
   u8 rt_gw_family ;
   union __anonunion_9355 __anonCompField_rtable_195 ;
   u32 rt_mtu_locked : 1 ;
   u32 rt_pmtu : 31 ;
   struct list_head rt_uncached ;
   struct uncached_list *rt_uncached_list ;
};
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cpu_rmap.h"
struct __anonstruct_near_9363 {
   u16 index ;
   u16 dist ;
};
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cpu_rmap.h"
struct cpu_rmap {
   struct kref refcount ;
   u16 size ;
   u16 used ;
   void **obj ;
   struct __anonstruct_near_9363 near[0U] ;
};
#line 65 
struct fs_pin;
#line 26  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pid_namespace.h"
struct pid_namespace {
   struct kref kref ;
   struct idr idr ;
   struct callback_head rcu ;
   unsigned int pid_allocated ;
   struct task_struct *child_reaper ;
   struct kmem_cache *pid_cachep ;
   unsigned int level ;
   struct pid_namespace *parent ;
   struct vfsmount *proc_mnt ;
   struct dentry *proc_self ;
   struct dentry *proc_thread_self ;
   struct fs_pin *bacct ;
   struct user_namespace *user_ns ;
   struct ucounts *ucounts ;
   struct work_struct proc_work ;
   kgid_t pid_gid ;
   int hide_pid ;
   int reboot ;
   struct ns_common ns ;
} __attribute__((__designated_init__));
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/generic.h"
struct __anonstruct_s_9386 {
   unsigned int len ;
   struct callback_head rcu ;
};
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/generic.h"
union __anonunion_9385 {
   struct __anonstruct_s_9386 s ;
   void *ptr[0U] ;
};
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/generic.h"
struct net_generic {
   union __anonunion_9385 __anonCompField_net_generic_199 ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/lwtunnel.h"
struct lwtunnel_state {
   __u16 type ;
   __u16 flags ;
   __u16 headroom ;
   atomic_t refcnt ;
   int (*orig_output)(struct net *, struct sock *, struct sk_buff *) ;
   int (*orig_input)(struct sk_buff *) ;
   struct callback_head rcu ;
   __u8 data[0U] ;
};
#line 70  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/ip6_fib.h"
struct fib6_node {
   struct fib6_node *parent ;
   struct fib6_node *left ;
   struct fib6_node *right ;
   struct fib6_node *subtree ;
   struct fib6_info *leaf ;
   __u16 fn_bit ;
   __u16 fn_flags ;
   int fn_sernum ;
   struct fib6_info *rr_ptr ;
   struct callback_head rcu ;
};
#line 127  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/ip6_fib.h"
struct rt6key {
   struct in6_addr addr ;
   int plen ;
};
#line 134  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/ip6_fib.h"
struct rt6_exception_bucket {
   struct hlist_head chain ;
   int depth ;
};
#line 150  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/ip6_fib.h"
struct fib6_nh {
   struct fib_nh_common nh_common ;
   unsigned long last_probe ;
   struct rt6_info **rt6i_pcpu ;
   struct rt6_exception_bucket *rt6i_exception_bucket ;
};
#line 161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/ip6_fib.h"
union __anonunion_9389 {
   struct list_head fib6_siblings ;
   struct list_head nh_list ;
};
#line 161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/ip6_fib.h"
struct fib6_info {
   struct fib6_table *fib6_table ;
   struct fib6_info *fib6_next ;
   struct fib6_node *fib6_node ;
   union __anonunion_9389 __anonCompField_fib6_info_200 ;
   unsigned int fib6_nsiblings ;
   refcount_t fib6_ref ;
   unsigned long expires ;
   struct dst_metrics *fib6_metrics ;
   struct rt6key fib6_dst ;
   u32 fib6_flags ;
   struct rt6key fib6_src ;
   struct rt6key fib6_prefsrc ;
   u32 fib6_metric ;
   u8 fib6_protocol ;
   u8 fib6_type ;
   u8 should_flush : 1 ;
   u8 dst_nocount : 1 ;
   u8 dst_nopolicy : 1 ;
   u8 dst_host : 1 ;
   u8 fib6_destroying : 1 ;
   u8 unused : 3 ;
   struct callback_head rcu ;
   struct nexthop *nh ;
   struct fib6_nh fib6_nh[0U] ;
};
#line 202  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/ip6_fib.h"
struct rt6_info {
   struct dst_entry dst ;
   struct fib6_info *from ;
   struct rt6key rt6i_dst ;
   struct rt6key rt6i_src ;
   struct in6_addr rt6i_gateway ;
   struct inet6_dev *rt6i_idev ;
   u32 rt6i_flags ;
   struct list_head rt6i_uncached ;
   struct uncached_list *rt6i_uncached_list ;
   unsigned short rt6i_nfheader_len ;
};
#line 354  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/ip6_fib.h"
struct rt6_statistics {
   __u32 fib_nodes ;
   __u32 fib_route_nodes ;
   __u32 fib_rt_entries ;
   __u32 fib_rt_cache ;
   __u32 fib_discarded_routes ;
   atomic_t fib_rt_alloc ;
   atomic_t fib_rt_uncache ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/ip6_fib.h"
struct fib6_table {
   struct hlist_node tb6_hlist ;
   u32 tb6_id ;
   spinlock_t tb6_lock ;
   struct fib6_node tb6_root ;
   struct inet_peer_base tb6_peers ;
   unsigned int flags ;
   unsigned int fib_seq ;
};
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/addrconf.h"
struct prefix_info {
   __u8 type ;
   __u8 length ;
   __u8 prefix_len ;
   __u8 reserved : 6 ;
   __u8 autoconf : 1 ;
   __u8 onlink : 1 ;
   __be32 valid ;
   __be32 prefered ;
   __be32 reserved2 ;
   struct in6_addr prefix ;
};
#line 49  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/nexthop.h"
union __anonunion_9403 {
   struct fib_nh_common fib_nhc ;
   struct fib_nh fib_nh ;
   struct fib6_nh fib6_nh ;
};
#line 49  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/nexthop.h"
struct nh_info {
   struct hlist_node dev_hash ;
   struct nexthop *nh_parent ;
   u8 family ;
   bool reject_nh ;
   union __anonunion_9403 __anonCompField_nh_info_201 ;
};
#line 63  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/nexthop.h"
struct nh_grp_entry {
   struct nexthop *nh ;
   u8 weight ;
   atomic_t upper_bound ;
   struct list_head nh_list ;
   struct nexthop *nh_parent ;
};
#line 72  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/nexthop.h"
struct nh_group {
   u16 num_nh ;
   bool mpath ;
   bool has_v4 ;
   struct nh_grp_entry nh_entries[0U] ;
};
#line 79  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/nexthop.h"
union __anonunion_9404 {
   struct nh_info *nh_info ;
   struct nh_group *nh_grp ;
};
#line 79  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/nexthop.h"
struct nexthop {
   struct rb_node rb_node ;
   struct list_head fi_list ;
   struct list_head f6i_list ;
   struct list_head grp_list ;
   struct net *net ;
   u32 id ;
   u8 protocol ;
   u8 nh_flags ;
   bool is_group ;
   refcount_t refcnt ;
   struct callback_head rcu ;
   union __anonunion_9404 __anonCompField_nexthop_202 ;
};
#line 57  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/udp.h"
struct udp_hslot {
   struct hlist_head head ;
   int count ;
   spinlock_t lock ;
} __attribute__((__aligned__(16)));
#line 71  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/udp.h"
struct udp_table {
   struct udp_hslot *hash ;
   struct udp_hslot *hash2 ;
   unsigned int mask ;
   unsigned int log ;
};
#line 114  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/udp_tunnel.h"
struct udp_tunnel_info {
   unsigned short type ;
   sa_family_t sa_family ;
   __be16 port ;
};
#line 40  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/cq_desc.h"
struct cq_desc {
   __le16 completed_index ;
   __le16 q_number ;
   u8 type_specfic[11U] ;
   u8 type_color ;
};
#line 41  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/cq_enet_desc.h"
struct cq_enet_rq_desc {
   __le16 completed_index_flags ;
   __le16 q_number_rss_type_flags ;
   __le32 rss_hash ;
   __le16 bytes_written_flags ;
   __le16 vlan ;
   __le16 checksum_fcoe ;
   u8 flags ;
   u8 type_color ;
};
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/wq_enet_desc.h"
struct wq_enet_desc {
   __le64 address ;
   __le16 length ;
   __le16 mss_loopback ;
   __le16 header_length_flags ;
   __le16 vlan_tag ;
};
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/rq_enet_desc.h"
struct rq_enet_desc {
   __le64 address ;
   __le16 length_type ;
   u8 reserved[6U] ;
};
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/vnic_rss.h"
struct __anonstruct_key_9439 {
   u8 b[10U] ;
   u8 b_pad[6U] ;
};
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/vnic_rss.h"
union vnic_rss_key {
   struct __anonstruct_key_9439 key[4U] ;
   u64 raw[8U] ;
};
#line 37  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/vnic_rss.h"
struct __anonstruct_cpu_9440 {
   u8 b[4U] ;
   u8 b_pad[4U] ;
};
#line 37  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/vnic_rss.h"
union vnic_rss_cpu {
   struct __anonstruct_cpu_9440 cpu[32U] ;
   u64 raw[32U] ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/enic.h"
struct enic_intr_mod_range {
   u32 small_pkt_range_start ;
   u32 large_pkt_range_start ;
};
#line 64  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/enic.h"
struct enic_intr_mod_table {
   u32 rx_rate ;
   u32 range_percent ;
};
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 197 
enum hrtimer_restart;
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/dd.c"
struct device_private {
   void *driver_data ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/firmware.h"
struct firmware {
   size_t size ;
   u8 *data ;
   struct page **pages ;
   void *priv ;
};
#line 164  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef unsigned long irq_hw_number_t;
#line 303  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ioport.h"
struct irq_data;
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 244  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/idr.h"
struct ida {
   struct xarray xa ;
};
#line 439  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/property.h"
typedef u32 phandle;
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/of.h"
struct property {
   char *name ;
   int length ;
   void *value ;
   struct property *next ;
   unsigned long _flags ;
   struct bin_attribute attr ;
};
#line 51  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/of.h"
struct device_node {
   char *name ;
   phandle phandle ;
   char *full_name ;
   struct fwnode_handle fwnode ;
   struct property *properties ;
   struct property *deadprops ;
   struct device_node *parent ;
   struct device_node *child ;
   struct device_node *sibling ;
   struct kobject kobj ;
   unsigned long _flags ;
   void *data ;
};
#line 63  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/irqdomain.h"
struct irq_fwspec {
   struct fwnode_handle *fwnode ;
   int param_count ;
   u32 param[16U] ;
};
#line 68 
enum irq_domain_bus_token {
    DOMAIN_BUS_ANY = 0,
    DOMAIN_BUS_WIRED = 1,
    DOMAIN_BUS_GENERIC_MSI = 2,
    DOMAIN_BUS_PCI_MSI = 3,
    DOMAIN_BUS_PLATFORM_MSI = 4,
    DOMAIN_BUS_NEXUS = 5,
    DOMAIN_BUS_IPI = 6,
    DOMAIN_BUS_FSL_MC_MSI = 7,
    DOMAIN_BUS_TI_SCI_INTA_MSI = 8,
    DOMAIN_BUS_WAKEUP = 9
};
#line 104  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/irqdomain.h"
struct irq_domain_ops {
   int (*match)(struct irq_domain *, struct device_node *, enum irq_domain_bus_token ) ;
   int (*select)(struct irq_domain *, struct irq_fwspec *, enum irq_domain_bus_token ) ;
   int (*map)(struct irq_domain *, unsigned int , irq_hw_number_t ) ;
   void (*unmap)(struct irq_domain *, unsigned int ) ;
   int (*xlate)(struct irq_domain *, struct device_node *, u32 *, unsigned int , unsigned long *, unsigned int *) ;
   int (*alloc)(struct irq_domain *, unsigned int , unsigned int , void *) ;
   void (*free)(struct irq_domain *, unsigned int , unsigned int ) ;
   int (*activate)(struct irq_domain *, struct irq_data *, bool ) ;
   void (*deactivate)(struct irq_domain *, struct irq_data *) ;
   int (*translate)(struct irq_domain *, struct irq_fwspec *, unsigned long *, unsigned int *) ;
   void (*debug_show)(struct seq_file *, struct irq_domain *, struct irq_data *, int ) ;
};
#line 132 
struct irq_domain_chip_generic;
#line 161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/irqdomain.h"
struct irq_domain {
   struct list_head link ;
   char *name ;
   struct irq_domain_ops *ops ;
   void *host_data ;
   unsigned int flags ;
   unsigned int mapcount ;
   struct fwnode_handle *fwnode ;
   enum irq_domain_bus_token bus_token ;
   struct irq_domain_chip_generic *gc ;
   struct irq_domain *parent ;
   struct dentry *debugfs_file ;
   irq_hw_number_t hwirq_max ;
   unsigned int revmap_direct_max_irq ;
   unsigned int revmap_size ;
   struct xarray revmap_tree ;
   struct mutex revmap_tree_mutex ;
   unsigned int linear_revmap[] ;
};
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rtmutex.h"
struct rt_mutex {
   raw_spinlock_t wait_lock ;
   struct rb_root_cached waiters ;
   struct task_struct *owner ;
   int save_state ;
   char *name ;
   char *file ;
   int line ;
   void *magic ;
   struct lockdep_map dep_map ;
};
#line 69  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/i2c.h"
struct i2c_msg {
   __u16 addr ;
   __u16 flags ;
   __u16 len ;
   __u8 *buf ;
};
#line 135  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/i2c.h"
union i2c_smbus_data {
   __u8 byte ;
   __u16 word ;
   __u8 block[34U] ;
};
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/i2c.h"
struct i2c_algorithm;
#line 28 
struct i2c_adapter;
#line 29 
struct i2c_client;
#line 33 
enum i2c_slave_event;
#line 33 
enum i2c_slave_event;
#line 314  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/i2c.h"
struct i2c_client {
   unsigned short flags ;
   unsigned short addr ;
   char name[20U] ;
   struct i2c_adapter *adapter ;
   struct device dev ;
   int init_irq ;
   int irq ;
   struct list_head detected ;
   int (*slave_cb)(struct i2c_client *, enum i2c_slave_event , u8 *) ;
};
#line 360 
enum i2c_slave_event {
    I2C_SLAVE_READ_REQUESTED = 0,
    I2C_SLAVE_WRITE_REQUESTED = 1,
    I2C_SLAVE_READ_PROCESSED = 2,
    I2C_SLAVE_WRITE_RECEIVED = 3,
    I2C_SLAVE_STOP = 4
};
#line 527  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/i2c.h"
struct i2c_algorithm {
   int (*master_xfer)(struct i2c_adapter *, struct i2c_msg *, int ) ;
   int (*master_xfer_atomic)(struct i2c_adapter *, struct i2c_msg *, int ) ;
   int (*smbus_xfer)(struct i2c_adapter *, u16 , unsigned short , char , u8 , int , union i2c_smbus_data *) ;
   int (*smbus_xfer_atomic)(struct i2c_adapter *, u16 , unsigned short , char , u8 , int , union i2c_smbus_data *) ;
   u32 (*functionality)(struct i2c_adapter *) ;
   int (*reg_slave)(struct i2c_client *) ;
   int (*unreg_slave)(struct i2c_client *) ;
};
#line 565  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/i2c.h"
struct i2c_lock_operations {
   void (*lock_bus)(struct i2c_adapter *, unsigned int ) ;
   int (*trylock_bus)(struct i2c_adapter *, unsigned int ) ;
   void (*unlock_bus)(struct i2c_adapter *, unsigned int ) ;
};
#line 618 
struct gpio_desc;
#line 618  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/i2c.h"
struct i2c_bus_recovery_info {
   int (*recover_bus)(struct i2c_adapter *) ;
   int (*get_scl)(struct i2c_adapter *) ;
   void (*set_scl)(struct i2c_adapter *, int ) ;
   int (*get_sda)(struct i2c_adapter *) ;
   void (*set_sda)(struct i2c_adapter *, int ) ;
   int (*get_bus_free)(struct i2c_adapter *) ;
   void (*prepare_recovery)(struct i2c_adapter *) ;
   void (*unprepare_recovery)(struct i2c_adapter *) ;
   struct gpio_desc *scl_gpiod ;
   struct gpio_desc *sda_gpiod ;
};
#line 661  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/i2c.h"
struct i2c_adapter_quirks {
   u64 flags ;
   int max_num_msgs ;
   u16 max_write_len ;
   u16 max_read_len ;
   u16 max_comb_1st_msg_len ;
   u16 max_comb_2nd_msg_len ;
};
#line 692  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/i2c.h"
struct i2c_adapter {
   struct module *owner ;
   unsigned int class ;
   struct i2c_algorithm *algo ;
   void *algo_data ;
   struct i2c_lock_operations *lock_ops ;
   struct rt_mutex bus_lock ;
   struct rt_mutex mux_lock ;
   int timeout ;
   int retries ;
   struct device dev ;
   unsigned long locked_flags ;
   int nr ;
   char name[48U] ;
   struct completion dev_released ;
   struct mutex userspace_clients_lock ;
   struct list_head userspace_clients ;
   struct i2c_bus_recovery_info *bus_recovery_info ;
   struct i2c_adapter_quirks *quirks ;
   struct irq_domain *host_notify_domain ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cdev.h"
struct cdev {
   struct kobject kobj ;
   struct module *owner ;
   struct file_operations *ops ;
   struct list_head list ;
   dev_t dev ;
   unsigned int count ;
} __attribute__((__designated_init__));
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-common.h"
struct v4l2_edid {
   __u32 pad ;
   __u32 start_block ;
   __u32 blocks ;
   __u32 reserved[5U] ;
   __u8 *edid ;
};
#line 754 
enum v4l2_priority {
    V4L2_PRIORITY_UNSET = 0,
    V4L2_PRIORITY_BACKGROUND = 1,
    V4L2_PRIORITY_INTERACTIVE = 2,
    V4L2_PRIORITY_RECORD = 3,
    V4L2_PRIORITY_DEFAULT = 2
};
#line 413  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_rect {
   __s32 left ;
   __s32 top ;
   __u32 width ;
   __u32 height ;
};
#line 420  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_fract {
   __u32 numerator ;
   __u32 denominator ;
};
#line 1212  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
typedef __u64 v4l2_std_id;
#line 1394  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_bt_timings {
   __u32 width ;
   __u32 height ;
   __u32 interlaced ;
   __u32 polarities ;
   __u64 pixelclock ;
   __u32 hfrontporch ;
   __u32 hsync ;
   __u32 hbackporch ;
   __u32 vfrontporch ;
   __u32 vsync ;
   __u32 vbackporch ;
   __u32 il_vfrontporch ;
   __u32 il_vsync ;
   __u32 il_vbackporch ;
   __u32 standards ;
   __u32 flags ;
   struct v4l2_fract picture_aspect ;
   __u8 cea861_vic ;
   __u8 hdmi_vic ;
   __u8 reserved[46U] ;
} __attribute__((__packed__));
#line 1517  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
union __anonunion_11232 {
   struct v4l2_bt_timings bt ;
   __u32 reserved[32U] ;
};
#line 1517  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_dv_timings {
   __u32 type ;
   union __anonunion_11232 __anonCompField_v4l2_dv_timings_77 ;
} __attribute__((__packed__));
#line 1536  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_enum_dv_timings {
   __u32 index ;
   __u32 pad ;
   __u32 reserved[2U] ;
   struct v4l2_dv_timings timings ;
};
#line 1554  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_bt_timings_cap {
   __u32 min_width ;
   __u32 max_width ;
   __u32 min_height ;
   __u32 max_height ;
   __u64 min_pixelclock ;
   __u64 max_pixelclock ;
   __u32 standards ;
   __u32 capabilities ;
   __u32 reserved[16U] ;
} __attribute__((__packed__));
#line 1581  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
union __anonunion_11233 {
   struct v4l2_bt_timings_cap bt ;
   __u32 raw_data[32U] ;
};
#line 1581  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_dv_timings_cap {
   __u32 type ;
   __u32 pad ;
   __u32 reserved[2U] ;
   union __anonunion_11233 __anonCompField_v4l2_dv_timings_cap_78 ;
};
#line 1803  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_tuner {
   __u32 index ;
   __u8 name[32U] ;
   __u32 type ;
   __u32 capability ;
   __u32 rangelow ;
   __u32 rangehigh ;
   __u32 rxsubchans ;
   __u32 audmode ;
   __s32 signal ;
   __s32 afc ;
   __u32 reserved[4U] ;
};
#line 1817  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_modulator {
   __u32 index ;
   __u8 name[32U] ;
   __u32 capability ;
   __u32 rangelow ;
   __u32 rangehigh ;
   __u32 txsubchans ;
   __u32 type ;
   __u32 reserved[3U] ;
};
#line 1860  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_frequency {
   __u32 tuner ;
   __u32 type ;
   __u32 frequency ;
   __u32 reserved[8U] ;
};
#line 1871  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_frequency_band {
   __u32 tuner ;
   __u32 type ;
   __u32 index ;
   __u32 capability ;
   __u32 rangelow ;
   __u32 rangehigh ;
   __u32 modulation ;
   __u32 reserved[9U] ;
};
#line 2043  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_vbi_format {
   __u32 sampling_rate ;
   __u32 offset ;
   __u32 samples_per_line ;
   __u32 sample_format ;
   __s32 start[2U] ;
   __u32 count[2U] ;
   __u32 flags ;
   __u32 reserved[2U] ;
};
#line 2071  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_sliced_vbi_format {
   __u16 service_set ;
   __u16 service_lines[2U][24U] ;
   __u32 io_size ;
   __u32 reserved[2U] ;
};
#line 2095  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_sliced_vbi_cap {
   __u16 service_set ;
   __u16 service_lines[2U][24U] ;
   __u32 type ;
   __u32 reserved[3U] ;
};
#line 2106  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_sliced_vbi_data {
   __u32 id ;
   __u32 field ;
   __u32 line ;
   __u32 reserved ;
   __u8 data[48U] ;
};
#line 2350  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_event_subscription {
   __u32 type ;
   __u32 id ;
   __u32 flags ;
   __u32 reserved[5U] ;
};
#line 2375  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
union __anonunion_11249 {
   __u32 addr ;
   char name[32U] ;
};
#line 2375  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_dbg_match {
   __u32 type ;
   union __anonunion_11249 __anonCompField_v4l2_dbg_match_87 ;
} __attribute__((__packed__));
#line 2383  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_dbg_register {
   struct v4l2_dbg_match match ;
   __u32 size ;
   __u64 reg ;
   __u64 val ;
} __attribute__((__packed__));
#line 57  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_device;
#line 57  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_gobj {
   struct media_device *mdev ;
   u32 id ;
   struct list_head list ;
};
#line 72  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_entity_enum {
   unsigned long *bmap ;
   int idx_max ;
};
#line 88 
struct media_entity;
#line 88  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct __anonstruct_stack_11253 {
   struct media_entity *entity ;
   struct list_head *link ;
};
#line 88  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_graph {
   struct __anonstruct_stack_11253 stack[16U] ;
   struct media_entity_enum ent_enum ;
   int top ;
};
#line 104  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_pipeline {
   int streaming_count ;
   struct media_graph graph ;
};
#line 132 
struct media_pad;
#line 132 
struct media_interface;
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
union __anonunion_11254 {
   struct media_gobj *gobj0 ;
   struct media_pad *source ;
   struct media_interface *intf ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
union __anonunion_11255 {
   struct media_gobj *gobj1 ;
   struct media_pad *sink ;
   struct media_entity *entity ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_link {
   struct media_gobj graph_obj ;
   struct list_head list ;
   union __anonunion_11254 __anonCompField_media_link_90 ;
   union __anonunion_11255 __anonCompField_media_link_91 ;
   struct media_link *reverse ;
   unsigned long flags ;
   bool is_backlink ;
};
#line 149 
enum media_pad_signal_type {
    PAD_SIGNAL_DEFAULT = 0,
    PAD_SIGNAL_ANALOG = 1,
    PAD_SIGNAL_DV = 2,
    PAD_SIGNAL_AUDIO = 3
};
#line 189  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_pad {
   struct media_gobj graph_obj ;
   struct media_entity *entity ;
   u16 index ;
   enum media_pad_signal_type sig_type ;
   unsigned long flags ;
};
#line 214  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_entity_operations {
   int (*get_fwnode_pad)(struct fwnode_endpoint *) ;
   int (*link_setup)(struct media_entity *, struct media_pad *, struct media_pad *, u32 ) ;
   int (*link_validate)(struct media_link *) ;
};
#line 221 
enum media_entity_type {
    MEDIA_ENTITY_TYPE_BASE = 0,
    MEDIA_ENTITY_TYPE_VIDEO_DEVICE = 1,
    MEDIA_ENTITY_TYPE_V4L2_SUBDEV = 2
};
#line 289  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct __anonstruct_dev_11257 {
   u32 major ;
   u32 minor ;
};
#line 289  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
union __anonunion_info_11256 {
   struct __anonstruct_dev_11257 dev ;
};
#line 289  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_entity {
   struct media_gobj graph_obj ;
   char *name ;
   enum media_entity_type obj_type ;
   u32 function ;
   unsigned long flags ;
   u16 num_pads ;
   u16 num_links ;
   u16 num_backlinks ;
   int internal_idx ;
   struct media_pad *pads ;
   struct list_head links ;
   struct media_entity_operations *ops ;
   int stream_count ;
   int use_count ;
   struct media_pipeline *pipe ;
   union __anonunion_info_11256 info ;
};
#line 335  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_interface {
   struct media_gobj graph_obj ;
   struct list_head links ;
   u32 type ;
   u32 flags ;
};
#line 349  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_intf_devnode {
   struct media_interface intf ;
   u32 major ;
   u32 minor ;
};
#line 1087 
enum vfl_devnode_type {
    VFL_TYPE_GRABBER = 0,
    VFL_TYPE_VBI = 1,
    VFL_TYPE_RADIO = 2,
    VFL_TYPE_SUBDEV = 3,
    VFL_TYPE_SDR = 4,
    VFL_TYPE_TOUCH = 5,
    VFL_TYPE_MAX = 6
};
#line 1097 
enum vfl_devnode_direction {
    VFL_DIR_RX = 0,
    VFL_DIR_TX = 1,
    VFL_DIR_M2M = 2
};
#line 1104 
struct video_device;
#line 1105 
struct v4l2_device;
#line 1106 
struct v4l2_ctrl_handler;
#line 104  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-dev.h"
struct v4l2_prio_state {
   atomic_t prios[4U] ;
};
#line 193  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-dev.h"
struct v4l2_file_operations {
   struct module *owner ;
   ssize_t (*read)(struct file *, char *, size_t , loff_t *) ;
   ssize_t (*write)(struct file *, char *, size_t , loff_t *) ;
   __poll_t (*poll)(struct file *, struct poll_table_struct *) ;
   long (*unlocked_ioctl)(struct file *, unsigned int , unsigned long ) ;
   long (*compat_ioctl32)(struct file *, unsigned int , unsigned long ) ;
   unsigned long (*get_unmapped_area)(struct file *, unsigned long , unsigned long , unsigned long , unsigned long ) ;
   int (*mmap)(struct file *, struct vm_area_struct *) ;
   int (*open)(struct file *) ;
   int (*release)(struct file *) ;
};
#line 256 
struct vb2_queue;
#line 256 
struct v4l2_ioctl_ops;
#line 256  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-dev.h"
struct video_device {
   struct media_entity entity ;
   struct media_intf_devnode *intf_devnode ;
   struct media_pipeline pipe ;
   struct v4l2_file_operations *fops ;
   u32 device_caps ;
   struct device dev ;
   struct cdev *cdev ;
   struct v4l2_device *v4l2_dev ;
   struct device *dev_parent ;
   struct v4l2_ctrl_handler *ctrl_handler ;
   struct vb2_queue *queue ;
   struct v4l2_prio_state *prio ;
   char name[32U] ;
   enum vfl_devnode_type vfl_type ;
   enum vfl_devnode_direction vfl_dir ;
   int minor ;
   u16 num ;
   unsigned long flags ;
   int index ;
   spinlock_t fh_lock ;
   struct list_head fh_list ;
   int dev_debug ;
   v4l2_std_id tvnorms ;
   void (*release)(struct video_device *) ;
   struct v4l2_ioctl_ops *ioctl_ops ;
   unsigned long valid_ioctls[3U] ;
   struct mutex *lock ;
};
#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-common.h"
struct v4l2_subdev;
#line 96 
struct v4l2_subdev_ops;
#line 335  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-common.h"
struct v4l2_priv_tun_config {
   int tuner ;
   void *priv ;
};
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-devnode.h"
struct media_file_operations {
   struct module *owner ;
   ssize_t (*read)(struct file *, char *, size_t , loff_t *) ;
   ssize_t (*write)(struct file *, char *, size_t , loff_t *) ;
   __poll_t (*poll)(struct file *, struct poll_table_struct *) ;
   long (*ioctl)(struct file *, unsigned int , unsigned long ) ;
   long (*compat_ioctl)(struct file *, unsigned int , unsigned long ) ;
   int (*open)(struct file *) ;
   int (*release)(struct file *) ;
};
#line 75  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-devnode.h"
struct media_devnode {
   struct media_device *media_dev ;
   struct media_file_operations *fops ;
   struct device dev ;
   struct cdev cdev ;
   struct device *parent ;
   int minor ;
   unsigned long flags ;
   void (*release)(struct media_devnode *) ;
};
#line 65  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-device.h"
struct media_request;
#line 65  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-device.h"
struct media_device_ops {
   int (*link_notify)(struct media_link *, u32 , unsigned int ) ;
   struct media_request *(*req_alloc)(struct media_device *) ;
   void (*req_free)(struct media_request *) ;
   int (*req_validate)(struct media_request *) ;
   void (*req_queue)(struct media_request *) ;
};
#line 144  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-device.h"
struct media_device {
   struct device *dev ;
   struct media_devnode *devnode ;
   char model[32U] ;
   char driver_name[32U] ;
   char serial[40U] ;
   char bus_info[32U] ;
   u32 hw_revision ;
   u64 topology_version ;
   u32 id ;
   struct ida entity_internal_idx ;
   int entity_internal_idx_max ;
   struct list_head entities ;
   struct list_head interfaces ;
   struct list_head pads ;
   struct list_head links ;
   struct list_head entity_notify ;
   struct mutex graph_mutex ;
   struct media_graph pm_count_walk ;
   void *source_priv ;
   int (*enable_source)(struct media_entity *, struct media_pipeline *) ;
   void (*disable_source)(struct media_entity *) ;
   struct media_device_ops *ops ;
   struct mutex req_queue_mutex ;
   atomic_t request_id ;
};
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-mediabus.h"
struct v4l2_mbus_framefmt {
   __u32 width ;
   __u32 height ;
   __u32 code ;
   __u32 field ;
   __u32 colorspace ;
   __u16 ycbcr_enc ;
   __u16 quantization ;
   __u16 xfer_func ;
   __u16 reserved[11U] ;
};
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-subdev.h"
struct v4l2_subdev_format {
   __u32 which ;
   __u32 pad ;
   struct v4l2_mbus_framefmt format ;
   __u32 reserved[8U] ;
};
#line 75  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-subdev.h"
struct v4l2_subdev_mbus_code_enum {
   __u32 pad ;
   __u32 index ;
   __u32 code ;
   __u32 which ;
   __u32 reserved[8U] ;
};
#line 90  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-subdev.h"
struct v4l2_subdev_frame_size_enum {
   __u32 index ;
   __u32 pad ;
   __u32 code ;
   __u32 min_width ;
   __u32 max_width ;
   __u32 min_height ;
   __u32 max_height ;
   __u32 which ;
   __u32 reserved[8U] ;
};
#line 107  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-subdev.h"
struct v4l2_subdev_frame_interval {
   __u32 pad ;
   struct v4l2_fract interval ;
   __u32 reserved[9U] ;
};
#line 123  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-subdev.h"
struct v4l2_subdev_frame_interval_enum {
   __u32 index ;
   __u32 pad ;
   __u32 code ;
   __u32 width ;
   __u32 height ;
   struct v4l2_fract interval ;
   __u32 which ;
   __u32 reserved[8U] ;
};
#line 149  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-subdev.h"
struct v4l2_subdev_selection {
   __u32 which ;
   __u32 pad ;
   __u32 target ;
   __u32 flags ;
   struct v4l2_rect r ;
   __u32 reserved[8U] ;
};
#line 157 
struct v4l2_async_notifier;
#line 158 
enum v4l2_async_match_type {
    V4L2_ASYNC_MATCH_CUSTOM = 0,
    V4L2_ASYNC_MATCH_DEVNAME = 1,
    V4L2_ASYNC_MATCH_I2C = 2,
    V4L2_ASYNC_MATCH_FWNODE = 3
};
#line 79  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-async.h"
struct __anonstruct_i2c_11271 {
   int adapter_id ;
   unsigned short address ;
};
#line 79  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-async.h"
struct __anonstruct_custom_11272 {
   bool (*match)(struct device *, struct v4l2_async_subdev *) ;
   void *priv ;
};
#line 79  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-async.h"
union __anonunion_match_11270 {
   struct fwnode_handle *fwnode ;
   char *device_name ;
   struct __anonstruct_i2c_11271 i2c ;
   struct __anonstruct_custom_11272 custom ;
};
#line 79  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-async.h"
struct v4l2_async_subdev {
   enum v4l2_async_match_type match_type ;
   union __anonunion_match_11270 match ;
   struct list_head list ;
   struct list_head asd_list ;
};
#line 107  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-async.h"
struct v4l2_async_notifier_operations {
   int (*bound)(struct v4l2_async_notifier *, struct v4l2_subdev *, struct v4l2_async_subdev *) ;
   int (*complete)(struct v4l2_async_notifier *) ;
   void (*unbind)(struct v4l2_async_notifier *, struct v4l2_subdev *, struct v4l2_async_subdev *) ;
};
#line 129  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-async.h"
struct v4l2_async_notifier {
   struct v4l2_async_notifier_operations *ops ;
   struct v4l2_device *v4l2_dev ;
   struct v4l2_subdev *sd ;
   struct v4l2_async_notifier *parent ;
   struct list_head asd_list ;
   struct list_head waiting ;
   struct list_head done ;
   struct list_head list ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-fh.h"
struct v4l2_m2m_ctx;
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-fh.h"
struct v4l2_fh {
   struct list_head list ;
   struct video_device *vdev ;
   struct v4l2_ctrl_handler *ctrl_handler ;
   enum v4l2_priority prio ;
   wait_queue_head_t wait ;
   struct mutex subscribe_lock ;
   struct list_head subscribed ;
   struct list_head available ;
   unsigned int navailable ;
   u32 sequence ;
   struct v4l2_m2m_ctx *m2m_ctx ;
};
#line 162 
enum v4l2_mbus_type {
    V4L2_MBUS_UNKNOWN = 0,
    V4L2_MBUS_PARALLEL = 1,
    V4L2_MBUS_BT656 = 2,
    V4L2_MBUS_CSI1 = 3,
    V4L2_MBUS_CCP2 = 4,
    V4L2_MBUS_CSI2_DPHY = 5,
    V4L2_MBUS_CSI2_CPHY = 6
};
#line 97  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-mediabus.h"
struct v4l2_mbus_config {
   enum v4l2_mbus_type type ;
   unsigned int flags ;
};
#line 184 
struct v4l2_subdev_fh;
#line 185 
struct tuner_setup;
#line 186 
struct v4l2_mbus_frame_desc;
#line 52  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_decode_vbi_line {
   u32 is_second_field ;
   u8 *p ;
   u32 line ;
   u32 type ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_io_pin_config {
   u32 flags ;
   u8 pin ;
   u8 function ;
   u8 value ;
   u8 strength ;
};
#line 188  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_core_ops {
   int (*log_status)(struct v4l2_subdev *) ;
   int (*s_io_pin_config)(struct v4l2_subdev *, size_t , struct v4l2_subdev_io_pin_config *) ;
   int (*init)(struct v4l2_subdev *, u32 ) ;
   int (*load_fw)(struct v4l2_subdev *) ;
   int (*reset)(struct v4l2_subdev *, u32 ) ;
   int (*s_gpio)(struct v4l2_subdev *, u32 ) ;
   long (*ioctl)(struct v4l2_subdev *, unsigned int , void *) ;
   long (*compat_ioctl32)(struct v4l2_subdev *, unsigned int , unsigned long ) ;
   int (*g_register)(struct v4l2_subdev *, struct v4l2_dbg_register *) ;
   int (*s_register)(struct v4l2_subdev *, struct v4l2_dbg_register *) ;
   int (*s_power)(struct v4l2_subdev *, int ) ;
   int (*interrupt_service_routine)(struct v4l2_subdev *, u32 , bool *) ;
   int (*subscribe_event)(struct v4l2_subdev *, struct v4l2_fh *, struct v4l2_event_subscription *) ;
   int (*unsubscribe_event)(struct v4l2_subdev *, struct v4l2_fh *, struct v4l2_event_subscription *) ;
};
#line 264  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_tuner_ops {
   int (*standby)(struct v4l2_subdev *) ;
   int (*s_radio)(struct v4l2_subdev *) ;
   int (*s_frequency)(struct v4l2_subdev *, struct v4l2_frequency *) ;
   int (*g_frequency)(struct v4l2_subdev *, struct v4l2_frequency *) ;
   int (*enum_freq_bands)(struct v4l2_subdev *, struct v4l2_frequency_band *) ;
   int (*g_tuner)(struct v4l2_subdev *, struct v4l2_tuner *) ;
   int (*s_tuner)(struct v4l2_subdev *, struct v4l2_tuner *) ;
   int (*g_modulator)(struct v4l2_subdev *, struct v4l2_modulator *) ;
   int (*s_modulator)(struct v4l2_subdev *, struct v4l2_modulator *) ;
   int (*s_type_addr)(struct v4l2_subdev *, struct tuner_setup *) ;
   int (*s_config)(struct v4l2_subdev *, struct v4l2_priv_tun_config *) ;
};
#line 304  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_audio_ops {
   int (*s_clock_freq)(struct v4l2_subdev *, u32 ) ;
   int (*s_i2s_clock_freq)(struct v4l2_subdev *, u32 ) ;
   int (*s_routing)(struct v4l2_subdev *, u32 , u32 , u32 ) ;
   int (*s_stream)(struct v4l2_subdev *, int ) ;
};
#line 310 
enum v4l2_mbus_frame_desc_flags {
    V4L2_MBUS_FRAME_DESC_FL_LEN_MAX = 1,
    V4L2_MBUS_FRAME_DESC_FL_BLOB = 2
};
#line 335  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_mbus_frame_desc_entry {
   enum v4l2_mbus_frame_desc_flags flags ;
   u32 pixelcode ;
   u32 length ;
};
#line 348  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_mbus_frame_desc {
   struct v4l2_mbus_frame_desc_entry entry[4U] ;
   unsigned short num_entries ;
};
#line 415  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_video_ops {
   int (*s_routing)(struct v4l2_subdev *, u32 , u32 , u32 ) ;
   int (*s_crystal_freq)(struct v4l2_subdev *, u32 , u32 ) ;
   int (*g_std)(struct v4l2_subdev *, v4l2_std_id *) ;
   int (*s_std)(struct v4l2_subdev *, v4l2_std_id ) ;
   int (*s_std_output)(struct v4l2_subdev *, v4l2_std_id ) ;
   int (*g_std_output)(struct v4l2_subdev *, v4l2_std_id *) ;
   int (*querystd)(struct v4l2_subdev *, v4l2_std_id *) ;
   int (*g_tvnorms)(struct v4l2_subdev *, v4l2_std_id *) ;
   int (*g_tvnorms_output)(struct v4l2_subdev *, v4l2_std_id *) ;
   int (*g_input_status)(struct v4l2_subdev *, u32 *) ;
   int (*s_stream)(struct v4l2_subdev *, int ) ;
   int (*g_pixelaspect)(struct v4l2_subdev *, struct v4l2_fract *) ;
   int (*g_frame_interval)(struct v4l2_subdev *, struct v4l2_subdev_frame_interval *) ;
   int (*s_frame_interval)(struct v4l2_subdev *, struct v4l2_subdev_frame_interval *) ;
   int (*s_dv_timings)(struct v4l2_subdev *, struct v4l2_dv_timings *) ;
   int (*g_dv_timings)(struct v4l2_subdev *, struct v4l2_dv_timings *) ;
   int (*query_dv_timings)(struct v4l2_subdev *, struct v4l2_dv_timings *) ;
   int (*g_mbus_config)(struct v4l2_subdev *, struct v4l2_mbus_config *) ;
   int (*s_mbus_config)(struct v4l2_subdev *, struct v4l2_mbus_config *) ;
   int (*s_rx_buffer)(struct v4l2_subdev *, void *, unsigned int *) ;
};
#line 481  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_vbi_ops {
   int (*decode_vbi_line)(struct v4l2_subdev *, struct v4l2_decode_vbi_line *) ;
   int (*s_vbi_data)(struct v4l2_subdev *, struct v4l2_sliced_vbi_data *) ;
   int (*g_vbi_data)(struct v4l2_subdev *, struct v4l2_sliced_vbi_data *) ;
   int (*g_sliced_vbi_cap)(struct v4l2_subdev *, struct v4l2_sliced_vbi_cap *) ;
   int (*s_raw_fmt)(struct v4l2_subdev *, struct v4l2_vbi_format *) ;
   int (*g_sliced_fmt)(struct v4l2_subdev *, struct v4l2_sliced_vbi_format *) ;
   int (*s_sliced_fmt)(struct v4l2_subdev *, struct v4l2_sliced_vbi_format *) ;
};
#line 501  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_sensor_ops {
   int (*g_skip_top_lines)(struct v4l2_subdev *, u32 *) ;
   int (*g_skip_frames)(struct v4l2_subdev *, u32 *) ;
};
#line 505 
enum v4l2_subdev_ir_mode {
    V4L2_SUBDEV_IR_MODE_PULSE_WIDTH = 0
};
#line 540  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_ir_parameters {
   unsigned int bytes_per_data_element ;
   enum v4l2_subdev_ir_mode mode ;
   bool enable ;
   bool interrupt_enable ;
   bool shutdown ;
   bool modulation ;
   u32 max_pulse_width ;
   unsigned int carrier_freq ;
   unsigned int duty_cycle ;
   bool invert_level ;
   bool invert_carrier_sense ;
   u32 noise_filter_min_width ;
   unsigned int carrier_range_lower ;
   unsigned int carrier_range_upper ;
   u32 resolution ;
};
#line 599  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_ir_ops {
   int (*rx_read)(struct v4l2_subdev *, u8 *, size_t , ssize_t *) ;
   int (*rx_g_parameters)(struct v4l2_subdev *, struct v4l2_subdev_ir_parameters *) ;
   int (*rx_s_parameters)(struct v4l2_subdev *, struct v4l2_subdev_ir_parameters *) ;
   int (*tx_write)(struct v4l2_subdev *, u8 *, size_t , ssize_t *) ;
   int (*tx_g_parameters)(struct v4l2_subdev *, struct v4l2_subdev_ir_parameters *) ;
   int (*tx_s_parameters)(struct v4l2_subdev *, struct v4l2_subdev_ir_parameters *) ;
};
#line 630  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_pad_config {
   struct v4l2_mbus_framefmt try_fmt ;
   struct v4l2_rect try_crop ;
   struct v4l2_rect try_compose ;
};
#line 674  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_pad_ops {
   int (*init_cfg)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *) ;
   int (*enum_mbus_code)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *, struct v4l2_subdev_mbus_code_enum *) ;
   int (*enum_frame_size)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *, struct v4l2_subdev_frame_size_enum *) ;
   int (*enum_frame_interval)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *, struct v4l2_subdev_frame_interval_enum *) ;
   int (*get_fmt)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *, struct v4l2_subdev_format *) ;
   int (*set_fmt)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *, struct v4l2_subdev_format *) ;
   int (*get_selection)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *, struct v4l2_subdev_selection *) ;
   int (*set_selection)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *, struct v4l2_subdev_selection *) ;
   int (*get_edid)(struct v4l2_subdev *, struct v4l2_edid *) ;
   int (*set_edid)(struct v4l2_subdev *, struct v4l2_edid *) ;
   int (*dv_timings_cap)(struct v4l2_subdev *, struct v4l2_dv_timings_cap *) ;
   int (*enum_dv_timings)(struct v4l2_subdev *, struct v4l2_enum_dv_timings *) ;
   int (*link_validate)(struct v4l2_subdev *, struct media_link *, struct v4l2_subdev_format *, struct v4l2_subdev_format *) ;
   int (*get_frame_desc)(struct v4l2_subdev *, unsigned int , struct v4l2_mbus_frame_desc *) ;
   int (*set_frame_desc)(struct v4l2_subdev *, unsigned int , struct v4l2_mbus_frame_desc *) ;
};
#line 727  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_ops {
   struct v4l2_subdev_core_ops *core ;
   struct v4l2_subdev_tuner_ops *tuner ;
   struct v4l2_subdev_audio_ops *audio ;
   struct v4l2_subdev_video_ops *video ;
   struct v4l2_subdev_vbi_ops *vbi ;
   struct v4l2_subdev_ir_ops *ir ;
   struct v4l2_subdev_sensor_ops *sensor ;
   struct v4l2_subdev_pad_ops *pad ;
};
#line 765  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_internal_ops {
   int (*registered)(struct v4l2_subdev *) ;
   void (*unregistered)(struct v4l2_subdev *) ;
   int (*open)(struct v4l2_subdev *, struct v4l2_subdev_fh *) ;
   int (*close)(struct v4l2_subdev *, struct v4l2_subdev_fh *) ;
   void (*release)(struct v4l2_subdev *) ;
};
#line 772 
struct regulator_bulk_data;
#line 797  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_platform_data {
   struct regulator_bulk_data *regulators ;
   int num_regulators ;
   void *host_priv ;
};
#line 848  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev {
   struct media_entity entity ;
   struct list_head list ;
   struct module *owner ;
   bool owner_v4l2_dev ;
   u32 flags ;
   struct v4l2_device *v4l2_dev ;
   struct v4l2_subdev_ops *ops ;
   struct v4l2_subdev_internal_ops *internal_ops ;
   struct v4l2_ctrl_handler *ctrl_handler ;
   char name[32U] ;
   u32 grp_id ;
   void *dev_priv ;
   void *host_priv ;
   struct video_device *devnode ;
   struct device *dev ;
   struct fwnode_handle *fwnode ;
   struct list_head async_list ;
   struct v4l2_async_subdev *asd ;
   struct v4l2_async_notifier *notifier ;
   struct v4l2_async_notifier *subdev_notifier ;
   struct v4l2_subdev_platform_data *pdata ;
};
#line 906  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_fh {
   struct v4l2_fh vfh ;
   struct module *owner ;
   struct v4l2_subdev_pad_config *pad ;
};
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-device.h"
struct v4l2_device {
   struct device *dev ;
   struct media_device *mdev ;
   struct list_head subdevs ;
   spinlock_t lock ;
   char name[36U] ;
   void (*notify)(struct v4l2_subdev *, unsigned int , void *) ;
   struct v4l2_ctrl_handler *ctrl_handler ;
   struct v4l2_prio_state prio ;
   struct kref ref ;
   void (*release)(struct v4l2_device *) ;
};
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ptp_clock_kernel.h"
struct ptp_system_timestamp {
   struct timespec64 pre_ts ;
   struct timespec64 post_ts ;
};
#line 277 
struct dma_chan;
#line 279 
struct spi_controller;
#line 280 
struct spi_transfer;
#line 281 
struct spi_controller_mem_ops;
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spi/spi.h"
struct spi_statistics {
   spinlock_t lock ;
   unsigned long messages ;
   unsigned long transfers ;
   unsigned long errors ;
   unsigned long timedout ;
   unsigned long spi_sync ;
   unsigned long spi_sync_immediate ;
   unsigned long spi_async ;
   unsigned long long bytes ;
   unsigned long long bytes_rx ;
   unsigned long long bytes_tx ;
   unsigned long transfer_bytes_histo[17U] ;
   unsigned long transfers_split_maxsize ;
};
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spi/spi.h"
struct spi_delay {
   u16 value ;
   u8 unit ;
};
#line 157  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spi/spi.h"
struct spi_device {
   struct device dev ;
   struct spi_controller *controller ;
   struct spi_controller *master ;
   u32 max_speed_hz ;
   u8 chip_select ;
   u8 bits_per_word ;
   bool rt ;
   u32 mode ;
   int irq ;
   void *controller_state ;
   void *controller_data ;
   char modalias[32U] ;
   char *driver_override ;
   int cs_gpio ;
   struct gpio_desc *cs_gpiod ;
   struct spi_delay word_delay ;
   struct spi_statistics statistics ;
};
#line 247 
struct spi_message;
#line 452  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spi/spi.h"
struct spi_controller {
   struct device dev ;
   struct list_head list ;
   s16 bus_num ;
   u16 num_chipselect ;
   u16 dma_alignment ;
   u32 mode_bits ;
   u32 bits_per_word_mask ;
   u32 min_speed_hz ;
   u32 max_speed_hz ;
   u16 flags ;
   bool slave ;
   size_t (*max_transfer_size)(struct spi_device *) ;
   size_t (*max_message_size)(struct spi_device *) ;
   struct mutex io_mutex ;
   spinlock_t bus_lock_spinlock ;
   struct mutex bus_lock_mutex ;
   bool bus_lock_flag ;
   int (*setup)(struct spi_device *) ;
   int (*set_cs_timing)(struct spi_device *, struct spi_delay *, struct spi_delay *, struct spi_delay *) ;
   int (*transfer)(struct spi_device *, struct spi_message *) ;
   void (*cleanup)(struct spi_device *) ;
   bool (*can_dma)(struct spi_controller *, struct spi_device *, struct spi_transfer *) ;
   bool queued ;
   struct kthread_worker kworker ;
   struct task_struct *kworker_task ;
   struct kthread_work pump_messages ;
   spinlock_t queue_lock ;
   struct list_head queue ;
   struct spi_message *cur_msg ;
   bool idling ;
   bool busy ;
   bool running ;
   bool rt ;
   bool auto_runtime_pm ;
   bool cur_msg_prepared ;
   bool cur_msg_mapped ;
   struct completion xfer_completion ;
   size_t max_dma_len ;
   int (*prepare_transfer_hardware)(struct spi_controller *) ;
   int (*transfer_one_message)(struct spi_controller *, struct spi_message *) ;
   int (*unprepare_transfer_hardware)(struct spi_controller *) ;
   int (*prepare_message)(struct spi_controller *, struct spi_message *) ;
   int (*unprepare_message)(struct spi_controller *, struct spi_message *) ;
   int (*slave_abort)(struct spi_controller *) ;
   void (*set_cs)(struct spi_device *, bool ) ;
   int (*transfer_one)(struct spi_controller *, struct spi_device *, struct spi_transfer *) ;
   void (*handle_err)(struct spi_controller *, struct spi_message *) ;
   struct spi_controller_mem_ops *mem_ops ;
   struct spi_delay cs_setup ;
   struct spi_delay cs_hold ;
   struct spi_delay cs_inactive ;
   int *cs_gpios ;
   struct gpio_desc **cs_gpiods ;
   bool use_gpio_descriptors ;
   struct spi_statistics statistics ;
   struct dma_chan *dma_tx ;
   struct dma_chan *dma_rx ;
   void *dummy_rx ;
   void *dummy_tx ;
   int (*fw_translate_cs)(struct spi_controller *, unsigned int ) ;
   bool ptp_sts_supported ;
   unsigned long irq_flags ;
};
#line 890  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spi/spi.h"
struct spi_transfer {
   void *tx_buf ;
   void *rx_buf ;
   unsigned int len ;
   dma_addr_t tx_dma ;
   dma_addr_t rx_dma ;
   struct sg_table tx_sg ;
   struct sg_table rx_sg ;
   unsigned int cs_change : 1 ;
   unsigned int tx_nbits : 3 ;
   unsigned int rx_nbits : 3 ;
   u8 bits_per_word ;
   u16 delay_usecs ;
   struct spi_delay delay ;
   struct spi_delay cs_change_delay ;
   struct spi_delay word_delay ;
   u32 speed_hz ;
   u32 effective_speed_hz ;
   unsigned int ptp_sts_word_pre ;
   unsigned int ptp_sts_word_post ;
   struct ptp_system_timestamp *ptp_sts ;
   bool timestamped_pre ;
   bool timestamped_post ;
   struct list_head transfer_list ;
};
#line 961  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spi/spi.h"
struct spi_message {
   struct list_head transfers ;
   struct spi_device *spi ;
   unsigned int is_dma_mapped : 1 ;
   void (*complete)(void *) ;
   void *context ;
   unsigned int frame_length ;
   unsigned int actual_length ;
   int status ;
   struct list_head queue ;
   void *state ;
   struct list_head resources ;
};
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 157  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_fix_screeninfo {
   char id[16U] ;
   unsigned long smem_start ;
   __u32 smem_len ;
   __u32 type ;
   __u32 type_aux ;
   __u32 visual ;
   __u16 xpanstep ;
   __u16 ypanstep ;
   __u16 ywrapstep ;
   __u32 line_length ;
   unsigned long mmio_start ;
   __u32 mmio_len ;
   __u32 accel ;
   __u16 capabilities ;
   __u16 reserved[2U] ;
};
#line 188  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_bitfield {
   __u32 offset ;
   __u32 length ;
   __u32 msb_right ;
};
#line 241  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_var_screeninfo {
   __u32 xres ;
   __u32 yres ;
   __u32 xres_virtual ;
   __u32 yres_virtual ;
   __u32 xoffset ;
   __u32 yoffset ;
   __u32 bits_per_pixel ;
   __u32 grayscale ;
   struct fb_bitfield red ;
   struct fb_bitfield green ;
   struct fb_bitfield blue ;
   struct fb_bitfield transp ;
   __u32 nonstd ;
   __u32 activate ;
   __u32 height ;
   __u32 width ;
   __u32 accel_flags ;
   __u32 pixclock ;
   __u32 left_margin ;
   __u32 right_margin ;
   __u32 upper_margin ;
   __u32 lower_margin ;
   __u32 hsync_len ;
   __u32 vsync_len ;
   __u32 sync ;
   __u32 vmode ;
   __u32 rotate ;
   __u32 colorspace ;
   __u32 reserved[4U] ;
};
#line 281  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_cmap {
   __u32 start ;
   __u32 len ;
   __u16 *red ;
   __u16 *green ;
   __u16 *blue ;
   __u16 *transp ;
};
#line 341  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_copyarea {
   __u32 dx ;
   __u32 dy ;
   __u32 width ;
   __u32 height ;
   __u32 sx ;
   __u32 sy ;
};
#line 350  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_fillrect {
   __u32 dx ;
   __u32 dy ;
   __u32 width ;
   __u32 height ;
   __u32 color ;
   __u32 rop ;
};
#line 359  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_image {
   __u32 dx ;
   __u32 dy ;
   __u32 width ;
   __u32 height ;
   __u32 fg_color ;
   __u32 bg_color ;
   __u8 depth ;
   char *data ;
   struct fb_cmap cmap ;
};
#line 383  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fbcurpos {
   __u16 x ;
   __u16 y ;
};
#line 387  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_cursor {
   __u16 set ;
   __u16 enable ;
   __u16 rop ;
   char *mask ;
   struct fbcurpos hot ;
   struct fb_image image ;
};
#line 400 
enum backlight_type {
    BACKLIGHT_RAW = 1,
    BACKLIGHT_PLATFORM = 2,
    BACKLIGHT_FIRMWARE = 3,
    BACKLIGHT_TYPE_MAX = 4
};
#line 412 
enum backlight_scale {
    BACKLIGHT_SCALE_UNKNOWN = 0,
    BACKLIGHT_SCALE_LINEAR = 1,
    BACKLIGHT_SCALE_NON_LINEAR = 2
};
#line 418 
struct backlight_device;
#line 419 
struct fb_info;
#line 58  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backlight.h"
struct backlight_ops {
   unsigned int options ;
   int (*update_status)(struct backlight_device *) ;
   int (*get_brightness)(struct backlight_device *) ;
   int (*check_fb)(struct backlight_device *, struct fb_info *) ;
};
#line 74  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backlight.h"
struct backlight_properties {
   int brightness ;
   int max_brightness ;
   int power ;
   int fb_blank ;
   enum backlight_type type ;
   unsigned int state ;
   enum backlight_scale scale ;
};
#line 97  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backlight.h"
struct backlight_device {
   struct backlight_properties props ;
   struct mutex update_lock ;
   struct mutex ops_lock ;
   struct backlight_ops *ops ;
   struct notifier_block fb_notif ;
   struct list_head entry ;
   struct device dev ;
   bool fb_bl_on[32U] ;
   int use_count ;
};
#line 52  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_chroma {
   __u32 redx ;
   __u32 greenx ;
   __u32 bluex ;
   __u32 whitex ;
   __u32 redy ;
   __u32 greeny ;
   __u32 bluey ;
   __u32 whitey ;
};
#line 63 
struct fb_videomode;
#line 63  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_monspecs {
   struct fb_chroma chroma ;
   struct fb_videomode *modedb ;
   __u8 manufacturer[4U] ;
   __u8 monitor[14U] ;
   __u8 serial_no[14U] ;
   __u8 ascii[14U] ;
   __u32 modedb_len ;
   __u32 model ;
   __u32 serial ;
   __u32 year ;
   __u32 week ;
   __u32 hfmin ;
   __u32 hfmax ;
   __u32 dclkmin ;
   __u32 dclkmax ;
   __u16 input ;
   __u16 dpms ;
   __u16 signal ;
   __u16 vfmin ;
   __u16 vfmax ;
   __u16 gamma ;
   __u16 gtf : 1 ;
   __u16 misc ;
   __u8 version ;
   __u8 revision ;
   __u8 max_x ;
   __u8 max_y ;
};
#line 144  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_blit_caps {
   u32 x ;
   u32 y ;
   u32 len ;
   u32 flags ;
};
#line 185  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_pixmap {
   u8 *addr ;
   u32 size ;
   u32 offset ;
   u32 buf_align ;
   u32 scan_align ;
   u32 access_align ;
   u32 flags ;
   u32 blit_x ;
   u32 blit_y ;
   void (*writeio)(struct fb_info *, void *, void *, unsigned int ) ;
   void (*readio)(struct fb_info *, void *, void *, unsigned int ) ;
};
#line 203  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_deferred_io {
   unsigned long delay ;
   struct mutex lock ;
   struct list_head pagelist ;
   void (*first_io)(struct fb_info *) ;
   void (*deferred_io)(struct fb_info *, struct list_head *) ;
};
#line 228  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_ops {
   struct module *owner ;
   int (*fb_open)(struct fb_info *, int ) ;
   int (*fb_release)(struct fb_info *, int ) ;
   ssize_t (*fb_read)(struct fb_info *, char *, size_t , loff_t *) ;
   ssize_t (*fb_write)(struct fb_info *, char *, size_t , loff_t *) ;
   int (*fb_check_var)(struct fb_var_screeninfo *, struct fb_info *) ;
   int (*fb_set_par)(struct fb_info *) ;
   int (*fb_setcolreg)(unsigned int , unsigned int , unsigned int , unsigned int , unsigned int , struct fb_info *) ;
   int (*fb_setcmap)(struct fb_cmap *, struct fb_info *) ;
   int (*fb_blank)(int , struct fb_info *) ;
   int (*fb_pan_display)(struct fb_var_screeninfo *, struct fb_info *) ;
   void (*fb_fillrect)(struct fb_info *, struct fb_fillrect *) ;
   void (*fb_copyarea)(struct fb_info *, struct fb_copyarea *) ;
   void (*fb_imageblit)(struct fb_info *, struct fb_image *) ;
   int (*fb_cursor)(struct fb_info *, struct fb_cursor *) ;
   int (*fb_sync)(struct fb_info *) ;
   int (*fb_ioctl)(struct fb_info *, unsigned int , unsigned long ) ;
   int (*fb_compat_ioctl)(struct fb_info *, unsigned int , unsigned long ) ;
   int (*fb_mmap)(struct fb_info *, struct vm_area_struct *) ;
   void (*fb_get_caps)(struct fb_info *, struct fb_blit_caps *, struct fb_var_screeninfo *) ;
   void (*fb_destroy)(struct fb_info *) ;
   int (*fb_debug_enter)(struct fb_info *) ;
   int (*fb_debug_leave)(struct fb_info *) ;
};
#line 306  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_tilemap {
   __u32 width ;
   __u32 height ;
   __u32 depth ;
   __u32 length ;
   __u8 *data ;
};
#line 315  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_tilerect {
   __u32 sx ;
   __u32 sy ;
   __u32 width ;
   __u32 height ;
   __u32 index ;
   __u32 fg ;
   __u32 bg ;
   __u32 rop ;
};
#line 326  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_tilearea {
   __u32 sx ;
   __u32 sy ;
   __u32 dx ;
   __u32 dy ;
   __u32 width ;
   __u32 height ;
};
#line 335  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_tileblit {
   __u32 sx ;
   __u32 sy ;
   __u32 width ;
   __u32 height ;
   __u32 fg ;
   __u32 bg ;
   __u32 length ;
   __u32 *indices ;
};
#line 346  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_tilecursor {
   __u32 sx ;
   __u32 sy ;
   __u32 mode ;
   __u32 shape ;
   __u32 fg ;
   __u32 bg ;
};
#line 355  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_tile_ops {
   void (*fb_settile)(struct fb_info *, struct fb_tilemap *) ;
   void (*fb_tilecopy)(struct fb_info *, struct fb_tilearea *) ;
   void (*fb_tilefill)(struct fb_info *, struct fb_tilerect *) ;
   void (*fb_tileblit)(struct fb_info *, struct fb_tileblit *) ;
   void (*fb_tilecursor)(struct fb_info *, struct fb_tilecursor *) ;
   int (*fb_get_tilemax)(struct fb_info *) ;
};
#line 499  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct aperture {
   resource_size_t base ;
   resource_size_t size ;
};
#line 497  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct apertures_struct {
   unsigned int count ;
   struct aperture ranges[0U] ;
};
#line 439  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
union __anonunion_12173 {
   char *screen_base ;
   char *screen_buffer ;
};
#line 439  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_info {
   atomic_t count ;
   int node ;
   int flags ;
   int fbcon_rotate_hint ;
   struct mutex lock ;
   struct mutex mm_lock ;
   struct fb_var_screeninfo var ;
   struct fb_fix_screeninfo fix ;
   struct fb_monspecs monspecs ;
   struct work_struct queue ;
   struct fb_pixmap pixmap ;
   struct fb_pixmap sprite ;
   struct fb_cmap cmap ;
   struct list_head modelist ;
   struct fb_videomode *mode ;
   struct backlight_device *bl_dev ;
   struct mutex bl_curve_mutex ;
   u8 bl_curve[128U] ;
   struct delayed_work deferred_work ;
   struct fb_deferred_io *fbdefio ;
   struct fb_ops *fbops ;
   struct device *device ;
   struct device *dev ;
   int class_flag ;
   struct fb_tile_ops *tileops ;
   union __anonunion_12173 __anonCompField_fb_info_73 ;
   unsigned long screen_size ;
   void *pseudo_palette ;
   u32 state ;
   void *fbcon_par ;
   void *par ;
   struct apertures_struct *apertures ;
   bool skip_vt_switch ;
};
#line 767  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_videomode {
   char *name ;
   u32 refresh ;
   u32 xres ;
   u32 yres ;
   u32 pixclock ;
   u32 left_margin ;
   u32 right_margin ;
   u32 upper_margin ;
   u32 lower_margin ;
   u32 hsync_len ;
   u32 vsync_len ;
   u32 sync ;
   u32 vmode ;
   u32 flag ;
};
#line 63  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
struct ldv_kmem_cache {
   char *name ;
   unsigned int size ;
};
#line 88  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
typedef unsigned long pthread_t;
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/thread.h"
union pthread_attr_t {
   char __size[56U] ;
   long __align ;
};
#line 30  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/thread.h"
typedef union pthread_attr_t pthread_attr_t;
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 15  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cisco/enic/enic.ko/concurrency safety/emg/0/environment_model.c"
struct emg_struct_free_irq_5 {
   int arg0 ;
   int signal_pending ;
};
#line 20  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cisco/enic/enic.ko/concurrency safety/emg/0/environment_model.c"
struct emg_struct_interrupt_scenario_enic_isr_legacy_13 {
   int arg0 ;
   enum irqreturn (*arg1)(int , void *) ;
   enum irqreturn (*arg2)(int , void *) ;
   void *arg3 ;
   int signal_pending ;
};
#line 28  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cisco/enic/enic.ko/concurrency safety/emg/0/environment_model.c"
struct emg_struct_random_allocationless_scenario_enic_set_vf_port_15 {
   struct net_device *arg0 ;
   int signal_pending ;
};
#line 33  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cisco/enic/enic.ko/concurrency safety/emg/0/environment_model.c"
struct emg_struct_pci_scenario_enic_driver_16 {
   struct pci_driver *arg0 ;
   int signal_pending ;
};
#line 38  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cisco/enic/enic.ko/concurrency safety/emg/0/environment_model.c"
struct emg_struct_timer_scenario_4_17 {
   struct timer_list *arg0 ;
   int signal_pending ;
};
#line 22  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/common/inline_asm.h"
#line 22 
void ldv_inline_asm(void);
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/irqflags.h"
#line 20 
unsigned long native_save_fl(void);
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/irqflags.h"
unsigned long native_save_fl(void)
{
  #line 22 
  unsigned long flags;
  #line 23 
  ldv_inline_asm();
  #line 35 
  return flags;
}

#line 38 
#line 39 
void native_restore_fl(unsigned long flags);
#line 39  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/irqflags.h"
void native_restore_fl(unsigned long flags)
{
  #line 41 
  ldv_inline_asm();
  #line 42 
  return;
}

#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 23 
void *ldv_kzalloc(size_t size, gfp_t flags);
#line 97  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/io.h"
__inline static void writeq(u64 val, void *addr)
{
  #line 99 
  ldv_inline_asm();
  #line 100 
  return;
}

#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/iomap.h"
#line 32 
unsigned int ioread32(void *);
#line 53 
#line 53 
void iowrite32(u32, void *);
#line 1712  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
#line 1712 
void _dev_err(struct device *, char * , ...);
#line 189  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/slab.h"
#line 189 
void kfree(void *);
#line 668 
#line 476  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cisco/enic/enic.ko/concurrency safety/0/concurrency safety/weaver/vnic_wq.i.aux"
static void *kzalloc(size_t size, gfp_t flags);
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/delay.h"
#line 11 
void __const_udelay(unsigned long);
#line 120  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/vnic_dev.h"
#line 120 
void *vnic_dev_get_res(struct vnic_dev *vdev, enum vnic_res_type type, unsigned int index);
#line 122 
#line 122 
void vnic_dev_clear_desc_ring(struct vnic_dev_ring *ring);
#line 123 
#line 123 
int vnic_dev_alloc_desc_ring(struct vnic_dev *vdev, struct vnic_dev_ring *ring, unsigned int desc_count, unsigned int desc_size);
#line 125 
#line 125 
void vnic_dev_free_desc_ring(struct vnic_dev *vdev, struct vnic_dev_ring *ring);
#line 109  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/vnic_wq.h"
__inline static unsigned int vnic_wq_desc_used(struct vnic_wq *wq)
{
  #line 112 
  return (wq->ring.desc_count - wq->ring.desc_avail) + 4294967295U;
}

#line 178 
#line 69  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/vnic_wq.c"
void vnic_wq_free(struct vnic_wq *wq);
#line 179  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/vnic_wq.h"
#line 88  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/vnic_wq.c"
int vnic_wq_alloc(struct vnic_dev *vdev, struct vnic_wq *wq, unsigned int index, unsigned int desc_count, unsigned int desc_size);
#line 181  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/vnic_wq.h"
#line 157  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/vnic_wq.c"
void vnic_wq_init(struct vnic_wq *wq, unsigned int cq_index, unsigned int error_interrupt_enable, unsigned int error_interrupt_offset);
#line 184  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/vnic_wq.h"
#line 166  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/vnic_wq.c"
unsigned int vnic_wq_error_status(struct vnic_wq *wq);
#line 185  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/vnic_wq.h"
#line 171  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/vnic_wq.c"
void vnic_wq_enable(struct vnic_wq *wq);
#line 186  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/vnic_wq.h"
#line 176  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/vnic_wq.c"
int vnic_wq_disable(struct vnic_wq *wq);
#line 187  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/vnic_wq.h"
#line 195  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/vnic_wq.c"
void vnic_wq_clean(struct vnic_wq *wq, void (*buf_clean)(struct vnic_wq *, struct vnic_wq_buf *));
#line 189  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/vnic_wq.h"
#line 117  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/vnic_wq.c"
int enic_wq_devcmd2_alloc(struct vnic_dev *vdev, struct vnic_wq *wq, unsigned int desc_count, unsigned int desc_size);
#line 191  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/vnic_wq.h"
#line 134  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/vnic_wq.c"
void enic_wq_init_start(struct vnic_wq *wq, unsigned int cq_index, unsigned int fetch_index, unsigned int posted_index, unsigned int error_interrupt_enable, unsigned int error_interrupt_offset);
#line 4750  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
#line 4750 
void netdev_err(struct net_device *, char * , ...);
#line 205  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/enic.h"
__inline static struct net_device *vnic_get_netdev(struct vnic_dev *vdev)
{
  #line 207 
  struct enic *enic = (struct enic *)vdev->priv;
  #line 209 
  return enic->netdev;
}

#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/vnic_wq.c"
static int vnic_wq_alloc_bufs(struct vnic_wq *wq)
{
  #line 33 
  struct vnic_wq_buf *buf;
  #line 34 
  unsigned int i;
  #line 34 
  unsigned int j;
  #line 35 
  unsigned int tmp;
  #line 35 
  unsigned int tmp_0;
  #line 34 
  unsigned int count = wq->ring.desc_count;
  #line 35 
  if (count <= 63U) 
                    #line 35 
                    tmp = 32U; else 
                                    #line 35 
                                    tmp = 64U;
  #line 35 
  if (count <= 63U) 
                    #line 35 
                    tmp_0 = 32U; else 
                                      #line 35 
                                      tmp_0 = 64U;
  #line 35 
  unsigned int blks = ((tmp + count) + 4294967295U) / tmp_0;
  #line 37 
  i = 0U;
  #line 37 
  while (i < blks) {
    {
      #line 38 
      unsigned long tmp_1;
      #line 38 
      if (count <= 63U) 
                        #line 38 
                        tmp_1 = 2304UL; else 
                                             #line 38 
                                             tmp_1 = 4608UL;
      #line 38 
      wq->bufs[i] = (struct vnic_wq_buf *)kzalloc(tmp_1,3264U);
      #line 39 
      if (wq->bufs[i] == (struct vnic_wq_buf *)0) 
                                                  #line 40 
                                                  return -12;
    }
    #line 37 
    i ++;
  }
  #line 43 
  i = 0U;
  #line 43 
  while (i < blks) {
    #line 44 
    buf = wq->bufs[i];
    #line 45 
    j = 0U;
    #line 45 
    while (1) {
      #line 45 
      unsigned int tmp_5;
      #line 45 
      if (count <= 63U) 
                        #line 45 
                        tmp_5 = 32U; else 
                                          #line 45 
                                          tmp_5 = 64U;
      #line 45 
      ;
      #line 45 
      if (! (tmp_5 > j)) 
                         #line 45 
                         break;
      {
        #line 46 
        unsigned int tmp_3;
        #line 46 
        if (count <= 63U) 
                          #line 46 
                          tmp_3 = 32U; else 
                                            #line 46 
                                            tmp_3 = 64U;
        #line 46 
        buf->index = tmp_3 * i + j;
        #line 47 
        buf->desc = (void *)((u8 *)wq->ring.descs + (unsigned long)(wq->ring.desc_size * buf->index));
        #line 49 
        if (buf->index + 1U == count) {
          #line 50 
          buf->next = wq->bufs[0];
          #line 51 
          (buf->next)->prev = buf;
          #line 52 
          break;
        }
        else {
          #line 53 
          unsigned int tmp_4;
          #line 53 
          if (count <= 63U) 
                            #line 53 
                            tmp_4 = 32U; else 
                                              #line 53 
                                              tmp_4 = 64U;
          #line 53 
          ;
          #line 53 
          if (j + 1U == tmp_4) {
            #line 54 
            buf->next = wq->bufs[i + 1U];
            #line 55 
            (buf->next)->prev = buf;
          }
          else {
            #line 57 
            buf->next = buf + 1U;
            #line 58 
            (buf->next)->prev = buf;
            #line 59 
            buf ++;
          }
        }
      }
      #line 45 
      j ++;
    }
    #line 43 
    i ++;
  }
  #line 64 
  wq->to_clean = (wq->bufs[0]);
  #line 64 
  wq->to_use = (wq->bufs[0]);
  #line 66 
  return 0;
}

#line 69  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/vnic_wq.c"
void vnic_wq_free(struct vnic_wq *wq)
{
  #line 71 
  struct vnic_dev *vdev;
  #line 72 
  unsigned int i;
  #line 74 
  vdev = wq->vdev;
  #line 76 
  vnic_dev_free_desc_ring(vdev,& wq->ring);
  #line 78 
  i = 0U;
  #line 78 
  while (i <= 63U) {
    #line 79 
    if (wq->bufs[i] != (struct vnic_wq_buf *)0) {
      #line 80 
      kfree((void *)wq->bufs[i]);
      #line 81 
      wq->bufs[i] = (struct vnic_wq_buf *)0;
    }
    #line 78 
    i ++;
  }
  #line 85 
  wq->ctrl = (struct vnic_wq_ctrl *)0;
  #line 86 
  return;
}

#line 88  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/vnic_wq.c"
int vnic_wq_alloc(struct vnic_dev *vdev, struct vnic_wq *wq, unsigned int index, unsigned int desc_count, unsigned int desc_size)
{
  #line 91 
  int err;
  #line 93 
  wq->index = index;
  #line 94 
  wq->vdev = vdev;
  #line 96 
  wq->ctrl = (struct vnic_wq_ctrl *)vnic_dev_get_res(vdev,(enum vnic_res_type)RES_TYPE_WQ,index);
  #line 97 
  if (wq->ctrl == (struct vnic_wq_ctrl *)0) {
    #line 98 
    _dev_err(& (vdev->pdev)->dev,(char *)"Failed to hook WQ[%d] resource\n",index);
    #line 99 
    return -22;
  }
  #line 102 
  vnic_wq_disable(wq);
  #line 104 
  err = vnic_dev_alloc_desc_ring(vdev,& wq->ring,desc_count,desc_size);
  #line 105 
  if (err != 0) 
                #line 106 
                return err;
  #line 108 
  err = vnic_wq_alloc_bufs(wq);
  #line 109 
  if (err != 0) {
    #line 110 
    vnic_wq_free(wq);
    #line 111 
    return err;
  }
  #line 114 
  return 0;
}

#line 117  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/vnic_wq.c"
int enic_wq_devcmd2_alloc(struct vnic_dev *vdev, struct vnic_wq *wq, unsigned int desc_count, unsigned int desc_size)
{
  #line 120 
  int err;
  #line 122 
  wq->index = 0U;
  #line 123 
  wq->vdev = vdev;
  #line 125 
  wq->ctrl = (struct vnic_wq_ctrl *)vnic_dev_get_res(vdev,(enum vnic_res_type)RES_TYPE_DEVCMD2,0U);
  #line 126 
  if (wq->ctrl == (struct vnic_wq_ctrl *)0) 
                                            #line 127 
                                            return -22;
  #line 128 
  vnic_wq_disable(wq);
  #line 129 
  err = vnic_dev_alloc_desc_ring(vdev,& wq->ring,desc_count,desc_size);
  #line 131 
  return err;
}

#line 134  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/vnic_wq.c"
void enic_wq_init_start(struct vnic_wq *wq, unsigned int cq_index, unsigned int fetch_index, unsigned int posted_index, unsigned int error_interrupt_enable, unsigned int error_interrupt_offset)
{
  #line 139 
  u64 paddr;
  #line 153 
  unsigned int tmp_0;
  #line 154 
  unsigned int tmp_1;
  #line 140 
  unsigned int count = wq->ring.desc_count;
  #line 142 
  paddr = wq->ring.base_addr;
  #line 143 
  writeq(paddr,(void *)(& (wq->ctrl)->ring_base));
  #line 144 
  iowrite32(count,(void *)(& (wq->ctrl)->ring_size));
  #line 145 
  iowrite32(fetch_index,(void *)(& (wq->ctrl)->fetch_index));
  #line 146 
  iowrite32(posted_index,(void *)(& (wq->ctrl)->posted_index));
  #line 147 
  iowrite32(cq_index,(void *)(& (wq->ctrl)->cq_index));
  #line 148 
  iowrite32(error_interrupt_enable,(void *)(& (wq->ctrl)->error_interrupt_enable));
  #line 149 
  iowrite32(error_interrupt_offset,(void *)(& (wq->ctrl)->error_interrupt_offset));
  #line 150 
  iowrite32(0U,(void *)(& (wq->ctrl)->error_status));
  #line 153 
  if (count <= 63U) 
                    #line 153 
                    tmp_0 = 32U; else 
                                      #line 153 
                                      tmp_0 = 64U;
  #line 154 
  if (count <= 63U) 
                    #line 154 
                    tmp_1 = 32U; else 
                                      #line 154 
                                      tmp_1 = 64U;
  #line 152 
  wq->to_clean = (wq->bufs[fetch_index / tmp_0] + (unsigned long)(fetch_index % tmp_1));
  #line 152 
  wq->to_use = (wq->bufs[fetch_index / tmp_0] + (unsigned long)(fetch_index % tmp_1));
  #line 155 
  return;
}

#line 157  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/vnic_wq.c"
void vnic_wq_init(struct vnic_wq *wq, unsigned int cq_index, unsigned int error_interrupt_enable, unsigned int error_interrupt_offset)
{
  #line 161 
  enic_wq_init_start(wq,cq_index,0U,0U,error_interrupt_enable,error_interrupt_offset);
  #line 162 
  return;
}

#line 166  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/vnic_wq.c"
unsigned int vnic_wq_error_status(struct vnic_wq *wq)
{
  #line 168 
  return ioread32((void *)(& (wq->ctrl)->error_status));
}

#line 171  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/vnic_wq.c"
void vnic_wq_enable(struct vnic_wq *wq)
{
  #line 173 
  iowrite32(1U,(void *)(& (wq->ctrl)->enable));
  #line 174 
  return;
}

#line 176  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/vnic_wq.c"
int vnic_wq_disable(struct vnic_wq *wq)
{
  #line 178 
  unsigned int wait;
  #line 179 
  struct vnic_dev *vdev = wq->vdev;
  #line 181 
  iowrite32(0U,(void *)(& (wq->ctrl)->enable));
  #line 184 
  wait = 0U;
  #line 184 
  while (wait <= 999U) {
    {
      #line 185 
      if (ioread32((void *)(& (wq->ctrl)->running)) == 0U) 
                                                           #line 186 
                                                           return 0;
      #line 187 
      __const_udelay(42950UL);
    }
    #line 184 
    wait ++;
  }
  #line 190 
  ;
  #line 190 
  netdev_err(vnic_get_netdev(vdev),(char *)"Failed to disable WQ[%d]\n",wq->index);
  #line 192 
  return -110;
}

#line 195  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/vnic_wq.c"
void vnic_wq_clean(struct vnic_wq *wq, void (*buf_clean)(struct vnic_wq *, struct vnic_wq_buf *))
{
  #line 198 
  struct vnic_wq_buf *buf;
  #line 200 
  buf = wq->to_clean;
  #line 202 
  while (1) {
    #line 202 
    if (! (vnic_wq_desc_used(wq) != 0U)) 
                                         #line 202 
                                         break;
    {
      #line 204 
      (*buf_clean)(wq,buf);
      #line 206 
      wq->to_clean = (buf->next);
      #line 206 
      buf = (buf->next);
      #line 207 
      (wq->ring.desc_avail) ++;
    }
  }
  #line 210 
  wq->to_clean = (wq->bufs[0]);
  #line 210 
  wq->to_use = (wq->bufs[0]);
  #line 212 
  iowrite32(0U,(void *)(& (wq->ctrl)->fetch_index));
  #line 213 
  iowrite32(0U,(void *)(& (wq->ctrl)->posted_index));
  #line 214 
  iowrite32(0U,(void *)(& (wq->ctrl)->error_status));
  #line 216 
  vnic_dev_clear_desc_ring(& wq->ring);
  #line 217 
  return;
}

#line 476  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cisco/enic/enic.ko/concurrency safety/0/concurrency safety/weaver/vnic_wq.i.aux"
static void *kzalloc(size_t size, gfp_t flags)
{
  #line 479 
  return ldv_kzalloc(size,flags);
}

#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kasan-checks.h"
__inline static bool kasan_check_read(void *p, unsigned int size)
{
  #line 36 
  return (_Bool)1;
}

#line 66  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/bitops.h"
__inline static void arch___set_bit(long nr, unsigned long *addr)
{
  #line 68 
  ldv_inline_asm();
  #line 69 
  return;
}

#line 204  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/bitops.h"
__inline static bool constant_test_bit(long nr, unsigned long *addr)
{
  #line 207 
  return (_Bool)(((*(addr + (unsigned long)(nr >> 6)) >> (nr & 63L)) & 1UL) != 0UL);
}

#line 210  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/bitops.h"
__inline static bool variable_test_bit(long nr, unsigned long *addr)
{
  #line 212 
  bool oldbit;
  #line 213 
  ldv_inline_asm();
  #line 219 
  return oldbit;
}

#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bitops/instrumented-non-atomic.h"
__inline static void __set_bit(long nr, unsigned long *addr)
{
  #line 27 
  kasan_check_read((void *)(addr + (unsigned long)(nr / 64L)),8U);
  #line 28 
  arch___set_bit(nr,addr);
  #line 29 
  return;
}

#line 108  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bitops/instrumented-non-atomic.h"
__inline static bool test_bit(long nr, unsigned long *addr)
{
  #line 111 
  int tmp_1;
  #line 110 
  kasan_check_read((void *)(addr + (unsigned long)(nr / 64L)),8U);
  #line 111 
  if (0 != 0) {
    #line 111 
    tmp_1 = (int)constant_test_bit(nr,addr) != 0;
  }
  else {
    #line 111 
    tmp_1 = (int)variable_test_bit(nr,addr) != 0;
  }
  #line 111 
  return (_Bool)(tmp_1 != 0);
}

#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/string_64.h"
#line 14 
void *memcpy(void *, void *, size_t);
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/string.h"
#line 29 
size_t strlcpy(char *, char *, size_t);
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_api_smp.h"
#line 28 
void _raw_spin_lock_bh(raw_spinlock_t *);
#line 40 
#line 40 
void _raw_spin_unlock_bh(raw_spinlock_t *);
#line 341  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static void spin_lock_bh(spinlock_t *lock)
{
  #line 343 
  _raw_spin_lock_bh(& lock->__anonCompField_spinlock_25.rlock);
  #line 344 
  return;
}

#line 345 
#line 757  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cisco/enic/enic.ko/concurrency safety/0/concurrency safety/weaver/enic_ethtool.i.aux"
static void cif_spin_lock_bh_devcmd_lock_of_enic(spinlock_t *lock);
#line 345  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
#line 775  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cisco/enic/enic.ko/concurrency safety/0/concurrency safety/weaver/enic_ethtool.i.aux"
static void cif_spin_lock_bh_lock_of_enic_rfs_flw_tbl(spinlock_t *lock);
#line 381  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static void spin_unlock_bh(spinlock_t *lock)
{
  #line 383 
  _raw_spin_unlock_bh(& lock->__anonCompField_spinlock_25.rlock);
  #line 384 
  return;
}

#line 385 
#line 766  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cisco/enic/enic.ko/concurrency safety/0/concurrency safety/weaver/enic_ethtool.i.aux"
static void cif_spin_unlock_bh_devcmd_lock_of_enic(spinlock_t *lock);
#line 385  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
#line 784  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cisco/enic/enic.ko/concurrency safety/0/concurrency safety/weaver/enic_ethtool.i.aux"
static void cif_spin_unlock_bh_lock_of_enic_rfs_flw_tbl(spinlock_t *lock);
#line 40 
#line 40 
void ldv_spin_model_lock(char *);
#line 41 
#line 41 
void ldv_spin_model_unlock(char *);
#line 89  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject.h"
__inline static char *kobject_name(struct kobject *kobj)
{
  #line 91 
  return kobj->name;
}

#line 1370  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
__inline static char *dev_name(struct device *dev)
{
  #line 1373 
  if (dev->init_name != (char *)0) 
                                   #line 1374 
                                   return dev->init_name;
  #line 1376 
  return kobject_name(& dev->kobj);
}

#line 301  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow_dissector.h"
#line 301 
__be32 flow_get_u32_src(struct flow_keys *);
#line 302 
#line 302 
__be32 flow_get_u32_dst(struct flow_keys *);
#line 86  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ethtool.h"
#line 86 
u32 ethtool_op_get_link(struct net_device *);
#line 2203  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void *netdev_priv(struct net_device *dev)
{
  #line 2205 
  return (void *)((char *)dev + 3328UL);
}

#line 2657 
#line 2657 
int dev_open(struct net_device *, struct netlink_ext_ack *);
#line 2658 
#line 2658 
void dev_close(struct net_device *);
#line 3387  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static bool netif_running(struct net_device *dev)
{
  #line 3389 
  return test_bit(0L,& dev->state);
}

#line 3803  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static bool netif_carrier_ok(struct net_device *dev)
{
  #line 3805 
  int tmp_0;
  #line 3805 
  if ((int)test_bit(2L,& dev->state) != 0) 
                                           #line 3805 
                                           tmp_0 = 0; else 
                                                           #line 3805 
                                                           tmp_0 = 1;
  #line 3805 
  return (_Bool)(tmp_0 != 0);
}

#line 4756 
#line 4756 
void netdev_info(struct net_device *, char * , ...);
#line 1843  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
__inline static char *pci_name(struct pci_dev *pdev)
{
  #line 1845 
  return dev_name(& pdev->dev);
}

#line 145  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/vnic_dev.h"
#line 145 
u32 vnic_dev_port_speed(struct vnic_dev *vdev);
#line 163 
#line 163 
enum vnic_dev_intr_mode vnic_dev_get_intr_mode(struct vnic_dev *vdev);
#line 166 
#line 166 
u32 vnic_dev_get_intr_coal_timer_max(struct vnic_dev *vdev);
#line 187 
#line 187 
int vnic_dev_capable_rss_hash_type(struct vnic_dev *vdev, u8 *rss_hash_type);
#line 149  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/enic_res.h"
#line 149 
void enic_init_vnic_resources(struct enic *enic);
#line 150 
#line 150 
int enic_alloc_vnic_resources(struct enic *enic);
#line 151 
#line 151 
void enic_free_vnic_resources(struct enic *enic);
#line 107  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/vnic_intr.h"
#line 107 
void vnic_intr_coalescing_timer_set(struct vnic_intr *intr, u32 coalescing_timer);
#line 233  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/enic.h"
__inline static unsigned int enic_cq_rq(struct enic *enic, unsigned int rq)
{
  #line 235 
  return rq;
}

#line 238  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/enic.h"
__inline static unsigned int enic_cq_wq(struct enic *enic, unsigned int wq)
{
  #line 240 
  return enic->rq_count + wq;
}

#line 258  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/enic.h"
__inline static unsigned int enic_msix_rq_intr(struct enic *enic, unsigned int rq)
{
  #line 261 
  ;
  #line 261 
  return enic->cq[enic_cq_rq(enic,rq)].interrupt_offset;
}

#line 264  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/enic.h"
__inline static unsigned int enic_msix_wq_intr(struct enic *enic, unsigned int wq)
{
  #line 267 
  ;
  #line 267 
  return enic->cq[enic_cq_wq(enic,wq)].interrupt_offset;
}

#line 323 
#line 660  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/enic_ethtool.c"
void enic_set_ethtool_ops(struct net_device *netdev);
#line 324  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/enic.h"
#line 324 
int __enic_set_rsskey(struct enic *enic);
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/enic_dev.h"
#line 42 
int enic_dev_fw_info(struct enic *enic, struct vnic_devcmd_fw_info **fw_info);
#line 43 
#line 43 
int enic_dev_stats_dump(struct enic *enic, struct vnic_stats **vstats);
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/enic_clsf.h"
#line 14 
struct enic_rfs_fltr_node *htbl_fltr_search(struct enic *enic, u16 fltr_id);
#line 50  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/enic_ethtool.c"
static struct enic_stat enic_tx_stats[11U] = {{.name = {(char)'t', (char)'x', (char)'_', (char)'f', (char)'r', (char)'a', (char)'m', (char)'e', (char)'s', (char)'_', (char)'o', (char)'k'}}, {.name = {(char)'t', (char)'x', (char)'_', (char)'u', (char)'n', (char)'i', (char)'c', (char)'a', (char)'s', (char)'t', (char)'_', (char)'f', (char)'r', (char)'a', (char)'m', (char)'e', (char)'s', (char)'_', (char)'o', (char)'k'}, .index = 1U}, {.name = {(char)'t', (char)'x', (char)'_', (char)'m', (char)'u', (char)'l', (char)'t', (char)'i', (char)'c', (char)'a', (char)'s', (char)'t', (char)'_', (char)'f', (char)'r', (char)'a', (char)'m', (char)'e', (char)'s', (char)'_', (char)'o', (char)'k'}, .index = 2U}, {.name = {(char)'t', (char)'x', (char)'_', (char)'b', (char)'r', (char)'o', (char)'a', (char)'d', (char)'c', (char)'a', (char)'s', (char)'t', (char)'_', (char)'f', (char)'r', (char)'a', (char)'m', (char)'e', (char)'s', (char)'_', (char)'o', (char)'k'}, .index = 3U}, {.name = {(char)'t', (char)'x', (char)'_', (char)'b', (char)'y', (char)'t', (char)'e', (char)'s', (char)'_', (char)'o', (char)'k'}, .index = 4U}, {.name = {(char)'t', (char)'x', (char)'_', (char)'u', (char)'n', (char)'i', (char)'c', (char)'a', (char)'s', (char)'t', (char)'_', (char)'b', (char)'y', (char)'t', (char)'e', (char)'s', (char)'_', (char)'o', (char)'k'}, .index = 5U}, {.name = {(char)'t', (char)'x', (char)'_', (char)'m', (char)'u', (char)'l', (char)'t', (char)'i', (char)'c', (char)'a', (char)'s', (char)'t', (char)'_', (char)'b', (char)'y', (char)'t', (char)'e', (char)'s', (char)'_', (char)'o', (char)'k'}, .index = 6U}, {.name = {(char)'t', (char)'x', (char)'_', (char)'b', (char)'r', (char)'o', (char)'a', (char)'d', (char)'c', (char)'a', (char)'s', (char)'t', (char)'_', (char)'b', (char)'y', (char)'t', (char)'e', (char)'s', (char)'_', (char)'o', (char)'k'}, .index = 7U}, {.name = {(char)'t', (char)'x', (char)'_', (char)'d', (char)'r', (char)'o', (char)'p', (char)'s'}, .index = 8U}, {.name = {(char)'t', (char)'x', (char)'_', (char)'e', (char)'r', (char)'r', (char)'o', (char)'r', (char)'s'}, .index = 9U}, {.name = {(char)'t', (char)'x', (char)'_', (char)'t', (char)'s', (char)'o'}, .index = 10U}};
#line 64  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/enic_ethtool.c"
static struct enic_stat enic_rx_stats[21U] = {{.name = {(char)'r', (char)'x', (char)'_', (char)'f', (char)'r', (char)'a', (char)'m', (char)'e', (char)'s', (char)'_', (char)'o', (char)'k'}}, {.name = {(char)'r', (char)'x', (char)'_', (char)'f', (char)'r', (char)'a', (char)'m', (char)'e', (char)'s', (char)'_', (char)'t', (char)'o', (char)'t', (char)'a', (char)'l'}, .index = 1U}, {.name = {(char)'r', (char)'x', (char)'_', (char)'u', (char)'n', (char)'i', (char)'c', (char)'a', (char)'s', (char)'t', (char)'_', (char)'f', (char)'r', (char)'a', (char)'m', (char)'e', (char)'s', (char)'_', (char)'o', (char)'k'}, .index = 2U}, {.name = {(char)'r', (char)'x', (char)'_', (char)'m', (char)'u', (char)'l', (char)'t', (char)'i', (char)'c', (char)'a', (char)'s', (char)'t', (char)'_', (char)'f', (char)'r', (char)'a', (char)'m', (char)'e', (char)'s', (char)'_', (char)'o', (char)'k'}, .index = 3U}, {.name = {(char)'r', (char)'x', (char)'_', (char)'b', (char)'r', (char)'o', (char)'a', (char)'d', (char)'c', (char)'a', (char)'s', (char)'t', (char)'_', (char)'f', (char)'r', (char)'a', (char)'m', (char)'e', (char)'s', (char)'_', (char)'o', (char)'k'}, .index = 4U}, {.name = {(char)'r', (char)'x', (char)'_', (char)'b', (char)'y', (char)'t', (char)'e', (char)'s', (char)'_', (char)'o', (char)'k'}, .index = 5U}, {.name = {(char)'r', (char)'x', (char)'_', (char)'u', (char)'n', (char)'i', (char)'c', (char)'a', (char)'s', (char)'t', (char)'_', (char)'b', (char)'y', (char)'t', (char)'e', (char)'s', (char)'_', (char)'o', (char)'k'}, .index = 6U}, {.name = {(char)'r', (char)'x', (char)'_', (char)'m', (char)'u', (char)'l', (char)'t', (char)'i', (char)'c', (char)'a', (char)'s', (char)'t', (char)'_', (char)'b', (char)'y', (char)'t', (char)'e', (char)'s', (char)'_', (char)'o', (char)'k'}, .index = 7U}, {.name = {(char)'r', (char)'x', (char)'_', (char)'b', (char)'r', (char)'o', (char)'a', (char)'d', (char)'c', (char)'a', (char)'s', (char)'t', (char)'_', (char)'b', (char)'y', (char)'t', (char)'e', (char)'s', (char)'_', (char)'o', (char)'k'}, .index = 8U}, {.name = {(char)'r', (char)'x', (char)'_', (char)'d', (char)'r', (char)'o', (char)'p'}, .index = 9U}, {.name = {(char)'r', (char)'x', (char)'_', (char)'n', (char)'o', (char)'_', (char)'b', (char)'u', (char)'f', (char)'s'}, .index = 10U}, {.name = {(char)'r', (char)'x', (char)'_', (char)'e', (char)'r', (char)'r', (char)'o', (char)'r', (char)'s'}, .index = 11U}, {.name = {(char)'r', (char)'x', (char)'_', (char)'r', (char)'s', (char)'s'}, .index = 12U}, {.name = {(char)'r', (char)'x', (char)'_', (char)'c', (char)'r', (char)'c', (char)'_', (char)'e', (char)'r', (char)'r', (char)'o', (char)'r', (char)'s'}, .index = 13U}, {.name = {(char)'r', (char)'x', (char)'_', (char)'f', (char)'r', (char)'a', (char)'m', (char)'e', (char)'s', (char)'_', (char)'6', (char)'4'}, .index = 14U}, {.name = {(char)'r', (char)'x', (char)'_', (char)'f', (char)'r', (char)'a', (char)'m', (char)'e', (char)'s', (char)'_', (char)'1', (char)'2', (char)'7'}, .index = 15U}, {.name = {(char)'r', (char)'x', (char)'_', (char)'f', (char)'r', (char)'a', (char)'m', (char)'e', (char)'s', (char)'_', (char)'2', (char)'5', (char)'5'}, .index = 16U}, {.name = {(char)'r', (char)'x', (char)'_', (char)'f', (char)'r', (char)'a', (char)'m', (char)'e', (char)'s', (char)'_', (char)'5', (char)'1', (char)'1'}, .index = 17U}, {.name = {(char)'r', (char)'x', (char)'_', (char)'f', (char)'r', (char)'a', (char)'m', (char)'e', (char)'s', (char)'_', (char)'1', (char)'0', (char)'2', (char)'3'}, .index = 18U}, {.name = {(char)'r', (char)'x', (char)'_', (char)'f', (char)'r', (char)'a', (char)'m', (char)'e', (char)'s', (char)'_', (char)'1', (char)'5', (char)'1', (char)'8'}, .index = 19U}, {.name = {(char)'r', (char)'x', (char)'_', (char)'f', (char)'r', (char)'a', (char)'m', (char)'e', (char)'s', (char)'_', (char)'t', (char)'o', (char)'_', (char)'m', (char)'a', (char)'x'}, .index = 20U}};
#line 88  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/enic_ethtool.c"
static struct enic_stat enic_gen_stats[1U] = {{.name = {(char)'d', (char)'m', (char)'a', (char)'_', (char)'m', (char)'a', (char)'p', (char)'_', (char)'e', (char)'r', (char)'r', (char)'o', (char)'r'}}};
#line 96  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/enic_ethtool.c"
static void enic_intr_coal_set_rx(struct enic *enic, u32 timer)
{
  #line 98 
  int i;
  #line 99 
  int intr;
  #line 101 
  i = 0;
  #line 101 
  while (enic->rq_count > (unsigned int)i) {
    {
      #line 102 
      intr = (int)enic_msix_rq_intr(enic,(unsigned int)i);
      #line 103 
      vnic_intr_coalescing_timer_set(& enic->intr[intr],timer);
    }
    #line 101 
    i ++;
  }
  #line 105 
  return;
}

#line 107  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/enic_ethtool.c"
static int enic_get_ksettings(struct net_device *netdev, struct ethtool_link_ksettings *ecmd)
{
  #line 110 
  struct enic *enic = netdev_priv(netdev);
  #line 111 
  struct ethtool_link_settings *base = & ecmd->base;
  #line 113 
  __set_bit(12L,(unsigned long *)(& ecmd->link_modes.supported));
  #line 115 
  __set_bit(10L,(unsigned long *)(& ecmd->link_modes.supported));
  #line 116 
  __set_bit(12L,(unsigned long *)(& ecmd->link_modes.advertising));
  #line 118 
  __set_bit(10L,(unsigned long *)(& ecmd->link_modes.advertising));
  #line 119 
  base->port = (unsigned char)3U;
  #line 121 
  if ((int)netif_carrier_ok(netdev) != 0) {
    #line 122 
    base->speed = vnic_dev_port_speed(enic->vdev);
    #line 123 
    base->duplex = (unsigned char)1U;
  }
  else {
    #line 125 
    base->speed = 4294967295U;
    #line 126 
    base->duplex = (unsigned char)255U;
  }
  #line 129 
  base->autoneg = (unsigned char)0U;
  #line 131 
  return 0;
}

#line 134  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/enic_ethtool.c"
static void enic_get_drvinfo(struct net_device *netdev, struct ethtool_drvinfo *drvinfo)
{
  #line 138 
  struct vnic_devcmd_fw_info *fw_info;
  #line 139 
  int err;
  #line 137 
  struct enic *enic = netdev_priv(netdev);
  #line 141 
  err = enic_dev_fw_info(enic,& fw_info);
  #line 146 
  if (err == -12) 
                  #line 147 
                  return;
  #line 149 
  strlcpy((char *)(& drvinfo->driver),(char *)"enic",32UL);
  #line 150 
  strlcpy((char *)(& drvinfo->version),(char *)"2.3.0.53",32UL);
  #line 151 
  strlcpy((char *)(& drvinfo->fw_version),(char *)(& fw_info->fw_version),32UL);
  #line 153 
  ;
  #line 153 
  strlcpy((char *)(& drvinfo->bus_info),pci_name(enic->pdev),32UL);
  #line 154 
  return;
}

#line 157  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/enic_ethtool.c"
static void enic_get_strings(struct net_device *netdev, u32 stringset, u8 *data)
{
  #line 160 
  unsigned int i;
  #line 162 
  switch (stringset) {
    #line 163 
    case (u32)1: 
                 #line 163 
    ;
    #line 164 
    i = 0U;
    #line 164 
    while (i <= 10U) {
      #line 165 
      memcpy((void *)data,(void *)(& enic_tx_stats[i].name),32UL);
      #line 166 
      data += 32U;
      #line 164 
      i ++;
    }
    #line 168 
    i = 0U;
    #line 168 
    while (i <= 20U) {
      #line 169 
      memcpy((void *)data,(void *)(& enic_rx_stats[i].name),32UL);
      #line 170 
      data += 32U;
      #line 168 
      i ++;
    }
    #line 172 
    i = 0U;
    #line 172 
    while (i == 0U) {
      #line 173 
      memcpy((void *)data,(void *)(& enic_gen_stats[i].name),32UL);
      #line 174 
      data += 32U;
      #line 172 
      i ++;
    }
    #line 176 
    break;
  }
  #line 178 
  return;
}

#line 180  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/enic_ethtool.c"
static void enic_get_ringparam(struct net_device *netdev, struct ethtool_ringparam *ring)
{
  #line 183 
  struct enic *enic = netdev_priv(netdev);
  #line 184 
  struct vnic_enet_config *c = & enic->config;
  #line 186 
  ring->rx_max_pending = 4096U;
  #line 187 
  ring->rx_pending = c->rq_desc_count;
  #line 188 
  ring->tx_max_pending = 4096U;
  #line 189 
  ring->tx_pending = c->wq_desc_count;
  #line 190 
  return;
}

#line 192  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/enic_ethtool.c"
static int enic_set_ringparam(struct net_device *netdev, struct ethtool_ringparam *ring)
{
  #line 198 
  unsigned int rx_pending;
  #line 199 
  unsigned int tx_pending;
  #line 195 
  struct enic *enic = netdev_priv(netdev);
  #line 196 
  struct vnic_enet_config *c = & enic->config;
  #line 197 
  int running = (int)netif_running(netdev);
  #line 200 
  int err = 0;
  #line 202 
  if (ring->rx_mini_max_pending != 0U || ring->rx_mini_pending != 0U) {
    #line 203 
    netdev_info(netdev,(char *)"modifying mini ring params is not supported");
    #line 205 
    return -22;
  }
  #line 207 
  if (ring->rx_jumbo_max_pending != 0U || ring->rx_jumbo_pending != 0U) {
    #line 208 
    netdev_info(netdev,(char *)"modifying jumbo ring params is not supported");
    #line 210 
    return -22;
  }
  #line 212 
  rx_pending = c->rq_desc_count;
  #line 213 
  tx_pending = c->wq_desc_count;
  #line 214 
  if (ring->rx_pending + 4294967232U > 4032U) {
    #line 216 
    netdev_info(netdev,(char *)"rx pending (%u) not in range [%u,%u]",ring->rx_pending,64,4096);
    #line 219 
    return -22;
  }
  #line 221 
  if (ring->tx_pending + 4294967232U > 4032U) {
    #line 223 
    netdev_info(netdev,(char *)"tx pending (%u) not in range [%u,%u]",ring->tx_pending,64,4096);
    #line 226 
    return -22;
  }
  #line 228 
  if (running != 0) 
                    #line 229 
                    dev_close(netdev);
  #line 230 
  c->rq_desc_count = ring->rx_pending & 4294967264U;
  #line 232 
  c->wq_desc_count = ring->tx_pending & 4294967264U;
  #line 234 
  enic_free_vnic_resources(enic);
  #line 235 
  err = enic_alloc_vnic_resources(enic);
  #line 236 
  if (err != 0) {
    #line 237 
    netdev_err(netdev,(char *)"Failed to alloc vNIC resources, aborting\n");
    #line 239 
    enic_free_vnic_resources(enic);
    #line 240 
    goto err_out;
  }
  #line 242 
  enic_init_vnic_resources(enic);
  #line 243 
  if (running != 0) {
    #line 244 
    err = dev_open(netdev,(struct netlink_ext_ack *)0);
    #line 245 
    if (err != 0) 
                  #line 246 
                  goto err_out;
  }
  #line 248 
  return 0;
  #line 249 
  err_out: 
           #line 249 
  ;
  #line 250 
  c->rq_desc_count = rx_pending;
  #line 251 
  c->wq_desc_count = tx_pending;
  #line 252 
  return err;
}

#line 255  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/enic_ethtool.c"
static int enic_get_sset_count(struct net_device *netdev, int sset)
{
  #line 257 
  switch (sset) {
    #line 258 
    case 1: 
            #line 258 
    ;
    #line 259 
    return 33;
    #line 260 
    default: 
             #line 260 
    ;
    #line 261 
    return -95;
  }
}

#line 265  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/enic_ethtool.c"
static void enic_get_ethtool_stats(struct net_device *netdev, struct ethtool_stats *stats, u64 *data)
{
  #line 269 
  struct vnic_stats *vstats;
  #line 270 
  unsigned int i;
  #line 271 
  int err;
  #line 268 
  struct enic *enic = netdev_priv(netdev);
  #line 273 
  err = enic_dev_stats_dump(enic,& vstats);
  #line 278 
  if (err == -12) 
                  #line 279 
                  return;
  #line 281 
  i = 0U;
  #line 281 
  while (i <= 10U) {
    #line 282 
    u64 *tmp_0;
    #line 282 
    tmp_0 = data;
    #line 282 
    data ++;
    #line 282 
    *tmp_0 = *((u64 *)(& vstats->tx) + (unsigned long)enic_tx_stats[i].index);
    #line 281 
    i ++;
  }
  #line 283 
  i = 0U;
  #line 283 
  while (i <= 20U) {
    #line 284 
    u64 *tmp_1;
    #line 284 
    tmp_1 = data;
    #line 284 
    data ++;
    #line 284 
    *tmp_1 = *((u64 *)(& vstats->rx) + (unsigned long)enic_rx_stats[i].index);
    #line 283 
    i ++;
  }
  #line 285 
  i = 0U;
  #line 285 
  while (i == 0U) {
    #line 286 
    u64 *tmp_2;
    #line 286 
    tmp_2 = data;
    #line 286 
    data ++;
    #line 286 
    *tmp_2 = *((u64 *)(& enic->gen_stats) + (unsigned long)enic_gen_stats[i].index);
    #line 285 
    i ++;
  }
  #line 287 
  return;
}

#line 289  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/enic_ethtool.c"
static u32 enic_get_msglevel(struct net_device *netdev)
{
  #line 291 
  struct enic *enic = netdev_priv(netdev);
  #line 292 
  return enic->msg_enable;
}

#line 295  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/enic_ethtool.c"
static void enic_set_msglevel(struct net_device *netdev, u32 value)
{
  #line 297 
  struct enic *enic = netdev_priv(netdev);
  #line 298 
  enic->msg_enable = value;
  #line 299 
  return;
}

#line 301  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/enic_ethtool.c"
static int enic_get_coalesce(struct net_device *netdev, struct ethtool_coalesce *ecmd)
{
  #line 304 
  struct enic *enic = netdev_priv(netdev);
  #line 305 
  struct enic_rx_coal *rxcoal = & enic->rx_coalesce_setting;
  #line 307 
  if (vnic_dev_get_intr_mode(enic->vdev) == (unsigned int)VNIC_DEV_INTR_MODE_MSIX) 
    #line 308 
    ecmd->tx_coalesce_usecs = enic->tx_coalesce_usecs;
  #line 309 
  ecmd->rx_coalesce_usecs = enic->rx_coalesce_usecs;
  #line 310 
  if (rxcoal->use_adaptive_rx_coalesce != 0U) 
                                              #line 311 
                                              ecmd->use_adaptive_rx_coalesce = 1U;
  #line 312 
  ecmd->rx_coalesce_usecs_low = rxcoal->small_pkt_range_start;
  #line 313 
  ecmd->rx_coalesce_usecs_high = rxcoal->range_end;
  #line 315 
  return 0;
}

#line 318  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/enic_ethtool.c"
static int enic_coalesce_valid(struct enic *enic, struct ethtool_coalesce *ec)
{
  #line 322 
  unsigned int tmp_0;
  #line 324 
  unsigned int __UNIQUE_ID___x438;
  #line 324 
  unsigned int tmp_2;
  #line 322 
  unsigned int __UNIQUE_ID___x436;
  #line 321 
  u32 coalesce_usecs_max = vnic_dev_get_intr_coal_timer_max(enic->vdev);
  {
    #line 322 
    __UNIQUE_ID___x436 = coalesce_usecs_max;
    #line 322 
    unsigned int __UNIQUE_ID___y437 = ec->rx_coalesce_usecs_high;
    #line 322 
    if (__UNIQUE_ID___x436 < __UNIQUE_ID___y437) 
                                                 #line 322 
                                                 tmp_0 = __UNIQUE_ID___x436; else 
                                                                    #line 322 
                                                                    tmp_0 = __UNIQUE_ID___y437;
    }
  #line 322 
  u32 rx_coalesce_usecs_high = tmp_0;
  {
    #line 324 
    __UNIQUE_ID___x438 = coalesce_usecs_max;
    #line 324 
    unsigned int __UNIQUE_ID___y439 = ec->rx_coalesce_usecs_low;
    #line 324 
    if (__UNIQUE_ID___x438 < __UNIQUE_ID___y439) 
                                                 #line 324 
                                                 tmp_2 = __UNIQUE_ID___x438; else 
                                                                    #line 324 
                                                                    tmp_2 = __UNIQUE_ID___y439;
    }
  #line 324 
  u32 rx_coalesce_usecs_low = tmp_2;
  #line 327 
  if ((((((((((((((((ec->rx_max_coalesced_frames != 0U || ec->rx_coalesce_usecs_irq != 0U) || ec->rx_max_coalesced_frames_irq != 0U) || ec->tx_max_coalesced_frames != 0U) || ec->tx_coalesce_usecs_irq != 0U) || ec->tx_max_coalesced_frames_irq != 0U) || ec->stats_block_coalesce_usecs != 0U) || ec->use_adaptive_tx_coalesce != 0U) || ec->pkt_rate_low != 0U) || ec->rx_max_coalesced_frames_low != 0U) || ec->tx_coalesce_usecs_low != 0U) || ec->tx_max_coalesced_frames_low != 0U) || ec->pkt_rate_high != 0U) || ec->rx_max_coalesced_frames_high != 0U) || ec->tx_coalesce_usecs_high != 0U) || ec->tx_max_coalesced_frames_high != 0U) || ec->rate_sample_interval != 0U) 
    #line 344 
    return -22;
  #line 346 
  if (vnic_dev_get_intr_mode(enic->vdev) != (unsigned int)VNIC_DEV_INTR_MODE_MSIX) 
    #line 346 
    if (ec->tx_coalesce_usecs != 0U) 
                                     #line 348 
                                     return -22;
  #line 350 
  if (((ec->tx_coalesce_usecs > coalesce_usecs_max || ec->rx_coalesce_usecs > coalesce_usecs_max) || ec->rx_coalesce_usecs_low > coalesce_usecs_max) || ec->rx_coalesce_usecs_high > coalesce_usecs_max) 
    #line 354 
    netdev_info(enic->netdev,(char *)"ethtool_set_coalesce: adaptor supports max coalesce value of %d. Setting max value.\n",coalesce_usecs_max);
  #line 357 
  if (ec->rx_coalesce_usecs_high != 0U && rx_coalesce_usecs_low + 3U > rx_coalesce_usecs_high) 
    #line 360 
    return -22;
  #line 362 
  return 0;
}

#line 365  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/enic_ethtool.c"
static int enic_set_coalesce(struct net_device *netdev, struct ethtool_coalesce *ecmd)
{
  #line 387 
  unsigned int __UNIQUE_ID___x444;
  #line 387 
  unsigned int tmp_4;
  #line 389 
  unsigned int __UNIQUE_ID___x446;
  #line 389 
  unsigned int tmp_6;
  #line 382 
  unsigned int __UNIQUE_ID___x440;
  #line 382 
  unsigned int tmp_0;
  #line 384 
  unsigned int __UNIQUE_ID___x442;
  #line 384 
  unsigned int tmp_2;
  #line 369 
  u32 tx_coalesce_usecs;
  #line 370 
  u32 rx_coalesce_usecs;
  #line 371 
  u32 rx_coalesce_usecs_low;
  #line 372 
  u32 rx_coalesce_usecs_high;
  #line 373 
  u32 coalesce_usecs_max;
  #line 374 
  unsigned int i;
  #line 374 
  unsigned int intr;
  #line 375 
  int ret;
  #line 368 
  struct enic *enic = netdev_priv(netdev);
  #line 376 
  struct enic_rx_coal *rxcoal = & enic->rx_coalesce_setting;
  #line 378 
  ret = enic_coalesce_valid(enic,ecmd);
  #line 379 
  if (ret != 0) 
                #line 380 
                return ret;
  #line 381 
  coalesce_usecs_max = vnic_dev_get_intr_coal_timer_max(enic->vdev);
  {
    #line 382 
    __UNIQUE_ID___x440 = ecmd->tx_coalesce_usecs;
    #line 382 
    unsigned int __UNIQUE_ID___y441 = coalesce_usecs_max;
    #line 382 
    if (__UNIQUE_ID___x440 < __UNIQUE_ID___y441) 
                                                 #line 382 
                                                 tmp_0 = __UNIQUE_ID___x440; else 
                                                                    #line 382 
                                                                    tmp_0 = __UNIQUE_ID___y441;
    }
  #line 382 
  tx_coalesce_usecs = tmp_0;
  {
    #line 384 
    __UNIQUE_ID___x442 = ecmd->rx_coalesce_usecs;
    #line 384 
    unsigned int __UNIQUE_ID___y443 = coalesce_usecs_max;
    #line 384 
    if (__UNIQUE_ID___x442 < __UNIQUE_ID___y443) 
                                                 #line 384 
                                                 tmp_2 = __UNIQUE_ID___x442; else 
                                                                    #line 384 
                                                                    tmp_2 = __UNIQUE_ID___y443;
    }
  #line 384 
  rx_coalesce_usecs = tmp_2;
  {
    #line 387 
    __UNIQUE_ID___x444 = ecmd->rx_coalesce_usecs_low;
    #line 387 
    unsigned int __UNIQUE_ID___y445 = coalesce_usecs_max;
    #line 387 
    if (__UNIQUE_ID___x444 < __UNIQUE_ID___y445) 
                                                 #line 387 
                                                 tmp_4 = __UNIQUE_ID___x444; else 
                                                                    #line 387 
                                                                    tmp_4 = __UNIQUE_ID___y445;
    }
  #line 387 
  rx_coalesce_usecs_low = tmp_4;
  {
    #line 389 
    __UNIQUE_ID___x446 = ecmd->rx_coalesce_usecs_high;
    #line 389 
    unsigned int __UNIQUE_ID___y447 = coalesce_usecs_max;
    #line 389 
    if (__UNIQUE_ID___x446 < __UNIQUE_ID___y447) 
                                                 #line 389 
                                                 tmp_6 = __UNIQUE_ID___x446; else 
                                                                    #line 389 
                                                                    tmp_6 = __UNIQUE_ID___y447;
    }
  #line 389 
  rx_coalesce_usecs_high = tmp_6;
  #line 392 
  if (vnic_dev_get_intr_mode(enic->vdev) == (unsigned int)VNIC_DEV_INTR_MODE_MSIX) {
    #line 393 
    i = 0U;
    #line 393 
    while (enic->wq_count > i) {
      #line 394 
      intr = enic_msix_wq_intr(enic,i);
      #line 395 
      vnic_intr_coalescing_timer_set(& enic->intr[intr],tx_coalesce_usecs);
      #line 393 
      i ++;
    }
    #line 398 
    enic->tx_coalesce_usecs = tx_coalesce_usecs;
  }
  #line 400 
  rxcoal->use_adaptive_rx_coalesce = (unsigned int)(ecmd->use_adaptive_rx_coalesce != 0U);
  #line 401 
  if (rxcoal->use_adaptive_rx_coalesce == 0U) 
                                              #line 402 
                                              enic_intr_coal_set_rx(enic,rx_coalesce_usecs);
  #line 403 
  if (ecmd->rx_coalesce_usecs_high != 0U) {
    #line 404 
    rxcoal->range_end = rx_coalesce_usecs_high;
    #line 405 
    rxcoal->small_pkt_range_start = rx_coalesce_usecs_low;
    #line 406 
    rxcoal->large_pkt_range_start = rx_coalesce_usecs_low + 3U;
  }
  #line 410 
  enic->rx_coalesce_usecs = rx_coalesce_usecs;
  #line 412 
  return 0;
}

#line 415  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/enic_ethtool.c"
static int enic_grxclsrlall(struct enic *enic, struct ethtool_rxnfc *cmd, u32 *rule_locs)
{
  #line 418 
  int j;
  #line 418 
  int ret = 0;
  #line 418 
  int cnt = 0;
  #line 420 
  cmd->data = (unsigned long long)((int)enic->rfs_h.max - enic->rfs_h.free);
  #line 421 
  j = 0;
  #line 421 
  while (j <= 1023) {
    {
      #line 427 
      struct enic_rfs_fltr_node *tmp_1;
      #line 427 
      void *__mptr;
      #line 422 
      struct hlist_head *hhead;
      #line 423 
      struct hlist_node *tmp;
      #line 424 
      struct enic_rfs_fltr_node *n;
      #line 426 
      hhead = & enic->rfs_h.ht_head[j];
      {
        #line 427 
        struct hlist_node *____ptr = hhead->first;
        #line 427 
        if (____ptr != (struct hlist_node *)0) {
          #line 427 
          __mptr = (void *)____ptr;
          #line 427 
          tmp_1 = ((struct enic_rfs_fltr_node *)(__mptr + 18446744073709551536U));
        }
        else 
             #line 427 
             tmp_1 = (struct enic_rfs_fltr_node *)0;
        }
      #line 427 
      n = tmp_1;
      #line 427 
      while (1) {
        #line 427 
        void *__mptr_0;
        #line 427 
        struct enic_rfs_fltr_node *tmp_4;
        #line 427 
        if (n != (struct enic_rfs_fltr_node *)0) {
          #line 427 
          tmp = n->node.next;
          #line 427 
          if (! (1 != 0)) 
                          #line 427 
                          break;
        }
        else 
             #line 427 
             break;
        #line 428 
        if (cmd->__anonCompField_ethtool_rxnfc_100.rule_cnt == (unsigned int)cnt) 
          #line 429 
          return -90;
        #line 430 
        *(rule_locs + (unsigned long)cnt) = (unsigned int)n->fltr_id;
        #line 431 
        cnt ++;
        {
          #line 427 
          struct hlist_node *____ptr_0 = tmp;
          #line 427 
          if (____ptr_0 != (struct hlist_node *)0) {
            #line 427 
            __mptr_0 = (void *)____ptr_0;
            #line 427 
            tmp_4 = ((struct enic_rfs_fltr_node *)(__mptr_0 + 18446744073709551536U));
          }
          else 
               #line 427 
               tmp_4 = (struct enic_rfs_fltr_node *)0;
          }
        #line 427 
        n = tmp_4;
      }
    }
    #line 421 
    j ++;
  }
  #line 434 
  cmd->__anonCompField_ethtool_rxnfc_100.rule_cnt = (unsigned int)cnt;
  #line 436 
  return ret;
}

#line 439  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/enic_ethtool.c"
static int enic_grxclsrule(struct enic *enic, struct ethtool_rxnfc *cmd)
{
  #line 443 
  struct enic_rfs_fltr_node *n;
  #line 441 
  struct ethtool_rx_flow_spec *fsp = & cmd->fs;
  #line 445 
  n = htbl_fltr_search(enic,(unsigned short)((int)((unsigned short)fsp->location)));
  #line 446 
  if (n == (struct enic_rfs_fltr_node *)0) 
                                           #line 447 
                                           return -22;
  #line 448 
  switch ((int)n->keys.basic.ip_proto) {
    #line 449 
    case 6: 
            #line 449 
    ;
    #line 450 
    fsp->flow_type = 1U;
    #line 451 
    break;
    #line 452 
    case 17: 
             #line 452 
    ;
    #line 453 
    fsp->flow_type = 2U;
    #line 454 
    break;
    #line 455 
    default: 
             #line 455 
    ;
    #line 456 
    return -22;
  }
  #line 460 
  fsp->h_u.tcp_ip4_spec.ip4src = flow_get_u32_src(& n->keys);
  #line 461 
  fsp->m_u.tcp_ip4_spec.ip4src = 4294967295U;
  #line 463 
  fsp->h_u.tcp_ip4_spec.ip4dst = flow_get_u32_dst(& n->keys);
  #line 464 
  fsp->m_u.tcp_ip4_spec.ip4dst = 4294967295U;
  #line 466 
  fsp->h_u.tcp_ip4_spec.psrc = n->keys.ports.__anonCompField_flow_dissector_key_ports_78.__anonCompField___anonunion_1203_77.src;
  #line 467 
  fsp->m_u.tcp_ip4_spec.psrc = (unsigned short)65535U;
  #line 469 
  fsp->h_u.tcp_ip4_spec.pdst = n->keys.ports.__anonCompField_flow_dissector_key_ports_78.__anonCompField___anonunion_1203_77.dst;
  #line 470 
  fsp->m_u.tcp_ip4_spec.pdst = (unsigned short)65535U;
  #line 472 
  fsp->ring_cookie = (unsigned long long)n->rq_id;
  #line 474 
  return 0;
}

#line 477  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/enic_ethtool.c"
static int enic_get_rx_flow_hash(struct enic *enic, struct ethtool_rxnfc *cmd)
{
  #line 479 
  u8 rss_hash_type = (unsigned char)0U;
  #line 480 
  cmd->data = 0ULL;
  #line 482 
  cif_spin_lock_bh_devcmd_lock_of_enic(& enic->devcmd_lock);
  #line 483 
  vnic_dev_capable_rss_hash_type(enic->vdev,& rss_hash_type);
  #line 484 
  cif_spin_unlock_bh_devcmd_lock_of_enic(& enic->devcmd_lock);
  #line 485 
  switch (cmd->flow_type) {
    #line 486 
    case (__u32)5: 
                   #line 486 
    ;
    #line 487 
    case (__u32)1: 
                   #line 487 
    ;
    #line 488 
    cmd->data |= 240ULL;
    #line 490 
    break;
    #line 491 
    case (__u32)6: 
                   #line 491 
    ;
    #line 492 
    cmd->data |= 48ULL;
    #line 493 
    if (((int)rss_hash_type & 128) != 0) 
                                         #line 494 
                                         cmd->data |= 192ULL;
    #line 495 
    break;
    #line 496 
    case (__u32)2: 
                   #line 496 
    ;
    #line 497 
    cmd->data |= 48ULL;
    #line 498 
    if (((int)rss_hash_type & 1) != 0) 
                                       #line 499 
                                       cmd->data |= 192ULL;
    #line 500 
    break;
    #line 501 
    case (__u32)3: 
                   #line 501 
    ;
    #line 502 
    case (__u32)4: 
                   #line 502 
    ;
    #line 503 
    case (__u32)9: 
                   #line 503 
    ;
    #line 504 
    case (__u32)10: 
                    #line 504 
    ;
    #line 505 
    case (__u32)7: 
                   #line 505 
    ;
    #line 506 
    case (__u32)8: 
                   #line 506 
    ;
    #line 507 
    case (__u32)11: 
                    #line 507 
    ;
    #line 508 
    case (__u32)12: 
                    #line 508 
    ;
    #line 509 
    case (__u32)16: 
                    #line 509 
    ;
    #line 510 
    case (__u32)17: 
                    #line 510 
    ;
    #line 511 
    cmd->data |= 48ULL;
    #line 512 
    break;
    #line 513 
    default: 
             #line 513 
    ;
    #line 514 
    return -22;
  }
  #line 517 
  return 0;
}

#line 520  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/enic_ethtool.c"
static int enic_get_rxnfc(struct net_device *dev, struct ethtool_rxnfc *cmd, u32 *rule_locs)
{
  #line 523 
  struct enic *enic = netdev_priv(dev);
  #line 524 
  int ret = 0;
  #line 526 
  switch (cmd->cmd) {
    #line 527 
    case (__u32)45: 
                    #line 527 
    ;
    #line 528 
    cmd->data = (unsigned long long)enic->rq_count;
    #line 529 
    break;
    #line 530 
    case (__u32)46: 
                    #line 530 
    ;
    #line 531 
    cif_spin_lock_bh_lock_of_enic_rfs_flw_tbl(& enic->rfs_h.lock);
    #line 532 
    cmd->__anonCompField_ethtool_rxnfc_100.rule_cnt = (unsigned int)((int)enic->rfs_h.max - enic->rfs_h.free);
    #line 533 
    cmd->data = (unsigned long long)enic->rfs_h.max;
    #line 534 
    cif_spin_unlock_bh_lock_of_enic_rfs_flw_tbl(& enic->rfs_h.lock);
    #line 535 
    break;
    #line 536 
    case (__u32)48: 
                    #line 536 
    ;
    #line 537 
    cif_spin_lock_bh_lock_of_enic_rfs_flw_tbl(& enic->rfs_h.lock);
    #line 538 
    ret = enic_grxclsrlall(enic,cmd,rule_locs);
    #line 539 
    cif_spin_unlock_bh_lock_of_enic_rfs_flw_tbl(& enic->rfs_h.lock);
    #line 540 
    break;
    #line 541 
    case (__u32)47: 
                    #line 541 
    ;
    #line 542 
    cif_spin_lock_bh_lock_of_enic_rfs_flw_tbl(& enic->rfs_h.lock);
    #line 543 
    ret = enic_grxclsrule(enic,cmd);
    #line 544 
    cif_spin_unlock_bh_lock_of_enic_rfs_flw_tbl(& enic->rfs_h.lock);
    #line 545 
    break;
    #line 546 
    case (__u32)41: 
                    #line 546 
    ;
    #line 547 
    ret = enic_get_rx_flow_hash(enic,cmd);
    #line 548 
    break;
    #line 549 
    default: 
             #line 549 
    ;
    #line 550 
    ret = -95;
    #line 551 
    break;
  }
  #line 554 
  return ret;
}

#line 557  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/enic_ethtool.c"
static int enic_get_tunable(struct net_device *dev, struct ethtool_tunable *tuna, void *data)
{
  #line 560 
  struct enic *enic = netdev_priv(dev);
  #line 561 
  int ret = 0;
  #line 563 
  switch (tuna->id) {
    #line 564 
    case (__u32)1: 
                   #line 564 
    ;
    #line 565 
    *((u32 *)data) = enic->rx_copybreak;
    #line 566 
    break;
    #line 567 
    default: 
             #line 567 
    ;
    #line 568 
    ret = -22;
    #line 569 
    break;
  }
  #line 572 
  return ret;
}

#line 575  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/enic_ethtool.c"
static int enic_set_tunable(struct net_device *dev, struct ethtool_tunable *tuna, void *data)
{
  #line 579 
  struct enic *enic = netdev_priv(dev);
  #line 580 
  int ret = 0;
  #line 582 
  switch (tuna->id) {
    #line 583 
    case (__u32)1: 
                   #line 583 
    ;
    #line 584 
    enic->rx_copybreak = *((u32 *)data);
    #line 585 
    break;
    #line 586 
    default: 
             #line 586 
    ;
    #line 587 
    ret = -22;
    #line 588 
    break;
  }
  #line 591 
  return ret;
}

#line 594  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/enic_ethtool.c"
static u32 enic_get_rxfh_key_size(struct net_device *netdev)
{
  #line 596 
  return 40U;
}

#line 599  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/enic_ethtool.c"
static int enic_get_rxfh(struct net_device *netdev, u32 *indir, u8 *hkey, u8 *hfunc)
{
  #line 602 
  struct enic *enic = netdev_priv(netdev);
  #line 604 
  if (hkey != (u8 *)0U) 
                        #line 605 
                        memcpy((void *)hkey,(void *)(& enic->rss_key),40UL);
  #line 607 
  if (hfunc != (u8 *)0U) 
                         #line 608 
                         *hfunc = (unsigned char)1U;
  #line 610 
  return 0;
}

#line 613  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/enic_ethtool.c"
static int enic_set_rxfh(struct net_device *netdev, u32 *indir, u8 *hkey, u8 hfunc)
{
  #line 616 
  struct enic *enic = netdev_priv(netdev);
  #line 618 
  if ((unsigned int)hfunc > 1U || indir != (u32 *)0U) 
                                                      #line 620 
                                                      return -22;
  #line 622 
  if (hkey != (u8 *)0U) 
                        #line 623 
                        memcpy((void *)(& enic->rss_key),(void *)hkey,40UL);
  #line 625 
  return __enic_set_rsskey(enic);
}

#line 628  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/enic_ethtool.c"
static int enic_get_ts_info(struct net_device *netdev, struct ethtool_ts_info *info)
{
  #line 631 
  info->so_timestamping = 26U;
  #line 635 
  return 0;
}

#line 638  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/enic_ethtool.c"
static struct ethtool_ops enic_ethtool_ops = {.get_drvinfo = & enic_get_drvinfo, .get_msglevel = & enic_get_msglevel, .set_msglevel = & enic_set_msglevel, .get_link = & ethtool_op_get_link, .get_coalesce = & enic_get_coalesce, .set_coalesce = & enic_set_coalesce, .get_ringparam = & enic_get_ringparam, .set_ringparam = & enic_set_ringparam, .get_strings = & enic_get_strings, .get_ethtool_stats = & enic_get_ethtool_stats, .get_sset_count = & enic_get_sset_count, .get_rxnfc = & enic_get_rxnfc, .get_rxfh_key_size = & enic_get_rxfh_key_size, .get_rxfh = & enic_get_rxfh, .set_rxfh = & enic_set_rxfh, .get_ts_info = & enic_get_ts_info, .get_tunable = & enic_get_tunable, .set_tunable = & enic_set_tunable, .get_link_ksettings = & enic_get_ksettings};
#line 660  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/enic_ethtool.c"
void enic_set_ethtool_ops(struct net_device *netdev)
{
  #line 662 
  netdev->ethtool_ops = & enic_ethtool_ops;
  #line 663 
  return;
}

#line 106  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cisco/enic/enic.ko/concurrency safety/0/concurrency safety/weaver/enic_ethtool.i.aux"
int emg_wrapper_enic_get_coalesce(struct net_device *arg0, struct ethtool_coalesce *arg1)
{
  #line 107 
  return enic_get_coalesce(arg0,arg1);
}

#line 111  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cisco/enic/enic.ko/concurrency safety/0/concurrency safety/weaver/enic_ethtool.i.aux"
void emg_wrapper_enic_get_drvinfo(struct net_device *arg0, struct ethtool_drvinfo *arg1)
{
  #line 112 
  enic_get_drvinfo(arg0,arg1);
  #line 113 
  return;
}

#line 116  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cisco/enic/enic.ko/concurrency safety/0/concurrency safety/weaver/enic_ethtool.i.aux"
void emg_wrapper_enic_get_ethtool_stats(struct net_device *arg0, struct ethtool_stats *arg1, unsigned long long *arg2)
{
  #line 117 
  enic_get_ethtool_stats(arg0,arg1,arg2);
  #line 118 
  return;
}

#line 121  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cisco/enic/enic.ko/concurrency safety/0/concurrency safety/weaver/enic_ethtool.i.aux"
int emg_wrapper_enic_get_ksettings(struct net_device *arg0, struct ethtool_link_ksettings *arg1)
{
  #line 122 
  return enic_get_ksettings(arg0,arg1);
}

#line 126  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cisco/enic/enic.ko/concurrency safety/0/concurrency safety/weaver/enic_ethtool.i.aux"
unsigned int emg_wrapper_enic_get_msglevel(struct net_device *arg0)
{
  #line 127 
  return enic_get_msglevel(arg0);
}

#line 131  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cisco/enic/enic.ko/concurrency safety/0/concurrency safety/weaver/enic_ethtool.i.aux"
void emg_wrapper_enic_get_ringparam(struct net_device *arg0, struct ethtool_ringparam *arg1)
{
  #line 132 
  enic_get_ringparam(arg0,arg1);
  #line 133 
  return;
}

#line 136  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cisco/enic/enic.ko/concurrency safety/0/concurrency safety/weaver/enic_ethtool.i.aux"
int emg_wrapper_enic_get_rxfh(struct net_device *arg0, unsigned int *arg1, unsigned char *arg2, unsigned char *arg3)
{
  #line 137 
  return enic_get_rxfh(arg0,arg1,arg2,arg3);
}

#line 141  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cisco/enic/enic.ko/concurrency safety/0/concurrency safety/weaver/enic_ethtool.i.aux"
unsigned int emg_wrapper_enic_get_rxfh_key_size(struct net_device *arg0)
{
  #line 142 
  return enic_get_rxfh_key_size(arg0);
}

#line 146  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cisco/enic/enic.ko/concurrency safety/0/concurrency safety/weaver/enic_ethtool.i.aux"
int emg_wrapper_enic_get_rxnfc(struct net_device *arg0, struct ethtool_rxnfc *arg1, unsigned int *arg2)
{
  #line 147 
  return enic_get_rxnfc(arg0,arg1,arg2);
}

#line 151  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cisco/enic/enic.ko/concurrency safety/0/concurrency safety/weaver/enic_ethtool.i.aux"
int emg_wrapper_enic_get_sset_count(struct net_device *arg0, int arg1)
{
  #line 152 
  return enic_get_sset_count(arg0,arg1);
}

#line 156  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cisco/enic/enic.ko/concurrency safety/0/concurrency safety/weaver/enic_ethtool.i.aux"
void emg_wrapper_enic_get_strings(struct net_device *arg0, unsigned int arg1, unsigned char *arg2)
{
  #line 157 
  enic_get_strings(arg0,arg1,arg2);
  #line 158 
  return;
}

#line 161  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cisco/enic/enic.ko/concurrency safety/0/concurrency safety/weaver/enic_ethtool.i.aux"
int emg_wrapper_enic_get_ts_info(struct net_device *arg0, struct ethtool_ts_info *arg1)
{
  #line 162 
  return enic_get_ts_info(arg0,arg1);
}

#line 166  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cisco/enic/enic.ko/concurrency safety/0/concurrency safety/weaver/enic_ethtool.i.aux"
int emg_wrapper_enic_get_tunable(struct net_device *arg0, struct ethtool_tunable *arg1, void *arg2)
{
  #line 167 
  return enic_get_tunable(arg0,arg1,arg2);
}

#line 171  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cisco/enic/enic.ko/concurrency safety/0/concurrency safety/weaver/enic_ethtool.i.aux"
int emg_wrapper_enic_set_coalesce(struct net_device *arg0, struct ethtool_coalesce *arg1)
{
  #line 172 
  return enic_set_coalesce(arg0,arg1);
}

#line 176  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cisco/enic/enic.ko/concurrency safety/0/concurrency safety/weaver/enic_ethtool.i.aux"
void emg_wrapper_enic_set_msglevel(struct net_device *arg0, unsigned int arg1)
{
  #line 177 
  enic_set_msglevel(arg0,arg1);
  #line 178 
  return;
}

#line 181  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cisco/enic/enic.ko/concurrency safety/0/concurrency safety/weaver/enic_ethtool.i.aux"
int emg_wrapper_enic_set_ringparam(struct net_device *arg0, struct ethtool_ringparam *arg1)
{
  #line 182 
  return enic_set_ringparam(arg0,arg1);
}

#line 186  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cisco/enic/enic.ko/concurrency safety/0/concurrency safety/weaver/enic_ethtool.i.aux"
int emg_wrapper_enic_set_rxfh(struct net_device *arg0, unsigned int *arg1, unsigned char *arg2, unsigned char arg3)
{
  #line 187 
  return enic_set_rxfh(arg0,arg1,arg2,(unsigned char)((int)arg3));
}

#line 191  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cisco/enic/enic.ko/concurrency safety/0/concurrency safety/weaver/enic_ethtool.i.aux"
int emg_wrapper_enic_set_tunable(struct net_device *arg0, struct ethtool_tunable *arg1, void *arg2)
{
  #line 192 
  return enic_set_tunable(arg0,arg1,arg2);
}

#line 757  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cisco/enic/enic.ko/concurrency safety/0/concurrency safety/weaver/enic_ethtool.i.aux"
static void cif_spin_lock_bh_devcmd_lock_of_enic(spinlock_t *lock)
{
  #line 760 
  ldv_spin_model_lock((char *)"devcmd_lock_of_enic");
  #line 762 
  spin_lock_bh(lock);
  #line 763 
  return;
}

#line 766  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cisco/enic/enic.ko/concurrency safety/0/concurrency safety/weaver/enic_ethtool.i.aux"
static void cif_spin_unlock_bh_devcmd_lock_of_enic(spinlock_t *lock)
{
  #line 769 
  ldv_spin_model_unlock((char *)"devcmd_lock_of_enic");
  #line 771 
  spin_unlock_bh(lock);
  #line 772 
  return;
}

#line 775  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cisco/enic/enic.ko/concurrency safety/0/concurrency safety/weaver/enic_ethtool.i.aux"
static void cif_spin_lock_bh_lock_of_enic_rfs_flw_tbl(spinlock_t *lock)
{
  #line 778 
  ldv_spin_model_lock((char *)"lock_of_enic_rfs_flw_tbl");
  #line 780 
  spin_lock_bh(lock);
  #line 781 
  return;
}

#line 784  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cisco/enic/enic.ko/concurrency safety/0/concurrency safety/weaver/enic_ethtool.i.aux"
static void cif_spin_unlock_bh_lock_of_enic_rfs_flw_tbl(spinlock_t *lock)
{
  #line 787 
  ldv_spin_model_unlock((char *)"lock_of_enic_rfs_flw_tbl");
  #line 789 
  spin_unlock_bh(lock);
  #line 790 
  return;
}

#line 469  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernel.h"
#line 469 
int sprintf(char *, char * , ...);
#line 472 
#line 472 
int snprintf(char *, size_t, char * , ...);
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/string_64.h"
#line 61 
int memcmp(void *, void *, size_t);
#line 49  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/string.h"
#line 799  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cisco/enic/enic.ko/concurrency safety/0/concurrency safety/weaver/enic_pp.i.aux"
static int cif_strcmp(char *cs, char *ct);
#line 88  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/string.h"
#line 148  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cisco/enic/enic.ko/concurrency safety/0/concurrency safety/weaver/enic_pp.i.aux"
static size_t cif_strlen(char *s);
#line 341  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static void spin_lock_bh_0(spinlock_t *lock)
{
  #line 343 
  _raw_spin_lock_bh(& lock->__anonCompField_spinlock_25.rlock);
  #line 344 
  return;
}

#line 345 
#line 806  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cisco/enic/enic.ko/concurrency safety/0/concurrency safety/weaver/enic_pp.i.aux"
static void cif_spin_lock_bh_devcmd_lock_of_enic_0(spinlock_t *lock);
#line 381  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static void spin_unlock_bh_0(spinlock_t *lock)
{
  #line 383 
  _raw_spin_unlock_bh(& lock->__anonCompField_spinlock_25.rlock);
  #line 384 
  return;
}

#line 385 
#line 815  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cisco/enic/enic.ko/concurrency safety/0/concurrency safety/weaver/enic_pp.i.aux"
static void cif_spin_unlock_bh_devcmd_lock_of_enic_0(spinlock_t *lock);
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/string.h"
#line 25 
size_t ldv_strlen(char *s);
#line 26 
#line 26 
int ldv_strcmp(char *cs, char *ct);
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/etherdevice.h"
__inline static bool is_zero_ether_addr(u8 *addr)
{
  #line 101 
  return (_Bool)((*((u32 *)addr) | (unsigned int)*((u16 *)(addr + 4U))) == 0U);
}

#line 315  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/etherdevice.h"
__inline static bool ether_addr_equal(u8 *addr1, u8 *addr2)
{
  #line 318 
  u32 fold = (*((u32 *)addr1) ^ *((u32 *)addr2)) | (unsigned int)((int)*((u16 *)(addr1 + 4U)) ^ (int)*((u16 *)(addr2 + 4U)));
  #line 321 
  return (_Bool)(fold == 0U);
}

#line 76  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/vnic_vic.h"
#line 76 
struct vic_provinfo *vic_provinfo_alloc(gfp_t flags, u8 *oui, u8 type);
#line 78 
#line 78 
void vic_provinfo_free(struct vic_provinfo *vp);
#line 79 
#line 79 
int vic_provinfo_add_tlv(struct vic_provinfo *vp, u16 type, u16 length, void *value);
#line 81 
#line 81 
size_t vic_provinfo_size(struct vic_provinfo *vp);
#line 129  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/vnic_dev.h"
#line 129 
void vnic_dev_cmd_proxy_by_index_start(struct vnic_dev *vdev, u16 index);
#line 130 
#line 130 
void vnic_dev_cmd_proxy_end(struct vnic_dev *vdev);
#line 139 
#line 139 
int vnic_dev_add_addr(struct vnic_dev *vdev, u8 *addr);
#line 140 
#line 140 
int vnic_dev_del_addr(struct vnic_dev *vdev, u8 *addr);
#line 154 
#line 154 
int vnic_dev_deinit(struct vnic_dev *vdev);
#line 174 
#line 174 
int vnic_dev_init_prov2(struct vnic_dev *vdev, u8 *buf, u32 len);
#line 175 
#line 175 
int vnic_dev_enable2(struct vnic_dev *vdev, int active);
#line 176 
#line 176 
int vnic_dev_enable2_done(struct vnic_dev *vdev, int *status);
#line 177 
#line 177 
int vnic_dev_deinit_done(struct vnic_dev *vdev, int *status);
#line 319  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/enic.h"
#line 319 
void enic_reset_addr_lists(struct enic *enic);
#line 320 
#line 320 
int enic_sriov_enabled(struct enic *enic);
#line 321 
#line 321 
int enic_is_valid_vf(struct enic *enic, int vf);
#line 322 
#line 322 
int enic_is_dynamic(struct enic *enic);
#line 58  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/enic_dev.h"
#line 58 
int enic_dev_status_to_errno(int devcmd_status);
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/enic_pp.h"
#line 304  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/enic_pp.c"
int enic_process_set_pp_request(struct enic *enic, int vf, struct enic_port_profile *prev_pp, int *restore_pp);
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/enic_pp.h"
#line 321  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/enic_pp.c"
int enic_process_get_pp_request(struct enic *enic, int vf, int request, u16 *response);
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/enic_pp.h"
#line 38  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/enic_pp.c"
int enic_is_valid_pp_vf(struct enic *enic, int vf, int *err);
#line 38  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/enic_pp.c"
int enic_is_valid_pp_vf(struct enic *enic, int vf, int *err)
{
  #line 40 
  if (vf != -1) {
    #line 42 
    if (enic_sriov_enabled(enic) != 0) {
      #line 43 
      if (vf < 0 || (int)enic->num_vfs <= vf) {
        #line 44 
        *err = -22;
        #line 45 
        goto err_out;
      }
    }
    else {
      #line 48 
      *err = -95;
      #line 49 
      goto err_out;
    }
  }
  #line 57 
  if (vf == -1) {
    #line 57 
    if (enic_is_dynamic(enic) == 0) {
      #line 58 
      *err = -95;
      #line 59 
      goto err_out;
    }
  }
  #line 62 
  *err = 0;
  #line 63 
  return 1;
  #line 65 
  err_out: 
           #line 65 
  ;
  #line 66 
  return 0;
}

#line 69  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/enic_pp.c"
static int enic_set_port_profile(struct enic *enic, int vf)
{
  #line 72 
  struct enic_port_profile *pp;
  #line 73 
  struct vic_provinfo *vp;
  #line 76 
  char uuid_str[38U];
  #line 77 
  char client_mac_str[18U];
  #line 78 
  u8 *client_mac;
  #line 79 
  int err;
  #line 71 
  struct net_device *netdev = enic->netdev;
  #line 74 
  u8 oui[3U] = {(unsigned char)0U, (unsigned char)0U, (unsigned char)12U};
  #line 75 
  __be16 os_type = (unsigned short)512U;
  #line 81 
  if (enic_is_valid_pp_vf(enic,vf,& err) != 0) 
    #line 81 
    if (vf == -1) 
                  #line 81 
                  pp = enic->pp; else 
                                      #line 81 
                                      pp = enic->pp + (unsigned long)vf;
  else 
       #line 81 
       pp = (struct enic_port_profile *)0;
  #line 82 
  if (err != 0) 
                #line 83 
                return err;
  #line 85 
  if ((pp->set & 4U) == 0U) 
                            #line 86 
                            return -22;
  else {
    #line 85 
    if (cif_strlen((char *)(& pp->name)) == 0UL) 
                                                 #line 86 
                                                 return -22;
  }
  #line 88 
  vp = vic_provinfo_alloc(3264U,(u8 *)(& oui),(unsigned char)4);
  #line 90 
  if (vp == (struct vic_provinfo *)0) 
                                      #line 91 
                                      return -12;
  {
    #line 93 
    ;
    #line 93 
    ;
    #line 93 
    err = vic_provinfo_add_tlv(vp,(unsigned short)0,(unsigned short)((int)((unsigned int)((unsigned short)cif_strlen((char *)(& pp->name))) + 1U)),(void *)(& pp->name));
    #line 93 
    if (err != 0) 
                  #line 93 
                  goto add_tlv_failure;
  }
  #line 97 
  if (is_zero_ether_addr((u8 *)(& pp->mac_addr))) 
    #line 99 
    if (vf == -1) 
                  #line 100 
                  client_mac = netdev->dev_addr;
    else {
      #line 102 
      netdev_err(netdev,(char *)"Cannot find pp mac address ",vf);
      #line 104 
      err = -22;
      #line 105 
      goto add_tlv_failure;
    }
  else 
       #line 98 
       client_mac = (u8 *)(& pp->mac_addr);
  #line 108 
  err = vic_provinfo_add_tlv(vp,(unsigned short)1,(unsigned short)6,(void *)client_mac);
  #line 108 
  if (err != 0) 
                #line 108 
                goto add_tlv_failure;
  #line 112 
  snprintf((char *)(& client_mac_str),18UL,(char *)"%pM",client_mac);
  #line 113 
  err = vic_provinfo_add_tlv(vp,(unsigned short)4,(unsigned short)18,(void *)(& client_mac_str));
  #line 113 
  if (err != 0) 
                #line 113 
                goto add_tlv_failure;
  #line 117 
  if ((pp->set & 8U) != 0U) {
    #line 118 
    sprintf((char *)(& uuid_str),(char *)"%pUB",(u8 *)(& pp->instance_uuid));
    #line 119 
    err = vic_provinfo_add_tlv(vp,(unsigned short)9,(unsigned short)38,(void *)(& uuid_str));
    #line 119 
    if (err != 0) 
                  #line 119 
                  goto add_tlv_failure;
  }
  #line 124 
  if ((pp->set & 16U) != 0U) {
    #line 125 
    sprintf((char *)(& uuid_str),(char *)"%pUB",(u8 *)(& pp->host_uuid));
    #line 126 
    err = vic_provinfo_add_tlv(vp,(unsigned short)8,(unsigned short)38,(void *)(& uuid_str));
    #line 126 
    if (err != 0) 
                  #line 126 
                  goto add_tlv_failure;
  }
  #line 131 
  err = vic_provinfo_add_tlv(vp,(unsigned short)11,(unsigned short)2,(void *)(& os_type));
  #line 131 
  if (err != 0) 
                #line 131 
                goto add_tlv_failure;
  {
    #line 135 
    cif_spin_lock_bh_devcmd_lock_of_enic_0(& enic->devcmd_lock);
    #line 135 
    if (enic_is_valid_vf(enic,vf) != 0) {
      #line 135 
      vnic_dev_cmd_proxy_by_index_start(enic->vdev,(unsigned short)((int)((unsigned short)vf)));
      #line 135 
      ;
      #line 135 
      ;
      #line 135 
      err = vnic_dev_init_prov2(enic->vdev,(u8 *)vp,(unsigned int)vic_provinfo_size(vp));
      #line 135 
      vnic_dev_cmd_proxy_end(enic->vdev);
    }
    else {
      #line 135 
      ;
      #line 135 
      ;
      #line 135 
      err = vnic_dev_init_prov2(enic->vdev,(u8 *)vp,(unsigned int)vic_provinfo_size(vp));
    }
    #line 135 
    cif_spin_unlock_bh_devcmd_lock_of_enic_0(& enic->devcmd_lock);
  }
  #line 137 
  err = enic_dev_status_to_errno(err);
  #line 139 
  add_tlv_failure: 
                   #line 139 
  ;
  #line 140 
  vic_provinfo_free(vp);
  #line 142 
  return err;
}

#line 145  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/enic_pp.c"
static int enic_unset_port_profile(struct enic *enic, int vf)
{
  #line 147 
  int err;
  {
    #line 149 
    cif_spin_lock_bh_devcmd_lock_of_enic_0(& enic->devcmd_lock);
    #line 149 
    if (enic_is_valid_vf(enic,vf) != 0) {
      #line 149 
      vnic_dev_cmd_proxy_by_index_start(enic->vdev,(unsigned short)((int)((unsigned short)vf)));
      #line 149 
      err = vnic_dev_deinit(enic->vdev);
      #line 149 
      vnic_dev_cmd_proxy_end(enic->vdev);
    }
    else 
         #line 149 
         err = vnic_dev_deinit(enic->vdev);
    #line 149 
    cif_spin_unlock_bh_devcmd_lock_of_enic_0(& enic->devcmd_lock);
  }
  #line 150 
  if (err != 0) {
    #line 151 
    return enic_dev_status_to_errno(err);
  }
  #line 153 
  if (vf == -1) 
                #line 154 
                enic_reset_addr_lists(enic);
  #line 156 
  return 0;
}

#line 159  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/enic_pp.c"
static int enic_are_pp_different(struct enic_port_profile *pp1, struct enic_port_profile *pp2)
{
  #line 164 
  int tmp;
  #line 162 
  int tmp_0;
  #line 163 
  int tmp_1;
  #line 165 
  int tmp_3;
  #line 164 
  tmp = cif_strcmp((char *)(& pp1->name),(char *)(& pp2->name));
  #line 162 
  tmp_0 = memcmp((void *)(& pp1->instance_uuid),(void *)(& pp2->instance_uuid),16UL);
  #line 163 
  tmp_1 = memcmp((void *)(& pp1->host_uuid),(void *)(& pp2->host_uuid),16UL);
  #line 165 
  if (ether_addr_equal((u8 *)(& pp1->mac_addr),(u8 *)(& pp2->mac_addr))) 
    #line 165 
    tmp_3 = 0; else 
                    #line 165 
                    tmp_3 = 1;
  #line 164 
  return ((tmp | (tmp_0 != 0)) | (tmp_1 != 0)) | tmp_3;
}

#line 168 
#line 189 
static int enic_pp_preassociate(struct enic *enic, int vf, struct enic_port_profile *prev_pp, int *restore_pp);
#line 170 
#line 195 
static int enic_pp_disassociate(struct enic *enic, int vf, struct enic_port_profile *prev_pp, int *restore_pp);
#line 172 
#line 217 
static int enic_pp_preassociate_rr(struct enic *enic, int vf, struct enic_port_profile *prev_pp, int *restore_pp);
#line 174 
#line 256 
static int enic_pp_associate(struct enic *enic, int vf, struct enic_port_profile *prev_pp, int *restore_pp);
#line 177  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/enic_pp.c"
static int (*enic_pp_handlers[4U])(struct enic *, int , struct enic_port_profile *, int *) = {& enic_pp_preassociate, & enic_pp_preassociate_rr, & enic_pp_associate, & enic_pp_disassociate};
#line 189  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/enic_pp.c"
static int enic_pp_preassociate(struct enic *enic, int vf, struct enic_port_profile *prev_pp, int *restore_pp)
{
  #line 192 
  return -95;
}

#line 195  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/enic_pp.c"
static int enic_pp_disassociate(struct enic *enic, int vf, struct enic_port_profile *prev_pp, int *restore_pp)
{
  #line 199 
  struct enic_port_profile *pp;
  #line 200 
  int err;
  #line 198 
  struct net_device *netdev = enic->netdev;
  #line 202 
  if (enic_is_valid_pp_vf(enic,vf,& err) != 0) 
    #line 202 
    if (vf == -1) 
                  #line 202 
                  pp = enic->pp; else 
                                      #line 202 
                                      pp = enic->pp + (unsigned long)vf;
  else 
       #line 202 
       pp = (struct enic_port_profile *)0;
  #line 203 
  if (err != 0) 
                #line 204 
                return err;
  #line 207 
  if (is_zero_ether_addr((u8 *)(& pp->mac_addr))) {
    #line 210 
    if (vf == -1) {
      #line 210 
      if (! is_zero_ether_addr(netdev->dev_addr)) {
        #line 211 
        cif_spin_lock_bh_devcmd_lock_of_enic_0(& enic->devcmd_lock);
        #line 211 
        if (enic_is_valid_vf(enic,vf) != 0) {
          #line 211 
          vnic_dev_cmd_proxy_by_index_start(enic->vdev,(unsigned short)((int)((unsigned short)vf)));
          #line 211 
          err = vnic_dev_del_addr(enic->vdev,netdev->dev_addr);
          #line 211 
          vnic_dev_cmd_proxy_end(enic->vdev);
        }
        else 
             #line 211 
             err = vnic_dev_del_addr(enic->vdev,netdev->dev_addr);
        #line 211 
        cif_spin_unlock_bh_devcmd_lock_of_enic_0(& enic->devcmd_lock);
      }
    }
  }
  else {
    #line 208 
    cif_spin_lock_bh_devcmd_lock_of_enic_0(& enic->devcmd_lock);
    #line 208 
    if (enic_is_valid_vf(enic,vf) != 0) {
      #line 208 
      vnic_dev_cmd_proxy_by_index_start(enic->vdev,(unsigned short)((int)((unsigned short)vf)));
      #line 208 
      err = vnic_dev_del_addr(enic->vdev,(u8 *)(& pp->mac_addr));
      #line 208 
      vnic_dev_cmd_proxy_end(enic->vdev);
    }
    else 
         #line 208 
         err = vnic_dev_del_addr(enic->vdev,(u8 *)(& pp->mac_addr));
    #line 208 
    cif_spin_unlock_bh_devcmd_lock_of_enic_0(& enic->devcmd_lock);
  }
  #line 214 
  return enic_unset_port_profile(enic,vf);
}

#line 217  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/enic_pp.c"
static int enic_pp_preassociate_rr(struct enic *enic, int vf, struct enic_port_profile *prev_pp, int *restore_pp)
{
  #line 220 
  struct enic_port_profile *pp;
  #line 221 
  int err;
  #line 222 
  int active = 0;
  #line 224 
  if (enic_is_valid_pp_vf(enic,vf,& err) != 0) 
    #line 224 
    if (vf == -1) 
                  #line 224 
                  pp = enic->pp; else 
                                      #line 224 
                                      pp = enic->pp + (unsigned long)vf;
  else 
       #line 224 
       pp = (struct enic_port_profile *)0;
  #line 225 
  if (err != 0) 
                #line 226 
                return err;
  #line 228 
  if ((unsigned int)pp->request != 2U) {
    #line 231 
    err = (*(enic_pp_handlers[3]))(enic,vf,prev_pp,restore_pp);
    #line 233 
    if (err != 0) 
                  #line 234 
                  return err;
    #line 236 
    *restore_pp = 0;
  }
  #line 239 
  *restore_pp = 0;
  #line 241 
  err = enic_set_port_profile(enic,vf);
  #line 242 
  if (err != 0) 
                #line 243 
                return err;
  #line 246 
  if ((unsigned int)pp->request != 2U) {
    {
      #line 248 
      cif_spin_lock_bh_devcmd_lock_of_enic_0(& enic->devcmd_lock);
      #line 248 
      if (enic_is_valid_vf(enic,vf) != 0) {
        #line 248 
        vnic_dev_cmd_proxy_by_index_start(enic->vdev,(unsigned short)((int)((unsigned short)vf)));
        #line 248 
        err = vnic_dev_enable2(enic->vdev,active);
        #line 248 
        vnic_dev_cmd_proxy_end(enic->vdev);
      }
      else 
           #line 248 
           err = vnic_dev_enable2(enic->vdev,active);
      #line 248 
      cif_spin_unlock_bh_devcmd_lock_of_enic_0(& enic->devcmd_lock);
    }
    #line 250 
    err = enic_dev_status_to_errno(err);
  }
  #line 253 
  return err;
}

#line 256  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/enic_pp.c"
static int enic_pp_associate(struct enic *enic, int vf, struct enic_port_profile *prev_pp, int *restore_pp)
{
  #line 260 
  struct enic_port_profile *pp;
  #line 261 
  int err;
  #line 259 
  struct net_device *netdev = enic->netdev;
  #line 262 
  int active = 1;
  #line 264 
  if (enic_is_valid_pp_vf(enic,vf,& err) != 0) 
    #line 264 
    if (vf == -1) 
                  #line 264 
                  pp = enic->pp; else 
                                      #line 264 
                                      pp = enic->pp + (unsigned long)vf;
  else 
       #line 264 
       pp = (struct enic_port_profile *)0;
  #line 265 
  if (err != 0) 
                #line 266 
                return err;
  #line 269 
  if ((unsigned int)prev_pp->request != 1U) 
                                            #line 269 
                                            goto _LOR;
  else 
    #line 269 
    if ((unsigned int)prev_pp->request == 1U) {
      #line 270 
      if (enic_are_pp_different(prev_pp,pp) != 0) {
        #line 269 
        _LOR: {
                #line 272 
                err = (*(enic_pp_handlers[3]))(enic,vf,prev_pp,restore_pp);
                #line 274 
                if (err != 0) 
                              #line 275 
                              return err;
                #line 277 
                *restore_pp = 0;
              }
      }
    }
  #line 280 
  err = (*(enic_pp_handlers[1]))(enic,vf,prev_pp,restore_pp);
  #line 282 
  if (err != 0) 
                #line 283 
                return err;
  #line 285 
  *restore_pp = 0;
  {
    #line 288 
    cif_spin_lock_bh_devcmd_lock_of_enic_0(& enic->devcmd_lock);
    #line 288 
    if (enic_is_valid_vf(enic,vf) != 0) {
      #line 288 
      vnic_dev_cmd_proxy_by_index_start(enic->vdev,(unsigned short)((int)((unsigned short)vf)));
      #line 288 
      err = vnic_dev_enable2(enic->vdev,active);
      #line 288 
      vnic_dev_cmd_proxy_end(enic->vdev);
    }
    else 
         #line 288 
         err = vnic_dev_enable2(enic->vdev,active);
    #line 288 
    cif_spin_unlock_bh_devcmd_lock_of_enic_0(& enic->devcmd_lock);
  }
  #line 289 
  err = enic_dev_status_to_errno(err);
  #line 290 
  if (err != 0) 
                #line 291 
                return err;
  #line 294 
  if (is_zero_ether_addr((u8 *)(& pp->mac_addr))) {
    #line 297 
    if (vf == -1) {
      #line 297 
      if (! is_zero_ether_addr(netdev->dev_addr)) {
        #line 298 
        cif_spin_lock_bh_devcmd_lock_of_enic_0(& enic->devcmd_lock);
        #line 298 
        if (enic_is_valid_vf(enic,vf) != 0) {
          #line 298 
          vnic_dev_cmd_proxy_by_index_start(enic->vdev,(unsigned short)((int)((unsigned short)vf)));
          #line 298 
          err = vnic_dev_add_addr(enic->vdev,netdev->dev_addr);
          #line 298 
          vnic_dev_cmd_proxy_end(enic->vdev);
        }
        else 
             #line 298 
             err = vnic_dev_add_addr(enic->vdev,netdev->dev_addr);
        #line 298 
        cif_spin_unlock_bh_devcmd_lock_of_enic_0(& enic->devcmd_lock);
      }
    }
  }
  else {
    #line 295 
    cif_spin_lock_bh_devcmd_lock_of_enic_0(& enic->devcmd_lock);
    #line 295 
    if (enic_is_valid_vf(enic,vf) != 0) {
      #line 295 
      vnic_dev_cmd_proxy_by_index_start(enic->vdev,(unsigned short)((int)((unsigned short)vf)));
      #line 295 
      err = vnic_dev_add_addr(enic->vdev,(u8 *)(& pp->mac_addr));
      #line 295 
      vnic_dev_cmd_proxy_end(enic->vdev);
    }
    else 
         #line 295 
         err = vnic_dev_add_addr(enic->vdev,(u8 *)(& pp->mac_addr));
    #line 295 
    cif_spin_unlock_bh_devcmd_lock_of_enic_0(& enic->devcmd_lock);
  }
  #line 301 
  return 0;
}

#line 304  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/enic_pp.c"
int enic_process_set_pp_request(struct enic *enic, int vf, struct enic_port_profile *prev_pp, int *restore_pp)
{
  #line 307 
  struct enic_port_profile *pp;
  #line 308 
  int err;
  #line 310 
  if (enic_is_valid_pp_vf(enic,vf,& err) != 0) 
    #line 310 
    if (vf == -1) 
                  #line 310 
                  pp = enic->pp; else 
                                      #line 310 
                                      pp = enic->pp + (unsigned long)vf;
  else 
       #line 310 
       pp = (struct enic_port_profile *)0;
  #line 311 
  if (err != 0) 
                #line 312 
                return err;
  #line 314 
  if ((unsigned int)pp->request > 3U || enic_pp_handlers[(int)pp->request] == (int (*)(struct enic *, int , struct enic_port_profile *, int *))0) 
    #line 316 
    return -95;
  #line 318 
  return (*(enic_pp_handlers[(int)pp->request]))(enic,vf,prev_pp,restore_pp);
}

#line 321  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/enic_pp.c"
int enic_process_get_pp_request(struct enic *enic, int vf, int request, u16 *response)
{
  #line 324 
  int err;
  #line 324 
  int status = 0;
  #line 326 
  switch (request) {
    #line 328 
    case 1: 
            #line 328 
    ;
    #line 329 
    case 2: 
            #line 329 
    ;
    {
      #line 330 
      cif_spin_lock_bh_devcmd_lock_of_enic_0(& enic->devcmd_lock);
      #line 330 
      if (enic_is_valid_vf(enic,vf) != 0) {
        #line 330 
        vnic_dev_cmd_proxy_by_index_start(enic->vdev,(unsigned short)((int)((unsigned short)vf)));
        #line 330 
        err = vnic_dev_enable2_done(enic->vdev,& status);
        #line 330 
        vnic_dev_cmd_proxy_end(enic->vdev);
      }
      else 
           #line 330 
           err = vnic_dev_enable2_done(enic->vdev,& status);
      #line 330 
      cif_spin_unlock_bh_devcmd_lock_of_enic_0(& enic->devcmd_lock);
    }
    #line 332 
    break;
    #line 334 
    case 3: 
            #line 334 
    ;
    {
      #line 335 
      cif_spin_lock_bh_devcmd_lock_of_enic_0(& enic->devcmd_lock);
      #line 335 
      if (enic_is_valid_vf(enic,vf) != 0) {
        #line 335 
        vnic_dev_cmd_proxy_by_index_start(enic->vdev,(unsigned short)((int)((unsigned short)vf)));
        #line 335 
        err = vnic_dev_deinit_done(enic->vdev,& status);
        #line 335 
        vnic_dev_cmd_proxy_end(enic->vdev);
      }
      else 
           #line 335 
           err = vnic_dev_deinit_done(enic->vdev,& status);
      #line 335 
      cif_spin_unlock_bh_devcmd_lock_of_enic_0(& enic->devcmd_lock);
    }
    #line 337 
    break;
    #line 339 
    default: 
             #line 339 
    ;
    #line 340 
    return -22;
  }
  #line 343 
  if (err != 0) 
                #line 344 
                status = err;
  #line 346 
  switch (status) {
    #line 347 
    case 0: 
            #line 347 
    ;
    #line 348 
    *response = (unsigned short)256U;
    #line 349 
    break;
    #line 350 
    case 1: 
            #line 350 
    ;
    #line 351 
    *response = (unsigned short)258U;
    #line 352 
    break;
    #line 353 
    case 6: 
            #line 353 
    ;
    #line 354 
    *response = (unsigned short)259U;
    #line 355 
    break;
    #line 356 
    case 7: 
            #line 356 
    ;
    #line 357 
    *response = (unsigned short)260U;
    #line 358 
    break;
    #line 359 
    case 12: 
             #line 359 
    ;
    #line 360 
    *response = (unsigned short)257U;
    #line 361 
    break;
    #line 362 
    default: 
             #line 362 
    ;
    #line 363 
    *response = (unsigned short)261U;
    #line 364 
    break;
  }
  #line 367 
  return 0;
}

#line 148  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cisco/enic/enic.ko/concurrency safety/0/concurrency safety/weaver/enic_pp.i.aux"
static size_t cif_strlen(char *s)
{
  #line 151 
  return ldv_strlen(s);
}

#line 799  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cisco/enic/enic.ko/concurrency safety/0/concurrency safety/weaver/enic_pp.i.aux"
static int cif_strcmp(char *cs, char *ct)
{
  #line 802 
  return ldv_strcmp(cs,ct);
}

#line 806  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cisco/enic/enic.ko/concurrency safety/0/concurrency safety/weaver/enic_pp.i.aux"
static void cif_spin_lock_bh_devcmd_lock_of_enic_0(spinlock_t *lock)
{
  #line 809 
  ldv_spin_model_lock((char *)"devcmd_lock_of_enic");
  #line 811 
  spin_lock_bh_0(lock);
  #line 812 
  return;
}

#line 815  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cisco/enic/enic.ko/concurrency safety/0/concurrency safety/weaver/enic_pp.i.aux"
static void cif_spin_unlock_bh_devcmd_lock_of_enic_0(spinlock_t *lock)
{
  #line 818 
  ldv_spin_model_unlock((char *)"devcmd_lock_of_enic");
  #line 820 
  spin_unlock_bh_0(lock);
  #line 821 
  return;
}

/* compiler builtin: 
   unsigned short __builtin_bswap16(unsigned short);   */
/* compiler builtin: 
   unsigned int __builtin_bswap32(unsigned int);   */
/* compiler builtin: 
   void *__builtin_memcpy(void *, void const *, unsigned long);   */
#line 220  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/compiler.h"
__inline static void __write_once_size(void *p, void *res, int size)
{
  #line 222 
  switch (size) {
    #line 223 
    case 1: 
            #line 223 
    ;
    #line 223 
    *((__u8 *)p) = *((__u8 *)res);
    #line 223 
    break;
    #line 224 
    case 2: 
            #line 224 
    ;
    #line 224 
    *((__u16 *)p) = *((__u16 *)res);
    #line 224 
    break;
    #line 225 
    case 4: 
            #line 225 
    ;
    #line 225 
    *((__u32 *)p) = *((__u32 *)res);
    #line 225 
    break;
    #line 226 
    case 8: 
            #line 226 
    ;
    #line 226 
    *((__u64 *)p) = *((__u64 *)res);
    #line 226 
    break;
    #line 227 
    default: 
             #line 227 
    ;
    #line 228 
    ldv_inline_asm();
    #line 229 
    __builtin_memcpy(p,(void const *)res,(unsigned long)size);
    #line 230 
    ldv_inline_asm();
  }
  #line 232 
  return;
}

#line 741  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static void INIT_HLIST_NODE(struct hlist_node *h)
{
  #line 743 
  h->next = (struct hlist_node *)0;
  #line 744 
  h->pprev = (struct hlist_node **)0;
  #line 745 
  return;
}

#line 757  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static void __hlist_del(struct hlist_node *n)
{
  #line 759 
  struct hlist_node *next = n->next;
  #line 760 
  struct hlist_node **pprev = n->pprev;
  {
    #line 763 
    union __anonunion___u_2422 __u = {.__val = next};
    #line 762 
    __write_once_size((void *)pprev,(void *)(& __u.__c),8);
    #line 762 
    struct hlist_node *tmp = __u.__val;
  }
  #line 763 
  if (next != (struct hlist_node *)0) 
                                      #line 764 
                                      next->pprev = pprev;
  #line 765 
  return;
}

#line 767  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static void hlist_del(struct hlist_node *n)
{
  #line 769 
  __hlist_del(n);
  #line 770 
  n->next = (struct hlist_node *)(-2401263026318606080);
  #line 771 
  n->pprev = (struct hlist_node **)(-2401263026318606046);
  #line 772 
  return;
}

#line 782  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static void hlist_add_head(struct hlist_node *n, struct hlist_head *h)
{
  #line 784 
  struct hlist_node *first = h->first;
  #line 785 
  n->next = first;
  #line 786 
  if (first != (struct hlist_node *)0) 
                                       #line 787 
                                       first->pprev = & n->next;
  {
    #line 789 
    union __anonunion___u_2424 __u = {.__val = n};
    #line 788 
    __write_once_size((void *)(& h->first),(void *)(& __u.__c),8);
    #line 788 
    struct hlist_node *tmp = __u.__val;
  }
  #line 789 
  n->pprev = & h->first;
  #line 790 
  return;
}

#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/string_64.h"
#line 18 
void *memset(void *, int, size_t);
#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
#line 95 
void __raw_spin_lock_init(raw_spinlock_t *, char *, struct lock_class_key *);
#line 325  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
__inline static raw_spinlock_t *spinlock_check(spinlock_t *lock)
{
  #line 327 
  return & lock->__anonCompField_spinlock_25.rlock;
}

#line 341  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static void spin_lock_bh_1(spinlock_t *lock)
{
  #line 343 
  _raw_spin_lock_bh(& lock->__anonCompField_spinlock_25.rlock);
  #line 344 
  return;
}

#line 345 
#line 665  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cisco/enic/enic.ko/concurrency safety/0/concurrency safety/weaver/enic_clsf.i.aux"
static void cif_spin_lock_bh_devcmd_lock_of_enic_1(spinlock_t *lock);
#line 345  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
#line 683  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cisco/enic/enic.ko/concurrency safety/0/concurrency safety/weaver/enic_clsf.i.aux"
static void cif_spin_lock_bh_lock_of_enic_rfs_flw_tbl_0(spinlock_t *lock);
#line 381  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static void spin_unlock_bh_1(spinlock_t *lock)
{
  #line 383 
  _raw_spin_unlock_bh(& lock->__anonCompField_spinlock_25.rlock);
  #line 384 
  return;
}

#line 385 
#line 674  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cisco/enic/enic.ko/concurrency safety/0/concurrency safety/weaver/enic_clsf.i.aux"
static void cif_spin_unlock_bh_devcmd_lock_of_enic_1(spinlock_t *lock);
#line 385  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
#line 692  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cisco/enic/enic.ko/concurrency safety/0/concurrency safety/weaver/enic_clsf.i.aux"
static void cif_spin_unlock_bh_lock_of_enic_rfs_flw_tbl_0(spinlock_t *lock);
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 24 
void *ldv_kmalloc(size_t size, gfp_t flags);
#line 81  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jiffies.h"
#line 81 
extern unsigned long jiffies;
#line 173  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
#line 649  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cisco/enic/enic.ko/concurrency safety/0/concurrency safety/weaver/enic_clsf.i.aux"
static int cif_mod_timer(struct timer_list *timer, unsigned long expires);
#line 188  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
#line 657  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cisco/enic/enic.ko/concurrency safety/0/concurrency safety/weaver/enic_clsf.i.aux"
static int cif_del_timer_sync(struct timer_list *timer);
#line 542  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/slab.h"
#line 321  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cisco/enic/enic.ko/concurrency safety/0/concurrency safety/weaver/enic_clsf.i.aux"
static void *kmalloc(size_t size, gfp_t flags);
#line 304  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow_dissector.h"
#line 304 
extern struct flow_dissector flow_keys_dissector;
#line 1282  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
#line 1282 
bool __skb_flow_dissect(struct net *, struct sk_buff *, struct flow_dissector *, void *, void *, __be16, int, int, unsigned int);
#line 1297  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static bool skb_flow_dissect_flow_keys(struct sk_buff *skb, struct flow_keys *flow, unsigned int flags)
{
  #line 1301 
  memset((void *)flow,0,72UL);
  #line 1302 
  return __skb_flow_dissect((struct net *)0,skb,& flow_keys_dissector,
                         (void *)flow,(void *)0,(unsigned short)0,0,0,flags);
}

#line 1360  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static __u32 skb_get_hash_raw(struct sk_buff *skb)
{
  #line 1362 
  return skb->hash;
}

#line 730  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
#line 730 
bool rps_may_expire_flow(struct net_device *, u16, u32, u16);
#line 179  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/vnic_dev.h"
#line 179 
int vnic_dev_classifier(struct vnic_dev *vdev, u8 cmd, u16 *entry, struct filter *data);
#line 10  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/enic_clsf.h"
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/enic_clsf.c"
int enic_addfltr_5t(struct enic *enic, struct flow_keys *keys, u16 rq);
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/enic_clsf.h"
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/enic_clsf.c"
int enic_delfltr(struct enic *enic, u16 filter_id);
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/enic_clsf.h"
#line 73  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/enic_clsf.c"
void enic_rfs_flw_tbl_init(struct enic *enic);
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/enic_clsf.h"
#line 85  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/enic_clsf.c"
void enic_rfs_flw_tbl_free(struct enic *enic);
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/enic_clsf.h"
#line 171  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/enic_clsf.c"
int enic_rx_flow_steer(struct net_device *dev, struct sk_buff *skb, u16 rxq_index, u32 flow_id);
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/enic_clsf.h"
#line 126  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/enic_clsf.c"
void enic_flow_may_expire(struct timer_list *t);
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/enic_clsf.h"
__inline static void enic_rfs_timer_stop(struct enic *enic)
{
  #line 29 
  cif_del_timer_sync(& enic->rfs_h.rfs_may_expire);
  #line 30 
  return;
}

#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/enic_clsf.c"
int enic_addfltr_5t(struct enic *enic, struct flow_keys *keys, u16 rq)
{
  #line 23 
  int res;
  #line 24 
  struct filter data;
  #line 26 
  switch ((int)keys->basic.ip_proto) {
    #line 27 
    case 6: 
            #line 27 
    ;
    #line 28 
    data.u.ipv4.protocol = 1U;
    #line 29 
    break;
    #line 30 
    case 17: 
             #line 30 
    ;
    #line 31 
    data.u.ipv4.protocol = 0U;
    #line 32 
    break;
    #line 33 
    default: 
             #line 33 
    ;
    #line 34 
    return -93;
  }
  #line 37 
  data.type = 1U;
  #line 38 
  data.u.ipv4.src_addr = __builtin_bswap32(keys->addrs.__anonCompField_flow_dissector_key_addrs_76.v4addrs.src);
  #line 39 
  data.u.ipv4.dst_addr = __builtin_bswap32(keys->addrs.__anonCompField_flow_dissector_key_addrs_76.v4addrs.dst);
  #line 40 
  data.u.ipv4.src_port = __builtin_bswap16((unsigned short)((int)keys->ports.__anonCompField_flow_dissector_key_ports_78.__anonCompField___anonunion_1203_77.src));
  #line 41 
  data.u.ipv4.dst_port = __builtin_bswap16((unsigned short)((int)keys->ports.__anonCompField_flow_dissector_key_ports_78.__anonCompField___anonunion_1203_77.dst));
  #line 42 
  data.u.ipv4.flags = 31U;
  #line 44 
  cif_spin_lock_bh_devcmd_lock_of_enic_1(& enic->devcmd_lock);
  #line 45 
  res = vnic_dev_classifier(enic->vdev,(unsigned char)0,& rq,& data);
  #line 46 
  cif_spin_unlock_bh_devcmd_lock_of_enic_1(& enic->devcmd_lock);
  #line 47 
  if (res == 0) 
                #line 47 
                res = (int)rq; else 
                                    #line 47 
                                    res = res;
  #line 49 
  return res;
}

#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/enic_clsf.c"
int enic_delfltr(struct enic *enic, u16 filter_id)
{
  #line 61 
  int ret;
  #line 63 
  cif_spin_lock_bh_devcmd_lock_of_enic_1(& enic->devcmd_lock);
  #line 64 
  ret = vnic_dev_classifier(enic->vdev,(unsigned char)1,& filter_id,(struct filter *)0);
  #line 65 
  cif_spin_unlock_bh_devcmd_lock_of_enic_1(& enic->devcmd_lock);
  #line 67 
  return ret;
}

#line 73  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/enic_clsf.c"
void enic_rfs_flw_tbl_init(struct enic *enic)
{
  #line 75 
  int i;
  #line 77 
  spinlock_check(& enic->rfs_h.lock);
  {
    #line 77 
    struct lock_class_key __key;
    #line 77 
    __raw_spin_lock_init(& enic->rfs_h.lock.__anonCompField_spinlock_25.rlock,(char *)"&(&enic->rfs_h.lock)->rlock",& __key);
  }
  #line 78 
  i = 0;
  #line 78 
  while (i <= 1023) {
    #line 79 
    enic->rfs_h.ht_head[i].first = (struct hlist_node *)0;
    #line 78 
    i ++;
  }
  #line 80 
  enic->rfs_h.max = enic->config.num_arfs;
  #line 81 
  enic->rfs_h.free = (int)enic->rfs_h.max;
  #line 82 
  enic->rfs_h.toclean = (unsigned short)0U;
  #line 83 
  return;
}

#line 85  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/enic_clsf.c"
void enic_rfs_flw_tbl_free(struct enic *enic)
{
  #line 87 
  int i;
  #line 89 
  enic_rfs_timer_stop(enic);
  #line 90 
  cif_spin_lock_bh_lock_of_enic_rfs_flw_tbl_0(& enic->rfs_h.lock);
  #line 91 
  i = 0;
  #line 91 
  while (i <= 1023) {
    {
      #line 97 
      void *__mptr;
      #line 97 
      struct enic_rfs_fltr_node *tmp_1;
      #line 92 
      struct hlist_head *hhead;
      #line 93 
      struct hlist_node *tmp;
      #line 94 
      struct enic_rfs_fltr_node *n;
      #line 96 
      hhead = & enic->rfs_h.ht_head[i];
      {
        #line 97 
        struct hlist_node *____ptr = hhead->first;
        #line 97 
        if (____ptr != (struct hlist_node *)0) {
          #line 97 
          __mptr = (void *)____ptr;
          #line 97 
          tmp_1 = ((struct enic_rfs_fltr_node *)(__mptr + 18446744073709551536U));
        }
        else 
             #line 97 
             tmp_1 = (struct enic_rfs_fltr_node *)0;
        }
      #line 97 
      n = tmp_1;
      #line 97 
      while (1) {
        #line 97 
        struct enic_rfs_fltr_node *tmp_4;
        #line 97 
        void *__mptr_0;
        #line 97 
        if (n != (struct enic_rfs_fltr_node *)0) {
          #line 97 
          tmp = n->node.next;
          #line 97 
          if (! (1 != 0)) 
                          #line 97 
                          break;
        }
        else 
             #line 97 
             break;
        #line 98 
        enic_delfltr(enic,(unsigned short)((int)n->fltr_id));
        #line 99 
        hlist_del(& n->node);
        #line 100 
        kfree((void *)n);
        #line 101 
        (enic->rfs_h.free) ++;
        {
          #line 97 
          struct hlist_node *____ptr_0 = tmp;
          #line 97 
          if (____ptr_0 != (struct hlist_node *)0) {
            #line 97 
            __mptr_0 = (void *)____ptr_0;
            #line 97 
            tmp_4 = ((struct enic_rfs_fltr_node *)(__mptr_0 + 18446744073709551536U));
          }
          else 
               #line 97 
               tmp_4 = (struct enic_rfs_fltr_node *)0;
          }
        #line 97 
        n = tmp_4;
      }
    }
    #line 91 
    i ++;
  }
  #line 104 
  cif_spin_unlock_bh_lock_of_enic_rfs_flw_tbl_0(& enic->rfs_h.lock);
  #line 105 
  return;
}

#line 107  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/enic_clsf.c"
struct enic_rfs_fltr_node *htbl_fltr_search(struct enic *enic, u16 fltr_id)
{
  #line 109 
  int i;
  #line 111 
  i = 0;
  #line 111 
  while (i <= 1023) {
    {
      #line 117 
      void *__mptr;
      #line 117 
      struct enic_rfs_fltr_node *tmp_1;
      #line 112 
      struct hlist_head *hhead;
      #line 113 
      struct hlist_node *tmp;
      #line 114 
      struct enic_rfs_fltr_node *n;
      #line 116 
      hhead = & enic->rfs_h.ht_head[i];
      {
        #line 117 
        struct hlist_node *____ptr = hhead->first;
        #line 117 
        if (____ptr != (struct hlist_node *)0) {
          #line 117 
          __mptr = (void *)____ptr;
          #line 117 
          tmp_1 = ((struct enic_rfs_fltr_node *)(__mptr + 18446744073709551536U));
        }
        else 
             #line 117 
             tmp_1 = (struct enic_rfs_fltr_node *)0;
        }
      #line 117 
      n = tmp_1;
      #line 117 
      while (1) {
        #line 117 
        struct enic_rfs_fltr_node *tmp_4;
        #line 117 
        void *__mptr_0;
        #line 117 
        if (n != (struct enic_rfs_fltr_node *)0) {
          #line 117 
          tmp = n->node.next;
          #line 117 
          if (! (1 != 0)) 
                          #line 117 
                          break;
        }
        else 
             #line 117 
             break;
        #line 118 
        if ((int)n->fltr_id == (int)fltr_id) 
                                             #line 119 
                                             return n;
        {
          #line 117 
          struct hlist_node *____ptr_0 = tmp;
          #line 117 
          if (____ptr_0 != (struct hlist_node *)0) {
            #line 117 
            __mptr_0 = (void *)____ptr_0;
            #line 117 
            tmp_4 = ((struct enic_rfs_fltr_node *)(__mptr_0 + 18446744073709551536U));
          }
          else 
               #line 117 
               tmp_4 = (struct enic_rfs_fltr_node *)0;
          }
        #line 117 
        n = tmp_4;
      }
    }
    #line 111 
    i ++;
  }
  #line 122 
  return (struct enic_rfs_fltr_node *)0;
}

#line 126  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/enic_clsf.c"
void enic_flow_may_expire(struct timer_list *t)
{
  #line 128 
  void *__mptr;
  #line 129 
  bool res;
  #line 130 
  int j;
  #line 128 
  __mptr = (void *)t;
  #line 128 
  struct enic *enic = ((struct enic *)(__mptr + 18446744073709521632U));
  #line 132 
  cif_spin_lock_bh_lock_of_enic_rfs_flw_tbl_0(& enic->rfs_h.lock);
  #line 133 
  j = 0;
  #line 133 
  while (j <= 127) {
    {
      #line 139 
      struct enic_rfs_fltr_node *tmp_3;
      #line 139 
      void *__mptr_0;
      #line 134 
      struct hlist_head *hhead;
      #line 135 
      struct hlist_node *tmp_0;
      #line 136 
      struct enic_rfs_fltr_node *n;
      #line 138 
      u16 tmp_1;
      #line 138 
      tmp_1 = enic->rfs_h.toclean;
      #line 138 
      enic->rfs_h.toclean = (u16)((int)enic->rfs_h.toclean + 1);
      #line 138 
      hhead = & enic->rfs_h.ht_head[(int)tmp_1];
      {
        #line 139 
        struct hlist_node *____ptr = hhead->first;
        #line 139 
        if (____ptr != (struct hlist_node *)0) {
          #line 139 
          __mptr_0 = (void *)____ptr;
          #line 139 
          tmp_3 = ((struct enic_rfs_fltr_node *)(__mptr_0 + 18446744073709551536U));
        }
        else 
             #line 139 
             tmp_3 = (struct enic_rfs_fltr_node *)0;
        }
      #line 139 
      n = tmp_3;
      #line 139 
      while (1) {
        #line 139 
        void *__mptr_1;
        #line 139 
        struct enic_rfs_fltr_node *tmp_6;
        #line 139 
        if (n != (struct enic_rfs_fltr_node *)0) {
          #line 139 
          tmp_0 = n->node.next;
          #line 139 
          if (! (1 != 0)) 
                          #line 139 
                          break;
        }
        else 
             #line 139 
             break;
        #line 140 
        res = rps_may_expire_flow(enic->netdev,(unsigned short)((int)n->rq_id),n->flow_id,(unsigned short)((int)n->fltr_id));
        #line 142 
        if ((int)res != 0) {
          #line 143 
          res = (_Bool)(enic_delfltr(enic,(unsigned short)((int)n->fltr_id)) != 0);
          #line 144 
          if ((long)((int)res != 0) != 0L) 
                                           #line 145 
                                           goto __Cont;
          #line 146 
          hlist_del(& n->node);
          #line 147 
          kfree((void *)n);
          #line 148 
          (enic->rfs_h.free) ++;
        }
        #line 139 
        __Cont: { /* sequence */
                  {
                    #line 139 
                    struct hlist_node *____ptr_0 = tmp_0;
                    #line 139 
                    if (____ptr_0 != (struct hlist_node *)0) {
                      #line 139 
                      __mptr_1 = (void *)____ptr_0;
                      #line 139 
                      tmp_6 = ((struct enic_rfs_fltr_node *)(__mptr_1 + 18446744073709551536U));
                    }
                    else 
                         #line 139 
                         tmp_6 = (struct enic_rfs_fltr_node *)0;
                    }
                  #line 139 
                  n = tmp_6;
                }
      }
    }
    #line 133 
    j ++;
  }
  #line 152 
  cif_spin_unlock_bh_lock_of_enic_rfs_flw_tbl_0(& enic->rfs_h.lock);
  #line 153 
  cif_mod_timer(& enic->rfs_h.rfs_may_expire,jiffies + 62UL);
  #line 154 
  return;
}

#line 156  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/enic_clsf.c"
static struct enic_rfs_fltr_node *htbl_key_search(struct hlist_head *h, struct flow_keys *k)
{
  #line 161 
  void *__mptr;
  #line 161 
  struct enic_rfs_fltr_node *tmp_0;
  #line 159 
  struct enic_rfs_fltr_node *tpos;
  {
    #line 161 
    struct hlist_node *____ptr = h->first;
    #line 161 
    if (____ptr != (struct hlist_node *)0) {
      #line 161 
      __mptr = (void *)____ptr;
      #line 161 
      tmp_0 = ((struct enic_rfs_fltr_node *)(__mptr + 18446744073709551536U));
    }
    else 
         #line 161 
         tmp_0 = (struct enic_rfs_fltr_node *)0;
    }
  #line 161 
  tpos = tmp_0;
  #line 161 
  while (tpos != (struct enic_rfs_fltr_node *)0) {
    #line 161 
    void *__mptr_0;
    #line 161 
    struct enic_rfs_fltr_node *tmp_3;
    #line 162 
    if ((((tpos->keys.addrs.__anonCompField_flow_dissector_key_addrs_76.v4addrs.src == k->addrs.__anonCompField_flow_dissector_key_addrs_76.v4addrs.src && tpos->keys.addrs.__anonCompField_flow_dissector_key_addrs_76.v4addrs.dst == k->addrs.__anonCompField_flow_dissector_key_addrs_76.v4addrs.dst) && tpos->keys.ports.__anonCompField_flow_dissector_key_ports_78.ports == k->ports.__anonCompField_flow_dissector_key_ports_78.ports) && (int)tpos->keys.basic.ip_proto == (int)k->basic.ip_proto) && (int)tpos->keys.basic.n_proto == (int)k->basic.n_proto) 
      #line 167 
      return tpos;
    {
      #line 161 
      struct hlist_node *____ptr_0 = tpos->node.next;
      #line 161 
      if (____ptr_0 != (struct hlist_node *)0) {
        #line 161 
        __mptr_0 = (void *)____ptr_0;
        #line 161 
        tmp_3 = ((struct enic_rfs_fltr_node *)(__mptr_0 + 18446744073709551536U));
      }
      else 
           #line 161 
           tmp_3 = (struct enic_rfs_fltr_node *)0;
      }
    #line 161 
    tpos = tmp_3;
  }
  #line 168 
  return (struct enic_rfs_fltr_node *)0;
}

#line 171  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/enic_clsf.c"
int enic_rx_flow_steer(struct net_device *dev, struct sk_buff *skb, u16 rxq_index, u32 flow_id)
{
  #line 174 
  struct flow_keys keys;
  #line 175 
  struct enic_rfs_fltr_node *n;
  #line 176 
  struct enic *enic;
  #line 177 
  u16 tbl_idx;
  #line 178 
  int res;
  #line 178 
  int i;
  #line 180 
  enic = (struct enic *)netdev_priv(dev);
  #line 181 
  res = (int)skb_flow_dissect_flow_keys(skb,& keys,0U);
  #line 182 
  if ((res == 0 || (unsigned int)keys.basic.n_proto != 8U) || (unsigned int)keys.basic.ip_proto != 6U && (unsigned int)keys.basic.ip_proto != 17U) 
    #line 185 
    return -93;
  #line 187 
  tbl_idx = (unsigned short)((unsigned int)((unsigned short)skb_get_hash_raw(skb)) & 1023U);
  #line 188 
  cif_spin_lock_bh_lock_of_enic_rfs_flw_tbl_0(& enic->rfs_h.lock);
  #line 189 
  n = htbl_key_search(& enic->rfs_h.ht_head[(int)tbl_idx],& keys);
  #line 191 
  if (n != (struct enic_rfs_fltr_node *)0) {
    #line 192 
    if ((int)n->rq_id == (int)rxq_index) {
      #line 193 
      res = -17;
      #line 194 
      goto ret_unlock;
    }
    #line 207 
    (enic->rfs_h.free) --;
    #line 207 
    i = enic->rfs_h.free;
    #line 209 
    if ((long)(i < 0) != 0L) {
      #line 210 
      (enic->rfs_h.free) ++;
      #line 211 
      res = enic_delfltr(enic,(unsigned short)((int)n->fltr_id));
      #line 212 
      if ((long)(res < 0) != 0L) 
                                 #line 213 
                                 goto ret_unlock;
      #line 214 
      res = enic_addfltr_5t(enic,& keys,(unsigned short)((int)rxq_index));
      #line 215 
      if (res < 0) {
        #line 216 
        hlist_del(& n->node);
        #line 217 
        (enic->rfs_h.free) ++;
        #line 218 
        goto ret_unlock;
      }
    }
    else {
      #line 222 
      int ret;
      #line 224 
      res = enic_addfltr_5t(enic,& keys,(unsigned short)((int)rxq_index));
      #line 225 
      if (res < 0) {
        #line 226 
        (enic->rfs_h.free) ++;
        #line 227 
        goto ret_unlock;
      }
      #line 229 
      ret = enic_delfltr(enic,(unsigned short)((int)n->fltr_id));
      #line 233 
      if ((long)(ret < 0) != 0L) {
        #line 234 
        struct enic_rfs_fltr_node *d;
        #line 235 
        struct hlist_head *head;
        #line 237 
        head = & enic->rfs_h.ht_head[(int)tbl_idx];
        #line 238 
        d = (struct enic_rfs_fltr_node *)kmalloc(96UL,2592U);
        #line 239 
        if (d != (struct enic_rfs_fltr_node *)0) {
          #line 240 
          d->fltr_id = n->fltr_id;
          #line 241 
          INIT_HLIST_NODE(& d->node);
          #line 242 
          hlist_add_head(& d->node,head);
        }
      }
      else 
           #line 245 
           (enic->rfs_h.free) ++;
    }
    #line 248 
    n->rq_id = rxq_index;
    #line 249 
    n->fltr_id = (unsigned short)res;
    #line 250 
    n->flow_id = flow_id;
  }
  else {
    #line 253 
    (enic->rfs_h.free) --;
    #line 253 
    i = enic->rfs_h.free;
    #line 254 
    if (i <= 0) {
      #line 255 
      (enic->rfs_h.free) ++;
      #line 256 
      res = -16;
      #line 257 
      goto ret_unlock;
    }
    #line 260 
    n = (struct enic_rfs_fltr_node *)kmalloc(96UL,2592U);
    #line 261 
    if (n == (struct enic_rfs_fltr_node *)0) {
      #line 262 
      res = -12;
      #line 263 
      (enic->rfs_h.free) ++;
      #line 264 
      goto ret_unlock;
    }
    #line 267 
    res = enic_addfltr_5t(enic,& keys,(unsigned short)((int)rxq_index));
    #line 268 
    if (res < 0) {
      #line 269 
      kfree((void *)n);
      #line 270 
      (enic->rfs_h.free) ++;
      #line 271 
      goto ret_unlock;
    }
    #line 273 
    n->rq_id = rxq_index;
    #line 274 
    n->fltr_id = (unsigned short)res;
    #line 275 
    n->flow_id = flow_id;
    #line 276 
    n->keys = keys;
    #line 277 
    INIT_HLIST_NODE(& n->node);
    #line 278 
    hlist_add_head(& n->node,& enic->rfs_h.ht_head[(int)tbl_idx]);
  }
  #line 281 
  ret_unlock: 
              #line 281 
  ;
  #line 282 
  cif_spin_unlock_bh_lock_of_enic_rfs_flw_tbl_0(& enic->rfs_h.lock);
  #line 283 
  return res;
}

#line 94  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cisco/enic/enic.ko/concurrency safety/0/concurrency safety/weaver/enic_clsf.i.aux"
#line 94 
int emg_del_timer_sync(struct timer_list *arg0);
#line 97 
#line 97 
int emg_mod_timer(struct timer_list *arg0, unsigned long arg1);
#line 321  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cisco/enic/enic.ko/concurrency safety/0/concurrency safety/weaver/enic_clsf.i.aux"
static void *kmalloc(size_t size, gfp_t flags)
{
  #line 324 
  return ldv_kmalloc(size,flags);
}

#line 649  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cisco/enic/enic.ko/concurrency safety/0/concurrency safety/weaver/enic_clsf.i.aux"
static int cif_mod_timer(struct timer_list *timer, unsigned long expires)
{
  #line 653 
  return emg_mod_timer(timer,expires);
}

#line 657  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cisco/enic/enic.ko/concurrency safety/0/concurrency safety/weaver/enic_clsf.i.aux"
static int cif_del_timer_sync(struct timer_list *timer)
{
  #line 661 
  return emg_del_timer_sync(timer);
}

#line 665  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cisco/enic/enic.ko/concurrency safety/0/concurrency safety/weaver/enic_clsf.i.aux"
static void cif_spin_lock_bh_devcmd_lock_of_enic_1(spinlock_t *lock)
{
  #line 668 
  ldv_spin_model_lock((char *)"devcmd_lock_of_enic");
  #line 670 
  spin_lock_bh_1(lock);
  #line 671 
  return;
}

#line 674  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cisco/enic/enic.ko/concurrency safety/0/concurrency safety/weaver/enic_clsf.i.aux"
static void cif_spin_unlock_bh_devcmd_lock_of_enic_1(spinlock_t *lock)
{
  #line 677 
  ldv_spin_model_unlock((char *)"devcmd_lock_of_enic");
  #line 679 
  spin_unlock_bh_1(lock);
  #line 680 
  return;
}

#line 683  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cisco/enic/enic.ko/concurrency safety/0/concurrency safety/weaver/enic_clsf.i.aux"
static void cif_spin_lock_bh_lock_of_enic_rfs_flw_tbl_0(spinlock_t *lock)
{
  #line 686 
  ldv_spin_model_lock((char *)"lock_of_enic_rfs_flw_tbl");
  #line 688 
  spin_lock_bh_1(lock);
  #line 689 
  return;
}

#line 692  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cisco/enic/enic.ko/concurrency safety/0/concurrency safety/weaver/enic_clsf.i.aux"
static void cif_spin_unlock_bh_lock_of_enic_rfs_flw_tbl_0(spinlock_t *lock)
{
  #line 695 
  ldv_spin_model_unlock((char *)"lock_of_enic_rfs_flw_tbl");
  #line 697 
  spin_unlock_bh_1(lock);
  #line 698 
  return;
}

#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_api_smp.h"
#line 22 
void _raw_spin_lock(raw_spinlock_t *);
#line 39 
#line 39 
void _raw_spin_unlock(raw_spinlock_t *);
#line 336  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static void spin_lock(spinlock_t *lock)
{
  #line 338 
  _raw_spin_lock(& lock->__anonCompField_spinlock_25.rlock);
  #line 339 
  return;
}

#line 340 
#line 649  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cisco/enic/enic.ko/concurrency safety/0/concurrency safety/weaver/enic_api.i.aux"
static void cif_spin_lock_enic_api_lock_of_enic(spinlock_t *lock);
#line 341  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static void spin_lock_bh_2(spinlock_t *lock)
{
  #line 343 
  _raw_spin_lock_bh(& lock->__anonCompField_spinlock_25.rlock);
  #line 344 
  return;
}

#line 345 
#line 658  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cisco/enic/enic.ko/concurrency safety/0/concurrency safety/weaver/enic_api.i.aux"
static void cif_spin_lock_bh_devcmd_lock_of_enic_2(spinlock_t *lock);
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static void spin_unlock(spinlock_t *lock)
{
  #line 378 
  _raw_spin_unlock(& lock->__anonCompField_spinlock_25.rlock);
  #line 379 
  return;
}

#line 380 
#line 676  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cisco/enic/enic.ko/concurrency safety/0/concurrency safety/weaver/enic_api.i.aux"
static void cif_spin_unlock_enic_api_lock_of_enic(spinlock_t *lock);
#line 381  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static void spin_unlock_bh_2(spinlock_t *lock)
{
  #line 383 
  _raw_spin_unlock_bh(& lock->__anonCompField_spinlock_25.rlock);
  #line 384 
  return;
}

#line 385 
#line 667  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cisco/enic/enic.ko/concurrency safety/0/concurrency safety/weaver/enic_api.i.aux"
static void cif_spin_unlock_bh_devcmd_lock_of_enic_2(spinlock_t *lock);
#line 127  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/vnic_dev.h"
#line 127 
int vnic_dev_cmd(struct vnic_dev *vdev, enum vnic_devcmd_cmd cmd, u64 *a0, u64 *a1, int wait);
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/enic_api.h"
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/enic_api.c"
int enic_api_devcmd_proxy_by_index(struct net_device *netdev, int vf, enum vnic_devcmd_cmd cmd, u64 *a0, u64 *a1, int wait);
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/enic_api.c"
int enic_api_devcmd_proxy_by_index(struct net_device *netdev, int vf, enum vnic_devcmd_cmd cmd, u64 *a0, u64 *a1, int wait)
{
  #line 32 
  int err;
  #line 33 
  struct enic *enic = netdev_priv(netdev);
  #line 34 
  struct vnic_dev *vdev = enic->vdev;
  #line 36 
  cif_spin_lock_enic_api_lock_of_enic(& enic->enic_api_lock);
  #line 37 
  cif_spin_lock_bh_devcmd_lock_of_enic_2(& enic->devcmd_lock);
  #line 39 
  vnic_dev_cmd_proxy_by_index_start(vdev,(unsigned short)((int)((unsigned short)vf)));
  #line 40 
  err = vnic_dev_cmd(vdev,cmd,a0,a1,wait);
  #line 41 
  vnic_dev_cmd_proxy_end(vdev);
  #line 43 
  cif_spin_unlock_bh_devcmd_lock_of_enic_2(& enic->devcmd_lock);
  #line 44 
  cif_spin_unlock_enic_api_lock_of_enic(& enic->enic_api_lock);
  #line 46 
  return err;
}

#line 649  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cisco/enic/enic.ko/concurrency safety/0/concurrency safety/weaver/enic_api.i.aux"
static void cif_spin_lock_enic_api_lock_of_enic(spinlock_t *lock)
{
  #line 652 
  ldv_spin_model_lock((char *)"enic_api_lock_of_enic");
  #line 654 
  spin_lock(lock);
  #line 655 
  return;
}

#line 658  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cisco/enic/enic.ko/concurrency safety/0/concurrency safety/weaver/enic_api.i.aux"
static void cif_spin_lock_bh_devcmd_lock_of_enic_2(spinlock_t *lock)
{
  #line 661 
  ldv_spin_model_lock((char *)"devcmd_lock_of_enic");
  #line 663 
  spin_lock_bh_2(lock);
  #line 664 
  return;
}

#line 667  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cisco/enic/enic.ko/concurrency safety/0/concurrency safety/weaver/enic_api.i.aux"
static void cif_spin_unlock_bh_devcmd_lock_of_enic_2(spinlock_t *lock)
{
  #line 670 
  ldv_spin_model_unlock((char *)"devcmd_lock_of_enic");
  #line 672 
  spin_unlock_bh_2(lock);
  #line 673 
  return;
}

#line 676  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cisco/enic/enic.ko/concurrency safety/0/concurrency safety/weaver/enic_api.i.aux"
static void cif_spin_unlock_enic_api_lock_of_enic(spinlock_t *lock)
{
  #line 679 
  ldv_spin_model_unlock((char *)"enic_api_lock_of_enic");
  #line 681 
  spin_unlock(lock);
  #line 682 
  return;
}

#line 341  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static void spin_lock_bh_3(spinlock_t *lock)
{
  #line 343 
  _raw_spin_lock_bh(& lock->__anonCompField_spinlock_25.rlock);
  #line 344 
  return;
}

#line 345 
#line 650  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cisco/enic/enic.ko/concurrency safety/0/concurrency safety/weaver/enic_dev.i.aux"
static void cif_spin_lock_bh_devcmd_lock_of_enic_3(spinlock_t *lock);
#line 381  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static void spin_unlock_bh_3(spinlock_t *lock)
{
  #line 383 
  _raw_spin_unlock_bh(& lock->__anonCompField_spinlock_25.rlock);
  #line 384 
  return;
}

#line 385 
#line 659  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cisco/enic/enic.ko/concurrency safety/0/concurrency safety/weaver/enic_dev.i.aux"
static void cif_spin_unlock_bh_devcmd_lock_of_enic_3(spinlock_t *lock);
#line 116  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/etherdevice.h"
__inline static bool is_multicast_ether_addr(u8 *addr)
{
  #line 119 
  u32 a = *((u32 *)addr);
  #line 126 
  return (_Bool)((a & 1U) != 0U);
}

#line 191  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/etherdevice.h"
__inline static bool is_valid_ether_addr(u8 *addr)
{
  #line 195 
  int tmp_1;
  #line 195 
  if (is_multicast_ether_addr(addr)) 
                                     #line 195 
                                     tmp_1 = 0;
  else {
    #line 195 
    if (is_zero_ether_addr(addr)) 
                                  #line 195 
                                  tmp_1 = 0; else 
                                                  #line 195 
                                                  tmp_1 = 1;
  }
  #line 195 
  return (_Bool)(tmp_1 != 0);
}

#line 131  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/vnic_dev.h"
#line 131 
int vnic_dev_fw_info(struct vnic_dev *vdev, struct vnic_devcmd_fw_info **fw_info);
#line 135 
#line 135 
int vnic_dev_stats_dump(struct vnic_dev *vdev, struct vnic_stats **stats);
#line 136 
#line 136 
int vnic_dev_hang_notify(struct vnic_dev *vdev);
#line 137 
#line 137 
int vnic_dev_packet_filter(struct vnic_dev *vdev, int directed, int multicast, int broadcast, int promisc, int allmulti);
#line 143 
#line 143 
int vnic_dev_notify_unset(struct vnic_dev *vdev);
#line 149 
#line 149 
int vnic_dev_enable_wait(struct vnic_dev *vdev);
#line 150 
#line 150 
int vnic_dev_disable(struct vnic_dev *vdev);
#line 156 
#line 156 
int vnic_dev_intr_coal_timer_info(struct vnic_dev *vdev);
#line 168 
#line 168 
int vnic_dev_set_ig_vlan_rewrite_mode(struct vnic_dev *vdev, u8 ig_vlan_rewrite_mode);
#line 141  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/enic_res.h"
#line 141 
int enic_add_vlan(struct enic *enic, u16 vlanid);
#line 142 
#line 142 
int enic_del_vlan(struct enic *enic, u16 vlanid);
#line 44  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/enic_dev.h"
#line 50  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/enic_dev.c"
int enic_dev_add_station_addr(struct enic *enic);
#line 45  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/enic_dev.h"
#line 64  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/enic_dev.c"
int enic_dev_del_station_addr(struct enic *enic);
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/enic_dev.h"
#line 78  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/enic_dev.c"
int enic_dev_packet_filter(struct enic *enic, int directed, int multicast, int broadcast, int promisc, int allmulti);
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/enic_dev.h"
#line 91  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/enic_dev.c"
int enic_dev_add_addr(struct enic *enic, u8 *addr);
#line 49  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/enic_dev.h"
#line 102  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/enic_dev.c"
int enic_dev_del_addr(struct enic *enic, u8 *addr);
#line 50  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/enic_dev.h"
#line 181  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/enic_dev.c"
int enic_vlan_rx_add_vid(struct net_device *netdev, __be16 proto, u16 vid);
#line 51  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/enic_dev.h"
#line 194  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/enic_dev.c"
int enic_vlan_rx_kill_vid(struct net_device *netdev, __be16 proto, u16 vid);
#line 52  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/enic_dev.h"
#line 113  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/enic_dev.c"
int enic_dev_notify_unset(struct enic *enic);
#line 53  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/enic_dev.h"
#line 124  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/enic_dev.c"
int enic_dev_hang_notify(struct enic *enic);
#line 54  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/enic_dev.h"
#line 135  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/enic_dev.c"
int enic_dev_set_ig_vlan_rewrite_mode(struct enic *enic);
#line 55  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/enic_dev.h"
#line 147  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/enic_dev.c"
int enic_dev_enable(struct enic *enic);
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/enic_dev.h"
#line 158  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/enic_dev.c"
int enic_dev_disable(struct enic *enic);
#line 57  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/enic_dev.h"
#line 169  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/enic_dev.c"
int enic_dev_intr_coal_timer_info(struct enic *enic);
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/enic_dev.c"
int enic_dev_fw_info(struct enic *enic, struct vnic_devcmd_fw_info **fw_info)
{
  #line 30 
  int err;
  #line 32 
  cif_spin_lock_bh_devcmd_lock_of_enic_3(& enic->devcmd_lock);
  #line 33 
  err = vnic_dev_fw_info(enic->vdev,fw_info);
  #line 34 
  cif_spin_unlock_bh_devcmd_lock_of_enic_3(& enic->devcmd_lock);
  #line 36 
  return err;
}

#line 39  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/enic_dev.c"
int enic_dev_stats_dump(struct enic *enic, struct vnic_stats **vstats)
{
  #line 41 
  int err;
  #line 43 
  cif_spin_lock_bh_devcmd_lock_of_enic_3(& enic->devcmd_lock);
  #line 44 
  err = vnic_dev_stats_dump(enic->vdev,vstats);
  #line 45 
  cif_spin_unlock_bh_devcmd_lock_of_enic_3(& enic->devcmd_lock);
  #line 47 
  return err;
}

#line 50  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/enic_dev.c"
int enic_dev_add_station_addr(struct enic *enic)
{
  #line 52 
  int err;
  #line 54 
  if (! is_valid_ether_addr((enic->netdev)->dev_addr)) 
                                                       #line 55 
                                                       return -99;
  #line 57 
  cif_spin_lock_bh_devcmd_lock_of_enic_3(& enic->devcmd_lock);
  #line 58 
  err = vnic_dev_add_addr(enic->vdev,(enic->netdev)->dev_addr);
  #line 59 
  cif_spin_unlock_bh_devcmd_lock_of_enic_3(& enic->devcmd_lock);
  #line 61 
  return err;
}

#line 64  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/enic_dev.c"
int enic_dev_del_station_addr(struct enic *enic)
{
  #line 66 
  int err;
  #line 68 
  if (! is_valid_ether_addr((enic->netdev)->dev_addr)) 
                                                       #line 69 
                                                       return -99;
  #line 71 
  cif_spin_lock_bh_devcmd_lock_of_enic_3(& enic->devcmd_lock);
  #line 72 
  err = vnic_dev_del_addr(enic->vdev,(enic->netdev)->dev_addr);
  #line 73 
  cif_spin_unlock_bh_devcmd_lock_of_enic_3(& enic->devcmd_lock);
  #line 75 
  return err;
}

#line 78  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/enic_dev.c"
int enic_dev_packet_filter(struct enic *enic, int directed, int multicast, int broadcast, int promisc, int allmulti)
{
  #line 81 
  int err;
  #line 83 
  cif_spin_lock_bh_devcmd_lock_of_enic_3(& enic->devcmd_lock);
  #line 84 
  err = vnic_dev_packet_filter(enic->vdev,directed,multicast,broadcast,promisc,allmulti);
  #line 86 
  cif_spin_unlock_bh_devcmd_lock_of_enic_3(& enic->devcmd_lock);
  #line 88 
  return err;
}

#line 91  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/enic_dev.c"
int enic_dev_add_addr(struct enic *enic, u8 *addr)
{
  #line 93 
  int err;
  #line 95 
  cif_spin_lock_bh_devcmd_lock_of_enic_3(& enic->devcmd_lock);
  #line 96 
  err = vnic_dev_add_addr(enic->vdev,addr);
  #line 97 
  cif_spin_unlock_bh_devcmd_lock_of_enic_3(& enic->devcmd_lock);
  #line 99 
  return err;
}

#line 102  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/enic_dev.c"
int enic_dev_del_addr(struct enic *enic, u8 *addr)
{
  #line 104 
  int err;
  #line 106 
  cif_spin_lock_bh_devcmd_lock_of_enic_3(& enic->devcmd_lock);
  #line 107 
  err = vnic_dev_del_addr(enic->vdev,addr);
  #line 108 
  cif_spin_unlock_bh_devcmd_lock_of_enic_3(& enic->devcmd_lock);
  #line 110 
  return err;
}

#line 113  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/enic_dev.c"
int enic_dev_notify_unset(struct enic *enic)
{
  #line 115 
  int err;
  #line 117 
  cif_spin_lock_bh_devcmd_lock_of_enic_3(& enic->devcmd_lock);
  #line 118 
  err = vnic_dev_notify_unset(enic->vdev);
  #line 119 
  cif_spin_unlock_bh_devcmd_lock_of_enic_3(& enic->devcmd_lock);
  #line 121 
  return err;
}

#line 124  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/enic_dev.c"
int enic_dev_hang_notify(struct enic *enic)
{
  #line 126 
  int err;
  #line 128 
  cif_spin_lock_bh_devcmd_lock_of_enic_3(& enic->devcmd_lock);
  #line 129 
  err = vnic_dev_hang_notify(enic->vdev);
  #line 130 
  cif_spin_unlock_bh_devcmd_lock_of_enic_3(& enic->devcmd_lock);
  #line 132 
  return err;
}

#line 135  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/enic_dev.c"
int enic_dev_set_ig_vlan_rewrite_mode(struct enic *enic)
{
  #line 137 
  int err;
  #line 139 
  cif_spin_lock_bh_devcmd_lock_of_enic_3(& enic->devcmd_lock);
  #line 140 
  err = vnic_dev_set_ig_vlan_rewrite_mode(enic->vdev,(unsigned char)2);
  #line 142 
  cif_spin_unlock_bh_devcmd_lock_of_enic_3(& enic->devcmd_lock);
  #line 144 
  return err;
}

#line 147  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/enic_dev.c"
int enic_dev_enable(struct enic *enic)
{
  #line 149 
  int err;
  #line 151 
  cif_spin_lock_bh_devcmd_lock_of_enic_3(& enic->devcmd_lock);
  #line 152 
  err = vnic_dev_enable_wait(enic->vdev);
  #line 153 
  cif_spin_unlock_bh_devcmd_lock_of_enic_3(& enic->devcmd_lock);
  #line 155 
  return err;
}

#line 158  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/enic_dev.c"
int enic_dev_disable(struct enic *enic)
{
  #line 160 
  int err;
  #line 162 
  cif_spin_lock_bh_devcmd_lock_of_enic_3(& enic->devcmd_lock);
  #line 163 
  err = vnic_dev_disable(enic->vdev);
  #line 164 
  cif_spin_unlock_bh_devcmd_lock_of_enic_3(& enic->devcmd_lock);
  #line 166 
  return err;
}

#line 169  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/enic_dev.c"
int enic_dev_intr_coal_timer_info(struct enic *enic)
{
  #line 171 
  int err;
  #line 173 
  cif_spin_lock_bh_devcmd_lock_of_enic_3(& enic->devcmd_lock);
  #line 174 
  err = vnic_dev_intr_coal_timer_info(enic->vdev);
  #line 175 
  cif_spin_unlock_bh_devcmd_lock_of_enic_3(& enic->devcmd_lock);
  #line 177 
  return err;
}

#line 181  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/enic_dev.c"
int enic_vlan_rx_add_vid(struct net_device *netdev, __be16 proto, u16 vid)
{
  #line 184 
  int err;
  #line 183 
  struct enic *enic = netdev_priv(netdev);
  #line 186 
  cif_spin_lock_bh_devcmd_lock_of_enic_3(& enic->devcmd_lock);
  #line 187 
  err = enic_add_vlan(enic,(unsigned short)((int)vid));
  #line 188 
  cif_spin_unlock_bh_devcmd_lock_of_enic_3(& enic->devcmd_lock);
  #line 190 
  return err;
}

#line 194  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/enic_dev.c"
int enic_vlan_rx_kill_vid(struct net_device *netdev, __be16 proto, u16 vid)
{
  #line 197 
  int err;
  #line 196 
  struct enic *enic = netdev_priv(netdev);
  #line 199 
  cif_spin_lock_bh_devcmd_lock_of_enic_3(& enic->devcmd_lock);
  #line 200 
  err = enic_del_vlan(enic,(unsigned short)((int)vid));
  #line 201 
  cif_spin_unlock_bh_devcmd_lock_of_enic_3(& enic->devcmd_lock);
  #line 203 
  return err;
}

#line 206  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/enic_dev.c"
int enic_dev_status_to_errno(int devcmd_status)
{
  #line 208 
  switch (devcmd_status) {
    #line 234 
    int tmp;
    #line 209 
    case 0: 
            #line 209 
    ;
    #line 210 
    return 0;
    #line 211 
    case 1: 
            #line 211 
    ;
    #line 212 
    return -22;
    #line 213 
    case 2: 
            #line 213 
    ;
    #line 214 
    return -14;
    #line 215 
    case 3: 
            #line 215 
    ;
    #line 216 
    return -1;
    #line 217 
    case 4: 
            #line 217 
    ;
    #line 218 
    return -16;
    #line 219 
    case 5: 
            #line 219 
    ;
    #line 220 
    case 11: 
             #line 220 
    ;
    #line 221 
    return -95;
    #line 222 
    case 6: 
            #line 222 
    ;
    #line 223 
    return -22;
    #line 224 
    case 7: 
            #line 224 
    ;
    #line 225 
    return -12;
    #line 226 
    case 8: 
            #line 226 
    ;
    #line 227 
    return -110;
    #line 228 
    case 9: 
            #line 228 
    ;
    #line 229 
    return -100;
    #line 230 
    case 12: 
             #line 230 
    ;
    #line 231 
    return -115;
    #line 232 
    case 10: 
             #line 232 
    ;
    #line 233 
    default: 
             #line 233 
    ;
    #line 234 
    if (-1 < devcmd_status) 
                            #line 234 
                            tmp = -1; else 
                                           #line 234 
                                           tmp = devcmd_status;
    #line 234 
    return tmp;
  }
}

#line 650  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cisco/enic/enic.ko/concurrency safety/0/concurrency safety/weaver/enic_dev.i.aux"
static void cif_spin_lock_bh_devcmd_lock_of_enic_3(spinlock_t *lock)
{
  #line 653 
  ldv_spin_model_lock((char *)"devcmd_lock_of_enic");
  #line 655 
  spin_lock_bh_3(lock);
  #line 656 
  return;
}

#line 659  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cisco/enic/enic.ko/concurrency safety/0/concurrency safety/weaver/enic_dev.i.aux"
static void cif_spin_unlock_bh_devcmd_lock_of_enic_3(spinlock_t *lock)
{
  #line 662 
  ldv_spin_model_unlock((char *)"devcmd_lock_of_enic");
  #line 664 
  spin_unlock_bh_3(lock);
  #line 665 
  return;
}

/* compiler builtin: 
   void __builtin_unreachable(void);   */
#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/io.h"
__inline static u64 readq(void *addr)
{
  #line 95 
  u64 ret;
  #line 96 
  ldv_inline_asm();
  #line 95 
  return ret;
}

#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/iomap.h"
#line 29 
unsigned int ioread8(void *);
#line 1714  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
#line 1714 
void _dev_warn(struct device *, char * , ...);
#line 668  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/slab.h"
#line 476  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cisco/enic/enic.ko/concurrency safety/0/concurrency safety/weaver/vnic_dev.i.aux"
static void *kzalloc_0(size_t size, gfp_t flags);
#line 442  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
#line 442 
void *dma_alloc_attrs(struct device *, size_t, dma_addr_t *, gfp_t, unsigned long);
#line 444 
#line 444 
void dma_free_attrs(struct device *, size_t, void *, dma_addr_t, unsigned long);
#line 641  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static void *dma_alloc_coherent(struct device *dev, size_t size, dma_addr_t *dma_handle, gfp_t gfp)
{
  #line 645 
  return dma_alloc_attrs(dev,size,dma_handle,gfp,
                      (unsigned long)(gfp >> 5) & 256UL);
}

#line 649  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static void dma_free_coherent(struct device *dev, size_t size, void *cpu_addr, dma_addr_t dma_handle)
{
  #line 652 
  dma_free_attrs(dev,size,cpu_addr,dma_handle,0UL);
  #line 653 
  return;
}

#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci-dma-compat.h"
__inline static void *pci_alloc_consistent(struct pci_dev *hwdev, size_t size, dma_addr_t *dma_handle)
{
  #line 20 
  return dma_alloc_coherent(& hwdev->dev,size,dma_handle,2592U);
}

#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci-dma-compat.h"
__inline static void pci_free_consistent(struct pci_dev *hwdev, size_t size, void *vaddr, dma_addr_t dma_handle)
{
  #line 34 
  dma_free_coherent(& hwdev->dev,size,vaddr,dma_handle);
  #line 35 
  return;
}

#line 117  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/vnic_dev.h"
#line 39  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/vnic_dev.c"
void *vnic_dev_priv(struct vnic_dev *vdev);
#line 118  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/vnic_dev.h"
#line 133  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/vnic_dev.c"
unsigned int vnic_dev_get_res_count(struct vnic_dev *vdev, enum vnic_res_type type);
#line 133  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/vnic_dev.h"
#line 577  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/vnic_dev.c"
int vnic_dev_spec(struct vnic_dev *vdev, unsigned int offset, unsigned int size, void *value);
#line 141  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/vnic_dev.h"
#line 738  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/vnic_dev.c"
int vnic_dev_get_mac_addr(struct vnic_dev *vdev, u8 *mac_addr);
#line 142  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/vnic_dev.h"
#line 844  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/vnic_dev.c"
int vnic_dev_notify_set(struct vnic_dev *vdev, u16 intr);
#line 144  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/vnic_dev.h"
#line 984  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/vnic_dev.c"
int vnic_dev_link_status(struct vnic_dev *vdev);
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/vnic_dev.h"
#line 1000  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/vnic_dev.c"
u32 vnic_dev_msg_lvl(struct vnic_dev *vdev);
#line 147  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/vnic_dev.h"
#line 1008  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/vnic_dev.c"
u32 vnic_dev_mtu(struct vnic_dev *vdev);
#line 148  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/vnic_dev.h"
#line 619  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/vnic_dev.c"
int vnic_dev_close(struct vnic_dev *vdev);
#line 151  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/vnic_dev.h"
#line 644  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/vnic_dev.c"
int vnic_dev_open(struct vnic_dev *vdev, int arg);
#line 152  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/vnic_dev.h"
#line 651  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/vnic_dev.c"
int vnic_dev_open_done(struct vnic_dev *vdev, int *done);
#line 153  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/vnic_dev.h"
#line 915  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/vnic_dev.c"
int vnic_dev_init(struct vnic_dev *vdev, int arg);
#line 155  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/vnic_dev.h"
#line 944  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/vnic_dev.c"
void vnic_dev_intr_coal_timer_info_default(struct vnic_dev *vdev);
#line 157  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/vnic_dev.h"
#line 692  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/vnic_dev.c"
int vnic_dev_hang_reset(struct vnic_dev *vdev, int arg);
#line 158  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/vnic_dev.h"
#line 668  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/vnic_dev.c"
int vnic_dev_soft_reset(struct vnic_dev *vdev, int arg);
#line 159  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/vnic_dev.h"
#line 709  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/vnic_dev.c"
int vnic_dev_hang_reset_done(struct vnic_dev *vdev, int *done);
#line 160  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/vnic_dev.h"
#line 675  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/vnic_dev.c"
int vnic_dev_soft_reset_done(struct vnic_dev *vdev, int *done);
#line 161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/vnic_dev.h"
#line 1016  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/vnic_dev.c"
void vnic_dev_set_intr_mode(struct vnic_dev *vdev, enum vnic_dev_intr_mode intr_mode);
#line 164  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/vnic_dev.h"
#line 1028  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/vnic_dev.c"
u32 vnic_dev_intr_coal_timer_usec_to_hw(struct vnic_dev *vdev, u32 usec);
#line 165  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/vnic_dev.h"
#line 1034  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/vnic_dev.c"
u32 vnic_dev_intr_coal_timer_hw_to_usec(struct vnic_dev *vdev, u32 hw_cycles);
#line 167  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/vnic_dev.h"
#line 1045  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/vnic_dev.c"
void vnic_dev_unregister(struct vnic_dev *vdev);
#line 170  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/vnic_dev.h"
#line 1069  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/vnic_dev.c"
struct vnic_dev *vnic_dev_register(struct vnic_dev *vdev, void *priv, struct pci_dev *pdev, struct vnic_dev_bar *bar, unsigned int num_bars);
#line 173  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/vnic_dev.h"
#line 1093  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/vnic_dev.c"
struct pci_dev *vnic_dev_get_pdev(struct vnic_dev *vdev);
#line 178  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/vnic_dev.h"
#line 1179  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/vnic_dev.c"
int vnic_dev_set_mac_addr(struct vnic_dev *vdev, u8 *mac_addr);
#line 181  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/vnic_dev.h"
#line 1099  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/vnic_dev.c"
int vnic_devcmd_init(struct vnic_dev *vdev);
#line 182  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/vnic_dev.h"
#line 1252  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/vnic_dev.c"
int vnic_dev_overlay_offload_ctrl(struct vnic_dev *vdev, u8 overlay, u8 config);
#line 183  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/vnic_dev.h"
#line 1261  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/vnic_dev.c"
int vnic_dev_overlay_offload_cfg(struct vnic_dev *vdev, u8 overlay, u16 vxlan_udp_port_number);
#line 185  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/vnic_dev.h"
#line 1271  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/vnic_dev.c"
int vnic_dev_get_supported_feature_ver(struct vnic_dev *vdev, u8 feature, u64 *supported_versions, u64 *a1);
#line 4752  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
#line 4752 
void netdev_warn(struct net_device *, char * , ...);
#line 39  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/vnic_dev.c"
void *vnic_dev_priv(struct vnic_dev *vdev)
{
  #line 41 
  return vdev->priv;
}

#line 44  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/vnic_dev.c"
static int vnic_dev_discover_res(struct vnic_dev *vdev, struct vnic_dev_bar *bar, unsigned int num_bars)
{
  #line 47 
  struct vnic_resource_header *rh;
  #line 48 
  struct mgmt_barmap_hdr *mrh;
  #line 49 
  struct vnic_resource *r;
  #line 50 
  u8 type;
  #line 52 
  if (num_bars == 0U) 
                      #line 53 
                      return -22;
  #line 55 
  if (bar->len <= 307UL) {
    #line 56 
    _dev_err(& (vdev->pdev)->dev,(char *)"vNIC BAR0 res hdr length error\n");
    #line 57 
    return -22;
  }
  #line 60 
  rh = (struct vnic_resource_header *)bar->vaddr;
  #line 61 
  mrh = (struct mgmt_barmap_hdr *)bar->vaddr;
  #line 62 
  if (rh == (struct vnic_resource_header *)0) {
    #line 63 
    _dev_err(& (vdev->pdev)->dev,(char *)"vNIC BAR0 res hdr not mem-mapped\n");
    #line 64 
    return -22;
  }
  #line 68 
  if (ioread32((void *)(& rh->magic)) != 1986947427U) 
                                                      #line 68 
                                                      goto _LOR_0;
  else {
    #line 68 
    if (ioread32((void *)(& rh->version)) != 0U) {
      #line 68 
      _LOR_0: 
      #line 70 
      if (ioread32((void *)(& mrh->magic)) != 1414350669U) 
                                                           #line 70 
                                                           goto _LOR;
      else {
        #line 70 
        if (ioread32((void *)(& mrh->version)) != 0U) {
          #line 70 
          _LOR: {
                  #line 72 
                  ;
                  #line 72 
                  _dev_err(& (vdev->pdev)->dev,(char *)"vNIC BAR0 res magic/version error exp (%lx/%lx) or (%lx/%lx), curr (%x/%x)\n",1986947427L,0L,1414350669L,0L,ioread32((void *)(& rh->magic)),ioread32((void *)(& rh->version)));
                  #line 76 
                  return -22;
                }
        }
      }
    }
  }
  #line 80 
  if (ioread32((void *)(& mrh->magic)) == 1414350669U) 
                                                       #line 81 
                                                       r = (struct vnic_resource *)(mrh + 1U); else 
                                                                    #line 83 
                                                                    r = (struct vnic_resource *)(rh + 1U);
  #line 86 
  while (1) {
    #line 86 
    type = (unsigned char)ioread8((void *)(& r->type));
    #line 86 
    if (! ((unsigned int)type != 0U)) 
                                      #line 86 
                                      break;
    {
      #line 91 
      u32 len;
      #line 88 
      u8 bar_num = (unsigned char)ioread8((void *)(& r->bar));
      #line 89 
      u32 bar_offset = ioread32((void *)(& r->bar_offset));
      #line 90 
      u32 count = ioread32((void *)(& r->count));
      #line 93 
      r ++;
      #line 95 
      if ((unsigned int)bar_num >= num_bars) 
                                             #line 96 
                                             continue;
      #line 98 
      if ((bar + (unsigned long)bar_num)->len == 0UL || (bar + (unsigned long)bar_num)->vaddr == (void *)0) 
        #line 99 
        continue;
      #line 101 
      switch ((int)type) {
        #line 102 
        case 1: 
                #line 102 
        ;
        #line 103 
        case 2: 
                #line 103 
        ;
        #line 104 
        case 3: 
                #line 104 
        ;
        #line 105 
        case 10: 
                 #line 105 
        ;
        #line 107 
        len = count * 128U;
        #line 108 
        if ((unsigned long)(len + bar_offset) > (bar + (unsigned long)bar_num)->len) {
          #line 109 
          _dev_err(& (vdev->pdev)->dev,(char *)"vNIC BAR0 resource %d out-of-bounds, offset 0x%x + size 0x%x > bar len 0x%lx\n",(int)type,bar_offset,len,(bar + (unsigned long)bar_num)->len);
          #line 112 
          return -22;
        }
        #line 114 
        break;
        #line 115 
        case 13: 
                 #line 115 
        ;
        #line 116 
        case 16: 
                 #line 116 
        ;
        #line 117 
        case 24: 
                 #line 117 
        ;
        #line 118 
        len = count;
        #line 119 
        break;
        #line 120 
        default: 
                 #line 120 
        ;
        #line 121 
        continue;
      }
      #line 124 
      vdev->res[(int)type].count = count;
      #line 125 
      vdev->res[(int)type].vaddr = (void *)((char *)(bar + (unsigned long)bar_num)->vaddr + (unsigned long)bar_offset);
      #line 127 
      vdev->res[(int)type].bus_addr = (bar + (unsigned long)bar_num)->bus_addr + (unsigned long long)bar_offset;
    }
  }
  #line 130 
  return 0;
}

#line 133  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/vnic_dev.c"
unsigned int vnic_dev_get_res_count(struct vnic_dev *vdev, enum vnic_res_type type)
{
  #line 136 
  return vdev->res[(unsigned int)type].count;
}

#line 140  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/vnic_dev.c"
void *vnic_dev_get_res(struct vnic_dev *vdev, enum vnic_res_type type, unsigned int index)
{
  #line 143 
  if (vdev->res[(unsigned int)type].vaddr == (void *)0) 
                                                        #line 144 
                                                        return (void *)0;
  #line 146 
  switch ((unsigned int)type) {
    #line 147 
    case (unsigned int)1: 
                          #line 147 
    ;
    #line 148 
    case (unsigned int)2: 
                          #line 148 
    ;
    #line 149 
    case (unsigned int)3: 
                          #line 149 
    ;
    #line 150 
    case (unsigned int)10: 
                           #line 150 
    ;
    #line 151 
    return (void *)((char *)vdev->res[(unsigned int)type].vaddr + (unsigned long)(index * 128U));
    #line 153 
    default: 
             #line 153 
    ;
    #line 154 
    return vdev->res[(unsigned int)type].vaddr;
  }
}

#line 159  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/vnic_dev.c"
static unsigned int vnic_dev_desc_ring_size(struct vnic_dev_ring *ring, unsigned int desc_count, unsigned int desc_size)
{
  #line 168 
  unsigned int count_align = 32U;
  #line 169 
  unsigned int desc_align = 16U;
  #line 171 
  ring->base_align = 512UL;
  #line 173 
  if (desc_count == 0U) 
                        #line 174 
                        desc_count = 4096U;
  #line 176 
  ring->desc_count = ((count_align + desc_count) + 4294967295U) & - count_align;
  #line 178 
  ring->desc_size = ((desc_align + desc_size) + 4294967295U) & - desc_align;
  #line 180 
  ring->size = (unsigned long)(ring->desc_count * ring->desc_size);
  #line 181 
  ring->size_unaligned = ring->size + ring->base_align;
  #line 183 
  return (unsigned int)ring->size_unaligned;
}

#line 186  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/vnic_dev.c"
void vnic_dev_clear_desc_ring(struct vnic_dev_ring *ring)
{
  #line 188 
  memset(ring->descs,0,ring->size);
  #line 189 
  return;
}

#line 191  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/vnic_dev.c"
int vnic_dev_alloc_desc_ring(struct vnic_dev *vdev, struct vnic_dev_ring *ring, unsigned int desc_count, unsigned int desc_size)
{
  #line 194 
  vnic_dev_desc_ring_size(ring,desc_count,desc_size);
  #line 196 
  ring->descs_unaligned = pci_alloc_consistent(vdev->pdev,ring->size_unaligned,& ring->base_addr_unaligned);
  #line 200 
  if (ring->descs_unaligned == (void *)0) {
    #line 201 
    _dev_err(& (vdev->pdev)->dev,(char *)"Failed to allocate ring (size=%d), aborting\n",(int)ring->size);
    #line 203 
    return -12;
  }
  #line 206 
  ring->base_addr = ((ring->base_addr_unaligned + (unsigned long long)ring->base_align) + 18446744073709551615ULL) & - ((unsigned long long)ring->base_align);
  #line 208 
  ring->descs = (void *)((u8 *)ring->descs_unaligned + (ring->base_addr - ring->base_addr_unaligned));
  #line 211 
  vnic_dev_clear_desc_ring(ring);
  #line 213 
  ring->desc_avail = ring->desc_count + 4294967295U;
  #line 215 
  return 0;
}

#line 218  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/vnic_dev.c"
void vnic_dev_free_desc_ring(struct vnic_dev *vdev, struct vnic_dev_ring *ring)
{
  #line 220 
  if (ring->descs != (void *)0) {
    #line 221 
    pci_free_consistent(vdev->pdev,ring->size_unaligned,ring->descs_unaligned,ring->base_addr_unaligned);
    #line 225 
    ring->descs = (void *)0;
  }
  #line 227 
  return;
}

#line 229  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/vnic_dev.c"
static int _vnic_dev_cmd(struct vnic_dev *vdev, enum vnic_devcmd_cmd cmd, int wait)
{
  #line 233 
  unsigned int i;
  #line 234 
  int delay;
  #line 235 
  u32 status;
  #line 236 
  int err;
  #line 232 
  struct vnic_devcmd *devcmd = vdev->devcmd;
  #line 238 
  status = ioread32((void *)(& devcmd->status));
  #line 239 
  if (status == 4294967295U) 
                             #line 241 
                             return -19;
  #line 243 
  if ((status & 1U) != 0U) {
    #line 244 
    ;
    #line 244 
    netdev_err(vnic_get_netdev(vdev),(char *)"Busy devcmd %d\n",(unsigned int)cmd & 16383U);
    #line 245 
    return -16;
  }
  #line 248 
  if (((unsigned int)cmd & 1073741824U) != 0U) {
    #line 249 
    i = 0U;
    #line 249 
    while (i <= 14U) {
      #line 250 
      writeq(vdev->args[i],(void *)(& devcmd->args[i]));
      #line 249 
      i ++;
    }
    #line 251 
    ldv_inline_asm();
  }
  #line 254 
  iowrite32((unsigned int)cmd,(void *)(& devcmd->cmd));
  #line 256 
  if (((unsigned int)cmd & 16777216U) != 0U) 
                                             #line 257 
                                             return 0;
  #line 259 
  delay = 0;
  #line 259 
  while (delay < wait) {
    #line 261 
    __const_udelay(429500UL);
    #line 263 
    status = ioread32((void *)(& devcmd->status));
    #line 264 
    if (status == 4294967295U) 
                               #line 266 
                               return -19;
    #line 269 
    if ((status & 1U) == 0U) {
      #line 271 
      if ((status & 2U) != 0U) {
        #line 272 
        err = (int)readq((void *)(& devcmd->args[0]));
        #line 273 
        if (err == 1 && cmd == CMD_CAPABILITY) 
                                               #line 275 
                                               return - err;
        #line 276 
        if (err != 5 || cmd != CMD_CAPABILITY) {
          #line 278 
          ;
          #line 278 
          ;
          #line 278 
          netdev_err(vnic_get_netdev(vdev),(char *)"Error %d devcmd %d\n",err,(unsigned int)cmd & 16383U);
        }
        #line 280 
        return - err;
      }
      #line 283 
      if (((unsigned int)cmd & 2147483648U) != 0U) {
        #line 285 
        ldv_inline_asm();
        #line 285 
        i = 0U;
        #line 285 
        while (i <= 14U) {
          #line 286 
          vdev->args[i] = readq((void *)(& devcmd->args[i]));
          #line 285 
          i ++;
        }
      }
      #line 289 
      return 0;
    }
    #line 259 
    delay ++;
  }
  #line 293 
  ;
  #line 293 
  netdev_err(vnic_get_netdev(vdev),(char *)"Timedout devcmd %d\n",(unsigned int)cmd & 16383U);
  #line 294 
  return -110;
}

#line 297  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/vnic_dev.c"
static int _vnic_dev_cmd2(struct vnic_dev *vdev, enum vnic_devcmd_cmd cmd, int wait)
{
  #line 301 
  struct devcmd2_result *result;
  #line 302 
  u8 color;
  #line 303 
  unsigned int i;
  #line 304 
  int delay;
  #line 304 
  int err;
  #line 305 
  u32 fetch_index;
  #line 305 
  u32 new_posted;
  #line 300 
  struct devcmd2_controller *dc2c = vdev->devcmd2;
  #line 306 
  u32 posted = dc2c->posted;
  #line 308 
  fetch_index = ioread32((void *)(& (dc2c->wq_ctrl)->fetch_index));
  #line 310 
  if (fetch_index == 4294967295U) 
                                  #line 311 
                                  return -19;
  #line 313 
  new_posted = (posted + 1U) & 31U;
  #line 315 
  if (new_posted == fetch_index) {
    #line 316 
    ;
    #line 316 
    ;
    #line 316 
    ;
    #line 316 
    netdev_err(vnic_get_netdev(vdev),(char *)"devcmd2 %d: wq is full. fetch index: %u, posted index: %u\n",(unsigned int)cmd & 16383U,fetch_index,posted);
    #line 318 
    return -16;
  }
  #line 320 
  (dc2c->cmd_ring + (unsigned long)posted)->cmd = (unsigned int)cmd;
  #line 321 
  (dc2c->cmd_ring + (unsigned long)posted)->flags = (unsigned short)0U;
  #line 323 
  if (((unsigned int)cmd & 16777216U) != 0U) 
                                             #line 324 
                                             (dc2c->cmd_ring + (unsigned long)posted)->flags = (unsigned short)((unsigned int)(dc2c->cmd_ring + (unsigned long)posted)->flags | 1U);
  #line 325 
  if (((unsigned int)cmd & 1073741824U) != 0U) {
    #line 326 
    i = 0U;
    #line 326 
    while (i <= 14U) {
      #line 327 
      (dc2c->cmd_ring + (unsigned long)posted)->args[i] = vdev->args[i];
      #line 326 
      i ++;
    }
  }
  #line 329 
  ldv_inline_asm();
  #line 334 
  iowrite32(new_posted,(void *)(& (dc2c->wq_ctrl)->posted_index));
  #line 335 
  dc2c->posted = new_posted;
  #line 337 
  if (((int)(dc2c->cmd_ring + (unsigned long)posted)->flags & 1) != 0) 
    #line 338 
    return 0;
  #line 340 
  result = dc2c->result + (unsigned long)dc2c->next_result;
  #line 341 
  color = (unsigned char)dc2c->color;
  #line 343 
  dc2c->next_result = (u16)((int)dc2c->next_result + 1);
  #line 344 
  if ((int)dc2c->next_result == (int)dc2c->result_size) {
    #line 345 
    dc2c->next_result = (unsigned short)0U;
    #line 346 
    dc2c->color = dc2c->color == 0;
  }
  #line 349 
  delay = 0;
  #line 349 
  while (delay < wait) {
    #line 350 
    if ((int)result->color == (int)color) {
      #line 351 
      if ((unsigned int)result->error != 0U) {
        #line 352 
        err = (int)result->error;
        #line 353 
        if (err != 5 || cmd != CMD_CAPABILITY) {
          #line 355 
          ;
          #line 355 
          ;
          #line 355 
          netdev_err(vnic_get_netdev(vdev),(char *)"Error %d devcmd %d\n",err,(unsigned int)cmd & 16383U);
        }
        #line 357 
        return - err;
      }
      #line 359 
      if (((unsigned int)cmd & 2147483648U) != 0U) {
        #line 360 
        i = 0U;
        #line 360 
        while (i <= 14U) {
          #line 361 
          vdev->args[i] = result->results[i];
          #line 360 
          i ++;
        }
      }
      #line 363 
      return 0;
    }
    #line 365 
    __const_udelay(429500UL);
    #line 349 
    delay ++;
  }
  #line 368 
  ;
  #line 368 
  netdev_err(vnic_get_netdev(vdev),(char *)"devcmd %d timed out\n",(unsigned int)cmd & 16383U);
  #line 370 
  return -110;
}

#line 373  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/vnic_dev.c"
static int vnic_dev_init_devcmd1(struct vnic_dev *vdev)
{
  #line 375 
  vdev->devcmd = (struct vnic_devcmd *)vnic_dev_get_res(vdev,(enum vnic_res_type)RES_TYPE_DEVCMD,0U);
  #line 376 
  if (vdev->devcmd == (struct vnic_devcmd *)0) 
                                               #line 377 
                                               return -19;
  #line 378 
  vdev->devcmd_rtn = & _vnic_dev_cmd;
  #line 380 
  return 0;
}

#line 383  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/vnic_dev.c"
static int vnic_dev_init_devcmd2(struct vnic_dev *vdev)
{
  #line 385 
  int err;
  #line 386 
  unsigned int fetch_index;
  #line 388 
  if (vdev->devcmd2 != (struct devcmd2_controller *)0) 
                                                       #line 389 
                                                       return 0;
  #line 391 
  vdev->devcmd2 = (struct devcmd2_controller *)kzalloc_0(744UL,3264U);
  #line 392 
  if (vdev->devcmd2 == (struct devcmd2_controller *)0) 
                                                       #line 393 
                                                       return -12;
  #line 395 
  (vdev->devcmd2)->color = 1;
  #line 396 
  (vdev->devcmd2)->result_size = (unsigned short)32U;
  #line 397 
  err = enic_wq_devcmd2_alloc(vdev,& (vdev->devcmd2)->wq,32U,128U);
  #line 399 
  if (err != 0) 
                #line 400 
                goto err_free_devcmd2;
  #line 402 
  fetch_index = ioread32((void *)(& ((vdev->devcmd2)->wq.ctrl)->fetch_index));
  #line 403 
  if (fetch_index == 4294967295U) {
    #line 404 
    _dev_err(& (vdev->pdev)->dev,(char *)"Fatal error in devcmd2 init - hardware surprise removal\n");
    #line 405 
    err = -19;
    #line 406 
    goto err_free_wq;
  }
  #line 409 
  enic_wq_init_start(& (vdev->devcmd2)->wq,0U,fetch_index,fetch_index,0U,0U);
  #line 411 
  (vdev->devcmd2)->posted = fetch_index;
  #line 412 
  vnic_wq_enable(& (vdev->devcmd2)->wq);
  #line 414 
  err = vnic_dev_alloc_desc_ring(vdev,& (vdev->devcmd2)->results_ring,32U,128U);
  #line 416 
  if (err != 0) 
                #line 417 
                goto err_disable_wq;
  #line 419 
  (vdev->devcmd2)->result = (struct devcmd2_result *)(vdev->devcmd2)->results_ring.descs;
  #line 420 
  (vdev->devcmd2)->cmd_ring = (struct vnic_devcmd2 *)(vdev->devcmd2)->wq.ring.descs;
  #line 421 
  (vdev->devcmd2)->wq_ctrl = (vdev->devcmd2)->wq.ctrl;
  #line 422 
  vdev->args[0] = (vdev->devcmd2)->results_ring.base_addr;
  #line 424 
  vdev->args[1] = 32ULL;
  #line 426 
  err = _vnic_dev_cmd2(vdev,(enum vnic_devcmd_cmd)CMD_INITIALIZE_DEVCMD2,1000);
  #line 427 
  if (err != 0) 
                #line 428 
                goto err_free_desc_ring;
  #line 430 
  vdev->devcmd_rtn = & _vnic_dev_cmd2;
  #line 432 
  return 0;
  #line 434 
  err_free_desc_ring: 
                      #line 434 
  ;
  #line 435 
  vnic_dev_free_desc_ring(vdev,& (vdev->devcmd2)->results_ring);
  #line 436 
  err_disable_wq: 
                  #line 436 
  ;
  #line 437 
  vnic_wq_disable(& (vdev->devcmd2)->wq);
  #line 438 
  err_free_wq: 
               #line 438 
  ;
  #line 439 
  vnic_wq_free(& (vdev->devcmd2)->wq);
  #line 440 
  err_free_devcmd2: 
                    #line 440 
  ;
  #line 441 
  kfree((void *)vdev->devcmd2);
  #line 442 
  vdev->devcmd2 = (struct devcmd2_controller *)0;
  #line 444 
  return err;
}

#line 447  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/vnic_dev.c"
static void vnic_dev_deinit_devcmd2(struct vnic_dev *vdev)
{
  #line 449 
  vnic_dev_free_desc_ring(vdev,& (vdev->devcmd2)->results_ring);
  #line 450 
  vnic_wq_disable(& (vdev->devcmd2)->wq);
  #line 451 
  vnic_wq_free(& (vdev->devcmd2)->wq);
  #line 452 
  kfree((void *)vdev->devcmd2);
  #line 453 
  return;
}

#line 455  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/vnic_dev.c"
static int vnic_dev_cmd_proxy(struct vnic_dev *vdev, enum vnic_devcmd_cmd proxy_cmd, enum vnic_devcmd_cmd cmd, u64 *a0, u64 *a1, int wait)
{
  #line 459 
  u32 status;
  #line 460 
  int err;
  #line 462 
  memset((void *)(& vdev->args),0,120UL);
  #line 464 
  vdev->args[0] = (unsigned long long)vdev->proxy_index;
  #line 465 
  vdev->args[1] = (unsigned long long)cmd;
  #line 466 
  vdev->args[2] = *a0;
  #line 467 
  vdev->args[3] = *a1;
  #line 469 
  err = (*(vdev->devcmd_rtn))(vdev,proxy_cmd,wait);
  #line 470 
  if (err != 0) 
                #line 471 
                return err;
  #line 473 
  status = (unsigned int)vdev->args[0];
  #line 474 
  if ((status & 2U) != 0U) {
    #line 475 
    err = (int)vdev->args[1];
    #line 476 
    if (err != 5 || cmd != CMD_CAPABILITY) {
      #line 478 
      ;
      #line 478 
      ;
      #line 478 
      netdev_err(vnic_get_netdev(vdev),(char *)"Error %d proxy devcmd %d\n",err,(unsigned int)cmd & 16383U);
    }
    #line 480 
    return err;
  }
  #line 483 
  *a0 = vdev->args[1];
  #line 484 
  *a1 = vdev->args[2];
  #line 486 
  return 0;
}

#line 489  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/vnic_dev.c"
static int vnic_dev_cmd_no_proxy(struct vnic_dev *vdev, enum vnic_devcmd_cmd cmd, u64 *a0, u64 *a1, int wait)
{
  #line 492 
  int err;
  #line 494 
  vdev->args[0] = *a0;
  #line 495 
  vdev->args[1] = *a1;
  #line 497 
  err = (*(vdev->devcmd_rtn))(vdev,cmd,wait);
  #line 499 
  *a0 = vdev->args[0];
  #line 500 
  *a1 = vdev->args[1];
  #line 502 
  return err;
}

#line 505  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/vnic_dev.c"
void vnic_dev_cmd_proxy_by_index_start(struct vnic_dev *vdev, u16 index)
{
  #line 507 
  vdev->proxy = PROXY_BY_INDEX;
  #line 508 
  vdev->proxy_index = (unsigned int)index;
  #line 509 
  return;
}

#line 511  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/vnic_dev.c"
void vnic_dev_cmd_proxy_end(struct vnic_dev *vdev)
{
  #line 513 
  vdev->proxy = PROXY_NONE;
  #line 514 
  vdev->proxy_index = 0U;
  #line 515 
  return;
}

#line 517  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/vnic_dev.c"
int vnic_dev_cmd(struct vnic_dev *vdev, enum vnic_devcmd_cmd cmd, u64 *a0, u64 *a1, int wait)
{
  #line 520 
  memset((void *)(& vdev->args),0,120UL);
  #line 522 
  switch ((unsigned int)vdev->proxy) {
    #line 523 
    case (unsigned int)2: 
                          #line 523 
    ;
    #line 524 
    return vnic_dev_cmd_proxy(vdev,(enum vnic_devcmd_cmd)CMD_PROXY_BY_INDEX,cmd,
                         a0,a1,wait);
    #line 526 
    case (unsigned int)1: 
                          #line 526 
    ;
    #line 527 
    return vnic_dev_cmd_proxy(vdev,(enum vnic_devcmd_cmd)CMD_PROXY_BY_BDF,cmd,
                           a0,a1,wait);
    #line 529 
    case (unsigned int)0: 
                          #line 529 
    ;
    #line 530 
    default: 
             #line 530 
    ;
    #line 531 
    return vnic_dev_cmd_no_proxy(vdev,cmd,a0,a1,wait);
  }
}

#line 535  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/vnic_dev.c"
static int vnic_dev_capable(struct vnic_dev *vdev, enum vnic_devcmd_cmd cmd)
{
  #line 539 
  int err;
  #line 537 
  u64 a0 = (unsigned long long)cmd;
  #line 537 
  u64 a1 = 0ULL;
  #line 538 
  int wait = 1000;
  #line 541 
  err = vnic_dev_cmd(vdev,(enum vnic_devcmd_cmd)CMD_CAPABILITY,& a0,& a1,wait);
  #line 543 
  return (err == 0 && a0 == 0ULL) != 0;
}

#line 546  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/vnic_dev.c"
int vnic_dev_fw_info(struct vnic_dev *vdev, struct vnic_devcmd_fw_info **fw_info)
{
  #line 549 
  u64 a0;
  #line 549 
  u64 a1 = 0ULL;
  #line 550 
  int wait = 1000;
  #line 551 
  int err = 0;
  #line 553 
  if (vdev->fw_info == (struct vnic_devcmd_fw_info *)0) {
    #line 554 
    vdev->fw_info = (struct vnic_devcmd_fw_info *)pci_alloc_consistent(vdev->pdev,132UL,& vdev->fw_info_pa);
    #line 557 
    if (vdev->fw_info == (struct vnic_devcmd_fw_info *)0) 
                                                          #line 558 
                                                          return -12;
    #line 560 
    a0 = vdev->fw_info_pa;
    #line 561 
    a1 = 132ULL;
    #line 564 
    if (vnic_dev_capable(vdev,(enum vnic_devcmd_cmd)CMD_MCPU_FW_INFO) != 0) 
      #line 565 
      err = vnic_dev_cmd(vdev,(enum vnic_devcmd_cmd)CMD_MCPU_FW_INFO,& a0,& a1,wait); else 
                                                                    #line 568 
                                                                    err = vnic_dev_cmd(vdev,(enum vnic_devcmd_cmd)CMD_MCPU_FW_INFO_OLD,& a0,& a1,wait);
  }
  #line 572 
  *fw_info = vdev->fw_info;
  #line 574 
  return err;
}

#line 577  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/vnic_dev.c"
int vnic_dev_spec(struct vnic_dev *vdev, unsigned int offset, unsigned int size, void *value)
{
  #line 580 
  u64 a0;
  #line 580 
  u64 a1;
  #line 582 
  int err;
  #line 581 
  int wait = 1000;
  #line 584 
  a0 = (unsigned long long)offset;
  #line 585 
  a1 = (unsigned long long)size;
  #line 587 
  err = vnic_dev_cmd(vdev,(enum vnic_devcmd_cmd)CMD_DEV_SPEC,& a0,& a1,wait);
  #line 589 
  switch (size) {
    #line 590 
    case (unsigned int)1: 
                          #line 590 
    ;
    #line 590 
    *((u8 *)value) = (unsigned char)a0;
    #line 590 
    break;
    #line 591 
    case (unsigned int)2: 
                          #line 591 
    ;
    #line 591 
    *((u16 *)value) = (unsigned short)a0;
    #line 591 
    break;
    #line 592 
    case (unsigned int)4: 
                          #line 592 
    ;
    #line 592 
    *((u32 *)value) = (unsigned int)a0;
    #line 592 
    break;
    #line 593 
    case (unsigned int)8: 
                          #line 593 
    ;
    #line 593 
    *((u64 *)value) = a0;
    #line 593 
    break;
    #line 594 
    default: 
             #line 594 
    ;
    #line 595 
    ldv_inline_asm();
    #line 596 
    ldv_inline_asm();
    #line 597 
    ldv_inline_asm();
    #line 594 
    ;
    #line 594 
    break;
  }
  #line 597 
  return err;
}

#line 600  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/vnic_dev.c"
int vnic_dev_stats_dump(struct vnic_dev *vdev, struct vnic_stats **stats)
{
  #line 602 
  u64 a0;
  #line 602 
  u64 a1;
  #line 603 
  int wait = 1000;
  #line 605 
  if (vdev->stats == (struct vnic_stats *)0) {
    #line 606 
    vdev->stats = (struct vnic_stats *)pci_alloc_consistent(vdev->pdev,512UL,& vdev->stats_pa);
    #line 608 
    if (vdev->stats == (struct vnic_stats *)0) 
                                               #line 609 
                                               return -12;
  }
  #line 612 
  *stats = vdev->stats;
  #line 613 
  a0 = vdev->stats_pa;
  #line 614 
  a1 = 512ULL;
  #line 616 
  return vnic_dev_cmd(vdev,(enum vnic_devcmd_cmd)CMD_STATS_DUMP,& a0,& a1,
                     wait);
}

#line 619  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/vnic_dev.c"
int vnic_dev_close(struct vnic_dev *vdev)
{
  #line 621 
  u64 a0 = 0ULL;
  #line 621 
  u64 a1 = 0ULL;
  #line 622 
  int wait = 1000;
  #line 623 
  return vnic_dev_cmd(vdev,(enum vnic_devcmd_cmd)CMD_CLOSE,& a0,& a1,wait);
}

#line 626  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/vnic_dev.c"
int vnic_dev_enable_wait(struct vnic_dev *vdev)
{
  #line 628 
  u64 a0 = 0ULL;
  #line 628 
  u64 a1 = 0ULL;
  #line 629 
  int wait = 1000;
  #line 631 
  if (vnic_dev_capable(vdev,(enum vnic_devcmd_cmd)CMD_ENABLE_WAIT) != 0) {
    #line 632 
    return vnic_dev_cmd(vdev,(enum vnic_devcmd_cmd)CMD_ENABLE_WAIT,& a0,& a1,wait);
  }
  else {
    #line 634 
    return vnic_dev_cmd(vdev,(enum vnic_devcmd_cmd)CMD_ENABLE,& a0,& a1,wait);
  }
}

#line 637  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/vnic_dev.c"
int vnic_dev_disable(struct vnic_dev *vdev)
{
  #line 639 
  u64 a0 = 0ULL;
  #line 639 
  u64 a1 = 0ULL;
  #line 640 
  int wait = 1000;
  #line 641 
  return vnic_dev_cmd(vdev,(enum vnic_devcmd_cmd)CMD_DISABLE,& a0,& a1,wait);
}

#line 644  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/vnic_dev.c"
int vnic_dev_open(struct vnic_dev *vdev, int arg)
{
  #line 646 
  u64 a0 = (unsigned long long)((unsigned int)arg);
  #line 646 
  u64 a1 = 0ULL;
  #line 647 
  int wait = 1000;
  #line 648 
  return vnic_dev_cmd(vdev,(enum vnic_devcmd_cmd)CMD_OPEN,& a0,& a1,wait);
}

#line 651  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/vnic_dev.c"
int vnic_dev_open_done(struct vnic_dev *vdev, int *done)
{
  #line 655 
  int err;
  #line 653 
  u64 a0 = 0ULL;
  #line 653 
  u64 a1 = 0ULL;
  #line 654 
  int wait = 1000;
  #line 657 
  *done = 0;
  #line 659 
  err = vnic_dev_cmd(vdev,(enum vnic_devcmd_cmd)CMD_OPEN_STATUS,& a0,& a1,wait);
  #line 660 
  if (err != 0) 
                #line 661 
                return err;
  #line 663 
  *done = a0 == 0ULL;
  #line 665 
  return 0;
}

#line 668  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/vnic_dev.c"
int vnic_dev_soft_reset(struct vnic_dev *vdev, int arg)
{
  #line 670 
  u64 a0 = (unsigned long long)((unsigned int)arg);
  #line 670 
  u64 a1 = 0ULL;
  #line 671 
  int wait = 1000;
  #line 672 
  return vnic_dev_cmd(vdev,(enum vnic_devcmd_cmd)CMD_SOFT_RESET,& a0,& a1,wait);
}

#line 675  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/vnic_dev.c"
int vnic_dev_soft_reset_done(struct vnic_dev *vdev, int *done)
{
  #line 679 
  int err;
  #line 677 
  u64 a0 = 0ULL;
  #line 677 
  u64 a1 = 0ULL;
  #line 678 
  int wait = 1000;
  #line 681 
  *done = 0;
  #line 683 
  err = vnic_dev_cmd(vdev,(enum vnic_devcmd_cmd)CMD_SOFT_RESET_STATUS,& a0,& a1,wait);
  #line 684 
  if (err != 0) 
                #line 685 
                return err;
  #line 687 
  *done = a0 == 0ULL;
  #line 689 
  return 0;
}

#line 692  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/vnic_dev.c"
int vnic_dev_hang_reset(struct vnic_dev *vdev, int arg)
{
  #line 696 
  int err;
  #line 694 
  u64 a0 = (unsigned long long)((unsigned int)arg);
  #line 694 
  u64 a1 = 0ULL;
  #line 695 
  int wait = 1000;
  #line 698 
  if (vnic_dev_capable(vdev,(enum vnic_devcmd_cmd)CMD_HANG_RESET) != 0) {
    #line 699 
    return vnic_dev_cmd(vdev,(enum vnic_devcmd_cmd)CMD_HANG_RESET,& a0,& a1,wait);
  }
  else {
    #line 702 
    err = vnic_dev_soft_reset(vdev,arg);
    #line 703 
    if (err != 0) 
                  #line 704 
                  return err;
    #line 705 
    return vnic_dev_init(vdev,0);
  }
}

#line 709  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/vnic_dev.c"
int vnic_dev_hang_reset_done(struct vnic_dev *vdev, int *done)
{
  #line 713 
  int err;
  #line 711 
  u64 a0 = 0ULL;
  #line 711 
  u64 a1 = 0ULL;
  #line 712 
  int wait = 1000;
  #line 715 
  *done = 0;
  #line 717 
  if (vnic_dev_capable(vdev,(enum vnic_devcmd_cmd)CMD_HANG_RESET_STATUS) != 0) {
    #line 718 
    err = vnic_dev_cmd(vdev,(enum vnic_devcmd_cmd)CMD_HANG_RESET_STATUS,& a0,& a1,wait);
    #line 720 
    if (err != 0) 
                  #line 721 
                  return err;
  }
  else {
    #line 723 
    return vnic_dev_soft_reset_done(vdev,done);
  }
  #line 726 
  *done = a0 == 0ULL;
  #line 728 
  return 0;
}

#line 731  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/vnic_dev.c"
int vnic_dev_hang_notify(struct vnic_dev *vdev)
{
  #line 733 
  u64 a0;
  #line 733 
  u64 a1;
  #line 734 
  int wait = 1000;
  #line 735 
  return vnic_dev_cmd(vdev,(enum vnic_devcmd_cmd)CMD_HANG_NOTIFY,& a0,& a1,wait);
}

#line 738  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/vnic_dev.c"
int vnic_dev_get_mac_addr(struct vnic_dev *vdev, u8 *mac_addr)
{
  #line 740 
  u64 a0;
  #line 740 
  u64 a1;
  #line 742 
  int err;
  #line 742 
  int i;
  #line 741 
  int wait = 1000;
  #line 744 
  i = 0;
  #line 744 
  while (i <= 5) {
    #line 745 
    *(mac_addr + (unsigned long)i) = (unsigned char)0U;
    #line 744 
    i ++;
  }
  #line 747 
  err = vnic_dev_cmd(vdev,(enum vnic_devcmd_cmd)CMD_GET_MAC_ADDR,& a0,& a1,wait);
  #line 748 
  if (err != 0) 
                #line 749 
                return err;
  #line 751 
  i = 0;
  #line 751 
  while (i <= 5) {
    #line 752 
    *(mac_addr + (unsigned long)i) = *((u8 *)(& a0) + (unsigned long)i);
    #line 751 
    i ++;
  }
  #line 754 
  return 0;
}

#line 757  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/vnic_dev.c"
int vnic_dev_packet_filter(struct vnic_dev *vdev, int directed, int multicast, int broadcast, int promisc, int allmulti)
{
  #line 760 
  u64 a0;
  #line 762 
  int err;
  #line 764 
  int tmp;
  #line 765 
  int tmp_0;
  #line 766 
  int tmp_1;
  #line 767 
  int tmp_2;
  #line 760 
  u64 a1 = 0ULL;
  #line 761 
  int wait = 1000;
  #line 764 
  if (multicast != 0) 
                      #line 764 
                      tmp = 2; else 
                                    #line 764 
                                    tmp = 0;
  #line 765 
  if (broadcast != 0) 
                      #line 765 
                      tmp_0 = 4; else 
                                      #line 765 
                                      tmp_0 = 0;
  #line 766 
  if (promisc != 0) 
                    #line 766 
                    tmp_1 = 8; else 
                                    #line 766 
                                    tmp_1 = 0;
  #line 767 
  if (allmulti != 0) 
                     #line 767 
                     tmp_2 = 16; else 
                                      #line 767 
                                      tmp_2 = 0;
  #line 764 
  a0 = (unsigned long long)(((((directed != 0) | tmp) | tmp_0) | tmp_1) | tmp_2);
  #line 770 
  err = vnic_dev_cmd(vdev,(enum vnic_devcmd_cmd)CMD_PACKET_FILTER,& a0,& a1,wait);
  #line 771 
  if (err != 0) {
    #line 772 
    netdev_err(vnic_get_netdev(vdev),(char *)"Can\'t set packet filter\n");
  }
  #line 774 
  return err;
}

#line 777  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/vnic_dev.c"
int vnic_dev_add_addr(struct vnic_dev *vdev, u8 *addr)
{
  #line 781 
  int err;
  #line 782 
  int i;
  #line 779 
  u64 a0 = 0ULL;
  #line 779 
  u64 a1 = 0ULL;
  #line 780 
  int wait = 1000;
  #line 784 
  i = 0;
  #line 784 
  while (i <= 5) {
    #line 785 
    *((u8 *)(& a0) + (unsigned long)i) = *(addr + (unsigned long)i);
    #line 784 
    i ++;
  }
  #line 787 
  err = vnic_dev_cmd(vdev,(enum vnic_devcmd_cmd)CMD_ADDR_ADD,& a0,& a1,wait);
  #line 788 
  if (err != 0) {
    #line 789 
    ;
    #line 789 
    ;
    #line 789 
    netdev_err(vnic_get_netdev(vdev),(char *)"Can\'t add addr [%pM], %d\n",addr,err);
  }
  #line 791 
  return err;
}

#line 794  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/vnic_dev.c"
int vnic_dev_del_addr(struct vnic_dev *vdev, u8 *addr)
{
  #line 798 
  int err;
  #line 799 
  int i;
  #line 796 
  u64 a0 = 0ULL;
  #line 796 
  u64 a1 = 0ULL;
  #line 797 
  int wait = 1000;
  #line 801 
  i = 0;
  #line 801 
  while (i <= 5) {
    #line 802 
    *((u8 *)(& a0) + (unsigned long)i) = *(addr + (unsigned long)i);
    #line 801 
    i ++;
  }
  #line 804 
  err = vnic_dev_cmd(vdev,(enum vnic_devcmd_cmd)CMD_ADDR_DEL,& a0,& a1,wait);
  #line 805 
  if (err != 0) {
    #line 806 
    ;
    #line 806 
    ;
    #line 806 
    netdev_err(vnic_get_netdev(vdev),(char *)"Can\'t del addr [%pM], %d\n",addr,err);
  }
  #line 808 
  return err;
}

#line 811  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/vnic_dev.c"
int vnic_dev_set_ig_vlan_rewrite_mode(struct vnic_dev *vdev, u8 ig_vlan_rewrite_mode)
{
  #line 814 
  u64 a0 = (unsigned long long)ig_vlan_rewrite_mode;
  #line 814 
  u64 a1 = 0ULL;
  #line 815 
  int wait = 1000;
  #line 817 
  if (vnic_dev_capable(vdev,(enum vnic_devcmd_cmd)CMD_IG_VLAN_REWRITE_MODE) != 0) {
    #line 818 
    return vnic_dev_cmd(vdev,(enum vnic_devcmd_cmd)CMD_IG_VLAN_REWRITE_MODE,& a0,
                   & a1,wait);
  }
  else 
       #line 821 
       return 0;
}

#line 824  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/vnic_dev.c"
static int vnic_dev_notify_setcmd(struct vnic_dev *vdev, void *notify_addr, dma_addr_t notify_pa, u16 intr)
{
  #line 827 
  u64 a0;
  #line 827 
  u64 a1;
  #line 829 
  int r;
  #line 828 
  int wait = 1000;
  #line 831 
  memset(notify_addr,0,40UL);
  #line 832 
  vdev->notify = (struct vnic_devcmd_notify *)notify_addr;
  #line 833 
  vdev->notify_pa = notify_pa;
  #line 835 
  a0 = notify_pa;
  #line 836 
  a1 = ((unsigned long long)intr << 32) & 281470681743360ULL;
  #line 837 
  a1 += 40ULL;
  #line 839 
  r = vnic_dev_cmd(vdev,(enum vnic_devcmd_cmd)CMD_NOTIFY,& a0,& a1,wait);
  #line 840 
  if (r == 0) 
              #line 840 
              vdev->notify_sz = (unsigned int)a1; else 
                                                       #line 840 
                                                       vdev->notify_sz = 0U;
  #line 841 
  return r;
}

#line 844  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/vnic_dev.c"
int vnic_dev_notify_set(struct vnic_dev *vdev, u16 intr)
{
  #line 846 
  void *notify_addr;
  #line 847 
  dma_addr_t notify_pa;
  #line 849 
  if (vdev->notify != (struct vnic_devcmd_notify *)0 || vdev->notify_pa != 0ULL) {
    #line 850 
    ;
    #line 850 
    netdev_err(vnic_get_netdev(vdev),(char *)"notify block %p still allocated\n",vdev->notify);
    #line 852 
    return -22;
  }
  #line 855 
  notify_addr = pci_alloc_consistent(vdev->pdev,40UL,& notify_pa);
  #line 858 
  if (notify_addr == (void *)0) 
                                #line 859 
                                return -12;
  #line 861 
  return vnic_dev_notify_setcmd(vdev,notify_addr,notify_pa,
                               (unsigned short)((int)intr));
}

#line 864  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/vnic_dev.c"
static int vnic_dev_notify_unsetcmd(struct vnic_dev *vdev)
{
  #line 866 
  u64 a0;
  #line 866 
  u64 a1;
  #line 868 
  int err;
  #line 867 
  int wait = 1000;
  #line 870 
  a0 = 0ULL;
  #line 871 
  a1 = 281470681743360ULL;
  #line 872 
  a1 += 40ULL;
  #line 874 
  err = vnic_dev_cmd(vdev,(enum vnic_devcmd_cmd)CMD_NOTIFY,& a0,& a1,wait);
  #line 875 
  vdev->notify = (struct vnic_devcmd_notify *)0;
  #line 876 
  vdev->notify_pa = 0ULL;
  #line 877 
  vdev->notify_sz = 0U;
  #line 879 
  return err;
}

#line 882  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/vnic_dev.c"
int vnic_dev_notify_unset(struct vnic_dev *vdev)
{
  #line 884 
  if (vdev->notify != (struct vnic_devcmd_notify *)0) 
                                                      #line 885 
                                                      pci_free_consistent(vdev->pdev,40UL,(void *)vdev->notify,vdev->notify_pa);
  #line 891 
  return vnic_dev_notify_unsetcmd(vdev);
}

#line 894  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/vnic_dev.c"
static int vnic_dev_notify_ready(struct vnic_dev *vdev)
{
  #line 896 
  u32 *words;
  #line 898 
  unsigned int i;
  #line 899 
  u32 csum;
  #line 897 
  unsigned int nwords = vdev->notify_sz / 4U;
  #line 901 
  if (vdev->notify == (struct vnic_devcmd_notify *)0 || vdev->notify_sz == 0U) 
    #line 902 
    return 0;
  #line 904 
  while (1) {
    #line 905 
    csum = 0U;
    #line 906 
    memcpy((void *)(& vdev->notify_copy),(void *)vdev->notify,(unsigned long)vdev->notify_sz);
    #line 907 
    words = (u32 *)(& vdev->notify_copy);
    #line 908 
    i = 1U;
    #line 908 
    while (i < nwords) {
      #line 909 
      csum = *(words + (unsigned long)i) + csum;
      #line 908 
      i ++;
    }
    #line 910 
    if (! (*words != csum)) 
                            #line 904 
                            break;
  }
  #line 912 
  return 1;
}

#line 915  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/vnic_dev.c"
int vnic_dev_init(struct vnic_dev *vdev, int arg)
{
  #line 917 
  u64 a0 = (unsigned long long)((unsigned int)arg);
  #line 917 
  u64 a1 = 0ULL;
  #line 918 
  int wait = 1000;
  #line 919 
  int r = 0;
  #line 921 
  if (vnic_dev_capable(vdev,(enum vnic_devcmd_cmd)CMD_INIT) != 0) 
                                                                  #line 922 
                                                                  r = vnic_dev_cmd(vdev,(enum vnic_devcmd_cmd)CMD_INIT,& a0,& a1,wait);
  else {
    #line 924 
    vnic_dev_cmd(vdev,(enum vnic_devcmd_cmd)CMD_INIT_v1,& a0,& a1,wait);
    #line 925 
    if ((a0 & 1ULL) != 0ULL) {
      #line 929 
      vnic_dev_cmd(vdev,(enum vnic_devcmd_cmd)CMD_GET_MAC_ADDR,& a0,& a1,wait);
      #line 930 
      vnic_dev_cmd(vdev,(enum vnic_devcmd_cmd)CMD_ADDR_ADD,& a0,& a1,wait);
    }
  }
  #line 933 
  return r;
}

#line 936  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/vnic_dev.c"
int vnic_dev_deinit(struct vnic_dev *vdev)
{
  #line 938 
  u64 a0 = 0ULL;
  #line 938 
  u64 a1 = 0ULL;
  #line 939 
  int wait = 1000;
  #line 941 
  return vnic_dev_cmd(vdev,(enum vnic_devcmd_cmd)CMD_DEINIT,& a0,& a1,wait);
}

#line 944  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/vnic_dev.c"
void vnic_dev_intr_coal_timer_info_default(struct vnic_dev *vdev)
{
  #line 947 
  vdev->intr_coal_timer_info.mul = 2U;
  #line 948 
  vdev->intr_coal_timer_info.div = 3U;
  #line 949 
  vdev->intr_coal_timer_info.max_usec = vnic_dev_intr_coal_timer_hw_to_usec(vdev,65535U);
  #line 951 
  return;
}

#line 953  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/vnic_dev.c"
int vnic_dev_intr_coal_timer_info(struct vnic_dev *vdev)
{
  #line 956 
  int err;
  #line 955 
  int wait = 1000;
  #line 958 
  memset((void *)(& vdev->args),0,120UL);
  #line 960 
  if (vnic_dev_capable(vdev,(enum vnic_devcmd_cmd)CMD_INTR_COAL_CONVERT) != 0) 
    #line 961 
    err = (*(vdev->devcmd_rtn))(vdev,(enum vnic_devcmd_cmd)CMD_INTR_COAL_CONVERT,wait); else 
                                                                    #line 963 
                                                                    err = 5;
  #line 968 
  if (err == 5 || err == 0 && ((vdev->args[0] == 0ULL || vdev->args[1] == 0ULL) || vdev->args[2] == 0ULL)) {
    #line 970 
    netdev_warn(vnic_get_netdev(vdev),(char *)"Using default conversion factor for interrupt coalesce timer\n");
    #line 971 
    vnic_dev_intr_coal_timer_info_default(vdev);
    #line 972 
    return 0;
  }
  #line 975 
  if (err == 0) {
    #line 976 
    vdev->intr_coal_timer_info.mul = (unsigned int)vdev->args[0];
    #line 977 
    vdev->intr_coal_timer_info.div = (unsigned int)vdev->args[1];
    #line 978 
    vdev->intr_coal_timer_info.max_usec = (unsigned int)vdev->args[2];
  }
  #line 981 
  return err;
}

#line 984  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/vnic_dev.c"
int vnic_dev_link_status(struct vnic_dev *vdev)
{
  #line 986 
  if (vnic_dev_notify_ready(vdev) == 0) 
                                        #line 987 
                                        return 0;
  #line 989 
  return (int)vdev->notify_copy.link_state;
}

#line 992  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/vnic_dev.c"
u32 vnic_dev_port_speed(struct vnic_dev *vdev)
{
  #line 994 
  if (vnic_dev_notify_ready(vdev) == 0) 
                                        #line 995 
                                        return 0U;
  #line 997 
  return vdev->notify_copy.port_speed;
}

#line 1000  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/vnic_dev.c"
u32 vnic_dev_msg_lvl(struct vnic_dev *vdev)
{
  #line 1002 
  if (vnic_dev_notify_ready(vdev) == 0) 
                                        #line 1003 
                                        return 0U;
  #line 1005 
  return vdev->notify_copy.msglvl;
}

#line 1008  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/vnic_dev.c"
u32 vnic_dev_mtu(struct vnic_dev *vdev)
{
  #line 1010 
  if (vnic_dev_notify_ready(vdev) == 0) 
                                        #line 1011 
                                        return 0U;
  #line 1013 
  return vdev->notify_copy.mtu;
}

#line 1016  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/vnic_dev.c"
void vnic_dev_set_intr_mode(struct vnic_dev *vdev, enum vnic_dev_intr_mode intr_mode)
{
  #line 1019 
  vdev->intr_mode = intr_mode;
  #line 1020 
  return;
}

#line 1022  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/vnic_dev.c"
enum vnic_dev_intr_mode vnic_dev_get_intr_mode(struct vnic_dev *vdev)
{
  #line 1025 
  return vdev->intr_mode;
}

#line 1028  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/vnic_dev.c"
u32 vnic_dev_intr_coal_timer_usec_to_hw(struct vnic_dev *vdev, u32 usec)
{
  #line 1030 
  return (vdev->intr_coal_timer_info.mul * usec) / vdev->intr_coal_timer_info.div;
}

#line 1034  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/vnic_dev.c"
u32 vnic_dev_intr_coal_timer_hw_to_usec(struct vnic_dev *vdev, u32 hw_cycles)
{
  #line 1036 
  return (vdev->intr_coal_timer_info.div * hw_cycles) / vdev->intr_coal_timer_info.mul;
}

#line 1040  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/vnic_dev.c"
u32 vnic_dev_get_intr_coal_timer_max(struct vnic_dev *vdev)
{
  #line 1042 
  return vdev->intr_coal_timer_info.max_usec;
}

#line 1045  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/vnic_dev.c"
void vnic_dev_unregister(struct vnic_dev *vdev)
{
  #line 1047 
  if (vdev != (struct vnic_dev *)0) {
    #line 1048 
    if (vdev->notify != (struct vnic_devcmd_notify *)0) 
                                                        #line 1049 
                                                        pci_free_consistent(vdev->pdev,40UL,(void *)vdev->notify,vdev->notify_pa);
    #line 1053 
    if (vdev->stats != (struct vnic_stats *)0) 
                                               #line 1054 
                                               pci_free_consistent(vdev->pdev,512UL,(void *)vdev->stats,vdev->stats_pa);
    #line 1057 
    if (vdev->fw_info != (struct vnic_devcmd_fw_info *)0) 
                                                          #line 1058 
                                                          pci_free_consistent(vdev->pdev,132UL,(void *)vdev->fw_info,vdev->fw_info_pa);
    #line 1061 
    if (vdev->devcmd2 != (struct devcmd2_controller *)0) 
                                                         #line 1062 
                                                         vnic_dev_deinit_devcmd2(vdev);
    #line 1064 
    kfree((void *)vdev);
  }
  #line 1066 
  return;
}

#line 1069  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/vnic_dev.c"
struct vnic_dev *vnic_dev_register(struct vnic_dev *vdev, void *priv, struct pci_dev *pdev, struct vnic_dev_bar *bar, unsigned int num_bars)
{
  #line 1073 
  if (vdev == (struct vnic_dev *)0) {
    #line 1074 
    vdev = (struct vnic_dev *)kzalloc_0(896UL,3264U);
    #line 1075 
    if (vdev == (struct vnic_dev *)0) 
                                      #line 1076 
                                      return (struct vnic_dev *)0;
  }
  #line 1079 
  vdev->priv = priv;
  #line 1080 
  vdev->pdev = pdev;
  #line 1082 
  if (vnic_dev_discover_res(vdev,bar,num_bars) != 0) 
                                                     #line 1083 
                                                     goto err_out;
  #line 1085 
  return vdev;
  #line 1087 
  err_out: 
           #line 1087 
  ;
  #line 1088 
  vnic_dev_unregister(vdev);
  #line 1089 
  return (struct vnic_dev *)0;
}

#line 1093  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/vnic_dev.c"
struct pci_dev *vnic_dev_get_pdev(struct vnic_dev *vdev)
{
  #line 1095 
  return vdev->pdev;
}

#line 1099  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/vnic_dev.c"
int vnic_devcmd_init(struct vnic_dev *vdev)
{
  #line 1101 
  void *res;
  #line 1102 
  int err;
  #line 1104 
  res = vnic_dev_get_res(vdev,(enum vnic_res_type)RES_TYPE_DEVCMD2,0U);
  #line 1105 
  if (res != (void *)0) {
    #line 1106 
    err = vnic_dev_init_devcmd2(vdev);
    #line 1107 
    if (err != 0) 
                  #line 1108 
                  _dev_warn(& (vdev->pdev)->dev,(char *)"DEVCMD2 init failed: %d, Using DEVCMD1\n",err); else 
                                                                    #line 1111 
                                                                    return 0;
  }
  else 
       #line 1113 
       _dev_warn(& (vdev->pdev)->dev,(char *)"DEVCMD2 resource not found (old firmware?) Using DEVCMD1\n");
  #line 1115 
  err = vnic_dev_init_devcmd1(vdev);
  #line 1116 
  if (err != 0) 
                #line 1117 
                _dev_err(& (vdev->pdev)->dev,(char *)"DEVCMD1 initialization failed: %d\n",err);
  #line 1119 
  return err;
}

#line 1122  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/vnic_dev.c"
int vnic_dev_init_prov2(struct vnic_dev *vdev, u8 *buf, u32 len)
{
  #line 1124 
  u64 a0;
  #line 1126 
  dma_addr_t prov_pa;
  #line 1127 
  void *prov_buf;
  #line 1128 
  int ret;
  #line 1124 
  u64 a1 = (unsigned long long)len;
  #line 1125 
  int wait = 1000;
  #line 1130 
  prov_buf = pci_alloc_consistent(vdev->pdev,(unsigned long)len,& prov_pa);
  #line 1131 
  if (prov_buf == (void *)0) 
                             #line 1132 
                             return -12;
  #line 1134 
  memcpy(prov_buf,(void *)buf,(unsigned long)len);
  #line 1136 
  a0 = prov_pa;
  #line 1138 
  ret = vnic_dev_cmd(vdev,(enum vnic_devcmd_cmd)CMD_INIT_PROV_INFO2,& a0,& a1,wait);
  #line 1140 
  pci_free_consistent(vdev->pdev,(unsigned long)len,prov_buf,prov_pa);
  #line 1142 
  return ret;
}

#line 1145  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/vnic_dev.c"
int vnic_dev_enable2(struct vnic_dev *vdev, int active)
{
  #line 1147 
  u64 a0;
  #line 1147 
  u64 a1 = 0ULL;
  #line 1148 
  int wait = 1000;
  #line 1150 
  a0 = (unsigned long long)(active != 0);
  #line 1152 
  return vnic_dev_cmd(vdev,(enum vnic_devcmd_cmd)CMD_ENABLE2,& a0,& a1,wait);
}

#line 1155  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/vnic_dev.c"
static int vnic_dev_cmd_status(struct vnic_dev *vdev, enum vnic_devcmd_cmd cmd, int *status)
{
  #line 1160 
  int ret;
  #line 1158 
  u64 a0 = (unsigned long long)cmd;
  #line 1158 
  u64 a1 = 0ULL;
  #line 1159 
  int wait = 1000;
  #line 1162 
  ret = vnic_dev_cmd(vdev,(enum vnic_devcmd_cmd)CMD_STATUS,& a0,& a1,wait);
  #line 1163 
  if (ret == 0) 
                #line 1164 
                *status = (int)a0;
  #line 1166 
  return ret;
}

#line 1169  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/vnic_dev.c"
int vnic_dev_enable2_done(struct vnic_dev *vdev, int *status)
{
  #line 1171 
  return vnic_dev_cmd_status(vdev,(enum vnic_devcmd_cmd)CMD_ENABLE2,status);
}

#line 1174  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/vnic_dev.c"
int vnic_dev_deinit_done(struct vnic_dev *vdev, int *status)
{
  #line 1176 
  return vnic_dev_cmd_status(vdev,(enum vnic_devcmd_cmd)CMD_DEINIT,status);
}

#line 1179  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/vnic_dev.c"
int vnic_dev_set_mac_addr(struct vnic_dev *vdev, u8 *mac_addr)
{
  #line 1181 
  u64 a0;
  #line 1181 
  u64 a1;
  #line 1183 
  int i;
  #line 1182 
  int wait = 1000;
  #line 1185 
  i = 0;
  #line 1185 
  while (i <= 5) {
    #line 1186 
    *((u8 *)(& a0) + (unsigned long)i) = *(mac_addr + (unsigned long)i);
    #line 1185 
    i ++;
  }
  #line 1188 
  return vnic_dev_cmd(vdev,(enum vnic_devcmd_cmd)CMD_SET_MAC_ADDR,& a0,& a1,
                   wait);
}

#line 1205  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/vnic_dev.c"
int vnic_dev_classifier(struct vnic_dev *vdev, u8 cmd, u16 *entry, struct filter *data)
{
  #line 1208 
  u64 a0;
  #line 1208 
  u64 a1;
  #line 1210 
  dma_addr_t tlv_pa;
  #line 1212 
  struct filter_tlv *tlv;
  #line 1212 
  struct filter_tlv *tlv_va;
  #line 1213 
  struct filter_action *action;
  #line 1214 
  u64 tlv_size;
  #line 1209 
  int wait = 1000;
  #line 1211 
  int ret = -22;
  #line 1216 
  if ((unsigned int)cmd == 0U) {
    #line 1217 
    tlv_size = 48ULL;
    #line 1220 
    tlv_va = (struct filter_tlv *)pci_alloc_consistent(vdev->pdev,(unsigned long)tlv_size,& tlv_pa);
    #line 1221 
    if (tlv_va == (struct filter_tlv *)0) 
                                          #line 1222 
                                          return -12;
    #line 1223 
    tlv = tlv_va;
    #line 1224 
    a0 = tlv_pa;
    #line 1225 
    a1 = tlv_size;
    #line 1226 
    memset((void *)tlv,0,(unsigned long)tlv_size);
    #line 1227 
    tlv->type = 0U;
    #line 1228 
    tlv->length = 24U;
    #line 1229 
    *((struct filter *)(& tlv->val)) = *data;
    #line 1231 
    tlv = (struct filter_tlv *)((char *)tlv + 32UL);
    #line 1235 
    tlv->type = 1U;
    #line 1236 
    tlv->length = 8U;
    #line 1237 
    action = (struct filter_action *)(& tlv->val);
    #line 1238 
    action->type = 0U;
    #line 1239 
    action->u.rq_idx = (unsigned int)*entry;
    #line 1241 
    ret = vnic_dev_cmd(vdev,(enum vnic_devcmd_cmd)CMD_ADD_FILTER,& a0,& a1,wait);
    #line 1242 
    *entry = (unsigned short)a0;
    #line 1243 
    pci_free_consistent(vdev->pdev,(unsigned long)tlv_size,(void *)tlv_va,tlv_pa);
  }
  else 
    #line 1244 
    if ((unsigned int)cmd == 1U) {
      #line 1245 
      a0 = (unsigned long long)*entry;
      #line 1246 
      ret = vnic_dev_cmd(vdev,(enum vnic_devcmd_cmd)CMD_DEL_FILTER,& a0,& a1,wait);
    }
  #line 1249 
  return ret;
}

#line 1252  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/vnic_dev.c"
int vnic_dev_overlay_offload_ctrl(struct vnic_dev *vdev, u8 overlay, u8 config)
{
  #line 1254 
  u64 a0 = (unsigned long long)overlay;
  #line 1255 
  u64 a1 = (unsigned long long)config;
  #line 1256 
  int wait = 1000;
  #line 1258 
  return vnic_dev_cmd(vdev,(enum vnic_devcmd_cmd)CMD_OVERLAY_OFFLOAD_CTRL,& a0,
                   & a1,wait);
}

#line 1261  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/vnic_dev.c"
int vnic_dev_overlay_offload_cfg(struct vnic_dev *vdev, u8 overlay, u16 vxlan_udp_port_number)
{
  #line 1264 
  u64 a1 = (unsigned long long)vxlan_udp_port_number;
  #line 1265 
  u64 a0 = (unsigned long long)overlay;
  #line 1266 
  int wait = 1000;
  #line 1268 
  return vnic_dev_cmd(vdev,(enum vnic_devcmd_cmd)CMD_OVERLAY_OFFLOAD_CFG,& a0,
                   & a1,wait);
}

#line 1271  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/vnic_dev.c"
int vnic_dev_get_supported_feature_ver(struct vnic_dev *vdev, u8 feature, u64 *supported_versions, u64 *a1)
{
  #line 1276 
  int ret;
  #line 1274 
  u64 a0 = (unsigned long long)feature;
  #line 1275 
  int wait = 1000;
  #line 1278 
  ret = vnic_dev_cmd(vdev,(enum vnic_devcmd_cmd)CMD_GET_SUPP_FEATURE_VER,& a0,a1,wait);
  #line 1279 
  if (ret == 0) 
                #line 1280 
                *supported_versions = a0;
  #line 1282 
  return ret;
}

#line 1285  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/vnic_dev.c"
int vnic_dev_capable_rss_hash_type(struct vnic_dev *vdev, u8 *rss_hash_type)
{
  #line 1289 
  int err;
  #line 1287 
  u64 a0 = 1090633744ULL;
  #line 1287 
  u64 a1 = 0ULL;
  #line 1288 
  int wait = 1000;
  #line 1291 
  err = vnic_dev_cmd(vdev,(enum vnic_devcmd_cmd)CMD_CAPABILITY,& a0,& a1,wait);
  #line 1295 
  if (err != 0 || a0 != 1ULL) 
                              #line 1296 
                              return -95;
  #line 1298 
  a1 = (a1 >> 8) & 255ULL;
  #line 1301 
  *rss_hash_type = (unsigned char)a1;
  #line 1303 
  return 0;
}

#line 476  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cisco/enic/enic.ko/concurrency safety/0/concurrency safety/weaver/vnic_dev.i.aux"
static void *kzalloc_0(size_t size, gfp_t flags)
{
  #line 479 
  return ldv_kzalloc(size,flags);
}

#line 668  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/slab.h"
#line 476  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cisco/enic/enic.ko/concurrency safety/0/concurrency safety/weaver/vnic_rq.i.aux"
static void *kzalloc_1(size_t size, gfp_t flags);
#line 207  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/vnic_rq.h"
#line 66  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/vnic_rq.c"
void vnic_rq_free(struct vnic_rq *rq);
#line 208  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/vnic_rq.h"
#line 85  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/vnic_rq.c"
int vnic_rq_alloc(struct vnic_dev *vdev, struct vnic_rq *rq, unsigned int index, unsigned int desc_count, unsigned int desc_size);
#line 210  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/vnic_rq.h"
#line 138  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/vnic_rq.c"
void vnic_rq_init(struct vnic_rq *rq, unsigned int cq_index, unsigned int error_interrupt_enable, unsigned int error_interrupt_offset);
#line 213  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/vnic_rq.h"
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/vnic_rq.c"
unsigned int vnic_rq_error_status(struct vnic_rq *rq);
#line 214  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/vnic_rq.h"
#line 151  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/vnic_rq.c"
void vnic_rq_enable(struct vnic_rq *rq);
#line 215  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/vnic_rq.h"
#line 156  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/vnic_rq.c"
int vnic_rq_disable(struct vnic_rq *rq);
#line 216  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/vnic_rq.h"
#line 184  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/vnic_rq.c"
void vnic_rq_clean(struct vnic_rq *rq, void (*buf_clean)(struct vnic_rq *, struct vnic_rq_buf *));
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/vnic_rq.c"
static int vnic_rq_alloc_bufs(struct vnic_rq *rq)
{
  #line 33 
  struct vnic_rq_buf *buf;
  #line 34 
  unsigned int i;
  #line 34 
  unsigned int j;
  #line 35 
  unsigned int tmp;
  #line 35 
  unsigned int tmp_0;
  #line 34 
  unsigned int count = rq->ring.desc_count;
  #line 35 
  if (count <= 63U) 
                    #line 35 
                    tmp = 32U; else 
                                    #line 35 
                                    tmp = 64U;
  #line 35 
  if (count <= 63U) 
                    #line 35 
                    tmp_0 = 32U; else 
                                      #line 35 
                                      tmp_0 = 64U;
  #line 35 
  unsigned int blks = ((tmp + count) + 4294967295U) / tmp_0;
  #line 37 
  i = 0U;
  #line 37 
  while (i < blks) {
    {
      #line 38 
      unsigned long tmp_1;
      #line 38 
      if (count <= 63U) 
                        #line 38 
                        tmp_1 = 1792UL; else 
                                             #line 38 
                                             tmp_1 = 3584UL;
      #line 38 
      rq->bufs[i] = (struct vnic_rq_buf *)kzalloc_1(tmp_1,3264U);
      #line 39 
      if (rq->bufs[i] == (struct vnic_rq_buf *)0) 
                                                  #line 40 
                                                  return -12;
    }
    #line 37 
    i ++;
  }
  #line 43 
  i = 0U;
  #line 43 
  while (i < blks) {
    #line 44 
    buf = rq->bufs[i];
    #line 45 
    j = 0U;
    #line 45 
    while (1) {
      #line 45 
      unsigned int tmp_5;
      #line 45 
      if (count <= 63U) 
                        #line 45 
                        tmp_5 = 32U; else 
                                          #line 45 
                                          tmp_5 = 64U;
      #line 45 
      ;
      #line 45 
      if (! (tmp_5 > j)) 
                         #line 45 
                         break;
      {
        #line 46 
        unsigned int tmp_3;
        #line 46 
        if (count <= 63U) 
                          #line 46 
                          tmp_3 = 32U; else 
                                            #line 46 
                                            tmp_3 = 64U;
        #line 46 
        buf->index = tmp_3 * i + j;
        #line 47 
        buf->desc = (void *)((u8 *)rq->ring.descs + (unsigned long)(rq->ring.desc_size * buf->index));
        #line 49 
        if (buf->index + 1U == count) {
          #line 50 
          buf->next = rq->bufs[0];
          #line 51 
          break;
        }
        else {
          #line 52 
          unsigned int tmp_4;
          #line 52 
          if (count <= 63U) 
                            #line 52 
                            tmp_4 = 32U; else 
                                              #line 52 
                                              tmp_4 = 64U;
          #line 52 
          ;
          #line 52 
          if (j + 1U == tmp_4) 
                               #line 53 
                               buf->next = rq->bufs[i + 1U];
          else {
            #line 55 
            buf->next = buf + 1U;
            #line 56 
            buf ++;
          }
        }
      }
      #line 45 
      j ++;
    }
    #line 43 
    i ++;
  }
  #line 61 
  rq->to_clean = (rq->bufs[0]);
  #line 61 
  rq->to_use = (rq->bufs[0]);
  #line 63 
  return 0;
}

#line 66  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/vnic_rq.c"
void vnic_rq_free(struct vnic_rq *rq)
{
  #line 68 
  struct vnic_dev *vdev;
  #line 69 
  unsigned int i;
  #line 71 
  vdev = rq->vdev;
  #line 73 
  vnic_dev_free_desc_ring(vdev,& rq->ring);
  #line 75 
  i = 0U;
  #line 75 
  while (i <= 63U) {
    #line 76 
    if (rq->bufs[i] != (struct vnic_rq_buf *)0) {
      #line 77 
      kfree((void *)rq->bufs[i]);
      #line 78 
      rq->bufs[i] = (struct vnic_rq_buf *)0;
    }
    #line 75 
    i ++;
  }
  #line 82 
  rq->ctrl = (struct vnic_rq_ctrl *)0;
  #line 83 
  return;
}

#line 85  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/vnic_rq.c"
int vnic_rq_alloc(struct vnic_dev *vdev, struct vnic_rq *rq, unsigned int index, unsigned int desc_count, unsigned int desc_size)
{
  #line 88 
  int err;
  #line 90 
  rq->index = index;
  #line 91 
  rq->vdev = vdev;
  #line 93 
  rq->ctrl = (struct vnic_rq_ctrl *)vnic_dev_get_res(vdev,(enum vnic_res_type)RES_TYPE_RQ,index);
  #line 94 
  if (rq->ctrl == (struct vnic_rq_ctrl *)0) {
    #line 95 
    _dev_err(& (vdev->pdev)->dev,(char *)"Failed to hook RQ[%d] resource\n",index);
    #line 96 
    return -22;
  }
  #line 99 
  vnic_rq_disable(rq);
  #line 101 
  err = vnic_dev_alloc_desc_ring(vdev,& rq->ring,desc_count,desc_size);
  #line 102 
  if (err != 0) 
                #line 103 
                return err;
  #line 105 
  err = vnic_rq_alloc_bufs(rq);
  #line 106 
  if (err != 0) {
    #line 107 
    vnic_rq_free(rq);
    #line 108 
    return err;
  }
  #line 111 
  return 0;
}

#line 114  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/vnic_rq.c"
static void vnic_rq_init_start(struct vnic_rq *rq, unsigned int cq_index, unsigned int fetch_index, unsigned int posted_index, unsigned int error_interrupt_enable, unsigned int error_interrupt_offset)
{
  #line 119 
  u64 paddr;
  #line 134 
  unsigned int tmp_0;
  #line 135 
  unsigned int tmp_1;
  #line 120 
  unsigned int count = rq->ring.desc_count;
  #line 122 
  paddr = rq->ring.base_addr;
  #line 123 
  writeq(paddr,(void *)(& (rq->ctrl)->ring_base));
  #line 124 
  iowrite32(count,(void *)(& (rq->ctrl)->ring_size));
  #line 125 
  iowrite32(cq_index,(void *)(& (rq->ctrl)->cq_index));
  #line 126 
  iowrite32(error_interrupt_enable,(void *)(& (rq->ctrl)->error_interrupt_enable));
  #line 127 
  iowrite32(error_interrupt_offset,(void *)(& (rq->ctrl)->error_interrupt_offset));
  #line 128 
  iowrite32(0U,(void *)(& (rq->ctrl)->dropped_packet_count));
  #line 129 
  iowrite32(0U,(void *)(& (rq->ctrl)->error_status));
  #line 130 
  iowrite32(fetch_index,(void *)(& (rq->ctrl)->fetch_index));
  #line 131 
  iowrite32(posted_index,(void *)(& (rq->ctrl)->posted_index));
  #line 134 
  if (count <= 63U) 
                    #line 134 
                    tmp_0 = 32U; else 
                                      #line 134 
                                      tmp_0 = 64U;
  #line 135 
  if (count <= 63U) 
                    #line 135 
                    tmp_1 = 32U; else 
                                      #line 135 
                                      tmp_1 = 64U;
  #line 133 
  rq->to_clean = (rq->bufs[fetch_index / tmp_0] + (unsigned long)(fetch_index % tmp_1));
  #line 133 
  rq->to_use = (rq->bufs[fetch_index / tmp_0] + (unsigned long)(fetch_index % tmp_1));
  #line 136 
  return;
}

#line 138  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/vnic_rq.c"
void vnic_rq_init(struct vnic_rq *rq, unsigned int cq_index, unsigned int error_interrupt_enable, unsigned int error_interrupt_offset)
{
  #line 142 
  vnic_rq_init_start(rq,cq_index,0U,0U,error_interrupt_enable,error_interrupt_offset);
  #line 143 
  return;
}

#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/vnic_rq.c"
unsigned int vnic_rq_error_status(struct vnic_rq *rq)
{
  #line 148 
  return ioread32((void *)(& (rq->ctrl)->error_status));
}

#line 151  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/vnic_rq.c"
void vnic_rq_enable(struct vnic_rq *rq)
{
  #line 153 
  iowrite32(1U,(void *)(& (rq->ctrl)->enable));
  #line 154 
  return;
}

#line 156  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/vnic_rq.c"
int vnic_rq_disable(struct vnic_rq *rq)
{
  #line 158 
  unsigned int wait;
  #line 160 
  int i;
  #line 159 
  struct vnic_dev *vdev = rq->vdev;
  #line 166 
  i = 0;
  #line 166 
  while (i <= 1) {
    #line 167 
    iowrite32(0U,(void *)(& (rq->ctrl)->enable));
    #line 170 
    wait = 20000U;
    #line 170 
    while (wait != 0U) {
      #line 171 
      if (ioread32((void *)(& (rq->ctrl)->running)) == 0U) 
                                                           #line 172 
                                                           break;
      #line 170 
      wait --;
    }
    #line 173 
    if (wait == 0U) {
      #line 174 
      ;
      #line 174 
      netdev_err(vnic_get_netdev(vdev),(char *)"Failed to disable RQ[%d]\n",rq->index);
      #line 177 
      return -110;
    }
    #line 166 
    i ++;
  }
  #line 181 
  return 0;
}

#line 184  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/vnic_rq.c"
void vnic_rq_clean(struct vnic_rq *rq, void (*buf_clean)(struct vnic_rq *, struct vnic_rq_buf *))
{
  #line 187 
  struct vnic_rq_buf *buf;
  #line 188 
  u32 fetch_index;
  #line 190 
  int i;
  #line 208 
  unsigned int tmp_0;
  #line 209 
  unsigned int tmp_1;
  #line 189 
  unsigned int count = rq->ring.desc_count;
  #line 192 
  buf = rq->to_clean;
  #line 194 
  i = 0;
  #line 194 
  while (rq->ring.desc_count > (unsigned int)i) {
    #line 195 
    (*buf_clean)(rq,buf);
    #line 196 
    buf = buf->next;
    #line 194 
    i ++;
  }
  #line 198 
  rq->ring.desc_avail = rq->ring.desc_count + 4294967295U;
  #line 201 
  fetch_index = ioread32((void *)(& (rq->ctrl)->fetch_index));
  #line 203 
  if (fetch_index == 4294967295U) 
                                  #line 205 
                                  fetch_index = 0U;
  #line 208 
  if (count <= 63U) 
                    #line 208 
                    tmp_0 = 32U; else 
                                      #line 208 
                                      tmp_0 = 64U;
  #line 209 
  if (count <= 63U) 
                    #line 209 
                    tmp_1 = 32U; else 
                                      #line 209 
                                      tmp_1 = 64U;
  #line 207 
  rq->to_clean = (rq->bufs[fetch_index / tmp_0] + (unsigned long)(fetch_index % tmp_1));
  #line 207 
  rq->to_use = (rq->bufs[fetch_index / tmp_0] + (unsigned long)(fetch_index % tmp_1));
  #line 210 
  iowrite32(fetch_index,(void *)(& (rq->ctrl)->posted_index));
  #line 215 
  iowrite32(0U,(void *)(& (rq->ctrl)->enable));
  #line 217 
  vnic_dev_clear_desc_ring(& rq->ring);
  #line 218 
  return;
}

#line 476  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cisco/enic/enic.ko/concurrency safety/0/concurrency safety/weaver/vnic_rq.i.aux"
static void *kzalloc_1(size_t size, gfp_t flags)
{
  #line 479 
  return ldv_kzalloc(size,flags);
}

#line 1718  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
#line 1718 
void _dev_info(struct device *, char * , ...);
#line 113  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/vnic_cq.h"
#line 113 
void vnic_cq_free(struct vnic_cq *cq);
#line 114 
#line 114 
int vnic_cq_alloc(struct vnic_dev *vdev, struct vnic_cq *cq, unsigned int index, unsigned int desc_count, unsigned int desc_size);
#line 116 
#line 116 
void vnic_cq_init(struct vnic_cq *cq, unsigned int flow_control_enable, unsigned int color_enable, unsigned int cq_head, unsigned int cq_tail, unsigned int cq_tail_color, unsigned int interrupt_enable, unsigned int cq_entry_enable, unsigned int cq_message_enable, unsigned int interrupt_offset, u64 cq_message_addr);
#line 102  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/vnic_intr.h"
#line 102 
void vnic_intr_free(struct vnic_intr *intr);
#line 103 
#line 103 
int vnic_intr_alloc(struct vnic_dev *vdev, struct vnic_intr *intr, unsigned int index);
#line 105 
#line 105 
void vnic_intr_init(struct vnic_intr *intr, u32 coalescing_timer, unsigned int coalescing_type, unsigned int mask_on_assertion);
#line 53  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/vnic_nic.h"
__inline static void vnic_set_nic_cfg(u32 *nic_cfg, u8 rss_default_cpu, u8 rss_hash_type, u8 rss_hash_bits, u8 rss_base_cpu, u8 rss_enable, u8 tso_ipid_split_en, u8 ig_vlan_strip_en)
{
  #line 59 
  *nic_cfg = ((((((unsigned int)rss_default_cpu | ((unsigned int)rss_hash_type << 8U)) | (((unsigned int)rss_hash_bits << 16U) & 458752U)) | (((unsigned int)rss_base_cpu << 19U) & 3670016U)) | (((unsigned int)rss_enable << 22U) & 4194304U)) | (((unsigned int)tso_ipid_split_en << 23U) & 8388608U)) | (((unsigned int)ig_vlan_strip_en << 24U) & 16777216U);
  #line 72 
  return;
}

#line 140  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/enic_res.h"
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/enic_res.c"
int enic_get_vnic_config(struct enic *enic);
#line 143  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/enic_res.h"
#line 148  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/enic_res.c"
int enic_set_nic_cfg(struct enic *enic, u8 rss_default_cpu, u8 rss_hash_type, u8 rss_hash_bits, u8 rss_base_cpu, u8 rss_enable, u8 tso_ipid_split_en, u8 ig_vlan_strip_en);
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/enic_res.h"
#line 171  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/enic_res.c"
int enic_set_rss_key(struct enic *enic, dma_addr_t key_pa, u64 len);
#line 147  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/enic_res.h"
#line 179  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/enic_res.c"
int enic_set_rss_cpu(struct enic *enic, dma_addr_t cpu_pa, u64 len);
#line 148  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/enic_res.h"
#line 201  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/enic_res.c"
void enic_get_res_counts(struct enic *enic);
#line 228  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/enic.h"
__inline static struct device *enic_get_dev(struct enic *enic)
{
  #line 230 
  return & (enic->pdev)->dev;
}

#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/enic_res.c"
int enic_get_vnic_config(struct enic *enic)
{
  #line 94 
  unsigned int tmp_22;
  #line 101 
  char *tmp_25;
  #line 83 
  unsigned int tmp_15;
  #line 101 
  char *tmp_27;
  #line 90 
  unsigned short __UNIQUE_ID___x446;
  #line 77 
  unsigned int __UNIQUE_ID___x438;
  #line 101 
  char *tmp_28;
  #line 90 
  int tmp_19;
  #line 77 
  unsigned int tmp_11;
  #line 94 
  unsigned int __UNIQUE_ID___x448;
  #line 83 
  unsigned int __UNIQUE_ID___x442;
  #line 45 
  int err;
  #line 101 
  char *tmp_26;
  #line 101 
  char *tmp_29;
  #line 101 
  char *tmp_30;
  #line 101 
  char *tmp_31;
  #line 101 
  char *tmp_32;
  #line 101 
  char *tmp_33;
  #line 101 
  char *tmp_34;
  #line 44 
  struct vnic_enet_config *c = & enic->config;
  #line 47 
  err = vnic_dev_get_mac_addr(enic->vdev,(u8 *)(& enic->mac_addr));
  #line 48 
  if (err != 0) {
    #line 49 
    ;
    #line 49 
    _dev_err(enic_get_dev(enic),(char *)"Error getting MAC addr, %d\n",err);
    #line 51 
    return err;
  }
  #line 66 
  err = vnic_dev_spec(enic->vdev,0U,4U,(void *)(& c->flags));
  #line 66 
  if (err != 0) {
    #line 66 
    ;
    #line 66 
    _dev_err(enic_get_dev(enic),(char *)"Error getting %s, %d\n",(char *)"flags",err);
    #line 66 
    return err;
  }
  #line 67 
  err = vnic_dev_spec(enic->vdev,4U,4U,(void *)(& c->wq_desc_count));
  #line 67 
  if (err != 0) {
    #line 67 
    ;
    #line 67 
    _dev_err(enic_get_dev(enic),(char *)"Error getting %s, %d\n",(char *)"wq_desc_count",err);
    #line 67 
    return err;
  }
  #line 68 
  err = vnic_dev_spec(enic->vdev,8U,4U,(void *)(& c->rq_desc_count));
  #line 68 
  if (err != 0) {
    #line 68 
    ;
    #line 68 
    _dev_err(enic_get_dev(enic),(char *)"Error getting %s, %d\n",(char *)"rq_desc_count",err);
    #line 68 
    return err;
  }
  #line 69 
  err = vnic_dev_spec(enic->vdev,12U,2U,(void *)(& c->mtu));
  #line 69 
  if (err != 0) {
    #line 69 
    ;
    #line 69 
    _dev_err(enic_get_dev(enic),(char *)"Error getting %s, %d\n",(char *)"mtu",err);
    #line 69 
    return err;
  }
  #line 70 
  err = vnic_dev_spec(enic->vdev,16U,1U,(void *)(& c->intr_timer_type));
  #line 70 
  if (err != 0) {
    #line 70 
    ;
    #line 70 
    _dev_err(enic_get_dev(enic),(char *)"Error getting %s, %d\n",(char *)"intr_timer_type",err);
    #line 70 
    return err;
  }
  #line 71 
  err = vnic_dev_spec(enic->vdev,17U,1U,(void *)(& c->intr_mode));
  #line 71 
  if (err != 0) {
    #line 71 
    ;
    #line 71 
    _dev_err(enic_get_dev(enic),(char *)"Error getting %s, %d\n",(char *)"intr_mode",err);
    #line 71 
    return err;
  }
  #line 72 
  err = vnic_dev_spec(enic->vdev,36U,4U,(void *)(& c->intr_timer_usec));
  #line 72 
  if (err != 0) {
    #line 72 
    ;
    #line 72 
    _dev_err(enic_get_dev(enic),(char *)"Error getting %s, %d\n",(char *)"intr_timer_usec",err);
    #line 72 
    return err;
  }
  #line 73 
  err = vnic_dev_spec(enic->vdev,40U,2U,(void *)(& c->loop_tag));
  #line 73 
  if (err != 0) {
    #line 73 
    ;
    #line 73 
    _dev_err(enic_get_dev(enic),(char *)"Error getting %s, %d\n",(char *)"loop_tag",err);
    #line 73 
    return err;
  }
  #line 74 
  err = vnic_dev_spec(enic->vdev,44U,2U,(void *)(& c->num_arfs));
  #line 74 
  if (err != 0) {
    #line 74 
    ;
    #line 74 
    _dev_err(enic_get_dev(enic),(char *)"Error getting %s, %d\n",(char *)"num_arfs",err);
    #line 74 
    return err;
  }
  {
    #line 77 
    unsigned int __UNIQUE_ID___x436;
    #line 77 
    unsigned int tmp_9;
    #line 77 
    __UNIQUE_ID___x438 = 4096U;
    {
      #line 77 
      __UNIQUE_ID___x436 = 64U;
      #line 77 
      unsigned int __UNIQUE_ID___y437 = c->wq_desc_count;
      #line 77 
      if (__UNIQUE_ID___x436 > __UNIQUE_ID___y437) 
                                                   #line 77 
                                                   tmp_9 = __UNIQUE_ID___x436; else 
                                                                    #line 77 
                                                                    tmp_9 = __UNIQUE_ID___y437;
      }
    #line 77 
    unsigned int __UNIQUE_ID___y439 = tmp_9;
    #line 77 
    if (__UNIQUE_ID___x438 < __UNIQUE_ID___y439) 
                                                 #line 77 
                                                 tmp_11 = __UNIQUE_ID___x438; else 
                                                                    #line 77 
                                                                    tmp_11 = __UNIQUE_ID___y439;
    }
  #line 76 
  c->wq_desc_count = tmp_11;
  #line 80 
  c->wq_desc_count &= 4294967264U;
  {
    #line 83 
    unsigned int __UNIQUE_ID___x440;
    #line 83 
    unsigned int tmp_13;
    #line 83 
    __UNIQUE_ID___x442 = 4096U;
    {
      #line 83 
      __UNIQUE_ID___x440 = 64U;
      #line 83 
      unsigned int __UNIQUE_ID___y441 = c->rq_desc_count;
      #line 83 
      if (__UNIQUE_ID___x440 > __UNIQUE_ID___y441) 
                                                   #line 83 
                                                   tmp_13 = __UNIQUE_ID___x440; else 
                                                                    #line 83 
                                                                    tmp_13 = __UNIQUE_ID___y441;
      }
    #line 83 
    unsigned int __UNIQUE_ID___y443 = tmp_13;
    #line 83 
    if (__UNIQUE_ID___x442 < __UNIQUE_ID___y443) 
                                                 #line 83 
                                                 tmp_15 = __UNIQUE_ID___x442; else 
                                                                    #line 83 
                                                                    tmp_15 = __UNIQUE_ID___y443;
    }
  #line 82 
  c->rq_desc_count = tmp_15;
  #line 86 
  c->rq_desc_count &= 4294967264U;
  #line 88 
  if ((unsigned int)c->mtu == 0U) 
                                  #line 89 
                                  c->mtu = (unsigned short)1500U;
  {
    #line 90 
    unsigned short __UNIQUE_ID___x444;
    #line 90 
    int tmp_17;
    #line 90 
    __UNIQUE_ID___x446 = (unsigned short)9000U;
    {
      #line 90 
      __UNIQUE_ID___x444 = (unsigned short)68U;
      #line 90 
      unsigned short __UNIQUE_ID___y445 = c->mtu;
      #line 90 
      if ((int)__UNIQUE_ID___x444 > (int)__UNIQUE_ID___y445) 
                                                             #line 90 
                                                             tmp_17 = (int)__UNIQUE_ID___x444; else 
                                                                    #line 90 
                                                                    tmp_17 = (int)__UNIQUE_ID___y445;
      }
    #line 90 
    unsigned short __UNIQUE_ID___y447 = (unsigned short)tmp_17;
    #line 90 
    if ((int)__UNIQUE_ID___x446 < (int)__UNIQUE_ID___y447) 
                                                           #line 90 
                                                           tmp_19 = (int)__UNIQUE_ID___x446; else 
                                                                    #line 90 
                                                                    tmp_19 = (int)__UNIQUE_ID___y447;
    }
  #line 90 
  c->mtu = (unsigned short)tmp_19;
  {
    #line 94 
    __UNIQUE_ID___x448 = c->intr_timer_usec;
    #line 94 
    unsigned int __UNIQUE_ID___y449 = vnic_dev_get_intr_coal_timer_max(enic->vdev);
    #line 94 
    if (__UNIQUE_ID___x448 < __UNIQUE_ID___y449) 
                                                 #line 94 
                                                 tmp_22 = __UNIQUE_ID___x448; else 
                                                                    #line 94 
                                                                    tmp_22 = __UNIQUE_ID___y449;
    }
  #line 94 
  c->intr_timer_usec = tmp_22;
  #line 97 
  ;
  #line 97 
  ;
  #line 97 
  ;
  #line 97 
  ;
  #line 97 
  _dev_info(enic_get_dev(enic),(char *)"vNIC MAC addr %pM wq/rq %d/%d mtu %d\n",(u8 *)(& enic->mac_addr),c->wq_desc_count,c->rq_desc_count,(int)c->mtu);
  #line 101 
  ;
  #line 101 
  ;
  #line 101 
  if ((unsigned int)c->intr_timer_type != 0U) {
    #line 101 
    if ((unsigned int)c->intr_timer_type == 1U) 
                                                #line 101 
                                                tmp_25 = (char *)"idle"; else 
                                                                    #line 101 
                                                                    tmp_25 = (char *)"unknown";
    #line 101 
    tmp_26 = tmp_25;
  }
  else 
       #line 101 
       tmp_26 = (char *)"min";
  #line 101 
  if ((unsigned int)c->intr_mode != 2U) {
    #line 101 
    if ((unsigned int)c->intr_mode != 1U) {
      #line 101 
      if ((unsigned int)c->intr_mode == 0U) 
                                            #line 101 
                                            tmp_27 = (char *)"any"; else 
                                                                    #line 101 
                                                                    tmp_27 = (char *)"unknown";
      #line 101 
      tmp_28 = tmp_27;
    }
    else 
         #line 101 
         tmp_28 = (char *)"MSI";
    #line 101 
    tmp_29 = tmp_28;
  }
  else 
       #line 101 
       tmp_29 = (char *)"INTx";
  #line 101 
  if ((int)(enic->config.flags >> 4) & 1) 
                                          #line 101 
                                          tmp_30 = (char *)"yes"; else 
                                                                    #line 101 
                                                                    tmp_30 = (char *)"no";
  #line 101 
  if ((int)(enic->config.flags >> 1) & 1) 
                                          #line 101 
                                          tmp_31 = (char *)"yes"; else 
                                                                    #line 101 
                                                                    tmp_31 = (char *)"no";
  #line 101 
  if ((int)enic->config.flags & 1) 
                                   #line 101 
                                   tmp_32 = (char *)"yes"; else 
                                                                #line 101 
                                                                tmp_32 = (char *)"no";
  #line 101 
  if ((int)(enic->config.flags >> 2) & 1) 
                                          #line 101 
                                          tmp_33 = (char *)"yes"; else 
                                                                    #line 101 
                                                                    tmp_33 = (char *)"no";
  #line 101 
  if ((int)(enic->config.flags >> 3) & 1) 
                                          #line 101 
                                          tmp_34 = (char *)"yes"; else 
                                                                    #line 101 
                                                                    tmp_34 = (char *)"no";
  #line 101 
  _dev_info(enic_get_dev(enic),(char *)"vNIC csum tx/rx %s/%s ",tmp_34,tmp_33,tmp_32,tmp_31,tmp_30,tmp_29,tmp_26,c->intr_timer_usec,(int)c->loop_tag);
  #line 119 
  return 0;
}

#line 122  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/enic_res.c"
int enic_add_vlan(struct enic *enic, u16 vlanid)
{
  #line 126 
  int err;
  #line 124 
  u64 a0 = (unsigned long long)vlanid;
  #line 124 
  u64 a1 = 0ULL;
  #line 125 
  int wait = 1000;
  #line 128 
  err = vnic_dev_cmd(enic->vdev,(enum vnic_devcmd_cmd)CMD_VLAN_ADD,& a0,& a1,wait);
  #line 129 
  if (err != 0) {
    #line 130 
    ;
    #line 130 
    _dev_err(enic_get_dev(enic),(char *)"Can\'t add vlan id, %d\n",err);
  }
  #line 132 
  return err;
}

#line 135  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/enic_res.c"
int enic_del_vlan(struct enic *enic, u16 vlanid)
{
  #line 139 
  int err;
  #line 137 
  u64 a0 = (unsigned long long)vlanid;
  #line 137 
  u64 a1 = 0ULL;
  #line 138 
  int wait = 1000;
  #line 141 
  err = vnic_dev_cmd(enic->vdev,(enum vnic_devcmd_cmd)CMD_VLAN_DEL,& a0,& a1,wait);
  #line 142 
  if (err != 0) {
    #line 143 
    ;
    #line 143 
    _dev_err(enic_get_dev(enic),(char *)"Can\'t delete vlan id, %d\n",err);
  }
  #line 145 
  return err;
}

#line 148  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/enic_res.c"
int enic_set_nic_cfg(struct enic *enic, u8 rss_default_cpu, u8 rss_hash_type, u8 rss_hash_bits, u8 rss_base_cpu, u8 rss_enable, u8 tso_ipid_split_en, u8 ig_vlan_strip_en)
{
  #line 153 
  u64 a0;
  #line 153 
  u64 a1;
  #line 154 
  u32 nic_cfg;
  #line 152 
  enum vnic_devcmd_cmd cmd = CMD_NIC_CFG;
  #line 155 
  int wait = 1000;
  #line 157 
  vnic_set_nic_cfg(& nic_cfg,(unsigned char)((int)rss_default_cpu),(unsigned char)((int)rss_hash_type),(unsigned char)((int)rss_hash_bits),(unsigned char)((int)rss_base_cpu),(unsigned char)((int)rss_enable),(unsigned char)((int)tso_ipid_split_en),(unsigned char)((int)ig_vlan_strip_en));
  #line 161 
  a0 = (unsigned long long)nic_cfg;
  #line 162 
  a1 = 0ULL;
  #line 164 
  if (((int)rss_hash_type & 129) != 0) 
                                       #line 166 
                                       cmd = CMD_NIC_CFG_CHK;
  #line 168 
  return vnic_dev_cmd(enic->vdev,cmd,& a0,& a1,wait);
}

#line 171  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/enic_res.c"
int enic_set_rss_key(struct enic *enic, dma_addr_t key_pa, u64 len)
{
  #line 173 
  u64 a0 = key_pa;
  #line 173 
  u64 a1 = len;
  #line 174 
  int wait = 1000;
  #line 176 
  return vnic_dev_cmd(enic->vdev,(enum vnic_devcmd_cmd)CMD_RSS_KEY,& a0,& a1,
                   wait);
}

#line 179  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/enic_res.c"
int enic_set_rss_cpu(struct enic *enic, dma_addr_t cpu_pa, u64 len)
{
  #line 181 
  u64 a0 = cpu_pa;
  #line 181 
  u64 a1 = len;
  #line 182 
  int wait = 1000;
  #line 184 
  return vnic_dev_cmd(enic->vdev,(enum vnic_devcmd_cmd)CMD_RSS_CPU,& a0,& a1,
                   wait);
}

#line 187  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/enic_res.c"
void enic_free_vnic_resources(struct enic *enic)
{
  #line 189 
  unsigned int i;
  #line 191 
  i = 0U;
  #line 191 
  while (enic->wq_count > i) {
    #line 192 
    vnic_wq_free(& enic->wq[i]);
    #line 191 
    i ++;
  }
  #line 193 
  i = 0U;
  #line 193 
  while (enic->rq_count > i) {
    #line 194 
    vnic_rq_free(& enic->rq[i]);
    #line 193 
    i ++;
  }
  #line 195 
  i = 0U;
  #line 195 
  while (enic->cq_count > i) {
    #line 196 
    vnic_cq_free(& enic->cq[i]);
    #line 195 
    i ++;
  }
  #line 197 
  i = 0U;
  #line 197 
  while (enic->intr_count > i) {
    #line 198 
    vnic_intr_free(& enic->intr[i]);
    #line 197 
    i ++;
  }
  #line 199 
  return;
}

#line 201  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/enic_res.c"
void enic_get_res_counts(struct enic *enic)
{
  #line 203 
  enic->wq_count = vnic_dev_get_res_count(enic->vdev,(enum vnic_res_type)RES_TYPE_WQ);
  #line 204 
  enic->rq_count = vnic_dev_get_res_count(enic->vdev,(enum vnic_res_type)RES_TYPE_RQ);
  #line 205 
  enic->cq_count = vnic_dev_get_res_count(enic->vdev,(enum vnic_res_type)RES_TYPE_CQ);
  #line 206 
  enic->intr_count = vnic_dev_get_res_count(enic->vdev,(enum vnic_res_type)RES_TYPE_INTR_CTRL);
  #line 209 
  ;
  #line 209 
  ;
  #line 209 
  ;
  #line 209 
  ;
  #line 209 
  _dev_info(enic_get_dev(enic),(char *)"vNIC resources avail: wq %d rq %d cq %d intr %d\n",enic->wq_count,enic->rq_count,enic->cq_count,enic->intr_count);
  #line 210 
  return;
}

#line 215  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/enic_res.c"
void enic_init_vnic_resources(struct enic *enic)
{
  #line 217 
  enum vnic_dev_intr_mode intr_mode;
  #line 218 
  unsigned int mask_on_assertion;
  #line 219 
  unsigned int interrupt_offset;
  #line 220 
  unsigned int error_interrupt_enable;
  #line 221 
  unsigned int error_interrupt_offset;
  #line 222 
  unsigned int cq_index;
  #line 223 
  unsigned int i;
  #line 225 
  intr_mode = vnic_dev_get_intr_mode(enic->vdev);
  #line 235 
  switch ((unsigned int)intr_mode) {
    #line 236 
    case (unsigned int)1: 
                          #line 236 
    ;
    #line 237 
    case (unsigned int)3: 
                          #line 237 
    ;
    #line 238 
    error_interrupt_enable = 1U;
    #line 239 
    error_interrupt_offset = enic->intr_count + 4294967294U;
    #line 240 
    break;
    #line 241 
    default: 
             #line 241 
    ;
    #line 242 
    error_interrupt_enable = 0U;
    #line 243 
    error_interrupt_offset = 0U;
    #line 244 
    break;
  }
  #line 247 
  i = 0U;
  #line 247 
  while (enic->rq_count > i) {
    #line 248 
    cq_index = i;
    #line 249 
    vnic_rq_init(& enic->rq[i],cq_index,error_interrupt_enable,error_interrupt_offset);
    #line 247 
    i ++;
  }
  #line 255 
  i = 0U;
  #line 255 
  while (enic->wq_count > i) {
    #line 256 
    cq_index = enic->rq_count + i;
    #line 257 
    vnic_wq_init(& enic->wq[i],cq_index,error_interrupt_enable,error_interrupt_offset);
    #line 255 
    i ++;
  }
  #line 269 
  i = 0U;
  #line 269 
  while (enic->cq_count > i) {
    #line 271 
    switch ((unsigned int)intr_mode) {
      #line 272 
      case (unsigned int)3: 
                            #line 272 
      ;
      #line 273 
      interrupt_offset = i;
      #line 274 
      break;
      #line 275 
      default: 
               #line 275 
      ;
      #line 276 
      interrupt_offset = 0U;
      #line 277 
      break;
    }
    #line 280 
    vnic_cq_init(& enic->cq[i],0U,1U,0U,0U,1U,1U,1U,0U,interrupt_offset,0ULL);
    #line 269 
    i ++;
  }
  #line 299 
  switch ((unsigned int)intr_mode) {
    #line 300 
    case (unsigned int)2: 
                          #line 300 
    ;
    #line 301 
    case (unsigned int)3: 
                          #line 301 
    ;
    #line 302 
    mask_on_assertion = 1U;
    #line 303 
    break;
    #line 304 
    default: 
             #line 304 
    ;
    #line 305 
    mask_on_assertion = 0U;
    #line 306 
    break;
  }
  #line 309 
  i = 0U;
  #line 309 
  while (enic->intr_count > i) {
    #line 310 
    vnic_intr_init(& enic->intr[i],enic->config.intr_timer_usec,(unsigned int)enic->config.intr_timer_type,mask_on_assertion);
    #line 309 
    i ++;
  }
  #line 313 
  return;
}

#line 317  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/enic_res.c"
int enic_alloc_vnic_resources(struct enic *enic)
{
  #line 325 
  char *tmp;
  #line 325 
  char *tmp_0;
  #line 319 
  enum vnic_dev_intr_mode intr_mode;
  #line 320 
  unsigned int i;
  #line 321 
  int err;
  #line 325 
  char *tmp_1;
  #line 323 
  intr_mode = vnic_dev_get_intr_mode(enic->vdev);
  #line 325 
  if (intr_mode != (unsigned int)VNIC_DEV_INTR_MODE_INTX) {
    #line 325 
    if (intr_mode != (unsigned int)VNIC_DEV_INTR_MODE_MSI) {
      #line 325 
      if (intr_mode == (unsigned int)VNIC_DEV_INTR_MODE_MSIX) 
                                                              #line 325 
                                                              tmp = (char *)"MSI-X"; else 
                                                                    #line 325 
                                                                    tmp = (char *)"unknown";
      #line 325 
      tmp_0 = tmp;
    }
    else 
         #line 325 
         tmp_0 = (char *)"MSI";
    #line 325 
    tmp_1 = tmp_0;
  }
  else 
       #line 325 
       tmp_1 = (char *)"legacy PCI INTx";
  #line 325 
  ;
  #line 325 
  ;
  #line 325 
  ;
  #line 325 
  ;
  #line 325 
  _dev_info(enic_get_dev(enic),(char *)"vNIC resources used:  ",enic->wq_count,enic->rq_count,enic->cq_count,enic->intr_count,tmp_1);
  #line 337 
  i = 0U;
  #line 337 
  while (enic->wq_count > i) {
    #line 338 
    err = vnic_wq_alloc(enic->vdev,& enic->wq[i],i,enic->config.wq_desc_count,16U);
    #line 341 
    if (err != 0) 
                  #line 342 
                  goto err_out_cleanup;
    #line 337 
    i ++;
  }
  #line 345 
  i = 0U;
  #line 345 
  while (enic->rq_count > i) {
    #line 346 
    err = vnic_rq_alloc(enic->vdev,& enic->rq[i],i,enic->config.rq_desc_count,16U);
    #line 349 
    if (err != 0) 
                  #line 350 
                  goto err_out_cleanup;
    #line 345 
    i ++;
  }
  #line 353 
  i = 0U;
  #line 353 
  while (enic->cq_count > i) {
    #line 354 
    if (enic->rq_count > i) 
                            #line 355 
                            err = vnic_cq_alloc(enic->vdev,& enic->cq[i],i,enic->config.rq_desc_count,16U); else 
                                                                    #line 359 
                                                                    err = vnic_cq_alloc(enic->vdev,& enic->cq[i],i,enic->config.wq_desc_count,16U);
    #line 362 
    if (err != 0) 
                  #line 363 
                  goto err_out_cleanup;
    #line 353 
    i ++;
  }
  #line 366 
  i = 0U;
  #line 366 
  while (enic->intr_count > i) {
    #line 367 
    err = vnic_intr_alloc(enic->vdev,& enic->intr[i],i);
    #line 368 
    if (err != 0) 
                  #line 369 
                  goto err_out_cleanup;
    #line 366 
    i ++;
  }
  #line 375 
  enic->legacy_pba = (u32 *)vnic_dev_get_res(enic->vdev,(enum vnic_res_type)RES_TYPE_INTR_PBA_LEGACY,0U);
  #line 377 
  if (enic->legacy_pba == (u32 *)0U && intr_mode == (unsigned int)VNIC_DEV_INTR_MODE_INTX) {
    #line 378 
    _dev_err(enic_get_dev(enic),(char *)"Failed to hook legacy pba resource\n");
    #line 380 
    err = -19;
    #line 381 
    goto err_out_cleanup;
  }
  #line 384 
  return 0;
  #line 386 
  err_out_cleanup: 
                   #line 386 
  ;
  #line 387 
  enic_free_vnic_resources(enic);
  #line 389 
  return err;
}

#line 121  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/vnic_cq.h"
#line 82  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/vnic_cq.c"
void vnic_cq_clean(struct vnic_cq *cq);
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/vnic_cq.c"
void vnic_cq_free(struct vnic_cq *cq)
{
  #line 31 
  vnic_dev_free_desc_ring(cq->vdev,& cq->ring);
  #line 33 
  cq->ctrl = (struct vnic_cq_ctrl *)0;
  #line 34 
  return;
}

#line 36  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/vnic_cq.c"
int vnic_cq_alloc(struct vnic_dev *vdev, struct vnic_cq *cq, unsigned int index, unsigned int desc_count, unsigned int desc_size)
{
  #line 39 
  int err;
  #line 41 
  cq->index = index;
  #line 42 
  cq->vdev = vdev;
  #line 44 
  cq->ctrl = (struct vnic_cq_ctrl *)vnic_dev_get_res(vdev,(enum vnic_res_type)RES_TYPE_CQ,index);
  #line 45 
  if (cq->ctrl == (struct vnic_cq_ctrl *)0) {
    #line 46 
    _dev_err(& (vdev->pdev)->dev,(char *)"Failed to hook CQ[%d] resource\n",index);
    #line 47 
    return -22;
  }
  #line 50 
  err = vnic_dev_alloc_desc_ring(vdev,& cq->ring,desc_count,desc_size);
  #line 51 
  if (err != 0) 
                #line 52 
                return err;
  #line 54 
  return 0;
}

#line 57  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/vnic_cq.c"
void vnic_cq_init(struct vnic_cq *cq, unsigned int flow_control_enable, unsigned int color_enable, unsigned int cq_head, unsigned int cq_tail, unsigned int cq_tail_color, unsigned int interrupt_enable, unsigned int cq_entry_enable, unsigned int cq_message_enable, unsigned int interrupt_offset, u64 cq_message_addr)
{
  #line 63 
  u64 paddr;
  #line 65 
  paddr = cq->ring.base_addr;
  #line 66 
  writeq(paddr,(void *)(& (cq->ctrl)->ring_base));
  #line 67 
  iowrite32(cq->ring.desc_count,(void *)(& (cq->ctrl)->ring_size));
  #line 68 
  iowrite32(flow_control_enable,(void *)(& (cq->ctrl)->flow_control_enable));
  #line 69 
  iowrite32(color_enable,(void *)(& (cq->ctrl)->color_enable));
  #line 70 
  iowrite32(cq_head,(void *)(& (cq->ctrl)->cq_head));
  #line 71 
  iowrite32(cq_tail,(void *)(& (cq->ctrl)->cq_tail));
  #line 72 
  iowrite32(cq_tail_color,(void *)(& (cq->ctrl)->cq_tail_color));
  #line 73 
  iowrite32(interrupt_enable,(void *)(& (cq->ctrl)->interrupt_enable));
  #line 74 
  iowrite32(cq_entry_enable,(void *)(& (cq->ctrl)->cq_entry_enable));
  #line 75 
  iowrite32(cq_message_enable,(void *)(& (cq->ctrl)->cq_message_enable));
  #line 76 
  iowrite32(interrupt_offset,(void *)(& (cq->ctrl)->interrupt_offset));
  #line 77 
  writeq(cq_message_addr,(void *)(& (cq->ctrl)->cq_message_addr));
  #line 79 
  cq->interrupt_offset = interrupt_offset;
  #line 80 
  return;
}

#line 82  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/vnic_cq.c"
void vnic_cq_clean(struct vnic_cq *cq)
{
  #line 84 
  cq->to_clean = 0U;
  #line 85 
  cq->last_color = 0U;
  #line 87 
  iowrite32(0U,(void *)(& (cq->ctrl)->cq_head));
  #line 88 
  iowrite32(0U,(void *)(& (cq->ctrl)->cq_tail));
  #line 89 
  iowrite32(1U,(void *)(& (cq->ctrl)->cq_tail_color));
  #line 91 
  vnic_dev_clear_desc_ring(& cq->ring);
  #line 92 
  return;
}

#line 668  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/slab.h"
#line 349  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cisco/enic/enic.ko/concurrency safety/0/concurrency safety/weaver/vnic_vic.i.aux"
static void *kzalloc_2(size_t size, gfp_t flags);
#line 26  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/vnic_vic.c"
struct vic_provinfo *vic_provinfo_alloc(gfp_t flags, u8 *oui, u8 type)
{
  #line 29 
  struct vic_provinfo *vp;
  #line 31 
  if (oui == (u8 *)0U) 
                       #line 32 
                       return (struct vic_provinfo *)0;
  #line 34 
  vp = (struct vic_provinfo *)kzalloc_2(1385UL,flags);
  #line 35 
  if (vp == (struct vic_provinfo *)0) 
                                      #line 36 
                                      return (struct vic_provinfo *)0;
  #line 38 
  memcpy((void *)(& vp->oui),(void *)oui,3UL);
  #line 39 
  vp->type = type;
  #line 40 
  vp->length = 67108864U;
  #line 42 
  return vp;
}

#line 45  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/vnic_vic.c"
void vic_provinfo_free(struct vic_provinfo *vp)
{
  #line 47 
  kfree((void *)vp);
  #line 48 
  return;
}

#line 50  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/vnic_vic.c"
int vic_provinfo_add_tlv(struct vic_provinfo *vp, u16 type, u16 length, void *value)
{
  #line 53 
  struct vic_provinfo_tlv *tlv;
  #line 55 
  if (vp == (struct vic_provinfo *)0 || value == (void *)0) 
                                                            #line 56 
                                                            return -22;
  #line 58 
  ;
  #line 58 
  if (((unsigned long)__builtin_bswap32(vp->length) + (unsigned long)length) + 4UL > 1373UL) 
    #line 60 
    return -12;
  #line 62 
  tlv = (struct vic_provinfo_tlv *)((u8 *)(& vp->tlv) + ((unsigned long)__builtin_bswap32(vp->length) + 18446744073709551612U));
  #line 65 
  tlv->type = __builtin_bswap16((unsigned short)((int)type));
  #line 66 
  tlv->length = __builtin_bswap16((unsigned short)((int)length));
  #line 67 
  memcpy((void *)(& tlv->value),value,(unsigned long)length);
  #line 69 
  vp->num_tlvs = __builtin_bswap32(__builtin_bswap32(vp->num_tlvs) + 1U);
  #line 70 
  ;
  #line 70 
  vp->length = __builtin_bswap32((__builtin_bswap32(vp->length) + (unsigned int)length) + 4U);
  #line 73 
  return 0;
}

#line 76  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/vnic_vic.c"
size_t vic_provinfo_size(struct vic_provinfo *vp)
{
  #line 78 
  unsigned long tmp_0;
  #line 78 
  if (vp != (struct vic_provinfo *)0) {
    #line 78 
    tmp_0 = (unsigned long)__builtin_bswap32(vp->length) + 8UL;
  }
  else 
       #line 78 
       tmp_0 = 0UL;
  #line 78 
  return tmp_0;
}

#line 349  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cisco/enic/enic.ko/concurrency safety/0/concurrency safety/weaver/vnic_vic.i.aux"
static void *kzalloc_2(size_t size, gfp_t flags)
{
  #line 352 
  return ldv_kzalloc(size,flags);
}

#line 109  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/vnic_intr.h"
#line 67  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/vnic_intr.c"
void vnic_intr_clean(struct vnic_intr *intr);
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/vnic_intr.c"
void vnic_intr_free(struct vnic_intr *intr)
{
  #line 32 
  intr->ctrl = (struct vnic_intr_ctrl *)0;
  #line 33 
  return;
}

#line 35  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/vnic_intr.c"
int vnic_intr_alloc(struct vnic_dev *vdev, struct vnic_intr *intr, unsigned int index)
{
  #line 38 
  intr->index = index;
  #line 39 
  intr->vdev = vdev;
  #line 41 
  intr->ctrl = (struct vnic_intr_ctrl *)vnic_dev_get_res(vdev,(enum vnic_res_type)RES_TYPE_INTR_CTRL,index);
  #line 42 
  if (intr->ctrl == (struct vnic_intr_ctrl *)0) {
    #line 43 
    _dev_err(& (vdev->pdev)->dev,(char *)"Failed to hook INTR[%d].ctrl resource\n",index);
    #line 45 
    return -22;
  }
  #line 48 
  return 0;
}

#line 51  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/vnic_intr.c"
void vnic_intr_init(struct vnic_intr *intr, u32 coalescing_timer, unsigned int coalescing_type, unsigned int mask_on_assertion)
{
  #line 54 
  vnic_intr_coalescing_timer_set(intr,coalescing_timer);
  #line 55 
  iowrite32(coalescing_type,(void *)(& (intr->ctrl)->coalescing_type));
  #line 56 
  iowrite32(mask_on_assertion,(void *)(& (intr->ctrl)->mask_on_assertion));
  #line 57 
  iowrite32(0U,(void *)(& (intr->ctrl)->int_credits));
  #line 58 
  return;
}

#line 60  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/vnic_intr.c"
void vnic_intr_coalescing_timer_set(struct vnic_intr *intr, u32 coalescing_timer)
{
  #line 63 
  ;
  #line 63 
  iowrite32(vnic_dev_intr_coal_timer_usec_to_hw(intr->vdev,coalescing_timer),(void *)(& (intr->ctrl)->coalescing_timer));
  #line 65 
  return;
}

#line 67  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/vnic_intr.c"
void vnic_intr_clean(struct vnic_intr *intr)
{
  #line 69 
  iowrite32(0U,(void *)(& (intr->ctrl)->int_credits));
  #line 70 
  return;
}

/* compiler builtin: 
   void __builtin_prefetch(void const * , ...);   */
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/export.h"
#line 16 
extern struct module __this_module;
#line 324  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/bitops.h"
__inline static int fls(unsigned int x)
{
  #line 326 
  int r;
  #line 327 
  ldv_inline_asm();
  #line 351 
  return r + 1;
}

#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bitops/find.h"
#line 270  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cisco/enic/enic.ko/concurrency safety/0/concurrency safety/weaver/enic_main.i.aux"
static unsigned long cif_find_first_bit(unsigned long *addr, unsigned long size);
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bitops/instrumented-atomic.h"
#line 235  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cisco/enic/enic.ko/concurrency safety/0/concurrency safety/weaver/enic_main.i.aux"
static void cif_set_bit(long nr, unsigned long *addr);
#line 44  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bitops/instrumented-atomic.h"
#line 242  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cisco/enic/enic.ko/concurrency safety/0/concurrency safety/weaver/enic_main.i.aux"
static void cif_clear_bit(long nr, unsigned long *addr);
#line 171  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/printk.h"
#line 171 
int printk(char * , ...);
#line 26  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
#line 249  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cisco/enic/enic.ko/concurrency safety/0/concurrency safety/weaver/enic_main.i.aux"
static void INIT_LIST_HEAD(struct list_head *list);
#line 88  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/percpu.h"
#line 88 
void __bad_percpu_size(void);
#line 309  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/percpu-defs.h"
#line 309 
void __bad_size_call_parameter(void);
#line 314  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/percpu-defs.h"
__inline static void __this_cpu_preempt_check(char *op)
{
  #line 316 
  return;
}

#line 89  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bug.h"
#line 89 
void __warn_printk(char * , ...);
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/page_64.h"
#line 15 
extern unsigned long vmalloc_base;
#line 16 
#line 16 
extern unsigned long vmemmap_base;
#line 29 
#line 29 
unsigned long __phys_addr(unsigned long);
#line 372  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bitmap.h"
__inline static int bitmap_empty(unsigned long *src, unsigned int nbits)
{
  #line 374 
  if (0 != 0 && nbits + 4294967295U <= 63U) 
                                            #line 375 
                                            return (*src & (18446744073709551615UL >> (- nbits & 63U))) == 0UL;
  #line 377 
  ;
  #line 377 
  return cif_find_first_bit(src,(unsigned long)nbits) == (unsigned long)nbits;
}

#line 39  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cpumask.h"
#line 39 
extern unsigned int nr_cpu_ids;
#line 134  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cpumask.h"
__inline static void cpu_max_bits_warn(unsigned int cpu, unsigned int bits)
{
  #line 137 
  int __ret_warn_on = cpu >= bits;
  #line 137 
  if ((long)(__ret_warn_on != 0) != 0L) {
    #line 138 
    ldv_inline_asm();
    #line 139 
    ldv_inline_asm();
  }
  #line 137 
  long tmp = (long)(__ret_warn_on != 0);
  #line 139 
  return;
}

#line 142  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cpumask.h"
__inline static unsigned int cpumask_check(unsigned int cpu)
{
  #line 144 
  cpu_max_bits_warn(cpu,nr_cpu_ids);
  #line 145 
  return cpu;
}

#line 247 
#line 247 
unsigned int cpumask_local_spread(unsigned int, int);
#line 325  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cpumask.h"
__inline static void cpumask_set_cpu(unsigned int cpu, struct cpumask *dstp)
{
  #line 327 
  ;
  #line 327 
  cif_set_bit((long)cpumask_check(cpu),(unsigned long *)(& dstp->bits));
  #line 328 
  return;
}

#line 536  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cpumask.h"
__inline static bool cpumask_empty(struct cpumask *srcp)
{
  #line 538 
  return (_Bool)(bitmap_empty((unsigned long *)(& srcp->bits),nr_cpu_ids) != 0);
}

#line 740 
#line 740 
bool zalloc_cpumask_var(cpumask_var_t *, gfp_t);
#line 742 
#line 742 
void free_cpumask_var(cpumask_var_t);
#line 745  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cpumask.h"
__inline static bool cpumask_available(cpumask_var_t mask)
{
  #line 747 
  return (_Bool)(mask != (struct cpumask *)0);
}

#line 173  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/cpufeature.h"
__inline static bool _static_cpu_has(u16 bit)
{
  #line 177 
  ldv_inline_asm();
  #line 178 
  ldv_inline_asm();
  #line 211 
  t_yes: 
         #line 211 
  ;
  #line 212 
  return (_Bool)1;
  #line 213 
  t_no: 
        #line 213 
  ;
  #line 214 
  return (_Bool)0;
}

#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/preempt.h"
__inline static int preempt_count(void)
{
  #line 26 
  int pfo_ret__;
  #line 26 
  switch (4UL) {
    #line 26 
    case (unsigned long)1: 
                           #line 26 
    ;
    #line 27 
    ldv_inline_asm();
    #line 26 
    break;
    #line 26 
    case (unsigned long)2: 
                           #line 26 
    ;
    #line 27 
    ldv_inline_asm();
    #line 26 
    break;
    #line 26 
    case (unsigned long)4: 
                           #line 26 
    ;
    #line 27 
    ldv_inline_asm();
    #line 26 
    break;
    #line 26 
    case (unsigned long)8: 
                           #line 26 
    ;
    #line 27 
    ldv_inline_asm();
    #line 26 
    break;
    #line 26 
    default: 
             #line 26 
    ;
    #line 26 
    __bad_percpu_size();
  }
  #line 26 
  return pfo_ret__ & 2147483647;
}

#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bottom_half.h"
#line 8 
void __local_bh_disable_ip(unsigned long, unsigned int);
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bottom_half.h"
__inline static void local_bh_disable(void)
{
  #line 19 
  __here_0: 
            #line 19 
  ;
  #line 19 
  __local_bh_disable_ip((unsigned long)((void *)0),512U);
  #line 21 
  return;
}

#line 23 
#line 23 
void __local_bh_enable_ip(unsigned long, unsigned int);
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bottom_half.h"
__inline static void local_bh_enable(void)
{
  #line 32 
  __here_0: 
            #line 32 
  ;
  #line 32 
  __local_bh_enable_ip((unsigned long)((void *)0),512U);
  #line 34 
  return;
}

#line 302  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockdep.h"
#line 302 
void lockdep_init_map(struct lockdep_map *, char *, struct lock_class_key *, int);
#line 336  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static void spin_lock_0(spinlock_t *lock)
{
  #line 338 
  _raw_spin_lock(& lock->__anonCompField_spinlock_25.rlock);
  #line 339 
  return;
}

#line 340 
#line 653  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cisco/enic/enic.ko/concurrency safety/0/concurrency safety/weaver/enic_main.i.aux"
static void cif_spin_lock__xmit_lock_of_netdev_queue(spinlock_t *lock);
#line 340  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
#line 955  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cisco/enic/enic.ko/concurrency safety/0/concurrency safety/weaver/enic_main.i.aux"
static void cif_spin_lock_NOT_ARG_SIGN(spinlock_t *lock);
#line 340  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
#line 989  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cisco/enic/enic.ko/concurrency safety/0/concurrency safety/weaver/enic_main.i.aux"
static void cif_spin_lock_enic_api_lock_of_enic_0(spinlock_t *lock);
#line 341  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static void spin_lock_bh_4(spinlock_t *lock)
{
  #line 343 
  _raw_spin_lock_bh(& lock->__anonCompField_spinlock_25.rlock);
  #line 344 
  return;
}

#line 345 
#line 937  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cisco/enic/enic.ko/concurrency safety/0/concurrency safety/weaver/enic_main.i.aux"
static void cif_spin_lock_bh_devcmd_lock_of_enic_4(spinlock_t *lock);
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static void spin_unlock_0(spinlock_t *lock)
{
  #line 378 
  _raw_spin_unlock(& lock->__anonCompField_spinlock_25.rlock);
  #line 379 
  return;
}

#line 380 
#line 693  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cisco/enic/enic.ko/concurrency safety/0/concurrency safety/weaver/enic_main.i.aux"
static void cif_spin_unlock__xmit_lock_of_netdev_queue(spinlock_t *lock);
#line 380  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
#line 964  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cisco/enic/enic.ko/concurrency safety/0/concurrency safety/weaver/enic_main.i.aux"
static void cif_spin_unlock_NOT_ARG_SIGN(spinlock_t *lock);
#line 380  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
#line 998  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cisco/enic/enic.ko/concurrency safety/0/concurrency safety/weaver/enic_main.i.aux"
static void cif_spin_unlock_enic_api_lock_of_enic_0(spinlock_t *lock);
#line 381  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static void spin_unlock_bh_4(spinlock_t *lock)
{
  #line 383 
  _raw_spin_unlock_bh(& lock->__anonCompField_spinlock_25.rlock);
  #line 384 
  return;
}

#line 385 
#line 946  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cisco/enic/enic.ko/concurrency safety/0/concurrency safety/weaver/enic_main.i.aux"
static void cif_spin_unlock_bh_devcmd_lock_of_enic_4(spinlock_t *lock);
#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/bitmap.h"
#line 21 
void ldv_set_bit(long nr, unsigned long *addr);
#line 22 
#line 22 
void ldv_clear_bit(long nr, unsigned long *addr);
#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/find_bit.h"
#line 21 
unsigned long ldv_find_first_bit(unsigned long *addr, unsigned long size);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/list.h"
#line 23 
void ldv_init_list_head(struct list_head *list);
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 25 
void *ldv_kcalloc(size_t n, size_t size, gfp_t flags);
#line 165  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ktime.h"
__inline static s64 ktime_divns(ktime_t kt, s64 div)
{
  {
    #line 171 
    int __ret_warn_on = div < 0LL;
    #line 171 
    if ((long)(__ret_warn_on != 0) != 0L) {
      #line 172 
      ldv_inline_asm();
      #line 173 
      ldv_inline_asm();
    }
    #line 171 
    long tmp = (long)(__ret_warn_on != 0);
  }
  #line 172 
  return kt / div;
}

#line 176  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ktime.h"
__inline static s64 ktime_to_us(ktime_t kt)
{
  #line 178 
  return ktime_divns(kt,1000LL);
}

#line 186  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ktime.h"
__inline static s64 ktime_us_delta(ktime_t later, ktime_t earlier)
{
  #line 188 
  return ktime_to_us(later - earlier);
}

#line 67  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timekeeping.h"
#line 67 
ktime_t ktime_get(void);
#line 90  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
#line 90 
void init_timer_key(struct timer_list *, void (*)(struct timer_list *), unsigned int, char *, struct lock_class_key *);
#line 173 
#line 921  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cisco/enic/enic.ko/concurrency safety/0/concurrency safety/weaver/enic_main.i.aux"
static int cif_mod_timer_0(struct timer_list *timer, unsigned long expires);
#line 188  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
#line 929  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cisco/enic/enic.ko/concurrency safety/0/concurrency safety/weaver/enic_main.i.aux"
static int cif_del_timer_sync_0(struct timer_list *timer);
#line 209  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
#line 209 
unsigned long round_jiffies(unsigned long);
#line 207  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/workqueue.h"
#line 207 
void __init_work(struct work_struct *, int);
#line 462 
#line 462 
bool cancel_work_sync(struct work_struct *);
#line 554 
#line 799  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cisco/enic/enic.ko/concurrency safety/0/concurrency safety/weaver/enic_main.i.aux"
static bool cif_schedule_work(struct work_struct *work);
#line 209  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/io.h"
#line 209 
void iounmap(void *);
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/pci_iomap.h"
#line 13 
void *pci_iomap(struct pci_dev *, int, unsigned long);
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/hardirq.h"
#line 12 
void synchronize_irq(unsigned int);
#line 162  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/interrupt.h"
#line 981  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cisco/enic/enic.ko/concurrency safety/0/concurrency safety/weaver/enic_main.i.aux"
static int cif_request_irq(unsigned int irq, irqreturn_t (*handler)(int , void *), unsigned long flags, char *name, void *dev);
#line 189  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/interrupt.h"
#line 973  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cisco/enic/enic.ko/concurrency safety/0/concurrency safety/weaver/enic_main.i.aux"
static void *cif_free_irq(unsigned int ldv_func_arg1, void *ldv_func_arg2);
#line 352  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/interrupt.h"
#line 352 
int irq_set_affinity_hint(unsigned int, struct cpumask *);
#line 222  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
#line 222 
long schedule_timeout_uninterruptible(long);
#line 1383  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
__inline static int dev_to_node(struct device *dev)
{
  #line 1385 
  return dev->numa_node;
}

#line 1417  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
__inline static void *dev_get_drvdata(struct device *dev)
{
  #line 1419 
  return dev->driver_data;
}

#line 1422  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
__inline static void dev_set_drvdata(struct device *dev, void *data)
{
  #line 1424 
  dev->driver_data = data;
  #line 1425 
  return;
}

#line 1680 
#line 1680 
char *dev_driver_string(struct device *);
#line 607  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/slab.h"
#line 571  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cisco/enic/enic.ko/concurrency safety/0/concurrency safety/weaver/enic_main.i.aux"
static void *kcalloc(size_t n, size_t size, gfp_t flags);
#line 1042  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
#line 1042 
int pci_find_ext_capability(struct pci_dev *, int);
#line 1084 
#line 1084 
int pci_read_config_word(struct pci_dev *, int, u16 *);
#line 1133 
#line 1133 
int pci_enable_device_mem(struct pci_dev *);
#line 1157 
#line 1157 
void pci_disable_device(struct pci_dev *);
#line 1160 
#line 1160 
void pci_set_master(struct pci_dev *);
#line 1281 
#line 1281 
int pci_request_regions(struct pci_dev *, char *);
#line 1283 
#line 1283 
void pci_release_regions(struct pci_dev *);
#line 1346 
#line 1039  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cisco/enic/enic.ko/concurrency safety/0/concurrency safety/weaver/enic_main.i.aux"
static int cif___pci_register_driver(struct pci_driver *ldv_func_arg1, struct module *ldv_func_arg2, char *mod_name);
#line 1352  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
#line 1047  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cisco/enic/enic.ko/concurrency safety/0/concurrency safety/weaver/enic_main.i.aux"
static void cif_pci_unregister_driver(struct pci_driver *dev);
#line 628  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm.h"
__inline static bool is_vmalloc_addr(void *x)
{
  #line 633 
  int tmp_1;
  #line 631 
  unsigned long addr = (unsigned long)x;
  #line 633 
  if (addr >= vmalloc_base) {
    #line 633 
    unsigned long tmp_0;
    #line 633 
    if ((int)_static_cpu_has((unsigned short)528) != 0) 
                                                        #line 633 
                                                        tmp_0 = 14073748835532800UL; else 
                                                                    #line 633 
                                                                    tmp_0 = 35184372088832UL;
    #line 633 
    ;
    #line 633 
    if ((tmp_0 + vmalloc_base) + 18446744073709551615UL > addr) 
                                                                #line 633 
                                                                tmp_1 = 1; else 
                                                                    #line 633 
                                                                    tmp_1 = 0;
  }
  else 
       #line 633 
       tmp_1 = 0;
  #line 633 
  return (_Bool)(tmp_1 != 0);
}

#line 1431  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
#line 1431 
void pci_disable_msi(struct pci_dev *);
#line 1433 
#line 1433 
void pci_disable_msix(struct pci_dev *);
#line 1436 
#line 1436 
int pci_enable_msi(struct pci_dev *);
#line 1437 
#line 1437 
int pci_enable_msix_range(struct pci_dev *, struct msix_entry *, int, int);
#line 1833  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
__inline static void *pci_get_drvdata(struct pci_dev *pdev)
{
  #line 1835 
  return dev_get_drvdata(& pdev->dev);
}

#line 1838  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
__inline static void pci_set_drvdata(struct pci_dev *pdev, void *data)
{
  #line 1840 
  dev_set_drvdata(& pdev->dev,data);
  #line 1841 
  return;
}

#line 2029 
#line 2029 
int pci_enable_sriov(struct pci_dev *, int);
#line 2030 
#line 2030 
void pci_disable_sriov(struct pci_dev *);
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-debug.h"
#line 21 
void debug_dma_map_single(struct device *, void *, unsigned long);
#line 24 
#line 24 
void debug_dma_map_page(struct device *, struct page *, size_t, size_t, int, dma_addr_t);
#line 28 
#line 28 
void debug_dma_mapping_error(struct device *, dma_addr_t);
#line 30 
#line 30 
void debug_dma_unmap_page(struct device *, dma_addr_t, size_t, int);
#line 52 
#line 52 
void debug_dma_sync_single_for_cpu(struct device *, dma_addr_t, size_t, int);
#line 143  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static int valid_dma_direction(int dma_direction)
{
  #line 146 
  return (unsigned int)dma_direction <= 2U;
}

#line 191  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static bool dma_is_direct(struct dma_map_ops *ops)
{
  #line 193 
  return (_Bool)((long)(ops == (struct dma_map_ops *)0) != 0L);
}

#line 200 
#line 200 
dma_addr_t dma_direct_map_page(struct device *, struct page *, unsigned long, size_t, enum dma_data_direction, unsigned long);
#line 228 
#line 228 
void dma_direct_unmap_page(struct device *, dma_addr_t, size_t, enum dma_data_direction, unsigned long);
#line 232 
#line 232 
void dma_direct_sync_single_for_cpu(struct device *, dma_addr_t, size_t, enum dma_data_direction);
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/dma-mapping.h"
#line 19 
extern struct dma_map_ops *dma_ops;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/dma-mapping.h"
__inline static struct dma_map_ops *get_arch_dma_ops(struct bus_type *bus)
{
  #line 23 
  return dma_ops;
}

#line 261  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static struct dma_map_ops *get_dma_ops(struct device *dev)
{
  #line 263 
  if (dev->dma_ops != (struct dma_map_ops *)0) 
                                               #line 264 
                                               return dev->dma_ops;
  #line 265 
  return get_arch_dma_ops(dev->bus);
}

#line 274  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static dma_addr_t dma_map_page_attrs(struct device *dev, struct page *page, size_t offset, size_t size, enum dma_data_direction dir, unsigned long attrs)
{
  #line 279 
  dma_addr_t addr;
  #line 278 
  struct dma_map_ops *ops = get_dma_ops(dev);
  #line 281 
  if ((long)(valid_dma_direction((int)dir) == 0) != 0L) {
    #line 282 
    ldv_inline_asm();
    #line 283 
    ldv_inline_asm();
    #line 284 
    ldv_inline_asm();
    #line 281 
    ;
  }
  #line 282 
  if ((int)dma_is_direct(ops) != 0) 
                                    #line 283 
                                    addr = dma_direct_map_page(dev,page,offset,size,dir,attrs); else 
                                                                    #line 285 
                                                                    addr = (*(ops->map_page))(dev,page,offset,size,dir,attrs);
  #line 286 
  debug_dma_map_page(dev,page,offset,size,(int)dir,addr);
  #line 288 
  return addr;
}

#line 291  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static void dma_unmap_page_attrs(struct device *dev, dma_addr_t addr, size_t size, enum dma_data_direction dir, unsigned long attrs)
{
  #line 294 
  struct dma_map_ops *ops = get_dma_ops(dev);
  #line 296 
  if ((long)(valid_dma_direction((int)dir) == 0) != 0L) {
    #line 297 
    ldv_inline_asm();
    #line 298 
    ldv_inline_asm();
    #line 299 
    ldv_inline_asm();
    #line 296 
    ;
  }
  #line 297 
  if ((int)dma_is_direct(ops) != 0) 
                                    #line 298 
                                    dma_direct_unmap_page(dev,addr,size,dir,attrs);
  else 
    #line 299 
    if (ops->unmap_page != (void (*)(struct device *, dma_addr_t , size_t , enum dma_data_direction , unsigned long ))0) 
      #line 300 
      (*(ops->unmap_page))(dev,addr,size,dir,attrs);
  #line 301 
  debug_dma_unmap_page(dev,addr,size,(int)dir);
  #line 302 
  return;
}

#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static void dma_sync_single_for_cpu(struct device *dev, dma_addr_t addr, size_t size, enum dma_data_direction dir)
{
  #line 380 
  struct dma_map_ops *ops = get_dma_ops(dev);
  #line 382 
  if ((long)(valid_dma_direction((int)dir) == 0) != 0L) {
    #line 383 
    ldv_inline_asm();
    #line 384 
    ldv_inline_asm();
    #line 385 
    ldv_inline_asm();
    #line 382 
    ;
  }
  #line 383 
  if ((int)dma_is_direct(ops) != 0) 
                                    #line 384 
                                    dma_direct_sync_single_for_cpu(dev,addr,size,dir);
  else 
    #line 385 
    if (ops->sync_single_for_cpu != (void (*)(struct device *, dma_addr_t , size_t , enum dma_data_direction ))0) 
      #line 386 
      (*(ops->sync_single_for_cpu))(dev,addr,size,dir);
  #line 387 
  debug_dma_sync_single_for_cpu(dev,addr,size,(int)dir);
  #line 388 
  return;
}

#line 433  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static int dma_mapping_error(struct device *dev, dma_addr_t dma_addr)
{
  #line 435 
  debug_dma_mapping_error(dev,dma_addr);
  #line 437 
  if (dma_addr == 18446744073709551615ULL) 
                                           #line 438 
                                           return -12;
  #line 439 
  return 0;
}

#line 460 
#line 460 
int dma_set_mask(struct device *, u64);
#line 461 
#line 461 
int dma_set_coherent_mask(struct device *, u64);
#line 580  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static dma_addr_t dma_map_single_attrs(struct device *dev, void *ptr, size_t size, enum dma_data_direction dir, unsigned long attrs)
{
  #line 584 
  int __ret_warn_once;
  {
    #line 584 
    bool __warned;
    #line 584 
    __ret_warn_once = (int)is_vmalloc_addr(ptr) != 0;
    #line 584 
    if ((long)(__ret_warn_once != 0) != 0L && (long)(! __warned) != 0L) {
      #line 584 
      __warned = (_Bool)1;
      {
        #line 584 
        int __ret_warn_on = 1;
        #line 584 
        if ((long)(__ret_warn_on != 0) != 0L) {
          #line 584 
          __warn_printk((char *)"%s %s: ",dev_driver_string(dev),dev_name(dev));
          #line 585 
          ldv_inline_asm();
          #line 586 
          ldv_inline_asm();
        }
        #line 584 
        long tmp_2 = (long)(__ret_warn_on != 0);
      }
    }
    }
  #line 584 
  if ((long)((long)(__ret_warn_once != 0)) != 0L) 
                                                  #line 586 
                                                  return 18446744073709551615ULL;
  #line 587 
  debug_dma_map_single(dev,ptr,size);
  #line 588 
  ;
  #line 588 
  ;
  #line 588 
  ;
  #line 588 
  ;
  #line 588 
  ;
  #line 588 
  ;
  #line 588 
  return dma_map_page_attrs(dev,
                           (struct page *)((__phys_addr((unsigned long)ptr) >> 12) + vmemmap_base),
                           (unsigned long)ptr & 4095UL,size,dir,attrs);
}

#line 592  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static void dma_unmap_single_attrs(struct device *dev, dma_addr_t addr, size_t size, enum dma_data_direction dir, unsigned long attrs)
{
  #line 595 
  dma_unmap_page_attrs(dev,addr,size,dir,attrs);
  #line 596 
  return;
}

#line 38  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci-dma-compat.h"
__inline static dma_addr_t pci_map_single(struct pci_dev *hwdev, void *ptr, size_t size, int direction)
{
  #line 40 
  return dma_map_single_attrs(& hwdev->dev,ptr,size,
                           (enum dma_data_direction)direction,0UL);
}

#line 44  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci-dma-compat.h"
__inline static void pci_unmap_single(struct pci_dev *hwdev, dma_addr_t dma_addr, size_t size, int direction)
{
  #line 47 
  dma_unmap_single_attrs(& hwdev->dev,dma_addr,size,(enum dma_data_direction)direction,0UL);
  #line 48 
  return;
}

#line 58  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci-dma-compat.h"
__inline static void pci_unmap_page(struct pci_dev *hwdev, dma_addr_t dma_address, size_t size, int direction)
{
  #line 61 
  dma_unmap_page_attrs(& hwdev->dev,dma_address,size,(enum dma_data_direction)direction,0UL);
  #line 62 
  return;
}

#line 79  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci-dma-compat.h"
__inline static void pci_dma_sync_single_for_cpu(struct pci_dev *hwdev, dma_addr_t dma_handle, size_t size, int direction)
{
  #line 82 
  dma_sync_single_for_cpu(& hwdev->dev,dma_handle,size,(enum dma_data_direction)direction);
  #line 83 
  return;
}

#line 107  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci-dma-compat.h"
__inline static int pci_dma_mapping_error(struct pci_dev *pdev, dma_addr_t dma_addr)
{
  #line 109 
  return dma_mapping_error(& pdev->dev,dma_addr);
}

#line 113  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci-dma-compat.h"
__inline static int pci_set_dma_mask(struct pci_dev *dev, u64 mask)
{
  #line 115 
  return dma_set_mask(& dev->dev,mask);
}

#line 118  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci-dma-compat.h"
__inline static int pci_set_consistent_dma_mask(struct pci_dev *dev, u64 mask)
{
  #line 120 
  return dma_set_coherent_mask(& dev->dev,mask);
}

#line 38  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/random.h"
#line 38 
void get_random_bytes(void *, int);
#line 244  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/net.h"
#line 244 
int net_ratelimit(void);
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/checksum_64.h"
__inline static __sum16 csum_fold(__wsum sum)
{
  #line 25 
  ldv_inline_asm();
  #line 30 
  return (unsigned short)(~ sum >> 16);
}

#line 88  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/checksum_64.h"
__inline static __wsum csum_tcpudp_nofold(__be32 saddr, __be32 daddr, __u32 len, __u8 proto, __wsum sum)
{
  #line 90 
  ldv_inline_asm();
  #line 98 
  return sum;
}

#line 113  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/checksum_64.h"
__inline static __sum16 csum_tcpudp_magic(__be32 saddr, __be32 daddr, __u32 len, __u8 proto, __wsum sum)
{
  #line 117 
  return csum_fold(csum_tcpudp_nofold(saddr,daddr,len,(unsigned char)((int)proto),sum));
}

#line 180 
#line 180 
__sum16 csum_ipv6_magic(struct in6_addr *, struct in6_addr *, __u32, __u8, __wsum);
#line 325  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static unsigned int skb_frag_size(skb_frag_t *frag)
{
  #line 327 
  return frag->bv_len;
}

#line 1023 
#line 1023 
void consume_skb(struct sk_buff *);
#line 1214  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static void __skb_set_hash(struct sk_buff *skb, __u32 hash, bool is_sw, bool is_l4)
{
  #line 1216 
  skb->l4_hash = (unsigned char)is_l4;
  #line 1217 
  skb->sw_hash = (unsigned char)is_sw;
  #line 1218 
  skb->hash = hash;
  #line 1219 
  return;
}

#line 1222  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static void skb_set_hash(struct sk_buff *skb, __u32 hash, enum pkt_hash_types type)
{
  #line 1225 
  __skb_set_hash(skb,hash,(_Bool)0,(_Bool)(type == (unsigned int)PKT_HASH_TYPE_L4));
  #line 1226 
  return;
}

#line 1381  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static unsigned char *skb_end_pointer(struct sk_buff *skb)
{
  #line 1383 
  return skb->head + (unsigned long)skb->end;
}

#line 2065  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static bool skb_is_nonlinear(struct sk_buff *skb)
{
  #line 2067 
  return (_Bool)(skb->data_len != 0U);
}

#line 2070  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static unsigned int skb_headlen(struct sk_buff *skb)
{
  #line 2072 
  return skb->len - skb->data_len;
}

#line 2189 
#line 2189 
void *skb_put(struct sk_buff *, unsigned int);
#line 2266 
#line 2266 
void *__pskb_pull_tail(struct sk_buff *, int);
#line 2282  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static bool pskb_may_pull(struct sk_buff *skb, unsigned int len)
{
  #line 2284 
  ;
  #line 2284 
  if ((long)(skb_headlen(skb) >= len) != 0L) 
                                             #line 2285 
                                             return (_Bool)1;
  #line 2286 
  if ((long)(skb->len < len) != 0L) 
                                    #line 2287 
                                    return (_Bool)0;
  #line 2288 
  ;
  #line 2288 
  ;
  #line 2288 
  return (_Bool)(__pskb_pull_tail(skb,(int)(len - skb_headlen(skb))) != (void *)0);
}

#line 2299  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static unsigned int skb_headroom(struct sk_buff *skb)
{
  #line 2301 
  return (unsigned int)(skb->data - skb->head);
}

#line 2397  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static unsigned char *skb_inner_transport_header(struct sk_buff *skb)
{
  #line 2400 
  return skb->head + (unsigned long)skb->inner_transport_header;
}

#line 2420  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static unsigned char *skb_inner_network_header(struct sk_buff *skb)
{
  #line 2422 
  return skb->head + (unsigned long)skb->inner_network_header;
}

#line 2437  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static unsigned char *skb_inner_mac_header(struct sk_buff *skb)
{
  #line 2439 
  return skb->head + (unsigned long)skb->inner_mac_header;
}

#line 2458  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static unsigned char *skb_transport_header(struct sk_buff *skb)
{
  #line 2460 
  return skb->head + (unsigned long)skb->transport_header;
}

#line 2475  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static unsigned char *skb_network_header(struct sk_buff *skb)
{
  #line 2477 
  return skb->head + (unsigned long)skb->network_header;
}

#line 2549  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static int skb_checksum_start_offset(struct sk_buff *skb)
{
  #line 2551 
  ;
  #line 2551 
  return (int)((unsigned int)skb->__anonCompField_sk_buff_95.__anonCompField___anonunion_530_94.csum_start - skb_headroom(skb));
}

#line 2559  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static int skb_transport_offset(struct sk_buff *skb)
{
  #line 2561 
  ;
  #line 2561 
  return (int)(skb_transport_header(skb) - skb->data);
}

#line 2762 
#line 2762 
struct sk_buff *__netdev_alloc_skb(struct net_device *, unsigned int, gfp_t);
#line 2798  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static struct sk_buff *__netdev_alloc_skb_ip_align(struct net_device *dev, unsigned int length, gfp_t gfp)
{
  #line 2801 
  struct sk_buff *skb = __netdev_alloc_skb(dev,length,gfp);
  #line 2805 
  return skb;
}

#line 2808  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static struct sk_buff *netdev_alloc_skb_ip_align(struct net_device *dev, unsigned int length)
{
  #line 2811 
  return __netdev_alloc_skb_ip_align(dev,length,2592U);
}

#line 2896  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static unsigned int skb_frag_off(skb_frag_t *frag)
{
  #line 2898 
  return frag->bv_offset;
}

#line 2938  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static struct page *skb_frag_page(skb_frag_t *frag)
{
  #line 2940 
  return frag->bv_page;
}

#line 3067  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static dma_addr_t skb_frag_dma_map(struct device *dev, skb_frag_t *frag, size_t offset, size_t size, enum dma_data_direction dir)
{
  #line 3072 
  ;
  #line 3072 
  ;
  #line 3072 
  ;
  #line 3072 
  ;
  #line 3072 
  return dma_map_page_attrs(dev,skb_frag_page(frag),
                           (unsigned long)skb_frag_off(frag) + offset,size,
                           dir,0UL);
}

#line 3248  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static int __skb_linearize(struct sk_buff *skb)
{
  #line 3250 
  int tmp_0;
  #line 3250 
  if (__pskb_pull_tail(skb,(int)skb->data_len) != (void *)0) 
                                                             #line 3250 
                                                             tmp_0 = 0; else 
                                                                    #line 3250 
                                                                    tmp_0 = -12;
  #line 3250 
  return tmp_0;
}

#line 3260  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static int skb_linearize(struct sk_buff *skb)
{
  #line 3262 
  int tmp_1;
  #line 3262 
  if ((int)skb_is_nonlinear(skb) != 0) 
                                       #line 3262 
                                       tmp_1 = __skb_linearize(skb); else 
                                                                    #line 3262 
                                                                    tmp_1 = 0;
  #line 3262 
  return tmp_1;
}

#line 3767 
#line 3767 
void skb_clone_tx_timestamp(struct sk_buff *);
#line 3813 
#line 3813 
void skb_tstamp_tx(struct sk_buff *, struct skb_shared_hwtstamps *);
#line 3828  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static void skb_tx_timestamp(struct sk_buff *skb)
{
  #line 3830 
  skb_clone_tx_timestamp(skb);
  #line 3831 
  ;
  #line 3831 
  if (((int)((struct skb_shared_info *)skb_end_pointer(skb))->tx_flags & 2) != 0) 
    #line 3832 
    skb_tstamp_tx(skb,(struct skb_shared_hwtstamps *)0);
  #line 3833 
  return;
}

#line 4277  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static u16 skb_get_queue_mapping(struct sk_buff *skb)
{
  #line 4279 
  return skb->queue_mapping;
}

#line 4287  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static void skb_record_rx_queue(struct sk_buff *skb, u16 rx_queue)
{
  #line 4289 
  skb->queue_mapping = (unsigned short)((unsigned int)rx_queue + 1U);
  #line 4290 
  return;
}

#line 35  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/if_ether.h"
__inline static struct ethhdr *inner_eth_hdr(struct sk_buff *skb)
{
  #line 37 
  return (struct ethhdr *)skb_inner_mac_header(skb);
}

#line 424  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
#line 424 
void __napi_schedule_irqoff(struct napi_struct *);
#line 431 
#line 431 
bool napi_schedule_prep(struct napi_struct *);
#line 452  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void napi_schedule_irqoff(struct napi_struct *n)
{
  #line 454 
  if ((int)napi_schedule_prep(n) != 0) 
                                       #line 455 
                                       __napi_schedule_irqoff(n);
  #line 456 
  return;
}

#line 468 
#line 468 
bool napi_complete_done(struct napi_struct *, int);
#line 477  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static bool napi_complete(struct napi_struct *n)
{
  #line 479 
  return napi_complete_done(n,0);
}

#line 494 
#line 494 
bool napi_hash_del(struct napi_struct *);
#line 503 
#line 503 
void napi_disable(struct napi_struct *);
#line 512  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void napi_enable(struct napi_struct *n)
{
  #line 514 
  int tmp_0;
  #line 514 
  if (test_bit(0L,& n->state)) 
                               #line 514 
                               tmp_0 = 0; else 
                                               #line 514 
                                               tmp_0 = 1;
  #line 514 
  if ((long)tmp_0 != 0L) {
    #line 515 
    ldv_inline_asm();
    #line 516 
    ldv_inline_asm();
    #line 517 
    ldv_inline_asm();
    #line 514 
    ;
  }
  #line 516 
  cif_clear_bit(0L,& n->state);
  #line 517 
  cif_clear_bit(3L,& n->state);
  #line 518 
  return;
}

#line 2132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static struct netdev_queue *netdev_get_tx_queue(struct net_device *dev, unsigned int index)
{
  #line 2135 
  return dev->_tx + (unsigned long)index;
}

#line 2234 
#line 2234 
void netif_napi_add(struct net_device *, struct napi_struct *, int (*)(struct napi_struct *, int ), int);
#line 2263 
#line 2263 
void netif_napi_del(struct napi_struct *);
#line 2579 
#line 2579 
int call_netdevice_notifiers(unsigned long, struct net_device *);
#line 2679 
#line 1023  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cisco/enic/enic.ko/concurrency safety/0/concurrency safety/weaver/enic_main.i.aux"
static void cif_free_netdev(struct net_device *dev);
#line 3130  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
#line 3130 
void netif_tx_wake_queue(struct netdev_queue *);
#line 3144  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void netif_tx_wake_all_queues(struct net_device *dev)
{
  #line 3146 
  unsigned int i;
  #line 3148 
  i = 0U;
  #line 3148 
  while (dev->num_tx_queues > i) {
    {
      #line 3149 
      struct netdev_queue *txq = netdev_get_tx_queue(dev,i);
      #line 3150 
      netif_tx_wake_queue(txq);
    }
    #line 3148 
    i ++;
  }
  #line 3152 
  return;
}

#line 3154  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void netif_tx_stop_queue(struct netdev_queue *dev_queue)
{
  #line 3156 
  cif_set_bit(0L,& dev_queue->state);
  #line 3157 
  return;
}

#line 3174  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static bool netif_tx_queue_stopped(struct netdev_queue *dev_queue)
{
  #line 3176 
  return test_bit(0L,& dev_queue->state);
}

#line 3190  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static bool netif_xmit_stopped(struct netdev_queue *dev_queue)
{
  #line 3192 
  return (_Bool)((dev_queue->state & 3UL) != 0UL);
}

#line 3454  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void netif_wake_subqueue(struct net_device *dev, u16 queue_index)
{
  #line 3456 
  struct netdev_queue *txq = netdev_get_tx_queue(dev,(unsigned int)queue_index);
  #line 3458 
  netif_tx_wake_queue(txq);
  #line 3459 
  return;
}

#line 3462 
#line 3462 
int netif_set_xps_queue(struct net_device *, struct cpumask *, u16);
#line 3577 
#line 3577 
int netif_set_real_num_tx_queues(struct net_device *, unsigned int);
#line 3580 
#line 3580 
int netif_set_real_num_rx_queues(struct net_device *, unsigned int);
#line 3617 
#line 3617 
void __dev_kfree_skb_any(struct sk_buff *, enum skb_free_reason);
#line 3648  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void dev_kfree_skb_any(struct sk_buff *skb)
{
  #line 3650 
  __dev_kfree_skb_any(skb,(enum skb_free_reason)SKB_REASON_DROPPED);
  #line 3651 
  return;
}

#line 3662 
#line 3662 
int netif_receive_skb(struct sk_buff *);
#line 3665 
#line 3665 
gro_result_t napi_gro_receive(struct napi_struct *, struct sk_buff *);
#line 3812 
#line 3812 
void netif_carrier_on(struct net_device *);
#line 3814 
#line 3814 
void netif_carrier_off(struct net_device *);
#line 3934  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void __netif_tx_lock(struct netdev_queue *txq, int cpu)
{
  #line 3936 
  cif_spin_lock__xmit_lock_of_netdev_queue(& txq->_xmit_lock);
  #line 3937 
  txq->xmit_lock_owner = cpu;
  #line 3938 
  return;
}

#line 3965  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void __netif_tx_unlock(struct netdev_queue *txq)
{
  #line 3967 
  txq->xmit_lock_owner = -1;
  #line 3968 
  cif_spin_unlock__xmit_lock_of_netdev_queue(& txq->_xmit_lock);
  #line 3969 
  return;
}

#line 4070  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void netif_tx_disable(struct net_device *dev)
{
  #line 4076 
  int pscr_ret__;
  #line 4072 
  unsigned int i;
  #line 4073 
  int cpu;
  #line 4075 
  local_bh_disable();
  #line 4076 
  __this_cpu_preempt_check((char *)"read");
  {
    #line 4076 
    void *__vpp_verify = (void *)0;
    #line 4076 
    void *tmp = __vpp_verify;
  }
  #line 4076 
  switch (4UL) {
    #line 4076 
    int pfo_ret___1;
    #line 4076 
    int pfo_ret___2;
    #line 4076 
    int pfo_ret__;
    #line 4076 
    int pfo_ret___0;
    #line 4076 
    case (unsigned long)1: 
                           #line 4076 
    ;
    #line 4076 
    switch (4UL) {
      #line 4076 
      case (unsigned long)1: 
                             #line 4076 
      ;
      #line 4077 
      ldv_inline_asm();
      #line 4076 
      break;
      #line 4076 
      case (unsigned long)2: 
                             #line 4076 
      ;
      #line 4077 
      ldv_inline_asm();
      #line 4076 
      break;
      #line 4076 
      case (unsigned long)4: 
                             #line 4076 
      ;
      #line 4077 
      ldv_inline_asm();
      #line 4076 
      break;
      #line 4076 
      case (unsigned long)8: 
                             #line 4076 
      ;
      #line 4077 
      ldv_inline_asm();
      #line 4076 
      break;
      #line 4076 
      default: 
               #line 4076 
      ;
      #line 4076 
      __bad_percpu_size();
    }
    #line 4076 
    pscr_ret__ = pfo_ret__;
    #line 4076 
    break;
    #line 4076 
    case (unsigned long)2: 
                           #line 4076 
    ;
    #line 4076 
    switch (4UL) {
      #line 4076 
      case (unsigned long)1: 
                             #line 4076 
      ;
      #line 4077 
      ldv_inline_asm();
      #line 4076 
      break;
      #line 4076 
      case (unsigned long)2: 
                             #line 4076 
      ;
      #line 4077 
      ldv_inline_asm();
      #line 4076 
      break;
      #line 4076 
      case (unsigned long)4: 
                             #line 4076 
      ;
      #line 4077 
      ldv_inline_asm();
      #line 4076 
      break;
      #line 4076 
      case (unsigned long)8: 
                             #line 4076 
      ;
      #line 4077 
      ldv_inline_asm();
      #line 4076 
      break;
      #line 4076 
      default: 
               #line 4076 
      ;
      #line 4076 
      __bad_percpu_size();
    }
    #line 4076 
    pscr_ret__ = pfo_ret___0;
    #line 4076 
    break;
    #line 4076 
    case (unsigned long)4: 
                           #line 4076 
    ;
    #line 4076 
    switch (4UL) {
      #line 4076 
      case (unsigned long)1: 
                             #line 4076 
      ;
      #line 4077 
      ldv_inline_asm();
      #line 4076 
      break;
      #line 4076 
      case (unsigned long)2: 
                             #line 4076 
      ;
      #line 4077 
      ldv_inline_asm();
      #line 4076 
      break;
      #line 4076 
      case (unsigned long)4: 
                             #line 4076 
      ;
      #line 4077 
      ldv_inline_asm();
      #line 4076 
      break;
      #line 4076 
      case (unsigned long)8: 
                             #line 4076 
      ;
      #line 4077 
      ldv_inline_asm();
      #line 4076 
      break;
      #line 4076 
      default: 
               #line 4076 
      ;
      #line 4076 
      __bad_percpu_size();
    }
    #line 4076 
    pscr_ret__ = pfo_ret___1;
    #line 4076 
    break;
    #line 4076 
    case (unsigned long)8: 
                           #line 4076 
    ;
    #line 4076 
    switch (4UL) {
      #line 4076 
      case (unsigned long)1: 
                             #line 4076 
      ;
      #line 4077 
      ldv_inline_asm();
      #line 4076 
      break;
      #line 4076 
      case (unsigned long)2: 
                             #line 4076 
      ;
      #line 4077 
      ldv_inline_asm();
      #line 4076 
      break;
      #line 4076 
      case (unsigned long)4: 
                             #line 4076 
      ;
      #line 4077 
      ldv_inline_asm();
      #line 4076 
      break;
      #line 4076 
      case (unsigned long)8: 
                             #line 4076 
      ;
      #line 4077 
      ldv_inline_asm();
      #line 4076 
      break;
      #line 4076 
      default: 
               #line 4076 
      ;
      #line 4076 
      __bad_percpu_size();
    }
    #line 4076 
    pscr_ret__ = pfo_ret___2;
    #line 4076 
    break;
    #line 4076 
    default: 
             #line 4076 
    ;
    #line 4076 
    __bad_size_call_parameter();
    #line 4076 
    break;
  }
  #line 4076 
  cpu = pscr_ret__;
  #line 4077 
  i = 0U;
  #line 4077 
  while (dev->num_tx_queues > i) {
    {
      #line 4078 
      struct netdev_queue *txq = netdev_get_tx_queue(dev,i);
      #line 4080 
      __netif_tx_lock(txq,cpu);
      #line 4081 
      netif_tx_stop_queue(txq);
      #line 4082 
      __netif_tx_unlock(txq);
    }
    #line 4077 
    i ++;
  }
  #line 4084 
  local_bh_enable();
  #line 4085 
  return;
}

#line 4131 
#line 1015  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cisco/enic/enic.ko/concurrency safety/0/concurrency safety/weaver/enic_main.i.aux"
static int cif_register_netdev(struct net_device *dev);
#line 4132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
#line 1031  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cisco/enic/enic.ko/concurrency safety/0/concurrency safety/weaver/enic_main.i.aux"
static void cif_unregister_netdev(struct net_device *dev);
#line 4137  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
#line 4137 
int __hw_addr_sync_dev(struct netdev_hw_addr_list *, struct net_device *, int (*)(struct net_device *, unsigned char *), int (*)(struct net_device *, unsigned char *));
#line 4152 
#line 4152 
void __hw_addr_unsync_dev(struct netdev_hw_addr_list *, struct net_device *, int (*)(struct net_device *, unsigned char *));
#line 4186  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static int __dev_uc_sync(struct net_device *dev, int (*sync)(struct net_device *, unsigned char *), int (*unsync)(struct net_device *, unsigned char *))
{
  #line 4192 
  return __hw_addr_sync_dev(& dev->uc,dev,sync,unsync);
}

#line 4202  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void __dev_uc_unsync(struct net_device *dev, int (*unsync)(struct net_device *, unsigned char *))
{
  #line 4206 
  __hw_addr_unsync_dev(& dev->uc,dev,unsync);
  #line 4207 
  return;
}

#line 4230  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static int __dev_mc_sync(struct net_device *dev, int (*sync)(struct net_device *, unsigned char *), int (*unsync)(struct net_device *, unsigned char *))
{
  #line 4236 
  return __hw_addr_sync_dev(& dev->mc,dev,sync,unsync);
}

#line 4246  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void __dev_mc_unsync(struct net_device *dev, int (*unsync)(struct net_device *, unsigned char *))
{
  #line 4250 
  __hw_addr_unsync_dev(& dev->mc,dev,unsync);
  #line 4251 
  return;
}

#line 4371 
#line 4371 
void netdev_rss_key_fill(void *, size_t);
#line 4403  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static bool can_checksum_protocol(netdev_features_t features, __be16 protocol)
{
  #line 4406 
  if ((unsigned int)protocol == 1673U) 
                                       #line 4407 
                                       return (_Bool)((features & 17179869184ULL) != 0ULL);
  #line 4411 
  if ((features & 8ULL) != 0ULL) 
                                 #line 4413 
                                 return (_Bool)1;
  #line 4416 
  switch ((int)protocol) {
    #line 4417 
    case 8: 
            #line 4417 
    ;
    #line 4418 
    return (_Bool)((features & 2ULL) != 0ULL);
    #line 4419 
    case 56710: 
                #line 4419 
    ;
    #line 4420 
    return (_Bool)((features & 16ULL) != 0ULL);
    #line 4421 
    default: 
             #line 4421 
    ;
    #line 4422 
    return (_Bool)0;
  }
}

#line 4452  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static bool netdev_xmit_more(void)
{
  #line 4454 
  u8 pscr_ret__;
  #line 4454 
  __this_cpu_preempt_check((char *)"read");
  {
    #line 4454 
    void *__vpp_verify = (void *)0;
    #line 4454 
    void *tmp = __vpp_verify;
  }
  #line 4454 
  switch (1UL) {
    #line 4454 
    u8 pfo_ret___0;
    #line 4454 
    u8 pfo_ret___1;
    #line 4454 
    u8 pfo_ret___2;
    #line 4454 
    u8 pfo_ret__;
    #line 4454 
    case (unsigned long)1: 
                           #line 4454 
    ;
    #line 4454 
    switch (1UL) {
      #line 4454 
      case (unsigned long)1: 
                             #line 4454 
      ;
      #line 4455 
      ldv_inline_asm();
      #line 4454 
      break;
      #line 4454 
      case (unsigned long)2: 
                             #line 4454 
      ;
      #line 4455 
      ldv_inline_asm();
      #line 4454 
      break;
      #line 4454 
      case (unsigned long)4: 
                             #line 4454 
      ;
      #line 4455 
      ldv_inline_asm();
      #line 4454 
      break;
      #line 4454 
      case (unsigned long)8: 
                             #line 4454 
      ;
      #line 4455 
      ldv_inline_asm();
      #line 4454 
      break;
      #line 4454 
      default: 
               #line 4454 
      ;
      #line 4454 
      __bad_percpu_size();
    }
    #line 4454 
    pscr_ret__ = pfo_ret__;
    #line 4454 
    break;
    #line 4454 
    case (unsigned long)2: 
                           #line 4454 
    ;
    #line 4454 
    switch (1UL) {
      #line 4454 
      case (unsigned long)1: 
                             #line 4454 
      ;
      #line 4455 
      ldv_inline_asm();
      #line 4454 
      break;
      #line 4454 
      case (unsigned long)2: 
                             #line 4454 
      ;
      #line 4455 
      ldv_inline_asm();
      #line 4454 
      break;
      #line 4454 
      case (unsigned long)4: 
                             #line 4454 
      ;
      #line 4455 
      ldv_inline_asm();
      #line 4454 
      break;
      #line 4454 
      case (unsigned long)8: 
                             #line 4454 
      ;
      #line 4455 
      ldv_inline_asm();
      #line 4454 
      break;
      #line 4454 
      default: 
               #line 4454 
      ;
      #line 4454 
      __bad_percpu_size();
    }
    #line 4454 
    pscr_ret__ = pfo_ret___0;
    #line 4454 
    break;
    #line 4454 
    case (unsigned long)4: 
                           #line 4454 
    ;
    #line 4454 
    switch (1UL) {
      #line 4454 
      case (unsigned long)1: 
                             #line 4454 
      ;
      #line 4455 
      ldv_inline_asm();
      #line 4454 
      break;
      #line 4454 
      case (unsigned long)2: 
                             #line 4454 
      ;
      #line 4455 
      ldv_inline_asm();
      #line 4454 
      break;
      #line 4454 
      case (unsigned long)4: 
                             #line 4454 
      ;
      #line 4455 
      ldv_inline_asm();
      #line 4454 
      break;
      #line 4454 
      case (unsigned long)8: 
                             #line 4454 
      ;
      #line 4455 
      ldv_inline_asm();
      #line 4454 
      break;
      #line 4454 
      default: 
               #line 4454 
      ;
      #line 4454 
      __bad_percpu_size();
    }
    #line 4454 
    pscr_ret__ = pfo_ret___1;
    #line 4454 
    break;
    #line 4454 
    case (unsigned long)8: 
                           #line 4454 
    ;
    #line 4454 
    switch (1UL) {
      #line 4454 
      case (unsigned long)1: 
                             #line 4454 
      ;
      #line 4455 
      ldv_inline_asm();
      #line 4454 
      break;
      #line 4454 
      case (unsigned long)2: 
                             #line 4454 
      ;
      #line 4455 
      ldv_inline_asm();
      #line 4454 
      break;
      #line 4454 
      case (unsigned long)4: 
                             #line 4454 
      ;
      #line 4455 
      ldv_inline_asm();
      #line 4454 
      break;
      #line 4454 
      case (unsigned long)8: 
                             #line 4454 
      ;
      #line 4455 
      ldv_inline_asm();
      #line 4454 
      break;
      #line 4454 
      default: 
               #line 4454 
      ;
      #line 4454 
      __bad_percpu_size();
    }
    #line 4454 
    pscr_ret__ = pfo_ret___2;
    #line 4454 
    break;
    #line 4454 
    default: 
             #line 4454 
    ;
    #line 4454 
    __bad_size_call_parameter();
    #line 4454 
    break;
  }
  #line 4454 
  return (_Bool)((unsigned int)pscr_ret__ != 0U);
}

#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/etherdevice.h"
#line 32 
__be16 eth_type_trans(struct sk_buff *, struct net_device *);
#line 47 
#line 47 
int eth_validate_addr(struct net_device *);
#line 51 
#line 1007  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cisco/enic/enic.ko/concurrency safety/0/concurrency safety/weaver/enic_main.i.aux"
static struct net_device *cif_alloc_etherdev_mqs(int sizeof_priv, unsigned int txqs, unsigned int rxqs);
#line 223  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/etherdevice.h"
__inline static void eth_random_addr(u8 *addr)
{
  #line 225 
  get_random_bytes((void *)addr,6);
  #line 226 
  *addr = (unsigned char)((unsigned int)*addr & 254U);
  #line 227 
  *addr = (unsigned char)((unsigned int)*addr | 2U);
  #line 228 
  return;
}

#line 249  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/etherdevice.h"
__inline static void eth_zero_addr(u8 *addr)
{
  #line 251 
  memset((void *)addr,0,6UL);
  #line 252 
  return;
}

#line 263  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/etherdevice.h"
__inline static void eth_hw_addr_random(struct net_device *dev)
{
  #line 265 
  dev->addr_assign_type = (unsigned char)1U;
  #line 266 
  eth_random_addr(dev->dev_addr);
  #line 267 
  return;
}

#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rtnetlink.h"
#line 33 
void rtnl_lock(void);
#line 34 
#line 34 
void rtnl_unlock(void);
#line 36 
#line 36 
int rtnl_is_locked(void);
#line 300  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/if_vlan.h"
__inline static bool eth_type_vlan(__be16 ethertype)
{
  #line 302 
  switch ((int)ethertype) {
    #line 303 
    case 129: 
              #line 303 
    ;
    #line 304 
    case 43144: 
                #line 304 
    ;
    #line 305 
    return (_Bool)1;
    #line 306 
    default: 
             #line 306 
    ;
    #line 307 
    return (_Bool)0;
  }
}

#line 510  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/if_vlan.h"
__inline static void __vlan_hwaccel_put_tag(struct sk_buff *skb, __be16 vlan_proto, u16 vlan_tci)
{
  #line 513 
  skb->vlan_proto = vlan_proto;
  #line 514 
  skb->vlan_tci = vlan_tci;
  #line 515 
  skb->vlan_present = (unsigned char)1U;
  #line 516 
  return;
}

#line 580  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/if_vlan.h"
__inline static __be16 __vlan_get_protocol(struct sk_buff *skb, __be16 type, int *depth)
{
  #line 583 
  unsigned int vlan_depth = (unsigned int)skb->mac_len;
  #line 589 
  if ((int)eth_type_vlan((unsigned short)((int)type)) != 0) {
    #line 590 
    if (vlan_depth != 0U) {
      #line 591 
      int __ret_warn_on;
      #line 591 
      __ret_warn_on = vlan_depth <= 3U;
      #line 591 
      if ((long)(__ret_warn_on != 0) != 0L) {
        #line 592 
        ldv_inline_asm();
        #line 593 
        ldv_inline_asm();
      }
      #line 591 
      if ((long)((long)(__ret_warn_on != 0)) != 0L) 
                                                    #line 592 
                                                    return (unsigned short)0U;
      #line 593 
      vlan_depth += 4294967292U;
    }
    else 
         #line 595 
         vlan_depth = 14U;
    #line 597 
    while (1) {
      {
        #line 598 
        struct vlan_hdr *vh;
        #line 600 
        int tmp_1;
        #line 600 
        if (pskb_may_pull(skb,vlan_depth + 4U)) 
                                                #line 600 
                                                tmp_1 = 0; else 
                                                                #line 600 
                                                                tmp_1 = 1;
        #line 600 
        if ((long)tmp_1 != 0L) 
                               #line 602 
                               return (unsigned short)0U;
        #line 604 
        vh = (struct vlan_hdr *)(skb->data + (unsigned long)vlan_depth);
        #line 605 
        type = vh->h_vlan_encapsulated_proto;
        #line 606 
        vlan_depth += 4U;
      }
      #line 607 
      if (! ((int)eth_type_vlan((unsigned short)((int)type)) != 0)) 
                                                                    #line 597 
                                                                    break;
    }
  }
  #line 610 
  if (depth != (int *)0) 
                         #line 611 
                         *depth = (int)vlan_depth;
  #line 613 
  return type;
}

#line 623  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/if_vlan.h"
__inline static __be16 vlan_get_protocol(struct sk_buff *skb)
{
  #line 625 
  return __vlan_get_protocol(skb,(unsigned short)((int)skb->protocol),(int *)0);
}

#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ip.h"
__inline static struct iphdr *ip_hdr(struct sk_buff *skb)
{
  #line 21 
  return (struct iphdr *)skb_network_header(skb);
}

#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ip.h"
__inline static struct iphdr *inner_ip_hdr(struct sk_buff *skb)
{
  #line 26 
  return (struct iphdr *)skb_inner_network_header(skb);
}

#line 460  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netlink.h"
#line 460 
int nla_put(struct sk_buff *, int, int, void *);
#line 1072  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netlink.h"
__inline static void *nla_data(struct nlattr *nla)
{
  #line 1074 
  return (void *)((char *)nla + 4U);
}

#line 1190  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netlink.h"
__inline static int nla_put_u16(struct sk_buff *skb, int attrtype, u16 value)
{
  #line 1192 
  u16 tmp = value;
  #line 1194 
  return nla_put(skb,attrtype,2,(void *)(& tmp));
}

#line 1526  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netlink.h"
__inline static u8 nla_get_u8(struct nlattr *nla)
{
  #line 1528 
  return *((u8 *)nla_data(nla));
}

#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/tcp.h"
__inline static struct tcphdr *tcp_hdr(struct sk_buff *skb)
{
  #line 26 
  return (struct tcphdr *)skb_transport_header(skb);
}

#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/tcp.h"
__inline static unsigned int __tcp_hdrlen(struct tcphdr *th)
{
  #line 31 
  return (unsigned int)((int)th->doff * 4);
}

#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/tcp.h"
__inline static unsigned int tcp_hdrlen(struct sk_buff *skb)
{
  #line 36 
  return __tcp_hdrlen(tcp_hdr(skb));
}

#line 39  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/tcp.h"
__inline static struct tcphdr *inner_tcp_hdr(struct sk_buff *skb)
{
  #line 41 
  return (struct tcphdr *)skb_inner_transport_header(skb);
}

#line 44  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/tcp.h"
__inline static unsigned int inner_tcp_hdrlen(struct sk_buff *skb)
{
  #line 46 
  ;
  #line 46 
  return (unsigned int)((int)inner_tcp_hdr(skb)->doff * 4);
}

#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/udp.h"
__inline static struct udphdr *udp_hdr(struct sk_buff *skb)
{
  #line 23 
  return (struct udphdr *)skb_transport_header(skb);
}

#line 92  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ipv6.h"
__inline static struct ipv6hdr *ipv6_hdr(struct sk_buff *skb)
{
  #line 94 
  return (struct ipv6hdr *)skb_network_header(skb);
}

#line 97  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ipv6.h"
__inline static struct ipv6hdr *inner_ipv6_hdr(struct sk_buff *skb)
{
  #line 99 
  return (struct ipv6hdr *)skb_inner_network_header(skb);
}

#line 35  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cpu_rmap.h"
#line 35 
struct cpu_rmap *alloc_cpu_rmap(unsigned int, gfp_t);
#line 58  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cpu_rmap.h"
__inline static struct cpu_rmap *alloc_irq_cpu_rmap(unsigned int size)
{
  #line 60 
  return alloc_cpu_rmap(size,3264U);
}

#line 62 
#line 62 
void free_irq_cpu_rmap(struct cpu_rmap *);
#line 64 
#line 64 
int irq_cpu_rmap_add(struct cpu_rmap *, int);
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/crash_dump.h"
#line 16 
extern unsigned long long elfcorehdr_addr;
#line 64  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/crash_dump.h"
__inline static bool is_kdump_kernel(void)
{
  #line 66 
  return (_Bool)(elfcorehdr_addr != 18446744073709551615ULL);
}

#line 113  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/busy_poll.h"
__inline static void skb_mark_napi_id(struct sk_buff *skb, struct napi_struct *napi)
{
  #line 117 
  skb->__anonCompField_sk_buff_96.napi_id = napi->napi_id;
  #line 118 
  return;
}

#line 295  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/vxlan.h"
__inline static netdev_features_t vxlan_features_check(struct sk_buff *skb, netdev_features_t features)
{
  #line 298 
  u8 l4_hdr = (unsigned char)0U;
  #line 300 
  if ((unsigned int)skb->encapsulation == 0U) 
                                              #line 301 
                                              return features;
  #line 303 
  switch ((int)vlan_get_protocol(skb)) {
    #line 304 
    case 8: 
            #line 304 
    ;
    #line 305 
    l4_hdr = ip_hdr(skb)->protocol;
    #line 306 
    break;
    #line 307 
    case 56710: 
                #line 307 
    ;
    #line 308 
    l4_hdr = ipv6_hdr(skb)->nexthdr;
    #line 309 
    break;
    #line 310 
    default: 
             #line 310 
    ;
    #line 311 
    return features;
  }
  #line 314 
  if ((unsigned int)l4_hdr == 17U) 
    #line 314 
    if ((unsigned int)skb->inner_protocol_type != 0U || (unsigned int)skb->__anonCompField_sk_buff_98.inner_protocol != 22629U) 
      #line 321 
      return features & 18446744056529747941ULL;
    else {
      #line 316 
      if (skb_inner_mac_header(skb) - skb_transport_header(skb) != 16L) 
        #line 321 
        return features & 18446744056529747941ULL;
      else 
        #line 318 
        if ((unsigned int)skb->ip_summed != 0U) {
          #line 320 
          ;
          #line 320 
          if (! can_checksum_protocol(features,
                              (unsigned short)((int)inner_eth_hdr(skb)->h_proto))) 
            #line 321 
            return features & 18446744056529747941ULL;
        }
    }
  #line 323 
  return features;
}

#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/cq_desc.h"
__inline static void cq_desc_dec(struct cq_desc *desc_arg, u8 *type, u8 *color, u16 *q_number, u16 *completed_index)
{
  #line 59 
  struct cq_desc *desc = desc_arg;
  #line 60 
  u8 type_color = desc->type_color;
  #line 62 
  *color = (unsigned char)((int)type_color >> 7);
  #line 63 
  ldv_inline_asm();
  #line 74 
  *type = (unsigned char)((unsigned int)type_color & 15U);
  #line 75 
  *q_number = (unsigned short)((unsigned int)desc->q_number & 1023U);
  #line 76 
  *completed_index = (unsigned short)((unsigned int)desc->completed_index & 4095U);
  #line 77 
  return;
}

#line 104  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/cq_enet_desc.h"
__inline static void cq_enet_rq_desc_dec(struct cq_enet_rq_desc *desc, u8 *type, u8 *color, u16 *q_number, u16 *completed_index, u8 *ingress_port, u8 *fcoe, u8 *eop, u8 *sop, u8 *rss_type, u8 *csum_not_calc, u32 *rss_hash, u16 *bytes_written, u8 *packet_error, u8 *vlan_stripped, u16 *vlan_tci, u16 *checksum, u8 *fcoe_sof, u8 *fcoe_fc_crc_ok, u8 *fcoe_enc_error, u8 *fcoe_eof, u8 *tcp_udp_csum_ok, u8 *udp, u8 *tcp, u8 *ipv4_csum_ok, u8 *ipv6, u8 *ipv4, u8 *ipv4_fragment, u8 *fcs_ok)
{
  #line 113 
  u16 completed_index_flags;
  #line 114 
  u16 q_number_rss_type_flags;
  #line 115 
  u16 bytes_written_flags;
  #line 117 
  cq_desc_dec((struct cq_desc *)desc,type,color,q_number,completed_index);
  #line 120 
  completed_index_flags = desc->completed_index_flags;
  #line 121 
  q_number_rss_type_flags = desc->q_number_rss_type_flags;
  #line 123 
  bytes_written_flags = desc->bytes_written_flags;
  #line 125 
  *ingress_port = (unsigned char)((unsigned int)((unsigned char)((int)completed_index_flags >> 12)) & 1U);
  #line 127 
  *fcoe = (unsigned char)((unsigned int)((unsigned char)((int)completed_index_flags >> 13)) & 1U);
  #line 129 
  *eop = (unsigned char)((unsigned int)((unsigned char)((int)completed_index_flags >> 14)) & 1U);
  #line 131 
  *sop = (unsigned char)((int)completed_index_flags >> 15);
  #line 134 
  *rss_type = (unsigned char)((unsigned int)((unsigned char)((int)q_number_rss_type_flags >> 10)) & 15U);
  #line 136 
  *csum_not_calc = (unsigned char)((unsigned int)((unsigned char)((int)q_number_rss_type_flags >> 14)) & 1U);
  #line 139 
  *rss_hash = desc->rss_hash;
  #line 141 
  *bytes_written = (unsigned short)((unsigned int)bytes_written_flags & 16383U);
  #line 143 
  *packet_error = (unsigned char)((unsigned int)((unsigned char)((int)bytes_written_flags >> 14)) & 1U);
  #line 145 
  *vlan_stripped = (unsigned char)((int)bytes_written_flags >> 15);
  #line 151 
  *vlan_tci = desc->vlan;
  #line 153 
  if ((unsigned int)*fcoe != 0U) {
    #line 154 
    *fcoe_sof = (unsigned char)desc->checksum_fcoe;
    #line 156 
    *fcoe_fc_crc_ok = (unsigned char)((unsigned int)desc->flags & 1U);
    #line 158 
    *fcoe_enc_error = (unsigned char)((unsigned int)((unsigned char)((int)desc->flags >> 1)) & 1U);
    #line 160 
    *fcoe_eof = (unsigned char)((int)desc->checksum_fcoe >> 8);
    #line 163 
    *checksum = (unsigned short)0U;
  }
  else {
    #line 165 
    *fcoe_sof = (unsigned char)0U;
    #line 166 
    *fcoe_fc_crc_ok = (unsigned char)0U;
    #line 167 
    *fcoe_enc_error = (unsigned char)0U;
    #line 168 
    *fcoe_eof = (unsigned char)0U;
    #line 169 
    *checksum = desc->checksum_fcoe;
  }
  #line 172 
  *tcp_udp_csum_ok = (unsigned char)((unsigned int)desc->flags & 1U);
  #line 174 
  *udp = (unsigned char)((unsigned int)((unsigned char)((int)desc->flags >> 1)) & 1U);
  #line 175 
  *tcp = (unsigned char)((unsigned int)((unsigned char)((int)desc->flags >> 2)) & 1U);
  #line 176 
  *ipv4_csum_ok = (unsigned char)((unsigned int)((unsigned char)((int)desc->flags >> 3)) & 1U);
  #line 178 
  *ipv6 = (unsigned char)((unsigned int)((unsigned char)((int)desc->flags >> 4)) & 1U);
  #line 179 
  *ipv4 = (unsigned char)((unsigned int)((unsigned char)((int)desc->flags >> 5)) & 1U);
  #line 180 
  *ipv4_fragment = (unsigned char)((unsigned int)((unsigned char)((int)desc->flags >> 6)) & 1U);
  #line 182 
  *fcs_ok = (unsigned char)((int)desc->flags >> 7);
  #line 183 
  return;
}

#line 54  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/vnic_intr.h"
__inline static void vnic_intr_unmask(struct vnic_intr *intr)
{
  #line 56 
  iowrite32(0U,(void *)(& (intr->ctrl)->mask));
  #line 57 
  return;
}

#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/vnic_intr.h"
__inline static void vnic_intr_mask(struct vnic_intr *intr)
{
  #line 61 
  iowrite32(1U,(void *)(& (intr->ctrl)->mask));
  #line 62 
  return;
}

#line 64  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/vnic_intr.h"
__inline static int vnic_intr_masked(struct vnic_intr *intr)
{
  #line 66 
  return (int)ioread32((void *)(& (intr->ctrl)->mask));
}

#line 69  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/vnic_intr.h"
__inline static void vnic_intr_return_credits(struct vnic_intr *intr, unsigned int credits, int unmask, int reset_timer)
{
  #line 75 
  unsigned int tmp;
  #line 76 
  unsigned int tmp_0;
  #line 75 
  if (unmask != 0) 
                   #line 75 
                   tmp = 65536U; else 
                                      #line 75 
                                      tmp = 0U;
  #line 76 
  if (reset_timer != 0) 
                        #line 76 
                        tmp_0 = 131072U; else 
                                              #line 76 
                                              tmp_0 = 0U;
  #line 75 
  u32 int_credit_return = ((credits & 65535U) | tmp) | tmp_0;
  #line 79 
  iowrite32(int_credit_return,(void *)(& (intr->ctrl)->int_credit_return));
  #line 80 
  return;
}

#line 82  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/vnic_intr.h"
__inline static unsigned int vnic_intr_credits(struct vnic_intr *intr)
{
  #line 84 
  return ioread32((void *)(& (intr->ctrl)->int_credits));
}

#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/vnic_intr.h"
__inline static void vnic_intr_return_all_credits(struct vnic_intr *intr)
{
  #line 89 
  unsigned int credits = vnic_intr_credits(intr);
  #line 90 
  int unmask = 1;
  #line 91 
  int reset_timer = 1;
  #line 93 
  vnic_intr_return_credits(intr,credits,unmask,reset_timer);
  #line 94 
  return;
}

#line 96  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/vnic_intr.h"
__inline static u32 vnic_intr_legacy_pba(u32 *legacy_pba)
{
  #line 99 
  return ioread32((void *)legacy_pba);
}

#line 53  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/wq_enet_desc.h"
__inline static void wq_enet_desc_enc(struct wq_enet_desc *desc, u64 address, u16 length, u16 mss, u16 header_length, u8 offload_mode, u8 eop, u8 cq_entry, u8 fcoe_encap, u8 vlan_tag_insert, u16 vlan_tag, u8 loopback)
{
  #line 58 
  desc->address = address;
  #line 59 
  desc->length = (unsigned short)((unsigned int)length & 16383U);
  #line 60 
  desc->mss_loopback = (unsigned short)(((int)mss << 2) | (((int)loopback << 1) & 2));
  #line 62 
  desc->header_length_flags = (unsigned short)(((((((int)header_length & 1023) | (((int)offload_mode << 10) & 3072)) | (((int)eop << 12) & 4096)) | (((int)cq_entry << 13) & 8192)) | (((int)fcoe_encap << 14) & 16384)) | ((int)vlan_tag_insert << 15));
  #line 69 
  desc->vlan_tag = vlan_tag;
  #line 70 
  return;
}

#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/rq_enet_desc.h"
__inline static void rq_enet_desc_enc(struct rq_enet_desc *desc, u64 address, u8 type, u16 length)
{
  #line 46 
  desc->address = address;
  #line 47 
  desc->length_type = (unsigned short)(((int)length & 16383) | ((int)type << 14));
  #line 48 
  return;
}

#line 72  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/vnic_cq.h"
__inline static unsigned int vnic_cq_service(struct vnic_cq *cq, unsigned int work_to_do, int (*q_service)(struct vnic_dev *, struct cq_desc *, u8 , u16 , u16 , void *), void *opaque)
{
  #line 78 
  struct cq_desc *cq_desc;
  #line 80 
  u16 q_number;
  #line 80 
  u16 completed_index;
  #line 81 
  u8 type;
  #line 81 
  u8 color;
  #line 79 
  unsigned int work_done = 0U;
  #line 83 
  cq_desc = (struct cq_desc *)((u8 *)cq->ring.descs + (unsigned long)(cq->ring.desc_size * cq->to_clean));
  #line 85 
  cq_desc_dec(cq_desc,& type,& color,& q_number,& completed_index);
  #line 88 
  while ((unsigned int)color != cq->last_color) {
    #line 90 
    if ((*q_service)(cq->vdev,cq_desc,(unsigned char)((int)type),
                   (unsigned short)((int)q_number),
                   (unsigned short)((int)completed_index),opaque) != 0) 
      #line 92 
      break;
    #line 94 
    (cq->to_clean) ++;
    #line 95 
    if (cq->to_clean == cq->ring.desc_count) {
      #line 96 
      cq->to_clean = 0U;
      #line 97 
      cq->last_color = (unsigned int)(cq->last_color == 0U);
    }
    #line 100 
    cq_desc = (struct cq_desc *)((u8 *)cq->ring.descs + (unsigned long)(cq->ring.desc_size * cq->to_clean));
    #line 102 
    cq_desc_dec(cq_desc,& type,& color,& q_number,& completed_index);
    #line 105 
    work_done ++;
    #line 106 
    if (work_done >= work_to_do) 
                                 #line 107 
                                 break;
  }
  #line 110 
  return work_done;
}

#line 103  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/vnic_wq.h"
__inline static unsigned int vnic_wq_desc_avail(struct vnic_wq *wq)
{
  #line 106 
  return wq->ring.desc_avail;
}

#line 115  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/vnic_wq.h"
__inline static void *vnic_wq_next_desc(struct vnic_wq *wq)
{
  #line 117 
  return (wq->to_use)->desc;
}

#line 120  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/vnic_wq.h"
__inline static void vnic_wq_doorbell(struct vnic_wq *wq)
{
  #line 122 
  ldv_inline_asm();
  #line 128 
  iowrite32((wq->to_use)->index,(void *)(& (wq->ctrl)->posted_index));
  #line 129 
  return;
}

#line 131  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/vnic_wq.h"
__inline static void vnic_wq_post(struct vnic_wq *wq, void *os_buf, dma_addr_t dma_addr, unsigned int len, int sop, int eop, uint8_t desc_skip_cnt, uint8_t cq_entry, uint8_t compressed_send, uint64_t wrid)
{
  #line 137 
  struct vnic_wq_buf *buf = wq->to_use;
  #line 139 
  buf->sop = sop;
  #line 140 
  buf->cq_entry = cq_entry;
  #line 141 
  buf->compressed_send = compressed_send;
  #line 142 
  buf->desc_skip_cnt = desc_skip_cnt;
  #line 143 
  if (eop != 0) 
                #line 143 
                buf->os_buf = os_buf; else 
                                           #line 143 
                                           buf->os_buf = (void *)0;
  #line 144 
  buf->dma_addr = dma_addr;
  #line 145 
  buf->len = len;
  #line 146 
  buf->wr_id = wrid;
  #line 148 
  buf = buf->next;
  #line 149 
  wq->to_use = buf;
  #line 151 
  wq->ring.desc_avail -= (unsigned int)desc_skip_cnt;
  #line 152 
  return;
}

#line 154  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/vnic_wq.h"
__inline static void vnic_wq_service(struct vnic_wq *wq, struct cq_desc *cq_desc, u16 completed_index, void (*buf_service)(struct vnic_wq *, struct cq_desc *, struct vnic_wq_buf *, void *), void *opaque)
{
  #line 160 
  struct vnic_wq_buf *buf;
  #line 162 
  buf = wq->to_clean;
  #line 163 
  while (1) {
    #line 165 
    (*buf_service)(wq,cq_desc,buf,opaque);
    #line 167 
    (wq->ring.desc_avail) ++;
    #line 169 
    wq->to_clean = buf->next;
    #line 171 
    if (buf->index == (unsigned int)completed_index) 
                                                     #line 172 
                                                     break;
    #line 174 
    buf = wq->to_clean;
  }
  #line 176 
  return;
}

#line 97  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/vnic_rq.h"
__inline static unsigned int vnic_rq_desc_avail(struct vnic_rq *rq)
{
  #line 100 
  return rq->ring.desc_avail;
}

#line 103  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/vnic_rq.h"
__inline static unsigned int vnic_rq_desc_used(struct vnic_rq *rq)
{
  #line 106 
  return (rq->ring.desc_count - rq->ring.desc_avail) + 4294967295U;
}

#line 109  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/vnic_rq.h"
__inline static void *vnic_rq_next_desc(struct vnic_rq *rq)
{
  #line 111 
  return (rq->to_use)->desc;
}

#line 119  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/vnic_rq.h"
__inline static void vnic_rq_post(struct vnic_rq *rq, void *os_buf, unsigned int os_buf_index, dma_addr_t dma_addr, unsigned int len, uint64_t wrid)
{
  #line 124 
  struct vnic_rq_buf *buf = rq->to_use;
  #line 126 
  buf->os_buf = os_buf;
  #line 127 
  buf->os_buf_index = os_buf_index;
  #line 128 
  buf->dma_addr = dma_addr;
  #line 129 
  buf->len = len;
  #line 130 
  buf->wr_id = wrid;
  #line 132 
  buf = buf->next;
  #line 133 
  rq->to_use = buf;
  #line 134 
  (rq->ring.desc_avail) --;
  #line 143 
  if ((buf->index & 15U) == 0U) {
    #line 145 
    ldv_inline_asm();
    #line 150 
    iowrite32(buf->index,(void *)(& (rq->ctrl)->posted_index));
  }
  #line 152 
  return;
}

#line 164  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/vnic_rq.h"
__inline static void vnic_rq_service(struct vnic_rq *rq, struct cq_desc *cq_desc, u16 completed_index, int desc_return, void (*buf_service)(struct vnic_rq *, struct cq_desc *, struct vnic_rq_buf *, int , void *), void *opaque)
{
  #line 170 
  struct vnic_rq_buf *buf;
  #line 171 
  int skipped;
  #line 173 
  buf = rq->to_clean;
  #line 174 
  while (1) {
    #line 176 
    skipped = buf->index != (unsigned int)completed_index;
    #line 178 
    (*buf_service)(rq,cq_desc,buf,skipped,opaque);
    #line 180 
    if (desc_return == 0) 
                          #line 181 
                          (rq->ring.desc_avail) ++;
    #line 183 
    rq->to_clean = buf->next;
    #line 185 
    if (skipped == 0) 
                      #line 186 
                      break;
    #line 188 
    buf = rq->to_clean;
  }
  #line 190 
  return;
}

#line 192  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/vnic_rq.h"
__inline static int vnic_rq_fill(struct vnic_rq *rq, int (*buf_fill)(struct vnic_rq *))
{
  #line 195 
  int err;
  #line 197 
  while (1) {
    #line 197 
    if (! (vnic_rq_desc_avail(rq) != 0U)) 
                                          #line 197 
                                          break;
    #line 199 
    err = (*buf_fill)(rq);
    #line 200 
    if (err != 0) 
                  #line 201 
                  return err;
  }
  #line 204 
  return 0;
}

#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/enic_res.h"
__inline static void enic_queue_wq_desc_ex(struct vnic_wq *wq, void *os_buf, dma_addr_t dma_addr, unsigned int len, unsigned int mss_or_csum_offset, unsigned int hdr_len, int vlan_tag_insert, unsigned int vlan_tag, int offload_mode, int cq_entry, int sop, int eop, int loopback)
{
  #line 49 
  struct wq_enet_desc *desc = vnic_wq_next_desc(wq);
  #line 50 
  u8 desc_skip_cnt = (unsigned char)1U;
  #line 51 
  u8 compressed_send = (unsigned char)0U;
  #line 52 
  u64 wrid = 0ULL;
  #line 54 
  wq_enet_desc_enc(desc,dma_addr,(unsigned short)((int)((unsigned short)len)),(unsigned short)((int)((unsigned short)mss_or_csum_offset)),(unsigned short)((int)((unsigned short)hdr_len)),(unsigned char)((int)((unsigned char)offload_mode)),(unsigned char)((int)((unsigned char)eop)),(unsigned char)((int)((unsigned char)cq_entry)),(unsigned char)0,(unsigned char)((int)((unsigned char)vlan_tag_insert)),(unsigned short)((int)((unsigned short)vlan_tag)),(unsigned char)((int)((unsigned char)loopback)));
  #line 65 
  vnic_wq_post(wq,os_buf,dma_addr,len,sop,eop,(unsigned char)((int)desc_skip_cnt),(unsigned char)((int)((unsigned char)cq_entry)),(unsigned char)((int)compressed_send),wrid);
  #line 67 
  return;
}

#line 69  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/enic_res.h"
__inline static void enic_queue_wq_desc_cont(struct vnic_wq *wq, void *os_buf, dma_addr_t dma_addr, unsigned int len, int eop, int loopback)
{
  #line 73 
  enic_queue_wq_desc_ex(wq,os_buf,dma_addr,len,0U,0U,0,0U,0,eop,0,eop,loopback);
  #line 74 
  return;
}

#line 78  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/enic_res.h"
__inline static void enic_queue_wq_desc(struct vnic_wq *wq, void *os_buf, dma_addr_t dma_addr, unsigned int len, int vlan_tag_insert, unsigned int vlan_tag, int eop, int loopback)
{
  #line 82 
  enic_queue_wq_desc_ex(wq,os_buf,dma_addr,len,0U,0U,vlan_tag_insert,vlan_tag,0,eop,1,eop,loopback);
  #line 83 
  return;
}

#line 100  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/enic_res.h"
__inline static void enic_queue_wq_desc_csum_l4(struct vnic_wq *wq, void *os_buf, dma_addr_t dma_addr, unsigned int len, unsigned int csum_offset, unsigned int hdr_len, int vlan_tag_insert, unsigned int vlan_tag, int eop, int loopback)
{
  #line 105 
  enic_queue_wq_desc_ex(wq,os_buf,dma_addr,len,csum_offset,hdr_len,vlan_tag_insert,vlan_tag,2,eop,1,eop,loopback);
  #line 106 
  return;
}

#line 111  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/enic_res.h"
__inline static void enic_queue_wq_desc_tso(struct vnic_wq *wq, void *os_buf, dma_addr_t dma_addr, unsigned int len, unsigned int mss, unsigned int hdr_len, int vlan_tag_insert, unsigned int vlan_tag, int eop, int loopback)
{
  #line 116 
  enic_queue_wq_desc_ex(wq,os_buf,dma_addr,len,mss,hdr_len,vlan_tag_insert,vlan_tag,3,eop,1,eop,loopback);
  #line 117 
  return;
}

#line 122  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/enic_res.h"
__inline static void enic_queue_rq_desc(struct vnic_rq *rq, void *os_buf, unsigned int os_buf_index, dma_addr_t dma_addr, unsigned int len)
{
  #line 126 
  struct rq_enet_desc *desc = vnic_rq_next_desc(rq);
  #line 127 
  u64 wrid = 0ULL;
  #line 128 
  u8 type = (unsigned char)(os_buf_index != 0U);
  #line 131 
  rq_enet_desc_enc(desc,dma_addr,(unsigned char)((int)type),(unsigned short)((int)((unsigned short)len)));
  #line 135 
  vnic_rq_post(rq,os_buf,os_buf_index,dma_addr,len,wrid);
  #line 136 
  return;
}

#line 243  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/enic.h"
__inline static unsigned int enic_legacy_io_intr(void)
{
  #line 245 
  return 0U;
}

#line 248  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/enic.h"
__inline static unsigned int enic_legacy_err_intr(void)
{
  #line 250 
  return 1U;
}

#line 253  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/enic.h"
__inline static unsigned int enic_legacy_notify_intr(void)
{
  #line 255 
  return 2U;
}

#line 270  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/enic.h"
__inline static unsigned int enic_msix_err_intr(struct enic *enic)
{
  #line 272 
  return enic->rq_count + enic->wq_count;
}

#line 275  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/enic.h"
__inline static unsigned int enic_msix_notify_intr(struct enic *enic)
{
  #line 277 
  return (enic->rq_count + enic->wq_count) + 1U;
}

#line 280  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/enic.h"
__inline static bool enic_is_err_intr(struct enic *enic, int intr)
{
  #line 282 
  switch ((unsigned int)vnic_dev_get_intr_mode(enic->vdev)) {
    #line 283 
    case (unsigned int)1: 
                          #line 283 
    ;
    #line 284 
    ;
    #line 284 
    return (_Bool)(enic_legacy_err_intr() == (unsigned int)intr);
    #line 285 
    case (unsigned int)3: 
                          #line 285 
    ;
    #line 286 
    ;
    #line 286 
    return (_Bool)(enic_msix_err_intr(enic) == (unsigned int)intr);
    #line 287 
    case (unsigned int)2: 
                          #line 287 
    ;
    #line 288 
    default: 
             #line 288 
    ;
    #line 289 
    return (_Bool)0;
  }
}

#line 293  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/enic.h"
__inline static bool enic_is_notify_intr(struct enic *enic, int intr)
{
  #line 295 
  switch ((unsigned int)vnic_dev_get_intr_mode(enic->vdev)) {
    #line 296 
    case (unsigned int)1: 
                          #line 296 
    ;
    #line 297 
    ;
    #line 297 
    return (_Bool)(enic_legacy_notify_intr() == (unsigned int)intr);
    #line 298 
    case (unsigned int)3: 
                          #line 298 
    ;
    #line 299 
    ;
    #line 299 
    return (_Bool)(enic_msix_notify_intr(enic) == (unsigned int)intr);
    #line 300 
    case (unsigned int)2: 
                          #line 300 
    ;
    #line 301 
    default: 
             #line 301 
    ;
    #line 302 
    return (_Bool)0;
  }
}

#line 306  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/enic.h"
__inline static int enic_dma_map_check(struct enic *enic, dma_addr_t dma_addr)
{
  #line 308 
  if ((long)(pci_dma_mapping_error(enic->pdev,dma_addr) != 0) != 0L) {
    #line 309 
    if (net_ratelimit() != 0) 
                              #line 309 
                              printk((char *)"\001",(char *)(& (enic->netdev)->name));
    #line 311 
    (enic->gen_stats.dma_map_error) ++;
    #line 313 
    return -12;
  }
  #line 316 
  return 0;
}

#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/enic_clsf.h"
__inline static void enic_rfs_timer_start(struct enic *enic)
{
  {
    #line 23 
    struct lock_class_key __key;
    #line 23 
    init_timer_key(& enic->rfs_h.rfs_may_expire,& enic_flow_may_expire,0U,(char *)"(&enic->rfs_h.rfs_may_expire)",& __key);
  }
  #line 24 
  cif_mod_timer_0(& enic->rfs_h.rfs_may_expire,jiffies + 62UL);
  #line 25 
  return;
}

#line 73  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/enic_main.c"
static struct pci_device_id enic_id_table[4U] = {{.vendor = 4407U, .device = 67U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 4407U, .device = 68U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 4407U, .device = 113U, .subvendor = 4294967295U, .subdevice = 4294967295U}};
#line 84  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/enic_main.c"
struct pci_device_id __mod_pci__enic_id_table_device_table[4U];
#line 92  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/enic_main.c"
static struct enic_intr_mod_table mod_table[11U] = {{.rx_rate = 4000U}, {.rx_rate = 4400U, .range_percent = 10U}, {.rx_rate = 5060U, .range_percent = 20U}, {.rx_rate = 5230U, .range_percent = 30U}, {.rx_rate = 5540U, .range_percent = 40U}, {.rx_rate = 5820U, .range_percent = 50U}, {.rx_rate = 6120U, .range_percent = 60U}, {.rx_rate = 6435U, .range_percent = 70U}, {.rx_rate = 6745U, .range_percent = 80U}, {.rx_rate = 7000U, .range_percent = 90U}, {.rx_rate = 4294967295U, .range_percent = 100U}};
#line 109  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/enic_main.c"
static struct enic_intr_mod_range mod_range[3U] = {[1] = {.large_pkt_range_start = 3U}, {.small_pkt_range_start = 3U, .large_pkt_range_start = 6U}};
#line 115  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/enic_main.c"
static void enic_init_affinity_hint(struct enic *enic)
{
  #line 118 
  int i;
  #line 117 
  int numa_node = dev_to_node(& (enic->pdev)->dev);
  #line 120 
  i = 0;
  #line 120 
  while (enic->intr_count > (unsigned int)i) {
    {
      #line 121 
      if ((int)enic_is_err_intr(enic,i) != 0) 
                                              #line 124 
                                              goto __Cont;
      else {
        #line 121 
        if ((int)enic_is_notify_intr(enic,i) != 0) 
                                                   #line 124 
                                                   goto __Cont;
        else {
          #line 121 
          if ((int)cpumask_available(enic->msix[i].affinity_mask) != 0) {
            #line 123 
            if (! cpumask_empty(enic->msix[i].affinity_mask)) 
                                                              #line 124 
                                                              goto __Cont;
          }
        }
      }
      #line 125 
      if ((int)zalloc_cpumask_var(& enic->msix[i].affinity_mask,3264U) != 0) {
        #line 127 
        ;
        #line 127 
        cpumask_set_cpu(cpumask_local_spread((unsigned int)i,numa_node),enic->msix[i].affinity_mask);
      }
    }
    #line 120 
    __Cont: 
            #line 120 
    i ++;
  }
  #line 130 
  return;
}

#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/enic_main.c"
static void enic_free_affinity_hint(struct enic *enic)
{
  #line 134 
  int i;
  #line 136 
  i = 0;
  #line 136 
  while (enic->intr_count > (unsigned int)i) {
    {
      #line 137 
      if ((int)enic_is_err_intr(enic,i) != 0) 
                                              #line 138 
                                              goto __Cont;
      else {
        #line 137 
        if ((int)enic_is_notify_intr(enic,i) != 0) 
                                                   #line 138 
                                                   goto __Cont;
      }
      #line 139 
      free_cpumask_var(enic->msix[i].affinity_mask);
    }
    #line 136 
    __Cont: 
            #line 136 
    i ++;
  }
  #line 141 
  return;
}

#line 143  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/enic_main.c"
static void enic_set_affinity_hint(struct enic *enic)
{
  #line 145 
  int i;
  #line 146 
  int err;
  #line 148 
  i = 0;
  #line 148 
  while (enic->intr_count > (unsigned int)i) {
    {
      #line 149 
      if ((int)enic_is_err_intr(enic,i) != 0) 
                                              #line 153 
                                              goto __Cont;
      else {
        #line 149 
        if ((int)enic_is_notify_intr(enic,i) != 0) 
                                                   #line 153 
                                                   goto __Cont;
        else {
          #line 151 
          if (cpumask_available(enic->msix[i].affinity_mask)) {
            #line 151 
            if ((int)cpumask_empty(enic->msix[i].affinity_mask) != 0) 
              #line 153 
              goto __Cont;
          }
          else 
               #line 153 
               goto __Cont;
        }
      }
      #line 154 
      err = irq_set_affinity_hint(enic->msix_entry[i].vector,enic->msix[i].affinity_mask);
      #line 156 
      if (err != 0) 
                    #line 157 
                    netdev_warn(enic->netdev,(char *)"irq_set_affinity_hint failed, err %d\n",err);
    }
    #line 148 
    __Cont: 
            #line 148 
    i ++;
  }
  #line 161 
  i = 0;
  #line 161 
  while (enic->wq_count > (unsigned int)i) {
    {
      #line 162 
      int wq_intr = (int)enic_msix_wq_intr(enic,(unsigned int)i);
      #line 164 
      if ((int)cpumask_available(enic->msix[wq_intr].affinity_mask) != 0) {
        #line 165 
        if (! cpumask_empty(enic->msix[wq_intr].affinity_mask)) 
                                                                #line 166 
                                                                netif_set_xps_queue(enic->netdev,enic->msix[wq_intr].affinity_mask,(unsigned short)((int)((unsigned short)i)));
      }
    }
    #line 161 
    i ++;
  }
  #line 169 
  return;
}

#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/enic_main.c"
static void enic_unset_affinity_hint(struct enic *enic)
{
  #line 174 
  int i;
  #line 176 
  i = 0;
  #line 176 
  while (enic->intr_count > (unsigned int)i) {
    #line 177 
    irq_set_affinity_hint(enic->msix_entry[i].vector,(struct cpumask *)0);
    #line 176 
    i ++;
  }
  #line 178 
  return;
}

#line 180  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/enic_main.c"
static void enic_udp_tunnel_add(struct net_device *netdev, struct udp_tunnel_info *ti)
{
  #line 185 
  int err;
  #line 183 
  struct enic *enic = netdev_priv(netdev);
  #line 184 
  __be16 port = ti->port;
  #line 187 
  cif_spin_lock_bh_devcmd_lock_of_enic_4(& enic->devcmd_lock);
  #line 189 
  if ((unsigned int)ti->type != 0U) {
    #line 190 
    netdev_info(netdev,(char *)"udp_tnl: only vxlan tunnel offload supported");
    #line 191 
    goto error;
  }
  #line 194 
  switch ((int)ti->sa_family) {
    #line 195 
    case 10: 
             #line 195 
    ;
    #line 196 
    if (((unsigned long)enic->vxlan.flags & 2UL) == 0UL) {
      #line 197 
      netdev_info(netdev,(char *)"vxlan: only IPv4 offload supported");
      #line 198 
      goto error;
    }
    #line 201 
    case 2: 
            #line 201 
    ;
    #line 202 
    break;
    #line 203 
    default: 
             #line 203 
    ;
    #line 204 
    goto error;
  }
  #line 207 
  if ((unsigned int)enic->vxlan.vxlan_udp_port_number != 0U) {
    #line 208 
    ;
    #line 208 
    if ((int)__builtin_bswap16((unsigned short)((int)port)) == (int)enic->vxlan.vxlan_udp_port_number) 
      #line 209 
      netdev_warn(netdev,(char *)"vxlan: udp port already offloaded"); else 
                                                                    #line 211 
                                                                    netdev_info(netdev,(char *)"vxlan: offload supported for only one UDP port");
    #line 213 
    goto error;
  }
  #line 215 
  if (vnic_dev_get_res_count(enic->vdev,(enum vnic_res_type)RES_TYPE_WQ) != 1U) 
    #line 215 
    if (((unsigned long)enic->vxlan.flags & 4UL) == 0UL) {
      #line 217 
      netdev_info(netdev,(char *)"vxlan: vxlan offload with multi wq not supported on this adapter");
      #line 218 
      goto error;
    }
  #line 221 
  ;
  #line 221 
  err = vnic_dev_overlay_offload_cfg(enic->vdev,(unsigned char)0,(unsigned short)((int)__builtin_bswap16((unsigned short)((int)port))));
  #line 224 
  if (err != 0) 
                #line 225 
                goto error;
  #line 227 
  err = vnic_dev_overlay_offload_ctrl(enic->vdev,(unsigned char)2,(unsigned char)((int)enic->vxlan.patch_level));
  #line 229 
  if (err != 0) 
                #line 230 
                goto error;
  #line 232 
  enic->vxlan.vxlan_udp_port_number = __builtin_bswap16((unsigned short)((int)port));
  #line 234 
  ;
  #line 234 
  ;
  #line 234 
  ;
  #line 234 
  netdev_info(netdev,(char *)"vxlan fw-vers-%d: offload enabled for udp port: %d, sa_family: %d ",(int)enic->vxlan.patch_level,(int)__builtin_bswap16((unsigned short)((int)port)),(int)ti->sa_family);
  #line 237 
  goto unlock;
  #line 239 
  error: 
         #line 239 
  ;
  #line 240 
  ;
  #line 240 
  ;
  #line 240 
  ;
  #line 240 
  netdev_info(netdev,(char *)"failed to offload udp port: %d, sa_family: %d, type: %d",(int)__builtin_bswap16((unsigned short)((int)port)),(int)ti->sa_family,(int)ti->type);
  #line 242 
  unlock: 
          #line 242 
  ;
  #line 243 
  cif_spin_unlock_bh_devcmd_lock_of_enic_4(& enic->devcmd_lock);
  #line 244 
  return;
}

#line 246  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/enic_main.c"
static void enic_udp_tunnel_del(struct net_device *netdev, struct udp_tunnel_info *ti)
{
  #line 250 
  int err;
  #line 249 
  struct enic *enic = netdev_priv(netdev);
  #line 252 
  cif_spin_lock_bh_devcmd_lock_of_enic_4(& enic->devcmd_lock);
  #line 254 
  ;
  #line 254 
  if ((int)__builtin_bswap16((unsigned short)((int)ti->port)) != (int)enic->vxlan.vxlan_udp_port_number) 
    #line 254 
    goto _LOR;
  else 
    #line 254 
    if ((unsigned int)ti->type != 0U) {
      #line 254 
      _LOR: {
              #line 256 
              ;
              #line 256 
              ;
              #line 256 
              ;
              #line 256 
              netdev_info(netdev,(char *)"udp_tnl: port:%d, sa_family: %d, type: %d not offloaded",(int)__builtin_bswap16((unsigned short)((int)ti->port)),(int)ti->sa_family,(int)ti->type);
              #line 258 
              goto unlock;
            }
    }
  #line 261 
  err = vnic_dev_overlay_offload_ctrl(enic->vdev,(unsigned char)2,(unsigned char)1);
  #line 263 
  if (err != 0) {
    #line 264 
    ;
    #line 264 
    netdev_err(netdev,(char *)"vxlan: del offload udp port: %d failed",(int)__builtin_bswap16((unsigned short)((int)ti->port)));
    #line 266 
    goto unlock;
  }
  #line 269 
  enic->vxlan.vxlan_udp_port_number = (unsigned short)0U;
  #line 271 
  ;
  #line 271 
  ;
  #line 271 
  netdev_info(netdev,(char *)"vxlan: del offload udp port %d, family %d\n",(int)__builtin_bswap16((unsigned short)((int)ti->port)),(int)ti->sa_family);
  #line 274 
  unlock: 
          #line 274 
  ;
  #line 275 
  cif_spin_unlock_bh_devcmd_lock_of_enic_4(& enic->devcmd_lock);
  #line 276 
  return;
}

#line 278  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/enic_main.c"
static netdev_features_t enic_features_check(struct sk_buff *skb, struct net_device *dev, netdev_features_t features)
{
  #line 284 
  struct udphdr *udph;
  #line 286 
  u8 proto;
  #line 282 
  struct ethhdr *eth = skb_inner_mac_header(skb);
  #line 283 
  struct enic *enic = netdev_priv(dev);
  #line 285 
  u16 port = (unsigned short)0U;
  #line 288 
  if ((unsigned int)skb->encapsulation == 0U) 
                                              #line 289 
                                              return features;
  #line 291 
  features = vxlan_features_check(skb,features);
  #line 293 
  switch ((int)vlan_get_protocol(skb)) {
    #line 294 
    case 56710: 
                #line 294 
    ;
    #line 295 
    if (((unsigned long)enic->vxlan.flags & 2UL) == 0UL) 
                                                         #line 296 
                                                         goto out;
    #line 297 
    proto = ipv6_hdr(skb)->nexthdr;
    #line 298 
    break;
    #line 299 
    case 8: 
            #line 299 
    ;
    #line 300 
    proto = ip_hdr(skb)->protocol;
    #line 301 
    break;
    #line 302 
    default: 
             #line 302 
    ;
    #line 303 
    goto out;
  }
  #line 306 
  switch ((int)eth->h_proto) {
    #line 307 
    case 56710: 
                #line 307 
    ;
    #line 308 
    if (((unsigned long)enic->vxlan.flags & 1UL) == 0UL) 
                                                         #line 309 
                                                         goto out;
    #line 311 
    case 8: 
            #line 311 
    ;
    #line 312 
    break;
    #line 313 
    default: 
             #line 313 
    ;
    #line 314 
    goto out;
  }
  #line 318 
  if ((unsigned int)proto == 17U) {
    #line 319 
    udph = udp_hdr(skb);
    #line 320 
    port = __builtin_bswap16((unsigned short)((int)udph->dest));
  }
  #line 326 
  if ((int)enic->vxlan.vxlan_udp_port_number != (int)port) 
                                                           #line 327 
                                                           goto out;
  #line 329 
  return features;
  #line 331 
  out: 
       #line 331 
  ;
  #line 332 
  return features & 18446744056529747941ULL;
}

#line 335  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/enic_main.c"
int enic_is_dynamic(struct enic *enic)
{
  #line 337 
  return (unsigned int)(enic->pdev)->device == 68U;
}

#line 340  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/enic_main.c"
int enic_sriov_enabled(struct enic *enic)
{
  #line 342 
  return (int)enic->priv_flags & 1;
}

#line 345  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/enic_main.c"
static int enic_is_sriov_vf(struct enic *enic)
{
  #line 347 
  return (unsigned int)(enic->pdev)->device == 113U;
}

#line 350  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/enic_main.c"
int enic_is_valid_vf(struct enic *enic, int vf)
{
  #line 353 
  return (vf >= 0 && (int)enic->num_vfs > vf) != 0;
}

#line 359  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/enic_main.c"
static void enic_free_wq_buf(struct vnic_wq *wq, struct vnic_wq_buf *buf)
{
  #line 361 
  struct enic *enic = vnic_dev_priv(wq->vdev);
  #line 363 
  if (buf->sop != 0) 
                     #line 364 
                     pci_unmap_single(enic->pdev,buf->dma_addr,(unsigned long)buf->len,1); else 
                                                                    #line 367 
                                                                    pci_unmap_page(enic->pdev,buf->dma_addr,(unsigned long)buf->len,1);
  #line 370 
  if (buf->os_buf != (void *)0) 
                                #line 371 
                                dev_kfree_skb_any((struct sk_buff *)buf->os_buf);
  #line 372 
  return;
}

#line 374  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/enic_main.c"
static void enic_wq_free_buf(struct vnic_wq *wq, struct cq_desc *cq_desc, struct vnic_wq_buf *buf, void *opaque)
{
  #line 377 
  enic_free_wq_buf(wq,buf);
  #line 378 
  return;
}

#line 380  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/enic_main.c"
static int enic_wq_service(struct vnic_dev *vdev, struct cq_desc *cq_desc, u8 type, u16 q_number, u16 completed_index, void *opaque)
{
  #line 383 
  struct enic *enic = vnic_dev_priv(vdev);
  #line 385 
  cif_spin_lock_NOT_ARG_SIGN(& enic->wq_lock[(int)q_number]);
  #line 387 
  vnic_wq_service(& enic->wq[(int)q_number],cq_desc,(unsigned short)((int)completed_index),& enic_wq_free_buf,opaque);
  #line 391 
  if ((int)netif_tx_queue_stopped(netdev_get_tx_queue(enic->netdev,(unsigned int)q_number)) != 0) {
    #line 391 
    if (vnic_wq_desc_avail(& enic->wq[(int)q_number]) > 21U) 
                                                             #line 394 
                                                             netif_wake_subqueue(enic->netdev,(unsigned short)((int)q_number));
  }
  #line 396 
  cif_spin_unlock_NOT_ARG_SIGN(& enic->wq_lock[(int)q_number]);
  #line 398 
  return 0;
}

#line 401  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/enic_main.c"
static bool enic_log_q_error(struct enic *enic)
{
  #line 403 
  unsigned int i;
  #line 404 
  u32 error_status;
  #line 405 
  bool err = (_Bool)0;
  #line 407 
  i = 0U;
  #line 407 
  while (enic->wq_count > i) {
    #line 408 
    error_status = vnic_wq_error_status(& enic->wq[i]);
    #line 409 
    err = (_Bool)(((unsigned int)err | error_status) != 0U);
    #line 410 
    if (error_status != 0U) 
                            #line 411 
                            netdev_err(enic->netdev,(char *)"WQ[%d] error_status %d\n",i,error_status);
    #line 407 
    i ++;
  }
  #line 415 
  i = 0U;
  #line 415 
  while (enic->rq_count > i) {
    #line 416 
    error_status = vnic_rq_error_status(& enic->rq[i]);
    #line 417 
    err = (_Bool)(((unsigned int)err | error_status) != 0U);
    #line 418 
    if (error_status != 0U) 
                            #line 419 
                            netdev_err(enic->netdev,(char *)"RQ[%d] error_status %d\n",i,error_status);
    #line 415 
    i ++;
  }
  #line 423 
  return err;
}

#line 426  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/enic_main.c"
static void enic_msglvl_check(struct enic *enic)
{
  #line 428 
  u32 msg_enable = vnic_dev_msg_lvl(enic->vdev);
  #line 430 
  if (enic->msg_enable != msg_enable) {
    #line 431 
    netdev_info(enic->netdev,(char *)"msg lvl changed from 0x%x to 0x%x\n",enic->msg_enable,msg_enable);
    #line 433 
    enic->msg_enable = msg_enable;
  }
  #line 435 
  return;
}

#line 437  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/enic_main.c"
static void enic_mtu_check(struct enic *enic)
{
  #line 439 
  u32 mtu = vnic_dev_mtu(enic->vdev);
  #line 440 
  struct net_device *netdev = enic->netdev;
  #line 442 
  if (mtu != 0U && enic->port_mtu != mtu) {
    #line 443 
    enic->port_mtu = mtu;
    #line 444 
    if (enic_is_dynamic(enic) != 0) 
                                    #line 444 
                                    goto _LOR;
    else {
      #line 444 
      if (enic_is_sriov_vf(enic) != 0) {
        #line 444 
        _LOR: {
                #line 445 
                int __UNIQUE_ID___x550;
                #line 445 
                int tmp_2;
                {
                  #line 445 
                  int __UNIQUE_ID___x548;
                  #line 445 
                  int tmp_0;
                  #line 445 
                  __UNIQUE_ID___x550 = 68;
                  {
                    #line 445 
                    __UNIQUE_ID___x548 = 9000;
                    #line 445 
                    int __UNIQUE_ID___y549 = (int)mtu;
                    #line 445 
                    if (__UNIQUE_ID___x548 < __UNIQUE_ID___y549) 
                                                                 #line 445 
                                                                 tmp_0 = __UNIQUE_ID___x548; else 
                                                                    #line 445 
                                                                    tmp_0 = __UNIQUE_ID___y549;
                    }
                  #line 445 
                  int __UNIQUE_ID___y551 = tmp_0;
                  #line 445 
                  if (__UNIQUE_ID___x550 > __UNIQUE_ID___y551) 
                                                               #line 445 
                                                               tmp_2 = __UNIQUE_ID___x550; else 
                                                                    #line 445 
                                                                    tmp_2 = __UNIQUE_ID___y551;
                  }
                #line 445 
                mtu = (unsigned int)tmp_2;
                #line 447 
                if (netdev->mtu != mtu) 
                                        #line 448 
                                        cif_schedule_work(& enic->change_mtu_work);
              }
      }
      else 
        #line 450 
        if (netdev->mtu > mtu) 
                               #line 451 
                               netdev_warn(netdev,(char *)"interface MTU (%d) set higher ",netdev->mtu,mtu);
    }
  }
  #line 456 
  return;
}

#line 459  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/enic_main.c"
static void enic_link_check(struct enic *enic)
{
  #line 461 
  int link_status = vnic_dev_link_status(enic->vdev);
  #line 462 
  int carrier_ok = (int)netif_carrier_ok(enic->netdev);
  #line 464 
  if (link_status != 0 && carrier_ok == 0) {
    #line 465 
    netdev_info(enic->netdev,(char *)"Link UP\n");
    #line 466 
    netif_carrier_on(enic->netdev);
  }
  else 
    #line 467 
    if (link_status == 0 && carrier_ok != 0) {
      #line 468 
      netdev_info(enic->netdev,(char *)"Link DOWN\n");
      #line 469 
      netif_carrier_off(enic->netdev);
    }
  #line 471 
  return;
}

#line 473  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/enic_main.c"
static void enic_notify_check(struct enic *enic)
{
  #line 475 
  enic_msglvl_check(enic);
  #line 476 
  enic_mtu_check(enic);
  #line 477 
  enic_link_check(enic);
  #line 478 
  return;
}

#line 482  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/enic_main.c"
static irqreturn_t enic_isr_legacy(int irq, void *data)
{
  #line 489 
  u32 pba;
  #line 484 
  struct net_device *netdev = (struct net_device *)data;
  #line 485 
  struct enic *enic = netdev_priv(netdev);
  #line 486 
  unsigned int io_intr = enic_legacy_io_intr();
  #line 487 
  unsigned int err_intr = enic_legacy_err_intr();
  #line 488 
  unsigned int notify_intr = enic_legacy_notify_intr();
  #line 491 
  vnic_intr_mask(& enic->intr[io_intr]);
  #line 493 
  pba = vnic_intr_legacy_pba(enic->legacy_pba);
  #line 494 
  if (pba == 0U) {
    #line 495 
    vnic_intr_unmask(& enic->intr[io_intr]);
    #line 496 
    return IRQ_NONE;
  }
  #line 499 
  if (((unsigned int)(1 << notify_intr) & pba) != 0U) {
    #line 500 
    enic_notify_check(enic);
    #line 501 
    vnic_intr_return_all_credits(& enic->intr[notify_intr]);
  }
  #line 504 
  if (((unsigned int)(1 << err_intr) & pba) != 0U) {
    #line 505 
    vnic_intr_return_all_credits(& enic->intr[err_intr]);
    #line 506 
    enic_log_q_error(enic);
    #line 508 
    cif_schedule_work(& enic->reset);
    #line 509 
    return IRQ_HANDLED;
  }
  #line 512 
  if (((unsigned int)(1 << io_intr) & pba) != 0U) 
                                                  #line 513 
                                                  napi_schedule_irqoff(& enic->napi[0]); else 
                                                                    #line 515 
                                                                    vnic_intr_unmask(& enic->intr[io_intr]);
  #line 517 
  return IRQ_HANDLED;
}

#line 520  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/enic_main.c"
static irqreturn_t enic_isr_msi(int irq, void *data)
{
  #line 522 
  struct enic *enic = (struct enic *)data;
  #line 540 
  napi_schedule_irqoff(& enic->napi[0]);
  #line 542 
  return IRQ_HANDLED;
}

#line 545  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/enic_main.c"
static irqreturn_t enic_isr_msix(int irq, void *data)
{
  #line 547 
  struct napi_struct *napi = (struct napi_struct *)data;
  #line 549 
  napi_schedule_irqoff(napi);
  #line 551 
  return IRQ_HANDLED;
}

#line 554  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/enic_main.c"
static irqreturn_t enic_isr_msix_err(int irq, void *data)
{
  #line 556 
  struct enic *enic = (struct enic *)data;
  #line 557 
  unsigned int intr = enic_msix_err_intr(enic);
  #line 559 
  vnic_intr_return_all_credits(& enic->intr[intr]);
  #line 561 
  if ((int)enic_log_q_error(enic) != 0) 
                                        #line 563 
                                        cif_schedule_work(& enic->reset);
  #line 565 
  return IRQ_HANDLED;
}

#line 568  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/enic_main.c"
static irqreturn_t enic_isr_msix_notify(int irq, void *data)
{
  #line 570 
  struct enic *enic = (struct enic *)data;
  #line 571 
  unsigned int intr = enic_msix_notify_intr(enic);
  #line 573 
  enic_notify_check(enic);
  #line 574 
  vnic_intr_return_all_credits(& enic->intr[intr]);
  #line 576 
  return IRQ_HANDLED;
}

#line 579  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/enic_main.c"
static int enic_queue_wq_skb_cont(struct enic *enic, struct vnic_wq *wq, struct sk_buff *skb, unsigned int len_left, int loopback)
{
  #line 583 
  skb_frag_t *frag;
  #line 584 
  dma_addr_t dma_addr;
  #line 587 
  frag = (skb_frag_t *)(& ((struct skb_shared_info *)skb_end_pointer(skb))->frags);
  #line 587 
  while (len_left != 0U) {
    {
      #line 588 
      len_left -= skb_frag_size(frag);
      #line 589 
      ;
      #line 589 
      ;
      #line 589 
      dma_addr = skb_frag_dma_map(& (enic->pdev)->dev,frag,0UL,(unsigned long)skb_frag_size(frag),(enum dma_data_direction)DMA_TO_DEVICE);
      #line 592 
      if ((long)(enic_dma_map_check(enic,dma_addr) != 0) != 0L) 
                                                                #line 593 
                                                                return -12;
      #line 594 
      ;
      #line 594 
      ;
      #line 594 
      ;
      #line 594 
      ;
      #line 594 
      ;
      #line 594 
      enic_queue_wq_desc_cont(wq,(void *)skb,dma_addr,skb_frag_size(frag),len_left == 0U,loopback);
    }
    #line 587 
    frag ++;
  }
  #line 599 
  return 0;
}

#line 602  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/enic_main.c"
static int enic_queue_wq_skb_vlan(struct enic *enic, struct vnic_wq *wq, struct sk_buff *skb, int vlan_tag_insert, unsigned int vlan_tag, int loopback)
{
  #line 609 
  dma_addr_t dma_addr;
  #line 606 
  unsigned int head_len = skb_headlen(skb);
  #line 607 
  unsigned int len_left = skb->len - head_len;
  #line 608 
  int eop = len_left == 0U;
  #line 610 
  int err = 0;
  #line 612 
  dma_addr = pci_map_single(enic->pdev,(void *)skb->data,(unsigned long)head_len,1);
  #line 614 
  if ((long)(enic_dma_map_check(enic,dma_addr) != 0) != 0L) 
                                                            #line 615 
                                                            return -12;
  #line 622 
  enic_queue_wq_desc(wq,(void *)skb,dma_addr,head_len,vlan_tag_insert,vlan_tag,eop,loopback);
  #line 625 
  if (eop == 0) 
                #line 626 
                err = enic_queue_wq_skb_cont(enic,wq,skb,len_left,loopback);
  #line 628 
  return err;
}

#line 631  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/enic_main.c"
static int enic_queue_wq_skb_csum_l4(struct enic *enic, struct vnic_wq *wq, struct sk_buff *skb, int vlan_tag_insert, unsigned int vlan_tag, int loopback)
{
  #line 640 
  dma_addr_t dma_addr;
  #line 635 
  unsigned int head_len = skb_headlen(skb);
  #line 636 
  unsigned int len_left = skb->len - head_len;
  #line 637 
  unsigned int hdr_len = (unsigned int)skb_checksum_start_offset(skb);
  #line 638 
  unsigned int csum_offset = (unsigned int)skb->__anonCompField_sk_buff_95.__anonCompField___anonunion_530_94.csum_offset + hdr_len;
  #line 639 
  int eop = len_left == 0U;
  #line 641 
  int err = 0;
  #line 643 
  dma_addr = pci_map_single(enic->pdev,(void *)skb->data,(unsigned long)head_len,1);
  #line 645 
  if ((long)(enic_dma_map_check(enic,dma_addr) != 0) != 0L) 
                                                            #line 646 
                                                            return -12;
  #line 653 
  enic_queue_wq_desc_csum_l4(wq,(void *)skb,dma_addr,head_len,csum_offset,hdr_len,vlan_tag_insert,vlan_tag,eop,loopback);
  #line 657 
  if (eop == 0) 
                #line 658 
                err = enic_queue_wq_skb_cont(enic,wq,skb,len_left,loopback);
  #line 660 
  return err;
}

#line 663  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/enic_main.c"
static void enic_preload_tcp_csum_encap(struct sk_buff *skb)
{
  #line 665 
  struct ethhdr *eth = skb_inner_mac_header(skb);
  #line 667 
  switch ((int)eth->h_proto) {
    #line 668 
    case 8: 
            #line 668 
    ;
    #line 669 
    inner_ip_hdr(skb)->check = (unsigned short)0U;
    #line 670 
    inner_tcp_hdr(skb)->check = (unsigned short)(~ ((int)csum_tcpudp_magic(inner_ip_hdr(skb)->saddr,inner_ip_hdr(skb)->daddr,
                          0U,(unsigned char)6,0U)));
    #line 674 
    break;
    #line 675 
    case 56710: 
                #line 675 
    ;
    #line 676 
    inner_tcp_hdr(skb)->check = (unsigned short)(~ ((int)csum_ipv6_magic(& inner_ipv6_hdr(skb)->saddr,
                        & inner_ipv6_hdr(skb)->daddr,0U,(unsigned char)6,0U)));
    #line 680 
    break;
    #line 681 
    default: 
             #line 681 
    ;
    {
      #line 682 
      bool __warned;
      #line 682 
      int __ret_warn_once = 1;
      #line 682 
      if ((long)(__ret_warn_once != 0) != 0L && (long)(! __warned) != 0L) {
        #line 682 
        __warned = (_Bool)1;
        {
          #line 682 
          int __ret_warn_on = 1;
          #line 682 
          if ((long)(__ret_warn_on != 0) != 0L) {
            #line 682 
            __warn_printk((char *)"Non ipv4/ipv6 inner pkt for encap offload");
            #line 683 
            ldv_inline_asm();
            #line 684 
            ldv_inline_asm();
          }
          #line 682 
          long tmp_9 = (long)(__ret_warn_on != 0);
        }
      }
      #line 682 
      long tmp_11 = (long)(__ret_warn_once != 0);
    }
    #line 683 
    break;
  }
  #line 685 
  return;
}

#line 687  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/enic_main.c"
static void enic_preload_tcp_csum(struct sk_buff *skb)
{
  #line 694 
  if ((unsigned int)skb->protocol == 8U) {
    #line 695 
    ip_hdr(skb)->check = (unsigned short)0U;
    #line 696 
    tcp_hdr(skb)->check = (unsigned short)(~ ((int)csum_tcpudp_magic(ip_hdr(skb)->saddr,ip_hdr(skb)->daddr,0U,
                          (unsigned char)6,0U)));
  }
  else 
    #line 698 
    if ((unsigned int)skb->protocol == 56710U) {
      #line 699 
      tcp_hdr(skb)->check = (unsigned short)(~ ((int)csum_ipv6_magic(& ipv6_hdr(skb)->saddr,& ipv6_hdr(skb)->daddr,0U,
                        (unsigned char)6,0U)));
    }
  #line 701 
  return;
}

#line 704  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/enic_main.c"
static int enic_queue_wq_skb_tso(struct enic *enic, struct vnic_wq *wq, struct sk_buff *skb, unsigned int mss, int vlan_tag_insert, unsigned int vlan_tag, int loopback)
{
  #line 713 
  unsigned int hdr_len;
  #line 714 
  dma_addr_t dma_addr;
  #line 715 
  unsigned int len;
  #line 716 
  skb_frag_t *frag;
  #line 709 
  unsigned int frag_len_left = skb_headlen(skb);
  #line 710 
  unsigned int len_left = skb->len - frag_len_left;
  #line 711 
  int eop = len_left == 0U;
  #line 712 
  unsigned int offset = 0U;
  #line 718 
  if ((unsigned int)skb->encapsulation != 0U) {
    #line 719 
    hdr_len = (unsigned int)(skb_inner_transport_header(skb) - skb->data);
    #line 720 
    hdr_len = inner_tcp_hdrlen(skb) + hdr_len;
    #line 721 
    enic_preload_tcp_csum_encap(skb);
  }
  else {
    #line 723 
    hdr_len = (unsigned int)skb_transport_offset(skb) + tcp_hdrlen(skb);
    #line 724 
    enic_preload_tcp_csum(skb);
  }
  #line 730 
  while (frag_len_left != 0U) {
    #line 731 
    unsigned int __UNIQUE_ID___x553;
    #line 731 
    unsigned int tmp_4;
    {
      #line 731 
      __UNIQUE_ID___x553 = frag_len_left;
      #line 731 
      unsigned int __UNIQUE_ID___y554 = 16384U;
      #line 731 
      if (__UNIQUE_ID___x553 < __UNIQUE_ID___y554) 
                                                   #line 731 
                                                   tmp_4 = __UNIQUE_ID___x553; else 
                                                                    #line 731 
                                                                    tmp_4 = __UNIQUE_ID___y554;
      }
    #line 731 
    len = tmp_4;
    #line 732 
    dma_addr = pci_map_single(enic->pdev,(void *)(skb->data + (unsigned long)offset),(unsigned long)len,1);
    #line 734 
    if ((long)(enic_dma_map_check(enic,dma_addr) != 0) != 0L) 
                                                              #line 735 
                                                              return -12;
    #line 736 
    enic_queue_wq_desc_tso(wq,(void *)skb,dma_addr,len,mss,hdr_len,vlan_tag_insert,vlan_tag,(eop != 0 && len == frag_len_left) != 0,loopback);
    #line 739 
    frag_len_left -= len;
    #line 740 
    offset += len;
  }
  #line 743 
  if (eop != 0) 
                #line 744 
                return 0;
  #line 749 
  frag = (skb_frag_t *)(& ((struct skb_shared_info *)skb_end_pointer(skb))->frags);
  #line 749 
  while (len_left != 0U) {
    {
      #line 750 
      len_left -= skb_frag_size(frag);
      #line 751 
      frag_len_left = skb_frag_size(frag);
      #line 752 
      offset = 0U;
      #line 754 
      while (frag_len_left != 0U) {
        #line 755 
        unsigned int __UNIQUE_ID___x555;
        #line 755 
        unsigned int tmp_9;
        {
          #line 755 
          __UNIQUE_ID___x555 = frag_len_left;
          #line 755 
          unsigned int __UNIQUE_ID___y556 = 16384U;
          #line 755 
          if (__UNIQUE_ID___x555 < __UNIQUE_ID___y556) 
                                                       #line 755 
                                                       tmp_9 = __UNIQUE_ID___x555; else 
                                                                    #line 755 
                                                                    tmp_9 = __UNIQUE_ID___y556;
          }
        #line 755 
        len = tmp_9;
        #line 757 
        dma_addr = skb_frag_dma_map(& (enic->pdev)->dev,frag,(unsigned long)offset,(unsigned long)len,(enum dma_data_direction)DMA_TO_DEVICE);
        #line 760 
        if ((long)(enic_dma_map_check(enic,dma_addr) != 0) != 0L) 
                                                                  #line 761 
                                                                  return -12;
        #line 762 
        enic_queue_wq_desc_cont(wq,(void *)skb,dma_addr,len,(len_left == 0U && len == frag_len_left) != 0,loopback);
        #line 766 
        frag_len_left -= len;
        #line 767 
        offset += len;
      }
    }
    #line 749 
    frag ++;
  }
  #line 771 
  return 0;
}

#line 774  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/enic_main.c"
__inline static int enic_queue_wq_skb_encap(struct enic *enic, struct vnic_wq *wq, struct sk_buff *skb, int vlan_tag_insert, unsigned int vlan_tag, int loopback)
{
  #line 788 
  dma_addr_t dma_addr;
  #line 779 
  unsigned int head_len = skb_headlen(skb);
  #line 780 
  unsigned int len_left = skb->len - head_len;
  #line 786 
  unsigned int mss_or_csum = 7U;
  #line 787 
  int eop = len_left == 0U;
  #line 789 
  int err = 0;
  #line 791 
  dma_addr = pci_map_single(enic->pdev,(void *)skb->data,(unsigned long)head_len,1);
  #line 793 
  if ((long)(enic_dma_map_check(enic,dma_addr) != 0) != 0L) 
                                                            #line 794 
                                                            return -12;
  #line 796 
  enic_queue_wq_desc_ex(wq,(void *)skb,dma_addr,head_len,mss_or_csum,0U,vlan_tag_insert,vlan_tag,0,eop,1,eop,loopback);
  #line 800 
  if (eop == 0) 
                #line 801 
                err = enic_queue_wq_skb_cont(enic,wq,skb,len_left,loopback);
  #line 803 
  return err;
}

#line 806  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/enic_main.c"
__inline static void enic_queue_wq_skb(struct enic *enic, struct vnic_wq *wq, struct sk_buff *skb)
{
  #line 813 
  int err;
  #line 809 
  unsigned int mss = (unsigned int)((struct skb_shared_info *)skb_end_pointer(skb))->gso_size;
  #line 810 
  unsigned int vlan_tag = 0U;
  #line 811 
  int vlan_tag_insert = 0;
  #line 812 
  int loopback = 0;
  #line 815 
  if ((unsigned int)skb->vlan_present != 0U) {
    #line 817 
    vlan_tag_insert = 1;
    #line 818 
    vlan_tag = (unsigned int)skb->vlan_tci;
  }
  else 
    #line 819 
    if ((unsigned int)enic->loop_enable != 0U) {
      #line 820 
      vlan_tag = (unsigned int)enic->loop_tag;
      #line 821 
      loopback = 1;
    }
  #line 824 
  if (mss != 0U) 
                 #line 825 
                 err = enic_queue_wq_skb_tso(enic,wq,skb,mss,vlan_tag_insert,vlan_tag,loopback);
  else 
    #line 828 
    if ((unsigned int)skb->encapsulation != 0U) 
                                                #line 829 
                                                err = enic_queue_wq_skb_encap(enic,wq,skb,vlan_tag_insert,vlan_tag,loopback);
    else 
      #line 831 
      if ((unsigned int)skb->ip_summed == 3U) 
                                              #line 832 
                                              err = enic_queue_wq_skb_csum_l4(enic,wq,skb,vlan_tag_insert,vlan_tag,loopback); else 
                                                                    #line 835 
                                                                    err = enic_queue_wq_skb_vlan(enic,wq,skb,vlan_tag_insert,vlan_tag,loopback);
  #line 837 
  if ((long)(err != 0) != 0L) {
    #line 838 
    struct vnic_wq_buf *buf;
    #line 840 
    buf = (wq->to_use)->prev;
    #line 844 
    while (buf->os_buf == (void *)0 && buf->next != wq->to_clean) {
      #line 845 
      enic_free_wq_buf(wq,buf);
      #line 846 
      (wq->ring.desc_avail) ++;
      #line 847 
      buf = buf->prev;
    }
    #line 849 
    wq->to_use = buf->next;
    #line 850 
    consume_skb(skb);
  }
  #line 852 
  return;
}

#line 855  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/enic_main.c"
static netdev_tx_t enic_hard_start_xmit(struct sk_buff *skb, struct net_device *netdev)
{
  #line 859 
  struct vnic_wq *wq;
  #line 860 
  unsigned int txq_map;
  #line 861 
  struct netdev_queue *txq;
  #line 858 
  struct enic *enic = netdev_priv(netdev);
  #line 863 
  if (skb->len == 0U) {
    #line 864 
    dev_kfree_skb_any(skb);
    #line 865 
    return NETDEV_TX_OK;
  }
  #line 868 
  txq_map = (unsigned int)skb_get_queue_mapping(skb) % enic->wq_count;
  #line 869 
  wq = & enic->wq[txq_map];
  #line 870 
  txq = netdev_get_tx_queue(netdev,txq_map);
  #line 877 
  ;
  #line 877 
  if ((unsigned int)((struct skb_shared_info *)skb_end_pointer(skb))->gso_size == 0U) {
    #line 877 
    ;
    #line 877 
    if ((unsigned int)((struct skb_shared_info *)skb_end_pointer(skb))->nr_frags > 15U) {
      #line 878 
      if (skb_linearize(skb) != 0) {
        #line 880 
        dev_kfree_skb_any(skb);
        #line 881 
        return NETDEV_TX_OK;
      }
    }
  }
  #line 884 
  cif_spin_lock_NOT_ARG_SIGN(& enic->wq_lock[txq_map]);
  #line 886 
  ;
  #line 886 
  if (vnic_wq_desc_avail(wq) < (unsigned int)((int)((struct skb_shared_info *)skb_end_pointer(skb))->nr_frags + 5)) {
    #line 888 
    netif_tx_stop_queue(txq);
    #line 890 
    netdev_err(netdev,(char *)"BUG! Tx ring full when queue awake!\n");
    #line 891 
    cif_spin_unlock_NOT_ARG_SIGN(& enic->wq_lock[txq_map]);
    #line 892 
    return NETDEV_TX_BUSY;
  }
  #line 895 
  enic_queue_wq_skb(enic,wq,skb);
  #line 897 
  if (vnic_wq_desc_avail(wq) <= 21U) 
                                     #line 898 
                                     netif_tx_stop_queue(txq);
  #line 899 
  skb_tx_timestamp(skb);
  #line 900 
  if (netdev_xmit_more()) {
    #line 900 
    if ((int)netif_xmit_stopped(txq) != 0) 
                                           #line 901 
                                           vnic_wq_doorbell(wq);
  }
  else 
       #line 901 
       vnic_wq_doorbell(wq);
  #line 903 
  cif_spin_unlock_NOT_ARG_SIGN(& enic->wq_lock[txq_map]);
  #line 905 
  return NETDEV_TX_OK;
}

#line 909  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/enic_main.c"
static void enic_get_stats(struct net_device *netdev, struct rtnl_link_stats64 *net_stats)
{
  #line 913 
  struct vnic_stats *stats;
  #line 914 
  int err;
  #line 912 
  struct enic *enic = netdev_priv(netdev);
  #line 916 
  err = enic_dev_stats_dump(enic,& stats);
  #line 921 
  if (err == -12) 
                  #line 922 
                  return;
  #line 924 
  net_stats->tx_packets = stats->tx.tx_frames_ok;
  #line 925 
  net_stats->tx_bytes = stats->tx.tx_bytes_ok;
  #line 926 
  net_stats->tx_errors = stats->tx.tx_errors;
  #line 927 
  net_stats->tx_dropped = stats->tx.tx_drops;
  #line 929 
  net_stats->rx_packets = stats->rx.rx_frames_ok;
  #line 930 
  net_stats->rx_bytes = stats->rx.rx_bytes_ok;
  #line 931 
  net_stats->rx_errors = stats->rx.rx_errors;
  #line 932 
  net_stats->multicast = stats->rx.rx_multicast_frames_ok;
  #line 933 
  net_stats->rx_over_errors = enic->rq_truncated_pkts;
  #line 934 
  net_stats->rx_crc_errors = enic->rq_bad_fcs;
  #line 935 
  net_stats->rx_dropped = stats->rx.rx_no_bufs + stats->rx.rx_drop;
  #line 936 
  return;
}

#line 938  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/enic_main.c"
static int enic_mc_sync(struct net_device *netdev, u8 *mc_addr)
{
  #line 940 
  struct enic *enic = netdev_priv(netdev);
  #line 942 
  if (enic->mc_count == 32U) {
    #line 943 
    unsigned int mc_count = (unsigned int)netdev->mc.count;
    #line 945 
    netdev_warn(netdev,(char *)"Registering only %d out of %d multicast addresses\n",32,mc_count);
    #line 948 
    return -28;
  }
  #line 951 
  enic_dev_add_addr(enic,mc_addr);
  #line 952 
  (enic->mc_count) ++;
  #line 954 
  return 0;
}

#line 957  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/enic_main.c"
static int enic_mc_unsync(struct net_device *netdev, u8 *mc_addr)
{
  #line 959 
  struct enic *enic = netdev_priv(netdev);
  #line 961 
  enic_dev_del_addr(enic,mc_addr);
  #line 962 
  (enic->mc_count) --;
  #line 964 
  return 0;
}

#line 967  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/enic_main.c"
static int enic_uc_sync(struct net_device *netdev, u8 *uc_addr)
{
  #line 969 
  struct enic *enic = netdev_priv(netdev);
  #line 971 
  if (enic->uc_count == 32U) {
    #line 972 
    unsigned int uc_count = (unsigned int)netdev->uc.count;
    #line 974 
    netdev_warn(netdev,(char *)"Registering only %d out of %d unicast addresses\n",32,uc_count);
    #line 977 
    return -28;
  }
  #line 980 
  enic_dev_add_addr(enic,uc_addr);
  #line 981 
  (enic->uc_count) ++;
  #line 983 
  return 0;
}

#line 986  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/enic_main.c"
static int enic_uc_unsync(struct net_device *netdev, u8 *uc_addr)
{
  #line 988 
  struct enic *enic = netdev_priv(netdev);
  #line 990 
  enic_dev_del_addr(enic,uc_addr);
  #line 991 
  (enic->uc_count) --;
  #line 993 
  return 0;
}

#line 996  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/enic_main.c"
void enic_reset_addr_lists(struct enic *enic)
{
  #line 998 
  struct net_device *netdev = enic->netdev;
  #line 1000 
  __dev_uc_unsync(netdev,(int (*)(struct net_device *, unsigned char *))0);
  #line 1001 
  __dev_mc_unsync(netdev,(int (*)(struct net_device *, unsigned char *))0);
  #line 1003 
  enic->mc_count = 0U;
  #line 1004 
  enic->uc_count = 0U;
  #line 1005 
  enic->flags = 0U;
  #line 1006 
  return;
}

#line 1008  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/enic_main.c"
static int enic_set_mac_addr(struct net_device *netdev, char *addr)
{
  #line 1010 
  struct enic *enic = netdev_priv(netdev);
  #line 1012 
  if (enic_is_dynamic(enic) != 0) 
                                  #line 1012 
                                  goto _LOR;
  else {
    #line 1012 
    if (enic_is_sriov_vf(enic) != 0) {
      #line 1012 
      _LOR: {
              #line 1013 
              if (! is_valid_ether_addr((u8 *)addr)) {
                #line 1013 
                if (! is_zero_ether_addr((u8 *)addr)) 
                                                      #line 1014 
                                                      return -99;
              }
            }
    }
    else {
      #line 1016 
      if (! is_valid_ether_addr((u8 *)addr)) 
                                             #line 1017 
                                             return -99;
    }
  }
  #line 1020 
  memcpy((void *)netdev->dev_addr,(void *)addr,(unsigned long)netdev->addr_len);
  #line 1022 
  return 0;
}

#line 1025  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/enic_main.c"
static int enic_set_mac_address_dynamic(struct net_device *netdev, void *p)
{
  #line 1030 
  int err;
  #line 1027 
  struct enic *enic = netdev_priv(netdev);
  #line 1028 
  struct sockaddr *saddr = (struct sockaddr *)p;
  #line 1029 
  char *addr = (char *)(& saddr->sa_data);
  #line 1032 
  if ((int)netif_running(enic->netdev) != 0) {
    #line 1033 
    err = enic_dev_del_station_addr(enic);
    #line 1034 
    if (err != 0) 
                  #line 1035 
                  return err;
  }
  #line 1038 
  err = enic_set_mac_addr(netdev,addr);
  #line 1039 
  if (err != 0) 
                #line 1040 
                return err;
  #line 1042 
  if ((int)netif_running(enic->netdev) != 0) {
    #line 1043 
    err = enic_dev_add_station_addr(enic);
    #line 1044 
    if (err != 0) 
                  #line 1045 
                  return err;
  }
  #line 1048 
  return err;
}

#line 1051  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/enic_main.c"
static int enic_set_mac_address(struct net_device *netdev, void *p)
{
  #line 1056 
  int err;
  #line 1053 
  struct sockaddr *saddr = (struct sockaddr *)p;
  #line 1054 
  char *addr = (char *)(& saddr->sa_data);
  #line 1055 
  struct enic *enic = netdev_priv(netdev);
  #line 1058 
  err = enic_dev_del_station_addr(enic);
  #line 1059 
  if (err != 0) 
                #line 1060 
                return err;
  #line 1062 
  err = enic_set_mac_addr(netdev,addr);
  #line 1063 
  if (err != 0) 
                #line 1064 
                return err;
  #line 1066 
  return enic_dev_add_station_addr(enic);
}

#line 1070  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/enic_main.c"
static void enic_set_rx_mode(struct net_device *netdev)
{
  #line 1080 
  unsigned int tmp_0;
  #line 1081 
  unsigned int tmp_1;
  #line 1072 
  struct enic *enic = netdev_priv(netdev);
  #line 1073 
  int directed = 1;
  #line 1074 
  int multicast = (int)(netdev->flags >> 12) & 1;
  #line 1075 
  int broadcast = (int)(netdev->flags >> 1) & 1;
  #line 1076 
  int promisc = ((netdev->flags & 256U) != 0U || netdev->uc.count > 32) != 0;
  #line 1078 
  int allmulti = ((netdev->flags & 512U) != 0U || netdev->mc.count > 32) != 0;
  #line 1080 
  if (allmulti != 0) 
                     #line 1080 
                     tmp_0 = 512U; else 
                                        #line 1080 
                                        tmp_0 = 0U;
  #line 1081 
  if (promisc != 0) 
                    #line 1081 
                    tmp_1 = 256U; else 
                                       #line 1081 
                                       tmp_1 = 0U;
  #line 1080 
  unsigned int flags = (netdev->flags | tmp_0) | tmp_1;
  #line 1084 
  if (enic->flags != flags) {
    #line 1085 
    enic->flags = flags;
    #line 1086 
    enic_dev_packet_filter(enic,directed,multicast,broadcast,promisc,allmulti);
  }
  #line 1090 
  if (promisc == 0) {
    #line 1091 
    __dev_uc_sync(netdev,& enic_uc_sync,& enic_uc_unsync);
    #line 1092 
    if (allmulti == 0) 
                       #line 1093 
                       __dev_mc_sync(netdev,& enic_mc_sync,& enic_mc_unsync);
  }
  #line 1095 
  return;
}

#line 1098  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/enic_main.c"
static void enic_tx_timeout(struct net_device *netdev)
{
  #line 1100 
  struct enic *enic = netdev_priv(netdev);
  #line 1101 
  cif_schedule_work(& enic->tx_hang_reset);
  #line 1102 
  return;
}

#line 1104  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/enic_main.c"
static int enic_set_vf_mac(struct net_device *netdev, int vf, u8 *mac)
{
  #line 1107 
  struct enic_port_profile *pp;
  #line 1108 
  int err;
  #line 1106 
  struct enic *enic = netdev_priv(netdev);
  #line 1110 
  if (enic_is_valid_pp_vf(enic,vf,& err) != 0) 
    #line 1110 
    if (vf == -1) 
                  #line 1110 
                  pp = enic->pp; else 
                                      #line 1110 
                                      pp = enic->pp + (unsigned long)vf;
  else 
       #line 1110 
       pp = (struct enic_port_profile *)0;
  #line 1111 
  if (err != 0) 
                #line 1112 
                return err;
  #line 1114 
  if ((int)is_valid_ether_addr(mac) != 0) 
                                          #line 1114 
                                          goto _LOR;
  else {
    #line 1114 
    if ((int)is_zero_ether_addr(mac) != 0) 
      #line 1114 
      _LOR: 
            #line 1115 
            if (vf == -1) {
              #line 1116 
              memcpy((void *)(& pp->vf_mac),(void *)mac,6UL);
              #line 1117 
              return 0;
            }
            else {
              {
                #line 1122 
                cif_spin_lock_bh_devcmd_lock_of_enic_4(& enic->devcmd_lock);
                #line 1122 
                if (enic_is_valid_vf(enic,vf) != 0) {
                  #line 1122 
                  vnic_dev_cmd_proxy_by_index_start(enic->vdev,(unsigned short)((int)((unsigned short)vf)));
                  #line 1122 
                  err = vnic_dev_set_mac_addr(enic->vdev,mac);
                  #line 1122 
                  vnic_dev_cmd_proxy_end(enic->vdev);
                }
                else 
                     #line 1122 
                     err = vnic_dev_set_mac_addr(enic->vdev,mac);
                #line 1122 
                cif_spin_unlock_bh_devcmd_lock_of_enic_4(& enic->devcmd_lock);
              }
              #line 1124 
              return enic_dev_status_to_errno(err);
            }
    else 
         #line 1127 
         return -22;
  }
}

#line 1130  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/enic_main.c"
static int enic_set_vf_port(struct net_device *netdev, int vf, struct nlattr **port)
{
  #line 1134 
  struct enic_port_profile prev_pp;
  #line 1135 
  struct enic_port_profile *pp;
  #line 1133 
  struct enic *enic = netdev_priv(netdev);
  #line 1136 
  int err = 0;
  #line 1136 
  int restore_pp = 1;
  #line 1138 
  if (enic_is_valid_pp_vf(enic,vf,& err) != 0) 
    #line 1138 
    if (vf == -1) 
                  #line 1138 
                  pp = enic->pp; else 
                                      #line 1138 
                                      pp = enic->pp + (unsigned long)vf;
  else 
       #line 1138 
       pp = (struct enic_port_profile *)0;
  #line 1139 
  if (err != 0) 
                #line 1140 
                return err;
  #line 1142 
  if (*(port + 6U) == (struct nlattr *)0) 
                                          #line 1143 
                                          return -95;
  #line 1145 
  memcpy((void *)(& prev_pp),(void *)pp,92UL);
  #line 1146 
  memset((void *)pp,0,92UL);
  #line 1148 
  pp->set |= 2U;
  #line 1149 
  pp->request = nla_get_u8(*(port + 6U));
  #line 1151 
  if (*(port + 2U) != (struct nlattr *)0) {
    #line 1152 
    pp->set |= 4U;
    #line 1153 
    ;
    #line 1153 
    memcpy((void *)(& pp->name),nla_data(*(port + 2U)),40UL);
  }
  #line 1157 
  if (*(port + 4U) != (struct nlattr *)0) {
    #line 1158 
    pp->set |= 8U;
    #line 1159 
    ;
    #line 1159 
    memcpy((void *)(& pp->instance_uuid),nla_data(*(port + 4U)),16UL);
  }
  #line 1163 
  if (*(port + 5U) != (struct nlattr *)0) {
    #line 1164 
    pp->set |= 16U;
    #line 1165 
    ;
    #line 1165 
    memcpy((void *)(& pp->host_uuid),nla_data(*(port + 5U)),16UL);
  }
  #line 1169 
  if (vf == -1) {
    #line 1171 
    if (! is_zero_ether_addr((u8 *)(& prev_pp.vf_mac))) 
                                                        #line 1172 
                                                        memcpy((void *)(& pp->mac_addr),(void *)(& prev_pp.vf_mac),6UL);
    #line 1174 
    if ((int)is_zero_ether_addr(netdev->dev_addr) != 0) 
                                                        #line 1175 
                                                        eth_hw_addr_random(netdev);
  }
  else {
    {
      #line 1178 
      cif_spin_lock_bh_devcmd_lock_of_enic_4(& enic->devcmd_lock);
      #line 1178 
      if (enic_is_valid_vf(enic,vf) != 0) {
        #line 1178 
        vnic_dev_cmd_proxy_by_index_start(enic->vdev,(unsigned short)((int)((unsigned short)vf)));
        #line 1178 
        err = vnic_dev_get_mac_addr(enic->vdev,(u8 *)(& pp->mac_addr));
        #line 1178 
        vnic_dev_cmd_proxy_end(enic->vdev);
      }
      else 
           #line 1178 
           err = vnic_dev_get_mac_addr(enic->vdev,(u8 *)(& pp->mac_addr));
      #line 1178 
      cif_spin_unlock_bh_devcmd_lock_of_enic_4(& enic->devcmd_lock);
    }
    #line 1180 
    if (err != 0) {
      #line 1181 
      netdev_err(netdev,(char *)"Error getting mac for vf %d\n",vf);
      #line 1182 
      memcpy((void *)pp,(void *)(& prev_pp),92UL);
      #line 1183 
      return enic_dev_status_to_errno(err);
    }
  }
  #line 1187 
  err = enic_process_set_pp_request(enic,vf,& prev_pp,& restore_pp);
  #line 1188 
  if (err != 0) 
    #line 1189 
    if (restore_pp != 0) 
                         #line 1193 
                         memcpy((void *)pp,(void *)(& prev_pp),92UL);
    else {
      #line 1195 
      memset((void *)pp,0,92UL);
      #line 1196 
      if (vf == -1) 
                    #line 1197 
                    eth_zero_addr(netdev->dev_addr);
    }
  else {
    #line 1203 
    pp->set |= 1U;
    #line 1206 
    if ((unsigned int)pp->request == 3U) {
      #line 1207 
      eth_zero_addr((u8 *)(& pp->mac_addr));
      #line 1208 
      if (vf == -1) 
                    #line 1209 
                    eth_zero_addr(netdev->dev_addr);
    }
  }
  #line 1213 
  if (vf == -1) 
                #line 1214 
                eth_zero_addr((u8 *)(& pp->vf_mac));
  #line 1216 
  return err;
}

#line 1219  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/enic_main.c"
static int enic_get_vf_port(struct net_device *netdev, int vf, struct sk_buff *skb)
{
  #line 1224 
  struct enic_port_profile *pp;
  #line 1225 
  int err;
  #line 1222 
  struct enic *enic = netdev_priv(netdev);
  #line 1223 
  u16 response = (unsigned short)256U;
  #line 1227 
  if (enic_is_valid_pp_vf(enic,vf,& err) != 0) 
    #line 1227 
    if (vf == -1) 
                  #line 1227 
                  pp = enic->pp; else 
                                      #line 1227 
                                      pp = enic->pp + (unsigned long)vf;
  else 
       #line 1227 
       pp = (struct enic_port_profile *)0;
  #line 1228 
  if (err != 0) 
                #line 1229 
                return err;
  #line 1231 
  if ((pp->set & 1U) == 0U) 
                            #line 1232 
                            return -61;
  #line 1234 
  err = enic_process_get_pp_request(enic,vf,(int)pp->request,& response);
  #line 1235 
  if (err != 0) 
                #line 1236 
                return err;
  #line 1238 
  if (nla_put_u16(skb,6,(unsigned short)((int)pp->request)) != 0) 
                                                                  #line 1238 
                                                                  goto _LOR;
  else {
    #line 1238 
    if (nla_put_u16(skb,7,(unsigned short)((int)response)) != 0) 
                                                                 #line 1238 
                                                                 goto _LOR;
    else 
      #line 1239 
      if ((pp->set & 4U) != 0U) {
        #line 1240 
        if (nla_put(skb,2,40,(void *)(& pp->name)) != 0) 
                                                         #line 1238 
                                                         goto _LOR; else 
                                                                    #line 1238 
                                                                    goto _LAND_0;
      }
      else {
        #line 1238 
        _LAND_0: 
                 #line 1241 
        ;
        #line 1241 
        if ((pp->set & 8U) != 0U) {
          #line 1242 
          if (nla_put(skb,4,16,(void *)(& pp->instance_uuid)) != 0) 
                                                                    #line 1238 
                                                                    goto _LOR; else 
                                                                    #line 1238 
                                                                    goto _LAND;
        }
        else {
          #line 1238 
          _LAND: 
                 #line 1244 
          ;
          #line 1244 
          if ((pp->set & 16U) != 0U) {
            #line 1245 
            if (nla_put(skb,5,16,(void *)(& pp->host_uuid)) != 0) 
                                                                  #line 1238 
                                                                  _LOR: 
                                                                    #line 1247 
                                                                    goto nla_put_failure;
          }
        }
      }
  }
  #line 1248 
  return 0;
  #line 1250 
  nla_put_failure: 
                   #line 1250 
  ;
  #line 1251 
  return -90;
}

#line 1254  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/enic_main.c"
static void enic_free_rq_buf(struct vnic_rq *rq, struct vnic_rq_buf *buf)
{
  #line 1256 
  struct enic *enic = vnic_dev_priv(rq->vdev);
  #line 1258 
  if (buf->os_buf == (void *)0) 
                                #line 1259 
                                return;
  #line 1261 
  pci_unmap_single(enic->pdev,buf->dma_addr,(unsigned long)buf->len,2);
  #line 1263 
  dev_kfree_skb_any((struct sk_buff *)buf->os_buf);
  #line 1264 
  buf->os_buf = (void *)0;
  #line 1265 
  return;
}

#line 1267  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/enic_main.c"
static int enic_rq_alloc_buf(struct vnic_rq *rq)
{
  #line 1271 
  struct sk_buff *skb;
  #line 1274 
  dma_addr_t dma_addr;
  #line 1269 
  struct enic *enic = vnic_dev_priv(rq->vdev);
  #line 1270 
  struct net_device *netdev = enic->netdev;
  #line 1272 
  unsigned int len = netdev->mtu + 18U;
  #line 1273 
  unsigned int os_buf_index = 0U;
  #line 1275 
  struct vnic_rq_buf *buf = rq->to_use;
  #line 1277 
  if (buf->os_buf != (void *)0) {
    #line 1278 
    enic_queue_rq_desc(rq,buf->os_buf,os_buf_index,buf->dma_addr,buf->len);
    #line 1281 
    return 0;
  }
  #line 1283 
  skb = netdev_alloc_skb_ip_align(netdev,len);
  #line 1284 
  if (skb == (struct sk_buff *)0) 
                                  #line 1285 
                                  return -12;
  #line 1287 
  dma_addr = pci_map_single(enic->pdev,(void *)skb->data,(unsigned long)len,2);
  #line 1289 
  if ((long)(enic_dma_map_check(enic,dma_addr) != 0) != 0L) {
    #line 1290 
    consume_skb(skb);
    #line 1291 
    return -12;
  }
  #line 1294 
  enic_queue_rq_desc(rq,(void *)skb,os_buf_index,dma_addr,len);
  #line 1297 
  return 0;
}

#line 1300  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/enic_main.c"
static void enic_intr_update_pkt_size(struct vnic_rx_bytes_counter *pkt_size, u32 pkt_len)
{
  #line 1303 
  if (pkt_len > 999U) 
                      #line 1304 
                      pkt_size->large_pkt_bytes_cnt += pkt_len; else 
                                                                  #line 1306 
                                                                  pkt_size->small_pkt_bytes_cnt += pkt_len;
  #line 1307 
  return;
}

#line 1309  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/enic_main.c"
static bool enic_rxcopybreak(struct net_device *netdev, struct sk_buff **skb, struct vnic_rq_buf *buf, u16 len)
{
  #line 1313 
  struct sk_buff *new_skb;
  #line 1312 
  struct enic *enic = netdev_priv(netdev);
  #line 1315 
  if ((unsigned int)len > enic->rx_copybreak) 
                                              #line 1316 
                                              return (_Bool)0;
  #line 1317 
  new_skb = netdev_alloc_skb_ip_align(netdev,(unsigned int)len);
  #line 1318 
  if (new_skb == (struct sk_buff *)0) 
                                      #line 1319 
                                      return (_Bool)0;
  #line 1320 
  pci_dma_sync_single_for_cpu(enic->pdev,buf->dma_addr,(unsigned long)len,2);
  #line 1322 
  memcpy((void *)new_skb->data,(void *)(*skb)->data,(unsigned long)len);
  #line 1323 
  *skb = new_skb;
  #line 1325 
  return (_Bool)1;
}

#line 1328  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/enic_main.c"
static void enic_rq_indicate_buf(struct vnic_rq *rq, struct cq_desc *cq_desc, struct vnic_rq_buf *buf, int skipped, void *opaque)
{
  #line 1334 
  struct sk_buff *skb;
  #line 1337 
  u8 type;
  #line 1337 
  u8 color;
  #line 1337 
  u8 eop;
  #line 1337 
  u8 sop;
  #line 1337 
  u8 ingress_port;
  #line 1337 
  u8 vlan_stripped;
  #line 1338 
  u8 fcoe;
  #line 1338 
  u8 fcoe_sof;
  #line 1338 
  u8 fcoe_fc_crc_ok;
  #line 1338 
  u8 fcoe_enc_error;
  #line 1338 
  u8 fcoe_eof;
  #line 1339 
  u8 tcp_udp_csum_ok;
  #line 1339 
  u8 udp;
  #line 1339 
  u8 tcp;
  #line 1339 
  u8 ipv4_csum_ok;
  #line 1340 
  u8 ipv6;
  #line 1340 
  u8 ipv4;
  #line 1340 
  u8 ipv4_fragment;
  #line 1340 
  u8 fcs_ok;
  #line 1340 
  u8 rss_type;
  #line 1340 
  u8 csum_not_calc;
  #line 1341 
  u8 packet_error;
  #line 1342 
  u16 q_number;
  #line 1342 
  u16 completed_index;
  #line 1342 
  u16 bytes_written;
  #line 1342 
  u16 vlan_tci;
  #line 1342 
  u16 checksum;
  #line 1343 
  u32 rss_hash;
  #line 1332 
  struct enic *enic = vnic_dev_priv(rq->vdev);
  #line 1333 
  struct net_device *netdev = enic->netdev;
  #line 1335 
  struct vnic_cq *cq = & enic->cq[enic_cq_rq(enic,rq->index)];
  #line 1344 
  bool outer_csum_ok = (_Bool)1;
  #line 1344 
  bool encap = (_Bool)0;
  #line 1346 
  if (skipped != 0) 
                    #line 1347 
                    return;
  #line 1349 
  skb = (struct sk_buff *)buf->os_buf;
  #line 1351 
  cq_enet_rq_desc_dec((struct cq_enet_rq_desc *)cq_desc,& type,& color,& q_number,& completed_index,& ingress_port,& fcoe,& eop,& sop,& rss_type,& csum_not_calc,& rss_hash,& bytes_written,& packet_error,& vlan_stripped,& vlan_tci,& checksum,& fcoe_sof,& fcoe_fc_crc_ok,& fcoe_enc_error,& fcoe_eof,& tcp_udp_csum_ok,& udp,& tcp,& ipv4_csum_ok,& ipv6,& ipv4,& ipv4_fragment,& fcs_ok);
  #line 1361 
  if ((unsigned int)packet_error != 0U) {
    #line 1363 
    if ((unsigned int)fcs_ok == 0U) 
      #line 1364 
      if ((unsigned int)bytes_written != 0U) 
                                             #line 1365 
                                             (enic->rq_bad_fcs) ++;
      else 
        #line 1366 
        if ((unsigned int)bytes_written == 0U) 
                                               #line 1367 
                                               (enic->rq_truncated_pkts) ++;
    #line 1370 
    pci_unmap_single(enic->pdev,buf->dma_addr,(unsigned long)buf->len,2);
    #line 1372 
    dev_kfree_skb_any(skb);
    #line 1373 
    buf->os_buf = (void *)0;
    #line 1375 
    return;
  }
  #line 1378 
  if ((unsigned int)eop != 0U && (unsigned int)bytes_written != 0U) {
    #line 1383 
    if (! enic_rxcopybreak(netdev,& skb,buf,
                         (unsigned short)((int)bytes_written))) {
      #line 1384 
      buf->os_buf = (void *)0;
      #line 1385 
      pci_unmap_single(enic->pdev,buf->dma_addr,(unsigned long)buf->len,2);
    }
    #line 1388 
    __builtin_prefetch((void const *)((void *)skb->data));
    #line 1390 
    skb_put(skb,(unsigned int)bytes_written);
    #line 1391 
    skb->protocol = eth_type_trans(skb,netdev);
    #line 1392 
    skb_record_rx_queue(skb,(unsigned short)((int)q_number));
    #line 1393 
    if (((netdev->features & 274877906944ULL) != 0ULL && rss_hash != 0U) && (unsigned int)type == 3U) 
      #line 1395 
      switch ((int)rss_type) {
        #line 1396 
        case 2: 
                #line 1396 
        ;
        #line 1397 
        case 4: 
                #line 1397 
        ;
        #line 1398 
        case 6: 
                #line 1398 
        ;
        #line 1399 
        skb_set_hash(skb,rss_hash,(enum pkt_hash_types)PKT_HASH_TYPE_L4);
        #line 1400 
        break;
        #line 1401 
        case 1: 
                #line 1401 
        ;
        #line 1402 
        case 3: 
                #line 1402 
        ;
        #line 1403 
        case 5: 
                #line 1403 
        ;
        #line 1404 
        skb_set_hash(skb,rss_hash,(enum pkt_hash_types)PKT_HASH_TYPE_L3);
        #line 1405 
        break;
      }
    #line 1408 
    if ((unsigned int)enic->vxlan.vxlan_udp_port_number != 0U) 
      #line 1409 
      switch ((int)enic->vxlan.patch_level) {
        #line 1410 
        case 0: 
                #line 1410 
        ;
        #line 1411 
        if ((unsigned int)fcoe != 0U) {
          #line 1412 
          encap = (_Bool)1;
          #line 1413 
          outer_csum_ok = (_Bool)((unsigned int)fcoe_fc_crc_ok != 0U);
        }
        #line 1415 
        break;
        #line 1416 
        case 2: 
                #line 1416 
        ;
        #line 1417 
        if ((unsigned int)type == 7U && ((unsigned long)rss_hash & 1UL) != 0UL) {
          #line 1419 
          encap = (_Bool)1;
          #line 1420 
          outer_csum_ok = (_Bool)((((unsigned long)rss_hash & 2UL) != 0UL && ((unsigned long)rss_hash & 4UL) != 0UL) != 0);
        }
        #line 1423 
        break;
      }
    #line 1436 
    if (((((netdev->features & 549755813888ULL) != 0ULL && (unsigned int)csum_not_calc == 0U) && (unsigned int)tcp_udp_csum_ok != 0U) && (int)outer_csum_ok != 0) && ((unsigned int)ipv4_csum_ok != 0U || (unsigned int)ipv6 != 0U)) {
      #line 1439 
      skb->ip_summed = (unsigned char)1U;
      #line 1440 
      skb->csum_level = (unsigned char)encap;
    }
    #line 1443 
    if ((unsigned int)vlan_stripped != 0U) 
                                           #line 1444 
                                           __vlan_hwaccel_put_tag(skb,(unsigned short)129,(unsigned short)((int)vlan_tci));
    #line 1446 
    skb_mark_napi_id(skb,& enic->napi[rq->index]);
    #line 1447 
    if ((netdev->features & 16384ULL) == 0ULL) 
                                               #line 1448 
                                               netif_receive_skb(skb); else 
                                                                    #line 1450 
                                                                    napi_gro_receive(& enic->napi[(int)q_number],skb);
    #line 1451 
    if (enic->rx_coalesce_setting.use_adaptive_rx_coalesce != 0U) 
                                                                  #line 1452 
                                                                  enic_intr_update_pkt_size(& cq->pkt_size_counter,(unsigned int)bytes_written);
  }
  else {
    #line 1459 
    pci_unmap_single(enic->pdev,buf->dma_addr,(unsigned long)buf->len,2);
    #line 1461 
    dev_kfree_skb_any(skb);
    #line 1462 
    buf->os_buf = (void *)0;
  }
  #line 1464 
  return;
}

#line 1466  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/enic_main.c"
static int enic_rq_service(struct vnic_dev *vdev, struct cq_desc *cq_desc, u8 type, u16 q_number, u16 completed_index, void *opaque)
{
  #line 1469 
  struct enic *enic = vnic_dev_priv(vdev);
  #line 1471 
  vnic_rq_service(& enic->rq[(int)q_number],cq_desc,(unsigned short)((int)completed_index),0,& enic_rq_indicate_buf,opaque);
  #line 1475 
  return 0;
}

#line 1478  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/enic_main.c"
static void enic_set_int_moderation(struct enic *enic, struct vnic_rq *rq)
{
  #line 1480 
  unsigned int intr = enic_msix_rq_intr(enic,rq->index);
  #line 1481 
  struct vnic_cq *cq = & enic->cq[enic_cq_rq(enic,rq->index)];
  #line 1482 
  u32 timer = cq->tobe_rx_coal_timeval;
  #line 1484 
  if (cq->tobe_rx_coal_timeval != cq->cur_rx_coal_timeval) {
    #line 1485 
    vnic_intr_coalescing_timer_set(& enic->intr[intr],timer);
    #line 1486 
    cq->cur_rx_coal_timeval = cq->tobe_rx_coal_timeval;
  }
  #line 1488 
  return;
}

#line 1490  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/enic_main.c"
static void enic_calc_int_moderation(struct enic *enic, struct vnic_rq *rq)
{
  #line 1495 
  int index;
  #line 1496 
  u32 timer;
  #line 1497 
  u32 range_start;
  #line 1498 
  u32 traffic;
  #line 1499 
  u64 delta;
  #line 1492 
  struct enic_rx_coal *rx_coal = & enic->rx_coalesce_setting;
  #line 1493 
  struct vnic_cq *cq = & enic->cq[enic_cq_rq(enic,rq->index)];
  #line 1494 
  struct vnic_rx_bytes_counter *pkt_size_counter = & cq->pkt_size_counter;
  #line 1500 
  ktime_t now = ktime_get();
  #line 1502 
  delta = (unsigned long long)ktime_us_delta(now,cq->prev_ts);
  #line 1503 
  if (delta <= 99ULL) 
                      #line 1504 
                      return;
  #line 1505 
  cq->prev_ts = now;
  #line 1507 
  traffic = pkt_size_counter->large_pkt_bytes_cnt + pkt_size_counter->small_pkt_bytes_cnt;
  #line 1517 
  traffic <<= 3;
  #line 1518 
  if (delta <= 4294967295ULL) 
                              #line 1518 
                              traffic /= (unsigned int)delta; else 
                                                                   #line 1518 
                                                                   traffic = 0U;
  #line 1520 
  index = 0;
  #line 1520 
  while (index <= 9) {
    #line 1521 
    if (mod_table[index].rx_rate > traffic) 
                                            #line 1522 
                                            break;
    #line 1520 
    index ++;
  }
  #line 1523 
  if (pkt_size_counter->small_pkt_bytes_cnt > pkt_size_counter->large_pkt_bytes_cnt << 1) 
    #line 1523 
    range_start = rx_coal->small_pkt_range_start; else 
                                                       #line 1523 
                                                       range_start = rx_coal->large_pkt_range_start;
  #line 1527 
  timer = ((rx_coal->range_end - range_start) * mod_table[index].range_percent) / 100U + range_start;
  #line 1530 
  cq->tobe_rx_coal_timeval = (cq->tobe_rx_coal_timeval + timer) >> 1;
  #line 1532 
  pkt_size_counter->large_pkt_bytes_cnt = 0U;
  #line 1533 
  pkt_size_counter->small_pkt_bytes_cnt = 0U;
  #line 1534 
  return;
}

#line 1536  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/enic_main.c"
static int enic_poll(struct napi_struct *napi, int budget)
{
  #line 1545 
  unsigned int work_done;
  #line 1545 
  unsigned int wq_work_done;
  #line 1546 
  int err;
  #line 1538 
  struct net_device *netdev = napi->dev;
  #line 1539 
  struct enic *enic = netdev_priv(netdev);
  #line 1540 
  unsigned int cq_rq = enic_cq_rq(enic,0U);
  #line 1541 
  unsigned int cq_wq = enic_cq_wq(enic,0U);
  #line 1542 
  unsigned int intr = enic_legacy_io_intr();
  #line 1543 
  unsigned int rq_work_to_do = (unsigned int)budget;
  #line 1544 
  unsigned int wq_work_to_do = 256U;
  #line 1545 
  unsigned int rq_work_done = 0U;
  #line 1548 
  wq_work_done = vnic_cq_service(& enic->cq[cq_wq],wq_work_to_do,& enic_wq_service,(void *)0);
  #line 1551 
  if (budget > 0) 
                  #line 1552 
                  rq_work_done = vnic_cq_service(& enic->cq[cq_rq],rq_work_to_do,& enic_rq_service,(void *)0);
  #line 1560 
  work_done = rq_work_done + wq_work_done;
  #line 1562 
  if (work_done != 0U) 
                       #line 1563 
                       vnic_intr_return_credits(& enic->intr[intr],work_done,0,0);
  #line 1568 
  err = vnic_rq_fill(& enic->rq[0],& enic_rq_alloc_buf);
  #line 1574 
  if (err != 0) 
                #line 1575 
                rq_work_done = rq_work_to_do;
  #line 1576 
  if (enic->rx_coalesce_setting.use_adaptive_rx_coalesce != 0U) 
                                                                #line 1580 
                                                                enic_calc_int_moderation(enic,& enic->rq[0]);
  #line 1582 
  if (rq_work_done < (unsigned int)budget) {
    #line 1582 
    if ((int)napi_complete_done(napi,(int)rq_work_done) != 0) {
      #line 1588 
      if (enic->rx_coalesce_setting.use_adaptive_rx_coalesce != 0U) 
                                                                    #line 1589 
                                                                    enic_set_int_moderation(enic,& enic->rq[0]);
      #line 1590 
      vnic_intr_unmask(& enic->intr[intr]);
    }
  }
  #line 1593 
  return (int)rq_work_done;
}

#line 1597  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/enic_main.c"
static void enic_free_rx_cpu_rmap(struct enic *enic)
{
  #line 1599 
  free_irq_cpu_rmap((enic->netdev)->rx_cpu_rmap);
  #line 1600 
  (enic->netdev)->rx_cpu_rmap = (struct cpu_rmap *)0;
  #line 1601 
  return;
}

#line 1603  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/enic_main.c"
static void enic_set_rx_cpu_rmap(struct enic *enic)
{
  #line 1605 
  int i;
  #line 1605 
  int res;
  #line 1607 
  if (vnic_dev_get_intr_mode(enic->vdev) == (unsigned int)VNIC_DEV_INTR_MODE_MSIX) {
    #line 1608 
    (enic->netdev)->rx_cpu_rmap = alloc_irq_cpu_rmap(enic->rq_count);
    #line 1609 
    if ((long)((enic->netdev)->rx_cpu_rmap == (struct cpu_rmap *)0) != 0L) 
      #line 1610 
      return;
    #line 1611 
    i = 0;
    #line 1611 
    while (enic->rq_count > (unsigned int)i) {
      #line 1612 
      res = irq_cpu_rmap_add((enic->netdev)->rx_cpu_rmap,(int)enic->msix_entry[i].vector);
      #line 1614 
      if ((long)(res != 0) != 0L) {
        #line 1615 
        enic_free_rx_cpu_rmap(enic);
        #line 1616 
        return;
      }
      #line 1611 
      i ++;
    }
  }
  #line 1620 
  return;
}

#line 1634  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/enic_main.c"
static int enic_poll_msix_wq(struct napi_struct *napi, int budget)
{
  #line 1640 
  unsigned int cq;
  #line 1641 
  unsigned int intr;
  #line 1643 
  unsigned int wq_work_done;
  #line 1644 
  unsigned int wq_irq;
  #line 1636 
  struct net_device *netdev = napi->dev;
  #line 1637 
  struct enic *enic = netdev_priv(netdev);
  #line 1638 
  unsigned int wq_index = (unsigned int)((napi - & enic->napi[0]) / 392L) - enic->rq_count;
  #line 1639 
  struct vnic_wq *wq = & enic->wq[wq_index];
  #line 1642 
  unsigned int wq_work_to_do = 256U;
  #line 1646 
  wq_irq = wq->index;
  #line 1647 
  cq = enic_cq_wq(enic,wq_irq);
  #line 1648 
  intr = enic_msix_wq_intr(enic,wq_irq);
  #line 1649 
  wq_work_done = vnic_cq_service(& enic->cq[cq],wq_work_to_do,& enic_wq_service,(void *)0);
  #line 1652 
  vnic_intr_return_credits(& enic->intr[intr],wq_work_done,0,1);
  #line 1655 
  if (wq_work_done == 0U) {
    #line 1656 
    napi_complete(napi);
    #line 1657 
    vnic_intr_unmask(& enic->intr[intr]);
    #line 1658 
    return 0;
  }
  #line 1661 
  return budget;
}

#line 1664  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/enic_main.c"
static int enic_poll_msix_rq(struct napi_struct *napi, int budget)
{
  #line 1673 
  int err;
  #line 1666 
  struct net_device *netdev = napi->dev;
  #line 1667 
  struct enic *enic = netdev_priv(netdev);
  #line 1668 
  unsigned int rq = (unsigned int)((napi - & enic->napi[0]) / 392L);
  #line 1669 
  unsigned int cq = enic_cq_rq(enic,rq);
  #line 1670 
  unsigned int intr = enic_msix_rq_intr(enic,rq);
  #line 1671 
  unsigned int work_to_do = (unsigned int)budget;
  #line 1672 
  unsigned int work_done = 0U;
  #line 1678 
  if (budget > 0) 
                  #line 1679 
                  work_done = vnic_cq_service(& enic->cq[cq],work_to_do,& enic_rq_service,(void *)0);
  #line 1687 
  if (work_done != 0U) 
                       #line 1688 
                       vnic_intr_return_credits(& enic->intr[intr],work_done,0,0);
  #line 1693 
  err = vnic_rq_fill(& enic->rq[rq],& enic_rq_alloc_buf);
  #line 1699 
  if (err != 0) 
                #line 1700 
                work_done = work_to_do;
  #line 1701 
  if (enic->rx_coalesce_setting.use_adaptive_rx_coalesce != 0U) 
                                                                #line 1705 
                                                                enic_calc_int_moderation(enic,& enic->rq[rq]);
  #line 1707 
  if (work_done < (unsigned int)budget) {
    #line 1707 
    if ((int)napi_complete_done(napi,(int)work_done) != 0) {
      #line 1713 
      if (enic->rx_coalesce_setting.use_adaptive_rx_coalesce != 0U) 
                                                                    #line 1714 
                                                                    enic_set_int_moderation(enic,& enic->rq[rq]);
      #line 1715 
      vnic_intr_unmask(& enic->intr[intr]);
    }
  }
  #line 1718 
  return (int)work_done;
}

#line 1721  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/enic_main.c"
static void enic_notify_timer(struct timer_list *t)
{
  #line 1723 
  void *__mptr;
  #line 1723 
  __mptr = (void *)t;
  #line 1723 
  struct enic *enic = ((struct enic *)(__mptr + 18446744073709551400U));
  #line 1725 
  enic_notify_check(enic);
  #line 1727 
  ;
  #line 1727 
  cif_mod_timer_0(& enic->notify_timer,round_jiffies(jiffies + 500UL));
  #line 1729 
  return;
}

#line 1731  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/enic_main.c"
static void enic_free_intr(struct enic *enic)
{
  #line 1734 
  unsigned int i;
  #line 1733 
  struct net_device *netdev = enic->netdev;
  #line 1736 
  enic_free_rx_cpu_rmap(enic);
  #line 1737 
  switch ((unsigned int)vnic_dev_get_intr_mode(enic->vdev)) {
    #line 1738 
    case (unsigned int)1: 
                          #line 1738 
    ;
    #line 1739 
    cif_free_irq((enic->pdev)->irq,(void *)netdev);
    #line 1740 
    break;
    #line 1741 
    case (unsigned int)2: 
                          #line 1741 
    ;
    #line 1742 
    cif_free_irq((enic->pdev)->irq,(void *)enic);
    #line 1743 
    break;
    #line 1744 
    case (unsigned int)3: 
                          #line 1744 
    ;
    #line 1745 
    i = 0U;
    #line 1745 
    while (i <= 17U) {
      #line 1746 
      if (enic->msix[i].requested != 0) 
                                        #line 1747 
                                        cif_free_irq(enic->msix_entry[i].vector,enic->msix[i].devid);
      #line 1745 
      i ++;
    }
    #line 1749 
    break;
    #line 1750 
    default: 
             #line 1750 
    ;
    #line 1751 
    break;
  }
  #line 1753 
  return;
}

#line 1755  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/enic_main.c"
static int enic_request_intr(struct enic *enic)
{
  #line 1758 
  unsigned int i;
  #line 1758 
  unsigned int intr;
  #line 1757 
  struct net_device *netdev = enic->netdev;
  #line 1759 
  int err = 0;
  #line 1761 
  enic_set_rx_cpu_rmap(enic);
  #line 1762 
  switch ((unsigned int)vnic_dev_get_intr_mode(enic->vdev)) {
    #line 1764 
    case (unsigned int)1: 
                          #line 1764 
    ;
    #line 1766 
    err = cif_request_irq((enic->pdev)->irq,& enic_isr_legacy,128UL,(char *)(& netdev->name),(void *)netdev);
    #line 1768 
    break;
    #line 1770 
    case (unsigned int)2: 
                          #line 1770 
    ;
    #line 1772 
    err = cif_request_irq((enic->pdev)->irq,& enic_isr_msi,0UL,(char *)(& netdev->name),(void *)enic);
    #line 1774 
    break;
    #line 1776 
    case (unsigned int)3: 
                          #line 1776 
    ;
    #line 1778 
    i = 0U;
    #line 1778 
    while (enic->rq_count > i) {
      #line 1779 
      intr = enic_msix_rq_intr(enic,i);
      #line 1780 
      snprintf((char *)(& enic->msix[intr].devname),24UL,(char *)"%s-rx-%u",(char *)(& netdev->name),i);
      #line 1783 
      enic->msix[intr].isr = & enic_isr_msix;
      #line 1784 
      enic->msix[intr].devid = (void *)(& enic->napi[i]);
      #line 1778 
      i ++;
    }
    #line 1787 
    i = 0U;
    #line 1787 
    while (enic->wq_count > i) {
      {
        #line 1788 
        int wq = (int)enic_cq_wq(enic,i);
        #line 1790 
        intr = enic_msix_wq_intr(enic,i);
        #line 1791 
        snprintf((char *)(& enic->msix[intr].devname),24UL,(char *)"%s-tx-%u",(char *)(& netdev->name),i);
        #line 1794 
        enic->msix[intr].isr = & enic_isr_msix;
        #line 1795 
        enic->msix[intr].devid = (void *)(& enic->napi[wq]);
      }
      #line 1787 
      i ++;
    }
    #line 1798 
    intr = enic_msix_err_intr(enic);
    #line 1799 
    snprintf((char *)(& enic->msix[intr].devname),24UL,(char *)"%s-err",(char *)(& netdev->name));
    #line 1802 
    enic->msix[intr].isr = & enic_isr_msix_err;
    #line 1803 
    enic->msix[intr].devid = (void *)enic;
    #line 1805 
    intr = enic_msix_notify_intr(enic);
    #line 1806 
    snprintf((char *)(& enic->msix[intr].devname),24UL,(char *)"%s-notify",(char *)(& netdev->name));
    #line 1809 
    enic->msix[intr].isr = & enic_isr_msix_notify;
    #line 1810 
    enic->msix[intr].devid = (void *)enic;
    #line 1812 
    i = 0U;
    #line 1812 
    while (i <= 17U) {
      #line 1813 
      enic->msix[i].requested = 0;
      #line 1812 
      i ++;
    }
    #line 1815 
    i = 0U;
    #line 1815 
    while (enic->intr_count > i) {
      #line 1816 
      err = cif_request_irq(enic->msix_entry[i].vector,enic->msix[i].isr,0UL,(char *)(& enic->msix[i].devname),enic->msix[i].devid);
      #line 1820 
      if (err != 0) {
        #line 1821 
        enic_free_intr(enic);
        #line 1822 
        break;
      }
      #line 1824 
      enic->msix[i].requested = 1;
      #line 1815 
      i ++;
    }
    #line 1827 
    break;
    #line 1829 
    default: 
             #line 1829 
    ;
    #line 1830 
    break;
  }
  #line 1833 
  return err;
}

#line 1836  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/enic_main.c"
static void enic_synchronize_irqs(struct enic *enic)
{
  #line 1838 
  unsigned int i;
  #line 1840 
  switch ((unsigned int)vnic_dev_get_intr_mode(enic->vdev)) {
    #line 1841 
    case (unsigned int)1: 
                          #line 1841 
    ;
    #line 1842 
    case (unsigned int)2: 
                          #line 1842 
    ;
    #line 1843 
    synchronize_irq((enic->pdev)->irq);
    #line 1844 
    break;
    #line 1845 
    case (unsigned int)3: 
                          #line 1845 
    ;
    #line 1846 
    i = 0U;
    #line 1846 
    while (enic->intr_count > i) {
      #line 1847 
      synchronize_irq(enic->msix_entry[i].vector);
      #line 1846 
      i ++;
    }
    #line 1848 
    break;
    #line 1849 
    default: 
             #line 1849 
    ;
    #line 1850 
    break;
  }
  #line 1852 
  return;
}

#line 1854  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/enic_main.c"
static void enic_set_rx_coal_setting(struct enic *enic)
{
  #line 1856 
  unsigned int speed;
  #line 1857 
  int index = -1;
  #line 1858 
  struct enic_rx_coal *rx_coal = & enic->rx_coalesce_setting;
  #line 1864 
  speed = vnic_dev_port_speed(enic->vdev);
  #line 1865 
  if (speed > 10000U) 
                      #line 1866 
                      index = 2;
  else 
    #line 1867 
    if (speed > 4000U) 
                       #line 1868 
                       index = 1; else 
                                       #line 1870 
                                       index = 0;
  #line 1872 
  rx_coal->small_pkt_range_start = mod_range[index].small_pkt_range_start;
  #line 1873 
  rx_coal->large_pkt_range_start = mod_range[index].large_pkt_range_start;
  #line 1874 
  rx_coal->range_end = 125U;
  #line 1877 
  index = 0;
  #line 1877 
  while (enic->rq_count > (unsigned int)index) {
    #line 1878 
    enic->cq[index].cur_rx_coal_timeval = enic->config.intr_timer_usec;
    #line 1877 
    index ++;
  }
  #line 1881 
  rx_coal->use_adaptive_rx_coalesce = 1U;
  #line 1882 
  return;
}

#line 1884  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/enic_main.c"
static int enic_dev_notify_set(struct enic *enic)
{
  #line 1886 
  int err;
  #line 1888 
  cif_spin_lock_bh_devcmd_lock_of_enic_4(& enic->devcmd_lock);
  #line 1889 
  switch ((unsigned int)vnic_dev_get_intr_mode(enic->vdev)) {
    #line 1890 
    case (unsigned int)1: 
                          #line 1890 
    ;
    #line 1891 
    ;
    #line 1891 
    err = vnic_dev_notify_set(enic->vdev,(unsigned short)((int)((unsigned short)enic_legacy_notify_intr())));
    #line 1893 
    break;
    #line 1894 
    case (unsigned int)3: 
                          #line 1894 
    ;
    #line 1895 
    ;
    #line 1895 
    err = vnic_dev_notify_set(enic->vdev,(unsigned short)((int)((unsigned short)enic_msix_notify_intr(enic))));
    #line 1897 
    break;
    #line 1898 
    default: 
             #line 1898 
    ;
    #line 1899 
    err = vnic_dev_notify_set(enic->vdev,(unsigned short)65535);
    #line 1900 
    break;
  }
  #line 1902 
  cif_spin_unlock_bh_devcmd_lock_of_enic_4(& enic->devcmd_lock);
  #line 1904 
  return err;
}

#line 1907  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/enic_main.c"
static void enic_notify_timer_start(struct enic *enic)
{
  #line 1909 
  switch ((unsigned int)vnic_dev_get_intr_mode(enic->vdev)) {
    #line 1910 
    case (unsigned int)2: 
                          #line 1910 
    ;
    #line 1911 
    cif_mod_timer_0(& enic->notify_timer,jiffies);
    #line 1912 
    break;
    #line 1913 
    default: 
             #line 1913 
    ;
    #line 1915 
    break;
  }
  #line 1917 
  return;
}

#line 1920  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/enic_main.c"
static int enic_open(struct net_device *netdev)
{
  #line 1923 
  unsigned int i;
  #line 1924 
  int err;
  #line 1924 
  int ret;
  #line 1922 
  struct enic *enic = netdev_priv(netdev);
  #line 1926 
  err = enic_request_intr(enic);
  #line 1927 
  if (err != 0) {
    #line 1928 
    netdev_err(netdev,(char *)"Unable to request irq.\n");
    #line 1929 
    return err;
  }
  #line 1931 
  enic_init_affinity_hint(enic);
  #line 1932 
  enic_set_affinity_hint(enic);
  #line 1934 
  err = enic_dev_notify_set(enic);
  #line 1935 
  if (err != 0) {
    #line 1936 
    netdev_err(netdev,(char *)"Failed to alloc notify buffer, aborting.\n");
    #line 1938 
    goto err_out_free_intr;
  }
  #line 1941 
  i = 0U;
  #line 1941 
  while (enic->rq_count > i) {
    {
      #line 1943 
      vnic_rq_enable(& enic->rq[i]);
      #line 1944 
      vnic_rq_fill(& enic->rq[i],& enic_rq_alloc_buf);
      #line 1946 
      if (vnic_rq_desc_used(& enic->rq[i]) == 0U) {
        #line 1947 
        netdev_err(netdev,(char *)"Unable to alloc receive buffers\n");
        #line 1948 
        err = -12;
        #line 1949 
        goto err_out_free_rq;
      }
    }
    #line 1941 
    i ++;
  }
  #line 1953 
  i = 0U;
  #line 1953 
  while (enic->wq_count > i) {
    #line 1954 
    vnic_wq_enable(& enic->wq[i]);
    #line 1953 
    i ++;
  }
  #line 1956 
  if (enic_is_dynamic(enic) == 0) {
    #line 1956 
    if (enic_is_sriov_vf(enic) == 0) 
                                     #line 1957 
                                     enic_dev_add_station_addr(enic);
  }
  #line 1959 
  enic_set_rx_mode(netdev);
  #line 1961 
  netif_tx_wake_all_queues(netdev);
  #line 1963 
  i = 0U;
  #line 1963 
  while (enic->rq_count > i) {
    #line 1964 
    napi_enable(& enic->napi[i]);
    #line 1963 
    i ++;
  }
  #line 1966 
  if (vnic_dev_get_intr_mode(enic->vdev) == (unsigned int)VNIC_DEV_INTR_MODE_MSIX) {
    #line 1967 
    i = 0U;
    #line 1967 
    while (enic->wq_count > i) {
      #line 1968 
      ;
      #line 1968 
      napi_enable(& enic->napi[enic_cq_wq(enic,i)]);
      #line 1967 
      i ++;
    }
  }
  #line 1969 
  enic_dev_enable(enic);
  #line 1971 
  i = 0U;
  #line 1971 
  while (enic->intr_count > i) {
    #line 1972 
    vnic_intr_unmask(& enic->intr[i]);
    #line 1971 
    i ++;
  }
  #line 1974 
  enic_notify_timer_start(enic);
  #line 1975 
  enic_rfs_timer_start(enic);
  #line 1977 
  return 0;
  #line 1979 
  err_out_free_rq: 
                   #line 1979 
  ;
  #line 1980 
  i = 0U;
  #line 1980 
  while (enic->rq_count > i) {
    #line 1981 
    ret = vnic_rq_disable(& enic->rq[i]);
    #line 1982 
    if (ret == 0) 
                  #line 1983 
                  vnic_rq_clean(& enic->rq[i],& enic_free_rq_buf);
    #line 1980 
    i ++;
  }
  #line 1985 
  enic_dev_notify_unset(enic);
  #line 1986 
  err_out_free_intr: 
                     #line 1986 
  ;
  #line 1987 
  enic_unset_affinity_hint(enic);
  #line 1988 
  enic_free_intr(enic);
  #line 1990 
  return err;
}

#line 1994  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/enic_main.c"
static int enic_stop(struct net_device *netdev)
{
  #line 1997 
  unsigned int i;
  #line 1998 
  int err;
  #line 1996 
  struct enic *enic = netdev_priv(netdev);
  #line 2000 
  i = 0U;
  #line 2000 
  while (enic->intr_count > i) {
    #line 2001 
    vnic_intr_mask(& enic->intr[i]);
    #line 2002 
    vnic_intr_masked(& enic->intr[i]);
    #line 2000 
    i ++;
  }
  #line 2005 
  enic_synchronize_irqs(enic);
  #line 2007 
  cif_del_timer_sync_0(& enic->notify_timer);
  #line 2008 
  enic_rfs_flw_tbl_free(enic);
  #line 2010 
  enic_dev_disable(enic);
  #line 2012 
  i = 0U;
  #line 2012 
  while (enic->rq_count > i) {
    #line 2013 
    napi_disable(& enic->napi[i]);
    #line 2012 
    i ++;
  }
  #line 2015 
  netif_carrier_off(netdev);
  #line 2016 
  netif_tx_disable(netdev);
  #line 2017 
  if (vnic_dev_get_intr_mode(enic->vdev) == (unsigned int)VNIC_DEV_INTR_MODE_MSIX) {
    #line 2018 
    i = 0U;
    #line 2018 
    while (enic->wq_count > i) {
      #line 2019 
      ;
      #line 2019 
      napi_disable(& enic->napi[enic_cq_wq(enic,i)]);
      #line 2018 
      i ++;
    }
  }
  #line 2021 
  if (enic_is_dynamic(enic) == 0) {
    #line 2021 
    if (enic_is_sriov_vf(enic) == 0) 
                                     #line 2022 
                                     enic_dev_del_station_addr(enic);
  }
  #line 2024 
  i = 0U;
  #line 2024 
  while (enic->wq_count > i) {
    #line 2025 
    err = vnic_wq_disable(& enic->wq[i]);
    #line 2026 
    if (err != 0) 
                  #line 2027 
                  return err;
    #line 2024 
    i ++;
  }
  #line 2029 
  i = 0U;
  #line 2029 
  while (enic->rq_count > i) {
    #line 2030 
    err = vnic_rq_disable(& enic->rq[i]);
    #line 2031 
    if (err != 0) 
                  #line 2032 
                  return err;
    #line 2029 
    i ++;
  }
  #line 2035 
  enic_dev_notify_unset(enic);
  #line 2036 
  enic_unset_affinity_hint(enic);
  #line 2037 
  enic_free_intr(enic);
  #line 2039 
  i = 0U;
  #line 2039 
  while (enic->wq_count > i) {
    #line 2040 
    vnic_wq_clean(& enic->wq[i],& enic_free_wq_buf);
    #line 2039 
    i ++;
  }
  #line 2041 
  i = 0U;
  #line 2041 
  while (enic->rq_count > i) {
    #line 2042 
    vnic_rq_clean(& enic->rq[i],& enic_free_rq_buf);
    #line 2041 
    i ++;
  }
  #line 2043 
  i = 0U;
  #line 2043 
  while (enic->cq_count > i) {
    #line 2044 
    vnic_cq_clean(& enic->cq[i]);
    #line 2043 
    i ++;
  }
  #line 2045 
  i = 0U;
  #line 2045 
  while (enic->intr_count > i) {
    #line 2046 
    vnic_intr_clean(& enic->intr[i]);
    #line 2045 
    i ++;
  }
  #line 2048 
  return 0;
}

#line 2051  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/enic_main.c"
static int _enic_change_mtu(struct net_device *netdev, int new_mtu)
{
  #line 2053 
  bool running = netif_running(netdev);
  #line 2054 
  int err = 0;
  {
    #line 2056 
    bool __warned;
    #line 2056 
    int __ret_warn_once = rtnl_is_locked() == 0;
    #line 2056 
    if ((long)(__ret_warn_once != 0) != 0L && (long)(! __warned) != 0L) {
      #line 2056 
      __warned = (_Bool)1;
      {
        #line 2056 
        int __ret_warn_on = 1;
        #line 2056 
        if ((long)(__ret_warn_on != 0) != 0L) {
          #line 2056 
          __warn_printk((char *)"RTNL: assertion failed at %s (%d)\n",(char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/enic_main.c",2056);
          #line 2057 
          ldv_inline_asm();
          #line 2058 
          ldv_inline_asm();
        }
        #line 2056 
        long tmp_2 = (long)(__ret_warn_on != 0);
      }
    }
    #line 2056 
    long tmp_4 = (long)(__ret_warn_once != 0);
  }
  #line 2057 
  if ((int)running != 0) {
    #line 2058 
    err = enic_stop(netdev);
    #line 2059 
    if (err != 0) 
                  #line 2060 
                  return err;
  }
  #line 2063 
  netdev->mtu = (unsigned int)new_mtu;
  #line 2065 
  if ((int)running != 0) {
    #line 2066 
    err = enic_open(netdev);
    #line 2067 
    if (err != 0) 
                  #line 2068 
                  return err;
  }
  #line 2071 
  return 0;
}

#line 2074  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/enic_main.c"
static int enic_change_mtu(struct net_device *netdev, int new_mtu)
{
  #line 2076 
  struct enic *enic = netdev_priv(netdev);
  #line 2078 
  if (enic_is_dynamic(enic) != 0) 
                                  #line 2079 
                                  return -95;
  else {
    #line 2078 
    if (enic_is_sriov_vf(enic) != 0) 
                                     #line 2079 
                                     return -95;
  }
  #line 2081 
  if (netdev->mtu > enic->port_mtu) 
                                    #line 2082 
                                    netdev_warn(netdev,(char *)"interface MTU (%d) set higher than port MTU (%d)\n",netdev->mtu,enic->port_mtu);
  #line 2086 
  return _enic_change_mtu(netdev,new_mtu);
}

#line 2089  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/enic_main.c"
static void enic_change_mtu_work(struct work_struct *work)
{
  #line 2091 
  void *__mptr;
  #line 2091 
  __mptr = (void *)work;
  #line 2091 
  struct enic *enic = ((struct enic *)(__mptr + 18446744073709551152U));
  #line 2092 
  struct net_device *netdev = enic->netdev;
  #line 2093 
  int new_mtu = (int)vnic_dev_mtu(enic->vdev);
  #line 2095 
  rtnl_lock();
  #line 2096 
  _enic_change_mtu(netdev,new_mtu);
  #line 2097 
  rtnl_unlock();
  #line 2099 
  netdev_info(netdev,(char *)"interface MTU set as %d\n",netdev->mtu);
  #line 2100 
  return;
}

#line 2103  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/enic_main.c"
static void enic_poll_controller(struct net_device *netdev)
{
  #line 2107 
  unsigned int i;
  #line 2107 
  unsigned int intr;
  #line 2105 
  struct enic *enic = netdev_priv(netdev);
  #line 2106 
  struct vnic_dev *vdev = enic->vdev;
  #line 2109 
  switch ((unsigned int)vnic_dev_get_intr_mode(vdev)) {
    #line 2110 
    case (unsigned int)3: 
                          #line 2110 
    ;
    #line 2111 
    i = 0U;
    #line 2111 
    while (enic->rq_count > i) {
      #line 2112 
      intr = enic_msix_rq_intr(enic,i);
      #line 2113 
      enic_isr_msix((int)enic->msix_entry[intr].vector,(void *)(& enic->napi[i]));
      #line 2111 
      i ++;
    }
    #line 2117 
    i = 0U;
    #line 2117 
    while (enic->wq_count > i) {
      {
        #line 2118 
        intr = enic_msix_wq_intr(enic,i);
        #line 2119 
        ;
        #line 2119 
        ;
        #line 2119 
        enic_isr_msix((int)enic->msix_entry[intr].vector,(void *)(& enic->napi[enic_cq_wq(enic,i)]));
      }
      #line 2117 
      i ++;
    }
    #line 2123 
    break;
    #line 2124 
    case (unsigned int)2: 
                          #line 2124 
    ;
    #line 2125 
    enic_isr_msi((int)(enic->pdev)->irq,(void *)enic);
    #line 2126 
    break;
    #line 2127 
    case (unsigned int)1: 
                          #line 2127 
    ;
    #line 2128 
    enic_isr_legacy((int)(enic->pdev)->irq,(void *)netdev);
    #line 2129 
    break;
    #line 2130 
    default: 
             #line 2130 
    ;
    #line 2131 
    break;
  }
  #line 2133 
  return;
}

#line 2136  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/enic_main.c"
static int enic_dev_wait(struct vnic_dev *vdev, int (*start)(struct vnic_dev *, int ), int (*finished)(struct vnic_dev *, int *), int arg)
{
  #line 2141 
  unsigned long time;
  #line 2142 
  int done;
  #line 2143 
  int err;
  #line 2145 
  if ((long)(((unsigned long)preempt_count() & 2096896UL) != 0UL) != 0L) {
    #line 2146 
    ldv_inline_asm();
    #line 2147 
    ldv_inline_asm();
    #line 2148 
    ldv_inline_asm();
    #line 2145 
    ;
  }
  #line 2147 
  err = (*start)(vdev,arg);
  #line 2148 
  if (err != 0) 
                #line 2149 
                return err;
  #line 2154 
  time = jiffies + 500UL;
  #line 2155 
  while (1) {
    #line 2157 
    err = (*finished)(vdev,& done);
    #line 2158 
    if (err != 0) 
                  #line 2159 
                  return err;
    #line 2161 
    if (done != 0) 
                   #line 2162 
                   return 0;
    #line 2164 
    schedule_timeout_uninterruptible(25L);
    {
      #line 2166 
      unsigned long __dummy;
      #line 2166 
      unsigned long __dummy2;
      }
    #line 2165 
    if (1 != 0) {
      {
        #line 2166 
        unsigned long __dummy_0;
        #line 2166 
        unsigned long __dummy2_0;
        }
      #line 2166 
      if (1 != 0) {
        #line 2166 
        if (! ((long)(jiffies - time) < 0L)) 
                                             #line 2155 
                                             break;
      }
      else 
           #line 2155 
           break;
    }
    else 
         #line 2155 
         break;
  }
  #line 2168 
  return -110;
}

#line 2171  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/enic_main.c"
static int enic_dev_open(struct enic *enic)
{
  #line 2173 
  int err;
  #line 2174 
  u32 flags = 2U;
  #line 2176 
  err = enic_dev_wait(enic->vdev,& vnic_dev_open,& vnic_dev_open_done,(int)flags);
  #line 2178 
  if (err != 0) {
    #line 2179 
    ;
    #line 2179 
    _dev_err(enic_get_dev(enic),(char *)"vNIC device open failed, err %d\n",err);
  }
  #line 2182 
  return err;
}

#line 2185  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/enic_main.c"
static int enic_dev_soft_reset(struct enic *enic)
{
  #line 2187 
  int err;
  #line 2189 
  err = enic_dev_wait(enic->vdev,& vnic_dev_soft_reset,& vnic_dev_soft_reset_done,0);
  #line 2191 
  if (err != 0) 
                #line 2192 
                netdev_err(enic->netdev,(char *)"vNIC soft reset failed, err %d\n",err);
  #line 2195 
  return err;
}

#line 2198  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/enic_main.c"
static int enic_dev_hang_reset(struct enic *enic)
{
  #line 2200 
  int err;
  #line 2202 
  err = enic_dev_wait(enic->vdev,& vnic_dev_hang_reset,& vnic_dev_hang_reset_done,0);
  #line 2204 
  if (err != 0) 
                #line 2205 
                netdev_err(enic->netdev,(char *)"vNIC hang reset failed, err %d\n",err);
  #line 2208 
  return err;
}

#line 2211  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/enic_main.c"
int __enic_set_rsskey(struct enic *enic)
{
  #line 2213 
  union vnic_rss_key *rss_key_buf_va;
  #line 2214 
  dma_addr_t rss_key_buf_pa;
  #line 2215 
  int i;
  #line 2215 
  int kidx;
  #line 2215 
  int bidx;
  #line 2215 
  int err;
  #line 2217 
  rss_key_buf_va = (union vnic_rss_key *)pci_alloc_consistent(enic->pdev,64UL,& rss_key_buf_pa);
  #line 2220 
  if (rss_key_buf_va == (union vnic_rss_key *)0) 
                                                 #line 2221 
                                                 return -12;
  #line 2223 
  i = 0;
  #line 2223 
  while (i <= 39) {
    #line 2224 
    kidx = i / 10;
    #line 2225 
    bidx = i % 10;
    #line 2226 
    rss_key_buf_va->key[kidx].b[bidx] = enic->rss_key[i];
    #line 2223 
    i ++;
  }
  #line 2228 
  cif_spin_lock_bh_devcmd_lock_of_enic_4(& enic->devcmd_lock);
  #line 2229 
  err = enic_set_rss_key(enic,rss_key_buf_pa,64ULL);
  #line 2232 
  cif_spin_unlock_bh_devcmd_lock_of_enic_4(& enic->devcmd_lock);
  #line 2234 
  pci_free_consistent(enic->pdev,64UL,(void *)rss_key_buf_va,rss_key_buf_pa);
  #line 2237 
  return err;
}

#line 2240  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/enic_main.c"
static int enic_set_rsskey(struct enic *enic)
{
  #line 2242 
  netdev_rss_key_fill((void *)(& enic->rss_key),40UL);
  #line 2244 
  return __enic_set_rsskey(enic);
}

#line 2247  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/enic_main.c"
static int enic_set_rsscpu(struct enic *enic, u8 rss_hash_bits)
{
  #line 2249 
  dma_addr_t rss_cpu_buf_pa;
  #line 2251 
  unsigned int i;
  #line 2252 
  int err;
  #line 2250 
  union vnic_rss_cpu *rss_cpu_buf_va = (union vnic_rss_cpu *)0;
  #line 2254 
  rss_cpu_buf_va = (union vnic_rss_cpu *)pci_alloc_consistent(enic->pdev,256UL,& rss_cpu_buf_pa);
  #line 2256 
  if (rss_cpu_buf_va == (union vnic_rss_cpu *)0) 
                                                 #line 2257 
                                                 return -12;
  #line 2259 
  i = 0U;
  #line 2259 
  while ((unsigned int)(1 << (int)rss_hash_bits) > i) {
    #line 2260 
    rss_cpu_buf_va->cpu[i / 4U].b[i & 3U] = (unsigned char)(i % enic->rq_count);
    #line 2259 
    i ++;
  }
  #line 2262 
  cif_spin_lock_bh_devcmd_lock_of_enic_4(& enic->devcmd_lock);
  #line 2263 
  err = enic_set_rss_cpu(enic,rss_cpu_buf_pa,256ULL);
  #line 2266 
  cif_spin_unlock_bh_devcmd_lock_of_enic_4(& enic->devcmd_lock);
  #line 2268 
  pci_free_consistent(enic->pdev,256UL,(void *)rss_cpu_buf_va,rss_cpu_buf_pa);
  #line 2271 
  return err;
}

#line 2274  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/enic_main.c"
static int enic_set_niccfg(struct enic *enic, u8 rss_default_cpu, u8 rss_hash_type, u8 rss_hash_bits, u8 rss_base_cpu, u8 rss_enable)
{
  #line 2279 
  int err;
  #line 2277 
  u8 tso_ipid_split_en = (unsigned char)0U;
  #line 2278 
  u8 ig_vlan_strip_en = (unsigned char)1U;
  #line 2284 
  cif_spin_lock_bh_devcmd_lock_of_enic_4(& enic->devcmd_lock);
  #line 2285 
  err = enic_set_nic_cfg(enic,(unsigned char)((int)rss_default_cpu),(unsigned char)((int)rss_hash_type),(unsigned char)((int)rss_hash_bits),(unsigned char)((int)rss_base_cpu),(unsigned char)((int)rss_enable),(unsigned char)0,(unsigned char)1);
  #line 2290 
  cif_spin_unlock_bh_devcmd_lock_of_enic_4(& enic->devcmd_lock);
  #line 2292 
  return err;
}

#line 2295  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/enic_main.c"
static int enic_set_rss_nic_cfg(struct enic *enic)
{
  #line 2301 
  u8 rss_hash_type;
  #line 2302 
  int res;
  #line 2297 
  struct device *dev = enic_get_dev(enic);
  #line 2298 
  u8 rss_default_cpu = (unsigned char)0U;
  #line 2299 
  u8 rss_hash_bits = (unsigned char)7U;
  #line 2300 
  u8 rss_base_cpu = (unsigned char)0U;
  #line 2303 
  u8 rss_enable = (unsigned char)(((int)(enic->config.flags >> 4) & 1 && enic->rq_count > 1U) != 0);
  #line 2305 
  cif_spin_lock_bh_devcmd_lock_of_enic_4(& enic->devcmd_lock);
  #line 2306 
  res = vnic_dev_capable_rss_hash_type(enic->vdev,& rss_hash_type);
  #line 2307 
  cif_spin_unlock_bh_devcmd_lock_of_enic_4(& enic->devcmd_lock);
  #line 2308 
  if (res != 0) 
                #line 2311 
                rss_hash_type = (unsigned char)30U;
  #line 2317 
  if ((unsigned int)rss_enable != 0U) {
    #line 2318 
    if (enic_set_rsskey(enic) == 0) {
      #line 2319 
      if (enic_set_rsscpu(enic,(unsigned char)7) != 0) {
        #line 2320 
        rss_enable = (unsigned char)0U;
        #line 2321 
        _dev_warn(dev,(char *)"RSS disabled, ");
      }
    }
    else {
      #line 2325 
      rss_enable = (unsigned char)0U;
      #line 2326 
      _dev_warn(dev,(char *)"RSS disabled, Failed to set RSS key.\n");
    }
  }
  #line 2330 
  return enic_set_niccfg(enic,(unsigned char)0,
                        (unsigned char)((int)rss_hash_type),(unsigned char)7,
                        (unsigned char)0,(unsigned char)((int)rss_enable));
}

#line 2334  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/enic_main.c"
static void enic_reset(struct work_struct *work)
{
  #line 2336 
  void *__mptr;
  #line 2336 
  __mptr = (void *)work;
  #line 2336 
  struct enic *enic = ((struct enic *)(__mptr + 18446744073709551312U));
  #line 2338 
  if (! netif_running(enic->netdev)) 
                                     #line 2339 
                                     return;
  #line 2341 
  rtnl_lock();
  #line 2343 
  cif_spin_lock_enic_api_lock_of_enic_0(& enic->enic_api_lock);
  #line 2344 
  enic_stop(enic->netdev);
  #line 2345 
  enic_dev_soft_reset(enic);
  #line 2346 
  enic_reset_addr_lists(enic);
  #line 2347 
  enic_init_vnic_resources(enic);
  #line 2348 
  enic_set_rss_nic_cfg(enic);
  #line 2349 
  enic_dev_set_ig_vlan_rewrite_mode(enic);
  #line 2350 
  enic_open(enic->netdev);
  #line 2351 
  cif_spin_unlock_enic_api_lock_of_enic_0(& enic->enic_api_lock);
  #line 2352 
  call_netdevice_notifiers(3UL,enic->netdev);
  #line 2354 
  rtnl_unlock();
  #line 2355 
  return;
}

#line 2357  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/enic_main.c"
static void enic_tx_hang_reset(struct work_struct *work)
{
  #line 2359 
  void *__mptr;
  #line 2359 
  __mptr = (void *)work;
  #line 2359 
  struct enic *enic = ((struct enic *)(__mptr + 18446744073709551232U));
  #line 2361 
  rtnl_lock();
  #line 2363 
  cif_spin_lock_enic_api_lock_of_enic_0(& enic->enic_api_lock);
  #line 2364 
  enic_dev_hang_notify(enic);
  #line 2365 
  enic_stop(enic->netdev);
  #line 2366 
  enic_dev_hang_reset(enic);
  #line 2367 
  enic_reset_addr_lists(enic);
  #line 2368 
  enic_init_vnic_resources(enic);
  #line 2369 
  enic_set_rss_nic_cfg(enic);
  #line 2370 
  enic_dev_set_ig_vlan_rewrite_mode(enic);
  #line 2371 
  enic_open(enic->netdev);
  #line 2372 
  cif_spin_unlock_enic_api_lock_of_enic_0(& enic->enic_api_lock);
  #line 2373 
  call_netdevice_notifiers(3UL,enic->netdev);
  #line 2375 
  rtnl_unlock();
  #line 2376 
  return;
}

#line 2378  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/enic_main.c"
static int enic_set_intr_mode(struct enic *enic)
{
  #line 2381 
  unsigned int tmp_1;
  #line 2380 
  unsigned int __UNIQUE_ID___x559;
  #line 2380 
  unsigned int tmp;
  #line 2381 
  unsigned int __UNIQUE_ID___x561;
  #line 2382 
  unsigned int i;
  {
    #line 2380 
    __UNIQUE_ID___x559 = enic->rq_count;
    #line 2380 
    unsigned int __UNIQUE_ID___y560 = 8U;
    #line 2380 
    if (__UNIQUE_ID___x559 < __UNIQUE_ID___y560) 
                                                 #line 2380 
                                                 tmp = __UNIQUE_ID___x559; else 
                                                                    #line 2380 
                                                                    tmp = __UNIQUE_ID___y560;
    }
  #line 2380 
  unsigned int n = tmp;
  {
    #line 2381 
    __UNIQUE_ID___x561 = enic->wq_count;
    #line 2381 
    unsigned int __UNIQUE_ID___y562 = 8U;
    #line 2381 
    if (__UNIQUE_ID___x561 < __UNIQUE_ID___y562) 
                                                 #line 2381 
                                                 tmp_1 = __UNIQUE_ID___x561; else 
                                                                    #line 2381 
                                                                    tmp_1 = __UNIQUE_ID___y562;
    }
  #line 2381 
  unsigned int m = tmp_1;
  #line 2394 
  if ((long)((n + m) + 2U > 18U) != 0L) {
    #line 2395 
    ldv_inline_asm();
    #line 2396 
    ldv_inline_asm();
    #line 2397 
    ldv_inline_asm();
    #line 2394 
    ;
  }
  #line 2395 
  i = 0U;
  #line 2395 
  while ((n + m) + 2U > i) {
    #line 2396 
    enic->msix_entry[i].entry = (unsigned short)i;
    #line 2395 
    i ++;
  }
  #line 2401 
  if ((((((int)(enic->config.flags >> 4) & 1 && (unsigned int)enic->config.intr_mode == 0U) && enic->rq_count >= n) && enic->wq_count >= m) && enic->cq_count >= n + m) && enic->intr_count >= (n + m) + 2U) {
    #line 2408 
    if (pci_enable_msix_range(enic->pdev,
                              (struct msix_entry *)(& enic->msix_entry),
                              (int)((n + m) + 2U),(int)((n + m) + 2U)) > 0) {
      #line 2411 
      enic->rq_count = n;
      #line 2412 
      enic->wq_count = m;
      #line 2413 
      enic->cq_count = n + m;
      #line 2414 
      enic->intr_count = (n + m) + 2U;
      #line 2416 
      vnic_dev_set_intr_mode(enic->vdev,(enum vnic_dev_intr_mode)VNIC_DEV_INTR_MODE_MSIX);
      #line 2419 
      return 0;
    }
  }
  #line 2423 
  if (((((unsigned int)enic->config.intr_mode == 0U && enic->rq_count != 0U) && enic->wq_count >= m) && enic->cq_count >= m + 1U) && enic->intr_count >= m + 3U) {
    #line 2428 
    if (pci_enable_msix_range(enic->pdev,
                              (struct msix_entry *)(& enic->msix_entry),
                              (int)(m + 3U),(int)(m + 3U)) > 0) {
      #line 2431 
      enic->rq_count = 1U;
      #line 2432 
      enic->wq_count = m;
      #line 2433 
      enic->cq_count = m + 1U;
      #line 2434 
      enic->intr_count = m + 3U;
      #line 2436 
      vnic_dev_set_intr_mode(enic->vdev,(enum vnic_dev_intr_mode)VNIC_DEV_INTR_MODE_MSIX);
      #line 2439 
      return 0;
    }
  }
  #line 2448 
  if (((((unsigned int)enic->config.intr_mode <= 1U && enic->rq_count != 0U) && enic->wq_count != 0U) && enic->cq_count > 1U) && enic->intr_count != 0U) {
    #line 2452 
    if (pci_enable_msi(enic->pdev) == 0) {
      #line 2455 
      enic->rq_count = 1U;
      #line 2456 
      enic->wq_count = 1U;
      #line 2457 
      enic->cq_count = 2U;
      #line 2458 
      enic->intr_count = 1U;
      #line 2460 
      vnic_dev_set_intr_mode(enic->vdev,(enum vnic_dev_intr_mode)VNIC_DEV_INTR_MODE_MSI);
      #line 2462 
      return 0;
    }
  }
  #line 2473 
  if (((((unsigned int)enic->config.intr_mode <= 2U && enic->rq_count != 0U) && enic->wq_count != 0U) && enic->cq_count > 1U) && enic->intr_count > 2U) {
    #line 2479 
    enic->rq_count = 1U;
    #line 2480 
    enic->wq_count = 1U;
    #line 2481 
    enic->cq_count = 2U;
    #line 2482 
    enic->intr_count = 3U;
    #line 2484 
    vnic_dev_set_intr_mode(enic->vdev,(enum vnic_dev_intr_mode)VNIC_DEV_INTR_MODE_INTX);
    #line 2486 
    return 0;
  }
  #line 2489 
  vnic_dev_set_intr_mode(enic->vdev,(enum vnic_dev_intr_mode)VNIC_DEV_INTR_MODE_UNKNOWN);
  #line 2491 
  return -22;
}

#line 2494  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/enic_main.c"
static void enic_clear_intr_mode(struct enic *enic)
{
  #line 2496 
  switch ((unsigned int)vnic_dev_get_intr_mode(enic->vdev)) {
    #line 2497 
    case (unsigned int)3: 
                          #line 2497 
    ;
    #line 2498 
    pci_disable_msix(enic->pdev);
    #line 2499 
    break;
    #line 2500 
    case (unsigned int)2: 
                          #line 2500 
    ;
    #line 2501 
    pci_disable_msi(enic->pdev);
    #line 2502 
    break;
    #line 2503 
    default: 
             #line 2503 
    ;
    #line 2504 
    break;
  }
  #line 2507 
  vnic_dev_set_intr_mode(enic->vdev,(enum vnic_dev_intr_mode)VNIC_DEV_INTR_MODE_UNKNOWN);
  #line 2508 
  return;
}

#line 2510  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/enic_main.c"
static struct net_device_ops enic_netdev_dynamic_ops = {.ndo_open = & enic_open, .ndo_stop = & enic_stop, .ndo_start_xmit = & enic_hard_start_xmit, .ndo_features_check = & enic_features_check, .ndo_set_rx_mode = & enic_set_rx_mode, .ndo_set_mac_address = & enic_set_mac_address_dynamic, .ndo_validate_addr = & eth_validate_addr, .ndo_change_mtu = & enic_change_mtu, .ndo_tx_timeout = & enic_tx_timeout, .ndo_get_stats64 = & enic_get_stats, .ndo_vlan_rx_add_vid = & enic_vlan_rx_add_vid, .ndo_vlan_rx_kill_vid = & enic_vlan_rx_kill_vid, .ndo_poll_controller = & enic_poll_controller, .ndo_set_vf_mac = & enic_set_vf_mac, .ndo_set_vf_port = & enic_set_vf_port, .ndo_get_vf_port = & enic_get_vf_port, .ndo_rx_flow_steer = & enic_rx_flow_steer, .ndo_udp_tunnel_add = & enic_udp_tunnel_add, .ndo_udp_tunnel_del = & enic_udp_tunnel_del};
#line 2536  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/enic_main.c"
static struct net_device_ops enic_netdev_ops = {.ndo_open = & enic_open, .ndo_stop = & enic_stop, .ndo_start_xmit = & enic_hard_start_xmit, .ndo_features_check = & enic_features_check, .ndo_set_rx_mode = & enic_set_rx_mode, .ndo_set_mac_address = & enic_set_mac_address, .ndo_validate_addr = & eth_validate_addr, .ndo_change_mtu = & enic_change_mtu, .ndo_tx_timeout = & enic_tx_timeout, .ndo_get_stats64 = & enic_get_stats, .ndo_vlan_rx_add_vid = & enic_vlan_rx_add_vid, .ndo_vlan_rx_kill_vid = & enic_vlan_rx_kill_vid, .ndo_poll_controller = & enic_poll_controller, .ndo_set_vf_mac = & enic_set_vf_mac, .ndo_set_vf_port = & enic_set_vf_port, .ndo_get_vf_port = & enic_get_vf_port, .ndo_rx_flow_steer = & enic_rx_flow_steer, .ndo_udp_tunnel_add = & enic_udp_tunnel_add, .ndo_udp_tunnel_del = & enic_udp_tunnel_del};
#line 2562  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/enic_main.c"
static void enic_dev_deinit(struct enic *enic)
{
  #line 2564 
  unsigned int i;
  #line 2566 
  i = 0U;
  #line 2566 
  while (enic->rq_count > i) {
    #line 2567 
    napi_hash_del(& enic->napi[i]);
    #line 2568 
    netif_napi_del(& enic->napi[i]);
    #line 2566 
    i ++;
  }
  #line 2570 
  if (vnic_dev_get_intr_mode(enic->vdev) == (unsigned int)VNIC_DEV_INTR_MODE_MSIX) {
    #line 2571 
    i = 0U;
    #line 2571 
    while (enic->wq_count > i) {
      #line 2572 
      ;
      #line 2572 
      netif_napi_del(& enic->napi[enic_cq_wq(enic,i)]);
      #line 2571 
      i ++;
    }
  }
  #line 2574 
  enic_free_vnic_resources(enic);
  #line 2575 
  enic_clear_intr_mode(enic);
  #line 2576 
  enic_free_affinity_hint(enic);
  #line 2577 
  return;
}

#line 2579  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/enic_main.c"
static void enic_kdump_kernel_config(struct enic *enic)
{
  #line 2581 
  if ((int)is_kdump_kernel() != 0) {
    #line 2587 
    unsigned short __UNIQUE_ID___x564;
    #line 2587 
    int tmp_0;
    #line 2582 
    _dev_info(enic_get_dev(enic),(char *)"Running from within kdump kernel. Using minimal resources\n");
    #line 2583 
    enic->rq_count = 1U;
    #line 2584 
    enic->wq_count = 1U;
    #line 2585 
    enic->config.rq_desc_count = 64U;
    #line 2586 
    enic->config.wq_desc_count = 64U;
    {
      #line 2587 
      __UNIQUE_ID___x564 = (unsigned short)1500U;
      #line 2587 
      unsigned short __UNIQUE_ID___y565 = enic->config.mtu;
      #line 2587 
      if ((int)__UNIQUE_ID___x564 < (int)__UNIQUE_ID___y565) 
                                                             #line 2587 
                                                             tmp_0 = (int)__UNIQUE_ID___x564; else 
                                                                    #line 2587 
                                                                    tmp_0 = (int)__UNIQUE_ID___y565;
      }
    #line 2587 
    enic->config.mtu = (unsigned short)tmp_0;
  }
  #line 2590 
  return;
}

#line 2591  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/enic_main.c"
static int enic_dev_init(struct enic *enic)
{
  #line 2595 
  unsigned int i;
  #line 2596 
  int err;
  #line 2593 
  struct device *dev = enic_get_dev(enic);
  #line 2594 
  struct net_device *netdev = enic->netdev;
  #line 2599 
  err = enic_dev_intr_coal_timer_info(enic);
  #line 2600 
  if (err != 0) {
    #line 2601 
    _dev_warn(dev,(char *)"Using default conversion factor for ");
    #line 2603 
    vnic_dev_intr_coal_timer_info_default(enic->vdev);
  }
  #line 2609 
  err = enic_get_vnic_config(enic);
  #line 2610 
  if (err != 0) {
    #line 2611 
    _dev_err(dev,(char *)"Get vNIC configuration failed, aborting\n");
    #line 2612 
    return err;
  }
  #line 2618 
  enic_get_res_counts(enic);
  #line 2622 
  enic_kdump_kernel_config(enic);
  #line 2628 
  err = enic_set_intr_mode(enic);
  #line 2629 
  if (err != 0) {
    #line 2630 
    _dev_err(dev,(char *)"Failed to set intr mode based on resource ");
    #line 2632 
    return err;
  }
  #line 2638 
  err = enic_alloc_vnic_resources(enic);
  #line 2639 
  if (err != 0) {
    #line 2640 
    _dev_err(dev,(char *)"Failed to alloc vNIC resources, aborting\n");
    #line 2641 
    goto err_out_free_vnic_resources;
  }
  #line 2644 
  enic_init_vnic_resources(enic);
  #line 2646 
  err = enic_set_rss_nic_cfg(enic);
  #line 2647 
  if (err != 0) {
    #line 2648 
    _dev_err(dev,(char *)"Failed to config nic, aborting\n");
    #line 2649 
    goto err_out_free_vnic_resources;
  }
  #line 2652 
  switch ((unsigned int)vnic_dev_get_intr_mode(enic->vdev)) {
    #line 2653 
    default: 
             #line 2653 
    ;
    #line 2654 
    netif_napi_add(netdev,& enic->napi[0],& enic_poll,64);
    #line 2655 
    break;
    #line 2656 
    case (unsigned int)3: 
                          #line 2656 
    ;
    #line 2657 
    i = 0U;
    #line 2657 
    while (enic->rq_count > i) {
      #line 2658 
      netif_napi_add(netdev,& enic->napi[i],& enic_poll_msix_rq,64);
      #line 2657 
      i ++;
    }
    #line 2661 
    i = 0U;
    #line 2661 
    while (enic->wq_count > i) {
      #line 2662 
      ;
      #line 2662 
      ;
      #line 2662 
      netif_napi_add(netdev,& enic->napi[enic_cq_wq(enic,i)],& enic_poll_msix_wq,64);
      #line 2661 
      i ++;
    }
    #line 2664 
    break;
  }
  #line 2667 
  return 0;
  #line 2669 
  err_out_free_vnic_resources: 
                               #line 2669 
  ;
  #line 2670 
  enic_free_affinity_hint(enic);
  #line 2671 
  enic_clear_intr_mode(enic);
  #line 2672 
  enic_free_vnic_resources(enic);
  #line 2674 
  return err;
}

#line 2677  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/enic_main.c"
static void enic_iounmap(struct enic *enic)
{
  #line 2679 
  unsigned int i;
  #line 2681 
  i = 0U;
  #line 2681 
  while (i <= 5U) {
    #line 2682 
    if (enic->bar[i].vaddr != (void *)0) 
                                         #line 2683 
                                         iounmap(enic->bar[i].vaddr);
    #line 2681 
    i ++;
  }
  #line 2684 
  return;
}

#line 2686  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/enic_main.c"
static int enic_probe(struct pci_dev *pdev, struct pci_device_id *ent)
{
  #line 2689 
  struct net_device *netdev;
  #line 2690 
  struct enic *enic;
  #line 2692 
  unsigned int i;
  #line 2693 
  int err;
  #line 2688 
  struct device *dev = & pdev->dev;
  #line 2691 
  int using_dac = 0;
  #line 2695 
  int pos = 0;
  #line 2697 
  int num_pps = 1;
  #line 2703 
  netdev = cif_alloc_etherdev_mqs(30144,8U,8U);
  #line 2705 
  if (netdev == (struct net_device *)0) 
                                        #line 2706 
                                        return -12;
  #line 2708 
  pci_set_drvdata(pdev,(void *)netdev);
  #line 2710 
  netdev->dev.parent = & pdev->dev;
  #line 2712 
  enic = (struct enic *)netdev_priv(netdev);
  #line 2713 
  enic->netdev = netdev;
  #line 2714 
  enic->pdev = pdev;
  #line 2719 
  err = pci_enable_device_mem(pdev);
  #line 2720 
  if (err != 0) {
    #line 2721 
    _dev_err(dev,(char *)"Cannot enable PCI device, aborting\n");
    #line 2722 
    goto err_out_free_netdev;
  }
  #line 2725 
  err = pci_request_regions(pdev,(char *)"enic");
  #line 2726 
  if (err != 0) {
    #line 2727 
    _dev_err(dev,(char *)"Cannot request PCI regions, aborting\n");
    #line 2728 
    goto err_out_disable_device;
  }
  #line 2731 
  pci_set_master(pdev);
  #line 2738 
  err = pci_set_dma_mask(pdev,140737488355327ULL);
  #line 2739 
  if (err != 0) {
    #line 2740 
    err = pci_set_dma_mask(pdev,4294967295ULL);
    #line 2741 
    if (err != 0) {
      #line 2742 
      _dev_err(dev,(char *)"No usable DMA configuration, aborting\n");
      #line 2743 
      goto err_out_release_regions;
    }
    #line 2745 
    err = pci_set_consistent_dma_mask(pdev,4294967295ULL);
    #line 2746 
    if (err != 0) {
      #line 2747 
      _dev_err(dev,(char *)"Unable to obtain %u-bit DMA ",32);
      #line 2749 
      goto err_out_release_regions;
    }
  }
  else {
    #line 2752 
    err = pci_set_consistent_dma_mask(pdev,140737488355327ULL);
    #line 2753 
    if (err != 0) {
      #line 2754 
      _dev_err(dev,(char *)"Unable to obtain %u-bit DMA ",47);
      #line 2756 
      goto err_out_release_regions;
    }
    #line 2758 
    using_dac = 1;
  }
  #line 2764 
  i = 0U;
  #line 2764 
  while (i <= 5U) {
    #line 2765 
    if ((pdev->resource[i].flags & 512UL) == 0UL) 
                                                  #line 2766 
                                                  goto __Cont;
    #line 2767 
    if (pdev->resource[i].start != 0ULL || pdev->resource[i].end != pdev->resource[i].start) 
      #line 2767 
      enic->bar[i].len = (unsigned long)((pdev->resource[i].end - pdev->resource[i].start) + 1ULL); else 
                                                                    #line 2767 
                                                                    enic->bar[i].len = 0UL;
    #line 2768 
    enic->bar[i].vaddr = pci_iomap(pdev,(int)i,enic->bar[i].len);
    #line 2769 
    if (enic->bar[i].vaddr == (void *)0) {
      #line 2770 
      _dev_err(dev,(char *)"Cannot memory-map BAR %d, aborting\n",i);
      #line 2771 
      err = -19;
      #line 2772 
      goto err_out_iounmap;
    }
    #line 2774 
    enic->bar[i].bus_addr = pdev->resource[i].start;
    #line 2764 
    __Cont: 
            #line 2764 
    i ++;
  }
  #line 2780 
  enic->vdev = vnic_dev_register((struct vnic_dev *)0,(void *)enic,pdev,(struct vnic_dev_bar *)(& enic->bar),6U);
  #line 2782 
  if (enic->vdev == (struct vnic_dev *)0) {
    #line 2783 
    _dev_err(dev,(char *)"vNIC registration failed, aborting\n");
    #line 2784 
    err = -19;
    #line 2785 
    goto err_out_iounmap;
  }
  #line 2788 
  err = vnic_devcmd_init(enic->vdev);
  #line 2790 
  if (err != 0) 
                #line 2791 
                goto err_out_vnic_unregister;
  #line 2795 
  pos = pci_find_ext_capability(pdev,16);
  #line 2796 
  if (pos != 0) {
    #line 2797 
    pci_read_config_word(pdev,pos + 14,& enic->num_vfs);
    #line 2799 
    if ((unsigned int)enic->num_vfs != 0U) {
      #line 2800 
      err = pci_enable_sriov(pdev,(int)enic->num_vfs);
      #line 2801 
      if (err != 0) {
        #line 2802 
        _dev_err(dev,(char *)"SRIOV enable failed, aborting.",err);
        #line 2805 
        goto err_out_vnic_unregister;
      }
      #line 2807 
      enic->priv_flags |= 1U;
      #line 2808 
      num_pps = (int)enic->num_vfs;
    }
  }
  #line 2814 
  enic->pp = (struct enic_port_profile *)kcalloc((unsigned long)num_pps,92UL,3264U);
  #line 2815 
  if (enic->pp == (struct enic_port_profile *)0) {
    #line 2816 
    err = -12;
    #line 2817 
    goto err_out_disable_sriov_pp;
  }
  #line 2823 
  err = enic_dev_open(enic);
  #line 2824 
  if (err != 0) {
    #line 2825 
    _dev_err(dev,(char *)"vNIC dev open failed, aborting\n");
    #line 2826 
    goto err_out_disable_sriov;
  }
  #line 2832 
  spinlock_check(& enic->devcmd_lock);
  {
    #line 2832 
    struct lock_class_key __key;
    #line 2832 
    __raw_spin_lock_init(& enic->devcmd_lock.__anonCompField_spinlock_25.rlock,(char *)"&(&enic->devcmd_lock)->rlock",& __key);
  }
  #line 2833 
  spinlock_check(& enic->enic_api_lock);
  {
    #line 2833 
    struct lock_class_key __key_0;
    #line 2833 
    __raw_spin_lock_init(& enic->enic_api_lock.__anonCompField_spinlock_25.rlock,(char *)"&(&enic->enic_api_lock)->rlock",& __key_0);
  }
  #line 2839 
  err = enic_dev_set_ig_vlan_rewrite_mode(enic);
  #line 2840 
  if (err != 0) {
    #line 2841 
    _dev_err(dev,(char *)"Failed to set ingress vlan rewrite mode, aborting.\n");
    #line 2843 
    goto err_out_dev_close;
  }
  #line 2854 
  netif_carrier_off(netdev);
  #line 2861 
  if (enic_is_dynamic(enic) == 0) {
    #line 2862 
    err = vnic_dev_init(enic->vdev,0);
    #line 2863 
    if (err != 0) {
      #line 2864 
      _dev_err(dev,(char *)"vNIC dev init failed, aborting\n");
      #line 2865 
      goto err_out_dev_close;
    }
  }
  #line 2869 
  err = enic_dev_init(enic);
  #line 2870 
  if (err != 0) {
    #line 2871 
    _dev_err(dev,(char *)"Device initialization failed, aborting\n");
    #line 2872 
    goto err_out_dev_close;
  }
  #line 2875 
  netif_set_real_num_tx_queues(netdev,enic->wq_count);
  #line 2876 
  netif_set_real_num_rx_queues(netdev,enic->rq_count);
  {
    #line 2881 
    struct lock_class_key __key_1;
    #line 2881 
    init_timer_key(& enic->notify_timer,& enic_notify_timer,0U,(char *)"(&enic->notify_timer)",& __key_1);
  }
  #line 2883 
  enic_rfs_flw_tbl_init(enic);
  #line 2884 
  enic_set_rx_coal_setting(enic);
  {
    #line 2885 
    struct lock_class_key __key_2;
    #line 2885 
    __init_work(& enic->reset,0);
    #line 2885 
    atomic_long_t __constr_expr_44 = {.counter = 137438953408LL};
    #line 2885 
    enic->reset.data = __constr_expr_44;
    #line 2885 
    lockdep_init_map(& enic->reset.lockdep_map,(char *)"(work_completion)",& __key_2,0);
    #line 2885 
    INIT_LIST_HEAD(& enic->reset.entry);
    #line 2885 
    enic->reset.func = & enic_reset;
  }
  {
    #line 2886 
    struct lock_class_key __key_3;
    #line 2886 
    __init_work(& enic->tx_hang_reset,0);
    #line 2886 
    atomic_long_t __constr_expr_45 = {.counter = 137438953408LL};
    #line 2886 
    enic->tx_hang_reset.data = __constr_expr_45;
    #line 2886 
    lockdep_init_map(& enic->tx_hang_reset.lockdep_map,(char *)"(work_completion)",& __key_3,0);
    #line 2886 
    INIT_LIST_HEAD(& enic->tx_hang_reset.entry);
    #line 2886 
    enic->tx_hang_reset.func = & enic_tx_hang_reset;
  }
  {
    #line 2887 
    struct lock_class_key __key_4;
    #line 2887 
    __init_work(& enic->change_mtu_work,0);
    #line 2887 
    atomic_long_t __constr_expr_46 = {.counter = 137438953408LL};
    #line 2887 
    enic->change_mtu_work.data = __constr_expr_46;
    #line 2887 
    lockdep_init_map(& enic->change_mtu_work.lockdep_map,(char *)"(work_completion)",& __key_4,0);
    #line 2887 
    INIT_LIST_HEAD(& enic->change_mtu_work.entry);
    #line 2887 
    enic->change_mtu_work.func = & enic_change_mtu_work;
  }
  #line 2889 
  i = 0U;
  #line 2889 
  while (enic->wq_count > i) {
    #line 2890 
    spinlock_check(& enic->wq_lock[i]);
    {
      #line 2890 
      struct lock_class_key __key_5;
      #line 2890 
      __raw_spin_lock_init(& enic->wq_lock[i].__anonCompField_spinlock_25.rlock,(char *)"&(&enic->wq_lock[i])->rlock",& __key_5);
    }
    #line 2889 
    i ++;
  }
  #line 2895 
  enic->port_mtu = (unsigned int)enic->config.mtu;
  #line 2897 
  err = enic_set_mac_addr(netdev,(char *)(& enic->mac_addr));
  #line 2898 
  if (err != 0) {
    #line 2899 
    _dev_err(dev,(char *)"Invalid MAC address, aborting\n");
    #line 2900 
    goto err_out_dev_deinit;
  }
  #line 2903 
  enic->tx_coalesce_usecs = enic->config.intr_timer_usec;
  #line 2907 
  enic->rx_coalesce_usecs = enic->tx_coalesce_usecs;
  #line 2909 
  if (enic_is_dynamic(enic) != 0) 
                                  #line 2909 
                                  goto _LOR;
  else {
    #line 2909 
    if (enic_is_sriov_vf(enic) != 0) 
                                     #line 2909 
                                     _LOR: 
                                           #line 2910 
                                           netdev->netdev_ops = & enic_netdev_dynamic_ops; else 
                                                                    #line 2912 
                                                                    netdev->netdev_ops = & enic_netdev_ops;
  }
  #line 2914 
  netdev->watchdog_timeo = 500;
  #line 2915 
  enic_set_ethtool_ops(netdev);
  #line 2917 
  netdev->features |= 384ULL;
  #line 2918 
  if ((int)(enic->config.flags >> 11) & 1) {
    #line 2919 
    netdev->features &= 18446744073709551487ULL;
    #line 2920 
    enic->loop_enable = (unsigned short)1U;
    #line 2921 
    enic->loop_tag = enic->config.loop_tag;
    #line 2922 
    _dev_info(dev,(char *)"loopback tag=0x%04x\n",(int)enic->loop_tag);
  }
  #line 2924 
  if ((int)(enic->config.flags >> 3) & 1) 
                                          #line 2925 
                                          netdev->hw_features |= 9ULL;
  #line 2926 
  if ((int)enic->config.flags & 1) 
                                   #line 2927 
                                   netdev->hw_features |= 1376256ULL;
  #line 2929 
  if ((int)(enic->config.flags >> 4) & 1) 
                                          #line 2930 
                                          netdev->hw_features |= 274877906944ULL;
  #line 2931 
  if ((int)(enic->config.flags >> 2) & 1) 
                                          #line 2932 
                                          netdev->hw_features |= 549755813888ULL;
  #line 2933 
  if ((int)(enic->config.flags >> 16) & 1) {
    #line 2934 
    u64 patch_level;
    #line 2935 
    u64 a1 = 0ULL;
    #line 2937 
    netdev->hw_enc_features |= 549958516744ULL;
    #line 2944 
    netdev->hw_features |= netdev->hw_enc_features;
    #line 2956 
    err = vnic_dev_get_supported_feature_ver(enic->vdev,(unsigned char)0,& patch_level,& a1);
    #line 2959 
    if (err != 0) 
                  #line 2960 
                  patch_level = 0ULL;
    #line 2961 
    enic->vxlan.flags = (unsigned char)a1;
    #line 2964 
    patch_level &= 5ULL;
    #line 2965 
    patch_level = (unsigned long long)fls((unsigned int)patch_level);
    #line 2966 
    if (patch_level != 0ULL) 
                             #line 2966 
                             patch_level += 18446744073709551615ULL; else 
                                                                    #line 2966 
                                                                    patch_level = 0ULL;
    #line 2967 
    enic->vxlan.patch_level = (unsigned char)patch_level;
  }
  #line 2970 
  netdev->features |= netdev->hw_features;
  #line 2971 
  netdev->vlan_features |= netdev->features;
  #line 2974 
  netdev->hw_features |= 137438953472ULL;
  #line 2977 
  if (using_dac != 0) 
                      #line 2978 
                      netdev->features |= 32ULL;
  #line 2980 
  netdev->priv_flags |= 4096U;
  #line 2983 
  netdev->min_mtu = 68U;
  #line 2984 
  netdev->max_mtu = 9000U;
  #line 2985 
  netdev->mtu = enic->port_mtu;
  #line 2987 
  err = cif_register_netdev(netdev);
  #line 2988 
  if (err != 0) {
    #line 2989 
    _dev_err(dev,(char *)"Cannot register net device, aborting\n");
    #line 2990 
    goto err_out_dev_deinit;
  }
  #line 2992 
  enic->rx_copybreak = 256U;
  #line 2994 
  return 0;
  #line 2996 
  err_out_dev_deinit: 
                      #line 2996 
  ;
  #line 2997 
  enic_dev_deinit(enic);
  #line 2998 
  err_out_dev_close: 
                     #line 2998 
  ;
  #line 2999 
  vnic_dev_close(enic->vdev);
  #line 3000 
  err_out_disable_sriov: 
                         #line 3000 
  ;
  #line 3001 
  kfree((void *)enic->pp);
  #line 3002 
  err_out_disable_sriov_pp: 
                            #line 3002 
  ;
  #line 3004 
  if (enic_sriov_enabled(enic) != 0) {
    #line 3005 
    pci_disable_sriov(pdev);
    #line 3006 
    enic->priv_flags &= 4294967294U;
  }
  #line 3009 
  err_out_vnic_unregister: 
                           #line 3009 
  ;
  #line 3010 
  vnic_dev_unregister(enic->vdev);
  #line 3011 
  err_out_iounmap: 
                   #line 3011 
  ;
  #line 3012 
  enic_iounmap(enic);
  #line 3013 
  err_out_release_regions: 
                           #line 3013 
  ;
  #line 3014 
  pci_release_regions(pdev);
  #line 3015 
  err_out_disable_device: 
                          #line 3015 
  ;
  #line 3016 
  pci_disable_device(pdev);
  #line 3017 
  err_out_free_netdev: 
                       #line 3017 
  ;
  #line 3018 
  cif_free_netdev(netdev);
  #line 3020 
  return err;
}

#line 3023  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/enic_main.c"
static void enic_remove(struct pci_dev *pdev)
{
  #line 3025 
  struct net_device *netdev = pci_get_drvdata(pdev);
  #line 3027 
  if (netdev != (struct net_device *)0) {
    #line 3028 
    struct enic *enic = netdev_priv(netdev);
    #line 3030 
    cancel_work_sync(& enic->reset);
    #line 3031 
    cancel_work_sync(& enic->change_mtu_work);
    #line 3032 
    cif_unregister_netdev(netdev);
    #line 3033 
    enic_dev_deinit(enic);
    #line 3034 
    vnic_dev_close(enic->vdev);
    #line 3036 
    if (enic_sriov_enabled(enic) != 0) {
      #line 3037 
      pci_disable_sriov(pdev);
      #line 3038 
      enic->priv_flags &= 4294967294U;
    }
    #line 3041 
    kfree((void *)enic->pp);
    #line 3042 
    vnic_dev_unregister(enic->vdev);
    #line 3043 
    enic_iounmap(enic);
    #line 3044 
    pci_release_regions(pdev);
    #line 3045 
    pci_disable_device(pdev);
    #line 3046 
    cif_free_netdev(netdev);
  }
  #line 3048 
  return;
}

#line 3050  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/enic_main.c"
static struct pci_driver enic_driver = {.name = (char *)"enic", .id_table = (struct pci_device_id *)(& enic_id_table), .probe = & enic_probe, .remove = & enic_remove};
#line 3057  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/enic_main.c"
static int enic_init_module(void)
{
  #line 3059 
  printk((char *)"\001",(char *)"Cisco VIC Ethernet NIC Driver",(char *)"2.3.0.53");
  #line 3061 
  return cif___pci_register_driver(& enic_driver,& __this_module,(char *)"enic");
}

#line 3064  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cisco/enic/enic_main.c"
static void enic_cleanup_module(void)
{
  #line 3066 
  cif_pci_unregister_driver(& enic_driver);
  #line 3067 
  return;
}

#line 93  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cisco/enic/enic.ko/concurrency safety/0/concurrency safety/weaver/enic_main.i.aux"
struct pci_driver *emg_alias_enic_driver = & enic_driver;
#line 94  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cisco/enic/enic.ko/concurrency safety/0/concurrency safety/weaver/enic_main.i.aux"
struct pci_device_id (*emg_alias_enic_id_table)[4U] = & enic_id_table;
#line 95  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cisco/enic/enic.ko/concurrency safety/0/concurrency safety/weaver/enic_main.i.aux"
int (*emg_alias_eth_validate_addr)(struct net_device *) = & eth_validate_addr;
#line 98 
#line 98 
int emg___pci_register_driver(struct pci_driver *arg0, struct module *arg1, char *arg2);
#line 99 
#line 99 
struct net_device *emg_alloc_etherdev_mqs(int arg0, unsigned int arg1, unsigned int arg2);
#line 101 
#line 101 
void *emg_free_irq(unsigned int arg0, void *arg1);
#line 102 
#line 102 
void emg_free_netdev(struct net_device *arg0);
#line 104 
#line 104 
void emg_pci_unregister_driver(struct pci_driver *arg0);
#line 105 
#line 105 
int emg_register_netdev(struct net_device *arg0);
#line 106 
#line 106 
int emg_request_irq(unsigned int arg0, enum irqreturn (*arg1)(int , void *), unsigned long arg2, char *arg3, void *arg4);
#line 107 
#line 107 
_Bool emg_schedule_work(struct work_struct *arg0);
#line 108 
#line 108 
void emg_unregister_netdev(struct net_device *arg0);
#line 112  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cisco/enic/enic.ko/concurrency safety/0/concurrency safety/weaver/enic_main.i.aux"
int emg_wrapper_enic_change_mtu(struct net_device *arg0, int arg1)
{
  #line 113 
  return enic_change_mtu(arg0,arg1);
}

#line 117  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cisco/enic/enic.ko/concurrency safety/0/concurrency safety/weaver/enic_main.i.aux"
unsigned long long emg_wrapper_enic_features_check(struct sk_buff *arg0, struct net_device *arg1, unsigned long long arg2)
{
  #line 118 
  return enic_features_check(arg0,arg1,arg2);
}

#line 122  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cisco/enic/enic.ko/concurrency safety/0/concurrency safety/weaver/enic_main.i.aux"
void emg_wrapper_enic_get_stats(struct net_device *arg0, struct rtnl_link_stats64 *arg1)
{
  #line 123 
  enic_get_stats(arg0,arg1);
  #line 124 
  return;
}

#line 127  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cisco/enic/enic.ko/concurrency safety/0/concurrency safety/weaver/enic_main.i.aux"
int emg_wrapper_enic_get_vf_port(struct net_device *arg0, int arg1, struct sk_buff *arg2)
{
  #line 128 
  return enic_get_vf_port(arg0,arg1,arg2);
}

#line 132  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cisco/enic/enic.ko/concurrency safety/0/concurrency safety/weaver/enic_main.i.aux"
enum netdev_tx emg_wrapper_enic_hard_start_xmit(struct sk_buff *arg0, struct net_device *arg1)
{
  #line 133 
  return enic_hard_start_xmit(arg0,arg1);
}

#line 137  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cisco/enic/enic.ko/concurrency safety/0/concurrency safety/weaver/enic_main.i.aux"
enum irqreturn emg_wrapper_enic_isr_legacy(int arg0, void *arg1)
{
  #line 138 
  return enic_isr_legacy(arg0,arg1);
}

#line 142  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cisco/enic/enic.ko/concurrency safety/0/concurrency safety/weaver/enic_main.i.aux"
enum irqreturn emg_wrapper_enic_isr_msi(int arg0, void *arg1)
{
  #line 143 
  return enic_isr_msi(arg0,arg1);
}

#line 147  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cisco/enic/enic.ko/concurrency safety/0/concurrency safety/weaver/enic_main.i.aux"
int emg_wrapper_enic_open(struct net_device *arg0)
{
  #line 148 
  return enic_open(arg0);
}

#line 152  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cisco/enic/enic.ko/concurrency safety/0/concurrency safety/weaver/enic_main.i.aux"
void emg_wrapper_enic_poll_controller(struct net_device *arg0)
{
  #line 153 
  enic_poll_controller(arg0);
  #line 154 
  return;
}

#line 157  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cisco/enic/enic.ko/concurrency safety/0/concurrency safety/weaver/enic_main.i.aux"
int emg_wrapper_enic_probe(struct pci_dev *arg0, struct pci_device_id *arg1)
{
  #line 158 
  return enic_probe(arg0,arg1);
}

#line 162  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cisco/enic/enic.ko/concurrency safety/0/concurrency safety/weaver/enic_main.i.aux"
void emg_wrapper_enic_remove(struct pci_dev *arg0)
{
  #line 163 
  enic_remove(arg0);
  #line 164 
  return;
}

#line 167  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cisco/enic/enic.ko/concurrency safety/0/concurrency safety/weaver/enic_main.i.aux"
int emg_wrapper_enic_set_mac_address(struct net_device *arg0, void *arg1)
{
  #line 168 
  return enic_set_mac_address(arg0,arg1);
}

#line 172  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cisco/enic/enic.ko/concurrency safety/0/concurrency safety/weaver/enic_main.i.aux"
int emg_wrapper_enic_set_mac_address_dynamic(struct net_device *arg0, void *arg1)
{
  #line 173 
  return enic_set_mac_address_dynamic(arg0,arg1);
}

#line 177  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cisco/enic/enic.ko/concurrency safety/0/concurrency safety/weaver/enic_main.i.aux"
void emg_wrapper_enic_set_rx_mode(struct net_device *arg0)
{
  #line 178 
  enic_set_rx_mode(arg0);
  #line 179 
  return;
}

#line 182  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cisco/enic/enic.ko/concurrency safety/0/concurrency safety/weaver/enic_main.i.aux"
int emg_wrapper_enic_set_vf_mac(struct net_device *arg0, int arg1, unsigned char *arg2)
{
  #line 183 
  return enic_set_vf_mac(arg0,arg1,arg2);
}

#line 187  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cisco/enic/enic.ko/concurrency safety/0/concurrency safety/weaver/enic_main.i.aux"
int emg_wrapper_enic_set_vf_port(struct net_device *arg0, int arg1, struct nlattr **arg2)
{
  #line 188 
  return enic_set_vf_port(arg0,arg1,arg2);
}

#line 192  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cisco/enic/enic.ko/concurrency safety/0/concurrency safety/weaver/enic_main.i.aux"
int emg_wrapper_enic_stop(struct net_device *arg0)
{
  #line 193 
  return enic_stop(arg0);
}

#line 197  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cisco/enic/enic.ko/concurrency safety/0/concurrency safety/weaver/enic_main.i.aux"
void emg_wrapper_enic_tx_timeout(struct net_device *arg0)
{
  #line 198 
  enic_tx_timeout(arg0);
  #line 199 
  return;
}

#line 202  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cisco/enic/enic.ko/concurrency safety/0/concurrency safety/weaver/enic_main.i.aux"
void emg_wrapper_enic_udp_tunnel_add(struct net_device *arg0, struct udp_tunnel_info *arg1)
{
  #line 203 
  enic_udp_tunnel_add(arg0,arg1);
  #line 204 
  return;
}

#line 207  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cisco/enic/enic.ko/concurrency safety/0/concurrency safety/weaver/enic_main.i.aux"
void emg_wrapper_enic_udp_tunnel_del(struct net_device *arg0, struct udp_tunnel_info *arg1)
{
  #line 208 
  enic_udp_tunnel_del(arg0,arg1);
  #line 209 
  return;
}

#line 212  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cisco/enic/enic.ko/concurrency safety/0/concurrency safety/weaver/enic_main.i.aux"
void emg_enic_cleanup_module(void)
{
  #line 213 
  enic_cleanup_module();
  #line 214 
  return;
}

#line 216  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cisco/enic/enic.ko/concurrency safety/0/concurrency safety/weaver/enic_main.i.aux"
int emg_enic_init_module(void)
{
  #line 217 
  return enic_init_module();
}

#line 235  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cisco/enic/enic.ko/concurrency safety/0/concurrency safety/weaver/enic_main.i.aux"
static void cif_set_bit(long nr, unsigned long *addr)
{
  #line 238 
  ldv_set_bit(nr,addr);
  #line 239 
  return;
}

#line 242  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cisco/enic/enic.ko/concurrency safety/0/concurrency safety/weaver/enic_main.i.aux"
static void cif_clear_bit(long nr, unsigned long *addr)
{
  #line 245 
  ldv_clear_bit(nr,addr);
  #line 246 
  return;
}

#line 249  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cisco/enic/enic.ko/concurrency safety/0/concurrency safety/weaver/enic_main.i.aux"
static void INIT_LIST_HEAD(struct list_head *list)
{
  #line 252 
  ldv_init_list_head(list);
  #line 253 
  return;
}

#line 270  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cisco/enic/enic.ko/concurrency safety/0/concurrency safety/weaver/enic_main.i.aux"
static unsigned long cif_find_first_bit(unsigned long *addr, unsigned long size)
{
  #line 273 
  return ldv_find_first_bit(addr,size);
}

#line 571  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cisco/enic/enic.ko/concurrency safety/0/concurrency safety/weaver/enic_main.i.aux"
static void *kcalloc(size_t n, size_t size, gfp_t flags)
{
  #line 574 
  return ldv_kcalloc(n,size,flags);
}

#line 653  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cisco/enic/enic.ko/concurrency safety/0/concurrency safety/weaver/enic_main.i.aux"
static void cif_spin_lock__xmit_lock_of_netdev_queue(spinlock_t *lock)
{
  #line 656 
  ldv_spin_model_lock((char *)"_xmit_lock_of_netdev_queue");
  #line 658 
  spin_lock_0(lock);
  #line 659 
  return;
}

#line 693  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cisco/enic/enic.ko/concurrency safety/0/concurrency safety/weaver/enic_main.i.aux"
static void cif_spin_unlock__xmit_lock_of_netdev_queue(spinlock_t *lock)
{
  #line 696 
  ldv_spin_model_unlock((char *)"_xmit_lock_of_netdev_queue");
  #line 698 
  spin_unlock_0(lock);
  #line 699 
  return;
}

#line 799  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cisco/enic/enic.ko/concurrency safety/0/concurrency safety/weaver/enic_main.i.aux"
static bool cif_schedule_work(struct work_struct *work)
{
  #line 803 
  return emg_schedule_work(work);
}

#line 921  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cisco/enic/enic.ko/concurrency safety/0/concurrency safety/weaver/enic_main.i.aux"
static int cif_mod_timer_0(struct timer_list *timer, unsigned long expires)
{
  #line 925 
  return emg_mod_timer(timer,expires);
}

#line 929  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cisco/enic/enic.ko/concurrency safety/0/concurrency safety/weaver/enic_main.i.aux"
static int cif_del_timer_sync_0(struct timer_list *timer)
{
  #line 933 
  return emg_del_timer_sync(timer);
}

#line 937  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cisco/enic/enic.ko/concurrency safety/0/concurrency safety/weaver/enic_main.i.aux"
static void cif_spin_lock_bh_devcmd_lock_of_enic_4(spinlock_t *lock)
{
  #line 940 
  ldv_spin_model_lock((char *)"devcmd_lock_of_enic");
  #line 942 
  spin_lock_bh_4(lock);
  #line 943 
  return;
}

#line 946  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cisco/enic/enic.ko/concurrency safety/0/concurrency safety/weaver/enic_main.i.aux"
static void cif_spin_unlock_bh_devcmd_lock_of_enic_4(spinlock_t *lock)
{
  #line 949 
  ldv_spin_model_unlock((char *)"devcmd_lock_of_enic");
  #line 951 
  spin_unlock_bh_4(lock);
  #line 952 
  return;
}

#line 955  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cisco/enic/enic.ko/concurrency safety/0/concurrency safety/weaver/enic_main.i.aux"
static void cif_spin_lock_NOT_ARG_SIGN(spinlock_t *lock)
{
  #line 958 
  ldv_spin_model_lock((char *)"NOT_ARG_SIGN");
  #line 960 
  spin_lock_0(lock);
  #line 961 
  return;
}

#line 964  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cisco/enic/enic.ko/concurrency safety/0/concurrency safety/weaver/enic_main.i.aux"
static void cif_spin_unlock_NOT_ARG_SIGN(spinlock_t *lock)
{
  #line 967 
  ldv_spin_model_unlock((char *)"NOT_ARG_SIGN");
  #line 969 
  spin_unlock_0(lock);
  #line 970 
  return;
}

#line 973  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cisco/enic/enic.ko/concurrency safety/0/concurrency safety/weaver/enic_main.i.aux"
static void *cif_free_irq(unsigned int ldv_func_arg1, void *ldv_func_arg2)
{
  #line 977 
  return emg_free_irq(ldv_func_arg1,ldv_func_arg2);
}

#line 981  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cisco/enic/enic.ko/concurrency safety/0/concurrency safety/weaver/enic_main.i.aux"
static int cif_request_irq(unsigned int irq, irqreturn_t (*handler)(int , void *), unsigned long flags, char *name, void *dev)
{
  #line 985 
  return emg_request_irq(irq,handler,flags,name,dev);
}

#line 989  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cisco/enic/enic.ko/concurrency safety/0/concurrency safety/weaver/enic_main.i.aux"
static void cif_spin_lock_enic_api_lock_of_enic_0(spinlock_t *lock)
{
  #line 992 
  ldv_spin_model_lock((char *)"enic_api_lock_of_enic");
  #line 994 
  spin_lock_0(lock);
  #line 995 
  return;
}

#line 998  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cisco/enic/enic.ko/concurrency safety/0/concurrency safety/weaver/enic_main.i.aux"
static void cif_spin_unlock_enic_api_lock_of_enic_0(spinlock_t *lock)
{
  #line 1001 
  ldv_spin_model_unlock((char *)"enic_api_lock_of_enic");
  #line 1003 
  spin_unlock_0(lock);
  #line 1004 
  return;
}

#line 1007  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cisco/enic/enic.ko/concurrency safety/0/concurrency safety/weaver/enic_main.i.aux"
static struct net_device *cif_alloc_etherdev_mqs(int sizeof_priv, unsigned int txqs, unsigned int rxqs)
{
  #line 1011 
  return emg_alloc_etherdev_mqs(sizeof_priv,txqs,rxqs);
}

#line 1015  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cisco/enic/enic.ko/concurrency safety/0/concurrency safety/weaver/enic_main.i.aux"
static int cif_register_netdev(struct net_device *dev)
{
  #line 1019 
  return emg_register_netdev(dev);
}

#line 1023  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cisco/enic/enic.ko/concurrency safety/0/concurrency safety/weaver/enic_main.i.aux"
static void cif_free_netdev(struct net_device *dev)
{
  #line 1027 
  emg_free_netdev(dev);
  #line 1028 
  return;
}

#line 1031  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cisco/enic/enic.ko/concurrency safety/0/concurrency safety/weaver/enic_main.i.aux"
static void cif_unregister_netdev(struct net_device *dev)
{
  #line 1035 
  emg_unregister_netdev(dev);
  #line 1036 
  return;
}

#line 1039  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cisco/enic/enic.ko/concurrency safety/0/concurrency safety/weaver/enic_main.i.aux"
static int cif___pci_register_driver(struct pci_driver *ldv_func_arg1, struct module *ldv_func_arg2, char *mod_name)
{
  #line 1043 
  return emg___pci_register_driver(ldv_func_arg1,ldv_func_arg2,mod_name);
}

#line 1047  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cisco/enic/enic.ko/concurrency safety/0/concurrency safety/weaver/enic_main.i.aux"
static void cif_pci_unregister_driver(struct pci_driver *dev)
{
  #line 1051 
  emg_pci_unregister_driver(dev);
  #line 1052 
  return;
}

#line 20  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/common/inline_asm.c"
void ldv_inline_asm(void)
{
  #line 24 
  return;
}

#line 20  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
void ldv_atomic_add(int i, atomic_t *v)
{
  #line 22 
  v->counter += i;
  #line 23 
  return;
}

#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
void ldv_atomic_sub(int i, atomic_t *v)
{
  #line 27 
  v->counter -= i;
  #line 28 
  return;
}

#line 30  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
int ldv_atomic_sub_and_test(int i, atomic_t *v)
{
  #line 32 
  v->counter -= i;
  #line 33 
  if (v->counter != 0) 
                       #line 34 
                       return 0;
  #line 36 
  return 1;
}

#line 39  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
void ldv_atomic_inc(atomic_t *v)
{
  #line 41 
  (v->counter) ++;
  #line 42 
  return;
}

#line 44  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
void ldv_atomic_dec(atomic_t *v)
{
  #line 46 
  (v->counter) --;
  #line 47 
  return;
}

#line 49  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
int ldv_atomic_dec_and_test(atomic_t *v)
{
  #line 51 
  (v->counter) --;
  #line 52 
  if (v->counter != 0) 
                       #line 53 
                       return 0;
  #line 55 
  return 1;
}

#line 58  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
int ldv_atomic_inc_and_test(atomic_t *v)
{
  #line 60 
  (v->counter) ++;
  #line 61 
  if (v->counter != 0) 
                       #line 62 
                       return 0;
  #line 64 
  return 1;
}

#line 67  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
int ldv_atomic_add_return(int i, atomic_t *v)
{
  #line 69 
  v->counter += i;
  #line 70 
  return v->counter;
}

#line 73  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
int ldv_atomic_add_negative(int i, atomic_t *v)
{
  #line 75 
  v->counter += i;
  #line 76 
  return v->counter < 0;
}

#line 79  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
int ldv_atomic_inc_short(short *v)
{
  #line 81 
  *v = (short)((unsigned int)*v + 1U);
  #line 82 
  return (int)*v;
}

#line 20  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/current.c"
static struct task_struct ldv_current;
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/current.c"
struct task_struct *ldv_get_current(void)
{
  #line 28 
  ldv_current.pid = 1;
  #line 29 
  return & ldv_current;
}

#line 32  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 28  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
void ldv_switch_to_interrupt_context(void);
#line 42  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 34  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
void ldv_switch_to_process_context(void);
#line 50  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 40  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
bool ldv_in_interrupt_context(void);
#line 112  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 55  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
int ldv_post_init(int init_ret_val);
#line 132  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 61  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
int ldv_post_probe(int probe_ret_val);
#line 133  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 133 
void ldv_check_return_value_probe(int);
#line 141 
#line 68  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
int ldv_filter_err_code(int ret_val);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/common.h"
#line 23 
void __VERIFIER_assume(int);
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
static bool __ldv_in_interrupt_context = (_Bool)0;
#line 28  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
void ldv_switch_to_interrupt_context(void)
{
  #line 31 
  __ldv_in_interrupt_context = (_Bool)1;
  #line 32 
  return;
}

#line 34  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
void ldv_switch_to_process_context(void)
{
  #line 37 
  __ldv_in_interrupt_context = (_Bool)0;
  #line 38 
  return;
}

#line 40  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
bool ldv_in_interrupt_context(void)
{
  #line 42 
  return __ldv_in_interrupt_context;
}

#line 45  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
static int ldv_filter_positive_int(int val)
{
  #line 47 
  __VERIFIER_assume(val <= 0);
  #line 48 
  return val;
}

#line 55  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
int ldv_post_init(int init_ret_val)
{
  #line 57 
  return ldv_filter_positive_int(init_ret_val);
}

#line 61  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
int ldv_post_probe(int probe_ret_val)
{
  #line 63 
  ldv_check_return_value_probe(probe_ret_val);
  #line 64 
  return ldv_filter_positive_int(probe_ret_val);
}

#line 68  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
int ldv_filter_err_code(int ret_val)
{
  #line 70 
  return ldv_filter_positive_int(ret_val);
}

#line 28  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/common/list.h"
#line 28 
void ldv_save_allocated_memory_to_list(void *);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/device.h"
#line 29  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/dd.c"
void *ldv_dev_get_drvdata(struct device *dev);
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/device.h"
#line 43  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/dd.c"
int ldv_dev_set_drvdata(struct device *dev, void *data);
#line 57  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 57 
void *ldv_xzalloc(size_t size);
#line 29  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/dd.c"
void *ldv_dev_get_drvdata(struct device *dev)
{
  #line 31 
  if (dev != (struct device *)0 && dev->p != (struct device_private *)0) 
    #line 32 
    return (dev->p)->driver_data;
  #line 34 
  return (void *)0;
}

#line 43  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/dd.c"
int ldv_dev_set_drvdata(struct device *dev, void *data)
{
  #line 45 
  dev->p = (struct device_private *)ldv_xzalloc(8UL);
  #line 46 
  ldv_save_allocated_memory_to_list((void *)dev->p);
  #line 47 
  (dev->p)->driver_data = data;
  #line 49 
  return 0;
}

#line 156  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 156 
void ldv_check_alloc_flags(gfp_t);
#line 48  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 48 
void *ldv_malloc(size_t size);
#line 49 
#line 49 
void *ldv_calloc(size_t nmemb, size_t size);
#line 50 
#line 50 
void *ldv_zalloc(size_t size);
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/devres.c"
void *ldv_devm_kmalloc(size_t size, gfp_t flags)
{
  #line 26 
  void *res;
  #line 28 
  ldv_check_alloc_flags(flags);
  #line 29 
  res = ldv_malloc(size);
  #line 30 
  ldv_save_allocated_memory_to_list(res);
  #line 32 
  return res;
}

#line 35  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/devres.c"
void *ldv_devm_kzalloc(size_t size, gfp_t flags)
{
  #line 37 
  void *res;
  #line 39 
  ldv_check_alloc_flags(flags);
  #line 40 
  res = ldv_zalloc(size);
  #line 41 
  ldv_save_allocated_memory_to_list(res);
  #line 43 
  return res;
}

#line 46  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/devres.c"
void *ldv_devm_kmalloc_array(size_t n, size_t size, gfp_t flags)
{
  #line 48 
  void *res;
  #line 50 
  ldv_check_alloc_flags(flags);
  #line 51 
  res = ldv_malloc(n * size);
  #line 52 
  ldv_save_allocated_memory_to_list(res);
  #line 54 
  return res;
}

#line 57  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/devres.c"
void *ldv_devm_kcalloc(size_t n, size_t size, gfp_t flags)
{
  #line 59 
  void *res;
  #line 61 
  ldv_check_alloc_flags(flags);
  #line 62 
  res = ldv_calloc(n,size);
  #line 63 
  ldv_save_allocated_memory_to_list(res);
  #line 65 
  return res;
}

#line 51  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 51 
void ldv_free(void *s);
#line 59 
#line 59 
void *ldv_malloc_unknown_size(void);
#line 31  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 31 
int ldv_undef_int_positive(void);
#line 40 
#line 40 
int ldv_undef_int_nonpositive(void);
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/firmware_loader.c"
int ldv_request_firmware(struct firmware **fw)
{
  #line 27 
  int retval;
  #line 26 
  struct firmware *_fw = (struct firmware *)0;
  #line 29 
  retval = ldv_undef_int_nonpositive();
  #line 31 
  if (retval == 0) {
    #line 33 
    _fw = (struct firmware *)ldv_xzalloc(32UL);
    #line 34 
    _fw->data = (u8 *)ldv_malloc_unknown_size();
    #line 35 
    __VERIFIER_assume(_fw->data != (u8 *)0U);
    #line 36 
    _fw->size = (unsigned long)ldv_undef_int_positive();
  }
  #line 39 
  *fw = _fw;
  #line 41 
  return retval;
}

#line 44  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/firmware_loader.c"
void ldv_release_firmware(struct firmware *fw)
{
  #line 46 
  if (fw != (struct firmware *)0) {
    #line 48 
    ldv_free((void *)fw->data);
    #line 49 
    ldv_free((void *)fw);
  }
  #line 51 
  return;
}

#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/i2c.h"
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/i2c/i2c-core-smbus.c"
s32 ldv_i2c_smbus_read_block_data(u8 *values);
#line 55  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 55 
void *ldv_xmalloc(size_t size);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 23 
int ldv_undef_int(void);
#line 34 
#line 34 
int ldv_undef_int_negative(void);
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/i2c/i2c-core-smbus.c"
s32 ldv_i2c_smbus_read_block_data(u8 *values)
{
  #line 27 
  __u8 size;
  #line 28 
  char *bytes;
  #line 30 
  if (ldv_undef_int() != 0) {
    #line 33 
    size = (unsigned char)ldv_undef_int_positive();
    #line 35 
    __VERIFIER_assume((unsigned int)size <= 32U);
    #line 37 
    bytes = (char *)ldv_xmalloc((unsigned long)size);
    #line 39 
    memcpy((void *)values,(void *)bytes,(unsigned long)size);
    #line 40 
    ldv_free((void *)bytes);
    #line 42 
    return (int)size;
  }
  else {
    #line 46 
    return ldv_undef_int_negative();
  }
}

#line 988  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
__inline static void v4l2_set_subdevdata(struct v4l2_subdev *sd, void *p)
{
  #line 990 
  sd->dev_priv = p;
  #line 991 
  return;
}

#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/media/v4l2-common.h"
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/media/v4l2-core/v4l2-i2c.c"
void ldv_v4l2_i2c_subdev_init(struct v4l2_subdev *sd, struct i2c_client *client, struct v4l2_subdev_ops *ops);
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/media/v4l2-core/v4l2-i2c.c"
void ldv_v4l2_i2c_subdev_init(struct v4l2_subdev *sd, struct i2c_client *client, struct v4l2_subdev_ops *ops)
{
  #line 26 
  sd->ops = ops;
  #line 27 
  v4l2_set_subdevdata(sd,(void *)client);
  #line 28 
  ldv_dev_set_drvdata(& client->dev,(void *)sd);
  #line 29 
  return;
}

#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/spi.c"
struct spi_controller *ldv_spi_alloc_master(struct device *host, unsigned int size)
{
  #line 25 
  struct spi_controller *master;
  #line 27 
  master = (struct spi_controller *)ldv_zalloc((unsigned long)size + 2936UL);
  #line 29 
  if (master == (struct spi_controller *)0) 
                                            #line 30 
                                            return (struct spi_controller *)0;
  #line 32 
  ldv_dev_set_drvdata(& master->dev,(void *)(master + 1U));
  #line 34 
  return master;
}

#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/fb.h"
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/video/fbdev/core/fbsysfs.c"
struct fb_info *ldv_framebuffer_alloc(size_t size);
#line 26  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/fb.h"
#line 38  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/video/fbdev/core/fbsysfs.c"
void ldv_framebuffer_release(struct fb_info *info);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/video/fbdev/core/fbsysfs.c"
struct fb_info *ldv_framebuffer_alloc(size_t size)
{
  #line 25 
  struct fb_info *info;
  #line 27 
  info = (struct fb_info *)ldv_zalloc(size + 1568UL);
  #line 29 
  if (info == (struct fb_info *)0) 
                                   #line 30 
                                   return (struct fb_info *)0;
  #line 32 
  if (size != 0UL) 
                   #line 33 
                   info->par = (void *)((char *)info + 1568UL);
  #line 35 
  return info;
}

#line 38  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/video/fbdev/core/fbsysfs.c"
void ldv_framebuffer_release(struct fb_info *info)
{
  #line 40 
  if (info == (struct fb_info *)0) 
                                   #line 41 
                                   return;
  #line 44 
  ldv_free((void *)info->apertures);
  #line 46 
  ldv_free((void *)info);
  #line 47 
  return;
}

#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/err.h"
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/err.c"
bool ldv_is_err(void *ptr);
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/err.h"
#line 59  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/err.c"
bool ldv_is_err_or_null(void *ptr);
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/err.h"
#line 35  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/err.c"
void *ldv_err_ptr(long error);
#line 26  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/err.h"
#line 47  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/err.c"
long ldv_ptr_err(void *ptr);
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/err.c"
bool ldv_is_err(void *ptr)
{
  #line 29 
  if ((unsigned long)ptr > 18446744073709547520UL) 
                                                   #line 30 
                                                   return (_Bool)1; else 
                                                                    #line 32 
                                                                    return (_Bool)0;
}

#line 35  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/err.c"
void *ldv_err_ptr(long error)
{
  #line 37 
  unsigned long result;
  #line 39 
  __VERIFIER_assume(error < 0L);
  #line 40 
  __VERIFIER_assume(error >= -4095L);
  #line 41 
  result = 18446744073709547520UL - (unsigned long)error;
  #line 42 
  __VERIFIER_assume(result > 18446744073709547520UL);
  #line 44 
  return (void *)result;
}

#line 47  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/err.c"
long ldv_ptr_err(void *ptr)
{
  #line 49 
  long result;
  #line 51 
  __VERIFIER_assume((unsigned long)ptr > 18446744073709547520UL);
  #line 52 
  result = (long)(18446744073709547520UL - (unsigned long)ptr);
  #line 53 
  __VERIFIER_assume(result < 0L);
  #line 54 
  __VERIFIER_assume(result >= -4095L);
  #line 56 
  return result;
}

#line 59  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/err.c"
bool ldv_is_err_or_null(void *ptr)
{
  #line 61 
  int tmp_0;
  #line 61 
  if (ptr == (void *)0) 
                        #line 61 
                        tmp_0 = 1;
  else {
    #line 61 
    if ((int)ldv_is_err(ptr) != 0) 
                                   #line 61 
                                   tmp_0 = 1; else 
                                                   #line 61 
                                                   tmp_0 = 0;
  }
  #line 61 
  return (_Bool)(tmp_0 != 0);
}

#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/panic.h"
#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/kernel/panic.c"
void ldv_panic(void);
#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/kernel/panic.c"
void ldv_panic(void)
{
  #line 23 
  __VERIFIER_assume(0);
  #line 24 
  return;
}

#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/bitmap.h"
#line 32  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_bitmap_set(unsigned long *map, unsigned int start, int nbits);
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/bitmap.h"
#line 52  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_bitmap_clear(unsigned long *map, unsigned int start, int nbits);
#line 27  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/bitmap.h"
#line 72  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_bitmap_zero(unsigned long *dst, unsigned int nbits);
#line 29  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/bitmap.h"
#line 78  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
unsigned long ldv_bitmap_find_next_zero_area(unsigned long *map, unsigned long size, unsigned long start, unsigned int nr, unsigned long align_mask);
#line 22  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/find_bit.h"
#line 22 
unsigned long ldv_find_next_bit(unsigned long *addr, unsigned long size, unsigned long offset);
#line 23 
#line 23 
unsigned long ldv_find_next_zero_bit(unsigned long *addr, unsigned long size, unsigned long offset);
#line 22  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_set_bit(long nr, unsigned long *addr)
{
  #line 24 
  *(addr + (unsigned long)nr / 64UL) |= 1UL << ((unsigned long)nr & 63UL);
  #line 25 
  return;
}

#line 27  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_clear_bit(long nr, unsigned long *addr)
{
  #line 29 
  *(addr + (unsigned long)nr / 64UL) &= ~ (1UL << ((unsigned long)nr & 63UL));
  #line 30 
  return;
}

#line 32  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_bitmap_set(unsigned long *map, unsigned int start, int nbits)
{
  #line 34 
  unsigned long *p = map + (unsigned long)(start / 64U);
  #line 35 
  unsigned int size = start + (unsigned int)nbits;
  #line 36 
  int bits_to_set = (int)(64U - (start & 63U));
  #line 37 
  unsigned long mask_to_set = 18446744073709551615UL << ((unsigned long)start & 63UL);
  #line 39 
  while (nbits - bits_to_set >= 0) {
    #line 40 
    *p |= mask_to_set;
    #line 41 
    nbits -= bits_to_set;
    #line 42 
    bits_to_set = 64;
    #line 43 
    mask_to_set = 18446744073709551615UL;
    #line 44 
    p ++;
  }
  #line 46 
  if (nbits != 0) {
    #line 47 
    mask_to_set = (18446744073709551615UL >> ((unsigned long)(- size) & 63UL)) & mask_to_set;
    #line 48 
    *p |= mask_to_set;
  }
  #line 50 
  return;
}

#line 52  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_bitmap_clear(unsigned long *map, unsigned int start, int nbits)
{
  #line 54 
  unsigned long *p = map + (unsigned long)(start / 64U);
  #line 55 
  unsigned int size = start + (unsigned int)nbits;
  #line 56 
  int bits_to_clear = (int)(64U - (start & 63U));
  #line 57 
  unsigned long mask_to_clear = 18446744073709551615UL << ((unsigned long)start & 63UL);
  #line 59 
  while (nbits - bits_to_clear >= 0) {
    #line 60 
    *p &= ~ mask_to_clear;
    #line 61 
    nbits -= bits_to_clear;
    #line 62 
    bits_to_clear = 64;
    #line 63 
    mask_to_clear = 18446744073709551615UL;
    #line 64 
    p ++;
  }
  #line 66 
  if (nbits != 0) {
    #line 67 
    mask_to_clear = (18446744073709551615UL >> ((unsigned long)(- size) & 63UL)) & mask_to_clear;
    #line 68 
    *p &= ~ mask_to_clear;
  }
  #line 70 
  return;
}

#line 72  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_bitmap_zero(unsigned long *dst, unsigned int nbits)
{
  #line 74 
  unsigned int len = (unsigned int)(((unsigned long)nbits + 63UL) / 64UL) * 8U;
  #line 75 
  memset((void *)dst,0,(unsigned long)len);
  #line 76 
  return;
}

#line 78  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
unsigned long ldv_bitmap_find_next_zero_area(unsigned long *map, unsigned long size, unsigned long start, unsigned int nr, unsigned long align_mask)
{
  #line 80 
  unsigned long index;
  #line 80 
  unsigned long end;
  #line 80 
  unsigned long i;
  #line 82 
  again: 
         #line 82 
  ;
  #line 83 
  index = ldv_find_next_zero_bit(map,size,start);
  #line 84 
  index = (index + align_mask) & ~ align_mask;
  #line 85 
  end = (unsigned long)nr + index;
  #line 87 
  if (end > size) 
                  #line 88 
                  return end;
  #line 90 
  i = ldv_find_next_bit(map,end,index);
  #line 92 
  if (i < end) {
    #line 93 
    start = i + 1UL;
    #line 94 
    goto again;
  }
  #line 97 
  return index;
}

#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/find_bit.h"
#line 25 
void ldv_check_find_bit_offset(unsigned long, unsigned long);
#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/find_bit.common.c"
static unsigned long ldv_ffs(unsigned long word)
{
  #line 23 
  int num = 0;
  #line 25 
  if ((word & 4294967295UL) == 0UL) {
    #line 26 
    num += 32;
    #line 27 
    word >>= 32;
  }
  #line 29 
  if ((word & 65535UL) == 0UL) {
    #line 30 
    num += 16;
    #line 31 
    word >>= 16;
  }
  #line 33 
  if ((word & 255UL) == 0UL) {
    #line 34 
    num += 8;
    #line 35 
    word >>= 8;
  }
  #line 37 
  if ((word & 15UL) == 0UL) {
    #line 38 
    num += 4;
    #line 39 
    word >>= 4;
  }
  #line 41 
  if ((word & 3UL) == 0UL) {
    #line 42 
    num += 2;
    #line 43 
    word >>= 2;
  }
  #line 45 
  if ((word & 1UL) == 0UL) 
                           #line 46 
                           num ++;
  #line 48 
  return (unsigned long)num;
}

#line 51  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/find_bit.common.c"
static unsigned long ldv_min(unsigned long a, unsigned long b)
{
  #line 53 
  if (a < b) 
             #line 54 
             return a;
  #line 56 
  return b;
}

#line 59  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/find_bit.common.c"
static unsigned long ldv_restrict_find_bit_res(unsigned long res, unsigned long size)
{
  #line 62 
  __VERIFIER_assume(1);
  #line 63 
  __VERIFIER_assume(res <= size);
  #line 65 
  return res;
}

#line 68  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/find_bit.common.c"
unsigned long ldv_find_first_bit(unsigned long *addr, unsigned long size)
{
  #line 70 
  unsigned long i;
  #line 72 
  i = 0UL;
  #line 72 
  while (i * 64UL < size) {
    #line 73 
    if (*(addr + i) != 0UL) {
      #line 74 
      ;
      #line 74 
      ;
      #line 74 
      ;
      #line 74 
      return ldv_restrict_find_bit_res(ldv_min(i * 64UL + ldv_ffs(*(addr + i)),size),
                                  size);
    }
    #line 72 
    i ++;
  }
  #line 76 
  return size;
}

#line 79  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/find_bit.common.c"
unsigned long ldv_find_next_bit(unsigned long *addr, unsigned long size, unsigned long offset)
{
  #line 81 
  unsigned long tmp;
  #line 83 
  ldv_check_find_bit_offset(size,offset);
  #line 85 
  tmp = *(addr + offset / 64UL);
  #line 86 
  tmp = (unsigned long)((18446744073709551615ULL << (offset & 63UL)) & (unsigned long long)tmp);
  #line 87 
  offset &= 18446744073709551552UL;
  #line 89 
  while (tmp == 0UL) {
    #line 90 
    offset += 64UL;
    #line 91 
    if (offset >= size) 
                        #line 92 
                        return size;
    #line 94 
    tmp = *(addr + offset / 64UL);
  }
  #line 97 
  ;
  #line 97 
  ;
  #line 97 
  ;
  #line 97 
  return ldv_restrict_find_bit_res(ldv_min(ldv_ffs(tmp) + offset,size),size);
}

#line 100  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/find_bit.common.c"
unsigned long ldv_find_next_zero_bit(unsigned long *addr, unsigned long size, unsigned long offset)
{
  #line 102 
  unsigned long tmp;
  #line 104 
  ldv_check_find_bit_offset(size,offset);
  #line 106 
  tmp = *(addr + offset / 64UL);
  #line 107 
  tmp = ~ tmp;
  #line 108 
  tmp = (unsigned long)((18446744073709551615ULL << (offset & 63UL)) & (unsigned long long)tmp);
  #line 109 
  offset &= 18446744073709551552UL;
  #line 111 
  while (tmp == 0UL) {
    #line 112 
    offset += 64UL;
    #line 113 
    if (offset >= size) 
                        #line 114 
                        return size;
    #line 116 
    tmp = *(addr + offset / 64UL);
    #line 117 
    tmp = ~ tmp;
  }
  #line 120 
  ;
  #line 120 
  ;
  #line 120 
  ;
  #line 120 
  return ldv_restrict_find_bit_res(ldv_min(ldv_ffs(tmp) + offset,size),size);
}

#line 27  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/string.h"
#line 40  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
int ldv_strncmp(char *cs, char *ct, __kernel_size_t count);
#line 28  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/string.h"
#line 70  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
char *ldv_strstr(char *cs, char *ct);
#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
size_t ldv_strlen(char *s)
{
  #line 23 
  unsigned int len = 0U;
  #line 25 
  while ((int)*s != 0) {
    #line 26 
    len ++;
    #line 25 
    s ++;
  }
  #line 28 
  return (unsigned long)len;
}

#line 31  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
int ldv_strcmp(char *cs, char *ct)
{
  #line 33 
  while ((int)*cs != 0 && (int)*ct != 0) {
    #line 34 
    if ((int)*cs != (int)*ct) 
                              #line 35 
                              break;
    #line 33 
    cs ++;
    #line 33 
    ct ++;
  }
  #line 37 
  return (int)*cs - (int)*ct;
}

#line 40  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
int ldv_strncmp(char *cs, char *ct, __kernel_size_t count)
{
  #line 42 
  if (count == 0UL) 
                    #line 43 
                    return 0;
  #line 45 
  while ((int)*cs != 0 && (int)*ct != 0) {
    #line 46 
    if ((int)*cs != (int)*ct) 
                              #line 47 
                              break;
    #line 49 
    count --;
    #line 51 
    if (count == 0UL) 
                      #line 52 
                      break;
    #line 45 
    cs ++;
    #line 45 
    ct ++;
  }
  #line 55 
  return (int)*cs - (int)*ct;
}

#line 58  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
int ldv_memcmp(void *cs, void *ct, size_t count)
{
  #line 60 
  unsigned char *su1;
  #line 60 
  unsigned char *su2;
  #line 61 
  int res = 0;
  #line 63 
  su1 = (unsigned char *)cs;
  #line 63 
  su2 = (unsigned char *)ct;
  #line 63 
  while (count != 0UL) {
    #line 64 
    res = (int)*su1 - (int)*su2;
    #line 64 
    if (res != 0) 
                  #line 65 
                  break;
    #line 63 
    su1 ++;
    #line 63 
    su2 ++;
    #line 63 
    count --;
  }
  #line 67 
  return res;
}

#line 70  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
char *ldv_strstr(char *cs, char *ct)
{
  #line 72 
  size_t cs_len;
  #line 72 
  size_t ct_len;
  #line 74 
  cs_len = ldv_strlen(cs);
  #line 75 
  ct_len = ldv_strlen(ct);
  #line 77 
  while (cs_len >= ct_len) {
    #line 78 
    if (ldv_memcmp((void *)cs,(void *)ct,ct_len) == 0) 
                                                       #line 79 
                                                       return cs;
    #line 81 
    cs_len --;
    #line 82 
    cs ++;
  }
  #line 85 
  return (char *)0;
}

#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/list.c"
void ldv_init_list_head(struct list_head *list)
{
  #line 23 
  list->next = list;
  #line 24 
  list->prev = list;
  #line 25 
  return;
}

#line 26  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 43  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmalloc_array(size_t n, size_t size, gfp_t flags);
#line 30  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 69  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
struct kmem_cache *ldv_kmem_cache_create(char *name, unsigned int size);
#line 31  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 85  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmem_cache_alloc(struct kmem_cache *cachep, gfp_t flags);
#line 32  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 90  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmem_cache_zalloc(struct kmem_cache *cachep, gfp_t flags);
#line 33  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 95  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void ldv_kmem_cache_free(struct kmem_cache *cachep, void *objp);
#line 34  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 100  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void ldv_kmem_cache_destroy(struct kmem_cache *cachep);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmalloc(size_t size, gfp_t flags)
{
  #line 25 
  void *res;
  #line 27 
  ldv_check_alloc_flags(flags);
  #line 28 
  res = ldv_malloc(size);
  #line 30 
  return res;
}

#line 33  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kzalloc(size_t size, gfp_t flags)
{
  #line 35 
  void *res;
  #line 37 
  ldv_check_alloc_flags(flags);
  #line 38 
  res = ldv_zalloc(size);
  #line 40 
  return res;
}

#line 43  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmalloc_array(size_t n, size_t size, gfp_t flags)
{
  #line 45 
  void *res;
  #line 47 
  ldv_check_alloc_flags(flags);
  #line 48 
  res = ldv_malloc(n * size);
  #line 50 
  return res;
}

#line 53  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kcalloc(size_t n, size_t size, gfp_t flags)
{
  #line 55 
  void *res;
  #line 57 
  ldv_check_alloc_flags(flags);
  #line 58 
  res = ldv_calloc(n,size);
  #line 60 
  return res;
}

#line 69  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
struct kmem_cache *ldv_kmem_cache_create(char *name, unsigned int size)
{
  #line 71 
  struct kmem_cache *res;
  #line 72 
  struct ldv_kmem_cache *ldv_res;
  #line 74 
  res = (struct kmem_cache *)ldv_zalloc(16UL);
  #line 76 
  if (res != (struct kmem_cache *)0) {
    #line 77 
    ldv_res = (struct ldv_kmem_cache *)res;
    #line 78 
    ldv_res->name = name;
    #line 79 
    ldv_res->size = size;
  }
  #line 82 
  return res;
}

#line 85  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmem_cache_alloc(struct kmem_cache *cachep, gfp_t flags)
{
  #line 87 
  return ldv_kmalloc((unsigned long)((struct ldv_kmem_cache *)cachep)->size,
                  flags);
}

#line 90  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmem_cache_zalloc(struct kmem_cache *cachep, gfp_t flags)
{
  #line 92 
  return ldv_kzalloc((unsigned long)((struct ldv_kmem_cache *)cachep)->size,
                  flags);
}

#line 95  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void ldv_kmem_cache_free(struct kmem_cache *cachep, void *objp)
{
  #line 97 
  ldv_free(objp);
  #line 98 
  return;
}

#line 100  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void ldv_kmem_cache_destroy(struct kmem_cache *cachep)
{
  #line 102 
  ldv_free((void *)cachep);
  #line 103 
  return;
}

#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/string.h"
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/util.c"
void *ldv_kmemdup(void *src, size_t len, gfp_t gfp);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/util.c"
void *ldv_kmemdup(void *src, size_t len, gfp_t gfp)
{
  #line 25 
  void *res;
  #line 27 
  ldv_check_alloc_flags(gfp);
  #line 28 
  res = ldv_malloc(len);
  #line 30 
  if (res != (void *)0) 
                        #line 31 
                        memcpy(res,src,len);
  #line 33 
  return res;
}

#line 162  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 162 
void ldv_check_alloc_nonatomic(void);
#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/vmalloc.h"
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/vmalloc.c"
void *ldv_vmalloc(unsigned long size);
#line 22  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/vmalloc.h"
#line 33  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/vmalloc.c"
void *ldv_vzalloc(unsigned long size);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/vmalloc.h"
#line 43  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/vmalloc.c"
void ldv_vfree(void *addr);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/vmalloc.c"
void *ldv_vmalloc(unsigned long size)
{
  #line 25 
  void *res;
  #line 27 
  ldv_check_alloc_nonatomic();
  #line 28 
  res = ldv_malloc(size);
  #line 30 
  return res;
}

#line 33  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/vmalloc.c"
void *ldv_vzalloc(unsigned long size)
{
  #line 35 
  void *res;
  #line 37 
  ldv_check_alloc_nonatomic();
  #line 38 
  res = ldv_zalloc(size);
  #line 40 
  return res;
}

#line 43  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/vmalloc.c"
void ldv_vfree(void *addr)
{
  #line 45 
  ldv_free(addr);
  #line 46 
  return;
}

#line 28  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 28 
void *malloc(size_t);
#line 29 
#line 29 
void *calloc(size_t, size_t);
#line 30 
#line 30 
void free(void *);
#line 45 
#line 22  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
unsigned int ldv_is_memory_alloc_failures;
#line 56  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 63  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_xcalloc(size_t nmemb, size_t size);
#line 60  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 88  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_calloc_unknown_size(void);
#line 61  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 97  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_zalloc_unknown_size(void);
#line 64  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_malloc(size_t size);
#line 65  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 37  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_calloc(size_t nmemb, size_t size);
#line 66  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 42  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_zalloc(size_t size);
#line 67  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 47  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void ldv_reference_free(void *s);
#line 69  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 52  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_realloc(void *ptr, size_t size);
#line 71  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 80  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xmalloc(size_t size);
#line 72  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 90  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xcalloc(size_t nmemb, size_t size);
#line 73  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 100  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xzalloc(size_t size);
#line 75  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 110  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_malloc_unknown_size(void);
#line 76  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 124  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_calloc_unknown_size(void);
#line 77  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 139  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_zalloc_unknown_size(void);
#line 83  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 106  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_xmalloc_unknown_size(size_t size);
#line 85  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 144  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xmalloc_unknown_size(size_t size);
#line 87  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 87 
void *external_allocated_data(void);
#line 22  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
unsigned int ldv_is_memory_alloc_failures = 1U;
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_malloc(size_t size)
{
  #line 26 
  void *res;
  #line 28 
  if (ldv_is_memory_alloc_failures != 0U) {
    #line 28 
    if (ldv_undef_int() != 0) 
                              #line 29 
                              return (void *)0;
  }
  #line 32 
  res = malloc(size);
  #line 33 
  __VERIFIER_assume(res != (void *)0);
  #line 34 
  return res;
}

#line 37  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_calloc(size_t nmemb, size_t size)
{
  #line 39 
  return calloc(nmemb,size);
}

#line 42  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_zalloc(size_t size)
{
  #line 44 
  return calloc(1UL,size);
}

#line 47  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void ldv_reference_free(void *s)
{
  #line 49 
  free(s);
  #line 50 
  return;
}

#line 52  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_realloc(void *ptr, size_t size)
{
  #line 54 
  void *res;
  #line 56 
  if (ptr != (void *)0 && size == 0UL) {
    #line 57 
    free(ptr);
    #line 58 
    return (void *)0;
  }
  #line 61 
  if (ptr == (void *)0) {
    #line 62 
    res = malloc(size);
    #line 63 
    return res;
  }
  #line 66 
  if (ldv_undef_int() != 0) {
    #line 68 
    res = malloc(size);
    #line 69 
    __VERIFIER_assume(res != (void *)0);
    #line 71 
    memcpy(res,ptr,size);
    #line 72 
    free(ptr);
    #line 74 
    return res;
  }
  else 
       #line 77 
       return (void *)0;
}

#line 80  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xmalloc(size_t size)
{
  #line 82 
  void *res;
  #line 84 
  res = malloc(size);
  #line 85 
  __VERIFIER_assume(res != (void *)0);
  #line 87 
  return res;
}

#line 90  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xcalloc(size_t nmemb, size_t size)
{
  #line 92 
  void *res;
  #line 94 
  res = calloc(nmemb,size);
  #line 95 
  __VERIFIER_assume(res != (void *)0);
  #line 97 
  return res;
}

#line 100  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xzalloc(size_t size)
{
  #line 102 
  void *res;
  #line 104 
  res = calloc(1UL,size);
  #line 105 
  __VERIFIER_assume(res != (void *)0);
  #line 107 
  return res;
}

#line 110  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_malloc_unknown_size(void)
{
  #line 112 
  void *res;
  #line 114 
  if (ldv_undef_int() != 0) {
    #line 116 
    res = external_allocated_data();
    #line 117 
    __VERIFIER_assume(res != (void *)0);
    #line 118 
    return res;
  }
  else 
       #line 121 
       return (void *)0;
}

#line 124  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_calloc_unknown_size(void)
{
  #line 126 
  void *res;
  #line 128 
  if (ldv_undef_int() != 0) {
    #line 130 
    res = external_allocated_data();
    #line 131 
    memset(res,0,8UL);
    #line 132 
    __VERIFIER_assume(res != (void *)0);
    #line 133 
    return res;
  }
  else 
       #line 136 
       return (void *)0;
}

#line 139  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_zalloc_unknown_size(void)
{
  #line 141 
  return ldv_reference_calloc_unknown_size();
}

#line 144  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xmalloc_unknown_size(size_t size)
{
  #line 146 
  void *res;
  #line 149 
  res = external_allocated_data();
  #line 150 
  __VERIFIER_assume(res != (void *)0);
  #line 152 
  return res;
}

#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_malloc(size_t size)
{
  #line 25 
  void *res;
  #line 26 
  res = ldv_reference_malloc(size);
  #line 27 
  if (res != (void *)0) {
    #line 28 
    int tmp_0;
    #line 28 
    if (ldv_is_err(res)) 
                         #line 28 
                         tmp_0 = 0; else 
                                         #line 28 
                                         tmp_0 = 1;
    #line 28 
    __VERIFIER_assume(tmp_0);
  }
  #line 29 
  return res;
}

#line 32  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_calloc(size_t nmemb, size_t size)
{
  #line 34 
  void *res;
  #line 35 
  res = ldv_reference_calloc(nmemb,size);
  #line 36 
  if (res != (void *)0) {
    #line 37 
    int tmp_0;
    #line 37 
    if (ldv_is_err(res)) 
                         #line 37 
                         tmp_0 = 0; else 
                                         #line 37 
                                         tmp_0 = 1;
    #line 37 
    __VERIFIER_assume(tmp_0);
  }
  #line 38 
  return res;
}

#line 41  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_zalloc(size_t size)
{
  #line 43 
  void *res;
  #line 44 
  res = ldv_reference_zalloc(size);
  #line 45 
  if (res != (void *)0) {
    #line 46 
    int tmp_0;
    #line 46 
    if (ldv_is_err(res)) 
                         #line 46 
                         tmp_0 = 0; else 
                                         #line 46 
                                         tmp_0 = 1;
    #line 46 
    __VERIFIER_assume(tmp_0);
  }
  #line 47 
  return res;
}

#line 50  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void ldv_free(void *s)
{
  #line 52 
  ldv_reference_free(s);
  #line 53 
  return;
}

#line 55  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_xmalloc(size_t size)
{
  #line 57 
  void *res;
  #line 59 
  int tmp_0;
  #line 58 
  res = ldv_reference_xmalloc(size);
  #line 59 
  if (ldv_is_err(res)) 
                       #line 59 
                       tmp_0 = 0; else 
                                       #line 59 
                                       tmp_0 = 1;
  #line 59 
  __VERIFIER_assume(tmp_0);
  #line 60 
  return res;
}

#line 63  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_xcalloc(size_t nmemb, size_t size)
{
  #line 65 
  void *res;
  #line 67 
  int tmp_0;
  #line 66 
  res = ldv_reference_xcalloc(nmemb,size);
  #line 67 
  if (ldv_is_err(res)) 
                       #line 67 
                       tmp_0 = 0; else 
                                       #line 67 
                                       tmp_0 = 1;
  #line 67 
  __VERIFIER_assume(tmp_0);
  #line 68 
  return res;
}

#line 71  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_xzalloc(size_t size)
{
  #line 73 
  void *res;
  #line 75 
  int tmp_0;
  #line 74 
  res = ldv_reference_xzalloc(size);
  #line 75 
  if (ldv_is_err(res)) 
                       #line 75 
                       tmp_0 = 0; else 
                                       #line 75 
                                       tmp_0 = 1;
  #line 75 
  __VERIFIER_assume(tmp_0);
  #line 76 
  return res;
}

#line 79  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_malloc_unknown_size(void)
{
  #line 81 
  void *res;
  #line 82 
  res = ldv_reference_malloc_unknown_size();
  #line 83 
  if (res != (void *)0) {
    #line 84 
    int tmp_0;
    #line 84 
    if (ldv_is_err(res)) 
                         #line 84 
                         tmp_0 = 0; else 
                                         #line 84 
                                         tmp_0 = 1;
    #line 84 
    __VERIFIER_assume(tmp_0);
  }
  #line 85 
  return res;
}

#line 88  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_calloc_unknown_size(void)
{
  #line 90 
  void *res;
  #line 91 
  res = ldv_reference_calloc_unknown_size();
  #line 92 
  if (res != (void *)0) {
    #line 93 
    int tmp_0;
    #line 93 
    if (ldv_is_err(res)) 
                         #line 93 
                         tmp_0 = 0; else 
                                         #line 93 
                                         tmp_0 = 1;
    #line 93 
    __VERIFIER_assume(tmp_0);
  }
  #line 94 
  return res;
}

#line 97  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_zalloc_unknown_size(void)
{
  #line 99 
  void *res;
  #line 100 
  res = ldv_reference_zalloc_unknown_size();
  #line 101 
  if (res != (void *)0) {
    #line 102 
    int tmp_0;
    #line 102 
    if (ldv_is_err(res)) 
                         #line 102 
                         tmp_0 = 0; else 
                                         #line 102 
                                         tmp_0 = 1;
    #line 102 
    __VERIFIER_assume(tmp_0);
  }
  #line 103 
  return res;
}

#line 106  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_xmalloc_unknown_size(size_t size)
{
  #line 108 
  void *res;
  #line 110 
  int tmp_0;
  #line 109 
  res = ldv_reference_xmalloc_unknown_size(size);
  #line 110 
  if (ldv_is_err(res)) 
                       #line 110 
                       tmp_0 = 0; else 
                                       #line 110 
                                       tmp_0 = 1;
  #line 110 
  __VERIFIER_assume(tmp_0);
  #line 111 
  return res;
}

/* compiler builtin: 
   long __builtin_expect(long exp, long c);   */
#line 22  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/common.h"
#line 22 
void __VERIFIER_error(void);
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/common.h"
long __builtin_expect(long exp, long c)
{
  #line 26 
  return exp;
}

#line 35  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/gcc.c"
void __builtin_trap(void)
{
  #line 37 
  __VERIFIER_error();
  #line 38 
  return;
}

#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 53  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
long ldv_undef_long(void);
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 61  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
unsigned int ldv_undef_uint(void);
#line 26  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 77  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
unsigned long ldv_undef_ulong(void);
#line 27  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 85  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
unsigned long long ldv_undef_ulonglong(void);
#line 28  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 69  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
void *ldv_undef_ptr(void);
#line 37  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 111  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int ldv_undef_int_nonnegative(void);
#line 43  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 129  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
void *ldv_undef_ptr_non_null(void);
#line 54  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 139  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int __ldv_undef_int_range(int begin, int end);
#line 56  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 151  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int __ldv_undef_int_range2(int begin, int end);
#line 29 
#line 29 
int __VERIFIER_nondet_int(void);
#line 31 
#line 31 
long __VERIFIER_nondet_long(void);
#line 38 
#line 38 
unsigned int __VERIFIER_nondet_uint(void);
#line 41 
#line 41 
unsigned long __VERIFIER_nondet_ulong(void);
#line 42 
#line 42 
unsigned long long __VERIFIER_nondet_ulonglong(void);
#line 43 
#line 43 
void *__VERIFIER_nondet_pointer(void);
#line 45  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int ldv_undef_int(void)
{
  #line 48 
  int undef_int = __VERIFIER_nondet_int();
  #line 50 
  return undef_int;
}

#line 53  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
long ldv_undef_long(void)
{
  #line 56 
  long undef_long = __VERIFIER_nondet_long();
  #line 58 
  return undef_long;
}

#line 61  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
unsigned int ldv_undef_uint(void)
{
  #line 64 
  unsigned int undef_uint = __VERIFIER_nondet_uint();
  #line 66 
  return undef_uint;
}

#line 69  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
void *ldv_undef_ptr(void)
{
  #line 72 
  void *undef_ptr = __VERIFIER_nondet_pointer();
  #line 74 
  return undef_ptr;
}

#line 77  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
unsigned long ldv_undef_ulong(void)
{
  #line 80 
  unsigned long undef_ulong = __VERIFIER_nondet_ulong();
  #line 82 
  return undef_ulong;
}

#line 85  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
unsigned long long ldv_undef_ulonglong(void)
{
  #line 88 
  unsigned long long undef_ulonglong = __VERIFIER_nondet_ulonglong();
  #line 90 
  return undef_ulonglong;
}

#line 93  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int ldv_undef_int_positive(void)
{
  #line 95 
  int ret = ldv_undef_int();
  #line 97 
  __VERIFIER_assume(ret > 0);
  #line 99 
  return ret;
}

#line 102  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int ldv_undef_int_negative(void)
{
  #line 104 
  int ret = ldv_undef_int();
  #line 106 
  __VERIFIER_assume(ret < 0);
  #line 108 
  return ret;
}

#line 111  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int ldv_undef_int_nonnegative(void)
{
  #line 113 
  int ret = ldv_undef_int();
  #line 115 
  __VERIFIER_assume(ret >= 0);
  #line 117 
  return ret;
}

#line 120  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int ldv_undef_int_nonpositive(void)
{
  #line 122 
  int ret = ldv_undef_int();
  #line 124 
  __VERIFIER_assume(ret <= 0);
  #line 126 
  return ret;
}

#line 129  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
void *ldv_undef_ptr_non_null(void)
{
  #line 131 
  void *ret = ldv_undef_ptr();
  #line 133 
  __VERIFIER_assume(ret != (void *)0);
  #line 135 
  return ret;
}

#line 139  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int __ldv_undef_int_range(int begin, int end)
{
  #line 141 
  int ret;
  #line 143 
  ret = ldv_undef_int();
  #line 144 
  __VERIFIER_assume(ret >= begin);
  #line 145 
  __VERIFIER_assume(ret <= end);
  #line 147 
  return ret;
}

#line 151  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int __ldv_undef_int_range2(int begin, int end)
{
  #line 153 
  int ret;
  #line 155 
  ret = begin;
  #line 155 
  while (ret < end) {
    #line 156 
    if (ldv_undef_int() != 0) 
                              #line 157 
                              break;
    #line 155 
    ret ++;
  }
  #line 159 
  return ret;
}

#line 62  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 62 
void ldv_initialize(void);
#line 97 
#line 97 
void ldv_failed_register_netdev(void);
#line 123 
#line 123 
void ldv_pre_probe(void);
#line 35  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/thread.h"
#line 35 
int pthread_create(pthread_t *, pthread_attr_t *, void *(*)(void *), void *);
#line 39 
#line 39 
int pthread_join(pthread_t, void **);
#line 97  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cisco/enic/enic.ko/concurrency safety/emg/0/environment_model.c"
#line 223 
void emg_dispatch_deregister_12(struct net_device *arg0);
#line 98 
#line 177 
void emg_dispatch_deregister_8(struct pci_driver *arg0);
#line 99 
#line 141 
void emg_dispatch_instance_deregister_4(struct timer_list *arg0);
#line 100 
#line 166 
void emg_dispatch_instance_register_7(struct timer_list *arg0);
#line 101 
#line 150 
void emg_dispatch_irq_deregister_5(int arg0);
#line 102 
#line 197 
void emg_dispatch_irq_register_10(int arg0, enum irqreturn (*arg1)(int , void *), enum irqreturn (*arg2)(int , void *), void *arg3);
#line 103 
#line 130 
void emg_dispatch_register_2(struct pci_driver *arg0);
#line 104 
#line 186 
void emg_dispatch_register_9(struct net_device *arg0);
#line 105 
#line 1573 
void *emg_entry_point_insmod(void *arg0);
#line 108 
#line 232 
void *emg_interrupt_interrupt_scenario_enic_isr_legacy(void *arg0);
#line 109 
#line 295 
void *emg_interrupt_interrupt_scenario_enic_isr_msi(void *arg0);
#line 111 
#line 358 
void *emg_net_random_allocationless_scenario_enic_set_vf_port(void *arg0);
#line 112 
#line 1074 
void *emg_pci_pci_scenario_enic_driver(void *arg0);
#line 117 
#line 1252 
void *emg_timer_timer_scenario_4(void *arg0);
#line 119 
#line 1602 
int main(void);
#line 122  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cisco/enic/enic.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_13;
#line 123  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cisco/enic/enic.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_14;
#line 124  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cisco/enic/enic.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_15;
#line 125  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cisco/enic/enic.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_16;
#line 126  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cisco/enic/enic.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_17;
#line 130  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cisco/enic/enic.ko/concurrency safety/emg/0/environment_model.c"
void emg_dispatch_register_2(struct pci_driver *arg0)
{
  #line 131 
  int ret;
  #line 132 
  struct emg_struct_pci_scenario_enic_driver_16 *cf_arg_16;
  #line 133 
  cf_arg_16 = (struct emg_struct_pci_scenario_enic_driver_16 *)ldv_xmalloc(16UL);
  #line 134 
  cf_arg_16->arg0 = arg0;
  #line 135 
  ret = pthread_create(& emg_thread_16,(pthread_attr_t *)0,& emg_pci_pci_scenario_enic_driver,(void *)cf_arg_16);
  #line 136 
  __VERIFIER_assume(ret == 0);
  #line 137 
  return;
}

#line 141  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cisco/enic/enic.ko/concurrency safety/emg/0/environment_model.c"
void emg_dispatch_instance_deregister_4(struct timer_list *arg0)
{
  #line 142 
  int ret;
  #line 143 
  struct emg_struct_timer_scenario_4_17 *cf_arg_17;
  #line 144 
  ret = pthread_join(emg_thread_17,(void **)0);
  #line 145 
  __VERIFIER_assume(ret == 0);
  #line 146 
  return;
}

#line 150  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cisco/enic/enic.ko/concurrency safety/emg/0/environment_model.c"
void emg_dispatch_irq_deregister_5(int arg0)
{
  #line 151 
  int ret;
  #line 152 
  struct emg_struct_free_irq_5 *cf_arg_13;
  #line 153 
  struct emg_struct_free_irq_5 *cf_arg_14;
  #line 154 
  if (ldv_undef_int() != 0) {
    #line 155 
    ret = pthread_join(emg_thread_13,(void **)0);
    #line 156 
    __VERIFIER_assume(ret == 0);
  }
  else {
    #line 159 
    ret = pthread_join(emg_thread_14,(void **)0);
    #line 160 
    __VERIFIER_assume(ret == 0);
  }
  #line 162 
  return;
}

#line 166  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cisco/enic/enic.ko/concurrency safety/emg/0/environment_model.c"
void emg_dispatch_instance_register_7(struct timer_list *arg0)
{
  #line 167 
  int ret;
  #line 168 
  struct emg_struct_timer_scenario_4_17 *cf_arg_17;
  #line 169 
  cf_arg_17 = (struct emg_struct_timer_scenario_4_17 *)ldv_xmalloc(16UL);
  #line 170 
  cf_arg_17->arg0 = arg0;
  #line 171 
  ret = pthread_create(& emg_thread_17,(pthread_attr_t *)0,& emg_timer_timer_scenario_4,(void *)cf_arg_17);
  #line 172 
  __VERIFIER_assume(ret == 0);
  #line 173 
  return;
}

#line 177  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cisco/enic/enic.ko/concurrency safety/emg/0/environment_model.c"
void emg_dispatch_deregister_8(struct pci_driver *arg0)
{
  #line 178 
  int ret;
  #line 179 
  struct emg_struct_pci_scenario_enic_driver_16 *cf_arg_16;
  #line 180 
  ret = pthread_join(emg_thread_16,(void **)0);
  #line 181 
  __VERIFIER_assume(ret == 0);
  #line 182 
  return;
}

#line 186  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cisco/enic/enic.ko/concurrency safety/emg/0/environment_model.c"
void emg_dispatch_register_9(struct net_device *arg0)
{
  #line 187 
  int ret;
  #line 188 
  struct emg_struct_random_allocationless_scenario_enic_set_vf_port_15 *cf_arg_15;
  #line 189 
  cf_arg_15 = (struct emg_struct_random_allocationless_scenario_enic_set_vf_port_15 *)ldv_xmalloc(16UL);
  #line 190 
  cf_arg_15->arg0 = arg0;
  #line 191 
  ret = pthread_create(& emg_thread_15,(pthread_attr_t *)0,& emg_net_random_allocationless_scenario_enic_set_vf_port,(void *)cf_arg_15);
  #line 192 
  __VERIFIER_assume(ret == 0);
  #line 193 
  return;
}

#line 197  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cisco/enic/enic.ko/concurrency safety/emg/0/environment_model.c"
void emg_dispatch_irq_register_10(int arg0, enum irqreturn (*arg1)(int , void *), enum irqreturn (*arg2)(int , void *), void *arg3)
{
  #line 198 
  int ret;
  #line 199 
  struct emg_struct_interrupt_scenario_enic_isr_legacy_13 *cf_arg_13;
  #line 200 
  struct emg_struct_interrupt_scenario_enic_isr_legacy_13 *cf_arg_14;
  #line 201 
  if (ldv_undef_int() != 0) {
    #line 202 
    cf_arg_13 = (struct emg_struct_interrupt_scenario_enic_isr_legacy_13 *)ldv_xmalloc(40UL);
    #line 203 
    cf_arg_13->arg0 = arg0;
    #line 204 
    cf_arg_13->arg1 = arg1;
    #line 205 
    cf_arg_13->arg2 = arg2;
    #line 206 
    cf_arg_13->arg3 = arg3;
    #line 207 
    ret = pthread_create(& emg_thread_13,(pthread_attr_t *)0,& emg_interrupt_interrupt_scenario_enic_isr_legacy,(void *)cf_arg_13);
    #line 208 
    __VERIFIER_assume(ret == 0);
  }
  else {
    #line 211 
    cf_arg_14 = (struct emg_struct_interrupt_scenario_enic_isr_legacy_13 *)ldv_xmalloc(40UL);
    #line 212 
    cf_arg_14->arg0 = arg0;
    #line 213 
    cf_arg_14->arg1 = arg1;
    #line 214 
    cf_arg_14->arg2 = arg2;
    #line 215 
    cf_arg_14->arg3 = arg3;
    #line 216 
    ret = pthread_create(& emg_thread_14,(pthread_attr_t *)0,& emg_interrupt_interrupt_scenario_enic_isr_msi,(void *)cf_arg_14);
    #line 217 
    __VERIFIER_assume(ret == 0);
  }
  #line 219 
  return;
}

#line 223  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cisco/enic/enic.ko/concurrency safety/emg/0/environment_model.c"
void emg_dispatch_deregister_12(struct net_device *arg0)
{
  #line 224 
  int ret;
  #line 225 
  struct emg_struct_random_allocationless_scenario_enic_set_vf_port_15 *cf_arg_15;
  #line 226 
  ret = pthread_join(emg_thread_15,(void **)0);
  #line 227 
  __VERIFIER_assume(ret == 0);
  #line 228 
  return;
}

#line 232  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cisco/enic/enic.ko/concurrency safety/emg/0/environment_model.c"
void *emg_interrupt_interrupt_scenario_enic_isr_legacy(void *arg0)
{
  #line 235 
  enum irqreturn (*emg_13_callback)(int , void *);
  #line 236 
  void *emg_13_data;
  #line 237 
  int emg_13_line;
  #line 238 
  enum irqreturn emg_13_ret_val;
  #line 239 
  enum irqreturn (*emg_13_thread)(int , void *);
  #line 241 
  struct emg_struct_interrupt_scenario_enic_isr_legacy_13 *data = (struct emg_struct_interrupt_scenario_enic_isr_legacy_13 *)arg0;
  #line 244 
  emg_13_callback = & emg_wrapper_enic_isr_legacy;
  #line 247 
  if (data != (struct emg_struct_interrupt_scenario_enic_isr_legacy_13 *)0) {
    #line 248 
    emg_13_line = data->arg0;
    #line 249 
    emg_13_callback = data->arg1;
    #line 250 
    emg_13_thread = data->arg2;
    #line 251 
    emg_13_data = data->arg3;
    #line 252 
    ldv_free((void *)data);
  }
  #line 258 
  ldv_switch_to_interrupt_context();
  #line 262 
  emg_13_ret_val = emg_wrapper_enic_isr_legacy(emg_13_line,emg_13_data);
  #line 267 
  ldv_switch_to_process_context();
  #line 270 
  if (ldv_undef_int() != 0) {
    #line 272 
    __VERIFIER_assume(emg_13_ret_val == (unsigned int)IRQ_WAKE_THREAD);
    #line 276 
    if (emg_13_thread != (enum irqreturn (*)(int , void *))0) 
                                                              #line 277 
                                                              (*emg_13_thread)(emg_13_line,emg_13_data);
  }
  else 
       #line 282 
       __VERIFIER_assume(emg_13_ret_val != (unsigned int)IRQ_WAKE_THREAD);
  #line 290 
  return (void *)0;
}

#line 295  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cisco/enic/enic.ko/concurrency safety/emg/0/environment_model.c"
void *emg_interrupt_interrupt_scenario_enic_isr_msi(void *arg0)
{
  #line 298 
  enum irqreturn (*emg_14_callback)(int , void *);
  #line 299 
  void *emg_14_data;
  #line 300 
  int emg_14_line;
  #line 301 
  enum irqreturn emg_14_ret_val;
  #line 302 
  enum irqreturn (*emg_14_thread)(int , void *);
  #line 304 
  struct emg_struct_interrupt_scenario_enic_isr_legacy_13 *data = (struct emg_struct_interrupt_scenario_enic_isr_legacy_13 *)arg0;
  #line 307 
  emg_14_callback = & emg_wrapper_enic_isr_msi;
  #line 310 
  if (data != (struct emg_struct_interrupt_scenario_enic_isr_legacy_13 *)0) {
    #line 311 
    emg_14_line = data->arg0;
    #line 312 
    emg_14_callback = data->arg1;
    #line 313 
    emg_14_thread = data->arg2;
    #line 314 
    emg_14_data = data->arg3;
    #line 315 
    ldv_free((void *)data);
  }
  #line 321 
  ldv_switch_to_interrupt_context();
  #line 325 
  emg_14_ret_val = emg_wrapper_enic_isr_msi(emg_14_line,emg_14_data);
  #line 330 
  ldv_switch_to_process_context();
  #line 333 
  if (ldv_undef_int() != 0) {
    #line 335 
    __VERIFIER_assume(emg_14_ret_val == (unsigned int)IRQ_WAKE_THREAD);
    #line 339 
    if (emg_14_thread != (enum irqreturn (*)(int , void *))0) 
                                                              #line 340 
                                                              (*emg_14_thread)(emg_14_line,emg_14_data);
  }
  else 
       #line 345 
       __VERIFIER_assume(emg_14_ret_val != (unsigned int)IRQ_WAKE_THREAD);
  #line 353 
  return (void *)0;
}

#line 358  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cisco/enic/enic.ko/concurrency safety/emg/0/environment_model.c"
void *emg_net_random_allocationless_scenario_enic_set_vf_port(void *arg0)
{
  #line 361 
  struct net_device *emg_15_container;
  #line 362 
  struct sk_buff *emg_15_emg_param_0_12;
  #line 363 
  struct sk_buff *emg_15_emg_param_0_14;
  #line 364 
  struct sk_buff *emg_15_emg_param_0_39;
  #line 365 
  struct sk_buff *emg_15_emg_param_0_52;
  #line 366 
  int emg_15_emg_param_1_0;
  #line 367 
  void *emg_15_emg_param_1_10;
  #line 368 
  struct udp_tunnel_info *emg_15_emg_param_1_11;
  #line 369 
  struct udp_tunnel_info *emg_15_emg_param_1_15;
  #line 370 
  struct sk_buff *emg_15_emg_param_1_16;
  #line 371 
  int emg_15_emg_param_1_19;
  #line 372 
  int emg_15_emg_param_1_2;
  #line 373 
  struct ethtool_coalesce *emg_15_emg_param_1_21;
  #line 374 
  struct ethtool_drvinfo *emg_15_emg_param_1_22;
  #line 375 
  struct ethtool_stats *emg_15_emg_param_1_23;
  #line 376 
  struct ethtool_link_ksettings *emg_15_emg_param_1_25;
  #line 377 
  struct ethtool_ringparam *emg_15_emg_param_1_26;
  #line 378 
  unsigned int *emg_15_emg_param_1_27;
  #line 379 
  struct ethtool_rxnfc *emg_15_emg_param_1_30;
  #line 380 
  int emg_15_emg_param_1_32;
  #line 381 
  unsigned int emg_15_emg_param_1_33;
  #line 382 
  struct ethtool_ts_info *emg_15_emg_param_1_35;
  #line 383 
  struct ethtool_tunable *emg_15_emg_param_1_36;
  #line 384 
  int emg_15_emg_param_1_38;
  #line 385 
  unsigned short emg_15_emg_param_1_4;
  #line 386 
  struct rtnl_link_stats64 *emg_15_emg_param_1_41;
  #line 387 
  int emg_15_emg_param_1_42;
  #line 388 
  struct sk_buff *emg_15_emg_param_1_44;
  #line 389 
  void *emg_15_emg_param_1_47;
  #line 390 
  int emg_15_emg_param_1_48;
  #line 391 
  int emg_15_emg_param_1_50;
  #line 392 
  struct udp_tunnel_info *emg_15_emg_param_1_53;
  #line 393 
  struct udp_tunnel_info *emg_15_emg_param_1_54;
  #line 394 
  unsigned short emg_15_emg_param_1_55;
  #line 395 
  unsigned short emg_15_emg_param_1_57;
  #line 396 
  struct ethtool_coalesce *emg_15_emg_param_1_59;
  #line 397 
  unsigned short emg_15_emg_param_1_6;
  #line 398 
  unsigned int emg_15_emg_param_1_60;
  #line 399 
  struct ethtool_ringparam *emg_15_emg_param_1_61;
  #line 400 
  unsigned int *emg_15_emg_param_1_62;
  #line 401 
  struct ethtool_tunable *emg_15_emg_param_1_65;
  #line 402 
  struct rtnl_link_stats64 *emg_15_emg_param_1_8;
  #line 403 
  int emg_15_emg_param_1_9;
  #line 404 
  struct nlattr **emg_15_emg_param_2_1;
  #line 405 
  unsigned long long emg_15_emg_param_2_13;
  #line 406 
  unsigned short emg_15_emg_param_2_17;
  #line 407 
  struct sk_buff *emg_15_emg_param_2_20;
  #line 408 
  unsigned long long *emg_15_emg_param_2_24;
  #line 409 
  unsigned char *emg_15_emg_param_2_28;
  #line 410 
  unsigned char *emg_15_emg_param_2_3;
  #line 411 
  unsigned int *emg_15_emg_param_2_31;
  #line 412 
  unsigned char *emg_15_emg_param_2_34;
  #line 413 
  void *emg_15_emg_param_2_37;
  #line 414 
  unsigned long long emg_15_emg_param_2_40;
  #line 415 
  struct sk_buff *emg_15_emg_param_2_43;
  #line 416 
  unsigned short emg_15_emg_param_2_45;
  #line 417 
  unsigned char *emg_15_emg_param_2_49;
  #line 418 
  unsigned short emg_15_emg_param_2_5;
  #line 419 
  struct nlattr **emg_15_emg_param_2_51;
  #line 420 
  unsigned short emg_15_emg_param_2_56;
  #line 421 
  unsigned short emg_15_emg_param_2_58;
  #line 422 
  unsigned char *emg_15_emg_param_2_63;
  #line 423 
  void *emg_15_emg_param_2_66;
  #line 424 
  unsigned short emg_15_emg_param_2_7;
  #line 425 
  unsigned int emg_15_emg_param_3_18;
  #line 426 
  unsigned char *emg_15_emg_param_3_29;
  #line 427 
  unsigned int emg_15_emg_param_3_46;
  #line 428 
  unsigned char emg_15_emg_param_3_64;
  #line 429 
  int emg_repeat_cnt_call_15 = 1;
  #line 431 
  struct emg_struct_random_allocationless_scenario_enic_set_vf_port_15 *data = (struct emg_struct_random_allocationless_scenario_enic_set_vf_port_15 *)arg0;
  #line 436 
  if (data != (struct emg_struct_random_allocationless_scenario_enic_set_vf_port_15 *)0) {
    #line 437 
    emg_15_container = data->arg0;
    #line 438 
    ldv_free((void *)data);
  }
  #line 443 
  goto emg_call_15;
  #line 447 
  return (void *)0;
  #line 450 
  emg_call_15: 
               #line 450 
  ;
  #line 451 
  switch (ldv_undef_int()) {
    #line 452 
    case 0: 
            #line 452 
    ;
    #line 454 
    emg_15_emg_param_1_65 = (struct ethtool_tunable *)ldv_xmalloc_unknown_size(0UL);
    #line 454 
    emg_15_emg_param_1_65 = emg_15_emg_param_1_65;
    #line 455 
    emg_15_emg_param_2_66 = ldv_xmalloc_unknown_size(0UL);
    #line 455 
    emg_15_emg_param_2_66 = emg_15_emg_param_2_66;
    #line 459 
    emg_wrapper_enic_set_tunable(emg_15_container,emg_15_emg_param_1_65,emg_15_emg_param_2_66);
    #line 463 
    ldv_free((void *)emg_15_emg_param_1_65);
    #line 464 
    ldv_free(emg_15_emg_param_2_66);
    #line 466 
    break;
    #line 468 
    case 1: 
            #line 468 
    ;
    #line 470 
    emg_15_emg_param_1_62 = (unsigned int *)ldv_xmalloc_unknown_size(0UL);
    #line 470 
    emg_15_emg_param_1_62 = emg_15_emg_param_1_62;
    #line 471 
    emg_15_emg_param_2_63 = (unsigned char *)ldv_xmalloc_unknown_size(0UL);
    #line 471 
    emg_15_emg_param_2_63 = emg_15_emg_param_2_63;
    #line 475 
    emg_wrapper_enic_set_rxfh(emg_15_container,emg_15_emg_param_1_62,emg_15_emg_param_2_63,(unsigned char)((int)emg_15_emg_param_3_64));
    #line 479 
    ldv_free((void *)emg_15_emg_param_1_62);
    #line 480 
    ldv_free((void *)emg_15_emg_param_2_63);
    #line 482 
    break;
    #line 484 
    case 2: 
            #line 484 
    ;
    #line 486 
    emg_15_emg_param_1_61 = (struct ethtool_ringparam *)ldv_xmalloc_unknown_size(0UL);
    #line 486 
    emg_15_emg_param_1_61 = emg_15_emg_param_1_61;
    #line 490 
    emg_wrapper_enic_set_ringparam(emg_15_container,emg_15_emg_param_1_61);
    #line 494 
    ldv_free((void *)emg_15_emg_param_1_61);
    #line 496 
    break;
    #line 498 
    case 3: 
            #line 498 
    ;
    #line 500 
    emg_wrapper_enic_set_msglevel(emg_15_container,emg_15_emg_param_1_60);
    #line 502 
    break;
    #line 504 
    case 4: 
            #line 504 
    ;
    #line 506 
    emg_15_emg_param_1_59 = (struct ethtool_coalesce *)ldv_xmalloc_unknown_size(0UL);
    #line 506 
    emg_15_emg_param_1_59 = emg_15_emg_param_1_59;
    #line 510 
    emg_wrapper_enic_set_coalesce(emg_15_container,emg_15_emg_param_1_59);
    #line 514 
    ldv_free((void *)emg_15_emg_param_1_59);
    #line 516 
    break;
    #line 518 
    case 5: 
            #line 518 
    ;
    #line 520 
    enic_vlan_rx_kill_vid(emg_15_container,(unsigned short)((int)emg_15_emg_param_1_57),(unsigned short)((int)emg_15_emg_param_2_58));
    #line 522 
    break;
    #line 524 
    case 6: 
            #line 524 
    ;
    #line 526 
    enic_vlan_rx_add_vid(emg_15_container,(unsigned short)((int)emg_15_emg_param_1_55),(unsigned short)((int)emg_15_emg_param_2_56));
    #line 528 
    break;
    #line 530 
    case 7: 
            #line 530 
    ;
    #line 532 
    (*emg_alias_eth_validate_addr)(emg_15_container);
    #line 534 
    break;
    #line 536 
    case 8: 
            #line 536 
    ;
    #line 538 
    emg_15_emg_param_1_54 = (struct udp_tunnel_info *)ldv_xmalloc_unknown_size(0UL);
    #line 538 
    emg_15_emg_param_1_54 = emg_15_emg_param_1_54;
    #line 542 
    emg_wrapper_enic_udp_tunnel_del(emg_15_container,emg_15_emg_param_1_54);
    #line 546 
    ldv_free((void *)emg_15_emg_param_1_54);
    #line 548 
    break;
    #line 550 
    case 9: 
            #line 550 
    ;
    #line 552 
    emg_15_emg_param_1_53 = (struct udp_tunnel_info *)ldv_xmalloc_unknown_size(0UL);
    #line 552 
    emg_15_emg_param_1_53 = emg_15_emg_param_1_53;
    #line 556 
    emg_wrapper_enic_udp_tunnel_add(emg_15_container,emg_15_emg_param_1_53);
    #line 560 
    ldv_free((void *)emg_15_emg_param_1_53);
    #line 562 
    break;
    #line 564 
    case 10: 
             #line 564 
    ;
    #line 566 
    emg_wrapper_enic_tx_timeout(emg_15_container);
    #line 568 
    break;
    #line 570 
    case 11: 
             #line 570 
    ;
    #line 572 
    emg_15_emg_param_0_52 = (struct sk_buff *)ldv_xmalloc_unknown_size(0UL);
    #line 572 
    emg_15_emg_param_0_52 = emg_15_emg_param_0_52;
    #line 576 
    emg_wrapper_enic_hard_start_xmit(emg_15_emg_param_0_52,emg_15_container);
    #line 580 
    ldv_free((void *)emg_15_emg_param_0_52);
    #line 582 
    break;
    #line 584 
    case 12: 
             #line 584 
    ;
    #line 586 
    emg_15_emg_param_2_51 = (struct nlattr **)ldv_xmalloc_unknown_size(0UL);
    #line 586 
    emg_15_emg_param_2_51 = emg_15_emg_param_2_51;
    #line 590 
    emg_wrapper_enic_set_vf_port(emg_15_container,emg_15_emg_param_1_50,emg_15_emg_param_2_51);
    #line 594 
    ldv_free((void *)emg_15_emg_param_2_51);
    #line 596 
    break;
    #line 598 
    case 13: 
             #line 598 
    ;
    #line 600 
    emg_15_emg_param_2_49 = (unsigned char *)ldv_xmalloc_unknown_size(0UL);
    #line 600 
    emg_15_emg_param_2_49 = emg_15_emg_param_2_49;
    #line 604 
    emg_wrapper_enic_set_vf_mac(emg_15_container,emg_15_emg_param_1_48,emg_15_emg_param_2_49);
    #line 608 
    ldv_free((void *)emg_15_emg_param_2_49);
    #line 610 
    break;
    #line 612 
    case 14: 
             #line 612 
    ;
    #line 614 
    emg_wrapper_enic_set_rx_mode(emg_15_container);
    #line 616 
    break;
    #line 618 
    case 15: 
             #line 618 
    ;
    #line 620 
    emg_15_emg_param_1_47 = ldv_xmalloc_unknown_size(0UL);
    #line 620 
    emg_15_emg_param_1_47 = emg_15_emg_param_1_47;
    #line 624 
    emg_wrapper_enic_set_mac_address(emg_15_container,emg_15_emg_param_1_47);
    #line 628 
    ldv_free(emg_15_emg_param_1_47);
    #line 630 
    break;
    #line 632 
    case 16: 
             #line 632 
    ;
    #line 634 
    emg_15_emg_param_1_44 = (struct sk_buff *)ldv_xmalloc_unknown_size(0UL);
    #line 634 
    emg_15_emg_param_1_44 = emg_15_emg_param_1_44;
    #line 638 
    enic_rx_flow_steer(emg_15_container,emg_15_emg_param_1_44,(unsigned short)((int)emg_15_emg_param_2_45),emg_15_emg_param_3_46);
    #line 642 
    ldv_free((void *)emg_15_emg_param_1_44);
    #line 644 
    break;
    #line 646 
    case 17: 
             #line 646 
    ;
    #line 648 
    emg_wrapper_enic_poll_controller(emg_15_container);
    #line 650 
    break;
    #line 652 
    case 18: 
             #line 652 
    ;
    #line 654 
    emg_15_emg_param_2_43 = (struct sk_buff *)ldv_xmalloc_unknown_size(0UL);
    #line 654 
    emg_15_emg_param_2_43 = emg_15_emg_param_2_43;
    #line 658 
    emg_wrapper_enic_get_vf_port(emg_15_container,emg_15_emg_param_1_42,emg_15_emg_param_2_43);
    #line 662 
    ldv_free((void *)emg_15_emg_param_2_43);
    #line 664 
    break;
    #line 666 
    case 19: 
             #line 666 
    ;
    #line 668 
    emg_15_emg_param_1_41 = (struct rtnl_link_stats64 *)ldv_xmalloc_unknown_size(0UL);
    #line 668 
    emg_15_emg_param_1_41 = emg_15_emg_param_1_41;
    #line 672 
    emg_wrapper_enic_get_stats(emg_15_container,emg_15_emg_param_1_41);
    #line 676 
    ldv_free((void *)emg_15_emg_param_1_41);
    #line 678 
    break;
    #line 680 
    case 20: 
             #line 680 
    ;
    #line 682 
    emg_15_emg_param_0_39 = (struct sk_buff *)ldv_xmalloc_unknown_size(0UL);
    #line 682 
    emg_15_emg_param_0_39 = emg_15_emg_param_0_39;
    #line 686 
    emg_wrapper_enic_features_check(emg_15_emg_param_0_39,emg_15_container,emg_15_emg_param_2_40);
    #line 690 
    ldv_free((void *)emg_15_emg_param_0_39);
    #line 692 
    break;
    #line 694 
    case 21: 
             #line 694 
    ;
    #line 696 
    emg_wrapper_enic_change_mtu(emg_15_container,emg_15_emg_param_1_38);
    #line 698 
    break;
    #line 700 
    case 22: 
             #line 700 
    ;
    #line 702 
    emg_15_emg_param_1_36 = (struct ethtool_tunable *)ldv_xmalloc_unknown_size(0UL);
    #line 702 
    emg_15_emg_param_1_36 = emg_15_emg_param_1_36;
    #line 703 
    emg_15_emg_param_2_37 = ldv_xmalloc_unknown_size(0UL);
    #line 703 
    emg_15_emg_param_2_37 = emg_15_emg_param_2_37;
    #line 707 
    emg_wrapper_enic_get_tunable(emg_15_container,emg_15_emg_param_1_36,emg_15_emg_param_2_37);
    #line 711 
    ldv_free((void *)emg_15_emg_param_1_36);
    #line 712 
    ldv_free(emg_15_emg_param_2_37);
    #line 714 
    break;
    #line 716 
    case 23: 
             #line 716 
    ;
    #line 718 
    emg_15_emg_param_1_35 = (struct ethtool_ts_info *)ldv_xmalloc_unknown_size(0UL);
    #line 718 
    emg_15_emg_param_1_35 = emg_15_emg_param_1_35;
    #line 722 
    emg_wrapper_enic_get_ts_info(emg_15_container,emg_15_emg_param_1_35);
    #line 726 
    ldv_free((void *)emg_15_emg_param_1_35);
    #line 728 
    break;
    #line 730 
    case 24: 
             #line 730 
    ;
    #line 732 
    emg_15_emg_param_2_34 = (unsigned char *)ldv_xmalloc_unknown_size(0UL);
    #line 732 
    emg_15_emg_param_2_34 = emg_15_emg_param_2_34;
    #line 736 
    emg_wrapper_enic_get_strings(emg_15_container,emg_15_emg_param_1_33,emg_15_emg_param_2_34);
    #line 740 
    ldv_free((void *)emg_15_emg_param_2_34);
    #line 742 
    break;
    #line 744 
    case 25: 
             #line 744 
    ;
    #line 746 
    emg_wrapper_enic_get_sset_count(emg_15_container,emg_15_emg_param_1_32);
    #line 748 
    break;
    #line 750 
    case 26: 
             #line 750 
    ;
    #line 752 
    emg_15_emg_param_1_30 = (struct ethtool_rxnfc *)ldv_xmalloc_unknown_size(0UL);
    #line 752 
    emg_15_emg_param_1_30 = emg_15_emg_param_1_30;
    #line 753 
    emg_15_emg_param_2_31 = (unsigned int *)ldv_xmalloc_unknown_size(0UL);
    #line 753 
    emg_15_emg_param_2_31 = emg_15_emg_param_2_31;
    #line 757 
    emg_wrapper_enic_get_rxnfc(emg_15_container,emg_15_emg_param_1_30,emg_15_emg_param_2_31);
    #line 761 
    ldv_free((void *)emg_15_emg_param_1_30);
    #line 762 
    ldv_free((void *)emg_15_emg_param_2_31);
    #line 764 
    break;
    #line 766 
    case 27: 
             #line 766 
    ;
    #line 768 
    emg_wrapper_enic_get_rxfh_key_size(emg_15_container);
    #line 770 
    break;
    #line 772 
    case 28: 
             #line 772 
    ;
    #line 774 
    emg_15_emg_param_1_27 = (unsigned int *)ldv_xmalloc_unknown_size(0UL);
    #line 774 
    emg_15_emg_param_1_27 = emg_15_emg_param_1_27;
    #line 775 
    emg_15_emg_param_2_28 = (unsigned char *)ldv_xmalloc_unknown_size(0UL);
    #line 775 
    emg_15_emg_param_2_28 = emg_15_emg_param_2_28;
    #line 776 
    emg_15_emg_param_3_29 = (unsigned char *)ldv_xmalloc_unknown_size(0UL);
    #line 776 
    emg_15_emg_param_3_29 = emg_15_emg_param_3_29;
    #line 780 
    emg_wrapper_enic_get_rxfh(emg_15_container,emg_15_emg_param_1_27,emg_15_emg_param_2_28,emg_15_emg_param_3_29);
    #line 784 
    ldv_free((void *)emg_15_emg_param_1_27);
    #line 785 
    ldv_free((void *)emg_15_emg_param_2_28);
    #line 786 
    ldv_free((void *)emg_15_emg_param_3_29);
    #line 788 
    break;
    #line 790 
    case 29: 
             #line 790 
    ;
    #line 792 
    emg_15_emg_param_1_26 = (struct ethtool_ringparam *)ldv_xmalloc_unknown_size(0UL);
    #line 792 
    emg_15_emg_param_1_26 = emg_15_emg_param_1_26;
    #line 796 
    emg_wrapper_enic_get_ringparam(emg_15_container,emg_15_emg_param_1_26);
    #line 800 
    ldv_free((void *)emg_15_emg_param_1_26);
    #line 802 
    break;
    #line 804 
    case 30: 
             #line 804 
    ;
    #line 806 
    emg_wrapper_enic_get_msglevel(emg_15_container);
    #line 808 
    break;
    #line 810 
    case 31: 
             #line 810 
    ;
    #line 812 
    emg_15_emg_param_1_25 = (struct ethtool_link_ksettings *)ldv_xmalloc_unknown_size(0UL);
    #line 812 
    emg_15_emg_param_1_25 = emg_15_emg_param_1_25;
    #line 816 
    emg_wrapper_enic_get_ksettings(emg_15_container,emg_15_emg_param_1_25);
    #line 820 
    ldv_free((void *)emg_15_emg_param_1_25);
    #line 822 
    break;
    #line 824 
    case 32: 
             #line 824 
    ;
    #line 826 
    ethtool_op_get_link(emg_15_container);
    #line 828 
    break;
    #line 830 
    case 33: 
             #line 830 
    ;
    #line 832 
    emg_15_emg_param_1_23 = (struct ethtool_stats *)ldv_xmalloc_unknown_size(0UL);
    #line 832 
    emg_15_emg_param_1_23 = emg_15_emg_param_1_23;
    #line 833 
    emg_15_emg_param_2_24 = (unsigned long long *)ldv_xmalloc_unknown_size(0UL);
    #line 833 
    emg_15_emg_param_2_24 = emg_15_emg_param_2_24;
    #line 837 
    emg_wrapper_enic_get_ethtool_stats(emg_15_container,emg_15_emg_param_1_23,emg_15_emg_param_2_24);
    #line 841 
    ldv_free((void *)emg_15_emg_param_1_23);
    #line 842 
    ldv_free((void *)emg_15_emg_param_2_24);
    #line 844 
    break;
    #line 846 
    case 34: 
             #line 846 
    ;
    #line 848 
    emg_15_emg_param_1_22 = (struct ethtool_drvinfo *)ldv_xmalloc_unknown_size(0UL);
    #line 848 
    emg_15_emg_param_1_22 = emg_15_emg_param_1_22;
    #line 852 
    emg_wrapper_enic_get_drvinfo(emg_15_container,emg_15_emg_param_1_22);
    #line 856 
    ldv_free((void *)emg_15_emg_param_1_22);
    #line 858 
    break;
    #line 860 
    case 35: 
             #line 860 
    ;
    #line 862 
    emg_15_emg_param_1_21 = (struct ethtool_coalesce *)ldv_xmalloc_unknown_size(0UL);
    #line 862 
    emg_15_emg_param_1_21 = emg_15_emg_param_1_21;
    #line 866 
    emg_wrapper_enic_get_coalesce(emg_15_container,emg_15_emg_param_1_21);
    #line 870 
    ldv_free((void *)emg_15_emg_param_1_21);
    #line 872 
    break;
    #line 874 
    case 36: 
             #line 874 
    ;
    #line 876 
    emg_15_emg_param_2_20 = (struct sk_buff *)ldv_xmalloc_unknown_size(0UL);
    #line 876 
    emg_15_emg_param_2_20 = emg_15_emg_param_2_20;
    #line 880 
    emg_wrapper_enic_get_vf_port(emg_15_container,emg_15_emg_param_1_19,emg_15_emg_param_2_20);
    #line 884 
    ldv_free((void *)emg_15_emg_param_2_20);
    #line 886 
    break;
    #line 888 
    case 37: 
             #line 888 
    ;
    #line 890 
    emg_15_emg_param_1_16 = (struct sk_buff *)ldv_xmalloc_unknown_size(0UL);
    #line 890 
    emg_15_emg_param_1_16 = emg_15_emg_param_1_16;
    #line 894 
    enic_rx_flow_steer(emg_15_container,emg_15_emg_param_1_16,(unsigned short)((int)emg_15_emg_param_2_17),emg_15_emg_param_3_18);
    #line 898 
    ldv_free((void *)emg_15_emg_param_1_16);
    #line 900 
    break;
    #line 902 
    case 38: 
             #line 902 
    ;
    #line 904 
    emg_15_emg_param_1_15 = (struct udp_tunnel_info *)ldv_xmalloc_unknown_size(0UL);
    #line 904 
    emg_15_emg_param_1_15 = emg_15_emg_param_1_15;
    #line 908 
    emg_wrapper_enic_udp_tunnel_add(emg_15_container,emg_15_emg_param_1_15);
    #line 912 
    ldv_free((void *)emg_15_emg_param_1_15);
    #line 914 
    break;
    #line 916 
    case 39: 
             #line 916 
    ;
    #line 918 
    emg_15_emg_param_0_14 = (struct sk_buff *)ldv_xmalloc_unknown_size(0UL);
    #line 918 
    emg_15_emg_param_0_14 = emg_15_emg_param_0_14;
    #line 922 
    emg_wrapper_enic_hard_start_xmit(emg_15_emg_param_0_14,emg_15_container);
    #line 926 
    ldv_free((void *)emg_15_emg_param_0_14);
    #line 928 
    break;
    #line 930 
    case 40: 
             #line 930 
    ;
    #line 932 
    emg_15_emg_param_0_12 = (struct sk_buff *)ldv_xmalloc_unknown_size(0UL);
    #line 932 
    emg_15_emg_param_0_12 = emg_15_emg_param_0_12;
    #line 936 
    emg_wrapper_enic_features_check(emg_15_emg_param_0_12,emg_15_container,emg_15_emg_param_2_13);
    #line 940 
    ldv_free((void *)emg_15_emg_param_0_12);
    #line 942 
    break;
    #line 944 
    case 41: 
             #line 944 
    ;
    #line 946 
    emg_15_emg_param_1_11 = (struct udp_tunnel_info *)ldv_xmalloc_unknown_size(0UL);
    #line 946 
    emg_15_emg_param_1_11 = emg_15_emg_param_1_11;
    #line 950 
    emg_wrapper_enic_udp_tunnel_del(emg_15_container,emg_15_emg_param_1_11);
    #line 954 
    ldv_free((void *)emg_15_emg_param_1_11);
    #line 956 
    break;
    #line 958 
    case 42: 
             #line 958 
    ;
    #line 960 
    emg_wrapper_enic_set_rx_mode(emg_15_container);
    #line 962 
    break;
    #line 964 
    case 43: 
             #line 964 
    ;
    #line 966 
    emg_15_emg_param_1_10 = ldv_xmalloc_unknown_size(0UL);
    #line 966 
    emg_15_emg_param_1_10 = emg_15_emg_param_1_10;
    #line 970 
    emg_wrapper_enic_set_mac_address_dynamic(emg_15_container,emg_15_emg_param_1_10);
    #line 974 
    ldv_free(emg_15_emg_param_1_10);
    #line 976 
    break;
    #line 978 
    case 44: 
             #line 978 
    ;
    #line 980 
    emg_wrapper_enic_change_mtu(emg_15_container,emg_15_emg_param_1_9);
    #line 982 
    break;
    #line 984 
    case 45: 
             #line 984 
    ;
    #line 986 
    emg_wrapper_enic_tx_timeout(emg_15_container);
    #line 988 
    break;
    #line 990 
    case 46: 
             #line 990 
    ;
    #line 992 
    emg_15_emg_param_1_8 = (struct rtnl_link_stats64 *)ldv_xmalloc_unknown_size(0UL);
    #line 992 
    emg_15_emg_param_1_8 = emg_15_emg_param_1_8;
    #line 996 
    emg_wrapper_enic_get_stats(emg_15_container,emg_15_emg_param_1_8);
    #line 1000 
    ldv_free((void *)emg_15_emg_param_1_8);
    #line 1002 
    break;
    #line 1004 
    case 47: 
             #line 1004 
    ;
    #line 1006 
    enic_vlan_rx_add_vid(emg_15_container,(unsigned short)((int)emg_15_emg_param_1_6),(unsigned short)((int)emg_15_emg_param_2_7));
    #line 1008 
    break;
    #line 1010 
    case 48: 
             #line 1010 
    ;
    #line 1012 
    enic_vlan_rx_kill_vid(emg_15_container,(unsigned short)((int)emg_15_emg_param_1_4),(unsigned short)((int)emg_15_emg_param_2_5));
    #line 1014 
    break;
    #line 1016 
    case 49: 
             #line 1016 
    ;
    #line 1018 
    emg_wrapper_enic_poll_controller(emg_15_container);
    #line 1020 
    break;
    #line 1022 
    case 50: 
             #line 1022 
    ;
    #line 1024 
    emg_15_emg_param_2_3 = (unsigned char *)ldv_xmalloc_unknown_size(0UL);
    #line 1024 
    emg_15_emg_param_2_3 = emg_15_emg_param_2_3;
    #line 1028 
    emg_wrapper_enic_set_vf_mac(emg_15_container,emg_15_emg_param_1_2,emg_15_emg_param_2_3);
    #line 1032 
    ldv_free((void *)emg_15_emg_param_2_3);
    #line 1034 
    break;
    #line 1036 
    case 51: 
             #line 1036 
    ;
    #line 1038 
    emg_15_emg_param_2_1 = (struct nlattr **)ldv_xmalloc_unknown_size(0UL);
    #line 1038 
    emg_15_emg_param_2_1 = emg_15_emg_param_2_1;
    #line 1042 
    emg_wrapper_enic_set_vf_port(emg_15_container,emg_15_emg_param_1_0,emg_15_emg_param_2_1);
    #line 1046 
    ldv_free((void *)emg_15_emg_param_2_1);
    #line 1049 
    if (emg_repeat_cnt_call_15 > 0) {
      #line 1050 
      emg_repeat_cnt_call_15 --;
      #line 1052 
      goto emg_call_15;
    }
    else 
         #line 1054 
         __VERIFIER_assume(0);
    #line 1058 
    break;
    #line 1060 
    case 52: 
             #line 1060 
    ;
    #line 1064 
    break;
    #line 1066 
    default: 
             #line 1066 
    ;
    #line 1066 
    __VERIFIER_assume(0);
  }
  #line 1069 
  return (void *)0;
}

#line 1074  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cisco/enic/enic.ko/concurrency safety/emg/0/environment_model.c"
void *emg_pci_pci_scenario_enic_driver(void *arg0)
{
  #line 1077 
  int emg_16_choice;
  #line 1078 
  struct pci_driver *emg_16_container;
  #line 1079 
  struct pci_device_id *emg_16_device_id;
  #line 1080 
  struct pci_dev *emg_16_resource_0;
  #line 1081 
  struct pm_message emg_16_resource_1;
  #line 1082 
  int emg_16_ret;
  #line 1083 
  int emg_repeat_cnt_call_16_0 = 1;
  #line 1084 
  int emg_repeat_cnt_call_16_1 = 1;
  #line 1085 
  int emg_repeat_cnt_main_16_0 = 1;
  #line 1086 
  int emg_repeat_cnt_main_16_1 = 1;
  #line 1088 
  struct emg_struct_pci_scenario_enic_driver_16 *data = (struct emg_struct_pci_scenario_enic_driver_16 *)arg0;
  #line 1092 
  emg_16_choice = 0;
  #line 1093 
  emg_16_ret = ldv_undef_int();
  #line 1094 
  emg_16_choice = 0;
  #line 1095 
  emg_16_container = emg_alias_enic_driver;
  #line 1096 
  emg_16_ret = ldv_undef_int();
  #line 1098 
  __VERIFIER_assume(data->arg0 == emg_alias_enic_driver);
  #line 1100 
  if (data != (struct emg_struct_pci_scenario_enic_driver_16 *)0) {
    #line 1101 
    emg_16_container = data->arg0;
    #line 1102 
    ldv_free((void *)data);
  }
  #line 1107 
  emg_16_resource_0 = (struct pci_dev *)ldv_xmalloc(3312UL);
  #line 1108 
  emg_16_choice = __ldv_undef_int_range(0,3);
  #line 1109 
  emg_16_device_id = emg_16_container->id_table + (unsigned long)emg_16_choice;
  #line 1113 
  goto emg_main_16;
  #line 1117 
  return (void *)0;
  #line 1120 
  emg_call_16: 
               #line 1120 
  ;
  #line 1121 
  switch (ldv_undef_int()) {
    #line 1122 
    case 0: 
            #line 1122 
    ;
    #line 1127 
    if (emg_repeat_cnt_call_16_0 > 0) {
      #line 1128 
      emg_repeat_cnt_call_16_0 --;
      #line 1130 
      goto emg_call_16;
    }
    else 
         #line 1132 
         __VERIFIER_assume(0);
    #line 1136 
    break;
    #line 1138 
    case 1: 
            #line 1138 
    ;
    #line 1140 
    if (emg_16_container->suspend != (int (*)(struct pci_dev *, pm_message_t ))0) 
      #line 1141 
      emg_16_ret = (*(emg_16_container->suspend))(emg_16_resource_0,emg_16_resource_1); else 
                                                                    #line 1143 
                                                                    emg_16_ret = ldv_undef_int();
    #line 1149 
    emg_16_ret = ldv_filter_err_code(emg_16_ret);
    #line 1153 
    if (emg_16_container->resume != (int (*)(struct pci_dev *))0) 
                                                                  #line 1154 
                                                                  (*(emg_16_container->resume))(emg_16_resource_0);
    #line 1158 
    if (emg_repeat_cnt_call_16_1 > 0) {
      #line 1159 
      emg_repeat_cnt_call_16_1 --;
      #line 1161 
      goto emg_call_16;
    }
    else 
         #line 1163 
         __VERIFIER_assume(0);
    #line 1167 
    break;
    #line 1169 
    case 2: 
            #line 1169 
    ;
    #line 1171 
    if (emg_16_container->shutdown != (void (*)(struct pci_dev *))0) 
      #line 1172 
      (*(emg_16_container->shutdown))(emg_16_resource_0);
    #line 1177 
    emg_wrapper_enic_remove(emg_16_resource_0);
    #line 1180 
    if (emg_repeat_cnt_main_16_0 > 0) {
      #line 1181 
      emg_repeat_cnt_main_16_0 --;
      #line 1183 
      goto emg_main_16;
    }
    else 
         #line 1185 
         __VERIFIER_assume(0);
    #line 1189 
    break;
    #line 1191 
    default: 
             #line 1191 
    ;
    #line 1191 
    __VERIFIER_assume(0);
  }
  #line 1194 
  return (void *)0;
  #line 1197 
  emg_main_16: 
               #line 1197 
  ;
  #line 1198 
  if (ldv_undef_int() != 0) {
    #line 1201 
    ldv_pre_probe();
    #line 1205 
    emg_16_ret = emg_wrapper_enic_probe(emg_16_resource_0,emg_16_device_id);
    #line 1210 
    emg_16_ret = ldv_post_probe(emg_16_ret);
    #line 1213 
    if (ldv_undef_int() != 0) {
      #line 1215 
      __VERIFIER_assume(emg_16_ret == 0);
      #line 1219 
      goto emg_call_16;
    }
    else 
         #line 1224 
         __VERIFIER_assume(emg_16_ret != 0);
    #line 1228 
    if (emg_repeat_cnt_main_16_1 > 0) {
      #line 1229 
      emg_repeat_cnt_main_16_1 --;
      #line 1231 
      goto emg_main_16;
    }
    else 
         #line 1233 
         __VERIFIER_assume(0);
  }
  else 
       #line 1239 
       ldv_free((void *)emg_16_resource_0);
  #line 1247 
  return (void *)0;
}

#line 1252  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cisco/enic/enic.ko/concurrency safety/emg/0/environment_model.c"
void *emg_timer_timer_scenario_4(void *arg0)
{
  #line 1255 
  struct timer_list *emg_17_container;
  #line 1256 
  unsigned long emg_17_emg_param_0_0;
  #line 1258 
  struct emg_struct_timer_scenario_4_17 *data = (struct emg_struct_timer_scenario_4_17 *)arg0;
  #line 1263 
  if (data != (struct emg_struct_timer_scenario_4_17 *)0) {
    #line 1264 
    emg_17_container = data->arg0;
    #line 1265 
    ldv_free((void *)data);
  }
  #line 1271 
  ldv_switch_to_interrupt_context();
  #line 1275 
  if (emg_17_container->function != (void (*)(struct timer_list *))0) 
    #line 1276 
    (*(emg_17_container->function))((struct timer_list *)emg_17_emg_param_0_0);
  #line 1282 
  ldv_switch_to_process_context();
  #line 1289 
  return (void *)0;
}

#line 1294  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cisco/enic/enic.ko/concurrency safety/emg/0/environment_model.c"
int emg___pci_register_driver(struct pci_driver *arg0, struct module *arg1, char *arg2)
{
  #line 1297 
  struct pci_driver *emg_2_pci_driver;
  #line 1299 
  emg_2_pci_driver = emg_alias_enic_driver;
  #line 1300 
  if (ldv_undef_int() != 0) {
    #line 1302 
    emg_2_pci_driver = arg0;
    #line 1306 
    emg_dispatch_register_2(emg_2_pci_driver);
    #line 1310 
    return 0;
  }
  else {
    #line 1314 
    return ldv_undef_int_negative();
  }
}

#line 1322  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cisco/enic/enic.ko/concurrency safety/emg/0/environment_model.c"
struct net_device *emg_alloc_etherdev_mqs(int arg0, unsigned int arg1, unsigned int arg2)
{
  #line 1325 
  struct net_device *emg_3_netdev;
  #line 1327 
  if (ldv_undef_int() != 0) {
    #line 1329 
    emg_3_netdev = (struct net_device *)ldv_xmalloc(3328UL);
    #line 1333 
    return emg_3_netdev;
  }
  else 
       #line 1337 
       return (struct net_device *)0;
}

#line 1345  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cisco/enic/enic.ko/concurrency safety/emg/0/environment_model.c"
int emg_del_timer_sync(struct timer_list *arg0)
{
  #line 1348 
  struct timer_list *emg_4_timer_list;
  #line 1351 
  emg_4_timer_list = arg0;
  #line 1355 
  emg_dispatch_instance_deregister_4(emg_4_timer_list);
  #line 1356 
  ;
  #line 1356 
  return 0;
}

#line 1362  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cisco/enic/enic.ko/concurrency safety/emg/0/environment_model.c"
void *emg_free_irq(unsigned int arg0, void *arg1)
{
  #line 1365 
  int emg_5_line;
  #line 1368 
  emg_5_line = (int)arg0;
  #line 1372 
  emg_dispatch_irq_deregister_5(emg_5_line);
  #line 1373 
  ;
  #line 1373 
  return (void *)0;
}

#line 1379  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cisco/enic/enic.ko/concurrency safety/emg/0/environment_model.c"
void emg_free_netdev(struct net_device *arg0)
{
  #line 1382 
  struct net_device *emg_6_netdev;
  #line 1385 
  emg_6_netdev = arg0;
  #line 1386 
  ldv_free((void *)emg_6_netdev);
  #line 1389 
  return;
}

#line 1394  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cisco/enic/enic.ko/concurrency safety/emg/0/environment_model.c"
int emg_mod_timer(struct timer_list *arg0, unsigned long arg1)
{
  #line 1397 
  struct timer_list *emg_7_timer_list;
  #line 1399 
  if (ldv_undef_int() != 0) {
    #line 1401 
    emg_7_timer_list = arg0;
    #line 1405 
    emg_dispatch_instance_register_7(emg_7_timer_list);
    #line 1409 
    return 1;
  }
  else 
       #line 1413 
       return 0;
}

#line 1421  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cisco/enic/enic.ko/concurrency safety/emg/0/environment_model.c"
void emg_pci_unregister_driver(struct pci_driver *arg0)
{
  #line 1424 
  struct pci_driver *emg_8_pci_driver;
  #line 1426 
  emg_8_pci_driver = emg_alias_enic_driver;
  #line 1428 
  emg_8_pci_driver = arg0;
  #line 1432 
  emg_dispatch_deregister_8(emg_8_pci_driver);
  #line 1435 
  return;
}

#line 1440  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cisco/enic/enic.ko/concurrency safety/emg/0/environment_model.c"
int emg_register_netdev(struct net_device *arg0)
{
  #line 1443 
  struct net_device *emg_9_netdev;
  #line 1444 
  int emg_9_ret;
  #line 1447 
  emg_9_ret = ldv_undef_int();
  #line 1448 
  emg_9_ret = ldv_undef_int();
  #line 1449 
  if (ldv_undef_int() != 0) {
    #line 1451 
    emg_9_netdev = arg0;
    #line 1455 
    emg_9_ret = emg_wrapper_enic_open(emg_9_netdev);
    #line 1458 
    if (ldv_undef_int() != 0) {
      #line 1460 
      __VERIFIER_assume(emg_9_ret == 0);
      #line 1464 
      emg_dispatch_register_9(emg_9_netdev);
      #line 1468 
      return 0;
    }
    else {
      #line 1472 
      __VERIFIER_assume(emg_9_ret != 0);
      #line 1473 
      ldv_failed_register_netdev();
      #line 1474 
      return ldv_undef_int_negative();
    }
  }
  else {
    #line 1479 
    ldv_failed_register_netdev();
    #line 1480 
    return ldv_undef_int_negative();
  }
}

#line 1488  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cisco/enic/enic.ko/concurrency safety/emg/0/environment_model.c"
int emg_request_irq(unsigned int arg0, enum irqreturn (*arg1)(int , void *), unsigned long arg2, char *arg3, void *arg4)
{
  #line 1491 
  enum irqreturn (*emg_10_callback)(int , void *);
  #line 1492 
  void *emg_10_data;
  #line 1493 
  int emg_10_line;
  #line 1494 
  enum irqreturn (*emg_10_thread)(int , void *);
  #line 1496 
  emg_10_callback = & emg_wrapper_enic_isr_legacy;
  #line 1497 
  if (ldv_undef_int() != 0) {
    #line 1499 
    emg_10_line = (int)arg0;
    #line 1500 
    emg_10_callback = arg1;
    #line 1501 
    emg_10_thread = (enum irqreturn (*)(int , void *))0;
    #line 1502 
    emg_10_data = arg4;
    #line 1506 
    emg_dispatch_irq_register_10(emg_10_line,emg_10_callback,emg_10_thread,emg_10_data);
    #line 1510 
    return 0;
  }
  else {
    #line 1514 
    return ldv_undef_int_negative();
  }
}

#line 1522  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cisco/enic/enic.ko/concurrency safety/emg/0/environment_model.c"
_Bool emg_schedule_work(struct work_struct *arg0)
{
  #line 1525 
  struct work_struct *emg_11_work_struct;
  #line 1527 
  if (ldv_undef_int() != 0) {
    #line 1529 
    emg_11_work_struct = arg0;
    #line 1533 
    if (emg_11_work_struct->func != (void (*)(struct work_struct *))0) 
      #line 1534 
      (*(emg_11_work_struct->func))(emg_11_work_struct);
    #line 1539 
    return (_Bool)1;
  }
  else 
       #line 1543 
       return (_Bool)0;
}

#line 1551  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cisco/enic/enic.ko/concurrency safety/emg/0/environment_model.c"
void emg_unregister_netdev(struct net_device *arg0)
{
  #line 1554 
  struct net_device *emg_12_netdev;
  #line 1557 
  emg_12_netdev = arg0;
  #line 1561 
  emg_wrapper_enic_stop(emg_12_netdev);
  #line 1565 
  emg_dispatch_deregister_12(emg_12_netdev);
  #line 1568 
  return;
}

#line 1573  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cisco/enic/enic.ko/concurrency safety/emg/0/environment_model.c"
void *emg_entry_point_insmod(void *arg0)
{
  #line 1576 
  int emg_1_ret;
  #line 1579 
  emg_1_ret = emg_enic_init_module();
  #line 1580 
  emg_1_ret = ldv_post_init(emg_1_ret);
  #line 1583 
  if (ldv_undef_int() != 0) {
    #line 1585 
    __VERIFIER_assume(emg_1_ret == 0);
    #line 1589 
    emg_enic_cleanup_module();
  }
  else 
       #line 1593 
       __VERIFIER_assume(emg_1_ret != 0);
  #line 1597 
  return (void *)0;
}

#line 1602  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cisco/enic/enic.ko/concurrency safety/emg/0/environment_model.c"
int main(void)
{
  #line 1604 
  ldv_initialize();
  #line 1606 
  emg_entry_point_insmod((void *)0);
  #line 1608 
  return 0;
}

