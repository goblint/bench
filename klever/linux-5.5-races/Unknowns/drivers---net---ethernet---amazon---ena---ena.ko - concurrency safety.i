/* Generated by Frama-C */
#line 106  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/compiler_types.h"
typedef signed char __s8;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef unsigned char __u8;
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef short __s16;
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef unsigned short __u16;
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef int __s32;
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef unsigned int __u32;
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef long long __s64;
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef unsigned long long __u64;
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef __s8 s8;
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/int-ll64.h"
typedef __u8 u8;
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/int-ll64.h"
typedef __s16 s16;
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/int-ll64.h"
typedef __u16 u16;
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/int-ll64.h"
typedef __s32 s32;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/int-ll64.h"
typedef __u32 u32;
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/int-ll64.h"
typedef __s64 s64;
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/int-ll64.h"
typedef __u64 u64;
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/uapi/asm/posix_types_64.h"
typedef long __kernel_long_t;
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef unsigned long __kernel_ulong_t;
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef int __kernel_pid_t;
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef unsigned int __kernel_uid32_t;
#line 50  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef unsigned int __kernel_gid32_t;
#line 51  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef __kernel_ulong_t __kernel_size_t;
#line 73  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef __kernel_long_t __kernel_ssize_t;
#line 88  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef long long __kernel_loff_t;
#line 91  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef long long __kernel_time64_t;
#line 92  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef __kernel_long_t __kernel_clock_t;
#line 93  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef int __kernel_timer_t;
#line 94  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef int __kernel_clockid_t;
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef __u16 __le16;
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef __u16 __be16;
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef __u32 __be32;
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef __u64 __be64;
#line 35  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef __u16 __sum16;
#line 37  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef __u32 __wsum;
#line 38  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef unsigned int __poll_t;
#line 53  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef u32 __kernel_dev_t;
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_dev_t dev_t;
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef unsigned short umode_t;
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_pid_t pid_t;
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_clockid_t clockid_t;
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef _Bool bool;
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_uid32_t uid_t;
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_gid32_t gid_t;
#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_loff_t loff_t;
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_size_t size_t;
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_ssize_t ssize_t;
#line 103  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef s32 int32_t;
#line 109  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef u32 uint32_t;
#line 115  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef u64 sector_t;
#line 131  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef u64 blkcnt_t;
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef u64 dma_addr_t;
#line 149  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef unsigned int gfp_t;
#line 154  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef unsigned int slab_flags_t;
#line 155  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef unsigned int fmode_t;
#line 156  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef u64 phys_addr_t;
#line 159  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef phys_addr_t resource_size_t;
#line 170  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
struct __anonstruct_atomic_t_6 {
   int counter ;
};
#line 170  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef struct __anonstruct_atomic_t_6 atomic_t;
#line 174  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
struct __anonstruct_atomic64_t_7 {
   s64 counter ;
};
#line 174  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef struct __anonstruct_atomic64_t_7 atomic64_t;
#line 181  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
struct list_head {
   struct list_head *next ;
   struct list_head *prev ;
};
#line 185 
struct hlist_node;
#line 185  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
struct hlist_head {
   struct hlist_node *first ;
};
#line 189  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
struct hlist_node {
   struct hlist_node *next ;
   struct hlist_node **pprev ;
};
#line 219  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
struct callback_head {
   struct callback_head *next ;
   void (*func)(struct callback_head *) ;
} __attribute__((__aligned__(8)));
#line 14  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amazon/ena/ena.ko/concurrency safety/0/concurrency safety/weaver/ena_netdev.i.aux"
struct task_struct;
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/export.h"
struct module;
#line 60  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/export.h"
struct kernel_symbol {
   int value_offset ;
   int name_offset ;
   int namespace_offset ;
};
#line 136  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/init.h"
typedef void (*ctor_fn_t)(void);
#line 139 
struct file_system_type;
#line 83  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/printk.h"
struct ctl_table;
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jump_label.h"
struct jump_entry;
#line 87 
struct static_key_mod;
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jump_label.h"
union __anonunion_8 {
   unsigned long type ;
   struct jump_entry *entries ;
   struct static_key_mod *next ;
};
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jump_label.h"
struct static_key {
   atomic_t enabled ;
   union __anonunion_8 __anonCompField_static_key_4 ;
};
#line 122  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jump_label.h"
struct jump_entry {
   s32 code ;
   s32 target ;
   long key ;
};
#line 346  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jump_label.h"
struct static_key_true {
   struct static_key key ;
};
#line 350  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jump_label.h"
struct static_key_false {
   struct static_key key ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dynamic_debug.h"
union __anonunion_key_9 {
   struct static_key_true dd_key_true ;
   struct static_key_false dd_key_false ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dynamic_debug.h"
struct _ddebug {
   char *modname ;
   char *function ;
   char *filename ;
   char *format ;
   unsigned int lineno : 18 ;
   unsigned int flags : 8 ;
   union __anonunion_key_9 key ;
} __attribute__((__aligned__(8)));
#line 59 
struct device;
#line 65 
struct net_device;
#line 476  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/printk.h"
struct file_operations;
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/div64.h"
struct completion;
#line 88 
struct pt_regs;
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bug.h"
struct bug_entry {
   int bug_addr_disp ;
   int file_disp ;
   unsigned short line ;
   unsigned short flags ;
};
#line 188  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/math64.h"
typedef __s64 time64_t;
#line 7  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/time_types.h"
struct __kernel_timespec {
   __kernel_time64_t tv_sec ;
   long long tv_nsec ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/time64.h"
struct timespec64 {
   time64_t tv_sec ;
   long tv_nsec ;
};
#line 165 
struct old_timespec32;
#line 166 
struct pollfd;
#line 167 
enum timespec_type {
    TT_NONE = 0,
    TT_NATIVE = 1,
    TT_COMPAT = 2
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/restart_block.h"
struct __anonstruct_futex_27 {
   u32 *uaddr ;
   u32 val ;
   u32 flags ;
   u32 bitset ;
   u64 time ;
   u32 *uaddr2 ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/restart_block.h"
union __anonunion_29 {
   struct __kernel_timespec *rmtp ;
   struct old_timespec32 *compat_rmtp ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/restart_block.h"
struct __anonstruct_nanosleep_28 {
   clockid_t clockid ;
   enum timespec_type type ;
   union __anonunion_29 __anonCompField___anonstruct_nanosleep_28_5 ;
   u64 expires ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/restart_block.h"
struct __anonstruct_poll_30 {
   struct pollfd *ufds ;
   int nfds ;
   int has_timeout ;
   unsigned long tv_sec ;
   unsigned long tv_nsec ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/restart_block.h"
union __anonunion_26 {
   struct __anonstruct_futex_27 futex ;
   struct __anonstruct_nanosleep_28 nanosleep ;
   struct __anonstruct_poll_30 poll ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/restart_block.h"
struct restart_block {
   long (*fn)(struct restart_block *) ;
   union __anonunion_26 __anonCompField_restart_block_6 ;
};
#line 58  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/page_64.h"
struct page;
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/getorder.h"
struct mm_struct;
#line 49 
struct io_bitmap;
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/ptrace.h"
struct pt_regs {
   unsigned long r15 ;
   unsigned long r14 ;
   unsigned long r13 ;
   unsigned long r12 ;
   unsigned long bp ;
   unsigned long bx ;
   unsigned long r11 ;
   unsigned long r10 ;
   unsigned long r9 ;
   unsigned long r8 ;
   unsigned long ax ;
   unsigned long cx ;
   unsigned long dx ;
   unsigned long si ;
   unsigned long di ;
   unsigned long orig_ax ;
   unsigned long ip ;
   unsigned long cs ;
   unsigned long flags ;
   unsigned long sp ;
   unsigned long ss ;
};
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/desc_defs.h"
struct desc_struct {
   u16 limit0 ;
   u16 base0 ;
   u16 base1 : 8 ;
   u16 type : 4 ;
   u16 s : 1 ;
   u16 dpl : 2 ;
   u16 p : 1 ;
   u16 limit1 : 4 ;
   u16 avl : 1 ;
   u16 l : 1 ;
   u16 d : 1 ;
   u16 g : 1 ;
   u16 base2 : 8 ;
} __attribute__((__packed__));
#line 119  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/desc_defs.h"
typedef unsigned long pteval_t;
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_64_types.h"
typedef unsigned long pmdval_t;
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_64_types.h"
typedef unsigned long pudval_t;
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_64_types.h"
typedef unsigned long pgdval_t;
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_64_types.h"
typedef unsigned long pgprotval_t;
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_64_types.h"
struct __anonstruct_pte_t_53 {
   pteval_t pte ;
};
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_64_types.h"
typedef struct __anonstruct_pte_t_53 pte_t;
#line 265  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
struct pgprot {
   pgprotval_t pgprot ;
};
#line 267  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
typedef struct pgprot pgprot_t;
#line 266  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
struct __anonstruct_pgd_t_54 {
   pgdval_t pgd ;
};
#line 266  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
typedef struct __anonstruct_pgd_t_54 pgd_t;
#line 319  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
struct __anonstruct_pud_t_56 {
   pudval_t pud ;
};
#line 319  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
typedef struct __anonstruct_pud_t_56 pud_t;
#line 345  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
struct __anonstruct_pmd_t_57 {
   pmdval_t pmd ;
};
#line 345  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
typedef struct __anonstruct_pmd_t_57 pmd_t;
#line 505  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
typedef struct page *pgtable_t;
#line 519 
struct file;
#line 530 
struct seq_file;
#line 360  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/nospec-branch.h"
struct thread_struct;
#line 362 
struct cpumask;
#line 365 
struct vm_area_struct;
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qspinlock_types.h"
struct __anonstruct_59 {
   u8 locked ;
   u8 pending ;
};
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qspinlock_types.h"
struct __anonstruct_60 {
   u16 locked_pending ;
   u16 tail ;
};
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qspinlock_types.h"
union __anonunion_58 {
   atomic_t val ;
   struct __anonstruct_59 __anonCompField___anonunion_58_7 ;
   struct __anonstruct_60 __anonCompField___anonunion_58_8 ;
};
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qspinlock_types.h"
struct qspinlock {
   union __anonunion_58 __anonCompField_qspinlock_9 ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qspinlock_types.h"
typedef struct qspinlock arch_spinlock_t;
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qrwlock_types.h"
struct __anonstruct_62 {
   u8 wlocked ;
   u8 __lstate[3U] ;
};
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qrwlock_types.h"
union __anonunion_61 {
   atomic_t cnts ;
   struct __anonstruct_62 __anonCompField___anonunion_61_10 ;
};
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qrwlock_types.h"
struct qrwlock {
   union __anonunion_61 __anonCompField_qrwlock_11 ;
   arch_spinlock_t wait_lock ;
};
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qrwlock_types.h"
typedef struct qrwlock arch_rwlock_t;
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/math_emu.h"
struct math_emu_info {
   long ___orig_eip ;
   struct pt_regs *regs ;
};
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/atomic.h"
union __anonunion___u_67 {
   int __val ;
   char __c[1U] ;
};
#line 2288  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/atomic-fallback.h"
typedef atomic64_t atomic_long_t;
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cpumask.h"
struct cpumask {
   unsigned long bits[128U] ;
};
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cpumask.h"
typedef struct cpumask cpumask_t;
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/tracepoint-defs.h"
struct tracepoint_func {
   void *func ;
   void *data ;
   int prio ;
};
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/tracepoint-defs.h"
struct tracepoint {
   char *name ;
   struct static_key key ;
   int (*regfunc)(void) ;
   void (*unregfunc)(void) ;
   struct tracepoint_func *funcs ;
};
#line 37  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/tracepoint-defs.h"
typedef int tracepoint_ptr_t;
#line 44  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/tracepoint-defs.h"
struct bpf_raw_event_map {
   struct tracepoint *tp ;
   void *bpf_func ;
   u32 num_args ;
   u32 writable_size ;
} __attribute__((__aligned__(32)));
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct fregs_state {
   u32 cwd ;
   u32 swd ;
   u32 twd ;
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
   u32 st_space[20U] ;
   u32 status ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct __anonstruct_90 {
   u64 rip ;
   u64 rdp ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct __anonstruct_91 {
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
union __anonunion_89 {
   struct __anonstruct_90 __anonCompField___anonunion_89_17 ;
   struct __anonstruct_91 __anonCompField___anonunion_89_18 ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
union __anonunion_92 {
   u32 padding1[12U] ;
   u32 sw_reserved[12U] ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct fxregs_state {
   u16 cwd ;
   u16 swd ;
   u16 twd ;
   u16 fop ;
   union __anonunion_89 __anonCompField_fxregs_state_19 ;
   u32 mxcsr ;
   u32 mxcsr_mask ;
   u32 st_space[32U] ;
   u32 xmm_space[64U] ;
   u32 padding[12U] ;
   union __anonunion_92 __anonCompField_fxregs_state_20 ;
} __attribute__((__aligned__(16)));
#line 79  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct swregs_state {
   u32 cwd ;
   u32 swd ;
   u32 twd ;
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
   u32 st_space[20U] ;
   u8 ftop ;
   u8 changed ;
   u8 lookahead ;
   u8 no_update ;
   u8 rm ;
   u8 alimit ;
   struct math_emu_info *info ;
   u32 entry_eip ;
};
#line 232  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct xstate_header {
   u64 xfeatures ;
   u64 xcomp_bv ;
   u64 reserved[6U] ;
} __attribute__((__packed__));
#line 253  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct xregs_state {
   struct fxregs_state i387 ;
   struct xstate_header header ;
   u8 extended_state_area[0U] ;
} __attribute__((__packed__, __aligned__(64)));
#line 268  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
union fpregs_state {
   struct fregs_state fsave ;
   struct fxregs_state fxsave ;
   struct swregs_state soft ;
   struct xregs_state xsave ;
   u8 __padding[4096U] ;
};
#line 281  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct fpu {
   unsigned int last_cpu ;
   unsigned long avx512_timestamp ;
   union fpregs_state state ;
};
#line 73  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/orc_types.h"
struct orc_entry {
   s16 sp_offset ;
   s16 bp_offset ;
   unsigned int sp_reg : 4 ;
   unsigned int bp_reg : 4 ;
   unsigned int type : 2 ;
   unsigned int end : 1 ;
} __attribute__((__packed__));
#line 180  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/processor.h"
struct seq_operations;
#line 478 
struct perf_event;
#line 479  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/processor.h"
struct __anonstruct_mm_segment_t_95 {
   unsigned long seg ;
};
#line 479  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/processor.h"
typedef struct __anonstruct_mm_segment_t_95 mm_segment_t;
#line 485  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/processor.h"
struct thread_struct {
   struct desc_struct tls_array[3U] ;
   unsigned long sp ;
   unsigned short es ;
   unsigned short ds ;
   unsigned short fsindex ;
   unsigned short gsindex ;
   unsigned long fsbase ;
   unsigned long gsbase ;
   struct perf_event *ptrace_bps[4U] ;
   unsigned long debugreg6 ;
   unsigned long ptrace_dr7 ;
   unsigned long cr2 ;
   unsigned long trap_nr ;
   unsigned long error_code ;
   struct io_bitmap *io_bitmap ;
   unsigned long iopl_emul ;
   mm_segment_t addr_limit ;
   unsigned int sig_on_uaccess_err : 1 ;
   unsigned int uaccess_err : 1 ;
   struct fpu fpu ;
};
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/thread_info.h"
struct thread_info {
   unsigned long flags ;
   u32 status ;
};
#line 35  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bottom_half.h"
struct lockdep_map;
#line 55  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockdep.h"
struct lockdep_subclass_key {
   char __one_byte ;
} __attribute__((__packed__));
#line 60  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockdep.h"
union __anonunion_96 {
   struct hlist_node hash_entry ;
   struct lockdep_subclass_key subkeys[8U] ;
};
#line 60  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockdep.h"
struct lock_class_key {
   union __anonunion_96 __anonCompField_lock_class_key_23 ;
};
#line 68 
struct lock_trace;
#line 77  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockdep.h"
struct lock_class {
   struct hlist_node hash_entry ;
   struct list_head lock_entry ;
   struct list_head locks_after ;
   struct list_head locks_before ;
   struct lockdep_subclass_key *key ;
   unsigned int subclass ;
   unsigned int dep_gen_id ;
   unsigned long usage_mask ;
   struct lock_trace *usage_traces[9U] ;
   int name_version ;
   char *name ;
   unsigned long contention_point[4U] ;
   unsigned long contending_point[4U] ;
};
#line 157  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockdep.h"
struct lockdep_map {
   struct lock_class_key *key ;
   struct lock_class *class_cache[2U] ;
   char *name ;
   int cpu ;
   unsigned long ip ;
};
#line 226  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockdep.h"
struct held_lock {
   u64 prev_chain_key ;
   unsigned long acquire_ip ;
   struct lockdep_map *instance ;
   struct lockdep_map *nest_lock ;
   u64 waittime_stamp ;
   u64 holdtime_stamp ;
   unsigned int class_idx : 13 ;
   unsigned int irq_context : 2 ;
   unsigned int trylock : 1 ;
   unsigned int read : 2 ;
   unsigned int check : 1 ;
   unsigned int hardirqs_off : 1 ;
   unsigned int references : 12 ;
   unsigned int pin_count ;
};
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
struct raw_spinlock {
   arch_spinlock_t raw_lock ;
   unsigned int magic ;
   unsigned int owner_cpu ;
   void *owner ;
   struct lockdep_map dep_map ;
};
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
typedef struct raw_spinlock raw_spinlock_t;
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
struct __anonstruct_98 {
   u8 __padding[24U] ;
   struct lockdep_map dep_map ;
};
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
union __anonunion_97 {
   struct raw_spinlock rlock ;
   struct __anonstruct_98 __anonCompField___anonunion_97_24 ;
};
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
struct spinlock {
   union __anonunion_97 __anonCompField_spinlock_25 ;
};
#line 73  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
typedef struct spinlock spinlock_t;
#line 74  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
struct __anonstruct_rwlock_t_99 {
   arch_rwlock_t raw_lock ;
   unsigned int magic ;
   unsigned int owner_cpu ;
   void *owner ;
   struct lockdep_map dep_map ;
};
#line 74  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
typedef struct __anonstruct_rwlock_t_99 rwlock_t;
#line 57  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
struct mutex;
#line 27  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
struct kmem_cache;
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/wait.h"
struct wait_queue_head {
   spinlock_t lock ;
   struct list_head head ;
};
#line 38  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/wait.h"
typedef struct wait_queue_head wait_queue_head_t;
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seqlock.h"
struct seqcount {
   unsigned int sequence ;
   struct lockdep_map dep_map ;
};
#line 53  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seqlock.h"
typedef struct seqcount seqcount_t;
#line 403  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seqlock.h"
struct __anonstruct_seqlock_t_112 {
   struct seqcount seqcount ;
   spinlock_t lock ;
};
#line 403  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seqlock.h"
typedef struct __anonstruct_seqlock_t_112 seqlock_t;
#line 601  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seqlock.h"
struct __anonstruct_nodemask_t_113 {
   unsigned long bits[16U] ;
};
#line 601  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seqlock.h"
typedef struct __anonstruct_nodemask_t_113 nodemask_t;
#line 7  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/tlbbatch.h"
struct arch_tlbflush_unmap_batch {
   struct cpumask cpumask ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types_task.h"
struct vmacache {
   u64 seqnum ;
   struct vm_area_struct *vmas[4U] ;
};
#line 54  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types_task.h"
struct task_rss_stat {
   int events ;
   int count[4U] ;
};
#line 60  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types_task.h"
struct mm_rss_stat {
   atomic_long_t count[4U] ;
};
#line 64  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types_task.h"
struct page_frag {
   struct page *page ;
   __u32 offset ;
   __u32 size ;
};
#line 76  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types_task.h"
struct tlbflush_unmap_batch {
   struct arch_tlbflush_unmap_batch arch ;
   bool flush_required ;
   bool writable ;
};
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rbtree.h"
struct rb_node {
   unsigned long __rb_parent_color ;
   struct rb_node *rb_right ;
   struct rb_node *rb_left ;
} __attribute__((__aligned__(8)));
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rbtree.h"
struct rb_root {
   struct rb_node *rb_node ;
};
#line 125  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rbtree.h"
struct rb_root_cached {
   struct rb_root rb_root ;
   struct rb_node *rb_leftmost ;
};
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/osq_lock.h"
struct optimistic_spin_queue {
   atomic_t tail ;
};
#line 35  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rwsem.h"
struct rw_semaphore {
   atomic_long_t count ;
   atomic_long_t owner ;
   struct optimistic_spin_queue osq ;
   raw_spinlock_t wait_lock ;
   struct list_head wait_list ;
   void *magic ;
   struct lockdep_map dep_map ;
};
#line 26  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/completion.h"
struct completion {
   unsigned int done ;
   wait_queue_head_t wait ;
};
#line 120 
struct inode;
#line 121 
struct notifier_block;
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
struct ww_acquire_ctx;
#line 53  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mutex.h"
struct mutex {
   atomic_long_t owner ;
   spinlock_t wait_lock ;
   struct optimistic_spin_queue osq ;
   struct list_head wait_list ;
   void *magic ;
   struct lockdep_map dep_map ;
};
#line 72  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mutex.h"
struct mutex_waiter {
   struct list_head list ;
   struct task_struct *task ;
   struct ww_acquire_ctx *ww_ctx ;
   void *magic ;
};
#line 161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timex.h"
typedef s32 old_time32_t;
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/time32.h"
struct old_timespec32 {
   old_time32_t tv_sec ;
   s32 tv_nsec ;
};
#line 461  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jiffies.h"
typedef s64 ktime_t;
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
struct timer_list {
   struct hlist_node entry ;
   unsigned long expires ;
   void (*function)(struct timer_list *) ;
   u32 flags ;
   struct lockdep_map lockdep_map ;
};
#line 195 
struct hrtimer;
#line 196 
enum hrtimer_restart;
#line 220 
struct workqueue_struct;
#line 221 
struct work_struct;
#line 102  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/workqueue.h"
struct work_struct {
   atomic_long_t data ;
   struct list_head entry ;
   void (*func)(struct work_struct *) ;
   struct lockdep_map lockdep_map ;
};
#line 115  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/workqueue.h"
struct delayed_work {
   struct work_struct work ;
   struct timer_list timer ;
   struct workqueue_struct *wq ;
   int cpu ;
};
#line 124  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/workqueue.h"
struct rcu_work {
   struct work_struct work ;
   struct callback_head rcu ;
   struct workqueue_struct *wq ;
};
#line 67  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rcu_segcblist.h"
struct rcu_segcblist {
   struct callback_head *head ;
   struct callback_head **tails[4U] ;
   unsigned long gp_seq[4U] ;
   atomic_long_t len ;
   long len_lazy ;
   u8 enabled ;
   u8 offloaded ;
};
#line 80 
struct srcu_struct;
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/srcu.h"
struct srcu_node;
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/srcutree.h"
struct srcu_data {
   unsigned long srcu_lock_count[2U] ;
   unsigned long srcu_unlock_count[2U] ;
   spinlock_t lock ;
   struct rcu_segcblist srcu_cblist ;
   unsigned long srcu_gp_seq_needed ;
   unsigned long srcu_gp_seq_needed_exp ;
   bool srcu_cblist_invoking ;
   struct timer_list delay_work ;
   struct work_struct work ;
   struct callback_head srcu_barrier_head ;
   struct srcu_node *mynode ;
   unsigned long grpmask ;
   int cpu ;
   struct srcu_struct *ssp ;
};
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/srcutree.h"
struct srcu_node {
   spinlock_t lock ;
   unsigned long srcu_have_cbs[4U] ;
   unsigned long srcu_data_have_cbs[4U] ;
   unsigned long srcu_gp_seq_needed_exp ;
   struct srcu_node *srcu_parent ;
   int grplo ;
   int grphi ;
};
#line 64  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/srcutree.h"
struct srcu_struct {
   struct srcu_node node[521U] ;
   struct srcu_node *level[4U] ;
   struct mutex srcu_cb_mutex ;
   spinlock_t lock ;
   struct mutex srcu_gp_mutex ;
   unsigned int srcu_idx ;
   unsigned long srcu_gp_seq ;
   unsigned long srcu_gp_seq_needed ;
   unsigned long srcu_gp_seq_needed_exp ;
   unsigned long srcu_last_gp_end ;
   struct srcu_data *sda ;
   unsigned long srcu_barrier_seq ;
   struct mutex srcu_barrier_mutex ;
   struct completion srcu_barrier_completion ;
   atomic_t srcu_barrier_cpu_cnt ;
   struct delayed_work work ;
   struct lockdep_map dep_map ;
};
#line 54  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/notifier.h"
struct notifier_block {
   int (*notifier_call)(struct notifier_block *, unsigned long , void *) ;
   struct notifier_block *next ;
   int priority ;
};
#line 70  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/notifier.h"
struct raw_notifier_head {
   struct notifier_block *head ;
};
#line 50  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/uprobes.h"
struct arch_uprobe_task {
   unsigned long saved_scratch_register ;
   unsigned int saved_trap_nr ;
   unsigned int saved_tf ;
};
#line 57 
enum uprobe_task_state {
    UTASK_RUNNING = 0,
    UTASK_SSTEP = 1,
    UTASK_SSTEP_ACK = 2,
    UTASK_SSTEP_TRAPPED = 3
};
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
struct __anonstruct_126 {
   struct arch_uprobe_task autask ;
   unsigned long vaddr ;
};
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
struct __anonstruct_127 {
   struct callback_head dup_xol_work ;
   unsigned long dup_xol_addr ;
};
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
union __anonunion_125 {
   struct __anonstruct_126 __anonCompField___anonunion_125_28 ;
   struct __anonstruct_127 __anonCompField___anonunion_125_29 ;
};
#line 61 
struct uprobe;
#line 61 
struct return_instance;
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
struct uprobe_task {
   enum uprobe_task_state state ;
   union __anonunion_125 __anonCompField_uprobe_task_30 ;
   struct uprobe *active_uprobe ;
   unsigned long xol_vaddr ;
   struct return_instance *return_instances ;
   unsigned int depth ;
};
#line 83  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
struct return_instance {
   struct uprobe *uprobe ;
   unsigned long func ;
   unsigned long stack ;
   unsigned long orig_ret_vaddr ;
   bool chained ;
   struct return_instance *next ;
};
#line 98 
struct xol_area;
#line 101  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
struct uprobes_state {
   struct xol_area *xol_area ;
};
#line 140 
struct ldt_struct;
#line 140 
struct vdso_image;
#line 140  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
struct __anonstruct_mm_context_t_128 {
   u64 ctx_id ;
   atomic64_t tlb_gen ;
   struct rw_semaphore ldt_usr_sem ;
   struct ldt_struct *ldt ;
   unsigned short ia32_compat ;
   struct mutex lock ;
   void *vdso ;
   struct vdso_image *vdso_image ;
   atomic_t perf_rdpmc_allowed ;
   u16 pkey_allocation_map ;
   s16 execute_only_pkey ;
   void *bd_addr ;
};
#line 140  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
typedef struct __anonstruct_mm_context_t_128 mm_context_t;
#line 66  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct address_space;
#line 67 
struct mem_cgroup;
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct __anonstruct_130 {
   struct list_head lru ;
   struct address_space *mapping ;
   unsigned long index ;
   unsigned long private ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct __anonstruct_131 {
   dma_addr_t dma_addr ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct __anonstruct_134 {
   struct page *next ;
   int pages ;
   int pobjects ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
union __anonunion_133 {
   struct list_head slab_list ;
   struct __anonstruct_134 __anonCompField___anonunion_133_33 ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct __anonstruct_136 {
   unsigned int inuse : 16 ;
   unsigned int objects : 15 ;
   unsigned int frozen : 1 ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
union __anonunion_135 {
   void *s_mem ;
   unsigned long counters ;
   struct __anonstruct_136 __anonCompField___anonunion_135_35 ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct __anonstruct_132 {
   union __anonunion_133 __anonCompField___anonstruct_132_34 ;
   struct kmem_cache *slab_cache ;
   void *freelist ;
   union __anonunion_135 __anonCompField___anonstruct_132_36 ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct __anonstruct_137 {
   unsigned long compound_head ;
   unsigned char compound_dtor ;
   unsigned char compound_order ;
   atomic_t compound_mapcount ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct __anonstruct_138 {
   unsigned long _compound_pad_1 ;
   unsigned long _compound_pad_2 ;
   struct list_head deferred_list ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
union __anonunion_140 {
   struct mm_struct *pt_mm ;
   atomic_t pt_frag_refcount ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct __anonstruct_139 {
   unsigned long _pt_pad_1 ;
   pgtable_t pmd_huge_pte ;
   unsigned long _pt_pad_2 ;
   union __anonunion_140 __anonCompField___anonstruct_139_40 ;
   spinlock_t *ptl ;
};
#line 68 
struct dev_pagemap;
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct __anonstruct_141 {
   struct dev_pagemap *pgmap ;
   void *zone_device_data ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
union __anonunion_129 {
   struct __anonstruct_130 __anonCompField___anonunion_129_31 ;
   struct __anonstruct_131 __anonCompField___anonunion_129_32 ;
   struct __anonstruct_132 __anonCompField___anonunion_129_37 ;
   struct __anonstruct_137 __anonCompField___anonunion_129_38 ;
   struct __anonstruct_138 __anonCompField___anonunion_129_39 ;
   struct __anonstruct_139 __anonCompField___anonunion_129_41 ;
   struct __anonstruct_141 __anonCompField___anonunion_129_42 ;
   struct callback_head callback_head ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
union __anonunion_142 {
   atomic_t _mapcount ;
   unsigned int page_type ;
   unsigned int active ;
   int units ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct page {
   unsigned long flags ;
   union __anonunion_129 __anonCompField_page_43 ;
   union __anonunion_142 __anonCompField_page_44 ;
   atomic_t _refcount ;
   struct mem_cgroup *mem_cgroup ;
} __attribute__((__aligned__(16)));
#line 278  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct userfaultfd_ctx;
#line 278  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct vm_userfaultfd_ctx {
   struct userfaultfd_ctx *ctx ;
};
#line 292  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct __anonstruct_shared_143 {
   struct rb_node rb ;
   unsigned long rb_subtree_last ;
};
#line 292 
struct anon_vma;
#line 292 
struct vm_operations_struct;
#line 292 
struct mempolicy;
#line 292  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct vm_area_struct {
   unsigned long vm_start ;
   unsigned long vm_end ;
   struct vm_area_struct *vm_next ;
   struct vm_area_struct *vm_prev ;
   struct rb_node vm_rb ;
   unsigned long rb_subtree_gap ;
   struct mm_struct *vm_mm ;
   pgprot_t vm_page_prot ;
   unsigned long vm_flags ;
   struct __anonstruct_shared_143 shared ;
   struct list_head anon_vma_chain ;
   struct anon_vma *anon_vma ;
   struct vm_operations_struct *vm_ops ;
   unsigned long vm_pgoff ;
   struct file *vm_file ;
   void *vm_private_data ;
   atomic_long_t swap_readahead_info ;
   struct mempolicy *vm_policy ;
   struct vm_userfaultfd_ctx vm_userfaultfd_ctx ;
} __attribute__((__designated_init__));
#line 358  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct core_thread {
   struct task_struct *task ;
   struct core_thread *next ;
};
#line 363  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct core_state {
   atomic_t nr_threads ;
   struct core_thread dumper ;
   struct completion startup ;
};
#line 368 
struct kioctx_table;
#line 370 
struct linux_binfmt;
#line 370 
struct user_namespace;
#line 370 
struct mmu_notifier_mm;
#line 370  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct __anonstruct_144 {
   struct vm_area_struct *mmap ;
   struct rb_root mm_rb ;
   u64 vmacache_seqnum ;
   unsigned long (*get_unmapped_area)(struct file *, unsigned long , unsigned long , unsigned long , unsigned long ) ;
   unsigned long mmap_base ;
   unsigned long mmap_legacy_base ;
   unsigned long mmap_compat_base ;
   unsigned long mmap_compat_legacy_base ;
   unsigned long task_size ;
   unsigned long highest_vm_end ;
   pgd_t *pgd ;
   atomic_t membarrier_state ;
   atomic_t mm_users ;
   atomic_t mm_count ;
   atomic_long_t pgtables_bytes ;
   int map_count ;
   spinlock_t page_table_lock ;
   struct rw_semaphore mmap_sem ;
   struct list_head mmlist ;
   unsigned long hiwater_rss ;
   unsigned long hiwater_vm ;
   unsigned long total_vm ;
   unsigned long locked_vm ;
   atomic64_t pinned_vm ;
   unsigned long data_vm ;
   unsigned long exec_vm ;
   unsigned long stack_vm ;
   unsigned long def_flags ;
   spinlock_t arg_lock ;
   unsigned long start_code ;
   unsigned long end_code ;
   unsigned long start_data ;
   unsigned long end_data ;
   unsigned long start_brk ;
   unsigned long brk ;
   unsigned long start_stack ;
   unsigned long arg_start ;
   unsigned long arg_end ;
   unsigned long env_start ;
   unsigned long env_end ;
   unsigned long saved_auxv[46U] ;
   struct mm_rss_stat rss_stat ;
   struct linux_binfmt *binfmt ;
   mm_context_t context ;
   unsigned long flags ;
   struct core_state *core_state ;
   spinlock_t ioctx_lock ;
   struct kioctx_table *ioctx_table ;
   struct task_struct *owner ;
   struct user_namespace *user_ns ;
   struct file *exe_file ;
   struct mmu_notifier_mm *mmu_notifier_mm ;
   unsigned long numa_next_scan ;
   unsigned long numa_scan_offset ;
   int numa_scan_seq ;
   atomic_t tlb_flush_pending ;
   bool tlb_flush_batched ;
   struct uprobes_state uprobes_state ;
   atomic_long_t hugetlb_usage ;
   struct work_struct async_put_work ;
} __attribute__((__designated_init__));
#line 370  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct mm_struct {
   struct __anonstruct_144 __anonCompField_mm_struct_45 ;
   unsigned long cpu_bitmap[] ;
};
#line 642 
struct vm_fault;
#line 643  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
typedef unsigned int vm_fault_t;
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct free_area {
   struct list_head free_list[6U] ;
   unsigned long nr_free ;
};
#line 158 
struct pglist_data;
#line 168  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct zone_padding {
   char x[0U] ;
} __attribute__((__aligned__(4096)));
#line 285  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct zone_reclaim_stat {
   unsigned long recent_rotated[2U] ;
   unsigned long recent_scanned[2U] ;
};
#line 304  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct lruvec {
   struct list_head lists[5U] ;
   struct zone_reclaim_stat reclaim_stat ;
   atomic_long_t inactive_age ;
   unsigned long refaults ;
   unsigned long flags ;
   struct pglist_data *pgdat ;
};
#line 316  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
typedef unsigned int isolate_mode_t;
#line 340  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct per_cpu_pages {
   int count ;
   int high ;
   int batch ;
   struct list_head lists[3U] ;
};
#line 349  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct per_cpu_pageset {
   struct per_cpu_pages pcp ;
   s8 expire ;
   u16 vm_numa_stat_diff[6U] ;
   s8 stat_threshold ;
   s8 vm_stat_diff[13U] ;
};
#line 361  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct per_cpu_nodestat {
   s8 stat_threshold ;
   s8 vm_node_stat_diff[32U] ;
};
#line 365 
enum zone_type {
    ZONE_DMA = 0,
    ZONE_DMA32 = 1,
    ZONE_NORMAL = 2,
    ZONE_MOVABLE = 3,
    ZONE_DEVICE = 4,
    __MAX_NR_ZONES = 5
};
#line 432  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct zone {
   unsigned long _watermark[3U] ;
   unsigned long watermark_boost ;
   unsigned long nr_reserved_highatomic ;
   long lowmem_reserve[5U] ;
   int node ;
   struct pglist_data *zone_pgdat ;
   struct per_cpu_pageset *pageset ;
   unsigned long zone_start_pfn ;
   atomic_long_t managed_pages ;
   unsigned long spanned_pages ;
   unsigned long present_pages ;
   char *name ;
   unsigned long nr_isolate_pageblock ;
   seqlock_t span_seqlock ;
   int initialized ;
   struct zone_padding _pad1_ ;
   struct free_area free_area[11U] ;
   unsigned long flags ;
   spinlock_t lock ;
   struct zone_padding _pad2_ ;
   unsigned long percpu_drift_mark ;
   unsigned long compact_cached_free_pfn ;
   unsigned long compact_cached_migrate_pfn[2U] ;
   unsigned long compact_init_migrate_pfn ;
   unsigned long compact_init_free_pfn ;
   unsigned int compact_considered ;
   unsigned int compact_defer_shift ;
   int compact_order_failed ;
   bool compact_blockskip_flush ;
   bool contiguous ;
   struct zone_padding _pad3_ ;
   atomic_long_t vm_stat[13U] ;
   atomic_long_t vm_numa_stat[6U] ;
} __attribute__((__aligned__(4096)));
#line 665  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct zoneref {
   struct zone *zone ;
   int zone_idx ;
};
#line 684  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct zonelist {
   struct zoneref _zonerefs[5121U] ;
};
#line 694  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct deferred_split {
   spinlock_t split_queue_lock ;
   struct list_head split_queue ;
   unsigned long split_queue_len ;
};
#line 710  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct pglist_data {
   struct zone node_zones[5U] ;
   struct zonelist node_zonelists[2U] ;
   int nr_zones ;
   spinlock_t node_size_lock ;
   unsigned long node_start_pfn ;
   unsigned long node_present_pages ;
   unsigned long node_spanned_pages ;
   int node_id ;
   wait_queue_head_t kswapd_wait ;
   wait_queue_head_t pfmemalloc_wait ;
   struct task_struct *kswapd ;
   int kswapd_order ;
   enum zone_type kswapd_classzone_idx ;
   int kswapd_failures ;
   int kcompactd_max_order ;
   enum zone_type kcompactd_classzone_idx ;
   wait_queue_head_t kcompactd_wait ;
   struct task_struct *kcompactd ;
   unsigned long totalreserve_pages ;
   unsigned long min_unmapped_pages ;
   unsigned long min_slab_pages ;
   struct zone_padding _pad1_ ;
   spinlock_t lru_lock ;
   unsigned long first_deferred_pfn ;
   struct deferred_split deferred_split_queue ;
   struct lruvec __lruvec ;
   unsigned long flags ;
   struct zone_padding _pad2_ ;
   struct per_cpu_nodestat *per_cpu_nodestats ;
   atomic_long_t vm_stat[32U] ;
};
#line 824 
struct resource;
#line 825 
struct vmem_altmap;
#line 282  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/x86_init.h"
struct pci_dev;
#line 159  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/topology.h"
struct pci_bus;
#line 440  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/io.h"
struct fwnode_operations;
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fwnode.h"
struct fwnode_handle {
   struct fwnode_handle *secondary ;
   struct fwnode_operations *ops ;
   struct device *dev ;
};
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fwnode.h"
struct fwnode_endpoint {
   unsigned int port ;
   unsigned int id ;
   struct fwnode_handle *local_fwnode ;
};
#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fwnode.h"
struct fwnode_reference_args {
   struct fwnode_handle *fwnode ;
   unsigned int nargs ;
   u64 args[8U] ;
};
#line 110  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fwnode.h"
struct fwnode_operations {
   struct fwnode_handle *(*get)(struct fwnode_handle *) ;
   void (*put)(struct fwnode_handle *) ;
   bool (*device_is_available)(struct fwnode_handle *) ;
   void *(*device_get_match_data)(struct fwnode_handle *, struct device *) ;
   bool (*property_present)(struct fwnode_handle *, char *) ;
   int (*property_read_int_array)(struct fwnode_handle *, char *, unsigned int , void *, size_t ) ;
   int (*property_read_string_array)(struct fwnode_handle *, char *, char **, size_t ) ;
   char *(*get_name)(struct fwnode_handle *) ;
   char *(*get_name_prefix)(struct fwnode_handle *) ;
   struct fwnode_handle *(*get_parent)(struct fwnode_handle *) ;
   struct fwnode_handle *(*get_next_child_node)(struct fwnode_handle *, struct fwnode_handle *) ;
   struct fwnode_handle *(*get_named_child_node)(struct fwnode_handle *, char *) ;
   int (*get_reference_args)(struct fwnode_handle *, char *, char *, unsigned int , unsigned int , struct fwnode_reference_args *) ;
   struct fwnode_handle *(*graph_get_next_endpoint)(struct fwnode_handle *, struct fwnode_handle *) ;
   struct fwnode_handle *(*graph_get_remote_endpoint)(struct fwnode_handle *) ;
   struct fwnode_handle *(*graph_get_port_parent)(struct fwnode_handle *) ;
   int (*graph_parse_endpoint)(struct fwnode_handle *, struct fwnode_endpoint *) ;
   int (*add_links)(struct fwnode_handle *, struct device *) ;
};
#line 54  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/llist.h"
struct llist_node;
#line 58  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/llist.h"
struct llist_node {
   struct llist_node *next ;
};
#line 53  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/vmalloc.h"
struct vm_struct {
   struct vm_struct *next ;
   void *addr ;
   unsigned long size ;
   unsigned long flags ;
   struct page **pages ;
   unsigned int nr_pages ;
   phys_addr_t phys_addr ;
   void *caller ;
};
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/smp.h"
struct __call_single_data {
   struct llist_node llist ;
   void (*func)(void *) ;
   void *info ;
   unsigned int flags ;
};
#line 623  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/gfp.h"
struct percpu_ref;
#line 624  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/gfp.h"
typedef void percpu_ref_func_t(struct percpu_ref *);
#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/percpu-refcount.h"
struct percpu_ref {
   atomic_long_t count ;
   unsigned long percpu_count_ptr ;
   percpu_ref_func_t *release ;
   percpu_ref_func_t *confirm_switch ;
   bool force_atomic : 1 ;
   bool allow_reinit : 1 ;
   struct callback_head rcu ;
};
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/refcount.h"
struct refcount_struct {
   atomic_t refs ;
};
#line 101  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/refcount.h"
typedef struct refcount_struct refcount_t;
#line 305 
enum pid_type {
    PIDTYPE_PID = 0,
    PIDTYPE_TGID = 1,
    PIDTYPE_PGID = 2,
    PIDTYPE_SID = 3,
    PIDTYPE_MAX = 4
};
#line 54  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pid.h"
struct pid_namespace;
#line 54  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pid.h"
struct upid {
   int nr ;
   struct pid_namespace *ns ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pid.h"
struct pid {
   refcount_t count ;
   unsigned int level ;
   struct hlist_head tasks[4U] ;
   wait_queue_head_t wait_pidfd ;
   struct callback_head rcu ;
   struct upid numbers[1U] ;
};
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uidgid.h"
struct __anonstruct_kuid_t_272 {
   uid_t val ;
};
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uidgid.h"
typedef struct __anonstruct_kuid_t_272 kuid_t;
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uidgid.h"
struct __anonstruct_kgid_t_273 {
   gid_t val ;
};
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uidgid.h"
typedef struct __anonstruct_kgid_t_273 kgid_t;
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rhashtable-types.h"
struct rhash_head {
   struct rhash_head *next ;
};
#line 25 
struct bucket_table;
#line 33 
struct rhashtable;
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rhashtable-types.h"
struct rhashtable_compare_arg {
   struct rhashtable *ht ;
   void *key ;
};
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rhashtable-types.h"
struct rhashtable_params {
   u16 nelem_hint ;
   u16 key_len ;
   u16 key_offset ;
   u16 head_offset ;
   unsigned int max_size ;
   u16 min_size ;
   bool automatic_shrinking ;
   u32 (*hashfn)(void *, u32 , u32 ) ;
   u32 (*obj_hashfn)(void *, u32 , u32 ) ;
   int (*obj_cmpfn)(struct rhashtable_compare_arg *, void *) ;
};
#line 81  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rhashtable-types.h"
struct rhashtable {
   struct bucket_table *tbl ;
   unsigned int key_len ;
   unsigned int max_elems ;
   struct rhashtable_params p ;
   bool rhlist ;
   struct work_struct run_work ;
   struct mutex mutex ;
   spinlock_t lock ;
   atomic_t nelems ;
};
#line 67  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/sem.h"
struct sem_undo_list;
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sem.h"
struct sysv_sem {
   struct sem_undo_list *undo_list ;
};
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/shm.h"
struct sysv_shm {
   struct list_head shm_clist ;
};
#line 83  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/plist.h"
struct plist_node {
   int prio ;
   struct list_head prio_list ;
   struct list_head node_list ;
};
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timerqueue.h"
struct timerqueue_node {
   struct rb_node node ;
   ktime_t expires ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timerqueue.h"
struct timerqueue_head {
   struct rb_root_cached rb_root ;
};
#line 60 
struct hrtimer_clock_base;
#line 61 
struct hrtimer_cpu_base;
#line 80 
enum hrtimer_restart {
    HRTIMER_NORESTART = 0,
    HRTIMER_RESTART = 1
};
#line 117  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/hrtimer.h"
struct hrtimer {
   struct timerqueue_node node ;
   ktime_t _softexpires ;
   enum hrtimer_restart (*function)(struct hrtimer *) ;
   struct hrtimer_clock_base *base ;
   u8 state ;
   u8 is_rel ;
   u8 is_soft ;
   u8 is_hard ;
};
#line 158  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/hrtimer.h"
struct hrtimer_clock_base {
   struct hrtimer_cpu_base *cpu_base ;
   unsigned int index ;
   clockid_t clockid ;
   seqcount_t seq ;
   struct hrtimer *running ;
   struct timerqueue_head active ;
   ktime_t (*get_time)(void) ;
   ktime_t offset ;
} __attribute__((__aligned__(64)));
#line 213  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/hrtimer.h"
struct hrtimer_cpu_base {
   raw_spinlock_t lock ;
   unsigned int cpu ;
   unsigned int active_bases ;
   unsigned int clock_was_set_seq ;
   unsigned int hres_active : 1 ;
   unsigned int in_hrtirq : 1 ;
   unsigned int hang_detected : 1 ;
   unsigned int softirq_activated : 1 ;
   unsigned int nr_events ;
   unsigned short nr_retries ;
   unsigned short nr_hangs ;
   unsigned int max_hang_time ;
   ktime_t expires_next ;
   struct hrtimer *next_timer ;
   ktime_t softirq_expires_next ;
   struct hrtimer *softirq_next_timer ;
   struct hrtimer_clock_base clock_base[8U] ;
} __attribute__((__aligned__(64)));
#line 40  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/seccomp.h"
struct seccomp_filter;
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seccomp.h"
struct seccomp {
   int mode ;
   struct seccomp_filter *filter ;
};
#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/resource.h"
struct rlimit {
   __kernel_ulong_t rlim_cur ;
   __kernel_ulong_t rlim_max ;
};
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/latencytop.h"
struct latency_record {
   unsigned long backtrace[12U] ;
   unsigned int count ;
   unsigned long time ;
   unsigned long max ;
};
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/types.h"
struct task_cputime {
   u64 stime ;
   u64 utime ;
   unsigned long long sum_exec_runtime ;
};
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/signal.h"
struct __anonstruct_sigset_t_276 {
   unsigned long sig[1U] ;
};
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/signal.h"
typedef struct __anonstruct_sigset_t_276 sigset_t;
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/signal.h"
typedef void __signalfn_t(int );
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/signal-defs.h"
typedef __signalfn_t *__sighandler_t;
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/signal-defs.h"
typedef void __restorefn_t(void);
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/signal-defs.h"
typedef __restorefn_t *__sigrestore_t;
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
union sigval {
   int sival_int ;
   void *sival_ptr ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
typedef union sigval sigval_t;
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__kill_277 {
   __kernel_pid_t _pid ;
   __kernel_uid32_t _uid ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__timer_278 {
   __kernel_timer_t _tid ;
   int _overrun ;
   sigval_t _sigval ;
   int _sys_private ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__rt_279 {
   __kernel_pid_t _pid ;
   __kernel_uid32_t _uid ;
   sigval_t _sigval ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__sigchld_280 {
   __kernel_pid_t _pid ;
   __kernel_uid32_t _uid ;
   int _status ;
   __kernel_clock_t _utime ;
   __kernel_clock_t _stime ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__addr_bnd_283 {
   char _dummy_bnd[8U] ;
   void *_lower ;
   void *_upper ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__addr_pkey_284 {
   char _dummy_pkey[8U] ;
   __u32 _pkey ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
union __anonunion_282 {
   short _addr_lsb ;
   struct __anonstruct__addr_bnd_283 _addr_bnd ;
   struct __anonstruct__addr_pkey_284 _addr_pkey ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__sigfault_281 {
   void *_addr ;
   union __anonunion_282 __anonCompField___anonstruct__sigfault_281_47 ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__sigpoll_285 {
   long _band ;
   int _fd ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__sigsys_286 {
   void *_call_addr ;
   int _syscall ;
   unsigned int _arch ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
union __sifields {
   struct __anonstruct__kill_277 _kill ;
   struct __anonstruct__timer_278 _timer ;
   struct __anonstruct__rt_279 _rt ;
   struct __anonstruct__sigchld_280 _sigchld ;
   struct __anonstruct__sigfault_281 _sigfault ;
   struct __anonstruct__sigpoll_285 _sigpoll ;
   struct __anonstruct__sigsys_286 _sigsys ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/signal_types.h"
struct __anonstruct_291 {
   int si_signo ;
   int si_errno ;
   int si_code ;
   union __sifields _sifields ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/signal_types.h"
struct kernel_siginfo {
   struct __anonstruct_291 __anonCompField_kernel_siginfo_50 ;
};
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/signal_types.h"
typedef struct kernel_siginfo kernel_siginfo_t;
#line 20 
struct user_struct;
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/signal_types.h"
struct sigpending {
   struct list_head list ;
   sigset_t signal ;
};
#line 35  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/signal_types.h"
struct sigaction {
   __sighandler_t sa_handler ;
   unsigned long sa_flags ;
   __sigrestore_t sa_restorer ;
   sigset_t sa_mask ;
};
#line 49  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/signal_types.h"
struct k_sigaction {
   struct sigaction sa ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/task_io_accounting.h"
struct task_io_accounting {
   u64 rchar ;
   u64 wchar ;
   u64 syscr ;
   u64 syscw ;
   u64 read_bytes ;
   u64 write_bytes ;
   u64 cancelled_write_bytes ;
};
#line 107  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/posix-timers.h"
struct posix_cputimer_base {
   u64 nextevt ;
   struct timerqueue_head tqhead ;
};
#line 122  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/posix-timers.h"
struct posix_cputimers {
   struct posix_cputimer_base bases[3U] ;
   unsigned int timers_active ;
   unsigned int expiry_active ;
};
#line 193 
struct signal_struct;
#line 62  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/rseq.h"
union __anonunion_rseq_cs_296 {
   __u64 ptr64 ;
   __u64 ptr ;
};
#line 62  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/rseq.h"
struct rseq {
   __u32 cpu_id_start ;
   __u32 cpu_id ;
   union __anonunion_rseq_cs_296 rseq_cs ;
   __u32 flags ;
} __attribute__((__aligned__(32)));
#line 146 
struct audit_context;
#line 147 
struct backing_dev_info;
#line 148 
struct bio_list;
#line 149 
struct blk_plug;
#line 150 
struct capture_control;
#line 151 
struct cfs_rq;
#line 152 
struct fs_struct;
#line 153 
struct futex_pi_state;
#line 154 
struct io_context;
#line 155 
struct nameidata;
#line 156 
struct nsproxy;
#line 157 
struct perf_event_context;
#line 158 
struct pipe_inode_info;
#line 160 
struct reclaim_state;
#line 161 
struct robust_list_head;
#line 166 
struct sighand_struct;
#line 167 
struct task_delay_info;
#line 168 
struct task_group;
#line 242  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct prev_cputime {
   u64 utime ;
   u64 stime ;
   raw_spinlock_t lock ;
};
#line 290  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct sched_info {
   unsigned long pcount ;
   unsigned long long run_delay ;
   unsigned long long last_arrival ;
   unsigned long long last_queued ;
};
#line 325  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct load_weight {
   unsigned long weight ;
   u32 inv_weight ;
};
#line 352  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct util_est {
   unsigned int enqueued ;
   unsigned int ewma ;
} __attribute__((__aligned__(8)));
#line 401  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct sched_avg {
   u64 last_update_time ;
   u64 load_sum ;
   u64 runnable_load_sum ;
   u32 util_sum ;
   u32 period_contrib ;
   unsigned long load_avg ;
   unsigned long runnable_load_avg ;
   unsigned long util_avg ;
   struct util_est util_est ;
} __attribute__((__aligned__(64)));
#line 413  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct sched_statistics {
   u64 wait_start ;
   u64 wait_max ;
   u64 wait_count ;
   u64 wait_sum ;
   u64 iowait_count ;
   u64 iowait_sum ;
   u64 sleep_start ;
   u64 sleep_max ;
   s64 sum_sleep_runtime ;
   u64 block_start ;
   u64 block_max ;
   u64 exec_max ;
   u64 slice_max ;
   u64 nr_migrations_cold ;
   u64 nr_failed_migrations_affine ;
   u64 nr_failed_migrations_running ;
   u64 nr_failed_migrations_hot ;
   u64 nr_forced_migrations ;
   u64 nr_wakeups ;
   u64 nr_wakeups_sync ;
   u64 nr_wakeups_migrate ;
   u64 nr_wakeups_local ;
   u64 nr_wakeups_remote ;
   u64 nr_wakeups_affine ;
   u64 nr_wakeups_affine_attempts ;
   u64 nr_wakeups_passive ;
   u64 nr_wakeups_idle ;
};
#line 449  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct sched_entity {
   struct load_weight load ;
   unsigned long runnable_weight ;
   struct rb_node run_node ;
   struct list_head group_node ;
   unsigned int on_rq ;
   u64 exec_start ;
   u64 sum_exec_runtime ;
   u64 vruntime ;
   u64 prev_sum_exec_runtime ;
   u64 nr_migrations ;
   struct sched_statistics statistics ;
   int depth ;
   struct sched_entity *parent ;
   struct cfs_rq *cfs_rq ;
   struct cfs_rq *my_q ;
   struct sched_avg avg ;
};
#line 486 
struct rt_rq;
#line 486  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct sched_rt_entity {
   struct list_head run_list ;
   unsigned long timeout ;
   unsigned long watchdog_stamp ;
   unsigned int time_slice ;
   unsigned short on_rq ;
   unsigned short on_list ;
   struct sched_rt_entity *back ;
   struct sched_rt_entity *parent ;
   struct rt_rq *rt_rq ;
   struct rt_rq *my_q ;
} __attribute__((__designated_init__));
#line 504  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct sched_dl_entity {
   struct rb_node rb_node ;
   u64 dl_runtime ;
   u64 dl_deadline ;
   u64 dl_period ;
   u64 dl_bw ;
   u64 dl_density ;
   s64 runtime ;
   u64 deadline ;
   unsigned int flags ;
   unsigned int dl_throttled : 1 ;
   unsigned int dl_boosted : 1 ;
   unsigned int dl_yielded : 1 ;
   unsigned int dl_non_contending : 1 ;
   unsigned int dl_overrun : 1 ;
   struct hrtimer dl_timer ;
   struct hrtimer inactive_timer ;
};
#line 600  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct uclamp_se {
   unsigned int value : 11 ;
   unsigned int bucket_id : 3 ;
   unsigned int active : 1 ;
   unsigned int user_defined : 1 ;
};
#line 625  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct wake_q_node {
   struct wake_q_node *next ;
};
#line 629 
struct sched_class;
#line 629 
struct cred;
#line 629 
struct key;
#line 629 
struct files_struct;
#line 629 
struct rt_mutex_waiter;
#line 629 
struct css_set;
#line 629 
struct compat_robust_list_head;
#line 629 
struct numa_group;
#line 629  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
union __anonunion_298 {
   refcount_t rcu_users ;
   struct callback_head rcu ;
};
#line 629 
struct ftrace_ret_stack;
#line 629 
struct kcov;
#line 629 
struct request_queue;
#line 629  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct task_struct {
   struct thread_info thread_info ;
   long state ;
   void *stack ;
   refcount_t usage ;
   unsigned int flags ;
   unsigned int ptrace ;
   struct llist_node wake_entry ;
   int on_cpu ;
   unsigned int cpu ;
   unsigned int wakee_flips ;
   unsigned long wakee_flip_decay_ts ;
   struct task_struct *last_wakee ;
   int recent_used_cpu ;
   int wake_cpu ;
   int on_rq ;
   int prio ;
   int static_prio ;
   int normal_prio ;
   unsigned int rt_priority ;
   struct sched_class *sched_class ;
   struct sched_entity se ;
   struct sched_rt_entity rt ;
   struct task_group *sched_task_group ;
   struct sched_dl_entity dl ;
   struct uclamp_se uclamp_req[2U] ;
   struct uclamp_se uclamp[2U] ;
   struct hlist_head preempt_notifiers ;
   unsigned int btrace_seq ;
   unsigned int policy ;
   int nr_cpus_allowed ;
   cpumask_t *cpus_ptr ;
   cpumask_t cpus_mask ;
   unsigned long rcu_tasks_nvcsw ;
   u8 rcu_tasks_holdout ;
   u8 rcu_tasks_idx ;
   int rcu_tasks_idle_cpu ;
   struct list_head rcu_tasks_holdout_list ;
   struct sched_info sched_info ;
   struct list_head tasks ;
   struct plist_node pushable_tasks ;
   struct rb_node pushable_dl_tasks ;
   struct mm_struct *mm ;
   struct mm_struct *active_mm ;
   struct vmacache vmacache ;
   struct task_rss_stat rss_stat ;
   int exit_state ;
   int exit_code ;
   int exit_signal ;
   int pdeath_signal ;
   unsigned long jobctl ;
   unsigned int personality ;
   unsigned int sched_reset_on_fork : 1 ;
   unsigned int sched_contributes_to_load : 1 ;
   unsigned int sched_migrated : 1 ;
   unsigned int sched_remote_wakeup : 1 ;
   unsigned int sched_psi_wake_requeue : 1 ;
   unsigned int  ;
   unsigned int in_execve : 1 ;
   unsigned int in_iowait : 1 ;
   unsigned int restore_sigmask : 1 ;
   unsigned int in_user_fault : 1 ;
   unsigned int brk_randomized : 1 ;
   unsigned int no_cgroup_migration : 1 ;
   unsigned int frozen : 1 ;
   unsigned int use_memdelay : 1 ;
   unsigned long atomic_flags ;
   struct restart_block restart_block ;
   pid_t pid ;
   pid_t tgid ;
   unsigned long stack_canary ;
   struct task_struct *real_parent ;
   struct task_struct *parent ;
   struct list_head children ;
   struct list_head sibling ;
   struct task_struct *group_leader ;
   struct list_head ptraced ;
   struct list_head ptrace_entry ;
   struct pid *thread_pid ;
   struct hlist_node pid_links[4U] ;
   struct list_head thread_group ;
   struct list_head thread_node ;
   struct completion *vfork_done ;
   int *set_child_tid ;
   int *clear_child_tid ;
   u64 utime ;
   u64 stime ;
   u64 gtime ;
   struct prev_cputime prev_cputime ;
   unsigned long nvcsw ;
   unsigned long nivcsw ;
   u64 start_time ;
   u64 start_boottime ;
   unsigned long min_flt ;
   unsigned long maj_flt ;
   struct posix_cputimers posix_cputimers ;
   struct cred *ptracer_cred ;
   struct cred *real_cred ;
   struct cred *cred ;
   struct key *cached_requested_key ;
   char comm[16U] ;
   struct nameidata *nameidata ;
   struct sysv_sem sysvsem ;
   struct sysv_shm sysvshm ;
   unsigned long last_switch_count ;
   unsigned long last_switch_time ;
   struct fs_struct *fs ;
   struct files_struct *files ;
   struct nsproxy *nsproxy ;
   struct signal_struct *signal ;
   struct sighand_struct *sighand ;
   sigset_t blocked ;
   sigset_t real_blocked ;
   sigset_t saved_sigmask ;
   struct sigpending pending ;
   unsigned long sas_ss_sp ;
   size_t sas_ss_size ;
   unsigned int sas_ss_flags ;
   struct callback_head *task_works ;
   struct audit_context *audit_context ;
   kuid_t loginuid ;
   unsigned int sessionid ;
   struct seccomp seccomp ;
   u32 parent_exec_id ;
   u32 self_exec_id ;
   spinlock_t alloc_lock ;
   raw_spinlock_t pi_lock ;
   struct wake_q_node wake_q ;
   struct rb_root_cached pi_waiters ;
   struct task_struct *pi_top_task ;
   struct rt_mutex_waiter *pi_blocked_on ;
   struct mutex_waiter *blocked_on ;
   int non_block_count ;
   unsigned int irq_events ;
   unsigned long hardirq_enable_ip ;
   unsigned long hardirq_disable_ip ;
   unsigned int hardirq_enable_event ;
   unsigned int hardirq_disable_event ;
   int hardirqs_enabled ;
   int hardirq_context ;
   unsigned long softirq_disable_ip ;
   unsigned long softirq_enable_ip ;
   unsigned int softirq_disable_event ;
   unsigned int softirq_enable_event ;
   int softirqs_enabled ;
   int softirq_context ;
   u64 curr_chain_key ;
   int lockdep_depth ;
   unsigned int lockdep_recursion ;
   struct held_lock held_locks[48U] ;
   unsigned int in_ubsan ;
   void *journal_info ;
   struct bio_list *bio_list ;
   struct blk_plug *plug ;
   struct reclaim_state *reclaim_state ;
   struct backing_dev_info *backing_dev_info ;
   struct io_context *io_context ;
   struct capture_control *capture_control ;
   unsigned long ptrace_message ;
   kernel_siginfo_t *last_siginfo ;
   struct task_io_accounting ioac ;
   unsigned int psi_flags ;
   u64 acct_rss_mem1 ;
   u64 acct_vm_mem1 ;
   u64 acct_timexpd ;
   nodemask_t mems_allowed ;
   seqcount_t mems_allowed_seq ;
   int cpuset_mem_spread_rotor ;
   int cpuset_slab_spread_rotor ;
   struct css_set *cgroups ;
   struct list_head cg_list ;
   u32 closid ;
   u32 rmid ;
   struct robust_list_head *robust_list ;
   struct compat_robust_list_head *compat_robust_list ;
   struct list_head pi_state_list ;
   struct futex_pi_state *pi_state_cache ;
   struct mutex futex_exit_mutex ;
   unsigned int futex_state ;
   struct perf_event_context *perf_event_ctxp[2U] ;
   struct mutex perf_event_mutex ;
   struct list_head perf_event_list ;
   struct mempolicy *mempolicy ;
   short il_prev ;
   short pref_node_fork ;
   int numa_scan_seq ;
   unsigned int numa_scan_period ;
   unsigned int numa_scan_period_max ;
   int numa_preferred_nid ;
   unsigned long numa_migrate_retry ;
   u64 node_stamp ;
   u64 last_task_numa_placement ;
   u64 last_sum_exec_runtime ;
   struct callback_head numa_work ;
   struct numa_group *numa_group ;
   unsigned long *numa_faults ;
   unsigned long total_numa_faults ;
   unsigned long numa_faults_locality[3U] ;
   unsigned long numa_pages_migrated ;
   struct rseq *rseq ;
   u32 rseq_sig ;
   unsigned long rseq_event_mask ;
   struct tlbflush_unmap_batch tlb_ubc ;
   union __anonunion_298 __anonCompField_task_struct_52 ;
   struct pipe_inode_info *splice_pipe ;
   struct page_frag task_frag ;
   struct task_delay_info *delays ;
   int make_it_fail ;
   unsigned int fail_nth ;
   int nr_dirtied ;
   int nr_dirtied_pause ;
   unsigned long dirty_paused_when ;
   int latency_record_count ;
   struct latency_record latency_record[32U] ;
   u64 timer_slack_ns ;
   u64 default_timer_slack_ns ;
   unsigned int kasan_depth ;
   int curr_ret_stack ;
   int curr_ret_depth ;
   struct ftrace_ret_stack *ret_stack ;
   unsigned long long ftrace_timestamp ;
   atomic_t trace_overrun ;
   atomic_t tracing_graph_pause ;
   unsigned long trace ;
   unsigned long trace_recursion ;
   unsigned int kcov_mode ;
   unsigned int kcov_size ;
   void *kcov_area ;
   struct kcov *kcov ;
   u64 kcov_handle ;
   int kcov_sequence ;
   struct mem_cgroup *memcg_in_oom ;
   gfp_t memcg_oom_gfp_mask ;
   int memcg_oom_order ;
   unsigned int memcg_nr_pages_over_high ;
   struct mem_cgroup *active_memcg ;
   struct request_queue *throttle_queue ;
   struct uprobe_task *utask ;
   unsigned int sequential_io ;
   unsigned int sequential_io_avg ;
   unsigned long task_state_change ;
   int pagefault_disabled ;
   struct task_struct *oom_reaper_list ;
   struct vm_struct *stack_vm_area ;
   refcount_t stack_refcount ;
   int patch_state ;
   void *security ;
   struct thread_struct thread ;
};
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/extable.h"
struct exception_table_entry {
   int insn ;
   int fixup ;
   int handler ;
};
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kref.h"
struct kref {
   refcount_t refcount ;
};
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cpu_rmap.h"
struct __anonstruct_near_374 {
   u16 index ;
   u16 dist ;
};
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cpu_rmap.h"
struct cpu_rmap {
   struct kref refcount ;
   u16 size ;
   u16 used ;
   void **obj ;
   struct __anonstruct_near_374 near[0U] ;
};
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/stat.h"
struct kstat {
   u32 result_mask ;
   umode_t mode ;
   unsigned int nlink ;
   uint32_t blksize ;
   u64 attributes ;
   u64 attributes_mask ;
   u64 ino ;
   dev_t dev ;
   dev_t rdev ;
   kuid_t uid ;
   kgid_t gid ;
   loff_t size ;
   struct timespec64 atime ;
   struct timespec64 mtime ;
   struct timespec64 ctime ;
   struct timespec64 btime ;
   u64 blocks ;
};
#line 51 
struct scatterlist;
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/uio.h"
struct iovec {
   void *iov_base ;
   __kernel_size_t iov_len ;
};
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uio.h"
struct kvec {
   void *iov_base ;
   size_t iov_len ;
};
#line 30 
struct bio_vec;
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uio.h"
union __anonunion_378 {
   struct iovec *iov ;
   struct kvec *kvec ;
   struct bio_vec *bvec ;
   struct pipe_inode_info *pipe ;
};
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uio.h"
struct __anonstruct_380 {
   unsigned int head ;
   unsigned int start_head ;
};
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uio.h"
union __anonunion_379 {
   unsigned long nr_segs ;
   struct __anonstruct_380 __anonCompField___anonunion_379_54 ;
};
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uio.h"
struct iov_iter {
   unsigned int type ;
   size_t iov_offset ;
   size_t count ;
   union __anonunion_378 __anonCompField_iov_iter_53 ;
   union __anonunion_379 __anonCompField_iov_iter_55 ;
};
#line 285  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uio.h"
typedef unsigned short __kernel_sa_family_t;
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/socket.h"
struct socket;
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/socket.h"
typedef __kernel_sa_family_t sa_family_t;
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/socket.h"
struct sockaddr {
   sa_family_t sa_family ;
   char sa_data[14U] ;
};
#line 49 
struct kiocb;
#line 49  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/socket.h"
struct msghdr {
   void *msg_name ;
   int msg_namelen ;
   struct iov_iter msg_iter ;
   void *msg_control ;
   __kernel_size_t msg_controllen ;
   unsigned int msg_flags ;
   struct kiocb *msg_iocb ;
};
#line 422 
struct ns_common;
#line 423  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/socket.h"
struct __anonstruct_sync_serial_settings_383 {
   unsigned int clock_rate ;
   unsigned int clock_type ;
   unsigned short loopback ;
};
#line 423  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/socket.h"
typedef struct __anonstruct_sync_serial_settings_383 sync_serial_settings;
#line 45  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_te1_settings_384 {
   unsigned int clock_rate ;
   unsigned int clock_type ;
   unsigned short loopback ;
   unsigned int slot_map ;
};
#line 45  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_te1_settings_384 te1_settings;
#line 52  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_raw_hdlc_proto_385 {
   unsigned short encoding ;
   unsigned short parity ;
};
#line 52  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_raw_hdlc_proto_385 raw_hdlc_proto;
#line 57  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_fr_proto_386 {
   unsigned int t391 ;
   unsigned int t392 ;
   unsigned int n391 ;
   unsigned int n392 ;
   unsigned int n393 ;
   unsigned short lmi ;
   unsigned short dce ;
};
#line 57  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_fr_proto_386 fr_proto;
#line 67  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_fr_proto_pvc_387 {
   unsigned int dlci ;
};
#line 67  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_fr_proto_pvc_387 fr_proto_pvc;
#line 71  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_fr_proto_pvc_info_388 {
   unsigned int dlci ;
   char master[16U] ;
};
#line 71  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_fr_proto_pvc_info_388 fr_proto_pvc_info;
#line 76  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_cisco_proto_389 {
   unsigned int interval ;
   unsigned int timeout ;
};
#line 76  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_cisco_proto_389 cisco_proto;
#line 195  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if.h"
struct ifmap {
   unsigned long mem_start ;
   unsigned long mem_end ;
   unsigned short base_addr ;
   unsigned char irq ;
   unsigned char dma ;
   unsigned char port ;
};
#line 206  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if.h"
union __anonunion_ifs_ifsu_390 {
   raw_hdlc_proto *raw_hdlc ;
   cisco_proto *cisco ;
   fr_proto *fr ;
   fr_proto_pvc *fr_pvc ;
   fr_proto_pvc_info *fr_pvc_info ;
   sync_serial_settings *sync ;
   te1_settings *te1 ;
};
#line 206  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if.h"
struct if_settings {
   unsigned int type ;
   unsigned int size ;
   union __anonunion_ifs_ifsu_390 ifs_ifsu ;
};
#line 232  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if.h"
union __anonunion_ifr_ifrn_391 {
   char ifrn_name[16U] ;
};
#line 232  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if.h"
union __anonunion_ifr_ifru_392 {
   struct sockaddr ifru_addr ;
   struct sockaddr ifru_dstaddr ;
   struct sockaddr ifru_broadaddr ;
   struct sockaddr ifru_netmask ;
   struct sockaddr ifru_hwaddr ;
   short ifru_flags ;
   int ifru_ivalue ;
   int ifru_mtu ;
   struct ifmap ifru_map ;
   char ifru_slave[16U] ;
   char ifru_newname[16U] ;
   void *ifru_data ;
   struct if_settings ifru_settings ;
};
#line 232  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if.h"
struct ifreq {
   union __anonunion_ifr_ifrn_391 ifr_ifrn ;
   union __anonunion_ifr_ifru_392 ifr_ifru ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_bl.h"
struct hlist_bl_node;
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_bl.h"
struct hlist_bl_head {
   struct hlist_bl_node *first ;
};
#line 38  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_bl.h"
struct hlist_bl_node {
   struct hlist_bl_node *next ;
   struct hlist_bl_node **pprev ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockref.h"
struct __anonstruct_407 {
   spinlock_t lock ;
   int count ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockref.h"
union __anonunion_406 {
   struct __anonstruct_407 __anonCompField___anonunion_406_58 ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockref.h"
struct lockref {
   union __anonunion_406 __anonCompField_lockref_59 ;
};
#line 78  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/stringhash.h"
struct path;
#line 79 
struct vfsmount;
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dcache.h"
struct __anonstruct_409 {
   u32 hash ;
   u32 len ;
};
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dcache.h"
union __anonunion_408 {
   struct __anonstruct_409 __anonCompField___anonunion_408_60 ;
   u64 hash_len ;
};
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dcache.h"
struct qstr {
   union __anonunion_408 __anonCompField_qstr_61 ;
   unsigned char *name ;
};
#line 89 
struct dentry_operations;
#line 89 
struct super_block;
#line 89  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dcache.h"
union __anonunion_410 {
   struct list_head d_lru ;
   wait_queue_head_t *d_wait ;
};
#line 89  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dcache.h"
union __anonunion_d_u_411 {
   struct hlist_node d_alias ;
   struct hlist_bl_node d_in_lookup_hash ;
   struct callback_head d_rcu ;
};
#line 89  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dcache.h"
struct dentry {
   unsigned int d_flags ;
   seqcount_t d_seq ;
   struct hlist_bl_node d_hash ;
   struct dentry *d_parent ;
   struct qstr d_name ;
   struct inode *d_inode ;
   unsigned char d_iname[32U] ;
   struct lockref d_lockref ;
   struct dentry_operations *d_op ;
   struct super_block *d_sb ;
   unsigned long d_time ;
   void *d_fsdata ;
   union __anonunion_410 __anonCompField_dentry_62 ;
   struct list_head d_child ;
   struct list_head d_subdirs ;
   union __anonunion_d_u_411 d_u ;
} __attribute__((__designated_init__));
#line 135  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dcache.h"
struct dentry_operations {
   int (*d_revalidate)(struct dentry *, unsigned int ) ;
   int (*d_weak_revalidate)(struct dentry *, unsigned int ) ;
   int (*d_hash)(struct dentry *, struct qstr *) ;
   int (*d_compare)(struct dentry *, unsigned int , char *, struct qstr *) ;
   int (*d_delete)(struct dentry *) ;
   int (*d_init)(struct dentry *) ;
   void (*d_release)(struct dentry *) ;
   void (*d_prune)(struct dentry *) ;
   void (*d_iput)(struct dentry *, struct inode *) ;
   char *(*d_dname)(struct dentry *, char *, int ) ;
   struct vfsmount *(*d_automount)(struct path *) ;
   int (*d_manage)(struct path *, bool ) ;
   struct dentry *(*d_real)(struct dentry *, struct inode *) ;
} __attribute__((__aligned__(64)));
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/path.h"
struct path {
   struct vfsmount *mnt ;
   struct dentry *dentry ;
} __attribute__((__designated_init__));
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/shrinker.h"
struct shrink_control {
   gfp_t gfp_mask ;
   int nid ;
   unsigned long nr_to_scan ;
   unsigned long nr_scanned ;
   struct mem_cgroup *memcg ;
};
#line 60  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/shrinker.h"
struct shrinker {
   unsigned long (*count_objects)(struct shrinker *, struct shrink_control *) ;
   unsigned long (*scan_objects)(struct shrinker *, struct shrink_control *) ;
   long batch ;
   int seeks ;
   unsigned int flags ;
   struct list_head list ;
   int id ;
   atomic_long_t *nr_deferred ;
};
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_lru.h"
struct list_lru_one {
   struct list_head list ;
   long nr_items ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_lru.h"
struct list_lru_memcg {
   struct callback_head rcu ;
   struct list_lru_one *lru[0U] ;
};
#line 40  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_lru.h"
struct list_lru_node {
   spinlock_t lock ;
   struct list_lru_one lru ;
   struct list_lru_memcg *memcg_lrus ;
   long nr_items ;
} __attribute__((__aligned__(64)));
#line 52  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_lru.h"
struct list_lru {
   struct list_lru_node *node ;
   struct list_head list ;
   int shrinker_id ;
   bool memcg_aware ;
};
#line 292  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/xarray.h"
struct xarray {
   spinlock_t xa_lock ;
   gfp_t xa_flags ;
   void *xa_head ;
};
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/capability.h"
struct kernel_cap_struct {
   __u32 cap[2U] ;
};
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/capability.h"
typedef struct kernel_cap_struct kernel_cap_t;
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fiemap.h"
struct fiemap_extent {
   __u64 fe_logical ;
   __u64 fe_physical ;
   __u64 fe_length ;
   __u64 fe_reserved64[2U] ;
   __u32 fe_flags ;
   __u32 fe_reserved[3U] ;
};
#line 39 
enum migrate_mode {
    MIGRATE_ASYNC = 0,
    MIGRATE_SYNC_LIGHT = 1,
    MIGRATE_SYNC = 2,
    MIGRATE_SYNC_NO_COPY = 3
};
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rcuwait.h"
struct rcuwait {
   struct task_struct *task ;
};
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rcu_sync.h"
struct rcu_sync {
   int gp_state ;
   int gp_count ;
   wait_queue_head_t gp_wait ;
   struct callback_head cb_head ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/percpu-rwsem.h"
struct percpu_rw_semaphore {
   struct rcu_sync rss ;
   unsigned int *read_count ;
   struct rw_semaphore rw_sem ;
   struct rcuwait writer ;
   int readers_block ;
};
#line 10  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/delayed_call.h"
struct delayed_call {
   void (*fn)(void *) ;
   void *arg ;
};
#line 36  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/uuid.h"
struct __anonstruct_uuid_t_429 {
   __u8 b[16U] ;
};
#line 36  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/uuid.h"
typedef struct __anonstruct_uuid_t_429 uuid_t;
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uuid.h"
typedef u32 errseq_t;
#line 72  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/iocontext.h"
union __anonunion_430 {
   struct list_head q_node ;
   struct kmem_cache *__rcu_icq_cache ;
};
#line 72  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/iocontext.h"
union __anonunion_431 {
   struct hlist_node ioc_node ;
   struct callback_head __rcu_head ;
};
#line 72  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/iocontext.h"
struct io_cq {
   struct request_queue *q ;
   struct io_context *ioc ;
   union __anonunion_430 __anonCompField_io_cq_65 ;
   union __anonunion_431 __anonCompField_io_cq_66 ;
   unsigned int flags ;
};
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/iocontext.h"
struct io_context {
   atomic_long_t refcount ;
   atomic_t active_ref ;
   atomic_t nr_tasks ;
   spinlock_t lock ;
   unsigned short ioprio ;
   int nr_batch_requests ;
   unsigned long last_waited ;
   struct xarray icq_tree ;
   struct io_cq *icq_hint ;
   struct hlist_head icq_list ;
   struct work_struct release_work ;
};
#line 286  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fs.h"
struct bdi_writeback;
#line 287 
struct bio;
#line 288 
struct export_operations;
#line 289 
struct hd_geometry;
#line 290 
struct kobject;
#line 291 
struct poll_table_struct;
#line 292 
struct kstatfs;
#line 293 
struct swap_info_struct;
#line 294 
struct fscrypt_info;
#line 295 
struct fscrypt_operations;
#line 296 
struct fsverity_info;
#line 297 
struct fsverity_operations;
#line 298 
struct fs_context;
#line 299 
struct fs_parameter_description;
#line 224  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct iattr {
   unsigned int ia_valid ;
   umode_t ia_mode ;
   kuid_t ia_uid ;
   kgid_t ia_gid ;
   loff_t ia_size ;
   struct timespec64 ia_atime ;
   struct timespec64 ia_mtime ;
   struct timespec64 ia_ctime ;
   struct file *ia_file ;
};
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/percpu_counter.h"
struct percpu_counter {
   raw_spinlock_t lock ;
   s64 count ;
   struct list_head list ;
   s32 *counters ;
};
#line 214  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dqblk_xfs.h"
struct dquot;
#line 215 
struct kqid;
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/projid.h"
typedef __kernel_uid32_t projid_t;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/projid.h"
struct __anonstruct_kprojid_t_432 {
   projid_t val ;
};
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/projid.h"
typedef struct __anonstruct_kprojid_t_432 kprojid_t;
#line 180  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/quota.h"
enum quota_type {
    USRQUOTA = 0,
    GRPQUOTA = 1,
    PRJQUOTA = 2
};
#line 66  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
typedef long long qsize_t;
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
union __anonunion_433 {
   kuid_t uid ;
   kgid_t gid ;
   kprojid_t projid ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct kqid {
   union __anonunion_433 __anonCompField_kqid_67 ;
   enum quota_type type ;
};
#line 205  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct mem_dqblk {
   qsize_t dqb_bhardlimit ;
   qsize_t dqb_bsoftlimit ;
   qsize_t dqb_curspace ;
   qsize_t dqb_rsvspace ;
   qsize_t dqb_ihardlimit ;
   qsize_t dqb_isoftlimit ;
   qsize_t dqb_curinodes ;
   time64_t dqb_btime ;
   time64_t dqb_itime ;
};
#line 216 
struct quota_format_type;
#line 222  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct mem_dqinfo {
   struct quota_format_type *dqi_format ;
   int dqi_fmt_id ;
   struct list_head dqi_dirty_list ;
   unsigned long dqi_flags ;
   unsigned int dqi_bgrace ;
   unsigned int dqi_igrace ;
   qsize_t dqi_max_spc_limit ;
   qsize_t dqi_max_ino_limit ;
   void *dqi_priv ;
};
#line 294  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct dquot {
   struct hlist_node dq_hash ;
   struct list_head dq_inuse ;
   struct list_head dq_free ;
   struct list_head dq_dirty ;
   struct mutex dq_lock ;
   spinlock_t dq_dqb_lock ;
   atomic_t dq_count ;
   struct super_block *dq_sb ;
   struct kqid dq_id ;
   loff_t dq_off ;
   unsigned long dq_flags ;
   struct mem_dqblk dq_dqb ;
};
#line 310  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct quota_format_ops {
   int (*check_quota_file)(struct super_block *, int ) ;
   int (*read_file_info)(struct super_block *, int ) ;
   int (*write_file_info)(struct super_block *, int ) ;
   int (*free_file_info)(struct super_block *, int ) ;
   int (*read_dqblk)(struct dquot *) ;
   int (*commit_dqblk)(struct dquot *) ;
   int (*release_dqblk)(struct dquot *) ;
   int (*get_next_id)(struct super_block *, struct kqid *) ;
};
#line 322  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct dquot_operations {
   int (*write_dquot)(struct dquot *) ;
   struct dquot *(*alloc_dquot)(struct super_block *, int ) ;
   void (*destroy_dquot)(struct dquot *) ;
   int (*acquire_dquot)(struct dquot *) ;
   int (*release_dquot)(struct dquot *) ;
   int (*mark_dirty)(struct dquot *) ;
   int (*write_info)(struct super_block *, int ) ;
   qsize_t *(*get_reserved_space)(struct inode *) ;
   int (*get_projid)(struct inode *, kprojid_t *) ;
   int (*get_inode_usage)(struct inode *, qsize_t *) ;
   int (*get_next_id)(struct super_block *, struct kqid *) ;
};
#line 343  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct qc_dqblk {
   int d_fieldmask ;
   u64 d_spc_hardlimit ;
   u64 d_spc_softlimit ;
   u64 d_ino_hardlimit ;
   u64 d_ino_softlimit ;
   u64 d_space ;
   u64 d_ino_count ;
   s64 d_ino_timer ;
   s64 d_spc_timer ;
   int d_ino_warns ;
   int d_spc_warns ;
   u64 d_rt_spc_hardlimit ;
   u64 d_rt_spc_softlimit ;
   u64 d_rt_space ;
   s64 d_rt_spc_timer ;
   int d_rt_spc_warns ;
};
#line 395  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct qc_type_state {
   unsigned int flags ;
   unsigned int spc_timelimit ;
   unsigned int ino_timelimit ;
   unsigned int rt_spc_timelimit ;
   unsigned int spc_warnlimit ;
   unsigned int ino_warnlimit ;
   unsigned int rt_spc_warnlimit ;
   unsigned long long ino ;
   blkcnt_t blocks ;
   blkcnt_t nextents ;
};
#line 409  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct qc_state {
   unsigned int s_incoredqs ;
   struct qc_type_state s_state[3U] ;
};
#line 415  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct qc_info {
   int i_fieldmask ;
   unsigned int i_flags ;
   unsigned int i_spc_timelimit ;
   unsigned int i_ino_timelimit ;
   unsigned int i_rt_spc_timelimit ;
   unsigned int i_spc_warnlimit ;
   unsigned int i_ino_warnlimit ;
   unsigned int i_rt_spc_warnlimit ;
};
#line 428  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct quotactl_ops {
   int (*quota_on)(struct super_block *, int , int , struct path *) ;
   int (*quota_off)(struct super_block *, int ) ;
   int (*quota_enable)(struct super_block *, unsigned int ) ;
   int (*quota_disable)(struct super_block *, unsigned int ) ;
   int (*quota_sync)(struct super_block *, int ) ;
   int (*set_info)(struct super_block *, int , struct qc_info *) ;
   int (*get_dqblk)(struct super_block *, struct kqid , struct qc_dqblk *) ;
   int (*get_nextdqblk)(struct super_block *, struct kqid *, struct qc_dqblk *) ;
   int (*set_dqblk)(struct super_block *, struct kqid , struct qc_dqblk *) ;
   int (*get_state)(struct super_block *, struct qc_state *) ;
   int (*rm_xquota)(struct super_block *, unsigned int ) ;
};
#line 443  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct quota_format_type {
   int qf_fmt_id ;
   struct quota_format_ops *qf_ops ;
   struct module *qf_owner ;
   struct quota_format_type *qf_next ;
};
#line 518  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct quota_info {
   unsigned int flags ;
   struct rw_semaphore dqio_sem ;
   struct inode *files[3U] ;
   struct mem_dqinfo info[3U] ;
   struct quota_format_ops *ops[3U] ;
};
#line 538 
struct writeback_control;
#line 539 
enum rw_hint {
    WRITE_LIFE_NOT_SET = 0,
    WRITE_LIFE_NONE = 1,
    WRITE_LIFE_SHORT = 2,
    WRITE_LIFE_MEDIUM = 3,
    WRITE_LIFE_LONG = 4,
    WRITE_LIFE_EXTREME = 5
};
#line 318  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct kiocb {
   struct file *ki_filp ;
   loff_t ki_pos ;
   void (*ki_complete)(struct kiocb *, long , long ) ;
   void *private ;
   int ki_flags ;
   u16 ki_hint ;
   u16 ki_ioprio ;
   unsigned int ki_cookie ;
};
#line 339  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
union __anonunion_arg_435 {
   char *buf ;
   void *data ;
};
#line 339  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct __anonstruct_read_descriptor_t_434 {
   size_t written ;
   size_t count ;
   union __anonunion_arg_435 arg ;
   int error ;
};
#line 339  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
typedef struct __anonstruct_read_descriptor_t_434 read_descriptor_t;
#line 362  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct address_space_operations {
   int (*writepage)(struct page *, struct writeback_control *) ;
   int (*readpage)(struct file *, struct page *) ;
   int (*writepages)(struct address_space *, struct writeback_control *) ;
   int (*set_page_dirty)(struct page *) ;
   int (*readpages)(struct file *, struct address_space *, struct list_head *, unsigned int ) ;
   int (*write_begin)(struct file *, struct address_space *, loff_t , unsigned int , unsigned int , struct page **, void **) ;
   int (*write_end)(struct file *, struct address_space *, loff_t , unsigned int , unsigned int , struct page *, void *) ;
   sector_t (*bmap)(struct address_space *, sector_t ) ;
   void (*invalidatepage)(struct page *, unsigned int , unsigned int ) ;
   int (*releasepage)(struct page *, gfp_t ) ;
   void (*freepage)(struct page *) ;
   ssize_t (*direct_IO)(struct kiocb *, struct iov_iter *) ;
   int (*migratepage)(struct address_space *, struct page *, struct page *, enum migrate_mode ) ;
   bool (*isolate_page)(struct page *, isolate_mode_t ) ;
   void (*putback_page)(struct page *) ;
   int (*launder_page)(struct page *) ;
   int (*is_partially_uptodate)(struct page *, unsigned long , unsigned long ) ;
   void (*is_dirty_writeback)(struct page *, bool *, bool *) ;
   int (*error_remove_page)(struct address_space *, struct page *) ;
   int (*swap_activate)(struct swap_info_struct *, struct file *, sector_t *) ;
   void (*swap_deactivate)(struct file *) ;
};
#line 445  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct address_space {
   struct inode *host ;
   struct xarray i_pages ;
   gfp_t gfp_mask ;
   atomic_t i_mmap_writable ;
   atomic_t nr_thps ;
   struct rb_root_cached i_mmap ;
   struct rw_semaphore i_mmap_rwsem ;
   unsigned long nrpages ;
   unsigned long nrexceptional ;
   unsigned long writeback_index ;
   struct address_space_operations *a_ops ;
   unsigned long flags ;
   errseq_t wb_err ;
   spinlock_t private_lock ;
   struct list_head private_list ;
   void *private_data ;
} __attribute__((__designated_init__, __aligned__(8)));
#line 473 
struct hd_struct;
#line 473 
struct gendisk;
#line 473  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct block_device {
   dev_t bd_dev ;
   int bd_openers ;
   struct inode *bd_inode ;
   struct super_block *bd_super ;
   struct mutex bd_mutex ;
   void *bd_claiming ;
   void *bd_holder ;
   int bd_holders ;
   bool bd_write_holder ;
   struct list_head bd_holder_disks ;
   struct block_device *bd_contains ;
   unsigned int bd_block_size ;
   u8 bd_partno ;
   struct hd_struct *bd_part ;
   unsigned int bd_part_count ;
   int bd_invalidated ;
   struct gendisk *bd_disk ;
   struct request_queue *bd_queue ;
   struct backing_dev_info *bd_bdi ;
   struct list_head bd_list ;
   unsigned long bd_private ;
   int bd_fsfreeze_count ;
   struct mutex bd_fsfreeze_mutex ;
} __attribute__((__designated_init__));
#line 587 
struct posix_acl;
#line 614 
struct fsnotify_mark_connector;
#line 628 
struct inode_operations;
#line 628  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
union __anonunion_438 {
   unsigned int i_nlink ;
   unsigned int __i_nlink ;
};
#line 628  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
union __anonunion_439 {
   struct hlist_head i_dentry ;
   struct callback_head i_rcu ;
};
#line 628  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
union __anonunion_440 {
   struct file_operations *i_fop ;
   void (*free_inode)(struct inode *) ;
};
#line 628 
struct file_lock_context;
#line 628  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
union __anonunion_441 {
   struct pipe_inode_info *i_pipe ;
   struct block_device *i_bdev ;
   struct cdev *i_cdev ;
   char *i_link ;
   unsigned int i_dir_seq ;
};
#line 628  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct inode {
   umode_t i_mode ;
   unsigned short i_opflags ;
   kuid_t i_uid ;
   kgid_t i_gid ;
   unsigned int i_flags ;
   struct posix_acl *i_acl ;
   struct posix_acl *i_default_acl ;
   struct inode_operations *i_op ;
   struct super_block *i_sb ;
   struct address_space *i_mapping ;
   void *i_security ;
   unsigned long i_ino ;
   union __anonunion_438 __anonCompField_inode_68 ;
   dev_t i_rdev ;
   loff_t i_size ;
   struct timespec64 i_atime ;
   struct timespec64 i_mtime ;
   struct timespec64 i_ctime ;
   spinlock_t i_lock ;
   unsigned short i_bytes ;
   u8 i_blkbits ;
   u8 i_write_hint ;
   blkcnt_t i_blocks ;
   unsigned long i_state ;
   struct rw_semaphore i_rwsem ;
   unsigned long dirtied_when ;
   unsigned long dirtied_time_when ;
   struct hlist_node i_hash ;
   struct list_head i_io_list ;
   struct bdi_writeback *i_wb ;
   int i_wb_frn_winner ;
   u16 i_wb_frn_avg_time ;
   u16 i_wb_frn_history ;
   struct list_head i_lru ;
   struct list_head i_sb_list ;
   struct list_head i_wb_list ;
   union __anonunion_439 __anonCompField_inode_69 ;
   atomic64_t i_version ;
   atomic_t i_count ;
   atomic_t i_dio_count ;
   atomic_t i_writecount ;
   atomic_t i_readcount ;
   union __anonunion_440 __anonCompField_inode_70 ;
   struct file_lock_context *i_flctx ;
   struct address_space i_data ;
   struct list_head i_devices ;
   union __anonunion_441 __anonCompField_inode_71 ;
   __u32 i_generation ;
   __u32 i_fsnotify_mask ;
   struct fsnotify_mark_connector *i_fsnotify_marks ;
   struct fscrypt_info *i_crypt_info ;
   struct fsverity_info *i_verity_info ;
   void *i_private ;
} __attribute__((__designated_init__));
#line 904  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct fown_struct {
   rwlock_t lock ;
   struct pid *pid ;
   enum pid_type pid_type ;
   kuid_t uid ;
   kuid_t euid ;
   int signum ;
};
#line 915  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct file_ra_state {
   unsigned long start ;
   unsigned int size ;
   unsigned int async_size ;
   unsigned int ra_pages ;
   unsigned int mmap_miss ;
   loff_t prev_pos ;
};
#line 935  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
union __anonunion_f_u_442 {
   struct llist_node fu_llist ;
   struct callback_head fu_rcuhead ;
};
#line 935  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct file {
   union __anonunion_f_u_442 f_u ;
   struct path f_path ;
   struct inode *f_inode ;
   struct file_operations *f_op ;
   spinlock_t f_lock ;
   enum rw_hint f_write_hint ;
   atomic_long_t f_count ;
   unsigned int f_flags ;
   fmode_t f_mode ;
   struct mutex f_pos_lock ;
   loff_t f_pos ;
   struct fown_struct f_owner ;
   struct cred *f_cred ;
   struct file_ra_state f_ra ;
   u64 f_version ;
   void *f_security ;
   void *private_data ;
   struct list_head f_ep_links ;
   struct list_head f_tfile_llink ;
   struct address_space *f_mapping ;
   errseq_t f_wb_err ;
} __attribute__((__designated_init__, __aligned__(4)));
#line 988  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
typedef void *fl_owner_t;
#line 1026 
struct file_lock;
#line 1029  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct file_lock_operations {
   void (*fl_copy_lock)(struct file_lock *, struct file_lock *) ;
   void (*fl_release_private)(struct file_lock *) ;
};
#line 1034  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct lock_manager_operations {
   fl_owner_t (*lm_get_owner)(fl_owner_t ) ;
   void (*lm_put_owner)(fl_owner_t ) ;
   void (*lm_notify)(struct file_lock *) ;
   int (*lm_grant)(struct file_lock *, int ) ;
   bool (*lm_break)(struct file_lock *) ;
   int (*lm_change)(struct file_lock *, int , struct list_head *) ;
   void (*lm_setup)(struct file_lock *, void **) ;
};
#line 1052 
struct net;
#line 1058 
struct nlm_lockowner;
#line 10  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/nfs_fs_i.h"
struct nfs_lock_info {
   u32 state ;
   struct nlm_lockowner *owner ;
   struct list_head list ;
};
#line 15 
struct nfs4_lock_state;
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/nfs_fs_i.h"
struct nfs4_lock_info {
   struct nfs4_lock_state *owner ;
};
#line 1079  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct fasync_struct;
#line 1079  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct __anonstruct_afs_444 {
   struct list_head link ;
   int state ;
   unsigned int debug_id ;
};
#line 1079  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
union __anonunion_fl_u_443 {
   struct nfs_lock_info nfs_fl ;
   struct nfs4_lock_info nfs4_fl ;
   struct __anonstruct_afs_444 afs ;
};
#line 1079  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct file_lock {
   struct file_lock *fl_blocker ;
   struct list_head fl_list ;
   struct hlist_node fl_link ;
   struct list_head fl_blocked_requests ;
   struct list_head fl_blocked_member ;
   fl_owner_t fl_owner ;
   unsigned int fl_flags ;
   unsigned char fl_type ;
   unsigned int fl_pid ;
   int fl_link_cpu ;
   wait_queue_head_t fl_wait ;
   struct file *fl_file ;
   loff_t fl_start ;
   loff_t fl_end ;
   struct fasync_struct *fl_fasync ;
   unsigned long fl_break_time ;
   unsigned long fl_downgrade_time ;
   struct file_lock_operations *fl_ops ;
   struct lock_manager_operations *fl_lmops ;
   union __anonunion_fl_u_443 fl_u ;
} __attribute__((__designated_init__));
#line 1117  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct file_lock_context {
   spinlock_t flc_lock ;
   struct list_head flc_flock ;
   struct list_head flc_posix ;
   struct list_head flc_lease ;
};
#line 1331  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct fasync_struct {
   rwlock_t fa_lock ;
   int magic ;
   int fa_fd ;
   struct fasync_struct *fa_next ;
   struct file *fa_file ;
   struct callback_head fa_rcu ;
};
#line 1418  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct sb_writers {
   int frozen ;
   wait_queue_head_t wait_unfrozen ;
   struct percpu_rw_semaphore rw_sem[3U] ;
};
#line 1424 
struct super_operations;
#line 1424 
struct xattr_handler;
#line 1424 
struct mtd_info;
#line 1424  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct super_block {
   struct list_head s_list ;
   dev_t s_dev ;
   unsigned char s_blocksize_bits ;
   unsigned long s_blocksize ;
   loff_t s_maxbytes ;
   struct file_system_type *s_type ;
   struct super_operations *s_op ;
   struct dquot_operations *dq_op ;
   struct quotactl_ops *s_qcop ;
   struct export_operations *s_export_op ;
   unsigned long s_flags ;
   unsigned long s_iflags ;
   unsigned long s_magic ;
   struct dentry *s_root ;
   struct rw_semaphore s_umount ;
   int s_count ;
   atomic_t s_active ;
   void *s_security ;
   struct xattr_handler **s_xattr ;
   struct fscrypt_operations *s_cop ;
   struct key *s_master_keys ;
   struct fsverity_operations *s_vop ;
   struct hlist_bl_head s_roots ;
   struct list_head s_mounts ;
   struct block_device *s_bdev ;
   struct backing_dev_info *s_bdi ;
   struct mtd_info *s_mtd ;
   struct hlist_node s_instances ;
   unsigned int s_quota_types ;
   struct quota_info s_dquot ;
   struct sb_writers s_writers ;
   void *s_fs_info ;
   u32 s_time_gran ;
   time64_t s_time_min ;
   time64_t s_time_max ;
   __u32 s_fsnotify_mask ;
   struct fsnotify_mark_connector *s_fsnotify_marks ;
   char s_id[32U] ;
   uuid_t s_uuid ;
   unsigned int s_max_links ;
   fmode_t s_mode ;
   struct mutex s_vfs_rename_mutex ;
   char *s_subtype ;
   struct dentry_operations *s_d_op ;
   int cleancache_poolid ;
   struct shrinker s_shrink ;
   atomic_long_t s_remove_count ;
   atomic_long_t s_fsnotify_inode_refs ;
   int s_readonly_remount ;
   struct workqueue_struct *s_dio_done_wq ;
   struct hlist_head s_pins ;
   struct user_namespace *s_user_ns ;
   struct list_lru s_dentry_lru ;
   struct list_lru s_inode_lru ;
   struct callback_head rcu ;
   struct work_struct destroy_work ;
   struct mutex s_sync_lock ;
   int s_stack_depth ;
   spinlock_t s_inode_list_lock ;
   struct list_head s_inodes ;
   spinlock_t s_inode_wblist_lock ;
   struct list_head s_inodes_wb ;
} __attribute__((__designated_init__));
#line 1746  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct fiemap_extent_info {
   unsigned int fi_flags ;
   unsigned int fi_extents_mapped ;
   unsigned int fi_extents_max ;
   struct fiemap_extent *fi_extents_start ;
};
#line 1756 
struct dir_context;
#line 1767  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct dir_context {
   int (*actor)(struct dir_context *, char *, int , loff_t , u64 , unsigned int ) ;
   loff_t pos ;
};
#line 1771 
struct block_device_operations;
#line 1821  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct file_operations {
   struct module *owner ;
   loff_t (*llseek)(struct file *, loff_t , int ) ;
   ssize_t (*read)(struct file *, char *, size_t , loff_t *) ;
   ssize_t (*write)(struct file *, char *, size_t , loff_t *) ;
   ssize_t (*read_iter)(struct kiocb *, struct iov_iter *) ;
   ssize_t (*write_iter)(struct kiocb *, struct iov_iter *) ;
   int (*iopoll)(struct kiocb *, bool ) ;
   int (*iterate)(struct file *, struct dir_context *) ;
   int (*iterate_shared)(struct file *, struct dir_context *) ;
   __poll_t (*poll)(struct file *, struct poll_table_struct *) ;
   long (*unlocked_ioctl)(struct file *, unsigned int , unsigned long ) ;
   long (*compat_ioctl)(struct file *, unsigned int , unsigned long ) ;
   int (*mmap)(struct file *, struct vm_area_struct *) ;
   unsigned long mmap_supported_flags ;
   int (*open)(struct inode *, struct file *) ;
   int (*flush)(struct file *, fl_owner_t ) ;
   int (*release)(struct inode *, struct file *) ;
   int (*fsync)(struct file *, loff_t , loff_t , int ) ;
   int (*fasync)(int , struct file *, int ) ;
   int (*lock)(struct file *, int , struct file_lock *) ;
   ssize_t (*sendpage)(struct file *, struct page *, int , size_t , loff_t *, int ) ;
   unsigned long (*get_unmapped_area)(struct file *, unsigned long , unsigned long , unsigned long , unsigned long ) ;
   int (*check_flags)(int ) ;
   int (*flock)(struct file *, int , struct file_lock *) ;
   ssize_t (*splice_write)(struct pipe_inode_info *, struct file *, loff_t *, size_t , unsigned int ) ;
   ssize_t (*splice_read)(struct file *, loff_t *, struct pipe_inode_info *, size_t , unsigned int ) ;
   int (*setlease)(struct file *, long , struct file_lock **, void **) ;
   long (*fallocate)(struct file *, int , loff_t , loff_t ) ;
   void (*show_fdinfo)(struct seq_file *, struct file *) ;
   ssize_t (*copy_file_range)(struct file *, loff_t , struct file *, loff_t , size_t , unsigned int ) ;
   loff_t (*remap_file_range)(struct file *, loff_t , struct file *, loff_t , loff_t , unsigned int ) ;
   int (*fadvise)(struct file *, loff_t , loff_t , int ) ;
} __attribute__((__designated_init__));
#line 1863  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct inode_operations {
   struct dentry *(*lookup)(struct inode *, struct dentry *, unsigned int ) ;
   char *(*get_link)(struct dentry *, struct inode *, struct delayed_call *) ;
   int (*permission)(struct inode *, int ) ;
   struct posix_acl *(*get_acl)(struct inode *, int ) ;
   int (*readlink)(struct dentry *, char *, int ) ;
   int (*create)(struct inode *, struct dentry *, umode_t , bool ) ;
   int (*link)(struct dentry *, struct inode *, struct dentry *) ;
   int (*unlink)(struct inode *, struct dentry *) ;
   int (*symlink)(struct inode *, struct dentry *, char *) ;
   int (*mkdir)(struct inode *, struct dentry *, umode_t ) ;
   int (*rmdir)(struct inode *, struct dentry *) ;
   int (*mknod)(struct inode *, struct dentry *, umode_t , dev_t ) ;
   int (*rename)(struct inode *, struct dentry *, struct inode *, struct dentry *, unsigned int ) ;
   int (*setattr)(struct dentry *, struct iattr *) ;
   int (*getattr)(struct path *, struct kstat *, u32 , unsigned int ) ;
   ssize_t (*listxattr)(struct dentry *, char *, size_t ) ;
   int (*fiemap)(struct inode *, struct fiemap_extent_info *, u64 , u64 ) ;
   int (*update_time)(struct inode *, struct timespec64 *, int ) ;
   int (*atomic_open)(struct inode *, struct dentry *, struct file *, unsigned int , umode_t ) ;
   int (*tmpfile)(struct inode *, struct dentry *, umode_t ) ;
   int (*set_acl)(struct inode *, struct posix_acl *, int ) ;
} __attribute__((__aligned__(64)));
#line 1942  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct super_operations {
   struct inode *(*alloc_inode)(struct super_block *) ;
   void (*destroy_inode)(struct inode *) ;
   void (*free_inode)(struct inode *) ;
   void (*dirty_inode)(struct inode *, int ) ;
   int (*write_inode)(struct inode *, struct writeback_control *) ;
   int (*drop_inode)(struct inode *) ;
   void (*evict_inode)(struct inode *) ;
   void (*put_super)(struct super_block *) ;
   int (*sync_fs)(struct super_block *, int ) ;
   int (*freeze_super)(struct super_block *) ;
   int (*freeze_fs)(struct super_block *) ;
   int (*thaw_super)(struct super_block *) ;
   int (*unfreeze_fs)(struct super_block *) ;
   int (*statfs)(struct dentry *, struct kstatfs *) ;
   int (*remount_fs)(struct super_block *, int *, char *) ;
   void (*umount_begin)(struct super_block *) ;
   int (*show_options)(struct seq_file *, struct dentry *) ;
   int (*show_devname)(struct seq_file *, struct dentry *) ;
   int (*show_path)(struct seq_file *, struct dentry *) ;
   int (*show_stats)(struct seq_file *, struct dentry *) ;
   ssize_t (*quota_read)(struct super_block *, int , char *, size_t , loff_t ) ;
   ssize_t (*quota_write)(struct super_block *, int , char *, size_t , loff_t ) ;
   struct dquot **(*get_dquots)(struct inode *) ;
   int (*bdev_try_to_free_page)(struct super_block *, struct page *, gfp_t ) ;
   long (*nr_cached_objects)(struct super_block *, struct shrink_control *) ;
   long (*free_cached_objects)(struct super_block *, struct shrink_control *) ;
};
#line 2217  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct file_system_type {
   char *name ;
   int fs_flags ;
   int (*init_fs_context)(struct fs_context *) ;
   struct fs_parameter_description *parameters ;
   struct dentry *(*mount)(struct file_system_type *, int , char *, void *) ;
   void (*kill_sb)(struct super_block *) ;
   struct module *owner ;
   struct file_system_type *next ;
   struct hlist_head fs_supers ;
   struct lock_class_key s_lock_key ;
   struct lock_class_key s_umount_key ;
   struct lock_class_key s_vfs_rename_key ;
   struct lock_class_key s_writers_key[3U] ;
   struct lock_class_key i_lock_key ;
   struct lock_class_key i_mutex_key ;
   struct lock_class_key i_mutex_dir_key ;
};
#line 3599 
struct sock;
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/compat.h"
typedef s32 compat_long_t;
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/compat.h"
typedef u32 compat_uptr_t;
#line 367  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/compat.h"
struct compat_robust_list {
   compat_uptr_t next ;
};
#line 371  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/compat.h"
struct compat_robust_list_head {
   struct compat_robust_list list ;
   compat_long_t futex_offset ;
   compat_uptr_t list_op_pending ;
};
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ioport.h"
struct resource {
   resource_size_t start ;
   resource_size_t end ;
   char *name ;
   unsigned long flags ;
   unsigned long desc ;
   struct resource *parent ;
   struct resource *sibling ;
   struct resource *child ;
};
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memremap.h"
struct vmem_altmap {
   unsigned long base_pfn ;
   unsigned long end_pfn ;
   unsigned long reserve ;
   unsigned long free ;
   unsigned long align ;
   unsigned long alloc ;
};
#line 26 
enum memory_type {
    MEMORY_DEVICE_PRIVATE = 1,
    MEMORY_DEVICE_FS_DAX = 2,
    MEMORY_DEVICE_DEVDAX = 3,
    MEMORY_DEVICE_PCI_P2PDMA = 4
};
#line 67  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memremap.h"
struct dev_pagemap_ops {
   void (*page_free)(struct page *) ;
   void (*kill)(struct dev_pagemap *) ;
   void (*cleanup)(struct dev_pagemap *) ;
   vm_fault_t (*migrate_to_ram)(struct vm_fault *) ;
};
#line 107  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memremap.h"
struct dev_pagemap {
   struct vmem_altmap altmap ;
   struct resource res ;
   struct percpu_ref *ref ;
   struct percpu_ref internal_ref ;
   struct completion done ;
   enum memory_type type ;
   unsigned int flags ;
   struct dev_pagemap_ops *ops ;
};
#line 417  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm.h"
struct vm_fault {
   struct vm_area_struct *vma ;
   unsigned int flags ;
   gfp_t gfp_mask ;
   unsigned long pgoff ;
   unsigned long address ;
   pmd_t *pmd ;
   pud_t *pud ;
   pte_t orig_pte ;
   struct page *cow_page ;
   struct mem_cgroup *memcg ;
   struct page *page ;
   pte_t *pte ;
   spinlock_t *ptl ;
   pgtable_t prealloc_pte ;
};
#line 448 
enum page_entry_size {
    PE_SIZE_PTE = 0,
    PE_SIZE_PMD = 1,
    PE_SIZE_PUD = 2
};
#line 467  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm.h"
struct vm_operations_struct {
   void (*open)(struct vm_area_struct *) ;
   void (*close)(struct vm_area_struct *) ;
   int (*split)(struct vm_area_struct *, unsigned long ) ;
   int (*mremap)(struct vm_area_struct *) ;
   vm_fault_t (*fault)(struct vm_fault *) ;
   vm_fault_t (*huge_fault)(struct vm_fault *, enum page_entry_size ) ;
   void (*map_pages)(struct vm_fault *, unsigned long , unsigned long ) ;
   unsigned long (*pagesize)(struct vm_area_struct *) ;
   vm_fault_t (*page_mkwrite)(struct vm_fault *) ;
   vm_fault_t (*pfn_mkwrite)(struct vm_fault *) ;
   int (*access)(struct vm_area_struct *, unsigned long , void *, int , int ) ;
   char *(*name)(struct vm_area_struct *) ;
   int (*set_policy)(struct vm_area_struct *, struct mempolicy *) ;
   struct mempolicy *(*get_policy)(struct vm_area_struct *, unsigned long ) ;
   struct page *(*find_special_page)(struct vm_area_struct *, unsigned long ) ;
};
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bvec.h"
struct bio_vec {
   struct page *bv_page ;
   unsigned int bv_len ;
   unsigned int bv_offset ;
};
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bvec.h"
struct bvec_iter {
   sector_t bi_sector ;
   unsigned int bi_size ;
   unsigned int bi_idx ;
   unsigned int bi_bvec_done ;
};
#line 201  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/random.h"
enum ldv_9149 {
    SS_FREE = 0,
    SS_UNCONNECTED = 1,
    SS_CONNECTING = 2,
    SS_CONNECTED = 3,
    SS_DISCONNECTING = 4
};
#line 209  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/random.h"
typedef enum ldv_9149 socket_state;
#line 94  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/net.h"
struct socket_wq {
   wait_queue_head_t wait ;
   struct fasync_struct *fasync_list ;
   unsigned long flags ;
   struct callback_head rcu ;
} __attribute__((__aligned__(64)));
#line 112 
struct proto_ops;
#line 112  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/net.h"
struct socket {
   socket_state state ;
   short type ;
   unsigned long flags ;
   struct file *file ;
   struct sock *sk ;
   struct proto_ops *ops ;
   struct socket_wq wq ;
};
#line 125 
struct sk_buff;
#line 135  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/net.h"
struct proto_ops {
   int family ;
   struct module *owner ;
   int (*release)(struct socket *) ;
   int (*bind)(struct socket *, struct sockaddr *, int ) ;
   int (*connect)(struct socket *, struct sockaddr *, int , int ) ;
   int (*socketpair)(struct socket *, struct socket *) ;
   int (*accept)(struct socket *, struct socket *, int , bool ) ;
   int (*getname)(struct socket *, struct sockaddr *, int ) ;
   __poll_t (*poll)(struct file *, struct socket *, struct poll_table_struct *) ;
   int (*ioctl)(struct socket *, unsigned int , unsigned long ) ;
   int (*compat_ioctl)(struct socket *, unsigned int , unsigned long ) ;
   int (*gettstamp)(struct socket *, void *, bool , bool ) ;
   int (*listen)(struct socket *, int ) ;
   int (*shutdown)(struct socket *, int ) ;
   int (*setsockopt)(struct socket *, int , int , char *, unsigned int ) ;
   int (*getsockopt)(struct socket *, int , int , char *, int *) ;
   int (*compat_setsockopt)(struct socket *, int , int , char *, unsigned int ) ;
   int (*compat_getsockopt)(struct socket *, int , int , char *, int *) ;
   int (*sendmsg)(struct socket *, struct msghdr *, size_t ) ;
   int (*recvmsg)(struct socket *, struct msghdr *, size_t , int ) ;
   int (*mmap)(struct file *, struct socket *, struct vm_area_struct *) ;
   ssize_t (*sendpage)(struct socket *, struct page *, int , size_t , int ) ;
   ssize_t (*splice_read)(struct socket *, loff_t *, struct pipe_inode_info *, size_t , unsigned int ) ;
   int (*set_peek_off)(struct sock *, int ) ;
   int (*peek_len)(struct socket *) ;
   int (*read_sock)(struct sock *, read_descriptor_t *, int (*)(read_descriptor_t *, struct sk_buff *, unsigned int , size_t )) ;
   int (*sendpage_locked)(struct sock *, struct page *, int , size_t , int ) ;
   int (*sendmsg_locked)(struct sock *, struct msghdr *, size_t ) ;
   int (*set_rcvlowat)(struct sock *, int ) ;
};
#line 162  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/checksum_64.h"
struct in6_addr;
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/idr.h"
struct idr {
   struct xarray idr_rt ;
   unsigned int idr_base ;
   unsigned int idr_next ;
};
#line 323 
struct kernfs_open_node;
#line 324 
struct kernfs_iattrs;
#line 84  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_root;
#line 84  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_elem_dir {
   unsigned long subdirs ;
   struct rb_root children ;
   struct kernfs_root *root ;
};
#line 96 
struct kernfs_node;
#line 96  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_elem_symlink {
   struct kernfs_node *target_kn ;
};
#line 100 
struct kernfs_ops;
#line 100  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_elem_attr {
   struct kernfs_ops *ops ;
   struct kernfs_open_node *open ;
   loff_t size ;
   struct kernfs_node *notify_next ;
};
#line 116  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
union __anonunion_492 {
   struct kernfs_elem_dir dir ;
   struct kernfs_elem_symlink symlink ;
   struct kernfs_elem_attr attr ;
};
#line 116  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_node {
   atomic_t count ;
   atomic_t active ;
   struct lockdep_map dep_map ;
   struct kernfs_node *parent ;
   char *name ;
   struct rb_node rb ;
   void *ns ;
   unsigned int hash ;
   union __anonunion_492 __anonCompField_kernfs_node_73 ;
   void *priv ;
   u64 id ;
   unsigned short flags ;
   umode_t mode ;
   struct kernfs_iattrs *iattr ;
};
#line 161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_syscall_ops {
   int (*show_options)(struct seq_file *, struct kernfs_root *) ;
   int (*mkdir)(struct kernfs_node *, char *, umode_t ) ;
   int (*rmdir)(struct kernfs_node *) ;
   int (*rename)(struct kernfs_node *, struct kernfs_node *, char *) ;
   int (*show_path)(struct seq_file *, struct kernfs_node *, struct kernfs_root *) ;
};
#line 173  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_root {
   struct kernfs_node *kn ;
   unsigned int flags ;
   struct idr ino_idr ;
   u32 last_id_lowbits ;
   u32 id_highbits ;
   struct kernfs_syscall_ops *syscall_ops ;
   struct list_head supers ;
   wait_queue_head_t deactivate_waitq ;
};
#line 190  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_open_file {
   struct kernfs_node *kn ;
   struct file *file ;
   struct seq_file *seq_file ;
   void *priv ;
   struct mutex mutex ;
   struct mutex prealloc_mutex ;
   int event ;
   struct list_head list ;
   char *prealloc_buf ;
   size_t atomic_write_len ;
   bool mmapped : 1 ;
   bool released : 1 ;
   struct vm_operations_struct *vm_ops ;
};
#line 210  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_ops {
   int (*open)(struct kernfs_open_file *) ;
   void (*release)(struct kernfs_open_file *) ;
   int (*seq_show)(struct seq_file *, void *) ;
   void *(*seq_start)(struct seq_file *, loff_t *) ;
   void *(*seq_next)(struct seq_file *, void *, loff_t *) ;
   void (*seq_stop)(struct seq_file *, void *) ;
   ssize_t (*read)(struct kernfs_open_file *, char *, size_t , loff_t ) ;
   size_t atomic_write_len ;
   bool prealloc ;
   ssize_t (*write)(struct kernfs_open_file *, char *, size_t , loff_t ) ;
   __poll_t (*poll)(struct kernfs_open_file *, struct poll_table_struct *) ;
   int (*mmap)(struct kernfs_open_file *, struct vm_area_struct *) ;
   struct lock_class_key lockdep_key ;
};
#line 595 
enum kobj_ns_type {
    KOBJ_NS_TYPE_NONE = 0,
    KOBJ_NS_TYPE_NET = 1,
    KOBJ_NS_TYPES = 2
};
#line 39  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject_ns.h"
struct kobj_ns_type_operations {
   enum kobj_ns_type type ;
   bool (*current_may_mount)(void) ;
   void *(*grab_current_ns)(void) ;
   void *(*netlink_ns)(struct sock *) ;
   void *(*initial_ns)(void) ;
   void (*drop_ns)(void *) ;
};
#line 58 
struct bin_attribute;
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysfs.h"
struct attribute {
   char *name ;
   umode_t mode ;
   bool ignore_lockdep : 1 ;
   struct lock_class_key *key ;
   struct lock_class_key skey ;
};
#line 84  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysfs.h"
struct attribute_group {
   char *name ;
   umode_t (*is_visible)(struct kobject *, struct attribute *, int ) ;
   umode_t (*is_bin_visible)(struct kobject *, struct bin_attribute *, int ) ;
   struct attribute **attrs ;
   struct bin_attribute **bin_attrs ;
};
#line 161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysfs.h"
struct bin_attribute {
   struct attribute attr ;
   size_t size ;
   void *private ;
   ssize_t (*read)(struct file *, struct kobject *, struct bin_attribute *, char *, loff_t , size_t ) ;
   ssize_t (*write)(struct file *, struct kobject *, struct bin_attribute *, char *, loff_t , size_t ) ;
   int (*mmap)(struct file *, struct kobject *, struct bin_attribute *, struct vm_area_struct *) ;
};
#line 223  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysfs.h"
struct sysfs_ops {
   ssize_t (*show)(struct kobject *, struct attribute *, char *) ;
   ssize_t (*store)(struct kobject *, struct attribute *, char *, size_t ) ;
};
#line 65  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject.h"
struct kset;
#line 65 
struct kobj_type;
#line 65  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject.h"
struct kobject {
   char *name ;
   struct list_head entry ;
   struct kobject *parent ;
   struct kset *kset ;
   struct kobj_type *ktype ;
   struct kernfs_node *sd ;
   struct kref kref ;
   struct delayed_work release ;
   unsigned int state_initialized : 1 ;
   unsigned int state_in_sysfs : 1 ;
   unsigned int state_add_uevent_sent : 1 ;
   unsigned int state_remove_uevent_sent : 1 ;
   unsigned int uevent_suppress : 1 ;
};
#line 139  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject.h"
struct kobj_type {
   void (*release)(struct kobject *) ;
   struct sysfs_ops *sysfs_ops ;
   struct attribute **default_attrs ;
   struct attribute_group **default_groups ;
   struct kobj_ns_type_operations *(*child_ns_type)(struct kobject *) ;
   void *(*namespace)(struct kobject *) ;
   void (*get_ownership)(struct kobject *, kuid_t *, kgid_t *) ;
};
#line 149  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject.h"
struct kobj_uevent_env {
   char *argv[3U] ;
   char *envp[32U] ;
   int envp_idx ;
   char buf[2048U] ;
   int buflen ;
};
#line 157  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject.h"
struct kset_uevent_ops {
   int (*filter)(struct kset *, struct kobject *) ;
   char *(*name)(struct kset *, struct kobject *) ;
   int (*uevent)(struct kset *, struct kobject *, struct kobj_uevent_env *) ;
};
#line 193  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject.h"
struct kset {
   struct list_head list ;
   spinlock_t list_lock ;
   struct kobject kobj ;
   struct kset_uevent_ops *uevent_ops ;
} __attribute__((__designated_init__));
#line 50  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm.h"
struct pm_message {
   int event ;
};
#line 53  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm.h"
typedef struct pm_message pm_message_t;
#line 278  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm.h"
struct dev_pm_ops {
   int (*prepare)(struct device *) ;
   void (*complete)(struct device *) ;
   int (*suspend)(struct device *) ;
   int (*resume)(struct device *) ;
   int (*freeze)(struct device *) ;
   int (*thaw)(struct device *) ;
   int (*poweroff)(struct device *) ;
   int (*restore)(struct device *) ;
   int (*suspend_late)(struct device *) ;
   int (*resume_early)(struct device *) ;
   int (*freeze_late)(struct device *) ;
   int (*thaw_early)(struct device *) ;
   int (*poweroff_late)(struct device *) ;
   int (*restore_early)(struct device *) ;
   int (*suspend_noirq)(struct device *) ;
   int (*resume_noirq)(struct device *) ;
   int (*freeze_noirq)(struct device *) ;
   int (*thaw_noirq)(struct device *) ;
   int (*poweroff_noirq)(struct device *) ;
   int (*restore_noirq)(struct device *) ;
   int (*runtime_suspend)(struct device *) ;
   int (*runtime_resume)(struct device *) ;
   int (*runtime_idle)(struct device *) ;
};
#line 303 
enum rpm_status {
    RPM_ACTIVE = 0,
    RPM_RESUMING = 1,
    RPM_SUSPENDED = 2,
    RPM_SUSPENDING = 3
};
#line 310 
enum rpm_request {
    RPM_REQ_NONE = 0,
    RPM_REQ_IDLE = 1,
    RPM_REQ_SUSPEND = 2,
    RPM_REQ_AUTOSUSPEND = 3,
    RPM_REQ_RESUME = 4
};
#line 318 
struct wakeup_source;
#line 319 
struct wake_irq;
#line 320 
struct pm_domain_data;
#line 530  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm.h"
struct pm_subsys_data {
   spinlock_t lock ;
   unsigned int refcount ;
   struct list_head clock_list ;
   struct pm_domain_data *domain_data ;
};
#line 573 
struct dev_pm_qos;
#line 573  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm.h"
struct dev_pm_info {
   pm_message_t power_state ;
   unsigned int can_wakeup : 1 ;
   unsigned int async_suspend : 1 ;
   bool in_dpm_list : 1 ;
   bool is_prepared : 1 ;
   bool is_suspended : 1 ;
   bool is_noirq_suspended : 1 ;
   bool is_late_suspended : 1 ;
   bool no_pm : 1 ;
   bool early_init : 1 ;
   bool direct_complete : 1 ;
   u32 driver_flags ;
   spinlock_t lock ;
   struct list_head entry ;
   struct completion completion ;
   struct wakeup_source *wakeup ;
   bool wakeup_path : 1 ;
   bool syscore : 1 ;
   bool no_pm_callbacks : 1 ;
   unsigned int must_resume : 1 ;
   unsigned int may_skip_resume : 1 ;
   struct hrtimer suspend_timer ;
   unsigned long timer_expires ;
   struct work_struct work ;
   wait_queue_head_t wait_queue ;
   struct wake_irq *wakeirq ;
   atomic_t usage_count ;
   atomic_t child_count ;
   unsigned int disable_depth : 3 ;
   unsigned int idle_notification : 1 ;
   unsigned int request_pending : 1 ;
   unsigned int deferred_resume : 1 ;
   unsigned int runtime_auto : 1 ;
   bool ignore_children : 1 ;
   unsigned int no_callbacks : 1 ;
   unsigned int irq_safe : 1 ;
   unsigned int use_autosuspend : 1 ;
   unsigned int timer_autosuspends : 1 ;
   unsigned int memalloc_noio : 1 ;
   unsigned int links_count ;
   enum rpm_request request ;
   enum rpm_status runtime_status ;
   int runtime_error ;
   int autosuspend_delay ;
   u64 last_busy ;
   u64 active_time ;
   u64 suspended_time ;
   u64 accounting_timestamp ;
   struct pm_subsys_data *subsys_data ;
   void (*set_latency_tolerance)(struct device *, s32 ) ;
   struct dev_pm_qos *qos ;
};
#line 650  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm.h"
struct dev_pm_domain {
   struct dev_pm_ops ops ;
   int (*start)(struct device *) ;
   void (*detach)(struct device *, bool ) ;
   int (*activate)(struct device *) ;
   void (*sync)(struct device *) ;
   void (*dismiss)(struct device *) ;
};
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ratelimit.h"
struct ratelimit_state {
   raw_spinlock_t lock ;
   int interval ;
   int burst ;
   int printed ;
   int missed ;
   unsigned long begin ;
   unsigned long flags ;
};
#line 5  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/device.h"
struct dev_archdata {
   void *iommu ;
};
#line 12 
struct dma_map_ops;
#line 23 
struct device_driver;
#line 24 
struct driver_private;
#line 25 
struct class;
#line 26 
struct subsys_private;
#line 27 
struct bus_type;
#line 28 
struct iommu_ops;
#line 29 
struct iommu_group;
#line 30 
struct iommu_fwspec;
#line 31 
struct dev_pin_info;
#line 32 
struct iommu_param;
#line 122  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct bus_type {
   char *name ;
   char *dev_name ;
   struct device *dev_root ;
   struct attribute_group **bus_groups ;
   struct attribute_group **dev_groups ;
   struct attribute_group **drv_groups ;
   int (*match)(struct device *, struct device_driver *) ;
   int (*uevent)(struct device *, struct kobj_uevent_env *) ;
   int (*probe)(struct device *) ;
   void (*sync_state)(struct device *) ;
   int (*remove)(struct device *) ;
   void (*shutdown)(struct device *) ;
   int (*online)(struct device *) ;
   int (*offline)(struct device *) ;
   int (*suspend)(struct device *, pm_message_t ) ;
   int (*resume)(struct device *) ;
   int (*num_vf)(struct device *) ;
   int (*dma_configure)(struct device *) ;
   struct dev_pm_ops *pm ;
   struct iommu_ops *iommu_ops ;
   struct subsys_private *p ;
   struct lock_class_key lock_key ;
   bool need_parent_lock ;
};
#line 164 
struct device_type;
#line 309 
enum probe_type {
    PROBE_DEFAULT_STRATEGY = 0,
    PROBE_PREFER_ASYNCHRONOUS = 1,
    PROBE_FORCE_SYNCHRONOUS = 2
};
#line 383 
struct of_device_id;
#line 383 
struct acpi_device_id;
#line 383  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct device_driver {
   char *name ;
   struct bus_type *bus ;
   struct module *owner ;
   char *mod_name ;
   bool suppress_bind_attrs ;
   enum probe_type probe_type ;
   struct of_device_id *of_match_table ;
   struct acpi_device_id *acpi_match_table ;
   int (*probe)(struct device *) ;
   void (*sync_state)(struct device *) ;
   int (*remove)(struct device *) ;
   void (*shutdown)(struct device *) ;
   int (*suspend)(struct device *, pm_message_t ) ;
   int (*resume)(struct device *) ;
   struct attribute_group **groups ;
   struct attribute_group **dev_groups ;
   struct dev_pm_ops *pm ;
   void (*coredump)(struct device *) ;
   struct driver_private *p ;
};
#line 589  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct class {
   char *name ;
   struct module *owner ;
   struct attribute_group **class_groups ;
   struct attribute_group **dev_groups ;
   struct kobject *dev_kobj ;
   int (*dev_uevent)(struct device *, struct kobj_uevent_env *) ;
   char *(*devnode)(struct device *, umode_t *) ;
   void (*class_release)(struct class *) ;
   void (*dev_release)(struct device *) ;
   int (*shutdown_pre)(struct device *) ;
   struct kobj_ns_type_operations *ns_type ;
   void *(*namespace)(struct device *) ;
   void (*get_ownership)(struct device *, kuid_t *, kgid_t *) ;
   struct dev_pm_ops *pm ;
   struct subsys_private *p ;
};
#line 809  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct device_type {
   char *name ;
   struct attribute_group **groups ;
   int (*uevent)(struct device *, struct kobj_uevent_env *) ;
   char *(*devnode)(struct device *, umode_t *, kuid_t *, kgid_t *) ;
   void (*release)(struct device *) ;
   struct dev_pm_ops *pm ;
};
#line 1008  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct device_dma_parameters {
   unsigned int max_segment_size ;
   unsigned long segment_boundary_mask ;
};
#line 1139 
enum dl_dev_state {
    DL_DEV_NO_DRIVER = 0,
    DL_DEV_PROBING = 1,
    DL_DEV_DRIVER_BOUND = 2,
    DL_DEV_UNBINDING = 3
};
#line 1164  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct dev_links_info {
   struct list_head suppliers ;
   struct list_head consumers ;
   struct list_head needs_suppliers ;
   struct list_head defer_sync ;
   bool need_for_probe ;
   enum dl_dev_state status ;
};
#line 1259 
struct dma_coherent_mem;
#line 1259 
struct cma;
#line 1259  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct device {
   struct kobject kobj ;
   struct device *parent ;
   struct device_private *p ;
   char *init_name ;
   struct device_type *type ;
   struct bus_type *bus ;
   struct device_driver *driver ;
   void *platform_data ;
   void *driver_data ;
   struct mutex lockdep_mutex ;
   struct mutex mutex ;
   struct dev_links_info links ;
   struct dev_pm_info power ;
   struct dev_pm_domain *pm_domain ;
   struct irq_domain *msi_domain ;
   struct dev_pin_info *pins ;
   struct list_head msi_list ;
   struct dma_map_ops *dma_ops ;
   u64 *dma_mask ;
   u64 coherent_dma_mask ;
   u64 bus_dma_limit ;
   unsigned long dma_pfn_offset ;
   struct device_dma_parameters *dma_parms ;
   struct list_head dma_pools ;
   struct dma_coherent_mem *dma_mem ;
   struct cma *cma_area ;
   struct dev_archdata archdata ;
   struct device_node *of_node ;
   struct fwnode_handle *fwnode ;
   int numa_node ;
   dev_t devt ;
   u32 id ;
   spinlock_t devres_lock ;
   struct list_head devres_head ;
   struct class *class ;
   struct attribute_group **groups ;
   void (*release)(struct device *) ;
   struct iommu_group *iommu_group ;
   struct iommu_fwspec *iommu_fwspec ;
   struct iommu_param *iommu_param ;
   bool offline_disabled : 1 ;
   bool offline : 1 ;
   bool of_node_reused : 1 ;
   bool state_synced : 1 ;
};
#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm_wakeup.h"
struct wakeup_source {
   char *name ;
   int id ;
   struct list_head entry ;
   spinlock_t lock ;
   struct wake_irq *wakeirq ;
   struct timer_list timer ;
   unsigned long timer_expires ;
   ktime_t total_time ;
   ktime_t max_time ;
   ktime_t last_time ;
   ktime_t start_prevent_time ;
   ktime_t prevent_sleep_time ;
   unsigned long event_count ;
   unsigned long active_count ;
   unsigned long relax_count ;
   unsigned long expire_count ;
   unsigned long wakeup_count ;
   struct device *dev ;
   bool active : 1 ;
   bool autosleep_enabled : 1 ;
};
#line 71  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-debug.h"
enum dma_data_direction {
    DMA_BIDIRECTIONAL = 0,
    DMA_TO_DEVICE = 1,
    DMA_FROM_DEVICE = 2,
    DMA_NONE = 3
};
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/scatterlist.h"
struct scatterlist {
   unsigned long page_link ;
   unsigned int offset ;
   unsigned int length ;
   dma_addr_t dma_address ;
   unsigned int dma_length ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/scatterlist.h"
struct sg_table {
   struct scatterlist *sgl ;
   unsigned int nents ;
   unsigned int orig_nents ;
};
#line 76  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
struct dma_map_ops {
   void *(*alloc)(struct device *, size_t , dma_addr_t *, gfp_t , unsigned long ) ;
   void (*free)(struct device *, size_t , void *, dma_addr_t , unsigned long ) ;
   int (*mmap)(struct device *, struct vm_area_struct *, void *, dma_addr_t , size_t , unsigned long ) ;
   int (*get_sgtable)(struct device *, struct sg_table *, void *, dma_addr_t , size_t , unsigned long ) ;
   dma_addr_t (*map_page)(struct device *, struct page *, unsigned long , size_t , enum dma_data_direction , unsigned long ) ;
   void (*unmap_page)(struct device *, dma_addr_t , size_t , enum dma_data_direction , unsigned long ) ;
   int (*map_sg)(struct device *, struct scatterlist *, int , enum dma_data_direction , unsigned long ) ;
   void (*unmap_sg)(struct device *, struct scatterlist *, int , enum dma_data_direction , unsigned long ) ;
   dma_addr_t (*map_resource)(struct device *, phys_addr_t , size_t , enum dma_data_direction , unsigned long ) ;
   void (*unmap_resource)(struct device *, dma_addr_t , size_t , enum dma_data_direction , unsigned long ) ;
   void (*sync_single_for_cpu)(struct device *, dma_addr_t , size_t , enum dma_data_direction ) ;
   void (*sync_single_for_device)(struct device *, dma_addr_t , size_t , enum dma_data_direction ) ;
   void (*sync_sg_for_cpu)(struct device *, struct scatterlist *, int , enum dma_data_direction ) ;
   void (*sync_sg_for_device)(struct device *, struct scatterlist *, int , enum dma_data_direction ) ;
   void (*cache_sync)(struct device *, void *, size_t , enum dma_data_direction ) ;
   int (*dma_supported)(struct device *, u64 ) ;
   u64 (*get_required_mask)(struct device *) ;
   size_t (*max_mapping_size)(struct device *) ;
   unsigned long (*get_merge_boundary)(struct device *) ;
};
#line 803  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
typedef u64 netdev_features_t;
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/in6.h"
union __anonunion_in6_u_495 {
   __u8 u6_addr8[16U] ;
   __be16 u6_addr16[8U] ;
   __be32 u6_addr32[4U] ;
};
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/in6.h"
struct in6_addr {
   union __anonunion_in6_u_495 in6_u ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/in6.h"
struct __anonstruct_siphash_key_t_496 {
   u64 key[2U] ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/in6.h"
typedef struct __anonstruct_siphash_key_t_496 siphash_key_t;
#line 163  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if_ether.h"
struct ethhdr {
   unsigned char h_dest[6U] ;
   unsigned char h_source[6U] ;
   __be16 h_proto ;
} __attribute__((__packed__));
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pipe_fs_i.h"
struct pipe_buf_operations;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pipe_fs_i.h"
struct pipe_buffer {
   struct page *page ;
   unsigned int offset ;
   unsigned int len ;
   struct pipe_buf_operations *ops ;
   unsigned int flags ;
   unsigned long private ;
};
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pipe_fs_i.h"
struct pipe_inode_info {
   struct mutex mutex ;
   wait_queue_head_t wait ;
   unsigned int head ;
   unsigned int tail ;
   unsigned int max_usage ;
   unsigned int ring_size ;
   unsigned int readers ;
   unsigned int writers ;
   unsigned int files ;
   unsigned int r_counter ;
   unsigned int w_counter ;
   struct page *tmp_page ;
   struct fasync_struct *fasync_readers ;
   struct fasync_struct *fasync_writers ;
   struct pipe_buffer *bufs ;
   struct user_struct *user ;
};
#line 77  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pipe_fs_i.h"
struct pipe_buf_operations {
   int (*confirm)(struct pipe_inode_info *, struct pipe_buffer *) ;
   void (*release)(struct pipe_inode_info *, struct pipe_buffer *) ;
   int (*steal)(struct pipe_inode_info *, struct pipe_buffer *) ;
   bool (*get)(struct pipe_inode_info *, struct pipe_buffer *) ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct flowi_tunnel {
   __be64 tun_id ;
};
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct flowi_common {
   int flowic_oif ;
   int flowic_iif ;
   __u32 flowic_mark ;
   __u8 flowic_tos ;
   __u8 flowic_scope ;
   __u8 flowic_proto ;
   __u8 flowic_flags ;
   __u32 flowic_secid ;
   kuid_t flowic_uid ;
   struct flowi_tunnel flowic_tun_key ;
   __u32 flowic_multipath_hash ;
};
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct __anonstruct_ports_507 {
   __be16 dport ;
   __be16 sport ;
};
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct __anonstruct_icmpt_508 {
   __u8 type ;
   __u8 code ;
};
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct __anonstruct_dnports_509 {
   __le16 dport ;
   __le16 sport ;
};
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct __anonstruct_mht_510 {
   __u8 type ;
};
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
union flowi_uli {
   struct __anonstruct_ports_507 ports ;
   struct __anonstruct_icmpt_508 icmpt ;
   struct __anonstruct_dnports_509 dnports ;
   __be32 spi ;
   __be32 gre_key ;
   struct __anonstruct_mht_510 mht ;
};
#line 70  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct flowi4 {
   struct flowi_common __fl_common ;
   __be32 saddr ;
   __be32 daddr ;
   union flowi_uli uli ;
} __attribute__((__aligned__(8)));
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct flowi6 {
   struct flowi_common __fl_common ;
   struct in6_addr daddr ;
   struct in6_addr saddr ;
   __be32 flowlabel ;
   union flowi_uli uli ;
   __u32 mp_hash ;
} __attribute__((__aligned__(8)));
#line 158  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct flowidn {
   struct flowi_common __fl_common ;
   __le16 daddr ;
   __le16 saddr ;
   union flowi_uli uli ;
} __attribute__((__aligned__(8)));
#line 173  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
union __anonunion_u_511 {
   struct flowi_common __fl_common ;
   struct flowi4 ip4 ;
   struct flowi6 ip6 ;
   struct flowidn dn ;
};
#line 173  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct flowi {
   union __anonunion_u_511 u ;
} __attribute__((__aligned__(8)));
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netfilter/nf_conntrack_common.h"
struct ip_conntrack_stat {
   unsigned int found ;
   unsigned int invalid ;
   unsigned int ignore ;
   unsigned int insert ;
   unsigned int insert_failed ;
   unsigned int drop ;
   unsigned int early_drop ;
   unsigned int error ;
   unsigned int expect_new ;
   unsigned int expect_create ;
   unsigned int expect_delete ;
   unsigned int search_restart ;
};
#line 41 
struct napi_struct;
#line 42 
struct bpf_prog;
#line 43 
union bpf_attr;
#line 44 
struct skb_ext;
#line 289  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
struct sk_buff_head {
   struct sk_buff *next ;
   struct sk_buff *prev ;
   __u32 qlen ;
   spinlock_t lock ;
};
#line 313  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
typedef struct bio_vec skb_frag_t;
#line 416  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
struct skb_shared_hwtstamps {
   ktime_t hwtstamp ;
};
#line 510  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
struct skb_shared_info {
   __u8 __unused ;
   __u8 meta_len ;
   __u8 nr_frags ;
   __u8 tx_flags ;
   unsigned short gso_size ;
   unsigned short gso_segs ;
   struct sk_buff *frag_list ;
   struct skb_shared_hwtstamps hwtstamps ;
   unsigned int gso_type ;
   u32 tskey ;
   atomic_t dataref ;
   void *destructor_arg ;
   skb_frag_t frags[17U] ;
};
#line 562  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
typedef unsigned int sk_buff_data_t;
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_518 {
   struct net_device *dev ;
   unsigned long dev_scratch ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
struct __anonstruct_517 {
   struct sk_buff *next ;
   struct sk_buff *prev ;
   union __anonunion_518 __anonCompField___anonstruct_517_86 ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_516 {
   struct __anonstruct_517 __anonCompField___anonunion_516_87 ;
   struct rb_node rbnode ;
   struct list_head list ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_519 {
   struct sock *sk ;
   int ip_defrag_offset ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_520 {
   ktime_t tstamp ;
   u64 skb_mstamp_ns ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
struct __anonstruct_522 {
   unsigned long _skb_refdst ;
   void (*destructor)(struct sk_buff *) ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_521 {
   struct __anonstruct_522 __anonCompField___anonunion_521_91 ;
   struct list_head tcp_tsorted_anchor ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
struct __anonstruct_524 {
   __u16 csum_start ;
   __u16 csum_offset ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_523 {
   __wsum csum ;
   struct __anonstruct_524 __anonCompField___anonunion_523_93 ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_525 {
   unsigned int napi_id ;
   unsigned int sender_cpu ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_526 {
   __u32 mark ;
   __u32 reserved_tailroom ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_527 {
   __be16 inner_protocol ;
   __u8 inner_ipproto ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
struct sk_buff {
   union __anonunion_516 __anonCompField_sk_buff_88 ;
   union __anonunion_519 __anonCompField_sk_buff_89 ;
   union __anonunion_520 __anonCompField_sk_buff_90 ;
   char cb[48U] ;
   union __anonunion_521 __anonCompField_sk_buff_92 ;
   unsigned long _nfct ;
   unsigned int len ;
   unsigned int data_len ;
   __u16 mac_len ;
   __u16 hdr_len ;
   __u16 queue_mapping ;
   __u8 __cloned_offset[0U] ;
   __u8 cloned : 1 ;
   __u8 nohdr : 1 ;
   __u8 fclone : 2 ;
   __u8 peeked : 1 ;
   __u8 head_frag : 1 ;
   __u8 pfmemalloc : 1 ;
   __u8 active_extensions ;
   __u32 headers_start[0U] ;
   __u8 __pkt_type_offset[0U] ;
   __u8 pkt_type : 3 ;
   __u8 ignore_df : 1 ;
   __u8 nf_trace : 1 ;
   __u8 ip_summed : 2 ;
   __u8 ooo_okay : 1 ;
   __u8 l4_hash : 1 ;
   __u8 sw_hash : 1 ;
   __u8 wifi_acked_valid : 1 ;
   __u8 wifi_acked : 1 ;
   __u8 no_fcs : 1 ;
   __u8 encapsulation : 1 ;
   __u8 encap_hdr_csum : 1 ;
   __u8 csum_valid : 1 ;
   __u8 __pkt_vlan_present_offset[0U] ;
   __u8 vlan_present : 1 ;
   __u8 csum_complete_sw : 1 ;
   __u8 csum_level : 2 ;
   __u8 csum_not_inet : 1 ;
   __u8 dst_pending_confirm : 1 ;
   __u8 ndisc_nodetype : 2 ;
   __u8 ipvs_property : 1 ;
   __u8 inner_protocol_type : 1 ;
   __u8 remcsum_offload : 1 ;
   __u8 offload_fwd_mark : 1 ;
   __u8 offload_l3_fwd_mark : 1 ;
   __u8 tc_skip_classify : 1 ;
   __u8 tc_at_ingress : 1 ;
   __u8 tc_redirected : 1 ;
   __u8 tc_from_ingress : 1 ;
   __u8 decrypted : 1 ;
   __u16 tc_index ;
   union __anonunion_523 __anonCompField_sk_buff_94 ;
   __u32 priority ;
   int skb_iif ;
   __u32 hash ;
   __be16 vlan_proto ;
   __u16 vlan_tci ;
   union __anonunion_525 __anonCompField_sk_buff_95 ;
   __u32 secmark ;
   union __anonunion_526 __anonCompField_sk_buff_96 ;
   union __anonunion_527 __anonCompField_sk_buff_97 ;
   __u16 inner_transport_header ;
   __u16 inner_network_header ;
   __u16 inner_mac_header ;
   __be16 protocol ;
   __u16 transport_header ;
   __u16 network_header ;
   __u16 mac_header ;
   __u32 headers_end[0U] ;
   sk_buff_data_t tail ;
   sk_buff_data_t end ;
   unsigned char *head ;
   unsigned char *data ;
   unsigned int truesize ;
   refcount_t users ;
   struct skb_ext *extensions ;
};
#line 920 
struct dst_entry;
#line 1165 
enum pkt_hash_types {
    PKT_HASH_TYPE_NONE = 0,
    PKT_HASH_TYPE_L2 = 1,
    PKT_HASH_TYPE_L3 = 2,
    PKT_HASH_TYPE_L4 = 3
};
#line 4108  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
struct skb_ext {
   refcount_t refcnt ;
   u8 offset[3U] ;
   u8 chunks ;
   char data[0U] ;
};
#line 177  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_drvinfo {
   __u32 cmd ;
   char driver[32U] ;
   char version[32U] ;
   char fw_version[32U] ;
   char bus_info[32U] ;
   char erom_version[32U] ;
   char reserved2[12U] ;
   __u32 n_priv_flags ;
   __u32 n_stats ;
   __u32 testinfo_len ;
   __u32 eedump_len ;
   __u32 regdump_len ;
};
#line 203  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_wolinfo {
   __u32 cmd ;
   __u32 supported ;
   __u32 wolopts ;
   __u8 sopass[6U] ;
};
#line 244  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_tunable {
   __u32 cmd ;
   __u32 id ;
   __u32 type_id ;
   __u32 len ;
   void *data[0U] ;
};
#line 310  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_regs {
   __u32 cmd ;
   __u32 version ;
   __u32 len ;
   __u8 data[0U] ;
};
#line 335  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_eeprom {
   __u32 cmd ;
   __u32 magic ;
   __u32 offset ;
   __u32 len ;
   __u8 data[0U] ;
};
#line 360  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_eee {
   __u32 cmd ;
   __u32 supported ;
   __u32 advertised ;
   __u32 lp_advertised ;
   __u32 eee_active ;
   __u32 eee_enabled ;
   __u32 tx_lpi_enabled ;
   __u32 tx_lpi_timer ;
   __u32 reserved[2U] ;
};
#line 382  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_modinfo {
   __u32 cmd ;
   __u32 type ;
   __u32 eeprom_len ;
   __u32 reserved[8U] ;
};
#line 462  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_coalesce {
   __u32 cmd ;
   __u32 rx_coalesce_usecs ;
   __u32 rx_max_coalesced_frames ;
   __u32 rx_coalesce_usecs_irq ;
   __u32 rx_max_coalesced_frames_irq ;
   __u32 tx_coalesce_usecs ;
   __u32 tx_max_coalesced_frames ;
   __u32 tx_coalesce_usecs_irq ;
   __u32 tx_max_coalesced_frames_irq ;
   __u32 stats_block_coalesce_usecs ;
   __u32 use_adaptive_rx_coalesce ;
   __u32 use_adaptive_tx_coalesce ;
   __u32 pkt_rate_low ;
   __u32 rx_coalesce_usecs_low ;
   __u32 rx_max_coalesced_frames_low ;
   __u32 tx_coalesce_usecs_low ;
   __u32 tx_max_coalesced_frames_low ;
   __u32 pkt_rate_high ;
   __u32 rx_coalesce_usecs_high ;
   __u32 rx_max_coalesced_frames_high ;
   __u32 tx_coalesce_usecs_high ;
   __u32 tx_max_coalesced_frames_high ;
   __u32 rate_sample_interval ;
};
#line 513  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_ringparam {
   __u32 cmd ;
   __u32 rx_max_pending ;
   __u32 rx_mini_max_pending ;
   __u32 rx_jumbo_max_pending ;
   __u32 tx_max_pending ;
   __u32 rx_pending ;
   __u32 rx_mini_pending ;
   __u32 rx_jumbo_pending ;
   __u32 tx_pending ;
};
#line 541  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_channels {
   __u32 cmd ;
   __u32 max_rx ;
   __u32 max_tx ;
   __u32 max_other ;
   __u32 max_combined ;
   __u32 rx_count ;
   __u32 tx_count ;
   __u32 other_count ;
   __u32 combined_count ;
};
#line 575  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_pauseparam {
   __u32 cmd ;
   __u32 autoneg ;
   __u32 rx_pause ;
   __u32 tx_pause ;
};
#line 683  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_test {
   __u32 cmd ;
   __u32 flags ;
   __u32 reserved ;
   __u32 len ;
   __u64 data[0U] ;
};
#line 702  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_stats {
   __u32 cmd ;
   __u32 n_stats ;
   __u64 data[0U] ;
};
#line 758  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_tcpip4_spec {
   __be32 ip4src ;
   __be32 ip4dst ;
   __be16 psrc ;
   __be16 pdst ;
   __u8 tos ;
};
#line 775  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_ah_espip4_spec {
   __be32 ip4src ;
   __be32 ip4dst ;
   __be32 spi ;
   __u8 tos ;
};
#line 793  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_usrip4_spec {
   __be32 ip4src ;
   __be32 ip4dst ;
   __be32 l4_4_bytes ;
   __u8 tos ;
   __u8 ip_ver ;
   __u8 proto ;
};
#line 812  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_tcpip6_spec {
   __be32 ip6src[4U] ;
   __be32 ip6dst[4U] ;
   __be16 psrc ;
   __be16 pdst ;
   __u8 tclass ;
};
#line 829  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_ah_espip6_spec {
   __be32 ip6src[4U] ;
   __be32 ip6dst[4U] ;
   __be32 spi ;
   __u8 tclass ;
};
#line 844  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_usrip6_spec {
   __be32 ip6src[4U] ;
   __be32 ip6dst[4U] ;
   __be32 l4_4_bytes ;
   __u8 tclass ;
   __u8 l4_proto ;
};
#line 852  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
union ethtool_flow_union {
   struct ethtool_tcpip4_spec tcp_ip4_spec ;
   struct ethtool_tcpip4_spec udp_ip4_spec ;
   struct ethtool_tcpip4_spec sctp_ip4_spec ;
   struct ethtool_ah_espip4_spec ah_ip4_spec ;
   struct ethtool_ah_espip4_spec esp_ip4_spec ;
   struct ethtool_usrip4_spec usr_ip4_spec ;
   struct ethtool_tcpip6_spec tcp_ip6_spec ;
   struct ethtool_tcpip6_spec udp_ip6_spec ;
   struct ethtool_tcpip6_spec sctp_ip6_spec ;
   struct ethtool_ah_espip6_spec ah_ip6_spec ;
   struct ethtool_ah_espip6_spec esp_ip6_spec ;
   struct ethtool_usrip6_spec usr_ip6_spec ;
   struct ethhdr ether_spec ;
   __u8 hdata[52U] ;
};
#line 880  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_flow_ext {
   __u8 padding[2U] ;
   unsigned char h_dest[6U] ;
   __be16 vlan_etype ;
   __be16 vlan_tci ;
   __be32 data[2U] ;
};
#line 905  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_rx_flow_spec {
   __u32 flow_type ;
   union ethtool_flow_union h_u ;
   struct ethtool_flow_ext h_ext ;
   union ethtool_flow_union m_u ;
   struct ethtool_flow_ext m_ext ;
   __u64 ring_cookie ;
   __u32 location ;
};
#line 1001  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
union __anonunion_553 {
   __u32 rule_cnt ;
   __u32 rss_context ;
};
#line 1001  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_rxnfc {
   __u32 cmd ;
   __u32 flow_type ;
   __u64 data ;
   struct ethtool_rx_flow_spec fs ;
   union __anonunion_553 __anonCompField_ethtool_rxnfc_99 ;
   __u32 rule_locs[0U] ;
};
#line 1130  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_flash {
   __u32 cmd ;
   __u32 region ;
   char data[128U] ;
};
#line 1150  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_dump {
   __u32 cmd ;
   __u32 version ;
   __u32 flag ;
   __u32 len ;
   __u8 data[0U] ;
};
#line 1230  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_ts_info {
   __u32 cmd ;
   __u32 so_timestamping ;
   __s32 phc_index ;
   __u32 tx_types ;
   __u32 tx_reserved[3U] ;
   __u32 rx_filters ;
   __u32 rx_reserved[3U] ;
};
#line 1302  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_fecparam {
   __u32 cmd ;
   __u32 active_fec ;
   __u32 fec ;
   __u32 reserved ;
};
#line 1876  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_link_settings {
   __u32 cmd ;
   __u32 speed ;
   __u8 duplex ;
   __u8 port ;
   __u8 phy_address ;
   __u8 autoneg ;
   __u8 mdio_support ;
   __u8 eth_tp_mdix ;
   __u8 eth_tp_mdix_ctrl ;
   __s8 link_mode_masks_nwords ;
   __u8 transceiver ;
   __u8 reserved1[3U] ;
   __u32 reserved[7U] ;
   __u32 link_mode_masks[0U] ;
};
#line 40  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ethtool.h"
enum ethtool_phys_id_state {
    ETHTOOL_ID_INACTIVE = 0,
    ETHTOOL_ID_ACTIVE = 1,
    ETHTOOL_ID_ON = 2,
    ETHTOOL_ID_OFF = 3
};
#line 108  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ethtool.h"
struct __anonstruct_link_modes_556 {
   unsigned long supported[2U] ;
   unsigned long advertising[2U] ;
   unsigned long lp_advertising[2U] ;
};
#line 108  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ethtool.h"
struct ethtool_link_ksettings {
   struct ethtool_link_settings base ;
   struct __anonstruct_link_modes_556 link_modes ;
};
#line 325  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ethtool.h"
struct ethtool_ops {
   void (*get_drvinfo)(struct net_device *, struct ethtool_drvinfo *) ;
   int (*get_regs_len)(struct net_device *) ;
   void (*get_regs)(struct net_device *, struct ethtool_regs *, void *) ;
   void (*get_wol)(struct net_device *, struct ethtool_wolinfo *) ;
   int (*set_wol)(struct net_device *, struct ethtool_wolinfo *) ;
   u32 (*get_msglevel)(struct net_device *) ;
   void (*set_msglevel)(struct net_device *, u32 ) ;
   int (*nway_reset)(struct net_device *) ;
   u32 (*get_link)(struct net_device *) ;
   int (*get_eeprom_len)(struct net_device *) ;
   int (*get_eeprom)(struct net_device *, struct ethtool_eeprom *, u8 *) ;
   int (*set_eeprom)(struct net_device *, struct ethtool_eeprom *, u8 *) ;
   int (*get_coalesce)(struct net_device *, struct ethtool_coalesce *) ;
   int (*set_coalesce)(struct net_device *, struct ethtool_coalesce *) ;
   void (*get_ringparam)(struct net_device *, struct ethtool_ringparam *) ;
   int (*set_ringparam)(struct net_device *, struct ethtool_ringparam *) ;
   void (*get_pauseparam)(struct net_device *, struct ethtool_pauseparam *) ;
   int (*set_pauseparam)(struct net_device *, struct ethtool_pauseparam *) ;
   void (*self_test)(struct net_device *, struct ethtool_test *, u64 *) ;
   void (*get_strings)(struct net_device *, u32 , u8 *) ;
   int (*set_phys_id)(struct net_device *, enum ethtool_phys_id_state ) ;
   void (*get_ethtool_stats)(struct net_device *, struct ethtool_stats *, u64 *) ;
   int (*begin)(struct net_device *) ;
   void (*complete)(struct net_device *) ;
   u32 (*get_priv_flags)(struct net_device *) ;
   int (*set_priv_flags)(struct net_device *, u32 ) ;
   int (*get_sset_count)(struct net_device *, int ) ;
   int (*get_rxnfc)(struct net_device *, struct ethtool_rxnfc *, u32 *) ;
   int (*set_rxnfc)(struct net_device *, struct ethtool_rxnfc *) ;
   int (*flash_device)(struct net_device *, struct ethtool_flash *) ;
   int (*reset)(struct net_device *, u32 *) ;
   u32 (*get_rxfh_key_size)(struct net_device *) ;
   u32 (*get_rxfh_indir_size)(struct net_device *) ;
   int (*get_rxfh)(struct net_device *, u32 *, u8 *, u8 *) ;
   int (*set_rxfh)(struct net_device *, u32 *, u8 *, u8 ) ;
   int (*get_rxfh_context)(struct net_device *, u32 *, u8 *, u8 *, u32 ) ;
   int (*set_rxfh_context)(struct net_device *, u32 *, u8 *, u8 , u32 *, bool ) ;
   void (*get_channels)(struct net_device *, struct ethtool_channels *) ;
   int (*set_channels)(struct net_device *, struct ethtool_channels *) ;
   int (*get_dump_flag)(struct net_device *, struct ethtool_dump *) ;
   int (*get_dump_data)(struct net_device *, struct ethtool_dump *, void *) ;
   int (*set_dump)(struct net_device *, struct ethtool_dump *) ;
   int (*get_ts_info)(struct net_device *, struct ethtool_ts_info *) ;
   int (*get_module_info)(struct net_device *, struct ethtool_modinfo *) ;
   int (*get_module_eeprom)(struct net_device *, struct ethtool_eeprom *, u8 *) ;
   int (*get_eee)(struct net_device *, struct ethtool_eee *) ;
   int (*set_eee)(struct net_device *, struct ethtool_eee *) ;
   int (*get_tunable)(struct net_device *, struct ethtool_tunable *, void *) ;
   int (*set_tunable)(struct net_device *, struct ethtool_tunable *, void *) ;
   int (*get_per_queue_coalesce)(struct net_device *, u32 , struct ethtool_coalesce *) ;
   int (*set_per_queue_coalesce)(struct net_device *, u32 , struct ethtool_coalesce *) ;
   int (*get_link_ksettings)(struct net_device *, struct ethtool_link_ksettings *) ;
   int (*set_link_ksettings)(struct net_device *, struct ethtool_link_ksettings *) ;
   int (*get_fecparam)(struct net_device *, struct ethtool_fecparam *) ;
   int (*set_fecparam)(struct net_device *, struct ethtool_fecparam *) ;
   void (*get_ethtool_phy_stats)(struct net_device *, struct ethtool_stats *, u64 *) ;
};
#line 41  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dynamic_queue_limits.h"
struct dql {
   unsigned int num_queued ;
   unsigned int adj_limit ;
   unsigned int last_obj_cnt ;
   unsigned int limit ;
   unsigned int num_completed ;
   unsigned int prev_ovlimit ;
   unsigned int prev_num_queued ;
   unsigned int prev_last_obj_cnt ;
   unsigned int lowest_slack ;
   unsigned long slack_start_time ;
   unsigned int max_limit ;
   unsigned int min_limit ;
   unsigned int slack_hold_time ;
};
#line 92  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dynamic_queue_limits.h"
union __anonunion___u_558 {
   unsigned int __val ;
   char __c[1U] ;
};
#line 92  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dynamic_queue_limits.h"
union __anonunion___u_560 {
   unsigned int __val ;
   char __c[1U] ;
};
#line 822  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/sysctl.h"
struct ctl_table_root;
#line 823 
struct ctl_table_header;
#line 824 
struct ctl_dir;
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
typedef int proc_handler(struct ctl_table *, int , void *, size_t *, loff_t *);
#line 105  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct ctl_table_poll {
   atomic_t event ;
   wait_queue_head_t wait ;
};
#line 123  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct ctl_table {
   char *procname ;
   void *data ;
   int maxlen ;
   umode_t mode ;
   struct ctl_table *child ;
   proc_handler *proc_handler ;
   struct ctl_table_poll *poll ;
   void *extra1 ;
   void *extra2 ;
} __attribute__((__designated_init__));
#line 135  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct ctl_node {
   struct rb_node node ;
   struct ctl_table_header *header ;
};
#line 142  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct __anonstruct_562 {
   struct ctl_table *ctl_table ;
   int used ;
   int count ;
   int nreg ;
};
#line 142  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
union __anonunion_561 {
   struct __anonstruct_562 __anonCompField___anonunion_561_100 ;
   struct callback_head rcu ;
};
#line 142 
struct ctl_table_set;
#line 142  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct ctl_table_header {
   union __anonunion_561 __anonCompField_ctl_table_header_101 ;
   struct completion *unregistering ;
   struct ctl_table *ctl_table_arg ;
   struct ctl_table_root *root ;
   struct ctl_table_set *set ;
   struct ctl_dir *parent ;
   struct ctl_node *node ;
   struct hlist_head inodes ;
};
#line 161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct ctl_dir {
   struct ctl_table_header header ;
   struct rb_root root ;
};
#line 167  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct ctl_table_set {
   int (*is_seen)(struct ctl_table_set *) ;
   struct ctl_dir dir ;
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct ctl_table_root {
   struct ctl_table_set default_set ;
   struct ctl_table_set *(*lookup)(struct ctl_table_root *) ;
   void (*set_ownership)(struct ctl_table_header *, struct ctl_table *, kuid_t *, kgid_t *) ;
   int (*permissions)(struct ctl_table_header *, struct ctl_table *) ;
};
#line 242 
struct prot_inuse;
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/core.h"
struct netns_core {
   struct ctl_table_header *sysctl_hdr ;
   int sysctl_somaxconn ;
   int *sock_inuse ;
   struct prot_inuse *prot_inuse ;
};
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct u64_stats_sync {
   };
#line 36  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct __anonstruct_local_t_563 {
   atomic_long_t a ;
};
#line 36  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
typedef struct __anonstruct_local_t_563 local_t;
#line 119  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/local.h"
struct __anonstruct_local64_t_564 {
   local_t a ;
};
#line 119  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/local.h"
typedef struct __anonstruct_local64_t_564 local64_t;
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/local64.h"
struct __anonstruct_u64_stats_t_565 {
   local64_t v ;
};
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/local64.h"
typedef struct __anonstruct_u64_stats_t_565 u64_stats_t;
#line 51  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct ipstats_mib {
   u64 mibs[37U] ;
   struct u64_stats_sync syncp ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct icmp_mib {
   unsigned long mibs[28U] ;
};
#line 64  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct icmpmsg_mib {
   atomic_long_t mibs[512U] ;
};
#line 71  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct icmpv6_mib {
   unsigned long mibs[6U] ;
};
#line 75  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct icmpv6_mib_device {
   atomic_long_t mibs[6U] ;
};
#line 81  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct icmpv6msg_mib {
   atomic_long_t mibs[512U] ;
};
#line 85  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct icmpv6msg_mib_device {
   atomic_long_t mibs[512U] ;
};
#line 92  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct tcp_mib {
   unsigned long mibs[16U] ;
};
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct udp_mib {
   unsigned long mibs[9U] ;
};
#line 104  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct linux_mib {
   unsigned long mibs[120U] ;
};
#line 110  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct linux_xfrm_mib {
   unsigned long mibs[29U] ;
};
#line 116  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct linux_tls_mib {
   unsigned long mibs[11U] ;
};
#line 7  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/mib.h"
struct proc_dir_entry;
#line 7  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/mib.h"
struct netns_mib {
   struct tcp_mib *tcp_statistics ;
   struct ipstats_mib *ip_statistics ;
   struct linux_mib *net_statistics ;
   struct udp_mib *udp_statistics ;
   struct udp_mib *udplite_statistics ;
   struct icmp_mib *icmp_statistics ;
   struct icmpmsg_mib *icmpmsg_statistics ;
   struct proc_dir_entry *proc_net_devsnmp6 ;
   struct udp_mib *udp_stats_in6 ;
   struct udp_mib *udplite_stats_in6 ;
   struct ipstats_mib *ipv6_statistics ;
   struct icmpv6_mib *icmpv6_statistics ;
   struct icmpv6msg_mib *icmpv6msg_statistics ;
   struct linux_xfrm_mib *xfrm_statistics ;
   struct linux_tls_mib *tls_statistics ;
};
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/unix.h"
struct netns_unix {
   int sysctl_max_dgram_qlen ;
   struct ctl_table_header *ctl ;
};
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/packet.h"
struct netns_packet {
   struct mutex sklist_lock ;
   struct hlist_head sklist ;
};
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_frag.h"
struct inet_frags;
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_frag.h"
struct fqdir {
   long high_thresh ;
   long low_thresh ;
   int timeout ;
   int max_dist ;
   struct inet_frags *f ;
   struct net *net ;
   bool dead ;
   struct rhashtable rhashtable ;
   atomic_long_t mem ;
   struct work_struct destroy_work ;
};
#line 41  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_frag.h"
struct frag_v4_compare_key {
   __be32 saddr ;
   __be32 daddr ;
   u32 user ;
   u32 vif ;
   __be16 id ;
   u16 protocol ;
};
#line 50  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_frag.h"
struct frag_v6_compare_key {
   struct in6_addr saddr ;
   struct in6_addr daddr ;
   u32 user ;
   __be32 id ;
   u32 iif ;
};
#line 77  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_frag.h"
union __anonunion_key_566 {
   struct frag_v4_compare_key v4 ;
   struct frag_v6_compare_key v6 ;
};
#line 77  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_frag.h"
struct inet_frag_queue {
   struct rhash_head node ;
   union __anonunion_key_566 key ;
   struct timer_list timer ;
   spinlock_t lock ;
   refcount_t refcnt ;
   struct rb_root rb_fragments ;
   struct sk_buff *fragments_tail ;
   struct sk_buff *last_run_head ;
   ktime_t stamp ;
   int len ;
   int meat ;
   __u8 flags ;
   u16 max_size ;
   struct fqdir *fqdir ;
   struct callback_head rcu ;
};
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_frag.h"
struct inet_frags {
   unsigned int qsize ;
   void (*constructor)(struct inet_frag_queue *, void *) ;
   void (*destructor)(struct inet_frag_queue *) ;
   void (*frag_expire)(struct timer_list *) ;
   struct kmem_cache *frags_cachep ;
   char *frags_cache_name ;
   struct rhashtable_params rhash_params ;
   refcount_t refcnt ;
   struct completion completion ;
};
#line 177 
struct ipv4_devconf;
#line 178 
struct fib_rules_ops;
#line 179 
struct fib_table;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv4.h"
struct local_ports {
   seqlock_t lock ;
   int range[2U] ;
   bool warned ;
};
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv4.h"
struct ping_group_range {
   seqlock_t lock ;
   kgid_t range[2U] ;
};
#line 31 
struct inet_hashinfo;
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv4.h"
struct inet_timewait_death_row {
   atomic_t tw_count ;
   struct inet_hashinfo *hashinfo ;
   int sysctl_max_tw_buckets ;
};
#line 40 
struct tcp_fastopen_context;
#line 43 
struct ip_ra_chain;
#line 43 
struct inet_peer_base;
#line 43 
struct xt_table;
#line 43 
struct tcp_congestion_ops;
#line 43 
struct fib_notifier_ops;
#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv4.h"
struct netns_ipv4 {
   struct ctl_table_header *forw_hdr ;
   struct ctl_table_header *frags_hdr ;
   struct ctl_table_header *ipv4_hdr ;
   struct ctl_table_header *route_hdr ;
   struct ctl_table_header *xfrm4_hdr ;
   struct ipv4_devconf *devconf_all ;
   struct ipv4_devconf *devconf_dflt ;
   struct ip_ra_chain *ra_chain ;
   struct mutex ra_mutex ;
   struct fib_rules_ops *rules_ops ;
   bool fib_has_custom_rules ;
   unsigned int fib_rules_require_fldissect ;
   struct fib_table *fib_main ;
   struct fib_table *fib_default ;
   bool fib_has_custom_local_routes ;
   int fib_num_tclassid_users ;
   struct hlist_head *fib_table_hash ;
   bool fib_offload_disabled ;
   struct sock *fibnl ;
   struct sock **icmp_sk ;
   struct sock *mc_autojoin_sk ;
   struct inet_peer_base *peers ;
   struct sock **tcp_sk ;
   struct fqdir *fqdir ;
   struct xt_table *iptable_filter ;
   struct xt_table *iptable_mangle ;
   struct xt_table *iptable_raw ;
   struct xt_table *arptable_filter ;
   struct xt_table *iptable_security ;
   struct xt_table *nat_table ;
   int sysctl_icmp_echo_ignore_all ;
   int sysctl_icmp_echo_ignore_broadcasts ;
   int sysctl_icmp_ignore_bogus_error_responses ;
   int sysctl_icmp_ratelimit ;
   int sysctl_icmp_ratemask ;
   int sysctl_icmp_errors_use_inbound_ifaddr ;
   struct local_ports ip_local_ports ;
   int sysctl_tcp_ecn ;
   int sysctl_tcp_ecn_fallback ;
   int sysctl_ip_default_ttl ;
   int sysctl_ip_no_pmtu_disc ;
   int sysctl_ip_fwd_use_pmtu ;
   int sysctl_ip_fwd_update_priority ;
   int sysctl_ip_nonlocal_bind ;
   int sysctl_ip_dynaddr ;
   int sysctl_ip_early_demux ;
   int sysctl_raw_l3mdev_accept ;
   int sysctl_tcp_early_demux ;
   int sysctl_udp_early_demux ;
   int sysctl_fwmark_reflect ;
   int sysctl_tcp_fwmark_accept ;
   int sysctl_tcp_l3mdev_accept ;
   int sysctl_tcp_mtu_probing ;
   int sysctl_tcp_mtu_probe_floor ;
   int sysctl_tcp_base_mss ;
   int sysctl_tcp_min_snd_mss ;
   int sysctl_tcp_probe_threshold ;
   u32 sysctl_tcp_probe_interval ;
   int sysctl_tcp_keepalive_time ;
   int sysctl_tcp_keepalive_probes ;
   int sysctl_tcp_keepalive_intvl ;
   int sysctl_tcp_syn_retries ;
   int sysctl_tcp_synack_retries ;
   int sysctl_tcp_syncookies ;
   int sysctl_tcp_reordering ;
   int sysctl_tcp_retries1 ;
   int sysctl_tcp_retries2 ;
   int sysctl_tcp_orphan_retries ;
   int sysctl_tcp_fin_timeout ;
   unsigned int sysctl_tcp_notsent_lowat ;
   int sysctl_tcp_tw_reuse ;
   int sysctl_tcp_sack ;
   int sysctl_tcp_window_scaling ;
   int sysctl_tcp_timestamps ;
   int sysctl_tcp_early_retrans ;
   int sysctl_tcp_recovery ;
   int sysctl_tcp_thin_linear_timeouts ;
   int sysctl_tcp_slow_start_after_idle ;
   int sysctl_tcp_retrans_collapse ;
   int sysctl_tcp_stdurg ;
   int sysctl_tcp_rfc1337 ;
   int sysctl_tcp_abort_on_overflow ;
   int sysctl_tcp_fack ;
   int sysctl_tcp_max_reordering ;
   int sysctl_tcp_dsack ;
   int sysctl_tcp_app_win ;
   int sysctl_tcp_adv_win_scale ;
   int sysctl_tcp_frto ;
   int sysctl_tcp_nometrics_save ;
   int sysctl_tcp_moderate_rcvbuf ;
   int sysctl_tcp_tso_win_divisor ;
   int sysctl_tcp_workaround_signed_windows ;
   int sysctl_tcp_limit_output_bytes ;
   int sysctl_tcp_challenge_ack_limit ;
   int sysctl_tcp_min_tso_segs ;
   int sysctl_tcp_min_rtt_wlen ;
   int sysctl_tcp_autocorking ;
   int sysctl_tcp_invalid_ratelimit ;
   int sysctl_tcp_pacing_ss_ratio ;
   int sysctl_tcp_pacing_ca_ratio ;
   int sysctl_tcp_wmem[3U] ;
   int sysctl_tcp_rmem[3U] ;
   int sysctl_tcp_comp_sack_nr ;
   unsigned long sysctl_tcp_comp_sack_delay_ns ;
   struct inet_timewait_death_row tcp_death_row ;
   int sysctl_max_syn_backlog ;
   int sysctl_tcp_fastopen ;
   struct tcp_congestion_ops *tcp_congestion_control ;
   struct tcp_fastopen_context *tcp_fastopen_ctx ;
   spinlock_t tcp_fastopen_ctx_lock ;
   unsigned int sysctl_tcp_fastopen_blackhole_timeout ;
   atomic_t tfo_active_disable_times ;
   unsigned long tfo_active_disable_stamp ;
   int sysctl_udp_wmem_min ;
   int sysctl_udp_rmem_min ;
   int sysctl_udp_l3mdev_accept ;
   int sysctl_igmp_max_memberships ;
   int sysctl_igmp_max_msf ;
   int sysctl_igmp_llm_reports ;
   int sysctl_igmp_qrv ;
   struct ping_group_range ping_group_range ;
   atomic_t dev_addr_genid ;
   unsigned long *sysctl_local_reserved_ports ;
   int sysctl_ip_prot_sock ;
   struct list_head mr_tables ;
   struct fib_rules_ops *mr_rules_ops ;
   int sysctl_fib_multipath_use_neigh ;
   int sysctl_fib_multipath_hash_policy ;
   struct fib_notifier_ops *notifier_ops ;
   unsigned int fib_seq ;
   struct fib_notifier_ops *ipmr_notifier_ops ;
   unsigned int ipmr_seq ;
   atomic_t rt_genid ;
   siphash_key_t ip_id_key ;
};
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/dst_ops.h"
struct neighbour;
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/dst_ops.h"
struct dst_ops {
   unsigned short family ;
   unsigned int gc_thresh ;
   int (*gc)(struct dst_ops *) ;
   struct dst_entry *(*check)(struct dst_entry *, __u32 ) ;
   unsigned int (*default_advmss)(struct dst_entry *) ;
   unsigned int (*mtu)(struct dst_entry *) ;
   u32 *(*cow_metrics)(struct dst_entry *, unsigned long ) ;
   void (*destroy)(struct dst_entry *) ;
   void (*ifdown)(struct dst_entry *, struct net_device *, int ) ;
   struct dst_entry *(*negative_advice)(struct dst_entry *) ;
   void (*link_failure)(struct sk_buff *) ;
   void (*update_pmtu)(struct dst_entry *, struct sock *, struct sk_buff *, u32 , bool ) ;
   void (*redirect)(struct dst_entry *, struct sock *, struct sk_buff *) ;
   int (*local_out)(struct net *, struct sock *, struct sk_buff *) ;
   struct neighbour *(*neigh_lookup)(struct dst_entry *, struct sk_buff *, void *) ;
   void (*confirm_neigh)(struct dst_entry *, void *) ;
   struct kmem_cache *kmem_cachep ;
   struct percpu_counter pcpuc_entries ;
};
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv6.h"
struct netns_sysctl_ipv6 {
   struct ctl_table_header *hdr ;
   struct ctl_table_header *route_hdr ;
   struct ctl_table_header *icmp_hdr ;
   struct ctl_table_header *frags_hdr ;
   struct ctl_table_header *xfrm6_hdr ;
   int bindv6only ;
   int flush_delay ;
   int ip6_rt_max_size ;
   int ip6_rt_gc_min_interval ;
   int ip6_rt_gc_timeout ;
   int ip6_rt_gc_interval ;
   int ip6_rt_gc_elasticity ;
   int ip6_rt_mtu_expires ;
   int ip6_rt_min_advmss ;
   int multipath_hash_policy ;
   int flowlabel_consistency ;
   int auto_flowlabels ;
   int icmpv6_time ;
   int icmpv6_echo_ignore_all ;
   int icmpv6_echo_ignore_multicast ;
   int icmpv6_echo_ignore_anycast ;
   unsigned long icmpv6_ratemask[4U] ;
   unsigned long *icmpv6_ratemask_ptr ;
   int anycast_src_echo_reply ;
   int ip_nonlocal_bind ;
   int fwmark_reflect ;
   int idgen_retries ;
   int idgen_delay ;
   int flowlabel_state_ranges ;
   int flowlabel_reflect ;
   int max_dst_opts_cnt ;
   int max_hbh_opts_cnt ;
   int max_dst_opts_len ;
   int max_hbh_opts_len ;
   int seg6_flowlabel ;
   bool skip_notify_on_dev_down ;
};
#line 56 
struct ipv6_devconf;
#line 56 
struct fib6_info;
#line 56 
struct rt6_info;
#line 56 
struct rt6_statistics;
#line 56 
struct fib6_table;
#line 56 
struct seg6_pernet_data;
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv6.h"
struct __anonstruct_ip6addrlbl_table_568 {
   struct hlist_head head ;
   spinlock_t lock ;
   u32 seq ;
};
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv6.h"
struct netns_ipv6 {
   struct netns_sysctl_ipv6 sysctl ;
   struct ipv6_devconf *devconf_all ;
   struct ipv6_devconf *devconf_dflt ;
   struct inet_peer_base *peers ;
   struct fqdir *fqdir ;
   struct xt_table *ip6table_filter ;
   struct xt_table *ip6table_mangle ;
   struct xt_table *ip6table_raw ;
   struct xt_table *ip6table_security ;
   struct xt_table *ip6table_nat ;
   struct fib6_info *fib6_null_entry ;
   struct rt6_info *ip6_null_entry ;
   struct rt6_statistics *rt6_stats ;
   struct timer_list ip6_fib_timer ;
   struct hlist_head *fib_table_hash ;
   struct fib6_table *fib6_main_tbl ;
   struct list_head fib6_walkers ;
   struct dst_ops ip6_dst_ops ;
   rwlock_t fib6_walker_lock ;
   spinlock_t fib6_gc_lock ;
   unsigned int ip6_rt_gc_expire ;
   unsigned long ip6_rt_last_gc ;
   unsigned int fib6_rules_require_fldissect ;
   bool fib6_has_custom_rules ;
   unsigned int fib6_routes_require_src ;
   struct rt6_info *ip6_prohibit_entry ;
   struct rt6_info *ip6_blk_hole_entry ;
   struct fib6_table *fib6_local_tbl ;
   struct fib_rules_ops *fib6_rules_ops ;
   struct sock **icmp_sk ;
   struct sock *ndisc_sk ;
   struct sock *tcp_sk ;
   struct sock *igmp_sk ;
   struct sock *mc_autojoin_sk ;
   struct list_head mr6_tables ;
   struct fib_rules_ops *mr6_rules_ops ;
   atomic_t dev_addr_genid ;
   atomic_t fib6_sernum ;
   struct seg6_pernet_data *seg6_data ;
   struct fib_notifier_ops *notifier_ops ;
   struct fib_notifier_ops *ip6mr_notifier_ops ;
   unsigned int ipmr_seq ;
   struct __anonstruct_ip6addrlbl_table_568 ip6addrlbl_table ;
};
#line 121  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv6.h"
struct netns_nf_frag {
   struct fqdir *fqdir ;
};
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/nexthop.h"
struct netns_nexthop {
   struct rb_root rb_root ;
   struct hlist_head *devhash ;
   unsigned int seq ;
   u32 last_id_allocated ;
};
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ieee802154_6lowpan.h"
struct netns_sysctl_lowpan {
   struct ctl_table_header *frags_hdr ;
};
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ieee802154_6lowpan.h"
struct netns_ieee802154_lowpan {
   struct netns_sysctl_lowpan sysctl ;
   struct fqdir *fqdir ;
};
#line 21 
struct sctp_mib;
#line 10  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/sctp.h"
struct netns_sctp {
   struct sctp_mib *sctp_statistics ;
   struct proc_dir_entry *proc_net_sctp ;
   struct ctl_table_header *sysctl_header ;
   struct sock *ctl_sock ;
   struct list_head local_addr_list ;
   struct list_head addr_waitq ;
   struct timer_list addr_wq_timer ;
   struct list_head auto_asconf_splist ;
   spinlock_t addr_wq_lock ;
   spinlock_t local_addr_lock ;
   unsigned int rto_initial ;
   unsigned int rto_min ;
   unsigned int rto_max ;
   int rto_alpha ;
   int rto_beta ;
   int max_burst ;
   int cookie_preserve_enable ;
   char *sctp_hmac_alg ;
   unsigned int valid_cookie_life ;
   unsigned int sack_timeout ;
   unsigned int hb_interval ;
   int max_retrans_association ;
   int max_retrans_path ;
   int max_retrans_init ;
   int pf_retrans ;
   int ps_retrans ;
   int pf_enable ;
   int pf_expose ;
   int sndbuf_policy ;
   int rcvbuf_policy ;
   int default_auto_asconf ;
   int addip_enable ;
   int addip_noauth ;
   int prsctp_enable ;
   int reconf_enable ;
   int auth_enable ;
   int intl_enable ;
   int ecn_enable ;
   int scope_policy ;
   int rwnd_upd_shift ;
   unsigned long max_autoclose ;
};
#line 7  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/dccp.h"
struct netns_dccp {
   struct sock *v4_ctl_sk ;
   struct sock *v6_ctl_sk ;
};
#line 75  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/netfilter.h"
struct nf_logger;
#line 76 
struct nf_queue_handler;
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/netfilter.h"
struct nf_hook_entries;
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/netfilter.h"
struct netns_nf {
   struct proc_dir_entry *proc_netfilter ;
   struct nf_queue_handler *queue_handler ;
   struct nf_logger *nf_loggers[13U] ;
   struct ctl_table_header *nf_log_dir_header ;
   struct nf_hook_entries *hooks_ipv4[5U] ;
   struct nf_hook_entries *hooks_ipv6[5U] ;
   struct nf_hook_entries *hooks_arp[3U] ;
   struct nf_hook_entries *hooks_bridge[5U] ;
   struct nf_hook_entries *hooks_decnet[7U] ;
   bool defrag_ipv4 ;
   bool defrag_ipv6 ;
};
#line 37 
struct ebt_table;
#line 10  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/x_tables.h"
struct netns_xt {
   struct list_head tables[13U] ;
   bool notrack_deprecated_warning ;
   bool clusterip_deprecated_warning ;
   struct ebt_table *broute_table ;
   struct ebt_table *frame_filter ;
   struct ebt_table *frame_nat ;
};
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_nulls.h"
struct hlist_nulls_node;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_nulls.h"
struct hlist_nulls_head {
   struct hlist_nulls_node *first ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_nulls.h"
struct hlist_nulls_node {
   struct hlist_nulls_node *next ;
   struct hlist_nulls_node **pprev ;
};
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_generic_net {
   unsigned int timeout ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_tcp_net {
   unsigned int timeouts[14U] ;
   int tcp_loose ;
   int tcp_be_liberal ;
   int tcp_max_retrans ;
};
#line 38  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_udp_net {
   unsigned int timeouts[2U] ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_icmp_net {
   unsigned int timeout ;
};
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_dccp_net {
   int dccp_loose ;
   unsigned int dccp_timeout[10U] ;
};
#line 54  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_sctp_net {
   unsigned int timeouts[10U] ;
};
#line 66  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_gre_net {
   struct list_head keymap_list ;
   unsigned int timeouts[2U] ;
};
#line 72  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_ip_net {
   struct nf_generic_net generic ;
   struct nf_tcp_net tcp ;
   struct nf_udp_net udp ;
   struct nf_icmp_net icmp ;
   struct nf_icmp_net icmpv6 ;
   struct nf_dccp_net dccp ;
   struct nf_sctp_net sctp ;
   struct nf_gre_net gre ;
};
#line 89  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct ct_pcpu {
   spinlock_t lock ;
   struct hlist_nulls_head unconfirmed ;
   struct hlist_nulls_head dying ;
};
#line 95 
struct nf_ct_event_notifier;
#line 95 
struct nf_exp_event_notifier;
#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct netns_ct {
   atomic_t count ;
   unsigned int expect_count ;
   struct delayed_work ecache_dwork ;
   bool ecache_dwork_pending ;
   bool auto_assign_helper_warned ;
   struct ctl_table_header *sysctl_header ;
   unsigned int sysctl_log_invalid ;
   int sysctl_events ;
   int sysctl_acct ;
   int sysctl_auto_assign_helper ;
   int sysctl_tstamp ;
   int sysctl_checksum ;
   struct ct_pcpu *pcpu_lists ;
   struct ip_conntrack_stat *stat ;
   struct nf_ct_event_notifier *nf_conntrack_event_cb ;
   struct nf_exp_event_notifier *nf_expect_event_cb ;
   struct nf_ip_net nf_ct_proto ;
   unsigned int labels_used ;
};
#line 7  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/nftables.h"
struct netns_nftables {
   struct list_head tables ;
   struct list_head commit_list ;
   struct list_head module_list ;
   struct mutex commit_mutex ;
   unsigned int base_seq ;
   u8 gencursor ;
   u8 validate_state ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/xfrm.h"
struct xfrm_policy_hash {
   struct hlist_head *table ;
   unsigned int hmask ;
   u8 dbits4 ;
   u8 sbits4 ;
   u8 dbits6 ;
   u8 sbits6 ;
};
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/xfrm.h"
struct xfrm_policy_hthresh {
   struct work_struct work ;
   seqlock_t lock ;
   u8 lbits4 ;
   u8 rbits4 ;
   u8 lbits6 ;
   u8 rbits6 ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/xfrm.h"
struct netns_xfrm {
   struct list_head state_all ;
   struct hlist_head *state_bydst ;
   struct hlist_head *state_bysrc ;
   struct hlist_head *state_byspi ;
   unsigned int state_hmask ;
   unsigned int state_num ;
   struct work_struct state_hash_work ;
   struct list_head policy_all ;
   struct hlist_head *policy_byidx ;
   unsigned int policy_idx_hmask ;
   struct hlist_head policy_inexact[3U] ;
   struct xfrm_policy_hash policy_bydst[3U] ;
   unsigned int policy_count[6U] ;
   struct work_struct policy_hash_work ;
   struct xfrm_policy_hthresh policy_hthresh ;
   struct list_head inexact_bins ;
   struct sock *nlsk ;
   struct sock *nlsk_stash ;
   u32 sysctl_aevent_etime ;
   u32 sysctl_aevent_rseqth ;
   int sysctl_larval_drop ;
   u32 sysctl_acq_expires ;
   struct ctl_table_header *sysctl_hdr ;
   struct dst_ops xfrm4_dst_ops ;
   struct dst_ops xfrm6_dst_ops ;
   spinlock_t xfrm_state_lock ;
   spinlock_t xfrm_policy_lock ;
   struct mutex xfrm_cfg_mutex ;
};
#line 79 
struct mpls_route;
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/mpls.h"
struct netns_mpls {
   int ip_ttl_propagate ;
   int default_ttl ;
   size_t platform_labels ;
   struct mpls_route **platform_label ;
   struct ctl_table_header *ctl ;
};
#line 20 
struct can_dev_rcv_lists;
#line 21 
struct can_pkg_stats;
#line 22 
struct can_rcv_lists_stats;
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/can.h"
struct netns_can {
   struct proc_dir_entry *proc_dir ;
   struct proc_dir_entry *pde_version ;
   struct proc_dir_entry *pde_stats ;
   struct proc_dir_entry *pde_reset_stats ;
   struct proc_dir_entry *pde_rcvlist_all ;
   struct proc_dir_entry *pde_rcvlist_fil ;
   struct proc_dir_entry *pde_rcvlist_inv ;
   struct proc_dir_entry *pde_rcvlist_sff ;
   struct proc_dir_entry *pde_rcvlist_eff ;
   struct proc_dir_entry *pde_rcvlist_err ;
   struct proc_dir_entry *bcmproc_dir ;
   struct can_dev_rcv_lists *rx_alldev_list ;
   spinlock_t rcvlists_lock ;
   struct timer_list stattimer ;
   struct can_pkg_stats *pkg_stats ;
   struct can_rcv_lists_stats *rcv_lists_stats ;
   struct hlist_head cgw_list ;
};
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/xdp.h"
struct netns_xdp {
   struct mutex lock ;
   struct hlist_head list ;
};
#line 12 
struct proc_ns_operations;
#line 7  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ns_common.h"
struct ns_common {
   atomic_long_t stashed ;
   struct proc_ns_operations *ops ;
   unsigned int inum ;
};
#line 12 
struct net_generic;
#line 13 
struct uevent_sock;
#line 14 
struct netns_ipvs;
#line 55  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/net_namespace.h"
struct key_tag;
#line 55 
struct ucounts;
#line 55  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/net_namespace.h"
struct net {
   refcount_t passive ;
   refcount_t count ;
   spinlock_t rules_mod_lock ;
   unsigned int dev_unreg_count ;
   unsigned int dev_base_seq ;
   int ifindex ;
   spinlock_t nsid_lock ;
   atomic_t fnhe_genid ;
   struct list_head list ;
   struct list_head exit_list ;
   struct llist_node cleanup_list ;
   struct key_tag *key_domain ;
   struct user_namespace *user_ns ;
   struct ucounts *ucounts ;
   struct idr netns_ids ;
   struct ns_common ns ;
   struct list_head dev_base_head ;
   struct proc_dir_entry *proc_net ;
   struct proc_dir_entry *proc_net_stat ;
   struct ctl_table_set sysctls ;
   struct sock *rtnl ;
   struct sock *genl_sock ;
   struct uevent_sock *uevent_sock ;
   struct hlist_head *dev_name_head ;
   struct hlist_head *dev_index_head ;
   struct raw_notifier_head netdev_chain ;
   u32 hash_mix ;
   struct net_device *loopback_dev ;
   struct list_head rules_ops ;
   struct netns_core core ;
   struct netns_mib mib ;
   struct netns_packet packet ;
   struct netns_unix unx ;
   struct netns_nexthop nexthop ;
   struct netns_ipv4 ipv4 ;
   struct netns_ipv6 ipv6 ;
   struct netns_ieee802154_lowpan ieee802154_lowpan ;
   struct netns_sctp sctp ;
   struct netns_dccp dccp ;
   struct netns_nf nf ;
   struct netns_xt xt ;
   struct netns_ct ct ;
   struct netns_nftables nft ;
   struct netns_nf_frag nf_frag ;
   struct ctl_table_header *nf_frag_frags_hdr ;
   struct sock *nfnl ;
   struct sock *nfnl_stash ;
   struct list_head nfnl_acct_list ;
   struct list_head nfct_timeout_list ;
   struct sk_buff_head wext_nlevents ;
   struct net_generic *gen ;
   struct bpf_prog *flow_dissector_prog ;
   struct netns_xfrm xfrm ;
   struct netns_ipvs *ipvs ;
   struct netns_mpls mpls ;
   struct netns_can can ;
   struct netns_xdp xdp ;
   struct sock *crypto_nlsk ;
   struct sock *diag_nlsk ;
} __attribute__((__designated_init__));
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/assoc_array.h"
struct assoc_array_ptr;
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/assoc_array.h"
struct assoc_array {
   struct assoc_array_ptr *root ;
   unsigned long nr_leaves_on_tree ;
};
#line 83  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/assoc_array.h"
typedef int32_t key_serial_t;
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
typedef uint32_t key_perm_t;
#line 32 
struct key_type;
#line 85  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
struct key_tag {
   struct callback_head rcu ;
   refcount_t usage ;
   bool removed ;
};
#line 91  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
struct __anonstruct_581 {
   u16 desc_len ;
   char desc[6U] ;
};
#line 91  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
union __anonunion_580 {
   struct __anonstruct_581 __anonCompField___anonunion_580_102 ;
   unsigned long x ;
};
#line 91  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
struct keyring_index_key {
   unsigned long hash ;
   union __anonunion_580 __anonCompField_keyring_index_key_103 ;
   struct key_type *type ;
   struct key_tag *domain_tag ;
   char *description ;
};
#line 111  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
union key_payload {
   void *rcu_data0 ;
   void *data[4U] ;
};
#line 153  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
struct key_restriction {
   int (*check)(struct key *, struct key_type *, union key_payload *, struct key *) ;
   struct key *key ;
   struct key_type *keytype ;
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
union __anonunion_582 {
   struct list_head graveyard_link ;
   struct rb_node serial_node ;
};
#line 172 
struct key_user;
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
union __anonunion_583 {
   time64_t expiry ;
   time64_t revoked_at ;
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
struct __anonstruct_585 {
   unsigned long hash ;
   unsigned long len_desc ;
   struct key_type *type ;
   struct key_tag *domain_tag ;
   char *description ;
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
union __anonunion_584 {
   struct keyring_index_key index_key ;
   struct __anonstruct_585 __anonCompField___anonunion_584_106 ;
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
struct __anonstruct_587 {
   struct list_head name_link ;
   struct assoc_array keys ;
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
union __anonunion_586 {
   union key_payload payload ;
   struct __anonstruct_587 __anonCompField___anonunion_586_108 ;
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
struct key {
   refcount_t usage ;
   key_serial_t serial ;
   union __anonunion_582 __anonCompField_key_104 ;
   struct rw_semaphore sem ;
   struct key_user *user ;
   void *security ;
   union __anonunion_583 __anonCompField_key_105 ;
   time64_t last_used_at ;
   kuid_t uid ;
   kgid_t gid ;
   key_perm_t perm ;
   unsigned short quotalen ;
   unsigned short datalen ;
   short state ;
   unsigned long flags ;
   union __anonunion_584 __anonCompField_key_107 ;
   union __anonunion_586 __anonCompField_key_109 ;
   struct key_restriction *restrict_link ;
};
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/user.h"
struct user_struct {
   refcount_t __count ;
   atomic_t processes ;
   atomic_t sigpending ;
   atomic_t fanotify_listeners ;
   atomic_long_t epoll_watches ;
   unsigned long mq_bytes ;
   unsigned long locked_shm ;
   unsigned long unix_inflight ;
   atomic_long_t pipe_bufs ;
   struct hlist_node uidhash_node ;
   kuid_t uid ;
   atomic_long_t locked_vm ;
   struct ratelimit_state ratelimit ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cred.h"
struct group_info {
   atomic_t usage ;
   int ngroups ;
   kgid_t gid[0U] ;
} __attribute__((__designated_init__));
#line 111  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cred.h"
union __anonunion_590 {
   int non_rcu ;
   struct callback_head rcu ;
};
#line 111  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cred.h"
struct cred {
   atomic_t usage ;
   atomic_t subscribers ;
   void *put_addr ;
   unsigned int magic ;
   kuid_t uid ;
   kgid_t gid ;
   kuid_t suid ;
   kgid_t sgid ;
   kuid_t euid ;
   kgid_t egid ;
   kuid_t fsuid ;
   kgid_t fsgid ;
   unsigned int securebits ;
   kernel_cap_t cap_inheritable ;
   kernel_cap_t cap_permitted ;
   kernel_cap_t cap_effective ;
   kernel_cap_t cap_bset ;
   kernel_cap_t cap_ambient ;
   unsigned char jit_keyring ;
   struct key *session_keyring ;
   struct key *process_keyring ;
   struct key *thread_keyring ;
   struct key *request_key_auth ;
   void *security ;
   struct user_struct *user ;
   struct user_namespace *user_ns ;
   struct group_info *group_info ;
   union __anonunion_590 __anonCompField_cred_110 ;
} __attribute__((__designated_init__));
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seq_file.h"
struct seq_file {
   char *buf ;
   size_t size ;
   size_t from ;
   size_t count ;
   size_t pad_until ;
   loff_t index ;
   loff_t read_pos ;
   u64 version ;
   struct mutex lock ;
   struct seq_operations *op ;
   int poll_event ;
   struct file *file ;
   void *private ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seq_file.h"
struct seq_operations {
   void *(*start)(struct seq_file *, loff_t *) ;
   void (*stop)(struct seq_file *, void *) ;
   void *(*next)(struct seq_file *, void *, loff_t *) ;
   int (*show)(struct seq_file *, void *) ;
};
#line 275  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/net_namespace.h"
struct __anonstruct_possible_net_t_591 {
   struct net *net ;
};
#line 275  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/net_namespace.h"
typedef struct __anonstruct_possible_net_t_591 possible_net_t;
#line 58  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct ieee_ets {
   __u8 willing ;
   __u8 ets_cap ;
   __u8 cbs ;
   __u8 tc_tx_bw[8U] ;
   __u8 tc_rx_bw[8U] ;
   __u8 tc_tsa[8U] ;
   __u8 prio_tc[8U] ;
   __u8 tc_reco_bw[8U] ;
   __u8 tc_reco_tsa[8U] ;
   __u8 reco_prio_tc[8U] ;
};
#line 78  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct ieee_maxrate {
   __u64 tc_maxrate[8U] ;
};
#line 119  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct ieee_qcn {
   __u8 rpg_enable[8U] ;
   __u32 rppp_max_rps[8U] ;
   __u32 rpg_time_reset[8U] ;
   __u32 rpg_byte_reset[8U] ;
   __u32 rpg_threshold[8U] ;
   __u32 rpg_max_rate[8U] ;
   __u32 rpg_ai_rate[8U] ;
   __u32 rpg_hai_rate[8U] ;
   __u32 rpg_gd[8U] ;
   __u32 rpg_min_dec_fac[8U] ;
   __u32 rpg_min_rate[8U] ;
   __u32 cndd_state_machine[8U] ;
};
#line 141  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct ieee_qcn_stats {
   __u64 rppp_rp_centiseconds[8U] ;
   __u32 rppp_created_rps[8U] ;
};
#line 157  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct ieee_pfc {
   __u8 pfc_cap ;
   __u8 pfc_en ;
   __u8 mbc ;
   __u16 delay ;
   __u64 requests[8U] ;
   __u64 indications[8U] ;
};
#line 168  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct dcbnl_buffer {
   __u8 prio2buffer[8U] ;
   __u32 buffer_size[8U] ;
   __u32 total_size ;
};
#line 190  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct cee_pg {
   __u8 willing ;
   __u8 error ;
   __u8 pg_en ;
   __u8 tcs_supported ;
   __u8 pg_bw[8U] ;
   __u8 prio_pg[8U] ;
};
#line 207  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct cee_pfc {
   __u8 willing ;
   __u8 error ;
   __u8 pfc_en ;
   __u8 tcs_supported ;
};
#line 244  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct dcb_app {
   __u8 selector ;
   __u8 priority ;
   __u16 protocol ;
};
#line 259  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct dcb_peer_app_info {
   __u8 willing ;
   __u8 error ;
};
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/dcbnl.h"
struct dcbnl_rtnl_ops {
   int (*ieee_getets)(struct net_device *, struct ieee_ets *) ;
   int (*ieee_setets)(struct net_device *, struct ieee_ets *) ;
   int (*ieee_getmaxrate)(struct net_device *, struct ieee_maxrate *) ;
   int (*ieee_setmaxrate)(struct net_device *, struct ieee_maxrate *) ;
   int (*ieee_getqcn)(struct net_device *, struct ieee_qcn *) ;
   int (*ieee_setqcn)(struct net_device *, struct ieee_qcn *) ;
   int (*ieee_getqcnstats)(struct net_device *, struct ieee_qcn_stats *) ;
   int (*ieee_getpfc)(struct net_device *, struct ieee_pfc *) ;
   int (*ieee_setpfc)(struct net_device *, struct ieee_pfc *) ;
   int (*ieee_getapp)(struct net_device *, struct dcb_app *) ;
   int (*ieee_setapp)(struct net_device *, struct dcb_app *) ;
   int (*ieee_delapp)(struct net_device *, struct dcb_app *) ;
   int (*ieee_peer_getets)(struct net_device *, struct ieee_ets *) ;
   int (*ieee_peer_getpfc)(struct net_device *, struct ieee_pfc *) ;
   u8 (*getstate)(struct net_device *) ;
   u8 (*setstate)(struct net_device *, u8 ) ;
   void (*getpermhwaddr)(struct net_device *, u8 *) ;
   void (*setpgtccfgtx)(struct net_device *, int , u8 , u8 , u8 , u8 ) ;
   void (*setpgbwgcfgtx)(struct net_device *, int , u8 ) ;
   void (*setpgtccfgrx)(struct net_device *, int , u8 , u8 , u8 , u8 ) ;
   void (*setpgbwgcfgrx)(struct net_device *, int , u8 ) ;
   void (*getpgtccfgtx)(struct net_device *, int , u8 *, u8 *, u8 *, u8 *) ;
   void (*getpgbwgcfgtx)(struct net_device *, int , u8 *) ;
   void (*getpgtccfgrx)(struct net_device *, int , u8 *, u8 *, u8 *, u8 *) ;
   void (*getpgbwgcfgrx)(struct net_device *, int , u8 *) ;
   void (*setpfccfg)(struct net_device *, int , u8 ) ;
   void (*getpfccfg)(struct net_device *, int , u8 *) ;
   u8 (*setall)(struct net_device *) ;
   u8 (*getcap)(struct net_device *, int , u8 *) ;
   int (*getnumtcs)(struct net_device *, int , u8 *) ;
   int (*setnumtcs)(struct net_device *, int , u8 ) ;
   u8 (*getpfcstate)(struct net_device *) ;
   void (*setpfcstate)(struct net_device *, u8 ) ;
   void (*getbcncfg)(struct net_device *, int , u32 *) ;
   void (*setbcncfg)(struct net_device *, int , u32 ) ;
   void (*getbcnrp)(struct net_device *, int , u8 *) ;
   void (*setbcnrp)(struct net_device *, int , u8 ) ;
   int (*setapp)(struct net_device *, u8 , u16 , u8 ) ;
   int (*getapp)(struct net_device *, u8 , u16 ) ;
   u8 (*getfeatcfg)(struct net_device *, int , u8 *) ;
   u8 (*setfeatcfg)(struct net_device *, int , u8 ) ;
   u8 (*getdcbx)(struct net_device *) ;
   u8 (*setdcbx)(struct net_device *, u8 ) ;
   int (*peer_getappinfo)(struct net_device *, struct dcb_peer_app_info *, u16 *) ;
   int (*peer_getapptable)(struct net_device *, struct dcb_app *) ;
   int (*cee_peer_getpg)(struct net_device *, struct cee_pg *) ;
   int (*cee_peer_getpfc)(struct net_device *, struct cee_pfc *) ;
   int (*dcbnl_getbuffer)(struct net_device *, struct dcbnl_buffer *) ;
   int (*dcbnl_setbuffer)(struct net_device *, struct dcbnl_buffer *) ;
};
#line 41  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/taskstats.h"
struct taskstats {
   __u16 version ;
   __u32 ac_exitcode ;
   __u8 ac_flag ;
   __u8 ac_nice ;
   __u64 cpu_count ;
   __u64 cpu_delay_total ;
   __u64 blkio_count ;
   __u64 blkio_delay_total ;
   __u64 swapin_count ;
   __u64 swapin_delay_total ;
   __u64 cpu_run_real_total ;
   __u64 cpu_run_virtual_total ;
   char ac_comm[32U] ;
   __u8 ac_sched ;
   __u8 ac_pad[3U] ;
   __u32 ac_uid ;
   __u32 ac_gid ;
   __u32 ac_pid ;
   __u32 ac_ppid ;
   __u32 ac_btime ;
   __u64 ac_etime ;
   __u64 ac_utime ;
   __u64 ac_stime ;
   __u64 ac_minflt ;
   __u64 ac_majflt ;
   __u64 coremem ;
   __u64 virtmem ;
   __u64 hiwater_rss ;
   __u64 hiwater_vm ;
   __u64 read_char ;
   __u64 write_char ;
   __u64 read_syscalls ;
   __u64 write_syscalls ;
   __u64 read_bytes ;
   __u64 write_bytes ;
   __u64 cancelled_write_bytes ;
   __u64 nvcsw ;
   __u64 nivcsw ;
   __u64 ac_utimescaled ;
   __u64 ac_stimescaled ;
   __u64 cpu_scaled_run_real_total ;
   __u64 freepages_count ;
   __u64 freepages_delay_total ;
   __u64 thrashing_count ;
   __u64 thrashing_delay_total ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/cgroupstats.h"
struct mnt_namespace;
#line 60 
struct uts_namespace;
#line 61 
struct ipc_namespace;
#line 62 
struct cgroup_namespace;
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/nsproxy.h"
struct nsproxy {
   atomic_t count ;
   struct uts_namespace *uts_ns ;
   struct ipc_namespace *ipc_ns ;
   struct mnt_namespace *mnt_ns ;
   struct pid_namespace *pid_ns_for_children ;
   struct net *net_ns ;
   struct cgroup_namespace *cgroup_ns ;
};
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/user_namespace.h"
struct uid_gid_extent {
   u32 first ;
   u32 lower_first ;
   u32 count ;
};
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/user_namespace.h"
struct __anonstruct_593 {
   struct uid_gid_extent *forward ;
   struct uid_gid_extent *reverse ;
};
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/user_namespace.h"
union __anonunion_592 {
   struct uid_gid_extent extent[5U] ;
   struct __anonstruct_593 __anonCompField___anonunion_592_111 ;
};
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/user_namespace.h"
struct uid_gid_map {
   u32 nr_extents ;
   union __anonunion_592 __anonCompField_uid_gid_map_112 ;
};
#line 55  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/user_namespace.h"
struct user_namespace {
   struct uid_gid_map uid_map ;
   struct uid_gid_map gid_map ;
   struct uid_gid_map projid_map ;
   atomic_t count ;
   struct user_namespace *parent ;
   int level ;
   kuid_t owner ;
   kgid_t group ;
   struct ns_common ns ;
   unsigned long flags ;
   struct list_head keyring_name_list ;
   struct key *user_keyring_register ;
   struct rw_semaphore keyring_sem ;
   struct key *persistent_keyring_register ;
   struct work_struct work ;
   struct ctl_table_set set ;
   struct ctl_table_header *sysctls ;
   struct ucounts *ucounts ;
   int ucount_max[9U] ;
} __attribute__((__designated_init__));
#line 91  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/user_namespace.h"
struct ucounts {
   struct hlist_node node ;
   struct user_namespace *ns ;
   kuid_t uid ;
   int count ;
   atomic_t ucount[9U] ;
};
#line 139 
enum irqreturn {
    IRQ_NONE = 0,
    IRQ_HANDLED = 1,
    IRQ_WAKE_THREAD = 2
};
#line 145  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/user_namespace.h"
typedef enum irqreturn irqreturn_t;
#line 292  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/interrupt.h"
struct irq_affinity {
   unsigned int pre_vectors ;
   unsigned int post_vectors ;
   unsigned int nr_sets ;
   unsigned int set_size[4U] ;
   void (*calc_sets)(struct irq_affinity *, unsigned int ) ;
   void *priv ;
};
#line 65  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct bpf_insn {
   __u8 code ;
   __u8 dst_reg : 4 ;
   __u8 src_reg : 4 ;
   __s16 off ;
   __s32 imm ;
};
#line 79  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct bpf_cgroup_storage_key {
   __u64 cgroup_inode_id ;
   __u32 attach_type ;
};
#line 110 
enum bpf_map_type {
    BPF_MAP_TYPE_UNSPEC = 0,
    BPF_MAP_TYPE_HASH = 1,
    BPF_MAP_TYPE_ARRAY = 2,
    BPF_MAP_TYPE_PROG_ARRAY = 3,
    BPF_MAP_TYPE_PERF_EVENT_ARRAY = 4,
    BPF_MAP_TYPE_PERCPU_HASH = 5,
    BPF_MAP_TYPE_PERCPU_ARRAY = 6,
    BPF_MAP_TYPE_STACK_TRACE = 7,
    BPF_MAP_TYPE_CGROUP_ARRAY = 8,
    BPF_MAP_TYPE_LRU_HASH = 9,
    BPF_MAP_TYPE_LRU_PERCPU_HASH = 10,
    BPF_MAP_TYPE_LPM_TRIE = 11,
    BPF_MAP_TYPE_ARRAY_OF_MAPS = 12,
    BPF_MAP_TYPE_HASH_OF_MAPS = 13,
    BPF_MAP_TYPE_DEVMAP = 14,
    BPF_MAP_TYPE_SOCKMAP = 15,
    BPF_MAP_TYPE_CPUMAP = 16,
    BPF_MAP_TYPE_XSKMAP = 17,
    BPF_MAP_TYPE_SOCKHASH = 18,
    BPF_MAP_TYPE_CGROUP_STORAGE = 19,
    BPF_MAP_TYPE_REUSEPORT_SOCKARRAY = 20,
    BPF_MAP_TYPE_PERCPU_CGROUP_STORAGE = 21,
    BPF_MAP_TYPE_QUEUE = 22,
    BPF_MAP_TYPE_STACK = 23,
    BPF_MAP_TYPE_SK_STORAGE = 24,
    BPF_MAP_TYPE_DEVMAP_HASH = 25
};
#line 139 
enum bpf_prog_type {
    BPF_PROG_TYPE_UNSPEC = 0,
    BPF_PROG_TYPE_SOCKET_FILTER = 1,
    BPF_PROG_TYPE_KPROBE = 2,
    BPF_PROG_TYPE_SCHED_CLS = 3,
    BPF_PROG_TYPE_SCHED_ACT = 4,
    BPF_PROG_TYPE_TRACEPOINT = 5,
    BPF_PROG_TYPE_XDP = 6,
    BPF_PROG_TYPE_PERF_EVENT = 7,
    BPF_PROG_TYPE_CGROUP_SKB = 8,
    BPF_PROG_TYPE_CGROUP_SOCK = 9,
    BPF_PROG_TYPE_LWT_IN = 10,
    BPF_PROG_TYPE_LWT_OUT = 11,
    BPF_PROG_TYPE_LWT_XMIT = 12,
    BPF_PROG_TYPE_SOCK_OPS = 13,
    BPF_PROG_TYPE_SK_SKB = 14,
    BPF_PROG_TYPE_CGROUP_DEVICE = 15,
    BPF_PROG_TYPE_SK_MSG = 16,
    BPF_PROG_TYPE_RAW_TRACEPOINT = 17,
    BPF_PROG_TYPE_CGROUP_SOCK_ADDR = 18,
    BPF_PROG_TYPE_LWT_SEG6LOCAL = 19,
    BPF_PROG_TYPE_LIRC_MODE2 = 20,
    BPF_PROG_TYPE_SK_REUSEPORT = 21,
    BPF_PROG_TYPE_FLOW_DISSECTOR = 22,
    BPF_PROG_TYPE_CGROUP_SYSCTL = 23,
    BPF_PROG_TYPE_RAW_TRACEPOINT_WRITABLE = 24,
    BPF_PROG_TYPE_CGROUP_SOCKOPT = 25,
    BPF_PROG_TYPE_TRACING = 26
};
#line 169 
enum bpf_attach_type {
    BPF_CGROUP_INET_INGRESS = 0,
    BPF_CGROUP_INET_EGRESS = 1,
    BPF_CGROUP_INET_SOCK_CREATE = 2,
    BPF_CGROUP_SOCK_OPS = 3,
    BPF_SK_SKB_STREAM_PARSER = 4,
    BPF_SK_SKB_STREAM_VERDICT = 5,
    BPF_CGROUP_DEVICE = 6,
    BPF_SK_MSG_VERDICT = 7,
    BPF_CGROUP_INET4_BIND = 8,
    BPF_CGROUP_INET6_BIND = 9,
    BPF_CGROUP_INET4_CONNECT = 10,
    BPF_CGROUP_INET6_CONNECT = 11,
    BPF_CGROUP_INET4_POST_BIND = 12,
    BPF_CGROUP_INET6_POST_BIND = 13,
    BPF_CGROUP_UDP4_SENDMSG = 14,
    BPF_CGROUP_UDP6_SENDMSG = 15,
    BPF_LIRC_MODE2 = 16,
    BPF_FLOW_DISSECTOR = 17,
    BPF_CGROUP_SYSCTL = 18,
    BPF_CGROUP_UDP4_RECVMSG = 19,
    BPF_CGROUP_UDP6_RECVMSG = 20,
    BPF_CGROUP_GETSOCKOPT = 21,
    BPF_CGROUP_SETSOCKOPT = 22,
    BPF_TRACE_RAW_TP = 23,
    BPF_TRACE_FENTRY = 24,
    BPF_TRACE_FEXIT = 25,
    __MAX_BPF_ATTACH_TYPE = 26
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_595 {
   __u32 map_type ;
   __u32 key_size ;
   __u32 value_size ;
   __u32 max_entries ;
   __u32 map_flags ;
   __u32 inner_map_fd ;
   __u32 numa_node ;
   char map_name[16U] ;
   __u32 map_ifindex ;
   __u32 btf_fd ;
   __u32 btf_key_type_id ;
   __u32 btf_value_type_id ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
union __anonunion_597 {
   __u64 value ;
   __u64 next_key ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_596 {
   __u32 map_fd ;
   __u64 key ;
   union __anonunion_597 __anonCompField___anonstruct_596_115 ;
   __u64 flags ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_598 {
   __u32 prog_type ;
   __u32 insn_cnt ;
   __u64 insns ;
   __u64 license ;
   __u32 log_level ;
   __u32 log_size ;
   __u64 log_buf ;
   __u32 kern_version ;
   __u32 prog_flags ;
   char prog_name[16U] ;
   __u32 prog_ifindex ;
   __u32 expected_attach_type ;
   __u32 prog_btf_fd ;
   __u32 func_info_rec_size ;
   __u64 func_info ;
   __u32 func_info_cnt ;
   __u32 line_info_rec_size ;
   __u64 line_info ;
   __u32 line_info_cnt ;
   __u32 attach_btf_id ;
   __u32 attach_prog_fd ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_599 {
   __u64 pathname ;
   __u32 bpf_fd ;
   __u32 file_flags ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_600 {
   __u32 target_fd ;
   __u32 attach_bpf_fd ;
   __u32 attach_type ;
   __u32 attach_flags ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_test_601 {
   __u32 prog_fd ;
   __u32 retval ;
   __u32 data_size_in ;
   __u32 data_size_out ;
   __u64 data_in ;
   __u64 data_out ;
   __u32 repeat ;
   __u32 duration ;
   __u32 ctx_size_in ;
   __u32 ctx_size_out ;
   __u64 ctx_in ;
   __u64 ctx_out ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
union __anonunion_603 {
   __u32 start_id ;
   __u32 prog_id ;
   __u32 map_id ;
   __u32 btf_id ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_602 {
   union __anonunion_603 __anonCompField___anonstruct_602_120 ;
   __u32 next_id ;
   __u32 open_flags ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_info_604 {
   __u32 bpf_fd ;
   __u32 info_len ;
   __u64 info ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_query_605 {
   __u32 target_fd ;
   __u32 attach_type ;
   __u32 query_flags ;
   __u32 attach_flags ;
   __u64 prog_ids ;
   __u32 prog_cnt ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_raw_tracepoint_606 {
   __u64 name ;
   __u32 prog_fd ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_607 {
   __u64 btf ;
   __u64 btf_log_buf ;
   __u32 btf_size ;
   __u32 btf_log_size ;
   __u32 btf_log_level ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_task_fd_query_608 {
   __u32 pid ;
   __u32 fd ;
   __u32 flags ;
   __u32 buf_len ;
   __u64 buf ;
   __u32 prog_id ;
   __u32 fd_type ;
   __u64 probe_offset ;
   __u64 probe_addr ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
union bpf_attr {
   struct __anonstruct_595 __anonCompField_bpf_attr_114 ;
   struct __anonstruct_596 __anonCompField_bpf_attr_116 ;
   struct __anonstruct_598 __anonCompField_bpf_attr_117 ;
   struct __anonstruct_599 __anonCompField_bpf_attr_118 ;
   struct __anonstruct_600 __anonCompField_bpf_attr_119 ;
   struct __anonstruct_test_601 test ;
   struct __anonstruct_602 __anonCompField_bpf_attr_121 ;
   struct __anonstruct_info_604 info ;
   struct __anonstruct_query_605 query ;
   struct __anonstruct_raw_tracepoint_606 raw_tracepoint ;
   struct __anonstruct_607 __anonCompField_bpf_attr_122 ;
   struct __anonstruct_task_fd_query_608 task_fd_query ;
} __attribute__((__aligned__(8)));
#line 3653  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct bpf_func_info {
   __u32 insn_off ;
   __u32 type_id ;
};
#line 3661  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct bpf_line_info {
   __u32 insn_off ;
   __u32 file_name_off ;
   __u32 line_off ;
   __u32 line_col ;
};
#line 40  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rbtree_latch.h"
struct latch_tree_node {
   struct rb_node node[2U] ;
};
#line 215 
struct bpf_prog_aux;
#line 216 
struct bpf_map;
#line 217 
struct btf;
#line 218 
struct btf_type;
#line 37  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_map_ops {
   int (*map_alloc_check)(union bpf_attr *) ;
   struct bpf_map *(*map_alloc)(union bpf_attr *) ;
   void (*map_release)(struct bpf_map *, struct file *) ;
   void (*map_free)(struct bpf_map *) ;
   int (*map_get_next_key)(struct bpf_map *, void *, void *) ;
   void (*map_release_uref)(struct bpf_map *) ;
   void *(*map_lookup_elem_sys_only)(struct bpf_map *, void *) ;
   void *(*map_lookup_elem)(struct bpf_map *, void *) ;
   int (*map_update_elem)(struct bpf_map *, void *, void *, u64 ) ;
   int (*map_delete_elem)(struct bpf_map *, void *) ;
   int (*map_push_elem)(struct bpf_map *, void *, u64 ) ;
   int (*map_pop_elem)(struct bpf_map *, void *) ;
   int (*map_peek_elem)(struct bpf_map *, void *) ;
   void *(*map_fd_get_ptr)(struct bpf_map *, struct file *, int ) ;
   void (*map_fd_put_ptr)(void *) ;
   u32 (*map_gen_lookup)(struct bpf_map *, struct bpf_insn *) ;
   u32 (*map_fd_sys_lookup_elem)(void *) ;
   void (*map_seq_show_elem)(struct bpf_map *, void *, struct seq_file *) ;
   int (*map_check_btf)(struct bpf_map *, struct btf *, struct btf_type *, struct btf_type *) ;
   int (*map_poke_track)(struct bpf_map *, struct bpf_prog_aux *) ;
   void (*map_poke_untrack)(struct bpf_map *, struct bpf_prog_aux *) ;
   void (*map_poke_run)(struct bpf_map *, u32 , struct bpf_prog *, struct bpf_prog *) ;
   int (*map_direct_value_addr)(struct bpf_map *, u64 *, u32 ) ;
   int (*map_direct_value_meta)(struct bpf_map *, u64 , u32 *) ;
   int (*map_mmap)(struct bpf_map *, struct vm_area_struct *) ;
};
#line 82  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_map_memory {
   u32 pages ;
   struct user_struct *user ;
};
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_map {
   struct bpf_map_ops *ops ;
   struct bpf_map *inner_map_meta ;
   void *security ;
   enum bpf_map_type map_type ;
   u32 key_size ;
   u32 value_size ;
   u32 max_entries ;
   u32 map_flags ;
   int spin_lock_off ;
   u32 id ;
   int numa_node ;
   u32 btf_key_type_id ;
   u32 btf_value_type_id ;
   struct btf *btf ;
   struct bpf_map_memory memory ;
   char name[16U] ;
   bool unpriv_array ;
   bool frozen ;
   atomic64_t refcnt ;
   atomic64_t usercnt ;
   struct work_struct work ;
   struct mutex freeze_mutex ;
   u64 writecnt ;
};
#line 151 
struct bpf_offload_dev;
#line 152 
struct bpf_offloaded_map;
#line 156  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_map_dev_ops {
   int (*map_get_next_key)(struct bpf_offloaded_map *, void *, void *) ;
   int (*map_lookup_elem)(struct bpf_offloaded_map *, void *, void *) ;
   int (*map_update_elem)(struct bpf_offloaded_map *, void *, void *, u64 ) ;
   int (*map_delete_elem)(struct bpf_offloaded_map *, void *) ;
};
#line 166  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_offloaded_map {
   struct bpf_map map ;
   struct net_device *netdev ;
   struct bpf_map_dev_ops *dev_ops ;
   void *dev_priv ;
   struct list_head offloads ;
};
#line 327  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_prog_ops {
   int (*test_run)(struct bpf_prog *, union bpf_attr *, union bpf_attr *) ;
};
#line 369  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_prog_offload {
   struct bpf_prog *prog ;
   struct net_device *netdev ;
   struct bpf_offload_dev *offdev ;
   void *dev_priv ;
   struct list_head offloads ;
   bool dev_state ;
   bool opt_failed ;
   void *jited_image ;
   u32 jited_len ;
};
#line 394  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_prog_stats {
   u64 cnt ;
   u64 nsecs ;
   struct u64_stats_sync syncp ;
} __attribute__((__aligned__(16)));
#line 400  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct btf_func_model {
   u8 ret_size ;
   u8 nr_args ;
   u8 arg_size[12U] ;
};
#line 447 
enum bpf_tramp_prog_type {
    BPF_TRAMP_FENTRY = 0,
    BPF_TRAMP_FEXIT = 1,
    BPF_TRAMP_MAX = 2
};
#line 454  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct __anonstruct_func_641 {
   struct btf_func_model model ;
   void *addr ;
   bool ftrace_managed ;
};
#line 454  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_trampoline {
   struct hlist_node hlist ;
   struct mutex mutex ;
   refcount_t refcnt ;
   u64 key ;
   struct __anonstruct_func_641 func ;
   struct hlist_head progs_hlist[2U] ;
   int progs_cnt[2U] ;
   void *image ;
   u64 selector ;
};
#line 495  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_func_info_aux {
   bool unreliable ;
};
#line 504  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct __anonstruct_tail_call_643 {
   struct bpf_map *map ;
   u32 key ;
};
#line 504  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
union __anonunion_642 {
   struct __anonstruct_tail_call_643 tail_call ;
};
#line 504  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_jit_poke_descriptor {
   void *ip ;
   union __anonunion_642 __anonCompField_bpf_jit_poke_descriptor_147 ;
   bool ip_stable ;
   u8 adj_off ;
   u16 reason ;
};
#line 517  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
union __anonunion_644 {
   struct work_struct work ;
   struct callback_head rcu ;
};
#line 517  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_prog_aux {
   atomic64_t refcnt ;
   u32 used_map_cnt ;
   u32 max_ctx_offset ;
   u32 max_pkt_offset ;
   u32 max_tp_access ;
   u32 stack_depth ;
   u32 id ;
   u32 func_cnt ;
   u32 func_idx ;
   u32 attach_btf_id ;
   struct bpf_prog *linked_prog ;
   bool verifier_zext ;
   bool offload_requested ;
   bool attach_btf_trace ;
   bool func_proto_unreliable ;
   enum bpf_tramp_prog_type trampoline_prog_type ;
   struct bpf_trampoline *trampoline ;
   struct hlist_node tramp_hlist ;
   struct btf_type *attach_func_proto ;
   char *attach_func_name ;
   struct bpf_prog **func ;
   void *jit_data ;
   struct bpf_jit_poke_descriptor *poke_tab ;
   u32 size_poke_tab ;
   struct latch_tree_node ksym_tnode ;
   struct list_head ksym_lnode ;
   struct bpf_prog_ops *ops ;
   struct bpf_map **used_maps ;
   struct bpf_prog *prog ;
   struct user_struct *user ;
   u64 load_time ;
   struct bpf_map *cgroup_storage[2U] ;
   char name[16U] ;
   void *security ;
   struct bpf_prog_offload *offload ;
   struct btf *btf ;
   struct bpf_func_info *func_info ;
   struct bpf_func_info_aux *func_info_aux ;
   struct bpf_line_info *linfo ;
   void **jited_linfo ;
   u32 func_info_cnt ;
   u32 nr_linfo ;
   u32 linfo_idx ;
   u32 num_exentries ;
   struct exception_table_entry *extable ;
   struct bpf_prog_stats *stats ;
   union __anonunion_644 __anonCompField_bpf_prog_aux_148 ;
};
#line 686 
struct bpf_cgroup_storage;
#line 686  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_prog_array_item {
   struct bpf_prog *prog ;
   struct bpf_cgroup_storage *cgroup_storage[2U] ;
};
#line 691  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_prog_array {
   struct callback_head rcu ;
   struct bpf_prog_array_item items[0U] ;
};
#line 1335 
struct cgroup;
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf-cgroup.h"
struct bpf_cgroup_storage_map;
#line 37  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf-cgroup.h"
struct bpf_storage_buffer {
   struct callback_head rcu ;
   char data[0U] ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf-cgroup.h"
union __anonunion_646 {
   struct bpf_storage_buffer *buf ;
   void *percpu_buf ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf-cgroup.h"
struct bpf_cgroup_storage {
   union __anonunion_646 __anonCompField_bpf_cgroup_storage_150 ;
   struct bpf_cgroup_storage_map *map ;
   struct bpf_cgroup_storage_key key ;
   struct list_head list ;
   struct rb_node node ;
   struct callback_head rcu ;
};
#line 62  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf-cgroup.h"
struct cgroup_bpf {
   struct bpf_prog_array *effective[26U] ;
   struct list_head progs[26U] ;
   u32 flags[26U] ;
   struct bpf_prog_array *inactive ;
   struct percpu_ref refcnt ;
   struct work_struct release_work ;
};
#line 69  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kthread.h"
struct kthread_work;
#line 86  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kthread.h"
struct kthread_worker {
   unsigned int flags ;
   raw_spinlock_t lock ;
   struct list_head work_list ;
   struct list_head delayed_work_list ;
   struct task_struct *task ;
   struct kthread_work *current_work ;
};
#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kthread.h"
struct kthread_work {
   struct list_head node ;
   void (*func)(struct kthread_work *) ;
   struct kthread_worker *worker ;
   int canceling ;
};
#line 103  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kthread.h"
struct kthread_delayed_work {
   struct kthread_work work ;
   struct timer_list timer ;
};
#line 199 
struct cgroup_subsys_state;
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/psi_types.h"
struct psi_group_cpu {
   seqcount_t seq ;
   unsigned int tasks[3U] ;
   u32 state_mask ;
   u32 times[6U] ;
   u64 state_start ;
   u32 times_prev[2U][6U] ;
};
#line 96 
struct psi_group;
#line 128  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/psi_types.h"
struct psi_group {
   struct mutex avgs_lock ;
   struct psi_group_cpu *pcpu ;
   u64 avg_total[5U] ;
   u64 avg_last_update ;
   u64 avg_next_update ;
   struct delayed_work avgs_work ;
   u64 total[2U][5U] ;
   unsigned long avg[5U][3U] ;
   atomic_t poll_scheduled ;
   struct kthread_worker *poll_kworker ;
   struct kthread_delayed_work poll_work ;
   struct mutex trigger_lock ;
   struct list_head triggers ;
   u32 nr_triggers[5U] ;
   u32 poll_states ;
   u64 poll_min_period ;
   u64 polling_total[5U] ;
   u64 polling_next_update ;
   u64 polling_until ;
};
#line 166 
struct cgroup_root;
#line 167 
struct cgroup_subsys;
#line 168 
struct cgroup_taskset;
#line 119  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup_file {
   struct kernfs_node *kn ;
   unsigned long notified_at ;
   struct timer_list notify_timer ;
};
#line 133  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup_subsys_state {
   struct cgroup *cgroup ;
   struct cgroup_subsys *ss ;
   struct percpu_ref refcnt ;
   struct list_head sibling ;
   struct list_head children ;
   struct list_head rstat_css_node ;
   int id ;
   unsigned int flags ;
   u64 serial_nr ;
   atomic_t online_cnt ;
   struct work_struct destroy_work ;
   struct rcu_work destroy_rwork ;
   struct cgroup_subsys_state *parent ;
};
#line 190  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct css_set {
   struct cgroup_subsys_state *subsys[14U] ;
   refcount_t refcount ;
   struct css_set *dom_cset ;
   struct cgroup *dfl_cgrp ;
   int nr_tasks ;
   struct list_head tasks ;
   struct list_head mg_tasks ;
   struct list_head dying_tasks ;
   struct list_head task_iters ;
   struct list_head e_cset_node[14U] ;
   struct list_head threaded_csets ;
   struct list_head threaded_csets_node ;
   struct hlist_node hlist ;
   struct list_head cgrp_links ;
   struct list_head mg_preload_node ;
   struct list_head mg_node ;
   struct cgroup *mg_src_cgrp ;
   struct cgroup *mg_dst_cgrp ;
   struct css_set *mg_dst_cset ;
   bool dead ;
   struct callback_head callback_head ;
};
#line 279  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup_base_stat {
   struct task_cputime cputime ;
};
#line 303  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup_rstat_cpu {
   struct u64_stats_sync bsync ;
   struct cgroup_base_stat bstat ;
   struct cgroup_base_stat last_bstat ;
   struct cgroup *updated_children ;
   struct cgroup *updated_next ;
};
#line 332  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup_freezer_state {
   bool freeze ;
   int e_freeze ;
   int nr_frozen_descendants ;
   int nr_frozen_tasks ;
};
#line 351  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup {
   struct cgroup_subsys_state self ;
   unsigned long flags ;
   int level ;
   int max_depth ;
   int nr_descendants ;
   int nr_dying_descendants ;
   int max_descendants ;
   int nr_populated_csets ;
   int nr_populated_domain_children ;
   int nr_populated_threaded_children ;
   int nr_threaded_children ;
   struct kernfs_node *kn ;
   struct cgroup_file procs_file ;
   struct cgroup_file events_file ;
   u16 subtree_control ;
   u16 subtree_ss_mask ;
   u16 old_subtree_control ;
   u16 old_subtree_ss_mask ;
   struct cgroup_subsys_state *subsys[14U] ;
   struct cgroup_root *root ;
   struct list_head cset_links ;
   struct list_head e_csets[14U] ;
   struct cgroup *dom_cgrp ;
   struct cgroup *old_dom_cgrp ;
   struct cgroup_rstat_cpu *rstat_cpu ;
   struct list_head rstat_css_list ;
   struct cgroup_base_stat last_bstat ;
   struct cgroup_base_stat bstat ;
   struct prev_cputime prev_cputime ;
   struct list_head pidlists ;
   struct mutex pidlist_mutex ;
   wait_queue_head_t offline_waitq ;
   struct work_struct release_agent_work ;
   struct psi_group psi ;
   struct cgroup_bpf bpf ;
   atomic_t congestion_count ;
   struct cgroup_freezer_state freezer ;
   u64 ancestor_ids[] ;
};
#line 489  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup_root {
   struct kernfs_root *kf_root ;
   unsigned int subsys_mask ;
   int hierarchy_id ;
   struct cgroup cgrp ;
   u64 cgrp_ancestor_id_storage ;
   atomic_t nr_cgrps ;
   struct list_head root_list ;
   unsigned int flags ;
   char release_agent_path[4096U] ;
   char name[64U] ;
};
#line 527  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cftype {
   char name[64U] ;
   unsigned long private ;
   size_t max_write_len ;
   unsigned int flags ;
   unsigned int file_offset ;
   struct cgroup_subsys *ss ;
   struct list_head node ;
   struct kernfs_ops *kf_ops ;
   int (*open)(struct kernfs_open_file *) ;
   void (*release)(struct kernfs_open_file *) ;
   u64 (*read_u64)(struct cgroup_subsys_state *, struct cftype *) ;
   s64 (*read_s64)(struct cgroup_subsys_state *, struct cftype *) ;
   int (*seq_show)(struct seq_file *, void *) ;
   void *(*seq_start)(struct seq_file *, loff_t *) ;
   void *(*seq_next)(struct seq_file *, void *, loff_t *) ;
   void (*seq_stop)(struct seq_file *, void *) ;
   int (*write_u64)(struct cgroup_subsys_state *, struct cftype *, u64 ) ;
   int (*write_s64)(struct cgroup_subsys_state *, struct cftype *, s64 ) ;
   ssize_t (*write)(struct kernfs_open_file *, char *, size_t , loff_t ) ;
   __poll_t (*poll)(struct kernfs_open_file *, struct poll_table_struct *) ;
   struct lock_class_key lockdep_key ;
};
#line 616  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup_subsys {
   struct cgroup_subsys_state *(*css_alloc)(struct cgroup_subsys_state *) ;
   int (*css_online)(struct cgroup_subsys_state *) ;
   void (*css_offline)(struct cgroup_subsys_state *) ;
   void (*css_released)(struct cgroup_subsys_state *) ;
   void (*css_free)(struct cgroup_subsys_state *) ;
   void (*css_reset)(struct cgroup_subsys_state *) ;
   void (*css_rstat_flush)(struct cgroup_subsys_state *, int ) ;
   int (*css_extra_stat_show)(struct seq_file *, struct cgroup_subsys_state *) ;
   int (*can_attach)(struct cgroup_taskset *) ;
   void (*cancel_attach)(struct cgroup_taskset *) ;
   void (*attach)(struct cgroup_taskset *) ;
   void (*post_attach)(void) ;
   int (*can_fork)(struct task_struct *) ;
   void (*cancel_fork)(struct task_struct *) ;
   void (*fork)(struct task_struct *) ;
   void (*exit)(struct task_struct *) ;
   void (*release)(struct task_struct *) ;
   void (*bind)(struct cgroup_subsys_state *) ;
   bool early_init : 1 ;
   bool implicit_on_dfl : 1 ;
   bool threaded : 1 ;
   bool broken_hierarchy : 1 ;
   bool warned_broken_hierarchy : 1 ;
   int id ;
   char *name ;
   char *legacy_name ;
   struct cgroup_root *root ;
   struct idr css_idr ;
   struct list_head cfts ;
   struct cftype *dfl_cftypes ;
   struct cftype *legacy_cftypes ;
   unsigned int depends_on ;
};
#line 783  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct __anonstruct_648 {
   u8 is_data ;
   u8 padding ;
   u16 prioidx ;
   u32 classid ;
} __attribute__((__packed__));
#line 783  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
union __anonunion_647 {
   struct __anonstruct_648 __anonCompField___anonunion_647_151 ;
   u64 val ;
};
#line 783  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct sock_cgroup_data {
   union __anonunion_647 __anonCompField_sock_cgroup_data_152 ;
};
#line 848  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup.h"
struct cgroup_namespace {
   refcount_t count ;
   struct ns_common ns ;
   struct user_namespace *user_ns ;
   struct ucounts *ucounts ;
   struct css_set *root_cset ;
};
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netprio_cgroup.h"
struct netprio_map {
   struct callback_head rcu ;
   u32 priomap_len ;
   u32 priomap[] ;
};
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/xdp.h"
struct xdp_mem_info {
   u32 type ;
   u32 id ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/xdp.h"
struct xdp_rxq_info {
   struct net_device *dev ;
   u32 queue_index ;
   u32 reg_state ;
   struct xdp_mem_info mem ;
} __attribute__((__aligned__(64)));
#line 75  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/xdp.h"
struct xdp_frame {
   void *data ;
   u16 len ;
   u16 headroom ;
   u16 metasize ;
   struct xdp_mem_info mem ;
   struct net_device *dev_rx ;
};
#line 175 
struct netdev_bpf;
#line 160  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/security.h"
struct xfrm_policy;
#line 161 
struct xfrm_state;
#line 178 
struct request_sock;
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/signal.h"
struct sighand_struct {
   spinlock_t siglock ;
   refcount_t count ;
   wait_queue_head_t signalfd_wqh ;
   struct k_sigaction action[64U] ;
};
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/signal.h"
struct pacct_struct {
   int ac_flag ;
   long ac_exitcode ;
   unsigned long ac_mem ;
   u64 ac_utime ;
   u64 ac_stime ;
   unsigned long ac_minflt ;
   unsigned long ac_majflt ;
};
#line 36  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/signal.h"
struct cpu_itimer {
   u64 expires ;
   u64 incr ;
};
#line 45  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/signal.h"
struct task_cputime_atomic {
   atomic64_t utime ;
   atomic64_t stime ;
   atomic64_t sum_exec_runtime ;
};
#line 64  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/signal.h"
struct thread_group_cputimer {
   struct task_cputime_atomic cputime_atomic ;
};
#line 80 
struct tty_struct;
#line 80 
struct autogroup;
#line 80 
struct tty_audit_buf;
#line 80  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/signal.h"
struct signal_struct {
   refcount_t sigcnt ;
   atomic_t live ;
   int nr_threads ;
   struct list_head thread_head ;
   wait_queue_head_t wait_chldexit ;
   struct task_struct *curr_target ;
   struct sigpending shared_pending ;
   struct hlist_head multiprocess ;
   int group_exit_code ;
   int notify_count ;
   struct task_struct *group_exit_task ;
   int group_stop_count ;
   unsigned int flags ;
   unsigned int is_child_subreaper : 1 ;
   unsigned int has_child_subreaper : 1 ;
   int posix_timer_id ;
   struct list_head posix_timers ;
   struct hrtimer real_timer ;
   ktime_t it_real_incr ;
   struct cpu_itimer it[2U] ;
   struct thread_group_cputimer cputimer ;
   struct posix_cputimers posix_cputimers ;
   struct pid *pids[4U] ;
   struct pid *tty_old_pgrp ;
   int leader ;
   struct tty_struct *tty ;
   struct autogroup *autogroup ;
   seqlock_t stats_lock ;
   u64 utime ;
   u64 stime ;
   u64 cutime ;
   u64 cstime ;
   u64 gtime ;
   u64 cgtime ;
   struct prev_cputime prev_cputime ;
   unsigned long nvcsw ;
   unsigned long nivcsw ;
   unsigned long cnvcsw ;
   unsigned long cnivcsw ;
   unsigned long min_flt ;
   unsigned long maj_flt ;
   unsigned long cmin_flt ;
   unsigned long cmaj_flt ;
   unsigned long inblock ;
   unsigned long oublock ;
   unsigned long cinblock ;
   unsigned long coublock ;
   unsigned long maxrss ;
   unsigned long cmaxrss ;
   struct task_io_accounting ioac ;
   unsigned long long sum_sched_runtime ;
   struct rlimit rlim[16U] ;
   struct pacct_struct pacct ;
   struct taskstats *stats ;
   unsigned int audit_tty ;
   struct tty_audit_buf *tty_audit_buf ;
   bool oom_flag_origin ;
   short oom_score_adj ;
   short oom_score_adj_min ;
   struct mm_struct *oom_mm ;
   struct mutex cred_guard_mutex ;
} __attribute__((__designated_init__));
#line 44  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/netlink.h"
struct nlmsghdr {
   __u32 nlmsg_len ;
   __u16 nlmsg_type ;
   __u16 nlmsg_flags ;
   __u32 nlmsg_seq ;
   __u32 nlmsg_pid ;
};
#line 211  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/netlink.h"
struct nlattr {
   __u16 nla_len ;
   __u16 nla_type ;
};
#line 74  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netlink.h"
struct netlink_ext_ack {
   char *_msg ;
   struct nlattr *bad_attr ;
   u8 cookie[20U] ;
   u8 cookie_len ;
};
#line 180  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netlink.h"
union __anonunion_671 {
   u8 ctx[48U] ;
   long args[6U] ;
};
#line 180  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netlink.h"
struct netlink_callback {
   struct sk_buff *skb ;
   struct nlmsghdr *nlh ;
   int (*dump)(struct sk_buff *, struct netlink_callback *) ;
   int (*done)(struct netlink_callback *) ;
   void *data ;
   struct module *module ;
   struct netlink_ext_ack *extack ;
   u16 family ;
   u16 min_dump_alloc ;
   bool strict_check ;
   u16 answer_flags ;
   unsigned int prev_seq ;
   unsigned int seq ;
   union __anonunion_671 __anonCompField_netlink_callback_153 ;
};
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/neighbour.h"
struct ndmsg {
   __u8 ndm_family ;
   __u8 ndm_pad1 ;
   __u16 ndm_pad2 ;
   __s32 ndm_ifindex ;
   __u16 ndm_state ;
   __u8 ndm_flags ;
   __u8 ndm_type ;
};
#line 44  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if_link.h"
struct rtnl_link_stats64 {
   __u64 rx_packets ;
   __u64 tx_packets ;
   __u64 rx_bytes ;
   __u64 tx_bytes ;
   __u64 rx_errors ;
   __u64 tx_errors ;
   __u64 rx_dropped ;
   __u64 tx_dropped ;
   __u64 multicast ;
   __u64 collisions ;
   __u64 rx_length_errors ;
   __u64 rx_over_errors ;
   __u64 rx_crc_errors ;
   __u64 rx_frame_errors ;
   __u64 rx_fifo_errors ;
   __u64 rx_missed_errors ;
   __u64 tx_aborted_errors ;
   __u64 tx_carrier_errors ;
   __u64 tx_fifo_errors ;
   __u64 tx_heartbeat_errors ;
   __u64 tx_window_errors ;
   __u64 rx_compressed ;
   __u64 tx_compressed ;
   __u64 rx_nohandler ;
};
#line 753  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if_link.h"
struct ifla_vf_guid {
   __u32 vf ;
   __u64 guid ;
};
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/if_link.h"
struct ifla_vf_stats {
   __u64 rx_packets ;
   __u64 tx_packets ;
   __u64 rx_bytes ;
   __u64 tx_bytes ;
   __u64 broadcast ;
   __u64 multicast ;
   __u64 rx_dropped ;
   __u64 tx_dropped ;
};
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/if_link.h"
struct ifla_vf_info {
   __u32 vf ;
   __u8 mac[32U] ;
   __u32 vlan ;
   __u32 qos ;
   __u32 spoofchk ;
   __u32 linkstate ;
   __u32 min_tx_rate ;
   __u32 max_tx_rate ;
   __u32 rss_query_en ;
   __u32 trusted ;
   __be16 vlan_proto ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/pkt_sched.h"
struct tc_stats {
   __u64 bytes ;
   __u32 packets ;
   __u32 drops ;
   __u32 overlimits ;
   __u32 bps ;
   __u32 pps ;
   __u32 qlen ;
   __u32 backlog ;
};
#line 102  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/pkt_sched.h"
struct tc_sizespec {
   unsigned char cell_log ;
   unsigned char size_log ;
   short cell_align ;
   int overhead ;
   unsigned int linklayer ;
   unsigned int mpu ;
   unsigned int mtu ;
   unsigned int tsize ;
};
#line 118  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/hashtable.h"
struct netpoll_info;
#line 119 
struct phy_device;
#line 120 
struct dsa_port;
#line 121 
struct sfp_bus;
#line 122 
struct wireless_dev;
#line 123 
struct wpan_dev;
#line 124 
struct mpls_dev;
#line 125 
struct udp_tunnel_info;
#line 69  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
enum netdev_tx {
    __NETDEV_TX_MIN = -2147483648,
    NETDEV_TX_OK = 0,
    NETDEV_TX_BUSY = 16
};
#line 75  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
typedef enum netdev_tx netdev_tx_t;
#line 161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct net_device_stats {
   unsigned long rx_packets ;
   unsigned long tx_packets ;
   unsigned long rx_bytes ;
   unsigned long tx_bytes ;
   unsigned long rx_errors ;
   unsigned long tx_errors ;
   unsigned long rx_dropped ;
   unsigned long tx_dropped ;
   unsigned long multicast ;
   unsigned long collisions ;
   unsigned long rx_length_errors ;
   unsigned long rx_over_errors ;
   unsigned long rx_crc_errors ;
   unsigned long rx_frame_errors ;
   unsigned long rx_fifo_errors ;
   unsigned long rx_missed_errors ;
   unsigned long tx_aborted_errors ;
   unsigned long tx_carrier_errors ;
   unsigned long tx_fifo_errors ;
   unsigned long tx_heartbeat_errors ;
   unsigned long tx_window_errors ;
   unsigned long rx_compressed ;
   unsigned long tx_compressed ;
};
#line 195 
struct neigh_parms;
#line 217  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_hw_addr_list {
   struct list_head list ;
   int count ;
};
#line 237  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct hh_cache {
   unsigned int hh_len ;
   seqlock_t hh_lock ;
   unsigned long hh_data[16U] ;
};
#line 263  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct header_ops {
   int (*create)(struct sk_buff *, struct net_device *, unsigned short , void *, void *, unsigned int ) ;
   int (*parse)(struct sk_buff *, unsigned char *) ;
   int (*cache)(struct neighbour *, struct hh_cache *, __be16 ) ;
   void (*cache_update)(struct hh_cache *, struct net_device *, unsigned char *) ;
   bool (*validate)(char *, unsigned int ) ;
   __be16 (*parse_protocol)(struct sk_buff *) ;
};
#line 302  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct gro_list {
   struct list_head list ;
   int count ;
};
#line 316  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct napi_struct {
   struct list_head poll_list ;
   unsigned long state ;
   int weight ;
   unsigned long gro_bitmask ;
   int (*poll)(struct napi_struct *, int ) ;
   int poll_owner ;
   struct net_device *dev ;
   struct gro_list gro_hash[8U] ;
   struct sk_buff *skb ;
   struct list_head rx_list ;
   int rx_count ;
   struct hrtimer timer ;
   struct list_head dev_list ;
   struct hlist_node napi_hash_node ;
   unsigned int napi_id ;
};
#line 362 
enum gro_result {
    GRO_MERGED = 0,
    GRO_MERGED_FREE = 1,
    GRO_HELD = 2,
    GRO_NORMAL = 3,
    GRO_DROP = 4,
    GRO_CONSUMED = 5
};
#line 371  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
typedef enum gro_result gro_result_t;
#line 372 
enum rx_handler_result {
    RX_HANDLER_CONSUMED = 0,
    RX_HANDLER_ANOTHER = 1,
    RX_HANDLER_EXACT = 2,
    RX_HANDLER_PASS = 3
};
#line 379  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
typedef enum rx_handler_result rx_handler_result_t;
#line 421  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
typedef rx_handler_result_t rx_handler_func_t(struct sk_buff **);
#line 589 
struct Qdisc;
#line 589 
struct xdp_umem;
#line 589  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_queue {
   struct net_device *dev ;
   struct Qdisc *qdisc ;
   struct Qdisc *qdisc_sleeping ;
   struct kobject kobj ;
   int numa_node ;
   unsigned long tx_maxrate ;
   unsigned long trans_timeout ;
   struct net_device *sb_dev ;
   struct xdp_umem *umem ;
   spinlock_t _xmit_lock ;
   int xmit_lock_owner ;
   unsigned long trans_start ;
   unsigned long state ;
   struct dql dql ;
} __attribute__((__aligned__(64)));
#line 662  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct rps_map {
   unsigned int len ;
   struct callback_head rcu ;
   u16 cpus[0U] ;
};
#line 674  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct rps_dev_flow {
   u16 cpu ;
   u16 filter ;
   unsigned int last_qtail ;
};
#line 684  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct rps_dev_flow_table {
   unsigned int mask ;
   struct callback_head rcu ;
   struct rps_dev_flow flows[0U] ;
};
#line 736  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_rx_queue {
   struct rps_map *rps_map ;
   struct rps_dev_flow_table *rps_flow_table ;
   struct kobject kobj ;
   struct net_device *dev ;
   struct xdp_rxq_info xdp_rxq ;
   struct xdp_umem *umem ;
} __attribute__((__aligned__(64)));
#line 764  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct xps_map {
   unsigned int len ;
   unsigned int alloc_len ;
   struct callback_head rcu ;
   u16 queues[0U] ;
};
#line 777  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct xps_dev_maps {
   struct callback_head rcu ;
   struct xps_map *attr_map[0U] ;
};
#line 793  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_tc_txq {
   u16 count ;
   u16 offset ;
};
#line 803  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_fcoe_hbainfo {
   char manufacturer[64U] ;
   char serial_number[64U] ;
   char hardware_version[64U] ;
   char driver_version[64U] ;
   char optionrom_version[64U] ;
   char firmware_version[64U] ;
   char model[256U] ;
   char model_description[256U] ;
};
#line 820  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_phys_item_id {
   unsigned char id[32U] ;
   unsigned char id_len ;
};
#line 833 
enum tc_setup_type {
    TC_SETUP_QDISC_MQPRIO = 0,
    TC_SETUP_CLSU32 = 1,
    TC_SETUP_CLSFLOWER = 2,
    TC_SETUP_CLSMATCHALL = 3,
    TC_SETUP_CLSBPF = 4,
    TC_SETUP_BLOCK = 5,
    TC_SETUP_QDISC_CBS = 6,
    TC_SETUP_QDISC_RED = 7,
    TC_SETUP_QDISC_PRIO = 8,
    TC_SETUP_QDISC_MQ = 9,
    TC_SETUP_QDISC_ETF = 10,
    TC_SETUP_ROOT_QDISC = 11,
    TC_SETUP_QDISC_GRED = 12,
    TC_SETUP_QDISC_TAPRIO = 13,
    TC_SETUP_FT = 14
};
#line 851 
enum bpf_netdev_command {
    XDP_SETUP_PROG = 0,
    XDP_SETUP_PROG_HW = 1,
    XDP_QUERY_PROG = 2,
    XDP_QUERY_PROG_HW = 3,
    BPF_OFFLOAD_MAP_ALLOC = 4,
    BPF_OFFLOAD_MAP_FREE = 5,
    XDP_SETUP_XSK_UMEM = 6
};
#line 879  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct __anonstruct_676 {
   u32 flags ;
   struct bpf_prog *prog ;
   struct netlink_ext_ack *extack ;
};
#line 879  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct __anonstruct_677 {
   u32 prog_id ;
   u32 prog_flags ;
};
#line 879  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct __anonstruct_678 {
   struct bpf_offloaded_map *offmap ;
};
#line 879  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct __anonstruct_xsk_679 {
   struct xdp_umem *umem ;
   u16 queue_id ;
};
#line 879  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
union __anonunion_675 {
   struct __anonstruct_676 __anonCompField___anonunion_675_155 ;
   struct __anonstruct_677 __anonCompField___anonunion_675_156 ;
   struct __anonstruct_678 __anonCompField___anonunion_675_157 ;
   struct __anonstruct_xsk_679 xsk ;
};
#line 879  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_bpf {
   enum bpf_netdev_command command ;
   union __anonunion_675 __anonCompField_netdev_bpf_158 ;
};
#line 911  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct xfrmdev_ops {
   int (*xdo_dev_state_add)(struct xfrm_state *) ;
   void (*xdo_dev_state_delete)(struct xfrm_state *) ;
   void (*xdo_dev_state_free)(struct xfrm_state *) ;
   bool (*xdo_dev_offload_ok)(struct sk_buff *, struct xfrm_state *) ;
   void (*xdo_dev_state_advance_esn)(struct xfrm_state *) ;
};
#line 921  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct dev_ifalias {
   struct callback_head rcuhead ;
   char ifalias[] ;
};
#line 926 
struct tlsdev_ops;
#line 929  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_name_node {
   struct hlist_node hlist ;
   struct list_head list ;
   struct net_device *dev ;
   char *name ;
};
#line 1257 
struct devlink_port;
#line 1257  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct net_device_ops {
   int (*ndo_init)(struct net_device *) ;
   void (*ndo_uninit)(struct net_device *) ;
   int (*ndo_open)(struct net_device *) ;
   int (*ndo_stop)(struct net_device *) ;
   netdev_tx_t (*ndo_start_xmit)(struct sk_buff *, struct net_device *) ;
   netdev_features_t (*ndo_features_check)(struct sk_buff *, struct net_device *, netdev_features_t ) ;
   u16 (*ndo_select_queue)(struct net_device *, struct sk_buff *, struct net_device *) ;
   void (*ndo_change_rx_flags)(struct net_device *, int ) ;
   void (*ndo_set_rx_mode)(struct net_device *) ;
   int (*ndo_set_mac_address)(struct net_device *, void *) ;
   int (*ndo_validate_addr)(struct net_device *) ;
   int (*ndo_do_ioctl)(struct net_device *, struct ifreq *, int ) ;
   int (*ndo_set_config)(struct net_device *, struct ifmap *) ;
   int (*ndo_change_mtu)(struct net_device *, int ) ;
   int (*ndo_neigh_setup)(struct net_device *, struct neigh_parms *) ;
   void (*ndo_tx_timeout)(struct net_device *) ;
   void (*ndo_get_stats64)(struct net_device *, struct rtnl_link_stats64 *) ;
   bool (*ndo_has_offload_stats)(struct net_device *, int ) ;
   int (*ndo_get_offload_stats)(int , struct net_device *, void *) ;
   struct net_device_stats *(*ndo_get_stats)(struct net_device *) ;
   int (*ndo_vlan_rx_add_vid)(struct net_device *, __be16 , u16 ) ;
   int (*ndo_vlan_rx_kill_vid)(struct net_device *, __be16 , u16 ) ;
   void (*ndo_poll_controller)(struct net_device *) ;
   int (*ndo_netpoll_setup)(struct net_device *, struct netpoll_info *) ;
   void (*ndo_netpoll_cleanup)(struct net_device *) ;
   int (*ndo_set_vf_mac)(struct net_device *, int , u8 *) ;
   int (*ndo_set_vf_vlan)(struct net_device *, int , u16 , u8 , __be16 ) ;
   int (*ndo_set_vf_rate)(struct net_device *, int , int , int ) ;
   int (*ndo_set_vf_spoofchk)(struct net_device *, int , bool ) ;
   int (*ndo_set_vf_trust)(struct net_device *, int , bool ) ;
   int (*ndo_get_vf_config)(struct net_device *, int , struct ifla_vf_info *) ;
   int (*ndo_set_vf_link_state)(struct net_device *, int , int ) ;
   int (*ndo_get_vf_stats)(struct net_device *, int , struct ifla_vf_stats *) ;
   int (*ndo_set_vf_port)(struct net_device *, int , struct nlattr **) ;
   int (*ndo_get_vf_port)(struct net_device *, int , struct sk_buff *) ;
   int (*ndo_get_vf_guid)(struct net_device *, int , struct ifla_vf_guid *, struct ifla_vf_guid *) ;
   int (*ndo_set_vf_guid)(struct net_device *, int , u64 , int ) ;
   int (*ndo_set_vf_rss_query_en)(struct net_device *, int , bool ) ;
   int (*ndo_setup_tc)(struct net_device *, enum tc_setup_type , void *) ;
   int (*ndo_fcoe_enable)(struct net_device *) ;
   int (*ndo_fcoe_disable)(struct net_device *) ;
   int (*ndo_fcoe_ddp_setup)(struct net_device *, u16 , struct scatterlist *, unsigned int ) ;
   int (*ndo_fcoe_ddp_done)(struct net_device *, u16 ) ;
   int (*ndo_fcoe_ddp_target)(struct net_device *, u16 , struct scatterlist *, unsigned int ) ;
   int (*ndo_fcoe_get_hbainfo)(struct net_device *, struct netdev_fcoe_hbainfo *) ;
   int (*ndo_fcoe_get_wwn)(struct net_device *, u64 *, int ) ;
   int (*ndo_rx_flow_steer)(struct net_device *, struct sk_buff *, u16 , u32 ) ;
   int (*ndo_add_slave)(struct net_device *, struct net_device *, struct netlink_ext_ack *) ;
   int (*ndo_del_slave)(struct net_device *, struct net_device *) ;
   netdev_features_t (*ndo_fix_features)(struct net_device *, netdev_features_t ) ;
   int (*ndo_set_features)(struct net_device *, netdev_features_t ) ;
   int (*ndo_neigh_construct)(struct net_device *, struct neighbour *) ;
   void (*ndo_neigh_destroy)(struct net_device *, struct neighbour *) ;
   int (*ndo_fdb_add)(struct ndmsg *, struct nlattr **, struct net_device *, unsigned char *, u16 , u16 , struct netlink_ext_ack *) ;
   int (*ndo_fdb_del)(struct ndmsg *, struct nlattr **, struct net_device *, unsigned char *, u16 ) ;
   int (*ndo_fdb_dump)(struct sk_buff *, struct netlink_callback *, struct net_device *, struct net_device *, int *) ;
   int (*ndo_fdb_get)(struct sk_buff *, struct nlattr **, struct net_device *, unsigned char *, u16 , u32 , u32 , struct netlink_ext_ack *) ;
   int (*ndo_bridge_setlink)(struct net_device *, struct nlmsghdr *, u16 , struct netlink_ext_ack *) ;
   int (*ndo_bridge_getlink)(struct sk_buff *, u32 , u32 , struct net_device *, u32 , int ) ;
   int (*ndo_bridge_dellink)(struct net_device *, struct nlmsghdr *, u16 ) ;
   int (*ndo_change_carrier)(struct net_device *, bool ) ;
   int (*ndo_get_phys_port_id)(struct net_device *, struct netdev_phys_item_id *) ;
   int (*ndo_get_port_parent_id)(struct net_device *, struct netdev_phys_item_id *) ;
   int (*ndo_get_phys_port_name)(struct net_device *, char *, size_t ) ;
   void (*ndo_udp_tunnel_add)(struct net_device *, struct udp_tunnel_info *) ;
   void (*ndo_udp_tunnel_del)(struct net_device *, struct udp_tunnel_info *) ;
   void *(*ndo_dfwd_add_station)(struct net_device *, struct net_device *) ;
   void (*ndo_dfwd_del_station)(struct net_device *, void *) ;
   int (*ndo_set_tx_maxrate)(struct net_device *, int , u32 ) ;
   int (*ndo_get_iflink)(struct net_device *) ;
   int (*ndo_change_proto_down)(struct net_device *, bool ) ;
   int (*ndo_fill_metadata_dst)(struct net_device *, struct sk_buff *) ;
   void (*ndo_set_rx_headroom)(struct net_device *, int ) ;
   int (*ndo_bpf)(struct net_device *, struct netdev_bpf *) ;
   int (*ndo_xdp_xmit)(struct net_device *, int , struct xdp_frame **, u32 ) ;
   int (*ndo_xsk_wakeup)(struct net_device *, u32 , u32 ) ;
   struct devlink_port *(*ndo_get_devlink_port)(struct net_device *) ;
};
#line 1492 
enum ldv_14520 {
    NETREG_UNINITIALIZED = 0,
    NETREG_REGISTERED = 1,
    NETREG_UNREGISTERING = 2,
    NETREG_UNREGISTERED = 3,
    NETREG_RELEASED = 4,
    NETREG_DUMMY = 5
};
#line 1501 
enum ldv_14521 {
    RTNL_LINK_INITIALIZED = 0,
    RTNL_LINK_INITIALIZING = 1
};
#line 1795  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct __anonstruct_adj_list_680 {
   struct list_head upper ;
   struct list_head lower ;
};
#line 1795 
struct iw_handler_def;
#line 1795 
struct iw_public_data;
#line 1795 
struct l3mdev_ops;
#line 1795 
struct ndisc_ops;
#line 1795 
struct vlan_info;
#line 1795 
struct tipc_bearer;
#line 1795 
struct in_device;
#line 1795 
struct dn_dev;
#line 1795 
struct inet6_dev;
#line 1795 
struct mini_Qdisc;
#line 1795 
struct pcpu_lstats;
#line 1795 
struct pcpu_sw_netstats;
#line 1795 
struct pcpu_dstats;
#line 1795  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
union __anonunion_681 {
   void *ml_priv ;
   struct pcpu_lstats *lstats ;
   struct pcpu_sw_netstats *tstats ;
   struct pcpu_dstats *dstats ;
};
#line 1795 
struct garp_port;
#line 1795 
struct mrp_port;
#line 1795 
struct rtnl_link_ops;
#line 1795  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct net_device {
   char name[16U] ;
   struct netdev_name_node *name_node ;
   struct dev_ifalias *ifalias ;
   unsigned long mem_end ;
   unsigned long mem_start ;
   unsigned long base_addr ;
   int irq ;
   unsigned long state ;
   struct list_head dev_list ;
   struct list_head napi_list ;
   struct list_head unreg_list ;
   struct list_head close_list ;
   struct list_head ptype_all ;
   struct list_head ptype_specific ;
   struct __anonstruct_adj_list_680 adj_list ;
   netdev_features_t features ;
   netdev_features_t hw_features ;
   netdev_features_t wanted_features ;
   netdev_features_t vlan_features ;
   netdev_features_t hw_enc_features ;
   netdev_features_t mpls_features ;
   netdev_features_t gso_partial_features ;
   int ifindex ;
   int group ;
   struct net_device_stats stats ;
   atomic_long_t rx_dropped ;
   atomic_long_t tx_dropped ;
   atomic_long_t rx_nohandler ;
   atomic_t carrier_up_count ;
   atomic_t carrier_down_count ;
   struct iw_handler_def *wireless_handlers ;
   struct iw_public_data *wireless_data ;
   struct net_device_ops *netdev_ops ;
   struct ethtool_ops *ethtool_ops ;
   struct l3mdev_ops *l3mdev_ops ;
   struct ndisc_ops *ndisc_ops ;
   struct xfrmdev_ops *xfrmdev_ops ;
   struct tlsdev_ops *tlsdev_ops ;
   struct header_ops *header_ops ;
   unsigned int flags ;
   unsigned int priv_flags ;
   unsigned short gflags ;
   unsigned short padded ;
   unsigned char operstate ;
   unsigned char link_mode ;
   unsigned char if_port ;
   unsigned char dma ;
   unsigned int mtu ;
   unsigned int min_mtu ;
   unsigned int max_mtu ;
   unsigned short type ;
   unsigned short hard_header_len ;
   unsigned char min_header_len ;
   unsigned short needed_headroom ;
   unsigned short needed_tailroom ;
   unsigned char perm_addr[32U] ;
   unsigned char addr_assign_type ;
   unsigned char addr_len ;
   unsigned char upper_level ;
   unsigned char lower_level ;
   unsigned short neigh_priv_len ;
   unsigned short dev_id ;
   unsigned short dev_port ;
   spinlock_t addr_list_lock ;
   unsigned char name_assign_type ;
   bool uc_promisc ;
   struct netdev_hw_addr_list uc ;
   struct netdev_hw_addr_list mc ;
   struct netdev_hw_addr_list dev_addrs ;
   struct kset *queues_kset ;
   unsigned int promiscuity ;
   unsigned int allmulti ;
   struct vlan_info *vlan_info ;
   struct dsa_port *dsa_ptr ;
   struct tipc_bearer *tipc_ptr ;
   void *atalk_ptr ;
   struct in_device *ip_ptr ;
   struct dn_dev *dn_ptr ;
   struct inet6_dev *ip6_ptr ;
   void *ax25_ptr ;
   struct wireless_dev *ieee80211_ptr ;
   struct wpan_dev *ieee802154_ptr ;
   struct mpls_dev *mpls_ptr ;
   unsigned char *dev_addr ;
   struct netdev_rx_queue *_rx ;
   unsigned int num_rx_queues ;
   unsigned int real_num_rx_queues ;
   struct bpf_prog *xdp_prog ;
   unsigned long gro_flush_timeout ;
   rx_handler_func_t *rx_handler ;
   void *rx_handler_data ;
   struct mini_Qdisc *miniq_ingress ;
   struct netdev_queue *ingress_queue ;
   struct nf_hook_entries *nf_hooks_ingress ;
   unsigned char broadcast[32U] ;
   struct cpu_rmap *rx_cpu_rmap ;
   struct hlist_node index_hlist ;
   struct netdev_queue *_tx ;
   unsigned int num_tx_queues ;
   unsigned int real_num_tx_queues ;
   struct Qdisc *qdisc ;
   struct hlist_head qdisc_hash[16U] ;
   unsigned int tx_queue_len ;
   spinlock_t tx_global_lock ;
   int watchdog_timeo ;
   struct xps_dev_maps *xps_cpus_map ;
   struct xps_dev_maps *xps_rxqs_map ;
   struct mini_Qdisc *miniq_egress ;
   struct timer_list watchdog_timer ;
   int *pcpu_refcnt ;
   struct list_head todo_list ;
   struct list_head link_watch_list ;
   enum ldv_14520 reg_state : 8 ;
   bool dismantle ;
   enum ldv_14521 rtnl_link_state : 16 ;
   bool needs_free_netdev ;
   void (*priv_destructor)(struct net_device *) ;
   struct netpoll_info *npinfo ;
   possible_net_t nd_net ;
   union __anonunion_681 __anonCompField_net_device_159 ;
   struct garp_port *garp_port ;
   struct mrp_port *mrp_port ;
   struct device dev ;
   struct attribute_group *sysfs_groups[4U] ;
   struct attribute_group *sysfs_rx_queue_group ;
   struct rtnl_link_ops *rtnl_link_ops ;
   unsigned int gso_max_size ;
   u16 gso_max_segs ;
   struct dcbnl_rtnl_ops *dcbnl_ops ;
   s16 num_tc ;
   struct netdev_tc_txq tc_to_txq[16U] ;
   u8 prio_tc_map[16U] ;
   unsigned int fcoe_ddp_xid ;
   struct netprio_map *priomap ;
   struct phy_device *phydev ;
   struct sfp_bus *sfp_bus ;
   struct lock_class_key qdisc_tx_busylock_key ;
   struct lock_class_key qdisc_running_key ;
   struct lock_class_key qdisc_xmit_lock_key ;
   struct lock_class_key addr_list_lock_key ;
   bool proto_down ;
   unsigned int wol_enabled : 1 ;
};
#line 2400  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct pcpu_sw_netstats {
   u64 rx_packets ;
   u64 rx_bytes ;
   u64 tx_packets ;
   u64 tx_bytes ;
   struct u64_stats_sync syncp ;
} __attribute__((__aligned__(32)));
#line 2408  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct pcpu_lstats {
   u64_stats_t packets ;
   u64_stats_t bytes ;
   struct u64_stats_sync syncp ;
} __attribute__((__aligned__(16)));
#line 3610 
enum skb_free_reason {
    SKB_REASON_CONSUMED = 0,
    SKB_REASON_DROPPED = 1
};
#line 567  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/rtnetlink.h"
struct tcmsg {
   unsigned char tcm_family ;
   unsigned char tcm__pad1 ;
   unsigned short tcm__pad2 ;
   int tcm_ifindex ;
   __u32 tcm_handle ;
   __u32 tcm_parent ;
   __u32 tcm_info ;
};
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/vdso.h"
struct vdso_image {
   void *data ;
   unsigned long size ;
   unsigned long alt ;
   unsigned long alt_len ;
   long sym_vvar_start ;
   long sym_vvar_page ;
   long sym_pvclock_page ;
   long sym_hvclock_page ;
   long sym_VDSO32_NOTE_MASK ;
   long sym___kernel_sigreturn ;
   long sym___kernel_rt_sigreturn ;
   long sym___kernel_vsyscall ;
   long sym_int80_landing_pad ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef __u64 Elf64_Addr;
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef __u16 Elf64_Half;
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef __u64 Elf64_Off;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef __u32 Elf64_Word;
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef __u64 Elf64_Xword;
#line 192  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
struct elf64_sym {
   Elf64_Word st_name ;
   unsigned char st_info ;
   unsigned char st_other ;
   Elf64_Half st_shndx ;
   Elf64_Addr st_value ;
   Elf64_Xword st_size ;
};
#line 200  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef struct elf64_sym Elf64_Sym;
#line 221  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
struct elf64_hdr {
   unsigned char e_ident[16U] ;
   Elf64_Half e_type ;
   Elf64_Half e_machine ;
   Elf64_Word e_version ;
   Elf64_Addr e_entry ;
   Elf64_Off e_phoff ;
   Elf64_Off e_shoff ;
   Elf64_Word e_flags ;
   Elf64_Half e_ehsize ;
   Elf64_Half e_phentsize ;
   Elf64_Half e_phnum ;
   Elf64_Half e_shentsize ;
   Elf64_Half e_shnum ;
   Elf64_Half e_shstrndx ;
};
#line 237  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef struct elf64_hdr Elf64_Ehdr;
#line 316  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
struct elf64_shdr {
   Elf64_Word sh_name ;
   Elf64_Word sh_type ;
   Elf64_Xword sh_flags ;
   Elf64_Addr sh_addr ;
   Elf64_Off sh_offset ;
   Elf64_Xword sh_size ;
   Elf64_Word sh_link ;
   Elf64_Word sh_info ;
   Elf64_Xword sh_addralign ;
   Elf64_Xword sh_entsize ;
};
#line 328  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef struct elf64_shdr Elf64_Shdr;
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/elf.h"
struct kernel_param;
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/moduleparam.h"
struct kernel_param_ops {
   unsigned int flags ;
   int (*set)(char *, struct kernel_param *) ;
   int (*get)(char *, struct kernel_param *) ;
   void (*free)(void *) ;
};
#line 69 
struct kparam_string;
#line 69 
struct kparam_array;
#line 69  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/moduleparam.h"
union __anonunion_701 {
   void *arg ;
   struct kparam_string *str ;
   struct kparam_array *arr ;
};
#line 69  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/moduleparam.h"
struct kernel_param {
   char *name ;
   struct module *mod ;
   struct kernel_param_ops *ops ;
   u16 perm ;
   s8 level ;
   u8 flags ;
   union __anonunion_701 __anonCompField_kernel_param_160 ;
};
#line 86  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/moduleparam.h"
struct kparam_string {
   unsigned int maxlen ;
   char *string ;
};
#line 92  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/moduleparam.h"
struct kparam_array {
   unsigned int max ;
   unsigned int elemsize ;
   unsigned int *num ;
   struct kernel_param_ops *ops ;
   void *elem ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/error-injection.h"
struct error_injection_entry {
   unsigned long addr ;
   int etype ;
};
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/module.h"
struct mod_arch_specific {
   unsigned int num_orcs ;
   int *orc_unwind_ip ;
   struct orc_entry *orc_unwind ;
};
#line 45  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct module_param_attrs;
#line 45  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct module_kobject {
   struct kobject kobj ;
   struct module *mod ;
   struct kobject *drivers_dir ;
   struct module_param_attrs *mp ;
   struct completion *kobj_completion ;
} __attribute__((__designated_init__));
#line 53  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct module_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct module_attribute *, struct module_kobject *, char *) ;
   ssize_t (*store)(struct module_attribute *, struct module_kobject *, char *, size_t ) ;
   void (*setup)(struct module *, char *) ;
   int (*test)(struct module *) ;
   void (*free)(struct module *) ;
};
#line 297 
enum module_state {
    MODULE_STATE_LIVE = 0,
    MODULE_STATE_COMING = 1,
    MODULE_STATE_GOING = 2,
    MODULE_STATE_UNFORMED = 3
};
#line 305  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct mod_tree_node {
   struct module *mod ;
   struct latch_tree_node node ;
};
#line 310  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct module_layout {
   void *base ;
   unsigned int size ;
   unsigned int text_size ;
   unsigned int ro_size ;
   unsigned int ro_after_init_size ;
   struct mod_tree_node mtn ;
};
#line 334  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct mod_kallsyms {
   Elf64_Sym *symtab ;
   unsigned int num_symtab ;
   char *strtab ;
   char *typetab ;
};
#line 342  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct klp_modinfo {
   Elf64_Ehdr hdr ;
   Elf64_Shdr *sechdrs ;
   char *secstrings ;
   unsigned int symndx ;
};
#line 350 
struct module_sect_attrs;
#line 350 
struct module_notes_attrs;
#line 350 
struct trace_event_call;
#line 350 
struct trace_eval_map;
#line 350  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct module {
   enum module_state state ;
   struct list_head list ;
   char name[56U] ;
   struct module_kobject mkobj ;
   struct module_attribute *modinfo_attrs ;
   char *version ;
   char *srcversion ;
   struct kobject *holders_dir ;
   struct kernel_symbol *syms ;
   s32 *crcs ;
   unsigned int num_syms ;
   struct mutex param_lock ;
   struct kernel_param *kp ;
   unsigned int num_kp ;
   unsigned int num_gpl_syms ;
   struct kernel_symbol *gpl_syms ;
   s32 *gpl_crcs ;
   struct kernel_symbol *unused_syms ;
   s32 *unused_crcs ;
   unsigned int num_unused_syms ;
   unsigned int num_unused_gpl_syms ;
   struct kernel_symbol *unused_gpl_syms ;
   s32 *unused_gpl_crcs ;
   bool sig_ok ;
   bool async_probe_requested ;
   struct kernel_symbol *gpl_future_syms ;
   s32 *gpl_future_crcs ;
   unsigned int num_gpl_future_syms ;
   unsigned int num_exentries ;
   struct exception_table_entry *extable ;
   int (*init)(void) ;
   struct module_layout core_layout ;
   struct module_layout init_layout ;
   struct mod_arch_specific arch ;
   unsigned long taints ;
   unsigned int num_bugs ;
   struct list_head bug_list ;
   struct bug_entry *bug_table ;
   struct mod_kallsyms *kallsyms ;
   struct mod_kallsyms core_kallsyms ;
   struct module_sect_attrs *sect_attrs ;
   struct module_notes_attrs *notes_attrs ;
   char *args ;
   void *percpu ;
   unsigned int percpu_size ;
   unsigned int num_tracepoints ;
   tracepoint_ptr_t *tracepoints_ptrs ;
   unsigned int num_srcu_structs ;
   struct srcu_struct **srcu_struct_ptrs ;
   unsigned int num_bpf_raw_events ;
   struct bpf_raw_event_map *bpf_raw_events ;
   struct jump_entry *jump_entries ;
   unsigned int num_jump_entries ;
   unsigned int num_trace_bprintk_fmt ;
   char **trace_bprintk_fmt_start ;
   struct trace_event_call **trace_events ;
   unsigned int num_trace_events ;
   struct trace_eval_map **trace_evals ;
   unsigned int num_trace_evals ;
   unsigned int num_ftrace_callsites ;
   unsigned long *ftrace_callsites ;
   bool klp ;
   bool klp_alive ;
   struct klp_modinfo *klp_info ;
   struct list_head source_list ;
   struct list_head target_list ;
   void (*exit)(void) ;
   atomic_t refcnt ;
   ctor_fn_t *ctors ;
   unsigned int num_ctors ;
   struct error_injection_entry *ei_funcs ;
   unsigned int num_ei_funcs ;
} __attribute__((__designated_init__, __aligned__(64)));
#line 892  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
typedef unsigned long kernel_ulong_t;
#line 38  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mod_devicetable.h"
struct pci_device_id {
   __u32 vendor ;
   __u32 device ;
   __u32 subvendor ;
   __u32 subdevice ;
   __u32 class ;
   __u32 class_mask ;
   kernel_ulong_t driver_data ;
};
#line 210  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mod_devicetable.h"
struct acpi_device_id {
   __u8 id[9U] ;
   kernel_ulong_t driver_data ;
   __u32 cls ;
   __u32 cls_msk ;
};
#line 260  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mod_devicetable.h"
struct of_device_id {
   char name[32U] ;
   char type[32U] ;
   char compatible[128U] ;
   void *data ;
};
#line 62  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
struct hotplug_slot;
#line 62  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
struct pci_slot {
   struct pci_bus *bus ;
   struct list_head list ;
   struct hotplug_slot *hotplug ;
   unsigned char number ;
   struct kobject kobj ;
};
#line 99  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
typedef int pci_power_t;
#line 153  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
typedef unsigned int pci_channel_state_t;
#line 162 
enum pci_channel_state {
    pci_channel_io_normal = 1,
    pci_channel_io_frozen = 2,
    pci_channel_io_perm_failure = 3
};
#line 181  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
typedef unsigned short pci_dev_flags_t;
#line 207  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
typedef unsigned short pci_bus_flags_t;
#line 282 
struct pcie_link_state;
#line 283 
struct pci_vpd;
#line 284 
struct pci_sriov;
#line 285 
struct pci_p2pdma;
#line 290 
struct aer_stats;
#line 290 
struct pci_driver;
#line 290  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
union __anonunion_703 {
   struct pci_sriov *sriov ;
   struct pci_dev *physfn ;
};
#line 290  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
struct pci_dev {
   struct list_head bus_list ;
   struct pci_bus *bus ;
   struct pci_bus *subordinate ;
   void *sysdata ;
   struct proc_dir_entry *procent ;
   struct pci_slot *slot ;
   unsigned int devfn ;
   unsigned short vendor ;
   unsigned short device ;
   unsigned short subsystem_vendor ;
   unsigned short subsystem_device ;
   unsigned int class ;
   u8 revision ;
   u8 hdr_type ;
   u16 aer_cap ;
   struct aer_stats *aer_stats ;
   u8 pcie_cap ;
   u8 msi_cap ;
   u8 msix_cap ;
   u8 pcie_mpss : 3 ;
   u8 rom_base_reg ;
   u8 pin ;
   u16 pcie_flags_reg ;
   unsigned long *dma_alias_mask ;
   struct pci_driver *driver ;
   u64 dma_mask ;
   struct device_dma_parameters dma_parms ;
   pci_power_t current_state ;
   unsigned int imm_ready : 1 ;
   u8 pm_cap ;
   unsigned int pme_support : 5 ;
   unsigned int pme_poll : 1 ;
   unsigned int d1_support : 1 ;
   unsigned int d2_support : 1 ;
   unsigned int no_d1d2 : 1 ;
   unsigned int no_d3cold : 1 ;
   unsigned int bridge_d3 : 1 ;
   unsigned int d3cold_allowed : 1 ;
   unsigned int mmio_always_on : 1 ;
   unsigned int wakeup_prepared : 1 ;
   unsigned int runtime_d3cold : 1 ;
   unsigned int skip_bus_pm : 1 ;
   unsigned int ignore_hotplug : 1 ;
   unsigned int hotplug_user_indicators : 1 ;
   unsigned int clear_retrain_link : 1 ;
   unsigned int d3_delay ;
   unsigned int d3cold_delay ;
   struct pcie_link_state *link_state ;
   unsigned int ltr_path : 1 ;
   unsigned int eetlp_prefix_path : 1 ;
   pci_channel_state_t error_state ;
   struct device dev ;
   int cfg_size ;
   unsigned int irq ;
   struct resource resource[17U] ;
   bool match_driver ;
   unsigned int transparent : 1 ;
   unsigned int io_window : 1 ;
   unsigned int pref_window : 1 ;
   unsigned int pref_64_window : 1 ;
   unsigned int multifunction : 1 ;
   unsigned int is_busmaster : 1 ;
   unsigned int no_msi : 1 ;
   unsigned int no_64bit_msi : 1 ;
   unsigned int block_cfg_access : 1 ;
   unsigned int broken_parity_status : 1 ;
   unsigned int irq_reroute_variant : 2 ;
   unsigned int msi_enabled : 1 ;
   unsigned int msix_enabled : 1 ;
   unsigned int ari_enabled : 1 ;
   unsigned int ats_enabled : 1 ;
   unsigned int pasid_enabled : 1 ;
   unsigned int pri_enabled : 1 ;
   unsigned int is_managed : 1 ;
   unsigned int needs_freset : 1 ;
   unsigned int state_saved : 1 ;
   unsigned int is_physfn : 1 ;
   unsigned int is_virtfn : 1 ;
   unsigned int reset_fn : 1 ;
   unsigned int is_hotplug_bridge : 1 ;
   unsigned int shpc_managed : 1 ;
   unsigned int is_thunderbolt : 1 ;
   unsigned int untrusted : 1 ;
   unsigned int __aer_firmware_first_valid : 1 ;
   unsigned int __aer_firmware_first : 1 ;
   unsigned int broken_intx_masking : 1 ;
   unsigned int io_window_1k : 1 ;
   unsigned int irq_managed : 1 ;
   unsigned int non_compliant_bars : 1 ;
   unsigned int is_probed : 1 ;
   unsigned int link_active_reporting : 1 ;
   unsigned int no_vf_scan : 1 ;
   pci_dev_flags_t dev_flags ;
   atomic_t enable_cnt ;
   u32 saved_config_space[16U] ;
   struct hlist_head saved_cap_space ;
   struct bin_attribute *rom_attr ;
   int rom_attr_enabled ;
   struct bin_attribute *res_attr[17U] ;
   struct bin_attribute *res_attr_wc[17U] ;
   unsigned int broken_cmd_compl : 1 ;
   unsigned int ptm_root : 1 ;
   unsigned int ptm_enabled : 1 ;
   u8 ptm_granularity ;
   struct attribute_group **msi_irq_groups ;
   struct pci_vpd *vpd ;
   union __anonunion_703 __anonCompField_pci_dev_161 ;
   u16 ats_cap ;
   u8 ats_stu ;
   u16 pri_cap ;
   u32 pri_reqs_alloc ;
   unsigned int pasid_required : 1 ;
   u16 pasid_cap ;
   u16 pasid_features ;
   struct pci_p2pdma *p2pdma ;
   phys_addr_t rom ;
   size_t romlen ;
   char *driver_override ;
   unsigned long priv_flags ;
};
#line 493 
struct pci_ops;
#line 493 
struct msi_controller;
#line 571  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
struct pci_bus {
   struct list_head node ;
   struct pci_bus *parent ;
   struct list_head children ;
   struct list_head devices ;
   struct pci_dev *self ;
   struct list_head slots ;
   struct resource *resource[4U] ;
   struct list_head resources ;
   struct resource busn_res ;
   struct pci_ops *ops ;
   struct msi_controller *msi ;
   void *sysdata ;
   struct proc_dir_entry *procdir ;
   unsigned char number ;
   unsigned char primary ;
   unsigned char max_bus_speed ;
   unsigned char cur_bus_speed ;
   char name[48U] ;
   unsigned short bridge_ctl ;
   pci_bus_flags_t bus_flags ;
   struct device *bridge ;
   struct device dev ;
   struct bin_attribute *legacy_io ;
   struct bin_attribute *legacy_mem ;
   unsigned int is_added : 1 ;
};
#line 697  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
struct pci_ops {
   int (*add_bus)(struct pci_bus *) ;
   void (*remove_bus)(struct pci_bus *) ;
   void *(*map_bus)(struct pci_bus *, unsigned int , int ) ;
   int (*read)(struct pci_bus *, unsigned int , int , int , u32 *) ;
   int (*write)(struct pci_bus *, unsigned int , int , int , u32 ) ;
};
#line 725  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
struct pci_dynids {
   spinlock_t lock ;
   struct list_head list ;
};
#line 729  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
typedef unsigned int pci_ers_result_t;
#line 761  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
struct pci_error_handlers {
   pci_ers_result_t (*error_detected)(struct pci_dev *, enum pci_channel_state ) ;
   pci_ers_result_t (*mmio_enabled)(struct pci_dev *) ;
   pci_ers_result_t (*slot_reset)(struct pci_dev *) ;
   void (*reset_prepare)(struct pci_dev *) ;
   void (*reset_done)(struct pci_dev *) ;
   void (*resume)(struct pci_dev *) ;
};
#line 824  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
struct pci_driver {
   struct list_head node ;
   char *name ;
   struct pci_device_id *id_table ;
   int (*probe)(struct pci_dev *, struct pci_device_id *) ;
   void (*remove)(struct pci_dev *) ;
   int (*suspend)(struct pci_dev *, pm_message_t ) ;
   int (*resume)(struct pci_dev *) ;
   void (*shutdown)(struct pci_dev *) ;
   int (*sriov_configure)(struct pci_dev *, int ) ;
   struct pci_error_handlers *err_handler ;
   struct attribute_group **groups ;
   struct device_driver driver ;
   struct pci_dynids dynids ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/utsname.h"
struct new_utsname {
   char sysname[65U] ;
   char nodename[65U] ;
   char release[65U] ;
   char version[65U] ;
   char machine[65U] ;
   char domainname[65U] ;
};
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/utsname.h"
struct uts_namespace {
   struct kref kref ;
   struct new_utsname name ;
   struct user_namespace *user_ns ;
   struct ucounts *ucounts ;
   struct ns_common ns ;
} __attribute__((__designated_init__));
#line 86  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ip.h"
struct iphdr {
   __u8 ihl : 4 ;
   __u8 version : 4 ;
   __u8 tos ;
   __be16 tot_len ;
   __be16 id ;
   __be16 frag_off ;
   __u8 ttl ;
   __u8 protocol ;
   __sum16 check ;
   __be32 saddr ;
   __be32 daddr ;
};
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/page_counter.h"
struct page_counter {
   atomic_long_t usage ;
   unsigned long min ;
   unsigned long low ;
   unsigned long max ;
   struct page_counter *parent ;
   unsigned long emin ;
   atomic_long_t min_usage ;
   atomic_long_t children_min_usage ;
   unsigned long elow ;
   atomic_long_t low_usage ;
   atomic_long_t children_low_usage ;
   unsigned long watermark ;
   unsigned long failcnt ;
};
#line 66 
struct eventfd_ctx;
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/vmpressure.h"
struct vmpressure {
   unsigned long scanned ;
   unsigned long reclaimed ;
   unsigned long tree_scanned ;
   unsigned long tree_reclaimed ;
   spinlock_t sr_lock ;
   struct list_head events ;
   struct mutex events_lock ;
   struct work_struct work ;
};
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/flex_proportions.h"
struct fprop_global {
   struct percpu_counter events ;
   unsigned int period ;
   seqcount_t sequence ;
};
#line 76  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/flex_proportions.h"
struct fprop_local_percpu {
   struct percpu_counter events ;
   unsigned int period ;
   raw_spinlock_t lock ;
};
#line 116  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/flex_proportions.h"
typedef int congested_fn(void *, int );
#line 45  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backing-dev-defs.h"
enum wb_reason {
    WB_REASON_BACKGROUND = 0,
    WB_REASON_VMSCAN = 1,
    WB_REASON_SYNC = 2,
    WB_REASON_PERIODIC = 3,
    WB_REASON_LAPTOP_TIMER = 4,
    WB_REASON_FREE_MORE_MEM = 5,
    WB_REASON_FS_FREE_SPACE = 6,
    WB_REASON_FORKER_THREAD = 7,
    WB_REASON_FOREIGN_FLUSH = 8,
    WB_REASON_MAX = 9
};
#line 71  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backing-dev-defs.h"
struct wb_completion {
   atomic_t cnt ;
   wait_queue_head_t *waitq ;
};
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backing-dev-defs.h"
struct bdi_writeback_congested {
   unsigned long state ;
   refcount_t refcnt ;
   struct backing_dev_info *__bdi ;
   int blkcg_id ;
   struct rb_node rb_node ;
};
#line 130  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backing-dev-defs.h"
union __anonunion_704 {
   struct work_struct release_work ;
   struct callback_head rcu ;
};
#line 130  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backing-dev-defs.h"
struct bdi_writeback {
   struct backing_dev_info *bdi ;
   unsigned long state ;
   unsigned long last_old_flush ;
   struct list_head b_dirty ;
   struct list_head b_io ;
   struct list_head b_more_io ;
   struct list_head b_dirty_time ;
   spinlock_t list_lock ;
   struct percpu_counter stat[4U] ;
   struct bdi_writeback_congested *congested ;
   unsigned long bw_time_stamp ;
   unsigned long dirtied_stamp ;
   unsigned long written_stamp ;
   unsigned long write_bandwidth ;
   unsigned long avg_write_bandwidth ;
   unsigned long dirty_ratelimit ;
   unsigned long balanced_dirty_ratelimit ;
   struct fprop_local_percpu completions ;
   int dirty_exceeded ;
   enum wb_reason start_all_reason ;
   spinlock_t work_lock ;
   struct list_head work_list ;
   struct delayed_work dwork ;
   unsigned long dirty_sleep ;
   struct list_head bdi_node ;
   struct percpu_ref refcnt ;
   struct fprop_local_percpu memcg_completions ;
   struct cgroup_subsys_state *memcg_css ;
   struct cgroup_subsys_state *blkcg_css ;
   struct list_head memcg_node ;
   struct list_head blkcg_node ;
   union __anonunion_704 __anonCompField_bdi_writeback_162 ;
};
#line 188  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backing-dev-defs.h"
struct backing_dev_info {
   u64 id ;
   struct rb_node rb_node ;
   struct list_head bdi_list ;
   unsigned long ra_pages ;
   unsigned long io_pages ;
   congested_fn *congested_fn ;
   void *congested_data ;
   char *name ;
   struct kref refcnt ;
   unsigned int capabilities ;
   unsigned int min_ratio ;
   unsigned int max_ratio ;
   unsigned int max_prop_frac ;
   atomic_long_t tot_write_bandwidth ;
   struct bdi_writeback wb ;
   struct list_head wb_list ;
   struct xarray cgwb_tree ;
   struct rb_root cgwb_congested_tree ;
   struct mutex cgwb_release_mutex ;
   struct rw_semaphore wb_switch_rwsem ;
   wait_queue_head_t wb_waitq ;
   struct device *dev ;
   struct device *owner ;
   struct timer_list laptop_mode_wb_timer ;
   struct dentry *debug_dir ;
};
#line 306 
struct bio_set;
#line 307 
struct bio_integrity_payload;
#line 308  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backing-dev-defs.h"
typedef void bio_end_io_t(struct bio *);
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk_types.h"
typedef u8 blk_status_t;
#line 112  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk_types.h"
struct bio_issue {
   u64 value ;
};
#line 144 
struct blkcg_gq;
#line 144  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk_types.h"
union __anonunion_705 {
   struct bio_integrity_payload *bi_integrity ;
};
#line 144  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk_types.h"
struct bio {
   struct bio *bi_next ;
   struct gendisk *bi_disk ;
   unsigned int bi_opf ;
   unsigned short bi_flags ;
   unsigned short bi_ioprio ;
   unsigned short bi_write_hint ;
   blk_status_t bi_status ;
   u8 bi_partno ;
   atomic_t __bi_remaining ;
   struct bvec_iter bi_iter ;
   bio_end_io_t *bi_end_io ;
   void *bi_private ;
   struct blkcg_gq *bi_blkg ;
   struct bio_issue bi_issue ;
   u64 bi_iocost_cost ;
   union __anonunion_705 __anonCompField_bio_163 ;
   unsigned short bi_vcnt ;
   unsigned short bi_max_vecs ;
   atomic_t __bi_cnt ;
   struct bio_vec *bi_io_vec ;
   struct bio_set *bi_pool ;
   struct bio_vec bi_inline_vecs[0U] ;
};
#line 452  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk_types.h"
typedef unsigned int blk_qc_t;
#line 479  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk_types.h"
struct blk_rq_stat {
   u64 mean ;
   u64 min ;
   u64 max ;
   u32 nr_samples ;
   u64 batch ;
};
#line 86  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/genhd.h"
struct disk_stats {
   u64 nsecs[4U] ;
   unsigned long sectors[4U] ;
   unsigned long ios[4U] ;
   unsigned long merges[4U] ;
   unsigned long io_ticks ;
   unsigned long time_in_queue ;
   local_t in_flight[2U] ;
};
#line 103  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/genhd.h"
struct partition_meta_info {
   char uuid[37U] ;
   u8 volname[64U] ;
};
#line 108  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/genhd.h"
struct hd_struct {
   sector_t start_sect ;
   sector_t nr_sects ;
   seqcount_t nr_sects_seq ;
   sector_t alignment_offset ;
   unsigned int discard_alignment ;
   struct device __dev ;
   struct kobject *holder_dir ;
   int policy ;
   int partno ;
   struct partition_meta_info *info ;
   int make_it_fail ;
   unsigned long stamp ;
   struct disk_stats *dkstats ;
   struct percpu_ref ref ;
   struct rcu_work rcu_work ;
};
#line 160  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/genhd.h"
struct disk_part_tbl {
   struct callback_head callback_head ;
   int len ;
   struct hd_struct *last_lookup ;
   struct hd_struct *part[] ;
};
#line 166 
struct disk_events;
#line 167 
struct badblocks;
#line 172 
struct blk_integrity_profile;
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/genhd.h"
struct blk_integrity {
   struct blk_integrity_profile *profile ;
   unsigned char flags ;
   unsigned char tuple_size ;
   unsigned char interval_exp ;
   unsigned char tag_size ;
};
#line 182 
struct timer_rand_state;
#line 182  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/genhd.h"
struct gendisk {
   int major ;
   int first_minor ;
   int minors ;
   char disk_name[32U] ;
   char *(*devnode)(struct gendisk *, umode_t *) ;
   unsigned short events ;
   unsigned short event_flags ;
   struct disk_part_tbl *part_tbl ;
   struct hd_struct part0 ;
   struct block_device_operations *fops ;
   struct request_queue *queue ;
   void *private_data ;
   int flags ;
   struct rw_semaphore lookup_sem ;
   struct kobject *slave_dir ;
   struct timer_rand_state *random ;
   atomic_t sync_io ;
   struct disk_events *ev ;
   struct kobject integrity_kobj ;
   int node_id ;
   struct badblocks *bb ;
   struct lockdep_map lockdep_map ;
};
#line 637  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pagemap.h"
typedef void *mempool_alloc_t(gfp_t , void *);
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mempool.h"
typedef void mempool_free_t(void *, void *);
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mempool.h"
struct mempool_s {
   spinlock_t lock ;
   int min_nr ;
   int curr_nr ;
   void **elements ;
   void *pool_data ;
   mempool_alloc_t *alloc ;
   mempool_free_t *free ;
   wait_queue_head_t wait ;
};
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mempool.h"
typedef struct mempool_s mempool_t;
#line 307  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bio.h"
struct bio_integrity_payload {
   struct bio *bip_bio ;
   struct bvec_iter bip_iter ;
   unsigned short bip_slab ;
   unsigned short bip_vcnt ;
   unsigned short bip_max_vcnt ;
   unsigned short bip_flags ;
   struct bvec_iter bio_iter ;
   struct work_struct bip_work ;
   struct bio_vec *bip_vec ;
   struct bio_vec bip_inline_vecs[0U] ;
};
#line 575  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bio.h"
struct bio_list {
   struct bio *head ;
   struct bio *tail ;
};
#line 703  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bio.h"
struct bio_set {
   struct kmem_cache *bio_slab ;
   unsigned int front_pad ;
   mempool_t bio_pool ;
   mempool_t bvec_pool ;
   mempool_t bio_integrity_pool ;
   mempool_t bvec_integrity_pool ;
   spinlock_t rescue_lock ;
   struct bio_list rescue_list ;
   struct work_struct rescue_work ;
   struct workqueue_struct *rescue_workqueue ;
};
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bsg.h"
struct sg_io_v4 {
   __s32 guard ;
   __u32 protocol ;
   __u32 subprotocol ;
   __u32 request_len ;
   __u64 request ;
   __u64 request_tag ;
   __u32 request_attr ;
   __u32 request_priority ;
   __u32 request_extra ;
   __u32 max_response_len ;
   __u64 response ;
   __u32 dout_iovec_count ;
   __u32 dout_xfer_len ;
   __u32 din_iovec_count ;
   __u32 din_xfer_len ;
   __u64 dout_xferp ;
   __u64 din_xferp ;
   __u32 timeout ;
   __u32 flags ;
   __u64 usr_ptr ;
   __u32 spare_in ;
   __u32 driver_status ;
   __u32 transport_status ;
   __u32 device_status ;
   __u32 retry_delay ;
   __u32 info ;
   __u32 duration ;
   __u32 response_len ;
   __s32 din_resid ;
   __s32 dout_resid ;
   __u64 generated_tag ;
   __u32 spare_out ;
   __u32 padding ;
};
#line 65 
struct request;
#line 10  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bsg.h"
struct bsg_ops {
   int (*check_proto)(struct sg_io_v4 *) ;
   int (*fill_hdr)(struct request *, struct sg_io_v4 *, fmode_t ) ;
   int (*complete_rq)(struct request *, struct sg_io_v4 *) ;
   void (*free_rq)(struct request *) ;
};
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bsg.h"
struct bsg_class_device {
   struct device *class_dev ;
   int minor ;
   struct request_queue *queue ;
   struct bsg_ops *ops ;
};
#line 94  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/blkzoned.h"
struct blk_zone {
   __u64 start ;
   __u64 len ;
   __u64 wp ;
   __u8 type ;
   __u8 cond ;
   __u8 non_seq ;
   __u8 reset ;
   __u8 reserved[36U] ;
};
#line 134 
struct elevator_queue;
#line 135 
struct blk_trace;
#line 138 
struct blk_flush_queue;
#line 139 
struct pr_ops;
#line 140 
struct rq_qos;
#line 141 
struct blk_queue_stats;
#line 142 
struct blk_stat_callback;
#line 143  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/blkzoned.h"
typedef void rq_end_io_fn(struct request *, blk_status_t );
#line 63  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
typedef __u32 req_flags_t;
#line 67 
enum mq_rq_state {
    MQ_RQ_IDLE = 0,
    MQ_RQ_IN_FLIGHT = 1,
    MQ_RQ_COMPLETE = 2
};
#line 132 
struct blk_mq_ctx;
#line 132 
struct blk_mq_hw_ctx;
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
union __anonunion_708 {
   struct hlist_node hash ;
   struct list_head ipi_list ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
union __anonunion_709 {
   struct rb_node rb_node ;
   struct bio_vec special_vec ;
   void *completion_data ;
   int error_count ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
struct __anonstruct_elv_711 {
   struct io_cq *icq ;
   void *priv[2U] ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
struct __anonstruct_flush_712 {
   unsigned int seq ;
   struct list_head list ;
   rq_end_io_fn *saved_end_io ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
union __anonunion_710 {
   struct __anonstruct_elv_711 elv ;
   struct __anonstruct_flush_712 flush ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
union __anonunion_713 {
   struct __call_single_data csd ;
   u64 fifo_time ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
struct request {
   struct request_queue *q ;
   struct blk_mq_ctx *mq_ctx ;
   struct blk_mq_hw_ctx *mq_hctx ;
   unsigned int cmd_flags ;
   req_flags_t rq_flags ;
   int tag ;
   int internal_tag ;
   unsigned int __data_len ;
   sector_t __sector ;
   struct bio *bio ;
   struct bio *biotail ;
   struct list_head queuelist ;
   union __anonunion_708 __anonCompField_request_164 ;
   union __anonunion_709 __anonCompField_request_165 ;
   union __anonunion_710 __anonCompField_request_166 ;
   struct gendisk *rq_disk ;
   struct hd_struct *part ;
   u64 alloc_time_ns ;
   u64 start_time_ns ;
   u64 io_start_time_ns ;
   unsigned short wbt_flags ;
   unsigned short stats_sectors ;
   unsigned short nr_phys_segments ;
   unsigned short nr_integrity_segments ;
   unsigned short write_hint ;
   unsigned short ioprio ;
   unsigned int extra_len ;
   enum mq_rq_state state ;
   refcount_t ref ;
   unsigned int timeout ;
   unsigned long deadline ;
   union __anonunion_713 __anonCompField_request_167 ;
   rq_end_io_fn *end_io ;
   void *end_io_data ;
};
#line 285 
struct elevator_type;
#line 286 
struct blk_mq_debugfs_attr;
#line 287 
enum elv_merge {
    ELEVATOR_NO_MERGE = 0,
    ELEVATOR_FRONT_MERGE = 1,
    ELEVATOR_BACK_MERGE = 2,
    ELEVATOR_DISCARD_MERGE = 3
};
#line 294 
struct blk_mq_alloc_data;
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/elevator.h"
struct elevator_mq_ops {
   int (*init_sched)(struct request_queue *, struct elevator_type *) ;
   void (*exit_sched)(struct elevator_queue *) ;
   int (*init_hctx)(struct blk_mq_hw_ctx *, unsigned int ) ;
   void (*exit_hctx)(struct blk_mq_hw_ctx *, unsigned int ) ;
   void (*depth_updated)(struct blk_mq_hw_ctx *) ;
   bool (*allow_merge)(struct request_queue *, struct request *, struct bio *) ;
   bool (*bio_merge)(struct blk_mq_hw_ctx *, struct bio *, unsigned int ) ;
   int (*request_merge)(struct request_queue *, struct request **, struct bio *) ;
   void (*request_merged)(struct request_queue *, struct request *, enum elv_merge ) ;
   void (*requests_merged)(struct request_queue *, struct request *, struct request *) ;
   void (*limit_depth)(unsigned int , struct blk_mq_alloc_data *) ;
   void (*prepare_request)(struct request *, struct bio *) ;
   void (*finish_request)(struct request *) ;
   void (*insert_requests)(struct blk_mq_hw_ctx *, struct list_head *, bool ) ;
   struct request *(*dispatch_request)(struct blk_mq_hw_ctx *) ;
   bool (*has_work)(struct blk_mq_hw_ctx *) ;
   void (*completed_request)(struct request *, u64 ) ;
   void (*requeue_request)(struct request *) ;
   struct request *(*former_request)(struct request_queue *, struct request *) ;
   struct request *(*next_request)(struct request_queue *, struct request *) ;
   void (*init_icq)(struct io_cq *) ;
   void (*exit_icq)(struct io_cq *) ;
};
#line 57  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/elevator.h"
struct elv_fs_entry {
   struct attribute attr ;
   ssize_t (*show)(struct elevator_queue *, char *) ;
   ssize_t (*store)(struct elevator_queue *, char *, size_t ) ;
};
#line 66  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/elevator.h"
struct elevator_type {
   struct kmem_cache *icq_cache ;
   struct elevator_mq_ops ops ;
   size_t icq_size ;
   size_t icq_align ;
   struct elv_fs_entry *elevator_attrs ;
   char *elevator_name ;
   char *elevator_alias ;
   unsigned int elevator_features ;
   struct module *elevator_owner ;
   struct blk_mq_debugfs_attr *queue_debugfs_attrs ;
   struct blk_mq_debugfs_attr *hctx_debugfs_attrs ;
   char icq_cache_name[22U] ;
   struct list_head list ;
};
#line 101  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/elevator.h"
struct elevator_queue {
   struct elevator_type *type ;
   void *elevator_data ;
   struct kobject kobj ;
   struct mutex sysfs_lock ;
   unsigned int registered : 1 ;
   struct hlist_head hash[64U] ;
};
#line 153  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/elevator.h"
typedef blk_qc_t make_request_fn(struct request_queue *, struct bio *);
#line 291  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
typedef int dma_drain_needed_fn(struct request *);
#line 304 
enum blk_zoned_model {
    BLK_ZONED_NONE = 0,
    BLK_ZONED_HA = 1,
    BLK_ZONED_HM = 2
};
#line 320  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
struct queue_limits {
   unsigned long bounce_pfn ;
   unsigned long seg_boundary_mask ;
   unsigned long virt_boundary_mask ;
   unsigned int max_hw_sectors ;
   unsigned int max_dev_sectors ;
   unsigned int chunk_sectors ;
   unsigned int max_sectors ;
   unsigned int max_segment_size ;
   unsigned int physical_block_size ;
   unsigned int logical_block_size ;
   unsigned int alignment_offset ;
   unsigned int io_min ;
   unsigned int io_opt ;
   unsigned int max_discard_sectors ;
   unsigned int max_hw_discard_sectors ;
   unsigned int max_write_same_sectors ;
   unsigned int max_write_zeroes_sectors ;
   unsigned int discard_granularity ;
   unsigned int discard_alignment ;
   unsigned short max_segments ;
   unsigned short max_integrity_segments ;
   unsigned short max_discard_segments ;
   unsigned char misaligned ;
   unsigned char discard_misaligned ;
   unsigned char raid_partial_stripes_expensive ;
   enum blk_zoned_model zoned ;
};
#line 394 
struct blk_mq_ops;
#line 394 
struct throtl_data;
#line 394 
struct blk_mq_tag_set;
#line 394  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
struct request_queue {
   struct request *last_merge ;
   struct elevator_queue *elevator ;
   struct blk_queue_stats *stats ;
   struct rq_qos *rq_qos ;
   make_request_fn *make_request_fn ;
   dma_drain_needed_fn *dma_drain_needed ;
   struct blk_mq_ops *mq_ops ;
   struct blk_mq_ctx *queue_ctx ;
   unsigned int queue_depth ;
   struct blk_mq_hw_ctx **queue_hw_ctx ;
   unsigned int nr_hw_queues ;
   struct backing_dev_info *backing_dev_info ;
   void *queuedata ;
   unsigned long queue_flags ;
   atomic_t pm_only ;
   int id ;
   gfp_t bounce_gfp ;
   spinlock_t queue_lock ;
   struct kobject kobj ;
   struct kobject *mq_kobj ;
   struct blk_integrity integrity ;
   struct device *dev ;
   int rpm_status ;
   unsigned int nr_pending ;
   unsigned long nr_requests ;
   unsigned int dma_drain_size ;
   void *dma_drain_buffer ;
   unsigned int dma_pad_mask ;
   unsigned int dma_alignment ;
   unsigned int rq_timeout ;
   int poll_nsec ;
   struct blk_stat_callback *poll_cb ;
   struct blk_rq_stat poll_stat[16U] ;
   struct timer_list timeout ;
   struct work_struct timeout_work ;
   struct list_head icq_list ;
   unsigned long blkcg_pols[1U] ;
   struct blkcg_gq *root_blkg ;
   struct list_head blkg_list ;
   struct queue_limits limits ;
   unsigned int required_elevator_features ;
   unsigned int nr_zones ;
   unsigned long *conv_zones_bitmap ;
   unsigned long *seq_zones_wlock ;
   unsigned int sg_timeout ;
   unsigned int sg_reserved_size ;
   int node ;
   struct blk_trace *blk_trace ;
   struct mutex blk_trace_mutex ;
   struct blk_flush_queue *fq ;
   struct list_head requeue_list ;
   spinlock_t requeue_lock ;
   struct delayed_work requeue_work ;
   struct mutex sysfs_lock ;
   struct mutex sysfs_dir_lock ;
   struct list_head unused_hctx_list ;
   spinlock_t unused_hctx_lock ;
   int mq_freeze_depth ;
   struct bsg_class_device bsg_dev ;
   struct throtl_data *td ;
   struct callback_head callback_head ;
   wait_queue_head_t mq_freeze_wq ;
   struct mutex mq_freeze_lock ;
   struct percpu_ref q_usage_counter ;
   struct blk_mq_tag_set *tag_set ;
   struct list_head tag_set_list ;
   struct bio_set bio_split ;
   struct dentry *debugfs_dir ;
   struct dentry *sched_debugfs_dir ;
   struct dentry *rqos_debugfs_dir ;
   bool mq_sysfs_init_done ;
   size_t cmd_size ;
   struct work_struct release_work ;
   u64 write_hints[5U] ;
};
#line 1160  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
struct blk_plug {
   struct list_head mq_list ;
   struct list_head cb_list ;
   unsigned short rq_count ;
   bool multiple_queues ;
};
#line 1514  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
struct blk_integrity_iter {
   void *prot_buf ;
   void *data_buf ;
   sector_t seed ;
   unsigned int data_size ;
   unsigned short interval ;
   char *disk_name ;
};
#line 1522  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
typedef blk_status_t integrity_processing_fn(struct blk_integrity_iter *);
#line 1524  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
typedef void integrity_prepare_fn(struct request *);
#line 1525  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
typedef void integrity_complete_fn(struct request *, unsigned int );
#line 1527  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
struct blk_integrity_profile {
   integrity_processing_fn *generate_fn ;
   integrity_processing_fn *verify_fn ;
   integrity_prepare_fn *prepare_fn ;
   integrity_complete_fn *complete_fn ;
   char *name ;
};
#line 1693  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
struct block_device_operations {
   int (*open)(struct block_device *, fmode_t ) ;
   void (*release)(struct gendisk *, fmode_t ) ;
   int (*rw_page)(struct block_device *, sector_t , struct page *, unsigned int ) ;
   int (*ioctl)(struct block_device *, fmode_t , unsigned int , unsigned long ) ;
   int (*compat_ioctl)(struct block_device *, fmode_t , unsigned int , unsigned long ) ;
   unsigned int (*check_events)(struct gendisk *, unsigned int ) ;
   int (*media_changed)(struct gendisk *) ;
   void (*unlock_native_capacity)(struct gendisk *) ;
   int (*revalidate_disk)(struct gendisk *) ;
   int (*getgeo)(struct block_device *, struct hd_geometry *) ;
   void (*swap_slot_free_notify)(struct block_device *, unsigned long ) ;
   int (*report_zones)(struct gendisk *, sector_t , unsigned int , int (*)(struct blk_zone *, unsigned int , void *), void *) ;
   struct module *owner ;
   struct pr_ops *pr_ops ;
};
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk-cgroup.h"
struct blkcg_policy_data;
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk-cgroup.h"
struct blkcg {
   struct cgroup_subsys_state css ;
   spinlock_t lock ;
   struct xarray blkg_tree ;
   struct blkcg_gq *blkg_hint ;
   struct hlist_head blkg_list ;
   struct blkcg_policy_data *cpd[5U] ;
   struct list_head all_blkcgs_node ;
   struct list_head cgwb_list ;
   refcount_t cgwb_refcnt ;
};
#line 63  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk-cgroup.h"
struct blkg_iostat {
   u64 bytes[3U] ;
   u64 ios[3U] ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk-cgroup.h"
struct blkg_iostat_set {
   struct u64_stats_sync sync ;
   struct blkg_iostat cur ;
   struct blkg_iostat last ;
};
#line 85  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk-cgroup.h"
struct blkg_policy_data {
   struct blkcg_gq *blkg ;
   int plid ;
};
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk-cgroup.h"
struct blkcg_policy_data {
   struct blkcg *blkcg ;
   int plid ;
};
#line 105  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk-cgroup.h"
struct blkcg_gq {
   struct request_queue *q ;
   struct list_head q_node ;
   struct hlist_node blkcg_node ;
   struct blkcg *blkcg ;
   struct bdi_writeback_congested *wb_congested ;
   struct blkcg_gq *parent ;
   struct percpu_ref refcnt ;
   bool online ;
   struct blkg_iostat_set *iostat_cpu ;
   struct blkg_iostat_set iostat ;
   struct blkg_policy_data *pd[5U] ;
   spinlock_t async_bio_lock ;
   struct bio_list async_bios ;
   struct work_struct async_bio_work ;
   atomic_t use_delay ;
   atomic64_t delay_nsec ;
   atomic64_t delay_start ;
   u64 last_delay ;
   int last_use ;
   struct callback_head callback_head ;
};
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/writeback.h"
enum writeback_sync_modes {
    WB_SYNC_NONE = 0,
    WB_SYNC_ALL = 1
};
#line 51  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/writeback.h"
struct writeback_control {
   long nr_to_write ;
   long pages_skipped ;
   loff_t range_start ;
   loff_t range_end ;
   enum writeback_sync_modes sync_mode ;
   unsigned int for_kupdate : 1 ;
   unsigned int for_background : 1 ;
   unsigned int tagged_writepages : 1 ;
   unsigned int for_reclaim : 1 ;
   unsigned int range_cyclic : 1 ;
   unsigned int for_sync : 1 ;
   unsigned int no_cgroup_owner : 1 ;
   unsigned int punt_to_cgroup : 1 ;
   struct bdi_writeback *wb ;
   struct inode *inode ;
   int wb_id ;
   int wb_lcand_id ;
   int wb_tcand_id ;
   size_t wb_bytes ;
   size_t wb_lcand_bytes ;
   size_t wb_tcand_bytes ;
};
#line 129  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/writeback.h"
struct wb_domain {
   spinlock_t lock ;
   struct fprop_global completions ;
   struct timer_list period_timer ;
   unsigned long period_time ;
   unsigned long dirty_limit_tstamp ;
   unsigned long dirty_limit ;
};
#line 69  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct mem_cgroup_id {
   int id ;
   refcount_t ref ;
};
#line 86  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct memcg_vmstats_percpu {
   long stat[38U] ;
   unsigned long events[91U] ;
   unsigned long nr_page_events ;
   unsigned long targets[2U] ;
};
#line 93  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct mem_cgroup_reclaim_iter {
   struct mem_cgroup *position ;
   unsigned int generation ;
};
#line 99  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct lruvec_stat {
   long count[32U] ;
};
#line 107  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct memcg_shrinker_map {
   struct callback_head rcu ;
   unsigned long map[0U] ;
};
#line 115  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct mem_cgroup_per_node {
   struct lruvec lruvec ;
   struct lruvec_stat *lruvec_stat_local ;
   struct lruvec_stat *lruvec_stat_cpu ;
   atomic_long_t lruvec_stat[32U] ;
   unsigned long lru_zone_size[5U][5U] ;
   struct mem_cgroup_reclaim_iter iter ;
   struct memcg_shrinker_map *shrinker_map ;
   struct rb_node tree_node ;
   unsigned long usage_in_excess ;
   bool on_tree ;
   struct mem_cgroup *memcg ;
};
#line 139  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct mem_cgroup_threshold {
   struct eventfd_ctx *eventfd ;
   unsigned long threshold ;
};
#line 145  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct mem_cgroup_threshold_ary {
   int current_threshold ;
   unsigned int size ;
   struct mem_cgroup_threshold entries[0U] ;
};
#line 154  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct mem_cgroup_thresholds {
   struct mem_cgroup_threshold_ary *primary ;
   struct mem_cgroup_threshold_ary *spare ;
};
#line 164 
enum memcg_kmem_state {
    KMEM_NONE = 0,
    KMEM_ALLOCATED = 1,
    KMEM_ONLINE = 2
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct memcg_padding {
   char x[0U] ;
} __attribute__((__aligned__(4096)));
#line 190  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct memcg_cgwb_frn {
   u64 bdi_id ;
   int memcg_id ;
   u64 at ;
   struct wb_completion done ;
};
#line 203  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct mem_cgroup {
   struct cgroup_subsys_state css ;
   struct mem_cgroup_id id ;
   struct page_counter memory ;
   struct page_counter swap ;
   struct page_counter memsw ;
   struct page_counter kmem ;
   struct page_counter tcpmem ;
   unsigned long high ;
   struct work_struct high_work ;
   unsigned long soft_limit ;
   struct vmpressure vmpressure ;
   bool use_hierarchy ;
   bool oom_group ;
   bool oom_lock ;
   int under_oom ;
   int swappiness ;
   int oom_kill_disable ;
   struct cgroup_file events_file ;
   struct cgroup_file events_local_file ;
   struct cgroup_file swap_events_file ;
   struct mutex thresholds_lock ;
   struct mem_cgroup_thresholds thresholds ;
   struct mem_cgroup_thresholds memsw_thresholds ;
   struct list_head oom_notify ;
   unsigned long move_charge_at_immigrate ;
   spinlock_t move_lock ;
   unsigned long move_lock_flags ;
   struct memcg_padding _pad1_ ;
   atomic_t moving_account ;
   struct task_struct *move_lock_task ;
   struct memcg_vmstats_percpu *vmstats_local ;
   struct memcg_vmstats_percpu *vmstats_percpu ;
   struct memcg_padding _pad2_ ;
   atomic_long_t vmstats[38U] ;
   atomic_long_t vmevents[91U] ;
   atomic_long_t memory_events[7U] ;
   atomic_long_t memory_events_local[7U] ;
   unsigned long socket_pressure ;
   bool tcpmem_active ;
   int tcpmem_pressure ;
   int kmemcg_id ;
   enum memcg_kmem_state kmem_state ;
   struct list_head kmem_caches ;
   struct list_head cgwb_list ;
   struct wb_domain cgwb_domain ;
   struct memcg_cgwb_frn cgwb_frn[4U] ;
   struct list_head event_list ;
   spinlock_t event_list_lock ;
   struct deferred_split deferred_split_queue ;
   struct mem_cgroup_per_node *nodeinfo[0U] ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/gen_stats.h"
struct gnet_stats_queue {
   __u32 qlen ;
   __u32 backlog ;
   __u32 drops ;
   __u32 requeues ;
   __u32 overlimits ;
};
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/gen_stats.h"
struct gnet_stats_basic_packed {
   __u64 bytes ;
   __u64 packets ;
};
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/gen_stats.h"
struct gnet_stats_basic_cpu {
   struct gnet_stats_basic_packed bstats ;
   struct u64_stats_sync syncp ;
} __attribute__((__aligned__(16)));
#line 20 
struct net_rate_estimator;
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/gen_stats.h"
struct gnet_dump {
   spinlock_t *lock ;
   struct sk_buff *skb ;
   struct nlattr *tail ;
   int compat_tc_stats ;
   int compat_xstats ;
   int padattr ;
   void *xstats ;
   int xstats_len ;
   struct tc_stats tc_stats ;
};
#line 291  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netlink.h"
struct __anonstruct_730 {
   s16 min ;
   s16 max ;
};
#line 291  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netlink.h"
union __anonunion_729 {
   void *validation_data ;
   struct __anonstruct_730 __anonCompField___anonunion_729_168 ;
   int (*validate)(struct nlattr *, struct netlink_ext_ack *) ;
   u16 strict_start_type ;
};
#line 291  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netlink.h"
struct nla_policy {
   u8 type ;
   u8 validation_type ;
   u16 len ;
   union __anonunion_729 __anonCompField_nla_policy_169 ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/rtnetlink.h"
struct rtnl_link_ops {
   struct list_head list ;
   char *kind ;
   size_t priv_size ;
   void (*setup)(struct net_device *) ;
   unsigned int maxtype ;
   struct nla_policy *policy ;
   int (*validate)(struct nlattr **, struct nlattr **, struct netlink_ext_ack *) ;
   int (*newlink)(struct net *, struct net_device *, struct nlattr **, struct nlattr **, struct netlink_ext_ack *) ;
   int (*changelink)(struct net_device *, struct nlattr **, struct nlattr **, struct netlink_ext_ack *) ;
   void (*dellink)(struct net_device *, struct list_head *) ;
   size_t (*get_size)(struct net_device *) ;
   int (*fill_info)(struct sk_buff *, struct net_device *) ;
   size_t (*get_xstats_size)(struct net_device *) ;
   int (*fill_xstats)(struct sk_buff *, struct net_device *) ;
   unsigned int (*get_num_tx_queues)(void) ;
   unsigned int (*get_num_rx_queues)(void) ;
   unsigned int slave_maxtype ;
   struct nla_policy *slave_policy ;
   int (*slave_changelink)(struct net_device *, struct net_device *, struct nlattr **, struct nlattr **, struct netlink_ext_ack *) ;
   size_t (*get_slave_size)(struct net_device *, struct net_device *) ;
   int (*fill_slave_info)(struct sk_buff *, struct net_device *, struct net_device *) ;
   struct net *(*get_link_net)(struct net_device *) ;
   size_t (*get_linkxstats_size)(struct net_device *, int ) ;
   int (*fill_linkxstats)(struct sk_buff *, struct net_device *, int *, int ) ;
};
#line 170  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/rtnetlink.h"
struct rhash_lock_head {
   };
#line 76  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rhashtable.h"
struct bucket_table {
   unsigned int size ;
   unsigned int nest ;
   u32 hash_rnd ;
   struct list_head walkers ;
   struct callback_head rcu ;
   struct bucket_table *future_tbl ;
   struct lockdep_map dep_map ;
   struct rhash_lock_head *buckets[] ;
};
#line 281  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow_offload.h"
struct flow_block {
   struct list_head cb_list ;
};
#line 298  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow_offload.h"
typedef int flow_setup_cb_t(enum tc_setup_type , void *, void *);
#line 412 
struct Qdisc_ops;
#line 413 
struct qdisc_walker;
#line 414 
struct tcf_walker;
#line 41  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct qdisc_size_table {
   struct callback_head rcu ;
   struct list_head list ;
   struct tc_sizespec szopts ;
   int refcnt ;
   u16 data[] ;
};
#line 50  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct qdisc_skb_head {
   struct sk_buff *head ;
   struct sk_buff *tail ;
   __u32 qlen ;
   spinlock_t lock ;
};
#line 57  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct Qdisc {
   int (*enqueue)(struct sk_buff *, struct Qdisc *, struct sk_buff **) ;
   struct sk_buff *(*dequeue)(struct Qdisc *) ;
   unsigned int flags ;
   u32 limit ;
   struct Qdisc_ops *ops ;
   struct qdisc_size_table *stab ;
   struct hlist_node hash ;
   u32 handle ;
   u32 parent ;
   struct netdev_queue *dev_queue ;
   struct net_rate_estimator *rate_est ;
   struct gnet_stats_basic_cpu *cpu_bstats ;
   struct gnet_stats_queue *cpu_qstats ;
   int padded ;
   refcount_t refcnt ;
   struct sk_buff_head gso_skb ;
   struct qdisc_skb_head q ;
   struct gnet_stats_basic_packed bstats ;
   seqcount_t running ;
   struct gnet_stats_queue qstats ;
   unsigned long state ;
   struct Qdisc *next_sched ;
   struct sk_buff_head skb_bad_txq ;
   spinlock_t busylock ;
   spinlock_t seqlock ;
   bool empty ;
   struct callback_head rcu ;
};
#line 195 
struct tcf_block;
#line 195  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct Qdisc_class_ops {
   unsigned int flags ;
   struct netdev_queue *(*select_queue)(struct Qdisc *, struct tcmsg *) ;
   int (*graft)(struct Qdisc *, unsigned long , struct Qdisc *, struct Qdisc **, struct netlink_ext_ack *) ;
   struct Qdisc *(*leaf)(struct Qdisc *, unsigned long ) ;
   void (*qlen_notify)(struct Qdisc *, unsigned long ) ;
   unsigned long (*find)(struct Qdisc *, u32 ) ;
   int (*change)(struct Qdisc *, u32 , u32 , struct nlattr **, unsigned long *, struct netlink_ext_ack *) ;
   int (*delete)(struct Qdisc *, unsigned long ) ;
   void (*walk)(struct Qdisc *, struct qdisc_walker *) ;
   struct tcf_block *(*tcf_block)(struct Qdisc *, unsigned long , struct netlink_ext_ack *) ;
   unsigned long (*bind_tcf)(struct Qdisc *, unsigned long , u32 ) ;
   void (*unbind_tcf)(struct Qdisc *, unsigned long ) ;
   int (*dump)(struct Qdisc *, unsigned long , struct sk_buff *, struct tcmsg *) ;
   int (*dump_stats)(struct Qdisc *, unsigned long , struct gnet_dump *) ;
};
#line 235  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct Qdisc_ops {
   struct Qdisc_ops *next ;
   struct Qdisc_class_ops *cl_ops ;
   char id[16U] ;
   int priv_size ;
   unsigned int static_flags ;
   int (*enqueue)(struct sk_buff *, struct Qdisc *, struct sk_buff **) ;
   struct sk_buff *(*dequeue)(struct Qdisc *) ;
   struct sk_buff *(*peek)(struct Qdisc *) ;
   int (*init)(struct Qdisc *, struct nlattr *, struct netlink_ext_ack *) ;
   void (*reset)(struct Qdisc *) ;
   void (*destroy)(struct Qdisc *) ;
   int (*change)(struct Qdisc *, struct nlattr *, struct netlink_ext_ack *) ;
   void (*attach)(struct Qdisc *) ;
   int (*change_tx_queue_len)(struct Qdisc *, unsigned int ) ;
   int (*dump)(struct Qdisc *, struct sk_buff *) ;
   int (*dump_stats)(struct Qdisc *, struct gnet_dump *) ;
   void (*ingress_block_set)(struct Qdisc *, u32 ) ;
   void (*egress_block_set)(struct Qdisc *, u32 ) ;
   u32 (*ingress_block_get)(struct Qdisc *) ;
   u32 (*egress_block_get)(struct Qdisc *) ;
   struct module *owner ;
};
#line 272  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct __anonstruct_804 {
   unsigned long class ;
   u32 classid ;
};
#line 272 
struct tcf_proto;
#line 272  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct __anonstruct_805 {
   bool ingress ;
   struct gnet_stats_queue *qstats ;
};
#line 272  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
union __anonunion_803 {
   struct __anonstruct_804 __anonCompField___anonunion_803_171 ;
   struct tcf_proto *goto_tp ;
   struct __anonstruct_805 __anonCompField___anonunion_803_172 ;
};
#line 272  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct tcf_result {
   union __anonunion_803 __anonCompField_tcf_result_173 ;
};
#line 287 
struct tcf_chain;
#line 290  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct tcf_proto_ops {
   struct list_head head ;
   char kind[16U] ;
   int (*classify)(struct sk_buff *, struct tcf_proto *, struct tcf_result *) ;
   int (*init)(struct tcf_proto *) ;
   void (*destroy)(struct tcf_proto *, bool , struct netlink_ext_ack *) ;
   void *(*get)(struct tcf_proto *, u32 ) ;
   void (*put)(struct tcf_proto *, void *) ;
   int (*change)(struct net *, struct sk_buff *, struct tcf_proto *, unsigned long , u32 , struct nlattr **, void **, bool , bool , struct netlink_ext_ack *) ;
   int (*delete)(struct tcf_proto *, void *, bool *, bool , struct netlink_ext_ack *) ;
   bool (*delete_empty)(struct tcf_proto *) ;
   void (*walk)(struct tcf_proto *, struct tcf_walker *, bool ) ;
   int (*reoffload)(struct tcf_proto *, bool , flow_setup_cb_t *, void *, struct netlink_ext_ack *) ;
   void (*hw_add)(struct tcf_proto *, void *) ;
   void (*hw_del)(struct tcf_proto *, void *) ;
   void (*bind_class)(void *, u32 , unsigned long ) ;
   void *(*tmplt_create)(struct net *, struct tcf_chain *, struct nlattr **, struct netlink_ext_ack *) ;
   void (*tmplt_destroy)(void *) ;
   int (*dump)(struct net *, struct tcf_proto *, void *, struct sk_buff *, struct tcmsg *, bool ) ;
   int (*tmplt_dump)(struct sk_buff *, struct net *, void *) ;
   struct module *owner ;
   int flags ;
};
#line 348  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct tcf_proto {
   struct tcf_proto *next ;
   void *root ;
   int (*classify)(struct sk_buff *, struct tcf_proto *, struct tcf_result *) ;
   __be16 protocol ;
   u32 prio ;
   void *data ;
   struct tcf_proto_ops *ops ;
   struct tcf_chain *chain ;
   spinlock_t lock ;
   bool deleting ;
   refcount_t refcnt ;
   struct callback_head rcu ;
   struct hlist_node destroy_ht_node ;
};
#line 386  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct tcf_chain {
   struct mutex filter_chain_lock ;
   struct tcf_proto *filter_chain ;
   struct list_head list ;
   struct tcf_block *block ;
   u32 index ;
   unsigned int refcnt ;
   unsigned int action_refcnt ;
   bool explicitly_created ;
   bool flushing ;
   struct tcf_proto_ops *tmplt_ops ;
   void *tmplt_priv ;
   struct callback_head rcu ;
};
#line 402  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct __anonstruct_chain0_807 {
   struct tcf_chain *chain ;
   struct list_head filter_chain_list ;
};
#line 402  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct tcf_block {
   struct mutex lock ;
   struct list_head chain_list ;
   u32 index ;
   refcount_t refcnt ;
   struct net *net ;
   struct Qdisc *q ;
   struct rw_semaphore cb_lock ;
   struct flow_block flow_block ;
   struct list_head owner_list ;
   bool keep_dst ;
   atomic_t offloadcnt ;
   unsigned int nooffloaddevcnt ;
   unsigned int lockeddevcnt ;
   struct __anonstruct_chain0_807 chain0 ;
   struct callback_head rcu ;
   struct hlist_head proto_destroy_ht[128U] ;
   struct mutex proto_destroy_lock ;
};
#line 1269  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct mini_Qdisc {
   struct tcf_proto *filter_list ;
   struct gnet_stats_basic_cpu *cpu_bstats ;
   struct gnet_stats_queue *cpu_qstats ;
   struct callback_head rcu ;
};
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/filter.h"
struct sock_filter {
   __u16 code ;
   __u8 jt ;
   __u8 jf ;
   __u32 k ;
};
#line 35 
struct sock_reuseport;
#line 513  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/filter.h"
struct sock_fprog_kern {
   u16 len ;
   struct sock_filter *filter ;
};
#line 526  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/filter.h"
union __anonunion_820 {
   struct sock_filter insns[0U] ;
   struct bpf_insn insnsi[0U] ;
};
#line 526  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/filter.h"
struct bpf_prog {
   u16 pages ;
   u16 jited : 1 ;
   u16 jit_requested : 1 ;
   u16 gpl_compatible : 1 ;
   u16 cb_access : 1 ;
   u16 dst_needed : 1 ;
   u16 blinded : 1 ;
   u16 is_func : 1 ;
   u16 kprobe_override : 1 ;
   u16 has_callchain_buf : 1 ;
   u16 enforce_expected_attach_type : 1 ;
   enum bpf_prog_type type ;
   enum bpf_attach_type expected_attach_type ;
   u32 len ;
   u32 jited_len ;
   u8 tag[8U] ;
   struct bpf_prog_aux *aux ;
   struct sock_fprog_kern *orig_prog ;
   unsigned int (*bpf_func)(void *, struct bpf_insn *) ;
   union __anonunion_820 __anonCompField_bpf_prog_175 ;
};
#line 554  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/filter.h"
struct sk_filter {
   refcount_t refcnt ;
   struct callback_head rcu ;
   struct bpf_prog *prog ;
};
#line 36  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/poll.h"
struct pollfd {
   int fd ;
   short events ;
   short revents ;
};
#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/poll.h"
struct poll_table_struct {
   void (*_qproc)(struct file *, wait_queue_head_t *, struct poll_table_struct *) ;
   __poll_t _key ;
};
#line 70  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/neighbour.h"
struct neigh_table;
#line 70  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/neighbour.h"
struct neigh_parms {
   possible_net_t net ;
   struct net_device *dev ;
   struct list_head list ;
   int (*neigh_setup)(struct neighbour *) ;
   struct neigh_table *tbl ;
   void *sysctl_table ;
   int dead ;
   refcount_t refcnt ;
   struct callback_head callback_head ;
   int reachable_time ;
   int data[13U] ;
   unsigned long data_state[1U] ;
};
#line 112  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/neighbour.h"
struct neigh_statistics {
   unsigned long allocs ;
   unsigned long destroys ;
   unsigned long hash_grows ;
   unsigned long res_failed ;
   unsigned long lookups ;
   unsigned long hits ;
   unsigned long rcv_probes_mcast ;
   unsigned long rcv_probes_ucast ;
   unsigned long periodic_gc_runs ;
   unsigned long forced_gc_runs ;
   unsigned long unres_discards ;
   unsigned long table_fulls ;
};
#line 134 
struct neigh_ops;
#line 134  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/neighbour.h"
struct neighbour {
   struct neighbour *next ;
   struct neigh_table *tbl ;
   struct neigh_parms *parms ;
   unsigned long confirmed ;
   unsigned long updated ;
   rwlock_t lock ;
   refcount_t refcnt ;
   unsigned int arp_queue_len_bytes ;
   struct sk_buff_head arp_queue ;
   struct timer_list timer ;
   unsigned long used ;
   atomic_t probes ;
   __u8 flags ;
   __u8 nud_state ;
   __u8 type ;
   __u8 dead ;
   u8 protocol ;
   seqlock_t ha_lock ;
   unsigned char ha[32U] ;
   struct hh_cache hh ;
   int (*output)(struct neighbour *, struct sk_buff *) ;
   struct neigh_ops *ops ;
   struct list_head gc_list ;
   struct callback_head rcu ;
   struct net_device *dev ;
   u8 primary_key[0U] ;
} __attribute__((__designated_init__));
#line 163  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/neighbour.h"
struct neigh_ops {
   int family ;
   void (*solicit)(struct neighbour *, struct sk_buff *) ;
   void (*error_report)(struct neighbour *, struct sk_buff *) ;
   int (*output)(struct neighbour *, struct sk_buff *) ;
   int (*connected_output)(struct neighbour *, struct sk_buff *) ;
};
#line 171  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/neighbour.h"
struct pneigh_entry {
   struct pneigh_entry *next ;
   possible_net_t net ;
   struct net_device *dev ;
   u8 flags ;
   u8 protocol ;
   u8 key[0U] ;
};
#line 186  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/neighbour.h"
struct neigh_hash_table {
   struct neighbour **hash_buckets ;
   unsigned int hash_shift ;
   __u32 hash_rnd[4U] ;
   struct callback_head rcu ;
};
#line 194  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/neighbour.h"
struct neigh_table {
   int family ;
   unsigned int entry_size ;
   unsigned int key_len ;
   __be16 protocol ;
   __u32 (*hash)(void *, struct net_device *, __u32 *) ;
   bool (*key_eq)(struct neighbour *, void *) ;
   int (*constructor)(struct neighbour *) ;
   int (*pconstructor)(struct pneigh_entry *) ;
   void (*pdestructor)(struct pneigh_entry *) ;
   void (*proxy_redo)(struct sk_buff *) ;
   bool (*allow_add)(struct net_device *, struct netlink_ext_ack *) ;
   char *id ;
   struct neigh_parms parms ;
   struct list_head parms_list ;
   int gc_interval ;
   int gc_thresh1 ;
   int gc_thresh2 ;
   int gc_thresh3 ;
   unsigned long last_flush ;
   struct delayed_work gc_work ;
   struct timer_list proxy_timer ;
   struct sk_buff_head proxy_queue ;
   atomic_t entries ;
   atomic_t gc_entries ;
   struct list_head gc_list ;
   rwlock_t lock ;
   unsigned long last_rand ;
   struct neigh_statistics *stats ;
   struct neigh_hash_table *nht ;
   struct pneigh_entry **phash_buckets ;
};
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/dst.h"
struct lwtunnel_state;
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/dst.h"
struct dst_entry {
   struct net_device *dev ;
   struct dst_ops *ops ;
   unsigned long _metrics ;
   unsigned long expires ;
   struct xfrm_state *xfrm ;
   int (*input)(struct sk_buff *) ;
   int (*output)(struct net *, struct sock *, struct sk_buff *) ;
   unsigned short flags ;
   short obsolete ;
   unsigned short header_len ;
   unsigned short trailer_len ;
   atomic_t __refcnt ;
   int __use ;
   unsigned long lastuse ;
   struct lwtunnel_state *lwtstate ;
   struct callback_head callback_head ;
   short error ;
   short __pad ;
   __u32 tclassid ;
};
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fib_rules.h"
struct fib_rule_hdr {
   __u8 family ;
   __u8 dst_len ;
   __u8 src_len ;
   __u8 tos ;
   __u8 table ;
   __u8 res1 ;
   __u8 res2 ;
   __u8 action ;
   __u32 flags ;
};
#line 38  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fib_rules.h"
struct fib_rule_port_range {
   __u16 start ;
   __u16 end ;
};
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/fib_notifier.h"
struct fib_notifier_ops {
   int family ;
   struct list_head list ;
   unsigned int (*fib_seq_read)(struct net *) ;
   int (*fib_dump)(struct net *, struct notifier_block *, struct netlink_ext_ack *) ;
   struct module *owner ;
   struct callback_head rcu ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/fib_rules.h"
struct fib_kuid_range {
   kuid_t start ;
   kuid_t end ;
};
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/fib_rules.h"
struct fib_rule {
   struct list_head list ;
   int iifindex ;
   int oifindex ;
   u32 mark ;
   u32 mark_mask ;
   u32 flags ;
   u32 table ;
   u8 action ;
   u8 l3mdev ;
   u8 proto ;
   u8 ip_proto ;
   u32 target ;
   __be64 tun_id ;
   struct fib_rule *ctarget ;
   struct net *fr_net ;
   refcount_t refcnt ;
   u32 pref ;
   int suppress_ifgroup ;
   int suppress_prefixlen ;
   char iifname[16U] ;
   char oifname[16U] ;
   struct fib_kuid_range uid_range ;
   struct fib_rule_port_range sport_range ;
   struct fib_rule_port_range dport_range ;
   struct callback_head rcu ;
};
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/fib_rules.h"
struct fib_lookup_arg {
   void *lookup_ptr ;
   void *lookup_data ;
   void *result ;
   struct fib_rule *rule ;
   u32 table ;
   int flags ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/fib_rules.h"
struct fib_rules_ops {
   int family ;
   struct list_head list ;
   int rule_size ;
   int addr_size ;
   int unresolved_rules ;
   int nr_goto_rules ;
   unsigned int fib_rules_seq ;
   int (*action)(struct fib_rule *, struct flowi *, int , struct fib_lookup_arg *) ;
   bool (*suppress)(struct fib_rule *, struct fib_lookup_arg *) ;
   int (*match)(struct fib_rule *, struct flowi *, int ) ;
   int (*configure)(struct fib_rule *, struct sk_buff *, struct fib_rule_hdr *, struct nlattr **, struct netlink_ext_ack *) ;
   int (*delete)(struct fib_rule *) ;
   int (*compare)(struct fib_rule *, struct fib_rule_hdr *, struct nlattr **) ;
   int (*fill)(struct fib_rule *, struct sk_buff *, struct fib_rule_hdr *) ;
   size_t (*nlmsg_payload)(struct fib_rule *) ;
   void (*flush_cache)(struct fib_rules_ops *) ;
   int nlgroup ;
   struct nla_policy *policy ;
   struct list_head rules_list ;
   struct module *owner ;
   struct net *fro_net ;
   struct callback_head rcu ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/l3mdev.h"
struct l3mdev_ops {
   u32 (*l3mdev_fib_table)(struct net_device *) ;
   struct sk_buff *(*l3mdev_l3_rcv)(struct net_device *, struct sk_buff *, u16 ) ;
   struct sk_buff *(*l3mdev_l3_out)(struct net_device *, struct sock *, struct sk_buff *, u16 ) ;
   struct dst_entry *(*l3mdev_link_scope_lookup)(struct net_device *, struct flowi6 *) ;
};
#line 202  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/l3mdev.h"
struct __anonstruct_socket_lock_t_842 {
   spinlock_t slock ;
   int owned ;
   wait_queue_head_t wq ;
   struct lockdep_map dep_map ;
};
#line 202  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/l3mdev.h"
typedef struct __anonstruct_socket_lock_t_842 socket_lock_t;
#line 108  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
struct proto;
#line 109  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
typedef __u32 __portpair;
#line 114  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
typedef __u64 __addrpair;
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
struct __anonstruct_844 {
   __be32 skc_daddr ;
   __be32 skc_rcv_saddr ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_843 {
   __addrpair skc_addrpair ;
   struct __anonstruct_844 __anonCompField___anonunion_843_177 ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_845 {
   unsigned int skc_hash ;
   __u16 skc_u16hashes[2U] ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
struct __anonstruct_847 {
   __be16 skc_dport ;
   __u16 skc_num ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_846 {
   __portpair skc_portpair ;
   struct __anonstruct_847 __anonCompField___anonunion_846_180 ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_848 {
   struct hlist_node skc_bind_node ;
   struct hlist_node skc_portaddr_node ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_849 {
   unsigned long skc_flags ;
   struct sock *skc_listener ;
   struct inet_timewait_death_row *skc_tw_dr ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_850 {
   struct hlist_node skc_node ;
   struct hlist_nulls_node skc_nulls_node ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_851 {
   int skc_incoming_cpu ;
   u32 skc_rcv_wnd ;
   u32 skc_tw_rcv_nxt ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_852 {
   u32 skc_rxhash ;
   u32 skc_window_clamp ;
   u32 skc_tw_snd_nxt ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
struct sock_common {
   union __anonunion_843 __anonCompField_sock_common_178 ;
   union __anonunion_845 __anonCompField_sock_common_179 ;
   union __anonunion_846 __anonCompField_sock_common_181 ;
   unsigned short skc_family ;
   unsigned char skc_state ;
   unsigned char skc_reuse : 4 ;
   unsigned char skc_reuseport : 1 ;
   unsigned char skc_ipv6only : 1 ;
   unsigned char skc_net_refcnt : 1 ;
   int skc_bound_dev_if ;
   union __anonunion_848 __anonCompField_sock_common_182 ;
   struct proto *skc_prot ;
   possible_net_t skc_net ;
   struct in6_addr skc_v6_daddr ;
   struct in6_addr skc_v6_rcv_saddr ;
   atomic64_t skc_cookie ;
   union __anonunion_849 __anonCompField_sock_common_183 ;
   int skc_dontcopy_begin[0U] ;
   union __anonunion_850 __anonCompField_sock_common_184 ;
   unsigned short skc_tx_queue_mapping ;
   unsigned short skc_rx_queue_mapping ;
   union __anonunion_851 __anonCompField_sock_common_185 ;
   refcount_t skc_refcnt ;
   int skc_dontcopy_end[0U] ;
   union __anonunion_852 __anonCompField_sock_common_186 ;
};
#line 231 
struct bpf_sk_storage;
#line 323  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
struct __anonstruct_sk_backlog_853 {
   atomic_t rmem_alloc ;
   int len ;
   struct sk_buff *head ;
   struct sk_buff *tail ;
};
#line 323  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_854 {
   struct socket_wq *sk_wq ;
   struct socket_wq *sk_wq_raw ;
};
#line 323  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_855 {
   struct sk_buff *sk_send_head ;
   struct rb_root tcp_rtx_queue ;
};
#line 323  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
struct sock {
   struct sock_common __sk_common ;
   socket_lock_t sk_lock ;
   atomic_t sk_drops ;
   int sk_rcvlowat ;
   struct sk_buff_head sk_error_queue ;
   struct sk_buff *sk_rx_skb_cache ;
   struct sk_buff_head sk_receive_queue ;
   struct __anonstruct_sk_backlog_853 sk_backlog ;
   int sk_forward_alloc ;
   unsigned int sk_ll_usec ;
   unsigned int sk_napi_id ;
   int sk_rcvbuf ;
   struct sk_filter *sk_filter ;
   union __anonunion_854 __anonCompField_sock_187 ;
   struct xfrm_policy *sk_policy[2U] ;
   struct dst_entry *sk_rx_dst ;
   struct dst_entry *sk_dst_cache ;
   atomic_t sk_omem_alloc ;
   int sk_sndbuf ;
   int sk_wmem_queued ;
   refcount_t sk_wmem_alloc ;
   unsigned long sk_tsq_flags ;
   union __anonunion_855 __anonCompField_sock_188 ;
   struct sk_buff *sk_tx_skb_cache ;
   struct sk_buff_head sk_write_queue ;
   __s32 sk_peek_off ;
   int sk_write_pending ;
   __u32 sk_dst_pending_confirm ;
   u32 sk_pacing_status ;
   long sk_sndtimeo ;
   struct timer_list sk_timer ;
   __u32 sk_priority ;
   __u32 sk_mark ;
   unsigned long sk_pacing_rate ;
   unsigned long sk_max_pacing_rate ;
   struct page_frag sk_frag ;
   netdev_features_t sk_route_caps ;
   netdev_features_t sk_route_nocaps ;
   netdev_features_t sk_route_forced_caps ;
   int sk_gso_type ;
   unsigned int sk_gso_max_size ;
   gfp_t sk_allocation ;
   __u32 sk_txhash ;
   unsigned int __sk_flags_offset[0U] ;
   unsigned int sk_padding : 1 ;
   unsigned int sk_kern_sock : 1 ;
   unsigned int sk_no_check_tx : 1 ;
   unsigned int sk_no_check_rx : 1 ;
   unsigned int sk_userlocks : 4 ;
   unsigned int sk_protocol : 8 ;
   unsigned int sk_type : 16 ;
   u16 sk_gso_max_segs ;
   u8 sk_pacing_shift ;
   unsigned long sk_lingertime ;
   struct proto *sk_prot_creator ;
   rwlock_t sk_callback_lock ;
   int sk_err ;
   int sk_err_soft ;
   u32 sk_ack_backlog ;
   u32 sk_max_ack_backlog ;
   kuid_t sk_uid ;
   struct pid *sk_peer_pid ;
   struct cred *sk_peer_cred ;
   long sk_rcvtimeo ;
   ktime_t sk_stamp ;
   u16 sk_tsflags ;
   u8 sk_shutdown ;
   u32 sk_tskey ;
   atomic_t sk_zckey ;
   u8 sk_clockid ;
   u8 sk_txtime_deadline_mode : 1 ;
   u8 sk_txtime_report_errors : 1 ;
   u8 sk_txtime_unused : 6 ;
   struct socket *sk_socket ;
   void *sk_user_data ;
   void *sk_security ;
   struct sock_cgroup_data sk_cgrp_data ;
   struct mem_cgroup *sk_memcg ;
   void (*sk_state_change)(struct sock *) ;
   void (*sk_data_ready)(struct sock *) ;
   void (*sk_write_space)(struct sock *) ;
   void (*sk_error_report)(struct sock *) ;
   int (*sk_backlog_rcv)(struct sock *, struct sk_buff *) ;
   struct sk_buff *(*sk_validate_xmit_skb)(struct sock *, struct net_device *, struct sk_buff *) ;
   void (*sk_destruct)(struct sock *) ;
   struct sock_reuseport *sk_reuseport_cb ;
   struct bpf_sk_storage *sk_bpf_storage ;
   struct callback_head sk_rcu ;
};
#line 1048 
struct request_sock_ops;
#line 1049 
struct timewait_sock_ops;
#line 1050 
struct raw_hashinfo;
#line 1051 
struct smc_hashinfo;
#line 1071 
struct udp_table;
#line 1071  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_h_890 {
   struct inet_hashinfo *hashinfo ;
   struct udp_table *udp_table ;
   struct raw_hashinfo *raw_hash ;
   struct smc_hashinfo *smc_hash ;
};
#line 1071  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
struct proto {
   void (*close)(struct sock *, long ) ;
   int (*pre_connect)(struct sock *, struct sockaddr *, int ) ;
   int (*connect)(struct sock *, struct sockaddr *, int ) ;
   int (*disconnect)(struct sock *, int ) ;
   struct sock *(*accept)(struct sock *, int , int *, bool ) ;
   int (*ioctl)(struct sock *, int , unsigned long ) ;
   int (*init)(struct sock *) ;
   void (*destroy)(struct sock *) ;
   void (*shutdown)(struct sock *, int ) ;
   int (*setsockopt)(struct sock *, int , int , char *, unsigned int ) ;
   int (*getsockopt)(struct sock *, int , int , char *, int *) ;
   void (*keepalive)(struct sock *, int ) ;
   int (*compat_setsockopt)(struct sock *, int , int , char *, unsigned int ) ;
   int (*compat_getsockopt)(struct sock *, int , int , char *, int *) ;
   int (*compat_ioctl)(struct sock *, unsigned int , unsigned long ) ;
   int (*sendmsg)(struct sock *, struct msghdr *, size_t ) ;
   int (*recvmsg)(struct sock *, struct msghdr *, size_t , int , int , int *) ;
   int (*sendpage)(struct sock *, struct page *, int , size_t , int ) ;
   int (*bind)(struct sock *, struct sockaddr *, int ) ;
   int (*backlog_rcv)(struct sock *, struct sk_buff *) ;
   void (*release_cb)(struct sock *) ;
   int (*hash)(struct sock *) ;
   void (*unhash)(struct sock *) ;
   void (*rehash)(struct sock *) ;
   int (*get_port)(struct sock *, unsigned short ) ;
   unsigned int inuse_idx ;
   bool (*stream_memory_free)(struct sock *, int ) ;
   bool (*stream_memory_read)(struct sock *) ;
   void (*enter_memory_pressure)(struct sock *) ;
   void (*leave_memory_pressure)(struct sock *) ;
   atomic_long_t *memory_allocated ;
   struct percpu_counter *sockets_allocated ;
   unsigned long *memory_pressure ;
   long *sysctl_mem ;
   int *sysctl_wmem ;
   int *sysctl_rmem ;
   u32 sysctl_wmem_offset ;
   u32 sysctl_rmem_offset ;
   int max_header ;
   bool no_autobind ;
   struct kmem_cache *slab ;
   unsigned int obj_size ;
   slab_flags_t slab_flags ;
   unsigned int useroffset ;
   unsigned int usersize ;
   struct percpu_counter *orphan_count ;
   struct request_sock_ops *rsk_prot ;
   struct timewait_sock_ops *twsk_prot ;
   union __anonunion_h_890 h ;
   struct module *owner ;
   char name[32U] ;
   struct list_head node ;
   int (*diag_destroy)(struct sock *, int ) ;
} __attribute__((__designated_init__));
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/request_sock.h"
struct request_sock_ops {
   int family ;
   unsigned int obj_size ;
   struct kmem_cache *slab ;
   char *slab_name ;
   int (*rtx_syn_ack)(struct sock *, struct request_sock *) ;
   void (*send_ack)(struct sock *, struct sk_buff *, struct request_sock *) ;
   void (*send_reset)(struct sock *, struct sk_buff *) ;
   void (*destructor)(struct request_sock *) ;
   void (*syn_ack_timeout)(struct request_sock *) ;
};
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/request_sock.h"
struct request_sock {
   struct sock_common __req_common ;
   struct request_sock *dl_next ;
   u16 mss ;
   u8 num_retrans ;
   u8 cookie_ts : 1 ;
   u8 num_timeout : 7 ;
   u32 ts_recent ;
   struct timer_list rsk_timer ;
   struct request_sock_ops *rsk_ops ;
   struct sock *sk ;
   u32 *saved_syn ;
   u32 secid ;
   u32 peer_secid ;
};
#line 116  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ipv6.h"
struct ipv6hdr {
   __u8 priority : 4 ;
   __u8 version : 4 ;
   __u8 flow_lbl[3U] ;
   __be16 payload_len ;
   __u8 nexthdr ;
   __u8 hop_limit ;
   struct in6_addr saddr ;
   struct in6_addr daddr ;
};
#line 63  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ipv6.h"
struct ipv6_stable_secret {
   bool initialized ;
   struct in6_addr secret ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ipv6.h"
struct ipv6_devconf {
   __s32 forwarding ;
   __s32 hop_limit ;
   __s32 mtu6 ;
   __s32 accept_ra ;
   __s32 accept_redirects ;
   __s32 autoconf ;
   __s32 dad_transmits ;
   __s32 rtr_solicits ;
   __s32 rtr_solicit_interval ;
   __s32 rtr_solicit_max_interval ;
   __s32 rtr_solicit_delay ;
   __s32 force_mld_version ;
   __s32 mldv1_unsolicited_report_interval ;
   __s32 mldv2_unsolicited_report_interval ;
   __s32 use_tempaddr ;
   __s32 temp_valid_lft ;
   __s32 temp_prefered_lft ;
   __s32 regen_max_retry ;
   __s32 max_desync_factor ;
   __s32 max_addresses ;
   __s32 accept_ra_defrtr ;
   __s32 accept_ra_min_hop_limit ;
   __s32 accept_ra_pinfo ;
   __s32 ignore_routes_with_linkdown ;
   __s32 accept_ra_rtr_pref ;
   __s32 rtr_probe_interval ;
   __s32 accept_ra_rt_info_min_plen ;
   __s32 accept_ra_rt_info_max_plen ;
   __s32 proxy_ndp ;
   __s32 accept_source_route ;
   __s32 accept_ra_from_local ;
   __s32 optimistic_dad ;
   __s32 use_optimistic ;
   __s32 mc_forwarding ;
   __s32 disable_ipv6 ;
   __s32 drop_unicast_in_l2_multicast ;
   __s32 accept_dad ;
   __s32 force_tllao ;
   __s32 ndisc_notify ;
   __s32 suppress_frag_ndisc ;
   __s32 accept_ra_mtu ;
   __s32 drop_unsolicited_na ;
   struct ipv6_stable_secret stable_secret ;
   __s32 use_oif_addrs_only ;
   __s32 keep_addr_on_down ;
   __s32 seg6_enabled ;
   __s32 seg6_require_hmac ;
   __u32 enhanced_dad ;
   __u32 addr_gen_mode ;
   __s32 disable_policy ;
   __s32 ndisc_tclass ;
   struct ctl_table_header *sysctl_header ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/timewait_sock.h"
struct timewait_sock_ops {
   struct kmem_cache *twsk_slab ;
   char *twsk_slab_name ;
   unsigned int twsk_obj_size ;
   int (*twsk_unique)(struct sock *, struct sock *, void *) ;
   void (*twsk_destructor)(struct sock *) ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/tcp.h"
struct tcphdr {
   __be16 source ;
   __be16 dest ;
   __be32 seq ;
   __be32 ack_seq ;
   __u16 res1 : 4 ;
   __u16 doff : 4 ;
   __u16 fin : 1 ;
   __u16 syn : 1 ;
   __u16 rst : 1 ;
   __u16 psh : 1 ;
   __u16 ack : 1 ;
   __u16 urg : 1 ;
   __u16 ece : 1 ;
   __u16 cwr : 1 ;
   __be16 window ;
   __sum16 check ;
   __be16 urg_ptr ;
};
#line 99  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/if_inet6.h"
struct ip6_sf_list {
   struct ip6_sf_list *sf_next ;
   struct in6_addr sf_addr ;
   unsigned long sf_count[2U] ;
   unsigned char sf_gsresp ;
   unsigned char sf_oldin ;
   unsigned char sf_crcount ;
};
#line 114  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/if_inet6.h"
struct ifmcaddr6 {
   struct in6_addr mca_addr ;
   struct inet6_dev *idev ;
   struct ifmcaddr6 *next ;
   struct ip6_sf_list *mca_sources ;
   struct ip6_sf_list *mca_tomb ;
   unsigned int mca_sfmode ;
   unsigned char mca_crcount ;
   unsigned long mca_sfcount[2U] ;
   struct timer_list mca_timer ;
   unsigned int mca_flags ;
   int mca_users ;
   refcount_t mca_refcnt ;
   spinlock_t mca_lock ;
   unsigned long mca_cstamp ;
   unsigned long mca_tstamp ;
};
#line 140  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/if_inet6.h"
struct ifacaddr6 {
   struct in6_addr aca_addr ;
   struct fib6_info *aca_rt ;
   struct ifacaddr6 *aca_next ;
   struct hlist_node aca_addr_lst ;
   int aca_users ;
   refcount_t aca_refcnt ;
   unsigned long aca_cstamp ;
   unsigned long aca_tstamp ;
   struct callback_head rcu ;
};
#line 156  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/if_inet6.h"
struct ipv6_devstat {
   struct proc_dir_entry *proc_dir_entry ;
   struct ipstats_mib *ipv6 ;
   struct icmpv6_mib_device *icmpv6dev ;
   struct icmpv6msg_mib_device *icmpv6msgdev ;
};
#line 163  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/if_inet6.h"
struct inet6_dev {
   struct net_device *dev ;
   struct list_head addr_list ;
   struct ifmcaddr6 *mc_list ;
   struct ifmcaddr6 *mc_tomb ;
   spinlock_t mc_lock ;
   unsigned char mc_qrv ;
   unsigned char mc_gq_running ;
   unsigned char mc_ifc_count ;
   unsigned char mc_dad_count ;
   unsigned long mc_v1_seen ;
   unsigned long mc_qi ;
   unsigned long mc_qri ;
   unsigned long mc_maxdelay ;
   struct timer_list mc_gq_timer ;
   struct timer_list mc_ifc_timer ;
   struct timer_list mc_dad_timer ;
   struct ifacaddr6 *ac_list ;
   rwlock_t lock ;
   refcount_t refcnt ;
   __u32 if_flags ;
   int dead ;
   u32 desync_factor ;
   u8 rndid[8U] ;
   struct list_head tempaddr_list ;
   struct in6_addr token ;
   struct neigh_parms *nd_parms ;
   struct ipv6_devconf cnf ;
   struct ipv6_devstat stats ;
   struct timer_list rs_timer ;
   __s32 rs_interval ;
   __u8 rs_probes ;
   unsigned long tstamp ;
   struct callback_head rcu ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/if_arp.h"
struct prefix_info;
#line 104  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/ndisc.h"
struct nd_opt_hdr {
   __u8 nd_opt_type ;
   __u8 nd_opt_len ;
} __attribute__((__packed__));
#line 110  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/ndisc.h"
struct ndisc_options {
   struct nd_opt_hdr *nd_opt_array[15U] ;
   struct nd_opt_hdr *nd_opts_ri ;
   struct nd_opt_hdr *nd_opts_ri_end ;
   struct nd_opt_hdr *nd_useropts ;
   struct nd_opt_hdr *nd_useropts_end ;
   struct nd_opt_hdr *nd_802154_opt_array[3U] ;
};
#line 201  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/ndisc.h"
struct ndisc_ops {
   int (*is_useropt)(u8 ) ;
   int (*parse_options)(struct net_device *, struct nd_opt_hdr *, struct ndisc_options *) ;
   void (*update)(struct net_device *, struct neighbour *, u32 , u8 , struct ndisc_options *) ;
   int (*opt_addr_space)(struct net_device *, u8 , struct neighbour *, u8 *, u8 **) ;
   void (*fill_addr_option)(struct net_device *, struct sk_buff *, u8 , u8 *) ;
   void (*prefix_rcv_add_addr)(struct net *, struct net_device *, struct prefix_info *, struct inet6_dev *, struct in6_addr *, int , u32 , bool , bool , __u32 , u32 , bool ) ;
};
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inetpeer.h"
struct inet_peer_base {
   struct rb_root rb_root ;
   seqlock_t lock ;
   int total ;
};
#line 235  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/ip_fib.h"
struct fib_table {
   struct hlist_node tb_hlist ;
   u32 tb_id ;
   int tb_num_default ;
   struct callback_head rcu ;
   unsigned long *tb_data ;
   unsigned long __data[0U] ;
};
#line 230  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/route.h"
struct in_ifaddr;
#line 121  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/ip.h"
union __anonunion_987 {
   void (*destructor)(struct sock *) ;
   struct sock *saved_sk ;
};
#line 121  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/ip.h"
struct ip_ra_chain {
   struct ip_ra_chain *next ;
   struct sock *sk ;
   union __anonunion_987 __anonCompField_ip_ra_chain_196 ;
   struct callback_head rcu ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dim.h"
struct dim_cq_moder {
   u16 usec ;
   u16 pkts ;
   u16 comps ;
   u8 cq_period_mode ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dim.h"
struct dim_sample {
   ktime_t time ;
   u32 pkt_ctr ;
   u32 byte_ctr ;
   u16 event_ctr ;
   u32 comp_ctr ;
};
#line 77  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dim.h"
struct dim_stats {
   int ppms ;
   int bpms ;
   int epms ;
   int cpms ;
   int cpe_ratio ;
};
#line 102  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dim.h"
struct dim {
   u8 state ;
   struct dim_stats prev_stats ;
   struct dim_sample start_sample ;
   struct dim_sample measuring_sample ;
   struct work_struct work ;
   void *priv ;
   u8 profile_ix ;
   u8 mode ;
   u8 tune_state ;
   u8 steps_right ;
   u8 steps_left ;
   u8 tired ;
};
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/inetdevice.h"
struct ipv4_devconf {
   void *sysctl ;
   int data[32U] ;
   unsigned long state[1U] ;
};
#line 25 
struct ip_mc_list;
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/inetdevice.h"
struct in_device {
   struct net_device *dev ;
   refcount_t refcnt ;
   int dead ;
   struct in_ifaddr *ifa_list ;
   struct ip_mc_list *mc_list ;
   struct ip_mc_list **mc_hash ;
   int mc_count ;
   spinlock_t mc_tomb_lock ;
   struct ip_mc_list *mc_tomb ;
   unsigned long mr_v1_seen ;
   unsigned long mr_v2_seen ;
   unsigned long mr_maxdelay ;
   unsigned long mr_qi ;
   unsigned long mr_qri ;
   unsigned char mr_qrv ;
   unsigned char mr_gq_running ;
   unsigned char mr_ifc_count ;
   struct timer_list mr_gq_timer ;
   struct timer_list mr_ifc_timer ;
   struct neigh_parms *arp_parms ;
   struct ipv4_devconf cnf ;
   struct callback_head callback_head ;
};
#line 137  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/inetdevice.h"
struct in_ifaddr {
   struct hlist_node hash ;
   struct in_ifaddr *ifa_next ;
   struct in_device *ifa_dev ;
   struct callback_head callback_head ;
   __be32 ifa_local ;
   __be32 ifa_address ;
   __be32 ifa_mask ;
   __u32 ifa_rt_priority ;
   __be32 ifa_broadcast ;
   unsigned char ifa_scope ;
   unsigned char ifa_prefixlen ;
   __u32 ifa_flags ;
   char ifa_label[16U] ;
   __u32 ifa_valid_lft ;
   __u32 ifa_preferred_lft ;
   unsigned long ifa_cstamp ;
   unsigned long ifa_tstamp ;
};
#line 39  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_common_defs.h"
struct ena_common_mem_addr {
   u32 mem_addr_low ;
   u16 mem_addr_high ;
   u16 reserved16 ;
};
#line 86 
enum ena_admin_placement_policy_type {
    ENA_ADMIN_PLACEMENT_POLICY_HOST = 1,
    ENA_ADMIN_PLACEMENT_POLICY_DEV = 3
};
#line 127  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_admin_defs.h"
struct ena_admin_aq_common_desc {
   u16 command_id ;
   u8 opcode ;
   u8 flags ;
};
#line 150  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_admin_defs.h"
struct ena_admin_ctrl_buff_info {
   u32 length ;
   struct ena_common_mem_addr address ;
};
#line 167  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_admin_defs.h"
union __anonunion_u_998 {
   u32 inline_data_w1[3U] ;
   struct ena_admin_ctrl_buff_info control_buffer ;
};
#line 167  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_admin_defs.h"
struct ena_admin_aq_entry {
   struct ena_admin_aq_common_desc aq_common_descriptor ;
   union __anonunion_u_998 u ;
   u32 inline_data_w4[12U] ;
};
#line 179  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_admin_defs.h"
struct ena_admin_acq_common_desc {
   u16 command ;
   u8 status ;
   u8 flags ;
   u16 extended_status ;
   u16 sq_head_indx ;
};
#line 201  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_admin_defs.h"
struct ena_admin_acq_entry {
   struct ena_admin_acq_common_desc acq_common_descriptor ;
   u32 response_specific_data[14U] ;
};
#line 434  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_admin_defs.h"
struct ena_admin_device_attr_feature_desc {
   u32 impl_id ;
   u32 device_version ;
   u32 supported_features ;
   u32 reserved3 ;
   u32 phys_addr_width ;
   u32 virt_addr_width ;
   u8 mac_addr[6U] ;
   u8 reserved7[2U] ;
   u32 max_mtu ;
};
#line 457 
enum ena_admin_llq_header_location {
    ENA_ADMIN_INLINE_HEADER = 1,
    ENA_ADMIN_HEADER_RING = 2
};
#line 462 
enum ena_admin_llq_ring_entry_size {
    ENA_ADMIN_LIST_ENTRY_SIZE_128B = 1,
    ENA_ADMIN_LIST_ENTRY_SIZE_192B = 2,
    ENA_ADMIN_LIST_ENTRY_SIZE_256B = 4
};
#line 468 
enum ena_admin_llq_num_descs_before_header {
    ENA_ADMIN_LLQ_NUM_DESCS_BEFORE_HEADER_0 = 0,
    ENA_ADMIN_LLQ_NUM_DESCS_BEFORE_HEADER_1 = 1,
    ENA_ADMIN_LLQ_NUM_DESCS_BEFORE_HEADER_2 = 2,
    ENA_ADMIN_LLQ_NUM_DESCS_BEFORE_HEADER_4 = 4,
    ENA_ADMIN_LLQ_NUM_DESCS_BEFORE_HEADER_8 = 8
};
#line 476 
enum ena_admin_llq_stride_ctrl {
    ENA_ADMIN_SINGLE_DESC_PER_ENTRY = 1,
    ENA_ADMIN_MULTIPLE_DESCS_PER_ENTRY = 2
};
#line 490  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_admin_defs.h"
struct ena_admin_feature_llq_desc {
   u32 max_llq_num ;
   u32 max_llq_depth ;
   u16 header_location_ctrl_supported ;
   u16 header_location_ctrl_enabled ;
   u16 entry_size_ctrl_supported ;
   u16 entry_size_ctrl_enabled ;
   u16 desc_num_before_header_supported ;
   u16 desc_num_before_header_enabled ;
   u16 descriptors_stride_ctrl_supported ;
   u16 descriptors_stride_ctrl_enabled ;
   u32 max_tx_burst_size ;
};
#line 541  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_admin_defs.h"
struct ena_admin_queue_ext_feature_fields {
   u32 max_tx_sq_num ;
   u32 max_tx_cq_num ;
   u32 max_rx_sq_num ;
   u32 max_rx_cq_num ;
   u32 max_tx_sq_depth ;
   u32 max_tx_cq_depth ;
   u32 max_rx_sq_depth ;
   u32 max_rx_cq_depth ;
   u32 max_tx_header_size ;
   u16 max_per_packet_tx_descs ;
   u16 max_per_packet_rx_descs ;
};
#line 569  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_admin_defs.h"
struct ena_admin_queue_feature_desc {
   u32 max_sq_num ;
   u32 max_sq_depth ;
   u32 max_cq_num ;
   u32 max_cq_depth ;
   u32 max_legacy_llq_num ;
   u32 max_legacy_llq_depth ;
   u32 max_header_size ;
   u16 max_packet_tx_descs ;
   u16 max_packet_rx_descs ;
};
#line 634  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_admin_defs.h"
struct ena_admin_feature_aenq_desc {
   u32 supported_groups ;
   u32 enabled_groups ;
};
#line 642  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_admin_defs.h"
struct ena_admin_feature_offload_desc {
   u32 tx ;
   u32 rx_supported ;
   u32 rx_enabled ;
};
#line 666 
enum ena_admin_hash_functions {
    ENA_ADMIN_TOEPLITZ = 1,
    ENA_ADMIN_CRC32 = 2
};
#line 672  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_admin_defs.h"
struct ena_admin_feature_rss_flow_hash_control {
   u32 keys_num ;
   u32 reserved ;
   u32 key[10U] ;
};
#line 726  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_admin_defs.h"
struct ena_admin_proto_input {
   u16 fields ;
   u16 reserved2 ;
};
#line 733  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_admin_defs.h"
struct ena_admin_feature_rss_hash_control {
   struct ena_admin_proto_input supported_fields[16U] ;
   struct ena_admin_proto_input selected_fields[16U] ;
   struct ena_admin_proto_input reserved2[16U] ;
   struct ena_admin_proto_input reserved3[16U] ;
};
#line 771  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_admin_defs.h"
struct ena_admin_host_info {
   u32 os_type ;
   u8 os_dist_str[128U] ;
   u32 os_dist ;
   u8 kernel_ver_str[32U] ;
   u32 kernel_ver ;
   u32 driver_version ;
   u32 supported_network_features[2U] ;
   u16 ena_spec_version ;
   u16 bdf ;
   u16 num_cpus ;
   u16 reserved ;
   u32 driver_supported_features ;
};
#line 819  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_admin_defs.h"
struct ena_admin_rss_ind_table_entry {
   u16 cq_idx ;
   u16 reserved ;
};
#line 847  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_admin_defs.h"
struct ena_admin_ena_hw_hints {
   u16 mmio_read_timeout ;
   u16 driver_watchdog_timeout ;
   u16 missing_tx_completion_timeout ;
   u16 missed_tx_completion_count_threshold_to_reset ;
   u16 admin_completion_tx_timeout ;
   u16 netdev_wd_timeout ;
   u16 max_tx_sgl_size ;
   u16 max_rx_sgl_size ;
   u16 reserved[8U] ;
};
#line 881  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_admin_defs.h"
union __anonunion_1000 {
   struct ena_admin_queue_ext_feature_fields max_queue_ext ;
   u32 raw[10U] ;
};
#line 881  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_admin_defs.h"
struct ena_admin_queue_ext_feature_desc {
   u8 version ;
   u8 reserved1[3U] ;
   union __anonunion_1000 __anonCompField_ena_admin_queue_ext_feature_desc_197 ;
};
#line 967  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_admin_defs.h"
struct ena_admin_aenq_common_desc {
   u16 group ;
   u16 syndrom ;
   u8 flags ;
   u8 reserved1[3U] ;
   u32 timestamp_low ;
   u32 timestamp_high ;
};
#line 1000  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_admin_defs.h"
struct ena_admin_aenq_entry {
   struct ena_admin_aenq_common_desc aenq_common_desc ;
   u32 inline_data_w4[12U] ;
};
#line 1007  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_admin_defs.h"
struct ena_admin_aenq_link_change_desc {
   struct ena_admin_aenq_common_desc aenq_common_desc ;
   u32 flags ;
};
#line 1014  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_admin_defs.h"
struct ena_admin_aenq_keep_alive_desc {
   struct ena_admin_aenq_common_desc aenq_common_desc ;
   u32 rx_drops_low ;
   u32 rx_drops_high ;
};
#line 1022  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_admin_defs.h"
struct ena_admin_ena_mmio_req_read_less_resp {
   u16 req_id ;
   u16 reg_off ;
   u32 reg_val ;
};
#line 1030 
enum ena_eth_io_l3_proto_index {
    ENA_ETH_IO_L3_PROTO_UNKNOWN = 0,
    ENA_ETH_IO_L3_PROTO_IPV4 = 8,
    ENA_ETH_IO_L3_PROTO_IPV6 = 11,
    ENA_ETH_IO_L3_PROTO_FCOE = 21,
    ENA_ETH_IO_L3_PROTO_ROCE = 22
};
#line 1038 
enum ena_eth_io_l4_proto_index {
    ENA_ETH_IO_L4_PROTO_UNKNOWN = 0,
    ENA_ETH_IO_L4_PROTO_TCP = 12,
    ENA_ETH_IO_L4_PROTO_UDP = 13,
    ENA_ETH_IO_L4_PROTO_ROUTEABLE_ROCE = 23
};
#line 174  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_eth_io_defs.h"
struct ena_eth_io_tx_cdesc {
   u16 req_id ;
   u8 status ;
   u8 flags ;
   u16 sub_qid ;
   u16 sq_head_idx ;
};
#line 285  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_eth_io_defs.h"
struct ena_eth_io_intr_reg {
   u32 intr_control ;
};
#line 294  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_eth_io_defs.h"
struct ena_eth_io_numa_node_cfg_reg {
   u32 numa_cfg ;
};
#line 301 
enum ena_regs_reset_reason_types {
    ENA_REGS_RESET_NORMAL = 0,
    ENA_REGS_RESET_KEEP_ALIVE_TO = 1,
    ENA_REGS_RESET_ADMIN_TO = 2,
    ENA_REGS_RESET_MISS_TX_CMPL = 3,
    ENA_REGS_RESET_INV_RX_REQ_ID = 4,
    ENA_REGS_RESET_INV_TX_REQ_ID = 5,
    ENA_REGS_RESET_TOO_MANY_RX_DESCS = 6,
    ENA_REGS_RESET_INIT_ERR = 7,
    ENA_REGS_RESET_DRIVER_INVALID_STATE = 8,
    ENA_REGS_RESET_OS_TRIGGER = 9,
    ENA_REGS_RESET_OS_NETDEV_WD = 10,
    ENA_REGS_RESET_SHUTDOWN = 11,
    ENA_REGS_RESET_USER_TRIGGER = 12,
    ENA_REGS_RESET_GENERIC = 13,
    ENA_REGS_RESET_MISS_INTERRUPT = 14
};
#line 83  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_com.h"
struct ena_llq_configurations {
   enum ena_admin_llq_header_location llq_header_location ;
   enum ena_admin_llq_ring_entry_size llq_ring_entry_size ;
   enum ena_admin_llq_stride_ctrl llq_stride_ctrl ;
   enum ena_admin_llq_num_descs_before_header llq_num_decs_before_header ;
   u16 llq_ring_entry_size_value ;
};
#line 90 
enum queue_direction {
    ENA_COM_IO_QUEUE_DIRECTION_TX = 0,
    ENA_COM_IO_QUEUE_DIRECTION_RX = 1
};
#line 96  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_com.h"
struct ena_com_buf {
   dma_addr_t paddr ;
   u16 len ;
};
#line 101  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_com.h"
struct ena_com_rx_buf_info {
   u16 len ;
   u16 req_id ;
};
#line 106  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_com.h"
struct ena_com_io_desc_addr {
   u8 *pbuf_dev_addr ;
   u8 *virt_addr ;
   dma_addr_t phys_addr ;
};
#line 112  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_com.h"
struct ena_com_tx_meta {
   u16 mss ;
   u16 l3_hdr_len ;
   u16 l3_hdr_offset ;
   u16 l4_hdr_len ;
};
#line 119  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_com.h"
struct ena_com_llq_info {
   u16 header_location_ctrl ;
   u16 desc_stride_ctrl ;
   u16 desc_list_entry_size_ctrl ;
   u16 desc_list_entry_size ;
   u16 descs_num_before_header ;
   u16 descs_per_entry ;
   u16 max_entries_in_tx_burst ;
};
#line 129  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_com.h"
struct ena_com_io_cq {
   struct ena_com_io_desc_addr cdesc_addr ;
   u32 *unmask_reg ;
   u32 *cq_head_db_reg ;
   u32 *numa_node_cfg_reg ;
   u32 msix_vector ;
   enum queue_direction direction ;
   u16 cur_rx_pkt_cdesc_count ;
   u16 cur_rx_pkt_cdesc_start_idx ;
   u16 q_depth ;
   u16 qid ;
   u16 idx ;
   u16 head ;
   u16 last_head_update ;
   u8 phase ;
   u8 cdesc_entry_size_in_bytes ;
} __attribute__((__aligned__(64)));
#line 166  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_com.h"
struct ena_com_io_bounce_buffer_control {
   u8 *base_buffer ;
   u16 next_to_use ;
   u16 buffer_size ;
   u16 buffers_num ;
};
#line 174  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_com.h"
struct ena_com_llq_pkt_ctrl {
   u8 *curr_bounce_buf ;
   u16 idx ;
   u16 descs_left_in_line ;
};
#line 180  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_com.h"
struct ena_com_io_sq {
   struct ena_com_io_desc_addr desc_addr ;
   u32 *db_addr ;
   u8 *header_addr ;
   enum queue_direction direction ;
   enum ena_admin_placement_policy_type mem_queue_type ;
   u32 msix_vector ;
   struct ena_com_tx_meta cached_tx_meta ;
   struct ena_com_llq_info llq_info ;
   struct ena_com_llq_pkt_ctrl llq_buf_ctrl ;
   struct ena_com_io_bounce_buffer_control bounce_buf_ctrl ;
   u16 q_depth ;
   u16 qid ;
   u16 idx ;
   u16 tail ;
   u16 next_to_comp ;
   u16 llq_last_copy_tail ;
   u32 tx_max_header_size ;
   u8 phase ;
   u8 desc_entry_size ;
   u8 dma_addr_bits ;
   u16 entries_in_tx_burst_left ;
} __attribute__((__aligned__(64)));
#line 209  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_com.h"
struct ena_com_admin_cq {
   struct ena_admin_acq_entry *entries ;
   dma_addr_t dma_addr ;
   u16 head ;
   u8 phase ;
};
#line 217  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_com.h"
struct ena_com_admin_sq {
   struct ena_admin_aq_entry *entries ;
   dma_addr_t dma_addr ;
   u32 *db_addr ;
   u16 head ;
   u16 tail ;
   u8 phase ;
};
#line 229  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_com.h"
struct ena_com_stats_admin {
   u32 aborted_cmd ;
   u32 submitted_cmd ;
   u32 completed_cmd ;
   u32 out_of_space ;
   u32 no_completion ;
};
#line 237  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_com.h"
struct ena_com_admin_queue {
   void *q_dmadev ;
   spinlock_t q_lock ;
   struct ena_comp_ctx *comp_ctx ;
   u32 completion_timeout ;
   u16 q_depth ;
   struct ena_com_admin_cq cq ;
   struct ena_com_admin_sq sq ;
   bool polling ;
   bool auto_polling ;
   u16 curr_cmd_id ;
   bool running_state ;
   atomic_t outstanding_cmds ;
   struct ena_com_stats_admin stats ;
};
#line 265 
struct ena_aenq_handlers;
#line 268  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_com.h"
struct ena_com_aenq {
   u16 head ;
   u8 phase ;
   struct ena_admin_aenq_entry *entries ;
   dma_addr_t dma_addr ;
   u16 q_depth ;
   struct ena_aenq_handlers *aenq_handlers ;
};
#line 277  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_com.h"
struct ena_com_mmio_read {
   struct ena_admin_ena_mmio_req_read_less_resp *read_resp ;
   dma_addr_t read_resp_dma_addr ;
   u32 reg_read_to ;
   u16 seq_num ;
   bool readless_supported ;
   spinlock_t lock ;
};
#line 287  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_com.h"
struct ena_rss {
   u16 *host_rss_ind_tbl ;
   struct ena_admin_rss_ind_table_entry *rss_ind_tbl ;
   dma_addr_t rss_ind_tbl_dma_addr ;
   u16 tbl_log_size ;
   enum ena_admin_hash_functions hash_func ;
   struct ena_admin_feature_rss_flow_hash_control *hash_key ;
   dma_addr_t hash_key_dma_addr ;
   u32 hash_init_val ;
   struct ena_admin_feature_rss_hash_control *hash_ctrl ;
   dma_addr_t hash_ctrl_dma_addr ;
};
#line 306  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_com.h"
struct ena_host_attribute {
   u8 *debug_area_virt_addr ;
   dma_addr_t debug_area_dma_addr ;
   u32 debug_area_size ;
   struct ena_admin_host_info *host_info ;
   dma_addr_t host_info_dma_addr ;
};
#line 318 
struct ena_intr_moder_entry;
#line 318  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_com.h"
struct ena_com_dev {
   struct ena_com_admin_queue admin_queue ;
   struct ena_com_aenq aenq ;
   struct ena_com_io_cq io_cq_queues[256U] ;
   struct ena_com_io_sq io_sq_queues[256U] ;
   u8 *reg_bar ;
   void *mem_bar ;
   void *dmadev ;
   enum ena_admin_placement_policy_type tx_mem_queue_type ;
   u32 tx_max_header_size ;
   u16 stats_func ;
   u16 stats_queue ;
   struct ena_com_mmio_read mmio_read ;
   struct ena_rss rss ;
   u32 supported_features ;
   u32 dma_addr_bits ;
   struct ena_host_attribute host_attr ;
   bool adaptive_coalescing ;
   u16 intr_delay_resolution ;
   u32 intr_moder_tx_interval ;
   u32 intr_moder_rx_interval ;
   struct ena_intr_moder_entry *intr_moder_tbl ;
   struct ena_com_llq_info llq_info ;
};
#line 353  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_com.h"
struct ena_com_dev_get_features_ctx {
   struct ena_admin_queue_feature_desc max_queues ;
   struct ena_admin_queue_ext_feature_desc max_queue_ext ;
   struct ena_admin_device_attr_feature_desc dev_attr ;
   struct ena_admin_feature_aenq_desc aenq ;
   struct ena_admin_feature_offload_desc offload ;
   struct ena_admin_ena_hw_hints hw_hints ;
   struct ena_admin_feature_llq_desc llq ;
};
#line 363  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_com.h"
struct ena_com_create_io_ctx {
   enum ena_admin_placement_policy_type mem_queue_type ;
   enum queue_direction direction ;
   int numa_node ;
   u32 msix_vector ;
   u16 queue_size ;
   u16 qid ;
};
#line 371  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_com.h"
typedef void (*ena_aenq_handler)(void *, struct ena_admin_aenq_entry *);
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_com.h"
struct ena_aenq_handlers {
   ena_aenq_handler handlers[256U] ;
   void (*unimplemented_handler)(void *, struct ena_admin_aenq_entry *) ;
};
#line 41  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_eth_com.h"
struct ena_com_tx_ctx {
   struct ena_com_tx_meta ena_meta ;
   struct ena_com_buf *ena_bufs ;
   void *push_header ;
   enum ena_eth_io_l3_proto_index l3_proto ;
   enum ena_eth_io_l4_proto_index l4_proto ;
   u16 num_bufs ;
   u16 req_id ;
   u16 header_len ;
   u8 meta_valid ;
   u8 tso_enable ;
   u8 l3_csum_enable ;
   u8 l4_csum_enable ;
   u8 l4_csum_partial ;
   u8 df ;
};
#line 64  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_eth_com.h"
struct ena_com_rx_ctx {
   struct ena_com_rx_buf_info *ena_bufs ;
   enum ena_eth_io_l3_proto_index l3_proto ;
   enum ena_eth_io_l4_proto_index l4_proto ;
   bool l3_csum_err ;
   bool l4_csum_err ;
   u8 l4_csum_checked ;
   bool frag ;
   u32 hash ;
   u16 descs ;
   int max_bufs ;
};
#line 260  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_eth_com.h"
union __anonunion___u_1005 {
   u8 __val ;
   char __c[1U] ;
};
#line 266  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_eth_com.h"
union __anonunion___u_1007 {
   u16 __val ;
   char __c[1U] ;
};
#line 145  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_netdev.h"
struct ena_irq {
   irqreturn_t (*handler)(int , void *) ;
   void *data ;
   int cpu ;
   u32 vector ;
   cpumask_t affinity_hint_mask ;
   char name[40U] ;
};
#line 154 
struct ena_ring;
#line 154  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_netdev.h"
struct ena_napi {
   struct napi_struct napi ;
   struct ena_ring *tx_ring ;
   struct ena_ring *rx_ring ;
   u32 qid ;
   struct dim dim ;
};
#line 162  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_netdev.h"
struct ena_calc_queue_size_ctx {
   struct ena_com_dev_get_features_ctx *get_feat_ctx ;
   struct ena_com_dev *ena_dev ;
   struct pci_dev *pdev ;
   u32 tx_queue_size ;
   u32 rx_queue_size ;
   u32 max_tx_queue_size ;
   u32 max_rx_queue_size ;
   u16 max_tx_sgl_size ;
   u16 max_rx_sgl_size ;
};
#line 174  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_netdev.h"
struct ena_tx_buffer {
   struct sk_buff *skb ;
   u32 tx_descs ;
   u32 num_of_bufs ;
   u8 map_linear_data ;
   u32 print_once ;
   unsigned long last_jiffies ;
   struct ena_com_buf bufs[19U] ;
} __attribute__((__aligned__(64)));
#line 201  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_netdev.h"
struct ena_rx_buffer {
   struct sk_buff *skb ;
   struct page *page ;
   u32 page_offset ;
   struct ena_com_buf ena_buf ;
} __attribute__((__aligned__(64)));
#line 208  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_netdev.h"
struct ena_stats_tx {
   u64 cnt ;
   u64 bytes ;
   u64 queue_stop ;
   u64 prepare_ctx_err ;
   u64 queue_wakeup ;
   u64 dma_mapping_err ;
   u64 linearize ;
   u64 linearize_failed ;
   u64 napi_comp ;
   u64 tx_poll ;
   u64 doorbells ;
   u64 bad_req_id ;
   u64 llq_buffer_copy ;
   u64 missed_tx ;
};
#line 225  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_netdev.h"
struct ena_stats_rx {
   u64 cnt ;
   u64 bytes ;
   u64 rx_copybreak_pkt ;
   u64 csum_good ;
   u64 refil_partial ;
   u64 bad_csum ;
   u64 page_alloc_fail ;
   u64 skb_alloc_fail ;
   u64 dma_mapping_err ;
   u64 bad_desc_num ;
   u64 bad_req_id ;
   u64 empty_rx_ring ;
   u64 csum_unchecked ;
};
#line 241  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_netdev.h"
union __anonunion_1008 {
   struct ena_tx_buffer *tx_buffer_info ;
   struct ena_rx_buffer *rx_buffer_info ;
};
#line 241 
struct ena_adapter;
#line 241  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_netdev.h"
union __anonunion_1009 {
   struct ena_stats_tx tx_stats ;
   struct ena_stats_rx rx_stats ;
};
#line 241  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_netdev.h"
struct ena_ring {
   u16 *free_ids ;
   union __anonunion_1008 __anonCompField_ena_ring_198 ;
   struct device *dev ;
   struct pci_dev *pdev ;
   struct napi_struct *napi ;
   struct net_device *netdev ;
   struct ena_com_dev *ena_dev ;
   struct ena_adapter *adapter ;
   struct ena_com_io_cq *ena_com_io_cq ;
   struct ena_com_io_sq *ena_com_io_sq ;
   u16 next_to_use ;
   u16 next_to_clean ;
   u16 rx_copybreak ;
   u16 qid ;
   u16 mtu ;
   u16 sgl_size ;
   u8 tx_max_header_size ;
   bool first_interrupt ;
   u16 no_interrupt_event_cnt ;
   int cpu ;
   int ring_size ;
   enum ena_admin_placement_policy_type tx_mem_queue_type ;
   struct ena_com_rx_buf_info ena_bufs[19U] ;
   u32 smoothed_interval ;
   u32 per_napi_packets ;
   u16 non_empty_napi_events ;
   struct u64_stats_sync syncp ;
   union __anonunion_1009 __anonCompField_ena_ring_199 ;
   u8 *push_buf_intermediate_buf ;
   int empty_rx_queue ;
} __attribute__((__aligned__(64)));
#line 296  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_netdev.h"
struct ena_stats_dev {
   u64 tx_timeout ;
   u64 suspend ;
   u64 resume ;
   u64 wd_expired ;
   u64 interface_up ;
   u64 interface_down ;
   u64 admin_q_pause ;
   u64 rx_drops ;
};
#line 317  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_netdev.h"
struct ena_adapter {
   struct ena_com_dev *ena_dev ;
   struct net_device *netdev ;
   struct pci_dev *pdev ;
   u32 rx_copybreak ;
   u32 max_mtu ;
   u32 num_io_queues ;
   u32 max_num_io_queues ;
   int msix_vecs ;
   u32 missing_tx_completion_threshold ;
   u32 requested_tx_ring_size ;
   u32 requested_rx_ring_size ;
   u32 max_tx_ring_size ;
   u32 max_rx_ring_size ;
   u32 msg_enable ;
   u16 max_tx_sgl_size ;
   u16 max_rx_sgl_size ;
   u8 mac_addr[6U] ;
   unsigned long keep_alive_timeout ;
   unsigned long missing_tx_completion_to ;
   char name[20U] ;
   unsigned long flags ;
   struct ena_ring tx_ring[128U] ;
   struct ena_ring rx_ring[128U] ;
   struct ena_napi ena_napi[128U] ;
   struct ena_irq irq_tbl[129U] ;
   struct work_struct reset_task ;
   struct timer_list timer_service ;
   bool wd_state ;
   bool dev_up_before_reset ;
   unsigned long last_keep_alive_jiffies ;
   struct u64_stats_sync syncp ;
   struct ena_stats_dev dev_stats ;
   u32 last_monitored_tx_qid ;
   enum ena_regs_reset_reason_types reset_reason ;
};
#line 50  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_eth_io_defs.h"
struct ena_eth_io_tx_desc {
   u32 len_ctrl ;
   u32 meta_ctrl ;
   u32 buff_addr_lo ;
   u32 buff_addr_hi_hdr_sz ;
};
#line 126  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_eth_io_defs.h"
struct ena_eth_io_tx_meta_desc {
   u32 len_ctrl ;
   u32 word1 ;
   u32 word2 ;
   u32 reserved ;
};
#line 191  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_eth_io_defs.h"
struct ena_eth_io_rx_desc {
   u16 length ;
   u8 reserved2 ;
   u8 ctrl ;
   u16 req_id ;
   u16 reserved6 ;
   u32 buff_addr_lo ;
   u16 buff_addr_hi ;
   u16 reserved16_w3 ;
};
#line 225  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_eth_io_defs.h"
struct ena_eth_io_rx_cdesc_base {
   u32 status ;
   u16 length ;
   u16 req_id ;
   u32 hash ;
   u16 sub_qid ;
   u16 reserved ;
};
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_eth_com.c"
union __anonunion___u_1462 {
   u32 __val ;
   char __c[1U] ;
};
#line 265  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_eth_com.c"
union __anonunion___u_1464 {
   u32 __val ;
   char __c[1U] ;
};
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 613  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_admin_defs.h"
struct ena_admin_feature_intr_moder_desc {
   u16 intr_delay_resolution ;
   u16 reserved ;
};
#line 620  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_admin_defs.h"
struct ena_admin_get_feature_link_desc {
   u32 speed ;
   u32 supported ;
   u32 flags ;
};
#line 680  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_admin_defs.h"
struct ena_admin_feature_rss_flow_hash_function {
   u32 supported_func ;
   u32 selected_func ;
   u32 init_val ;
};
#line 692 
enum ena_admin_flow_hash_proto {
    ENA_ADMIN_RSS_TCP4 = 0,
    ENA_ADMIN_RSS_UDP4 = 1,
    ENA_ADMIN_RSS_TCP6 = 2,
    ENA_ADMIN_RSS_UDP6 = 3,
    ENA_ADMIN_RSS_IP4 = 4,
    ENA_ADMIN_RSS_IP6 = 5,
    ENA_ADMIN_RSS_IP4_FRAG = 6,
    ENA_ADMIN_RSS_NOT_IP = 7,
    ENA_ADMIN_RSS_TCP6_EX = 8,
    ENA_ADMIN_RSS_IP6_EX = 9,
    ENA_ADMIN_RSS_PROTO_NUM = 16
};
#line 743  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_admin_defs.h"
struct ena_admin_feature_rss_flow_hash_input {
   u16 supported_input_sort ;
   u16 enabled_input_sort ;
};
#line 825  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_admin_defs.h"
struct ena_admin_feature_rss_ind_table {
   u16 min_size ;
   u16 max_size ;
   u16 size ;
   u16 reserved ;
   u32 inline_index ;
   struct ena_admin_rss_ind_table_entry inline_entry ;
};
#line 894  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_admin_defs.h"
union __anonunion_u_2173 {
   u32 raw[14U] ;
   struct ena_admin_device_attr_feature_desc dev_attr ;
   struct ena_admin_feature_llq_desc llq ;
   struct ena_admin_queue_feature_desc max_queue ;
   struct ena_admin_queue_ext_feature_desc max_queue_ext ;
   struct ena_admin_feature_aenq_desc aenq ;
   struct ena_admin_get_feature_link_desc link ;
   struct ena_admin_feature_offload_desc offload ;
   struct ena_admin_feature_rss_flow_hash_function flow_hash_func ;
   struct ena_admin_feature_rss_flow_hash_input flow_hash_input ;
   struct ena_admin_feature_rss_ind_table ind_table ;
   struct ena_admin_feature_intr_moder_desc intr_moderation ;
   struct ena_admin_ena_hw_hints hw_hints ;
};
#line 894  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_admin_defs.h"
struct ena_admin_get_feat_resp {
   struct ena_admin_acq_common_desc acq_common_desc ;
   union __anonunion_u_2173 u ;
};
#line 37  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_ethtool.c"
struct ena_stats {
   char name[32U] ;
   int stat_offset ;
};
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/atomic.h"
union __anonunion___u_2260 {
   int __val ;
   char __c[1U] ;
};
#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/atomic.h"
union __anonunion___u_2262 {
   int __val ;
   char __c[1U] ;
};
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_common_defs.h"
enum ena_admin_aq_feature_id {
    ENA_ADMIN_DEVICE_ATTRIBUTES = 1,
    ENA_ADMIN_MAX_QUEUES_NUM = 2,
    ENA_ADMIN_HW_HINTS = 3,
    ENA_ADMIN_LLQ = 4,
    ENA_ADMIN_MAX_QUEUES_EXT = 7,
    ENA_ADMIN_RSS_HASH_FUNCTION = 10,
    ENA_ADMIN_STATELESS_OFFLOAD_CONFIG = 11,
    ENA_ADMIN_RSS_REDIRECTION_TABLE_CONFIG = 12,
    ENA_ADMIN_MTU = 14,
    ENA_ADMIN_RSS_HASH_INPUT = 18,
    ENA_ADMIN_INTERRUPT_MODERATION = 20,
    ENA_ADMIN_AENQ_CONFIG = 26,
    ENA_ADMIN_LINK_CONFIG = 27,
    ENA_ADMIN_HOST_ATTR_CONFIG = 28,
    ENA_ADMIN_FEATURES_OPCODE_NUM = 32
};
#line 111 
enum ena_admin_get_stats_type {
    ENA_ADMIN_GET_STATS_TYPE_BASIC = 0,
    ENA_ADMIN_GET_STATS_TYPE_EXTENDED = 1
};
#line 156  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_admin_defs.h"
struct ena_admin_sq {
   u16 sq_idx ;
   u8 sq_identity ;
   u8 reserved1 ;
};
#line 207  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_admin_defs.h"
struct ena_admin_aq_create_sq_cmd {
   struct ena_admin_aq_common_desc aq_common_descriptor ;
   u8 sq_identity ;
   u8 reserved8_w1 ;
   u8 sq_caps_2 ;
   u8 sq_caps_3 ;
   u16 cq_idx ;
   u16 sq_depth ;
   struct ena_common_mem_addr sq_ba ;
   struct ena_common_mem_addr sq_head_writeback ;
   u32 reserved0_w7 ;
   u32 reserved0_w8 ;
};
#line 270  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_admin_defs.h"
struct ena_admin_acq_create_sq_resp_desc {
   struct ena_admin_acq_common_desc acq_common_desc ;
   u16 sq_idx ;
   u16 reserved ;
   u32 sq_doorbell_offset ;
   u32 llq_descriptors_offset ;
   u32 llq_headers_offset ;
};
#line 291  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_admin_defs.h"
struct ena_admin_aq_destroy_sq_cmd {
   struct ena_admin_aq_common_desc aq_common_descriptor ;
   struct ena_admin_sq sq ;
};
#line 297  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_admin_defs.h"
struct ena_admin_acq_destroy_sq_resp_desc {
   struct ena_admin_acq_common_desc acq_common_desc ;
};
#line 301  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_admin_defs.h"
struct ena_admin_aq_create_cq_cmd {
   struct ena_admin_aq_common_desc aq_common_descriptor ;
   u8 cq_caps_1 ;
   u8 cq_caps_2 ;
   u16 cq_depth ;
   u32 msix_vector ;
   struct ena_common_mem_addr cq_ba ;
};
#line 329  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_admin_defs.h"
struct ena_admin_acq_create_cq_resp_desc {
   struct ena_admin_acq_common_desc acq_common_desc ;
   u16 cq_idx ;
   u16 cq_actual_depth ;
   u32 numa_node_register_offset ;
   u32 cq_head_db_register_offset ;
   u32 cq_interrupt_unmask_register_offset ;
};
#line 344  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_admin_defs.h"
struct ena_admin_aq_destroy_cq_cmd {
   struct ena_admin_aq_common_desc aq_common_descriptor ;
   u16 cq_idx ;
   u16 reserved1 ;
};
#line 352  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_admin_defs.h"
struct ena_admin_acq_destroy_cq_resp_desc {
   struct ena_admin_acq_common_desc acq_common_desc ;
};
#line 359  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_admin_defs.h"
union __anonunion_u_2636 {
   u32 inline_data_w1[3U] ;
   struct ena_admin_ctrl_buff_info control_buffer ;
};
#line 359  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_admin_defs.h"
struct ena_admin_aq_get_stats_cmd {
   struct ena_admin_aq_common_desc aq_common_descriptor ;
   union __anonunion_u_2636 u ;
   u8 type ;
   u8 scope ;
   u16 reserved3 ;
   u16 queue_idx ;
   u16 device_id ;
};
#line 387  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_admin_defs.h"
struct ena_admin_basic_stats {
   u32 tx_bytes_low ;
   u32 tx_bytes_high ;
   u32 tx_pkts_low ;
   u32 tx_pkts_high ;
   u32 rx_bytes_low ;
   u32 rx_bytes_high ;
   u32 rx_pkts_low ;
   u32 rx_pkts_high ;
   u32 rx_drops_low ;
   u32 rx_drops_high ;
};
#line 409  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_admin_defs.h"
struct ena_admin_acq_get_stats_resp {
   struct ena_admin_acq_common_desc acq_common_desc ;
   struct ena_admin_basic_stats basic_stats ;
};
#line 415  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_admin_defs.h"
struct ena_admin_get_set_feature_common_desc {
   u8 flags ;
   u8 feature_id ;
   u8 feature_version ;
   u8 reserved8 ;
};
#line 593  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_admin_defs.h"
struct ena_admin_set_feature_mtu_desc {
   u32 mtu ;
};
#line 598  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_admin_defs.h"
struct ena_admin_set_feature_host_attr_desc {
   struct ena_common_mem_addr os_info_ba ;
   struct ena_common_mem_addr debug_ba ;
   u32 debug_area_size ;
};
#line 871  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_admin_defs.h"
struct ena_admin_get_feat_cmd {
   struct ena_admin_aq_common_desc aq_common_descriptor ;
   struct ena_admin_ctrl_buff_info control_buffer ;
   struct ena_admin_get_set_feature_common_desc feat_common ;
   u32 raw[11U] ;
};
#line 926  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_admin_defs.h"
union __anonunion_u_2639 {
   u32 raw[11U] ;
   struct ena_admin_set_feature_mtu_desc mtu ;
   struct ena_admin_set_feature_host_attr_desc host_attr ;
   struct ena_admin_feature_aenq_desc aenq ;
   struct ena_admin_feature_rss_flow_hash_function flow_hash_func ;
   struct ena_admin_feature_rss_flow_hash_input flow_hash_input ;
   struct ena_admin_feature_rss_ind_table ind_table ;
   struct ena_admin_feature_llq_desc llq ;
};
#line 926  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_admin_defs.h"
struct ena_admin_set_feat_cmd {
   struct ena_admin_aq_common_desc aq_common_descriptor ;
   struct ena_admin_ctrl_buff_info control_buffer ;
   struct ena_admin_get_set_feature_common_desc feat_common ;
   union __anonunion_u_2639 u ;
};
#line 959  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_admin_defs.h"
union __anonunion_u_2640 {
   u32 raw[14U] ;
};
#line 959  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_admin_defs.h"
struct ena_admin_set_feat_resp {
   struct ena_admin_acq_common_desc acq_common_desc ;
   union __anonunion_u_2640 u ;
};
#line 994  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_com.h"
enum ena_cmd_status {
    ENA_CMD_SUBMITTED = 0,
    ENA_CMD_COMPLETED = 1,
    ENA_CMD_ABORTED = 2
};
#line 78  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_com.c"
struct ena_comp_ctx {
   struct completion wait_event ;
   struct ena_admin_acq_entry *user_cqe ;
   u32 comp_size ;
   enum ena_cmd_status status ;
   u8 comp_status ;
   u8 cmd_opcode ;
   bool occupied ;
};
#line 89  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_com.c"
struct ena_com_stats_ctx {
   struct ena_admin_aq_get_stats_cmd get_cmd ;
   struct ena_admin_acq_get_stats_resp get_resp ;
};
#line 492  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_com.c"
union __anonunion___u_2642 {
   u8 __val ;
   char __c[1U] ;
};
#line 827  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_com.c"
union __anonunion___u_2644 {
   u16 __val ;
   char __c[1U] ;
};
#line 2014  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_com.c"
union __anonunion___u_2646 {
   u8 __val ;
   char __c[1U] ;
};
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 197 
enum hrtimer_restart;
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/dd.c"
struct device_private {
   void *driver_data ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/firmware.h"
struct firmware {
   size_t size ;
   u8 *data ;
   struct page **pages ;
   void *priv ;
};
#line 164  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef unsigned long irq_hw_number_t;
#line 303  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ioport.h"
struct irq_data;
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 244  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/idr.h"
struct ida {
   struct xarray xa ;
};
#line 439  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/property.h"
typedef u32 phandle;
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/of.h"
struct property {
   char *name ;
   int length ;
   void *value ;
   struct property *next ;
   unsigned long _flags ;
   struct bin_attribute attr ;
};
#line 51  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/of.h"
struct device_node {
   char *name ;
   phandle phandle ;
   char *full_name ;
   struct fwnode_handle fwnode ;
   struct property *properties ;
   struct property *deadprops ;
   struct device_node *parent ;
   struct device_node *child ;
   struct device_node *sibling ;
   struct kobject kobj ;
   unsigned long _flags ;
   void *data ;
};
#line 63  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/irqdomain.h"
struct irq_fwspec {
   struct fwnode_handle *fwnode ;
   int param_count ;
   u32 param[16U] ;
};
#line 68 
enum irq_domain_bus_token {
    DOMAIN_BUS_ANY = 0,
    DOMAIN_BUS_WIRED = 1,
    DOMAIN_BUS_GENERIC_MSI = 2,
    DOMAIN_BUS_PCI_MSI = 3,
    DOMAIN_BUS_PLATFORM_MSI = 4,
    DOMAIN_BUS_NEXUS = 5,
    DOMAIN_BUS_IPI = 6,
    DOMAIN_BUS_FSL_MC_MSI = 7,
    DOMAIN_BUS_TI_SCI_INTA_MSI = 8,
    DOMAIN_BUS_WAKEUP = 9
};
#line 104  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/irqdomain.h"
struct irq_domain_ops {
   int (*match)(struct irq_domain *, struct device_node *, enum irq_domain_bus_token ) ;
   int (*select)(struct irq_domain *, struct irq_fwspec *, enum irq_domain_bus_token ) ;
   int (*map)(struct irq_domain *, unsigned int , irq_hw_number_t ) ;
   void (*unmap)(struct irq_domain *, unsigned int ) ;
   int (*xlate)(struct irq_domain *, struct device_node *, u32 *, unsigned int , unsigned long *, unsigned int *) ;
   int (*alloc)(struct irq_domain *, unsigned int , unsigned int , void *) ;
   void (*free)(struct irq_domain *, unsigned int , unsigned int ) ;
   int (*activate)(struct irq_domain *, struct irq_data *, bool ) ;
   void (*deactivate)(struct irq_domain *, struct irq_data *) ;
   int (*translate)(struct irq_domain *, struct irq_fwspec *, unsigned long *, unsigned int *) ;
   void (*debug_show)(struct seq_file *, struct irq_domain *, struct irq_data *, int ) ;
};
#line 132 
struct irq_domain_chip_generic;
#line 161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/irqdomain.h"
struct irq_domain {
   struct list_head link ;
   char *name ;
   struct irq_domain_ops *ops ;
   void *host_data ;
   unsigned int flags ;
   unsigned int mapcount ;
   struct fwnode_handle *fwnode ;
   enum irq_domain_bus_token bus_token ;
   struct irq_domain_chip_generic *gc ;
   struct irq_domain *parent ;
   struct dentry *debugfs_file ;
   irq_hw_number_t hwirq_max ;
   unsigned int revmap_direct_max_irq ;
   unsigned int revmap_size ;
   struct xarray revmap_tree ;
   struct mutex revmap_tree_mutex ;
   unsigned int linear_revmap[] ;
};
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rtmutex.h"
struct rt_mutex {
   raw_spinlock_t wait_lock ;
   struct rb_root_cached waiters ;
   struct task_struct *owner ;
   int save_state ;
   char *name ;
   char *file ;
   int line ;
   void *magic ;
   struct lockdep_map dep_map ;
};
#line 69  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/i2c.h"
struct i2c_msg {
   __u16 addr ;
   __u16 flags ;
   __u16 len ;
   __u8 *buf ;
};
#line 135  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/i2c.h"
union i2c_smbus_data {
   __u8 byte ;
   __u16 word ;
   __u8 block[34U] ;
};
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/i2c.h"
struct i2c_algorithm;
#line 28 
struct i2c_adapter;
#line 29 
struct i2c_client;
#line 33 
enum i2c_slave_event;
#line 33 
enum i2c_slave_event;
#line 314  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/i2c.h"
struct i2c_client {
   unsigned short flags ;
   unsigned short addr ;
   char name[20U] ;
   struct i2c_adapter *adapter ;
   struct device dev ;
   int init_irq ;
   int irq ;
   struct list_head detected ;
   int (*slave_cb)(struct i2c_client *, enum i2c_slave_event , u8 *) ;
};
#line 360 
enum i2c_slave_event {
    I2C_SLAVE_READ_REQUESTED = 0,
    I2C_SLAVE_WRITE_REQUESTED = 1,
    I2C_SLAVE_READ_PROCESSED = 2,
    I2C_SLAVE_WRITE_RECEIVED = 3,
    I2C_SLAVE_STOP = 4
};
#line 527  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/i2c.h"
struct i2c_algorithm {
   int (*master_xfer)(struct i2c_adapter *, struct i2c_msg *, int ) ;
   int (*master_xfer_atomic)(struct i2c_adapter *, struct i2c_msg *, int ) ;
   int (*smbus_xfer)(struct i2c_adapter *, u16 , unsigned short , char , u8 , int , union i2c_smbus_data *) ;
   int (*smbus_xfer_atomic)(struct i2c_adapter *, u16 , unsigned short , char , u8 , int , union i2c_smbus_data *) ;
   u32 (*functionality)(struct i2c_adapter *) ;
   int (*reg_slave)(struct i2c_client *) ;
   int (*unreg_slave)(struct i2c_client *) ;
};
#line 565  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/i2c.h"
struct i2c_lock_operations {
   void (*lock_bus)(struct i2c_adapter *, unsigned int ) ;
   int (*trylock_bus)(struct i2c_adapter *, unsigned int ) ;
   void (*unlock_bus)(struct i2c_adapter *, unsigned int ) ;
};
#line 618 
struct gpio_desc;
#line 618  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/i2c.h"
struct i2c_bus_recovery_info {
   int (*recover_bus)(struct i2c_adapter *) ;
   int (*get_scl)(struct i2c_adapter *) ;
   void (*set_scl)(struct i2c_adapter *, int ) ;
   int (*get_sda)(struct i2c_adapter *) ;
   void (*set_sda)(struct i2c_adapter *, int ) ;
   int (*get_bus_free)(struct i2c_adapter *) ;
   void (*prepare_recovery)(struct i2c_adapter *) ;
   void (*unprepare_recovery)(struct i2c_adapter *) ;
   struct gpio_desc *scl_gpiod ;
   struct gpio_desc *sda_gpiod ;
};
#line 661  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/i2c.h"
struct i2c_adapter_quirks {
   u64 flags ;
   int max_num_msgs ;
   u16 max_write_len ;
   u16 max_read_len ;
   u16 max_comb_1st_msg_len ;
   u16 max_comb_2nd_msg_len ;
};
#line 692  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/i2c.h"
struct i2c_adapter {
   struct module *owner ;
   unsigned int class ;
   struct i2c_algorithm *algo ;
   void *algo_data ;
   struct i2c_lock_operations *lock_ops ;
   struct rt_mutex bus_lock ;
   struct rt_mutex mux_lock ;
   int timeout ;
   int retries ;
   struct device dev ;
   unsigned long locked_flags ;
   int nr ;
   char name[48U] ;
   struct completion dev_released ;
   struct mutex userspace_clients_lock ;
   struct list_head userspace_clients ;
   struct i2c_bus_recovery_info *bus_recovery_info ;
   struct i2c_adapter_quirks *quirks ;
   struct irq_domain *host_notify_domain ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cdev.h"
struct cdev {
   struct kobject kobj ;
   struct module *owner ;
   struct file_operations *ops ;
   struct list_head list ;
   dev_t dev ;
   unsigned int count ;
} __attribute__((__designated_init__));
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-common.h"
struct v4l2_edid {
   __u32 pad ;
   __u32 start_block ;
   __u32 blocks ;
   __u32 reserved[5U] ;
   __u8 *edid ;
};
#line 754 
enum v4l2_priority {
    V4L2_PRIORITY_UNSET = 0,
    V4L2_PRIORITY_BACKGROUND = 1,
    V4L2_PRIORITY_INTERACTIVE = 2,
    V4L2_PRIORITY_RECORD = 3,
    V4L2_PRIORITY_DEFAULT = 2
};
#line 413  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_rect {
   __s32 left ;
   __s32 top ;
   __u32 width ;
   __u32 height ;
};
#line 420  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_fract {
   __u32 numerator ;
   __u32 denominator ;
};
#line 1212  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
typedef __u64 v4l2_std_id;
#line 1394  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_bt_timings {
   __u32 width ;
   __u32 height ;
   __u32 interlaced ;
   __u32 polarities ;
   __u64 pixelclock ;
   __u32 hfrontporch ;
   __u32 hsync ;
   __u32 hbackporch ;
   __u32 vfrontporch ;
   __u32 vsync ;
   __u32 vbackporch ;
   __u32 il_vfrontporch ;
   __u32 il_vsync ;
   __u32 il_vbackporch ;
   __u32 standards ;
   __u32 flags ;
   struct v4l2_fract picture_aspect ;
   __u8 cea861_vic ;
   __u8 hdmi_vic ;
   __u8 reserved[46U] ;
} __attribute__((__packed__));
#line 1517  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
union __anonunion_4425 {
   struct v4l2_bt_timings bt ;
   __u32 reserved[32U] ;
};
#line 1517  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_dv_timings {
   __u32 type ;
   union __anonunion_4425 __anonCompField_v4l2_dv_timings_77 ;
} __attribute__((__packed__));
#line 1536  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_enum_dv_timings {
   __u32 index ;
   __u32 pad ;
   __u32 reserved[2U] ;
   struct v4l2_dv_timings timings ;
};
#line 1554  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_bt_timings_cap {
   __u32 min_width ;
   __u32 max_width ;
   __u32 min_height ;
   __u32 max_height ;
   __u64 min_pixelclock ;
   __u64 max_pixelclock ;
   __u32 standards ;
   __u32 capabilities ;
   __u32 reserved[16U] ;
} __attribute__((__packed__));
#line 1581  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
union __anonunion_4426 {
   struct v4l2_bt_timings_cap bt ;
   __u32 raw_data[32U] ;
};
#line 1581  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_dv_timings_cap {
   __u32 type ;
   __u32 pad ;
   __u32 reserved[2U] ;
   union __anonunion_4426 __anonCompField_v4l2_dv_timings_cap_78 ;
};
#line 1803  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_tuner {
   __u32 index ;
   __u8 name[32U] ;
   __u32 type ;
   __u32 capability ;
   __u32 rangelow ;
   __u32 rangehigh ;
   __u32 rxsubchans ;
   __u32 audmode ;
   __s32 signal ;
   __s32 afc ;
   __u32 reserved[4U] ;
};
#line 1817  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_modulator {
   __u32 index ;
   __u8 name[32U] ;
   __u32 capability ;
   __u32 rangelow ;
   __u32 rangehigh ;
   __u32 txsubchans ;
   __u32 type ;
   __u32 reserved[3U] ;
};
#line 1860  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_frequency {
   __u32 tuner ;
   __u32 type ;
   __u32 frequency ;
   __u32 reserved[8U] ;
};
#line 1871  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_frequency_band {
   __u32 tuner ;
   __u32 type ;
   __u32 index ;
   __u32 capability ;
   __u32 rangelow ;
   __u32 rangehigh ;
   __u32 modulation ;
   __u32 reserved[9U] ;
};
#line 2043  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_vbi_format {
   __u32 sampling_rate ;
   __u32 offset ;
   __u32 samples_per_line ;
   __u32 sample_format ;
   __s32 start[2U] ;
   __u32 count[2U] ;
   __u32 flags ;
   __u32 reserved[2U] ;
};
#line 2071  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_sliced_vbi_format {
   __u16 service_set ;
   __u16 service_lines[2U][24U] ;
   __u32 io_size ;
   __u32 reserved[2U] ;
};
#line 2095  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_sliced_vbi_cap {
   __u16 service_set ;
   __u16 service_lines[2U][24U] ;
   __u32 type ;
   __u32 reserved[3U] ;
};
#line 2106  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_sliced_vbi_data {
   __u32 id ;
   __u32 field ;
   __u32 line ;
   __u32 reserved ;
   __u8 data[48U] ;
};
#line 2350  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_event_subscription {
   __u32 type ;
   __u32 id ;
   __u32 flags ;
   __u32 reserved[5U] ;
};
#line 2375  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
union __anonunion_4442 {
   __u32 addr ;
   char name[32U] ;
};
#line 2375  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_dbg_match {
   __u32 type ;
   union __anonunion_4442 __anonCompField_v4l2_dbg_match_87 ;
} __attribute__((__packed__));
#line 2383  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_dbg_register {
   struct v4l2_dbg_match match ;
   __u32 size ;
   __u64 reg ;
   __u64 val ;
} __attribute__((__packed__));
#line 57  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_device;
#line 57  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_gobj {
   struct media_device *mdev ;
   u32 id ;
   struct list_head list ;
};
#line 72  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_entity_enum {
   unsigned long *bmap ;
   int idx_max ;
};
#line 88 
struct media_entity;
#line 88  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct __anonstruct_stack_4446 {
   struct media_entity *entity ;
   struct list_head *link ;
};
#line 88  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_graph {
   struct __anonstruct_stack_4446 stack[16U] ;
   struct media_entity_enum ent_enum ;
   int top ;
};
#line 104  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_pipeline {
   int streaming_count ;
   struct media_graph graph ;
};
#line 132 
struct media_pad;
#line 132 
struct media_interface;
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
union __anonunion_4447 {
   struct media_gobj *gobj0 ;
   struct media_pad *source ;
   struct media_interface *intf ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
union __anonunion_4448 {
   struct media_gobj *gobj1 ;
   struct media_pad *sink ;
   struct media_entity *entity ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_link {
   struct media_gobj graph_obj ;
   struct list_head list ;
   union __anonunion_4447 __anonCompField_media_link_90 ;
   union __anonunion_4448 __anonCompField_media_link_91 ;
   struct media_link *reverse ;
   unsigned long flags ;
   bool is_backlink ;
};
#line 149 
enum media_pad_signal_type {
    PAD_SIGNAL_DEFAULT = 0,
    PAD_SIGNAL_ANALOG = 1,
    PAD_SIGNAL_DV = 2,
    PAD_SIGNAL_AUDIO = 3
};
#line 189  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_pad {
   struct media_gobj graph_obj ;
   struct media_entity *entity ;
   u16 index ;
   enum media_pad_signal_type sig_type ;
   unsigned long flags ;
};
#line 214  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_entity_operations {
   int (*get_fwnode_pad)(struct fwnode_endpoint *) ;
   int (*link_setup)(struct media_entity *, struct media_pad *, struct media_pad *, u32 ) ;
   int (*link_validate)(struct media_link *) ;
};
#line 221 
enum media_entity_type {
    MEDIA_ENTITY_TYPE_BASE = 0,
    MEDIA_ENTITY_TYPE_VIDEO_DEVICE = 1,
    MEDIA_ENTITY_TYPE_V4L2_SUBDEV = 2
};
#line 289  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct __anonstruct_dev_4450 {
   u32 major ;
   u32 minor ;
};
#line 289  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
union __anonunion_info_4449 {
   struct __anonstruct_dev_4450 dev ;
};
#line 289  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_entity {
   struct media_gobj graph_obj ;
   char *name ;
   enum media_entity_type obj_type ;
   u32 function ;
   unsigned long flags ;
   u16 num_pads ;
   u16 num_links ;
   u16 num_backlinks ;
   int internal_idx ;
   struct media_pad *pads ;
   struct list_head links ;
   struct media_entity_operations *ops ;
   int stream_count ;
   int use_count ;
   struct media_pipeline *pipe ;
   union __anonunion_info_4449 info ;
};
#line 335  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_interface {
   struct media_gobj graph_obj ;
   struct list_head links ;
   u32 type ;
   u32 flags ;
};
#line 349  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_intf_devnode {
   struct media_interface intf ;
   u32 major ;
   u32 minor ;
};
#line 1087 
enum vfl_devnode_type {
    VFL_TYPE_GRABBER = 0,
    VFL_TYPE_VBI = 1,
    VFL_TYPE_RADIO = 2,
    VFL_TYPE_SUBDEV = 3,
    VFL_TYPE_SDR = 4,
    VFL_TYPE_TOUCH = 5,
    VFL_TYPE_MAX = 6
};
#line 1097 
enum vfl_devnode_direction {
    VFL_DIR_RX = 0,
    VFL_DIR_TX = 1,
    VFL_DIR_M2M = 2
};
#line 1104 
struct video_device;
#line 1105 
struct v4l2_device;
#line 1106 
struct v4l2_ctrl_handler;
#line 104  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-dev.h"
struct v4l2_prio_state {
   atomic_t prios[4U] ;
};
#line 193  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-dev.h"
struct v4l2_file_operations {
   struct module *owner ;
   ssize_t (*read)(struct file *, char *, size_t , loff_t *) ;
   ssize_t (*write)(struct file *, char *, size_t , loff_t *) ;
   __poll_t (*poll)(struct file *, struct poll_table_struct *) ;
   long (*unlocked_ioctl)(struct file *, unsigned int , unsigned long ) ;
   long (*compat_ioctl32)(struct file *, unsigned int , unsigned long ) ;
   unsigned long (*get_unmapped_area)(struct file *, unsigned long , unsigned long , unsigned long , unsigned long ) ;
   int (*mmap)(struct file *, struct vm_area_struct *) ;
   int (*open)(struct file *) ;
   int (*release)(struct file *) ;
};
#line 256 
struct vb2_queue;
#line 256 
struct v4l2_ioctl_ops;
#line 256  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-dev.h"
struct video_device {
   struct media_entity entity ;
   struct media_intf_devnode *intf_devnode ;
   struct media_pipeline pipe ;
   struct v4l2_file_operations *fops ;
   u32 device_caps ;
   struct device dev ;
   struct cdev *cdev ;
   struct v4l2_device *v4l2_dev ;
   struct device *dev_parent ;
   struct v4l2_ctrl_handler *ctrl_handler ;
   struct vb2_queue *queue ;
   struct v4l2_prio_state *prio ;
   char name[32U] ;
   enum vfl_devnode_type vfl_type ;
   enum vfl_devnode_direction vfl_dir ;
   int minor ;
   u16 num ;
   unsigned long flags ;
   int index ;
   spinlock_t fh_lock ;
   struct list_head fh_list ;
   int dev_debug ;
   v4l2_std_id tvnorms ;
   void (*release)(struct video_device *) ;
   struct v4l2_ioctl_ops *ioctl_ops ;
   unsigned long valid_ioctls[3U] ;
   struct mutex *lock ;
};
#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-common.h"
struct v4l2_subdev;
#line 96 
struct v4l2_subdev_ops;
#line 335  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-common.h"
struct v4l2_priv_tun_config {
   int tuner ;
   void *priv ;
};
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-devnode.h"
struct media_file_operations {
   struct module *owner ;
   ssize_t (*read)(struct file *, char *, size_t , loff_t *) ;
   ssize_t (*write)(struct file *, char *, size_t , loff_t *) ;
   __poll_t (*poll)(struct file *, struct poll_table_struct *) ;
   long (*ioctl)(struct file *, unsigned int , unsigned long ) ;
   long (*compat_ioctl)(struct file *, unsigned int , unsigned long ) ;
   int (*open)(struct file *) ;
   int (*release)(struct file *) ;
};
#line 75  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-devnode.h"
struct media_devnode {
   struct media_device *media_dev ;
   struct media_file_operations *fops ;
   struct device dev ;
   struct cdev cdev ;
   struct device *parent ;
   int minor ;
   unsigned long flags ;
   void (*release)(struct media_devnode *) ;
};
#line 65  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-device.h"
struct media_request;
#line 65  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-device.h"
struct media_device_ops {
   int (*link_notify)(struct media_link *, u32 , unsigned int ) ;
   struct media_request *(*req_alloc)(struct media_device *) ;
   void (*req_free)(struct media_request *) ;
   int (*req_validate)(struct media_request *) ;
   void (*req_queue)(struct media_request *) ;
};
#line 144  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-device.h"
struct media_device {
   struct device *dev ;
   struct media_devnode *devnode ;
   char model[32U] ;
   char driver_name[32U] ;
   char serial[40U] ;
   char bus_info[32U] ;
   u32 hw_revision ;
   u64 topology_version ;
   u32 id ;
   struct ida entity_internal_idx ;
   int entity_internal_idx_max ;
   struct list_head entities ;
   struct list_head interfaces ;
   struct list_head pads ;
   struct list_head links ;
   struct list_head entity_notify ;
   struct mutex graph_mutex ;
   struct media_graph pm_count_walk ;
   void *source_priv ;
   int (*enable_source)(struct media_entity *, struct media_pipeline *) ;
   void (*disable_source)(struct media_entity *) ;
   struct media_device_ops *ops ;
   struct mutex req_queue_mutex ;
   atomic_t request_id ;
};
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-mediabus.h"
struct v4l2_mbus_framefmt {
   __u32 width ;
   __u32 height ;
   __u32 code ;
   __u32 field ;
   __u32 colorspace ;
   __u16 ycbcr_enc ;
   __u16 quantization ;
   __u16 xfer_func ;
   __u16 reserved[11U] ;
};
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-subdev.h"
struct v4l2_subdev_format {
   __u32 which ;
   __u32 pad ;
   struct v4l2_mbus_framefmt format ;
   __u32 reserved[8U] ;
};
#line 75  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-subdev.h"
struct v4l2_subdev_mbus_code_enum {
   __u32 pad ;
   __u32 index ;
   __u32 code ;
   __u32 which ;
   __u32 reserved[8U] ;
};
#line 90  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-subdev.h"
struct v4l2_subdev_frame_size_enum {
   __u32 index ;
   __u32 pad ;
   __u32 code ;
   __u32 min_width ;
   __u32 max_width ;
   __u32 min_height ;
   __u32 max_height ;
   __u32 which ;
   __u32 reserved[8U] ;
};
#line 107  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-subdev.h"
struct v4l2_subdev_frame_interval {
   __u32 pad ;
   struct v4l2_fract interval ;
   __u32 reserved[9U] ;
};
#line 123  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-subdev.h"
struct v4l2_subdev_frame_interval_enum {
   __u32 index ;
   __u32 pad ;
   __u32 code ;
   __u32 width ;
   __u32 height ;
   struct v4l2_fract interval ;
   __u32 which ;
   __u32 reserved[8U] ;
};
#line 149  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-subdev.h"
struct v4l2_subdev_selection {
   __u32 which ;
   __u32 pad ;
   __u32 target ;
   __u32 flags ;
   struct v4l2_rect r ;
   __u32 reserved[8U] ;
};
#line 157 
struct v4l2_async_notifier;
#line 158 
enum v4l2_async_match_type {
    V4L2_ASYNC_MATCH_CUSTOM = 0,
    V4L2_ASYNC_MATCH_DEVNAME = 1,
    V4L2_ASYNC_MATCH_I2C = 2,
    V4L2_ASYNC_MATCH_FWNODE = 3
};
#line 79  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-async.h"
struct __anonstruct_i2c_4464 {
   int adapter_id ;
   unsigned short address ;
};
#line 79  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-async.h"
struct __anonstruct_custom_4465 {
   bool (*match)(struct device *, struct v4l2_async_subdev *) ;
   void *priv ;
};
#line 79  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-async.h"
union __anonunion_match_4463 {
   struct fwnode_handle *fwnode ;
   char *device_name ;
   struct __anonstruct_i2c_4464 i2c ;
   struct __anonstruct_custom_4465 custom ;
};
#line 79  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-async.h"
struct v4l2_async_subdev {
   enum v4l2_async_match_type match_type ;
   union __anonunion_match_4463 match ;
   struct list_head list ;
   struct list_head asd_list ;
};
#line 107  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-async.h"
struct v4l2_async_notifier_operations {
   int (*bound)(struct v4l2_async_notifier *, struct v4l2_subdev *, struct v4l2_async_subdev *) ;
   int (*complete)(struct v4l2_async_notifier *) ;
   void (*unbind)(struct v4l2_async_notifier *, struct v4l2_subdev *, struct v4l2_async_subdev *) ;
};
#line 129  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-async.h"
struct v4l2_async_notifier {
   struct v4l2_async_notifier_operations *ops ;
   struct v4l2_device *v4l2_dev ;
   struct v4l2_subdev *sd ;
   struct v4l2_async_notifier *parent ;
   struct list_head asd_list ;
   struct list_head waiting ;
   struct list_head done ;
   struct list_head list ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-fh.h"
struct v4l2_m2m_ctx;
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-fh.h"
struct v4l2_fh {
   struct list_head list ;
   struct video_device *vdev ;
   struct v4l2_ctrl_handler *ctrl_handler ;
   enum v4l2_priority prio ;
   wait_queue_head_t wait ;
   struct mutex subscribe_lock ;
   struct list_head subscribed ;
   struct list_head available ;
   unsigned int navailable ;
   u32 sequence ;
   struct v4l2_m2m_ctx *m2m_ctx ;
};
#line 162 
enum v4l2_mbus_type {
    V4L2_MBUS_UNKNOWN = 0,
    V4L2_MBUS_PARALLEL = 1,
    V4L2_MBUS_BT656 = 2,
    V4L2_MBUS_CSI1 = 3,
    V4L2_MBUS_CCP2 = 4,
    V4L2_MBUS_CSI2_DPHY = 5,
    V4L2_MBUS_CSI2_CPHY = 6
};
#line 97  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-mediabus.h"
struct v4l2_mbus_config {
   enum v4l2_mbus_type type ;
   unsigned int flags ;
};
#line 184 
struct v4l2_subdev_fh;
#line 185 
struct tuner_setup;
#line 186 
struct v4l2_mbus_frame_desc;
#line 52  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_decode_vbi_line {
   u32 is_second_field ;
   u8 *p ;
   u32 line ;
   u32 type ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_io_pin_config {
   u32 flags ;
   u8 pin ;
   u8 function ;
   u8 value ;
   u8 strength ;
};
#line 188  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_core_ops {
   int (*log_status)(struct v4l2_subdev *) ;
   int (*s_io_pin_config)(struct v4l2_subdev *, size_t , struct v4l2_subdev_io_pin_config *) ;
   int (*init)(struct v4l2_subdev *, u32 ) ;
   int (*load_fw)(struct v4l2_subdev *) ;
   int (*reset)(struct v4l2_subdev *, u32 ) ;
   int (*s_gpio)(struct v4l2_subdev *, u32 ) ;
   long (*ioctl)(struct v4l2_subdev *, unsigned int , void *) ;
   long (*compat_ioctl32)(struct v4l2_subdev *, unsigned int , unsigned long ) ;
   int (*g_register)(struct v4l2_subdev *, struct v4l2_dbg_register *) ;
   int (*s_register)(struct v4l2_subdev *, struct v4l2_dbg_register *) ;
   int (*s_power)(struct v4l2_subdev *, int ) ;
   int (*interrupt_service_routine)(struct v4l2_subdev *, u32 , bool *) ;
   int (*subscribe_event)(struct v4l2_subdev *, struct v4l2_fh *, struct v4l2_event_subscription *) ;
   int (*unsubscribe_event)(struct v4l2_subdev *, struct v4l2_fh *, struct v4l2_event_subscription *) ;
};
#line 264  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_tuner_ops {
   int (*standby)(struct v4l2_subdev *) ;
   int (*s_radio)(struct v4l2_subdev *) ;
   int (*s_frequency)(struct v4l2_subdev *, struct v4l2_frequency *) ;
   int (*g_frequency)(struct v4l2_subdev *, struct v4l2_frequency *) ;
   int (*enum_freq_bands)(struct v4l2_subdev *, struct v4l2_frequency_band *) ;
   int (*g_tuner)(struct v4l2_subdev *, struct v4l2_tuner *) ;
   int (*s_tuner)(struct v4l2_subdev *, struct v4l2_tuner *) ;
   int (*g_modulator)(struct v4l2_subdev *, struct v4l2_modulator *) ;
   int (*s_modulator)(struct v4l2_subdev *, struct v4l2_modulator *) ;
   int (*s_type_addr)(struct v4l2_subdev *, struct tuner_setup *) ;
   int (*s_config)(struct v4l2_subdev *, struct v4l2_priv_tun_config *) ;
};
#line 304  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_audio_ops {
   int (*s_clock_freq)(struct v4l2_subdev *, u32 ) ;
   int (*s_i2s_clock_freq)(struct v4l2_subdev *, u32 ) ;
   int (*s_routing)(struct v4l2_subdev *, u32 , u32 , u32 ) ;
   int (*s_stream)(struct v4l2_subdev *, int ) ;
};
#line 310 
enum v4l2_mbus_frame_desc_flags {
    V4L2_MBUS_FRAME_DESC_FL_LEN_MAX = 1,
    V4L2_MBUS_FRAME_DESC_FL_BLOB = 2
};
#line 335  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_mbus_frame_desc_entry {
   enum v4l2_mbus_frame_desc_flags flags ;
   u32 pixelcode ;
   u32 length ;
};
#line 348  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_mbus_frame_desc {
   struct v4l2_mbus_frame_desc_entry entry[4U] ;
   unsigned short num_entries ;
};
#line 415  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_video_ops {
   int (*s_routing)(struct v4l2_subdev *, u32 , u32 , u32 ) ;
   int (*s_crystal_freq)(struct v4l2_subdev *, u32 , u32 ) ;
   int (*g_std)(struct v4l2_subdev *, v4l2_std_id *) ;
   int (*s_std)(struct v4l2_subdev *, v4l2_std_id ) ;
   int (*s_std_output)(struct v4l2_subdev *, v4l2_std_id ) ;
   int (*g_std_output)(struct v4l2_subdev *, v4l2_std_id *) ;
   int (*querystd)(struct v4l2_subdev *, v4l2_std_id *) ;
   int (*g_tvnorms)(struct v4l2_subdev *, v4l2_std_id *) ;
   int (*g_tvnorms_output)(struct v4l2_subdev *, v4l2_std_id *) ;
   int (*g_input_status)(struct v4l2_subdev *, u32 *) ;
   int (*s_stream)(struct v4l2_subdev *, int ) ;
   int (*g_pixelaspect)(struct v4l2_subdev *, struct v4l2_fract *) ;
   int (*g_frame_interval)(struct v4l2_subdev *, struct v4l2_subdev_frame_interval *) ;
   int (*s_frame_interval)(struct v4l2_subdev *, struct v4l2_subdev_frame_interval *) ;
   int (*s_dv_timings)(struct v4l2_subdev *, struct v4l2_dv_timings *) ;
   int (*g_dv_timings)(struct v4l2_subdev *, struct v4l2_dv_timings *) ;
   int (*query_dv_timings)(struct v4l2_subdev *, struct v4l2_dv_timings *) ;
   int (*g_mbus_config)(struct v4l2_subdev *, struct v4l2_mbus_config *) ;
   int (*s_mbus_config)(struct v4l2_subdev *, struct v4l2_mbus_config *) ;
   int (*s_rx_buffer)(struct v4l2_subdev *, void *, unsigned int *) ;
};
#line 481  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_vbi_ops {
   int (*decode_vbi_line)(struct v4l2_subdev *, struct v4l2_decode_vbi_line *) ;
   int (*s_vbi_data)(struct v4l2_subdev *, struct v4l2_sliced_vbi_data *) ;
   int (*g_vbi_data)(struct v4l2_subdev *, struct v4l2_sliced_vbi_data *) ;
   int (*g_sliced_vbi_cap)(struct v4l2_subdev *, struct v4l2_sliced_vbi_cap *) ;
   int (*s_raw_fmt)(struct v4l2_subdev *, struct v4l2_vbi_format *) ;
   int (*g_sliced_fmt)(struct v4l2_subdev *, struct v4l2_sliced_vbi_format *) ;
   int (*s_sliced_fmt)(struct v4l2_subdev *, struct v4l2_sliced_vbi_format *) ;
};
#line 501  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_sensor_ops {
   int (*g_skip_top_lines)(struct v4l2_subdev *, u32 *) ;
   int (*g_skip_frames)(struct v4l2_subdev *, u32 *) ;
};
#line 505 
enum v4l2_subdev_ir_mode {
    V4L2_SUBDEV_IR_MODE_PULSE_WIDTH = 0
};
#line 540  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_ir_parameters {
   unsigned int bytes_per_data_element ;
   enum v4l2_subdev_ir_mode mode ;
   bool enable ;
   bool interrupt_enable ;
   bool shutdown ;
   bool modulation ;
   u32 max_pulse_width ;
   unsigned int carrier_freq ;
   unsigned int duty_cycle ;
   bool invert_level ;
   bool invert_carrier_sense ;
   u32 noise_filter_min_width ;
   unsigned int carrier_range_lower ;
   unsigned int carrier_range_upper ;
   u32 resolution ;
};
#line 599  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_ir_ops {
   int (*rx_read)(struct v4l2_subdev *, u8 *, size_t , ssize_t *) ;
   int (*rx_g_parameters)(struct v4l2_subdev *, struct v4l2_subdev_ir_parameters *) ;
   int (*rx_s_parameters)(struct v4l2_subdev *, struct v4l2_subdev_ir_parameters *) ;
   int (*tx_write)(struct v4l2_subdev *, u8 *, size_t , ssize_t *) ;
   int (*tx_g_parameters)(struct v4l2_subdev *, struct v4l2_subdev_ir_parameters *) ;
   int (*tx_s_parameters)(struct v4l2_subdev *, struct v4l2_subdev_ir_parameters *) ;
};
#line 630  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_pad_config {
   struct v4l2_mbus_framefmt try_fmt ;
   struct v4l2_rect try_crop ;
   struct v4l2_rect try_compose ;
};
#line 674  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_pad_ops {
   int (*init_cfg)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *) ;
   int (*enum_mbus_code)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *, struct v4l2_subdev_mbus_code_enum *) ;
   int (*enum_frame_size)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *, struct v4l2_subdev_frame_size_enum *) ;
   int (*enum_frame_interval)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *, struct v4l2_subdev_frame_interval_enum *) ;
   int (*get_fmt)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *, struct v4l2_subdev_format *) ;
   int (*set_fmt)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *, struct v4l2_subdev_format *) ;
   int (*get_selection)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *, struct v4l2_subdev_selection *) ;
   int (*set_selection)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *, struct v4l2_subdev_selection *) ;
   int (*get_edid)(struct v4l2_subdev *, struct v4l2_edid *) ;
   int (*set_edid)(struct v4l2_subdev *, struct v4l2_edid *) ;
   int (*dv_timings_cap)(struct v4l2_subdev *, struct v4l2_dv_timings_cap *) ;
   int (*enum_dv_timings)(struct v4l2_subdev *, struct v4l2_enum_dv_timings *) ;
   int (*link_validate)(struct v4l2_subdev *, struct media_link *, struct v4l2_subdev_format *, struct v4l2_subdev_format *) ;
   int (*get_frame_desc)(struct v4l2_subdev *, unsigned int , struct v4l2_mbus_frame_desc *) ;
   int (*set_frame_desc)(struct v4l2_subdev *, unsigned int , struct v4l2_mbus_frame_desc *) ;
};
#line 727  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_ops {
   struct v4l2_subdev_core_ops *core ;
   struct v4l2_subdev_tuner_ops *tuner ;
   struct v4l2_subdev_audio_ops *audio ;
   struct v4l2_subdev_video_ops *video ;
   struct v4l2_subdev_vbi_ops *vbi ;
   struct v4l2_subdev_ir_ops *ir ;
   struct v4l2_subdev_sensor_ops *sensor ;
   struct v4l2_subdev_pad_ops *pad ;
};
#line 765  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_internal_ops {
   int (*registered)(struct v4l2_subdev *) ;
   void (*unregistered)(struct v4l2_subdev *) ;
   int (*open)(struct v4l2_subdev *, struct v4l2_subdev_fh *) ;
   int (*close)(struct v4l2_subdev *, struct v4l2_subdev_fh *) ;
   void (*release)(struct v4l2_subdev *) ;
};
#line 772 
struct regulator_bulk_data;
#line 797  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_platform_data {
   struct regulator_bulk_data *regulators ;
   int num_regulators ;
   void *host_priv ;
};
#line 848  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev {
   struct media_entity entity ;
   struct list_head list ;
   struct module *owner ;
   bool owner_v4l2_dev ;
   u32 flags ;
   struct v4l2_device *v4l2_dev ;
   struct v4l2_subdev_ops *ops ;
   struct v4l2_subdev_internal_ops *internal_ops ;
   struct v4l2_ctrl_handler *ctrl_handler ;
   char name[32U] ;
   u32 grp_id ;
   void *dev_priv ;
   void *host_priv ;
   struct video_device *devnode ;
   struct device *dev ;
   struct fwnode_handle *fwnode ;
   struct list_head async_list ;
   struct v4l2_async_subdev *asd ;
   struct v4l2_async_notifier *notifier ;
   struct v4l2_async_notifier *subdev_notifier ;
   struct v4l2_subdev_platform_data *pdata ;
};
#line 906  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_fh {
   struct v4l2_fh vfh ;
   struct module *owner ;
   struct v4l2_subdev_pad_config *pad ;
};
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-device.h"
struct v4l2_device {
   struct device *dev ;
   struct media_device *mdev ;
   struct list_head subdevs ;
   spinlock_t lock ;
   char name[36U] ;
   void (*notify)(struct v4l2_subdev *, unsigned int , void *) ;
   struct v4l2_ctrl_handler *ctrl_handler ;
   struct v4l2_prio_state prio ;
   struct kref ref ;
   void (*release)(struct v4l2_device *) ;
};
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ptp_clock_kernel.h"
struct ptp_system_timestamp {
   struct timespec64 pre_ts ;
   struct timespec64 post_ts ;
};
#line 277 
struct dma_chan;
#line 279 
struct spi_controller;
#line 280 
struct spi_transfer;
#line 281 
struct spi_controller_mem_ops;
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spi/spi.h"
struct spi_statistics {
   spinlock_t lock ;
   unsigned long messages ;
   unsigned long transfers ;
   unsigned long errors ;
   unsigned long timedout ;
   unsigned long spi_sync ;
   unsigned long spi_sync_immediate ;
   unsigned long spi_async ;
   unsigned long long bytes ;
   unsigned long long bytes_rx ;
   unsigned long long bytes_tx ;
   unsigned long transfer_bytes_histo[17U] ;
   unsigned long transfers_split_maxsize ;
};
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spi/spi.h"
struct spi_delay {
   u16 value ;
   u8 unit ;
};
#line 157  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spi/spi.h"
struct spi_device {
   struct device dev ;
   struct spi_controller *controller ;
   struct spi_controller *master ;
   u32 max_speed_hz ;
   u8 chip_select ;
   u8 bits_per_word ;
   bool rt ;
   u32 mode ;
   int irq ;
   void *controller_state ;
   void *controller_data ;
   char modalias[32U] ;
   char *driver_override ;
   int cs_gpio ;
   struct gpio_desc *cs_gpiod ;
   struct spi_delay word_delay ;
   struct spi_statistics statistics ;
};
#line 247 
struct spi_message;
#line 452  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spi/spi.h"
struct spi_controller {
   struct device dev ;
   struct list_head list ;
   s16 bus_num ;
   u16 num_chipselect ;
   u16 dma_alignment ;
   u32 mode_bits ;
   u32 bits_per_word_mask ;
   u32 min_speed_hz ;
   u32 max_speed_hz ;
   u16 flags ;
   bool slave ;
   size_t (*max_transfer_size)(struct spi_device *) ;
   size_t (*max_message_size)(struct spi_device *) ;
   struct mutex io_mutex ;
   spinlock_t bus_lock_spinlock ;
   struct mutex bus_lock_mutex ;
   bool bus_lock_flag ;
   int (*setup)(struct spi_device *) ;
   int (*set_cs_timing)(struct spi_device *, struct spi_delay *, struct spi_delay *, struct spi_delay *) ;
   int (*transfer)(struct spi_device *, struct spi_message *) ;
   void (*cleanup)(struct spi_device *) ;
   bool (*can_dma)(struct spi_controller *, struct spi_device *, struct spi_transfer *) ;
   bool queued ;
   struct kthread_worker kworker ;
   struct task_struct *kworker_task ;
   struct kthread_work pump_messages ;
   spinlock_t queue_lock ;
   struct list_head queue ;
   struct spi_message *cur_msg ;
   bool idling ;
   bool busy ;
   bool running ;
   bool rt ;
   bool auto_runtime_pm ;
   bool cur_msg_prepared ;
   bool cur_msg_mapped ;
   struct completion xfer_completion ;
   size_t max_dma_len ;
   int (*prepare_transfer_hardware)(struct spi_controller *) ;
   int (*transfer_one_message)(struct spi_controller *, struct spi_message *) ;
   int (*unprepare_transfer_hardware)(struct spi_controller *) ;
   int (*prepare_message)(struct spi_controller *, struct spi_message *) ;
   int (*unprepare_message)(struct spi_controller *, struct spi_message *) ;
   int (*slave_abort)(struct spi_controller *) ;
   void (*set_cs)(struct spi_device *, bool ) ;
   int (*transfer_one)(struct spi_controller *, struct spi_device *, struct spi_transfer *) ;
   void (*handle_err)(struct spi_controller *, struct spi_message *) ;
   struct spi_controller_mem_ops *mem_ops ;
   struct spi_delay cs_setup ;
   struct spi_delay cs_hold ;
   struct spi_delay cs_inactive ;
   int *cs_gpios ;
   struct gpio_desc **cs_gpiods ;
   bool use_gpio_descriptors ;
   struct spi_statistics statistics ;
   struct dma_chan *dma_tx ;
   struct dma_chan *dma_rx ;
   void *dummy_rx ;
   void *dummy_tx ;
   int (*fw_translate_cs)(struct spi_controller *, unsigned int ) ;
   bool ptp_sts_supported ;
   unsigned long irq_flags ;
};
#line 890  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spi/spi.h"
struct spi_transfer {
   void *tx_buf ;
   void *rx_buf ;
   unsigned int len ;
   dma_addr_t tx_dma ;
   dma_addr_t rx_dma ;
   struct sg_table tx_sg ;
   struct sg_table rx_sg ;
   unsigned int cs_change : 1 ;
   unsigned int tx_nbits : 3 ;
   unsigned int rx_nbits : 3 ;
   u8 bits_per_word ;
   u16 delay_usecs ;
   struct spi_delay delay ;
   struct spi_delay cs_change_delay ;
   struct spi_delay word_delay ;
   u32 speed_hz ;
   u32 effective_speed_hz ;
   unsigned int ptp_sts_word_pre ;
   unsigned int ptp_sts_word_post ;
   struct ptp_system_timestamp *ptp_sts ;
   bool timestamped_pre ;
   bool timestamped_post ;
   struct list_head transfer_list ;
};
#line 961  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spi/spi.h"
struct spi_message {
   struct list_head transfers ;
   struct spi_device *spi ;
   unsigned int is_dma_mapped : 1 ;
   void (*complete)(void *) ;
   void *context ;
   unsigned int frame_length ;
   unsigned int actual_length ;
   int status ;
   struct list_head queue ;
   void *state ;
   struct list_head resources ;
};
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 157  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_fix_screeninfo {
   char id[16U] ;
   unsigned long smem_start ;
   __u32 smem_len ;
   __u32 type ;
   __u32 type_aux ;
   __u32 visual ;
   __u16 xpanstep ;
   __u16 ypanstep ;
   __u16 ywrapstep ;
   __u32 line_length ;
   unsigned long mmio_start ;
   __u32 mmio_len ;
   __u32 accel ;
   __u16 capabilities ;
   __u16 reserved[2U] ;
};
#line 188  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_bitfield {
   __u32 offset ;
   __u32 length ;
   __u32 msb_right ;
};
#line 241  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_var_screeninfo {
   __u32 xres ;
   __u32 yres ;
   __u32 xres_virtual ;
   __u32 yres_virtual ;
   __u32 xoffset ;
   __u32 yoffset ;
   __u32 bits_per_pixel ;
   __u32 grayscale ;
   struct fb_bitfield red ;
   struct fb_bitfield green ;
   struct fb_bitfield blue ;
   struct fb_bitfield transp ;
   __u32 nonstd ;
   __u32 activate ;
   __u32 height ;
   __u32 width ;
   __u32 accel_flags ;
   __u32 pixclock ;
   __u32 left_margin ;
   __u32 right_margin ;
   __u32 upper_margin ;
   __u32 lower_margin ;
   __u32 hsync_len ;
   __u32 vsync_len ;
   __u32 sync ;
   __u32 vmode ;
   __u32 rotate ;
   __u32 colorspace ;
   __u32 reserved[4U] ;
};
#line 281  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_cmap {
   __u32 start ;
   __u32 len ;
   __u16 *red ;
   __u16 *green ;
   __u16 *blue ;
   __u16 *transp ;
};
#line 341  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_copyarea {
   __u32 dx ;
   __u32 dy ;
   __u32 width ;
   __u32 height ;
   __u32 sx ;
   __u32 sy ;
};
#line 350  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_fillrect {
   __u32 dx ;
   __u32 dy ;
   __u32 width ;
   __u32 height ;
   __u32 color ;
   __u32 rop ;
};
#line 359  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_image {
   __u32 dx ;
   __u32 dy ;
   __u32 width ;
   __u32 height ;
   __u32 fg_color ;
   __u32 bg_color ;
   __u8 depth ;
   char *data ;
   struct fb_cmap cmap ;
};
#line 383  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fbcurpos {
   __u16 x ;
   __u16 y ;
};
#line 387  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_cursor {
   __u16 set ;
   __u16 enable ;
   __u16 rop ;
   char *mask ;
   struct fbcurpos hot ;
   struct fb_image image ;
};
#line 400 
enum backlight_type {
    BACKLIGHT_RAW = 1,
    BACKLIGHT_PLATFORM = 2,
    BACKLIGHT_FIRMWARE = 3,
    BACKLIGHT_TYPE_MAX = 4
};
#line 412 
enum backlight_scale {
    BACKLIGHT_SCALE_UNKNOWN = 0,
    BACKLIGHT_SCALE_LINEAR = 1,
    BACKLIGHT_SCALE_NON_LINEAR = 2
};
#line 418 
struct backlight_device;
#line 419 
struct fb_info;
#line 58  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backlight.h"
struct backlight_ops {
   unsigned int options ;
   int (*update_status)(struct backlight_device *) ;
   int (*get_brightness)(struct backlight_device *) ;
   int (*check_fb)(struct backlight_device *, struct fb_info *) ;
};
#line 74  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backlight.h"
struct backlight_properties {
   int brightness ;
   int max_brightness ;
   int power ;
   int fb_blank ;
   enum backlight_type type ;
   unsigned int state ;
   enum backlight_scale scale ;
};
#line 97  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backlight.h"
struct backlight_device {
   struct backlight_properties props ;
   struct mutex update_lock ;
   struct mutex ops_lock ;
   struct backlight_ops *ops ;
   struct notifier_block fb_notif ;
   struct list_head entry ;
   struct device dev ;
   bool fb_bl_on[32U] ;
   int use_count ;
};
#line 52  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_chroma {
   __u32 redx ;
   __u32 greenx ;
   __u32 bluex ;
   __u32 whitex ;
   __u32 redy ;
   __u32 greeny ;
   __u32 bluey ;
   __u32 whitey ;
};
#line 63 
struct fb_videomode;
#line 63  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_monspecs {
   struct fb_chroma chroma ;
   struct fb_videomode *modedb ;
   __u8 manufacturer[4U] ;
   __u8 monitor[14U] ;
   __u8 serial_no[14U] ;
   __u8 ascii[14U] ;
   __u32 modedb_len ;
   __u32 model ;
   __u32 serial ;
   __u32 year ;
   __u32 week ;
   __u32 hfmin ;
   __u32 hfmax ;
   __u32 dclkmin ;
   __u32 dclkmax ;
   __u16 input ;
   __u16 dpms ;
   __u16 signal ;
   __u16 vfmin ;
   __u16 vfmax ;
   __u16 gamma ;
   __u16 gtf : 1 ;
   __u16 misc ;
   __u8 version ;
   __u8 revision ;
   __u8 max_x ;
   __u8 max_y ;
};
#line 144  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_blit_caps {
   u32 x ;
   u32 y ;
   u32 len ;
   u32 flags ;
};
#line 185  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_pixmap {
   u8 *addr ;
   u32 size ;
   u32 offset ;
   u32 buf_align ;
   u32 scan_align ;
   u32 access_align ;
   u32 flags ;
   u32 blit_x ;
   u32 blit_y ;
   void (*writeio)(struct fb_info *, void *, void *, unsigned int ) ;
   void (*readio)(struct fb_info *, void *, void *, unsigned int ) ;
};
#line 203  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_deferred_io {
   unsigned long delay ;
   struct mutex lock ;
   struct list_head pagelist ;
   void (*first_io)(struct fb_info *) ;
   void (*deferred_io)(struct fb_info *, struct list_head *) ;
};
#line 228  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_ops {
   struct module *owner ;
   int (*fb_open)(struct fb_info *, int ) ;
   int (*fb_release)(struct fb_info *, int ) ;
   ssize_t (*fb_read)(struct fb_info *, char *, size_t , loff_t *) ;
   ssize_t (*fb_write)(struct fb_info *, char *, size_t , loff_t *) ;
   int (*fb_check_var)(struct fb_var_screeninfo *, struct fb_info *) ;
   int (*fb_set_par)(struct fb_info *) ;
   int (*fb_setcolreg)(unsigned int , unsigned int , unsigned int , unsigned int , unsigned int , struct fb_info *) ;
   int (*fb_setcmap)(struct fb_cmap *, struct fb_info *) ;
   int (*fb_blank)(int , struct fb_info *) ;
   int (*fb_pan_display)(struct fb_var_screeninfo *, struct fb_info *) ;
   void (*fb_fillrect)(struct fb_info *, struct fb_fillrect *) ;
   void (*fb_copyarea)(struct fb_info *, struct fb_copyarea *) ;
   void (*fb_imageblit)(struct fb_info *, struct fb_image *) ;
   int (*fb_cursor)(struct fb_info *, struct fb_cursor *) ;
   int (*fb_sync)(struct fb_info *) ;
   int (*fb_ioctl)(struct fb_info *, unsigned int , unsigned long ) ;
   int (*fb_compat_ioctl)(struct fb_info *, unsigned int , unsigned long ) ;
   int (*fb_mmap)(struct fb_info *, struct vm_area_struct *) ;
   void (*fb_get_caps)(struct fb_info *, struct fb_blit_caps *, struct fb_var_screeninfo *) ;
   void (*fb_destroy)(struct fb_info *) ;
   int (*fb_debug_enter)(struct fb_info *) ;
   int (*fb_debug_leave)(struct fb_info *) ;
};
#line 306  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_tilemap {
   __u32 width ;
   __u32 height ;
   __u32 depth ;
   __u32 length ;
   __u8 *data ;
};
#line 315  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_tilerect {
   __u32 sx ;
   __u32 sy ;
   __u32 width ;
   __u32 height ;
   __u32 index ;
   __u32 fg ;
   __u32 bg ;
   __u32 rop ;
};
#line 326  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_tilearea {
   __u32 sx ;
   __u32 sy ;
   __u32 dx ;
   __u32 dy ;
   __u32 width ;
   __u32 height ;
};
#line 335  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_tileblit {
   __u32 sx ;
   __u32 sy ;
   __u32 width ;
   __u32 height ;
   __u32 fg ;
   __u32 bg ;
   __u32 length ;
   __u32 *indices ;
};
#line 346  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_tilecursor {
   __u32 sx ;
   __u32 sy ;
   __u32 mode ;
   __u32 shape ;
   __u32 fg ;
   __u32 bg ;
};
#line 355  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_tile_ops {
   void (*fb_settile)(struct fb_info *, struct fb_tilemap *) ;
   void (*fb_tilecopy)(struct fb_info *, struct fb_tilearea *) ;
   void (*fb_tilefill)(struct fb_info *, struct fb_tilerect *) ;
   void (*fb_tileblit)(struct fb_info *, struct fb_tileblit *) ;
   void (*fb_tilecursor)(struct fb_info *, struct fb_tilecursor *) ;
   int (*fb_get_tilemax)(struct fb_info *) ;
};
#line 499  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct aperture {
   resource_size_t base ;
   resource_size_t size ;
};
#line 497  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct apertures_struct {
   unsigned int count ;
   struct aperture ranges[0U] ;
};
#line 439  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
union __anonunion_5366 {
   char *screen_base ;
   char *screen_buffer ;
};
#line 439  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_info {
   atomic_t count ;
   int node ;
   int flags ;
   int fbcon_rotate_hint ;
   struct mutex lock ;
   struct mutex mm_lock ;
   struct fb_var_screeninfo var ;
   struct fb_fix_screeninfo fix ;
   struct fb_monspecs monspecs ;
   struct work_struct queue ;
   struct fb_pixmap pixmap ;
   struct fb_pixmap sprite ;
   struct fb_cmap cmap ;
   struct list_head modelist ;
   struct fb_videomode *mode ;
   struct backlight_device *bl_dev ;
   struct mutex bl_curve_mutex ;
   u8 bl_curve[128U] ;
   struct delayed_work deferred_work ;
   struct fb_deferred_io *fbdefio ;
   struct fb_ops *fbops ;
   struct device *device ;
   struct device *dev ;
   int class_flag ;
   struct fb_tile_ops *tileops ;
   union __anonunion_5366 __anonCompField_fb_info_73 ;
   unsigned long screen_size ;
   void *pseudo_palette ;
   u32 state ;
   void *fbcon_par ;
   void *par ;
   struct apertures_struct *apertures ;
   bool skip_vt_switch ;
};
#line 767  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_videomode {
   char *name ;
   u32 refresh ;
   u32 xres ;
   u32 yres ;
   u32 pixclock ;
   u32 left_margin ;
   u32 right_margin ;
   u32 upper_margin ;
   u32 lower_margin ;
   u32 hsync_len ;
   u32 vsync_len ;
   u32 sync ;
   u32 vmode ;
   u32 flag ;
};
#line 63  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
struct ldv_kmem_cache {
   char *name ;
   unsigned int size ;
};
#line 88  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
typedef unsigned long pthread_t;
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/thread.h"
union pthread_attr_t {
   char __size[56U] ;
   long __align ;
};
#line 30  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/thread.h"
typedef union pthread_attr_t pthread_attr_t;
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 15  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amazon/ena/ena.ko/concurrency safety/emg/0/environment_model.c"
struct emg_struct_free_irq_6 {
   int arg0 ;
   int signal_pending ;
};
#line 20  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amazon/ena/ena.ko/concurrency safety/emg/0/environment_model.c"
struct emg_struct_interrupt_scenario_0_14 {
   int arg0 ;
   enum irqreturn (*arg1)(int , void *) ;
   enum irqreturn (*arg2)(int , void *) ;
   void *arg3 ;
   int signal_pending ;
};
#line 28  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amazon/ena/ena.ko/concurrency safety/emg/0/environment_model.c"
struct emg_struct_random_allocationless_scenario_ena_get_channels_15 {
   struct net_device *arg0 ;
   int signal_pending ;
};
#line 33  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amazon/ena/ena.ko/concurrency safety/emg/0/environment_model.c"
struct emg_struct_pci_scenario_ena_pci_driver_16 {
   struct pci_driver *arg0 ;
   int signal_pending ;
};
#line 38  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amazon/ena/ena.ko/concurrency safety/emg/0/environment_model.c"
struct emg_struct_timer_scenario_3_17 {
   struct timer_list *arg0 ;
   int signal_pending ;
};
/* compiler builtin: 
   void *__builtin_memcpy(void *, void const *, unsigned long);   */
/* compiler builtin: 
   void __builtin_prefetch(void const * , ...);   */
/* compiler builtin: 
   void __builtin_unreachable(void);   */
#line 22  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/common/inline_asm.h"
#line 22 
void ldv_inline_asm(void);
#line 16  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amazon/ena/ena.ko/concurrency safety/0/concurrency safety/weaver/ena_netdev.i.aux"
#line 16 
struct task_struct *ldv_get_current(void);
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/export.h"
#line 16 
extern struct module __this_module;
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/compiler.h"
__inline static void __read_once_size(void *p, void *res, int size)
{
  #line 199 
  switch (size) {
    #line 199 
    case 1: 
            #line 199 
    ;
    #line 199 
    *((__u8 *)res) = *((__u8 *)p);
    #line 199 
    break;
    #line 199 
    case 2: 
            #line 199 
    ;
    #line 199 
    *((__u16 *)res) = *((__u16 *)p);
    #line 199 
    break;
    #line 199 
    case 4: 
            #line 199 
    ;
    #line 199 
    *((__u32 *)res) = *((__u32 *)p);
    #line 199 
    break;
    #line 199 
    case 8: 
            #line 199 
    ;
    #line 199 
    *((__u64 *)res) = *((__u64 *)p);
    #line 199 
    break;
    #line 199 
    default: 
             #line 199 
    ;
    #line 200 
    ldv_inline_asm();
    #line 199 
    __builtin_memcpy(res,(void const *)p,(unsigned long)size);
    #line 200 
    ldv_inline_asm();
  }
  #line 203 
  return;
}

#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kasan-checks.h"
__inline static bool kasan_check_read(void *p, unsigned int size)
{
  #line 36 
  return (_Bool)1;
}

#line 136  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/bitops.h"
__inline static bool arch_test_and_set_bit(long nr, unsigned long *addr)
{
  #line 138 
  bool c;
  #line 139 
  ldv_inline_asm();
  #line 138 
  return c;
}

#line 204  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/bitops.h"
__inline static bool constant_test_bit(long nr, unsigned long *addr)
{
  #line 207 
  return (_Bool)(((*(addr + (unsigned long)(nr >> 6)) >> (nr & 63L)) & 1UL) != 0UL);
}

#line 210  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/bitops.h"
__inline static bool variable_test_bit(long nr, unsigned long *addr)
{
  #line 212 
  bool oldbit;
  #line 213 
  ldv_inline_asm();
  #line 219 
  return oldbit;
}

#line 366  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/bitops.h"
__inline static int fls64(__u64 x)
{
  #line 368 
  int bitpos = -1;
  #line 369 
  ldv_inline_asm();
  #line 377 
  return bitpos + 1;
}

#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bitops/find.h"
#line 225  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amazon/ena/ena.ko/concurrency safety/0/concurrency safety/weaver/ena_netdev.i.aux"
static unsigned long cif_find_first_bit(unsigned long *addr, unsigned long size);
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bitops/instrumented-atomic.h"
#line 190  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amazon/ena/ena.ko/concurrency safety/0/concurrency safety/weaver/ena_netdev.i.aux"
static void cif_set_bit(long nr, unsigned long *addr);
#line 44  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bitops/instrumented-atomic.h"
#line 197  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amazon/ena/ena.ko/concurrency safety/0/concurrency safety/weaver/ena_netdev.i.aux"
static void cif_clear_bit(long nr, unsigned long *addr);
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bitops/instrumented-atomic.h"
__inline static bool test_and_set_bit(long nr, unsigned long *addr)
{
  #line 70 
  kasan_check_read((void *)(addr + (unsigned long)(nr / 64L)),8U);
  #line 71 
  return arch_test_and_set_bit(nr,addr);
}

#line 108  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bitops/instrumented-non-atomic.h"
__inline static bool test_bit(long nr, unsigned long *addr)
{
  #line 111 
  int tmp_1;
  #line 110 
  kasan_check_read((void *)(addr + (unsigned long)(nr / 64L)),8U);
  #line 111 
  if (0 != 0) {
    #line 111 
    tmp_1 = (int)constant_test_bit(nr,addr) != 0;
  }
  else {
    #line 111 
    tmp_1 = (int)variable_test_bit(nr,addr) != 0;
  }
  #line 111 
  return (_Bool)(tmp_1 != 0);
}

#line 179  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bitops.h"
__inline static unsigned int fls_long(unsigned long l)
{
  #line 183 
  return (unsigned int)fls64((unsigned long long)l);
}

#line 65  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/log2.h"
__inline static unsigned long __rounddown_pow_of_two(unsigned long n)
{
  #line 67 
  return 1UL << (fls_long(n) + 4294967295U);
}

#line 171  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/printk.h"
#line 171 
int printk(char * , ...);
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/jump_label.h"
__inline static bool arch_static_branch(struct static_key *key, bool branch)
{
  #line 27 
  ldv_inline_asm();
  #line 28 
  ldv_inline_asm();
  #line 34 
  return (_Bool)0;
  #line 35 
  l_yes: 
         #line 35 
  ;
  #line 36 
  return (_Bool)1;
}

#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dynamic_debug.h"
#line 56 
void __dynamic_pr_debug(struct _ddebug *, char * , ...);
#line 64 
#line 64 
void __dynamic_dev_dbg(struct _ddebug *, struct device *, char * , ...);
#line 70 
#line 70 
void __dynamic_netdev_dbg(struct _ddebug *, struct net_device *, char * , ...);
#line 472  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernel.h"
#line 472 
int snprintf(char *, size_t, char * , ...);
#line 26  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
#line 204  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amazon/ena/ena.ko/concurrency safety/0/concurrency safety/weaver/ena_netdev.i.aux"
static void INIT_LIST_HEAD(struct list_head *list);
#line 88  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/percpu.h"
#line 88 
void __bad_percpu_size(void);
#line 309  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/percpu-defs.h"
#line 309 
void __bad_size_call_parameter(void);
#line 314  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/percpu-defs.h"
__inline static void __this_cpu_preempt_check(char *op)
{
  #line 316 
  return;
}

#line 89  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bug.h"
#line 89 
void __warn_printk(char * , ...);
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/page_64.h"
#line 14 
extern unsigned long page_offset_base;
#line 15 
#line 15 
extern unsigned long vmalloc_base;
#line 16 
#line 16 
extern unsigned long vmemmap_base;
#line 29 
#line 29 
unsigned long __phys_addr(unsigned long);
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/string_64.h"
#line 14 
void *memcpy(void *, void *, size_t);
#line 18 
#line 18 
void *memset(void *, int, size_t);
#line 61 
#line 61 
int memcmp(void *, void *, size_t);
#line 26  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/string.h"
#line 26 
char *strncpy(char *, char *, __kernel_size_t);
#line 29 
#line 29 
size_t strlcpy(char *, char *, size_t);
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/cmpxchg_64.h"
__inline static int arch_atomic_read(atomic_t *v)
{
  #line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/atomic.h"
  union __anonunion___u_67 __u;
  #line 31 
  __read_once_size((void *)(& v->counter),(void *)(& __u.__c),4);
  #line 31 
  return (__u.__val);
}

#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/atomic-instrumented.h"
__inline static int atomic_read(atomic_t *v)
{
  #line 26 
  kasan_check_read((void *)v,4U);
  #line 27 
  return arch_atomic_read(v);
}

#line 39  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cpumask.h"
#line 39 
extern unsigned int nr_cpu_ids;
#line 91 
#line 91 
extern struct cpumask __cpu_online_mask;
#line 99 
#line 99 
extern atomic_t __num_online_cpus;
#line 110  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cpumask.h"
__inline static unsigned int num_online_cpus(void)
{
  #line 112 
  return (unsigned int)atomic_read(& __num_online_cpus);
}

#line 134  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cpumask.h"
__inline static void cpu_max_bits_warn(unsigned int cpu, unsigned int bits)
{
  #line 137 
  int __ret_warn_on = cpu >= bits;
  #line 137 
  if ((long)(__ret_warn_on != 0) != 0L) {
    #line 138 
    ldv_inline_asm();
    #line 139 
    ldv_inline_asm();
  }
  #line 137 
  long tmp = (long)(__ret_warn_on != 0);
  #line 139 
  return;
}

#line 142  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cpumask.h"
__inline static unsigned int cpumask_check(unsigned int cpu)
{
  #line 144 
  cpu_max_bits_warn(cpu,nr_cpu_ids);
  #line 145 
  return cpu;
}

#line 212  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cpumask.h"
__inline static unsigned int cpumask_first(struct cpumask *srcp)
{
  #line 214 
  return (unsigned int)cif_find_first_bit((unsigned long *)(& srcp->bits),
                         (unsigned long)nr_cpu_ids);
}

#line 325  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cpumask.h"
__inline static void cpumask_set_cpu(unsigned int cpu, struct cpumask *dstp)
{
  #line 327 
  ;
  #line 327 
  cif_set_bit((long)cpumask_check(cpu),(unsigned long *)(& dstp->bits));
  #line 328 
  return;
}

#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/irqflags.h"
#line 20 
unsigned long native_save_fl(void);
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/irqflags.h"
unsigned long native_save_fl(void)
{
  #line 22 
  unsigned long flags;
  #line 23 
  ldv_inline_asm();
  #line 35 
  return flags;
}

#line 38 
#line 39 
void native_restore_fl(unsigned long flags);
#line 39  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/irqflags.h"
void native_restore_fl(unsigned long flags)
{
  #line 41 
  ldv_inline_asm();
  #line 42 
  return;
}

#line 173  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/cpufeature.h"
__inline static bool _static_cpu_has(u16 bit)
{
  #line 177 
  ldv_inline_asm();
  #line 178 
  ldv_inline_asm();
  #line 211 
  t_yes: 
         #line 211 
  ;
  #line 212 
  return (_Bool)1;
  #line 213 
  t_no: 
        #line 213 
  ;
  #line 214 
  return (_Bool)0;
}

#line 77  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/preempt.h"
__inline static void __preempt_count_add(int val)
{
  #line 79 
  int tmp;
  #line 79 
  if (0 != 0 && (val == 1 || val == -1)) 
                                         #line 79 
                                         tmp = val; else 
                                                         #line 79 
                                                         tmp = 0;
  #line 79 
  int pao_ID__ = tmp;
  #line 79 
  switch (4UL) {
    #line 79 
    case (unsigned long)1: 
                           #line 79 
    ;
    #line 79 
    if (pao_ID__ == 1) 
                       #line 81 
                       ldv_inline_asm();
    else 
      #line 79 
      if (pao_ID__ == -1) 
                          #line 81 
                          ldv_inline_asm(); else 
                                                 #line 84 
                                                 ldv_inline_asm();
    #line 79 
    break;
    #line 79 
    case (unsigned long)2: 
                           #line 79 
    ;
    #line 79 
    if (pao_ID__ == 1) 
                       #line 81 
                       ldv_inline_asm();
    else 
      #line 79 
      if (pao_ID__ == -1) 
                          #line 81 
                          ldv_inline_asm(); else 
                                                 #line 84 
                                                 ldv_inline_asm();
    #line 79 
    break;
    #line 79 
    case (unsigned long)4: 
                           #line 79 
    ;
    #line 79 
    if (pao_ID__ == 1) 
                       #line 81 
                       ldv_inline_asm();
    else 
      #line 79 
      if (pao_ID__ == -1) 
                          #line 81 
                          ldv_inline_asm(); else 
                                                 #line 84 
                                                 ldv_inline_asm();
    #line 79 
    break;
    #line 79 
    case (unsigned long)8: 
                           #line 79 
    ;
    #line 79 
    if (pao_ID__ == 1) 
                       #line 81 
                       ldv_inline_asm();
    else 
      #line 79 
      if (pao_ID__ == -1) 
                          #line 81 
                          ldv_inline_asm(); else 
                                                 #line 84 
                                                 ldv_inline_asm();
    #line 79 
    break;
    #line 79 
    default: 
             #line 79 
    ;
    #line 79 
    __bad_percpu_size();
  }
  #line 82 
  return;
}

#line 82  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/preempt.h"
__inline static void __preempt_count_sub(int val)
{
  #line 84 
  int tmp;
  #line 84 
  if (0 != 0 && (val == -1 || val == 1)) 
                                         #line 84 
                                         tmp = - val; else 
                                                           #line 84 
                                                           tmp = 0;
  #line 84 
  int pao_ID__ = tmp;
  #line 84 
  switch (4UL) {
    #line 84 
    case (unsigned long)1: 
                           #line 84 
    ;
    #line 84 
    if (pao_ID__ == 1) 
                       #line 86 
                       ldv_inline_asm();
    else 
      #line 84 
      if (pao_ID__ == -1) 
                          #line 86 
                          ldv_inline_asm(); else 
                                                 #line 89 
                                                 ldv_inline_asm();
    #line 84 
    break;
    #line 84 
    case (unsigned long)2: 
                           #line 84 
    ;
    #line 84 
    if (pao_ID__ == 1) 
                       #line 86 
                       ldv_inline_asm();
    else 
      #line 84 
      if (pao_ID__ == -1) 
                          #line 86 
                          ldv_inline_asm(); else 
                                                 #line 89 
                                                 ldv_inline_asm();
    #line 84 
    break;
    #line 84 
    case (unsigned long)4: 
                           #line 84 
    ;
    #line 84 
    if (pao_ID__ == 1) 
                       #line 86 
                       ldv_inline_asm();
    else 
      #line 84 
      if (pao_ID__ == -1) 
                          #line 86 
                          ldv_inline_asm(); else 
                                                 #line 89 
                                                 ldv_inline_asm();
    #line 84 
    break;
    #line 84 
    case (unsigned long)8: 
                           #line 84 
    ;
    #line 84 
    if (pao_ID__ == 1) 
                       #line 86 
                       ldv_inline_asm();
    else 
      #line 84 
      if (pao_ID__ == -1) 
                          #line 86 
                          ldv_inline_asm(); else 
                                                 #line 89 
                                                 ldv_inline_asm();
    #line 84 
    break;
    #line 84 
    default: 
             #line 84 
    ;
    #line 84 
    __bad_percpu_size();
  }
  #line 87 
  return;
}

#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bottom_half.h"
#line 8 
void __local_bh_disable_ip(unsigned long, unsigned int);
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bottom_half.h"
__inline static void local_bh_disable(void)
{
  #line 19 
  __here_0: 
            #line 19 
  ;
  #line 19 
  __local_bh_disable_ip((unsigned long)((void *)0),512U);
  #line 21 
  return;
}

#line 23 
#line 23 
void __local_bh_enable_ip(unsigned long, unsigned int);
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bottom_half.h"
__inline static void local_bh_enable(void)
{
  #line 32 
  __here_0: 
            #line 32 
  ;
  #line 32 
  __local_bh_enable_ip((unsigned long)((void *)0),512U);
  #line 34 
  return;
}

#line 302  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockdep.h"
#line 302 
void lockdep_init_map(struct lockdep_map *, char *, struct lock_class_key *, int);
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_api_smp.h"
#line 22 
void _raw_spin_lock(raw_spinlock_t *);
#line 39 
#line 39 
void _raw_spin_unlock(raw_spinlock_t *);
#line 336  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static void spin_lock(spinlock_t *lock)
{
  #line 338 
  _raw_spin_lock(& lock->__anonCompField_spinlock_25.rlock);
  #line 339 
  return;
}

#line 340 
#line 616  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amazon/ena/ena.ko/concurrency safety/0/concurrency safety/weaver/ena_netdev.i.aux"
static void cif_spin_lock__xmit_lock_of_netdev_queue(spinlock_t *lock);
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static void spin_unlock(spinlock_t *lock)
{
  #line 378 
  _raw_spin_unlock(& lock->__anonCompField_spinlock_25.rlock);
  #line 379 
  return;
}

#line 380 
#line 656  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amazon/ena/ena.ko/concurrency safety/0/concurrency safety/weaver/ena_netdev.i.aux"
static void cif_spin_unlock__xmit_lock_of_netdev_queue(spinlock_t *lock);
#line 40 
#line 40 
void ldv_spin_model_lock(char *);
#line 41 
#line 41 
void ldv_spin_model_unlock(char *);
#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/bitmap.h"
#line 21 
void ldv_set_bit(long nr, unsigned long *addr);
#line 22 
#line 22 
void ldv_clear_bit(long nr, unsigned long *addr);
#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/find_bit.h"
#line 21 
unsigned long ldv_find_first_bit(unsigned long *addr, unsigned long size);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/list.h"
#line 23 
void ldv_init_list_head(struct list_head *list);
#line 22  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/vmalloc.h"
#line 22 
void *ldv_vzalloc(unsigned long size);
#line 23 
#line 23 
void ldv_vfree(void *addr);
#line 81  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jiffies.h"
#line 81 
extern unsigned long jiffies;
#line 302 
#line 302 
unsigned long __msecs_to_jiffies(unsigned int);
#line 309  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jiffies.h"
__inline static unsigned long _msecs_to_jiffies(unsigned int m)
{
  #line 311 
  return (unsigned long)(((long)m + 3L) / 4L);
}

#line 364  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jiffies.h"
__inline static unsigned long msecs_to_jiffies(unsigned int m)
{
  #line 366 
  if (0 != 0) {
    #line 367 
    if ((int)m < 0) 
                    #line 368 
                    return 4611686018427387902UL;
    #line 369 
    return _msecs_to_jiffies(m);
  }
  else {
    #line 371 
    return __msecs_to_jiffies(m);
  }
}

#line 67  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timekeeping.h"
#line 67 
ktime_t ktime_get(void);
#line 90  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
#line 90 
void init_timer_key(struct timer_list *, void (*)(struct timer_list *), unsigned int, char *, struct lock_class_key *);
#line 172 
#line 945  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amazon/ena/ena.ko/concurrency safety/0/concurrency safety/weaver/ena_netdev.i.aux"
static int cif_del_timer(struct timer_list *timer);
#line 173  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
#line 921  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amazon/ena/ena.ko/concurrency safety/0/concurrency safety/weaver/ena_netdev.i.aux"
static int cif_mod_timer(struct timer_list *timer, unsigned long expires);
#line 188  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
#line 913  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amazon/ena/ena.ko/concurrency safety/0/concurrency safety/weaver/ena_netdev.i.aux"
static int cif_del_timer_sync(struct timer_list *timer);
#line 209  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
#line 209 
unsigned long round_jiffies(unsigned long);
#line 207  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/workqueue.h"
#line 207 
void __init_work(struct work_struct *, int);
#line 407 
#line 407 
struct workqueue_struct *alloc_workqueue(char *, unsigned int, int , ...);
#line 436 
#line 436 
void destroy_workqueue(struct workqueue_struct *);
#line 462 
#line 462 
bool cancel_work_sync(struct work_struct *);
#line 496 
#line 374  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amazon/ena/ena.ko/concurrency safety/0/concurrency safety/weaver/ena_netdev.i.aux"
static bool cif_queue_work(struct workqueue_struct *wq, struct work_struct *work);
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/topology.h"
#line 48 
int __cpu_to_node(int);
#line 67  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/io.h"
__inline static void writel(unsigned int val, void *addr)
{
  #line 69 
  ldv_inline_asm();
  #line 70 
  return;
}

#line 105  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/vmalloc.h"
#line 883  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amazon/ena/ena.ko/concurrency safety/0/concurrency safety/weaver/ena_netdev.i.aux"
static void *cif_vzalloc(unsigned long size);
#line 108  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/vmalloc.h"
#line 876  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amazon/ena/ena.ko/concurrency safety/0/concurrency safety/weaver/ena_netdev.i.aux"
static void *cif_vzalloc_node(unsigned long size, int node);
#line 130  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/vmalloc.h"
#line 890  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amazon/ena/ena.ko/concurrency safety/0/concurrency safety/weaver/ena_netdev.i.aux"
static void cif_vfree(void *addr);
#line 527  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/gfp.h"
#line 527 
struct page *alloc_pages_current(gfp_t, unsigned int);
#line 530  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/gfp.h"
__inline static struct page *alloc_pages(gfp_t gfp_mask, unsigned int order)
{
  #line 532 
  return alloc_pages_current(gfp_mask,order);
}

#line 566 
#line 566 
void __free_pages(struct page *, unsigned int);
#line 35  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cpu_rmap.h"
#line 35 
struct cpu_rmap *alloc_cpu_rmap(unsigned int, gfp_t);
#line 58  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cpu_rmap.h"
__inline static struct cpu_rmap *alloc_irq_cpu_rmap(unsigned int size)
{
  #line 60 
  return alloc_cpu_rmap(size,3264U);
}

#line 62 
#line 62 
void free_irq_cpu_rmap(struct cpu_rmap *);
#line 64 
#line 64 
int irq_cpu_rmap_add(struct cpu_rmap *, int);
#line 628  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm.h"
__inline static bool is_vmalloc_addr(void *x)
{
  #line 633 
  int tmp_1;
  #line 631 
  unsigned long addr = (unsigned long)x;
  #line 633 
  if (addr >= vmalloc_base) {
    #line 633 
    unsigned long tmp_0;
    #line 633 
    if ((int)_static_cpu_has((unsigned short)528) != 0) 
                                                        #line 633 
                                                        tmp_0 = 14073748835532800UL; else 
                                                                    #line 633 
                                                                    tmp_0 = 35184372088832UL;
    #line 633 
    ;
    #line 633 
    if ((tmp_0 + vmalloc_base) + 18446744073709551615UL > addr) 
                                                                #line 633 
                                                                tmp_1 = 1; else 
                                                                    #line 633 
                                                                    tmp_1 = 0;
  }
  else 
       #line 633 
       tmp_1 = 0;
  #line 633 
  return (_Bool)(tmp_1 != 0);
}

#line 1299  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm.h"
__inline static void *lowmem_page_address(struct page *page)
{
  #line 1301 
  return (void *)((unsigned long)((unsigned long long)((page - (struct page *)vmemmap_base) / 64L) << 12) + page_offset_base);
}

#line 38  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/random.h"
#line 38 
void get_random_bytes(void *, int);
#line 89  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject.h"
__inline static char *kobject_name(struct kobject *kobj)
{
  #line 91 
  return kobj->name;
}

#line 1370  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
__inline static char *dev_name(struct device *dev)
{
  #line 1373 
  if (dev->init_name != (char *)0) 
                                   #line 1374 
                                   return dev->init_name;
  #line 1376 
  return kobject_name(& dev->kobj);
}

#line 1417  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
__inline static void *dev_get_drvdata(struct device *dev)
{
  #line 1419 
  return dev->driver_data;
}

#line 1422  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
__inline static void dev_set_drvdata(struct device *dev, void *data)
{
  #line 1424 
  dev->driver_data = data;
  #line 1425 
  return;
}

#line 1680 
#line 1680 
char *dev_driver_string(struct device *);
#line 1712 
#line 1712 
void _dev_err(struct device *, char * , ...);
#line 1718 
#line 1718 
void _dev_info(struct device *, char * , ...);
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-debug.h"
#line 21 
void debug_dma_map_single(struct device *, void *, unsigned long);
#line 24 
#line 24 
void debug_dma_map_page(struct device *, struct page *, size_t, size_t, int, dma_addr_t);
#line 28 
#line 28 
void debug_dma_mapping_error(struct device *, dma_addr_t);
#line 30 
#line 30 
void debug_dma_unmap_page(struct device *, dma_addr_t, size_t, int);
#line 52 
#line 52 
void debug_dma_sync_single_for_cpu(struct device *, dma_addr_t, size_t, int);
#line 56 
#line 56 
void debug_dma_sync_single_for_device(struct device *, dma_addr_t, size_t, int);
#line 143  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static int valid_dma_direction(int dma_direction)
{
  #line 146 
  return (unsigned int)dma_direction <= 2U;
}

#line 191  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static bool dma_is_direct(struct dma_map_ops *ops)
{
  #line 193 
  return (_Bool)((long)(ops == (struct dma_map_ops *)0) != 0L);
}

#line 200 
#line 200 
dma_addr_t dma_direct_map_page(struct device *, struct page *, unsigned long, size_t, enum dma_data_direction, unsigned long);
#line 210 
#line 210 
void dma_direct_sync_single_for_device(struct device *, dma_addr_t, size_t, enum dma_data_direction);
#line 228 
#line 228 
void dma_direct_unmap_page(struct device *, dma_addr_t, size_t, enum dma_data_direction, unsigned long);
#line 232 
#line 232 
void dma_direct_sync_single_for_cpu(struct device *, dma_addr_t, size_t, enum dma_data_direction);
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/dma-mapping.h"
#line 19 
extern struct dma_map_ops *dma_ops;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/dma-mapping.h"
__inline static struct dma_map_ops *get_arch_dma_ops(struct bus_type *bus)
{
  #line 23 
  return dma_ops;
}

#line 261  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static struct dma_map_ops *get_dma_ops(struct device *dev)
{
  #line 263 
  if (dev->dma_ops != (struct dma_map_ops *)0) 
                                               #line 264 
                                               return dev->dma_ops;
  #line 265 
  return get_arch_dma_ops(dev->bus);
}

#line 274  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static dma_addr_t dma_map_page_attrs(struct device *dev, struct page *page, size_t offset, size_t size, enum dma_data_direction dir, unsigned long attrs)
{
  #line 279 
  dma_addr_t addr;
  #line 278 
  struct dma_map_ops *ops = get_dma_ops(dev);
  #line 281 
  if ((long)(valid_dma_direction((int)dir) == 0) != 0L) {
    #line 282 
    ldv_inline_asm();
    #line 283 
    ldv_inline_asm();
    #line 284 
    ldv_inline_asm();
    #line 281 
    ;
  }
  #line 282 
  if ((int)dma_is_direct(ops) != 0) 
                                    #line 283 
                                    addr = dma_direct_map_page(dev,page,offset,size,dir,attrs); else 
                                                                    #line 285 
                                                                    addr = (*(ops->map_page))(dev,page,offset,size,dir,attrs);
  #line 286 
  debug_dma_map_page(dev,page,offset,size,(int)dir,addr);
  #line 288 
  return addr;
}

#line 291  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static void dma_unmap_page_attrs(struct device *dev, dma_addr_t addr, size_t size, enum dma_data_direction dir, unsigned long attrs)
{
  #line 294 
  struct dma_map_ops *ops = get_dma_ops(dev);
  #line 296 
  if ((long)(valid_dma_direction((int)dir) == 0) != 0L) {
    #line 297 
    ldv_inline_asm();
    #line 298 
    ldv_inline_asm();
    #line 299 
    ldv_inline_asm();
    #line 296 
    ;
  }
  #line 297 
  if ((int)dma_is_direct(ops) != 0) 
                                    #line 298 
                                    dma_direct_unmap_page(dev,addr,size,dir,attrs);
  else 
    #line 299 
    if (ops->unmap_page != (void (*)(struct device *, dma_addr_t , size_t , enum dma_data_direction , unsigned long ))0) 
      #line 300 
      (*(ops->unmap_page))(dev,addr,size,dir,attrs);
  #line 301 
  debug_dma_unmap_page(dev,addr,size,(int)dir);
  #line 302 
  return;
}

#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static void dma_sync_single_for_cpu(struct device *dev, dma_addr_t addr, size_t size, enum dma_data_direction dir)
{
  #line 380 
  struct dma_map_ops *ops = get_dma_ops(dev);
  #line 382 
  if ((long)(valid_dma_direction((int)dir) == 0) != 0L) {
    #line 383 
    ldv_inline_asm();
    #line 384 
    ldv_inline_asm();
    #line 385 
    ldv_inline_asm();
    #line 382 
    ;
  }
  #line 383 
  if ((int)dma_is_direct(ops) != 0) 
                                    #line 384 
                                    dma_direct_sync_single_for_cpu(dev,addr,size,dir);
  else 
    #line 385 
    if (ops->sync_single_for_cpu != (void (*)(struct device *, dma_addr_t , size_t , enum dma_data_direction ))0) 
      #line 386 
      (*(ops->sync_single_for_cpu))(dev,addr,size,dir);
  #line 387 
  debug_dma_sync_single_for_cpu(dev,addr,size,(int)dir);
  #line 388 
  return;
}

#line 390  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static void dma_sync_single_for_device(struct device *dev, dma_addr_t addr, size_t size, enum dma_data_direction dir)
{
  #line 394 
  struct dma_map_ops *ops = get_dma_ops(dev);
  #line 396 
  if ((long)(valid_dma_direction((int)dir) == 0) != 0L) {
    #line 397 
    ldv_inline_asm();
    #line 398 
    ldv_inline_asm();
    #line 399 
    ldv_inline_asm();
    #line 396 
    ;
  }
  #line 397 
  if ((int)dma_is_direct(ops) != 0) 
                                    #line 398 
                                    dma_direct_sync_single_for_device(dev,addr,size,dir);
  else 
    #line 399 
    if (ops->sync_single_for_device != (void (*)(struct device *, dma_addr_t , size_t , enum dma_data_direction ))0) 
      #line 400 
      (*(ops->sync_single_for_device))(dev,addr,size,dir);
  #line 401 
  debug_dma_sync_single_for_device(dev,addr,size,(int)dir);
  #line 402 
  return;
}

#line 433  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static int dma_mapping_error(struct device *dev, dma_addr_t dma_addr)
{
  #line 435 
  debug_dma_mapping_error(dev,dma_addr);
  #line 437 
  if (dma_addr == 18446744073709551615ULL) 
                                           #line 438 
                                           return -12;
  #line 439 
  return 0;
}

#line 460 
#line 460 
int dma_set_mask(struct device *, u64);
#line 461 
#line 461 
int dma_set_coherent_mask(struct device *, u64);
#line 580  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static dma_addr_t dma_map_single_attrs(struct device *dev, void *ptr, size_t size, enum dma_data_direction dir, unsigned long attrs)
{
  #line 584 
  int __ret_warn_once;
  {
    #line 584 
    bool __warned;
    #line 584 
    __ret_warn_once = (int)is_vmalloc_addr(ptr) != 0;
    #line 584 
    if ((long)(__ret_warn_once != 0) != 0L && (long)(! __warned) != 0L) {
      #line 584 
      __warned = (_Bool)1;
      {
        #line 584 
        int __ret_warn_on = 1;
        #line 584 
        if ((long)(__ret_warn_on != 0) != 0L) {
          #line 584 
          __warn_printk((char *)"%s %s: ",dev_driver_string(dev),dev_name(dev));
          #line 585 
          ldv_inline_asm();
          #line 586 
          ldv_inline_asm();
        }
        #line 584 
        long tmp_2 = (long)(__ret_warn_on != 0);
      }
    }
    }
  #line 584 
  if ((long)((long)(__ret_warn_once != 0)) != 0L) 
                                                  #line 586 
                                                  return 18446744073709551615ULL;
  #line 587 
  debug_dma_map_single(dev,ptr,size);
  #line 588 
  ;
  #line 588 
  ;
  #line 588 
  ;
  #line 588 
  ;
  #line 588 
  ;
  #line 588 
  ;
  #line 588 
  return dma_map_page_attrs(dev,
                           (struct page *)((__phys_addr((unsigned long)ptr) >> 12) + vmemmap_base),
                           (unsigned long)ptr & 4095UL,size,dir,attrs);
}

#line 592  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static void dma_unmap_single_attrs(struct device *dev, dma_addr_t addr, size_t size, enum dma_data_direction dir, unsigned long attrs)
{
  #line 595 
  dma_unmap_page_attrs(dev,addr,size,dir,attrs);
  #line 596 
  return;
}

#line 325  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static unsigned int skb_frag_size(skb_frag_t *frag)
{
  #line 327 
  return frag->bv_len;
}

#line 1023 
#line 1023 
void consume_skb(struct sk_buff *);
#line 1214  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static void __skb_set_hash(struct sk_buff *skb, __u32 hash, bool is_sw, bool is_l4)
{
  #line 1216 
  skb->l4_hash = (unsigned char)is_l4;
  #line 1217 
  skb->sw_hash = (unsigned char)is_sw;
  #line 1218 
  skb->hash = hash;
  #line 1219 
  return;
}

#line 1222  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static void skb_set_hash(struct sk_buff *skb, __u32 hash, enum pkt_hash_types type)
{
  #line 1225 
  __skb_set_hash(skb,hash,(_Bool)0,(_Bool)(type == (unsigned int)PKT_HASH_TYPE_L4));
  #line 1226 
  return;
}

#line 1381  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static unsigned char *skb_end_pointer(struct sk_buff *skb)
{
  #line 1383 
  return skb->head + (unsigned long)skb->end;
}

#line 2065  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static bool skb_is_nonlinear(struct sk_buff *skb)
{
  #line 2067 
  return (_Bool)(skb->data_len != 0U);
}

#line 2070  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static unsigned int skb_headlen(struct sk_buff *skb)
{
  #line 2072 
  return skb->len - skb->data_len;
}

#line 2142 
#line 2142 
void skb_add_rx_frag(struct sk_buff *, int, struct page *, int, int, unsigned int);
#line 2189 
#line 2189 
void *skb_put(struct sk_buff *, unsigned int);
#line 2266 
#line 2266 
void *__pskb_pull_tail(struct sk_buff *, int);
#line 2458  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static unsigned char *skb_transport_header(struct sk_buff *skb)
{
  #line 2460 
  return skb->head + (unsigned long)skb->transport_header;
}

#line 2475  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static unsigned char *skb_network_header(struct sk_buff *skb)
{
  #line 2477 
  return skb->head + (unsigned long)skb->network_header;
}

#line 2564  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static u32 skb_network_header_len(struct sk_buff *skb)
{
  #line 2566 
  return (unsigned int)((int)skb->transport_header - (int)skb->network_header);
}

#line 2574  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static int skb_network_offset(struct sk_buff *skb)
{
  #line 2576 
  ;
  #line 2576 
  return (int)(skb_network_header(skb) - skb->data);
}

#line 2762 
#line 2762 
struct sk_buff *__netdev_alloc_skb(struct net_device *, unsigned int, gfp_t);
#line 2798  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static struct sk_buff *__netdev_alloc_skb_ip_align(struct net_device *dev, unsigned int length, gfp_t gfp)
{
  #line 2801 
  struct sk_buff *skb = __netdev_alloc_skb(dev,length,gfp);
  #line 2805 
  return skb;
}

#line 2808  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static struct sk_buff *netdev_alloc_skb_ip_align(struct net_device *dev, unsigned int length)
{
  #line 2811 
  return __netdev_alloc_skb_ip_align(dev,length,2592U);
}

#line 2896  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static unsigned int skb_frag_off(skb_frag_t *frag)
{
  #line 2898 
  return frag->bv_offset;
}

#line 2938  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static struct page *skb_frag_page(skb_frag_t *frag)
{
  #line 2940 
  return frag->bv_page;
}

#line 3067  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static dma_addr_t skb_frag_dma_map(struct device *dev, skb_frag_t *frag, size_t offset, size_t size, enum dma_data_direction dir)
{
  #line 3072 
  ;
  #line 3072 
  ;
  #line 3072 
  ;
  #line 3072 
  ;
  #line 3072 
  return dma_map_page_attrs(dev,skb_frag_page(frag),
                           (unsigned long)skb_frag_off(frag) + offset,size,
                           dir,0UL);
}

#line 3248  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static int __skb_linearize(struct sk_buff *skb)
{
  #line 3250 
  int tmp_0;
  #line 3250 
  if (__pskb_pull_tail(skb,(int)skb->data_len) != (void *)0) 
                                                             #line 3250 
                                                             tmp_0 = 0; else 
                                                                    #line 3250 
                                                                    tmp_0 = -12;
  #line 3250 
  return tmp_0;
}

#line 3260  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static int skb_linearize(struct sk_buff *skb)
{
  #line 3262 
  int tmp_1;
  #line 3262 
  if ((int)skb_is_nonlinear(skb) != 0) 
                                       #line 3262 
                                       tmp_1 = __skb_linearize(skb); else 
                                                                    #line 3262 
                                                                    tmp_1 = 0;
  #line 3262 
  return tmp_1;
}

#line 3507 
#line 3507 
int skb_copy_bits(struct sk_buff *, int, void *, int);
#line 3563  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static void *__skb_header_pointer(struct sk_buff *skb, int offset, int len, void *data, int hlen, void *buffer)
{
  #line 3566 
  if (hlen - offset >= len) 
                            #line 3567 
                            return data + (unsigned long)offset;
  #line 3569 
  if (skb == (struct sk_buff *)0) 
                                  #line 3571 
                                  return (void *)0;
  else {
    #line 3569 
    if (skb_copy_bits(skb,offset,buffer,len) < 0) 
                                                  #line 3571 
                                                  return (void *)0;
  }
  #line 3573 
  return buffer;
}

#line 3577  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static void *skb_header_pointer(struct sk_buff *skb, int offset, int len, void *buffer)
{
  #line 3579 
  ;
  #line 3579 
  ;
  #line 3579 
  ;
  #line 3579 
  ;
  #line 3579 
  ;
  #line 3579 
  return __skb_header_pointer(skb,offset,len,(void *)skb->data,
                             (int)skb_headlen(skb),buffer);
}

#line 3615  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static void skb_copy_to_linear_data(struct sk_buff *skb, void *from, unsigned int len)
{
  #line 3619 
  memcpy((void *)skb->data,from,(unsigned long)len);
  #line 3620 
  return;
}

#line 3767 
#line 3767 
void skb_clone_tx_timestamp(struct sk_buff *);
#line 3813 
#line 3813 
void skb_tstamp_tx(struct sk_buff *, struct skb_shared_hwtstamps *);
#line 3828  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static void skb_tx_timestamp(struct sk_buff *skb)
{
  #line 3830 
  skb_clone_tx_timestamp(skb);
  #line 3831 
  ;
  #line 3831 
  if (((int)((struct skb_shared_info *)skb_end_pointer(skb))->tx_flags & 2) != 0) 
    #line 3832 
    skb_tstamp_tx(skb,(struct skb_shared_hwtstamps *)0);
  #line 3833 
  return;
}

#line 4277  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static u16 skb_get_queue_mapping(struct sk_buff *skb)
{
  #line 4279 
  return skb->queue_mapping;
}

#line 4287  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static void skb_record_rx_queue(struct sk_buff *skb, u16 rx_queue)
{
  #line 4289 
  skb->queue_mapping = (unsigned short)((unsigned int)rx_queue + 1U);
  #line 4290 
  return;
}

#line 4292  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static u16 skb_get_rx_queue(struct sk_buff *skb)
{
  #line 4294 
  return (unsigned short)((unsigned int)skb->queue_mapping + 65535U);
}

#line 4297  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static bool skb_rx_queue_recorded(struct sk_buff *skb)
{
  #line 4299 
  return (_Bool)((unsigned int)skb->queue_mapping != 0U);
}

#line 96  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ethtool.h"
__inline static u32 ethtool_rxfh_indir_default(u32 index, u32 n_rx_rings)
{
  #line 98 
  return index % n_rx_rings;
}

#line 73  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dynamic_queue_limits.h"
__inline static void dql_queued(struct dql *dql, unsigned int count)
{
  #line 75 
  if ((long)(count > 268435455U) != 0L) {
    #line 76 
    ldv_inline_asm();
    #line 77 
    ldv_inline_asm();
    #line 78 
    ldv_inline_asm();
    #line 75 
    ;
  }
  #line 77 
  dql->last_obj_cnt = count;
  #line 78 
  ldv_inline_asm();
  #line 86 
  dql->num_queued += count;
  #line 87 
  return;
}

#line 90  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dynamic_queue_limits.h"
__inline static int dql_avail(struct dql *dql)
{
  #line 93 
  union __anonunion___u_560 __u_0;
  #line 93 
  union __anonunion___u_558 __u;
  #line 92 
  unsigned int tmp;
  #line 92 
  __read_once_size((void *)(& dql->adj_limit),(void *)(& __u.__c),4);
  #line 92 
  tmp = __u.__val;
  #line 92 
  __read_once_size((void *)(& dql->num_queued),(void *)(& __u_0.__c),4);
  #line 92 
  return (int)(tmp - (__u_0.__val));
}

#line 96 
#line 96 
void dql_completed(struct dql *, unsigned int);
#line 99 
#line 99 
void dql_reset(struct dql *);
#line 115  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/u64_stats_sync.h"
__inline static void u64_stats_init(struct u64_stats_sync *syncp)
{
  #line 117 
  return;
}

#line 158  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/u64_stats_sync.h"
__inline static unsigned int __u64_stats_fetch_begin(struct u64_stats_sync *syncp)
{
  #line 163 
  return 0U;
}

#line 175  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/u64_stats_sync.h"
__inline static bool __u64_stats_fetch_retry(struct u64_stats_sync *syncp, unsigned int start)
{
  #line 181 
  return (_Bool)0;
}

#line 200  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/u64_stats_sync.h"
__inline static unsigned int u64_stats_fetch_begin_irq(struct u64_stats_sync *syncp)
{
  #line 205 
  return __u64_stats_fetch_begin(syncp);
}

#line 208  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/u64_stats_sync.h"
__inline static bool u64_stats_fetch_retry_irq(struct u64_stats_sync *syncp, unsigned int start)
{
  #line 214 
  return __u64_stats_fetch_retry(syncp,start);
}

#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/hardirq.h"
#line 12 
void synchronize_irq(unsigned int);
#line 162  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/interrupt.h"
#line 897  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amazon/ena/ena.ko/concurrency safety/0/concurrency safety/weaver/ena_netdev.i.aux"
static int cif_request_irq(unsigned int irq, irqreturn_t (*handler)(int , void *), unsigned long flags, char *name, void *dev);
#line 189  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/interrupt.h"
#line 905  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amazon/ena/ena.ko/concurrency safety/0/concurrency safety/weaver/ena_netdev.i.aux"
static void *cif_free_irq(unsigned int ldv_func_arg1, void *ldv_func_arg2);
#line 352  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/interrupt.h"
#line 352 
int irq_set_affinity_hint(unsigned int, struct cpumask *);
#line 423  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
#line 423 
void __napi_schedule(struct napi_struct *);
#line 424 
#line 424 
void __napi_schedule_irqoff(struct napi_struct *);
#line 431 
#line 431 
bool napi_schedule_prep(struct napi_struct *);
#line 440  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void napi_schedule(struct napi_struct *n)
{
  #line 442 
  if ((int)napi_schedule_prep(n) != 0) 
                                       #line 443 
                                       __napi_schedule(n);
  #line 444 
  return;
}

#line 452  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void napi_schedule_irqoff(struct napi_struct *n)
{
  #line 454 
  if ((int)napi_schedule_prep(n) != 0) 
                                       #line 455 
                                       __napi_schedule_irqoff(n);
  #line 456 
  return;
}

#line 468 
#line 468 
bool napi_complete_done(struct napi_struct *, int);
#line 503 
#line 503 
void napi_disable(struct napi_struct *);
#line 512  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void napi_enable(struct napi_struct *n)
{
  #line 514 
  int tmp_0;
  #line 514 
  if (test_bit(0L,& n->state)) 
                               #line 514 
                               tmp_0 = 0; else 
                                               #line 514 
                                               tmp_0 = 1;
  #line 514 
  if ((long)tmp_0 != 0L) {
    #line 515 
    ldv_inline_asm();
    #line 516 
    ldv_inline_asm();
    #line 517 
    ldv_inline_asm();
    #line 514 
    ;
  }
  #line 516 
  cif_clear_bit(0L,& n->state);
  #line 517 
  cif_clear_bit(3L,& n->state);
  #line 518 
  return;
}

#line 2132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static struct netdev_queue *netdev_get_tx_queue(struct net_device *dev, unsigned int index)
{
  #line 2135 
  return dev->_tx + (unsigned long)index;
}

#line 2156 
#line 2156 
u16 netdev_pick_tx(struct net_device *, struct sk_buff *, struct net_device *);
#line 2203  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void *netdev_priv(struct net_device *dev)
{
  #line 2205 
  return (void *)((char *)dev + 3328UL);
}

#line 2234 
#line 2234 
void netif_napi_add(struct net_device *, struct napi_struct *, int (*)(struct napi_struct *, int ), int);
#line 2263 
#line 2263 
void netif_napi_del(struct napi_struct *);
#line 2679 
#line 953  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amazon/ena/ena.ko/concurrency safety/0/concurrency safety/weaver/ena_netdev.i.aux"
static void cif_free_netdev(struct net_device *dev);
#line 3094  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
#line 3094 
void netif_schedule_queue(struct netdev_queue *);
#line 3104  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void netif_tx_start_queue(struct netdev_queue *dev_queue)
{
  #line 3106 
  cif_clear_bit(0L,& dev_queue->state);
  #line 3107 
  return;
}

#line 3120  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void netif_tx_start_all_queues(struct net_device *dev)
{
  #line 3122 
  unsigned int i;
  #line 3124 
  i = 0U;
  #line 3124 
  while (dev->num_tx_queues > i) {
    {
      #line 3125 
      struct netdev_queue *txq = netdev_get_tx_queue(dev,i);
      #line 3126 
      netif_tx_start_queue(txq);
    }
    #line 3124 
    i ++;
  }
  #line 3128 
  return;
}

#line 3130 
#line 3130 
void netif_tx_wake_queue(struct netdev_queue *);
#line 3154  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void netif_tx_stop_queue(struct netdev_queue *dev_queue)
{
  #line 3156 
  cif_set_bit(0L,& dev_queue->state);
  #line 3157 
  return;
}

#line 3174  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static bool netif_tx_queue_stopped(struct netdev_queue *dev_queue)
{
  #line 3176 
  return test_bit(0L,& dev_queue->state);
}

#line 3190  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static bool netif_xmit_stopped(struct netdev_queue *dev_queue)
{
  #line 3192 
  return (_Bool)((dev_queue->state & 3UL) != 0UL);
}

#line 3235  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void netdev_tx_sent_queue(struct netdev_queue *dev_queue, unsigned int bytes)
{
  #line 3239 
  dql_queued(& dev_queue->dql,bytes);
  #line 3241 
  if ((long)(dql_avail(& dev_queue->dql) >= 0) != 0L) 
                                                      #line 3242 
                                                      return;
  #line 3244 
  cif_set_bit(1L,& dev_queue->state);
  #line 3245 
  ldv_inline_asm();
  #line 3254 
  if ((long)(dql_avail(& dev_queue->dql) >= 0) != 0L) 
                                                      #line 3255 
                                                      cif_clear_bit(1L,& dev_queue->state);
  #line 3256 
  return;
}

#line 3301  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void netdev_tx_completed_queue(struct netdev_queue *dev_queue, unsigned int pkts, unsigned int bytes)
{
  #line 3305 
  if ((long)(bytes == 0U) != 0L) 
                                 #line 3306 
                                 return;
  #line 3308 
  dql_completed(& dev_queue->dql,bytes);
  #line 3309 
  ldv_inline_asm();
  #line 3317 
  if ((long)(dql_avail(& dev_queue->dql) < 0) != 0L) 
                                                     #line 3318 
                                                     return;
  #line 3320 
  if ((int)test_and_set_bit(1L,& dev_queue->state) != 0) 
                                                         #line 3321 
                                                         netif_schedule_queue(dev_queue);
  #line 3322 
  return;
}

#line 3341  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void netdev_tx_reset_queue(struct netdev_queue *q)
{
  #line 3344 
  cif_clear_bit(1L,& q->state);
  #line 3345 
  dql_reset(& q->dql);
  #line 3346 
  return;
}

#line 3387  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static bool netif_running(struct net_device *dev)
{
  #line 3389 
  return test_bit(0L,& dev->state);
}

#line 3577 
#line 3577 
int netif_set_real_num_tx_queues(struct net_device *, unsigned int);
#line 3580 
#line 3580 
int netif_set_real_num_rx_queues(struct net_device *, unsigned int);
#line 3617 
#line 3617 
void __dev_kfree_skb_any(struct sk_buff *, enum skb_free_reason);
#line 3648  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void dev_kfree_skb_any(struct sk_buff *skb)
{
  #line 3650 
  __dev_kfree_skb_any(skb,(enum skb_free_reason)SKB_REASON_DROPPED);
  #line 3651 
  return;
}

#line 3665 
#line 3665 
gro_result_t napi_gro_receive(struct napi_struct *, struct sk_buff *);
#line 3667 
#line 3667 
struct sk_buff *napi_get_frags(struct napi_struct *);
#line 3668 
#line 3668 
gro_result_t napi_gro_frags(struct napi_struct *);
#line 3812 
#line 3812 
void netif_carrier_on(struct net_device *);
#line 3814 
#line 3814 
void netif_carrier_off(struct net_device *);
#line 3923  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static u32 netif_msg_init(int debug_value, int default_msg_enable_bits)
{
  #line 3926 
  if ((unsigned int)debug_value > 31U) 
                                       #line 3927 
                                       return (unsigned int)default_msg_enable_bits;
  #line 3928 
  if (debug_value == 0) 
                        #line 3929 
                        return 0U;
  #line 3931 
  return (1U << debug_value) + 4294967295U;
}

#line 3934  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void __netif_tx_lock(struct netdev_queue *txq, int cpu)
{
  #line 3936 
  cif_spin_lock__xmit_lock_of_netdev_queue(& txq->_xmit_lock);
  #line 3937 
  txq->xmit_lock_owner = cpu;
  #line 3938 
  return;
}

#line 3965  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void __netif_tx_unlock(struct netdev_queue *txq)
{
  #line 3967 
  txq->xmit_lock_owner = -1;
  #line 3968 
  cif_spin_unlock__xmit_lock_of_netdev_queue(& txq->_xmit_lock);
  #line 3969 
  return;
}

#line 4070  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void netif_tx_disable(struct net_device *dev)
{
  #line 4076 
  int pscr_ret__;
  #line 4072 
  unsigned int i;
  #line 4073 
  int cpu;
  #line 4075 
  local_bh_disable();
  #line 4076 
  __this_cpu_preempt_check((char *)"read");
  {
    #line 4076 
    void *__vpp_verify = (void *)0;
    #line 4076 
    void *tmp = __vpp_verify;
  }
  #line 4076 
  switch (4UL) {
    #line 4076 
    int pfo_ret___2;
    #line 4076 
    int pfo_ret__;
    #line 4076 
    int pfo_ret___0;
    #line 4076 
    int pfo_ret___1;
    #line 4076 
    case (unsigned long)1: 
                           #line 4076 
    ;
    #line 4076 
    switch (4UL) {
      #line 4076 
      case (unsigned long)1: 
                             #line 4076 
      ;
      #line 4077 
      ldv_inline_asm();
      #line 4076 
      break;
      #line 4076 
      case (unsigned long)2: 
                             #line 4076 
      ;
      #line 4077 
      ldv_inline_asm();
      #line 4076 
      break;
      #line 4076 
      case (unsigned long)4: 
                             #line 4076 
      ;
      #line 4077 
      ldv_inline_asm();
      #line 4076 
      break;
      #line 4076 
      case (unsigned long)8: 
                             #line 4076 
      ;
      #line 4077 
      ldv_inline_asm();
      #line 4076 
      break;
      #line 4076 
      default: 
               #line 4076 
      ;
      #line 4076 
      __bad_percpu_size();
    }
    #line 4076 
    pscr_ret__ = pfo_ret__;
    #line 4076 
    break;
    #line 4076 
    case (unsigned long)2: 
                           #line 4076 
    ;
    #line 4076 
    switch (4UL) {
      #line 4076 
      case (unsigned long)1: 
                             #line 4076 
      ;
      #line 4077 
      ldv_inline_asm();
      #line 4076 
      break;
      #line 4076 
      case (unsigned long)2: 
                             #line 4076 
      ;
      #line 4077 
      ldv_inline_asm();
      #line 4076 
      break;
      #line 4076 
      case (unsigned long)4: 
                             #line 4076 
      ;
      #line 4077 
      ldv_inline_asm();
      #line 4076 
      break;
      #line 4076 
      case (unsigned long)8: 
                             #line 4076 
      ;
      #line 4077 
      ldv_inline_asm();
      #line 4076 
      break;
      #line 4076 
      default: 
               #line 4076 
      ;
      #line 4076 
      __bad_percpu_size();
    }
    #line 4076 
    pscr_ret__ = pfo_ret___0;
    #line 4076 
    break;
    #line 4076 
    case (unsigned long)4: 
                           #line 4076 
    ;
    #line 4076 
    switch (4UL) {
      #line 4076 
      case (unsigned long)1: 
                             #line 4076 
      ;
      #line 4077 
      ldv_inline_asm();
      #line 4076 
      break;
      #line 4076 
      case (unsigned long)2: 
                             #line 4076 
      ;
      #line 4077 
      ldv_inline_asm();
      #line 4076 
      break;
      #line 4076 
      case (unsigned long)4: 
                             #line 4076 
      ;
      #line 4077 
      ldv_inline_asm();
      #line 4076 
      break;
      #line 4076 
      case (unsigned long)8: 
                             #line 4076 
      ;
      #line 4077 
      ldv_inline_asm();
      #line 4076 
      break;
      #line 4076 
      default: 
               #line 4076 
      ;
      #line 4076 
      __bad_percpu_size();
    }
    #line 4076 
    pscr_ret__ = pfo_ret___1;
    #line 4076 
    break;
    #line 4076 
    case (unsigned long)8: 
                           #line 4076 
    ;
    #line 4076 
    switch (4UL) {
      #line 4076 
      case (unsigned long)1: 
                             #line 4076 
      ;
      #line 4077 
      ldv_inline_asm();
      #line 4076 
      break;
      #line 4076 
      case (unsigned long)2: 
                             #line 4076 
      ;
      #line 4077 
      ldv_inline_asm();
      #line 4076 
      break;
      #line 4076 
      case (unsigned long)4: 
                             #line 4076 
      ;
      #line 4077 
      ldv_inline_asm();
      #line 4076 
      break;
      #line 4076 
      case (unsigned long)8: 
                             #line 4076 
      ;
      #line 4077 
      ldv_inline_asm();
      #line 4076 
      break;
      #line 4076 
      default: 
               #line 4076 
      ;
      #line 4076 
      __bad_percpu_size();
    }
    #line 4076 
    pscr_ret__ = pfo_ret___2;
    #line 4076 
    break;
    #line 4076 
    default: 
             #line 4076 
    ;
    #line 4076 
    __bad_size_call_parameter();
    #line 4076 
    break;
  }
  #line 4076 
  cpu = pscr_ret__;
  #line 4077 
  i = 0U;
  #line 4077 
  while (dev->num_tx_queues > i) {
    {
      #line 4078 
      struct netdev_queue *txq = netdev_get_tx_queue(dev,i);
      #line 4080 
      __netif_tx_lock(txq,cpu);
      #line 4081 
      netif_tx_stop_queue(txq);
      #line 4082 
      __netif_tx_unlock(txq);
    }
    #line 4077 
    i ++;
  }
  #line 4084 
  local_bh_enable();
  #line 4085 
  return;
}

#line 4131 
#line 937  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amazon/ena/ena.ko/concurrency safety/0/concurrency safety/weaver/ena_netdev.i.aux"
static int cif_register_netdev(struct net_device *dev);
#line 4132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
#line 961  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amazon/ena/ena.ko/concurrency safety/0/concurrency safety/weaver/ena_netdev.i.aux"
static void cif_unregister_netdev(struct net_device *dev);
#line 4452  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static bool netdev_xmit_more(void)
{
  #line 4454 
  u8 pscr_ret__;
  #line 4454 
  __this_cpu_preempt_check((char *)"read");
  {
    #line 4454 
    void *__vpp_verify = (void *)0;
    #line 4454 
    void *tmp = __vpp_verify;
  }
  #line 4454 
  switch (1UL) {
    #line 4454 
    u8 pfo_ret___1;
    #line 4454 
    u8 pfo_ret___2;
    #line 4454 
    u8 pfo_ret__;
    #line 4454 
    u8 pfo_ret___0;
    #line 4454 
    case (unsigned long)1: 
                           #line 4454 
    ;
    #line 4454 
    switch (1UL) {
      #line 4454 
      case (unsigned long)1: 
                             #line 4454 
      ;
      #line 4455 
      ldv_inline_asm();
      #line 4454 
      break;
      #line 4454 
      case (unsigned long)2: 
                             #line 4454 
      ;
      #line 4455 
      ldv_inline_asm();
      #line 4454 
      break;
      #line 4454 
      case (unsigned long)4: 
                             #line 4454 
      ;
      #line 4455 
      ldv_inline_asm();
      #line 4454 
      break;
      #line 4454 
      case (unsigned long)8: 
                             #line 4454 
      ;
      #line 4455 
      ldv_inline_asm();
      #line 4454 
      break;
      #line 4454 
      default: 
               #line 4454 
      ;
      #line 4454 
      __bad_percpu_size();
    }
    #line 4454 
    pscr_ret__ = pfo_ret__;
    #line 4454 
    break;
    #line 4454 
    case (unsigned long)2: 
                           #line 4454 
    ;
    #line 4454 
    switch (1UL) {
      #line 4454 
      case (unsigned long)1: 
                             #line 4454 
      ;
      #line 4455 
      ldv_inline_asm();
      #line 4454 
      break;
      #line 4454 
      case (unsigned long)2: 
                             #line 4454 
      ;
      #line 4455 
      ldv_inline_asm();
      #line 4454 
      break;
      #line 4454 
      case (unsigned long)4: 
                             #line 4454 
      ;
      #line 4455 
      ldv_inline_asm();
      #line 4454 
      break;
      #line 4454 
      case (unsigned long)8: 
                             #line 4454 
      ;
      #line 4455 
      ldv_inline_asm();
      #line 4454 
      break;
      #line 4454 
      default: 
               #line 4454 
      ;
      #line 4454 
      __bad_percpu_size();
    }
    #line 4454 
    pscr_ret__ = pfo_ret___0;
    #line 4454 
    break;
    #line 4454 
    case (unsigned long)4: 
                           #line 4454 
    ;
    #line 4454 
    switch (1UL) {
      #line 4454 
      case (unsigned long)1: 
                             #line 4454 
      ;
      #line 4455 
      ldv_inline_asm();
      #line 4454 
      break;
      #line 4454 
      case (unsigned long)2: 
                             #line 4454 
      ;
      #line 4455 
      ldv_inline_asm();
      #line 4454 
      break;
      #line 4454 
      case (unsigned long)4: 
                             #line 4454 
      ;
      #line 4455 
      ldv_inline_asm();
      #line 4454 
      break;
      #line 4454 
      case (unsigned long)8: 
                             #line 4454 
      ;
      #line 4455 
      ldv_inline_asm();
      #line 4454 
      break;
      #line 4454 
      default: 
               #line 4454 
      ;
      #line 4454 
      __bad_percpu_size();
    }
    #line 4454 
    pscr_ret__ = pfo_ret___1;
    #line 4454 
    break;
    #line 4454 
    case (unsigned long)8: 
                           #line 4454 
    ;
    #line 4454 
    switch (1UL) {
      #line 4454 
      case (unsigned long)1: 
                             #line 4454 
      ;
      #line 4455 
      ldv_inline_asm();
      #line 4454 
      break;
      #line 4454 
      case (unsigned long)2: 
                             #line 4454 
      ;
      #line 4455 
      ldv_inline_asm();
      #line 4454 
      break;
      #line 4454 
      case (unsigned long)4: 
                             #line 4454 
      ;
      #line 4455 
      ldv_inline_asm();
      #line 4454 
      break;
      #line 4454 
      case (unsigned long)8: 
                             #line 4454 
      ;
      #line 4455 
      ldv_inline_asm();
      #line 4454 
      break;
      #line 4454 
      default: 
               #line 4454 
      ;
      #line 4454 
      __bad_percpu_size();
    }
    #line 4454 
    pscr_ret__ = pfo_ret___2;
    #line 4454 
    break;
    #line 4454 
    default: 
             #line 4454 
    ;
    #line 4454 
    __bad_size_call_parameter();
    #line 4454 
    break;
  }
  #line 4454 
  return (_Bool)((unsigned int)pscr_ret__ != 0U);
}

#line 4750 
#line 4750 
void netdev_err(struct net_device *, char * , ...);
#line 4752 
#line 4752 
void netdev_warn(struct net_device *, char * , ...);
#line 4754 
#line 4754 
void netdev_notice(struct net_device *, char * , ...);
#line 4756 
#line 4756 
void netdev_info(struct net_device *, char * , ...);
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/etherdevice.h"
#line 32 
__be16 eth_type_trans(struct sk_buff *, struct net_device *);
#line 47 
#line 47 
int eth_validate_addr(struct net_device *);
#line 51 
#line 929  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amazon/ena/ena.ko/concurrency safety/0/concurrency safety/weaver/ena_netdev.i.aux"
static struct net_device *cif_alloc_etherdev_mqs(int sizeof_priv, unsigned int txqs, unsigned int rxqs);
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/etherdevice.h"
__inline static bool is_zero_ether_addr(u8 *addr)
{
  #line 101 
  return (_Bool)((*((u32 *)addr) | (unsigned int)*((u16 *)(addr + 4U))) == 0U);
}

#line 116  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/etherdevice.h"
__inline static bool is_multicast_ether_addr(u8 *addr)
{
  #line 119 
  u32 a = *((u32 *)addr);
  #line 126 
  return (_Bool)((a & 1U) != 0U);
}

#line 191  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/etherdevice.h"
__inline static bool is_valid_ether_addr(u8 *addr)
{
  #line 195 
  int tmp_1;
  #line 195 
  if (is_multicast_ether_addr(addr)) 
                                     #line 195 
                                     tmp_1 = 0;
  else {
    #line 195 
    if (is_zero_ether_addr(addr)) 
                                  #line 195 
                                  tmp_1 = 0; else 
                                                  #line 195 
                                                  tmp_1 = 1;
  }
  #line 195 
  return (_Bool)(tmp_1 != 0);
}

#line 223  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/etherdevice.h"
__inline static void eth_random_addr(u8 *addr)
{
  #line 225 
  get_random_bytes((void *)addr,6);
  #line 226 
  *addr = (unsigned char)((unsigned int)*addr & 254U);
  #line 227 
  *addr = (unsigned char)((unsigned int)*addr | 2U);
  #line 228 
  return;
}

#line 263  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/etherdevice.h"
__inline static void eth_hw_addr_random(struct net_device *dev)
{
  #line 265 
  dev->addr_assign_type = (unsigned char)1U;
  #line 266 
  eth_random_addr(dev->dev_addr);
  #line 267 
  return;
}

#line 276  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/etherdevice.h"
__inline static void ether_addr_copy(u8 *dst, u8 *src)
{
  #line 279 
  *((u32 *)dst) = *((u32 *)src);
  #line 280 
  *((u16 *)(dst + 4U)) = *((u16 *)(src + 4U));
  #line 281 
  return;
}

#line 315  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/etherdevice.h"
__inline static bool ether_addr_equal(u8 *addr1, u8 *addr2)
{
  #line 318 
  u32 fold = (*((u32 *)addr1) ^ *((u32 *)addr2)) | (unsigned int)((int)*((u16 *)(addr1 + 4U)) ^ (int)*((u16 *)(addr2 + 4U)));
  #line 321 
  return (_Bool)(fold == 0U);
}

#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rtnetlink.h"
#line 33 
void rtnl_lock(void);
#line 34 
#line 34 
void rtnl_unlock(void);
#line 65  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/io.h"
#line 65 
void *devm_ioremap(struct device *, resource_size_t, resource_size_t);
#line 71 
#line 71 
void *devm_ioremap_wc(struct device *, resource_size_t, resource_size_t);
#line 1133  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
#line 1133 
int pci_enable_device_mem(struct pci_dev *);
#line 1157 
#line 1157 
void pci_disable_device(struct pci_dev *);
#line 1160 
#line 1160 
void pci_set_master(struct pci_dev *);
#line 1202 
#line 1202 
int pci_select_bars(struct pci_dev *, unsigned long);
#line 1286 
#line 1286 
int pci_request_selected_regions(struct pci_dev *, int, char *);
#line 1288 
#line 1288 
void pci_release_selected_regions(struct pci_dev *, int);
#line 1346 
#line 969  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amazon/ena/ena.ko/concurrency safety/0/concurrency safety/weaver/ena_netdev.i.aux"
static int cif___pci_register_driver(struct pci_driver *ldv_func_arg1, struct module *ldv_func_arg2, char *mod_name);
#line 1352  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
#line 977  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amazon/ena/ena.ko/concurrency safety/0/concurrency safety/weaver/ena_netdev.i.aux"
static void cif_pci_unregister_driver(struct pci_driver *dev);
#line 1432  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
#line 1432 
int pci_msix_vec_count(struct pci_dev *);
#line 1447 
#line 1447 
int pci_alloc_irq_vectors_affinity(struct pci_dev *, unsigned int, unsigned int, unsigned int, struct irq_affinity *);
#line 1451 
#line 1451 
void pci_free_irq_vectors(struct pci_dev *);
#line 1452 
#line 1452 
int pci_irq_vector(struct pci_dev *, unsigned int);
#line 1768  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
__inline static int pci_alloc_irq_vectors(struct pci_dev *dev, unsigned int min_vecs, unsigned int max_vecs, unsigned int flags)
{
  #line 1771 
  return pci_alloc_irq_vectors_affinity(dev,min_vecs,max_vecs,flags,
                                     (struct irq_affinity *)0);
}

#line 1833  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
__inline static void *pci_get_drvdata(struct pci_dev *pdev)
{
  #line 1835 
  return dev_get_drvdata(& pdev->dev);
}

#line 1838  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
__inline static void pci_set_drvdata(struct pci_dev *pdev, void *data)
{
  #line 1840 
  dev_set_drvdata(& pdev->dev,data);
  #line 1841 
  return;
}

#line 1843  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
__inline static char *pci_name(struct pci_dev *pdev)
{
  #line 1845 
  return dev_name(& pdev->dev);
}

#line 2037 
#line 2037 
int pci_sriov_configure_simple(struct pci_dev *, int);
#line 113  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci-dma-compat.h"
__inline static int pci_set_dma_mask(struct pci_dev *dev, u64 mask)
{
  #line 115 
  return dma_set_mask(& dev->dev,mask);
}

#line 118  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci-dma-compat.h"
__inline static int pci_set_consistent_dma_mask(struct pci_dev *dev, u64 mask)
{
  #line 120 
  return dma_set_coherent_mask(& dev->dev,mask);
}

#line 80  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/utsname.h"
__inline static struct new_utsname *utsname(void)
{
  #line 82 
  return & ((ldv_get_current()->nsproxy)->uts_ns)->name;
}

#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ip.h"
__inline static struct iphdr *ip_hdr(struct sk_buff *skb)
{
  #line 21 
  return (struct iphdr *)skb_network_header(skb);
}

#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/tcp.h"
__inline static struct tcphdr *tcp_hdr(struct sk_buff *skb)
{
  #line 26 
  return (struct tcphdr *)skb_transport_header(skb);
}

#line 92  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ipv6.h"
__inline static struct ipv6hdr *ipv6_hdr(struct sk_buff *skb)
{
  #line 94 
  return (struct ipv6hdr *)skb_network_header(skb);
}

#line 251  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dim.h"
__inline static void dim_update_sample(u16 event_ctr, u64 packets, u64 bytes, struct dim_sample *s)
{
  #line 253 
  s->time = ktime_get();
  #line 254 
  s->pkt_ctr = (unsigned int)packets;
  #line 255 
  s->byte_ctr = (unsigned int)bytes;
  #line 256 
  s->event_ctr = event_ctr;
  #line 257 
  return;
}

#line 283 
#line 283 
struct dim_cq_moder net_dim_get_rx_moderation(u8, int);
#line 313 
#line 313 
void net_dim(struct dim *, struct dim_sample);
#line 393  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_com.h"
#line 393 
int ena_com_mmio_reg_read_request_init(struct ena_com_dev *ena_dev);
#line 399 
#line 399 
void ena_com_set_mmio_read_mode(struct ena_com_dev *ena_dev, bool readless_supported);
#line 411 
#line 411 
void ena_com_mmio_reg_read_request_destroy(struct ena_com_dev *ena_dev);
#line 422 
#line 422 
int ena_com_admin_init(struct ena_com_dev *ena_dev, struct ena_aenq_handlers *aenq_handlers_0);
#line 432 
#line 432 
void ena_com_admin_destroy(struct ena_com_dev *ena_dev);
#line 440 
#line 440 
int ena_com_dev_reset(struct ena_com_dev *ena_dev, enum ena_regs_reset_reason_types reset_reason);
#line 451 
#line 451 
int ena_com_create_io_queue(struct ena_com_dev *ena_dev, struct ena_com_create_io_ctx *ctx);
#line 458 
#line 458 
void ena_com_destroy_io_queue(struct ena_com_dev *ena_dev, u16 qid);
#line 468 
#line 468 
int ena_com_get_io_handlers(struct ena_com_dev *ena_dev, u16 qid, struct ena_com_io_sq **io_sq, struct ena_com_io_cq **io_cq);
#line 477 
#line 477 
void ena_com_admin_aenq_enable(struct ena_com_dev *ena_dev);
#line 484 
#line 484 
void ena_com_set_admin_running_state(struct ena_com_dev *ena_dev, bool state);
#line 493 
#line 493 
bool ena_com_get_admin_running_state(struct ena_com_dev *ena_dev);
#line 501 
#line 501 
void ena_com_set_admin_polling_mode(struct ena_com_dev *ena_dev, bool polling);
#line 534 
#line 534 
void ena_com_admin_q_comp_intr_handler(struct ena_com_dev *ena_dev);
#line 542 
#line 542 
void ena_com_aenq_intr_handler(struct ena_com_dev *dev, void *data);
#line 551 
#line 551 
void ena_com_abort_admin_commands(struct ena_com_dev *ena_dev);
#line 558 
#line 558 
void ena_com_wait_for_abort_completion(struct ena_com_dev *ena_dev);
#line 570 
#line 570 
int ena_com_validate_version(struct ena_com_dev *ena_dev);
#line 592 
#line 592 
int ena_com_get_dma_width(struct ena_com_dev *ena_dev);
#line 602 
#line 602 
int ena_com_set_aenq_config(struct ena_com_dev *ena_dev, u32 groups_flag);
#line 610 
#line 610 
int ena_com_get_dev_attr_feat(struct ena_com_dev *ena_dev, struct ena_com_dev_get_features_ctx *get_feat_ctx);
#line 628 
#line 628 
int ena_com_set_dev_mtu(struct ena_com_dev *ena_dev, int mtu);
#line 649 
#line 649 
int ena_com_rss_init(struct ena_com_dev *ena_dev, u16 indr_tbl_log_size);
#line 656 
#line 656 
void ena_com_rss_destroy(struct ena_com_dev *ena_dev);
#line 672 
#line 672 
int ena_com_fill_hash_function(struct ena_com_dev *ena_dev, enum ena_admin_hash_functions func, u8 *key, u16 key_len, u32 init_val);
#line 687 
#line 687 
int ena_com_set_hash_function(struct ena_com_dev *ena_dev);
#line 731 
#line 731 
int ena_com_set_hash_ctrl(struct ena_com_dev *ena_dev);
#line 759 
#line 759 
int ena_com_set_default_hash_ctrl(struct ena_com_dev *ena_dev);
#line 773 
#line 773 
int ena_com_indirect_table_fill_entry(struct ena_com_dev *ena_dev, u16 entry_idx, u16 entry_value);
#line 784 
#line 784 
int ena_com_indirect_table_set(struct ena_com_dev *ena_dev);
#line 804 
#line 804 
int ena_com_allocate_host_info(struct ena_com_dev *ena_dev);
#line 812 
#line 812 
int ena_com_allocate_debug_area(struct ena_com_dev *ena_dev, u32 debug_area_size);
#line 820 
#line 820 
void ena_com_delete_debug_area(struct ena_com_dev *ena_dev);
#line 827 
#line 827 
void ena_com_delete_host_info(struct ena_com_dev *ena_dev);
#line 835 
#line 835 
int ena_com_set_host_attributes(struct ena_com_dev *ena_dev);
#line 883 
#line 883 
int ena_com_init_interrupt_moderation(struct ena_com_dev *ena_dev);
#line 918 
#line 918 
unsigned int ena_com_get_nonadaptive_moderation_interval_tx(struct ena_com_dev *ena_dev);
#line 926 
#line 926 
unsigned int ena_com_get_nonadaptive_moderation_interval_rx(struct ena_com_dev *ena_dev);
#line 934 
#line 934 
int ena_com_config_dev_mode(struct ena_com_dev *ena_dev, struct ena_admin_feature_llq_desc *llq_features, struct ena_llq_configurations *llq_default_cfg);
#line 938  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_com.h"
__inline static bool ena_com_get_adaptive_moderation_enabled(struct ena_com_dev *ena_dev)
{
  #line 940 
  return ena_dev->adaptive_coalescing;
}

#line 961  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_com.h"
__inline static void ena_com_update_intr_reg(struct ena_eth_io_intr_reg *intr_reg, u32 rx_delay_interval, u32 tx_delay_interval, bool unmask)
{
  #line 966 
  intr_reg->intr_control = 0U;
  #line 967 
  intr_reg->intr_control |= rx_delay_interval & 32767U;
  #line 970 
  intr_reg->intr_control |= (tx_delay_interval << 15) & 1073709056U;
  #line 974 
  if ((int)unmask != 0) 
                        #line 975 
                        intr_reg->intr_control |= 1073741824U;
  #line 976 
  return;
}

#line 78  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_eth_com.h"
#line 78 
int ena_com_prepare_tx(struct ena_com_io_sq *io_sq, struct ena_com_tx_ctx *ena_tx_ctx, int *nb_hw_desc);
#line 82 
#line 82 
int ena_com_rx_pkt(struct ena_com_io_cq *io_cq, struct ena_com_io_sq *io_sq, struct ena_com_rx_ctx *ena_rx_ctx);
#line 86 
#line 86 
int ena_com_add_single_rx_desc(struct ena_com_io_sq *io_sq, struct ena_com_buf *ena_buf, u16 req_id);
#line 90 
#line 90 
bool ena_com_cq_empty(struct ena_com_io_cq *io_cq);
#line 92  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_eth_com.h"
__inline static void ena_com_unmask_intr(struct ena_com_io_cq *io_cq, struct ena_eth_io_intr_reg *intr_reg)
{
  #line 95 
  writel(intr_reg->intr_control,(void *)io_cq->unmask_reg);
  #line 96 
  return;
}

#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_eth_com.h"
__inline static int ena_com_free_desc(struct ena_com_io_sq *io_sq)
{
  #line 100 
  u16 tail;
  #line 100 
  u16 next_to_comp;
  #line 100 
  u16 cnt;
  #line 102 
  next_to_comp = io_sq->next_to_comp;
  #line 103 
  tail = io_sq->tail;
  #line 104 
  cnt = (unsigned short)((int)tail - (int)next_to_comp);
  #line 106 
  return ((int)io_sq->q_depth + -1) - (int)cnt;
}

#line 110  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_eth_com.h"
__inline static bool ena_com_sq_have_enough_space(struct ena_com_io_sq *io_sq, u16 required_buffers)
{
  #line 113 
  int temp;
  #line 115 
  if (io_sq->mem_queue_type == (unsigned int)ENA_ADMIN_PLACEMENT_POLICY_HOST) {
    #line 116 
    ;
    #line 116 
    return (_Bool)(ena_com_free_desc(io_sq) >= (int)required_buffers);
  }
  #line 123 
  temp = (int)required_buffers / (int)io_sq->llq_info.descs_per_entry + 2;
  #line 125 
  ;
  #line 125 
  return (_Bool)(ena_com_free_desc(io_sq) > temp);
}

#line 128  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_eth_com.h"
__inline static bool ena_com_meta_desc_changed(struct ena_com_io_sq *io_sq, struct ena_com_tx_ctx *ena_tx_ctx)
{
  #line 131 
  if ((unsigned int)ena_tx_ctx->meta_valid == 0U) 
                                                  #line 132 
                                                  return (_Bool)0;
  #line 134 
  return (_Bool)(memcmp((void *)(& io_sq->cached_tx_meta),
             (void *)(& ena_tx_ctx->ena_meta),8UL) != 0);
}

#line 139  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_eth_com.h"
__inline static bool is_llq_max_tx_burst_exists(struct ena_com_io_sq *io_sq)
{
  #line 141 
  return (_Bool)((io_sq->mem_queue_type == (unsigned int)ENA_ADMIN_PLACEMENT_POLICY_DEV && (unsigned int)io_sq->llq_info.max_entries_in_tx_burst != 0U) != 0);
}

#line 145  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_eth_com.h"
__inline static bool ena_com_is_doorbell_needed(struct ena_com_io_sq *io_sq, struct ena_com_tx_ctx *ena_tx_ctx)
{
  #line 148 
  struct ena_com_llq_info *llq_info;
  #line 149 
  int descs_after_first_entry;
  #line 151 
  u16 num_descs;
  #line 150 
  int num_entries_needed = 1;
  #line 153 
  if (! is_llq_max_tx_burst_exists(io_sq)) 
                                           #line 154 
                                           return (_Bool)0;
  #line 156 
  llq_info = & io_sq->llq_info;
  #line 157 
  num_descs = ena_tx_ctx->num_bufs;
  #line 159 
  if ((long)((int)ena_com_meta_desc_changed(io_sq,ena_tx_ctx) != 0) != 0L) 
    #line 160 
    num_descs = (u16)((int)num_descs + 1);
  #line 162 
  if ((int)llq_info->descs_num_before_header < (int)num_descs) {
    #line 163 
    descs_after_first_entry = (int)num_descs - (int)llq_info->descs_num_before_header;
    #line 164 
    num_entries_needed = (((int)llq_info->descs_per_entry + descs_after_first_entry) + -1) / (int)llq_info->descs_per_entry + num_entries_needed;
  }
  {
    #line 168 
    bool branch;
    #line 168 
    struct _ddebug __UNIQUE_ID_ddebug538 = {.modname = (char *)"ena", .function = (char *)"ena_com_is_doorbell_needed", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_eth_com.h", .format = (char *)"queue: %d num_descs: %d num_entries_needed: %d\n", .lineno = (unsigned int)168U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 168 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug538.key.dd_key_false.key,(_Bool)0);
    #line 168 
    if ((long)((long)((int)branch != 0)) != 0L) 
                                                #line 168 
                                                __dynamic_pr_debug(& __UNIQUE_ID_ddebug538,(char *)"ena",(int)io_sq->qid,(int)num_descs,num_entries_needed);
  }
  #line 171 
  return (_Bool)((int)io_sq->entries_in_tx_burst_left < num_entries_needed);
}

#line 174  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_eth_com.h"
__inline static int ena_com_write_sq_doorbell(struct ena_com_io_sq *io_sq)
{
  #line 176 
  u16 max_entries_in_tx_burst = io_sq->llq_info.max_entries_in_tx_burst;
  #line 177 
  u16 tail = io_sq->tail;
  {
    #line 179 
    bool branch;
    #line 179 
    struct _ddebug __UNIQUE_ID_ddebug539 = {.modname = (char *)"ena", .function = (char *)"ena_com_write_sq_doorbell", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_eth_com.h", .format = (char *)"write submission queue doorbell for queue: %d tail: %d\n", .lineno = (unsigned int)179U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 179 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug539.key.dd_key_false.key,(_Bool)0);
    #line 179 
    if ((long)((long)((int)branch != 0)) != 0L) 
                                                #line 179 
                                                __dynamic_pr_debug(& __UNIQUE_ID_ddebug539,(char *)"ena",(int)io_sq->qid,(int)tail);
  }
  #line 182 
  writel((unsigned int)tail,(void *)io_sq->db_addr);
  #line 184 
  if ((int)is_llq_max_tx_burst_exists(io_sq) != 0) {
    {
      #line 185 
      bool branch_0;
      #line 185 
      struct _ddebug __UNIQUE_ID_ddebug540 = {.modname = (char *)"ena", .function = (char *)"ena_com_write_sq_doorbell", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_eth_com.h", .format = (char *)"reset available entries in tx burst for queue %d to %d\n", .lineno = (unsigned int)185U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 185 
      branch_0 = arch_static_branch(& __UNIQUE_ID_ddebug540.key.dd_key_false.key,(_Bool)0);
      #line 185 
      if ((long)((long)((int)branch_0 != 0)) != 0L) 
                                                    #line 185 
                                                    __dynamic_pr_debug(& __UNIQUE_ID_ddebug540,(char *)"ena",(int)io_sq->qid,(int)max_entries_in_tx_burst);
    }
    #line 187 
    io_sq->entries_in_tx_burst_left = max_entries_in_tx_burst;
  }
  #line 190 
  return 0;
}

#line 193  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_eth_com.h"
__inline static int ena_com_update_dev_comp_head(struct ena_com_io_cq *io_cq)
{
  #line 195 
  u16 unreported_comp;
  #line 195 
  u16 head;
  #line 196 
  bool need_update;
  #line 198 
  if ((long)(io_cq->cq_head_db_reg != (u32 *)0U) != 0L) {
    #line 199 
    head = io_cq->head;
    #line 200 
    unreported_comp = (unsigned short)((int)head - (int)io_cq->last_head_update);
    #line 201 
    need_update = (_Bool)((unsigned int)io_cq->q_depth / 4U < (unsigned int)unreported_comp);
    #line 203 
    if ((long)((int)need_update != 0) != 0L) {
      {
        #line 204 
        bool branch;
        #line 204 
        struct _ddebug __UNIQUE_ID_ddebug541 = {.modname = (char *)"ena", .function = (char *)"ena_com_update_dev_comp_head", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_eth_com.h", .format = (char *)"Write completion queue doorbell for queue %d: head: %d\n", .lineno = (unsigned int)204U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
        #line 204 
        branch = arch_static_branch(& __UNIQUE_ID_ddebug541.key.dd_key_false.key,(_Bool)0);
        #line 204 
        if ((long)((long)((int)branch != 0)) != 0L) 
                                                    #line 204 
                                                    __dynamic_pr_debug(& __UNIQUE_ID_ddebug541,(char *)"ena",(int)io_cq->qid,(int)head);
      }
      #line 206 
      writel((unsigned int)head,(void *)io_cq->cq_head_db_reg);
      #line 207 
      io_cq->last_head_update = head;
    }
  }
  #line 211 
  return 0;
}

#line 214  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_eth_com.h"
__inline static void ena_com_update_numa_node(struct ena_com_io_cq *io_cq, u8 numa_node)
{
  #line 217 
  struct ena_eth_io_numa_node_cfg_reg numa_cfg;
  #line 219 
  if (io_cq->numa_node_cfg_reg == (u32 *)0U) 
                                             #line 220 
                                             return;
  #line 222 
  numa_cfg.numa_cfg = (unsigned int)numa_node | 2147483648U;
  #line 225 
  writel(numa_cfg.numa_cfg,(void *)io_cq->numa_node_cfg_reg);
  #line 226 
  return;
}

#line 228  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_eth_com.h"
__inline static void ena_com_comp_ack(struct ena_com_io_sq *io_sq, u16 elem)
{
  #line 230 
  io_sq->next_to_comp = (unsigned short)((int)io_sq->next_to_comp + (int)elem);
  #line 231 
  return;
}

#line 233  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_eth_com.h"
__inline static void ena_com_cq_inc_head(struct ena_com_io_cq *io_cq)
{
  #line 235 
  io_cq->head = (u16)((int)io_cq->head + 1);
  #line 238 
  if ((long)(((int)io_cq->head & ((int)io_cq->q_depth + -1)) == 0) != 0L) 
    #line 239 
    io_cq->phase = (unsigned char)((unsigned int)io_cq->phase ^ 1U);
  #line 240 
  return;
}

#line 242  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_eth_com.h"
__inline static int ena_com_tx_comp_req_id_get(struct ena_com_io_cq *io_cq, u16 *req_id)
{
  #line 261 
  union __anonunion___u_1005 __u;
  #line 267 
  union __anonunion___u_1007 __u_0;
  #line 245 
  u8 expected_phase;
  #line 245 
  u8 cdesc_phase;
  #line 246 
  struct ena_eth_io_tx_cdesc *cdesc;
  #line 247 
  u16 masked_head;
  #line 249 
  masked_head = (unsigned short)((unsigned int)io_cq->head & ((unsigned int)io_cq->q_depth + 65535U));
  #line 250 
  expected_phase = io_cq->phase;
  #line 252 
  cdesc = (struct ena_eth_io_tx_cdesc *)((unsigned long)io_cq->cdesc_addr.virt_addr + (unsigned long)((int)masked_head * (int)io_cq->cdesc_entry_size_in_bytes));
  #line 260 
  __read_once_size((void *)(& cdesc->flags),(void *)(& __u.__c),1);
  #line 260 
  cdesc_phase = (unsigned char)((unsigned int)(__u.__val) & 1U);
  #line 261 
  if ((int)cdesc_phase != (int)expected_phase) 
                                               #line 262 
                                               return -11;
  #line 263 
  ldv_inline_asm();
  #line 266 
  __read_once_size((void *)(& cdesc->req_id),(void *)(& __u_0.__c),2);
  #line 266 
  *req_id = (__u_0.__val);
  #line 267 
  if ((long)((int)*req_id >= (int)io_cq->q_depth) != 0L) {
    #line 268 
    printk((char *)"\001",(int)cdesc->req_id);
    #line 269 
    return -22;
  }
  #line 272 
  ena_com_cq_inc_head(io_cq);
  #line 274 
  return 0;
}

#line 384  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_netdev.h"
#line 384 
void ena_set_ethtool_ops(struct net_device *netdev);
#line 386 
#line 386 
void ena_dump_stats_to_dmesg(struct ena_adapter *adapter);
#line 388 
#line 388 
void ena_dump_stats_to_buf(struct ena_adapter *adapter, u8 *buf);
#line 390 
#line 2046  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_netdev.c"
int ena_update_queue_sizes(struct ena_adapter *adapter, u32 new_tx_size, u32 new_rx_size);
#line 393  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_netdev.h"
#line 2060  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_netdev.c"
int ena_update_queue_count(struct ena_adapter *adapter, u32 new_channel_count);
#line 395  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_netdev.h"
#line 395 
int ena_get_sset_count(struct net_device *netdev, int sset);
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_pci_id_tbl.h"
static struct pci_device_id ena_pci_tbl[5U] = {{.vendor = 7439U, .device = 3778U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 7439U, .device = 7874U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 7439U, .device = 60448U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 7439U, .device = 60449U, .subvendor = 4294967295U, .subdevice = 4294967295U}};
#line 52  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_netdev.c"
static char version[39U] = {(char)'E', (char)'l', (char)'a', (char)'s', (char)'t', (char)'i', (char)'c', (char)' ', (char)'N', (char)'e', (char)'t', (char)'w', (char)'o', (char)'r', (char)'k', (char)' ', (char)'A', (char)'d', (char)'a', (char)'p', (char)'t', (char)'e', (char)'r', (char)' ', (char)'(', (char)'E', (char)'N', (char)'A', (char)')'};
#line 66  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_netdev.c"
static int debug = -1;
#line 70 
#line 3867 
static struct ena_aenq_handlers aenq_handlers;
#line 72  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_netdev.c"
static struct workqueue_struct *ena_wq;
#line 74  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_netdev.c"
struct pci_device_id __mod_pci__ena_pci_tbl_device_table[5U];
#line 76 
#line 3309 
static int ena_rss_init_default(struct ena_adapter *adapter);
#line 77 
#line 3065 
static void check_for_admin_com_state(struct ena_adapter *adapter);
#line 78 
#line 2737 
static void ena_destroy_device(struct ena_adapter *adapter, bool graceful);
#line 79 
#line 2782 
static int ena_restore_device(struct ena_adapter *adapter);
#line 81  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_netdev.c"
static void ena_tx_timeout(struct net_device *dev)
{
  #line 83 
  struct ena_adapter *adapter = netdev_priv(dev);
  #line 89 
  if ((int)test_and_set_bit(4L,& adapter->flags) != 0) 
                                                       #line 90 
                                                       return;
  #line 92 
  adapter->reset_reason = ENA_REGS_RESET_OS_NETDEV_WD;
  #line 93 
  u64_stats_init(& adapter->syncp);
  #line 94 
  (adapter->dev_stats.tx_timeout) ++;
  #line 95 
  u64_stats_init(& adapter->syncp);
  #line 97 
  if ((adapter->msg_enable & 128U) != 0U) 
                                          #line 97 
                                          netdev_err(dev,(char *)"Transmit time out\n");
  #line 98 
  return;
}

#line 100  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_netdev.c"
static void update_rx_ring_mtu(struct ena_adapter *adapter, int mtu)
{
  #line 102 
  int i;
  #line 104 
  i = 0;
  #line 104 
  while (adapter->num_io_queues > (unsigned int)i) {
    #line 105 
    adapter->rx_ring[i].mtu = (unsigned short)mtu;
    #line 104 
    i ++;
  }
  #line 106 
  return;
}

#line 108  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_netdev.c"
static int ena_change_mtu(struct net_device *dev, int new_mtu)
{
  #line 111 
  int ret;
  #line 110 
  struct ena_adapter *adapter = netdev_priv(dev);
  #line 113 
  ret = ena_com_set_dev_mtu(adapter->ena_dev,new_mtu);
  #line 114 
  if (ret == 0) {
    #line 115 
    if ((adapter->msg_enable & 1U) != 0U) {
      #line 115 
      bool branch;
      #line 115 
      struct _ddebug __UNIQUE_ID_ddebug548 = {.modname = (char *)"ena", .function = (char *)"ena_change_mtu", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_netdev.c", .format = (char *)"set MTU to %d\n", .lineno = (unsigned int)115U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 115 
      branch = arch_static_branch(& __UNIQUE_ID_ddebug548.key.dd_key_false.key,(_Bool)0);
      #line 115 
      if ((long)((long)((int)branch != 0)) != 0L) 
                                                  #line 115 
                                                  __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug548,dev,(char *)"set MTU to %d\n",new_mtu);
    }
    #line 116 
    update_rx_ring_mtu(adapter,new_mtu);
    #line 117 
    dev->mtu = (unsigned int)new_mtu;
  }
  else 
    #line 119 
    if ((adapter->msg_enable & 1U) != 0U) 
                                          #line 119 
                                          netdev_err(dev,(char *)"Failed to set MTU to %d\n",new_mtu);
  #line 123 
  return ret;
}

#line 126  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_netdev.c"
static int ena_init_rx_cpu_rmap(struct ena_adapter *adapter)
{
  #line 129 
  u32 i;
  #line 130 
  int rc;
  #line 132 
  (adapter->netdev)->rx_cpu_rmap = alloc_irq_cpu_rmap(adapter->num_io_queues);
  #line 133 
  if ((adapter->netdev)->rx_cpu_rmap == (struct cpu_rmap *)0) 
                                                              #line 134 
                                                              return -12;
  #line 135 
  i = 0U;
  #line 135 
  while (adapter->num_io_queues > i) {
    {
      #line 136 
      int irq_idx = (int)(i + 1U);
      #line 138 
      ;
      #line 138 
      rc = irq_cpu_rmap_add((adapter->netdev)->rx_cpu_rmap,pci_irq_vector(adapter->pdev,(unsigned int)irq_idx));
      #line 140 
      if (rc != 0) {
        #line 141 
        free_irq_cpu_rmap((adapter->netdev)->rx_cpu_rmap);
        #line 142 
        (adapter->netdev)->rx_cpu_rmap = (struct cpu_rmap *)0;
        #line 143 
        return rc;
      }
    }
    #line 135 
    i ++;
  }
  #line 147 
  return 0;
}

#line 150  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_netdev.c"
static void ena_init_io_rings_common(struct ena_adapter *adapter, struct ena_ring *ring, u16 qid)
{
  #line 153 
  ring->qid = qid;
  #line 154 
  ring->pdev = adapter->pdev;
  #line 155 
  ring->dev = & (adapter->pdev)->dev;
  #line 156 
  ring->netdev = adapter->netdev;
  #line 157 
  ring->napi = & adapter->ena_napi[(int)qid].napi;
  #line 158 
  ring->adapter = adapter;
  #line 159 
  ring->ena_dev = adapter->ena_dev;
  #line 160 
  ring->per_napi_packets = 0U;
  #line 161 
  ring->cpu = 0;
  #line 162 
  ring->first_interrupt = (_Bool)0;
  #line 163 
  ring->no_interrupt_event_cnt = (unsigned short)0U;
  #line 164 
  u64_stats_init(& ring->syncp);
  #line 165 
  return;
}

#line 167  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_netdev.c"
static void ena_init_io_rings(struct ena_adapter *adapter)
{
  #line 169 
  struct ena_com_dev *ena_dev;
  #line 170 
  struct ena_ring *txr;
  #line 170 
  struct ena_ring *rxr;
  #line 171 
  int i;
  #line 173 
  ena_dev = adapter->ena_dev;
  #line 175 
  i = 0;
  #line 175 
  while (adapter->num_io_queues > (unsigned int)i) {
    #line 176 
    txr = & adapter->tx_ring[i];
    #line 177 
    rxr = & adapter->rx_ring[i];
    #line 180 
    ena_init_io_rings_common(adapter,txr,(unsigned short)((int)((unsigned short)i)));
    #line 181 
    ena_init_io_rings_common(adapter,rxr,(unsigned short)((int)((unsigned short)i)));
    #line 184 
    txr->ring_size = (int)adapter->requested_tx_ring_size;
    #line 185 
    txr->tx_max_header_size = (unsigned char)ena_dev->tx_max_header_size;
    #line 186 
    txr->tx_mem_queue_type = ena_dev->tx_mem_queue_type;
    #line 187 
    txr->sgl_size = adapter->max_tx_sgl_size;
    #line 188 
    txr->smoothed_interval = ena_com_get_nonadaptive_moderation_interval_tx(ena_dev);
    #line 192 
    rxr->ring_size = (int)adapter->requested_rx_ring_size;
    #line 193 
    rxr->rx_copybreak = (unsigned short)adapter->rx_copybreak;
    #line 194 
    rxr->sgl_size = adapter->max_rx_sgl_size;
    #line 195 
    rxr->smoothed_interval = ena_com_get_nonadaptive_moderation_interval_rx(ena_dev);
    #line 197 
    rxr->empty_rx_queue = 0;
    #line 198 
    adapter->ena_napi[i].dim.mode = (unsigned char)0U;
    #line 175 
    i ++;
  }
  #line 200 
  return;
}

#line 208  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_netdev.c"
static int ena_setup_tx_resources(struct ena_adapter *adapter, int qid)
{
  #line 212 
  int size;
  #line 212 
  int i;
  #line 212 
  int node;
  #line 210 
  struct ena_ring *tx_ring = & adapter->tx_ring[qid];
  #line 211 
  struct ena_irq *ena_irq = & adapter->irq_tbl[qid + 1];
  #line 214 
  if (tx_ring->__anonCompField_ena_ring_198.tx_buffer_info != (struct ena_tx_buffer *)0) {
    #line 215 
    if ((adapter->msg_enable & 32U) != 0U) 
                                           #line 215 
                                           netdev_err(adapter->netdev,(char *)"tx_buffer_info info is not NULL");
    #line 217 
    return -17;
  }
  #line 220 
  size = (int)((unsigned long)tx_ring->ring_size * (unsigned long)384U);
  #line 221 
  node = __cpu_to_node(ena_irq->cpu);
  #line 223 
  tx_ring->__anonCompField_ena_ring_198.tx_buffer_info = (struct ena_tx_buffer *)cif_vzalloc_node((unsigned long)size,node);
  #line 224 
  if (tx_ring->__anonCompField_ena_ring_198.tx_buffer_info == (struct ena_tx_buffer *)0) {
    #line 225 
    tx_ring->__anonCompField_ena_ring_198.tx_buffer_info = (struct ena_tx_buffer *)cif_vzalloc((unsigned long)size);
    #line 226 
    if (tx_ring->__anonCompField_ena_ring_198.tx_buffer_info == (struct ena_tx_buffer *)0) 
      #line 227 
      goto err_tx_buffer_info;
  }
  #line 230 
  size = (int)((unsigned long)tx_ring->ring_size * (unsigned long)2U);
  #line 231 
  tx_ring->free_ids = (u16 *)cif_vzalloc_node((unsigned long)size,node);
  #line 232 
  if (tx_ring->free_ids == (u16 *)0U) {
    #line 233 
    tx_ring->free_ids = (u16 *)cif_vzalloc((unsigned long)size);
    #line 234 
    if (tx_ring->free_ids == (u16 *)0U) 
                                        #line 235 
                                        goto err_tx_free_ids;
  }
  #line 238 
  size = (int)tx_ring->tx_max_header_size;
  #line 239 
  tx_ring->push_buf_intermediate_buf = (u8 *)cif_vzalloc_node((unsigned long)size,node);
  #line 240 
  if (tx_ring->push_buf_intermediate_buf == (u8 *)0U) {
    #line 241 
    tx_ring->push_buf_intermediate_buf = (u8 *)cif_vzalloc((unsigned long)size);
    #line 242 
    if (tx_ring->push_buf_intermediate_buf == (u8 *)0U) 
                                                        #line 243 
                                                        goto err_push_buf_intermediate_buf;
  }
  #line 247 
  i = 0;
  #line 247 
  while (tx_ring->ring_size > i) {
    #line 248 
    *(tx_ring->free_ids + (unsigned long)i) = (unsigned short)i;
    #line 247 
    i ++;
  }
  #line 251 
  memset((void *)(& tx_ring->__anonCompField_ena_ring_199.tx_stats),0,112UL);
  #line 253 
  tx_ring->next_to_use = (unsigned short)0U;
  #line 254 
  tx_ring->next_to_clean = (unsigned short)0U;
  #line 255 
  tx_ring->cpu = ena_irq->cpu;
  #line 256 
  return 0;
  #line 258 
  err_push_buf_intermediate_buf: 
                                 #line 258 
  ;
  #line 259 
  cif_vfree((void *)tx_ring->free_ids);
  #line 260 
  tx_ring->free_ids = (u16 *)0U;
  #line 261 
  err_tx_free_ids: 
                   #line 261 
  ;
  #line 262 
  cif_vfree((void *)tx_ring->__anonCompField_ena_ring_198.tx_buffer_info);
  #line 263 
  tx_ring->__anonCompField_ena_ring_198.tx_buffer_info = (struct ena_tx_buffer *)0;
  #line 264 
  err_tx_buffer_info: 
                      #line 264 
  ;
  #line 265 
  return -12;
}

#line 274  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_netdev.c"
static void ena_free_tx_resources(struct ena_adapter *adapter, int qid)
{
  #line 276 
  struct ena_ring *tx_ring = & adapter->tx_ring[qid];
  #line 278 
  cif_vfree((void *)tx_ring->__anonCompField_ena_ring_198.tx_buffer_info);
  #line 279 
  tx_ring->__anonCompField_ena_ring_198.tx_buffer_info = (struct ena_tx_buffer *)0;
  #line 281 
  cif_vfree((void *)tx_ring->free_ids);
  #line 282 
  tx_ring->free_ids = (u16 *)0U;
  #line 284 
  cif_vfree((void *)tx_ring->push_buf_intermediate_buf);
  #line 285 
  tx_ring->push_buf_intermediate_buf = (u8 *)0U;
  #line 286 
  return;
}

#line 293  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_netdev.c"
static int ena_setup_all_tx_resources(struct ena_adapter *adapter)
{
  #line 295 
  int i;
  #line 295 
  int rc = 0;
  #line 297 
  i = 0;
  #line 297 
  while (adapter->num_io_queues > (unsigned int)i) {
    #line 298 
    rc = ena_setup_tx_resources(adapter,i);
    #line 299 
    if (rc != 0) 
                 #line 300 
                 goto err_setup_tx;
    #line 297 
    i ++;
  }
  #line 303 
  return 0;
  #line 305 
  err_setup_tx: 
                #line 305 
  ;
  #line 307 
  if ((adapter->msg_enable & 32U) != 0U) 
                                         #line 307 
                                         netdev_err(adapter->netdev,(char *)"Tx queue %d: allocation failed\n",i);
  #line 311 
  while (1) {
    #line 311 
    int tmp;
    #line 311 
    tmp = i;
    #line 311 
    i --;
    #line 311 
    ;
    #line 311 
    if (! (tmp != 0)) 
                      #line 311 
                      break;
    #line 312 
    ena_free_tx_resources(adapter,i);
  }
  #line 313 
  return rc;
}

#line 321  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_netdev.c"
static void ena_free_all_io_tx_resources(struct ena_adapter *adapter)
{
  #line 323 
  int i;
  #line 325 
  i = 0;
  #line 325 
  while (adapter->num_io_queues > (unsigned int)i) {
    #line 326 
    ena_free_tx_resources(adapter,i);
    #line 325 
    i ++;
  }
  #line 327 
  return;
}

#line 329  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_netdev.c"
static int validate_rx_req_id(struct ena_ring *rx_ring, u16 req_id)
{
  #line 331 
  if ((long)((int)req_id < rx_ring->ring_size) != 0L) 
                                                      #line 332 
                                                      return 0;
  #line 334 
  if (((rx_ring->adapter)->msg_enable & 64U) != 0U) 
                                                    #line 334 
                                                    netdev_err(rx_ring->netdev,(char *)"Invalid rx req_id: %hu\n",(int)req_id);
  #line 337 
  u64_stats_init(& rx_ring->syncp);
  #line 338 
  (rx_ring->__anonCompField_ena_ring_199.rx_stats.bad_req_id) ++;
  #line 339 
  u64_stats_init(& rx_ring->syncp);
  #line 342 
  (rx_ring->adapter)->reset_reason = ENA_REGS_RESET_INV_RX_REQ_ID;
  #line 343 
  cif_set_bit(4L,& (rx_ring->adapter)->flags);
  #line 344 
  return -14;
}

#line 353  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_netdev.c"
static int ena_setup_rx_resources(struct ena_adapter *adapter, u32 qid)
{
  #line 358 
  int size;
  #line 358 
  int node;
  #line 358 
  int i;
  #line 356 
  struct ena_ring *rx_ring = & adapter->rx_ring[qid];
  #line 357 
  struct ena_irq *ena_irq = & adapter->irq_tbl[qid + 1U];
  #line 360 
  if (rx_ring->__anonCompField_ena_ring_198.rx_buffer_info != (struct ena_rx_buffer *)0) {
    #line 361 
    if ((adapter->msg_enable & 32U) != 0U) 
                                           #line 361 
                                           netdev_err(adapter->netdev,(char *)"rx_buffer_info is not NULL");
    #line 363 
    return -17;
  }
  #line 369 
  size = (int)((unsigned long)(rx_ring->ring_size + 1) * (unsigned long)64U);
  #line 370 
  node = __cpu_to_node(ena_irq->cpu);
  #line 372 
  rx_ring->__anonCompField_ena_ring_198.rx_buffer_info = (struct ena_rx_buffer *)cif_vzalloc_node((unsigned long)size,node);
  #line 373 
  if (rx_ring->__anonCompField_ena_ring_198.rx_buffer_info == (struct ena_rx_buffer *)0) {
    #line 374 
    rx_ring->__anonCompField_ena_ring_198.rx_buffer_info = (struct ena_rx_buffer *)cif_vzalloc((unsigned long)size);
    #line 375 
    if (rx_ring->__anonCompField_ena_ring_198.rx_buffer_info == (struct ena_rx_buffer *)0) 
      #line 376 
      return -12;
  }
  #line 379 
  size = (int)((unsigned long)rx_ring->ring_size * (unsigned long)2U);
  #line 380 
  rx_ring->free_ids = (u16 *)cif_vzalloc_node((unsigned long)size,node);
  #line 381 
  if (rx_ring->free_ids == (u16 *)0U) {
    #line 382 
    rx_ring->free_ids = (u16 *)cif_vzalloc((unsigned long)size);
    #line 383 
    if (rx_ring->free_ids == (u16 *)0U) {
      #line 384 
      cif_vfree((void *)rx_ring->__anonCompField_ena_ring_198.rx_buffer_info);
      #line 385 
      rx_ring->__anonCompField_ena_ring_198.rx_buffer_info = (struct ena_rx_buffer *)0;
      #line 386 
      return -12;
    }
  }
  #line 391 
  i = 0;
  #line 391 
  while (rx_ring->ring_size > i) {
    #line 392 
    *(rx_ring->free_ids + (unsigned long)i) = (unsigned short)i;
    #line 391 
    i ++;
  }
  #line 395 
  memset((void *)(& rx_ring->__anonCompField_ena_ring_199.rx_stats),0,104UL);
  #line 397 
  rx_ring->next_to_clean = (unsigned short)0U;
  #line 398 
  rx_ring->next_to_use = (unsigned short)0U;
  #line 399 
  rx_ring->cpu = ena_irq->cpu;
  #line 401 
  return 0;
}

#line 410  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_netdev.c"
static void ena_free_rx_resources(struct ena_adapter *adapter, u32 qid)
{
  #line 413 
  struct ena_ring *rx_ring = & adapter->rx_ring[qid];
  #line 415 
  cif_vfree((void *)rx_ring->__anonCompField_ena_ring_198.rx_buffer_info);
  #line 416 
  rx_ring->__anonCompField_ena_ring_198.rx_buffer_info = (struct ena_rx_buffer *)0;
  #line 418 
  cif_vfree((void *)rx_ring->free_ids);
  #line 419 
  rx_ring->free_ids = (u16 *)0U;
  #line 420 
  return;
}

#line 427  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_netdev.c"
static int ena_setup_all_rx_resources(struct ena_adapter *adapter)
{
  #line 429 
  int i;
  #line 429 
  int rc = 0;
  #line 431 
  i = 0;
  #line 431 
  while (adapter->num_io_queues > (unsigned int)i) {
    #line 432 
    rc = ena_setup_rx_resources(adapter,(unsigned int)i);
    #line 433 
    if (rc != 0) 
                 #line 434 
                 goto err_setup_rx;
    #line 431 
    i ++;
  }
  #line 437 
  return 0;
  #line 439 
  err_setup_rx: 
                #line 439 
  ;
  #line 441 
  if ((adapter->msg_enable & 32U) != 0U) 
                                         #line 441 
                                         netdev_err(adapter->netdev,(char *)"Rx queue %d: allocation failed\n",i);
  #line 445 
  while (1) {
    #line 445 
    int tmp;
    #line 445 
    tmp = i;
    #line 445 
    i --;
    #line 445 
    ;
    #line 445 
    if (! (tmp != 0)) 
                      #line 445 
                      break;
    #line 446 
    ena_free_rx_resources(adapter,(unsigned int)i);
  }
  #line 447 
  return rc;
}

#line 455  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_netdev.c"
static void ena_free_all_io_rx_resources(struct ena_adapter *adapter)
{
  #line 457 
  int i;
  #line 459 
  i = 0;
  #line 459 
  while (adapter->num_io_queues > (unsigned int)i) {
    #line 460 
    ena_free_rx_resources(adapter,(unsigned int)i);
    #line 459 
    i ++;
  }
  #line 461 
  return;
}

#line 463  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_netdev.c"
static int ena_alloc_rx_page(struct ena_ring *rx_ring, struct ena_rx_buffer *rx_info, gfp_t gfp)
{
  #line 466 
  struct ena_com_buf *ena_buf;
  #line 467 
  struct page *page;
  #line 468 
  dma_addr_t dma;
  #line 471 
  if ((long)(rx_info->page != (struct page *)0) != 0L) 
                                                       #line 472 
                                                       return 0;
  #line 474 
  page = alloc_pages(gfp,0U);
  #line 475 
  if ((long)(page == (struct page *)0) != 0L) {
    #line 476 
    u64_stats_init(& rx_ring->syncp);
    #line 477 
    (rx_ring->__anonCompField_ena_ring_199.rx_stats.page_alloc_fail) ++;
    #line 478 
    u64_stats_init(& rx_ring->syncp);
    #line 479 
    return -12;
  }
  #line 482 
  dma = dma_map_page_attrs(rx_ring->dev,page,0UL,4096UL,(enum dma_data_direction)DMA_FROM_DEVICE,0UL);
  #line 484 
  if ((long)(dma_mapping_error(rx_ring->dev,dma) != 0) != 0L) {
    #line 485 
    u64_stats_init(& rx_ring->syncp);
    #line 486 
    (rx_ring->__anonCompField_ena_ring_199.rx_stats.dma_mapping_err) ++;
    #line 487 
    u64_stats_init(& rx_ring->syncp);
    #line 489 
    __free_pages(page,0U);
    #line 490 
    return -5;
  }
  #line 492 
  if (((rx_ring->adapter)->msg_enable & 2048U) != 0U) {
    #line 492 
    bool branch;
    #line 492 
    struct _ddebug __UNIQUE_ID_ddebug549 = {.modname = (char *)"ena", .function = (char *)"ena_alloc_rx_page", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_netdev.c", .format = (char *)"alloc page %p, rx_info %p\n", .lineno = (unsigned int)492U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 492 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug549.key.dd_key_false.key,(_Bool)0);
    #line 492 
    if ((long)((long)((int)branch != 0)) != 0L) 
                                                #line 492 
                                                __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug549,rx_ring->netdev,(char *)"alloc page %p, rx_info %p\n",page,rx_info);
  }
  #line 495 
  rx_info->page = page;
  #line 496 
  rx_info->page_offset = 0U;
  #line 497 
  ena_buf = & rx_info->ena_buf;
  #line 498 
  ena_buf->paddr = dma;
  #line 499 
  ena_buf->len = (unsigned short)4096U;
  #line 501 
  return 0;
}

#line 504  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_netdev.c"
static void ena_free_rx_page(struct ena_ring *rx_ring, struct ena_rx_buffer *rx_info)
{
  #line 507 
  struct page *page = rx_info->page;
  #line 508 
  struct ena_com_buf *ena_buf = & rx_info->ena_buf;
  #line 510 
  if ((long)(page == (struct page *)0) != 0L) {
    #line 511 
    if (((rx_ring->adapter)->msg_enable & 64U) != 0U) 
                                                      #line 511 
                                                      netdev_warn(rx_ring->netdev,(char *)"Trying to free unallocated buffer\n");
    #line 513 
    return;
  }
  #line 516 
  dma_unmap_page_attrs(rx_ring->dev,ena_buf->paddr,4096UL,(enum dma_data_direction)DMA_FROM_DEVICE,0UL);
  #line 519 
  __free_pages(page,0U);
  #line 520 
  rx_info->page = (struct page *)0;
  #line 521 
  return;
}

#line 523  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_netdev.c"
static int ena_refill_rx_bufs(struct ena_ring *rx_ring, u32 num)
{
  #line 525 
  u16 next_to_use;
  #line 525 
  u16 req_id;
  #line 526 
  u32 i;
  #line 527 
  int rc;
  #line 529 
  next_to_use = rx_ring->next_to_use;
  #line 531 
  i = 0U;
  #line 531 
  while (i < num) {
    {
      #line 532 
      struct ena_rx_buffer *rx_info;
      #line 534 
      req_id = *(rx_ring->free_ids + (unsigned long)next_to_use);
      #line 535 
      rc = validate_rx_req_id(rx_ring,(unsigned short)((int)req_id));
      #line 536 
      if ((long)(rc < 0) != 0L) 
                                #line 537 
                                break;
      #line 539 
      rx_info = rx_ring->__anonCompField_ena_ring_198.rx_buffer_info + (unsigned long)req_id;
      #line 542 
      rc = ena_alloc_rx_page(rx_ring,rx_info,264736U);
      #line 544 
      if ((long)(rc < 0) != 0L) {
        #line 545 
        if (((rx_ring->adapter)->msg_enable & 64U) != 0U) 
                                                          #line 545 
                                                          netdev_warn(rx_ring->netdev,(char *)"failed to alloc buffer for rx queue %d\n",(int)rx_ring->qid);
        #line 548 
        break;
      }
      #line 550 
      rc = ena_com_add_single_rx_desc(rx_ring->ena_com_io_sq,& rx_info->ena_buf,(unsigned short)((int)req_id));
      #line 553 
      if ((long)(rc != 0) != 0L) {
        #line 554 
        if (((rx_ring->adapter)->msg_enable & 2048U) != 0U) 
                                                            #line 554 
                                                            netdev_warn(rx_ring->netdev,(char *)"failed to add buffer for rx queue %d\n",(int)rx_ring->qid);
        #line 557 
        break;
      }
      #line 559 
      next_to_use = (unsigned short)(((unsigned int)next_to_use + 1U) & ((unsigned int)rx_ring->ring_size + 65535U));
    }
    #line 531 
    i ++;
  }
  #line 563 
  if ((long)(i < num) != 0L) {
    #line 564 
    u64_stats_init(& rx_ring->syncp);
    #line 565 
    (rx_ring->__anonCompField_ena_ring_199.rx_stats.refil_partial) ++;
    #line 566 
    u64_stats_init(& rx_ring->syncp);
    #line 567 
    netdev_warn(rx_ring->netdev,(char *)"refilled rx qid %d with only %d buffers (from %d)\n",(int)rx_ring->qid,i,num);
  }
  #line 573 
  if ((long)(i != 0U) != 0L) 
                             #line 574 
                             ena_com_write_sq_doorbell(rx_ring->ena_com_io_sq);
  #line 576 
  rx_ring->next_to_use = next_to_use;
  #line 578 
  return (int)i;
}

#line 581  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_netdev.c"
static void ena_free_rx_bufs(struct ena_adapter *adapter, u32 qid)
{
  #line 585 
  u32 i;
  #line 584 
  struct ena_ring *rx_ring = & adapter->rx_ring[qid];
  #line 587 
  i = 0U;
  #line 587 
  while ((unsigned int)rx_ring->ring_size > i) {
    {
      #line 588 
      struct ena_rx_buffer *rx_info = rx_ring->__anonCompField_ena_ring_198.rx_buffer_info + (unsigned long)i;
      #line 590 
      if (rx_info->page != (struct page *)0) 
                                             #line 591 
                                             ena_free_rx_page(rx_ring,rx_info);
    }
    #line 587 
    i ++;
  }
  #line 593 
  return;
}

#line 598  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_netdev.c"
static void ena_refill_all_rx_bufs(struct ena_adapter *adapter)
{
  #line 600 
  struct ena_ring *rx_ring;
  #line 601 
  int i;
  #line 601 
  int rc;
  #line 601 
  int bufs_num;
  #line 603 
  i = 0;
  #line 603 
  while (adapter->num_io_queues > (unsigned int)i) {
    #line 604 
    rx_ring = & adapter->rx_ring[i];
    #line 605 
    bufs_num = rx_ring->ring_size + -1;
    #line 606 
    rc = ena_refill_rx_bufs(rx_ring,(unsigned int)bufs_num);
    #line 608 
    if ((long)(rc != bufs_num) != 0L) 
      #line 609 
      if (((rx_ring->adapter)->msg_enable & 2048U) != 0U) 
                                                          #line 609 
                                                          netdev_warn(rx_ring->netdev,(char *)"refilling Queue %d failed. allocated %d buffers from: %d\n",i,rc,bufs_num);
    #line 603 
    i ++;
  }
  #line 611 
  return;
}

#line 615  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_netdev.c"
static void ena_free_all_rx_bufs(struct ena_adapter *adapter)
{
  #line 617 
  int i;
  #line 619 
  i = 0;
  #line 619 
  while (adapter->num_io_queues > (unsigned int)i) {
    #line 620 
    ena_free_rx_bufs(adapter,(unsigned int)i);
    #line 619 
    i ++;
  }
  #line 621 
  return;
}

#line 623  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_netdev.c"
static void ena_unmap_tx_skb(struct ena_ring *tx_ring, struct ena_tx_buffer *tx_info)
{
  #line 626 
  struct ena_com_buf *ena_buf;
  #line 627 
  u32 cnt;
  #line 628 
  int i;
  #line 630 
  ena_buf = (struct ena_com_buf *)(& tx_info->bufs);
  #line 631 
  cnt = tx_info->num_of_bufs;
  #line 633 
  if ((long)(cnt == 0U) != 0L) 
                               #line 634 
                               return;
  #line 636 
  if ((unsigned int)tx_info->map_linear_data != 0U) {
    #line 637 
    dma_unmap_single_attrs(tx_ring->dev,ena_buf->paddr,(unsigned long)ena_buf->len,(enum dma_data_direction)DMA_TO_DEVICE,0UL);
    #line 641 
    ena_buf ++;
    #line 642 
    cnt --;
  }
  #line 646 
  i = 0;
  #line 646 
  while ((unsigned int)i < cnt) {
    #line 647 
    dma_unmap_page_attrs(tx_ring->dev,ena_buf->paddr,(unsigned long)ena_buf->len,(enum dma_data_direction)DMA_TO_DEVICE,0UL);
    #line 649 
    ena_buf ++;
    #line 646 
    i ++;
  }
  #line 651 
  return;
}

#line 656  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_netdev.c"
static void ena_free_tx_bufs(struct ena_ring *tx_ring)
{
  #line 659 
  u32 i;
  #line 658 
  bool print_once = (_Bool)1;
  #line 661 
  i = 0U;
  #line 661 
  while ((unsigned int)tx_ring->ring_size > i) {
    {
      #line 662 
      struct ena_tx_buffer *tx_info = tx_ring->__anonCompField_ena_ring_198.tx_buffer_info + (unsigned long)i;
      #line 664 
      if (tx_info->skb == (struct sk_buff *)0) 
                                               #line 665 
                                               goto __Cont;
      #line 667 
      if ((int)print_once != 0) {
        #line 668 
        netdev_notice(tx_ring->netdev,(char *)"free uncompleted tx skb qid %d idx 0x%x\n",(int)tx_ring->qid,i);
        #line 671 
        print_once = (_Bool)0;
      }
      else {
        #line 673 
        bool branch;
        #line 673 
        struct _ddebug __UNIQUE_ID_ddebug550 = {.modname = (char *)"ena", .function = (char *)"ena_free_tx_bufs", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_netdev.c", .format = (char *)"free uncompleted tx skb qid %d idx 0x%x\n", .lineno = (unsigned int)673U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
        #line 673 
        branch = arch_static_branch(& __UNIQUE_ID_ddebug550.key.dd_key_false.key,(_Bool)0);
        #line 673 
        if ((long)((long)((int)branch != 0)) != 0L) 
                                                    #line 673 
                                                    __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug550,tx_ring->netdev,(char *)"free uncompleted tx skb qid %d idx 0x%x\n",(int)tx_ring->qid,i);
      }
      #line 678 
      ena_unmap_tx_skb(tx_ring,tx_info);
      #line 680 
      dev_kfree_skb_any(tx_info->skb);
    }
    #line 661 
    __Cont: 
            #line 661 
    i ++;
  }
  #line 682 
  netdev_tx_reset_queue(netdev_get_tx_queue(tx_ring->netdev,(unsigned int)tx_ring->qid));
  #line 684 
  return;
}

#line 686  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_netdev.c"
static void ena_free_all_tx_bufs(struct ena_adapter *adapter)
{
  #line 688 
  struct ena_ring *tx_ring;
  #line 689 
  int i;
  #line 691 
  i = 0;
  #line 691 
  while (adapter->num_io_queues > (unsigned int)i) {
    #line 692 
    tx_ring = & adapter->tx_ring[i];
    #line 693 
    ena_free_tx_bufs(tx_ring);
    #line 691 
    i ++;
  }
  #line 695 
  return;
}

#line 697  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_netdev.c"
static void ena_destroy_all_tx_queues(struct ena_adapter *adapter)
{
  #line 699 
  u16 ena_qid;
  #line 700 
  int i;
  #line 702 
  i = 0;
  #line 702 
  while (adapter->num_io_queues > (unsigned int)i) {
    #line 703 
    ena_qid = (unsigned short)((unsigned int)((unsigned short)i) * 2U);
    #line 704 
    ena_com_destroy_io_queue(adapter->ena_dev,(unsigned short)((int)ena_qid));
    #line 702 
    i ++;
  }
  #line 706 
  return;
}

#line 708  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_netdev.c"
static void ena_destroy_all_rx_queues(struct ena_adapter *adapter)
{
  #line 710 
  u16 ena_qid;
  #line 711 
  int i;
  #line 713 
  i = 0;
  #line 713 
  while (adapter->num_io_queues > (unsigned int)i) {
    #line 714 
    ena_qid = (unsigned short)((unsigned int)((unsigned short)i) * 2U + 1U);
    #line 715 
    cancel_work_sync(& adapter->ena_napi[i].dim.work);
    #line 716 
    ena_com_destroy_io_queue(adapter->ena_dev,(unsigned short)((int)ena_qid));
    #line 713 
    i ++;
  }
  #line 718 
  return;
}

#line 720  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_netdev.c"
static void ena_destroy_all_io_queues(struct ena_adapter *adapter)
{
  #line 722 
  ena_destroy_all_tx_queues(adapter);
  #line 723 
  ena_destroy_all_rx_queues(adapter);
  #line 724 
  return;
}

#line 726  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_netdev.c"
static int validate_tx_req_id(struct ena_ring *tx_ring, u16 req_id)
{
  #line 728 
  struct ena_tx_buffer *tx_info = (struct ena_tx_buffer *)0;
  #line 730 
  if ((long)((int)req_id < tx_ring->ring_size) != 0L) {
    #line 731 
    tx_info = tx_ring->__anonCompField_ena_ring_198.tx_buffer_info + (unsigned long)req_id;
    #line 732 
    if ((long)(tx_info->skb != (struct sk_buff *)0) != 0L) 
                                                           #line 733 
                                                           return 0;
  }
  #line 736 
  if (tx_info != (struct ena_tx_buffer *)0) {
    #line 737 
    if (((tx_ring->adapter)->msg_enable & 1024U) != 0U) 
                                                        #line 737 
                                                        netdev_err(tx_ring->netdev,(char *)"tx_info doesn\'t have valid skb\n");
  }
  else 
    #line 740 
    if (((tx_ring->adapter)->msg_enable & 1024U) != 0U) 
                                                        #line 740 
                                                        netdev_err(tx_ring->netdev,(char *)"Invalid req_id: %hu\n",(int)req_id);
  #line 743 
  u64_stats_init(& tx_ring->syncp);
  #line 744 
  (tx_ring->__anonCompField_ena_ring_199.tx_stats.bad_req_id) ++;
  #line 745 
  u64_stats_init(& tx_ring->syncp);
  #line 748 
  (tx_ring->adapter)->reset_reason = ENA_REGS_RESET_INV_TX_REQ_ID;
  #line 749 
  cif_set_bit(4L,& (tx_ring->adapter)->flags);
  #line 750 
  return -14;
}

#line 753  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_netdev.c"
static int ena_clean_tx_irq(struct ena_ring *tx_ring, u32 budget)
{
  #line 755 
  struct netdev_queue *txq;
  #line 756 
  bool above_thresh;
  #line 759 
  u16 next_to_clean;
  #line 760 
  u16 req_id;
  #line 762 
  int rc;
  #line 757 
  u32 tx_bytes = 0U;
  #line 758 
  u32 total_done = 0U;
  #line 761 
  int tx_pkts = 0;
  #line 764 
  next_to_clean = tx_ring->next_to_clean;
  #line 765 
  txq = netdev_get_tx_queue(tx_ring->netdev,(unsigned int)tx_ring->qid);
  #line 767 
  while ((unsigned int)tx_pkts < budget) {
    #line 768 
    struct ena_tx_buffer *tx_info;
    #line 769 
    struct sk_buff *skb;
    #line 771 
    rc = ena_com_tx_comp_req_id_get(tx_ring->ena_com_io_cq,& req_id);
    #line 773 
    if (rc != 0) 
                 #line 774 
                 break;
    #line 776 
    rc = validate_tx_req_id(tx_ring,(unsigned short)((int)req_id));
    #line 777 
    if (rc != 0) 
                 #line 778 
                 break;
    #line 780 
    tx_info = tx_ring->__anonCompField_ena_ring_198.tx_buffer_info + (unsigned long)req_id;
    #line 781 
    skb = tx_info->skb;
    #line 784 
    __builtin_prefetch((void const *)((void *)(& skb->end)));
    #line 786 
    tx_info->skb = (struct sk_buff *)0;
    #line 787 
    tx_info->last_jiffies = 0UL;
    #line 789 
    ena_unmap_tx_skb(tx_ring,tx_info);
    #line 791 
    if (((tx_ring->adapter)->msg_enable & 1024U) != 0U) {
      #line 791 
      bool branch;
      #line 791 
      struct _ddebug __UNIQUE_ID_ddebug551 = {.modname = (char *)"ena", .function = (char *)"ena_clean_tx_irq", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_netdev.c", .format = (char *)"tx_poll: q %d skb %p completed\n", .lineno = (unsigned int)791U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 791 
      branch = arch_static_branch(& __UNIQUE_ID_ddebug551.key.dd_key_false.key,(_Bool)0);
      #line 791 
      if ((long)((long)((int)branch != 0)) != 0L) 
                                                  #line 791 
                                                  __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug551,tx_ring->netdev,(char *)"tx_poll: q %d skb %p completed\n",(int)tx_ring->qid,skb);
    }
    #line 795 
    tx_bytes = skb->len + tx_bytes;
    #line 796 
    consume_skb(skb);
    #line 797 
    tx_pkts ++;
    #line 798 
    total_done = tx_info->tx_descs + total_done;
    #line 800 
    *(tx_ring->free_ids + (unsigned long)next_to_clean) = req_id;
    #line 801 
    next_to_clean = (unsigned short)(((unsigned int)next_to_clean + 1U) & ((unsigned int)tx_ring->ring_size + 65535U));
  }
  #line 805 
  tx_ring->next_to_clean = next_to_clean;
  #line 806 
  ena_com_comp_ack(tx_ring->ena_com_io_sq,(unsigned short)((int)((unsigned short)total_done)));
  #line 807 
  ena_com_update_dev_comp_head(tx_ring->ena_com_io_cq);
  #line 809 
  netdev_tx_completed_queue(txq,(unsigned int)tx_pkts,tx_bytes);
  #line 811 
  if (((tx_ring->adapter)->msg_enable & 1024U) != 0U) {
    #line 811 
    bool branch_0;
    #line 811 
    struct _ddebug __UNIQUE_ID_ddebug552 = {.modname = (char *)"ena", .function = (char *)"ena_clean_tx_irq", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_netdev.c", .format = (char *)"tx_poll: q %d done. total pkts: %d\n", .lineno = (unsigned int)811U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 811 
    branch_0 = arch_static_branch(& __UNIQUE_ID_ddebug552.key.dd_key_false.key,(_Bool)0);
    #line 811 
    if ((long)((long)((int)branch_0 != 0)) != 0L) 
                                                  #line 811 
                                                  __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug552,tx_ring->netdev,(char *)"tx_poll: q %d done. total pkts: %d\n",(int)tx_ring->qid,tx_pkts);
  }
  #line 813 
  ldv_inline_asm();
  #line 820 
  above_thresh = ena_com_sq_have_enough_space(tx_ring->ena_com_io_sq,(unsigned short)19);
  #line 822 
  if ((long)((int)netif_tx_queue_stopped(txq) != 0) != 0L) 
    #line 822 
    if ((long)((int)above_thresh != 0) != 0L) {
      #line 823 
      int pscr_ret__;
      #line 823 
      __this_cpu_preempt_check((char *)"read");
      {
        #line 823 
        void *__vpp_verify = (void *)0;
        #line 823 
        void *tmp_2 = __vpp_verify;
      }
      #line 823 
      switch (4UL) {
        #line 823 
        int pfo_ret___2;
        #line 823 
        int pfo_ret__;
        #line 823 
        int pfo_ret___0;
        #line 823 
        int pfo_ret___1;
        #line 823 
        case (unsigned long)1: 
                               #line 823 
        ;
        #line 823 
        switch (4UL) {
          #line 823 
          case (unsigned long)1: 
                                 #line 823 
          ;
          #line 824 
          ldv_inline_asm();
          #line 823 
          break;
          #line 823 
          case (unsigned long)2: 
                                 #line 823 
          ;
          #line 824 
          ldv_inline_asm();
          #line 823 
          break;
          #line 823 
          case (unsigned long)4: 
                                 #line 823 
          ;
          #line 824 
          ldv_inline_asm();
          #line 823 
          break;
          #line 823 
          case (unsigned long)8: 
                                 #line 823 
          ;
          #line 824 
          ldv_inline_asm();
          #line 823 
          break;
          #line 823 
          default: 
                   #line 823 
          ;
          #line 823 
          __bad_percpu_size();
        }
        #line 823 
        pscr_ret__ = pfo_ret__;
        #line 823 
        break;
        #line 823 
        case (unsigned long)2: 
                               #line 823 
        ;
        #line 823 
        switch (4UL) {
          #line 823 
          case (unsigned long)1: 
                                 #line 823 
          ;
          #line 824 
          ldv_inline_asm();
          #line 823 
          break;
          #line 823 
          case (unsigned long)2: 
                                 #line 823 
          ;
          #line 824 
          ldv_inline_asm();
          #line 823 
          break;
          #line 823 
          case (unsigned long)4: 
                                 #line 823 
          ;
          #line 824 
          ldv_inline_asm();
          #line 823 
          break;
          #line 823 
          case (unsigned long)8: 
                                 #line 823 
          ;
          #line 824 
          ldv_inline_asm();
          #line 823 
          break;
          #line 823 
          default: 
                   #line 823 
          ;
          #line 823 
          __bad_percpu_size();
        }
        #line 823 
        pscr_ret__ = pfo_ret___0;
        #line 823 
        break;
        #line 823 
        case (unsigned long)4: 
                               #line 823 
        ;
        #line 823 
        switch (4UL) {
          #line 823 
          case (unsigned long)1: 
                                 #line 823 
          ;
          #line 824 
          ldv_inline_asm();
          #line 823 
          break;
          #line 823 
          case (unsigned long)2: 
                                 #line 823 
          ;
          #line 824 
          ldv_inline_asm();
          #line 823 
          break;
          #line 823 
          case (unsigned long)4: 
                                 #line 823 
          ;
          #line 824 
          ldv_inline_asm();
          #line 823 
          break;
          #line 823 
          case (unsigned long)8: 
                                 #line 823 
          ;
          #line 824 
          ldv_inline_asm();
          #line 823 
          break;
          #line 823 
          default: 
                   #line 823 
          ;
          #line 823 
          __bad_percpu_size();
        }
        #line 823 
        pscr_ret__ = pfo_ret___1;
        #line 823 
        break;
        #line 823 
        case (unsigned long)8: 
                               #line 823 
        ;
        #line 823 
        switch (4UL) {
          #line 823 
          case (unsigned long)1: 
                                 #line 823 
          ;
          #line 824 
          ldv_inline_asm();
          #line 823 
          break;
          #line 823 
          case (unsigned long)2: 
                                 #line 823 
          ;
          #line 824 
          ldv_inline_asm();
          #line 823 
          break;
          #line 823 
          case (unsigned long)4: 
                                 #line 823 
          ;
          #line 824 
          ldv_inline_asm();
          #line 823 
          break;
          #line 823 
          case (unsigned long)8: 
                                 #line 823 
          ;
          #line 824 
          ldv_inline_asm();
          #line 823 
          break;
          #line 823 
          default: 
                   #line 823 
          ;
          #line 823 
          __bad_percpu_size();
        }
        #line 823 
        pscr_ret__ = pfo_ret___2;
        #line 823 
        break;
        #line 823 
        default: 
                 #line 823 
        ;
        #line 823 
        __bad_size_call_parameter();
        #line 823 
        break;
      }
      #line 823 
      ;
      #line 823 
      __netif_tx_lock(txq,pscr_ret__);
      #line 824 
      above_thresh = ena_com_sq_have_enough_space(tx_ring->ena_com_io_sq,(unsigned short)19);
      #line 827 
      if ((int)netif_tx_queue_stopped(txq) != 0) 
        #line 827 
        if ((int)above_thresh != 0) {
          #line 827 
          if ((int)test_bit(1L,& (tx_ring->adapter)->flags) != 0) {
            #line 829 
            netif_tx_wake_queue(txq);
            #line 830 
            u64_stats_init(& tx_ring->syncp);
            #line 831 
            (tx_ring->__anonCompField_ena_ring_199.tx_stats.queue_wakeup) ++;
            #line 832 
            u64_stats_init(& tx_ring->syncp);
          }
        }
      #line 834 
      __netif_tx_unlock(txq);
    }
  #line 837 
  return tx_pkts;
}

#line 840  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_netdev.c"
static struct sk_buff *ena_alloc_skb(struct ena_ring *rx_ring, bool frags)
{
  #line 842 
  struct sk_buff *skb;
  #line 844 
  if ((int)frags != 0) 
                       #line 845 
                       skb = napi_get_frags(rx_ring->napi); else 
                                                                 #line 847 
                                                                 skb = netdev_alloc_skb_ip_align(rx_ring->netdev,(unsigned int)rx_ring->rx_copybreak);
  #line 850 
  if ((long)(skb == (struct sk_buff *)0) != 0L) {
    #line 851 
    u64_stats_init(& rx_ring->syncp);
    #line 852 
    (rx_ring->__anonCompField_ena_ring_199.rx_stats.skb_alloc_fail) ++;
    #line 853 
    u64_stats_init(& rx_ring->syncp);
    #line 854 
    if (((rx_ring->adapter)->msg_enable & 64U) != 0U) {
      #line 854 
      bool branch;
      #line 854 
      struct _ddebug __UNIQUE_ID_ddebug553 = {.modname = (char *)"ena", .function = (char *)"ena_alloc_skb", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_netdev.c", .format = (char *)"Failed to allocate skb. frags: %d\n", .lineno = (unsigned int)854U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 854 
      branch = arch_static_branch(& __UNIQUE_ID_ddebug553.key.dd_key_false.key,(_Bool)0);
      #line 854 
      if ((long)((long)((int)branch != 0)) != 0L) 
                                                  #line 854 
                                                  __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug553,rx_ring->netdev,(char *)"Failed to allocate skb. frags: %d\n",(int)frags);
    }
    #line 856 
    return (struct sk_buff *)0;
  }
  #line 859 
  return skb;
}

#line 862  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_netdev.c"
static struct sk_buff *ena_rx_skb(struct ena_ring *rx_ring, struct ena_com_rx_buf_info *ena_bufs, u32 descs, u16 *next_to_clean)
{
  #line 867 
  struct sk_buff *skb;
  #line 868 
  struct ena_rx_buffer *rx_info;
  #line 869 
  u16 len;
  #line 869 
  u16 req_id;
  #line 870 
  void *va;
  #line 869 
  u16 buf = (unsigned short)0U;
  #line 872 
  len = (ena_bufs + (unsigned long)buf)->len;
  #line 873 
  req_id = (ena_bufs + (unsigned long)buf)->req_id;
  #line 874 
  rx_info = rx_ring->__anonCompField_ena_ring_198.rx_buffer_info + (unsigned long)req_id;
  #line 876 
  if ((long)(rx_info->page == (struct page *)0) != 0L) {
    #line 877 
    if (((rx_ring->adapter)->msg_enable & 64U) != 0U) 
                                                      #line 877 
                                                      netdev_err(rx_ring->netdev,(char *)"Page is NULL\n");
    #line 879 
    return (struct sk_buff *)0;
  }
  #line 882 
  if (((rx_ring->adapter)->msg_enable & 2048U) != 0U) {
    #line 882 
    bool branch;
    #line 882 
    struct _ddebug __UNIQUE_ID_ddebug554 = {.modname = (char *)"ena", .function = (char *)"ena_rx_skb", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_netdev.c", .format = (char *)"rx_info %p page %p\n", .lineno = (unsigned int)882U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 882 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug554.key.dd_key_false.key,(_Bool)0);
    #line 882 
    if ((long)((long)((int)branch != 0)) != 0L) 
                                                #line 882 
                                                __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug554,rx_ring->netdev,(char *)"rx_info %p page %p\n",rx_info,rx_info->page);
  }
  #line 887 
  va = lowmem_page_address(rx_info->page) + (unsigned long)rx_info->page_offset;
  #line 888 
  __builtin_prefetch((void const *)va);
  #line 890 
  if ((int)rx_ring->rx_copybreak >= (int)len) {
    #line 891 
    skb = ena_alloc_skb(rx_ring,(_Bool)0);
    #line 892 
    if ((long)(skb == (struct sk_buff *)0) != 0L) 
                                                  #line 893 
                                                  return (struct sk_buff *)0;
    #line 895 
    if (((rx_ring->adapter)->msg_enable & 2048U) != 0U) {
      #line 895 
      bool branch_0;
      #line 895 
      struct _ddebug __UNIQUE_ID_ddebug555 = {.modname = (char *)"ena", .function = (char *)"ena_rx_skb", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_netdev.c", .format = (char *)"rx allocated small packet. len %d. data_len %d\n", .lineno = (unsigned int)895U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 895 
      branch_0 = arch_static_branch(& __UNIQUE_ID_ddebug555.key.dd_key_false.key,(_Bool)0);
      #line 895 
      if ((long)((long)((int)branch_0 != 0)) != 0L) 
                                                    #line 895 
                                                    __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug555,rx_ring->netdev,(char *)"rx allocated small packet. len %d. data_len %d\n",skb->len,skb->data_len);
    }
    #line 900 
    dma_sync_single_for_cpu(rx_ring->dev,rx_info->ena_buf.paddr,(unsigned long)len,(enum dma_data_direction)DMA_FROM_DEVICE);
    #line 904 
    skb_copy_to_linear_data(skb,va,(unsigned int)len);
    #line 905 
    dma_sync_single_for_device(rx_ring->dev,rx_info->ena_buf.paddr,(unsigned long)len,(enum dma_data_direction)DMA_FROM_DEVICE);
    #line 910 
    skb_put(skb,(unsigned int)len);
    #line 911 
    skb->protocol = eth_type_trans(skb,rx_ring->netdev);
    #line 912 
    *(rx_ring->free_ids + (unsigned long)*next_to_clean) = req_id;
    #line 913 
    *next_to_clean = (unsigned short)((unsigned int)((int)*next_to_clean + (int)((unsigned short)descs)) & ((unsigned int)((unsigned short)rx_ring->ring_size) + 65535U));
    #line 915 
    return skb;
  }
  #line 918 
  skb = ena_alloc_skb(rx_ring,(_Bool)1);
  #line 919 
  if ((long)(skb == (struct sk_buff *)0) != 0L) 
                                                #line 920 
                                                return (struct sk_buff *)0;
  #line 922 
  while (1) {
    #line 923 
    dma_unmap_page_attrs(rx_ring->dev,rx_info->ena_buf.paddr,4096UL,(enum dma_data_direction)DMA_FROM_DEVICE,0UL);
    #line 927 
    ;
    #line 927 
    ;
    #line 927 
    ;
    #line 927 
    ;
    #line 927 
    skb_add_rx_frag(skb,(int)((struct skb_shared_info *)skb_end_pointer(skb))->nr_frags,rx_info->page,(int)rx_info->page_offset,(int)len,4096U);
    #line 930 
    if (((rx_ring->adapter)->msg_enable & 2048U) != 0U) {
      #line 930 
      bool branch_1;
      #line 930 
      struct _ddebug __UNIQUE_ID_ddebug556 = {.modname = (char *)"ena", .function = (char *)"ena_rx_skb", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_netdev.c", .format = (char *)"rx skb updated. len %d. data_len %d\n", .lineno = (unsigned int)930U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 930 
      branch_1 = arch_static_branch(& __UNIQUE_ID_ddebug556.key.dd_key_false.key,(_Bool)0);
      #line 930 
      if ((long)((long)((int)branch_1 != 0)) != 0L) 
                                                    #line 930 
                                                    __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug556,rx_ring->netdev,(char *)"rx skb updated. len %d. data_len %d\n",skb->len,skb->data_len);
    }
    #line 934 
    rx_info->page = (struct page *)0;
    #line 936 
    *(rx_ring->free_ids + (unsigned long)*next_to_clean) = req_id;
    #line 937 
    *next_to_clean = (unsigned short)(((unsigned int)*next_to_clean + 1U) & ((unsigned int)rx_ring->ring_size + 65535U));
    #line 940 
    descs --;
    #line 940 
    if ((long)(descs == 0U) != 0L) 
                                   #line 941 
                                   break;
    #line 943 
    buf = (u16)((int)buf + 1);
    #line 944 
    len = (ena_bufs + (unsigned long)buf)->len;
    #line 945 
    req_id = (ena_bufs + (unsigned long)buf)->req_id;
    #line 946 
    rx_info = rx_ring->__anonCompField_ena_ring_198.rx_buffer_info + (unsigned long)req_id;
  }
  #line 949 
  return skb;
}

#line 957  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_netdev.c"
static void ena_rx_checksum(struct ena_ring *rx_ring, struct ena_com_rx_ctx *ena_rx_ctx, struct sk_buff *skb)
{
  #line 962 
  if ((long)(((rx_ring->netdev)->features & 549755813888ULL) == 0ULL) != 0L) {
    #line 963 
    skb->ip_summed = (unsigned char)0U;
    #line 964 
    return;
  }
  #line 968 
  if ((int)ena_rx_ctx->frag != 0) {
    #line 969 
    skb->ip_summed = (unsigned char)0U;
    #line 970 
    return;
  }
  #line 974 
  if ((long)(ena_rx_ctx->l3_proto == (unsigned int)ENA_ETH_IO_L3_PROTO_IPV4) != 0L && (long)((int)ena_rx_ctx->l3_csum_err != 0) != 0L) {
    #line 977 
    skb->ip_summed = (unsigned char)0U;
    #line 978 
    u64_stats_init(& rx_ring->syncp);
    #line 979 
    (rx_ring->__anonCompField_ena_ring_199.rx_stats.bad_csum) ++;
    #line 980 
    u64_stats_init(& rx_ring->syncp);
    #line 981 
    if (((rx_ring->adapter)->msg_enable & 64U) != 0U) {
      #line 981 
      bool branch;
      #line 981 
      struct _ddebug __UNIQUE_ID_ddebug557 = {.modname = (char *)"ena", .function = (char *)"ena_rx_checksum", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_netdev.c", .format = (char *)"RX IPv4 header checksum error\n", .lineno = (unsigned int)981U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 981 
      branch = arch_static_branch(& __UNIQUE_ID_ddebug557.key.dd_key_false.key,(_Bool)0);
      #line 981 
      if ((long)((long)((int)branch != 0)) != 0L) 
                                                  #line 981 
                                                  __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug557,rx_ring->netdev,(char *)"RX IPv4 header checksum error\n");
    }
    #line 983 
    return;
  }
  #line 987 
  if ((long)((unsigned int)ena_rx_ctx->l4_proto + 4294967284U <= 1U) != 0L) {
    #line 989 
    if ((long)((int)ena_rx_ctx->l4_csum_err != 0) != 0L) {
      #line 991 
      u64_stats_init(& rx_ring->syncp);
      #line 992 
      (rx_ring->__anonCompField_ena_ring_199.rx_stats.bad_csum) ++;
      #line 993 
      u64_stats_init(& rx_ring->syncp);
      #line 994 
      if (((rx_ring->adapter)->msg_enable & 64U) != 0U) {
        #line 994 
        bool branch_0;
        #line 994 
        struct _ddebug __UNIQUE_ID_ddebug558 = {.modname = (char *)"ena", .function = (char *)"ena_rx_checksum", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_netdev.c", .format = (char *)"RX L4 checksum error\n", .lineno = (unsigned int)994U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
        #line 994 
        branch_0 = arch_static_branch(& __UNIQUE_ID_ddebug558.key.dd_key_false.key,(_Bool)0);
        #line 994 
        if ((long)((long)((int)branch_0 != 0)) != 0L) 
                                                      #line 994 
                                                      __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug558,rx_ring->netdev,(char *)"RX L4 checksum error\n");
      }
      #line 996 
      skb->ip_summed = (unsigned char)0U;
      #line 997 
      return;
    }
    #line 1000 
    if ((long)((unsigned int)ena_rx_ctx->l4_csum_checked != 0U) != 0L) {
      #line 1001 
      skb->ip_summed = (unsigned char)1U;
      #line 1002 
      u64_stats_init(& rx_ring->syncp);
      #line 1003 
      (rx_ring->__anonCompField_ena_ring_199.rx_stats.csum_good) ++;
      #line 1004 
      u64_stats_init(& rx_ring->syncp);
    }
    else {
      #line 1006 
      u64_stats_init(& rx_ring->syncp);
      #line 1007 
      (rx_ring->__anonCompField_ena_ring_199.rx_stats.csum_unchecked) ++;
      #line 1008 
      u64_stats_init(& rx_ring->syncp);
      #line 1009 
      skb->ip_summed = (unsigned char)0U;
    }
  }
  else {
    #line 1012 
    skb->ip_summed = (unsigned char)0U;
    #line 1013 
    return;
  }
  #line 1015 
  return;
}

#line 1018  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_netdev.c"
static void ena_set_rx_hash(struct ena_ring *rx_ring, struct ena_com_rx_ctx *ena_rx_ctx, struct sk_buff *skb)
{
  #line 1022 
  enum pkt_hash_types hash_type;
  #line 1024 
  if ((long)(((rx_ring->netdev)->features & 274877906944ULL) != 0ULL) != 0L) {
    #line 1025 
    if ((long)((unsigned int)ena_rx_ctx->l4_proto + 4294967284U <= 1U) != 0L) 
      #line 1028 
      hash_type = PKT_HASH_TYPE_L4; else 
                                         #line 1030 
                                         hash_type = PKT_HASH_TYPE_NONE;
    #line 1033 
    if ((int)ena_rx_ctx->frag != 0) 
                                    #line 1034 
                                    hash_type = PKT_HASH_TYPE_NONE;
    #line 1036 
    skb_set_hash(skb,ena_rx_ctx->hash,hash_type);
  }
  #line 1038 
  return;
}

#line 1047  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_netdev.c"
static int ena_clean_rx_irq(struct ena_ring *rx_ring, struct napi_struct *napi, u32 budget)
{
  #line 1131 
  int __UNIQUE_ID___x561;
  #line 1131 
  int tmp_1;
  #line 1051 
  u32 res_budget;
  #line 1051 
  u32 work_done;
  #line 1053 
  struct ena_com_rx_ctx ena_rx_ctx;
  #line 1054 
  struct ena_adapter *adapter;
  #line 1055 
  struct sk_buff *skb;
  #line 1056 
  int refill_required;
  #line 1057 
  int refill_threshold;
  #line 1061 
  int i;
  #line 1050 
  u16 next_to_clean = rx_ring->next_to_clean;
  #line 1058 
  int rc = 0;
  #line 1059 
  int total_len = 0;
  #line 1060 
  int rx_copybreak_pkt = 0;
  #line 1063 
  if (((rx_ring->adapter)->msg_enable & 2048U) != 0U) {
    #line 1063 
    bool branch;
    #line 1063 
    struct _ddebug __UNIQUE_ID_ddebug559 = {.modname = (char *)"ena", .function = (char *)"ena_clean_rx_irq", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_netdev.c", .format = (char *)"%s qid %d\n", .lineno = (unsigned int)1063U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 1063 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug559.key.dd_key_false.key,(_Bool)0);
    #line 1063 
    if ((long)((long)((int)branch != 0)) != 0L) 
                                                #line 1063 
                                                __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug559,rx_ring->netdev,(char *)"%s qid %d\n",(char *)"ena_clean_rx_irq",(int)rx_ring->qid);
  }
  #line 1065 
  res_budget = budget;
  #line 1067 
  while (1) {
    #line 1068 
    ena_rx_ctx.ena_bufs = (struct ena_com_rx_buf_info *)(& rx_ring->ena_bufs);
    #line 1069 
    ena_rx_ctx.max_bufs = (int)rx_ring->sgl_size;
    #line 1070 
    ena_rx_ctx.descs = (unsigned short)0U;
    #line 1071 
    rc = ena_com_rx_pkt(rx_ring->ena_com_io_cq,rx_ring->ena_com_io_sq,& ena_rx_ctx);
    #line 1074 
    if ((long)(rc != 0) != 0L) 
                               #line 1075 
                               goto error;
    #line 1077 
    if ((long)((unsigned int)ena_rx_ctx.descs == 0U) != 0L) 
                                                            #line 1078 
                                                            break;
    #line 1080 
    if (((rx_ring->adapter)->msg_enable & 2048U) != 0U) {
      #line 1080 
      bool branch_0;
      #line 1080 
      struct _ddebug __UNIQUE_ID_ddebug560 = {.modname = (char *)"ena", .function = (char *)"ena_clean_rx_irq", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_netdev.c", .format = (char *)"rx_poll: q %d got packet from ena. descs #: %d l3 proto %d l4 proto %d hash: %x\n", .lineno = (unsigned int)1080U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 1080 
      branch_0 = arch_static_branch(& __UNIQUE_ID_ddebug560.key.dd_key_false.key,(_Bool)0);
      #line 1080 
      if ((long)((long)((int)branch_0 != 0)) != 0L) 
                                                    #line 1080 
                                                    __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug560,rx_ring->netdev,(char *)"rx_poll: q %d got packet from ena. descs #: %d l3 proto %d l4 proto %d hash: %x\n",(int)rx_ring->qid,(int)ena_rx_ctx.descs,(unsigned int)ena_rx_ctx.l3_proto,(unsigned int)ena_rx_ctx.l4_proto,ena_rx_ctx.hash);
    }
    #line 1086 
    skb = ena_rx_skb(rx_ring,(struct ena_com_rx_buf_info *)(& rx_ring->ena_bufs),(unsigned int)ena_rx_ctx.descs,& next_to_clean);
    #line 1090 
    if ((long)(skb == (struct sk_buff *)0) != 0L) {
      #line 1091 
      i = 0;
      #line 1091 
      while ((int)ena_rx_ctx.descs > i) {
        #line 1092 
        *(rx_ring->free_ids + (unsigned long)next_to_clean) = rx_ring->ena_bufs[i].req_id;
        #line 1094 
        next_to_clean = (unsigned short)(((unsigned int)next_to_clean + 1U) & ((unsigned int)rx_ring->ring_size + 65535U));
        #line 1091 
        i ++;
      }
      #line 1098 
      break;
    }
    #line 1101 
    ena_rx_checksum(rx_ring,& ena_rx_ctx,skb);
    #line 1103 
    ena_set_rx_hash(rx_ring,& ena_rx_ctx,skb);
    #line 1105 
    skb_record_rx_queue(skb,(unsigned short)((int)rx_ring->qid));
    #line 1107 
    if ((int)rx_ring->ena_bufs[0].len <= (int)rx_ring->rx_copybreak) {
      #line 1108 
      total_len = (int)rx_ring->ena_bufs[0].len + total_len;
      #line 1109 
      rx_copybreak_pkt ++;
      #line 1110 
      napi_gro_receive(napi,skb);
    }
    else {
      #line 1112 
      total_len = (int)(skb->len + (unsigned int)total_len);
      #line 1113 
      napi_gro_frags(napi);
    }
    #line 1116 
    res_budget --;
    #line 1117 
    if (! ((long)(res_budget != 0U) != 0L)) 
                                            #line 1067 
                                            break;
  }
  #line 1119 
  work_done = budget - res_budget;
  #line 1120 
  rx_ring->per_napi_packets += work_done;
  #line 1121 
  u64_stats_init(& rx_ring->syncp);
  #line 1122 
  rx_ring->__anonCompField_ena_ring_199.rx_stats.bytes += (unsigned long long)total_len;
  #line 1123 
  rx_ring->__anonCompField_ena_ring_199.rx_stats.cnt += (unsigned long long)work_done;
  #line 1124 
  rx_ring->__anonCompField_ena_ring_199.rx_stats.rx_copybreak_pkt += (unsigned long long)rx_copybreak_pkt;
  #line 1125 
  u64_stats_init(& rx_ring->syncp);
  #line 1127 
  rx_ring->next_to_clean = next_to_clean;
  #line 1129 
  refill_required = ena_com_free_desc(rx_ring->ena_com_io_sq);
  {
    #line 1131 
    __UNIQUE_ID___x561 = rx_ring->ring_size / 8;
    #line 1131 
    int __UNIQUE_ID___y562 = 256;
    #line 1131 
    if (__UNIQUE_ID___x561 < __UNIQUE_ID___y562) 
                                                 #line 1131 
                                                 tmp_1 = __UNIQUE_ID___x561; else 
                                                                    #line 1131 
                                                                    tmp_1 = __UNIQUE_ID___y562;
    }
  #line 1130 
  refill_threshold = tmp_1;
  #line 1135 
  if (refill_required > refill_threshold) {
    #line 1136 
    ena_com_update_dev_comp_head(rx_ring->ena_com_io_cq);
    #line 1137 
    ena_refill_rx_bufs(rx_ring,(unsigned int)refill_required);
  }
  #line 1140 
  return (int)work_done;
  #line 1142 
  error: 
         #line 1142 
  ;
  #line 1143 
  adapter = (struct ena_adapter *)netdev_priv(rx_ring->netdev);
  #line 1145 
  u64_stats_init(& rx_ring->syncp);
  #line 1146 
  (rx_ring->__anonCompField_ena_ring_199.rx_stats.bad_desc_num) ++;
  #line 1147 
  u64_stats_init(& rx_ring->syncp);
  #line 1150 
  adapter->reset_reason = ENA_REGS_RESET_TOO_MANY_RX_DESCS;
  #line 1151 
  cif_set_bit(4L,& adapter->flags);
  #line 1153 
  return 0;
}

#line 1156  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_netdev.c"
static void ena_dim_work(struct work_struct *w)
{
  #line 1161 
  void *__mptr_0;
  #line 1158 
  void *__mptr;
  #line 1158 
  __mptr = (void *)w;
  #line 1158 
  struct dim *dim = ((struct dim *)(__mptr + 18446744073709551544U));
  #line 1159 
  struct dim_cq_moder cur_moder = net_dim_get_rx_moderation((unsigned char)((int)dim->mode),(int)dim->profile_ix);
  #line 1161 
  __mptr_0 = (void *)dim;
  #line 1161 
  struct ena_napi *ena_napi = ((struct ena_napi *)(__mptr_0 + 18446744073709551200U));
  #line 1163 
  (ena_napi->rx_ring)->smoothed_interval = (unsigned int)cur_moder.usec;
  #line 1164 
  dim->state = (unsigned char)0U;
  #line 1165 
  return;
}

#line 1167  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_netdev.c"
static void ena_adjust_adaptive_rx_intr_moderation(struct ena_napi *ena_napi)
{
  #line 1169 
  struct dim_sample dim_sample;
  #line 1170 
  struct ena_ring *rx_ring = ena_napi->rx_ring;
  #line 1172 
  if (rx_ring->per_napi_packets == 0U) 
                                       #line 1173 
                                       return;
  #line 1175 
  rx_ring->non_empty_napi_events = (u16)((int)rx_ring->non_empty_napi_events + 1);
  #line 1177 
  dim_update_sample((unsigned short)((int)rx_ring->non_empty_napi_events),rx_ring->__anonCompField_ena_ring_199.rx_stats.cnt,rx_ring->__anonCompField_ena_ring_199.rx_stats.bytes,& dim_sample);
  #line 1182 
  net_dim(& ena_napi->dim,dim_sample);
  #line 1184 
  rx_ring->per_napi_packets = 0U;
  #line 1185 
  return;
}

#line 1187  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_netdev.c"
static void ena_unmask_interrupt(struct ena_ring *tx_ring, struct ena_ring *rx_ring)
{
  #line 1190 
  struct ena_eth_io_intr_reg intr_reg;
  #line 1191 
  unsigned int tmp_1;
  #line 1191 
  if ((int)ena_com_get_adaptive_moderation_enabled(rx_ring->ena_dev) != 0) 
    #line 1191 
    tmp_1 = rx_ring->smoothed_interval; else 
                                             #line 1192 
                                             tmp_1 = ena_com_get_nonadaptive_moderation_interval_rx(rx_ring->ena_dev);
  #line 1191 
  u32 rx_interval = tmp_1;
  #line 1198 
  ena_com_update_intr_reg(& intr_reg,rx_interval,tx_ring->smoothed_interval,(_Bool)1);
  #line 1207 
  ena_com_unmask_intr(rx_ring->ena_com_io_cq,& intr_reg);
  #line 1208 
  return;
}

#line 1210  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_netdev.c"
static void ena_update_ring_numa_node(struct ena_ring *tx_ring, struct ena_ring *rx_ring)
{
  #line 1213 
  int pscr_ret__;
  #line 1214 
  int numa_node;
  #line 1213 
  __preempt_count_add(1);
  #line 1214 
  ldv_inline_asm();
  #line 1213 
  __this_cpu_preempt_check((char *)"read");
  {
    #line 1213 
    void *__vpp_verify = (void *)0;
    #line 1213 
    void *tmp = __vpp_verify;
  }
  #line 1213 
  switch (4UL) {
    #line 1213 
    int pfo_ret__;
    #line 1213 
    int pfo_ret___0;
    #line 1213 
    int pfo_ret___1;
    #line 1213 
    int pfo_ret___2;
    #line 1213 
    case (unsigned long)1: 
                           #line 1213 
    ;
    #line 1213 
    switch (4UL) {
      #line 1213 
      case (unsigned long)1: 
                             #line 1213 
      ;
      #line 1214 
      ldv_inline_asm();
      #line 1213 
      break;
      #line 1213 
      case (unsigned long)2: 
                             #line 1213 
      ;
      #line 1214 
      ldv_inline_asm();
      #line 1213 
      break;
      #line 1213 
      case (unsigned long)4: 
                             #line 1213 
      ;
      #line 1214 
      ldv_inline_asm();
      #line 1213 
      break;
      #line 1213 
      case (unsigned long)8: 
                             #line 1213 
      ;
      #line 1214 
      ldv_inline_asm();
      #line 1213 
      break;
      #line 1213 
      default: 
               #line 1213 
      ;
      #line 1213 
      __bad_percpu_size();
    }
    #line 1213 
    pscr_ret__ = pfo_ret__;
    #line 1213 
    break;
    #line 1213 
    case (unsigned long)2: 
                           #line 1213 
    ;
    #line 1213 
    switch (4UL) {
      #line 1213 
      case (unsigned long)1: 
                             #line 1213 
      ;
      #line 1214 
      ldv_inline_asm();
      #line 1213 
      break;
      #line 1213 
      case (unsigned long)2: 
                             #line 1213 
      ;
      #line 1214 
      ldv_inline_asm();
      #line 1213 
      break;
      #line 1213 
      case (unsigned long)4: 
                             #line 1213 
      ;
      #line 1214 
      ldv_inline_asm();
      #line 1213 
      break;
      #line 1213 
      case (unsigned long)8: 
                             #line 1213 
      ;
      #line 1214 
      ldv_inline_asm();
      #line 1213 
      break;
      #line 1213 
      default: 
               #line 1213 
      ;
      #line 1213 
      __bad_percpu_size();
    }
    #line 1213 
    pscr_ret__ = pfo_ret___0;
    #line 1213 
    break;
    #line 1213 
    case (unsigned long)4: 
                           #line 1213 
    ;
    #line 1213 
    switch (4UL) {
      #line 1213 
      case (unsigned long)1: 
                             #line 1213 
      ;
      #line 1214 
      ldv_inline_asm();
      #line 1213 
      break;
      #line 1213 
      case (unsigned long)2: 
                             #line 1213 
      ;
      #line 1214 
      ldv_inline_asm();
      #line 1213 
      break;
      #line 1213 
      case (unsigned long)4: 
                             #line 1213 
      ;
      #line 1214 
      ldv_inline_asm();
      #line 1213 
      break;
      #line 1213 
      case (unsigned long)8: 
                             #line 1213 
      ;
      #line 1214 
      ldv_inline_asm();
      #line 1213 
      break;
      #line 1213 
      default: 
               #line 1213 
      ;
      #line 1213 
      __bad_percpu_size();
    }
    #line 1213 
    pscr_ret__ = pfo_ret___1;
    #line 1213 
    break;
    #line 1213 
    case (unsigned long)8: 
                           #line 1213 
    ;
    #line 1213 
    switch (4UL) {
      #line 1213 
      case (unsigned long)1: 
                             #line 1213 
      ;
      #line 1214 
      ldv_inline_asm();
      #line 1213 
      break;
      #line 1213 
      case (unsigned long)2: 
                             #line 1213 
      ;
      #line 1214 
      ldv_inline_asm();
      #line 1213 
      break;
      #line 1213 
      case (unsigned long)4: 
                             #line 1213 
      ;
      #line 1214 
      ldv_inline_asm();
      #line 1213 
      break;
      #line 1213 
      case (unsigned long)8: 
                             #line 1213 
      ;
      #line 1214 
      ldv_inline_asm();
      #line 1213 
      break;
      #line 1213 
      default: 
               #line 1213 
      ;
      #line 1213 
      __bad_percpu_size();
    }
    #line 1213 
    pscr_ret__ = pfo_ret___2;
    #line 1213 
    break;
    #line 1213 
    default: 
             #line 1213 
    ;
    #line 1213 
    __bad_size_call_parameter();
    #line 1213 
    break;
  }
  #line 1213 
  int cpu = pscr_ret__;
  #line 1217 
  if ((long)(tx_ring->cpu == cpu) != 0L) 
                                         #line 1218 
                                         goto out;
  #line 1220 
  numa_node = __cpu_to_node(cpu);
  #line 1223 
  ldv_inline_asm();
  #line 1221 
  __preempt_count_sub(1);
  #line 1223 
  if (numa_node != -1) {
    #line 1224 
    ena_com_update_numa_node(tx_ring->ena_com_io_cq,(unsigned char)((int)((unsigned char)numa_node)));
    #line 1225 
    ena_com_update_numa_node(rx_ring->ena_com_io_cq,(unsigned char)((int)((unsigned char)numa_node)));
  }
  #line 1228 
  tx_ring->cpu = cpu;
  #line 1229 
  rx_ring->cpu = cpu;
  #line 1231 
  return;
  #line 1232 
  out: 
       #line 1232 
  ;
  #line 1235 
  ldv_inline_asm();
  #line 1233 
  __preempt_count_sub(1);
  #line 1235 
  return;
}

#line 1236  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_netdev.c"
static int ena_io_poll(struct napi_struct *napi, int budget)
{
  #line 1238 
  void *__mptr;
  #line 1239 
  struct ena_ring *tx_ring;
  #line 1239 
  struct ena_ring *rx_ring;
  #line 1241 
  int tx_work_done;
  #line 1243 
  int tx_budget;
  #line 1245 
  int ret;
  #line 1268 
  int tmp_5;
  #line 1238 
  __mptr = (void *)napi;
  #line 1238 
  struct ena_napi *ena_napi = ((struct ena_napi *)__mptr);
  #line 1242 
  int rx_work_done = 0;
  #line 1244 
  int napi_comp_call = 0;
  #line 1247 
  tx_ring = ena_napi->tx_ring;
  #line 1248 
  rx_ring = ena_napi->rx_ring;
  #line 1250 
  tx_budget = tx_ring->ring_size / 4;
  #line 1252 
  if (test_bit(1L,& (tx_ring->adapter)->flags)) {
    #line 1252 
    if ((int)test_bit(4L,& (tx_ring->adapter)->flags) != 0) {
      #line 1252 
      _LOR: {
              #line 1254 
              napi_complete_done(napi,0);
              #line 1255 
              return 0;
            }
    }
  }
  else 
       #line 1252 
       goto _LOR;
  #line 1258 
  tx_work_done = ena_clean_tx_irq(tx_ring,(unsigned int)tx_budget);
  #line 1262 
  if ((long)(budget != 0) != 0L) 
                                 #line 1263 
                                 rx_work_done = ena_clean_rx_irq(rx_ring,napi,(unsigned int)budget);
  #line 1268 
  if (test_bit(1L,& (tx_ring->adapter)->flags)) 
                                                #line 1268 
                                                tmp_5 = 0; else 
                                                                #line 1268 
                                                                tmp_5 = 1;
  #line 1268 
  if ((long)tmp_5 != 0L) 
                         #line 1268 
                         goto _LOR_0;
  else {
    #line 1268 
    if ((long)((int)test_bit(4L,& (tx_ring->adapter)->flags) != 0) != 0L) {
      #line 1268 
      _LOR_0: {
                #line 1270 
                napi_complete_done(napi,0);
                #line 1271 
                ret = 0;
              }
    }
    else 
      #line 1273 
      if (budget > rx_work_done && tx_budget > tx_work_done) {
        #line 1274 
        napi_comp_call = 1;
        #line 1279 
        if ((int)napi_complete_done(napi,rx_work_done) != 0) {
          #line 1283 
          if ((int)ena_com_get_adaptive_moderation_enabled(rx_ring->ena_dev) != 0) 
            #line 1284 
            ena_adjust_adaptive_rx_intr_moderation(ena_napi);
          #line 1286 
          ena_unmask_interrupt(tx_ring,rx_ring);
        }
        #line 1289 
        ena_update_ring_numa_node(tx_ring,rx_ring);
        #line 1291 
        ret = rx_work_done;
      }
      else 
           #line 1293 
           ret = budget;
  }
  #line 1296 
  u64_stats_init(& tx_ring->syncp);
  #line 1297 
  tx_ring->__anonCompField_ena_ring_199.tx_stats.napi_comp += (unsigned long long)napi_comp_call;
  #line 1298 
  (tx_ring->__anonCompField_ena_ring_199.tx_stats.tx_poll) ++;
  #line 1299 
  u64_stats_init(& tx_ring->syncp);
  #line 1301 
  return ret;
}

#line 1304  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_netdev.c"
static irqreturn_t ena_intr_msix_mgmnt(int irq, void *data)
{
  #line 1306 
  struct ena_adapter *adapter = (struct ena_adapter *)data;
  #line 1308 
  ena_com_admin_q_comp_intr_handler(adapter->ena_dev);
  #line 1311 
  if ((long)((int)test_bit(0L,& adapter->flags) != 0) != 0L) 
                                                             #line 1312 
                                                             ena_com_aenq_intr_handler(adapter->ena_dev,data);
  #line 1314 
  return IRQ_HANDLED;
}

#line 1321  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_netdev.c"
static irqreturn_t ena_intr_msix_io(int irq, void *data)
{
  #line 1323 
  struct ena_napi *ena_napi = (struct ena_napi *)data;
  #line 1325 
  (ena_napi->tx_ring)->first_interrupt = (_Bool)1;
  #line 1326 
  (ena_napi->rx_ring)->first_interrupt = (_Bool)1;
  #line 1328 
  napi_schedule_irqoff(& ena_napi->napi);
  #line 1330 
  return IRQ_HANDLED;
}

#line 1338  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_netdev.c"
static int ena_enable_msix(struct ena_adapter *adapter)
{
  #line 1340 
  int msix_vecs;
  #line 1340 
  int irq_cnt;
  #line 1342 
  if ((int)test_bit(3L,& adapter->flags) != 0) {
    #line 1343 
    if ((adapter->msg_enable & 2U) != 0U) 
                                          #line 1343 
                                          netdev_err(adapter->netdev,(char *)"Error, MSI-X is already enabled\n");
    #line 1345 
    return -1;
  }
  #line 1349 
  msix_vecs = (int)(adapter->num_io_queues + 1U);
  #line 1350 
  if ((adapter->msg_enable & 2U) != 0U) {
    #line 1350 
    bool branch;
    #line 1350 
    struct _ddebug __UNIQUE_ID_ddebug563 = {.modname = (char *)"ena", .function = (char *)"ena_enable_msix", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_netdev.c", .format = (char *)"trying to enable MSI-X, vectors %d\n", .lineno = (unsigned int)1350U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 1350 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug563.key.dd_key_false.key,(_Bool)0);
    #line 1350 
    if ((long)((long)((int)branch != 0)) != 0L) 
                                                #line 1350 
                                                __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug563,adapter->netdev,(char *)"trying to enable MSI-X, vectors %d\n",msix_vecs);
  }
  #line 1353 
  irq_cnt = pci_alloc_irq_vectors(adapter->pdev,2U,(unsigned int)msix_vecs,4U);
  #line 1356 
  if (irq_cnt < 0) {
    #line 1357 
    if ((adapter->msg_enable & 2U) != 0U) 
                                          #line 1357 
                                          netdev_err(adapter->netdev,(char *)"Failed to enable MSI-X. irq_cnt %d\n",irq_cnt);
    #line 1359 
    return -28;
  }
  #line 1362 
  if (irq_cnt != msix_vecs) {
    #line 1363 
    if ((adapter->msg_enable & 2U) != 0U) 
                                          #line 1363 
                                          netdev_notice(adapter->netdev,(char *)"enable only %d MSI-X (out of %d), reduce the number of queues\n",irq_cnt,msix_vecs);
    #line 1366 
    adapter->num_io_queues = (unsigned int)(irq_cnt + -1);
  }
  #line 1369 
  if (ena_init_rx_cpu_rmap(adapter) != 0) 
    #line 1370 
    if ((adapter->msg_enable & 2U) != 0U) 
                                          #line 1370 
                                          netdev_warn(adapter->netdev,(char *)"Failed to map IRQs to CPUs\n");
  #line 1373 
  adapter->msix_vecs = irq_cnt;
  #line 1374 
  cif_set_bit(3L,& adapter->flags);
  #line 1376 
  return 0;
}

#line 1379  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_netdev.c"
static void ena_setup_mgmnt_intr(struct ena_adapter *adapter)
{
  #line 1381 
  u32 cpu;
  #line 1383 
  ;
  #line 1383 
  snprintf((char *)(& adapter->irq_tbl[0].name),40UL,(char *)"ena-mgmnt@pci:%s",pci_name(adapter->pdev));
  #line 1386 
  adapter->irq_tbl[0].handler = & ena_intr_msix_mgmnt;
  #line 1388 
  adapter->irq_tbl[0].data = (void *)adapter;
  #line 1389 
  adapter->irq_tbl[0].vector = (unsigned int)pci_irq_vector(adapter->pdev,0U);
  #line 1391 
  cpu = cpumask_first(& __cpu_online_mask);
  #line 1392 
  adapter->irq_tbl[0].cpu = (int)cpu;
  #line 1393 
  cpumask_set_cpu(cpu,& adapter->irq_tbl[0].affinity_hint_mask);
  #line 1395 
  return;
}

#line 1397  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_netdev.c"
static void ena_setup_io_intr(struct ena_adapter *adapter)
{
  #line 1399 
  struct net_device *netdev;
  #line 1400 
  int irq_idx;
  #line 1400 
  int i;
  #line 1400 
  int cpu;
  #line 1402 
  netdev = adapter->netdev;
  #line 1404 
  i = 0;
  #line 1404 
  while (adapter->num_io_queues > (unsigned int)i) {
    {
      #line 1405 
      irq_idx = i + 1;
      #line 1406 
      cpu = (int)((unsigned int)i % num_online_cpus());
      #line 1408 
      snprintf((char *)(& adapter->irq_tbl[irq_idx].name),40UL,(char *)"%s-Tx-Rx-%d",(char *)(& netdev->name),i);
      #line 1410 
      adapter->irq_tbl[irq_idx].handler = & ena_intr_msix_io;
      #line 1411 
      adapter->irq_tbl[irq_idx].data = (void *)(& adapter->ena_napi[i]);
      #line 1412 
      adapter->irq_tbl[irq_idx].vector = (unsigned int)pci_irq_vector(adapter->pdev,(unsigned int)irq_idx);
      #line 1414 
      adapter->irq_tbl[irq_idx].cpu = cpu;
      #line 1416 
      cpumask_set_cpu((unsigned int)cpu,& adapter->irq_tbl[irq_idx].affinity_hint_mask);
    }
    #line 1404 
    i ++;
  }
  #line 1419 
  return;
}

#line 1421  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_netdev.c"
static int ena_request_mgmnt_irq(struct ena_adapter *adapter)
{
  #line 1424 
  struct ena_irq *irq;
  #line 1425 
  int rc;
  #line 1423 
  unsigned long flags = 0UL;
  #line 1427 
  irq = & adapter->irq_tbl[0];
  #line 1428 
  rc = cif_request_irq(irq->vector,irq->handler,flags,(char *)(& irq->name),irq->data);
  #line 1430 
  if (rc != 0) {
    #line 1431 
    if ((adapter->msg_enable & 2U) != 0U) 
                                          #line 1431 
                                          netdev_err(adapter->netdev,(char *)"failed to request admin irq\n");
    #line 1433 
    return rc;
  }
  #line 1436 
  if ((adapter->msg_enable & 2U) != 0U) {
    #line 1436 
    bool branch;
    #line 1436 
    struct _ddebug __UNIQUE_ID_ddebug564 = {.modname = (char *)"ena", .function = (char *)"ena_request_mgmnt_irq", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_netdev.c", .format = (char *)"set affinity hint of mgmnt irq.to 0x%lx (irq vector: %d)\n", .lineno = (unsigned int)1436U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 1436 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug564.key.dd_key_false.key,(_Bool)0);
    #line 1436 
    if ((long)((long)((int)branch != 0)) != 0L) 
                                                #line 1436 
                                                __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug564,adapter->netdev,(char *)"set affinity hint of mgmnt irq.to 0x%lx (irq vector: %d)\n",irq->affinity_hint_mask.bits[0],irq->vector);
  }
  #line 1440 
  irq_set_affinity_hint(irq->vector,& irq->affinity_hint_mask);
  #line 1442 
  return rc;
}

#line 1445  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_netdev.c"
static int ena_request_io_irq(struct ena_adapter *adapter)
{
  #line 1448 
  struct ena_irq *irq;
  #line 1449 
  int i;
  #line 1449 
  int k;
  #line 1447 
  unsigned long flags = 0UL;
  #line 1449 
  int rc = 0;
  #line 1451 
  if (! test_bit(3L,& adapter->flags)) {
    #line 1452 
    if ((adapter->msg_enable & 32U) != 0U) 
                                           #line 1452 
                                           netdev_err(adapter->netdev,(char *)"Failed to request I/O IRQ: MSI-X is not enabled\n");
    #line 1454 
    return -22;
  }
  #line 1457 
  i = 1;
  #line 1457 
  while (adapter->msix_vecs > i) {
    #line 1458 
    irq = & adapter->irq_tbl[i];
    #line 1459 
    rc = cif_request_irq(irq->vector,irq->handler,flags,(char *)(& irq->name),irq->data);
    #line 1461 
    if (rc != 0) {
      #line 1462 
      if ((adapter->msg_enable & 32U) != 0U) 
                                             #line 1462 
                                             netdev_err(adapter->netdev,(char *)"Failed to request I/O IRQ. index %d rc %d\n",i,rc);
      #line 1465 
      goto err;
    }
    #line 1468 
    if ((adapter->msg_enable & 32U) != 0U) {
      #line 1468 
      bool branch;
      #line 1468 
      struct _ddebug __UNIQUE_ID_ddebug565 = {.modname = (char *)"ena", .function = (char *)"ena_request_io_irq", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_netdev.c", .format = (char *)"set affinity hint of irq. index %d to 0x%lx (irq vector: %d)\n", .lineno = (unsigned int)1468U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 1468 
      branch = arch_static_branch(& __UNIQUE_ID_ddebug565.key.dd_key_false.key,(_Bool)0);
      #line 1468 
      if ((long)((long)((int)branch != 0)) != 0L) 
                                                  #line 1468 
                                                  __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug565,adapter->netdev,(char *)"set affinity hint of irq. index %d to 0x%lx (irq vector: %d)\n",i,irq->affinity_hint_mask.bits[0],irq->vector);
    }
    #line 1472 
    irq_set_affinity_hint(irq->vector,& irq->affinity_hint_mask);
    #line 1457 
    i ++;
  }
  #line 1475 
  return rc;
  #line 1477 
  err: 
       #line 1477 
  ;
  #line 1478 
  k = 1;
  #line 1478 
  while (k < i) {
    #line 1479 
    irq = & adapter->irq_tbl[k];
    #line 1480 
    cif_free_irq(irq->vector,irq->data);
    #line 1478 
    k ++;
  }
  #line 1483 
  return rc;
}

#line 1486  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_netdev.c"
static void ena_free_mgmnt_irq(struct ena_adapter *adapter)
{
  #line 1488 
  struct ena_irq *irq;
  #line 1490 
  irq = & adapter->irq_tbl[0];
  #line 1491 
  synchronize_irq(irq->vector);
  #line 1492 
  irq_set_affinity_hint(irq->vector,(struct cpumask *)0);
  #line 1493 
  cif_free_irq(irq->vector,irq->data);
  #line 1494 
  return;
}

#line 1496  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_netdev.c"
static void ena_free_io_irq(struct ena_adapter *adapter)
{
  #line 1498 
  struct ena_irq *irq;
  #line 1499 
  int i;
  #line 1502 
  if (adapter->msix_vecs > 0) {
    #line 1503 
    free_irq_cpu_rmap((adapter->netdev)->rx_cpu_rmap);
    #line 1504 
    (adapter->netdev)->rx_cpu_rmap = (struct cpu_rmap *)0;
  }
  #line 1508 
  i = 1;
  #line 1508 
  while (adapter->msix_vecs > i) {
    #line 1509 
    irq = & adapter->irq_tbl[i];
    #line 1510 
    irq_set_affinity_hint(irq->vector,(struct cpumask *)0);
    #line 1511 
    cif_free_irq(irq->vector,irq->data);
    #line 1508 
    i ++;
  }
  #line 1513 
  return;
}

#line 1515  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_netdev.c"
static void ena_disable_msix(struct ena_adapter *adapter)
{
  #line 1517 
  if ((int)test_and_set_bit(3L,& adapter->flags) != 0) 
                                                       #line 1518 
                                                       pci_free_irq_vectors(adapter->pdev);
  #line 1519 
  return;
}

#line 1521  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_netdev.c"
static void ena_disable_io_intr_sync(struct ena_adapter *adapter)
{
  #line 1523 
  int i;
  #line 1525 
  if (! netif_running(adapter->netdev)) 
                                        #line 1526 
                                        return;
  #line 1528 
  i = 1;
  #line 1528 
  while (adapter->msix_vecs > i) {
    #line 1529 
    synchronize_irq(adapter->irq_tbl[i].vector);
    #line 1528 
    i ++;
  }
  #line 1530 
  return;
}

#line 1532  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_netdev.c"
static void ena_del_napi(struct ena_adapter *adapter)
{
  #line 1534 
  int i;
  #line 1536 
  i = 0;
  #line 1536 
  while (adapter->num_io_queues > (unsigned int)i) {
    #line 1537 
    netif_napi_del(& adapter->ena_napi[i].napi);
    #line 1536 
    i ++;
  }
  #line 1538 
  return;
}

#line 1540  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_netdev.c"
static void ena_init_napi(struct ena_adapter *adapter)
{
  #line 1542 
  struct ena_napi *napi;
  #line 1543 
  int i;
  #line 1545 
  i = 0;
  #line 1545 
  while (adapter->num_io_queues > (unsigned int)i) {
    #line 1546 
    napi = & adapter->ena_napi[i];
    #line 1548 
    netif_napi_add(adapter->netdev,& adapter->ena_napi[i].napi,& ena_io_poll,64);
    #line 1552 
    napi->rx_ring = & adapter->rx_ring[i];
    #line 1553 
    napi->tx_ring = & adapter->tx_ring[i];
    #line 1554 
    napi->qid = (unsigned int)i;
    #line 1545 
    i ++;
  }
  #line 1556 
  return;
}

#line 1558  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_netdev.c"
static void ena_napi_disable_all(struct ena_adapter *adapter)
{
  #line 1560 
  int i;
  #line 1562 
  i = 0;
  #line 1562 
  while (adapter->num_io_queues > (unsigned int)i) {
    #line 1563 
    napi_disable(& adapter->ena_napi[i].napi);
    #line 1562 
    i ++;
  }
  #line 1564 
  return;
}

#line 1566  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_netdev.c"
static void ena_napi_enable_all(struct ena_adapter *adapter)
{
  #line 1568 
  int i;
  #line 1570 
  i = 0;
  #line 1570 
  while (adapter->num_io_queues > (unsigned int)i) {
    #line 1571 
    napi_enable(& adapter->ena_napi[i].napi);
    #line 1570 
    i ++;
  }
  #line 1572 
  return;
}

#line 1575  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_netdev.c"
static int ena_rss_configure(struct ena_adapter *adapter)
{
  #line 1578 
  int rc;
  #line 1577 
  struct ena_com_dev *ena_dev = adapter->ena_dev;
  #line 1581 
  if ((unsigned int)ena_dev->rss.tbl_log_size == 0U) {
    #line 1582 
    rc = ena_rss_init_default(adapter);
    #line 1583 
    if (rc != 0 && rc != -95) {
      #line 1584 
      if ((adapter->msg_enable & 32U) != 0U) 
                                             #line 1584 
                                             netdev_err(adapter->netdev,(char *)"Failed to init RSS rc: %d\n",rc);
      #line 1586 
      return rc;
    }
  }
  #line 1591 
  rc = ena_com_indirect_table_set(ena_dev);
  #line 1592 
  if ((long)((rc != 0 && rc != -95) != 0) != 0L) 
                                                 #line 1593 
                                                 return rc;
  #line 1596 
  rc = ena_com_set_hash_function(ena_dev);
  #line 1597 
  if ((long)((rc != 0 && rc != -95) != 0) != 0L) 
                                                 #line 1598 
                                                 return rc;
  #line 1601 
  rc = ena_com_set_hash_ctrl(ena_dev);
  #line 1602 
  if ((long)((rc != 0 && rc != -95) != 0) != 0L) 
                                                 #line 1603 
                                                 return rc;
  #line 1605 
  return 0;
}

#line 1608  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_netdev.c"
static int ena_up_complete(struct ena_adapter *adapter)
{
  #line 1610 
  int rc;
  #line 1612 
  rc = ena_rss_configure(adapter);
  #line 1613 
  if (rc != 0) 
               #line 1614 
               return rc;
  #line 1616 
  ena_change_mtu(adapter->netdev,(int)(adapter->netdev)->mtu);
  #line 1618 
  ena_refill_all_rx_bufs(adapter);
  #line 1621 
  netif_tx_start_all_queues(adapter->netdev);
  #line 1623 
  ena_napi_enable_all(adapter);
  #line 1625 
  return 0;
}

#line 1628  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_netdev.c"
static int ena_create_io_tx_queue(struct ena_adapter *adapter, int qid)
{
  #line 1630 
  struct ena_com_create_io_ctx ctx;
  #line 1631 
  struct ena_com_dev *ena_dev;
  #line 1632 
  struct ena_ring *tx_ring;
  #line 1633 
  u32 msix_vector;
  #line 1634 
  u16 ena_qid;
  #line 1635 
  int rc;
  #line 1637 
  ena_dev = adapter->ena_dev;
  #line 1639 
  tx_ring = & adapter->tx_ring[qid];
  #line 1640 
  msix_vector = (unsigned int)(qid + 1);
  #line 1641 
  ena_qid = (unsigned short)((unsigned int)((unsigned short)qid) * 2U);
  #line 1643 
  memset((void *)(& ctx),0,20UL);
  #line 1645 
  ctx.direction = ENA_COM_IO_QUEUE_DIRECTION_TX;
  #line 1646 
  ctx.qid = ena_qid;
  #line 1647 
  ctx.mem_queue_type = ena_dev->tx_mem_queue_type;
  #line 1648 
  ctx.msix_vector = msix_vector;
  #line 1649 
  ctx.queue_size = (unsigned short)tx_ring->ring_size;
  #line 1650 
  ctx.numa_node = __cpu_to_node(tx_ring->cpu);
  #line 1652 
  rc = ena_com_create_io_queue(ena_dev,& ctx);
  #line 1653 
  if (rc != 0) {
    #line 1654 
    if ((adapter->msg_enable & 32U) != 0U) 
                                           #line 1654 
                                           netdev_err(adapter->netdev,(char *)"Failed to create I/O TX queue num %d rc: %d\n",qid,rc);
    #line 1657 
    return rc;
  }
  #line 1660 
  rc = ena_com_get_io_handlers(ena_dev,(unsigned short)((int)ena_qid),& tx_ring->ena_com_io_sq,& tx_ring->ena_com_io_cq);
  #line 1663 
  if (rc != 0) {
    #line 1664 
    if ((adapter->msg_enable & 32U) != 0U) 
                                           #line 1664 
                                           netdev_err(adapter->netdev,(char *)"Failed to get TX queue handlers. TX queue num %d rc: %d\n",qid,rc);
    #line 1667 
    ena_com_destroy_io_queue(ena_dev,(unsigned short)((int)ena_qid));
    #line 1668 
    return rc;
  }
  #line 1671 
  ena_com_update_numa_node(tx_ring->ena_com_io_cq,(unsigned char)((int)((unsigned char)ctx.numa_node)));
  #line 1672 
  return rc;
}

#line 1675  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_netdev.c"
static int ena_create_all_io_tx_queues(struct ena_adapter *adapter)
{
  #line 1678 
  int rc;
  #line 1678 
  int i;
  #line 1677 
  struct ena_com_dev *ena_dev = adapter->ena_dev;
  #line 1680 
  i = 0;
  #line 1680 
  while (adapter->num_io_queues > (unsigned int)i) {
    #line 1681 
    rc = ena_create_io_tx_queue(adapter,i);
    #line 1682 
    if (rc != 0) 
                 #line 1683 
                 goto create_err;
    #line 1680 
    i ++;
  }
  #line 1686 
  return 0;
  #line 1688 
  create_err: 
              #line 1688 
  ;
  #line 1689 
  while (1) {
    #line 1689 
    int tmp;
    #line 1689 
    tmp = i;
    #line 1689 
    i --;
    #line 1689 
    ;
    #line 1689 
    if (! (tmp != 0)) 
                      #line 1689 
                      break;
    #line 1690 
    ena_com_destroy_io_queue(ena_dev,(unsigned short)((int)((unsigned int)((unsigned short)i) * 2U)));
  }
  #line 1692 
  return rc;
}

#line 1695  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_netdev.c"
static int ena_create_io_rx_queue(struct ena_adapter *adapter, int qid)
{
  #line 1697 
  struct ena_com_dev *ena_dev;
  #line 1698 
  struct ena_com_create_io_ctx ctx;
  #line 1699 
  struct ena_ring *rx_ring;
  #line 1700 
  u32 msix_vector;
  #line 1701 
  u16 ena_qid;
  #line 1702 
  int rc;
  #line 1704 
  ena_dev = adapter->ena_dev;
  #line 1706 
  rx_ring = & adapter->rx_ring[qid];
  #line 1707 
  msix_vector = (unsigned int)(qid + 1);
  #line 1708 
  ena_qid = (unsigned short)((unsigned int)((unsigned short)qid) * 2U + 1U);
  #line 1710 
  memset((void *)(& ctx),0,20UL);
  #line 1712 
  ctx.qid = ena_qid;
  #line 1713 
  ctx.direction = ENA_COM_IO_QUEUE_DIRECTION_RX;
  #line 1714 
  ctx.mem_queue_type = ENA_ADMIN_PLACEMENT_POLICY_HOST;
  #line 1715 
  ctx.msix_vector = msix_vector;
  #line 1716 
  ctx.queue_size = (unsigned short)rx_ring->ring_size;
  #line 1717 
  ctx.numa_node = __cpu_to_node(rx_ring->cpu);
  #line 1719 
  rc = ena_com_create_io_queue(ena_dev,& ctx);
  #line 1720 
  if (rc != 0) {
    #line 1721 
    if ((adapter->msg_enable & 32U) != 0U) 
                                           #line 1721 
                                           netdev_err(adapter->netdev,(char *)"Failed to create I/O RX queue num %d rc: %d\n",qid,rc);
    #line 1724 
    return rc;
  }
  #line 1727 
  rc = ena_com_get_io_handlers(ena_dev,(unsigned short)((int)ena_qid),& rx_ring->ena_com_io_sq,& rx_ring->ena_com_io_cq);
  #line 1730 
  if (rc != 0) {
    #line 1731 
    if ((adapter->msg_enable & 32U) != 0U) 
                                           #line 1731 
                                           netdev_err(adapter->netdev,(char *)"Failed to get RX queue handlers. RX queue num %d rc: %d\n",qid,rc);
    #line 1734 
    ena_com_destroy_io_queue(ena_dev,(unsigned short)((int)ena_qid));
    #line 1735 
    return rc;
  }
  #line 1738 
  ena_com_update_numa_node(rx_ring->ena_com_io_cq,(unsigned char)((int)((unsigned char)ctx.numa_node)));
  #line 1740 
  return rc;
}

#line 1743  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_netdev.c"
static int ena_create_all_io_rx_queues(struct ena_adapter *adapter)
{
  #line 1746 
  int rc;
  #line 1746 
  int i;
  #line 1745 
  struct ena_com_dev *ena_dev = adapter->ena_dev;
  #line 1748 
  i = 0;
  #line 1748 
  while (adapter->num_io_queues > (unsigned int)i) {
    #line 1749 
    rc = ena_create_io_rx_queue(adapter,i);
    #line 1750 
    if (rc != 0) 
                 #line 1751 
                 goto create_err;
    {
      #line 1752 
      struct lock_class_key __key;
      #line 1752 
      __init_work(& adapter->ena_napi[i].dim.work,0);
      #line 1752 
      atomic_long_t __constr_expr_44 = {.counter = 137438953408LL};
      #line 1752 
      adapter->ena_napi[i].dim.work.data = __constr_expr_44;
      #line 1752 
      lockdep_init_map(& adapter->ena_napi[i].dim.work.lockdep_map,(char *)"(work_completion)",& __key,0);
      #line 1752 
      INIT_LIST_HEAD(& adapter->ena_napi[i].dim.work.entry);
      #line 1752 
      adapter->ena_napi[i].dim.work.func = & ena_dim_work;
    }
    #line 1748 
    i ++;
  }
  #line 1755 
  return 0;
  #line 1757 
  create_err: 
              #line 1757 
  ;
  #line 1758 
  while (1) {
    #line 1758 
    int tmp;
    #line 1758 
    tmp = i;
    #line 1758 
    i --;
    #line 1758 
    ;
    #line 1758 
    if (! (tmp != 0)) 
                      #line 1758 
                      break;
    #line 1759 
    cancel_work_sync(& adapter->ena_napi[i].dim.work);
    #line 1760 
    ena_com_destroy_io_queue(ena_dev,(unsigned short)((int)((unsigned int)((unsigned short)i) * 2U + 1U)));
  }
  #line 1763 
  return rc;
}

#line 1766  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_netdev.c"
static void set_io_rings_size(struct ena_adapter *adapter, int new_tx_size, int new_rx_size)
{
  #line 1769 
  int i;
  #line 1771 
  i = 0;
  #line 1771 
  while (adapter->num_io_queues > (unsigned int)i) {
    #line 1772 
    adapter->tx_ring[i].ring_size = new_tx_size;
    #line 1773 
    adapter->rx_ring[i].ring_size = new_rx_size;
    #line 1771 
    i ++;
  }
  #line 1775 
  return;
}

#line 1792  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_netdev.c"
static int create_queues_with_size_backoff(struct ena_adapter *adapter)
{
  #line 1794 
  int rc;
  #line 1794 
  int cur_rx_ring_size;
  #line 1794 
  int cur_tx_ring_size;
  #line 1795 
  int new_rx_ring_size;
  #line 1795 
  int new_tx_ring_size;
  #line 1800 
  set_io_rings_size(adapter,(int)adapter->requested_tx_ring_size,(int)adapter->requested_rx_ring_size);
  #line 1803 
  while (1) {
    #line 1804 
    rc = ena_setup_all_tx_resources(adapter);
    #line 1805 
    if (rc != 0) 
                 #line 1806 
                 goto err_setup_tx;
    #line 1808 
    rc = ena_create_all_io_tx_queues(adapter);
    #line 1809 
    if (rc != 0) 
                 #line 1810 
                 goto err_create_tx_queues;
    #line 1812 
    rc = ena_setup_all_rx_resources(adapter);
    #line 1813 
    if (rc != 0) 
                 #line 1814 
                 goto err_setup_rx;
    #line 1816 
    rc = ena_create_all_io_rx_queues(adapter);
    #line 1817 
    if (rc != 0) 
                 #line 1818 
                 goto err_create_rx_queues;
    #line 1820 
    return 0;
    #line 1822 
    err_create_rx_queues: 
                          #line 1822 
    ;
    #line 1823 
    ena_free_all_io_rx_resources(adapter);
    #line 1824 
    err_setup_rx: 
                  #line 1824 
    ;
    #line 1825 
    ena_destroy_all_tx_queues(adapter);
    #line 1826 
    err_create_tx_queues: 
                          #line 1826 
    ;
    #line 1827 
    ena_free_all_io_tx_resources(adapter);
    #line 1828 
    err_setup_tx: 
                  #line 1828 
    ;
    #line 1829 
    if (rc != -12) {
      #line 1830 
      if ((adapter->msg_enable & 32U) != 0U) 
                                             #line 1830 
                                             netdev_err(adapter->netdev,(char *)"Queue creation failed with error code %d\n",rc);
      #line 1833 
      return rc;
    }
    #line 1836 
    cur_tx_ring_size = adapter->tx_ring[0].ring_size;
    #line 1837 
    cur_rx_ring_size = adapter->rx_ring[0].ring_size;
    #line 1839 
    if ((adapter->msg_enable & 32U) != 0U) 
                                           #line 1839 
                                           netdev_err(adapter->netdev,(char *)"Not enough memory to create queues with sizes TX=%d, RX=%d\n",cur_tx_ring_size,cur_rx_ring_size);
    #line 1843 
    new_tx_ring_size = cur_tx_ring_size;
    #line 1844 
    new_rx_ring_size = cur_rx_ring_size;
    #line 1849 
    if (cur_rx_ring_size <= cur_tx_ring_size) 
                                              #line 1850 
                                              new_tx_ring_size = cur_tx_ring_size / 2;
    #line 1851 
    if (cur_rx_ring_size >= cur_tx_ring_size) 
                                              #line 1852 
                                              new_rx_ring_size = cur_rx_ring_size / 2;
    #line 1854 
    if (new_tx_ring_size <= 255 || new_rx_ring_size <= 255) {
      #line 1856 
      if ((adapter->msg_enable & 32U) != 0U) 
                                             #line 1856 
                                             netdev_err(adapter->netdev,(char *)"Queue creation failed with the smallest possible queue size of %d for both queues. Not retrying with smaller queues\n",256);
      #line 1859 
      return rc;
    }
    #line 1862 
    if ((adapter->msg_enable & 32U) != 0U) 
                                           #line 1862 
                                           netdev_err(adapter->netdev,(char *)"Retrying queue creation with sizes TX=%d, RX=%d\n",new_tx_ring_size,new_rx_ring_size);
    #line 1867 
    set_io_rings_size(adapter,new_tx_ring_size,new_rx_ring_size);
  }
}

#line 1872  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_netdev.c"
static int ena_up(struct ena_adapter *adapter)
{
  #line 1874 
  int rc;
  #line 1874 
  int i;
  {
    #line 1876 
    bool branch;
    #line 1876 
    struct _ddebug __UNIQUE_ID_ddebug566 = {.modname = (char *)"ena", .function = (char *)"ena_up", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_netdev.c", .format = (char *)"%s\n", .lineno = (unsigned int)1876U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 1876 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug566.key.dd_key_false.key,(_Bool)0);
    #line 1876 
    if ((long)((long)((int)branch != 0)) != 0L) 
                                                #line 1876 
                                                __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug566,adapter->netdev,(char *)"%s\n",(char *)"ena_up");
  }
  #line 1878 
  ena_setup_io_intr(adapter);
  #line 1885 
  ena_init_napi(adapter);
  #line 1887 
  rc = ena_request_io_irq(adapter);
  #line 1888 
  if (rc != 0) 
               #line 1889 
               goto err_req_irq;
  #line 1891 
  rc = create_queues_with_size_backoff(adapter);
  #line 1892 
  if (rc != 0) 
               #line 1893 
               goto err_create_queues_with_backoff;
  #line 1895 
  rc = ena_up_complete(adapter);
  #line 1896 
  if (rc != 0) 
               #line 1897 
               goto err_up;
  #line 1899 
  if ((int)test_bit(2L,& adapter->flags) != 0) 
                                               #line 1900 
                                               netif_carrier_on(adapter->netdev);
  #line 1902 
  u64_stats_init(& adapter->syncp);
  #line 1903 
  (adapter->dev_stats.interface_up) ++;
  #line 1904 
  u64_stats_init(& adapter->syncp);
  #line 1906 
  cif_set_bit(1L,& adapter->flags);
  #line 1909 
  i = 0;
  #line 1909 
  while (adapter->num_io_queues > (unsigned int)i) {
    #line 1910 
    ena_unmask_interrupt(& adapter->tx_ring[i],& adapter->rx_ring[i]);
    #line 1909 
    i ++;
  }
  #line 1916 
  i = 0;
  #line 1916 
  while (adapter->num_io_queues > (unsigned int)i) {
    #line 1917 
    napi_schedule(& adapter->ena_napi[i].napi);
    #line 1916 
    i ++;
  }
  #line 1919 
  return rc;
  #line 1921 
  err_up: 
          #line 1921 
  ;
  #line 1922 
  ena_destroy_all_tx_queues(adapter);
  #line 1923 
  ena_free_all_io_tx_resources(adapter);
  #line 1924 
  ena_destroy_all_rx_queues(adapter);
  #line 1925 
  ena_free_all_io_rx_resources(adapter);
  #line 1926 
  err_create_queues_with_backoff: 
                                  #line 1926 
  ;
  #line 1927 
  ena_free_io_irq(adapter);
  #line 1928 
  err_req_irq: 
               #line 1928 
  ;
  #line 1929 
  ena_del_napi(adapter);
  #line 1931 
  return rc;
}

#line 1934  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_netdev.c"
static void ena_down(struct ena_adapter *adapter)
{
  #line 1936 
  if ((adapter->msg_enable & 16U) != 0U) 
                                         #line 1936 
                                         netdev_info(adapter->netdev,(char *)"%s\n",(char *)"ena_down");
  #line 1938 
  cif_clear_bit(1L,& adapter->flags);
  #line 1940 
  u64_stats_init(& adapter->syncp);
  #line 1941 
  (adapter->dev_stats.interface_down) ++;
  #line 1942 
  u64_stats_init(& adapter->syncp);
  #line 1944 
  netif_carrier_off(adapter->netdev);
  #line 1945 
  netif_tx_disable(adapter->netdev);
  #line 1948 
  ena_napi_disable_all(adapter);
  #line 1952 
  if ((int)test_bit(4L,& adapter->flags) != 0) {
    #line 1953 
    int rc;
    #line 1955 
    rc = ena_com_dev_reset(adapter->ena_dev,adapter->reset_reason);
    #line 1956 
    if (rc != 0) 
                 #line 1957 
                 _dev_err(& (adapter->pdev)->dev,(char *)"Device reset failed\n");
    #line 1959 
    ena_com_set_admin_running_state(adapter->ena_dev,(_Bool)0);
  }
  #line 1962 
  ena_destroy_all_io_queues(adapter);
  #line 1964 
  ena_disable_io_intr_sync(adapter);
  #line 1965 
  ena_free_io_irq(adapter);
  #line 1966 
  ena_del_napi(adapter);
  #line 1968 
  ena_free_all_tx_bufs(adapter);
  #line 1969 
  ena_free_all_rx_bufs(adapter);
  #line 1970 
  ena_free_all_io_tx_resources(adapter);
  #line 1971 
  ena_free_all_io_rx_resources(adapter);
  #line 1972 
  return;
}

#line 1985  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_netdev.c"
static int ena_open(struct net_device *netdev)
{
  #line 1988 
  int rc;
  #line 1987 
  struct ena_adapter *adapter = netdev_priv(netdev);
  #line 1991 
  rc = netif_set_real_num_tx_queues(netdev,adapter->num_io_queues);
  #line 1992 
  if (rc != 0) {
    #line 1993 
    if ((adapter->msg_enable & 32U) != 0U) 
                                           #line 1993 
                                           netdev_err(netdev,(char *)"Can\'t set num tx queues\n");
    #line 1994 
    return rc;
  }
  #line 1997 
  rc = netif_set_real_num_rx_queues(netdev,adapter->num_io_queues);
  #line 1998 
  if (rc != 0) {
    #line 1999 
    if ((adapter->msg_enable & 32U) != 0U) 
                                           #line 1999 
                                           netdev_err(netdev,(char *)"Can\'t set num rx queues\n");
    #line 2000 
    return rc;
  }
  #line 2003 
  rc = ena_up(adapter);
  #line 2004 
  if (rc != 0) 
               #line 2005 
               return rc;
  #line 2007 
  return rc;
}

#line 2020  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_netdev.c"
static int ena_close(struct net_device *netdev)
{
  #line 2022 
  struct ena_adapter *adapter = netdev_priv(netdev);
  #line 2024 
  if ((adapter->msg_enable & 16U) != 0U) {
    #line 2024 
    bool branch;
    #line 2024 
    struct _ddebug __UNIQUE_ID_ddebug567 = {.modname = (char *)"ena", .function = (char *)"ena_close", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_netdev.c", .format = (char *)"%s\n", .lineno = (unsigned int)2024U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 2024 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug567.key.dd_key_false.key,(_Bool)0);
    #line 2024 
    if ((long)((long)((int)branch != 0)) != 0L) 
                                                #line 2024 
                                                __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug567,netdev,(char *)"%s\n",(char *)"ena_close");
  }
  #line 2026 
  if (! test_bit(0L,& adapter->flags)) 
                                       #line 2027 
                                       return 0;
  #line 2029 
  if ((int)test_bit(1L,& adapter->flags) != 0) 
                                               #line 2030 
                                               ena_down(adapter);
  #line 2033 
  check_for_admin_com_state(adapter);
  #line 2034 
  if ((long)((int)test_bit(4L,& adapter->flags) != 0) != 0L) {
    #line 2035 
    if ((adapter->msg_enable & 16U) != 0U) 
                                           #line 2035 
                                           netdev_err(adapter->netdev,(char *)"Destroy failure, restarting device\n");
    #line 2037 
    ena_dump_stats_to_dmesg(adapter);
    #line 2039 
    ena_destroy_device(adapter,(_Bool)0);
    #line 2040 
    ena_restore_device(adapter);
  }
  #line 2043 
  return 0;
}

#line 2046  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_netdev.c"
int ena_update_queue_sizes(struct ena_adapter *adapter, u32 new_tx_size, u32 new_rx_size)
{
  #line 2050 
  bool dev_was_up;
  #line 2057 
  int tmp_0;
  #line 2052 
  dev_was_up = test_bit(1L,& adapter->flags);
  #line 2053 
  ena_close(adapter->netdev);
  #line 2054 
  adapter->requested_tx_ring_size = new_tx_size;
  #line 2055 
  adapter->requested_rx_ring_size = new_rx_size;
  #line 2056 
  ena_init_io_rings(adapter);
  #line 2057 
  if ((int)dev_was_up != 0) 
                            #line 2057 
                            tmp_0 = ena_up(adapter); else 
                                                          #line 2057 
                                                          tmp_0 = 0;
  #line 2057 
  return tmp_0;
}

#line 2060  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_netdev.c"
int ena_update_queue_count(struct ena_adapter *adapter, u32 new_channel_count)
{
  #line 2063 
  bool dev_was_up;
  #line 2073 
  int tmp_0;
  #line 2062 
  struct ena_com_dev *ena_dev = adapter->ena_dev;
  #line 2065 
  dev_was_up = test_bit(1L,& adapter->flags);
  #line 2066 
  ena_close(adapter->netdev);
  #line 2067 
  adapter->num_io_queues = new_channel_count;
  #line 2071 
  ena_com_rss_destroy(ena_dev);
  #line 2072 
  ena_init_io_rings(adapter);
  #line 2073 
  if ((int)dev_was_up != 0) 
                            #line 2073 
                            tmp_0 = ena_open(adapter->netdev); else 
                                                                    #line 2073 
                                                                    tmp_0 = 0;
  #line 2073 
  return tmp_0;
}

#line 2076  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_netdev.c"
static void ena_tx_csum(struct ena_com_tx_ctx *ena_tx_ctx, struct sk_buff *skb)
{
  #line 2078 
  u32 mss = (unsigned int)((struct skb_shared_info *)skb_end_pointer(skb))->gso_size;
  #line 2079 
  struct ena_com_tx_meta *ena_meta = & ena_tx_ctx->ena_meta;
  #line 2080 
  u8 l4_protocol = (unsigned char)0U;
  #line 2082 
  if ((unsigned int)skb->ip_summed == 3U || mss != 0U) {
    #line 2083 
    ena_tx_ctx->l4_csum_enable = (unsigned char)1U;
    #line 2084 
    if (mss != 0U) {
      #line 2085 
      ena_tx_ctx->tso_enable = (unsigned char)1U;
      #line 2086 
      ena_meta->l4_hdr_len = (unsigned short)tcp_hdr(skb)->doff;
      #line 2087 
      ena_tx_ctx->l4_csum_partial = (unsigned char)0U;
    }
    else {
      #line 2089 
      ena_tx_ctx->tso_enable = (unsigned char)0U;
      #line 2090 
      ena_meta->l4_hdr_len = (unsigned short)0U;
      #line 2091 
      ena_tx_ctx->l4_csum_partial = (unsigned char)1U;
    }
    #line 2094 
    switch ((int)ip_hdr(skb)->version) {
      #line 2095 
      case 4: 
              #line 2095 
      ;
      #line 2096 
      ena_tx_ctx->l3_proto = ENA_ETH_IO_L3_PROTO_IPV4;
      #line 2097 
      ;
      #line 2097 
      if (((int)ip_hdr(skb)->frag_off & 64) != 0) 
                                                  #line 2098 
                                                  ena_tx_ctx->df = (unsigned char)1U;
      #line 2099 
      if (mss != 0U) 
                     #line 2100 
                     ena_tx_ctx->l3_csum_enable = (unsigned char)1U;
      #line 2101 
      l4_protocol = ip_hdr(skb)->protocol;
      #line 2102 
      break;
      #line 2103 
      case 6: 
              #line 2103 
      ;
      #line 2104 
      ena_tx_ctx->l3_proto = ENA_ETH_IO_L3_PROTO_IPV6;
      #line 2105 
      l4_protocol = ipv6_hdr(skb)->nexthdr;
      #line 2106 
      break;
      #line 2107 
      default: 
               #line 2107 
      ;
      #line 2108 
      break;
    }
    #line 2111 
    if ((unsigned int)l4_protocol == 6U) 
                                         #line 2112 
                                         ena_tx_ctx->l4_proto = ENA_ETH_IO_L4_PROTO_TCP; else 
                                                                    #line 2114 
                                                                    ena_tx_ctx->l4_proto = ENA_ETH_IO_L4_PROTO_UDP;
    #line 2116 
    ena_meta->mss = (unsigned short)mss;
    #line 2117 
    ena_meta->l3_hdr_len = (unsigned short)skb_network_header_len(skb);
    #line 2118 
    ena_meta->l3_hdr_offset = (unsigned short)skb_network_offset(skb);
    #line 2119 
    ena_tx_ctx->meta_valid = (unsigned char)1U;
  }
  else 
       #line 2122 
       ena_tx_ctx->meta_valid = (unsigned char)0U;
  #line 2123 
  return;
}

#line 2126  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_netdev.c"
static int ena_check_and_linearize_skb(struct ena_ring *tx_ring, struct sk_buff *skb)
{
  #line 2129 
  int num_frags;
  #line 2129 
  int header_len;
  #line 2129 
  int rc;
  #line 2131 
  num_frags = (int)((struct skb_shared_info *)skb_end_pointer(skb))->nr_frags;
  #line 2132 
  header_len = (int)skb_headlen(skb);
  #line 2134 
  if ((int)tx_ring->sgl_size > num_frags) 
                                          #line 2135 
                                          return 0;
  #line 2137 
  if ((int)tx_ring->sgl_size == num_frags && (int)tx_ring->tx_max_header_size > header_len) 
    #line 2139 
    return 0;
  #line 2141 
  u64_stats_init(& tx_ring->syncp);
  #line 2142 
  (tx_ring->__anonCompField_ena_ring_199.tx_stats.linearize) ++;
  #line 2143 
  u64_stats_init(& tx_ring->syncp);
  #line 2145 
  rc = skb_linearize(skb);
  #line 2146 
  if ((long)(rc != 0) != 0L) {
    #line 2147 
    u64_stats_init(& tx_ring->syncp);
    #line 2148 
    (tx_ring->__anonCompField_ena_ring_199.tx_stats.linearize_failed) ++;
    #line 2149 
    u64_stats_init(& tx_ring->syncp);
  }
  #line 2152 
  return rc;
}

#line 2155  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_netdev.c"
static int ena_tx_map_skb(struct ena_ring *tx_ring, struct ena_tx_buffer *tx_info, struct sk_buff *skb, void **push_hdr, u16 *header_len)
{
  #line 2162 
  struct ena_com_buf *ena_buf;
  #line 2163 
  dma_addr_t dma;
  #line 2164 
  u32 skb_head_len;
  #line 2164 
  u32 frag_len;
  #line 2164 
  u32 last_frag;
  #line 2161 
  struct ena_adapter *adapter = tx_ring->adapter;
  #line 2165 
  u16 push_len = (unsigned short)0U;
  #line 2166 
  u16 delta = (unsigned short)0U;
  #line 2167 
  int i = 0;
  #line 2169 
  skb_head_len = skb_headlen(skb);
  #line 2170 
  tx_info->skb = skb;
  #line 2171 
  ena_buf = (struct ena_com_buf *)(& tx_info->bufs);
  #line 2173 
  if (tx_ring->tx_mem_queue_type == (unsigned int)ENA_ADMIN_PLACEMENT_POLICY_DEV) {
    #line 2184 
    unsigned int __UNIQUE_ID___x568;
    #line 2184 
    unsigned int tmp;
    {
      #line 2184 
      __UNIQUE_ID___x568 = skb->len;
      #line 2184 
      unsigned int __UNIQUE_ID___y569 = (unsigned int)tx_ring->tx_max_header_size;
      #line 2184 
      if (__UNIQUE_ID___x568 < __UNIQUE_ID___y569) 
                                                   #line 2184 
                                                   tmp = __UNIQUE_ID___x568; else 
                                                                    #line 2184 
                                                                    tmp = __UNIQUE_ID___y569;
      }
    #line 2184 
    push_len = (unsigned short)tmp;
    #line 2185 
    *push_hdr = skb_header_pointer(skb,0,(int)push_len,(void *)tx_ring->push_buf_intermediate_buf);
    #line 2187 
    *header_len = push_len;
    #line 2188 
    if ((long)((void *)skb->data != *push_hdr) != 0L) {
      #line 2189 
      u64_stats_init(& tx_ring->syncp);
      #line 2190 
      (tx_ring->__anonCompField_ena_ring_199.tx_stats.llq_buffer_copy) ++;
      #line 2191 
      u64_stats_init(& tx_ring->syncp);
      #line 2193 
      delta = (unsigned short)((int)push_len - (int)((unsigned short)skb_head_len));
    }
  }
  else {
    #line 2197 
    unsigned int __UNIQUE_ID___x570;
    #line 2197 
    unsigned int tmp_1;
    #line 2196 
    *push_hdr = (void *)0;
    {
      #line 2197 
      __UNIQUE_ID___x570 = skb_head_len;
      #line 2197 
      unsigned int __UNIQUE_ID___y571 = (unsigned int)tx_ring->tx_max_header_size;
      #line 2197 
      if (__UNIQUE_ID___x570 < __UNIQUE_ID___y571) 
                                                   #line 2197 
                                                   tmp_1 = __UNIQUE_ID___x570; else 
                                                                    #line 2197 
                                                                    tmp_1 = __UNIQUE_ID___y571;
      }
    #line 2197 
    *header_len = (unsigned short)tmp_1;
  }
  #line 2201 
  if ((adapter->msg_enable & 256U) != 0U) {
    #line 2201 
    bool branch;
    #line 2201 
    struct _ddebug __UNIQUE_ID_ddebug572 = {.modname = (char *)"ena", .function = (char *)"ena_tx_map_skb", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_netdev.c", .format = (char *)"skb: %p header_buf->vaddr: %p push_len: %d\n", .lineno = (unsigned int)2201U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 2201 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug572.key.dd_key_false.key,(_Bool)0);
    #line 2201 
    if ((long)((long)((int)branch != 0)) != 0L) 
                                                #line 2201 
                                                __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug572,adapter->netdev,(char *)"skb: %p header_buf->vaddr: %p push_len: %d\n",skb,*push_hdr,(int)push_len);
  }
  #line 2205 
  if ((unsigned int)push_len < skb_head_len) {
    #line 2206 
    dma = dma_map_single_attrs(tx_ring->dev,(void *)(skb->data + (unsigned long)push_len),(unsigned long)(skb_head_len - (unsigned int)push_len),(enum dma_data_direction)DMA_TO_DEVICE,0UL);
    #line 2208 
    if ((long)(dma_mapping_error(tx_ring->dev,dma) != 0) != 0L) 
                                                                #line 2209 
                                                                goto error_report_dma_error;
    #line 2211 
    ena_buf->paddr = dma;
    #line 2212 
    ena_buf->len = (unsigned short)((int)((unsigned short)skb_head_len) - (int)push_len);
    #line 2214 
    ena_buf ++;
    #line 2215 
    (tx_info->num_of_bufs) ++;
    #line 2216 
    tx_info->map_linear_data = (unsigned char)1U;
  }
  else 
       #line 2218 
       tx_info->map_linear_data = (unsigned char)0U;
  #line 2221 
  last_frag = (unsigned int)((struct skb_shared_info *)skb_end_pointer(skb))->nr_frags;
  #line 2223 
  i = 0;
  #line 2223 
  while ((unsigned int)i < last_frag) {
    {
      #line 2224 
      skb_frag_t *frag = & ((struct skb_shared_info *)skb_end_pointer(skb))->frags[i];
      #line 2226 
      frag_len = skb_frag_size(frag);
      #line 2228 
      if ((long)((unsigned int)delta >= frag_len) != 0L) {
        #line 2229 
        delta = (unsigned short)((int)delta - (int)((unsigned short)frag_len));
        #line 2230 
        goto __Cont;
      }
      #line 2233 
      dma = skb_frag_dma_map(tx_ring->dev,frag,(unsigned long)delta,(unsigned long)(frag_len - (unsigned int)delta),(enum dma_data_direction)DMA_TO_DEVICE);
      #line 2235 
      if ((long)(dma_mapping_error(tx_ring->dev,dma) != 0) != 0L) 
                                                                  #line 2236 
                                                                  goto error_report_dma_error;
      #line 2238 
      ena_buf->paddr = dma;
      #line 2239 
      ena_buf->len = (unsigned short)((int)((unsigned short)frag_len) - (int)delta);
      #line 2240 
      ena_buf ++;
      #line 2241 
      (tx_info->num_of_bufs) ++;
      #line 2242 
      delta = (unsigned short)0U;
    }
    #line 2223 
    __Cont: 
            #line 2223 
    i ++;
  }
  #line 2245 
  return 0;
  #line 2247 
  error_report_dma_error: 
                          #line 2247 
  ;
  #line 2248 
  u64_stats_init(& tx_ring->syncp);
  #line 2249 
  (tx_ring->__anonCompField_ena_ring_199.tx_stats.dma_mapping_err) ++;
  #line 2250 
  u64_stats_init(& tx_ring->syncp);
  #line 2251 
  netdev_warn(adapter->netdev,(char *)"failed to map skb\n");
  #line 2253 
  tx_info->skb = (struct sk_buff *)0;
  #line 2255 
  tx_info->num_of_bufs += (unsigned int)i;
  #line 2256 
  ena_unmap_tx_skb(tx_ring,tx_info);
  #line 2258 
  return -22;
}

#line 2262  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_netdev.c"
static netdev_tx_t ena_start_xmit(struct sk_buff *skb, struct net_device *dev)
{
  #line 2265 
  struct ena_tx_buffer *tx_info;
  #line 2266 
  struct ena_com_tx_ctx ena_tx_ctx;
  #line 2267 
  struct ena_ring *tx_ring;
  #line 2268 
  struct netdev_queue *txq;
  #line 2269 
  void *push_hdr;
  #line 2270 
  u16 next_to_use;
  #line 2270 
  u16 req_id;
  #line 2270 
  u16 header_len;
  #line 2271 
  int qid;
  #line 2271 
  int rc;
  #line 2271 
  int nb_hw_desc;
  #line 2354 
  int tmp_7;
  #line 2264 
  struct ena_adapter *adapter = netdev_priv(dev);
  #line 2273 
  if ((adapter->msg_enable & 256U) != 0U) {
    #line 2273 
    bool branch;
    #line 2273 
    struct _ddebug __UNIQUE_ID_ddebug573 = {.modname = (char *)"ena", .function = (char *)"ena_start_xmit", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_netdev.c", .format = (char *)"%s skb %p\n", .lineno = (unsigned int)2273U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 2273 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug573.key.dd_key_false.key,(_Bool)0);
    #line 2273 
    if ((long)((long)((int)branch != 0)) != 0L) 
                                                #line 2273 
                                                __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug573,dev,(char *)"%s skb %p\n",(char *)"ena_start_xmit",skb);
  }
  #line 2275 
  qid = (int)skb_get_queue_mapping(skb);
  #line 2276 
  tx_ring = & adapter->tx_ring[qid];
  #line 2277 
  txq = netdev_get_tx_queue(dev,(unsigned int)qid);
  #line 2279 
  rc = ena_check_and_linearize_skb(tx_ring,skb);
  #line 2280 
  if ((long)(rc != 0) != 0L) 
                             #line 2281 
                             goto error_drop_packet;
  #line 2283 
  skb_tx_timestamp(skb);
  #line 2285 
  next_to_use = tx_ring->next_to_use;
  #line 2286 
  req_id = *(tx_ring->free_ids + (unsigned long)next_to_use);
  #line 2287 
  tx_info = tx_ring->__anonCompField_ena_ring_198.tx_buffer_info + (unsigned long)req_id;
  #line 2288 
  tx_info->num_of_bufs = 0U;
  {
    #line 2290 
    int __ret_warn_on = tx_info->skb != (struct sk_buff *)0;
    #line 2290 
    if ((long)(__ret_warn_on != 0) != 0L) {
      #line 2290 
      __warn_printk((char *)"SKB isn\'t NULL req_id %d\n",(int)req_id);
      #line 2291 
      ldv_inline_asm();
      #line 2292 
      ldv_inline_asm();
    }
    #line 2290 
    long tmp_2 = (long)(__ret_warn_on != 0);
  }
  #line 2292 
  rc = ena_tx_map_skb(tx_ring,tx_info,skb,& push_hdr,& header_len);
  #line 2293 
  if ((long)(rc != 0) != 0L) 
                             #line 2294 
                             goto error_drop_packet;
  #line 2296 
  memset((void *)(& ena_tx_ctx),0,48UL);
  #line 2297 
  ena_tx_ctx.ena_bufs = (struct ena_com_buf *)(& tx_info->bufs);
  #line 2298 
  ena_tx_ctx.push_header = push_hdr;
  #line 2299 
  ena_tx_ctx.num_bufs = (unsigned short)tx_info->num_of_bufs;
  #line 2300 
  ena_tx_ctx.req_id = req_id;
  #line 2301 
  ena_tx_ctx.header_len = header_len;
  #line 2304 
  ena_tx_csum(& ena_tx_ctx,skb);
  #line 2306 
  if ((long)((int)ena_com_is_doorbell_needed(tx_ring->ena_com_io_sq,& ena_tx_ctx) != 0) != 0L) {
    #line 2307 
    if ((adapter->msg_enable & 256U) != 0U) {
      #line 2307 
      bool branch_0;
      #line 2307 
      struct _ddebug __UNIQUE_ID_ddebug575 = {.modname = (char *)"ena", .function = (char *)"ena_start_xmit", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_netdev.c", .format = (char *)"llq tx max burst size of queue %d achieved, writing doorbell to send burst\n", .lineno = (unsigned int)2307U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 2307 
      branch_0 = arch_static_branch(& __UNIQUE_ID_ddebug575.key.dd_key_false.key,(_Bool)0);
      #line 2307 
      if ((long)((long)((int)branch_0 != 0)) != 0L) 
                                                    #line 2307 
                                                    __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug575,dev,(char *)"llq tx max burst size of queue %d achieved, writing doorbell to send burst\n",qid);
    }
    #line 2310 
    ena_com_write_sq_doorbell(tx_ring->ena_com_io_sq);
  }
  #line 2314 
  rc = ena_com_prepare_tx(tx_ring->ena_com_io_sq,& ena_tx_ctx,& nb_hw_desc);
  #line 2325 
  if ((long)(rc != 0) != 0L) {
    #line 2326 
    if ((adapter->msg_enable & 256U) != 0U) 
                                            #line 2326 
                                            netdev_err(dev,(char *)"failed to prepare tx bufs\n");
    #line 2328 
    u64_stats_init(& tx_ring->syncp);
    #line 2329 
    (tx_ring->__anonCompField_ena_ring_199.tx_stats.prepare_ctx_err) ++;
    #line 2330 
    u64_stats_init(& tx_ring->syncp);
    #line 2331 
    adapter->reset_reason = ENA_REGS_RESET_DRIVER_INVALID_STATE;
    #line 2332 
    cif_set_bit(4L,& adapter->flags);
    #line 2333 
    goto error_unmap_dma;
  }
  #line 2336 
  netdev_tx_sent_queue(txq,skb->len);
  #line 2338 
  u64_stats_init(& tx_ring->syncp);
  #line 2339 
  (tx_ring->__anonCompField_ena_ring_199.tx_stats.cnt) ++;
  #line 2340 
  tx_ring->__anonCompField_ena_ring_199.tx_stats.bytes += (unsigned long long)skb->len;
  #line 2341 
  u64_stats_init(& tx_ring->syncp);
  #line 2343 
  tx_info->tx_descs = (unsigned int)nb_hw_desc;
  #line 2344 
  tx_info->last_jiffies = jiffies;
  #line 2345 
  tx_info->print_once = 0U;
  #line 2347 
  tx_ring->next_to_use = (unsigned short)(((unsigned int)next_to_use + 1U) & ((unsigned int)tx_ring->ring_size + 65535U));
  #line 2354 
  if (ena_com_sq_have_enough_space(tx_ring->ena_com_io_sq,
                                     (unsigned short)((int)((unsigned int)tx_ring->sgl_size + 2U)))) 
    #line 2354 
    tmp_7 = 0; else 
                    #line 2354 
                    tmp_7 = 1;
  #line 2354 
  if ((long)tmp_7 != 0L) {
    #line 2356 
    if ((adapter->msg_enable & 256U) != 0U) {
      #line 2356 
      bool branch_1;
      #line 2356 
      struct _ddebug __UNIQUE_ID_ddebug576 = {.modname = (char *)"ena", .function = (char *)"ena_start_xmit", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_netdev.c", .format = (char *)"%s stop queue %d\n", .lineno = (unsigned int)2356U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 2356 
      branch_1 = arch_static_branch(& __UNIQUE_ID_ddebug576.key.dd_key_false.key,(_Bool)0);
      #line 2356 
      if ((long)((long)((int)branch_1 != 0)) != 0L) 
                                                    #line 2356 
                                                    __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug576,dev,(char *)"%s stop queue %d\n",(char *)"ena_start_xmit",qid);
    }
    #line 2359 
    netif_tx_stop_queue(txq);
    #line 2360 
    u64_stats_init(& tx_ring->syncp);
    #line 2361 
    (tx_ring->__anonCompField_ena_ring_199.tx_stats.queue_stop) ++;
    #line 2362 
    u64_stats_init(& tx_ring->syncp);
    #line 2363 
    ldv_inline_asm();
    #line 2374 
    if ((int)ena_com_sq_have_enough_space(tx_ring->ena_com_io_sq,
                                     (unsigned short)19) != 0) {
      #line 2376 
      netif_tx_wake_queue(txq);
      #line 2377 
      u64_stats_init(& tx_ring->syncp);
      #line 2378 
      (tx_ring->__anonCompField_ena_ring_199.tx_stats.queue_wakeup) ++;
      #line 2379 
      u64_stats_init(& tx_ring->syncp);
    }
  }
  #line 2383 
  if ((int)netif_xmit_stopped(txq) != 0) 
                                         #line 2383 
                                         goto _LOR;
  else {
    #line 2383 
    if (! netdev_xmit_more()) {
      #line 2383 
      _LOR: {
              #line 2387 
              ena_com_write_sq_doorbell(tx_ring->ena_com_io_sq);
              #line 2388 
              u64_stats_init(& tx_ring->syncp);
              #line 2389 
              (tx_ring->__anonCompField_ena_ring_199.tx_stats.doorbells) ++;
              #line 2390 
              u64_stats_init(& tx_ring->syncp);
            }
    }
  }
  #line 2393 
  return NETDEV_TX_OK;
  #line 2395 
  error_unmap_dma: 
                   #line 2395 
  ;
  #line 2396 
  ena_unmap_tx_skb(tx_ring,tx_info);
  #line 2397 
  tx_info->skb = (struct sk_buff *)0;
  #line 2399 
  error_drop_packet: 
                     #line 2399 
  ;
  #line 2400 
  consume_skb(skb);
  #line 2401 
  return NETDEV_TX_OK;
}

#line 2404  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_netdev.c"
static u16 ena_select_queue(struct net_device *dev, struct sk_buff *skb, struct net_device *sb_dev)
{
  #line 2407 
  u16 qid;
  #line 2412 
  if ((int)skb_rx_queue_recorded(skb) != 0) 
                                            #line 2413 
                                            qid = skb_get_rx_queue(skb); else 
                                                                    #line 2415 
                                                                    qid = netdev_pick_tx(dev,skb,(struct net_device *)0);
  #line 2417 
  return qid;
}

#line 2420  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_netdev.c"
static void ena_config_host_info(struct ena_com_dev *ena_dev, struct pci_dev *pdev)
{
  #line 2423 
  struct ena_admin_host_info *host_info;
  #line 2424 
  int rc;
  #line 2427 
  rc = ena_com_allocate_host_info(ena_dev);
  #line 2428 
  if (rc != 0) {
    #line 2429 
    printk((char *)"\001");
    #line 2430 
    return;
  }
  #line 2433 
  host_info = ena_dev->host_attr.host_info;
  #line 2435 
  host_info->bdf = (unsigned short)(((int)((unsigned short)(pdev->bus)->number) << 8U) | (int)((unsigned short)pdev->devfn));
  #line 2436 
  host_info->os_type = 1U;
  #line 2437 
  host_info->kernel_ver = 328960U;
  #line 2438 
  ;
  #line 2438 
  strlcpy((char *)(& host_info->kernel_ver_str),(char *)(& utsname()->version),31UL);
  #line 2440 
  host_info->os_dist = 0U;
  #line 2441 
  ;
  #line 2441 
  strncpy((char *)(& host_info->os_dist_str),(char *)(& utsname()->release),127UL);
  #line 2443 
  host_info->driver_version = (unsigned int)(((int)*("K" + 0) << 24) | 258);
  #line 2448 
  host_info->num_cpus = (unsigned short)num_online_cpus();
  #line 2450 
  host_info->driver_supported_features = 4U;
  #line 2453 
  rc = ena_com_set_host_attributes(ena_dev);
  #line 2454 
  if (rc != 0) {
    #line 2455 
    if (rc == -95) 
                   #line 2456 
                   printk((char *)"\001"); else 
                                                #line 2458 
                                                printk((char *)"\001");
    #line 2460 
    goto err;
  }
  #line 2463 
  return;
  #line 2465 
  err: 
       #line 2465 
  ;
  #line 2466 
  ena_com_delete_host_info(ena_dev);
  #line 2467 
  return;
}

#line 2469  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_netdev.c"
static void ena_config_debug_area(struct ena_adapter *adapter)
{
  #line 2471 
  u32 debug_area_size;
  #line 2472 
  int rc;
  #line 2472 
  int ss_count;
  #line 2474 
  ss_count = ena_get_sset_count(adapter->netdev,1);
  #line 2475 
  if (ss_count <= 0) {
    #line 2476 
    if ((adapter->msg_enable & 1U) != 0U) 
                                          #line 2476 
                                          netdev_err(adapter->netdev,(char *)"SS count is negative\n");
    #line 2478 
    return;
  }
  #line 2482 
  debug_area_size = (unsigned int)(ss_count * 32) + (unsigned int)((unsigned long)ss_count) * 8U;
  #line 2484 
  rc = ena_com_allocate_debug_area(adapter->ena_dev,debug_area_size);
  #line 2485 
  if (rc != 0) {
    #line 2486 
    printk((char *)"\001");
    #line 2487 
    return;
  }
  #line 2490 
  rc = ena_com_set_host_attributes(adapter->ena_dev);
  #line 2491 
  if (rc != 0) {
    #line 2492 
    if (rc == -95) {
      #line 2493 
      if ((adapter->msg_enable & 1U) != 0U) 
                                            #line 2493 
                                            netdev_warn(adapter->netdev,(char *)"Cannot set host attributes\n");
    }
    else 
      #line 2496 
      if ((adapter->msg_enable & 1U) != 0U) 
                                            #line 2496 
                                            netdev_err(adapter->netdev,(char *)"Cannot set host attributes\n");
    #line 2498 
    goto err;
  }
  #line 2501 
  return;
  #line 2502 
  err: 
       #line 2502 
  ;
  #line 2503 
  ena_com_delete_debug_area(adapter->ena_dev);
  #line 2504 
  return;
}

#line 2506  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_netdev.c"
static void ena_get_stats64(struct net_device *netdev, struct rtnl_link_stats64 *stats)
{
  #line 2510 
  struct ena_ring *rx_ring;
  #line 2510 
  struct ena_ring *tx_ring;
  #line 2511 
  unsigned int start;
  #line 2512 
  u64 rx_drops;
  #line 2513 
  int i;
  #line 2509 
  struct ena_adapter *adapter = netdev_priv(netdev);
  #line 2515 
  if (! test_bit(1L,& adapter->flags)) 
                                       #line 2516 
                                       return;
  #line 2518 
  i = 0;
  #line 2518 
  while (adapter->num_io_queues > (unsigned int)i) {
    {
      #line 2519 
      u64 bytes;
      #line 2519 
      u64 packets;
      #line 2521 
      tx_ring = & adapter->tx_ring[i];
      #line 2523 
      while (1) {
        #line 2524 
        start = u64_stats_fetch_begin_irq(& tx_ring->syncp);
        #line 2525 
        packets = tx_ring->__anonCompField_ena_ring_199.tx_stats.cnt;
        #line 2526 
        bytes = tx_ring->__anonCompField_ena_ring_199.tx_stats.bytes;
        #line 2527 
        if (! ((int)u64_stats_fetch_retry_irq(& tx_ring->syncp,start) != 0)) 
          #line 2523 
          break;
      }
      #line 2529 
      stats->tx_packets += packets;
      #line 2530 
      stats->tx_bytes += bytes;
      #line 2532 
      rx_ring = & adapter->rx_ring[i];
      #line 2534 
      while (1) {
        #line 2535 
        start = u64_stats_fetch_begin_irq(& rx_ring->syncp);
        #line 2536 
        packets = rx_ring->__anonCompField_ena_ring_199.rx_stats.cnt;
        #line 2537 
        bytes = rx_ring->__anonCompField_ena_ring_199.rx_stats.bytes;
        #line 2538 
        if (! ((int)u64_stats_fetch_retry_irq(& rx_ring->syncp,start) != 0)) 
          #line 2534 
          break;
      }
      #line 2540 
      stats->rx_packets += packets;
      #line 2541 
      stats->rx_bytes += bytes;
    }
    #line 2518 
    i ++;
  }
  #line 2544 
  while (1) {
    #line 2545 
    start = u64_stats_fetch_begin_irq(& adapter->syncp);
    #line 2546 
    rx_drops = adapter->dev_stats.rx_drops;
    #line 2547 
    if (! ((int)u64_stats_fetch_retry_irq(& adapter->syncp,start) != 0)) 
      #line 2544 
      break;
  }
  #line 2549 
  stats->rx_dropped = rx_drops;
  #line 2551 
  stats->multicast = 0ULL;
  #line 2552 
  stats->collisions = 0ULL;
  #line 2554 
  stats->rx_length_errors = 0ULL;
  #line 2555 
  stats->rx_crc_errors = 0ULL;
  #line 2556 
  stats->rx_frame_errors = 0ULL;
  #line 2557 
  stats->rx_fifo_errors = 0ULL;
  #line 2558 
  stats->rx_missed_errors = 0ULL;
  #line 2559 
  stats->tx_window_errors = 0ULL;
  #line 2561 
  stats->rx_errors = 0ULL;
  #line 2562 
  stats->tx_errors = 0ULL;
  #line 2563 
  return;
}

#line 2565  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_netdev.c"
static struct net_device_ops ena_netdev_ops = {.ndo_open = & ena_open, .ndo_stop = & ena_close, .ndo_start_xmit = & ena_start_xmit, .ndo_select_queue = & ena_select_queue, .ndo_validate_addr = & eth_validate_addr, .ndo_change_mtu = & ena_change_mtu, .ndo_tx_timeout = & ena_tx_timeout, .ndo_get_stats64 = & ena_get_stats64};
#line 2577  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_netdev.c"
static int ena_device_validate_params(struct ena_adapter *adapter, struct ena_com_dev_get_features_ctx *get_feat_ctx)
{
  #line 2581 
  int rc;
  #line 2580 
  struct net_device *netdev = adapter->netdev;
  #line 2583 
  rc = (int)ether_addr_equal((u8 *)(& get_feat_ctx->dev_attr.mac_addr),
                       (u8 *)(& adapter->mac_addr));
  #line 2585 
  if (rc == 0) {
    #line 2586 
    if ((adapter->msg_enable & 1U) != 0U) 
                                          #line 2586 
                                          netdev_err(netdev,(char *)"Error, mac address are different\n");
    #line 2588 
    return -22;
  }
  #line 2591 
  if (get_feat_ctx->dev_attr.max_mtu < netdev->mtu) {
    #line 2592 
    if ((adapter->msg_enable & 1U) != 0U) 
                                          #line 2592 
                                          netdev_err(netdev,(char *)"Error, device max mtu is smaller than netdev MTU\n");
    #line 2594 
    return -22;
  }
  #line 2597 
  return 0;
}

#line 2600  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_netdev.c"
static int ena_device_init(struct ena_com_dev *ena_dev, struct pci_dev *pdev, struct ena_com_dev_get_features_ctx *get_feat_ctx, bool *wd_state)
{
  #line 2605 
  bool readless_supported;
  #line 2606 
  u32 aenq_groups;
  #line 2607 
  int dma_width;
  #line 2608 
  int rc;
  #line 2641 
  unsigned long long tmp;
  #line 2647 
  unsigned long long tmp_0;
  #line 2604 
  struct device *dev = & pdev->dev;
  #line 2610 
  rc = ena_com_mmio_reg_read_request_init(ena_dev);
  #line 2611 
  if (rc != 0) {
    #line 2612 
    _dev_err(dev,(char *)"failed to init mmio read less\n");
    #line 2613 
    return rc;
  }
  #line 2619 
  readless_supported = (_Bool)(((unsigned long)pdev->revision & 1UL) == 0UL);
  #line 2620 
  ena_com_set_mmio_read_mode(ena_dev,(_Bool)((bool)((int)readless_supported) != 0));
  #line 2622 
  rc = ena_com_dev_reset(ena_dev,(enum ena_regs_reset_reason_types)ENA_REGS_RESET_NORMAL);
  #line 2623 
  if (rc != 0) {
    #line 2624 
    _dev_err(dev,(char *)"Can not reset device\n");
    #line 2625 
    goto err_mmio_read_less;
  }
  #line 2628 
  rc = ena_com_validate_version(ena_dev);
  #line 2629 
  if (rc != 0) {
    #line 2630 
    _dev_err(dev,(char *)"device version is too low\n");
    #line 2631 
    goto err_mmio_read_less;
  }
  #line 2634 
  dma_width = ena_com_get_dma_width(ena_dev);
  #line 2635 
  if (dma_width < 0) {
    #line 2636 
    _dev_err(dev,(char *)"Invalid dma width value %d",dma_width);
    #line 2637 
    rc = dma_width;
    #line 2638 
    goto err_mmio_read_less;
  }
  #line 2641 
  if (dma_width != 64) 
                       #line 2641 
                       tmp = (1ULL << dma_width) + 18446744073709551615ULL; else 
                                                                    #line 2641 
                                                                    tmp = 18446744073709551615ULL;
  #line 2641 
  ;
  #line 2641 
  rc = pci_set_dma_mask(pdev,tmp);
  #line 2642 
  if (rc != 0) {
    #line 2643 
    _dev_err(dev,(char *)"pci_set_dma_mask failed 0x%x\n",rc);
    #line 2644 
    goto err_mmio_read_less;
  }
  #line 2647 
  if (dma_width != 64) 
                       #line 2647 
                       tmp_0 = (1ULL << dma_width) + 18446744073709551615ULL; else 
                                                                    #line 2647 
                                                                    tmp_0 = 18446744073709551615ULL;
  #line 2647 
  ;
  #line 2647 
  rc = pci_set_consistent_dma_mask(pdev,tmp_0);
  #line 2648 
  if (rc != 0) {
    #line 2649 
    _dev_err(dev,(char *)"err_pci_set_consistent_dma_mask failed 0x%x\n",rc);
    #line 2651 
    goto err_mmio_read_less;
  }
  #line 2655 
  rc = ena_com_admin_init(ena_dev,& aenq_handlers);
  #line 2656 
  if (rc != 0) {
    #line 2657 
    _dev_err(dev,(char *)"Can not initialize ena admin queue with device\n");
    #line 2659 
    goto err_mmio_read_less;
  }
  #line 2666 
  ena_com_set_admin_polling_mode(ena_dev,(_Bool)1);
  #line 2668 
  ena_config_host_info(ena_dev,pdev);
  #line 2671 
  rc = ena_com_get_dev_attr_feat(ena_dev,get_feat_ctx);
  #line 2672 
  if (rc != 0) {
    #line 2673 
    _dev_err(dev,(char *)"Cannot get attribute for ena device rc=%d\n",rc);
    #line 2674 
    goto err_admin_init;
  }
  #line 2678 
  aenq_groups = 31U;
  #line 2684 
  aenq_groups = get_feat_ctx->aenq.supported_groups & aenq_groups;
  #line 2686 
  rc = ena_com_set_aenq_config(ena_dev,aenq_groups);
  #line 2687 
  if (rc != 0) {
    #line 2688 
    _dev_err(dev,(char *)"Cannot configure aenq groups rc= %d\n",rc);
    #line 2689 
    goto err_admin_init;
  }
  #line 2692 
  *wd_state = (_Bool)(((unsigned long)aenq_groups & 16UL) != 0UL);
  #line 2694 
  return 0;
  #line 2696 
  err_admin_init: 
                  #line 2696 
  ;
  #line 2697 
  ena_com_delete_host_info(ena_dev);
  #line 2698 
  ena_com_admin_destroy(ena_dev);
  #line 2699 
  err_mmio_read_less: 
                      #line 2699 
  ;
  #line 2700 
  ena_com_mmio_reg_read_request_destroy(ena_dev);
  #line 2702 
  return rc;
}

#line 2705  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_netdev.c"
static int ena_enable_msix_and_set_admin_interrupts(struct ena_adapter *adapter)
{
  #line 2709 
  int rc;
  #line 2707 
  struct ena_com_dev *ena_dev = adapter->ena_dev;
  #line 2708 
  struct device *dev = & (adapter->pdev)->dev;
  #line 2711 
  rc = ena_enable_msix(adapter);
  #line 2712 
  if (rc != 0) {
    #line 2713 
    _dev_err(dev,(char *)"Can not reserve msix vectors\n");
    #line 2714 
    return rc;
  }
  #line 2717 
  ena_setup_mgmnt_intr(adapter);
  #line 2719 
  rc = ena_request_mgmnt_irq(adapter);
  #line 2720 
  if (rc != 0) {
    #line 2721 
    _dev_err(dev,(char *)"Can not setup management interrupts\n");
    #line 2722 
    goto err_disable_msix;
  }
  #line 2725 
  ena_com_set_admin_polling_mode(ena_dev,(_Bool)0);
  #line 2727 
  ena_com_admin_aenq_enable(ena_dev);
  #line 2729 
  return 0;
  #line 2731 
  err_disable_msix: 
                    #line 2731 
  ;
  #line 2732 
  ena_disable_msix(adapter);
  #line 2734 
  return rc;
}

#line 2737  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_netdev.c"
static void ena_destroy_device(struct ena_adapter *adapter, bool graceful)
{
  #line 2741 
  bool dev_up;
  #line 2739 
  struct net_device *netdev = adapter->netdev;
  #line 2740 
  struct ena_com_dev *ena_dev = adapter->ena_dev;
  #line 2743 
  if (! test_bit(0L,& adapter->flags)) 
                                       #line 2744 
                                       return;
  #line 2746 
  netif_carrier_off(netdev);
  #line 2748 
  cif_del_timer_sync(& adapter->timer_service);
  #line 2750 
  dev_up = test_bit(1L,& adapter->flags);
  #line 2751 
  adapter->dev_up_before_reset = dev_up;
  #line 2752 
  if (! graceful) 
                  #line 2753 
                  ena_com_set_admin_running_state(ena_dev,(_Bool)0);
  #line 2755 
  if ((int)test_bit(1L,& adapter->flags) != 0) 
                                               #line 2756 
                                               ena_down(adapter);
  #line 2761 
  if (test_bit(4L,& adapter->flags)) {
    #line 2761 
    if (! dev_up) 
                  #line 2762 
                  ena_com_dev_reset(adapter->ena_dev,adapter->reset_reason);
  }
  else 
       #line 2762 
       ena_com_dev_reset(adapter->ena_dev,adapter->reset_reason);
  #line 2764 
  ena_free_mgmnt_irq(adapter);
  #line 2766 
  ena_disable_msix(adapter);
  #line 2768 
  ena_com_abort_admin_commands(ena_dev);
  #line 2770 
  ena_com_wait_for_abort_completion(ena_dev);
  #line 2772 
  ena_com_admin_destroy(ena_dev);
  #line 2774 
  ena_com_mmio_reg_read_request_destroy(ena_dev);
  #line 2776 
  adapter->reset_reason = ENA_REGS_RESET_NORMAL;
  #line 2778 
  cif_clear_bit(4L,& adapter->flags);
  #line 2779 
  cif_clear_bit(0L,& adapter->flags);
  #line 2780 
  return;
}

#line 2782  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_netdev.c"
static int ena_restore_device(struct ena_adapter *adapter)
{
  #line 2784 
  struct ena_com_dev_get_features_ctx get_feat_ctx;
  #line 2787 
  bool wd_state;
  #line 2788 
  int rc;
  #line 2785 
  struct ena_com_dev *ena_dev = adapter->ena_dev;
  #line 2786 
  struct pci_dev *pdev = adapter->pdev;
  #line 2790 
  cif_set_bit(5L,& adapter->flags);
  #line 2791 
  rc = ena_device_init(ena_dev,adapter->pdev,& get_feat_ctx,& wd_state);
  #line 2792 
  if (rc != 0) {
    #line 2793 
    _dev_err(& pdev->dev,(char *)"Can not initialize device\n");
    #line 2794 
    goto err;
  }
  #line 2796 
  adapter->wd_state = wd_state;
  #line 2798 
  rc = ena_device_validate_params(adapter,& get_feat_ctx);
  #line 2799 
  if (rc != 0) {
    #line 2800 
    _dev_err(& pdev->dev,(char *)"Validation of device parameters failed\n");
    #line 2801 
    goto err_device_destroy;
  }
  #line 2804 
  rc = ena_enable_msix_and_set_admin_interrupts(adapter);
  #line 2805 
  if (rc != 0) {
    #line 2806 
    _dev_err(& pdev->dev,(char *)"Enable MSI-X failed\n");
    #line 2807 
    goto err_device_destroy;
  }
  #line 2810 
  if ((int)adapter->dev_up_before_reset != 0) {
    #line 2811 
    rc = ena_up(adapter);
    #line 2812 
    if (rc != 0) {
      #line 2813 
      _dev_err(& pdev->dev,(char *)"Failed to create I/O queues\n");
      #line 2814 
      goto err_disable_msix;
    }
  }
  #line 2818 
  cif_set_bit(0L,& adapter->flags);
  #line 2820 
  cif_clear_bit(5L,& adapter->flags);
  #line 2821 
  if ((int)test_bit(2L,& adapter->flags) != 0) 
                                               #line 2822 
                                               netif_carrier_on(adapter->netdev);
  #line 2824 
  ;
  #line 2824 
  cif_mod_timer(& adapter->timer_service,round_jiffies(jiffies + 250UL));
  #line 2825 
  _dev_err(& pdev->dev,(char *)"Device reset completed successfully, Driver info: %s\n",(char *)(& version));
  #line 2829 
  return rc;
  #line 2830 
  err_disable_msix: 
                    #line 2830 
  ;
  #line 2831 
  ena_free_mgmnt_irq(adapter);
  #line 2832 
  ena_disable_msix(adapter);
  #line 2833 
  err_device_destroy: 
                      #line 2833 
  ;
  #line 2834 
  ena_com_abort_admin_commands(ena_dev);
  #line 2835 
  ena_com_wait_for_abort_completion(ena_dev);
  #line 2836 
  ena_com_admin_destroy(ena_dev);
  #line 2837 
  ena_com_dev_reset(ena_dev,(enum ena_regs_reset_reason_types)ENA_REGS_RESET_DRIVER_INVALID_STATE);
  #line 2838 
  ena_com_mmio_reg_read_request_destroy(ena_dev);
  #line 2839 
  err: 
       #line 2839 
  ;
  #line 2840 
  cif_clear_bit(0L,& adapter->flags);
  #line 2841 
  cif_clear_bit(5L,& adapter->flags);
  #line 2842 
  _dev_err(& pdev->dev,(char *)"Reset attempt failed. Can not reset the device\n");
  #line 2845 
  return rc;
}

#line 2848  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_netdev.c"
static void ena_fw_reset_device(struct work_struct *work)
{
  #line 2851 
  void *__mptr;
  #line 2854 
  int tmp_1;
  #line 2851 
  __mptr = (void *)work;
  #line 2850 
  struct ena_adapter *adapter = ((struct ena_adapter *)(__mptr + 18446744073709230912U));
  #line 2852 
  struct pci_dev *pdev = adapter->pdev;
  #line 2854 
  if (test_bit(4L,& adapter->flags)) 
                                     #line 2854 
                                     tmp_1 = 0; else 
                                                     #line 2854 
                                                     tmp_1 = 1;
  #line 2854 
  if ((long)tmp_1 != 0L) {
    #line 2855 
    _dev_err(& pdev->dev,(char *)"device reset schedule while reset bit is off\n");
    #line 2857 
    return;
  }
  #line 2859 
  rtnl_lock();
  #line 2860 
  ena_destroy_device(adapter,(_Bool)0);
  #line 2861 
  ena_restore_device(adapter);
  #line 2862 
  rtnl_unlock();
  #line 2863 
  return;
}

#line 2865  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_netdev.c"
static int check_for_rx_interrupt_queue(struct ena_adapter *adapter, struct ena_ring *rx_ring)
{
  #line 2868 
  if ((long)((int)rx_ring->first_interrupt != 0) != 0L) 
                                                        #line 2869 
                                                        return 0;
  #line 2871 
  if ((int)ena_com_cq_empty(rx_ring->ena_com_io_cq) != 0) 
                                                          #line 2872 
                                                          return 0;
  #line 2874 
  rx_ring->no_interrupt_event_cnt = (u16)((int)rx_ring->no_interrupt_event_cnt + 1);
  #line 2876 
  if ((unsigned int)rx_ring->no_interrupt_event_cnt == 3U) {
    #line 2877 
    if ((adapter->msg_enable & 64U) != 0U) 
                                           #line 2877 
                                           netdev_err(adapter->netdev,(char *)"Potential MSIX issue on Rx side Queue = %d. Reset the device\n",(int)rx_ring->qid);
    #line 2880 
    adapter->reset_reason = ENA_REGS_RESET_MISS_INTERRUPT;
    #line 2882 
    cif_set_bit(4L,& adapter->flags);
    #line 2883 
    return -5;
  }
  #line 2886 
  return 0;
}

#line 2889  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_netdev.c"
static int check_missing_comp_in_tx_queue(struct ena_adapter *adapter, struct ena_ring *tx_ring)
{
  #line 2892 
  struct ena_tx_buffer *tx_buf;
  #line 2893 
  unsigned long last_jiffies;
  #line 2895 
  int i;
  #line 2894 
  u32 missed_tx = 0U;
  #line 2895 
  int rc = 0;
  #line 2897 
  i = 0;
  #line 2897 
  while (tx_ring->ring_size > i) {
    {
      #line 2919 
      int tmp_5;
      #line 2898 
      tx_buf = tx_ring->__anonCompField_ena_ring_198.tx_buffer_info + (unsigned long)i;
      #line 2899 
      last_jiffies = tx_buf->last_jiffies;
      #line 2901 
      if (last_jiffies == 0UL) 
                               #line 2903 
                               goto __Cont;
      #line 2905 
      if ((long)(! tx_ring->first_interrupt) != 0L) {
        #line 2905 
        int tmp_2;
        #line 2905 
        int tmp_1;
        {
          #line 2905 
          unsigned long __dummy;
          #line 2905 
          unsigned long __dummy2;
          }
        #line 2905 
        if ((long)(1 != 0) != 0L) {
          {
            #line 2905 
            unsigned long __dummy_0;
            #line 2905 
            unsigned long __dummy2_0;
            }
          #line 2905 
          if ((long)(1 != 0) != 0L) 
                                    #line 2905 
                                    tmp_1 = 1; else 
                                                    #line 2905 
                                                    tmp_1 = 0;
        }
        else 
             #line 2905 
             tmp_1 = 0;
        #line 2905 
        if (tmp_1 != 0) 
          #line 2905 
          if ((long)((long)((adapter->missing_tx_completion_to * 2UL + last_jiffies) - jiffies) < 0L) != 0L) 
            #line 2905 
            tmp_2 = 1; else 
                            #line 2905 
                            tmp_2 = 0;
        else 
             #line 2905 
             tmp_2 = 0;
        #line 2905 
        if (tmp_2 != 0) {
          #line 2910 
          if ((adapter->msg_enable & 128U) != 0U) 
                                                  #line 2910 
                                                  netdev_err(adapter->netdev,(char *)"Potential MSIX issue on Tx side Queue = %d. Reset the device\n",(int)tx_ring->qid);
          #line 2913 
          adapter->reset_reason = ENA_REGS_RESET_MISS_INTERRUPT;
          #line 2915 
          cif_set_bit(4L,& adapter->flags);
          #line 2916 
          return -5;
        }
      }
      {
        #line 2919 
        unsigned long __dummy_1;
        #line 2919 
        unsigned long __dummy2_1;
        }
      #line 2919 
      if ((long)(1 != 0) != 0L) {
        {
          #line 2919 
          unsigned long __dummy_2;
          #line 2919 
          unsigned long __dummy2_2;
          }
        #line 2919 
        if ((long)(1 != 0) != 0L) 
                                  #line 2919 
                                  tmp_5 = 1; else 
                                                  #line 2919 
                                                  tmp_5 = 0;
      }
      else 
           #line 2919 
           tmp_5 = 0;
      #line 2919 
      if (tmp_5 != 0) 
        #line 2919 
        if ((long)((long)((adapter->missing_tx_completion_to + last_jiffies) - jiffies) < 0L) != 0L) {
          #line 2921 
          if (tx_buf->print_once == 0U) 
            #line 2922 
            if ((adapter->msg_enable & 128U) != 0U) 
                                                    #line 2922 
                                                    netdev_notice(adapter->netdev,(char *)"Found a Tx that wasn\'t completed on time, qid %d, index %d.\n",(int)tx_ring->qid,i);
          #line 2926 
          tx_buf->print_once = 1U;
          #line 2927 
          missed_tx ++;
        }
    }
    #line 2897 
    __Cont: 
            #line 2897 
    i ++;
  }
  #line 2931 
  if ((long)(adapter->missing_tx_completion_threshold < missed_tx) != 0L) {
    #line 2932 
    if ((adapter->msg_enable & 128U) != 0U) 
                                            #line 2932 
                                            netdev_err(adapter->netdev,(char *)"The number of lost tx completions is above the threshold (%d > %d). Reset the device\n",missed_tx,adapter->missing_tx_completion_threshold);
    #line 2936 
    adapter->reset_reason = ENA_REGS_RESET_MISS_TX_CMPL;
    #line 2938 
    cif_set_bit(4L,& adapter->flags);
    #line 2939 
    rc = -5;
  }
  #line 2942 
  u64_stats_init(& tx_ring->syncp);
  #line 2943 
  tx_ring->__anonCompField_ena_ring_199.tx_stats.missed_tx = (unsigned long long)missed_tx;
  #line 2944 
  u64_stats_init(& tx_ring->syncp);
  #line 2946 
  return rc;
}

#line 2949  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_netdev.c"
static void check_for_missing_completions(struct ena_adapter *adapter)
{
  #line 2951 
  struct ena_ring *tx_ring;
  #line 2952 
  struct ena_ring *rx_ring;
  #line 2953 
  int i;
  #line 2953 
  int budget;
  #line 2953 
  int rc;
  #line 2954 
  ldv_inline_asm();
  #line 2958 
  if (! test_bit(1L,& adapter->flags)) 
                                       #line 2959 
                                       return;
  #line 2961 
  if ((int)test_bit(4L,& adapter->flags) != 0) 
                                               #line 2962 
                                               return;
  #line 2964 
  if (adapter->missing_tx_completion_to == 65535UL) 
                                                    #line 2965 
                                                    return;
  #line 2967 
  budget = 4;
  #line 2969 
  i = (int)adapter->last_monitored_tx_qid;
  #line 2969 
  while (adapter->num_io_queues > (unsigned int)i) {
    #line 2970 
    tx_ring = & adapter->tx_ring[i];
    #line 2971 
    rx_ring = & adapter->rx_ring[i];
    #line 2973 
    rc = check_missing_comp_in_tx_queue(adapter,tx_ring);
    #line 2974 
    if ((long)(rc != 0) != 0L) 
                               #line 2975 
                               return;
    #line 2977 
    rc = check_for_rx_interrupt_queue(adapter,rx_ring);
    #line 2978 
    if ((long)(rc != 0) != 0L) 
                               #line 2979 
                               return;
    #line 2981 
    budget --;
    #line 2982 
    if (budget == 0) 
                     #line 2983 
                     break;
    #line 2969 
    i ++;
  }
  #line 2986 
  adapter->last_monitored_tx_qid = (unsigned int)i % adapter->num_io_queues;
  #line 2987 
  return;
}

#line 3005  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_netdev.c"
static void check_for_empty_rx_ring(struct ena_adapter *adapter)
{
  #line 3007 
  struct ena_ring *rx_ring;
  #line 3008 
  int i;
  #line 3008 
  int refill_required;
  #line 3010 
  if (! test_bit(1L,& adapter->flags)) 
                                       #line 3011 
                                       return;
  #line 3013 
  if ((int)test_bit(4L,& adapter->flags) != 0) 
                                               #line 3014 
                                               return;
  #line 3016 
  i = 0;
  #line 3016 
  while (adapter->num_io_queues > (unsigned int)i) {
    #line 3017 
    rx_ring = & adapter->rx_ring[i];
    #line 3019 
    refill_required = ena_com_free_desc(rx_ring->ena_com_io_sq);
    #line 3021 
    if ((long)(rx_ring->ring_size + -1 == refill_required) != 0L) {
      #line 3022 
      (rx_ring->empty_rx_queue) ++;
      #line 3024 
      if (rx_ring->empty_rx_queue > 1) {
        #line 3025 
        u64_stats_init(& rx_ring->syncp);
        #line 3026 
        (rx_ring->__anonCompField_ena_ring_199.rx_stats.empty_rx_ring) ++;
        #line 3027 
        u64_stats_init(& rx_ring->syncp);
        #line 3029 
        if ((adapter->msg_enable & 1U) != 0U) 
                                              #line 3029 
                                              netdev_err(adapter->netdev,(char *)"trigger refill for ring %d\n",i);
        #line 3032 
        napi_schedule(rx_ring->napi);
        #line 3033 
        rx_ring->empty_rx_queue = 0;
      }
    }
    else 
         #line 3036 
         rx_ring->empty_rx_queue = 0;
    #line 3016 
    i ++;
  }
  #line 3038 
  return;
}

#line 3042  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_netdev.c"
static void check_for_missing_keep_alive(struct ena_adapter *adapter)
{
  #line 3044 
  unsigned long keep_alive_expired;
  #line 3054 
  int tmp_1;
  #line 3046 
  if (! adapter->wd_state) 
                           #line 3047 
                           return;
  #line 3049 
  if (adapter->keep_alive_timeout == 65535UL) 
                                              #line 3050 
                                              return;
  #line 3052 
  keep_alive_expired = round_jiffies(adapter->last_keep_alive_jiffies + adapter->keep_alive_timeout);
  {
    #line 3054 
    unsigned long __dummy;
    #line 3054 
    unsigned long __dummy2;
    }
  #line 3054 
  if ((long)(1 != 0) != 0L) {
    {
      #line 3054 
      unsigned long __dummy_0;
      #line 3054 
      unsigned long __dummy2_0;
      }
    #line 3054 
    if ((long)(1 != 0) != 0L) 
                              #line 3054 
                              tmp_1 = 1; else 
                                              #line 3054 
                                              tmp_1 = 0;
  }
  else 
       #line 3054 
       tmp_1 = 0;
  #line 3054 
  if (tmp_1 != 0) 
    #line 3054 
    if ((long)((long)(keep_alive_expired - jiffies) < 0L) != 0L) {
      #line 3055 
      if ((adapter->msg_enable & 1U) != 0U) 
                                            #line 3055 
                                            netdev_err(adapter->netdev,(char *)"Keep alive watchdog timeout.\n");
      #line 3057 
      u64_stats_init(& adapter->syncp);
      #line 3058 
      (adapter->dev_stats.wd_expired) ++;
      #line 3059 
      u64_stats_init(& adapter->syncp);
      #line 3060 
      adapter->reset_reason = ENA_REGS_RESET_KEEP_ALIVE_TO;
      #line 3061 
      cif_set_bit(4L,& adapter->flags);
    }
  #line 3063 
  return;
}

#line 3065  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_netdev.c"
static void check_for_admin_com_state(struct ena_adapter *adapter)
{
  #line 3067 
  int tmp_0;
  #line 3067 
  if (ena_com_get_admin_running_state(adapter->ena_dev)) 
                                                         #line 3067 
                                                         tmp_0 = 0; else 
                                                                    #line 3067 
                                                                    tmp_0 = 1;
  #line 3067 
  if ((long)tmp_0 != 0L) {
    #line 3068 
    if ((adapter->msg_enable & 1U) != 0U) 
                                          #line 3068 
                                          netdev_err(adapter->netdev,(char *)"ENA admin queue is not in running state!\n");
    #line 3070 
    u64_stats_init(& adapter->syncp);
    #line 3071 
    (adapter->dev_stats.admin_q_pause) ++;
    #line 3072 
    u64_stats_init(& adapter->syncp);
    #line 3073 
    adapter->reset_reason = ENA_REGS_RESET_ADMIN_TO;
    #line 3074 
    cif_set_bit(4L,& adapter->flags);
  }
  #line 3076 
  return;
}

#line 3078  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_netdev.c"
static void ena_update_hints(struct ena_adapter *adapter, struct ena_admin_ena_hw_hints *hints)
{
  #line 3081 
  struct net_device *netdev = adapter->netdev;
  #line 3083 
  if ((unsigned int)hints->admin_completion_tx_timeout != 0U) 
                                                              #line 3084 
                                                              (adapter->ena_dev)->admin_queue.completion_timeout = (unsigned int)((int)hints->admin_completion_tx_timeout * 1000);
  #line 3087 
  if ((unsigned int)hints->mmio_read_timeout != 0U) 
                                                    #line 3089 
                                                    (adapter->ena_dev)->mmio_read.reg_read_to = (unsigned int)((int)hints->mmio_read_timeout * 1000);
  #line 3092 
  if ((unsigned int)hints->missed_tx_completion_count_threshold_to_reset != 0U) 
    #line 3093 
    adapter->missing_tx_completion_threshold = (unsigned int)hints->missed_tx_completion_count_threshold_to_reset;
  #line 3096 
  if ((unsigned int)hints->missing_tx_completion_timeout != 0U) 
    #line 3097 
    if ((unsigned int)hints->missing_tx_completion_timeout == 65535U) 
      #line 3098 
      adapter->missing_tx_completion_to = 65535UL; else 
                                                        #line 3100 
                                                        adapter->missing_tx_completion_to = msecs_to_jiffies((unsigned int)hints->missing_tx_completion_timeout);
  #line 3104 
  if ((unsigned int)hints->netdev_wd_timeout != 0U) {
    #line 3105 
    netdev->watchdog_timeo = (int)msecs_to_jiffies((unsigned int)hints->netdev_wd_timeout);
  }
  #line 3107 
  if ((unsigned int)hints->driver_watchdog_timeout != 0U) 
    #line 3108 
    if ((unsigned int)hints->driver_watchdog_timeout == 65535U) 
                                                                #line 3109 
                                                                adapter->keep_alive_timeout = 65535UL; else 
                                                                    #line 3111 
                                                                    adapter->keep_alive_timeout = msecs_to_jiffies((unsigned int)hints->driver_watchdog_timeout);
  #line 3113 
  return;
}

#line 3116  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_netdev.c"
static void ena_update_host_info(struct ena_admin_host_info *host_info, struct net_device *netdev)
{
  #line 3119 
  host_info->supported_network_features[0] = (unsigned int)netdev->features;
  #line 3121 
  host_info->supported_network_features[1] = (unsigned int)(netdev->features >> 32);
  #line 3123 
  return;
}

#line 3125  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_netdev.c"
static void ena_timer_service(struct timer_list *t)
{
  #line 3127 
  void *__mptr;
  #line 3127 
  __mptr = (void *)t;
  #line 3127 
  struct ena_adapter *adapter = ((struct ena_adapter *)(__mptr + 18446744073709230832U));
  #line 3128 
  u8 *debug_area = (adapter->ena_dev)->host_attr.debug_area_virt_addr;
  #line 3129 
  struct ena_admin_host_info *host_info = (adapter->ena_dev)->host_attr.host_info;
  #line 3132 
  check_for_missing_keep_alive(adapter);
  #line 3134 
  check_for_admin_com_state(adapter);
  #line 3136 
  check_for_missing_completions(adapter);
  #line 3138 
  check_for_empty_rx_ring(adapter);
  #line 3140 
  if (debug_area != (u8 *)0U) 
                              #line 3141 
                              ena_dump_stats_to_buf(adapter,debug_area);
  #line 3143 
  if (host_info != (struct ena_admin_host_info *)0) 
                                                    #line 3144 
                                                    ena_update_host_info(host_info,adapter->netdev);
  #line 3146 
  if ((long)((int)test_bit(4L,& adapter->flags) != 0) != 0L) {
    #line 3147 
    if ((adapter->msg_enable & 1U) != 0U) 
                                          #line 3147 
                                          netdev_err(adapter->netdev,(char *)"Trigger reset is on\n");
    #line 3149 
    ena_dump_stats_to_dmesg(adapter);
    #line 3150 
    cif_queue_work(ena_wq,& adapter->reset_task);
    #line 3151 
    return;
  }
  #line 3155 
  cif_mod_timer(& adapter->timer_service,jiffies + 250UL);
  #line 3156 
  return;
}

#line 3158  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_netdev.c"
static int ena_calc_max_io_queue_num(struct pci_dev *pdev, struct ena_com_dev *ena_dev, struct ena_com_dev_get_features_ctx *get_feat_ctx)
{
  #line 3186 
  unsigned int __UNIQUE_ID___x585;
  #line 3186 
  unsigned int tmp_8;
  #line 3187 
  unsigned int __UNIQUE_ID___x587;
  #line 3187 
  unsigned int tmp_10;
  #line 3184 
  unsigned int __UNIQUE_ID___x581;
  #line 3189 
  unsigned int __UNIQUE_ID___x589;
  #line 3184 
  unsigned int tmp_4;
  #line 3189 
  unsigned int tmp_13;
  #line 3185 
  unsigned int __UNIQUE_ID___x583;
  #line 3185 
  unsigned int tmp_6;
  #line 3162 
  int io_tx_sq_num;
  #line 3162 
  int io_tx_cq_num;
  #line 3162 
  int io_rx_num;
  #line 3162 
  int max_num_io_queues;
  #line 3164 
  if (((unsigned long)ena_dev->supported_features & 128UL) != 0UL) {
    #line 3167 
    unsigned int tmp;
    #line 3167 
    unsigned int __UNIQUE_ID___x577;
    #line 3165 
    struct ena_admin_queue_ext_feature_fields *max_queue_ext = & get_feat_ctx->max_queue_ext.__anonCompField_ena_admin_queue_ext_feature_desc_197.max_queue_ext;
    {
      #line 3167 
      __UNIQUE_ID___x577 = max_queue_ext->max_rx_sq_num;
      #line 3167 
      unsigned int __UNIQUE_ID___y578 = max_queue_ext->max_rx_cq_num;
      #line 3167 
      if (__UNIQUE_ID___x577 < __UNIQUE_ID___y578) 
                                                   #line 3167 
                                                   tmp = __UNIQUE_ID___x577; else 
                                                                    #line 3167 
                                                                    tmp = __UNIQUE_ID___y578;
      }
    #line 3167 
    io_rx_num = (int)tmp;
    #line 3170 
    io_tx_sq_num = (int)max_queue_ext->max_tx_sq_num;
    #line 3171 
    io_tx_cq_num = (int)max_queue_ext->max_tx_cq_num;
  }
  else {
    #line 3177 
    unsigned int __UNIQUE_ID___x579;
    #line 3177 
    unsigned int tmp_1;
    #line 3173 
    struct ena_admin_queue_feature_desc *max_queues = & get_feat_ctx->max_queues;
    #line 3175 
    io_tx_sq_num = (int)max_queues->max_sq_num;
    #line 3176 
    io_tx_cq_num = (int)max_queues->max_cq_num;
    {
      #line 3177 
      __UNIQUE_ID___x579 = (unsigned int)io_tx_sq_num;
      #line 3177 
      unsigned int __UNIQUE_ID___y580 = (unsigned int)io_tx_cq_num;
      #line 3177 
      if (__UNIQUE_ID___x579 < __UNIQUE_ID___y580) 
                                                   #line 3177 
                                                   tmp_1 = __UNIQUE_ID___x579; else 
                                                                    #line 3177 
                                                                    tmp_1 = __UNIQUE_ID___y580;
      }
    #line 3177 
    io_rx_num = (int)tmp_1;
  }
  #line 3181 
  if (ena_dev->tx_mem_queue_type == (unsigned int)ENA_ADMIN_PLACEMENT_POLICY_DEV) 
    #line 3182 
    io_tx_sq_num = (int)get_feat_ctx->llq.max_llq_num;
  {
    #line 3184 
    __UNIQUE_ID___x581 = num_online_cpus();
    #line 3184 
    unsigned int __UNIQUE_ID___y582 = 128U;
    #line 3184 
    if (__UNIQUE_ID___x581 < __UNIQUE_ID___y582) 
                                                 #line 3184 
                                                 tmp_4 = __UNIQUE_ID___x581; else 
                                                                    #line 3184 
                                                                    tmp_4 = __UNIQUE_ID___y582;
    }
  #line 3184 
  max_num_io_queues = (int)tmp_4;
  {
    #line 3185 
    __UNIQUE_ID___x583 = (unsigned int)max_num_io_queues;
    #line 3185 
    unsigned int __UNIQUE_ID___y584 = (unsigned int)io_rx_num;
    #line 3185 
    if (__UNIQUE_ID___x583 < __UNIQUE_ID___y584) 
                                                 #line 3185 
                                                 tmp_6 = __UNIQUE_ID___x583; else 
                                                                    #line 3185 
                                                                    tmp_6 = __UNIQUE_ID___y584;
    }
  #line 3185 
  max_num_io_queues = (int)tmp_6;
  {
    #line 3186 
    __UNIQUE_ID___x585 = (unsigned int)max_num_io_queues;
    #line 3186 
    unsigned int __UNIQUE_ID___y586 = (unsigned int)io_tx_sq_num;
    #line 3186 
    if (__UNIQUE_ID___x585 < __UNIQUE_ID___y586) 
                                                 #line 3186 
                                                 tmp_8 = __UNIQUE_ID___x585; else 
                                                                    #line 3186 
                                                                    tmp_8 = __UNIQUE_ID___y586;
    }
  #line 3186 
  max_num_io_queues = (int)tmp_8;
  {
    #line 3187 
    __UNIQUE_ID___x587 = (unsigned int)max_num_io_queues;
    #line 3187 
    unsigned int __UNIQUE_ID___y588 = (unsigned int)io_tx_cq_num;
    #line 3187 
    if (__UNIQUE_ID___x587 < __UNIQUE_ID___y588) 
                                                 #line 3187 
                                                 tmp_10 = __UNIQUE_ID___x587; else 
                                                                    #line 3187 
                                                                    tmp_10 = __UNIQUE_ID___y588;
    }
  #line 3187 
  max_num_io_queues = (int)tmp_10;
  {
    #line 3189 
    __UNIQUE_ID___x589 = (unsigned int)max_num_io_queues;
    #line 3189 
    unsigned int __UNIQUE_ID___y590 = (unsigned int)(pci_msix_vec_count(pdev) + -1);
    #line 3189 
    if (__UNIQUE_ID___x589 < __UNIQUE_ID___y590) 
                                                 #line 3189 
                                                 tmp_13 = __UNIQUE_ID___x589; else 
                                                                    #line 3189 
                                                                    tmp_13 = __UNIQUE_ID___y590;
    }
  #line 3189 
  max_num_io_queues = (int)tmp_13;
  #line 3190 
  if ((long)(max_num_io_queues == 0) != 0L) {
    #line 3191 
    _dev_err(& pdev->dev,(char *)"The device doesn\'t have io queues\n");
    #line 3192 
    return -14;
  }
  #line 3195 
  return max_num_io_queues;
}

#line 3198  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_netdev.c"
static int ena_set_queues_placement_policy(struct pci_dev *pdev, struct ena_com_dev *ena_dev, struct ena_admin_feature_llq_desc *llq, struct ena_llq_configurations *llq_default_configurations)
{
  #line 3203 
  bool has_mem_bar;
  #line 3204 
  int rc;
  #line 3205 
  u32 llq_feature_mask;
  #line 3237 
  resource_size_t tmp_0;
  #line 3207 
  llq_feature_mask = 16U;
  #line 3208 
  if ((ena_dev->supported_features & llq_feature_mask) == 0U) {
    #line 3209 
    _dev_err(& pdev->dev,(char *)"LLQ is not supported Fallback to host mode policy.\n");
    #line 3211 
    ena_dev->tx_mem_queue_type = ENA_ADMIN_PLACEMENT_POLICY_HOST;
    #line 3212 
    return 0;
  }
  #line 3215 
  has_mem_bar = (_Bool)(((unsigned long)pci_select_bars(pdev,512UL) & 4UL) != 0UL);
  #line 3217 
  rc = ena_com_config_dev_mode(ena_dev,llq,llq_default_configurations);
  #line 3218 
  if ((long)(rc != 0) != 0L) {
    #line 3219 
    _dev_err(& pdev->dev,(char *)"Failed to configure the device mode.  Fallback to host mode policy.\n");
    #line 3221 
    ena_dev->tx_mem_queue_type = ENA_ADMIN_PLACEMENT_POLICY_HOST;
    #line 3222 
    return 0;
  }
  #line 3226 
  if (ena_dev->tx_mem_queue_type == (unsigned int)ENA_ADMIN_PLACEMENT_POLICY_HOST) 
    #line 3227 
    return 0;
  #line 3229 
  if (! has_mem_bar) {
    #line 3230 
    _dev_err(& pdev->dev,(char *)"ENA device does not expose LLQ bar. Fallback to host mode policy.\n");
    #line 3232 
    ena_dev->tx_mem_queue_type = ENA_ADMIN_PLACEMENT_POLICY_HOST;
    #line 3233 
    return 0;
  }
  #line 3237 
  if (pdev->resource[2].start != 0ULL || pdev->resource[2].end != pdev->resource[2].start) 
    #line 3237 
    tmp_0 = (pdev->resource[2].end - pdev->resource[2].start) + 1ULL; else 
                                                                    #line 3237 
                                                                    tmp_0 = 0ULL;
  #line 3236 
  ;
  #line 3236 
  ;
  #line 3236 
  ena_dev->mem_bar = devm_ioremap_wc(& pdev->dev,pdev->resource[2].start,tmp_0);
  #line 3240 
  if (ena_dev->mem_bar == (void *)0) 
                                     #line 3241 
                                     return -14;
  #line 3243 
  return 0;
}

#line 3246  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_netdev.c"
static void ena_set_dev_offloads(struct ena_com_dev_get_features_ctx *feat, struct net_device *netdev)
{
  #line 3249 
  netdev_features_t dev_features = 0ULL;
  #line 3252 
  if (((unsigned long)feat->offload.tx & 2UL) != 0UL) 
                                                      #line 3254 
                                                      dev_features |= 2ULL;
  #line 3256 
  if (((unsigned long)feat->offload.tx & 8UL) != 0UL) 
                                                      #line 3258 
                                                      dev_features |= 16ULL;
  #line 3260 
  if (((unsigned long)feat->offload.tx & 32UL) != 0UL) 
                                                       #line 3261 
                                                       dev_features |= 65536ULL;
  #line 3263 
  if (((unsigned long)feat->offload.tx & 64UL) != 0UL) 
                                                       #line 3264 
                                                       dev_features |= 1048576ULL;
  #line 3266 
  if (((unsigned long)feat->offload.tx & 128UL) != 0UL) 
                                                        #line 3267 
                                                        dev_features |= 262144ULL;
  #line 3269 
  if (((unsigned long)feat->offload.rx_supported & 2UL) != 0UL) 
                                                                #line 3271 
                                                                dev_features |= 549755813888ULL;
  #line 3273 
  if (((unsigned long)feat->offload.rx_supported & 4UL) != 0UL) 
                                                                #line 3275 
                                                                dev_features |= 549755813888ULL;
  #line 3277 
  netdev->features = dev_features | 274877906977ULL;
  #line 3283 
  netdev->hw_features |= netdev->features;
  #line 3284 
  netdev->vlan_features |= netdev->features;
  #line 3285 
  return;
}

#line 3287  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_netdev.c"
static void ena_set_conf_feat_params(struct ena_adapter *adapter, struct ena_com_dev_get_features_ctx *feat)
{
  #line 3290 
  struct net_device *netdev = adapter->netdev;
  #line 3293 
  if (is_valid_ether_addr((u8 *)(& feat->dev_attr.mac_addr))) {
    #line 3297 
    ether_addr_copy((u8 *)(& adapter->mac_addr),(u8 *)(& feat->dev_attr.mac_addr));
    #line 3298 
    ether_addr_copy(netdev->dev_addr,(u8 *)(& adapter->mac_addr));
  }
  else {
    #line 3294 
    eth_hw_addr_random(netdev);
    #line 3295 
    ether_addr_copy((u8 *)(& adapter->mac_addr),netdev->dev_addr);
  }
  #line 3302 
  ena_set_dev_offloads(feat,netdev);
  #line 3304 
  adapter->max_mtu = feat->dev_attr.max_mtu;
  #line 3305 
  netdev->max_mtu = adapter->max_mtu;
  #line 3306 
  netdev->min_mtu = 128U;
  #line 3307 
  return;
}

#line 3309  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_netdev.c"
static int ena_rss_init_default(struct ena_adapter *adapter)
{
  #line 3313 
  int rc;
  #line 3313 
  int i;
  #line 3314 
  u32 val;
  #line 3311 
  struct ena_com_dev *ena_dev = adapter->ena_dev;
  #line 3312 
  struct device *dev = & (adapter->pdev)->dev;
  #line 3316 
  rc = ena_com_rss_init(ena_dev,(unsigned short)7);
  #line 3317 
  if ((long)(rc != 0) != 0L) {
    #line 3318 
    _dev_err(dev,(char *)"Cannot init indirect table\n");
    #line 3319 
    goto err_rss_init;
  }
  #line 3322 
  i = 0;
  #line 3322 
  while (i <= 127) {
    #line 3323 
    val = ethtool_rxfh_indir_default((unsigned int)i,adapter->num_io_queues);
    #line 3324 
    rc = ena_com_indirect_table_fill_entry(ena_dev,(unsigned short)((int)((unsigned short)i)),(unsigned short)((int)((unsigned int)((unsigned short)val) * 2U + 1U)));
    #line 3326 
    if ((long)((rc != 0 && rc != -95) != 0) != 0L) {
      #line 3327 
      _dev_err(dev,(char *)"Cannot fill indirect table\n");
      #line 3328 
      goto err_fill_indir;
    }
    #line 3322 
    i ++;
  }
  #line 3332 
  rc = ena_com_fill_hash_function(ena_dev,(enum ena_admin_hash_functions)ENA_ADMIN_CRC32,(u8 *)0U,(unsigned short)40,4294967295U);
  #line 3334 
  if ((long)((rc != 0 && rc != -95) != 0) != 0L) {
    #line 3335 
    _dev_err(dev,(char *)"Cannot fill hash function\n");
    #line 3336 
    goto err_fill_indir;
  }
  #line 3339 
  rc = ena_com_set_default_hash_ctrl(ena_dev);
  #line 3340 
  if ((long)((rc != 0 && rc != -95) != 0) != 0L) {
    #line 3341 
    _dev_err(dev,(char *)"Cannot fill hash control\n");
    #line 3342 
    goto err_fill_indir;
  }
  #line 3345 
  return 0;
  #line 3347 
  err_fill_indir: 
                  #line 3347 
  ;
  #line 3348 
  ena_com_rss_destroy(ena_dev);
  #line 3349 
  err_rss_init: 
                #line 3349 
  ;
  #line 3351 
  return rc;
}

#line 3354  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_netdev.c"
static void ena_release_bars(struct ena_com_dev *ena_dev, struct pci_dev *pdev)
{
  #line 3356 
  int release_bars = pci_select_bars(pdev,512UL) & 5;
  #line 3358 
  pci_release_selected_regions(pdev,release_bars);
  #line 3359 
  return;
}

#line 3361  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_netdev.c"
static void set_default_llq_configurations(struct ena_llq_configurations *llq_config)
{
  #line 3363 
  llq_config->llq_header_location = ENA_ADMIN_INLINE_HEADER;
  #line 3364 
  llq_config->llq_ring_entry_size = ENA_ADMIN_LIST_ENTRY_SIZE_128B;
  #line 3365 
  llq_config->llq_stride_ctrl = ENA_ADMIN_MULTIPLE_DESCS_PER_ENTRY;
  #line 3366 
  llq_config->llq_num_decs_before_header = ENA_ADMIN_LLQ_NUM_DESCS_BEFORE_HEADER_2;
  #line 3367 
  llq_config->llq_ring_entry_size_value = (unsigned short)128U;
  #line 3368 
  return;
}

#line 3370  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_netdev.c"
static int ena_calc_io_queue_size(struct ena_calc_queue_size_ctx *ctx)
{
  #line 3420 
  unsigned int tmp_149;
  #line 3422 
  unsigned int __UNIQUE_ID___x617;
  #line 3422 
  unsigned int tmp_153;
  #line 3420 
  unsigned int __UNIQUE_ID___x613;
  #line 3376 
  u32 max_tx_queue_size;
  #line 3377 
  u32 max_rx_queue_size;
  #line 3372 
  struct ena_admin_feature_llq_desc *llq = & (ctx->get_feat_ctx)->llq;
  #line 3373 
  struct ena_com_dev *ena_dev = ctx->ena_dev;
  #line 3374 
  u32 tx_queue_size = 1024U;
  #line 3375 
  u32 rx_queue_size = 1024U;
  #line 3379 
  if (((unsigned long)ena_dev->supported_features & 128UL) != 0UL) {
    #line 3393 
    unsigned short __UNIQUE_ID___x597;
    #line 3393 
    int tmp_5;
    #line 3395 
    unsigned short __UNIQUE_ID___x599;
    #line 3382 
    unsigned int __UNIQUE_ID___x591;
    #line 3395 
    int tmp_7;
    #line 3382 
    unsigned int tmp;
    #line 3380 
    struct ena_admin_queue_ext_feature_fields *max_queue_ext = & (ctx->get_feat_ctx)->max_queue_ext.__anonCompField_ena_admin_queue_ext_feature_desc_197.max_queue_ext;
    {
      #line 3382 
      __UNIQUE_ID___x591 = max_queue_ext->max_rx_cq_depth;
      #line 3382 
      unsigned int __UNIQUE_ID___y592 = max_queue_ext->max_rx_sq_depth;
      #line 3382 
      if (__UNIQUE_ID___x591 < __UNIQUE_ID___y592) 
                                                   #line 3382 
                                                   tmp = __UNIQUE_ID___x591; else 
                                                                    #line 3382 
                                                                    tmp = __UNIQUE_ID___y592;
      }
    #line 3382 
    max_rx_queue_size = tmp;
    #line 3384 
    max_tx_queue_size = max_queue_ext->max_tx_cq_depth;
    #line 3386 
    if (ena_dev->tx_mem_queue_type == (unsigned int)ENA_ADMIN_PLACEMENT_POLICY_DEV) {
      #line 3387 
      unsigned int __UNIQUE_ID___x593;
      #line 3387 
      unsigned int tmp_1;
      {
        #line 3387 
        __UNIQUE_ID___x593 = max_tx_queue_size;
        #line 3387 
        unsigned int __UNIQUE_ID___y594 = llq->max_llq_depth;
        #line 3387 
        if (__UNIQUE_ID___x593 < __UNIQUE_ID___y594) 
                                                     #line 3387 
                                                     tmp_1 = __UNIQUE_ID___x593; else 
                                                                    #line 3387 
                                                                    tmp_1 = __UNIQUE_ID___y594;
        }
      #line 3387 
      max_tx_queue_size = tmp_1;
    }
    else {
      #line 3390 
      unsigned int __UNIQUE_ID___x595;
      #line 3390 
      unsigned int tmp_3;
      {
        #line 3390 
        __UNIQUE_ID___x595 = max_tx_queue_size;
        #line 3390 
        unsigned int __UNIQUE_ID___y596 = max_queue_ext->max_tx_sq_depth;
        #line 3390 
        if (__UNIQUE_ID___x595 < __UNIQUE_ID___y596) 
                                                     #line 3390 
                                                     tmp_3 = __UNIQUE_ID___x595; else 
                                                                    #line 3390 
                                                                    tmp_3 = __UNIQUE_ID___y596;
        }
      #line 3390 
      max_tx_queue_size = tmp_3;
    }
    {
      #line 3393 
      __UNIQUE_ID___x597 = (unsigned short)19U;
      #line 3393 
      unsigned short __UNIQUE_ID___y598 = max_queue_ext->max_per_packet_tx_descs;
      #line 3393 
      if ((int)__UNIQUE_ID___x597 < (int)__UNIQUE_ID___y598) 
                                                             #line 3393 
                                                             tmp_5 = (int)__UNIQUE_ID___x597; else 
                                                                    #line 3393 
                                                                    tmp_5 = (int)__UNIQUE_ID___y598;
      }
    #line 3393 
    ctx->max_tx_sgl_size = (unsigned short)tmp_5;
    {
      #line 3395 
      __UNIQUE_ID___x599 = (unsigned short)19U;
      #line 3395 
      unsigned short __UNIQUE_ID___y600 = max_queue_ext->max_per_packet_rx_descs;
      #line 3395 
      if ((int)__UNIQUE_ID___x599 < (int)__UNIQUE_ID___y600) 
                                                             #line 3395 
                                                             tmp_7 = (int)__UNIQUE_ID___x599; else 
                                                                    #line 3395 
                                                                    tmp_7 = (int)__UNIQUE_ID___y600;
      }
    #line 3395 
    ctx->max_rx_sgl_size = (unsigned short)tmp_7;
  }
  else {
    #line 3411 
    unsigned short __UNIQUE_ID___x607;
    #line 3411 
    int tmp_15;
    #line 3413 
    unsigned short __UNIQUE_ID___x609;
    #line 3400 
    unsigned int __UNIQUE_ID___x601;
    #line 3413 
    int tmp_17;
    #line 3400 
    unsigned int tmp_9;
    #line 3398 
    struct ena_admin_queue_feature_desc *max_queues = & (ctx->get_feat_ctx)->max_queues;
    {
      #line 3400 
      __UNIQUE_ID___x601 = max_queues->max_cq_depth;
      #line 3400 
      unsigned int __UNIQUE_ID___y602 = max_queues->max_sq_depth;
      #line 3400 
      if (__UNIQUE_ID___x601 < __UNIQUE_ID___y602) 
                                                   #line 3400 
                                                   tmp_9 = __UNIQUE_ID___x601; else 
                                                                    #line 3400 
                                                                    tmp_9 = __UNIQUE_ID___y602;
      }
    #line 3400 
    max_rx_queue_size = tmp_9;
    #line 3402 
    max_tx_queue_size = max_queues->max_cq_depth;
    #line 3404 
    if (ena_dev->tx_mem_queue_type == (unsigned int)ENA_ADMIN_PLACEMENT_POLICY_DEV) {
      #line 3405 
      unsigned int __UNIQUE_ID___x603;
      #line 3405 
      unsigned int tmp_11;
      {
        #line 3405 
        __UNIQUE_ID___x603 = max_tx_queue_size;
        #line 3405 
        unsigned int __UNIQUE_ID___y604 = llq->max_llq_depth;
        #line 3405 
        if (__UNIQUE_ID___x603 < __UNIQUE_ID___y604) 
                                                     #line 3405 
                                                     tmp_11 = __UNIQUE_ID___x603; else 
                                                                    #line 3405 
                                                                    tmp_11 = __UNIQUE_ID___y604;
        }
      #line 3405 
      max_tx_queue_size = tmp_11;
    }
    else {
      #line 3408 
      unsigned int __UNIQUE_ID___x605;
      #line 3408 
      unsigned int tmp_13;
      {
        #line 3408 
        __UNIQUE_ID___x605 = max_tx_queue_size;
        #line 3408 
        unsigned int __UNIQUE_ID___y606 = max_queues->max_sq_depth;
        #line 3408 
        if (__UNIQUE_ID___x605 < __UNIQUE_ID___y606) 
                                                     #line 3408 
                                                     tmp_13 = __UNIQUE_ID___x605; else 
                                                                    #line 3408 
                                                                    tmp_13 = __UNIQUE_ID___y606;
        }
      #line 3408 
      max_tx_queue_size = tmp_13;
    }
    {
      #line 3411 
      __UNIQUE_ID___x607 = (unsigned short)19U;
      #line 3411 
      unsigned short __UNIQUE_ID___y608 = max_queues->max_packet_tx_descs;
      #line 3411 
      if ((int)__UNIQUE_ID___x607 < (int)__UNIQUE_ID___y608) 
                                                             #line 3411 
                                                             tmp_15 = (int)__UNIQUE_ID___x607; else 
                                                                    #line 3411 
                                                                    tmp_15 = (int)__UNIQUE_ID___y608;
      }
    #line 3411 
    ctx->max_tx_sgl_size = (unsigned short)tmp_15;
    {
      #line 3413 
      __UNIQUE_ID___x609 = (unsigned short)19U;
      #line 3413 
      unsigned short __UNIQUE_ID___y610 = max_queues->max_packet_rx_descs;
      #line 3413 
      if ((int)__UNIQUE_ID___x609 < (int)__UNIQUE_ID___y610) 
                                                             #line 3413 
                                                             tmp_17 = (int)__UNIQUE_ID___x609; else 
                                                                    #line 3413 
                                                                    tmp_17 = (int)__UNIQUE_ID___y610;
      }
    #line 3413 
    ctx->max_rx_sgl_size = (unsigned short)tmp_17;
  }
  #line 3417 
  if (0 != 0) {
    #line 3417 
    unsigned int tmp_54;
    #line 3417 
    unsigned int tmp_22;
    #line 3417 
    unsigned int tmp_23;
    #line 3417 
    unsigned int tmp_55;
    #line 3417 
    unsigned int tmp_56;
    #line 3417 
    unsigned int tmp_24;
    #line 3417 
    unsigned int tmp_25;
    #line 3417 
    unsigned int tmp_57;
    #line 3417 
    unsigned int tmp_58;
    #line 3417 
    unsigned int tmp_26;
    #line 3417 
    unsigned int tmp_27;
    #line 3417 
    unsigned int tmp_59;
    #line 3417 
    unsigned int tmp_60;
    #line 3417 
    unsigned int tmp_28;
    #line 3417 
    unsigned int tmp_29;
    #line 3417 
    unsigned int tmp_61;
    #line 3417 
    unsigned int tmp_62;
    #line 3417 
    unsigned int tmp_30;
    #line 3417 
    unsigned int tmp_31;
    #line 3417 
    unsigned int tmp_63;
    #line 3417 
    unsigned int tmp_64;
    #line 3417 
    unsigned int tmp_32;
    #line 3417 
    unsigned int tmp_33;
    #line 3417 
    unsigned int tmp_65;
    #line 3417 
    unsigned int tmp_66;
    #line 3417 
    unsigned int tmp_34;
    #line 3417 
    unsigned int tmp_35;
    #line 3417 
    unsigned int tmp_67;
    #line 3417 
    unsigned int tmp_68;
    #line 3417 
    unsigned int tmp_36;
    #line 3417 
    unsigned int tmp_37;
    #line 3417 
    unsigned int tmp_69;
    #line 3417 
    unsigned int tmp_70;
    #line 3417 
    unsigned int tmp_38;
    #line 3417 
    unsigned int tmp_39;
    #line 3417 
    unsigned int tmp_71;
    #line 3417 
    unsigned int tmp_72;
    #line 3417 
    unsigned int tmp_40;
    #line 3417 
    unsigned int tmp_41;
    #line 3417 
    unsigned int tmp_73;
    #line 3417 
    unsigned int tmp_74;
    #line 3417 
    unsigned int tmp_42;
    #line 3417 
    unsigned int tmp_43;
    #line 3417 
    unsigned int tmp_75;
    #line 3417 
    unsigned int tmp_76;
    #line 3417 
    unsigned int tmp_44;
    #line 3417 
    unsigned int tmp_45;
    #line 3417 
    unsigned int tmp_77;
    #line 3417 
    unsigned int tmp_78;
    #line 3417 
    unsigned int tmp_46;
    #line 3417 
    unsigned int tmp_47;
    #line 3417 
    unsigned int tmp_79;
    #line 3417 
    unsigned int tmp_80;
    #line 3417 
    unsigned int tmp_48;
    #line 3417 
    unsigned int tmp_49;
    #line 3417 
    unsigned int tmp_50;
    #line 3417 
    unsigned int tmp_19;
    #line 3417 
    unsigned int tmp_51;
    #line 3417 
    unsigned int tmp_52;
    #line 3417 
    unsigned int tmp_20;
    #line 3417 
    unsigned int tmp_21;
    #line 3417 
    unsigned int tmp_53;
    #line 3417 
    unsigned int tmp_81;
    #line 3417 
    if (max_tx_queue_size > 1U) {
      #line 3417 
      if (((unsigned long long)max_tx_queue_size & 9223372036854775808ULL) == 0ULL) {
        #line 3417 
        if (((unsigned long long)max_tx_queue_size & 4611686018427387904ULL) == 0ULL) {
          #line 3417 
          if (((unsigned long long)max_tx_queue_size & 2305843009213693952ULL) == 0ULL) {
            #line 3417 
            if (((unsigned long long)max_tx_queue_size & 1152921504606846976ULL) == 0ULL) {
              #line 3417 
              if (((unsigned long long)max_tx_queue_size & 576460752303423488ULL) == 0ULL) {
                #line 3417 
                if (((unsigned long long)max_tx_queue_size & 288230376151711744ULL) == 0ULL) {
                  #line 3417 
                  if (((unsigned long long)max_tx_queue_size & 144115188075855872ULL) == 0ULL) {
                    #line 3417 
                    if (((unsigned long long)max_tx_queue_size & 72057594037927936ULL) == 0ULL) {
                      #line 3417 
                      if (((unsigned long long)max_tx_queue_size & 36028797018963968ULL) == 0ULL) {
                        #line 3417 
                        if (((unsigned long long)max_tx_queue_size & 18014398509481984ULL) == 0ULL) {
                          #line 3417 
                          if (((unsigned long long)max_tx_queue_size & 9007199254740992ULL) == 0ULL) {
                            #line 3417 
                            if (((unsigned long long)max_tx_queue_size & 4503599627370496ULL) == 0ULL) {
                              #line 3417 
                              if (((unsigned long long)max_tx_queue_size & 2251799813685248ULL) == 0ULL) {
                                #line 3417 
                                if (((unsigned long long)max_tx_queue_size & 1125899906842624ULL) == 0ULL) {
                                  #line 3417 
                                  if (((unsigned long long)max_tx_queue_size & 562949953421312ULL) == 0ULL) {
                                    #line 3417 
                                    if (((unsigned long long)max_tx_queue_size & 281474976710656ULL) == 0ULL) {
                                      #line 3417 
                                      if (((unsigned long long)max_tx_queue_size & 140737488355328ULL) == 0ULL) {
                                        #line 3417 
                                        if (((unsigned long long)max_tx_queue_size & 70368744177664ULL) == 0ULL) {
                                          #line 3417 
                                          if (((unsigned long long)max_tx_queue_size & 35184372088832ULL) == 0ULL) {
                                            #line 3417 
                                            if (((unsigned long long)max_tx_queue_size & 17592186044416ULL) == 0ULL) {
                                              #line 3417 
                                              if (((unsigned long long)max_tx_queue_size & 8796093022208ULL) == 0ULL) {
                                                #line 3417 
                                                if (((unsigned long long)max_tx_queue_size & 4398046511104ULL) == 0ULL) {
                                                  #line 3417 
                                                  if (((unsigned long long)max_tx_queue_size & 2199023255552ULL) == 0ULL) {
                                                    #line 3417 
                                                    if (((unsigned long long)max_tx_queue_size & 1099511627776ULL) == 0ULL) {
                                                      #line 3417 
                                                      if (((unsigned long long)max_tx_queue_size & 549755813888ULL) == 0ULL) {
                                                        #line 3417 
                                                        if (((unsigned long long)max_tx_queue_size & 274877906944ULL) == 0ULL) {
                                                          #line 3417 
                                                          if (((unsigned long long)max_tx_queue_size & 137438953472ULL) == 0ULL) {
                                                            #line 3417 
                                                            if (((unsigned long long)max_tx_queue_size & 68719476736ULL) == 0ULL) {
                                                              #line 3417 
                                                              if (((unsigned long long)max_tx_queue_size & 34359738368ULL) == 0ULL) {
                                                                #line 3417 
                                                                if (((unsigned long long)max_tx_queue_size & 17179869184ULL) == 0ULL) {
                                                                  #line 3417 
                                                                  if (
                                                                    ((unsigned long long)max_tx_queue_size & 8589934592ULL) == 0ULL) {
                                                                    #line 3417 
                                                                    if (
                                                                    ((unsigned long long)max_tx_queue_size & 4294967296ULL) == 0ULL) {
                                                                    #line 3417 
                                                                    if (
                                                                    ((unsigned long long)max_tx_queue_size & 2147483648ULL) == 0ULL) {
                                                                    #line 3417 
                                                                    if (
                                                                    ((unsigned long long)max_tx_queue_size & 1073741824ULL) == 0ULL) {
                                                                    #line 3417 
                                                                    if (
                                                                    ((unsigned long long)max_tx_queue_size & 536870912ULL) == 0ULL) {
                                                                    #line 3417 
                                                                    if (
                                                                    ((unsigned long long)max_tx_queue_size & 268435456ULL) == 0ULL) {
                                                                    #line 3417 
                                                                    if (
                                                                    ((unsigned long long)max_tx_queue_size & 134217728ULL) == 0ULL) {
                                                                    #line 3417 
                                                                    if (
                                                                    ((unsigned long long)max_tx_queue_size & 67108864ULL) == 0ULL) {
                                                                    #line 3417 
                                                                    if (
                                                                    ((unsigned long long)max_tx_queue_size & 33554432ULL) == 0ULL) {
                                                                    #line 3417 
                                                                    if (
                                                                    ((unsigned long long)max_tx_queue_size & 16777216ULL) == 0ULL) {
                                                                    #line 3417 
                                                                    if (
                                                                    ((unsigned long long)max_tx_queue_size & 8388608ULL) == 0ULL) {
                                                                    #line 3417 
                                                                    if (
                                                                    ((unsigned long long)max_tx_queue_size & 4194304ULL) == 0ULL) {
                                                                    #line 3417 
                                                                    if (
                                                                    ((unsigned long long)max_tx_queue_size & 2097152ULL) == 0ULL) {
                                                                    #line 3417 
                                                                    if (
                                                                    ((unsigned long long)max_tx_queue_size & 1048576ULL) == 0ULL) {
                                                                    #line 3417 
                                                                    if (
                                                                    ((unsigned long long)max_tx_queue_size & 524288ULL) == 0ULL) {
                                                                    #line 3417 
                                                                    if (
                                                                    ((unsigned long long)max_tx_queue_size & 262144ULL) == 0ULL) {
                                                                    #line 3417 
                                                                    if (
                                                                    ((unsigned long long)max_tx_queue_size & 131072ULL) == 0ULL) {
                                                                    #line 3417 
                                                                    if (
                                                                    ((unsigned long long)max_tx_queue_size & 65536ULL) == 0ULL) {
                                                                    #line 3417 
                                                                    if (
                                                                    ((unsigned long long)max_tx_queue_size & 32768ULL) == 0ULL) {
                                                                    #line 3417 
                                                                    if (
                                                                    ((unsigned long long)max_tx_queue_size & 16384ULL) == 0ULL) {
                                                                    #line 3417 
                                                                    if (
                                                                    ((unsigned long long)max_tx_queue_size & 8192ULL) == 0ULL) {
                                                                    #line 3417 
                                                                    if (
                                                                    ((unsigned long long)max_tx_queue_size & 4096ULL) == 0ULL) {
                                                                    #line 3417 
                                                                    if (
                                                                    ((unsigned long long)max_tx_queue_size & 2048ULL) == 0ULL) {
                                                                    #line 3417 
                                                                    if (
                                                                    ((unsigned long long)max_tx_queue_size & 1024ULL) == 0ULL) {
                                                                    #line 3417 
                                                                    if (
                                                                    ((unsigned long long)max_tx_queue_size & 512ULL) == 0ULL) {
                                                                    #line 3417 
                                                                    if (
                                                                    ((unsigned long long)max_tx_queue_size & 256ULL) == 0ULL) {
                                                                    #line 3417 
                                                                    if (
                                                                    ((unsigned long long)max_tx_queue_size & 128ULL) == 0ULL) {
                                                                    #line 3417 
                                                                    if (
                                                                    ((unsigned long long)max_tx_queue_size & 64ULL) == 0ULL) {
                                                                    #line 3417 
                                                                    if (
                                                                    ((unsigned long long)max_tx_queue_size & 32ULL) == 0ULL) {
                                                                    #line 3417 
                                                                    if (
                                                                    ((unsigned long long)max_tx_queue_size & 16ULL) == 0ULL) {
                                                                    #line 3417 
                                                                    if (
                                                                    ((unsigned long long)max_tx_queue_size & 8ULL) == 0ULL) {
                                                                    #line 3417 
                                                                    if (
                                                                    ((unsigned long long)max_tx_queue_size & 4ULL) != 0ULL) 
                                                                    #line 3417 
                                                                    tmp_19 = 4U; else 
                                                                    #line 3417 
                                                                    tmp_19 = 2U;
                                                                    #line 3417 
                                                                    tmp_20 = tmp_19;
                                                                    }
                                                                    else 
                                                                    #line 3417 
                                                                    tmp_20 = 8U;
                                                                    #line 3417 
                                                                    tmp_21 = tmp_20;
                                                                    }
                                                                    else 
                                                                    #line 3417 
                                                                    tmp_21 = 16U;
                                                                    #line 3417 
                                                                    tmp_22 = tmp_21;
                                                                    }
                                                                    else 
                                                                    #line 3417 
                                                                    tmp_22 = 32U;
                                                                    #line 3417 
                                                                    tmp_23 = tmp_22;
                                                                    }
                                                                    else 
                                                                    #line 3417 
                                                                    tmp_23 = 64U;
                                                                    #line 3417 
                                                                    tmp_24 = tmp_23;
                                                                    }
                                                                    else 
                                                                    #line 3417 
                                                                    tmp_24 = 128U;
                                                                    #line 3417 
                                                                    tmp_25 = tmp_24;
                                                                    }
                                                                    else 
                                                                    #line 3417 
                                                                    tmp_25 = 256U;
                                                                    #line 3417 
                                                                    tmp_26 = tmp_25;
                                                                    }
                                                                    else 
                                                                    #line 3417 
                                                                    tmp_26 = 512U;
                                                                    #line 3417 
                                                                    tmp_27 = tmp_26;
                                                                    }
                                                                    else 
                                                                    #line 3417 
                                                                    tmp_27 = 1024U;
                                                                    #line 3417 
                                                                    tmp_28 = tmp_27;
                                                                    }
                                                                    else 
                                                                    #line 3417 
                                                                    tmp_28 = 2048U;
                                                                    #line 3417 
                                                                    tmp_29 = tmp_28;
                                                                    }
                                                                    else 
                                                                    #line 3417 
                                                                    tmp_29 = 4096U;
                                                                    #line 3417 
                                                                    tmp_30 = tmp_29;
                                                                    }
                                                                    else 
                                                                    #line 3417 
                                                                    tmp_30 = 8192U;
                                                                    #line 3417 
                                                                    tmp_31 = tmp_30;
                                                                    }
                                                                    else 
                                                                    #line 3417 
                                                                    tmp_31 = 16384U;
                                                                    #line 3417 
                                                                    tmp_32 = tmp_31;
                                                                    }
                                                                    else 
                                                                    #line 3417 
                                                                    tmp_32 = 32768U;
                                                                    #line 3417 
                                                                    tmp_33 = tmp_32;
                                                                    }
                                                                    else 
                                                                    #line 3417 
                                                                    tmp_33 = 65536U;
                                                                    #line 3417 
                                                                    tmp_34 = tmp_33;
                                                                    }
                                                                    else 
                                                                    #line 3417 
                                                                    tmp_34 = 131072U;
                                                                    #line 3417 
                                                                    tmp_35 = tmp_34;
                                                                    }
                                                                    else 
                                                                    #line 3417 
                                                                    tmp_35 = 262144U;
                                                                    #line 3417 
                                                                    tmp_36 = tmp_35;
                                                                    }
                                                                    else 
                                                                    #line 3417 
                                                                    tmp_36 = 524288U;
                                                                    #line 3417 
                                                                    tmp_37 = tmp_36;
                                                                    }
                                                                    else 
                                                                    #line 3417 
                                                                    tmp_37 = 1048576U;
                                                                    #line 3417 
                                                                    tmp_38 = tmp_37;
                                                                    }
                                                                    else 
                                                                    #line 3417 
                                                                    tmp_38 = 2097152U;
                                                                    #line 3417 
                                                                    tmp_39 = tmp_38;
                                                                    }
                                                                    else 
                                                                    #line 3417 
                                                                    tmp_39 = 4194304U;
                                                                    #line 3417 
                                                                    tmp_40 = tmp_39;
                                                                    }
                                                                    else 
                                                                    #line 3417 
                                                                    tmp_40 = 8388608U;
                                                                    #line 3417 
                                                                    tmp_41 = tmp_40;
                                                                    }
                                                                    else 
                                                                    #line 3417 
                                                                    tmp_41 = 16777216U;
                                                                    #line 3417 
                                                                    tmp_42 = tmp_41;
                                                                    }
                                                                    else 
                                                                    #line 3417 
                                                                    tmp_42 = 33554432U;
                                                                    #line 3417 
                                                                    tmp_43 = tmp_42;
                                                                    }
                                                                    else 
                                                                    #line 3417 
                                                                    tmp_43 = 67108864U;
                                                                    #line 3417 
                                                                    tmp_44 = tmp_43;
                                                                    }
                                                                    else 
                                                                    #line 3417 
                                                                    tmp_44 = 134217728U;
                                                                    #line 3417 
                                                                    tmp_45 = tmp_44;
                                                                    }
                                                                    else 
                                                                    #line 3417 
                                                                    tmp_45 = 268435456U;
                                                                    #line 3417 
                                                                    tmp_46 = tmp_45;
                                                                    }
                                                                    else 
                                                                    #line 3417 
                                                                    tmp_46 = 536870912U;
                                                                    #line 3417 
                                                                    tmp_47 = tmp_46;
                                                                    }
                                                                    else 
                                                                    #line 3417 
                                                                    tmp_47 = 1073741824U;
                                                                    #line 3417 
                                                                    tmp_48 = tmp_47;
                                                                    }
                                                                    else 
                                                                    #line 3417 
                                                                    tmp_48 = 2147483648U;
                                                                    #line 3417 
                                                                    tmp_49 = tmp_48;
                                                                    }
                                                                    else 
                                                                    #line 3417 
                                                                    tmp_49 = 0U;
                                                                    #line 3417 
                                                                    tmp_50 = tmp_49;
                                                                  }
                                                                  else 
                                                                    #line 3417 
                                                                    tmp_50 = 0U;
                                                                  #line 3417 
                                                                  tmp_51 = tmp_50;
                                                                }
                                                                else 
                                                                  #line 3417 
                                                                  tmp_51 = 0U;
                                                                #line 3417 
                                                                tmp_52 = tmp_51;
                                                              }
                                                              else 
                                                                   #line 3417 
                                                                   tmp_52 = 0U;
                                                              #line 3417 
                                                              tmp_53 = tmp_52;
                                                            }
                                                            else 
                                                                 #line 3417 
                                                                 tmp_53 = 0U;
                                                            #line 3417 
                                                            tmp_54 = tmp_53;
                                                          }
                                                          else 
                                                               #line 3417 
                                                               tmp_54 = 0U;
                                                          #line 3417 
                                                          tmp_55 = tmp_54;
                                                        }
                                                        else 
                                                             #line 3417 
                                                             tmp_55 = 0U;
                                                        #line 3417 
                                                        tmp_56 = tmp_55;
                                                      }
                                                      else 
                                                           #line 3417 
                                                           tmp_56 = 0U;
                                                      #line 3417 
                                                      tmp_57 = tmp_56;
                                                    }
                                                    else 
                                                         #line 3417 
                                                         tmp_57 = 0U;
                                                    #line 3417 
                                                    tmp_58 = tmp_57;
                                                  }
                                                  else 
                                                       #line 3417 
                                                       tmp_58 = 0U;
                                                  #line 3417 
                                                  tmp_59 = tmp_58;
                                                }
                                                else 
                                                     #line 3417 
                                                     tmp_59 = 0U;
                                                #line 3417 
                                                tmp_60 = tmp_59;
                                              }
                                              else 
                                                   #line 3417 
                                                   tmp_60 = 0U;
                                              #line 3417 
                                              tmp_61 = tmp_60;
                                            }
                                            else 
                                                 #line 3417 
                                                 tmp_61 = 0U;
                                            #line 3417 
                                            tmp_62 = tmp_61;
                                          }
                                          else 
                                               #line 3417 
                                               tmp_62 = 0U;
                                          #line 3417 
                                          tmp_63 = tmp_62;
                                        }
                                        else 
                                             #line 3417 
                                             tmp_63 = 0U;
                                        #line 3417 
                                        tmp_64 = tmp_63;
                                      }
                                      else 
                                           #line 3417 
                                           tmp_64 = 0U;
                                      #line 3417 
                                      tmp_65 = tmp_64;
                                    }
                                    else 
                                         #line 3417 
                                         tmp_65 = 0U;
                                    #line 3417 
                                    tmp_66 = tmp_65;
                                  }
                                  else 
                                       #line 3417 
                                       tmp_66 = 0U;
                                  #line 3417 
                                  tmp_67 = tmp_66;
                                }
                                else 
                                     #line 3417 
                                     tmp_67 = 0U;
                                #line 3417 
                                tmp_68 = tmp_67;
                              }
                              else 
                                   #line 3417 
                                   tmp_68 = 0U;
                              #line 3417 
                              tmp_69 = tmp_68;
                            }
                            else 
                                 #line 3417 
                                 tmp_69 = 0U;
                            #line 3417 
                            tmp_70 = tmp_69;
                          }
                          else 
                               #line 3417 
                               tmp_70 = 0U;
                          #line 3417 
                          tmp_71 = tmp_70;
                        }
                        else 
                             #line 3417 
                             tmp_71 = 0U;
                        #line 3417 
                        tmp_72 = tmp_71;
                      }
                      else 
                           #line 3417 
                           tmp_72 = 0U;
                      #line 3417 
                      tmp_73 = tmp_72;
                    }
                    else 
                         #line 3417 
                         tmp_73 = 0U;
                    #line 3417 
                    tmp_74 = tmp_73;
                  }
                  else 
                       #line 3417 
                       tmp_74 = 0U;
                  #line 3417 
                  tmp_75 = tmp_74;
                }
                else 
                     #line 3417 
                     tmp_75 = 0U;
                #line 3417 
                tmp_76 = tmp_75;
              }
              else 
                   #line 3417 
                   tmp_76 = 0U;
              #line 3417 
              tmp_77 = tmp_76;
            }
            else 
                 #line 3417 
                 tmp_77 = 0U;
            #line 3417 
            tmp_78 = tmp_77;
          }
          else 
               #line 3417 
               tmp_78 = 0U;
          #line 3417 
          tmp_79 = tmp_78;
        }
        else 
             #line 3417 
             tmp_79 = 0U;
        #line 3417 
        tmp_80 = tmp_79;
      }
      else 
           #line 3417 
           tmp_80 = 0U;
      #line 3417 
      tmp_81 = tmp_80;
    }
    else 
         #line 3417 
         tmp_81 = 1U;
    #line 3417 
    max_tx_queue_size = tmp_81;
  }
  else {
    #line 3417 
    max_tx_queue_size = (unsigned int)__rounddown_pow_of_two((unsigned long)max_tx_queue_size);
  }
  #line 3418 
  if (0 != 0) {
    #line 3418 
    unsigned int tmp_118;
    #line 3418 
    unsigned int tmp_86;
    #line 3418 
    unsigned int tmp_87;
    #line 3418 
    unsigned int tmp_119;
    #line 3418 
    unsigned int tmp_120;
    #line 3418 
    unsigned int tmp_88;
    #line 3418 
    unsigned int tmp_89;
    #line 3418 
    unsigned int tmp_121;
    #line 3418 
    unsigned int tmp_122;
    #line 3418 
    unsigned int tmp_90;
    #line 3418 
    unsigned int tmp_91;
    #line 3418 
    unsigned int tmp_123;
    #line 3418 
    unsigned int tmp_124;
    #line 3418 
    unsigned int tmp_92;
    #line 3418 
    unsigned int tmp_93;
    #line 3418 
    unsigned int tmp_125;
    #line 3418 
    unsigned int tmp_126;
    #line 3418 
    unsigned int tmp_94;
    #line 3418 
    unsigned int tmp_95;
    #line 3418 
    unsigned int tmp_127;
    #line 3418 
    unsigned int tmp_128;
    #line 3418 
    unsigned int tmp_96;
    #line 3418 
    unsigned int tmp_97;
    #line 3418 
    unsigned int tmp_129;
    #line 3418 
    unsigned int tmp_130;
    #line 3418 
    unsigned int tmp_98;
    #line 3418 
    unsigned int tmp_99;
    #line 3418 
    unsigned int tmp_131;
    #line 3418 
    unsigned int tmp_132;
    #line 3418 
    unsigned int tmp_100;
    #line 3418 
    unsigned int tmp_101;
    #line 3418 
    unsigned int tmp_133;
    #line 3418 
    unsigned int tmp_134;
    #line 3418 
    unsigned int tmp_102;
    #line 3418 
    unsigned int tmp_103;
    #line 3418 
    unsigned int tmp_135;
    #line 3418 
    unsigned int tmp_136;
    #line 3418 
    unsigned int tmp_104;
    #line 3418 
    unsigned int tmp_105;
    #line 3418 
    unsigned int tmp_137;
    #line 3418 
    unsigned int tmp_138;
    #line 3418 
    unsigned int tmp_106;
    #line 3418 
    unsigned int tmp_107;
    #line 3418 
    unsigned int tmp_139;
    #line 3418 
    unsigned int tmp_140;
    #line 3418 
    unsigned int tmp_108;
    #line 3418 
    unsigned int tmp_109;
    #line 3418 
    unsigned int tmp_141;
    #line 3418 
    unsigned int tmp_142;
    #line 3418 
    unsigned int tmp_110;
    #line 3418 
    unsigned int tmp_111;
    #line 3418 
    unsigned int tmp_143;
    #line 3418 
    unsigned int tmp_144;
    #line 3418 
    unsigned int tmp_112;
    #line 3418 
    unsigned int tmp_113;
    #line 3418 
    unsigned int tmp_114;
    #line 3418 
    unsigned int tmp_83;
    #line 3418 
    unsigned int tmp_115;
    #line 3418 
    unsigned int tmp_116;
    #line 3418 
    unsigned int tmp_84;
    #line 3418 
    unsigned int tmp_85;
    #line 3418 
    unsigned int tmp_117;
    #line 3418 
    unsigned int tmp_145;
    #line 3418 
    if (max_rx_queue_size > 1U) {
      #line 3418 
      if (((unsigned long long)max_rx_queue_size & 9223372036854775808ULL) == 0ULL) {
        #line 3418 
        if (((unsigned long long)max_rx_queue_size & 4611686018427387904ULL) == 0ULL) {
          #line 3418 
          if (((unsigned long long)max_rx_queue_size & 2305843009213693952ULL) == 0ULL) {
            #line 3418 
            if (((unsigned long long)max_rx_queue_size & 1152921504606846976ULL) == 0ULL) {
              #line 3418 
              if (((unsigned long long)max_rx_queue_size & 576460752303423488ULL) == 0ULL) {
                #line 3418 
                if (((unsigned long long)max_rx_queue_size & 288230376151711744ULL) == 0ULL) {
                  #line 3418 
                  if (((unsigned long long)max_rx_queue_size & 144115188075855872ULL) == 0ULL) {
                    #line 3418 
                    if (((unsigned long long)max_rx_queue_size & 72057594037927936ULL) == 0ULL) {
                      #line 3418 
                      if (((unsigned long long)max_rx_queue_size & 36028797018963968ULL) == 0ULL) {
                        #line 3418 
                        if (((unsigned long long)max_rx_queue_size & 18014398509481984ULL) == 0ULL) {
                          #line 3418 
                          if (((unsigned long long)max_rx_queue_size & 9007199254740992ULL) == 0ULL) {
                            #line 3418 
                            if (((unsigned long long)max_rx_queue_size & 4503599627370496ULL) == 0ULL) {
                              #line 3418 
                              if (((unsigned long long)max_rx_queue_size & 2251799813685248ULL) == 0ULL) {
                                #line 3418 
                                if (((unsigned long long)max_rx_queue_size & 1125899906842624ULL) == 0ULL) {
                                  #line 3418 
                                  if (((unsigned long long)max_rx_queue_size & 562949953421312ULL) == 0ULL) {
                                    #line 3418 
                                    if (((unsigned long long)max_rx_queue_size & 281474976710656ULL) == 0ULL) {
                                      #line 3418 
                                      if (((unsigned long long)max_rx_queue_size & 140737488355328ULL) == 0ULL) {
                                        #line 3418 
                                        if (((unsigned long long)max_rx_queue_size & 70368744177664ULL) == 0ULL) {
                                          #line 3418 
                                          if (((unsigned long long)max_rx_queue_size & 35184372088832ULL) == 0ULL) {
                                            #line 3418 
                                            if (((unsigned long long)max_rx_queue_size & 17592186044416ULL) == 0ULL) {
                                              #line 3418 
                                              if (((unsigned long long)max_rx_queue_size & 8796093022208ULL) == 0ULL) {
                                                #line 3418 
                                                if (((unsigned long long)max_rx_queue_size & 4398046511104ULL) == 0ULL) {
                                                  #line 3418 
                                                  if (((unsigned long long)max_rx_queue_size & 2199023255552ULL) == 0ULL) {
                                                    #line 3418 
                                                    if (((unsigned long long)max_rx_queue_size & 1099511627776ULL) == 0ULL) {
                                                      #line 3418 
                                                      if (((unsigned long long)max_rx_queue_size & 549755813888ULL) == 0ULL) {
                                                        #line 3418 
                                                        if (((unsigned long long)max_rx_queue_size & 274877906944ULL) == 0ULL) {
                                                          #line 3418 
                                                          if (((unsigned long long)max_rx_queue_size & 137438953472ULL) == 0ULL) {
                                                            #line 3418 
                                                            if (((unsigned long long)max_rx_queue_size & 68719476736ULL) == 0ULL) {
                                                              #line 3418 
                                                              if (((unsigned long long)max_rx_queue_size & 34359738368ULL) == 0ULL) {
                                                                #line 3418 
                                                                if (((unsigned long long)max_rx_queue_size & 17179869184ULL) == 0ULL) {
                                                                  #line 3418 
                                                                  if (
                                                                    ((unsigned long long)max_rx_queue_size & 8589934592ULL) == 0ULL) {
                                                                    #line 3418 
                                                                    if (
                                                                    ((unsigned long long)max_rx_queue_size & 4294967296ULL) == 0ULL) {
                                                                    #line 3418 
                                                                    if (
                                                                    ((unsigned long long)max_rx_queue_size & 2147483648ULL) == 0ULL) {
                                                                    #line 3418 
                                                                    if (
                                                                    ((unsigned long long)max_rx_queue_size & 1073741824ULL) == 0ULL) {
                                                                    #line 3418 
                                                                    if (
                                                                    ((unsigned long long)max_rx_queue_size & 536870912ULL) == 0ULL) {
                                                                    #line 3418 
                                                                    if (
                                                                    ((unsigned long long)max_rx_queue_size & 268435456ULL) == 0ULL) {
                                                                    #line 3418 
                                                                    if (
                                                                    ((unsigned long long)max_rx_queue_size & 134217728ULL) == 0ULL) {
                                                                    #line 3418 
                                                                    if (
                                                                    ((unsigned long long)max_rx_queue_size & 67108864ULL) == 0ULL) {
                                                                    #line 3418 
                                                                    if (
                                                                    ((unsigned long long)max_rx_queue_size & 33554432ULL) == 0ULL) {
                                                                    #line 3418 
                                                                    if (
                                                                    ((unsigned long long)max_rx_queue_size & 16777216ULL) == 0ULL) {
                                                                    #line 3418 
                                                                    if (
                                                                    ((unsigned long long)max_rx_queue_size & 8388608ULL) == 0ULL) {
                                                                    #line 3418 
                                                                    if (
                                                                    ((unsigned long long)max_rx_queue_size & 4194304ULL) == 0ULL) {
                                                                    #line 3418 
                                                                    if (
                                                                    ((unsigned long long)max_rx_queue_size & 2097152ULL) == 0ULL) {
                                                                    #line 3418 
                                                                    if (
                                                                    ((unsigned long long)max_rx_queue_size & 1048576ULL) == 0ULL) {
                                                                    #line 3418 
                                                                    if (
                                                                    ((unsigned long long)max_rx_queue_size & 524288ULL) == 0ULL) {
                                                                    #line 3418 
                                                                    if (
                                                                    ((unsigned long long)max_rx_queue_size & 262144ULL) == 0ULL) {
                                                                    #line 3418 
                                                                    if (
                                                                    ((unsigned long long)max_rx_queue_size & 131072ULL) == 0ULL) {
                                                                    #line 3418 
                                                                    if (
                                                                    ((unsigned long long)max_rx_queue_size & 65536ULL) == 0ULL) {
                                                                    #line 3418 
                                                                    if (
                                                                    ((unsigned long long)max_rx_queue_size & 32768ULL) == 0ULL) {
                                                                    #line 3418 
                                                                    if (
                                                                    ((unsigned long long)max_rx_queue_size & 16384ULL) == 0ULL) {
                                                                    #line 3418 
                                                                    if (
                                                                    ((unsigned long long)max_rx_queue_size & 8192ULL) == 0ULL) {
                                                                    #line 3418 
                                                                    if (
                                                                    ((unsigned long long)max_rx_queue_size & 4096ULL) == 0ULL) {
                                                                    #line 3418 
                                                                    if (
                                                                    ((unsigned long long)max_rx_queue_size & 2048ULL) == 0ULL) {
                                                                    #line 3418 
                                                                    if (
                                                                    ((unsigned long long)max_rx_queue_size & 1024ULL) == 0ULL) {
                                                                    #line 3418 
                                                                    if (
                                                                    ((unsigned long long)max_rx_queue_size & 512ULL) == 0ULL) {
                                                                    #line 3418 
                                                                    if (
                                                                    ((unsigned long long)max_rx_queue_size & 256ULL) == 0ULL) {
                                                                    #line 3418 
                                                                    if (
                                                                    ((unsigned long long)max_rx_queue_size & 128ULL) == 0ULL) {
                                                                    #line 3418 
                                                                    if (
                                                                    ((unsigned long long)max_rx_queue_size & 64ULL) == 0ULL) {
                                                                    #line 3418 
                                                                    if (
                                                                    ((unsigned long long)max_rx_queue_size & 32ULL) == 0ULL) {
                                                                    #line 3418 
                                                                    if (
                                                                    ((unsigned long long)max_rx_queue_size & 16ULL) == 0ULL) {
                                                                    #line 3418 
                                                                    if (
                                                                    ((unsigned long long)max_rx_queue_size & 8ULL) == 0ULL) {
                                                                    #line 3418 
                                                                    if (
                                                                    ((unsigned long long)max_rx_queue_size & 4ULL) != 0ULL) 
                                                                    #line 3418 
                                                                    tmp_83 = 4U; else 
                                                                    #line 3418 
                                                                    tmp_83 = 2U;
                                                                    #line 3418 
                                                                    tmp_84 = tmp_83;
                                                                    }
                                                                    else 
                                                                    #line 3418 
                                                                    tmp_84 = 8U;
                                                                    #line 3418 
                                                                    tmp_85 = tmp_84;
                                                                    }
                                                                    else 
                                                                    #line 3418 
                                                                    tmp_85 = 16U;
                                                                    #line 3418 
                                                                    tmp_86 = tmp_85;
                                                                    }
                                                                    else 
                                                                    #line 3418 
                                                                    tmp_86 = 32U;
                                                                    #line 3418 
                                                                    tmp_87 = tmp_86;
                                                                    }
                                                                    else 
                                                                    #line 3418 
                                                                    tmp_87 = 64U;
                                                                    #line 3418 
                                                                    tmp_88 = tmp_87;
                                                                    }
                                                                    else 
                                                                    #line 3418 
                                                                    tmp_88 = 128U;
                                                                    #line 3418 
                                                                    tmp_89 = tmp_88;
                                                                    }
                                                                    else 
                                                                    #line 3418 
                                                                    tmp_89 = 256U;
                                                                    #line 3418 
                                                                    tmp_90 = tmp_89;
                                                                    }
                                                                    else 
                                                                    #line 3418 
                                                                    tmp_90 = 512U;
                                                                    #line 3418 
                                                                    tmp_91 = tmp_90;
                                                                    }
                                                                    else 
                                                                    #line 3418 
                                                                    tmp_91 = 1024U;
                                                                    #line 3418 
                                                                    tmp_92 = tmp_91;
                                                                    }
                                                                    else 
                                                                    #line 3418 
                                                                    tmp_92 = 2048U;
                                                                    #line 3418 
                                                                    tmp_93 = tmp_92;
                                                                    }
                                                                    else 
                                                                    #line 3418 
                                                                    tmp_93 = 4096U;
                                                                    #line 3418 
                                                                    tmp_94 = tmp_93;
                                                                    }
                                                                    else 
                                                                    #line 3418 
                                                                    tmp_94 = 8192U;
                                                                    #line 3418 
                                                                    tmp_95 = tmp_94;
                                                                    }
                                                                    else 
                                                                    #line 3418 
                                                                    tmp_95 = 16384U;
                                                                    #line 3418 
                                                                    tmp_96 = tmp_95;
                                                                    }
                                                                    else 
                                                                    #line 3418 
                                                                    tmp_96 = 32768U;
                                                                    #line 3418 
                                                                    tmp_97 = tmp_96;
                                                                    }
                                                                    else 
                                                                    #line 3418 
                                                                    tmp_97 = 65536U;
                                                                    #line 3418 
                                                                    tmp_98 = tmp_97;
                                                                    }
                                                                    else 
                                                                    #line 3418 
                                                                    tmp_98 = 131072U;
                                                                    #line 3418 
                                                                    tmp_99 = tmp_98;
                                                                    }
                                                                    else 
                                                                    #line 3418 
                                                                    tmp_99 = 262144U;
                                                                    #line 3418 
                                                                    tmp_100 = tmp_99;
                                                                    }
                                                                    else 
                                                                    #line 3418 
                                                                    tmp_100 = 524288U;
                                                                    #line 3418 
                                                                    tmp_101 = tmp_100;
                                                                    }
                                                                    else 
                                                                    #line 3418 
                                                                    tmp_101 = 1048576U;
                                                                    #line 3418 
                                                                    tmp_102 = tmp_101;
                                                                    }
                                                                    else 
                                                                    #line 3418 
                                                                    tmp_102 = 2097152U;
                                                                    #line 3418 
                                                                    tmp_103 = tmp_102;
                                                                    }
                                                                    else 
                                                                    #line 3418 
                                                                    tmp_103 = 4194304U;
                                                                    #line 3418 
                                                                    tmp_104 = tmp_103;
                                                                    }
                                                                    else 
                                                                    #line 3418 
                                                                    tmp_104 = 8388608U;
                                                                    #line 3418 
                                                                    tmp_105 = tmp_104;
                                                                    }
                                                                    else 
                                                                    #line 3418 
                                                                    tmp_105 = 16777216U;
                                                                    #line 3418 
                                                                    tmp_106 = tmp_105;
                                                                    }
                                                                    else 
                                                                    #line 3418 
                                                                    tmp_106 = 33554432U;
                                                                    #line 3418 
                                                                    tmp_107 = tmp_106;
                                                                    }
                                                                    else 
                                                                    #line 3418 
                                                                    tmp_107 = 67108864U;
                                                                    #line 3418 
                                                                    tmp_108 = tmp_107;
                                                                    }
                                                                    else 
                                                                    #line 3418 
                                                                    tmp_108 = 134217728U;
                                                                    #line 3418 
                                                                    tmp_109 = tmp_108;
                                                                    }
                                                                    else 
                                                                    #line 3418 
                                                                    tmp_109 = 268435456U;
                                                                    #line 3418 
                                                                    tmp_110 = tmp_109;
                                                                    }
                                                                    else 
                                                                    #line 3418 
                                                                    tmp_110 = 536870912U;
                                                                    #line 3418 
                                                                    tmp_111 = tmp_110;
                                                                    }
                                                                    else 
                                                                    #line 3418 
                                                                    tmp_111 = 1073741824U;
                                                                    #line 3418 
                                                                    tmp_112 = tmp_111;
                                                                    }
                                                                    else 
                                                                    #line 3418 
                                                                    tmp_112 = 2147483648U;
                                                                    #line 3418 
                                                                    tmp_113 = tmp_112;
                                                                    }
                                                                    else 
                                                                    #line 3418 
                                                                    tmp_113 = 0U;
                                                                    #line 3418 
                                                                    tmp_114 = tmp_113;
                                                                  }
                                                                  else 
                                                                    #line 3418 
                                                                    tmp_114 = 0U;
                                                                  #line 3418 
                                                                  tmp_115 = tmp_114;
                                                                }
                                                                else 
                                                                  #line 3418 
                                                                  tmp_115 = 0U;
                                                                #line 3418 
                                                                tmp_116 = tmp_115;
                                                              }
                                                              else 
                                                                   #line 3418 
                                                                   tmp_116 = 0U;
                                                              #line 3418 
                                                              tmp_117 = tmp_116;
                                                            }
                                                            else 
                                                                 #line 3418 
                                                                 tmp_117 = 0U;
                                                            #line 3418 
                                                            tmp_118 = tmp_117;
                                                          }
                                                          else 
                                                               #line 3418 
                                                               tmp_118 = 0U;
                                                          #line 3418 
                                                          tmp_119 = tmp_118;
                                                        }
                                                        else 
                                                             #line 3418 
                                                             tmp_119 = 0U;
                                                        #line 3418 
                                                        tmp_120 = tmp_119;
                                                      }
                                                      else 
                                                           #line 3418 
                                                           tmp_120 = 0U;
                                                      #line 3418 
                                                      tmp_121 = tmp_120;
                                                    }
                                                    else 
                                                         #line 3418 
                                                         tmp_121 = 0U;
                                                    #line 3418 
                                                    tmp_122 = tmp_121;
                                                  }
                                                  else 
                                                       #line 3418 
                                                       tmp_122 = 0U;
                                                  #line 3418 
                                                  tmp_123 = tmp_122;
                                                }
                                                else 
                                                     #line 3418 
                                                     tmp_123 = 0U;
                                                #line 3418 
                                                tmp_124 = tmp_123;
                                              }
                                              else 
                                                   #line 3418 
                                                   tmp_124 = 0U;
                                              #line 3418 
                                              tmp_125 = tmp_124;
                                            }
                                            else 
                                                 #line 3418 
                                                 tmp_125 = 0U;
                                            #line 3418 
                                            tmp_126 = tmp_125;
                                          }
                                          else 
                                               #line 3418 
                                               tmp_126 = 0U;
                                          #line 3418 
                                          tmp_127 = tmp_126;
                                        }
                                        else 
                                             #line 3418 
                                             tmp_127 = 0U;
                                        #line 3418 
                                        tmp_128 = tmp_127;
                                      }
                                      else 
                                           #line 3418 
                                           tmp_128 = 0U;
                                      #line 3418 
                                      tmp_129 = tmp_128;
                                    }
                                    else 
                                         #line 3418 
                                         tmp_129 = 0U;
                                    #line 3418 
                                    tmp_130 = tmp_129;
                                  }
                                  else 
                                       #line 3418 
                                       tmp_130 = 0U;
                                  #line 3418 
                                  tmp_131 = tmp_130;
                                }
                                else 
                                     #line 3418 
                                     tmp_131 = 0U;
                                #line 3418 
                                tmp_132 = tmp_131;
                              }
                              else 
                                   #line 3418 
                                   tmp_132 = 0U;
                              #line 3418 
                              tmp_133 = tmp_132;
                            }
                            else 
                                 #line 3418 
                                 tmp_133 = 0U;
                            #line 3418 
                            tmp_134 = tmp_133;
                          }
                          else 
                               #line 3418 
                               tmp_134 = 0U;
                          #line 3418 
                          tmp_135 = tmp_134;
                        }
                        else 
                             #line 3418 
                             tmp_135 = 0U;
                        #line 3418 
                        tmp_136 = tmp_135;
                      }
                      else 
                           #line 3418 
                           tmp_136 = 0U;
                      #line 3418 
                      tmp_137 = tmp_136;
                    }
                    else 
                         #line 3418 
                         tmp_137 = 0U;
                    #line 3418 
                    tmp_138 = tmp_137;
                  }
                  else 
                       #line 3418 
                       tmp_138 = 0U;
                  #line 3418 
                  tmp_139 = tmp_138;
                }
                else 
                     #line 3418 
                     tmp_139 = 0U;
                #line 3418 
                tmp_140 = tmp_139;
              }
              else 
                   #line 3418 
                   tmp_140 = 0U;
              #line 3418 
              tmp_141 = tmp_140;
            }
            else 
                 #line 3418 
                 tmp_141 = 0U;
            #line 3418 
            tmp_142 = tmp_141;
          }
          else 
               #line 3418 
               tmp_142 = 0U;
          #line 3418 
          tmp_143 = tmp_142;
        }
        else 
             #line 3418 
             tmp_143 = 0U;
        #line 3418 
        tmp_144 = tmp_143;
      }
      else 
           #line 3418 
           tmp_144 = 0U;
      #line 3418 
      tmp_145 = tmp_144;
    }
    else 
         #line 3418 
         tmp_145 = 1U;
    #line 3418 
    max_rx_queue_size = tmp_145;
  }
  else {
    #line 3418 
    max_rx_queue_size = (unsigned int)__rounddown_pow_of_two((unsigned long)max_rx_queue_size);
  }
  {
    #line 3420 
    unsigned int tmp_147;
    #line 3420 
    unsigned int __UNIQUE_ID___x611;
    {
      #line 3420 
      __UNIQUE_ID___x611 = tx_queue_size;
      #line 3420 
      unsigned int __UNIQUE_ID___y612 = 256U;
      #line 3420 
      if (__UNIQUE_ID___x611 > __UNIQUE_ID___y612) 
                                                   #line 3420 
                                                   tmp_147 = __UNIQUE_ID___x611; else 
                                                                    #line 3420 
                                                                    tmp_147 = __UNIQUE_ID___y612;
      }
    #line 3420 
    __UNIQUE_ID___x613 = tmp_147;
    #line 3420 
    unsigned int __UNIQUE_ID___y614 = max_tx_queue_size;
    #line 3420 
    if (__UNIQUE_ID___x613 < __UNIQUE_ID___y614) 
                                                 #line 3420 
                                                 tmp_149 = __UNIQUE_ID___x613; else 
                                                                    #line 3420 
                                                                    tmp_149 = __UNIQUE_ID___y614;
    }
  #line 3420 
  tx_queue_size = tmp_149;
  {
    #line 3422 
    unsigned int __UNIQUE_ID___x615;
    #line 3422 
    unsigned int tmp_151;
    {
      #line 3422 
      __UNIQUE_ID___x615 = rx_queue_size;
      #line 3422 
      unsigned int __UNIQUE_ID___y616 = 256U;
      #line 3422 
      if (__UNIQUE_ID___x615 > __UNIQUE_ID___y616) 
                                                   #line 3422 
                                                   tmp_151 = __UNIQUE_ID___x615; else 
                                                                    #line 3422 
                                                                    tmp_151 = __UNIQUE_ID___y616;
      }
    #line 3422 
    __UNIQUE_ID___x617 = tmp_151;
    #line 3422 
    unsigned int __UNIQUE_ID___y618 = max_rx_queue_size;
    #line 3422 
    if (__UNIQUE_ID___x617 < __UNIQUE_ID___y618) 
                                                 #line 3422 
                                                 tmp_153 = __UNIQUE_ID___x617; else 
                                                                    #line 3422 
                                                                    tmp_153 = __UNIQUE_ID___y618;
    }
  #line 3422 
  rx_queue_size = tmp_153;
  #line 3425 
  if (0 != 0) {
    #line 3425 
    unsigned int tmp_206;
    #line 3425 
    unsigned int tmp_174;
    #line 3425 
    unsigned int tmp_175;
    #line 3425 
    unsigned int tmp_207;
    #line 3425 
    unsigned int tmp_208;
    #line 3425 
    unsigned int tmp_176;
    #line 3425 
    unsigned int tmp_177;
    #line 3425 
    unsigned int tmp_209;
    #line 3425 
    unsigned int tmp_210;
    #line 3425 
    unsigned int tmp_178;
    #line 3425 
    unsigned int tmp_179;
    #line 3425 
    unsigned int tmp_211;
    #line 3425 
    unsigned int tmp_212;
    #line 3425 
    unsigned int tmp_180;
    #line 3425 
    unsigned int tmp_181;
    #line 3425 
    unsigned int tmp_213;
    #line 3425 
    unsigned int tmp_214;
    #line 3425 
    unsigned int tmp_182;
    #line 3425 
    unsigned int tmp_183;
    #line 3425 
    unsigned int tmp_215;
    #line 3425 
    unsigned int tmp_216;
    #line 3425 
    unsigned int tmp_184;
    #line 3425 
    unsigned int tmp_185;
    #line 3425 
    unsigned int tmp_186;
    #line 3425 
    unsigned int tmp_155;
    #line 3425 
    unsigned int tmp_187;
    #line 3425 
    unsigned int tmp_188;
    #line 3425 
    unsigned int tmp_156;
    #line 3425 
    unsigned int tmp_157;
    #line 3425 
    unsigned int tmp_189;
    #line 3425 
    unsigned int tmp_190;
    #line 3425 
    unsigned int tmp_158;
    #line 3425 
    unsigned int tmp_159;
    #line 3425 
    unsigned int tmp_191;
    #line 3425 
    unsigned int tmp_192;
    #line 3425 
    unsigned int tmp_160;
    #line 3425 
    unsigned int tmp_161;
    #line 3425 
    unsigned int tmp_193;
    #line 3425 
    unsigned int tmp_194;
    #line 3425 
    unsigned int tmp_162;
    #line 3425 
    unsigned int tmp_163;
    #line 3425 
    unsigned int tmp_195;
    #line 3425 
    unsigned int tmp_196;
    #line 3425 
    unsigned int tmp_164;
    #line 3425 
    unsigned int tmp_165;
    #line 3425 
    unsigned int tmp_197;
    #line 3425 
    unsigned int tmp_198;
    #line 3425 
    unsigned int tmp_166;
    #line 3425 
    unsigned int tmp_167;
    #line 3425 
    unsigned int tmp_199;
    #line 3425 
    unsigned int tmp_200;
    #line 3425 
    unsigned int tmp_168;
    #line 3425 
    unsigned int tmp_169;
    #line 3425 
    unsigned int tmp_201;
    #line 3425 
    unsigned int tmp_202;
    #line 3425 
    unsigned int tmp_170;
    #line 3425 
    unsigned int tmp_171;
    #line 3425 
    unsigned int tmp_203;
    #line 3425 
    unsigned int tmp_204;
    #line 3425 
    unsigned int tmp_172;
    #line 3425 
    unsigned int tmp_173;
    #line 3425 
    unsigned int tmp_205;
    #line 3425 
    unsigned int tmp_217;
    #line 3425 
    if (tx_queue_size > 1U) {
      #line 3425 
      if (((unsigned long long)tx_queue_size & 9223372036854775808ULL) == 0ULL) {
        #line 3425 
        if (((unsigned long long)tx_queue_size & 4611686018427387904ULL) == 0ULL) {
          #line 3425 
          if (((unsigned long long)tx_queue_size & 2305843009213693952ULL) == 0ULL) {
            #line 3425 
            if (((unsigned long long)tx_queue_size & 1152921504606846976ULL) == 0ULL) {
              #line 3425 
              if (((unsigned long long)tx_queue_size & 576460752303423488ULL) == 0ULL) {
                #line 3425 
                if (((unsigned long long)tx_queue_size & 288230376151711744ULL) == 0ULL) {
                  #line 3425 
                  if (((unsigned long long)tx_queue_size & 144115188075855872ULL) == 0ULL) {
                    #line 3425 
                    if (((unsigned long long)tx_queue_size & 72057594037927936ULL) == 0ULL) {
                      #line 3425 
                      if (((unsigned long long)tx_queue_size & 36028797018963968ULL) == 0ULL) {
                        #line 3425 
                        if (((unsigned long long)tx_queue_size & 18014398509481984ULL) == 0ULL) {
                          #line 3425 
                          if (((unsigned long long)tx_queue_size & 9007199254740992ULL) == 0ULL) {
                            #line 3425 
                            if (((unsigned long long)tx_queue_size & 4503599627370496ULL) == 0ULL) {
                              #line 3425 
                              if (((unsigned long long)tx_queue_size & 2251799813685248ULL) == 0ULL) {
                                #line 3425 
                                if (((unsigned long long)tx_queue_size & 1125899906842624ULL) == 0ULL) {
                                  #line 3425 
                                  if (((unsigned long long)tx_queue_size & 562949953421312ULL) == 0ULL) {
                                    #line 3425 
                                    if (((unsigned long long)tx_queue_size & 281474976710656ULL) == 0ULL) {
                                      #line 3425 
                                      if (((unsigned long long)tx_queue_size & 140737488355328ULL) == 0ULL) {
                                        #line 3425 
                                        if (((unsigned long long)tx_queue_size & 70368744177664ULL) == 0ULL) {
                                          #line 3425 
                                          if (((unsigned long long)tx_queue_size & 35184372088832ULL) == 0ULL) {
                                            #line 3425 
                                            if (((unsigned long long)tx_queue_size & 17592186044416ULL) == 0ULL) {
                                              #line 3425 
                                              if (((unsigned long long)tx_queue_size & 8796093022208ULL) == 0ULL) {
                                                #line 3425 
                                                if (((unsigned long long)tx_queue_size & 4398046511104ULL) == 0ULL) {
                                                  #line 3425 
                                                  if (((unsigned long long)tx_queue_size & 2199023255552ULL) == 0ULL) {
                                                    #line 3425 
                                                    if (((unsigned long long)tx_queue_size & 1099511627776ULL) == 0ULL) {
                                                      #line 3425 
                                                      if (((unsigned long long)tx_queue_size & 549755813888ULL) == 0ULL) {
                                                        #line 3425 
                                                        if (((unsigned long long)tx_queue_size & 274877906944ULL) == 0ULL) {
                                                          #line 3425 
                                                          if (((unsigned long long)tx_queue_size & 137438953472ULL) == 0ULL) {
                                                            #line 3425 
                                                            if (((unsigned long long)tx_queue_size & 68719476736ULL) == 0ULL) {
                                                              #line 3425 
                                                              if (((unsigned long long)tx_queue_size & 34359738368ULL) == 0ULL) {
                                                                #line 3425 
                                                                if (((unsigned long long)tx_queue_size & 17179869184ULL) == 0ULL) {
                                                                  #line 3425 
                                                                  if (
                                                                    ((unsigned long long)tx_queue_size & 8589934592ULL) == 0ULL) {
                                                                    #line 3425 
                                                                    if (
                                                                    ((unsigned long long)tx_queue_size & 4294967296ULL) == 0ULL) {
                                                                    #line 3425 
                                                                    if (
                                                                    ((unsigned long long)tx_queue_size & 2147483648ULL) == 0ULL) {
                                                                    #line 3425 
                                                                    if (
                                                                    ((unsigned long long)tx_queue_size & 1073741824ULL) == 0ULL) {
                                                                    #line 3425 
                                                                    if (
                                                                    ((unsigned long long)tx_queue_size & 536870912ULL) == 0ULL) {
                                                                    #line 3425 
                                                                    if (
                                                                    ((unsigned long long)tx_queue_size & 268435456ULL) == 0ULL) {
                                                                    #line 3425 
                                                                    if (
                                                                    ((unsigned long long)tx_queue_size & 134217728ULL) == 0ULL) {
                                                                    #line 3425 
                                                                    if (
                                                                    ((unsigned long long)tx_queue_size & 67108864ULL) == 0ULL) {
                                                                    #line 3425 
                                                                    if (
                                                                    ((unsigned long long)tx_queue_size & 33554432ULL) == 0ULL) {
                                                                    #line 3425 
                                                                    if (
                                                                    ((unsigned long long)tx_queue_size & 16777216ULL) == 0ULL) {
                                                                    #line 3425 
                                                                    if (
                                                                    ((unsigned long long)tx_queue_size & 8388608ULL) == 0ULL) {
                                                                    #line 3425 
                                                                    if (
                                                                    ((unsigned long long)tx_queue_size & 4194304ULL) == 0ULL) {
                                                                    #line 3425 
                                                                    if (
                                                                    ((unsigned long long)tx_queue_size & 2097152ULL) == 0ULL) {
                                                                    #line 3425 
                                                                    if (
                                                                    ((unsigned long long)tx_queue_size & 1048576ULL) == 0ULL) {
                                                                    #line 3425 
                                                                    if (
                                                                    ((unsigned long long)tx_queue_size & 524288ULL) == 0ULL) {
                                                                    #line 3425 
                                                                    if (
                                                                    ((unsigned long long)tx_queue_size & 262144ULL) == 0ULL) {
                                                                    #line 3425 
                                                                    if (
                                                                    ((unsigned long long)tx_queue_size & 131072ULL) == 0ULL) {
                                                                    #line 3425 
                                                                    if (
                                                                    ((unsigned long long)tx_queue_size & 65536ULL) == 0ULL) {
                                                                    #line 3425 
                                                                    if (
                                                                    ((unsigned long long)tx_queue_size & 32768ULL) == 0ULL) {
                                                                    #line 3425 
                                                                    if (
                                                                    ((unsigned long long)tx_queue_size & 16384ULL) == 0ULL) {
                                                                    #line 3425 
                                                                    if (
                                                                    ((unsigned long long)tx_queue_size & 8192ULL) == 0ULL) {
                                                                    #line 3425 
                                                                    if (
                                                                    ((unsigned long long)tx_queue_size & 4096ULL) == 0ULL) {
                                                                    #line 3425 
                                                                    if (
                                                                    ((unsigned long long)tx_queue_size & 2048ULL) == 0ULL) {
                                                                    #line 3425 
                                                                    if (
                                                                    ((unsigned long long)tx_queue_size & 1024ULL) == 0ULL) {
                                                                    #line 3425 
                                                                    if (
                                                                    ((unsigned long long)tx_queue_size & 512ULL) == 0ULL) {
                                                                    #line 3425 
                                                                    if (
                                                                    ((unsigned long long)tx_queue_size & 256ULL) == 0ULL) {
                                                                    #line 3425 
                                                                    if (
                                                                    ((unsigned long long)tx_queue_size & 128ULL) == 0ULL) {
                                                                    #line 3425 
                                                                    if (
                                                                    ((unsigned long long)tx_queue_size & 64ULL) == 0ULL) {
                                                                    #line 3425 
                                                                    if (
                                                                    ((unsigned long long)tx_queue_size & 32ULL) == 0ULL) {
                                                                    #line 3425 
                                                                    if (
                                                                    ((unsigned long long)tx_queue_size & 16ULL) == 0ULL) {
                                                                    #line 3425 
                                                                    if (
                                                                    ((unsigned long long)tx_queue_size & 8ULL) == 0ULL) {
                                                                    #line 3425 
                                                                    if (
                                                                    ((unsigned long long)tx_queue_size & 4ULL) != 0ULL) 
                                                                    #line 3425 
                                                                    tmp_155 = 4U; else 
                                                                    #line 3425 
                                                                    tmp_155 = 2U;
                                                                    #line 3425 
                                                                    tmp_156 = tmp_155;
                                                                    }
                                                                    else 
                                                                    #line 3425 
                                                                    tmp_156 = 8U;
                                                                    #line 3425 
                                                                    tmp_157 = tmp_156;
                                                                    }
                                                                    else 
                                                                    #line 3425 
                                                                    tmp_157 = 16U;
                                                                    #line 3425 
                                                                    tmp_158 = tmp_157;
                                                                    }
                                                                    else 
                                                                    #line 3425 
                                                                    tmp_158 = 32U;
                                                                    #line 3425 
                                                                    tmp_159 = tmp_158;
                                                                    }
                                                                    else 
                                                                    #line 3425 
                                                                    tmp_159 = 64U;
                                                                    #line 3425 
                                                                    tmp_160 = tmp_159;
                                                                    }
                                                                    else 
                                                                    #line 3425 
                                                                    tmp_160 = 128U;
                                                                    #line 3425 
                                                                    tmp_161 = tmp_160;
                                                                    }
                                                                    else 
                                                                    #line 3425 
                                                                    tmp_161 = 256U;
                                                                    #line 3425 
                                                                    tmp_162 = tmp_161;
                                                                    }
                                                                    else 
                                                                    #line 3425 
                                                                    tmp_162 = 512U;
                                                                    #line 3425 
                                                                    tmp_163 = tmp_162;
                                                                    }
                                                                    else 
                                                                    #line 3425 
                                                                    tmp_163 = 1024U;
                                                                    #line 3425 
                                                                    tmp_164 = tmp_163;
                                                                    }
                                                                    else 
                                                                    #line 3425 
                                                                    tmp_164 = 2048U;
                                                                    #line 3425 
                                                                    tmp_165 = tmp_164;
                                                                    }
                                                                    else 
                                                                    #line 3425 
                                                                    tmp_165 = 4096U;
                                                                    #line 3425 
                                                                    tmp_166 = tmp_165;
                                                                    }
                                                                    else 
                                                                    #line 3425 
                                                                    tmp_166 = 8192U;
                                                                    #line 3425 
                                                                    tmp_167 = tmp_166;
                                                                    }
                                                                    else 
                                                                    #line 3425 
                                                                    tmp_167 = 16384U;
                                                                    #line 3425 
                                                                    tmp_168 = tmp_167;
                                                                    }
                                                                    else 
                                                                    #line 3425 
                                                                    tmp_168 = 32768U;
                                                                    #line 3425 
                                                                    tmp_169 = tmp_168;
                                                                    }
                                                                    else 
                                                                    #line 3425 
                                                                    tmp_169 = 65536U;
                                                                    #line 3425 
                                                                    tmp_170 = tmp_169;
                                                                    }
                                                                    else 
                                                                    #line 3425 
                                                                    tmp_170 = 131072U;
                                                                    #line 3425 
                                                                    tmp_171 = tmp_170;
                                                                    }
                                                                    else 
                                                                    #line 3425 
                                                                    tmp_171 = 262144U;
                                                                    #line 3425 
                                                                    tmp_172 = tmp_171;
                                                                    }
                                                                    else 
                                                                    #line 3425 
                                                                    tmp_172 = 524288U;
                                                                    #line 3425 
                                                                    tmp_173 = tmp_172;
                                                                    }
                                                                    else 
                                                                    #line 3425 
                                                                    tmp_173 = 1048576U;
                                                                    #line 3425 
                                                                    tmp_174 = tmp_173;
                                                                    }
                                                                    else 
                                                                    #line 3425 
                                                                    tmp_174 = 2097152U;
                                                                    #line 3425 
                                                                    tmp_175 = tmp_174;
                                                                    }
                                                                    else 
                                                                    #line 3425 
                                                                    tmp_175 = 4194304U;
                                                                    #line 3425 
                                                                    tmp_176 = tmp_175;
                                                                    }
                                                                    else 
                                                                    #line 3425 
                                                                    tmp_176 = 8388608U;
                                                                    #line 3425 
                                                                    tmp_177 = tmp_176;
                                                                    }
                                                                    else 
                                                                    #line 3425 
                                                                    tmp_177 = 16777216U;
                                                                    #line 3425 
                                                                    tmp_178 = tmp_177;
                                                                    }
                                                                    else 
                                                                    #line 3425 
                                                                    tmp_178 = 33554432U;
                                                                    #line 3425 
                                                                    tmp_179 = tmp_178;
                                                                    }
                                                                    else 
                                                                    #line 3425 
                                                                    tmp_179 = 67108864U;
                                                                    #line 3425 
                                                                    tmp_180 = tmp_179;
                                                                    }
                                                                    else 
                                                                    #line 3425 
                                                                    tmp_180 = 134217728U;
                                                                    #line 3425 
                                                                    tmp_181 = tmp_180;
                                                                    }
                                                                    else 
                                                                    #line 3425 
                                                                    tmp_181 = 268435456U;
                                                                    #line 3425 
                                                                    tmp_182 = tmp_181;
                                                                    }
                                                                    else 
                                                                    #line 3425 
                                                                    tmp_182 = 536870912U;
                                                                    #line 3425 
                                                                    tmp_183 = tmp_182;
                                                                    }
                                                                    else 
                                                                    #line 3425 
                                                                    tmp_183 = 1073741824U;
                                                                    #line 3425 
                                                                    tmp_184 = tmp_183;
                                                                    }
                                                                    else 
                                                                    #line 3425 
                                                                    tmp_184 = 2147483648U;
                                                                    #line 3425 
                                                                    tmp_185 = tmp_184;
                                                                    }
                                                                    else 
                                                                    #line 3425 
                                                                    tmp_185 = 0U;
                                                                    #line 3425 
                                                                    tmp_186 = tmp_185;
                                                                  }
                                                                  else 
                                                                    #line 3425 
                                                                    tmp_186 = 0U;
                                                                  #line 3425 
                                                                  tmp_187 = tmp_186;
                                                                }
                                                                else 
                                                                  #line 3425 
                                                                  tmp_187 = 0U;
                                                                #line 3425 
                                                                tmp_188 = tmp_187;
                                                              }
                                                              else 
                                                                   #line 3425 
                                                                   tmp_188 = 0U;
                                                              #line 3425 
                                                              tmp_189 = tmp_188;
                                                            }
                                                            else 
                                                                 #line 3425 
                                                                 tmp_189 = 0U;
                                                            #line 3425 
                                                            tmp_190 = tmp_189;
                                                          }
                                                          else 
                                                               #line 3425 
                                                               tmp_190 = 0U;
                                                          #line 3425 
                                                          tmp_191 = tmp_190;
                                                        }
                                                        else 
                                                             #line 3425 
                                                             tmp_191 = 0U;
                                                        #line 3425 
                                                        tmp_192 = tmp_191;
                                                      }
                                                      else 
                                                           #line 3425 
                                                           tmp_192 = 0U;
                                                      #line 3425 
                                                      tmp_193 = tmp_192;
                                                    }
                                                    else 
                                                         #line 3425 
                                                         tmp_193 = 0U;
                                                    #line 3425 
                                                    tmp_194 = tmp_193;
                                                  }
                                                  else 
                                                       #line 3425 
                                                       tmp_194 = 0U;
                                                  #line 3425 
                                                  tmp_195 = tmp_194;
                                                }
                                                else 
                                                     #line 3425 
                                                     tmp_195 = 0U;
                                                #line 3425 
                                                tmp_196 = tmp_195;
                                              }
                                              else 
                                                   #line 3425 
                                                   tmp_196 = 0U;
                                              #line 3425 
                                              tmp_197 = tmp_196;
                                            }
                                            else 
                                                 #line 3425 
                                                 tmp_197 = 0U;
                                            #line 3425 
                                            tmp_198 = tmp_197;
                                          }
                                          else 
                                               #line 3425 
                                               tmp_198 = 0U;
                                          #line 3425 
                                          tmp_199 = tmp_198;
                                        }
                                        else 
                                             #line 3425 
                                             tmp_199 = 0U;
                                        #line 3425 
                                        tmp_200 = tmp_199;
                                      }
                                      else 
                                           #line 3425 
                                           tmp_200 = 0U;
                                      #line 3425 
                                      tmp_201 = tmp_200;
                                    }
                                    else 
                                         #line 3425 
                                         tmp_201 = 0U;
                                    #line 3425 
                                    tmp_202 = tmp_201;
                                  }
                                  else 
                                       #line 3425 
                                       tmp_202 = 0U;
                                  #line 3425 
                                  tmp_203 = tmp_202;
                                }
                                else 
                                     #line 3425 
                                     tmp_203 = 0U;
                                #line 3425 
                                tmp_204 = tmp_203;
                              }
                              else 
                                   #line 3425 
                                   tmp_204 = 0U;
                              #line 3425 
                              tmp_205 = tmp_204;
                            }
                            else 
                                 #line 3425 
                                 tmp_205 = 0U;
                            #line 3425 
                            tmp_206 = tmp_205;
                          }
                          else 
                               #line 3425 
                               tmp_206 = 0U;
                          #line 3425 
                          tmp_207 = tmp_206;
                        }
                        else 
                             #line 3425 
                             tmp_207 = 0U;
                        #line 3425 
                        tmp_208 = tmp_207;
                      }
                      else 
                           #line 3425 
                           tmp_208 = 0U;
                      #line 3425 
                      tmp_209 = tmp_208;
                    }
                    else 
                         #line 3425 
                         tmp_209 = 0U;
                    #line 3425 
                    tmp_210 = tmp_209;
                  }
                  else 
                       #line 3425 
                       tmp_210 = 0U;
                  #line 3425 
                  tmp_211 = tmp_210;
                }
                else 
                     #line 3425 
                     tmp_211 = 0U;
                #line 3425 
                tmp_212 = tmp_211;
              }
              else 
                   #line 3425 
                   tmp_212 = 0U;
              #line 3425 
              tmp_213 = tmp_212;
            }
            else 
                 #line 3425 
                 tmp_213 = 0U;
            #line 3425 
            tmp_214 = tmp_213;
          }
          else 
               #line 3425 
               tmp_214 = 0U;
          #line 3425 
          tmp_215 = tmp_214;
        }
        else 
             #line 3425 
             tmp_215 = 0U;
        #line 3425 
        tmp_216 = tmp_215;
      }
      else 
           #line 3425 
           tmp_216 = 0U;
      #line 3425 
      tmp_217 = tmp_216;
    }
    else 
         #line 3425 
         tmp_217 = 1U;
    #line 3425 
    tx_queue_size = tmp_217;
  }
  else {
    #line 3425 
    tx_queue_size = (unsigned int)__rounddown_pow_of_two((unsigned long)tx_queue_size);
  }
  #line 3426 
  if (0 != 0) {
    #line 3426 
    unsigned int tmp_270;
    #line 3426 
    unsigned int tmp_238;
    #line 3426 
    unsigned int tmp_239;
    #line 3426 
    unsigned int tmp_271;
    #line 3426 
    unsigned int tmp_272;
    #line 3426 
    unsigned int tmp_240;
    #line 3426 
    unsigned int tmp_241;
    #line 3426 
    unsigned int tmp_273;
    #line 3426 
    unsigned int tmp_274;
    #line 3426 
    unsigned int tmp_242;
    #line 3426 
    unsigned int tmp_243;
    #line 3426 
    unsigned int tmp_275;
    #line 3426 
    unsigned int tmp_276;
    #line 3426 
    unsigned int tmp_244;
    #line 3426 
    unsigned int tmp_245;
    #line 3426 
    unsigned int tmp_277;
    #line 3426 
    unsigned int tmp_278;
    #line 3426 
    unsigned int tmp_246;
    #line 3426 
    unsigned int tmp_247;
    #line 3426 
    unsigned int tmp_279;
    #line 3426 
    unsigned int tmp_280;
    #line 3426 
    unsigned int tmp_248;
    #line 3426 
    unsigned int tmp_249;
    #line 3426 
    unsigned int tmp_250;
    #line 3426 
    unsigned int tmp_219;
    #line 3426 
    unsigned int tmp_251;
    #line 3426 
    unsigned int tmp_252;
    #line 3426 
    unsigned int tmp_220;
    #line 3426 
    unsigned int tmp_221;
    #line 3426 
    unsigned int tmp_253;
    #line 3426 
    unsigned int tmp_254;
    #line 3426 
    unsigned int tmp_222;
    #line 3426 
    unsigned int tmp_223;
    #line 3426 
    unsigned int tmp_255;
    #line 3426 
    unsigned int tmp_256;
    #line 3426 
    unsigned int tmp_224;
    #line 3426 
    unsigned int tmp_225;
    #line 3426 
    unsigned int tmp_257;
    #line 3426 
    unsigned int tmp_258;
    #line 3426 
    unsigned int tmp_226;
    #line 3426 
    unsigned int tmp_227;
    #line 3426 
    unsigned int tmp_259;
    #line 3426 
    unsigned int tmp_260;
    #line 3426 
    unsigned int tmp_228;
    #line 3426 
    unsigned int tmp_229;
    #line 3426 
    unsigned int tmp_261;
    #line 3426 
    unsigned int tmp_262;
    #line 3426 
    unsigned int tmp_230;
    #line 3426 
    unsigned int tmp_231;
    #line 3426 
    unsigned int tmp_263;
    #line 3426 
    unsigned int tmp_264;
    #line 3426 
    unsigned int tmp_232;
    #line 3426 
    unsigned int tmp_233;
    #line 3426 
    unsigned int tmp_265;
    #line 3426 
    unsigned int tmp_266;
    #line 3426 
    unsigned int tmp_234;
    #line 3426 
    unsigned int tmp_235;
    #line 3426 
    unsigned int tmp_267;
    #line 3426 
    unsigned int tmp_268;
    #line 3426 
    unsigned int tmp_236;
    #line 3426 
    unsigned int tmp_237;
    #line 3426 
    unsigned int tmp_269;
    #line 3426 
    unsigned int tmp_281;
    #line 3426 
    if (rx_queue_size > 1U) {
      #line 3426 
      if (((unsigned long long)rx_queue_size & 9223372036854775808ULL) == 0ULL) {
        #line 3426 
        if (((unsigned long long)rx_queue_size & 4611686018427387904ULL) == 0ULL) {
          #line 3426 
          if (((unsigned long long)rx_queue_size & 2305843009213693952ULL) == 0ULL) {
            #line 3426 
            if (((unsigned long long)rx_queue_size & 1152921504606846976ULL) == 0ULL) {
              #line 3426 
              if (((unsigned long long)rx_queue_size & 576460752303423488ULL) == 0ULL) {
                #line 3426 
                if (((unsigned long long)rx_queue_size & 288230376151711744ULL) == 0ULL) {
                  #line 3426 
                  if (((unsigned long long)rx_queue_size & 144115188075855872ULL) == 0ULL) {
                    #line 3426 
                    if (((unsigned long long)rx_queue_size & 72057594037927936ULL) == 0ULL) {
                      #line 3426 
                      if (((unsigned long long)rx_queue_size & 36028797018963968ULL) == 0ULL) {
                        #line 3426 
                        if (((unsigned long long)rx_queue_size & 18014398509481984ULL) == 0ULL) {
                          #line 3426 
                          if (((unsigned long long)rx_queue_size & 9007199254740992ULL) == 0ULL) {
                            #line 3426 
                            if (((unsigned long long)rx_queue_size & 4503599627370496ULL) == 0ULL) {
                              #line 3426 
                              if (((unsigned long long)rx_queue_size & 2251799813685248ULL) == 0ULL) {
                                #line 3426 
                                if (((unsigned long long)rx_queue_size & 1125899906842624ULL) == 0ULL) {
                                  #line 3426 
                                  if (((unsigned long long)rx_queue_size & 562949953421312ULL) == 0ULL) {
                                    #line 3426 
                                    if (((unsigned long long)rx_queue_size & 281474976710656ULL) == 0ULL) {
                                      #line 3426 
                                      if (((unsigned long long)rx_queue_size & 140737488355328ULL) == 0ULL) {
                                        #line 3426 
                                        if (((unsigned long long)rx_queue_size & 70368744177664ULL) == 0ULL) {
                                          #line 3426 
                                          if (((unsigned long long)rx_queue_size & 35184372088832ULL) == 0ULL) {
                                            #line 3426 
                                            if (((unsigned long long)rx_queue_size & 17592186044416ULL) == 0ULL) {
                                              #line 3426 
                                              if (((unsigned long long)rx_queue_size & 8796093022208ULL) == 0ULL) {
                                                #line 3426 
                                                if (((unsigned long long)rx_queue_size & 4398046511104ULL) == 0ULL) {
                                                  #line 3426 
                                                  if (((unsigned long long)rx_queue_size & 2199023255552ULL) == 0ULL) {
                                                    #line 3426 
                                                    if (((unsigned long long)rx_queue_size & 1099511627776ULL) == 0ULL) {
                                                      #line 3426 
                                                      if (((unsigned long long)rx_queue_size & 549755813888ULL) == 0ULL) {
                                                        #line 3426 
                                                        if (((unsigned long long)rx_queue_size & 274877906944ULL) == 0ULL) {
                                                          #line 3426 
                                                          if (((unsigned long long)rx_queue_size & 137438953472ULL) == 0ULL) {
                                                            #line 3426 
                                                            if (((unsigned long long)rx_queue_size & 68719476736ULL) == 0ULL) {
                                                              #line 3426 
                                                              if (((unsigned long long)rx_queue_size & 34359738368ULL) == 0ULL) {
                                                                #line 3426 
                                                                if (((unsigned long long)rx_queue_size & 17179869184ULL) == 0ULL) {
                                                                  #line 3426 
                                                                  if (
                                                                    ((unsigned long long)rx_queue_size & 8589934592ULL) == 0ULL) {
                                                                    #line 3426 
                                                                    if (
                                                                    ((unsigned long long)rx_queue_size & 4294967296ULL) == 0ULL) {
                                                                    #line 3426 
                                                                    if (
                                                                    ((unsigned long long)rx_queue_size & 2147483648ULL) == 0ULL) {
                                                                    #line 3426 
                                                                    if (
                                                                    ((unsigned long long)rx_queue_size & 1073741824ULL) == 0ULL) {
                                                                    #line 3426 
                                                                    if (
                                                                    ((unsigned long long)rx_queue_size & 536870912ULL) == 0ULL) {
                                                                    #line 3426 
                                                                    if (
                                                                    ((unsigned long long)rx_queue_size & 268435456ULL) == 0ULL) {
                                                                    #line 3426 
                                                                    if (
                                                                    ((unsigned long long)rx_queue_size & 134217728ULL) == 0ULL) {
                                                                    #line 3426 
                                                                    if (
                                                                    ((unsigned long long)rx_queue_size & 67108864ULL) == 0ULL) {
                                                                    #line 3426 
                                                                    if (
                                                                    ((unsigned long long)rx_queue_size & 33554432ULL) == 0ULL) {
                                                                    #line 3426 
                                                                    if (
                                                                    ((unsigned long long)rx_queue_size & 16777216ULL) == 0ULL) {
                                                                    #line 3426 
                                                                    if (
                                                                    ((unsigned long long)rx_queue_size & 8388608ULL) == 0ULL) {
                                                                    #line 3426 
                                                                    if (
                                                                    ((unsigned long long)rx_queue_size & 4194304ULL) == 0ULL) {
                                                                    #line 3426 
                                                                    if (
                                                                    ((unsigned long long)rx_queue_size & 2097152ULL) == 0ULL) {
                                                                    #line 3426 
                                                                    if (
                                                                    ((unsigned long long)rx_queue_size & 1048576ULL) == 0ULL) {
                                                                    #line 3426 
                                                                    if (
                                                                    ((unsigned long long)rx_queue_size & 524288ULL) == 0ULL) {
                                                                    #line 3426 
                                                                    if (
                                                                    ((unsigned long long)rx_queue_size & 262144ULL) == 0ULL) {
                                                                    #line 3426 
                                                                    if (
                                                                    ((unsigned long long)rx_queue_size & 131072ULL) == 0ULL) {
                                                                    #line 3426 
                                                                    if (
                                                                    ((unsigned long long)rx_queue_size & 65536ULL) == 0ULL) {
                                                                    #line 3426 
                                                                    if (
                                                                    ((unsigned long long)rx_queue_size & 32768ULL) == 0ULL) {
                                                                    #line 3426 
                                                                    if (
                                                                    ((unsigned long long)rx_queue_size & 16384ULL) == 0ULL) {
                                                                    #line 3426 
                                                                    if (
                                                                    ((unsigned long long)rx_queue_size & 8192ULL) == 0ULL) {
                                                                    #line 3426 
                                                                    if (
                                                                    ((unsigned long long)rx_queue_size & 4096ULL) == 0ULL) {
                                                                    #line 3426 
                                                                    if (
                                                                    ((unsigned long long)rx_queue_size & 2048ULL) == 0ULL) {
                                                                    #line 3426 
                                                                    if (
                                                                    ((unsigned long long)rx_queue_size & 1024ULL) == 0ULL) {
                                                                    #line 3426 
                                                                    if (
                                                                    ((unsigned long long)rx_queue_size & 512ULL) == 0ULL) {
                                                                    #line 3426 
                                                                    if (
                                                                    ((unsigned long long)rx_queue_size & 256ULL) == 0ULL) {
                                                                    #line 3426 
                                                                    if (
                                                                    ((unsigned long long)rx_queue_size & 128ULL) == 0ULL) {
                                                                    #line 3426 
                                                                    if (
                                                                    ((unsigned long long)rx_queue_size & 64ULL) == 0ULL) {
                                                                    #line 3426 
                                                                    if (
                                                                    ((unsigned long long)rx_queue_size & 32ULL) == 0ULL) {
                                                                    #line 3426 
                                                                    if (
                                                                    ((unsigned long long)rx_queue_size & 16ULL) == 0ULL) {
                                                                    #line 3426 
                                                                    if (
                                                                    ((unsigned long long)rx_queue_size & 8ULL) == 0ULL) {
                                                                    #line 3426 
                                                                    if (
                                                                    ((unsigned long long)rx_queue_size & 4ULL) != 0ULL) 
                                                                    #line 3426 
                                                                    tmp_219 = 4U; else 
                                                                    #line 3426 
                                                                    tmp_219 = 2U;
                                                                    #line 3426 
                                                                    tmp_220 = tmp_219;
                                                                    }
                                                                    else 
                                                                    #line 3426 
                                                                    tmp_220 = 8U;
                                                                    #line 3426 
                                                                    tmp_221 = tmp_220;
                                                                    }
                                                                    else 
                                                                    #line 3426 
                                                                    tmp_221 = 16U;
                                                                    #line 3426 
                                                                    tmp_222 = tmp_221;
                                                                    }
                                                                    else 
                                                                    #line 3426 
                                                                    tmp_222 = 32U;
                                                                    #line 3426 
                                                                    tmp_223 = tmp_222;
                                                                    }
                                                                    else 
                                                                    #line 3426 
                                                                    tmp_223 = 64U;
                                                                    #line 3426 
                                                                    tmp_224 = tmp_223;
                                                                    }
                                                                    else 
                                                                    #line 3426 
                                                                    tmp_224 = 128U;
                                                                    #line 3426 
                                                                    tmp_225 = tmp_224;
                                                                    }
                                                                    else 
                                                                    #line 3426 
                                                                    tmp_225 = 256U;
                                                                    #line 3426 
                                                                    tmp_226 = tmp_225;
                                                                    }
                                                                    else 
                                                                    #line 3426 
                                                                    tmp_226 = 512U;
                                                                    #line 3426 
                                                                    tmp_227 = tmp_226;
                                                                    }
                                                                    else 
                                                                    #line 3426 
                                                                    tmp_227 = 1024U;
                                                                    #line 3426 
                                                                    tmp_228 = tmp_227;
                                                                    }
                                                                    else 
                                                                    #line 3426 
                                                                    tmp_228 = 2048U;
                                                                    #line 3426 
                                                                    tmp_229 = tmp_228;
                                                                    }
                                                                    else 
                                                                    #line 3426 
                                                                    tmp_229 = 4096U;
                                                                    #line 3426 
                                                                    tmp_230 = tmp_229;
                                                                    }
                                                                    else 
                                                                    #line 3426 
                                                                    tmp_230 = 8192U;
                                                                    #line 3426 
                                                                    tmp_231 = tmp_230;
                                                                    }
                                                                    else 
                                                                    #line 3426 
                                                                    tmp_231 = 16384U;
                                                                    #line 3426 
                                                                    tmp_232 = tmp_231;
                                                                    }
                                                                    else 
                                                                    #line 3426 
                                                                    tmp_232 = 32768U;
                                                                    #line 3426 
                                                                    tmp_233 = tmp_232;
                                                                    }
                                                                    else 
                                                                    #line 3426 
                                                                    tmp_233 = 65536U;
                                                                    #line 3426 
                                                                    tmp_234 = tmp_233;
                                                                    }
                                                                    else 
                                                                    #line 3426 
                                                                    tmp_234 = 131072U;
                                                                    #line 3426 
                                                                    tmp_235 = tmp_234;
                                                                    }
                                                                    else 
                                                                    #line 3426 
                                                                    tmp_235 = 262144U;
                                                                    #line 3426 
                                                                    tmp_236 = tmp_235;
                                                                    }
                                                                    else 
                                                                    #line 3426 
                                                                    tmp_236 = 524288U;
                                                                    #line 3426 
                                                                    tmp_237 = tmp_236;
                                                                    }
                                                                    else 
                                                                    #line 3426 
                                                                    tmp_237 = 1048576U;
                                                                    #line 3426 
                                                                    tmp_238 = tmp_237;
                                                                    }
                                                                    else 
                                                                    #line 3426 
                                                                    tmp_238 = 2097152U;
                                                                    #line 3426 
                                                                    tmp_239 = tmp_238;
                                                                    }
                                                                    else 
                                                                    #line 3426 
                                                                    tmp_239 = 4194304U;
                                                                    #line 3426 
                                                                    tmp_240 = tmp_239;
                                                                    }
                                                                    else 
                                                                    #line 3426 
                                                                    tmp_240 = 8388608U;
                                                                    #line 3426 
                                                                    tmp_241 = tmp_240;
                                                                    }
                                                                    else 
                                                                    #line 3426 
                                                                    tmp_241 = 16777216U;
                                                                    #line 3426 
                                                                    tmp_242 = tmp_241;
                                                                    }
                                                                    else 
                                                                    #line 3426 
                                                                    tmp_242 = 33554432U;
                                                                    #line 3426 
                                                                    tmp_243 = tmp_242;
                                                                    }
                                                                    else 
                                                                    #line 3426 
                                                                    tmp_243 = 67108864U;
                                                                    #line 3426 
                                                                    tmp_244 = tmp_243;
                                                                    }
                                                                    else 
                                                                    #line 3426 
                                                                    tmp_244 = 134217728U;
                                                                    #line 3426 
                                                                    tmp_245 = tmp_244;
                                                                    }
                                                                    else 
                                                                    #line 3426 
                                                                    tmp_245 = 268435456U;
                                                                    #line 3426 
                                                                    tmp_246 = tmp_245;
                                                                    }
                                                                    else 
                                                                    #line 3426 
                                                                    tmp_246 = 536870912U;
                                                                    #line 3426 
                                                                    tmp_247 = tmp_246;
                                                                    }
                                                                    else 
                                                                    #line 3426 
                                                                    tmp_247 = 1073741824U;
                                                                    #line 3426 
                                                                    tmp_248 = tmp_247;
                                                                    }
                                                                    else 
                                                                    #line 3426 
                                                                    tmp_248 = 2147483648U;
                                                                    #line 3426 
                                                                    tmp_249 = tmp_248;
                                                                    }
                                                                    else 
                                                                    #line 3426 
                                                                    tmp_249 = 0U;
                                                                    #line 3426 
                                                                    tmp_250 = tmp_249;
                                                                  }
                                                                  else 
                                                                    #line 3426 
                                                                    tmp_250 = 0U;
                                                                  #line 3426 
                                                                  tmp_251 = tmp_250;
                                                                }
                                                                else 
                                                                  #line 3426 
                                                                  tmp_251 = 0U;
                                                                #line 3426 
                                                                tmp_252 = tmp_251;
                                                              }
                                                              else 
                                                                   #line 3426 
                                                                   tmp_252 = 0U;
                                                              #line 3426 
                                                              tmp_253 = tmp_252;
                                                            }
                                                            else 
                                                                 #line 3426 
                                                                 tmp_253 = 0U;
                                                            #line 3426 
                                                            tmp_254 = tmp_253;
                                                          }
                                                          else 
                                                               #line 3426 
                                                               tmp_254 = 0U;
                                                          #line 3426 
                                                          tmp_255 = tmp_254;
                                                        }
                                                        else 
                                                             #line 3426 
                                                             tmp_255 = 0U;
                                                        #line 3426 
                                                        tmp_256 = tmp_255;
                                                      }
                                                      else 
                                                           #line 3426 
                                                           tmp_256 = 0U;
                                                      #line 3426 
                                                      tmp_257 = tmp_256;
                                                    }
                                                    else 
                                                         #line 3426 
                                                         tmp_257 = 0U;
                                                    #line 3426 
                                                    tmp_258 = tmp_257;
                                                  }
                                                  else 
                                                       #line 3426 
                                                       tmp_258 = 0U;
                                                  #line 3426 
                                                  tmp_259 = tmp_258;
                                                }
                                                else 
                                                     #line 3426 
                                                     tmp_259 = 0U;
                                                #line 3426 
                                                tmp_260 = tmp_259;
                                              }
                                              else 
                                                   #line 3426 
                                                   tmp_260 = 0U;
                                              #line 3426 
                                              tmp_261 = tmp_260;
                                            }
                                            else 
                                                 #line 3426 
                                                 tmp_261 = 0U;
                                            #line 3426 
                                            tmp_262 = tmp_261;
                                          }
                                          else 
                                               #line 3426 
                                               tmp_262 = 0U;
                                          #line 3426 
                                          tmp_263 = tmp_262;
                                        }
                                        else 
                                             #line 3426 
                                             tmp_263 = 0U;
                                        #line 3426 
                                        tmp_264 = tmp_263;
                                      }
                                      else 
                                           #line 3426 
                                           tmp_264 = 0U;
                                      #line 3426 
                                      tmp_265 = tmp_264;
                                    }
                                    else 
                                         #line 3426 
                                         tmp_265 = 0U;
                                    #line 3426 
                                    tmp_266 = tmp_265;
                                  }
                                  else 
                                       #line 3426 
                                       tmp_266 = 0U;
                                  #line 3426 
                                  tmp_267 = tmp_266;
                                }
                                else 
                                     #line 3426 
                                     tmp_267 = 0U;
                                #line 3426 
                                tmp_268 = tmp_267;
                              }
                              else 
                                   #line 3426 
                                   tmp_268 = 0U;
                              #line 3426 
                              tmp_269 = tmp_268;
                            }
                            else 
                                 #line 3426 
                                 tmp_269 = 0U;
                            #line 3426 
                            tmp_270 = tmp_269;
                          }
                          else 
                               #line 3426 
                               tmp_270 = 0U;
                          #line 3426 
                          tmp_271 = tmp_270;
                        }
                        else 
                             #line 3426 
                             tmp_271 = 0U;
                        #line 3426 
                        tmp_272 = tmp_271;
                      }
                      else 
                           #line 3426 
                           tmp_272 = 0U;
                      #line 3426 
                      tmp_273 = tmp_272;
                    }
                    else 
                         #line 3426 
                         tmp_273 = 0U;
                    #line 3426 
                    tmp_274 = tmp_273;
                  }
                  else 
                       #line 3426 
                       tmp_274 = 0U;
                  #line 3426 
                  tmp_275 = tmp_274;
                }
                else 
                     #line 3426 
                     tmp_275 = 0U;
                #line 3426 
                tmp_276 = tmp_275;
              }
              else 
                   #line 3426 
                   tmp_276 = 0U;
              #line 3426 
              tmp_277 = tmp_276;
            }
            else 
                 #line 3426 
                 tmp_277 = 0U;
            #line 3426 
            tmp_278 = tmp_277;
          }
          else 
               #line 3426 
               tmp_278 = 0U;
          #line 3426 
          tmp_279 = tmp_278;
        }
        else 
             #line 3426 
             tmp_279 = 0U;
        #line 3426 
        tmp_280 = tmp_279;
      }
      else 
           #line 3426 
           tmp_280 = 0U;
      #line 3426 
      tmp_281 = tmp_280;
    }
    else 
         #line 3426 
         tmp_281 = 1U;
    #line 3426 
    rx_queue_size = tmp_281;
  }
  else {
    #line 3426 
    rx_queue_size = (unsigned int)__rounddown_pow_of_two((unsigned long)rx_queue_size);
  }
  #line 3428 
  ctx->max_tx_queue_size = max_tx_queue_size;
  #line 3429 
  ctx->max_rx_queue_size = max_rx_queue_size;
  #line 3430 
  ctx->tx_queue_size = tx_queue_size;
  #line 3431 
  ctx->rx_queue_size = rx_queue_size;
  #line 3433 
  return 0;
}

#line 3446  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_netdev.c"
static int ena_probe(struct pci_dev *pdev, struct pci_device_id *ent)
{
  #line 3448 
  struct ena_com_dev_get_features_ctx get_feat_ctx;
  #line 3450 
  struct ena_llq_configurations llq_config;
  #line 3452 
  struct ena_adapter *adapter;
  #line 3453 
  struct net_device *netdev;
  #line 3454 
  int adapters_found;
  #line 3455 
  u32 max_num_io_queues;
  #line 3456 
  char *queue_type_str;
  #line 3457 
  bool wd_state;
  #line 3458 
  int bars;
  #line 3458 
  int rc;
  #line 3487 
  resource_size_t tmp_2;
  #line 3449 
  struct ena_calc_queue_size_ctx calc_queue_ctx = {.get_feat_ctx = (struct ena_com_dev_get_features_ctx *)0, .ena_dev = (struct ena_com_dev *)0, .pdev = (struct pci_dev *)0, .tx_queue_size = 0U, .rx_queue_size = 0U, .max_tx_queue_size = 0U, .max_rx_queue_size = 0U, .max_tx_sgl_size = (unsigned short)0, .max_rx_sgl_size = (unsigned short)0};
  #line 3451 
  struct ena_com_dev *ena_dev = (struct ena_com_dev *)0;
  {
    #line 3460 
    bool branch;
    #line 3460 
    struct _ddebug __UNIQUE_ID_ddebug619 = {.modname = (char *)"ena", .function = (char *)"ena_probe", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_netdev.c", .format = (char *)"%s\n", .lineno = (unsigned int)3460U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 3460 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug619.key.dd_key_false.key,(_Bool)0);
    #line 3460 
    if ((long)((long)((int)branch != 0)) != 0L) 
                                                #line 3460 
                                                __dynamic_dev_dbg(& __UNIQUE_ID_ddebug619,& pdev->dev,(char *)"%s\n",(char *)"ena_probe");
  }
  {
    #line 3462 
    bool __print_once;
    #line 3462 
    if (! __print_once) {
      #line 3462 
      __print_once = (_Bool)1;
      #line 3462 
      _dev_info(& pdev->dev,(char *)"%s",(char *)(& version));
    }
  }
  #line 3464 
  rc = pci_enable_device_mem(pdev);
  #line 3465 
  if (rc != 0) {
    #line 3466 
    _dev_err(& pdev->dev,(char *)"pci_enable_device_mem() failed!\n");
    #line 3467 
    return rc;
  }
  #line 3470 
  pci_set_master(pdev);
  #line 3472 
  ena_dev = (struct ena_com_dev *)cif_vzalloc(82496UL);
  #line 3473 
  if (ena_dev == (struct ena_com_dev *)0) {
    #line 3474 
    rc = -12;
    #line 3475 
    goto err_disable_device;
  }
  #line 3478 
  bars = pci_select_bars(pdev,512UL) & 5;
  #line 3479 
  rc = pci_request_selected_regions(pdev,bars,(char *)"ena");
  #line 3480 
  if (rc != 0) {
    #line 3481 
    _dev_err(& pdev->dev,(char *)"pci_request_selected_regions failed %d\n",rc);
    #line 3483 
    goto err_free_ena_dev;
  }
  #line 3487 
  if (pdev->resource[0].start != 0ULL || pdev->resource[0].end != pdev->resource[0].start) 
    #line 3487 
    tmp_2 = (pdev->resource[0].end - pdev->resource[0].start) + 1ULL; else 
                                                                    #line 3487 
                                                                    tmp_2 = 0ULL;
  #line 3486 
  ;
  #line 3486 
  ;
  #line 3486 
  ena_dev->reg_bar = (u8 *)devm_ioremap(& pdev->dev,pdev->resource[0].start,tmp_2);
  #line 3489 
  if (ena_dev->reg_bar == (u8 *)0U) {
    #line 3490 
    _dev_err(& pdev->dev,(char *)"failed to remap regs bar\n");
    #line 3491 
    rc = -14;
    #line 3492 
    goto err_free_region;
  }
  #line 3495 
  ena_dev->dmadev = (void *)(& pdev->dev);
  #line 3497 
  rc = ena_device_init(ena_dev,pdev,& get_feat_ctx,& wd_state);
  #line 3498 
  if (rc != 0) {
    #line 3499 
    _dev_err(& pdev->dev,(char *)"ena device init failed\n");
    #line 3500 
    if (rc == -62) 
                   #line 3501 
                   rc = -517;
    #line 3502 
    goto err_free_region;
  }
  #line 3505 
  set_default_llq_configurations(& llq_config);
  #line 3507 
  rc = ena_set_queues_placement_policy(pdev,ena_dev,& get_feat_ctx.llq,& llq_config);
  #line 3509 
  if (rc != 0) {
    #line 3510 
    _dev_err(& pdev->dev,(char *)"ena device init failed\n");
    #line 3511 
    goto err_device_destroy;
  }
  #line 3514 
  calc_queue_ctx.ena_dev = ena_dev;
  #line 3515 
  calc_queue_ctx.get_feat_ctx = & get_feat_ctx;
  #line 3516 
  calc_queue_ctx.pdev = pdev;
  #line 3521 
  ena_dev->intr_moder_tx_interval = 64U;
  #line 3522 
  ena_dev->intr_moder_rx_interval = 0U;
  #line 3523 
  ena_dev->intr_delay_resolution = (unsigned short)1U;
  #line 3524 
  max_num_io_queues = (unsigned int)ena_calc_max_io_queue_num(pdev,ena_dev,& get_feat_ctx);
  #line 3525 
  rc = ena_calc_io_queue_size(& calc_queue_ctx);
  #line 3526 
  if (rc != 0 || max_num_io_queues == 0U) {
    #line 3527 
    rc = -14;
    #line 3528 
    goto err_device_destroy;
  }
  #line 3532 
  netdev = cif_alloc_etherdev_mqs(320960,max_num_io_queues,max_num_io_queues);
  #line 3533 
  if (netdev == (struct net_device *)0) {
    #line 3534 
    _dev_err(& pdev->dev,(char *)"alloc_etherdev_mq failed\n");
    #line 3535 
    rc = -12;
    #line 3536 
    goto err_device_destroy;
  }
  #line 3539 
  netdev->dev.parent = & pdev->dev;
  #line 3541 
  adapter = (struct ena_adapter *)netdev_priv(netdev);
  #line 3542 
  pci_set_drvdata(pdev,(void *)adapter);
  #line 3544 
  adapter->ena_dev = ena_dev;
  #line 3545 
  adapter->netdev = netdev;
  #line 3546 
  adapter->pdev = pdev;
  #line 3548 
  ena_set_conf_feat_params(adapter,& get_feat_ctx);
  #line 3550 
  adapter->msg_enable = netif_msg_init(debug,1251);
  #line 3551 
  adapter->reset_reason = ENA_REGS_RESET_NORMAL;
  #line 3553 
  adapter->requested_tx_ring_size = calc_queue_ctx.tx_queue_size;
  #line 3554 
  adapter->requested_rx_ring_size = calc_queue_ctx.rx_queue_size;
  #line 3555 
  adapter->max_tx_ring_size = calc_queue_ctx.max_tx_queue_size;
  #line 3556 
  adapter->max_rx_ring_size = calc_queue_ctx.max_rx_queue_size;
  #line 3557 
  adapter->max_tx_sgl_size = calc_queue_ctx.max_tx_sgl_size;
  #line 3558 
  adapter->max_rx_sgl_size = calc_queue_ctx.max_rx_sgl_size;
  #line 3560 
  adapter->num_io_queues = max_num_io_queues;
  #line 3561 
  adapter->max_num_io_queues = max_num_io_queues;
  #line 3563 
  adapter->last_monitored_tx_qid = 0U;
  #line 3565 
  adapter->rx_copybreak = 256U;
  #line 3566 
  adapter->wd_state = wd_state;
  #line 3568 
  snprintf((char *)(& adapter->name),20UL,(char *)"ena_%d",adapters_found);
  #line 3570 
  rc = ena_com_init_interrupt_moderation(adapter->ena_dev);
  #line 3571 
  if (rc != 0) {
    #line 3572 
    _dev_err(& pdev->dev,(char *)"Failed to query interrupt moderation feature\n");
    #line 3574 
    goto err_netdev_destroy;
  }
  #line 3576 
  ena_init_io_rings(adapter);
  #line 3578 
  netdev->netdev_ops = & ena_netdev_ops;
  #line 3579 
  netdev->watchdog_timeo = 1250;
  #line 3580 
  ena_set_ethtool_ops(netdev);
  #line 3582 
  netdev->priv_flags |= 4096U;
  #line 3584 
  u64_stats_init(& adapter->syncp);
  #line 3586 
  rc = ena_enable_msix_and_set_admin_interrupts(adapter);
  #line 3587 
  if (rc != 0) {
    #line 3588 
    _dev_err(& pdev->dev,(char *)"Failed to enable and set the admin interrupts\n");
    #line 3590 
    goto err_worker_destroy;
  }
  #line 3592 
  rc = ena_rss_init_default(adapter);
  #line 3593 
  if (rc != 0 && rc != -95) {
    #line 3594 
    _dev_err(& pdev->dev,(char *)"Cannot init RSS rc: %d\n",rc);
    #line 3595 
    goto err_free_msix;
  }
  #line 3598 
  ena_config_debug_area(adapter);
  #line 3600 
  memcpy((void *)(& (adapter->netdev)->perm_addr),(void *)(& adapter->mac_addr),(unsigned long)netdev->addr_len);
  #line 3602 
  netif_carrier_off(netdev);
  #line 3604 
  rc = cif_register_netdev(netdev);
  #line 3605 
  if (rc != 0) {
    #line 3606 
    _dev_err(& pdev->dev,(char *)"Cannot register net device\n");
    #line 3607 
    goto err_rss;
  }
  {
    #line 3610 
    struct lock_class_key __key;
    #line 3610 
    __init_work(& adapter->reset_task,0);
    #line 3610 
    atomic_long_t __constr_expr_45 = {.counter = 137438953408LL};
    #line 3610 
    adapter->reset_task.data = __constr_expr_45;
    #line 3610 
    lockdep_init_map(& adapter->reset_task.lockdep_map,(char *)"(work_completion)",& __key,0);
    #line 3610 
    INIT_LIST_HEAD(& adapter->reset_task.entry);
    #line 3610 
    adapter->reset_task.func = & ena_fw_reset_device;
  }
  #line 3612 
  adapter->last_keep_alive_jiffies = jiffies;
  #line 3613 
  adapter->keep_alive_timeout = 1500UL;
  #line 3614 
  adapter->missing_tx_completion_to = 1250UL;
  #line 3615 
  adapter->missing_tx_completion_threshold = 128U;
  #line 3617 
  ena_update_hints(adapter,& get_feat_ctx.hw_hints);
  {
    #line 3619 
    struct lock_class_key __key_0;
    #line 3619 
    init_timer_key(& adapter->timer_service,& ena_timer_service,0U,(char *)"(&adapter->timer_service)",& __key_0);
  }
  #line 3620 
  ;
  #line 3620 
  cif_mod_timer(& adapter->timer_service,round_jiffies(jiffies + 250UL));
  #line 3622 
  if (ena_dev->tx_mem_queue_type == (unsigned int)ENA_ADMIN_PLACEMENT_POLICY_HOST) 
    #line 3623 
    queue_type_str = (char *)"Regular"; else 
                                             #line 3625 
                                             queue_type_str = (char *)"Low Latency";
  #line 3627 
  _dev_info(& pdev->dev,(char *)"%s found at mem %lx, mac addr %pM, Placement policy: %s\n",(char *)"Elastic Network Adapter (ENA)",(long)pdev->resource[0].start,netdev->dev_addr,queue_type_str);
  #line 3632 
  cif_set_bit(0L,& adapter->flags);
  #line 3634 
  adapters_found ++;
  #line 3636 
  return 0;
  #line 3638 
  err_rss: 
           #line 3638 
  ;
  #line 3639 
  ena_com_delete_debug_area(ena_dev);
  #line 3640 
  ena_com_rss_destroy(ena_dev);
  #line 3641 
  err_free_msix: 
                 #line 3641 
  ;
  #line 3642 
  ena_com_dev_reset(ena_dev,(enum ena_regs_reset_reason_types)ENA_REGS_RESET_INIT_ERR);
  #line 3644 
  ena_com_set_admin_running_state(ena_dev,(_Bool)0);
  #line 3645 
  ena_free_mgmnt_irq(adapter);
  #line 3646 
  ena_disable_msix(adapter);
  #line 3647 
  err_worker_destroy: 
                      #line 3647 
  ;
  #line 3648 
  cif_del_timer(& adapter->timer_service);
  #line 3649 
  err_netdev_destroy: 
                      #line 3649 
  ;
  #line 3650 
  cif_free_netdev(netdev);
  #line 3651 
  err_device_destroy: 
                      #line 3651 
  ;
  #line 3652 
  ena_com_delete_host_info(ena_dev);
  #line 3653 
  ena_com_admin_destroy(ena_dev);
  #line 3654 
  err_free_region: 
                   #line 3654 
  ;
  #line 3655 
  ena_release_bars(ena_dev,pdev);
  #line 3656 
  err_free_ena_dev: 
                    #line 3656 
  ;
  #line 3657 
  cif_vfree((void *)ena_dev);
  #line 3658 
  err_disable_device: 
                      #line 3658 
  ;
  #line 3659 
  pci_disable_device(pdev);
  #line 3660 
  return rc;
}

#line 3671  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_netdev.c"
static void ena_remove(struct pci_dev *pdev)
{
  #line 3674 
  struct ena_com_dev *ena_dev;
  #line 3675 
  struct net_device *netdev;
  #line 3673 
  struct ena_adapter *adapter = pci_get_drvdata(pdev);
  #line 3677 
  ena_dev = adapter->ena_dev;
  #line 3678 
  netdev = adapter->netdev;
  #line 3681 
  if (adapter->msix_vecs > 0 && netdev->rx_cpu_rmap != (struct cpu_rmap *)0) {
    #line 3682 
    free_irq_cpu_rmap(netdev->rx_cpu_rmap);
    #line 3683 
    netdev->rx_cpu_rmap = (struct cpu_rmap *)0;
  }
  #line 3686 
  cif_del_timer_sync(& adapter->timer_service);
  #line 3688 
  cancel_work_sync(& adapter->reset_task);
  #line 3690 
  rtnl_lock();
  #line 3691 
  ena_destroy_device(adapter,(_Bool)1);
  #line 3692 
  rtnl_unlock();
  #line 3694 
  cif_unregister_netdev(netdev);
  #line 3696 
  cif_free_netdev(netdev);
  #line 3698 
  ena_com_rss_destroy(ena_dev);
  #line 3700 
  ena_com_delete_debug_area(ena_dev);
  #line 3702 
  ena_com_delete_host_info(ena_dev);
  #line 3704 
  ena_release_bars(ena_dev,pdev);
  #line 3706 
  pci_disable_device(pdev);
  #line 3708 
  cif_vfree((void *)ena_dev);
  #line 3709 
  return;
}

#line 3716  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_netdev.c"
static int ena_suspend(struct pci_dev *pdev, pm_message_t state)
{
  #line 3718 
  struct ena_adapter *adapter = pci_get_drvdata(pdev);
  #line 3720 
  u64_stats_init(& adapter->syncp);
  #line 3721 
  (adapter->dev_stats.suspend) ++;
  #line 3722 
  u64_stats_init(& adapter->syncp);
  #line 3724 
  rtnl_lock();
  #line 3725 
  if ((long)((int)test_bit(4L,& adapter->flags) != 0) != 0L) {
    #line 3726 
    _dev_err(& pdev->dev,(char *)"ignoring device reset request as the device is being suspended\n");
    #line 3728 
    cif_clear_bit(4L,& adapter->flags);
  }
  #line 3730 
  ena_destroy_device(adapter,(_Bool)1);
  #line 3731 
  rtnl_unlock();
  #line 3732 
  return 0;
}

#line 3739  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_netdev.c"
static int ena_resume(struct pci_dev *pdev)
{
  #line 3742 
  int rc;
  #line 3741 
  struct ena_adapter *adapter = pci_get_drvdata(pdev);
  #line 3744 
  u64_stats_init(& adapter->syncp);
  #line 3745 
  (adapter->dev_stats.resume) ++;
  #line 3746 
  u64_stats_init(& adapter->syncp);
  #line 3748 
  rtnl_lock();
  #line 3749 
  rc = ena_restore_device(adapter);
  #line 3750 
  rtnl_unlock();
  #line 3751 
  return rc;
}

#line 3755  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_netdev.c"
static struct pci_driver ena_pci_driver = {.name = (char *)"ena", .id_table = (struct pci_device_id *)(& ena_pci_tbl), .probe = & ena_probe, .remove = & ena_remove, .suspend = & ena_suspend, .resume = & ena_resume, .sriov_configure = & pci_sriov_configure_simple};
#line 3767  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_netdev.c"
static int ena_init(void)
{
  #line 3769 
  printk((char *)"\001",(char *)(& version));
  #line 3771 
  ena_wq = alloc_workqueue((char *)"%s",917514U,1,(char *)"ena");
  #line 3772 
  if (ena_wq == (struct workqueue_struct *)0) {
    #line 3773 
    printk((char *)"\001");
    #line 3774 
    return -12;
  }
  #line 3777 
  return cif___pci_register_driver(& ena_pci_driver,& __this_module,
                                (char *)"ena");
}

#line 3780  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_netdev.c"
static void ena_cleanup(void)
{
  #line 3782 
  cif_pci_unregister_driver(& ena_pci_driver);
  #line 3784 
  if (ena_wq != (struct workqueue_struct *)0) {
    #line 3785 
    destroy_workqueue(ena_wq);
    #line 3786 
    ena_wq = (struct workqueue_struct *)0;
  }
  #line 3788 
  return;
}

#line 3796  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_netdev.c"
static void ena_update_on_link_change(void *adapter_data, struct ena_admin_aenq_entry *aenq_e)
{
  #line 3799 
  struct ena_adapter *adapter = (struct ena_adapter *)adapter_data;
  #line 3800 
  struct ena_admin_aenq_link_change_desc *aenq_desc = (struct ena_admin_aenq_link_change_desc *)aenq_e;
  #line 3802 
  int status = (int)aenq_desc->flags & 1;
  #line 3805 
  if (status != 0) {
    {
      #line 3806 
      bool branch;
      #line 3806 
      struct _ddebug __UNIQUE_ID_ddebug620 = {.modname = (char *)"ena", .function = (char *)"ena_update_on_link_change", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_netdev.c", .format = (char *)"%s\n", .lineno = (unsigned int)3806U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 3806 
      branch = arch_static_branch(& __UNIQUE_ID_ddebug620.key.dd_key_false.key,(_Bool)0);
      #line 3806 
      if ((long)((long)((int)branch != 0)) != 0L) 
                                                  #line 3806 
                                                  __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug620,adapter->netdev,(char *)"%s\n",(char *)"ena_update_on_link_change");
    }
    #line 3807 
    cif_set_bit(2L,& adapter->flags);
    #line 3808 
    if (! test_bit(5L,& adapter->flags)) 
                                         #line 3809 
                                         netif_carrier_on(adapter->netdev);
  }
  else {
    #line 3811 
    cif_clear_bit(2L,& adapter->flags);
    #line 3812 
    netif_carrier_off(adapter->netdev);
  }
  #line 3814 
  return;
}

#line 3816  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_netdev.c"
static void ena_keep_alive_wd(void *adapter_data, struct ena_admin_aenq_entry *aenq_e)
{
  #line 3820 
  struct ena_admin_aenq_keep_alive_desc *desc;
  #line 3821 
  u64 rx_drops;
  #line 3819 
  struct ena_adapter *adapter = (struct ena_adapter *)adapter_data;
  #line 3823 
  desc = (struct ena_admin_aenq_keep_alive_desc *)aenq_e;
  #line 3824 
  adapter->last_keep_alive_jiffies = jiffies;
  #line 3826 
  rx_drops = ((unsigned long long)desc->rx_drops_high << 32) | (unsigned long long)desc->rx_drops_low;
  #line 3828 
  u64_stats_init(& adapter->syncp);
  #line 3829 
  adapter->dev_stats.rx_drops = rx_drops;
  #line 3830 
  u64_stats_init(& adapter->syncp);
  #line 3831 
  return;
}

#line 3833  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_netdev.c"
static void ena_notification(void *adapter_data, struct ena_admin_aenq_entry *aenq_e)
{
  #line 3837 
  struct ena_admin_ena_hw_hints *hints;
  #line 3836 
  struct ena_adapter *adapter = (struct ena_adapter *)adapter_data;
  {
    #line 3839 
    int __ret_warn_on = (unsigned int)aenq_e->aenq_common_desc.group != 3U;
    #line 3839 
    if ((long)(__ret_warn_on != 0) != 0L) {
      #line 3839 
      __warn_printk((char *)"Invalid group(%x) expected %x\n",(int)aenq_e->aenq_common_desc.group,3);
      #line 3840 
      ldv_inline_asm();
      #line 3841 
      ldv_inline_asm();
    }
    #line 3839 
    long tmp = (long)(__ret_warn_on != 0);
  }
  #line 3844 
  switch ((int)aenq_e->aenq_common_desc.syndrom) {
    #line 3845 
    case 2: 
            #line 3845 
    ;
    #line 3846 
    hints = (struct ena_admin_ena_hw_hints *)(& aenq_e->inline_data_w4);
    #line 3848 
    ena_update_hints(adapter,hints);
    #line 3849 
    break;
    #line 3850 
    default: 
             #line 3850 
    ;
    #line 3851 
    if ((adapter->msg_enable & 1U) != 0U) 
                                          #line 3851 
                                          netdev_err(adapter->netdev,(char *)"Invalid aenq notification link state %d\n",(int)aenq_e->aenq_common_desc.syndrom);
  }
  #line 3853 
  return;
}

#line 3858  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_netdev.c"
static void unimplemented_aenq_handler(void *data, struct ena_admin_aenq_entry *aenq_e)
{
  #line 3861 
  struct ena_adapter *adapter = (struct ena_adapter *)data;
  #line 3863 
  if ((adapter->msg_enable & 1U) != 0U) 
                                        #line 3863 
                                        netdev_err(adapter->netdev,(char *)"Unknown event was received or event with unimplemented handler\n");
  #line 3864 
  return;
}

#line 3867  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_netdev.c"
static struct ena_aenq_handlers aenq_handlers = {.handlers = {& ena_update_on_link_change, [3] = & ena_notification, & ena_keep_alive_wd}, .unimplemented_handler = & unimplemented_aenq_handler};
#line 93  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amazon/ena/ena.ko/concurrency safety/0/concurrency safety/weaver/ena_netdev.i.aux"
struct pci_driver *emg_alias_ena_pci_driver = & ena_pci_driver;
#line 94  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amazon/ena/ena.ko/concurrency safety/0/concurrency safety/weaver/ena_netdev.i.aux"
struct pci_device_id (*emg_alias_ena_pci_tbl)[5U] = & ena_pci_tbl;
#line 97 
#line 97 
int emg___pci_register_driver(struct pci_driver *arg0, struct module *arg1, char *arg2);
#line 98 
#line 98 
struct net_device *emg_alloc_etherdev_mqs(int arg0, unsigned int arg1, unsigned int arg2);
#line 99 
#line 99 
int emg_del_timer(struct timer_list *arg0);
#line 100 
#line 100 
int emg_del_timer_sync(struct timer_list *arg0);
#line 101 
#line 101 
void *emg_free_irq(unsigned int arg0, void *arg1);
#line 102 
#line 102 
void emg_free_netdev(struct net_device *arg0);
#line 103 
#line 103 
int emg_mod_timer(struct timer_list *arg0, unsigned long arg1);
#line 104 
#line 104 
void emg_pci_unregister_driver(struct pci_driver *arg0);
#line 105 
#line 105 
_Bool emg_queue_work(struct workqueue_struct *arg0, struct work_struct *arg1);
#line 106 
#line 106 
int emg_register_netdev(struct net_device *arg0);
#line 107 
#line 107 
int emg_request_irq(unsigned int arg0, enum irqreturn (*arg1)(int , void *), unsigned long arg2, char *arg3, void *arg4);
#line 108 
#line 108 
void emg_unregister_netdev(struct net_device *arg0);
#line 112  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amazon/ena/ena.ko/concurrency safety/0/concurrency safety/weaver/ena_netdev.i.aux"
int emg_wrapper_ena_change_mtu(struct net_device *arg0, int arg1)
{
  #line 113 
  return ena_change_mtu(arg0,arg1);
}

#line 117  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amazon/ena/ena.ko/concurrency safety/0/concurrency safety/weaver/ena_netdev.i.aux"
int emg_wrapper_ena_close(struct net_device *arg0)
{
  #line 118 
  return ena_close(arg0);
}

#line 122  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amazon/ena/ena.ko/concurrency safety/0/concurrency safety/weaver/ena_netdev.i.aux"
void emg_wrapper_ena_get_stats64(struct net_device *arg0, struct rtnl_link_stats64 *arg1)
{
  #line 123 
  ena_get_stats64(arg0,arg1);
  #line 124 
  return;
}

#line 127  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amazon/ena/ena.ko/concurrency safety/0/concurrency safety/weaver/ena_netdev.i.aux"
int emg_wrapper_ena_open(struct net_device *arg0)
{
  #line 128 
  return ena_open(arg0);
}

#line 132  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amazon/ena/ena.ko/concurrency safety/0/concurrency safety/weaver/ena_netdev.i.aux"
int emg_wrapper_ena_probe(struct pci_dev *arg0, struct pci_device_id *arg1)
{
  #line 133 
  return ena_probe(arg0,arg1);
}

#line 137  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amazon/ena/ena.ko/concurrency safety/0/concurrency safety/weaver/ena_netdev.i.aux"
void emg_wrapper_ena_remove(struct pci_dev *arg0)
{
  #line 138 
  ena_remove(arg0);
  #line 139 
  return;
}

#line 142  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amazon/ena/ena.ko/concurrency safety/0/concurrency safety/weaver/ena_netdev.i.aux"
int emg_wrapper_ena_resume(struct pci_dev *arg0)
{
  #line 143 
  return ena_resume(arg0);
}

#line 147  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amazon/ena/ena.ko/concurrency safety/0/concurrency safety/weaver/ena_netdev.i.aux"
unsigned short emg_wrapper_ena_select_queue(struct net_device *arg0, struct sk_buff *arg1, struct net_device *arg2)
{
  #line 148 
  return ena_select_queue(arg0,arg1,arg2);
}

#line 152  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amazon/ena/ena.ko/concurrency safety/0/concurrency safety/weaver/ena_netdev.i.aux"
enum netdev_tx emg_wrapper_ena_start_xmit(struct sk_buff *arg0, struct net_device *arg1)
{
  #line 153 
  return ena_start_xmit(arg0,arg1);
}

#line 157  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amazon/ena/ena.ko/concurrency safety/0/concurrency safety/weaver/ena_netdev.i.aux"
int emg_wrapper_ena_suspend(struct pci_dev *arg0, struct pm_message arg1)
{
  #line 158 
  return ena_suspend(arg0,arg1);
}

#line 162  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amazon/ena/ena.ko/concurrency safety/0/concurrency safety/weaver/ena_netdev.i.aux"
void emg_wrapper_ena_tx_timeout(struct net_device *arg0)
{
  #line 163 
  ena_tx_timeout(arg0);
  #line 164 
  return;
}

#line 167  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amazon/ena/ena.ko/concurrency safety/0/concurrency safety/weaver/ena_netdev.i.aux"
void emg_ena_cleanup(void)
{
  #line 168 
  ena_cleanup();
  #line 169 
  return;
}

#line 171  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amazon/ena/ena.ko/concurrency safety/0/concurrency safety/weaver/ena_netdev.i.aux"
int emg_ena_init(void)
{
  #line 172 
  return ena_init();
}

#line 190  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amazon/ena/ena.ko/concurrency safety/0/concurrency safety/weaver/ena_netdev.i.aux"
static void cif_set_bit(long nr, unsigned long *addr)
{
  #line 193 
  ldv_set_bit(nr,addr);
  #line 194 
  return;
}

#line 197  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amazon/ena/ena.ko/concurrency safety/0/concurrency safety/weaver/ena_netdev.i.aux"
static void cif_clear_bit(long nr, unsigned long *addr)
{
  #line 200 
  ldv_clear_bit(nr,addr);
  #line 201 
  return;
}

#line 204  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amazon/ena/ena.ko/concurrency safety/0/concurrency safety/weaver/ena_netdev.i.aux"
static void INIT_LIST_HEAD(struct list_head *list)
{
  #line 207 
  ldv_init_list_head(list);
  #line 208 
  return;
}

#line 225  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amazon/ena/ena.ko/concurrency safety/0/concurrency safety/weaver/ena_netdev.i.aux"
static unsigned long cif_find_first_bit(unsigned long *addr, unsigned long size)
{
  #line 228 
  return ldv_find_first_bit(addr,size);
}

#line 374  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amazon/ena/ena.ko/concurrency safety/0/concurrency safety/weaver/ena_netdev.i.aux"
static bool cif_queue_work(struct workqueue_struct *wq, struct work_struct *work)
{
  #line 378 
  return emg_queue_work(wq,work);
}

#line 616  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amazon/ena/ena.ko/concurrency safety/0/concurrency safety/weaver/ena_netdev.i.aux"
static void cif_spin_lock__xmit_lock_of_netdev_queue(spinlock_t *lock)
{
  #line 619 
  ldv_spin_model_lock((char *)"_xmit_lock_of_netdev_queue");
  #line 621 
  spin_lock(lock);
  #line 622 
  return;
}

#line 656  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amazon/ena/ena.ko/concurrency safety/0/concurrency safety/weaver/ena_netdev.i.aux"
static void cif_spin_unlock__xmit_lock_of_netdev_queue(spinlock_t *lock)
{
  #line 659 
  ldv_spin_model_unlock((char *)"_xmit_lock_of_netdev_queue");
  #line 661 
  spin_unlock(lock);
  #line 662 
  return;
}

#line 876  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amazon/ena/ena.ko/concurrency safety/0/concurrency safety/weaver/ena_netdev.i.aux"
static void *cif_vzalloc_node(unsigned long size, int node)
{
  #line 879 
  return ldv_vzalloc(size);
}

#line 883  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amazon/ena/ena.ko/concurrency safety/0/concurrency safety/weaver/ena_netdev.i.aux"
static void *cif_vzalloc(unsigned long size)
{
  #line 886 
  return ldv_vzalloc(size);
}

#line 890  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amazon/ena/ena.ko/concurrency safety/0/concurrency safety/weaver/ena_netdev.i.aux"
static void cif_vfree(void *addr)
{
  #line 893 
  ldv_vfree(addr);
  #line 894 
  return;
}

#line 897  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amazon/ena/ena.ko/concurrency safety/0/concurrency safety/weaver/ena_netdev.i.aux"
static int cif_request_irq(unsigned int irq, irqreturn_t (*handler)(int , void *), unsigned long flags, char *name, void *dev)
{
  #line 901 
  return emg_request_irq(irq,handler,flags,name,dev);
}

#line 905  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amazon/ena/ena.ko/concurrency safety/0/concurrency safety/weaver/ena_netdev.i.aux"
static void *cif_free_irq(unsigned int ldv_func_arg1, void *ldv_func_arg2)
{
  #line 909 
  return emg_free_irq(ldv_func_arg1,ldv_func_arg2);
}

#line 913  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amazon/ena/ena.ko/concurrency safety/0/concurrency safety/weaver/ena_netdev.i.aux"
static int cif_del_timer_sync(struct timer_list *timer)
{
  #line 917 
  return emg_del_timer_sync(timer);
}

#line 921  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amazon/ena/ena.ko/concurrency safety/0/concurrency safety/weaver/ena_netdev.i.aux"
static int cif_mod_timer(struct timer_list *timer, unsigned long expires)
{
  #line 925 
  return emg_mod_timer(timer,expires);
}

#line 929  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amazon/ena/ena.ko/concurrency safety/0/concurrency safety/weaver/ena_netdev.i.aux"
static struct net_device *cif_alloc_etherdev_mqs(int sizeof_priv, unsigned int txqs, unsigned int rxqs)
{
  #line 933 
  return emg_alloc_etherdev_mqs(sizeof_priv,txqs,rxqs);
}

#line 937  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amazon/ena/ena.ko/concurrency safety/0/concurrency safety/weaver/ena_netdev.i.aux"
static int cif_register_netdev(struct net_device *dev)
{
  #line 941 
  return emg_register_netdev(dev);
}

#line 945  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amazon/ena/ena.ko/concurrency safety/0/concurrency safety/weaver/ena_netdev.i.aux"
static int cif_del_timer(struct timer_list *timer)
{
  #line 949 
  return emg_del_timer(timer);
}

#line 953  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amazon/ena/ena.ko/concurrency safety/0/concurrency safety/weaver/ena_netdev.i.aux"
static void cif_free_netdev(struct net_device *dev)
{
  #line 957 
  emg_free_netdev(dev);
  #line 958 
  return;
}

#line 961  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amazon/ena/ena.ko/concurrency safety/0/concurrency safety/weaver/ena_netdev.i.aux"
static void cif_unregister_netdev(struct net_device *dev)
{
  #line 965 
  emg_unregister_netdev(dev);
  #line 966 
  return;
}

#line 969  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amazon/ena/ena.ko/concurrency safety/0/concurrency safety/weaver/ena_netdev.i.aux"
static int cif___pci_register_driver(struct pci_driver *ldv_func_arg1, struct module *ldv_func_arg2, char *mod_name)
{
  #line 973 
  return emg___pci_register_driver(ldv_func_arg1,ldv_func_arg2,mod_name);
}

#line 977  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amazon/ena/ena.ko/concurrency safety/0/concurrency safety/weaver/ena_netdev.i.aux"
static void cif_pci_unregister_driver(struct pci_driver *dev)
{
  #line 981 
  emg_pci_unregister_driver(dev);
  #line 982 
  return;
}

#line 834  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/processor.h"
__inline static void prefetchw(void *x)
{
  #line 836 
  ldv_inline_asm();
  #line 837 
  return;
}

#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/io.h"
#line 21 
void __iowrite64_copy(void *, void *, size_t);
#line 978  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_com.h"
__inline static u8 *ena_com_get_next_bounce_buffer(struct ena_com_io_bounce_buffer_control *bounce_buf_ctrl)
{
  #line 980 
  u16 size;
  #line 980 
  u16 buffers_num;
  #line 981 
  u8 *buf;
  #line 987 
  u16 tmp;
  #line 983 
  size = bounce_buf_ctrl->buffer_size;
  #line 984 
  buffers_num = bounce_buf_ctrl->buffers_num;
  #line 987 
  tmp = bounce_buf_ctrl->next_to_use;
  #line 987 
  bounce_buf_ctrl->next_to_use = (u16)((int)bounce_buf_ctrl->next_to_use + 1);
  #line 986 
  buf = bounce_buf_ctrl->base_buffer + (unsigned long)(((int)tmp & ((int)buffers_num + -1)) * (int)size);
  #line 989 
  prefetchw((void *)(bounce_buf_ctrl->base_buffer + (unsigned long)(((int)bounce_buf_ctrl->next_to_use & ((int)buffers_num + -1)) * (int)size)));
  #line 992 
  return buf;
}

#line 35  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_eth_com.c"
static struct ena_eth_io_rx_cdesc_base *ena_com_get_next_rx_cdesc(struct ena_com_io_cq *io_cq)
{
  #line 49 
  union __anonunion___u_1462 __u;
  #line 38 
  struct ena_eth_io_rx_cdesc_base *cdesc;
  #line 39 
  u16 expected_phase;
  #line 39 
  u16 head_masked;
  #line 40 
  u16 desc_phase;
  #line 42 
  head_masked = (unsigned short)((unsigned int)io_cq->head & ((unsigned int)io_cq->q_depth + 65535U));
  #line 43 
  expected_phase = (unsigned short)io_cq->phase;
  #line 45 
  cdesc = (struct ena_eth_io_rx_cdesc_base *)(io_cq->cdesc_addr.virt_addr + (unsigned long)((int)head_masked * (int)io_cq->cdesc_entry_size_in_bytes));
  #line 48 
  __read_once_size((void *)(& cdesc->status),(void *)(& __u.__c),4);
  #line 48 
  desc_phase = (unsigned short)((unsigned int)((unsigned short)((unsigned long)(__u.__val) >> 24)) & 1U);
  #line 51 
  if ((int)desc_phase != (int)expected_phase) 
                                              #line 52 
                                              return (struct ena_eth_io_rx_cdesc_base *)0;
  #line 53 
  ldv_inline_asm();
  #line 59 
  return cdesc;
}

#line 62  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_eth_com.c"
static void *get_sq_desc_regular_queue(struct ena_com_io_sq *io_sq)
{
  #line 64 
  u16 tail_masked;
  #line 65 
  u32 offset;
  #line 67 
  tail_masked = (unsigned short)((unsigned int)io_sq->tail & ((unsigned int)io_sq->q_depth + 65535U));
  #line 69 
  offset = (unsigned int)((int)tail_masked * (int)io_sq->desc_entry_size);
  #line 71 
  return (void *)((unsigned long)io_sq->desc_addr.virt_addr + (unsigned long)offset);
}

#line 74  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_eth_com.c"
static int ena_com_write_bounce_buffer_to_dev(struct ena_com_io_sq *io_sq, u8 *bounce_buffer)
{
  #line 79 
  u16 dst_tail_mask;
  #line 80 
  u32 dst_offset;
  #line 77 
  struct ena_com_llq_info *llq_info = & io_sq->llq_info;
  #line 82 
  dst_tail_mask = (unsigned short)((unsigned int)io_sq->tail & ((unsigned int)io_sq->q_depth + 65535U));
  #line 83 
  dst_offset = (unsigned int)((int)dst_tail_mask * (int)llq_info->desc_list_entry_size);
  #line 85 
  if ((int)is_llq_max_tx_burst_exists(io_sq) != 0) {
    #line 86 
    if ((long)((unsigned int)io_sq->entries_in_tx_burst_left == 0U) != 0L) {
      #line 87 
      printk((char *)"\001");
      #line 88 
      return -28;
    }
    #line 91 
    io_sq->entries_in_tx_burst_left = (u16)((int)io_sq->entries_in_tx_burst_left - 1);
    {
      #line 92 
      bool branch;
      #line 92 
      struct _ddebug __UNIQUE_ID_ddebug404 = {.modname = (char *)"ena", .function = (char *)"ena_com_write_bounce_buffer_to_dev", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_eth_com.c", .format = (char *)"decreasing entries_in_tx_burst_left of queue %d to %d\n", .lineno = (unsigned int)92U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 92 
      branch = arch_static_branch(& __UNIQUE_ID_ddebug404.key.dd_key_false.key,(_Bool)0);
      #line 92 
      if ((long)((long)((int)branch != 0)) != 0L) 
                                                  #line 92 
                                                  __dynamic_pr_debug(& __UNIQUE_ID_ddebug404,(char *)"ena",(int)io_sq->qid,(int)io_sq->entries_in_tx_burst_left);
    }
  }
  #line 95 
  ldv_inline_asm();
  #line 102 
  __iowrite64_copy((void *)(io_sq->desc_addr.pbuf_dev_addr + (unsigned long)dst_offset),(void *)bounce_buffer,(unsigned long)((unsigned int)llq_info->desc_list_entry_size / 8U));
  #line 105 
  io_sq->tail = (u16)((int)io_sq->tail + 1);
  #line 108 
  if ((long)(((int)io_sq->tail & ((int)io_sq->q_depth + -1)) == 0) != 0L) 
    #line 109 
    io_sq->phase = (unsigned char)((unsigned int)io_sq->phase ^ 1U);
  #line 111 
  return 0;
}

#line 114  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_eth_com.c"
static int ena_com_write_header_to_bounce(struct ena_com_io_sq *io_sq, u8 *header_src, u16 header_len)
{
  #line 121 
  u16 header_offset;
  #line 118 
  struct ena_com_llq_pkt_ctrl *pkt_ctrl = & io_sq->llq_buf_ctrl;
  #line 119 
  struct ena_com_llq_info *llq_info = & io_sq->llq_info;
  #line 120 
  u8 *bounce_buffer = pkt_ctrl->curr_bounce_buf;
  #line 123 
  if ((long)(io_sq->mem_queue_type == (unsigned int)ENA_ADMIN_PLACEMENT_POLICY_HOST) != 0L) 
    #line 124 
    return 0;
  #line 126 
  header_offset = (unsigned short)((int)llq_info->descs_num_before_header * (int)((unsigned short)io_sq->desc_entry_size));
  #line 129 
  if ((long)((int)header_offset + (int)header_len > (int)llq_info->desc_list_entry_size) != 0L) {
    #line 131 
    printk((char *)"\001");
    #line 132 
    return -14;
  }
  #line 135 
  if ((long)(bounce_buffer == (u8 *)0U) != 0L) {
    #line 136 
    printk((char *)"\001");
    #line 137 
    return -14;
  }
  #line 140 
  memcpy((void *)(bounce_buffer + (unsigned long)header_offset),(void *)header_src,(unsigned long)header_len);
  #line 142 
  return 0;
}

#line 145  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_eth_com.c"
static void *get_sq_desc_llq(struct ena_com_io_sq *io_sq)
{
  #line 148 
  u8 *bounce_buffer;
  #line 149 
  void *sq_desc;
  #line 147 
  struct ena_com_llq_pkt_ctrl *pkt_ctrl = & io_sq->llq_buf_ctrl;
  #line 151 
  bounce_buffer = pkt_ctrl->curr_bounce_buf;
  #line 153 
  if ((long)(bounce_buffer == (u8 *)0U) != 0L) {
    #line 154 
    printk((char *)"\001");
    #line 155 
    return (void *)0;
  }
  #line 158 
  sq_desc = (void *)(bounce_buffer + (unsigned long)((int)pkt_ctrl->idx * (int)io_sq->desc_entry_size));
  #line 159 
  pkt_ctrl->idx = (u16)((int)pkt_ctrl->idx + 1);
  #line 160 
  pkt_ctrl->descs_left_in_line = (u16)((int)pkt_ctrl->descs_left_in_line - 1);
  #line 162 
  return sq_desc;
}

#line 165  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_eth_com.c"
static int ena_com_close_bounce_buffer(struct ena_com_io_sq *io_sq)
{
  #line 169 
  int rc;
  #line 167 
  struct ena_com_llq_pkt_ctrl *pkt_ctrl = & io_sq->llq_buf_ctrl;
  #line 168 
  struct ena_com_llq_info *llq_info = & io_sq->llq_info;
  #line 171 
  if ((long)(io_sq->mem_queue_type == (unsigned int)ENA_ADMIN_PLACEMENT_POLICY_HOST) != 0L) 
    #line 172 
    return 0;
  #line 175 
  if ((unsigned int)pkt_ctrl->idx != 0U) {
    #line 176 
    rc = ena_com_write_bounce_buffer_to_dev(io_sq,pkt_ctrl->curr_bounce_buf);
    #line 178 
    if ((long)(rc != 0) != 0L) 
                               #line 179 
                               return rc;
    #line 181 
    pkt_ctrl->curr_bounce_buf = ena_com_get_next_bounce_buffer(& io_sq->bounce_buf_ctrl);
    #line 183 
    memset((void *)io_sq->llq_buf_ctrl.curr_bounce_buf,0,(unsigned long)llq_info->desc_list_entry_size);
  }
  #line 187 
  pkt_ctrl->idx = (unsigned short)0U;
  #line 188 
  pkt_ctrl->descs_left_in_line = llq_info->descs_num_before_header;
  #line 189 
  return 0;
}

#line 192  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_eth_com.c"
static void *get_sq_desc(struct ena_com_io_sq *io_sq)
{
  #line 194 
  if (io_sq->mem_queue_type == (unsigned int)ENA_ADMIN_PLACEMENT_POLICY_DEV) {
    #line 195 
    return get_sq_desc_llq(io_sq);
  }
  #line 197 
  return get_sq_desc_regular_queue(io_sq);
}

#line 200  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_eth_com.c"
static int ena_com_sq_update_llq_tail(struct ena_com_io_sq *io_sq)
{
  #line 204 
  int rc;
  #line 202 
  struct ena_com_llq_pkt_ctrl *pkt_ctrl = & io_sq->llq_buf_ctrl;
  #line 203 
  struct ena_com_llq_info *llq_info = & io_sq->llq_info;
  #line 206 
  if ((unsigned int)pkt_ctrl->descs_left_in_line == 0U) {
    #line 207 
    rc = ena_com_write_bounce_buffer_to_dev(io_sq,pkt_ctrl->curr_bounce_buf);
    #line 209 
    if ((long)(rc != 0) != 0L) 
                               #line 210 
                               return rc;
    #line 212 
    pkt_ctrl->curr_bounce_buf = ena_com_get_next_bounce_buffer(& io_sq->bounce_buf_ctrl);
    #line 214 
    memset((void *)io_sq->llq_buf_ctrl.curr_bounce_buf,0,(unsigned long)llq_info->desc_list_entry_size);
    #line 217 
    pkt_ctrl->idx = (unsigned short)0U;
    #line 218 
    if ((long)((unsigned int)llq_info->desc_stride_ctrl == 1U) != 0L) 
      #line 219 
      pkt_ctrl->descs_left_in_line = (unsigned short)1U; else 
                                                              #line 221 
                                                              pkt_ctrl->descs_left_in_line = (unsigned short)((int)llq_info->desc_list_entry_size / (int)io_sq->desc_entry_size);
  }
  #line 225 
  return 0;
}

#line 228  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_eth_com.c"
static int ena_com_sq_update_tail(struct ena_com_io_sq *io_sq)
{
  #line 230 
  if (io_sq->mem_queue_type == (unsigned int)ENA_ADMIN_PLACEMENT_POLICY_DEV) {
    #line 231 
    return ena_com_sq_update_llq_tail(io_sq);
  }
  #line 233 
  io_sq->tail = (u16)((int)io_sq->tail + 1);
  #line 236 
  if ((long)(((int)io_sq->tail & ((int)io_sq->q_depth + -1)) == 0) != 0L) 
    #line 237 
    io_sq->phase = (unsigned char)((unsigned int)io_sq->phase ^ 1U);
  #line 239 
  return 0;
}

#line 243  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_eth_com.c"
static struct ena_eth_io_rx_cdesc_base *ena_com_rx_cdesc_idx_to_ptr(struct ena_com_io_cq *io_cq, u16 idx)
{
  #line 245 
  idx = (unsigned short)(((unsigned int)io_cq->q_depth + 65535U) & (unsigned int)idx);
  #line 246 
  return (struct ena_eth_io_rx_cdesc_base *)((unsigned long)io_cq->cdesc_addr.virt_addr + (unsigned long)((int)idx * (int)io_cq->cdesc_entry_size_in_bytes));
}

#line 251  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_eth_com.c"
static u16 ena_com_cdesc_rx_pkt_get(struct ena_com_io_cq *io_cq, u16 *first_cdesc_idx)
{
  #line 254 
  struct ena_eth_io_rx_cdesc_base *cdesc;
  #line 255 
  u16 head_masked;
  #line 255 
  u16 count = (unsigned short)0U;
  #line 256 
  u32 last = 0U;
  #line 258 
  while (1) {
    {
      #line 266 
      union __anonunion___u_1464 __u;
      #line 259 
      cdesc = ena_com_get_next_rx_cdesc(io_cq);
      #line 260 
      if (cdesc == (struct ena_eth_io_rx_cdesc_base *)0) 
                                                         #line 261 
                                                         break;
      #line 263 
      ena_com_cq_inc_head(io_cq);
      #line 264 
      count = (u16)((int)count + 1);
      #line 265 
      __read_once_size((void *)(& cdesc->status),(void *)(& __u.__c),4);
      #line 265 
      last = (unsigned int)((unsigned long)(__u.__val) >> 27) & 1U;
    }
    #line 266 
    if (! (last == 0U)) 
                        #line 258 
                        break;
  }
  #line 269 
  if (last != 0U) {
    #line 270 
    *first_cdesc_idx = io_cq->cur_rx_pkt_cdesc_start_idx;
    #line 271 
    count = (unsigned short)((int)io_cq->cur_rx_pkt_cdesc_count + (int)count);
    #line 273 
    head_masked = (unsigned short)((unsigned int)io_cq->head & ((unsigned int)io_cq->q_depth + 65535U));
    #line 275 
    io_cq->cur_rx_pkt_cdesc_count = (unsigned short)0U;
    #line 276 
    io_cq->cur_rx_pkt_cdesc_start_idx = head_masked;
    {
      #line 278 
      bool branch;
      #line 278 
      struct _ddebug __UNIQUE_ID_ddebug405 = {.modname = (char *)"ena", .function = (char *)"ena_com_cdesc_rx_pkt_get", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_eth_com.c", .format = (char *)"ena q_id: %d packets were completed. first desc idx %u descs# %d\n", .lineno = (unsigned int)278U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 278 
      branch = arch_static_branch(& __UNIQUE_ID_ddebug405.key.dd_key_false.key,(_Bool)0);
      #line 278 
      if ((long)((long)((int)branch != 0)) != 0L) 
                                                  #line 278 
                                                  __dynamic_pr_debug(& __UNIQUE_ID_ddebug405,(char *)"ena",(int)io_cq->qid,(int)*first_cdesc_idx,(int)count);
    }
  }
  else {
    #line 281 
    io_cq->cur_rx_pkt_cdesc_count = (unsigned short)((int)io_cq->cur_rx_pkt_cdesc_count + (int)count);
    #line 282 
    count = (unsigned short)0U;
  }
  #line 285 
  return count;
}

#line 288  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_eth_com.c"
static int ena_com_create_and_store_tx_meta_desc(struct ena_com_io_sq *io_sq, struct ena_com_tx_ctx *ena_tx_ctx)
{
  #line 291 
  struct ena_eth_io_tx_meta_desc *meta_desc = (struct ena_eth_io_tx_meta_desc *)0;
  #line 292 
  struct ena_com_tx_meta *ena_meta = & ena_tx_ctx->ena_meta;
  #line 294 
  meta_desc = (struct ena_eth_io_tx_meta_desc *)get_sq_desc(io_sq);
  #line 295 
  memset((void *)meta_desc,0,16UL);
  #line 297 
  meta_desc->len_ctrl |= 8388608U;
  #line 299 
  meta_desc->len_ctrl |= 16384U;
  #line 302 
  meta_desc->word2 |= (unsigned int)((int)ena_meta->mss << 22);
  #line 306 
  meta_desc->len_ctrl |= (unsigned int)(((int)ena_meta->mss >> 10) << 16) & 983040U;
  #line 311 
  meta_desc->len_ctrl |= 1048576U;
  #line 312 
  meta_desc->len_ctrl |= 2097152U;
  #line 313 
  meta_desc->len_ctrl |= (unsigned int)((int)io_sq->phase << 24) & 16777216U;
  #line 317 
  meta_desc->len_ctrl |= 67108864U;
  #line 318 
  meta_desc->word2 |= (unsigned int)ena_meta->l3_hdr_len & 255U;
  #line 320 
  meta_desc->word2 |= (unsigned int)((int)ena_meta->l3_hdr_offset << 8) & 65535U;
  #line 324 
  meta_desc->word2 |= (unsigned int)((int)ena_meta->l4_hdr_len << 16) & 4128768U;
  #line 328 
  meta_desc->len_ctrl |= 2097152U;
  #line 331 
  memcpy((void *)(& io_sq->cached_tx_meta),(void *)ena_meta,8UL);
  #line 334 
  return ena_com_sq_update_tail(io_sq);
}

#line 337  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_eth_com.c"
static void ena_com_rx_set_flags(struct ena_com_rx_ctx *ena_rx_ctx, struct ena_eth_io_rx_cdesc_base *cdesc)
{
  #line 340 
  ena_rx_ctx->l3_proto = (enum ena_eth_io_l3_proto_index)(cdesc->status & 31U);
  #line 342 
  ena_rx_ctx->l4_proto = (enum ena_eth_io_l4_proto_index)((unsigned int)((unsigned long)cdesc->status >> 8) & 31U);
  #line 345 
  ena_rx_ctx->l3_csum_err = (_Bool)(((unsigned long)cdesc->status & 8192UL) != 0UL);
  #line 348 
  ena_rx_ctx->l4_csum_err = (_Bool)(((unsigned long)cdesc->status & 16384UL) != 0UL);
  #line 351 
  ena_rx_ctx->l4_csum_checked = (unsigned char)(((unsigned long)cdesc->status & 65536UL) != 0UL);
  #line 354 
  ena_rx_ctx->hash = cdesc->hash;
  #line 355 
  ena_rx_ctx->frag = (_Bool)((((unsigned long)cdesc->status >> 15) & 1UL) != 0UL);
  {
    #line 359 
    bool branch;
    #line 359 
    struct _ddebug __UNIQUE_ID_ddebug406 = {.modname = (char *)"ena", .function = (char *)"ena_com_rx_set_flags", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_eth_com.c", .format = (char *)"ena_rx_ctx->l3_proto %d ena_rx_ctx->l4_proto %d\nena_rx_ctx->l3_csum_err %d ena_rx_ctx->l4_csum_err %d\nhash frag %d frag: %d cdesc_status: %x\n", .lineno = (unsigned int)359U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 359 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug406.key.dd_key_false.key,(_Bool)0);
    #line 359 
    if ((long)((long)((int)branch != 0)) != 0L) 
                                                #line 359 
                                                __dynamic_pr_debug(& __UNIQUE_ID_ddebug406,(char *)"ena",(unsigned int)ena_rx_ctx->l3_proto,(unsigned int)ena_rx_ctx->l4_proto,(int)ena_rx_ctx->l3_csum_err,(int)ena_rx_ctx->l4_csum_err,ena_rx_ctx->hash,(int)ena_rx_ctx->frag,cdesc->status);
  }
  #line 361 
  return;
}

#line 369  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_eth_com.c"
int ena_com_prepare_tx(struct ena_com_io_sq *io_sq, struct ena_com_tx_ctx *ena_tx_ctx, int *nb_hw_desc)
{
  #line 379 
  int i;
  #line 379 
  int rc;
  #line 380 
  bool have_meta;
  #line 381 
  u64 addr_hi;
  #line 386 
  int tmp_1;
  #line 405 
  int tmp_3;
  #line 373 
  struct ena_eth_io_tx_desc *desc = (struct ena_eth_io_tx_desc *)0;
  #line 374 
  struct ena_com_buf *ena_bufs = ena_tx_ctx->ena_bufs;
  #line 375 
  void *buffer_to_push = ena_tx_ctx->push_header;
  #line 376 
  u16 header_len = ena_tx_ctx->header_len;
  #line 377 
  u16 num_bufs = ena_tx_ctx->num_bufs;
  #line 378 
  u16 start_tail = io_sq->tail;
  {
    #line 383 
    int __ret_warn_on = io_sq->direction != (unsigned int)ENA_COM_IO_QUEUE_DIRECTION_TX;
    #line 383 
    if ((long)(__ret_warn_on != 0) != 0L) {
      #line 383 
      __warn_printk((char *)"wrong Q type");
      #line 384 
      ldv_inline_asm();
      #line 385 
      ldv_inline_asm();
    }
    #line 383 
    long tmp = (long)(__ret_warn_on != 0);
  }
  #line 386 
  if (ena_com_sq_have_enough_space(io_sq,
                                       (unsigned short)((int)((unsigned int)num_bufs + 1U)))) 
    #line 386 
    tmp_1 = 0; else 
                    #line 386 
                    tmp_1 = 1;
  #line 386 
  if ((long)tmp_1 != 0L) {
    {
      #line 387 
      bool branch;
      #line 387 
      struct _ddebug __UNIQUE_ID_ddebug408 = {.modname = (char *)"ena", .function = (char *)"ena_com_prepare_tx", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_eth_com.c", .format = (char *)"Not enough space in the tx queue\n", .lineno = (unsigned int)387U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 387 
      branch = arch_static_branch(& __UNIQUE_ID_ddebug408.key.dd_key_false.key,(_Bool)0);
      #line 387 
      if ((long)((long)((int)branch != 0)) != 0L) 
                                                  #line 387 
                                                  __dynamic_pr_debug(& __UNIQUE_ID_ddebug408,(char *)"ena");
    }
    #line 388 
    return -12;
  }
  #line 391 
  if ((long)((unsigned int)header_len > io_sq->tx_max_header_size) != 0L) {
    #line 392 
    printk((char *)"\001",(int)header_len,io_sq->tx_max_header_size);
    #line 394 
    return -22;
  }
  #line 397 
  if ((long)(io_sq->mem_queue_type == (unsigned int)ENA_ADMIN_PLACEMENT_POLICY_DEV) != 0L && (long)(buffer_to_push == (void *)0) != 0L) 
    #line 399 
    return -22;
  #line 401 
  rc = ena_com_write_header_to_bounce(io_sq,(u8 *)buffer_to_push,(unsigned short)((int)header_len));
  #line 402 
  if ((long)(rc != 0) != 0L) 
                             #line 403 
                             return rc;
  #line 405 
  if ((unsigned int)ena_tx_ctx->meta_valid != 0U) {
    #line 405 
    if ((int)ena_com_meta_desc_changed(io_sq,ena_tx_ctx) != 0) 
                                                               #line 405 
                                                               tmp_3 = 1; else 
                                                                    #line 405 
                                                                    tmp_3 = 0;
  }
  else 
       #line 405 
       tmp_3 = 0;
  #line 405 
  have_meta = (_Bool)(tmp_3 != 0);
  #line 407 
  if ((int)have_meta != 0) {
    #line 408 
    rc = ena_com_create_and_store_tx_meta_desc(io_sq,ena_tx_ctx);
    #line 409 
    if ((long)(rc != 0) != 0L) 
                               #line 410 
                               return rc;
  }
  #line 414 
  if ((long)(((unsigned int)num_bufs == 0U && (unsigned int)header_len == 0U) != 0) != 0L) {
    #line 415 
    rc = ena_com_close_bounce_buffer(io_sq);
    #line 416 
    *nb_hw_desc = (int)io_sq->tail - (int)start_tail;
    #line 417 
    return rc;
  }
  #line 420 
  desc = (struct ena_eth_io_tx_desc *)get_sq_desc(io_sq);
  #line 421 
  if ((long)(desc == (struct ena_eth_io_tx_desc *)0) != 0L) 
                                                            #line 422 
                                                            return -14;
  #line 423 
  memset((void *)desc,0,16UL);
  #line 426 
  if (! have_meta) 
                   #line 427 
                   desc->len_ctrl |= 67108864U;
  #line 429 
  desc->buff_addr_hi_hdr_sz |= (unsigned int)((int)header_len << 24);
  #line 432 
  desc->len_ctrl |= (unsigned int)((int)io_sq->phase << 24) & 16777216U;
  #line 435 
  desc->len_ctrl |= 268435456U;
  #line 438 
  desc->meta_ctrl |= (unsigned int)((int)ena_tx_ctx->req_id << 22);
  #line 442 
  desc->meta_ctrl |= (unsigned int)((int)ena_tx_ctx->df << 4) & 16U;
  #line 447 
  desc->len_ctrl |= (unsigned int)(((int)ena_tx_ctx->req_id >> 10) << 16) & 4128768U;
  #line 451 
  if ((unsigned int)ena_tx_ctx->meta_valid != 0U) {
    #line 452 
    desc->meta_ctrl |= (unsigned int)((int)ena_tx_ctx->tso_enable << 7) & 255U;
    #line 455 
    desc->meta_ctrl |= (unsigned int)ena_tx_ctx->l3_proto & 15U;
    #line 457 
    desc->meta_ctrl |= ((unsigned int)ena_tx_ctx->l4_proto << 8) & 7936U;
    #line 460 
    desc->meta_ctrl |= (unsigned int)((int)ena_tx_ctx->l3_csum_enable << 13) & 8192U;
    #line 463 
    desc->meta_ctrl |= (unsigned int)((int)ena_tx_ctx->l4_csum_enable << 14) & 16384U;
    #line 466 
    desc->meta_ctrl |= (unsigned int)((int)ena_tx_ctx->l4_csum_partial << 17) & 131072U;
  }
  #line 471 
  i = 0;
  #line 471 
  while ((int)num_bufs > i) {
    #line 473 
    if ((long)(i != 0) != 0L) {
      #line 474 
      rc = ena_com_sq_update_tail(io_sq);
      #line 475 
      if ((long)(rc != 0) != 0L) 
                                 #line 476 
                                 return rc;
      #line 478 
      desc = (struct ena_eth_io_tx_desc *)get_sq_desc(io_sq);
      #line 479 
      if ((long)(desc == (struct ena_eth_io_tx_desc *)0) != 0L) 
                                                                #line 480 
                                                                return -14;
      #line 482 
      memset((void *)desc,0,16UL);
      #line 484 
      desc->len_ctrl |= (unsigned int)((int)io_sq->phase << 24) & 16777216U;
    }
    #line 489 
    desc->len_ctrl |= (unsigned int)ena_bufs->len;
    #line 492 
    addr_hi = (ena_bufs->paddr & (18446744073709551615ULL >> (64 - (int)io_sq->dma_addr_bits))) >> 32;
    #line 495 
    desc->buff_addr_lo = (unsigned int)ena_bufs->paddr;
    #line 496 
    desc->buff_addr_hi_hdr_sz |= (unsigned int)addr_hi & 65535U;
    #line 498 
    ena_bufs ++;
    #line 471 
    i ++;
  }
  #line 502 
  desc->len_ctrl |= 134217728U;
  #line 504 
  rc = ena_com_sq_update_tail(io_sq);
  #line 505 
  if ((long)(rc != 0) != 0L) 
                             #line 506 
                             return rc;
  #line 508 
  rc = ena_com_close_bounce_buffer(io_sq);
  #line 510 
  *nb_hw_desc = (int)io_sq->tail - (int)start_tail;
  #line 511 
  return rc;
}

#line 514  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_eth_com.c"
int ena_com_rx_pkt(struct ena_com_io_cq *io_cq, struct ena_com_io_sq *io_sq, struct ena_com_rx_ctx *ena_rx_ctx)
{
  #line 521 
  u16 nb_hw_desc;
  #line 522 
  u16 i;
  #line 518 
  struct ena_com_rx_buf_info *ena_buf = ena_rx_ctx->ena_bufs;
  #line 519 
  struct ena_eth_io_rx_cdesc_base *cdesc = (struct ena_eth_io_rx_cdesc_base *)0;
  #line 520 
  u16 cdesc_idx = (unsigned short)0U;
  {
    #line 524 
    int __ret_warn_on = io_cq->direction != (unsigned int)ENA_COM_IO_QUEUE_DIRECTION_RX;
    #line 524 
    if ((long)(__ret_warn_on != 0) != 0L) {
      #line 524 
      __warn_printk((char *)"wrong Q type");
      #line 525 
      ldv_inline_asm();
      #line 526 
      ldv_inline_asm();
    }
    #line 524 
    long tmp = (long)(__ret_warn_on != 0);
  }
  #line 526 
  nb_hw_desc = ena_com_cdesc_rx_pkt_get(io_cq,& cdesc_idx);
  #line 527 
  if ((unsigned int)nb_hw_desc == 0U) {
    #line 528 
    ena_rx_ctx->descs = nb_hw_desc;
    #line 529 
    return 0;
  }
  {
    #line 532 
    bool branch;
    #line 532 
    struct _ddebug __UNIQUE_ID_ddebug410 = {.modname = (char *)"ena", .function = (char *)"ena_com_rx_pkt", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_eth_com.c", .format = (char *)"fetch rx packet: queue %d completed desc: %d\n", .lineno = (unsigned int)532U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 532 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug410.key.dd_key_false.key,(_Bool)0);
    #line 532 
    if ((long)((long)((int)branch != 0)) != 0L) 
                                                #line 532 
                                                __dynamic_pr_debug(& __UNIQUE_ID_ddebug410,(char *)"ena",(int)io_cq->qid,(int)nb_hw_desc);
  }
  #line 535 
  if ((long)((int)nb_hw_desc > ena_rx_ctx->max_bufs) != 0L) {
    #line 536 
    printk((char *)"\001",(int)nb_hw_desc,ena_rx_ctx->max_bufs);
    #line 538 
    return -28;
  }
  #line 541 
  i = (unsigned short)0U;
  #line 541 
  while ((int)i < (int)nb_hw_desc) {
    #line 542 
    cdesc = ena_com_rx_cdesc_idx_to_ptr(io_cq,(unsigned short)((int)cdesc_idx + (int)i));
    #line 544 
    ena_buf->len = cdesc->length;
    #line 545 
    ena_buf->req_id = cdesc->req_id;
    #line 546 
    ena_buf ++;
    #line 541 
    i = (u16)((int)i + 1);
  }
  #line 550 
  io_sq->next_to_comp = (unsigned short)((int)io_sq->next_to_comp + (int)nb_hw_desc);
  {
    #line 552 
    bool branch_0;
    #line 552 
    struct _ddebug __UNIQUE_ID_ddebug411 = {.modname = (char *)"ena", .function = (char *)"ena_com_rx_pkt", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_eth_com.c", .format = (char *)"[%s][QID#%d] Updating SQ head to: %d\n", .lineno = (unsigned int)552U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 552 
    branch_0 = arch_static_branch(& __UNIQUE_ID_ddebug411.key.dd_key_false.key,(_Bool)0);
    #line 552 
    if ((long)((long)((int)branch_0 != 0)) != 0L) 
                                                  #line 552 
                                                  __dynamic_pr_debug(& __UNIQUE_ID_ddebug411,(char *)"ena",(char *)"ena_com_rx_pkt",(int)io_sq->qid,(int)io_sq->next_to_comp);
  }
  #line 556 
  ena_com_rx_set_flags(ena_rx_ctx,cdesc);
  #line 558 
  ena_rx_ctx->descs = nb_hw_desc;
  #line 559 
  return 0;
}

#line 562  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_eth_com.c"
int ena_com_add_single_rx_desc(struct ena_com_io_sq *io_sq, struct ena_com_buf *ena_buf, u16 req_id)
{
  #line 566 
  struct ena_eth_io_rx_desc *desc;
  #line 570 
  int tmp_0_5;
  {
    #line 568 
    int __ret_warn_on = io_sq->direction != (unsigned int)ENA_COM_IO_QUEUE_DIRECTION_RX;
    #line 568 
    if ((long)(__ret_warn_on != 0) != 0L) {
      #line 568 
      __warn_printk((char *)"wrong Q type");
      #line 569 
      ldv_inline_asm();
      #line 570 
      ldv_inline_asm();
    }
    #line 568 
    long tmp = (long)(__ret_warn_on != 0);
  }
  #line 570 
  if (ena_com_sq_have_enough_space(io_sq,(unsigned short)1)) 
                                                             #line 570 
                                                             tmp_0_5 = 0; else 
                                                                    #line 570 
                                                                    tmp_0_5 = 1;
  #line 570 
  if ((long)tmp_0_5 != 0L) 
                           #line 571 
                           return -28;
  #line 573 
  desc = (struct ena_eth_io_rx_desc *)get_sq_desc(io_sq);
  #line 574 
  if ((long)(desc == (struct ena_eth_io_rx_desc *)0) != 0L) 
                                                            #line 575 
                                                            return -14;
  #line 577 
  memset((void *)desc,0,16UL);
  #line 579 
  desc->length = ena_buf->len;
  #line 581 
  desc->ctrl = (unsigned char)4U;
  #line 582 
  desc->ctrl = (unsigned char)((unsigned int)desc->ctrl | 8U);
  #line 583 
  desc->ctrl = (unsigned char)((unsigned int)desc->ctrl | ((unsigned int)io_sq->phase & 1U));
  #line 584 
  desc->ctrl = (unsigned char)((unsigned int)desc->ctrl | 16U);
  #line 586 
  desc->req_id = req_id;
  #line 588 
  desc->buff_addr_lo = (unsigned int)ena_buf->paddr;
  #line 589 
  desc->buff_addr_hi = (unsigned short)((ena_buf->paddr & (18446744073709551615ULL >> (64 - (int)io_sq->dma_addr_bits))) >> 32);
  #line 592 
  return ena_com_sq_update_tail(io_sq);
}

#line 595  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_eth_com.c"
bool ena_com_cq_empty(struct ena_com_io_cq *io_cq)
{
  #line 597 
  struct ena_eth_io_rx_cdesc_base *cdesc;
  #line 599 
  cdesc = ena_com_get_next_rx_cdesc(io_cq);
  #line 600 
  if (cdesc != (struct ena_eth_io_rx_cdesc_base *)0) 
                                                     #line 601 
                                                     return (_Bool)0; else 
                                                                    #line 603 
                                                                    return (_Bool)1;
}

#line 66  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/bitops.h"
__inline static void arch___set_bit(long nr, unsigned long *addr)
{
  #line 68 
  ldv_inline_asm();
  #line 69 
  return;
}

#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bitops/instrumented-non-atomic.h"
__inline static void __set_bit(long nr, unsigned long *addr)
{
  #line 27 
  kasan_check_read((void *)(addr + (unsigned long)(nr / 64L)),8U);
  #line 28 
  arch___set_bit(nr,addr);
  #line 29 
  return;
}

#line 29  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/device.h"
#line 29 
void *ldv_devm_kcalloc(size_t n, size_t size, gfp_t flags);
#line 952  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
#line 761  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amazon/ena/ena.ko/concurrency safety/0/concurrency safety/weaver/ena_ethtool.i.aux"
static void *cif_devm_kcalloc(struct device *dev, size_t n, size_t size, gfp_t flags);
#line 952  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
#line 952 
void devm_kfree(struct device *, void *);
#line 86  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ethtool.h"
#line 86 
u32 ethtool_op_get_link(struct net_device *);
#line 581  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_com.h"
#line 581 
int ena_com_get_link_params(struct ena_com_dev *ena_dev, struct ena_admin_get_feat_resp *resp);
#line 702 
#line 702 
int ena_com_get_hash_function(struct ena_com_dev *ena_dev, enum ena_admin_hash_functions *func, u8 *key);
#line 718 
#line 718 
int ena_com_fill_hash_ctrl(struct ena_com_dev *ena_dev, enum ena_admin_flow_hash_proto proto, u16 hash_fields);
#line 745 
#line 745 
int ena_com_get_hash_ctrl(struct ena_com_dev *ena_dev, enum ena_admin_flow_hash_proto proto, u16 *fields);
#line 797 
#line 797 
int ena_com_indirect_table_get(struct ena_com_dev *ena_dev, u32 *ind_tbl);
#line 890 
#line 890 
bool ena_com_interrupt_moderation_supported(struct ena_com_dev *ena_dev);
#line 899 
#line 899 
int ena_com_update_nonadaptive_moderation_interval_tx(struct ena_com_dev *ena_dev, u32 tx_coalesce_usecs);
#line 909 
#line 909 
int ena_com_update_nonadaptive_moderation_interval_rx(struct ena_com_dev *ena_dev, u32 rx_coalesce_usecs);
#line 943  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_com.h"
__inline static void ena_com_enable_adaptive_moderation(struct ena_com_dev *ena_dev)
{
  #line 945 
  ena_dev->adaptive_coalescing = (_Bool)1;
  #line 946 
  return;
}

#line 948  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_com.h"
__inline static void ena_com_disable_adaptive_moderation(struct ena_com_dev *ena_dev)
{
  #line 950 
  ena_dev->adaptive_coalescing = (_Bool)0;
  #line 951 
  return;
}

#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_ethtool.c"
static struct ena_stats ena_stats_global_strings[7U] = {{.name = {(char)'t', (char)'x', (char)'_', (char)'t', (char)'i', (char)'m', (char)'e', (char)'o', (char)'u', (char)'t'}}, {.name = {(char)'s', (char)'u', (char)'s', (char)'p', (char)'e', (char)'n', (char)'d'}, .stat_offset = 8}, {.name = {(char)'r', (char)'e', (char)'s', (char)'u', (char)'m', (char)'e'}, .stat_offset = 16}, {.name = {(char)'w', (char)'d', (char)'_', (char)'e', (char)'x', (char)'p', (char)'i', (char)'r', (char)'e', (char)'d'}, .stat_offset = 24}, {.name = {(char)'i', (char)'n', (char)'t', (char)'e', (char)'r', (char)'f', (char)'a', (char)'c', (char)'e', (char)'_', (char)'u', (char)'p'}, .stat_offset = 32}, {.name = {(char)'i', (char)'n', (char)'t', (char)'e', (char)'r', (char)'f', (char)'a', (char)'c', (char)'e', (char)'_', (char)'d', (char)'o', (char)'w', (char)'n'}, .stat_offset = 40}, {.name = {(char)'a', (char)'d', (char)'m', (char)'i', (char)'n', (char)'_', (char)'q', (char)'_', (char)'p', (char)'a', (char)'u', (char)'s', (char)'e'}, .stat_offset = 48}};
#line 71  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_ethtool.c"
static struct ena_stats ena_stats_tx_strings[14U] = {{.name = {(char)'c', (char)'n', (char)'t'}}, {.name = {(char)'b', (char)'y', (char)'t', (char)'e', (char)'s'}, .stat_offset = 8}, {.name = {(char)'q', (char)'u', (char)'e', (char)'u', (char)'e', (char)'_', (char)'s', (char)'t', (char)'o', (char)'p'}, .stat_offset = 16}, {.name = {(char)'q', (char)'u', (char)'e', (char)'u', (char)'e', (char)'_', (char)'w', (char)'a', (char)'k', (char)'e', (char)'u', (char)'p'}, .stat_offset = 32}, {.name = {(char)'d', (char)'m', (char)'a', (char)'_', (char)'m', (char)'a', (char)'p', (char)'p', (char)'i', (char)'n', (char)'g', (char)'_', (char)'e', (char)'r', (char)'r'}, .stat_offset = 40}, {.name = {(char)'l', (char)'i', (char)'n', (char)'e', (char)'a', (char)'r', (char)'i', (char)'z', (char)'e'}, .stat_offset = 48}, {.name = {(char)'l', (char)'i', (char)'n', (char)'e', (char)'a', (char)'r', (char)'i', (char)'z', (char)'e', (char)'_', (char)'f', (char)'a', (char)'i', (char)'l', (char)'e', (char)'d'}, .stat_offset = 56}, {.name = {(char)'n', (char)'a', (char)'p', (char)'i', (char)'_', (char)'c', (char)'o', (char)'m', (char)'p'}, .stat_offset = 64}, {.name = {(char)'t', (char)'x', (char)'_', (char)'p', (char)'o', (char)'l', (char)'l'}, .stat_offset = 72}, {.name = {(char)'d', (char)'o', (char)'o', (char)'r', (char)'b', (char)'e', (char)'l', (char)'l', (char)'s'}, .stat_offset = 80}, {.name = {(char)'p', (char)'r', (char)'e', (char)'p', (char)'a', (char)'r', (char)'e', (char)'_', (char)'c', (char)'t', (char)'x', (char)'_', (char)'e', (char)'r', (char)'r'}, .stat_offset = 24}, {.name = {(char)'b', (char)'a', (char)'d', (char)'_', (char)'r', (char)'e', (char)'q', (char)'_', (char)'i', (char)'d'}, .stat_offset = 88}, {.name = {(char)'l', (char)'l', (char)'q', (char)'_', (char)'b', (char)'u', (char)'f', (char)'f', (char)'e', (char)'r', (char)'_', (char)'c', (char)'o', (char)'p', (char)'y'}, .stat_offset = 96}, {.name = {(char)'m', (char)'i', (char)'s', (char)'s', (char)'e', (char)'d', (char)'_', (char)'t', (char)'x'}, .stat_offset = 104}};
#line 88  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_ethtool.c"
static struct ena_stats ena_stats_rx_strings[13U] = {{.name = {(char)'c', (char)'n', (char)'t'}}, {.name = {(char)'b', (char)'y', (char)'t', (char)'e', (char)'s'}, .stat_offset = 8}, {.name = {(char)'r', (char)'x', (char)'_', (char)'c', (char)'o', (char)'p', (char)'y', (char)'b', (char)'r', (char)'e', (char)'a', (char)'k', (char)'_', (char)'p', (char)'k', (char)'t'}, .stat_offset = 16}, {.name = {(char)'c', (char)'s', (char)'u', (char)'m', (char)'_', (char)'g', (char)'o', (char)'o', (char)'d'}, .stat_offset = 24}, {.name = {(char)'r', (char)'e', (char)'f', (char)'i', (char)'l', (char)'_', (char)'p', (char)'a', (char)'r', (char)'t', (char)'i', (char)'a', (char)'l'}, .stat_offset = 32}, {.name = {(char)'b', (char)'a', (char)'d', (char)'_', (char)'c', (char)'s', (char)'u', (char)'m'}, .stat_offset = 40}, {.name = {(char)'p', (char)'a', (char)'g', (char)'e', (char)'_', (char)'a', (char)'l', (char)'l', (char)'o', (char)'c', (char)'_', (char)'f', (char)'a', (char)'i', (char)'l'}, .stat_offset = 48}, {.name = {(char)'s', (char)'k', (char)'b', (char)'_', (char)'a', (char)'l', (char)'l', (char)'o', (char)'c', (char)'_', (char)'f', (char)'a', (char)'i', (char)'l'}, .stat_offset = 56}, {.name = {(char)'d', (char)'m', (char)'a', (char)'_', (char)'m', (char)'a', (char)'p', (char)'p', (char)'i', (char)'n', (char)'g', (char)'_', (char)'e', (char)'r', (char)'r'}, .stat_offset = 64}, {.name = {(char)'b', (char)'a', (char)'d', (char)'_', (char)'d', (char)'e', (char)'s', (char)'c', (char)'_', (char)'n', (char)'u', (char)'m'}, .stat_offset = 72}, {.name = {(char)'b', (char)'a', (char)'d', (char)'_', (char)'r', (char)'e', (char)'q', (char)'_', (char)'i', (char)'d'}, .stat_offset = 80}, {.name = {(char)'e', (char)'m', (char)'p', (char)'t', (char)'y', (char)'_', (char)'r', (char)'x', (char)'_', (char)'r', (char)'i', (char)'n', (char)'g'}, .stat_offset = 88}, {.name = {(char)'c', (char)'s', (char)'u', (char)'m', (char)'_', (char)'u', (char)'n', (char)'c', (char)'h', (char)'e', (char)'c', (char)'k', (char)'e', (char)'d'}, .stat_offset = 96}};
#line 104  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_ethtool.c"
static struct ena_stats ena_stats_ena_com_strings[5U] = {{.name = {(char)'a', (char)'b', (char)'o', (char)'r', (char)'t', (char)'e', (char)'d', (char)'_', (char)'c', (char)'m', (char)'d'}}, {.name = {(char)'s', (char)'u', (char)'b', (char)'m', (char)'i', (char)'t', (char)'t', (char)'e', (char)'d', (char)'_', (char)'c', (char)'m', (char)'d'}, .stat_offset = 4}, {.name = {(char)'c', (char)'o', (char)'m', (char)'p', (char)'l', (char)'e', (char)'t', (char)'e', (char)'d', (char)'_', (char)'c', (char)'m', (char)'d'}, .stat_offset = 8}, {.name = {(char)'o', (char)'u', (char)'t', (char)'_', (char)'o', (char)'f', (char)'_', (char)'s', (char)'p', (char)'a', (char)'c', (char)'e'}, .stat_offset = 12}, {.name = {(char)'n', (char)'o', (char)'_', (char)'c', (char)'o', (char)'m', (char)'p', (char)'l', (char)'e', (char)'t', (char)'i', (char)'o', (char)'n'}, .stat_offset = 16}};
#line 117  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_ethtool.c"
static void ena_safe_update_stat(u64 *src, u64 *dst, struct u64_stats_sync *syncp)
{
  #line 120 
  unsigned int start;
  #line 122 
  while (1) {
    #line 123 
    start = u64_stats_fetch_begin_irq(syncp);
    #line 124 
    *dst = *src;
    #line 125 
    if (! ((int)u64_stats_fetch_retry_irq(syncp,start) != 0)) 
                                                              #line 122 
                                                              break;
  }
  #line 126 
  return;
}

#line 128  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_ethtool.c"
static void ena_queue_stats(struct ena_adapter *adapter, u64 **data)
{
  #line 130 
  struct ena_stats *ena_stats;
  #line 131 
  struct ena_ring *ring;
  #line 133 
  u64 *ptr;
  #line 134 
  int i;
  #line 134 
  int j;
  #line 136 
  i = 0;
  #line 136 
  while (adapter->num_io_queues > (unsigned int)i) {
    #line 138 
    ring = & adapter->tx_ring[i];
    #line 140 
    j = 0;
    #line 140 
    while ((unsigned int)j <= 13U) {
      {
        #line 146 
        u64 *tmp;
        #line 141 
        ena_stats = & ena_stats_tx_strings[j];
        #line 143 
        ptr = (u64 *)((unsigned long)(& ring->__anonCompField_ena_ring_199.tx_stats) + (unsigned long)ena_stats->stat_offset);
        #line 146 
        ;
        #line 146 
        tmp = *data;
        #line 146 
        (*data) ++;
        #line 146 
        ;
        #line 146 
        ;
        #line 146 
        ena_safe_update_stat(ptr,tmp,& ring->syncp);
      }
      #line 140 
      j ++;
    }
    #line 150 
    ring = & adapter->rx_ring[i];
    #line 152 
    j = 0;
    #line 152 
    while ((unsigned int)j <= 12U) {
      {
        #line 158 
        u64 *tmp_0;
        #line 153 
        ena_stats = & ena_stats_rx_strings[j];
        #line 155 
        ptr = (u64 *)((unsigned long)(& ring->__anonCompField_ena_ring_199.rx_stats) + (unsigned long)ena_stats->stat_offset);
        #line 158 
        ;
        #line 158 
        tmp_0 = *data;
        #line 158 
        (*data) ++;
        #line 158 
        ;
        #line 158 
        ;
        #line 158 
        ena_safe_update_stat(ptr,tmp_0,& ring->syncp);
      }
      #line 152 
      j ++;
    }
    #line 136 
    i ++;
  }
  #line 161 
  return;
}

#line 163  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_ethtool.c"
static void ena_dev_admin_queue_stats(struct ena_adapter *adapter, u64 **data)
{
  #line 165 
  struct ena_stats *ena_stats;
  #line 166 
  u32 *ptr;
  #line 167 
  int i;
  #line 169 
  i = 0;
  #line 169 
  while ((unsigned int)i <= 4U) {
    {
      #line 175 
      u64 *tmp;
      #line 170 
      ena_stats = & ena_stats_ena_com_strings[i];
      #line 172 
      ptr = (u32 *)((unsigned long)(& (adapter->ena_dev)->admin_queue.stats) + (unsigned long)ena_stats->stat_offset);
      #line 175 
      tmp = *data;
      #line 175 
      (*data) ++;
      #line 175 
      *tmp = (unsigned long long)*ptr;
    }
    #line 169 
    i ++;
  }
  #line 177 
  return;
}

#line 179  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_ethtool.c"
static void ena_get_ethtool_stats(struct net_device *netdev, struct ethtool_stats *stats, u64 *data)
{
  #line 184 
  struct ena_stats *ena_stats;
  #line 185 
  u64 *ptr;
  #line 186 
  int i;
  #line 183 
  struct ena_adapter *adapter = netdev_priv(netdev);
  #line 188 
  i = 0;
  #line 188 
  while ((unsigned int)i <= 6U) {
    {
      #line 194 
      u64 *tmp_0;
      #line 189 
      ena_stats = & ena_stats_global_strings[i];
      #line 191 
      ptr = (u64 *)((unsigned long)(& adapter->dev_stats) + (unsigned long)ena_stats->stat_offset);
      #line 194 
      ;
      #line 194 
      tmp_0 = data;
      #line 194 
      data ++;
      #line 194 
      ;
      #line 194 
      ;
      #line 194 
      ena_safe_update_stat(ptr,tmp_0,& adapter->syncp);
    }
    #line 188 
    i ++;
  }
  #line 197 
  ena_queue_stats(adapter,& data);
  #line 198 
  ena_dev_admin_queue_stats(adapter,& data);
  #line 199 
  return;
}

#line 201  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_ethtool.c"
int ena_get_sset_count(struct net_device *netdev, int sset)
{
  #line 203 
  struct ena_adapter *adapter = netdev_priv(netdev);
  #line 205 
  if (sset != 1) 
                 #line 206 
                 return -95;
  #line 209 
  return (int)(adapter->num_io_queues * 27U + 12U);
}

#line 212  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_ethtool.c"
static void ena_queue_strings(struct ena_adapter *adapter, u8 **data)
{
  #line 214 
  struct ena_stats *ena_stats;
  #line 215 
  int i;
  #line 215 
  int j;
  #line 217 
  i = 0;
  #line 217 
  while (adapter->num_io_queues > (unsigned int)i) {
    #line 219 
    j = 0;
    #line 219 
    while ((unsigned int)j <= 13U) {
      #line 220 
      ena_stats = & ena_stats_tx_strings[j];
      #line 222 
      snprintf((char *)*data,32UL,(char *)"queue_%u_tx_%s",i,(char *)(& ena_stats->name));
      #line 224 
      *data += 32U;
      #line 219 
      j ++;
    }
    #line 227 
    j = 0;
    #line 227 
    while ((unsigned int)j <= 12U) {
      #line 228 
      ena_stats = & ena_stats_rx_strings[j];
      #line 230 
      snprintf((char *)*data,32UL,(char *)"queue_%u_rx_%s",i,(char *)(& ena_stats->name));
      #line 232 
      *data += 32U;
      #line 227 
      j ++;
    }
    #line 217 
    i ++;
  }
  #line 235 
  return;
}

#line 237  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_ethtool.c"
static void ena_com_dev_strings(u8 **data)
{
  #line 239 
  struct ena_stats *ena_stats;
  #line 240 
  int i;
  #line 242 
  i = 0;
  #line 242 
  while ((unsigned int)i <= 4U) {
    #line 243 
    ena_stats = & ena_stats_ena_com_strings[i];
    #line 245 
    snprintf((char *)*data,32UL,(char *)"ena_admin_q_%s",(char *)(& ena_stats->name));
    #line 247 
    *data += 32U;
    #line 242 
    i ++;
  }
  #line 249 
  return;
}

#line 251  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_ethtool.c"
static void ena_get_strings(struct net_device *netdev, u32 sset, u8 *data)
{
  #line 254 
  struct ena_stats *ena_stats;
  #line 255 
  int i;
  #line 253 
  struct ena_adapter *adapter = netdev_priv(netdev);
  #line 257 
  if (sset != 1U) 
                  #line 258 
                  return;
  #line 260 
  i = 0;
  #line 260 
  while ((unsigned int)i <= 6U) {
    #line 261 
    ena_stats = & ena_stats_global_strings[i];
    #line 263 
    memcpy((void *)data,(void *)(& ena_stats->name),32UL);
    #line 264 
    data += 32U;
    #line 260 
    i ++;
  }
  #line 267 
  ena_queue_strings(adapter,& data);
  #line 268 
  ena_com_dev_strings(& data);
  #line 269 
  return;
}

#line 271  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_ethtool.c"
static int ena_get_link_ksettings(struct net_device *netdev, struct ethtool_link_ksettings *link_ksettings)
{
  #line 276 
  struct ena_admin_get_feature_link_desc *link;
  #line 277 
  struct ena_admin_get_feat_resp feat_resp;
  #line 278 
  int rc;
  #line 274 
  struct ena_adapter *adapter = netdev_priv(netdev);
  #line 275 
  struct ena_com_dev *ena_dev = adapter->ena_dev;
  #line 280 
  rc = ena_com_get_link_params(ena_dev,& feat_resp);
  #line 281 
  if (rc != 0) 
               #line 282 
               return rc;
  #line 284 
  link = & feat_resp.u.link;
  #line 285 
  link_ksettings->base.speed = link->speed;
  #line 287 
  if (((unsigned long)link->flags & 1UL) != 0UL) {
    #line 288 
    __set_bit(6L,(unsigned long *)(& link_ksettings->link_modes.supported));
    #line 290 
    __set_bit(6L,(unsigned long *)(& link_ksettings->link_modes.supported));
  }
  #line 294 
  link_ksettings->base.autoneg = (unsigned char)((unsigned int)((unsigned char)link->flags) & 1U);
  #line 298 
  link_ksettings->base.duplex = (unsigned char)1U;
  #line 300 
  return 0;
}

#line 303  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_ethtool.c"
static int ena_get_coalesce(struct net_device *net_dev, struct ethtool_coalesce *coalesce)
{
  #line 306 
  struct ena_adapter *adapter = netdev_priv(net_dev);
  #line 307 
  struct ena_com_dev *ena_dev = adapter->ena_dev;
  #line 309 
  if (! ena_com_interrupt_moderation_supported(ena_dev)) 
                                                         #line 311 
                                                         return -95;
  #line 314 
  coalesce->tx_coalesce_usecs = ena_com_get_nonadaptive_moderation_interval_tx(ena_dev) * (unsigned int)ena_dev->intr_delay_resolution;
  #line 318 
  coalesce->rx_coalesce_usecs = ena_com_get_nonadaptive_moderation_interval_rx(ena_dev) * (unsigned int)ena_dev->intr_delay_resolution;
  #line 322 
  coalesce->use_adaptive_rx_coalesce = (unsigned int)ena_com_get_adaptive_moderation_enabled(ena_dev);
  #line 325 
  return 0;
}

#line 328  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_ethtool.c"
static void ena_update_tx_rings_intr_moderation(struct ena_adapter *adapter)
{
  #line 330 
  unsigned int val;
  #line 331 
  int i;
  #line 333 
  val = ena_com_get_nonadaptive_moderation_interval_tx(adapter->ena_dev);
  #line 335 
  i = 0;
  #line 335 
  while (adapter->num_io_queues > (unsigned int)i) {
    #line 336 
    adapter->tx_ring[i].smoothed_interval = val;
    #line 335 
    i ++;
  }
  #line 337 
  return;
}

#line 339  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_ethtool.c"
static void ena_update_rx_rings_intr_moderation(struct ena_adapter *adapter)
{
  #line 341 
  unsigned int val;
  #line 342 
  int i;
  #line 344 
  val = ena_com_get_nonadaptive_moderation_interval_rx(adapter->ena_dev);
  #line 346 
  i = 0;
  #line 346 
  while (adapter->num_io_queues > (unsigned int)i) {
    #line 347 
    adapter->rx_ring[i].smoothed_interval = val;
    #line 346 
    i ++;
  }
  #line 348 
  return;
}

#line 350  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_ethtool.c"
static int ena_set_coalesce(struct net_device *net_dev, struct ethtool_coalesce *coalesce)
{
  #line 355 
  int rc;
  #line 353 
  struct ena_adapter *adapter = netdev_priv(net_dev);
  #line 354 
  struct ena_com_dev *ena_dev = adapter->ena_dev;
  #line 357 
  if (! ena_com_interrupt_moderation_supported(ena_dev)) 
                                                         #line 359 
                                                         return -95;
  #line 362 
  rc = ena_com_update_nonadaptive_moderation_interval_tx(ena_dev,coalesce->tx_coalesce_usecs);
  #line 364 
  if (rc != 0) 
               #line 365 
               return rc;
  #line 367 
  ena_update_tx_rings_intr_moderation(adapter);
  #line 369 
  rc = ena_com_update_nonadaptive_moderation_interval_rx(ena_dev,coalesce->rx_coalesce_usecs);
  #line 371 
  if (rc != 0) 
               #line 372 
               return rc;
  #line 374 
  ena_update_rx_rings_intr_moderation(adapter);
  #line 376 
  if (coalesce->use_adaptive_rx_coalesce != 0U) {
    #line 377 
    if (! ena_com_get_adaptive_moderation_enabled(ena_dev)) 
                                                            #line 378 
                                                            ena_com_enable_adaptive_moderation(ena_dev);
  }
  #line 380 
  if (coalesce->use_adaptive_rx_coalesce == 0U) {
    #line 380 
    if ((int)ena_com_get_adaptive_moderation_enabled(ena_dev) != 0) 
                                                                    #line 382 
                                                                    ena_com_disable_adaptive_moderation(ena_dev);
  }
  #line 384 
  return 0;
}

#line 387  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_ethtool.c"
static u32 ena_get_msglevel(struct net_device *netdev)
{
  #line 389 
  struct ena_adapter *adapter = netdev_priv(netdev);
  #line 391 
  return adapter->msg_enable;
}

#line 394  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_ethtool.c"
static void ena_set_msglevel(struct net_device *netdev, u32 value)
{
  #line 396 
  struct ena_adapter *adapter = netdev_priv(netdev);
  #line 398 
  adapter->msg_enable = value;
  #line 399 
  return;
}

#line 401  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_ethtool.c"
static void ena_get_drvinfo(struct net_device *dev, struct ethtool_drvinfo *info)
{
  #line 404 
  struct ena_adapter *adapter = netdev_priv(dev);
  #line 406 
  strlcpy((char *)(& info->driver),(char *)"ena",32UL);
  #line 407 
  strlcpy((char *)(& info->version),(char *)"2",32UL);
  #line 408 
  ;
  #line 408 
  strlcpy((char *)(& info->bus_info),pci_name(adapter->pdev),32UL);
  #line 409 
  return;
}

#line 412  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_ethtool.c"
static void ena_get_ringparam(struct net_device *netdev, struct ethtool_ringparam *ring)
{
  #line 415 
  struct ena_adapter *adapter = netdev_priv(netdev);
  #line 417 
  ring->tx_max_pending = adapter->max_tx_ring_size;
  #line 418 
  ring->rx_max_pending = adapter->max_rx_ring_size;
  #line 419 
  ring->tx_pending = (unsigned int)adapter->tx_ring[0].ring_size;
  #line 420 
  ring->rx_pending = (unsigned int)adapter->rx_ring[0].ring_size;
  #line 421 
  return;
}

#line 423  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_ethtool.c"
static int ena_set_ringparam(struct net_device *netdev, struct ethtool_ringparam *ring)
{
  #line 427 
  u32 new_tx_size;
  #line 427 
  u32 new_rx_size;
  #line 426 
  struct ena_adapter *adapter = netdev_priv(netdev);
  #line 429 
  if (256U > ring->tx_pending) 
                               #line 429 
                               new_tx_size = 256U; else 
                                                        #line 429 
                                                        new_tx_size = ring->tx_pending;
  #line 431 
  if (0 != 0) {
    #line 431 
    unsigned int tmp_26;
    #line 431 
    unsigned int tmp_58;
    #line 431 
    unsigned int tmp_59;
    #line 431 
    unsigned int tmp_27;
    #line 431 
    unsigned int tmp_28;
    #line 431 
    unsigned int tmp_60;
    #line 431 
    unsigned int tmp_61;
    #line 431 
    unsigned int tmp_29;
    #line 431 
    unsigned int tmp_30;
    #line 431 
    unsigned int tmp_31;
    #line 431 
    unsigned int tmp_0;
    #line 431 
    unsigned int tmp_32;
    #line 431 
    unsigned int tmp_33;
    #line 431 
    unsigned int tmp_1;
    #line 431 
    unsigned int tmp_2;
    #line 431 
    unsigned int tmp_34;
    #line 431 
    unsigned int tmp_35;
    #line 431 
    unsigned int tmp_3;
    #line 431 
    unsigned int tmp_4;
    #line 431 
    unsigned int tmp_36;
    #line 431 
    unsigned int tmp_37;
    #line 431 
    unsigned int tmp_5;
    #line 431 
    unsigned int tmp_6;
    #line 431 
    unsigned int tmp_38;
    #line 431 
    unsigned int tmp_39;
    #line 431 
    unsigned int tmp_7;
    #line 431 
    unsigned int tmp_8;
    #line 431 
    unsigned int tmp_40;
    #line 431 
    unsigned int tmp_41;
    #line 431 
    unsigned int tmp_9;
    #line 431 
    unsigned int tmp_10;
    #line 431 
    unsigned int tmp_42;
    #line 431 
    unsigned int tmp_43;
    #line 431 
    unsigned int tmp_11;
    #line 431 
    unsigned int tmp_12;
    #line 431 
    unsigned int tmp_44;
    #line 431 
    unsigned int tmp_45;
    #line 431 
    unsigned int tmp_13;
    #line 431 
    unsigned int tmp_14;
    #line 431 
    unsigned int tmp_46;
    #line 431 
    unsigned int tmp_47;
    #line 431 
    unsigned int tmp_15;
    #line 431 
    unsigned int tmp_16;
    #line 431 
    unsigned int tmp_48;
    #line 431 
    unsigned int tmp_49;
    #line 431 
    unsigned int tmp_17;
    #line 431 
    unsigned int tmp_18;
    #line 431 
    unsigned int tmp_50;
    #line 431 
    unsigned int tmp_51;
    #line 431 
    unsigned int tmp_19;
    #line 431 
    unsigned int tmp_20;
    #line 431 
    unsigned int tmp_52;
    #line 431 
    unsigned int tmp_53;
    #line 431 
    unsigned int tmp_21;
    #line 431 
    unsigned int tmp_22;
    #line 431 
    unsigned int tmp_54;
    #line 431 
    unsigned int tmp_55;
    #line 431 
    unsigned int tmp_23;
    #line 431 
    unsigned int tmp_24;
    #line 431 
    unsigned int tmp_56;
    #line 431 
    unsigned int tmp_57;
    #line 431 
    unsigned int tmp_25;
    #line 431 
    unsigned int tmp_62;
    #line 431 
    if (new_tx_size > 1U) {
      #line 431 
      if (((unsigned long long)new_tx_size & 9223372036854775808ULL) == 0ULL) {
        #line 431 
        if (((unsigned long long)new_tx_size & 4611686018427387904ULL) == 0ULL) {
          #line 431 
          if (((unsigned long long)new_tx_size & 2305843009213693952ULL) == 0ULL) {
            #line 431 
            if (((unsigned long long)new_tx_size & 1152921504606846976ULL) == 0ULL) {
              #line 431 
              if (((unsigned long long)new_tx_size & 576460752303423488ULL) == 0ULL) {
                #line 431 
                if (((unsigned long long)new_tx_size & 288230376151711744ULL) == 0ULL) {
                  #line 431 
                  if (((unsigned long long)new_tx_size & 144115188075855872ULL) == 0ULL) {
                    #line 431 
                    if (((unsigned long long)new_tx_size & 72057594037927936ULL) == 0ULL) {
                      #line 431 
                      if (((unsigned long long)new_tx_size & 36028797018963968ULL) == 0ULL) {
                        #line 431 
                        if (((unsigned long long)new_tx_size & 18014398509481984ULL) == 0ULL) {
                          #line 431 
                          if (((unsigned long long)new_tx_size & 9007199254740992ULL) == 0ULL) {
                            #line 431 
                            if (((unsigned long long)new_tx_size & 4503599627370496ULL) == 0ULL) {
                              #line 431 
                              if (((unsigned long long)new_tx_size & 2251799813685248ULL) == 0ULL) {
                                #line 431 
                                if (((unsigned long long)new_tx_size & 1125899906842624ULL) == 0ULL) {
                                  #line 431 
                                  if (((unsigned long long)new_tx_size & 562949953421312ULL) == 0ULL) {
                                    #line 431 
                                    if (((unsigned long long)new_tx_size & 281474976710656ULL) == 0ULL) {
                                      #line 431 
                                      if (((unsigned long long)new_tx_size & 140737488355328ULL) == 0ULL) {
                                        #line 431 
                                        if (((unsigned long long)new_tx_size & 70368744177664ULL) == 0ULL) {
                                          #line 431 
                                          if (((unsigned long long)new_tx_size & 35184372088832ULL) == 0ULL) {
                                            #line 431 
                                            if (((unsigned long long)new_tx_size & 17592186044416ULL) == 0ULL) {
                                              #line 431 
                                              if (((unsigned long long)new_tx_size & 8796093022208ULL) == 0ULL) {
                                                #line 431 
                                                if (((unsigned long long)new_tx_size & 4398046511104ULL) == 0ULL) {
                                                  #line 431 
                                                  if (((unsigned long long)new_tx_size & 2199023255552ULL) == 0ULL) {
                                                    #line 431 
                                                    if (((unsigned long long)new_tx_size & 1099511627776ULL) == 0ULL) {
                                                      #line 431 
                                                      if (((unsigned long long)new_tx_size & 549755813888ULL) == 0ULL) {
                                                        #line 431 
                                                        if (((unsigned long long)new_tx_size & 274877906944ULL) == 0ULL) {
                                                          #line 431 
                                                          if (((unsigned long long)new_tx_size & 137438953472ULL) == 0ULL) {
                                                            #line 431 
                                                            if (((unsigned long long)new_tx_size & 68719476736ULL) == 0ULL) {
                                                              #line 431 
                                                              if (((unsigned long long)new_tx_size & 34359738368ULL) == 0ULL) {
                                                                #line 431 
                                                                if (((unsigned long long)new_tx_size & 17179869184ULL) == 0ULL) {
                                                                  #line 431 
                                                                  if (
                                                                    ((unsigned long long)new_tx_size & 8589934592ULL) == 0ULL) {
                                                                    #line 431 
                                                                    if (
                                                                    ((unsigned long long)new_tx_size & 4294967296ULL) == 0ULL) {
                                                                    #line 431 
                                                                    if (
                                                                    ((unsigned long long)new_tx_size & 2147483648ULL) == 0ULL) {
                                                                    #line 431 
                                                                    if (
                                                                    ((unsigned long long)new_tx_size & 1073741824ULL) == 0ULL) {
                                                                    #line 431 
                                                                    if (
                                                                    ((unsigned long long)new_tx_size & 536870912ULL) == 0ULL) {
                                                                    #line 431 
                                                                    if (
                                                                    ((unsigned long long)new_tx_size & 268435456ULL) == 0ULL) {
                                                                    #line 431 
                                                                    if (
                                                                    ((unsigned long long)new_tx_size & 134217728ULL) == 0ULL) {
                                                                    #line 431 
                                                                    if (
                                                                    ((unsigned long long)new_tx_size & 67108864ULL) == 0ULL) {
                                                                    #line 431 
                                                                    if (
                                                                    ((unsigned long long)new_tx_size & 33554432ULL) == 0ULL) {
                                                                    #line 431 
                                                                    if (
                                                                    ((unsigned long long)new_tx_size & 16777216ULL) == 0ULL) {
                                                                    #line 431 
                                                                    if (
                                                                    ((unsigned long long)new_tx_size & 8388608ULL) == 0ULL) {
                                                                    #line 431 
                                                                    if (
                                                                    ((unsigned long long)new_tx_size & 4194304ULL) == 0ULL) {
                                                                    #line 431 
                                                                    if (
                                                                    ((unsigned long long)new_tx_size & 2097152ULL) == 0ULL) {
                                                                    #line 431 
                                                                    if (
                                                                    ((unsigned long long)new_tx_size & 1048576ULL) == 0ULL) {
                                                                    #line 431 
                                                                    if (
                                                                    ((unsigned long long)new_tx_size & 524288ULL) == 0ULL) {
                                                                    #line 431 
                                                                    if (
                                                                    ((unsigned long long)new_tx_size & 262144ULL) == 0ULL) {
                                                                    #line 431 
                                                                    if (
                                                                    ((unsigned long long)new_tx_size & 131072ULL) == 0ULL) {
                                                                    #line 431 
                                                                    if (
                                                                    ((unsigned long long)new_tx_size & 65536ULL) == 0ULL) {
                                                                    #line 431 
                                                                    if (
                                                                    ((unsigned long long)new_tx_size & 32768ULL) == 0ULL) {
                                                                    #line 431 
                                                                    if (
                                                                    ((unsigned long long)new_tx_size & 16384ULL) == 0ULL) {
                                                                    #line 431 
                                                                    if (
                                                                    ((unsigned long long)new_tx_size & 8192ULL) == 0ULL) {
                                                                    #line 431 
                                                                    if (
                                                                    ((unsigned long long)new_tx_size & 4096ULL) == 0ULL) {
                                                                    #line 431 
                                                                    if (
                                                                    ((unsigned long long)new_tx_size & 2048ULL) == 0ULL) {
                                                                    #line 431 
                                                                    if (
                                                                    ((unsigned long long)new_tx_size & 1024ULL) == 0ULL) {
                                                                    #line 431 
                                                                    if (
                                                                    ((unsigned long long)new_tx_size & 512ULL) == 0ULL) {
                                                                    #line 431 
                                                                    if (
                                                                    ((unsigned long long)new_tx_size & 256ULL) == 0ULL) {
                                                                    #line 431 
                                                                    if (
                                                                    ((unsigned long long)new_tx_size & 128ULL) == 0ULL) {
                                                                    #line 431 
                                                                    if (
                                                                    ((unsigned long long)new_tx_size & 64ULL) == 0ULL) {
                                                                    #line 431 
                                                                    if (
                                                                    ((unsigned long long)new_tx_size & 32ULL) == 0ULL) {
                                                                    #line 431 
                                                                    if (
                                                                    ((unsigned long long)new_tx_size & 16ULL) == 0ULL) {
                                                                    #line 431 
                                                                    if (
                                                                    ((unsigned long long)new_tx_size & 8ULL) == 0ULL) {
                                                                    #line 431 
                                                                    if (
                                                                    ((unsigned long long)new_tx_size & 4ULL) != 0ULL) 
                                                                    #line 431 
                                                                    tmp_0 = 4U; else 
                                                                    #line 431 
                                                                    tmp_0 = 2U;
                                                                    #line 431 
                                                                    tmp_1 = tmp_0;
                                                                    }
                                                                    else 
                                                                    #line 431 
                                                                    tmp_1 = 8U;
                                                                    #line 431 
                                                                    tmp_2 = tmp_1;
                                                                    }
                                                                    else 
                                                                    #line 431 
                                                                    tmp_2 = 16U;
                                                                    #line 431 
                                                                    tmp_3 = tmp_2;
                                                                    }
                                                                    else 
                                                                    #line 431 
                                                                    tmp_3 = 32U;
                                                                    #line 431 
                                                                    tmp_4 = tmp_3;
                                                                    }
                                                                    else 
                                                                    #line 431 
                                                                    tmp_4 = 64U;
                                                                    #line 431 
                                                                    tmp_5 = tmp_4;
                                                                    }
                                                                    else 
                                                                    #line 431 
                                                                    tmp_5 = 128U;
                                                                    #line 431 
                                                                    tmp_6 = tmp_5;
                                                                    }
                                                                    else 
                                                                    #line 431 
                                                                    tmp_6 = 256U;
                                                                    #line 431 
                                                                    tmp_7 = tmp_6;
                                                                    }
                                                                    else 
                                                                    #line 431 
                                                                    tmp_7 = 512U;
                                                                    #line 431 
                                                                    tmp_8 = tmp_7;
                                                                    }
                                                                    else 
                                                                    #line 431 
                                                                    tmp_8 = 1024U;
                                                                    #line 431 
                                                                    tmp_9 = tmp_8;
                                                                    }
                                                                    else 
                                                                    #line 431 
                                                                    tmp_9 = 2048U;
                                                                    #line 431 
                                                                    tmp_10 = tmp_9;
                                                                    }
                                                                    else 
                                                                    #line 431 
                                                                    tmp_10 = 4096U;
                                                                    #line 431 
                                                                    tmp_11 = tmp_10;
                                                                    }
                                                                    else 
                                                                    #line 431 
                                                                    tmp_11 = 8192U;
                                                                    #line 431 
                                                                    tmp_12 = tmp_11;
                                                                    }
                                                                    else 
                                                                    #line 431 
                                                                    tmp_12 = 16384U;
                                                                    #line 431 
                                                                    tmp_13 = tmp_12;
                                                                    }
                                                                    else 
                                                                    #line 431 
                                                                    tmp_13 = 32768U;
                                                                    #line 431 
                                                                    tmp_14 = tmp_13;
                                                                    }
                                                                    else 
                                                                    #line 431 
                                                                    tmp_14 = 65536U;
                                                                    #line 431 
                                                                    tmp_15 = tmp_14;
                                                                    }
                                                                    else 
                                                                    #line 431 
                                                                    tmp_15 = 131072U;
                                                                    #line 431 
                                                                    tmp_16 = tmp_15;
                                                                    }
                                                                    else 
                                                                    #line 431 
                                                                    tmp_16 = 262144U;
                                                                    #line 431 
                                                                    tmp_17 = tmp_16;
                                                                    }
                                                                    else 
                                                                    #line 431 
                                                                    tmp_17 = 524288U;
                                                                    #line 431 
                                                                    tmp_18 = tmp_17;
                                                                    }
                                                                    else 
                                                                    #line 431 
                                                                    tmp_18 = 1048576U;
                                                                    #line 431 
                                                                    tmp_19 = tmp_18;
                                                                    }
                                                                    else 
                                                                    #line 431 
                                                                    tmp_19 = 2097152U;
                                                                    #line 431 
                                                                    tmp_20 = tmp_19;
                                                                    }
                                                                    else 
                                                                    #line 431 
                                                                    tmp_20 = 4194304U;
                                                                    #line 431 
                                                                    tmp_21 = tmp_20;
                                                                    }
                                                                    else 
                                                                    #line 431 
                                                                    tmp_21 = 8388608U;
                                                                    #line 431 
                                                                    tmp_22 = tmp_21;
                                                                    }
                                                                    else 
                                                                    #line 431 
                                                                    tmp_22 = 16777216U;
                                                                    #line 431 
                                                                    tmp_23 = tmp_22;
                                                                    }
                                                                    else 
                                                                    #line 431 
                                                                    tmp_23 = 33554432U;
                                                                    #line 431 
                                                                    tmp_24 = tmp_23;
                                                                    }
                                                                    else 
                                                                    #line 431 
                                                                    tmp_24 = 67108864U;
                                                                    #line 431 
                                                                    tmp_25 = tmp_24;
                                                                    }
                                                                    else 
                                                                    #line 431 
                                                                    tmp_25 = 134217728U;
                                                                    #line 431 
                                                                    tmp_26 = tmp_25;
                                                                    }
                                                                    else 
                                                                    #line 431 
                                                                    tmp_26 = 268435456U;
                                                                    #line 431 
                                                                    tmp_27 = tmp_26;
                                                                    }
                                                                    else 
                                                                    #line 431 
                                                                    tmp_27 = 536870912U;
                                                                    #line 431 
                                                                    tmp_28 = tmp_27;
                                                                    }
                                                                    else 
                                                                    #line 431 
                                                                    tmp_28 = 1073741824U;
                                                                    #line 431 
                                                                    tmp_29 = tmp_28;
                                                                    }
                                                                    else 
                                                                    #line 431 
                                                                    tmp_29 = 2147483648U;
                                                                    #line 431 
                                                                    tmp_30 = tmp_29;
                                                                    }
                                                                    else 
                                                                    #line 431 
                                                                    tmp_30 = 0U;
                                                                    #line 431 
                                                                    tmp_31 = tmp_30;
                                                                  }
                                                                  else 
                                                                    #line 431 
                                                                    tmp_31 = 0U;
                                                                  #line 431 
                                                                  tmp_32 = tmp_31;
                                                                }
                                                                else 
                                                                  #line 431 
                                                                  tmp_32 = 0U;
                                                                #line 431 
                                                                tmp_33 = tmp_32;
                                                              }
                                                              else 
                                                                   #line 431 
                                                                   tmp_33 = 0U;
                                                              #line 431 
                                                              tmp_34 = tmp_33;
                                                            }
                                                            else 
                                                                 #line 431 
                                                                 tmp_34 = 0U;
                                                            #line 431 
                                                            tmp_35 = tmp_34;
                                                          }
                                                          else 
                                                               #line 431 
                                                               tmp_35 = 0U;
                                                          #line 431 
                                                          tmp_36 = tmp_35;
                                                        }
                                                        else 
                                                             #line 431 
                                                             tmp_36 = 0U;
                                                        #line 431 
                                                        tmp_37 = tmp_36;
                                                      }
                                                      else 
                                                           #line 431 
                                                           tmp_37 = 0U;
                                                      #line 431 
                                                      tmp_38 = tmp_37;
                                                    }
                                                    else 
                                                         #line 431 
                                                         tmp_38 = 0U;
                                                    #line 431 
                                                    tmp_39 = tmp_38;
                                                  }
                                                  else 
                                                       #line 431 
                                                       tmp_39 = 0U;
                                                  #line 431 
                                                  tmp_40 = tmp_39;
                                                }
                                                else 
                                                     #line 431 
                                                     tmp_40 = 0U;
                                                #line 431 
                                                tmp_41 = tmp_40;
                                              }
                                              else 
                                                   #line 431 
                                                   tmp_41 = 0U;
                                              #line 431 
                                              tmp_42 = tmp_41;
                                            }
                                            else 
                                                 #line 431 
                                                 tmp_42 = 0U;
                                            #line 431 
                                            tmp_43 = tmp_42;
                                          }
                                          else 
                                               #line 431 
                                               tmp_43 = 0U;
                                          #line 431 
                                          tmp_44 = tmp_43;
                                        }
                                        else 
                                             #line 431 
                                             tmp_44 = 0U;
                                        #line 431 
                                        tmp_45 = tmp_44;
                                      }
                                      else 
                                           #line 431 
                                           tmp_45 = 0U;
                                      #line 431 
                                      tmp_46 = tmp_45;
                                    }
                                    else 
                                         #line 431 
                                         tmp_46 = 0U;
                                    #line 431 
                                    tmp_47 = tmp_46;
                                  }
                                  else 
                                       #line 431 
                                       tmp_47 = 0U;
                                  #line 431 
                                  tmp_48 = tmp_47;
                                }
                                else 
                                     #line 431 
                                     tmp_48 = 0U;
                                #line 431 
                                tmp_49 = tmp_48;
                              }
                              else 
                                   #line 431 
                                   tmp_49 = 0U;
                              #line 431 
                              tmp_50 = tmp_49;
                            }
                            else 
                                 #line 431 
                                 tmp_50 = 0U;
                            #line 431 
                            tmp_51 = tmp_50;
                          }
                          else 
                               #line 431 
                               tmp_51 = 0U;
                          #line 431 
                          tmp_52 = tmp_51;
                        }
                        else 
                             #line 431 
                             tmp_52 = 0U;
                        #line 431 
                        tmp_53 = tmp_52;
                      }
                      else 
                           #line 431 
                           tmp_53 = 0U;
                      #line 431 
                      tmp_54 = tmp_53;
                    }
                    else 
                         #line 431 
                         tmp_54 = 0U;
                    #line 431 
                    tmp_55 = tmp_54;
                  }
                  else 
                       #line 431 
                       tmp_55 = 0U;
                  #line 431 
                  tmp_56 = tmp_55;
                }
                else 
                     #line 431 
                     tmp_56 = 0U;
                #line 431 
                tmp_57 = tmp_56;
              }
              else 
                   #line 431 
                   tmp_57 = 0U;
              #line 431 
              tmp_58 = tmp_57;
            }
            else 
                 #line 431 
                 tmp_58 = 0U;
            #line 431 
            tmp_59 = tmp_58;
          }
          else 
               #line 431 
               tmp_59 = 0U;
          #line 431 
          tmp_60 = tmp_59;
        }
        else 
             #line 431 
             tmp_60 = 0U;
        #line 431 
        tmp_61 = tmp_60;
      }
      else 
           #line 431 
           tmp_61 = 0U;
      #line 431 
      tmp_62 = tmp_61;
    }
    else 
         #line 431 
         tmp_62 = 1U;
    #line 431 
    new_tx_size = tmp_62;
  }
  else {
    #line 431 
    new_tx_size = (unsigned int)__rounddown_pow_of_two((unsigned long)new_tx_size);
  }
  #line 433 
  if (256U > ring->rx_pending) 
                               #line 433 
                               new_rx_size = 256U; else 
                                                        #line 433 
                                                        new_rx_size = ring->rx_pending;
  #line 435 
  if (0 != 0) {
    #line 435 
    unsigned int tmp_90;
    #line 435 
    unsigned int tmp_122;
    #line 435 
    unsigned int tmp_123;
    #line 435 
    unsigned int tmp_91;
    #line 435 
    unsigned int tmp_92;
    #line 435 
    unsigned int tmp_124;
    #line 435 
    unsigned int tmp_125;
    #line 435 
    unsigned int tmp_93;
    #line 435 
    unsigned int tmp_94;
    #line 435 
    unsigned int tmp_95;
    #line 435 
    unsigned int tmp_64;
    #line 435 
    unsigned int tmp_96;
    #line 435 
    unsigned int tmp_97;
    #line 435 
    unsigned int tmp_65;
    #line 435 
    unsigned int tmp_66;
    #line 435 
    unsigned int tmp_98;
    #line 435 
    unsigned int tmp_99;
    #line 435 
    unsigned int tmp_67;
    #line 435 
    unsigned int tmp_68;
    #line 435 
    unsigned int tmp_100;
    #line 435 
    unsigned int tmp_101;
    #line 435 
    unsigned int tmp_69;
    #line 435 
    unsigned int tmp_70;
    #line 435 
    unsigned int tmp_102;
    #line 435 
    unsigned int tmp_103;
    #line 435 
    unsigned int tmp_71;
    #line 435 
    unsigned int tmp_72;
    #line 435 
    unsigned int tmp_104;
    #line 435 
    unsigned int tmp_105;
    #line 435 
    unsigned int tmp_73;
    #line 435 
    unsigned int tmp_74;
    #line 435 
    unsigned int tmp_106;
    #line 435 
    unsigned int tmp_107;
    #line 435 
    unsigned int tmp_75;
    #line 435 
    unsigned int tmp_76;
    #line 435 
    unsigned int tmp_108;
    #line 435 
    unsigned int tmp_109;
    #line 435 
    unsigned int tmp_77;
    #line 435 
    unsigned int tmp_78;
    #line 435 
    unsigned int tmp_110;
    #line 435 
    unsigned int tmp_111;
    #line 435 
    unsigned int tmp_79;
    #line 435 
    unsigned int tmp_80;
    #line 435 
    unsigned int tmp_112;
    #line 435 
    unsigned int tmp_113;
    #line 435 
    unsigned int tmp_81;
    #line 435 
    unsigned int tmp_82;
    #line 435 
    unsigned int tmp_114;
    #line 435 
    unsigned int tmp_115;
    #line 435 
    unsigned int tmp_83;
    #line 435 
    unsigned int tmp_84;
    #line 435 
    unsigned int tmp_116;
    #line 435 
    unsigned int tmp_117;
    #line 435 
    unsigned int tmp_85;
    #line 435 
    unsigned int tmp_86;
    #line 435 
    unsigned int tmp_118;
    #line 435 
    unsigned int tmp_119;
    #line 435 
    unsigned int tmp_87;
    #line 435 
    unsigned int tmp_88;
    #line 435 
    unsigned int tmp_120;
    #line 435 
    unsigned int tmp_121;
    #line 435 
    unsigned int tmp_89;
    #line 435 
    unsigned int tmp_126;
    #line 435 
    if (new_rx_size > 1U) {
      #line 435 
      if (((unsigned long long)new_rx_size & 9223372036854775808ULL) == 0ULL) {
        #line 435 
        if (((unsigned long long)new_rx_size & 4611686018427387904ULL) == 0ULL) {
          #line 435 
          if (((unsigned long long)new_rx_size & 2305843009213693952ULL) == 0ULL) {
            #line 435 
            if (((unsigned long long)new_rx_size & 1152921504606846976ULL) == 0ULL) {
              #line 435 
              if (((unsigned long long)new_rx_size & 576460752303423488ULL) == 0ULL) {
                #line 435 
                if (((unsigned long long)new_rx_size & 288230376151711744ULL) == 0ULL) {
                  #line 435 
                  if (((unsigned long long)new_rx_size & 144115188075855872ULL) == 0ULL) {
                    #line 435 
                    if (((unsigned long long)new_rx_size & 72057594037927936ULL) == 0ULL) {
                      #line 435 
                      if (((unsigned long long)new_rx_size & 36028797018963968ULL) == 0ULL) {
                        #line 435 
                        if (((unsigned long long)new_rx_size & 18014398509481984ULL) == 0ULL) {
                          #line 435 
                          if (((unsigned long long)new_rx_size & 9007199254740992ULL) == 0ULL) {
                            #line 435 
                            if (((unsigned long long)new_rx_size & 4503599627370496ULL) == 0ULL) {
                              #line 435 
                              if (((unsigned long long)new_rx_size & 2251799813685248ULL) == 0ULL) {
                                #line 435 
                                if (((unsigned long long)new_rx_size & 1125899906842624ULL) == 0ULL) {
                                  #line 435 
                                  if (((unsigned long long)new_rx_size & 562949953421312ULL) == 0ULL) {
                                    #line 435 
                                    if (((unsigned long long)new_rx_size & 281474976710656ULL) == 0ULL) {
                                      #line 435 
                                      if (((unsigned long long)new_rx_size & 140737488355328ULL) == 0ULL) {
                                        #line 435 
                                        if (((unsigned long long)new_rx_size & 70368744177664ULL) == 0ULL) {
                                          #line 435 
                                          if (((unsigned long long)new_rx_size & 35184372088832ULL) == 0ULL) {
                                            #line 435 
                                            if (((unsigned long long)new_rx_size & 17592186044416ULL) == 0ULL) {
                                              #line 435 
                                              if (((unsigned long long)new_rx_size & 8796093022208ULL) == 0ULL) {
                                                #line 435 
                                                if (((unsigned long long)new_rx_size & 4398046511104ULL) == 0ULL) {
                                                  #line 435 
                                                  if (((unsigned long long)new_rx_size & 2199023255552ULL) == 0ULL) {
                                                    #line 435 
                                                    if (((unsigned long long)new_rx_size & 1099511627776ULL) == 0ULL) {
                                                      #line 435 
                                                      if (((unsigned long long)new_rx_size & 549755813888ULL) == 0ULL) {
                                                        #line 435 
                                                        if (((unsigned long long)new_rx_size & 274877906944ULL) == 0ULL) {
                                                          #line 435 
                                                          if (((unsigned long long)new_rx_size & 137438953472ULL) == 0ULL) {
                                                            #line 435 
                                                            if (((unsigned long long)new_rx_size & 68719476736ULL) == 0ULL) {
                                                              #line 435 
                                                              if (((unsigned long long)new_rx_size & 34359738368ULL) == 0ULL) {
                                                                #line 435 
                                                                if (((unsigned long long)new_rx_size & 17179869184ULL) == 0ULL) {
                                                                  #line 435 
                                                                  if (
                                                                    ((unsigned long long)new_rx_size & 8589934592ULL) == 0ULL) {
                                                                    #line 435 
                                                                    if (
                                                                    ((unsigned long long)new_rx_size & 4294967296ULL) == 0ULL) {
                                                                    #line 435 
                                                                    if (
                                                                    ((unsigned long long)new_rx_size & 2147483648ULL) == 0ULL) {
                                                                    #line 435 
                                                                    if (
                                                                    ((unsigned long long)new_rx_size & 1073741824ULL) == 0ULL) {
                                                                    #line 435 
                                                                    if (
                                                                    ((unsigned long long)new_rx_size & 536870912ULL) == 0ULL) {
                                                                    #line 435 
                                                                    if (
                                                                    ((unsigned long long)new_rx_size & 268435456ULL) == 0ULL) {
                                                                    #line 435 
                                                                    if (
                                                                    ((unsigned long long)new_rx_size & 134217728ULL) == 0ULL) {
                                                                    #line 435 
                                                                    if (
                                                                    ((unsigned long long)new_rx_size & 67108864ULL) == 0ULL) {
                                                                    #line 435 
                                                                    if (
                                                                    ((unsigned long long)new_rx_size & 33554432ULL) == 0ULL) {
                                                                    #line 435 
                                                                    if (
                                                                    ((unsigned long long)new_rx_size & 16777216ULL) == 0ULL) {
                                                                    #line 435 
                                                                    if (
                                                                    ((unsigned long long)new_rx_size & 8388608ULL) == 0ULL) {
                                                                    #line 435 
                                                                    if (
                                                                    ((unsigned long long)new_rx_size & 4194304ULL) == 0ULL) {
                                                                    #line 435 
                                                                    if (
                                                                    ((unsigned long long)new_rx_size & 2097152ULL) == 0ULL) {
                                                                    #line 435 
                                                                    if (
                                                                    ((unsigned long long)new_rx_size & 1048576ULL) == 0ULL) {
                                                                    #line 435 
                                                                    if (
                                                                    ((unsigned long long)new_rx_size & 524288ULL) == 0ULL) {
                                                                    #line 435 
                                                                    if (
                                                                    ((unsigned long long)new_rx_size & 262144ULL) == 0ULL) {
                                                                    #line 435 
                                                                    if (
                                                                    ((unsigned long long)new_rx_size & 131072ULL) == 0ULL) {
                                                                    #line 435 
                                                                    if (
                                                                    ((unsigned long long)new_rx_size & 65536ULL) == 0ULL) {
                                                                    #line 435 
                                                                    if (
                                                                    ((unsigned long long)new_rx_size & 32768ULL) == 0ULL) {
                                                                    #line 435 
                                                                    if (
                                                                    ((unsigned long long)new_rx_size & 16384ULL) == 0ULL) {
                                                                    #line 435 
                                                                    if (
                                                                    ((unsigned long long)new_rx_size & 8192ULL) == 0ULL) {
                                                                    #line 435 
                                                                    if (
                                                                    ((unsigned long long)new_rx_size & 4096ULL) == 0ULL) {
                                                                    #line 435 
                                                                    if (
                                                                    ((unsigned long long)new_rx_size & 2048ULL) == 0ULL) {
                                                                    #line 435 
                                                                    if (
                                                                    ((unsigned long long)new_rx_size & 1024ULL) == 0ULL) {
                                                                    #line 435 
                                                                    if (
                                                                    ((unsigned long long)new_rx_size & 512ULL) == 0ULL) {
                                                                    #line 435 
                                                                    if (
                                                                    ((unsigned long long)new_rx_size & 256ULL) == 0ULL) {
                                                                    #line 435 
                                                                    if (
                                                                    ((unsigned long long)new_rx_size & 128ULL) == 0ULL) {
                                                                    #line 435 
                                                                    if (
                                                                    ((unsigned long long)new_rx_size & 64ULL) == 0ULL) {
                                                                    #line 435 
                                                                    if (
                                                                    ((unsigned long long)new_rx_size & 32ULL) == 0ULL) {
                                                                    #line 435 
                                                                    if (
                                                                    ((unsigned long long)new_rx_size & 16ULL) == 0ULL) {
                                                                    #line 435 
                                                                    if (
                                                                    ((unsigned long long)new_rx_size & 8ULL) == 0ULL) {
                                                                    #line 435 
                                                                    if (
                                                                    ((unsigned long long)new_rx_size & 4ULL) != 0ULL) 
                                                                    #line 435 
                                                                    tmp_64 = 4U; else 
                                                                    #line 435 
                                                                    tmp_64 = 2U;
                                                                    #line 435 
                                                                    tmp_65 = tmp_64;
                                                                    }
                                                                    else 
                                                                    #line 435 
                                                                    tmp_65 = 8U;
                                                                    #line 435 
                                                                    tmp_66 = tmp_65;
                                                                    }
                                                                    else 
                                                                    #line 435 
                                                                    tmp_66 = 16U;
                                                                    #line 435 
                                                                    tmp_67 = tmp_66;
                                                                    }
                                                                    else 
                                                                    #line 435 
                                                                    tmp_67 = 32U;
                                                                    #line 435 
                                                                    tmp_68 = tmp_67;
                                                                    }
                                                                    else 
                                                                    #line 435 
                                                                    tmp_68 = 64U;
                                                                    #line 435 
                                                                    tmp_69 = tmp_68;
                                                                    }
                                                                    else 
                                                                    #line 435 
                                                                    tmp_69 = 128U;
                                                                    #line 435 
                                                                    tmp_70 = tmp_69;
                                                                    }
                                                                    else 
                                                                    #line 435 
                                                                    tmp_70 = 256U;
                                                                    #line 435 
                                                                    tmp_71 = tmp_70;
                                                                    }
                                                                    else 
                                                                    #line 435 
                                                                    tmp_71 = 512U;
                                                                    #line 435 
                                                                    tmp_72 = tmp_71;
                                                                    }
                                                                    else 
                                                                    #line 435 
                                                                    tmp_72 = 1024U;
                                                                    #line 435 
                                                                    tmp_73 = tmp_72;
                                                                    }
                                                                    else 
                                                                    #line 435 
                                                                    tmp_73 = 2048U;
                                                                    #line 435 
                                                                    tmp_74 = tmp_73;
                                                                    }
                                                                    else 
                                                                    #line 435 
                                                                    tmp_74 = 4096U;
                                                                    #line 435 
                                                                    tmp_75 = tmp_74;
                                                                    }
                                                                    else 
                                                                    #line 435 
                                                                    tmp_75 = 8192U;
                                                                    #line 435 
                                                                    tmp_76 = tmp_75;
                                                                    }
                                                                    else 
                                                                    #line 435 
                                                                    tmp_76 = 16384U;
                                                                    #line 435 
                                                                    tmp_77 = tmp_76;
                                                                    }
                                                                    else 
                                                                    #line 435 
                                                                    tmp_77 = 32768U;
                                                                    #line 435 
                                                                    tmp_78 = tmp_77;
                                                                    }
                                                                    else 
                                                                    #line 435 
                                                                    tmp_78 = 65536U;
                                                                    #line 435 
                                                                    tmp_79 = tmp_78;
                                                                    }
                                                                    else 
                                                                    #line 435 
                                                                    tmp_79 = 131072U;
                                                                    #line 435 
                                                                    tmp_80 = tmp_79;
                                                                    }
                                                                    else 
                                                                    #line 435 
                                                                    tmp_80 = 262144U;
                                                                    #line 435 
                                                                    tmp_81 = tmp_80;
                                                                    }
                                                                    else 
                                                                    #line 435 
                                                                    tmp_81 = 524288U;
                                                                    #line 435 
                                                                    tmp_82 = tmp_81;
                                                                    }
                                                                    else 
                                                                    #line 435 
                                                                    tmp_82 = 1048576U;
                                                                    #line 435 
                                                                    tmp_83 = tmp_82;
                                                                    }
                                                                    else 
                                                                    #line 435 
                                                                    tmp_83 = 2097152U;
                                                                    #line 435 
                                                                    tmp_84 = tmp_83;
                                                                    }
                                                                    else 
                                                                    #line 435 
                                                                    tmp_84 = 4194304U;
                                                                    #line 435 
                                                                    tmp_85 = tmp_84;
                                                                    }
                                                                    else 
                                                                    #line 435 
                                                                    tmp_85 = 8388608U;
                                                                    #line 435 
                                                                    tmp_86 = tmp_85;
                                                                    }
                                                                    else 
                                                                    #line 435 
                                                                    tmp_86 = 16777216U;
                                                                    #line 435 
                                                                    tmp_87 = tmp_86;
                                                                    }
                                                                    else 
                                                                    #line 435 
                                                                    tmp_87 = 33554432U;
                                                                    #line 435 
                                                                    tmp_88 = tmp_87;
                                                                    }
                                                                    else 
                                                                    #line 435 
                                                                    tmp_88 = 67108864U;
                                                                    #line 435 
                                                                    tmp_89 = tmp_88;
                                                                    }
                                                                    else 
                                                                    #line 435 
                                                                    tmp_89 = 134217728U;
                                                                    #line 435 
                                                                    tmp_90 = tmp_89;
                                                                    }
                                                                    else 
                                                                    #line 435 
                                                                    tmp_90 = 268435456U;
                                                                    #line 435 
                                                                    tmp_91 = tmp_90;
                                                                    }
                                                                    else 
                                                                    #line 435 
                                                                    tmp_91 = 536870912U;
                                                                    #line 435 
                                                                    tmp_92 = tmp_91;
                                                                    }
                                                                    else 
                                                                    #line 435 
                                                                    tmp_92 = 1073741824U;
                                                                    #line 435 
                                                                    tmp_93 = tmp_92;
                                                                    }
                                                                    else 
                                                                    #line 435 
                                                                    tmp_93 = 2147483648U;
                                                                    #line 435 
                                                                    tmp_94 = tmp_93;
                                                                    }
                                                                    else 
                                                                    #line 435 
                                                                    tmp_94 = 0U;
                                                                    #line 435 
                                                                    tmp_95 = tmp_94;
                                                                  }
                                                                  else 
                                                                    #line 435 
                                                                    tmp_95 = 0U;
                                                                  #line 435 
                                                                  tmp_96 = tmp_95;
                                                                }
                                                                else 
                                                                  #line 435 
                                                                  tmp_96 = 0U;
                                                                #line 435 
                                                                tmp_97 = tmp_96;
                                                              }
                                                              else 
                                                                   #line 435 
                                                                   tmp_97 = 0U;
                                                              #line 435 
                                                              tmp_98 = tmp_97;
                                                            }
                                                            else 
                                                                 #line 435 
                                                                 tmp_98 = 0U;
                                                            #line 435 
                                                            tmp_99 = tmp_98;
                                                          }
                                                          else 
                                                               #line 435 
                                                               tmp_99 = 0U;
                                                          #line 435 
                                                          tmp_100 = tmp_99;
                                                        }
                                                        else 
                                                             #line 435 
                                                             tmp_100 = 0U;
                                                        #line 435 
                                                        tmp_101 = tmp_100;
                                                      }
                                                      else 
                                                           #line 435 
                                                           tmp_101 = 0U;
                                                      #line 435 
                                                      tmp_102 = tmp_101;
                                                    }
                                                    else 
                                                         #line 435 
                                                         tmp_102 = 0U;
                                                    #line 435 
                                                    tmp_103 = tmp_102;
                                                  }
                                                  else 
                                                       #line 435 
                                                       tmp_103 = 0U;
                                                  #line 435 
                                                  tmp_104 = tmp_103;
                                                }
                                                else 
                                                     #line 435 
                                                     tmp_104 = 0U;
                                                #line 435 
                                                tmp_105 = tmp_104;
                                              }
                                              else 
                                                   #line 435 
                                                   tmp_105 = 0U;
                                              #line 435 
                                              tmp_106 = tmp_105;
                                            }
                                            else 
                                                 #line 435 
                                                 tmp_106 = 0U;
                                            #line 435 
                                            tmp_107 = tmp_106;
                                          }
                                          else 
                                               #line 435 
                                               tmp_107 = 0U;
                                          #line 435 
                                          tmp_108 = tmp_107;
                                        }
                                        else 
                                             #line 435 
                                             tmp_108 = 0U;
                                        #line 435 
                                        tmp_109 = tmp_108;
                                      }
                                      else 
                                           #line 435 
                                           tmp_109 = 0U;
                                      #line 435 
                                      tmp_110 = tmp_109;
                                    }
                                    else 
                                         #line 435 
                                         tmp_110 = 0U;
                                    #line 435 
                                    tmp_111 = tmp_110;
                                  }
                                  else 
                                       #line 435 
                                       tmp_111 = 0U;
                                  #line 435 
                                  tmp_112 = tmp_111;
                                }
                                else 
                                     #line 435 
                                     tmp_112 = 0U;
                                #line 435 
                                tmp_113 = tmp_112;
                              }
                              else 
                                   #line 435 
                                   tmp_113 = 0U;
                              #line 435 
                              tmp_114 = tmp_113;
                            }
                            else 
                                 #line 435 
                                 tmp_114 = 0U;
                            #line 435 
                            tmp_115 = tmp_114;
                          }
                          else 
                               #line 435 
                               tmp_115 = 0U;
                          #line 435 
                          tmp_116 = tmp_115;
                        }
                        else 
                             #line 435 
                             tmp_116 = 0U;
                        #line 435 
                        tmp_117 = tmp_116;
                      }
                      else 
                           #line 435 
                           tmp_117 = 0U;
                      #line 435 
                      tmp_118 = tmp_117;
                    }
                    else 
                         #line 435 
                         tmp_118 = 0U;
                    #line 435 
                    tmp_119 = tmp_118;
                  }
                  else 
                       #line 435 
                       tmp_119 = 0U;
                  #line 435 
                  tmp_120 = tmp_119;
                }
                else 
                     #line 435 
                     tmp_120 = 0U;
                #line 435 
                tmp_121 = tmp_120;
              }
              else 
                   #line 435 
                   tmp_121 = 0U;
              #line 435 
              tmp_122 = tmp_121;
            }
            else 
                 #line 435 
                 tmp_122 = 0U;
            #line 435 
            tmp_123 = tmp_122;
          }
          else 
               #line 435 
               tmp_123 = 0U;
          #line 435 
          tmp_124 = tmp_123;
        }
        else 
             #line 435 
             tmp_124 = 0U;
        #line 435 
        tmp_125 = tmp_124;
      }
      else 
           #line 435 
           tmp_125 = 0U;
      #line 435 
      tmp_126 = tmp_125;
    }
    else 
         #line 435 
         tmp_126 = 1U;
    #line 435 
    new_rx_size = tmp_126;
  }
  else {
    #line 435 
    new_rx_size = (unsigned int)__rounddown_pow_of_two((unsigned long)new_rx_size);
  }
  #line 437 
  if (adapter->requested_tx_ring_size == new_tx_size && adapter->requested_rx_ring_size == new_rx_size) 
    #line 439 
    return 0;
  #line 441 
  return ena_update_queue_sizes(adapter,new_tx_size,new_rx_size);
}

#line 444  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_ethtool.c"
static u32 ena_flow_hash_to_flow_type(u16 hash_fields)
{
  #line 446 
  u32 data = 0U;
  #line 448 
  if (((int)hash_fields & 1) != 0) 
                                   #line 449 
                                   data |= 2U;
  #line 451 
  if (((int)hash_fields & 4) != 0) 
                                   #line 452 
                                   data |= 32U;
  #line 454 
  if (((int)hash_fields & 8) != 0) 
                                   #line 455 
                                   data |= 16U;
  #line 457 
  if (((int)hash_fields & 16) != 0) 
                                    #line 458 
                                    data |= 128U;
  #line 460 
  if (((int)hash_fields & 32) != 0) 
                                    #line 461 
                                    data |= 64U;
  #line 463 
  return data;
}

#line 466  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_ethtool.c"
static u16 ena_flow_data_to_flow_hash(u32 hash_fields)
{
  #line 468 
  u16 data = (unsigned short)0U;
  #line 470 
  if ((hash_fields & 2U) != 0U) 
                                #line 471 
                                data = (unsigned short)((unsigned int)data | 1U);
  #line 473 
  if ((hash_fields & 32U) != 0U) 
                                 #line 474 
                                 data = (unsigned short)((unsigned int)data | 4U);
  #line 476 
  if ((hash_fields & 16U) != 0U) 
                                 #line 477 
                                 data = (unsigned short)((unsigned int)data | 8U);
  #line 479 
  if ((hash_fields & 128U) != 0U) 
                                  #line 480 
                                  data = (unsigned short)((unsigned int)data | 16U);
  #line 482 
  if ((hash_fields & 64U) != 0U) 
                                 #line 483 
                                 data = (unsigned short)((unsigned int)data | 32U);
  #line 485 
  return data;
}

#line 488  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_ethtool.c"
static int ena_get_rss_hash(struct ena_com_dev *ena_dev, struct ethtool_rxnfc *cmd)
{
  #line 491 
  enum ena_admin_flow_hash_proto proto;
  #line 492 
  u16 hash_fields;
  #line 493 
  int rc;
  #line 495 
  cmd->data = 0ULL;
  #line 497 
  switch (cmd->flow_type) {
    #line 498 
    case (__u32)1: 
                   #line 498 
    ;
    #line 499 
    proto = ENA_ADMIN_RSS_TCP4;
    #line 500 
    break;
    #line 501 
    case (__u32)2: 
                   #line 501 
    ;
    #line 502 
    proto = ENA_ADMIN_RSS_UDP4;
    #line 503 
    break;
    #line 504 
    case (__u32)5: 
                   #line 504 
    ;
    #line 505 
    proto = ENA_ADMIN_RSS_TCP6;
    #line 506 
    break;
    #line 507 
    case (__u32)6: 
                   #line 507 
    ;
    #line 508 
    proto = ENA_ADMIN_RSS_UDP6;
    #line 509 
    break;
    #line 510 
    case (__u32)16: 
                    #line 510 
    ;
    #line 511 
    proto = ENA_ADMIN_RSS_IP4;
    #line 512 
    break;
    #line 513 
    case (__u32)17: 
                    #line 513 
    ;
    #line 514 
    proto = ENA_ADMIN_RSS_IP6;
    #line 515 
    break;
    #line 516 
    case (__u32)18: 
                    #line 516 
    ;
    #line 517 
    proto = ENA_ADMIN_RSS_NOT_IP;
    #line 518 
    break;
    #line 519 
    case (__u32)9: 
                   #line 519 
    ;
    #line 520 
    case (__u32)10: 
                    #line 520 
    ;
    #line 521 
    case (__u32)11: 
                    #line 521 
    ;
    #line 522 
    case (__u32)12: 
                    #line 522 
    ;
    #line 523 
    case (__u32)3: 
                   #line 523 
    ;
    #line 524 
    case (__u32)4: 
                   #line 524 
    ;
    #line 525 
    return -95;
    #line 526 
    default: 
             #line 526 
    ;
    #line 527 
    return -22;
  }
  #line 530 
  rc = ena_com_get_hash_ctrl(ena_dev,proto,& hash_fields);
  #line 531 
  if (rc != 0) 
               #line 532 
               return rc;
  #line 534 
  cmd->data = (unsigned long long)ena_flow_hash_to_flow_type((unsigned short)((int)hash_fields));
  #line 536 
  return 0;
}

#line 539  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_ethtool.c"
static int ena_set_rss_hash(struct ena_com_dev *ena_dev, struct ethtool_rxnfc *cmd)
{
  #line 542 
  enum ena_admin_flow_hash_proto proto;
  #line 543 
  u16 hash_fields;
  #line 545 
  switch (cmd->flow_type) {
    #line 546 
    case (__u32)1: 
                   #line 546 
    ;
    #line 547 
    proto = ENA_ADMIN_RSS_TCP4;
    #line 548 
    break;
    #line 549 
    case (__u32)2: 
                   #line 549 
    ;
    #line 550 
    proto = ENA_ADMIN_RSS_UDP4;
    #line 551 
    break;
    #line 552 
    case (__u32)5: 
                   #line 552 
    ;
    #line 553 
    proto = ENA_ADMIN_RSS_TCP6;
    #line 554 
    break;
    #line 555 
    case (__u32)6: 
                   #line 555 
    ;
    #line 556 
    proto = ENA_ADMIN_RSS_UDP6;
    #line 557 
    break;
    #line 558 
    case (__u32)16: 
                    #line 558 
    ;
    #line 559 
    proto = ENA_ADMIN_RSS_IP4;
    #line 560 
    break;
    #line 561 
    case (__u32)17: 
                    #line 561 
    ;
    #line 562 
    proto = ENA_ADMIN_RSS_IP6;
    #line 563 
    break;
    #line 564 
    case (__u32)18: 
                    #line 564 
    ;
    #line 565 
    proto = ENA_ADMIN_RSS_NOT_IP;
    #line 566 
    break;
    #line 567 
    case (__u32)9: 
                   #line 567 
    ;
    #line 568 
    case (__u32)10: 
                    #line 568 
    ;
    #line 569 
    case (__u32)11: 
                    #line 569 
    ;
    #line 570 
    case (__u32)12: 
                    #line 570 
    ;
    #line 571 
    case (__u32)3: 
                   #line 571 
    ;
    #line 572 
    case (__u32)4: 
                   #line 572 
    ;
    #line 573 
    return -95;
    #line 574 
    default: 
             #line 574 
    ;
    #line 575 
    return -22;
  }
  #line 578 
  hash_fields = ena_flow_data_to_flow_hash((unsigned int)cmd->data);
  #line 580 
  return ena_com_fill_hash_ctrl(ena_dev,proto,
                             (unsigned short)((int)hash_fields));
}

#line 583  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_ethtool.c"
static int ena_set_rxnfc(struct net_device *netdev, struct ethtool_rxnfc *info)
{
  #line 585 
  struct ena_adapter *adapter = netdev_priv(netdev);
  #line 586 
  int rc = 0;
  #line 588 
  switch (info->cmd) {
    #line 589 
    case (__u32)42: 
                    #line 589 
    ;
    #line 590 
    rc = ena_set_rss_hash(adapter->ena_dev,info);
    #line 591 
    break;
    #line 592 
    case (__u32)49: 
                    #line 592 
    ;
    #line 593 
    case (__u32)50: 
                    #line 593 
    ;
    #line 594 
    default: 
             #line 594 
    ;
    #line 595 
    if ((adapter->msg_enable & 1U) != 0U) 
                                          #line 595 
                                          netdev_err(netdev,(char *)"Command parameter %d is not supported\n",info->cmd);
    #line 597 
    rc = -95;
  }
  #line 600 
  return rc;
}

#line 603  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_ethtool.c"
static int ena_get_rxnfc(struct net_device *netdev, struct ethtool_rxnfc *info, u32 *rules)
{
  #line 606 
  struct ena_adapter *adapter = netdev_priv(netdev);
  #line 607 
  int rc = 0;
  #line 609 
  switch (info->cmd) {
    #line 610 
    case (__u32)45: 
                    #line 610 
    ;
    #line 611 
    info->data = (unsigned long long)adapter->num_io_queues;
    #line 612 
    rc = 0;
    #line 613 
    break;
    #line 614 
    case (__u32)41: 
                    #line 614 
    ;
    #line 615 
    rc = ena_get_rss_hash(adapter->ena_dev,info);
    #line 616 
    break;
    #line 617 
    case (__u32)46: 
                    #line 617 
    ;
    #line 618 
    case (__u32)47: 
                    #line 618 
    ;
    #line 619 
    case (__u32)48: 
                    #line 619 
    ;
    #line 620 
    default: 
             #line 620 
    ;
    #line 621 
    if ((adapter->msg_enable & 1U) != 0U) 
                                          #line 621 
                                          netdev_err(netdev,(char *)"Command parameter %d is not supported\n",info->cmd);
    #line 623 
    rc = -95;
  }
  #line 626 
  return rc;
}

#line 629  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_ethtool.c"
static u32 ena_get_rxfh_indir_size(struct net_device *netdev)
{
  #line 631 
  return 128U;
}

#line 634  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_ethtool.c"
static u32 ena_get_rxfh_key_size(struct net_device *netdev)
{
  #line 636 
  return 40U;
}

#line 639  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_ethtool.c"
static int ena_get_rxfh(struct net_device *netdev, u32 *indir, u8 *key, u8 *hfunc)
{
  #line 643 
  enum ena_admin_hash_functions ena_func;
  #line 644 
  u8 func;
  #line 645 
  int rc;
  #line 642 
  struct ena_adapter *adapter = netdev_priv(netdev);
  #line 647 
  rc = ena_com_indirect_table_get(adapter->ena_dev,indir);
  #line 648 
  if (rc != 0) 
               #line 649 
               return rc;
  #line 651 
  rc = ena_com_get_hash_function(adapter->ena_dev,& ena_func,key);
  #line 652 
  if (rc != 0) 
               #line 653 
               return rc;
  #line 655 
  switch ((unsigned int)ena_func) {
    #line 656 
    case (unsigned int)1: 
                          #line 656 
    ;
    #line 657 
    func = (unsigned char)1U;
    #line 658 
    break;
    #line 659 
    case (unsigned int)2: 
                          #line 659 
    ;
    #line 660 
    func = (unsigned char)2U;
    #line 661 
    break;
    #line 662 
    default: 
             #line 662 
    ;
    #line 663 
    if ((adapter->msg_enable & 1U) != 0U) 
                                          #line 663 
                                          netdev_err(netdev,(char *)"Command parameter is not supported\n");
    #line 665 
    return -95;
  }
  #line 668 
  if (hfunc != (u8 *)0U) 
                         #line 669 
                         *hfunc = func;
  #line 671 
  return rc;
}

#line 674  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_ethtool.c"
static int ena_set_rxfh(struct net_device *netdev, u32 *indir, u8 *key, u8 hfunc)
{
  #line 679 
  enum ena_admin_hash_functions func;
  #line 680 
  int rc;
  #line 680 
  int i;
  #line 677 
  struct ena_adapter *adapter = netdev_priv(netdev);
  #line 678 
  struct ena_com_dev *ena_dev = adapter->ena_dev;
  #line 682 
  if (indir != (u32 *)0U) {
    #line 683 
    i = 0;
    #line 683 
    while (i <= 127) {
      #line 684 
      rc = ena_com_indirect_table_fill_entry(ena_dev,(unsigned short)((int)((unsigned short)i)),(unsigned short)((int)((unsigned int)((unsigned short)*(indir + (unsigned long)i)) * 2U + 1U)));
      #line 687 
      if ((long)(rc != 0) != 0L) {
        #line 688 
        if ((adapter->msg_enable & 1U) != 0U) 
                                              #line 688 
                                              netdev_err(netdev,(char *)"Cannot fill indirect table (index is too large)\n");
        #line 690 
        return rc;
      }
      #line 683 
      i ++;
    }
    #line 694 
    rc = ena_com_indirect_table_set(ena_dev);
    #line 695 
    if (rc != 0) {
      #line 698 
      int tmp_0;
      #line 696 
      if ((adapter->msg_enable & 1U) != 0U) 
                                            #line 696 
                                            netdev_err(netdev,(char *)"Cannot set indirect table\n");
      #line 698 
      if (rc != -1) 
                    #line 698 
                    tmp_0 = rc; else 
                                     #line 698 
                                     tmp_0 = -95;
      #line 698 
      return tmp_0;
    }
  }
  #line 702 
  switch ((int)hfunc) {
    #line 703 
    case 1: 
            #line 703 
    ;
    #line 704 
    func = ENA_ADMIN_TOEPLITZ;
    #line 705 
    break;
    #line 706 
    case 2: 
            #line 706 
    ;
    #line 707 
    func = ENA_ADMIN_CRC32;
    #line 708 
    break;
    #line 709 
    default: 
             #line 709 
    ;
    #line 710 
    if ((adapter->msg_enable & 1U) != 0U) 
                                          #line 710 
                                          netdev_err(netdev,(char *)"Unsupported hfunc %d\n",(int)hfunc);
    #line 712 
    return -95;
  }
  #line 715 
  if (key != (u8 *)0U) {
    #line 716 
    rc = ena_com_fill_hash_function(ena_dev,func,key,(unsigned short)40,4294967295U);
    #line 719 
    if ((long)(rc != 0) != 0L) {
      #line 721 
      int tmp_1;
      #line 720 
      if ((adapter->msg_enable & 1U) != 0U) 
                                            #line 720 
                                            netdev_err(netdev,(char *)"Cannot fill key\n");
      #line 721 
      if (rc != -1) 
                    #line 721 
                    tmp_1 = rc; else 
                                     #line 721 
                                     tmp_1 = -95;
      #line 721 
      return tmp_1;
    }
  }
  #line 725 
  return 0;
}

#line 728  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_ethtool.c"
static void ena_get_channels(struct net_device *netdev, struct ethtool_channels *channels)
{
  #line 731 
  struct ena_adapter *adapter = netdev_priv(netdev);
  #line 733 
  channels->max_combined = adapter->max_num_io_queues;
  #line 734 
  channels->combined_count = adapter->num_io_queues;
  #line 735 
  return;
}

#line 737  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_ethtool.c"
static int ena_set_channels(struct net_device *netdev, struct ethtool_channels *channels)
{
  #line 740 
  struct ena_adapter *adapter = netdev_priv(netdev);
  #line 741 
  u32 count = channels->combined_count;
  #line 743 
  if (count == 0U) 
                   #line 744 
                   return -22;
  #line 746 
  return ena_update_queue_count(adapter,count);
}

#line 749  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_ethtool.c"
static int ena_get_tunable(struct net_device *netdev, struct ethtool_tunable *tuna, void *data)
{
  #line 752 
  struct ena_adapter *adapter = netdev_priv(netdev);
  #line 753 
  int ret = 0;
  #line 755 
  switch (tuna->id) {
    #line 756 
    case (__u32)1: 
                   #line 756 
    ;
    #line 757 
    *((u32 *)data) = adapter->rx_copybreak;
    #line 758 
    break;
    #line 759 
    default: 
             #line 759 
    ;
    #line 760 
    ret = -22;
    #line 761 
    break;
  }
  #line 764 
  return ret;
}

#line 767  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_ethtool.c"
static int ena_set_tunable(struct net_device *netdev, struct ethtool_tunable *tuna, void *data)
{
  #line 773 
  u32 len;
  #line 771 
  struct ena_adapter *adapter = netdev_priv(netdev);
  #line 772 
  int ret = 0;
  #line 775 
  switch (tuna->id) {
    #line 776 
    case (__u32)1: 
                   #line 776 
    ;
    #line 777 
    len = *((u32 *)data);
    #line 778 
    if ((adapter->netdev)->mtu < len) {
      #line 779 
      ret = -22;
      #line 780 
      break;
    }
    #line 782 
    adapter->rx_copybreak = len;
    #line 783 
    break;
    #line 784 
    default: 
             #line 784 
    ;
    #line 785 
    ret = -22;
    #line 786 
    break;
  }
  #line 789 
  return ret;
}

#line 792  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_ethtool.c"
static struct ethtool_ops ena_ethtool_ops = {.get_drvinfo = & ena_get_drvinfo, .get_msglevel = & ena_get_msglevel, .set_msglevel = & ena_set_msglevel, .get_link = & ethtool_op_get_link, .get_coalesce = & ena_get_coalesce, .set_coalesce = & ena_set_coalesce, .get_ringparam = & ena_get_ringparam, .set_ringparam = & ena_set_ringparam, .get_strings = & ena_get_strings, .get_ethtool_stats = & ena_get_ethtool_stats, .get_sset_count = & ena_get_sset_count, .get_rxnfc = & ena_get_rxnfc, .set_rxnfc = & ena_set_rxnfc, .get_rxfh_key_size = & ena_get_rxfh_key_size, .get_rxfh_indir_size = & ena_get_rxfh_indir_size, .get_rxfh = & ena_get_rxfh, .set_rxfh = & ena_set_rxfh, .get_channels = & ena_get_channels, .set_channels = & ena_set_channels, .get_tunable = & ena_get_tunable, .set_tunable = & ena_set_tunable, .get_link_ksettings = & ena_get_link_ksettings};
#line 817  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_ethtool.c"
void ena_set_ethtool_ops(struct net_device *netdev)
{
  #line 819 
  netdev->ethtool_ops = & ena_ethtool_ops;
  #line 820 
  return;
}

#line 822  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_ethtool.c"
static void ena_dump_stats_ex(struct ena_adapter *adapter, u8 *buf)
{
  #line 825 
  u8 *strings_buf;
  #line 826 
  u64 *data_buf;
  #line 827 
  int strings_num;
  #line 828 
  int i;
  #line 828 
  int rc;
  #line 824 
  struct net_device *netdev = adapter->netdev;
  #line 830 
  strings_num = ena_get_sset_count(netdev,1);
  #line 831 
  if (strings_num <= 0) {
    #line 832 
    if ((adapter->msg_enable & 1U) != 0U) 
                                          #line 832 
                                          netdev_err(netdev,(char *)"Can\'t get stats num\n");
    #line 833 
    return;
  }
  #line 836 
  strings_buf = (u8 *)cif_devm_kcalloc(& (adapter->pdev)->dev,32UL,(unsigned long)strings_num,2592U);
  #line 839 
  if (strings_buf == (u8 *)0U) {
    #line 840 
    if ((adapter->msg_enable & 1U) != 0U) 
                                          #line 840 
                                          netdev_err(netdev,(char *)"failed to alloc strings_buf\n");
    #line 842 
    return;
  }
  #line 845 
  data_buf = (u64 *)cif_devm_kcalloc(& (adapter->pdev)->dev,(unsigned long)strings_num,8UL,2592U);
  #line 848 
  if (data_buf == (u64 *)0ULL) {
    #line 849 
    if ((adapter->msg_enable & 1U) != 0U) 
                                          #line 849 
                                          netdev_err(netdev,(char *)"failed to allocate data buf\n");
    #line 851 
    devm_kfree(& (adapter->pdev)->dev,(void *)strings_buf);
    #line 852 
    return;
  }
  #line 855 
  ena_get_strings(netdev,1U,strings_buf);
  #line 856 
  ena_get_ethtool_stats(netdev,(struct ethtool_stats *)0,data_buf);
  #line 859 
  if (buf != (u8 *)0U) {
    #line 860 
    i = 0;
    #line 860 
    while (i < strings_num) {
      #line 861 
      rc = snprintf((char *)buf,40UL,(char *)"%s %llu\n",strings_buf + (unsigned long)(i * 32),*(data_buf + (unsigned long)i));
      #line 865 
      buf += (unsigned long)rc;
      #line 860 
      i ++;
    }
  }
  else {
    #line 868 
    i = 0;
    #line 868 
    while (i < strings_num) {
      #line 869 
      if ((adapter->msg_enable & 1U) != 0U) 
                                            #line 869 
                                            netdev_err(netdev,(char *)"%s: %llu\n",strings_buf + (unsigned long)(i * 32),*(data_buf + (unsigned long)i));
      #line 868 
      i ++;
    }
  }
  #line 873 
  devm_kfree(& (adapter->pdev)->dev,(void *)strings_buf);
  #line 874 
  devm_kfree(& (adapter->pdev)->dev,(void *)data_buf);
  #line 875 
  return;
}

#line 877  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_ethtool.c"
void ena_dump_stats_to_buf(struct ena_adapter *adapter, u8 *buf)
{
  #line 879 
  if (buf == (u8 *)0U) 
                       #line 880 
                       return;
  #line 882 
  ena_dump_stats_ex(adapter,buf);
  #line 883 
  return;
}

#line 885  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_ethtool.c"
void ena_dump_stats_to_dmesg(struct ena_adapter *adapter)
{
  #line 887 
  ena_dump_stats_ex(adapter,(u8 *)0U);
  #line 888 
  return;
}

#line 108  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amazon/ena/ena.ko/concurrency safety/0/concurrency safety/weaver/ena_ethtool.i.aux"
void emg_wrapper_ena_get_channels(struct net_device *arg0, struct ethtool_channels *arg1)
{
  #line 109 
  ena_get_channels(arg0,arg1);
  #line 110 
  return;
}

#line 113  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amazon/ena/ena.ko/concurrency safety/0/concurrency safety/weaver/ena_ethtool.i.aux"
int emg_wrapper_ena_get_coalesce(struct net_device *arg0, struct ethtool_coalesce *arg1)
{
  #line 114 
  return ena_get_coalesce(arg0,arg1);
}

#line 118  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amazon/ena/ena.ko/concurrency safety/0/concurrency safety/weaver/ena_ethtool.i.aux"
void emg_wrapper_ena_get_drvinfo(struct net_device *arg0, struct ethtool_drvinfo *arg1)
{
  #line 119 
  ena_get_drvinfo(arg0,arg1);
  #line 120 
  return;
}

#line 123  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amazon/ena/ena.ko/concurrency safety/0/concurrency safety/weaver/ena_ethtool.i.aux"
void emg_wrapper_ena_get_ethtool_stats(struct net_device *arg0, struct ethtool_stats *arg1, unsigned long long *arg2)
{
  #line 124 
  ena_get_ethtool_stats(arg0,arg1,arg2);
  #line 125 
  return;
}

#line 128  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amazon/ena/ena.ko/concurrency safety/0/concurrency safety/weaver/ena_ethtool.i.aux"
int emg_wrapper_ena_get_link_ksettings(struct net_device *arg0, struct ethtool_link_ksettings *arg1)
{
  #line 129 
  return ena_get_link_ksettings(arg0,arg1);
}

#line 133  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amazon/ena/ena.ko/concurrency safety/0/concurrency safety/weaver/ena_ethtool.i.aux"
unsigned int emg_wrapper_ena_get_msglevel(struct net_device *arg0)
{
  #line 134 
  return ena_get_msglevel(arg0);
}

#line 138  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amazon/ena/ena.ko/concurrency safety/0/concurrency safety/weaver/ena_ethtool.i.aux"
void emg_wrapper_ena_get_ringparam(struct net_device *arg0, struct ethtool_ringparam *arg1)
{
  #line 139 
  ena_get_ringparam(arg0,arg1);
  #line 140 
  return;
}

#line 143  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amazon/ena/ena.ko/concurrency safety/0/concurrency safety/weaver/ena_ethtool.i.aux"
int emg_wrapper_ena_get_rxfh(struct net_device *arg0, unsigned int *arg1, unsigned char *arg2, unsigned char *arg3)
{
  #line 144 
  return ena_get_rxfh(arg0,arg1,arg2,arg3);
}

#line 148  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amazon/ena/ena.ko/concurrency safety/0/concurrency safety/weaver/ena_ethtool.i.aux"
unsigned int emg_wrapper_ena_get_rxfh_indir_size(struct net_device *arg0)
{
  #line 149 
  return ena_get_rxfh_indir_size(arg0);
}

#line 153  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amazon/ena/ena.ko/concurrency safety/0/concurrency safety/weaver/ena_ethtool.i.aux"
unsigned int emg_wrapper_ena_get_rxfh_key_size(struct net_device *arg0)
{
  #line 154 
  return ena_get_rxfh_key_size(arg0);
}

#line 158  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amazon/ena/ena.ko/concurrency safety/0/concurrency safety/weaver/ena_ethtool.i.aux"
int emg_wrapper_ena_get_rxnfc(struct net_device *arg0, struct ethtool_rxnfc *arg1, unsigned int *arg2)
{
  #line 159 
  return ena_get_rxnfc(arg0,arg1,arg2);
}

#line 163  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amazon/ena/ena.ko/concurrency safety/0/concurrency safety/weaver/ena_ethtool.i.aux"
void emg_wrapper_ena_get_strings(struct net_device *arg0, unsigned int arg1, unsigned char *arg2)
{
  #line 164 
  ena_get_strings(arg0,arg1,arg2);
  #line 165 
  return;
}

#line 168  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amazon/ena/ena.ko/concurrency safety/0/concurrency safety/weaver/ena_ethtool.i.aux"
int emg_wrapper_ena_get_tunable(struct net_device *arg0, struct ethtool_tunable *arg1, void *arg2)
{
  #line 169 
  return ena_get_tunable(arg0,arg1,arg2);
}

#line 173  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amazon/ena/ena.ko/concurrency safety/0/concurrency safety/weaver/ena_ethtool.i.aux"
int emg_wrapper_ena_set_channels(struct net_device *arg0, struct ethtool_channels *arg1)
{
  #line 174 
  return ena_set_channels(arg0,arg1);
}

#line 178  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amazon/ena/ena.ko/concurrency safety/0/concurrency safety/weaver/ena_ethtool.i.aux"
int emg_wrapper_ena_set_coalesce(struct net_device *arg0, struct ethtool_coalesce *arg1)
{
  #line 179 
  return ena_set_coalesce(arg0,arg1);
}

#line 183  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amazon/ena/ena.ko/concurrency safety/0/concurrency safety/weaver/ena_ethtool.i.aux"
void emg_wrapper_ena_set_msglevel(struct net_device *arg0, unsigned int arg1)
{
  #line 184 
  ena_set_msglevel(arg0,arg1);
  #line 185 
  return;
}

#line 188  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amazon/ena/ena.ko/concurrency safety/0/concurrency safety/weaver/ena_ethtool.i.aux"
int emg_wrapper_ena_set_ringparam(struct net_device *arg0, struct ethtool_ringparam *arg1)
{
  #line 189 
  return ena_set_ringparam(arg0,arg1);
}

#line 193  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amazon/ena/ena.ko/concurrency safety/0/concurrency safety/weaver/ena_ethtool.i.aux"
int emg_wrapper_ena_set_rxfh(struct net_device *arg0, unsigned int *arg1, unsigned char *arg2, unsigned char arg3)
{
  #line 194 
  return ena_set_rxfh(arg0,arg1,arg2,(unsigned char)((int)arg3));
}

#line 198  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amazon/ena/ena.ko/concurrency safety/0/concurrency safety/weaver/ena_ethtool.i.aux"
int emg_wrapper_ena_set_rxnfc(struct net_device *arg0, struct ethtool_rxnfc *arg1)
{
  #line 199 
  return ena_set_rxnfc(arg0,arg1);
}

#line 203  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amazon/ena/ena.ko/concurrency safety/0/concurrency safety/weaver/ena_ethtool.i.aux"
int emg_wrapper_ena_set_tunable(struct net_device *arg0, struct ethtool_tunable *arg1, void *arg2)
{
  #line 204 
  return ena_set_tunable(arg0,arg1,arg2);
}

#line 761  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amazon/ena/ena.ko/concurrency safety/0/concurrency safety/weaver/ena_ethtool.i.aux"
static void *cif_devm_kcalloc(struct device *dev, size_t n, size_t size, gfp_t flags)
{
  #line 764 
  return ldv_devm_kcalloc(n,size,flags);
}

#line 7  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amazon/ena/ena.ko/concurrency safety/0/concurrency safety/weaver/ena_com.i.aux"
#line 7 
void ldv_atomic_inc(atomic_t *v);
#line 8 
#line 8 
void ldv_atomic_dec(atomic_t *v);
#line 220  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/compiler.h"
__inline static void __write_once_size(void *p, void *res, int size)
{
  #line 222 
  switch (size) {
    #line 223 
    case 1: 
            #line 223 
    ;
    #line 223 
    *((__u8 *)p) = *((__u8 *)res);
    #line 223 
    break;
    #line 224 
    case 2: 
            #line 224 
    ;
    #line 224 
    *((__u16 *)p) = *((__u16 *)res);
    #line 224 
    break;
    #line 225 
    case 4: 
            #line 225 
    ;
    #line 225 
    *((__u32 *)p) = *((__u32 *)res);
    #line 225 
    break;
    #line 226 
    case 8: 
            #line 226 
    ;
    #line 226 
    *((__u64 *)p) = *((__u64 *)res);
    #line 226 
    break;
    #line 227 
    default: 
             #line 227 
    ;
    #line 228 
    ldv_inline_asm();
    #line 229 
    __builtin_memcpy(p,(void const *)res,(unsigned long)size);
    #line 230 
    ldv_inline_asm();
  }
  #line 232 
  return;
}

#line 204  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernel.h"
#line 204 
void __might_sleep(char *, int, int);
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/cmpxchg_64.h"
__inline static int arch_atomic_read_0(atomic_t *v)
{
  #line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/atomic.h"
  union __anonunion___u_2260 __u;
  #line 31 
  __read_once_size((void *)(& v->counter),(void *)(& __u.__c),4);
  #line 31 
  return (__u.__val);
}

#line 41  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/atomic.h"
__inline static void arch_atomic_set(atomic_t *v, int i)
{
  #line 44 
  union __anonunion___u_2262 __u = {.__val = i};
  #line 43 
  __write_once_size((void *)(& v->counter),(void *)(& __u.__c),4);
  #line 43 
  int tmp = __u.__val;
  #line 45 
  return;
}

#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/atomic-instrumented.h"
__inline static int atomic_read_0(atomic_t *v)
{
  #line 26 
  kasan_check_read((void *)v,4U);
  #line 27 
  return arch_atomic_read_0(v);
}

#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/atomic-instrumented.h"
__inline static void atomic_set(atomic_t *v, int i)
{
  #line 44 
  kasan_check_read((void *)v,4U);
  #line 45 
  arch_atomic_set(v,i);
  #line 46 
  return;
}

#line 237 
#line 176  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amazon/ena/ena.ko/concurrency safety/0/concurrency safety/weaver/ena_com.i.aux"
static void atomic_inc(atomic_t *v);
#line 327  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/atomic-instrumented.h"
#line 183  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amazon/ena/ena.ko/concurrency safety/0/concurrency safety/weaver/ena_com.i.aux"
static void atomic_dec(atomic_t *v);
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/err.h"
#line 197  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amazon/ena/ena.ko/concurrency safety/0/concurrency safety/weaver/ena_com.i.aux"
static void *ERR_PTR(long error);
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/err.h"
#line 204  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amazon/ena/ena.ko/concurrency safety/0/concurrency safety/weaver/ena_com.i.aux"
static long PTR_ERR(void *ptr);
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/err.h"
#line 211  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amazon/ena/ena.ko/concurrency safety/0/concurrency safety/weaver/ena_com.i.aux"
static bool IS_ERR(void *ptr);
#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
#line 95 
void __raw_spin_lock_init(raw_spinlock_t *, char *, struct lock_class_key *);
#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_api_smp.h"
#line 43 
void _raw_spin_unlock_irqrestore(raw_spinlock_t *, unsigned long);
#line 325  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
__inline static raw_spinlock_t *spinlock_check(spinlock_t *lock)
{
  #line 327 
  return & lock->__anonCompField_spinlock_25.rlock;
}

#line 391  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static void spin_unlock_irqrestore(spinlock_t *lock, unsigned long flags)
{
  {
    #line 393 
    unsigned long __dummy;
    #line 393 
    unsigned long __dummy2;
    }
  #line 393 
  _raw_spin_unlock_irqrestore(& lock->__anonCompField_spinlock_25.rlock,flags);
  #line 395 
  return;
}

#line 395 
#line 468  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amazon/ena/ena.ko/concurrency safety/0/concurrency safety/weaver/ena_com.i.aux"
static void cif_spin_unlock_irqrestore_q_lock_of_ena_com_admin_queue(spinlock_t *lock, unsigned long flags);
#line 395  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
#line 486  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amazon/ena/ena.ko/concurrency safety/0/concurrency safety/weaver/ena_com.i.aux"
static void cif_spin_unlock_irqrestore_lock_of_ena_com_mmio_read(spinlock_t *lock, unsigned long flags);
#line 33 
#line 33 
void __ldv_spin_lock(spinlock_t *);
#line 35 
#line 459 
static void cif___ldv_spin_lock_q_lock_of_ena_com_admin_queue(spinlock_t *lock);
#line 35 
#line 477 
static void cif___ldv_spin_lock_lock_of_ena_com_mmio_read(spinlock_t *lock);
#line 27  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/device.h"
#line 27 
void *ldv_devm_kzalloc(size_t size, gfp_t flags);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/err.h"
#line 23 
bool ldv_is_err(void *ptr);
#line 25 
#line 25 
void *ldv_err_ptr(long error);
#line 26 
#line 26 
long ldv_ptr_err(void *ptr);
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/delay.h"
#line 11 
void __const_udelay(unsigned long);
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/delay.h"
#line 59 
void msleep(unsigned int);
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/wait.h"
#line 61 
void __init_waitqueue_head(struct wait_queue_head *, char *, struct lock_class_key *);
#line 85  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/completion.h"
__inline static void __init_completion(struct completion *x)
{
  #line 87 
  x->done = 0U;
  {
    #line 88 
    struct lock_class_key __key;
    #line 88 
    __init_waitqueue_head(& x->wait,(char *)"&x->wait",& __key);
  }
  #line 90 
  return;
}

#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/completion.h"
__inline static void reinit_completion(struct completion *x)
{
  #line 100 
  x->done = 0U;
  #line 101 
  return;
}

#line 107 
#line 107 
unsigned long wait_for_completion_timeout(struct completion *, unsigned long);
#line 118 
#line 118 
void complete(struct completion *);
#line 292  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jiffies.h"
#line 292 
unsigned int jiffies_to_usecs(unsigned long);
#line 375 
#line 375 
unsigned long __usecs_to_jiffies(unsigned int);
#line 377  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jiffies.h"
__inline static unsigned long _usecs_to_jiffies(unsigned int u)
{
  #line 379 
  return (unsigned long)(((long)u + 3999L) / 4000L);
}

#line 411  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jiffies.h"
__inline static unsigned long usecs_to_jiffies(unsigned int u)
{
  #line 413 
  if (0 != 0) {
    #line 414 
    ;
    #line 414 
    if (jiffies_to_usecs(4611686018427387902UL) < u) 
                                                     #line 415 
                                                     return 4611686018427387902UL;
    #line 416 
    return _usecs_to_jiffies(u);
  }
  else {
    #line 418 
    return __usecs_to_jiffies(u);
  }
}

#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/io.h"
__inline static unsigned int readl(void *addr)
{
  #line 59 
  unsigned int ret;
  #line 60 
  ldv_inline_asm();
  #line 59 
  return ret;
}

#line 937  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
#line 452  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amazon/ena/ena.ko/concurrency safety/0/concurrency safety/weaver/ena_com.i.aux"
static void *cif_devm_kzalloc(struct device *dev, size_t size, gfp_t flags);
#line 1383  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
__inline static int dev_to_node(struct device *dev)
{
  #line 1385 
  return dev->numa_node;
}

#line 1387  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
__inline static void set_dev_node(struct device *dev, int node)
{
  #line 1389 
  dev->numa_node = node;
  #line 1390 
  return;
}

#line 442  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
#line 442 
void *dma_alloc_attrs(struct device *, size_t, dma_addr_t *, gfp_t, unsigned long);
#line 444 
#line 444 
void dma_free_attrs(struct device *, size_t, void *, dma_addr_t, unsigned long);
#line 641  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static void *dma_alloc_coherent(struct device *dev, size_t size, dma_addr_t *dma_handle, gfp_t gfp)
{
  #line 645 
  return dma_alloc_attrs(dev,size,dma_handle,gfp,
                      (unsigned long)(gfp >> 5) & 256UL);
}

#line 649  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static void dma_free_coherent(struct device *dev, size_t size, void *cpu_addr, dma_addr_t dma_handle)
{
  #line 652 
  dma_free_attrs(dev,size,cpu_addr,dma_handle,0UL);
  #line 653 
  return;
}

#line 406  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_com.h"
#line 1710  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_com.c"
void ena_com_mmio_reg_read_request_write_dev_addr(struct ena_com_dev *ena_dev);
#line 523  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_com.h"
#line 1659  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_com.c"
void ena_com_set_admin_auto_polling_mode(struct ena_com_dev *ena_dev, bool polling);
#line 619  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_com.h"
#line 2146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_com.c"
int ena_com_get_dev_basic_stats(struct ena_com_dev *ena_dev, struct ena_admin_basic_stats *stats);
#line 636  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_com.h"
#line 2193  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_com.c"
int ena_com_get_offload_settings(struct ena_com_dev *ena_dev, struct ena_admin_feature_offload_desc *offload);
#line 845  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_com.h"
#line 1346  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_com.c"
int ena_com_create_io_cq(struct ena_com_dev *ena_dev, struct ena_com_io_cq *io_cq);
#line 856  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_com.h"
#line 1454  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_com.c"
int ena_com_destroy_io_cq(struct ena_com_dev *ena_dev, struct ena_com_io_cq *io_cq);
#line 872  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_com.h"
#line 1314  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_com.c"
int ena_com_execute_admin_command(struct ena_com_admin_queue *admin_queue, struct ena_admin_aq_entry *cmd, size_t cmd_size, struct ena_admin_acq_entry *comp, size_t comp_size);
#line 94  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_com.c"
static int ena_com_mem_addr_set(struct ena_com_dev *ena_dev, struct ena_common_mem_addr *ena_addr, dma_addr_t addr)
{
  #line 98 
  if (((18446744073709551615ULL >> (64U - ena_dev->dma_addr_bits)) & addr) != addr) {
    #line 99 
    printk((char *)"\001");
    #line 100 
    return -22;
  }
  #line 103 
  ena_addr->mem_addr_low = (unsigned int)addr;
  #line 104 
  ena_addr->mem_addr_high = (unsigned short)(addr >> 32);
  #line 106 
  return 0;
}

#line 109  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_com.c"
static int ena_com_admin_init_sq(struct ena_com_admin_queue *queue)
{
  #line 111 
  struct ena_com_admin_sq *sq = & queue->sq;
  #line 112 
  u16 size = (unsigned short)((unsigned int)queue->q_depth * 64U);
  #line 114 
  sq->entries = (struct ena_admin_aq_entry *)dma_alloc_coherent((struct device *)queue->q_dmadev,(unsigned long)size,& sq->dma_addr,3264U);
  #line 117 
  if (sq->entries == (struct ena_admin_aq_entry *)0) {
    #line 118 
    printk((char *)"\001");
    #line 119 
    return -12;
  }
  #line 122 
  sq->head = (unsigned short)0U;
  #line 123 
  sq->tail = (unsigned short)0U;
  #line 124 
  sq->phase = (unsigned char)1U;
  #line 126 
  sq->db_addr = (u32 *)0U;
  #line 128 
  return 0;
}

#line 131  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_com.c"
static int ena_com_admin_init_cq(struct ena_com_admin_queue *queue)
{
  #line 133 
  struct ena_com_admin_cq *cq = & queue->cq;
  #line 134 
  u16 size = (unsigned short)((unsigned int)queue->q_depth * 64U);
  #line 136 
  cq->entries = (struct ena_admin_acq_entry *)dma_alloc_coherent((struct device *)queue->q_dmadev,(unsigned long)size,& cq->dma_addr,3264U);
  #line 139 
  if (cq->entries == (struct ena_admin_acq_entry *)0) {
    #line 140 
    printk((char *)"\001");
    #line 141 
    return -12;
  }
  #line 144 
  cq->head = (unsigned short)0U;
  #line 145 
  cq->phase = (unsigned char)1U;
  #line 147 
  return 0;
}

#line 150  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_com.c"
static int ena_com_admin_init_aenq(struct ena_com_dev *dev, struct ena_aenq_handlers *aenq_handlers_0)
{
  #line 154 
  u32 addr_low;
  #line 154 
  u32 addr_high;
  #line 154 
  u32 aenq_caps;
  #line 155 
  u16 size;
  #line 153 
  struct ena_com_aenq *aenq = & dev->aenq;
  #line 157 
  dev->aenq.q_depth = (unsigned short)16U;
  #line 158 
  size = (unsigned short)1024U;
  #line 159 
  aenq->entries = (struct ena_admin_aenq_entry *)dma_alloc_coherent((struct device *)dev->dmadev,(unsigned long)size,& aenq->dma_addr,3264U);
  #line 162 
  if (aenq->entries == (struct ena_admin_aenq_entry *)0) {
    #line 163 
    printk((char *)"\001");
    #line 164 
    return -12;
  }
  #line 167 
  aenq->head = aenq->q_depth;
  #line 168 
  aenq->phase = (unsigned char)1U;
  #line 170 
  addr_low = (unsigned int)aenq->dma_addr;
  #line 171 
  addr_high = (unsigned int)(aenq->dma_addr >> 32);
  #line 173 
  writel(addr_low,(void *)(dev->reg_bar + 56U));
  #line 174 
  writel(addr_high,(void *)(dev->reg_bar + 60U));
  #line 176 
  aenq_caps = 0U;
  #line 177 
  aenq_caps = (unsigned int)dev->aenq.q_depth | aenq_caps;
  #line 178 
  aenq_caps |= 4194304U;
  #line 181 
  writel(aenq_caps,(void *)(dev->reg_bar + 52U));
  #line 183 
  if ((long)(aenq_handlers_0 == (struct ena_aenq_handlers *)0) != 0L) {
    #line 184 
    printk((char *)"\001");
    #line 185 
    return -22;
  }
  #line 188 
  aenq->aenq_handlers = aenq_handlers_0;
  #line 190 
  return 0;
}

#line 193  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_com.c"
static void comp_ctxt_release(struct ena_com_admin_queue *queue, struct ena_comp_ctx *comp_ctx)
{
  #line 196 
  comp_ctx->occupied = (_Bool)0;
  #line 197 
  atomic_dec(& queue->outstanding_cmds);
  #line 198 
  return;
}

#line 200  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_com.c"
static struct ena_comp_ctx *get_comp_ctxt(struct ena_com_admin_queue *queue, u16 command_id, bool capture)
{
  #line 203 
  if ((long)((int)queue->q_depth <= (int)command_id) != 0L) {
    #line 204 
    printk((char *)"\001",(int)command_id,(int)queue->q_depth);
    #line 206 
    return (struct ena_comp_ctx *)0;
  }
  #line 209 
  if ((long)((int)(queue->comp_ctx + (unsigned long)command_id)->occupied != 0) != 0L && (long)((int)capture != 0) != 0L) {
    #line 210 
    printk((char *)"\001");
    #line 211 
    return (struct ena_comp_ctx *)0;
  }
  #line 214 
  if ((int)capture != 0) {
    #line 215 
    atomic_inc(& queue->outstanding_cmds);
    #line 216 
    (queue->comp_ctx + (unsigned long)command_id)->occupied = (_Bool)1;
  }
  #line 219 
  return queue->comp_ctx + (unsigned long)command_id;
}

#line 222  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_com.c"
static struct ena_comp_ctx *__ena_com_submit_admin_cmd(struct ena_com_admin_queue *admin_queue, struct ena_admin_aq_entry *cmd, size_t cmd_size_in_bytes, struct ena_admin_acq_entry *comp, size_t comp_size_in_bytes)
{
  #line 228 
  struct ena_comp_ctx *comp_ctx;
  #line 229 
  u16 tail_masked;
  #line 229 
  u16 cmd_id;
  #line 230 
  u16 queue_size_mask;
  #line 231 
  u16 cnt;
  #line 233 
  queue_size_mask = (unsigned short)((unsigned int)admin_queue->q_depth + 65535U);
  #line 235 
  tail_masked = (unsigned short)((int)admin_queue->sq.tail & (int)queue_size_mask);
  #line 238 
  cnt = (unsigned short)atomic_read_0(& admin_queue->outstanding_cmds);
  #line 239 
  if ((int)admin_queue->q_depth <= (int)cnt) {
    {
      #line 240 
      bool branch;
      #line 240 
      struct _ddebug __UNIQUE_ID_ddebug400 = {.modname = (char *)"ena", .function = (char *)"__ena_com_submit_admin_cmd", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_com.c", .format = (char *)"admin queue is full.\n", .lineno = (unsigned int)240U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 240 
      branch = arch_static_branch(& __UNIQUE_ID_ddebug400.key.dd_key_false.key,(_Bool)0);
      #line 240 
      if ((long)((long)((int)branch != 0)) != 0L) 
                                                  #line 240 
                                                  __dynamic_pr_debug(& __UNIQUE_ID_ddebug400,(char *)"ena");
    }
    #line 241 
    (admin_queue->stats.out_of_space) ++;
    #line 242 
    return (struct ena_comp_ctx *)ERR_PTR(-28L);
  }
  #line 245 
  cmd_id = admin_queue->curr_cmd_id;
  #line 247 
  cmd->aq_common_descriptor.flags = (unsigned char)((unsigned int)cmd->aq_common_descriptor.flags | ((unsigned int)admin_queue->sq.phase & 1U));
  #line 250 
  cmd->aq_common_descriptor.command_id = (unsigned short)((unsigned int)cmd->aq_common_descriptor.command_id | ((unsigned int)cmd_id & 4095U));
  #line 253 
  comp_ctx = get_comp_ctxt(admin_queue,(unsigned short)((int)cmd_id),(_Bool)1);
  #line 254 
  if ((long)(comp_ctx == (struct ena_comp_ctx *)0) != 0L) {
    #line 255 
    return (struct ena_comp_ctx *)ERR_PTR(-22L);
  }
  #line 257 
  comp_ctx->status = ENA_CMD_SUBMITTED;
  #line 258 
  comp_ctx->comp_size = (unsigned int)comp_size_in_bytes;
  #line 259 
  comp_ctx->user_cqe = comp;
  #line 260 
  comp_ctx->cmd_opcode = cmd->aq_common_descriptor.opcode;
  #line 262 
  reinit_completion(& comp_ctx->wait_event);
  #line 264 
  memcpy((void *)(admin_queue->sq.entries + (unsigned long)tail_masked),(void *)cmd,cmd_size_in_bytes);
  #line 266 
  admin_queue->curr_cmd_id = (unsigned short)(((unsigned int)admin_queue->curr_cmd_id + 1U) & (unsigned int)queue_size_mask);
  #line 269 
  admin_queue->sq.tail = (u16)((int)admin_queue->sq.tail + 1);
  #line 270 
  (admin_queue->stats.submitted_cmd) ++;
  #line 272 
  if ((long)((unsigned int)((int)admin_queue->sq.tail & (int)queue_size_mask) == 0U) != 0L) 
    #line 273 
    admin_queue->sq.phase = (unsigned char)((unsigned int)admin_queue->sq.phase == 0U);
  #line 275 
  writel((unsigned int)admin_queue->sq.tail,(void *)admin_queue->sq.db_addr);
  #line 277 
  return comp_ctx;
}

#line 280  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_com.c"
static int ena_com_init_comp_ctxt(struct ena_com_admin_queue *queue)
{
  #line 283 
  struct ena_comp_ctx *comp_ctx;
  #line 284 
  u16 i;
  #line 282 
  size_t size = (unsigned long)queue->q_depth * 120UL;
  #line 286 
  queue->comp_ctx = (struct ena_comp_ctx *)cif_devm_kzalloc((struct device *)queue->q_dmadev,size,3264U);
  #line 287 
  if ((long)(queue->comp_ctx == (struct ena_comp_ctx *)0) != 0L) {
    #line 288 
    printk((char *)"\001");
    #line 289 
    return -12;
  }
  #line 292 
  i = (unsigned short)0U;
  #line 292 
  while ((int)queue->q_depth > (int)i) {
    #line 293 
    comp_ctx = get_comp_ctxt(queue,(unsigned short)((int)i),(_Bool)0);
    #line 294 
    if (comp_ctx != (struct ena_comp_ctx *)0) 
                                              #line 295 
                                              __init_completion(& comp_ctx->wait_event);
    #line 292 
    i = (u16)((int)i + 1);
  }
  #line 298 
  return 0;
}

#line 301  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_com.c"
static struct ena_comp_ctx *ena_com_submit_admin_cmd(struct ena_com_admin_queue *admin_queue, struct ena_admin_aq_entry *cmd, size_t cmd_size_in_bytes, struct ena_admin_acq_entry *comp, size_t comp_size_in_bytes)
{
  #line 308 
  struct ena_comp_ctx *comp_ctx;
  #line 307 
  unsigned long flags = 0UL;
  #line 310 
  cif___ldv_spin_lock_q_lock_of_ena_com_admin_queue(& admin_queue->q_lock);
  #line 311 
  if ((long)(! admin_queue->running_state) != 0L) {
    #line 312 
    cif_spin_unlock_irqrestore_q_lock_of_ena_com_admin_queue(& admin_queue->q_lock,flags);
    #line 313 
    return (struct ena_comp_ctx *)ERR_PTR(-19L);
  }
  #line 315 
  comp_ctx = __ena_com_submit_admin_cmd(admin_queue,cmd,cmd_size_in_bytes,comp,comp_size_in_bytes);
  #line 319 
  if ((int)IS_ERR((void *)comp_ctx) != 0) 
                                          #line 320 
                                          admin_queue->running_state = (_Bool)0;
  #line 321 
  cif_spin_unlock_irqrestore_q_lock_of_ena_com_admin_queue(& admin_queue->q_lock,flags);
  #line 323 
  return comp_ctx;
}

#line 326  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_com.c"
static int ena_com_init_io_sq(struct ena_com_dev *ena_dev, struct ena_com_create_io_ctx *ctx, struct ena_com_io_sq *io_sq)
{
  #line 330 
  size_t size;
  #line 331 
  int dev_node = 0;
  #line 333 
  memset((void *)(& io_sq->desc_addr),0,24UL);
  #line 335 
  io_sq->dma_addr_bits = (unsigned char)ena_dev->dma_addr_bits;
  #line 336 
  io_sq->desc_entry_size = (unsigned char)16U;
  #line 341 
  size = (unsigned long)((int)io_sq->desc_entry_size * (int)io_sq->q_depth);
  #line 343 
  if (io_sq->mem_queue_type == (unsigned int)ENA_ADMIN_PLACEMENT_POLICY_HOST) {
    #line 344 
    dev_node = dev_to_node((struct device *)ena_dev->dmadev);
    #line 345 
    set_dev_node((struct device *)ena_dev->dmadev,ctx->numa_node);
    #line 347 
    io_sq->desc_addr.virt_addr = (u8 *)dma_alloc_coherent((struct device *)ena_dev->dmadev,size,& io_sq->desc_addr.phys_addr,3264U);
    #line 350 
    set_dev_node((struct device *)ena_dev->dmadev,dev_node);
    #line 351 
    if (io_sq->desc_addr.virt_addr == (u8 *)0U) 
                                                #line 353 
                                                io_sq->desc_addr.virt_addr = (u8 *)dma_alloc_coherent((struct device *)ena_dev->dmadev,size,& io_sq->desc_addr.phys_addr,3264U);
    #line 358 
    if (io_sq->desc_addr.virt_addr == (u8 *)0U) {
      #line 359 
      printk((char *)"\001");
      #line 360 
      return -12;
    }
  }
  #line 364 
  if (io_sq->mem_queue_type == (unsigned int)ENA_ADMIN_PLACEMENT_POLICY_DEV) {
    #line 366 
    io_sq->bounce_buf_ctrl.buffer_size = ena_dev->llq_info.desc_list_entry_size;
    #line 368 
    io_sq->bounce_buf_ctrl.buffers_num = (unsigned short)4U;
    #line 370 
    io_sq->bounce_buf_ctrl.next_to_use = (unsigned short)0U;
    #line 372 
    size = (unsigned long)((int)io_sq->bounce_buf_ctrl.buffer_size * (int)io_sq->bounce_buf_ctrl.buffers_num);
    #line 375 
    dev_node = dev_to_node((struct device *)ena_dev->dmadev);
    #line 376 
    set_dev_node((struct device *)ena_dev->dmadev,ctx->numa_node);
    #line 378 
    io_sq->bounce_buf_ctrl.base_buffer = (u8 *)cif_devm_kzalloc((struct device *)ena_dev->dmadev,size,3264U);
    #line 379 
    set_dev_node((struct device *)ena_dev->dmadev,dev_node);
    #line 380 
    if (io_sq->bounce_buf_ctrl.base_buffer == (u8 *)0U) 
                                                        #line 382 
                                                        io_sq->bounce_buf_ctrl.base_buffer = (u8 *)cif_devm_kzalloc((struct device *)ena_dev->dmadev,size,3264U);
    #line 384 
    if (io_sq->bounce_buf_ctrl.base_buffer == (u8 *)0U) {
      #line 385 
      printk((char *)"\001");
      #line 386 
      return -12;
    }
    #line 389 
    memcpy((void *)(& io_sq->llq_info),(void *)(& ena_dev->llq_info),14UL);
    #line 393 
    io_sq->llq_buf_ctrl.curr_bounce_buf = ena_com_get_next_bounce_buffer(& io_sq->bounce_buf_ctrl);
    #line 395 
    memset((void *)io_sq->llq_buf_ctrl.curr_bounce_buf,0,(unsigned long)io_sq->llq_info.desc_list_entry_size);
    #line 397 
    io_sq->llq_buf_ctrl.descs_left_in_line = io_sq->llq_info.descs_num_before_header;
    #line 400 
    if ((unsigned int)io_sq->llq_info.max_entries_in_tx_burst != 0U) 
      #line 401 
      io_sq->entries_in_tx_burst_left = io_sq->llq_info.max_entries_in_tx_burst;
  }
  #line 405 
  io_sq->tail = (unsigned short)0U;
  #line 406 
  io_sq->next_to_comp = (unsigned short)0U;
  #line 407 
  io_sq->phase = (unsigned char)1U;
  #line 409 
  return 0;
}

#line 412  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_com.c"
static int ena_com_init_io_cq(struct ena_com_dev *ena_dev, struct ena_com_create_io_ctx *ctx, struct ena_com_io_cq *io_cq)
{
  #line 416 
  size_t size;
  #line 417 
  int prev_node = 0;
  #line 419 
  memset((void *)(& io_cq->cdesc_addr),0,24UL);
  #line 422 
  if (io_cq->direction == (unsigned int)ENA_COM_IO_QUEUE_DIRECTION_TX) 
    #line 422 
    io_cq->cdesc_entry_size_in_bytes = (unsigned char)8U; else 
                                                               #line 422 
                                                               io_cq->cdesc_entry_size_in_bytes = (unsigned char)16U;
  #line 427 
  size = (unsigned long)((int)io_cq->cdesc_entry_size_in_bytes * (int)io_cq->q_depth);
  #line 429 
  prev_node = dev_to_node((struct device *)ena_dev->dmadev);
  #line 430 
  set_dev_node((struct device *)ena_dev->dmadev,ctx->numa_node);
  #line 432 
  io_cq->cdesc_addr.virt_addr = (u8 *)dma_alloc_coherent((struct device *)ena_dev->dmadev,size,& io_cq->cdesc_addr.phys_addr,3264U);
  #line 434 
  set_dev_node((struct device *)ena_dev->dmadev,prev_node);
  #line 435 
  if (io_cq->cdesc_addr.virt_addr == (u8 *)0U) 
                                               #line 437 
                                               io_cq->cdesc_addr.virt_addr = (u8 *)dma_alloc_coherent((struct device *)ena_dev->dmadev,size,& io_cq->cdesc_addr.phys_addr,3264U);
  #line 442 
  if (io_cq->cdesc_addr.virt_addr == (u8 *)0U) {
    #line 443 
    printk((char *)"\001");
    #line 444 
    return -12;
  }
  #line 447 
  io_cq->phase = (unsigned char)1U;
  #line 448 
  io_cq->head = (unsigned short)0U;
  #line 450 
  return 0;
}

#line 453  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_com.c"
static void ena_com_handle_single_admin_completion(struct ena_com_admin_queue *admin_queue, struct ena_admin_acq_entry *cqe)
{
  #line 456 
  struct ena_comp_ctx *comp_ctx;
  #line 457 
  u16 cmd_id;
  #line 459 
  cmd_id = (unsigned short)((unsigned int)cqe->acq_common_descriptor.command & 4095U);
  #line 462 
  comp_ctx = get_comp_ctxt(admin_queue,(unsigned short)((int)cmd_id),(_Bool)0);
  #line 463 
  if ((long)(comp_ctx == (struct ena_comp_ctx *)0) != 0L) {
    #line 464 
    printk((char *)"\001");
    #line 465 
    admin_queue->running_state = (_Bool)0;
    #line 466 
    return;
  }
  #line 469 
  comp_ctx->status = ENA_CMD_COMPLETED;
  #line 470 
  comp_ctx->comp_status = cqe->acq_common_descriptor.status;
  #line 472 
  if (comp_ctx->user_cqe != (struct ena_admin_acq_entry *)0) 
                                                             #line 473 
                                                             memcpy((void *)comp_ctx->user_cqe,(void *)cqe,(unsigned long)comp_ctx->comp_size);
  #line 475 
  if (! admin_queue->polling) 
                              #line 476 
                              complete(& comp_ctx->wait_event);
  #line 477 
  return;
}

#line 479  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_com.c"
static void ena_com_handle_admin_completion(struct ena_com_admin_queue *admin_queue)
{
  #line 483 
  u16 head_masked;
  #line 484 
  u8 phase;
  #line 481 
  struct ena_admin_acq_entry *cqe = (struct ena_admin_acq_entry *)0;
  #line 482 
  u16 comp_num = (unsigned short)0U;
  #line 486 
  head_masked = (unsigned short)((unsigned int)admin_queue->cq.head & ((unsigned int)admin_queue->q_depth + 65535U));
  #line 487 
  phase = admin_queue->cq.phase;
  #line 489 
  cqe = admin_queue->cq.entries + (unsigned long)head_masked;
  #line 492 
  while (1) {
    #line 493 
    union __anonunion___u_2642 __u;
    #line 492 
    __read_once_size((void *)(& cqe->acq_common_descriptor.flags),(void *)(& __u.__c),1);
    #line 492 
    ;
    #line 492 
    if (! (((unsigned long)(__u.__val) & 1UL) == (unsigned long)phase)) 
      #line 492 
      break;
    #line 495 
    ldv_inline_asm();
    #line 498 
    ena_com_handle_single_admin_completion(admin_queue,cqe);
    #line 500 
    head_masked = (u16)((int)head_masked + 1);
    #line 501 
    comp_num = (u16)((int)comp_num + 1);
    #line 502 
    if ((long)((int)admin_queue->q_depth == (int)head_masked) != 0L) {
      #line 503 
      head_masked = (unsigned short)0U;
      #line 504 
      phase = (unsigned char)((unsigned int)phase == 0U);
    }
    #line 507 
    cqe = admin_queue->cq.entries + (unsigned long)head_masked;
  }
  #line 510 
  admin_queue->cq.head = (unsigned short)((int)admin_queue->cq.head + (int)comp_num);
  #line 511 
  admin_queue->cq.phase = phase;
  #line 512 
  admin_queue->sq.head = (unsigned short)((int)admin_queue->sq.head + (int)comp_num);
  #line 513 
  admin_queue->stats.completed_cmd += (unsigned int)comp_num;
  #line 514 
  return;
}

#line 516  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_com.c"
static int ena_com_comp_status_to_errno(u8 comp_status)
{
  #line 518 
  if ((long)((unsigned int)comp_status != 0U) != 0L) 
                                                     #line 519 
                                                     printk((char *)"\001",(int)comp_status);
  #line 521 
  if ((long)((unsigned int)comp_status > 6U) != 0L) 
                                                    #line 522 
                                                    return -22;
  #line 524 
  switch ((int)comp_status) {
    #line 525 
    case 0: 
            #line 525 
    ;
    #line 526 
    return 0;
    #line 527 
    case 1: 
            #line 527 
    ;
    #line 528 
    return -12;
    #line 529 
    case 3: 
            #line 529 
    ;
    #line 530 
    return -95;
    #line 531 
    case 2: 
            #line 531 
    ;
    #line 532 
    case 4: 
            #line 532 
    ;
    #line 533 
    case 5: 
            #line 533 
    ;
    #line 534 
    case 6: 
            #line 534 
    ;
    #line 535 
    return -22;
  }
  #line 538 
  return 0;
}

#line 541  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_com.c"
static int ena_com_wait_and_process_admin_cq_polling(struct ena_comp_ctx *comp_ctx, struct ena_com_admin_queue *admin_queue)
{
  #line 545 
  unsigned long timeout;
  #line 546 
  int ret;
  #line 544 
  unsigned long flags = 0UL;
  #line 548 
  timeout = usecs_to_jiffies(admin_queue->completion_timeout) + jiffies;
  #line 550 
  while (1) {
    {
      #line 551 
      cif___ldv_spin_lock_q_lock_of_ena_com_admin_queue(& admin_queue->q_lock);
      #line 552 
      ena_com_handle_admin_completion(admin_queue);
      #line 553 
      cif_spin_unlock_irqrestore_q_lock_of_ena_com_admin_queue(& admin_queue->q_lock,flags);
      #line 555 
      if (comp_ctx->status != (unsigned int)ENA_CMD_SUBMITTED) 
                                                               #line 556 
                                                               break;
      {
        #line 558 
        unsigned long __dummy;
        #line 558 
        unsigned long __dummy2;
        }
      #line 558 
      if (1 != 0) {
        {
          #line 558 
          unsigned long __dummy_0;
          #line 558 
          unsigned long __dummy2_0;
          }
        #line 558 
        if (1 != 0) 
          #line 558 
          if ((long)(timeout - jiffies) < 0L) {
            #line 559 
            printk((char *)"\001");
            #line 561 
            cif___ldv_spin_lock_q_lock_of_ena_com_admin_queue(& admin_queue->q_lock);
            #line 562 
            (admin_queue->stats.no_completion) ++;
            #line 563 
            admin_queue->running_state = (_Bool)0;
            #line 564 
            cif_spin_unlock_irqrestore_q_lock_of_ena_com_admin_queue(& admin_queue->q_lock,flags);
            #line 566 
            ret = -62;
            #line 567 
            goto err;
          }
      }
      #line 570 
      msleep(5U);
    }
  }
  #line 573 
  if ((long)(comp_ctx->status == (unsigned int)ENA_CMD_ABORTED) != 0L) {
    #line 574 
    printk((char *)"\001");
    #line 575 
    cif___ldv_spin_lock_q_lock_of_ena_com_admin_queue(& admin_queue->q_lock);
    #line 576 
    (admin_queue->stats.aborted_cmd) ++;
    #line 577 
    cif_spin_unlock_irqrestore_q_lock_of_ena_com_admin_queue(& admin_queue->q_lock,flags);
    #line 578 
    ret = -19;
    #line 579 
    goto err;
  }
  {
    #line 582 
    int __ret_warn_on = comp_ctx->status != (unsigned int)ENA_CMD_COMPLETED;
    #line 582 
    if ((long)(__ret_warn_on != 0) != 0L) {
      #line 582 
      __warn_printk((char *)"Invalid comp status %d\n",(unsigned int)comp_ctx->status);
      #line 583 
      ldv_inline_asm();
      #line 584 
      ldv_inline_asm();
    }
    #line 582 
    long tmp_2 = (long)(__ret_warn_on != 0);
  }
  #line 585 
  ret = ena_com_comp_status_to_errno((unsigned char)((int)comp_ctx->comp_status));
  #line 586 
  err: 
       #line 586 
  ;
  #line 587 
  comp_ctxt_release(admin_queue,comp_ctx);
  #line 588 
  return ret;
}

#line 597  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_com.c"
static int ena_com_set_llq(struct ena_com_dev *ena_dev)
{
  #line 599 
  struct ena_com_admin_queue *admin_queue;
  #line 600 
  struct ena_admin_set_feat_cmd cmd;
  #line 601 
  struct ena_admin_set_feat_resp resp;
  #line 603 
  int ret;
  #line 602 
  struct ena_com_llq_info *llq_info = & ena_dev->llq_info;
  #line 605 
  memset((void *)(& cmd),0,64UL);
  #line 606 
  admin_queue = & ena_dev->admin_queue;
  #line 608 
  cmd.aq_common_descriptor.opcode = (unsigned char)9U;
  #line 609 
  cmd.feat_common.feature_id = (unsigned char)4U;
  #line 611 
  cmd.u.llq.header_location_ctrl_enabled = llq_info->header_location_ctrl;
  #line 612 
  cmd.u.llq.entry_size_ctrl_enabled = llq_info->desc_list_entry_size_ctrl;
  #line 613 
  cmd.u.llq.desc_num_before_header_enabled = llq_info->descs_num_before_header;
  #line 614 
  cmd.u.llq.descriptors_stride_ctrl_enabled = llq_info->desc_stride_ctrl;
  #line 616 
  ret = ena_com_execute_admin_command(admin_queue,(struct ena_admin_aq_entry *)(& cmd),64UL,(struct ena_admin_acq_entry *)(& resp),64UL);
  #line 622 
  if ((long)(ret != 0) != 0L) 
                              #line 623 
                              printk((char *)"\001",ret);
  #line 625 
  return ret;
}

#line 628  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_com.c"
static int ena_com_config_llq_info(struct ena_com_dev *ena_dev, struct ena_admin_feature_llq_desc *llq_features, struct ena_llq_configurations *llq_default_cfg)
{
  #line 633 
  u16 supported_feat;
  #line 634 
  int rc;
  #line 632 
  struct ena_com_llq_info *llq_info = & ena_dev->llq_info;
  #line 636 
  memset((void *)llq_info,0,14UL);
  #line 638 
  supported_feat = llq_features->header_location_ctrl_supported;
  #line 640 
  if ((long)(((unsigned int)supported_feat & (unsigned int)llq_default_cfg->llq_header_location) != 0U) != 0L) 
    #line 641 
    llq_info->header_location_ctrl = (unsigned short)llq_default_cfg->llq_header_location;
  else {
    #line 644 
    printk((char *)"\001",(int)supported_feat);
    #line 646 
    return -22;
  }
  #line 649 
  if ((long)((unsigned int)llq_info->header_location_ctrl == 1U) != 0L) {
    #line 650 
    supported_feat = llq_features->descriptors_stride_ctrl_supported;
    #line 651 
    if ((long)(((unsigned int)supported_feat & (unsigned int)llq_default_cfg->llq_stride_ctrl) != 0U) != 0L) 
      #line 652 
      llq_info->desc_stride_ctrl = (unsigned short)llq_default_cfg->llq_stride_ctrl;
    else {
      #line 654 
      if (((int)supported_feat & 2) != 0) 
                                          #line 655 
                                          llq_info->desc_stride_ctrl = (unsigned short)2U;
      else 
        #line 656 
        if (((int)supported_feat & 1) != 0) 
                                            #line 657 
                                            llq_info->desc_stride_ctrl = (unsigned short)1U;
        else {
          #line 659 
          printk((char *)"\001",(int)supported_feat);
          #line 661 
          return -22;
        }
      #line 664 
      printk((char *)"\001",(unsigned int)llq_default_cfg->llq_stride_ctrl,(int)supported_feat,(int)llq_info->desc_stride_ctrl);
    }
  }
  else 
       #line 669 
       llq_info->desc_stride_ctrl = (unsigned short)0U;
  #line 672 
  supported_feat = llq_features->entry_size_ctrl_supported;
  #line 673 
  if ((long)(((unsigned int)supported_feat & (unsigned int)llq_default_cfg->llq_ring_entry_size) != 0U) != 0L) {
    #line 674 
    llq_info->desc_list_entry_size_ctrl = (unsigned short)llq_default_cfg->llq_ring_entry_size;
    #line 675 
    llq_info->desc_list_entry_size = llq_default_cfg->llq_ring_entry_size_value;
  }
  else {
    #line 677 
    if (((int)supported_feat & 1) != 0) {
      #line 678 
      llq_info->desc_list_entry_size_ctrl = (unsigned short)1U;
      #line 679 
      llq_info->desc_list_entry_size = (unsigned short)128U;
    }
    else 
      #line 680 
      if (((int)supported_feat & 2) != 0) {
        #line 681 
        llq_info->desc_list_entry_size_ctrl = (unsigned short)2U;
        #line 682 
        llq_info->desc_list_entry_size = (unsigned short)192U;
      }
      else 
        #line 683 
        if (((int)supported_feat & 4) != 0) {
          #line 684 
          llq_info->desc_list_entry_size_ctrl = (unsigned short)4U;
          #line 685 
          llq_info->desc_list_entry_size = (unsigned short)256U;
        }
        else {
          #line 687 
          printk((char *)"\001",(int)supported_feat);
          #line 689 
          return -22;
        }
    #line 692 
    printk((char *)"\001",(unsigned int)llq_default_cfg->llq_ring_entry_size,(int)supported_feat,(int)llq_info->desc_list_entry_size);
  }
  #line 696 
  if ((long)(((int)llq_info->desc_list_entry_size & 7) != 0) != 0L) {
    #line 700 
    printk((char *)"\001",(int)llq_info->desc_list_entry_size);
    #line 702 
    return -22;
  }
  #line 705 
  if ((unsigned int)llq_info->desc_stride_ctrl == 2U) 
                                                      #line 706 
                                                      llq_info->descs_per_entry = (unsigned short)((unsigned int)llq_info->desc_list_entry_size / 16U); else 
                                                                    #line 709 
                                                                    llq_info->descs_per_entry = (unsigned short)1U;
  #line 711 
  supported_feat = llq_features->desc_num_before_header_supported;
  #line 712 
  if ((long)(((unsigned int)supported_feat & (unsigned int)llq_default_cfg->llq_num_decs_before_header) != 0U) != 0L) 
    #line 713 
    llq_info->descs_num_before_header = (unsigned short)llq_default_cfg->llq_num_decs_before_header;
  else {
    #line 715 
    if (((int)supported_feat & 2) != 0) 
                                        #line 716 
                                        llq_info->descs_num_before_header = (unsigned short)2U;
    else 
      #line 717 
      if (((int)supported_feat & 1) != 0) 
                                          #line 718 
                                          llq_info->descs_num_before_header = (unsigned short)1U;
      else 
        #line 719 
        if (((int)supported_feat & 4) != 0) 
                                            #line 720 
                                            llq_info->descs_num_before_header = (unsigned short)4U;
        else 
          #line 721 
          if (((int)supported_feat & 8) != 0) 
                                              #line 722 
                                              llq_info->descs_num_before_header = (unsigned short)8U;
          else {
            #line 724 
            printk((char *)"\001",(int)supported_feat);
            #line 726 
            return -22;
          }
    #line 729 
    printk((char *)"\001",(unsigned int)llq_default_cfg->llq_num_decs_before_header,(int)supported_feat,(int)llq_info->descs_num_before_header);
  }
  #line 734 
  llq_info->max_entries_in_tx_burst = (unsigned short)(llq_features->max_tx_burst_size / (unsigned int)llq_default_cfg->llq_ring_entry_size_value);
  #line 737 
  rc = ena_com_set_llq(ena_dev);
  #line 738 
  if (rc != 0) 
               #line 739 
               printk((char *)"\001",rc);
  #line 741 
  return rc;
}

#line 744  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_com.c"
static int ena_com_wait_and_process_admin_cq_interrupts(struct ena_comp_ctx *comp_ctx, struct ena_com_admin_queue *admin_queue)
{
  #line 748 
  int ret;
  #line 747 
  unsigned long flags = 0UL;
  #line 750 
  ;
  #line 750 
  wait_for_completion_timeout(& comp_ctx->wait_event,usecs_to_jiffies(admin_queue->completion_timeout));
  #line 759 
  if ((long)(comp_ctx->status == (unsigned int)ENA_CMD_SUBMITTED) != 0L) {
    #line 760 
    cif___ldv_spin_lock_q_lock_of_ena_com_admin_queue(& admin_queue->q_lock);
    #line 761 
    ena_com_handle_admin_completion(admin_queue);
    #line 762 
    (admin_queue->stats.no_completion) ++;
    #line 763 
    cif_spin_unlock_irqrestore_q_lock_of_ena_com_admin_queue(& admin_queue->q_lock,flags);
    #line 765 
    if (comp_ctx->status == (unsigned int)ENA_CMD_COMPLETED) {
      #line 766 
      char *tmp_0;
      #line 766 
      if ((int)admin_queue->auto_polling != 0) 
                                               #line 766 
                                               tmp_0 = (char *)"ON"; else 
                                                                    #line 766 
                                                                    tmp_0 = (char *)"OFF";
      #line 766 
      ;
      #line 766 
      printk((char *)"\001",(int)comp_ctx->cmd_opcode,tmp_0);
      #line 770 
      if ((int)admin_queue->auto_polling != 0) 
                                               #line 771 
                                               admin_queue->polling = (_Bool)1;
    }
    else 
         #line 773 
         printk((char *)"\001",(int)comp_ctx->cmd_opcode,(unsigned int)comp_ctx->status);
    #line 780 
    if (! admin_queue->polling) {
      #line 781 
      admin_queue->running_state = (_Bool)0;
      #line 782 
      ret = -62;
      #line 783 
      goto err;
    }
  }
  #line 787 
  ret = ena_com_comp_status_to_errno((unsigned char)((int)comp_ctx->comp_status));
  #line 788 
  err: 
       #line 788 
  ;
  #line 789 
  comp_ctxt_release(admin_queue,comp_ctx);
  #line 790 
  return ret;
}

#line 797  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_com.c"
static u32 ena_com_reg_bar_read32(struct ena_com_dev *ena_dev, u16 offset)
{
  #line 802 
  u32 mmio_read_reg;
  #line 802 
  u32 ret;
  #line 802 
  u32 i;
  #line 799 
  struct ena_com_mmio_read *mmio_read = & ena_dev->mmio_read;
  #line 800 
  struct ena_admin_ena_mmio_req_read_less_resp *read_resp = mmio_read->read_resp;
  #line 803 
  unsigned long flags = 0UL;
  #line 804 
  u32 timeout = mmio_read->reg_read_to;
  #line 806 
  __might_sleep((char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_com.c",806,0);
  #line 808 
  if (timeout == 0U) 
                     #line 809 
                     timeout = 200000U;
  #line 812 
  if (! mmio_read->readless_supported) {
    #line 813 
    return readl((void *)(ena_dev->reg_bar + (unsigned long)offset));
  }
  #line 815 
  cif___ldv_spin_lock_lock_of_ena_com_mmio_read(& mmio_read->lock);
  #line 816 
  mmio_read->seq_num = (u16)((int)mmio_read->seq_num + 1);
  #line 818 
  read_resp->req_id = (unsigned short)((unsigned int)mmio_read->seq_num + 57005U);
  #line 819 
  mmio_read_reg = (unsigned int)((int)offset << 16);
  #line 821 
  mmio_read_reg = (unsigned int)mmio_read->seq_num | mmio_read_reg;
  #line 824 
  writel(mmio_read_reg,(void *)(ena_dev->reg_bar + 92U));
  #line 826 
  i = 0U;
  #line 826 
  while (i < timeout) {
    {
      #line 828 
      union __anonunion___u_2644 __u;
      #line 827 
      __read_once_size((void *)(& read_resp->req_id),(void *)(& __u.__c),2);
      #line 827 
      ;
      #line 827 
      if ((int)(__u.__val) == (int)mmio_read->seq_num) 
                                                       #line 828 
                                                       break;
      #line 830 
      __const_udelay(4295UL);
    }
    #line 826 
    i ++;
  }
  #line 833 
  if ((long)(i == timeout) != 0L) {
    #line 834 
    printk((char *)"\001",(int)mmio_read->seq_num,(int)offset,(int)read_resp->req_id,(int)read_resp->reg_off);
    #line 837 
    ret = 4294967295U;
    #line 838 
    goto err;
  }
  #line 841 
  if ((int)read_resp->reg_off != (int)offset) {
    #line 842 
    printk((char *)"\001");
    #line 843 
    ret = 4294967295U;
  }
  else 
       #line 845 
       ret = read_resp->reg_val;
  #line 847 
  err: 
       #line 847 
  ;
  #line 848 
  cif_spin_unlock_irqrestore_lock_of_ena_com_mmio_read(& mmio_read->lock,flags);
  #line 850 
  return ret;
}

#line 860  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_com.c"
static int ena_com_wait_and_process_admin_cq(struct ena_comp_ctx *comp_ctx, struct ena_com_admin_queue *admin_queue)
{
  #line 863 
  if ((int)admin_queue->polling != 0) {
    #line 864 
    return ena_com_wait_and_process_admin_cq_polling(comp_ctx,admin_queue);
  }
  #line 867 
  return ena_com_wait_and_process_admin_cq_interrupts(comp_ctx,admin_queue);
}

#line 871  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_com.c"
static int ena_com_destroy_io_sq(struct ena_com_dev *ena_dev, struct ena_com_io_sq *io_sq)
{
  #line 875 
  struct ena_admin_aq_destroy_sq_cmd destroy_cmd;
  #line 876 
  struct ena_admin_acq_destroy_sq_resp_desc destroy_resp;
  #line 877 
  u8 direction;
  #line 878 
  int ret;
  #line 874 
  struct ena_com_admin_queue *admin_queue = & ena_dev->admin_queue;
  #line 880 
  memset((void *)(& destroy_cmd),0,8UL);
  #line 882 
  if (io_sq->direction == (unsigned int)ENA_COM_IO_QUEUE_DIRECTION_TX) 
    #line 883 
    direction = (unsigned char)1U; else 
                                        #line 885 
                                        direction = (unsigned char)2U;
  #line 887 
  destroy_cmd.sq.sq_identity = (unsigned char)((int)destroy_cmd.sq.sq_identity | ((int)direction << 5U));
  #line 891 
  destroy_cmd.sq.sq_idx = io_sq->idx;
  #line 892 
  destroy_cmd.aq_common_descriptor.opcode = (unsigned char)2U;
  #line 894 
  ret = ena_com_execute_admin_command(admin_queue,(struct ena_admin_aq_entry *)(& destroy_cmd),8UL,(struct ena_admin_acq_entry *)(& destroy_resp),8UL);
  #line 900 
  if ((long)((ret != 0 && ret != -19) != 0) != 0L) 
                                                   #line 901 
                                                   printk((char *)"\001",ret);
  #line 903 
  return ret;
}

#line 906  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_com.c"
static void ena_com_io_queue_free(struct ena_com_dev *ena_dev, struct ena_com_io_sq *io_sq, struct ena_com_io_cq *io_cq)
{
  #line 910 
  size_t size;
  #line 912 
  if (io_cq->cdesc_addr.virt_addr != (u8 *)0U) {
    #line 913 
    size = (unsigned long)((int)io_cq->cdesc_entry_size_in_bytes * (int)io_cq->q_depth);
    #line 915 
    dma_free_coherent((struct device *)ena_dev->dmadev,size,(void *)io_cq->cdesc_addr.virt_addr,io_cq->cdesc_addr.phys_addr);
    #line 919 
    io_cq->cdesc_addr.virt_addr = (u8 *)0U;
  }
  #line 922 
  if (io_sq->desc_addr.virt_addr != (u8 *)0U) {
    #line 923 
    size = (unsigned long)((int)io_sq->desc_entry_size * (int)io_sq->q_depth);
    #line 925 
    dma_free_coherent((struct device *)ena_dev->dmadev,size,(void *)io_sq->desc_addr.virt_addr,io_sq->desc_addr.phys_addr);
    #line 929 
    io_sq->desc_addr.virt_addr = (u8 *)0U;
  }
  #line 932 
  if (io_sq->bounce_buf_ctrl.base_buffer != (u8 *)0U) {
    #line 933 
    devm_kfree((struct device *)ena_dev->dmadev,(void *)io_sq->bounce_buf_ctrl.base_buffer);
    #line 934 
    io_sq->bounce_buf_ctrl.base_buffer = (u8 *)0U;
  }
  #line 936 
  return;
}

#line 938  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_com.c"
static int wait_for_reset_state(struct ena_com_dev *ena_dev, u32 timeout, u16 exp_state)
{
  #line 941 
  u32 val;
  #line 941 
  u32 i;
  #line 944 
  timeout = (timeout * 100U) / 5U;
  #line 946 
  i = 0U;
  #line 946 
  while (i < timeout) {
    #line 947 
    val = ena_com_reg_bar_read32(ena_dev,(unsigned short)88);
    #line 949 
    if ((long)(val == 4294967295U) != 0L) {
      #line 950 
      printk((char *)"\001");
      #line 951 
      return -62;
    }
    #line 954 
    if ((val & 8U) == (unsigned int)exp_state) 
                                               #line 956 
                                               return 0;
    #line 958 
    msleep(5U);
    #line 946 
    i ++;
  }
  #line 961 
  return -62;
}

#line 964  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_com.c"
static bool ena_com_check_supported_feature_id(struct ena_com_dev *ena_dev, enum ena_admin_aq_feature_id feature_id)
{
  #line 967 
  u32 feature_mask = (unsigned int)(1 << (unsigned int)feature_id);
  #line 970 
  if (feature_id != (unsigned int)ENA_ADMIN_DEVICE_ATTRIBUTES && (ena_dev->supported_features & feature_mask) == 0U) 
    #line 972 
    return (_Bool)0;
  #line 974 
  return (_Bool)1;
}

#line 977  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_com.c"
static int ena_com_get_feature_ex(struct ena_com_dev *ena_dev, struct ena_admin_get_feat_resp *get_resp, enum ena_admin_aq_feature_id feature_id, dma_addr_t control_buf_dma_addr, u32 control_buff_size, u8 feature_ver)
{
  #line 984 
  struct ena_com_admin_queue *admin_queue;
  #line 985 
  struct ena_admin_get_feat_cmd get_cmd;
  #line 986 
  int ret;
  #line 988 
  if (! ena_com_check_supported_feature_id(ena_dev,feature_id)) {
    {
      #line 989 
      bool branch;
      #line 989 
      struct _ddebug __UNIQUE_ID_ddebug402 = {.modname = (char *)"ena", .function = (char *)"ena_com_get_feature_ex", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_com.c", .format = (char *)"Feature %d isn\'t supported\n", .lineno = (unsigned int)989U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 989 
      branch = arch_static_branch(& __UNIQUE_ID_ddebug402.key.dd_key_false.key,(_Bool)0);
      #line 989 
      if ((long)((long)((int)branch != 0)) != 0L) 
                                                  #line 989 
                                                  __dynamic_pr_debug(& __UNIQUE_ID_ddebug402,(char *)"ena",(unsigned int)feature_id);
    }
    #line 990 
    return -95;
  }
  #line 993 
  memset((void *)(& get_cmd),0,64UL);
  #line 994 
  admin_queue = & ena_dev->admin_queue;
  #line 996 
  get_cmd.aq_common_descriptor.opcode = (unsigned char)8U;
  #line 998 
  if (control_buff_size != 0U) 
                               #line 999 
                               get_cmd.aq_common_descriptor.flags = (unsigned char)4U; else 
                                                                    #line 1002 
                                                                    get_cmd.aq_common_descriptor.flags = (unsigned char)0U;
  #line 1004 
  ret = ena_com_mem_addr_set(ena_dev,& get_cmd.control_buffer.address,control_buf_dma_addr);
  #line 1007 
  if ((long)(ret != 0) != 0L) {
    #line 1008 
    printk((char *)"\001");
    #line 1009 
    return ret;
  }
  #line 1012 
  get_cmd.control_buffer.length = control_buff_size;
  #line 1013 
  get_cmd.feat_common.feature_version = feature_ver;
  #line 1014 
  get_cmd.feat_common.feature_id = (unsigned char)feature_id;
  #line 1016 
  ret = ena_com_execute_admin_command(admin_queue,(struct ena_admin_aq_entry *)(& get_cmd),64UL,(struct ena_admin_acq_entry *)get_resp,64UL);
  #line 1024 
  if ((long)(ret != 0) != 0L) 
                              #line 1025 
                              printk((char *)"\001",(unsigned int)feature_id,ret);
  #line 1028 
  return ret;
}

#line 1031  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_com.c"
static int ena_com_get_feature(struct ena_com_dev *ena_dev, struct ena_admin_get_feat_resp *get_resp, enum ena_admin_aq_feature_id feature_id, u8 feature_ver)
{
  #line 1036 
  return ena_com_get_feature_ex(ena_dev,get_resp,feature_id,0ULL,0U,
                             (unsigned char)((int)feature_ver));
}

#line 1044  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_com.c"
static int ena_com_hash_key_allocate(struct ena_com_dev *ena_dev)
{
  #line 1046 
  struct ena_rss *rss = & ena_dev->rss;
  #line 1049 
  rss->hash_key = (struct ena_admin_feature_rss_flow_hash_control *)dma_alloc_coherent((struct device *)ena_dev->dmadev,48UL,& rss->hash_key_dma_addr,3264U);
  #line 1052 
  if ((long)(rss->hash_key == (struct ena_admin_feature_rss_flow_hash_control *)0) != 0L) 
    #line 1053 
    return -12;
  #line 1055 
  return 0;
}

#line 1058  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_com.c"
static void ena_com_hash_key_destroy(struct ena_com_dev *ena_dev)
{
  #line 1060 
  struct ena_rss *rss = & ena_dev->rss;
  #line 1062 
  if (rss->hash_key != (struct ena_admin_feature_rss_flow_hash_control *)0) 
    #line 1063 
    dma_free_coherent((struct device *)ena_dev->dmadev,48UL,(void *)rss->hash_key,rss->hash_key_dma_addr);
  #line 1065 
  rss->hash_key = (struct ena_admin_feature_rss_flow_hash_control *)0;
  #line 1066 
  return;
}

#line 1068  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_com.c"
static int ena_com_hash_ctrl_init(struct ena_com_dev *ena_dev)
{
  #line 1070 
  struct ena_rss *rss = & ena_dev->rss;
  #line 1073 
  rss->hash_ctrl = (struct ena_admin_feature_rss_hash_control *)dma_alloc_coherent((struct device *)ena_dev->dmadev,256UL,& rss->hash_ctrl_dma_addr,3264U);
  #line 1076 
  if ((long)(rss->hash_ctrl == (struct ena_admin_feature_rss_hash_control *)0) != 0L) 
    #line 1077 
    return -12;
  #line 1079 
  return 0;
}

#line 1082  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_com.c"
static void ena_com_hash_ctrl_destroy(struct ena_com_dev *ena_dev)
{
  #line 1084 
  struct ena_rss *rss = & ena_dev->rss;
  #line 1086 
  if (rss->hash_ctrl != (struct ena_admin_feature_rss_hash_control *)0) 
    #line 1087 
    dma_free_coherent((struct device *)ena_dev->dmadev,256UL,(void *)rss->hash_ctrl,rss->hash_ctrl_dma_addr);
  #line 1089 
  rss->hash_ctrl = (struct ena_admin_feature_rss_hash_control *)0;
  #line 1090 
  return;
}

#line 1092  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_com.c"
static int ena_com_indirect_table_allocate(struct ena_com_dev *ena_dev, u16 log_size)
{
  #line 1096 
  struct ena_admin_get_feat_resp get_resp;
  #line 1097 
  size_t tbl_size;
  #line 1098 
  int ret;
  #line 1095 
  struct ena_rss *rss = & ena_dev->rss;
  #line 1100 
  ret = ena_com_get_feature(ena_dev,& get_resp,(enum ena_admin_aq_feature_id)ENA_ADMIN_RSS_REDIRECTION_TABLE_CONFIG,(unsigned char)0);
  #line 1102 
  if ((long)(ret != 0) != 0L) 
                              #line 1103 
                              return ret;
  #line 1105 
  if ((int)get_resp.u.ind_table.min_size > (int)log_size || (int)get_resp.u.ind_table.max_size < (int)log_size) {
    #line 1107 
    printk((char *)"\001",1 << (int)log_size,1 << (int)get_resp.u.ind_table.min_size,1 << (int)get_resp.u.ind_table.max_size);
    #line 1110 
    return -22;
  }
  #line 1113 
  tbl_size = (unsigned long)(4ULL << (int)log_size);
  #line 1117 
  rss->rss_ind_tbl = (struct ena_admin_rss_ind_table_entry *)dma_alloc_coherent((struct device *)ena_dev->dmadev,tbl_size,& rss->rss_ind_tbl_dma_addr,3264U);
  #line 1119 
  if ((long)(rss->rss_ind_tbl == (struct ena_admin_rss_ind_table_entry *)0) != 0L) 
    #line 1120 
    goto mem_err1;
  #line 1122 
  tbl_size = (unsigned long)(2ULL << (int)log_size);
  #line 1124 
  rss->host_rss_ind_tbl = (u16 *)cif_devm_kzalloc((struct device *)ena_dev->dmadev,tbl_size,3264U);
  #line 1125 
  if ((long)(rss->host_rss_ind_tbl == (u16 *)0U) != 0L) 
                                                        #line 1126 
                                                        goto mem_err2;
  #line 1128 
  rss->tbl_log_size = log_size;
  #line 1130 
  return 0;
  #line 1132 
  mem_err2: 
            #line 1132 
  ;
  #line 1133 
  tbl_size = (unsigned long)(4ULL << (int)log_size);
  #line 1136 
  dma_free_coherent((struct device *)ena_dev->dmadev,tbl_size,(void *)rss->rss_ind_tbl,rss->rss_ind_tbl_dma_addr);
  #line 1138 
  rss->rss_ind_tbl = (struct ena_admin_rss_ind_table_entry *)0;
  #line 1139 
  mem_err1: 
            #line 1139 
  ;
  #line 1140 
  rss->tbl_log_size = (unsigned short)0U;
  #line 1141 
  return -12;
}

#line 1144  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_com.c"
static void ena_com_indirect_table_destroy(struct ena_com_dev *ena_dev)
{
  #line 1146 
  struct ena_rss *rss = & ena_dev->rss;
  #line 1147 
  size_t tbl_size = (unsigned long)(4ULL << (int)rss->tbl_log_size);
  #line 1150 
  if (rss->rss_ind_tbl != (struct ena_admin_rss_ind_table_entry *)0) 
    #line 1151 
    dma_free_coherent((struct device *)ena_dev->dmadev,tbl_size,(void *)rss->rss_ind_tbl,rss->rss_ind_tbl_dma_addr);
  #line 1153 
  rss->rss_ind_tbl = (struct ena_admin_rss_ind_table_entry *)0;
  #line 1155 
  if (rss->host_rss_ind_tbl != (u16 *)0U) 
                                          #line 1156 
                                          devm_kfree((struct device *)ena_dev->dmadev,(void *)rss->host_rss_ind_tbl);
  #line 1157 
  rss->host_rss_ind_tbl = (u16 *)0U;
  #line 1158 
  return;
}

#line 1160  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_com.c"
static int ena_com_create_io_sq(struct ena_com_dev *ena_dev, struct ena_com_io_sq *io_sq, u16 cq_idx)
{
  #line 1164 
  struct ena_admin_aq_create_sq_cmd create_cmd;
  #line 1165 
  struct ena_admin_acq_create_sq_resp_desc cmd_completion;
  #line 1166 
  u8 direction;
  #line 1167 
  int ret;
  #line 1163 
  struct ena_com_admin_queue *admin_queue = & ena_dev->admin_queue;
  #line 1169 
  memset((void *)(& create_cmd),0,36UL);
  #line 1171 
  create_cmd.aq_common_descriptor.opcode = (unsigned char)1U;
  #line 1173 
  if (io_sq->direction == (unsigned int)ENA_COM_IO_QUEUE_DIRECTION_TX) 
    #line 1174 
    direction = (unsigned char)1U; else 
                                        #line 1176 
                                        direction = (unsigned char)2U;
  #line 1178 
  create_cmd.sq_identity = (unsigned char)((int)create_cmd.sq_identity | ((int)direction << 5U));
  #line 1182 
  create_cmd.sq_caps_2 = (unsigned char)((unsigned int)create_cmd.sq_caps_2 | ((unsigned int)((unsigned char)io_sq->mem_queue_type) & 15U));
  #line 1185 
  create_cmd.sq_caps_2 = create_cmd.sq_caps_2;
  #line 1189 
  create_cmd.sq_caps_3 = (unsigned char)((unsigned int)create_cmd.sq_caps_3 | 1U);
  #line 1192 
  create_cmd.cq_idx = cq_idx;
  #line 1193 
  create_cmd.sq_depth = io_sq->q_depth;
  #line 1195 
  if (io_sq->mem_queue_type == (unsigned int)ENA_ADMIN_PLACEMENT_POLICY_HOST) {
    #line 1196 
    ret = ena_com_mem_addr_set(ena_dev,& create_cmd.sq_ba,io_sq->desc_addr.phys_addr);
    #line 1199 
    if ((long)(ret != 0) != 0L) {
      #line 1200 
      printk((char *)"\001");
      #line 1201 
      return ret;
    }
  }
  #line 1205 
  ret = ena_com_execute_admin_command(admin_queue,(struct ena_admin_aq_entry *)(& create_cmd),36UL,(struct ena_admin_acq_entry *)(& cmd_completion),24UL);
  #line 1210 
  if ((long)(ret != 0) != 0L) {
    #line 1211 
    printk((char *)"\001",ret);
    #line 1212 
    return ret;
  }
  #line 1215 
  io_sq->idx = cmd_completion.sq_idx;
  #line 1217 
  io_sq->db_addr = (u32 *)((unsigned long)ena_dev->reg_bar + (unsigned long)cmd_completion.sq_doorbell_offset);
  #line 1220 
  if (io_sq->mem_queue_type == (unsigned int)ENA_ADMIN_PLACEMENT_POLICY_DEV) {
    #line 1221 
    io_sq->header_addr = (u8 *)((unsigned long)ena_dev->mem_bar + (unsigned long)cmd_completion.llq_headers_offset);
    #line 1224 
    io_sq->desc_addr.pbuf_dev_addr = (u8 *)((unsigned long)ena_dev->mem_bar + (unsigned long)cmd_completion.llq_descriptors_offset);
  }
  {
    #line 1229 
    bool branch;
    #line 1229 
    struct _ddebug __UNIQUE_ID_ddebug403 = {.modname = (char *)"ena", .function = (char *)"ena_com_create_io_sq", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_com.c", .format = (char *)"created sq[%u], depth[%u]\n", .lineno = (unsigned int)1229U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 1229 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug403.key.dd_key_false.key,(_Bool)0);
    #line 1229 
    if ((long)((long)((int)branch != 0)) != 0L) 
                                                #line 1229 
                                                __dynamic_pr_debug(& __UNIQUE_ID_ddebug403,(char *)"ena",(int)io_sq->idx,(int)io_sq->q_depth);
  }
  #line 1231 
  return ret;
}

#line 1234  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_com.c"
static int ena_com_ind_tbl_convert_to_device(struct ena_com_dev *ena_dev)
{
  #line 1237 
  struct ena_com_io_sq *io_sq;
  #line 1238 
  u16 qid;
  #line 1239 
  int i;
  #line 1236 
  struct ena_rss *rss = & ena_dev->rss;
  #line 1241 
  i = 0;
  #line 1241 
  while (1 << (int)rss->tbl_log_size > i) {
    #line 1242 
    qid = *(rss->host_rss_ind_tbl + (unsigned long)i);
    #line 1243 
    if ((unsigned int)qid > 255U) 
                                  #line 1244 
                                  return -22;
    #line 1246 
    io_sq = & ena_dev->io_sq_queues[(int)qid];
    #line 1248 
    if (io_sq->direction != (unsigned int)ENA_COM_IO_QUEUE_DIRECTION_RX) 
      #line 1249 
      return -22;
    #line 1251 
    (rss->rss_ind_tbl + (unsigned long)i)->cq_idx = io_sq->idx;
    #line 1241 
    i ++;
  }
  #line 1254 
  return 0;
}

#line 1257  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_com.c"
static int ena_com_ind_tbl_convert_from_device(struct ena_com_dev *ena_dev)
{
  #line 1261 
  u8 idx;
  #line 1262 
  u16 i;
  #line 1259 
  u16 dev_idx_to_host_tbl[256U] = {(unsigned short)65535U};
  #line 1260 
  struct ena_rss *rss = & ena_dev->rss;
  #line 1264 
  i = (unsigned short)0U;
  #line 1264 
  while ((unsigned int)i <= 255U) {
    #line 1265 
    dev_idx_to_host_tbl[(int)ena_dev->io_sq_queues[(int)i].idx] = i;
    #line 1264 
    i = (u16)((int)i + 1);
  }
  #line 1267 
  i = (unsigned short)0U;
  #line 1267 
  while ((int)i < 1 << (int)rss->tbl_log_size) {
    #line 1268 
    if ((unsigned int)(rss->rss_ind_tbl + (unsigned long)i)->cq_idx > 256U) 
      #line 1269 
      return -22;
    #line 1270 
    idx = (unsigned char)(rss->rss_ind_tbl + (unsigned long)i)->cq_idx;
    #line 1272 
    if ((unsigned int)dev_idx_to_host_tbl[(int)idx] > 256U) 
                                                            #line 1273 
                                                            return -22;
    #line 1275 
    *(rss->host_rss_ind_tbl + (unsigned long)i) = dev_idx_to_host_tbl[(int)idx];
    #line 1267 
    i = (u16)((int)i + 1);
  }
  #line 1278 
  return 0;
}

#line 1281  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_com.c"
static void ena_com_update_intr_delay_resolution(struct ena_com_dev *ena_dev, u16 intr_delay_resolution)
{
  #line 1285 
  unsigned int tmp;
  #line 1285 
  if ((unsigned int)ena_dev->intr_delay_resolution != 0U) 
                                                          #line 1285 
                                                          tmp = (unsigned int)ena_dev->intr_delay_resolution; else 
                                                                    #line 1285 
                                                                    tmp = 1U;
  #line 1285 
  u16 prev_intr_delay_resolution = (unsigned short)tmp;
  #line 1290 
  if ((unsigned int)intr_delay_resolution == 0U) {
    #line 1291 
    printk((char *)"\001");
    #line 1292 
    intr_delay_resolution = (unsigned short)1U;
  }
  #line 1296 
  ena_dev->intr_moder_rx_interval = (ena_dev->intr_moder_rx_interval * (unsigned int)prev_intr_delay_resolution) / (unsigned int)intr_delay_resolution;
  #line 1302 
  ena_dev->intr_moder_tx_interval = (ena_dev->intr_moder_tx_interval * (unsigned int)prev_intr_delay_resolution) / (unsigned int)intr_delay_resolution;
  #line 1307 
  ena_dev->intr_delay_resolution = intr_delay_resolution;
  #line 1308 
  return;
}

#line 1314  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_com.c"
int ena_com_execute_admin_command(struct ena_com_admin_queue *admin_queue, struct ena_admin_aq_entry *cmd, size_t cmd_size, struct ena_admin_acq_entry *comp, size_t comp_size)
{
  #line 1320 
  struct ena_comp_ctx *comp_ctx;
  #line 1321 
  int ret;
  #line 1323 
  comp_ctx = ena_com_submit_admin_cmd(admin_queue,cmd,cmd_size,comp,comp_size);
  #line 1325 
  if ((int)IS_ERR((void *)comp_ctx) != 0) {
    #line 1326 
    ;
    #line 1326 
    if (ERR_PTR(-19L) == (void *)comp_ctx) {
      #line 1327 
      bool branch;
      #line 1327 
      struct _ddebug __UNIQUE_ID_ddebug404 = {.modname = (char *)"ena", .function = (char *)"ena_com_execute_admin_command", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_com.c", .format = (char *)"Failed to submit command [%ld]\n", .lineno = (unsigned int)1327U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 1327 
      branch = arch_static_branch(& __UNIQUE_ID_ddebug404.key.dd_key_false.key,(_Bool)0);
      #line 1327 
      if ((long)((long)((int)branch != 0)) != 0L) {
        #line 1327 
        __dynamic_pr_debug(& __UNIQUE_ID_ddebug404,(char *)"ena",PTR_ERR((void *)comp_ctx));
      }
    }
    else {
      #line 1330 
      printk((char *)"\001",PTR_ERR((void *)comp_ctx));
    }
    #line 1333 
    return (int)PTR_ERR((void *)comp_ctx);
  }
  #line 1336 
  ret = ena_com_wait_and_process_admin_cq(comp_ctx,admin_queue);
  #line 1337 
  if ((long)(ret != 0) != 0L) 
    #line 1338 
    if ((int)admin_queue->running_state != 0) 
                                              #line 1339 
                                              printk((char *)"\001",ret);
    else {
      #line 1341 
      bool branch_0;
      #line 1341 
      struct _ddebug __UNIQUE_ID_ddebug405 = {.modname = (char *)"ena", .function = (char *)"ena_com_execute_admin_command", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_com.c", .format = (char *)"Failed to process command. ret = %d\n", .lineno = (unsigned int)1341U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 1341 
      branch_0 = arch_static_branch(& __UNIQUE_ID_ddebug405.key.dd_key_false.key,(_Bool)0);
      #line 1341 
      if ((long)((long)((int)branch_0 != 0)) != 0L) 
                                                    #line 1341 
                                                    __dynamic_pr_debug(& __UNIQUE_ID_ddebug405,(char *)"ena",ret);
    }
  #line 1343 
  return ret;
}

#line 1346  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_com.c"
int ena_com_create_io_cq(struct ena_com_dev *ena_dev, struct ena_com_io_cq *io_cq)
{
  #line 1350 
  struct ena_admin_aq_create_cq_cmd create_cmd;
  #line 1351 
  struct ena_admin_acq_create_cq_resp_desc cmd_completion;
  #line 1352 
  int ret;
  #line 1349 
  struct ena_com_admin_queue *admin_queue = & ena_dev->admin_queue;
  #line 1354 
  memset((void *)(& create_cmd),0,20UL);
  #line 1356 
  create_cmd.aq_common_descriptor.opcode = (unsigned char)3U;
  #line 1358 
  create_cmd.cq_caps_2 = (unsigned char)((unsigned int)create_cmd.cq_caps_2 | ((unsigned int)((unsigned char)((unsigned int)io_cq->cdesc_entry_size_in_bytes / 4U)) & 31U));
  #line 1360 
  create_cmd.cq_caps_1 = (unsigned char)((unsigned int)create_cmd.cq_caps_1 | 32U);
  #line 1363 
  create_cmd.msix_vector = io_cq->msix_vector;
  #line 1364 
  create_cmd.cq_depth = io_cq->q_depth;
  #line 1366 
  ret = ena_com_mem_addr_set(ena_dev,& create_cmd.cq_ba,io_cq->cdesc_addr.phys_addr);
  #line 1369 
  if ((long)(ret != 0) != 0L) {
    #line 1370 
    printk((char *)"\001");
    #line 1371 
    return ret;
  }
  #line 1374 
  ret = ena_com_execute_admin_command(admin_queue,(struct ena_admin_aq_entry *)(& create_cmd),20UL,(struct ena_admin_acq_entry *)(& cmd_completion),24UL);
  #line 1379 
  if ((long)(ret != 0) != 0L) {
    #line 1380 
    printk((char *)"\001",ret);
    #line 1381 
    return ret;
  }
  #line 1384 
  io_cq->idx = cmd_completion.cq_idx;
  #line 1386 
  io_cq->unmask_reg = (u32 *)((unsigned long)ena_dev->reg_bar + (unsigned long)cmd_completion.cq_interrupt_unmask_register_offset);
  #line 1389 
  if (cmd_completion.cq_head_db_register_offset != 0U) 
                                                       #line 1390 
                                                       io_cq->cq_head_db_reg = (u32 *)((unsigned long)ena_dev->reg_bar + (unsigned long)cmd_completion.cq_head_db_register_offset);
  #line 1394 
  if (cmd_completion.numa_node_register_offset != 0U) 
                                                      #line 1395 
                                                      io_cq->numa_node_cfg_reg = (u32 *)((unsigned long)ena_dev->reg_bar + (unsigned long)cmd_completion.numa_node_register_offset);
  {
    #line 1399 
    bool branch;
    #line 1399 
    struct _ddebug __UNIQUE_ID_ddebug406 = {.modname = (char *)"ena", .function = (char *)"ena_com_create_io_cq", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_com.c", .format = (char *)"created cq[%u], depth[%u]\n", .lineno = (unsigned int)1399U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 1399 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug406.key.dd_key_false.key,(_Bool)0);
    #line 1399 
    if ((long)((long)((int)branch != 0)) != 0L) 
                                                #line 1399 
                                                __dynamic_pr_debug(& __UNIQUE_ID_ddebug406,(char *)"ena",(int)io_cq->idx,(int)io_cq->q_depth);
  }
  #line 1401 
  return ret;
}

#line 1404  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_com.c"
int ena_com_get_io_handlers(struct ena_com_dev *ena_dev, u16 qid, struct ena_com_io_sq **io_sq, struct ena_com_io_cq **io_cq)
{
  #line 1408 
  if ((unsigned int)qid > 255U) {
    #line 1409 
    printk((char *)"\001",(int)qid,256U);
    #line 1411 
    return -22;
  }
  #line 1414 
  *io_sq = & ena_dev->io_sq_queues[(int)qid];
  #line 1415 
  *io_cq = & ena_dev->io_cq_queues[(int)qid];
  #line 1417 
  return 0;
}

#line 1420  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_com.c"
void ena_com_abort_admin_commands(struct ena_com_dev *ena_dev)
{
  #line 1423 
  struct ena_comp_ctx *comp_ctx;
  #line 1424 
  u16 i;
  #line 1422 
  struct ena_com_admin_queue *admin_queue = & ena_dev->admin_queue;
  #line 1426 
  if (admin_queue->comp_ctx == (struct ena_comp_ctx *)0) 
                                                         #line 1427 
                                                         return;
  #line 1429 
  i = (unsigned short)0U;
  #line 1429 
  while ((int)admin_queue->q_depth > (int)i) {
    #line 1430 
    comp_ctx = get_comp_ctxt(admin_queue,(unsigned short)((int)i),(_Bool)0);
    #line 1431 
    if ((long)(comp_ctx == (struct ena_comp_ctx *)0) != 0L) 
                                                            #line 1432 
                                                            break;
    #line 1434 
    comp_ctx->status = ENA_CMD_ABORTED;
    #line 1436 
    complete(& comp_ctx->wait_event);
    #line 1429 
    i = (u16)((int)i + 1);
  }
  #line 1438 
  return;
}

#line 1440  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_com.c"
void ena_com_wait_for_abort_completion(struct ena_com_dev *ena_dev)
{
  #line 1442 
  struct ena_com_admin_queue *admin_queue = & ena_dev->admin_queue;
  #line 1443 
  unsigned long flags = 0UL;
  #line 1445 
  cif___ldv_spin_lock_q_lock_of_ena_com_admin_queue(& admin_queue->q_lock);
  #line 1446 
  while (1) {
    #line 1446 
    if (! (atomic_read_0(& admin_queue->outstanding_cmds) != 0)) 
                                                                 #line 1446 
                                                                 break;
    #line 1447 
    cif_spin_unlock_irqrestore_q_lock_of_ena_com_admin_queue(& admin_queue->q_lock,flags);
    #line 1448 
    msleep(5U);
    #line 1449 
    cif___ldv_spin_lock_q_lock_of_ena_com_admin_queue(& admin_queue->q_lock);
  }
  #line 1451 
  cif_spin_unlock_irqrestore_q_lock_of_ena_com_admin_queue(& admin_queue->q_lock,flags);
  #line 1452 
  return;
}

#line 1454  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_com.c"
int ena_com_destroy_io_cq(struct ena_com_dev *ena_dev, struct ena_com_io_cq *io_cq)
{
  #line 1458 
  struct ena_admin_aq_destroy_cq_cmd destroy_cmd;
  #line 1459 
  struct ena_admin_acq_destroy_cq_resp_desc destroy_resp;
  #line 1460 
  int ret;
  #line 1457 
  struct ena_com_admin_queue *admin_queue = & ena_dev->admin_queue;
  #line 1462 
  memset((void *)(& destroy_cmd),0,8UL);
  #line 1464 
  destroy_cmd.cq_idx = io_cq->idx;
  #line 1465 
  destroy_cmd.aq_common_descriptor.opcode = (unsigned char)4U;
  #line 1467 
  ret = ena_com_execute_admin_command(admin_queue,(struct ena_admin_aq_entry *)(& destroy_cmd),8UL,(struct ena_admin_acq_entry *)(& destroy_resp),8UL);
  #line 1473 
  if ((long)((ret != 0 && ret != -19) != 0) != 0L) 
                                                   #line 1474 
                                                   printk((char *)"\001",ret);
  #line 1476 
  return ret;
}

#line 1479  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_com.c"
bool ena_com_get_admin_running_state(struct ena_com_dev *ena_dev)
{
  #line 1481 
  return ena_dev->admin_queue.running_state;
}

#line 1484  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_com.c"
void ena_com_set_admin_running_state(struct ena_com_dev *ena_dev, bool state)
{
  #line 1486 
  struct ena_com_admin_queue *admin_queue = & ena_dev->admin_queue;
  #line 1487 
  unsigned long flags = 0UL;
  #line 1489 
  cif___ldv_spin_lock_q_lock_of_ena_com_admin_queue(& admin_queue->q_lock);
  #line 1490 
  ena_dev->admin_queue.running_state = state;
  #line 1491 
  cif_spin_unlock_irqrestore_q_lock_of_ena_com_admin_queue(& admin_queue->q_lock,flags);
  #line 1492 
  return;
}

#line 1494  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_com.c"
void ena_com_admin_aenq_enable(struct ena_com_dev *ena_dev)
{
  #line 1496 
  u16 depth = ena_dev->aenq.q_depth;
  {
    #line 1498 
    int __ret_warn_on = (int)ena_dev->aenq.head != (int)depth;
    #line 1498 
    if ((long)(__ret_warn_on != 0) != 0L) {
      #line 1498 
      __warn_printk((char *)"Invalid AENQ state\n");
      #line 1499 
      ldv_inline_asm();
      #line 1500 
      ldv_inline_asm();
    }
    #line 1498 
    long tmp = (long)(__ret_warn_on != 0);
  }
  #line 1503 
  writel((unsigned int)depth,(void *)(ena_dev->reg_bar + 64U));
  #line 1504 
  return;
}

#line 1506  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_com.c"
int ena_com_set_aenq_config(struct ena_com_dev *ena_dev, u32 groups_flag)
{
  #line 1508 
  struct ena_com_admin_queue *admin_queue;
  #line 1509 
  struct ena_admin_set_feat_cmd cmd;
  #line 1510 
  struct ena_admin_set_feat_resp resp;
  #line 1511 
  struct ena_admin_get_feat_resp get_resp;
  #line 1512 
  int ret;
  #line 1514 
  ret = ena_com_get_feature(ena_dev,& get_resp,(enum ena_admin_aq_feature_id)ENA_ADMIN_AENQ_CONFIG,(unsigned char)0);
  #line 1515 
  if (ret != 0) {
    #line 1516 
    printk((char *)"\001");
    #line 1517 
    return ret;
  }
  #line 1520 
  if ((get_resp.u.aenq.supported_groups & groups_flag) != groups_flag) {
    #line 1521 
    printk((char *)"\001",get_resp.u.aenq.supported_groups,groups_flag);
    #line 1523 
    return -95;
  }
  #line 1526 
  memset((void *)(& cmd),0,64UL);
  #line 1527 
  admin_queue = & ena_dev->admin_queue;
  #line 1529 
  cmd.aq_common_descriptor.opcode = (unsigned char)9U;
  #line 1530 
  cmd.aq_common_descriptor.flags = (unsigned char)0U;
  #line 1531 
  cmd.feat_common.feature_id = (unsigned char)26U;
  #line 1532 
  cmd.u.aenq.enabled_groups = groups_flag;
  #line 1534 
  ret = ena_com_execute_admin_command(admin_queue,(struct ena_admin_aq_entry *)(& cmd),64UL,(struct ena_admin_acq_entry *)(& resp),64UL);
  #line 1540 
  if ((long)(ret != 0) != 0L) 
                              #line 1541 
                              printk((char *)"\001",ret);
  #line 1543 
  return ret;
}

#line 1546  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_com.c"
int ena_com_get_dma_width(struct ena_com_dev *ena_dev)
{
  #line 1549 
  int width;
  #line 1548 
  u32 caps = ena_com_reg_bar_read32(ena_dev,(unsigned short)8);
  #line 1551 
  if ((long)(caps == 4294967295U) != 0L) {
    #line 1552 
    printk((char *)"\001");
    #line 1553 
    return -62;
  }
  #line 1556 
  width = (int)(caps >> 8) & 255;
  {
    #line 1559 
    bool branch;
    #line 1559 
    struct _ddebug __UNIQUE_ID_ddebug408 = {.modname = (char *)"ena", .function = (char *)"ena_com_get_dma_width", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_com.c", .format = (char *)"ENA dma width: %d\n", .lineno = (unsigned int)1559U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 1559 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug408.key.dd_key_false.key,(_Bool)0);
    #line 1559 
    if ((long)((long)((int)branch != 0)) != 0L) 
                                                #line 1559 
                                                __dynamic_pr_debug(& __UNIQUE_ID_ddebug408,(char *)"ena",width);
  }
  #line 1561 
  if ((unsigned int)width + 4294967264U > 16U) {
    #line 1562 
    printk((char *)"\001",width);
    #line 1563 
    return -22;
  }
  #line 1566 
  ena_dev->dma_addr_bits = (unsigned int)width;
  #line 1568 
  return width;
}

#line 1571  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_com.c"
int ena_com_validate_version(struct ena_com_dev *ena_dev)
{
  #line 1573 
  u32 ver;
  #line 1574 
  u32 ctrl_ver;
  #line 1575 
  u32 ctrl_ver_masked;
  #line 1580 
  ver = ena_com_reg_bar_read32(ena_dev,(unsigned short)0);
  #line 1581 
  ctrl_ver = ena_com_reg_bar_read32(ena_dev,(unsigned short)4);
  #line 1584 
  if ((long)((ver == 4294967295U || ctrl_ver == 4294967295U) != 0) != 0L) {
    #line 1586 
    printk((char *)"\001");
    #line 1587 
    return -62;
  }
  #line 1590 
  printk((char *)"\001",(ver >> 8) & 255U,ver & 255U);
  #line 1595 
  printk((char *)"\001",(ctrl_ver >> 16) & 255U,(ctrl_ver >> 8) & 255U,ctrl_ver & 255U,ctrl_ver >> 24);
  #line 1604 
  ctrl_ver_masked = ctrl_ver & 16777215U;
  #line 1610 
  if (ctrl_ver_masked == 0U) {
    #line 1611 
    printk((char *)"\001");
    #line 1612 
    return -1;
  }
  #line 1615 
  return 0;
}

#line 1618  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_com.c"
void ena_com_admin_destroy(struct ena_com_dev *ena_dev)
{
  #line 1624 
  u16 size;
  #line 1620 
  struct ena_com_admin_queue *admin_queue = & ena_dev->admin_queue;
  #line 1621 
  struct ena_com_admin_cq *cq = & admin_queue->cq;
  #line 1622 
  struct ena_com_admin_sq *sq = & admin_queue->sq;
  #line 1623 
  struct ena_com_aenq *aenq = & ena_dev->aenq;
  #line 1626 
  if (admin_queue->comp_ctx != (struct ena_comp_ctx *)0) 
                                                         #line 1627 
                                                         devm_kfree((struct device *)ena_dev->dmadev,(void *)admin_queue->comp_ctx);
  #line 1628 
  admin_queue->comp_ctx = (struct ena_comp_ctx *)0;
  #line 1629 
  size = (unsigned short)((unsigned int)admin_queue->q_depth * 64U);
  #line 1630 
  if (sq->entries != (struct ena_admin_aq_entry *)0) 
                                                     #line 1631 
                                                     dma_free_coherent((struct device *)ena_dev->dmadev,(unsigned long)size,(void *)sq->entries,sq->dma_addr);
  #line 1633 
  sq->entries = (struct ena_admin_aq_entry *)0;
  #line 1635 
  size = (unsigned short)((unsigned int)admin_queue->q_depth * 64U);
  #line 1636 
  if (cq->entries != (struct ena_admin_acq_entry *)0) 
                                                      #line 1637 
                                                      dma_free_coherent((struct device *)ena_dev->dmadev,(unsigned long)size,(void *)cq->entries,cq->dma_addr);
  #line 1639 
  cq->entries = (struct ena_admin_acq_entry *)0;
  #line 1641 
  size = (unsigned short)((unsigned int)aenq->q_depth * 64U);
  #line 1642 
  if (ena_dev->aenq.entries != (struct ena_admin_aenq_entry *)0) 
                                                                 #line 1643 
                                                                 dma_free_coherent((struct device *)ena_dev->dmadev,(unsigned long)size,(void *)aenq->entries,aenq->dma_addr);
  #line 1645 
  aenq->entries = (struct ena_admin_aenq_entry *)0;
  #line 1646 
  return;
}

#line 1648  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_com.c"
void ena_com_set_admin_polling_mode(struct ena_com_dev *ena_dev, bool polling)
{
  #line 1650 
  u32 mask_value = 0U;
  #line 1652 
  if ((int)polling != 0) 
                         #line 1653 
                         mask_value = 1U;
  #line 1655 
  writel(mask_value,(void *)(ena_dev->reg_bar + 76U));
  #line 1656 
  ena_dev->admin_queue.polling = polling;
  #line 1657 
  return;
}

#line 1659  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_com.c"
void ena_com_set_admin_auto_polling_mode(struct ena_com_dev *ena_dev, bool polling)
{
  #line 1662 
  ena_dev->admin_queue.auto_polling = polling;
  #line 1663 
  return;
}

#line 1665  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_com.c"
int ena_com_mmio_reg_read_request_init(struct ena_com_dev *ena_dev)
{
  #line 1667 
  struct ena_com_mmio_read *mmio_read = & ena_dev->mmio_read;
  #line 1669 
  spinlock_check(& mmio_read->lock);
  {
    #line 1669 
    struct lock_class_key __key;
    #line 1669 
    __raw_spin_lock_init(& mmio_read->lock.__anonCompField_spinlock_25.rlock,(char *)"&(&mmio_read->lock)->rlock",& __key);
  }
  #line 1671 
  mmio_read->read_resp = (struct ena_admin_ena_mmio_req_read_less_resp *)dma_alloc_coherent((struct device *)ena_dev->dmadev,8UL,& mmio_read->read_resp_dma_addr,3264U);
  #line 1674 
  if ((long)(mmio_read->read_resp == (struct ena_admin_ena_mmio_req_read_less_resp *)0) != 0L) 
    #line 1675 
    goto err;
  #line 1677 
  ena_com_mmio_reg_read_request_write_dev_addr(ena_dev);
  #line 1679 
  (mmio_read->read_resp)->req_id = (unsigned short)0U;
  #line 1680 
  mmio_read->seq_num = (unsigned short)0U;
  #line 1681 
  mmio_read->readless_supported = (_Bool)1;
  #line 1683 
  return 0;
  #line 1685 
  err: 
       #line 1685 
  ;
  #line 1687 
  return -12;
}

#line 1690  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_com.c"
void ena_com_set_mmio_read_mode(struct ena_com_dev *ena_dev, bool readless_supported)
{
  #line 1692 
  struct ena_com_mmio_read *mmio_read = & ena_dev->mmio_read;
  #line 1694 
  mmio_read->readless_supported = readless_supported;
  #line 1695 
  return;
}

#line 1697  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_com.c"
void ena_com_mmio_reg_read_request_destroy(struct ena_com_dev *ena_dev)
{
  #line 1699 
  struct ena_com_mmio_read *mmio_read = & ena_dev->mmio_read;
  #line 1701 
  writel(0U,(void *)(ena_dev->reg_bar + 96U));
  #line 1702 
  writel(0U,(void *)(ena_dev->reg_bar + 100U));
  #line 1704 
  dma_free_coherent((struct device *)ena_dev->dmadev,8UL,(void *)mmio_read->read_resp,mmio_read->read_resp_dma_addr);
  #line 1707 
  mmio_read->read_resp = (struct ena_admin_ena_mmio_req_read_less_resp *)0;
  #line 1708 
  return;
}

#line 1710  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_com.c"
void ena_com_mmio_reg_read_request_write_dev_addr(struct ena_com_dev *ena_dev)
{
  #line 1713 
  u32 addr_low;
  #line 1713 
  u32 addr_high;
  #line 1712 
  struct ena_com_mmio_read *mmio_read = & ena_dev->mmio_read;
  #line 1715 
  addr_low = (unsigned int)mmio_read->read_resp_dma_addr;
  #line 1716 
  addr_high = (unsigned int)(mmio_read->read_resp_dma_addr >> 32);
  #line 1718 
  writel(addr_low,(void *)(ena_dev->reg_bar + 96U));
  #line 1719 
  writel(addr_high,(void *)(ena_dev->reg_bar + 100U));
  #line 1720 
  return;
}

#line 1722  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_com.c"
int ena_com_admin_init(struct ena_com_dev *ena_dev, struct ena_aenq_handlers *aenq_handlers_0)
{
  #line 1726 
  u32 aq_caps;
  #line 1726 
  u32 acq_caps;
  #line 1726 
  u32 dev_sts;
  #line 1726 
  u32 addr_low;
  #line 1726 
  u32 addr_high;
  #line 1727 
  int ret;
  #line 1725 
  struct ena_com_admin_queue *admin_queue = & ena_dev->admin_queue;
  #line 1729 
  dev_sts = ena_com_reg_bar_read32(ena_dev,(unsigned short)88);
  #line 1731 
  if ((long)(dev_sts == 4294967295U) != 0L) {
    #line 1732 
    printk((char *)"\001");
    #line 1733 
    return -62;
  }
  #line 1736 
  if ((dev_sts & 1U) == 0U) {
    #line 1737 
    printk((char *)"\001");
    #line 1738 
    return -19;
  }
  #line 1741 
  admin_queue->q_depth = (unsigned short)32U;
  #line 1743 
  admin_queue->q_dmadev = ena_dev->dmadev;
  #line 1744 
  admin_queue->polling = (_Bool)0;
  #line 1745 
  admin_queue->curr_cmd_id = (unsigned short)0U;
  #line 1747 
  atomic_set(& admin_queue->outstanding_cmds,0);
  #line 1749 
  spinlock_check(& admin_queue->q_lock);
  {
    #line 1749 
    struct lock_class_key __key;
    #line 1749 
    __raw_spin_lock_init(& admin_queue->q_lock.__anonCompField_spinlock_25.rlock,(char *)"&(&admin_queue->q_lock)->rlock",& __key);
  }
  #line 1751 
  ret = ena_com_init_comp_ctxt(admin_queue);
  #line 1752 
  if (ret != 0) 
                #line 1753 
                goto error;
  #line 1755 
  ret = ena_com_admin_init_sq(admin_queue);
  #line 1756 
  if (ret != 0) 
                #line 1757 
                goto error;
  #line 1759 
  ret = ena_com_admin_init_cq(admin_queue);
  #line 1760 
  if (ret != 0) 
                #line 1761 
                goto error;
  #line 1763 
  admin_queue->sq.db_addr = (u32 *)((unsigned long)ena_dev->reg_bar + 44UL);
  #line 1766 
  addr_low = (unsigned int)admin_queue->sq.dma_addr;
  #line 1767 
  addr_high = (unsigned int)(admin_queue->sq.dma_addr >> 32);
  #line 1769 
  writel(addr_low,(void *)(ena_dev->reg_bar + 16U));
  #line 1770 
  writel(addr_high,(void *)(ena_dev->reg_bar + 20U));
  #line 1772 
  addr_low = (unsigned int)admin_queue->cq.dma_addr;
  #line 1773 
  addr_high = (unsigned int)(admin_queue->cq.dma_addr >> 32);
  #line 1775 
  writel(addr_low,(void *)(ena_dev->reg_bar + 32U));
  #line 1776 
  writel(addr_high,(void *)(ena_dev->reg_bar + 36U));
  #line 1778 
  aq_caps = 0U;
  #line 1779 
  aq_caps = (unsigned int)admin_queue->q_depth | aq_caps;
  #line 1780 
  aq_caps |= 4194304U;
  #line 1784 
  acq_caps = 0U;
  #line 1785 
  acq_caps = (unsigned int)admin_queue->q_depth | acq_caps;
  #line 1786 
  acq_caps |= 4194304U;
  #line 1790 
  writel(aq_caps,(void *)(ena_dev->reg_bar + 24U));
  #line 1791 
  writel(acq_caps,(void *)(ena_dev->reg_bar + 40U));
  #line 1792 
  ret = ena_com_admin_init_aenq(ena_dev,aenq_handlers_0);
  #line 1793 
  if (ret != 0) 
                #line 1794 
                goto error;
  #line 1796 
  admin_queue->running_state = (_Bool)1;
  #line 1798 
  return 0;
  #line 1799 
  error: 
         #line 1799 
  ;
  #line 1800 
  ena_com_admin_destroy(ena_dev);
  #line 1802 
  return ret;
}

#line 1805  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_com.c"
int ena_com_create_io_queue(struct ena_com_dev *ena_dev, struct ena_com_create_io_ctx *ctx)
{
  #line 1808 
  struct ena_com_io_sq *io_sq;
  #line 1809 
  struct ena_com_io_cq *io_cq;
  #line 1810 
  int ret;
  #line 1812 
  if ((unsigned int)ctx->qid > 255U) {
    #line 1813 
    printk((char *)"\001",(int)ctx->qid,256U);
    #line 1815 
    return -22;
  }
  #line 1818 
  io_sq = & ena_dev->io_sq_queues[(int)ctx->qid];
  #line 1819 
  io_cq = & ena_dev->io_cq_queues[(int)ctx->qid];
  #line 1821 
  memset((void *)io_sq,0,192UL);
  #line 1822 
  memset((void *)io_cq,0,128UL);
  #line 1825 
  io_cq->q_depth = ctx->queue_size;
  #line 1826 
  io_cq->direction = ctx->direction;
  #line 1827 
  io_cq->qid = ctx->qid;
  #line 1829 
  io_cq->msix_vector = ctx->msix_vector;
  #line 1831 
  io_sq->q_depth = ctx->queue_size;
  #line 1832 
  io_sq->direction = ctx->direction;
  #line 1833 
  io_sq->qid = ctx->qid;
  #line 1835 
  io_sq->mem_queue_type = ctx->mem_queue_type;
  #line 1837 
  if (ctx->direction == (unsigned int)ENA_COM_IO_QUEUE_DIRECTION_TX) {
    #line 1840 
    unsigned int __UNIQUE_ID___x409;
    #line 1840 
    unsigned int tmp;
    {
      #line 1840 
      __UNIQUE_ID___x409 = ena_dev->tx_max_header_size;
      #line 1840 
      unsigned int __UNIQUE_ID___y410 = 256U;
      #line 1840 
      if (__UNIQUE_ID___x409 < __UNIQUE_ID___y410) 
                                                   #line 1840 
                                                   tmp = __UNIQUE_ID___x409; else 
                                                                    #line 1840 
                                                                    tmp = __UNIQUE_ID___y410;
      }
    #line 1839 
    io_sq->tx_max_header_size = tmp;
  }
  #line 1842 
  ret = ena_com_init_io_sq(ena_dev,ctx,io_sq);
  #line 1843 
  if (ret != 0) 
                #line 1844 
                goto error;
  #line 1845 
  ret = ena_com_init_io_cq(ena_dev,ctx,io_cq);
  #line 1846 
  if (ret != 0) 
                #line 1847 
                goto error;
  #line 1849 
  ret = ena_com_create_io_cq(ena_dev,io_cq);
  #line 1850 
  if (ret != 0) 
                #line 1851 
                goto error;
  #line 1853 
  ret = ena_com_create_io_sq(ena_dev,io_sq,(unsigned short)((int)io_cq->idx));
  #line 1854 
  if (ret != 0) 
                #line 1855 
                goto destroy_io_cq;
  #line 1857 
  return 0;
  #line 1859 
  destroy_io_cq: 
                 #line 1859 
  ;
  #line 1860 
  ena_com_destroy_io_cq(ena_dev,io_cq);
  #line 1861 
  error: 
         #line 1861 
  ;
  #line 1862 
  ena_com_io_queue_free(ena_dev,io_sq,io_cq);
  #line 1863 
  return ret;
}

#line 1866  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_com.c"
void ena_com_destroy_io_queue(struct ena_com_dev *ena_dev, u16 qid)
{
  #line 1868 
  struct ena_com_io_sq *io_sq;
  #line 1869 
  struct ena_com_io_cq *io_cq;
  #line 1871 
  if ((unsigned int)qid > 255U) {
    #line 1872 
    printk((char *)"\001",(int)qid,256U);
    #line 1874 
    return;
  }
  #line 1877 
  io_sq = & ena_dev->io_sq_queues[(int)qid];
  #line 1878 
  io_cq = & ena_dev->io_cq_queues[(int)qid];
  #line 1880 
  ena_com_destroy_io_sq(ena_dev,io_sq);
  #line 1881 
  ena_com_destroy_io_cq(ena_dev,io_cq);
  #line 1883 
  ena_com_io_queue_free(ena_dev,io_sq,io_cq);
  #line 1884 
  return;
}

#line 1886  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_com.c"
int ena_com_get_link_params(struct ena_com_dev *ena_dev, struct ena_admin_get_feat_resp *resp)
{
  #line 1889 
  return ena_com_get_feature(ena_dev,resp,
                          (enum ena_admin_aq_feature_id)ENA_ADMIN_LINK_CONFIG,
                          (unsigned char)0);
}

#line 1892  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_com.c"
int ena_com_get_dev_attr_feat(struct ena_com_dev *ena_dev, struct ena_com_dev_get_features_ctx *get_feat_ctx)
{
  #line 1895 
  struct ena_admin_get_feat_resp get_resp;
  #line 1896 
  int rc;
  #line 1898 
  rc = ena_com_get_feature(ena_dev,& get_resp,(enum ena_admin_aq_feature_id)ENA_ADMIN_DEVICE_ATTRIBUTES,(unsigned char)0);
  #line 1900 
  if (rc != 0) 
               #line 1901 
               return rc;
  #line 1903 
  memcpy((void *)(& get_feat_ctx->dev_attr),(void *)(& get_resp.u.dev_attr),36UL);
  #line 1905 
  ena_dev->supported_features = get_resp.u.dev_attr.supported_features;
  #line 1907 
  if (((unsigned long)ena_dev->supported_features & 128UL) != 0UL) {
    #line 1908 
    rc = ena_com_get_feature(ena_dev,& get_resp,(enum ena_admin_aq_feature_id)ENA_ADMIN_MAX_QUEUES_EXT,(unsigned char)1);
    #line 1911 
    if (rc != 0) 
                 #line 1912 
                 return rc;
    #line 1914 
    if ((unsigned int)get_resp.u.max_queue_ext.version != 1U) 
                                                              #line 1915 
                                                              return -22;
    #line 1917 
    memcpy((void *)(& get_feat_ctx->max_queue_ext),(void *)(& get_resp.u.max_queue_ext),44UL);
    #line 1919 
    ena_dev->tx_max_header_size = get_resp.u.max_queue_ext.__anonCompField_ena_admin_queue_ext_feature_desc_197.max_queue_ext.max_tx_header_size;
  }
  else {
    #line 1922 
    rc = ena_com_get_feature(ena_dev,& get_resp,(enum ena_admin_aq_feature_id)ENA_ADMIN_MAX_QUEUES_NUM,(unsigned char)0);
    #line 1924 
    memcpy((void *)(& get_feat_ctx->max_queues),(void *)(& get_resp.u.max_queue),32UL);
    #line 1926 
    ena_dev->tx_max_header_size = get_resp.u.max_queue.max_header_size;
    #line 1929 
    if (rc != 0) 
                 #line 1930 
                 return rc;
  }
  #line 1933 
  rc = ena_com_get_feature(ena_dev,& get_resp,(enum ena_admin_aq_feature_id)ENA_ADMIN_AENQ_CONFIG,(unsigned char)0);
  #line 1935 
  if (rc != 0) 
               #line 1936 
               return rc;
  #line 1938 
  memcpy((void *)(& get_feat_ctx->aenq),(void *)(& get_resp.u.aenq),8UL);
  #line 1941 
  rc = ena_com_get_feature(ena_dev,& get_resp,(enum ena_admin_aq_feature_id)ENA_ADMIN_STATELESS_OFFLOAD_CONFIG,(unsigned char)0);
  #line 1943 
  if (rc != 0) 
               #line 1944 
               return rc;
  #line 1946 
  memcpy((void *)(& get_feat_ctx->offload),(void *)(& get_resp.u.offload),12UL);
  #line 1952 
  rc = ena_com_get_feature(ena_dev,& get_resp,(enum ena_admin_aq_feature_id)ENA_ADMIN_HW_HINTS,(unsigned char)0);
  #line 1954 
  if (rc == 0) 
               #line 1955 
               memcpy((void *)(& get_feat_ctx->hw_hints),(void *)(& get_resp.u.hw_hints),32UL);
  else 
    #line 1957 
    if (rc == -95) 
                   #line 1958 
                   memset((void *)(& get_feat_ctx->hw_hints),0,32UL); else 
                                                                    #line 1961 
                                                                    return rc;
  #line 1963 
  rc = ena_com_get_feature(ena_dev,& get_resp,(enum ena_admin_aq_feature_id)ENA_ADMIN_LLQ,(unsigned char)0);
  #line 1964 
  if (rc == 0) 
               #line 1965 
               memcpy((void *)(& get_feat_ctx->llq),(void *)(& get_resp.u.llq),28UL);
  else 
    #line 1967 
    if (rc == -95) 
                   #line 1968 
                   memset((void *)(& get_feat_ctx->llq),0,28UL); else 
                                                                   #line 1970 
                                                                   return rc;
  #line 1972 
  return 0;
}

#line 1975  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_com.c"
void ena_com_admin_q_comp_intr_handler(struct ena_com_dev *ena_dev)
{
  #line 1977 
  ena_com_handle_admin_completion(& ena_dev->admin_queue);
  #line 1978 
  return;
}

#line 1983  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_com.c"
static ena_aenq_handler ena_com_get_specific_aenq_cb(struct ena_com_dev *dev, u16 group)
{
  #line 1986 
  struct ena_aenq_handlers *aenq_handlers_0 = dev->aenq.aenq_handlers;
  #line 1988 
  if ((unsigned int)group <= 255U && aenq_handlers_0->handlers[(int)group] != (void (*)(void *, struct ena_admin_aenq_entry *))0) 
    #line 1989 
    return aenq_handlers_0->handlers[(int)group];
  #line 1991 
  return aenq_handlers_0->unimplemented_handler;
}

#line 1998  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_com.c"
void ena_com_aenq_intr_handler(struct ena_com_dev *dev, void *data)
{
  #line 2000 
  struct ena_admin_aenq_entry *aenq_e;
  #line 2001 
  struct ena_admin_aenq_common_desc *aenq_common;
  #line 2003 
  unsigned long long timestamp;
  #line 2004 
  void (*handler_cb)(void *, struct ena_admin_aenq_entry *);
  #line 2005 
  u16 masked_head;
  #line 2006 
  u8 phase;
  #line 2002 
  struct ena_com_aenq *aenq = & dev->aenq;
  #line 2005 
  u16 processed = (unsigned short)0U;
  #line 2008 
  masked_head = (unsigned short)((unsigned int)aenq->head & ((unsigned int)aenq->q_depth + 65535U));
  #line 2009 
  phase = aenq->phase;
  #line 2010 
  aenq_e = aenq->entries + (unsigned long)masked_head;
  #line 2011 
  aenq_common = & aenq_e->aenq_common_desc;
  #line 2014 
  while (1) {
    #line 2015 
    union __anonunion___u_2646 __u;
    #line 2014 
    __read_once_size((void *)(& aenq_common->flags),(void *)(& __u.__c),1);
    #line 2014 
    ;
    #line 2014 
    if (! (((unsigned long)(__u.__val) & 1UL) == (unsigned long)phase)) 
      #line 2014 
      break;
    #line 2017 
    ldv_inline_asm();
    #line 2021 
    timestamp = (unsigned long long)aenq_common->timestamp_low | ((unsigned long long)aenq_common->timestamp_high << 32);
    {
      #line 2024 
      bool branch;
      #line 2024 
      struct _ddebug __UNIQUE_ID_ddebug411 = {.modname = (char *)"ena", .function = (char *)"ena_com_aenq_intr_handler", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_com.c", .format = (char *)"AENQ! Group[%x] Syndrom[%x] timestamp: [%llus]\n", .lineno = (unsigned int)2024U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 2024 
      branch = arch_static_branch(& __UNIQUE_ID_ddebug411.key.dd_key_false.key,(_Bool)0);
      #line 2024 
      if ((long)((long)((int)branch != 0)) != 0L) 
                                                  #line 2024 
                                                  __dynamic_pr_debug(& __UNIQUE_ID_ddebug411,(char *)"ena",(int)aenq_common->group,(int)aenq_common->syndrom,timestamp);
    }
    #line 2028 
    handler_cb = ena_com_get_specific_aenq_cb(dev,(unsigned short)((int)aenq_common->group));
    #line 2030 
    (*handler_cb)(data,aenq_e);
    #line 2033 
    masked_head = (u16)((int)masked_head + 1);
    #line 2034 
    processed = (u16)((int)processed + 1);
    #line 2036 
    if ((long)((int)aenq->q_depth == (int)masked_head) != 0L) {
      #line 2037 
      masked_head = (unsigned short)0U;
      #line 2038 
      phase = (unsigned char)((unsigned int)phase == 0U);
    }
    #line 2040 
    aenq_e = aenq->entries + (unsigned long)masked_head;
    #line 2041 
    aenq_common = & aenq_e->aenq_common_desc;
  }
  #line 2044 
  aenq->head = (unsigned short)((int)aenq->head + (int)processed);
  #line 2045 
  aenq->phase = phase;
  #line 2048 
  if ((unsigned int)processed == 0U) 
                                     #line 2049 
                                     return;
  #line 2050 
  ldv_inline_asm();
  #line 2053 
  writel((unsigned int)aenq->head,(void *)(dev->reg_bar + 64U));
  #line 2054 
  return;
}

#line 2057  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_com.c"
int ena_com_dev_reset(struct ena_com_dev *ena_dev, enum ena_regs_reset_reason_types reset_reason)
{
  #line 2060 
  u32 stat;
  #line 2060 
  u32 timeout;
  #line 2060 
  u32 cap;
  #line 2060 
  u32 reset_val;
  #line 2061 
  int rc;
  #line 2063 
  stat = ena_com_reg_bar_read32(ena_dev,(unsigned short)88);
  #line 2064 
  cap = ena_com_reg_bar_read32(ena_dev,(unsigned short)8);
  #line 2066 
  if ((long)((stat == 4294967295U || cap == 4294967295U) != 0) != 0L) {
    #line 2068 
    printk((char *)"\001");
    #line 2069 
    return -62;
  }
  #line 2072 
  if ((stat & 1U) == 0U) {
    #line 2073 
    printk((char *)"\001");
    #line 2074 
    return -22;
  }
  #line 2077 
  timeout = (cap >> 1) & 31U;
  #line 2079 
  if (timeout == 0U) {
    #line 2080 
    printk((char *)"\001");
    #line 2081 
    return -22;
  }
  #line 2085 
  reset_val = 1U;
  #line 2086 
  reset_val = ((unsigned int)reset_reason << 28) | reset_val;
  #line 2088 
  writel(reset_val,(void *)(ena_dev->reg_bar + 84U));
  #line 2091 
  ena_com_mmio_reg_read_request_write_dev_addr(ena_dev);
  #line 2093 
  rc = wait_for_reset_state(ena_dev,timeout,(unsigned short)8);
  #line 2095 
  if (rc != 0) {
    #line 2096 
    printk((char *)"\001");
    #line 2097 
    return rc;
  }
  #line 2101 
  writel(0U,(void *)(ena_dev->reg_bar + 84U));
  #line 2102 
  rc = wait_for_reset_state(ena_dev,timeout,(unsigned short)0);
  #line 2103 
  if (rc != 0) {
    #line 2104 
    printk((char *)"\001");
    #line 2105 
    return rc;
  }
  #line 2108 
  timeout = (cap >> 16) & 15U;
  #line 2110 
  if (timeout != 0U) 
                     #line 2112 
                     ena_dev->admin_queue.completion_timeout = timeout * 100000U; else 
                                                                    #line 2114 
                                                                    ena_dev->admin_queue.completion_timeout = 3000000U;
  #line 2116 
  return 0;
}

#line 2119  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_com.c"
static int ena_get_dev_stats(struct ena_com_dev *ena_dev, struct ena_com_stats_ctx *ctx, enum ena_admin_get_stats_type type)
{
  #line 2125 
  struct ena_com_admin_queue *admin_queue;
  #line 2126 
  int ret;
  #line 2123 
  struct ena_admin_aq_get_stats_cmd *get_cmd = & ctx->get_cmd;
  #line 2124 
  struct ena_admin_acq_get_stats_resp *get_resp = & ctx->get_resp;
  #line 2128 
  admin_queue = & ena_dev->admin_queue;
  #line 2130 
  get_cmd->aq_common_descriptor.opcode = (unsigned char)11U;
  #line 2131 
  get_cmd->aq_common_descriptor.flags = (unsigned char)0U;
  #line 2132 
  get_cmd->type = (unsigned char)type;
  #line 2134 
  ret = ena_com_execute_admin_command(admin_queue,(struct ena_admin_aq_entry *)get_cmd,24UL,(struct ena_admin_acq_entry *)get_resp,48UL);
  #line 2140 
  if ((long)(ret != 0) != 0L) 
                              #line 2141 
                              printk((char *)"\001",ret);
  #line 2143 
  return ret;
}

#line 2146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_com.c"
int ena_com_get_dev_basic_stats(struct ena_com_dev *ena_dev, struct ena_admin_basic_stats *stats)
{
  #line 2149 
  struct ena_com_stats_ctx ctx;
  #line 2150 
  int ret;
  #line 2152 
  memset((void *)(& ctx),0,72UL);
  #line 2153 
  ret = ena_get_dev_stats(ena_dev,& ctx,(enum ena_admin_get_stats_type)ENA_ADMIN_GET_STATS_TYPE_BASIC);
  #line 2154 
  if ((long)(ret == 0) != 0L) 
                              #line 2155 
                              memcpy((void *)stats,(void *)(& ctx.get_resp.basic_stats),40UL);
  #line 2158 
  return ret;
}

#line 2161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_com.c"
int ena_com_set_dev_mtu(struct ena_com_dev *ena_dev, int mtu)
{
  #line 2163 
  struct ena_com_admin_queue *admin_queue;
  #line 2164 
  struct ena_admin_set_feat_cmd cmd;
  #line 2165 
  struct ena_admin_set_feat_resp resp;
  #line 2166 
  int ret;
  #line 2168 
  if (! ena_com_check_supported_feature_id(ena_dev,
                                           (enum ena_admin_aq_feature_id)ENA_ADMIN_MTU)) {
    {
      #line 2169 
      bool branch;
      #line 2169 
      struct _ddebug __UNIQUE_ID_ddebug412 = {.modname = (char *)"ena", .function = (char *)"ena_com_set_dev_mtu", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_com.c", .format = (char *)"Feature %d isn\'t supported\n", .lineno = (unsigned int)2169U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 2169 
      branch = arch_static_branch(& __UNIQUE_ID_ddebug412.key.dd_key_false.key,(_Bool)0);
      #line 2169 
      if ((long)((long)((int)branch != 0)) != 0L) 
                                                  #line 2169 
                                                  __dynamic_pr_debug(& __UNIQUE_ID_ddebug412,(char *)"ena",14);
    }
    #line 2170 
    return -95;
  }
  #line 2173 
  memset((void *)(& cmd),0,64UL);
  #line 2174 
  admin_queue = & ena_dev->admin_queue;
  #line 2176 
  cmd.aq_common_descriptor.opcode = (unsigned char)9U;
  #line 2177 
  cmd.aq_common_descriptor.flags = (unsigned char)0U;
  #line 2178 
  cmd.feat_common.feature_id = (unsigned char)14U;
  #line 2179 
  cmd.u.mtu.mtu = (unsigned int)mtu;
  #line 2181 
  ret = ena_com_execute_admin_command(admin_queue,(struct ena_admin_aq_entry *)(& cmd),64UL,(struct ena_admin_acq_entry *)(& resp),64UL);
  #line 2187 
  if ((long)(ret != 0) != 0L) 
                              #line 2188 
                              printk((char *)"\001",mtu,ret);
  #line 2190 
  return ret;
}

#line 2193  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_com.c"
int ena_com_get_offload_settings(struct ena_com_dev *ena_dev, struct ena_admin_feature_offload_desc *offload)
{
  #line 2196 
  int ret;
  #line 2197 
  struct ena_admin_get_feat_resp resp;
  #line 2199 
  ret = ena_com_get_feature(ena_dev,& resp,(enum ena_admin_aq_feature_id)ENA_ADMIN_STATELESS_OFFLOAD_CONFIG,(unsigned char)0);
  #line 2201 
  if ((long)(ret != 0) != 0L) {
    #line 2202 
    printk((char *)"\001",ret);
    #line 2203 
    return ret;
  }
  #line 2206 
  memcpy((void *)offload,(void *)(& resp.u.offload),12UL);
  #line 2208 
  return 0;
}

#line 2211  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_com.c"
int ena_com_set_hash_function(struct ena_com_dev *ena_dev)
{
  #line 2215 
  struct ena_admin_set_feat_cmd cmd;
  #line 2216 
  struct ena_admin_set_feat_resp resp;
  #line 2217 
  struct ena_admin_get_feat_resp get_resp;
  #line 2218 
  int ret;
  #line 2213 
  struct ena_com_admin_queue *admin_queue = & ena_dev->admin_queue;
  #line 2214 
  struct ena_rss *rss = & ena_dev->rss;
  #line 2220 
  if (! ena_com_check_supported_feature_id(ena_dev,
                                           (enum ena_admin_aq_feature_id)ENA_ADMIN_RSS_HASH_FUNCTION)) {
    {
      #line 2222 
      bool branch;
      #line 2222 
      struct _ddebug __UNIQUE_ID_ddebug413 = {.modname = (char *)"ena", .function = (char *)"ena_com_set_hash_function", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_com.c", .format = (char *)"Feature %d isn\'t supported\n", .lineno = (unsigned int)2222U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 2222 
      branch = arch_static_branch(& __UNIQUE_ID_ddebug413.key.dd_key_false.key,(_Bool)0);
      #line 2222 
      if ((long)((long)((int)branch != 0)) != 0L) 
                                                  #line 2222 
                                                  __dynamic_pr_debug(& __UNIQUE_ID_ddebug413,(char *)"ena",10);
    }
    #line 2224 
    return -95;
  }
  #line 2228 
  ret = ena_com_get_feature(ena_dev,& get_resp,(enum ena_admin_aq_feature_id)ENA_ADMIN_RSS_HASH_FUNCTION,(unsigned char)0);
  #line 2230 
  if ((long)(ret != 0) != 0L) 
                              #line 2231 
                              return ret;
  #line 2233 
  if ((((unsigned long)get_resp.u.flow_hash_func.supported_func >> (unsigned int)rss->hash_func) & 1UL) == 0UL) {
    #line 2234 
    printk((char *)"\001",(unsigned int)rss->hash_func);
    #line 2236 
    return -95;
  }
  #line 2239 
  memset((void *)(& cmd),0,64UL);
  #line 2241 
  cmd.aq_common_descriptor.opcode = (unsigned char)9U;
  #line 2242 
  cmd.aq_common_descriptor.flags = (unsigned char)4U;
  #line 2244 
  cmd.feat_common.feature_id = (unsigned char)10U;
  #line 2245 
  cmd.u.flow_hash_func.init_val = rss->hash_init_val;
  #line 2246 
  cmd.u.flow_hash_func.selected_func = (unsigned int)(1 << (unsigned int)rss->hash_func);
  #line 2248 
  ret = ena_com_mem_addr_set(ena_dev,& cmd.control_buffer.address,rss->hash_key_dma_addr);
  #line 2251 
  if ((long)(ret != 0) != 0L) {
    #line 2252 
    printk((char *)"\001");
    #line 2253 
    return ret;
  }
  #line 2256 
  cmd.control_buffer.length = 48U;
  #line 2258 
  ret = ena_com_execute_admin_command(admin_queue,(struct ena_admin_aq_entry *)(& cmd),64UL,(struct ena_admin_acq_entry *)(& resp),64UL);
  #line 2263 
  if ((long)(ret != 0) != 0L) {
    #line 2264 
    printk((char *)"\001",(unsigned int)rss->hash_func,ret);
    #line 2266 
    return -22;
  }
  #line 2269 
  return 0;
}

#line 2272  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_com.c"
int ena_com_fill_hash_function(struct ena_com_dev *ena_dev, enum ena_admin_hash_functions func, u8 *key, u16 key_len, u32 init_val)
{
  #line 2277 
  struct ena_admin_get_feat_resp get_resp;
  #line 2280 
  int rc;
  #line 2276 
  struct ena_rss *rss = & ena_dev->rss;
  #line 2278 
  struct ena_admin_feature_rss_flow_hash_control *hash_key = rss->hash_key;
  #line 2283 
  if ((long)(((int)key_len & 3) != 0) != 0L) 
                                             #line 2284 
                                             return -22;
  #line 2286 
  rc = ena_com_get_feature_ex(ena_dev,& get_resp,(enum ena_admin_aq_feature_id)ENA_ADMIN_RSS_HASH_FUNCTION,rss->hash_key_dma_addr,48U,(unsigned char)0);
  #line 2290 
  if ((long)(rc != 0) != 0L) 
                             #line 2291 
                             return rc;
  #line 2293 
  if (((unsigned int)(1 << (unsigned int)func) & get_resp.u.flow_hash_func.supported_func) == 0U) {
    #line 2294 
    printk((char *)"\001",(unsigned int)func);
    #line 2295 
    return -95;
  }
  #line 2298 
  switch ((unsigned int)func) {
    #line 2299 
    case (unsigned int)1: 
                          #line 2299 
    ;
    #line 2300 
    if ((unsigned int)key_len > 40U) {
      #line 2301 
      printk((char *)"\001",(int)key_len,40UL);
      #line 2303 
      return -22;
    }
    #line 2306 
    memcpy((void *)(& hash_key->key),(void *)key,(unsigned long)key_len);
    #line 2307 
    rss->hash_init_val = init_val;
    #line 2308 
    hash_key->keys_num = (unsigned int)((int)key_len >> 2);
    #line 2309 
    break;
    #line 2310 
    case (unsigned int)2: 
                          #line 2310 
    ;
    #line 2311 
    rss->hash_init_val = init_val;
    #line 2312 
    break;
    #line 2313 
    default: 
             #line 2313 
    ;
    #line 2314 
    printk((char *)"\001",(unsigned int)func);
    #line 2315 
    return -22;
  }
  #line 2318 
  rss->hash_func = func;
  #line 2319 
  rc = ena_com_set_hash_function(ena_dev);
  #line 2322 
  if ((long)(rc != 0) != 0L) 
                             #line 2323 
                             ena_com_get_hash_function(ena_dev,(enum ena_admin_hash_functions *)0,(u8 *)0U);
  #line 2325 
  return rc;
}

#line 2328  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_com.c"
int ena_com_get_hash_function(struct ena_com_dev *ena_dev, enum ena_admin_hash_functions *func, u8 *key)
{
  #line 2333 
  struct ena_admin_get_feat_resp get_resp;
  #line 2336 
  int rc;
  #line 2332 
  struct ena_rss *rss = & ena_dev->rss;
  #line 2334 
  struct ena_admin_feature_rss_flow_hash_control *hash_key = rss->hash_key;
  #line 2338 
  rc = ena_com_get_feature_ex(ena_dev,& get_resp,(enum ena_admin_aq_feature_id)ENA_ADMIN_RSS_HASH_FUNCTION,rss->hash_key_dma_addr,48U,(unsigned char)0);
  #line 2342 
  if ((long)(rc != 0) != 0L) 
                             #line 2343 
                             return rc;
  #line 2345 
  rss->hash_func = (enum ena_admin_hash_functions)get_resp.u.flow_hash_func.selected_func;
  #line 2346 
  if (func != (enum ena_admin_hash_functions *)0) 
                                                  #line 2347 
                                                  *func = rss->hash_func;
  #line 2349 
  if (key != (u8 *)0U) 
                       #line 2350 
                       memcpy((void *)key,(void *)(& hash_key->key),(unsigned long)hash_key->keys_num << 2);
  #line 2352 
  return 0;
}

#line 2355  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_com.c"
int ena_com_get_hash_ctrl(struct ena_com_dev *ena_dev, enum ena_admin_flow_hash_proto proto, u16 *fields)
{
  #line 2360 
  struct ena_admin_get_feat_resp get_resp;
  #line 2361 
  int rc;
  #line 2359 
  struct ena_rss *rss = & ena_dev->rss;
  #line 2363 
  rc = ena_com_get_feature_ex(ena_dev,& get_resp,(enum ena_admin_aq_feature_id)ENA_ADMIN_RSS_HASH_INPUT,rss->hash_ctrl_dma_addr,256U,(unsigned char)0);
  #line 2367 
  if ((long)(rc != 0) != 0L) 
                             #line 2368 
                             return rc;
  #line 2370 
  if (fields != (u16 *)0U) 
                           #line 2371 
                           *fields = (rss->hash_ctrl)->selected_fields[(unsigned int)proto].fields;
  #line 2373 
  return 0;
}

#line 2376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_com.c"
int ena_com_set_hash_ctrl(struct ena_com_dev *ena_dev)
{
  #line 2381 
  struct ena_admin_set_feat_cmd cmd;
  #line 2382 
  struct ena_admin_set_feat_resp resp;
  #line 2383 
  int ret;
  #line 2378 
  struct ena_com_admin_queue *admin_queue = & ena_dev->admin_queue;
  #line 2379 
  struct ena_rss *rss = & ena_dev->rss;
  #line 2380 
  struct ena_admin_feature_rss_hash_control *hash_ctrl = rss->hash_ctrl;
  #line 2385 
  if (! ena_com_check_supported_feature_id(ena_dev,
                                           (enum ena_admin_aq_feature_id)ENA_ADMIN_RSS_HASH_INPUT)) {
    {
      #line 2387 
      bool branch;
      #line 2387 
      struct _ddebug __UNIQUE_ID_ddebug414 = {.modname = (char *)"ena", .function = (char *)"ena_com_set_hash_ctrl", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_com.c", .format = (char *)"Feature %d isn\'t supported\n", .lineno = (unsigned int)2387U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 2387 
      branch = arch_static_branch(& __UNIQUE_ID_ddebug414.key.dd_key_false.key,(_Bool)0);
      #line 2387 
      if ((long)((long)((int)branch != 0)) != 0L) 
                                                  #line 2387 
                                                  __dynamic_pr_debug(& __UNIQUE_ID_ddebug414,(char *)"ena",18);
    }
    #line 2389 
    return -95;
  }
  #line 2392 
  memset((void *)(& cmd),0,64UL);
  #line 2394 
  cmd.aq_common_descriptor.opcode = (unsigned char)9U;
  #line 2395 
  cmd.aq_common_descriptor.flags = (unsigned char)4U;
  #line 2397 
  cmd.feat_common.feature_id = (unsigned char)18U;
  #line 2398 
  cmd.u.flow_hash_input.enabled_input_sort = (unsigned short)6U;
  #line 2402 
  ret = ena_com_mem_addr_set(ena_dev,& cmd.control_buffer.address,rss->hash_ctrl_dma_addr);
  #line 2405 
  if ((long)(ret != 0) != 0L) {
    #line 2406 
    printk((char *)"\001");
    #line 2407 
    return ret;
  }
  #line 2409 
  cmd.control_buffer.length = 256U;
  #line 2411 
  ret = ena_com_execute_admin_command(admin_queue,(struct ena_admin_aq_entry *)(& cmd),64UL,(struct ena_admin_acq_entry *)(& resp),64UL);
  #line 2416 
  if ((long)(ret != 0) != 0L) 
                              #line 2417 
                              printk((char *)"\001",ret);
  #line 2419 
  return ret;
}

#line 2422  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_com.c"
int ena_com_set_default_hash_ctrl(struct ena_com_dev *ena_dev)
{
  #line 2428 
  int rc;
  #line 2428 
  int i;
  #line 2424 
  struct ena_rss *rss = & ena_dev->rss;
  #line 2425 
  struct ena_admin_feature_rss_hash_control *hash_ctrl = rss->hash_ctrl;
  #line 2427 
  u16 available_fields = (unsigned short)0U;
  #line 2431 
  rc = ena_com_get_hash_ctrl(ena_dev,(enum ena_admin_flow_hash_proto)ENA_ADMIN_RSS_TCP4,(u16 *)0U);
  #line 2432 
  if ((long)(rc != 0) != 0L) 
                             #line 2433 
                             return rc;
  #line 2435 
  hash_ctrl->selected_fields[0].fields = (unsigned short)60U;
  #line 2439 
  hash_ctrl->selected_fields[1].fields = (unsigned short)60U;
  #line 2443 
  hash_ctrl->selected_fields[2].fields = (unsigned short)60U;
  #line 2447 
  hash_ctrl->selected_fields[3].fields = (unsigned short)60U;
  #line 2451 
  hash_ctrl->selected_fields[4].fields = (unsigned short)12U;
  #line 2454 
  hash_ctrl->selected_fields[5].fields = (unsigned short)12U;
  #line 2457 
  hash_ctrl->selected_fields[6].fields = (unsigned short)12U;
  #line 2460 
  hash_ctrl->selected_fields[7].fields = (unsigned short)3U;
  #line 2463 
  i = 0;
  #line 2463 
  while (i <= 15) {
    #line 2464 
    available_fields = (unsigned short)((int)hash_ctrl->selected_fields[i].fields & (int)hash_ctrl->supported_fields[i].fields);
    #line 2466 
    if ((int)hash_ctrl->selected_fields[i].fields != (int)available_fields) {
      #line 2467 
      printk((char *)"\001",i,(int)hash_ctrl->supported_fields[i].fields,(int)hash_ctrl->selected_fields[i].fields);
      #line 2470 
      return -95;
    }
    #line 2463 
    i ++;
  }
  #line 2474 
  rc = ena_com_set_hash_ctrl(ena_dev);
  #line 2477 
  if ((long)(rc != 0) != 0L) 
                             #line 2478 
                             ena_com_get_hash_ctrl(ena_dev,(enum ena_admin_flow_hash_proto)ENA_ADMIN_RSS_TCP4,(u16 *)0U);
  #line 2480 
  return rc;
}

#line 2483  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_com.c"
int ena_com_fill_hash_ctrl(struct ena_com_dev *ena_dev, enum ena_admin_flow_hash_proto proto, u16 hash_fields)
{
  #line 2489 
  u16 supported_fields;
  #line 2490 
  int rc;
  #line 2487 
  struct ena_rss *rss = & ena_dev->rss;
  #line 2488 
  struct ena_admin_feature_rss_hash_control *hash_ctrl = rss->hash_ctrl;
  #line 2492 
  if (proto > (unsigned int)15) {
    #line 2493 
    printk((char *)"\001",(unsigned int)proto);
    #line 2494 
    return -22;
  }
  #line 2498 
  rc = ena_com_get_hash_ctrl(ena_dev,proto,(u16 *)0U);
  #line 2499 
  if ((long)(rc != 0) != 0L) 
                             #line 2500 
                             return rc;
  #line 2503 
  supported_fields = hash_ctrl->supported_fields[(unsigned int)proto].fields;
  #line 2504 
  if (((int)hash_fields & (int)supported_fields) != (int)hash_fields) 
    #line 2505 
    printk((char *)"\001",(unsigned int)proto,(int)hash_fields,(int)supported_fields);
  #line 2509 
  hash_ctrl->selected_fields[(unsigned int)proto].fields = hash_fields;
  #line 2511 
  rc = ena_com_set_hash_ctrl(ena_dev);
  #line 2514 
  if ((long)(rc != 0) != 0L) 
                             #line 2515 
                             ena_com_get_hash_ctrl(ena_dev,(enum ena_admin_flow_hash_proto)ENA_ADMIN_RSS_TCP4,(u16 *)0U);
  #line 2517 
  return 0;
}

#line 2520  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_com.c"
int ena_com_indirect_table_fill_entry(struct ena_com_dev *ena_dev, u16 entry_idx, u16 entry_value)
{
  #line 2523 
  struct ena_rss *rss = & ena_dev->rss;
  #line 2525 
  if ((long)((int)entry_idx >= 1 << (int)rss->tbl_log_size) != 0L) 
                                                                   #line 2526 
                                                                   return -22;
  #line 2528 
  if ((long)((unsigned int)entry_value > 256U) != 0L) 
                                                      #line 2529 
                                                      return -22;
  #line 2531 
  *(rss->host_rss_ind_tbl + (unsigned long)entry_idx) = entry_value;
  #line 2533 
  return 0;
}

#line 2536  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_com.c"
int ena_com_indirect_table_set(struct ena_com_dev *ena_dev)
{
  #line 2540 
  struct ena_admin_set_feat_cmd cmd;
  #line 2541 
  struct ena_admin_set_feat_resp resp;
  #line 2542 
  int ret;
  #line 2538 
  struct ena_com_admin_queue *admin_queue = & ena_dev->admin_queue;
  #line 2539 
  struct ena_rss *rss = & ena_dev->rss;
  #line 2544 
  if (! ena_com_check_supported_feature_id(ena_dev,
                                           (enum ena_admin_aq_feature_id)ENA_ADMIN_RSS_REDIRECTION_TABLE_CONFIG)) {
    {
      #line 2546 
      bool branch;
      #line 2546 
      struct _ddebug __UNIQUE_ID_ddebug415 = {.modname = (char *)"ena", .function = (char *)"ena_com_indirect_table_set", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_com.c", .format = (char *)"Feature %d isn\'t supported\n", .lineno = (unsigned int)2546U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 2546 
      branch = arch_static_branch(& __UNIQUE_ID_ddebug415.key.dd_key_false.key,(_Bool)0);
      #line 2546 
      if ((long)((long)((int)branch != 0)) != 0L) 
                                                  #line 2546 
                                                  __dynamic_pr_debug(& __UNIQUE_ID_ddebug415,(char *)"ena",12);
    }
    #line 2548 
    return -95;
  }
  #line 2551 
  ret = ena_com_ind_tbl_convert_to_device(ena_dev);
  #line 2552 
  if (ret != 0) {
    #line 2553 
    printk((char *)"\001");
    #line 2554 
    return ret;
  }
  #line 2557 
  memset((void *)(& cmd),0,64UL);
  #line 2559 
  cmd.aq_common_descriptor.opcode = (unsigned char)9U;
  #line 2560 
  cmd.aq_common_descriptor.flags = (unsigned char)4U;
  #line 2562 
  cmd.feat_common.feature_id = (unsigned char)12U;
  #line 2563 
  cmd.u.ind_table.size = rss->tbl_log_size;
  #line 2564 
  cmd.u.ind_table.inline_index = 4294967295U;
  #line 2566 
  ret = ena_com_mem_addr_set(ena_dev,& cmd.control_buffer.address,rss->rss_ind_tbl_dma_addr);
  #line 2569 
  if ((long)(ret != 0) != 0L) {
    #line 2570 
    printk((char *)"\001");
    #line 2571 
    return ret;
  }
  #line 2574 
  cmd.control_buffer.length = (unsigned int)(4ULL << (int)rss->tbl_log_size);
  #line 2577 
  ret = ena_com_execute_admin_command(admin_queue,(struct ena_admin_aq_entry *)(& cmd),64UL,(struct ena_admin_acq_entry *)(& resp),64UL);
  #line 2583 
  if ((long)(ret != 0) != 0L) 
                              #line 2584 
                              printk((char *)"\001",ret);
  #line 2586 
  return ret;
}

#line 2589  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_com.c"
int ena_com_indirect_table_get(struct ena_com_dev *ena_dev, u32 *ind_tbl)
{
  #line 2592 
  struct ena_admin_get_feat_resp get_resp;
  #line 2593 
  u32 tbl_size;
  #line 2594 
  int i;
  #line 2594 
  int rc;
  #line 2591 
  struct ena_rss *rss = & ena_dev->rss;
  #line 2596 
  tbl_size = (unsigned int)(4ULL << (int)rss->tbl_log_size);
  #line 2599 
  rc = ena_com_get_feature_ex(ena_dev,& get_resp,(enum ena_admin_aq_feature_id)ENA_ADMIN_RSS_REDIRECTION_TABLE_CONFIG,rss->rss_ind_tbl_dma_addr,tbl_size,(unsigned char)0);
  #line 2603 
  if ((long)(rc != 0) != 0L) 
                             #line 2604 
                             return rc;
  #line 2606 
  if (ind_tbl == (u32 *)0U) 
                            #line 2607 
                            return 0;
  #line 2609 
  rc = ena_com_ind_tbl_convert_from_device(ena_dev);
  #line 2610 
  if ((long)(rc != 0) != 0L) 
                             #line 2611 
                             return rc;
  #line 2613 
  i = 0;
  #line 2613 
  while (1 << (int)rss->tbl_log_size > i) {
    #line 2614 
    *(ind_tbl + (unsigned long)i) = (unsigned int)*(rss->host_rss_ind_tbl + (unsigned long)i);
    #line 2613 
    i ++;
  }
  #line 2616 
  return 0;
}

#line 2619  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_com.c"
int ena_com_rss_init(struct ena_com_dev *ena_dev, u16 indr_tbl_log_size)
{
  #line 2621 
  int rc;
  #line 2623 
  memset((void *)(& ena_dev->rss),0,72UL);
  #line 2625 
  rc = ena_com_indirect_table_allocate(ena_dev,(unsigned short)((int)indr_tbl_log_size));
  #line 2626 
  if ((long)(rc != 0) != 0L) 
                             #line 2627 
                             goto err_indr_tbl;
  #line 2629 
  rc = ena_com_hash_key_allocate(ena_dev);
  #line 2630 
  if ((long)(rc != 0) != 0L) 
                             #line 2631 
                             goto err_hash_key;
  #line 2633 
  rc = ena_com_hash_ctrl_init(ena_dev);
  #line 2634 
  if ((long)(rc != 0) != 0L) 
                             #line 2635 
                             goto err_hash_ctrl;
  #line 2637 
  return 0;
  #line 2639 
  err_hash_ctrl: 
                 #line 2639 
  ;
  #line 2640 
  ena_com_hash_key_destroy(ena_dev);
  #line 2641 
  err_hash_key: 
                #line 2641 
  ;
  #line 2642 
  ena_com_indirect_table_destroy(ena_dev);
  #line 2643 
  err_indr_tbl: 
                #line 2643 
  ;
  #line 2645 
  return rc;
}

#line 2648  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_com.c"
void ena_com_rss_destroy(struct ena_com_dev *ena_dev)
{
  #line 2650 
  ena_com_indirect_table_destroy(ena_dev);
  #line 2651 
  ena_com_hash_key_destroy(ena_dev);
  #line 2652 
  ena_com_hash_ctrl_destroy(ena_dev);
  #line 2654 
  memset((void *)(& ena_dev->rss),0,72UL);
  #line 2655 
  return;
}

#line 2657  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_com.c"
int ena_com_allocate_host_info(struct ena_com_dev *ena_dev)
{
  #line 2659 
  struct ena_host_attribute *host_attr = & ena_dev->host_attr;
  #line 2662 
  host_attr->host_info = (struct ena_admin_host_info *)dma_alloc_coherent((struct device *)ena_dev->dmadev,4096UL,& host_attr->host_info_dma_addr,3264U);
  #line 2664 
  if ((long)(host_attr->host_info == (struct ena_admin_host_info *)0) != 0L) 
    #line 2665 
    return -12;
  #line 2667 
  (host_attr->host_info)->ena_spec_version = (unsigned short)512U;
  #line 2671 
  return 0;
}

#line 2674  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_com.c"
int ena_com_allocate_debug_area(struct ena_com_dev *ena_dev, u32 debug_area_size)
{
  #line 2677 
  struct ena_host_attribute *host_attr = & ena_dev->host_attr;
  #line 2680 
  host_attr->debug_area_virt_addr = (u8 *)dma_alloc_coherent((struct device *)ena_dev->dmadev,(unsigned long)debug_area_size,& host_attr->debug_area_dma_addr,3264U);
  #line 2683 
  if ((long)(host_attr->debug_area_virt_addr == (u8 *)0U) != 0L) {
    #line 2684 
    host_attr->debug_area_size = 0U;
    #line 2685 
    return -12;
  }
  #line 2688 
  host_attr->debug_area_size = debug_area_size;
  #line 2690 
  return 0;
}

#line 2693  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_com.c"
void ena_com_delete_host_info(struct ena_com_dev *ena_dev)
{
  #line 2695 
  struct ena_host_attribute *host_attr = & ena_dev->host_attr;
  #line 2697 
  if (host_attr->host_info != (struct ena_admin_host_info *)0) {
    #line 2698 
    dma_free_coherent((struct device *)ena_dev->dmadev,4096UL,(void *)host_attr->host_info,host_attr->host_info_dma_addr);
    #line 2700 
    host_attr->host_info = (struct ena_admin_host_info *)0;
  }
  #line 2702 
  return;
}

#line 2704  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_com.c"
void ena_com_delete_debug_area(struct ena_com_dev *ena_dev)
{
  #line 2706 
  struct ena_host_attribute *host_attr = & ena_dev->host_attr;
  #line 2708 
  if (host_attr->debug_area_virt_addr != (u8 *)0U) {
    #line 2709 
    dma_free_coherent((struct device *)ena_dev->dmadev,(unsigned long)host_attr->debug_area_size,(void *)host_attr->debug_area_virt_addr,host_attr->debug_area_dma_addr);
    #line 2712 
    host_attr->debug_area_virt_addr = (u8 *)0U;
  }
  #line 2714 
  return;
}

#line 2716  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_com.c"
int ena_com_set_host_attributes(struct ena_com_dev *ena_dev)
{
  #line 2719 
  struct ena_com_admin_queue *admin_queue;
  #line 2720 
  struct ena_admin_set_feat_cmd cmd;
  #line 2721 
  struct ena_admin_set_feat_resp resp;
  #line 2723 
  int ret;
  #line 2718 
  struct ena_host_attribute *host_attr = & ena_dev->host_attr;
  #line 2729 
  memset((void *)(& cmd),0,64UL);
  #line 2730 
  admin_queue = & ena_dev->admin_queue;
  #line 2732 
  cmd.aq_common_descriptor.opcode = (unsigned char)9U;
  #line 2733 
  cmd.feat_common.feature_id = (unsigned char)28U;
  #line 2735 
  ret = ena_com_mem_addr_set(ena_dev,& cmd.u.host_attr.debug_ba,host_attr->debug_area_dma_addr);
  #line 2738 
  if ((long)(ret != 0) != 0L) {
    #line 2739 
    printk((char *)"\001");
    #line 2740 
    return ret;
  }
  #line 2743 
  ret = ena_com_mem_addr_set(ena_dev,& cmd.u.host_attr.os_info_ba,host_attr->host_info_dma_addr);
  #line 2746 
  if ((long)(ret != 0) != 0L) {
    #line 2747 
    printk((char *)"\001");
    #line 2748 
    return ret;
  }
  #line 2751 
  cmd.u.host_attr.debug_area_size = host_attr->debug_area_size;
  #line 2753 
  ret = ena_com_execute_admin_command(admin_queue,(struct ena_admin_aq_entry *)(& cmd),64UL,(struct ena_admin_acq_entry *)(& resp),64UL);
  #line 2759 
  if ((long)(ret != 0) != 0L) 
                              #line 2760 
                              printk((char *)"\001",ret);
  #line 2762 
  return ret;
}

#line 2766  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_com.c"
bool ena_com_interrupt_moderation_supported(struct ena_com_dev *ena_dev)
{
  #line 2768 
  return ena_com_check_supported_feature_id(ena_dev,
                                         (enum ena_admin_aq_feature_id)ENA_ADMIN_INTERRUPT_MODERATION);
}

#line 2772  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_com.c"
static int ena_com_update_nonadaptive_moderation_interval(u32 coalesce_usecs, u32 intr_delay_resolution, u32 *intr_moder_interval)
{
  #line 2776 
  if (intr_delay_resolution == 0U) {
    #line 2777 
    printk((char *)"\001");
    #line 2778 
    return -14;
  }
  #line 2781 
  *intr_moder_interval = coalesce_usecs / intr_delay_resolution;
  #line 2783 
  return 0;
}

#line 2786  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_com.c"
int ena_com_update_nonadaptive_moderation_interval_tx(struct ena_com_dev *ena_dev, u32 tx_coalesce_usecs)
{
  #line 2789 
  return ena_com_update_nonadaptive_moderation_interval(tx_coalesce_usecs,
                                                     (unsigned int)ena_dev->intr_delay_resolution,
                                                     & ena_dev->intr_moder_tx_interval);
}

#line 2794  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_com.c"
int ena_com_update_nonadaptive_moderation_interval_rx(struct ena_com_dev *ena_dev, u32 rx_coalesce_usecs)
{
  #line 2797 
  return ena_com_update_nonadaptive_moderation_interval(rx_coalesce_usecs,
                                                     (unsigned int)ena_dev->intr_delay_resolution,
                                                     & ena_dev->intr_moder_rx_interval);
}

#line 2802  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_com.c"
int ena_com_init_interrupt_moderation(struct ena_com_dev *ena_dev)
{
  #line 2804 
  struct ena_admin_get_feat_resp get_resp;
  #line 2805 
  u16 delay_resolution;
  #line 2806 
  int rc;
  #line 2808 
  rc = ena_com_get_feature(ena_dev,& get_resp,(enum ena_admin_aq_feature_id)ENA_ADMIN_INTERRUPT_MODERATION,(unsigned char)0);
  #line 2811 
  if (rc != 0) {
    #line 2812 
    if (rc == -95) {
      {
        #line 2813 
        bool branch;
        #line 2813 
        struct _ddebug __UNIQUE_ID_ddebug416 = {.modname = (char *)"ena", .function = (char *)"ena_com_init_interrupt_moderation", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_com.c", .format = (char *)"Feature %d isn\'t supported\n", .lineno = (unsigned int)2813U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
        #line 2813 
        branch = arch_static_branch(& __UNIQUE_ID_ddebug416.key.dd_key_false.key,(_Bool)0);
        #line 2813 
        if ((long)((long)((int)branch != 0)) != 0L) 
                                                    #line 2813 
                                                    __dynamic_pr_debug(& __UNIQUE_ID_ddebug416,(char *)"ena",20);
      }
      #line 2815 
      rc = 0;
    }
    else 
         #line 2817 
         printk((char *)"\001",rc);
    #line 2822 
    ena_com_disable_adaptive_moderation(ena_dev);
    #line 2823 
    return rc;
  }
  #line 2827 
  delay_resolution = get_resp.u.intr_moderation.intr_delay_resolution;
  #line 2828 
  ena_com_update_intr_delay_resolution(ena_dev,(unsigned short)((int)delay_resolution));
  #line 2831 
  ena_com_disable_adaptive_moderation(ena_dev);
  #line 2833 
  return 0;
}

#line 2836  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_com.c"
unsigned int ena_com_get_nonadaptive_moderation_interval_tx(struct ena_com_dev *ena_dev)
{
  #line 2838 
  return ena_dev->intr_moder_tx_interval;
}

#line 2841  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_com.c"
unsigned int ena_com_get_nonadaptive_moderation_interval_rx(struct ena_com_dev *ena_dev)
{
  #line 2843 
  return ena_dev->intr_moder_rx_interval;
}

#line 2846  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/amazon/ena/ena_com.c"
int ena_com_config_dev_mode(struct ena_com_dev *ena_dev, struct ena_admin_feature_llq_desc *llq_features, struct ena_llq_configurations *llq_default_cfg)
{
  #line 2851 
  int rc;
  #line 2850 
  struct ena_com_llq_info *llq_info = & ena_dev->llq_info;
  #line 2853 
  if (llq_features->max_llq_num == 0U) {
    #line 2854 
    ena_dev->tx_mem_queue_type = ENA_ADMIN_PLACEMENT_POLICY_HOST;
    #line 2855 
    return 0;
  }
  #line 2858 
  rc = ena_com_config_llq_info(ena_dev,llq_features,llq_default_cfg);
  #line 2859 
  if (rc != 0) 
               #line 2860 
               return rc;
  #line 2862 
  ena_dev->tx_max_header_size = (unsigned int)llq_info->desc_list_entry_size - (unsigned int)llq_info->descs_num_before_header * 16U;
  #line 2865 
  if ((long)(ena_dev->tx_max_header_size == 0U) != 0L) {
    #line 2866 
    printk((char *)"\001");
    #line 2867 
    return -22;
  }
  #line 2870 
  ena_dev->tx_mem_queue_type = ENA_ADMIN_PLACEMENT_POLICY_DEV;
  #line 2872 
  return 0;
}

#line 176  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amazon/ena/ena.ko/concurrency safety/0/concurrency safety/weaver/ena_com.i.aux"
static void atomic_inc(atomic_t *v)
{
  #line 179 
  ldv_atomic_inc(v);
  #line 180 
  return;
}

#line 183  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amazon/ena/ena.ko/concurrency safety/0/concurrency safety/weaver/ena_com.i.aux"
static void atomic_dec(atomic_t *v)
{
  #line 186 
  ldv_atomic_dec(v);
  #line 187 
  return;
}

#line 197  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amazon/ena/ena.ko/concurrency safety/0/concurrency safety/weaver/ena_com.i.aux"
static void *ERR_PTR(long error)
{
  #line 200 
  return ldv_err_ptr(error);
}

#line 204  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amazon/ena/ena.ko/concurrency safety/0/concurrency safety/weaver/ena_com.i.aux"
static long PTR_ERR(void *ptr)
{
  #line 207 
  return ldv_ptr_err(ptr);
}

#line 211  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amazon/ena/ena.ko/concurrency safety/0/concurrency safety/weaver/ena_com.i.aux"
static bool IS_ERR(void *ptr)
{
  #line 214 
  return ldv_is_err(ptr);
}

#line 452  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amazon/ena/ena.ko/concurrency safety/0/concurrency safety/weaver/ena_com.i.aux"
static void *cif_devm_kzalloc(struct device *dev, size_t size, gfp_t flags)
{
  #line 455 
  return ldv_devm_kzalloc(size,flags);
}

#line 459  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amazon/ena/ena.ko/concurrency safety/0/concurrency safety/weaver/ena_com.i.aux"
static void cif___ldv_spin_lock_q_lock_of_ena_com_admin_queue(spinlock_t *lock)
{
  #line 462 
  ldv_spin_model_lock((char *)"q_lock_of_ena_com_admin_queue");
  #line 464 
  __ldv_spin_lock(lock);
  #line 465 
  return;
}

#line 468  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amazon/ena/ena.ko/concurrency safety/0/concurrency safety/weaver/ena_com.i.aux"
static void cif_spin_unlock_irqrestore_q_lock_of_ena_com_admin_queue(spinlock_t *lock, unsigned long flags)
{
  #line 471 
  ldv_spin_model_unlock((char *)"q_lock_of_ena_com_admin_queue");
  #line 473 
  spin_unlock_irqrestore(lock,flags);
  #line 474 
  return;
}

#line 477  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amazon/ena/ena.ko/concurrency safety/0/concurrency safety/weaver/ena_com.i.aux"
static void cif___ldv_spin_lock_lock_of_ena_com_mmio_read(spinlock_t *lock)
{
  #line 480 
  ldv_spin_model_lock((char *)"lock_of_ena_com_mmio_read");
  #line 482 
  __ldv_spin_lock(lock);
  #line 483 
  return;
}

#line 486  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amazon/ena/ena.ko/concurrency safety/0/concurrency safety/weaver/ena_com.i.aux"
static void cif_spin_unlock_irqrestore_lock_of_ena_com_mmio_read(spinlock_t *lock, unsigned long flags)
{
  #line 489 
  ldv_spin_model_unlock((char *)"lock_of_ena_com_mmio_read");
  #line 491 
  spin_unlock_irqrestore(lock,flags);
  #line 492 
  return;
}

#line 20  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/common/inline_asm.c"
void ldv_inline_asm(void)
{
  #line 24 
  return;
}

#line 20  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
void ldv_atomic_add(int i, atomic_t *v)
{
  #line 22 
  v->counter += i;
  #line 23 
  return;
}

#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
void ldv_atomic_sub(int i, atomic_t *v)
{
  #line 27 
  v->counter -= i;
  #line 28 
  return;
}

#line 30  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
int ldv_atomic_sub_and_test(int i, atomic_t *v)
{
  #line 32 
  v->counter -= i;
  #line 33 
  if (v->counter != 0) 
                       #line 34 
                       return 0;
  #line 36 
  return 1;
}

#line 39  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
void ldv_atomic_inc(atomic_t *v)
{
  #line 41 
  (v->counter) ++;
  #line 42 
  return;
}

#line 44  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
void ldv_atomic_dec(atomic_t *v)
{
  #line 46 
  (v->counter) --;
  #line 47 
  return;
}

#line 49  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
int ldv_atomic_dec_and_test(atomic_t *v)
{
  #line 51 
  (v->counter) --;
  #line 52 
  if (v->counter != 0) 
                       #line 53 
                       return 0;
  #line 55 
  return 1;
}

#line 58  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
int ldv_atomic_inc_and_test(atomic_t *v)
{
  #line 60 
  (v->counter) ++;
  #line 61 
  if (v->counter != 0) 
                       #line 62 
                       return 0;
  #line 64 
  return 1;
}

#line 67  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
int ldv_atomic_add_return(int i, atomic_t *v)
{
  #line 69 
  v->counter += i;
  #line 70 
  return v->counter;
}

#line 73  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
int ldv_atomic_add_negative(int i, atomic_t *v)
{
  #line 75 
  v->counter += i;
  #line 76 
  return v->counter < 0;
}

#line 79  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
int ldv_atomic_inc_short(short *v)
{
  #line 81 
  *v = (short)((unsigned int)*v + 1U);
  #line 82 
  return (int)*v;
}

#line 20  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/current.c"
static struct task_struct ldv_current;
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/current.c"
struct task_struct *ldv_get_current(void)
{
  #line 28 
  ldv_current.pid = 1;
  #line 29 
  return & ldv_current;
}

#line 32  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 28  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
void ldv_switch_to_interrupt_context(void);
#line 42  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 34  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
void ldv_switch_to_process_context(void);
#line 50  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 40  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
bool ldv_in_interrupt_context(void);
#line 112  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 55  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
int ldv_post_init(int init_ret_val);
#line 132  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 61  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
int ldv_post_probe(int probe_ret_val);
#line 133  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 133 
void ldv_check_return_value_probe(int);
#line 141 
#line 68  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
int ldv_filter_err_code(int ret_val);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/common.h"
#line 23 
void __VERIFIER_assume(int);
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
static bool __ldv_in_interrupt_context = (_Bool)0;
#line 28  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
void ldv_switch_to_interrupt_context(void)
{
  #line 31 
  __ldv_in_interrupt_context = (_Bool)1;
  #line 32 
  return;
}

#line 34  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
void ldv_switch_to_process_context(void)
{
  #line 37 
  __ldv_in_interrupt_context = (_Bool)0;
  #line 38 
  return;
}

#line 40  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
bool ldv_in_interrupt_context(void)
{
  #line 42 
  return __ldv_in_interrupt_context;
}

#line 45  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
static int ldv_filter_positive_int(int val)
{
  #line 47 
  __VERIFIER_assume(val <= 0);
  #line 48 
  return val;
}

#line 55  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
int ldv_post_init(int init_ret_val)
{
  #line 57 
  return ldv_filter_positive_int(init_ret_val);
}

#line 61  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
int ldv_post_probe(int probe_ret_val)
{
  #line 63 
  ldv_check_return_value_probe(probe_ret_val);
  #line 64 
  return ldv_filter_positive_int(probe_ret_val);
}

#line 68  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
int ldv_filter_err_code(int ret_val)
{
  #line 70 
  return ldv_filter_positive_int(ret_val);
}

#line 28  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/common/list.h"
#line 28 
void ldv_save_allocated_memory_to_list(void *);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/device.h"
#line 29  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/dd.c"
void *ldv_dev_get_drvdata(struct device *dev);
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/device.h"
#line 43  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/dd.c"
int ldv_dev_set_drvdata(struct device *dev, void *data);
#line 57  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 57 
void *ldv_xzalloc(size_t size);
#line 29  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/dd.c"
void *ldv_dev_get_drvdata(struct device *dev)
{
  #line 31 
  if (dev != (struct device *)0 && dev->p != (struct device_private *)0) 
    #line 32 
    return (dev->p)->driver_data;
  #line 34 
  return (void *)0;
}

#line 43  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/dd.c"
int ldv_dev_set_drvdata(struct device *dev, void *data)
{
  #line 45 
  dev->p = (struct device_private *)ldv_xzalloc(8UL);
  #line 46 
  ldv_save_allocated_memory_to_list((void *)dev->p);
  #line 47 
  (dev->p)->driver_data = data;
  #line 49 
  return 0;
}

#line 156  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 156 
void ldv_check_alloc_flags(gfp_t);
#line 48  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 48 
void *ldv_malloc(size_t size);
#line 49 
#line 49 
void *ldv_calloc(size_t nmemb, size_t size);
#line 50 
#line 50 
void *ldv_zalloc(size_t size);
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/devres.c"
void *ldv_devm_kmalloc(size_t size, gfp_t flags)
{
  #line 26 
  void *res;
  #line 28 
  ldv_check_alloc_flags(flags);
  #line 29 
  res = ldv_malloc(size);
  #line 30 
  ldv_save_allocated_memory_to_list(res);
  #line 32 
  return res;
}

#line 35  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/devres.c"
void *ldv_devm_kzalloc(size_t size, gfp_t flags)
{
  #line 37 
  void *res;
  #line 39 
  ldv_check_alloc_flags(flags);
  #line 40 
  res = ldv_zalloc(size);
  #line 41 
  ldv_save_allocated_memory_to_list(res);
  #line 43 
  return res;
}

#line 46  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/devres.c"
void *ldv_devm_kmalloc_array(size_t n, size_t size, gfp_t flags)
{
  #line 48 
  void *res;
  #line 50 
  ldv_check_alloc_flags(flags);
  #line 51 
  res = ldv_malloc(n * size);
  #line 52 
  ldv_save_allocated_memory_to_list(res);
  #line 54 
  return res;
}

#line 57  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/devres.c"
void *ldv_devm_kcalloc(size_t n, size_t size, gfp_t flags)
{
  #line 59 
  void *res;
  #line 61 
  ldv_check_alloc_flags(flags);
  #line 62 
  res = ldv_calloc(n,size);
  #line 63 
  ldv_save_allocated_memory_to_list(res);
  #line 65 
  return res;
}

#line 51  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 51 
void ldv_free(void *s);
#line 59 
#line 59 
void *ldv_malloc_unknown_size(void);
#line 31  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 31 
int ldv_undef_int_positive(void);
#line 40 
#line 40 
int ldv_undef_int_nonpositive(void);
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/firmware_loader.c"
int ldv_request_firmware(struct firmware **fw)
{
  #line 27 
  int retval;
  #line 26 
  struct firmware *_fw = (struct firmware *)0;
  #line 29 
  retval = ldv_undef_int_nonpositive();
  #line 31 
  if (retval == 0) {
    #line 33 
    _fw = (struct firmware *)ldv_xzalloc(32UL);
    #line 34 
    _fw->data = (u8 *)ldv_malloc_unknown_size();
    #line 35 
    __VERIFIER_assume(_fw->data != (u8 *)0U);
    #line 36 
    _fw->size = (unsigned long)ldv_undef_int_positive();
  }
  #line 39 
  *fw = _fw;
  #line 41 
  return retval;
}

#line 44  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/firmware_loader.c"
void ldv_release_firmware(struct firmware *fw)
{
  #line 46 
  if (fw != (struct firmware *)0) {
    #line 48 
    ldv_free((void *)fw->data);
    #line 49 
    ldv_free((void *)fw);
  }
  #line 51 
  return;
}

#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/i2c.h"
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/i2c/i2c-core-smbus.c"
s32 ldv_i2c_smbus_read_block_data(u8 *values);
#line 55  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 55 
void *ldv_xmalloc(size_t size);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 23 
int ldv_undef_int(void);
#line 34 
#line 34 
int ldv_undef_int_negative(void);
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/i2c/i2c-core-smbus.c"
s32 ldv_i2c_smbus_read_block_data(u8 *values)
{
  #line 27 
  __u8 size;
  #line 28 
  char *bytes;
  #line 30 
  if (ldv_undef_int() != 0) {
    #line 33 
    size = (unsigned char)ldv_undef_int_positive();
    #line 35 
    __VERIFIER_assume((unsigned int)size <= 32U);
    #line 37 
    bytes = (char *)ldv_xmalloc((unsigned long)size);
    #line 39 
    memcpy((void *)values,(void *)bytes,(unsigned long)size);
    #line 40 
    ldv_free((void *)bytes);
    #line 42 
    return (int)size;
  }
  else {
    #line 46 
    return ldv_undef_int_negative();
  }
}

#line 988  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
__inline static void v4l2_set_subdevdata(struct v4l2_subdev *sd, void *p)
{
  #line 990 
  sd->dev_priv = p;
  #line 991 
  return;
}

#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/media/v4l2-common.h"
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/media/v4l2-core/v4l2-i2c.c"
void ldv_v4l2_i2c_subdev_init(struct v4l2_subdev *sd, struct i2c_client *client, struct v4l2_subdev_ops *ops);
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/media/v4l2-core/v4l2-i2c.c"
void ldv_v4l2_i2c_subdev_init(struct v4l2_subdev *sd, struct i2c_client *client, struct v4l2_subdev_ops *ops)
{
  #line 26 
  sd->ops = ops;
  #line 27 
  v4l2_set_subdevdata(sd,(void *)client);
  #line 28 
  ldv_dev_set_drvdata(& client->dev,(void *)sd);
  #line 29 
  return;
}

#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/spi.c"
struct spi_controller *ldv_spi_alloc_master(struct device *host, unsigned int size)
{
  #line 25 
  struct spi_controller *master;
  #line 27 
  master = (struct spi_controller *)ldv_zalloc((unsigned long)size + 2936UL);
  #line 29 
  if (master == (struct spi_controller *)0) 
                                            #line 30 
                                            return (struct spi_controller *)0;
  #line 32 
  ldv_dev_set_drvdata(& master->dev,(void *)(master + 1U));
  #line 34 
  return master;
}

#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/fb.h"
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/video/fbdev/core/fbsysfs.c"
struct fb_info *ldv_framebuffer_alloc(size_t size);
#line 26  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/fb.h"
#line 38  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/video/fbdev/core/fbsysfs.c"
void ldv_framebuffer_release(struct fb_info *info);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/video/fbdev/core/fbsysfs.c"
struct fb_info *ldv_framebuffer_alloc(size_t size)
{
  #line 25 
  struct fb_info *info;
  #line 27 
  info = (struct fb_info *)ldv_zalloc(size + 1568UL);
  #line 29 
  if (info == (struct fb_info *)0) 
                                   #line 30 
                                   return (struct fb_info *)0;
  #line 32 
  if (size != 0UL) 
                   #line 33 
                   info->par = (void *)((char *)info + 1568UL);
  #line 35 
  return info;
}

#line 38  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/video/fbdev/core/fbsysfs.c"
void ldv_framebuffer_release(struct fb_info *info)
{
  #line 40 
  if (info == (struct fb_info *)0) 
                                   #line 41 
                                   return;
  #line 44 
  ldv_free((void *)info->apertures);
  #line 46 
  ldv_free((void *)info);
  #line 47 
  return;
}

#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/err.h"
#line 59  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/err.c"
bool ldv_is_err_or_null(void *ptr);
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/err.c"
bool ldv_is_err(void *ptr)
{
  #line 29 
  if ((unsigned long)ptr > 18446744073709547520UL) 
                                                   #line 30 
                                                   return (_Bool)1; else 
                                                                    #line 32 
                                                                    return (_Bool)0;
}

#line 35  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/err.c"
void *ldv_err_ptr(long error)
{
  #line 37 
  unsigned long result;
  #line 39 
  __VERIFIER_assume(error < 0L);
  #line 40 
  __VERIFIER_assume(error >= -4095L);
  #line 41 
  result = 18446744073709547520UL - (unsigned long)error;
  #line 42 
  __VERIFIER_assume(result > 18446744073709547520UL);
  #line 44 
  return (void *)result;
}

#line 47  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/err.c"
long ldv_ptr_err(void *ptr)
{
  #line 49 
  long result;
  #line 51 
  __VERIFIER_assume((unsigned long)ptr > 18446744073709547520UL);
  #line 52 
  result = (long)(18446744073709547520UL - (unsigned long)ptr);
  #line 53 
  __VERIFIER_assume(result < 0L);
  #line 54 
  __VERIFIER_assume(result >= -4095L);
  #line 56 
  return result;
}

#line 59  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/err.c"
bool ldv_is_err_or_null(void *ptr)
{
  #line 61 
  int tmp_0;
  #line 61 
  if (ptr == (void *)0) 
                        #line 61 
                        tmp_0 = 1;
  else {
    #line 61 
    if ((int)ldv_is_err(ptr) != 0) 
                                   #line 61 
                                   tmp_0 = 1; else 
                                                   #line 61 
                                                   tmp_0 = 0;
  }
  #line 61 
  return (_Bool)(tmp_0 != 0);
}

#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/panic.h"
#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/kernel/panic.c"
void ldv_panic(void);
#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/kernel/panic.c"
void ldv_panic(void)
{
  #line 23 
  __VERIFIER_assume(0);
  #line 24 
  return;
}

#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/bitmap.h"
#line 32  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_bitmap_set(unsigned long *map, unsigned int start, int nbits);
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/bitmap.h"
#line 52  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_bitmap_clear(unsigned long *map, unsigned int start, int nbits);
#line 27  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/bitmap.h"
#line 72  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_bitmap_zero(unsigned long *dst, unsigned int nbits);
#line 29  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/bitmap.h"
#line 78  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
unsigned long ldv_bitmap_find_next_zero_area(unsigned long *map, unsigned long size, unsigned long start, unsigned int nr, unsigned long align_mask);
#line 22  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/find_bit.h"
#line 22 
unsigned long ldv_find_next_bit(unsigned long *addr, unsigned long size, unsigned long offset);
#line 23 
#line 23 
unsigned long ldv_find_next_zero_bit(unsigned long *addr, unsigned long size, unsigned long offset);
#line 22  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_set_bit(long nr, unsigned long *addr)
{
  #line 24 
  *(addr + (unsigned long)nr / 64UL) |= 1UL << ((unsigned long)nr & 63UL);
  #line 25 
  return;
}

#line 27  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_clear_bit(long nr, unsigned long *addr)
{
  #line 29 
  *(addr + (unsigned long)nr / 64UL) &= ~ (1UL << ((unsigned long)nr & 63UL));
  #line 30 
  return;
}

#line 32  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_bitmap_set(unsigned long *map, unsigned int start, int nbits)
{
  #line 34 
  unsigned long *p = map + (unsigned long)(start / 64U);
  #line 35 
  unsigned int size = start + (unsigned int)nbits;
  #line 36 
  int bits_to_set = (int)(64U - (start & 63U));
  #line 37 
  unsigned long mask_to_set = 18446744073709551615UL << ((unsigned long)start & 63UL);
  #line 39 
  while (nbits - bits_to_set >= 0) {
    #line 40 
    *p |= mask_to_set;
    #line 41 
    nbits -= bits_to_set;
    #line 42 
    bits_to_set = 64;
    #line 43 
    mask_to_set = 18446744073709551615UL;
    #line 44 
    p ++;
  }
  #line 46 
  if (nbits != 0) {
    #line 47 
    mask_to_set = (18446744073709551615UL >> ((unsigned long)(- size) & 63UL)) & mask_to_set;
    #line 48 
    *p |= mask_to_set;
  }
  #line 50 
  return;
}

#line 52  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_bitmap_clear(unsigned long *map, unsigned int start, int nbits)
{
  #line 54 
  unsigned long *p = map + (unsigned long)(start / 64U);
  #line 55 
  unsigned int size = start + (unsigned int)nbits;
  #line 56 
  int bits_to_clear = (int)(64U - (start & 63U));
  #line 57 
  unsigned long mask_to_clear = 18446744073709551615UL << ((unsigned long)start & 63UL);
  #line 59 
  while (nbits - bits_to_clear >= 0) {
    #line 60 
    *p &= ~ mask_to_clear;
    #line 61 
    nbits -= bits_to_clear;
    #line 62 
    bits_to_clear = 64;
    #line 63 
    mask_to_clear = 18446744073709551615UL;
    #line 64 
    p ++;
  }
  #line 66 
  if (nbits != 0) {
    #line 67 
    mask_to_clear = (18446744073709551615UL >> ((unsigned long)(- size) & 63UL)) & mask_to_clear;
    #line 68 
    *p &= ~ mask_to_clear;
  }
  #line 70 
  return;
}

#line 72  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_bitmap_zero(unsigned long *dst, unsigned int nbits)
{
  #line 74 
  unsigned int len = (unsigned int)(((unsigned long)nbits + 63UL) / 64UL) * 8U;
  #line 75 
  memset((void *)dst,0,(unsigned long)len);
  #line 76 
  return;
}

#line 78  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
unsigned long ldv_bitmap_find_next_zero_area(unsigned long *map, unsigned long size, unsigned long start, unsigned int nr, unsigned long align_mask)
{
  #line 80 
  unsigned long index;
  #line 80 
  unsigned long end;
  #line 80 
  unsigned long i;
  #line 82 
  again: 
         #line 82 
  ;
  #line 83 
  index = ldv_find_next_zero_bit(map,size,start);
  #line 84 
  index = (index + align_mask) & ~ align_mask;
  #line 85 
  end = (unsigned long)nr + index;
  #line 87 
  if (end > size) 
                  #line 88 
                  return end;
  #line 90 
  i = ldv_find_next_bit(map,end,index);
  #line 92 
  if (i < end) {
    #line 93 
    start = i + 1UL;
    #line 94 
    goto again;
  }
  #line 97 
  return index;
}

#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/find_bit.h"
#line 25 
void ldv_check_find_bit_offset(unsigned long, unsigned long);
#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/find_bit.common.c"
static unsigned long ldv_ffs(unsigned long word)
{
  #line 23 
  int num = 0;
  #line 25 
  if ((word & 4294967295UL) == 0UL) {
    #line 26 
    num += 32;
    #line 27 
    word >>= 32;
  }
  #line 29 
  if ((word & 65535UL) == 0UL) {
    #line 30 
    num += 16;
    #line 31 
    word >>= 16;
  }
  #line 33 
  if ((word & 255UL) == 0UL) {
    #line 34 
    num += 8;
    #line 35 
    word >>= 8;
  }
  #line 37 
  if ((word & 15UL) == 0UL) {
    #line 38 
    num += 4;
    #line 39 
    word >>= 4;
  }
  #line 41 
  if ((word & 3UL) == 0UL) {
    #line 42 
    num += 2;
    #line 43 
    word >>= 2;
  }
  #line 45 
  if ((word & 1UL) == 0UL) 
                           #line 46 
                           num ++;
  #line 48 
  return (unsigned long)num;
}

#line 51  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/find_bit.common.c"
static unsigned long ldv_min(unsigned long a, unsigned long b)
{
  #line 53 
  if (a < b) 
             #line 54 
             return a;
  #line 56 
  return b;
}

#line 59  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/find_bit.common.c"
static unsigned long ldv_restrict_find_bit_res(unsigned long res, unsigned long size)
{
  #line 62 
  __VERIFIER_assume(1);
  #line 63 
  __VERIFIER_assume(res <= size);
  #line 65 
  return res;
}

#line 68  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/find_bit.common.c"
unsigned long ldv_find_first_bit(unsigned long *addr, unsigned long size)
{
  #line 70 
  unsigned long i;
  #line 72 
  i = 0UL;
  #line 72 
  while (i * 64UL < size) {
    #line 73 
    if (*(addr + i) != 0UL) {
      #line 74 
      ;
      #line 74 
      ;
      #line 74 
      ;
      #line 74 
      return ldv_restrict_find_bit_res(ldv_min(i * 64UL + ldv_ffs(*(addr + i)),size),
                                  size);
    }
    #line 72 
    i ++;
  }
  #line 76 
  return size;
}

#line 79  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/find_bit.common.c"
unsigned long ldv_find_next_bit(unsigned long *addr, unsigned long size, unsigned long offset)
{
  #line 81 
  unsigned long tmp;
  #line 83 
  ldv_check_find_bit_offset(size,offset);
  #line 85 
  tmp = *(addr + offset / 64UL);
  #line 86 
  tmp = (unsigned long)((18446744073709551615ULL << (offset & 63UL)) & (unsigned long long)tmp);
  #line 87 
  offset &= 18446744073709551552UL;
  #line 89 
  while (tmp == 0UL) {
    #line 90 
    offset += 64UL;
    #line 91 
    if (offset >= size) 
                        #line 92 
                        return size;
    #line 94 
    tmp = *(addr + offset / 64UL);
  }
  #line 97 
  ;
  #line 97 
  ;
  #line 97 
  ;
  #line 97 
  return ldv_restrict_find_bit_res(ldv_min(ldv_ffs(tmp) + offset,size),size);
}

#line 100  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/find_bit.common.c"
unsigned long ldv_find_next_zero_bit(unsigned long *addr, unsigned long size, unsigned long offset)
{
  #line 102 
  unsigned long tmp;
  #line 104 
  ldv_check_find_bit_offset(size,offset);
  #line 106 
  tmp = *(addr + offset / 64UL);
  #line 107 
  tmp = ~ tmp;
  #line 108 
  tmp = (unsigned long)((18446744073709551615ULL << (offset & 63UL)) & (unsigned long long)tmp);
  #line 109 
  offset &= 18446744073709551552UL;
  #line 111 
  while (tmp == 0UL) {
    #line 112 
    offset += 64UL;
    #line 113 
    if (offset >= size) 
                        #line 114 
                        return size;
    #line 116 
    tmp = *(addr + offset / 64UL);
    #line 117 
    tmp = ~ tmp;
  }
  #line 120 
  ;
  #line 120 
  ;
  #line 120 
  ;
  #line 120 
  return ldv_restrict_find_bit_res(ldv_min(ldv_ffs(tmp) + offset,size),size);
}

#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/string.h"
#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
size_t ldv_strlen(char *s);
#line 26  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/string.h"
#line 31  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
int ldv_strcmp(char *cs, char *ct);
#line 27  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/string.h"
#line 40  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
int ldv_strncmp(char *cs, char *ct, __kernel_size_t count);
#line 28  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/string.h"
#line 70  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
char *ldv_strstr(char *cs, char *ct);
#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
size_t ldv_strlen(char *s)
{
  #line 23 
  unsigned int len = 0U;
  #line 25 
  while ((int)*s != 0) {
    #line 26 
    len ++;
    #line 25 
    s ++;
  }
  #line 28 
  return (unsigned long)len;
}

#line 31  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
int ldv_strcmp(char *cs, char *ct)
{
  #line 33 
  while ((int)*cs != 0 && (int)*ct != 0) {
    #line 34 
    if ((int)*cs != (int)*ct) 
                              #line 35 
                              break;
    #line 33 
    cs ++;
    #line 33 
    ct ++;
  }
  #line 37 
  return (int)*cs - (int)*ct;
}

#line 40  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
int ldv_strncmp(char *cs, char *ct, __kernel_size_t count)
{
  #line 42 
  if (count == 0UL) 
                    #line 43 
                    return 0;
  #line 45 
  while ((int)*cs != 0 && (int)*ct != 0) {
    #line 46 
    if ((int)*cs != (int)*ct) 
                              #line 47 
                              break;
    #line 49 
    count --;
    #line 51 
    if (count == 0UL) 
                      #line 52 
                      break;
    #line 45 
    cs ++;
    #line 45 
    ct ++;
  }
  #line 55 
  return (int)*cs - (int)*ct;
}

#line 58  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
int ldv_memcmp(void *cs, void *ct, size_t count)
{
  #line 60 
  unsigned char *su1;
  #line 60 
  unsigned char *su2;
  #line 61 
  int res = 0;
  #line 63 
  su1 = (unsigned char *)cs;
  #line 63 
  su2 = (unsigned char *)ct;
  #line 63 
  while (count != 0UL) {
    #line 64 
    res = (int)*su1 - (int)*su2;
    #line 64 
    if (res != 0) 
                  #line 65 
                  break;
    #line 63 
    su1 ++;
    #line 63 
    su2 ++;
    #line 63 
    count --;
  }
  #line 67 
  return res;
}

#line 70  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
char *ldv_strstr(char *cs, char *ct)
{
  #line 72 
  size_t cs_len;
  #line 72 
  size_t ct_len;
  #line 74 
  cs_len = ldv_strlen(cs);
  #line 75 
  ct_len = ldv_strlen(ct);
  #line 77 
  while (cs_len >= ct_len) {
    #line 78 
    if (ldv_memcmp((void *)cs,(void *)ct,ct_len) == 0) 
                                                       #line 79 
                                                       return cs;
    #line 81 
    cs_len --;
    #line 82 
    cs ++;
  }
  #line 85 
  return (char *)0;
}

#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/list.c"
void ldv_init_list_head(struct list_head *list)
{
  #line 23 
  list->next = list;
  #line 24 
  list->prev = list;
  #line 25 
  return;
}

#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 33  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kzalloc(size_t size, gfp_t flags);
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmalloc(size_t size, gfp_t flags);
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 53  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kcalloc(size_t n, size_t size, gfp_t flags);
#line 26  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 43  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmalloc_array(size_t n, size_t size, gfp_t flags);
#line 30  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 69  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
struct kmem_cache *ldv_kmem_cache_create(char *name, unsigned int size);
#line 31  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 85  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmem_cache_alloc(struct kmem_cache *cachep, gfp_t flags);
#line 32  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 90  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmem_cache_zalloc(struct kmem_cache *cachep, gfp_t flags);
#line 33  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 95  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void ldv_kmem_cache_free(struct kmem_cache *cachep, void *objp);
#line 34  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 100  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void ldv_kmem_cache_destroy(struct kmem_cache *cachep);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmalloc(size_t size, gfp_t flags)
{
  #line 25 
  void *res;
  #line 27 
  ldv_check_alloc_flags(flags);
  #line 28 
  res = ldv_malloc(size);
  #line 30 
  return res;
}

#line 33  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kzalloc(size_t size, gfp_t flags)
{
  #line 35 
  void *res;
  #line 37 
  ldv_check_alloc_flags(flags);
  #line 38 
  res = ldv_zalloc(size);
  #line 40 
  return res;
}

#line 43  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmalloc_array(size_t n, size_t size, gfp_t flags)
{
  #line 45 
  void *res;
  #line 47 
  ldv_check_alloc_flags(flags);
  #line 48 
  res = ldv_malloc(n * size);
  #line 50 
  return res;
}

#line 53  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kcalloc(size_t n, size_t size, gfp_t flags)
{
  #line 55 
  void *res;
  #line 57 
  ldv_check_alloc_flags(flags);
  #line 58 
  res = ldv_calloc(n,size);
  #line 60 
  return res;
}

#line 69  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
struct kmem_cache *ldv_kmem_cache_create(char *name, unsigned int size)
{
  #line 71 
  struct kmem_cache *res;
  #line 72 
  struct ldv_kmem_cache *ldv_res;
  #line 74 
  res = (struct kmem_cache *)ldv_zalloc(16UL);
  #line 76 
  if (res != (struct kmem_cache *)0) {
    #line 77 
    ldv_res = (struct ldv_kmem_cache *)res;
    #line 78 
    ldv_res->name = name;
    #line 79 
    ldv_res->size = size;
  }
  #line 82 
  return res;
}

#line 85  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmem_cache_alloc(struct kmem_cache *cachep, gfp_t flags)
{
  #line 87 
  return ldv_kmalloc((unsigned long)((struct ldv_kmem_cache *)cachep)->size,
                  flags);
}

#line 90  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmem_cache_zalloc(struct kmem_cache *cachep, gfp_t flags)
{
  #line 92 
  return ldv_kzalloc((unsigned long)((struct ldv_kmem_cache *)cachep)->size,
                  flags);
}

#line 95  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void ldv_kmem_cache_free(struct kmem_cache *cachep, void *objp)
{
  #line 97 
  ldv_free(objp);
  #line 98 
  return;
}

#line 100  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void ldv_kmem_cache_destroy(struct kmem_cache *cachep)
{
  #line 102 
  ldv_free((void *)cachep);
  #line 103 
  return;
}

#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/string.h"
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/util.c"
void *ldv_kmemdup(void *src, size_t len, gfp_t gfp);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/util.c"
void *ldv_kmemdup(void *src, size_t len, gfp_t gfp)
{
  #line 25 
  void *res;
  #line 27 
  ldv_check_alloc_flags(gfp);
  #line 28 
  res = ldv_malloc(len);
  #line 30 
  if (res != (void *)0) 
                        #line 31 
                        memcpy(res,src,len);
  #line 33 
  return res;
}

#line 162  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 162 
void ldv_check_alloc_nonatomic(void);
#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/vmalloc.h"
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/vmalloc.c"
void *ldv_vmalloc(unsigned long size);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/vmalloc.c"
void *ldv_vmalloc(unsigned long size)
{
  #line 25 
  void *res;
  #line 27 
  ldv_check_alloc_nonatomic();
  #line 28 
  res = ldv_malloc(size);
  #line 30 
  return res;
}

#line 33  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/vmalloc.c"
void *ldv_vzalloc(unsigned long size)
{
  #line 35 
  void *res;
  #line 37 
  ldv_check_alloc_nonatomic();
  #line 38 
  res = ldv_zalloc(size);
  #line 40 
  return res;
}

#line 43  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/vmalloc.c"
void ldv_vfree(void *addr)
{
  #line 45 
  ldv_free(addr);
  #line 46 
  return;
}

#line 28  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 28 
void *malloc(size_t);
#line 29 
#line 29 
void *calloc(size_t, size_t);
#line 30 
#line 30 
void free(void *);
#line 45 
#line 22  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
unsigned int ldv_is_memory_alloc_failures;
#line 56  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 63  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_xcalloc(size_t nmemb, size_t size);
#line 60  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 88  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_calloc_unknown_size(void);
#line 61  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 97  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_zalloc_unknown_size(void);
#line 64  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_malloc(size_t size);
#line 65  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 37  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_calloc(size_t nmemb, size_t size);
#line 66  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 42  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_zalloc(size_t size);
#line 67  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 47  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void ldv_reference_free(void *s);
#line 69  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 52  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_realloc(void *ptr, size_t size);
#line 71  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 80  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xmalloc(size_t size);
#line 72  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 90  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xcalloc(size_t nmemb, size_t size);
#line 73  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 100  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xzalloc(size_t size);
#line 75  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 110  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_malloc_unknown_size(void);
#line 76  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 124  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_calloc_unknown_size(void);
#line 77  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 139  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_zalloc_unknown_size(void);
#line 83  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 106  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_xmalloc_unknown_size(size_t size);
#line 85  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 144  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xmalloc_unknown_size(size_t size);
#line 87  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 87 
void *external_allocated_data(void);
#line 22  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
unsigned int ldv_is_memory_alloc_failures = 1U;
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_malloc(size_t size)
{
  #line 26 
  void *res;
  #line 28 
  if (ldv_is_memory_alloc_failures != 0U) {
    #line 28 
    if (ldv_undef_int() != 0) 
                              #line 29 
                              return (void *)0;
  }
  #line 32 
  res = malloc(size);
  #line 33 
  __VERIFIER_assume(res != (void *)0);
  #line 34 
  return res;
}

#line 37  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_calloc(size_t nmemb, size_t size)
{
  #line 39 
  return calloc(nmemb,size);
}

#line 42  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_zalloc(size_t size)
{
  #line 44 
  return calloc(1UL,size);
}

#line 47  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void ldv_reference_free(void *s)
{
  #line 49 
  free(s);
  #line 50 
  return;
}

#line 52  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_realloc(void *ptr, size_t size)
{
  #line 54 
  void *res;
  #line 56 
  if (ptr != (void *)0 && size == 0UL) {
    #line 57 
    free(ptr);
    #line 58 
    return (void *)0;
  }
  #line 61 
  if (ptr == (void *)0) {
    #line 62 
    res = malloc(size);
    #line 63 
    return res;
  }
  #line 66 
  if (ldv_undef_int() != 0) {
    #line 68 
    res = malloc(size);
    #line 69 
    __VERIFIER_assume(res != (void *)0);
    #line 71 
    memcpy(res,ptr,size);
    #line 72 
    free(ptr);
    #line 74 
    return res;
  }
  else 
       #line 77 
       return (void *)0;
}

#line 80  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xmalloc(size_t size)
{
  #line 82 
  void *res;
  #line 84 
  res = malloc(size);
  #line 85 
  __VERIFIER_assume(res != (void *)0);
  #line 87 
  return res;
}

#line 90  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xcalloc(size_t nmemb, size_t size)
{
  #line 92 
  void *res;
  #line 94 
  res = calloc(nmemb,size);
  #line 95 
  __VERIFIER_assume(res != (void *)0);
  #line 97 
  return res;
}

#line 100  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xzalloc(size_t size)
{
  #line 102 
  void *res;
  #line 104 
  res = calloc(1UL,size);
  #line 105 
  __VERIFIER_assume(res != (void *)0);
  #line 107 
  return res;
}

#line 110  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_malloc_unknown_size(void)
{
  #line 112 
  void *res;
  #line 114 
  if (ldv_undef_int() != 0) {
    #line 116 
    res = external_allocated_data();
    #line 117 
    __VERIFIER_assume(res != (void *)0);
    #line 118 
    return res;
  }
  else 
       #line 121 
       return (void *)0;
}

#line 124  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_calloc_unknown_size(void)
{
  #line 126 
  void *res;
  #line 128 
  if (ldv_undef_int() != 0) {
    #line 130 
    res = external_allocated_data();
    #line 131 
    memset(res,0,8UL);
    #line 132 
    __VERIFIER_assume(res != (void *)0);
    #line 133 
    return res;
  }
  else 
       #line 136 
       return (void *)0;
}

#line 139  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_zalloc_unknown_size(void)
{
  #line 141 
  return ldv_reference_calloc_unknown_size();
}

#line 144  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xmalloc_unknown_size(size_t size)
{
  #line 146 
  void *res;
  #line 149 
  res = external_allocated_data();
  #line 150 
  __VERIFIER_assume(res != (void *)0);
  #line 152 
  return res;
}

#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_malloc(size_t size)
{
  #line 25 
  void *res;
  #line 26 
  res = ldv_reference_malloc(size);
  #line 27 
  if (res != (void *)0) {
    #line 28 
    int tmp_0;
    #line 28 
    if (ldv_is_err(res)) 
                         #line 28 
                         tmp_0 = 0; else 
                                         #line 28 
                                         tmp_0 = 1;
    #line 28 
    __VERIFIER_assume(tmp_0);
  }
  #line 29 
  return res;
}

#line 32  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_calloc(size_t nmemb, size_t size)
{
  #line 34 
  void *res;
  #line 35 
  res = ldv_reference_calloc(nmemb,size);
  #line 36 
  if (res != (void *)0) {
    #line 37 
    int tmp_0;
    #line 37 
    if (ldv_is_err(res)) 
                         #line 37 
                         tmp_0 = 0; else 
                                         #line 37 
                                         tmp_0 = 1;
    #line 37 
    __VERIFIER_assume(tmp_0);
  }
  #line 38 
  return res;
}

#line 41  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_zalloc(size_t size)
{
  #line 43 
  void *res;
  #line 44 
  res = ldv_reference_zalloc(size);
  #line 45 
  if (res != (void *)0) {
    #line 46 
    int tmp_0;
    #line 46 
    if (ldv_is_err(res)) 
                         #line 46 
                         tmp_0 = 0; else 
                                         #line 46 
                                         tmp_0 = 1;
    #line 46 
    __VERIFIER_assume(tmp_0);
  }
  #line 47 
  return res;
}

#line 50  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void ldv_free(void *s)
{
  #line 52 
  ldv_reference_free(s);
  #line 53 
  return;
}

#line 55  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_xmalloc(size_t size)
{
  #line 57 
  void *res;
  #line 59 
  int tmp_0;
  #line 58 
  res = ldv_reference_xmalloc(size);
  #line 59 
  if (ldv_is_err(res)) 
                       #line 59 
                       tmp_0 = 0; else 
                                       #line 59 
                                       tmp_0 = 1;
  #line 59 
  __VERIFIER_assume(tmp_0);
  #line 60 
  return res;
}

#line 63  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_xcalloc(size_t nmemb, size_t size)
{
  #line 65 
  void *res;
  #line 67 
  int tmp_0;
  #line 66 
  res = ldv_reference_xcalloc(nmemb,size);
  #line 67 
  if (ldv_is_err(res)) 
                       #line 67 
                       tmp_0 = 0; else 
                                       #line 67 
                                       tmp_0 = 1;
  #line 67 
  __VERIFIER_assume(tmp_0);
  #line 68 
  return res;
}

#line 71  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_xzalloc(size_t size)
{
  #line 73 
  void *res;
  #line 75 
  int tmp_0;
  #line 74 
  res = ldv_reference_xzalloc(size);
  #line 75 
  if (ldv_is_err(res)) 
                       #line 75 
                       tmp_0 = 0; else 
                                       #line 75 
                                       tmp_0 = 1;
  #line 75 
  __VERIFIER_assume(tmp_0);
  #line 76 
  return res;
}

#line 79  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_malloc_unknown_size(void)
{
  #line 81 
  void *res;
  #line 82 
  res = ldv_reference_malloc_unknown_size();
  #line 83 
  if (res != (void *)0) {
    #line 84 
    int tmp_0;
    #line 84 
    if (ldv_is_err(res)) 
                         #line 84 
                         tmp_0 = 0; else 
                                         #line 84 
                                         tmp_0 = 1;
    #line 84 
    __VERIFIER_assume(tmp_0);
  }
  #line 85 
  return res;
}

#line 88  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_calloc_unknown_size(void)
{
  #line 90 
  void *res;
  #line 91 
  res = ldv_reference_calloc_unknown_size();
  #line 92 
  if (res != (void *)0) {
    #line 93 
    int tmp_0;
    #line 93 
    if (ldv_is_err(res)) 
                         #line 93 
                         tmp_0 = 0; else 
                                         #line 93 
                                         tmp_0 = 1;
    #line 93 
    __VERIFIER_assume(tmp_0);
  }
  #line 94 
  return res;
}

#line 97  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_zalloc_unknown_size(void)
{
  #line 99 
  void *res;
  #line 100 
  res = ldv_reference_zalloc_unknown_size();
  #line 101 
  if (res != (void *)0) {
    #line 102 
    int tmp_0;
    #line 102 
    if (ldv_is_err(res)) 
                         #line 102 
                         tmp_0 = 0; else 
                                         #line 102 
                                         tmp_0 = 1;
    #line 102 
    __VERIFIER_assume(tmp_0);
  }
  #line 103 
  return res;
}

#line 106  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_xmalloc_unknown_size(size_t size)
{
  #line 108 
  void *res;
  #line 110 
  int tmp_0;
  #line 109 
  res = ldv_reference_xmalloc_unknown_size(size);
  #line 110 
  if (ldv_is_err(res)) 
                       #line 110 
                       tmp_0 = 0; else 
                                       #line 110 
                                       tmp_0 = 1;
  #line 110 
  __VERIFIER_assume(tmp_0);
  #line 111 
  return res;
}

/* compiler builtin: 
   long __builtin_expect(long exp, long c);   */
#line 22  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/common.h"
#line 22 
void __VERIFIER_error(void);
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/common.h"
long __builtin_expect(long exp, long c)
{
  #line 26 
  return exp;
}

#line 35  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/gcc.c"
void __builtin_trap(void)
{
  #line 37 
  __VERIFIER_error();
  #line 38 
  return;
}

#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 53  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
long ldv_undef_long(void);
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 61  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
unsigned int ldv_undef_uint(void);
#line 26  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 77  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
unsigned long ldv_undef_ulong(void);
#line 27  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 85  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
unsigned long long ldv_undef_ulonglong(void);
#line 28  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 69  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
void *ldv_undef_ptr(void);
#line 37  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 111  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int ldv_undef_int_nonnegative(void);
#line 43  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 129  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
void *ldv_undef_ptr_non_null(void);
#line 54  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 139  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int __ldv_undef_int_range(int begin, int end);
#line 56  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 151  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int __ldv_undef_int_range2(int begin, int end);
#line 29 
#line 29 
int __VERIFIER_nondet_int(void);
#line 31 
#line 31 
long __VERIFIER_nondet_long(void);
#line 38 
#line 38 
unsigned int __VERIFIER_nondet_uint(void);
#line 41 
#line 41 
unsigned long __VERIFIER_nondet_ulong(void);
#line 42 
#line 42 
unsigned long long __VERIFIER_nondet_ulonglong(void);
#line 43 
#line 43 
void *__VERIFIER_nondet_pointer(void);
#line 45  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int ldv_undef_int(void)
{
  #line 48 
  int undef_int = __VERIFIER_nondet_int();
  #line 50 
  return undef_int;
}

#line 53  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
long ldv_undef_long(void)
{
  #line 56 
  long undef_long = __VERIFIER_nondet_long();
  #line 58 
  return undef_long;
}

#line 61  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
unsigned int ldv_undef_uint(void)
{
  #line 64 
  unsigned int undef_uint = __VERIFIER_nondet_uint();
  #line 66 
  return undef_uint;
}

#line 69  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
void *ldv_undef_ptr(void)
{
  #line 72 
  void *undef_ptr = __VERIFIER_nondet_pointer();
  #line 74 
  return undef_ptr;
}

#line 77  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
unsigned long ldv_undef_ulong(void)
{
  #line 80 
  unsigned long undef_ulong = __VERIFIER_nondet_ulong();
  #line 82 
  return undef_ulong;
}

#line 85  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
unsigned long long ldv_undef_ulonglong(void)
{
  #line 88 
  unsigned long long undef_ulonglong = __VERIFIER_nondet_ulonglong();
  #line 90 
  return undef_ulonglong;
}

#line 93  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int ldv_undef_int_positive(void)
{
  #line 95 
  int ret = ldv_undef_int();
  #line 97 
  __VERIFIER_assume(ret > 0);
  #line 99 
  return ret;
}

#line 102  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int ldv_undef_int_negative(void)
{
  #line 104 
  int ret = ldv_undef_int();
  #line 106 
  __VERIFIER_assume(ret < 0);
  #line 108 
  return ret;
}

#line 111  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int ldv_undef_int_nonnegative(void)
{
  #line 113 
  int ret = ldv_undef_int();
  #line 115 
  __VERIFIER_assume(ret >= 0);
  #line 117 
  return ret;
}

#line 120  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int ldv_undef_int_nonpositive(void)
{
  #line 122 
  int ret = ldv_undef_int();
  #line 124 
  __VERIFIER_assume(ret <= 0);
  #line 126 
  return ret;
}

#line 129  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
void *ldv_undef_ptr_non_null(void)
{
  #line 131 
  void *ret = ldv_undef_ptr();
  #line 133 
  __VERIFIER_assume(ret != (void *)0);
  #line 135 
  return ret;
}

#line 139  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int __ldv_undef_int_range(int begin, int end)
{
  #line 141 
  int ret;
  #line 143 
  ret = ldv_undef_int();
  #line 144 
  __VERIFIER_assume(ret >= begin);
  #line 145 
  __VERIFIER_assume(ret <= end);
  #line 147 
  return ret;
}

#line 151  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int __ldv_undef_int_range2(int begin, int end)
{
  #line 153 
  int ret;
  #line 155 
  ret = begin;
  #line 155 
  while (ret < end) {
    #line 156 
    if (ldv_undef_int() != 0) 
                              #line 157 
                              break;
    #line 155 
    ret ++;
  }
  #line 159 
  return ret;
}

#line 62  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 62 
void ldv_initialize(void);
#line 97 
#line 97 
void ldv_failed_register_netdev(void);
#line 123 
#line 123 
void ldv_pre_probe(void);
#line 35  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/thread.h"
#line 35 
int pthread_create(pthread_t *, pthread_attr_t *, void *(*)(void *), void *);
#line 39 
#line 39 
int pthread_join(pthread_t, void **);
#line 90  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amazon/ena/ena.ko/concurrency safety/emg/0/environment_model.c"
#line 205 
void emg_dispatch_deregister_13(struct net_device *arg0);
#line 91 
#line 171 
void emg_dispatch_deregister_9(struct pci_driver *arg0);
#line 92 
#line 133 
void emg_dispatch_instance_deregister_4(struct timer_list *arg0);
#line 93 
#line 142 
void emg_dispatch_instance_deregister_5(struct timer_list *arg0);
#line 94 
#line 160 
void emg_dispatch_instance_register_8(struct timer_list *arg0);
#line 95 
#line 151 
void emg_dispatch_irq_deregister_6(int arg0);
#line 96 
#line 191 
void emg_dispatch_irq_register_12(int arg0, enum irqreturn (*arg1)(int , void *), enum irqreturn (*arg2)(int , void *), void *arg3);
#line 97 
#line 180 
void emg_dispatch_register_11(struct net_device *arg0);
#line 98 
#line 122 
void emg_dispatch_register_2(struct pci_driver *arg0);
#line 99 
#line 1209 
void *emg_entry_point_insmod(void *arg0);
#line 102 
#line 214 
void *emg_interrupt_interrupt_scenario_0(void *arg0);
#line 104 
#line 280 
void *emg_net_random_allocationless_scenario_ena_get_channels(void *arg0);
#line 105 
#line 699 
void *emg_pci_pci_scenario_ena_pci_driver(void *arg0);
#line 110 
#line 872 
void *emg_timer_timer_scenario_3(void *arg0);
#line 112 
#line 1238 
int main(void);
#line 115  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amazon/ena/ena.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_14;
#line 116  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amazon/ena/ena.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_15;
#line 117  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amazon/ena/ena.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_16;
#line 118  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amazon/ena/ena.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_17;
#line 122  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amazon/ena/ena.ko/concurrency safety/emg/0/environment_model.c"
void emg_dispatch_register_2(struct pci_driver *arg0)
{
  #line 123 
  int ret;
  #line 124 
  struct emg_struct_pci_scenario_ena_pci_driver_16 *cf_arg_16;
  #line 125 
  cf_arg_16 = (struct emg_struct_pci_scenario_ena_pci_driver_16 *)ldv_xmalloc(16UL);
  #line 126 
  cf_arg_16->arg0 = arg0;
  #line 127 
  ret = pthread_create(& emg_thread_16,(pthread_attr_t *)0,& emg_pci_pci_scenario_ena_pci_driver,(void *)cf_arg_16);
  #line 128 
  __VERIFIER_assume(ret == 0);
  #line 129 
  return;
}

#line 133  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amazon/ena/ena.ko/concurrency safety/emg/0/environment_model.c"
void emg_dispatch_instance_deregister_4(struct timer_list *arg0)
{
  #line 134 
  int ret;
  #line 135 
  struct emg_struct_timer_scenario_3_17 *cf_arg_17;
  #line 136 
  ret = pthread_join(emg_thread_17,(void **)0);
  #line 137 
  __VERIFIER_assume(ret == 0);
  #line 138 
  return;
}

#line 142  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amazon/ena/ena.ko/concurrency safety/emg/0/environment_model.c"
void emg_dispatch_instance_deregister_5(struct timer_list *arg0)
{
  #line 143 
  int ret;
  #line 144 
  struct emg_struct_timer_scenario_3_17 *cf_arg_17;
  #line 145 
  ret = pthread_join(emg_thread_17,(void **)0);
  #line 146 
  __VERIFIER_assume(ret == 0);
  #line 147 
  return;
}

#line 151  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amazon/ena/ena.ko/concurrency safety/emg/0/environment_model.c"
void emg_dispatch_irq_deregister_6(int arg0)
{
  #line 152 
  int ret;
  #line 153 
  struct emg_struct_free_irq_6 *cf_arg_14;
  #line 154 
  ret = pthread_join(emg_thread_14,(void **)0);
  #line 155 
  __VERIFIER_assume(ret == 0);
  #line 156 
  return;
}

#line 160  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amazon/ena/ena.ko/concurrency safety/emg/0/environment_model.c"
void emg_dispatch_instance_register_8(struct timer_list *arg0)
{
  #line 161 
  int ret;
  #line 162 
  struct emg_struct_timer_scenario_3_17 *cf_arg_17;
  #line 163 
  cf_arg_17 = (struct emg_struct_timer_scenario_3_17 *)ldv_xmalloc(16UL);
  #line 164 
  cf_arg_17->arg0 = arg0;
  #line 165 
  ret = pthread_create(& emg_thread_17,(pthread_attr_t *)0,& emg_timer_timer_scenario_3,(void *)cf_arg_17);
  #line 166 
  __VERIFIER_assume(ret == 0);
  #line 167 
  return;
}

#line 171  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amazon/ena/ena.ko/concurrency safety/emg/0/environment_model.c"
void emg_dispatch_deregister_9(struct pci_driver *arg0)
{
  #line 172 
  int ret;
  #line 173 
  struct emg_struct_pci_scenario_ena_pci_driver_16 *cf_arg_16;
  #line 174 
  ret = pthread_join(emg_thread_16,(void **)0);
  #line 175 
  __VERIFIER_assume(ret == 0);
  #line 176 
  return;
}

#line 180  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amazon/ena/ena.ko/concurrency safety/emg/0/environment_model.c"
void emg_dispatch_register_11(struct net_device *arg0)
{
  #line 181 
  int ret;
  #line 182 
  struct emg_struct_random_allocationless_scenario_ena_get_channels_15 *cf_arg_15;
  #line 183 
  cf_arg_15 = (struct emg_struct_random_allocationless_scenario_ena_get_channels_15 *)ldv_xmalloc(16UL);
  #line 184 
  cf_arg_15->arg0 = arg0;
  #line 185 
  ret = pthread_create(& emg_thread_15,(pthread_attr_t *)0,& emg_net_random_allocationless_scenario_ena_get_channels,(void *)cf_arg_15);
  #line 186 
  __VERIFIER_assume(ret == 0);
  #line 187 
  return;
}

#line 191  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amazon/ena/ena.ko/concurrency safety/emg/0/environment_model.c"
void emg_dispatch_irq_register_12(int arg0, enum irqreturn (*arg1)(int , void *), enum irqreturn (*arg2)(int , void *), void *arg3)
{
  #line 192 
  int ret;
  #line 193 
  struct emg_struct_interrupt_scenario_0_14 *cf_arg_14;
  #line 194 
  cf_arg_14 = (struct emg_struct_interrupt_scenario_0_14 *)ldv_xmalloc(40UL);
  #line 195 
  cf_arg_14->arg0 = arg0;
  #line 196 
  cf_arg_14->arg1 = arg1;
  #line 197 
  cf_arg_14->arg2 = arg2;
  #line 198 
  cf_arg_14->arg3 = arg3;
  #line 199 
  ret = pthread_create(& emg_thread_14,(pthread_attr_t *)0,& emg_interrupt_interrupt_scenario_0,(void *)cf_arg_14);
  #line 200 
  __VERIFIER_assume(ret == 0);
  #line 201 
  return;
}

#line 205  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amazon/ena/ena.ko/concurrency safety/emg/0/environment_model.c"
void emg_dispatch_deregister_13(struct net_device *arg0)
{
  #line 206 
  int ret;
  #line 207 
  struct emg_struct_random_allocationless_scenario_ena_get_channels_15 *cf_arg_15;
  #line 208 
  ret = pthread_join(emg_thread_15,(void **)0);
  #line 209 
  __VERIFIER_assume(ret == 0);
  #line 210 
  return;
}

#line 214  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amazon/ena/ena.ko/concurrency safety/emg/0/environment_model.c"
void *emg_interrupt_interrupt_scenario_0(void *arg0)
{
  #line 217 
  enum irqreturn (*emg_14_callback)(int , void *);
  #line 218 
  void *emg_14_data;
  #line 219 
  int emg_14_line;
  #line 220 
  enum irqreturn emg_14_ret_val;
  #line 221 
  enum irqreturn (*emg_14_thread)(int , void *);
  #line 223 
  struct emg_struct_interrupt_scenario_0_14 *data = (struct emg_struct_interrupt_scenario_0_14 *)arg0;
  #line 228 
  if (data != (struct emg_struct_interrupt_scenario_0_14 *)0) {
    #line 229 
    emg_14_line = data->arg0;
    #line 230 
    emg_14_callback = data->arg1;
    #line 231 
    emg_14_thread = data->arg2;
    #line 232 
    emg_14_data = data->arg3;
    #line 233 
    ldv_free((void *)data);
  }
  #line 239 
  ldv_switch_to_interrupt_context();
  #line 243 
  if (emg_14_callback != (enum irqreturn (*)(int , void *))0) 
                                                              #line 244 
                                                              emg_14_ret_val = (*emg_14_callback)(emg_14_line,emg_14_data);
  else {
    #line 246 
    emg_14_ret_val = (enum irqreturn)ldv_undef_int();
  }
  #line 252 
  ldv_switch_to_process_context();
  #line 255 
  if (ldv_undef_int() != 0) {
    #line 257 
    __VERIFIER_assume(emg_14_ret_val == (unsigned int)IRQ_WAKE_THREAD);
    #line 261 
    if (emg_14_thread != (enum irqreturn (*)(int , void *))0) 
                                                              #line 262 
                                                              (*emg_14_thread)(emg_14_line,emg_14_data);
  }
  else 
       #line 267 
       __VERIFIER_assume(emg_14_ret_val != (unsigned int)IRQ_WAKE_THREAD);
  #line 275 
  return (void *)0;
}

#line 280  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amazon/ena/ena.ko/concurrency safety/emg/0/environment_model.c"
void *emg_net_random_allocationless_scenario_ena_get_channels(void *arg0)
{
  #line 283 
  struct net_device *emg_15_container;
  #line 284 
  struct sk_buff *emg_15_emg_param_0_21;
  #line 285 
  struct ethtool_channels *emg_15_emg_param_1_0;
  #line 286 
  struct ethtool_coalesce *emg_15_emg_param_1_1;
  #line 287 
  struct ethtool_rxnfc *emg_15_emg_param_1_10;
  #line 288 
  int emg_15_emg_param_1_12;
  #line 289 
  unsigned int emg_15_emg_param_1_13;
  #line 290 
  struct ethtool_tunable *emg_15_emg_param_1_15;
  #line 291 
  int emg_15_emg_param_1_17;
  #line 292 
  struct rtnl_link_stats64 *emg_15_emg_param_1_18;
  #line 293 
  struct sk_buff *emg_15_emg_param_1_19;
  #line 294 
  struct ethtool_drvinfo *emg_15_emg_param_1_2;
  #line 295 
  struct ethtool_channels *emg_15_emg_param_1_22;
  #line 296 
  struct ethtool_coalesce *emg_15_emg_param_1_23;
  #line 297 
  unsigned int emg_15_emg_param_1_24;
  #line 298 
  struct ethtool_ringparam *emg_15_emg_param_1_25;
  #line 299 
  unsigned int *emg_15_emg_param_1_26;
  #line 300 
  struct ethtool_rxnfc *emg_15_emg_param_1_29;
  #line 301 
  struct ethtool_stats *emg_15_emg_param_1_3;
  #line 302 
  struct ethtool_tunable *emg_15_emg_param_1_30;
  #line 303 
  struct ethtool_link_ksettings *emg_15_emg_param_1_5;
  #line 304 
  struct ethtool_ringparam *emg_15_emg_param_1_6;
  #line 305 
  unsigned int *emg_15_emg_param_1_7;
  #line 306 
  unsigned int *emg_15_emg_param_2_11;
  #line 307 
  unsigned char *emg_15_emg_param_2_14;
  #line 308 
  void *emg_15_emg_param_2_16;
  #line 309 
  struct net_device *emg_15_emg_param_2_20;
  #line 310 
  unsigned char *emg_15_emg_param_2_27;
  #line 311 
  void *emg_15_emg_param_2_31;
  #line 312 
  unsigned long long *emg_15_emg_param_2_4;
  #line 313 
  unsigned char *emg_15_emg_param_2_8;
  #line 314 
  unsigned char emg_15_emg_param_3_28;
  #line 315 
  unsigned char *emg_15_emg_param_3_9;
  #line 316 
  int emg_repeat_cnt_call_15 = 1;
  #line 318 
  struct emg_struct_random_allocationless_scenario_ena_get_channels_15 *data = (struct emg_struct_random_allocationless_scenario_ena_get_channels_15 *)arg0;
  #line 323 
  if (data != (struct emg_struct_random_allocationless_scenario_ena_get_channels_15 *)0) {
    #line 324 
    emg_15_container = data->arg0;
    #line 325 
    ldv_free((void *)data);
  }
  #line 330 
  goto emg_call_15;
  #line 334 
  return (void *)0;
  #line 337 
  emg_call_15: 
               #line 337 
  ;
  #line 338 
  switch (ldv_undef_int()) {
    #line 339 
    case 0: 
            #line 339 
    ;
    #line 341 
    emg_15_emg_param_1_30 = (struct ethtool_tunable *)ldv_xmalloc_unknown_size(0UL);
    #line 341 
    emg_15_emg_param_1_30 = emg_15_emg_param_1_30;
    #line 342 
    emg_15_emg_param_2_31 = ldv_xmalloc_unknown_size(0UL);
    #line 342 
    emg_15_emg_param_2_31 = emg_15_emg_param_2_31;
    #line 346 
    emg_wrapper_ena_set_tunable(emg_15_container,emg_15_emg_param_1_30,emg_15_emg_param_2_31);
    #line 350 
    ldv_free((void *)emg_15_emg_param_1_30);
    #line 351 
    ldv_free(emg_15_emg_param_2_31);
    #line 353 
    break;
    #line 355 
    case 1: 
            #line 355 
    ;
    #line 357 
    emg_15_emg_param_1_29 = (struct ethtool_rxnfc *)ldv_xmalloc_unknown_size(0UL);
    #line 357 
    emg_15_emg_param_1_29 = emg_15_emg_param_1_29;
    #line 361 
    emg_wrapper_ena_set_rxnfc(emg_15_container,emg_15_emg_param_1_29);
    #line 365 
    ldv_free((void *)emg_15_emg_param_1_29);
    #line 367 
    break;
    #line 369 
    case 2: 
            #line 369 
    ;
    #line 371 
    emg_15_emg_param_1_26 = (unsigned int *)ldv_xmalloc_unknown_size(0UL);
    #line 371 
    emg_15_emg_param_1_26 = emg_15_emg_param_1_26;
    #line 372 
    emg_15_emg_param_2_27 = (unsigned char *)ldv_xmalloc_unknown_size(0UL);
    #line 372 
    emg_15_emg_param_2_27 = emg_15_emg_param_2_27;
    #line 376 
    emg_wrapper_ena_set_rxfh(emg_15_container,emg_15_emg_param_1_26,emg_15_emg_param_2_27,(unsigned char)((int)emg_15_emg_param_3_28));
    #line 380 
    ldv_free((void *)emg_15_emg_param_1_26);
    #line 381 
    ldv_free((void *)emg_15_emg_param_2_27);
    #line 383 
    break;
    #line 385 
    case 3: 
            #line 385 
    ;
    #line 387 
    emg_15_emg_param_1_25 = (struct ethtool_ringparam *)ldv_xmalloc_unknown_size(0UL);
    #line 387 
    emg_15_emg_param_1_25 = emg_15_emg_param_1_25;
    #line 391 
    emg_wrapper_ena_set_ringparam(emg_15_container,emg_15_emg_param_1_25);
    #line 395 
    ldv_free((void *)emg_15_emg_param_1_25);
    #line 397 
    break;
    #line 399 
    case 4: 
            #line 399 
    ;
    #line 401 
    emg_wrapper_ena_set_msglevel(emg_15_container,emg_15_emg_param_1_24);
    #line 403 
    break;
    #line 405 
    case 5: 
            #line 405 
    ;
    #line 407 
    emg_15_emg_param_1_23 = (struct ethtool_coalesce *)ldv_xmalloc_unknown_size(0UL);
    #line 407 
    emg_15_emg_param_1_23 = emg_15_emg_param_1_23;
    #line 411 
    emg_wrapper_ena_set_coalesce(emg_15_container,emg_15_emg_param_1_23);
    #line 415 
    ldv_free((void *)emg_15_emg_param_1_23);
    #line 417 
    break;
    #line 419 
    case 6: 
            #line 419 
    ;
    #line 421 
    emg_15_emg_param_1_22 = (struct ethtool_channels *)ldv_xmalloc_unknown_size(0UL);
    #line 421 
    emg_15_emg_param_1_22 = emg_15_emg_param_1_22;
    #line 425 
    emg_wrapper_ena_set_channels(emg_15_container,emg_15_emg_param_1_22);
    #line 429 
    ldv_free((void *)emg_15_emg_param_1_22);
    #line 431 
    break;
    #line 433 
    case 7: 
            #line 433 
    ;
    #line 435 
    eth_validate_addr(emg_15_container);
    #line 437 
    break;
    #line 439 
    case 8: 
            #line 439 
    ;
    #line 441 
    emg_wrapper_ena_tx_timeout(emg_15_container);
    #line 443 
    break;
    #line 445 
    case 9: 
            #line 445 
    ;
    #line 447 
    emg_15_emg_param_0_21 = (struct sk_buff *)ldv_xmalloc_unknown_size(0UL);
    #line 447 
    emg_15_emg_param_0_21 = emg_15_emg_param_0_21;
    #line 451 
    emg_wrapper_ena_start_xmit(emg_15_emg_param_0_21,emg_15_container);
    #line 455 
    ldv_free((void *)emg_15_emg_param_0_21);
    #line 457 
    break;
    #line 459 
    case 10: 
             #line 459 
    ;
    #line 461 
    emg_15_emg_param_1_19 = (struct sk_buff *)ldv_xmalloc_unknown_size(0UL);
    #line 461 
    emg_15_emg_param_1_19 = emg_15_emg_param_1_19;
    #line 462 
    emg_15_emg_param_2_20 = (struct net_device *)ldv_xmalloc_unknown_size(0UL);
    #line 462 
    emg_15_emg_param_2_20 = emg_15_emg_param_2_20;
    #line 466 
    emg_wrapper_ena_select_queue(emg_15_container,emg_15_emg_param_1_19,emg_15_emg_param_2_20);
    #line 470 
    ldv_free((void *)emg_15_emg_param_1_19);
    #line 471 
    ldv_free((void *)emg_15_emg_param_2_20);
    #line 473 
    break;
    #line 475 
    case 11: 
             #line 475 
    ;
    #line 477 
    emg_15_emg_param_1_18 = (struct rtnl_link_stats64 *)ldv_xmalloc_unknown_size(0UL);
    #line 477 
    emg_15_emg_param_1_18 = emg_15_emg_param_1_18;
    #line 481 
    emg_wrapper_ena_get_stats64(emg_15_container,emg_15_emg_param_1_18);
    #line 485 
    ldv_free((void *)emg_15_emg_param_1_18);
    #line 487 
    break;
    #line 489 
    case 12: 
             #line 489 
    ;
    #line 491 
    emg_wrapper_ena_change_mtu(emg_15_container,emg_15_emg_param_1_17);
    #line 493 
    break;
    #line 495 
    case 13: 
             #line 495 
    ;
    #line 497 
    emg_15_emg_param_1_15 = (struct ethtool_tunable *)ldv_xmalloc_unknown_size(0UL);
    #line 497 
    emg_15_emg_param_1_15 = emg_15_emg_param_1_15;
    #line 498 
    emg_15_emg_param_2_16 = ldv_xmalloc_unknown_size(0UL);
    #line 498 
    emg_15_emg_param_2_16 = emg_15_emg_param_2_16;
    #line 502 
    emg_wrapper_ena_get_tunable(emg_15_container,emg_15_emg_param_1_15,emg_15_emg_param_2_16);
    #line 506 
    ldv_free((void *)emg_15_emg_param_1_15);
    #line 507 
    ldv_free(emg_15_emg_param_2_16);
    #line 509 
    break;
    #line 511 
    case 14: 
             #line 511 
    ;
    #line 513 
    emg_15_emg_param_2_14 = (unsigned char *)ldv_xmalloc_unknown_size(0UL);
    #line 513 
    emg_15_emg_param_2_14 = emg_15_emg_param_2_14;
    #line 517 
    emg_wrapper_ena_get_strings(emg_15_container,emg_15_emg_param_1_13,emg_15_emg_param_2_14);
    #line 521 
    ldv_free((void *)emg_15_emg_param_2_14);
    #line 523 
    break;
    #line 525 
    case 15: 
             #line 525 
    ;
    #line 527 
    ena_get_sset_count(emg_15_container,emg_15_emg_param_1_12);
    #line 529 
    break;
    #line 531 
    case 16: 
             #line 531 
    ;
    #line 533 
    emg_15_emg_param_1_10 = (struct ethtool_rxnfc *)ldv_xmalloc_unknown_size(0UL);
    #line 533 
    emg_15_emg_param_1_10 = emg_15_emg_param_1_10;
    #line 534 
    emg_15_emg_param_2_11 = (unsigned int *)ldv_xmalloc_unknown_size(0UL);
    #line 534 
    emg_15_emg_param_2_11 = emg_15_emg_param_2_11;
    #line 538 
    emg_wrapper_ena_get_rxnfc(emg_15_container,emg_15_emg_param_1_10,emg_15_emg_param_2_11);
    #line 542 
    ldv_free((void *)emg_15_emg_param_1_10);
    #line 543 
    ldv_free((void *)emg_15_emg_param_2_11);
    #line 545 
    break;
    #line 547 
    case 17: 
             #line 547 
    ;
    #line 549 
    emg_wrapper_ena_get_rxfh_key_size(emg_15_container);
    #line 551 
    break;
    #line 553 
    case 18: 
             #line 553 
    ;
    #line 555 
    emg_wrapper_ena_get_rxfh_indir_size(emg_15_container);
    #line 557 
    break;
    #line 559 
    case 19: 
             #line 559 
    ;
    #line 561 
    emg_15_emg_param_1_7 = (unsigned int *)ldv_xmalloc_unknown_size(0UL);
    #line 561 
    emg_15_emg_param_1_7 = emg_15_emg_param_1_7;
    #line 562 
    emg_15_emg_param_2_8 = (unsigned char *)ldv_xmalloc_unknown_size(0UL);
    #line 562 
    emg_15_emg_param_2_8 = emg_15_emg_param_2_8;
    #line 563 
    emg_15_emg_param_3_9 = (unsigned char *)ldv_xmalloc_unknown_size(0UL);
    #line 563 
    emg_15_emg_param_3_9 = emg_15_emg_param_3_9;
    #line 567 
    emg_wrapper_ena_get_rxfh(emg_15_container,emg_15_emg_param_1_7,emg_15_emg_param_2_8,emg_15_emg_param_3_9);
    #line 571 
    ldv_free((void *)emg_15_emg_param_1_7);
    #line 572 
    ldv_free((void *)emg_15_emg_param_2_8);
    #line 573 
    ldv_free((void *)emg_15_emg_param_3_9);
    #line 575 
    break;
    #line 577 
    case 20: 
             #line 577 
    ;
    #line 579 
    emg_15_emg_param_1_6 = (struct ethtool_ringparam *)ldv_xmalloc_unknown_size(0UL);
    #line 579 
    emg_15_emg_param_1_6 = emg_15_emg_param_1_6;
    #line 583 
    emg_wrapper_ena_get_ringparam(emg_15_container,emg_15_emg_param_1_6);
    #line 587 
    ldv_free((void *)emg_15_emg_param_1_6);
    #line 589 
    break;
    #line 591 
    case 21: 
             #line 591 
    ;
    #line 593 
    emg_wrapper_ena_get_msglevel(emg_15_container);
    #line 595 
    break;
    #line 597 
    case 22: 
             #line 597 
    ;
    #line 599 
    emg_15_emg_param_1_5 = (struct ethtool_link_ksettings *)ldv_xmalloc_unknown_size(0UL);
    #line 599 
    emg_15_emg_param_1_5 = emg_15_emg_param_1_5;
    #line 603 
    emg_wrapper_ena_get_link_ksettings(emg_15_container,emg_15_emg_param_1_5);
    #line 607 
    ldv_free((void *)emg_15_emg_param_1_5);
    #line 609 
    break;
    #line 611 
    case 23: 
             #line 611 
    ;
    #line 613 
    ethtool_op_get_link(emg_15_container);
    #line 615 
    break;
    #line 617 
    case 24: 
             #line 617 
    ;
    #line 619 
    emg_15_emg_param_1_3 = (struct ethtool_stats *)ldv_xmalloc_unknown_size(0UL);
    #line 619 
    emg_15_emg_param_1_3 = emg_15_emg_param_1_3;
    #line 620 
    emg_15_emg_param_2_4 = (unsigned long long *)ldv_xmalloc_unknown_size(0UL);
    #line 620 
    emg_15_emg_param_2_4 = emg_15_emg_param_2_4;
    #line 624 
    emg_wrapper_ena_get_ethtool_stats(emg_15_container,emg_15_emg_param_1_3,emg_15_emg_param_2_4);
    #line 628 
    ldv_free((void *)emg_15_emg_param_1_3);
    #line 629 
    ldv_free((void *)emg_15_emg_param_2_4);
    #line 631 
    break;
    #line 633 
    case 25: 
             #line 633 
    ;
    #line 635 
    emg_15_emg_param_1_2 = (struct ethtool_drvinfo *)ldv_xmalloc_unknown_size(0UL);
    #line 635 
    emg_15_emg_param_1_2 = emg_15_emg_param_1_2;
    #line 639 
    emg_wrapper_ena_get_drvinfo(emg_15_container,emg_15_emg_param_1_2);
    #line 643 
    ldv_free((void *)emg_15_emg_param_1_2);
    #line 645 
    break;
    #line 647 
    case 26: 
             #line 647 
    ;
    #line 649 
    emg_15_emg_param_1_1 = (struct ethtool_coalesce *)ldv_xmalloc_unknown_size(0UL);
    #line 649 
    emg_15_emg_param_1_1 = emg_15_emg_param_1_1;
    #line 653 
    emg_wrapper_ena_get_coalesce(emg_15_container,emg_15_emg_param_1_1);
    #line 657 
    ldv_free((void *)emg_15_emg_param_1_1);
    #line 659 
    break;
    #line 661 
    case 27: 
             #line 661 
    ;
    #line 663 
    emg_15_emg_param_1_0 = (struct ethtool_channels *)ldv_xmalloc_unknown_size(0UL);
    #line 663 
    emg_15_emg_param_1_0 = emg_15_emg_param_1_0;
    #line 667 
    emg_wrapper_ena_get_channels(emg_15_container,emg_15_emg_param_1_0);
    #line 671 
    ldv_free((void *)emg_15_emg_param_1_0);
    #line 674 
    if (emg_repeat_cnt_call_15 > 0) {
      #line 675 
      emg_repeat_cnt_call_15 --;
      #line 677 
      goto emg_call_15;
    }
    else 
         #line 679 
         __VERIFIER_assume(0);
    #line 683 
    break;
    #line 685 
    case 28: 
             #line 685 
    ;
    #line 689 
    break;
    #line 691 
    default: 
             #line 691 
    ;
    #line 691 
    __VERIFIER_assume(0);
  }
  #line 694 
  return (void *)0;
}

#line 699  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amazon/ena/ena.ko/concurrency safety/emg/0/environment_model.c"
void *emg_pci_pci_scenario_ena_pci_driver(void *arg0)
{
  #line 702 
  int emg_16_choice;
  #line 703 
  struct pci_driver *emg_16_container;
  #line 704 
  struct pci_device_id *emg_16_device_id;
  #line 705 
  int emg_16_emg_param_1_0;
  #line 706 
  struct pci_dev *emg_16_resource_0;
  #line 707 
  struct pm_message emg_16_resource_1;
  #line 708 
  int emg_16_ret;
  #line 709 
  int emg_repeat_cnt_main_16_1 = 1;
  #line 710 
  int emg_repeat_cnt_call_16_1 = 1;
  #line 711 
  int emg_repeat_cnt_call_16_0 = 1;
  #line 712 
  int emg_repeat_cnt_main_16_0 = 1;
  #line 714 
  struct emg_struct_pci_scenario_ena_pci_driver_16 *data = (struct emg_struct_pci_scenario_ena_pci_driver_16 *)arg0;
  #line 718 
  emg_16_choice = 0;
  #line 719 
  emg_16_ret = ldv_undef_int();
  #line 720 
  emg_16_choice = 0;
  #line 721 
  emg_16_container = emg_alias_ena_pci_driver;
  #line 722 
  emg_16_ret = ldv_undef_int();
  #line 724 
  __VERIFIER_assume(data->arg0 == emg_alias_ena_pci_driver);
  #line 726 
  if (data != (struct emg_struct_pci_scenario_ena_pci_driver_16 *)0) {
    #line 727 
    emg_16_container = data->arg0;
    #line 728 
    ldv_free((void *)data);
  }
  #line 733 
  emg_16_resource_0 = (struct pci_dev *)ldv_xmalloc(3312UL);
  #line 734 
  emg_16_choice = __ldv_undef_int_range(0,4);
  #line 735 
  emg_16_device_id = emg_16_container->id_table + (unsigned long)emg_16_choice;
  #line 739 
  goto emg_main_16;
  #line 743 
  return (void *)0;
  #line 746 
  emg_call_16: 
               #line 746 
  ;
  #line 747 
  switch (ldv_undef_int()) {
    #line 748 
    case 0: 
            #line 748 
    ;
    #line 750 
    pci_sriov_configure_simple(emg_16_resource_0,emg_16_emg_param_1_0);
    #line 753 
    if (emg_repeat_cnt_call_16_0 > 0) {
      #line 754 
      emg_repeat_cnt_call_16_0 --;
      #line 756 
      goto emg_call_16;
    }
    else 
         #line 758 
         __VERIFIER_assume(0);
    #line 762 
    break;
    #line 764 
    case 1: 
            #line 764 
    ;
    #line 766 
    emg_16_ret = emg_wrapper_ena_suspend(emg_16_resource_0,emg_16_resource_1);
    #line 771 
    emg_16_ret = ldv_filter_err_code(emg_16_ret);
    #line 775 
    emg_wrapper_ena_resume(emg_16_resource_0);
    #line 778 
    if (emg_repeat_cnt_call_16_1 > 0) {
      #line 779 
      emg_repeat_cnt_call_16_1 --;
      #line 781 
      goto emg_call_16;
    }
    else 
         #line 783 
         __VERIFIER_assume(0);
    #line 787 
    break;
    #line 789 
    case 2: 
            #line 789 
    ;
    #line 791 
    if (emg_16_container->shutdown != (void (*)(struct pci_dev *))0) 
      #line 792 
      (*(emg_16_container->shutdown))(emg_16_resource_0);
    #line 797 
    emg_wrapper_ena_remove(emg_16_resource_0);
    #line 800 
    if (emg_repeat_cnt_main_16_1 > 0) {
      #line 801 
      emg_repeat_cnt_main_16_1 --;
      #line 803 
      goto emg_main_16;
    }
    else 
         #line 805 
         __VERIFIER_assume(0);
    #line 809 
    break;
    #line 811 
    default: 
             #line 811 
    ;
    #line 811 
    __VERIFIER_assume(0);
  }
  #line 814 
  return (void *)0;
  #line 817 
  emg_main_16: 
               #line 817 
  ;
  #line 818 
  if (ldv_undef_int() != 0) {
    #line 821 
    ldv_pre_probe();
    #line 825 
    emg_16_ret = emg_wrapper_ena_probe(emg_16_resource_0,emg_16_device_id);
    #line 830 
    emg_16_ret = ldv_post_probe(emg_16_ret);
    #line 833 
    if (ldv_undef_int() != 0) {
      #line 835 
      __VERIFIER_assume(emg_16_ret == 0);
      #line 839 
      goto emg_call_16;
    }
    else 
         #line 844 
         __VERIFIER_assume(emg_16_ret != 0);
    #line 848 
    if (emg_repeat_cnt_main_16_0 > 0) {
      #line 849 
      emg_repeat_cnt_main_16_0 --;
      #line 851 
      goto emg_main_16;
    }
    else 
         #line 853 
         __VERIFIER_assume(0);
  }
  else 
       #line 859 
       ldv_free((void *)emg_16_resource_0);
  #line 867 
  return (void *)0;
}

#line 872  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amazon/ena/ena.ko/concurrency safety/emg/0/environment_model.c"
void *emg_timer_timer_scenario_3(void *arg0)
{
  #line 875 
  struct timer_list *emg_17_container;
  #line 876 
  unsigned long emg_17_emg_param_0_0;
  #line 878 
  struct emg_struct_timer_scenario_3_17 *data = (struct emg_struct_timer_scenario_3_17 *)arg0;
  #line 883 
  if (data != (struct emg_struct_timer_scenario_3_17 *)0) {
    #line 884 
    emg_17_container = data->arg0;
    #line 885 
    ldv_free((void *)data);
  }
  #line 891 
  ldv_switch_to_interrupt_context();
  #line 895 
  if (emg_17_container->function != (void (*)(struct timer_list *))0) 
    #line 896 
    (*(emg_17_container->function))((struct timer_list *)emg_17_emg_param_0_0);
  #line 902 
  ldv_switch_to_process_context();
  #line 909 
  return (void *)0;
}

#line 914  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amazon/ena/ena.ko/concurrency safety/emg/0/environment_model.c"
int emg___pci_register_driver(struct pci_driver *arg0, struct module *arg1, char *arg2)
{
  #line 917 
  struct pci_driver *emg_2_pci_driver;
  #line 919 
  emg_2_pci_driver = emg_alias_ena_pci_driver;
  #line 920 
  if (ldv_undef_int() != 0) {
    #line 922 
    emg_2_pci_driver = arg0;
    #line 926 
    emg_dispatch_register_2(emg_2_pci_driver);
    #line 930 
    return 0;
  }
  else {
    #line 934 
    return ldv_undef_int_negative();
  }
}

#line 942  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amazon/ena/ena.ko/concurrency safety/emg/0/environment_model.c"
struct net_device *emg_alloc_etherdev_mqs(int arg0, unsigned int arg1, unsigned int arg2)
{
  #line 945 
  struct net_device *emg_3_netdev;
  #line 947 
  if (ldv_undef_int() != 0) {
    #line 949 
    emg_3_netdev = (struct net_device *)ldv_xmalloc(3328UL);
    #line 953 
    return emg_3_netdev;
  }
  else 
       #line 957 
       return (struct net_device *)0;
}

#line 965  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amazon/ena/ena.ko/concurrency safety/emg/0/environment_model.c"
int emg_del_timer(struct timer_list *arg0)
{
  #line 968 
  struct timer_list *emg_4_timer_list;
  #line 971 
  emg_4_timer_list = arg0;
  #line 975 
  emg_dispatch_instance_deregister_4(emg_4_timer_list);
  #line 976 
  ;
  #line 976 
  return 0;
}

#line 982  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amazon/ena/ena.ko/concurrency safety/emg/0/environment_model.c"
int emg_del_timer_sync(struct timer_list *arg0)
{
  #line 985 
  struct timer_list *emg_5_timer_list;
  #line 988 
  emg_5_timer_list = arg0;
  #line 992 
  emg_dispatch_instance_deregister_5(emg_5_timer_list);
  #line 993 
  ;
  #line 993 
  return 0;
}

#line 999  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amazon/ena/ena.ko/concurrency safety/emg/0/environment_model.c"
void *emg_free_irq(unsigned int arg0, void *arg1)
{
  #line 1002 
  int emg_6_line;
  #line 1005 
  emg_6_line = (int)arg0;
  #line 1009 
  emg_dispatch_irq_deregister_6(emg_6_line);
  #line 1010 
  ;
  #line 1010 
  return (void *)0;
}

#line 1016  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amazon/ena/ena.ko/concurrency safety/emg/0/environment_model.c"
void emg_free_netdev(struct net_device *arg0)
{
  #line 1019 
  struct net_device *emg_7_netdev;
  #line 1022 
  emg_7_netdev = arg0;
  #line 1023 
  ldv_free((void *)emg_7_netdev);
  #line 1026 
  return;
}

#line 1031  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amazon/ena/ena.ko/concurrency safety/emg/0/environment_model.c"
int emg_mod_timer(struct timer_list *arg0, unsigned long arg1)
{
  #line 1034 
  struct timer_list *emg_8_timer_list;
  #line 1036 
  if (ldv_undef_int() != 0) {
    #line 1038 
    emg_8_timer_list = arg0;
    #line 1042 
    emg_dispatch_instance_register_8(emg_8_timer_list);
    #line 1046 
    return 1;
  }
  else 
       #line 1050 
       return 0;
}

#line 1058  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amazon/ena/ena.ko/concurrency safety/emg/0/environment_model.c"
void emg_pci_unregister_driver(struct pci_driver *arg0)
{
  #line 1061 
  struct pci_driver *emg_9_pci_driver;
  #line 1063 
  emg_9_pci_driver = emg_alias_ena_pci_driver;
  #line 1065 
  emg_9_pci_driver = arg0;
  #line 1069 
  emg_dispatch_deregister_9(emg_9_pci_driver);
  #line 1072 
  return;
}

#line 1077  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amazon/ena/ena.ko/concurrency safety/emg/0/environment_model.c"
_Bool emg_queue_work(struct workqueue_struct *arg0, struct work_struct *arg1)
{
  #line 1080 
  struct work_struct *emg_10_work_struct;
  #line 1082 
  if (ldv_undef_int() != 0) {
    #line 1084 
    emg_10_work_struct = arg1;
    #line 1088 
    if (emg_10_work_struct->func != (void (*)(struct work_struct *))0) 
      #line 1089 
      (*(emg_10_work_struct->func))(emg_10_work_struct);
    #line 1094 
    return (_Bool)1;
  }
  else 
       #line 1098 
       return (_Bool)0;
}

#line 1106  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amazon/ena/ena.ko/concurrency safety/emg/0/environment_model.c"
int emg_register_netdev(struct net_device *arg0)
{
  #line 1109 
  struct net_device *emg_11_netdev;
  #line 1110 
  int emg_11_ret;
  #line 1113 
  emg_11_ret = ldv_undef_int();
  #line 1114 
  emg_11_ret = ldv_undef_int();
  #line 1115 
  if (ldv_undef_int() != 0) {
    #line 1117 
    emg_11_netdev = arg0;
    #line 1121 
    emg_11_ret = emg_wrapper_ena_open(emg_11_netdev);
    #line 1124 
    if (ldv_undef_int() != 0) {
      #line 1126 
      __VERIFIER_assume(emg_11_ret == 0);
      #line 1130 
      emg_dispatch_register_11(emg_11_netdev);
      #line 1134 
      return 0;
    }
    else {
      #line 1138 
      __VERIFIER_assume(emg_11_ret != 0);
      #line 1139 
      ldv_failed_register_netdev();
      #line 1140 
      return ldv_undef_int_negative();
    }
  }
  else {
    #line 1145 
    ldv_failed_register_netdev();
    #line 1146 
    return ldv_undef_int_negative();
  }
}

#line 1154  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amazon/ena/ena.ko/concurrency safety/emg/0/environment_model.c"
int emg_request_irq(unsigned int arg0, enum irqreturn (*arg1)(int , void *), unsigned long arg2, char *arg3, void *arg4)
{
  #line 1157 
  enum irqreturn (*emg_12_callback)(int , void *);
  #line 1158 
  void *emg_12_data;
  #line 1159 
  int emg_12_line;
  #line 1160 
  enum irqreturn (*emg_12_thread)(int , void *);
  #line 1162 
  if (ldv_undef_int() != 0) {
    #line 1164 
    emg_12_line = (int)arg0;
    #line 1165 
    emg_12_callback = arg1;
    #line 1166 
    emg_12_thread = (enum irqreturn (*)(int , void *))0;
    #line 1167 
    emg_12_data = arg4;
    #line 1171 
    emg_dispatch_irq_register_12(emg_12_line,emg_12_callback,emg_12_thread,emg_12_data);
    #line 1175 
    return 0;
  }
  else {
    #line 1179 
    return ldv_undef_int_negative();
  }
}

#line 1187  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amazon/ena/ena.ko/concurrency safety/emg/0/environment_model.c"
void emg_unregister_netdev(struct net_device *arg0)
{
  #line 1190 
  struct net_device *emg_13_netdev;
  #line 1193 
  emg_13_netdev = arg0;
  #line 1197 
  emg_wrapper_ena_close(emg_13_netdev);
  #line 1201 
  emg_dispatch_deregister_13(emg_13_netdev);
  #line 1204 
  return;
}

#line 1209  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amazon/ena/ena.ko/concurrency safety/emg/0/environment_model.c"
void *emg_entry_point_insmod(void *arg0)
{
  #line 1212 
  int emg_1_ret;
  #line 1215 
  emg_1_ret = emg_ena_init();
  #line 1216 
  emg_1_ret = ldv_post_init(emg_1_ret);
  #line 1219 
  if (ldv_undef_int() != 0) {
    #line 1221 
    __VERIFIER_assume(emg_1_ret == 0);
    #line 1225 
    emg_ena_cleanup();
  }
  else 
       #line 1229 
       __VERIFIER_assume(emg_1_ret != 0);
  #line 1233 
  return (void *)0;
}

#line 1238  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/amazon/ena/ena.ko/concurrency safety/emg/0/environment_model.c"
int main(void)
{
  #line 1240 
  ldv_initialize();
  #line 1242 
  emg_entry_point_insmod((void *)0);
  #line 1244 
  return 0;
}

